{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/207970396", "pull_request_review_id": 143355072, "id": 207970396, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzk3MDM5Ng==", "diff_hunk": "@@ -78,44 +78,59 @@ SparseTensor new_with_tensor_sparse(const LongTensor& indices, const Tensor& val\n     values = values_;\n   }\n \n-  // TODO: This is a temporary test until we support zero-size dims.\n-  // I'm NOT adding the \"obvious\" bypass code, because it wasn't supported\n-  // previously\n-  AT_CHECK(indices.numel() != 0, \"cannot construct sparse tensor with empty indices; use the nullary constructor instead\");\n-\n   const SparseType& dtype = values.type().toSparse();\n \n   // If sizes are not given, it is inferred as max index of each dim.\n   int64_t sparseDims = indices.size(0);\n   int64_t denseDims = values.dim() - 1;\n \n   std::vector<int64_t> computed_sizes(sparseDims + denseDims);\n-  // NB: It used to keepdim. I think that was wrong.\n-  LongTensor computed_indices_sizes = std::get</* values */ 0>(indices.max(/* dim */ 1, /* keepdim */ false));\n-  computed_indices_sizes.add_(1); // len = max_index + 1\n-  LongTensor cpu_computed_indices_sizes;\n-  if (computed_indices_sizes.is_cuda()) {\n-    cpu_computed_indices_sizes = at::CPU(kLong).tensor(computed_indices_sizes.sizes());\n-    cpu_computed_indices_sizes.copy_(computed_indices_sizes);\n+  if (indices.numel() > 0) {\n+    // If the indices has elements in it, we infer the minimum sparse dimension sizes\n+    // as the max value of each dim in indices.\n+    // NB: It used to keepdim. I think that was wrong.\n+    LongTensor computed_indices_sizes = std::get</* values */ 0>(indices.max(/* dim */ 1, /* keepdim */ false));\n+    computed_indices_sizes.add_(1); // len = max_index + 1\n+    LongTensor cpu_computed_indices_sizes;\n+    if (computed_indices_sizes.is_cuda()) {\n+      cpu_computed_indices_sizes = at::CPU(kLong).tensor(computed_indices_sizes.sizes());\n+      cpu_computed_indices_sizes.copy_(computed_indices_sizes);\n+    } else {\n+      cpu_computed_indices_sizes = computed_indices_sizes;\n+    }\n+    auto cpu_computed_indices_sizes_accessor = cpu_computed_indices_sizes.accessor<int64_t, 1>();\n+    for (int64_t d = 0; d < sparseDims; d++) {\n+      computed_sizes[static_cast<size_t>(d)] = cpu_computed_indices_sizes_accessor[d];\n+    }\n   } else {\n-    cpu_computed_indices_sizes = computed_indices_sizes;\n-  }\n-  auto cpu_computed_indices_sizes_accessor = cpu_computed_indices_sizes.accessor<int64_t, 1>();\n-  for (int64_t d = 0; d < sparseDims; d++) {\n-    computed_sizes[static_cast<size_t>(d)] = cpu_computed_indices_sizes_accessor[d];\n+    // If the indices doesn't have elements in it, there is not enough information\n+    // to know what the minimum sparse dimension sizes should be, and in this case\n+    // we set them to 0\n+    for (int64_t d = 0; d < sparseDims; d++) {\n+      computed_sizes[static_cast<size_t>(d)] = 0;\n+    }\n   }\n   for (int64_t d = 0; d < denseDims; d++) {\n     computed_sizes[static_cast<size_t>(sparseDims + d)] = values.size(d+1);\n   }\n   return _new_with_dims_and_tensor_sparse(dtype, sparseDims, denseDims, computed_sizes, indices, values);\n }\n \n-SparseTensor new_with_size_sparse(const SparseType& dtype, ArrayRef<int64_t> size) {\n+SparseTensor new_with_dims_and_size_sparse(const SparseType& dtype, int64_t sparseDims, int64_t denseDims, ArrayRef<int64_t> size) {\n   SparseTensor self = new_sparse(dtype);\n-  _raw_resize_sparse(self, size.size(), 0, size);\n+  AT_CHECK(size.size() != 0, \"cannot construct sparse tensor with empty size and no values; use the nullary constructor instead\");", "path": "aten/src/ATen/native/sparse/SparseTensor.cpp", "position": null, "original_position": 63, "commit_id": "f7b1f23e8f85e8484934de71c9708933421009d0", "original_commit_id": "b82e27fe1b554170056673f61f2e35568b6c49bb", "user": {"login": "gchanan", "id": 3768583, "node_id": "MDQ6VXNlcjM3Njg1ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3768583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gchanan", "html_url": "https://github.com/gchanan", "followers_url": "https://api.github.com/users/gchanan/followers", "following_url": "https://api.github.com/users/gchanan/following{/other_user}", "gists_url": "https://api.github.com/users/gchanan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gchanan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gchanan/subscriptions", "organizations_url": "https://api.github.com/users/gchanan/orgs", "repos_url": "https://api.github.com/users/gchanan/repos", "events_url": "https://api.github.com/users/gchanan/events{/privacy}", "received_events_url": "https://api.github.com/users/gchanan/received_events", "type": "User", "site_admin": false}, "body": "what's the nullary constructor?  If you mean e.g. sparse.FloatTensor that doesn't seem applicable because you can't create a scalar.", "created_at": "2018-08-06T17:29:28Z", "updated_at": "2018-11-23T15:48:49Z", "html_url": "https://github.com/pytorch/pytorch/pull/9279#discussion_r207970396", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/9279", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/207970396"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/9279#discussion_r207970396"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/9279"}}, "body_html": "<p>what's the nullary constructor?  If you mean e.g. sparse.FloatTensor that doesn't seem applicable because you can't create a scalar.</p>", "body_text": "what's the nullary constructor?  If you mean e.g. sparse.FloatTensor that doesn't seem applicable because you can't create a scalar."}