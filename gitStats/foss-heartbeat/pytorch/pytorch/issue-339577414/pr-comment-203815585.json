{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/203815585", "pull_request_review_id": 138775895, "id": 203815585, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzgxNTU4NQ==", "diff_hunk": "@@ -57,29 +66,56 @@ std::unique_ptr<Storage> SparseTensorImpl::storage() {\n   AT_ERROR(\"sparse tensors do not have storage\");\n }\n \n+// Takes indices and values and directly puts them into the sparse tensor, no copy.\n+// NOTE: this function is unsafe because it doesn't check whether any indices are\n+// out of boundaries of `sizes`, so it should ONLY be used where we know that the\n+// indices are guaranteed to be within bounds.\n+#ifndef USE_TH_SIZE_ZERO_DIM\n void SparseTensorImpl::set_indices_and_values(const Tensor& indices, const Tensor& values) {\n-  // TODO: Explicit empty test is needed because we don't handle size zero\n-  // dimensions at the moment\n-  bool empty = values.numel() == 0;\n+#else\n+void SparseTensorImpl::set_indices_and_values_unsafe(const Tensor& indices, const Tensor& values) {\n+#endif\n   AT_CHECK(values.type().toSparse() == type(), \"values type must match sparse tensor type\");\n   AT_CHECK(indices.type().scalarType() == kLong, \"indices must be an int64 tensor\");\n   AT_CHECK(indices.type().backend() == values.type().backend(), \"backend of indices (\", indices.type().backend(), \") must match backend of values (\", values.type().backend(), \")\");\n   AT_CHECK(!indices.is_cuda() || indices.get_device() == values.get_device(), \"device of indices (\", indices.get_device(), \") must match device of values (\", values.get_device(), \")\");\n+\n+#ifndef USE_TH_SIZE_ZERO_DIM\n+  // TODO: Explicit empty test is needed because we don't handle size zero\n+  // dimensions at the moment\n+  bool empty = values.numel() == 0;\n   if (!empty) {\n-    AT_CHECK(indices.dim() == 2, \"indices must be nDim x nnz\");\n-    AT_CHECK(indices.size(1) == values.size(0), \"indices and values must have same nnz\");\n+    AT_CHECK(indices.dim() == 2, \"indices must be nDim x nnz, but got: \", indices.sizes());\n+    AT_CHECK(indices.size(1) == values.size(0), \"indices and values must have same nnz, but got nnz from indices: \", indices.size(1), \", nnz from values: \", values.size(0));\n     AT_CHECK(indices.size(0) == sparseDims_, \"indices has incorrect first dimension, expected \", sparseDims_, \", got \", indices.size(0));\n     AT_CHECK(values.dim() == denseDims_ + 1, \"values has incorrect number of dimensions, expected \", denseDims_ + 1, \", got \", values.dim());\n   } else {\n     AT_CHECK(indices.numel() == 0, \"if values is empty, indices must be empty too\");\n   }\n+#else\n+  AT_CHECK(indices.dim() == 2, \"indices must be nDim x nnz, but got: \", indices.sizes());\n+  AT_CHECK(indices.size(1) == values.size(0), \"indices and values must have same nnz, but got nnz from indices: \", indices.size(1), \", nnz from values: \", values.size(0));\n+  AT_CHECK(indices.size(0) == sparseDims_, \"indices has incorrect first dimension, expected \", sparseDims_, \", got \", indices.size(0));\n+  AT_CHECK(values.dim() == denseDims_ + 1, \"values has incorrect number of dimensions, expected \", denseDims_ + 1, \", got \", values.dim());\n+\n+  auto dense_size_original = sizes().slice(sparseDims_);\n+  auto dense_size_new = values.sizes().slice(1);\n+  AT_CHECK(dense_size_original.equals(dense_size_new), \"values has incorrect dense dims size, expected \", dense_size_original, \", got \", dense_size_new);", "path": "aten/src/ATen/SparseTensorImpl.cpp", "position": null, "original_position": 69, "commit_id": "f7b1f23e8f85e8484934de71c9708933421009d0", "original_commit_id": "2d7f892678d30e2563d78b68c31b03b3605f8b3c", "user": {"login": "gchanan", "id": 3768583, "node_id": "MDQ6VXNlcjM3Njg1ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3768583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gchanan", "html_url": "https://github.com/gchanan", "followers_url": "https://api.github.com/users/gchanan/followers", "following_url": "https://api.github.com/users/gchanan/following{/other_user}", "gists_url": "https://api.github.com/users/gchanan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gchanan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gchanan/subscriptions", "organizations_url": "https://api.github.com/users/gchanan/orgs", "repos_url": "https://api.github.com/users/gchanan/repos", "events_url": "https://api.github.com/users/gchanan/events{/privacy}", "received_events_url": "https://api.github.com/users/gchanan/received_events", "type": "User", "site_admin": false}, "body": "Wouldn't it be clearer if the error message was in terms of the entire values size (i.e. got values size, ..., expected values size, ...), instead of the the slice of the values size?  The check itself looks good, though.", "created_at": "2018-07-19T17:47:52Z", "updated_at": "2018-11-23T15:47:42Z", "html_url": "https://github.com/pytorch/pytorch/pull/9279#discussion_r203815585", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/9279", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/203815585"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/9279#discussion_r203815585"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/9279"}}, "body_html": "<p>Wouldn't it be clearer if the error message was in terms of the entire values size (i.e. got values size, ..., expected values size, ...), instead of the the slice of the values size?  The check itself looks good, though.</p>", "body_text": "Wouldn't it be clearer if the error message was in terms of the entire values size (i.e. got values size, ..., expected values size, ...), instead of the the slice of the values size?  The check itself looks good, though."}