{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/211819856", "pull_request_review_id": 148321998, "id": 211819856, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMTgxOTg1Ng==", "diff_hunk": "@@ -1121,37 +1121,47 @@ def do_test(t):\n         do_test(self.SparseTensor())\n \n     def _test_resize_shape(self, x_i, x_v, x_size, y_i, y_v, y_size):\n-        x = torch.sparse_coo_tensor(torch.zeros(x_i), torch.randn(x_v), torch.Size(x_size))\n+        x_v_numel = torch.zeros(x_v).numel()\n+        y_v_numel = torch.zeros(y_v).numel()\n+        x = torch.sparse_coo_tensor(torch.zeros(x_i),\n+                                    torch.arange(x_v_numel).resize_(x_v).to(torch.float),\n+                                    torch.Size(x_size))\n         x_dense = x.to_dense()\n-        y = torch.sparse_coo_tensor(torch.zeros(y_i), torch.randn(y_v), torch.Size(y_size))\n+        y = torch.sparse_coo_tensor(torch.zeros(y_i),\n+                                    torch.ones(y_v).to(torch.float),\n+                                    torch.Size(y_size))\n         y_dense = y.to_dense()\n         x.resize_as_(y)\n         x_dense.resize_as_(y_dense)\n         self.assertEqual(x.shape, y.shape)\n         self.assertEqual(x._sparseDims(), y._sparseDims())\n         self.assertEqual(x._denseDims(), y._denseDims())\n-        self.assertEqual(x.to_dense(), x_dense)\n+        # Here we make sure that the original data are preserved after resizing\n+        self.assertEqual(x.to_dense().view(-1)[0:x_v_numel].view(x_v),\n+                         x_dense.view(-1)[0:x_v_numel].view(x_v))", "path": "test/test_sparse.py", "position": null, "original_position": 24, "commit_id": "f7b1f23e8f85e8484934de71c9708933421009d0", "original_commit_id": "b10e06fbb4320fdd1a87beeed6eb165be59e1831", "user": {"login": "gchanan", "id": 3768583, "node_id": "MDQ6VXNlcjM3Njg1ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3768583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gchanan", "html_url": "https://github.com/gchanan", "followers_url": "https://api.github.com/users/gchanan/followers", "following_url": "https://api.github.com/users/gchanan/following{/other_user}", "gists_url": "https://api.github.com/users/gchanan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gchanan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gchanan/subscriptions", "organizations_url": "https://api.github.com/users/gchanan/orgs", "repos_url": "https://api.github.com/users/gchanan/repos", "events_url": "https://api.github.com/users/gchanan/events{/privacy}", "received_events_url": "https://api.github.com/users/gchanan/received_events", "type": "User", "site_admin": false}, "body": "nice!  how about also checking that the shape of x and y match up with the shape of x_dense and y_dense?", "created_at": "2018-08-22T03:27:43Z", "updated_at": "2018-11-23T15:49:44Z", "html_url": "https://github.com/pytorch/pytorch/pull/9279#discussion_r211819856", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/9279", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/211819856"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/9279#discussion_r211819856"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/9279"}}, "body_html": "<p>nice!  how about also checking that the shape of x and y match up with the shape of x_dense and y_dense?</p>", "body_text": "nice!  how about also checking that the shape of x and y match up with the shape of x_dense and y_dense?"}