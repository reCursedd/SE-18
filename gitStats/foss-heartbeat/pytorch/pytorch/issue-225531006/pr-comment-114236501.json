{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/114236501", "pull_request_review_id": 35685764, "id": 114236501, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNDIzNjUwMQ==", "diff_hunk": "@@ -8,78 +8,85 @@\n from common_nn import TEST_CUDA\n from numbers import Number\n \n-# triplet := (index type, value type, sparse type)\n-cpu_triplet = (\n-    torch.LongTensor,\n-    torch.DoubleTensor,\n-    torch.sparse.DoubleTensor)\n \n-if TEST_CUDA:\n-    cuda_triplet = (\n-        torch.cuda.LongTensor,\n-        torch.cuda.DoubleTensor,\n-        torch.cuda.sparse.DoubleTensor)\n+def cpu_only(inner):\n+    def outer(self, *args, **kwargs):\n+        unittest.skipIf(self.is_cuda, \"Test is CPU-only\")(inner)(self, *args, **kwargs)\n+    return outer\n \n \n class TestSparse(TestCase):\n \n-    @staticmethod\n-    def _gen_sparse(d, nnz, with_size, is_cuda=False):\n+    def setUp(self):\n+        # These parameters control the various ways we can run the test.\n+        # We will subclass and override this method to implement CUDA\n+        # tests\n+        self.is_cuda = False\n+        self.IndexTensor = torch.LongTensor\n+        self.ValueTensor = torch.DoubleTensor\n+        self.SparseTensor = torch.sparse.DoubleTensor\n+\n+    def _gen_sparse(self, d, nnz, with_size):\n+        # TODO: Consider implementing this in the CUDA case by directly\n+        # performing the operations on the GPU.  You won't be able to\n+        # use torch.rand/torch.randn in this case because they are\n+        # CPU-only.  If you do this, you can remove the is_cuda branch\n+        # at the end.\n+\n         if isinstance(with_size, Number):\n             v = torch.randn(nnz)\n             i = (torch.rand(d, nnz) * with_size).type(torch.LongTensor)\n             x = torch.sparse.DoubleTensor(i, v)\n         else:\n+            # Generate a sparse tensor with d sparse dimensions; the\n+            # rest the dimensions with_size[d:] are dense.\n             v_size = [nnz] + list(with_size[d:])\n             v = torch.randn(*v_size)\n             i = torch.rand(d, nnz) * \\\n                 torch.Tensor(with_size[:d]).repeat(nnz, 1).transpose(0, 1)\n             i = i.type(torch.LongTensor)\n             x = torch.sparse.DoubleTensor(i, v, torch.Size(with_size))\n \n-        if is_cuda:\n+        if self.is_cuda:\n             return x.cuda(), i.cuda(), v.cuda()\n         else:\n             return x, i.clone(), v.clone()\n \n-    def _test_basic(self, is_cuda):\n-        x, i, v = self._gen_sparse(3, 10, 100, is_cuda)\n+    def randn(self, *args, **kwargs):\n+        # TODO: Maybe do this directly on GPU", "path": "test/test_sparse.py", "position": 64, "original_position": 64, "commit_id": "f2b0ae3e9118ea674bb7c5583df6a781aef5af10", "original_commit_id": "f2b0ae3e9118ea674bb7c5583df6a781aef5af10", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "Yes. But then I thought, \"Maybe they did it this way on purpose, so that the random seed behavior was consistent over CPU and GPU.\" But I'm probably overthinking it :)", "created_at": "2017-05-02T01:53:35Z", "updated_at": "2018-11-23T15:33:18Z", "html_url": "https://github.com/pytorch/pytorch/pull/1421#discussion_r114236501", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/1421", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/114236501"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/1421#discussion_r114236501"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/1421"}}, "body_html": "<p>Yes. But then I thought, \"Maybe they did it this way on purpose, so that the random seed behavior was consistent over CPU and GPU.\" But I'm probably overthinking it :)</p>", "body_text": "Yes. But then I thought, \"Maybe they did it this way on purpose, so that the random seed behavior was consistent over CPU and GPU.\" But I'm probably overthinking it :)", "in_reply_to_id": 114236185}