{"url": "https://api.github.com/repos/pytorch/pytorch/issues/8988", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/8988/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/8988/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/8988/events", "html_url": "https://github.com/pytorch/pytorch/issues/8988", "id": 336678003, "node_id": "MDU6SXNzdWUzMzY2NzgwMDM=", "number": 8988, "title": "[Feature Request] tensordot", "user": {"login": "jcmgray", "id": 8982598, "node_id": "MDQ6VXNlcjg5ODI1OTg=", "avatar_url": "https://avatars3.githubusercontent.com/u/8982598?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jcmgray", "html_url": "https://github.com/jcmgray", "followers_url": "https://api.github.com/users/jcmgray/followers", "following_url": "https://api.github.com/users/jcmgray/following{/other_user}", "gists_url": "https://api.github.com/users/jcmgray/gists{/gist_id}", "starred_url": "https://api.github.com/users/jcmgray/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jcmgray/subscriptions", "organizations_url": "https://api.github.com/users/jcmgray/orgs", "repos_url": "https://api.github.com/users/jcmgray/repos", "events_url": "https://api.github.com/users/jcmgray/events{/privacy}", "received_events_url": "https://api.github.com/users/jcmgray/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 466131885, "node_id": "MDU6TGFiZWw0NjYxMzE4ODU=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/needs%20discussion", "name": "needs discussion", "color": "cc317c", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-06-28T15:46:38Z", "updated_at": "2018-09-05T04:11:28Z", "closed_at": "2018-09-05T04:11:28Z", "author_association": "NONE", "body_html": "<p><code>tensordot</code> would be a useful function to have for general contractions between tensors. It looks like all the basic functionality is already present, but not a <a href=\"https://docs.scipy.org/doc/numpy/reference/generated/numpy.tensordot.html\" rel=\"nofollow\">numpy-matching api</a>. One nice gain if this was present would be that <code>pytorch</code> could be used as a backend by <a href=\"https://github.com/dgasmith/opt_einsum\"><code>opt_einsum</code></a> for order-optimized tensor contractions.</p>\n<p>Two simple and purely python options would be:</p>\n<ol>\n<li>a <code>dot/matmul</code> based method - like <a href=\"https://gist.github.com/deanmark/9aec75b7dc9fa71c93c4bc85c5438777\"><strong>this gist</strong></a> (adapted from numpy's implementation itself I think)</li>\n<li>an <code>einsum</code> based method - like in <a href=\"https://github.com/devinamatthews/tblis/pull/17/files\"><strong>this PR</strong></a> (not for pytorch but similarly translates <code>tensordot</code> calls to <code>einsum</code> calls)</li>\n</ol>", "body_text": "tensordot would be a useful function to have for general contractions between tensors. It looks like all the basic functionality is already present, but not a numpy-matching api. One nice gain if this was present would be that pytorch could be used as a backend by opt_einsum for order-optimized tensor contractions.\nTwo simple and purely python options would be:\n\na dot/matmul based method - like this gist (adapted from numpy's implementation itself I think)\nan einsum based method - like in this PR (not for pytorch but similarly translates tensordot calls to einsum calls)", "body": "``tensordot`` would be a useful function to have for general contractions between tensors. It looks like all the basic functionality is already present, but not a [numpy-matching api](https://docs.scipy.org/doc/numpy/reference/generated/numpy.tensordot.html). One nice gain if this was present would be that ``pytorch`` could be used as a backend by [``opt_einsum``](https://github.com/dgasmith/opt_einsum) for order-optimized tensor contractions.\r\n\r\nTwo simple and purely python options would be:\r\n\r\n1. a ``dot/matmul`` based method - like [__this gist__](https://gist.github.com/deanmark/9aec75b7dc9fa71c93c4bc85c5438777) (adapted from numpy's implementation itself I think)\r\n2. an ``einsum`` based method - like in [__this PR__](https://github.com/devinamatthews/tblis/pull/17/files) (not for pytorch but similarly translates ``tensordot`` calls to ``einsum`` calls)"}