{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/424604264", "html_url": "https://github.com/pytorch/pytorch/issues/11988#issuecomment-424604264", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/11988", "id": 424604264, "node_id": "MDEyOklzc3VlQ29tbWVudDQyNDYwNDI2NA==", "user": {"login": "akamaus", "id": 58955, "node_id": "MDQ6VXNlcjU4OTU1", "avatar_url": "https://avatars0.githubusercontent.com/u/58955?v=4", "gravatar_id": "", "url": "https://api.github.com/users/akamaus", "html_url": "https://github.com/akamaus", "followers_url": "https://api.github.com/users/akamaus/followers", "following_url": "https://api.github.com/users/akamaus/following{/other_user}", "gists_url": "https://api.github.com/users/akamaus/gists{/gist_id}", "starred_url": "https://api.github.com/users/akamaus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/akamaus/subscriptions", "organizations_url": "https://api.github.com/users/akamaus/orgs", "repos_url": "https://api.github.com/users/akamaus/repos", "events_url": "https://api.github.com/users/akamaus/events{/privacy}", "received_events_url": "https://api.github.com/users/akamaus/received_events", "type": "User", "site_admin": false}, "created_at": "2018-09-26T06:47:57Z", "updated_at": "2018-09-26T06:47:57Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=655866\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/colesbury\">@colesbury</a> here it is</p>\n<pre><code>Program received signal SIGILL, Illegal instruction.\n0x00007fffe9123485 in at::parallel_for&lt;void at::vml::(anonymous namespace)::vfloor&lt;double&gt;(double*, double const*, long)::{lambda(long, long)#1}&gt; ()\n   from /nix/store/v1zd6aqz2x3y3qsbfkx3z6kg7zi6b09m-python3.6-pytorch-0.4.1/lib/python3.6/site-packages/torch/lib/libcaffe2.so\n(gdb) disas\nDump of assembler code for function _ZN2at12parallel_forIZNS_3vml12_GLOBAL__N_16vfloorIdEEvPT_PKS4_lEUlllE_EEvlllS4_._omp_fn.66:\n   0x00007fffe9123300 &lt;+0&gt;:     push   %r13\n   0x00007fffe9123302 &lt;+2&gt;:     push   %r12\n   0x00007fffe9123304 &lt;+4&gt;:     mov    %rdi,%r12\n   0x00007fffe9123307 &lt;+7&gt;:     push   %rbp\n   0x00007fffe9123308 &lt;+8&gt;:     push   %rbx\n   0x00007fffe9123309 &lt;+9&gt;:     sub    $0x68,%rsp\n   0x00007fffe912330d &lt;+13&gt;:    mov    (%rdi),%r13\n   0x00007fffe9123310 &lt;+16&gt;:    mov    %fs:0x28,%rax\n   0x00007fffe9123319 &lt;+25&gt;:    mov    %rax,0x58(%rsp)\n   0x00007fffe912331e &lt;+30&gt;:    xor    %eax,%eax\n   0x00007fffe9123320 &lt;+32&gt;:    callq  0x7fffe86c9ac0 &lt;omp_get_num_threads@plt&gt;\n   0x00007fffe9123325 &lt;+37&gt;:    movslq %eax,%rbx\n   0x00007fffe9123328 &lt;+40&gt;:    callq  0x7fffe86ca1c0 &lt;omp_get_thread_num@plt&gt;\n   0x00007fffe912332d &lt;+45&gt;:    movslq %eax,%rsi\n   0x00007fffe9123330 &lt;+48&gt;:    mov    0x8(%r12),%rax\n   0x00007fffe9123335 &lt;+53&gt;:    mov    (%rax),%rbp\n   0x00007fffe9123338 &lt;+56&gt;:    mov    %rbp,%rax\n   0x00007fffe912333b &lt;+59&gt;:    sub    %r13,%rax\n   0x00007fffe912333e &lt;+62&gt;:    lea    -0x1(%rbx,%rax,1),%rax\n   0x00007fffe9123343 &lt;+67&gt;:    cqto   \n   0x00007fffe9123345 &lt;+69&gt;:    idiv   %rbx\n   0x00007fffe9123348 &lt;+72&gt;:    imul   %rax,%rsi\n   0x00007fffe912334c &lt;+76&gt;:    lea    (%rsi,%r13,1),%rcx\n   0x00007fffe9123350 &lt;+80&gt;:    cmp    %rcx,%rbp\n   0x00007fffe9123353 &lt;+83&gt;:    jle    0x7fffe91234cc &lt;_ZN2at12parallel_forIZNS_3vml12_GLOBAL__N_16vfloorIdEEvPT_PKS4_lEUlllE_EEvlllS4_._omp_fn.66+460&gt;\n   0x00007fffe9123359 &lt;+89&gt;:    add    %rcx,%rax\n   0x00007fffe912335c &lt;+92&gt;:    mov    0x10(%r12),%rdx\n   0x00007fffe9123361 &lt;+97&gt;:    cmp    %rbp,%rax\n   0x00007fffe9123364 &lt;+100&gt;:   mov    %rax,0x8(%rsp)\n   0x00007fffe9123369 &lt;+105&gt;:   cmovle %rax,%rbp\n   0x00007fffe912336d &lt;+109&gt;:   sub    %rcx,%rbp\n   0x00007fffe9123370 &lt;+112&gt;:   mov    0x8(%rdx),%rsi\n   0x00007fffe9123374 &lt;+116&gt;:   mov    (%rdx),%rbx\n   0x00007fffe9123377 &lt;+119&gt;:   mov    %rbp,%rdx\n   0x00007fffe912337a &lt;+122&gt;:   shl    $0x3,%rcx\n   0x00007fffe912337e &lt;+126&gt;:   sar    $0x3f,%rdx\n   0x00007fffe9123382 &lt;+130&gt;:   shr    $0x3e,%rdx\n   0x00007fffe9123386 &lt;+134&gt;:   add    %rcx,%rsi\n   0x00007fffe9123389 &lt;+137&gt;:   add    %rcx,%rbx\n   0x00007fffe912338c &lt;+140&gt;:   lea    0x0(%rbp,%rdx,1),%rax\n   0x00007fffe9123391 &lt;+145&gt;:   mov    %rbp,%rcx\n---Type &lt;return&gt; to continue, or q &lt;return&gt; to quit--- \n   0x00007fffe9123394 &lt;+148&gt;:   and    $0x3,%eax\n   0x00007fffe9123397 &lt;+151&gt;:   sub    %rdx,%rax\n   0x00007fffe912339a &lt;+154&gt;:   sub    %rax,%rcx\n   0x00007fffe912339d &lt;+157&gt;:   test   %rcx,%rcx\n   0x00007fffe91233a0 &lt;+160&gt;:   jle    0x7fffe91234f0 &lt;_ZN2at12parallel_forIZNS_3vml12_GLOBAL__N_16vfloorIdEEvPT_PKS4_lEUlllE_EEvlllS4_._omp_fn.66+496&gt;\n   0x00007fffe91233a6 &lt;+166&gt;:   lea    -0x1(%rcx),%rdi\n   0x00007fffe91233aa &lt;+170&gt;:   mov    %rsi,%rax\n   0x00007fffe91233ad &lt;+173&gt;:   mov    %rbx,%rdx\n   0x00007fffe91233b0 &lt;+176&gt;:   shr    $0x2,%rdi\n   0x00007fffe91233b4 &lt;+180&gt;:   mov    %rdi,%rcx\n   0x00007fffe91233b7 &lt;+183&gt;:   shl    $0x5,%rcx\n   0x00007fffe91233bb &lt;+187&gt;:   lea    0x20(%rsi,%rcx,1),%r8\n   0x00007fffe91233c0 &lt;+192&gt;:   lea    0x30(%rsp),%rcx\n   0x00007fffe91233c5 &lt;+197&gt;:   nopl   (%rax)\n   0x00007fffe91233c8 &lt;+200&gt;:   movsd  (%rax),%xmm3\n   0x00007fffe91233cc &lt;+204&gt;:   add    $0x20,%rax\n   0x00007fffe91233d0 &lt;+208&gt;:   add    $0x20,%rdx\n   0x00007fffe91233d4 &lt;+212&gt;:   movsd  -0x18(%rax),%xmm2\n   0x00007fffe91233d9 &lt;+217&gt;:   movsd  -0x10(%rax),%xmm1\n   0x00007fffe91233de &lt;+222&gt;:   movsd  -0x8(%rax),%xmm0\n   0x00007fffe91233e3 &lt;+227&gt;:   roundsd $0x9,%xmm3,%xmm3\n   0x00007fffe91233e9 &lt;+233&gt;:   roundsd $0x9,%xmm0,%xmm0\n   0x00007fffe91233ef &lt;+239&gt;:   roundsd $0x9,%xmm2,%xmm2\n   0x00007fffe91233f5 &lt;+245&gt;:   roundsd $0x9,%xmm1,%xmm1\n   0x00007fffe91233fb &lt;+251&gt;:   movsd  %xmm3,0x30(%rsp)\n   0x00007fffe9123401 &lt;+257&gt;:   movsd  %xmm2,0x38(%rsp)\n   0x00007fffe9123407 &lt;+263&gt;:   movsd  %xmm1,0x40(%rsp)\n   0x00007fffe912340d &lt;+269&gt;:   movsd  %xmm0,0x48(%rsp)\n   0x00007fffe9123413 &lt;+275&gt;:   movdqa (%rcx),%xmm0\n   0x00007fffe9123417 &lt;+279&gt;:   movups %xmm0,-0x20(%rdx)\n   0x00007fffe912341b &lt;+283&gt;:   movdqa 0x10(%rcx),%xmm0\n   0x00007fffe9123420 &lt;+288&gt;:   movups %xmm0,-0x10(%rdx)\n   0x00007fffe9123424 &lt;+292&gt;:   cmp    %r8,%rax\n   0x00007fffe9123427 &lt;+295&gt;:   jne    0x7fffe91233c8 &lt;_ZN2at12parallel_forIZNS_3vml12_GLOBAL__N_16vfloorIdEEvPT_PKS4_lEUlllE_EEvlllS4_._omp_fn.66+200&gt;\n   0x00007fffe9123429 &lt;+297&gt;:   lea    0x4(,%rdi,4),%r12\n   0x00007fffe9123431 &lt;+305&gt;:   mov    %rbp,%rdx\n   0x00007fffe9123434 &lt;+308&gt;:   sub    %r12,%rdx\n   0x00007fffe9123437 &lt;+311&gt;:   test   %rdx,%rdx\n   0x00007fffe912343a &lt;+314&gt;:   jle    0x7fffe91234cc &lt;_ZN2at12parallel_forIZNS_3vml12_GLOBAL__N_16vfloorIdEEvPT_PKS4_lEUlllE_EEvlllS4_._omp_fn.66+460&gt;\n   0x00007fffe9123440 &lt;+320&gt;:   pxor   %xmm0,%xmm0\n   0x00007fffe9123444 &lt;+324&gt;:   lea    0x0(,%r12,8),%r13\n   0x00007fffe912344c &lt;+332&gt;:   lea    0x30(%rsp),%rdi\n---Type &lt;return&gt; to continue, or q &lt;return&gt; to quit---\n   0x00007fffe9123451 &lt;+337&gt;:   shl    $0x3,%rdx\n   0x00007fffe9123455 &lt;+341&gt;:   mov    $0x20,%ecx\n   0x00007fffe912345a &lt;+346&gt;:   sub    %r12d,%ebp\n   0x00007fffe912345d &lt;+349&gt;:   add    %r13,%rsi\n   0x00007fffe9123460 &lt;+352&gt;:   movaps %xmm0,0x30(%rsp)\n   0x00007fffe9123465 &lt;+357&gt;:   movaps %xmm0,0x40(%rsp)\n   0x00007fffe912346a &lt;+362&gt;:   callq  0x7fffe86caed0 &lt;__memcpy_chk@plt&gt;\n   0x00007fffe912346f &lt;+367&gt;:   movslq %ebp,%rdx\n   0x00007fffe9123472 &lt;+370&gt;:   lea    (%rbx,%r13,1),%rdi\n   0x00007fffe9123476 &lt;+374&gt;:   lea    0x10(%rsp),%rsi\n   0x00007fffe912347b &lt;+379&gt;:   shl    $0x3,%rdx\n   0x00007fffe912347f &lt;+383&gt;:   movsd  0x30(%rsp),%xmm0\n=&gt; 0x00007fffe9123485 &lt;+389&gt;:   roundsd $0x9,%xmm0,%xmm0\n   0x00007fffe912348b &lt;+395&gt;:   movsd  %xmm0,0x10(%rsp)\n   0x00007fffe9123491 &lt;+401&gt;:   movsd  0x38(%rsp),%xmm0\n   0x00007fffe9123497 &lt;+407&gt;:   roundsd $0x9,%xmm0,%xmm0\n   0x00007fffe912349d &lt;+413&gt;:   movsd  %xmm0,0x18(%rsp)\n   0x00007fffe91234a3 &lt;+419&gt;:   movsd  0x40(%rsp),%xmm0\n   0x00007fffe91234a9 &lt;+425&gt;:   roundsd $0x9,%xmm0,%xmm0\n   0x00007fffe91234af &lt;+431&gt;:   movsd  %xmm0,0x20(%rsp)\n   0x00007fffe91234b5 &lt;+437&gt;:   movsd  0x48(%rsp),%xmm0\n   0x00007fffe91234bb &lt;+443&gt;:   roundsd $0x9,%xmm0,%xmm0\n   0x00007fffe91234c1 &lt;+449&gt;:   movsd  %xmm0,0x28(%rsp)\n   0x00007fffe91234c7 &lt;+455&gt;:   callq  0x7fffe86c5ea0 &lt;memcpy@plt&gt;\n   0x00007fffe91234cc &lt;+460&gt;:   mov    0x58(%rsp),%rax\n   0x00007fffe91234d1 &lt;+465&gt;:   xor    %fs:0x28,%rax\n   0x00007fffe91234da &lt;+474&gt;:   jne    0x7fffe91234fb &lt;_ZN2at12parallel_forIZNS_3vml12_GLOBAL__N_16vfloorIdEEvPT_PKS4_lEUlllE_EEvlllS4_._omp_fn.66+507&gt;\n   0x00007fffe91234dc &lt;+476&gt;:   add    $0x68,%rsp\n   0x00007fffe91234e0 &lt;+480&gt;:   pop    %rbx\n   0x00007fffe91234e1 &lt;+481&gt;:   pop    %rbp\n   0x00007fffe91234e2 &lt;+482&gt;:   pop    %r12\n   0x00007fffe91234e4 &lt;+484&gt;:   pop    %r13\n   0x00007fffe91234e6 &lt;+486&gt;:   retq   \n   0x00007fffe91234e7 &lt;+487&gt;:   nopw   0x0(%rax,%rax,1)\n   0x00007fffe91234f0 &lt;+496&gt;:   mov    %rbp,%rdx\n   0x00007fffe91234f3 &lt;+499&gt;:   xor    %r12d,%r12d\n   0x00007fffe91234f6 &lt;+502&gt;:   jmpq   0x7fffe9123437 &lt;_ZN2at12parallel_forIZNS_3vml12_GLOBAL__N_16vfloorIdEEvPT_PKS4_lEUlllE_EEvlllS4_._omp_fn.66+311&gt;\n   0x00007fffe91234fb &lt;+507&gt;:   callq  0x7fffe86c8740 &lt;__stack_chk_fail@plt&gt;\nEnd of assembler dump.\n</code></pre>", "body_text": "@colesbury here it is\nProgram received signal SIGILL, Illegal instruction.\n0x00007fffe9123485 in at::parallel_for<void at::vml::(anonymous namespace)::vfloor<double>(double*, double const*, long)::{lambda(long, long)#1}> ()\n   from /nix/store/v1zd6aqz2x3y3qsbfkx3z6kg7zi6b09m-python3.6-pytorch-0.4.1/lib/python3.6/site-packages/torch/lib/libcaffe2.so\n(gdb) disas\nDump of assembler code for function _ZN2at12parallel_forIZNS_3vml12_GLOBAL__N_16vfloorIdEEvPT_PKS4_lEUlllE_EEvlllS4_._omp_fn.66:\n   0x00007fffe9123300 <+0>:     push   %r13\n   0x00007fffe9123302 <+2>:     push   %r12\n   0x00007fffe9123304 <+4>:     mov    %rdi,%r12\n   0x00007fffe9123307 <+7>:     push   %rbp\n   0x00007fffe9123308 <+8>:     push   %rbx\n   0x00007fffe9123309 <+9>:     sub    $0x68,%rsp\n   0x00007fffe912330d <+13>:    mov    (%rdi),%r13\n   0x00007fffe9123310 <+16>:    mov    %fs:0x28,%rax\n   0x00007fffe9123319 <+25>:    mov    %rax,0x58(%rsp)\n   0x00007fffe912331e <+30>:    xor    %eax,%eax\n   0x00007fffe9123320 <+32>:    callq  0x7fffe86c9ac0 <omp_get_num_threads@plt>\n   0x00007fffe9123325 <+37>:    movslq %eax,%rbx\n   0x00007fffe9123328 <+40>:    callq  0x7fffe86ca1c0 <omp_get_thread_num@plt>\n   0x00007fffe912332d <+45>:    movslq %eax,%rsi\n   0x00007fffe9123330 <+48>:    mov    0x8(%r12),%rax\n   0x00007fffe9123335 <+53>:    mov    (%rax),%rbp\n   0x00007fffe9123338 <+56>:    mov    %rbp,%rax\n   0x00007fffe912333b <+59>:    sub    %r13,%rax\n   0x00007fffe912333e <+62>:    lea    -0x1(%rbx,%rax,1),%rax\n   0x00007fffe9123343 <+67>:    cqto   \n   0x00007fffe9123345 <+69>:    idiv   %rbx\n   0x00007fffe9123348 <+72>:    imul   %rax,%rsi\n   0x00007fffe912334c <+76>:    lea    (%rsi,%r13,1),%rcx\n   0x00007fffe9123350 <+80>:    cmp    %rcx,%rbp\n   0x00007fffe9123353 <+83>:    jle    0x7fffe91234cc <_ZN2at12parallel_forIZNS_3vml12_GLOBAL__N_16vfloorIdEEvPT_PKS4_lEUlllE_EEvlllS4_._omp_fn.66+460>\n   0x00007fffe9123359 <+89>:    add    %rcx,%rax\n   0x00007fffe912335c <+92>:    mov    0x10(%r12),%rdx\n   0x00007fffe9123361 <+97>:    cmp    %rbp,%rax\n   0x00007fffe9123364 <+100>:   mov    %rax,0x8(%rsp)\n   0x00007fffe9123369 <+105>:   cmovle %rax,%rbp\n   0x00007fffe912336d <+109>:   sub    %rcx,%rbp\n   0x00007fffe9123370 <+112>:   mov    0x8(%rdx),%rsi\n   0x00007fffe9123374 <+116>:   mov    (%rdx),%rbx\n   0x00007fffe9123377 <+119>:   mov    %rbp,%rdx\n   0x00007fffe912337a <+122>:   shl    $0x3,%rcx\n   0x00007fffe912337e <+126>:   sar    $0x3f,%rdx\n   0x00007fffe9123382 <+130>:   shr    $0x3e,%rdx\n   0x00007fffe9123386 <+134>:   add    %rcx,%rsi\n   0x00007fffe9123389 <+137>:   add    %rcx,%rbx\n   0x00007fffe912338c <+140>:   lea    0x0(%rbp,%rdx,1),%rax\n   0x00007fffe9123391 <+145>:   mov    %rbp,%rcx\n---Type <return> to continue, or q <return> to quit--- \n   0x00007fffe9123394 <+148>:   and    $0x3,%eax\n   0x00007fffe9123397 <+151>:   sub    %rdx,%rax\n   0x00007fffe912339a <+154>:   sub    %rax,%rcx\n   0x00007fffe912339d <+157>:   test   %rcx,%rcx\n   0x00007fffe91233a0 <+160>:   jle    0x7fffe91234f0 <_ZN2at12parallel_forIZNS_3vml12_GLOBAL__N_16vfloorIdEEvPT_PKS4_lEUlllE_EEvlllS4_._omp_fn.66+496>\n   0x00007fffe91233a6 <+166>:   lea    -0x1(%rcx),%rdi\n   0x00007fffe91233aa <+170>:   mov    %rsi,%rax\n   0x00007fffe91233ad <+173>:   mov    %rbx,%rdx\n   0x00007fffe91233b0 <+176>:   shr    $0x2,%rdi\n   0x00007fffe91233b4 <+180>:   mov    %rdi,%rcx\n   0x00007fffe91233b7 <+183>:   shl    $0x5,%rcx\n   0x00007fffe91233bb <+187>:   lea    0x20(%rsi,%rcx,1),%r8\n   0x00007fffe91233c0 <+192>:   lea    0x30(%rsp),%rcx\n   0x00007fffe91233c5 <+197>:   nopl   (%rax)\n   0x00007fffe91233c8 <+200>:   movsd  (%rax),%xmm3\n   0x00007fffe91233cc <+204>:   add    $0x20,%rax\n   0x00007fffe91233d0 <+208>:   add    $0x20,%rdx\n   0x00007fffe91233d4 <+212>:   movsd  -0x18(%rax),%xmm2\n   0x00007fffe91233d9 <+217>:   movsd  -0x10(%rax),%xmm1\n   0x00007fffe91233de <+222>:   movsd  -0x8(%rax),%xmm0\n   0x00007fffe91233e3 <+227>:   roundsd $0x9,%xmm3,%xmm3\n   0x00007fffe91233e9 <+233>:   roundsd $0x9,%xmm0,%xmm0\n   0x00007fffe91233ef <+239>:   roundsd $0x9,%xmm2,%xmm2\n   0x00007fffe91233f5 <+245>:   roundsd $0x9,%xmm1,%xmm1\n   0x00007fffe91233fb <+251>:   movsd  %xmm3,0x30(%rsp)\n   0x00007fffe9123401 <+257>:   movsd  %xmm2,0x38(%rsp)\n   0x00007fffe9123407 <+263>:   movsd  %xmm1,0x40(%rsp)\n   0x00007fffe912340d <+269>:   movsd  %xmm0,0x48(%rsp)\n   0x00007fffe9123413 <+275>:   movdqa (%rcx),%xmm0\n   0x00007fffe9123417 <+279>:   movups %xmm0,-0x20(%rdx)\n   0x00007fffe912341b <+283>:   movdqa 0x10(%rcx),%xmm0\n   0x00007fffe9123420 <+288>:   movups %xmm0,-0x10(%rdx)\n   0x00007fffe9123424 <+292>:   cmp    %r8,%rax\n   0x00007fffe9123427 <+295>:   jne    0x7fffe91233c8 <_ZN2at12parallel_forIZNS_3vml12_GLOBAL__N_16vfloorIdEEvPT_PKS4_lEUlllE_EEvlllS4_._omp_fn.66+200>\n   0x00007fffe9123429 <+297>:   lea    0x4(,%rdi,4),%r12\n   0x00007fffe9123431 <+305>:   mov    %rbp,%rdx\n   0x00007fffe9123434 <+308>:   sub    %r12,%rdx\n   0x00007fffe9123437 <+311>:   test   %rdx,%rdx\n   0x00007fffe912343a <+314>:   jle    0x7fffe91234cc <_ZN2at12parallel_forIZNS_3vml12_GLOBAL__N_16vfloorIdEEvPT_PKS4_lEUlllE_EEvlllS4_._omp_fn.66+460>\n   0x00007fffe9123440 <+320>:   pxor   %xmm0,%xmm0\n   0x00007fffe9123444 <+324>:   lea    0x0(,%r12,8),%r13\n   0x00007fffe912344c <+332>:   lea    0x30(%rsp),%rdi\n---Type <return> to continue, or q <return> to quit---\n   0x00007fffe9123451 <+337>:   shl    $0x3,%rdx\n   0x00007fffe9123455 <+341>:   mov    $0x20,%ecx\n   0x00007fffe912345a <+346>:   sub    %r12d,%ebp\n   0x00007fffe912345d <+349>:   add    %r13,%rsi\n   0x00007fffe9123460 <+352>:   movaps %xmm0,0x30(%rsp)\n   0x00007fffe9123465 <+357>:   movaps %xmm0,0x40(%rsp)\n   0x00007fffe912346a <+362>:   callq  0x7fffe86caed0 <__memcpy_chk@plt>\n   0x00007fffe912346f <+367>:   movslq %ebp,%rdx\n   0x00007fffe9123472 <+370>:   lea    (%rbx,%r13,1),%rdi\n   0x00007fffe9123476 <+374>:   lea    0x10(%rsp),%rsi\n   0x00007fffe912347b <+379>:   shl    $0x3,%rdx\n   0x00007fffe912347f <+383>:   movsd  0x30(%rsp),%xmm0\n=> 0x00007fffe9123485 <+389>:   roundsd $0x9,%xmm0,%xmm0\n   0x00007fffe912348b <+395>:   movsd  %xmm0,0x10(%rsp)\n   0x00007fffe9123491 <+401>:   movsd  0x38(%rsp),%xmm0\n   0x00007fffe9123497 <+407>:   roundsd $0x9,%xmm0,%xmm0\n   0x00007fffe912349d <+413>:   movsd  %xmm0,0x18(%rsp)\n   0x00007fffe91234a3 <+419>:   movsd  0x40(%rsp),%xmm0\n   0x00007fffe91234a9 <+425>:   roundsd $0x9,%xmm0,%xmm0\n   0x00007fffe91234af <+431>:   movsd  %xmm0,0x20(%rsp)\n   0x00007fffe91234b5 <+437>:   movsd  0x48(%rsp),%xmm0\n   0x00007fffe91234bb <+443>:   roundsd $0x9,%xmm0,%xmm0\n   0x00007fffe91234c1 <+449>:   movsd  %xmm0,0x28(%rsp)\n   0x00007fffe91234c7 <+455>:   callq  0x7fffe86c5ea0 <memcpy@plt>\n   0x00007fffe91234cc <+460>:   mov    0x58(%rsp),%rax\n   0x00007fffe91234d1 <+465>:   xor    %fs:0x28,%rax\n   0x00007fffe91234da <+474>:   jne    0x7fffe91234fb <_ZN2at12parallel_forIZNS_3vml12_GLOBAL__N_16vfloorIdEEvPT_PKS4_lEUlllE_EEvlllS4_._omp_fn.66+507>\n   0x00007fffe91234dc <+476>:   add    $0x68,%rsp\n   0x00007fffe91234e0 <+480>:   pop    %rbx\n   0x00007fffe91234e1 <+481>:   pop    %rbp\n   0x00007fffe91234e2 <+482>:   pop    %r12\n   0x00007fffe91234e4 <+484>:   pop    %r13\n   0x00007fffe91234e6 <+486>:   retq   \n   0x00007fffe91234e7 <+487>:   nopw   0x0(%rax,%rax,1)\n   0x00007fffe91234f0 <+496>:   mov    %rbp,%rdx\n   0x00007fffe91234f3 <+499>:   xor    %r12d,%r12d\n   0x00007fffe91234f6 <+502>:   jmpq   0x7fffe9123437 <_ZN2at12parallel_forIZNS_3vml12_GLOBAL__N_16vfloorIdEEvPT_PKS4_lEUlllE_EEvlllS4_._omp_fn.66+311>\n   0x00007fffe91234fb <+507>:   callq  0x7fffe86c8740 <__stack_chk_fail@plt>\nEnd of assembler dump.", "body": "@colesbury here it is\r\n```\r\nProgram received signal SIGILL, Illegal instruction.\r\n0x00007fffe9123485 in at::parallel_for<void at::vml::(anonymous namespace)::vfloor<double>(double*, double const*, long)::{lambda(long, long)#1}> ()\r\n   from /nix/store/v1zd6aqz2x3y3qsbfkx3z6kg7zi6b09m-python3.6-pytorch-0.4.1/lib/python3.6/site-packages/torch/lib/libcaffe2.so\r\n(gdb) disas\r\nDump of assembler code for function _ZN2at12parallel_forIZNS_3vml12_GLOBAL__N_16vfloorIdEEvPT_PKS4_lEUlllE_EEvlllS4_._omp_fn.66:\r\n   0x00007fffe9123300 <+0>:     push   %r13\r\n   0x00007fffe9123302 <+2>:     push   %r12\r\n   0x00007fffe9123304 <+4>:     mov    %rdi,%r12\r\n   0x00007fffe9123307 <+7>:     push   %rbp\r\n   0x00007fffe9123308 <+8>:     push   %rbx\r\n   0x00007fffe9123309 <+9>:     sub    $0x68,%rsp\r\n   0x00007fffe912330d <+13>:    mov    (%rdi),%r13\r\n   0x00007fffe9123310 <+16>:    mov    %fs:0x28,%rax\r\n   0x00007fffe9123319 <+25>:    mov    %rax,0x58(%rsp)\r\n   0x00007fffe912331e <+30>:    xor    %eax,%eax\r\n   0x00007fffe9123320 <+32>:    callq  0x7fffe86c9ac0 <omp_get_num_threads@plt>\r\n   0x00007fffe9123325 <+37>:    movslq %eax,%rbx\r\n   0x00007fffe9123328 <+40>:    callq  0x7fffe86ca1c0 <omp_get_thread_num@plt>\r\n   0x00007fffe912332d <+45>:    movslq %eax,%rsi\r\n   0x00007fffe9123330 <+48>:    mov    0x8(%r12),%rax\r\n   0x00007fffe9123335 <+53>:    mov    (%rax),%rbp\r\n   0x00007fffe9123338 <+56>:    mov    %rbp,%rax\r\n   0x00007fffe912333b <+59>:    sub    %r13,%rax\r\n   0x00007fffe912333e <+62>:    lea    -0x1(%rbx,%rax,1),%rax\r\n   0x00007fffe9123343 <+67>:    cqto   \r\n   0x00007fffe9123345 <+69>:    idiv   %rbx\r\n   0x00007fffe9123348 <+72>:    imul   %rax,%rsi\r\n   0x00007fffe912334c <+76>:    lea    (%rsi,%r13,1),%rcx\r\n   0x00007fffe9123350 <+80>:    cmp    %rcx,%rbp\r\n   0x00007fffe9123353 <+83>:    jle    0x7fffe91234cc <_ZN2at12parallel_forIZNS_3vml12_GLOBAL__N_16vfloorIdEEvPT_PKS4_lEUlllE_EEvlllS4_._omp_fn.66+460>\r\n   0x00007fffe9123359 <+89>:    add    %rcx,%rax\r\n   0x00007fffe912335c <+92>:    mov    0x10(%r12),%rdx\r\n   0x00007fffe9123361 <+97>:    cmp    %rbp,%rax\r\n   0x00007fffe9123364 <+100>:   mov    %rax,0x8(%rsp)\r\n   0x00007fffe9123369 <+105>:   cmovle %rax,%rbp\r\n   0x00007fffe912336d <+109>:   sub    %rcx,%rbp\r\n   0x00007fffe9123370 <+112>:   mov    0x8(%rdx),%rsi\r\n   0x00007fffe9123374 <+116>:   mov    (%rdx),%rbx\r\n   0x00007fffe9123377 <+119>:   mov    %rbp,%rdx\r\n   0x00007fffe912337a <+122>:   shl    $0x3,%rcx\r\n   0x00007fffe912337e <+126>:   sar    $0x3f,%rdx\r\n   0x00007fffe9123382 <+130>:   shr    $0x3e,%rdx\r\n   0x00007fffe9123386 <+134>:   add    %rcx,%rsi\r\n   0x00007fffe9123389 <+137>:   add    %rcx,%rbx\r\n   0x00007fffe912338c <+140>:   lea    0x0(%rbp,%rdx,1),%rax\r\n   0x00007fffe9123391 <+145>:   mov    %rbp,%rcx\r\n---Type <return> to continue, or q <return> to quit--- \r\n   0x00007fffe9123394 <+148>:   and    $0x3,%eax\r\n   0x00007fffe9123397 <+151>:   sub    %rdx,%rax\r\n   0x00007fffe912339a <+154>:   sub    %rax,%rcx\r\n   0x00007fffe912339d <+157>:   test   %rcx,%rcx\r\n   0x00007fffe91233a0 <+160>:   jle    0x7fffe91234f0 <_ZN2at12parallel_forIZNS_3vml12_GLOBAL__N_16vfloorIdEEvPT_PKS4_lEUlllE_EEvlllS4_._omp_fn.66+496>\r\n   0x00007fffe91233a6 <+166>:   lea    -0x1(%rcx),%rdi\r\n   0x00007fffe91233aa <+170>:   mov    %rsi,%rax\r\n   0x00007fffe91233ad <+173>:   mov    %rbx,%rdx\r\n   0x00007fffe91233b0 <+176>:   shr    $0x2,%rdi\r\n   0x00007fffe91233b4 <+180>:   mov    %rdi,%rcx\r\n   0x00007fffe91233b7 <+183>:   shl    $0x5,%rcx\r\n   0x00007fffe91233bb <+187>:   lea    0x20(%rsi,%rcx,1),%r8\r\n   0x00007fffe91233c0 <+192>:   lea    0x30(%rsp),%rcx\r\n   0x00007fffe91233c5 <+197>:   nopl   (%rax)\r\n   0x00007fffe91233c8 <+200>:   movsd  (%rax),%xmm3\r\n   0x00007fffe91233cc <+204>:   add    $0x20,%rax\r\n   0x00007fffe91233d0 <+208>:   add    $0x20,%rdx\r\n   0x00007fffe91233d4 <+212>:   movsd  -0x18(%rax),%xmm2\r\n   0x00007fffe91233d9 <+217>:   movsd  -0x10(%rax),%xmm1\r\n   0x00007fffe91233de <+222>:   movsd  -0x8(%rax),%xmm0\r\n   0x00007fffe91233e3 <+227>:   roundsd $0x9,%xmm3,%xmm3\r\n   0x00007fffe91233e9 <+233>:   roundsd $0x9,%xmm0,%xmm0\r\n   0x00007fffe91233ef <+239>:   roundsd $0x9,%xmm2,%xmm2\r\n   0x00007fffe91233f5 <+245>:   roundsd $0x9,%xmm1,%xmm1\r\n   0x00007fffe91233fb <+251>:   movsd  %xmm3,0x30(%rsp)\r\n   0x00007fffe9123401 <+257>:   movsd  %xmm2,0x38(%rsp)\r\n   0x00007fffe9123407 <+263>:   movsd  %xmm1,0x40(%rsp)\r\n   0x00007fffe912340d <+269>:   movsd  %xmm0,0x48(%rsp)\r\n   0x00007fffe9123413 <+275>:   movdqa (%rcx),%xmm0\r\n   0x00007fffe9123417 <+279>:   movups %xmm0,-0x20(%rdx)\r\n   0x00007fffe912341b <+283>:   movdqa 0x10(%rcx),%xmm0\r\n   0x00007fffe9123420 <+288>:   movups %xmm0,-0x10(%rdx)\r\n   0x00007fffe9123424 <+292>:   cmp    %r8,%rax\r\n   0x00007fffe9123427 <+295>:   jne    0x7fffe91233c8 <_ZN2at12parallel_forIZNS_3vml12_GLOBAL__N_16vfloorIdEEvPT_PKS4_lEUlllE_EEvlllS4_._omp_fn.66+200>\r\n   0x00007fffe9123429 <+297>:   lea    0x4(,%rdi,4),%r12\r\n   0x00007fffe9123431 <+305>:   mov    %rbp,%rdx\r\n   0x00007fffe9123434 <+308>:   sub    %r12,%rdx\r\n   0x00007fffe9123437 <+311>:   test   %rdx,%rdx\r\n   0x00007fffe912343a <+314>:   jle    0x7fffe91234cc <_ZN2at12parallel_forIZNS_3vml12_GLOBAL__N_16vfloorIdEEvPT_PKS4_lEUlllE_EEvlllS4_._omp_fn.66+460>\r\n   0x00007fffe9123440 <+320>:   pxor   %xmm0,%xmm0\r\n   0x00007fffe9123444 <+324>:   lea    0x0(,%r12,8),%r13\r\n   0x00007fffe912344c <+332>:   lea    0x30(%rsp),%rdi\r\n---Type <return> to continue, or q <return> to quit---\r\n   0x00007fffe9123451 <+337>:   shl    $0x3,%rdx\r\n   0x00007fffe9123455 <+341>:   mov    $0x20,%ecx\r\n   0x00007fffe912345a <+346>:   sub    %r12d,%ebp\r\n   0x00007fffe912345d <+349>:   add    %r13,%rsi\r\n   0x00007fffe9123460 <+352>:   movaps %xmm0,0x30(%rsp)\r\n   0x00007fffe9123465 <+357>:   movaps %xmm0,0x40(%rsp)\r\n   0x00007fffe912346a <+362>:   callq  0x7fffe86caed0 <__memcpy_chk@plt>\r\n   0x00007fffe912346f <+367>:   movslq %ebp,%rdx\r\n   0x00007fffe9123472 <+370>:   lea    (%rbx,%r13,1),%rdi\r\n   0x00007fffe9123476 <+374>:   lea    0x10(%rsp),%rsi\r\n   0x00007fffe912347b <+379>:   shl    $0x3,%rdx\r\n   0x00007fffe912347f <+383>:   movsd  0x30(%rsp),%xmm0\r\n=> 0x00007fffe9123485 <+389>:   roundsd $0x9,%xmm0,%xmm0\r\n   0x00007fffe912348b <+395>:   movsd  %xmm0,0x10(%rsp)\r\n   0x00007fffe9123491 <+401>:   movsd  0x38(%rsp),%xmm0\r\n   0x00007fffe9123497 <+407>:   roundsd $0x9,%xmm0,%xmm0\r\n   0x00007fffe912349d <+413>:   movsd  %xmm0,0x18(%rsp)\r\n   0x00007fffe91234a3 <+419>:   movsd  0x40(%rsp),%xmm0\r\n   0x00007fffe91234a9 <+425>:   roundsd $0x9,%xmm0,%xmm0\r\n   0x00007fffe91234af <+431>:   movsd  %xmm0,0x20(%rsp)\r\n   0x00007fffe91234b5 <+437>:   movsd  0x48(%rsp),%xmm0\r\n   0x00007fffe91234bb <+443>:   roundsd $0x9,%xmm0,%xmm0\r\n   0x00007fffe91234c1 <+449>:   movsd  %xmm0,0x28(%rsp)\r\n   0x00007fffe91234c7 <+455>:   callq  0x7fffe86c5ea0 <memcpy@plt>\r\n   0x00007fffe91234cc <+460>:   mov    0x58(%rsp),%rax\r\n   0x00007fffe91234d1 <+465>:   xor    %fs:0x28,%rax\r\n   0x00007fffe91234da <+474>:   jne    0x7fffe91234fb <_ZN2at12parallel_forIZNS_3vml12_GLOBAL__N_16vfloorIdEEvPT_PKS4_lEUlllE_EEvlllS4_._omp_fn.66+507>\r\n   0x00007fffe91234dc <+476>:   add    $0x68,%rsp\r\n   0x00007fffe91234e0 <+480>:   pop    %rbx\r\n   0x00007fffe91234e1 <+481>:   pop    %rbp\r\n   0x00007fffe91234e2 <+482>:   pop    %r12\r\n   0x00007fffe91234e4 <+484>:   pop    %r13\r\n   0x00007fffe91234e6 <+486>:   retq   \r\n   0x00007fffe91234e7 <+487>:   nopw   0x0(%rax,%rax,1)\r\n   0x00007fffe91234f0 <+496>:   mov    %rbp,%rdx\r\n   0x00007fffe91234f3 <+499>:   xor    %r12d,%r12d\r\n   0x00007fffe91234f6 <+502>:   jmpq   0x7fffe9123437 <_ZN2at12parallel_forIZNS_3vml12_GLOBAL__N_16vfloorIdEEvPT_PKS4_lEUlllE_EEvlllS4_._omp_fn.66+311>\r\n   0x00007fffe91234fb <+507>:   callq  0x7fffe86c8740 <__stack_chk_fail@plt>\r\nEnd of assembler dump.\r\n```"}