{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/135415413", "pull_request_review_id": 58826359, "id": 135415413, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNTQxNTQxMw==", "diff_hunk": "@@ -249,26 +251,35 @@ def _reset(self):\n         self.cooldown_counter = 0\n         self.num_bad_epochs = 0\n \n+    \"\"\" Status codes to be returned by ReduceLROnPlateau.step() \"\"\"\n+    STATUS_WAITING = 1\n+    STATUS_UPDATED_BEST = 2\n+    STATUS_REDUCED_LR = 3\n+\n     def step(self, metrics, epoch=None):\n         current = metrics\n         if epoch is None:\n             epoch = self.last_epoch = self.last_epoch + 1\n         self.last_epoch = epoch\n \n-        if self.is_better(current, self.best):\n-            self.best = current\n-            self.num_bad_epochs = 0\n-        else:\n-            self.num_bad_epochs += 1\n-\n         if self.in_cooldown:\n             self.cooldown_counter -= 1\n             self.num_bad_epochs = 0  # ignore any bad epochs in cooldown\n+        else:\n+            self.num_bad_epochs += 1\n \n-        if self.num_bad_epochs > self.patience:\n-            self._reduce_lr(epoch)\n-            self.cooldown_counter = self.cooldown\n+        if self.is_better(current, self.best):\n+            self.best = current\n             self.num_bad_epochs = 0\n+            return self.STATUS_UPDATED_BEST\n+        else:\n+            if self.num_bad_epochs > self.patience:\n+                self._reduce_lr(epoch)\n+                self.cooldown_counter = self.cooldown\n+                self.num_bad_epochs = 0\n+                return self.STATUS_REDUCED_LR\n+            else:\n+                return self.STATUS_WAITING", "path": "torch/optim/lr_scheduler.py", "position": null, "original_position": 56, "commit_id": "a5f7fbff596b8e335b36bc098ace638cb397670a", "original_commit_id": "e02179e399a8f08f1f13dfba35c048f10b745125", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Not a big fan of integer return codes. I'd replace these constants with strings, so they can be used both as an enum, and can be easily printed too", "created_at": "2017-08-27T16:19:37Z", "updated_at": "2018-11-23T15:34:29Z", "html_url": "https://github.com/pytorch/pytorch/pull/2544#discussion_r135415413", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/2544", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/135415413"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/2544#discussion_r135415413"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/2544"}}, "body_html": "<p>Not a big fan of integer return codes. I'd replace these constants with strings, so they can be used both as an enum, and can be easily printed too</p>", "body_text": "Not a big fan of integer return codes. I'd replace these constants with strings, so they can be used both as an enum, and can be easily printed too"}