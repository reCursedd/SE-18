{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/421464733", "html_url": "https://github.com/pytorch/pytorch/pull/11715#issuecomment-421464733", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/11715", "id": 421464733, "node_id": "MDEyOklzc3VlQ29tbWVudDQyMTQ2NDczMw==", "user": {"login": "pietern", "id": 9845, "node_id": "MDQ6VXNlcjk4NDU=", "avatar_url": "https://avatars3.githubusercontent.com/u/9845?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietern", "html_url": "https://github.com/pietern", "followers_url": "https://api.github.com/users/pietern/followers", "following_url": "https://api.github.com/users/pietern/following{/other_user}", "gists_url": "https://api.github.com/users/pietern/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietern/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietern/subscriptions", "organizations_url": "https://api.github.com/users/pietern/orgs", "repos_url": "https://api.github.com/users/pietern/repos", "events_url": "https://api.github.com/users/pietern/events{/privacy}", "received_events_url": "https://api.github.com/users/pietern/received_events", "type": "User", "site_admin": false}, "created_at": "2018-09-14T19:43:33Z", "updated_at": "2018-09-14T19:43:33Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Nice, thanks for adding back.</p>\n<p>Couple of points:</p>\n<ul>\n<li>I was hacking something up where I put back the global <code>_backend</code> var and set it to the appropriate DistBackend enum value from <code>init_process_group</code>, such that the apex stuff will work regardless. For full backwards compatibility there also needs to be an alias of DistBackend to <code>dist_backend</code>. The problem here is that if we ask apex to change it, it will be a hard dependency on the latest version. I think we should add the function like you did, retain full backwards compatibility, and then remove the <code>_backend</code> property in the next minor release when it is acceptable to take a hard dependency on PT1. There is not really a way around this unless it is stubbed in downstream code.</li>\n<li>The <code>get_backend</code> function should return a DistBackend enum instead of a string IMO.</li>\n</ul>", "body_text": "Nice, thanks for adding back.\nCouple of points:\n\nI was hacking something up where I put back the global _backend var and set it to the appropriate DistBackend enum value from init_process_group, such that the apex stuff will work regardless. For full backwards compatibility there also needs to be an alias of DistBackend to dist_backend. The problem here is that if we ask apex to change it, it will be a hard dependency on the latest version. I think we should add the function like you did, retain full backwards compatibility, and then remove the _backend property in the next minor release when it is acceptable to take a hard dependency on PT1. There is not really a way around this unless it is stubbed in downstream code.\nThe get_backend function should return a DistBackend enum instead of a string IMO.", "body": "Nice, thanks for adding back.\r\n\r\nCouple of points:\r\n* I was hacking something up where I put back the global `_backend` var and set it to the appropriate DistBackend enum value from `init_process_group`, such that the apex stuff will work regardless. For full backwards compatibility there also needs to be an alias of DistBackend to `dist_backend`. The problem here is that if we ask apex to change it, it will be a hard dependency on the latest version. I think we should add the function like you did, retain full backwards compatibility, and then remove the `_backend` property in the next minor release when it is acceptable to take a hard dependency on PT1. There is not really a way around this unless it is stubbed in downstream code.\r\n* The `get_backend` function should return a DistBackend enum instead of a string IMO."}