{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/93228614", "pull_request_review_id": 13742749, "id": 93228614, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkzMjI4NjE0", "diff_hunk": "@@ -0,0 +1,220 @@\n+import torch\n+from torch import sparse\n+\n+import itertools\n+import random\n+import unittest\n+from common import TestCase\n+from numbers import Number\n+\n+SparseTensor = sparse.DoubleTensor\n+\n+\n+class TestSparse(TestCase):\n+    @staticmethod\n+    def _gen_sparse(d, nnz, with_size):\n+        v = torch.randn(nnz)\n+        if isinstance(with_size, Number):\n+            i = (torch.rand(d, nnz) * with_size).type(torch.LongTensor)\n+            x = SparseTensor(i, v)\n+        else:\n+            i = torch.rand(d, nnz) * \\\n+                    torch.Tensor(with_size).repeat(nnz, 1).transpose(0, 1)\n+            i = i.type(torch.LongTensor)\n+            x = SparseTensor(i, v, torch.LongTensor(with_size))\n+\n+        return x, i, v\n+\n+    def test_basic(self):\n+        x, i, v = self._gen_sparse(3, 10, 100)\n+\n+        self.assertEqual(i, x.indices())\n+        self.assertEqual(v, x.values())\n+\n+        x, i, v = self._gen_sparse(3, 10, [100, 100, 100])\n+        self.assertEqual(i, x.indices())\n+        self.assertEqual(v, x.values())\n+        self.assertEqual(x.ndimension(), 3)\n+        self.assertEqual(x.nnz(), 10)\n+        for i in range(3):\n+            self.assertEqual(x.size(i), 100)\n+\n+        # Make sure we can access empty indices / values\n+        x = SparseTensor()\n+        x.indices()\n+        x.values()", "path": "test/test_sparse.py", "position": null, "original_position": 45, "commit_id": "faf9836c10da24d1d5ca51639780bd34a0a414dd", "original_commit_id": "c8b8d1a447ee21655f2e2ba282ba7b23478db4f0", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Assert they're empty?", "created_at": "2016-12-20T12:35:59Z", "updated_at": "2018-11-23T15:32:02Z", "html_url": "https://github.com/pytorch/pytorch/pull/333#discussion_r93228614", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/333", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/93228614"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/333#discussion_r93228614"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/333"}}, "body_html": "<p>Assert they're empty?</p>", "body_text": "Assert they're empty?"}