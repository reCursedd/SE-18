{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/94681710", "pull_request_review_id": 15207567, "id": 94681710, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk0NjgxNzEw", "diff_hunk": "@@ -0,0 +1,220 @@\n+import torch\n+from torch import sparse\n+\n+import itertools\n+import random\n+import unittest\n+from common import TestCase\n+from numbers import Number\n+\n+SparseTensor = sparse.DoubleTensor\n+\n+\n+class TestSparse(TestCase):\n+    @staticmethod\n+    def _gen_sparse(d, nnz, with_size):\n+        v = torch.randn(nnz)\n+        if isinstance(with_size, Number):\n+            i = (torch.rand(d, nnz) * with_size).type(torch.LongTensor)\n+            x = SparseTensor(i, v)\n+        else:\n+            i = torch.rand(d, nnz) * \\\n+                    torch.Tensor(with_size).repeat(nnz, 1).transpose(0, 1)\n+            i = i.type(torch.LongTensor)\n+            x = SparseTensor(i, v, torch.Size(with_size))\n+\n+        return x, i, v\n+\n+    def test_basic(self):\n+        x, i, v = self._gen_sparse(3, 10, 100)\n+\n+        self.assertEqual(i, x.indices())\n+        self.assertEqual(v, x.values())\n+\n+        x, i, v = self._gen_sparse(3, 10, [100, 100, 100])\n+        self.assertEqual(i, x.indices())\n+        self.assertEqual(v, x.values())\n+        self.assertEqual(x.ndimension(), 3)\n+        self.assertEqual(x.nnz(), 10)\n+        for i in range(3):\n+            self.assertEqual(x.size(i), 100)\n+\n+        # Make sure we can access empty indices / values\n+        x = SparseTensor()\n+        self.assertEqual(x.indices().numel(), 0)\n+        self.assertEqual(x.values().numel(), 0)\n+\n+    def test_to_dense(self):\n+        i = torch.LongTensor([\n+            [0, 1, 2, 2],\n+            [0, 0, 0, 3],\n+            [0, 0, 1, 4],\n+        ])\n+        v = torch.Tensor([2, 1, 3, 4])\n+        x = SparseTensor(i, v, torch.Size([3, 4, 5]))\n+        res = torch.Tensor([\n+            [[2, 0, 0, 0, 0],\n+             [0, 0, 0, 0, 0],\n+             [0, 0, 0, 0, 0],\n+             [0, 0, 0, 0, 0]],\n+            [[1, 0, 0, 0, 0],\n+             [0, 0, 0, 0, 0],\n+             [0, 0, 0, 0, 0],\n+             [0, 0, 0, 0, 0]],\n+            [[0, 3, 0, 0, 0],\n+             [0, 0, 0, 0, 0],\n+             [0, 0, 0, 0, 0],\n+             [0, 0, 0, 0, 4]],\n+        ])\n+\n+        x.to_dense()  # Tests double to_dense for memory corruption\n+        x.to_dense()\n+        x.to_dense()\n+        self.assertEqual(res, x.to_dense())\n+\n+    def test_contig(self):\n+        i = torch.LongTensor([\n+            [1,  0, 35, 14, 39,  6, 71, 66, 40, 27],\n+            [92, 31, 62, 50, 22, 65, 89, 74, 56, 34],\n+        ])\n+        v = torch.Tensor([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n+        x = SparseTensor(i, v, torch.Size([100, 100]))\n+        exp_i = torch.LongTensor([\n+            [0,  1,  6, 14, 27, 35, 39, 40, 66, 71],\n+            [31, 92, 65, 50, 34, 62, 22, 56, 74, 89],\n+        ])\n+        exp_v = torch.Tensor([2, 1, 6, 4, 10, 3, 5, 9, 8, 7])\n+        x.contiguous()\n+        self.assertEqual(exp_i, x.indices())\n+        self.assertEqual(exp_v, x.values())\n+\n+        i = torch.LongTensor([\n+            [2, 0, 2, 1],\n+            [0, 0, 3, 0],\n+            [1, 0, 4, 0],\n+        ])\n+        v = torch.Tensor([3, 2, 4, 1])\n+        x = SparseTensor(i, v, torch.Size([3, 4, 5]))\n+        exp_i = torch.LongTensor([\n+            [0, 1, 2, 2],\n+            [0, 0, 0, 3],\n+            [0, 0, 1, 4],\n+        ])\n+        exp_v = torch.Tensor([2, 1, 3, 4])\n+\n+        x.contiguous()\n+        self.assertEqual(exp_i, x.indices())\n+        self.assertEqual(exp_v, x.values())\n+\n+        # Duplicate indices\n+        i = torch.LongTensor([\n+            [0, 0, 2, 0],\n+            [0, 0, 3, 0],\n+            [0, 0, 4, 0],\n+        ])\n+        v = torch.Tensor([3, 2, 4, 1])\n+        x = SparseTensor(i, v, torch.Size([3, 4, 5]))\n+        exp_i = torch.LongTensor([\n+            [0, 2],\n+            [0, 3],\n+            [0, 4],\n+        ])\n+        exp_v = torch.Tensor([6, 4])\n+\n+        x.contiguous()\n+        self.assertEqual(exp_i, x.indices())\n+        self.assertEqual(exp_v, x.values())\n+\n+    def test_transpose(self):\n+        x = self._gen_sparse(4, 20, 5)[0]\n+        y = x.to_dense()\n+\n+        for i, j in itertools.combinations(range(4), 2):\n+            x = x.transpose_(i, j)\n+            y = y.transpose(i, j)\n+            self.assertEqual(x.to_dense(), y)\n+\n+            x = x.transpose(i, j)\n+            y = y.transpose(i, j)\n+            self.assertEqual(x.to_dense(), y)\n+\n+    def test_mm(self):\n+        def test_shape(di, dj, dk):\n+            x, _, _ = self._gen_sparse(2, 20, [di, dj])\n+            t = torch.randn(di, dk)\n+            y = torch.randn(dj, dk)\n+            alpha = random.random()\n+            beta = random.random()\n+\n+            expected = torch.addmm(alpha, t, beta, x.to_dense(), y)\n+            res = torch.addmm(alpha, t, beta, x, y)\n+            self.assertEqual(res, expected)\n+\n+            expected = torch.addmm(t, x.to_dense(), y)\n+            res = torch.addmm(t, x, y)\n+            self.assertEqual(res, expected)\n+\n+            expected = torch.mm(x.to_dense(), y)\n+            res = torch.mm(x, y)\n+            self.assertEqual(res, expected)\n+\n+        test_shape(10, 100, 100)\n+        test_shape(100, 1000, 200)\n+        test_shape(64, 10000, 300)\n+\n+    def test_saddmm(self):\n+        def test_shape(di, dj, dk):\n+            x = self._gen_sparse(2, 20, [di, dj])[0]\n+            t = self._gen_sparse(2, 20, [di, dk])[0]\n+            y = torch.randn(dj, dk)\n+            alpha = random.random()\n+            beta = random.random()\n+\n+            expected = torch.addmm(alpha, t.to_dense(), beta, x.to_dense(), y)\n+            res = torch.saddmm(alpha, t, beta, x, y)\n+            self.assertEqual(res.to_dense(), expected)\n+\n+            expected = torch.addmm(t.to_dense(), x.to_dense(), y)\n+            res = torch.saddmm(t, x, y)\n+            self.assertEqual(res.to_dense(), expected)\n+\n+            expected = torch.mm(x.to_dense(), y)\n+            res = torch.smm(x, y)\n+            self.assertEqual(res.to_dense(), expected)\n+\n+        test_shape(7, 5, 3)\n+        test_shape(1000, 100, 100)\n+        test_shape(3000, 64, 300)\n+\n+    def test_spadd(self):\n+        def test_shape(*shape):\n+            x, _, _ = self._gen_sparse(len(shape), 10, shape)\n+            y = torch.randn(*shape)\n+            r = random.random()\n+\n+            expected = y + r * x.to_dense()\n+            res = torch.add(y, r, x)\n+\n+            self.assertEqual(res, expected)\n+\n+            # Non contiguous dense tensor\n+            s = list(shape)\n+            s[0] = shape[-1]\n+            s[-1] = shape[0]\n+            y = torch.randn(*s).transpose_(0, len(s) - 1)\n+            r = random.random()\n+\n+            expected = y + r * x.to_dense()\n+            res = torch.add(y, r, x)\n+\n+            self.assertEqual(res, expected)\n+\n+        test_shape(5, 6)\n+        test_shape(10, 10, 10)\n+        test_shape(50, 30, 20)\n+        test_shape(5, 5, 5, 5, 5, 5)", "path": "test/test_sparse.py", "position": 215, "original_position": 215, "commit_id": "faf9836c10da24d1d5ca51639780bd34a0a414dd", "original_commit_id": "b017cec6059c911e65cb6f90c00dc88b9cd9667c", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Can you add a test for addition to a dense tensor, multiplication by a scalar, etc? It can be another PR, but these are the cases that we're going to use, but there are no tests for them", "created_at": "2017-01-04T22:46:35Z", "updated_at": "2018-11-23T15:32:11Z", "html_url": "https://github.com/pytorch/pytorch/pull/333#discussion_r94681710", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/333", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/94681710"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/333#discussion_r94681710"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/333"}}, "body_html": "<p>Can you add a test for addition to a dense tensor, multiplication by a scalar, etc? It can be another PR, but these are the cases that we're going to use, but there are no tests for them</p>", "body_text": "Can you add a test for addition to a dense tensor, multiplication by a scalar, etc? It can be another PR, but these are the cases that we're going to use, but there are no tests for them"}