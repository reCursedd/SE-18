{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/93225184", "pull_request_review_id": 13742749, "id": 93225184, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkzMjI1MTg0", "diff_hunk": "@@ -0,0 +1,207 @@\n+#ifndef THS_GENERIC_FILE\n+#define THS_GENERIC_FILE \"generic/THSTensorMath.c\"\n+#else\n+\n+#define ROW_PTR2(t, r) (THTensor_(data)(t) + (r) * (t)->stride[0])\n+#define COL_PTR2(t, c) (THTensor_(data)(t) + (c) * (t)->stride[1])\n+\n+THLongTensor *THSTensor_(toCSR)(long const *indices, long dim, long nnz) {\n+  long h, i, hp0, hp1;\n+  THLongTensor *csr = THLongTensor_newWithSize1d(dim + 1);\n+  THLongTensor_zero(csr);\n+\n+  // Convert the sparse matrix to CSR format\n+#pragma omp parallel for private(i, h, hp0, hp1) schedule(static) if (nnz > 10000)\n+  for (i=0; i<nnz; i++) {\n+    hp0 = indices[i];\n+    hp1 = (i+1 == nnz) ?  dim : indices[i+1];\n+    if (hp0 != hp1) for (h = hp0; h < hp1; h++) {\n+      THTensor_fastSet1d(csr, h+1, i+1);\n+    }\n+  }\n+  return csr;\n+}\n+\n+void THSTensor_(spaddmm)(THTensor *r_, \n+    real beta, THTensor *t, \n+    real alpha, THSTensor *sparse, THTensor *dense) {\n+  long h, i;\n+  long dim_i, dim_j, dim_k; // ixj * jxk = ixk\n+  long nnz;\n+  THLongTensor *csr, *indices;\n+  THTensor *values;\n+\n+  THArgCheck(sparse->nDimension == 2, 2,\n+      \"matrices expected, got %dD tensor\", sparse->nDimension);\n+  THArgCheck(dense->nDimension == 2, 2,\n+      \"matrices expected, got %dD tensor\", dense->nDimension);\n+\n+  THSTensor_(contiguous)(sparse);\n+\n+  dim_i = THSTensor_(size)(sparse, 0);\n+  dim_j = THSTensor_(size)(sparse, 1);\n+  dim_k = THTensor_(size)(dense, 1);\n+\n+  THArgCheck(THTensor_(size)(dense, 0) == dim_j, 3,\n+      \"Expected dim 0 size %d, got %d\", dim_j, THTensor_(size)(dense, 0));\n+  THArgCheck(THTensor_(size)(t, 0) == dim_i, 1,\n+      \"Expected dim 0 size %d, got %d\", dim_i, THTensor_(size)(t, 0));\n+  THArgCheck(THTensor_(size)(t, 1) == dim_k, 1,\n+      \"Expected dim 1 size %d, got %d\", dim_k, THTensor_(size)(t, 1));\n+\n+  nnz     = THSTensor_(nnz)(sparse);\n+  indices = THSTensor_(indices)(sparse);\n+  values  = THSTensor_(values)(sparse);\n+\n+  csr = THSTensor_(toCSR)(THLongTensor_data(indices), dim_i, nnz);\n+\n+  // r_ = alpha * sparse * dense\n+  THTensor_(resize2d)(r_, dim_i, dim_k);\n+  THTensor_(mul)(r_, t, beta);\n+#pragma omp parallel for private(h, i) schedule(static) if (nnz > 10000)\n+  for (h = 0; h < dim_i; h++) {\n+    long i_start = THTensor_fastGet1d(csr, h);\n+    long i_end = THTensor_fastGet1d(csr, h+1);\n+    for (i = i_start; i < i_end; i++) {\n+      real val = THTensor_fastGet1d(values, i);\n+      long col = THTensor_fastGet2d(indices, 1, i);\n+      if (col >= 0 && col < dim_j) {\n+        THBlas_(axpy)(dim_k,\n+            alpha * val,\n+            ROW_PTR2(dense, col), dense->stride[1],\n+            ROW_PTR2(r_, h), r_->stride[1]);\n+      } else {\n+        THError(\"index out of bound. spmm: %d not between 1 and %d\",\n+            col, dim_j);\n+      }\n+    }\n+  }\n+\n+  THFree(csr);\n+  THFree(indices);\n+  THFree(values);\n+}\n+\n+void THSTensor_(sspaddmm)(THSTensor *r_, \n+    real beta, THSTensor *t, \n+    real alpha, THSTensor *sparse, THTensor *dense) {\n+  long h, i, p;\n+  long dim_i, dim_j, dim_k; // ixj * jxk = ixk\n+  long nnz, r_nnz, t_nnz;\n+  THLongTensor *csr, *indices, *newi, *narrowi;\n+  THTensor *values, *newv, *narrowv;\n+\n+  THArgCheck(sparse->nDimension == 2, 2,\n+      \"matrices expected, got %dD tensor\", sparse->nDimension);\n+  THArgCheck(dense->nDimension == 2, 2,\n+      \"matrices expected, got %dD tensor\", dense->nDimension);\n+\n+  THSTensor_(contiguous)(sparse);\n+\n+  dim_i = THSTensor_(size)(sparse, 0);\n+  dim_j = THSTensor_(size)(sparse, 1);\n+  dim_k = THTensor_(size)(dense, 1);\n+\n+  THArgCheck(THTensor_(size)(dense, 0) == dim_j, 3,\n+      \"Expected dim 0 size %d, got %d\", dim_j, THTensor_(size)(dense, 0));\n+  THArgCheck(THSTensor_(size)(t, 0) == dim_i, 1,\n+      \"Expected dim 0 size %d, got %d\", dim_i, THSTensor_(size)(t, 0));\n+  THArgCheck(THSTensor_(size)(t, 1) == dim_k, 1,\n+      \"Expected dim 1 size %d, got %d\", dim_k, THSTensor_(size)(t, 1));\n+\n+  nnz     = THSTensor_(nnz)(sparse);\n+  indices = THSTensor_(indices)(sparse);\n+  values  = THSTensor_(values)(sparse);\n+\n+  csr = THSTensor_(toCSR)(THLongTensor_data(indices), dim_i, nnz);\n+\n+  t_nnz = THSTensor_(nnz)(t);\n+  r_nnz = nnz * dim_k + t_nnz;\n+  newi = THLongTensor_newWithSize2d(2, r_nnz);\n+  newv = THTensor_(newWithSize1d)(r_nnz);\n+  THTensor_(zero)(newv);\n+\n+  if (t_nnz != 0) {\n+    narrowi = THLongTensor_newNarrow(newi, 1, 0, t_nnz);\n+    narrowv = THTensor_(newNarrow)(newv, 0, 0, t_nnz);\n+\n+    THLongTensor_copy(narrowi, THSTensor_(indices)(t));\n+    THTensor_(copy)(narrowv, THSTensor_(values)(t));\n+    THTensor_(mul)(newv, newv, beta);\n+\n+    THFree(narrowi);\n+    THFree(narrowv);\n+  }\n+\n+  // sparse = sparse * dense\n+  p = t_nnz;\n+\n+  for (h = 0; h < dim_i; h++) {\n+    long i_start = THTensor_fastGet1d(csr, h);\n+    long i_end = THTensor_fastGet1d(csr, h+1);\n+    for (i = i_start; i < i_end; i++) {\n+      real val = THTensor_fastGet1d(values, i);\n+      long col = THTensor_fastGet2d(indices, 1, i);\n+      if (col >= 0 && col < dim_j) {\n+        THBlas_(axpy)(dim_k,\n+            alpha * val,\n+            ROW_PTR2(dense, col), dense->stride[1],\n+            ROW_PTR2(newv, p), 1);\n+      } else {\n+        THError(\"index out of bound. sspmm: %d not between 1 and %d\",\n+            col, dim_j);\n+      }\n+    }\n+    // Fill up the indices with the right values\n+    if (i_start != i_end) {\n+      for (i = 0; i < dim_k; i++) {\n+        THTensor_fastSet2d(newi, 0, p + i, h);\n+        THTensor_fastSet2d(newi, 1, p + i, i);\n+      }\n+      p += dim_k;\n+    }\n+  }\n+\n+\n+  THSTensor_(resize2d)(r_, dim_i, dim_k);\n+  // to avoid a clone\n+  r_->indices = newi;\n+  r_-> values = newv;\n+  r_->    nnz = p;\n+  THSTensor_(contiguous)(r_);\n+\n+  THFree(csr);\n+  THFree(indices);\n+  THFree(values);", "path": "torch/lib/THS/generic/THSTensorMath.c", "position": null, "original_position": 175, "commit_id": "faf9836c10da24d1d5ca51639780bd34a0a414dd", "original_commit_id": "c8b8d1a447ee21655f2e2ba282ba7b23478db4f0", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Tensors here, not raw memory", "created_at": "2016-12-20T12:11:51Z", "updated_at": "2018-11-23T15:32:01Z", "html_url": "https://github.com/pytorch/pytorch/pull/333#discussion_r93225184", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/333", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/93225184"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/333#discussion_r93225184"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/333"}}, "body_html": "<p>Tensors here, not raw memory</p>", "body_text": "Tensors here, not raw memory"}