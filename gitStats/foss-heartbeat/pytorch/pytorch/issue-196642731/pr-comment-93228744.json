{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/93228744", "pull_request_review_id": 13742749, "id": 93228744, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkzMjI4NzQ0", "diff_hunk": "@@ -0,0 +1,231 @@\n+PyObject *THSPTensorClass = NULL;\n+\n+PyObject * THSPTensor_(NewEmpty)()\n+{\n+  return THSPTensor_(New)(THSTensor_(new)(LIBRARY_STATE_NOARGS));\n+}\n+\n+PyObject * THSPTensor_(New)(THSTensor *ptr)\n+{\n+  THPObjectPtr args = PyTuple_New(0);\n+  THPObjectPtr kwargs;\n+  THPUtils_assert(args, \"Could not create a new sparse tensor object - \"\n+      \"failed to allocate argument tuple\");\n+  if (ptr) {\n+    kwargs = Py_BuildValue(\"{s:N}\", \"cdata\", PyLong_FromVoidPtr(ptr));\n+    THPUtils_assert(kwargs, \"Could not create a new sparse tensor object - \"\n+        \"failed to allocate keyword argument dictionary\");\n+  }\n+  PyObject *result = PyObject_Call(THSPTensorClass, args, kwargs);\n+  return result;\n+}\n+\n+static void THSPTensor_(dealloc)(THSPTensor* self)\n+{\n+  if (self->cdata)\n+    THSTensor_(free)(LIBRARY_STATE self->cdata);\n+  Py_TYPE(self)->tp_free((PyObject*)self);\n+}\n+\n+static PyObject * THSPTensor_(pynew)(PyTypeObject *type, PyObject *args, PyObject *kwargs)\n+{\n+#ifdef THC_GENERIC_FILE\n+  printf(\"Sparse CUDA Tensors not supported!\\n\");\n+  return NULL;\n+#else\n+  HANDLE_TH_ERRORS\n+    Py_ssize_t num_args = args ? PyTuple_Size(args) : 0;\n+\n+  THSPTensorPtr self = (THSPTensor *)type->tp_alloc(type, 0);\n+  THPUtils_assert(self, \"failed to allocate a \" THSPTensorStr \" object\");\n+  THLongStoragePtr sizes;\n+\n+  // Internally we allow constructing with a keyword only argument cdata\n+  if (kwargs != NULL) {\n+    Py_ssize_t num_kwargs = PyDict_Size(kwargs);\n+    if (num_args == 0) {\n+      PyObject *cdata_ptr = PyDict_GetItemString(kwargs, \"cdata\");\n+      if (num_kwargs == 1 && cdata_ptr && THPUtils_checkLong(cdata_ptr)) {\n+        THSTensor *ptr = (THSTensor*)PyLong_AsVoidPtr(cdata_ptr);\n+        self->cdata = ptr;\n+        return (PyObject*)self.release();\n+      }\n+    }\n+    // This is an internal option, so we don't want to advertise it.\n+    THPUtils_assert(num_kwargs == 0, THSPTensorStr \" constructor doesn't \"\n+        \"accept any keyword arguments\");\n+  }\n+\n+  // torch.Tensor()\n+  if (num_args == 0) {\n+    self->cdata = THSTensor_(new)(LIBRARY_STATE_NOARGS);\n+    return (PyObject*)self.release();\n+  }\n+\n+  PyObject *first_arg = PyTuple_GET_ITEM(args, 0);\n+\n+  // torch.SparseTensor(size)\n+  if (num_args == 1 && THPUtils_checkLong(first_arg)) {\n+    long size = THPUtils_unpackLong(first_arg);\n+    self->cdata = THSTensor_(newWithSize1d)(LIBRARY_STATE size);\n+  }\n+  // torch.SparseTensor(torch.LongStorage sizes)\n+  else if (num_args == 1 && THPLongStorage_Check(first_arg)) {\n+    THLongStorage *sizes = ((THPLongStorage*)first_arg)->cdata;\n+    self->cdata = THSTensor_(newWithSize)(LIBRARY_STATE sizes);\n+  }\n+  // torch.SparseTensor(torch.LongTensor indices, torch.LongTensor values)\n+  else if (num_args == 2 && THPLongTensor_Check(first_arg)) {\n+    PyObject *second_arg = PyTuple_GET_ITEM(args, 1);\n+    if (!THPTensor_(Check)(second_arg)) goto invalid_arguments;\n+\n+    THLongTensor *indices = ((THPLongTensor*)first_arg)->cdata;\n+    THTensor *values = ((THPTensor*)second_arg)->cdata;\n+    self->cdata = THSTensor_(newWithTensor)(LIBRARY_STATE indices, values);\n+  }\n+  // torch.SparseTensor(torch.LongTensor indices,\n+  //                    torch.LongTensor values, torch.LongTensor sizes)", "path": "torch/csrc/generic/SparseTensor.cpp", "position": null, "original_position": 87, "commit_id": "faf9836c10da24d1d5ca51639780bd34a0a414dd", "original_commit_id": "c8b8d1a447ee21655f2e2ba282ba7b23478db4f0", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "`LongTensor` for sizes? Use `torch.Size`", "created_at": "2016-12-20T12:36:59Z", "updated_at": "2018-11-23T15:32:02Z", "html_url": "https://github.com/pytorch/pytorch/pull/333#discussion_r93228744", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/333", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/93228744"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/333#discussion_r93228744"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/333"}}, "body_html": "<p><code>LongTensor</code> for sizes? Use <code>torch.Size</code></p>", "body_text": "LongTensor for sizes? Use torch.Size"}