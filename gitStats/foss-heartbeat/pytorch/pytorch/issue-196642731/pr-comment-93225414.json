{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/93225414", "pull_request_review_id": 13742749, "id": 93225414, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkzMjI1NDE0", "diff_hunk": "@@ -0,0 +1,358 @@\n+#ifndef THS_GENERIC_FILE\n+#define THS_GENERIC_FILE \"generic/THSTensor.c\"\n+#else\n+\n+/******************************************************************************\n+ * access methods\n+ ******************************************************************************/\n+\n+int THSTensor_(nDimension)(const THSTensor *self)\n+{\n+  return self->nDimension;\n+}\n+\n+long THSTensor_(size)(const THSTensor *self, int dim)\n+{\n+  THArgCheck((dim >= 0) && (dim < self->nDimension), 1, \"dimension %d out of range of %dD tensor\",\n+      dim+1, THSTensor_(nDimension)(self));\n+  return self->size[dim];\n+}\n+\n+long THSTensor_(nnz)(const THSTensor *self) {\n+  return self->nnz;\n+}\n+\n+THLongStorage *THSTensor_(newSizeOf)(THSTensor *self)\n+{\n+  THLongStorage *size = THLongStorage_newWithSize(self->nDimension);\n+  THLongStorage_rawCopy(size, self->size);\n+  return size;\n+}\n+\n+THLongTensor *THSTensor_(indices)(const THSTensor *self) {\n+  if (self->nnz == 0) {\n+    // Narrows don't work on 0-length tensors\n+    THLongTensor_retain(self->indices);\n+    return self->indices;\n+  }\n+  return THLongTensor_newNarrow(self->indices, 1, 0, self->nnz);\n+}\n+\n+THTensor *THSTensor_(values)(const THSTensor *self) {\n+  if (self->nnz == 0) {\n+    THTensor_(retain)(self->values);\n+    return self->values;\n+  }\n+  return THTensor_(newNarrow)(self->values, 0, 0, self->nnz);\n+}\n+\n+THSTensor *THSTensor_(set)(THSTensor *self, THLongTensor *indices, THTensor *values) {\n+  THArgCheck(THLongTensor_nDimension(indices) == 2, 1,\n+      \"indices must be nDim x nnz\");\n+  THArgCheck(THTensor_(nDimension)(values) == 1, 2, \"values must nnz vector\");\n+  THArgCheck(THLongTensor_size(indices, 1) == THTensor_(size)(values, 0), 1,\n+      \"indices and values must have same nnz\");\n+  THFree(self->indices);\n+  THFree(self->values);\n+  self->indices = THLongTensor_newClone(indices);\n+  self->values = THTensor_(newClone)(values);\n+  self->nnz = THTensor_(size)(values, 0);\n+\n+  return self;\n+}\n+\n+\n+\n+/******************************************************************************\n+ * creation methods\n+ ******************************************************************************/\n+\n+/*** Helper methods ***/\n+static void THSTensor_(rawInit)(THSTensor *self)\n+{\n+  self->size = NULL;\n+  self->indices = THLongTensor_new();\n+  self->values = THTensor_(new)();\n+  self->nDimension = 0;\n+  self->contiguous = 0;\n+  self->nnz = 0;\n+  // self->flag = TH_TENSOR_REFCOUNTED;\n+}\n+\n+static void THSTensor_(rawResize)(THSTensor *self, int nDim, long *size) {\n+  // Only resize valid sizes into tensor.\n+  self->size = THRealloc(self->size, sizeof(long)*nDim);\n+\n+  long d, nDim_ = 0;\n+  for (d = 0; d < nDim; d++)\n+    if (size[d] > 0)\n+      self->size[nDim_++] = size[d];\n+  self->nDimension = nDim_;\n+  self->contiguous = 0;\n+}\n+\n+/*** end helper methods ***/\n+\n+/* Empty init */\n+THSTensor *THSTensor_(new)(void)\n+{\n+  THSTensor *self = THAlloc(sizeof(THSTensor));\n+  THSTensor_(rawInit)(self);\n+  return self;\n+}\n+\n+/* Pointer-copy init */\n+THSTensor *THSTensor_(newWithTensor)(THLongTensor *indices, THTensor *values)\n+{\n+  return THSTensor_(newWithTensorAndSize)(indices, values, NULL);\n+}\n+\n+THSTensor *THSTensor_(newWithTensorAndSize)(THLongTensor *indices, THTensor *values, THLongTensor *sizes)\n+{  // If sizes are not given, it is inferred as max index of each dim.\n+  long nDim;\n+  THLongTensor *ignore;\n+\n+  THSTensor *self = THAlloc(sizeof(THSTensor));\n+  THSTensor_(rawInit)(self);\n+  THSTensor_(set)(self, indices, values);\n+\n+  nDim = THLongTensor_size(indices, 0);\n+  if (!sizes) {\n+    ignore = THLongTensor_new();\n+    sizes = THLongTensor_new();\n+    THLongTensor_max(sizes, ignore, indices, 1);\n+    THLongTensor_add(sizes, sizes, 1);\n+    THSTensor_(rawResize)(self, nDim, THLongTensor_data(sizes));\n+    THFree(sizes);\n+    THFree(ignore);", "path": "torch/lib/THS/generic/THSTensor.c", "position": null, "original_position": 127, "commit_id": "faf9836c10da24d1d5ca51639780bd34a0a414dd", "original_commit_id": "c8b8d1a447ee21655f2e2ba282ba7b23478db4f0", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Use tensor descructors", "created_at": "2016-12-20T12:13:15Z", "updated_at": "2018-11-23T15:32:01Z", "html_url": "https://github.com/pytorch/pytorch/pull/333#discussion_r93225414", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/333", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/93225414"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/333#discussion_r93225414"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/333"}}, "body_html": "<p>Use tensor descructors</p>", "body_text": "Use tensor descructors"}