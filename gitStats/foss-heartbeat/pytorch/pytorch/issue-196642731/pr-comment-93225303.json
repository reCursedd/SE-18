{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/93225303", "pull_request_review_id": 13742749, "id": 93225303, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkzMjI1MzAz", "diff_hunk": "@@ -0,0 +1,243 @@\n+#ifndef THCS_GENERIC_FILE\n+#define THCS_GENERIC_FILE \"generic/THCSTensor.c\"\n+#else\n+\n+/******************************************************************************\n+ * access methods\n+ ******************************************************************************/\n+\n+int THCSTensor_(nDimension)(THCState *state, const THCSTensor *self)\n+{\n+  return self->nDimension;\n+}\n+\n+long THCSTensor_(size)(THCState *state, const THCSTensor *self, int dim)\n+{\n+  THArgCheck((dim >= 0) && (dim < self->nDimension), 1, \"dimension %d out of range of %dD tensor\",\n+      dim+1, THCSTensor_(nDimension)(state, self));\n+  return self->size[dim];\n+}\n+\n+long THCSTensor_(nnz)(THCState *state, const THCSTensor *self) {\n+  return self->nnz;\n+}\n+\n+THLongStorage *THCSTensor_(newSizeOf)(THCState *state, THCSTensor *self)\n+{\n+  THLongStorage *size = THLongStorage_newWithSize(self->nDimension);\n+  THLongStorage_rawCopy(size, self->size);\n+  return size;\n+}\n+\n+/*** TODO: watch out for memory leaks ***/\n+THCIndexTensor *THCSTensor_(indices)(THCState *state, const THCSTensor *self) {\n+  if (!self->indices) return self->indices;\n+  return THCIndexTensor_(newNarrow)(state, self->indices, 1, 0, self->nnz);\n+}\n+\n+THCTensor *THCSTensor_(values)(THCState *state, const THCSTensor *self) {\n+  if (!self->indices) return self->values;\n+  return THCTensor_(newNarrow)(state, self->values, 0, 0, self->nnz);\n+}\n+\n+THCSTensor *THCSTensor_(set)(THCState *state, THCSTensor *self, THCIndexTensor *indices, THCTensor *values) {\n+  THArgCheck(THCIndexTensor_(nDimension)(state, indices) == 2, 1,\n+      \"indices must be nDim x nnz\");\n+  THArgCheck(THCTensor_(nDimension)(state, values) == 1, 2, \"values must nnz vector\");\n+  THArgCheck(THCIndexTensor_(size)(state, indices, 1) == THCTensor_(size)(state, values, 0), 1,\n+      \"indices and values must have same nnz\");\n+  THFree(self->indices);\n+  THFree(self->values);\n+  self->indices = THCIndexTensor_(newClone)(state, indices);\n+  self->values = THCTensor_(newClone)(state, values);\n+  self->nnz = THCTensor_(size)(state, values, 0);\n+\n+  return self;\n+}\n+\n+\n+\n+/******************************************************************************\n+ * creation methods\n+ ******************************************************************************/\n+\n+/*** Helper methods ***/\n+static void THCSTensor_(rawInit)(THCState *state, THCSTensor *self)\n+{\n+  self->size = NULL;\n+  self->indices = NULL;\n+  self->values = NULL;\n+  self->nDimension = 0;\n+  self->contiguous = 0;\n+  self->nnz = 0;\n+  // self->flag = TH_TENSOR_REFCOUNTED;\n+}\n+\n+static void THCSTensor_(rawResize)(THCState *state, THCSTensor *self, int nDim, long *size) {\n+  // Only resize valid sizes into tensor.\n+  self->size = THRealloc(self->size, sizeof(long)*nDim);\n+\n+  long d, nDim_ = 0;\n+  for (d = 0; d < nDim; d++)\n+    if (size[d] > 0)\n+      self->size[nDim_++] = size[d];\n+  self->nDimension = nDim_;\n+  self->contiguous = 0;\n+}\n+\n+/*** end helper methods ***/\n+\n+/* Empty init */\n+THCSTensor *THCSTensor_(new)(THCState *state)\n+{\n+  THCSTensor *self = THAlloc(sizeof(THCSTensor));\n+  THCSTensor_(rawInit)(state, self);\n+  return self;\n+}\n+\n+/* Pointer-copy init */\n+THCSTensor *THCSTensor_(newWithTensor)(THCState *state, THCIndexTensor *indices, THCTensor *values)\n+{\n+  return THCSTensor_(newWithTensorAndSize)(state, indices, values, NULL);\n+}\n+\n+THCSTensor *THCSTensor_(newWithTensorAndSize)(THCState *state, THCIndexTensor *indices, THCTensor *values, THCudaLongTensor *sizes)\n+{  // If sizes are not given, it is inferred as max index of each dim.\n+  long nDim;\n+\n+  THCSTensor *self = THAlloc(sizeof(THCSTensor));\n+  THCSTensor_(rawInit)(state, self);\n+  THCSTensor_(set)(state, self, indices, values);\n+\n+  nDim = THCIndexTensor_(size)(state, indices, 0);\n+  if (!sizes) {\n+    THCudaLongTensor *ignore, *s;\n+    ignore = THCudaLongTensor_new(state);\n+    s = THCudaLongTensor_new(state);\n+    THCudaLongTensor_max(state, s, ignore, indices, 1);\n+    THCudaLongTensor_add(state, s, s, 1);\n+\n+    // TODO make sure this doesn't sync the hell out of everything\n+    //      Should be fine according to sam's memory manager.\n+    sizes = THCudaLongTensor_newWithSize(state, THCudaLongTensor_newSizeOf(state, s), NULL);\n+    THCudaLongTensor_copyCuda(state, sizes, s);\n+    THCSTensor_(rawResize)(state, self, nDim, THCudaLongTensor_data(state, sizes));\n+\n+    THCudaFree(state, s);\n+    THCudaFree(state, ignore);\n+    THFree(sizes);", "path": "torch/lib/THCS/generic/THCSTensor.c", "position": null, "original_position": 128, "commit_id": "faf9836c10da24d1d5ca51639780bd34a0a414dd", "original_commit_id": "c8b8d1a447ee21655f2e2ba282ba7b23478db4f0", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "That's a tensor", "created_at": "2016-12-20T12:12:33Z", "updated_at": "2018-11-23T15:32:01Z", "html_url": "https://github.com/pytorch/pytorch/pull/333#discussion_r93225303", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/333", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/93225303"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/333#discussion_r93225303"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/333"}}, "body_html": "<p>That's a tensor</p>", "body_text": "That's a tensor"}