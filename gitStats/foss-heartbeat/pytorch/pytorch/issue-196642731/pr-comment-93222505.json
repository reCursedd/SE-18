{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/93222505", "pull_request_review_id": 13742749, "id": 93222505, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkzMjIyNTA1", "diff_hunk": "@@ -0,0 +1,151 @@\n+CMAKE_MINIMUM_REQUIRED(VERSION 2.8 FATAL_ERROR)\n+CMAKE_POLICY(VERSION 2.8)\n+\n+SET(CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake ${CMAKE_MODULE_PATH})\n+\n+IF(NOT Torch_FOUND)\n+  FIND_PACKAGE(Torch)\n+ENDIF()\n+IF(NOT CUDA_FOUND)\n+  FIND_PACKAGE(CUDA 5.5 REQUIRED)\n+ENDIF()\n+IF(NOT MAGMA_FOUND)\n+  FIND_PACKAGE(MAGMA)\n+ENDIF()\n+\n+if(CMAKE_CXX_COMPILER_ID STREQUAL \"GNU\")\n+  if(CMAKE_CXX_COMPILER_VERSION VERSION_GREATER \"4.9.3\")\n+    if(CUDA_VERSION VERSION_LESS \"8.0\")\n+      MESSAGE(STATUS \"Found gcc >=5 and CUDA <= 7.5, adding workaround C++ flags\")\n+      set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -D_FORCE_INLINES\")\n+    endif(CUDA_VERSION VERSION_LESS \"8.0\")\n+  endif(CMAKE_CXX_COMPILER_VERSION VERSION_GREATER \"4.9.3\")\n+endif(CMAKE_CXX_COMPILER_ID STREQUAL \"GNU\")\n+\n+if(NOT CMAKE_CXX_COMPILER_ID STREQUAL \"GNU\")\n+  SET(CMAKE_CXX_STANDARD 11)\n+endif()\n+\n+INCLUDE_DIRECTORIES(${CUDA_INCLUDE_DIRS})\n+INCLUDE_DIRECTORIES(\"${CUDA_SDK_ROOT_DIR}/common/inc\")\n+\n+IF ($ENV{TH_BINARY_BUILD})\n+  MESSAGE(STATUS \"TH_BINARY_BUILD detected. Statically linking libstdc++\")\n+  SET(CMAKE_CXX_FLAGS \"-static-libstdc++ ${CMAKE_CXX_FLAGS}\")\n+ENDIF()\n+\n+IF(APPLE)\n+  IF(${CUDA_VERSION} LESS 6.0)\n+    # work around for mac os x bug:\n+    # http://stackoverflow.com/questions/16286588/cuda-5-0-cmake-and-make-failing-on-osx-10-8-3\n+    if (NOT DEFINED CUDA_HOST_COMPILER AND CMAKE_C_COMPILER_ID STREQUAL \"Clang\" AND EXISTS /usr/bin/gcc)\n+      set(CUDA_HOST_COMPILER /usr/bin/gcc CACHE FILEPATH \"Host side compiler used by NVCC\")\n+      message(STATUS \"Setting CMAKE_HOST_COMPILER to /usr/bin/gcc instead of ${CMAKE_C_COMPILER}.\")\n+    endif()\n+\n+    # bug on Apple\n+    LINK_DIRECTORIES(\"/usr/local/cuda/lib/\")\n+  ELSEIF(${CUDA_VERSION} LESS 7.0)\n+    SET(CUDA_HOST_COMPILER clang)\n+    LIST(APPEND CUDA_NVCC_FLAGS \"-Xcompiler -stdlib=libstdc++ -Xlinker -stdlib=libstdc++\")\n+    IF(\"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"Clang\")\n+      set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -stdlib=libstdc++\")\n+    ENDIF()\n+  ENDIF()\n+  # CUDA 7 supports clang and libc++ so no need to change anything\n+ENDIF(APPLE)\n+\n+#\u00a0Detect CUDA architecture and get best NVCC flags\n+IF(NOT COMMAND CUDA_SELECT_NVCC_ARCH_FLAGS)\n+  INCLUDE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/select_compute_arch.cmake)\n+ENDIF()\n+LIST(APPEND CUDA_NVCC_FLAGS $ENV{TORCH_NVCC_FLAGS})\n+CUDA_SELECT_NVCC_ARCH_FLAGS(NVCC_FLAGS_EXTRA $ENV{TORCH_CUDA_ARCH_LIST})\n+LIST(APPEND CUDA_NVCC_FLAGS ${NVCC_FLAGS_EXTRA})\n+\n+IF(NOT THCS_INSTALL_BIN_SUBDIR\n+    OR NOT THCS_INSTALL_LIB_SUBDIR\n+    OR NOT THCS_INSTALL_INCLUDE_SUBDIR\n+    OR NOT THCS_INSTALL_CMAKE_SUBDIR)\n+\n+  INCLUDE_DIRECTORIES(${TH_INCLUDE_PATH} ${TH_INCLUDE_PATH}/TH)\n+  LINK_DIRECTORIES(${TH_LIB_PATH})\n+\n+  SET(THCS_INSTALL_BIN_SUBDIR \"bin\" CACHE PATH \"THCS install binary subdirectory\")\n+  SET(THCS_INSTALL_LIB_SUBDIR \"lib\" CACHE PATH \"THCS install library subdirectory\")\n+  SET(THCS_INSTALL_INCLUDE_SUBDIR \"include\" CACHE PATH \"THCS install include subdirectory\")\n+  SET(THCS_INSTALL_CMAKE_SUBDIR \"share/cmake/THCS\" CACHE PATH \"THCS install cmake subdirectory\")\n+ELSE()\n+  SET(THCS_INSTALL_BIN_SUBDIR ${Torch_INSTALL_BIN_SUBDIR})\n+  SET(THCS_INSTALL_LIB_SUBDIR ${Torch_INSTALL_LIB_SUBDIR})\n+  SET(THCS_INSTALL_INCLUDE_SUBDIR ${Torch_INSTALL_INCLUDE_SUBDIR})\n+  SET(THCS_INSTALL_CMAKE_SUBDIR ${Torch_INSTALL_CMAKE_SUBDIR})\n+ENDIF()\n+\n+INCLUDE_DIRECTORIES(\"${CMAKE_CURRENT_BINARY_DIR}\")\n+# CONFIGURE_FILE(THCSGeneral.h.in \"${CMAKE_CURRENT_BINARY_DIR}/THCSGeneral.h\")\n+\n+SET(CMAKE_C_FLAGS \"-std=c99 ${CMAKE_C_FLAGS}\")\n+\n+SET(src\n+  THCSTensor.c\n+  )\n+\n+SET(src-cuda\n+  THCSTensor.cu\n+  )\n+\n+# # loop over all types", "path": "torch/lib/THCS/CMakeLists.txt", "position": null, "original_position": 98, "commit_id": "faf9836c10da24d1d5ca51639780bd34a0a414dd", "original_commit_id": "c8b8d1a447ee21655f2e2ba282ba7b23478db4f0", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Remove this?", "created_at": "2016-12-20T11:53:52Z", "updated_at": "2018-11-23T15:32:00Z", "html_url": "https://github.com/pytorch/pytorch/pull/333#discussion_r93222505", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/333", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/93222505"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/333#discussion_r93222505"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/333"}}, "body_html": "<p>Remove this?</p>", "body_text": "Remove this?"}