{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/223422874", "pull_request_review_id": 162545735, "id": 223422874, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyMzQyMjg3NA==", "diff_hunk": "@@ -259,12 +256,89 @@ def _test_timeout():\n     _ = next(iter(dataloader))\n \n \n+def _test_timeout_pin_memory():\n+    dataset = SleepDataset(10, 3)\n+    dataloader = DataLoader(dataset, batch_size=2, num_workers=2, timeout=1, pin_memory=True)\n+    _ = next(iter(dataloader))\n+\n+\n+def disable_stderr(worker_id):\n+    r\"\"\"\n+    Avoids printing \"ERROR: Unexpected segmentation fault encountered in worker.\"\n+    from workers. Since worker signal handler prints with low-level write(),\n+    this has to be done on OS level via dup.\n+\n+    This is used as worker_init_fn for test_segfault.\n+    \"\"\"\n+    sys.stderr.flush()  # flush library buffers that dup2 knows nothing about\n+    devnull = open(os.devnull, 'w')\n+    os.dup2(devnull.fileno(), sys.stderr.fileno())\n+\n+\n def _test_segfault():\n     dataset = SegfaultDataset(10)\n-    dataloader = DataLoader(dataset, batch_size=2, num_workers=2)\n+    dataloader = DataLoader(dataset, batch_size=2, num_workers=2, worker_init_fn=disable_stderr)\n     _ = next(iter(dataloader))\n \n \n+class TestProperExitDataset(object):\n+    def __init__(self, size, error_event):\n+        self.size = size\n+        self.error_event = error_event\n+\n+    def __len__(self):\n+        return self.size\n+\n+    def __getitem__(self, idx):\n+        if self.error_event is not None and self.error_event.is_set():\n+            raise RuntimeError('Worker error')\n+        return torch.tensor([idx])\n+\n+\n+# See TestDataLoader.test_proper_exit for usage\n+def _test_proper_exit(use_workers, pin_memory, exit_method, hold_iter_reference,\n+                      worker_pids, setup_event):\n+    num_workers = 2 if use_workers else 0\n+\n+    if exit_method == 'worker_error' or exit_method == 'worker_kill':\n+        assert use_workers is True\n+\n+    ds = TestProperExitDataset(16, setup_event if exit_method == 'worker_error' else None)\n+\n+    loader = DataLoader(ds, batch_size=2, shuffle=False,\n+                        num_workers=num_workers, pin_memory=pin_memory)\n+    it = iter(loader)\n+    if use_workers:\n+        for i, w in enumerate(it.workers):\n+            worker_pids[i] = w.pid\n+\n+    error_it = 4\n+    assert len(loader) > error_it\n+\n+    def kill_pid(pid):\n+        if IS_WINDOWS:\n+            os.system('taskkill /PID ' + str(os.getpid()) + ' /F')\n+        else:\n+            os.kill(os.getpid(), signal.SIGKILL)\n+\n+    for i, _ in enumerate(it):\n+        if i == 0:\n+            if not hold_iter_reference:\n+                del it\n+            setup_event.set()\n+        if i == error_it:\n+            if exit_method == 'main_error':\n+                raise RuntimeError('Error')\n+            elif exit_method == 'main_kill':\n+                kill_pid(os.getpid())\n+            elif exit_method == 'worker_kill':\n+                kill_pid(worker_pids[0])\n+\n+    # Tries to trigger the __del__ clean-up rather than the automatic exiting of\n+    # daemonic children.\n+    gc.collect()", "path": "test/test_dataloader.py", "position": null, "original_position": 136, "commit_id": "d3c4ffa092580d5b15ef2705bd3904f7b685e511", "original_commit_id": "398578667ab67c1b09c73456159eead852177cc1", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Do you really don't see `__del__` called if you remove this line? It should happen, because there shouldn't be any unreachable ref cycles.", "created_at": "2018-10-08T16:19:48Z", "updated_at": "2018-11-23T15:52:33Z", "html_url": "https://github.com/pytorch/pytorch/pull/11985#discussion_r223422874", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/11985", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/223422874"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/11985#discussion_r223422874"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/11985"}}, "body_html": "<p>Do you really don't see <code>__del__</code> called if you remove this line? It should happen, because there shouldn't be any unreachable ref cycles.</p>", "body_text": "Do you really don't see __del__ called if you remove this line? It should happen, because there shouldn't be any unreachable ref cycles."}