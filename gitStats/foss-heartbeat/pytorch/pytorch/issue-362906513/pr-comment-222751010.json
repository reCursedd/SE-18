{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/222751010", "pull_request_review_id": 161714244, "id": 222751010, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyMjc1MTAxMA==", "diff_hunk": "@@ -259,12 +256,84 @@ def _test_timeout():\n     _ = next(iter(dataloader))\n \n \n+def _test_timeout_pin_memory():\n+    dataset = SleepDataset(10, 3)\n+    dataloader = DataLoader(dataset, batch_size=2, num_workers=2, timeout=1, pin_memory=True)\n+    _ = next(iter(dataloader))\n+\n+\n+def disable_stderr(_):\n+    r\"\"\"\n+    Avoids printing \"ERROR: Unexpected segmentation fault encountered in worker.\"\n+    from workers. Since worker signal handler prints with low-level write(),\n+    this has to be done on OS level.\n+    \"\"\"\n+    os.close(sys.stderr.fileno())", "path": "test/test_dataloader.py", "position": null, "original_position": 67, "commit_id": "d3c4ffa092580d5b15ef2705bd3904f7b685e511", "original_commit_id": "9ce8d93d03726f874260cb5c132438243b810ffc", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Closing it seems like a bad idea, because if we actually check for errors in `write`, then we might be triggering failures that wouldn't happen otherwise (and e.g. satisfy `assertRaises` accidentally). It would be better to open `/dev/null`, close stderr and `dup` the `null` fd.", "created_at": "2018-10-04T17:01:32Z", "updated_at": "2018-11-23T15:52:21Z", "html_url": "https://github.com/pytorch/pytorch/pull/11985#discussion_r222751010", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/11985", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/222751010"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/11985#discussion_r222751010"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/11985"}}, "body_html": "<p>Closing it seems like a bad idea, because if we actually check for errors in <code>write</code>, then we might be triggering failures that wouldn't happen otherwise (and e.g. satisfy <code>assertRaises</code> accidentally). It would be better to open <code>/dev/null</code>, close stderr and <code>dup</code> the <code>null</code> fd.</p>", "body_text": "Closing it seems like a bad idea, because if we actually check for errors in write, then we might be triggering failures that wouldn't happen otherwise (and e.g. satisfy assertRaises accidentally). It would be better to open /dev/null, close stderr and dup the null fd."}