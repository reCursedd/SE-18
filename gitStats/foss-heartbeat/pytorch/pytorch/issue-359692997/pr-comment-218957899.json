{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/218957899", "pull_request_review_id": 157014439, "id": 218957899, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxODk1Nzg5OQ==", "diff_hunk": "@@ -36,95 +36,59 @@ AnomalyMetadata* Function::metadata() noexcept {\n   return anomaly_metadata_.get();\n }\n \n-/*\n- * Fix for #5534: prevent stack overflow on deletion of deep computation graph\n- *\n- * Sometimes one can end up with a very big computation graph of Functions\n- * and Edges. Each std::shared_ptr<Function> contains a list of Edge, and\n- * each Edge contains a std::shared_ptr<Function>. Deleting a\n- * std::shared_ptr<Function> can trigger the recursive deletion of other\n- * std::shared_ptr<Function>'s: this can stack overflow if the graph\n- * is deep enough. Here is an example of such a graph:\n- *\n- * shared_ptr<Function> -> Edge -> shared_ptr<Function> -> Edge -> ... -> shared_ptr<Function>\n- *\n- * The solution here is to use a custom deleter with each\n- * std::shared_ptr<Function>. The custom deleter keeps track of how many\n- * nested deleters it is in. When this number exceeds the maximum allowed\n- * depth, the Function* to be deleted are accumulated in a per-thread\n- * delete queue and handled by one of the deleters.\n- *\n- * Note that these custom deleters are NOT necessary for deleting PyFunction.\n- * This is because a THPFunction Python object owns a PyFunction that is in a\n- * computation graph. When Python objects get recursively destroyed, they\n- * are also queued into a delete list. This happens very early for them\n- * (at 50 deleters): https://github.com/python/cpython/blob/f320be77ffb73e3b9e7fc98c37b8df3975d84b40/Include/object.h#L1024-L1063\n- * so we don't need to worry about them.\n- */\n-\n-thread_local std::deque<Function*> deleteFunctionQueue;\n-thread_local size_t deleteFunctionRecursionDepth = 0;\n-\n-/*\n- * If this number is set too high, a deep computation graph can still\n- * stack overflow. The procedure for setting this number was to\n- * 1) find the smallest value that would not guard against stack overflows\n- *    on various machines\n- * 2) Take the minimum of all such values and subtract some leeway because\n- *    the memory of these stack frames will probably grow as time passes.\n- * Testing on a few machines machines, the magic numbers were:\n- * - Mac OSX (Macbook Pro 15) : ~60000\n- * - A beefy Ubuntu 16.04 box : ~15000\n- * - Windows AWS instance (g3.4xlarge): variable. My two attempts at different\n- *   times have gotten the following numbers: ~8300, 3669\n- */\n-#ifdef _WIN32\n-size_t deleteFunctionMaxRecursionDepth = 3000;\n-#else\n-size_t deleteFunctionMaxRecursionDepth = 10000;\n-#endif\n-\n-struct RecursionDepthCounter {\n- public:\n-  explicit RecursionDepthCounter() {\n-    ++deleteFunctionRecursionDepth;\n-  }\n-  ~RecursionDepthCounter() {\n-    --deleteFunctionRecursionDepth;\n+void gatherFunctions(Function* func,\n+                     std::vector<std::shared_ptr<Function>>& stack) {\n+  func->release_variables();\n+  auto saved_vars = func->saved_variables();", "path": "torch/csrc/autograd/function.cpp", "position": null, "original_position": 62, "commit_id": "1779145a2b6ea9f55a4affd41b66f58a64a518aa", "original_commit_id": "f30885c257a9f207d18d02b593dc65f373d9b198", "user": {"login": "goldsborough", "id": 6429851, "node_id": "MDQ6VXNlcjY0Mjk4NTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/6429851?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goldsborough", "html_url": "https://github.com/goldsborough", "followers_url": "https://api.github.com/users/goldsborough/followers", "following_url": "https://api.github.com/users/goldsborough/following{/other_user}", "gists_url": "https://api.github.com/users/goldsborough/gists{/gist_id}", "starred_url": "https://api.github.com/users/goldsborough/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goldsborough/subscriptions", "organizations_url": "https://api.github.com/users/goldsborough/orgs", "repos_url": "https://api.github.com/users/goldsborough/repos", "events_url": "https://api.github.com/users/goldsborough/events{/privacy}", "received_events_url": "https://api.github.com/users/goldsborough/received_events", "type": "User", "site_admin": false}, "body": "From what I can see, the code that used to use this function back when I re-factored large parts of the autograd in https://github.com/pytorch/pytorch/pull/5221 is now gone. In that case, this function is likely a legacy of how things used to be in the JIT and we could remove it", "created_at": "2018-09-19T20:46:27Z", "updated_at": "2018-11-23T15:51:42Z", "html_url": "https://github.com/pytorch/pytorch/pull/11611#discussion_r218957899", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/11611", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/218957899"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/11611#discussion_r218957899"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/11611"}}, "body_html": "<p>From what I can see, the code that used to use this function back when I re-factored large parts of the autograd in <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"296871378\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/5221\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/pytorch/pytorch/pull/5221/hovercard\" href=\"https://github.com/pytorch/pytorch/pull/5221\">#5221</a> is now gone. In that case, this function is likely a legacy of how things used to be in the JIT and we could remove it</p>", "body_text": "From what I can see, the code that used to use this function back when I re-factored large parts of the autograd in #5221 is now gone. In that case, this function is likely a legacy of how things used to be in the JIT and we could remove it", "in_reply_to_id": 218878120}