{"url": "https://api.github.com/repos/pytorch/pytorch/issues/9094", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/9094/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/9094/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/9094/events", "html_url": "https://github.com/pytorch/pytorch/issues/9094", "id": 337381827, "node_id": "MDU6SXNzdWUzMzczODE4Mjc=", "number": 9094, "title": "Filling a tensor uses all cpu cores", "user": {"login": "root20", "id": 8732466, "node_id": "MDQ6VXNlcjg3MzI0NjY=", "avatar_url": "https://avatars1.githubusercontent.com/u/8732466?v=4", "gravatar_id": "", "url": "https://api.github.com/users/root20", "html_url": "https://github.com/root20", "followers_url": "https://api.github.com/users/root20/followers", "following_url": "https://api.github.com/users/root20/following{/other_user}", "gists_url": "https://api.github.com/users/root20/gists{/gist_id}", "starred_url": "https://api.github.com/users/root20/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/root20/subscriptions", "organizations_url": "https://api.github.com/users/root20/orgs", "repos_url": "https://api.github.com/users/root20/repos", "events_url": "https://api.github.com/users/root20/events{/privacy}", "received_events_url": "https://api.github.com/users/root20/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 443483881, "node_id": "MDU6TGFiZWw0NDM0ODM4ODE=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/todo", "name": "todo", "color": "c2e0c6", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-07-02T06:11:41Z", "updated_at": "2018-07-06T05:33:55Z", "closed_at": "2018-07-06T05:33:55Z", "author_association": "NONE", "body_html": "<h2>Issue description</h2>\n<p>When I generate a tensor with the function main2() in the following code, the code runs one process and uses only one cpu core.<br>\nHowever, when I fill (using .fill_(0)) the tensor with 0 (or multiply it with 0, or generate a tensor using torch.zeros(...)), the code runs multiple processes and uses whole cpu cores.<br>\nIs this behavior intended?</p>\n<p>In my code, at every iteration I need a zero tensor, so if I run the code, all of the cpu cores are occupied by my code.<br>\nIf I run two such codes at the same time, computation speed becomes very slow.</p>\n<h2>Code example</h2>\n<pre><code>import torch\n\ndef main1():\n    torch.Tensor(1, 100, 1025).fill_(0)\n    import pdb;pdb.set_trace()\n\ndef main2():\n    torch.Tensor(1, 100, 1025)\n    import pdb;pdb.set_trace()\n\nif __name__ == '__main__':\n    # main1()     # This code runs multiple processes which use whole cpu cores\n    # main2()    # This code runs one process and uses only one cpu core\n\n</code></pre>\n<h2>System Info</h2>\n<p>PyTorch version: 0.4.0<br>\nIs debug build: No<br>\nCUDA used to build PyTorch: 9.0.176</p>\n<p>OS: Ubuntu 16.04.4 LTS<br>\nGCC version: (Ubuntu 5.4.0-6ubuntu1~16.04.9) 5.4.0 20160609<br>\nCMake version: Could not collect</p>\n<p>Python version: 3.6<br>\nIs CUDA available: Yes<br>\nCUDA runtime version: Could not collect<br>\nGPU models and configuration:<br>\nGPU 0: GeForce GTX 1080 Ti<br>\nGPU 1: GeForce GTX 1080 Ti<br>\nGPU 2: GeForce GTX 1080 Ti<br>\nGPU 3: GeForce GTX 1080 Ti</p>\n<p>Nvidia driver version: 396.26<br>\ncuDNN version: Could not collect</p>\n<p>Versions of relevant libraries:<br>\n[pip] numpy (1.14.3)<br>\n[pip] numpydoc (0.8.0)<br>\n[pip] torch (0.4.0)<br>\n[pip] torchvision (0.2.1)<br>\n[conda] cuda90                    1.0                  h6433d27_0    pytorch<br>\n[conda] pytorch                   0.4.0           py36_cuda9.0.176_cudnn7.1.2_1  [cuda90]  pytorch<br>\n[conda] torchvision               0.2.1                    py36_1    pytorch</p>", "body_text": "Issue description\nWhen I generate a tensor with the function main2() in the following code, the code runs one process and uses only one cpu core.\nHowever, when I fill (using .fill_(0)) the tensor with 0 (or multiply it with 0, or generate a tensor using torch.zeros(...)), the code runs multiple processes and uses whole cpu cores.\nIs this behavior intended?\nIn my code, at every iteration I need a zero tensor, so if I run the code, all of the cpu cores are occupied by my code.\nIf I run two such codes at the same time, computation speed becomes very slow.\nCode example\nimport torch\n\ndef main1():\n    torch.Tensor(1, 100, 1025).fill_(0)\n    import pdb;pdb.set_trace()\n\ndef main2():\n    torch.Tensor(1, 100, 1025)\n    import pdb;pdb.set_trace()\n\nif __name__ == '__main__':\n    # main1()     # This code runs multiple processes which use whole cpu cores\n    # main2()    # This code runs one process and uses only one cpu core\n\n\nSystem Info\nPyTorch version: 0.4.0\nIs debug build: No\nCUDA used to build PyTorch: 9.0.176\nOS: Ubuntu 16.04.4 LTS\nGCC version: (Ubuntu 5.4.0-6ubuntu1~16.04.9) 5.4.0 20160609\nCMake version: Could not collect\nPython version: 3.6\nIs CUDA available: Yes\nCUDA runtime version: Could not collect\nGPU models and configuration:\nGPU 0: GeForce GTX 1080 Ti\nGPU 1: GeForce GTX 1080 Ti\nGPU 2: GeForce GTX 1080 Ti\nGPU 3: GeForce GTX 1080 Ti\nNvidia driver version: 396.26\ncuDNN version: Could not collect\nVersions of relevant libraries:\n[pip] numpy (1.14.3)\n[pip] numpydoc (0.8.0)\n[pip] torch (0.4.0)\n[pip] torchvision (0.2.1)\n[conda] cuda90                    1.0                  h6433d27_0    pytorch\n[conda] pytorch                   0.4.0           py36_cuda9.0.176_cudnn7.1.2_1  [cuda90]  pytorch\n[conda] torchvision               0.2.1                    py36_1    pytorch", "body": "## Issue description\r\nWhen I generate a tensor with the function main2() in the following code, the code runs one process and uses only one cpu core.\r\nHowever, when I fill (using .fill_(0)) the tensor with 0 (or multiply it with 0, or generate a tensor using torch.zeros(...)), the code runs multiple processes and uses whole cpu cores.\r\nIs this behavior intended?\r\n\r\nIn my code, at every iteration I need a zero tensor, so if I run the code, all of the cpu cores are occupied by my code. \r\nIf I run two such codes at the same time, computation speed becomes very slow.\r\n\r\n\r\n## Code example\r\n\r\n```\r\nimport torch\r\n\r\ndef main1():\r\n    torch.Tensor(1, 100, 1025).fill_(0)\r\n    import pdb;pdb.set_trace()\r\n\r\ndef main2():\r\n    torch.Tensor(1, 100, 1025)\r\n    import pdb;pdb.set_trace()\r\n\r\nif __name__ == '__main__':\r\n    # main1()     # This code runs multiple processes which use whole cpu cores\r\n    # main2()    # This code runs one process and uses only one cpu core\r\n\r\n```\r\n\r\n## System Info\r\nPyTorch version: 0.4.0\r\nIs debug build: No\r\nCUDA used to build PyTorch: 9.0.176\r\n\r\nOS: Ubuntu 16.04.4 LTS\r\nGCC version: (Ubuntu 5.4.0-6ubuntu1~16.04.9) 5.4.0 20160609\r\nCMake version: Could not collect\r\n\r\nPython version: 3.6\r\nIs CUDA available: Yes\r\nCUDA runtime version: Could not collect\r\nGPU models and configuration: \r\nGPU 0: GeForce GTX 1080 Ti\r\nGPU 1: GeForce GTX 1080 Ti\r\nGPU 2: GeForce GTX 1080 Ti\r\nGPU 3: GeForce GTX 1080 Ti\r\n\r\nNvidia driver version: 396.26\r\ncuDNN version: Could not collect\r\n\r\nVersions of relevant libraries:\r\n[pip] numpy (1.14.3)\r\n[pip] numpydoc (0.8.0)\r\n[pip] torch (0.4.0)\r\n[pip] torchvision (0.2.1)\r\n[conda] cuda90                    1.0                  h6433d27_0    pytorch\r\n[conda] pytorch                   0.4.0           py36_cuda9.0.176_cudnn7.1.2_1  [cuda90]  pytorch\r\n[conda] torchvision               0.2.1                    py36_1    pytorch\r\n"}