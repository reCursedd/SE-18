{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/280846512", "html_url": "https://github.com/pytorch/pytorch/issues/535#issuecomment-280846512", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/535", "id": 280846512, "node_id": "MDEyOklzc3VlQ29tbWVudDI4MDg0NjUxMg==", "user": {"login": "pettarin", "id": 4086163, "node_id": "MDQ6VXNlcjQwODYxNjM=", "avatar_url": "https://avatars3.githubusercontent.com/u/4086163?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pettarin", "html_url": "https://github.com/pettarin", "followers_url": "https://api.github.com/users/pettarin/followers", "following_url": "https://api.github.com/users/pettarin/following{/other_user}", "gists_url": "https://api.github.com/users/pettarin/gists{/gist_id}", "starred_url": "https://api.github.com/users/pettarin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pettarin/subscriptions", "organizations_url": "https://api.github.com/users/pettarin/orgs", "repos_url": "https://api.github.com/users/pettarin/repos", "events_url": "https://api.github.com/users/pettarin/events{/privacy}", "received_events_url": "https://api.github.com/users/pettarin/received_events", "type": "User", "site_admin": false}, "created_at": "2017-02-18T13:46:02Z", "updated_at": "2017-02-18T13:46:21Z", "author_association": "NONE", "body_html": "<p>I did a bit of research on this issue.</p>\n<p>In particular, I checked that <code>torch/lib/TH/CMakeLists.txt</code> and <code>torch/lib/TH/cmake/FindSSE.cmake</code> actually detect the correct SSE level of my  AMD Athlon(tm) II X2 240 CPU, and they does, in the sense that they detect SSE1, SSE2, and SSE3 as available, while SSE4_1, SSE4_2 and AVX are NOT available. SSE4_A is not currently tested, but it does not matter, since it does not provide SSE4_1 or SSE4_2 instructions required by later torch code. So, in summary, my CPU should be running with SSE3 enabled.</p>\n<p>(NOTE: cat /proc/cpuinfo does not show sse3 in the flags field, but the CPU does have it, and the code <div class=\"border rounded-1 my-2\">\n  <div class=\"f6 px-3 py-2 lh-condensed border-bottom bg-gray-light\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/pytorch/pytorch/blob/0f65c9267d5ec55584b0ec65acb5374c95af9c16/torch/lib/TH/cmake/FindSSE.cmake#L26\">pytorch/torch/lib/TH/cmake/FindSSE.cmake</a>\n    </p>\n    <p class=\"mb-0 text-gray-light\">\n         Line 26\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/pytorch/pytorch/commit/0f65c9267d5ec55584b0ec65acb5374c95af9c16\">0f65c92</a>\n    </p>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L26\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"26\"></td>\n          <td id=\"LC26\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-c1\">SET</span>(SSE3_CODE <span class=\"pl-s\">\"</span> </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n when copied to a standalone test_sse3.c and compiled and run, actually return exit status 0.)</p>\n<p>However, as far as I understand the compilation process of Python wheels, if you compile the wheel on a machine with AVX and SSE4_? ,  you will get a blob with the code assuming that SSE4_? ops are available. Hence, when the resulting wheel is run on a non-SSE4 machine, it fails.</p>\n<p>So, the only solutions are:</p>\n<ol>\n<li>compile PyTorch from source on the target machine, and/or</li>\n<li>create a python wheel for no-SSE4 systems by manually forcing USE_AVX to false.</li>\n</ol>\n<p>Since non-SSE4 CPUs are quite old, I guess PyTorch is perfectly fine deciding not to support them.</p>\n<p>I suggest to close this issue.</p>", "body_text": "I did a bit of research on this issue.\nIn particular, I checked that torch/lib/TH/CMakeLists.txt and torch/lib/TH/cmake/FindSSE.cmake actually detect the correct SSE level of my  AMD Athlon(tm) II X2 240 CPU, and they does, in the sense that they detect SSE1, SSE2, and SSE3 as available, while SSE4_1, SSE4_2 and AVX are NOT available. SSE4_A is not currently tested, but it does not matter, since it does not provide SSE4_1 or SSE4_2 instructions required by later torch code. So, in summary, my CPU should be running with SSE3 enabled.\n(NOTE: cat /proc/cpuinfo does not show sse3 in the flags field, but the CPU does have it, and the code \n  \n    \n      pytorch/torch/lib/TH/cmake/FindSSE.cmake\n    \n    \n         Line 26\n      in\n      0f65c92\n    \n    \n    \n    \n\n        \n          \n           SET(SSE3_CODE \" \n        \n    \n  \n\n when copied to a standalone test_sse3.c and compiled and run, actually return exit status 0.)\nHowever, as far as I understand the compilation process of Python wheels, if you compile the wheel on a machine with AVX and SSE4_? ,  you will get a blob with the code assuming that SSE4_? ops are available. Hence, when the resulting wheel is run on a non-SSE4 machine, it fails.\nSo, the only solutions are:\n\ncompile PyTorch from source on the target machine, and/or\ncreate a python wheel for no-SSE4 systems by manually forcing USE_AVX to false.\n\nSince non-SSE4 CPUs are quite old, I guess PyTorch is perfectly fine deciding not to support them.\nI suggest to close this issue.", "body": "I did a bit of research on this issue.\r\n\r\nIn particular, I checked that ``torch/lib/TH/CMakeLists.txt`` and ``torch/lib/TH/cmake/FindSSE.cmake`` actually detect the correct SSE level of my  AMD Athlon(tm) II X2 240 CPU, and they does, in the sense that they detect SSE1, SSE2, and SSE3 as available, while SSE4_1, SSE4_2 and AVX are NOT available. SSE4_A is not currently tested, but it does not matter, since it does not provide SSE4_1 or SSE4_2 instructions required by later torch code. So, in summary, my CPU should be running with SSE3 enabled. \r\n\r\n(NOTE: cat /proc/cpuinfo does not show sse3 in the flags field, but the CPU does have it, and the code https://github.com/pytorch/pytorch/blob/0f65c9267d5ec55584b0ec65acb5374c95af9c16/torch/lib/TH/cmake/FindSSE.cmake#L26 when copied to a standalone test_sse3.c and compiled and run, actually return exit status 0.)\r\n\r\nHowever, as far as I understand the compilation process of Python wheels, if you compile the wheel on a machine with AVX and SSE4_? ,  you will get a blob with the code assuming that SSE4_? ops are available. Hence, when the resulting wheel is run on a non-SSE4 machine, it fails.\r\n\r\nSo, the only solutions are:\r\n\r\n1. compile PyTorch from source on the target machine, and/or \r\n2. create a python wheel for no-SSE4 systems by manually forcing USE_AVX to false.\r\n\r\nSince non-SSE4 CPUs are quite old, I guess PyTorch is perfectly fine deciding not to support them.\r\n\r\nI suggest to close this issue."}