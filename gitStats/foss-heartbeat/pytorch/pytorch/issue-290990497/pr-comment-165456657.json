{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/165456657", "pull_request_review_id": 93399437, "id": 165456657, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NTQ1NjY1Nw==", "diff_hunk": "@@ -1,7 +1,16 @@\n ATen native functions are a mechanism to write ATen methods which only\n make use of other ATen operations (e.g., it is not necessary to bind into\n TH/THC code).  These functions are declared in this file and then folded\n-into the ATen code generation process.\n+into the ATen code generation process, so that they become available\n+either as methods on `Tensor` (`t.mymeth()`) and functions in the ATen\n+namespace (`at::myfunc()`).\n+\n+In PyTorch, every native function gets Python bindings generated,\n+making them available as methods on `torch._C._VariableBase`", "path": "aten/src/ATen/native/README.md", "position": null, "original_position": 10, "commit_id": "373dda6a697556b7b5dcfb6e0f6898b826e9877b", "original_commit_id": "785fb5c315d7e8c89822c62c216d6c98bacf06da", "user": {"login": "gchanan", "id": 3768583, "node_id": "MDQ6VXNlcjM3Njg1ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3768583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gchanan", "html_url": "https://github.com/gchanan", "followers_url": "https://api.github.com/users/gchanan/followers", "following_url": "https://api.github.com/users/gchanan/following{/other_user}", "gists_url": "https://api.github.com/users/gchanan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gchanan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gchanan/subscriptions", "organizations_url": "https://api.github.com/users/gchanan/orgs", "repos_url": "https://api.github.com/users/gchanan/repos", "events_url": "https://api.github.com/users/gchanan/events{/privacy}", "received_events_url": "https://api.github.com/users/gchanan/received_events", "type": "User", "site_admin": false}, "body": "I think there is too much implementation detail here, it's guaranteed to get out of date.  I'd just say that methods end up on Variables in pytorch.  For functions I don't know what \"subsequently\" rebound to the Python module means here -- do you mean the user is reasonable for doing that if they want?", "created_at": "2018-02-01T19:07:55Z", "updated_at": "2018-11-23T15:38:55Z", "html_url": "https://github.com/pytorch/pytorch/pull/4816#discussion_r165456657", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4816", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/165456657"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/4816#discussion_r165456657"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4816"}}, "body_html": "<p>I think there is too much implementation detail here, it's guaranteed to get out of date.  I'd just say that methods end up on Variables in pytorch.  For functions I don't know what \"subsequently\" rebound to the Python module means here -- do you mean the user is reasonable for doing that if they want?</p>", "body_text": "I think there is too much implementation detail here, it's guaranteed to get out of date.  I'd just say that methods end up on Variables in pytorch.  For functions I don't know what \"subsequently\" rebound to the Python module means here -- do you mean the user is reasonable for doing that if they want?"}