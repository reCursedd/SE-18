{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/163380744", "pull_request_review_id": 90985723, "id": 163380744, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MzM4MDc0NA==", "diff_hunk": "@@ -0,0 +1,109 @@\n+ATen native functions are a mechanism to write ATen methods which only\n+make use of other ATen operations (e.g., it is not necessary to bind into\n+TH/THC code).  These functions are declared in this file and then folded\n+into the ATen code generation process.\n+\n+## Registering it in `native_functions.yaml`\n+\n+The first step is to write an entry for your function in\n+`native_functions.yaml`.  The format is as follows:\n+\n+```\n+- func: func_name(ArgType arg0[=default], ArgType arg1[=default], ...) -> ReturnType\n+```\n+\n+ArgType(s) are allowed to be simple types understood by ATen\n+(e.g. `Tensor`, `TensorList`, `IntList`, `int64_t`, `double`, ...).\n+`Tensor?` means that the tensor is optional; if it is not passed by", "path": "aten/src/ATen/native/README.md", "position": null, "original_position": 17, "commit_id": "373dda6a697556b7b5dcfb6e0f6898b826e9877b", "original_commit_id": "f8b4ab1f6bd7f9527718773ef49690a2023cab05", "user": {"login": "gchanan", "id": 3768583, "node_id": "MDQ6VXNlcjM3Njg1ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3768583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gchanan", "html_url": "https://github.com/gchanan", "followers_url": "https://api.github.com/users/gchanan/followers", "following_url": "https://api.github.com/users/gchanan/following{/other_user}", "gists_url": "https://api.github.com/users/gchanan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gchanan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gchanan/subscriptions", "organizations_url": "https://api.github.com/users/gchanan/orgs", "repos_url": "https://api.github.com/users/gchanan/repos", "events_url": "https://api.github.com/users/gchanan/events{/privacy}", "received_events_url": "https://api.github.com/users/gchanan/received_events", "type": "User", "site_admin": false}, "body": "These terms aren't well defined.  What is optional?  What does not passed by the user mean?  What does checking if it is the case mean?  What API is this talking about?", "created_at": "2018-01-23T21:22:00Z", "updated_at": "2018-11-23T15:38:28Z", "html_url": "https://github.com/pytorch/pytorch/pull/4816#discussion_r163380744", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4816", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/163380744"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/4816#discussion_r163380744"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4816"}}, "body_html": "<p>These terms aren't well defined.  What is optional?  What does not passed by the user mean?  What does checking if it is the case mean?  What API is this talking about?</p>", "body_text": "These terms aren't well defined.  What is optional?  What does not passed by the user mean?  What does checking if it is the case mean?  What API is this talking about?"}