{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/295339777", "html_url": "https://github.com/pytorch/pytorch/issues/1299#issuecomment-295339777", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/1299", "id": 295339777, "node_id": "MDEyOklzc3VlQ29tbWVudDI5NTMzOTc3Nw==", "user": {"login": "John-Jumper", "id": 4306211, "node_id": "MDQ6VXNlcjQzMDYyMTE=", "avatar_url": "https://avatars1.githubusercontent.com/u/4306211?v=4", "gravatar_id": "", "url": "https://api.github.com/users/John-Jumper", "html_url": "https://github.com/John-Jumper", "followers_url": "https://api.github.com/users/John-Jumper/followers", "following_url": "https://api.github.com/users/John-Jumper/following{/other_user}", "gists_url": "https://api.github.com/users/John-Jumper/gists{/gist_id}", "starred_url": "https://api.github.com/users/John-Jumper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/John-Jumper/subscriptions", "organizations_url": "https://api.github.com/users/John-Jumper/orgs", "repos_url": "https://api.github.com/users/John-Jumper/repos", "events_url": "https://api.github.com/users/John-Jumper/events{/privacy}", "received_events_url": "https://api.github.com/users/John-Jumper/received_events", "type": "User", "site_admin": false}, "created_at": "2017-04-19T16:45:53Z", "updated_at": "2017-04-19T16:45:53Z", "author_association": "NONE", "body_html": "<p>Normally, I would use <code>dtype=float32</code>, but that is an error when constructing <code>cuda.FloatTensor</code>.  The 4th timing was the big surprise; all of the other ones are mainly to show that nothing else too weird is happening.</p>\n<p>I agree this is a low priority issue, but I might suggest just calling <code>PyArray_FromAny</code>, possibly with <code>NPY_ARRAY_ENSURECOPY</code>, when you receive an arbitrary Python object in the constructor.  That should be very fast when the iterable is already a numpy array.</p>\n<pre><code>In [1]: import torch.cuda\n\nIn [2]: import numpy as np\n\nIn [3]: torch.cuda.FloatTensor(np.zeros(10, dtype=np.float64))\nOut[3]: \n\n 0\n 0\n 0\n 0\n 0\n 0\n 0\n 0\n 0\n 0\n[torch.cuda.FloatTensor of size 10 (GPU 0)]\n\nIn [4]: torch.cuda.FloatTensor(np.zeros(10, dtype=np.float32))\n---------------------------------------------------------------------------\nRuntimeError                              Traceback (most recent call last)\n&lt;ipython-input-4-f0aeef8e6446&gt; in &lt;module&gt;()\n----&gt; 1 torch.cuda.FloatTensor(np.zeros(10, dtype=np.float32))\n\nRuntimeError: tried to construct a tensor from a float sequence, but found an item of type numpy.float32 at index (0)\n</code></pre>", "body_text": "Normally, I would use dtype=float32, but that is an error when constructing cuda.FloatTensor.  The 4th timing was the big surprise; all of the other ones are mainly to show that nothing else too weird is happening.\nI agree this is a low priority issue, but I might suggest just calling PyArray_FromAny, possibly with NPY_ARRAY_ENSURECOPY, when you receive an arbitrary Python object in the constructor.  That should be very fast when the iterable is already a numpy array.\nIn [1]: import torch.cuda\n\nIn [2]: import numpy as np\n\nIn [3]: torch.cuda.FloatTensor(np.zeros(10, dtype=np.float64))\nOut[3]: \n\n 0\n 0\n 0\n 0\n 0\n 0\n 0\n 0\n 0\n 0\n[torch.cuda.FloatTensor of size 10 (GPU 0)]\n\nIn [4]: torch.cuda.FloatTensor(np.zeros(10, dtype=np.float32))\n---------------------------------------------------------------------------\nRuntimeError                              Traceback (most recent call last)\n<ipython-input-4-f0aeef8e6446> in <module>()\n----> 1 torch.cuda.FloatTensor(np.zeros(10, dtype=np.float32))\n\nRuntimeError: tried to construct a tensor from a float sequence, but found an item of type numpy.float32 at index (0)", "body": "Normally, I would use `dtype=float32`, but that is an error when constructing `cuda.FloatTensor`.  The 4th timing was the big surprise; all of the other ones are mainly to show that nothing else too weird is happening.  \r\n\r\nI agree this is a low priority issue, but I might suggest just calling `PyArray_FromAny`, possibly with `NPY_ARRAY_ENSURECOPY`, when you receive an arbitrary Python object in the constructor.  That should be very fast when the iterable is already a numpy array.\r\n\r\n```\r\nIn [1]: import torch.cuda\r\n\r\nIn [2]: import numpy as np\r\n\r\nIn [3]: torch.cuda.FloatTensor(np.zeros(10, dtype=np.float64))\r\nOut[3]: \r\n\r\n 0\r\n 0\r\n 0\r\n 0\r\n 0\r\n 0\r\n 0\r\n 0\r\n 0\r\n 0\r\n[torch.cuda.FloatTensor of size 10 (GPU 0)]\r\n\r\nIn [4]: torch.cuda.FloatTensor(np.zeros(10, dtype=np.float32))\r\n---------------------------------------------------------------------------\r\nRuntimeError                              Traceback (most recent call last)\r\n<ipython-input-4-f0aeef8e6446> in <module>()\r\n----> 1 torch.cuda.FloatTensor(np.zeros(10, dtype=np.float32))\r\n\r\nRuntimeError: tried to construct a tensor from a float sequence, but found an item of type numpy.float32 at index (0)\r\n```"}