{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/295324711", "html_url": "https://github.com/pytorch/pytorch/issues/1299#issuecomment-295324711", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/1299", "id": 295324711, "node_id": "MDEyOklzc3VlQ29tbWVudDI5NTMyNDcxMQ==", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "created_at": "2017-04-19T16:05:29Z", "updated_at": "2017-04-19T16:05:29Z", "author_association": "MEMBER", "body_html": "<p>This is expected because the numpy arrays have <code>dtype=float64</code>. Because of this:</p>\n<ol>\n<li><code>torch.from_numpy(x).cuda()</code> will create a <code>torch.DoubleTensor</code> without any memory copy, and will then send it to the GPU (very fast)</li>\n<li><code>torch.FloatTensor(x)</code> will <strong>treat the numpy array as a regular Python iterable (e.g. a list)</strong> and will read elements one by one, initializing the memory.</li>\n<li><code>torch.FloatTensor(x).cuda()</code> same as 2.</li>\n<li>This really seems like a bug, but I'd say that it's a low priority one. You shouldn't be doing that anyway.</li>\n</ol>", "body_text": "This is expected because the numpy arrays have dtype=float64. Because of this:\n\ntorch.from_numpy(x).cuda() will create a torch.DoubleTensor without any memory copy, and will then send it to the GPU (very fast)\ntorch.FloatTensor(x) will treat the numpy array as a regular Python iterable (e.g. a list) and will read elements one by one, initializing the memory.\ntorch.FloatTensor(x).cuda() same as 2.\nThis really seems like a bug, but I'd say that it's a low priority one. You shouldn't be doing that anyway.", "body": "This is expected because the numpy arrays have `dtype=float64`. Because of this:\r\n1. `torch.from_numpy(x).cuda()` will create a `torch.DoubleTensor` without any memory copy, and will then send it to the GPU (very fast)\r\n2. `torch.FloatTensor(x)` will **treat the numpy array as a regular Python iterable (e.g. a list)** and will read elements one by one, initializing the memory.\r\n3. `torch.FloatTensor(x).cuda()` same as 2.\r\n4. This really seems like a bug, but I'd say that it's a low priority one. You shouldn't be doing that anyway."}