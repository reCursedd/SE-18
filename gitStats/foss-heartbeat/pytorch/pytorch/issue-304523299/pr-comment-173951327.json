{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/173951327", "pull_request_review_id": 103225037, "id": 173951327, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3Mzk1MTMyNw==", "diff_hunk": "@@ -119,15 +141,46 @@ struct Symbol {\n   Symbol() {}\n   /*implicit*/ Symbol(BuiltinSymbol value)\n   : value(value) {}\n-  explicit Symbol(const std::string & s);\n   explicit Symbol(uint32_t value)\n   : value(value) {}\n \n+  // Parse a string in the toQualString format to Symbol.  This is a proper\n+  // parser, so avoid using it in a hotpath.\n+  static Symbol parseQualString(const std::string & s);\n+\n+  // Constructors for our various namespaced strings.  ATM these don't do\n+  // anything but they will soon.\n+  static Symbol attr(const std::string & s) { return Symbol(s); };\n+  static Symbol aten(const std::string & s) { return Symbol(s); };\n+  static Symbol onnx(const std::string & s) { return Symbol(s); };\n+  static Symbol jit(const std::string & s) { return Symbol(s); };\n+  // TODO: eliminate me\n+  static Symbol scope(const std::string & s) { return Symbol(s); };\n+\n   operator uint32_t() const {\n     return value;\n   }\n-  const char * toString() const;\n+\n+  // Give a string corresponding to the unqualified version of this name, e.g.,\n+  // \"mm\". Use this in a context where the intended namespace of the string is\n+  // obvious; this is a *lossy* conversion.\n+  const char * toUnqualString() const;\n+\n+  // Give a string corresponding to the qualified version of this name,\n+  // e.g., \"aten::mm\".  This string format is made available to Python bindings\n+  // (so we know how to parse it.)  THIS FUNCTION DOES AN ALLOCATION, DON'T USE\n+  // IT IN A TIGHT LOOP.\n+  std::string toQualString() const;\n+\n+  // Give an unambiguous, machine readable description of the name.\n+  const char * toRawString() const;", "path": "torch/csrc/jit/interned_strings.h", "position": null, "original_position": 67, "commit_id": "a72c2efb1388164356af4fecf148a4d99a364542", "original_commit_id": "6d42138455a0af277ad68ef334a2d4a5dbd01a18", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "Given \"aten::mm\", toRawString gives \"amm\", but toUnqualString gives \"mm\". `toRawString` is really trivial to implement (it's the actual string that was interned) but it's an implementation detail and basically should not be used.", "created_at": "2018-03-12T21:23:39Z", "updated_at": "2018-11-23T15:40:39Z", "html_url": "https://github.com/pytorch/pytorch/pull/5715#discussion_r173951327", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/5715", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/173951327"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/5715#discussion_r173951327"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/5715"}}, "body_html": "<p>Given \"aten::mm\", toRawString gives \"amm\", but toUnqualString gives \"mm\". <code>toRawString</code> is really trivial to implement (it's the actual string that was interned) but it's an implementation detail and basically should not be used.</p>", "body_text": "Given \"aten::mm\", toRawString gives \"amm\", but toUnqualString gives \"mm\". toRawString is really trivial to implement (it's the actual string that was interned) but it's an implementation detail and basically should not be used.", "in_reply_to_id": 173946023}