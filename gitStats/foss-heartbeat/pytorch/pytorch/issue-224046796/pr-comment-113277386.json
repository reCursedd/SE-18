{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/113277386", "pull_request_review_id": 34651924, "id": 113277386, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMzI3NzM4Ng==", "diff_hunk": "@@ -0,0 +1,70 @@\n+import torch\n+\n+from .module import Module\n+from .. import functional as F\n+\n+\n+class _CropBase(Module):\n+\n+    def __init__(self, size, mode):\n+        super(Module, self).__init__()\n+        self.size = size\n+        self.mode = mode\n+        if self.mode != 'center':\n+            raise NotImplementedError(\"CropNd only supports mode center crop\")\n+\n+    def _offset(self, initial, target):\n+        crop = torch.FloatTensor([initial]).sub(target).div(-2)\n+        return crop.ceil().int()[0], crop.floor().int()[0]\n+\n+    def __repr__(self):\n+        return self.__class__.__name__ + '(' \\\n+            + 'size=' + str(self.size) \\\n+            + 'mode=' + self.mode + ')'\n+\n+\n+class Crop1d(_CropBase):\n+\n+    def __init__(self, size, mode='center'):\n+        if isinstance(size, int):\n+            size = (size,)\n+        assert len(size) == 1, 'size should be int or one dimensional tuple'\n+        super(Crop1d, self).__init__(size, mode)\n+\n+    def forward(self, x):\n+        length = x.size()[2]\n+        start, stop = self._offset(length, self.size[0])\n+        return x[:, :, -start:length+stop]\n+\n+\n+class Crop2d(_CropBase):\n+\n+    def __init__(self, size, mode='center'):\n+        if isinstance(size, int):\n+            size = (size, size)\n+        assert len(size) == 2, 'size should be int or two dimensional tuple'\n+        super(Crop2d, self).__init__(size, mode)\n+\n+    def forward(self, x):\n+        height, width = x.size()[:2]\n+        return F.pad(x, [\n+            *self._offset(height, self.size[0]),\n+            *self._offset(width, self.size[1]),\n+        ])\n+\n+\n+class Crop3d(_CropBase):\n+\n+    def __init__(self, size, mode='center'):\n+        if isinstance(size, int):\n+            size = (size, size, size)\n+        assert len(size) == 3, 'size should be int or three dimensional tuple'\n+        super(Crop3d, self).__init__(size, mode)\n+\n+    def forward(self, x):\n+        height, width, depth = x.size()[:2]\n+        return F.pad(x, [", "path": "torch/nn/modules/crop.py", "position": null, "original_position": 66, "commit_id": "d5bd7947a5be4746d072e997c378dadd2dffb328", "original_commit_id": "cb2f109641e0763dcbffa3927d626a470b369dde", "user": {"login": "fmassa", "id": 9110200, "node_id": "MDQ6VXNlcjkxMTAyMDA=", "avatar_url": "https://avatars2.githubusercontent.com/u/9110200?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fmassa", "html_url": "https://github.com/fmassa", "followers_url": "https://api.github.com/users/fmassa/followers", "following_url": "https://api.github.com/users/fmassa/following{/other_user}", "gists_url": "https://api.github.com/users/fmassa/gists{/gist_id}", "starred_url": "https://api.github.com/users/fmassa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fmassa/subscriptions", "organizations_url": "https://api.github.com/users/fmassa/orgs", "repos_url": "https://api.github.com/users/fmassa/repos", "events_url": "https://api.github.com/users/fmassa/events{/privacy}", "received_events_url": "https://api.github.com/users/fmassa/received_events", "type": "User", "site_admin": false}, "body": "`F.pad` [only supports 4d inputs](https://github.com/pytorch/pytorch/blob/master/torch/nn/_functions/padding.py#L12)", "created_at": "2017-04-25T18:41:16Z", "updated_at": "2018-11-23T15:33:10Z", "html_url": "https://github.com/pytorch/pytorch/pull/1349#discussion_r113277386", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/1349", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/113277386"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/1349#discussion_r113277386"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/1349"}}, "body_html": "<p><code>F.pad</code> <a href=\"https://github.com/pytorch/pytorch/blob/master/torch/nn/_functions/padding.py#L12\">only supports 4d inputs</a></p>", "body_text": "F.pad only supports 4d inputs"}