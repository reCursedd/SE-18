{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/159165395", "pull_request_review_id": 86071032, "id": 159165395, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1OTE2NTM5NQ==", "diff_hunk": "@@ -126,4 +126,70 @@ Date:  February 1996\n }\n #undef CENTRAL_RANGE\n \n+static inline double TH_digamma(double x) {\n+  double result = 0;\n+  if (x < 0.5) {\n+    result -= M_PI / tan(M_PI * x);\n+    x = 1 - x;\n+  }\n+  for (int i = 0; i < 4; ++i) {\n+    result -= 1 / x;\n+    x += 1;\n+  }\n+  const double ixx = 1 / (x*x);\n+  result += log(x) - 1 / (2*x) - ixx * (1./12 - ixx * (1./120 - ixx * (1./252)));\n+  return result;\n+}\n+\n+static inline float TH_digammaf(float x) {\n+  float result = 0;\n+  if (x < 0.5) {\n+    result -= M_PI / tanf(M_PI * x);\n+    x = 1 - x;\n+  }\n+  for (int i = 0; i < 4; ++i) {\n+    result -= 1 / x;\n+    x += 1;\n+  }\n+  const float ixx = 1 / (x*x);\n+  result += logf(x) - 1 / (2*x) - ixx * (1.f/12 - ixx * (1.f/120 - ixx * (1.f/252)));\n+  return result;\n+}\n+\n+static inline double TH_trigamma(double x) {\n+  double sign = +1;\n+  double result = 0;\n+  if (x < 0.5) {\n+    sign = -1;\n+    const double sin_pi_x = sin(M_PI * x);\n+    result -= (M_PI * M_PI) / (sin_pi_x * sin_pi_x);\n+    x = 1 - x;\n+  }\n+  for (int i = 0; i < 6; ++i) {\n+    result += 1 / (x * x);\n+    x += 1;\n+  }\n+  const double ixx = 1 / (x*x);\n+  result += (1 + 1 / (2*x) + ixx * (1./6 - ixx * (1./30 - ixx * (1./42)))) / x;\n+  return sign * result;\n+}\n+\n+static inline float TH_trigammaf(float x) {\n+  float sign = +1;\n+  float result = 0;\n+  if (x < 0.5) {\n+    sign = -1;\n+    const float sin_pi_x = sinf(M_PI * x);\n+    result -= (M_PI * M_PI) / (sin_pi_x * sin_pi_x);\n+    x = 1 - x;\n+  }\n+  for (int i = 0; i < 6; ++i) {\n+    result += 1 / (x * x);\n+    x += 1;\n+  }\n+  const float ixx = 1 / (x*x);\n+  result += (1 + 1 / (2*x) + ixx * (1./6 - ixx * (1./30 - ixx * (1./42)))) / x;", "path": "aten/src/TH/THMath.h", "position": null, "original_position": 66, "commit_id": "92cec60d58a6a7c1567abad8d2720d070481c837", "original_commit_id": "e52ff9860d5e890a3720f2d7da2f73f4a6c89d70", "user": {"login": "fritzo", "id": 648532, "node_id": "MDQ6VXNlcjY0ODUzMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/648532?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fritzo", "html_url": "https://github.com/fritzo", "followers_url": "https://api.github.com/users/fritzo/followers", "following_url": "https://api.github.com/users/fritzo/following{/other_user}", "gists_url": "https://api.github.com/users/fritzo/gists{/gist_id}", "starred_url": "https://api.github.com/users/fritzo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fritzo/subscriptions", "organizations_url": "https://api.github.com/users/fritzo/orgs", "repos_url": "https://api.github.com/users/fritzo/repos", "events_url": "https://api.github.com/users/fritzo/events{/privacy}", "received_events_url": "https://api.github.com/users/fritzo/received_events", "type": "User", "site_admin": false}, "body": "Sorry my cuda skills are weak. How can I specify floating point constant of type `real`? I wrote one version that cast constants everywhere like `(real)(1./6)` but that seemed overly complex.", "created_at": "2018-01-01T22:49:38Z", "updated_at": "2018-11-23T15:37:45Z", "html_url": "https://github.com/pytorch/pytorch/pull/4399#discussion_r159165395", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4399", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/159165395"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/4399#discussion_r159165395"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4399"}}, "body_html": "<p>Sorry my cuda skills are weak. How can I specify floating point constant of type <code>real</code>? I wrote one version that cast constants everywhere like <code>(real)(1./6)</code> but that seemed overly complex.</p>", "body_text": "Sorry my cuda skills are weak. How can I specify floating point constant of type real? I wrote one version that cast constants everywhere like (real)(1./6) but that seemed overly complex.", "in_reply_to_id": 159164248}