{"url": "https://api.github.com/repos/pytorch/pytorch/issues/1824", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/1824/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/1824/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/1824/events", "html_url": "https://github.com/pytorch/pytorch/issues/1824", "id": 236491727, "node_id": "MDU6SXNzdWUyMzY0OTE3Mjc=", "number": 1824, "title": "Octree support", "user": {"login": "mdering", "id": 1246446, "node_id": "MDQ6VXNlcjEyNDY0NDY=", "avatar_url": "https://avatars0.githubusercontent.com/u/1246446?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mdering", "html_url": "https://github.com/mdering", "followers_url": "https://api.github.com/users/mdering/followers", "following_url": "https://api.github.com/users/mdering/following{/other_user}", "gists_url": "https://api.github.com/users/mdering/gists{/gist_id}", "starred_url": "https://api.github.com/users/mdering/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mdering/subscriptions", "organizations_url": "https://api.github.com/users/mdering/orgs", "repos_url": "https://api.github.com/users/mdering/repos", "events_url": "https://api.github.com/users/mdering/events{/privacy}", "received_events_url": "https://api.github.com/users/mdering/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-06-16T14:00:56Z", "updated_at": "2017-06-16T14:06:47Z", "closed_at": "2017-06-16T14:06:47Z", "author_association": "CONTRIBUTOR", "body_html": "<p>it's kind of a niche use case, but some work has been done to implement octrees for volumetric data, this saves a lot of space and can really be helpful if your data is sparse. Some code for torch is here <a href=\"https://github.com/griegler/octnet\">https://github.com/griegler/octnet</a>. Is there a way we can integrate this into pytorch?</p>", "body_text": "it's kind of a niche use case, but some work has been done to implement octrees for volumetric data, this saves a lot of space and can really be helpful if your data is sparse. Some code for torch is here https://github.com/griegler/octnet. Is there a way we can integrate this into pytorch?", "body": "it's kind of a niche use case, but some work has been done to implement octrees for volumetric data, this saves a lot of space and can really be helpful if your data is sparse. Some code for torch is here https://github.com/griegler/octnet. Is there a way we can integrate this into pytorch?"}