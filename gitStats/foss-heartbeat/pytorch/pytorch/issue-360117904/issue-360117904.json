{"url": "https://api.github.com/repos/pytorch/pytorch/issues/11682", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/11682/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/11682/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/11682/events", "html_url": "https://github.com/pytorch/pytorch/pull/11682", "id": 360117904, "node_id": "MDExOlB1bGxSZXF1ZXN0MjE1NDU0MjA1", "number": 11682, "title": "Fixes for Torch Script C++ API", "user": {"login": "goldsborough", "id": 6429851, "node_id": "MDQ6VXNlcjY0Mjk4NTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/6429851?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goldsborough", "html_url": "https://github.com/goldsborough", "followers_url": "https://api.github.com/users/goldsborough/followers", "following_url": "https://api.github.com/users/goldsborough/following{/other_user}", "gists_url": "https://api.github.com/users/goldsborough/gists{/gist_id}", "starred_url": "https://api.github.com/users/goldsborough/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goldsborough/subscriptions", "organizations_url": "https://api.github.com/users/goldsborough/orgs", "repos_url": "https://api.github.com/users/goldsborough/repos", "events_url": "https://api.github.com/users/goldsborough/events{/privacy}", "received_events_url": "https://api.github.com/users/goldsborough/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-09-14T00:53:53Z", "updated_at": "2018-09-17T16:56:08Z", "closed_at": "2018-09-17T16:56:08Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/11682", "html_url": "https://github.com/pytorch/pytorch/pull/11682", "diff_url": "https://github.com/pytorch/pytorch/pull/11682.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/11682.patch"}, "body_html": "<p>A couple fixes I deem necessary to the TorchScript C++ API after writing the tutorial:</p>\n<ol>\n<li>\n<p>When I was creating the custom op API, I created <code>torch/op.h</code> as the one-stop header for creating custom ops. I now notice that there is no good header for the TorchScript C++ story altogether, i.e. when you just want to load a script module in C++ without any custom ops necessarily. The <code>torch/op.h</code> header suits that purpose just as well of course, but I think we should rename it to <code>torch/script.h</code>, which seems like a great name for this feature.</p>\n</li>\n<li>\n<p>The current API for the CMake we provided was that we defined a bunch of variables like <code>TORCH_LIBRARY_DIRS</code> and <code>TORCH_INCLUDES</code> and then expected users to add those variables to their targets. We also had a CMake function that did that for you automatically. I now realized a much smarter way of doing this is to create an <code>IMPORTED</code> target for the libtorch library in CMake, and then add all this stuff to the link interface of that target. Then all downstream users have to do is <code>target_link_libraries(my_target torch)</code> and they get all the proper includes, libraries and compiler flags added to their target. This means we can get rid of the CMake function and all that stuff. <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=79994\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/orionr\">@orionr</a>  AFAIK this is a much, much better way of doing all of this, no?</p>\n</li>\n<li>\n<p>Since we distribute libtorch with <code>D_GLIBCXX_USE_CXX11_ABI=0</code>, dependent libraries must set this flag too. I now add this to the interface compile options of this imported target.</p>\n</li>\n<li>\n<p>Fixes to JIT docs.</p>\n</li>\n</ol>\n<p>These could likely be 4 different PRs but given the release I wouldn't mind landing them all asap.</p>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=370202\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/zdevito\">@zdevito</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=17890620\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/dzhulgakov\">@dzhulgakov</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1310570\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/soumith\">@soumith</a></p>", "body_text": "A couple fixes I deem necessary to the TorchScript C++ API after writing the tutorial:\n\n\nWhen I was creating the custom op API, I created torch/op.h as the one-stop header for creating custom ops. I now notice that there is no good header for the TorchScript C++ story altogether, i.e. when you just want to load a script module in C++ without any custom ops necessarily. The torch/op.h header suits that purpose just as well of course, but I think we should rename it to torch/script.h, which seems like a great name for this feature.\n\n\nThe current API for the CMake we provided was that we defined a bunch of variables like TORCH_LIBRARY_DIRS and TORCH_INCLUDES and then expected users to add those variables to their targets. We also had a CMake function that did that for you automatically. I now realized a much smarter way of doing this is to create an IMPORTED target for the libtorch library in CMake, and then add all this stuff to the link interface of that target. Then all downstream users have to do is target_link_libraries(my_target torch) and they get all the proper includes, libraries and compiler flags added to their target. This means we can get rid of the CMake function and all that stuff. @orionr  AFAIK this is a much, much better way of doing all of this, no?\n\n\nSince we distribute libtorch with D_GLIBCXX_USE_CXX11_ABI=0, dependent libraries must set this flag too. I now add this to the interface compile options of this imported target.\n\n\nFixes to JIT docs.\n\n\nThese could likely be 4 different PRs but given the release I wouldn't mind landing them all asap.\n@zdevito @dzhulgakov @soumith", "body": "A couple fixes I deem necessary to the TorchScript C++ API after writing the tutorial:\r\n\r\n1. When I was creating the custom op API, I created `torch/op.h` as the one-stop header for creating custom ops. I now notice that there is no good header for the TorchScript C++ story altogether, i.e. when you just want to load a script module in C++ without any custom ops necessarily. The `torch/op.h` header suits that purpose just as well of course, but I think we should rename it to `torch/script.h`, which seems like a great name for this feature.\r\n\r\n2. The current API for the CMake we provided was that we defined a bunch of variables like `TORCH_LIBRARY_DIRS` and `TORCH_INCLUDES` and then expected users to add those variables to their targets. We also had a CMake function that did that for you automatically. I now realized a much smarter way of doing this is to create an `IMPORTED` target for the libtorch library in CMake, and then add all this stuff to the link interface of that target. Then all downstream users have to do is `target_link_libraries(my_target torch)` and they get all the proper includes, libraries and compiler flags added to their target. This means we can get rid of the CMake function and all that stuff. @orionr  AFAIK this is a much, much better way of doing all of this, no?\r\n\r\n3. Since we distribute libtorch with `D_GLIBCXX_USE_CXX11_ABI=0`, dependent libraries must set this flag too. I now add this to the interface compile options of this imported target.\r\n\r\n4. Fixes to JIT docs.\r\n\r\nThese could likely be 4 different PRs but given the release I wouldn't mind landing them all asap.\r\n\r\n@zdevito @dzhulgakov @soumith "}