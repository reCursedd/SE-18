{"url": "https://api.github.com/repos/pytorch/pytorch/issues/13896", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/13896/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/13896/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/13896/events", "html_url": "https://github.com/pytorch/pytorch/issues/13896", "id": 380261942, "node_id": "MDU6SXNzdWUzODAyNjE5NDI=", "number": 13896, "title": "[Caffe2] SSD models inference", "user": {"login": "ArutyunovG", "id": 10763026, "node_id": "MDQ6VXNlcjEwNzYzMDI2", "avatar_url": "https://avatars0.githubusercontent.com/u/10763026?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ArutyunovG", "html_url": "https://github.com/ArutyunovG", "followers_url": "https://api.github.com/users/ArutyunovG/followers", "following_url": "https://api.github.com/users/ArutyunovG/following{/other_user}", "gists_url": "https://api.github.com/users/ArutyunovG/gists{/gist_id}", "starred_url": "https://api.github.com/users/ArutyunovG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ArutyunovG/subscriptions", "organizations_url": "https://api.github.com/users/ArutyunovG/orgs", "repos_url": "https://api.github.com/users/ArutyunovG/repos", "events_url": "https://api.github.com/users/ArutyunovG/events{/privacy}", "received_events_url": "https://api.github.com/users/ArutyunovG/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 890282107, "node_id": "MDU6TGFiZWw4OTAyODIxMDc=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/caffe2", "name": "caffe2", "color": "210aa8", "default": false}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-11-13T14:49:57Z", "updated_at": "2018-11-19T18:57:19Z", "closed_at": null, "author_association": "CONTRIBUTOR", "body_html": "<p>Hi,</p>\n<p>I'm considering to implement SSD models inference (but not training) in Caffe2. The models are trained either in TF OD API or in Caffe SSD branch. In both cases, they do essentially the same, with some minor implementation differences. I was able to port models directly from TF OD API to Caffe SSD with identical results, so they do the same.</p>\n<p>As far as I know, at the moment, there is no DetectionOutput layer (with class agnostic nms) equivalent. Also, Mask R-CNN's use im_info and input FM height and width to figure out, how to tile anchors, which are implemented as separate blob. So there is no PriorBox layer as well, which performs tiling.</p>\n<p>There seem to be three solutions here: 1) modify BoxWithNMSLimit/GenerateProposals and related stuff, 2) write separate PriorBoxOp and DetectionOutputOp; 3) don't change anything in Caffe2: just write separate utility code that implements detection output (priorboxes are tiled just in this code based on input size). In this case the code runs over concats of bbox deltas and confidences after the network is finished.</p>\n<p>Is there any interest in such contribution? How is it better for you to implement those if there is interest?<br>\nIn any case, at the moment I'm interested in porting Caffe2 with max existing fucntionality to Windows, so this is a question on possible future continuation of Caffe2 usage.</p>", "body_text": "Hi,\nI'm considering to implement SSD models inference (but not training) in Caffe2. The models are trained either in TF OD API or in Caffe SSD branch. In both cases, they do essentially the same, with some minor implementation differences. I was able to port models directly from TF OD API to Caffe SSD with identical results, so they do the same.\nAs far as I know, at the moment, there is no DetectionOutput layer (with class agnostic nms) equivalent. Also, Mask R-CNN's use im_info and input FM height and width to figure out, how to tile anchors, which are implemented as separate blob. So there is no PriorBox layer as well, which performs tiling.\nThere seem to be three solutions here: 1) modify BoxWithNMSLimit/GenerateProposals and related stuff, 2) write separate PriorBoxOp and DetectionOutputOp; 3) don't change anything in Caffe2: just write separate utility code that implements detection output (priorboxes are tiled just in this code based on input size). In this case the code runs over concats of bbox deltas and confidences after the network is finished.\nIs there any interest in such contribution? How is it better for you to implement those if there is interest?\nIn any case, at the moment I'm interested in porting Caffe2 with max existing fucntionality to Windows, so this is a question on possible future continuation of Caffe2 usage.", "body": "Hi,\r\n\r\nI'm considering to implement SSD models inference (but not training) in Caffe2. The models are trained either in TF OD API or in Caffe SSD branch. In both cases, they do essentially the same, with some minor implementation differences. I was able to port models directly from TF OD API to Caffe SSD with identical results, so they do the same.\r\n\r\nAs far as I know, at the moment, there is no DetectionOutput layer (with class agnostic nms) equivalent. Also, Mask R-CNN's use im_info and input FM height and width to figure out, how to tile anchors, which are implemented as separate blob. So there is no PriorBox layer as well, which performs tiling.\r\n\r\nThere seem to be three solutions here: 1) modify BoxWithNMSLimit/GenerateProposals and related stuff, 2) write separate PriorBoxOp and DetectionOutputOp; 3) don't change anything in Caffe2: just write separate utility code that implements detection output (priorboxes are tiled just in this code based on input size). In this case the code runs over concats of bbox deltas and confidences after the network is finished.\r\n\r\nIs there any interest in such contribution? How is it better for you to implement those if there is interest?\r\nIn any case, at the moment I'm interested in porting Caffe2 with max existing fucntionality to Windows, so this is a question on possible future continuation of Caffe2 usage."}