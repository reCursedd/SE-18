{"url": "https://api.github.com/repos/pytorch/pytorch/issues/13218", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/13218/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/13218/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/13218/events", "html_url": "https://github.com/pytorch/pytorch/issues/13218", "id": 374701901, "node_id": "MDU6SXNzdWUzNzQ3MDE5MDE=", "number": 13218, "title": "Support for integer interpolation (torch.nn.functional.interpolate)", "user": {"login": "martinruenz", "id": 303783, "node_id": "MDQ6VXNlcjMwMzc4Mw==", "avatar_url": "https://avatars0.githubusercontent.com/u/303783?v=4", "gravatar_id": "", "url": "https://api.github.com/users/martinruenz", "html_url": "https://github.com/martinruenz", "followers_url": "https://api.github.com/users/martinruenz/followers", "following_url": "https://api.github.com/users/martinruenz/following{/other_user}", "gists_url": "https://api.github.com/users/martinruenz/gists{/gist_id}", "starred_url": "https://api.github.com/users/martinruenz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/martinruenz/subscriptions", "organizations_url": "https://api.github.com/users/martinruenz/orgs", "repos_url": "https://api.github.com/users/martinruenz/repos", "events_url": "https://api.github.com/users/martinruenz/events{/privacy}", "received_events_url": "https://api.github.com/users/martinruenz/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 443483881, "node_id": "MDU6TGFiZWw0NDM0ODM4ODE=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/todo", "name": "todo", "color": "c2e0c6", "default": false}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-10-27T23:56:45Z", "updated_at": "2018-10-29T21:30:21Z", "closed_at": null, "author_association": "NONE", "body_html": "<h2><g-emoji class=\"g-emoji\" alias=\"rocket\" fallback-src=\"https://assets-cdn.github.com/images/icons/emoji/unicode/1f680.png\">\ud83d\ude80</g-emoji> Feature</h2>\n<p>Currently, <code>torch.nn.functional.interpolate</code> does not support integer formats (I tested int and uint8). I would appreciate having support for these formats, or a description in the documentation mentioning why they are not supported.</p>\n<h2>Motivation</h2>\n<p>Consider having an image representing a mask. To scale this image (nearest neighbor) using pytorch I would need to use the following hack:</p>\n<div class=\"highlight highlight-source-python\"><pre>mask <span class=\"pl-k\">=</span> (torch.randn((<span class=\"pl-c1\">1</span>,<span class=\"pl-c1\">1</span>,<span class=\"pl-c1\">50</span>,<span class=\"pl-c1\">50</span>)) <span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">1</span>)   \ntorch.nn.functional.interpolate(mask.float(),<span class=\"pl-v\">scale_factor</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">0.5</span>).int()  </pre></div>\n<p>This is introducing unnecessary casts and less clear compared to the following code, which fails:</p>\n<div class=\"highlight highlight-source-python\"><pre>mask <span class=\"pl-k\">=</span> (torch.randn((<span class=\"pl-c1\">1</span>,<span class=\"pl-c1\">1</span>,<span class=\"pl-c1\">50</span>,<span class=\"pl-c1\">50</span>)) <span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">1</span>)   \ntorch.nn.functional.interpolate(mask,<span class=\"pl-v\">scale_factor</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">0.5</span>) <span class=\"pl-c\"><span class=\"pl-c\">#</span> RuntimeError: upsample_nearest2d_forward is not implemented for type torch.ByteTensor</span>\n</pre></div>", "body_text": "\ud83d\ude80 Feature\nCurrently, torch.nn.functional.interpolate does not support integer formats (I tested int and uint8). I would appreciate having support for these formats, or a description in the documentation mentioning why they are not supported.\nMotivation\nConsider having an image representing a mask. To scale this image (nearest neighbor) using pytorch I would need to use the following hack:\nmask = (torch.randn((1,1,50,50)) > 1)   \ntorch.nn.functional.interpolate(mask.float(),scale_factor=0.5).int()  \nThis is introducing unnecessary casts and less clear compared to the following code, which fails:\nmask = (torch.randn((1,1,50,50)) > 1)   \ntorch.nn.functional.interpolate(mask,scale_factor=0.5) # RuntimeError: upsample_nearest2d_forward is not implemented for type torch.ByteTensor", "body": "## \ud83d\ude80 Feature\r\nCurrently, `torch.nn.functional.interpolate` does not support integer formats (I tested int and uint8). I would appreciate having support for these formats, or a description in the documentation mentioning why they are not supported. \r\n\r\n## Motivation\r\n\r\nConsider having an image representing a mask. To scale this image (nearest neighbor) using pytorch I would need to use the following hack:\r\n```python\r\nmask = (torch.randn((1,1,50,50)) > 1)   \r\ntorch.nn.functional.interpolate(mask.float(),scale_factor=0.5).int()  \r\n```\r\n\r\nThis is introducing unnecessary casts and less clear compared to the following code, which fails:\r\n```python\r\nmask = (torch.randn((1,1,50,50)) > 1)   \r\ntorch.nn.functional.interpolate(mask,scale_factor=0.5) # RuntimeError: upsample_nearest2d_forward is not implemented for type torch.ByteTensor\r\n\r\n```\r\n"}