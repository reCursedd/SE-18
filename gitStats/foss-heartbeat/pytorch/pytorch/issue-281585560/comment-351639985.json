{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/351639985", "html_url": "https://github.com/pytorch/pytorch/pull/4142#issuecomment-351639985", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/4142", "id": 351639985, "node_id": "MDEyOklzc3VlQ29tbWVudDM1MTYzOTk4NQ==", "user": {"login": "fritzo", "id": 648532, "node_id": "MDQ6VXNlcjY0ODUzMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/648532?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fritzo", "html_url": "https://github.com/fritzo", "followers_url": "https://api.github.com/users/fritzo/followers", "following_url": "https://api.github.com/users/fritzo/following{/other_user}", "gists_url": "https://api.github.com/users/fritzo/gists{/gist_id}", "starred_url": "https://api.github.com/users/fritzo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fritzo/subscriptions", "organizations_url": "https://api.github.com/users/fritzo/orgs", "repos_url": "https://api.github.com/users/fritzo/repos", "events_url": "https://api.github.com/users/fritzo/events{/privacy}", "received_events_url": "https://api.github.com/users/fritzo/received_events", "type": "User", "site_admin": false}, "created_at": "2017-12-14T08:20:16Z", "updated_at": "2017-12-14T08:20:16Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=4583066\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/apaszke\">@apaszke</a> I'm just hoping to minimize overhead maintaining backwards compatibility (e.g. it's much easier to refactor torch.distributions than pyro.distributions <g-emoji class=\"g-emoji\" alias=\"wink\" fallback-src=\"https://assets-cdn.github.com/images/icons/emoji/unicode/1f609.png\">\ud83d\ude09</g-emoji> ). Is it enough to add a single additional test to this PR?</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">test_sample_n_deprecated</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>):\n    <span class=\"pl-k\">with</span> warnings.catch_warnings(<span class=\"pl-v\">record</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>) <span class=\"pl-k\">as</span> w:\n        warnings.simplefilter(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>always<span class=\"pl-pds\">\"</span></span>)\n        Normal(<span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">1</span>).sample_n(<span class=\"pl-c1\">1</span>)\n        <span class=\"pl-c1\">self</span>.assertTrue(w)</pre></div>\n<p>Then in a follow-up PR we can replace <code>.sample_n(n)</code> with <code>.sample((n,))</code> in tests?</p>", "body_text": "@apaszke I'm just hoping to minimize overhead maintaining backwards compatibility (e.g. it's much easier to refactor torch.distributions than pyro.distributions \ud83d\ude09 ). Is it enough to add a single additional test to this PR?\ndef test_sample_n_deprecated(self):\n    with warnings.catch_warnings(record=True) as w:\n        warnings.simplefilter(\"always\")\n        Normal(0, 1).sample_n(1)\n        self.assertTrue(w)\nThen in a follow-up PR we can replace .sample_n(n) with .sample((n,)) in tests?", "body": "@apaszke I'm just hoping to minimize overhead maintaining backwards compatibility (e.g. it's much easier to refactor torch.distributions than pyro.distributions \ud83d\ude09 ). Is it enough to add a single additional test to this PR?\r\n```py\r\ndef test_sample_n_deprecated(self):\r\n    with warnings.catch_warnings(record=True) as w:\r\n        warnings.simplefilter(\"always\")\r\n        Normal(0, 1).sample_n(1)\r\n        self.assertTrue(w)\r\n```\r\nThen in a follow-up PR we can replace `.sample_n(n)` with `.sample((n,))` in tests?"}