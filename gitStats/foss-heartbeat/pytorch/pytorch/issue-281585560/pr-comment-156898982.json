{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/156898982", "pull_request_review_id": 83449187, "id": 156898982, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1Njg5ODk4Mg==", "diff_hunk": "@@ -1,25 +1,39 @@\n from torch.autograd import Variable\n+import warnings\n \n \n class Distribution(object):\n     r\"\"\"\n     Distribution is the abstract base class for probability distributions.\n     \"\"\"\n+\n+    has_rsample = False\n     has_enumerate_support = False\n \n-    def sample(self):\n+    def sample(self, sample_shape=()):\n         \"\"\"\n-        Generates a single sample or single batch of samples if the distribution\n-        parameters are batched.\n+        Generates a sample_shape shaped sample or sample_shape shaped batch of\n+        samples if the distribution parameters are batched. Currently only\n+        supports `len(sample_shape)<2`.\n+        \"\"\"\n+        z = self.rsample(sample_shape)\n+        return z.detach() if hasattr(z, 'detach') else z\n+\n+    def rsample(self, sample_shape=()):\n+        \"\"\"\n+        Generates a sample_shape shaped reparameterized sample or sample_shape\n+        shaped batch of reparameterized samples if the distribution parameters\n+        are batched. Currently only supports `len(sample_shape)<2`.\n         \"\"\"\n         raise NotImplementedError\n \n     def sample_n(self, n):\n         \"\"\"\n-        Generates n samples or n batches of samples if the distribution parameters\n-        are batched.\n+        Generates n samples or n batches of samples if the distribution\n+        parameters are batched.\n         \"\"\"\n-        raise NotImplementedError\n+        warnings.warn('sample_n will be deprecated. Use .sample((n,)) instead', PendingDeprecationWarning)", "path": "torch/distributions/distribution.py", "position": null, "original_position": 41, "commit_id": "85eee0ec7727793f03cac8cafeaa9863812103a4", "original_commit_id": "b236eb9fe3cb119ec2fd7d5b4e67eb501ae73300", "user": {"login": "fritzo", "id": 648532, "node_id": "MDQ6VXNlcjY0ODUzMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/648532?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fritzo", "html_url": "https://github.com/fritzo", "followers_url": "https://api.github.com/users/fritzo/followers", "following_url": "https://api.github.com/users/fritzo/following{/other_user}", "gists_url": "https://api.github.com/users/fritzo/gists{/gist_id}", "starred_url": "https://api.github.com/users/fritzo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fritzo/subscriptions", "organizations_url": "https://api.github.com/users/fritzo/orgs", "repos_url": "https://api.github.com/users/fritzo/repos", "events_url": "https://api.github.com/users/fritzo/events{/privacy}", "received_events_url": "https://api.github.com/users/fritzo/received_events", "type": "User", "site_admin": false}, "body": "Should be a `DeprecationWarning` rather than a `PendingDeprecationWarning` (which are silenced by default).", "created_at": "2017-12-14T10:00:13Z", "updated_at": "2018-11-23T15:37:22Z", "html_url": "https://github.com/pytorch/pytorch/pull/4142#discussion_r156898982", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4142", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/156898982"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/4142#discussion_r156898982"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4142"}}, "body_html": "<p>Should be a <code>DeprecationWarning</code> rather than a <code>PendingDeprecationWarning</code> (which are silenced by default).</p>", "body_text": "Should be a DeprecationWarning rather than a PendingDeprecationWarning (which are silenced by default)."}