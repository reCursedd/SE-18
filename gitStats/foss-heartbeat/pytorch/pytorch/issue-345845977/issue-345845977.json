{"url": "https://api.github.com/repos/pytorch/pytorch/issues/10013", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/10013/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/10013/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/10013/events", "html_url": "https://github.com/pytorch/pytorch/issues/10013", "id": 345845977, "node_id": "MDU6SXNzdWUzNDU4NDU5Nzc=", "number": 10013, "title": "undefined_tensor_test (and probably others) regex match on exception *including* backtrace, which is not portable", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1027606656, "node_id": "MDU6TGFiZWwxMDI3NjA2NjU2", "url": "https://api.github.com/repos/pytorch/pytorch/labels/bootcamp", "name": "bootcamp", "color": "a99bdd", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-07-30T16:57:56Z", "updated_at": "2018-08-22T19:41:10Z", "closed_at": "2018-08-22T19:41:10Z", "author_association": "CONTRIBUTOR", "body_html": "<p><code>undefined_tensor_test</code> asserts that an error message for <code>undef.add(undef)</code> must mention <code>add</code>.</p>\n<p>It indeed does, but only because <code>add</code> is mentioned in the <em>backtrace</em>:</p>\n<pre><code>due to unexpected exception with message:\n  result_type != ScalarType::Undefined ASSERT FAILED at ../aten/src/ATen/\n  native/TensorIterator.cpp:90, please report a bug to PyTorch.\n  (compute_common_type at ../aten/src/ATen/native/TensorIterator.cpp:90)\n  frame #0: at::TensorIterator::Builder::build() + 0x77 (0x7fa7e3c5665d in /\n  home/ezyang/Dev/pytorch-cifix/build/lib/libcaffe2.so)\n  frame #1: at::TensorIterator::binary_op(at::Tensor&amp;, at::Tensor const&amp;, at::\n  Tensor const&amp;) + 0x71 (0x7fa7e3c55815 in /home/ezyang/Dev/pytorch-cifix/\n  build/lib/libcaffe2.so)\n  frame #2: at::native::add_out(at::Tensor&amp;, at::Tensor const&amp;, at::Tensor\n  const&amp;, at::Scalar) + 0x25d (0x7fa7e3bc9f6f in /home/ezyang/Dev/pytorch-\n  cifix/build/lib/libcaffe2.so)\n  frame #3: at::native::add(at::Tensor const&amp;, at::Tensor const&amp;, at::Scalar) +\n  0x50 (0x7fa7e3bca128 in /home/ezyang/Dev/pytorch-cifix/build/lib/libcaffe2.so)\n  so)\n  frame #4: at::Type::add(at::Tensor const&amp;, at::Tensor const&amp;, at::Scalar)\n  const + 0x5b (0x7fa7e3e0fb49 in /home/ezyang/Dev/pytorch-cifix/build/lib/\n  libcaffe2.so)\n  frame #5: build/bin/undefined_tensor_test() [0x452ef9]\n  frame #6: build/bin/undefined_tensor_test() [0x43b01e]\n  frame #7: build/bin/undefined_tensor_test() [0x42b374]\n  frame #8: build/bin/undefined_tensor_test() [0x42ab21]\n  frame #9: build/bin/undefined_tensor_test() [0x425b61]\n  frame #10: build/bin/undefined_tensor_test() [0x4258b7]\n  frame #11: build/bin/undefined_tensor_test() [0x4245f3]\n  frame #12: build/bin/undefined_tensor_test() [0x426f98]\n  frame #13: build/bin/undefined_tensor_test() [0x428222]\n  frame #14: build/bin/undefined_tensor_test() [0x427ffc]\n  frame #15: build/bin/undefined_tensor_test() [0x427f9f]\n  frame #16: build/bin/undefined_tensor_test() [0x43a597]\n  frame #17: __libc_start_main + 0xf5 (0x7fa7d2c08445 in /lib64/libc.so.6)\n  frame #18: build/bin/undefined_tensor_test() [0x4183c9]\n</code></pre>\n<p>This is non-portable and fragile. When we test that a message occurs in an exception, we should not regex over the backtrace!</p>\n<p>CC <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=36936338\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/mingzhe09088\">@mingzhe09088</a>, because you disabled this test as it was failing in Caffe2</p>", "body_text": "undefined_tensor_test asserts that an error message for undef.add(undef) must mention add.\nIt indeed does, but only because add is mentioned in the backtrace:\ndue to unexpected exception with message:\n  result_type != ScalarType::Undefined ASSERT FAILED at ../aten/src/ATen/\n  native/TensorIterator.cpp:90, please report a bug to PyTorch.\n  (compute_common_type at ../aten/src/ATen/native/TensorIterator.cpp:90)\n  frame #0: at::TensorIterator::Builder::build() + 0x77 (0x7fa7e3c5665d in /\n  home/ezyang/Dev/pytorch-cifix/build/lib/libcaffe2.so)\n  frame #1: at::TensorIterator::binary_op(at::Tensor&, at::Tensor const&, at::\n  Tensor const&) + 0x71 (0x7fa7e3c55815 in /home/ezyang/Dev/pytorch-cifix/\n  build/lib/libcaffe2.so)\n  frame #2: at::native::add_out(at::Tensor&, at::Tensor const&, at::Tensor\n  const&, at::Scalar) + 0x25d (0x7fa7e3bc9f6f in /home/ezyang/Dev/pytorch-\n  cifix/build/lib/libcaffe2.so)\n  frame #3: at::native::add(at::Tensor const&, at::Tensor const&, at::Scalar) +\n  0x50 (0x7fa7e3bca128 in /home/ezyang/Dev/pytorch-cifix/build/lib/libcaffe2.so)\n  so)\n  frame #4: at::Type::add(at::Tensor const&, at::Tensor const&, at::Scalar)\n  const + 0x5b (0x7fa7e3e0fb49 in /home/ezyang/Dev/pytorch-cifix/build/lib/\n  libcaffe2.so)\n  frame #5: build/bin/undefined_tensor_test() [0x452ef9]\n  frame #6: build/bin/undefined_tensor_test() [0x43b01e]\n  frame #7: build/bin/undefined_tensor_test() [0x42b374]\n  frame #8: build/bin/undefined_tensor_test() [0x42ab21]\n  frame #9: build/bin/undefined_tensor_test() [0x425b61]\n  frame #10: build/bin/undefined_tensor_test() [0x4258b7]\n  frame #11: build/bin/undefined_tensor_test() [0x4245f3]\n  frame #12: build/bin/undefined_tensor_test() [0x426f98]\n  frame #13: build/bin/undefined_tensor_test() [0x428222]\n  frame #14: build/bin/undefined_tensor_test() [0x427ffc]\n  frame #15: build/bin/undefined_tensor_test() [0x427f9f]\n  frame #16: build/bin/undefined_tensor_test() [0x43a597]\n  frame #17: __libc_start_main + 0xf5 (0x7fa7d2c08445 in /lib64/libc.so.6)\n  frame #18: build/bin/undefined_tensor_test() [0x4183c9]\n\nThis is non-portable and fragile. When we test that a message occurs in an exception, we should not regex over the backtrace!\nCC @mingzhe09088, because you disabled this test as it was failing in Caffe2", "body": "`undefined_tensor_test` asserts that an error message for `undef.add(undef)` must mention `add`.\r\n\r\nIt indeed does, but only because `add` is mentioned in the *backtrace*:\r\n\r\n```\r\ndue to unexpected exception with message:\r\n  result_type != ScalarType::Undefined ASSERT FAILED at ../aten/src/ATen/\r\n  native/TensorIterator.cpp:90, please report a bug to PyTorch.\r\n  (compute_common_type at ../aten/src/ATen/native/TensorIterator.cpp:90)\r\n  frame #0: at::TensorIterator::Builder::build() + 0x77 (0x7fa7e3c5665d in /\r\n  home/ezyang/Dev/pytorch-cifix/build/lib/libcaffe2.so)\r\n  frame #1: at::TensorIterator::binary_op(at::Tensor&, at::Tensor const&, at::\r\n  Tensor const&) + 0x71 (0x7fa7e3c55815 in /home/ezyang/Dev/pytorch-cifix/\r\n  build/lib/libcaffe2.so)\r\n  frame #2: at::native::add_out(at::Tensor&, at::Tensor const&, at::Tensor\r\n  const&, at::Scalar) + 0x25d (0x7fa7e3bc9f6f in /home/ezyang/Dev/pytorch-\r\n  cifix/build/lib/libcaffe2.so)\r\n  frame #3: at::native::add(at::Tensor const&, at::Tensor const&, at::Scalar) +\r\n  0x50 (0x7fa7e3bca128 in /home/ezyang/Dev/pytorch-cifix/build/lib/libcaffe2.so)\r\n  so)\r\n  frame #4: at::Type::add(at::Tensor const&, at::Tensor const&, at::Scalar)\r\n  const + 0x5b (0x7fa7e3e0fb49 in /home/ezyang/Dev/pytorch-cifix/build/lib/\r\n  libcaffe2.so)\r\n  frame #5: build/bin/undefined_tensor_test() [0x452ef9]\r\n  frame #6: build/bin/undefined_tensor_test() [0x43b01e]\r\n  frame #7: build/bin/undefined_tensor_test() [0x42b374]\r\n  frame #8: build/bin/undefined_tensor_test() [0x42ab21]\r\n  frame #9: build/bin/undefined_tensor_test() [0x425b61]\r\n  frame #10: build/bin/undefined_tensor_test() [0x4258b7]\r\n  frame #11: build/bin/undefined_tensor_test() [0x4245f3]\r\n  frame #12: build/bin/undefined_tensor_test() [0x426f98]\r\n  frame #13: build/bin/undefined_tensor_test() [0x428222]\r\n  frame #14: build/bin/undefined_tensor_test() [0x427ffc]\r\n  frame #15: build/bin/undefined_tensor_test() [0x427f9f]\r\n  frame #16: build/bin/undefined_tensor_test() [0x43a597]\r\n  frame #17: __libc_start_main + 0xf5 (0x7fa7d2c08445 in /lib64/libc.so.6)\r\n  frame #18: build/bin/undefined_tensor_test() [0x4183c9]\r\n```\r\n\r\nThis is non-portable and fragile. When we test that a message occurs in an exception, we should not regex over the backtrace!\r\n\r\nCC @mingzhe09088, because you disabled this test as it was failing in Caffe2"}