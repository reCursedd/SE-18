{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/422817556", "html_url": "https://github.com/pytorch/pytorch/issues/11756#issuecomment-422817556", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/11756", "id": 422817556, "node_id": "MDEyOklzc3VlQ29tbWVudDQyMjgxNzU1Ng==", "user": {"login": "chenwc07", "id": 40051091, "node_id": "MDQ6VXNlcjQwMDUxMDkx", "avatar_url": "https://avatars2.githubusercontent.com/u/40051091?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chenwc07", "html_url": "https://github.com/chenwc07", "followers_url": "https://api.github.com/users/chenwc07/followers", "following_url": "https://api.github.com/users/chenwc07/following{/other_user}", "gists_url": "https://api.github.com/users/chenwc07/gists{/gist_id}", "starred_url": "https://api.github.com/users/chenwc07/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chenwc07/subscriptions", "organizations_url": "https://api.github.com/users/chenwc07/orgs", "repos_url": "https://api.github.com/users/chenwc07/repos", "events_url": "https://api.github.com/users/chenwc07/events{/privacy}", "received_events_url": "https://api.github.com/users/chenwc07/received_events", "type": "User", "site_admin": false}, "created_at": "2018-09-19T14:06:57Z", "updated_at": "2018-09-19T14:06:57Z", "author_association": "NONE", "body_html": "<p>I also try the code like:<br>\n<code>os.environ[\"CUDA_VISIBLE_DEVICES\"] = '1'</code><br>\n<code>model = torch.nn.DataParallel(model, device_ids=[0]).cuda()</code><br>\n<code>output = model(data)</code></p>\n<p>the output is:<br>\nRuntimeError                              Traceback (most recent call last)<br>\n in ()<br>\n2     adjust_learning_rate(optimizer, epoch, [15, 30], 0.001, 5e-4)<br>\n3     # train for one epoch<br>\n----&gt; 4     train(train_loader, model, criterion, optimizer, epoch)<br>\n5     if epoch%2 == 0:<br>\n6         validate(val_loader,model=model,criterion=criterion)</p>\n<p>/home/developers/chenweicong/projects/ECO/ECO-pytorch/train_and_val.py in train(train_loader, model, criterion, optimizer, epoch)<br>\n39<br>\n40         # compute output, output size: [batch_size, num_class]<br>\n---&gt; 41         output = model(input_var)<br>\n42<br>\n43         loss = criterion(output, target_var)</p>\n<p>/home/zhangd/anaconda3/envs/pytorch/lib/python3.5/site-packages/torch/nn/modules/module.py in <strong>call</strong>(self, *input, **kwargs)<br>\n475             result = self._slow_forward(*input, **kwargs)<br>\n476         else:<br>\n--&gt; 477             result = self.forward(*input, **kwargs)<br>\n478         for hook in self._forward_hooks.values():<br>\n479             hook_result = hook(self, input, result)</p>\n<p>/home/zhangd/anaconda3/envs/pytorch/lib/python3.5/site-packages/torch/nn/parallel/data_parallel.py in forward(self, *inputs, **kwargs)<br>\n119         inputs, kwargs = self.scatter(inputs, kwargs, self.device_ids)<br>\n120         if len(self.device_ids) == 1:<br>\n--&gt; 121             return self.module(*inputs[0], **kwargs[0])<br>\n122         replicas = self.replicate(self.module, self.device_ids[:len(inputs)])<br>\n123         outputs = self.parallel_apply(replicas, inputs, kwargs)</p>\n<p>/home/zhangd/anaconda3/envs/pytorch/lib/python3.5/site-packages/torch/nn/modules/module.py in <strong>call</strong>(self, *input, **kwargs)<br>\n475             result = self._slow_forward(*input, **kwargs)<br>\n476         else:<br>\n--&gt; 477             result = self.forward(*input, **kwargs)<br>\n478         for hook in self._forward_hooks.values():<br>\n479             hook_result = hook(self, input, result)</p>\n<p>/home/developers/chenweicong/projects/ECO/ECO-pytorch/ECO_model.py in forward(self, input)<br>\n19         sample_len = 3<br>\n20         input_var = input.view((-1, sample_len) + input.size()[-2:])<br>\n---&gt; 21         output = self.base_model(input_var)<br>\n22<br>\n23         return output</p>\n<p>/home/zhangd/anaconda3/envs/pytorch/lib/python3.5/site-packages/torch/nn/modules/module.py in <strong>call</strong>(self, *input, **kwargs)<br>\n475             result = self._slow_forward(*input, **kwargs)<br>\n476         else:<br>\n--&gt; 477             result = self.forward(*input, **kwargs)<br>\n478         for hook in self._forward_hooks.values():<br>\n479             hook_result = hook(self, input, result)</p>\n<p>/home/developers/chenweicong/projects/ECO/ECO-pytorch/tf_model_zoo/ECO/pytorch_load.py in forward(self, input)<br>\n125                     data_dict[op[2]] = getattr(self, op[0])(inception_3c_transpose_output)<br>\n126                 else:<br>\n--&gt; 127                     data_dict[op[2]] = getattr(self, op[0])(data_dict[op[-1]])<br>\n128                     # getattr(self, op[0]).register_backward_hook(get_hook(op[0]))<br>\n129             elif op[1] == 'InnerProduct':</p>\n<p>/home/zhangd/anaconda3/envs/pytorch/lib/python3.5/site-packages/torch/nn/modules/module.py in <strong>call</strong>(self, *input, **kwargs)<br>\n475             result = self._slow_forward(*input, **kwargs)<br>\n476         else:<br>\n--&gt; 477             result = self.forward(*input, **kwargs)<br>\n478         for hook in self._forward_hooks.values():<br>\n479             hook_result = hook(self, input, result)</p>\n<p>/home/zhangd/anaconda3/envs/pytorch/lib/python3.5/site-packages/torch/nn/modules/batchnorm.py in forward(self, input)<br>\n64             input, self.running_mean, self.running_var, self.weight, self.bias,<br>\n65             self.training or not self.track_running_stats,<br>\n---&gt; 66             exponential_average_factor, self.eps)<br>\n67<br>\n68     def extra_repr(self):</p>\n<p>/home/zhangd/anaconda3/envs/pytorch/lib/python3.5/site-packages/torch/nn/functional.py in batch_norm(input, running_mean, running_var, weight, bias, training, momentum, eps)<br>\n1252     return torch.batch_norm(<br>\n1253         input, weight, bias, running_mean, running_var,<br>\n-&gt; 1254         training, momentum, eps, torch.backends.cudnn.enabled<br>\n1255     )<br>\n1256</p>\n<p>RuntimeError: CuDNN error: CUDNN_STATUS_INTERNAL_ERROR</p>\n<p>I should mention that everything is going well when os.environ[\"CUDA_VISIBLE_DEVICES\"] = '0/2/3'</p>", "body_text": "I also try the code like:\nos.environ[\"CUDA_VISIBLE_DEVICES\"] = '1'\nmodel = torch.nn.DataParallel(model, device_ids=[0]).cuda()\noutput = model(data)\nthe output is:\nRuntimeError                              Traceback (most recent call last)\n in ()\n2     adjust_learning_rate(optimizer, epoch, [15, 30], 0.001, 5e-4)\n3     # train for one epoch\n----> 4     train(train_loader, model, criterion, optimizer, epoch)\n5     if epoch%2 == 0:\n6         validate(val_loader,model=model,criterion=criterion)\n/home/developers/chenweicong/projects/ECO/ECO-pytorch/train_and_val.py in train(train_loader, model, criterion, optimizer, epoch)\n39\n40         # compute output, output size: [batch_size, num_class]\n---> 41         output = model(input_var)\n42\n43         loss = criterion(output, target_var)\n/home/zhangd/anaconda3/envs/pytorch/lib/python3.5/site-packages/torch/nn/modules/module.py in call(self, *input, **kwargs)\n475             result = self._slow_forward(*input, **kwargs)\n476         else:\n--> 477             result = self.forward(*input, **kwargs)\n478         for hook in self._forward_hooks.values():\n479             hook_result = hook(self, input, result)\n/home/zhangd/anaconda3/envs/pytorch/lib/python3.5/site-packages/torch/nn/parallel/data_parallel.py in forward(self, *inputs, **kwargs)\n119         inputs, kwargs = self.scatter(inputs, kwargs, self.device_ids)\n120         if len(self.device_ids) == 1:\n--> 121             return self.module(*inputs[0], **kwargs[0])\n122         replicas = self.replicate(self.module, self.device_ids[:len(inputs)])\n123         outputs = self.parallel_apply(replicas, inputs, kwargs)\n/home/zhangd/anaconda3/envs/pytorch/lib/python3.5/site-packages/torch/nn/modules/module.py in call(self, *input, **kwargs)\n475             result = self._slow_forward(*input, **kwargs)\n476         else:\n--> 477             result = self.forward(*input, **kwargs)\n478         for hook in self._forward_hooks.values():\n479             hook_result = hook(self, input, result)\n/home/developers/chenweicong/projects/ECO/ECO-pytorch/ECO_model.py in forward(self, input)\n19         sample_len = 3\n20         input_var = input.view((-1, sample_len) + input.size()[-2:])\n---> 21         output = self.base_model(input_var)\n22\n23         return output\n/home/zhangd/anaconda3/envs/pytorch/lib/python3.5/site-packages/torch/nn/modules/module.py in call(self, *input, **kwargs)\n475             result = self._slow_forward(*input, **kwargs)\n476         else:\n--> 477             result = self.forward(*input, **kwargs)\n478         for hook in self._forward_hooks.values():\n479             hook_result = hook(self, input, result)\n/home/developers/chenweicong/projects/ECO/ECO-pytorch/tf_model_zoo/ECO/pytorch_load.py in forward(self, input)\n125                     data_dict[op[2]] = getattr(self, op[0])(inception_3c_transpose_output)\n126                 else:\n--> 127                     data_dict[op[2]] = getattr(self, op[0])(data_dict[op[-1]])\n128                     # getattr(self, op[0]).register_backward_hook(get_hook(op[0]))\n129             elif op[1] == 'InnerProduct':\n/home/zhangd/anaconda3/envs/pytorch/lib/python3.5/site-packages/torch/nn/modules/module.py in call(self, *input, **kwargs)\n475             result = self._slow_forward(*input, **kwargs)\n476         else:\n--> 477             result = self.forward(*input, **kwargs)\n478         for hook in self._forward_hooks.values():\n479             hook_result = hook(self, input, result)\n/home/zhangd/anaconda3/envs/pytorch/lib/python3.5/site-packages/torch/nn/modules/batchnorm.py in forward(self, input)\n64             input, self.running_mean, self.running_var, self.weight, self.bias,\n65             self.training or not self.track_running_stats,\n---> 66             exponential_average_factor, self.eps)\n67\n68     def extra_repr(self):\n/home/zhangd/anaconda3/envs/pytorch/lib/python3.5/site-packages/torch/nn/functional.py in batch_norm(input, running_mean, running_var, weight, bias, training, momentum, eps)\n1252     return torch.batch_norm(\n1253         input, weight, bias, running_mean, running_var,\n-> 1254         training, momentum, eps, torch.backends.cudnn.enabled\n1255     )\n1256\nRuntimeError: CuDNN error: CUDNN_STATUS_INTERNAL_ERROR\nI should mention that everything is going well when os.environ[\"CUDA_VISIBLE_DEVICES\"] = '0/2/3'", "body": "I also try the code like:\r\n`os.environ[\"CUDA_VISIBLE_DEVICES\"] = '1'`\r\n`model = torch.nn.DataParallel(model, device_ids=[0]).cuda()`\r\n`output = model(data)`\r\n\r\nthe output is:\r\nRuntimeError                              Traceback (most recent call last)\r\n<ipython-input-14-f28dce7458d6> in <module>()\r\n      2     adjust_learning_rate(optimizer, epoch, [15, 30], 0.001, 5e-4)\r\n      3     # train for one epoch\r\n----> 4     train(train_loader, model, criterion, optimizer, epoch)\r\n      5     if epoch%2 == 0:\r\n      6         validate(val_loader,model=model,criterion=criterion)\r\n\r\n/home/developers/chenweicong/projects/ECO/ECO-pytorch/train_and_val.py in train(train_loader, model, criterion, optimizer, epoch)\r\n     39 \r\n     40         # compute output, output size: [batch_size, num_class]\r\n---> 41         output = model(input_var)\r\n     42 \r\n     43         loss = criterion(output, target_var)\r\n\r\n/home/zhangd/anaconda3/envs/pytorch/lib/python3.5/site-packages/torch/nn/modules/module.py in __call__(self, *input, **kwargs)\r\n    475             result = self._slow_forward(*input, **kwargs)\r\n    476         else:\r\n--> 477             result = self.forward(*input, **kwargs)\r\n    478         for hook in self._forward_hooks.values():\r\n    479             hook_result = hook(self, input, result)\r\n\r\n/home/zhangd/anaconda3/envs/pytorch/lib/python3.5/site-packages/torch/nn/parallel/data_parallel.py in forward(self, *inputs, **kwargs)\r\n    119         inputs, kwargs = self.scatter(inputs, kwargs, self.device_ids)\r\n    120         if len(self.device_ids) == 1:\r\n--> 121             return self.module(*inputs[0], **kwargs[0])\r\n    122         replicas = self.replicate(self.module, self.device_ids[:len(inputs)])\r\n    123         outputs = self.parallel_apply(replicas, inputs, kwargs)\r\n\r\n/home/zhangd/anaconda3/envs/pytorch/lib/python3.5/site-packages/torch/nn/modules/module.py in __call__(self, *input, **kwargs)\r\n    475             result = self._slow_forward(*input, **kwargs)\r\n    476         else:\r\n--> 477             result = self.forward(*input, **kwargs)\r\n    478         for hook in self._forward_hooks.values():\r\n    479             hook_result = hook(self, input, result)\r\n\r\n/home/developers/chenweicong/projects/ECO/ECO-pytorch/ECO_model.py in forward(self, input)\r\n     19         sample_len = 3\r\n     20         input_var = input.view((-1, sample_len) + input.size()[-2:])\r\n---> 21         output = self.base_model(input_var)\r\n     22 \r\n     23         return output\r\n\r\n/home/zhangd/anaconda3/envs/pytorch/lib/python3.5/site-packages/torch/nn/modules/module.py in __call__(self, *input, **kwargs)\r\n    475             result = self._slow_forward(*input, **kwargs)\r\n    476         else:\r\n--> 477             result = self.forward(*input, **kwargs)\r\n    478         for hook in self._forward_hooks.values():\r\n    479             hook_result = hook(self, input, result)\r\n\r\n/home/developers/chenweicong/projects/ECO/ECO-pytorch/tf_model_zoo/ECO/pytorch_load.py in forward(self, input)\r\n    125                     data_dict[op[2]] = getattr(self, op[0])(inception_3c_transpose_output)\r\n    126                 else:\r\n--> 127                     data_dict[op[2]] = getattr(self, op[0])(data_dict[op[-1]])\r\n    128                     # getattr(self, op[0]).register_backward_hook(get_hook(op[0]))\r\n    129             elif op[1] == 'InnerProduct':\r\n\r\n/home/zhangd/anaconda3/envs/pytorch/lib/python3.5/site-packages/torch/nn/modules/module.py in __call__(self, *input, **kwargs)\r\n    475             result = self._slow_forward(*input, **kwargs)\r\n    476         else:\r\n--> 477             result = self.forward(*input, **kwargs)\r\n    478         for hook in self._forward_hooks.values():\r\n    479             hook_result = hook(self, input, result)\r\n\r\n/home/zhangd/anaconda3/envs/pytorch/lib/python3.5/site-packages/torch/nn/modules/batchnorm.py in forward(self, input)\r\n     64             input, self.running_mean, self.running_var, self.weight, self.bias,\r\n     65             self.training or not self.track_running_stats,\r\n---> 66             exponential_average_factor, self.eps)\r\n     67 \r\n     68     def extra_repr(self):\r\n\r\n/home/zhangd/anaconda3/envs/pytorch/lib/python3.5/site-packages/torch/nn/functional.py in batch_norm(input, running_mean, running_var, weight, bias, training, momentum, eps)\r\n   1252     return torch.batch_norm(\r\n   1253         input, weight, bias, running_mean, running_var,\r\n-> 1254         training, momentum, eps, torch.backends.cudnn.enabled\r\n   1255     )\r\n   1256 \r\n\r\nRuntimeError: CuDNN error: CUDNN_STATUS_INTERNAL_ERROR\r\n\r\nI should mention that everything is going well when os.environ[\"CUDA_VISIBLE_DEVICES\"] = '0/2/3'"}