{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/217269451", "pull_request_review_id": 154939704, "id": 217269451, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNzI2OTQ1MQ==", "diff_hunk": "@@ -0,0 +1,68 @@\n+#pragma once\n+\n+#include <torch/detail/static.h>\n+#include <torch/tensor.h>\n+\n+#include <string>\n+#include <vector>\n+\n+namespace torch {\n+namespace serialize {\n+\n+//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+//                                 Reader\n+//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+class Reader {\n+ public:\n+  virtual ~Reader() = default;\n+\n+  virtual void read(\n+      const std::string& key,\n+      Tensor& tensor,\n+      bool is_buffer = false) = 0;\n+\n+  virtual void finish();\n+\n+  void read(\n+      const std::string& key,\n+      std::vector<Tensor>& tensors,\n+      bool is_buffer = false);\n+\n+  template <\n+      typename OutputIterator,\n+      typename = detail::is_output_iterator_t<OutputIterator>>\n+  void read(\n+      const std::string& key,\n+      OutputIterator output,\n+      bool is_buffer = false);\n+\n+  template <typename... Ts>\n+  void operator()(Ts&&... ts);\n+};\n+\n+//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+//                        Reader Implementation\n+//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+template <typename OutputIterator, typename>\n+void Reader::read(\n+    const std::string& key,\n+    OutputIterator output,\n+    bool is_buffer) {\n+  torch::Tensor size;\n+  read(key + \".size\", size);", "path": "torch/csrc/api/include/torch/serialize/reader.h", "position": null, "original_position": 54, "commit_id": "1e92bf31b4336182408bd01f1ed2d6dc59fa443b", "original_commit_id": "e89e0a29c0437960e00161a1855992e256da97ad", "user": {"login": "dzhulgakov", "id": 17890620, "node_id": "MDQ6VXNlcjE3ODkwNjIw", "avatar_url": "https://avatars2.githubusercontent.com/u/17890620?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dzhulgakov", "html_url": "https://github.com/dzhulgakov", "followers_url": "https://api.github.com/users/dzhulgakov/followers", "following_url": "https://api.github.com/users/dzhulgakov/following{/other_user}", "gists_url": "https://api.github.com/users/dzhulgakov/gists{/gist_id}", "starred_url": "https://api.github.com/users/dzhulgakov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dzhulgakov/subscriptions", "organizations_url": "https://api.github.com/users/dzhulgakov/orgs", "repos_url": "https://api.github.com/users/dzhulgakov/repos", "events_url": "https://api.github.com/users/dzhulgakov/events{/privacy}", "received_events_url": "https://api.github.com/users/dzhulgakov/received_events", "type": "User", "site_admin": false}, "body": "at some point it might be nice to gain an ability to read lists proper in the file format, but we're not there yet", "created_at": "2018-09-13T06:11:47Z", "updated_at": "2018-11-23T15:51:15Z", "html_url": "https://github.com/pytorch/pytorch/pull/11619#discussion_r217269451", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/11619", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/217269451"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/11619#discussion_r217269451"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/11619"}}, "body_html": "<p>at some point it might be nice to gain an ability to read lists proper in the file format, but we're not there yet</p>", "body_text": "at some point it might be nice to gain an ability to read lists proper in the file format, but we're not there yet"}