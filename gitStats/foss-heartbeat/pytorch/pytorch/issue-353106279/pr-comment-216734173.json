{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/216734173", "pull_request_review_id": 154286570, "id": 216734173, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNjczNDE3Mw==", "diff_hunk": "@@ -1344,46 +1344,10 @@ def instance_norm(input, running_mean=None, running_var=None, weight=None,\n     See :class:`~torch.nn.InstanceNorm1d`, :class:`~torch.nn.InstanceNorm2d`,\n     :class:`~torch.nn.InstanceNorm3d` for details.\n     \"\"\"\n-    if not use_input_stats and (running_mean is None or running_var is None):\n-        raise ValueError('Expected running_mean and running_var to be not None when use_input_stats=False')\n-\n-    b, c = input.size(0), input.size(1)\n-    if weight is not None:\n-        weight = weight.repeat(b)\n-    if bias is not None:\n-        bias = bias.repeat(b)\n-\n-    import torch.onnx.symbolic\n-\n-    @torch.onnx.symbolic_override(torch.onnx.symbolic.instance_norm)\n-    def _instance_norm(input, running_mean=None, running_var=None, weight=None,\n-                       bias=None, use_input_stats=None, momentum=None, eps=None):\n-        # Repeat stored stats and affine transform params if necessary\n-        if running_mean is not None:\n-            running_mean_orig = running_mean\n-            running_mean = running_mean_orig.repeat(b)\n-        if running_var is not None:\n-            running_var_orig = running_var\n-            running_var = running_var_orig.repeat(b)\n-\n-        # Apply instance norm\n-        input_reshaped = input.contiguous().view(1, b * c, *input.size()[2:])\n-\n-        out = batch_norm(\n-            input_reshaped, running_mean, running_var, weight=weight, bias=bias,\n-            training=use_input_stats, momentum=momentum, eps=eps)\n-\n-        # Reshape and copy back\n-        if running_mean is not None:\n-            running_mean_orig.copy_(running_mean.view(b, c).mean(0, keepdim=False))\n-        if running_var is not None:\n-            running_var_orig.copy_(running_var.view(b, c).mean(0, keepdim=False))\n-\n-        return out.view(b, c, *input.size()[2:])\n-    return _instance_norm(input, running_mean=running_mean,\n-                          running_var=running_var, weight=weight, bias=bias,\n-                          use_input_stats=use_input_stats, momentum=momentum,\n-                          eps=eps)\n+    return torch.instance_norm(", "path": "torch/nn/functional.py", "position": 44, "original_position": 44, "commit_id": "50336e4b93ae162e65a7c8242b98517e1fec4010", "original_commit_id": "4487731ef1fd59495614ceb338989654506de853", "user": {"login": "fmassa", "id": 9110200, "node_id": "MDQ6VXNlcjkxMTAyMDA=", "avatar_url": "https://avatars2.githubusercontent.com/u/9110200?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fmassa", "html_url": "https://github.com/fmassa", "followers_url": "https://api.github.com/users/fmassa/followers", "following_url": "https://api.github.com/users/fmassa/following{/other_user}", "gists_url": "https://api.github.com/users/fmassa/gists{/gist_id}", "starred_url": "https://api.github.com/users/fmassa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fmassa/subscriptions", "organizations_url": "https://api.github.com/users/fmassa/orgs", "repos_url": "https://api.github.com/users/fmassa/repos", "events_url": "https://api.github.com/users/fmassa/events{/privacy}", "received_events_url": "https://api.github.com/users/fmassa/received_events", "type": "User", "site_admin": false}, "body": "I think the plan is to avoid exposing `nn` functions in the `torch` namespace, but instead go via the `torch._C._VariableFunctions.blabla` or something like that.", "created_at": "2018-09-11T16:28:31Z", "updated_at": "2018-11-23T15:50:59Z", "html_url": "https://github.com/pytorch/pytorch/pull/10792#discussion_r216734173", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/10792", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/216734173"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/10792#discussion_r216734173"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/10792"}}, "body_html": "<p>I think the plan is to avoid exposing <code>nn</code> functions in the <code>torch</code> namespace, but instead go via the <code>torch._C._VariableFunctions.blabla</code> or something like that.</p>", "body_text": "I think the plan is to avoid exposing nn functions in the torch namespace, but instead go via the torch._C._VariableFunctions.blabla or something like that."}