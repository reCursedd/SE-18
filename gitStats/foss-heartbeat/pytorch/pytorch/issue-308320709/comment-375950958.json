{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/375950958", "html_url": "https://github.com/pytorch/pytorch/pull/5988#issuecomment-375950958", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/5988", "id": 375950958, "node_id": "MDEyOklzc3VlQ29tbWVudDM3NTk1MDk1OA==", "user": {"login": "fritzo", "id": 648532, "node_id": "MDQ6VXNlcjY0ODUzMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/648532?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fritzo", "html_url": "https://github.com/fritzo", "followers_url": "https://api.github.com/users/fritzo/followers", "following_url": "https://api.github.com/users/fritzo/following{/other_user}", "gists_url": "https://api.github.com/users/fritzo/gists{/gist_id}", "starred_url": "https://api.github.com/users/fritzo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fritzo/subscriptions", "organizations_url": "https://api.github.com/users/fritzo/orgs", "repos_url": "https://api.github.com/users/fritzo/repos", "events_url": "https://api.github.com/users/fritzo/events{/privacy}", "received_events_url": "https://api.github.com/users/fritzo/received_events", "type": "User", "site_admin": false}, "created_at": "2018-03-25T07:25:05Z", "updated_at": "2018-03-25T07:25:05Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=5674597\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/SsnL\">@SsnL</a> you can get the precision matrix via <code>torch.inverse(mvn.covariance_matrix)</code> for a <code>MultivariateNormal</code> instance <code>mvn</code>. This PR doesn't really add any new algorithms; rather it provides two properties that are standardized across distributions.</p>", "body_text": "@SsnL you can get the precision matrix via torch.inverse(mvn.covariance_matrix) for a MultivariateNormal instance mvn. This PR doesn't really add any new algorithms; rather it provides two properties that are standardized across distributions.", "body": "@SsnL you can get the precision matrix via `torch.inverse(mvn.covariance_matrix)` for a `MultivariateNormal` instance `mvn`. This PR doesn't really add any new algorithms; rather it provides two properties that are standardized across distributions. "}