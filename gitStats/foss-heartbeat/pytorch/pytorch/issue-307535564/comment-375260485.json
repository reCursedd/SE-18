{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/375260485", "html_url": "https://github.com/pytorch/pytorch/pull/5936#issuecomment-375260485", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/5936", "id": 375260485, "node_id": "MDEyOklzc3VlQ29tbWVudDM3NTI2MDQ4NQ==", "user": {"login": "Stonesjtu", "id": 4556044, "node_id": "MDQ6VXNlcjQ1NTYwNDQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/4556044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Stonesjtu", "html_url": "https://github.com/Stonesjtu", "followers_url": "https://api.github.com/users/Stonesjtu/followers", "following_url": "https://api.github.com/users/Stonesjtu/following{/other_user}", "gists_url": "https://api.github.com/users/Stonesjtu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Stonesjtu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Stonesjtu/subscriptions", "organizations_url": "https://api.github.com/users/Stonesjtu/orgs", "repos_url": "https://api.github.com/users/Stonesjtu/repos", "events_url": "https://api.github.com/users/Stonesjtu/events{/privacy}", "received_events_url": "https://api.github.com/users/Stonesjtu/received_events", "type": "User", "site_admin": false}, "created_at": "2018-03-22T10:47:58Z", "updated_at": "2018-03-22T10:47:58Z", "author_association": "CONTRIBUTOR", "body_html": "<p>For simple modules, overriding <code>__repr__</code> should be fine.</p>\n<p>When I have some critical attributes in <code>parent_module</code>, I prefer to maintain both the sub-module lines and extra attributes lines.</p>\n<p>original:</p>\n<pre><code>parent_module(\n  (child1): Linear(...)\n  (child2): Conv(...)\n)\n</code></pre>\n<p>target:</p>\n<pre><code>parent_module(batch_mode='Dynamic', running_mean=True\n  (child1): Linear(in_features=200, out_features=100)\n  (child2): Conv(stride=3, ...)\n)\n</code></pre>\n<p>It's difficult to print such lines in <code>parent_module</code> by subclassing <code>__repr__</code>, without referring to the <code>__repr__</code> of <code>nn.Module</code>.</p>", "body_text": "For simple modules, overriding __repr__ should be fine.\nWhen I have some critical attributes in parent_module, I prefer to maintain both the sub-module lines and extra attributes lines.\noriginal:\nparent_module(\n  (child1): Linear(...)\n  (child2): Conv(...)\n)\n\ntarget:\nparent_module(batch_mode='Dynamic', running_mean=True\n  (child1): Linear(in_features=200, out_features=100)\n  (child2): Conv(stride=3, ...)\n)\n\nIt's difficult to print such lines in parent_module by subclassing __repr__, without referring to the __repr__ of nn.Module.", "body": "For simple modules, overriding `__repr__` should be fine. \r\n\r\nWhen I have some critical attributes in `parent_module`, I prefer to maintain both the sub-module lines and extra attributes lines.\r\n\r\noriginal:\r\n```\r\nparent_module(\r\n  (child1): Linear(...)\r\n  (child2): Conv(...)\r\n)\r\n```\r\ntarget:\r\n```\r\nparent_module(batch_mode='Dynamic', running_mean=True\r\n  (child1): Linear(in_features=200, out_features=100)\r\n  (child2): Conv(stride=3, ...)\r\n)\r\n```\r\n\r\nIt's difficult to print such lines in `parent_module` by subclassing `__repr__`, without referring to the `__repr__` of `nn.Module`."}