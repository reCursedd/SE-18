{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/177754996", "pull_request_review_id": 107684608, "id": 177754996, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3Nzc1NDk5Ng==", "diff_hunk": "@@ -729,14 +729,47 @@ def share_memory(self):\n     def _get_name(self):\n         return self.__class__.__name__\n \n-    def __repr__(self):\n-        tmpstr = self._get_name() + '(\\n'\n+    def get_extra_repr(self):\n+        r\"\"\"Get the extra representation of the module\n+\n+        To print customized extra information, you should reimplement\n+        this method in your own modules. Each item in the returned list will\n+        be printed in separate line.\n+        \"\"\"\n+        return []\n+\n+    def _get_extra_lines(self):\n+        r\"\"\"Helper method to process extra representation\"\"\"\n+        extra_repr = self.get_extra_repr()\n+        if isinstance(extra_repr, str):\n+            return extra_repr.split('\\n')\n+        else:\n+            return extra_repr\n+\n+    def _get_child_lines(self):\n+        child_lines = []\n         for key, module in self._modules.items():\n-            modstr = module.__repr__()\n-            modstr = _addindent(modstr, 2)\n-            tmpstr = tmpstr + '  (' + key + '): ' + modstr + '\\n'\n-        tmpstr = tmpstr + ')'\n-        return tmpstr\n+            mod_str = module.__repr__()\n+            mod_str = _addindent(mod_str, 2)\n+            child_lines.append('(' + key + '): ' + mod_str)\n+        return child_lines\n+\n+    def __repr__(self):\n+        main_str = self._get_name() + '('\n+        # We treat the extra repr like the sub-module, one item per line\n+        # TODO:the api is to be discussed later\n+        extra_lines = self._get_extra_lines()\n+        child_lines = self._get_child_lines()\n+        lines = extra_lines + child_lines\n+        if lines:\n+            # simple one-liner info, which most builtin Moudules will use\n+            if len(extra_lines) == 1 and not child_lines:\n+                main_str += extra_lines[0]\n+            else:\n+                main_str += '\\n' + ''.join(['  ' + line + '\\n' for line in lines])", "path": "torch/nn/modules/module.py", "position": null, "original_position": 48, "commit_id": "399c7e9716a18eb776292c317fd7fcbc58a1107f", "original_commit_id": "fc5972e4ca181be8dc54a4b00d564c169afc2ce9", "user": {"login": "Stonesjtu", "id": 4556044, "node_id": "MDQ6VXNlcjQ1NTYwNDQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/4556044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Stonesjtu", "html_url": "https://github.com/Stonesjtu", "followers_url": "https://api.github.com/users/Stonesjtu/followers", "following_url": "https://api.github.com/users/Stonesjtu/following{/other_user}", "gists_url": "https://api.github.com/users/Stonesjtu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Stonesjtu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Stonesjtu/subscriptions", "organizations_url": "https://api.github.com/users/Stonesjtu/orgs", "repos_url": "https://api.github.com/users/Stonesjtu/repos", "events_url": "https://api.github.com/users/Stonesjtu/events{/privacy}", "received_events_url": "https://api.github.com/users/Stonesjtu/received_events", "type": "User", "site_admin": false}, "body": "It's not going to work.\r\n1) the `_addindent` does nothing when input string has only one line\r\n2) the trailing new-line is missing.\r\nActually I come up with a concrete solution, but harder to read:\r\n```\r\nmain_str += '\\n  ' + '\\n  '.join(lines) + '\\n'\r\n```", "created_at": "2018-03-28T13:48:09Z", "updated_at": "2018-11-23T15:41:14Z", "html_url": "https://github.com/pytorch/pytorch/pull/5936#discussion_r177754996", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/5936", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/177754996"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/5936#discussion_r177754996"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/5936"}}, "body_html": "<p>It's not going to work.</p>\n<ol>\n<li>the <code>_addindent</code> does nothing when input string has only one line</li>\n<li>the trailing new-line is missing.<br>\nActually I come up with a concrete solution, but harder to read:</li>\n</ol>\n<pre><code>main_str += '\\n  ' + '\\n  '.join(lines) + '\\n'\n</code></pre>", "body_text": "It's not going to work.\n\nthe _addindent does nothing when input string has only one line\nthe trailing new-line is missing.\nActually I come up with a concrete solution, but harder to read:\n\nmain_str += '\\n  ' + '\\n  '.join(lines) + '\\n'", "in_reply_to_id": 177682724}