{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/357744465", "html_url": "https://github.com/pytorch/pytorch/issues/3026#issuecomment-357744465", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/3026", "id": 357744465, "node_id": "MDEyOklzc3VlQ29tbWVudDM1Nzc0NDQ2NQ==", "user": {"login": "JakobHavtorn", "id": 10236734, "node_id": "MDQ6VXNlcjEwMjM2NzM0", "avatar_url": "https://avatars0.githubusercontent.com/u/10236734?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JakobHavtorn", "html_url": "https://github.com/JakobHavtorn", "followers_url": "https://api.github.com/users/JakobHavtorn/followers", "following_url": "https://api.github.com/users/JakobHavtorn/following{/other_user}", "gists_url": "https://api.github.com/users/JakobHavtorn/gists{/gist_id}", "starred_url": "https://api.github.com/users/JakobHavtorn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JakobHavtorn/subscriptions", "organizations_url": "https://api.github.com/users/JakobHavtorn/orgs", "repos_url": "https://api.github.com/users/JakobHavtorn/repos", "events_url": "https://api.github.com/users/JakobHavtorn/events{/privacy}", "received_events_url": "https://api.github.com/users/JakobHavtorn/received_events", "type": "User", "site_admin": false}, "created_at": "2018-01-15T17:22:50Z", "updated_at": "2018-01-15T17:23:47Z", "author_association": "NONE", "body_html": "<p>Definitely a +1 on this one from me.</p>\n<p>However, a simple workaround might be to simply keep track of the epoch index during training (as many probably do anyway). If training is halted only to be resumed later, the lr_scheduler can be loaded into its previous state simply by reinstatiating it and then setting the last_epoch property.</p>\n<p>It appears that <code>self.last_epoch</code> is the only \"state\" of most learning rate schedulers, and setting the property should correctly restore the learning rate scheduler to its previous state.</p>\n<pre><code>last_epoch_trained_upon = 42\nlr_scheduler = optim.ExponentialLRS(optimizer, gamma=0.99)\nlr_scheduler.last_epoch = last_epoch_trained_upon\n</code></pre>", "body_text": "Definitely a +1 on this one from me.\nHowever, a simple workaround might be to simply keep track of the epoch index during training (as many probably do anyway). If training is halted only to be resumed later, the lr_scheduler can be loaded into its previous state simply by reinstatiating it and then setting the last_epoch property.\nIt appears that self.last_epoch is the only \"state\" of most learning rate schedulers, and setting the property should correctly restore the learning rate scheduler to its previous state.\nlast_epoch_trained_upon = 42\nlr_scheduler = optim.ExponentialLRS(optimizer, gamma=0.99)\nlr_scheduler.last_epoch = last_epoch_trained_upon", "body": "Definitely a +1 on this one from me.\r\n\r\nHowever, a simple workaround might be to simply keep track of the epoch index during training (as many probably do anyway). If training is halted only to be resumed later, the lr_scheduler can be loaded into its previous state simply by reinstatiating it and then setting the last_epoch property. \r\n\r\nIt appears that `self.last_epoch` is the only \"state\" of most learning rate schedulers, and setting the property should correctly restore the learning rate scheduler to its previous state.\r\n\r\n```\r\nlast_epoch_trained_upon = 42\r\nlr_scheduler = optim.ExponentialLRS(optimizer, gamma=0.99)\r\nlr_scheduler.last_epoch = last_epoch_trained_upon\r\n```"}