{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/216529648", "pull_request_review_id": 154031093, "id": 216529648, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNjUyOTY0OA==", "diff_hunk": "@@ -457,6 +457,52 @@ def method(self, x):\n         finally:\n             torch.jit._enabled = True\n \n+    def test_train_eval(self):\n+        class Sub(nn.Module):\n+            def forward(self, input):\n+                if self.training:\n+                    return input\n+                else:\n+                    return -input\n+\n+        class MyModule(torch.jit.ScriptModule):\n+            def __init__(self):\n+                super(MyModule, self).__init__()\n+                self.sub = Sub()\n+\n+            @torch.jit.script_method\n+            def forward(self, input):\n+                return self.sub(input) + 1\n+\n+        m = MyModule()\n+        input = torch.rand(3, 4)\n+        self.assertEqual(input + 1, m(input))\n+        m.eval()\n+        self.assertEqual(-input + 1, m(input))\n+\n+    def test_train_eval_const(self):\n+        class MyModule(torch.jit.ScriptModule):\n+            __constants__ = ['training']\n+\n+            def __init__(self):\n+                super(MyModule, self).__init__()\n+                # TODO: it is illegal to try to call\n+                # eval/train because training has already\n+                # been set. Consider allowing\n+                # constants to be mutable until the end of __init__", "path": "test/test_jit.py", "position": 36, "original_position": 36, "commit_id": "2518d77768714086d74a4b14410b6d96c8746ea7", "original_commit_id": "69e047175136407cbf3abded94cbccc86fd7dba0", "user": {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, "body": "Yes, it is useless, but I wanted to make sure it was consistent with how constants behaved at least.  In the future, we should support non-tensor module parameters so that training can be an actual parameter. ", "created_at": "2018-09-11T02:30:25Z", "updated_at": "2018-11-23T15:50:57Z", "html_url": "https://github.com/pytorch/pytorch/pull/11505#discussion_r216529648", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/11505", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/216529648"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/11505#discussion_r216529648"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/11505"}}, "body_html": "<p>Yes, it is useless, but I wanted to make sure it was consistent with how constants behaved at least.  In the future, we should support non-tensor module parameters so that training can be an actual parameter.</p>", "body_text": "Yes, it is useless, but I wanted to make sure it was consistent with how constants behaved at least.  In the future, we should support non-tensor module parameters so that training can be an actual parameter.", "in_reply_to_id": 216526292}