{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/152957704", "pull_request_review_id": 78893017, "id": 152957704, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1Mjk1NzcwNA==", "diff_hunk": "@@ -0,0 +1,1164 @@\n+#include \"Conv.h\"\n+\n+#include \"THC/THC.h\"\n+#include \"Exceptions.h\"\n+#include \"Utils.h\"\n+#include \"Types.h\"\n+\n+#include <ATen/Check.h>\n+\n+#include \"cudnn-wrapper.h\"\n+#include <functional>\n+#include <iterator>\n+#include <sstream>\n+#include <algorithm>\n+#include <memory>\n+#include <mutex>\n+#include <stdint.h>\n+#include <unordered_map>\n+\n+namespace at { namespace cudnn {\n+\n+// TODO: Go through all the checking code again and make sure\n+// we haven't missed anything.\n+\n+// ---------------------------------------------------------------------\n+//\n+// Math\n+//\n+// ---------------------------------------------------------------------\n+\n+constexpr int input_batch_size_dim = 0;  // also grad_input\n+constexpr int input_channels_dim = 1;\n+constexpr int output_batch_size_dim = 0;  // also grad_output\n+constexpr int output_channels_dim = 1;\n+constexpr int weight_output_channels_dim = 0;\n+constexpr int weight_input_channels_dim = 1;\n+\n+// Often written as 2 + max_dim (extra dims for batch size and channels)\n+constexpr int max_dim = 3;\n+\n+// NB: conv_output_size and conv_input_size are not bijections,\n+// as conv_output_size loses information; this is why conv_input_size\n+// takes an extra output_padding argument to resolve the ambiguity.\n+\n+std::vector<int64_t> conv_output_size(\n+    IntList input_size, IntList weight_size,\n+    IntList padding, IntList stride, IntList dilation, int groups\n+) {\n+  // ASSERT(input_size.size() > 2)\n+  // ASSERT(input_size.size() == weight_size.size())\n+  auto dim = input_size.size();\n+  std::vector<int64_t> output_size(dim);\n+  output_size[0] = input_size[input_batch_size_dim];\n+  output_size[1] = weight_size[weight_output_channels_dim];\n+  for (int d = 2; d < dim; ++d) {\n+    auto kernel = dilation[d - 2] * (weight_size[d] - 1) + 1;\n+    output_size[d] = (input_size[d] + (2 * padding[d - 2])\n+                        - kernel) / stride[d - 2] + 1;\n+  }\n+  return output_size;\n+}\n+\n+std::vector<int64_t> conv_input_size(\n+    IntList output_size, IntList weight_size,\n+    IntList padding, IntList output_padding, IntList stride, IntList dilation, int groups\n+) {\n+  // ASSERT(output_size.size() > 2)\n+  // ASSERT(output_size.size() == weight_size.size())\n+  auto dim = output_size.size();\n+  std::vector<int64_t> input_size(dim);\n+  input_size[0] = output_size[output_batch_size_dim];\n+  input_size[1] = weight_size[weight_input_channels_dim] * groups;\n+  for (int d = 2; d < dim; ++d) {\n+    int kernel = dilation[d - 2] * (weight_size[d] - 1) + 1;\n+    input_size[d] = (output_size[d] - 1) * stride[d - 2] - (2 * padding[d - 2]) +\n+                     kernel + output_padding[d - 2];\n+  }\n+  return input_size;\n+}\n+\n+std::vector<int64_t> conv_weight_size(\n+    IntList input_size, IntList output_size,\n+    IntList padding, IntList output_padding, IntList stride, IntList dilation, int groups\n+) {\n+  auto dim = input_size.size();\n+  std::vector<int64_t> weight_size(dim);\n+  weight_size[0] = output_size[1];\n+  weight_size[1] = input_size[1] / groups;\n+  for (int d = 2; d < dim; ++d) {\n+    int kernel = input_size[d] - (output_size[d] - 1) * stride[d - 2]\n+               + 2 * padding[d - 2] - output_padding[d - 2];\n+    weight_size[d] = (kernel - 1) / dilation[d - 2] + 1;\n+  }\n+  return weight_size;\n+}\n+\n+// TODO: Move this into the standard library, with a better name?\n+Tensor narrowGroup(const Tensor& t, int dim, int group_idx, int groups) {\n+  auto group_size = t.size(dim) / groups;\n+  return t.narrow(dim, group_idx * group_size, group_size);\n+}\n+\n+// ---------------------------------------------------------------------\n+//\n+// Checking\n+//\n+// ---------------------------------------------------------------------\n+\n+// Note [Legacy CuDNN grouped convolution support]\n+// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+// CuDNN earlier than CuDNN 7 does not directly support group\n+// convolution, so we provide support for it by sequentially\n+// running a convolution per group  with appropriately\n+// adjusted sizes.  https://blog.yani.io/filter-group-tutorial/\n+// has a fairly good diagram explaining how it works.\n+\n+// Used on pad, stride and dilation\n+static void check_args(CheckedFrom c, IntList args, size_t expected_size, const char* arg_name)\n+{\n+  if (args.size() > expected_size){\n+    std::stringstream ss;\n+    ss << \"Too many \" << arg_name << \" values (\" << args.size() << \") supplied, expecting \" << expected_size << \" (while checking arguments for \" << c << \")\";\n+    throw std::runtime_error(ss.str());\n+  }\n+  else if (args.size() < expected_size){\n+    std::stringstream ss;\n+    ss << \"Not enough \" << arg_name << \" values (\" << args.size() << \") supplied, expecting \" << expected_size << \" (while checking arguments for \" << c << \")\";\n+    throw std::runtime_error(ss.str());\n+  }\n+\n+  auto num_negative_values = std::count_if(args.begin(), args.end(), [](int x){return x < 0;});", "path": "aten/src/ATen/cudnn/Conv.cpp", "position": 131, "original_position": 131, "commit_id": "6c637bca42913c8377068a1bee874b2160c7f6c1", "original_commit_id": "12677cc3784b39142c6f955b995ddcda2135b586", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "nit: `std::any` would be sufficient", "created_at": "2017-11-24T12:17:04Z", "updated_at": "2018-11-23T15:36:47Z", "html_url": "https://github.com/pytorch/pytorch/pull/3666#discussion_r152957704", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/3666", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/152957704"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/3666#discussion_r152957704"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/3666"}}, "body_html": "<p>nit: <code>std::any</code> would be sufficient</p>", "body_text": "nit: std::any would be sufficient"}