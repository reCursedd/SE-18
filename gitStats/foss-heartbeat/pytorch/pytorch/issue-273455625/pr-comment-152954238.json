{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/152954238", "pull_request_review_id": 78893017, "id": 152954238, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1Mjk1NDIzOA==", "diff_hunk": "@@ -0,0 +1,111 @@\n+#include \"Descriptors.h\"\n+#include <ATen/ATen.h>\n+\n+namespace at { namespace cudnn {\n+\n+namespace {\n+\n+inline cudnnDataType_t getDataType(const at::Tensor& t) {\n+  auto scalar_type = t.type().scalarType();\n+  if (scalar_type == at::kFloat) {\n+    return CUDNN_DATA_FLOAT;\n+  } else if (scalar_type == at::kHalf) {\n+    return CUDNN_DATA_HALF;\n+  } else if (scalar_type == at::kDouble) {\n+    return CUDNN_DATA_DOUBLE;\n+  }\n+  throw std::runtime_error(\"TensorDescriptor only supports double, float and half tensors\");\n+}\n+\n+} // anonymous namespace\n+\n+void TensorDescriptor::set(const at::Tensor &t, int64_t pad) {\n+  auto dim = t.ndimension();\n+  if (dim > CUDNN_DIM_MAX || pad > CUDNN_DIM_MAX)\n+#define _STR(X) #X\n+#define STR(X) _STR(X)\n+    throw std::runtime_error(\"cuDNN supports only up to \" STR(CUDNN_DIM_MAX) \" dimensions\");\n+#undef _STR\n+#undef STR\n+  int size[CUDNN_DIM_MAX];\n+  int stride[CUDNN_DIM_MAX];\n+  for (int i = 0; i < dim; ++i) {\n+    size[i] = (int) t.size(i);\n+    stride[i] = (int) t.stride(i);\n+  }\n+  for (int i = dim; i < pad; ++i) {\n+    size[i] = 1;\n+    stride[i] = 1;\n+  }\n+  dim = std::max(dim, pad);\n+  set(getDataType(t), (int) dim, size, stride);\n+}\n+\n+std::string cudnnTypeToString(cudnnDataType_t dtype) {\n+  switch (dtype) {\n+    case CUDNN_DATA_FLOAT:\n+      return \"CUDNN_DATA_FLOAT\";\n+    case CUDNN_DATA_DOUBLE:\n+      return \"CUDNN_DATA_DOUBLE\";\n+    case CUDNN_DATA_HALF:\n+      return \"CUDNN_DATA_HALF\";\n+    case CUDNN_DATA_INT8:\n+      return \"CUDNN_DATA_INT8\";\n+    case CUDNN_DATA_INT32:\n+      return \"CUDNN_DATA_INT32\";\n+    case CUDNN_DATA_INT8x4:\n+      return \"CUDNN_DATA_INT8x4\";\n+  }\n+  std::ostringstream oss;\n+  oss << \"(unknown data-type \" << static_cast<int>(dtype) << \")\";\n+  return oss.str();\n+}\n+\n+std::ostream& operator<<(std::ostream & out, const TensorDescriptor& d) {\n+  out << \"TensorDescriptor\\n\";\n+  out << \"  ptr = \" << d.ptr << \"\\n\";\n+  out << \"  desc = \" << static_cast<void*>(d.desc) << \"\\n\";\n+  int nbDims;\n+  // NB: Update this if CuDNN ever supports 6D inputs\n+  int dimA[5];\n+  int strideA[5];", "path": "aten/src/ATen/cudnn/Descriptors.cpp", "position": null, "original_position": 71, "commit_id": "6c637bca42913c8377068a1bee874b2160c7f6c1", "original_commit_id": "12677cc3784b39142c6f955b995ddcda2135b586", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "You have CUDNN_DIM_MAX that you can use and it's guaranteed to work", "created_at": "2017-11-24T11:55:41Z", "updated_at": "2018-11-23T15:36:46Z", "html_url": "https://github.com/pytorch/pytorch/pull/3666#discussion_r152954238", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/3666", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/152954238"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/3666#discussion_r152954238"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/3666"}}, "body_html": "<p>You have CUDNN_DIM_MAX that you can use and it's guaranteed to work</p>", "body_text": "You have CUDNN_DIM_MAX that you can use and it's guaranteed to work"}