{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/152448696", "pull_request_review_id": 78312589, "id": 152448696, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MjQ0ODY5Ng==", "diff_hunk": "@@ -0,0 +1,178 @@\n+#pragma once\n+\n+#include \"Exceptions.h\"\n+\n+#include \"cudnn-wrapper.h\"\n+#include <ATen/Tensor.h>\n+\n+namespace at { namespace cudnn {\n+\n+// TODO: Add constructors for all of the descriptors\n+\n+inline int dataSize(cudnnDataType_t dataType)\n+{\n+  switch (dataType) {\n+    case CUDNN_DATA_HALF: return 2;\n+    case CUDNN_DATA_FLOAT: return 4;\n+    default: return 8;\n+  }\n+}\n+\n+// The stride for a size-1 dimensions is not uniquely determined; in\n+// fact, it can be anything you want, because the fact that the\n+// tensor is size 1 at this dimension means that you will never actually\n+// try advancing your pointer by this stride.\n+//\n+// However, CuDNN has a much more stringent requirement on strides:\n+// if you are passing a contiguous input, it better be the case\n+// that the stride for dim i is the product of the sizes of dims\n+// i+1 to the end.  This stride is indeed uniquely determined.  This\n+// function modifies 'stride' in place so this invariant holds.\n+static inline void fixSizeOneDimStride(int dim, const int *size, int *stride) {\n+  int64_t z = 1;\n+  for(int d = dim-1; d >= 0; d--)\n+  {\n+    if (size[d] == 1) {\n+      stride[d] = z;\n+    } else {\n+      z *= size[d];\n+    }\n+  }\n+}\n+\n+// This is NON-OWNING on tensor data\n+struct TensorDescriptor\n+{\n+  cudnnTensorDescriptor_t desc;\n+  void* ptr;", "path": "aten/src/ATen/cudnn/Descriptors.h", "position": null, "original_position": 47, "commit_id": "6c637bca42913c8377068a1bee874b2160c7f6c1", "original_commit_id": "2073551c2b87c8b4045d6fd1dc3d38dd1653504a", "user": {"login": "ngimel", "id": 15841449, "node_id": "MDQ6VXNlcjE1ODQxNDQ5", "avatar_url": "https://avatars3.githubusercontent.com/u/15841449?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ngimel", "html_url": "https://github.com/ngimel", "followers_url": "https://api.github.com/users/ngimel/followers", "following_url": "https://api.github.com/users/ngimel/following{/other_user}", "gists_url": "https://api.github.com/users/ngimel/gists{/gist_id}", "starred_url": "https://api.github.com/users/ngimel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ngimel/subscriptions", "organizations_url": "https://api.github.com/users/ngimel/orgs", "repos_url": "https://api.github.com/users/ngimel/repos", "events_url": "https://api.github.com/users/ngimel/events{/privacy}", "received_events_url": "https://api.github.com/users/ngimel/received_events", "type": "User", "site_admin": false}, "body": "I'm not sure data ptr should be part of TensorDescriptor. In cudnn model (however foolish) the same descriptor can be shared (and is shared, e.g. in batch norm) between several tensors, that's why it only has strides and sizes info, on purpose. ", "created_at": "2017-11-22T01:31:43Z", "updated_at": "2018-11-23T15:36:42Z", "html_url": "https://github.com/pytorch/pytorch/pull/3666#discussion_r152448696", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/3666", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/152448696"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/3666#discussion_r152448696"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/3666"}}, "body_html": "<p>I'm not sure data ptr should be part of TensorDescriptor. In cudnn model (however foolish) the same descriptor can be shared (and is shared, e.g. in batch norm) between several tensors, that's why it only has strides and sizes info, on purpose.</p>", "body_text": "I'm not sure data ptr should be part of TensorDescriptor. In cudnn model (however foolish) the same descriptor can be shared (and is shared, e.g. in batch norm) between several tensors, that's why it only has strides and sizes info, on purpose."}