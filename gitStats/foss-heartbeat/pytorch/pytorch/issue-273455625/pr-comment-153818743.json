{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/153818743", "pull_request_review_id": 79881942, "id": 153818743, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MzgxODc0Mw==", "diff_hunk": "@@ -0,0 +1,213 @@\n+#include \"ATen/Check.h\"\n+\n+#include \"ATen/ATen.h\"\n+\n+namespace at {\n+\n+namespace {\n+  std::vector<TensorArg> filterDefined(ArrayRef<TensorArg> ts) {\n+    std::vector<TensorArg> r;\n+    r.reserve(ts.size());\n+    for (auto t : ts) {\n+      if (t->defined()) {\n+        r.push_back(t);\n+      }\n+    }\n+    return r;\n+  }\n+}\n+\n+std::ostream& operator<<(std::ostream & out, TensorGeometryArg t) {\n+  if (t.pos == 0) {\n+    // 0 is distinguished; it usually indicates 'self' or the return\n+    // tensor\n+    out << \"'\" << t.name << \"'\";\n+  } else {\n+    out << \"argument #\" << t.pos << \" '\" << t.name << \"'\";\n+  }\n+  return out;\n+}\n+\n+void checkDim(CheckedFrom c, TensorGeometryArg t, int64_t dim) {\n+  if (t->dim() != dim) {\n+    std::ostringstream oss;\n+    oss << \"Expected \" << dim << \"-dimensional tensor, but got \"\n+        << t->dim() << \"-dimensional tensor for \" << t\n+        << \" (while checking arguments for \" << c << \")\";\n+    throw std::runtime_error(oss.str());\n+  }\n+}\n+\n+void checkDimRange(CheckedFrom c, TensorGeometryArg t, int64_t dim_start, int64_t dim_end) {\n+  if (t->dim() < dim_start || t->dim() >= dim_end) {\n+    std::ostringstream oss;\n+    oss << \"Expected \" << dim_start << \" to \" << (dim_end - 1) << \" dimensions, but got \"\n+        << t->dim() << \"-dimensional tensor for \" << t\n+        << \" (while checking arguments for \" << c << \")\";\n+    throw std::runtime_error(oss.str());\n+  }\n+}\n+\n+void checkContiguous_(CheckedFrom c, TensorGeometryArg t) {\n+  if (!t->is_contiguous()) {\n+    std::ostringstream oss;\n+    oss << \"Expected contiguous tensor, but got non-contiguous tensor for \" << t\n+        << \" (while checking arguments for \" << c << \")\";\n+    throw std::runtime_error(oss.str());\n+  }\n+}\n+\n+void checkContiguous(CheckedFrom c, at::ArrayRef<TensorArg> ts) {\n+  for (auto t : filterDefined(ts)) {\n+    checkContiguous_(c, t);\n+  }\n+}\n+\n+void checkSize(CheckedFrom c, TensorGeometryArg t, IntList sizes) {\n+  checkDim(c, t, sizes.size());\n+  if (!t->sizes().equals(sizes)) {\n+    std::ostringstream oss;\n+    oss << \"Expected tensor of size \" << sizes << \", but got tensor of size \"\n+        << t->sizes() << \" for \" << t\n+        << \" (while checking arguments for \" << c << \")\";\n+    throw std::runtime_error(oss.str());\n+  }\n+}\n+\n+void checkSize(CheckedFrom c, TensorGeometryArg t, int64_t dim, int64_t size) {\n+  if (t->size(dim) != size) {\n+    std::ostringstream oss;\n+    oss << \"Expected tensor to have size \" << size << \" at dimension \" << dim\n+        << \", but got size \" << t->size(dim) << \" for \" << t\n+        << \" (while checking arguments for \" << c << \")\";\n+    throw std::runtime_error(oss.str());\n+  }\n+}\n+\n+void checkSameSize(CheckedFrom c, TensorGeometryArg t1, TensorGeometryArg t2) {\n+  if (!t1->sizes().equals(t2->sizes())) {\n+    std::ostringstream oss;\n+    oss << \"Expected tensor for \" << t1 << \" to have same size as tensor for \"\n+        << t2 << \"; but \" << t1->sizes() << \" does not equal \" << t2->sizes()\n+        << \" (while checking arguments for \" << c << \")\";\n+    throw std::runtime_error(oss.str());\n+  }\n+}\n+\n+void checkSameSize(CheckedFrom c, ArrayRef<TensorArg> tensors_) {\n+  auto tensors = filterDefined(tensors_);\n+  if (tensors.empty()) return;\n+  auto t0 = tensors.front();\n+  for (auto t : ArrayRef<TensorArg>{tensors}.slice(1)) {\n+    checkSameSize(c, t0, t);\n+  }\n+}\n+\n+void checkNumel(CheckedFrom c, TensorGeometryArg t, int64_t numel) {\n+  if (t->numel() != numel) {\n+    std::ostringstream oss;\n+    oss << \"Expected tensor for \" << t << \" to have \"\n+        << numel << \" elements; but it actually has \" << t->numel() << \" elements\"\n+        << \" (while checking arguments for \" << c << \")\";\n+    throw std::runtime_error(oss.str());\n+  }\n+}\n+\n+void checkSameNumel(CheckedFrom c, TensorGeometryArg t1, TensorGeometryArg t2) {\n+  if (t1->numel() != t2->numel()) {\n+    std::ostringstream oss;\n+    oss << \"Expected tensor for \" << t1 << \" to have same number of elements as tensor for \"\n+        << t2 << \"; but \" << t1->numel() << \" does not equal \" << t2->numel()\n+        << \" (while checking arguments for \" << c << \")\";\n+    throw std::runtime_error(oss.str());\n+  }\n+}\n+\n+void checkSameNumel(CheckedFrom c, ArrayRef<TensorArg> tensors_) {\n+  auto tensors = filterDefined(tensors_);\n+  if (tensors.empty()) return;\n+  auto t0 = tensors.front();\n+  for (auto t : ArrayRef<TensorArg>{tensors}.slice(1)) {\n+    checkSameNumel(c, t0, t);\n+  }\n+}\n+\n+void checkSameGPU(CheckedFrom c, TensorArg t1, TensorArg t2) {\n+  if (t1->get_device() != t2->get_device()) {\n+    std::ostringstream oss;\n+    oss << \"Expected tensor for \" << t1 << \" to have the same device as \"", "path": "aten/src/ATen/Check.cpp", "position": null, "original_position": 138, "commit_id": "6c637bca42913c8377068a1bee874b2160c7f6c1", "original_commit_id": "bb46318fddcce1244d22a0a131f7b384d31dedb5", "user": {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, "body": "Not for this pr: I've found this thing helpful for formatted string exceptions + context:\r\n\r\n```\r\nstruct ErrorReport : public std::exception {\r\n  ErrorReport(const ErrorReport& e)\r\n      : ss(e.ss.str()), context(e.context), the_message(e.the_message) {}\r\n\r\n  ErrorReport() : context(nullptr) {}\r\n  ErrorReport(TreeRef context) : context(context) {}\r\n\r\n  virtual const char* what() const noexcept override {\r\n    std::stringstream msg;\r\n    msg << \"\\n\" << ss.str();\r\n    if (context != nullptr) {\r\n      msg << \":\\n\";\r\n      context->range().highlight(msg);\r\n    } else {\r\n      msg << \".\\n\";\r\n    }\r\n    the_message = msg.str();\r\n    return the_message.c_str();\r\n  }\r\n\r\n private:\r\n  template <typename T>\r\n  friend const ErrorReport& operator<<(const ErrorReport& e, const T& t);\r\n\r\n  mutable std::stringstream ss;\r\n  TreeRef context;\r\n  mutable std::string the_message;\r\n};\r\n\r\ntemplate <typename T>\r\nconst ErrorReport& operator<<(const ErrorReport& e, const T& t) {\r\n  e.ss << t;\r\n  return e;\r\n}\r\n```\r\n\r\nErrors can then just be the single line:\r\n\r\n```\r\nthrow ErrorReport(c) << \"formatting \" << t.size();\r\n```", "created_at": "2017-11-29T15:23:41Z", "updated_at": "2018-11-23T15:36:57Z", "html_url": "https://github.com/pytorch/pytorch/pull/3666#discussion_r153818743", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/3666", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/153818743"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/3666#discussion_r153818743"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/3666"}}, "body_html": "<p>Not for this pr: I've found this thing helpful for formatted string exceptions + context:</p>\n<pre><code>struct ErrorReport : public std::exception {\n  ErrorReport(const ErrorReport&amp; e)\n      : ss(e.ss.str()), context(e.context), the_message(e.the_message) {}\n\n  ErrorReport() : context(nullptr) {}\n  ErrorReport(TreeRef context) : context(context) {}\n\n  virtual const char* what() const noexcept override {\n    std::stringstream msg;\n    msg &lt;&lt; \"\\n\" &lt;&lt; ss.str();\n    if (context != nullptr) {\n      msg &lt;&lt; \":\\n\";\n      context-&gt;range().highlight(msg);\n    } else {\n      msg &lt;&lt; \".\\n\";\n    }\n    the_message = msg.str();\n    return the_message.c_str();\n  }\n\n private:\n  template &lt;typename T&gt;\n  friend const ErrorReport&amp; operator&lt;&lt;(const ErrorReport&amp; e, const T&amp; t);\n\n  mutable std::stringstream ss;\n  TreeRef context;\n  mutable std::string the_message;\n};\n\ntemplate &lt;typename T&gt;\nconst ErrorReport&amp; operator&lt;&lt;(const ErrorReport&amp; e, const T&amp; t) {\n  e.ss &lt;&lt; t;\n  return e;\n}\n</code></pre>\n<p>Errors can then just be the single line:</p>\n<pre><code>throw ErrorReport(c) &lt;&lt; \"formatting \" &lt;&lt; t.size();\n</code></pre>", "body_text": "Not for this pr: I've found this thing helpful for formatted string exceptions + context:\nstruct ErrorReport : public std::exception {\n  ErrorReport(const ErrorReport& e)\n      : ss(e.ss.str()), context(e.context), the_message(e.the_message) {}\n\n  ErrorReport() : context(nullptr) {}\n  ErrorReport(TreeRef context) : context(context) {}\n\n  virtual const char* what() const noexcept override {\n    std::stringstream msg;\n    msg << \"\\n\" << ss.str();\n    if (context != nullptr) {\n      msg << \":\\n\";\n      context->range().highlight(msg);\n    } else {\n      msg << \".\\n\";\n    }\n    the_message = msg.str();\n    return the_message.c_str();\n  }\n\n private:\n  template <typename T>\n  friend const ErrorReport& operator<<(const ErrorReport& e, const T& t);\n\n  mutable std::stringstream ss;\n  TreeRef context;\n  mutable std::string the_message;\n};\n\ntemplate <typename T>\nconst ErrorReport& operator<<(const ErrorReport& e, const T& t) {\n  e.ss << t;\n  return e;\n}\n\nErrors can then just be the single line:\nthrow ErrorReport(c) << \"formatting \" << t.size();"}