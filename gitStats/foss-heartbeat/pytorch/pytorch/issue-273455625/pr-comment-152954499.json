{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/152954499", "pull_request_review_id": 78893017, "id": 152954499, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1Mjk1NDQ5OQ==", "diff_hunk": "@@ -0,0 +1,178 @@\n+#pragma once\n+\n+#include \"Exceptions.h\"\n+\n+#include \"cudnn-wrapper.h\"\n+#include <ATen/Tensor.h>\n+\n+namespace at { namespace cudnn {\n+\n+// TODO: Add constructors for all of the descriptors\n+\n+inline int dataSize(cudnnDataType_t dataType)\n+{\n+  switch (dataType) {\n+    case CUDNN_DATA_HALF: return 2;\n+    case CUDNN_DATA_FLOAT: return 4;\n+    default: return 8;\n+  }\n+}\n+\n+// The stride for a size-1 dimensions is not uniquely determined; in\n+// fact, it can be anything you want, because the fact that the\n+// tensor is size 1 at this dimension means that you will never actually\n+// try advancing your pointer by this stride.\n+//\n+// However, CuDNN has a much more stringent requirement on strides:\n+// if you are passing a contiguous input, it better be the case\n+// that the stride for dim i is the product of the sizes of dims\n+// i+1 to the end.  This stride is indeed uniquely determined.  This\n+// function modifies 'stride' in place so this invariant holds.\n+static inline void fixSizeOneDimStride(int dim, const int *size, int *stride) {\n+  int64_t z = 1;\n+  for(int d = dim-1; d >= 0; d--)\n+  {\n+    if (size[d] == 1) {\n+      stride[d] = z;\n+    } else {\n+      z *= size[d];\n+    }\n+  }\n+}\n+\n+// This is NON-OWNING on tensor data\n+struct TensorDescriptor\n+{\n+  cudnnTensorDescriptor_t desc;\n+  void* ptr;", "path": "aten/src/ATen/cudnn/Descriptors.h", "position": null, "original_position": 47, "commit_id": "6c637bca42913c8377068a1bee874b2160c7f6c1", "original_commit_id": "2073551c2b87c8b4045d6fd1dc3d38dd1653504a", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Yeah I think keeping descriptors unbound from data is going to be less confusing", "created_at": "2017-11-24T11:57:22Z", "updated_at": "2018-11-23T15:36:46Z", "html_url": "https://github.com/pytorch/pytorch/pull/3666#discussion_r152954499", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/3666", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/152954499"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/3666#discussion_r152954499"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/3666"}}, "body_html": "<p>Yeah I think keeping descriptors unbound from data is going to be less confusing</p>", "body_text": "Yeah I think keeping descriptors unbound from data is going to be less confusing", "in_reply_to_id": 152448696}