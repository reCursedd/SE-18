{"url": "https://api.github.com/repos/pytorch/pytorch/issues/13959", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/13959/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/13959/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/13959/events", "html_url": "https://github.com/pytorch/pytorch/pull/13959", "id": 380569791, "node_id": "MDExOlB1bGxSZXF1ZXN0MjMwNzM2MDc0", "number": 13959, "title": "Import a method from an python_print string", "user": {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 679953983, "node_id": "MDU6TGFiZWw2Nzk5NTM5ODM=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/jit", "name": "jit", "color": "c5def5", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-11-14T07:31:08Z", "updated_at": "2018-11-23T15:54:52Z", "closed_at": "2018-11-16T00:13:02Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/13959", "html_url": "https://github.com/pytorch/pytorch/pull/13959", "diff_url": "https://github.com/pytorch/pytorch/pull/13959.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/13959.patch"}, "body_html": "<ul>\n<li>Add hooks to get a callback whenever a valid graph is produced in the compiler or through tracing. These hooks can be used to pretty_print and then reparse every graph our tests produce to check that the serialization function works correctly. Currently this is guarded by an environment variable since there are a few remaining failures.</li>\n<li>Fix printing bugs: True and False rather than 1 and 0, print 0. for floating point zero</li>\n<li>Change behavior of NoneType. It is now no longer a subtype of Optional but instead implicitly converts to it, returning a prim::Node with an Option[T] type for some specific T. This allows functions like <code>_unwrap_optional</code> to correctly match against a None while still deriving the right type.</li>\n<li>Fix a bug where empty blocks did not correctly emit \"pass\" in printer.</li>\n<li>Fix a bug where prim::Undefine sometimes cannot be printed as None because it is being used in a schema-less op. This should be fixable once Optional[T] always uses the same None object.</li>\n<li>Other minor printing bugs</li>\n</ul>", "body_text": "Add hooks to get a callback whenever a valid graph is produced in the compiler or through tracing. These hooks can be used to pretty_print and then reparse every graph our tests produce to check that the serialization function works correctly. Currently this is guarded by an environment variable since there are a few remaining failures.\nFix printing bugs: True and False rather than 1 and 0, print 0. for floating point zero\nChange behavior of NoneType. It is now no longer a subtype of Optional but instead implicitly converts to it, returning a prim::Node with an Option[T] type for some specific T. This allows functions like _unwrap_optional to correctly match against a None while still deriving the right type.\nFix a bug where empty blocks did not correctly emit \"pass\" in printer.\nFix a bug where prim::Undefine sometimes cannot be printed as None because it is being used in a schema-less op. This should be fixable once Optional[T] always uses the same None object.\nOther minor printing bugs", "body": "* Add hooks to get a callback whenever a valid graph is produced in the compiler or through tracing. These hooks can be used to pretty_print and then reparse every graph our tests produce to check that the serialization function works correctly. Currently this is guarded by an environment variable since there are a few remaining failures.\r\n* Fix printing bugs: True and False rather than 1 and 0, print 0. for floating point zero\r\n* Change behavior of NoneType. It is now no longer a subtype of Optional but instead implicitly converts to it, returning a prim::Node with an Option[T] type for some specific T. This allows functions like `_unwrap_optional` to correctly match against a None while still deriving the right type. \r\n* Fix a bug where empty blocks did not correctly emit \"pass\" in printer.\r\n* Fix a bug where prim::Undefine sometimes cannot be printed as None because it is being used in a schema-less op. This should be fixable once Optional[T] always uses the same None object.\r\n* Other minor printing bugs\r\n "}