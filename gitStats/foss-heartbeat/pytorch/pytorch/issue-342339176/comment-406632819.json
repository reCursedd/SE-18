{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/406632819", "html_url": "https://github.com/pytorch/pytorch/issues/9533#issuecomment-406632819", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/9533", "id": 406632819, "node_id": "MDEyOklzc3VlQ29tbWVudDQwNjYzMjgxOQ==", "user": {"login": "BIGBALLON", "id": 7837172, "node_id": "MDQ6VXNlcjc4MzcxNzI=", "avatar_url": "https://avatars0.githubusercontent.com/u/7837172?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BIGBALLON", "html_url": "https://github.com/BIGBALLON", "followers_url": "https://api.github.com/users/BIGBALLON/followers", "following_url": "https://api.github.com/users/BIGBALLON/following{/other_user}", "gists_url": "https://api.github.com/users/BIGBALLON/gists{/gist_id}", "starred_url": "https://api.github.com/users/BIGBALLON/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BIGBALLON/subscriptions", "organizations_url": "https://api.github.com/users/BIGBALLON/orgs", "repos_url": "https://api.github.com/users/BIGBALLON/repos", "events_url": "https://api.github.com/users/BIGBALLON/events{/privacy}", "received_events_url": "https://api.github.com/users/BIGBALLON/received_events", "type": "User", "site_admin": false}, "created_at": "2018-07-20T15:18:53Z", "updated_at": "2018-07-20T15:20:11Z", "author_association": "NONE", "body_html": "<p>hi, <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=25825048\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/CarlosYeverino\">@CarlosYeverino</a></p>\n<ul>\n<li>save/load net without BN layer <a href=\"https://github.com/BIGBALLON/Caffe2_Demo/blob/master/01_mnist/caffe2_mnist.py\">code</a>:</li>\n</ul>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">SaveNet</span>(<span class=\"pl-smi\">INIT_NET</span>, <span class=\"pl-smi\">PREDICT_NET</span>, <span class=\"pl-smi\">workspace</span>, <span class=\"pl-smi\">model</span>):\n    init_net, predict_net <span class=\"pl-k\">=</span> mobile_exporter.Export(\n        workspace, model.net, model.params\n    )\n    \n    <span class=\"pl-k\">with</span> <span class=\"pl-c1\">open</span>(<span class=\"pl-c1\">PREDICT_NET</span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>wb<span class=\"pl-pds\">'</span></span>) <span class=\"pl-k\">as</span> f:\n        f.write(model.net._net.SerializeToString())\n    <span class=\"pl-k\">with</span> <span class=\"pl-c1\">open</span>(<span class=\"pl-c1\">INIT_NET</span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>wb<span class=\"pl-pds\">'</span></span>) <span class=\"pl-k\">as</span> f:\n        f.write(init_net.SerializeToString())\n    <span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>== saved init_net and predict_net. ==<span class=\"pl-pds\">\"</span></span>)\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">LoadNet</span>(<span class=\"pl-smi\">INIT_NET</span>, <span class=\"pl-smi\">PREDICT_NET</span>, <span class=\"pl-smi\">device_opts</span>):\n    init_def <span class=\"pl-k\">=</span> caffe2_pb2.NetDef()\n    <span class=\"pl-k\">with</span> <span class=\"pl-c1\">open</span>(<span class=\"pl-c1\">INIT_NET</span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>rb<span class=\"pl-pds\">'</span></span>) <span class=\"pl-k\">as</span> f:\n        init_def.ParseFromString(f.read())\n        init_def.device_option.CopyFrom(device_opts)\n        workspace.RunNetOnce(init_def.SerializeToString())\n    \n    net_def <span class=\"pl-k\">=</span> caffe2_pb2.NetDef()\n    <span class=\"pl-k\">with</span> <span class=\"pl-c1\">open</span>(<span class=\"pl-c1\">PREDICT_NET</span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>rb<span class=\"pl-pds\">'</span></span>) <span class=\"pl-k\">as</span> f:\n        net_def.ParseFromString(f.read())\n        net_def.device_option.CopyFrom(device_opts)\n        workspace.CreateNet(net_def.SerializeToString(), <span class=\"pl-v\">overwrite</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>)\n    <span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>== loaded init_net and predict_net. ==<span class=\"pl-pds\">\"</span></span>)</pre></div>\n<ul>\n<li>save/load net <strong>with BN layer</strong>, <a href=\"https://github.com/BIGBALLON/Caffe2_Demo/blob/master/02_cifar10/caffe2_cifar10.py\">code</a>  :</li>\n</ul>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">save_net</span>(<span class=\"pl-smi\">init_net_pb</span>, <span class=\"pl-smi\">predict_net_pb</span>, <span class=\"pl-smi\">model</span>):\n    extra_params <span class=\"pl-k\">=</span> []\n    extra_blobs <span class=\"pl-k\">=</span> []\n    <span class=\"pl-k\">for</span> blob <span class=\"pl-k\">in</span> workspace.Blobs():\n        name <span class=\"pl-k\">=</span> <span class=\"pl-c1\">str</span>(blob)\n        <span class=\"pl-k\">if</span> name.endswith(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>_rm<span class=\"pl-pds\">\"</span></span>) <span class=\"pl-k\">or</span> name.endswith(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>_riv<span class=\"pl-pds\">\"</span></span>):\n            extra_params.append(name)\n            extra_blobs.append(workspace.FetchBlob(name))\n    <span class=\"pl-k\">for</span> name, blob <span class=\"pl-k\">in</span> <span class=\"pl-c1\">zip</span>(extra_params, extra_blobs):\n        model.params.append(name)\n\n    init_net, predict_net <span class=\"pl-k\">=</span> mobile_exporter.Export(\n        workspace,\n        model.net,\n        model.params\n    )\n\n    <span class=\"pl-k\">with</span> <span class=\"pl-c1\">open</span>(predict_net_pb, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>wb<span class=\"pl-pds\">'</span></span>) <span class=\"pl-k\">as</span> f:\n        f.write(model.net._net.SerializeToString())\n    <span class=\"pl-k\">with</span> <span class=\"pl-c1\">open</span>(init_net_pb, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>wb<span class=\"pl-pds\">'</span></span>) <span class=\"pl-k\">as</span> f:\n        f.write(init_net.SerializeToString())\n\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">load_net</span>(<span class=\"pl-smi\">init_net_pb</span>, <span class=\"pl-smi\">predict_net_pb</span>, <span class=\"pl-smi\">device_opts</span>):\n    init_def <span class=\"pl-k\">=</span> caffe2_pb2.NetDef()\n    <span class=\"pl-k\">with</span> <span class=\"pl-c1\">open</span>(init_net_pb, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>rb<span class=\"pl-pds\">'</span></span>) <span class=\"pl-k\">as</span> f:\n        init_def.ParseFromString(f.read())\n        init_def.device_option.CopyFrom(device_opts)\n        workspace.RunNetOnce(init_def.SerializeToString())\n\n    net_def <span class=\"pl-k\">=</span> caffe2_pb2.NetDef()\n    <span class=\"pl-k\">with</span> <span class=\"pl-c1\">open</span>(predict_net_pb, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>rb<span class=\"pl-pds\">'</span></span>) <span class=\"pl-k\">as</span> f:\n        net_def.ParseFromString(f.read())\n        net_def.device_option.CopyFrom(device_opts)\n        workspace.CreateNet(net_def.SerializeToString(), <span class=\"pl-v\">overwrite</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>)</pre></div>", "body_text": "hi, @CarlosYeverino\n\nsave/load net without BN layer code:\n\ndef SaveNet(INIT_NET, PREDICT_NET, workspace, model):\n    init_net, predict_net = mobile_exporter.Export(\n        workspace, model.net, model.params\n    )\n    \n    with open(PREDICT_NET, 'wb') as f:\n        f.write(model.net._net.SerializeToString())\n    with open(INIT_NET, 'wb') as f:\n        f.write(init_net.SerializeToString())\n    print(\"== saved init_net and predict_net. ==\")\n\ndef LoadNet(INIT_NET, PREDICT_NET, device_opts):\n    init_def = caffe2_pb2.NetDef()\n    with open(INIT_NET, 'rb') as f:\n        init_def.ParseFromString(f.read())\n        init_def.device_option.CopyFrom(device_opts)\n        workspace.RunNetOnce(init_def.SerializeToString())\n    \n    net_def = caffe2_pb2.NetDef()\n    with open(PREDICT_NET, 'rb') as f:\n        net_def.ParseFromString(f.read())\n        net_def.device_option.CopyFrom(device_opts)\n        workspace.CreateNet(net_def.SerializeToString(), overwrite=True)\n    print(\"== loaded init_net and predict_net. ==\")\n\nsave/load net with BN layer, code  :\n\ndef save_net(init_net_pb, predict_net_pb, model):\n    extra_params = []\n    extra_blobs = []\n    for blob in workspace.Blobs():\n        name = str(blob)\n        if name.endswith(\"_rm\") or name.endswith(\"_riv\"):\n            extra_params.append(name)\n            extra_blobs.append(workspace.FetchBlob(name))\n    for name, blob in zip(extra_params, extra_blobs):\n        model.params.append(name)\n\n    init_net, predict_net = mobile_exporter.Export(\n        workspace,\n        model.net,\n        model.params\n    )\n\n    with open(predict_net_pb, 'wb') as f:\n        f.write(model.net._net.SerializeToString())\n    with open(init_net_pb, 'wb') as f:\n        f.write(init_net.SerializeToString())\n\n\ndef load_net(init_net_pb, predict_net_pb, device_opts):\n    init_def = caffe2_pb2.NetDef()\n    with open(init_net_pb, 'rb') as f:\n        init_def.ParseFromString(f.read())\n        init_def.device_option.CopyFrom(device_opts)\n        workspace.RunNetOnce(init_def.SerializeToString())\n\n    net_def = caffe2_pb2.NetDef()\n    with open(predict_net_pb, 'rb') as f:\n        net_def.ParseFromString(f.read())\n        net_def.device_option.CopyFrom(device_opts)\n        workspace.CreateNet(net_def.SerializeToString(), overwrite=True)", "body": "hi, @CarlosYeverino \r\n\r\n- save/load net without BN layer [code](https://github.com/BIGBALLON/Caffe2_Demo/blob/master/01_mnist/caffe2_mnist.py):\r\n\r\n```python\r\ndef SaveNet(INIT_NET, PREDICT_NET, workspace, model):\r\n    init_net, predict_net = mobile_exporter.Export(\r\n        workspace, model.net, model.params\r\n    )\r\n    \r\n    with open(PREDICT_NET, 'wb') as f:\r\n        f.write(model.net._net.SerializeToString())\r\n    with open(INIT_NET, 'wb') as f:\r\n        f.write(init_net.SerializeToString())\r\n    print(\"== saved init_net and predict_net. ==\")\r\n\r\ndef LoadNet(INIT_NET, PREDICT_NET, device_opts):\r\n    init_def = caffe2_pb2.NetDef()\r\n    with open(INIT_NET, 'rb') as f:\r\n        init_def.ParseFromString(f.read())\r\n        init_def.device_option.CopyFrom(device_opts)\r\n        workspace.RunNetOnce(init_def.SerializeToString())\r\n    \r\n    net_def = caffe2_pb2.NetDef()\r\n    with open(PREDICT_NET, 'rb') as f:\r\n        net_def.ParseFromString(f.read())\r\n        net_def.device_option.CopyFrom(device_opts)\r\n        workspace.CreateNet(net_def.SerializeToString(), overwrite=True)\r\n    print(\"== loaded init_net and predict_net. ==\")\r\n```\r\n\r\n- save/load net **with BN layer**, [code](https://github.com/BIGBALLON/Caffe2_Demo/blob/master/02_cifar10/caffe2_cifar10.py)  :\r\n\r\n```python\r\ndef save_net(init_net_pb, predict_net_pb, model):\r\n    extra_params = []\r\n    extra_blobs = []\r\n    for blob in workspace.Blobs():\r\n        name = str(blob)\r\n        if name.endswith(\"_rm\") or name.endswith(\"_riv\"):\r\n            extra_params.append(name)\r\n            extra_blobs.append(workspace.FetchBlob(name))\r\n    for name, blob in zip(extra_params, extra_blobs):\r\n        model.params.append(name)\r\n\r\n    init_net, predict_net = mobile_exporter.Export(\r\n        workspace,\r\n        model.net,\r\n        model.params\r\n    )\r\n\r\n    with open(predict_net_pb, 'wb') as f:\r\n        f.write(model.net._net.SerializeToString())\r\n    with open(init_net_pb, 'wb') as f:\r\n        f.write(init_net.SerializeToString())\r\n\r\n\r\ndef load_net(init_net_pb, predict_net_pb, device_opts):\r\n    init_def = caffe2_pb2.NetDef()\r\n    with open(init_net_pb, 'rb') as f:\r\n        init_def.ParseFromString(f.read())\r\n        init_def.device_option.CopyFrom(device_opts)\r\n        workspace.RunNetOnce(init_def.SerializeToString())\r\n\r\n    net_def = caffe2_pb2.NetDef()\r\n    with open(predict_net_pb, 'rb') as f:\r\n        net_def.ParseFromString(f.read())\r\n        net_def.device_option.CopyFrom(device_opts)\r\n        workspace.CreateNet(net_def.SerializeToString(), overwrite=True)\r\n```"}