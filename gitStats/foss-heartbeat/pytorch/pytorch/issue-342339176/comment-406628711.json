{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/406628711", "html_url": "https://github.com/pytorch/pytorch/issues/9533#issuecomment-406628711", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/9533", "id": 406628711, "node_id": "MDEyOklzc3VlQ29tbWVudDQwNjYyODcxMQ==", "user": {"login": "CarlosYeverino", "id": 25825048, "node_id": "MDQ6VXNlcjI1ODI1MDQ4", "avatar_url": "https://avatars0.githubusercontent.com/u/25825048?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CarlosYeverino", "html_url": "https://github.com/CarlosYeverino", "followers_url": "https://api.github.com/users/CarlosYeverino/followers", "following_url": "https://api.github.com/users/CarlosYeverino/following{/other_user}", "gists_url": "https://api.github.com/users/CarlosYeverino/gists{/gist_id}", "starred_url": "https://api.github.com/users/CarlosYeverino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CarlosYeverino/subscriptions", "organizations_url": "https://api.github.com/users/CarlosYeverino/orgs", "repos_url": "https://api.github.com/users/CarlosYeverino/repos", "events_url": "https://api.github.com/users/CarlosYeverino/events{/privacy}", "received_events_url": "https://api.github.com/users/CarlosYeverino/received_events", "type": "User", "site_admin": false}, "created_at": "2018-07-20T15:04:52Z", "updated_at": "2018-07-20T15:04:52Z", "author_association": "NONE", "body_html": "<p>Hello <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=7837172\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/BIGBALLON\">@BIGBALLON</a> ,</p>\n<p>thanks for the code, man!</p>\n<p>do you know also how I can save a trained network in python? I am trying the following saving way, however, when I load the saved files I got an error.</p>\n<pre><code>from caffe2.python import workspace, model_helper, core\nfrom caffe2.proto import caffe2_pb2\nimport numpy as np\n# Create random tensor of three dimensions\nx = np.random.rand(4, 3, 2)\nprint(x)\nprint(x.shape)\n\nworkspace.FeedBlob(\"my_x\", x)\n\nx2 = workspace.FetchBlob(\"my_x\")\nprint(x2)\n\n# Create the input data\ndata = np.random.rand(16, 100).astype(np.float32)\n\n# Create labels for the data as integers [0, 9].\nlabel = (np.random.rand(16) * 10).astype(np.int32)\n\nworkspace.FeedBlob(\"data\", data)\nworkspace.FeedBlob(\"label\", label)\n\n# Create model using a model helper\nm = model_helper.ModelHelper(name=\"my first net\")\n\nweight = m.param_init_net.XavierFill([], 'fc_w', shape=[10, 100])\nbias = m.param_init_net.ConstantFill([], 'fc_b', shape=[10, ])\n\nfc_1 = m.net.FC([\"data\", \"fc_w\", \"fc_b\"], \"fc1\")\npred = m.net.Sigmoid(fc_1, \"pred\")\nsoftmax, loss = m.net.SoftmaxWithLoss([pred, \"label\"], [\"softmax\", \"loss\"])\n\nprint(m.net.Proto())\n\nprint(m.param_init_net.Proto())\n\nm.AddGradientOperators([loss])\n\nprint(m.net.Proto())\n\nworkspace.RunNetOnce(m.param_init_net)\n\nworkspace.CreateNet(m.net)\n\n# Run 100 x 10 iterations\nfor _ in range(100):\n    data = np.random.rand(16, 100).astype(np.float32)\n    label = (np.random.rand(16) * 10).astype(np.int32)\n\n    workspace.FeedBlob(\"data\", data)\n    workspace.FeedBlob(\"label\", label)\n\n    workspace.RunNet(m.name, 10)   # run for 10 times\n\nprint(workspace.FetchBlob(\"softmax\"))\nprint(workspace.FetchBlob(\"loss\"))\n\n\n\nprint '\\nsaving trained model'\n\nINIT_NET = 'D:/Yeverino/Python_scripts/intro_tutorial/init_net.pb' \nPREDICT_NET = 'D:/Yeverino/Python_scripts/intro_tutorial/predict_net.pb'\n\n\ndef save_net(INIT_NET, PREDICT_NET, model) :\n\n    with open(PREDICT_NET, 'wb') as f:\n        f.write(model.net._net.SerializeToString())\n    init_net = caffe2_pb2.NetDef()\n    for param in model.params:\n        blob = workspace.FetchBlob(param)\n        shape = blob.shape\n        op = core.CreateOperator(\"GivenTensorFill\", [], [param],arg=[ utils.MakeArgument(\"shape\", shape),utils.MakeArgument(\"values\", blob)])\n        init_net.op.extend([op])\n    init_net.op.extend([core.CreateOperator(\"ConstantFill\", [], [\"data\"], shape=(1,30,30))])\n    with open(INIT_NET, 'wb') as f:\n        f.write(init_net.SerializeToString())\n\ndef load_net(INIT_NET, PREDICT_NET, device_opts):\n\n    init_def = caffe2_pb2.NetDef()\n    with open(INIT_NET, 'r') as f:\n        init_def.ParseFromString(f.read())\n        init_def.device_option.CopyFrom(device_opts)\n        #workspace.RunNetOnce(init_def.SerializeToString())\n\n    net_def = caffe2_pb2.NetDef()\n    with open(PREDICT_NET, 'r') as f:\n        net_def.ParseFromString(f.read())\n        net_def.device_option.CopyFrom(device_opts)\n        #workspace.CreateNet(net_def.SerializeToString(), overwrite=True)\n\nsave_net(INIT_NET, PREDICT_NET, m)\n\ndevice_opts = core.DeviceOption(caffe2_pb2.CPU, 0) # change to 'core.DeviceOption(caffe2_pb2.CUDA, 0)' for GPU processing\n\nprint 'loading trained model'\nload_net(INIT_NET, PREDICT_NET, device_opts=device_opts)\n\n</code></pre>\n<p>I got the following error:<br>\nTraceback (most recent call last):<br>\nFile \"D:\\Yeverino\\Python_scripts\\intro_tutorial\\intro_tutorial.py\", line 99, in <br>\nload_net(INIT_NET, PREDICT_NET, device_opts=device_opts)<br>\nFile \"D:\\Yeverino\\Python_scripts\\intro_tutorial\\intro_tutorial.py\", line 84, in load_net<br>\ninit_def.ParseFromString(f.read())<br>\nFile \"C:\\Python27\\lib\\site-packages\\google\\protobuf\\message.py\", line 185, in ParseFromString<br>\nself.MergeFromString(serialized)<br>\nFile \"C:\\Python27\\lib\\site-packages\\google\\protobuf\\internal\\python_message.py\", line 1083, in MergeFromString<br>\nif self._InternalParse(serialized, 0, length) != length:<br>\nFile \"C:\\Python27\\lib\\site-packages\\google\\protobuf\\internal\\python_message.py\", line 1120, in InternalParse<br>\npos = field_decoder(buffer, new_pos, end, self, field_dict)<br>\nFile \"C:\\Python27\\lib\\site-packages\\google\\protobuf\\internal\\decoder.py\", line 610, in DecodeRepeatedField<br>\nraise _DecodeError('Truncated message.')<br>\nDecodeError: Truncated message.</p>\n<blockquote>\n<blockquote>\n<blockquote>\n</blockquote>\n</blockquote>\n</blockquote>", "body_text": "Hello @BIGBALLON ,\nthanks for the code, man!\ndo you know also how I can save a trained network in python? I am trying the following saving way, however, when I load the saved files I got an error.\nfrom caffe2.python import workspace, model_helper, core\nfrom caffe2.proto import caffe2_pb2\nimport numpy as np\n# Create random tensor of three dimensions\nx = np.random.rand(4, 3, 2)\nprint(x)\nprint(x.shape)\n\nworkspace.FeedBlob(\"my_x\", x)\n\nx2 = workspace.FetchBlob(\"my_x\")\nprint(x2)\n\n# Create the input data\ndata = np.random.rand(16, 100).astype(np.float32)\n\n# Create labels for the data as integers [0, 9].\nlabel = (np.random.rand(16) * 10).astype(np.int32)\n\nworkspace.FeedBlob(\"data\", data)\nworkspace.FeedBlob(\"label\", label)\n\n# Create model using a model helper\nm = model_helper.ModelHelper(name=\"my first net\")\n\nweight = m.param_init_net.XavierFill([], 'fc_w', shape=[10, 100])\nbias = m.param_init_net.ConstantFill([], 'fc_b', shape=[10, ])\n\nfc_1 = m.net.FC([\"data\", \"fc_w\", \"fc_b\"], \"fc1\")\npred = m.net.Sigmoid(fc_1, \"pred\")\nsoftmax, loss = m.net.SoftmaxWithLoss([pred, \"label\"], [\"softmax\", \"loss\"])\n\nprint(m.net.Proto())\n\nprint(m.param_init_net.Proto())\n\nm.AddGradientOperators([loss])\n\nprint(m.net.Proto())\n\nworkspace.RunNetOnce(m.param_init_net)\n\nworkspace.CreateNet(m.net)\n\n# Run 100 x 10 iterations\nfor _ in range(100):\n    data = np.random.rand(16, 100).astype(np.float32)\n    label = (np.random.rand(16) * 10).astype(np.int32)\n\n    workspace.FeedBlob(\"data\", data)\n    workspace.FeedBlob(\"label\", label)\n\n    workspace.RunNet(m.name, 10)   # run for 10 times\n\nprint(workspace.FetchBlob(\"softmax\"))\nprint(workspace.FetchBlob(\"loss\"))\n\n\n\nprint '\\nsaving trained model'\n\nINIT_NET = 'D:/Yeverino/Python_scripts/intro_tutorial/init_net.pb' \nPREDICT_NET = 'D:/Yeverino/Python_scripts/intro_tutorial/predict_net.pb'\n\n\ndef save_net(INIT_NET, PREDICT_NET, model) :\n\n    with open(PREDICT_NET, 'wb') as f:\n        f.write(model.net._net.SerializeToString())\n    init_net = caffe2_pb2.NetDef()\n    for param in model.params:\n        blob = workspace.FetchBlob(param)\n        shape = blob.shape\n        op = core.CreateOperator(\"GivenTensorFill\", [], [param],arg=[ utils.MakeArgument(\"shape\", shape),utils.MakeArgument(\"values\", blob)])\n        init_net.op.extend([op])\n    init_net.op.extend([core.CreateOperator(\"ConstantFill\", [], [\"data\"], shape=(1,30,30))])\n    with open(INIT_NET, 'wb') as f:\n        f.write(init_net.SerializeToString())\n\ndef load_net(INIT_NET, PREDICT_NET, device_opts):\n\n    init_def = caffe2_pb2.NetDef()\n    with open(INIT_NET, 'r') as f:\n        init_def.ParseFromString(f.read())\n        init_def.device_option.CopyFrom(device_opts)\n        #workspace.RunNetOnce(init_def.SerializeToString())\n\n    net_def = caffe2_pb2.NetDef()\n    with open(PREDICT_NET, 'r') as f:\n        net_def.ParseFromString(f.read())\n        net_def.device_option.CopyFrom(device_opts)\n        #workspace.CreateNet(net_def.SerializeToString(), overwrite=True)\n\nsave_net(INIT_NET, PREDICT_NET, m)\n\ndevice_opts = core.DeviceOption(caffe2_pb2.CPU, 0) # change to 'core.DeviceOption(caffe2_pb2.CUDA, 0)' for GPU processing\n\nprint 'loading trained model'\nload_net(INIT_NET, PREDICT_NET, device_opts=device_opts)\n\n\nI got the following error:\nTraceback (most recent call last):\nFile \"D:\\Yeverino\\Python_scripts\\intro_tutorial\\intro_tutorial.py\", line 99, in \nload_net(INIT_NET, PREDICT_NET, device_opts=device_opts)\nFile \"D:\\Yeverino\\Python_scripts\\intro_tutorial\\intro_tutorial.py\", line 84, in load_net\ninit_def.ParseFromString(f.read())\nFile \"C:\\Python27\\lib\\site-packages\\google\\protobuf\\message.py\", line 185, in ParseFromString\nself.MergeFromString(serialized)\nFile \"C:\\Python27\\lib\\site-packages\\google\\protobuf\\internal\\python_message.py\", line 1083, in MergeFromString\nif self._InternalParse(serialized, 0, length) != length:\nFile \"C:\\Python27\\lib\\site-packages\\google\\protobuf\\internal\\python_message.py\", line 1120, in InternalParse\npos = field_decoder(buffer, new_pos, end, self, field_dict)\nFile \"C:\\Python27\\lib\\site-packages\\google\\protobuf\\internal\\decoder.py\", line 610, in DecodeRepeatedField\nraise _DecodeError('Truncated message.')\nDecodeError: Truncated message.", "body": "Hello @BIGBALLON ,\r\n\r\nthanks for the code, man!\r\n\r\ndo you know also how I can save a trained network in python? I am trying the following saving way, however, when I load the saved files I got an error.\r\n\r\n```\r\nfrom caffe2.python import workspace, model_helper, core\r\nfrom caffe2.proto import caffe2_pb2\r\nimport numpy as np\r\n# Create random tensor of three dimensions\r\nx = np.random.rand(4, 3, 2)\r\nprint(x)\r\nprint(x.shape)\r\n\r\nworkspace.FeedBlob(\"my_x\", x)\r\n\r\nx2 = workspace.FetchBlob(\"my_x\")\r\nprint(x2)\r\n\r\n# Create the input data\r\ndata = np.random.rand(16, 100).astype(np.float32)\r\n\r\n# Create labels for the data as integers [0, 9].\r\nlabel = (np.random.rand(16) * 10).astype(np.int32)\r\n\r\nworkspace.FeedBlob(\"data\", data)\r\nworkspace.FeedBlob(\"label\", label)\r\n\r\n# Create model using a model helper\r\nm = model_helper.ModelHelper(name=\"my first net\")\r\n\r\nweight = m.param_init_net.XavierFill([], 'fc_w', shape=[10, 100])\r\nbias = m.param_init_net.ConstantFill([], 'fc_b', shape=[10, ])\r\n\r\nfc_1 = m.net.FC([\"data\", \"fc_w\", \"fc_b\"], \"fc1\")\r\npred = m.net.Sigmoid(fc_1, \"pred\")\r\nsoftmax, loss = m.net.SoftmaxWithLoss([pred, \"label\"], [\"softmax\", \"loss\"])\r\n\r\nprint(m.net.Proto())\r\n\r\nprint(m.param_init_net.Proto())\r\n\r\nm.AddGradientOperators([loss])\r\n\r\nprint(m.net.Proto())\r\n\r\nworkspace.RunNetOnce(m.param_init_net)\r\n\r\nworkspace.CreateNet(m.net)\r\n\r\n# Run 100 x 10 iterations\r\nfor _ in range(100):\r\n    data = np.random.rand(16, 100).astype(np.float32)\r\n    label = (np.random.rand(16) * 10).astype(np.int32)\r\n\r\n    workspace.FeedBlob(\"data\", data)\r\n    workspace.FeedBlob(\"label\", label)\r\n\r\n    workspace.RunNet(m.name, 10)   # run for 10 times\r\n\r\nprint(workspace.FetchBlob(\"softmax\"))\r\nprint(workspace.FetchBlob(\"loss\"))\r\n\r\n\r\n\r\nprint '\\nsaving trained model'\r\n\r\nINIT_NET = 'D:/Yeverino/Python_scripts/intro_tutorial/init_net.pb' \r\nPREDICT_NET = 'D:/Yeverino/Python_scripts/intro_tutorial/predict_net.pb'\r\n\r\n\r\ndef save_net(INIT_NET, PREDICT_NET, model) :\r\n\r\n    with open(PREDICT_NET, 'wb') as f:\r\n        f.write(model.net._net.SerializeToString())\r\n    init_net = caffe2_pb2.NetDef()\r\n    for param in model.params:\r\n        blob = workspace.FetchBlob(param)\r\n        shape = blob.shape\r\n        op = core.CreateOperator(\"GivenTensorFill\", [], [param],arg=[ utils.MakeArgument(\"shape\", shape),utils.MakeArgument(\"values\", blob)])\r\n        init_net.op.extend([op])\r\n    init_net.op.extend([core.CreateOperator(\"ConstantFill\", [], [\"data\"], shape=(1,30,30))])\r\n    with open(INIT_NET, 'wb') as f:\r\n        f.write(init_net.SerializeToString())\r\n\r\ndef load_net(INIT_NET, PREDICT_NET, device_opts):\r\n\r\n    init_def = caffe2_pb2.NetDef()\r\n    with open(INIT_NET, 'r') as f:\r\n        init_def.ParseFromString(f.read())\r\n        init_def.device_option.CopyFrom(device_opts)\r\n        #workspace.RunNetOnce(init_def.SerializeToString())\r\n\r\n    net_def = caffe2_pb2.NetDef()\r\n    with open(PREDICT_NET, 'r') as f:\r\n        net_def.ParseFromString(f.read())\r\n        net_def.device_option.CopyFrom(device_opts)\r\n        #workspace.CreateNet(net_def.SerializeToString(), overwrite=True)\r\n\r\nsave_net(INIT_NET, PREDICT_NET, m)\r\n\r\ndevice_opts = core.DeviceOption(caffe2_pb2.CPU, 0) # change to 'core.DeviceOption(caffe2_pb2.CUDA, 0)' for GPU processing\r\n\r\nprint 'loading trained model'\r\nload_net(INIT_NET, PREDICT_NET, device_opts=device_opts)\r\n\r\n```\r\nI got the following error:\r\nTraceback (most recent call last):\r\n  File \"D:\\Yeverino\\Python_scripts\\intro_tutorial\\intro_tutorial.py\", line 99, in <module>\r\n    load_net(INIT_NET, PREDICT_NET, device_opts=device_opts)\r\n  File \"D:\\Yeverino\\Python_scripts\\intro_tutorial\\intro_tutorial.py\", line 84, in load_net\r\n    init_def.ParseFromString(f.read())\r\n  File \"C:\\Python27\\lib\\site-packages\\google\\protobuf\\message.py\", line 185, in ParseFromString\r\n    self.MergeFromString(serialized)\r\n  File \"C:\\Python27\\lib\\site-packages\\google\\protobuf\\internal\\python_message.py\", line 1083, in MergeFromString\r\n    if self._InternalParse(serialized, 0, length) != length:\r\n  File \"C:\\Python27\\lib\\site-packages\\google\\protobuf\\internal\\python_message.py\", line 1120, in InternalParse\r\n    pos = field_decoder(buffer, new_pos, end, self, field_dict)\r\n  File \"C:\\Python27\\lib\\site-packages\\google\\protobuf\\internal\\decoder.py\", line 610, in DecodeRepeatedField\r\n    raise _DecodeError('Truncated message.')\r\nDecodeError: Truncated message.\r\n>>> \r\n\r\n\r\n"}