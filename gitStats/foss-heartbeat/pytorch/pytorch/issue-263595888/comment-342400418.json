{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/342400418", "html_url": "https://github.com/pytorch/pytorch/pull/3016#issuecomment-342400418", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/3016", "id": 342400418, "node_id": "MDEyOklzc3VlQ29tbWVudDM0MjQwMDQxOA==", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "created_at": "2017-11-07T07:41:22Z", "updated_at": "2017-11-07T07:42:05Z", "author_association": "CONTRIBUTOR", "body_html": "<p>I think this is good enough to be useful, so we should merge it before it bitrots more, but since <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=370202\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/zdevito\">@zdevito</a> is owner of the JIT/tracer, he makes the final call.</p>\n<p>Having done one more review pass on it, there are two high level things that pop out to me:</p>\n<ul>\n<li>\n<p>This PR adds another \"observation point\" for seeing tracing, the global <code>torch.jit._tracing</code>. I can see why this is expedient, and I think it is being used in a sound way, but it means that backwards tracing with scopes will not work out of the box. Since the primary use-case for this was ONNX (forwards only), I think it makes sense not to try to also nail the backwards case today; furthermore, I suspect <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=370202\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/zdevito\">@zdevito</a> may be touching the tracer a lot in the near future, so the mechanics of how to do this correctly may change.</p>\n</li>\n<li>\n<p>Scopes were attached as state to the graph. This is consistent with the way that we've handled other similar concerns (e.g., stages), but it is also morally wrong: logically, an IR doesn't have a \"scope\" in any sense; it's a property of the tracer. But I don't think it would be awful to fix this later, if we ever need it fixed, so it seems OK for now as well.</p>\n</li>\n</ul>\n<p>(And yes, I know I helped suggest some of these things; I apologize for not having 100% design clarity before hand ^^)</p>", "body_text": "I think this is good enough to be useful, so we should merge it before it bitrots more, but since @zdevito is owner of the JIT/tracer, he makes the final call.\nHaving done one more review pass on it, there are two high level things that pop out to me:\n\n\nThis PR adds another \"observation point\" for seeing tracing, the global torch.jit._tracing. I can see why this is expedient, and I think it is being used in a sound way, but it means that backwards tracing with scopes will not work out of the box. Since the primary use-case for this was ONNX (forwards only), I think it makes sense not to try to also nail the backwards case today; furthermore, I suspect @zdevito may be touching the tracer a lot in the near future, so the mechanics of how to do this correctly may change.\n\n\nScopes were attached as state to the graph. This is consistent with the way that we've handled other similar concerns (e.g., stages), but it is also morally wrong: logically, an IR doesn't have a \"scope\" in any sense; it's a property of the tracer. But I don't think it would be awful to fix this later, if we ever need it fixed, so it seems OK for now as well.\n\n\n(And yes, I know I helped suggest some of these things; I apologize for not having 100% design clarity before hand ^^)", "body": "I think this is good enough to be useful, so we should merge it before it bitrots more, but since @zdevito is owner of the JIT/tracer, he makes the final call.\r\n\r\nHaving done one more review pass on it, there are two high level things that pop out to me:\r\n\r\n* This PR adds another \"observation point\" for seeing tracing, the global `torch.jit._tracing`. I can see why this is expedient, and I think it is being used in a sound way, but it means that backwards tracing with scopes will not work out of the box. Since the primary use-case for this was ONNX (forwards only), I think it makes sense not to try to also nail the backwards case today; furthermore, I suspect @zdevito may be touching the tracer a lot in the near future, so the mechanics of how to do this correctly may change.\r\n\r\n* Scopes were attached as state to the graph. This is consistent with the way that we've handled other similar concerns (e.g., stages), but it is also morally wrong: logically, an IR doesn't have a \"scope\" in any sense; it's a property of the tracer. But I don't think it would be awful to fix this later, if we ever need it fixed, so it seems OK for now as well.\r\n\r\n(And yes, I know I helped suggest some of these things; I apologize for not having 100% design clarity before hand ^^)"}