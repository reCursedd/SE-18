{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/150395461", "pull_request_review_id": 68115575, "id": 150395461, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MDM5NTQ2MQ==", "diff_hunk": "@@ -156,6 +222,29 @@ struct Node : public Attributes<Node> {\n   const Graph * owningGraph() const {\n     return graph_;\n   }\n+  Scope* scope() {\n+    return scope_;\n+  }\n+  void setScope(Scope* scope) {\n+    scope_ = scope;\n+  }\n+  std::string scopeName() const {\n+    std::string scope_name;\n+    if (scope_->isRoot()) {\n+      return scope_name;\n+    }\n+    std::vector<Symbol> to_root = scope_->namesToRoot();\n+    // TODO: use foldr?\n+    std::reverse(std::begin(to_root), std::end(to_root));\n+    scope_name = std::accumulate(\n+                    std::next(to_root.begin()),\n+                    to_root.end(),\n+                    std::string(symbolToString(to_root[0])),\n+                    [] (std::string a, Symbol b) {\n+                    return a + '.' + std::string(symbolToString(b));\n+                    });\n+    return scope_name;", "path": "torch/csrc/jit/ir.h", "position": null, "original_position": 119, "commit_id": "1ef21e12c8ecdbfde2a5ac10e2ab8f5b4c5cc7f7", "original_commit_id": "c2696ac36766c188609deacc6358c3422a393179", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "I think it would be better to put this inside the scope class. Querying a string representation seems like a reasonable operation on a scope. Also, this should be a simpler implementation:\r\n```cpp\r\nauto rev_names = revNamesToRoot(); // please change the name to mention that it's reversed\r\nstd::string name;\r\nfor (auto it = rev_names.rbegin(), end = rev_names.rend(); it != end; ++it) \r\n  name += (name.empty() ? \"\" : \".\") + symbolToString(*it);\r\n```\r\n\r\nI know `foldl` would be natural here, but C++ doesn't make functional programming very easy and attractive \ud83d\ude04 ", "created_at": "2017-11-11T22:52:00Z", "updated_at": "2018-11-23T15:36:23Z", "html_url": "https://github.com/pytorch/pytorch/pull/3016#discussion_r150395461", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/3016", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/150395461"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/3016#discussion_r150395461"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/3016"}}, "body_html": "<p>I think it would be better to put this inside the scope class. Querying a string representation seems like a reasonable operation on a scope. Also, this should be a simpler implementation:</p>\n<div class=\"highlight highlight-source-c++\"><pre><span class=\"pl-k\">auto</span> rev_names = revNamesToRoot(); <span class=\"pl-c\"><span class=\"pl-c\">//</span> please change the name to mention that it's reversed</span>\nstd::string name;\n<span class=\"pl-k\">for</span> (<span class=\"pl-k\">auto</span> it = rev_names.rbegin(), end = rev_names.rend(); it != end; ++it) \n  name += (name.empty() ? <span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"pl-pds\">\"</span></span> : <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>.<span class=\"pl-pds\">\"</span></span>) + symbolToString(*it);</pre></div>\n<p>I know <code>foldl</code> would be natural here, but C++ doesn't make functional programming very easy and attractive <g-emoji class=\"g-emoji\" alias=\"smile\" fallback-src=\"https://assets-cdn.github.com/images/icons/emoji/unicode/1f604.png\">\ud83d\ude04</g-emoji></p>", "body_text": "I think it would be better to put this inside the scope class. Querying a string representation seems like a reasonable operation on a scope. Also, this should be a simpler implementation:\nauto rev_names = revNamesToRoot(); // please change the name to mention that it's reversed\nstd::string name;\nfor (auto it = rev_names.rbegin(), end = rev_names.rend(); it != end; ++it) \n  name += (name.empty() ? \"\" : \".\") + symbolToString(*it);\nI know foldl would be natural here, but C++ doesn't make functional programming very easy and attractive \ud83d\ude04"}