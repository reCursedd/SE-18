{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/342513525", "html_url": "https://github.com/pytorch/pytorch/pull/3016#issuecomment-342513525", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/3016", "id": 342513525, "node_id": "MDEyOklzc3VlQ29tbWVudDM0MjUxMzUyNQ==", "user": {"login": "lantiga", "id": 191033, "node_id": "MDQ6VXNlcjE5MTAzMw==", "avatar_url": "https://avatars2.githubusercontent.com/u/191033?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lantiga", "html_url": "https://github.com/lantiga", "followers_url": "https://api.github.com/users/lantiga/followers", "following_url": "https://api.github.com/users/lantiga/following{/other_user}", "gists_url": "https://api.github.com/users/lantiga/gists{/gist_id}", "starred_url": "https://api.github.com/users/lantiga/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lantiga/subscriptions", "organizations_url": "https://api.github.com/users/lantiga/orgs", "repos_url": "https://api.github.com/users/lantiga/repos", "events_url": "https://api.github.com/users/lantiga/events{/privacy}", "received_events_url": "https://api.github.com/users/lantiga/received_events", "type": "User", "site_admin": false}, "created_at": "2017-11-07T15:14:57Z", "updated_at": "2017-11-07T15:14:57Z", "author_association": "COLLABORATOR", "body_html": "<p>Thank you <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=13564\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ezyang\">@ezyang</a>! There was a conflict, I rebased on top of master.</p>\n<blockquote>\n<p>This PR adds another \"observation point\" for seeing tracing, the global torch.jit._tracing [...]</p>\n</blockquote>\n<p>I wanted to avoid that, but I saw no other way. Note (this is for others who may approach this PR) that this variable is only used to make scopes inexpensive at the <code>Module</code> level when tracing is not active (modules create scopes automatically when they are called). This global is not used elsewhere.</p>\n<blockquote>\n<p>Scopes were attached as state to the graph. [...]</p>\n</blockquote>\n<p>Indeed I had them attached to the TracingState in a previous iteration. However, a Graph Node will need to hold information on what scope it's pointing to (i.e. what scope was the current one when it was created). Since the lifetime of Nodes is tied to the lifetime of its hosting Graph, it is quite natural that the scopes trie is kept in the Graph.<br>\nI mean, I see your point, but keeping the trie in TracingState is more dangerous in my opinion.</p>", "body_text": "Thank you @ezyang! There was a conflict, I rebased on top of master.\n\nThis PR adds another \"observation point\" for seeing tracing, the global torch.jit._tracing [...]\n\nI wanted to avoid that, but I saw no other way. Note (this is for others who may approach this PR) that this variable is only used to make scopes inexpensive at the Module level when tracing is not active (modules create scopes automatically when they are called). This global is not used elsewhere.\n\nScopes were attached as state to the graph. [...]\n\nIndeed I had them attached to the TracingState in a previous iteration. However, a Graph Node will need to hold information on what scope it's pointing to (i.e. what scope was the current one when it was created). Since the lifetime of Nodes is tied to the lifetime of its hosting Graph, it is quite natural that the scopes trie is kept in the Graph.\nI mean, I see your point, but keeping the trie in TracingState is more dangerous in my opinion.", "body": "Thank you @ezyang! There was a conflict, I rebased on top of master.\r\n\r\n> This PR adds another \"observation point\" for seeing tracing, the global torch.jit._tracing [...]\r\n\r\nI wanted to avoid that, but I saw no other way. Note (this is for others who may approach this PR) that this variable is only used to make scopes inexpensive at the `Module` level when tracing is not active (modules create scopes automatically when they are called). This global is not used elsewhere.\r\n\r\n> Scopes were attached as state to the graph. [...]\r\n\r\nIndeed I had them attached to the TracingState in a previous iteration. However, a Graph Node will need to hold information on what scope it's pointing to (i.e. what scope was the current one when it was created). Since the lifetime of Nodes is tied to the lifetime of its hosting Graph, it is quite natural that the scopes trie is kept in the Graph.\r\nI mean, I see your point, but keeping the trie in TracingState is more dangerous in my opinion.\r\n"}