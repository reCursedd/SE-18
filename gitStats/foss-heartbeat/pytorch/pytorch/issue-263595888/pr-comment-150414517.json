{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/150414517", "pull_request_review_id": 75962956, "id": 150414517, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MDQxNDUxNw==", "diff_hunk": "@@ -254,32 +257,38 @@ def register_forward_hook(self, hook):\n         return handle\n \n     def __call__(self, *input, **kwargs):\n-        for hook in self._forward_pre_hooks.values():\n-            hook(self, input)\n-        result = self.forward(*input, **kwargs)\n-        for hook in self._forward_hooks.values():\n-            hook_result = hook(self, input, result)\n-            if hook_result is not None:\n-                raise RuntimeError(\n-                    \"forward hooks should never return any values, but '{}'\"\n-                    \"didn't return None\".format(hook))\n-        if len(self._backward_hooks) > 0:\n-            var = result\n-            while not isinstance(var, Variable):\n-                if isinstance(var, dict):\n-                    var = next((v for v in var.values() if isinstance(v, Variable)))\n-                else:\n-                    var = var[0]\n-            grad_fn = var.grad_fn\n-            if grad_fn is not None:\n-                for hook in self._backward_hooks.values():\n-                    wrapper = functools.partial(hook, self)\n-                    functools.update_wrapper(wrapper, hook)\n-                    grad_fn.register_hook(wrapper)\n+        with torch.jit.scope('%s$%s' % (self.__class__.__name__, self._name),\n+                             tuple(torch.autograd.function._iter_variables(input))):\n+            for hook in self._forward_pre_hooks.values():\n+                hook(self, input)\n+            result = self.forward(*input, **kwargs)\n+            for hook in self._forward_hooks.values():\n+                hook_result = hook(self, input, result)\n+                if hook_result is not None:\n+                    raise RuntimeError(\n+                        \"forward hooks should never return any values, but '{}'\"\n+                        \"didn't return None\".format(hook))\n+            if len(self._backward_hooks) > 0:\n+                var = result\n+                while not isinstance(var, Variable):\n+                    if isinstance(var, dict):\n+                        var = next((v for v in var.values() if isinstance(v, Variable)))\n+                    else:\n+                        var = var[0]\n+                grad_fn = var.grad_fn\n+                if grad_fn is not None:\n+                    for hook in self._backward_hooks.values():\n+                        wrapper = functools.partial(hook, self)\n+                        functools.update_wrapper(wrapper, hook)\n+                        grad_fn.register_hook(wrapper)\n         return result\n \n     def __setstate__(self, state):\n         self.__dict__.update(state)\n+        if '_name' not in self.__dict__:\n+            self._name = ''\n+            for name, module in self.named_children():\n+                module._name = name", "path": "torch/nn/modules/module.py", "position": null, "original_position": 80, "commit_id": "1ef21e12c8ecdbfde2a5ac10e2ab8f5b4c5cc7f7", "original_commit_id": "1241e1fe51a364203c318d82c5b42bb076031d21", "user": {"login": "lantiga", "id": 191033, "node_id": "MDQ6VXNlcjE5MTAzMw==", "avatar_url": "https://avatars2.githubusercontent.com/u/191033?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lantiga", "html_url": "https://github.com/lantiga", "followers_url": "https://api.github.com/users/lantiga/followers", "following_url": "https://api.github.com/users/lantiga/following{/other_user}", "gists_url": "https://api.github.com/users/lantiga/gists{/gist_id}", "starred_url": "https://api.github.com/users/lantiga/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lantiga/subscriptions", "organizations_url": "https://api.github.com/users/lantiga/orgs", "repos_url": "https://api.github.com/users/lantiga/repos", "events_url": "https://api.github.com/users/lantiga/events{/privacy}", "received_events_url": "https://api.github.com/users/lantiga/received_events", "type": "User", "site_admin": false}, "body": "Nice catch! Of course it wouldn't work.\r\nThis\r\n```\r\nif '_name' not in self.__dict__:\r\n    self._name = ''\r\nfor name, module in self.named_children():\r\n    if '_name' not in module.__dict__:\r\n        module._name = name\r\n```\r\nwould fix it, at the cost of checking all children even if `name_` is in the parent.\r\n\r\nHowever, thinking about DAG, it may make no sense to assign a name attribute to a module itself (which is why it wasn't there in the first place \ud83d\ude04, I get it now). \r\n\r\nI'm realizing that the way to get the name for a module (to auto-generate the scope name for the module) is to obtain it from the stack you're talking about in your DAG comment.", "created_at": "2017-11-12T15:51:31Z", "updated_at": "2018-11-23T15:36:25Z", "html_url": "https://github.com/pytorch/pytorch/pull/3016#discussion_r150414517", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/3016", "author_association": "COLLABORATOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/150414517"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/3016#discussion_r150414517"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/3016"}}, "body_html": "<p>Nice catch! Of course it wouldn't work.<br>\nThis</p>\n<pre><code>if '_name' not in self.__dict__:\n    self._name = ''\nfor name, module in self.named_children():\n    if '_name' not in module.__dict__:\n        module._name = name\n</code></pre>\n<p>would fix it, at the cost of checking all children even if <code>name_</code> is in the parent.</p>\n<p>However, thinking about DAG, it may make no sense to assign a name attribute to a module itself (which is why it wasn't there in the first place <g-emoji class=\"g-emoji\" alias=\"smile\" fallback-src=\"https://assets-cdn.github.com/images/icons/emoji/unicode/1f604.png\">\ud83d\ude04</g-emoji>, I get it now).</p>\n<p>I'm realizing that the way to get the name for a module (to auto-generate the scope name for the module) is to obtain it from the stack you're talking about in your DAG comment.</p>", "body_text": "Nice catch! Of course it wouldn't work.\nThis\nif '_name' not in self.__dict__:\n    self._name = ''\nfor name, module in self.named_children():\n    if '_name' not in module.__dict__:\n        module._name = name\n\nwould fix it, at the cost of checking all children even if name_ is in the parent.\nHowever, thinking about DAG, it may make no sense to assign a name attribute to a module itself (which is why it wasn't there in the first place \ud83d\ude04, I get it now).\nI'm realizing that the way to get the name for a module (to auto-generate the scope name for the module) is to obtain it from the stack you're talking about in your DAG comment.", "in_reply_to_id": 143436379}