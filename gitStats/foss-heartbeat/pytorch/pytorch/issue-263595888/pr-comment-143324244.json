{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/143324244", "pull_request_review_id": 67826882, "id": 143324244, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0MzMyNDI0NA==", "diff_hunk": "@@ -152,6 +157,23 @@ struct Node : public Attributes<Node> {\n   const std::string & debugName() const {\n     return debug_name_;\n   }\n+  const std::vector<Symbol> scope() const {\n+    return scope_;\n+  }\n+  std::string scopeName() const {\n+    std::string scope_name;\n+    if (scope_.empty()) {\n+      return scope_name;\n+    }\n+    scope_name = std::accumulate(", "path": "torch/csrc/jit/ir.h", "position": null, "original_position": 38, "commit_id": "1ef21e12c8ecdbfde2a5ac10e2ab8f5b4c5cc7f7", "original_commit_id": "e96638bc61a425a5769c6c72b5ac6c5c606f6b38", "user": {"login": "lantiga", "id": 191033, "node_id": "MDQ6VXNlcjE5MTAzMw==", "avatar_url": "https://avatars2.githubusercontent.com/u/191033?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lantiga", "html_url": "https://github.com/lantiga", "followers_url": "https://api.github.com/users/lantiga/followers", "following_url": "https://api.github.com/users/lantiga/following{/other_user}", "gists_url": "https://api.github.com/users/lantiga/gists{/gist_id}", "starred_url": "https://api.github.com/users/lantiga/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lantiga/subscriptions", "organizations_url": "https://api.github.com/users/lantiga/orgs", "repos_url": "https://api.github.com/users/lantiga/repos", "events_url": "https://api.github.com/users/lantiga/events{/privacy}", "received_events_url": "https://api.github.com/users/lantiga/received_events", "type": "User", "site_admin": false}, "body": "I was thinking about this. The advantage right now is that it might be lighter if you have a lot of nodes, but you're right, we're not matching at the moment.\r\nCould we ever expose interned strings to python\u00a0without converting to strings?\r\n\r\nI'm fine reverting to strings anyway.", "created_at": "2017-10-07T06:36:32Z", "updated_at": "2018-11-23T15:35:06Z", "html_url": "https://github.com/pytorch/pytorch/pull/3016#discussion_r143324244", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/3016", "author_association": "COLLABORATOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/143324244"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/3016#discussion_r143324244"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/3016"}}, "body_html": "<p>I was thinking about this. The advantage right now is that it might be lighter if you have a lot of nodes, but you're right, we're not matching at the moment.<br>\nCould we ever expose interned strings to python\u00a0without converting to strings?</p>\n<p>I'm fine reverting to strings anyway.</p>", "body_text": "I was thinking about this. The advantage right now is that it might be lighter if you have a lot of nodes, but you're right, we're not matching at the moment.\nCould we ever expose interned strings to python\u00a0without converting to strings?\nI'm fine reverting to strings anyway.", "in_reply_to_id": 143320650}