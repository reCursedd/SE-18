{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/153767947", "pull_request_review_id": 79822918, "id": 153767947, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1Mzc2Nzk0Nw==", "diff_hunk": "@@ -59,6 +61,9 @@ struct TracingState : public std::enable_shared_from_this<TracingState> {\n   std::shared_ptr<Graph> graph;\n   bool active;\n \n+  std::unique_ptr<Scope> scope_root;", "path": "torch/csrc/jit/tracer_state.h", "position": null, "original_position": 13, "commit_id": "1ef21e12c8ecdbfde2a5ac10e2ab8f5b4c5cc7f7", "original_commit_id": "72fc5787dd1afc0a63e67c252afff0d4ebb5bb07", "user": {"login": "lantiga", "id": 191033, "node_id": "MDQ6VXNlcjE5MTAzMw==", "avatar_url": "https://avatars2.githubusercontent.com/u/191033?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lantiga", "html_url": "https://github.com/lantiga", "followers_url": "https://api.github.com/users/lantiga/followers", "following_url": "https://api.github.com/users/lantiga/following{/other_user}", "gists_url": "https://api.github.com/users/lantiga/gists{/gist_id}", "starred_url": "https://api.github.com/users/lantiga/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lantiga/subscriptions", "organizations_url": "https://api.github.com/users/lantiga/orgs", "repos_url": "https://api.github.com/users/lantiga/repos", "events_url": "https://api.github.com/users/lantiga/events{/privacy}", "received_events_url": "https://api.github.com/users/lantiga/received_events", "type": "User", "site_admin": false}, "body": "I certainly misinterpreted. \r\nCan you clarify a few things for me:\r\n\r\n- In the previous iteration the scopes trie was owned by the root of the graph, as you suggest in 1. We can go back to that design and use a shared pointer for those cases in which a graph is cloned and nodes need to keep pointing to the same scope trie nodes.\r\n\r\n- Having pointers in the direction `scopes` -> `ir` requires a greater change, but if we like it more we can go for it. In this case we can't tell a node to store the pointer to the trie node that was current when the node was created. Rather, the scopes trie would have to store pointers to nodes in a set (or vector) at each trie node. This would make Graph scope-free, what do you think about this option?\r\n\r\nThanks for the awesome review BTW", "created_at": "2017-11-29T12:01:14Z", "updated_at": "2018-11-23T15:36:56Z", "html_url": "https://github.com/pytorch/pytorch/pull/3016#discussion_r153767947", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/3016", "author_association": "COLLABORATOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/153767947"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/3016#discussion_r153767947"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/3016"}}, "body_html": "<p>I certainly misinterpreted.<br>\nCan you clarify a few things for me:</p>\n<ul>\n<li>\n<p>In the previous iteration the scopes trie was owned by the root of the graph, as you suggest in 1. We can go back to that design and use a shared pointer for those cases in which a graph is cloned and nodes need to keep pointing to the same scope trie nodes.</p>\n</li>\n<li>\n<p>Having pointers in the direction <code>scopes</code> -&gt; <code>ir</code> requires a greater change, but if we like it more we can go for it. In this case we can't tell a node to store the pointer to the trie node that was current when the node was created. Rather, the scopes trie would have to store pointers to nodes in a set (or vector) at each trie node. This would make Graph scope-free, what do you think about this option?</p>\n</li>\n</ul>\n<p>Thanks for the awesome review BTW</p>", "body_text": "I certainly misinterpreted.\nCan you clarify a few things for me:\n\n\nIn the previous iteration the scopes trie was owned by the root of the graph, as you suggest in 1. We can go back to that design and use a shared pointer for those cases in which a graph is cloned and nodes need to keep pointing to the same scope trie nodes.\n\n\nHaving pointers in the direction scopes -> ir requires a greater change, but if we like it more we can go for it. In this case we can't tell a node to store the pointer to the trie node that was current when the node was created. Rather, the scopes trie would have to store pointers to nodes in a set (or vector) at each trie node. This would make Graph scope-free, what do you think about this option?\n\n\nThanks for the awesome review BTW", "in_reply_to_id": 153601838}