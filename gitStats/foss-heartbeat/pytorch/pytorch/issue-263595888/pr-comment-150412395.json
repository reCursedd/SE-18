{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/150412395", "pull_request_review_id": 75960872, "id": 150412395, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MDQxMjM5NQ==", "diff_hunk": "@@ -596,6 +693,32 @@ friend struct Node;\n   const Node * return_node() const {\n     return output_;\n   }\n+  \n+  // TODO: Scope is most accurately a property of tracing, rather than\n+  // of the IR (which doesn't really know or care about the scopes.)\n+  // Move this to TracingState eventually.", "path": "torch/csrc/jit/ir.h", "position": null, "original_position": 170, "commit_id": "1ef21e12c8ecdbfde2a5ac10e2ab8f5b4c5cc7f7", "original_commit_id": "c2696ac36766c188609deacc6358c3422a393179", "user": {"login": "lantiga", "id": 191033, "node_id": "MDQ6VXNlcjE5MTAzMw==", "avatar_url": "https://avatars2.githubusercontent.com/u/191033?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lantiga", "html_url": "https://github.com/lantiga", "followers_url": "https://api.github.com/users/lantiga/followers", "following_url": "https://api.github.com/users/lantiga/following{/other_user}", "gists_url": "https://api.github.com/users/lantiga/gists{/gist_id}", "starred_url": "https://api.github.com/users/lantiga/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lantiga/subscriptions", "organizations_url": "https://api.github.com/users/lantiga/orgs", "repos_url": "https://api.github.com/users/lantiga/repos", "events_url": "https://api.github.com/users/lantiga/events{/privacy}", "received_events_url": "https://api.github.com/users/lantiga/received_events", "type": "User", "site_admin": false}, "body": "Moving to `TracingState` has the following gotcha: `Node`s hold a pointer to nodes of the `Scope` trie. If we assume that `Node`s always belong to the same `Graph` (or a graph cloned from it, so we can pass the `shared_ptr` to `Scope`s along), storing the `Scope` trie in the `Graph` ensures that the pointers to scopes in `Node`s will always be valid. Both the lifetime of `Nodes` and `Scope` depend on the lifetime of `Graph`.\r\n\r\nCan we have similar guarantees if we move `Scope` to `TracingState`?", "created_at": "2017-11-12T14:37:30Z", "updated_at": "2018-11-23T15:36:25Z", "html_url": "https://github.com/pytorch/pytorch/pull/3016#discussion_r150412395", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/3016", "author_association": "COLLABORATOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/150412395"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/3016#discussion_r150412395"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/3016"}}, "body_html": "<p>Moving to <code>TracingState</code> has the following gotcha: <code>Node</code>s hold a pointer to nodes of the <code>Scope</code> trie. If we assume that <code>Node</code>s always belong to the same <code>Graph</code> (or a graph cloned from it, so we can pass the <code>shared_ptr</code> to <code>Scope</code>s along), storing the <code>Scope</code> trie in the <code>Graph</code> ensures that the pointers to scopes in <code>Node</code>s will always be valid. Both the lifetime of <code>Nodes</code> and <code>Scope</code> depend on the lifetime of <code>Graph</code>.</p>\n<p>Can we have similar guarantees if we move <code>Scope</code> to <code>TracingState</code>?</p>", "body_text": "Moving to TracingState has the following gotcha: Nodes hold a pointer to nodes of the Scope trie. If we assume that Nodes always belong to the same Graph (or a graph cloned from it, so we can pass the shared_ptr to Scopes along), storing the Scope trie in the Graph ensures that the pointers to scopes in Nodes will always be valid. Both the lifetime of Nodes and Scope depend on the lifetime of Graph.\nCan we have similar guarantees if we move Scope to TracingState?", "in_reply_to_id": 150395575}