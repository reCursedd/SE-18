{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/150395971", "pull_request_review_id": 68115575, "id": 150395971, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MDM5NTk3MQ==", "diff_hunk": "@@ -320,32 +323,46 @@ def register_forward_hook(self, hook):\n         return handle\n \n     def __call__(self, *input, **kwargs):\n-        for hook in self._forward_pre_hooks.values():\n-            hook(self, input)\n-        result = self.forward(*input, **kwargs)\n-        for hook in self._forward_hooks.values():\n-            hook_result = hook(self, input, result)\n-            if hook_result is not None:\n-                raise RuntimeError(\n-                    \"forward hooks should never return any values, but '{}'\"\n-                    \"didn't return None\".format(hook))\n-        if len(self._backward_hooks) > 0:\n-            var = result\n-            while not isinstance(var, Variable):\n-                if isinstance(var, dict):\n-                    var = next((v for v in var.values() if isinstance(v, Variable)))\n-                else:\n-                    var = var[0]\n-            grad_fn = var.grad_fn\n-            if grad_fn is not None:\n-                for hook in self._backward_hooks.values():\n-                    wrapper = functools.partial(hook, self)\n-                    functools.update_wrapper(wrapper, hook)\n-                    grad_fn.register_hook(wrapper)\n+        tracing_state = None\n+        if torch.jit._tracing:\n+            input_vars = tuple(torch.autograd.function._iter_variables(input))\n+            tracing_state = torch.jit.get_tracing_state(*input_vars)\n+            if tracing_state:\n+                tracing_state.push_scope('%s_%s' % (self.__class__.__name__, self._name))\n+        try:\n+            for hook in self._forward_pre_hooks.values():\n+                hook(self, input)\n+            result = self.forward(*input, **kwargs)\n+            for hook in self._forward_hooks.values():\n+                hook_result = hook(self, input, result)\n+                if hook_result is not None:\n+                    raise RuntimeError(\n+                        \"forward hooks should never return any values, but '{}'\"\n+                        \"didn't return None\".format(hook))\n+            if len(self._backward_hooks) > 0:\n+                var = result\n+                while not isinstance(var, Variable):\n+                    if isinstance(var, dict):\n+                        var = next((v for v in var.values() if isinstance(v, Variable)))\n+                    else:\n+                        var = var[0]\n+                grad_fn = var.grad_fn\n+                if grad_fn is not None:\n+                    for hook in self._backward_hooks.values():\n+                        wrapper = functools.partial(hook, self)\n+                        functools.update_wrapper(wrapper, hook)\n+                        grad_fn.register_hook(wrapper)\n+        finally:\n+            if tracing_state:\n+                tracing_state.pop_scope()", "path": "torch/nn/modules/module.py", "position": null, "original_position": 80, "commit_id": "1ef21e12c8ecdbfde2a5ac10e2ab8f5b4c5cc7f7", "original_commit_id": "c2696ac36766c188609deacc6358c3422a393179", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "I think that it would be better to do this to reduce overhead (and simplify code):\r\n```python\r\n# do the pre-hooks\r\nif torch.jit._tracing:\r\n    result = self.slow_forward() # set the scope and only then call self.forward(*input, **kwargs) in a try block\r\nelse:\r\n    result = self.forward(*input, **kwargs)\r\n# do the post hooks\r\n```", "created_at": "2017-11-11T23:14:37Z", "updated_at": "2018-11-23T15:36:24Z", "html_url": "https://github.com/pytorch/pytorch/pull/3016#discussion_r150395971", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/3016", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/150395971"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/3016#discussion_r150395971"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/3016"}}, "body_html": "<p>I think that it would be better to do this to reduce overhead (and simplify code):</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-c\"><span class=\"pl-c\">#</span> do the pre-hooks</span>\n<span class=\"pl-k\">if</span> torch.jit._tracing:\n    result <span class=\"pl-k\">=</span> <span class=\"pl-c1\">self</span>.slow_forward() <span class=\"pl-c\"><span class=\"pl-c\">#</span> set the scope and only then call self.forward(*input, **kwargs) in a try block</span>\n<span class=\"pl-k\">else</span>:\n    result <span class=\"pl-k\">=</span> <span class=\"pl-c1\">self</span>.forward(<span class=\"pl-k\">*</span><span class=\"pl-c1\">input</span>, <span class=\"pl-k\">**</span>kwargs)\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> do the post hooks</span></pre></div>", "body_text": "I think that it would be better to do this to reduce overhead (and simplify code):\n# do the pre-hooks\nif torch.jit._tracing:\n    result = self.slow_forward() # set the scope and only then call self.forward(*input, **kwargs) in a try block\nelse:\n    result = self.forward(*input, **kwargs)\n# do the post hooks"}