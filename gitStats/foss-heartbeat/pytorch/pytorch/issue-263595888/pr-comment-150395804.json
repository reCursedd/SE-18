{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/150395804", "pull_request_review_id": 68115575, "id": 150395804, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MDM5NTgwNA==", "diff_hunk": "@@ -391,6 +408,8 @@ def remove_from(*dicts):\n                     raise AttributeError(\n                         \"cannot assign module before Module.__init__() call\")\n                 remove_from(self.__dict__, self._parameters, self._buffers)\n+                if value is not None:\n+                    value._name = name", "path": "torch/nn/modules/module.py", "position": null, "original_position": 97, "commit_id": "1ef21e12c8ecdbfde2a5ac10e2ab8f5b4c5cc7f7", "original_commit_id": "c2696ac36766c188609deacc6358c3422a393179", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Treating modules like this is a bit awkward, because we don't enforce the model to form a tree - it's more of a DAG. The same module can be a submodule of multiple parents, and it happens in a few models. A better solution would be to keep a stack of modules, and inside that `slow_forward()` function I mentioned you could look up the topmost module, fine the name of the current module in the outer scope, and use that. This would let modules have multiple names and remove the need for this attribute. And it's tracing so we don't care this much about perf", "created_at": "2017-11-11T23:05:25Z", "updated_at": "2018-11-23T15:36:24Z", "html_url": "https://github.com/pytorch/pytorch/pull/3016#discussion_r150395804", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/3016", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/150395804"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/3016#discussion_r150395804"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/3016"}}, "body_html": "<p>Treating modules like this is a bit awkward, because we don't enforce the model to form a tree - it's more of a DAG. The same module can be a submodule of multiple parents, and it happens in a few models. A better solution would be to keep a stack of modules, and inside that <code>slow_forward()</code> function I mentioned you could look up the topmost module, fine the name of the current module in the outer scope, and use that. This would let modules have multiple names and remove the need for this attribute. And it's tracing so we don't care this much about perf</p>", "body_text": "Treating modules like this is a bit awkward, because we don't enforce the model to form a tree - it's more of a DAG. The same module can be a submodule of multiple parents, and it happens in a few models. A better solution would be to keep a stack of modules, and inside that slow_forward() function I mentioned you could look up the topmost module, fine the name of the current module in the outer scope, and use that. This would let modules have multiple names and remove the need for this attribute. And it's tracing so we don't care this much about perf"}