{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/352031035", "html_url": "https://github.com/pytorch/pytorch/pull/3016#issuecomment-352031035", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/3016", "id": 352031035, "node_id": "MDEyOklzc3VlQ29tbWVudDM1MjAzMTAzNQ==", "user": {"login": "lantiga", "id": 191033, "node_id": "MDQ6VXNlcjE5MTAzMw==", "avatar_url": "https://avatars2.githubusercontent.com/u/191033?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lantiga", "html_url": "https://github.com/lantiga", "followers_url": "https://api.github.com/users/lantiga/followers", "following_url": "https://api.github.com/users/lantiga/following{/other_user}", "gists_url": "https://api.github.com/users/lantiga/gists{/gist_id}", "starred_url": "https://api.github.com/users/lantiga/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lantiga/subscriptions", "organizations_url": "https://api.github.com/users/lantiga/orgs", "repos_url": "https://api.github.com/users/lantiga/repos", "events_url": "https://api.github.com/users/lantiga/events{/privacy}", "received_events_url": "https://api.github.com/users/lantiga/received_events", "type": "User", "site_admin": false}, "created_at": "2017-12-15T15:18:18Z", "updated_at": "2017-12-15T15:18:18Z", "author_association": "COLLABORATOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=13761737\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/hhsecond\">@hhsecond</a> adding the scope name from python is not a problem. You will get a string <code>Foo/Bar</code> or <code>Foo/Bar[baz]</code>, where <code>Foo</code> and <code>Bar</code> are scope names. The second form will be generated automatically by modules, one scope name per module: in this case <code>baz</code> is the name of the variable containing the module <code>Bar</code> in the parent module <code>Foo</code></p>\n<pre><code>class Foo(nn.Module):\n    def __init__(self):\n        [...]\n        self.baz = Bar()\n</code></pre>\n<p>Feel free to open an issue for exposing scopeName to python and mention me.</p>", "body_text": "@hhsecond adding the scope name from python is not a problem. You will get a string Foo/Bar or Foo/Bar[baz], where Foo and Bar are scope names. The second form will be generated automatically by modules, one scope name per module: in this case baz is the name of the variable containing the module Bar in the parent module Foo\nclass Foo(nn.Module):\n    def __init__(self):\n        [...]\n        self.baz = Bar()\n\nFeel free to open an issue for exposing scopeName to python and mention me.", "body": "@hhsecond adding the scope name from python is not a problem. You will get a string `Foo/Bar` or `Foo/Bar[baz]`, where `Foo` and `Bar` are scope names. The second form will be generated automatically by modules, one scope name per module: in this case `baz` is the name of the variable containing the module `Bar` in the parent module `Foo`\r\n```\r\nclass Foo(nn.Module):\r\n    def __init__(self):\r\n        [...]\r\n        self.baz = Bar()\r\n```\r\n\r\nFeel free to open an issue for exposing scopeName to python and mention me."}