{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/150395361", "pull_request_review_id": 68115575, "id": 150395361, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MDM5NTM2MQ==", "diff_hunk": "@@ -60,6 +61,67 @@ static inline bool operator==(const Use & a, const Use & b) {\n // Graph holds a list of parameters.\n struct Param;\n \n+// Scope is a node of a trie that represents the tree of nested scopes.\n+// Individual scopes are pushed and popped from Graph, which hold a\n+// pointer to the current scope. Each Node in Graph holds a pointer\n+// to the scope that was current when the node was created.\n+// The trie never needs to shrink, it only grows until it is disposed\n+// of when Graph is deallocated. Hence, pointers to scopes held by nodes\n+// will always be valid.\n+// Note that the ownership model as specified in the destructor implies \n+// that you cannot share common subtries between tries.\n+struct Scope {\n+private:\n+  Scope* parent_;\n+  Symbol name_;\n+  std::unordered_set<const Scope*> children_;\n+public:\n+  Scope() {\n+    name_ = stringToSymbol(\"\");\n+    parent_ = NULL;\n+  }\n+  Scope(Scope* parent, Symbol name) {\n+    name_ = name;\n+    parent_ = parent;\n+  }\n+  ~Scope() {\n+    for (auto* child: children_) delete child;\n+  }\n+  Scope* push(Symbol name) {\n+    Scope* newScope = new Scope(this, name);\n+    children_.insert(newScope);\n+    return newScope;\n+  }\n+  Scope* pop() {\n+    if (parent_ == NULL) {\n+      return this;\n+    }\n+    return parent_;\n+  }\n+  bool isRoot() {\n+    return parent_ == NULL;\n+  }\n+  Scope* getRoot() {\n+    Scope* current = this;\n+    while (current->parent_) {\n+      current = current->parent_;\n+    }\n+    return current;\n+  }\n+  Symbol name() {\n+    return name_;\n+  }\n+  std::vector<Symbol> namesToRoot() {\n+    std::vector<Symbol> out;\n+    Scope* current = this;\n+    while (!current->isRoot()) {\n+      out.push_back(current->name_);\n+      current = current->parent_;\n+    }\n+    return out;\n+  }", "path": "torch/csrc/jit/ir.h", "position": null, "original_position": 70, "commit_id": "1ef21e12c8ecdbfde2a5ac10e2ab8f5b4c5cc7f7", "original_commit_id": "c2696ac36766c188609deacc6358c3422a393179", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Won't this be reversed (root at the end)?", "created_at": "2017-11-11T22:46:09Z", "updated_at": "2018-11-23T15:36:23Z", "html_url": "https://github.com/pytorch/pytorch/pull/3016#discussion_r150395361", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/3016", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/150395361"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/3016#discussion_r150395361"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/3016"}}, "body_html": "<p>Won't this be reversed (root at the end)?</p>", "body_text": "Won't this be reversed (root at the end)?"}