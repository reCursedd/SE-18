{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/153601838", "pull_request_review_id": 79628382, "id": 153601838, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MzYwMTgzOA==", "diff_hunk": "@@ -59,6 +61,9 @@ struct TracingState : public std::enable_shared_from_this<TracingState> {\n   std::shared_ptr<Graph> graph;\n   bool active;\n \n+  std::unique_ptr<Scope> scope_root;", "path": "torch/csrc/jit/tracer_state.h", "position": null, "original_position": 13, "commit_id": "1ef21e12c8ecdbfde2a5ac10e2ab8f5b4c5cc7f7", "original_commit_id": "72fc5787dd1afc0a63e67c252afff0d4ebb5bb07", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Hmm that's not really what I meant when I thought of moving scopes out of the IR. What I thought about was making it a parallel mechanism, with pointers going only in the direction scopes -> ir. Right now, there's this weird ownership cycles `TracingState -> Graph -> Scope -> TracingState` (the last pointers aren't strong, so there's no cycle per se) - the lifetime of the graph becomes closely tied to that of `TracingState`, which we don't enforce right now, and what's worse, we have code that might violate this.\r\n\r\nI can see two solutions for this situation:\r\n1. Since Scopes are still so close to the IR, move ownership of the root to the graph.\r\n2. Make Graph scope-free. Scopes are a separate mechanism for grouping graph nodes (this is harder).\r\n\r\nBoth ways are fine. I'd rather finally get this in. Sorry if I said something unclear \ud83d\ude15 ", "created_at": "2017-11-28T19:42:34Z", "updated_at": "2018-11-23T15:36:55Z", "html_url": "https://github.com/pytorch/pytorch/pull/3016#discussion_r153601838", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/3016", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/153601838"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/3016#discussion_r153601838"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/3016"}}, "body_html": "<p>Hmm that's not really what I meant when I thought of moving scopes out of the IR. What I thought about was making it a parallel mechanism, with pointers going only in the direction scopes -&gt; ir. Right now, there's this weird ownership cycles <code>TracingState -&gt; Graph -&gt; Scope -&gt; TracingState</code> (the last pointers aren't strong, so there's no cycle per se) - the lifetime of the graph becomes closely tied to that of <code>TracingState</code>, which we don't enforce right now, and what's worse, we have code that might violate this.</p>\n<p>I can see two solutions for this situation:</p>\n<ol>\n<li>Since Scopes are still so close to the IR, move ownership of the root to the graph.</li>\n<li>Make Graph scope-free. Scopes are a separate mechanism for grouping graph nodes (this is harder).</li>\n</ol>\n<p>Both ways are fine. I'd rather finally get this in. Sorry if I said something unclear <g-emoji class=\"g-emoji\" alias=\"confused\" fallback-src=\"https://assets-cdn.github.com/images/icons/emoji/unicode/1f615.png\">\ud83d\ude15</g-emoji></p>", "body_text": "Hmm that's not really what I meant when I thought of moving scopes out of the IR. What I thought about was making it a parallel mechanism, with pointers going only in the direction scopes -> ir. Right now, there's this weird ownership cycles TracingState -> Graph -> Scope -> TracingState (the last pointers aren't strong, so there's no cycle per se) - the lifetime of the graph becomes closely tied to that of TracingState, which we don't enforce right now, and what's worse, we have code that might violate this.\nI can see two solutions for this situation:\n\nSince Scopes are still so close to the IR, move ownership of the root to the graph.\nMake Graph scope-free. Scopes are a separate mechanism for grouping graph nodes (this is harder).\n\nBoth ways are fine. I'd rather finally get this in. Sorry if I said something unclear \ud83d\ude15"}