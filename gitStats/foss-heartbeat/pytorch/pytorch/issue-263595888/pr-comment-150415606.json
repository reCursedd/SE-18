{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/150415606", "pull_request_review_id": 75964090, "id": 150415606, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MDQxNTYwNg==", "diff_hunk": "@@ -254,32 +257,38 @@ def register_forward_hook(self, hook):\n         return handle\n \n     def __call__(self, *input, **kwargs):\n-        for hook in self._forward_pre_hooks.values():\n-            hook(self, input)\n-        result = self.forward(*input, **kwargs)\n-        for hook in self._forward_hooks.values():\n-            hook_result = hook(self, input, result)\n-            if hook_result is not None:\n-                raise RuntimeError(\n-                    \"forward hooks should never return any values, but '{}'\"\n-                    \"didn't return None\".format(hook))\n-        if len(self._backward_hooks) > 0:\n-            var = result\n-            while not isinstance(var, Variable):\n-                if isinstance(var, dict):\n-                    var = next((v for v in var.values() if isinstance(v, Variable)))\n-                else:\n-                    var = var[0]\n-            grad_fn = var.grad_fn\n-            if grad_fn is not None:\n-                for hook in self._backward_hooks.values():\n-                    wrapper = functools.partial(hook, self)\n-                    functools.update_wrapper(wrapper, hook)\n-                    grad_fn.register_hook(wrapper)\n+        with torch.jit.scope('%s$%s' % (self.__class__.__name__, self._name),\n+                             tuple(torch.autograd.function._iter_variables(input))):\n+            for hook in self._forward_pre_hooks.values():\n+                hook(self, input)\n+            result = self.forward(*input, **kwargs)\n+            for hook in self._forward_hooks.values():\n+                hook_result = hook(self, input, result)\n+                if hook_result is not None:\n+                    raise RuntimeError(\n+                        \"forward hooks should never return any values, but '{}'\"\n+                        \"didn't return None\".format(hook))\n+            if len(self._backward_hooks) > 0:\n+                var = result\n+                while not isinstance(var, Variable):\n+                    if isinstance(var, dict):\n+                        var = next((v for v in var.values() if isinstance(v, Variable)))\n+                    else:\n+                        var = var[0]\n+                grad_fn = var.grad_fn\n+                if grad_fn is not None:\n+                    for hook in self._backward_hooks.values():\n+                        wrapper = functools.partial(hook, self)\n+                        functools.update_wrapper(wrapper, hook)\n+                        grad_fn.register_hook(wrapper)\n         return result\n \n     def __setstate__(self, state):\n         self.__dict__.update(state)\n+        if '_name' not in self.__dict__:\n+            self._name = ''\n+            for name, module in self.named_children():\n+                module._name = name", "path": "torch/nn/modules/module.py", "position": null, "original_position": 80, "commit_id": "1ef21e12c8ecdbfde2a5ac10e2ab8f5b4c5cc7f7", "original_commit_id": "1241e1fe51a364203c318d82c5b42bb076031d21", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Yup, the stack is a reliable way to get this, without all the `_name` maintenance headaches.", "created_at": "2017-11-12T16:33:02Z", "updated_at": "2018-11-23T15:36:26Z", "html_url": "https://github.com/pytorch/pytorch/pull/3016#discussion_r150415606", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/3016", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/150415606"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/3016#discussion_r150415606"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/3016"}}, "body_html": "<p>Yup, the stack is a reliable way to get this, without all the <code>_name</code> maintenance headaches.</p>", "body_text": "Yup, the stack is a reliable way to get this, without all the _name maintenance headaches.", "in_reply_to_id": 143436379}