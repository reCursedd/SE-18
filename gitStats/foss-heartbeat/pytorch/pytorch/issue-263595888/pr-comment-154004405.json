{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/154004405", "pull_request_review_id": 80098950, "id": 154004405, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDAwNDQwNQ==", "diff_hunk": "@@ -70,6 +70,65 @@ struct SourceLocation {\n   std::string python_traceback;\n };\n \n+// Scope is a node of a trie that represents the tree of nested scopes.\n+// Individual scopes are pushed and popped from Graph, which holds a\n+// pointer to the current scope. Each Node in Graph holds a pointer\n+// to the scope that was current when the node was created.\n+// The trie never needs to shrink, it only grows until it is disposed\n+// of when Graph is deallocated. Hence, pointers to scopes held by nodes\n+// will always be valid as long as Graph is alive.\n+struct Scope {\n+private:\n+  Scope* parent_;\n+  Symbol name_;\n+  std::unordered_set<std::unique_ptr<Scope> > children_;\n+public:\n+  Scope() {\n+    name_ = stringToSymbol(\"\");\n+    parent_ = NULL;\n+  }\n+  Scope(Scope* parent, Symbol name) {\n+    name_ = name;\n+    parent_ = parent;\n+  }\n+  Scope* push(Symbol name) {\n+    Scope* newScope = new Scope(this, name);\n+    children_.insert(std::unique_ptr<Scope>(newScope));\n+    return newScope;", "path": "torch/csrc/jit/ir.h", "position": null, "original_position": 28, "commit_id": "1ef21e12c8ecdbfde2a5ac10e2ab8f5b4c5cc7f7", "original_commit_id": "2cafb35c2e3fe3245112664398c9ddc169815c0c", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Using set is fine, but as far as I understand the main purpose is to make it a true `trie`, but this is not really what happens in here - you will return the new unbound scope even if the insertion failed, which in turn will cause the pointer to be dangling, because the `unique_ptr` will be destructed immediately.\r\n\r\nNow I'm wondering if we really want to keep it as a true trie... Maybe it just makes sense to have a new scope for each invocation of a module on a particular level (so you can actually see a sequence of scopes - if you call A B A, then you will see A B A in the scope tree).\r\n\r\n Maybe let's really use a vector and skip deduplication.", "created_at": "2017-11-30T07:50:54Z", "updated_at": "2018-11-23T15:36:59Z", "html_url": "https://github.com/pytorch/pytorch/pull/3016#discussion_r154004405", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/3016", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/154004405"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/3016#discussion_r154004405"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/3016"}}, "body_html": "<p>Using set is fine, but as far as I understand the main purpose is to make it a true <code>trie</code>, but this is not really what happens in here - you will return the new unbound scope even if the insertion failed, which in turn will cause the pointer to be dangling, because the <code>unique_ptr</code> will be destructed immediately.</p>\n<p>Now I'm wondering if we really want to keep it as a true trie... Maybe it just makes sense to have a new scope for each invocation of a module on a particular level (so you can actually see a sequence of scopes - if you call A B A, then you will see A B A in the scope tree).</p>\n<p>Maybe let's really use a vector and skip deduplication.</p>", "body_text": "Using set is fine, but as far as I understand the main purpose is to make it a true trie, but this is not really what happens in here - you will return the new unbound scope even if the insertion failed, which in turn will cause the pointer to be dangling, because the unique_ptr will be destructed immediately.\nNow I'm wondering if we really want to keep it as a true trie... Maybe it just makes sense to have a new scope for each invocation of a module on a particular level (so you can actually see a sequence of scopes - if you call A B A, then you will see A B A in the scope tree).\nMaybe let's really use a vector and skip deduplication."}