{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/143334621", "pull_request_review_id": 67836823, "id": 143334621, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0MzMzNDYyMQ==", "diff_hunk": "@@ -254,28 +268,35 @@ def register_forward_hook(self, hook):\n         return handle\n \n     def __call__(self, *input, **kwargs):\n-        for hook in self._forward_pre_hooks.values():\n-            hook(self, input)\n-        result = self.forward(*input, **kwargs)\n-        for hook in self._forward_hooks.values():\n-            hook_result = hook(self, input, result)\n-            if hook_result is not None:\n-                raise RuntimeError(\n-                    \"forward hooks should never return any values, but '{}'\"\n-                    \"didn't return None\".format(hook))\n-        if len(self._backward_hooks) > 0:\n-            var = result\n-            while not isinstance(var, Variable):\n-                if isinstance(var, dict):\n-                    var = next((v for v in var.values() if isinstance(v, Variable)))\n-                else:\n-                    var = var[0]\n-            grad_fn = var.grad_fn\n-            if grad_fn is not None:\n-                for hook in self._backward_hooks.values():\n-                    wrapper = functools.partial(hook, self)\n-                    functools.update_wrapper(wrapper, hook)\n-                    grad_fn.register_hook(wrapper)\n+        tracing_state = torch.jit.get_tracing_state(_first_var(input, kwargs))\n+        try:\n+            if tracing_state:\n+                tracing_state.push_scope('%s$%d' % (self.__class__.__name__, id(self)))", "path": "torch/nn/modules/module.py", "position": null, "original_position": 50, "commit_id": "1ef21e12c8ecdbfde2a5ac10e2ab8f5b4c5cc7f7", "original_commit_id": "0b3448c911b3c2e76d71190f34c44c0d31d0ae18", "user": {"login": "fmassa", "id": 9110200, "node_id": "MDQ6VXNlcjkxMTAyMDA=", "avatar_url": "https://avatars2.githubusercontent.com/u/9110200?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fmassa", "html_url": "https://github.com/fmassa", "followers_url": "https://api.github.com/users/fmassa/followers", "following_url": "https://api.github.com/users/fmassa/following{/other_user}", "gists_url": "https://api.github.com/users/fmassa/gists{/gist_id}", "starred_url": "https://api.github.com/users/fmassa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fmassa/subscriptions", "organizations_url": "https://api.github.com/users/fmassa/orgs", "repos_url": "https://api.github.com/users/fmassa/repos", "events_url": "https://api.github.com/users/fmassa/events{/privacy}", "received_events_url": "https://api.github.com/users/fmassa/received_events", "type": "User", "site_admin": false}, "body": "Instead of naming the scope with the name of the `Module` class, I think it would be nicer if we assign the name of instance.\r\nOne way of achieving this would be to assign a `self._name` attribute into the class whenever we add a module. This way, the names of the scopes would be the same as the names that you give to the modules, and the same that you obtain when printing the network. Also, there would be no need of adding the `id(self)` to the scope, as the names would be unique.\r\n\r\nWhat do you think?", "created_at": "2017-10-07T16:19:39Z", "updated_at": "2018-11-23T15:35:06Z", "html_url": "https://github.com/pytorch/pytorch/pull/3016#discussion_r143334621", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/3016", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/143334621"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/3016#discussion_r143334621"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/3016"}}, "body_html": "<p>Instead of naming the scope with the name of the <code>Module</code> class, I think it would be nicer if we assign the name of instance.<br>\nOne way of achieving this would be to assign a <code>self._name</code> attribute into the class whenever we add a module. This way, the names of the scopes would be the same as the names that you give to the modules, and the same that you obtain when printing the network. Also, there would be no need of adding the <code>id(self)</code> to the scope, as the names would be unique.</p>\n<p>What do you think?</p>", "body_text": "Instead of naming the scope with the name of the Module class, I think it would be nicer if we assign the name of instance.\nOne way of achieving this would be to assign a self._name attribute into the class whenever we add a module. This way, the names of the scopes would be the same as the names that you give to the modules, and the same that you obtain when printing the network. Also, there would be no need of adding the id(self) to the scope, as the names would be unique.\nWhat do you think?"}