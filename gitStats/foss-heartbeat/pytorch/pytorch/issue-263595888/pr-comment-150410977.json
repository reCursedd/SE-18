{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/150410977", "pull_request_review_id": 75959513, "id": 150410977, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MDQxMDk3Nw==", "diff_hunk": "@@ -60,6 +61,67 @@ static inline bool operator==(const Use & a, const Use & b) {\n // Graph holds a list of parameters.\n struct Param;\n \n+// Scope is a node of a trie that represents the tree of nested scopes.\n+// Individual scopes are pushed and popped from Graph, which hold a\n+// pointer to the current scope. Each Node in Graph holds a pointer\n+// to the scope that was current when the node was created.\n+// The trie never needs to shrink, it only grows until it is disposed\n+// of when Graph is deallocated. Hence, pointers to scopes held by nodes\n+// will always be valid.\n+// Note that the ownership model as specified in the destructor implies \n+// that you cannot share common subtries between tries.\n+struct Scope {\n+private:\n+  Scope* parent_;\n+  Symbol name_;\n+  std::unordered_set<const Scope*> children_;", "path": "torch/csrc/jit/ir.h", "position": null, "original_position": 25, "commit_id": "1ef21e12c8ecdbfde2a5ac10e2ab8f5b4c5cc7f7", "original_commit_id": "c2696ac36766c188609deacc6358c3422a393179", "user": {"login": "lantiga", "id": 191033, "node_id": "MDQ6VXNlcjE5MTAzMw==", "avatar_url": "https://avatars2.githubusercontent.com/u/191033?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lantiga", "html_url": "https://github.com/lantiga", "followers_url": "https://api.github.com/users/lantiga/followers", "following_url": "https://api.github.com/users/lantiga/following{/other_user}", "gists_url": "https://api.github.com/users/lantiga/gists{/gist_id}", "starred_url": "https://api.github.com/users/lantiga/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lantiga/subscriptions", "organizations_url": "https://api.github.com/users/lantiga/orgs", "repos_url": "https://api.github.com/users/lantiga/repos", "events_url": "https://api.github.com/users/lantiga/events{/privacy}", "received_events_url": "https://api.github.com/users/lantiga/received_events", "type": "User", "site_admin": false}, "body": "So, Graph holds a pointer to a node in the trie (the current node) and another pointer to the root. They are both pointers to Scope. The current node is for sure a member of `children_` of some other node, yet I have to hold it as current.\r\n\r\nI'm not sure how I would safely use `unique_ptr` to store pointers to children without having to  `get` the raw pointers out to set them as current. It seems it's still an unsafe thing to do.\r\nShould we use a `shared_ptr` to avoid these troubles?", "created_at": "2017-11-12T13:42:05Z", "updated_at": "2018-11-23T15:36:24Z", "html_url": "https://github.com/pytorch/pytorch/pull/3016#discussion_r150410977", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/3016", "author_association": "COLLABORATOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/150410977"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/3016#discussion_r150410977"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/3016"}}, "body_html": "<p>So, Graph holds a pointer to a node in the trie (the current node) and another pointer to the root. They are both pointers to Scope. The current node is for sure a member of <code>children_</code> of some other node, yet I have to hold it as current.</p>\n<p>I'm not sure how I would safely use <code>unique_ptr</code> to store pointers to children without having to  <code>get</code> the raw pointers out to set them as current. It seems it's still an unsafe thing to do.<br>\nShould we use a <code>shared_ptr</code> to avoid these troubles?</p>", "body_text": "So, Graph holds a pointer to a node in the trie (the current node) and another pointer to the root. They are both pointers to Scope. The current node is for sure a member of children_ of some other node, yet I have to hold it as current.\nI'm not sure how I would safely use unique_ptr to store pointers to children without having to  get the raw pointers out to set them as current. It seems it's still an unsafe thing to do.\nShould we use a shared_ptr to avoid these troubles?", "in_reply_to_id": 150395330}