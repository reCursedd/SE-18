{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/154174193", "pull_request_review_id": 80298401, "id": 154174193, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDE3NDE5Mw==", "diff_hunk": "@@ -70,6 +70,65 @@ struct SourceLocation {\n   std::string python_traceback;\n };\n \n+// Scope is a node of a trie that represents the tree of nested scopes.\n+// Individual scopes are pushed and popped from Graph, which holds a\n+// pointer to the current scope. Each Node in Graph holds a pointer\n+// to the scope that was current when the node was created.\n+// The trie never needs to shrink, it only grows until it is disposed\n+// of when Graph is deallocated. Hence, pointers to scopes held by nodes\n+// will always be valid as long as Graph is alive.\n+struct Scope {\n+private:\n+  Scope* parent_;\n+  Symbol name_;\n+  std::unordered_set<std::unique_ptr<Scope> > children_;\n+public:\n+  Scope() {\n+    name_ = stringToSymbol(\"\");\n+    parent_ = NULL;\n+  }\n+  Scope(Scope* parent, Symbol name) {\n+    name_ = name;\n+    parent_ = parent;\n+  }\n+  Scope* push(Symbol name) {\n+    Scope* newScope = new Scope(this, name);\n+    children_.insert(std::unique_ptr<Scope>(newScope));\n+    return newScope;", "path": "torch/csrc/jit/ir.h", "position": null, "original_position": 28, "commit_id": "1ef21e12c8ecdbfde2a5ac10e2ab8f5b4c5cc7f7", "original_commit_id": "2cafb35c2e3fe3245112664398c9ddc169815c0c", "user": {"login": "lantiga", "id": 191033, "node_id": "MDQ6VXNlcjE5MTAzMw==", "avatar_url": "https://avatars2.githubusercontent.com/u/191033?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lantiga", "html_url": "https://github.com/lantiga", "followers_url": "https://api.github.com/users/lantiga/followers", "following_url": "https://api.github.com/users/lantiga/following{/other_user}", "gists_url": "https://api.github.com/users/lantiga/gists{/gist_id}", "starred_url": "https://api.github.com/users/lantiga/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lantiga/subscriptions", "organizations_url": "https://api.github.com/users/lantiga/orgs", "repos_url": "https://api.github.com/users/lantiga/repos", "events_url": "https://api.github.com/users/lantiga/events{/privacy}", "received_events_url": "https://api.github.com/users/lantiga/received_events", "type": "User", "site_admin": false}, "body": "Uh oh, sorry about this one. In fact, I was thinking about it the wrong way when I said you would re-enter a scope.\r\nThe insert would always succeed here, since the scope is always a new scope and the set will by construction not contain it. Which is equivalent to using a vector and appending to it, so I'm just going to use a vector.\r\n\r\nDeduping based on names only makes sense if we'll ever compare the `scope_` pointers stored in Node to check if two nodes have the same scope. I'm going without, let me know about this.", "created_at": "2017-11-30T19:19:05Z", "updated_at": "2018-11-23T15:36:59Z", "html_url": "https://github.com/pytorch/pytorch/pull/3016#discussion_r154174193", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/3016", "author_association": "COLLABORATOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/154174193"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/3016#discussion_r154174193"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/3016"}}, "body_html": "<p>Uh oh, sorry about this one. In fact, I was thinking about it the wrong way when I said you would re-enter a scope.<br>\nThe insert would always succeed here, since the scope is always a new scope and the set will by construction not contain it. Which is equivalent to using a vector and appending to it, so I'm just going to use a vector.</p>\n<p>Deduping based on names only makes sense if we'll ever compare the <code>scope_</code> pointers stored in Node to check if two nodes have the same scope. I'm going without, let me know about this.</p>", "body_text": "Uh oh, sorry about this one. In fact, I was thinking about it the wrong way when I said you would re-enter a scope.\nThe insert would always succeed here, since the scope is always a new scope and the set will by construction not contain it. Which is equivalent to using a vector and appending to it, so I'm just going to use a vector.\nDeduping based on names only makes sense if we'll ever compare the scope_ pointers stored in Node to check if two nodes have the same scope. I'm going without, let me know about this.", "in_reply_to_id": 154004405}