{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/143435212", "pull_request_review_id": 67945083, "id": 143435212, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0MzQzNTIxMg==", "diff_hunk": "@@ -152,6 +157,23 @@ struct Node : public Attributes<Node> {\n   const std::string & debugName() const {\n     return debug_name_;\n   }\n+  const std::vector<Symbol> scope() const {\n+    return scope_;\n+  }\n+  std::string scopeName() const {\n+    std::string scope_name;\n+    if (scope_.empty()) {\n+      return scope_name;\n+    }\n+    scope_name = std::accumulate(", "path": "torch/csrc/jit/ir.h", "position": null, "original_position": 38, "commit_id": "1ef21e12c8ecdbfde2a5ac10e2ab8f5b4c5cc7f7", "original_commit_id": "e96638bc61a425a5769c6c72b5ac6c5c606f6b38", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Interning makes sense, because without it every Node would keep a copy of names of all parent scopes, which is quite a lot. However, if someone uses varying scope names this can really pollute the interned pool. I think it would be nicer to implement scoping mechanism in a trie-like approach, where scopes build up a tree (with `shared_ptr`s to parent nodes) with names at each level, and `Node`s only point to their node in the scope tree.", "created_at": "2017-10-09T10:48:47Z", "updated_at": "2018-11-23T15:35:09Z", "html_url": "https://github.com/pytorch/pytorch/pull/3016#discussion_r143435212", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/3016", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/143435212"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/3016#discussion_r143435212"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/3016"}}, "body_html": "<p>Interning makes sense, because without it every Node would keep a copy of names of all parent scopes, which is quite a lot. However, if someone uses varying scope names this can really pollute the interned pool. I think it would be nicer to implement scoping mechanism in a trie-like approach, where scopes build up a tree (with <code>shared_ptr</code>s to parent nodes) with names at each level, and <code>Node</code>s only point to their node in the scope tree.</p>", "body_text": "Interning makes sense, because without it every Node would keep a copy of names of all parent scopes, which is quite a lot. However, if someone uses varying scope names this can really pollute the interned pool. I think it would be nicer to implement scoping mechanism in a trie-like approach, where scopes build up a tree (with shared_ptrs to parent nodes) with names at each level, and Nodes only point to their node in the scope tree.", "in_reply_to_id": 143320650}