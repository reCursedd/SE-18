{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/374019828", "html_url": "https://github.com/pytorch/pytorch/pull/5585#issuecomment-374019828", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/5585", "id": 374019828, "node_id": "MDEyOklzc3VlQ29tbWVudDM3NDAxOTgyOA==", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "created_at": "2018-03-18T17:29:09Z", "updated_at": "2018-03-18T17:29:09Z", "author_association": "MEMBER", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=9998726\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/peterjc123\">@peterjc123</a> thanks a lot for your detailed write up. This states the problem very clearly.</p>\n<p>Still, this reassures me that I understood what you said before correctly, and I stand by my hypothesis. I agree that the current behavior (of closing <em>only when refcount</em> reaches zero) is incorrect! My only point is that what you wrote in this patch is unnecessary and could be greatly simplified. The reason <code>THMapAllocator</code> exists is exactly because the Linux kernel doesn't provide the same refcounting mechanism for shared memory objects that Windows kernel does. However, this means that using this allocator is pointless on Windows, and it could have been safely replaced with the regular <code>THMapAllocator</code>!</p>\n<p>I still haven't seen any points against this in your argumentation. I'm not a Windows expert so there might still be some caveats I'm unaware of, but if this is the case then please let me know!</p>", "body_text": "@peterjc123 thanks a lot for your detailed write up. This states the problem very clearly.\nStill, this reassures me that I understood what you said before correctly, and I stand by my hypothesis. I agree that the current behavior (of closing only when refcount reaches zero) is incorrect! My only point is that what you wrote in this patch is unnecessary and could be greatly simplified. The reason THMapAllocator exists is exactly because the Linux kernel doesn't provide the same refcounting mechanism for shared memory objects that Windows kernel does. However, this means that using this allocator is pointless on Windows, and it could have been safely replaced with the regular THMapAllocator!\nI still haven't seen any points against this in your argumentation. I'm not a Windows expert so there might still be some caveats I'm unaware of, but if this is the case then please let me know!", "body": "@peterjc123 thanks a lot for your detailed write up. This states the problem very clearly.\r\n\r\nStill, this reassures me that I understood what you said before correctly, and I stand by my hypothesis. I agree that the current behavior (of closing *only when refcount* reaches zero) is incorrect! My only point is that what you wrote in this patch is unnecessary and could be greatly simplified. The reason `THMapAllocator` exists is exactly because the Linux kernel doesn't provide the same refcounting mechanism for shared memory objects that Windows kernel does. However, this means that using this allocator is pointless on Windows, and it could have been safely replaced with the regular `THMapAllocator`!\r\n\r\nI still haven't seen any points against this in your argumentation. I'm not a Windows expert so there might still be some caveats I'm unaware of, but if this is the case then please let me know!"}