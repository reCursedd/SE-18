{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/173735254", "pull_request_review_id": 102969376, "id": 173735254, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MzczNTI1NA==", "diff_hunk": "@@ -126,11 +137,125 @@ ptrdiff_t THMapAllocatorContext_size(THMapAllocatorContext *ctx)\n \n void THMapAllocatorContext_free(THMapAllocatorContext *ctx)\n {\n-  if (ctx->filename != unknown_filename)\n+  if (ctx->filename != unknown_filename) {\n     THFree(ctx->filename);\n+#ifdef _WIN32\n+    THFree(ctx->eventname);\n+#endif\n+  }\n   THFree(ctx);\n }\n \n+#ifdef _WIN32\n+typedef struct {\n+  HANDLE event[MAXIMUM_WAIT_OBJECTS];\n+  HANDLE handle[MAXIMUM_WAIT_OBJECTS];\n+  void *data[MAXIMUM_WAIT_OBJECTS];\n+  int nCount;\n+  CRITICAL_SECTION* CriticalSection;\n+  HANDLE event_process;\n+} ReleaseContextList;\n+static ReleaseContextList* context_list;\n+static void AddToList(ReleaseContextList* context_list, HANDLE event, HANDLE handle, void* data) {\n+  EnterCriticalSection(context_list->CriticalSection);\n+\n+  context_list->event[context_list->nCount] = event;\n+  context_list->handle[context_list->nCount] = handle;\n+  context_list->data[context_list->nCount] = data;\n+\n+  THAtomicIncrementRef(&context_list->nCount);\n+  LeaveCriticalSection(context_list->CriticalSection);\n+}\n+static void RemoveFromList(int index, ReleaseContextList* context_list) {\n+  EnterCriticalSection(context_list->CriticalSection);\n+  if (context_list->nCount != 1) {\n+    context_list->event[index] = context_list->event[context_list->nCount - 1];\n+    context_list->handle[index] = context_list->handle[context_list->nCount - 1];\n+    context_list->data[index] = context_list->data[context_list->nCount - 1];\n+  }\n+\n+  context_list->event[context_list->nCount - 1] = INVALID_HANDLE_VALUE;\n+  context_list->handle[context_list->nCount - 1] = INVALID_HANDLE_VALUE;\n+  context_list->data[context_list->nCount - 1] = NULL;\n+\n+  THAtomicDecrementRef(&context_list->nCount);\n+  LeaveCriticalSection(context_list->CriticalSection);\n+}\n+static DWORD WINAPI WaitForReleaseHandle(LPVOID lpParam) {\n+  ReleaseContextList *context_list = (ReleaseContextList *)lpParam;\n+\n+  HANDLE event;\n+  HANDLE handle;\n+  HANDLE event_process;\n+  DWORD dwEvent;\n+  \n+  void *data;\n+\n+  event_process = context_list->event_process;\n+  \n+  WaitForSingleObject(event_process, INFINITE);\n+\n+  while (TRUE) {\n+    \n+    if (THAtomicGet(&context_list->nCount) == 0)\n+      break;\n+\n+    int nCount = THAtomicGet(&context_list->nCount);", "path": "aten/src/TH/THAllocator.c", "position": null, "original_position": 93, "commit_id": "1dfcd28a04e5a1db16da7894f2e2305a5bc41935", "original_commit_id": "daefbf3f441f4a1df015bd68ee01946af0754bb4", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "This looks dangerous. One thread might be in RemoveFromList, and it has already zeroed the handles in the array, but it hasn\u2019t decremented the counter yet. You read the value here, the other thread zeros the removed entry in the meantime, and you call Wait with an invalid handle", "created_at": "2018-03-12T09:37:25Z", "updated_at": "2018-11-23T15:40:36Z", "html_url": "https://github.com/pytorch/pytorch/pull/5585#discussion_r173735254", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/5585", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/173735254"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/5585#discussion_r173735254"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/5585"}}, "body_html": "<p>This looks dangerous. One thread might be in RemoveFromList, and it has already zeroed the handles in the array, but it hasn\u2019t decremented the counter yet. You read the value here, the other thread zeros the removed entry in the meantime, and you call Wait with an invalid handle</p>", "body_text": "This looks dangerous. One thread might be in RemoveFromList, and it has already zeroed the handles in the array, but it hasn\u2019t decremented the counter yet. You read the value here, the other thread zeros the removed entry in the meantime, and you call Wait with an invalid handle"}