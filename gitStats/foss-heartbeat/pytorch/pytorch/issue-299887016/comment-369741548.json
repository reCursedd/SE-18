{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/369741548", "html_url": "https://github.com/pytorch/pytorch/pull/5393#issuecomment-369741548", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/5393", "id": 369741548, "node_id": "MDEyOklzc3VlQ29tbWVudDM2OTc0MTU0OA==", "user": {"login": "SsnL", "id": 5674597, "node_id": "MDQ6VXNlcjU2NzQ1OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5674597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SsnL", "html_url": "https://github.com/SsnL", "followers_url": "https://api.github.com/users/SsnL/followers", "following_url": "https://api.github.com/users/SsnL/following{/other_user}", "gists_url": "https://api.github.com/users/SsnL/gists{/gist_id}", "starred_url": "https://api.github.com/users/SsnL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SsnL/subscriptions", "organizations_url": "https://api.github.com/users/SsnL/orgs", "repos_url": "https://api.github.com/users/SsnL/repos", "events_url": "https://api.github.com/users/SsnL/events{/privacy}", "received_events_url": "https://api.github.com/users/SsnL/received_events", "type": "User", "site_admin": false}, "created_at": "2018-03-01T21:45:22Z", "updated_at": "2018-03-02T05:09:18Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=5652049\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/zou3519\">@zou3519</a> can you review this when you have time? I moved some doc changes to other PR so it's shorter now. :) Basically, maths is:</p>\n<p>In forward: use QR factorization to get A=QR, then det(A) = det(Q) det(R). det(Q) is obtained by counting the number on nnz entries in tau (-1 if odd, and 1 if even). And det(R) is the product of diag(R).</p>\n<p>In backward: calculate a specific variant of SVD: A = USV^T, s.t. det(UV) = 1. So det(A) = det(S) = prod(diag(S)). Then use svd_backward to backprop the determinant as if it were calculated using this method.</p>", "body_text": "@zou3519 can you review this when you have time? I moved some doc changes to other PR so it's shorter now. :) Basically, maths is:\nIn forward: use QR factorization to get A=QR, then det(A) = det(Q) det(R). det(Q) is obtained by counting the number on nnz entries in tau (-1 if odd, and 1 if even). And det(R) is the product of diag(R).\nIn backward: calculate a specific variant of SVD: A = USV^T, s.t. det(UV) = 1. So det(A) = det(S) = prod(diag(S)). Then use svd_backward to backprop the determinant as if it were calculated using this method.", "body": "@zou3519 can you review this when you have time? I moved some doc changes to other PR so it's shorter now. :) Basically, maths is:\r\n\r\nIn forward: use QR factorization to get A=QR, then det(A) = det(Q) det(R). det(Q) is obtained by counting the number on nnz entries in tau (-1 if odd, and 1 if even). And det(R) is the product of diag(R).\r\n\r\nIn backward: calculate a specific variant of SVD: A = USV^T, s.t. det(UV) = 1. So det(A) = det(S) = prod(diag(S)). Then use svd_backward to backprop the determinant as if it were calculated using this method."}