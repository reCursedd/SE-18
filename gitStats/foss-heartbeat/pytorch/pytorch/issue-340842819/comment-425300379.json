{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/425300379", "html_url": "https://github.com/pytorch/pytorch/issues/9406#issuecomment-425300379", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/9406", "id": 425300379, "node_id": "MDEyOklzc3VlQ29tbWVudDQyNTMwMDM3OQ==", "user": {"login": "erikbrinkman", "id": 858926, "node_id": "MDQ6VXNlcjg1ODkyNg==", "avatar_url": "https://avatars1.githubusercontent.com/u/858926?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erikbrinkman", "html_url": "https://github.com/erikbrinkman", "followers_url": "https://api.github.com/users/erikbrinkman/followers", "following_url": "https://api.github.com/users/erikbrinkman/following{/other_user}", "gists_url": "https://api.github.com/users/erikbrinkman/gists{/gist_id}", "starred_url": "https://api.github.com/users/erikbrinkman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erikbrinkman/subscriptions", "organizations_url": "https://api.github.com/users/erikbrinkman/orgs", "repos_url": "https://api.github.com/users/erikbrinkman/repos", "events_url": "https://api.github.com/users/erikbrinkman/events{/privacy}", "received_events_url": "https://api.github.com/users/erikbrinkman/received_events", "type": "User", "site_admin": false}, "created_at": "2018-09-28T02:25:05Z", "updated_at": "2018-09-28T02:25:05Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1041752\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/vadimkantorov\">@vadimkantorov</a></p>\n<ol>\n<li>It returns it in a condensed format. The python documentation, i.e. <code>help(torch.pdist)</code> states:</li>\n</ol>\n<pre><code>Computes the p-norm distance between every pair of row vectors in the input.\nThis is identical to the upper triangular portion, excluding the diagonal, of\n`torch.norm(input[:, None] - input, dim=2, p=p)`. This function will be faster\nif the rows are contiguous.\n</code></pre>\n<ol start=\"2\">\n<li>\n<p>This is certainly up for discussion, but to me this isn't the most helpful api. As noted in the help there are pretty easy ways to calculate this with the built in operators if you want the square form, e.g. <code>torch.pairwise_distances(X[..., None, :, :], X[..., None, :])</code>.</p>\n</li>\n<li>\n<p>I have been asked about a batch mode, and the implementation should probably be modified to account for it. I should get around to it soonish. However, it should be noted that if you want <code>B x N x D -&gt; B x N x N</code>, the line above will work.</p>\n</li>\n<li>\n<p>It should probably be explained better. At least, I should probably use <code>pairwise_distances</code> instead of <code>norm</code> in the example. However, part of these pains rest in a murky api. There hasn't really been a decision about how vector distances should be handled more generally. My guess is that the other distances will be added after ATen native functions get native support, and then there will be more parity in these functions.</p>\n</li>\n</ol>", "body_text": "@vadimkantorov\n\nIt returns it in a condensed format. The python documentation, i.e. help(torch.pdist) states:\n\nComputes the p-norm distance between every pair of row vectors in the input.\nThis is identical to the upper triangular portion, excluding the diagonal, of\n`torch.norm(input[:, None] - input, dim=2, p=p)`. This function will be faster\nif the rows are contiguous.\n\n\n\nThis is certainly up for discussion, but to me this isn't the most helpful api. As noted in the help there are pretty easy ways to calculate this with the built in operators if you want the square form, e.g. torch.pairwise_distances(X[..., None, :, :], X[..., None, :]).\n\n\nI have been asked about a batch mode, and the implementation should probably be modified to account for it. I should get around to it soonish. However, it should be noted that if you want B x N x D -> B x N x N, the line above will work.\n\n\nIt should probably be explained better. At least, I should probably use pairwise_distances instead of norm in the example. However, part of these pains rest in a murky api. There hasn't really been a decision about how vector distances should be handled more generally. My guess is that the other distances will be added after ATen native functions get native support, and then there will be more parity in these functions.", "body": "@vadimkantorov \r\n\r\n1. It returns it in a condensed format. The python documentation, i.e. `help(torch.pdist)` states:\r\n\r\n  ```\r\n  Computes the p-norm distance between every pair of row vectors in the input.\r\n  This is identical to the upper triangular portion, excluding the diagonal, of\r\n  `torch.norm(input[:, None] - input, dim=2, p=p)`. This function will be faster\r\n  if the rows are contiguous.\r\n  ```\r\n\r\n2. This is certainly up for discussion, but to me this isn't the most helpful api. As noted in the help there are pretty easy ways to calculate this with the built in operators if you want the square form, e.g. `torch.pairwise_distances(X[..., None, :, :], X[..., None, :])`.\r\n\r\n3. I have been asked about a batch mode, and the implementation should probably be modified to account for it. I should get around to it soonish. However, it should be noted that if you want `B x N x D -> B x N x N`, the line above will work.\r\n\r\n4. It should probably be explained better. At least, I should probably use `pairwise_distances` instead of `norm` in the example. However, part of these pains rest in a murky api. There hasn't really been a decision about how vector distances should be handled more generally. My guess is that the other distances will be added after ATen native functions get native support, and then there will be more parity in these functions."}