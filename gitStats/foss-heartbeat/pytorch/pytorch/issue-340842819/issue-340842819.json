{"url": "https://api.github.com/repos/pytorch/pytorch/issues/9406", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/9406/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/9406/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/9406/events", "html_url": "https://github.com/pytorch/pytorch/issues/9406", "id": 340842819, "node_id": "MDU6SXNzdWUzNDA4NDI4MTk=", "number": 9406, "title": "[pytorch] [feature request] Pairwise distances between all points in a set (a true pdist)", "user": {"login": "vadimkantorov", "id": 1041752, "node_id": "MDQ6VXNlcjEwNDE3NTI=", "avatar_url": "https://avatars0.githubusercontent.com/u/1041752?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vadimkantorov", "html_url": "https://github.com/vadimkantorov", "followers_url": "https://api.github.com/users/vadimkantorov/followers", "following_url": "https://api.github.com/users/vadimkantorov/following{/other_user}", "gists_url": "https://api.github.com/users/vadimkantorov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vadimkantorov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vadimkantorov/subscriptions", "organizations_url": "https://api.github.com/users/vadimkantorov/orgs", "repos_url": "https://api.github.com/users/vadimkantorov/repos", "events_url": "https://api.github.com/users/vadimkantorov/events{/privacy}", "received_events_url": "https://api.github.com/users/vadimkantorov/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 18, "created_at": "2018-07-13T00:35:11Z", "updated_at": "2018-10-04T20:08:46Z", "closed_at": null, "author_association": "NONE", "body_html": "<p>Currently <a href=\"https://pytorch.org/docs/stable/nn.html?highlight=pairwise#torch.nn.functional.pairwise_distance\" rel=\"nofollow\">F.pairwise_distance</a> and <a href=\"https://pytorch.org/docs/stable/nn.html?highlight=pairwise#torch.nn.functional.cosine_similarity\" rel=\"nofollow\">F.cosine_similarity</a> accept two sets of vectors of the same size and compute similarity between corresponding vectors.</p>\n<p>However, it's often useful to compute pairwise similarities or distances between all points of the set (in mini-batch metric learning scenarios), or between all possible pairs of two sets (e.g. to build a bi-partite weighted graph). It's trivial to write ad-hoc functions like this, but I believe it's also a useful and a frequent primitive (for euclidean, square euclidean, etc).</p>\n<p>One way to introduce this would be modifying <code>pairwise_distance</code> to allow other shapes and an argument for metric type.</p>\n<p>Such a function for example exists in SciPy: <a href=\"https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.distance.pdist.html\" rel=\"nofollow\">https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.distance.pdist.html</a> (computes all pairwise distances within one set of vectors)</p>\n<p>Also exists in MatLab: <a href=\"https://www.mathworks.com/help/stats/pdist.html\" rel=\"nofollow\">https://www.mathworks.com/help/stats/pdist.html</a></p>", "body_text": "Currently F.pairwise_distance and F.cosine_similarity accept two sets of vectors of the same size and compute similarity between corresponding vectors.\nHowever, it's often useful to compute pairwise similarities or distances between all points of the set (in mini-batch metric learning scenarios), or between all possible pairs of two sets (e.g. to build a bi-partite weighted graph). It's trivial to write ad-hoc functions like this, but I believe it's also a useful and a frequent primitive (for euclidean, square euclidean, etc).\nOne way to introduce this would be modifying pairwise_distance to allow other shapes and an argument for metric type.\nSuch a function for example exists in SciPy: https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.distance.pdist.html (computes all pairwise distances within one set of vectors)\nAlso exists in MatLab: https://www.mathworks.com/help/stats/pdist.html", "body": "Currently [F.pairwise_distance](https://pytorch.org/docs/stable/nn.html?highlight=pairwise#torch.nn.functional.pairwise_distance) and [F.cosine_similarity](https://pytorch.org/docs/stable/nn.html?highlight=pairwise#torch.nn.functional.cosine_similarity) accept two sets of vectors of the same size and compute similarity between corresponding vectors.\r\n\r\nHowever, it's often useful to compute pairwise similarities or distances between all points of the set (in mini-batch metric learning scenarios), or between all possible pairs of two sets (e.g. to build a bi-partite weighted graph). It's trivial to write ad-hoc functions like this, but I believe it's also a useful and a frequent primitive (for euclidean, square euclidean, etc).\r\n\r\nOne way to introduce this would be modifying `pairwise_distance` to allow other shapes and an argument for metric type.\r\n\r\nSuch a function for example exists in SciPy: https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.distance.pdist.html (computes all pairwise distances within one set of vectors)\r\n\r\nAlso exists in MatLab: https://www.mathworks.com/help/stats/pdist.html"}