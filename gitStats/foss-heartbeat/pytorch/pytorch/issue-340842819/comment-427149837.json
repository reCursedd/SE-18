{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/427149837", "html_url": "https://github.com/pytorch/pytorch/issues/9406#issuecomment-427149837", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/9406", "id": 427149837, "node_id": "MDEyOklzc3VlQ29tbWVudDQyNzE0OTgzNw==", "user": {"login": "erikbrinkman", "id": 858926, "node_id": "MDQ6VXNlcjg1ODkyNg==", "avatar_url": "https://avatars1.githubusercontent.com/u/858926?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erikbrinkman", "html_url": "https://github.com/erikbrinkman", "followers_url": "https://api.github.com/users/erikbrinkman/followers", "following_url": "https://api.github.com/users/erikbrinkman/following{/other_user}", "gists_url": "https://api.github.com/users/erikbrinkman/gists{/gist_id}", "starred_url": "https://api.github.com/users/erikbrinkman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erikbrinkman/subscriptions", "organizations_url": "https://api.github.com/users/erikbrinkman/orgs", "repos_url": "https://api.github.com/users/erikbrinkman/repos", "events_url": "https://api.github.com/users/erikbrinkman/events{/privacy}", "received_events_url": "https://api.github.com/users/erikbrinkman/received_events", "type": "User", "site_admin": false}, "created_at": "2018-10-04T19:59:29Z", "updated_at": "2018-10-04T19:59:29Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1041752\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/vadimkantorov\">@vadimkantorov</a> I'm more suggesting that if you want things in the full format, use norm and broadcasting. If you want the condensed version, use pdist. I don't see a reason to specifically offer a conversion.</p>\n<p>More generally all of the operations we've been talking about can be easily accomplished with the appropriate index functions that don't exist but soon might / can be generated somewhat easily.</p>\n<p>In your examples:</p>\n<div class=\"highlight highlight-source-python\"><pre>a, b <span class=\"pl-k\">=</span> np.triu_indices(<span class=\"pl-c1\">10</span>, <span class=\"pl-c1\">1</span>)\nW_c <span class=\"pl-k\">=</span> Y[a] <span class=\"pl-k\">*</span> Y[b]\n<span class=\"pl-k\">assert</span> torch.allclose(W_c, W_[a, b]) <span class=\"pl-c\"><span class=\"pl-c\">#</span> condensed format</span>\nW__ <span class=\"pl-k\">=</span> torch.zeros((<span class=\"pl-c1\">10</span>, <span class=\"pl-c1\">10</span>))\nW__[a, b] <span class=\"pl-k\">=</span> W_c\nW__[b, a] <span class=\"pl-k\">=</span> W_c\n<span class=\"pl-k\">assert</span> torch.allclose(W__, W_) <span class=\"pl-c\"><span class=\"pl-c\">#</span> square format</span></pre></div>", "body_text": "@vadimkantorov I'm more suggesting that if you want things in the full format, use norm and broadcasting. If you want the condensed version, use pdist. I don't see a reason to specifically offer a conversion.\nMore generally all of the operations we've been talking about can be easily accomplished with the appropriate index functions that don't exist but soon might / can be generated somewhat easily.\nIn your examples:\na, b = np.triu_indices(10, 1)\nW_c = Y[a] * Y[b]\nassert torch.allclose(W_c, W_[a, b]) # condensed format\nW__ = torch.zeros((10, 10))\nW__[a, b] = W_c\nW__[b, a] = W_c\nassert torch.allclose(W__, W_) # square format", "body": "@vadimkantorov I'm more suggesting that if you want things in the full format, use norm and broadcasting. If you want the condensed version, use pdist. I don't see a reason to specifically offer a conversion.\r\n\r\nMore generally all of the operations we've been talking about can be easily accomplished with the appropriate index functions that don't exist but soon might / can be generated somewhat easily.\r\n\r\nIn your examples:\r\n\r\n```python\r\na, b = np.triu_indices(10, 1)\r\nW_c = Y[a] * Y[b]\r\nassert torch.allclose(W_c, W_[a, b]) # condensed format\r\nW__ = torch.zeros((10, 10))\r\nW__[a, b] = W_c\r\nW__[b, a] = W_c\r\nassert torch.allclose(W__, W_) # square format\r\n```"}