{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/419773103", "html_url": "https://github.com/pytorch/pytorch/issues/9406#issuecomment-419773103", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/9406", "id": 419773103, "node_id": "MDEyOklzc3VlQ29tbWVudDQxOTc3MzEwMw==", "user": {"login": "erikbrinkman", "id": 858926, "node_id": "MDQ6VXNlcjg1ODkyNg==", "avatar_url": "https://avatars1.githubusercontent.com/u/858926?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erikbrinkman", "html_url": "https://github.com/erikbrinkman", "followers_url": "https://api.github.com/users/erikbrinkman/followers", "following_url": "https://api.github.com/users/erikbrinkman/following{/other_user}", "gists_url": "https://api.github.com/users/erikbrinkman/gists{/gist_id}", "starred_url": "https://api.github.com/users/erikbrinkman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erikbrinkman/subscriptions", "organizations_url": "https://api.github.com/users/erikbrinkman/orgs", "repos_url": "https://api.github.com/users/erikbrinkman/repos", "events_url": "https://api.github.com/users/erikbrinkman/events{/privacy}", "received_events_url": "https://api.github.com/users/erikbrinkman/received_events", "type": "User", "site_admin": false}, "created_at": "2018-09-10T02:54:49Z", "updated_at": "2018-09-10T02:54:49Z", "author_association": "CONTRIBUTOR", "body_html": "<p>I'm not sure I understand all of the discussion about what an appropriate function should look like, but I just submitted a bunch of diffs that essentially add a native pdist implementation for arbitrary p norm distances. It shouldn't be too difficult to add any other set of arbitrary distances, but we opted out of it because it was unclear how best to have a native function handle the switch. As of writing, native functions don't support enums, and the pythonic way to do this would be strings which is supported but may not be the preferred method here.</p>\n<p>For the case of all possible combinations, between two sets of vectors, that can be achieved with pairwise_distance:</p>\n<pre><code>x, y = torch.randn(...), torch.randn(...)\ntorch.pairwise_distance(x[:, None], y)\n</code></pre>\n<p>Assuming pairwise handles broadcasting appropriately, then this should be about as efficient as one could hope.</p>", "body_text": "I'm not sure I understand all of the discussion about what an appropriate function should look like, but I just submitted a bunch of diffs that essentially add a native pdist implementation for arbitrary p norm distances. It shouldn't be too difficult to add any other set of arbitrary distances, but we opted out of it because it was unclear how best to have a native function handle the switch. As of writing, native functions don't support enums, and the pythonic way to do this would be strings which is supported but may not be the preferred method here.\nFor the case of all possible combinations, between two sets of vectors, that can be achieved with pairwise_distance:\nx, y = torch.randn(...), torch.randn(...)\ntorch.pairwise_distance(x[:, None], y)\n\nAssuming pairwise handles broadcasting appropriately, then this should be about as efficient as one could hope.", "body": "I'm not sure I understand all of the discussion about what an appropriate function should look like, but I just submitted a bunch of diffs that essentially add a native pdist implementation for arbitrary p norm distances. It shouldn't be too difficult to add any other set of arbitrary distances, but we opted out of it because it was unclear how best to have a native function handle the switch. As of writing, native functions don't support enums, and the pythonic way to do this would be strings which is supported but may not be the preferred method here.\r\n\r\nFor the case of all possible combinations, between two sets of vectors, that can be achieved with pairwise_distance:\r\n```\r\nx, y = torch.randn(...), torch.randn(...)\r\ntorch.pairwise_distance(x[:, None], y)\r\n```\r\nAssuming pairwise handles broadcasting appropriately, then this should be about as efficient as one could hope."}