{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/409334350", "html_url": "https://github.com/pytorch/pytorch/issues/9406#issuecomment-409334350", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/9406", "id": 409334350, "node_id": "MDEyOklzc3VlQ29tbWVudDQwOTMzNDM1MA==", "user": {"login": "vadimkantorov", "id": 1041752, "node_id": "MDQ6VXNlcjEwNDE3NTI=", "avatar_url": "https://avatars0.githubusercontent.com/u/1041752?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vadimkantorov", "html_url": "https://github.com/vadimkantorov", "followers_url": "https://api.github.com/users/vadimkantorov/followers", "following_url": "https://api.github.com/users/vadimkantorov/following{/other_user}", "gists_url": "https://api.github.com/users/vadimkantorov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vadimkantorov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vadimkantorov/subscriptions", "organizations_url": "https://api.github.com/users/vadimkantorov/orgs", "repos_url": "https://api.github.com/users/vadimkantorov/repos", "events_url": "https://api.github.com/users/vadimkantorov/events{/privacy}", "received_events_url": "https://api.github.com/users/vadimkantorov/received_events", "type": "User", "site_admin": false}, "created_at": "2018-07-31T19:09:46Z", "updated_at": "2018-07-31T19:12:27Z", "author_association": "NONE", "body_html": "<p>One thing to keep in mind is that if <code>pdist = lambda A, B: torch.sqrt(A.pow(2).sum(1, keepdim = True) - 2 * torch.mm(A, B.t()) + B.pow(2).sum(1, keepdim = True).t())</code> is used for Eucldiean distance, the values can get a tad negative, so clamping may be required (which is not free unfortunately if done from python).</p>", "body_text": "One thing to keep in mind is that if pdist = lambda A, B: torch.sqrt(A.pow(2).sum(1, keepdim = True) - 2 * torch.mm(A, B.t()) + B.pow(2).sum(1, keepdim = True).t()) is used for Eucldiean distance, the values can get a tad negative, so clamping may be required (which is not free unfortunately if done from python).", "body": "One thing to keep in mind is that if `pdist = lambda A, B: torch.sqrt(A.pow(2).sum(1, keepdim = True) - 2 * torch.mm(A, B.t()) + B.pow(2).sum(1, keepdim = True).t())` is used for Eucldiean distance, the values can get a tad negative, so clamping may be required (which is not free unfortunately if done from python)."}