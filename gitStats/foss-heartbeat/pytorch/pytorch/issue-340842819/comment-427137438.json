{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/427137438", "html_url": "https://github.com/pytorch/pytorch/issues/9406#issuecomment-427137438", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/9406", "id": 427137438, "node_id": "MDEyOklzc3VlQ29tbWVudDQyNzEzNzQzOA==", "user": {"login": "vadimkantorov", "id": 1041752, "node_id": "MDQ6VXNlcjEwNDE3NTI=", "avatar_url": "https://avatars0.githubusercontent.com/u/1041752?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vadimkantorov", "html_url": "https://github.com/vadimkantorov", "followers_url": "https://api.github.com/users/vadimkantorov/followers", "following_url": "https://api.github.com/users/vadimkantorov/following{/other_user}", "gists_url": "https://api.github.com/users/vadimkantorov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vadimkantorov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vadimkantorov/subscriptions", "organizations_url": "https://api.github.com/users/vadimkantorov/orgs", "repos_url": "https://api.github.com/users/vadimkantorov/repos", "events_url": "https://api.github.com/users/vadimkantorov/events{/privacy}", "received_events_url": "https://api.github.com/users/vadimkantorov/received_events", "type": "User", "site_admin": false}, "created_at": "2018-10-04T19:16:12Z", "updated_at": "2018-10-04T19:24:45Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=858926\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/erikbrinkman\">@erikbrinkman</a> It is, of course, possible to make masks or weights in condensed format, but debugging in full format is easier IMO. If I understand well, both numpy and torch triu/tril still work in full format.</p>\n<p>The scipy utility to convert to and from condensed format is <a href=\"https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.distance.squareform.html#scipy.spatial.distance.squareform\" rel=\"nofollow\">scipy.spatial.distance.squareform</a> (original <a href=\"https://www.mathworks.com/help/stats/squareform.html\" rel=\"nofollow\">matlab</a> one)</p>\n<p>E.g. one can have a class label vector, and weight mask in full format are computed as:</p>\n<div class=\"highlight highlight-source-python\"><pre>Y <span class=\"pl-k\">=</span> torch.bernoulli(torch.ones(<span class=\"pl-c1\">10</span>) <span class=\"pl-k\">*</span> <span class=\"pl-c1\">0.5</span>)\nW_ <span class=\"pl-k\">=</span> torch.ger(Y, Y)\nW <span class=\"pl-k\">=</span> W_ <span class=\"pl-k\">*</span> weight_pos_pair <span class=\"pl-k\">+</span> (<span class=\"pl-c1\">1</span> <span class=\"pl-k\">-</span> W_) <span class=\"pl-k\">*</span> weight_neg_pair</pre></div>\n<p>Or if one for every example has many class labels, then positive and negative pairs can be computed as <code>torch.mm(Y, Y.t()) &gt; 0</code></p>\n<p>I mean, when working with small data or small batch sizes, it can be quite convenient to work with full format regardless of inefficiency and benefit from other linear algebra ops already implemented (such as torch.ger and torch.mm).</p>", "body_text": "@erikbrinkman It is, of course, possible to make masks or weights in condensed format, but debugging in full format is easier IMO. If I understand well, both numpy and torch triu/tril still work in full format.\nThe scipy utility to convert to and from condensed format is scipy.spatial.distance.squareform (original matlab one)\nE.g. one can have a class label vector, and weight mask in full format are computed as:\nY = torch.bernoulli(torch.ones(10) * 0.5)\nW_ = torch.ger(Y, Y)\nW = W_ * weight_pos_pair + (1 - W_) * weight_neg_pair\nOr if one for every example has many class labels, then positive and negative pairs can be computed as torch.mm(Y, Y.t()) > 0\nI mean, when working with small data or small batch sizes, it can be quite convenient to work with full format regardless of inefficiency and benefit from other linear algebra ops already implemented (such as torch.ger and torch.mm).", "body": "@erikbrinkman It is, of course, possible to make masks or weights in condensed format, but debugging in full format is easier IMO. If I understand well, both numpy and torch triu/tril still work in full format.\r\n\r\nThe scipy utility to convert to and from condensed format is [scipy.spatial.distance.squareform](https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.distance.squareform.html#scipy.spatial.distance.squareform) (original [matlab](https://www.mathworks.com/help/stats/squareform.html) one)\r\n\r\nE.g. one can have a class label vector, and weight mask in full format are computed as:\r\n```python\r\nY = torch.bernoulli(torch.ones(10) * 0.5)\r\nW_ = torch.ger(Y, Y)\r\nW = W_ * weight_pos_pair + (1 - W_) * weight_neg_pair\r\n```\r\n\r\nOr if one for every example has many class labels, then positive and negative pairs can be computed as `torch.mm(Y, Y.t()) > 0`\r\n\r\nI mean, when working with small data or small batch sizes, it can be quite convenient to work with full format regardless of inefficiency and benefit from other linear algebra ops already implemented (such as torch.ger and torch.mm)."}