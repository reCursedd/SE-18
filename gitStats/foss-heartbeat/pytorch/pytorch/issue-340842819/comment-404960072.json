{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/404960072", "html_url": "https://github.com/pytorch/pytorch/issues/9406#issuecomment-404960072", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/9406", "id": 404960072, "node_id": "MDEyOklzc3VlQ29tbWVudDQwNDk2MDA3Mg==", "user": {"login": "vadimkantorov", "id": 1041752, "node_id": "MDQ6VXNlcjEwNDE3NTI=", "avatar_url": "https://avatars0.githubusercontent.com/u/1041752?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vadimkantorov", "html_url": "https://github.com/vadimkantorov", "followers_url": "https://api.github.com/users/vadimkantorov/followers", "following_url": "https://api.github.com/users/vadimkantorov/following{/other_user}", "gists_url": "https://api.github.com/users/vadimkantorov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vadimkantorov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vadimkantorov/subscriptions", "organizations_url": "https://api.github.com/users/vadimkantorov/orgs", "repos_url": "https://api.github.com/users/vadimkantorov/repos", "events_url": "https://api.github.com/users/vadimkantorov/events{/privacy}", "received_events_url": "https://api.github.com/users/vadimkantorov/received_events", "type": "User", "site_admin": false}, "created_at": "2018-07-13T21:34:52Z", "updated_at": "2018-07-13T21:36:46Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=13564\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ezyang\">@ezyang</a> <code>pdist</code> for two tensors is also often also useful, e.g. in case of matching sets of local descriptors in two images.</p>\n<p>If <code>pairwise_distance</code> is extended, can it be made sth like following?</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">pairwise_distance</span>(<span class=\"pl-smi\">A</span>, <span class=\"pl-smi\">B</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">None</span>):\n   B <span class=\"pl-k\">=</span> B <span class=\"pl-k\">if</span> B <span class=\"pl-k\">is</span> <span class=\"pl-k\">not</span> <span class=\"pl-c1\">None</span> <span class=\"pl-k\">else</span> A <span class=\"pl-c\"><span class=\"pl-c\">#</span> or better treat the cases separately to not duplicate computation if only one tensor is passed</span>\n   <span class=\"pl-c1\">...</span></pre></div>", "body_text": "@ezyang pdist for two tensors is also often also useful, e.g. in case of matching sets of local descriptors in two images.\nIf pairwise_distance is extended, can it be made sth like following?\ndef pairwise_distance(A, B = None):\n   B = B if B is not None else A # or better treat the cases separately to not duplicate computation if only one tensor is passed\n   ...", "body": "@ezyang `pdist` for two tensors is also often also useful, e.g. in case of matching sets of local descriptors in two images.\r\n\r\nIf `pairwise_distance` is extended, can it be made sth like following?\r\n```python\r\ndef pairwise_distance(A, B = None):\r\n   B = B if B is not None else A # or better treat the cases separately to not duplicate computation if only one tensor is passed\r\n   ...\r\n```"}