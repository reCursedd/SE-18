{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/404957159", "html_url": "https://github.com/pytorch/pytorch/issues/9406#issuecomment-404957159", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/9406", "id": 404957159, "node_id": "MDEyOklzc3VlQ29tbWVudDQwNDk1NzE1OQ==", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "created_at": "2018-07-13T21:20:35Z", "updated_at": "2018-07-13T21:20:35Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=17101234\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/lena-kashtelyan\">@lena-kashtelyan</a> has graciously agreed to implement this. Notes on how to implement this:</p>\n<ol>\n<li>Decide how you want the API to look. You won't be able to add extra arguments to pairwise distance to directly add support for this, since pdist should take a single tensor, not a pair of tensors. SciPy's <code>pdist</code> function may not be a bad idea to emulate, but many of the metrics it supports are not implemented in fused form by PyTorch, so getting support for all of the metric types is probably beyond a bootcamp task. Pairwise only supports p-norms, so it's a decent place to start.</li>\n<li>Write an implementation of <code>pdist</code>. You may choose to look at an existing implementation (e.g. in scipy) to get algorithmic ideas; or maybe first do a simple version that just calls the underlying norm n choose 2 times. There is plenty of opportunity for parallelism, which can give you a nontrivial speedup.</li>\n<li>Make your implementation available in PyTorch by adding it as a native function. Grep for <code>pairwise_distance</code> to see how it's done; also see the documentation at <a href=\"https://github.com/pytorch/pytorch/tree/master/aten/src/ATen/native\">https://github.com/pytorch/pytorch/tree/master/aten/src/ATen/native</a></li>\n<li>Now do it again for CUDA!</li>\n<li>If time allows, consider generalizing your code to support other metrics.</li>\n</ol>", "body_text": "@lena-kashtelyan has graciously agreed to implement this. Notes on how to implement this:\n\nDecide how you want the API to look. You won't be able to add extra arguments to pairwise distance to directly add support for this, since pdist should take a single tensor, not a pair of tensors. SciPy's pdist function may not be a bad idea to emulate, but many of the metrics it supports are not implemented in fused form by PyTorch, so getting support for all of the metric types is probably beyond a bootcamp task. Pairwise only supports p-norms, so it's a decent place to start.\nWrite an implementation of pdist. You may choose to look at an existing implementation (e.g. in scipy) to get algorithmic ideas; or maybe first do a simple version that just calls the underlying norm n choose 2 times. There is plenty of opportunity for parallelism, which can give you a nontrivial speedup.\nMake your implementation available in PyTorch by adding it as a native function. Grep for pairwise_distance to see how it's done; also see the documentation at https://github.com/pytorch/pytorch/tree/master/aten/src/ATen/native\nNow do it again for CUDA!\nIf time allows, consider generalizing your code to support other metrics.", "body": "@lena-kashtelyan has graciously agreed to implement this. Notes on how to implement this:\r\n\r\n1. Decide how you want the API to look. You won't be able to add extra arguments to pairwise distance to directly add support for this, since pdist should take a single tensor, not a pair of tensors. SciPy's `pdist` function may not be a bad idea to emulate, but many of the metrics it supports are not implemented in fused form by PyTorch, so getting support for all of the metric types is probably beyond a bootcamp task. Pairwise only supports p-norms, so it's a decent place to start.\r\n2. Write an implementation of `pdist`. You may choose to look at an existing implementation (e.g. in scipy) to get algorithmic ideas; or maybe first do a simple version that just calls the underlying norm n choose 2 times. There is plenty of opportunity for parallelism, which can give you a nontrivial speedup.\r\n3. Make your implementation available in PyTorch by adding it as a native function. Grep for `pairwise_distance` to see how it's done; also see the documentation at https://github.com/pytorch/pytorch/tree/master/aten/src/ATen/native\r\n4. Now do it again for CUDA!\r\n5. If time allows, consider generalizing your code to support other metrics."}