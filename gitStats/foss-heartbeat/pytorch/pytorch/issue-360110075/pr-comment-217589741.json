{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/217589741", "pull_request_review_id": 155339339, "id": 217589741, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNzU4OTc0MQ==", "diff_hunk": "@@ -17,28 +17,32 @@ const Tensor& TensorImpl::grad() const {\n   AT_ERROR(\"grad is not implemented for Tensor\");\n }\n \n-TensorImpl::TensorImpl(TensorTypeId type_id, ScalarType scalar_type, Allocator *allocator, bool is_variable)\n-    : TensorImpl({}, type_id, scalar_type, is_variable) {\n+namespace {\n+Storage createStorage_(TensorTypeId type_id, ScalarType scalar_type, Allocator *allocator) {\n   // UndefinedTensors and SparseTensors don't have storages.\n   if (type_id != UndefinedTensorId() && scalar_type != ScalarType::Undefined\n       && type_id != SparseCPUTensorId() && type_id != SparseCUDATensorId()) {\n-    storage_ = Storage(scalarTypeToTypeMeta(scalar_type), 0, allocator, true);\n+    return Storage(scalarTypeToTypeMeta(scalar_type), 0, allocator, true);\n+  } else {\n+    return Storage();\n   }\n }\n+}\n+\n+TensorImpl::TensorImpl(TensorTypeId type_id, ScalarType scalar_type, Allocator *allocator, bool is_variable)\n+    : TensorImpl(createStorage_(type_id, scalar_type, allocator), type_id, is_variable) {\n+}\n \n-TensorImpl::TensorImpl(Storage&& storage, TensorTypeId type_id, bool is_variable)\n-    : TensorImpl(std::move(storage), type_id, dataTypeToScalarType(storage.dtype().id()), is_variable) {}\n-\n-TensorImpl::TensorImpl(Storage&& storage, TensorTypeId type_id, ScalarType scalar_type, bool is_variable)\n-    : storage_(std::move(storage)),\n-      storage_offset_(0),\n-      sizes_{0},\n-      strides_{1},\n-      is_contiguous_(true),\n-      numel_(0),\n-      type_id_(type_id),\n-      scalar_type_(scalar_type),\n-      is_variable_(is_variable) {}\n+TensorImpl::TensorImpl(Storage storage, TensorTypeId type_id, bool is_variable)\n+    :storage_(std::move(storage)),\n+    storage_offset_(0),\n+    sizes_{0},\n+    strides_{1},\n+    is_contiguous_(true),\n+    numel_(0),\n+    type_id_(type_id),\n+    scalar_type_(storage_ ? dataTypeToScalarType(storage_.dtype().id()) : ScalarType::Undefined),", "path": "aten/src/ATen/core/TensorImpl.cpp", "position": 44, "original_position": 44, "commit_id": "be8419e1b89b659545b5f2d924fec55339d9d9b3", "original_commit_id": "be8419e1b89b659545b5f2d924fec55339d9d9b3", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "So... is referencing `storage_` actually valid here?", "created_at": "2018-09-14T03:00:04Z", "updated_at": "2018-11-23T15:51:21Z", "html_url": "https://github.com/pytorch/pytorch/pull/11677#discussion_r217589741", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/11677", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/217589741"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/11677#discussion_r217589741"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/11677"}}, "body_html": "<p>So... is referencing <code>storage_</code> actually valid here?</p>", "body_text": "So... is referencing storage_ actually valid here?"}