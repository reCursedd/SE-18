{"url": "https://api.github.com/repos/pytorch/pytorch/issues/6200", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/6200/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/6200/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/6200/events", "html_url": "https://github.com/pytorch/pytorch/pull/6200", "id": 310601123, "node_id": "MDExOlB1bGxSZXF1ZXN0MTc4OTI1NTUw", "number": 6200, "title": "Reduce flakiness of math tests in test_torch.py", "user": {"login": "colesbury", "id": 655866, "node_id": "MDQ6VXNlcjY1NTg2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/655866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colesbury", "html_url": "https://github.com/colesbury", "followers_url": "https://api.github.com/users/colesbury/followers", "following_url": "https://api.github.com/users/colesbury/following{/other_user}", "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions", "organizations_url": "https://api.github.com/users/colesbury/orgs", "repos_url": "https://api.github.com/users/colesbury/repos", "events_url": "https://api.github.com/users/colesbury/events{/privacy}", "received_events_url": "https://api.github.com/users/colesbury/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-04-02T20:32:19Z", "updated_at": "2018-11-23T15:41:31Z", "closed_at": "2018-04-03T17:51:47Z", "author_association": "MEMBER", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/6200", "html_url": "https://github.com/pytorch/pytorch/pull/6200", "diff_url": "https://github.com/pytorch/pytorch/pull/6200.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/6200.patch"}, "body_html": "<pre><code>    Reduce flakiness of math tests in test_torch.py\n\n    This compares the torch function against the reference math funciton\n    against a relative small set of inputs, including integers, extremes\n    of some common functions, zero, a few numbers from randn and a few\n    numbers near 1e6.\n\n    The idea here is not to be completely exhaustive, but rather quickly\n    expose the most common bugs. For exhaustive checks, we should evaluate\n    torch functions against all ~4e9 possible float32 value.\n\n    We compare the torch function evaluated against contiguous\n    and non-contiguous inputs and large vs. small tensors.\n\n    Also:\n\n      - Make torch.allclose work with nan and +/-inf\n      - Add torch.isclose (like numpy.isclose)\n      - Add torch.testing.assert_allclose (like\n        numpy.testing.assert_allclose)\n</code></pre>", "body_text": "Reduce flakiness of math tests in test_torch.py\n\n    This compares the torch function against the reference math funciton\n    against a relative small set of inputs, including integers, extremes\n    of some common functions, zero, a few numbers from randn and a few\n    numbers near 1e6.\n\n    The idea here is not to be completely exhaustive, but rather quickly\n    expose the most common bugs. For exhaustive checks, we should evaluate\n    torch functions against all ~4e9 possible float32 value.\n\n    We compare the torch function evaluated against contiguous\n    and non-contiguous inputs and large vs. small tensors.\n\n    Also:\n\n      - Make torch.allclose work with nan and +/-inf\n      - Add torch.isclose (like numpy.isclose)\n      - Add torch.testing.assert_allclose (like\n        numpy.testing.assert_allclose)", "body": "```\r\n    Reduce flakiness of math tests in test_torch.py\r\n\r\n    This compares the torch function against the reference math funciton\r\n    against a relative small set of inputs, including integers, extremes\r\n    of some common functions, zero, a few numbers from randn and a few\r\n    numbers near 1e6.\r\n\r\n    The idea here is not to be completely exhaustive, but rather quickly\r\n    expose the most common bugs. For exhaustive checks, we should evaluate\r\n    torch functions against all ~4e9 possible float32 value.\r\n\r\n    We compare the torch function evaluated against contiguous\r\n    and non-contiguous inputs and large vs. small tensors.\r\n\r\n    Also:\r\n\r\n      - Make torch.allclose work with nan and +/-inf\r\n      - Add torch.isclose (like numpy.isclose)\r\n      - Add torch.testing.assert_allclose (like\r\n        numpy.testing.assert_allclose)\r\n```"}