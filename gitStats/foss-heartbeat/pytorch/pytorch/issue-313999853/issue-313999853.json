{"url": "https://api.github.com/repos/pytorch/pytorch/issues/6582", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/6582/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/6582/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/6582/events", "html_url": "https://github.com/pytorch/pytorch/pull/6582", "id": 313999853, "node_id": "MDExOlB1bGxSZXF1ZXN0MTgxNDA4NzU1", "number": 6582, "title": "Add autograd API to at::Tensor", "user": {"login": "goldsborough", "id": 6429851, "node_id": "MDQ6VXNlcjY0Mjk4NTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/6429851?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goldsborough", "html_url": "https://github.com/goldsborough", "followers_url": "https://api.github.com/users/goldsborough/followers", "following_url": "https://api.github.com/users/goldsborough/following{/other_user}", "gists_url": "https://api.github.com/users/goldsborough/gists{/gist_id}", "starred_url": "https://api.github.com/users/goldsborough/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goldsborough/subscriptions", "organizations_url": "https://api.github.com/users/goldsborough/orgs", "repos_url": "https://api.github.com/users/goldsborough/repos", "events_url": "https://api.github.com/users/goldsborough/events{/privacy}", "received_events_url": "https://api.github.com/users/goldsborough/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 21, "created_at": "2018-04-13T07:39:56Z", "updated_at": "2018-11-23T15:42:40Z", "closed_at": "2018-04-28T19:54:06Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/6582", "html_url": "https://github.com/pytorch/pytorch/pull/6582", "diff_url": "https://github.com/pytorch/pytorch/pull/6582.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/6582.patch"}, "body_html": "<p>This PR adds a basic autograd API to <code>at::Tensor</code>, and implements it for <code>Variable</code>. This API consists of:</p>\n<ul>\n<li><code>void set_requires_grad(bool)</code>,</li>\n<li><code>bool requires_grad() const</code></li>\n<li><code>Tensor&amp; grad()</code></li>\n<li><code>const Tensor&amp; grad() const</code></li>\n<li><code>Tensor detach() const</code></li>\n<li><code>void detach_()</code></li>\n</ul>\n<p>It does this in three steps:</p>\n<ol>\n<li>Adds these functions as virtual methods to <code>TensorImpl</code>, and makes them throw exceptions when called,</li>\n<li>Implements these functions in <code>VariableImpl</code>, mostly moving code from <code>Variable</code> into <code>VariableImpl</code></li>\n<li>Adds the methods to <code>Tensor</code> such that <code>Tensor::requires_grad</code> calls <code>pImpl-&gt;requires_grad()</code></li>\n<li>Solves all the problems that arise along the way.</li>\n</ol>\n<p>One extra thing: In Python, <code>module.cuda()</code> works by changing the data and type underneath <code>Variable</code>'s feet (i.e. changing the underlying tensor data), so that references to <code>Variable</code> are not invalidated. The same is required in C++, so as part of this autograd API I have implemented <code>at::detail::set_data(Tensor&amp; tensor, Tensor new_data)</code>, which assigns <code>new_data</code> to <code>tensor.data()</code> (<code>tensor</code> is here actually a <code>Variable</code>) and changes the type of the variable (<code>tensor</code>). To avoid <code>set_data</code> being part of the public API of <code>at::Tensor</code>, I made it a free friend function in the  <code>at::detail</code> namespace. That should hide it well. See the change in <code>torch/csrc/autograd/python_variable.cpp</code> for how this simplifies the code.</p>\n<p>Because of name collisions in <code>VariableImpl</code>, e.g. between the <code>requires_grad</code> function and the <code>requires_grad</code> member variable, I had to rename some members (4 or 5) of <code>VariableImpl</code> to give them trailing underscores. For consistency, I then added trailing underscores to all member variables. This creates a little noise in this PR -- I'm sorry. I can revert those changes for now if it's too annoying to review.</p>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=655866\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/colesbury\">@colesbury</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=4583066\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/apaszke\">@apaszke</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=13564\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ezyang\">@ezyang</a></p>", "body_text": "This PR adds a basic autograd API to at::Tensor, and implements it for Variable. This API consists of:\n\nvoid set_requires_grad(bool),\nbool requires_grad() const\nTensor& grad()\nconst Tensor& grad() const\nTensor detach() const\nvoid detach_()\n\nIt does this in three steps:\n\nAdds these functions as virtual methods to TensorImpl, and makes them throw exceptions when called,\nImplements these functions in VariableImpl, mostly moving code from Variable into VariableImpl\nAdds the methods to Tensor such that Tensor::requires_grad calls pImpl->requires_grad()\nSolves all the problems that arise along the way.\n\nOne extra thing: In Python, module.cuda() works by changing the data and type underneath Variable's feet (i.e. changing the underlying tensor data), so that references to Variable are not invalidated. The same is required in C++, so as part of this autograd API I have implemented at::detail::set_data(Tensor& tensor, Tensor new_data), which assigns new_data to tensor.data() (tensor is here actually a Variable) and changes the type of the variable (tensor). To avoid set_data being part of the public API of at::Tensor, I made it a free friend function in the  at::detail namespace. That should hide it well. See the change in torch/csrc/autograd/python_variable.cpp for how this simplifies the code.\nBecause of name collisions in VariableImpl, e.g. between the requires_grad function and the requires_grad member variable, I had to rename some members (4 or 5) of VariableImpl to give them trailing underscores. For consistency, I then added trailing underscores to all member variables. This creates a little noise in this PR -- I'm sorry. I can revert those changes for now if it's too annoying to review.\n@colesbury @apaszke @ezyang", "body": "This PR adds a basic autograd API to `at::Tensor`, and implements it for `Variable`. This API consists of:\r\n\r\n- `void set_requires_grad(bool)`,\r\n- `bool requires_grad() const`\r\n- `Tensor& grad()`\r\n- `const Tensor& grad() const`\r\n- `Tensor detach() const`\r\n- `void detach_()`\r\n\r\nIt does this in three steps:\r\n\r\n1. Adds these functions as virtual methods to `TensorImpl`, and makes them throw exceptions when called,\r\n2. Implements these functions in `VariableImpl`, mostly moving code from `Variable` into `VariableImpl`\r\n3. Adds the methods to `Tensor` such that `Tensor::requires_grad` calls `pImpl->requires_grad()`\r\n4. Solves all the problems that arise along the way.\r\n\r\nOne extra thing: In Python, `module.cuda()` works by changing the data and type underneath `Variable`'s feet (i.e. changing the underlying tensor data), so that references to `Variable` are not invalidated. The same is required in C++, so as part of this autograd API I have implemented `at::detail::set_data(Tensor& tensor, Tensor new_data)`, which assigns `new_data` to `tensor.data()` (`tensor` is here actually a `Variable`) and changes the type of the variable (`tensor`). To avoid `set_data` being part of the public API of `at::Tensor`, I made it a free friend function in the  `at::detail` namespace. That should hide it well. See the change in `torch/csrc/autograd/python_variable.cpp` for how this simplifies the code.\r\n\r\nBecause of name collisions in `VariableImpl`, e.g. between the `requires_grad` function and the `requires_grad` member variable, I had to rename some members (4 or 5) of `VariableImpl` to give them trailing underscores. For consistency, I then added trailing underscores to all member variables. This creates a little noise in this PR -- I'm sorry. I can revert those changes for now if it's too annoying to review.\r\n\r\n@colesbury @apaszke @ezyang "}