{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/435765244", "html_url": "https://github.com/pytorch/pytorch/issues/13448#issuecomment-435765244", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/13448", "id": 435765244, "node_id": "MDEyOklzc3VlQ29tbWVudDQzNTc2NTI0NA==", "user": {"login": "resistor", "id": 9796, "node_id": "MDQ6VXNlcjk3OTY=", "avatar_url": "https://avatars0.githubusercontent.com/u/9796?v=4", "gravatar_id": "", "url": "https://api.github.com/users/resistor", "html_url": "https://github.com/resistor", "followers_url": "https://api.github.com/users/resistor/followers", "following_url": "https://api.github.com/users/resistor/following{/other_user}", "gists_url": "https://api.github.com/users/resistor/gists{/gist_id}", "starred_url": "https://api.github.com/users/resistor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/resistor/subscriptions", "organizations_url": "https://api.github.com/users/resistor/orgs", "repos_url": "https://api.github.com/users/resistor/repos", "events_url": "https://api.github.com/users/resistor/events{/privacy}", "received_events_url": "https://api.github.com/users/resistor/received_events", "type": "User", "site_admin": false}, "created_at": "2018-11-05T06:11:02Z", "updated_at": "2018-11-05T06:11:02Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=655866\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/colesbury\">@colesbury</a> I think replacing the min/max operations with properly NaN-propagating ones might suffice?  Actually, just swapping the order of the operands would probably do the trick, exploiting the non-commutivity of SSE's min/max instructions.</p>\n<p>That said, I'm not certain offhand that this will correctly handle the other enumerated special cases of exp():</p>\n<blockquote>\n<p>exp(+-0) returns 1.<br>\nexp(-infinity) returns +0.<br>\nexp(+infinity) returns +infinity.</p>\n</blockquote>\n<p>I haven't traced or tested this function, but correct implementations I've seen in the past usually had to handle at least one of those with special case logic.</p>", "body_text": "@colesbury I think replacing the min/max operations with properly NaN-propagating ones might suffice?  Actually, just swapping the order of the operands would probably do the trick, exploiting the non-commutivity of SSE's min/max instructions.\nThat said, I'm not certain offhand that this will correctly handle the other enumerated special cases of exp():\n\nexp(+-0) returns 1.\nexp(-infinity) returns +0.\nexp(+infinity) returns +infinity.\n\nI haven't traced or tested this function, but correct implementations I've seen in the past usually had to handle at least one of those with special case logic.", "body": "@colesbury I think replacing the min/max operations with properly NaN-propagating ones might suffice?  Actually, just swapping the order of the operands would probably do the trick, exploiting the non-commutivity of SSE's min/max instructions.\r\n\r\nThat said, I'm not certain offhand that this will correctly handle the other enumerated special cases of exp():\r\n> exp(+-0) returns 1.\r\n> exp(-infinity) returns +0.\r\n> exp(+infinity) returns +infinity.\r\n\r\nI haven't traced or tested this function, but correct implementations I've seen in the past usually had to handle at least one of those with special case logic.\r\n"}