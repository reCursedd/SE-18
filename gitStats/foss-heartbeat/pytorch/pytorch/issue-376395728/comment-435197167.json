{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/435197167", "html_url": "https://github.com/pytorch/pytorch/issues/13448#issuecomment-435197167", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/13448", "id": 435197167, "node_id": "MDEyOklzc3VlQ29tbWVudDQzNTE5NzE2Nw==", "user": {"login": "colesbury", "id": 655866, "node_id": "MDQ6VXNlcjY1NTg2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/655866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colesbury", "html_url": "https://github.com/colesbury", "followers_url": "https://api.github.com/users/colesbury/followers", "following_url": "https://api.github.com/users/colesbury/following{/other_user}", "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions", "organizations_url": "https://api.github.com/users/colesbury/orgs", "repos_url": "https://api.github.com/users/colesbury/repos", "events_url": "https://api.github.com/users/colesbury/events{/privacy}", "received_events_url": "https://api.github.com/users/colesbury/received_events", "type": "User", "site_admin": false}, "created_at": "2018-11-01T21:41:48Z", "updated_at": "2018-11-01T21:42:25Z", "author_association": "MEMBER", "body_html": "<p>float32 uses <a href=\"https://github.com/pytorch/pytorch/blob/81438f12206fdbfb29953428255e5e9b2d4e6868/aten/src/ATen/native/cpu/avx_mathfun.h#L245\"><code>exp256_ps</code></a> to compute a vectorized exponential function. This doesn't propagate NaNs the same way as <code>std::exp()</code>.</p>\n<p>See <a href=\"http://gruntthepeon.free.fr/ssemath/\" rel=\"nofollow\">http://gruntthepeon.free.fr/ssemath/</a></p>\n<p>If someone can modify exp256_ps to propagate NaNs without too much overhead, that would be great.</p>", "body_text": "float32 uses exp256_ps to compute a vectorized exponential function. This doesn't propagate NaNs the same way as std::exp().\nSee http://gruntthepeon.free.fr/ssemath/\nIf someone can modify exp256_ps to propagate NaNs without too much overhead, that would be great.", "body": "float32 uses [`exp256_ps`](https://github.com/pytorch/pytorch/blob/81438f12206fdbfb29953428255e5e9b2d4e6868/aten/src/ATen/native/cpu/avx_mathfun.h#L245) to compute a vectorized exponential function. This doesn't propagate NaNs the same way as `std::exp()`.\r\n\r\nSee http://gruntthepeon.free.fr/ssemath/\r\n\r\nIf someone can modify exp256_ps to propagate NaNs without too much overhead, that would be great."}