{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/171543817", "pull_request_review_id": 100412930, "id": 171543817, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MTU0MzgxNw==", "diff_hunk": "@@ -0,0 +1,155 @@\n+import math\n+from numbers import Number\n+\n+import torch\n+from torch.autograd import Variable\n+from torch.distributions import constraints\n+from torch.distributions.distribution import Distribution\n+from torch.distributions.utils import broadcast_all, lazy_property\n+\n+\n+def _get_batch_shape(bmat, bvec):\n+    \"\"\"\n+    Given a batch of matrices and a batch of vectors, compute the combined `batch_shape`.\n+    \"\"\"\n+    try:\n+        vec_shape = torch._C._infer_size(bvec.shape, bmat.shape[:-1])\n+    except RuntimeError:\n+        raise ValueError(\"Incompatible batch shapes: vector {}, matrix {}\".format(bvec.shape, bmat.shape))\n+    return torch.Size(vec_shape[:-1])\n+\n+\n+def _batch_mv(bmat, bvec):\n+    r\"\"\"\n+    Performs a batched matrix-vector product, with compatible but different batch shapes.\n+\n+    This function takes as input `bmat`, containing :math:`n \\times n` matrices, and\n+    `bvec`, containing length :math:`n` vectors.\n+\n+    Both `bmat` and `bvec` may have any number of leading dimensions, which correspond\n+    to a batch shape. They are not necessarily assumed to have the same batch shape,\n+    just ones which can be broadcasted.\n+    \"\"\"\n+    n = bvec.size(-1)\n+    batch_shape = _get_batch_shape(bmat, bvec)\n+\n+    # to conform with `torch.bmm` interface, both bmat and bvec should have `.dim() == 3`\n+    bmat = bmat.expand(batch_shape + (n, n)).contiguous().view((-1, n, n))\n+    bvec = bvec.unsqueeze(-1).expand(batch_shape + (n, 1)).contiguous().view((-1, n, 1))\n+    return torch.bmm(bmat, bvec).squeeze(-1).view(batch_shape + (n,))\n+\n+\n+def _batch_potrf_lower(bmat):\n+    \"\"\"\n+    Applies a Cholesky decomposition to all matrices in a batch of arbitrary shape.\n+    \"\"\"\n+    n = bmat.size(-1)\n+    cholesky = torch.stack([C.potrf(upper=False) for C in bmat.unsqueeze(0).contiguous().view((-1, n, n))])\n+    return cholesky.view(bmat.shape)\n+\n+\n+def _batch_diag(bmat):\n+    \"\"\"\n+    Returns the diagonals of a batch of square matrices.\n+    \"\"\"\n+    return bmat.contiguous().view(bmat.shape[:-2] + (-1,))[..., ::bmat.size(-1) + 1]\n+\n+\n+def _batch_mahalanobis(L, x):\n+    r\"\"\"\n+    Computes the squared Mahalanobis distance :math:`\\mathbf{x}^\\top\\mathbf{M}^{-1}\\mathbf{x}`\n+    for a factored :math:`\\mathbf{M} = \\mathbf{L}\\mathbf{L}^\\top`.\n+\n+    Accepts batches for both L and x.\n+    \"\"\"\n+    # TODO: use `torch.potrs` or similar once a backwards pass is implemented.\n+    flat_L = L.unsqueeze(0).contiguous().view((-1,) + L.shape[-2:])\n+    L_inv = torch.stack([torch.inverse(Li.t()) for Li in flat_L]).view(L.shape)\n+    return (x.unsqueeze(-1) * L_inv).sum(-2).pow(2.0).sum(-1)\n+\n+\n+class MultivariateNormal(Distribution):\n+    r\"\"\"\n+    Creates a multivariate normal (also called Gaussian) distribution\n+    parameterized by a mean vector and a covariance matrix.\n+\n+    The multivariate normal distribution can be parameterized either\n+    in terms of a positive definite covariance matrix :math:`\\mathbf{\\Sigma}`\n+    or a lower-triangular matrix :math:`\\mathbf{L}` with positive-valued\n+    diagonal entries, such that\n+    :math:`\\mathbf{\\Sigma} = \\mathbf{L}\\mathbf{L}^\\top`. This triangular matrix\n+    can be obtained via e.g. Cholesky decomposition of the covariance.\n+\n+    Example:\n+\n+        >>> m = MultivariateNormal(torch.zeros(2), torch.eye(2))\n+        >>> m.sample()  # normally distributed with mean=`[0,0]` and covariance_matrix=`I`\n+        -0.2102\n+        -0.5429\n+        [torch.FloatTensor of size 2]\n+\n+    Args:\n+        loc (Tensor or Variable): mean of the distribution\n+        covariance_matrix (Tensor or Variable): positive-definite covariance matrix\n+        scale_tril (Tensor or Variable): lower-triangular factor of covariance, with positive-valued diagonal\n+\n+    Note:\n+        Only one of `covariance_matrix` or `scale_tril` can be specified.\n+\n+        Using `scale_tril` will be more efficient: all computations internally\n+        are based on `scale_tril`. If `covariance_matrix` is passed instead,\n+        this is only used to compute the corresponding lower triangular\n+        matrices.\n+    \"\"\"\n+    params = {'loc': constraints.real_vector,\n+              'covariance_matrix': constraints.positive_definite,\n+              'scale_tril': constraints.lower_cholesky}\n+    support = constraints.real\n+    has_rsample = True\n+\n+    def __init__(self, loc, covariance_matrix=None, scale_tril=None):\n+        event_shape = torch.Size(loc.shape[-1:])\n+        if (covariance_matrix is None) == (scale_tril is None):\n+            raise ValueError(\"Exactly one of covariance_matrix or scale_tril may be specified (but not both).\")\n+        if scale_tril is None:\n+            if covariance_matrix.dim() < 2:\n+                raise ValueError(\"covariance_matrix must be two-dimensional\")", "path": "torch/distributions/multivariate_normal.py", "position": null, "original_position": 116, "commit_id": "34e77b6002e95a3ff46320473772fb7c99479980", "original_commit_id": "401cf798fd7787eb71e05276e4a1b7e471eae667", "user": {"login": "tbrx", "id": 1396856, "node_id": "MDQ6VXNlcjEzOTY4NTY=", "avatar_url": "https://avatars0.githubusercontent.com/u/1396856?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tbrx", "html_url": "https://github.com/tbrx", "followers_url": "https://api.github.com/users/tbrx/followers", "following_url": "https://api.github.com/users/tbrx/following{/other_user}", "gists_url": "https://api.github.com/users/tbrx/gists{/gist_id}", "starred_url": "https://api.github.com/users/tbrx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tbrx/subscriptions", "organizations_url": "https://api.github.com/users/tbrx/orgs", "repos_url": "https://api.github.com/users/tbrx/repos", "events_url": "https://api.github.com/users/tbrx/events{/privacy}", "received_events_url": "https://api.github.com/users/tbrx/received_events", "type": "User", "site_admin": false}, "body": "Do you have a suggestion how we should word this? Tentatively updating to:\r\n\r\n\"scale_tril matrix must be two-dimensional, with optional leading batch dimensions\"", "created_at": "2018-03-01T12:30:14Z", "updated_at": "2018-11-23T15:40:12Z", "html_url": "https://github.com/pytorch/pytorch/pull/4950#discussion_r171543817", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4950", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/171543817"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/4950#discussion_r171543817"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4950"}}, "body_html": "<p>Do you have a suggestion how we should word this? Tentatively updating to:</p>\n<p>\"scale_tril matrix must be two-dimensional, with optional leading batch dimensions\"</p>", "body_text": "Do you have a suggestion how we should word this? Tentatively updating to:\n\"scale_tril matrix must be two-dimensional, with optional leading batch dimensions\"", "in_reply_to_id": 170647884}