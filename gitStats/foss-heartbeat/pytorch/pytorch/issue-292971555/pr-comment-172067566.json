{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/172067566", "pull_request_review_id": 101022442, "id": 172067566, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MjA2NzU2Ng==", "diff_hunk": "@@ -185,21 +188,46 @@ class _LowerTriangular(Constraint):\n     Constrain to lower-triangular square matrices.\n     \"\"\"\n     def check(self, value):\n-        return (torch.tril(value) == value).min(-1)[0].min(-1)[0]\n+        value_tril = batch_tril(value)\n+        return (value_tril == value).view(value.shape[:-2] + (-1,)).min(-1)[0]\n \n \n class _LowerCholesky(Constraint):\n     \"\"\"\n     Constrain to lower-triangular square matrices with positive diagonals.\n     \"\"\"\n     def check(self, value):\n+        value_tril = batch_tril(value)\n+        lower_triangular = (value_tril == value).view(value.shape[:-2] + (-1,)).min(-1)[0]\n+\n         n = value.size(-1)\n         diag_mask = torch.eye(n, n, out=value.new(n, n))\n-        lower_triangular = (torch.tril(value) == value).min(-1)[0].min(-1)[0]\n         positive_diagonal = (value * diag_mask > (diag_mask - 1)).min(-1)[0].min(-1)[0]\n         return lower_triangular & positive_diagonal\n \n \n+class _PositiveDefinite(Constraint):\n+    \"\"\"\n+    Constrain to positive-definite matrices.\n+    \"\"\"\n+    def check(self, value):\n+        matrix_shape = value.shape[-2:]\n+        batch_shape = value.unsqueeze(0).shape[:-2]\n+        # TODO: replace with batched linear algebra routine when one becomes available\n+        # note that `symeig()` returns eigenvalues in ascending order\n+        flattened_value = value.contiguous().view((-1,) + matrix_shape)\n+        return torch.stack([v.symeig()[0][:1] > 0.0 for v in flattened_value]).view(batch_shape)", "path": "torch/distributions/constraints.py", "position": 66, "original_position": 66, "commit_id": "34e77b6002e95a3ff46320473772fb7c99479980", "original_commit_id": "401cf798fd7787eb71e05276e4a1b7e471eae667", "user": {"login": "tbrx", "id": 1396856, "node_id": "MDQ6VXNlcjEzOTY4NTY=", "avatar_url": "https://avatars0.githubusercontent.com/u/1396856?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tbrx", "html_url": "https://github.com/tbrx", "followers_url": "https://api.github.com/users/tbrx/followers", "following_url": "https://api.github.com/users/tbrx/following{/other_user}", "gists_url": "https://api.github.com/users/tbrx/gists{/gist_id}", "starred_url": "https://api.github.com/users/tbrx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tbrx/subscriptions", "organizations_url": "https://api.github.com/users/tbrx/orgs", "repos_url": "https://api.github.com/users/tbrx/repos", "events_url": "https://api.github.com/users/tbrx/events{/privacy}", "received_events_url": "https://api.github.com/users/tbrx/received_events", "type": "User", "site_admin": false}, "body": "That matrix is not actually symmetric, so it should also fail this constraint check anyway. Probably we should add an explicit check that the matrix is symmetric as well \u2014 I hadn't thought of that (I had figured, incorrectly and without checking, that `torch.symeig` would barf if given an assymmetric matrix).", "created_at": "2018-03-04T22:31:10Z", "updated_at": "2018-11-23T15:40:21Z", "html_url": "https://github.com/pytorch/pytorch/pull/4950#discussion_r172067566", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4950", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/172067566"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/4950#discussion_r172067566"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4950"}}, "body_html": "<p>That matrix is not actually symmetric, so it should also fail this constraint check anyway. Probably we should add an explicit check that the matrix is symmetric as well \u2014 I hadn't thought of that (I had figured, incorrectly and without checking, that <code>torch.symeig</code> would barf if given an assymmetric matrix).</p>", "body_text": "That matrix is not actually symmetric, so it should also fail this constraint check anyway. Probably we should add an explicit check that the matrix is symmetric as well \u2014 I hadn't thought of that (I had figured, incorrectly and without checking, that torch.symeig would barf if given an assymmetric matrix).", "in_reply_to_id": 170649751}