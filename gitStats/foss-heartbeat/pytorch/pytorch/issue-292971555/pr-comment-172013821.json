{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/172013821", "pull_request_review_id": 100971994, "id": 172013821, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MjAxMzgyMQ==", "diff_hunk": "@@ -185,21 +188,46 @@ class _LowerTriangular(Constraint):\n     Constrain to lower-triangular square matrices.\n     \"\"\"\n     def check(self, value):\n-        return (torch.tril(value) == value).min(-1)[0].min(-1)[0]\n+        value_tril = batch_tril(value)\n+        return (value_tril == value).view(value.shape[:-2] + (-1,)).min(-1)[0]\n \n \n class _LowerCholesky(Constraint):\n     \"\"\"\n     Constrain to lower-triangular square matrices with positive diagonals.\n     \"\"\"\n     def check(self, value):\n+        value_tril = batch_tril(value)\n+        lower_triangular = (value_tril == value).view(value.shape[:-2] + (-1,)).min(-1)[0]\n+\n         n = value.size(-1)\n         diag_mask = torch.eye(n, n, out=value.new(n, n))\n-        lower_triangular = (torch.tril(value) == value).min(-1)[0].min(-1)[0]\n         positive_diagonal = (value * diag_mask > (diag_mask - 1)).min(-1)[0].min(-1)[0]\n         return lower_triangular & positive_diagonal\n \n \n+class _PositiveDefinite(Constraint):\n+    \"\"\"\n+    Constrain to positive-definite matrices.\n+    \"\"\"\n+    def check(self, value):\n+        matrix_shape = value.shape[-2:]\n+        batch_shape = value.unsqueeze(0).shape[:-2]\n+        # TODO: replace with batched linear algebra routine when one becomes available\n+        # note that `symeig()` returns eigenvalues in ascending order\n+        flattened_value = value.contiguous().view((-1,) + matrix_shape)\n+        return torch.stack([v.symeig()[0][:1] > 0.0 for v in flattened_value]).view(batch_shape)", "path": "torch/distributions/constraints.py", "position": 66, "original_position": 66, "commit_id": "34e77b6002e95a3ff46320473772fb7c99479980", "original_commit_id": "401cf798fd7787eb71e05276e4a1b7e471eae667", "user": {"login": "vishwakftw", "id": 23639302, "node_id": "MDQ6VXNlcjIzNjM5MzAy", "avatar_url": "https://avatars2.githubusercontent.com/u/23639302?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vishwakftw", "html_url": "https://github.com/vishwakftw", "followers_url": "https://api.github.com/users/vishwakftw/followers", "following_url": "https://api.github.com/users/vishwakftw/following{/other_user}", "gists_url": "https://api.github.com/users/vishwakftw/gists{/gist_id}", "starred_url": "https://api.github.com/users/vishwakftw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vishwakftw/subscriptions", "organizations_url": "https://api.github.com/users/vishwakftw/orgs", "repos_url": "https://api.github.com/users/vishwakftw/repos", "events_url": "https://api.github.com/users/vishwakftw/events{/privacy}", "received_events_url": "https://api.github.com/users/vishwakftw/received_events", "type": "User", "site_admin": false}, "body": "This is an [example](https://drive.google.com/file/d/1NyyMX7YJz4nJlNxOzyrO6mAZVwB2gVwv/view?usp=sharing) (dumped using `numpy.savetxt`, so you could load using `numpy.loadtxt` or `numpy.genfromtxt`). These are the top 10 eigenvalues for that matrix:\r\n```python\r\n9.96764812e-01 +0.00000000e+00j,\r\n1.42575611e-10 +0.00000000e+00j,\r\n-1.05092455e-10 +8.56060079e-11j,\r\n-1.05092455e-10 -8.56060079e-11j,\r\n-8.01922082e-11 +5.76392912e-11j,\r\n-8.01922082e-11 -5.76392912e-11j,\r\n9.43347083e-11 +1.54831723e-11j,\r\n9.43347083e-11 -1.54831723e-11j,\r\n7.89421910e-11 +1.71497236e-11j,\r\n7.89421910e-11 -1.71497236e-11j\r\n```", "created_at": "2018-03-03T11:00:38Z", "updated_at": "2018-11-23T15:40:19Z", "html_url": "https://github.com/pytorch/pytorch/pull/4950#discussion_r172013821", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4950", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/172013821"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/4950#discussion_r172013821"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4950"}}, "body_html": "<p>This is an <a href=\"https://drive.google.com/file/d/1NyyMX7YJz4nJlNxOzyrO6mAZVwB2gVwv/view?usp=sharing\" rel=\"nofollow\">example</a> (dumped using <code>numpy.savetxt</code>, so you could load using <code>numpy.loadtxt</code> or <code>numpy.genfromtxt</code>). These are the top 10 eigenvalues for that matrix:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-c1\">9.96764812e-01</span> <span class=\"pl-k\">+</span><span class=\"pl-c1\">0.00000000e+00<span class=\"pl-k\">j</span></span>,\n<span class=\"pl-c1\">1.42575611e-10</span> <span class=\"pl-k\">+</span><span class=\"pl-c1\">0.00000000e+00<span class=\"pl-k\">j</span></span>,\n<span class=\"pl-k\">-</span><span class=\"pl-c1\">1.05092455e-10</span> <span class=\"pl-k\">+</span><span class=\"pl-c1\">8.56060079e-11<span class=\"pl-k\">j</span></span>,\n<span class=\"pl-k\">-</span><span class=\"pl-c1\">1.05092455e-10</span> <span class=\"pl-k\">-</span><span class=\"pl-c1\">8.56060079e-11<span class=\"pl-k\">j</span></span>,\n<span class=\"pl-k\">-</span><span class=\"pl-c1\">8.01922082e-11</span> <span class=\"pl-k\">+</span><span class=\"pl-c1\">5.76392912e-11<span class=\"pl-k\">j</span></span>,\n<span class=\"pl-k\">-</span><span class=\"pl-c1\">8.01922082e-11</span> <span class=\"pl-k\">-</span><span class=\"pl-c1\">5.76392912e-11<span class=\"pl-k\">j</span></span>,\n<span class=\"pl-c1\">9.43347083e-11</span> <span class=\"pl-k\">+</span><span class=\"pl-c1\">1.54831723e-11<span class=\"pl-k\">j</span></span>,\n<span class=\"pl-c1\">9.43347083e-11</span> <span class=\"pl-k\">-</span><span class=\"pl-c1\">1.54831723e-11<span class=\"pl-k\">j</span></span>,\n<span class=\"pl-c1\">7.89421910e-11</span> <span class=\"pl-k\">+</span><span class=\"pl-c1\">1.71497236e-11<span class=\"pl-k\">j</span></span>,\n<span class=\"pl-c1\">7.89421910e-11</span> <span class=\"pl-k\">-</span><span class=\"pl-c1\">1.71497236e-11<span class=\"pl-k\">j</span></span></pre></div>", "body_text": "This is an example (dumped using numpy.savetxt, so you could load using numpy.loadtxt or numpy.genfromtxt). These are the top 10 eigenvalues for that matrix:\n9.96764812e-01 +0.00000000e+00j,\n1.42575611e-10 +0.00000000e+00j,\n-1.05092455e-10 +8.56060079e-11j,\n-1.05092455e-10 -8.56060079e-11j,\n-8.01922082e-11 +5.76392912e-11j,\n-8.01922082e-11 -5.76392912e-11j,\n9.43347083e-11 +1.54831723e-11j,\n9.43347083e-11 -1.54831723e-11j,\n7.89421910e-11 +1.71497236e-11j,\n7.89421910e-11 -1.71497236e-11j", "in_reply_to_id": 170649751}