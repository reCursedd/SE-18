{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/165128727", "pull_request_review_id": 93012809, "id": 165128727, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NTEyODcyNw==", "diff_hunk": "@@ -185,21 +187,46 @@ class _LowerTriangular(Constraint):\n     Constrain to lower-triangular square matrices.\n     \"\"\"\n     def check(self, value):\n-        return (torch.tril(value) == value).min(-1)[0].min(-1)[0]\n+        masked_value = value * torch.tril(value.new(*value.shape[-2:]).fill_(1.0))\n+        return (masked_value == value).min(-1)[0].min(-1)[0]\n \n \n class _LowerCholesky(Constraint):\n     \"\"\"\n     Constrain to lower-triangular square matrices with positive diagonals.\n     \"\"\"\n     def check(self, value):\n+        masked_value = value * torch.tril(value.new(*value.shape[-2:]).fill_(1.0))\n+        lower_triangular = (masked_value == value).min(-1)[0].min(-1)[0]\n+\n         n = value.size(-1)\n         diag_mask = torch.eye(n, n, out=value.new(n, n))\n-        lower_triangular = (torch.tril(value) == value).min(-1)[0].min(-1)[0]\n         positive_diagonal = (value * diag_mask > (diag_mask - 1)).min(-1)[0].min(-1)[0]\n         return lower_triangular & positive_diagonal\n \n \n+class _PositiveDefinite(Constraint):\n+    \"\"\"\n+    Constrain to positive-definite matrices.\n+    \"\"\"\n+    def check(self, value):\n+        matrix_shape = value.shape[-2:]\n+        batch_shape = value.unsqueeze(0).shape[:-2]\n+        # TODO: replace with batched linear algebra routine when one becomes available\n+        # note that `symeig()` returns eigenvalues in ascending order\n+        flattened_value = value.contiguous().view((-1,) + matrix_shape)\n+        return torch.stack([v.symeig()[0][:1] > 0.0 for v in flattened_value]).view(batch_shape)\n+\n+\n+class _RealVector(Constraint):\n+    \"\"\"\n+    Constrain to real-valued vectors. This is the same as `constraints.real`,\n+    but additionally reduces across the `event_shape` dimension.\n+    \"\"\"\n+    def check(self, value):\n+        return (value == value).min(-1)[0]", "path": "torch/distributions/constraints.py", "position": null, "original_position": 54, "commit_id": "34e77b6002e95a3ff46320473772fb7c99479980", "original_commit_id": "6ad9b3e4e1015ae02c79425f45ea51ef28536cb2", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "nit: can you please add a comment that it fails for NaNs (it's not always obvious that `x == x` can ever be false)", "created_at": "2018-01-31T17:34:53Z", "updated_at": "2018-11-23T15:38:50Z", "html_url": "https://github.com/pytorch/pytorch/pull/4950#discussion_r165128727", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4950", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/165128727"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/4950#discussion_r165128727"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4950"}}, "body_html": "<p>nit: can you please add a comment that it fails for NaNs (it's not always obvious that <code>x == x</code> can ever be false)</p>", "body_text": "nit: can you please add a comment that it fails for NaNs (it's not always obvious that x == x can ever be false)"}