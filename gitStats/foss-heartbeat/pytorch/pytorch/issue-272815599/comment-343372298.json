{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/343372298", "html_url": "https://github.com/pytorch/pytorch/issues/3619#issuecomment-343372298", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/3619", "id": 343372298, "node_id": "MDEyOklzc3VlQ29tbWVudDM0MzM3MjI5OA==", "user": {"login": "zou3519", "id": 5652049, "node_id": "MDQ6VXNlcjU2NTIwNDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/5652049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zou3519", "html_url": "https://github.com/zou3519", "followers_url": "https://api.github.com/users/zou3519/followers", "following_url": "https://api.github.com/users/zou3519/following{/other_user}", "gists_url": "https://api.github.com/users/zou3519/gists{/gist_id}", "starred_url": "https://api.github.com/users/zou3519/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zou3519/subscriptions", "organizations_url": "https://api.github.com/users/zou3519/orgs", "repos_url": "https://api.github.com/users/zou3519/repos", "events_url": "https://api.github.com/users/zou3519/events{/privacy}", "received_events_url": "https://api.github.com/users/zou3519/received_events", "type": "User", "site_admin": false}, "created_at": "2017-11-10T04:32:06Z", "updated_at": "2017-11-10T04:32:06Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Yup it goes away with <code>torch.multiprocessing.set_start_method(\"spawn\")</code>.</p>\n<p>Also more minimal example:</p>\n<pre><code>import torch\nfrom torch.autograd import Variable\nimport torch.optim\n\ndef reproduce():\n    n_data = 1001\n    ndim = 100\n\n    x_input = Variable(torch.rand(n_data, ndim) * 2 - 1)  # if this is removed no hanging happens\n\n    n_init = 1\n    b = Variable(torch.randn(ndim, n_data))\n    A = Variable(torch.randn(ndim, ndim))\n\n    pool = torch.multiprocessing.Pool(n_init)\n    res = pool.apply_async(torch.gesv, args=(b, A))\n    return res.get()\n\nif __name__ == '__main__':\n    # torch.multiprocessing.set_start_method(\"spawn\") # when this is uncommented no hanging happens\n    print(reproduce())\n</code></pre>", "body_text": "Yup it goes away with torch.multiprocessing.set_start_method(\"spawn\").\nAlso more minimal example:\nimport torch\nfrom torch.autograd import Variable\nimport torch.optim\n\ndef reproduce():\n    n_data = 1001\n    ndim = 100\n\n    x_input = Variable(torch.rand(n_data, ndim) * 2 - 1)  # if this is removed no hanging happens\n\n    n_init = 1\n    b = Variable(torch.randn(ndim, n_data))\n    A = Variable(torch.randn(ndim, ndim))\n\n    pool = torch.multiprocessing.Pool(n_init)\n    res = pool.apply_async(torch.gesv, args=(b, A))\n    return res.get()\n\nif __name__ == '__main__':\n    # torch.multiprocessing.set_start_method(\"spawn\") # when this is uncommented no hanging happens\n    print(reproduce())", "body": "Yup it goes away with `torch.multiprocessing.set_start_method(\"spawn\")`.\r\n\r\nAlso more minimal example:\r\n```\r\nimport torch\r\nfrom torch.autograd import Variable\r\nimport torch.optim\r\n\r\ndef reproduce():\r\n    n_data = 1001\r\n    ndim = 100\r\n\r\n    x_input = Variable(torch.rand(n_data, ndim) * 2 - 1)  # if this is removed no hanging happens\r\n\r\n    n_init = 1\r\n    b = Variable(torch.randn(ndim, n_data))\r\n    A = Variable(torch.randn(ndim, ndim))\r\n\r\n    pool = torch.multiprocessing.Pool(n_init)\r\n    res = pool.apply_async(torch.gesv, args=(b, A))\r\n    return res.get()\r\n\r\nif __name__ == '__main__':\r\n    # torch.multiprocessing.set_start_method(\"spawn\") # when this is uncommented no hanging happens\r\n    print(reproduce())\r\n```"}