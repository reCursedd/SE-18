{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/181213569", "pull_request_review_id": 111782850, "id": 181213569, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MTIxMzU2OQ==", "diff_hunk": "@@ -138,178 +139,73 @@ def _number_format(tensor, min_sz=-1):\n     return format, scale, sz\n \n \n-def _tensor_str(self):\n-    n = PRINT_OPTS.edgeitems\n-    has_hdots = self.size()[-1] > 2 * n\n-    has_vdots = self.size()[-2] > 2 * n\n-    print_full_mat = not has_hdots and not has_vdots\n-    formatter = _number_format(self, min_sz=3 if not print_full_mat else 0)\n-    print_dots = self.numel() >= PRINT_OPTS.threshold\n-\n-    dim_sz = max(2, max(len(str(x)) for x in self.size()))\n-    dim_fmt = \"{:^\" + str(dim_sz) + \"}\"\n-    dot_fmt = u\"{:^\" + str(dim_sz + 1) + \"}\"\n-\n-    counter_dim = self.ndimension() - 2\n-    counter = torch.LongStorage(counter_dim).fill_(0)\n-    counter[counter.size() - 1] = -1\n-    finished = False\n-    strt = ''\n-    while True:\n-        nrestarted = [False for i in counter]\n-        nskipped = [False for i in counter]\n-        for i in range(counter_dim - 1, -1, -1):\n-            counter[i] += 1\n-            if print_dots and counter[i] == n and self.size(i) > 2 * n:\n-                counter[i] = self.size(i) - n\n-                nskipped[i] = True\n-            if counter[i] == self.size(i):\n-                if i == 0:\n-                    finished = True\n-                counter[i] = 0\n-                nrestarted[i] = True\n-            else:\n-                break\n-        if finished:\n-            break\n-        elif print_dots:\n-            if any(nskipped):\n-                for hdot in nskipped:\n-                    strt += dot_fmt.format('...') if hdot \\\n-                        else dot_fmt.format('')\n-                strt += '\\n'\n-            if any(nrestarted):\n-                strt += ' '\n-                for vdot in nrestarted:\n-                    strt += dot_fmt.format(u'\\u22EE' if vdot else '')\n-                strt += '\\n'\n-        if strt != '':\n-            strt += '\\n'\n-        strt += '({},.,.) = \\n'.format(\n-            ','.join(dim_fmt.format(i) for i in counter))\n-        submatrix = reduce(lambda t, i: t.select(0, i), counter, self)\n-        strt += _matrix_str(submatrix, ' ', formatter, print_dots)\n-    return strt\n-\n-\n-def __repr_row(row, indent, fmt, scale, sz, truncate=None):\n-    if truncate is not None:\n-        dotfmt = \" {:^5} \"\n-        return (indent +\n-                ' '.join(fmt.format(val.item() / scale) for val in row[:truncate]) +\n-                dotfmt.format('...') +\n-                ' '.join(fmt.format(val.item() / scale) for val in row[-truncate:]) +\n-                '\\n')\n-    else:\n-        return indent + ' '.join(fmt.format(val.item() / scale) for val in row) + '\\n'\n+def _scalar_str(self, fmt, scale):\n+    scalar_str = fmt.format(self.item() / scale)\n+    # The leading space for positives is ugly on scalars, so we strip it\n+    if scalar_str[0] == ' ':", "path": "torch/_tensor_str.py", "position": null, "original_position": 90, "commit_id": "5d948cf80f4d5c56e19bb555f3b83a2cc6d76718", "original_commit_id": "49911628606a6f55796c9236d4edc233a15a5675", "user": {"login": "gchanan", "id": 3768583, "node_id": "MDQ6VXNlcjM3Njg1ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3768583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gchanan", "html_url": "https://github.com/gchanan", "followers_url": "https://api.github.com/users/gchanan/followers", "following_url": "https://api.github.com/users/gchanan/following{/other_user}", "gists_url": "https://api.github.com/users/gchanan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gchanan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gchanan/subscriptions", "organizations_url": "https://api.github.com/users/gchanan/orgs", "repos_url": "https://api.github.com/users/gchanan/repos", "events_url": "https://api.github.com/users/gchanan/events{/privacy}", "received_events_url": "https://api.github.com/users/gchanan/received_events", "type": "User", "site_admin": false}, "body": "lstrip?", "created_at": "2018-04-12T20:35:03Z", "updated_at": "2018-11-23T15:42:20Z", "html_url": "https://github.com/pytorch/pytorch/pull/6370#discussion_r181213569", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/6370", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/181213569"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/6370#discussion_r181213569"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/6370"}}, "body_html": "<p>lstrip?</p>", "body_text": "lstrip?"}