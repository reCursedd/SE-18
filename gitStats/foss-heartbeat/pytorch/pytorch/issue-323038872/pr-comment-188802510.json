{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/188802510", "pull_request_review_id": 120855471, "id": 188802510, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4ODgwMjUxMA==", "diff_hunk": "@@ -0,0 +1,192 @@\n+#pragma once\n+\n+#include <sys/socket.h>\n+#include <sys/types.h>\n+\n+#include <cstdlib>\n+#include <cstdint>\n+#include <functional>\n+#include <limits>\n+#include <string>\n+#include <system_error>\n+#include <tuple>\n+#include <vector>\n+\n+namespace c10d {\n+\n+\n+using RankType = uint32_t;\n+using PortType = uint16_t;\n+using SizeType = uint64_t;\n+\n+#define SYSCHECK(expr) { \\\n+  errno = 0; auto ___output = (expr); (void)___output;     \\\n+  if (errno != 0) throw std::system_error(errno, std::system_category()); \\\n+}\n+\n+inline PortType convertToPort(int64_t port) {\n+  if ((port < 0) || (port >= std::numeric_limits<PortType>::max()))\n+    throw std::domain_error(\"invalid port (value out of range)\");\n+\n+  return static_cast<PortType>(port);\n+}\n+\n+inline RankType convertToRank(int64_t rank, int64_t min = 0) {\n+  if ((rank < min) || (rank >= std::numeric_limits<RankType>::max()))\n+    throw std::domain_error(\"invalid rank (value out of range)\");\n+\n+  return static_cast<RankType>(rank);\n+}\n+\n+// TCP util namespace\n+namespace tcputil {\n+\n+\n+// Send and receive\n+template<typename T>\n+void sendBytes(int socket,\n+               const T* buffer,\n+               size_t length,\n+               bool moreData = false) {\n+\n+  size_t bytesToSend = sizeof(T) * length;\n+  if (bytesToSend == 0) {\n+    return;\n+  }\n+\n+  auto bytes = reinterpret_cast<const uint8_t*>(buffer);\n+  uint8_t* currentBytes = const_cast<uint8_t*>(bytes);\n+\n+  int flags = 0;\n+\n+#ifdef MSG_MORE\n+  if (moreData) { // there is more data to send\n+    flags |= MSG_MORE;\n+  }\n+#endif\n+\n+  while (bytesToSend > 0) {\n+    ssize_t bytesSent;\n+    SYSCHECK(bytesSent = ::send(socket, currentBytes, bytesToSend, flags))\n+    if (bytesSent == 0) {\n+      throw std::system_error(ECONNRESET, std::system_category());\n+    }\n+\n+    bytesToSend -= bytesSent;\n+    currentBytes += bytesSent;\n+  }\n+}\n+\n+template<typename T>\n+void recvBytes(int socket, T* buffer, std::size_t length) {\n+\n+  size_t bytesToReceive = sizeof(T) * length;\n+  if (bytesToReceive == 0) {\n+    return;\n+  }\n+\n+  auto bytes = reinterpret_cast<uint8_t*>(buffer);\n+  uint8_t *currentBytes = bytes;\n+\n+  while (bytesToReceive > 0) {\n+    ssize_t bytesReceived;\n+    SYSCHECK(bytesReceived = ::recv(socket, currentBytes, bytesToReceive, 0))\n+    if (bytesReceived == 0) {\n+      throw std::system_error(ECONNRESET, std::system_category());\n+    }\n+\n+    bytesToReceive -= bytesReceived;\n+    currentBytes += bytesReceived;\n+  }", "path": "torch/lib/c10d/Utils.hpp", "position": 120, "original_position": 100, "commit_id": "ba48f051925b6a9d49113e5d8ca43ebd3f551993", "original_commit_id": "54cb0b5d4314ec282f3d813348a1069599f832b6", "user": {"login": "pietern", "id": 9845, "node_id": "MDQ6VXNlcjk4NDU=", "avatar_url": "https://avatars3.githubusercontent.com/u/9845?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietern", "html_url": "https://github.com/pietern", "followers_url": "https://api.github.com/users/pietern/followers", "following_url": "https://api.github.com/users/pietern/following{/other_user}", "gists_url": "https://api.github.com/users/pietern/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietern/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietern/subscriptions", "organizations_url": "https://api.github.com/users/pietern/orgs", "repos_url": "https://api.github.com/users/pietern/repos", "events_url": "https://api.github.com/users/pietern/events{/privacy}", "received_events_url": "https://api.github.com/users/pietern/received_events", "type": "User", "site_admin": false}, "body": "What is the reason for send/recv vs read/write? Do we need the additional controls that they give us? No need to change this, but want to understand why not read/write.", "created_at": "2018-05-16T23:37:30Z", "updated_at": "2018-11-23T15:44:12Z", "html_url": "https://github.com/pytorch/pytorch/pull/7560#discussion_r188802510", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/7560", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/188802510"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/7560#discussion_r188802510"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/7560"}}, "body_html": "<p>What is the reason for send/recv vs read/write? Do we need the additional controls that they give us? No need to change this, but want to understand why not read/write.</p>", "body_text": "What is the reason for send/recv vs read/write? Do we need the additional controls that they give us? No need to change this, but want to understand why not read/write.", "in_reply_to_id": 188157333}