{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/189032643", "pull_request_review_id": 121133092, "id": 189032643, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4OTAzMjY0Mw==", "diff_hunk": "@@ -0,0 +1,352 @@\n+#include \"TCPStore.hpp\"\n+\n+#include <poll.h>\n+#include <unistd.h>\n+#include <system_error>\n+#include <algorithm>\n+\n+namespace c10d {\n+\n+namespace {\n+\n+enum class QueryType : uint8_t {\n+  SET,\n+  GET,\n+  ADD,\n+  CHECK,\n+  WAIT\n+};\n+\n+enum class CheckResponseType : uint8_t {\n+  READY,\n+  NOT_READY\n+};\n+\n+enum class WaitResponseType : uint8_t {\n+  STOP_WAITING\n+};\n+\n+} // anonymous namespace\n+\n+// TCPStoreDaemon class methods\n+// Simply start the daemon thread\n+TCPStoreDaemon::TCPStoreDaemon(int storeListenSocket) :\n+  storeListenSocket_(storeListenSocket)\n+{\n+  daemonThread_ = std::thread(&TCPStoreDaemon::run, this);\n+}\n+\n+TCPStoreDaemon::~TCPStoreDaemon() {\n+  // Stop the run\n+  stop();\n+  // Join the thread\n+  join();\n+  // Close unclosed sockets\n+  for (auto socket : sockets_) {\n+    if (socket != -1) {\n+      ::close(socket);\n+    }\n+  }\n+  // Now close the rest control pipe\n+  for (auto fd : controlPipeFd_) {\n+    if (fd != -1) {\n+      ::close(fd);\n+    }\n+  }\n+}\n+\n+void TCPStoreDaemon::join() {\n+  daemonThread_.join();\n+}\n+\n+void TCPStoreDaemon::run() {\n+  // Create the control pipe\n+  if (pipe(controlPipeFd_.data()) == -1) {\n+    throw std::runtime_error(\"Failed to create the control pipe to start the \"\n+                             \"TCPStoreDaemon run\");\n+  }\n+\n+  std::vector<struct pollfd> fds;\n+  fds.push_back({ .fd = storeListenSocket_, .events = POLLIN });\n+  // Push the read end of the pipe to signal the stopping of the daemon run\n+  fds.push_back({ .fd = controlPipeFd_[0], .events = POLLHUP });\n+\n+  // receive the queries\n+  bool finished = false;\n+  while (!finished) {\n+    for (size_t i = 0; i < sockets_.size(); i++) {\n+      fds[i].revents = 0;\n+    }\n+\n+    SYSCHECK(::poll(fds.data(), fds.size(), -1));\n+\n+    // TCPStore's listening socket has an event and it should now be able to\n+    // accept new connections.\n+    if (fds[0].revents != 0) {\n+      if (fds[0].revents ^ POLLIN) {\n+        throw std::system_error(ECONNABORTED, std::system_category(),\n+            \"Unexpected poll revent on the master's listening socket: \" +\n+            std::to_string(fds[0].revents));\n+      }\n+      int sockFd = std::get<0>(tcputil::accept(storeListenSocket_));\n+      sockets_.push_back(sockFd);\n+      fds.push_back({ .fd = sockFd, .events = POLLIN });\n+    }\n+    // The pipe receives an event which tells us to shutdown the daemon\n+    if (fds[1].revents != 0) {\n+      // Will be POLLUP when the pipe is closed\n+      if (fds[1].revents ^ POLLHUP) {\n+        throw std::system_error(ECONNABORTED, std::system_category(),\n+            \"Unexpected poll revent on the control pipe's reading fd: \" +\n+            std::to_string(fds[1].revents));\n+      }\n+      finished = true;\n+      break;\n+    }\n+    // Skipping the fds[0] and fds[1],\n+    // fds[0] is master's listening socket\n+    // fds[1] is control pipe's reading fd\n+    for (size_t fdIdx = 2; fdIdx < fds.size(); ++fdIdx) {\n+      if (fds[fdIdx].revents == 0) {\n+        continue;\n+      }\n+\n+      if (fds[fdIdx].revents ^ POLLIN) {\n+        throw std::system_error(ECONNABORTED, std::system_category(),\n+            \"Unexpected poll revent: \" +\n+            std::to_string(fds[fdIdx].revents) + \" on socket: \" +\n+            std::to_string(fds[fdIdx].fd));\n+      }\n+      // Now query the socket that has the event\n+      try {\n+        query(fds[fdIdx].fd);\n+      } catch (...) {\n+        // There was an error when processing query. Probably an exception\n+        // occurred in recv/send what would indicate that socket on the other\n+        // side has been closed. If the closing was due to normal exit, then\n+        // the store should continue executing. Otherwise, if it was different\n+        // exception, other connections will get an exception once they try to\n+        // use the store. We will go ahead and close this connection whenever\n+        // we hit an exception here.\n+        ::close(fds[fdIdx].fd);\n+        fds.erase(fds.begin() + fdIdx);\n+        sockets_.erase(sockets_.begin() + fdIdx - 2);", "path": "torch/lib/c10d/TCPStore.cpp", "position": null, "original_position": 133, "commit_id": "ba48f051925b6a9d49113e5d8ca43ebd3f551993", "original_commit_id": "346b6c575c98256c6c7265ab001f494a0be3ec58", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "You should remove the socket from the `waiting*` maps as well. Otherwise you'll have the deamon reply to already closed descriptors, and likely crash the whole process.", "created_at": "2018-05-17T17:05:22Z", "updated_at": "2018-11-23T15:44:13Z", "html_url": "https://github.com/pytorch/pytorch/pull/7560#discussion_r189032643", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/7560", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/189032643"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/7560#discussion_r189032643"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/7560"}}, "body_html": "<p>You should remove the socket from the <code>waiting*</code> maps as well. Otherwise you'll have the deamon reply to already closed descriptors, and likely crash the whole process.</p>", "body_text": "You should remove the socket from the waiting* maps as well. Otherwise you'll have the deamon reply to already closed descriptors, and likely crash the whole process."}