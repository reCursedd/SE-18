{"url": "https://api.github.com/repos/pytorch/pytorch/issues/6963", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/6963/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/6963/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/6963/events", "html_url": "https://github.com/pytorch/pytorch/issues/6963", "id": 317769271, "node_id": "MDU6SXNzdWUzMTc3NjkyNzE=", "number": 6963, "title": "The sum of all intermediate losses, is slightly different than the sum post backward()", "user": {"login": "ProGamerGov", "id": 10626398, "node_id": "MDQ6VXNlcjEwNjI2Mzk4", "avatar_url": "https://avatars1.githubusercontent.com/u/10626398?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ProGamerGov", "html_url": "https://github.com/ProGamerGov", "followers_url": "https://api.github.com/users/ProGamerGov/followers", "following_url": "https://api.github.com/users/ProGamerGov/following{/other_user}", "gists_url": "https://api.github.com/users/ProGamerGov/gists{/gist_id}", "starred_url": "https://api.github.com/users/ProGamerGov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ProGamerGov/subscriptions", "organizations_url": "https://api.github.com/users/ProGamerGov/orgs", "repos_url": "https://api.github.com/users/ProGamerGov/repos", "events_url": "https://api.github.com/users/ProGamerGov/events{/privacy}", "received_events_url": "https://api.github.com/users/ProGamerGov/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2018-04-25T19:49:15Z", "updated_at": "2018-04-25T21:06:42Z", "closed_at": null, "author_association": "NONE", "body_html": "<h2>Issue description</h2>\n<p>When adding up all the intermediate losses, I get a slightly different value than the total loss.</p>\n<h2>Code example</h2>\n<pre><code>import torch\nimport torch.nn as nn\nfrom torch.autograd import Variable\ncrit = nn.MSELoss()\n\n####################\ntorch.manual_seed(876)\na = Variable(torch.randn(3,64,64), requires_grad=True)\n\ntorch.manual_seed(875)\nb = Variable(torch.randn(3,64,64))\nc = crit(a,b)\n#####################\ntorch.manual_seed(874)\nd = Variable(torch.randn(3,64,64), requires_grad=True)\n\ntorch.manual_seed(873)\ne = Variable(torch.randn(3,64,64))\nf = crit(d,e)\n\n####################\ntorch.manual_seed(876)\nh = Variable(torch.randn(3,64,64), requires_grad=True)\n\ntorch.manual_seed(875)\ni = Variable(torch.randn(3,64,64))\nj = crit(h,i)\n#####################\n\ntest = (j, f, c)\n\ng = 0\nfor loss in test: \n   g+=loss \ng.backward(retain_graph=True)\n\n\nprint(\"Rounded Results:\")\nprint(\"Using += before backward(): \" + str(float(g)))\nprint(\"Using a single float(): \" + str( float(j + f + c)  ))\nprint(\"Using a single item(): \" + str( (j + f + c).item()  ))\n\nprint(\"Working Methods:\")\nprint(\"Adding j, f, c, separately using float(): \" + str(float(j) + float(f) + float(c) ))\nprint(\"Adding j, f, c, separately using item(): \" + str(j.item() + f.item() + c.item() ))\n\nprint(\"The difference Between Adding Methods:\")\nprint(\"Difference: \" + str( (float(j) + float(f) + float(c)) - float(g) ))\n</code></pre>\n<p>The above code will output:</p>\n<pre><code>Rounded Results:\nUsing +=: 6.0663561821\nUsing a single float(): 6.0663561821\nUsing a single item(): 6.0663561821\nWorking Methods:\nAdding j, f, c, separately using float(): 6.06635594368\nAdding j, f, c, separately using item(): 6.06635594368\nThe difference Between Adding Methods:\nDifference: -2.38418579102e-07\n</code></pre>\n<p>The loss variables <code>j</code>, <code>f</code>, and <code>c</code> are equal to:</p>\n<p><code>j</code> = <code>2.03060102463</code></p>\n<p><code>f</code> = <code>2.00515389442</code></p>\n<p><code>c</code> = <code>2.03060102463</code></p>\n<p>When I add them together in python manually, I don't get the rounded result:</p>\n<pre><code>&gt;&gt;&gt; a = 2.03060102463 + 2.00515389442 + 2.03060102463\n&gt;&gt;&gt; print(a)\n6.06635594368\n</code></pre>\n<h2>System Info</h2>\n<ul>\n<li>\n<p>PyTorch version: 0.4.0</p>\n</li>\n<li>\n<p>Is debug build: No</p>\n</li>\n<li>\n<p>CUDA used to build PyTorch: 8.0.61</p>\n</li>\n<li>\n<p>OS: Ubuntu 16.04.3 LTS</p>\n</li>\n<li>\n<p>GCC version: (Ubuntu 5.4.0-6ubuntu1~16.04.5) 5.4.0 20160609</p>\n</li>\n<li>\n<p>CMake version: version 3.5.1</p>\n</li>\n<li>\n<p>Python version: 2.7</p>\n</li>\n<li>\n<p>Is CUDA available: Yes</p>\n</li>\n<li>\n<p>CUDA runtime version: Could not collect</p>\n</li>\n<li>\n<p>GPU models and configuration: GPU 0: Tesla K80</p>\n</li>\n<li>\n<p>Nvidia driver version: 384.90</p>\n</li>\n<li>\n<p>cuDNN version: Probably one of the following:<br>\n/usr/lib/x86_64-linux-gnu/libcudnn.so.7.0.3<br>\n/usr/lib/x86_64-linux-gnu/libcudnn_static_v7.a<br>\n/usr/local/cuda-9.0/targets/x86_64-linux/lib/libcudnn.so<br>\n/usr/local/cuda-9.0/targets/x86_64-linux/lib/libcudnn.so.7<br>\n/usr/local/cuda-9.0/targets/x86_64-linux/lib/libcudnn.so.7.0.3<br>\n/usr/local/cuda-9.0/targets/x86_64-linux/lib/libcudnn_static.a</p>\n</li>\n<li>\n<p>Versions of relevant libraries:<br>\n[pip] Could not collect<br>\n[conda] Could not collect</p>\n</li>\n</ul>", "body_text": "Issue description\nWhen adding up all the intermediate losses, I get a slightly different value than the total loss.\nCode example\nimport torch\nimport torch.nn as nn\nfrom torch.autograd import Variable\ncrit = nn.MSELoss()\n\n####################\ntorch.manual_seed(876)\na = Variable(torch.randn(3,64,64), requires_grad=True)\n\ntorch.manual_seed(875)\nb = Variable(torch.randn(3,64,64))\nc = crit(a,b)\n#####################\ntorch.manual_seed(874)\nd = Variable(torch.randn(3,64,64), requires_grad=True)\n\ntorch.manual_seed(873)\ne = Variable(torch.randn(3,64,64))\nf = crit(d,e)\n\n####################\ntorch.manual_seed(876)\nh = Variable(torch.randn(3,64,64), requires_grad=True)\n\ntorch.manual_seed(875)\ni = Variable(torch.randn(3,64,64))\nj = crit(h,i)\n#####################\n\ntest = (j, f, c)\n\ng = 0\nfor loss in test: \n   g+=loss \ng.backward(retain_graph=True)\n\n\nprint(\"Rounded Results:\")\nprint(\"Using += before backward(): \" + str(float(g)))\nprint(\"Using a single float(): \" + str( float(j + f + c)  ))\nprint(\"Using a single item(): \" + str( (j + f + c).item()  ))\n\nprint(\"Working Methods:\")\nprint(\"Adding j, f, c, separately using float(): \" + str(float(j) + float(f) + float(c) ))\nprint(\"Adding j, f, c, separately using item(): \" + str(j.item() + f.item() + c.item() ))\n\nprint(\"The difference Between Adding Methods:\")\nprint(\"Difference: \" + str( (float(j) + float(f) + float(c)) - float(g) ))\n\nThe above code will output:\nRounded Results:\nUsing +=: 6.0663561821\nUsing a single float(): 6.0663561821\nUsing a single item(): 6.0663561821\nWorking Methods:\nAdding j, f, c, separately using float(): 6.06635594368\nAdding j, f, c, separately using item(): 6.06635594368\nThe difference Between Adding Methods:\nDifference: -2.38418579102e-07\n\nThe loss variables j, f, and c are equal to:\nj = 2.03060102463\nf = 2.00515389442\nc = 2.03060102463\nWhen I add them together in python manually, I don't get the rounded result:\n>>> a = 2.03060102463 + 2.00515389442 + 2.03060102463\n>>> print(a)\n6.06635594368\n\nSystem Info\n\n\nPyTorch version: 0.4.0\n\n\nIs debug build: No\n\n\nCUDA used to build PyTorch: 8.0.61\n\n\nOS: Ubuntu 16.04.3 LTS\n\n\nGCC version: (Ubuntu 5.4.0-6ubuntu1~16.04.5) 5.4.0 20160609\n\n\nCMake version: version 3.5.1\n\n\nPython version: 2.7\n\n\nIs CUDA available: Yes\n\n\nCUDA runtime version: Could not collect\n\n\nGPU models and configuration: GPU 0: Tesla K80\n\n\nNvidia driver version: 384.90\n\n\ncuDNN version: Probably one of the following:\n/usr/lib/x86_64-linux-gnu/libcudnn.so.7.0.3\n/usr/lib/x86_64-linux-gnu/libcudnn_static_v7.a\n/usr/local/cuda-9.0/targets/x86_64-linux/lib/libcudnn.so\n/usr/local/cuda-9.0/targets/x86_64-linux/lib/libcudnn.so.7\n/usr/local/cuda-9.0/targets/x86_64-linux/lib/libcudnn.so.7.0.3\n/usr/local/cuda-9.0/targets/x86_64-linux/lib/libcudnn_static.a\n\n\nVersions of relevant libraries:\n[pip] Could not collect\n[conda] Could not collect", "body": "## Issue description\r\n\r\nWhen adding up all the intermediate losses, I get a slightly different value than the total loss.\r\n\r\n## Code example\r\n\r\n```\r\nimport torch\r\nimport torch.nn as nn\r\nfrom torch.autograd import Variable\r\ncrit = nn.MSELoss()\r\n\r\n####################\r\ntorch.manual_seed(876)\r\na = Variable(torch.randn(3,64,64), requires_grad=True)\r\n\r\ntorch.manual_seed(875)\r\nb = Variable(torch.randn(3,64,64))\r\nc = crit(a,b)\r\n#####################\r\ntorch.manual_seed(874)\r\nd = Variable(torch.randn(3,64,64), requires_grad=True)\r\n\r\ntorch.manual_seed(873)\r\ne = Variable(torch.randn(3,64,64))\r\nf = crit(d,e)\r\n\r\n####################\r\ntorch.manual_seed(876)\r\nh = Variable(torch.randn(3,64,64), requires_grad=True)\r\n\r\ntorch.manual_seed(875)\r\ni = Variable(torch.randn(3,64,64))\r\nj = crit(h,i)\r\n#####################\r\n\r\ntest = (j, f, c)\r\n\r\ng = 0\r\nfor loss in test: \r\n   g+=loss \r\ng.backward(retain_graph=True)\r\n\r\n\r\nprint(\"Rounded Results:\")\r\nprint(\"Using += before backward(): \" + str(float(g)))\r\nprint(\"Using a single float(): \" + str( float(j + f + c)  ))\r\nprint(\"Using a single item(): \" + str( (j + f + c).item()  ))\r\n\r\nprint(\"Working Methods:\")\r\nprint(\"Adding j, f, c, separately using float(): \" + str(float(j) + float(f) + float(c) ))\r\nprint(\"Adding j, f, c, separately using item(): \" + str(j.item() + f.item() + c.item() ))\r\n\r\nprint(\"The difference Between Adding Methods:\")\r\nprint(\"Difference: \" + str( (float(j) + float(f) + float(c)) - float(g) ))\r\n```\r\n\r\nThe above code will output: \r\n\r\n```\r\nRounded Results:\r\nUsing +=: 6.0663561821\r\nUsing a single float(): 6.0663561821\r\nUsing a single item(): 6.0663561821\r\nWorking Methods:\r\nAdding j, f, c, separately using float(): 6.06635594368\r\nAdding j, f, c, separately using item(): 6.06635594368\r\nThe difference Between Adding Methods:\r\nDifference: -2.38418579102e-07\r\n```\r\n\r\nThe loss variables `j`, `f`, and `c` are equal to: \r\n\r\n`j` = `2.03060102463`\r\n\r\n`f` = `2.00515389442`\r\n\r\n`c` = `2.03060102463`\r\n\r\nWhen I add them together in python manually, I don't get the rounded result:\r\n\r\n\r\n```\r\n>>> a = 2.03060102463 + 2.00515389442 + 2.03060102463\r\n>>> print(a)\r\n6.06635594368\r\n```\r\n\r\n## System Info\r\n\r\n- PyTorch version: 0.4.0\r\n- Is debug build: No\r\n- CUDA used to build PyTorch: 8.0.61\r\n\r\n- OS: Ubuntu 16.04.3 LTS\r\n- GCC version: (Ubuntu 5.4.0-6ubuntu1~16.04.5) 5.4.0 20160609\r\n- CMake version: version 3.5.1\r\n\r\n- Python version: 2.7\r\n- Is CUDA available: Yes\r\n- CUDA runtime version: Could not collect\r\n- GPU models and configuration: GPU 0: Tesla K80\r\n- Nvidia driver version: 384.90\r\n- cuDNN version: Probably one of the following:\r\n/usr/lib/x86_64-linux-gnu/libcudnn.so.7.0.3\r\n/usr/lib/x86_64-linux-gnu/libcudnn_static_v7.a\r\n/usr/local/cuda-9.0/targets/x86_64-linux/lib/libcudnn.so\r\n/usr/local/cuda-9.0/targets/x86_64-linux/lib/libcudnn.so.7\r\n/usr/local/cuda-9.0/targets/x86_64-linux/lib/libcudnn.so.7.0.3\r\n/usr/local/cuda-9.0/targets/x86_64-linux/lib/libcudnn_static.a\r\n\r\n- Versions of relevant libraries:\r\n[pip] Could not collect\r\n[conda] Could not collect\r\n\r\n"}