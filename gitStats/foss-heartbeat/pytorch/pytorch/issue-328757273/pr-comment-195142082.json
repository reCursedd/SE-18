{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/195142082", "pull_request_review_id": 128449327, "id": 195142082, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTE0MjA4Mg==", "diff_hunk": "@@ -997,6 +1027,7 @@ def make_relative_rpath(path):\n         package_data={\n             'torch': [\n                 'lib/*.so*',\n+                'lib/*.a',", "path": "setup.py", "position": null, "original_position": 142, "commit_id": "c95a0d05a5f23b1a90c70c20dd01de5d6d39441c", "original_commit_id": "f4fe2c90bbe29b5989ac1798a1d718c22a1112b0", "user": {"login": "soumith", "id": 1310570, "node_id": "MDQ6VXNlcjEzMTA1NzA=", "avatar_url": "https://avatars0.githubusercontent.com/u/1310570?v=4", "gravatar_id": "", "url": "https://api.github.com/users/soumith", "html_url": "https://github.com/soumith", "followers_url": "https://api.github.com/users/soumith/followers", "following_url": "https://api.github.com/users/soumith/following{/other_user}", "gists_url": "https://api.github.com/users/soumith/gists{/gist_id}", "starred_url": "https://api.github.com/users/soumith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/soumith/subscriptions", "organizations_url": "https://api.github.com/users/soumith/orgs", "repos_url": "https://api.github.com/users/soumith/repos", "events_url": "https://api.github.com/users/soumith/events{/privacy}", "received_events_url": "https://api.github.com/users/soumith/received_events", "type": "User", "site_admin": false}, "body": "i am not questioning why we are using libprotobuf.a, seems great.\r\n\r\nShipping it into our {wheel file, conda package} etc. seems to be unnecessary, as the symbols are already in libcaffe2.so.\r\n\r\nWe should link it into libcaffe2.so with a whole-archive flag so that all symbols (not just ones caffe2 is using) get linked, which means any downstream library that wants to use protobuf capabilities can just link against libcaffe2.so and get full resolution of all protobuf symbols it needs.\r\n\r\nFor example any extension, or libtorch, or whatever, if they need libprotobuf.a symbols, they can get by simply linking to libcaffe2.so", "created_at": "2018-06-13T15:59:51Z", "updated_at": "2018-11-23T15:45:26Z", "html_url": "https://github.com/pytorch/pytorch/pull/8073#discussion_r195142082", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/8073", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/195142082"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/8073#discussion_r195142082"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/8073"}}, "body_html": "<p>i am not questioning why we are using libprotobuf.a, seems great.</p>\n<p>Shipping it into our {wheel file, conda package} etc. seems to be unnecessary, as the symbols are already in libcaffe2.so.</p>\n<p>We should link it into libcaffe2.so with a whole-archive flag so that all symbols (not just ones caffe2 is using) get linked, which means any downstream library that wants to use protobuf capabilities can just link against libcaffe2.so and get full resolution of all protobuf symbols it needs.</p>\n<p>For example any extension, or libtorch, or whatever, if they need libprotobuf.a symbols, they can get by simply linking to libcaffe2.so</p>", "body_text": "i am not questioning why we are using libprotobuf.a, seems great.\nShipping it into our {wheel file, conda package} etc. seems to be unnecessary, as the symbols are already in libcaffe2.so.\nWe should link it into libcaffe2.so with a whole-archive flag so that all symbols (not just ones caffe2 is using) get linked, which means any downstream library that wants to use protobuf capabilities can just link against libcaffe2.so and get full resolution of all protobuf symbols it needs.\nFor example any extension, or libtorch, or whatever, if they need libprotobuf.a symbols, they can get by simply linking to libcaffe2.so", "in_reply_to_id": 195133301}