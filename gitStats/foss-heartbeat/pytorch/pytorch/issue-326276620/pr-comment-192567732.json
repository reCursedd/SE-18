{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/192567732", "pull_request_review_id": 125374196, "id": 192567732, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MjU2NzczMg==", "diff_hunk": "@@ -0,0 +1,204 @@\n+#pragma once\n+\n+#include <ATen/Error.h>\n+\n+#include <cstdint>\n+#include <functional>\n+#include <initializer_list>\n+#include <string>\n+#include <unordered_map>\n+#include <utility>\n+#include <vector>\n+\n+namespace torch {\n+namespace detail {\n+\n+/// A simple ordered dictionary implementation, akin to Python's `OrderedDict`.\n+template <typename T>\n+class OrderedDict {\n+ public:\n+  struct Item {\n+    Item(std::string key_, T value_)\n+        : key(std::move(key_)), value(std::move(value_)) {}\n+\n+    T& operator*() {\n+      return value;\n+    }\n+    const T& operator*() const {\n+      return value;\n+    }\n+    T* operator->() {\n+      return &value;\n+    }\n+    const T* operator->() const {\n+      return &value;\n+    }\n+\n+    const std::string key;", "path": "torch/csrc/api/include/torch/detail/ordered_dict.h", "position": null, "original_position": 37, "commit_id": "12261b0f29c997486ecd1dbc39c35b0559c404b4", "original_commit_id": "cfc0c3faab58058aee6aafb9abd432c2c1974a5f", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Please no. This is convenient because you can do\r\n```cpp\r\nfor (auto & entry : dict) {\r\n  fn(entry.value);\r\n}\r\n```\r\nwhich is consistent with all other std structs (e.g. pairs have `.first` and `.second` and not `.first()` and `.second()`).", "created_at": "2018-06-02T19:12:02Z", "updated_at": "2018-11-23T15:44:53Z", "html_url": "https://github.com/pytorch/pytorch/pull/7823#discussion_r192567732", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/7823", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/192567732"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/7823#discussion_r192567732"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/7823"}}, "body_html": "<p>Please no. This is convenient because you can do</p>\n<div class=\"highlight highlight-source-c++\"><pre><span class=\"pl-k\">for</span> (<span class=\"pl-k\">auto</span> &amp; entry : dict) {\n  <span class=\"pl-c1\">fn</span>(entry.<span class=\"pl-smi\">value</span>);\n}</pre></div>\n<p>which is consistent with all other std structs (e.g. pairs have <code>.first</code> and <code>.second</code> and not <code>.first()</code> and <code>.second()</code>).</p>", "body_text": "Please no. This is convenient because you can do\nfor (auto & entry : dict) {\n  fn(entry.value);\n}\nwhich is consistent with all other std structs (e.g. pairs have .first and .second and not .first() and .second()).", "in_reply_to_id": 192273527}