{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/192567843", "pull_request_review_id": 125374196, "id": 192567843, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MjU2Nzg0Mw==", "diff_hunk": "@@ -0,0 +1,204 @@\n+#pragma once\n+\n+#include <ATen/Error.h>\n+\n+#include <cstdint>\n+#include <functional>\n+#include <initializer_list>\n+#include <string>\n+#include <unordered_map>\n+#include <utility>\n+#include <vector>\n+\n+namespace torch {\n+namespace detail {\n+\n+/// A simple ordered dictionary implementation, akin to Python's `OrderedDict`.\n+template <typename T>\n+class OrderedDict {\n+ public:\n+  struct Item {\n+    Item(std::string key_, T value_)\n+        : key(std::move(key_)), value(std::move(value_)) {}\n+\n+    T& operator*() {\n+      return value;\n+    }\n+    const T& operator*() const {\n+      return value;\n+    }\n+    T* operator->() {\n+      return &value;\n+    }\n+    const T* operator->() const {\n+      return &value;\n+    }\n+\n+    const std::string key;\n+    T value;\n+  };\n+\n+  using Iterator = typename std::vector<Item>::iterator;\n+  using ConstIterator = typename std::vector<Item>::const_iterator;\n+\n+  OrderedDict() = default;\n+\n+  // Copy we have to do ourselves, because items' keys are const, so we have to\n+  // re-insert the items.\n+  OrderedDict(const OrderedDict& other) : index_(other.index_) {\n+    for (const auto& item : other.items_) {\n+      items_.push_back(item);\n+    }\n+  }\n+\n+  OrderedDict& operator=(const OrderedDict& other) {\n+    index_ = other.index_;\n+    items_.clear();\n+    for (const auto& item : other.items_) {\n+      items_.push_back(item);\n+    }\n+    return *this;\n+  }\n+\n+  // Move works by default, because you can move-construct vectors of const\n+  // values..\n+  OrderedDict(OrderedDict&& other) = default;\n+  OrderedDict& operator=(OrderedDict&& other) = default;\n+\n+  ~OrderedDict() = default;\n+\n+  /*implicit */ OrderedDict(std::initializer_list<Item> initializer_list) {\n+    items_.reserve(initializer_list.size());\n+    for (auto& item : initializer_list) {\n+      // Copy the key here and move it into the index.\n+      items_.emplace_back(item.key, std::move(item.value));\n+      index_.emplace(std::move(item.key), size() - 1);\n+    }\n+  }\n+\n+  Iterator begin() {\n+    return items_.begin();\n+  }\n+\n+  ConstIterator begin() const {\n+    return items_.begin();\n+  }\n+\n+  Iterator end() {\n+    return items_.end();\n+  }\n+\n+  ConstIterator end() const {\n+    return items_.end();\n+  }\n+\n+  Item& front() {\n+    return items_.front();\n+  }\n+\n+  const Item& front() const {\n+    return items_.front();\n+  }\n+\n+  Item& back() {\n+    return items_.back();\n+  }\n+\n+  const Item& back() const {\n+    return items_.back();\n+  }\n+\n+  Item& operator[](size_t index) {\n+    return items_[index];\n+  }\n+\n+  const Item& operator[](size_t index) const {\n+    return items_[index];\n+  }\n+\n+  T& operator[](const std::string& key) {\n+    return get(key);\n+  }\n+\n+  const T& operator[](const std::string& key) const {\n+    return get(key);\n+  }\n+\n+  template <typename Key, typename Value>\n+  T& insert(Key&& key, Value&& value) {\n+    AT_CHECK(index_.count(key) == 0, \"Key '\", key, \"' already present\");\n+    // Copy `key` here and move it into the index.\n+    items_.emplace_back(key, std::forward<Value>(value));\n+    index_.emplace(std::forward<Key>(key), size() - 1);\n+    return items_.back().value;\n+  }\n+\n+  /// Allows calling `insert` with an initializer list for the value, e.g.\n+  /// `insert(key, {...})`.\n+  T& insert(std::string key, T&& value) {\n+    return insert<std::string, T>(std::move(key), std::move(value));\n+  }\n+\n+  void update(OrderedDict&& other) {\n+    for (auto& item : other) {\n+      // We want to call `insert()` to prevent duplicate keys.\n+      insert(std::move(item.key), std::move(item.value));\n+    }\n+  }\n+\n+  void update(const OrderedDict& other) {\n+    for (auto& item : other) {\n+      // We want to call `insert()` to prevent duplicate keys.\n+      insert(item.key, item.value);\n+    }\n+  }\n+\n+  T* find(const std::string& str) noexcept {\n+    auto iterator = index_.find(str);\n+    if (iterator == index_.end()) {\n+      return nullptr;\n+    }\n+    return &items_[iterator->second].value;\n+  }\n+\n+  const T* find(const std::string& str) const noexcept {\n+    auto iterator = index_.find(str);\n+    if (iterator == index_.end()) {\n+      return nullptr;\n+    }\n+    return &items_[iterator->second].value;\n+  }\n+\n+  T& get(const std::string& key) {\n+    if (auto* value = find(key)) {\n+      return *value;\n+    }\n+    AT_ERROR(\"No such key: '\", key, \"'\");\n+  }\n+\n+  const T& get(const std::string& key) const {\n+    if (auto* value = find(key)) {\n+      return *value;\n+    }\n+    AT_ERROR(\"No such key: '\", key, \"'\");\n+  }\n+\n+  void clear() {\n+    index_.clear();\n+    items_.clear();\n+  }\n+\n+  size_t size() const noexcept {\n+    return items_.size();\n+  }\n+\n+  bool is_empty() const noexcept {\n+    return items_.empty();\n+  }\n+\n+ private:\n+  std::unordered_map<std::string, size_t> index_;\n+  std::vector<Item> items_;\n+};", "path": "torch/csrc/api/include/torch/detail/ordered_dict.h", "position": null, "original_position": 202, "commit_id": "12261b0f29c997486ecd1dbc39c35b0559c404b4", "original_commit_id": "cfc0c3faab58058aee6aafb9abd432c2c1974a5f", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "I wonder how hard will the fact that this class uses the same method names as std, but has different semantics, bite us in the future.", "created_at": "2018-06-02T19:16:55Z", "updated_at": "2018-11-23T15:44:53Z", "html_url": "https://github.com/pytorch/pytorch/pull/7823#discussion_r192567843", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/7823", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/192567843"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/7823#discussion_r192567843"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/7823"}}, "body_html": "<p>I wonder how hard will the fact that this class uses the same method names as std, but has different semantics, bite us in the future.</p>", "body_text": "I wonder how hard will the fact that this class uses the same method names as std, but has different semantics, bite us in the future."}