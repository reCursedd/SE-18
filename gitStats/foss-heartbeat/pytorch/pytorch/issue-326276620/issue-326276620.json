{"url": "https://api.github.com/repos/pytorch/pytorch/issues/7823", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/7823/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/7823/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/7823/events", "html_url": "https://github.com/pytorch/pytorch/pull/7823", "id": 326276620, "node_id": "MDExOlB1bGxSZXF1ZXN0MTkwNDA4NzI2", "number": 7823, "title": "[C++ API] Improve and use OrderedDict for parameters / modules", "user": {"login": "goldsborough", "id": 6429851, "node_id": "MDQ6VXNlcjY0Mjk4NTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/6429851?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goldsborough", "html_url": "https://github.com/goldsborough", "followers_url": "https://api.github.com/users/goldsborough/followers", "following_url": "https://api.github.com/users/goldsborough/following{/other_user}", "gists_url": "https://api.github.com/users/goldsborough/gists{/gist_id}", "starred_url": "https://api.github.com/users/goldsborough/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goldsborough/subscriptions", "organizations_url": "https://api.github.com/users/goldsborough/orgs", "repos_url": "https://api.github.com/users/goldsborough/repos", "events_url": "https://api.github.com/users/goldsborough/events{/privacy}", "received_events_url": "https://api.github.com/users/goldsborough/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2018-05-24T20:20:46Z", "updated_at": "2018-11-23T15:44:57Z", "closed_at": "2018-06-05T18:29:10Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/7823", "html_url": "https://github.com/pytorch/pytorch/pull/7823", "diff_url": "https://github.com/pytorch/pytorch/pull/7823.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/7823.patch"}, "body_html": "<p>This PR brings back the <code>OrderedDict</code> data structure from my old C++ API PR <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"311886101\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/6345\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/pytorch/pytorch/pull/6345/hovercard\" href=\"https://github.com/pytorch/pytorch/pull/6345\">#6345</a>. It's based on the <code>OrderedDict</code> class from the JIT, but implemented slightly differently in that it stores <code>(key, value)</code> pairs together in a vector, besides another copy of the <code>key</code> for the index. This is to allow easier iteration, since iterators are now over items instead of only keys or only values. The problem with the old design (<code>unordered_map&lt;string, int&gt;</code> and <code>vector&lt;Value&gt;</code>) is that you can't get an ordered list keys from it, since the index map is unordered, which makes iteration over \"items\" impossible.</p>\n<p>I've replaced uses of <code>unordered_map</code> in the C++ API with <code>OrderedDict</code>, as well as uses of the old <code>OrderedDict</code> in the JIT with the new one.</p>\n<p>Also added a bunch of tests.</p>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=4583066\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/apaszke\">@apaszke</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=3605224\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ebetica\">@ebetica</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=370202\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/zdevito\">@zdevito</a></p>", "body_text": "This PR brings back the OrderedDict data structure from my old C++ API PR #6345. It's based on the OrderedDict class from the JIT, but implemented slightly differently in that it stores (key, value) pairs together in a vector, besides another copy of the key for the index. This is to allow easier iteration, since iterators are now over items instead of only keys or only values. The problem with the old design (unordered_map<string, int> and vector<Value>) is that you can't get an ordered list keys from it, since the index map is unordered, which makes iteration over \"items\" impossible.\nI've replaced uses of unordered_map in the C++ API with OrderedDict, as well as uses of the old OrderedDict in the JIT with the new one.\nAlso added a bunch of tests.\n@apaszke @ebetica @zdevito", "body": "This PR brings back the `OrderedDict` data structure from my old C++ API PR https://github.com/pytorch/pytorch/pull/6345. It's based on the `OrderedDict` class from the JIT, but implemented slightly differently in that it stores `(key, value)` pairs together in a vector, besides another copy of the `key` for the index. This is to allow easier iteration, since iterators are now over items instead of only keys or only values. The problem with the old design (`unordered_map<string, int>` and `vector<Value>`) is that you can't get an ordered list keys from it, since the index map is unordered, which makes iteration over \"items\" impossible.\r\n\r\nI've replaced uses of `unordered_map` in the C++ API with `OrderedDict`, as well as uses of the old `OrderedDict` in the JIT with the new one.\r\n\r\nAlso added a bunch of tests.\r\n\r\n@apaszke @ebetica @zdevito "}