{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/192912408", "pull_request_review_id": 125780160, "id": 192912408, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MjkxMjQwOA==", "diff_hunk": "@@ -0,0 +1,204 @@\n+#pragma once\n+\n+#include <ATen/Error.h>\n+\n+#include <cstdint>\n+#include <functional>\n+#include <initializer_list>\n+#include <string>\n+#include <unordered_map>\n+#include <utility>\n+#include <vector>\n+\n+namespace torch {\n+namespace detail {\n+\n+/// A simple ordered dictionary implementation, akin to Python's `OrderedDict`.\n+template <typename T>\n+class OrderedDict {\n+ public:\n+  struct Item {\n+    Item(std::string key_, T value_)\n+        : key(std::move(key_)), value(std::move(value_)) {}\n+\n+    T& operator*() {\n+      return value;\n+    }\n+    const T& operator*() const {\n+      return value;\n+    }\n+    T* operator->() {\n+      return &value;\n+    }\n+    const T* operator->() const {\n+      return &value;\n+    }\n+\n+    const std::string key;\n+    T value;\n+  };\n+\n+  using Iterator = typename std::vector<Item>::iterator;\n+  using ConstIterator = typename std::vector<Item>::const_iterator;\n+\n+  OrderedDict() = default;\n+\n+  // Copy we have to do ourselves, because items' keys are const, so we have to\n+  // re-insert the items.\n+  OrderedDict(const OrderedDict& other) : index_(other.index_) {\n+    for (const auto& item : other.items_) {\n+      items_.push_back(item);\n+    }\n+  }\n+\n+  OrderedDict& operator=(const OrderedDict& other) {\n+    index_ = other.index_;\n+    items_.clear();\n+    for (const auto& item : other.items_) {\n+      items_.push_back(item);\n+    }", "path": "torch/csrc/api/include/torch/detail/ordered_dict.h", "position": null, "original_position": 59, "commit_id": "12261b0f29c997486ecd1dbc39c35b0559c404b4", "original_commit_id": "cfc0c3faab58058aee6aafb9abd432c2c1974a5f", "user": {"login": "goldsborough", "id": 6429851, "node_id": "MDQ6VXNlcjY0Mjk4NTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/6429851?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goldsborough", "html_url": "https://github.com/goldsborough", "followers_url": "https://api.github.com/users/goldsborough/followers", "following_url": "https://api.github.com/users/goldsborough/following{/other_user}", "gists_url": "https://api.github.com/users/goldsborough/gists{/gist_id}", "starred_url": "https://api.github.com/users/goldsborough/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goldsborough/subscriptions", "organizations_url": "https://api.github.com/users/goldsborough/orgs", "repos_url": "https://api.github.com/users/goldsborough/repos", "events_url": "https://api.github.com/users/goldsborough/events{/privacy}", "received_events_url": "https://api.github.com/users/goldsborough/received_events", "type": "User", "site_admin": false}, "body": "Hm, I thought because the `items_` contain `const` keys and are thus not copyable, but it seems to work.", "created_at": "2018-06-04T23:51:50Z", "updated_at": "2018-11-23T15:44:55Z", "html_url": "https://github.com/pytorch/pytorch/pull/7823#discussion_r192912408", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/7823", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/192912408"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/7823#discussion_r192912408"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/7823"}}, "body_html": "<p>Hm, I thought because the <code>items_</code> contain <code>const</code> keys and are thus not copyable, but it seems to work.</p>", "body_text": "Hm, I thought because the items_ contain const keys and are thus not copyable, but it seems to work.", "in_reply_to_id": 192567746}