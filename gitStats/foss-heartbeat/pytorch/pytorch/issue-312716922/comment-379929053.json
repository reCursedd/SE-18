{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/379929053", "html_url": "https://github.com/pytorch/pytorch/issues/6449#issuecomment-379929053", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/6449", "id": 379929053, "node_id": "MDEyOklzc3VlQ29tbWVudDM3OTkyOTA1Mw==", "user": {"login": "wangyirui", "id": 22140518, "node_id": "MDQ6VXNlcjIyMTQwNTE4", "avatar_url": "https://avatars3.githubusercontent.com/u/22140518?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wangyirui", "html_url": "https://github.com/wangyirui", "followers_url": "https://api.github.com/users/wangyirui/followers", "following_url": "https://api.github.com/users/wangyirui/following{/other_user}", "gists_url": "https://api.github.com/users/wangyirui/gists{/gist_id}", "starred_url": "https://api.github.com/users/wangyirui/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wangyirui/subscriptions", "organizations_url": "https://api.github.com/users/wangyirui/orgs", "repos_url": "https://api.github.com/users/wangyirui/repos", "events_url": "https://api.github.com/users/wangyirui/events{/privacy}", "received_events_url": "https://api.github.com/users/wangyirui/received_events", "type": "User", "site_admin": false}, "created_at": "2018-04-09T23:56:12Z", "updated_at": "2018-04-09T23:56:12Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=5248122\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ailzhang\">@ailzhang</a></p>\n<pre><code># training process\n        for i, sample in enumerate(itr):\n            if use_cuda:\n                # wrap input tensors in cuda tensors\n                sample = utils.make_variable(sample, cuda=cuda)\n\n            with torch.no_grad():\n\n                neg_tokens = translator.generate_translation_tokens(sample, beam_size=args.beam, maxlen_a=args.max_len_a,\n                                                                    maxlen_b=args.max_len_b, nbest=args.nbest, max_res=args.fixed_max_len)\n                neg_labels = sample['target'].new(neg_tokens.size(0), 1).fill_(0).float()\n\n                pos_tokens = sample['net_input']['src_tokens']\n\n                pos_labels = sample['target'].new(neg_tokens.size(0), 1).fill_(1).float()\n\n                src_tokens = torch.cat([sample['net_input']['src_tokens']]*2, dim=0)\n                trg_tokens = torch.cat([pos_tokens, neg_tokens], dim=0)\n                labels = torch.cat([pos_labels, neg_labels], dim=0)\n                indices = np.random.permutation(labels.size(0))\n                src_tokens = src_tokens[indices]\n                trg_tokens = trg_tokens[indices]\n                labels = labels[indices]\n\n            disc_out = discriminator(src_tokens, trg_tokens, dataset.dst_dict.pad())\n            loss = criterion(disc_out, labels)\n            # _, prediction = disc_out.topk(1)\n            prediction = torch.round(disc_out)\n            acc = torch.sum(prediction == labels).float() / len(labels)\n            logging_meters['train_acc'].update(acc)\n            logging_meters['train_loss'].update(loss)\n            logging.debug(\"D training loss {0:.3f}, acc {1:.3f}, avgAcc {2:.3f}, lr={3} at batch {4}: \".format(logging_meters['train_loss'].avg,\n                                                                                                                acc,\n                                                                                                               logging_meters['train_acc'].avg,\n                                                                                                               optimizer.param_groups[0]['lr'],\n                                                                                                               i,))\n\n            optimizer.zero_grad()\n            loss.backward()\n            torch.nn.utils.clip_grad_norm(discriminator.parameters(), args.clip_norm)\n            optimizer.step()\n</code></pre>", "body_text": "@ailzhang\n# training process\n        for i, sample in enumerate(itr):\n            if use_cuda:\n                # wrap input tensors in cuda tensors\n                sample = utils.make_variable(sample, cuda=cuda)\n\n            with torch.no_grad():\n\n                neg_tokens = translator.generate_translation_tokens(sample, beam_size=args.beam, maxlen_a=args.max_len_a,\n                                                                    maxlen_b=args.max_len_b, nbest=args.nbest, max_res=args.fixed_max_len)\n                neg_labels = sample['target'].new(neg_tokens.size(0), 1).fill_(0).float()\n\n                pos_tokens = sample['net_input']['src_tokens']\n\n                pos_labels = sample['target'].new(neg_tokens.size(0), 1).fill_(1).float()\n\n                src_tokens = torch.cat([sample['net_input']['src_tokens']]*2, dim=0)\n                trg_tokens = torch.cat([pos_tokens, neg_tokens], dim=0)\n                labels = torch.cat([pos_labels, neg_labels], dim=0)\n                indices = np.random.permutation(labels.size(0))\n                src_tokens = src_tokens[indices]\n                trg_tokens = trg_tokens[indices]\n                labels = labels[indices]\n\n            disc_out = discriminator(src_tokens, trg_tokens, dataset.dst_dict.pad())\n            loss = criterion(disc_out, labels)\n            # _, prediction = disc_out.topk(1)\n            prediction = torch.round(disc_out)\n            acc = torch.sum(prediction == labels).float() / len(labels)\n            logging_meters['train_acc'].update(acc)\n            logging_meters['train_loss'].update(loss)\n            logging.debug(\"D training loss {0:.3f}, acc {1:.3f}, avgAcc {2:.3f}, lr={3} at batch {4}: \".format(logging_meters['train_loss'].avg,\n                                                                                                                acc,\n                                                                                                               logging_meters['train_acc'].avg,\n                                                                                                               optimizer.param_groups[0]['lr'],\n                                                                                                               i,))\n\n            optimizer.zero_grad()\n            loss.backward()\n            torch.nn.utils.clip_grad_norm(discriminator.parameters(), args.clip_norm)\n            optimizer.step()", "body": "@ailzhang \r\n```\r\n# training process\r\n        for i, sample in enumerate(itr):\r\n            if use_cuda:\r\n                # wrap input tensors in cuda tensors\r\n                sample = utils.make_variable(sample, cuda=cuda)\r\n\r\n            with torch.no_grad():\r\n\r\n                neg_tokens = translator.generate_translation_tokens(sample, beam_size=args.beam, maxlen_a=args.max_len_a,\r\n                                                                    maxlen_b=args.max_len_b, nbest=args.nbest, max_res=args.fixed_max_len)\r\n                neg_labels = sample['target'].new(neg_tokens.size(0), 1).fill_(0).float()\r\n\r\n                pos_tokens = sample['net_input']['src_tokens']\r\n\r\n                pos_labels = sample['target'].new(neg_tokens.size(0), 1).fill_(1).float()\r\n\r\n                src_tokens = torch.cat([sample['net_input']['src_tokens']]*2, dim=0)\r\n                trg_tokens = torch.cat([pos_tokens, neg_tokens], dim=0)\r\n                labels = torch.cat([pos_labels, neg_labels], dim=0)\r\n                indices = np.random.permutation(labels.size(0))\r\n                src_tokens = src_tokens[indices]\r\n                trg_tokens = trg_tokens[indices]\r\n                labels = labels[indices]\r\n\r\n            disc_out = discriminator(src_tokens, trg_tokens, dataset.dst_dict.pad())\r\n            loss = criterion(disc_out, labels)\r\n            # _, prediction = disc_out.topk(1)\r\n            prediction = torch.round(disc_out)\r\n            acc = torch.sum(prediction == labels).float() / len(labels)\r\n            logging_meters['train_acc'].update(acc)\r\n            logging_meters['train_loss'].update(loss)\r\n            logging.debug(\"D training loss {0:.3f}, acc {1:.3f}, avgAcc {2:.3f}, lr={3} at batch {4}: \".format(logging_meters['train_loss'].avg,\r\n                                                                                                                acc,\r\n                                                                                                               logging_meters['train_acc'].avg,\r\n                                                                                                               optimizer.param_groups[0]['lr'],\r\n                                                                                                               i,))\r\n\r\n            optimizer.zero_grad()\r\n            loss.backward()\r\n            torch.nn.utils.clip_grad_norm(discriminator.parameters(), args.clip_norm)\r\n            optimizer.step()\r\n```"}