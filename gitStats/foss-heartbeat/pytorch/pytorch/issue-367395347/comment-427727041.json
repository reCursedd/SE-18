{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/427727041", "html_url": "https://github.com/pytorch/pytorch/pull/12407#issuecomment-427727041", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/12407", "id": 427727041, "node_id": "MDEyOklzc3VlQ29tbWVudDQyNzcyNzA0MQ==", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "created_at": "2018-10-08T05:48:45Z", "updated_at": "2018-10-08T05:49:06Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Comparing:</p>\n<pre><code>auto* Y = Output(0);\nY-&gt;Resize({1, 2, 3});\nauto* data = Y-&gt;mutable_data&lt;float&gt;();\n</code></pre>\n<p>v.</p>\n<pre><code>auto* Y = Output(0, {1, 2, 3}, at::device({context_.device_type()}).template dtype&lt;T&gt;());\n</code></pre>\n<p>The necessity to grovel in <code>context_.device_type()</code> seems worse to me.</p>\n<p>I recently fixed TensorOptions to truly contain optional values. I think we can just eliminate <code>at::device({context_.device_type()})</code>. Now. So it will look like this:</p>\n<pre><code>auto* Y = Output(0, {1, 2, 3}, at::dtype&lt;T&gt;());\n</code></pre>\n<p>How to implement this? The key is to observe that if we don't specify device, then <code>options.device_opt()</code> returns a nullopt. So, in this case, now the Output method can just consult the context for the correct device type.</p>", "body_text": "Comparing:\nauto* Y = Output(0);\nY->Resize({1, 2, 3});\nauto* data = Y->mutable_data<float>();\n\nv.\nauto* Y = Output(0, {1, 2, 3}, at::device({context_.device_type()}).template dtype<T>());\n\nThe necessity to grovel in context_.device_type() seems worse to me.\nI recently fixed TensorOptions to truly contain optional values. I think we can just eliminate at::device({context_.device_type()}). Now. So it will look like this:\nauto* Y = Output(0, {1, 2, 3}, at::dtype<T>());\n\nHow to implement this? The key is to observe that if we don't specify device, then options.device_opt() returns a nullopt. So, in this case, now the Output method can just consult the context for the correct device type.", "body": "Comparing:\r\n\r\n```\r\nauto* Y = Output(0);\r\nY->Resize({1, 2, 3});\r\nauto* data = Y->mutable_data<float>();\r\n```\r\n\r\nv.\r\n\r\n```\r\nauto* Y = Output(0, {1, 2, 3}, at::device({context_.device_type()}).template dtype<T>());\r\n```\r\n\r\nThe necessity to grovel in `context_.device_type()` seems worse to me.\r\n\r\nI recently fixed TensorOptions to truly contain optional values. I think we can just eliminate `at::device({context_.device_type()})`. Now. So it will look like this:\r\n\r\n```\r\nauto* Y = Output(0, {1, 2, 3}, at::dtype<T>());\r\n```\r\n\r\nHow to implement this? The key is to observe that if we don't specify device, then `options.device_opt()` returns a nullopt. So, in this case, now the Output method can just consult the context for the correct device type."}