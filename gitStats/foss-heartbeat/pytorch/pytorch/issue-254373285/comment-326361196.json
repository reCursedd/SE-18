{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/326361196", "html_url": "https://github.com/pytorch/pytorch/pull/2587#issuecomment-326361196", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/2587", "id": 326361196, "node_id": "MDEyOklzc3VlQ29tbWVudDMyNjM2MTE5Ng==", "user": {"login": "killeent", "id": 4529377, "node_id": "MDQ6VXNlcjQ1MjkzNzc=", "avatar_url": "https://avatars1.githubusercontent.com/u/4529377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/killeent", "html_url": "https://github.com/killeent", "followers_url": "https://api.github.com/users/killeent/followers", "following_url": "https://api.github.com/users/killeent/following{/other_user}", "gists_url": "https://api.github.com/users/killeent/gists{/gist_id}", "starred_url": "https://api.github.com/users/killeent/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/killeent/subscriptions", "organizations_url": "https://api.github.com/users/killeent/orgs", "repos_url": "https://api.github.com/users/killeent/repos", "events_url": "https://api.github.com/users/killeent/events{/privacy}", "received_events_url": "https://api.github.com/users/killeent/received_events", "type": "User", "site_admin": false}, "created_at": "2017-08-31T17:08:47Z", "updated_at": "2017-08-31T17:08:47Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1310570\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/soumith\">@soumith</a> my assumption is that all advanced indexing fixes should go against <code>v0.2.0</code> - is this not the case.</p>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=9110200\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/fmassa\">@fmassa</a> I'm not as familiar with how it works but you could imagine a situation where we are passing a sequence containing a variable, and thus I'm assuming PyTorch does not inspect the contents of such a sequence to unpack them.</p>", "body_text": "@soumith my assumption is that all advanced indexing fixes should go against v0.2.0 - is this not the case.\n@fmassa I'm not as familiar with how it works but you could imagine a situation where we are passing a sequence containing a variable, and thus I'm assuming PyTorch does not inspect the contents of such a sequence to unpack them.", "body": "@soumith my assumption is that all advanced indexing fixes should go against `v0.2.0` - is this not the case.\r\n\r\n@fmassa I'm not as familiar with how it works but you could imagine a situation where we are passing a sequence containing a variable, and thus I'm assuming PyTorch does not inspect the contents of such a sequence to unpack them."}