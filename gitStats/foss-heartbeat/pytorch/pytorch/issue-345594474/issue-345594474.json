{"url": "https://api.github.com/repos/pytorch/pytorch/issues/10000", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/10000/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/10000/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/10000/events", "html_url": "https://github.com/pytorch/pytorch/issues/10000", "id": 345594474, "node_id": "MDU6SXNzdWUzNDU1OTQ0NzQ=", "number": 10000, "title": "Torch handles assignment to all-False boolean masks incorrectly", "user": {"login": "carlosgmartin", "id": 8883917, "node_id": "MDQ6VXNlcjg4ODM5MTc=", "avatar_url": "https://avatars3.githubusercontent.com/u/8883917?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carlosgmartin", "html_url": "https://github.com/carlosgmartin", "followers_url": "https://api.github.com/users/carlosgmartin/followers", "following_url": "https://api.github.com/users/carlosgmartin/following{/other_user}", "gists_url": "https://api.github.com/users/carlosgmartin/gists{/gist_id}", "starred_url": "https://api.github.com/users/carlosgmartin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carlosgmartin/subscriptions", "organizations_url": "https://api.github.com/users/carlosgmartin/orgs", "repos_url": "https://api.github.com/users/carlosgmartin/repos", "events_url": "https://api.github.com/users/carlosgmartin/events{/privacy}", "received_events_url": "https://api.github.com/users/carlosgmartin/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 443483881, "node_id": "MDU6TGFiZWw0NDM0ODM4ODE=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/todo", "name": "todo", "color": "c2e0c6", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2018-07-30T02:58:39Z", "updated_at": "2018-08-05T05:18:35Z", "closed_at": "2018-08-05T05:18:35Z", "author_association": "NONE", "body_html": "<h2>Issue description</h2>\n<p>torch yields a RuntimeError when assigning a vector to an empty set of indices in an array.</p>\n<h2>Code example</h2>\n<pre><code>import torch\nx = torch.zeros((2, 2))\n\nmask = torch.tensor([True, True])\nprint(x[mask])\nx[mask] = torch.tensor([1., 2.])\n\nmask = torch.tensor([True, False])\nprint(x[mask])\nx[mask] = torch.tensor([1., 2.])\n\nmask = torch.tensor([False, True])\nprint(x[mask])\nx[mask] = torch.tensor([1., 2.])\n\nmask = torch.tensor([False, False])\nprint(x[mask])\nx[mask] = torch.tensor([1., 2.])\n</code></pre>\n<p>outputs</p>\n<pre><code>tensor([[0., 0.],\n        [0., 0.]])\ntensor([[1., 2.]])\ntensor([[1., 2.]])\ntensor([])\nTraceback (most recent call last):\n  File \"bug.py\", line 18, in &lt;module&gt;\n    x[mask] = torch.tensor([1., 2.])\nRuntimeError: The expanded size of the tensor (0) must match the existing size (2) at non-singleton dimension 0\n</code></pre>\n<h2>System Info</h2>\n<pre><code>$ python collect_env.py\nCollecting environment information...\nPyTorch version: 0.4.1\nIs debug build: No\nCUDA used to build PyTorch: None\n\nOS: Mac OSX 10.13.6\nGCC version: Could not collect\nCMake version: version 3.11.4\n\nPython version: 3.6\nIs CUDA available: No\nCUDA runtime version: No CUDA\nGPU models and configuration: No CUDA\nNvidia driver version: No CUDA\ncuDNN version: No CUDA\n\nVersions of relevant libraries:\n[pip] Could not collect\n[conda] torch                     0.4.1                     &lt;pip&gt;\n$ gcc --version\nConfigured with: --prefix=/Library/Developer/CommandLineTools/usr --with-gxx-include-dir=/usr/include/c++/4.2.1\nApple LLVM version 9.1.0 (clang-902.0.39.2)\nTarget: x86_64-apple-darwin17.7.0\nThread model: posix\nInstalledDir: /Library/Developer/CommandLineTools/usr/bin\n$ pip --version\npip 18.0 from /anaconda3/lib/python3.6/site-packages/pip (python 3.6)\n</code></pre>\n<h2>Current workaround</h2>\n<p>Current workaround involves using an if-statement conditioned on mask.any(), i.e.:</p>\n<pre><code>if mask.any(): x[mask] = torch.tensor([1., 2.])\n</code></pre>", "body_text": "Issue description\ntorch yields a RuntimeError when assigning a vector to an empty set of indices in an array.\nCode example\nimport torch\nx = torch.zeros((2, 2))\n\nmask = torch.tensor([True, True])\nprint(x[mask])\nx[mask] = torch.tensor([1., 2.])\n\nmask = torch.tensor([True, False])\nprint(x[mask])\nx[mask] = torch.tensor([1., 2.])\n\nmask = torch.tensor([False, True])\nprint(x[mask])\nx[mask] = torch.tensor([1., 2.])\n\nmask = torch.tensor([False, False])\nprint(x[mask])\nx[mask] = torch.tensor([1., 2.])\n\noutputs\ntensor([[0., 0.],\n        [0., 0.]])\ntensor([[1., 2.]])\ntensor([[1., 2.]])\ntensor([])\nTraceback (most recent call last):\n  File \"bug.py\", line 18, in <module>\n    x[mask] = torch.tensor([1., 2.])\nRuntimeError: The expanded size of the tensor (0) must match the existing size (2) at non-singleton dimension 0\n\nSystem Info\n$ python collect_env.py\nCollecting environment information...\nPyTorch version: 0.4.1\nIs debug build: No\nCUDA used to build PyTorch: None\n\nOS: Mac OSX 10.13.6\nGCC version: Could not collect\nCMake version: version 3.11.4\n\nPython version: 3.6\nIs CUDA available: No\nCUDA runtime version: No CUDA\nGPU models and configuration: No CUDA\nNvidia driver version: No CUDA\ncuDNN version: No CUDA\n\nVersions of relevant libraries:\n[pip] Could not collect\n[conda] torch                     0.4.1                     <pip>\n$ gcc --version\nConfigured with: --prefix=/Library/Developer/CommandLineTools/usr --with-gxx-include-dir=/usr/include/c++/4.2.1\nApple LLVM version 9.1.0 (clang-902.0.39.2)\nTarget: x86_64-apple-darwin17.7.0\nThread model: posix\nInstalledDir: /Library/Developer/CommandLineTools/usr/bin\n$ pip --version\npip 18.0 from /anaconda3/lib/python3.6/site-packages/pip (python 3.6)\n\nCurrent workaround\nCurrent workaround involves using an if-statement conditioned on mask.any(), i.e.:\nif mask.any(): x[mask] = torch.tensor([1., 2.])", "body": "## Issue description\r\n\r\ntorch yields a RuntimeError when assigning a vector to an empty set of indices in an array.\r\n\r\n## Code example\r\n\r\n```\r\nimport torch\r\nx = torch.zeros((2, 2))\r\n\r\nmask = torch.tensor([True, True])\r\nprint(x[mask])\r\nx[mask] = torch.tensor([1., 2.])\r\n\r\nmask = torch.tensor([True, False])\r\nprint(x[mask])\r\nx[mask] = torch.tensor([1., 2.])\r\n\r\nmask = torch.tensor([False, True])\r\nprint(x[mask])\r\nx[mask] = torch.tensor([1., 2.])\r\n\r\nmask = torch.tensor([False, False])\r\nprint(x[mask])\r\nx[mask] = torch.tensor([1., 2.])\r\n```\r\n\r\noutputs\r\n```\r\ntensor([[0., 0.],\r\n        [0., 0.]])\r\ntensor([[1., 2.]])\r\ntensor([[1., 2.]])\r\ntensor([])\r\nTraceback (most recent call last):\r\n  File \"bug.py\", line 18, in <module>\r\n    x[mask] = torch.tensor([1., 2.])\r\nRuntimeError: The expanded size of the tensor (0) must match the existing size (2) at non-singleton dimension 0\r\n```\r\n\r\n## System Info\r\n```\r\n$ python collect_env.py\r\nCollecting environment information...\r\nPyTorch version: 0.4.1\r\nIs debug build: No\r\nCUDA used to build PyTorch: None\r\n\r\nOS: Mac OSX 10.13.6\r\nGCC version: Could not collect\r\nCMake version: version 3.11.4\r\n\r\nPython version: 3.6\r\nIs CUDA available: No\r\nCUDA runtime version: No CUDA\r\nGPU models and configuration: No CUDA\r\nNvidia driver version: No CUDA\r\ncuDNN version: No CUDA\r\n\r\nVersions of relevant libraries:\r\n[pip] Could not collect\r\n[conda] torch                     0.4.1                     <pip>\r\n$ gcc --version\r\nConfigured with: --prefix=/Library/Developer/CommandLineTools/usr --with-gxx-include-dir=/usr/include/c++/4.2.1\r\nApple LLVM version 9.1.0 (clang-902.0.39.2)\r\nTarget: x86_64-apple-darwin17.7.0\r\nThread model: posix\r\nInstalledDir: /Library/Developer/CommandLineTools/usr/bin\r\n$ pip --version\r\npip 18.0 from /anaconda3/lib/python3.6/site-packages/pip (python 3.6)\r\n```\r\n\r\n## Current workaround\r\nCurrent workaround involves using an if-statement conditioned on mask.any(), i.e.:\r\n```\r\nif mask.any(): x[mask] = torch.tensor([1., 2.])\r\n```"}