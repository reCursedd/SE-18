{"url": "https://api.github.com/repos/pytorch/pytorch/issues/1178", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/1178/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/1178/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/1178/events", "html_url": "https://github.com/pytorch/pytorch/issues/1178", "id": 218963108, "node_id": "MDU6SXNzdWUyMTg5NjMxMDg=", "number": 1178, "title": "Batched sparse QR factorizations and solves with cusolver", "user": {"login": "bamos", "id": 707462, "node_id": "MDQ6VXNlcjcwNzQ2Mg==", "avatar_url": "https://avatars1.githubusercontent.com/u/707462?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bamos", "html_url": "https://github.com/bamos", "followers_url": "https://api.github.com/users/bamos/followers", "following_url": "https://api.github.com/users/bamos/following{/other_user}", "gists_url": "https://api.github.com/users/bamos/gists{/gist_id}", "starred_url": "https://api.github.com/users/bamos/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bamos/subscriptions", "organizations_url": "https://api.github.com/users/bamos/orgs", "repos_url": "https://api.github.com/users/bamos/repos", "events_url": "https://api.github.com/users/bamos/events{/privacy}", "received_events_url": "https://api.github.com/users/bamos/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 424131849, "node_id": "MDU6TGFiZWw0MjQxMzE4NDk=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true}, {"id": 679954154, "node_id": "MDU6TGFiZWw2Nzk5NTQxNTQ=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/sparse", "name": "sparse", "color": "bfd4f2", "default": false}, {"id": 443483881, "node_id": "MDU6TGFiZWw0NDM0ODM4ODE=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/todo", "name": "todo", "color": "c2e0c6", "default": false}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-04-03T15:03:12Z", "updated_at": "2018-09-12T21:03:34Z", "closed_at": null, "author_association": "CONTRIBUTOR", "body_html": "<p>These should significantly speed up <a href=\"https://github.com/locuslab/qpth\">qpth</a> in some cases when sparse matrices can be used. Here is a <a href=\"http://docs.nvidia.com/cuda/cusolver/#cusolver-lt-t-gt-csrqrbatched\" rel=\"nofollow\">cusolver reference</a> on these functions. This issue depends on the other core sparse functions being added (I think at least PR <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"218344414\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/1147\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/pytorch/pytorch/pull/1147/hovercard\" href=\"https://github.com/pytorch/pytorch/pull/1147\">#1147</a>, please add other dependencies here so I'll know when I can start) so I won't immediately start trying to add these. Also please post a reference if a good cusolver wrapper usage example gets added that we can use as a reference for wrapping these QR functions.</p>\n<p>Following the naming conventions of the batched LU factorizations and solves of <code>btrifact</code> and <code>btrisolve</code>, I propose <code>bqrfact</code> and <code>bqrsolve</code> for the names and for now we can just implement them for sparse tensors.</p>\n<p>\\cc <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=2465474\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/zkolter\">@zkolter</a></p>", "body_text": "These should significantly speed up qpth in some cases when sparse matrices can be used. Here is a cusolver reference on these functions. This issue depends on the other core sparse functions being added (I think at least PR #1147, please add other dependencies here so I'll know when I can start) so I won't immediately start trying to add these. Also please post a reference if a good cusolver wrapper usage example gets added that we can use as a reference for wrapping these QR functions.\nFollowing the naming conventions of the batched LU factorizations and solves of btrifact and btrisolve, I propose bqrfact and bqrsolve for the names and for now we can just implement them for sparse tensors.\n\\cc @zkolter", "body": "These should significantly speed up [qpth](https://github.com/locuslab/qpth) in some cases when sparse matrices can be used. Here is a [cusolver reference](http://docs.nvidia.com/cuda/cusolver/#cusolver-lt-t-gt-csrqrbatched) on these functions. This issue depends on the other core sparse functions being added (I think at least PR #1147, please add other dependencies here so I'll know when I can start) so I won't immediately start trying to add these. Also please post a reference if a good cusolver wrapper usage example gets added that we can use as a reference for wrapping these QR functions.\r\n\r\nFollowing the naming conventions of the batched LU factorizations and solves of `btrifact` and `btrisolve`, I propose `bqrfact` and `bqrsolve` for the names and for now we can just implement them for sparse tensors.\r\n\r\n\\cc @zkolter"}