{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/173234552", "pull_request_review_id": 102390890, "id": 173234552, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MzIzNDU1Mg==", "diff_hunk": "@@ -250,4 +250,50 @@ Tensor & index_put_(Tensor & self, TensorList indices, const Tensor & value) {\n   return src.put_(linearIndex, expandedValue);\n }\n \n+Tensor & index_copy_(Tensor & self, int64_t dim, const Tensor & index, const Tensor & source) {\n+  if (index.dim() != 1) {\n+    runtime_error(\"index_copy_(): Index should have dimension 1 (got %d)\", (int) index.dim());\n+  }\n+  if (dim >= source.dim()) {\n+    runtime_error(\"index_copy_(): Indexing dimension %d is out of bounds of source tensor (%d dimensions)\",\n+        (int) source.dim());\n+  }\n+  int64_t numIndices = index.size(0);\n+  if (numIndices != source.size(dim)) {\n+    runtime_error(\"index_copy_(): Number of indices (%d) should be equal to source.size(dim) (%d)\",\n+        (int)numIndices, (int)source.size(dim));\n+  }\n+  if (index.type().scalarType() != ScalarType::Long) {\n+    runtime_error(\"index_copy_(): Expected LongTensor for index\");\n+  }\n+\n+  auto selfSlicedSizes = std::vector<int64_t>(self.sizes());\n+  selfSlicedSizes.erase(selfSlicedSizes.begin() + dim);\n+  auto sourceSlicedSizes = std::vector<int64_t>(source.sizes());\n+  sourceSlicedSizes.erase(sourceSlicedSizes.begin());\n+  if (selfSlicedSizes.size() != sourceSlicedSizes.size() ||\n+      !std::equal(selfSlicedSizes.begin(), selfSlicedSizes.end(),\n+                  sourceSlicedSizes.begin())) {\n+    std::stringstream ss;\n+    ss << \"index_copy_(): Source/destination tensor must have same slice shapes. \";\n+    ss << \"Destination slice shape: \" << selfSlicedSizes << \" at dimension \" << dim;\n+    ss << \" and source slice shape: \" << sourceSlicedSizes << \" at dimension 0.\";\n+    throw std::runtime_error(ss.str());\n+  }\n+\n+  // Fast path for cuda\n+  if (self.is_cuda()) {\n+    return self._indexCopy_(dim, index, source);\n+  }\n+\n+  auto workingIndices = index.contiguous();\n+  int64_t* index_data = reinterpret_cast<int64_t*>(workingIndices.data_ptr());\n+  for (int64_t i = 0; i < numIndices; i++) {\n+    auto selfSlice = self.select(dim, index_data[i]);\n+    auto sourceSlice = source.select(dim, i);\n+    selfSlice.copy_(sourceSlice);", "path": "aten/src/ATen/native/Indexing.cpp", "position": 51, "original_position": 45, "commit_id": "70dbbdf79fd7fb7287d90a2426eccd177ee7b5ff", "original_commit_id": "fd3d642d4678752f3ff8762cb773b0a0bd39637a", "user": {"login": "zou3519", "id": 5652049, "node_id": "MDQ6VXNlcjU2NTIwNDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/5652049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zou3519", "html_url": "https://github.com/zou3519", "followers_url": "https://api.github.com/users/zou3519/followers", "following_url": "https://api.github.com/users/zou3519/following{/other_user}", "gists_url": "https://api.github.com/users/zou3519/gists{/gist_id}", "starred_url": "https://api.github.com/users/zou3519/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zou3519/subscriptions", "organizations_url": "https://api.github.com/users/zou3519/orgs", "repos_url": "https://api.github.com/users/zou3519/repos", "events_url": "https://api.github.com/users/zou3519/events{/privacy}", "received_events_url": "https://api.github.com/users/zou3519/received_events", "type": "User", "site_admin": false}, "body": "Possibly. Let me run some numbers.", "created_at": "2018-03-08T17:40:57Z", "updated_at": "2018-11-23T15:40:30Z", "html_url": "https://github.com/pytorch/pytorch/pull/5634#discussion_r173234552", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/5634", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/173234552"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/5634#discussion_r173234552"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/5634"}}, "body_html": "<p>Possibly. Let me run some numbers.</p>", "body_text": "Possibly. Let me run some numbers.", "in_reply_to_id": 173233206}