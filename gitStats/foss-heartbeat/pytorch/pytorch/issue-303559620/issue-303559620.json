{"url": "https://api.github.com/repos/pytorch/pytorch/issues/5634", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/5634/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/5634/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/5634/events", "html_url": "https://github.com/pytorch/pytorch/pull/5634", "id": 303559620, "node_id": "MDExOlB1bGxSZXF1ZXN0MTczNzk1OTAw", "number": 5634, "title": "Move tensor.index_copy_ 's CPU path to ATen", "user": {"login": "zou3519", "id": 5652049, "node_id": "MDQ6VXNlcjU2NTIwNDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/5652049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zou3519", "html_url": "https://github.com/zou3519", "followers_url": "https://api.github.com/users/zou3519/followers", "following_url": "https://api.github.com/users/zou3519/following{/other_user}", "gists_url": "https://api.github.com/users/zou3519/gists{/gist_id}", "starred_url": "https://api.github.com/users/zou3519/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zou3519/subscriptions", "organizations_url": "https://api.github.com/users/zou3519/orgs", "repos_url": "https://api.github.com/users/zou3519/repos", "events_url": "https://api.github.com/users/zou3519/events{/privacy}", "received_events_url": "https://api.github.com/users/zou3519/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-03-08T17:13:19Z", "updated_at": "2018-11-23T15:40:31Z", "closed_at": "2018-03-08T19:28:48Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/5634", "html_url": "https://github.com/pytorch/pytorch/pull/5634", "diff_url": "https://github.com/pytorch/pytorch/pull/5634.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/5634.patch"}, "body_html": "<p><span class=\"issue-keyword tooltipped tooltipped-se\" aria-label=\"This pull request closes issue #1777.\">Fixes</span> <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"235069343\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/1777\" data-hovercard-type=\"issue\" data-hovercard-url=\"/pytorch/pytorch/issues/1777/hovercard\" href=\"https://github.com/pytorch/pytorch/issues/1777\">#1777</a>.</p>\n<p>Previously, there was a bug where index_copy on CUDA would not error out if the shape of the source slice (in dimension 0) is not equal to the shape of the destination slice (in the specified dimension).<br>\nFor example,</p>\n<pre><code>x = torch.zeros(3, 1)\nt = torch.arange(3)\nindex = torch.LongTensor([2, 1, 0])\nx.index_copy_(0, index, t) # x has slizes of size (1, 1) in dimension 0 but t has zero-dim slices in dimension 0.\n</code></pre>\n<p>would work on CUDA but not on CPU. This PR changes it so that both the CPU and CUDA paths use the same error checking so that the above code will error out on both CPU and CUDA.</p>\n<p>To do this, I moved the CPU implementation of index_copy_ to ATen.</p>", "body_text": "Fixes #1777.\nPreviously, there was a bug where index_copy on CUDA would not error out if the shape of the source slice (in dimension 0) is not equal to the shape of the destination slice (in the specified dimension).\nFor example,\nx = torch.zeros(3, 1)\nt = torch.arange(3)\nindex = torch.LongTensor([2, 1, 0])\nx.index_copy_(0, index, t) # x has slizes of size (1, 1) in dimension 0 but t has zero-dim slices in dimension 0.\n\nwould work on CUDA but not on CPU. This PR changes it so that both the CPU and CUDA paths use the same error checking so that the above code will error out on both CPU and CUDA.\nTo do this, I moved the CPU implementation of index_copy_ to ATen.", "body": "Fixes #1777.\r\n\r\nPreviously, there was a bug where index_copy on CUDA would not error out if the shape of the source slice (in dimension 0) is not equal to the shape of the destination slice (in the specified dimension).\r\nFor example,\r\n```\r\nx = torch.zeros(3, 1)\r\nt = torch.arange(3)\r\nindex = torch.LongTensor([2, 1, 0])\r\nx.index_copy_(0, index, t) # x has slizes of size (1, 1) in dimension 0 but t has zero-dim slices in dimension 0.\r\n```\r\nwould work on CUDA but not on CPU. This PR changes it so that both the CPU and CUDA paths use the same error checking so that the above code will error out on both CPU and CUDA.\r\n\r\nTo do this, I moved the CPU implementation of index_copy_ to ATen."}