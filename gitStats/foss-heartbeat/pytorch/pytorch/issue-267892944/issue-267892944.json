{"url": "https://api.github.com/repos/pytorch/pytorch/issues/3252", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/3252/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/3252/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/3252/events", "html_url": "https://github.com/pytorch/pytorch/pull/3252", "id": 267892944, "node_id": "MDExOlB1bGxSZXF1ZXN0MTQ4Mjk0NjAx", "number": 3252, "title": "Fix clang-802.0.42 tuple overload bug, fixes #3234.", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-10-24T04:23:13Z", "updated_at": "2018-11-23T15:35:39Z", "closed_at": "2017-10-24T17:13:39Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/3252", "html_url": "https://github.com/pytorch/pytorch/pull/3252", "diff_url": "https://github.com/pytorch/pytorch/pull/3252.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/3252.patch"}, "body_html": "<p>Originally, my plan for emit_record_trace was to keep it as<br>\nsimple as possible, if at the expense of some somewhat ugly<br>\noverloads.  So this meant we had a 'recordTrace' function<br>\nwith overloads like this:</p>\n<p>recordTrace(..., const Variable&amp; out)<br>\nrecordTrace(..., const std::tuple&lt;Variable, Variable&gt;&amp; out)</p>\n<p>Unfortunately, this triggers a bug in clang-802.0.42<br>\n(widely used in macOS Sierra 10.12.6) wherein a Variable is<br>\nimplicitly convertible into a std::tuple&lt;Variable, Variable&gt;;<br>\na minimal repro can be seen below here:</p>\n<p>#include <br>\nstruct T {};<br>\nvoid f(const std::tuple&lt;T, T&gt;&amp;) {}<br>\nvoid g(T&amp; x) { f(x); }</p>\n<p>To work around this bug, the code generator is a bit more<br>\ncomplicated, and is taught how to handle this situation.</p>\n<p>Signed-off-by: Edward Z. Yang <a href=\"mailto:ezyang@fb.com\">ezyang@fb.com</a></p>", "body_text": "Originally, my plan for emit_record_trace was to keep it as\nsimple as possible, if at the expense of some somewhat ugly\noverloads.  So this meant we had a 'recordTrace' function\nwith overloads like this:\nrecordTrace(..., const Variable& out)\nrecordTrace(..., const std::tuple<Variable, Variable>& out)\nUnfortunately, this triggers a bug in clang-802.0.42\n(widely used in macOS Sierra 10.12.6) wherein a Variable is\nimplicitly convertible into a std::tuple<Variable, Variable>;\na minimal repro can be seen below here:\n#include \nstruct T {};\nvoid f(const std::tuple<T, T>&) {}\nvoid g(T& x) { f(x); }\nTo work around this bug, the code generator is a bit more\ncomplicated, and is taught how to handle this situation.\nSigned-off-by: Edward Z. Yang ezyang@fb.com", "body": "Originally, my plan for emit_record_trace was to keep it as\r\nsimple as possible, if at the expense of some somewhat ugly\r\noverloads.  So this meant we had a 'recordTrace' function\r\nwith overloads like this:\r\n\r\n  recordTrace(..., const Variable& out)\r\n  recordTrace(..., const std::tuple<Variable, Variable>& out)\r\n\r\nUnfortunately, this triggers a bug in clang-802.0.42\r\n(widely used in macOS Sierra 10.12.6) wherein a Variable is\r\nimplicitly convertible into a std::tuple<Variable, Variable>;\r\na minimal repro can be seen below here:\r\n\r\n  #include <tuple>\r\n  struct T {};\r\n  void f(const std::tuple<T, T>&) {}\r\n  void g(T& x) { f(x); }\r\n\r\nTo work around this bug, the code generator is a bit more\r\ncomplicated, and is taught how to handle this situation.\r\n\r\nSigned-off-by: Edward Z. Yang <ezyang@fb.com>"}