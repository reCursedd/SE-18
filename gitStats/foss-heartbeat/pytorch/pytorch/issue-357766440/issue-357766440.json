{"url": "https://api.github.com/repos/pytorch/pytorch/issues/11339", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/11339/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/11339/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/11339/events", "html_url": "https://github.com/pytorch/pytorch/issues/11339", "id": 357766440, "node_id": "MDU6SXNzdWUzNTc3NjY0NDA=", "number": 11339, "title": "Unexpected datatypes in exported ONNX ops Less, Greater, Neg", "user": {"login": "spandantiwari", "id": 23646532, "node_id": "MDQ6VXNlcjIzNjQ2NTMy", "avatar_url": "https://avatars3.githubusercontent.com/u/23646532?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spandantiwari", "html_url": "https://github.com/spandantiwari", "followers_url": "https://api.github.com/users/spandantiwari/followers", "following_url": "https://api.github.com/users/spandantiwari/following{/other_user}", "gists_url": "https://api.github.com/users/spandantiwari/gists{/gist_id}", "starred_url": "https://api.github.com/users/spandantiwari/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spandantiwari/subscriptions", "organizations_url": "https://api.github.com/users/spandantiwari/orgs", "repos_url": "https://api.github.com/users/spandantiwari/repos", "events_url": "https://api.github.com/users/spandantiwari/events{/privacy}", "received_events_url": "https://api.github.com/users/spandantiwari/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 693805995, "node_id": "MDU6TGFiZWw2OTM4MDU5OTU=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/onnx", "name": "onnx", "color": "e99695", "default": false}], "state": "open", "locked": false, "assignee": {"login": "houseroad", "id": 30275821, "node_id": "MDQ6VXNlcjMwMjc1ODIx", "avatar_url": "https://avatars0.githubusercontent.com/u/30275821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/houseroad", "html_url": "https://github.com/houseroad", "followers_url": "https://api.github.com/users/houseroad/followers", "following_url": "https://api.github.com/users/houseroad/following{/other_user}", "gists_url": "https://api.github.com/users/houseroad/gists{/gist_id}", "starred_url": "https://api.github.com/users/houseroad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/houseroad/subscriptions", "organizations_url": "https://api.github.com/users/houseroad/orgs", "repos_url": "https://api.github.com/users/houseroad/repos", "events_url": "https://api.github.com/users/houseroad/events{/privacy}", "received_events_url": "https://api.github.com/users/houseroad/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "houseroad", "id": 30275821, "node_id": "MDQ6VXNlcjMwMjc1ODIx", "avatar_url": "https://avatars0.githubusercontent.com/u/30275821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/houseroad", "html_url": "https://github.com/houseroad", "followers_url": "https://api.github.com/users/houseroad/followers", "following_url": "https://api.github.com/users/houseroad/following{/other_user}", "gists_url": "https://api.github.com/users/houseroad/gists{/gist_id}", "starred_url": "https://api.github.com/users/houseroad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/houseroad/subscriptions", "organizations_url": "https://api.github.com/users/houseroad/orgs", "repos_url": "https://api.github.com/users/houseroad/repos", "events_url": "https://api.github.com/users/houseroad/events{/privacy}", "received_events_url": "https://api.github.com/users/houseroad/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 3, "created_at": "2018-09-06T18:07:33Z", "updated_at": "2018-10-10T18:09:11Z", "closed_at": null, "author_association": "CONTRIBUTOR", "body_html": "<p>I am seeing this issue in PyTorch-exported ONNX models where some of the exported ops, such as <code>Less</code>, <code>Greater</code>, and <code>Neg</code>, have unsupported datatypes for input and output tensors.</p>\n<p>As an example, consider the op <code>torch.lt</code>, which gets exported as ONNX op <code>Less</code>. The inputs to this <code>torch.lt</code> op could be tensors of integer type. When that\u2019s the case the exported ONNX op <code>Less</code> has input argument as tensor of integer type, e.g. <code>tensor(int32)</code>. But integer tensors are not valid inputs as per the <a href=\"https://github.com/onnx/onnx/blob/master/docs/Operators.md#Less\">ONNX spec</a>, and therefore the ONNX op is having trouble loading in other runtimes. Additionally, on the output side, the exported <code>Less</code> op has the type <code>tensor(uint8)</code>, which is also not consistent with the ONNX spec which specifies it to be <code>tensor(bool)</code>.</p>\n<p>I see similar issues in the export of other ONNX ops such as <code>Greater</code>, <code>Neg</code> (there could be others).</p>\n<p>I am working with source build from master that is a couple of days old.</p>\n<p>I can submit a PR for this issue. As a start we could insert <code>Cast</code> node on the input side during export. The output side may require a bit of a deeper fix where the <code>Node</code> that is created for the <code>Graph</code> object itself has the right type. But I haven\u2019t been able to pinpoint where exactly that happens in code. Any pointers/help would be very helpful.</p>", "body_text": "I am seeing this issue in PyTorch-exported ONNX models where some of the exported ops, such as Less, Greater, and Neg, have unsupported datatypes for input and output tensors.\nAs an example, consider the op torch.lt, which gets exported as ONNX op Less. The inputs to this torch.lt op could be tensors of integer type. When that\u2019s the case the exported ONNX op Less has input argument as tensor of integer type, e.g. tensor(int32). But integer tensors are not valid inputs as per the ONNX spec, and therefore the ONNX op is having trouble loading in other runtimes. Additionally, on the output side, the exported Less op has the type tensor(uint8), which is also not consistent with the ONNX spec which specifies it to be tensor(bool).\nI see similar issues in the export of other ONNX ops such as Greater, Neg (there could be others).\nI am working with source build from master that is a couple of days old.\nI can submit a PR for this issue. As a start we could insert Cast node on the input side during export. The output side may require a bit of a deeper fix where the Node that is created for the Graph object itself has the right type. But I haven\u2019t been able to pinpoint where exactly that happens in code. Any pointers/help would be very helpful.", "body": "I am seeing this issue in PyTorch-exported ONNX models where some of the exported ops, such as `Less`, `Greater`, and `Neg`, have unsupported datatypes for input and output tensors.  \r\n\r\nAs an example, consider the op `torch.lt`, which gets exported as ONNX op `Less`. The inputs to this `torch.lt` op could be tensors of integer type. When that\u2019s the case the exported ONNX op `Less` has input argument as tensor of integer type, e.g. `tensor(int32)`. But integer tensors are not valid inputs as per the [ONNX spec]( https://github.com/onnx/onnx/blob/master/docs/Operators.md#Less), and therefore the ONNX op is having trouble loading in other runtimes. Additionally, on the output side, the exported `Less` op has the type `tensor(uint8)`, which is also not consistent with the ONNX spec which specifies it to be `tensor(bool)`.\r\n\r\nI see similar issues in the export of other ONNX ops such as `Greater`, `Neg` (there could be others).\r\n\r\nI am working with source build from master that is a couple of days old.\r\n\r\nI can submit a PR for this issue. As a start we could insert `Cast` node on the input side during export. The output side may require a bit of a deeper fix where the `Node` that is created for the `Graph` object itself has the right type. But I haven\u2019t been able to pinpoint where exactly that happens in code. Any pointers/help would be very helpful.\r\n\r\n\r\n"}