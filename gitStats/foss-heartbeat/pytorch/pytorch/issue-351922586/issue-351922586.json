{"url": "https://api.github.com/repos/pytorch/pytorch/issues/10667", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/10667/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/10667/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/10667/events", "html_url": "https://github.com/pytorch/pytorch/issues/10667", "id": 351922586, "node_id": "MDU6SXNzdWUzNTE5MjI1ODY=", "number": 10667, "title": "[Caffe2] Error importing ConvTranspose2d to Caffe2 with ONNX", "user": {"login": "santi-pdp", "id": 7583502, "node_id": "MDQ6VXNlcjc1ODM1MDI=", "avatar_url": "https://avatars0.githubusercontent.com/u/7583502?v=4", "gravatar_id": "", "url": "https://api.github.com/users/santi-pdp", "html_url": "https://github.com/santi-pdp", "followers_url": "https://api.github.com/users/santi-pdp/followers", "following_url": "https://api.github.com/users/santi-pdp/following{/other_user}", "gists_url": "https://api.github.com/users/santi-pdp/gists{/gist_id}", "starred_url": "https://api.github.com/users/santi-pdp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/santi-pdp/subscriptions", "organizations_url": "https://api.github.com/users/santi-pdp/orgs", "repos_url": "https://api.github.com/users/santi-pdp/repos", "events_url": "https://api.github.com/users/santi-pdp/events{/privacy}", "received_events_url": "https://api.github.com/users/santi-pdp/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 890282107, "node_id": "MDU6TGFiZWw4OTAyODIxMDc=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/caffe2", "name": "caffe2", "color": "210aa8", "default": false}, {"id": 693805995, "node_id": "MDU6TGFiZWw2OTM4MDU5OTU=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/onnx", "name": "onnx", "color": "e99695", "default": false}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-08-19T18:11:12Z", "updated_at": "2018-09-10T19:24:51Z", "closed_at": null, "author_association": "NONE", "body_html": "<h2>Issue description</h2>\n<p>Shape is not the expected one as in PyTorch when importing ONNX description into Caffe2 for <code>ConvTranspose2d</code> layers. I made a reduced version of a MobileNet, which comprises the encoder w/ separable strided convs and stuff which all work okay, but when it comes to the decoder there are wrong shapes coming out of the \"deconvolution\" layers. I relate this to the <code>padding</code> and <code>output_padding</code> combination, which may get lost in ONNX, just expecting one sort of asymmetric padding (could it be? I know PyTorch deconv <code>padding</code> is purely symmetric, so <code>output_padding</code> helps enforcing the output shape we want by putting zeros in the bottom-right corner, but I don't know what ONNX does).</p>\n<h2>Code example</h2>\n<p>An example definition of my deconv layers is:</p>\n<p><code>self.dec1 = nn.ConvTranspose2d(320, 160, 3, stride=2, output_padding=1,  padding=1)</code></p>\n<p>such that the output resolution should be the exact double (e.g. <code>7</code> -&gt; <code>14</code>), but it ends up being <code>14</code> in PyTorch and <code>13</code> in Caffe2 inference. If I change the definition to avoid the paddings and get exact fits without overlaps in the deconv, things change:</p>\n<p><code>self.dec1 = nn.ConvTranspose2d(320, 160, 2, stride=2, output_padding=0,  padding=0)</code></p>\n<p>It gives the right shape, so I have no problem anymore.</p>\n<h2>System Info</h2>\n<pre><code>Collecting environment information...\nPyTorch version: 0.4.0\nIs debug build: No\nCUDA used to build PyTorch: 9.1.85\n\nOS: Linux Mint 18.1 Serena\nGCC version: (Ubuntu 5.4.0-6ubuntu1~16.04.10) 5.4.0 20160609\nCMake version: version 3.11.1\n\nPython version: 3.6\nIs CUDA available: Yes\nCUDA runtime version: 9.0.176\nGPU models and configuration: GPU 0: GeForce GTX 1070\nNvidia driver version: 387.26\ncuDNN version: Probably one of the following:\n/usr/local/cuda-8.0/targets/x86_64-linux/lib/libcudnn.so.5.1.10\n/usr/local/cuda-8.0/targets/x86_64-linux/lib/libcudnn.so.6.0.20\n/usr/local/cuda-8.0/targets/x86_64-linux/lib/libcudnn.so.7\n/usr/local/cuda-8.0/targets/x86_64-linux/lib/libcudnn.so.7.0.4\n/usr/local/cuda-8.0/targets/x86_64-linux/lib/libcudnn_static.a\n/usr/local/cuda-9.0/targets/x86_64-linux/lib/libcudnn.so\n/usr/local/cuda-9.0/targets/x86_64-linux/lib/libcudnn.so.5\n/usr/local/cuda-9.0/targets/x86_64-linux/lib/libcudnn.so.5.1.10\n/usr/local/cuda-9.0/targets/x86_64-linux/lib/libcudnn.so.6\n/usr/local/cuda-9.0/targets/x86_64-linux/lib/libcudnn.so.6.0.20\n/usr/local/cuda-9.0/targets/x86_64-linux/lib/libcudnn.so.7\n/usr/local/cuda-9.0/targets/x86_64-linux/lib/libcudnn.so.7.0.4\n/usr/local/cuda-9.0/targets/x86_64-linux/lib/libcudnn.so.7.1.3\n/usr/local/cuda-9.0/targets/x86_64-linux/lib/libcudnn_static.a\n\nVersions of relevant libraries:\n[pip3] numpy (1.14.3)\n[pip3] numpydoc (0.7.0)\n[pip3] torch (0.5.0a0+0169ac5)\n[pip3] torchsample (0.1.3)\n[pip3] torchvision (0.2.1)\n[conda] cuda80                    1.0                           0    soumith\n[conda] cuda90                    1.0                  h6433d27_0    pytorch\n[conda] cuda91                    1.0                  h4c16780_0    pytorch\n[conda] magma-cuda90              2.3.0                         1    pytorch\n[conda] pytorch                   0.4.0           py36_cuda9.1.85_cudnn7.1.2_1  [cuda91]  pytorch\n[conda] torch                     0.5.0a0+0169ac5           &lt;pip&gt;\n[conda] torchvision               0.2.1                    py36_1    pytorch\n</code></pre>", "body_text": "Issue description\nShape is not the expected one as in PyTorch when importing ONNX description into Caffe2 for ConvTranspose2d layers. I made a reduced version of a MobileNet, which comprises the encoder w/ separable strided convs and stuff which all work okay, but when it comes to the decoder there are wrong shapes coming out of the \"deconvolution\" layers. I relate this to the padding and output_padding combination, which may get lost in ONNX, just expecting one sort of asymmetric padding (could it be? I know PyTorch deconv padding is purely symmetric, so output_padding helps enforcing the output shape we want by putting zeros in the bottom-right corner, but I don't know what ONNX does).\nCode example\nAn example definition of my deconv layers is:\nself.dec1 = nn.ConvTranspose2d(320, 160, 3, stride=2, output_padding=1,  padding=1)\nsuch that the output resolution should be the exact double (e.g. 7 -> 14), but it ends up being 14 in PyTorch and 13 in Caffe2 inference. If I change the definition to avoid the paddings and get exact fits without overlaps in the deconv, things change:\nself.dec1 = nn.ConvTranspose2d(320, 160, 2, stride=2, output_padding=0,  padding=0)\nIt gives the right shape, so I have no problem anymore.\nSystem Info\nCollecting environment information...\nPyTorch version: 0.4.0\nIs debug build: No\nCUDA used to build PyTorch: 9.1.85\n\nOS: Linux Mint 18.1 Serena\nGCC version: (Ubuntu 5.4.0-6ubuntu1~16.04.10) 5.4.0 20160609\nCMake version: version 3.11.1\n\nPython version: 3.6\nIs CUDA available: Yes\nCUDA runtime version: 9.0.176\nGPU models and configuration: GPU 0: GeForce GTX 1070\nNvidia driver version: 387.26\ncuDNN version: Probably one of the following:\n/usr/local/cuda-8.0/targets/x86_64-linux/lib/libcudnn.so.5.1.10\n/usr/local/cuda-8.0/targets/x86_64-linux/lib/libcudnn.so.6.0.20\n/usr/local/cuda-8.0/targets/x86_64-linux/lib/libcudnn.so.7\n/usr/local/cuda-8.0/targets/x86_64-linux/lib/libcudnn.so.7.0.4\n/usr/local/cuda-8.0/targets/x86_64-linux/lib/libcudnn_static.a\n/usr/local/cuda-9.0/targets/x86_64-linux/lib/libcudnn.so\n/usr/local/cuda-9.0/targets/x86_64-linux/lib/libcudnn.so.5\n/usr/local/cuda-9.0/targets/x86_64-linux/lib/libcudnn.so.5.1.10\n/usr/local/cuda-9.0/targets/x86_64-linux/lib/libcudnn.so.6\n/usr/local/cuda-9.0/targets/x86_64-linux/lib/libcudnn.so.6.0.20\n/usr/local/cuda-9.0/targets/x86_64-linux/lib/libcudnn.so.7\n/usr/local/cuda-9.0/targets/x86_64-linux/lib/libcudnn.so.7.0.4\n/usr/local/cuda-9.0/targets/x86_64-linux/lib/libcudnn.so.7.1.3\n/usr/local/cuda-9.0/targets/x86_64-linux/lib/libcudnn_static.a\n\nVersions of relevant libraries:\n[pip3] numpy (1.14.3)\n[pip3] numpydoc (0.7.0)\n[pip3] torch (0.5.0a0+0169ac5)\n[pip3] torchsample (0.1.3)\n[pip3] torchvision (0.2.1)\n[conda] cuda80                    1.0                           0    soumith\n[conda] cuda90                    1.0                  h6433d27_0    pytorch\n[conda] cuda91                    1.0                  h4c16780_0    pytorch\n[conda] magma-cuda90              2.3.0                         1    pytorch\n[conda] pytorch                   0.4.0           py36_cuda9.1.85_cudnn7.1.2_1  [cuda91]  pytorch\n[conda] torch                     0.5.0a0+0169ac5           <pip>\n[conda] torchvision               0.2.1                    py36_1    pytorch", "body": "## Issue description\r\n\r\nShape is not the expected one as in PyTorch when importing ONNX description into Caffe2 for `ConvTranspose2d` layers. I made a reduced version of a MobileNet, which comprises the encoder w/ separable strided convs and stuff which all work okay, but when it comes to the decoder there are wrong shapes coming out of the \"deconvolution\" layers. I relate this to the `padding` and `output_padding` combination, which may get lost in ONNX, just expecting one sort of asymmetric padding (could it be? I know PyTorch deconv `padding` is purely symmetric, so `output_padding` helps enforcing the output shape we want by putting zeros in the bottom-right corner, but I don't know what ONNX does). \r\n\r\n## Code example\r\n\r\nAn example definition of my deconv layers is:\r\n\r\n`self.dec1 = nn.ConvTranspose2d(320, 160, 3, stride=2, output_padding=1,  padding=1)`\r\n\r\nsuch that the output resolution should be the exact double (e.g. `7` -> `14`), but it ends up being `14` in PyTorch and `13` in Caffe2 inference. If I change the definition to avoid the paddings and get exact fits without overlaps in the deconv, things change:\r\n\r\n`self.dec1 = nn.ConvTranspose2d(320, 160, 2, stride=2, output_padding=0,  padding=0)`\r\n\r\nIt gives the right shape, so I have no problem anymore.\r\n\r\n## System Info\r\n\r\n```\r\nCollecting environment information...\r\nPyTorch version: 0.4.0\r\nIs debug build: No\r\nCUDA used to build PyTorch: 9.1.85\r\n\r\nOS: Linux Mint 18.1 Serena\r\nGCC version: (Ubuntu 5.4.0-6ubuntu1~16.04.10) 5.4.0 20160609\r\nCMake version: version 3.11.1\r\n\r\nPython version: 3.6\r\nIs CUDA available: Yes\r\nCUDA runtime version: 9.0.176\r\nGPU models and configuration: GPU 0: GeForce GTX 1070\r\nNvidia driver version: 387.26\r\ncuDNN version: Probably one of the following:\r\n/usr/local/cuda-8.0/targets/x86_64-linux/lib/libcudnn.so.5.1.10\r\n/usr/local/cuda-8.0/targets/x86_64-linux/lib/libcudnn.so.6.0.20\r\n/usr/local/cuda-8.0/targets/x86_64-linux/lib/libcudnn.so.7\r\n/usr/local/cuda-8.0/targets/x86_64-linux/lib/libcudnn.so.7.0.4\r\n/usr/local/cuda-8.0/targets/x86_64-linux/lib/libcudnn_static.a\r\n/usr/local/cuda-9.0/targets/x86_64-linux/lib/libcudnn.so\r\n/usr/local/cuda-9.0/targets/x86_64-linux/lib/libcudnn.so.5\r\n/usr/local/cuda-9.0/targets/x86_64-linux/lib/libcudnn.so.5.1.10\r\n/usr/local/cuda-9.0/targets/x86_64-linux/lib/libcudnn.so.6\r\n/usr/local/cuda-9.0/targets/x86_64-linux/lib/libcudnn.so.6.0.20\r\n/usr/local/cuda-9.0/targets/x86_64-linux/lib/libcudnn.so.7\r\n/usr/local/cuda-9.0/targets/x86_64-linux/lib/libcudnn.so.7.0.4\r\n/usr/local/cuda-9.0/targets/x86_64-linux/lib/libcudnn.so.7.1.3\r\n/usr/local/cuda-9.0/targets/x86_64-linux/lib/libcudnn_static.a\r\n\r\nVersions of relevant libraries:\r\n[pip3] numpy (1.14.3)\r\n[pip3] numpydoc (0.7.0)\r\n[pip3] torch (0.5.0a0+0169ac5)\r\n[pip3] torchsample (0.1.3)\r\n[pip3] torchvision (0.2.1)\r\n[conda] cuda80                    1.0                           0    soumith\r\n[conda] cuda90                    1.0                  h6433d27_0    pytorch\r\n[conda] cuda91                    1.0                  h4c16780_0    pytorch\r\n[conda] magma-cuda90              2.3.0                         1    pytorch\r\n[conda] pytorch                   0.4.0           py36_cuda9.1.85_cudnn7.1.2_1  [cuda91]  pytorch\r\n[conda] torch                     0.5.0a0+0169ac5           <pip>\r\n[conda] torchvision               0.2.1                    py36_1    pytorch\r\n```\r\n"}