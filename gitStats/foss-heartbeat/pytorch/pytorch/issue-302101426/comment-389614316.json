{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/389614316", "html_url": "https://github.com/pytorch/pytorch/issues/5554#issuecomment-389614316", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/5554", "id": 389614316, "node_id": "MDEyOklzc3VlQ29tbWVudDM4OTYxNDMxNg==", "user": {"login": "zou3519", "id": 5652049, "node_id": "MDQ6VXNlcjU2NTIwNDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/5652049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zou3519", "html_url": "https://github.com/zou3519", "followers_url": "https://api.github.com/users/zou3519/followers", "following_url": "https://api.github.com/users/zou3519/following{/other_user}", "gists_url": "https://api.github.com/users/zou3519/gists{/gist_id}", "starred_url": "https://api.github.com/users/zou3519/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zou3519/subscriptions", "organizations_url": "https://api.github.com/users/zou3519/orgs", "repos_url": "https://api.github.com/users/zou3519/repos", "events_url": "https://api.github.com/users/zou3519/events{/privacy}", "received_events_url": "https://api.github.com/users/zou3519/received_events", "type": "User", "site_admin": false}, "created_at": "2018-05-16T18:11:17Z", "updated_at": "2018-05-16T18:11:17Z", "author_association": "CONTRIBUTOR", "body_html": "<p>The input to NLLLoss should be of size (N, C), while the target is of size (C,).<br>\nThe way one calls NLLLoss is <code>loss_fn(input, target)</code>.  Right now your input and target tensors don't have the right size.</p>\n<p>That being said, I can't reproduce your error message on 0.4. This it what happens when I use tensors of the same size as your tensors:</p>\n<pre><code>\nIn [1]: import torch\n   ...: import torch.nn as nn\n   ...:\n   ...: loss_fn = nn.NLLLoss()\n   ...: input = torch.randn(3)\n   ...: target = torch.ones(1, 3, dtype=torch.long)\n   ...: loss_fn(input, target)\n   ...:\n---------------------------------------------------------------------------\nValueError                                Traceback (most recent call last)\n&lt;ipython-input-1-bdb29da7c6a9&gt; in &lt;module&gt;()\n      5 input = torch.randn(3)\n      6 target = torch.ones(1, 3, dtype=torch.long)\n----&gt; 7 loss_fn(input, target)\n\n~/pytorch/torch/nn/modules/module.py in __call__(self, *input, **kwargs)\n    489             result = self._slow_forward(*input, **kwargs)\n    490         else:\n--&gt; 491             result = self.forward(*input, **kwargs)\n    492         for hook in self._forward_hooks.values():\n    493             hook_result = hook(self, input, result)\n\n~/pytorch/torch/nn/modules/loss.py in forward(self, input, target)\n    191         _assert_no_grad(target)\n    192         return F.nll_loss(input, target, self.weight, self.size_average,\n--&gt; 193                           self.ignore_index, self.reduce)\n    194\n    195\n\n~/pytorch/torch/nn/functional.py in nll_loss(input, target, weight, size_average, ignore_index, reduce)\n   1336     dim = input.dim()\n   1337     if dim &lt; 2:\n-&gt; 1338         raise ValueError('Expected 2 or more dimensions (got {})'.format(dim))\n   1339\n   1340     if input.size(0) != target.size(0):\n\nValueError: Expected 2 or more dimensions (got 1)\n\n</code></pre>", "body_text": "The input to NLLLoss should be of size (N, C), while the target is of size (C,).\nThe way one calls NLLLoss is loss_fn(input, target).  Right now your input and target tensors don't have the right size.\nThat being said, I can't reproduce your error message on 0.4. This it what happens when I use tensors of the same size as your tensors:\n\nIn [1]: import torch\n   ...: import torch.nn as nn\n   ...:\n   ...: loss_fn = nn.NLLLoss()\n   ...: input = torch.randn(3)\n   ...: target = torch.ones(1, 3, dtype=torch.long)\n   ...: loss_fn(input, target)\n   ...:\n---------------------------------------------------------------------------\nValueError                                Traceback (most recent call last)\n<ipython-input-1-bdb29da7c6a9> in <module>()\n      5 input = torch.randn(3)\n      6 target = torch.ones(1, 3, dtype=torch.long)\n----> 7 loss_fn(input, target)\n\n~/pytorch/torch/nn/modules/module.py in __call__(self, *input, **kwargs)\n    489             result = self._slow_forward(*input, **kwargs)\n    490         else:\n--> 491             result = self.forward(*input, **kwargs)\n    492         for hook in self._forward_hooks.values():\n    493             hook_result = hook(self, input, result)\n\n~/pytorch/torch/nn/modules/loss.py in forward(self, input, target)\n    191         _assert_no_grad(target)\n    192         return F.nll_loss(input, target, self.weight, self.size_average,\n--> 193                           self.ignore_index, self.reduce)\n    194\n    195\n\n~/pytorch/torch/nn/functional.py in nll_loss(input, target, weight, size_average, ignore_index, reduce)\n   1336     dim = input.dim()\n   1337     if dim < 2:\n-> 1338         raise ValueError('Expected 2 or more dimensions (got {})'.format(dim))\n   1339\n   1340     if input.size(0) != target.size(0):\n\nValueError: Expected 2 or more dimensions (got 1)", "body": "The input to NLLLoss should be of size (N, C), while the target is of size (C,).\r\nThe way one calls NLLLoss is `loss_fn(input, target)`.  Right now your input and target tensors don't have the right size.\r\n\r\nThat being said, I can't reproduce your error message on 0.4. This it what happens when I use tensors of the same size as your tensors:\r\n```\r\n\r\nIn [1]: import torch\r\n   ...: import torch.nn as nn\r\n   ...:\r\n   ...: loss_fn = nn.NLLLoss()\r\n   ...: input = torch.randn(3)\r\n   ...: target = torch.ones(1, 3, dtype=torch.long)\r\n   ...: loss_fn(input, target)\r\n   ...:\r\n---------------------------------------------------------------------------\r\nValueError                                Traceback (most recent call last)\r\n<ipython-input-1-bdb29da7c6a9> in <module>()\r\n      5 input = torch.randn(3)\r\n      6 target = torch.ones(1, 3, dtype=torch.long)\r\n----> 7 loss_fn(input, target)\r\n\r\n~/pytorch/torch/nn/modules/module.py in __call__(self, *input, **kwargs)\r\n    489             result = self._slow_forward(*input, **kwargs)\r\n    490         else:\r\n--> 491             result = self.forward(*input, **kwargs)\r\n    492         for hook in self._forward_hooks.values():\r\n    493             hook_result = hook(self, input, result)\r\n\r\n~/pytorch/torch/nn/modules/loss.py in forward(self, input, target)\r\n    191         _assert_no_grad(target)\r\n    192         return F.nll_loss(input, target, self.weight, self.size_average,\r\n--> 193                           self.ignore_index, self.reduce)\r\n    194\r\n    195\r\n\r\n~/pytorch/torch/nn/functional.py in nll_loss(input, target, weight, size_average, ignore_index, reduce)\r\n   1336     dim = input.dim()\r\n   1337     if dim < 2:\r\n-> 1338         raise ValueError('Expected 2 or more dimensions (got {})'.format(dim))\r\n   1339\r\n   1340     if input.size(0) != target.size(0):\r\n\r\nValueError: Expected 2 or more dimensions (got 1)\r\n\r\n``` \r\n"}