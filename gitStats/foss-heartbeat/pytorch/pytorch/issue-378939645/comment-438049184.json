{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/438049184", "html_url": "https://github.com/pytorch/pytorch/issues/13750#issuecomment-438049184", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/13750", "id": 438049184, "node_id": "MDEyOklzc3VlQ29tbWVudDQzODA0OTE4NA==", "user": {"login": "pietern", "id": 9845, "node_id": "MDQ6VXNlcjk4NDU=", "avatar_url": "https://avatars3.githubusercontent.com/u/9845?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietern", "html_url": "https://github.com/pietern", "followers_url": "https://api.github.com/users/pietern/followers", "following_url": "https://api.github.com/users/pietern/following{/other_user}", "gists_url": "https://api.github.com/users/pietern/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietern/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietern/subscriptions", "organizations_url": "https://api.github.com/users/pietern/orgs", "repos_url": "https://api.github.com/users/pietern/repos", "events_url": "https://api.github.com/users/pietern/events{/privacy}", "received_events_url": "https://api.github.com/users/pietern/received_events", "type": "User", "site_admin": false}, "created_at": "2018-11-12T22:23:00Z", "updated_at": "2018-11-12T22:23:00Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=8120856\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/teng-li\">@teng-li</a> My hypothesis here is that <code>open</code> with <code>O_CREAT</code> expands into some combination of <code>stat</code>, <code>creat</code>, and <code>open</code> system calls, and that this error is a case where some race is hit.</p>\n<p>Because <code>O_CREAT</code> means we should never get the <code>ENOENT</code> error, we can add some logic to execute a bound number of retries when seeing <code>ENOENT</code>, making this error less likely (though not eradicating it).</p>", "body_text": "@teng-li My hypothesis here is that open with O_CREAT expands into some combination of stat, creat, and open system calls, and that this error is a case where some race is hit.\nBecause O_CREAT means we should never get the ENOENT error, we can add some logic to execute a bound number of retries when seeing ENOENT, making this error less likely (though not eradicating it).", "body": "@teng-li My hypothesis here is that `open` with `O_CREAT` expands into some combination of `stat`, `creat`, and `open` system calls, and that this error is a case where some race is hit.\r\n\r\nBecause `O_CREAT` means we should never get the `ENOENT` error, we can add some logic to execute a bound number of retries when seeing `ENOENT`, making this error less likely (though not eradicating it). "}