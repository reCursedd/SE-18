{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/437628024", "html_url": "https://github.com/pytorch/pytorch/issues/13750#issuecomment-437628024", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/13750", "id": 437628024, "node_id": "MDEyOklzc3VlQ29tbWVudDQzNzYyODAyNA==", "user": {"login": "pietern", "id": 9845, "node_id": "MDQ6VXNlcjk4NDU=", "avatar_url": "https://avatars3.githubusercontent.com/u/9845?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietern", "html_url": "https://github.com/pietern", "followers_url": "https://api.github.com/users/pietern/followers", "following_url": "https://api.github.com/users/pietern/following{/other_user}", "gists_url": "https://api.github.com/users/pietern/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietern/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietern/subscriptions", "organizations_url": "https://api.github.com/users/pietern/orgs", "repos_url": "https://api.github.com/users/pietern/repos", "events_url": "https://api.github.com/users/pietern/events{/privacy}", "received_events_url": "https://api.github.com/users/pietern/received_events", "type": "User", "site_admin": false}, "created_at": "2018-11-10T22:52:45Z", "updated_at": "2018-11-10T22:52:45Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=5674597\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/SsnL\">@SsnL</a> This one is not, but I think you bring up a valid point. Having to delete the file before using is not great and the lock + truncate trick you posted fixes it. The problem I think with the byte range locks is that usually the file store will be used on NFS (as is the case in this example) and byte range locks on NFS are sparingly supported to my knowledge, if at all.</p>", "body_text": "@SsnL This one is not, but I think you bring up a valid point. Having to delete the file before using is not great and the lock + truncate trick you posted fixes it. The problem I think with the byte range locks is that usually the file store will be used on NFS (as is the case in this example) and byte range locks on NFS are sparingly supported to my knowledge, if at all.", "body": "@SsnL This one is not, but I think you bring up a valid point. Having to delete the file before using is not great and the lock + truncate trick you posted fixes it. The problem I think with the byte range locks is that usually the file store will be used on NFS (as is the case in this example) and byte range locks on NFS are sparingly supported to my knowledge, if at all."}