{"url": "https://api.github.com/repos/pytorch/pytorch/issues/13492", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/13492/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/13492/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/13492/events", "html_url": "https://github.com/pytorch/pytorch/pull/13492", "id": 376624365, "node_id": "MDExOlB1bGxSZXF1ZXN0MjI3ODAxNTI2", "number": 13492, "title": "Fix a few bugs in format and vararg handling", "user": {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 679953983, "node_id": "MDU6TGFiZWw2Nzk5NTM5ODM=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/jit", "name": "jit", "color": "c5def5", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-11-02T00:45:34Z", "updated_at": "2018-11-23T15:54:08Z", "closed_at": "2018-11-02T07:08:23Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/13492", "html_url": "https://github.com/pytorch/pytorch/pull/13492", "diff_url": "https://github.com/pytorch/pytorch/pull/13492.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/13492.patch"}, "body_html": "<p>There are a couple subtle bugs in the way varargs is implemented:</p>\n<ol>\n<li>it fails if you pass 0 arguments, because it doesn't handle the case when there are 0 varargs, and because Operator::matches was not updated.</li>\n<li>it breaks all the named-based lookups on nodes. For instance node-&gt;get(attr::value)<br>\nwill return a single entry of the varargs if you look it up by name.</li>\n</ol>\n<p>Furthermore it complicates some assumptions about the positional arguments (e.g. they use to be<br>\n1-to-1 with node inputs but with varargs they are not).</p>\n<p>Because varargs are only being used for format, this diff instead<br>\njust allows format to take any value as input, regardless of type. It just provides a way to set is_vararg<br>\nfrom the schema but does not restrict the type of the varargs things. This is inline with<br>\nthe pre-existing behavior for is_vararg so it doesn't require Operator::matches changes.</p>\n<p>This also keeps format inline with how print works, and is closer to the python implementation of format. Note that the implementation<br>\nof format already worked with arbitrary IValues so restricting to strings was just making it more conservative than needed.</p>\n<p>This also fixes the implementation of format to work when there are 0 arguments or text before and after a format string, where it would not print things.</p>", "body_text": "There are a couple subtle bugs in the way varargs is implemented:\n\nit fails if you pass 0 arguments, because it doesn't handle the case when there are 0 varargs, and because Operator::matches was not updated.\nit breaks all the named-based lookups on nodes. For instance node->get(attr::value)\nwill return a single entry of the varargs if you look it up by name.\n\nFurthermore it complicates some assumptions about the positional arguments (e.g. they use to be\n1-to-1 with node inputs but with varargs they are not).\nBecause varargs are only being used for format, this diff instead\njust allows format to take any value as input, regardless of type. It just provides a way to set is_vararg\nfrom the schema but does not restrict the type of the varargs things. This is inline with\nthe pre-existing behavior for is_vararg so it doesn't require Operator::matches changes.\nThis also keeps format inline with how print works, and is closer to the python implementation of format. Note that the implementation\nof format already worked with arbitrary IValues so restricting to strings was just making it more conservative than needed.\nThis also fixes the implementation of format to work when there are 0 arguments or text before and after a format string, where it would not print things.", "body": "There are a couple subtle bugs in the way varargs is implemented:\r\n\r\n1. it fails if you pass 0 arguments, because it doesn't handle the case when there are 0 varargs, and because Operator::matches was not updated.\r\n2. it breaks all the named-based lookups on nodes. For instance node->get<int>(attr::value)\r\n   will return a single entry of the varargs if you look it up by name.\r\n\r\nFurthermore it complicates some assumptions about the positional arguments (e.g. they use to be\r\n1-to-1 with node inputs but with varargs they are not).\r\n\r\nBecause varargs are only being used for format, this diff instead\r\njust allows format to take any value as input, regardless of type. It just provides a way to set is_vararg\r\nfrom the schema but does not restrict the type of the varargs things. This is inline with\r\nthe pre-existing behavior for is_vararg so it doesn't require Operator::matches changes.\r\n\r\nThis also keeps format inline with how print works, and is closer to the python implementation of format. Note that the implementation\r\nof format already worked with arbitrary IValues so restricting to strings was just making it more conservative than needed.\r\n\r\nThis also fixes the implementation of format to work when there are 0 arguments or text before and after a format string, where it would not print things."}