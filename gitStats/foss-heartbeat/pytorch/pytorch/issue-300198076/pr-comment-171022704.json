{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/171022704", "pull_request_review_id": 99803243, "id": 171022704, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MTAyMjcwNA==", "diff_hunk": "@@ -456,7 +457,163 @@ def trace(*args, **kwargs):\n         >>> def f(x):\n         >>>     return x * 2\n     \"\"\"\n-    return lambda func: torch._C.GraphExecutor(func, args, kwargs.pop('optimize', True))\n+    def wrapper(func):\n+        executor_options = {'optimize': True}\n+        for name in executor_options:\n+            executor_options[name] = kwargs.pop(name, executor_options[name])\n+        if isinstance(func, torch.nn.Module):\n+            captures = list(func.state_dict(keep_vars=True).values())\n+            # TODO: support shared parameters\n+            if len(set(map(id, captures))) != len(list(map(id, captures))):\n+                raise ValueError(\"TracedModules don't support parameter sharing between modules\")\n+            executor = torch._C.GraphExecutor(func, args, captures=captures, **executor_options)\n+            return TracedModule(func, executor)\n+        else:\n+            return torch._C.GraphExecutor(func, args, **executor_options)\n+    return wrapper\n+\n+\n+class TracedModule(torch.nn.Module):\n+    __class_cache = {}\n+    __frozen = False\n+\n+    def __new__(cls, orig, executor=None, root=None):\n+        orig_type = type(orig)\n+        if cls is TracedModule:\n+            if orig_type not in TracedModule.__class_cache:", "path": "torch/jit/__init__.py", "position": null, "original_position": 57, "commit_id": "b02df12699d14cb04dbff311dc363d43e6abae5a", "original_commit_id": "d8c1a075b4cbe38900687adf3e74327bf8a638e9", "user": {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, "body": "I care more that anyone who tries to edit this class has to figure out what __new__, type(), and __class_cache, etc. do than the specific behavior.  It does not make sense for this to be a subclass of the original module for the reasons I gave above.  I am just suggesting that for any particular behavior like sequential modules that you find lacking, can just be added as a feature of traced modules. ", "created_at": "2018-02-27T18:35:42Z", "updated_at": "2018-11-23T15:40:04Z", "html_url": "https://github.com/pytorch/pytorch/pull/5409#discussion_r171022704", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/5409", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/171022704"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/5409#discussion_r171022704"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/5409"}}, "body_html": "<p>I care more that anyone who tries to edit this class has to figure out what <strong>new</strong>, type(), and __class_cache, etc. do than the specific behavior.  It does not make sense for this to be a subclass of the original module for the reasons I gave above.  I am just suggesting that for any particular behavior like sequential modules that you find lacking, can just be added as a feature of traced modules.</p>", "body_text": "I care more that anyone who tries to edit this class has to figure out what new, type(), and __class_cache, etc. do than the specific behavior.  It does not make sense for this to be a subclass of the original module for the reasons I gave above.  I am just suggesting that for any particular behavior like sequential modules that you find lacking, can just be added as a feature of traced modules.", "in_reply_to_id": 170762475}