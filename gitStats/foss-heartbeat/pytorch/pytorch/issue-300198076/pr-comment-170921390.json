{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/170921390", "pull_request_review_id": 99682085, "id": 170921390, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MDkyMTM5MA==", "diff_hunk": "@@ -456,7 +457,163 @@ def trace(*args, **kwargs):\n         >>> def f(x):\n         >>>     return x * 2\n     \"\"\"\n-    return lambda func: torch._C.GraphExecutor(func, args, kwargs.pop('optimize', True))\n+    def wrapper(func):\n+        executor_options = {'optimize': True}\n+        for name in executor_options:\n+            executor_options[name] = kwargs.pop(name, executor_options[name])\n+        if isinstance(func, torch.nn.Module):\n+            captures = list(func.state_dict(keep_vars=True).values())\n+            # TODO: support shared parameters\n+            if len(set(map(id, captures))) != len(list(map(id, captures))):\n+                raise ValueError(\"TracedModules don't support parameter sharing between modules\")\n+            executor = torch._C.GraphExecutor(func, args, captures=captures, **executor_options)\n+            return TracedModule(func, executor)\n+        else:\n+            return torch._C.GraphExecutor(func, args, **executor_options)\n+    return wrapper\n+\n+\n+class TracedModule(torch.nn.Module):\n+    __class_cache = {}\n+    __frozen = False\n+\n+    def __new__(cls, orig, executor=None, root=None):\n+        orig_type = type(orig)\n+        if cls is TracedModule:\n+            if orig_type not in TracedModule.__class_cache:", "path": "torch/jit/__init__.py", "position": null, "original_position": 57, "commit_id": "b02df12699d14cb04dbff311dc363d43e6abae5a", "original_commit_id": "d8c1a075b4cbe38900687adf3e74327bf8a638e9", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Yes, we cannot assume that, but:\r\n* the functionality that only depends only on operations allowed by traced module will continue to work\r\n* the functionality that would do illegal changes to the module will raise an error anyway\r\nTo sum up, it's safe to inherit from the original class.\r\n\r\nOn the other hand, helpers are useful, and even necessary if we want to allow things as simple as indexing sequentials (you can see `traced_module.submodule[0]` in the test). `nn.Module` base class doesn't implement `__getitem__`, and it's not enough to redirect the operator to the original class, as `nn.Sequential` uses [a very simple helper method](https://github.com/pytorch/pytorch/blob/master/torch/nn/modules/container.py#L53-L60), which wouldn't be present if we didn't inherit.\r\n\r\nSo, if we forbid inheritance, even things as simple as sequentials will need special treatment (not mentioning `ModuleList`, `ParameterList`, `ModuleDict`, etc.).", "created_at": "2018-02-27T13:31:42Z", "updated_at": "2018-11-23T15:40:03Z", "html_url": "https://github.com/pytorch/pytorch/pull/5409#discussion_r170921390", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/5409", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/170921390"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/5409#discussion_r170921390"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/5409"}}, "body_html": "<p>Yes, we cannot assume that, but:</p>\n<ul>\n<li>the functionality that only depends only on operations allowed by traced module will continue to work</li>\n<li>the functionality that would do illegal changes to the module will raise an error anyway<br>\nTo sum up, it's safe to inherit from the original class.</li>\n</ul>\n<p>On the other hand, helpers are useful, and even necessary if we want to allow things as simple as indexing sequentials (you can see <code>traced_module.submodule[0]</code> in the test). <code>nn.Module</code> base class doesn't implement <code>__getitem__</code>, and it's not enough to redirect the operator to the original class, as <code>nn.Sequential</code> uses <a href=\"https://github.com/pytorch/pytorch/blob/master/torch/nn/modules/container.py#L53-L60\">a very simple helper method</a>, which wouldn't be present if we didn't inherit.</p>\n<p>So, if we forbid inheritance, even things as simple as sequentials will need special treatment (not mentioning <code>ModuleList</code>, <code>ParameterList</code>, <code>ModuleDict</code>, etc.).</p>", "body_text": "Yes, we cannot assume that, but:\n\nthe functionality that only depends only on operations allowed by traced module will continue to work\nthe functionality that would do illegal changes to the module will raise an error anyway\nTo sum up, it's safe to inherit from the original class.\n\nOn the other hand, helpers are useful, and even necessary if we want to allow things as simple as indexing sequentials (you can see traced_module.submodule[0] in the test). nn.Module base class doesn't implement __getitem__, and it's not enough to redirect the operator to the original class, as nn.Sequential uses a very simple helper method, which wouldn't be present if we didn't inherit.\nSo, if we forbid inheritance, even things as simple as sequentials will need special treatment (not mentioning ModuleList, ParameterList, ModuleDict, etc.).", "in_reply_to_id": 170762475}