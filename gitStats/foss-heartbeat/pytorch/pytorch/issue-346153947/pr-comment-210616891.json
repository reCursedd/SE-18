{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/210616891", "pull_request_review_id": 146868851, "id": 210616891, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMDYxNjg5MQ==", "diff_hunk": "@@ -315,5 +315,44 @@ Tensor& matmul_out(Tensor &result, const Tensor & tensor1, const Tensor & tensor\n   return result;\n }\n \n+Tensor matrix_power(const Tensor& a, int64_t n) {\n+  AT_CHECK(a.dim() >= 2 && at::isFloatingType(a.type().scalarType()),\n+           \"matrix_power(\", a.type(), \"{\", a.sizes(), \"}): expected a tensor \"\n+           \"of floating types with dim at least 2\");\n+  if (n == 0) {\n+    return a.clone().copy_(at::eye(a.size(-2), a.options()).expand_as(a));", "path": "aten/src/ATen/native/LinearAlgebra.cpp", "position": 9, "original_position": 9, "commit_id": "b1af53363dd10d87f38ad74f6137563cb35f13fe", "original_commit_id": "4abebd4cf34cb35deb75091e24e6562cff7ea8b0", "user": {"login": "fmassa", "id": 9110200, "node_id": "MDQ6VXNlcjkxMTAyMDA=", "avatar_url": "https://avatars2.githubusercontent.com/u/9110200?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fmassa", "html_url": "https://github.com/fmassa", "followers_url": "https://api.github.com/users/fmassa/followers", "following_url": "https://api.github.com/users/fmassa/following{/other_user}", "gists_url": "https://api.github.com/users/fmassa/gists{/gist_id}", "starred_url": "https://api.github.com/users/fmassa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fmassa/subscriptions", "organizations_url": "https://api.github.com/users/fmassa/orgs", "repos_url": "https://api.github.com/users/fmassa/repos", "events_url": "https://api.github.com/users/fmassa/events{/privacy}", "received_events_url": "https://api.github.com/users/fmassa/received_events", "type": "User", "site_admin": false}, "body": "I'm not sure what's the best approach here, because we want to keep the computation graph linked with `a`, that the `empty_like` create a new tensor that is not tied to `a` (the same happens with just `at::eye` btw, and that's why you had the `.clone().copy_(`)\r\n\r\nccing @goldsborough and @apaszke if they have better ideas, but I'd stick with something like `a.clone().copy_(` or `a * 0 + at::eye(...`.", "created_at": "2018-08-16T14:24:53Z", "updated_at": "2018-11-23T15:49:31Z", "html_url": "https://github.com/pytorch/pytorch/pull/10068#discussion_r210616891", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/10068", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/210616891"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/10068#discussion_r210616891"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/10068"}}, "body_html": "<p>I'm not sure what's the best approach here, because we want to keep the computation graph linked with <code>a</code>, that the <code>empty_like</code> create a new tensor that is not tied to <code>a</code> (the same happens with just <code>at::eye</code> btw, and that's why you had the <code>.clone().copy_(</code>)</p>\n<p>ccing <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=6429851\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/goldsborough\">@goldsborough</a> and <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=4583066\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/apaszke\">@apaszke</a> if they have better ideas, but I'd stick with something like <code>a.clone().copy_(</code> or <code>a * 0 + at::eye(...</code>.</p>", "body_text": "I'm not sure what's the best approach here, because we want to keep the computation graph linked with a, that the empty_like create a new tensor that is not tied to a (the same happens with just at::eye btw, and that's why you had the .clone().copy_()\nccing @goldsborough and @apaszke if they have better ideas, but I'd stick with something like a.clone().copy_( or a * 0 + at::eye(....", "in_reply_to_id": 210364413}