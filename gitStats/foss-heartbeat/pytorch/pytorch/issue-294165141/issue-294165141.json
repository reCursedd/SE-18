{"url": "https://api.github.com/repos/pytorch/pytorch/issues/5035", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/5035/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/5035/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/5035/events", "html_url": "https://github.com/pytorch/pytorch/pull/5035", "id": 294165141, "node_id": "MDExOlB1bGxSZXF1ZXN0MTY2OTkyMjAy", "number": 5035, "title": "Bring back Tensor::data<__half>() and remove Tensor::data() template", "user": {"login": "goldsborough", "id": 6429851, "node_id": "MDQ6VXNlcjY0Mjk4NTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/6429851?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goldsborough", "html_url": "https://github.com/goldsborough", "followers_url": "https://api.github.com/users/goldsborough/followers", "following_url": "https://api.github.com/users/goldsborough/following{/other_user}", "gists_url": "https://api.github.com/users/goldsborough/gists{/gist_id}", "starred_url": "https://api.github.com/users/goldsborough/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goldsborough/subscriptions", "organizations_url": "https://api.github.com/users/goldsborough/orgs", "repos_url": "https://api.github.com/users/goldsborough/repos", "events_url": "https://api.github.com/users/goldsborough/events{/privacy}", "received_events_url": "https://api.github.com/users/goldsborough/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-02-04T03:00:41Z", "updated_at": "2018-02-05T22:11:12Z", "closed_at": "2018-02-05T21:42:59Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/5035", "html_url": "https://github.com/pytorch/pytorch/pull/5035", "diff_url": "https://github.com/pytorch/pytorch/pull/5035.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/5035.patch"}, "body_html": "<p>I accidentally removed the <code>Tensor::data&lt;__half&gt;()</code> conversion in <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"292096444\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/4892\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/pytorch/pytorch/pull/4892/hovercard\" href=\"https://github.com/pytorch/pytorch/pull/4892\">#4892</a>. This did not show up, because a catch-all <code>Tensor::data()</code> template method was defined, that resulted in a runtime error, and on top of that I believe tests for half were not running, so I did not get the runtime error during tests.</p>\n<p>This PR:</p>\n<ol>\n<li>Brings back the <code>Tensor::data&lt;__half&gt;()</code> conversion, but puts it into a file separate from<code>ATen/TensorMethods.h</code> to avoid including it in the public API.</li>\n<li><strong>Removes the base Tensor::data() template</strong> -- a conversion to an unknown type should not cause a runtime error, <em>it should not compile</em>. The C++ type system should help us catch type errors at compile time, not runtime. That said, removing the base template will at least cause a linker error (since any use of the base template will not find the corresponding symbol during linkage, as it will not exist). There are ways to turn it into a compiler error (using traits), but it would be a bigger change. See <a href=\"https://stackoverflow.com/questions/7064039/how-to-prevent-non-specialized-template-instantiation\" rel=\"nofollow\">here</a> for why this works.</li>\n</ol>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=4583066\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/apaszke\">@apaszke</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=370202\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/zdevito\">@zdevito</a></p>\n<p><span class=\"issue-keyword tooltipped tooltipped-se\" aria-label=\"This pull request closes issue #4752.\">Fixes</span> <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"290134902\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/4752\" data-hovercard-type=\"issue\" data-hovercard-url=\"/pytorch/pytorch/issues/4752/hovercard\" href=\"https://github.com/pytorch/pytorch/issues/4752\">#4752</a></p>", "body_text": "I accidentally removed the Tensor::data<__half>() conversion in #4892. This did not show up, because a catch-all Tensor::data() template method was defined, that resulted in a runtime error, and on top of that I believe tests for half were not running, so I did not get the runtime error during tests.\nThis PR:\n\nBrings back the Tensor::data<__half>() conversion, but puts it into a file separate fromATen/TensorMethods.h to avoid including it in the public API.\nRemoves the base Tensor::data() template -- a conversion to an unknown type should not cause a runtime error, it should not compile. The C++ type system should help us catch type errors at compile time, not runtime. That said, removing the base template will at least cause a linker error (since any use of the base template will not find the corresponding symbol during linkage, as it will not exist). There are ways to turn it into a compiler error (using traits), but it would be a bigger change. See here for why this works.\n\n@apaszke @zdevito\nFixes #4752", "body": "I accidentally removed the `Tensor::data<__half>()` conversion in https://github.com/pytorch/pytorch/pull/4892. This did not show up, because a catch-all `Tensor::data()` template method was defined, that resulted in a runtime error, and on top of that I believe tests for half were not running, so I did not get the runtime error during tests.\r\n\r\nThis PR:\r\n1. Brings back the `Tensor::data<__half>()` conversion, but puts it into a file separate from`ATen/TensorMethods.h` to avoid including it in the public API.\r\n2. __Removes the base Tensor::data() template__ -- a conversion to an unknown type should not cause a runtime error, *it should not compile*. The C++ type system should help us catch type errors at compile time, not runtime. That said, removing the base template will at least cause a linker error (since any use of the base template will not find the corresponding symbol during linkage, as it will not exist). There are ways to turn it into a compiler error (using traits), but it would be a bigger change. See [here](https://stackoverflow.com/questions/7064039/how-to-prevent-non-specialized-template-instantiation) for why this works.\r\n\r\n@apaszke @zdevito\r\n\r\nFixes https://github.com/pytorch/pytorch/issues/4752"}