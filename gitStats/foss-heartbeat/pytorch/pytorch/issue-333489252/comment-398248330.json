{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/398248330", "html_url": "https://github.com/pytorch/pytorch/pull/8635#issuecomment-398248330", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/8635", "id": 398248330, "node_id": "MDEyOklzc3VlQ29tbWVudDM5ODI0ODMzMA==", "user": {"login": "fehiepsi", "id": 4736342, "node_id": "MDQ6VXNlcjQ3MzYzNDI=", "avatar_url": "https://avatars1.githubusercontent.com/u/4736342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fehiepsi", "html_url": "https://github.com/fehiepsi", "followers_url": "https://api.github.com/users/fehiepsi/followers", "following_url": "https://api.github.com/users/fehiepsi/following{/other_user}", "gists_url": "https://api.github.com/users/fehiepsi/gists{/gist_id}", "starred_url": "https://api.github.com/users/fehiepsi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fehiepsi/subscriptions", "organizations_url": "https://api.github.com/users/fehiepsi/orgs", "repos_url": "https://api.github.com/users/fehiepsi/repos", "events_url": "https://api.github.com/users/fehiepsi/events{/privacy}", "received_events_url": "https://api.github.com/users/fehiepsi/received_events", "type": "User", "site_admin": false}, "created_at": "2018-06-19T01:47:54Z", "updated_at": "2018-06-19T01:47:54Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=648532\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/fritzo\">@fritzo</a></p>\n<details>\n============================= test session starts ==============================\nplatform linux -- Python 3.5.5, pytest-3.6.0, py-1.5.3, pluggy-0.6.0 -- /home/fehiepsi/miniconda3/envs/pyro/bin/python\ncachedir: .pytest_cache\nbenchmark: 3.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=5.00us max_time=1.00s calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /home/fehiepsi/pytorch, inifile:\nplugins: xdist-1.22.2, forked-0.2, cov-2.5.1, benchmark-3.0.0, nbval-0.9.1\ncollecting ... collected 166 items / 155 deselected\n<p>test/test_distributions.py::TestDistributions::test_lowrank_multivariate_normal_log_prob PASSED [  9%]<br>\ntest/test_distributions.py::TestDistributions::test_lowrank_multivariate_normal_properties PASSED [ 18%]<br>\ntest/test_distributions.py::TestDistributions::test_lowrank_multivariate_normal_sample PASSED [ 27%]<br>\ntest/test_distributions.py::TestDistributions::test_lowrank_multivariate_normal_shape PASSED [ 36%]<br>\ntest/test_distributions.py::TestDistributions::test_multivariate_normal_log_prob PASSED [ 45%]<br>\ntest/test_distributions.py::TestDistributions::test_multivariate_normal_properties PASSED [ 54%]<br>\ntest/test_distributions.py::TestDistributions::test_multivariate_normal_sample PASSED [ 63%]<br>\ntest/test_distributions.py::TestDistributions::test_multivariate_normal_shape FAILED [ 72%]<br>\ntest/test_distributions.py::TestRsample::test_dirichlet_multivariate PASSED [ 81%]<br>\ntest/test_distributions.py::TestKL::test_kl_multivariate_normal PASSED   [ 90%]<br>\ntest/test_distributions.py::TestKL::test_kl_multivariate_normal_batched PASSED [100%]</p>\n<p>=================================== FAILURES ===================================<br>\n_______________ TestDistributions.test_multivariate_normal_shape _______________</p>\n<p>self = &lt;test_distributions.TestDistributions testMethod=test_multivariate_normal_shape&gt;</p>\n<pre><code>def test_multivariate_normal_shape(self):\n    mean = torch.randn(5, 3, requires_grad=True)\n    mean_no_batch = torch.randn(3, requires_grad=True)\n    mean_multi_batch = torch.randn(6, 5, 3, requires_grad=True)\n\n    # construct PSD covariance\n    tmp = torch.randn(3, 10)\n    cov = torch.tensor(torch.matmul(tmp, tmp.t()) / tmp.shape[-1], requires_grad=True)\n    prec = torch.tensor(cov.inverse(), requires_grad=True)\n    scale_tril = torch.tensor(torch.potrf(cov, upper=False), requires_grad=True)\n\n    # construct batch of PSD covariances\n    tmp = torch.randn(6, 5, 3, 10)\n    cov_batched = torch.tensor((tmp.unsqueeze(-2) * tmp.unsqueeze(-3)).mean(-1), requires_grad=True)\n    prec_batched = [C.inverse() for C in cov_batched.view((-1, 3, 3))]\n    prec_batched = torch.stack(prec_batched).view(cov_batched.shape)\n    scale_tril_batched = [torch.potrf(C, upper=False) for C in cov_batched.view((-1, 3, 3))]\n    scale_tril_batched = torch.stack(scale_tril_batched).view(cov_batched.shape)\n\n    # ensure that sample, batch, event shapes all handled correctly\n    self.assertEqual(MultivariateNormal(mean, cov).sample().size(), (5, 3))\n    self.assertEqual(MultivariateNormal(mean_no_batch, cov).sample().size(), (3,))\n    self.assertEqual(MultivariateNormal(mean_multi_batch, cov).sample().size(), (6, 5, 3))\n    self.assertEqual(MultivariateNormal(mean, cov).sample((2,)).size(), (2, 5, 3))\n    self.assertEqual(MultivariateNormal(mean_no_batch, cov).sample((2,)).size(), (2, 3))\n    self.assertEqual(MultivariateNormal(mean_multi_batch, cov).sample((2,)).size(), (2, 6, 5, 3))\n    self.assertEqual(MultivariateNormal(mean, cov).sample((2, 7)).size(), (2, 7, 5, 3))\n    self.assertEqual(MultivariateNormal(mean_no_batch, cov).sample((2, 7)).size(), (2, 7, 3))\n    self.assertEqual(MultivariateNormal(mean_multi_batch, cov).sample((2, 7)).size(), (2, 7, 6, 5, 3))\n    self.assertEqual(MultivariateNormal(mean, cov_batched).sample((2, 7)).size(), (2, 7, 6, 5, 3))\n    self.assertEqual(MultivariateNormal(mean_no_batch, cov_batched).sample((2, 7)).size(), (2, 7, 6, 5, 3))\n    self.assertEqual(MultivariateNormal(mean_multi_batch, cov_batched).sample((2, 7)).size(), (2, 7, 6, 5, 3))\n    self.assertEqual(MultivariateNormal(mean, precision_matrix=prec).sample((2, 7)).size(), (2, 7, 5, 3))\n    self.assertEqual(MultivariateNormal(mean, precision_matrix=prec_batched).sample((2, 7)).size(), (2, 7, 6, 5, 3))\n    self.assertEqual(MultivariateNormal(mean, scale_tril=scale_tril).sample((2, 7)).size(), (2, 7, 5, 3))\n    self.assertEqual(MultivariateNormal(mean, scale_tril=scale_tril_batched).sample((2, 7)).size(), (2, 7, 6, 5, 3))\n\n    # check gradients\n</code></pre>\n<blockquote>\n<pre><code>  self._gradcheck_log_prob(MultivariateNormal, (mean, cov))\n</code></pre>\n</blockquote>\n<p>test/test_distributions.py:1604:</p>\n<hr>\n<p>test/test_distributions.py:620: in _gradcheck_log_prob<br>\ngradcheck(apply_fn, ctor_params, raise_exception=True)<br>\ntorch/autograd/gradcheck.py:192: in gradcheck<br>\n'numerical:%s\\nanalytical:%s\\n' % (i, j, n, a))</p>\n<hr>\n<p>msg = 'Jacobian mismatch for output 0 with respect to input 1,\\nnumerical:tensor([[-0.8790, -0.8150, -0.7580, -0.5903, -0.87...   [ -3.5956, -12.2547,  -3.2756,  -4.5524,   2.5408],\\n        [  2.0588,  12.0112,   1.2863,  -0.1552,  -3.4333]])\\n'</p>\n<pre><code>def fail_test(msg):\n    if raise_exception:\n</code></pre>\n<blockquote>\n<pre><code>      raise RuntimeError(msg)\n</code></pre>\n</blockquote>\n<p>E           RuntimeError: Jacobian mismatch for output 0 with respect to input 1,<br>\nE           numerical:tensor([[-0.8790, -0.8150, -0.7580, -0.5903, -0.8705],<br>\nE                   [ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000],<br>\nE                   [ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000],<br>\nE                   [ 0.7389,  1.2535,  0.3848, -0.1361,  0.8325],<br>\nE                   [-0.6777, -0.3120, -0.6621, -0.2594, -1.0205],<br>\nE                   [ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000],<br>\nE                   [ 0.0148, -1.0363,  0.5786,  0.7754, -0.1522],<br>\nE                   [-0.7191, -2.4509, -0.6551, -0.9105,  0.5082],<br>\nE                   [ 0.4118,  2.4022,  0.2573, -0.0310, -0.6867]])<br>\nE           analytical:tensor([[ -4.3950,  -4.0751,  -3.7900,  -2.9516,  -4.3525],<br>\nE                   [  0.0000,   0.0000,   0.0000,   0.0000,   0.0000],<br>\nE                   [  0.0000,   0.0000,   0.0000,   0.0000,   0.0000],<br>\nE                   [  3.6945,   6.2677,   1.9241,  -0.6804,   4.1626],<br>\nE                   [ -3.3884,  -1.5600,  -3.3107,  -1.2972,  -5.1025],<br>\nE                   [  0.0000,   0.0000,   0.0000,   0.0000,   0.0000],<br>\nE                   [  0.0740,  -5.1813,   2.8930,   3.8770,  -0.7608],<br>\nE                   [ -3.5956, -12.2547,  -3.2756,  -4.5524,   2.5408],<br>\nE                   [  2.0588,  12.0112,   1.2863,  -0.1552,  -3.4333]])</p>\n<p>torch/autograd/gradcheck.py:172: RuntimeError<br>\n============= 1 failed, 10 passed, 155 deselected in 3.91 seconds ==============</p>\n</details>", "body_text": "@fritzo\n\n============================= test session starts ==============================\nplatform linux -- Python 3.5.5, pytest-3.6.0, py-1.5.3, pluggy-0.6.0 -- /home/fehiepsi/miniconda3/envs/pyro/bin/python\ncachedir: .pytest_cache\nbenchmark: 3.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=5.00us max_time=1.00s calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /home/fehiepsi/pytorch, inifile:\nplugins: xdist-1.22.2, forked-0.2, cov-2.5.1, benchmark-3.0.0, nbval-0.9.1\ncollecting ... collected 166 items / 155 deselected\ntest/test_distributions.py::TestDistributions::test_lowrank_multivariate_normal_log_prob PASSED [  9%]\ntest/test_distributions.py::TestDistributions::test_lowrank_multivariate_normal_properties PASSED [ 18%]\ntest/test_distributions.py::TestDistributions::test_lowrank_multivariate_normal_sample PASSED [ 27%]\ntest/test_distributions.py::TestDistributions::test_lowrank_multivariate_normal_shape PASSED [ 36%]\ntest/test_distributions.py::TestDistributions::test_multivariate_normal_log_prob PASSED [ 45%]\ntest/test_distributions.py::TestDistributions::test_multivariate_normal_properties PASSED [ 54%]\ntest/test_distributions.py::TestDistributions::test_multivariate_normal_sample PASSED [ 63%]\ntest/test_distributions.py::TestDistributions::test_multivariate_normal_shape FAILED [ 72%]\ntest/test_distributions.py::TestRsample::test_dirichlet_multivariate PASSED [ 81%]\ntest/test_distributions.py::TestKL::test_kl_multivariate_normal PASSED   [ 90%]\ntest/test_distributions.py::TestKL::test_kl_multivariate_normal_batched PASSED [100%]\n=================================== FAILURES ===================================\n_______________ TestDistributions.test_multivariate_normal_shape _______________\nself = <test_distributions.TestDistributions testMethod=test_multivariate_normal_shape>\ndef test_multivariate_normal_shape(self):\n    mean = torch.randn(5, 3, requires_grad=True)\n    mean_no_batch = torch.randn(3, requires_grad=True)\n    mean_multi_batch = torch.randn(6, 5, 3, requires_grad=True)\n\n    # construct PSD covariance\n    tmp = torch.randn(3, 10)\n    cov = torch.tensor(torch.matmul(tmp, tmp.t()) / tmp.shape[-1], requires_grad=True)\n    prec = torch.tensor(cov.inverse(), requires_grad=True)\n    scale_tril = torch.tensor(torch.potrf(cov, upper=False), requires_grad=True)\n\n    # construct batch of PSD covariances\n    tmp = torch.randn(6, 5, 3, 10)\n    cov_batched = torch.tensor((tmp.unsqueeze(-2) * tmp.unsqueeze(-3)).mean(-1), requires_grad=True)\n    prec_batched = [C.inverse() for C in cov_batched.view((-1, 3, 3))]\n    prec_batched = torch.stack(prec_batched).view(cov_batched.shape)\n    scale_tril_batched = [torch.potrf(C, upper=False) for C in cov_batched.view((-1, 3, 3))]\n    scale_tril_batched = torch.stack(scale_tril_batched).view(cov_batched.shape)\n\n    # ensure that sample, batch, event shapes all handled correctly\n    self.assertEqual(MultivariateNormal(mean, cov).sample().size(), (5, 3))\n    self.assertEqual(MultivariateNormal(mean_no_batch, cov).sample().size(), (3,))\n    self.assertEqual(MultivariateNormal(mean_multi_batch, cov).sample().size(), (6, 5, 3))\n    self.assertEqual(MultivariateNormal(mean, cov).sample((2,)).size(), (2, 5, 3))\n    self.assertEqual(MultivariateNormal(mean_no_batch, cov).sample((2,)).size(), (2, 3))\n    self.assertEqual(MultivariateNormal(mean_multi_batch, cov).sample((2,)).size(), (2, 6, 5, 3))\n    self.assertEqual(MultivariateNormal(mean, cov).sample((2, 7)).size(), (2, 7, 5, 3))\n    self.assertEqual(MultivariateNormal(mean_no_batch, cov).sample((2, 7)).size(), (2, 7, 3))\n    self.assertEqual(MultivariateNormal(mean_multi_batch, cov).sample((2, 7)).size(), (2, 7, 6, 5, 3))\n    self.assertEqual(MultivariateNormal(mean, cov_batched).sample((2, 7)).size(), (2, 7, 6, 5, 3))\n    self.assertEqual(MultivariateNormal(mean_no_batch, cov_batched).sample((2, 7)).size(), (2, 7, 6, 5, 3))\n    self.assertEqual(MultivariateNormal(mean_multi_batch, cov_batched).sample((2, 7)).size(), (2, 7, 6, 5, 3))\n    self.assertEqual(MultivariateNormal(mean, precision_matrix=prec).sample((2, 7)).size(), (2, 7, 5, 3))\n    self.assertEqual(MultivariateNormal(mean, precision_matrix=prec_batched).sample((2, 7)).size(), (2, 7, 6, 5, 3))\n    self.assertEqual(MultivariateNormal(mean, scale_tril=scale_tril).sample((2, 7)).size(), (2, 7, 5, 3))\n    self.assertEqual(MultivariateNormal(mean, scale_tril=scale_tril_batched).sample((2, 7)).size(), (2, 7, 6, 5, 3))\n\n    # check gradients\n\n\n  self._gradcheck_log_prob(MultivariateNormal, (mean, cov))\n\n\ntest/test_distributions.py:1604:\n\ntest/test_distributions.py:620: in _gradcheck_log_prob\ngradcheck(apply_fn, ctor_params, raise_exception=True)\ntorch/autograd/gradcheck.py:192: in gradcheck\n'numerical:%s\\nanalytical:%s\\n' % (i, j, n, a))\n\nmsg = 'Jacobian mismatch for output 0 with respect to input 1,\\nnumerical:tensor([[-0.8790, -0.8150, -0.7580, -0.5903, -0.87...   [ -3.5956, -12.2547,  -3.2756,  -4.5524,   2.5408],\\n        [  2.0588,  12.0112,   1.2863,  -0.1552,  -3.4333]])\\n'\ndef fail_test(msg):\n    if raise_exception:\n\n\n      raise RuntimeError(msg)\n\n\nE           RuntimeError: Jacobian mismatch for output 0 with respect to input 1,\nE           numerical:tensor([[-0.8790, -0.8150, -0.7580, -0.5903, -0.8705],\nE                   [ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000],\nE                   [ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000],\nE                   [ 0.7389,  1.2535,  0.3848, -0.1361,  0.8325],\nE                   [-0.6777, -0.3120, -0.6621, -0.2594, -1.0205],\nE                   [ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000],\nE                   [ 0.0148, -1.0363,  0.5786,  0.7754, -0.1522],\nE                   [-0.7191, -2.4509, -0.6551, -0.9105,  0.5082],\nE                   [ 0.4118,  2.4022,  0.2573, -0.0310, -0.6867]])\nE           analytical:tensor([[ -4.3950,  -4.0751,  -3.7900,  -2.9516,  -4.3525],\nE                   [  0.0000,   0.0000,   0.0000,   0.0000,   0.0000],\nE                   [  0.0000,   0.0000,   0.0000,   0.0000,   0.0000],\nE                   [  3.6945,   6.2677,   1.9241,  -0.6804,   4.1626],\nE                   [ -3.3884,  -1.5600,  -3.3107,  -1.2972,  -5.1025],\nE                   [  0.0000,   0.0000,   0.0000,   0.0000,   0.0000],\nE                   [  0.0740,  -5.1813,   2.8930,   3.8770,  -0.7608],\nE                   [ -3.5956, -12.2547,  -3.2756,  -4.5524,   2.5408],\nE                   [  2.0588,  12.0112,   1.2863,  -0.1552,  -3.4333]])\ntorch/autograd/gradcheck.py:172: RuntimeError\n============= 1 failed, 10 passed, 155 deselected in 3.91 seconds ==============", "body": "@fritzo \r\n<details>\r\n============================= test session starts ==============================\r\nplatform linux -- Python 3.5.5, pytest-3.6.0, py-1.5.3, pluggy-0.6.0 -- /home/fehiepsi/miniconda3/envs/pyro/bin/python\r\ncachedir: .pytest_cache\r\nbenchmark: 3.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=5.00us max_time=1.00s calibration_precision=10 warmup=False warmup_iterations=100000)\r\nrootdir: /home/fehiepsi/pytorch, inifile:\r\nplugins: xdist-1.22.2, forked-0.2, cov-2.5.1, benchmark-3.0.0, nbval-0.9.1\r\ncollecting ... collected 166 items / 155 deselected\r\n\r\ntest/test_distributions.py::TestDistributions::test_lowrank_multivariate_normal_log_prob PASSED [  9%]\r\ntest/test_distributions.py::TestDistributions::test_lowrank_multivariate_normal_properties PASSED [ 18%]\r\ntest/test_distributions.py::TestDistributions::test_lowrank_multivariate_normal_sample PASSED [ 27%]\r\ntest/test_distributions.py::TestDistributions::test_lowrank_multivariate_normal_shape PASSED [ 36%]\r\ntest/test_distributions.py::TestDistributions::test_multivariate_normal_log_prob PASSED [ 45%]\r\ntest/test_distributions.py::TestDistributions::test_multivariate_normal_properties PASSED [ 54%]\r\ntest/test_distributions.py::TestDistributions::test_multivariate_normal_sample PASSED [ 63%]\r\ntest/test_distributions.py::TestDistributions::test_multivariate_normal_shape FAILED [ 72%]\r\ntest/test_distributions.py::TestRsample::test_dirichlet_multivariate PASSED [ 81%]\r\ntest/test_distributions.py::TestKL::test_kl_multivariate_normal PASSED   [ 90%]\r\ntest/test_distributions.py::TestKL::test_kl_multivariate_normal_batched PASSED [100%]\r\n\r\n=================================== FAILURES ===================================\r\n_______________ TestDistributions.test_multivariate_normal_shape _______________\r\n\r\nself = <test_distributions.TestDistributions testMethod=test_multivariate_normal_shape>\r\n\r\n    def test_multivariate_normal_shape(self):\r\n        mean = torch.randn(5, 3, requires_grad=True)\r\n        mean_no_batch = torch.randn(3, requires_grad=True)\r\n        mean_multi_batch = torch.randn(6, 5, 3, requires_grad=True)\r\n    \r\n        # construct PSD covariance\r\n        tmp = torch.randn(3, 10)\r\n        cov = torch.tensor(torch.matmul(tmp, tmp.t()) / tmp.shape[-1], requires_grad=True)\r\n        prec = torch.tensor(cov.inverse(), requires_grad=True)\r\n        scale_tril = torch.tensor(torch.potrf(cov, upper=False), requires_grad=True)\r\n    \r\n        # construct batch of PSD covariances\r\n        tmp = torch.randn(6, 5, 3, 10)\r\n        cov_batched = torch.tensor((tmp.unsqueeze(-2) * tmp.unsqueeze(-3)).mean(-1), requires_grad=True)\r\n        prec_batched = [C.inverse() for C in cov_batched.view((-1, 3, 3))]\r\n        prec_batched = torch.stack(prec_batched).view(cov_batched.shape)\r\n        scale_tril_batched = [torch.potrf(C, upper=False) for C in cov_batched.view((-1, 3, 3))]\r\n        scale_tril_batched = torch.stack(scale_tril_batched).view(cov_batched.shape)\r\n    \r\n        # ensure that sample, batch, event shapes all handled correctly\r\n        self.assertEqual(MultivariateNormal(mean, cov).sample().size(), (5, 3))\r\n        self.assertEqual(MultivariateNormal(mean_no_batch, cov).sample().size(), (3,))\r\n        self.assertEqual(MultivariateNormal(mean_multi_batch, cov).sample().size(), (6, 5, 3))\r\n        self.assertEqual(MultivariateNormal(mean, cov).sample((2,)).size(), (2, 5, 3))\r\n        self.assertEqual(MultivariateNormal(mean_no_batch, cov).sample((2,)).size(), (2, 3))\r\n        self.assertEqual(MultivariateNormal(mean_multi_batch, cov).sample((2,)).size(), (2, 6, 5, 3))\r\n        self.assertEqual(MultivariateNormal(mean, cov).sample((2, 7)).size(), (2, 7, 5, 3))\r\n        self.assertEqual(MultivariateNormal(mean_no_batch, cov).sample((2, 7)).size(), (2, 7, 3))\r\n        self.assertEqual(MultivariateNormal(mean_multi_batch, cov).sample((2, 7)).size(), (2, 7, 6, 5, 3))\r\n        self.assertEqual(MultivariateNormal(mean, cov_batched).sample((2, 7)).size(), (2, 7, 6, 5, 3))\r\n        self.assertEqual(MultivariateNormal(mean_no_batch, cov_batched).sample((2, 7)).size(), (2, 7, 6, 5, 3))\r\n        self.assertEqual(MultivariateNormal(mean_multi_batch, cov_batched).sample((2, 7)).size(), (2, 7, 6, 5, 3))\r\n        self.assertEqual(MultivariateNormal(mean, precision_matrix=prec).sample((2, 7)).size(), (2, 7, 5, 3))\r\n        self.assertEqual(MultivariateNormal(mean, precision_matrix=prec_batched).sample((2, 7)).size(), (2, 7, 6, 5, 3))\r\n        self.assertEqual(MultivariateNormal(mean, scale_tril=scale_tril).sample((2, 7)).size(), (2, 7, 5, 3))\r\n        self.assertEqual(MultivariateNormal(mean, scale_tril=scale_tril_batched).sample((2, 7)).size(), (2, 7, 6, 5, 3))\r\n    \r\n        # check gradients\r\n>       self._gradcheck_log_prob(MultivariateNormal, (mean, cov))\r\n\r\ntest/test_distributions.py:1604: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\ntest/test_distributions.py:620: in _gradcheck_log_prob\r\n    gradcheck(apply_fn, ctor_params, raise_exception=True)\r\ntorch/autograd/gradcheck.py:192: in gradcheck\r\n    'numerical:%s\\nanalytical:%s\\n' % (i, j, n, a))\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nmsg = 'Jacobian mismatch for output 0 with respect to input 1,\\nnumerical:tensor([[-0.8790, -0.8150, -0.7580, -0.5903, -0.87...   [ -3.5956, -12.2547,  -3.2756,  -4.5524,   2.5408],\\n        [  2.0588,  12.0112,   1.2863,  -0.1552,  -3.4333]])\\n'\r\n\r\n    def fail_test(msg):\r\n        if raise_exception:\r\n>           raise RuntimeError(msg)\r\nE           RuntimeError: Jacobian mismatch for output 0 with respect to input 1,\r\nE           numerical:tensor([[-0.8790, -0.8150, -0.7580, -0.5903, -0.8705],\r\nE                   [ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000],\r\nE                   [ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000],\r\nE                   [ 0.7389,  1.2535,  0.3848, -0.1361,  0.8325],\r\nE                   [-0.6777, -0.3120, -0.6621, -0.2594, -1.0205],\r\nE                   [ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000],\r\nE                   [ 0.0148, -1.0363,  0.5786,  0.7754, -0.1522],\r\nE                   [-0.7191, -2.4509, -0.6551, -0.9105,  0.5082],\r\nE                   [ 0.4118,  2.4022,  0.2573, -0.0310, -0.6867]])\r\nE           analytical:tensor([[ -4.3950,  -4.0751,  -3.7900,  -2.9516,  -4.3525],\r\nE                   [  0.0000,   0.0000,   0.0000,   0.0000,   0.0000],\r\nE                   [  0.0000,   0.0000,   0.0000,   0.0000,   0.0000],\r\nE                   [  3.6945,   6.2677,   1.9241,  -0.6804,   4.1626],\r\nE                   [ -3.3884,  -1.5600,  -3.3107,  -1.2972,  -5.1025],\r\nE                   [  0.0000,   0.0000,   0.0000,   0.0000,   0.0000],\r\nE                   [  0.0740,  -5.1813,   2.8930,   3.8770,  -0.7608],\r\nE                   [ -3.5956, -12.2547,  -3.2756,  -4.5524,   2.5408],\r\nE                   [  2.0588,  12.0112,   1.2863,  -0.1552,  -3.4333]])\r\n\r\ntorch/autograd/gradcheck.py:172: RuntimeError\r\n============= 1 failed, 10 passed, 155 deselected in 3.91 seconds ==============\r\n</details>"}