{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/197194458", "pull_request_review_id": 130891320, "id": 197194458, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NzE5NDQ1OA==", "diff_hunk": "@@ -0,0 +1,177 @@\n+import math\n+\n+import torch\n+from torch.distributions import constraints\n+from torch.distributions.distribution import Distribution\n+from torch.distributions.multivariate_normal import (_batch_diag, _batch_mahalanobis, _batch_mv,\n+                                                     _batch_potrf_lower, _batch_trtrs_lower,\n+                                                     _get_batch_shape)\n+from torch.distributions.utils import lazy_property\n+\n+\n+def _batch_vector_diag(bvec):\n+    \"\"\"\n+    Returns the diagonal matrices of a batch of vectors.\n+    \"\"\"\n+    n = bvec.shape[-1]\n+    flat_bvec = bvec.reshape(-1, n)\n+    flat_bmat = torch.stack([v.diag() for v in flat_bvec])\n+    return flat_bmat.reshape(bvec.shape + (n,))\n+\n+\n+def _batch_capacitance_tril(W, D):\n+    r\"\"\"\n+    Computes Cholesky of :math:`I + W.T @ inv(D) @ W` for a batch of matrices :math:`W`\n+    and a batch of vectors :math:`D`.\n+    \"\"\"\n+    m = W.shape[-1]\n+    identity = torch.eye(m, out=W.new(m, m))\n+    Wt_Dinv = W.transpose(-1, -2) / D.unsqueeze(-2)\n+    K = identity + torch.matmul(Wt_Dinv, W)\n+    return _batch_potrf_lower(K)\n+\n+\n+def _batch_lowrank_logdet(W, D, capacitance_tril=None):\n+    r\"\"\"\n+    Uses \"matrix determinant lemma\"::\n+        log|W @ W.T + D| = log|C| + log|D|,\n+    where :math:`C` is the capacitance matrix :math:`I + W.T @ inv(D) @ W`, to compute\n+    the log determinant.\n+    \"\"\"\n+    if capacitance_tril is None:\n+        capacitance_tril = _batch_capacitance_tril(W, D)\n+    return 2 * _batch_diag(capacitance_tril).log().sum(-1) + D.log().sum(-1)\n+\n+\n+def _batch_lowrank_mahalanobis(W, D, x, capacitance_tril=None):\n+    r\"\"\"\n+    Uses \"Woodbury matrix identity\"::\n+        inv(W @ W.T + D) = inv(D) - inv(D) @ W @ inv(C) @ W.T @ inv(D),\n+    where :math:`C` is the capacitance matrix :math:`I + W.T @ inv(D) @ W`, to compute the squared\n+    Mahalanobis distance :math:`x.T @ inv(W @ W.T + D) @ x`.\n+    \"\"\"\n+    if capacitance_tril is None:\n+        capacitance_tril = _batch_capacitance_tril(W, D)\n+    Wt_Dinv = W.transpose(-1, -2) / D.unsqueeze(-2)\n+    Wt_Dinv_x = _batch_mv(Wt_Dinv, x)\n+    mahalanobis_term1 = (x.pow(2) / D).sum(-1)\n+    mahalanobis_term2 = _batch_mahalanobis(capacitance_tril, Wt_Dinv_x)\n+    return mahalanobis_term1 - mahalanobis_term2\n+\n+\n+class LowRankMultivariateNormal(Distribution):\n+    r\"\"\"\n+    Creates a multivariate normal distribution with covariance matrix having a low-rank form\n+    parameterized by `scale_factor` and `scale_diag`::\n+        covariance_matrix = scale_factor @ scale_factor.T + scale_diag\n+\n+    Example:\n+\n+        >>> m = MultivariateNormal(torch.zeros(2), torch.tensor([1, 0]), torch.tensor([1, 1]))\n+        >>> m.sample()  # normally distributed with mean=`[0,0]`, scale_factor=`[1,0]`, scale_diag=`[1,1]`\n+        tensor([-0.2102, -0.5429])\n+\n+    Args:\n+        loc (Tensor): mean of the distribution\n+        scale_factor (Tensor): factor part of low-rank form of covariance matrix\n+        scale_diag (Tensor): diagonal part of low-rank form of covariance matrix\n+\n+    Note:\n+        The computation for determinant and inverse of covariance matrix is saved when\n+        `scale_factor.shape[1] << scale_factor.shape[0]` thanks to \"Woodbury matrix identity\" and\n+        \"matrix determinant lemma\". Thanks to these formulas, we just need to compute the\n+        determinant and inverse of the small size \"capacitance\" matrix::\n+            capacitance = I + scale_factor.T @ inv(scale_diag) @ scale_factor\n+    \"\"\"\n+    arg_constraints = {\"loc\": constraints.real,\n+                       \"scale_factor\": constraints.real,\n+                       \"scale_diag\": constraints.positive}\n+    support = constraints.real\n+    has_rsample = True\n+\n+    def __init__(self, loc, scale_factor, scale_diag, validate_args=None):\n+        event_shape = loc.shape[-1:]", "path": "torch/distributions/lowrank_multivariate_normal.py", "position": null, "original_position": 93, "commit_id": "36d6044c64e07c795b8f2b8c9a88df25a407e025", "original_commit_id": "3d30a0028e6462c15ac58010e1efd31197d027cf", "user": {"login": "vishwakftw", "id": 23639302, "node_id": "MDQ6VXNlcjIzNjM5MzAy", "avatar_url": "https://avatars2.githubusercontent.com/u/23639302?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vishwakftw", "html_url": "https://github.com/vishwakftw", "followers_url": "https://api.github.com/users/vishwakftw/followers", "following_url": "https://api.github.com/users/vishwakftw/following{/other_user}", "gists_url": "https://api.github.com/users/vishwakftw/gists{/gist_id}", "starred_url": "https://api.github.com/users/vishwakftw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vishwakftw/subscriptions", "organizations_url": "https://api.github.com/users/vishwakftw/orgs", "repos_url": "https://api.github.com/users/vishwakftw/repos", "events_url": "https://api.github.com/users/vishwakftw/events{/privacy}", "received_events_url": "https://api.github.com/users/vishwakftw/received_events", "type": "User", "site_admin": false}, "body": "Worth adding a check for `loc` being a scalar (raised in #8508).", "created_at": "2018-06-21T16:16:57Z", "updated_at": "2018-11-23T15:46:00Z", "html_url": "https://github.com/pytorch/pytorch/pull/8635#discussion_r197194458", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/8635", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/197194458"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/8635#discussion_r197194458"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/8635"}}, "body_html": "<p>Worth adding a check for <code>loc</code> being a scalar (raised in <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"332552031\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/8508\" data-hovercard-type=\"issue\" data-hovercard-url=\"/pytorch/pytorch/issues/8508/hovercard\" href=\"https://github.com/pytorch/pytorch/issues/8508\">#8508</a>).</p>", "body_text": "Worth adding a check for loc being a scalar (raised in #8508)."}