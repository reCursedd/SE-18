{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/202516579", "pull_request_review_id": 137239682, "id": 202516579, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMjUxNjU3OQ==", "diff_hunk": "@@ -1443,6 +1456,113 @@ def test_normal_sample(self):\n                                         scipy.stats.norm(loc=loc, scale=scale),\n                                         'Normal(mean={}, std={})'.format(loc, scale))\n \n+    def test_lowrank_multivariate_normal_shape(self):\n+        mean = torch.randn(5, 3, requires_grad=True)\n+        mean_no_batch = torch.randn(3, requires_grad=True)\n+        mean_multi_batch = torch.randn(6, 5, 3, requires_grad=True)\n+\n+        # construct PSD covariance\n+        cov_factor = torch.randn(3, 1, requires_grad=True)\n+        cov_diag = torch.tensor(torch.randn(3).abs(), requires_grad=True)\n+\n+        # construct batch of PSD covariances\n+        cov_factor_batched = torch.randn(6, 5, 3, 2, requires_grad=True)\n+        cov_diag_batched = torch.tensor(torch.randn(6, 5, 3).abs(), requires_grad=True)\n+\n+        # ensure that sample, batch, event shapes all handled correctly\n+        self.assertEqual(LowRankMultivariateNormal(mean, cov_factor, cov_diag)\n+                         .sample().size(), (5, 3))\n+        self.assertEqual(LowRankMultivariateNormal(mean_no_batch, cov_factor, cov_diag)\n+                         .sample().size(), (3,))\n+        self.assertEqual(LowRankMultivariateNormal(mean_multi_batch, cov_factor, cov_diag)\n+                         .sample().size(), (6, 5, 3))\n+        self.assertEqual(LowRankMultivariateNormal(mean, cov_factor, cov_diag)\n+                         .sample((2,)).size(), (2, 5, 3))\n+        self.assertEqual(LowRankMultivariateNormal(mean_no_batch, cov_factor, cov_diag)\n+                         .sample((2,)).size(), (2, 3))\n+        self.assertEqual(LowRankMultivariateNormal(mean_multi_batch, cov_factor, cov_diag)\n+                         .sample((2,)).size(), (2, 6, 5, 3))\n+        self.assertEqual(LowRankMultivariateNormal(mean, cov_factor, cov_diag)\n+                         .sample((2, 7)).size(), (2, 7, 5, 3))\n+        self.assertEqual(LowRankMultivariateNormal(mean_no_batch, cov_factor, cov_diag)\n+                         .sample((2, 7)).size(), (2, 7, 3))\n+        self.assertEqual(LowRankMultivariateNormal(mean_multi_batch, cov_factor, cov_diag)\n+                         .sample((2, 7)).size(), (2, 7, 6, 5, 3))\n+        self.assertEqual(LowRankMultivariateNormal(mean, cov_factor_batched, cov_diag_batched)\n+                         .sample((2, 7)).size(), (2, 7, 6, 5, 3))\n+        self.assertEqual(LowRankMultivariateNormal(mean_no_batch, cov_factor_batched, cov_diag_batched)\n+                         .sample((2, 7)).size(), (2, 7, 6, 5, 3))\n+        self.assertEqual(LowRankMultivariateNormal(mean_multi_batch, cov_factor_batched, cov_diag_batched)\n+                         .sample((2, 7)).size(), (2, 7, 6, 5, 3))\n+\n+        # check gradients\n+        self._gradcheck_log_prob(LowRankMultivariateNormal,\n+                                 (mean, cov_factor, cov_diag))\n+        self._gradcheck_log_prob(LowRankMultivariateNormal,\n+                                 (mean_multi_batch, cov_factor, cov_diag))\n+        self._gradcheck_log_prob(LowRankMultivariateNormal,\n+                                 (mean_multi_batch, cov_factor_batched, cov_diag_batched))\n+\n+    @unittest.skipIf(not TEST_NUMPY, \"Numpy not found\")\n+    def test_lowrank_multivariate_normal_log_prob(self):\n+        mean = torch.randn(3, requires_grad=True)\n+        cov_factor = torch.randn(3, 1, requires_grad=True)\n+        cov_diag = torch.tensor(torch.randn(3).abs(), requires_grad=True)\n+        cov = cov_factor.matmul(cov_factor.t()) + cov_diag.diag()\n+\n+        # check that logprob values match scipy logpdf,\n+        # and that covariance and scale_tril parameters are equivalent\n+        dist1 = LowRankMultivariateNormal(mean, cov_factor, cov_diag)\n+        ref_dist = scipy.stats.multivariate_normal(mean.detach().numpy(), cov.detach().numpy())\n+\n+        x = dist1.sample((10,))\n+        expected = ref_dist.logpdf(x.numpy())\n+\n+        self.assertAlmostEqual(0.0, np.mean((dist1.log_prob(x).detach().numpy() - expected)**2), places=3)\n+\n+        # Double-check that batched versions behave the same as unbatched\n+        mean = torch.randn(5, 3, requires_grad=True)\n+        cov_factor = torch.randn(5, 3, 2, requires_grad=True)\n+        cov_diag = torch.tensor(torch.randn(5, 3).abs(), requires_grad=True)\n+\n+        dist_batched = LowRankMultivariateNormal(mean, cov_factor, cov_diag)\n+        dist_unbatched = [LowRankMultivariateNormal(mean[i], cov_factor[i], cov_diag[i])\n+                          for i in range(mean.size(0))]\n+\n+        x = dist_batched.sample((10,))\n+        batched_prob = dist_batched.log_prob(x)\n+        unbatched_prob = torch.stack([dist_unbatched[i].log_prob(x[:, i]) for i in range(5)]).t()\n+\n+        self.assertEqual(batched_prob.shape, unbatched_prob.shape)\n+        self.assertAlmostEqual(0.0, (batched_prob - unbatched_prob).abs().max(), places=3)\n+\n+    @unittest.skipIf(not TEST_NUMPY, \"NumPy not found\")\n+    def test_lowrank_multivariate_normal_sample(self):\n+        set_rng_seed(0)  # see Note [Randomized statistical tests]\n+        mean = torch.randn(5, requires_grad=True)\n+        cov_factor = torch.randn(5, 1, requires_grad=True)\n+        cov_diag = torch.tensor(torch.randn(5).abs(), requires_grad=True)\n+        cov = cov_factor.matmul(cov_factor.t()) + cov_diag.diag()\n+\n+        self._check_sampler_sampler(LowRankMultivariateNormal(mean, cov_factor, cov_diag),\n+                                    scipy.stats.multivariate_normal(mean.detach().numpy(), cov.detach().numpy()),\n+                                    'LowRankMultivariateNormal(loc={}, cov_factor={}, cov_diag={})'\n+                                    .format(mean, cov_factor, cov_diag), multivariate=True)\n+\n+    def test_lowrank_multivariate_normal_properties(self):", "path": "test/test_distributions.py", "position": 126, "original_position": 126, "commit_id": "36d6044c64e07c795b8f2b8c9a88df25a407e025", "original_commit_id": "750342c9b945bfc8ece0e9fa8ce8342dcf9e6532", "user": {"login": "fehiepsi", "id": 4736342, "node_id": "MDQ6VXNlcjQ3MzYzNDI=", "avatar_url": "https://avatars1.githubusercontent.com/u/4736342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fehiepsi", "html_url": "https://github.com/fehiepsi", "followers_url": "https://api.github.com/users/fehiepsi/followers", "following_url": "https://api.github.com/users/fehiepsi/following{/other_user}", "gists_url": "https://api.github.com/users/fehiepsi/gists{/gist_id}", "starred_url": "https://api.github.com/users/fehiepsi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fehiepsi/subscriptions", "organizations_url": "https://api.github.com/users/fehiepsi/orgs", "repos_url": "https://api.github.com/users/fehiepsi/repos", "events_url": "https://api.github.com/users/fehiepsi/events{/privacy}", "received_events_url": "https://api.github.com/users/fehiepsi/received_events", "type": "User", "site_admin": false}, "body": "You are right! Indeed, we also have no such test for multivariate_normal. So I add your test for both cases. Note that the `prec` for variance is higher than 0.01 (0.02 for `lowrank` and 0.05 for `full`). Do you think that it is fine?", "created_at": "2018-07-14T14:33:03Z", "updated_at": "2018-11-23T15:47:25Z", "html_url": "https://github.com/pytorch/pytorch/pull/8635#discussion_r202516579", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/8635", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/202516579"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/8635#discussion_r202516579"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/8635"}}, "body_html": "<p>You are right! Indeed, we also have no such test for multivariate_normal. So I add your test for both cases. Note that the <code>prec</code> for variance is higher than 0.01 (0.02 for <code>lowrank</code> and 0.05 for <code>full</code>). Do you think that it is fine?</p>", "body_text": "You are right! Indeed, we also have no such test for multivariate_normal. So I add your test for both cases. Note that the prec for variance is higher than 0.01 (0.02 for lowrank and 0.05 for full). Do you think that it is fine?", "in_reply_to_id": 202508735}