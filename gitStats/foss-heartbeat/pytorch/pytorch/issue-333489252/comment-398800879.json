{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/398800879", "html_url": "https://github.com/pytorch/pytorch/pull/8635#issuecomment-398800879", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/8635", "id": 398800879, "node_id": "MDEyOklzc3VlQ29tbWVudDM5ODgwMDg3OQ==", "user": {"login": "fritzo", "id": 648532, "node_id": "MDQ6VXNlcjY0ODUzMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/648532?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fritzo", "html_url": "https://github.com/fritzo", "followers_url": "https://api.github.com/users/fritzo/followers", "following_url": "https://api.github.com/users/fritzo/following{/other_user}", "gists_url": "https://api.github.com/users/fritzo/gists{/gist_id}", "starred_url": "https://api.github.com/users/fritzo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fritzo/subscriptions", "organizations_url": "https://api.github.com/users/fritzo/orgs", "repos_url": "https://api.github.com/users/fritzo/repos", "events_url": "https://api.github.com/users/fritzo/events{/privacy}", "received_events_url": "https://api.github.com/users/fritzo/received_events", "type": "User", "site_admin": false}, "created_at": "2018-06-20T15:52:15Z", "updated_at": "2018-06-20T15:52:15Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=4736342\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/fehiepsi\">@fehiepsi</a> The names seem fine; it would be nice to match tensorflow so that code is more portable.</p>\n<p>Re: broadcasting, I've faced similar issues and haven't yet found a good solution. If you find a good pattern here, we may want to copy it elsewhere, e.g. in computing a batch of VonMises normalizing factors when <code>scale</code> is broadcast.</p>\n<p>Here's a proposal:</p>\n<ol>\n<li>in the <code>__init__</code> method, save the original unbroadcast covariance as <code>self._unbroadcasted_covariance_matrix</code></li>\n<li>in the <code>.scale_tril</code> lazy property, use <code>self._unbroadcasted_covariance_matrix</code> and then apply <code>broadcast_all</code> or similar logic <em>after</em> computing the cholesky decomposition, and return this broadcasted result from the lazy property</li>\n</ol>\n<p>We may additionally want to store <code>self._unbroadcasted_scale_tril</code> for other computations.</p>", "body_text": "@fehiepsi The names seem fine; it would be nice to match tensorflow so that code is more portable.\nRe: broadcasting, I've faced similar issues and haven't yet found a good solution. If you find a good pattern here, we may want to copy it elsewhere, e.g. in computing a batch of VonMises normalizing factors when scale is broadcast.\nHere's a proposal:\n\nin the __init__ method, save the original unbroadcast covariance as self._unbroadcasted_covariance_matrix\nin the .scale_tril lazy property, use self._unbroadcasted_covariance_matrix and then apply broadcast_all or similar logic after computing the cholesky decomposition, and return this broadcasted result from the lazy property\n\nWe may additionally want to store self._unbroadcasted_scale_tril for other computations.", "body": "@fehiepsi The names seem fine; it would be nice to match tensorflow so that code is more portable.\r\n\r\nRe: broadcasting, I've faced similar issues and haven't yet found a good solution. If you find a good pattern here, we may want to copy it elsewhere, e.g. in computing a batch of VonMises normalizing factors when `scale` is broadcast.\r\n\r\nHere's a proposal:\r\n1. in the `__init__` method, save the original unbroadcast covariance as `self._unbroadcasted_covariance_matrix`\r\n2. in the `.scale_tril` lazy property, use `self._unbroadcasted_covariance_matrix` and then apply `broadcast_all` or similar logic *after* computing the cholesky decomposition, and return this broadcasted result from the lazy property\r\n\r\nWe may additionally want to store `self._unbroadcasted_scale_tril` for other computations."}