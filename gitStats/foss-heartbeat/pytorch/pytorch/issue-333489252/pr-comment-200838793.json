{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/200838793", "pull_request_review_id": 135231438, "id": 200838793, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDgzODc5Mw==", "diff_hunk": "@@ -2944,6 +3064,71 @@ def test_kl_multivariate_normal_batched(self):\n                                   MultivariateNormal(loc[1], scale_tril=scale_tril[1]))\n         self.assertEqual(expected_kl, actual_kl)\n \n+    def test_kl_multivariate_normal_batched_broadcasted(self):\n+        b = 7  # Number of batches\n+        loc = [torch.randn(b, 3) for _ in range(0, 2)]\n+        scale_tril = [transform_to(constraints.lower_cholesky)(torch.randn(b, 3, 3)),\n+                      transform_to(constraints.lower_cholesky)(torch.randn(3, 3))]\n+        expected_kl = torch.stack([\n+            kl_divergence(MultivariateNormal(loc[0][i], scale_tril=scale_tril[0][i]),\n+                          MultivariateNormal(loc[1][i], scale_tril=scale_tril[1])) for i in range(0, b)])\n+        actual_kl = kl_divergence(MultivariateNormal(loc[0], scale_tril=scale_tril[0]),\n+                                  MultivariateNormal(loc[1], scale_tril=scale_tril[1]))\n+        self.assertEqual(expected_kl, actual_kl)\n+\n+    def test_kl_lowrank_multivariate_normal(self):\n+        set_rng_seed(0)  # see Note [Randomized statistical tests]\n+        n = 5  # Number of tests for lowrank_multivariate_normal\n+        for i in range(0, n):\n+            loc = [torch.randn(4) for _ in range(0, 2)]\n+            scale_factor = [torch.randn(4, 3) for _ in range(0, 2)]\n+            scale_diag = [transform_to(constraints.positive)(torch.randn(4)) for _ in range(0, 2)]\n+            covariance_matrix = [scale_factor[i].matmul(scale_factor[i].t()) +\n+                                 scale_diag[i].diag() for i in range(0, 2)]\n+            p = LowRankMultivariateNormal(loc[0], scale_factor[0], scale_diag[0])\n+            q = LowRankMultivariateNormal(loc[1], scale_factor[1], scale_diag[1])\n+            p_full = MultivariateNormal(loc[0], covariance_matrix[0])\n+            q_full = MultivariateNormal(loc[1], covariance_matrix[1])\n+            expected = kl_divergence(p_full, q_full)\n+\n+            actual_lowrank_lowrank = kl_divergence(p, q)\n+            actual_lowrank_full = kl_divergence(p, q_full)\n+            actual_full_lowrank = kl_divergence(p_full, q)\n+\n+            error_lowrank_lowrank = torch.abs(actual_lowrank_lowrank - expected).max()\n+            self.assertLess(error_lowrank_lowrank, self.precision, '\\n'.join([\n+                'Incorrect KL(LowRankMultivariateNormal, LowRankMultivariateNormal) instance {}/{}'.format(i + 1, n),\n+                'Expected (from KL MultivariateNormal): {}'.format(expected),\n+                'Actual (analytic): {}'.format(actual_lowrank_lowrank),\n+            ]))\n+\n+            error_lowrank_full = torch.abs(actual_lowrank_full - expected).max()\n+            self.assertLess(error_lowrank_full, self.precision, '\\n'.join([\n+                'Incorrect KL(LowRankMultivariateNormal, MultivariateNormal) instance {}/{}'.format(i + 1, n),\n+                'Expected (from KL MultivariateNormal): {}'.format(expected),\n+                'Actual (analytic): {}'.format(actual_lowrank_full),\n+            ]))\n+\n+            error_full_lowrank = torch.abs(actual_full_lowrank - expected).max()\n+            self.assertLess(error_full_lowrank, self.precision, '\\n'.join([\n+                'Incorrect KL(MultivariateNormal, LowRankMultivariateNormal) instance {}/{}'.format(i + 1, n),\n+                'Expected (from KL MultivariateNormal): {}'.format(expected),\n+                'Actual (analytic): {}'.format(actual_full_lowrank),\n+            ]))", "path": "test/test_distributions.py", "position": 227, "original_position": 197, "commit_id": "36d6044c64e07c795b8f2b8c9a88df25a407e025", "original_commit_id": "9d3c59f857232a42ea8954eaa885cf2df581e6de", "user": {"login": "fehiepsi", "id": 4736342, "node_id": "MDQ6VXNlcjQ3MzYzNDI=", "avatar_url": "https://avatars1.githubusercontent.com/u/4736342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fehiepsi", "html_url": "https://github.com/fehiepsi", "followers_url": "https://api.github.com/users/fehiepsi/followers", "following_url": "https://api.github.com/users/fehiepsi/following{/other_user}", "gists_url": "https://api.github.com/users/fehiepsi/gists{/gist_id}", "starred_url": "https://api.github.com/users/fehiepsi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fehiepsi/subscriptions", "organizations_url": "https://api.github.com/users/fehiepsi/orgs", "repos_url": "https://api.github.com/users/fehiepsi/repos", "events_url": "https://api.github.com/users/fehiepsi/events{/privacy}", "received_events_url": "https://api.github.com/users/fehiepsi/received_events", "type": "User", "site_admin": false}, "body": "these are tests for (lowrank, lowrank), (lowrank, full), (full, lowrank)", "created_at": "2018-07-08T12:23:18Z", "updated_at": "2018-11-23T15:46:57Z", "html_url": "https://github.com/pytorch/pytorch/pull/8635#discussion_r200838793", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/8635", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/200838793"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/8635#discussion_r200838793"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/8635"}}, "body_html": "<p>these are tests for (lowrank, lowrank), (lowrank, full), (full, lowrank)</p>", "body_text": "these are tests for (lowrank, lowrank), (lowrank, full), (full, lowrank)"}