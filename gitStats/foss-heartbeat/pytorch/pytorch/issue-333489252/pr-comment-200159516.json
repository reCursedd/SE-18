{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/200159516", "pull_request_review_id": 134408621, "id": 200159516, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDE1OTUxNg==", "diff_hunk": "@@ -289,17 +293,46 @@ def _kl_laplace_laplace(p, q):\n     return t1 + t2 + t3 - 1\n \n \n+@register_kl(LowRankMultivariateNormal, LowRankMultivariateNormal)\n+def _kl_lowrankmultivariatenormal_lowrankmultivariatenormal(p, q):\n+    if p.event_shape != q.event_shape:\n+        raise ValueError(\"KL-divergence between two Low Rank Multivariate Normals with\\\n+                          different event shapes cannot be computed\")\n+\n+    term1 = (_batch_lowrank_logdet(q.scale_factor, q.scale_diag, q._capacitance_tril) -\n+             _batch_lowrank_logdet(p.scale_factor, p.scale_diag, p._capacitance_tril))\n+    term3 = _batch_lowrank_mahalanobis(q.scale_factor, q.scale_diag, q.loc - p.loc,\n+                                       q._capacitance_tril)\n+    # Expands term2 according to\n+    # inv(qcov) @ pcov = [inv(qD) - inv(qD) @ qW @ inv(qC) @ qW.T @ inv(qD)] @ (pW @ pW.T + pD)\n+    #                  = [inv(qD) - A.T @ A] @ (pD + pW @ pW.T)\n+    qWt_qDinv = q.scale_factor.transpose(-1, -2) / q.scale_diag.unsqueeze(-2)\n+    A = _batch_trtrs_lower(qWt_qDinv, q._capacitance_tril)\n+    term21 = (p.scale_diag / q.scale_diag).sum(-1)\n+    term22 = _batch_trace_XXT(p.scale_factor * q.scale_diag.rsqrt().unsqueeze(-1))\n+    term23 = _batch_trace_XXT(A * p.scale_diag.sqrt().unsqueeze(-2))\n+    term24 = _batch_trace_XXT(A.matmul(p.scale_factor))\n+    term2 = term21 + term22 - term23 - term24\n+    return 0.5 * (term1 + term2 + term3 - p.event_shape[0])\n+\n+\n @register_kl(MultivariateNormal, MultivariateNormal)\n def _kl_multivariatenormal_multivariatenormal(p, q):\n     # From https://en.wikipedia.org/wiki/Multivariate_normal_distribution#Kullback%E2%80%93Leibler_divergence\n     if p.event_shape != q.event_shape:\n         raise ValueError(\"KL-divergence between two Multivariate Normals with\\\n                           different event shapes cannot be computed\")\n \n-    term1 = _batch_diag(q.scale_tril).log().sum(-1) - _batch_diag(p.scale_tril).log().sum(-1)\n-    term2 = _batch_trace_XXT(torch.matmul(_batch_inverse(q.scale_tril), p.scale_tril))\n-    term3 = _batch_mahalanobis(q.scale_tril, (q.loc - p.loc))\n-    return term1 + 0.5 * (term2 + term3 - p.event_shape[0])\n+    half_term1 = (_batch_diag(q._unbroadcasted_scale_tril).log().sum(-1) -", "path": "torch/distributions/kl.py", "position": 108, "original_position": 64, "commit_id": "36d6044c64e07c795b8f2b8c9a88df25a407e025", "original_commit_id": "465e3f155b7522370272851c1579e6494d077c88", "user": {"login": "fritzo", "id": 648532, "node_id": "MDQ6VXNlcjY0ODUzMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/648532?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fritzo", "html_url": "https://github.com/fritzo", "followers_url": "https://api.github.com/users/fritzo/followers", "following_url": "https://api.github.com/users/fritzo/following{/other_user}", "gists_url": "https://api.github.com/users/fritzo/gists{/gist_id}", "starred_url": "https://api.github.com/users/fritzo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fritzo/subscriptions", "organizations_url": "https://api.github.com/users/fritzo/orgs", "repos_url": "https://api.github.com/users/fritzo/repos", "events_url": "https://api.github.com/users/fritzo/events{/privacy}", "received_events_url": "https://api.github.com/users/fritzo/received_events", "type": "User", "site_admin": false}, "body": "Do I understand correctly that the changes here are simply to support cheaper unbroadcasted computations?\r\n\r\nHave you added any new test cases to exercise the broadcasting logic?", "created_at": "2018-07-04T15:28:13Z", "updated_at": "2018-11-23T15:46:47Z", "html_url": "https://github.com/pytorch/pytorch/pull/8635#discussion_r200159516", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/8635", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/200159516"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/8635#discussion_r200159516"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/8635"}}, "body_html": "<p>Do I understand correctly that the changes here are simply to support cheaper unbroadcasted computations?</p>\n<p>Have you added any new test cases to exercise the broadcasting logic?</p>", "body_text": "Do I understand correctly that the changes here are simply to support cheaper unbroadcasted computations?\nHave you added any new test cases to exercise the broadcasting logic?"}