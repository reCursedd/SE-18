{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/196273582", "pull_request_review_id": 129793758, "id": 196273582, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NjI3MzU4Mg==", "diff_hunk": "@@ -29,52 +28,58 @@ def _batch_mv(bmat, bvec):\n     to a batch shape. They are not necessarily assumed to have the same batch shape,\n     just ones which can be broadcasted.\n     \"\"\"\n-    n = bvec.size(-1)\n-    batch_shape = _get_batch_shape(bmat, bvec)\n-\n-    # to conform with `torch.bmm` interface, both bmat and bvec should have `.dim() == 3`\n-    bmat = bmat.expand(batch_shape + (n, n)).reshape((-1, n, n))\n-    bvec = bvec.unsqueeze(-1).expand(batch_shape + (n, 1)).reshape((-1, n, 1))\n-    return torch.bmm(bmat, bvec).view(batch_shape + (n,))\n+    return torch.matmul(bmat, bvec.unsqueeze(-1)).squeeze(-1)\n \n \n def _batch_potrf_lower(bmat):\n     r\"\"\"\n     Applies a Cholesky decomposition to all matrices in a batch of arbitrary shape.\n     \"\"\"\n-    n = bmat.size(-1)\n-    cholesky = torch.stack([C.potrf(upper=False) for C in bmat.reshape((-1, n, n))])\n-    return cholesky.view(bmat.shape)\n+    n = bmat.shape[-1]\n+    cholesky = torch.stack([m.potrf(upper=False) for m in bmat.reshape(-1, n, n)])\n+    return cholesky.reshape(bmat.shape)\n \n \n def _batch_diag(bmat):\n     r\"\"\"\n     Returns the diagonals of a batch of square matrices.\n     \"\"\"\n-    return bmat.reshape(bmat.shape[:-2] + (-1,))[..., ::bmat.size(-1) + 1]\n+    return torch.diagonal(bmat, dim1=-2, dim2=-1)\n \n \n def _batch_inverse(bmat):\n     r\"\"\"\n     Returns the inverses of a batch of square matrices.\n     \"\"\"\n-    n = bmat.size(-1)\n-    flat_bmat = bmat.reshape(-1, n, n)\n-    flat_inv_bmat = torch.stack([m.inverse() for m in flat_bmat], 0)\n-    return flat_inv_bmat.view(bmat.shape)\n+    n = bmat.shape[-1]\n+    flat_bmat_inv = torch.stack([m.inverse() for m in bmat.reshape(-1, n, n)])\n+    return flat_bmat_inv.reshape(bmat.shape)\n+\n+\n+def _batch_trtrs_lower(bb, bA):\n+    \"\"\"\n+    Applies `torch.trtrs` for batches of matrices. `bb` and `bA` should have\n+    the same batch shape.\n+    \"\"\"\n+    flat_b = bb.reshape((-1,) + bb.shape[-2:])\n+    flat_A = bA.reshape((-1,) + bA.shape[-2:])\n+    flat_X = torch.stack([torch.trtrs(b, A, upper=False)[0] for b, A in zip(flat_b, flat_A)])\n+    return flat_X.reshape(bb.shape)\n \n \n def _batch_mahalanobis(L, x):\n     r\"\"\"\n     Computes the squared Mahalanobis distance :math:`\\mathbf{x}^\\top\\mathbf{M}^{-1}\\mathbf{x}`\n     for a factored :math:`\\mathbf{M} = \\mathbf{L}\\mathbf{L}^\\top`.\n \n-    Accepts batches for both L and x.\n+    Accepts batches for both L and x. They are not necessarily assumed to have the same batch\n+    shape, just ones which can be broadcasted.\n     \"\"\"\n-    # TODO: use `torch.potrs` or similar once a backwards pass is implemented.\n-    flat_L = L.unsqueeze(0).reshape((-1,) + L.shape[-2:])\n-    L_inv = torch.stack([torch.inverse(Li.t()) for Li in flat_L]).view(L.shape)\n-    return (x.unsqueeze(-1) * L_inv).sum(-2).pow(2.0).sum(-1)\n+    n = x.shape[-1]\n+    batch_shape = _get_batch_shape(L, x)\n+    x = x.expand(batch_shape + (n,))\n+    L = L.expand(batch_shape + (n, n))\n+    return _batch_trtrs_lower(x.unsqueeze(-1), L).squeeze(-1).pow(2).sum(-1)", "path": "torch/distributions/multivariate_normal.py", "position": null, "original_position": 90, "commit_id": "36d6044c64e07c795b8f2b8c9a88df25a407e025", "original_commit_id": "354dc255469d07783243279d92b2190b220c5551", "user": {"login": "fehiepsi", "id": 4736342, "node_id": "MDQ6VXNlcjQ3MzYzNDI=", "avatar_url": "https://avatars1.githubusercontent.com/u/4736342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fehiepsi", "html_url": "https://github.com/fehiepsi", "followers_url": "https://api.github.com/users/fehiepsi/followers", "following_url": "https://api.github.com/users/fehiepsi/following{/other_user}", "gists_url": "https://api.github.com/users/fehiepsi/gists{/gist_id}", "starred_url": "https://api.github.com/users/fehiepsi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fehiepsi/subscriptions", "organizations_url": "https://api.github.com/users/fehiepsi/orgs", "repos_url": "https://api.github.com/users/fehiepsi/repos", "events_url": "https://api.github.com/users/fehiepsi/events{/privacy}", "received_events_url": "https://api.github.com/users/fehiepsi/received_events", "type": "User", "site_admin": false}, "body": "New implementation of `batch_mahalanobis`, which use `batch_trtrs_lower`.", "created_at": "2018-06-19T01:41:36Z", "updated_at": "2018-11-23T15:45:44Z", "html_url": "https://github.com/pytorch/pytorch/pull/8635#discussion_r196273582", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/8635", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/196273582"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/8635#discussion_r196273582"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/8635"}}, "body_html": "<p>New implementation of <code>batch_mahalanobis</code>, which use <code>batch_trtrs_lower</code>.</p>", "body_text": "New implementation of batch_mahalanobis, which use batch_trtrs_lower."}