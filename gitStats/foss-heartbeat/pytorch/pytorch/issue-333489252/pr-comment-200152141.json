{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/200152141", "pull_request_review_id": 134408621, "id": 200152141, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDE1MjE0MQ==", "diff_hunk": "@@ -0,0 +1,181 @@\n+import math\n+\n+import torch\n+from torch.distributions import constraints\n+from torch.distributions.distribution import Distribution\n+from torch.distributions.multivariate_normal import (_batch_diag, _batch_mahalanobis, _batch_mv,\n+                                                     _batch_potrf_lower, _batch_trtrs_lower,\n+                                                     _get_batch_shape)\n+from torch.distributions.utils import lazy_property\n+\n+\n+def _batch_vector_diag(bvec):\n+    \"\"\"\n+    Returns the diagonal matrices of a batch of vectors.\n+    \"\"\"\n+    n = bvec.size(-1)\n+    flat_bvec = bvec.reshape(-1, n)\n+    flat_bmat = torch.stack([v.diag() for v in flat_bvec])", "path": "torch/distributions/lowrank_multivariate_normal.py", "position": null, "original_position": 18, "commit_id": "36d6044c64e07c795b8f2b8c9a88df25a407e025", "original_commit_id": "465e3f155b7522370272851c1579e6494d077c88", "user": {"login": "fritzo", "id": 648532, "node_id": "MDQ6VXNlcjY0ODUzMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/648532?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fritzo", "html_url": "https://github.com/fritzo", "followers_url": "https://api.github.com/users/fritzo/followers", "following_url": "https://api.github.com/users/fritzo/following{/other_user}", "gists_url": "https://api.github.com/users/fritzo/gists{/gist_id}", "starred_url": "https://api.github.com/users/fritzo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fritzo/subscriptions", "organizations_url": "https://api.github.com/users/fritzo/orgs", "repos_url": "https://api.github.com/users/fritzo/repos", "events_url": "https://api.github.com/users/fritzo/events{/privacy}", "received_events_url": "https://api.github.com/users/fritzo/received_events", "type": "User", "site_admin": false}, "body": "Why not use your `n+1` trick to avoid the `O(batch_shape)` python interaction?\r\n```py\r\nn = bvec.size(-1)\r\nflat_bvec = bvec.reshape(-1, n)\r\nflat_bmat = bvec.new_zeros(flat_bvec.shape + (n,))\r\nflat_bmat.view(-1, n*n)[:, ::n + 1] = flat_bvec\r\nreturn flat_bmat.reshape(bvec.shape + (n,))\r\n```", "created_at": "2018-07-04T14:58:30Z", "updated_at": "2018-11-23T15:46:46Z", "html_url": "https://github.com/pytorch/pytorch/pull/8635#discussion_r200152141", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/8635", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/200152141"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/8635#discussion_r200152141"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/8635"}}, "body_html": "<p>Why not use your <code>n+1</code> trick to avoid the <code>O(batch_shape)</code> python interaction?</p>\n<div class=\"highlight highlight-source-python\"><pre>n <span class=\"pl-k\">=</span> bvec.size(<span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>)\nflat_bvec <span class=\"pl-k\">=</span> bvec.reshape(<span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>, n)\nflat_bmat <span class=\"pl-k\">=</span> bvec.new_zeros(flat_bvec.shape <span class=\"pl-k\">+</span> (n,))\nflat_bmat.view(<span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>, n<span class=\"pl-k\">*</span>n)[:, ::n <span class=\"pl-k\">+</span> <span class=\"pl-c1\">1</span>] <span class=\"pl-k\">=</span> flat_bvec\n<span class=\"pl-k\">return</span> flat_bmat.reshape(bvec.shape <span class=\"pl-k\">+</span> (n,))</pre></div>", "body_text": "Why not use your n+1 trick to avoid the O(batch_shape) python interaction?\nn = bvec.size(-1)\nflat_bvec = bvec.reshape(-1, n)\nflat_bmat = bvec.new_zeros(flat_bvec.shape + (n,))\nflat_bmat.view(-1, n*n)[:, ::n + 1] = flat_bvec\nreturn flat_bmat.reshape(bvec.shape + (n,))"}