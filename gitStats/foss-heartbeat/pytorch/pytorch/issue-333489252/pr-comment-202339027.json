{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/202339027", "pull_request_review_id": 137022570, "id": 202339027, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMjMzOTAyNw==", "diff_hunk": "@@ -0,0 +1,180 @@\n+import math\n+\n+import torch\n+from torch.distributions import constraints\n+from torch.distributions.distribution import Distribution\n+from torch.distributions.multivariate_normal import (_batch_diag, _batch_mahalanobis, _batch_mv,\n+                                                     _batch_potrf_lower, _batch_trtrs_lower,\n+                                                     _get_batch_shape)\n+from torch.distributions.utils import lazy_property\n+\n+\n+def _batch_vector_diag(bvec):\n+    \"\"\"\n+    Returns the diagonal matrices of a batch of vectors.\n+    \"\"\"\n+    n = bvec.size(-1)\n+    bmat = bvec.new_zeros(bvec.shape + (n,))\n+    bmat.view(bvec.shape[:-1] + (-1,))[..., ::n + 1] = bvec\n+    return bmat\n+\n+\n+def _batch_capacitance_tril(W, D):\n+    r\"\"\"\n+    Computes Cholesky of :math:`I + W.T @ inv(D) @ W` for a batch of matrices :math:`W`\n+    and a batch of vectors :math:`D`.\n+    \"\"\"\n+    m = W.size(-1)\n+    Wt_Dinv = W.transpose(-1, -2) / D.unsqueeze(-2)\n+    K = torch.matmul(Wt_Dinv, W).contiguous()\n+    K.view(-1, m * m)[:, ::m + 1] += 1  # add identity matrix to K\n+    return _batch_potrf_lower(K)\n+\n+\n+def _batch_lowrank_logdet(W, D, capacitance_tril):\n+    r\"\"\"\n+    Uses \"matrix determinant lemma\"::\n+        log|W @ W.T + D| = log|C| + log|D|,\n+    where :math:`C` is the capacitance matrix :math:`I + W.T @ inv(D) @ W`, to compute\n+    the log determinant.\n+    \"\"\"\n+    return 2 * _batch_diag(capacitance_tril).log().sum(-1) + D.log().sum(-1)\n+\n+\n+def _batch_lowrank_mahalanobis(W, D, x, capacitance_tril):\n+    r\"\"\"\n+    Uses \"Woodbury matrix identity\"::\n+        inv(W @ W.T + D) = inv(D) - inv(D) @ W @ inv(C) @ W.T @ inv(D),\n+    where :math:`C` is the capacitance matrix :math:`I + W.T @ inv(D) @ W`, to compute the squared\n+    Mahalanobis distance :math:`x.T @ inv(W @ W.T + D) @ x`.\n+    \"\"\"\n+    Wt_Dinv = W.transpose(-1, -2) / D.unsqueeze(-2)\n+    Wt_Dinv_x = _batch_mv(Wt_Dinv, x)\n+    mahalanobis_term1 = (x.pow(2) / D).sum(-1)\n+    mahalanobis_term2 = _batch_mahalanobis(capacitance_tril, Wt_Dinv_x)\n+    return mahalanobis_term1 - mahalanobis_term2\n+\n+\n+class LowRankMultivariateNormal(Distribution):\n+    r\"\"\"\n+    Creates a multivariate normal distribution with covariance matrix having a low-rank form\n+    parameterized by `cov_factor` and `cov_diag`::\n+        covariance_matrix = cov_factor @ cov_factor.T + cov_diag\n+\n+    Example:\n+\n+        >>> m = MultivariateNormal(torch.zeros(2), torch.tensor([1, 0]), torch.tensor([1, 1]))\n+        >>> m.sample()  # normally distributed with mean=`[0,0]`, cov_factor=`[1,0]`, cov_diag=`[1,1]`\n+        tensor([-0.2102, -0.5429])\n+\n+    Args:\n+        loc (Tensor): mean of the distribution with shape `batch_shape + event_shape`\n+        cov_factor (Tensor): factor part of low-rank form of covariance matrix with shape\n+            `batch_shape + event_shape + (rank,)`\n+        cov_diag (Tensor): diagonal part of low-rank form of covariance matrix with shape\n+            `batch_shape + event_shape`\n+\n+    Note:\n+        The computation for determinant and inverse of covariance matrix is avoided when\n+        `cov_factor.shape[1] << cov_factor.shape[0]` thanks to `Woodbury matrix identity\n+        <https://en.wikipedia.org/wiki/Woodbury_matrix_identity>`_ and\n+        `matrix determinant lemma <https://en.wikipedia.org/wiki/Matrix_determinant_lemma>`_.\n+        Thanks to these formulas, we just need to compute the determinant and inverse of\n+        the small size \"capacitance\" matrix::\n+            capacitance = I + cov_factor.T @ inv(cov_diag) @ cov_factor\n+    \"\"\"\n+    arg_constraints = {\"loc\": constraints.real,\n+                       \"cov_factor\": constraints.real,\n+                       \"cov_diag\": constraints.positive}\n+    support = constraints.real\n+    has_rsample = True\n+\n+    def __init__(self, loc, cov_factor, cov_diag, validate_args=None):\n+        if loc.dim() < 1:\n+            raise ValueError(\"loc must be at least one-dimensional.\")\n+        event_shape = loc.shape[-1:]\n+        if cov_factor.dim() < 2:\n+            raise ValueError(\"cov_factor must be at least two-dimensional, \"\n+                             \"with optional leading batch dimensions\")\n+        if cov_factor.shape[-2:-1] != event_shape:\n+            raise ValueError(\"cov_factor must be a batch of matrices with shape {} x m\"\n+                             .format(event_shape[0]))\n+        if cov_diag.shape[-1:] != event_shape:\n+            raise ValueError(\"cov_diag must be a batch of vectors with shape {}\".format(event_shape))\n+\n+        scale_batch_shape = _get_batch_shape(cov_factor, cov_diag)\n+        try:\n+            batch_shape = torch._C._infer_size(loc.shape[:-1], scale_batch_shape)\n+        except RuntimeError:\n+            raise ValueError(\"Incompatible batch shapes: loc {}, cov_factor {}, cov_diag {}\"\n+                             .format(loc.shape, cov_factor.shape, cov_diag.shape))\n+\n+        loc_shape = batch_shape + event_shape\n+        self.loc = loc.expand(loc_shape)\n+        self.cov_factor = cov_factor.expand(loc_shape + cov_factor.shape[-1:])\n+        self.cov_diag = cov_diag.expand(loc_shape)\n+        self._capacitance_tril = _batch_capacitance_tril(self.cov_factor, self.cov_diag)\n+        super(LowRankMultivariateNormal, self).__init__(batch_shape, event_shape,\n+                                                        validate_args=validate_args)\n+\n+    @property\n+    def mean(self):\n+        return self.loc\n+\n+    @property\n+    def variance(self):\n+        return self.cov_factor.pow(2).sum(-1) + self.cov_diag\n+\n+    @lazy_property\n+    def scale_tril(self):\n+        # The following identity is used to increase the numerically computation stability\n+        # for Cholesky decomposition (see http://www.gaussianprocess.org/gpml/, Section 3.4.3):\n+        #     W @ W.T + D = D1/2 @ (I + D-1/2 @ W @ W.T @ D-1/2) @ D1/2\n+        # The matrix \"I + D-1/2 @ W @ W.T @ D-1/2\" has eigenvalues bounded from below by 1,\n+        # hence it is well-conditioned and safe to take Cholesky decomposition.\n+        n = self._event_shape[0]\n+        cov_diag_sqrt_unsqueeze = self.cov_diag.sqrt().unsqueeze(-1)\n+        Dinvsqrt_W = self.cov_factor / cov_diag_sqrt_unsqueeze\n+        K = torch.matmul(Dinvsqrt_W, Dinvsqrt_W.transpose(-1, -2)).contiguous()\n+        K.view(-1, n * n)[:, ::n + 1] += 1  # add identity matrix to K\n+        return cov_diag_sqrt_unsqueeze * _batch_potrf_lower(K)\n+\n+    @lazy_property\n+    def covariance_matrix(self):\n+        return (torch.matmul(self.cov_factor, self.cov_factor.transpose(-1, -2)) +\n+                _batch_vector_diag(self.cov_diag))\n+\n+    @lazy_property\n+    def precision_matrix(self):\n+        # We use \"Woodbury matrix identity\" to take advantage of low rank form::\n+        #     inv(W @ W.T + D) = inv(D) - inv(D) @ W @ inv(C) @ W.T @ inv(D)\n+        # where :math:`C` is the capacitance matrix.\n+        Wt_Dinv = self.cov_factor.transpose(-1, -2) / self.cov_diag.unsqueeze(-2)\n+        A = _batch_trtrs_lower(Wt_Dinv, self._capacitance_tril)\n+        return (_batch_vector_diag(self.cov_diag.reciprocal()) -\n+                torch.matmul(A.transpose(-1, -2), A))\n+\n+    def rsample(self, sample_shape=torch.Size()):\n+        shape = self._extended_shape(sample_shape)\n+        eps_W = self.loc.new_empty(shape[:-1] + (self.cov_factor.size(-1),)).normal_()\n+        eps_D = self.loc.new_empty(shape).normal_()\n+        return self.loc + _batch_mv(self.cov_factor, eps_W) + self.cov_diag * eps_D", "path": "torch/distributions/lowrank_multivariate_normal.py", "position": null, "original_position": 161, "commit_id": "36d6044c64e07c795b8f2b8c9a88df25a407e025", "original_commit_id": "f8c29964077f1faa4d7cf7c3f2afe74de1f8b932", "user": {"login": "fritzo", "id": 648532, "node_id": "MDQ6VXNlcjY0ODUzMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/648532?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fritzo", "html_url": "https://github.com/fritzo", "followers_url": "https://api.github.com/users/fritzo/followers", "following_url": "https://api.github.com/users/fritzo/following{/other_user}", "gists_url": "https://api.github.com/users/fritzo/gists{/gist_id}", "starred_url": "https://api.github.com/users/fritzo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fritzo/subscriptions", "organizations_url": "https://api.github.com/users/fritzo/orgs", "repos_url": "https://api.github.com/users/fritzo/repos", "events_url": "https://api.github.com/users/fritzo/events{/privacy}", "received_events_url": "https://api.github.com/users/fritzo/received_events", "type": "User", "site_admin": false}, "body": "Shouldn't the last term be `self.cov_diag.sqrt() * eps_D`? Can you please add a test that would have caught this?", "created_at": "2018-07-13T12:51:48Z", "updated_at": "2018-11-23T15:47:18Z", "html_url": "https://github.com/pytorch/pytorch/pull/8635#discussion_r202339027", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/8635", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/202339027"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/8635#discussion_r202339027"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/8635"}}, "body_html": "<p>Shouldn't the last term be <code>self.cov_diag.sqrt() * eps_D</code>? Can you please add a test that would have caught this?</p>", "body_text": "Shouldn't the last term be self.cov_diag.sqrt() * eps_D? Can you please add a test that would have caught this?"}