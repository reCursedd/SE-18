{"url": "https://api.github.com/repos/pytorch/pytorch/issues/13886", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/13886/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/13886/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/13886/events", "html_url": "https://github.com/pytorch/pytorch/issues/13886", "id": 380067615, "node_id": "MDU6SXNzdWUzODAwNjc2MTU=", "number": 13886, "title": "Get wrong with Pytorch derivative of division", "user": {"login": "vipghn4", "id": 24975956, "node_id": "MDQ6VXNlcjI0OTc1OTU2", "avatar_url": "https://avatars2.githubusercontent.com/u/24975956?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vipghn4", "html_url": "https://github.com/vipghn4", "followers_url": "https://api.github.com/users/vipghn4/followers", "following_url": "https://api.github.com/users/vipghn4/following{/other_user}", "gists_url": "https://api.github.com/users/vipghn4/gists{/gist_id}", "starred_url": "https://api.github.com/users/vipghn4/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vipghn4/subscriptions", "organizations_url": "https://api.github.com/users/vipghn4/orgs", "repos_url": "https://api.github.com/users/vipghn4/repos", "events_url": "https://api.github.com/users/vipghn4/events{/privacy}", "received_events_url": "https://api.github.com/users/vipghn4/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-11-13T05:37:59Z", "updated_at": "2018-11-13T05:39:42Z", "closed_at": "2018-11-13T05:39:42Z", "author_association": "NONE", "body_html": "<p>I'm trying to compute the gradient of 1/x without using Pytorch's autograd. I use the formula grad(1/x, x) = -1/(x**2) but when I compare my result with the gradient given by Pytorch's autograd, they're different.<br>\nHere is my code</p>\n<pre><code>a = torch.tensor(np.random.randn(), dtype=dtype, requires_grad=True)\nloss = 1/a\nloss.backward()\nprint(a.grad - (-1/(a**2)))\n</code></pre>\n<p>The output is</p>\n<pre><code>tensor(5.9605e-08, grad_fn=&lt;ThAddBackward&gt;)\n</code></pre>\n<p>Can anyone explain why ?</p>", "body_text": "I'm trying to compute the gradient of 1/x without using Pytorch's autograd. I use the formula grad(1/x, x) = -1/(x**2) but when I compare my result with the gradient given by Pytorch's autograd, they're different.\nHere is my code\na = torch.tensor(np.random.randn(), dtype=dtype, requires_grad=True)\nloss = 1/a\nloss.backward()\nprint(a.grad - (-1/(a**2)))\n\nThe output is\ntensor(5.9605e-08, grad_fn=<ThAddBackward>)\n\nCan anyone explain why ?", "body": "I'm trying to compute the gradient of 1/x without using Pytorch's autograd. I use the formula grad(1/x, x) = -1/(x**2) but when I compare my result with the gradient given by Pytorch's autograd, they're different.\r\nHere is my code\r\n```\r\na = torch.tensor(np.random.randn(), dtype=dtype, requires_grad=True)\r\nloss = 1/a\r\nloss.backward()\r\nprint(a.grad - (-1/(a**2)))\r\n```\r\nThe output is\r\n```\r\ntensor(5.9605e-08, grad_fn=<ThAddBackward>)\r\n```\r\nCan anyone explain why ?"}