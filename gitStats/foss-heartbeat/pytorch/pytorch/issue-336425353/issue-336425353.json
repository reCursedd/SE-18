{"url": "https://api.github.com/repos/pytorch/pytorch/issues/8974", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/8974/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/8974/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/8974/events", "html_url": "https://github.com/pytorch/pytorch/issues/8974", "id": 336425353, "node_id": "MDU6SXNzdWUzMzY0MjUzNTM=", "number": 8974, "title": "Compiling pytorch on MacOSX 10.13.5 with support for CUDA GeForceGT 750M", "user": {"login": "joseandrespena", "id": 145929, "node_id": "MDQ6VXNlcjE0NTkyOQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/145929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joseandrespena", "html_url": "https://github.com/joseandrespena", "followers_url": "https://api.github.com/users/joseandrespena/followers", "following_url": "https://api.github.com/users/joseandrespena/following{/other_user}", "gists_url": "https://api.github.com/users/joseandrespena/gists{/gist_id}", "starred_url": "https://api.github.com/users/joseandrespena/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joseandrespena/subscriptions", "organizations_url": "https://api.github.com/users/joseandrespena/orgs", "repos_url": "https://api.github.com/users/joseandrespena/repos", "events_url": "https://api.github.com/users/joseandrespena/events{/privacy}", "received_events_url": "https://api.github.com/users/joseandrespena/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 443483881, "node_id": "MDU6TGFiZWw0NDM0ODM4ODE=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/todo", "name": "todo", "color": "c2e0c6", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "yf225", "id": 4063635, "node_id": "MDQ6VXNlcjQwNjM2MzU=", "avatar_url": "https://avatars0.githubusercontent.com/u/4063635?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yf225", "html_url": "https://github.com/yf225", "followers_url": "https://api.github.com/users/yf225/followers", "following_url": "https://api.github.com/users/yf225/following{/other_user}", "gists_url": "https://api.github.com/users/yf225/gists{/gist_id}", "starred_url": "https://api.github.com/users/yf225/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yf225/subscriptions", "organizations_url": "https://api.github.com/users/yf225/orgs", "repos_url": "https://api.github.com/users/yf225/repos", "events_url": "https://api.github.com/users/yf225/events{/privacy}", "received_events_url": "https://api.github.com/users/yf225/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "yf225", "id": 4063635, "node_id": "MDQ6VXNlcjQwNjM2MzU=", "avatar_url": "https://avatars0.githubusercontent.com/u/4063635?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yf225", "html_url": "https://github.com/yf225", "followers_url": "https://api.github.com/users/yf225/followers", "following_url": "https://api.github.com/users/yf225/following{/other_user}", "gists_url": "https://api.github.com/users/yf225/gists{/gist_id}", "starred_url": "https://api.github.com/users/yf225/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yf225/subscriptions", "organizations_url": "https://api.github.com/users/yf225/orgs", "repos_url": "https://api.github.com/users/yf225/repos", "events_url": "https://api.github.com/users/yf225/events{/privacy}", "received_events_url": "https://api.github.com/users/yf225/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 8, "created_at": "2018-06-27T23:45:22Z", "updated_at": "2018-09-11T21:19:17Z", "closed_at": "2018-07-02T18:11:40Z", "author_association": "NONE", "body_html": "<h2>Issue description</h2>\n<p>Compiling pytorch on MacOSX 10.13.5 with support for CUDA GeForceGT 750M 2048MB</p>\n<h2>Code example</h2>\n<p>Error log<br>\n/Users/josepen/Development/pytorch/aten/src/ATen/native/cuda/SummaryOps.cu:222:134: warning: self-comparison always evaluates to true [-Wtautological-compare]<br>\nswitch (memType) { case CUDAHistogramMemoryType::SHARED:  (__cudaPushCallConfiguration(grid, block, (CUDAHistogramMemoryType::SHARED == CUDAHistogramMemoryType::SHARED) ? sharedMem : (0), at::globalContext().getCurrentCUDAStream())) ? (void)0 : kernelHistogram1D&lt; output_t, input_t, int64_t, 1, 2, 1, CUDAHistogramMemoryType::SHARED&gt; (aInfo, pInfo, bInfo, binsize, totalElements, getWeightsOp); if (!((cudaGetLastError()) == (cudaSuccess))) { throw Error({<strong>func</strong>, \"/Users/josepen/Development/pytorch/aten/src/ATen/native/cuda/SummaryOps.cu\", 222}, at::str(at::str(\"cudaGetLastError() == cudaSuccess\", \" ASSERT FAILED at \", \"/Users/josepen/Development/pytorch/aten/src/ATen/native/cuda/SummaryOps.cu\", \":\", 222, \", please report a bug to PyTorch. \", \"kernelHistogram1D failed\"))); }  ; ; break; case CUDAHistogramMemoryType::MULTI_BLOCK:  (__cudaPushCallConfiguration(grid, block, (CUDAHistogramMemoryType::MULTI_BLOCK == CUDAHistogramMemoryType::SHARED) ? sharedMem : (0), at::globalContext().getCurrentCUDAStream())) ? (void)0 : kernelHistogram1D&lt; output_t, input_t, int64_t, 1, 2, 1, CUDAHistogramMemoryType::MULTI_BLOCK&gt; (aInfo, pInfo, bInfo, binsize, totalElements, getWeightsOp); if (!((cudaGetLastError()) == (cudaSuccess))) { throw Error({<strong>func</strong>, \"/Users/josepen/Development/pytorch/aten/src/ATen/native/cuda/SummaryOps.cu\", 222}, at::str(at::str(\"cudaGetLastError() == cudaSuccess\", \" ASSERT FAILED at \", \"/Users/josepen/Development/pytorch/aten/src/ATen/native/cuda/SummaryOps.cu\", \":\", 222, \", please report a bug to PyTorch. \", \"kernelHistogram1D failed\"))); }  ; ; break; default:  (__cudaPushCallConfiguration(grid, block, (CUDAHistogramMemoryType::GLOBAL == CUDAHistogramMemoryType::SHARED) ? sharedMem : (0), at::globalContext().getCurrentCUDAStream())) ? (void)0 : kernelHistogram1D&lt; output_t, input_t, int64_t, 1, 2, 1, CUDAHistogramMemoryType::GLOBAL&gt; (aInfo, pInfo, bInfo, binsize, totalElements, getWeightsOp); if (!((cudaGetLastError()) == (cudaSuccess))) { throw Error({<strong>func</strong>, \"/Users/josepen/Development/pytorch/aten/src/ATen/native/cuda/SummaryOps.cu\", 222}, at::str(at::str(\"cudaGetLastError() == cudaSuccess\", \" ASSERT FAILED at \", \"/Users/josepen/Development/pytorch/aten/src/ATen/native/cuda/SummaryOps.cu\", \":\", 222, \", please report a bug to PyTorch. \", \"kernelHistogram1D failed\"))); }  ; ; }</p>\n<h2>System Info</h2>\n<p>josepens-mbp:pytorch josepen$ python torch/utils/collect_env.py<br>\nCollecting environment information...<br>\nPyTorch version: 0.5.0a0+290d20b<br>\nIs debug build: No<br>\nCUDA used to build PyTorch: 9.2</p>\n<p>OS: Mac OSX 10.13.5<br>\nGCC version: Could not collect<br>\nCMake version: version 3.11.1</p>\n<p>Python version: 3.6<br>\nIs CUDA available: Yes<br>\nCUDA runtime version: 9.2.64<br>\nGPU models and configuration: Could not collect<br>\nNvidia driver version: Could not collect<br>\ncuDNN version: Probably one of the following:<br>\n/usr/local/cuda/lib/libcudnn.7.dylib<br>\n/usr/local/cuda/lib/libcudnn.dylib<br>\n/usr/local/cuda/lib/libcudnn_static.a</p>\n<p>Versions of relevant libraries:<br>\n[pip3] numpy (1.14.5)<br>\n[pip3] torch (0.3.1)<br>\n[pip3] torchtext (0.2.3)<br>\n[pip3] torchvision (0.2.1)<br>\n[conda] torch                     0.5.0a0+290d20b           <br>\n[conda] torchtext                 0.2.3                     <br>\n[conda] torchvision               0.2.1                     <br>\njosepens-mbp:pytorch josepen$</p>\n<ul>\n<li>PyTorch or Caffe2: pytorch</li>\n<li>How you installed PyTorch (conda, pip, source): I'm compiling from source</li>\n<li>Build command you used (if compiling from source):  MACOSX_DEPLOYMENT_TARGET=10.13 CC=clang CXX=clang++ python setup.py install</li>\n<li>OS: MacOSX 10.13.5</li>\n<li>PyTorch version: I cloned the repo this is the hash version<br>\njosepens-mbp:pytorch josepen$ git rev-parse HEAD<br>\n<a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/pytorch/pytorch/commit/290d20b094dff35da866deafa92c12a6264dc544/hovercard\" href=\"https://github.com/pytorch/pytorch/commit/290d20b094dff35da866deafa92c12a6264dc544\"><tt>290d20b</tt></a></li>\n<li>Python version: 3.6</li>\n<li>CUDA/cuDNN version: 9.2.64</li>\n<li>GPU models and configuration: GeForceGT 750M</li>\n<li>GCC version (if compiling from source): gcc --version<br>\nConfigured with: --prefix=/Library/Developer/CommandLineTools/usr --with-gxx-include-dir=/usr/include/c++/4.2.1<br>\nApple LLVM version 9.1.0 (clang-902.0.39.2)<br>\nTarget: x86_64-apple-darwin17.6.0<br>\nThread model: posix<br>\nInstalledDir: /Library/Developer/CommandLineTools/usr/bin</li>\n<li>CMake version: cmake --version<br>\ncmake version 3.11.1<br>\nCMake suite maintained and supported by Kitware (kitware.com/cmake)</li>\n<li>Versions of any other relevant libraries:</li>\n</ul>", "body_text": "Issue description\nCompiling pytorch on MacOSX 10.13.5 with support for CUDA GeForceGT 750M 2048MB\nCode example\nError log\n/Users/josepen/Development/pytorch/aten/src/ATen/native/cuda/SummaryOps.cu:222:134: warning: self-comparison always evaluates to true [-Wtautological-compare]\nswitch (memType) { case CUDAHistogramMemoryType::SHARED:  (__cudaPushCallConfiguration(grid, block, (CUDAHistogramMemoryType::SHARED == CUDAHistogramMemoryType::SHARED) ? sharedMem : (0), at::globalContext().getCurrentCUDAStream())) ? (void)0 : kernelHistogram1D< output_t, input_t, int64_t, 1, 2, 1, CUDAHistogramMemoryType::SHARED> (aInfo, pInfo, bInfo, binsize, totalElements, getWeightsOp); if (!((cudaGetLastError()) == (cudaSuccess))) { throw Error({func, \"/Users/josepen/Development/pytorch/aten/src/ATen/native/cuda/SummaryOps.cu\", 222}, at::str(at::str(\"cudaGetLastError() == cudaSuccess\", \" ASSERT FAILED at \", \"/Users/josepen/Development/pytorch/aten/src/ATen/native/cuda/SummaryOps.cu\", \":\", 222, \", please report a bug to PyTorch. \", \"kernelHistogram1D failed\"))); }  ; ; break; case CUDAHistogramMemoryType::MULTI_BLOCK:  (__cudaPushCallConfiguration(grid, block, (CUDAHistogramMemoryType::MULTI_BLOCK == CUDAHistogramMemoryType::SHARED) ? sharedMem : (0), at::globalContext().getCurrentCUDAStream())) ? (void)0 : kernelHistogram1D< output_t, input_t, int64_t, 1, 2, 1, CUDAHistogramMemoryType::MULTI_BLOCK> (aInfo, pInfo, bInfo, binsize, totalElements, getWeightsOp); if (!((cudaGetLastError()) == (cudaSuccess))) { throw Error({func, \"/Users/josepen/Development/pytorch/aten/src/ATen/native/cuda/SummaryOps.cu\", 222}, at::str(at::str(\"cudaGetLastError() == cudaSuccess\", \" ASSERT FAILED at \", \"/Users/josepen/Development/pytorch/aten/src/ATen/native/cuda/SummaryOps.cu\", \":\", 222, \", please report a bug to PyTorch. \", \"kernelHistogram1D failed\"))); }  ; ; break; default:  (__cudaPushCallConfiguration(grid, block, (CUDAHistogramMemoryType::GLOBAL == CUDAHistogramMemoryType::SHARED) ? sharedMem : (0), at::globalContext().getCurrentCUDAStream())) ? (void)0 : kernelHistogram1D< output_t, input_t, int64_t, 1, 2, 1, CUDAHistogramMemoryType::GLOBAL> (aInfo, pInfo, bInfo, binsize, totalElements, getWeightsOp); if (!((cudaGetLastError()) == (cudaSuccess))) { throw Error({func, \"/Users/josepen/Development/pytorch/aten/src/ATen/native/cuda/SummaryOps.cu\", 222}, at::str(at::str(\"cudaGetLastError() == cudaSuccess\", \" ASSERT FAILED at \", \"/Users/josepen/Development/pytorch/aten/src/ATen/native/cuda/SummaryOps.cu\", \":\", 222, \", please report a bug to PyTorch. \", \"kernelHistogram1D failed\"))); }  ; ; }\nSystem Info\njosepens-mbp:pytorch josepen$ python torch/utils/collect_env.py\nCollecting environment information...\nPyTorch version: 0.5.0a0+290d20b\nIs debug build: No\nCUDA used to build PyTorch: 9.2\nOS: Mac OSX 10.13.5\nGCC version: Could not collect\nCMake version: version 3.11.1\nPython version: 3.6\nIs CUDA available: Yes\nCUDA runtime version: 9.2.64\nGPU models and configuration: Could not collect\nNvidia driver version: Could not collect\ncuDNN version: Probably one of the following:\n/usr/local/cuda/lib/libcudnn.7.dylib\n/usr/local/cuda/lib/libcudnn.dylib\n/usr/local/cuda/lib/libcudnn_static.a\nVersions of relevant libraries:\n[pip3] numpy (1.14.5)\n[pip3] torch (0.3.1)\n[pip3] torchtext (0.2.3)\n[pip3] torchvision (0.2.1)\n[conda] torch                     0.5.0a0+290d20b           \n[conda] torchtext                 0.2.3                     \n[conda] torchvision               0.2.1                     \njosepens-mbp:pytorch josepen$\n\nPyTorch or Caffe2: pytorch\nHow you installed PyTorch (conda, pip, source): I'm compiling from source\nBuild command you used (if compiling from source):  MACOSX_DEPLOYMENT_TARGET=10.13 CC=clang CXX=clang++ python setup.py install\nOS: MacOSX 10.13.5\nPyTorch version: I cloned the repo this is the hash version\njosepens-mbp:pytorch josepen$ git rev-parse HEAD\n290d20b\nPython version: 3.6\nCUDA/cuDNN version: 9.2.64\nGPU models and configuration: GeForceGT 750M\nGCC version (if compiling from source): gcc --version\nConfigured with: --prefix=/Library/Developer/CommandLineTools/usr --with-gxx-include-dir=/usr/include/c++/4.2.1\nApple LLVM version 9.1.0 (clang-902.0.39.2)\nTarget: x86_64-apple-darwin17.6.0\nThread model: posix\nInstalledDir: /Library/Developer/CommandLineTools/usr/bin\nCMake version: cmake --version\ncmake version 3.11.1\nCMake suite maintained and supported by Kitware (kitware.com/cmake)\nVersions of any other relevant libraries:", "body": "## Issue description\r\n\r\nCompiling pytorch on MacOSX 10.13.5 with support for CUDA GeForceGT 750M 2048MB\r\n\r\n## Code example\r\n\r\nError log\r\n/Users/josepen/Development/pytorch/aten/src/ATen/native/cuda/SummaryOps.cu:222:134: warning: self-comparison always evaluates to true [-Wtautological-compare]\r\nswitch (memType) { case CUDAHistogramMemoryType::SHARED:  (__cudaPushCallConfiguration(grid, block, (CUDAHistogramMemoryType::SHARED == CUDAHistogramMemoryType::SHARED) ? sharedMem : (0), at::globalContext().getCurrentCUDAStream())) ? (void)0 : kernelHistogram1D< output_t, input_t, int64_t, 1, 2, 1, CUDAHistogramMemoryType::SHARED> (aInfo, pInfo, bInfo, binsize, totalElements, getWeightsOp); if (!((cudaGetLastError()) == (cudaSuccess))) { throw Error({__func__, \"/Users/josepen/Development/pytorch/aten/src/ATen/native/cuda/SummaryOps.cu\", 222}, at::str(at::str(\"cudaGetLastError() == cudaSuccess\", \" ASSERT FAILED at \", \"/Users/josepen/Development/pytorch/aten/src/ATen/native/cuda/SummaryOps.cu\", \":\", 222, \", please report a bug to PyTorch. \", \"kernelHistogram1D failed\"))); }  ; ; break; case CUDAHistogramMemoryType::MULTI_BLOCK:  (__cudaPushCallConfiguration(grid, block, (CUDAHistogramMemoryType::MULTI_BLOCK == CUDAHistogramMemoryType::SHARED) ? sharedMem : (0), at::globalContext().getCurrentCUDAStream())) ? (void)0 : kernelHistogram1D< output_t, input_t, int64_t, 1, 2, 1, CUDAHistogramMemoryType::MULTI_BLOCK> (aInfo, pInfo, bInfo, binsize, totalElements, getWeightsOp); if (!((cudaGetLastError()) == (cudaSuccess))) { throw Error({__func__, \"/Users/josepen/Development/pytorch/aten/src/ATen/native/cuda/SummaryOps.cu\", 222}, at::str(at::str(\"cudaGetLastError() == cudaSuccess\", \" ASSERT FAILED at \", \"/Users/josepen/Development/pytorch/aten/src/ATen/native/cuda/SummaryOps.cu\", \":\", 222, \", please report a bug to PyTorch. \", \"kernelHistogram1D failed\"))); }  ; ; break; default:  (__cudaPushCallConfiguration(grid, block, (CUDAHistogramMemoryType::GLOBAL == CUDAHistogramMemoryType::SHARED) ? sharedMem : (0), at::globalContext().getCurrentCUDAStream())) ? (void)0 : kernelHistogram1D< output_t, input_t, int64_t, 1, 2, 1, CUDAHistogramMemoryType::GLOBAL> (aInfo, pInfo, bInfo, binsize, totalElements, getWeightsOp); if (!((cudaGetLastError()) == (cudaSuccess))) { throw Error({__func__, \"/Users/josepen/Development/pytorch/aten/src/ATen/native/cuda/SummaryOps.cu\", 222}, at::str(at::str(\"cudaGetLastError() == cudaSuccess\", \" ASSERT FAILED at \", \"/Users/josepen/Development/pytorch/aten/src/ATen/native/cuda/SummaryOps.cu\", \":\", 222, \", please report a bug to PyTorch. \", \"kernelHistogram1D failed\"))); }  ; ; }\r\n\r\n## System Info\r\njosepens-mbp:pytorch josepen$ python torch/utils/collect_env.py \r\nCollecting environment information...\r\nPyTorch version: 0.5.0a0+290d20b\r\nIs debug build: No\r\nCUDA used to build PyTorch: 9.2\r\n\r\nOS: Mac OSX 10.13.5\r\nGCC version: Could not collect\r\nCMake version: version 3.11.1\r\n\r\nPython version: 3.6\r\nIs CUDA available: Yes\r\nCUDA runtime version: 9.2.64\r\nGPU models and configuration: Could not collect\r\nNvidia driver version: Could not collect\r\ncuDNN version: Probably one of the following:\r\n/usr/local/cuda/lib/libcudnn.7.dylib\r\n/usr/local/cuda/lib/libcudnn.dylib\r\n/usr/local/cuda/lib/libcudnn_static.a\r\n\r\nVersions of relevant libraries:\r\n[pip3] numpy (1.14.5)\r\n[pip3] torch (0.3.1)\r\n[pip3] torchtext (0.2.3)\r\n[pip3] torchvision (0.2.1)\r\n[conda] torch                     0.5.0a0+290d20b           <pip>\r\n[conda] torchtext                 0.2.3                     <pip>\r\n[conda] torchvision               0.2.1                     <pip>\r\njosepens-mbp:pytorch josepen$ \r\n\r\n\r\n- PyTorch or Caffe2: pytorch\r\n- How you installed PyTorch (conda, pip, source): I'm compiling from source\r\n- Build command you used (if compiling from source):  MACOSX_DEPLOYMENT_TARGET=10.13 CC=clang CXX=clang++ python setup.py install\r\n- OS: MacOSX 10.13.5 \r\n- PyTorch version: I cloned the repo this is the hash version\r\njosepens-mbp:pytorch josepen$ git rev-parse HEAD\r\n290d20b094dff35da866deafa92c12a6264dc544\r\n- Python version: 3.6\r\n- CUDA/cuDNN version: 9.2.64\r\n- GPU models and configuration: GeForceGT 750M\r\n- GCC version (if compiling from source): gcc --version\r\nConfigured with: --prefix=/Library/Developer/CommandLineTools/usr --with-gxx-include-dir=/usr/include/c++/4.2.1\r\nApple LLVM version 9.1.0 (clang-902.0.39.2)\r\nTarget: x86_64-apple-darwin17.6.0\r\nThread model: posix\r\nInstalledDir: /Library/Developer/CommandLineTools/usr/bin\r\n- CMake version: cmake --version\r\ncmake version 3.11.1\r\nCMake suite maintained and supported by Kitware (kitware.com/cmake)\r\n- Versions of any other relevant libraries:\r\n"}