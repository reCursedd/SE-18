{"url": "https://api.github.com/repos/pytorch/pytorch/issues/278", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/278/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/278/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/278/events", "html_url": "https://github.com/pytorch/pytorch/issues/278", "id": 192834228, "node_id": "MDU6SXNzdWUxOTI4MzQyMjg=", "number": 278, "title": "torch.save on a repl-defined module gives error", "user": {"login": "soumith", "id": 1310570, "node_id": "MDQ6VXNlcjEzMTA1NzA=", "avatar_url": "https://avatars0.githubusercontent.com/u/1310570?v=4", "gravatar_id": "", "url": "https://api.github.com/users/soumith", "html_url": "https://github.com/soumith", "followers_url": "https://api.github.com/users/soumith/followers", "following_url": "https://api.github.com/users/soumith/following{/other_user}", "gists_url": "https://api.github.com/users/soumith/gists{/gist_id}", "starred_url": "https://api.github.com/users/soumith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/soumith/subscriptions", "organizations_url": "https://api.github.com/users/soumith/orgs", "repos_url": "https://api.github.com/users/soumith/repos", "events_url": "https://api.github.com/users/soumith/events{/privacy}", "received_events_url": "https://api.github.com/users/soumith/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 424131847, "node_id": "MDU6TGFiZWw0MjQxMzE4NDc=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/bug", "name": "bug", "color": "b60205", "default": true}, {"id": 443484135, "node_id": "MDU6TGFiZWw0NDM0ODQxMzU=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/high%20priority", "name": "high priority", "color": "F22613", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2016-12-01T12:31:46Z", "updated_at": "2016-12-01T22:32:11Z", "closed_at": "2016-12-01T22:32:11Z", "author_association": "MEMBER", "body_html": "<p>Bug defined by <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=10132730\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/aconneau\">@aconneau</a> . This is a common workflow, where one works in ipython notebooks.</p>\n<pre><code>In [4]: import torch.nn as nn\n\nIn [5]: class Net(nn.Container):\n   ...:     def forward(input):\n   ...:         return input.clone()\n   ...:\n\nIn [6]: m = Net()\n\nIn [7]: torch.save(m, 'm.t7')\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n&lt;ipython-input-7-bc6e5c76d316&gt; in &lt;module&gt;()\n----&gt; 1 torch.save(m, 'm.t7')\n\n/home/soumith/local/miniconda2/lib/python2.7/site-packages/torch/serialization.pyc in save(obj, f, pickle_module, pickle_protocol)\n    121         f = open(f, \"wb\")\n    122     try:\n--&gt; 123         return _save(obj, f, pickle_module, pickle_protocol)\n    124     finally:\n    125         if new_fd:\n\n/home/soumith/local/miniconda2/lib/python2.7/site-packages/torch/serialization.pyc in _save(obj, f, pickle_module, pickle_protocol)\n    208     with closing(tarfile.open(fileobj=f, mode='w:', format=tarfile.PAX_FORMAT)) as tar:\n    209         _add_to_tar(save_sys_info, tar, 'sys_info')\n--&gt; 210         _add_to_tar(pickle_objects, tar, 'pickle')\n    211         _add_to_tar(save_tensors, tar, 'tensors')\n    212         _add_to_tar(save_storages, tar, 'storages')\n\n/home/soumith/local/miniconda2/lib/python2.7/site-packages/torch/serialization.pyc in _add_to_tar(fn, tar_file, name)\n     29 def _add_to_tar(fn, tar_file, name):\n     30     tmp_file = tempfile.NamedTemporaryFile(delete=False)\n---&gt; 31     fn(tmp_file)\n     32     tmp_file.close()\n     33\n\n/home/soumith/local/miniconda2/lib/python2.7/site-packages/torch/serialization.pyc in pickle_objects(f)\n    192         pickler = pickle_module.Pickler(f, protocol=pickle_protocol)\n    193         pickler.persistent_id = persistent_id\n--&gt; 194         pickler.dump(obj)\n    195\n    196     def save_sys_info(f):\n\n/home/soumith/local/miniconda2/lib/python2.7/site-packages/torch/serialization.pyc in persistent_id(obj)\n    138                 return None\n    139             serialized_container_types[obj] = True\n--&gt; 140             source_file = inspect.getsourcefile(obj)\n    141             source = inspect.getsource(obj)\n    142             return (obj, source_file, source)\n\n/home/soumith/local/miniconda2/lib/python2.7/inspect.pyc in getsourcefile(object)\n    442     Return None if no way can be identified to get the source.\n    443     \"\"\"\n--&gt; 444     filename = getfile(object)\n    445     if string.lower(filename[-4:]) in ('.pyc', '.pyo'):\n    446         filename = filename[:-4] + '.py'\n\n/home/soumith/local/miniconda2/lib/python2.7/inspect.pyc in getfile(object)\n    406         if hasattr(object, '__file__'):\n    407             return object.__file__\n--&gt; 408         raise TypeError('{!r} is a built-in class'.format(object))\n    409     if ismethod(object):\n    410         object = object.im_func\n\nTypeError: &lt;module '__main__' (built-in)&gt; is a built-in class\n</code></pre>", "body_text": "Bug defined by @aconneau . This is a common workflow, where one works in ipython notebooks.\nIn [4]: import torch.nn as nn\n\nIn [5]: class Net(nn.Container):\n   ...:     def forward(input):\n   ...:         return input.clone()\n   ...:\n\nIn [6]: m = Net()\n\nIn [7]: torch.save(m, 'm.t7')\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n<ipython-input-7-bc6e5c76d316> in <module>()\n----> 1 torch.save(m, 'm.t7')\n\n/home/soumith/local/miniconda2/lib/python2.7/site-packages/torch/serialization.pyc in save(obj, f, pickle_module, pickle_protocol)\n    121         f = open(f, \"wb\")\n    122     try:\n--> 123         return _save(obj, f, pickle_module, pickle_protocol)\n    124     finally:\n    125         if new_fd:\n\n/home/soumith/local/miniconda2/lib/python2.7/site-packages/torch/serialization.pyc in _save(obj, f, pickle_module, pickle_protocol)\n    208     with closing(tarfile.open(fileobj=f, mode='w:', format=tarfile.PAX_FORMAT)) as tar:\n    209         _add_to_tar(save_sys_info, tar, 'sys_info')\n--> 210         _add_to_tar(pickle_objects, tar, 'pickle')\n    211         _add_to_tar(save_tensors, tar, 'tensors')\n    212         _add_to_tar(save_storages, tar, 'storages')\n\n/home/soumith/local/miniconda2/lib/python2.7/site-packages/torch/serialization.pyc in _add_to_tar(fn, tar_file, name)\n     29 def _add_to_tar(fn, tar_file, name):\n     30     tmp_file = tempfile.NamedTemporaryFile(delete=False)\n---> 31     fn(tmp_file)\n     32     tmp_file.close()\n     33\n\n/home/soumith/local/miniconda2/lib/python2.7/site-packages/torch/serialization.pyc in pickle_objects(f)\n    192         pickler = pickle_module.Pickler(f, protocol=pickle_protocol)\n    193         pickler.persistent_id = persistent_id\n--> 194         pickler.dump(obj)\n    195\n    196     def save_sys_info(f):\n\n/home/soumith/local/miniconda2/lib/python2.7/site-packages/torch/serialization.pyc in persistent_id(obj)\n    138                 return None\n    139             serialized_container_types[obj] = True\n--> 140             source_file = inspect.getsourcefile(obj)\n    141             source = inspect.getsource(obj)\n    142             return (obj, source_file, source)\n\n/home/soumith/local/miniconda2/lib/python2.7/inspect.pyc in getsourcefile(object)\n    442     Return None if no way can be identified to get the source.\n    443     \"\"\"\n--> 444     filename = getfile(object)\n    445     if string.lower(filename[-4:]) in ('.pyc', '.pyo'):\n    446         filename = filename[:-4] + '.py'\n\n/home/soumith/local/miniconda2/lib/python2.7/inspect.pyc in getfile(object)\n    406         if hasattr(object, '__file__'):\n    407             return object.__file__\n--> 408         raise TypeError('{!r} is a built-in class'.format(object))\n    409     if ismethod(object):\n    410         object = object.im_func\n\nTypeError: <module '__main__' (built-in)> is a built-in class", "body": "Bug defined by @aconneau . This is a common workflow, where one works in ipython notebooks.\r\n\r\n```\r\nIn [4]: import torch.nn as nn\r\n\r\nIn [5]: class Net(nn.Container):\r\n   ...:     def forward(input):\r\n   ...:         return input.clone()\r\n   ...:\r\n\r\nIn [6]: m = Net()\r\n\r\nIn [7]: torch.save(m, 'm.t7')\r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\n<ipython-input-7-bc6e5c76d316> in <module>()\r\n----> 1 torch.save(m, 'm.t7')\r\n\r\n/home/soumith/local/miniconda2/lib/python2.7/site-packages/torch/serialization.pyc in save(obj, f, pickle_module, pickle_protocol)\r\n    121         f = open(f, \"wb\")\r\n    122     try:\r\n--> 123         return _save(obj, f, pickle_module, pickle_protocol)\r\n    124     finally:\r\n    125         if new_fd:\r\n\r\n/home/soumith/local/miniconda2/lib/python2.7/site-packages/torch/serialization.pyc in _save(obj, f, pickle_module, pickle_protocol)\r\n    208     with closing(tarfile.open(fileobj=f, mode='w:', format=tarfile.PAX_FORMAT)) as tar:\r\n    209         _add_to_tar(save_sys_info, tar, 'sys_info')\r\n--> 210         _add_to_tar(pickle_objects, tar, 'pickle')\r\n    211         _add_to_tar(save_tensors, tar, 'tensors')\r\n    212         _add_to_tar(save_storages, tar, 'storages')\r\n\r\n/home/soumith/local/miniconda2/lib/python2.7/site-packages/torch/serialization.pyc in _add_to_tar(fn, tar_file, name)\r\n     29 def _add_to_tar(fn, tar_file, name):\r\n     30     tmp_file = tempfile.NamedTemporaryFile(delete=False)\r\n---> 31     fn(tmp_file)\r\n     32     tmp_file.close()\r\n     33\r\n\r\n/home/soumith/local/miniconda2/lib/python2.7/site-packages/torch/serialization.pyc in pickle_objects(f)\r\n    192         pickler = pickle_module.Pickler(f, protocol=pickle_protocol)\r\n    193         pickler.persistent_id = persistent_id\r\n--> 194         pickler.dump(obj)\r\n    195\r\n    196     def save_sys_info(f):\r\n\r\n/home/soumith/local/miniconda2/lib/python2.7/site-packages/torch/serialization.pyc in persistent_id(obj)\r\n    138                 return None\r\n    139             serialized_container_types[obj] = True\r\n--> 140             source_file = inspect.getsourcefile(obj)\r\n    141             source = inspect.getsource(obj)\r\n    142             return (obj, source_file, source)\r\n\r\n/home/soumith/local/miniconda2/lib/python2.7/inspect.pyc in getsourcefile(object)\r\n    442     Return None if no way can be identified to get the source.\r\n    443     \"\"\"\r\n--> 444     filename = getfile(object)\r\n    445     if string.lower(filename[-4:]) in ('.pyc', '.pyo'):\r\n    446         filename = filename[:-4] + '.py'\r\n\r\n/home/soumith/local/miniconda2/lib/python2.7/inspect.pyc in getfile(object)\r\n    406         if hasattr(object, '__file__'):\r\n    407             return object.__file__\r\n--> 408         raise TypeError('{!r} is a built-in class'.format(object))\r\n    409     if ismethod(object):\r\n    410         object = object.im_func\r\n\r\nTypeError: <module '__main__' (built-in)> is a built-in class\r\n```"}