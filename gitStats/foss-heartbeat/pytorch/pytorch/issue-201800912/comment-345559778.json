{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/345559778", "html_url": "https://github.com/pytorch/pytorch/issues/494#issuecomment-345559778", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/494", "id": 345559778, "node_id": "MDEyOklzc3VlQ29tbWVudDM0NTU1OTc3OA==", "user": {"login": "trias702", "id": 25867060, "node_id": "MDQ6VXNlcjI1ODY3MDYw", "avatar_url": "https://avatars3.githubusercontent.com/u/25867060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/trias702", "html_url": "https://github.com/trias702", "followers_url": "https://api.github.com/users/trias702/followers", "following_url": "https://api.github.com/users/trias702/following{/other_user}", "gists_url": "https://api.github.com/users/trias702/gists{/gist_id}", "starred_url": "https://api.github.com/users/trias702/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/trias702/subscriptions", "organizations_url": "https://api.github.com/users/trias702/orgs", "repos_url": "https://api.github.com/users/trias702/repos", "events_url": "https://api.github.com/users/trias702/events{/privacy}", "received_events_url": "https://api.github.com/users/trias702/received_events", "type": "User", "site_admin": false}, "created_at": "2017-11-19T23:34:18Z", "updated_at": "2017-11-19T23:36:24Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=9998726\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/peterjc123\">@peterjc123</a> I have found the problem and it is the new hash functions added 3 days ago to pytorch/torch/csrc/utils/hash.h. This file was only added 3 days ago and was not in my stale github clone. If this file is present, then compilation fails when using MSVC 2015 + CUDA 8 (have not tried MSVC 17 + CUDA 9 yet).</p>\n<p>The MSVC 2015 compiler complains about the following when trying to compile hash.h:</p>\n<p><code>C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Professional\\VC\\Tools\\MSVC\\14.10.25017\\include\\xstddef(372): error C2338: The C++ Standard doesn't provide a hash for this type.</code></p>\n<p>which comes from the following lines in xstddef:</p>\n<pre><code>\t// TEMPLATE STRUCT hash\ntemplate&lt;class _Kty&gt;\n\tstruct hash\n\t\t: public _Bitwise_hash&lt;_Kty&gt;\n\t{\t// hash functor for enums\n\tstatic constexpr bool _Value = __is_enum(_Kty);\n\tstatic_assert(_Value,\n\t\t\"The C++ Standard doesn't provide a hash for this type.\");\n\t};\n\n</code></pre>\n<p>and</p>\n<p><code>c:\\Unix\\compile\\pytorch\\pytorch\\torch/csrc/utils/hash.h(75): error C2668: 'torch::_hash_detail::dispatch_hash': ambiguous call to overloaded function</code></p>\n<p>Looking into hash.h, there is this section:</p>\n<pre><code>#ifndef _MSC_VER\n// MSVC has this one defined already\ntemplate&lt;typename T&gt;\ntypename std::enable_if&lt;std::is_enum&lt;T&gt;::value, std::size_t&gt;::type dispatch_hash(const T&amp; o) {\n  return std::hash&lt;int&gt;()(static_cast&lt;int&gt;(o));\n}\n#endif\n</code></pre>\n<p>I tried adding this flag to the compile step (-D_MSC_VER) and it still fails.</p>", "body_text": "@peterjc123 I have found the problem and it is the new hash functions added 3 days ago to pytorch/torch/csrc/utils/hash.h. This file was only added 3 days ago and was not in my stale github clone. If this file is present, then compilation fails when using MSVC 2015 + CUDA 8 (have not tried MSVC 17 + CUDA 9 yet).\nThe MSVC 2015 compiler complains about the following when trying to compile hash.h:\nC:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Professional\\VC\\Tools\\MSVC\\14.10.25017\\include\\xstddef(372): error C2338: The C++ Standard doesn't provide a hash for this type.\nwhich comes from the following lines in xstddef:\n\t// TEMPLATE STRUCT hash\ntemplate<class _Kty>\n\tstruct hash\n\t\t: public _Bitwise_hash<_Kty>\n\t{\t// hash functor for enums\n\tstatic constexpr bool _Value = __is_enum(_Kty);\n\tstatic_assert(_Value,\n\t\t\"The C++ Standard doesn't provide a hash for this type.\");\n\t};\n\n\nand\nc:\\Unix\\compile\\pytorch\\pytorch\\torch/csrc/utils/hash.h(75): error C2668: 'torch::_hash_detail::dispatch_hash': ambiguous call to overloaded function\nLooking into hash.h, there is this section:\n#ifndef _MSC_VER\n// MSVC has this one defined already\ntemplate<typename T>\ntypename std::enable_if<std::is_enum<T>::value, std::size_t>::type dispatch_hash(const T& o) {\n  return std::hash<int>()(static_cast<int>(o));\n}\n#endif\n\nI tried adding this flag to the compile step (-D_MSC_VER) and it still fails.", "body": "@peterjc123 I have found the problem and it is the new hash functions added 3 days ago to pytorch/torch/csrc/utils/hash.h. This file was only added 3 days ago and was not in my stale github clone. If this file is present, then compilation fails when using MSVC 2015 + CUDA 8 (have not tried MSVC 17 + CUDA 9 yet).\r\n\r\nThe MSVC 2015 compiler complains about the following when trying to compile hash.h:\r\n\r\n`C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Professional\\VC\\Tools\\MSVC\\14.10.25017\\include\\xstddef(372): error C2338: The C++ Standard doesn't provide a hash for this type.`\r\n\r\nwhich comes from the following lines in xstddef:\r\n\r\n```\r\n\t// TEMPLATE STRUCT hash\r\ntemplate<class _Kty>\r\n\tstruct hash\r\n\t\t: public _Bitwise_hash<_Kty>\r\n\t{\t// hash functor for enums\r\n\tstatic constexpr bool _Value = __is_enum(_Kty);\r\n\tstatic_assert(_Value,\r\n\t\t\"The C++ Standard doesn't provide a hash for this type.\");\r\n\t};\r\n\r\n```\r\nand\r\n\r\n`c:\\Unix\\compile\\pytorch\\pytorch\\torch/csrc/utils/hash.h(75): error C2668: 'torch::_hash_detail::dispatch_hash': ambiguous call to overloaded function`\r\n\r\nLooking into hash.h, there is this section:\r\n\r\n```\r\n#ifndef _MSC_VER\r\n// MSVC has this one defined already\r\ntemplate<typename T>\r\ntypename std::enable_if<std::is_enum<T>::value, std::size_t>::type dispatch_hash(const T& o) {\r\n  return std::hash<int>()(static_cast<int>(o));\r\n}\r\n#endif\r\n```\r\n\r\nI tried adding this flag to the compile step (-D_MSC_VER) and it still fails."}