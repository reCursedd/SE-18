{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/345481293", "html_url": "https://github.com/pytorch/pytorch/issues/494#issuecomment-345481293", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/494", "id": 345481293, "node_id": "MDEyOklzc3VlQ29tbWVudDM0NTQ4MTI5Mw==", "user": {"login": "ankur6ue", "id": 6232547, "node_id": "MDQ6VXNlcjYyMzI1NDc=", "avatar_url": "https://avatars0.githubusercontent.com/u/6232547?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ankur6ue", "html_url": "https://github.com/ankur6ue", "followers_url": "https://api.github.com/users/ankur6ue/followers", "following_url": "https://api.github.com/users/ankur6ue/following{/other_user}", "gists_url": "https://api.github.com/users/ankur6ue/gists{/gist_id}", "starred_url": "https://api.github.com/users/ankur6ue/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ankur6ue/subscriptions", "organizations_url": "https://api.github.com/users/ankur6ue/orgs", "repos_url": "https://api.github.com/users/ankur6ue/repos", "events_url": "https://api.github.com/users/ankur6ue/events{/privacy}", "received_events_url": "https://api.github.com/users/ankur6ue/received_events", "type": "User", "site_admin": false}, "created_at": "2017-11-19T00:11:03Z", "updated_at": "2017-11-19T00:11:03Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=9998726\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/peterjc123\">@peterjc123</a></p>\n<p>I'm trying to build a ffi extension for Windows (non-maxima suppresion from here: <a href=\"https://github.com/ruotianluo/pytorch-faster-rcnn\">https://github.com/ruotianluo/pytorch-faster-rcnn</a>)</p>\n<p>The c file that needs to be compiled has code that references TH data structures such as:<br>\nlong boxes_num = THFloatTensor_size(boxes, 0);<br>\nlong boxes_dim = THFloatTensor_size(boxes, 1);</p>\n<pre><code>long * keep_out_flat = THLongTensor_data(keep_out);\nfloat * boxes_flat = THFloatTensor_data(boxes);\nlong * order_flat = THLongTensor_data(order);\nfloat * areas_flat = THFloatTensor_data(areas);\n</code></pre>\n<p>I build the code using the following script:</p>\n<p>import os<br>\nimport torch<br>\nfrom torch.utils.ffi import create_extension<br>\nimport glob</p>\n<p>sources = ['src/nms.c']<br>\nheaders = ['src/nms.h']<br>\ndefines = []<br>\nwith_cuda = False</p>\n<p>if torch.cuda.is_available():<br>\nprint('Including CUDA code.')<br>\nsources += ['src/nms_cuda.c']<br>\nheaders += ['src/nms_cuda.h']<br>\ndefines += [('WITH_CUDA', None)]<br>\ncuda_lib_path='C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\lib\\x64'<br>\nwith_cuda = True</p>\n<p>this_file = os.path.dirname(os.path.realpath(<strong>file</strong>))<br>\nprint(this_file)<br>\nextra_objects = ['src/cuda/nms_kernel.cu.o']<br>\nextra_objects = [os.path.join(this_file, fname) for fname in extra_objects]<br>\ninclude_dirs = [<br>\n'C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include'<br>\n]<br>\nlibrary_dirs = []<br>\nthnvrtc_link_flags = []<br>\nlibrary_dirs.append(cuda_lib_path)<br>\nthnvrtc_link_flags += ['cuda.lib', 'cudart.lib', 'nvrtc.lib']<br>\nffi = create_extension(<br>\n'_ext.nms',<br>\nheaders=headers,<br>\nsources=sources,<br>\ndefine_macros=defines,<br>\nrelative_to=<strong>file</strong>,<br>\nwith_cuda=with_cuda,<br>\ninclude_dirs = include_dirs,<br>\nextra_objects=extra_objects,<br>\nlibrary_dirs=library_dirs,<br>\nextra_link_args=thnvrtc_link_flags<br>\n)</p>\n<p>if <strong>name</strong> == '<strong>main</strong>':<br>\nffi.build()</p>\n<p>However I get a bunch of linker errors as follows:</p>\n<p>Creating library .\\Release_nms.lib and object .\\Release_nms.exp<br>\nLINK : warning LNK4098: defaultlib 'LIBCMT' conflicts with use of other libs; use /NODEFAULTLIB:library<br>\nnms.obj : error LNK2001: unresolved external symbol __imp_THFloatTensor_data<br>\nnms.obj : error LNK2001: unresolved external symbol __imp_THByteTensor_fill<br>\nnms.obj : error LNK2001: unresolved external symbol __imp_THByteTensor_data<br>\nnms.obj : error LNK2001: unresolved external symbol __imp_THByteTensor_free<br>\nnms.obj : error LNK2001: unresolved external symbol __imp__THArgCheck<br>\nnms.obj : error LNK2001: unresolved external symbol __imp_THByteTensor_newWithSize1d<br>\nnms.obj : error LNK2001: unresolved external symbol __imp_THLongTensor_isContiguous<br>\nnms.obj : error LNK2001: unresolved external symbol __imp_THLongTensor_data<br>\nnms.obj : error LNK2001: unresolved external symbol __imp_THFloatTensor_size<br>\nnms_cuda.obj : error LNK2001: unresolved external symbol __imp_THLongTensor_free<br>\nnms_cuda.obj : error LNK2001: unresolved external symbol __imp_THLongTensor_newWithSize2d<br>\nnms_cuda.obj : error LNK2001: unresolved external symbol __imp_THCudaLongTensor_newWithSize2d<br>\nnms_cuda.obj : error LNK2001: unresolved external symbol __imp_THLongTensor_copyCuda<br>\nnms_cuda.obj : error LNK2001: unresolved external symbol __imp_THLongTensor_newWithSize1d<br>\nnms_cuda.obj : error LNK2001: unresolved external symbol __imp_THLongTensor_fill<br>\nnms_cuda.obj : error LNK2001: unresolved external symbol __imp_THCudaTensor_data<br>\nnms_cuda.obj : error LNK2001: unresolved external symbol state<br>\nnms_cuda.obj : error LNK2001: unresolved external symbol __imp_THCudaTensor_isContiguous<br>\nnms_cuda.obj : error LNK2001: unresolved external symbol __imp_THCudaLongTensor_data<br>\nnms_cuda.obj : error LNK2001: unresolved external symbol __imp_THCudaTensor_size<br>\nnms_cuda.obj : error LNK2001: unresolved external symbol __imp_THCudaLongTensor_free</p>\n<p>Any idea what to do? I tried adding the c files in pytorch\\aten\\src\\TH to the list of files to be compiled, but get compiler errors..</p>", "body_text": "@peterjc123\nI'm trying to build a ffi extension for Windows (non-maxima suppresion from here: https://github.com/ruotianluo/pytorch-faster-rcnn)\nThe c file that needs to be compiled has code that references TH data structures such as:\nlong boxes_num = THFloatTensor_size(boxes, 0);\nlong boxes_dim = THFloatTensor_size(boxes, 1);\nlong * keep_out_flat = THLongTensor_data(keep_out);\nfloat * boxes_flat = THFloatTensor_data(boxes);\nlong * order_flat = THLongTensor_data(order);\nfloat * areas_flat = THFloatTensor_data(areas);\n\nI build the code using the following script:\nimport os\nimport torch\nfrom torch.utils.ffi import create_extension\nimport glob\nsources = ['src/nms.c']\nheaders = ['src/nms.h']\ndefines = []\nwith_cuda = False\nif torch.cuda.is_available():\nprint('Including CUDA code.')\nsources += ['src/nms_cuda.c']\nheaders += ['src/nms_cuda.h']\ndefines += [('WITH_CUDA', None)]\ncuda_lib_path='C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\lib\\x64'\nwith_cuda = True\nthis_file = os.path.dirname(os.path.realpath(file))\nprint(this_file)\nextra_objects = ['src/cuda/nms_kernel.cu.o']\nextra_objects = [os.path.join(this_file, fname) for fname in extra_objects]\ninclude_dirs = [\n'C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include'\n]\nlibrary_dirs = []\nthnvrtc_link_flags = []\nlibrary_dirs.append(cuda_lib_path)\nthnvrtc_link_flags += ['cuda.lib', 'cudart.lib', 'nvrtc.lib']\nffi = create_extension(\n'_ext.nms',\nheaders=headers,\nsources=sources,\ndefine_macros=defines,\nrelative_to=file,\nwith_cuda=with_cuda,\ninclude_dirs = include_dirs,\nextra_objects=extra_objects,\nlibrary_dirs=library_dirs,\nextra_link_args=thnvrtc_link_flags\n)\nif name == 'main':\nffi.build()\nHowever I get a bunch of linker errors as follows:\nCreating library .\\Release_nms.lib and object .\\Release_nms.exp\nLINK : warning LNK4098: defaultlib 'LIBCMT' conflicts with use of other libs; use /NODEFAULTLIB:library\nnms.obj : error LNK2001: unresolved external symbol __imp_THFloatTensor_data\nnms.obj : error LNK2001: unresolved external symbol __imp_THByteTensor_fill\nnms.obj : error LNK2001: unresolved external symbol __imp_THByteTensor_data\nnms.obj : error LNK2001: unresolved external symbol __imp_THByteTensor_free\nnms.obj : error LNK2001: unresolved external symbol __imp__THArgCheck\nnms.obj : error LNK2001: unresolved external symbol __imp_THByteTensor_newWithSize1d\nnms.obj : error LNK2001: unresolved external symbol __imp_THLongTensor_isContiguous\nnms.obj : error LNK2001: unresolved external symbol __imp_THLongTensor_data\nnms.obj : error LNK2001: unresolved external symbol __imp_THFloatTensor_size\nnms_cuda.obj : error LNK2001: unresolved external symbol __imp_THLongTensor_free\nnms_cuda.obj : error LNK2001: unresolved external symbol __imp_THLongTensor_newWithSize2d\nnms_cuda.obj : error LNK2001: unresolved external symbol __imp_THCudaLongTensor_newWithSize2d\nnms_cuda.obj : error LNK2001: unresolved external symbol __imp_THLongTensor_copyCuda\nnms_cuda.obj : error LNK2001: unresolved external symbol __imp_THLongTensor_newWithSize1d\nnms_cuda.obj : error LNK2001: unresolved external symbol __imp_THLongTensor_fill\nnms_cuda.obj : error LNK2001: unresolved external symbol __imp_THCudaTensor_data\nnms_cuda.obj : error LNK2001: unresolved external symbol state\nnms_cuda.obj : error LNK2001: unresolved external symbol __imp_THCudaTensor_isContiguous\nnms_cuda.obj : error LNK2001: unresolved external symbol __imp_THCudaLongTensor_data\nnms_cuda.obj : error LNK2001: unresolved external symbol __imp_THCudaTensor_size\nnms_cuda.obj : error LNK2001: unresolved external symbol __imp_THCudaLongTensor_free\nAny idea what to do? I tried adding the c files in pytorch\\aten\\src\\TH to the list of files to be compiled, but get compiler errors..", "body": "@peterjc123 \r\n\r\nI'm trying to build a ffi extension for Windows (non-maxima suppresion from here: https://github.com/ruotianluo/pytorch-faster-rcnn)\r\n\r\nThe c file that needs to be compiled has code that references TH data structures such as: \r\n  long boxes_num = THFloatTensor_size(boxes, 0);\r\n    long boxes_dim = THFloatTensor_size(boxes, 1);\r\n\r\n    long * keep_out_flat = THLongTensor_data(keep_out);\r\n    float * boxes_flat = THFloatTensor_data(boxes);\r\n    long * order_flat = THLongTensor_data(order);\r\n    float * areas_flat = THFloatTensor_data(areas);\r\n\r\nI build the code using the following script: \r\n\r\nimport os\r\nimport torch\r\nfrom torch.utils.ffi import create_extension\r\nimport glob\r\n\r\nsources = ['src/nms.c']\r\nheaders = ['src/nms.h']\r\ndefines = []\r\nwith_cuda = False\r\n\r\nif torch.cuda.is_available():\r\n    print('Including CUDA code.')\r\n    sources += ['src/nms_cuda.c']\r\n    headers += ['src/nms_cuda.h']\r\n    defines += [('WITH_CUDA', None)]\r\n    cuda_lib_path='C:\\\\Program Files\\\\NVIDIA GPU Computing Toolkit\\\\CUDA\\\\v8.0\\\\lib\\\\x64'\r\n    with_cuda = True\r\n\r\nthis_file = os.path.dirname(os.path.realpath(__file__))\r\nprint(this_file)\r\nextra_objects = ['src/cuda/nms_kernel.cu.o']\r\nextra_objects = [os.path.join(this_file, fname) for fname in extra_objects]\r\ninclude_dirs = [\r\n    'C:\\\\Program Files\\\\NVIDIA GPU Computing Toolkit\\\\CUDA\\\\v8.0\\\\include'\r\n]\r\nlibrary_dirs = []\r\nthnvrtc_link_flags = []\r\nlibrary_dirs.append(cuda_lib_path)\r\nthnvrtc_link_flags += ['cuda.lib', 'cudart.lib', 'nvrtc.lib']\r\nffi = create_extension(\r\n    '_ext.nms',\r\n    headers=headers,\r\n    sources=sources,\r\n    define_macros=defines,\r\n    relative_to=__file__,\r\n    with_cuda=with_cuda,\r\n    include_dirs = include_dirs,\r\n    extra_objects=extra_objects,\r\n    library_dirs=library_dirs,\r\n    extra_link_args=thnvrtc_link_flags\r\n)\r\n\r\nif __name__ == '__main__':\r\n    ffi.build()\r\n\r\nHowever I get a bunch of linker errors as follows:\r\n\r\n  Creating library .\\Release\\_nms.lib and object .\\Release\\_nms.exp\r\nLINK : warning LNK4098: defaultlib 'LIBCMT' conflicts with use of other libs; use /NODEFAULTLIB:library\r\nnms.obj : error LNK2001: unresolved external symbol __imp_THFloatTensor_data\r\nnms.obj : error LNK2001: unresolved external symbol __imp_THByteTensor_fill\r\nnms.obj : error LNK2001: unresolved external symbol __imp_THByteTensor_data\r\nnms.obj : error LNK2001: unresolved external symbol __imp_THByteTensor_free\r\nnms.obj : error LNK2001: unresolved external symbol __imp__THArgCheck\r\nnms.obj : error LNK2001: unresolved external symbol __imp_THByteTensor_newWithSize1d\r\nnms.obj : error LNK2001: unresolved external symbol __imp_THLongTensor_isContiguous\r\nnms.obj : error LNK2001: unresolved external symbol __imp_THLongTensor_data\r\nnms.obj : error LNK2001: unresolved external symbol __imp_THFloatTensor_size\r\nnms_cuda.obj : error LNK2001: unresolved external symbol __imp_THLongTensor_free\r\nnms_cuda.obj : error LNK2001: unresolved external symbol __imp_THLongTensor_newWithSize2d\r\nnms_cuda.obj : error LNK2001: unresolved external symbol __imp_THCudaLongTensor_newWithSize2d\r\nnms_cuda.obj : error LNK2001: unresolved external symbol __imp_THLongTensor_copyCuda\r\nnms_cuda.obj : error LNK2001: unresolved external symbol __imp_THLongTensor_newWithSize1d\r\nnms_cuda.obj : error LNK2001: unresolved external symbol __imp_THLongTensor_fill\r\nnms_cuda.obj : error LNK2001: unresolved external symbol __imp_THCudaTensor_data\r\nnms_cuda.obj : error LNK2001: unresolved external symbol state\r\nnms_cuda.obj : error LNK2001: unresolved external symbol __imp_THCudaTensor_isContiguous\r\nnms_cuda.obj : error LNK2001: unresolved external symbol __imp_THCudaLongTensor_data\r\nnms_cuda.obj : error LNK2001: unresolved external symbol __imp_THCudaTensor_size\r\nnms_cuda.obj : error LNK2001: unresolved external symbol __imp_THCudaLongTensor_free\r\n\r\nAny idea what to do? I tried adding the c files in pytorch\\aten\\src\\TH to the list of files to be compiled, but get compiler errors.. "}