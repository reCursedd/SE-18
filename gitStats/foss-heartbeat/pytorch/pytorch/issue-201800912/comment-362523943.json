{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/362523943", "html_url": "https://github.com/pytorch/pytorch/issues/494#issuecomment-362523943", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/494", "id": 362523943, "node_id": "MDEyOklzc3VlQ29tbWVudDM2MjUyMzk0Mw==", "user": {"login": "max1000000", "id": 7074223, "node_id": "MDQ6VXNlcjcwNzQyMjM=", "avatar_url": "https://avatars1.githubusercontent.com/u/7074223?v=4", "gravatar_id": "", "url": "https://api.github.com/users/max1000000", "html_url": "https://github.com/max1000000", "followers_url": "https://api.github.com/users/max1000000/followers", "following_url": "https://api.github.com/users/max1000000/following{/other_user}", "gists_url": "https://api.github.com/users/max1000000/gists{/gist_id}", "starred_url": "https://api.github.com/users/max1000000/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/max1000000/subscriptions", "organizations_url": "https://api.github.com/users/max1000000/orgs", "repos_url": "https://api.github.com/users/max1000000/repos", "events_url": "https://api.github.com/users/max1000000/events{/privacy}", "received_events_url": "https://api.github.com/users/max1000000/received_events", "type": "User", "site_admin": false}, "created_at": "2018-02-02T08:50:35Z", "updated_at": "2018-02-02T08:50:35Z", "author_association": "NONE", "body_html": "<p>Thanks <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=9998726\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/peterjc123\">@peterjc123</a> . OK, I've uninstalled torch and reinstalled from CPU master: torch-0.4.0a0+fac711c-cp36-cp36m-win_amd64.whl</p>\n<p>The errors appear to be the same - not sure where you picked up that it was v0.3.0 and whether this has now changed below? I'll look into num_samples.</p>\n<h2>Jupyter</h2>\n<p>[INFO   ] [Logger      ] Record log in C:\\Users\\Max.kivy\\logs\\kivy_18-02-02_1.txt<br>\n[INFO   ] [Kivy        ] v1.10.1.dev0, git-484b2f7, 20170513<br>\n[INFO   ] [Python      ] v3.6.2 (v3.6.2:5fd33b5, Jul  8 2017, 04:57:36) [MSC v.1900 64 bit (AMD64)]<br>\n[INFO   ] [Factory     ] 194 symbols loaded<br>\n[INFO   ] [Image       ] Providers: img_tex, img_dds, img_sdl2, img_gif (img_pil, img_ffpyplayer ignored)<br>\n[INFO   ] [Text        ] Provider: sdl2<br>\n[INFO   ] [OSC         ] using  for socket<br>\n[INFO   ] [Window      ] Provider: sdl2<br>\n[INFO   ] [GL          ] Using the \"OpenGL\" graphics system<br>\n[INFO   ] [GL          ] GLEW initialization succeeded<br>\n[INFO   ] [GL          ] Backend used <br>\n[INFO   ] [GL          ] OpenGL version &lt;b'4.3.0 - Build 10.18.14.4432'&gt;<br>\n[INFO   ] [GL          ] OpenGL vendor &lt;b'Intel'&gt;<br>\n[INFO   ] [GL          ] OpenGL renderer &lt;b'Intel(R) HD Graphics 4400'&gt;<br>\n[INFO   ] [GL          ] OpenGL parsed version: 4, 3<br>\n[INFO   ] [GL          ] Shading version &lt;b'4.30 - Build 10.18.14.4432'&gt;<br>\n[INFO   ] [GL          ] Texture max size &lt;16384&gt;<br>\n[INFO   ] [GL          ] Texture max units &lt;32&gt;<br>\n[INFO   ] [Window      ] auto add sdl2 input provider<br>\n[INFO   ] [Window      ] virtual keyboard not allowed, single mode, not docked<br>\n[INFO   ] [Base        ] Start application main loop<br>\nb:\\Google Drive\\Python\\Udemy AI\\Self_Driving_Car\\ai.py:63: UserWarning: Implicit dimension choice for softmax has been deprecated. Change the call to include dim=X as an argument.<br>\nprobs = F.softmax(self.model(Variable(state, volatile = True))*100) # T=100<br>\n[INFO   ] [Base        ] Leaving application in progress...</p>\n<h2>Error</h2>\n<hr>\n<p>RuntimeError                              Traceback (most recent call last)<br>\n in ()<br>\n233 # Running the whole thing<br>\n234 if <strong>name</strong> == '<strong>main</strong>':<br>\n--&gt; 235     CarApp().run()</p>\n<p>c:\\users\\max\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\kivy\\app.py in run(self)<br>\n826<br>\n827         self.dispatch('on_start')<br>\n--&gt; 828         runTouchApp()<br>\n829         self.stop()<br>\n830</p>\n<p>c:\\users\\max\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\kivy\\base.py in runTouchApp(widget, slave)<br>\n502             _run_mainloop()<br>\n503         else:<br>\n--&gt; 504             EventLoop.window.mainloop()<br>\n505     finally:<br>\n506         stopTouchApp()</p>\n<p>c:\\users\\max\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\kivy\\core\\window\\window_sdl2.py in mainloop(self)<br>\n661         while not EventLoop.quit and EventLoop.status == 'started':<br>\n662             try:<br>\n--&gt; 663                 self._mainloop()<br>\n664             except BaseException as inst:<br>\n665                 # use exception manager first</p>\n<p>c:\\users\\max\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\kivy\\core\\window\\window_sdl2.py in _mainloop(self)<br>\n403<br>\n404     def _mainloop(self):<br>\n--&gt; 405         EventLoop.idle()<br>\n406<br>\n407         # for android/iOS, we don't want to have any event nor executing our</p>\n<p>c:\\users\\max\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\kivy\\base.py in idle(self)<br>\n337<br>\n338         # update dt<br>\n--&gt; 339         Clock.tick()<br>\n340<br>\n341         # read and dispatch input from providers</p>\n<p>c:\\users\\max\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\kivy\\clock.py in tick(self)<br>\n579<br>\n580         # process event<br>\n--&gt; 581         self._process_events()<br>\n582<br>\n583         return self._dt</p>\n<p>kivy_clock.pyx in kivy._clock.CyClockBase._process_events (kivy_clock.c:7700)()</p>\n<p>kivy_clock.pyx in kivy._clock.CyClockBase._process_events (kivy_clock.c:7577)()</p>\n<p>kivy_clock.pyx in kivy._clock.CyClockBase._process_events (kivy_clock.c:7498)()</p>\n<p>kivy_clock.pyx in kivy._clock.ClockEvent.tick (kivy_clock.c:3490)()</p>\n<p> in update(self, dt)<br>\n129         orientation = Vector(*self.car.velocity).angle((xx,yy))/180.<br>\n130         last_signal = [self.car.signal1, self.car.signal2, self.car.signal3, orientation, -orientation]<br>\n--&gt; 131         action = brain.update(last_reward, last_signal)<br>\n132         scores.append(brain.score())<br>\n133         rotation = action2rotation[action]</p>\n<p>b:\\Google Drive\\Python\\Udemy AI\\Self_Driving_Car\\ai.py in update(self, reward, new_signal)<br>\n77         new_state = torch.Tensor(new_signal).float().unsqueeze(0)<br>\n78         self.memory.push((self.last_state, new_state, torch.LongTensor([int(self.last_action)]), torch.Tensor([self.last_reward])))<br>\n---&gt; 79         action = self.select_action(new_state)<br>\n80         if len(self.memory.memory) &gt; 100:<br>\n81             batch_state, batch_next_state, batch_action, batch_reward = self.memory.sample(100)</p>\n<p>b:\\Google Drive\\Python\\Udemy AI\\Self_Driving_Car\\ai.py in select_action(self, state)<br>\n62     def select_action(self, state):<br>\n63         probs = F.softmax(self.model(Variable(state, volatile = True))*100) # T=100<br>\n---&gt; 64         action = probs.multinomial()<br>\n65         return action.data[0,0]<br>\n66</p>\n<p>RuntimeError: multinomial() missing 1 required positional arguments: \"num_samples\"</p>", "body_text": "Thanks @peterjc123 . OK, I've uninstalled torch and reinstalled from CPU master: torch-0.4.0a0+fac711c-cp36-cp36m-win_amd64.whl\nThe errors appear to be the same - not sure where you picked up that it was v0.3.0 and whether this has now changed below? I'll look into num_samples.\nJupyter\n[INFO   ] [Logger      ] Record log in C:\\Users\\Max.kivy\\logs\\kivy_18-02-02_1.txt\n[INFO   ] [Kivy        ] v1.10.1.dev0, git-484b2f7, 20170513\n[INFO   ] [Python      ] v3.6.2 (v3.6.2:5fd33b5, Jul  8 2017, 04:57:36) [MSC v.1900 64 bit (AMD64)]\n[INFO   ] [Factory     ] 194 symbols loaded\n[INFO   ] [Image       ] Providers: img_tex, img_dds, img_sdl2, img_gif (img_pil, img_ffpyplayer ignored)\n[INFO   ] [Text        ] Provider: sdl2\n[INFO   ] [OSC         ] using  for socket\n[INFO   ] [Window      ] Provider: sdl2\n[INFO   ] [GL          ] Using the \"OpenGL\" graphics system\n[INFO   ] [GL          ] GLEW initialization succeeded\n[INFO   ] [GL          ] Backend used \n[INFO   ] [GL          ] OpenGL version <b'4.3.0 - Build 10.18.14.4432'>\n[INFO   ] [GL          ] OpenGL vendor <b'Intel'>\n[INFO   ] [GL          ] OpenGL renderer <b'Intel(R) HD Graphics 4400'>\n[INFO   ] [GL          ] OpenGL parsed version: 4, 3\n[INFO   ] [GL          ] Shading version <b'4.30 - Build 10.18.14.4432'>\n[INFO   ] [GL          ] Texture max size <16384>\n[INFO   ] [GL          ] Texture max units <32>\n[INFO   ] [Window      ] auto add sdl2 input provider\n[INFO   ] [Window      ] virtual keyboard not allowed, single mode, not docked\n[INFO   ] [Base        ] Start application main loop\nb:\\Google Drive\\Python\\Udemy AI\\Self_Driving_Car\\ai.py:63: UserWarning: Implicit dimension choice for softmax has been deprecated. Change the call to include dim=X as an argument.\nprobs = F.softmax(self.model(Variable(state, volatile = True))*100) # T=100\n[INFO   ] [Base        ] Leaving application in progress...\nError\n\nRuntimeError                              Traceback (most recent call last)\n in ()\n233 # Running the whole thing\n234 if name == 'main':\n--> 235     CarApp().run()\nc:\\users\\max\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\kivy\\app.py in run(self)\n826\n827         self.dispatch('on_start')\n--> 828         runTouchApp()\n829         self.stop()\n830\nc:\\users\\max\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\kivy\\base.py in runTouchApp(widget, slave)\n502             _run_mainloop()\n503         else:\n--> 504             EventLoop.window.mainloop()\n505     finally:\n506         stopTouchApp()\nc:\\users\\max\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\kivy\\core\\window\\window_sdl2.py in mainloop(self)\n661         while not EventLoop.quit and EventLoop.status == 'started':\n662             try:\n--> 663                 self._mainloop()\n664             except BaseException as inst:\n665                 # use exception manager first\nc:\\users\\max\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\kivy\\core\\window\\window_sdl2.py in _mainloop(self)\n403\n404     def _mainloop(self):\n--> 405         EventLoop.idle()\n406\n407         # for android/iOS, we don't want to have any event nor executing our\nc:\\users\\max\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\kivy\\base.py in idle(self)\n337\n338         # update dt\n--> 339         Clock.tick()\n340\n341         # read and dispatch input from providers\nc:\\users\\max\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\kivy\\clock.py in tick(self)\n579\n580         # process event\n--> 581         self._process_events()\n582\n583         return self._dt\nkivy_clock.pyx in kivy._clock.CyClockBase._process_events (kivy_clock.c:7700)()\nkivy_clock.pyx in kivy._clock.CyClockBase._process_events (kivy_clock.c:7577)()\nkivy_clock.pyx in kivy._clock.CyClockBase._process_events (kivy_clock.c:7498)()\nkivy_clock.pyx in kivy._clock.ClockEvent.tick (kivy_clock.c:3490)()\n in update(self, dt)\n129         orientation = Vector(*self.car.velocity).angle((xx,yy))/180.\n130         last_signal = [self.car.signal1, self.car.signal2, self.car.signal3, orientation, -orientation]\n--> 131         action = brain.update(last_reward, last_signal)\n132         scores.append(brain.score())\n133         rotation = action2rotation[action]\nb:\\Google Drive\\Python\\Udemy AI\\Self_Driving_Car\\ai.py in update(self, reward, new_signal)\n77         new_state = torch.Tensor(new_signal).float().unsqueeze(0)\n78         self.memory.push((self.last_state, new_state, torch.LongTensor([int(self.last_action)]), torch.Tensor([self.last_reward])))\n---> 79         action = self.select_action(new_state)\n80         if len(self.memory.memory) > 100:\n81             batch_state, batch_next_state, batch_action, batch_reward = self.memory.sample(100)\nb:\\Google Drive\\Python\\Udemy AI\\Self_Driving_Car\\ai.py in select_action(self, state)\n62     def select_action(self, state):\n63         probs = F.softmax(self.model(Variable(state, volatile = True))*100) # T=100\n---> 64         action = probs.multinomial()\n65         return action.data[0,0]\n66\nRuntimeError: multinomial() missing 1 required positional arguments: \"num_samples\"", "body": "Thanks @peterjc123 . OK, I've uninstalled torch and reinstalled from CPU master: torch-0.4.0a0+fac711c-cp36-cp36m-win_amd64.whl\r\n\r\nThe errors appear to be the same - not sure where you picked up that it was v0.3.0 and whether this has now changed below? I'll look into num_samples.\r\n\r\nJupyter\r\n--------\r\n[INFO   ] [Logger      ] Record log in C:\\Users\\Max\\.kivy\\logs\\kivy_18-02-02_1.txt\r\n[INFO   ] [Kivy        ] v1.10.1.dev0, git-484b2f7, 20170513\r\n[INFO   ] [Python      ] v3.6.2 (v3.6.2:5fd33b5, Jul  8 2017, 04:57:36) [MSC v.1900 64 bit (AMD64)]\r\n[INFO   ] [Factory     ] 194 symbols loaded\r\n[INFO   ] [Image       ] Providers: img_tex, img_dds, img_sdl2, img_gif (img_pil, img_ffpyplayer ignored)\r\n[INFO   ] [Text        ] Provider: sdl2\r\n[INFO   ] [OSC         ] using <thread> for socket\r\n[INFO   ] [Window      ] Provider: sdl2\r\n[INFO   ] [GL          ] Using the \"OpenGL\" graphics system\r\n[INFO   ] [GL          ] GLEW initialization succeeded\r\n[INFO   ] [GL          ] Backend used <glew>\r\n[INFO   ] [GL          ] OpenGL version <b'4.3.0 - Build 10.18.14.4432'>\r\n[INFO   ] [GL          ] OpenGL vendor <b'Intel'>\r\n[INFO   ] [GL          ] OpenGL renderer <b'Intel(R) HD Graphics 4400'>\r\n[INFO   ] [GL          ] OpenGL parsed version: 4, 3\r\n[INFO   ] [GL          ] Shading version <b'4.30 - Build 10.18.14.4432'>\r\n[INFO   ] [GL          ] Texture max size <16384>\r\n[INFO   ] [GL          ] Texture max units <32>\r\n[INFO   ] [Window      ] auto add sdl2 input provider\r\n[INFO   ] [Window      ] virtual keyboard not allowed, single mode, not docked\r\n[INFO   ] [Base        ] Start application main loop\r\n b:\\Google Drive\\Python\\Udemy AI\\Self_Driving_Car\\ai.py:63: UserWarning: Implicit dimension choice for softmax has been deprecated. Change the call to include dim=X as an argument.\r\n   probs = F.softmax(self.model(Variable(state, volatile = True))*100) # T=100\r\n[INFO   ] [Base        ] Leaving application in progress...\r\n\r\n\r\nError\r\n------\r\n---------------------------------------------------------------------------\r\nRuntimeError                              Traceback (most recent call last)\r\n<ipython-input-1-42d764807491> in <module>()\r\n    233 # Running the whole thing\r\n    234 if __name__ == '__main__':\r\n--> 235     CarApp().run()\r\n\r\nc:\\users\\max\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\kivy\\app.py in run(self)\r\n    826 \r\n    827         self.dispatch('on_start')\r\n--> 828         runTouchApp()\r\n    829         self.stop()\r\n    830 \r\n\r\nc:\\users\\max\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\kivy\\base.py in runTouchApp(widget, slave)\r\n    502             _run_mainloop()\r\n    503         else:\r\n--> 504             EventLoop.window.mainloop()\r\n    505     finally:\r\n    506         stopTouchApp()\r\n\r\nc:\\users\\max\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\kivy\\core\\window\\window_sdl2.py in mainloop(self)\r\n    661         while not EventLoop.quit and EventLoop.status == 'started':\r\n    662             try:\r\n--> 663                 self._mainloop()\r\n    664             except BaseException as inst:\r\n    665                 # use exception manager first\r\n\r\nc:\\users\\max\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\kivy\\core\\window\\window_sdl2.py in _mainloop(self)\r\n    403 \r\n    404     def _mainloop(self):\r\n--> 405         EventLoop.idle()\r\n    406 \r\n    407         # for android/iOS, we don't want to have any event nor executing our\r\n\r\nc:\\users\\max\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\kivy\\base.py in idle(self)\r\n    337 \r\n    338         # update dt\r\n--> 339         Clock.tick()\r\n    340 \r\n    341         # read and dispatch input from providers\r\n\r\nc:\\users\\max\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\kivy\\clock.py in tick(self)\r\n    579 \r\n    580         # process event\r\n--> 581         self._process_events()\r\n    582 \r\n    583         return self._dt\r\n\r\nkivy\\_clock.pyx in kivy._clock.CyClockBase._process_events (kivy\\_clock.c:7700)()\r\n\r\nkivy\\_clock.pyx in kivy._clock.CyClockBase._process_events (kivy\\_clock.c:7577)()\r\n\r\nkivy\\_clock.pyx in kivy._clock.CyClockBase._process_events (kivy\\_clock.c:7498)()\r\n\r\nkivy\\_clock.pyx in kivy._clock.ClockEvent.tick (kivy\\_clock.c:3490)()\r\n\r\n<ipython-input-1-42d764807491> in update(self, dt)\r\n    129         orientation = Vector(*self.car.velocity).angle((xx,yy))/180.\r\n    130         last_signal = [self.car.signal1, self.car.signal2, self.car.signal3, orientation, -orientation]\r\n--> 131         action = brain.update(last_reward, last_signal)\r\n    132         scores.append(brain.score())\r\n    133         rotation = action2rotation[action]\r\n\r\nb:\\Google Drive\\Python\\Udemy AI\\Self_Driving_Car\\ai.py in update(self, reward, new_signal)\r\n     77         new_state = torch.Tensor(new_signal).float().unsqueeze(0)\r\n     78         self.memory.push((self.last_state, new_state, torch.LongTensor([int(self.last_action)]), torch.Tensor([self.last_reward])))\r\n---> 79         action = self.select_action(new_state)\r\n     80         if len(self.memory.memory) > 100:\r\n     81             batch_state, batch_next_state, batch_action, batch_reward = self.memory.sample(100)\r\n\r\nb:\\Google Drive\\Python\\Udemy AI\\Self_Driving_Car\\ai.py in select_action(self, state)\r\n     62     def select_action(self, state):\r\n     63         probs = F.softmax(self.model(Variable(state, volatile = True))*100) # T=100\r\n---> 64         action = probs.multinomial()\r\n     65         return action.data[0,0]\r\n     66 \r\n\r\nRuntimeError: multinomial() missing 1 required positional arguments: \"num_samples\"\r\n\r\n"}