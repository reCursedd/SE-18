{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/348598181", "html_url": "https://github.com/pytorch/pytorch/issues/494#issuecomment-348598181", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/494", "id": 348598181, "node_id": "MDEyOklzc3VlQ29tbWVudDM0ODU5ODE4MQ==", "user": {"login": "SpaceCowboy850", "id": 12373859, "node_id": "MDQ6VXNlcjEyMzczODU5", "avatar_url": "https://avatars2.githubusercontent.com/u/12373859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SpaceCowboy850", "html_url": "https://github.com/SpaceCowboy850", "followers_url": "https://api.github.com/users/SpaceCowboy850/followers", "following_url": "https://api.github.com/users/SpaceCowboy850/following{/other_user}", "gists_url": "https://api.github.com/users/SpaceCowboy850/gists{/gist_id}", "starred_url": "https://api.github.com/users/SpaceCowboy850/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SpaceCowboy850/subscriptions", "organizations_url": "https://api.github.com/users/SpaceCowboy850/orgs", "repos_url": "https://api.github.com/users/SpaceCowboy850/repos", "events_url": "https://api.github.com/users/SpaceCowboy850/events{/privacy}", "received_events_url": "https://api.github.com/users/SpaceCowboy850/received_events", "type": "User", "site_admin": false}, "created_at": "2017-12-01T19:52:48Z", "updated_at": "2017-12-01T19:52:48Z", "author_association": "NONE", "body_html": "<p>I'm sorry, which extension?  I'm new to PyTorch, and am porting this code over to windows from a co-worker who was working in linux PyTorch, so I'm just now getting familiar with the code.</p>\n<p>My steps so far have mirrored what Magic282 said:</p>\n<pre><code>\td:\n\tcd pytorch\n\tgit clone --recursive https://github.com/pytorch/pytorch\n\tcd pytorch\n\txcopy /Y aten\\src\\ATen\\common_with_cwrap.py tools\\shared\\cwrap_common.py\n\tmkdir torch\\lib\\build\\ATen\\src\\ATen\n\tcd torch\\lib\\build\\ATen\\src\\ATen\n\tmkdir ATen\n\tpython  ../../../../../../aten/src/ATen/gen.py -s  ../../../../../../aten/src/ATen  ../../../../../../aten/src/ATen/Declarations.cwrap  ../../../../../../aten/src/THNN/generic/THNN.h  ../../../../../../aten/src/THCUNN/generic/THCUNN.h  ../../../../../../aten/src/ATen/nn.yaml  ../../../../../../aten/src/ATen/native/native_functions.yaml\n\tcd ../../../../../..\n\tset CMAKE_GENERATOR=Visual Studio 15 2017 Win64\n\tset DISTUTILS_USE_SDK=1\n\tpython setup.py install\n</code></pre>\n<p>Additionally, In torch/utils/ffi/<strong>init</strong>.py, I changed</p>\n<pre><code>\tdef _build_extension(ffi, cffi_wrapper_name, target_dir, verbose):\n\t    try:\n\t        tmpdir = tempfile.mkdtemp()\n\t        libname = cffi_wrapper_name + '.so'\n</code></pre>\n<p>to this:</p>\n<pre><code>\tdef _build_extension(ffi, cffi_wrapper_name, target_dir, verbose):\n    \t   try:\n        \ttmpdir = tempfile.mkdtemp()\n        \tlibname = cffi_wrapper_name + '.pyd'\n</code></pre>\n<p>And to summarize for those following along at home, I can only get it building with Cuda9 and Visual Studio 2017 as hash.h has a function declaration that confuses VS2015 to cause a compiler error.</p>\n<p>I did end up building extensions, but with the code I gave you it isn't using any of them, so I don't think it is those.</p>\n<p>Good call on the exit.  While this does stop an error in my short example code, in the real code, this is the beginning of the training, and the exit should have nothing to do with this breakage.  Nevertheless, I tried commenting that out in the real code, but with num_workers 0 I still have python crash, and with num_workers 1 I get the broken pipe still.  It very well could be that there is another error in the full code that is causing this, however the code executes fine on Ubuntu.</p>\n<p>I think we will end up not being able to use PyTorch on Windows and will have to look at another solution.</p>", "body_text": "I'm sorry, which extension?  I'm new to PyTorch, and am porting this code over to windows from a co-worker who was working in linux PyTorch, so I'm just now getting familiar with the code.\nMy steps so far have mirrored what Magic282 said:\n\td:\n\tcd pytorch\n\tgit clone --recursive https://github.com/pytorch/pytorch\n\tcd pytorch\n\txcopy /Y aten\\src\\ATen\\common_with_cwrap.py tools\\shared\\cwrap_common.py\n\tmkdir torch\\lib\\build\\ATen\\src\\ATen\n\tcd torch\\lib\\build\\ATen\\src\\ATen\n\tmkdir ATen\n\tpython  ../../../../../../aten/src/ATen/gen.py -s  ../../../../../../aten/src/ATen  ../../../../../../aten/src/ATen/Declarations.cwrap  ../../../../../../aten/src/THNN/generic/THNN.h  ../../../../../../aten/src/THCUNN/generic/THCUNN.h  ../../../../../../aten/src/ATen/nn.yaml  ../../../../../../aten/src/ATen/native/native_functions.yaml\n\tcd ../../../../../..\n\tset CMAKE_GENERATOR=Visual Studio 15 2017 Win64\n\tset DISTUTILS_USE_SDK=1\n\tpython setup.py install\n\nAdditionally, In torch/utils/ffi/init.py, I changed\n\tdef _build_extension(ffi, cffi_wrapper_name, target_dir, verbose):\n\t    try:\n\t        tmpdir = tempfile.mkdtemp()\n\t        libname = cffi_wrapper_name + '.so'\n\nto this:\n\tdef _build_extension(ffi, cffi_wrapper_name, target_dir, verbose):\n    \t   try:\n        \ttmpdir = tempfile.mkdtemp()\n        \tlibname = cffi_wrapper_name + '.pyd'\n\nAnd to summarize for those following along at home, I can only get it building with Cuda9 and Visual Studio 2017 as hash.h has a function declaration that confuses VS2015 to cause a compiler error.\nI did end up building extensions, but with the code I gave you it isn't using any of them, so I don't think it is those.\nGood call on the exit.  While this does stop an error in my short example code, in the real code, this is the beginning of the training, and the exit should have nothing to do with this breakage.  Nevertheless, I tried commenting that out in the real code, but with num_workers 0 I still have python crash, and with num_workers 1 I get the broken pipe still.  It very well could be that there is another error in the full code that is causing this, however the code executes fine on Ubuntu.\nI think we will end up not being able to use PyTorch on Windows and will have to look at another solution.", "body": "I'm sorry, which extension?  I'm new to PyTorch, and am porting this code over to windows from a co-worker who was working in linux PyTorch, so I'm just now getting familiar with the code.\r\n\r\nMy steps so far have mirrored what Magic282 said:\r\n```\r\n\td:\r\n\tcd pytorch\r\n\tgit clone --recursive https://github.com/pytorch/pytorch\r\n\tcd pytorch\r\n\txcopy /Y aten\\src\\ATen\\common_with_cwrap.py tools\\shared\\cwrap_common.py\r\n\tmkdir torch\\lib\\build\\ATen\\src\\ATen\r\n\tcd torch\\lib\\build\\ATen\\src\\ATen\r\n\tmkdir ATen\r\n\tpython  ../../../../../../aten/src/ATen/gen.py -s  ../../../../../../aten/src/ATen  ../../../../../../aten/src/ATen/Declarations.cwrap  ../../../../../../aten/src/THNN/generic/THNN.h  ../../../../../../aten/src/THCUNN/generic/THCUNN.h  ../../../../../../aten/src/ATen/nn.yaml  ../../../../../../aten/src/ATen/native/native_functions.yaml\r\n\tcd ../../../../../..\r\n\tset CMAKE_GENERATOR=Visual Studio 15 2017 Win64\r\n\tset DISTUTILS_USE_SDK=1\r\n\tpython setup.py install\r\n```\r\n\r\nAdditionally, In torch/utils/ffi/__init__.py, I changed \r\n```\r\n\tdef _build_extension(ffi, cffi_wrapper_name, target_dir, verbose):\r\n\t    try:\r\n\t        tmpdir = tempfile.mkdtemp()\r\n\t        libname = cffi_wrapper_name + '.so'\r\n```\r\nto this:\r\n```\r\n\tdef _build_extension(ffi, cffi_wrapper_name, target_dir, verbose):\r\n    \t   try:\r\n        \ttmpdir = tempfile.mkdtemp()\r\n        \tlibname = cffi_wrapper_name + '.pyd'\r\n```\r\nAnd to summarize for those following along at home, I can only get it building with Cuda9 and Visual Studio 2017 as hash.h has a function declaration that confuses VS2015 to cause a compiler error.\r\n\r\nI did end up building extensions, but with the code I gave you it isn't using any of them, so I don't think it is those. \r\n\r\nGood call on the exit.  While this does stop an error in my short example code, in the real code, this is the beginning of the training, and the exit should have nothing to do with this breakage.  Nevertheless, I tried commenting that out in the real code, but with num_workers 0 I still have python crash, and with num_workers 1 I get the broken pipe still.  It very well could be that there is another error in the full code that is causing this, however the code executes fine on Ubuntu.\r\n\r\nI think we will end up not being able to use PyTorch on Windows and will have to look at another solution.  \r\n"}