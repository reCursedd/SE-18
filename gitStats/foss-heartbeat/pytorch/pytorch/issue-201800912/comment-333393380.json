{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/333393380", "html_url": "https://github.com/pytorch/pytorch/issues/494#issuecomment-333393380", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/494", "id": 333393380, "node_id": "MDEyOklzc3VlQ29tbWVudDMzMzM5MzM4MA==", "user": {"login": "peterjc123", "id": 9998726, "node_id": "MDQ6VXNlcjk5OTg3MjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/9998726?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peterjc123", "html_url": "https://github.com/peterjc123", "followers_url": "https://api.github.com/users/peterjc123/followers", "following_url": "https://api.github.com/users/peterjc123/following{/other_user}", "gists_url": "https://api.github.com/users/peterjc123/gists{/gist_id}", "starred_url": "https://api.github.com/users/peterjc123/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peterjc123/subscriptions", "organizations_url": "https://api.github.com/users/peterjc123/orgs", "repos_url": "https://api.github.com/users/peterjc123/repos", "events_url": "https://api.github.com/users/peterjc123/events{/privacy}", "received_events_url": "https://api.github.com/users/peterjc123/received_events", "type": "User", "site_admin": false}, "created_at": "2017-10-01T17:43:12Z", "updated_at": "2017-10-01T17:43:12Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Plus: All the known issues are fixed. The only one test that can't is the JIT test. The error log is shown below:</p>\n<pre><code>[test_new] PS D:\\pytorch\\pytorch\\test&gt; python .\\test_jit.py\ns..F..FF........s...s.........s.\n======================================================================\nFAIL: test_backward (__main__.TestJit)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \".\\test_jit.py\", line 278, in test_backward\n    self.assertExpected(str(trace))\n  File \"D:\\pytorch\\pytorch\\test\\common.py\", line 342, in assertExpected\n    self.assertMultiLineEqual(expected, s)\nAssertionError: 'grap[997 chars]ppOp[N5torch8autograd3AddE](%17, %25), uses = [52 chars]n}\\n' != 'grap[997 chars]ppOp[struct torch::autograd::Add](%17, %25), u[58 chars]n}\\n'\n  graph(%1 : Double(2, 2)\n        %2 : Double(2, 2)\n        -------- stage 1 --------\n        %7 : Double(2, 2)\n        -------- stage 2 --------\n        %14 : Double(2, 2!)\n        %15 : Double(2, 2)) {\n    %4 : Double(2, 2) = ^MulConstant(2)(%2), uses = [[%5.i0, %10.i1, %16.i1]];\n    %6 : Double(2, 2) = ^Mul()(%4, %1), uses = [[%0.i0]];\n    ---------------- stage 1 ----------------\n    %9 : Double(2, 2) = ^Mul()(%7, %1), uses = [[%12.i0]];\n    %11 : Double(2, 2) = ^Mul()(%7, %4), uses = [[%0.i1]];\n    %13 : Double(2, 2) = ^MulConstant(2)(%9), uses = [[%0.i2]];\n    ---------------- stage 2 ----------------\n    %17 : Double(2, 2) = ^Mul()(%14, %4), uses = [[%28.i0]];\n    %19 : Double(2, 2) = ^Mul()(%14, %7), uses = [[%22.i0]];\n    %21 : Double(2, 2) = ^MulConstant(2)(%15), uses = [[%24.i0, %26.i0]];\n    %23 : Double(2, 2) = ^MulConstant(2)(%19), uses = [[%0.i5]];\n    %25 : Double(2, 2) = ^Mul()(%21, %1), uses = [[%28.i1]];\n    %27 : Double(2, 2) = ^Mul()(%21, %7), uses = [[%0.i4]];\n-   %29 : Double(2, 2) = CppOp[N5torch8autograd3AddE](%17, %25), uses = [[%0.i3]];\n?                              ^^     ^        ^   -\n+   %29 : Double(2, 2) = CppOp[struct torch::autograd::Add](%17, %25), uses = [[%0.i3]];\n?                              ^^^^^^^     ^^        ^^\n    return (%6, %11, %13, %29, %27, %23);\n  }\n\n\n======================================================================\nFAIL: test_backward_opaque (__main__.TestJit)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \".\\test_jit.py\", line 295, in test_backward_opaque\n    self.assertExpected(str(trace))\n  File \"D:\\pytorch\\pytorch\\test\\common.py\", line 342, in assertExpected\n    self.assertMultiLineEqual(expected, s)\nAssertionError: 'grap[291 chars]ppOp[N5torch8autograd4EvalE](%6, %5), uses = [[49 chars]n}\\n' != 'grap[291 chars]ppOp[struct torch::autograd::Eval](%6, %5), us[55 chars]n}\\n'\n  graph(%1 : Double(3, 3)\n        %2 : Double(3, 3)\n        -------- stage 1 --------\n        %6 : Double(3, 3)) {\n    %4 : Double(3, 3), %5 : Handle = ^Cross()(%1, %2), uses = [[%0.i0], [%7.i1]];\n    ---------------- stage 1 ----------------\n-   %17 : Double(3, 3), %18 : Double(3, 3), %19 : Handle = CppOp[N5torch8autograd4EvalE](%6, %5), uses = [[%0.i1], [%0.i2], []];\n?                                                                ^^     ^        ^    -\n+   %17 : Double(3, 3), %18 : Double(3, 3), %19 : Handle = CppOp[struct torch::autograd::Eval](%6, %5), uses = [[%0.i1], [%0.i2], []];\n?                                                                ^^^^^^^     ^^        ^^\n    return (%4, %17, %18);\n  }\n\n\n======================================================================\nFAIL: test_batchnorm (__main__.TestJit)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \".\\test_jit.py\", line 503, in test_batchnorm\n    self.assertExpected(str(trace))\n  File \"D:\\pytorch\\pytorch\\test\\common.py\", line 342, in assertExpected\n    self.assertMultiLineEqual(expected, s)\nAssertionError: 'grap[148 chars]ppOp[N5torch8autograd16BatchNormForwardE](%1, [47 chars]n}\\n' != 'grap[148 chars]ppOp[struct torch::autograd::BatchNormForward][52 chars]n}\\n'\n  graph(%1 : Double(2, 2)\n        %2 : Double(2)\n        %3 : Double(2)\n        %4 : Double(2)\n        %5 : Double(2)) {\n-   %7 : Double(2, 2), %8 : Handle = CppOp[N5torch8autograd16BatchNormForwardE](%1, %2, %3), uses = [[%0.i0], []];\n?                                          ^^     ^        ^^                -\n+   %7 : Double(2, 2), %8 : Handle = CppOp[struct torch::autograd::BatchNormForward](%1, %2, %3), uses = [[%0.i0], []];\n?                                          ^^^^^^^     ^^        ^^\n    return (%7);\n  }\n\n\n----------------------------------------------------------------------\nRan 32 tests in 0.161s\n\nFAILED (failures=3, skipped=4)\n</code></pre>", "body_text": "Plus: All the known issues are fixed. The only one test that can't is the JIT test. The error log is shown below:\n[test_new] PS D:\\pytorch\\pytorch\\test> python .\\test_jit.py\ns..F..FF........s...s.........s.\n======================================================================\nFAIL: test_backward (__main__.TestJit)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \".\\test_jit.py\", line 278, in test_backward\n    self.assertExpected(str(trace))\n  File \"D:\\pytorch\\pytorch\\test\\common.py\", line 342, in assertExpected\n    self.assertMultiLineEqual(expected, s)\nAssertionError: 'grap[997 chars]ppOp[N5torch8autograd3AddE](%17, %25), uses = [52 chars]n}\\n' != 'grap[997 chars]ppOp[struct torch::autograd::Add](%17, %25), u[58 chars]n}\\n'\n  graph(%1 : Double(2, 2)\n        %2 : Double(2, 2)\n        -------- stage 1 --------\n        %7 : Double(2, 2)\n        -------- stage 2 --------\n        %14 : Double(2, 2!)\n        %15 : Double(2, 2)) {\n    %4 : Double(2, 2) = ^MulConstant(2)(%2), uses = [[%5.i0, %10.i1, %16.i1]];\n    %6 : Double(2, 2) = ^Mul()(%4, %1), uses = [[%0.i0]];\n    ---------------- stage 1 ----------------\n    %9 : Double(2, 2) = ^Mul()(%7, %1), uses = [[%12.i0]];\n    %11 : Double(2, 2) = ^Mul()(%7, %4), uses = [[%0.i1]];\n    %13 : Double(2, 2) = ^MulConstant(2)(%9), uses = [[%0.i2]];\n    ---------------- stage 2 ----------------\n    %17 : Double(2, 2) = ^Mul()(%14, %4), uses = [[%28.i0]];\n    %19 : Double(2, 2) = ^Mul()(%14, %7), uses = [[%22.i0]];\n    %21 : Double(2, 2) = ^MulConstant(2)(%15), uses = [[%24.i0, %26.i0]];\n    %23 : Double(2, 2) = ^MulConstant(2)(%19), uses = [[%0.i5]];\n    %25 : Double(2, 2) = ^Mul()(%21, %1), uses = [[%28.i1]];\n    %27 : Double(2, 2) = ^Mul()(%21, %7), uses = [[%0.i4]];\n-   %29 : Double(2, 2) = CppOp[N5torch8autograd3AddE](%17, %25), uses = [[%0.i3]];\n?                              ^^     ^        ^   -\n+   %29 : Double(2, 2) = CppOp[struct torch::autograd::Add](%17, %25), uses = [[%0.i3]];\n?                              ^^^^^^^     ^^        ^^\n    return (%6, %11, %13, %29, %27, %23);\n  }\n\n\n======================================================================\nFAIL: test_backward_opaque (__main__.TestJit)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \".\\test_jit.py\", line 295, in test_backward_opaque\n    self.assertExpected(str(trace))\n  File \"D:\\pytorch\\pytorch\\test\\common.py\", line 342, in assertExpected\n    self.assertMultiLineEqual(expected, s)\nAssertionError: 'grap[291 chars]ppOp[N5torch8autograd4EvalE](%6, %5), uses = [[49 chars]n}\\n' != 'grap[291 chars]ppOp[struct torch::autograd::Eval](%6, %5), us[55 chars]n}\\n'\n  graph(%1 : Double(3, 3)\n        %2 : Double(3, 3)\n        -------- stage 1 --------\n        %6 : Double(3, 3)) {\n    %4 : Double(3, 3), %5 : Handle = ^Cross()(%1, %2), uses = [[%0.i0], [%7.i1]];\n    ---------------- stage 1 ----------------\n-   %17 : Double(3, 3), %18 : Double(3, 3), %19 : Handle = CppOp[N5torch8autograd4EvalE](%6, %5), uses = [[%0.i1], [%0.i2], []];\n?                                                                ^^     ^        ^    -\n+   %17 : Double(3, 3), %18 : Double(3, 3), %19 : Handle = CppOp[struct torch::autograd::Eval](%6, %5), uses = [[%0.i1], [%0.i2], []];\n?                                                                ^^^^^^^     ^^        ^^\n    return (%4, %17, %18);\n  }\n\n\n======================================================================\nFAIL: test_batchnorm (__main__.TestJit)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \".\\test_jit.py\", line 503, in test_batchnorm\n    self.assertExpected(str(trace))\n  File \"D:\\pytorch\\pytorch\\test\\common.py\", line 342, in assertExpected\n    self.assertMultiLineEqual(expected, s)\nAssertionError: 'grap[148 chars]ppOp[N5torch8autograd16BatchNormForwardE](%1, [47 chars]n}\\n' != 'grap[148 chars]ppOp[struct torch::autograd::BatchNormForward][52 chars]n}\\n'\n  graph(%1 : Double(2, 2)\n        %2 : Double(2)\n        %3 : Double(2)\n        %4 : Double(2)\n        %5 : Double(2)) {\n-   %7 : Double(2, 2), %8 : Handle = CppOp[N5torch8autograd16BatchNormForwardE](%1, %2, %3), uses = [[%0.i0], []];\n?                                          ^^     ^        ^^                -\n+   %7 : Double(2, 2), %8 : Handle = CppOp[struct torch::autograd::BatchNormForward](%1, %2, %3), uses = [[%0.i0], []];\n?                                          ^^^^^^^     ^^        ^^\n    return (%7);\n  }\n\n\n----------------------------------------------------------------------\nRan 32 tests in 0.161s\n\nFAILED (failures=3, skipped=4)", "body": "Plus: All the known issues are fixed. The only one test that can't is the JIT test. The error log is shown below:\r\n```\r\n[test_new] PS D:\\pytorch\\pytorch\\test> python .\\test_jit.py\r\ns..F..FF........s...s.........s.\r\n======================================================================\r\nFAIL: test_backward (__main__.TestJit)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \".\\test_jit.py\", line 278, in test_backward\r\n    self.assertExpected(str(trace))\r\n  File \"D:\\pytorch\\pytorch\\test\\common.py\", line 342, in assertExpected\r\n    self.assertMultiLineEqual(expected, s)\r\nAssertionError: 'grap[997 chars]ppOp[N5torch8autograd3AddE](%17, %25), uses = [52 chars]n}\\n' != 'grap[997 chars]ppOp[struct torch::autograd::Add](%17, %25), u[58 chars]n}\\n'\r\n  graph(%1 : Double(2, 2)\r\n        %2 : Double(2, 2)\r\n        -------- stage 1 --------\r\n        %7 : Double(2, 2)\r\n        -------- stage 2 --------\r\n        %14 : Double(2, 2!)\r\n        %15 : Double(2, 2)) {\r\n    %4 : Double(2, 2) = ^MulConstant(2)(%2), uses = [[%5.i0, %10.i1, %16.i1]];\r\n    %6 : Double(2, 2) = ^Mul()(%4, %1), uses = [[%0.i0]];\r\n    ---------------- stage 1 ----------------\r\n    %9 : Double(2, 2) = ^Mul()(%7, %1), uses = [[%12.i0]];\r\n    %11 : Double(2, 2) = ^Mul()(%7, %4), uses = [[%0.i1]];\r\n    %13 : Double(2, 2) = ^MulConstant(2)(%9), uses = [[%0.i2]];\r\n    ---------------- stage 2 ----------------\r\n    %17 : Double(2, 2) = ^Mul()(%14, %4), uses = [[%28.i0]];\r\n    %19 : Double(2, 2) = ^Mul()(%14, %7), uses = [[%22.i0]];\r\n    %21 : Double(2, 2) = ^MulConstant(2)(%15), uses = [[%24.i0, %26.i0]];\r\n    %23 : Double(2, 2) = ^MulConstant(2)(%19), uses = [[%0.i5]];\r\n    %25 : Double(2, 2) = ^Mul()(%21, %1), uses = [[%28.i1]];\r\n    %27 : Double(2, 2) = ^Mul()(%21, %7), uses = [[%0.i4]];\r\n-   %29 : Double(2, 2) = CppOp[N5torch8autograd3AddE](%17, %25), uses = [[%0.i3]];\r\n?                              ^^     ^        ^   -\r\n+   %29 : Double(2, 2) = CppOp[struct torch::autograd::Add](%17, %25), uses = [[%0.i3]];\r\n?                              ^^^^^^^     ^^        ^^\r\n    return (%6, %11, %13, %29, %27, %23);\r\n  }\r\n\r\n\r\n======================================================================\r\nFAIL: test_backward_opaque (__main__.TestJit)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \".\\test_jit.py\", line 295, in test_backward_opaque\r\n    self.assertExpected(str(trace))\r\n  File \"D:\\pytorch\\pytorch\\test\\common.py\", line 342, in assertExpected\r\n    self.assertMultiLineEqual(expected, s)\r\nAssertionError: 'grap[291 chars]ppOp[N5torch8autograd4EvalE](%6, %5), uses = [[49 chars]n}\\n' != 'grap[291 chars]ppOp[struct torch::autograd::Eval](%6, %5), us[55 chars]n}\\n'\r\n  graph(%1 : Double(3, 3)\r\n        %2 : Double(3, 3)\r\n        -------- stage 1 --------\r\n        %6 : Double(3, 3)) {\r\n    %4 : Double(3, 3), %5 : Handle = ^Cross()(%1, %2), uses = [[%0.i0], [%7.i1]];\r\n    ---------------- stage 1 ----------------\r\n-   %17 : Double(3, 3), %18 : Double(3, 3), %19 : Handle = CppOp[N5torch8autograd4EvalE](%6, %5), uses = [[%0.i1], [%0.i2], []];\r\n?                                                                ^^     ^        ^    -\r\n+   %17 : Double(3, 3), %18 : Double(3, 3), %19 : Handle = CppOp[struct torch::autograd::Eval](%6, %5), uses = [[%0.i1], [%0.i2], []];\r\n?                                                                ^^^^^^^     ^^        ^^\r\n    return (%4, %17, %18);\r\n  }\r\n\r\n\r\n======================================================================\r\nFAIL: test_batchnorm (__main__.TestJit)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \".\\test_jit.py\", line 503, in test_batchnorm\r\n    self.assertExpected(str(trace))\r\n  File \"D:\\pytorch\\pytorch\\test\\common.py\", line 342, in assertExpected\r\n    self.assertMultiLineEqual(expected, s)\r\nAssertionError: 'grap[148 chars]ppOp[N5torch8autograd16BatchNormForwardE](%1, [47 chars]n}\\n' != 'grap[148 chars]ppOp[struct torch::autograd::BatchNormForward][52 chars]n}\\n'\r\n  graph(%1 : Double(2, 2)\r\n        %2 : Double(2)\r\n        %3 : Double(2)\r\n        %4 : Double(2)\r\n        %5 : Double(2)) {\r\n-   %7 : Double(2, 2), %8 : Handle = CppOp[N5torch8autograd16BatchNormForwardE](%1, %2, %3), uses = [[%0.i0], []];\r\n?                                          ^^     ^        ^^                -\r\n+   %7 : Double(2, 2), %8 : Handle = CppOp[struct torch::autograd::BatchNormForward](%1, %2, %3), uses = [[%0.i0], []];\r\n?                                          ^^^^^^^     ^^        ^^\r\n    return (%7);\r\n  }\r\n\r\n\r\n----------------------------------------------------------------------\r\nRan 32 tests in 0.161s\r\n\r\nFAILED (failures=3, skipped=4)\r\n```"}