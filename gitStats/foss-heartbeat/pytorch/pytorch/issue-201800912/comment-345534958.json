{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/345534958", "html_url": "https://github.com/pytorch/pytorch/issues/494#issuecomment-345534958", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/494", "id": 345534958, "node_id": "MDEyOklzc3VlQ29tbWVudDM0NTUzNDk1OA==", "user": {"login": "ankur6ue", "id": 6232547, "node_id": "MDQ6VXNlcjYyMzI1NDc=", "avatar_url": "https://avatars0.githubusercontent.com/u/6232547?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ankur6ue", "html_url": "https://github.com/ankur6ue", "followers_url": "https://api.github.com/users/ankur6ue/followers", "following_url": "https://api.github.com/users/ankur6ue/following{/other_user}", "gists_url": "https://api.github.com/users/ankur6ue/gists{/gist_id}", "starred_url": "https://api.github.com/users/ankur6ue/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ankur6ue/subscriptions", "organizations_url": "https://api.github.com/users/ankur6ue/orgs", "repos_url": "https://api.github.com/users/ankur6ue/repos", "events_url": "https://api.github.com/users/ankur6ue/events{/privacy}", "received_events_url": "https://api.github.com/users/ankur6ue/received_events", "type": "User", "site_admin": false}, "created_at": "2017-11-19T17:39:57Z", "updated_at": "2017-11-19T17:39:57Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=9998726\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/peterjc123\">@peterjc123</a><br>\nThank you very much for the updated zip. The code now builds, however I still get an error when I try to import the extension in python.. To check if this is an issue with my module or with pytorch ffi on windows itself, I tried building the c extension sample that is part of the pytorch docs:<br>\n<a href=\"http://pytorch.org/tutorials/advanced/c_extension.html\" rel=\"nofollow\">http://pytorch.org/tutorials/advanced/c_extension.html</a></p>\n<p>C code:<br>\n/* my_lib.cpp */<br>\n#include &lt;TH/TH.h&gt;</p>\n<p>extern \"C\" int my_lib_add_forward(THFloatTensor *input1, THFloatTensor *input2,<br>\nTHFloatTensor *output)<br>\n{<br>\nif (!THFloatTensor_isSameSizeAs(input1, input2))<br>\nreturn 0;<br>\nTHFloatTensor_resizeAs(output, input1);<br>\nTHFloatTensor_cadd(output, input1, 1.0, input2);<br>\nreturn 1;<br>\n}</p>\n<p>extern \"C\" int my_lib_add_backward(THFloatTensor *grad_output, THFloatTensor *grad_input)<br>\n{<br>\nTHFloatTensor_resizeAs(grad_input, grad_output);<br>\nTHFloatTensor_fill(grad_input, 1);<br>\nreturn 1;<br>\n}</p>\n<p>header:<br>\n/* my_lib.h */<br>\nint my_lib_add_forward(THFloatTensor *input1, THFloatTensor *input2, THFloatTensor *output);<br>\nint my_lib_add_backward(THFloatTensor *grad_output, THFloatTensor *grad_input);</p>\n<p>build script:</p>\n<h1>build.py</h1>\n<p>from torch.utils.ffi import create_extension<br>\nlibrary_dirs = ['C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\lib\\x64']<br>\nlibrary_dirs.append('C:\\tmp\\pytorch\\torch\\lib')<br>\nthnvrtc_link_flags = ['cuda.lib', 'cudart.lib', 'nvrtc.lib', 'aten.lib']<br>\ninclude_dirs = [<br>\n'C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include',<br>\n]<br>\nffi = create_extension(<br>\nname='_ext.my_lib',<br>\nheaders='my_lib.h',<br>\nsources=['my_lib.cpp'],<br>\nextra_compile_args=['/MT'],<br>\nrelative_to=<strong>file</strong>,<br>\ninclude_dirs=include_dirs,<br>\nwith_cuda=False,<br>\nlibrary_dirs=library_dirs,<br>\nextra_link_args=thnvrtc_link_flags<br>\n)<br>\nffi.build()</p>\n<p>This example doesn't use cuda, so cuda libs/include paths are not really needed.</p>\n<p>running build.py from the command prompt, I can build the extension. It creates _ext/my_lib directory, with <em>init</em>.py and _my_lib.so.</p>\n<p>Now when I try to import the module using<br>\nfrom _ext import my_lib,</p>\n<p>I get the following<br>\nfrom ._my_lib import lib as _lib, ffi as _ffi<br>\nModuleNotFoundError: No module named '_ext.my_lib._my_lib'</p>\n<p>So it appears to be some issue in Torch ffi api on windows? Do you know any workarounds?</p>", "body_text": "@peterjc123\nThank you very much for the updated zip. The code now builds, however I still get an error when I try to import the extension in python.. To check if this is an issue with my module or with pytorch ffi on windows itself, I tried building the c extension sample that is part of the pytorch docs:\nhttp://pytorch.org/tutorials/advanced/c_extension.html\nC code:\n/* my_lib.cpp */\n#include <TH/TH.h>\nextern \"C\" int my_lib_add_forward(THFloatTensor *input1, THFloatTensor *input2,\nTHFloatTensor *output)\n{\nif (!THFloatTensor_isSameSizeAs(input1, input2))\nreturn 0;\nTHFloatTensor_resizeAs(output, input1);\nTHFloatTensor_cadd(output, input1, 1.0, input2);\nreturn 1;\n}\nextern \"C\" int my_lib_add_backward(THFloatTensor *grad_output, THFloatTensor *grad_input)\n{\nTHFloatTensor_resizeAs(grad_input, grad_output);\nTHFloatTensor_fill(grad_input, 1);\nreturn 1;\n}\nheader:\n/* my_lib.h */\nint my_lib_add_forward(THFloatTensor *input1, THFloatTensor *input2, THFloatTensor *output);\nint my_lib_add_backward(THFloatTensor *grad_output, THFloatTensor *grad_input);\nbuild script:\nbuild.py\nfrom torch.utils.ffi import create_extension\nlibrary_dirs = ['C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\lib\\x64']\nlibrary_dirs.append('C:\\tmp\\pytorch\\torch\\lib')\nthnvrtc_link_flags = ['cuda.lib', 'cudart.lib', 'nvrtc.lib', 'aten.lib']\ninclude_dirs = [\n'C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include',\n]\nffi = create_extension(\nname='_ext.my_lib',\nheaders='my_lib.h',\nsources=['my_lib.cpp'],\nextra_compile_args=['/MT'],\nrelative_to=file,\ninclude_dirs=include_dirs,\nwith_cuda=False,\nlibrary_dirs=library_dirs,\nextra_link_args=thnvrtc_link_flags\n)\nffi.build()\nThis example doesn't use cuda, so cuda libs/include paths are not really needed.\nrunning build.py from the command prompt, I can build the extension. It creates _ext/my_lib directory, with init.py and _my_lib.so.\nNow when I try to import the module using\nfrom _ext import my_lib,\nI get the following\nfrom ._my_lib import lib as _lib, ffi as _ffi\nModuleNotFoundError: No module named '_ext.my_lib._my_lib'\nSo it appears to be some issue in Torch ffi api on windows? Do you know any workarounds?", "body": "@peterjc123 \r\nThank you very much for the updated zip. The code now builds, however I still get an error when I try to import the extension in python.. To check if this is an issue with my module or with pytorch ffi on windows itself, I tried building the c extension sample that is part of the pytorch docs:\r\nhttp://pytorch.org/tutorials/advanced/c_extension.html\r\n\r\nC code:\r\n/* my_lib.cpp */\r\n#include <TH/TH.h>\r\n\r\nextern \"C\" int my_lib_add_forward(THFloatTensor *input1, THFloatTensor *input2,\r\nTHFloatTensor *output)\r\n{\r\n    if (!THFloatTensor_isSameSizeAs(input1, input2))\r\n        return 0;\r\n    THFloatTensor_resizeAs(output, input1);\r\n    THFloatTensor_cadd(output, input1, 1.0, input2);\r\n    return 1;\r\n}\r\n\r\nextern \"C\" int my_lib_add_backward(THFloatTensor *grad_output, THFloatTensor *grad_input)\r\n{\r\n    THFloatTensor_resizeAs(grad_input, grad_output);\r\n    THFloatTensor_fill(grad_input, 1);\r\n    return 1;\r\n}\r\n\r\nheader:\r\n/* my_lib.h */\r\nint my_lib_add_forward(THFloatTensor *input1, THFloatTensor *input2, THFloatTensor *output);\r\nint my_lib_add_backward(THFloatTensor *grad_output, THFloatTensor *grad_input);\r\n\r\nbuild script:\r\n# build.py\r\nfrom torch.utils.ffi import create_extension\r\nlibrary_dirs = ['C:\\\\Program Files\\\\NVIDIA GPU Computing Toolkit\\\\CUDA\\\\v8.0\\\\lib\\\\x64']\r\nlibrary_dirs.append('C:\\\\tmp\\\\pytorch\\\\torch\\\\lib')\r\nthnvrtc_link_flags = ['cuda.lib', 'cudart.lib', 'nvrtc.lib', 'aten.lib']\r\ninclude_dirs = [\r\n    'C:\\\\Program Files\\\\NVIDIA GPU Computing Toolkit\\\\CUDA\\\\v8.0\\\\include',\r\n]\r\nffi = create_extension(\r\nname='_ext.my_lib',\r\nheaders='my_lib.h',\r\nsources=['my_lib.cpp'],\r\nextra_compile_args=['/MT'],\r\nrelative_to=__file__,\r\ninclude_dirs=include_dirs,\r\nwith_cuda=False,\r\nlibrary_dirs=library_dirs,\r\nextra_link_args=thnvrtc_link_flags\r\n)\r\nffi.build()\r\n\r\nThis example doesn't use cuda, so cuda libs/include paths are not really needed.\r\n\r\nrunning build.py from the command prompt, I can build the extension. It creates _ext/my_lib directory, with _init_.py and _my_lib.so.\r\n\r\nNow when I try to import the module using \r\n from _ext import my_lib, \r\n\r\nI get the following\r\n from ._my_lib import lib as _lib, ffi as _ffi\r\nModuleNotFoundError: No module named '_ext.my_lib._my_lib'\r\n\r\nSo it appears to be some issue in Torch ffi api on windows? Do you know any workarounds?"}