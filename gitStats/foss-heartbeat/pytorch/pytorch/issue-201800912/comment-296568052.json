{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/296568052", "html_url": "https://github.com/pytorch/pytorch/issues/494#issuecomment-296568052", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/494", "id": 296568052, "node_id": "MDEyOklzc3VlQ29tbWVudDI5NjU2ODA1Mg==", "user": {"login": "CodesInChaos", "id": 320473, "node_id": "MDQ6VXNlcjMyMDQ3Mw==", "avatar_url": "https://avatars1.githubusercontent.com/u/320473?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CodesInChaos", "html_url": "https://github.com/CodesInChaos", "followers_url": "https://api.github.com/users/CodesInChaos/followers", "following_url": "https://api.github.com/users/CodesInChaos/following{/other_user}", "gists_url": "https://api.github.com/users/CodesInChaos/gists{/gist_id}", "starred_url": "https://api.github.com/users/CodesInChaos/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CodesInChaos/subscriptions", "organizations_url": "https://api.github.com/users/CodesInChaos/orgs", "repos_url": "https://api.github.com/users/CodesInChaos/repos", "events_url": "https://api.github.com/users/CodesInChaos/events{/privacy}", "received_events_url": "https://api.github.com/users/CodesInChaos/received_events", "type": "User", "site_admin": false}, "created_at": "2017-04-24T08:08:01Z", "updated_at": "2017-04-24T08:08:01Z", "author_association": "NONE", "body_html": "<p>Don't just indiscriminately replace <code>long</code> with <code>int64_t</code>. Some of them should always be 64 bits, some of them should be 32 or 64 bit depending on the platform.</p>\n<p>A rough guideline for when to use which type:</p>\n<ul>\n<li>\n<p><code>uint64_t</code> / <code>int64_t</code>- Use these when you need 64 bits, regardless of architecture. e.g. when you want 64-bit tensor elements.</p>\n<p>(You could also consider <code>(u)int_least64_t</code> and <code>(u)int_fast64_t</code> for improved portability to exotic platforms, but I don't think it's worth the bother at this point.)</p>\n</li>\n<li>\n<p><code>uintptr_t</code> / <code>intptr_t</code> - Use these when storing a pointer as integer.</p>\n</li>\n<li>\n<p><code>size_t</code> / <code>ptrdiff_t</code> - Use these for array sizes and indexes.</p>\n<p>If you're lazy, you could use <code>(u)intptr_t</code> instead, since these should be the same size as pointers on most flat-memory-space architectures.</p>\n</li>\n</ul>", "body_text": "Don't just indiscriminately replace long with int64_t. Some of them should always be 64 bits, some of them should be 32 or 64 bit depending on the platform.\nA rough guideline for when to use which type:\n\n\nuint64_t / int64_t- Use these when you need 64 bits, regardless of architecture. e.g. when you want 64-bit tensor elements.\n(You could also consider (u)int_least64_t and (u)int_fast64_t for improved portability to exotic platforms, but I don't think it's worth the bother at this point.)\n\n\nuintptr_t / intptr_t - Use these when storing a pointer as integer.\n\n\nsize_t / ptrdiff_t - Use these for array sizes and indexes.\nIf you're lazy, you could use (u)intptr_t instead, since these should be the same size as pointers on most flat-memory-space architectures.", "body": "Don't just indiscriminately replace `long` with `int64_t`. Some of them should always be 64 bits, some of them should be 32 or 64 bit depending on the platform.\r\n\r\nA rough guideline for when to use which type:\r\n\r\n* `uint64_t` / `int64_t`- Use these when you need 64 bits, regardless of architecture. e.g. when you want 64-bit tensor elements.\r\n\r\n   (You could also consider `(u)int_least64_t` and `(u)int_fast64_t` for improved portability to exotic platforms, but I don't think it's worth the bother at this point.)\r\n* `uintptr_t` / `intptr_t` - Use these when storing a pointer as integer.\r\n* `size_t` / `ptrdiff_t` - Use these for array sizes and indexes.\r\n\r\n    If you're lazy, you could use `(u)intptr_t` instead, since these should be the same size as pointers on most flat-memory-space architectures."}