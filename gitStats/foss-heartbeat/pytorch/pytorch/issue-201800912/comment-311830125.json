{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/311830125", "html_url": "https://github.com/pytorch/pytorch/issues/494#issuecomment-311830125", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/494", "id": 311830125, "node_id": "MDEyOklzc3VlQ29tbWVudDMxMTgzMDEyNQ==", "user": {"login": "devinbostIL", "id": 19719649, "node_id": "MDQ6VXNlcjE5NzE5NjQ5", "avatar_url": "https://avatars2.githubusercontent.com/u/19719649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/devinbostIL", "html_url": "https://github.com/devinbostIL", "followers_url": "https://api.github.com/users/devinbostIL/followers", "following_url": "https://api.github.com/users/devinbostIL/following{/other_user}", "gists_url": "https://api.github.com/users/devinbostIL/gists{/gist_id}", "starred_url": "https://api.github.com/users/devinbostIL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/devinbostIL/subscriptions", "organizations_url": "https://api.github.com/users/devinbostIL/orgs", "repos_url": "https://api.github.com/users/devinbostIL/repos", "events_url": "https://api.github.com/users/devinbostIL/events{/privacy}", "received_events_url": "https://api.github.com/users/devinbostIL/received_events", "type": "User", "site_admin": false}, "created_at": "2017-06-29T00:40:09Z", "updated_at": "2017-06-29T00:40:09Z", "author_association": "NONE", "body_html": "<p>I'm running Windows 10 x64 with CUDA 7.5 and Python 3.6.1, and I ran:<br>\n<code>conda install -c peterjc123 pytorch=0.1.12</code><br>\nfrom a new conda environment, and I was able to run:</p>\n<pre><code># CUDA TEST\nimport torch\nfrom torch.autograd import Variable\nfrom torch import nn\nx = torch.Tensor([1.0])\nxx = x.cuda()\nprint(xx)\n\n# CUDNN TEST\nfrom torch.backends import cudnn\nprint(cudnn.is_acceptable(xx))\n\nword_embedding = nn.Embedding(10, 300).cuda()\nbio_embedding = nn.Embedding(10, 32).cuda()\n# a batch of 2 samples of 4 indices each\nword_input = Variable(torch.LongTensor([[1,2,4,5],[4,3,2,9]]).cuda())\nbio_input = Variable(torch.LongTensor([[1,2,4,5],[4,3,2,9]]).cuda())\nwb = word_embedding(word_input)\nbb = bio_embedding(bio_input)\n\ninput_emd = torch.cat((wb, bb), dim=2)\nprint(input_emd.size())\nloss = input_emd.sum()\nprint(loss)\nloss.backward()\n</code></pre>\n<p>without any errors (to my astonishment).</p>", "body_text": "I'm running Windows 10 x64 with CUDA 7.5 and Python 3.6.1, and I ran:\nconda install -c peterjc123 pytorch=0.1.12\nfrom a new conda environment, and I was able to run:\n# CUDA TEST\nimport torch\nfrom torch.autograd import Variable\nfrom torch import nn\nx = torch.Tensor([1.0])\nxx = x.cuda()\nprint(xx)\n\n# CUDNN TEST\nfrom torch.backends import cudnn\nprint(cudnn.is_acceptable(xx))\n\nword_embedding = nn.Embedding(10, 300).cuda()\nbio_embedding = nn.Embedding(10, 32).cuda()\n# a batch of 2 samples of 4 indices each\nword_input = Variable(torch.LongTensor([[1,2,4,5],[4,3,2,9]]).cuda())\nbio_input = Variable(torch.LongTensor([[1,2,4,5],[4,3,2,9]]).cuda())\nwb = word_embedding(word_input)\nbb = bio_embedding(bio_input)\n\ninput_emd = torch.cat((wb, bb), dim=2)\nprint(input_emd.size())\nloss = input_emd.sum()\nprint(loss)\nloss.backward()\n\nwithout any errors (to my astonishment).", "body": "I'm running Windows 10 x64 with CUDA 7.5 and Python 3.6.1, and I ran:\r\n`conda install -c peterjc123 pytorch=0.1.12`\r\nfrom a new conda environment, and I was able to run:\r\n\r\n```\r\n# CUDA TEST\r\nimport torch\r\nfrom torch.autograd import Variable\r\nfrom torch import nn\r\nx = torch.Tensor([1.0])\r\nxx = x.cuda()\r\nprint(xx)\r\n\r\n# CUDNN TEST\r\nfrom torch.backends import cudnn\r\nprint(cudnn.is_acceptable(xx))\r\n\r\nword_embedding = nn.Embedding(10, 300).cuda()\r\nbio_embedding = nn.Embedding(10, 32).cuda()\r\n# a batch of 2 samples of 4 indices each\r\nword_input = Variable(torch.LongTensor([[1,2,4,5],[4,3,2,9]]).cuda())\r\nbio_input = Variable(torch.LongTensor([[1,2,4,5],[4,3,2,9]]).cuda())\r\nwb = word_embedding(word_input)\r\nbb = bio_embedding(bio_input)\r\n\r\ninput_emd = torch.cat((wb, bb), dim=2)\r\nprint(input_emd.size())\r\nloss = input_emd.sum()\r\nprint(loss)\r\nloss.backward()\r\n```\r\nwithout any errors (to my astonishment). \r\n"}