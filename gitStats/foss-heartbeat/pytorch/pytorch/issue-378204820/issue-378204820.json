{"url": "https://api.github.com/repos/pytorch/pytorch/issues/13663", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/13663/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/13663/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/13663/events", "html_url": "https://github.com/pytorch/pytorch/issues/13663", "id": 378204820, "node_id": "MDU6SXNzdWUzNzgyMDQ4MjA=", "number": 13663, "title": "A model for 2D pose estimation is not trained well on RTX 2080 Ti", "user": {"login": "grayish", "id": 10613466, "node_id": "MDQ6VXNlcjEwNjEzNDY2", "avatar_url": "https://avatars2.githubusercontent.com/u/10613466?v=4", "gravatar_id": "", "url": "https://api.github.com/users/grayish", "html_url": "https://github.com/grayish", "followers_url": "https://api.github.com/users/grayish/followers", "following_url": "https://api.github.com/users/grayish/following{/other_user}", "gists_url": "https://api.github.com/users/grayish/gists{/gist_id}", "starred_url": "https://api.github.com/users/grayish/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/grayish/subscriptions", "organizations_url": "https://api.github.com/users/grayish/orgs", "repos_url": "https://api.github.com/users/grayish/repos", "events_url": "https://api.github.com/users/grayish/events{/privacy}", "received_events_url": "https://api.github.com/users/grayish/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-11-07T09:25:16Z", "updated_at": "2018-11-19T00:15:04Z", "closed_at": "2018-11-12T18:41:51Z", "author_association": "NONE", "body_html": "<h2><g-emoji class=\"g-emoji\" alias=\"bug\" fallback-src=\"https://assets-cdn.github.com/images/icons/emoji/unicode/1f41b.png\">\ud83d\udc1b</g-emoji> Bug</h2>\n\n<h3>Training results are not same on same codes between two GPUs, RTX 2080 Ti and GTX 1080 Ti.</h3>\n<p>I work on 2D pose estimation from a single image.<br>\nWith RTX 2080 Ti, the stacked hourglass model shows the PCKh@0.5 score (accuracy measurement in pose estimation) at 4.58% after one day training. However, with GTX 1080 Ti, it shows the PCKh@0.5 score at 76.12% after 16 hours training.</p>\n<p>The stacked hourglass model consists of nn.Conv2D, nn.BatchNorm2D, and nn.ReLU modules. In the training sequence, I used nn.MSELoss as criterion and optim.RMSprop as optimizer.</p>\n<h2>To Reproduce</h2>\n<p>Steps to reproduce the behavior:</p>\n<ol>\n<li>download MPII dataset (<a href=\"http://human-pose.mpi-inf.mpg.de/\" rel=\"nofollow\">http://human-pose.mpi-inf.mpg.de/</a>)</li>\n<li>Clone bearpaw's pytorch-pose repository (<a href=\"https://github.com/bearpaw/pytorch-pose\">https://github.com/bearpaw/pytorch-pose</a>) with submodule</li>\n</ol>\n<pre><code>git clone --recursive https://github.com/bearpaw/pytorch-pose.git\n</code></pre>\n<ol start=\"3\">\n<li>Create a symbolic link to the images directory of the MPII dataset:</li>\n</ol>\n<pre><code>ln -s PATH_TO_MPII_IMAGES_DIR data/mpii/images\n</code></pre>\n<ol start=\"4\">\n<li>Run the following command in terminal to train the stacked hourglass model on MPII</li>\n</ol>\n<pre><code>CUDA_VISIBLE_DEVICES=0 python example/mpii.py -a hg --stacks 2 --blocks 1 --checkpoint checkpoint/mpii/hg_s2_b1\n</code></pre>\n\n<p>model code: <a href=\"https://github.com/bearpaw/pytorch-pose/blob/master/pose/models/hourglass.py\">https://github.com/bearpaw/pytorch-pose/blob/master/pose/models/hourglass.py</a><br>\ntraining code: <a href=\"https://github.com/bearpaw/pytorch-pose/blob/master/example/mpii.py\">https://github.com/bearpaw/pytorch-pose/blob/master/example/mpii.py</a></p>\n<h2>Environment</h2>\n<h3>[Computer1 - RTX2080Ti]</h3>\n<p>PyTorch version: 0.3.1.post2<br>\nIs debug build: No<br>\nCUDA used to build PyTorch: 9.0.176</p>\n<p>OS: Ubuntu 18.04.1 LTS<br>\nGCC version: (Ubuntu 7.3.0-27ubuntu1~18.04) 7.3.0<br>\nCMake version: version 3.10.2</p>\n<p>Python version: 2.7<br>\nIs CUDA available: Yes<br>\nCUDA runtime version: 10.0.130<br>\nGPU models and configuration:<br>\nGPU 0: GeForce RTX 2080 Ti<br>\nGPU 1: GeForce RTX 2080 Ti<br>\n(but I used only GPU 0.)</p>\n<p>Nvidia driver version: 410.73<br>\ncuDNN version: Probably one of the following:<br>\n/usr/local/cuda-10.0/lib64/libcudnn.so.7.3.1<br>\n/usr/local/cuda-10.0/lib64/libcudnn_static.a<br>\n/usr/local/cuda-9.0/lib64/libcudnn.so.7.1.4<br>\n/usr/local/cuda-9.0/lib64/libcudnn_static.a</p>\n<p>Versions of relevant libraries:<br>\n[pip] numpy (1.15.1)<br>\n[pip] numpydoc (0.8.0)<br>\n[pip] torch (0.3.1.post2)<br>\n[pip] torchvision (0.2.0)<br>\n[conda] cuda90                    1.0                  h6433d27_0    pytorch<br>\n[conda] pytorch                   0.3.1           py27_cuda9.0.176_cudnn7.0.5_2  [cuda90]  pytorch<br>\n[conda] torchvision               0.2.0            py27hfb27419_1    pytorch</p>\n<h3>[Computer2 - GTX1080Ti]</h3>\n<p>PyTorch version: 0.3.1.post2<br>\nIs debug build: No<br>\nCUDA used to build PyTorch: 9.0.176</p>\n<p>OS: Ubuntu 18.04.1 LTS<br>\nGCC version: (Ubuntu 7.3.0-27ubuntu1~18.04) 7.3.0<br>\nCMake version: Could not collect</p>\n<p>Python version: 2.7<br>\nIs CUDA available: Yes<br>\nCUDA runtime version: Could not collect<br>\nGPU models and configuration: GPU 0: GeForce GTX 1080 Ti<br>\nNvidia driver version: 410.73<br>\ncuDNN version: Could not collect</p>\n<p>Versions of relevant libraries:<br>\n[pip] numpy (1.15.1)<br>\n[pip] numpydoc (0.8.0)<br>\n[pip] torch (0.3.1.post2)<br>\n[pip] torchvision (0.2.0)<br>\n[conda] cuda90                    1.0                  h6433d27_0    pytorch<br>\n[conda] pytorch                   0.3.1           py27_cuda9.0.176_cudnn7.0.5_2  [cuda90]  pytorch<br>\n[conda] torchvision               0.2.0            py27hfb27419_1    pytorch</p>\n<ul>\n<li>How you installed PyTorch (<code>conda</code>, <code>pip</code>, source):</li>\n</ul>\n<pre><code>conda install -c pytorch pytorch=0.3.1 cuda90 torchvision\n</code></pre>\n<h2>Additional context</h2>\n\n<p>I did additional experiments on PyTorch 0.4.1 with CUDA 9.2 in conda environments. I migrated the model codes to PyTorch 0.4.1 and it was not trained at all.<br>\nAlso, I built PyTorch 1.0  from the source with CUDA10. This version did not work well, too.</p>", "body_text": "\ud83d\udc1b Bug\n\nTraining results are not same on same codes between two GPUs, RTX 2080 Ti and GTX 1080 Ti.\nI work on 2D pose estimation from a single image.\nWith RTX 2080 Ti, the stacked hourglass model shows the PCKh@0.5 score (accuracy measurement in pose estimation) at 4.58% after one day training. However, with GTX 1080 Ti, it shows the PCKh@0.5 score at 76.12% after 16 hours training.\nThe stacked hourglass model consists of nn.Conv2D, nn.BatchNorm2D, and nn.ReLU modules. In the training sequence, I used nn.MSELoss as criterion and optim.RMSprop as optimizer.\nTo Reproduce\nSteps to reproduce the behavior:\n\ndownload MPII dataset (http://human-pose.mpi-inf.mpg.de/)\nClone bearpaw's pytorch-pose repository (https://github.com/bearpaw/pytorch-pose) with submodule\n\ngit clone --recursive https://github.com/bearpaw/pytorch-pose.git\n\n\nCreate a symbolic link to the images directory of the MPII dataset:\n\nln -s PATH_TO_MPII_IMAGES_DIR data/mpii/images\n\n\nRun the following command in terminal to train the stacked hourglass model on MPII\n\nCUDA_VISIBLE_DEVICES=0 python example/mpii.py -a hg --stacks 2 --blocks 1 --checkpoint checkpoint/mpii/hg_s2_b1\n\n\nmodel code: https://github.com/bearpaw/pytorch-pose/blob/master/pose/models/hourglass.py\ntraining code: https://github.com/bearpaw/pytorch-pose/blob/master/example/mpii.py\nEnvironment\n[Computer1 - RTX2080Ti]\nPyTorch version: 0.3.1.post2\nIs debug build: No\nCUDA used to build PyTorch: 9.0.176\nOS: Ubuntu 18.04.1 LTS\nGCC version: (Ubuntu 7.3.0-27ubuntu1~18.04) 7.3.0\nCMake version: version 3.10.2\nPython version: 2.7\nIs CUDA available: Yes\nCUDA runtime version: 10.0.130\nGPU models and configuration:\nGPU 0: GeForce RTX 2080 Ti\nGPU 1: GeForce RTX 2080 Ti\n(but I used only GPU 0.)\nNvidia driver version: 410.73\ncuDNN version: Probably one of the following:\n/usr/local/cuda-10.0/lib64/libcudnn.so.7.3.1\n/usr/local/cuda-10.0/lib64/libcudnn_static.a\n/usr/local/cuda-9.0/lib64/libcudnn.so.7.1.4\n/usr/local/cuda-9.0/lib64/libcudnn_static.a\nVersions of relevant libraries:\n[pip] numpy (1.15.1)\n[pip] numpydoc (0.8.0)\n[pip] torch (0.3.1.post2)\n[pip] torchvision (0.2.0)\n[conda] cuda90                    1.0                  h6433d27_0    pytorch\n[conda] pytorch                   0.3.1           py27_cuda9.0.176_cudnn7.0.5_2  [cuda90]  pytorch\n[conda] torchvision               0.2.0            py27hfb27419_1    pytorch\n[Computer2 - GTX1080Ti]\nPyTorch version: 0.3.1.post2\nIs debug build: No\nCUDA used to build PyTorch: 9.0.176\nOS: Ubuntu 18.04.1 LTS\nGCC version: (Ubuntu 7.3.0-27ubuntu1~18.04) 7.3.0\nCMake version: Could not collect\nPython version: 2.7\nIs CUDA available: Yes\nCUDA runtime version: Could not collect\nGPU models and configuration: GPU 0: GeForce GTX 1080 Ti\nNvidia driver version: 410.73\ncuDNN version: Could not collect\nVersions of relevant libraries:\n[pip] numpy (1.15.1)\n[pip] numpydoc (0.8.0)\n[pip] torch (0.3.1.post2)\n[pip] torchvision (0.2.0)\n[conda] cuda90                    1.0                  h6433d27_0    pytorch\n[conda] pytorch                   0.3.1           py27_cuda9.0.176_cudnn7.0.5_2  [cuda90]  pytorch\n[conda] torchvision               0.2.0            py27hfb27419_1    pytorch\n\nHow you installed PyTorch (conda, pip, source):\n\nconda install -c pytorch pytorch=0.3.1 cuda90 torchvision\n\nAdditional context\n\nI did additional experiments on PyTorch 0.4.1 with CUDA 9.2 in conda environments. I migrated the model codes to PyTorch 0.4.1 and it was not trained at all.\nAlso, I built PyTorch 1.0  from the source with CUDA10. This version did not work well, too.", "body": "## \ud83d\udc1b Bug\r\n\r\n<!-- A clear and concise description of what the bug is. -->\r\n\r\n### Training results are not same on same codes between two GPUs, RTX 2080 Ti and GTX 1080 Ti.\r\nI work on 2D pose estimation from a single image.\r\nWith RTX 2080 Ti, the stacked hourglass model shows the PCKh@0.5 score (accuracy measurement in pose estimation) at 4.58% after one day training. However, with GTX 1080 Ti, it shows the PCKh@0.5 score at 76.12% after 16 hours training.\r\n\r\nThe stacked hourglass model consists of nn.Conv2D, nn.BatchNorm2D, and nn.ReLU modules. In the training sequence, I used nn.MSELoss as criterion and optim.RMSprop as optimizer.\r\n\r\n\r\n## To Reproduce\r\n\r\nSteps to reproduce the behavior:\r\n\r\n1. download MPII dataset (http://human-pose.mpi-inf.mpg.de/)\r\n2. Clone bearpaw's pytorch-pose repository (https://github.com/bearpaw/pytorch-pose) with submodule\r\n```\r\ngit clone --recursive https://github.com/bearpaw/pytorch-pose.git\r\n```\r\n3. Create a symbolic link to the images directory of the MPII dataset:\r\n```\r\nln -s PATH_TO_MPII_IMAGES_DIR data/mpii/images\r\n```\r\n4. Run the following command in terminal to train the stacked hourglass model on MPII\r\n```\r\nCUDA_VISIBLE_DEVICES=0 python example/mpii.py -a hg --stacks 2 --blocks 1 --checkpoint checkpoint/mpii/hg_s2_b1\r\n```\r\n\r\n<!-- If you have a code sample, error messages, stack traces, please provide it here as well -->\r\nmodel code: https://github.com/bearpaw/pytorch-pose/blob/master/pose/models/hourglass.py\r\ntraining code: https://github.com/bearpaw/pytorch-pose/blob/master/example/mpii.py\r\n\r\n## Environment\r\n### [Computer1 - RTX2080Ti]\r\nPyTorch version: 0.3.1.post2\r\nIs debug build: No\r\nCUDA used to build PyTorch: 9.0.176\r\n\r\nOS: Ubuntu 18.04.1 LTS\r\nGCC version: (Ubuntu 7.3.0-27ubuntu1~18.04) 7.3.0\r\nCMake version: version 3.10.2\r\n\r\nPython version: 2.7\r\nIs CUDA available: Yes\r\nCUDA runtime version: 10.0.130\r\nGPU models and configuration: \r\nGPU 0: GeForce RTX 2080 Ti\r\nGPU 1: GeForce RTX 2080 Ti\r\n(but I used only GPU 0.)\r\n\r\nNvidia driver version: 410.73\r\ncuDNN version: Probably one of the following:\r\n/usr/local/cuda-10.0/lib64/libcudnn.so.7.3.1\r\n/usr/local/cuda-10.0/lib64/libcudnn_static.a\r\n/usr/local/cuda-9.0/lib64/libcudnn.so.7.1.4\r\n/usr/local/cuda-9.0/lib64/libcudnn_static.a\r\n\r\nVersions of relevant libraries:\r\n[pip] numpy (1.15.1)\r\n[pip] numpydoc (0.8.0)\r\n[pip] torch (0.3.1.post2)\r\n[pip] torchvision (0.2.0)\r\n[conda] cuda90                    1.0                  h6433d27_0    pytorch\r\n[conda] pytorch                   0.3.1           py27_cuda9.0.176_cudnn7.0.5_2  [cuda90]  pytorch\r\n[conda] torchvision               0.2.0            py27hfb27419_1    pytorch\r\n\r\n\r\n### [Computer2 - GTX1080Ti]\r\nPyTorch version: 0.3.1.post2\r\nIs debug build: No\r\nCUDA used to build PyTorch: 9.0.176\r\n\r\nOS: Ubuntu 18.04.1 LTS\r\nGCC version: (Ubuntu 7.3.0-27ubuntu1~18.04) 7.3.0\r\nCMake version: Could not collect\r\n\r\nPython version: 2.7\r\nIs CUDA available: Yes\r\nCUDA runtime version: Could not collect\r\nGPU models and configuration: GPU 0: GeForce GTX 1080 Ti\r\nNvidia driver version: 410.73\r\ncuDNN version: Could not collect\r\n\r\nVersions of relevant libraries:\r\n[pip] numpy (1.15.1)\r\n[pip] numpydoc (0.8.0)\r\n[pip] torch (0.3.1.post2)\r\n[pip] torchvision (0.2.0)\r\n[conda] cuda90                    1.0                  h6433d27_0    pytorch\r\n[conda] pytorch                   0.3.1           py27_cuda9.0.176_cudnn7.0.5_2  [cuda90]  pytorch\r\n[conda] torchvision               0.2.0            py27hfb27419_1    pytorch\r\n\r\n\r\n - How you installed PyTorch (`conda`, `pip`, source): \r\n```\r\nconda install -c pytorch pytorch=0.3.1 cuda90 torchvision\r\n```\r\n\r\n## Additional context\r\n\r\n<!-- Add any other context about the problem here. -->\r\nI did additional experiments on PyTorch 0.4.1 with CUDA 9.2 in conda environments. I migrated the model codes to PyTorch 0.4.1 and it was not trained at all.\r\nAlso, I built PyTorch 1.0  from the source with CUDA10. This version did not work well, too.\r\n\r\n"}