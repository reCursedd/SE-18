{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/225362773", "pull_request_review_id": 164948678, "id": 225362773, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNTM2Mjc3Mw==", "diff_hunk": "@@ -75,6 +75,69 @@ You do not need to repeatedly install after modifying python files.\n In case you want to reinstall, make sure that you uninstall pytorch first by running `pip uninstall torch`\n and `python setup.py clean`. Then you can install in `build develop` mode again.\n \n+## Codebase structure\n+\n+* [c10](c10) - Core library files that work everywhere (server, mobile)\n+* [aten](aten) - C++ tensor library for PyTorch (no autograd support)\n+  * src\n+    * [TH](aten/src/TH)\n+      [THC](aten/src/THC)\n+      [THNN](aten/src/THNN)\n+      [THCUNN](aten/src/THCUNN) - Legacy library code from the original\n+      Torch.  Try not to add things here; we're slowly porting these to\n+      native.\n+      * generic - Contains actual implementations of operators,\n+        parametrized over `scalar_t`.  Files here get compiled N times\n+        per supported scalar type in PyTorch.\n+    * ATen\n+      * [core](aten/src/ATen/core) - Core functionality of ATen.  This\n+        is migrating to top-level c10 folder.\n+      * [native](aten/src/ATen/native) - Modern implementations of\n+        operators.  If you want to write a new operator, here is where\n+        it should go.  Most CPU operators go in the top level directory,\n+        except for operators which need to be compiled specially; see\n+        cpu below.\n+        * [cpu](aten/src/ATen/native/cpu) - Not actually CPU\n+          implementations of operators, but specifically implementations\n+          which are compiled with processor-specific instructions, like\n+          AVX.  See the README for more details.\n+        * [cuda](aten/src/ATen/native/cuda) - CUDA implementations of\n+          operators.\n+        * [sparse](aten/src/ATen/native/sparse) - CPU and CUDA\n+          implementations of COO sparse tensor operations\n+        * [mkl](aten/src/ATen/native/mkl) [mkldnn](aten/src/ATen/native/mkldnn)\n+          [miopen](aten/src/ATen/native/miopen) [cudnn](aten/src/ATen/native/cudnn)\n+          - implementations of operators which simply bind to some\n+            backend library.\n+* [torch](torch) - The actual PyTorch library.  Everything that is not\n+  in csrc is Python modules, following the PyTorch Python frontend\n+  module structure.\n+  * [csrc](torch/csrc) - C++ files composing the PyTorch library.  Files\n+    in this directory tree are a mix of Python binding code, and C++\n+    heavy lifting.  Consult `setup.py` for the canonical list of Python\n+    binding files; conventionally, they are often prefixed with\n+    `python_`.\n+    * [jit](torch/csrc/jit) - Compiler and frontend for TorchScript JIT\n+      frontend.\n+    * [autograd](torch/csrc/autograd) - Implementation of reverse-mode automatic\n+      differentation\n+    * [api](torch/csrc/api) - The PyTorch C++ frontend.\n+    * [distributed](torch/csrc/distributed) - Distributed training\n+      support for PyTorch.\n+* [tools](tools) - Code generation scripts for the PyTorch library\n+  * [autograd](tools/autograd) - Code generation for autograd.  This\n+    includes definitions of all our derivatives.\n+  * [jit](tools/jit) - Code generation for JIT\n+  * [amd_build](tools/amd_build) - HIPify scripts, for transpiling CUDA\n+    into AMD HIP.\n+* [test](tests) - Python unit tests for PyTorch", "path": "CONTRIBUTING.md", "position": null, "original_position": 59, "commit_id": "22fd8bddb5fe89809da55dd7a5baf079b9cb5b7f", "original_commit_id": "b4cb6fbfb3d0d1e12456c6dcf39fe1b382aee0ac", "user": {"login": "resistor", "id": 9796, "node_id": "MDQ6VXNlcjk3OTY=", "avatar_url": "https://avatars0.githubusercontent.com/u/9796?v=4", "gravatar_id": "", "url": "https://api.github.com/users/resistor", "html_url": "https://github.com/resistor", "followers_url": "https://api.github.com/users/resistor/followers", "following_url": "https://api.github.com/users/resistor/following{/other_user}", "gists_url": "https://api.github.com/users/resistor/gists{/gist_id}", "starred_url": "https://api.github.com/users/resistor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/resistor/subscriptions", "organizations_url": "https://api.github.com/users/resistor/orgs", "repos_url": "https://api.github.com/users/resistor/repos", "events_url": "https://api.github.com/users/resistor/events{/privacy}", "received_events_url": "https://api.github.com/users/resistor/received_events", "type": "User", "site_admin": false}, "body": "Another spot that would be good to flesh out.", "created_at": "2018-10-16T00:48:14Z", "updated_at": "2018-11-23T15:53:04Z", "html_url": "https://github.com/pytorch/pytorch/pull/12693#discussion_r225362773", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/12693", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/225362773"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/12693#discussion_r225362773"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/12693"}}, "body_html": "<p>Another spot that would be good to flesh out.</p>", "body_text": "Another spot that would be good to flesh out."}