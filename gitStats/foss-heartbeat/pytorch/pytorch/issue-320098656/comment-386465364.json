{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/386465364", "html_url": "https://github.com/pytorch/pytorch/pull/7265#issuecomment-386465364", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/7265", "id": 386465364, "node_id": "MDEyOklzc3VlQ29tbWVudDM4NjQ2NTM2NA==", "user": {"login": "vfdev-5", "id": 2459423, "node_id": "MDQ6VXNlcjI0NTk0MjM=", "avatar_url": "https://avatars0.githubusercontent.com/u/2459423?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vfdev-5", "html_url": "https://github.com/vfdev-5", "followers_url": "https://api.github.com/users/vfdev-5/followers", "following_url": "https://api.github.com/users/vfdev-5/following{/other_user}", "gists_url": "https://api.github.com/users/vfdev-5/gists{/gist_id}", "starred_url": "https://api.github.com/users/vfdev-5/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vfdev-5/subscriptions", "organizations_url": "https://api.github.com/users/vfdev-5/orgs", "repos_url": "https://api.github.com/users/vfdev-5/repos", "events_url": "https://api.github.com/users/vfdev-5/events{/privacy}", "received_events_url": "https://api.github.com/users/vfdev-5/received_events", "type": "User", "site_admin": false}, "created_at": "2018-05-03T23:20:06Z", "updated_at": "2018-05-03T23:31:56Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=4583066\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/apaszke\">@apaszke</a> I rechecked my scripts with <code>mp.set_start_method('spawn')</code> and I observe similar behavior as with <code>fork</code> on randomness of the workers.<br>\nActually, even if parent RNG is not inherited in the worker it is not worse, it is even better for randomness of the worker and it keeps parent RNG state before calling <code>_put_indices()</code> and thus keeps batch indices reproducible. But I understand that this leads to undeterministic RNG setup of workers.</p>", "body_text": "@apaszke I rechecked my scripts with mp.set_start_method('spawn') and I observe similar behavior as with fork on randomness of the workers.\nActually, even if parent RNG is not inherited in the worker it is not worse, it is even better for randomness of the worker and it keeps parent RNG state before calling _put_indices() and thus keeps batch indices reproducible. But I understand that this leads to undeterministic RNG setup of workers.", "body": "@apaszke I rechecked my scripts with `mp.set_start_method('spawn')` and I observe similar behavior as with `fork` on randomness of the workers. \r\nActually, even if parent RNG is not inherited in the worker it is not worse, it is even better for randomness of the worker and it keeps parent RNG state before calling `_put_indices()` and thus keeps batch indices reproducible. But I understand that this leads to undeterministic RNG setup of workers."}