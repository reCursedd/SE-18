{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/416659153", "html_url": "https://github.com/pytorch/pytorch/issues/10735#issuecomment-416659153", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/10735", "id": 416659153, "node_id": "MDEyOklzc3VlQ29tbWVudDQxNjY1OTE1Mw==", "user": {"login": "realdoug", "id": 2383488, "node_id": "MDQ6VXNlcjIzODM0ODg=", "avatar_url": "https://avatars1.githubusercontent.com/u/2383488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/realdoug", "html_url": "https://github.com/realdoug", "followers_url": "https://api.github.com/users/realdoug/followers", "following_url": "https://api.github.com/users/realdoug/following{/other_user}", "gists_url": "https://api.github.com/users/realdoug/gists{/gist_id}", "starred_url": "https://api.github.com/users/realdoug/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/realdoug/subscriptions", "organizations_url": "https://api.github.com/users/realdoug/orgs", "repos_url": "https://api.github.com/users/realdoug/repos", "events_url": "https://api.github.com/users/realdoug/events{/privacy}", "received_events_url": "https://api.github.com/users/realdoug/received_events", "type": "User", "site_admin": false}, "created_at": "2018-08-28T16:48:38Z", "updated_at": "2018-08-28T19:54:29Z", "author_association": "CONTRIBUTOR", "body_html": "<p>I was thinking of going through and knocking this one out as a good first ticket.  To clarify: python classes do not typically expose a <code>__file__</code> attribute.  <code>torch._C</code> is a module and the <code>__file__</code> attr points to the .so file (which is understandably not useful to a dev).</p>\n<p>So, the task would be to accomplish the equivalent of (see below), but for every class &amp; function that is defined in the _C module?</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">class</span> <span class=\"pl-en\">MyClass</span>:\n    <span class=\"pl-k\">def</span> <span class=\"pl-c1\">__init__</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>):\n        <span class=\"pl-c1\">...</span>\n\n    <span class=\"pl-c1\">...</span>    \n\n    <span class=\"pl-k\">def</span> <span class=\"pl-c1\">__file__</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>):\n        <span class=\"pl-k\">return</span> <span class=\"pl-s\">f</span><span class=\"pl-pds\">'</span><span class=\"pl-c1\">{</span><span class=\"pl-c1\">ROOT_PATH</span><span class=\"pl-c1\">}</span><span class=\"pl-s\">/this_file.py</span><span class=\"pl-pds\">'</span>\n\n   <span class=\"pl-k\">def</span> <span class=\"pl-en\">__line__</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>):\n        <span class=\"pl-k\">return</span> <span class=\"pl-c1\">100</span></pre></div>\n<p>To check i've got this right: you'd expect someone to be able to call <code>torch._C._VariableFunctions.__file__</code> and get <code>/Users/dougfriedman/git/pytorch/tools/autograd/templates/python_torch_functions.cpp</code>?</p>", "body_text": "I was thinking of going through and knocking this one out as a good first ticket.  To clarify: python classes do not typically expose a __file__ attribute.  torch._C is a module and the __file__ attr points to the .so file (which is understandably not useful to a dev).\nSo, the task would be to accomplish the equivalent of (see below), but for every class & function that is defined in the _C module?\nclass MyClass:\n    def __init__(self):\n        ...\n\n    ...    \n\n    def __file__(self):\n        return f'{ROOT_PATH}/this_file.py'\n\n   def __line__(self):\n        return 100\nTo check i've got this right: you'd expect someone to be able to call torch._C._VariableFunctions.__file__ and get /Users/dougfriedman/git/pytorch/tools/autograd/templates/python_torch_functions.cpp?", "body": "I was thinking of going through and knocking this one out as a good first ticket.  To clarify: python classes do not typically expose a ```__file__``` attribute.  ```torch._C``` is a module and the ```__file__``` attr points to the .so file (which is understandably not useful to a dev).  \r\n\r\nSo, the task would be to accomplish the equivalent of (see below), but for every class & function that is defined in the _C module?\r\n\r\n```python\r\nclass MyClass:\r\n    def __init__(self):\r\n        ...\r\n\r\n    ...    \r\n\r\n    def __file__(self):\r\n        return f'{ROOT_PATH}/this_file.py'\r\n\r\n   def __line__(self):\r\n        return 100\r\n```\r\n\r\nTo check i've got this right: you'd expect someone to be able to call ```torch._C._VariableFunctions.__file__``` and get ```/Users/dougfriedman/git/pytorch/tools/autograd/templates/python_torch_functions.cpp```?"}