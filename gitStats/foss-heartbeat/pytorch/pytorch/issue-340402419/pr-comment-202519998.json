{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/202519998", "pull_request_review_id": 137243269, "id": 202519998, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMjUxOTk5OA==", "diff_hunk": "@@ -0,0 +1,79 @@\n+#include <memory>\n+\n+#include <ATen/ATenGeneral.h>\n+\n+namespace at {\n+\n+using DeleterFnPtr = void(*)(void*);\n+\n+namespace detail {\n+\n+// Does not delete anything\n+AT_API void deleteNothing(void*);\n+\n+// A detail::UniqueVoidPtr is an owning smart pointer like unique_ptr, but\n+// with three major differences:", "path": "aten/src/ATen/detail/UniqueVoidPtr.h", "position": 15, "original_position": 15, "commit_id": "ebbe7907bc313f1d259d85e91bcb72ebafbfd252", "original_commit_id": "220cf252ae3ce3c77aabec8ae5ee7f8c477f5167", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "new text\r\n\r\n```\r\n//    2) It is specialized for a function pointer deleter\r\n//       void(void* ctx); i.e., the deleter doesn't take a\r\n//       reference to the data, just to a context pointer\r\n//       (erased as void*).  In fact, internally, this pointer\r\n//       is implemented as having an owning reference to\r\n//       context, and a non-owning reference to data; this is why\r\n//       you release_context(), not release() (the conventional\r\n//       API for release() wouldn't give you enough information\r\n//       to properly dispose of the object later.)\r\n//\r\n\r\n```", "created_at": "2018-07-14T16:54:33Z", "updated_at": "2018-11-23T15:47:25Z", "html_url": "https://github.com/pytorch/pytorch/pull/9358#discussion_r202519998", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/9358", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/202519998"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/9358#discussion_r202519998"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/9358"}}, "body_html": "<p>new text</p>\n<pre><code>//    2) It is specialized for a function pointer deleter\n//       void(void* ctx); i.e., the deleter doesn't take a\n//       reference to the data, just to a context pointer\n//       (erased as void*).  In fact, internally, this pointer\n//       is implemented as having an owning reference to\n//       context, and a non-owning reference to data; this is why\n//       you release_context(), not release() (the conventional\n//       API for release() wouldn't give you enough information\n//       to properly dispose of the object later.)\n//\n\n</code></pre>", "body_text": "new text\n//    2) It is specialized for a function pointer deleter\n//       void(void* ctx); i.e., the deleter doesn't take a\n//       reference to the data, just to a context pointer\n//       (erased as void*).  In fact, internally, this pointer\n//       is implemented as having an owning reference to\n//       context, and a non-owning reference to data; this is why\n//       you release_context(), not release() (the conventional\n//       API for release() wouldn't give you enough information\n//       to properly dispose of the object later.)\n//", "in_reply_to_id": 202473019}