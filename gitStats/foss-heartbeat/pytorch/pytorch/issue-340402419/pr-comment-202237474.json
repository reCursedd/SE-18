{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/202237474", "pull_request_review_id": 136898611, "id": 202237474, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMjIzNzQ3NA==", "diff_hunk": "@@ -3,14 +3,126 @@\n #include <memory>\n #include <stddef.h>\n \n-#include \"ATen/Retainable.h\"\n+#include <ATen/Error.h>\n+#include <ATen/Retainable.h>\n+#include <ATen/Device.h>\n \n namespace at {\n \n+// Note [Supervisor deleter]\n+// ~~~~~~~~~~~~~~~~~~~~~~~~~\n+// SupervisorPtr solves a common problem for allocators of tensor data, which\n+// is that the data pointer (e.g., float*) which you are interested in, is not\n+// the same as the metadata pointer (e.g., DLManagedTensor) which you need\n+// to actually deallocate the data.  Under a conventional deleter design, you\n+// have to store extra context in the deleter (the metadata pointer) so that\n+// you can actually delete the right thing.  Implementing this with standard\n+// C++ is somewhat error-prone: if you use a std::unique_ptr to manage tensors,\n+// the deleter will not be called if the data pointer is nullptr, which can\n+// cause a leak if the metadata pointer is non-null (and the deleter is\n+// responsible for freeing both the data pointer and the metadata pointer).\n+//\n+// We take a different approach.  The \"metadata supervisor\" situation is common\n+// enough that we have organized our deleter strategy entirely around it:\n+// instead of trying to make the deleter for the data pointer handle all the\n+// heavy lifting, the data pointer is *non-owning*, and instead there is a\n+// (type-erased) supervisor pointer which actually handles deletion.  For simple\n+// cases, the supervisor pointer is the same as the data pointer, but if\n+// there is some extra metadata, the supervisor pointer points there.\n+//\n+// There is something of a pattern to writing these; check THAllocator.{h,cpp}\n+// for some examples.\n+\n+using DeleterFnPtr = void(*)(void*);\n+using SupervisorPtr = std::unique_ptr<void, DeleterFnPtr>;", "path": "aten/src/ATen/Allocator.h", "position": null, "original_position": 36, "commit_id": "ebbe7907bc313f1d259d85e91bcb72ebafbfd252", "original_commit_id": "1734ec171b326ee5d13adbddc1f7245c353d5e2a", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "I don't think it makes things simpler, because we truly have sole ownership here. It's fine for SupervisorPtr's deleter to not get called if the supervisor is null; then there really is nothing to free :)", "created_at": "2018-07-13T03:51:36Z", "updated_at": "2018-11-23T15:47:17Z", "html_url": "https://github.com/pytorch/pytorch/pull/9358#discussion_r202237474", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/9358", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/202237474"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/9358#discussion_r202237474"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/9358"}}, "body_html": "<p>I don't think it makes things simpler, because we truly have sole ownership here. It's fine for SupervisorPtr's deleter to not get called if the supervisor is null; then there really is nothing to free :)</p>", "body_text": "I don't think it makes things simpler, because we truly have sole ownership here. It's fine for SupervisorPtr's deleter to not get called if the supervisor is null; then there really is nothing to free :)", "in_reply_to_id": 202202275}