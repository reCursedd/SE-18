{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/202520025", "pull_request_review_id": 137243294, "id": 202520025, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMjUyMDAyNQ==", "diff_hunk": "@@ -3,14 +3,98 @@\n #include <memory>\n #include <stddef.h>\n \n-#include \"ATen/Retainable.h\"\n+#include <ATen/Error.h>\n+#include <ATen/Retainable.h>\n+#include <ATen/Device.h>\n+#include <ATen/detail/UniqueVoidPtr.h>\n \n namespace at {\n \n+// A DataPtr is a unique pointer (with an attached deleter and some\n+// context for the deleter) to some memory, which also records what\n+// device is for its data.\n+//\n+// nullptr DataPtrs can still have a nontrivial device; this allows\n+// us to treat zero-size allocations uniformly with non-zero allocations.\n+//\n+class DataPtr {\n+private:\n+  detail::UniqueVoidPtr ptr_;\n+  Device device_;\n+public:\n+  // Choice of CPU here is arbitrary; if there's an \"undefined\" device\n+  // we could use that too\n+  DataPtr() : ptr_(), device_(kCPU) {}\n+  DataPtr(void* data, Device device)\n+    : ptr_(data), device_(device) {}\n+  DataPtr(void* data, void* ctx, DeleterFnPtr ctx_deleter, Device device)\n+    : ptr_(data, ctx, ctx_deleter), device_(device) {}\n+  void* operator->() const { return ptr_.get(); }\n+  void* get() const { return ptr_.get(); }\n+  void* get_context() const { return ptr_.get_context(); }\n+  void* release_context() { return ptr_.release_context(); }\n+  operator bool() const { return static_cast<bool>(ptr_); }\n+  template <typename T>\n+  T* cast_context(DeleterFnPtr expected_deleter) const {\n+    return ptr_.cast_context<T>(expected_deleter);\n+  }\n+  Device device() const { return device_; }\n+};\n+\n+// NB: Device is NOT tested for here; a CUDA nullptr is as much a nullptr as a\n+// CPU nullptr\n+\n+inline bool operator==(const at::DataPtr& dp, std::nullptr_t) noexcept { return !dp; }\n+inline bool operator==(std::nullptr_t, const at::DataPtr& dp) noexcept { return !dp; }\n+inline bool operator!=(const at::DataPtr& dp, std::nullptr_t) noexcept { return dp; }\n+inline bool operator!=(std::nullptr_t, const at::DataPtr& dp) noexcept { return dp; }\n+\n+// Note [raw_allocate/raw_deallocate and Thrust]\n+// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+// Thrust's support for custom allocators requires us to write something\n+// like this:\n+//\n+//  class ThrustAllocator {\n+//    char* allocate(size_t);\n+//    void deallocate(char*, size_t);\n+//  };\n+//\n+// This is not good for our unique_ptr based allocator interface, as\n+// there is no way to get to the context when we free.\n+//\n+// However, in some cases the context is exactly the same as\n+// the data pointer.  In this case, we can support the \"raw\"\n+// allocate and deallocate interface.  This is what\n+// raw_deleter signifies.  By default, it returns a nullptr, which means that\n+// the raw interface is not implemented.  Be sure to implement it whenever", "path": "aten/src/ATen/Allocator.h", "position": 68, "original_position": 68, "commit_id": "ebbe7907bc313f1d259d85e91bcb72ebafbfd252", "original_commit_id": "220cf252ae3ce3c77aabec8ae5ee7f8c477f5167", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "new text\r\n\r\n```\r\n-// possible.\r\n+// possible, or the raw interface will incorrectly reported as unsupported,\r\n+// when it is actually possible.\r\n```", "created_at": "2018-07-14T16:55:25Z", "updated_at": "2018-11-23T15:47:25Z", "html_url": "https://github.com/pytorch/pytorch/pull/9358#discussion_r202520025", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/9358", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/202520025"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/9358#discussion_r202520025"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/9358"}}, "body_html": "<p>new text</p>\n<pre><code>-// possible.\n+// possible, or the raw interface will incorrectly reported as unsupported,\n+// when it is actually possible.\n</code></pre>", "body_text": "new text\n-// possible.\n+// possible, or the raw interface will incorrectly reported as unsupported,\n+// when it is actually possible.", "in_reply_to_id": 202473561}