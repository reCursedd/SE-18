{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/202398799", "pull_request_review_id": 137077382, "id": 202398799, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMjM5ODc5OQ==", "diff_hunk": "@@ -3,14 +3,153 @@\n #include <memory>\n #include <stddef.h>\n \n-#include \"ATen/Retainable.h\"\n+#include <ATen/Error.h>\n+#include <ATen/Retainable.h>\n+#include <ATen/Device.h>\n \n namespace at {\n \n+// Note [Supervisor deleter]\n+// ~~~~~~~~~~~~~~~~~~~~~~~~~\n+// SupervisorPtr solves a common problem for allocators of tensor data, which\n+// is that the data pointer (e.g., float*) which you are interested in, is not\n+// the same as the metadata pointer (e.g., DLManagedTensor) which you need\n+// to actually deallocate the data.  Under a conventional deleter design, you\n+// have to store extra context in the deleter (the metadata pointer) so that\n+// you can actually delete the right thing.  Implementing this with standard\n+// C++ is somewhat error-prone: if you use a std::unique_ptr to manage tensors,\n+// the deleter will not be called if the data pointer is nullptr, which can\n+// cause a leak if the metadata pointer is non-null (and the deleter is\n+// responsible for freeing both the data pointer and the metadata pointer).\n+//\n+// We take a different approach.  The \"metadata supervisor\" situation is common\n+// enough that we have organized our deleter strategy entirely around it:\n+// instead of trying to make the deleter for the data pointer handle all the\n+// heavy lifting, the data pointer is *non-owning*, and instead there is a\n+// (type-erased) supervisor pointer which actually handles deletion.  For simple\n+// cases, the supervisor pointer is the same as the data pointer, but if\n+// there is some extra metadata, the supervisor pointer points there.\n+//\n+// There is something of a pattern to writing these; check THAllocator.{h,cpp}\n+// for some examples.\n+\n+using DeleterFnPtr = void(*)(void*);\n+using SupervisorPtr = std::unique_ptr<void, DeleterFnPtr>;\n+\n+// Does not delete anything\n+AT_API void deleteNothing(void*);\n+// Mints a SupervisorPtr that doesn't do anything.  You must\n+// use this, not a nullptr, when you want a view.  However,\n+// this compares equal to nullptr.\n+AT_API SupervisorPtr nonOwningSupervisorPtr();\n+\n+class SupervisedPtr {\n+private:\n+  // Lifetime tied to supervisor_\n+  void* data_;\n+  SupervisorPtr supervisor_;\n+public:\n+  SupervisedPtr() : data_(nullptr), supervisor_(nonOwningSupervisorPtr()) {}\n+  SupervisedPtr(void* data, SupervisorPtr&& supervisor)\n+    : data_(data), supervisor_(std::move(supervisor)) {}\n+  void* operator->() const { return data_; }\n+  void* get() const { return data_; }\n+  void* get_supervisor() const { return supervisor_.get(); }\n+  void* release_supervisor() { return supervisor_.release(); }\n+  template <typename T>\n+  T* cast_supervisor(DeleterFnPtr expected_deleter) const {\n+    if (get_deleter() != expected_deleter) return nullptr;\n+    return static_cast<T*>(get_supervisor());\n+  }\n+  operator bool() const { return data_ || supervisor_; }\n+  DeleterFnPtr get_deleter() const { return supervisor_.get_deleter(); }\n+};\n+\n+// A DevicePtr is a SupervisedPtr that also records what device it's memory\n+// is stored on.\n+\n+class DevicePtr {", "path": "aten/src/ATen/Allocator.h", "position": null, "original_position": 70, "commit_id": "ebbe7907bc313f1d259d85e91bcb72ebafbfd252", "original_commit_id": "40ba631651908d1d22ff0912e8079a1bbb5729bf", "user": {"login": "gchanan", "id": 3768583, "node_id": "MDQ6VXNlcjM3Njg1ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3768583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gchanan", "html_url": "https://github.com/gchanan", "followers_url": "https://api.github.com/users/gchanan/followers", "following_url": "https://api.github.com/users/gchanan/following{/other_user}", "gists_url": "https://api.github.com/users/gchanan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gchanan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gchanan/subscriptions", "organizations_url": "https://api.github.com/users/gchanan/orgs", "repos_url": "https://api.github.com/users/gchanan/repos", "events_url": "https://api.github.com/users/gchanan/events{/privacy}", "received_events_url": "https://api.github.com/users/gchanan/received_events", "type": "User", "site_admin": false}, "body": "maybe DeviceAwarePtr is a better name?  This is actually a pointer to a device, it's a pointer that's aware of the device it's on.", "created_at": "2018-07-13T16:02:17Z", "updated_at": "2018-11-23T15:47:19Z", "html_url": "https://github.com/pytorch/pytorch/pull/9358#discussion_r202398799", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/9358", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/202398799"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/9358#discussion_r202398799"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/9358"}}, "body_html": "<p>maybe DeviceAwarePtr is a better name?  This is actually a pointer to a device, it's a pointer that's aware of the device it's on.</p>", "body_text": "maybe DeviceAwarePtr is a better name?  This is actually a pointer to a device, it's a pointer that's aware of the device it's on."}