{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/359207066", "html_url": "https://github.com/pytorch/pytorch/issues/4449#issuecomment-359207066", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/4449", "id": 359207066, "node_id": "MDEyOklzc3VlQ29tbWVudDM1OTIwNzA2Ng==", "user": {"login": "nanand2", "id": 4358201, "node_id": "MDQ6VXNlcjQzNTgyMDE=", "avatar_url": "https://avatars1.githubusercontent.com/u/4358201?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nanand2", "html_url": "https://github.com/nanand2", "followers_url": "https://api.github.com/users/nanand2/followers", "following_url": "https://api.github.com/users/nanand2/following{/other_user}", "gists_url": "https://api.github.com/users/nanand2/gists{/gist_id}", "starred_url": "https://api.github.com/users/nanand2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nanand2/subscriptions", "organizations_url": "https://api.github.com/users/nanand2/orgs", "repos_url": "https://api.github.com/users/nanand2/repos", "events_url": "https://api.github.com/users/nanand2/events{/privacy}", "received_events_url": "https://api.github.com/users/nanand2/received_events", "type": "User", "site_admin": false}, "created_at": "2018-01-20T22:27:38Z", "updated_at": "2018-01-20T22:29:42Z", "author_association": "NONE", "body_html": "<p>For a single 2d matrix it's easy to define a custom function, but it would be nice to have a batched version</p>\n<p>`<br>\nclass LogDet(torch.autograd.Function):</p>\n<pre><code>def forward(self, input):\n    self.save_for_backward(input)\n    return torch.det(Variable(input, requires_grad=True)).data\n\ndef backward(self, grad_output):\n    input, = self.saved_tensors\n    grad_input = grad_output*torch.inverse(input.transpose(0,1))\n    return  grad_input\n</code></pre>\n<p>`</p>", "body_text": "For a single 2d matrix it's easy to define a custom function, but it would be nice to have a batched version\n`\nclass LogDet(torch.autograd.Function):\ndef forward(self, input):\n    self.save_for_backward(input)\n    return torch.det(Variable(input, requires_grad=True)).data\n\ndef backward(self, grad_output):\n    input, = self.saved_tensors\n    grad_input = grad_output*torch.inverse(input.transpose(0,1))\n    return  grad_input\n\n`", "body": "For a single 2d matrix it's easy to define a custom function, but it would be nice to have a batched version  \r\n\r\n`\r\nclass LogDet(torch.autograd.Function):\r\n\r\n    def forward(self, input):\r\n        self.save_for_backward(input)\r\n        return torch.det(Variable(input, requires_grad=True)).data\r\n\r\n    def backward(self, grad_output):\r\n        input, = self.saved_tensors\r\n        grad_input = grad_output*torch.inverse(input.transpose(0,1))\r\n        return  grad_input\r\n`\r\n\r\n\r\n"}