{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/138765271", "pull_request_review_id": 62605559, "id": 138765271, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzODc2NTI3MQ==", "diff_hunk": "@@ -1,196 +1,45 @@\n from torch.autograd import Function, Variable\n \n-class ConstantPad1d(Function):\n \n-    @staticmethod\n-    def forward(ctx, input, pad, value=0):\n-        assert input.dim() == 3, 'only 3D supported for padding'\n-        ctx.pad = pad\n-        ctx.value = value\n-        pad_l, pad_r = ctx.pad\n-        w = input.size(2) + pad_l + pad_r\n-        assert w > 0, 'input is too small'\n-\n-        ctx.input_size = input.size()\n-\n-        # crop input if necessary\n-        output = input.new(input.size(0), input.size(1), w).fill_(ctx.value)\n-        c_input = input\n-        if pad_l < 0:\n-            c_input = c_input.narrow(2, -pad_l, c_input.size(2) + pad_l)\n-        if pad_r < 0:\n-            c_input = c_input.narrow(2, 0, c_input.size(2) + pad_r)\n-\n-        # crop output if necessary\n-        c_output = output\n-        if pad_l > 0:\n-            c_output = c_output.narrow(2, pad_l, c_output.size(2) - pad_l)\n-        if pad_r > 0:\n-            c_output = c_output.narrow(2, 0, c_output.size(2) - pad_r)\n-        c_output.copy_(c_input)\n-        return output\n-\n-    @staticmethod\n-    def backward(ctx, grad_output):\n-        pad_l, pad_r = ctx.pad\n-\n-        grad_input = Variable(grad_output.data.new(ctx.input_size).zero_())\n-        grad_input_slices = [slice(0, x,) for x in ctx.input_size]\n-\n-        def narrow_slice(dim, start, length):\n-            grad_input_slices[dim] = (slice(grad_input_slices[dim].start + start,\n-                                            grad_input_slices[dim].start + start + length))\n-\n-        def slice_length(dim):\n-            return grad_input_slices[dim].stop - grad_input_slices[dim].start\n-\n-        #  crop grad_input if necessary\n-        if pad_l < 0:\n-            narrow_slice(2, -pad_l, slice_length(2) + pad_l)\n-        if pad_r < 0:\n-            narrow_slice(2, 0, slice_length(2) + pad_r)\n-\n-        # crop grad_output if necessary\n-        cg_output = grad_output\n-        if pad_l > 0:\n-            cg_output = cg_output.narrow(2, pad_l, cg_output.size(2) - pad_l)\n-        if pad_r > 0:\n-            cg_output = cg_output.narrow(2, 0, cg_output.size(2) - pad_r)\n-        gis = tuple(grad_input_slices)\n-        grad_input[gis] = cg_output\n-\n-        return grad_input, None, None\n-\n-class ConstantPad2d(Function):\n+class ConstantPadNd(Function):\n \n     @staticmethod\n     def forward(ctx, input, pad, value=0):\n-        assert input.dim() == 4, 'only 4D supported for padding'\n+        assert len(pad) % 2 == 0, \"padding tuple must be an even length\"", "path": "torch/nn/_functions/padding.py", "position": null, "original_position": 70, "commit_id": "8b54b7e83db91cf5b4a3c1e443f5c3d2b609e161", "original_commit_id": "fc11f2055858f78676abaa6d927fbe6a71ab5420", "user": {"login": "soumith", "id": 1310570, "node_id": "MDQ6VXNlcjEzMTA1NzA=", "avatar_url": "https://avatars0.githubusercontent.com/u/1310570?v=4", "gravatar_id": "", "url": "https://api.github.com/users/soumith", "html_url": "https://github.com/soumith", "followers_url": "https://api.github.com/users/soumith/followers", "following_url": "https://api.github.com/users/soumith/following{/other_user}", "gists_url": "https://api.github.com/users/soumith/gists{/gist_id}", "starred_url": "https://api.github.com/users/soumith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/soumith/subscriptions", "organizations_url": "https://api.github.com/users/soumith/orgs", "repos_url": "https://api.github.com/users/soumith/repos", "events_url": "https://api.github.com/users/soumith/events{/privacy}", "received_events_url": "https://api.github.com/users/soumith/received_events", "type": "User", "site_admin": false}, "body": "dont you additionally have to assert that `len(pad) / 2 == (input.dim() - 2)`", "created_at": "2017-09-13T23:28:36Z", "updated_at": "2018-11-23T15:34:36Z", "html_url": "https://github.com/pytorch/pytorch/pull/2657#discussion_r138765271", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/2657", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/138765271"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/2657#discussion_r138765271"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/2657"}}, "body_html": "<p>dont you additionally have to assert that <code>len(pad) / 2 == (input.dim() - 2)</code></p>", "body_text": "dont you additionally have to assert that len(pad) / 2 == (input.dim() - 2)"}