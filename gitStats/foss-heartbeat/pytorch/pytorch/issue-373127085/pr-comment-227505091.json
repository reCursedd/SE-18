{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/227505091", "pull_request_review_id": 167560635, "id": 227505091, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNzUwNTA5MQ==", "diff_hunk": "@@ -119,135 +134,202 @@ class PyTorchStreamReader {\n     auto ptr = malloc(size);\n     at::DataPtr retval(ptr, ptr, free, at::kCPU);\n \n-    in.read((char*)ptr, size);\n-    cursor += size;\n+    in_.read((char*)ptr, size);\n+    cursor_ += size;\n     seekToNextAlignmentBoundary();\n     return std::tuple<at::DataPtr, size_t>(std::move(retval), size);\n   }\n+\n+  // return dataptr, key, size\n+  std::tuple<at::DataPtr, int64_t, int64_t> getNextRecord() {\n+    int64_t key = cursor_;\n+    if (!hasNextRecord()) {\n+      throw std::runtime_error(\"No more record, but hasNextRecord is called.\");\n+    }\n+    auto tag = read64BitIntegerLittleEndian();\n+    if (tag != RecordTags::STORAGE) {\n+      throw std::runtime_error(\n+          \"Attempted to read a record of non-storage type\");\n+    }\n+    auto size = read64BitIntegerLittleEndian();\n+    seekToNextAlignmentBoundary();\n+    auto ptr = malloc(size);\n+    at::DataPtr retval(ptr, ptr, free, at::kCPU);\n+\n+    in_.read((char*)ptr, size);\n+    cursor_ += size;\n+    seekToNextAlignmentBoundary();\n+    return std::tuple<at::DataPtr, int64_t, int64_t>(\n+        std::move(retval), key, size);\n+  }\n+\n+  bool hasNextRecord() {\n+    if (cursor_ + kFieldAlignment * 2 < file_size_) {\n+      return true;\n+    }\n+    return false;\n+  }\n+\n+  bool close() {\n+    if (closed_) {\n+      return false;\n+    }\n+    closed_ = true;\n+    return true;\n+  }\n+\n+  bool closed() {\n+    return closed_;\n+  }\n+\n   ~PyTorchStreamReader() {\n   }\n+\n  private:\n-  std::istream& in;\n-  size_t cursor = 0;\n-  size_t file_size;\n-  size_t last_record_offset;\n+  std::istream& in_;", "path": "caffe2/serialize/inline_container.h", "position": null, "original_position": 169, "commit_id": "8beeb484bf4d149767c4ea9d1d376a4c3d0b7c3e", "original_commit_id": "ba909b162a712710d63e679d9ce71dcc7dc4ecb6", "user": {"login": "BIT-silence", "id": 3357667, "node_id": "MDQ6VXNlcjMzNTc2Njc=", "avatar_url": "https://avatars0.githubusercontent.com/u/3357667?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BIT-silence", "html_url": "https://github.com/BIT-silence", "followers_url": "https://api.github.com/users/BIT-silence/followers", "following_url": "https://api.github.com/users/BIT-silence/following{/other_user}", "gists_url": "https://api.github.com/users/BIT-silence/gists{/gist_id}", "starred_url": "https://api.github.com/users/BIT-silence/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BIT-silence/subscriptions", "organizations_url": "https://api.github.com/users/BIT-silence/orgs", "repos_url": "https://api.github.com/users/BIT-silence/repos", "events_url": "https://api.github.com/users/BIT-silence/events{/privacy}", "received_events_url": "https://api.github.com/users/BIT-silence/received_events", "type": "User", "site_admin": false}, "body": "I'd suggest using a pointer instead of a reference for member variables. Reference is not a type while may lead to some potential issues.", "created_at": "2018-10-23T18:08:32Z", "updated_at": "2018-11-23T15:53:26Z", "html_url": "https://github.com/pytorch/pytorch/pull/12993#discussion_r227505091", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/12993", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/227505091"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/12993#discussion_r227505091"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/12993"}}, "body_html": "<p>I'd suggest using a pointer instead of a reference for member variables. Reference is not a type while may lead to some potential issues.</p>", "body_text": "I'd suggest using a pointer instead of a reference for member variables. Reference is not a type while may lead to some potential issues."}