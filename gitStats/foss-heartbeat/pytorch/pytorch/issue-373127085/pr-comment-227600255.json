{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/227600255", "pull_request_review_id": 167679579, "id": 227600255, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNzYwMDI1NQ==", "diff_hunk": "@@ -119,135 +134,202 @@ class PyTorchStreamReader {\n     auto ptr = malloc(size);\n     at::DataPtr retval(ptr, ptr, free, at::kCPU);\n \n-    in.read((char*)ptr, size);\n-    cursor += size;\n+    in_.read((char*)ptr, size);\n+    cursor_ += size;\n     seekToNextAlignmentBoundary();\n     return std::tuple<at::DataPtr, size_t>(std::move(retval), size);\n   }\n+\n+  // return dataptr, key, size\n+  std::tuple<at::DataPtr, int64_t, int64_t> getNextRecord() {\n+    int64_t key = cursor_;\n+    if (!hasNextRecord()) {\n+      throw std::runtime_error(\"No more record, but hasNextRecord is called.\");\n+    }\n+    auto tag = read64BitIntegerLittleEndian();\n+    if (tag != RecordTags::STORAGE) {\n+      throw std::runtime_error(\n+          \"Attempted to read a record of non-storage type\");\n+    }\n+    auto size = read64BitIntegerLittleEndian();\n+    seekToNextAlignmentBoundary();\n+    auto ptr = malloc(size);\n+    at::DataPtr retval(ptr, ptr, free, at::kCPU);\n+\n+    in_.read((char*)ptr, size);\n+    cursor_ += size;\n+    seekToNextAlignmentBoundary();\n+    return std::tuple<at::DataPtr, int64_t, int64_t>(\n+        std::move(retval), key, size);\n+  }\n+\n+  bool hasNextRecord() {\n+    if (cursor_ + kFieldAlignment * 2 < file_size_) {\n+      return true;\n+    }\n+    return false;\n+  }\n+\n+  bool close() {\n+    if (closed_) {\n+      return false;\n+    }\n+    closed_ = true;\n+    return true;\n+  }\n+\n+  bool closed() {\n+    return closed_;\n+  }\n+\n   ~PyTorchStreamReader() {\n   }\n+\n  private:\n-  std::istream& in;\n-  size_t cursor = 0;\n-  size_t file_size;\n-  size_t last_record_offset;\n+  std::istream& in_;\n+  size_t cursor_ = 0;\n+  size_t file_size_;\n+  size_t last_record_offset_;\n+  bool closed_ = false;\n \n   // Utility functions\n   uint64_t read64BitIntegerLittleEndian() {\n-   uint64_t retval;\n-   // TODO endian swap on platforms that need it?\n-   in.read(reinterpret_cast<char *>(&retval), 8);\n-   std::streamsize read_bytes = in.gcount();\n-   if (read_bytes != 8) {\n-     std::ostringstream errmsg;\n-     errmsg << \"Expected to read 8 bytes but got \" << read_bytes;\n-     throw std::runtime_error(errmsg.str());\n-   }\n-   cursor += read_bytes;\n-   return retval;\n+    uint64_t retval;\n+    // TODO endian swap on platforms that need it?\n+    in_.read(reinterpret_cast<char*>(&retval), 8);\n+    std::streamsize read_bytes = in_.gcount();\n+    if (read_bytes != 8) {\n+      std::ostringstream errmsg;\n+      errmsg << \"Expected to read 8 bytes but got \" << read_bytes;\n+      throw std::runtime_error(errmsg.str());\n+    }\n+    cursor_ += read_bytes;\n+    return retval;\n   }\n \n   void seekToNextAlignmentBoundary() {\n-   size_t next_offset = (cursor + kFieldAlignment) - (cursor % kFieldAlignment);\n-   size_t pad_amount = next_offset - cursor;\n-   cursor += pad_amount;\n-   in.seekg(cursor);\n+    size_t next_offset =\n+        (cursor_ + kFieldAlignment) - (cursor_ % kFieldAlignment);\n+    size_t pad_amount = next_offset - cursor_;\n+    cursor_ += pad_amount;\n+    in_.seekg(cursor_);\n   }\n \n   // File format deserialization functions\n-  void readAndValidateFileHeader() {\n-   // Validate magic number\n-   uint64_t magic = read64BitIntegerLittleEndian();\n-   if (magic != kFileMagicNumber) {\n-     throw std::runtime_error(\"Magic number mismatch in PyTorch file. File may\"\n-                              \" be corrupted or is not actually a PyTorch file.\");\n-   }\n-   uint64_t file_format_version = read64BitIntegerLittleEndian();\n-   if (file_format_version > kMaxSupportedFileFormatVersion) {\n-     std::ostringstream errmsg;\n-     errmsg << \"Attempted to read a PyTorch file with version \" << file_format_version\n-            << \" but the maximum supported version for reading is \" << kMaxSupportedFileFormatVersion\n-            << \". Your PyTorch installation may be too old.\";\n-     throw std::runtime_error(errmsg.str());\n-   }\n-   seekToNextAlignmentBoundary();\n-  }\n-  void readAndValidateFileFooter() {\n+  bool readAndValidateFileHeader() {\n+    // Validate magic number\n+    cursor_ = 0;\n+    in_.seekg(cursor_);\n+    uint64_t magic = read64BitIntegerLittleEndian();\n+    if (magic != kFileMagicNumber) {\n+      throw std::runtime_error(\n+          \"Magic number mismatch in PyTorch file. File may\"\n+          \" be corrupted or is not actually a PyTorch file.\");\n+    }\n+    uint64_t file_format_version = read64BitIntegerLittleEndian();\n+    if (file_format_version > kMaxSupportedFileFormatVersion) {\n+      std::ostringstream errmsg;\n+      errmsg << \"Attempted to read a PyTorch file with version \"\n+             << file_format_version\n+             << \" but the maximum supported version for reading is \"\n+             << kMaxSupportedFileFormatVersion\n+             << \". Your PyTorch installation may be too old.\";\n+      throw std::runtime_error(errmsg.str());\n+    }\n+    seekToNextAlignmentBoundary();\n+    return true;\n+  }\n+\n+  bool readAndValidateFileFooter() {", "path": "caffe2/serialize/inline_container.h", "position": null, "original_position": 256, "commit_id": "8beeb484bf4d149767c4ea9d1d376a4c3d0b7c3e", "original_commit_id": "ba909b162a712710d63e679d9ce71dcc7dc4ecb6", "user": {"login": "houseroad", "id": 30275821, "node_id": "MDQ6VXNlcjMwMjc1ODIx", "avatar_url": "https://avatars0.githubusercontent.com/u/30275821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/houseroad", "html_url": "https://github.com/houseroad", "followers_url": "https://api.github.com/users/houseroad/followers", "following_url": "https://api.github.com/users/houseroad/following{/other_user}", "gists_url": "https://api.github.com/users/houseroad/gists{/gist_id}", "starred_url": "https://api.github.com/users/houseroad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/houseroad/subscriptions", "organizations_url": "https://api.github.com/users/houseroad/orgs", "repos_url": "https://api.github.com/users/houseroad/repos", "events_url": "https://api.github.com/users/houseroad/events{/privacy}", "received_events_url": "https://api.github.com/users/houseroad/received_events", "type": "User", "site_admin": false}, "body": "ditto.", "created_at": "2018-10-23T23:32:35Z", "updated_at": "2018-11-23T15:53:29Z", "html_url": "https://github.com/pytorch/pytorch/pull/12993#discussion_r227600255", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/12993", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/227600255"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/12993#discussion_r227600255"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/12993"}}, "body_html": "<p>ditto.</p>", "body_text": "ditto.", "in_reply_to_id": 227508238}