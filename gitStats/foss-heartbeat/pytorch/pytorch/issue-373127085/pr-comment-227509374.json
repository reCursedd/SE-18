{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/227509374", "pull_request_review_id": 167560635, "id": 227509374, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNzUwOTM3NA==", "diff_hunk": "@@ -259,48 +341,77 @@ class PyTorchStreamWriter {\n \n   void writeFileFooter() {\n     write64BitIntegerLittleEndian(RecordTags::FOOTER);\n-    write64BitIntegerLittleEndian(last_record_idx);\n+    write64BitIntegerLittleEndian(last_record_idx_);\n     padToNextAlignmentBoundary();\n   }\n };\n \n-class PyTorchFileReader {\n+class PyTorchFileReader final {\n  public:\n-  PyTorchFileReader(const std::string& filename) :\n-    in(filename, std::ios_base::binary),\n-    stream_reader(in) {}\n+  PyTorchFileReader(const std::string& filename)\n+      : in_(filename, std::ios_base::binary), stream_reader_(in_) {}\n+\n+  bool hasNextRecord() {\n+    return stream_reader_.hasNextRecord();\n+  }\n+\n+  // return dataptr, key, size\n+  std::tuple<at::DataPtr, int64_t, int64_t> getNextRecord() {\n+    return stream_reader_.getNextRecord();\n+  }\n \n   std::tuple<at::DataPtr, size_t> getLastRecord() {\n-    return stream_reader.getLastRecord();\n+    return stream_reader_.getLastRecord();\n   }\n \n   std::tuple<at::DataPtr, size_t> getRecordWithKey(uint64_t key) {\n-    return stream_reader.getRecordWithKey(key);\n+    return stream_reader_.getRecordWithKey(key);\n+  }\n+\n+  bool close() {\n+    return stream_reader_.close();\n+  }\n+\n+  bool closed() {\n+    return stream_reader_.closed();\n   }\n \n  private:\n-  std::ifstream in;\n-  PyTorchStreamReader stream_reader;\n+  std::ifstream in_;\n+  PyTorchStreamReader stream_reader_;\n };\n \n-class PyTorchFileWriter {\n+class PyTorchFileWriter final {\n  public:\n-  PyTorchFileWriter(const std::string& filename) :\n-    out(filename, std::ios_base::binary),\n-    stream_writer(out) {}\n+  PyTorchFileWriter(const std::string& filename)\n+      : out_(filename, std::ios_base::binary), stream_writer_(out_) {}\n \n   uint64_t writeRecord(const char* data, size_t size) {", "path": "caffe2/serialize/inline_container.h", "position": null, "original_position": 436, "commit_id": "8beeb484bf4d149767c4ea9d1d376a4c3d0b7c3e", "original_commit_id": "ba909b162a712710d63e679d9ce71dcc7dc4ecb6", "user": {"login": "BIT-silence", "id": 3357667, "node_id": "MDQ6VXNlcjMzNTc2Njc=", "avatar_url": "https://avatars0.githubusercontent.com/u/3357667?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BIT-silence", "html_url": "https://github.com/BIT-silence", "followers_url": "https://api.github.com/users/BIT-silence/followers", "following_url": "https://api.github.com/users/BIT-silence/following{/other_user}", "gists_url": "https://api.github.com/users/BIT-silence/gists{/gist_id}", "starred_url": "https://api.github.com/users/BIT-silence/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BIT-silence/subscriptions", "organizations_url": "https://api.github.com/users/BIT-silence/orgs", "repos_url": "https://api.github.com/users/BIT-silence/repos", "events_url": "https://api.github.com/users/BIT-silence/events{/privacy}", "received_events_url": "https://api.github.com/users/BIT-silence/received_events", "type": "User", "site_admin": false}, "body": "const void* data", "created_at": "2018-10-23T18:20:10Z", "updated_at": "2018-11-23T15:53:27Z", "html_url": "https://github.com/pytorch/pytorch/pull/12993#discussion_r227509374", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/12993", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/227509374"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/12993#discussion_r227509374"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/12993"}}, "body_html": "<p>const void* data</p>", "body_text": "const void* data"}