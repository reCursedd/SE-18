{"url": "https://api.github.com/repos/pytorch/pytorch/issues/11563", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/11563/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/11563/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/11563/events", "html_url": "https://github.com/pytorch/pytorch/pull/11563", "id": 359293403, "node_id": "MDExOlB1bGxSZXF1ZXN0MjE0ODE5NDU3", "number": 11563, "title": "Update OpenMP cmake setting for xcode 9 compiler(AppleClang 9.0)", "user": {"login": "JerryShih", "id": 5842681, "node_id": "MDQ6VXNlcjU4NDI2ODE=", "avatar_url": "https://avatars3.githubusercontent.com/u/5842681?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JerryShih", "html_url": "https://github.com/JerryShih", "followers_url": "https://api.github.com/users/JerryShih/followers", "following_url": "https://api.github.com/users/JerryShih/following{/other_user}", "gists_url": "https://api.github.com/users/JerryShih/gists{/gist_id}", "starred_url": "https://api.github.com/users/JerryShih/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JerryShih/subscriptions", "organizations_url": "https://api.github.com/users/JerryShih/orgs", "repos_url": "https://api.github.com/users/JerryShih/repos", "events_url": "https://api.github.com/users/JerryShih/events{/privacy}", "received_events_url": "https://api.github.com/users/JerryShih/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 19, "created_at": "2018-09-12T02:38:16Z", "updated_at": "2018-11-23T15:55:19Z", "closed_at": null, "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/11563", "html_url": "https://github.com/pytorch/pytorch/pull/11563", "diff_url": "https://github.com/pytorch/pytorch/pull/11563.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/11563.patch"}, "body_html": "<p>Fix the link OpenMP link error for AppleClang 9.0 compiler.</p>\n<p>Built with the following command:<br>\npython setup.py build develop</p>\n<p>The error message:</p>\n<pre><code>Undefined symbols for architecture x86_64:\n  \"___kmpc_critical\", referenced from:\n      _THFloatTensor_addmm in THTensorMath.cpp.o\n      _THDoubleTensor_addmm in THTensorMath.cpp.o\n      _THByteTensor_addmm in THTensorMath.cpp.o\n      _THCharTensor_addmm in THTensorMath.cpp.o\n      _THShortTensor_addmm in THTensorMath.cpp.o\n      _THIntTensor_addmm in THTensorMath.cpp.o\n      _THLongTensor_addmm in THTensorMath.cpp.o\n      ...\n  \"___kmpc_end_critical\", referenced from:\n      _THFloatTensor_addmm in THTensorMath.cpp.o\n      _THDoubleTensor_addmm in THTensorMath.cpp.o\n      _THByteTensor_addmm in THTensorMath.cpp.o\n      _THCharTensor_addmm in THTensorMath.cpp.o\n      _THShortTensor_addmm in THTensorMath.cpp.o\n      _THIntTensor_addmm in THTensorMath.cpp.o\n      _THLongTensor_addmm in THTensorMath.cpp.o\n      ...\n  \"___kmpc_end_reduce_nowait\", referenced from:\n      _.omp_outlined..270 in THTensorMoreMath.cpp.o\n      _.omp_outlined..271 in THTensorMoreMath.cpp.o\n      _.omp_outlined..273 in THTensorMoreMath.cpp.o\n      _.omp_outlined..275 in THTensorMoreMath.cpp.o\n      _.omp_outlined..43 in THTensorEvenMoreMath.cpp.o\n      _.omp_outlined..44 in THTensorEvenMoreMath.cpp.o\n      _.omp_outlined..46 in THTensorEvenMoreMath.cpp.o\n      ...\n  \"___kmpc_end_serialized_parallel\", referenced from:\n      at::native::embedding_renorm_cpu_(at::Tensor&amp;, at::Tensor const&amp;, double, double) in Embedding.cpp.o\n      at::native::_embedding_bag_dense_backward_cpu(at::Tensor const&amp;, at::Tensor const&amp;, at::Tensor const&amp;, at::Tensor const&amp;, at::Tensor const&amp;, at::Tensor const&amp;, long long, bool, long long) in EmbeddingBag.cpp.o\n      at::native::softmax_cpu(at::Tensor const&amp;, long long) in SoftMax.cpp.o\n      at::native::log_softmax_cpu(at::Tensor const&amp;, long long) in SoftMax.cpp.o\n      at::native::softmax_backward_cpu(at::Tensor const&amp;, at::Tensor const&amp;, long long, at::Tensor const&amp;) in SoftMax.cpp.o\n      at::native::log_softmax_backward_cpu(at::Tensor const&amp;, at::Tensor const&amp;, long long, at::Tensor const&amp;) in SoftMax.cpp.o\n      at::TensorIterator::for_each(std::__1::function&lt;void (int, char**, long long const*, long long)&gt; const&amp;) in TensorIterator.cpp.o\n      ...\n  \"___kmpc_for_static_fini\", referenced from:\n      _.omp_outlined..9 in Embedding.cpp.o\n      _.omp_outlined. in EmbeddingBag.cpp.o\n      _.omp_outlined. in GridSampler.cpp.o\n      _.omp_outlined..42 in GridSampler.cpp.o\n      _.omp_outlined..44 in GridSampler.cpp.o\n      _.omp_outlined..45 in GridSampler.cpp.o\n      _.omp_outlined..47 in GridSampler.cpp.o\n      ...\n  \"___kmpc_for_static_init_4\", referenced from:\n      _.omp_outlined. in init.cpp.o\n      _.omp_outlined..35 in init.cpp.o\n      _.omp_outlined..36 in init.cpp.o\n      _.omp_outlined..37 in init.cpp.o\n      _.omp_outlined..49 in init.cpp.o\n      _.omp_outlined..52 in init.cpp.o\n      _.omp_outlined..220 in init.cpp.o\n      ...\n  \"___kmpc_for_static_init_8\", referenced from:\n      _.omp_outlined..9 in Embedding.cpp.o\n      _.omp_outlined. in EmbeddingBag.cpp.o\n      _.omp_outlined. in GridSampler.cpp.o\n      _.omp_outlined..42 in GridSampler.cpp.o\n      _.omp_outlined..44 in GridSampler.cpp.o\n      _.omp_outlined..45 in GridSampler.cpp.o\n      _.omp_outlined..47 in GridSampler.cpp.o\n      ...\n  \"___kmpc_for_static_init_8u\", referenced from:\n      _.omp_outlined..203 in init.cpp.o\n      _.omp_outlined..207 in init.cpp.o\n      _.omp_outlined..209 in init.cpp.o\n      _.omp_outlined..210 in init.cpp.o\n  \"___kmpc_fork_call\", referenced from:\n      at::native::embedding_dense_backward_cpu(at::Tensor const&amp;, at::Tensor const&amp;, long long, long long, bool) in Embedding.cpp.o\n      at::native::embedding_renorm_cpu_(at::Tensor&amp;, at::Tensor const&amp;, double, double) in Embedding.cpp.o\n      at::native::_embedding_bag_dense_backward_cpu(at::Tensor const&amp;, at::Tensor const&amp;, at::Tensor const&amp;, at::Tensor const&amp;, at::Tensor const&amp;, at::Tensor const&amp;, long long, bool, long long) in EmbeddingBag.cpp.o\n      at::native::grid_sampler_2d_cpu(at::Tensor const&amp;, at::Tensor const&amp;, long long, long long) in GridSampler.cpp.o\n      at::native::grid_sampler_3d_cpu(at::Tensor const&amp;, at::Tensor const&amp;, long long, long long) in GridSampler.cpp.o\n      at::native::grid_sampler_2d_backward_cpu(at::Tensor const&amp;, at::Tensor const&amp;, at::Tensor const&amp;, long long, long long) in GridSampler.cpp.o\n      at::native::grid_sampler_3d_backward_cpu(at::Tensor const&amp;, at::Tensor const&amp;, at::Tensor const&amp;, long long, long long) in GridSampler.cpp.o\n      ...\n  \"___kmpc_global_thread_num\", referenced from:\n      at::native::embedding_renorm_cpu_(at::Tensor&amp;, at::Tensor const&amp;, double, double) in Embedding.cpp.o\n      at::native::_embedding_bag_dense_backward_cpu(at::Tensor const&amp;, at::Tensor const&amp;, at::Tensor const&amp;, at::Tensor const&amp;, at::Tensor const&amp;, at::Tensor const&amp;, long long, bool, long long) in EmbeddingBag.cpp.o\n      at::native::softmax_cpu(at::Tensor const&amp;, long long) in SoftMax.cpp.o\n      at::native::log_softmax_cpu(at::Tensor const&amp;, long long) in SoftMax.cpp.o\n      at::native::softmax_backward_cpu(at::Tensor const&amp;, at::Tensor const&amp;, long long, at::Tensor const&amp;) in SoftMax.cpp.o\n      at::native::log_softmax_backward_cpu(at::Tensor const&amp;, at::Tensor const&amp;, long long, at::Tensor const&amp;) in SoftMax.cpp.o\n      at::TensorIterator::for_each(std::__1::function&lt;void (int, char**, long long const*, long long)&gt; const&amp;) in TensorIterator.cpp.o\n      ...\n  \"___kmpc_push_num_threads\", referenced from:\n      void Eigen::internal::parallelize_gemm&lt;true, Eigen::internal::gemm_functor&lt;float, long, Eigen::internal::general_matrix_matrix_product&lt;long, float, 0, false, float, 0, false, 0&gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::internal::gemm_blocking_space&lt;0, float, float, -1, -1, -1, 1, false&gt; &gt;, long&gt;(Eigen::internal::gemm_functor&lt;float, long, Eigen::internal::general_matrix_matrix_product&lt;long, float, 0, false, float, 0, false, 0&gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::internal::gemm_blocking_space&lt;0, float, float, -1, -1, -1, 1, false&gt; &gt; const&amp;, long, long, long, bool) in math_cpu.cc.o\n      void Eigen::internal::parallelize_gemm&lt;true, Eigen::internal::gemm_functor&lt;float, long, Eigen::internal::general_matrix_matrix_product&lt;long, float, 1, false, float, 0, false, 0&gt;, Eigen::Transpose&lt;Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt; const&gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::internal::gemm_blocking_space&lt;0, float, float, -1, -1, -1, 1, false&gt; &gt;, long&gt;(Eigen::internal::gemm_functor&lt;float, long, Eigen::internal::general_matrix_matrix_product&lt;long, float, 1, false, float, 0, false, 0&gt;, Eigen::Transpose&lt;Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt; const&gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::internal::gemm_blocking_space&lt;0, float, float, -1, -1, -1, 1, false&gt; &gt; const&amp;, long, long, long, bool) in math_cpu.cc.o\n      void Eigen::internal::parallelize_gemm&lt;true, Eigen::internal::gemm_functor&lt;float, long, Eigen::internal::general_matrix_matrix_product&lt;long, float, 0, false, float, 1, false, 0&gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Transpose&lt;Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt; const&gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::internal::gemm_blocking_space&lt;0, float, float, -1, -1, -1, 1, false&gt; &gt;, long&gt;(Eigen::internal::gemm_functor&lt;float, long, Eigen::internal::general_matrix_matrix_product&lt;long, float, 0, false, float, 1, false, 0&gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Transpose&lt;Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt; const&gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::internal::gemm_blocking_space&lt;0, float, float, -1, -1, -1, 1, false&gt; &gt; const&amp;, long, long, long, bool) in math_cpu.cc.o\n      void Eigen::internal::parallelize_gemm&lt;true, Eigen::internal::gemm_functor&lt;float, long, Eigen::internal::general_matrix_matrix_product&lt;long, float, 1, false, float, 1, false, 0&gt;, Eigen::Transpose&lt;Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt; const&gt;, Eigen::Transpose&lt;Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt; const&gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::internal::gemm_blocking_space&lt;0, float, float, -1, -1, -1, 1, false&gt; &gt;, long&gt;(Eigen::internal::gemm_functor&lt;float, long, Eigen::internal::general_matrix_matrix_product&lt;long, float, 1, false, float, 1, false, 0&gt;, Eigen::Transpose&lt;Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt; const&gt;, Eigen::Transpose&lt;Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt; const&gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::internal::gemm_blocking_space&lt;0, float, float, -1, -1, -1, 1, false&gt; &gt; const&amp;, long, long, long, bool) in math_cpu.cc.o\n      void Eigen::internal::parallelize_gemm&lt;true, Eigen::internal::gemm_functor&lt;float, long, Eigen::internal::general_matrix_matrix_product&lt;long, float, 0, false, float, 0, false, 0&gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; const, 0, Eigen::OuterStride&lt;-1&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; const, 0, Eigen::OuterStride&lt;-1&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt;, 0, Eigen::OuterStride&lt;-1&gt; &gt;, Eigen::internal::gemm_blocking_space&lt;0, float, float, -1, -1, -1, 1, false&gt; &gt;, long&gt;(Eigen::internal::gemm_functor&lt;float, long, Eigen::internal::general_matrix_matrix_product&lt;long, float, 0, false, float, 0, false, 0&gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; const, 0, Eigen::OuterStride&lt;-1&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; const, 0, Eigen::OuterStride&lt;-1&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt;, 0, Eigen::OuterStride&lt;-1&gt; &gt;, Eigen::internal::gemm_blocking_space&lt;0, float, float, -1, -1, -1, 1, false&gt; &gt; const&amp;, long, long, long, bool) in math_cpu.cc.o\n      void Eigen::internal::parallelize_gemm&lt;true, Eigen::internal::gemm_functor&lt;float, long, Eigen::internal::general_matrix_matrix_product&lt;long, float, 1, false, float, 0, false, 0&gt;, Eigen::Transpose&lt;Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; const, 0, Eigen::OuterStride&lt;-1&gt; &gt; const&gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; const, 0, Eigen::OuterStride&lt;-1&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt;, 0, Eigen::OuterStride&lt;-1&gt; &gt;, Eigen::internal::gemm_blocking_space&lt;0, float, float, -1, -1, -1, 1, false&gt; &gt;, long&gt;(Eigen::internal::gemm_functor&lt;float, long, Eigen::internal::general_matrix_matrix_product&lt;long, float, 1, false, float, 0, false, 0&gt;, Eigen::Transpose&lt;Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; const, 0, Eigen::OuterStride&lt;-1&gt; &gt; const&gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; const, 0, Eigen::OuterStride&lt;-1&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt;, 0, Eigen::OuterStride&lt;-1&gt; &gt;, Eigen::internal::gemm_blocking_space&lt;0, float, float, -1, -1, -1, 1, false&gt; &gt; const&amp;, long, long, long, bool) in math_cpu.cc.o\n      void Eigen::internal::parallelize_gemm&lt;true, Eigen::internal::gemm_functor&lt;float, long, Eigen::internal::general_matrix_matrix_product&lt;long, float, 0, false, float, 1, false, 0&gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; const, 0, Eigen::OuterStride&lt;-1&gt; &gt;, Eigen::Transpose&lt;Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; const, 0, Eigen::OuterStride&lt;-1&gt; &gt; const&gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt;, 0, Eigen::OuterStride&lt;-1&gt; &gt;, Eigen::internal::gemm_blocking_space&lt;0, float, float, -1, -1, -1, 1, false&gt; &gt;, long&gt;(Eigen::internal::gemm_functor&lt;float, long, Eigen::internal::general_matrix_matrix_product&lt;long, float, 0, false, float, 1, false, 0&gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; const, 0, Eigen::OuterStride&lt;-1&gt; &gt;, Eigen::Transpose&lt;Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; const, 0, Eigen::OuterStride&lt;-1&gt; &gt; const&gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt;, 0, Eigen::OuterStride&lt;-1&gt; &gt;, Eigen::internal::gemm_blocking_space&lt;0, float, float, -1, -1, -1, 1, false&gt; &gt; const&amp;, long, long, long, bool) in math_cpu.cc.o\n      ...\n  \"___kmpc_reduce_nowait\", referenced from:\n      _.omp_outlined..270 in THTensorMoreMath.cpp.o\n      _.omp_outlined..271 in THTensorMoreMath.cpp.o\n      _.omp_outlined..273 in THTensorMoreMath.cpp.o\n      _.omp_outlined..275 in THTensorMoreMath.cpp.o\n      _.omp_outlined..43 in THTensorEvenMoreMath.cpp.o\n      _.omp_outlined..44 in THTensorEvenMoreMath.cpp.o\n      _.omp_outlined..46 in THTensorEvenMoreMath.cpp.o\n      ...\n  \"___kmpc_serialized_parallel\", referenced from:\n      at::native::embedding_renorm_cpu_(at::Tensor&amp;, at::Tensor const&amp;, double, double) in Embedding.cpp.o\n      at::native::_embedding_bag_dense_backward_cpu(at::Tensor const&amp;, at::Tensor const&amp;, at::Tensor const&amp;, at::Tensor const&amp;, at::Tensor const&amp;, at::Tensor const&amp;, long long, bool, long long) in EmbeddingBag.cpp.o\n      at::native::softmax_cpu(at::Tensor const&amp;, long long) in SoftMax.cpp.o\n      at::native::log_softmax_cpu(at::Tensor const&amp;, long long) in SoftMax.cpp.o\n      at::native::softmax_backward_cpu(at::Tensor const&amp;, at::Tensor const&amp;, long long, at::Tensor const&amp;) in SoftMax.cpp.o\n      at::native::log_softmax_backward_cpu(at::Tensor const&amp;, at::Tensor const&amp;, long long, at::Tensor const&amp;) in SoftMax.cpp.o\n      at::TensorIterator::for_each(std::__1::function&lt;void (int, char**, long long const*, long long)&gt; const&amp;) in TensorIterator.cpp.o\n      ...\n  \"_omp_get_max_threads\", referenced from:\n      _THGetNumThreads in THGeneral.cpp.o\n      caffe2::Caffe2SetOpenMPThreads(int*, char***) in init_omp.cc.o\n      void Eigen::internal::parallelize_gemm&lt;true, Eigen::internal::gemm_functor&lt;float, long, Eigen::internal::general_matrix_matrix_product&lt;long, float, 0, false, float, 0, false, 0&gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::internal::gemm_blocking_space&lt;0, float, float, -1, -1, -1, 1, false&gt; &gt;, long&gt;(Eigen::internal::gemm_functor&lt;float, long, Eigen::internal::general_matrix_matrix_product&lt;long, float, 0, false, float, 0, false, 0&gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::internal::gemm_blocking_space&lt;0, float, float, -1, -1, -1, 1, false&gt; &gt; const&amp;, long, long, long, bool) in math_cpu.cc.o\n      void Eigen::internal::parallelize_gemm&lt;true, Eigen::internal::gemm_functor&lt;float, long, Eigen::internal::general_matrix_matrix_product&lt;long, float, 1, false, float, 0, false, 0&gt;, Eigen::Transpose&lt;Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt; const&gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::internal::gemm_blocking_space&lt;0, float, float, -1, -1, -1, 1, false&gt; &gt;, long&gt;(Eigen::internal::gemm_functor&lt;float, long, Eigen::internal::general_matrix_matrix_product&lt;long, float, 1, false, float, 0, false, 0&gt;, Eigen::Transpose&lt;Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt; const&gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::internal::gemm_blocking_space&lt;0, float, float, -1, -1, -1, 1, false&gt; &gt; const&amp;, long, long, long, bool) in math_cpu.cc.o\n      void Eigen::internal::parallelize_gemm&lt;true, Eigen::internal::gemm_functor&lt;float, long, Eigen::internal::general_matrix_matrix_product&lt;long, float, 0, false, float, 1, false, 0&gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Transpose&lt;Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt; const&gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::internal::gemm_blocking_space&lt;0, float, float, -1, -1, -1, 1, false&gt; &gt;, long&gt;(Eigen::internal::gemm_functor&lt;float, long, Eigen::internal::general_matrix_matrix_product&lt;long, float, 0, false, float, 1, false, 0&gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Transpose&lt;Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt; const&gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::internal::gemm_blocking_space&lt;0, float, float, -1, -1, -1, 1, false&gt; &gt; const&amp;, long, long, long, bool) in math_cpu.cc.o\n      void Eigen::internal::parallelize_gemm&lt;true, Eigen::internal::gemm_functor&lt;float, long, Eigen::internal::general_matrix_matrix_product&lt;long, float, 1, false, float, 1, false, 0&gt;, Eigen::Transpose&lt;Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt; const&gt;, Eigen::Transpose&lt;Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt; const&gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::internal::gemm_blocking_space&lt;0, float, float, -1, -1, -1, 1, false&gt; &gt;, long&gt;(Eigen::internal::gemm_functor&lt;float, long, Eigen::internal::general_matrix_matrix_product&lt;long, float, 1, false, float, 1, false, 0&gt;, Eigen::Transpose&lt;Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt; const&gt;, Eigen::Transpose&lt;Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt; const&gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::internal::gemm_blocking_space&lt;0, float, float, -1, -1, -1, 1, false&gt; &gt; const&amp;, long, long, long, bool) in math_cpu.cc.o\n      void Eigen::internal::parallelize_gemm&lt;true, Eigen::internal::gemm_functor&lt;float, long, Eigen::internal::general_matrix_matrix_product&lt;long, float, 0, false, float, 0, false, 0&gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; const, 0, Eigen::OuterStride&lt;-1&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; const, 0, Eigen::OuterStride&lt;-1&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt;, 0, Eigen::OuterStride&lt;-1&gt; &gt;, Eigen::internal::gemm_blocking_space&lt;0, float, float, -1, -1, -1, 1, false&gt; &gt;, long&gt;(Eigen::internal::gemm_functor&lt;float, long, Eigen::internal::general_matrix_matrix_product&lt;long, float, 0, false, float, 0, false, 0&gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; const, 0, Eigen::OuterStride&lt;-1&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; const, 0, Eigen::OuterStride&lt;-1&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt;, 0, Eigen::OuterStride&lt;-1&gt; &gt;, Eigen::internal::gemm_blocking_space&lt;0, float, float, -1, -1, -1, 1, false&gt; &gt; const&amp;, long, long, long, bool) in math_cpu.cc.o\n      ...\n  \"_omp_get_num_procs\", referenced from:\n      _THGetNumCores in THGeneral.cpp.o\n  \"_omp_get_num_threads\", referenced from:\n      _.omp_outlined. in Embedding.cpp.o\n      _.omp_outlined. in SoftMax.cpp.o\n      _.omp_outlined..35 in SoftMax.cpp.o\n      _.omp_outlined..37 in SoftMax.cpp.o\n      _.omp_outlined..38 in SoftMax.cpp.o\n      _.omp_outlined..46 in SoftMax.cpp.o\n      _.omp_outlined..47 in SoftMax.cpp.o\n      ...\n  \"_omp_get_thread_num\", referenced from:\n      _.omp_outlined. in Embedding.cpp.o\n      _.omp_outlined. in SoftMax.cpp.o\n      _.omp_outlined..35 in SoftMax.cpp.o\n      _.omp_outlined..37 in SoftMax.cpp.o\n      _.omp_outlined..38 in SoftMax.cpp.o\n      _.omp_outlined..46 in SoftMax.cpp.o\n      _.omp_outlined..47 in SoftMax.cpp.o\n      ...\n  \"_omp_in_parallel\", referenced from:\n      _THFloatTensor_copy in THTensorCopy.cpp.o\n      _THDoubleTensor_copy in THTensorCopy.cpp.o\n      _THByteTensor_copy in THTensorCopy.cpp.o\n      _THCharTensor_copy in THTensorCopy.cpp.o\n      _THShortTensor_copy in THTensorCopy.cpp.o\n      _THIntTensor_copy in THTensorCopy.cpp.o\n      _THLongTensor_copy in THTensorCopy.cpp.o\n      ...\n  \"_omp_set_num_threads\", referenced from:\n      _THSetNumThreads in THGeneral.cpp.o\n      caffe2::Caffe2SetOpenMPThreads(int*, char***) in init_omp.cc.o\nld: symbol(s) not found for architecture x86_64\n</code></pre>", "body_text": "Fix the link OpenMP link error for AppleClang 9.0 compiler.\nBuilt with the following command:\npython setup.py build develop\nThe error message:\nUndefined symbols for architecture x86_64:\n  \"___kmpc_critical\", referenced from:\n      _THFloatTensor_addmm in THTensorMath.cpp.o\n      _THDoubleTensor_addmm in THTensorMath.cpp.o\n      _THByteTensor_addmm in THTensorMath.cpp.o\n      _THCharTensor_addmm in THTensorMath.cpp.o\n      _THShortTensor_addmm in THTensorMath.cpp.o\n      _THIntTensor_addmm in THTensorMath.cpp.o\n      _THLongTensor_addmm in THTensorMath.cpp.o\n      ...\n  \"___kmpc_end_critical\", referenced from:\n      _THFloatTensor_addmm in THTensorMath.cpp.o\n      _THDoubleTensor_addmm in THTensorMath.cpp.o\n      _THByteTensor_addmm in THTensorMath.cpp.o\n      _THCharTensor_addmm in THTensorMath.cpp.o\n      _THShortTensor_addmm in THTensorMath.cpp.o\n      _THIntTensor_addmm in THTensorMath.cpp.o\n      _THLongTensor_addmm in THTensorMath.cpp.o\n      ...\n  \"___kmpc_end_reduce_nowait\", referenced from:\n      _.omp_outlined..270 in THTensorMoreMath.cpp.o\n      _.omp_outlined..271 in THTensorMoreMath.cpp.o\n      _.omp_outlined..273 in THTensorMoreMath.cpp.o\n      _.omp_outlined..275 in THTensorMoreMath.cpp.o\n      _.omp_outlined..43 in THTensorEvenMoreMath.cpp.o\n      _.omp_outlined..44 in THTensorEvenMoreMath.cpp.o\n      _.omp_outlined..46 in THTensorEvenMoreMath.cpp.o\n      ...\n  \"___kmpc_end_serialized_parallel\", referenced from:\n      at::native::embedding_renorm_cpu_(at::Tensor&, at::Tensor const&, double, double) in Embedding.cpp.o\n      at::native::_embedding_bag_dense_backward_cpu(at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, long long, bool, long long) in EmbeddingBag.cpp.o\n      at::native::softmax_cpu(at::Tensor const&, long long) in SoftMax.cpp.o\n      at::native::log_softmax_cpu(at::Tensor const&, long long) in SoftMax.cpp.o\n      at::native::softmax_backward_cpu(at::Tensor const&, at::Tensor const&, long long, at::Tensor const&) in SoftMax.cpp.o\n      at::native::log_softmax_backward_cpu(at::Tensor const&, at::Tensor const&, long long, at::Tensor const&) in SoftMax.cpp.o\n      at::TensorIterator::for_each(std::__1::function<void (int, char**, long long const*, long long)> const&) in TensorIterator.cpp.o\n      ...\n  \"___kmpc_for_static_fini\", referenced from:\n      _.omp_outlined..9 in Embedding.cpp.o\n      _.omp_outlined. in EmbeddingBag.cpp.o\n      _.omp_outlined. in GridSampler.cpp.o\n      _.omp_outlined..42 in GridSampler.cpp.o\n      _.omp_outlined..44 in GridSampler.cpp.o\n      _.omp_outlined..45 in GridSampler.cpp.o\n      _.omp_outlined..47 in GridSampler.cpp.o\n      ...\n  \"___kmpc_for_static_init_4\", referenced from:\n      _.omp_outlined. in init.cpp.o\n      _.omp_outlined..35 in init.cpp.o\n      _.omp_outlined..36 in init.cpp.o\n      _.omp_outlined..37 in init.cpp.o\n      _.omp_outlined..49 in init.cpp.o\n      _.omp_outlined..52 in init.cpp.o\n      _.omp_outlined..220 in init.cpp.o\n      ...\n  \"___kmpc_for_static_init_8\", referenced from:\n      _.omp_outlined..9 in Embedding.cpp.o\n      _.omp_outlined. in EmbeddingBag.cpp.o\n      _.omp_outlined. in GridSampler.cpp.o\n      _.omp_outlined..42 in GridSampler.cpp.o\n      _.omp_outlined..44 in GridSampler.cpp.o\n      _.omp_outlined..45 in GridSampler.cpp.o\n      _.omp_outlined..47 in GridSampler.cpp.o\n      ...\n  \"___kmpc_for_static_init_8u\", referenced from:\n      _.omp_outlined..203 in init.cpp.o\n      _.omp_outlined..207 in init.cpp.o\n      _.omp_outlined..209 in init.cpp.o\n      _.omp_outlined..210 in init.cpp.o\n  \"___kmpc_fork_call\", referenced from:\n      at::native::embedding_dense_backward_cpu(at::Tensor const&, at::Tensor const&, long long, long long, bool) in Embedding.cpp.o\n      at::native::embedding_renorm_cpu_(at::Tensor&, at::Tensor const&, double, double) in Embedding.cpp.o\n      at::native::_embedding_bag_dense_backward_cpu(at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, long long, bool, long long) in EmbeddingBag.cpp.o\n      at::native::grid_sampler_2d_cpu(at::Tensor const&, at::Tensor const&, long long, long long) in GridSampler.cpp.o\n      at::native::grid_sampler_3d_cpu(at::Tensor const&, at::Tensor const&, long long, long long) in GridSampler.cpp.o\n      at::native::grid_sampler_2d_backward_cpu(at::Tensor const&, at::Tensor const&, at::Tensor const&, long long, long long) in GridSampler.cpp.o\n      at::native::grid_sampler_3d_backward_cpu(at::Tensor const&, at::Tensor const&, at::Tensor const&, long long, long long) in GridSampler.cpp.o\n      ...\n  \"___kmpc_global_thread_num\", referenced from:\n      at::native::embedding_renorm_cpu_(at::Tensor&, at::Tensor const&, double, double) in Embedding.cpp.o\n      at::native::_embedding_bag_dense_backward_cpu(at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, long long, bool, long long) in EmbeddingBag.cpp.o\n      at::native::softmax_cpu(at::Tensor const&, long long) in SoftMax.cpp.o\n      at::native::log_softmax_cpu(at::Tensor const&, long long) in SoftMax.cpp.o\n      at::native::softmax_backward_cpu(at::Tensor const&, at::Tensor const&, long long, at::Tensor const&) in SoftMax.cpp.o\n      at::native::log_softmax_backward_cpu(at::Tensor const&, at::Tensor const&, long long, at::Tensor const&) in SoftMax.cpp.o\n      at::TensorIterator::for_each(std::__1::function<void (int, char**, long long const*, long long)> const&) in TensorIterator.cpp.o\n      ...\n  \"___kmpc_push_num_threads\", referenced from:\n      void Eigen::internal::parallelize_gemm<true, Eigen::internal::gemm_functor<float, long, Eigen::internal::general_matrix_matrix_product<long, float, 0, false, float, 0, false, 0>, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::Stride<0, 0> >, Eigen::internal::gemm_blocking_space<0, float, float, -1, -1, -1, 1, false> >, long>(Eigen::internal::gemm_functor<float, long, Eigen::internal::general_matrix_matrix_product<long, float, 0, false, float, 0, false, 0>, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::Stride<0, 0> >, Eigen::internal::gemm_blocking_space<0, float, float, -1, -1, -1, 1, false> > const&, long, long, long, bool) in math_cpu.cc.o\n      void Eigen::internal::parallelize_gemm<true, Eigen::internal::gemm_functor<float, long, Eigen::internal::general_matrix_matrix_product<long, float, 1, false, float, 0, false, 0>, Eigen::Transpose<Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::Stride<0, 0> > const>, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::Stride<0, 0> >, Eigen::internal::gemm_blocking_space<0, float, float, -1, -1, -1, 1, false> >, long>(Eigen::internal::gemm_functor<float, long, Eigen::internal::general_matrix_matrix_product<long, float, 1, false, float, 0, false, 0>, Eigen::Transpose<Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::Stride<0, 0> > const>, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::Stride<0, 0> >, Eigen::internal::gemm_blocking_space<0, float, float, -1, -1, -1, 1, false> > const&, long, long, long, bool) in math_cpu.cc.o\n      void Eigen::internal::parallelize_gemm<true, Eigen::internal::gemm_functor<float, long, Eigen::internal::general_matrix_matrix_product<long, float, 0, false, float, 1, false, 0>, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::Stride<0, 0> >, Eigen::Transpose<Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::Stride<0, 0> > const>, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::Stride<0, 0> >, Eigen::internal::gemm_blocking_space<0, float, float, -1, -1, -1, 1, false> >, long>(Eigen::internal::gemm_functor<float, long, Eigen::internal::general_matrix_matrix_product<long, float, 0, false, float, 1, false, 0>, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::Stride<0, 0> >, Eigen::Transpose<Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::Stride<0, 0> > const>, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::Stride<0, 0> >, Eigen::internal::gemm_blocking_space<0, float, float, -1, -1, -1, 1, false> > const&, long, long, long, bool) in math_cpu.cc.o\n      void Eigen::internal::parallelize_gemm<true, Eigen::internal::gemm_functor<float, long, Eigen::internal::general_matrix_matrix_product<long, float, 1, false, float, 1, false, 0>, Eigen::Transpose<Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::Stride<0, 0> > const>, Eigen::Transpose<Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::Stride<0, 0> > const>, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::Stride<0, 0> >, Eigen::internal::gemm_blocking_space<0, float, float, -1, -1, -1, 1, false> >, long>(Eigen::internal::gemm_functor<float, long, Eigen::internal::general_matrix_matrix_product<long, float, 1, false, float, 1, false, 0>, Eigen::Transpose<Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::Stride<0, 0> > const>, Eigen::Transpose<Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::Stride<0, 0> > const>, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::Stride<0, 0> >, Eigen::internal::gemm_blocking_space<0, float, float, -1, -1, -1, 1, false> > const&, long, long, long, bool) in math_cpu.cc.o\n      void Eigen::internal::parallelize_gemm<true, Eigen::internal::gemm_functor<float, long, Eigen::internal::general_matrix_matrix_product<long, float, 0, false, float, 0, false, 0>, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::OuterStride<-1> >, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::OuterStride<-1> >, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::OuterStride<-1> >, Eigen::internal::gemm_blocking_space<0, float, float, -1, -1, -1, 1, false> >, long>(Eigen::internal::gemm_functor<float, long, Eigen::internal::general_matrix_matrix_product<long, float, 0, false, float, 0, false, 0>, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::OuterStride<-1> >, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::OuterStride<-1> >, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::OuterStride<-1> >, Eigen::internal::gemm_blocking_space<0, float, float, -1, -1, -1, 1, false> > const&, long, long, long, bool) in math_cpu.cc.o\n      void Eigen::internal::parallelize_gemm<true, Eigen::internal::gemm_functor<float, long, Eigen::internal::general_matrix_matrix_product<long, float, 1, false, float, 0, false, 0>, Eigen::Transpose<Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::OuterStride<-1> > const>, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::OuterStride<-1> >, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::OuterStride<-1> >, Eigen::internal::gemm_blocking_space<0, float, float, -1, -1, -1, 1, false> >, long>(Eigen::internal::gemm_functor<float, long, Eigen::internal::general_matrix_matrix_product<long, float, 1, false, float, 0, false, 0>, Eigen::Transpose<Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::OuterStride<-1> > const>, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::OuterStride<-1> >, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::OuterStride<-1> >, Eigen::internal::gemm_blocking_space<0, float, float, -1, -1, -1, 1, false> > const&, long, long, long, bool) in math_cpu.cc.o\n      void Eigen::internal::parallelize_gemm<true, Eigen::internal::gemm_functor<float, long, Eigen::internal::general_matrix_matrix_product<long, float, 0, false, float, 1, false, 0>, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::OuterStride<-1> >, Eigen::Transpose<Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::OuterStride<-1> > const>, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::OuterStride<-1> >, Eigen::internal::gemm_blocking_space<0, float, float, -1, -1, -1, 1, false> >, long>(Eigen::internal::gemm_functor<float, long, Eigen::internal::general_matrix_matrix_product<long, float, 0, false, float, 1, false, 0>, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::OuterStride<-1> >, Eigen::Transpose<Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::OuterStride<-1> > const>, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::OuterStride<-1> >, Eigen::internal::gemm_blocking_space<0, float, float, -1, -1, -1, 1, false> > const&, long, long, long, bool) in math_cpu.cc.o\n      ...\n  \"___kmpc_reduce_nowait\", referenced from:\n      _.omp_outlined..270 in THTensorMoreMath.cpp.o\n      _.omp_outlined..271 in THTensorMoreMath.cpp.o\n      _.omp_outlined..273 in THTensorMoreMath.cpp.o\n      _.omp_outlined..275 in THTensorMoreMath.cpp.o\n      _.omp_outlined..43 in THTensorEvenMoreMath.cpp.o\n      _.omp_outlined..44 in THTensorEvenMoreMath.cpp.o\n      _.omp_outlined..46 in THTensorEvenMoreMath.cpp.o\n      ...\n  \"___kmpc_serialized_parallel\", referenced from:\n      at::native::embedding_renorm_cpu_(at::Tensor&, at::Tensor const&, double, double) in Embedding.cpp.o\n      at::native::_embedding_bag_dense_backward_cpu(at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, long long, bool, long long) in EmbeddingBag.cpp.o\n      at::native::softmax_cpu(at::Tensor const&, long long) in SoftMax.cpp.o\n      at::native::log_softmax_cpu(at::Tensor const&, long long) in SoftMax.cpp.o\n      at::native::softmax_backward_cpu(at::Tensor const&, at::Tensor const&, long long, at::Tensor const&) in SoftMax.cpp.o\n      at::native::log_softmax_backward_cpu(at::Tensor const&, at::Tensor const&, long long, at::Tensor const&) in SoftMax.cpp.o\n      at::TensorIterator::for_each(std::__1::function<void (int, char**, long long const*, long long)> const&) in TensorIterator.cpp.o\n      ...\n  \"_omp_get_max_threads\", referenced from:\n      _THGetNumThreads in THGeneral.cpp.o\n      caffe2::Caffe2SetOpenMPThreads(int*, char***) in init_omp.cc.o\n      void Eigen::internal::parallelize_gemm<true, Eigen::internal::gemm_functor<float, long, Eigen::internal::general_matrix_matrix_product<long, float, 0, false, float, 0, false, 0>, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::Stride<0, 0> >, Eigen::internal::gemm_blocking_space<0, float, float, -1, -1, -1, 1, false> >, long>(Eigen::internal::gemm_functor<float, long, Eigen::internal::general_matrix_matrix_product<long, float, 0, false, float, 0, false, 0>, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::Stride<0, 0> >, Eigen::internal::gemm_blocking_space<0, float, float, -1, -1, -1, 1, false> > const&, long, long, long, bool) in math_cpu.cc.o\n      void Eigen::internal::parallelize_gemm<true, Eigen::internal::gemm_functor<float, long, Eigen::internal::general_matrix_matrix_product<long, float, 1, false, float, 0, false, 0>, Eigen::Transpose<Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::Stride<0, 0> > const>, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::Stride<0, 0> >, Eigen::internal::gemm_blocking_space<0, float, float, -1, -1, -1, 1, false> >, long>(Eigen::internal::gemm_functor<float, long, Eigen::internal::general_matrix_matrix_product<long, float, 1, false, float, 0, false, 0>, Eigen::Transpose<Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::Stride<0, 0> > const>, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::Stride<0, 0> >, Eigen::internal::gemm_blocking_space<0, float, float, -1, -1, -1, 1, false> > const&, long, long, long, bool) in math_cpu.cc.o\n      void Eigen::internal::parallelize_gemm<true, Eigen::internal::gemm_functor<float, long, Eigen::internal::general_matrix_matrix_product<long, float, 0, false, float, 1, false, 0>, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::Stride<0, 0> >, Eigen::Transpose<Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::Stride<0, 0> > const>, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::Stride<0, 0> >, Eigen::internal::gemm_blocking_space<0, float, float, -1, -1, -1, 1, false> >, long>(Eigen::internal::gemm_functor<float, long, Eigen::internal::general_matrix_matrix_product<long, float, 0, false, float, 1, false, 0>, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::Stride<0, 0> >, Eigen::Transpose<Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::Stride<0, 0> > const>, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::Stride<0, 0> >, Eigen::internal::gemm_blocking_space<0, float, float, -1, -1, -1, 1, false> > const&, long, long, long, bool) in math_cpu.cc.o\n      void Eigen::internal::parallelize_gemm<true, Eigen::internal::gemm_functor<float, long, Eigen::internal::general_matrix_matrix_product<long, float, 1, false, float, 1, false, 0>, Eigen::Transpose<Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::Stride<0, 0> > const>, Eigen::Transpose<Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::Stride<0, 0> > const>, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::Stride<0, 0> >, Eigen::internal::gemm_blocking_space<0, float, float, -1, -1, -1, 1, false> >, long>(Eigen::internal::gemm_functor<float, long, Eigen::internal::general_matrix_matrix_product<long, float, 1, false, float, 1, false, 0>, Eigen::Transpose<Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::Stride<0, 0> > const>, Eigen::Transpose<Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::Stride<0, 0> > const>, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::Stride<0, 0> >, Eigen::internal::gemm_blocking_space<0, float, float, -1, -1, -1, 1, false> > const&, long, long, long, bool) in math_cpu.cc.o\n      void Eigen::internal::parallelize_gemm<true, Eigen::internal::gemm_functor<float, long, Eigen::internal::general_matrix_matrix_product<long, float, 0, false, float, 0, false, 0>, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::OuterStride<-1> >, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::OuterStride<-1> >, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::OuterStride<-1> >, Eigen::internal::gemm_blocking_space<0, float, float, -1, -1, -1, 1, false> >, long>(Eigen::internal::gemm_functor<float, long, Eigen::internal::general_matrix_matrix_product<long, float, 0, false, float, 0, false, 0>, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::OuterStride<-1> >, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::OuterStride<-1> >, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::OuterStride<-1> >, Eigen::internal::gemm_blocking_space<0, float, float, -1, -1, -1, 1, false> > const&, long, long, long, bool) in math_cpu.cc.o\n      ...\n  \"_omp_get_num_procs\", referenced from:\n      _THGetNumCores in THGeneral.cpp.o\n  \"_omp_get_num_threads\", referenced from:\n      _.omp_outlined. in Embedding.cpp.o\n      _.omp_outlined. in SoftMax.cpp.o\n      _.omp_outlined..35 in SoftMax.cpp.o\n      _.omp_outlined..37 in SoftMax.cpp.o\n      _.omp_outlined..38 in SoftMax.cpp.o\n      _.omp_outlined..46 in SoftMax.cpp.o\n      _.omp_outlined..47 in SoftMax.cpp.o\n      ...\n  \"_omp_get_thread_num\", referenced from:\n      _.omp_outlined. in Embedding.cpp.o\n      _.omp_outlined. in SoftMax.cpp.o\n      _.omp_outlined..35 in SoftMax.cpp.o\n      _.omp_outlined..37 in SoftMax.cpp.o\n      _.omp_outlined..38 in SoftMax.cpp.o\n      _.omp_outlined..46 in SoftMax.cpp.o\n      _.omp_outlined..47 in SoftMax.cpp.o\n      ...\n  \"_omp_in_parallel\", referenced from:\n      _THFloatTensor_copy in THTensorCopy.cpp.o\n      _THDoubleTensor_copy in THTensorCopy.cpp.o\n      _THByteTensor_copy in THTensorCopy.cpp.o\n      _THCharTensor_copy in THTensorCopy.cpp.o\n      _THShortTensor_copy in THTensorCopy.cpp.o\n      _THIntTensor_copy in THTensorCopy.cpp.o\n      _THLongTensor_copy in THTensorCopy.cpp.o\n      ...\n  \"_omp_set_num_threads\", referenced from:\n      _THSetNumThreads in THGeneral.cpp.o\n      caffe2::Caffe2SetOpenMPThreads(int*, char***) in init_omp.cc.o\nld: symbol(s) not found for architecture x86_64", "body": "Fix the link OpenMP link error for AppleClang 9.0 compiler.\r\n\r\nBuilt with the following command:\r\npython setup.py build develop\r\n\r\nThe error message:\r\n\r\n```\r\nUndefined symbols for architecture x86_64:\r\n  \"___kmpc_critical\", referenced from:\r\n      _THFloatTensor_addmm in THTensorMath.cpp.o\r\n      _THDoubleTensor_addmm in THTensorMath.cpp.o\r\n      _THByteTensor_addmm in THTensorMath.cpp.o\r\n      _THCharTensor_addmm in THTensorMath.cpp.o\r\n      _THShortTensor_addmm in THTensorMath.cpp.o\r\n      _THIntTensor_addmm in THTensorMath.cpp.o\r\n      _THLongTensor_addmm in THTensorMath.cpp.o\r\n      ...\r\n  \"___kmpc_end_critical\", referenced from:\r\n      _THFloatTensor_addmm in THTensorMath.cpp.o\r\n      _THDoubleTensor_addmm in THTensorMath.cpp.o\r\n      _THByteTensor_addmm in THTensorMath.cpp.o\r\n      _THCharTensor_addmm in THTensorMath.cpp.o\r\n      _THShortTensor_addmm in THTensorMath.cpp.o\r\n      _THIntTensor_addmm in THTensorMath.cpp.o\r\n      _THLongTensor_addmm in THTensorMath.cpp.o\r\n      ...\r\n  \"___kmpc_end_reduce_nowait\", referenced from:\r\n      _.omp_outlined..270 in THTensorMoreMath.cpp.o\r\n      _.omp_outlined..271 in THTensorMoreMath.cpp.o\r\n      _.omp_outlined..273 in THTensorMoreMath.cpp.o\r\n      _.omp_outlined..275 in THTensorMoreMath.cpp.o\r\n      _.omp_outlined..43 in THTensorEvenMoreMath.cpp.o\r\n      _.omp_outlined..44 in THTensorEvenMoreMath.cpp.o\r\n      _.omp_outlined..46 in THTensorEvenMoreMath.cpp.o\r\n      ...\r\n  \"___kmpc_end_serialized_parallel\", referenced from:\r\n      at::native::embedding_renorm_cpu_(at::Tensor&, at::Tensor const&, double, double) in Embedding.cpp.o\r\n      at::native::_embedding_bag_dense_backward_cpu(at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, long long, bool, long long) in EmbeddingBag.cpp.o\r\n      at::native::softmax_cpu(at::Tensor const&, long long) in SoftMax.cpp.o\r\n      at::native::log_softmax_cpu(at::Tensor const&, long long) in SoftMax.cpp.o\r\n      at::native::softmax_backward_cpu(at::Tensor const&, at::Tensor const&, long long, at::Tensor const&) in SoftMax.cpp.o\r\n      at::native::log_softmax_backward_cpu(at::Tensor const&, at::Tensor const&, long long, at::Tensor const&) in SoftMax.cpp.o\r\n      at::TensorIterator::for_each(std::__1::function<void (int, char**, long long const*, long long)> const&) in TensorIterator.cpp.o\r\n      ...\r\n  \"___kmpc_for_static_fini\", referenced from:\r\n      _.omp_outlined..9 in Embedding.cpp.o\r\n      _.omp_outlined. in EmbeddingBag.cpp.o\r\n      _.omp_outlined. in GridSampler.cpp.o\r\n      _.omp_outlined..42 in GridSampler.cpp.o\r\n      _.omp_outlined..44 in GridSampler.cpp.o\r\n      _.omp_outlined..45 in GridSampler.cpp.o\r\n      _.omp_outlined..47 in GridSampler.cpp.o\r\n      ...\r\n  \"___kmpc_for_static_init_4\", referenced from:\r\n      _.omp_outlined. in init.cpp.o\r\n      _.omp_outlined..35 in init.cpp.o\r\n      _.omp_outlined..36 in init.cpp.o\r\n      _.omp_outlined..37 in init.cpp.o\r\n      _.omp_outlined..49 in init.cpp.o\r\n      _.omp_outlined..52 in init.cpp.o\r\n      _.omp_outlined..220 in init.cpp.o\r\n      ...\r\n  \"___kmpc_for_static_init_8\", referenced from:\r\n      _.omp_outlined..9 in Embedding.cpp.o\r\n      _.omp_outlined. in EmbeddingBag.cpp.o\r\n      _.omp_outlined. in GridSampler.cpp.o\r\n      _.omp_outlined..42 in GridSampler.cpp.o\r\n      _.omp_outlined..44 in GridSampler.cpp.o\r\n      _.omp_outlined..45 in GridSampler.cpp.o\r\n      _.omp_outlined..47 in GridSampler.cpp.o\r\n      ...\r\n  \"___kmpc_for_static_init_8u\", referenced from:\r\n      _.omp_outlined..203 in init.cpp.o\r\n      _.omp_outlined..207 in init.cpp.o\r\n      _.omp_outlined..209 in init.cpp.o\r\n      _.omp_outlined..210 in init.cpp.o\r\n  \"___kmpc_fork_call\", referenced from:\r\n      at::native::embedding_dense_backward_cpu(at::Tensor const&, at::Tensor const&, long long, long long, bool) in Embedding.cpp.o\r\n      at::native::embedding_renorm_cpu_(at::Tensor&, at::Tensor const&, double, double) in Embedding.cpp.o\r\n      at::native::_embedding_bag_dense_backward_cpu(at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, long long, bool, long long) in EmbeddingBag.cpp.o\r\n      at::native::grid_sampler_2d_cpu(at::Tensor const&, at::Tensor const&, long long, long long) in GridSampler.cpp.o\r\n      at::native::grid_sampler_3d_cpu(at::Tensor const&, at::Tensor const&, long long, long long) in GridSampler.cpp.o\r\n      at::native::grid_sampler_2d_backward_cpu(at::Tensor const&, at::Tensor const&, at::Tensor const&, long long, long long) in GridSampler.cpp.o\r\n      at::native::grid_sampler_3d_backward_cpu(at::Tensor const&, at::Tensor const&, at::Tensor const&, long long, long long) in GridSampler.cpp.o\r\n      ...\r\n  \"___kmpc_global_thread_num\", referenced from:\r\n      at::native::embedding_renorm_cpu_(at::Tensor&, at::Tensor const&, double, double) in Embedding.cpp.o\r\n      at::native::_embedding_bag_dense_backward_cpu(at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, long long, bool, long long) in EmbeddingBag.cpp.o\r\n      at::native::softmax_cpu(at::Tensor const&, long long) in SoftMax.cpp.o\r\n      at::native::log_softmax_cpu(at::Tensor const&, long long) in SoftMax.cpp.o\r\n      at::native::softmax_backward_cpu(at::Tensor const&, at::Tensor const&, long long, at::Tensor const&) in SoftMax.cpp.o\r\n      at::native::log_softmax_backward_cpu(at::Tensor const&, at::Tensor const&, long long, at::Tensor const&) in SoftMax.cpp.o\r\n      at::TensorIterator::for_each(std::__1::function<void (int, char**, long long const*, long long)> const&) in TensorIterator.cpp.o\r\n      ...\r\n  \"___kmpc_push_num_threads\", referenced from:\r\n      void Eigen::internal::parallelize_gemm<true, Eigen::internal::gemm_functor<float, long, Eigen::internal::general_matrix_matrix_product<long, float, 0, false, float, 0, false, 0>, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::Stride<0, 0> >, Eigen::internal::gemm_blocking_space<0, float, float, -1, -1, -1, 1, false> >, long>(Eigen::internal::gemm_functor<float, long, Eigen::internal::general_matrix_matrix_product<long, float, 0, false, float, 0, false, 0>, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::Stride<0, 0> >, Eigen::internal::gemm_blocking_space<0, float, float, -1, -1, -1, 1, false> > const&, long, long, long, bool) in math_cpu.cc.o\r\n      void Eigen::internal::parallelize_gemm<true, Eigen::internal::gemm_functor<float, long, Eigen::internal::general_matrix_matrix_product<long, float, 1, false, float, 0, false, 0>, Eigen::Transpose<Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::Stride<0, 0> > const>, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::Stride<0, 0> >, Eigen::internal::gemm_blocking_space<0, float, float, -1, -1, -1, 1, false> >, long>(Eigen::internal::gemm_functor<float, long, Eigen::internal::general_matrix_matrix_product<long, float, 1, false, float, 0, false, 0>, Eigen::Transpose<Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::Stride<0, 0> > const>, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::Stride<0, 0> >, Eigen::internal::gemm_blocking_space<0, float, float, -1, -1, -1, 1, false> > const&, long, long, long, bool) in math_cpu.cc.o\r\n      void Eigen::internal::parallelize_gemm<true, Eigen::internal::gemm_functor<float, long, Eigen::internal::general_matrix_matrix_product<long, float, 0, false, float, 1, false, 0>, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::Stride<0, 0> >, Eigen::Transpose<Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::Stride<0, 0> > const>, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::Stride<0, 0> >, Eigen::internal::gemm_blocking_space<0, float, float, -1, -1, -1, 1, false> >, long>(Eigen::internal::gemm_functor<float, long, Eigen::internal::general_matrix_matrix_product<long, float, 0, false, float, 1, false, 0>, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::Stride<0, 0> >, Eigen::Transpose<Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::Stride<0, 0> > const>, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::Stride<0, 0> >, Eigen::internal::gemm_blocking_space<0, float, float, -1, -1, -1, 1, false> > const&, long, long, long, bool) in math_cpu.cc.o\r\n      void Eigen::internal::parallelize_gemm<true, Eigen::internal::gemm_functor<float, long, Eigen::internal::general_matrix_matrix_product<long, float, 1, false, float, 1, false, 0>, Eigen::Transpose<Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::Stride<0, 0> > const>, Eigen::Transpose<Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::Stride<0, 0> > const>, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::Stride<0, 0> >, Eigen::internal::gemm_blocking_space<0, float, float, -1, -1, -1, 1, false> >, long>(Eigen::internal::gemm_functor<float, long, Eigen::internal::general_matrix_matrix_product<long, float, 1, false, float, 1, false, 0>, Eigen::Transpose<Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::Stride<0, 0> > const>, Eigen::Transpose<Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::Stride<0, 0> > const>, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::Stride<0, 0> >, Eigen::internal::gemm_blocking_space<0, float, float, -1, -1, -1, 1, false> > const&, long, long, long, bool) in math_cpu.cc.o\r\n      void Eigen::internal::parallelize_gemm<true, Eigen::internal::gemm_functor<float, long, Eigen::internal::general_matrix_matrix_product<long, float, 0, false, float, 0, false, 0>, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::OuterStride<-1> >, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::OuterStride<-1> >, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::OuterStride<-1> >, Eigen::internal::gemm_blocking_space<0, float, float, -1, -1, -1, 1, false> >, long>(Eigen::internal::gemm_functor<float, long, Eigen::internal::general_matrix_matrix_product<long, float, 0, false, float, 0, false, 0>, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::OuterStride<-1> >, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::OuterStride<-1> >, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::OuterStride<-1> >, Eigen::internal::gemm_blocking_space<0, float, float, -1, -1, -1, 1, false> > const&, long, long, long, bool) in math_cpu.cc.o\r\n      void Eigen::internal::parallelize_gemm<true, Eigen::internal::gemm_functor<float, long, Eigen::internal::general_matrix_matrix_product<long, float, 1, false, float, 0, false, 0>, Eigen::Transpose<Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::OuterStride<-1> > const>, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::OuterStride<-1> >, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::OuterStride<-1> >, Eigen::internal::gemm_blocking_space<0, float, float, -1, -1, -1, 1, false> >, long>(Eigen::internal::gemm_functor<float, long, Eigen::internal::general_matrix_matrix_product<long, float, 1, false, float, 0, false, 0>, Eigen::Transpose<Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::OuterStride<-1> > const>, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::OuterStride<-1> >, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::OuterStride<-1> >, Eigen::internal::gemm_blocking_space<0, float, float, -1, -1, -1, 1, false> > const&, long, long, long, bool) in math_cpu.cc.o\r\n      void Eigen::internal::parallelize_gemm<true, Eigen::internal::gemm_functor<float, long, Eigen::internal::general_matrix_matrix_product<long, float, 0, false, float, 1, false, 0>, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::OuterStride<-1> >, Eigen::Transpose<Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::OuterStride<-1> > const>, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::OuterStride<-1> >, Eigen::internal::gemm_blocking_space<0, float, float, -1, -1, -1, 1, false> >, long>(Eigen::internal::gemm_functor<float, long, Eigen::internal::general_matrix_matrix_product<long, float, 0, false, float, 1, false, 0>, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::OuterStride<-1> >, Eigen::Transpose<Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::OuterStride<-1> > const>, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::OuterStride<-1> >, Eigen::internal::gemm_blocking_space<0, float, float, -1, -1, -1, 1, false> > const&, long, long, long, bool) in math_cpu.cc.o\r\n      ...\r\n  \"___kmpc_reduce_nowait\", referenced from:\r\n      _.omp_outlined..270 in THTensorMoreMath.cpp.o\r\n      _.omp_outlined..271 in THTensorMoreMath.cpp.o\r\n      _.omp_outlined..273 in THTensorMoreMath.cpp.o\r\n      _.omp_outlined..275 in THTensorMoreMath.cpp.o\r\n      _.omp_outlined..43 in THTensorEvenMoreMath.cpp.o\r\n      _.omp_outlined..44 in THTensorEvenMoreMath.cpp.o\r\n      _.omp_outlined..46 in THTensorEvenMoreMath.cpp.o\r\n      ...\r\n  \"___kmpc_serialized_parallel\", referenced from:\r\n      at::native::embedding_renorm_cpu_(at::Tensor&, at::Tensor const&, double, double) in Embedding.cpp.o\r\n      at::native::_embedding_bag_dense_backward_cpu(at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, long long, bool, long long) in EmbeddingBag.cpp.o\r\n      at::native::softmax_cpu(at::Tensor const&, long long) in SoftMax.cpp.o\r\n      at::native::log_softmax_cpu(at::Tensor const&, long long) in SoftMax.cpp.o\r\n      at::native::softmax_backward_cpu(at::Tensor const&, at::Tensor const&, long long, at::Tensor const&) in SoftMax.cpp.o\r\n      at::native::log_softmax_backward_cpu(at::Tensor const&, at::Tensor const&, long long, at::Tensor const&) in SoftMax.cpp.o\r\n      at::TensorIterator::for_each(std::__1::function<void (int, char**, long long const*, long long)> const&) in TensorIterator.cpp.o\r\n      ...\r\n  \"_omp_get_max_threads\", referenced from:\r\n      _THGetNumThreads in THGeneral.cpp.o\r\n      caffe2::Caffe2SetOpenMPThreads(int*, char***) in init_omp.cc.o\r\n      void Eigen::internal::parallelize_gemm<true, Eigen::internal::gemm_functor<float, long, Eigen::internal::general_matrix_matrix_product<long, float, 0, false, float, 0, false, 0>, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::Stride<0, 0> >, Eigen::internal::gemm_blocking_space<0, float, float, -1, -1, -1, 1, false> >, long>(Eigen::internal::gemm_functor<float, long, Eigen::internal::general_matrix_matrix_product<long, float, 0, false, float, 0, false, 0>, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::Stride<0, 0> >, Eigen::internal::gemm_blocking_space<0, float, float, -1, -1, -1, 1, false> > const&, long, long, long, bool) in math_cpu.cc.o\r\n      void Eigen::internal::parallelize_gemm<true, Eigen::internal::gemm_functor<float, long, Eigen::internal::general_matrix_matrix_product<long, float, 1, false, float, 0, false, 0>, Eigen::Transpose<Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::Stride<0, 0> > const>, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::Stride<0, 0> >, Eigen::internal::gemm_blocking_space<0, float, float, -1, -1, -1, 1, false> >, long>(Eigen::internal::gemm_functor<float, long, Eigen::internal::general_matrix_matrix_product<long, float, 1, false, float, 0, false, 0>, Eigen::Transpose<Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::Stride<0, 0> > const>, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::Stride<0, 0> >, Eigen::internal::gemm_blocking_space<0, float, float, -1, -1, -1, 1, false> > const&, long, long, long, bool) in math_cpu.cc.o\r\n      void Eigen::internal::parallelize_gemm<true, Eigen::internal::gemm_functor<float, long, Eigen::internal::general_matrix_matrix_product<long, float, 0, false, float, 1, false, 0>, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::Stride<0, 0> >, Eigen::Transpose<Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::Stride<0, 0> > const>, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::Stride<0, 0> >, Eigen::internal::gemm_blocking_space<0, float, float, -1, -1, -1, 1, false> >, long>(Eigen::internal::gemm_functor<float, long, Eigen::internal::general_matrix_matrix_product<long, float, 0, false, float, 1, false, 0>, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::Stride<0, 0> >, Eigen::Transpose<Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::Stride<0, 0> > const>, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::Stride<0, 0> >, Eigen::internal::gemm_blocking_space<0, float, float, -1, -1, -1, 1, false> > const&, long, long, long, bool) in math_cpu.cc.o\r\n      void Eigen::internal::parallelize_gemm<true, Eigen::internal::gemm_functor<float, long, Eigen::internal::general_matrix_matrix_product<long, float, 1, false, float, 1, false, 0>, Eigen::Transpose<Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::Stride<0, 0> > const>, Eigen::Transpose<Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::Stride<0, 0> > const>, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::Stride<0, 0> >, Eigen::internal::gemm_blocking_space<0, float, float, -1, -1, -1, 1, false> >, long>(Eigen::internal::gemm_functor<float, long, Eigen::internal::general_matrix_matrix_product<long, float, 1, false, float, 1, false, 0>, Eigen::Transpose<Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::Stride<0, 0> > const>, Eigen::Transpose<Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::Stride<0, 0> > const>, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::Stride<0, 0> >, Eigen::internal::gemm_blocking_space<0, float, float, -1, -1, -1, 1, false> > const&, long, long, long, bool) in math_cpu.cc.o\r\n      void Eigen::internal::parallelize_gemm<true, Eigen::internal::gemm_functor<float, long, Eigen::internal::general_matrix_matrix_product<long, float, 0, false, float, 0, false, 0>, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::OuterStride<-1> >, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::OuterStride<-1> >, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::OuterStride<-1> >, Eigen::internal::gemm_blocking_space<0, float, float, -1, -1, -1, 1, false> >, long>(Eigen::internal::gemm_functor<float, long, Eigen::internal::general_matrix_matrix_product<long, float, 0, false, float, 0, false, 0>, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::OuterStride<-1> >, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::OuterStride<-1> >, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::OuterStride<-1> >, Eigen::internal::gemm_blocking_space<0, float, float, -1, -1, -1, 1, false> > const&, long, long, long, bool) in math_cpu.cc.o\r\n      ...\r\n  \"_omp_get_num_procs\", referenced from:\r\n      _THGetNumCores in THGeneral.cpp.o\r\n  \"_omp_get_num_threads\", referenced from:\r\n      _.omp_outlined. in Embedding.cpp.o\r\n      _.omp_outlined. in SoftMax.cpp.o\r\n      _.omp_outlined..35 in SoftMax.cpp.o\r\n      _.omp_outlined..37 in SoftMax.cpp.o\r\n      _.omp_outlined..38 in SoftMax.cpp.o\r\n      _.omp_outlined..46 in SoftMax.cpp.o\r\n      _.omp_outlined..47 in SoftMax.cpp.o\r\n      ...\r\n  \"_omp_get_thread_num\", referenced from:\r\n      _.omp_outlined. in Embedding.cpp.o\r\n      _.omp_outlined. in SoftMax.cpp.o\r\n      _.omp_outlined..35 in SoftMax.cpp.o\r\n      _.omp_outlined..37 in SoftMax.cpp.o\r\n      _.omp_outlined..38 in SoftMax.cpp.o\r\n      _.omp_outlined..46 in SoftMax.cpp.o\r\n      _.omp_outlined..47 in SoftMax.cpp.o\r\n      ...\r\n  \"_omp_in_parallel\", referenced from:\r\n      _THFloatTensor_copy in THTensorCopy.cpp.o\r\n      _THDoubleTensor_copy in THTensorCopy.cpp.o\r\n      _THByteTensor_copy in THTensorCopy.cpp.o\r\n      _THCharTensor_copy in THTensorCopy.cpp.o\r\n      _THShortTensor_copy in THTensorCopy.cpp.o\r\n      _THIntTensor_copy in THTensorCopy.cpp.o\r\n      _THLongTensor_copy in THTensorCopy.cpp.o\r\n      ...\r\n  \"_omp_set_num_threads\", referenced from:\r\n      _THSetNumThreads in THGeneral.cpp.o\r\n      caffe2::Caffe2SetOpenMPThreads(int*, char***) in init_omp.cc.o\r\nld: symbol(s) not found for architecture x86_64\r\n```"}