{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/11563", "id": 214819457, "node_id": "MDExOlB1bGxSZXF1ZXN0MjE0ODE5NDU3", "html_url": "https://github.com/pytorch/pytorch/pull/11563", "diff_url": "https://github.com/pytorch/pytorch/pull/11563.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/11563.patch", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/11563", "number": 11563, "state": "open", "locked": false, "title": "Update OpenMP cmake setting for xcode 9 compiler(AppleClang 9.0)", "user": {"login": "JerryShih", "id": 5842681, "node_id": "MDQ6VXNlcjU4NDI2ODE=", "avatar_url": "https://avatars3.githubusercontent.com/u/5842681?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JerryShih", "html_url": "https://github.com/JerryShih", "followers_url": "https://api.github.com/users/JerryShih/followers", "following_url": "https://api.github.com/users/JerryShih/following{/other_user}", "gists_url": "https://api.github.com/users/JerryShih/gists{/gist_id}", "starred_url": "https://api.github.com/users/JerryShih/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JerryShih/subscriptions", "organizations_url": "https://api.github.com/users/JerryShih/orgs", "repos_url": "https://api.github.com/users/JerryShih/repos", "events_url": "https://api.github.com/users/JerryShih/events{/privacy}", "received_events_url": "https://api.github.com/users/JerryShih/received_events", "type": "User", "site_admin": false}, "body": "Fix the link OpenMP link error for AppleClang 9.0 compiler.\r\n\r\nBuilt with the following command:\r\npython setup.py build develop\r\n\r\nThe error message:\r\n\r\n```\r\nUndefined symbols for architecture x86_64:\r\n  \"___kmpc_critical\", referenced from:\r\n      _THFloatTensor_addmm in THTensorMath.cpp.o\r\n      _THDoubleTensor_addmm in THTensorMath.cpp.o\r\n      _THByteTensor_addmm in THTensorMath.cpp.o\r\n      _THCharTensor_addmm in THTensorMath.cpp.o\r\n      _THShortTensor_addmm in THTensorMath.cpp.o\r\n      _THIntTensor_addmm in THTensorMath.cpp.o\r\n      _THLongTensor_addmm in THTensorMath.cpp.o\r\n      ...\r\n  \"___kmpc_end_critical\", referenced from:\r\n      _THFloatTensor_addmm in THTensorMath.cpp.o\r\n      _THDoubleTensor_addmm in THTensorMath.cpp.o\r\n      _THByteTensor_addmm in THTensorMath.cpp.o\r\n      _THCharTensor_addmm in THTensorMath.cpp.o\r\n      _THShortTensor_addmm in THTensorMath.cpp.o\r\n      _THIntTensor_addmm in THTensorMath.cpp.o\r\n      _THLongTensor_addmm in THTensorMath.cpp.o\r\n      ...\r\n  \"___kmpc_end_reduce_nowait\", referenced from:\r\n      _.omp_outlined..270 in THTensorMoreMath.cpp.o\r\n      _.omp_outlined..271 in THTensorMoreMath.cpp.o\r\n      _.omp_outlined..273 in THTensorMoreMath.cpp.o\r\n      _.omp_outlined..275 in THTensorMoreMath.cpp.o\r\n      _.omp_outlined..43 in THTensorEvenMoreMath.cpp.o\r\n      _.omp_outlined..44 in THTensorEvenMoreMath.cpp.o\r\n      _.omp_outlined..46 in THTensorEvenMoreMath.cpp.o\r\n      ...\r\n  \"___kmpc_end_serialized_parallel\", referenced from:\r\n      at::native::embedding_renorm_cpu_(at::Tensor&, at::Tensor const&, double, double) in Embedding.cpp.o\r\n      at::native::_embedding_bag_dense_backward_cpu(at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, long long, bool, long long) in EmbeddingBag.cpp.o\r\n      at::native::softmax_cpu(at::Tensor const&, long long) in SoftMax.cpp.o\r\n      at::native::log_softmax_cpu(at::Tensor const&, long long) in SoftMax.cpp.o\r\n      at::native::softmax_backward_cpu(at::Tensor const&, at::Tensor const&, long long, at::Tensor const&) in SoftMax.cpp.o\r\n      at::native::log_softmax_backward_cpu(at::Tensor const&, at::Tensor const&, long long, at::Tensor const&) in SoftMax.cpp.o\r\n      at::TensorIterator::for_each(std::__1::function<void (int, char**, long long const*, long long)> const&) in TensorIterator.cpp.o\r\n      ...\r\n  \"___kmpc_for_static_fini\", referenced from:\r\n      _.omp_outlined..9 in Embedding.cpp.o\r\n      _.omp_outlined. in EmbeddingBag.cpp.o\r\n      _.omp_outlined. in GridSampler.cpp.o\r\n      _.omp_outlined..42 in GridSampler.cpp.o\r\n      _.omp_outlined..44 in GridSampler.cpp.o\r\n      _.omp_outlined..45 in GridSampler.cpp.o\r\n      _.omp_outlined..47 in GridSampler.cpp.o\r\n      ...\r\n  \"___kmpc_for_static_init_4\", referenced from:\r\n      _.omp_outlined. in init.cpp.o\r\n      _.omp_outlined..35 in init.cpp.o\r\n      _.omp_outlined..36 in init.cpp.o\r\n      _.omp_outlined..37 in init.cpp.o\r\n      _.omp_outlined..49 in init.cpp.o\r\n      _.omp_outlined..52 in init.cpp.o\r\n      _.omp_outlined..220 in init.cpp.o\r\n      ...\r\n  \"___kmpc_for_static_init_8\", referenced from:\r\n      _.omp_outlined..9 in Embedding.cpp.o\r\n      _.omp_outlined. in EmbeddingBag.cpp.o\r\n      _.omp_outlined. in GridSampler.cpp.o\r\n      _.omp_outlined..42 in GridSampler.cpp.o\r\n      _.omp_outlined..44 in GridSampler.cpp.o\r\n      _.omp_outlined..45 in GridSampler.cpp.o\r\n      _.omp_outlined..47 in GridSampler.cpp.o\r\n      ...\r\n  \"___kmpc_for_static_init_8u\", referenced from:\r\n      _.omp_outlined..203 in init.cpp.o\r\n      _.omp_outlined..207 in init.cpp.o\r\n      _.omp_outlined..209 in init.cpp.o\r\n      _.omp_outlined..210 in init.cpp.o\r\n  \"___kmpc_fork_call\", referenced from:\r\n      at::native::embedding_dense_backward_cpu(at::Tensor const&, at::Tensor const&, long long, long long, bool) in Embedding.cpp.o\r\n      at::native::embedding_renorm_cpu_(at::Tensor&, at::Tensor const&, double, double) in Embedding.cpp.o\r\n      at::native::_embedding_bag_dense_backward_cpu(at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, long long, bool, long long) in EmbeddingBag.cpp.o\r\n      at::native::grid_sampler_2d_cpu(at::Tensor const&, at::Tensor const&, long long, long long) in GridSampler.cpp.o\r\n      at::native::grid_sampler_3d_cpu(at::Tensor const&, at::Tensor const&, long long, long long) in GridSampler.cpp.o\r\n      at::native::grid_sampler_2d_backward_cpu(at::Tensor const&, at::Tensor const&, at::Tensor const&, long long, long long) in GridSampler.cpp.o\r\n      at::native::grid_sampler_3d_backward_cpu(at::Tensor const&, at::Tensor const&, at::Tensor const&, long long, long long) in GridSampler.cpp.o\r\n      ...\r\n  \"___kmpc_global_thread_num\", referenced from:\r\n      at::native::embedding_renorm_cpu_(at::Tensor&, at::Tensor const&, double, double) in Embedding.cpp.o\r\n      at::native::_embedding_bag_dense_backward_cpu(at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, long long, bool, long long) in EmbeddingBag.cpp.o\r\n      at::native::softmax_cpu(at::Tensor const&, long long) in SoftMax.cpp.o\r\n      at::native::log_softmax_cpu(at::Tensor const&, long long) in SoftMax.cpp.o\r\n      at::native::softmax_backward_cpu(at::Tensor const&, at::Tensor const&, long long, at::Tensor const&) in SoftMax.cpp.o\r\n      at::native::log_softmax_backward_cpu(at::Tensor const&, at::Tensor const&, long long, at::Tensor const&) in SoftMax.cpp.o\r\n      at::TensorIterator::for_each(std::__1::function<void (int, char**, long long const*, long long)> const&) in TensorIterator.cpp.o\r\n      ...\r\n  \"___kmpc_push_num_threads\", referenced from:\r\n      void Eigen::internal::parallelize_gemm<true, Eigen::internal::gemm_functor<float, long, Eigen::internal::general_matrix_matrix_product<long, float, 0, false, float, 0, false, 0>, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::Stride<0, 0> >, Eigen::internal::gemm_blocking_space<0, float, float, -1, -1, -1, 1, false> >, long>(Eigen::internal::gemm_functor<float, long, Eigen::internal::general_matrix_matrix_product<long, float, 0, false, float, 0, false, 0>, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::Stride<0, 0> >, Eigen::internal::gemm_blocking_space<0, float, float, -1, -1, -1, 1, false> > const&, long, long, long, bool) in math_cpu.cc.o\r\n      void Eigen::internal::parallelize_gemm<true, Eigen::internal::gemm_functor<float, long, Eigen::internal::general_matrix_matrix_product<long, float, 1, false, float, 0, false, 0>, Eigen::Transpose<Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::Stride<0, 0> > const>, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::Stride<0, 0> >, Eigen::internal::gemm_blocking_space<0, float, float, -1, -1, -1, 1, false> >, long>(Eigen::internal::gemm_functor<float, long, Eigen::internal::general_matrix_matrix_product<long, float, 1, false, float, 0, false, 0>, Eigen::Transpose<Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::Stride<0, 0> > const>, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::Stride<0, 0> >, Eigen::internal::gemm_blocking_space<0, float, float, -1, -1, -1, 1, false> > const&, long, long, long, bool) in math_cpu.cc.o\r\n      void Eigen::internal::parallelize_gemm<true, Eigen::internal::gemm_functor<float, long, Eigen::internal::general_matrix_matrix_product<long, float, 0, false, float, 1, false, 0>, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::Stride<0, 0> >, Eigen::Transpose<Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::Stride<0, 0> > const>, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::Stride<0, 0> >, Eigen::internal::gemm_blocking_space<0, float, float, -1, -1, -1, 1, false> >, long>(Eigen::internal::gemm_functor<float, long, Eigen::internal::general_matrix_matrix_product<long, float, 0, false, float, 1, false, 0>, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::Stride<0, 0> >, Eigen::Transpose<Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::Stride<0, 0> > const>, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::Stride<0, 0> >, Eigen::internal::gemm_blocking_space<0, float, float, -1, -1, -1, 1, false> > const&, long, long, long, bool) in math_cpu.cc.o\r\n      void Eigen::internal::parallelize_gemm<true, Eigen::internal::gemm_functor<float, long, Eigen::internal::general_matrix_matrix_product<long, float, 1, false, float, 1, false, 0>, Eigen::Transpose<Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::Stride<0, 0> > const>, Eigen::Transpose<Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::Stride<0, 0> > const>, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::Stride<0, 0> >, Eigen::internal::gemm_blocking_space<0, float, float, -1, -1, -1, 1, false> >, long>(Eigen::internal::gemm_functor<float, long, Eigen::internal::general_matrix_matrix_product<long, float, 1, false, float, 1, false, 0>, Eigen::Transpose<Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::Stride<0, 0> > const>, Eigen::Transpose<Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::Stride<0, 0> > const>, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::Stride<0, 0> >, Eigen::internal::gemm_blocking_space<0, float, float, -1, -1, -1, 1, false> > const&, long, long, long, bool) in math_cpu.cc.o\r\n      void Eigen::internal::parallelize_gemm<true, Eigen::internal::gemm_functor<float, long, Eigen::internal::general_matrix_matrix_product<long, float, 0, false, float, 0, false, 0>, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::OuterStride<-1> >, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::OuterStride<-1> >, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::OuterStride<-1> >, Eigen::internal::gemm_blocking_space<0, float, float, -1, -1, -1, 1, false> >, long>(Eigen::internal::gemm_functor<float, long, Eigen::internal::general_matrix_matrix_product<long, float, 0, false, float, 0, false, 0>, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::OuterStride<-1> >, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::OuterStride<-1> >, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::OuterStride<-1> >, Eigen::internal::gemm_blocking_space<0, float, float, -1, -1, -1, 1, false> > const&, long, long, long, bool) in math_cpu.cc.o\r\n      void Eigen::internal::parallelize_gemm<true, Eigen::internal::gemm_functor<float, long, Eigen::internal::general_matrix_matrix_product<long, float, 1, false, float, 0, false, 0>, Eigen::Transpose<Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::OuterStride<-1> > const>, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::OuterStride<-1> >, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::OuterStride<-1> >, Eigen::internal::gemm_blocking_space<0, float, float, -1, -1, -1, 1, false> >, long>(Eigen::internal::gemm_functor<float, long, Eigen::internal::general_matrix_matrix_product<long, float, 1, false, float, 0, false, 0>, Eigen::Transpose<Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::OuterStride<-1> > const>, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::OuterStride<-1> >, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::OuterStride<-1> >, Eigen::internal::gemm_blocking_space<0, float, float, -1, -1, -1, 1, false> > const&, long, long, long, bool) in math_cpu.cc.o\r\n      void Eigen::internal::parallelize_gemm<true, Eigen::internal::gemm_functor<float, long, Eigen::internal::general_matrix_matrix_product<long, float, 0, false, float, 1, false, 0>, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::OuterStride<-1> >, Eigen::Transpose<Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::OuterStride<-1> > const>, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::OuterStride<-1> >, Eigen::internal::gemm_blocking_space<0, float, float, -1, -1, -1, 1, false> >, long>(Eigen::internal::gemm_functor<float, long, Eigen::internal::general_matrix_matrix_product<long, float, 0, false, float, 1, false, 0>, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::OuterStride<-1> >, Eigen::Transpose<Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::OuterStride<-1> > const>, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::OuterStride<-1> >, Eigen::internal::gemm_blocking_space<0, float, float, -1, -1, -1, 1, false> > const&, long, long, long, bool) in math_cpu.cc.o\r\n      ...\r\n  \"___kmpc_reduce_nowait\", referenced from:\r\n      _.omp_outlined..270 in THTensorMoreMath.cpp.o\r\n      _.omp_outlined..271 in THTensorMoreMath.cpp.o\r\n      _.omp_outlined..273 in THTensorMoreMath.cpp.o\r\n      _.omp_outlined..275 in THTensorMoreMath.cpp.o\r\n      _.omp_outlined..43 in THTensorEvenMoreMath.cpp.o\r\n      _.omp_outlined..44 in THTensorEvenMoreMath.cpp.o\r\n      _.omp_outlined..46 in THTensorEvenMoreMath.cpp.o\r\n      ...\r\n  \"___kmpc_serialized_parallel\", referenced from:\r\n      at::native::embedding_renorm_cpu_(at::Tensor&, at::Tensor const&, double, double) in Embedding.cpp.o\r\n      at::native::_embedding_bag_dense_backward_cpu(at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, long long, bool, long long) in EmbeddingBag.cpp.o\r\n      at::native::softmax_cpu(at::Tensor const&, long long) in SoftMax.cpp.o\r\n      at::native::log_softmax_cpu(at::Tensor const&, long long) in SoftMax.cpp.o\r\n      at::native::softmax_backward_cpu(at::Tensor const&, at::Tensor const&, long long, at::Tensor const&) in SoftMax.cpp.o\r\n      at::native::log_softmax_backward_cpu(at::Tensor const&, at::Tensor const&, long long, at::Tensor const&) in SoftMax.cpp.o\r\n      at::TensorIterator::for_each(std::__1::function<void (int, char**, long long const*, long long)> const&) in TensorIterator.cpp.o\r\n      ...\r\n  \"_omp_get_max_threads\", referenced from:\r\n      _THGetNumThreads in THGeneral.cpp.o\r\n      caffe2::Caffe2SetOpenMPThreads(int*, char***) in init_omp.cc.o\r\n      void Eigen::internal::parallelize_gemm<true, Eigen::internal::gemm_functor<float, long, Eigen::internal::general_matrix_matrix_product<long, float, 0, false, float, 0, false, 0>, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::Stride<0, 0> >, Eigen::internal::gemm_blocking_space<0, float, float, -1, -1, -1, 1, false> >, long>(Eigen::internal::gemm_functor<float, long, Eigen::internal::general_matrix_matrix_product<long, float, 0, false, float, 0, false, 0>, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::Stride<0, 0> >, Eigen::internal::gemm_blocking_space<0, float, float, -1, -1, -1, 1, false> > const&, long, long, long, bool) in math_cpu.cc.o\r\n      void Eigen::internal::parallelize_gemm<true, Eigen::internal::gemm_functor<float, long, Eigen::internal::general_matrix_matrix_product<long, float, 1, false, float, 0, false, 0>, Eigen::Transpose<Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::Stride<0, 0> > const>, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::Stride<0, 0> >, Eigen::internal::gemm_blocking_space<0, float, float, -1, -1, -1, 1, false> >, long>(Eigen::internal::gemm_functor<float, long, Eigen::internal::general_matrix_matrix_product<long, float, 1, false, float, 0, false, 0>, Eigen::Transpose<Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::Stride<0, 0> > const>, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::Stride<0, 0> >, Eigen::internal::gemm_blocking_space<0, float, float, -1, -1, -1, 1, false> > const&, long, long, long, bool) in math_cpu.cc.o\r\n      void Eigen::internal::parallelize_gemm<true, Eigen::internal::gemm_functor<float, long, Eigen::internal::general_matrix_matrix_product<long, float, 0, false, float, 1, false, 0>, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::Stride<0, 0> >, Eigen::Transpose<Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::Stride<0, 0> > const>, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::Stride<0, 0> >, Eigen::internal::gemm_blocking_space<0, float, float, -1, -1, -1, 1, false> >, long>(Eigen::internal::gemm_functor<float, long, Eigen::internal::general_matrix_matrix_product<long, float, 0, false, float, 1, false, 0>, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::Stride<0, 0> >, Eigen::Transpose<Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::Stride<0, 0> > const>, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::Stride<0, 0> >, Eigen::internal::gemm_blocking_space<0, float, float, -1, -1, -1, 1, false> > const&, long, long, long, bool) in math_cpu.cc.o\r\n      void Eigen::internal::parallelize_gemm<true, Eigen::internal::gemm_functor<float, long, Eigen::internal::general_matrix_matrix_product<long, float, 1, false, float, 1, false, 0>, Eigen::Transpose<Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::Stride<0, 0> > const>, Eigen::Transpose<Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::Stride<0, 0> > const>, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::Stride<0, 0> >, Eigen::internal::gemm_blocking_space<0, float, float, -1, -1, -1, 1, false> >, long>(Eigen::internal::gemm_functor<float, long, Eigen::internal::general_matrix_matrix_product<long, float, 1, false, float, 1, false, 0>, Eigen::Transpose<Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::Stride<0, 0> > const>, Eigen::Transpose<Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::Stride<0, 0> > const>, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::Stride<0, 0> >, Eigen::internal::gemm_blocking_space<0, float, float, -1, -1, -1, 1, false> > const&, long, long, long, bool) in math_cpu.cc.o\r\n      void Eigen::internal::parallelize_gemm<true, Eigen::internal::gemm_functor<float, long, Eigen::internal::general_matrix_matrix_product<long, float, 0, false, float, 0, false, 0>, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::OuterStride<-1> >, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::OuterStride<-1> >, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::OuterStride<-1> >, Eigen::internal::gemm_blocking_space<0, float, float, -1, -1, -1, 1, false> >, long>(Eigen::internal::gemm_functor<float, long, Eigen::internal::general_matrix_matrix_product<long, float, 0, false, float, 0, false, 0>, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::OuterStride<-1> >, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::OuterStride<-1> >, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::OuterStride<-1> >, Eigen::internal::gemm_blocking_space<0, float, float, -1, -1, -1, 1, false> > const&, long, long, long, bool) in math_cpu.cc.o\r\n      ...\r\n  \"_omp_get_num_procs\", referenced from:\r\n      _THGetNumCores in THGeneral.cpp.o\r\n  \"_omp_get_num_threads\", referenced from:\r\n      _.omp_outlined. in Embedding.cpp.o\r\n      _.omp_outlined. in SoftMax.cpp.o\r\n      _.omp_outlined..35 in SoftMax.cpp.o\r\n      _.omp_outlined..37 in SoftMax.cpp.o\r\n      _.omp_outlined..38 in SoftMax.cpp.o\r\n      _.omp_outlined..46 in SoftMax.cpp.o\r\n      _.omp_outlined..47 in SoftMax.cpp.o\r\n      ...\r\n  \"_omp_get_thread_num\", referenced from:\r\n      _.omp_outlined. in Embedding.cpp.o\r\n      _.omp_outlined. in SoftMax.cpp.o\r\n      _.omp_outlined..35 in SoftMax.cpp.o\r\n      _.omp_outlined..37 in SoftMax.cpp.o\r\n      _.omp_outlined..38 in SoftMax.cpp.o\r\n      _.omp_outlined..46 in SoftMax.cpp.o\r\n      _.omp_outlined..47 in SoftMax.cpp.o\r\n      ...\r\n  \"_omp_in_parallel\", referenced from:\r\n      _THFloatTensor_copy in THTensorCopy.cpp.o\r\n      _THDoubleTensor_copy in THTensorCopy.cpp.o\r\n      _THByteTensor_copy in THTensorCopy.cpp.o\r\n      _THCharTensor_copy in THTensorCopy.cpp.o\r\n      _THShortTensor_copy in THTensorCopy.cpp.o\r\n      _THIntTensor_copy in THTensorCopy.cpp.o\r\n      _THLongTensor_copy in THTensorCopy.cpp.o\r\n      ...\r\n  \"_omp_set_num_threads\", referenced from:\r\n      _THSetNumThreads in THGeneral.cpp.o\r\n      caffe2::Caffe2SetOpenMPThreads(int*, char***) in init_omp.cc.o\r\nld: symbol(s) not found for architecture x86_64\r\n```", "created_at": "2018-09-12T02:38:16Z", "updated_at": "2018-11-23T15:55:19Z", "closed_at": null, "merged_at": null, "merge_commit_sha": "fd0cb1dbffa60c6b33b54c14a250eee0da11f6fc", "assignee": null, "assignees": [], "requested_reviewers": [{"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, {"login": "colesbury", "id": 655866, "node_id": "MDQ6VXNlcjY1NTg2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/655866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colesbury", "html_url": "https://github.com/colesbury", "followers_url": "https://api.github.com/users/colesbury/followers", "following_url": "https://api.github.com/users/colesbury/following{/other_user}", "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions", "organizations_url": "https://api.github.com/users/colesbury/orgs", "repos_url": "https://api.github.com/users/colesbury/repos", "events_url": "https://api.github.com/users/colesbury/events{/privacy}", "received_events_url": "https://api.github.com/users/colesbury/received_events", "type": "User", "site_admin": false}, {"login": "soumith", "id": 1310570, "node_id": "MDQ6VXNlcjEzMTA1NzA=", "avatar_url": "https://avatars0.githubusercontent.com/u/1310570?v=4", "gravatar_id": "", "url": "https://api.github.com/users/soumith", "html_url": "https://github.com/soumith", "followers_url": "https://api.github.com/users/soumith/followers", "following_url": "https://api.github.com/users/soumith/following{/other_user}", "gists_url": "https://api.github.com/users/soumith/gists{/gist_id}", "starred_url": "https://api.github.com/users/soumith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/soumith/subscriptions", "organizations_url": "https://api.github.com/users/soumith/orgs", "repos_url": "https://api.github.com/users/soumith/repos", "events_url": "https://api.github.com/users/soumith/events{/privacy}", "received_events_url": "https://api.github.com/users/soumith/received_events", "type": "User", "site_admin": false}, {"login": "gchanan", "id": 3768583, "node_id": "MDQ6VXNlcjM3Njg1ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3768583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gchanan", "html_url": "https://github.com/gchanan", "followers_url": "https://api.github.com/users/gchanan/followers", "following_url": "https://api.github.com/users/gchanan/following{/other_user}", "gists_url": "https://api.github.com/users/gchanan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gchanan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gchanan/subscriptions", "organizations_url": "https://api.github.com/users/gchanan/orgs", "repos_url": "https://api.github.com/users/gchanan/repos", "events_url": "https://api.github.com/users/gchanan/events{/privacy}", "received_events_url": "https://api.github.com/users/gchanan/received_events", "type": "User", "site_admin": false}, {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}], "requested_teams": [], "labels": [], "milestone": null, "commits_url": "https://api.github.com/repos/pytorch/pytorch/pulls/11563/commits", "review_comments_url": "https://api.github.com/repos/pytorch/pytorch/pulls/11563/comments", "review_comment_url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments{/number}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/11563/comments", "statuses_url": "https://api.github.com/repos/pytorch/pytorch/statuses/9a4d8be2a8cf801f0bd718de7d5fe516dc29f833", "head": {"label": "JerryShih:openmp-setting", "ref": "openmp-setting", "sha": "9a4d8be2a8cf801f0bd718de7d5fe516dc29f833", "user": {"login": "JerryShih", "id": 5842681, "node_id": "MDQ6VXNlcjU4NDI2ODE=", "avatar_url": "https://avatars3.githubusercontent.com/u/5842681?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JerryShih", "html_url": "https://github.com/JerryShih", "followers_url": "https://api.github.com/users/JerryShih/followers", "following_url": "https://api.github.com/users/JerryShih/following{/other_user}", "gists_url": "https://api.github.com/users/JerryShih/gists{/gist_id}", "starred_url": "https://api.github.com/users/JerryShih/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JerryShih/subscriptions", "organizations_url": "https://api.github.com/users/JerryShih/orgs", "repos_url": "https://api.github.com/users/JerryShih/repos", "events_url": "https://api.github.com/users/JerryShih/events{/privacy}", "received_events_url": "https://api.github.com/users/JerryShih/received_events", "type": "User", "site_admin": false}, "repo": {"id": 133468710, "node_id": "MDEwOlJlcG9zaXRvcnkxMzM0Njg3MTA=", "name": "pytorch", "full_name": "JerryShih/pytorch", "private": false, "owner": {"login": "JerryShih", "id": 5842681, "node_id": "MDQ6VXNlcjU4NDI2ODE=", "avatar_url": "https://avatars3.githubusercontent.com/u/5842681?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JerryShih", "html_url": "https://github.com/JerryShih", "followers_url": "https://api.github.com/users/JerryShih/followers", "following_url": "https://api.github.com/users/JerryShih/following{/other_user}", "gists_url": "https://api.github.com/users/JerryShih/gists{/gist_id}", "starred_url": "https://api.github.com/users/JerryShih/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JerryShih/subscriptions", "organizations_url": "https://api.github.com/users/JerryShih/orgs", "repos_url": "https://api.github.com/users/JerryShih/repos", "events_url": "https://api.github.com/users/JerryShih/events{/privacy}", "received_events_url": "https://api.github.com/users/JerryShih/received_events", "type": "User", "site_admin": false}, "html_url": "https://github.com/JerryShih/pytorch", "description": "Tensors and Dynamic neural networks in Python  with strong GPU acceleration", "fork": true, "url": "https://api.github.com/repos/JerryShih/pytorch", "forks_url": "https://api.github.com/repos/JerryShih/pytorch/forks", "keys_url": "https://api.github.com/repos/JerryShih/pytorch/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/JerryShih/pytorch/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/JerryShih/pytorch/teams", "hooks_url": "https://api.github.com/repos/JerryShih/pytorch/hooks", "issue_events_url": "https://api.github.com/repos/JerryShih/pytorch/issues/events{/number}", "events_url": "https://api.github.com/repos/JerryShih/pytorch/events", "assignees_url": "https://api.github.com/repos/JerryShih/pytorch/assignees{/user}", "branches_url": "https://api.github.com/repos/JerryShih/pytorch/branches{/branch}", "tags_url": "https://api.github.com/repos/JerryShih/pytorch/tags", "blobs_url": "https://api.github.com/repos/JerryShih/pytorch/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/JerryShih/pytorch/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/JerryShih/pytorch/git/refs{/sha}", "trees_url": "https://api.github.com/repos/JerryShih/pytorch/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/JerryShih/pytorch/statuses/{sha}", "languages_url": "https://api.github.com/repos/JerryShih/pytorch/languages", "stargazers_url": "https://api.github.com/repos/JerryShih/pytorch/stargazers", "contributors_url": "https://api.github.com/repos/JerryShih/pytorch/contributors", "subscribers_url": "https://api.github.com/repos/JerryShih/pytorch/subscribers", "subscription_url": "https://api.github.com/repos/JerryShih/pytorch/subscription", "commits_url": "https://api.github.com/repos/JerryShih/pytorch/commits{/sha}", "git_commits_url": "https://api.github.com/repos/JerryShih/pytorch/git/commits{/sha}", "comments_url": "https://api.github.com/repos/JerryShih/pytorch/comments{/number}", "issue_comment_url": "https://api.github.com/repos/JerryShih/pytorch/issues/comments{/number}", "contents_url": "https://api.github.com/repos/JerryShih/pytorch/contents/{+path}", "compare_url": "https://api.github.com/repos/JerryShih/pytorch/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/JerryShih/pytorch/merges", "archive_url": "https://api.github.com/repos/JerryShih/pytorch/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/JerryShih/pytorch/downloads", "issues_url": "https://api.github.com/repos/JerryShih/pytorch/issues{/number}", "pulls_url": "https://api.github.com/repos/JerryShih/pytorch/pulls{/number}", "milestones_url": "https://api.github.com/repos/JerryShih/pytorch/milestones{/number}", "notifications_url": "https://api.github.com/repos/JerryShih/pytorch/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/JerryShih/pytorch/labels{/name}", "releases_url": "https://api.github.com/repos/JerryShih/pytorch/releases{/id}", "deployments_url": "https://api.github.com/repos/JerryShih/pytorch/deployments", "created_at": "2018-05-15T06:22:50Z", "updated_at": "2018-05-15T06:23:01Z", "pushed_at": "2018-11-21T03:22:44Z", "git_url": "git://github.com/JerryShih/pytorch.git", "ssh_url": "git@github.com:JerryShih/pytorch.git", "clone_url": "https://github.com/JerryShih/pytorch.git", "svn_url": "https://github.com/JerryShih/pytorch", "homepage": "http://pytorch.org", "size": 86328, "stargazers_count": 0, "watchers_count": 0, "language": "C++", "has_issues": false, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 0, "mirror_url": null, "archived": false, "open_issues_count": 0, "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "forks": 0, "open_issues": 0, "watchers": 0, "default_branch": "master"}}, "base": {"label": "pytorch:master", "ref": "master", "sha": "1acaafbe7076ca0ef391fe63a40c13d3275d7735", "user": {"login": "pytorch", "id": 21003710, "node_id": "MDEyOk9yZ2FuaXphdGlvbjIxMDAzNzEw", "avatar_url": "https://avatars3.githubusercontent.com/u/21003710?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pytorch", "html_url": "https://github.com/pytorch", "followers_url": "https://api.github.com/users/pytorch/followers", "following_url": "https://api.github.com/users/pytorch/following{/other_user}", "gists_url": "https://api.github.com/users/pytorch/gists{/gist_id}", "starred_url": "https://api.github.com/users/pytorch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pytorch/subscriptions", "organizations_url": "https://api.github.com/users/pytorch/orgs", "repos_url": "https://api.github.com/users/pytorch/repos", "events_url": "https://api.github.com/users/pytorch/events{/privacy}", "received_events_url": "https://api.github.com/users/pytorch/received_events", "type": "Organization", "site_admin": false}, "repo": {"id": 65600975, "node_id": "MDEwOlJlcG9zaXRvcnk2NTYwMDk3NQ==", "name": "pytorch", "full_name": "pytorch/pytorch", "private": false, "owner": {"login": "pytorch", "id": 21003710, "node_id": "MDEyOk9yZ2FuaXphdGlvbjIxMDAzNzEw", "avatar_url": "https://avatars3.githubusercontent.com/u/21003710?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pytorch", "html_url": "https://github.com/pytorch", "followers_url": "https://api.github.com/users/pytorch/followers", "following_url": "https://api.github.com/users/pytorch/following{/other_user}", "gists_url": "https://api.github.com/users/pytorch/gists{/gist_id}", "starred_url": "https://api.github.com/users/pytorch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pytorch/subscriptions", "organizations_url": "https://api.github.com/users/pytorch/orgs", "repos_url": "https://api.github.com/users/pytorch/repos", "events_url": "https://api.github.com/users/pytorch/events{/privacy}", "received_events_url": "https://api.github.com/users/pytorch/received_events", "type": "Organization", "site_admin": false}, "html_url": "https://github.com/pytorch/pytorch", "description": "Tensors and Dynamic neural networks in Python  with strong GPU acceleration", "fork": false, "url": "https://api.github.com/repos/pytorch/pytorch", "forks_url": "https://api.github.com/repos/pytorch/pytorch/forks", "keys_url": "https://api.github.com/repos/pytorch/pytorch/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/pytorch/pytorch/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/pytorch/pytorch/teams", "hooks_url": "https://api.github.com/repos/pytorch/pytorch/hooks", "issue_events_url": "https://api.github.com/repos/pytorch/pytorch/issues/events{/number}", "events_url": "https://api.github.com/repos/pytorch/pytorch/events", "assignees_url": "https://api.github.com/repos/pytorch/pytorch/assignees{/user}", "branches_url": "https://api.github.com/repos/pytorch/pytorch/branches{/branch}", "tags_url": "https://api.github.com/repos/pytorch/pytorch/tags", "blobs_url": "https://api.github.com/repos/pytorch/pytorch/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/pytorch/pytorch/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/pytorch/pytorch/git/refs{/sha}", "trees_url": "https://api.github.com/repos/pytorch/pytorch/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/pytorch/pytorch/statuses/{sha}", "languages_url": "https://api.github.com/repos/pytorch/pytorch/languages", "stargazers_url": "https://api.github.com/repos/pytorch/pytorch/stargazers", "contributors_url": "https://api.github.com/repos/pytorch/pytorch/contributors", "subscribers_url": "https://api.github.com/repos/pytorch/pytorch/subscribers", "subscription_url": "https://api.github.com/repos/pytorch/pytorch/subscription", "commits_url": "https://api.github.com/repos/pytorch/pytorch/commits{/sha}", "git_commits_url": "https://api.github.com/repos/pytorch/pytorch/git/commits{/sha}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/comments{/number}", "issue_comment_url": "https://api.github.com/repos/pytorch/pytorch/issues/comments{/number}", "contents_url": "https://api.github.com/repos/pytorch/pytorch/contents/{+path}", "compare_url": "https://api.github.com/repos/pytorch/pytorch/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/pytorch/pytorch/merges", "archive_url": "https://api.github.com/repos/pytorch/pytorch/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/pytorch/pytorch/downloads", "issues_url": "https://api.github.com/repos/pytorch/pytorch/issues{/number}", "pulls_url": "https://api.github.com/repos/pytorch/pytorch/pulls{/number}", "milestones_url": "https://api.github.com/repos/pytorch/pytorch/milestones{/number}", "notifications_url": "https://api.github.com/repos/pytorch/pytorch/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/pytorch/pytorch/labels{/name}", "releases_url": "https://api.github.com/repos/pytorch/pytorch/releases{/id}", "deployments_url": "https://api.github.com/repos/pytorch/pytorch/deployments", "created_at": "2016-08-13T05:26:41Z", "updated_at": "2018-11-24T15:34:47Z", "pushed_at": "2018-11-24T12:42:01Z", "git_url": "git://github.com/pytorch/pytorch.git", "ssh_url": "git@github.com:pytorch/pytorch.git", "clone_url": "https://github.com/pytorch/pytorch.git", "svn_url": "https://github.com/pytorch/pytorch", "homepage": "http://pytorch.org", "size": 89656, "stargazers_count": 21592, "watchers_count": 21592, "language": "C++", "has_issues": true, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 5154, "mirror_url": null, "archived": false, "open_issues_count": 2196, "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "forks": 5154, "open_issues": 2196, "watchers": 21592, "default_branch": "master"}}, "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/11563"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/11563"}, "issue": {"href": "https://api.github.com/repos/pytorch/pytorch/issues/11563"}, "comments": {"href": "https://api.github.com/repos/pytorch/pytorch/issues/11563/comments"}, "review_comments": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/11563/comments"}, "review_comment": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments{/number}"}, "commits": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/11563/commits"}, "statuses": {"href": "https://api.github.com/repos/pytorch/pytorch/statuses/9a4d8be2a8cf801f0bd718de7d5fe516dc29f833"}}, "author_association": "CONTRIBUTOR", "body_html": "<p>Fix the link OpenMP link error for AppleClang 9.0 compiler.</p>\n<p>Built with the following command:<br>\npython setup.py build develop</p>\n<p>The error message:</p>\n<pre><code>Undefined symbols for architecture x86_64:\n  \"___kmpc_critical\", referenced from:\n      _THFloatTensor_addmm in THTensorMath.cpp.o\n      _THDoubleTensor_addmm in THTensorMath.cpp.o\n      _THByteTensor_addmm in THTensorMath.cpp.o\n      _THCharTensor_addmm in THTensorMath.cpp.o\n      _THShortTensor_addmm in THTensorMath.cpp.o\n      _THIntTensor_addmm in THTensorMath.cpp.o\n      _THLongTensor_addmm in THTensorMath.cpp.o\n      ...\n  \"___kmpc_end_critical\", referenced from:\n      _THFloatTensor_addmm in THTensorMath.cpp.o\n      _THDoubleTensor_addmm in THTensorMath.cpp.o\n      _THByteTensor_addmm in THTensorMath.cpp.o\n      _THCharTensor_addmm in THTensorMath.cpp.o\n      _THShortTensor_addmm in THTensorMath.cpp.o\n      _THIntTensor_addmm in THTensorMath.cpp.o\n      _THLongTensor_addmm in THTensorMath.cpp.o\n      ...\n  \"___kmpc_end_reduce_nowait\", referenced from:\n      _.omp_outlined..270 in THTensorMoreMath.cpp.o\n      _.omp_outlined..271 in THTensorMoreMath.cpp.o\n      _.omp_outlined..273 in THTensorMoreMath.cpp.o\n      _.omp_outlined..275 in THTensorMoreMath.cpp.o\n      _.omp_outlined..43 in THTensorEvenMoreMath.cpp.o\n      _.omp_outlined..44 in THTensorEvenMoreMath.cpp.o\n      _.omp_outlined..46 in THTensorEvenMoreMath.cpp.o\n      ...\n  \"___kmpc_end_serialized_parallel\", referenced from:\n      at::native::embedding_renorm_cpu_(at::Tensor&amp;, at::Tensor const&amp;, double, double) in Embedding.cpp.o\n      at::native::_embedding_bag_dense_backward_cpu(at::Tensor const&amp;, at::Tensor const&amp;, at::Tensor const&amp;, at::Tensor const&amp;, at::Tensor const&amp;, at::Tensor const&amp;, long long, bool, long long) in EmbeddingBag.cpp.o\n      at::native::softmax_cpu(at::Tensor const&amp;, long long) in SoftMax.cpp.o\n      at::native::log_softmax_cpu(at::Tensor const&amp;, long long) in SoftMax.cpp.o\n      at::native::softmax_backward_cpu(at::Tensor const&amp;, at::Tensor const&amp;, long long, at::Tensor const&amp;) in SoftMax.cpp.o\n      at::native::log_softmax_backward_cpu(at::Tensor const&amp;, at::Tensor const&amp;, long long, at::Tensor const&amp;) in SoftMax.cpp.o\n      at::TensorIterator::for_each(std::__1::function&lt;void (int, char**, long long const*, long long)&gt; const&amp;) in TensorIterator.cpp.o\n      ...\n  \"___kmpc_for_static_fini\", referenced from:\n      _.omp_outlined..9 in Embedding.cpp.o\n      _.omp_outlined. in EmbeddingBag.cpp.o\n      _.omp_outlined. in GridSampler.cpp.o\n      _.omp_outlined..42 in GridSampler.cpp.o\n      _.omp_outlined..44 in GridSampler.cpp.o\n      _.omp_outlined..45 in GridSampler.cpp.o\n      _.omp_outlined..47 in GridSampler.cpp.o\n      ...\n  \"___kmpc_for_static_init_4\", referenced from:\n      _.omp_outlined. in init.cpp.o\n      _.omp_outlined..35 in init.cpp.o\n      _.omp_outlined..36 in init.cpp.o\n      _.omp_outlined..37 in init.cpp.o\n      _.omp_outlined..49 in init.cpp.o\n      _.omp_outlined..52 in init.cpp.o\n      _.omp_outlined..220 in init.cpp.o\n      ...\n  \"___kmpc_for_static_init_8\", referenced from:\n      _.omp_outlined..9 in Embedding.cpp.o\n      _.omp_outlined. in EmbeddingBag.cpp.o\n      _.omp_outlined. in GridSampler.cpp.o\n      _.omp_outlined..42 in GridSampler.cpp.o\n      _.omp_outlined..44 in GridSampler.cpp.o\n      _.omp_outlined..45 in GridSampler.cpp.o\n      _.omp_outlined..47 in GridSampler.cpp.o\n      ...\n  \"___kmpc_for_static_init_8u\", referenced from:\n      _.omp_outlined..203 in init.cpp.o\n      _.omp_outlined..207 in init.cpp.o\n      _.omp_outlined..209 in init.cpp.o\n      _.omp_outlined..210 in init.cpp.o\n  \"___kmpc_fork_call\", referenced from:\n      at::native::embedding_dense_backward_cpu(at::Tensor const&amp;, at::Tensor const&amp;, long long, long long, bool) in Embedding.cpp.o\n      at::native::embedding_renorm_cpu_(at::Tensor&amp;, at::Tensor const&amp;, double, double) in Embedding.cpp.o\n      at::native::_embedding_bag_dense_backward_cpu(at::Tensor const&amp;, at::Tensor const&amp;, at::Tensor const&amp;, at::Tensor const&amp;, at::Tensor const&amp;, at::Tensor const&amp;, long long, bool, long long) in EmbeddingBag.cpp.o\n      at::native::grid_sampler_2d_cpu(at::Tensor const&amp;, at::Tensor const&amp;, long long, long long) in GridSampler.cpp.o\n      at::native::grid_sampler_3d_cpu(at::Tensor const&amp;, at::Tensor const&amp;, long long, long long) in GridSampler.cpp.o\n      at::native::grid_sampler_2d_backward_cpu(at::Tensor const&amp;, at::Tensor const&amp;, at::Tensor const&amp;, long long, long long) in GridSampler.cpp.o\n      at::native::grid_sampler_3d_backward_cpu(at::Tensor const&amp;, at::Tensor const&amp;, at::Tensor const&amp;, long long, long long) in GridSampler.cpp.o\n      ...\n  \"___kmpc_global_thread_num\", referenced from:\n      at::native::embedding_renorm_cpu_(at::Tensor&amp;, at::Tensor const&amp;, double, double) in Embedding.cpp.o\n      at::native::_embedding_bag_dense_backward_cpu(at::Tensor const&amp;, at::Tensor const&amp;, at::Tensor const&amp;, at::Tensor const&amp;, at::Tensor const&amp;, at::Tensor const&amp;, long long, bool, long long) in EmbeddingBag.cpp.o\n      at::native::softmax_cpu(at::Tensor const&amp;, long long) in SoftMax.cpp.o\n      at::native::log_softmax_cpu(at::Tensor const&amp;, long long) in SoftMax.cpp.o\n      at::native::softmax_backward_cpu(at::Tensor const&amp;, at::Tensor const&amp;, long long, at::Tensor const&amp;) in SoftMax.cpp.o\n      at::native::log_softmax_backward_cpu(at::Tensor const&amp;, at::Tensor const&amp;, long long, at::Tensor const&amp;) in SoftMax.cpp.o\n      at::TensorIterator::for_each(std::__1::function&lt;void (int, char**, long long const*, long long)&gt; const&amp;) in TensorIterator.cpp.o\n      ...\n  \"___kmpc_push_num_threads\", referenced from:\n      void Eigen::internal::parallelize_gemm&lt;true, Eigen::internal::gemm_functor&lt;float, long, Eigen::internal::general_matrix_matrix_product&lt;long, float, 0, false, float, 0, false, 0&gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::internal::gemm_blocking_space&lt;0, float, float, -1, -1, -1, 1, false&gt; &gt;, long&gt;(Eigen::internal::gemm_functor&lt;float, long, Eigen::internal::general_matrix_matrix_product&lt;long, float, 0, false, float, 0, false, 0&gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::internal::gemm_blocking_space&lt;0, float, float, -1, -1, -1, 1, false&gt; &gt; const&amp;, long, long, long, bool) in math_cpu.cc.o\n      void Eigen::internal::parallelize_gemm&lt;true, Eigen::internal::gemm_functor&lt;float, long, Eigen::internal::general_matrix_matrix_product&lt;long, float, 1, false, float, 0, false, 0&gt;, Eigen::Transpose&lt;Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt; const&gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::internal::gemm_blocking_space&lt;0, float, float, -1, -1, -1, 1, false&gt; &gt;, long&gt;(Eigen::internal::gemm_functor&lt;float, long, Eigen::internal::general_matrix_matrix_product&lt;long, float, 1, false, float, 0, false, 0&gt;, Eigen::Transpose&lt;Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt; const&gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::internal::gemm_blocking_space&lt;0, float, float, -1, -1, -1, 1, false&gt; &gt; const&amp;, long, long, long, bool) in math_cpu.cc.o\n      void Eigen::internal::parallelize_gemm&lt;true, Eigen::internal::gemm_functor&lt;float, long, Eigen::internal::general_matrix_matrix_product&lt;long, float, 0, false, float, 1, false, 0&gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Transpose&lt;Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt; const&gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::internal::gemm_blocking_space&lt;0, float, float, -1, -1, -1, 1, false&gt; &gt;, long&gt;(Eigen::internal::gemm_functor&lt;float, long, Eigen::internal::general_matrix_matrix_product&lt;long, float, 0, false, float, 1, false, 0&gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Transpose&lt;Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt; const&gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::internal::gemm_blocking_space&lt;0, float, float, -1, -1, -1, 1, false&gt; &gt; const&amp;, long, long, long, bool) in math_cpu.cc.o\n      void Eigen::internal::parallelize_gemm&lt;true, Eigen::internal::gemm_functor&lt;float, long, Eigen::internal::general_matrix_matrix_product&lt;long, float, 1, false, float, 1, false, 0&gt;, Eigen::Transpose&lt;Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt; const&gt;, Eigen::Transpose&lt;Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt; const&gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::internal::gemm_blocking_space&lt;0, float, float, -1, -1, -1, 1, false&gt; &gt;, long&gt;(Eigen::internal::gemm_functor&lt;float, long, Eigen::internal::general_matrix_matrix_product&lt;long, float, 1, false, float, 1, false, 0&gt;, Eigen::Transpose&lt;Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt; const&gt;, Eigen::Transpose&lt;Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt; const&gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::internal::gemm_blocking_space&lt;0, float, float, -1, -1, -1, 1, false&gt; &gt; const&amp;, long, long, long, bool) in math_cpu.cc.o\n      void Eigen::internal::parallelize_gemm&lt;true, Eigen::internal::gemm_functor&lt;float, long, Eigen::internal::general_matrix_matrix_product&lt;long, float, 0, false, float, 0, false, 0&gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; const, 0, Eigen::OuterStride&lt;-1&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; const, 0, Eigen::OuterStride&lt;-1&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt;, 0, Eigen::OuterStride&lt;-1&gt; &gt;, Eigen::internal::gemm_blocking_space&lt;0, float, float, -1, -1, -1, 1, false&gt; &gt;, long&gt;(Eigen::internal::gemm_functor&lt;float, long, Eigen::internal::general_matrix_matrix_product&lt;long, float, 0, false, float, 0, false, 0&gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; const, 0, Eigen::OuterStride&lt;-1&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; const, 0, Eigen::OuterStride&lt;-1&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt;, 0, Eigen::OuterStride&lt;-1&gt; &gt;, Eigen::internal::gemm_blocking_space&lt;0, float, float, -1, -1, -1, 1, false&gt; &gt; const&amp;, long, long, long, bool) in math_cpu.cc.o\n      void Eigen::internal::parallelize_gemm&lt;true, Eigen::internal::gemm_functor&lt;float, long, Eigen::internal::general_matrix_matrix_product&lt;long, float, 1, false, float, 0, false, 0&gt;, Eigen::Transpose&lt;Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; const, 0, Eigen::OuterStride&lt;-1&gt; &gt; const&gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; const, 0, Eigen::OuterStride&lt;-1&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt;, 0, Eigen::OuterStride&lt;-1&gt; &gt;, Eigen::internal::gemm_blocking_space&lt;0, float, float, -1, -1, -1, 1, false&gt; &gt;, long&gt;(Eigen::internal::gemm_functor&lt;float, long, Eigen::internal::general_matrix_matrix_product&lt;long, float, 1, false, float, 0, false, 0&gt;, Eigen::Transpose&lt;Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; const, 0, Eigen::OuterStride&lt;-1&gt; &gt; const&gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; const, 0, Eigen::OuterStride&lt;-1&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt;, 0, Eigen::OuterStride&lt;-1&gt; &gt;, Eigen::internal::gemm_blocking_space&lt;0, float, float, -1, -1, -1, 1, false&gt; &gt; const&amp;, long, long, long, bool) in math_cpu.cc.o\n      void Eigen::internal::parallelize_gemm&lt;true, Eigen::internal::gemm_functor&lt;float, long, Eigen::internal::general_matrix_matrix_product&lt;long, float, 0, false, float, 1, false, 0&gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; const, 0, Eigen::OuterStride&lt;-1&gt; &gt;, Eigen::Transpose&lt;Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; const, 0, Eigen::OuterStride&lt;-1&gt; &gt; const&gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt;, 0, Eigen::OuterStride&lt;-1&gt; &gt;, Eigen::internal::gemm_blocking_space&lt;0, float, float, -1, -1, -1, 1, false&gt; &gt;, long&gt;(Eigen::internal::gemm_functor&lt;float, long, Eigen::internal::general_matrix_matrix_product&lt;long, float, 0, false, float, 1, false, 0&gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; const, 0, Eigen::OuterStride&lt;-1&gt; &gt;, Eigen::Transpose&lt;Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; const, 0, Eigen::OuterStride&lt;-1&gt; &gt; const&gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt;, 0, Eigen::OuterStride&lt;-1&gt; &gt;, Eigen::internal::gemm_blocking_space&lt;0, float, float, -1, -1, -1, 1, false&gt; &gt; const&amp;, long, long, long, bool) in math_cpu.cc.o\n      ...\n  \"___kmpc_reduce_nowait\", referenced from:\n      _.omp_outlined..270 in THTensorMoreMath.cpp.o\n      _.omp_outlined..271 in THTensorMoreMath.cpp.o\n      _.omp_outlined..273 in THTensorMoreMath.cpp.o\n      _.omp_outlined..275 in THTensorMoreMath.cpp.o\n      _.omp_outlined..43 in THTensorEvenMoreMath.cpp.o\n      _.omp_outlined..44 in THTensorEvenMoreMath.cpp.o\n      _.omp_outlined..46 in THTensorEvenMoreMath.cpp.o\n      ...\n  \"___kmpc_serialized_parallel\", referenced from:\n      at::native::embedding_renorm_cpu_(at::Tensor&amp;, at::Tensor const&amp;, double, double) in Embedding.cpp.o\n      at::native::_embedding_bag_dense_backward_cpu(at::Tensor const&amp;, at::Tensor const&amp;, at::Tensor const&amp;, at::Tensor const&amp;, at::Tensor const&amp;, at::Tensor const&amp;, long long, bool, long long) in EmbeddingBag.cpp.o\n      at::native::softmax_cpu(at::Tensor const&amp;, long long) in SoftMax.cpp.o\n      at::native::log_softmax_cpu(at::Tensor const&amp;, long long) in SoftMax.cpp.o\n      at::native::softmax_backward_cpu(at::Tensor const&amp;, at::Tensor const&amp;, long long, at::Tensor const&amp;) in SoftMax.cpp.o\n      at::native::log_softmax_backward_cpu(at::Tensor const&amp;, at::Tensor const&amp;, long long, at::Tensor const&amp;) in SoftMax.cpp.o\n      at::TensorIterator::for_each(std::__1::function&lt;void (int, char**, long long const*, long long)&gt; const&amp;) in TensorIterator.cpp.o\n      ...\n  \"_omp_get_max_threads\", referenced from:\n      _THGetNumThreads in THGeneral.cpp.o\n      caffe2::Caffe2SetOpenMPThreads(int*, char***) in init_omp.cc.o\n      void Eigen::internal::parallelize_gemm&lt;true, Eigen::internal::gemm_functor&lt;float, long, Eigen::internal::general_matrix_matrix_product&lt;long, float, 0, false, float, 0, false, 0&gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::internal::gemm_blocking_space&lt;0, float, float, -1, -1, -1, 1, false&gt; &gt;, long&gt;(Eigen::internal::gemm_functor&lt;float, long, Eigen::internal::general_matrix_matrix_product&lt;long, float, 0, false, float, 0, false, 0&gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::internal::gemm_blocking_space&lt;0, float, float, -1, -1, -1, 1, false&gt; &gt; const&amp;, long, long, long, bool) in math_cpu.cc.o\n      void Eigen::internal::parallelize_gemm&lt;true, Eigen::internal::gemm_functor&lt;float, long, Eigen::internal::general_matrix_matrix_product&lt;long, float, 1, false, float, 0, false, 0&gt;, Eigen::Transpose&lt;Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt; const&gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::internal::gemm_blocking_space&lt;0, float, float, -1, -1, -1, 1, false&gt; &gt;, long&gt;(Eigen::internal::gemm_functor&lt;float, long, Eigen::internal::general_matrix_matrix_product&lt;long, float, 1, false, float, 0, false, 0&gt;, Eigen::Transpose&lt;Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt; const&gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::internal::gemm_blocking_space&lt;0, float, float, -1, -1, -1, 1, false&gt; &gt; const&amp;, long, long, long, bool) in math_cpu.cc.o\n      void Eigen::internal::parallelize_gemm&lt;true, Eigen::internal::gemm_functor&lt;float, long, Eigen::internal::general_matrix_matrix_product&lt;long, float, 0, false, float, 1, false, 0&gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Transpose&lt;Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt; const&gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::internal::gemm_blocking_space&lt;0, float, float, -1, -1, -1, 1, false&gt; &gt;, long&gt;(Eigen::internal::gemm_functor&lt;float, long, Eigen::internal::general_matrix_matrix_product&lt;long, float, 0, false, float, 1, false, 0&gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Transpose&lt;Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt; const&gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::internal::gemm_blocking_space&lt;0, float, float, -1, -1, -1, 1, false&gt; &gt; const&amp;, long, long, long, bool) in math_cpu.cc.o\n      void Eigen::internal::parallelize_gemm&lt;true, Eigen::internal::gemm_functor&lt;float, long, Eigen::internal::general_matrix_matrix_product&lt;long, float, 1, false, float, 1, false, 0&gt;, Eigen::Transpose&lt;Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt; const&gt;, Eigen::Transpose&lt;Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt; const&gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::internal::gemm_blocking_space&lt;0, float, float, -1, -1, -1, 1, false&gt; &gt;, long&gt;(Eigen::internal::gemm_functor&lt;float, long, Eigen::internal::general_matrix_matrix_product&lt;long, float, 1, false, float, 1, false, 0&gt;, Eigen::Transpose&lt;Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt; const&gt;, Eigen::Transpose&lt;Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt; const&gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::internal::gemm_blocking_space&lt;0, float, float, -1, -1, -1, 1, false&gt; &gt; const&amp;, long, long, long, bool) in math_cpu.cc.o\n      void Eigen::internal::parallelize_gemm&lt;true, Eigen::internal::gemm_functor&lt;float, long, Eigen::internal::general_matrix_matrix_product&lt;long, float, 0, false, float, 0, false, 0&gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; const, 0, Eigen::OuterStride&lt;-1&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; const, 0, Eigen::OuterStride&lt;-1&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt;, 0, Eigen::OuterStride&lt;-1&gt; &gt;, Eigen::internal::gemm_blocking_space&lt;0, float, float, -1, -1, -1, 1, false&gt; &gt;, long&gt;(Eigen::internal::gemm_functor&lt;float, long, Eigen::internal::general_matrix_matrix_product&lt;long, float, 0, false, float, 0, false, 0&gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; const, 0, Eigen::OuterStride&lt;-1&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; const, 0, Eigen::OuterStride&lt;-1&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt;, 0, Eigen::OuterStride&lt;-1&gt; &gt;, Eigen::internal::gemm_blocking_space&lt;0, float, float, -1, -1, -1, 1, false&gt; &gt; const&amp;, long, long, long, bool) in math_cpu.cc.o\n      ...\n  \"_omp_get_num_procs\", referenced from:\n      _THGetNumCores in THGeneral.cpp.o\n  \"_omp_get_num_threads\", referenced from:\n      _.omp_outlined. in Embedding.cpp.o\n      _.omp_outlined. in SoftMax.cpp.o\n      _.omp_outlined..35 in SoftMax.cpp.o\n      _.omp_outlined..37 in SoftMax.cpp.o\n      _.omp_outlined..38 in SoftMax.cpp.o\n      _.omp_outlined..46 in SoftMax.cpp.o\n      _.omp_outlined..47 in SoftMax.cpp.o\n      ...\n  \"_omp_get_thread_num\", referenced from:\n      _.omp_outlined. in Embedding.cpp.o\n      _.omp_outlined. in SoftMax.cpp.o\n      _.omp_outlined..35 in SoftMax.cpp.o\n      _.omp_outlined..37 in SoftMax.cpp.o\n      _.omp_outlined..38 in SoftMax.cpp.o\n      _.omp_outlined..46 in SoftMax.cpp.o\n      _.omp_outlined..47 in SoftMax.cpp.o\n      ...\n  \"_omp_in_parallel\", referenced from:\n      _THFloatTensor_copy in THTensorCopy.cpp.o\n      _THDoubleTensor_copy in THTensorCopy.cpp.o\n      _THByteTensor_copy in THTensorCopy.cpp.o\n      _THCharTensor_copy in THTensorCopy.cpp.o\n      _THShortTensor_copy in THTensorCopy.cpp.o\n      _THIntTensor_copy in THTensorCopy.cpp.o\n      _THLongTensor_copy in THTensorCopy.cpp.o\n      ...\n  \"_omp_set_num_threads\", referenced from:\n      _THSetNumThreads in THGeneral.cpp.o\n      caffe2::Caffe2SetOpenMPThreads(int*, char***) in init_omp.cc.o\nld: symbol(s) not found for architecture x86_64\n</code></pre>", "body_text": "Fix the link OpenMP link error for AppleClang 9.0 compiler.\nBuilt with the following command:\npython setup.py build develop\nThe error message:\nUndefined symbols for architecture x86_64:\n  \"___kmpc_critical\", referenced from:\n      _THFloatTensor_addmm in THTensorMath.cpp.o\n      _THDoubleTensor_addmm in THTensorMath.cpp.o\n      _THByteTensor_addmm in THTensorMath.cpp.o\n      _THCharTensor_addmm in THTensorMath.cpp.o\n      _THShortTensor_addmm in THTensorMath.cpp.o\n      _THIntTensor_addmm in THTensorMath.cpp.o\n      _THLongTensor_addmm in THTensorMath.cpp.o\n      ...\n  \"___kmpc_end_critical\", referenced from:\n      _THFloatTensor_addmm in THTensorMath.cpp.o\n      _THDoubleTensor_addmm in THTensorMath.cpp.o\n      _THByteTensor_addmm in THTensorMath.cpp.o\n      _THCharTensor_addmm in THTensorMath.cpp.o\n      _THShortTensor_addmm in THTensorMath.cpp.o\n      _THIntTensor_addmm in THTensorMath.cpp.o\n      _THLongTensor_addmm in THTensorMath.cpp.o\n      ...\n  \"___kmpc_end_reduce_nowait\", referenced from:\n      _.omp_outlined..270 in THTensorMoreMath.cpp.o\n      _.omp_outlined..271 in THTensorMoreMath.cpp.o\n      _.omp_outlined..273 in THTensorMoreMath.cpp.o\n      _.omp_outlined..275 in THTensorMoreMath.cpp.o\n      _.omp_outlined..43 in THTensorEvenMoreMath.cpp.o\n      _.omp_outlined..44 in THTensorEvenMoreMath.cpp.o\n      _.omp_outlined..46 in THTensorEvenMoreMath.cpp.o\n      ...\n  \"___kmpc_end_serialized_parallel\", referenced from:\n      at::native::embedding_renorm_cpu_(at::Tensor&, at::Tensor const&, double, double) in Embedding.cpp.o\n      at::native::_embedding_bag_dense_backward_cpu(at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, long long, bool, long long) in EmbeddingBag.cpp.o\n      at::native::softmax_cpu(at::Tensor const&, long long) in SoftMax.cpp.o\n      at::native::log_softmax_cpu(at::Tensor const&, long long) in SoftMax.cpp.o\n      at::native::softmax_backward_cpu(at::Tensor const&, at::Tensor const&, long long, at::Tensor const&) in SoftMax.cpp.o\n      at::native::log_softmax_backward_cpu(at::Tensor const&, at::Tensor const&, long long, at::Tensor const&) in SoftMax.cpp.o\n      at::TensorIterator::for_each(std::__1::function<void (int, char**, long long const*, long long)> const&) in TensorIterator.cpp.o\n      ...\n  \"___kmpc_for_static_fini\", referenced from:\n      _.omp_outlined..9 in Embedding.cpp.o\n      _.omp_outlined. in EmbeddingBag.cpp.o\n      _.omp_outlined. in GridSampler.cpp.o\n      _.omp_outlined..42 in GridSampler.cpp.o\n      _.omp_outlined..44 in GridSampler.cpp.o\n      _.omp_outlined..45 in GridSampler.cpp.o\n      _.omp_outlined..47 in GridSampler.cpp.o\n      ...\n  \"___kmpc_for_static_init_4\", referenced from:\n      _.omp_outlined. in init.cpp.o\n      _.omp_outlined..35 in init.cpp.o\n      _.omp_outlined..36 in init.cpp.o\n      _.omp_outlined..37 in init.cpp.o\n      _.omp_outlined..49 in init.cpp.o\n      _.omp_outlined..52 in init.cpp.o\n      _.omp_outlined..220 in init.cpp.o\n      ...\n  \"___kmpc_for_static_init_8\", referenced from:\n      _.omp_outlined..9 in Embedding.cpp.o\n      _.omp_outlined. in EmbeddingBag.cpp.o\n      _.omp_outlined. in GridSampler.cpp.o\n      _.omp_outlined..42 in GridSampler.cpp.o\n      _.omp_outlined..44 in GridSampler.cpp.o\n      _.omp_outlined..45 in GridSampler.cpp.o\n      _.omp_outlined..47 in GridSampler.cpp.o\n      ...\n  \"___kmpc_for_static_init_8u\", referenced from:\n      _.omp_outlined..203 in init.cpp.o\n      _.omp_outlined..207 in init.cpp.o\n      _.omp_outlined..209 in init.cpp.o\n      _.omp_outlined..210 in init.cpp.o\n  \"___kmpc_fork_call\", referenced from:\n      at::native::embedding_dense_backward_cpu(at::Tensor const&, at::Tensor const&, long long, long long, bool) in Embedding.cpp.o\n      at::native::embedding_renorm_cpu_(at::Tensor&, at::Tensor const&, double, double) in Embedding.cpp.o\n      at::native::_embedding_bag_dense_backward_cpu(at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, long long, bool, long long) in EmbeddingBag.cpp.o\n      at::native::grid_sampler_2d_cpu(at::Tensor const&, at::Tensor const&, long long, long long) in GridSampler.cpp.o\n      at::native::grid_sampler_3d_cpu(at::Tensor const&, at::Tensor const&, long long, long long) in GridSampler.cpp.o\n      at::native::grid_sampler_2d_backward_cpu(at::Tensor const&, at::Tensor const&, at::Tensor const&, long long, long long) in GridSampler.cpp.o\n      at::native::grid_sampler_3d_backward_cpu(at::Tensor const&, at::Tensor const&, at::Tensor const&, long long, long long) in GridSampler.cpp.o\n      ...\n  \"___kmpc_global_thread_num\", referenced from:\n      at::native::embedding_renorm_cpu_(at::Tensor&, at::Tensor const&, double, double) in Embedding.cpp.o\n      at::native::_embedding_bag_dense_backward_cpu(at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, long long, bool, long long) in EmbeddingBag.cpp.o\n      at::native::softmax_cpu(at::Tensor const&, long long) in SoftMax.cpp.o\n      at::native::log_softmax_cpu(at::Tensor const&, long long) in SoftMax.cpp.o\n      at::native::softmax_backward_cpu(at::Tensor const&, at::Tensor const&, long long, at::Tensor const&) in SoftMax.cpp.o\n      at::native::log_softmax_backward_cpu(at::Tensor const&, at::Tensor const&, long long, at::Tensor const&) in SoftMax.cpp.o\n      at::TensorIterator::for_each(std::__1::function<void (int, char**, long long const*, long long)> const&) in TensorIterator.cpp.o\n      ...\n  \"___kmpc_push_num_threads\", referenced from:\n      void Eigen::internal::parallelize_gemm<true, Eigen::internal::gemm_functor<float, long, Eigen::internal::general_matrix_matrix_product<long, float, 0, false, float, 0, false, 0>, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::Stride<0, 0> >, Eigen::internal::gemm_blocking_space<0, float, float, -1, -1, -1, 1, false> >, long>(Eigen::internal::gemm_functor<float, long, Eigen::internal::general_matrix_matrix_product<long, float, 0, false, float, 0, false, 0>, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::Stride<0, 0> >, Eigen::internal::gemm_blocking_space<0, float, float, -1, -1, -1, 1, false> > const&, long, long, long, bool) in math_cpu.cc.o\n      void Eigen::internal::parallelize_gemm<true, Eigen::internal::gemm_functor<float, long, Eigen::internal::general_matrix_matrix_product<long, float, 1, false, float, 0, false, 0>, Eigen::Transpose<Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::Stride<0, 0> > const>, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::Stride<0, 0> >, Eigen::internal::gemm_blocking_space<0, float, float, -1, -1, -1, 1, false> >, long>(Eigen::internal::gemm_functor<float, long, Eigen::internal::general_matrix_matrix_product<long, float, 1, false, float, 0, false, 0>, Eigen::Transpose<Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::Stride<0, 0> > const>, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::Stride<0, 0> >, Eigen::internal::gemm_blocking_space<0, float, float, -1, -1, -1, 1, false> > const&, long, long, long, bool) in math_cpu.cc.o\n      void Eigen::internal::parallelize_gemm<true, Eigen::internal::gemm_functor<float, long, Eigen::internal::general_matrix_matrix_product<long, float, 0, false, float, 1, false, 0>, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::Stride<0, 0> >, Eigen::Transpose<Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::Stride<0, 0> > const>, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::Stride<0, 0> >, Eigen::internal::gemm_blocking_space<0, float, float, -1, -1, -1, 1, false> >, long>(Eigen::internal::gemm_functor<float, long, Eigen::internal::general_matrix_matrix_product<long, float, 0, false, float, 1, false, 0>, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::Stride<0, 0> >, Eigen::Transpose<Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::Stride<0, 0> > const>, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::Stride<0, 0> >, Eigen::internal::gemm_blocking_space<0, float, float, -1, -1, -1, 1, false> > const&, long, long, long, bool) in math_cpu.cc.o\n      void Eigen::internal::parallelize_gemm<true, Eigen::internal::gemm_functor<float, long, Eigen::internal::general_matrix_matrix_product<long, float, 1, false, float, 1, false, 0>, Eigen::Transpose<Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::Stride<0, 0> > const>, Eigen::Transpose<Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::Stride<0, 0> > const>, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::Stride<0, 0> >, Eigen::internal::gemm_blocking_space<0, float, float, -1, -1, -1, 1, false> >, long>(Eigen::internal::gemm_functor<float, long, Eigen::internal::general_matrix_matrix_product<long, float, 1, false, float, 1, false, 0>, Eigen::Transpose<Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::Stride<0, 0> > const>, Eigen::Transpose<Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::Stride<0, 0> > const>, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::Stride<0, 0> >, Eigen::internal::gemm_blocking_space<0, float, float, -1, -1, -1, 1, false> > const&, long, long, long, bool) in math_cpu.cc.o\n      void Eigen::internal::parallelize_gemm<true, Eigen::internal::gemm_functor<float, long, Eigen::internal::general_matrix_matrix_product<long, float, 0, false, float, 0, false, 0>, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::OuterStride<-1> >, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::OuterStride<-1> >, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::OuterStride<-1> >, Eigen::internal::gemm_blocking_space<0, float, float, -1, -1, -1, 1, false> >, long>(Eigen::internal::gemm_functor<float, long, Eigen::internal::general_matrix_matrix_product<long, float, 0, false, float, 0, false, 0>, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::OuterStride<-1> >, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::OuterStride<-1> >, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::OuterStride<-1> >, Eigen::internal::gemm_blocking_space<0, float, float, -1, -1, -1, 1, false> > const&, long, long, long, bool) in math_cpu.cc.o\n      void Eigen::internal::parallelize_gemm<true, Eigen::internal::gemm_functor<float, long, Eigen::internal::general_matrix_matrix_product<long, float, 1, false, float, 0, false, 0>, Eigen::Transpose<Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::OuterStride<-1> > const>, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::OuterStride<-1> >, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::OuterStride<-1> >, Eigen::internal::gemm_blocking_space<0, float, float, -1, -1, -1, 1, false> >, long>(Eigen::internal::gemm_functor<float, long, Eigen::internal::general_matrix_matrix_product<long, float, 1, false, float, 0, false, 0>, Eigen::Transpose<Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::OuterStride<-1> > const>, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::OuterStride<-1> >, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::OuterStride<-1> >, Eigen::internal::gemm_blocking_space<0, float, float, -1, -1, -1, 1, false> > const&, long, long, long, bool) in math_cpu.cc.o\n      void Eigen::internal::parallelize_gemm<true, Eigen::internal::gemm_functor<float, long, Eigen::internal::general_matrix_matrix_product<long, float, 0, false, float, 1, false, 0>, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::OuterStride<-1> >, Eigen::Transpose<Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::OuterStride<-1> > const>, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::OuterStride<-1> >, Eigen::internal::gemm_blocking_space<0, float, float, -1, -1, -1, 1, false> >, long>(Eigen::internal::gemm_functor<float, long, Eigen::internal::general_matrix_matrix_product<long, float, 0, false, float, 1, false, 0>, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::OuterStride<-1> >, Eigen::Transpose<Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::OuterStride<-1> > const>, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::OuterStride<-1> >, Eigen::internal::gemm_blocking_space<0, float, float, -1, -1, -1, 1, false> > const&, long, long, long, bool) in math_cpu.cc.o\n      ...\n  \"___kmpc_reduce_nowait\", referenced from:\n      _.omp_outlined..270 in THTensorMoreMath.cpp.o\n      _.omp_outlined..271 in THTensorMoreMath.cpp.o\n      _.omp_outlined..273 in THTensorMoreMath.cpp.o\n      _.omp_outlined..275 in THTensorMoreMath.cpp.o\n      _.omp_outlined..43 in THTensorEvenMoreMath.cpp.o\n      _.omp_outlined..44 in THTensorEvenMoreMath.cpp.o\n      _.omp_outlined..46 in THTensorEvenMoreMath.cpp.o\n      ...\n  \"___kmpc_serialized_parallel\", referenced from:\n      at::native::embedding_renorm_cpu_(at::Tensor&, at::Tensor const&, double, double) in Embedding.cpp.o\n      at::native::_embedding_bag_dense_backward_cpu(at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, long long, bool, long long) in EmbeddingBag.cpp.o\n      at::native::softmax_cpu(at::Tensor const&, long long) in SoftMax.cpp.o\n      at::native::log_softmax_cpu(at::Tensor const&, long long) in SoftMax.cpp.o\n      at::native::softmax_backward_cpu(at::Tensor const&, at::Tensor const&, long long, at::Tensor const&) in SoftMax.cpp.o\n      at::native::log_softmax_backward_cpu(at::Tensor const&, at::Tensor const&, long long, at::Tensor const&) in SoftMax.cpp.o\n      at::TensorIterator::for_each(std::__1::function<void (int, char**, long long const*, long long)> const&) in TensorIterator.cpp.o\n      ...\n  \"_omp_get_max_threads\", referenced from:\n      _THGetNumThreads in THGeneral.cpp.o\n      caffe2::Caffe2SetOpenMPThreads(int*, char***) in init_omp.cc.o\n      void Eigen::internal::parallelize_gemm<true, Eigen::internal::gemm_functor<float, long, Eigen::internal::general_matrix_matrix_product<long, float, 0, false, float, 0, false, 0>, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::Stride<0, 0> >, Eigen::internal::gemm_blocking_space<0, float, float, -1, -1, -1, 1, false> >, long>(Eigen::internal::gemm_functor<float, long, Eigen::internal::general_matrix_matrix_product<long, float, 0, false, float, 0, false, 0>, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::Stride<0, 0> >, Eigen::internal::gemm_blocking_space<0, float, float, -1, -1, -1, 1, false> > const&, long, long, long, bool) in math_cpu.cc.o\n      void Eigen::internal::parallelize_gemm<true, Eigen::internal::gemm_functor<float, long, Eigen::internal::general_matrix_matrix_product<long, float, 1, false, float, 0, false, 0>, Eigen::Transpose<Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::Stride<0, 0> > const>, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::Stride<0, 0> >, Eigen::internal::gemm_blocking_space<0, float, float, -1, -1, -1, 1, false> >, long>(Eigen::internal::gemm_functor<float, long, Eigen::internal::general_matrix_matrix_product<long, float, 1, false, float, 0, false, 0>, Eigen::Transpose<Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::Stride<0, 0> > const>, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::Stride<0, 0> >, Eigen::internal::gemm_blocking_space<0, float, float, -1, -1, -1, 1, false> > const&, long, long, long, bool) in math_cpu.cc.o\n      void Eigen::internal::parallelize_gemm<true, Eigen::internal::gemm_functor<float, long, Eigen::internal::general_matrix_matrix_product<long, float, 0, false, float, 1, false, 0>, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::Stride<0, 0> >, Eigen::Transpose<Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::Stride<0, 0> > const>, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::Stride<0, 0> >, Eigen::internal::gemm_blocking_space<0, float, float, -1, -1, -1, 1, false> >, long>(Eigen::internal::gemm_functor<float, long, Eigen::internal::general_matrix_matrix_product<long, float, 0, false, float, 1, false, 0>, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::Stride<0, 0> >, Eigen::Transpose<Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::Stride<0, 0> > const>, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::Stride<0, 0> >, Eigen::internal::gemm_blocking_space<0, float, float, -1, -1, -1, 1, false> > const&, long, long, long, bool) in math_cpu.cc.o\n      void Eigen::internal::parallelize_gemm<true, Eigen::internal::gemm_functor<float, long, Eigen::internal::general_matrix_matrix_product<long, float, 1, false, float, 1, false, 0>, Eigen::Transpose<Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::Stride<0, 0> > const>, Eigen::Transpose<Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::Stride<0, 0> > const>, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::Stride<0, 0> >, Eigen::internal::gemm_blocking_space<0, float, float, -1, -1, -1, 1, false> >, long>(Eigen::internal::gemm_functor<float, long, Eigen::internal::general_matrix_matrix_product<long, float, 1, false, float, 1, false, 0>, Eigen::Transpose<Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::Stride<0, 0> > const>, Eigen::Transpose<Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::Stride<0, 0> > const>, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::Stride<0, 0> >, Eigen::internal::gemm_blocking_space<0, float, float, -1, -1, -1, 1, false> > const&, long, long, long, bool) in math_cpu.cc.o\n      void Eigen::internal::parallelize_gemm<true, Eigen::internal::gemm_functor<float, long, Eigen::internal::general_matrix_matrix_product<long, float, 0, false, float, 0, false, 0>, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::OuterStride<-1> >, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::OuterStride<-1> >, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::OuterStride<-1> >, Eigen::internal::gemm_blocking_space<0, float, float, -1, -1, -1, 1, false> >, long>(Eigen::internal::gemm_functor<float, long, Eigen::internal::general_matrix_matrix_product<long, float, 0, false, float, 0, false, 0>, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::OuterStride<-1> >, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1> const, 0, Eigen::OuterStride<-1> >, Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::OuterStride<-1> >, Eigen::internal::gemm_blocking_space<0, float, float, -1, -1, -1, 1, false> > const&, long, long, long, bool) in math_cpu.cc.o\n      ...\n  \"_omp_get_num_procs\", referenced from:\n      _THGetNumCores in THGeneral.cpp.o\n  \"_omp_get_num_threads\", referenced from:\n      _.omp_outlined. in Embedding.cpp.o\n      _.omp_outlined. in SoftMax.cpp.o\n      _.omp_outlined..35 in SoftMax.cpp.o\n      _.omp_outlined..37 in SoftMax.cpp.o\n      _.omp_outlined..38 in SoftMax.cpp.o\n      _.omp_outlined..46 in SoftMax.cpp.o\n      _.omp_outlined..47 in SoftMax.cpp.o\n      ...\n  \"_omp_get_thread_num\", referenced from:\n      _.omp_outlined. in Embedding.cpp.o\n      _.omp_outlined. in SoftMax.cpp.o\n      _.omp_outlined..35 in SoftMax.cpp.o\n      _.omp_outlined..37 in SoftMax.cpp.o\n      _.omp_outlined..38 in SoftMax.cpp.o\n      _.omp_outlined..46 in SoftMax.cpp.o\n      _.omp_outlined..47 in SoftMax.cpp.o\n      ...\n  \"_omp_in_parallel\", referenced from:\n      _THFloatTensor_copy in THTensorCopy.cpp.o\n      _THDoubleTensor_copy in THTensorCopy.cpp.o\n      _THByteTensor_copy in THTensorCopy.cpp.o\n      _THCharTensor_copy in THTensorCopy.cpp.o\n      _THShortTensor_copy in THTensorCopy.cpp.o\n      _THIntTensor_copy in THTensorCopy.cpp.o\n      _THLongTensor_copy in THTensorCopy.cpp.o\n      ...\n  \"_omp_set_num_threads\", referenced from:\n      _THSetNumThreads in THGeneral.cpp.o\n      caffe2::Caffe2SetOpenMPThreads(int*, char***) in init_omp.cc.o\nld: symbol(s) not found for architecture x86_64", "merged": false, "mergeable": null, "rebaseable": null, "mergeable_state": "unknown", "merged_by": null, "comments": 19, "review_comments": 4, "maintainer_can_modify": true, "commits": 7, "additions": 69, "deletions": 46, "changed_files": 6}