{"url": "https://api.github.com/repos/pytorch/pytorch/issues/8715", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/8715/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/8715/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/8715/events", "html_url": "https://github.com/pytorch/pytorch/issues/8715", "id": 334259012, "node_id": "MDU6SXNzdWUzMzQyNTkwMTI=", "number": 8715, "title": "[JIT] Python value resolution broken for calling functions from script modules", "user": {"login": "jamesr66a", "id": 4685384, "node_id": "MDQ6VXNlcjQ2ODUzODQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/4685384?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamesr66a", "html_url": "https://github.com/jamesr66a", "followers_url": "https://api.github.com/users/jamesr66a/followers", "following_url": "https://api.github.com/users/jamesr66a/following{/other_user}", "gists_url": "https://api.github.com/users/jamesr66a/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamesr66a/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamesr66a/subscriptions", "organizations_url": "https://api.github.com/users/jamesr66a/orgs", "repos_url": "https://api.github.com/users/jamesr66a/repos", "events_url": "https://api.github.com/users/jamesr66a/events{/privacy}", "received_events_url": "https://api.github.com/users/jamesr66a/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 679953983, "node_id": "MDU6TGFiZWw2Nzk5NTM5ODM=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/jit", "name": "jit", "color": "c5def5", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-06-20T21:37:52Z", "updated_at": "2018-06-29T05:57:06Z", "closed_at": "2018-06-29T05:57:06Z", "author_association": "CONTRIBUTOR", "body_html": "<pre><code>+    @unittest.skip('TODO: Python value resolution broken')\n+    def test_call_tracing_fn_from_script_module(self):\n+        @torch.jit.trace(torch.rand(3, 3))\n+        def traced_fn(x):\n+            return torch.neg(x)\n+\n+        class ScriptMod(torch.jit.ScriptModule):\n+            def __init__(self):\n+                super(ScriptMod, self).__init__()\n+                self.param = torch.nn.Parameter(torch.rand(4, 3))\n+\n+            @torch.jit.script_method\n+            def forward(self, x):\n+                return traced_fn(torch.mm(x, self.param))\n+\n+        sm = ScriptMod()\n+        # FIXME: at the time of writing we fail with the following:\n+        # RuntimeError:\n+        # undefined value traced_fn:\n+        # @torch.jit.script_method\n+        # def forward(self, x):\n+        #     return traced_fn(torch.mm(x, self.param))\n+        #            ~~~~~~~~~ &lt;--- HERE\n+        self.assertExpected(str(sm.__getattr__('forward').graph))\n+    @unittest.skip('TODO: Python value resolution broken')\n+    def test_call_script_fn_from_script_module(self):\n+        @torch.jit.script\n+        def script_fn(x):\n+            return torch.neg(x)\n+\n+        class ScriptMod(torch.jit.ScriptModule):\n+            def __init__(self):\n+                super(ScriptMod, self).__init__()\n+                self.param = torch.nn.Parameter(torch.rand(4, 3))\n+\n+            @torch.jit.script_method\n+            def forward(self, x):\n+                return script_fn(torch.mm(x, self.param))\n+\n+        sm = ScriptMod()\n+        # FIXME: at the time of writing, this failes with\n+        # RuntimeError:\n+        # undefined value traced_fn:\n+        # @torch.jit.script_method\n+        # def forward(self, x):\n+        #     return traced_fn(torch.mm(x, self.param))\n+        #            ~~~~~~~~~ &lt;--- HERE\n+        self.assertExpected(str(sm.__getattr__('forward').graph))\n</code></pre>", "body_text": "+    @unittest.skip('TODO: Python value resolution broken')\n+    def test_call_tracing_fn_from_script_module(self):\n+        @torch.jit.trace(torch.rand(3, 3))\n+        def traced_fn(x):\n+            return torch.neg(x)\n+\n+        class ScriptMod(torch.jit.ScriptModule):\n+            def __init__(self):\n+                super(ScriptMod, self).__init__()\n+                self.param = torch.nn.Parameter(torch.rand(4, 3))\n+\n+            @torch.jit.script_method\n+            def forward(self, x):\n+                return traced_fn(torch.mm(x, self.param))\n+\n+        sm = ScriptMod()\n+        # FIXME: at the time of writing we fail with the following:\n+        # RuntimeError:\n+        # undefined value traced_fn:\n+        # @torch.jit.script_method\n+        # def forward(self, x):\n+        #     return traced_fn(torch.mm(x, self.param))\n+        #            ~~~~~~~~~ <--- HERE\n+        self.assertExpected(str(sm.__getattr__('forward').graph))\n+    @unittest.skip('TODO: Python value resolution broken')\n+    def test_call_script_fn_from_script_module(self):\n+        @torch.jit.script\n+        def script_fn(x):\n+            return torch.neg(x)\n+\n+        class ScriptMod(torch.jit.ScriptModule):\n+            def __init__(self):\n+                super(ScriptMod, self).__init__()\n+                self.param = torch.nn.Parameter(torch.rand(4, 3))\n+\n+            @torch.jit.script_method\n+            def forward(self, x):\n+                return script_fn(torch.mm(x, self.param))\n+\n+        sm = ScriptMod()\n+        # FIXME: at the time of writing, this failes with\n+        # RuntimeError:\n+        # undefined value traced_fn:\n+        # @torch.jit.script_method\n+        # def forward(self, x):\n+        #     return traced_fn(torch.mm(x, self.param))\n+        #            ~~~~~~~~~ <--- HERE\n+        self.assertExpected(str(sm.__getattr__('forward').graph))", "body": "```\r\n+    @unittest.skip('TODO: Python value resolution broken')\r\n+    def test_call_tracing_fn_from_script_module(self):\r\n+        @torch.jit.trace(torch.rand(3, 3))\r\n+        def traced_fn(x):\r\n+            return torch.neg(x)\r\n+\r\n+        class ScriptMod(torch.jit.ScriptModule):\r\n+            def __init__(self):\r\n+                super(ScriptMod, self).__init__()\r\n+                self.param = torch.nn.Parameter(torch.rand(4, 3))\r\n+\r\n+            @torch.jit.script_method\r\n+            def forward(self, x):\r\n+                return traced_fn(torch.mm(x, self.param))\r\n+\r\n+        sm = ScriptMod()\r\n+        # FIXME: at the time of writing we fail with the following:\r\n+        # RuntimeError:\r\n+        # undefined value traced_fn:\r\n+        # @torch.jit.script_method\r\n+        # def forward(self, x):\r\n+        #     return traced_fn(torch.mm(x, self.param))\r\n+        #            ~~~~~~~~~ <--- HERE\r\n+        self.assertExpected(str(sm.__getattr__('forward').graph))\r\n+    @unittest.skip('TODO: Python value resolution broken')\r\n+    def test_call_script_fn_from_script_module(self):\r\n+        @torch.jit.script\r\n+        def script_fn(x):\r\n+            return torch.neg(x)\r\n+\r\n+        class ScriptMod(torch.jit.ScriptModule):\r\n+            def __init__(self):\r\n+                super(ScriptMod, self).__init__()\r\n+                self.param = torch.nn.Parameter(torch.rand(4, 3))\r\n+\r\n+            @torch.jit.script_method\r\n+            def forward(self, x):\r\n+                return script_fn(torch.mm(x, self.param))\r\n+\r\n+        sm = ScriptMod()\r\n+        # FIXME: at the time of writing, this failes with\r\n+        # RuntimeError:\r\n+        # undefined value traced_fn:\r\n+        # @torch.jit.script_method\r\n+        # def forward(self, x):\r\n+        #     return traced_fn(torch.mm(x, self.param))\r\n+        #            ~~~~~~~~~ <--- HERE\r\n+        self.assertExpected(str(sm.__getattr__('forward').graph))\r\n```"}