{"url": "https://api.github.com/repos/pytorch/pytorch/issues/6990", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/6990/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/6990/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/6990/events", "html_url": "https://github.com/pytorch/pytorch/issues/6990", "id": 318036876, "node_id": "MDU6SXNzdWUzMTgwMzY4NzY=", "number": 6990, "title": "Differences between .data and .detach ", "user": {"login": "jay960702", "id": 23382139, "node_id": "MDQ6VXNlcjIzMzgyMTM5", "avatar_url": "https://avatars3.githubusercontent.com/u/23382139?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jay960702", "html_url": "https://github.com/jay960702", "followers_url": "https://api.github.com/users/jay960702/followers", "following_url": "https://api.github.com/users/jay960702/following{/other_user}", "gists_url": "https://api.github.com/users/jay960702/gists{/gist_id}", "starred_url": "https://api.github.com/users/jay960702/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jay960702/subscriptions", "organizations_url": "https://api.github.com/users/jay960702/orgs", "repos_url": "https://api.github.com/users/jay960702/repos", "events_url": "https://api.github.com/users/jay960702/events{/privacy}", "received_events_url": "https://api.github.com/users/jay960702/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 897287230, "node_id": "MDU6TGFiZWw4OTcyODcyMzA=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/documentation", "name": "documentation", "color": "f9d0c4", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "zou3519", "id": 5652049, "node_id": "MDQ6VXNlcjU2NTIwNDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/5652049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zou3519", "html_url": "https://github.com/zou3519", "followers_url": "https://api.github.com/users/zou3519/followers", "following_url": "https://api.github.com/users/zou3519/following{/other_user}", "gists_url": "https://api.github.com/users/zou3519/gists{/gist_id}", "starred_url": "https://api.github.com/users/zou3519/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zou3519/subscriptions", "organizations_url": "https://api.github.com/users/zou3519/orgs", "repos_url": "https://api.github.com/users/zou3519/repos", "events_url": "https://api.github.com/users/zou3519/events{/privacy}", "received_events_url": "https://api.github.com/users/zou3519/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "zou3519", "id": 5652049, "node_id": "MDQ6VXNlcjU2NTIwNDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/5652049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zou3519", "html_url": "https://github.com/zou3519", "followers_url": "https://api.github.com/users/zou3519/followers", "following_url": "https://api.github.com/users/zou3519/following{/other_user}", "gists_url": "https://api.github.com/users/zou3519/gists{/gist_id}", "starred_url": "https://api.github.com/users/zou3519/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zou3519/subscriptions", "organizations_url": "https://api.github.com/users/zou3519/orgs", "repos_url": "https://api.github.com/users/zou3519/repos", "events_url": "https://api.github.com/users/zou3519/events{/privacy}", "received_events_url": "https://api.github.com/users/zou3519/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2018-04-26T13:45:48Z", "updated_at": "2018-04-30T18:58:57Z", "closed_at": "2018-04-26T16:33:31Z", "author_association": "NONE", "body_html": "<h2>Issue description</h2>\n<p>Hi all,</p>\n<p>I am not very clear about the differences between .data and .detach() in the latest pytorch 0.4.<br>\nFor example:</p>\n<p><strong>a = torch.tensor([1,2,3], requires_grad = True)<br>\nb = a.data<br>\nc = a.detach()</strong></p>\n<p>so <em>b</em> is not as the same as the <em>c</em>?</p>\n<p>Here is a part of the 'PyTorch 0.4.0 Migration Guide':</p>\n<p><em>\"However, .data can be unsafe in some cases. Any changes on x.data wouldn\u2019t be tracked by autograd, and the computed gradients would be incorrect if x is needed in a backward pass. A safer alternative is to use x.detach(), which also returns a Tensor that shares data with requires_grad=False, but will have its in-place changes reported by autograd if x is needed in backward.\"</em></p>\n<p>Can anyone give me more explanations about this sentence:  \"but will have its in-place changes reported by autograd if x is needed in backward\"\uff1f Thanks\uff01</p>", "body_text": "Issue description\nHi all,\nI am not very clear about the differences between .data and .detach() in the latest pytorch 0.4.\nFor example:\na = torch.tensor([1,2,3], requires_grad = True)\nb = a.data\nc = a.detach()\nso b is not as the same as the c?\nHere is a part of the 'PyTorch 0.4.0 Migration Guide':\n\"However, .data can be unsafe in some cases. Any changes on x.data wouldn\u2019t be tracked by autograd, and the computed gradients would be incorrect if x is needed in a backward pass. A safer alternative is to use x.detach(), which also returns a Tensor that shares data with requires_grad=False, but will have its in-place changes reported by autograd if x is needed in backward.\"\nCan anyone give me more explanations about this sentence:  \"but will have its in-place changes reported by autograd if x is needed in backward\"\uff1f Thanks\uff01", "body": "## Issue description\r\n\r\nHi all,\r\n\r\nI am not very clear about the differences between .data and .detach() in the latest pytorch 0.4.\r\nFor example:\r\n\r\n__a = torch.tensor([1,2,3], requires_grad = True)\r\nb = a.data\r\nc = a.detach()__\r\n\r\nso _b_ is not as the same as the _c_? \r\n\r\nHere is a part of the 'PyTorch 0.4.0 Migration Guide':\r\n\r\n*\"However, .data can be unsafe in some cases. Any changes on x.data wouldn\u2019t be tracked by autograd, and the computed gradients would be incorrect if x is needed in a backward pass. A safer alternative is to use x.detach(), which also returns a Tensor that shares data with requires_grad=False, but will have its in-place changes reported by autograd if x is needed in backward.\"*\r\n\r\nCan anyone give me more explanations about this sentence:  \"but will have its in-place changes reported by autograd if x is needed in backward\"\uff1f Thanks\uff01\r\n\r\n"}