{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/384680164", "html_url": "https://github.com/pytorch/pytorch/issues/6990#issuecomment-384680164", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/6990", "id": 384680164, "node_id": "MDEyOklzc3VlQ29tbWVudDM4NDY4MDE2NA==", "user": {"login": "zou3519", "id": 5652049, "node_id": "MDQ6VXNlcjU2NTIwNDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/5652049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zou3519", "html_url": "https://github.com/zou3519", "followers_url": "https://api.github.com/users/zou3519/followers", "following_url": "https://api.github.com/users/zou3519/following{/other_user}", "gists_url": "https://api.github.com/users/zou3519/gists{/gist_id}", "starred_url": "https://api.github.com/users/zou3519/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zou3519/subscriptions", "organizations_url": "https://api.github.com/users/zou3519/orgs", "repos_url": "https://api.github.com/users/zou3519/repos", "events_url": "https://api.github.com/users/zou3519/events{/privacy}", "received_events_url": "https://api.github.com/users/zou3519/received_events", "type": "User", "site_admin": false}, "created_at": "2018-04-26T15:19:00Z", "updated_at": "2018-04-26T15:19:00Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Here's an example. If you use <code>detach()</code> instead of <code>.data</code>, gradient computation is guaranteed to be correct..</p>\n<pre><code>&gt;&gt;&gt; a = torch.tensor([1,2,3.], requires_grad = True)\n&gt;&gt;&gt; out = a.sigmoid()\n&gt;&gt;&gt; c = out.detach()\n&gt;&gt;&gt; c.zero_()  \ntensor([ 0.,  0.,  0.])\n\n&gt;&gt;&gt; out  # modified by c.zero_() !!\ntensor([ 0.,  0.,  0.])\n\n&gt;&gt;&gt; out.sum().backward()  # Requires the original value of out, but that was overwritten by c.zero_()\nRuntimeError: one of the variables needed for gradient computation has been modified by an inplace operation\n</code></pre>\n<p>As opposed to using <code>.data</code>:</p>\n<pre><code>&gt;&gt;&gt; a = torch.tensor([1,2,3.], requires_grad = True)\n&gt;&gt;&gt; out = a.sigmoid()\n&gt;&gt;&gt; c = out.data\n&gt;&gt;&gt; c.zero_()\ntensor([ 0.,  0.,  0.])\n\n&gt;&gt;&gt; out  # out  was modified by c.zero_()\ntensor([ 0.,  0.,  0.])\n\n&gt;&gt;&gt; out.sum().backward()\n&gt;&gt;&gt; a.grad  # The result is very, very wrong because `out` changed!\ntensor([ 0.,  0.,  0.])\n</code></pre>\n<p>I'll leave this issue open: we should add an example to the migration guide and clarify that section.</p>", "body_text": "Here's an example. If you use detach() instead of .data, gradient computation is guaranteed to be correct..\n>>> a = torch.tensor([1,2,3.], requires_grad = True)\n>>> out = a.sigmoid()\n>>> c = out.detach()\n>>> c.zero_()  \ntensor([ 0.,  0.,  0.])\n\n>>> out  # modified by c.zero_() !!\ntensor([ 0.,  0.,  0.])\n\n>>> out.sum().backward()  # Requires the original value of out, but that was overwritten by c.zero_()\nRuntimeError: one of the variables needed for gradient computation has been modified by an inplace operation\n\nAs opposed to using .data:\n>>> a = torch.tensor([1,2,3.], requires_grad = True)\n>>> out = a.sigmoid()\n>>> c = out.data\n>>> c.zero_()\ntensor([ 0.,  0.,  0.])\n\n>>> out  # out  was modified by c.zero_()\ntensor([ 0.,  0.,  0.])\n\n>>> out.sum().backward()\n>>> a.grad  # The result is very, very wrong because `out` changed!\ntensor([ 0.,  0.,  0.])\n\nI'll leave this issue open: we should add an example to the migration guide and clarify that section.", "body": "Here's an example. If you use `detach()` instead of `.data`, gradient computation is guaranteed to be correct..\r\n\r\n```\r\n>>> a = torch.tensor([1,2,3.], requires_grad = True)\r\n>>> out = a.sigmoid()\r\n>>> c = out.detach()\r\n>>> c.zero_()  \r\ntensor([ 0.,  0.,  0.])\r\n\r\n>>> out  # modified by c.zero_() !!\r\ntensor([ 0.,  0.,  0.])\r\n\r\n>>> out.sum().backward()  # Requires the original value of out, but that was overwritten by c.zero_()\r\nRuntimeError: one of the variables needed for gradient computation has been modified by an inplace operation\r\n```\r\n\r\nAs opposed to using `.data`:\r\n```\r\n>>> a = torch.tensor([1,2,3.], requires_grad = True)\r\n>>> out = a.sigmoid()\r\n>>> c = out.data\r\n>>> c.zero_()\r\ntensor([ 0.,  0.,  0.])\r\n\r\n>>> out  # out  was modified by c.zero_()\r\ntensor([ 0.,  0.,  0.])\r\n\r\n>>> out.sum().backward()\r\n>>> a.grad  # The result is very, very wrong because `out` changed!\r\ntensor([ 0.,  0.,  0.])\r\n```\r\n\r\nI'll leave this issue open: we should add an example to the migration guide and clarify that section."}