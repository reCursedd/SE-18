{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/327317858", "html_url": "https://github.com/pytorch/pytorch/issues/2553#issuecomment-327317858", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/2553", "id": 327317858, "node_id": "MDEyOklzc3VlQ29tbWVudDMyNzMxNzg1OA==", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "created_at": "2017-09-05T22:09:18Z", "updated_at": "2017-09-05T22:09:18Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Actually, there are a few bugs here.</p>\n<p>First, even though GLOO_FLAGS looks like it's setting NCCL_ROOT_DIR:</p>\n<pre><code>GLOO_FLAGS=\"\"\nif [[ $WITH_CUDA -eq 1 ]]; then\n    GLOO_FLAGS=\"-DUSE_CUDA=1 -DNCCL_ROOT_DIR=$INSTALL_DIR\"\nfi\n</code></pre>\n<p>it actually isn't because the gloo invocation is</p>\n<pre><code>        build gloo $GLOO_FLAGS\n</code></pre>\n<p>which expands to <code>build gloo -DUSE_CUDA=1 -DNCCL_ROOT_DIR=$INSTALL_DIR</code> but only <code>$2</code> is passed to cmake.</p>\n<p>Suppose you fix this. nccl is still not going to be picked up, because INSTALL_DIR is PyTorch's local install dir, but if you disabled nccl builds, there will never actually be a nccl here. So cmake is just going to do it's standard search to find a nccl somewhere. Inversely, if you ever built nccl, and then turn it off, we will keep picking up that locally built version until you delete it. So we shouldn't do that.</p>\n<p>Suppose you fix this. Then I think gloo will (continue to) correctly pick up system nccl and be built with it, and the final thing to fix is that build of PyTorch csrc doesn't know how to search for nccl headers somewhere. This is probably related to <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"249415852\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/2375\" data-hovercard-type=\"issue\" data-hovercard-url=\"/pytorch/pytorch/issues/2375/hovercard\" href=\"https://github.com/pytorch/pytorch/issues/2375\">#2375</a>.</p>\n<p>I wonder, maybe we shouldn't do any autodetection at all, and force the user to pass us the include and library paths of nccl if they want to build with system.</p>", "body_text": "Actually, there are a few bugs here.\nFirst, even though GLOO_FLAGS looks like it's setting NCCL_ROOT_DIR:\nGLOO_FLAGS=\"\"\nif [[ $WITH_CUDA -eq 1 ]]; then\n    GLOO_FLAGS=\"-DUSE_CUDA=1 -DNCCL_ROOT_DIR=$INSTALL_DIR\"\nfi\n\nit actually isn't because the gloo invocation is\n        build gloo $GLOO_FLAGS\n\nwhich expands to build gloo -DUSE_CUDA=1 -DNCCL_ROOT_DIR=$INSTALL_DIR but only $2 is passed to cmake.\nSuppose you fix this. nccl is still not going to be picked up, because INSTALL_DIR is PyTorch's local install dir, but if you disabled nccl builds, there will never actually be a nccl here. So cmake is just going to do it's standard search to find a nccl somewhere. Inversely, if you ever built nccl, and then turn it off, we will keep picking up that locally built version until you delete it. So we shouldn't do that.\nSuppose you fix this. Then I think gloo will (continue to) correctly pick up system nccl and be built with it, and the final thing to fix is that build of PyTorch csrc doesn't know how to search for nccl headers somewhere. This is probably related to #2375.\nI wonder, maybe we shouldn't do any autodetection at all, and force the user to pass us the include and library paths of nccl if they want to build with system.", "body": "Actually, there are a few bugs here.\r\n\r\nFirst, even though GLOO_FLAGS looks like it's setting NCCL_ROOT_DIR:\r\n\r\n```\r\nGLOO_FLAGS=\"\"\r\nif [[ $WITH_CUDA -eq 1 ]]; then\r\n    GLOO_FLAGS=\"-DUSE_CUDA=1 -DNCCL_ROOT_DIR=$INSTALL_DIR\"\r\nfi\r\n```\r\n\r\nit actually isn't because the gloo invocation is\r\n\r\n```\r\n        build gloo $GLOO_FLAGS\r\n```\r\n\r\nwhich expands to `build gloo -DUSE_CUDA=1 -DNCCL_ROOT_DIR=$INSTALL_DIR` but only `$2` is passed to cmake.\r\n\r\nSuppose you fix this. nccl is still not going to be picked up, because INSTALL_DIR is PyTorch's local install dir, but if you disabled nccl builds, there will never actually be a nccl here. So cmake is just going to do it's standard search to find a nccl somewhere. Inversely, if you ever built nccl, and then turn it off, we will keep picking up that locally built version until you delete it. So we shouldn't do that.\r\n\r\nSuppose you fix this. Then I think gloo will (continue to) correctly pick up system nccl and be built with it, and the final thing to fix is that build of PyTorch csrc doesn't know how to search for nccl headers somewhere. This is probably related to #2375.\r\n\r\nI wonder, maybe we shouldn't do any autodetection at all, and force the user to pass us the include and library paths of nccl if they want to build with system."}