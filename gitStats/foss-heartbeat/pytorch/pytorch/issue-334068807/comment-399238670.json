{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/399238670", "html_url": "https://github.com/pytorch/pytorch/issues/8686#issuecomment-399238670", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/8686", "id": 399238670, "node_id": "MDEyOklzc3VlQ29tbWVudDM5OTIzODY3MA==", "user": {"login": "fmassa", "id": 9110200, "node_id": "MDQ6VXNlcjkxMTAyMDA=", "avatar_url": "https://avatars2.githubusercontent.com/u/9110200?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fmassa", "html_url": "https://github.com/fmassa", "followers_url": "https://api.github.com/users/fmassa/followers", "following_url": "https://api.github.com/users/fmassa/following{/other_user}", "gists_url": "https://api.github.com/users/fmassa/gists{/gist_id}", "starred_url": "https://api.github.com/users/fmassa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fmassa/subscriptions", "organizations_url": "https://api.github.com/users/fmassa/orgs", "repos_url": "https://api.github.com/users/fmassa/repos", "events_url": "https://api.github.com/users/fmassa/events{/privacy}", "received_events_url": "https://api.github.com/users/fmassa/received_events", "type": "User", "site_admin": false}, "created_at": "2018-06-21T20:48:15Z", "updated_at": "2018-06-21T20:48:15Z", "author_association": "MEMBER", "body_html": "<p>The fix on the python side is fairly easy. Here is a quick (python) implementation (but beware that I might have missed I few checks):</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">split_with_sizes</span>(<span class=\"pl-smi\">tensor</span>, <span class=\"pl-smi\">split_sizes</span>, <span class=\"pl-smi\">dim</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">0</span>):\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"\"\"</span></span>\n<span class=\"pl-s\">    Similar to split, but with a fix for</span>\n<span class=\"pl-s\">    https://github.com/pytorch/pytorch/issues/8686</span>\n<span class=\"pl-s\">    <span class=\"pl-pds\">\"\"\"</span></span>\n    <span class=\"pl-k\">assert</span> <span class=\"pl-c1\">sum</span>(split_sizes) <span class=\"pl-k\">==</span> tensor.shape[dim]\n    result <span class=\"pl-k\">=</span> []\n    start_idx <span class=\"pl-k\">=</span> <span class=\"pl-c1\">0</span>\n    <span class=\"pl-k\">for</span> length <span class=\"pl-k\">in</span> split_sizes:\n        <span class=\"pl-k\">if</span> length <span class=\"pl-k\">==</span> <span class=\"pl-c1\">0</span>:\n            result.append(tensor.new())\n            <span class=\"pl-k\">continue</span>\n        result.append(tensor.narrow(dim, start_idx, length))\n        start_idx <span class=\"pl-k\">+=</span> length\n    <span class=\"pl-k\">assert</span> start_idx <span class=\"pl-k\">==</span> tensor.shape[dim]\n    <span class=\"pl-k\">return</span> result</pre></div>", "body_text": "The fix on the python side is fairly easy. Here is a quick (python) implementation (but beware that I might have missed I few checks):\ndef split_with_sizes(tensor, split_sizes, dim=0):\n    \"\"\"\n    Similar to split, but with a fix for\n    https://github.com/pytorch/pytorch/issues/8686\n    \"\"\"\n    assert sum(split_sizes) == tensor.shape[dim]\n    result = []\n    start_idx = 0\n    for length in split_sizes:\n        if length == 0:\n            result.append(tensor.new())\n            continue\n        result.append(tensor.narrow(dim, start_idx, length))\n        start_idx += length\n    assert start_idx == tensor.shape[dim]\n    return result", "body": "The fix on the python side is fairly easy. Here is a quick (python) implementation (but beware that I might have missed I few checks):\r\n\r\n```python\r\ndef split_with_sizes(tensor, split_sizes, dim=0):\r\n    \"\"\"\r\n    Similar to split, but with a fix for\r\n    https://github.com/pytorch/pytorch/issues/8686\r\n    \"\"\"\r\n    assert sum(split_sizes) == tensor.shape[dim]\r\n    result = []\r\n    start_idx = 0\r\n    for length in split_sizes:\r\n        if length == 0:\r\n            result.append(tensor.new())\r\n            continue\r\n        result.append(tensor.narrow(dim, start_idx, length))\r\n        start_idx += length\r\n    assert start_idx == tensor.shape[dim]\r\n    return result\r\n```"}