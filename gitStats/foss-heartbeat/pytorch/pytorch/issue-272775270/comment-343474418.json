{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/343474418", "html_url": "https://github.com/pytorch/pytorch/issues/3614#issuecomment-343474418", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/3614", "id": 343474418, "node_id": "MDEyOklzc3VlQ29tbWVudDM0MzQ3NDQxOA==", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "created_at": "2017-11-10T13:34:00Z", "updated_at": "2017-11-10T13:34:00Z", "author_association": "CONTRIBUTOR", "body_html": "<p>I happened to be reading the deterministic algorithm selection code (for unrelated reasons), and I realized that we are falling back on nondeterministic algorithms if no deterministic ones are available:</p>\n<pre><code>template&lt;typename perf_t&gt;\nperf_t getBestAlgorithm(perf_t *perfResults, bool deterministic, int n_algo) {\n  if (deterministic) {\n    // iterate over perf results of all algorithms and find the best deterministic algo\n    for (int i = 0; i &lt; n_algo; i++) {\n      if (perfResults[i].status == CUDNN_STATUS_SUCCESS &amp;&amp;\n          perfResults[i].determinism == CUDNN_DETERMINISTIC) {\n        return perfResults[i];\n      }\n    }\n  }\n  return perfResults[0];\n} \n</code></pre>\n<p>This is bad, and probably related to the problem here. A plausible explanation is that, when running cudnnFindConvolutionForwardAlgorithmEx in multiple threads concurrently, deterministic algorithms may incorrectly be reported as not supported.</p>\n<p>(I'm unfortunately knee deep refactoring this code, so I am not going to also attempt to fix this.)</p>", "body_text": "I happened to be reading the deterministic algorithm selection code (for unrelated reasons), and I realized that we are falling back on nondeterministic algorithms if no deterministic ones are available:\ntemplate<typename perf_t>\nperf_t getBestAlgorithm(perf_t *perfResults, bool deterministic, int n_algo) {\n  if (deterministic) {\n    // iterate over perf results of all algorithms and find the best deterministic algo\n    for (int i = 0; i < n_algo; i++) {\n      if (perfResults[i].status == CUDNN_STATUS_SUCCESS &&\n          perfResults[i].determinism == CUDNN_DETERMINISTIC) {\n        return perfResults[i];\n      }\n    }\n  }\n  return perfResults[0];\n} \n\nThis is bad, and probably related to the problem here. A plausible explanation is that, when running cudnnFindConvolutionForwardAlgorithmEx in multiple threads concurrently, deterministic algorithms may incorrectly be reported as not supported.\n(I'm unfortunately knee deep refactoring this code, so I am not going to also attempt to fix this.)", "body": "I happened to be reading the deterministic algorithm selection code (for unrelated reasons), and I realized that we are falling back on nondeterministic algorithms if no deterministic ones are available:\r\n\r\n```\r\ntemplate<typename perf_t>\r\nperf_t getBestAlgorithm(perf_t *perfResults, bool deterministic, int n_algo) {\r\n  if (deterministic) {\r\n    // iterate over perf results of all algorithms and find the best deterministic algo\r\n    for (int i = 0; i < n_algo; i++) {\r\n      if (perfResults[i].status == CUDNN_STATUS_SUCCESS &&\r\n          perfResults[i].determinism == CUDNN_DETERMINISTIC) {\r\n        return perfResults[i];\r\n      }\r\n    }\r\n  }\r\n  return perfResults[0];\r\n} \r\n```\r\n\r\nThis is bad, and probably related to the problem here. A plausible explanation is that, when running cudnnFindConvolutionForwardAlgorithmEx in multiple threads concurrently, deterministic algorithms may incorrectly be reported as not supported.\r\n\r\n(I'm unfortunately knee deep refactoring this code, so I am not going to also attempt to fix this.)"}