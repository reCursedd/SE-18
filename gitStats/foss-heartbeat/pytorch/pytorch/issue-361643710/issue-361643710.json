{"url": "https://api.github.com/repos/pytorch/pytorch/issues/11856", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/11856/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/11856/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/11856/events", "html_url": "https://github.com/pytorch/pytorch/issues/11856", "id": 361643710, "node_id": "MDU6SXNzdWUzNjE2NDM3MTA=", "number": 11856, "title": "index_put_ has unreasonable checks", "user": {"login": "harry67yqh", "id": 904036, "node_id": "MDQ6VXNlcjkwNDAzNg==", "avatar_url": "https://avatars1.githubusercontent.com/u/904036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harry67yqh", "html_url": "https://github.com/harry67yqh", "followers_url": "https://api.github.com/users/harry67yqh/followers", "following_url": "https://api.github.com/users/harry67yqh/following{/other_user}", "gists_url": "https://api.github.com/users/harry67yqh/gists{/gist_id}", "starred_url": "https://api.github.com/users/harry67yqh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harry67yqh/subscriptions", "organizations_url": "https://api.github.com/users/harry67yqh/orgs", "repos_url": "https://api.github.com/users/harry67yqh/repos", "events_url": "https://api.github.com/users/harry67yqh/events{/privacy}", "received_events_url": "https://api.github.com/users/harry67yqh/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-09-19T08:51:26Z", "updated_at": "2018-09-19T11:46:46Z", "closed_at": "2018-09-19T11:46:46Z", "author_association": "NONE", "body_html": "<h2>Issue description</h2>\n<p><code>index_put_ function(indices, value)</code> in <code>torch.Tensor</code> has a check that size of <code>indices</code> must be less than or equal to the number of dimensions of <code>self</code>, which is <strong>not reasonable</strong>.<br>\nI checked the source code and found that</p>\n<pre><code>  AT_CHECK(indices.size() &lt;= (size_t)self.dim(),\n           \"too many indices for tensor of dimension \", self.dim(), \" (got \", indices.size(), \")\");\n</code></pre>\n<p>in</p>\n<pre><code>Tensor index_put(const Tensor &amp; self, TensorList indices, const Tensor &amp; value) {\n  AT_CHECK(indices.size() &lt;= (size_t)self.dim(),\n           \"too many indices for tensor of dimension \", self.dim(), \" (got \", indices.size(), \")\");\n\n  Tensor src, linearIndex, expandedValue;\n  std::tie(src, linearIndex) = makeLinearIndex(self, indices);\n  std::tie(expandedValue) = expand_inplace(linearIndex, value);\n  Tensor dst = src.clone();\n  return dst.put_(linearIndex, expandedValue);\n}\nshould be the root of this problem.\n</code></pre>\n<h2>Code example</h2>\n<pre><code>target = torch.zeros([5,3])\nindices = torch.LongTensor([[0,1], [1, 2], [2, 2], [3, 0], [4, 1]])\nvalue = torch.ones(indices.shape[0])\ntarget.index_put_(tuple(indices), value)\n</code></pre>\n<p>The <strong>expected result</strong> should be that target became</p>\n<pre><code>tensor([[ 0.,  1.,  0.],\n        [ 0.,  0.,  1.],\n        [ 0.,  0.,  1.],\n        [ 1.,  0.,  0.],\n        [ 0.,  1.,  0.]])\n</code></pre>\n<p>while what <strong>really happened</strong> was an error was raised</p>\n<pre><code>RuntimeError: too many indices for tensor of dimension 2 (got 5)\n</code></pre>\n<h2>System Info</h2>\n<p>I guess that system info is out of concern in this issue.</p>", "body_text": "Issue description\nindex_put_ function(indices, value) in torch.Tensor has a check that size of indices must be less than or equal to the number of dimensions of self, which is not reasonable.\nI checked the source code and found that\n  AT_CHECK(indices.size() <= (size_t)self.dim(),\n           \"too many indices for tensor of dimension \", self.dim(), \" (got \", indices.size(), \")\");\n\nin\nTensor index_put(const Tensor & self, TensorList indices, const Tensor & value) {\n  AT_CHECK(indices.size() <= (size_t)self.dim(),\n           \"too many indices for tensor of dimension \", self.dim(), \" (got \", indices.size(), \")\");\n\n  Tensor src, linearIndex, expandedValue;\n  std::tie(src, linearIndex) = makeLinearIndex(self, indices);\n  std::tie(expandedValue) = expand_inplace(linearIndex, value);\n  Tensor dst = src.clone();\n  return dst.put_(linearIndex, expandedValue);\n}\nshould be the root of this problem.\n\nCode example\ntarget = torch.zeros([5,3])\nindices = torch.LongTensor([[0,1], [1, 2], [2, 2], [3, 0], [4, 1]])\nvalue = torch.ones(indices.shape[0])\ntarget.index_put_(tuple(indices), value)\n\nThe expected result should be that target became\ntensor([[ 0.,  1.,  0.],\n        [ 0.,  0.,  1.],\n        [ 0.,  0.,  1.],\n        [ 1.,  0.,  0.],\n        [ 0.,  1.,  0.]])\n\nwhile what really happened was an error was raised\nRuntimeError: too many indices for tensor of dimension 2 (got 5)\n\nSystem Info\nI guess that system info is out of concern in this issue.", "body": "## Issue description\r\n\r\n`index_put_ function(indices, value)` in `torch.Tensor` has a check that size of `indices` must be less than or equal to the number of dimensions of `self`, which is **not reasonable**.\r\nI checked the source code and found that \r\n```\r\n  AT_CHECK(indices.size() <= (size_t)self.dim(),\r\n           \"too many indices for tensor of dimension \", self.dim(), \" (got \", indices.size(), \")\");\r\n```\r\nin\r\n```\r\nTensor index_put(const Tensor & self, TensorList indices, const Tensor & value) {\r\n  AT_CHECK(indices.size() <= (size_t)self.dim(),\r\n           \"too many indices for tensor of dimension \", self.dim(), \" (got \", indices.size(), \")\");\r\n\r\n  Tensor src, linearIndex, expandedValue;\r\n  std::tie(src, linearIndex) = makeLinearIndex(self, indices);\r\n  std::tie(expandedValue) = expand_inplace(linearIndex, value);\r\n  Tensor dst = src.clone();\r\n  return dst.put_(linearIndex, expandedValue);\r\n}\r\nshould be the root of this problem.\r\n```\r\n## Code example\r\n```\r\ntarget = torch.zeros([5,3])\r\nindices = torch.LongTensor([[0,1], [1, 2], [2, 2], [3, 0], [4, 1]])\r\nvalue = torch.ones(indices.shape[0])\r\ntarget.index_put_(tuple(indices), value)\r\n```\r\nThe **expected result** should be that target became\r\n```\r\ntensor([[ 0.,  1.,  0.],\r\n        [ 0.,  0.,  1.],\r\n        [ 0.,  0.,  1.],\r\n        [ 1.,  0.,  0.],\r\n        [ 0.,  1.,  0.]])\r\n```\r\nwhile what **really happened** was an error was raised\r\n```\r\nRuntimeError: too many indices for tensor of dimension 2 (got 5)\r\n```\r\n## System Info\r\nI guess that system info is out of concern in this issue.\r\n"}