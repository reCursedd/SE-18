{"url": "https://api.github.com/repos/pytorch/pytorch/issues/3943", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/3943/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/3943/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/3943/events", "html_url": "https://github.com/pytorch/pytorch/pull/3943", "id": 277914442, "node_id": "MDExOlB1bGxSZXF1ZXN0MTU1NDU3OTk0", "number": 3943, "title": "Implement matmul as a native function; use it for Variable impl", "user": {"login": "gchanan", "id": 3768583, "node_id": "MDQ6VXNlcjM3Njg1ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3768583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gchanan", "html_url": "https://github.com/gchanan", "followers_url": "https://api.github.com/users/gchanan/followers", "following_url": "https://api.github.com/users/gchanan/following{/other_user}", "gists_url": "https://api.github.com/users/gchanan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gchanan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gchanan/subscriptions", "organizations_url": "https://api.github.com/users/gchanan/orgs", "repos_url": "https://api.github.com/users/gchanan/repos", "events_url": "https://api.github.com/users/gchanan/events{/privacy}", "received_events_url": "https://api.github.com/users/gchanan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-11-29T21:32:00Z", "updated_at": "2018-11-23T15:36:58Z", "closed_at": "2017-11-30T04:13:05Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/3943", "html_url": "https://github.com/pytorch/pytorch/pull/3943", "diff_url": "https://github.com/pytorch/pytorch/pull/3943.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/3943.patch"}, "body_html": "<p>This also includes an (inefficient) version of allclose, which was necessary for testing.  A more efficient version would use some apply logic to fuse the ops and exit early (coming in future PR).</p>\n<p>On small tensors [(2, 5, 5) @ (5,5)], this yields ~2.5x speedup over the python implementation.</p>", "body_text": "This also includes an (inefficient) version of allclose, which was necessary for testing.  A more efficient version would use some apply logic to fuse the ops and exit early (coming in future PR).\nOn small tensors [(2, 5, 5) @ (5,5)], this yields ~2.5x speedup over the python implementation.", "body": "This also includes an (inefficient) version of allclose, which was necessary for testing.  A more efficient version would use some apply logic to fuse the ops and exit early (coming in future PR).\r\n\r\nOn small tensors [(2, 5, 5) @ (5,5)], this yields ~2.5x speedup over the python implementation.\r\n"}