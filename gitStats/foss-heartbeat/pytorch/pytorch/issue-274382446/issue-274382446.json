{"url": "https://api.github.com/repos/pytorch/pytorch/issues/3732", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/3732/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/3732/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/3732/events", "html_url": "https://github.com/pytorch/pytorch/issues/3732", "id": 274382446, "node_id": "MDU6SXNzdWUyNzQzODI0NDY=", "number": 3732, "title": "possible dataloader gpu memory leak?", "user": {"login": "iammarvelous", "id": 14206232, "node_id": "MDQ6VXNlcjE0MjA2MjMy", "avatar_url": "https://avatars0.githubusercontent.com/u/14206232?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iammarvelous", "html_url": "https://github.com/iammarvelous", "followers_url": "https://api.github.com/users/iammarvelous/followers", "following_url": "https://api.github.com/users/iammarvelous/following{/other_user}", "gists_url": "https://api.github.com/users/iammarvelous/gists{/gist_id}", "starred_url": "https://api.github.com/users/iammarvelous/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iammarvelous/subscriptions", "organizations_url": "https://api.github.com/users/iammarvelous/orgs", "repos_url": "https://api.github.com/users/iammarvelous/repos", "events_url": "https://api.github.com/users/iammarvelous/events{/privacy}", "received_events_url": "https://api.github.com/users/iammarvelous/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2017-11-16T03:25:55Z", "updated_at": "2018-01-17T10:52:41Z", "closed_at": "2018-01-17T10:52:41Z", "author_association": "NONE", "body_html": "<p>Here is minimum code to reproduce:</p>\n<pre><code>import os, tqdm\nimport cv2\nimport torch\nimport torch.utils.data\n\nclass Foo(torch.utils.data.Dataset):\n    def __init__(self):\n        self.set_name = 'train'\n    def __getitem__(self, index):\n        img = cv2.imread('test.jpg')\n        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n        return 1, 2\n    def __len__(self):\n        return 1000\n\n\nclass Test(object):\n    def __init__(self):\n        self.train_dst = Foo()\n        self.train_loader = torch.utils.data.DataLoader(self.train_dst, batch_size=16, shuffle=False,\n                                                        num_workers=4, pin_memory=False)\n        print('Total #sample: %d' % len(self.train_dst))\n\n    def test(self):\n        bar = tqdm.trange(len(self.train_loader))\n        data_generator = enumerate(self.train_loader)\n        import time\n        for t in bar:\n            bar.set_description('Epoch %i train' % (epoch + 1))\n            i, (input, target) = next(data_generator)\n            time.sleep(1)\n\nif __name__ == '__main__':\n    Test().test()\n</code></pre>\n<p>When using <code>img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)</code>, the dataloader will takes gpu memory for each process (about 73Mb). This could be reproduced with pytorch 0.2 and <a href=\"https://pypi.python.org/pypi/opencv-python\" rel=\"nofollow\">opencv-python</a>. The problem does not exist when commenting <code>img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)</code>.</p>", "body_text": "Here is minimum code to reproduce:\nimport os, tqdm\nimport cv2\nimport torch\nimport torch.utils.data\n\nclass Foo(torch.utils.data.Dataset):\n    def __init__(self):\n        self.set_name = 'train'\n    def __getitem__(self, index):\n        img = cv2.imread('test.jpg')\n        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n        return 1, 2\n    def __len__(self):\n        return 1000\n\n\nclass Test(object):\n    def __init__(self):\n        self.train_dst = Foo()\n        self.train_loader = torch.utils.data.DataLoader(self.train_dst, batch_size=16, shuffle=False,\n                                                        num_workers=4, pin_memory=False)\n        print('Total #sample: %d' % len(self.train_dst))\n\n    def test(self):\n        bar = tqdm.trange(len(self.train_loader))\n        data_generator = enumerate(self.train_loader)\n        import time\n        for t in bar:\n            bar.set_description('Epoch %i train' % (epoch + 1))\n            i, (input, target) = next(data_generator)\n            time.sleep(1)\n\nif __name__ == '__main__':\n    Test().test()\n\nWhen using img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB), the dataloader will takes gpu memory for each process (about 73Mb). This could be reproduced with pytorch 0.2 and opencv-python. The problem does not exist when commenting img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB).", "body": "Here is minimum code to reproduce:\r\n```\r\nimport os, tqdm\r\nimport cv2\r\nimport torch\r\nimport torch.utils.data\r\n\r\nclass Foo(torch.utils.data.Dataset):\r\n    def __init__(self):\r\n        self.set_name = 'train'\r\n    def __getitem__(self, index):\r\n        img = cv2.imread('test.jpg')\r\n        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\r\n        return 1, 2\r\n    def __len__(self):\r\n        return 1000\r\n\r\n\r\nclass Test(object):\r\n    def __init__(self):\r\n        self.train_dst = Foo()\r\n        self.train_loader = torch.utils.data.DataLoader(self.train_dst, batch_size=16, shuffle=False,\r\n                                                        num_workers=4, pin_memory=False)\r\n        print('Total #sample: %d' % len(self.train_dst))\r\n\r\n    def test(self):\r\n        bar = tqdm.trange(len(self.train_loader))\r\n        data_generator = enumerate(self.train_loader)\r\n        import time\r\n        for t in bar:\r\n            bar.set_description('Epoch %i train' % (epoch + 1))\r\n            i, (input, target) = next(data_generator)\r\n            time.sleep(1)\r\n\r\nif __name__ == '__main__':\r\n    Test().test()\r\n```\r\nWhen using `img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)`, the dataloader will takes gpu memory for each process (about 73Mb). This could be reproduced with pytorch 0.2 and [opencv-python](https://pypi.python.org/pypi/opencv-python). The problem does not exist when commenting `img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)`."}