{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/199044293", "pull_request_review_id": 133087949, "id": 199044293, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTA0NDI5Mw==", "diff_hunk": "@@ -386,51 +386,108 @@ inline Tensor reduce_multi_associative(const Tensor &self, IntList dims_, bool k\n     return self;\n   }\n   int64_t ndims = self.dim();\n-  auto reduce_dims = dim_list_to_bitset(dims_, ndims);\n-  Tensor result = self;\n-  for (int64_t dim = ndims-1; dim >= 0; dim--) {\n-    if (reduce_dims[dim])\n-      result = reduce_1(result, dim, keepdim);\n+  auto reduced_size = self.sizes().vec();\n+  auto dims = dims_.vec();\n+  maybe_wrap_dims(dims, ndims);\n+  // Sort the reduced dimensions so that we reduce the largest dimension first.\n+  std::sort(dims.begin(), dims.end(),\n+        [&](int64_t i, int64_t j){ return reduced_size[i] > reduced_size[j]; });\n+  int64_t reduced_numel = self.numel();\n+  int64_t max_reduced_numel = reduced_numel / reduced_size[dims[0]];\n+  int64_t buffer_size = max_reduced_numel + max_reduced_numel / reduced_size[dims[1]];\n+  // We separate `buffer` into two regions, one starting at 0, and another\n+  // starting at max_reduced_numel. These two regions are used alternatively as\n+  // the output of a `reduce_1` along a particular dimension. `offset` will\n+  // indicate which region we should use next.\n+  // Have keepdim=true when reducing. We will squeeze later.\n+  auto buffer = at::empty({buffer_size}, self.type());\n+  int64_t offset = 0;\n+  Tensor t = self;\n+  for (auto& dim : dims) {\n+    reduced_numel /= reduced_size[dim];\n+    reduced_size[dim] = 1;\n+    auto res = buffer.narrow(0, offset, reduced_numel).view(reduced_size);\n+    t = reduce_1_out(res, t, dim, true);", "path": "aten/src/ATen/native/ReduceOps.cpp", "position": 132, "original_position": 48, "commit_id": "269ac84c3634c430713a6cb342f2866d223ac370", "original_commit_id": "3efcac1a9ab743459d1de925c7e4f17240a4cc88", "user": {"login": "SsnL", "id": 5674597, "node_id": "MDQ6VXNlcjU2NzQ1OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5674597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SsnL", "html_url": "https://github.com/SsnL", "followers_url": "https://api.github.com/users/SsnL/followers", "following_url": "https://api.github.com/users/SsnL/following{/other_user}", "gists_url": "https://api.github.com/users/SsnL/gists{/gist_id}", "starred_url": "https://api.github.com/users/SsnL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SsnL/subscriptions", "organizations_url": "https://api.github.com/users/SsnL/orgs", "repos_url": "https://api.github.com/users/SsnL/repos", "events_url": "https://api.github.com/users/SsnL/events{/privacy}", "received_events_url": "https://api.github.com/users/SsnL/received_events", "type": "User", "site_admin": false}, "body": "Yes, because `t` is the input to this `reduce_1_out`, I can't do `t = buffer.narrow(...).view(...)` in the above line.", "created_at": "2018-06-29T03:25:39Z", "updated_at": "2018-11-23T15:46:33Z", "html_url": "https://github.com/pytorch/pytorch/pull/8992#discussion_r199044293", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/8992", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/199044293"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/8992#discussion_r199044293"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/8992"}}, "body_html": "<p>Yes, because <code>t</code> is the input to this <code>reduce_1_out</code>, I can't do <code>t = buffer.narrow(...).view(...)</code> in the above line.</p>", "body_text": "Yes, because t is the input to this reduce_1_out, I can't do t = buffer.narrow(...).view(...) in the above line.", "in_reply_to_id": 199044114}