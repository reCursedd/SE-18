{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/199530646", "pull_request_review_id": 133666731, "id": 199530646, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTUzMDY0Ng==", "diff_hunk": "@@ -377,7 +376,89 @@ Tensor logsumexp(const Tensor &self, int64_t dim_, bool keepdim) {\n \n // MULTI DIM REDUCE ###########################################################\n \n-template <Tensor (reduce_1)(const Tensor &, int64_t, bool)>\n+// NB: this applies two optimizations:\n+//   1. Reducing the dimensions in the order of decreasing size, so that the\n+//      larger dimensions are dealt earlier and we can work with less elements\n+//      overall.", "path": "aten/src/ATen/native/ReduceOps.cpp", "position": 16, "original_position": 16, "commit_id": "269ac84c3634c430713a6cb342f2866d223ac370", "original_commit_id": "269ac84c3634c430713a6cb342f2866d223ac370", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "It's a neat idea but are you sure it won't mess up with locality? Remember that summing over contiguous dimensions is a few times faster. What if you tried to sum a tensor like this one:\r\n\r\n```python\r\ntorch.randn(10, 200, 100).permute(0, 2, 1)\r\n```\r\n\r\nIn general, since the `_out` output will be contiguous for sure, it might be beneficial to go for the contig dim first, and only then use this sorting.", "created_at": "2018-07-02T15:12:59Z", "updated_at": "2018-11-23T15:46:39Z", "html_url": "https://github.com/pytorch/pytorch/pull/8992#discussion_r199530646", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/8992", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/199530646"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/8992#discussion_r199530646"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/8992"}}, "body_html": "<p>It's a neat idea but are you sure it won't mess up with locality? Remember that summing over contiguous dimensions is a few times faster. What if you tried to sum a tensor like this one:</p>\n<div class=\"highlight highlight-source-python\"><pre>torch.randn(<span class=\"pl-c1\">10</span>, <span class=\"pl-c1\">200</span>, <span class=\"pl-c1\">100</span>).permute(<span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">1</span>)</pre></div>\n<p>In general, since the <code>_out</code> output will be contiguous for sure, it might be beneficial to go for the contig dim first, and only then use this sorting.</p>", "body_text": "It's a neat idea but are you sure it won't mess up with locality? Remember that summing over contiguous dimensions is a few times faster. What if you tried to sum a tensor like this one:\ntorch.randn(10, 200, 100).permute(0, 2, 1)\nIn general, since the _out output will be contiguous for sure, it might be beneficial to go for the contig dim first, and only then use this sorting."}