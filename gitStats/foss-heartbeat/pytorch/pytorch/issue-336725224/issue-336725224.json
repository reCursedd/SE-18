{"url": "https://api.github.com/repos/pytorch/pytorch/issues/8992", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/8992/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/8992/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/8992/events", "html_url": "https://github.com/pytorch/pytorch/pull/8992", "id": 336725224, "node_id": "MDExOlB1bGxSZXF1ZXN0MTk4MTEwMjE2", "number": 8992, "title": "Speed-up multidim sum", "user": {"login": "SsnL", "id": 5674597, "node_id": "MDQ6VXNlcjU2NzQ1OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5674597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SsnL", "html_url": "https://github.com/SsnL", "followers_url": "https://api.github.com/users/SsnL/followers", "following_url": "https://api.github.com/users/SsnL/following{/other_user}", "gists_url": "https://api.github.com/users/SsnL/gists{/gist_id}", "starred_url": "https://api.github.com/users/SsnL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SsnL/subscriptions", "organizations_url": "https://api.github.com/users/SsnL/orgs", "repos_url": "https://api.github.com/users/SsnL/repos", "events_url": "https://api.github.com/users/SsnL/events{/privacy}", "received_events_url": "https://api.github.com/users/SsnL/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-06-28T18:10:45Z", "updated_at": "2018-11-23T15:46:49Z", "closed_at": "2018-06-30T01:41:28Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/8992", "html_url": "https://github.com/pytorch/pytorch/pull/8992", "diff_url": "https://github.com/pytorch/pytorch/pull/8992.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/8992.patch"}, "body_html": "<ol>\n<li>Instead of using non <code>_out</code> variant, we allocate a buffer and use <code>_out</code> variant to write the intermediate results into the buffer.</li>\n<li>Reduce dimensions in order of decreasing sizes.</li>\n</ol>\n<p>Benchmark:<br>\nSum a randn tensor of shape <code>[200, 1, 30, 40, 20, 1, 50]</code> along dimensions <code>[4, 6, 3, 0, 2, 5]</code>. Averaged across 1000 times:</p>\n<pre><code>before patch:\nCPU: 0.0441 s\nCUDA: 0.0273 s\n\nafter patch:\nCPU: 0.0234 s\nCUDA: 0.0047 s\n</code></pre>", "body_text": "Instead of using non _out variant, we allocate a buffer and use _out variant to write the intermediate results into the buffer.\nReduce dimensions in order of decreasing sizes.\n\nBenchmark:\nSum a randn tensor of shape [200, 1, 30, 40, 20, 1, 50] along dimensions [4, 6, 3, 0, 2, 5]. Averaged across 1000 times:\nbefore patch:\nCPU: 0.0441 s\nCUDA: 0.0273 s\n\nafter patch:\nCPU: 0.0234 s\nCUDA: 0.0047 s", "body": "1. Instead of using non `_out` variant, we allocate a buffer and use `_out` variant to write the intermediate results into the buffer.\r\n2. Reduce dimensions in order of decreasing sizes.\r\n\r\nBenchmark:\r\nSum a randn tensor of shape `[200, 1, 30, 40, 20, 1, 50]` along dimensions `[4, 6, 3, 0, 2, 5]`. Averaged across 1000 times:\r\n```\r\nbefore patch:\r\nCPU: 0.0441 s\r\nCUDA: 0.0273 s\r\n\r\nafter patch:\r\nCPU: 0.0234 s\r\nCUDA: 0.0047 s\r\n```"}