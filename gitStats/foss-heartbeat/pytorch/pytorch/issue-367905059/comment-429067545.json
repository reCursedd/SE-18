{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/429067545", "html_url": "https://github.com/pytorch/pytorch/issues/12460#issuecomment-429067545", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/12460", "id": 429067545, "node_id": "MDEyOklzc3VlQ29tbWVudDQyOTA2NzU0NQ==", "user": {"login": "tmbdev", "id": 333887, "node_id": "MDQ6VXNlcjMzMzg4Nw==", "avatar_url": "https://avatars0.githubusercontent.com/u/333887?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmbdev", "html_url": "https://github.com/tmbdev", "followers_url": "https://api.github.com/users/tmbdev/followers", "following_url": "https://api.github.com/users/tmbdev/following{/other_user}", "gists_url": "https://api.github.com/users/tmbdev/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmbdev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmbdev/subscriptions", "organizations_url": "https://api.github.com/users/tmbdev/orgs", "repos_url": "https://api.github.com/users/tmbdev/repos", "events_url": "https://api.github.com/users/tmbdev/events{/privacy}", "received_events_url": "https://api.github.com/users/tmbdev/received_events", "type": "User", "site_admin": false}, "created_at": "2018-10-11T18:25:47Z", "updated_at": "2018-10-11T18:29:26Z", "author_association": "NONE", "body_html": "<p>I completely agree that it is impossible to infer this automatically. That is <em>why</em> I am suggesting adding an API to let authors of modules communicate correct information to users of modules so that people don't have to attempt to infer this.</p>\n<p>That is, the need for this information is clear from the repeated requests for it. In the absence of an API, you force people to rely on unreliable inference schemes like \"next(m.parameters()).device\" because they have no other choice.</p>\n<p>The default implementation I suggested is not an essential part of what I'm proposing (it simply is no worse than current practice). If you prefer, provide no default implementation.</p>\n<p>A second point of my suggestion is that modules (unlike tensors) have input devices, output devices, and parameter devices, and an API needs to reflect that.</p>\n<p>(This isn't the only possible approach; another approach might be to adopt the convention that all modules move inputs to the correct device as needed. But the current situation, namely that we have functions/modules that expect inputs of particular \"dynamic types\" (devices) but cannot be queried about what those types are is problematic and I think should be addressed one way or another.)</p>", "body_text": "I completely agree that it is impossible to infer this automatically. That is why I am suggesting adding an API to let authors of modules communicate correct information to users of modules so that people don't have to attempt to infer this.\nThat is, the need for this information is clear from the repeated requests for it. In the absence of an API, you force people to rely on unreliable inference schemes like \"next(m.parameters()).device\" because they have no other choice.\nThe default implementation I suggested is not an essential part of what I'm proposing (it simply is no worse than current practice). If you prefer, provide no default implementation.\nA second point of my suggestion is that modules (unlike tensors) have input devices, output devices, and parameter devices, and an API needs to reflect that.\n(This isn't the only possible approach; another approach might be to adopt the convention that all modules move inputs to the correct device as needed. But the current situation, namely that we have functions/modules that expect inputs of particular \"dynamic types\" (devices) but cannot be queried about what those types are is problematic and I think should be addressed one way or another.)", "body": "I completely agree that it is impossible to infer this automatically. That is _why_ I am suggesting adding an API to let authors of modules communicate correct information to users of modules so that people don't have to attempt to infer this.\r\n\r\nThat is, the need for this information is clear from the repeated requests for it. In the absence of an API, you force people to rely on unreliable inference schemes like \"next(m.parameters()).device\" because they have no other choice.\r\n\r\nThe default implementation I suggested is not an essential part of what I'm proposing (it simply is no worse than current practice). If you prefer, provide no default implementation.\r\n\r\nA second point of my suggestion is that modules (unlike tensors) have input devices, output devices, and parameter devices, and an API needs to reflect that.\r\n\r\n(This isn't the only possible approach; another approach might be to adopt the convention that all modules move inputs to the correct device as needed. But the current situation, namely that we have functions/modules that expect inputs of particular \"dynamic types\" (devices) but cannot be queried about what those types are is problematic and I think should be addressed one way or another.)"}