{"url": "https://api.github.com/repos/pytorch/pytorch/issues/8997", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/8997/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/8997/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/8997/events", "html_url": "https://github.com/pytorch/pytorch/pull/8997", "id": 336758501, "node_id": "MDExOlB1bGxSZXF1ZXN0MTk4MTM2MzE4", "number": 8997, "title": "Ports Streams to ATen", "user": {"login": "mruberry", "id": 38511765, "node_id": "MDQ6VXNlcjM4NTExNzY1", "avatar_url": "https://avatars3.githubusercontent.com/u/38511765?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mruberry", "html_url": "https://github.com/mruberry", "followers_url": "https://api.github.com/users/mruberry/followers", "following_url": "https://api.github.com/users/mruberry/following{/other_user}", "gists_url": "https://api.github.com/users/mruberry/gists{/gist_id}", "starred_url": "https://api.github.com/users/mruberry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mruberry/subscriptions", "organizations_url": "https://api.github.com/users/mruberry/orgs", "repos_url": "https://api.github.com/users/mruberry/repos", "events_url": "https://api.github.com/users/mruberry/events{/privacy}", "received_events_url": "https://api.github.com/users/mruberry/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 13, "created_at": "2018-06-28T19:56:27Z", "updated_at": "2018-11-23T15:46:52Z", "closed_at": "2018-07-08T23:26:16Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/8997", "html_url": "https://github.com/pytorch/pytorch/pull/8997", "diff_url": "https://github.com/pytorch/pytorch/pull/8997.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/8997.patch"}, "body_html": "<p>This PR moves the THCStream logic (from both the THCStream and THCState APIs) to ATen. In particular, it:</p>\n<ul>\n<li>Creates a new (THC free) at::CUDAStream class and API</li>\n<li>Extends the at::Context API to expose it</li>\n<li>Stubs the current THCStream and THCState APIs to use it</li>\n<li>Updates THC to no longer violate stream encapsulation (stream.hpp is dead)</li>\n<li>Adds an ATen cpp test of the API</li>\n<li>Bonus: Removes some debug spew in test_nn.py</li>\n</ul>\n<p>The new API has several advantages over the old one:</p>\n<p>(1) It comes with an easy to use RAII, the CUDAStream. CUDAStreams have the expected copy and move semantics and are implicitly convertible to cudaStream_t.<br>\n(2) It does not depend on THCState, THCThreadLocal, or CUDA (thanks to <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=6429851\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/goldsborough\">@goldsborough</a> for suggesting the dynamic registration technique)<br>\n(3) It provides one consistent API/place for all stream operations, instead of having them split between THCStream and THCState<br>\n(4) The internals are completely encapsulated, unlike the historic THCStream<br>\n(5) It has getAndRetain semantics, which are safer than the historic gets (which allowed a gap between acquisition and retention)</p>\n<p>There are a couple things this PR does not do, however, which are left for future work:</p>\n<ul>\n<li>It leaves the c10d:CUDAStream class as a THCStream wrapper (which now really wraps an at::CUDAStream).</li>\n<li>It leaves historic users of THCStream mostly untouched, except where they violated encapsulation (by using stream.hpp). A couple forward declarations were also changed.</li>\n</ul>\n<p>I hope this PR allows easy usage of streams from ATen and is a useful pattern for porting more of the THCState API.</p>", "body_text": "This PR moves the THCStream logic (from both the THCStream and THCState APIs) to ATen. In particular, it:\n\nCreates a new (THC free) at::CUDAStream class and API\nExtends the at::Context API to expose it\nStubs the current THCStream and THCState APIs to use it\nUpdates THC to no longer violate stream encapsulation (stream.hpp is dead)\nAdds an ATen cpp test of the API\nBonus: Removes some debug spew in test_nn.py\n\nThe new API has several advantages over the old one:\n(1) It comes with an easy to use RAII, the CUDAStream. CUDAStreams have the expected copy and move semantics and are implicitly convertible to cudaStream_t.\n(2) It does not depend on THCState, THCThreadLocal, or CUDA (thanks to @goldsborough for suggesting the dynamic registration technique)\n(3) It provides one consistent API/place for all stream operations, instead of having them split between THCStream and THCState\n(4) The internals are completely encapsulated, unlike the historic THCStream\n(5) It has getAndRetain semantics, which are safer than the historic gets (which allowed a gap between acquisition and retention)\nThere are a couple things this PR does not do, however, which are left for future work:\n\nIt leaves the c10d:CUDAStream class as a THCStream wrapper (which now really wraps an at::CUDAStream).\nIt leaves historic users of THCStream mostly untouched, except where they violated encapsulation (by using stream.hpp). A couple forward declarations were also changed.\n\nI hope this PR allows easy usage of streams from ATen and is a useful pattern for porting more of the THCState API.", "body": "This PR moves the THCStream logic (from both the THCStream and THCState APIs) to ATen. In particular, it:\r\n\r\n+ Creates a new (THC free) at::CUDAStream class and API\r\n+ Extends the at::Context API to expose it\r\n+ Stubs the current THCStream and THCState APIs to use it\r\n+ Updates THC to no longer violate stream encapsulation (stream.hpp is dead)\r\n+ Adds an ATen cpp test of the API\r\n+ Bonus: Removes some debug spew in test_nn.py\r\n\r\nThe new API has several advantages over the old one:\r\n\r\n(1) It comes with an easy to use RAII, the CUDAStream. CUDAStreams have the expected copy and move semantics and are implicitly convertible to cudaStream_t.\r\n(2) It does not depend on THCState, THCThreadLocal, or CUDA (thanks to @goldsborough for suggesting the dynamic registration technique)\r\n(3) It provides one consistent API/place for all stream operations, instead of having them split between THCStream and THCState\r\n(4) The internals are completely encapsulated, unlike the historic THCStream\r\n(5) It has getAndRetain semantics, which are safer than the historic gets (which allowed a gap between acquisition and retention)\r\n\r\nThere are a couple things this PR does not do, however, which are left for future work:\r\n\r\n- It leaves the c10d:CUDAStream class as a THCStream wrapper (which now really wraps an at::CUDAStream). \r\n- It leaves historic users of THCStream mostly untouched, except where they violated encapsulation (by using stream.hpp). A couple forward declarations were also changed. \r\n\r\nI hope this PR allows easy usage of streams from ATen and is a useful pattern for porting more of the THCState API. \r\n\r\n\r\n\r\n\r\n"}