{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/192902617", "pull_request_review_id": 125768913, "id": 192902617, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MjkwMjYxNw==", "diff_hunk": "@@ -0,0 +1,60 @@\n+#include \"ATen/ATen.h\"\n+#include \"ATen/NativeFunctions.h\"\n+#include \"ATen/Dispatch.h\"\n+#include \"ATen/cuda/CUDAApplyUtils.cuh\"\n+#include \"ATen/cuda/CUDATensorMethods.cuh\"\n+#include \"ATen/cuda/CUDATypeConversion.cuh\"\n+#include \"THCUNN/THCHalfAutoNumerics.cuh\"\n+\n+namespace at { namespace native {\n+\n+template <typename scalar_t>\n+void hardshrink_cuda_kernel(Tensor& out_tensor, Tensor& lambd_tensor) {\n+  at::cuda::CUDA_tensor_apply2<scalar_t, scalar_t>(\n+      out_tensor,\n+      lambd_tensor,\n+      [] __device__ (scalar_t& out_tensor_val,\n+         scalar_t& lambd_tensor_val,\n+         bool early_exit) {\n+           if (out_tensor_val >= -lambd_tensor_val && out_tensor_val <= lambd_tensor_val) {\n+             out_tensor_val = ScalarConvert<double, scalar_t>::to(0.0);\n+           }\n+  });\n+}\n+\n+template <typename scalar_t>\n+void hardshrink_backward_cuda_kernel(Tensor& out_tensor, Tensor& lambd_tensor, const Tensor& self) {\n+  at::cuda::CUDA_tensor_apply3<scalar_t, scalar_t, scalar_t>(\n+      out_tensor,\n+      lambd_tensor,\n+      self,\n+      [] __device__ (scalar_t& out_tensor_val,\n+         scalar_t& lambd_tensor_val,\n+         scalar_t& self_val) {\n+           if (self_val >= -lambd_tensor_val && self_val <= lambd_tensor_val) {\n+             out_tensor_val = ScalarConvert<double, scalar_t>::to(0.0);\n+           }\n+  });\n+}\n+\n+Tensor hardshrink_cuda(const Tensor & self, Scalar lambd) {\n+  auto lambd_tensor = at::zeros_like(self).fill_(lambd);\n+  auto out_tensor = self.clone();", "path": "aten/src/ATen/native/cuda/Activation.cu", "position": null, "original_position": 42, "commit_id": "00e3f6e27f9bd4a092125239ddee22c1a9c4d73d", "original_commit_id": "712d886c833cce19ce42c615d80c01a2f7db93fd", "user": {"login": "ngimel", "id": 15841449, "node_id": "MDQ6VXNlcjE1ODQxNDQ5", "avatar_url": "https://avatars3.githubusercontent.com/u/15841449?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ngimel", "html_url": "https://github.com/ngimel", "followers_url": "https://api.github.com/users/ngimel/followers", "following_url": "https://api.github.com/users/ngimel/following{/other_user}", "gists_url": "https://api.github.com/users/ngimel/gists{/gist_id}", "starred_url": "https://api.github.com/users/ngimel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ngimel/subscriptions", "organizations_url": "https://api.github.com/users/ngimel/orgs", "repos_url": "https://api.github.com/users/ngimel/repos", "events_url": "https://api.github.com/users/ngimel/events{/privacy}", "received_events_url": "https://api.github.com/users/ngimel/received_events", "type": "User", "site_admin": false}, "body": "Also, you don't have to materialize lambda tensor (that adds another couple of memory accesses), lambda can remain a scalar, similarly to how it is done e.g. here https://github.com/pytorch/pytorch/blob/f8e83dc257fbebc6988a174e18b87a4c00801fbc/aten/src/ATen/native/cuda/Distributions.cu#L46", "created_at": "2018-06-04T22:50:48Z", "updated_at": "2018-11-23T15:44:55Z", "html_url": "https://github.com/pytorch/pytorch/pull/8117#discussion_r192902617", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/8117", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/192902617"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/8117#discussion_r192902617"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/8117"}}, "body_html": "<p>Also, you don't have to materialize lambda tensor (that adds another couple of memory accesses), lambda can remain a scalar, similarly to how it is done e.g. here <div class=\"border rounded-1 my-2\">\n  <div class=\"f6 px-3 py-2 lh-condensed border-bottom bg-gray-light\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/pytorch/pytorch/blob/f8e83dc257fbebc6988a174e18b87a4c00801fbc/aten/src/ATen/native/cuda/Distributions.cu#L46\">pytorch/aten/src/ATen/native/cuda/Distributions.cu</a>\n    </p>\n    <p class=\"mb-0 text-gray-light\">\n         Line 46\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/pytorch/pytorch/commit/f8e83dc257fbebc6988a174e18b87a4c00801fbc\">f8e83dc</a>\n    </p>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L46\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"46\"></td>\n          <td id=\"LC46\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-c1\">scalar_t</span> &amp; ret_val, <span class=\"pl-k\">const</span> <span class=\"pl-c1\">scalar_t</span>&amp; lambda, <span class=\"pl-k\">bool</span> early_exit) { </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n</p>", "body_text": "Also, you don't have to materialize lambda tensor (that adds another couple of memory accesses), lambda can remain a scalar, similarly to how it is done e.g. here \n  \n    \n      pytorch/aten/src/ATen/native/cuda/Distributions.cu\n    \n    \n         Line 46\n      in\n      f8e83dc\n    \n    \n    \n    \n\n        \n          \n           scalar_t & ret_val, const scalar_t& lambda, bool early_exit) {", "in_reply_to_id": 192897754}