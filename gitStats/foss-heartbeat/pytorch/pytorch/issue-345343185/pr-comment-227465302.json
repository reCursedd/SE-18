{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/227465302", "pull_request_review_id": 167512732, "id": 227465302, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNzQ2NTMwMg==", "diff_hunk": "@@ -0,0 +1,208 @@\n+#include \"ATen/Context.h\"\n+#include \"ATen/cuda/CUDAContext.h\"\n+#include \"ATen/Dispatch.h\"\n+#include \"ATen/NativeFunctions.h\"\n+#include \"ATen/cuda/PinnedMemoryAllocator.h\"\n+#include \"ATen/cuda/CUDAApplyUtils.cuh\"\n+\n+#include \"ATen/native/LinearAlgebraUtils.h\"\n+#include \"ATen/native/cuda/MiscUtils.h\"\n+\n+#include \"THC.h\" // for USE_MAGMA\n+\n+#ifdef USE_MAGMA\n+#include <magma.h>\n+#include <magma_types.h>\n+#endif\n+\n+namespace at {\n+namespace native {\n+\n+#ifdef USE_MAGMA\n+template<class scalar_t>\n+void magmaGesvBatched(\n+    magma_int_t n, magma_int_t nrhs, scalar_t** dA_array, magma_int_t ldda,\n+    magma_int_t** dipiv_array, scalar_t** dB_array, magma_int_t lddb,\n+    magma_int_t* dinfo_array, magma_int_t batch_count, MAGMAQueue magma_queue) {\n+  AT_ERROR(\"gesv only takes float or double Tensors\");\n+}\n+\n+template<class scalar_t>\n+void magmaGetrfBatched(\n+    magma_int_t m, magma_int_t n, scalar_t** dA_array, magma_int_t ldda,\n+    magma_int_t** ipiv_array, magma_int_t* info_array, magma_int_t batchsize,\n+    MAGMAQueue magma_queue) {\n+  AT_ERROR(\"getrf only takes float or double Tensors\");\n+}\n+\n+template<class scalar_t>\n+void magmaGetriBatched(\n+    magma_int_t n, scalar_t** dA_array, magma_int_t ldda,\n+    magma_int_t** ipiv_array, scalar_t** dinvA_array, magma_int_t lddia,\n+    magma_int_t* info_array, magma_int_t batchsize, MAGMAQueue magma_queue) {\n+  AT_ERROR(\"getri only takes float or double Tensors\");\n+}\n+\n+template<>\n+void magmaGesvBatched<double>(\n+    magma_int_t n, magma_int_t nrhs, double** dA_array, magma_int_t ldda,\n+    magma_int_t** dipiv_array, double** dB_array, magma_int_t lddb,\n+    magma_int_t* dinfo_array, magma_int_t batch_count, MAGMAQueue magma_queue) {\n+  magma_dgesv_batched(n, nrhs, dA_array, ldda, dipiv_array, dB_array, lddb, dinfo_array, batch_count, magma_queue.get_queue());\n+}\n+\n+template<>\n+void magmaGesvBatched<float>(\n+    magma_int_t n, magma_int_t nrhs, float** dA_array, magma_int_t ldda,\n+    magma_int_t** dipiv_array, float** dB_array, magma_int_t lddb,\n+    magma_int_t* dinfo_array, magma_int_t batch_count, MAGMAQueue magma_queue) {\n+  magma_sgesv_batched(n, nrhs, dA_array, ldda, dipiv_array, dB_array, lddb, dinfo_array, batch_count, magma_queue.get_queue());\n+}\n+\n+template<>\n+void magmaGetrfBatched<double>(\n+    magma_int_t m, magma_int_t n, double** dA_array, magma_int_t ldda,\n+    magma_int_t** ipiv_array, magma_int_t* info_array, magma_int_t batchsize,\n+    MAGMAQueue magma_queue) {\n+    magma_dgetrf_batched(m, n, dA_array, ldda, ipiv_array, info_array, batchsize, magma_queue.get_queue());\n+}\n+\n+template<>\n+void magmaGetrfBatched<float>(\n+    magma_int_t m, magma_int_t n, float** dA_array, magma_int_t ldda,\n+    magma_int_t** ipiv_array, magma_int_t* info_array, magma_int_t batchsize,\n+    MAGMAQueue magma_queue) {\n+    magma_sgetrf_batched(m, n, dA_array, ldda, ipiv_array, info_array, batchsize, magma_queue.get_queue());\n+}\n+\n+template<>\n+void magmaGetriBatched<double>(\n+    magma_int_t n, double** dA_array, magma_int_t ldda,\n+    magma_int_t** ipiv_array, double** dinvA_array, magma_int_t lddia,\n+    magma_int_t* info_array, magma_int_t batchsize, MAGMAQueue magma_queue) {\n+    magma_dgetri_outofplace_batched(n, dA_array, ldda, ipiv_array, dinvA_array, lddia, info_array, batchsize, magma_queue.get_queue());\n+}\n+\n+template<>\n+void magmaGetriBatched<float>(\n+    magma_int_t n, float** dA_array, magma_int_t ldda,\n+    magma_int_t** ipiv_array, float** dinvA_array, magma_int_t lddia,\n+    magma_int_t* info_array, magma_int_t batchsize, MAGMAQueue magma_queue) {\n+    magma_sgetri_outofplace_batched(n, dA_array, ldda, ipiv_array, dinvA_array, lddia, info_array, batchsize, magma_queue.get_queue());\n+}\n+#endif\n+\n+#define ALLOCATE_ARRAY(name, type, size, dummy_tensor) \\\n+  auto storage_##name = pin_memory<type>(size, dummy_tensor); \\\n+  name = static_cast<type*>(storage_##name.data());\n+\n+template <typename scalar_t>\n+static void apply_gesv(Tensor& b, Tensor& A, std::vector<int64_t>& infos) {\n+#ifndef USE_MAGMA\n+AT_ERROR(\"gesv: MAGMA library not found in \"\n+    \"compilation. Please rebuild with MAGMA.\");\n+#else\n+  auto A_data = A.data<scalar_t>();\n+  auto b_data = b.data<scalar_t>();\n+  auto A_mat_stride = matrixStride(A);\n+  auto b_mat_stride = matrixStride(b);\n+\n+  magma_int_t batch_size = magma_int_cast(batchCount(A), \"batchCount\");\n+  magma_int_t n = magma_int_cast(A.size(-2), \"A.size(-2)\");\n+  magma_int_t nrhs = magma_int_cast(b.size(-1), \"b.size(-1)\");\n+\n+  magma_int_t* info_array;\n+  magma_int_t* ipiv_data;\n+  magma_int_t** ipiv_array;\n+  scalar_t** A_array;\n+  scalar_t** b_array;\n+\n+  ALLOCATE_ARRAY(info_array, magma_int_t, batch_size, b);\n+  ALLOCATE_ARRAY(ipiv_data, magma_int_t, batch_size * n, b);\n+  ALLOCATE_ARRAY(ipiv_array, magma_int_t*, batch_size, b);\n+  ALLOCATE_ARRAY(A_array, scalar_t*, batch_size, b);\n+  ALLOCATE_ARRAY(b_array, scalar_t*, batch_size, b);\n+\n+  // Set up the created arrays\n+  for (int64_t i = 0; i < batch_size; i++) {\n+    A_array[i] = &A_data[i * A_mat_stride];\n+    b_array[i] = &b_data[i * b_mat_stride];\n+    ipiv_array[i] = &ipiv_data[i * n];\n+  }\n+\n+  magmaGesvBatched<scalar_t>(\n+      n, nrhs, A_array, n, ipiv_array, b_array, n,\n+      info_array, batch_size, MAGMAQueue(b.get_device()));\n+\n+  for (int64_t i = 0; i < batch_size; i++) {\n+    infos[i] = info_array[i];\n+  }\n+#endif\n+}\n+\n+GENERATE_LINALG_HELPER_2_ARGS(gesv, self, A, cuda)\n+\n+template <typename scalar_t>\n+static void apply_inverse(Tensor &self, Tensor &self_inv, std::vector<int64_t>& infos) {\n+#ifndef USE_MAGMA\n+AT_ERROR(\"inverse: MAGMA library not found in \"\n+    \"compilation. Please rebuild with MAGMA.\");\n+#else\n+  auto self_data = self.data<scalar_t>();\n+  auto self_mat_stride = matrixStride(self);\n+  auto self_inv_data = self_inv.data<scalar_t>();\n+  auto self_inv_mat_stride = matrixStride(self_inv);\n+\n+  magma_int_t batch_size = magma_int_cast(batchCount(self), \"batchCount\");\n+  magma_int_t n = magma_int_cast(self.size(-2), \"self.size(-2)\");\n+\n+  magma_int_t* info_array;\n+  magma_int_t* ipiv_data;\n+  magma_int_t** ipiv_array;\n+  scalar_t** self_array;\n+  scalar_t** self_inv_array;\n+\n+  ALLOCATE_ARRAY(info_array, magma_int_t, batch_size, self);\n+  ALLOCATE_ARRAY(ipiv_data, magma_int_t, batch_size * n, self);\n+  ALLOCATE_ARRAY(ipiv_array, magma_int_t*, batch_size, self);\n+  ALLOCATE_ARRAY(self_array, scalar_t*, batch_size, self);\n+  ALLOCATE_ARRAY(self_inv_array, scalar_t*, batch_size, self_inv);\n+\n+  // Set up the created arrays\n+  for (int64_t i = 0; i < batch_size; i++) {\n+    self_array[i] = &self_data[i * self_mat_stride];\n+    self_inv_array[i] = &self_inv_data[i * self_inv_mat_stride];\n+    ipiv_array[i] = &ipiv_data[i * n];\n+  }\n+\n+  magmaGetrfBatched<scalar_t>(\n+    n, n, self_array, n, ipiv_array, info_array,\n+    batch_size, MAGMAQueue(self.get_device()));\n+\n+  magmaGetriBatched<scalar_t>(\n+    n, self_array, n, ipiv_array, self_inv_array,\n+    n, info_array, batch_size, MAGMAQueue(self.get_device()));", "path": "aten/src/ATen/native/cuda/BatchLinearAlgebra.cu", "position": null, "original_position": 184, "commit_id": "8cc65045618a15a741a33ac31a59edbbc7279290", "original_commit_id": "ca96075b309c040cd4403e17a0e714782e90e1e2", "user": {"login": "zou3519", "id": 5652049, "node_id": "MDQ6VXNlcjU2NTIwNDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/5652049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zou3519", "html_url": "https://github.com/zou3519", "followers_url": "https://api.github.com/users/zou3519/followers", "following_url": "https://api.github.com/users/zou3519/following{/other_user}", "gists_url": "https://api.github.com/users/zou3519/gists{/gist_id}", "starred_url": "https://api.github.com/users/zou3519/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zou3519/subscriptions", "organizations_url": "https://api.github.com/users/zou3519/orgs", "repos_url": "https://api.github.com/users/zou3519/repos", "events_url": "https://api.github.com/users/zou3519/events{/privacy}", "received_events_url": "https://api.github.com/users/zou3519/received_events", "type": "User", "site_admin": false}, "body": "You should share this MAGMAQueue between getrf and getri. Something like the following:\r\n\r\n```\r\nMAGAMAQueue magma_queue(self.get_device());\r\n\r\n  magmaGetrfBatched<scalar_t>(\r\n    n, n, self_array, n, ipiv_array, info_array,\r\n    batch_size, magma_queue);\r\n   magmaGetriBatched<scalar_t>(\r\n    n, self_array, n, ipiv_array, self_inv_array,\r\n    n, info_array, batch_size, magma_queue);\r\n\r\n```", "created_at": "2018-10-23T16:15:36Z", "updated_at": "2018-11-23T15:53:25Z", "html_url": "https://github.com/pytorch/pytorch/pull/9949#discussion_r227465302", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/9949", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/227465302"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/9949#discussion_r227465302"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/9949"}}, "body_html": "<p>You should share this MAGMAQueue between getrf and getri. Something like the following:</p>\n<pre><code>MAGAMAQueue magma_queue(self.get_device());\n\n  magmaGetrfBatched&lt;scalar_t&gt;(\n    n, n, self_array, n, ipiv_array, info_array,\n    batch_size, magma_queue);\n   magmaGetriBatched&lt;scalar_t&gt;(\n    n, self_array, n, ipiv_array, self_inv_array,\n    n, info_array, batch_size, magma_queue);\n\n</code></pre>", "body_text": "You should share this MAGMAQueue between getrf and getri. Something like the following:\nMAGAMAQueue magma_queue(self.get_device());\n\n  magmaGetrfBatched<scalar_t>(\n    n, n, self_array, n, ipiv_array, info_array,\n    batch_size, magma_queue);\n   magmaGetriBatched<scalar_t>(\n    n, self_array, n, ipiv_array, self_inv_array,\n    n, info_array, batch_size, magma_queue);"}