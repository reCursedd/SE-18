{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/205945779", "pull_request_review_id": 141319573, "id": 205945779, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk0NTc3OQ==", "diff_hunk": "@@ -0,0 +1,149 @@\n+#include \"ATen/ATen.h\"\n+#include \"ATen/CPUApplyUtils.h\"\n+#include \"ATen/Dispatch.h\"\n+#include \"ATen/ExpandUtils.h\"\n+#include \"ATen/NativeFunctions.h\"\n+\n+#include \"ATen/native/LinearAlgebraUtils.h\"\n+#include \"Inverse.h\"\n+\n+#include \"TH.h\" // for USE_LAPACK\n+\n+#include <vector>\n+\n+#ifdef USE_LAPACK\n+extern \"C\" void dgetri_(\n+    int *n, double *a, int *lda,\n+    int *ipiv, double *work, int *lwork,\n+    int *info);\n+extern \"C\" void sgetri_(\n+    int *n, float *a, int *lda,\n+    int *ipiv, float *work, int *lwork,\n+    int *info);\n+extern \"C\" void dgetrf_(\n+    int *m, int *n, double *a,\n+    int *lda, int *ipiv,\n+    int *info);\n+extern \"C\" void sgetrf_(\n+    int *m, int *n, float *a,\n+    int *lda, int *ipiv,\n+    int *info);\n+#endif\n+\n+namespace at {\n+namespace native {\n+\n+template<class scalar_t>\n+void lapackGetri(\n+    int n, scalar_t *a, int lda,\n+    int *ipiv, scalar_t *work, int lwork,\n+    int *info) {\n+  AT_ERROR(\"getri only takes float or double Tensors\");\n+}\n+\n+template<class scalar_t>\n+void lapackGetrf(\n+    int m, int n, scalar_t* a,\n+    int lda, int *ipiv, int *info) {\n+  AT_ERROR(\"getrf only takes float or double Tensors\");\n+}\n+\n+#ifdef USE_LAPACK\n+template<> void lapackGetri<double>(\n+    int n, double *a, int lda,\n+    int *ipiv, double *work, int lwork,\n+    int *info) {\n+  dgetri_(&n, a, &lda, ipiv, work, &lwork, info);\n+}\n+\n+template<> void lapackGetri<float>(\n+    int n, float *a, int lda,\n+    int *ipiv, float *work, int lwork,\n+    int *info) {\n+  sgetri_(&n, a, &lda, ipiv, work, &lwork, info);\n+}\n+\n+template<> void lapackGetrf<double>(\n+    int m, int n, double *a,\n+    int lda, int *ipiv, int *info) {\n+  dgetrf_(&m, &n, a, &lda, ipiv, info);\n+}\n+\n+template<> void lapackGetrf<float>(\n+    int m, int n, float *a,\n+    int lda, int *ipiv, int *info) {\n+  sgetrf_(&m, &n, a, &lda, ipiv, info);\n+}\n+#endif\n+\n+template <typename scalar_t>\n+static void applyInverse(\n+  Tensor& self, std::vector<int64_t> getrf_infos, std::vector<int64_t> getri_infos) {\n+#ifndef USE_LAPACK\n+  AT_ERROR(\"inverse: LAPACK library not found in compilation\");\n+#endif\n+  auto self_data = self.data<scalar_t>();\n+  auto self_matrix_stride = matrixStride(self);\n+\n+  auto batch_size = batchCount(self);\n+  auto n = self.size(-2);\n+\n+  auto ipiv = at::empty({n}, self.type().toScalarType(kInt));\n+  int lwork;\n+  scalar_t wkopt;\n+  Tensor work;\n+\n+  for (int64_t i = 0; i < batch_size; i++) {", "path": "aten/src/ATen/native/Inverse.cpp", "position": null, "original_position": 96, "commit_id": "8cc65045618a15a741a33ac31a59edbbc7279290", "original_commit_id": "1dfabafdbdcc904c0756d61d505c7b029a7f70c6", "user": {"login": "vishwakftw", "id": 23639302, "node_id": "MDQ6VXNlcjIzNjM5MzAy", "avatar_url": "https://avatars2.githubusercontent.com/u/23639302?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vishwakftw", "html_url": "https://github.com/vishwakftw", "followers_url": "https://api.github.com/users/vishwakftw/followers", "following_url": "https://api.github.com/users/vishwakftw/following{/other_user}", "gists_url": "https://api.github.com/users/vishwakftw/gists{/gist_id}", "starred_url": "https://api.github.com/users/vishwakftw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vishwakftw/subscriptions", "organizations_url": "https://api.github.com/users/vishwakftw/orgs", "repos_url": "https://api.github.com/users/vishwakftw/repos", "events_url": "https://api.github.com/users/vishwakftw/events{/privacy}", "received_events_url": "https://api.github.com/users/vishwakftw/received_events", "type": "User", "site_admin": false}, "body": "Can this loop be parallelized? Might have to use constructs from OpenMP to do this, and perhaps use a flag variable too.", "created_at": "2018-07-28T15:18:41Z", "updated_at": "2018-11-23T15:48:20Z", "html_url": "https://github.com/pytorch/pytorch/pull/9949#discussion_r205945779", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/9949", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/205945779"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/9949#discussion_r205945779"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/9949"}}, "body_html": "<p>Can this loop be parallelized? Might have to use constructs from OpenMP to do this, and perhaps use a flag variable too.</p>", "body_text": "Can this loop be parallelized? Might have to use constructs from OpenMP to do this, and perhaps use a flag variable too."}