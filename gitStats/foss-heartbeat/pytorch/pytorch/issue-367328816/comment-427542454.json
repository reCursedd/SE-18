{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/427542454", "html_url": "https://github.com/pytorch/pytorch/issues/12383#issuecomment-427542454", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/12383", "id": 427542454, "node_id": "MDEyOklzc3VlQ29tbWVudDQyNzU0MjQ1NA==", "user": {"login": "goldsborough", "id": 6429851, "node_id": "MDQ6VXNlcjY0Mjk4NTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/6429851?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goldsborough", "html_url": "https://github.com/goldsborough", "followers_url": "https://api.github.com/users/goldsborough/followers", "following_url": "https://api.github.com/users/goldsborough/following{/other_user}", "gists_url": "https://api.github.com/users/goldsborough/gists{/gist_id}", "starred_url": "https://api.github.com/users/goldsborough/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goldsborough/subscriptions", "organizations_url": "https://api.github.com/users/goldsborough/orgs", "repos_url": "https://api.github.com/users/goldsborough/repos", "events_url": "https://api.github.com/users/goldsborough/events{/privacy}", "received_events_url": "https://api.github.com/users/goldsborough/received_events", "type": "User", "site_admin": false}, "created_at": "2018-10-06T03:33:58Z", "updated_at": "2018-10-06T03:33:58Z", "author_association": "CONTRIBUTOR", "body_html": "<p>I think it's a bug that the <code>TensorOptions</code> returned by <code>Tensor::options</code> don't include <code>requires_grad</code>, thanks for reporting that. CC <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=13564\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ezyang\">@ezyang</a></p>\n<p>To answer your more general question: In the C++ frontend, you never have to and never should use the <code>at::</code> namespace. All symbols you'd want to access in <code>at::</code> are exported to <code>torch::</code>. By ignoring the <code>at::</code> namespace entirely you won't have to deal with the distinction between tensors and variables (which is the root problem here) at all. Just see <code>torch::Tensor</code> as the equivalent to <code>torch.Tensor</code> in Python -- it's always a variable.</p>", "body_text": "I think it's a bug that the TensorOptions returned by Tensor::options don't include requires_grad, thanks for reporting that. CC @ezyang\nTo answer your more general question: In the C++ frontend, you never have to and never should use the at:: namespace. All symbols you'd want to access in at:: are exported to torch::. By ignoring the at:: namespace entirely you won't have to deal with the distinction between tensors and variables (which is the root problem here) at all. Just see torch::Tensor as the equivalent to torch.Tensor in Python -- it's always a variable.", "body": "I think it's a bug that the `TensorOptions` returned by `Tensor::options` don't include `requires_grad`, thanks for reporting that. CC @ezyang \r\n\r\nTo answer your more general question: In the C++ frontend, you never have to and never should use the `at::` namespace. All symbols you'd want to access in `at::` are exported to `torch::`. By ignoring the `at::` namespace entirely you won't have to deal with the distinction between tensors and variables (which is the root problem here) at all. Just see `torch::Tensor` as the equivalent to `torch.Tensor` in Python -- it's always a variable."}