{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/159121068", "pull_request_review_id": 86028883, "id": 159121068, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1OTEyMTA2OA==", "diff_hunk": "@@ -2,6 +2,62 @@\n #define THC_GENERIC_FILE \"generic/THCTensorIndex.cu\"\n #else\n \n+// Check tensor dimensions for index operations, and return the slice size.\n+// src can be nullptr in case of indexFill: in that case it is ignored.\n+static ptrdiff_t THCTensor_(getSliceSize)(THCState *state, THCTensor *dst,\n+                                          int dim,\n+                                          THCudaLongTensor *index,\n+                                          THCTensor *src)\n+{\n+  int dstDims = THCTensor_(nDimension)(state, dst);\n+  int srcDims = (src == nullptr) ? dstDims : THCTensor_(nDimension)(state, src);\n+\n+  THArgCheck(THCudaLongTensor_nDimension(state, index) == 1, 4,\n+             \"expecting vector of indices\");\n+  THArgCheck(dim >= 0 && dim < dstDims, 2, \"Indexing dim is out of bounds\");\n+\n+  ptrdiff_t dstSliceSize = 1;\n+  for (int d = 0; d < dstDims; d++) {\n+    if (d != dim) {\n+      dstSliceSize *= dst->size[d];\n+    }\n+  }\n+\n+  if (src == nullptr) return dstSliceSize;\n+\n+  THArgCheck(dim < srcDims, 3, \"Indexing dim is out of bounds\");\n+  THArgCheck(THCudaLongTensor_nElement(state, index) == src->size[dim], 4,\n+             \"length of src.size[dim] is not equal to length of indices\");\n+\n+  ptrdiff_t srcSliceSize = 1;\n+  bool mismatch = false;\n+\n+  if (dstDims != srcDims) mismatch = true;\n+\n+  for (int d = 0; d < srcDims; d++) {\n+    if (d != dim) {\n+      srcSliceSize *= src->size[d];\n+      if (!mismatch && dst->size[d] != src->size[d]) mismatch = true;\n+    }\n+  }\n+\n+  THArgCheck(dstSliceSize == srcSliceSize, 2,\n+             \"Source/destination tensor have different slice sizes (%ld vs %ld)\",\n+             dstSliceSize, srcSliceSize);\n+\n+  if (mismatch) {", "path": "aten/src/THC/generic/THCTensorIndex.cu", "position": 47, "original_position": 47, "commit_id": "5906f3f9f632c10d02b8cacf00bb621e8f2149b3", "original_commit_id": "5906f3f9f632c10d02b8cacf00bb621e8f2149b3", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Ideally we would make THC strict as you proposed, and this check would live in the Python bindings (along with the code that reshapes the inputs correctly to fit into the strict constraints). Unconditionally printing from C is not a good practice, as the user has no control over it (in contrary to Python warnings)", "created_at": "2017-12-30T11:20:15Z", "updated_at": "2018-11-23T15:37:43Z", "html_url": "https://github.com/pytorch/pytorch/pull/4342#discussion_r159121068", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4342", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/159121068"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/4342#discussion_r159121068"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4342"}}, "body_html": "<p>Ideally we would make THC strict as you proposed, and this check would live in the Python bindings (along with the code that reshapes the inputs correctly to fit into the strict constraints). Unconditionally printing from C is not a good practice, as the user has no control over it (in contrary to Python warnings)</p>", "body_text": "Ideally we would make THC strict as you proposed, and this check would live in the Python bindings (along with the code that reshapes the inputs correctly to fit into the strict constraints). Unconditionally printing from C is not a good practice, as the user has no control over it (in contrary to Python warnings)"}