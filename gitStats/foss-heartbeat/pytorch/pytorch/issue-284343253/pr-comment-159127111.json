{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/159127111", "pull_request_review_id": 86034762, "id": 159127111, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1OTEyNzExMQ==", "diff_hunk": "@@ -2,6 +2,62 @@\n #define THC_GENERIC_FILE \"generic/THCTensorIndex.cu\"\n #else\n \n+// Check tensor dimensions for index operations, and return the slice size.\n+// src can be nullptr in case of indexFill: in that case it is ignored.\n+static ptrdiff_t THCTensor_(getSliceSize)(THCState *state, THCTensor *dst,\n+                                          int dim,\n+                                          THCudaLongTensor *index,\n+                                          THCTensor *src)\n+{\n+  int dstDims = THCTensor_(nDimension)(state, dst);\n+  int srcDims = (src == nullptr) ? dstDims : THCTensor_(nDimension)(state, src);\n+\n+  THArgCheck(THCudaLongTensor_nDimension(state, index) == 1, 4,\n+             \"expecting vector of indices\");\n+  THArgCheck(dim >= 0 && dim < dstDims, 2, \"Indexing dim is out of bounds\");\n+\n+  ptrdiff_t dstSliceSize = 1;\n+  for (int d = 0; d < dstDims; d++) {\n+    if (d != dim) {\n+      dstSliceSize *= dst->size[d];\n+    }\n+  }\n+\n+  if (src == nullptr) return dstSliceSize;\n+\n+  THArgCheck(dim < srcDims, 3, \"Indexing dim is out of bounds\");\n+  THArgCheck(THCudaLongTensor_nElement(state, index) == src->size[dim], 4,\n+             \"length of src.size[dim] is not equal to length of indices\");\n+\n+  ptrdiff_t srcSliceSize = 1;\n+  bool mismatch = false;\n+\n+  if (dstDims != srcDims) mismatch = true;\n+\n+  for (int d = 0; d < srcDims; d++) {\n+    if (d != dim) {\n+      srcSliceSize *= src->size[d];\n+      if (!mismatch && dst->size[d] != src->size[d]) mismatch = true;", "path": "aten/src/THC/generic/THCTensorIndex.cu", "position": 39, "original_position": 39, "commit_id": "5906f3f9f632c10d02b8cacf00bb621e8f2149b3", "original_commit_id": "5906f3f9f632c10d02b8cacf00bb621e8f2149b3", "user": {"login": "yongjik", "id": 31876421, "node_id": "MDQ6VXNlcjMxODc2NDIx", "avatar_url": "https://avatars2.githubusercontent.com/u/31876421?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yongjik", "html_url": "https://github.com/yongjik", "followers_url": "https://api.github.com/users/yongjik/followers", "following_url": "https://api.github.com/users/yongjik/following{/other_user}", "gists_url": "https://api.github.com/users/yongjik/gists{/gist_id}", "starred_url": "https://api.github.com/users/yongjik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yongjik/subscriptions", "organizations_url": "https://api.github.com/users/yongjik/orgs", "repos_url": "https://api.github.com/users/yongjik/repos", "events_url": "https://api.github.com/users/yongjik/events{/privacy}", "received_events_url": "https://api.github.com/users/yongjik/received_events", "type": "User", "site_admin": false}, "body": "Actually, we do need it: without it, if `dstDims < srcDims`, `dst->size[d]` will read past the end of the array.", "created_at": "2017-12-30T18:46:16Z", "updated_at": "2018-11-23T15:37:43Z", "html_url": "https://github.com/pytorch/pytorch/pull/4342#discussion_r159127111", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4342", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/159127111"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/4342#discussion_r159127111"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4342"}}, "body_html": "<p>Actually, we do need it: without it, if <code>dstDims &lt; srcDims</code>, <code>dst-&gt;size[d]</code> will read past the end of the array.</p>", "body_text": "Actually, we do need it: without it, if dstDims < srcDims, dst->size[d] will read past the end of the array.", "in_reply_to_id": 159121080}