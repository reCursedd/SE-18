{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/353765862", "html_url": "https://github.com/pytorch/pytorch/pull/4342#issuecomment-353765862", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/4342", "id": 353765862, "node_id": "MDEyOklzc3VlQ29tbWVudDM1Mzc2NTg2Mg==", "user": {"login": "yongjik", "id": 31876421, "node_id": "MDQ6VXNlcjMxODc2NDIx", "avatar_url": "https://avatars2.githubusercontent.com/u/31876421?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yongjik", "html_url": "https://github.com/yongjik", "followers_url": "https://api.github.com/users/yongjik/followers", "following_url": "https://api.github.com/users/yongjik/following{/other_user}", "gists_url": "https://api.github.com/users/yongjik/gists{/gist_id}", "starred_url": "https://api.github.com/users/yongjik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yongjik/subscriptions", "organizations_url": "https://api.github.com/users/yongjik/orgs", "repos_url": "https://api.github.com/users/yongjik/repos", "events_url": "https://api.github.com/users/yongjik/events{/privacy}", "received_events_url": "https://api.github.com/users/yongjik/received_events", "type": "User", "site_admin": false}, "created_at": "2017-12-24T05:10:13Z", "updated_at": "2017-12-24T05:10:13Z", "author_association": "CONTRIBUTOR", "body_html": "<p>For example, the following code would silently corrupt the memory, but now it<br>\ngenerates an error:</p>\n<pre><code>A = torch.zeros(4, 4).cuda()\nB = torch.zeros(3, 5).cuda()\nidxs = torch.LongTensor([2, 1, 0]).cuda()\nA.index_add_(0, idxs, B)  # or index_copy_\n# RuntimeError: invalid argument 2: Source/destination tensor have different\n# slice sizes (4 vs 5) at (...)/aten/src/THC/generic/THCTensorIndex.cu:46\n</code></pre>\n<p>Also, the following code generates a warning.  (I'm not sure if anybody is<br>\nintentionally using this behavior, but I decided to play it safe.)</p>\n<pre><code>C = torch.zeros(3, 2, 2).cuda()\nA.index_add_(0, idxs, C)  # or index_copy_\n# Warning: source/destination slices have same size but different shape for\n# an index operation.  This behavior is deprecated.\n</code></pre>", "body_text": "For example, the following code would silently corrupt the memory, but now it\ngenerates an error:\nA = torch.zeros(4, 4).cuda()\nB = torch.zeros(3, 5).cuda()\nidxs = torch.LongTensor([2, 1, 0]).cuda()\nA.index_add_(0, idxs, B)  # or index_copy_\n# RuntimeError: invalid argument 2: Source/destination tensor have different\n# slice sizes (4 vs 5) at (...)/aten/src/THC/generic/THCTensorIndex.cu:46\n\nAlso, the following code generates a warning.  (I'm not sure if anybody is\nintentionally using this behavior, but I decided to play it safe.)\nC = torch.zeros(3, 2, 2).cuda()\nA.index_add_(0, idxs, C)  # or index_copy_\n# Warning: source/destination slices have same size but different shape for\n# an index operation.  This behavior is deprecated.", "body": "For example, the following code would silently corrupt the memory, but now it\r\ngenerates an error:\r\n\r\n    A = torch.zeros(4, 4).cuda()\r\n    B = torch.zeros(3, 5).cuda()\r\n    idxs = torch.LongTensor([2, 1, 0]).cuda()\r\n    A.index_add_(0, idxs, B)  # or index_copy_\r\n    # RuntimeError: invalid argument 2: Source/destination tensor have different\r\n    # slice sizes (4 vs 5) at (...)/aten/src/THC/generic/THCTensorIndex.cu:46\r\n\r\nAlso, the following code generates a warning.  (I'm not sure if anybody is\r\nintentionally using this behavior, but I decided to play it safe.)\r\n\r\n    C = torch.zeros(3, 2, 2).cuda()\r\n    A.index_add_(0, idxs, C)  # or index_copy_\r\n    # Warning: source/destination slices have same size but different shape for\r\n    # an index operation.  This behavior is deprecated."}