{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/403520950", "html_url": "https://github.com/pytorch/pytorch/issues/9261#issuecomment-403520950", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/9261", "id": 403520950, "node_id": "MDEyOklzc3VlQ29tbWVudDQwMzUyMDk1MA==", "user": {"login": "t-vi", "id": 20787943, "node_id": "MDQ6VXNlcjIwNzg3OTQz", "avatar_url": "https://avatars2.githubusercontent.com/u/20787943?v=4", "gravatar_id": "", "url": "https://api.github.com/users/t-vi", "html_url": "https://github.com/t-vi", "followers_url": "https://api.github.com/users/t-vi/followers", "following_url": "https://api.github.com/users/t-vi/following{/other_user}", "gists_url": "https://api.github.com/users/t-vi/gists{/gist_id}", "starred_url": "https://api.github.com/users/t-vi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/t-vi/subscriptions", "organizations_url": "https://api.github.com/users/t-vi/orgs", "repos_url": "https://api.github.com/users/t-vi/repos", "events_url": "https://api.github.com/users/t-vi/events{/privacy}", "received_events_url": "https://api.github.com/users/t-vi/received_events", "type": "User", "site_admin": false}, "created_at": "2018-07-09T15:33:27Z", "updated_at": "2018-07-09T15:33:27Z", "author_association": "CONTRIBUTOR", "body_html": "<p>My impression is that CuPy implements a contract to be similar to the numpy/PyTorch sharing of data and PyTorch doesn't and instead interprets the contract you describe .</p>\n<p>I must admit that I haven't seen the specs to argue about it but intuitively, the CuPy implementation makes much more sense to me.</p>\n<p>I can still access a tensor I pass to to_dlpack. What happens with that when CuPy decides it doesn't need the capsule anymore?</p>", "body_text": "My impression is that CuPy implements a contract to be similar to the numpy/PyTorch sharing of data and PyTorch doesn't and instead interprets the contract you describe .\nI must admit that I haven't seen the specs to argue about it but intuitively, the CuPy implementation makes much more sense to me.\nI can still access a tensor I pass to to_dlpack. What happens with that when CuPy decides it doesn't need the capsule anymore?", "body": "My impression is that CuPy implements a contract to be similar to the numpy/PyTorch sharing of data and PyTorch doesn't and instead interprets the contract you describe .\r\n\r\nI must admit that I haven't seen the specs to argue about it but intuitively, the CuPy implementation makes much more sense to me.\r\n\r\nI can still access a tensor I pass to to_dlpack. What happens with that when CuPy decides it doesn't need the capsule anymore?\r\n"}