{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/368082023", "html_url": "https://github.com/pytorch/pytorch/issues/5374#issuecomment-368082023", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/5374", "id": 368082023, "node_id": "MDEyOklzc3VlQ29tbWVudDM2ODA4MjAyMw==", "user": {"login": "SsnL", "id": 5674597, "node_id": "MDQ6VXNlcjU2NzQ1OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5674597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SsnL", "html_url": "https://github.com/SsnL", "followers_url": "https://api.github.com/users/SsnL/followers", "following_url": "https://api.github.com/users/SsnL/following{/other_user}", "gists_url": "https://api.github.com/users/SsnL/gists{/gist_id}", "starred_url": "https://api.github.com/users/SsnL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SsnL/subscriptions", "organizations_url": "https://api.github.com/users/SsnL/orgs", "repos_url": "https://api.github.com/users/SsnL/repos", "events_url": "https://api.github.com/users/SsnL/events{/privacy}", "received_events_url": "https://api.github.com/users/SsnL/received_events", "type": "User", "site_admin": false}, "created_at": "2018-02-23T17:36:52Z", "updated_at": "2018-02-23T17:37:07Z", "author_association": "CONTRIBUTOR", "body_html": "<p>By the way, cuda kernels are run asynchronously. So, when benchmarking cuda code, you should use <code>torch.cuda.synchronize()</code> to get the correct timings. e.g.,</p>\n<div class=\"highlight highlight-source-python\"><pre>t <span class=\"pl-k\">=</span> <span class=\"pl-c1\">0</span>\n<span class=\"pl-k\">for</span> i <span class=\"pl-k\">in</span> <span class=\"pl-c1\">range</span>(epochs):\n    torch.cuda.synchronize()\n    t0 <span class=\"pl-k\">=</span> time.time()\n    optim.zero_grad()\n    p <span class=\"pl-k\">=</span> net(x)\n    loss(p, y).backward()\n    optim.step()\n    torch.cuda.synchronize()\n    t <span class=\"pl-k\">+=</span> time.time() <span class=\"pl-k\">-</span> t0</pre></div>", "body_text": "By the way, cuda kernels are run asynchronously. So, when benchmarking cuda code, you should use torch.cuda.synchronize() to get the correct timings. e.g.,\nt = 0\nfor i in range(epochs):\n    torch.cuda.synchronize()\n    t0 = time.time()\n    optim.zero_grad()\n    p = net(x)\n    loss(p, y).backward()\n    optim.step()\n    torch.cuda.synchronize()\n    t += time.time() - t0", "body": "By the way, cuda kernels are run asynchronously. So, when benchmarking cuda code, you should use `torch.cuda.synchronize()` to get the correct timings. e.g., \r\n```python\r\nt = 0\r\nfor i in range(epochs):\r\n    torch.cuda.synchronize()\r\n    t0 = time.time()\r\n    optim.zero_grad()\r\n    p = net(x)\r\n    loss(p, y).backward()\r\n    optim.step()\r\n    torch.cuda.synchronize()\r\n    t += time.time() - t0\r\n```"}