{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/395248051", "html_url": "https://github.com/pytorch/pytorch/pull/8211#issuecomment-395248051", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/8211", "id": 395248051, "node_id": "MDEyOklzc3VlQ29tbWVudDM5NTI0ODA1MQ==", "user": {"login": "colesbury", "id": 655866, "node_id": "MDQ6VXNlcjY1NTg2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/655866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colesbury", "html_url": "https://github.com/colesbury", "followers_url": "https://api.github.com/users/colesbury/followers", "following_url": "https://api.github.com/users/colesbury/following{/other_user}", "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions", "organizations_url": "https://api.github.com/users/colesbury/orgs", "repos_url": "https://api.github.com/users/colesbury/repos", "events_url": "https://api.github.com/users/colesbury/events{/privacy}", "received_events_url": "https://api.github.com/users/colesbury/received_events", "type": "User", "site_admin": false}, "created_at": "2018-06-06T23:44:50Z", "updated_at": "2018-06-06T23:44:50Z", "author_association": "MEMBER", "body_html": "<p>We mention grad_fn in the docs (but not <code>is_leaf</code>). I agree that the name backward function is an implementation detail, but it's often useful to print out implementation details. You see this often in Python where:</p>\n<pre><code>&gt;&gt;&gt; Foo()\n&lt;Foo at 0x7fa5678cf160&gt;\n&gt;&gt;&gt; socket.socket()\n&lt;socket.socket fd=13, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=0, laddr=('0.0.0.0', 0)&gt;\n</code></pre>\n<p>The socket's file descriptor and object's memory address are clearly implementation details, but they help in debugging.</p>\n<p>The name of grad_fn helps you understand what operation created the variable. The names aren't perfect, but they're usually enough.</p>", "body_text": "We mention grad_fn in the docs (but not is_leaf). I agree that the name backward function is an implementation detail, but it's often useful to print out implementation details. You see this often in Python where:\n>>> Foo()\n<Foo at 0x7fa5678cf160>\n>>> socket.socket()\n<socket.socket fd=13, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=0, laddr=('0.0.0.0', 0)>\n\nThe socket's file descriptor and object's memory address are clearly implementation details, but they help in debugging.\nThe name of grad_fn helps you understand what operation created the variable. The names aren't perfect, but they're usually enough.", "body": "We mention grad_fn in the docs (but not `is_leaf`). I agree that the name backward function is an implementation detail, but it's often useful to print out implementation details. You see this often in Python where:\r\n\r\n```\r\n>>> Foo()\r\n<Foo at 0x7fa5678cf160>\r\n>>> socket.socket()\r\n<socket.socket fd=13, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=0, laddr=('0.0.0.0', 0)>\r\n```\r\n\r\nThe socket's file descriptor and object's memory address are clearly implementation details, but they help in debugging.\r\n\r\nThe name of grad_fn helps you understand what operation created the variable. The names aren't perfect, but they're usually enough."}