{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/395486214", "html_url": "https://github.com/pytorch/pytorch/pull/8211#issuecomment-395486214", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/8211", "id": 395486214, "node_id": "MDEyOklzc3VlQ29tbWVudDM5NTQ4NjIxNA==", "user": {"login": "colesbury", "id": 655866, "node_id": "MDQ6VXNlcjY1NTg2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/655866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colesbury", "html_url": "https://github.com/colesbury", "followers_url": "https://api.github.com/users/colesbury/followers", "following_url": "https://api.github.com/users/colesbury/following{/other_user}", "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions", "organizations_url": "https://api.github.com/users/colesbury/orgs", "repos_url": "https://api.github.com/users/colesbury/repos", "events_url": "https://api.github.com/users/colesbury/events{/privacy}", "received_events_url": "https://api.github.com/users/colesbury/received_events", "type": "User", "site_admin": false}, "created_at": "2018-06-07T16:37:11Z", "updated_at": "2018-06-07T16:37:11Z", "author_association": "MEMBER", "body_html": "<p>The advantage of the current repr style syntax is that it's immediately familiar and understood to most Python users, not so much the copy-paste ability.</p>\n<p>The literal copy-pasting to recreate the object tends not to work in practice because of summarizing of large tensors, floating point truncation, and because most people don't have <code>tensor()</code> directly imported. Furthermore, objects with grad_fn are not value objects -- they have identity. Python often uses <code>&lt;Foo ...&gt;</code> syntax for non-value objects, but I don't think it makes sense to do that here.</p>\n<p><code>has_grad_fn=True</code> doesn't do enough to convey the importance of <code>grad_fn</code>. It looks like a simple boolean attribute. <code>grad_fn=&lt;MulBackward&gt;</code> looks like an object, which is important because it may hold on to large amounts of state. We've clearly thought that this structure is important for users to understand, since we've put it on the <a href=\"https://github.com/pytorch/pytorch/raw/master/docs/source/_static/img/dynamic_graph.gif\">front page of our GitHub</a> since release.</p>", "body_text": "The advantage of the current repr style syntax is that it's immediately familiar and understood to most Python users, not so much the copy-paste ability.\nThe literal copy-pasting to recreate the object tends not to work in practice because of summarizing of large tensors, floating point truncation, and because most people don't have tensor() directly imported. Furthermore, objects with grad_fn are not value objects -- they have identity. Python often uses <Foo ...> syntax for non-value objects, but I don't think it makes sense to do that here.\nhas_grad_fn=True doesn't do enough to convey the importance of grad_fn. It looks like a simple boolean attribute. grad_fn=<MulBackward> looks like an object, which is important because it may hold on to large amounts of state. We've clearly thought that this structure is important for users to understand, since we've put it on the front page of our GitHub since release.", "body": "The advantage of the current repr style syntax is that it's immediately familiar and understood to most Python users, not so much the copy-paste ability.\r\n\r\nThe literal copy-pasting to recreate the object tends not to work in practice because of summarizing of large tensors, floating point truncation, and because most people don't have `tensor()` directly imported. Furthermore, objects with grad_fn are not value objects -- they have identity. Python often uses `<Foo ...>` syntax for non-value objects, but I don't think it makes sense to do that here.\r\n\r\n`has_grad_fn=True` doesn't do enough to convey the importance of `grad_fn`. It looks like a simple boolean attribute. `grad_fn=<MulBackward>` looks like an object, which is important because it may hold on to large amounts of state. We've clearly thought that this structure is important for users to understand, since we've put it on the [front page of our GitHub](https://github.com/pytorch/pytorch/raw/master/docs/source/_static/img/dynamic_graph.gif) since release."}