{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/285804826", "html_url": "https://github.com/pytorch/pytorch/issues/947#issuecomment-285804826", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/947", "id": 285804826, "node_id": "MDEyOklzc3VlQ29tbWVudDI4NTgwNDgyNg==", "user": {"login": "an-kumar", "id": 13493636, "node_id": "MDQ6VXNlcjEzNDkzNjM2", "avatar_url": "https://avatars0.githubusercontent.com/u/13493636?v=4", "gravatar_id": "", "url": "https://api.github.com/users/an-kumar", "html_url": "https://github.com/an-kumar", "followers_url": "https://api.github.com/users/an-kumar/followers", "following_url": "https://api.github.com/users/an-kumar/following{/other_user}", "gists_url": "https://api.github.com/users/an-kumar/gists{/gist_id}", "starred_url": "https://api.github.com/users/an-kumar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/an-kumar/subscriptions", "organizations_url": "https://api.github.com/users/an-kumar/orgs", "repos_url": "https://api.github.com/users/an-kumar/repos", "events_url": "https://api.github.com/users/an-kumar/events{/privacy}", "received_events_url": "https://api.github.com/users/an-kumar/received_events", "type": "User", "site_admin": false}, "created_at": "2017-03-10T22:39:56Z", "updated_at": "2017-03-10T22:39:56Z", "author_association": "NONE", "body_html": "<p>yeah, that's possible, and that's what I've done right now.</p>\n<p>it's really just a convenience/cleanliness thing to me. pretty much everything is templatized over &lt;T,D&gt; when you are writing code in c++, and currently I have something like this everywhere:</p>\n<p>template &lt;typename T, typename D&gt;<br>\nsome_templatized_thing<br>\n{<br>\nusing TTensor = TDTensorTraits&lt;T,D&gt;::TensorType;<br>\n}</p>\n<p>and then I use TTensor as my type. It just feels a little weird/unclean in c++ world to me, because most things are templatized over &lt;T,D&gt;, it's odd that the fundamental class (Tensor) isn't.</p>\n<p>but you're right it's not a functional difference</p>", "body_text": "yeah, that's possible, and that's what I've done right now.\nit's really just a convenience/cleanliness thing to me. pretty much everything is templatized over <T,D> when you are writing code in c++, and currently I have something like this everywhere:\ntemplate <typename T, typename D>\nsome_templatized_thing\n{\nusing TTensor = TDTensorTraits<T,D>::TensorType;\n}\nand then I use TTensor as my type. It just feels a little weird/unclean in c++ world to me, because most things are templatized over <T,D>, it's odd that the fundamental class (Tensor) isn't.\nbut you're right it's not a functional difference", "body": "yeah, that's possible, and that's what I've done right now.\r\n\r\nit's really just a convenience/cleanliness thing to me. pretty much everything is templatized over <T,D> when you are writing code in c++, and currently I have something like this everywhere:\r\n\r\ntemplate <typename T, typename D>\r\nsome_templatized_thing\r\n{\r\nusing TTensor = TDTensorTraits<T,D>::TensorType;\r\n}\r\n\r\nand then I use TTensor as my type. It just feels a little weird/unclean in c++ world to me, because most things are templatized over <T,D>, it's odd that the fundamental class (Tensor) isn't.\r\n\r\nbut you're right it's not a functional difference"}