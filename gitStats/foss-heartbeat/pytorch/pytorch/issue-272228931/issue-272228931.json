{"url": "https://api.github.com/repos/pytorch/pytorch/issues/3565", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/3565/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/3565/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/3565/events", "html_url": "https://github.com/pytorch/pytorch/issues/3565", "id": 272228931, "node_id": "MDU6SXNzdWUyNzIyMjg5MzE=", "number": 3565, "title": "HalfTensor and HalfStorage are neglected", "user": {"login": "wranai", "id": 1048544, "node_id": "MDQ6VXNlcjEwNDg1NDQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/1048544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wranai", "html_url": "https://github.com/wranai", "followers_url": "https://api.github.com/users/wranai/followers", "following_url": "https://api.github.com/users/wranai/following{/other_user}", "gists_url": "https://api.github.com/users/wranai/gists{/gist_id}", "starred_url": "https://api.github.com/users/wranai/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wranai/subscriptions", "organizations_url": "https://api.github.com/users/wranai/orgs", "repos_url": "https://api.github.com/users/wranai/repos", "events_url": "https://api.github.com/users/wranai/events{/privacy}", "received_events_url": "https://api.github.com/users/wranai/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 424131853, "node_id": "MDU6TGFiZWw0MjQxMzE4NTM=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-11-08T14:59:41Z", "updated_at": "2017-12-02T22:48:18Z", "closed_at": "2017-12-01T22:38:44Z", "author_association": "NONE", "body_html": "<p>When I tried to map a HalfTensor from a file I got an error message:</p>\n<pre><code>&gt;&gt;&gt; torch.HalfTensor(torch.HalfStorage.from_file('half.bin', True, 10))\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nTypeError: torch.HalfTensor constructor received an invalid combination of arguments - got (torch.HalfStorage), but expected one of:\n * no arguments\n * (int ...)\n      didn't match because some of the arguments have invalid types: (torch.HalfStorage)\n * (torch.HalfTensor viewed_tensor)\n      didn't match because some of the arguments have invalid types: (torch.HalfStorage)\n * (torch.Size size)\n      didn't match because some of the arguments have invalid types: (torch.HalfStorage)\n * (torch.HalfStorage data)\n      didn't match because some of the arguments have invalid types: (torch.HalfStorage)\n * (Sequence data)\n      didn't match because some of the arguments have invalid types: (torch.HalfStorage)\n</code></pre>\n<p>I looked around and it seems HalfTensor and HalfStorage are lacking in test coverage as well, e.g.: <div class=\"border rounded-1 my-2\">\n  <div class=\"f6 px-3 py-2 lh-condensed border-bottom bg-gray-light\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/pytorch/pytorch/blob/5e382894be5b7e1906b04a73e469d472b98d218c/test/test_torch.py#L487-L488\">pytorch/test/test_torch.py</a>\n    </p>\n    <p class=\"mb-0 text-gray-light\">\n        Lines 487 to 488\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/pytorch/pytorch/commit/5e382894be5b7e1906b04a73e469d472b98d218c\">5e38289</a>\n    </p>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L487\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"487\"></td>\n          <td id=\"LC487\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> float_types <span class=\"pl-k\">=</span> [<span class=\"pl-s\"><span class=\"pl-pds\">'</span>torch.DoubleTensor<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>torch.FloatTensor<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>torch.LongTensor<span class=\"pl-pds\">'</span></span>] </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L488\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"488\"></td>\n          <td id=\"LC488\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> int_types <span class=\"pl-k\">=</span> [<span class=\"pl-s\"><span class=\"pl-pds\">'</span>torch.IntTensor<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>torch.ShortTensor<span class=\"pl-pds\">'</span></span>] </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n</p>\n<p><div class=\"border rounded-1 my-2\">\n  <div class=\"f6 px-3 py-2 lh-condensed border-bottom bg-gray-light\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/pytorch/pytorch/blob/5e382894be5b7e1906b04a73e469d472b98d218c/test/test_torch.py#L3810-L3826\">pytorch/test/test_torch.py</a>\n    </p>\n    <p class=\"mb-0 text-gray-light\">\n        Lines 3810 to 3826\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/pytorch/pytorch/commit/5e382894be5b7e1906b04a73e469d472b98d218c\">5e38289</a>\n    </p>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L3810\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"3810\"></td>\n          <td id=\"LC3810\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-k\">def</span> <span class=\"pl-en\">test_element_size</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>): </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L3811\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"3811\"></td>\n          <td id=\"LC3811\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     byte <span class=\"pl-k\">=</span> torch.ByteStorage().element_size() </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L3812\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"3812\"></td>\n          <td id=\"LC3812\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     char <span class=\"pl-k\">=</span> torch.CharStorage().element_size() </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L3813\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"3813\"></td>\n          <td id=\"LC3813\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     short <span class=\"pl-k\">=</span> torch.ShortStorage().element_size() </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L3814\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"3814\"></td>\n          <td id=\"LC3814\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     <span class=\"pl-c1\">int</span> <span class=\"pl-k\">=</span> torch.IntStorage().element_size() </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L3815\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"3815\"></td>\n          <td id=\"LC3815\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     <span class=\"pl-v\">long</span> <span class=\"pl-k\">=</span> torch.LongStorage().element_size() </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L3816\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"3816\"></td>\n          <td id=\"LC3816\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     <span class=\"pl-c1\">float</span> <span class=\"pl-k\">=</span> torch.FloatStorage().element_size() </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L3817\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"3817\"></td>\n          <td id=\"LC3817\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     double <span class=\"pl-k\">=</span> torch.DoubleStorage().element_size() </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L3818\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"3818\"></td>\n          <td id=\"LC3818\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">  </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L3819\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"3819\"></td>\n          <td id=\"LC3819\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     <span class=\"pl-c1\">self</span>.assertEqual(byte, torch.ByteTensor().element_size()) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L3820\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"3820\"></td>\n          <td id=\"LC3820\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     <span class=\"pl-c1\">self</span>.assertEqual(char, torch.CharTensor().element_size()) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L3821\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"3821\"></td>\n          <td id=\"LC3821\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     <span class=\"pl-c1\">self</span>.assertEqual(short, torch.ShortTensor().element_size()) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L3822\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"3822\"></td>\n          <td id=\"LC3822\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     <span class=\"pl-c1\">self</span>.assertEqual(<span class=\"pl-c1\">int</span>, torch.IntTensor().element_size()) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L3823\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"3823\"></td>\n          <td id=\"LC3823\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     <span class=\"pl-c1\">self</span>.assertEqual(<span class=\"pl-v\">long</span>, torch.LongTensor().element_size()) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L3824\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"3824\"></td>\n          <td id=\"LC3824\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     <span class=\"pl-c1\">self</span>.assertEqual(<span class=\"pl-c1\">float</span>, torch.FloatTensor().element_size()) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L3825\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"3825\"></td>\n          <td id=\"LC3825\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     <span class=\"pl-c1\">self</span>.assertEqual(double, torch.DoubleTensor().element_size()) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L3826\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"3826\"></td>\n          <td id=\"LC3826\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">  </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n</p>\n<p>And at other places: <div class=\"border rounded-1 my-2\">\n  <div class=\"f6 px-3 py-2 lh-condensed border-bottom bg-gray-light\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/pytorch/pytorch/blob/46a868dab72a4fce5a12b462389ee7a7865f3210/torch/_storage_docs.py#L7-L15\">pytorch/torch/_storage_docs.py</a>\n    </p>\n    <p class=\"mb-0 text-gray-light\">\n        Lines 7 to 15\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/pytorch/pytorch/commit/46a868dab72a4fce5a12b462389ee7a7865f3210\">46a868d</a>\n    </p>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L7\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"7\"></td>\n          <td id=\"LC7\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> storage_classes <span class=\"pl-k\">=</span> [ </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L8\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"8\"></td>\n          <td id=\"LC8\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     <span class=\"pl-s\"><span class=\"pl-pds\">'</span>DoubleStorageBase<span class=\"pl-pds\">'</span></span>, </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L9\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"9\"></td>\n          <td id=\"LC9\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     <span class=\"pl-s\"><span class=\"pl-pds\">'</span>FloatStorageBase<span class=\"pl-pds\">'</span></span>, </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L10\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"10\"></td>\n          <td id=\"LC10\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     <span class=\"pl-s\"><span class=\"pl-pds\">'</span>LongStorageBase<span class=\"pl-pds\">'</span></span>, </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L11\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"11\"></td>\n          <td id=\"LC11\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     <span class=\"pl-s\"><span class=\"pl-pds\">'</span>IntStorageBase<span class=\"pl-pds\">'</span></span>, </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L12\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"12\"></td>\n          <td id=\"LC12\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     <span class=\"pl-s\"><span class=\"pl-pds\">'</span>ShortStorageBase<span class=\"pl-pds\">'</span></span>, </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L13\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"13\"></td>\n          <td id=\"LC13\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     <span class=\"pl-s\"><span class=\"pl-pds\">'</span>CharStorageBase<span class=\"pl-pds\">'</span></span>, </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L14\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"14\"></td>\n          <td id=\"LC14\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     <span class=\"pl-s\"><span class=\"pl-pds\">'</span>ByteStorageBase<span class=\"pl-pds\">'</span></span>, </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L15\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"15\"></td>\n          <td id=\"LC15\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> ] </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n</p>\n<p><div class=\"border rounded-1 my-2\">\n  <div class=\"f6 px-3 py-2 lh-condensed border-bottom bg-gray-light\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/pytorch/pytorch/blob/ee9d4d58e2b8e457d5b402075038302af6fddf7d/torch/distributed/remote_types.py#L107-L114\">pytorch/torch/distributed/remote_types.py</a>\n    </p>\n    <p class=\"mb-0 text-gray-light\">\n        Lines 107 to 114\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/pytorch/pytorch/commit/ee9d4d58e2b8e457d5b402075038302af6fddf7d\">ee9d4d5</a>\n    </p>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L107\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"107\"></td>\n          <td id=\"LC107\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">  </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L108\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"108\"></td>\n          <td id=\"LC108\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-c\"><span class=\"pl-c\">#</span> class HalfTensor(_DistributedBase, torch._C.DistributedHalfTensorBase, _TensorBase):</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L109\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"109\"></td>\n          <td id=\"LC109\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     <span class=\"pl-c\"><span class=\"pl-c\">#</span> def is_signed(self):</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L110\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"110\"></td>\n          <td id=\"LC110\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">         <span class=\"pl-c\"><span class=\"pl-c\">#</span> return True</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L111\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"111\"></td>\n          <td id=\"LC111\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     <span class=\"pl-c\"><span class=\"pl-c\">#</span> @classmethod</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L112\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"112\"></td>\n          <td id=\"LC112\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     <span class=\"pl-c\"><span class=\"pl-c\">#</span> def storage_type():</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L113\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"113\"></td>\n          <td id=\"LC113\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">         <span class=\"pl-c\"><span class=\"pl-c\">#</span> return HalfStorage</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L114\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"114\"></td>\n          <td id=\"LC114\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">  </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n</p>", "body_text": "When I tried to map a HalfTensor from a file I got an error message:\n>>> torch.HalfTensor(torch.HalfStorage.from_file('half.bin', True, 10))\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nTypeError: torch.HalfTensor constructor received an invalid combination of arguments - got (torch.HalfStorage), but expected one of:\n * no arguments\n * (int ...)\n      didn't match because some of the arguments have invalid types: (torch.HalfStorage)\n * (torch.HalfTensor viewed_tensor)\n      didn't match because some of the arguments have invalid types: (torch.HalfStorage)\n * (torch.Size size)\n      didn't match because some of the arguments have invalid types: (torch.HalfStorage)\n * (torch.HalfStorage data)\n      didn't match because some of the arguments have invalid types: (torch.HalfStorage)\n * (Sequence data)\n      didn't match because some of the arguments have invalid types: (torch.HalfStorage)\n\nI looked around and it seems HalfTensor and HalfStorage are lacking in test coverage as well, e.g.: \n  \n    \n      pytorch/test/test_torch.py\n    \n    \n        Lines 487 to 488\n      in\n      5e38289\n    \n    \n    \n    \n\n        \n          \n           float_types = ['torch.DoubleTensor', 'torch.FloatTensor', 'torch.LongTensor'] \n        \n\n        \n          \n           int_types = ['torch.IntTensor', 'torch.ShortTensor'] \n        \n    \n  \n\n\n\n  \n    \n      pytorch/test/test_torch.py\n    \n    \n        Lines 3810 to 3826\n      in\n      5e38289\n    \n    \n    \n    \n\n        \n          \n           def test_element_size(self): \n        \n\n        \n          \n               byte = torch.ByteStorage().element_size() \n        \n\n        \n          \n               char = torch.CharStorage().element_size() \n        \n\n        \n          \n               short = torch.ShortStorage().element_size() \n        \n\n        \n          \n               int = torch.IntStorage().element_size() \n        \n\n        \n          \n               long = torch.LongStorage().element_size() \n        \n\n        \n          \n               float = torch.FloatStorage().element_size() \n        \n\n        \n          \n               double = torch.DoubleStorage().element_size() \n        \n\n        \n          \n            \n        \n\n        \n          \n               self.assertEqual(byte, torch.ByteTensor().element_size()) \n        \n\n        \n          \n               self.assertEqual(char, torch.CharTensor().element_size()) \n        \n\n        \n          \n               self.assertEqual(short, torch.ShortTensor().element_size()) \n        \n\n        \n          \n               self.assertEqual(int, torch.IntTensor().element_size()) \n        \n\n        \n          \n               self.assertEqual(long, torch.LongTensor().element_size()) \n        \n\n        \n          \n               self.assertEqual(float, torch.FloatTensor().element_size()) \n        \n\n        \n          \n               self.assertEqual(double, torch.DoubleTensor().element_size()) \n        \n\n        \n          \n            \n        \n    \n  \n\n\nAnd at other places: \n  \n    \n      pytorch/torch/_storage_docs.py\n    \n    \n        Lines 7 to 15\n      in\n      46a868d\n    \n    \n    \n    \n\n        \n          \n           storage_classes = [ \n        \n\n        \n          \n               'DoubleStorageBase', \n        \n\n        \n          \n               'FloatStorageBase', \n        \n\n        \n          \n               'LongStorageBase', \n        \n\n        \n          \n               'IntStorageBase', \n        \n\n        \n          \n               'ShortStorageBase', \n        \n\n        \n          \n               'CharStorageBase', \n        \n\n        \n          \n               'ByteStorageBase', \n        \n\n        \n          \n           ] \n        \n    \n  \n\n\n\n  \n    \n      pytorch/torch/distributed/remote_types.py\n    \n    \n        Lines 107 to 114\n      in\n      ee9d4d5\n    \n    \n    \n    \n\n        \n          \n            \n        \n\n        \n          \n           # class HalfTensor(_DistributedBase, torch._C.DistributedHalfTensorBase, _TensorBase): \n        \n\n        \n          \n               # def is_signed(self): \n        \n\n        \n          \n                   # return True \n        \n\n        \n          \n               # @classmethod \n        \n\n        \n          \n               # def storage_type(): \n        \n\n        \n          \n                   # return HalfStorage", "body": "When I tried to map a HalfTensor from a file I got an error message:\r\n\r\n    >>> torch.HalfTensor(torch.HalfStorage.from_file('half.bin', True, 10))\r\n    Traceback (most recent call last):\r\n      File \"<stdin>\", line 1, in <module>\r\n    TypeError: torch.HalfTensor constructor received an invalid combination of arguments - got (torch.HalfStorage), but expected one of:\r\n     * no arguments\r\n     * (int ...)\r\n          didn't match because some of the arguments have invalid types: (torch.HalfStorage)\r\n     * (torch.HalfTensor viewed_tensor)\r\n          didn't match because some of the arguments have invalid types: (torch.HalfStorage)\r\n     * (torch.Size size)\r\n          didn't match because some of the arguments have invalid types: (torch.HalfStorage)\r\n     * (torch.HalfStorage data)\r\n          didn't match because some of the arguments have invalid types: (torch.HalfStorage)\r\n     * (Sequence data)\r\n          didn't match because some of the arguments have invalid types: (torch.HalfStorage)\r\n\r\nI looked around and it seems HalfTensor and HalfStorage are lacking in test coverage as well, e.g.: https://github.com/pytorch/pytorch/blob/5e382894be5b7e1906b04a73e469d472b98d218c/test/test_torch.py#L487-L488\r\n\r\nhttps://github.com/pytorch/pytorch/blob/5e382894be5b7e1906b04a73e469d472b98d218c/test/test_torch.py#L3810-L3826\r\n\r\nAnd at other places: https://github.com/pytorch/pytorch/blob/46a868dab72a4fce5a12b462389ee7a7865f3210/torch/_storage_docs.py#L7-L15\r\n\r\nhttps://github.com/pytorch/pytorch/blob/ee9d4d58e2b8e457d5b402075038302af6fddf7d/torch/distributed/remote_types.py#L107-L114"}