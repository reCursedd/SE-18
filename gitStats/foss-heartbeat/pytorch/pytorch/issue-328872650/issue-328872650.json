{"url": "https://api.github.com/repos/pytorch/pytorch/issues/8092", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/8092/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/8092/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/8092/events", "html_url": "https://github.com/pytorch/pytorch/issues/8092", "id": 328872650, "node_id": "MDU6SXNzdWUzMjg4NzI2NTA=", "number": 8092, "title": "It's difficult to use non-standard CUDA_HOME with ccache'd nvcc", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-06-03T23:35:43Z", "updated_at": "2018-06-03T23:35:43Z", "closed_at": null, "author_association": "CONTRIBUTOR", "body_html": "<p>Here's the situation:</p>\n<p>Ideally, you'd say something like <code>CUDA_HOME=/usr/local/cuda-9.1 python setup.py install</code> to make a build of PyTorch with a non-standard version of CUDA.</p>\n<p>When this happens, <code>FindCUDA</code> needs to find the correct copy of nvcc to use.</p>\n<p>If you are using ccache as per the instructions in <a href=\"https://github.com/pytorch/pytorch/blob/master/CONTRIBUTING.md#use-ccache\">https://github.com/pytorch/pytorch/blob/master/CONTRIBUTING.md#use-ccache</a> you'll have set <code>CUDA_NVCC_EXECUTABLE</code> to your ccache binary, so that ccache happens. cmake will correctly respect this variable.</p>\n<p>However, here's the problem: ccache's nvcc will <strong>use your path</strong> to determine what the real nvcc to use is, this means that you'll pick up whatever nvcc is in your PATH, which is probably not the one you want, because you're trying to use a different nvcc.</p>\n<p>So in sum, you have to do the non-intuitive <code>CUDA_HOME=/usr/local/cuda-9.1 PATH=/usr/local/cuda-9.1/bin:$PATH python setup.py install</code> to get the whole shebang to work. The worst part is that it won't tell you if you've got it wrong, it will happily use the wrong nvcc.</p>\n<p>I haven't gone through user submitted issues to see if anyone has succumbed to this particular bug.</p>", "body_text": "Here's the situation:\nIdeally, you'd say something like CUDA_HOME=/usr/local/cuda-9.1 python setup.py install to make a build of PyTorch with a non-standard version of CUDA.\nWhen this happens, FindCUDA needs to find the correct copy of nvcc to use.\nIf you are using ccache as per the instructions in https://github.com/pytorch/pytorch/blob/master/CONTRIBUTING.md#use-ccache you'll have set CUDA_NVCC_EXECUTABLE to your ccache binary, so that ccache happens. cmake will correctly respect this variable.\nHowever, here's the problem: ccache's nvcc will use your path to determine what the real nvcc to use is, this means that you'll pick up whatever nvcc is in your PATH, which is probably not the one you want, because you're trying to use a different nvcc.\nSo in sum, you have to do the non-intuitive CUDA_HOME=/usr/local/cuda-9.1 PATH=/usr/local/cuda-9.1/bin:$PATH python setup.py install to get the whole shebang to work. The worst part is that it won't tell you if you've got it wrong, it will happily use the wrong nvcc.\nI haven't gone through user submitted issues to see if anyone has succumbed to this particular bug.", "body": "Here's the situation:\r\n\r\nIdeally, you'd say something like `CUDA_HOME=/usr/local/cuda-9.1 python setup.py install` to make a build of PyTorch with a non-standard version of CUDA.\r\n\r\nWhen this happens, `FindCUDA` needs to find the correct copy of nvcc to use.\r\n\r\nIf you are using ccache as per the instructions in https://github.com/pytorch/pytorch/blob/master/CONTRIBUTING.md#use-ccache you'll have set `CUDA_NVCC_EXECUTABLE` to your ccache binary, so that ccache happens. cmake will correctly respect this variable.\r\n\r\nHowever, here's the problem: ccache's nvcc will **use your path** to determine what the real nvcc to use is, this means that you'll pick up whatever nvcc is in your PATH, which is probably not the one you want, because you're trying to use a different nvcc.\r\n\r\nSo in sum, you have to do the non-intuitive `CUDA_HOME=/usr/local/cuda-9.1 PATH=/usr/local/cuda-9.1/bin:$PATH python setup.py install` to get the whole shebang to work. The worst part is that it won't tell you if you've got it wrong, it will happily use the wrong nvcc.\r\n\r\nI haven't gone through user submitted issues to see if anyone has succumbed to this particular bug."}