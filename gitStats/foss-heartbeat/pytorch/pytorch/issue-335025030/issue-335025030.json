{"url": "https://api.github.com/repos/pytorch/pytorch/issues/8806", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/8806/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/8806/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/8806/events", "html_url": "https://github.com/pytorch/pytorch/issues/8806", "id": 335025030, "node_id": "MDU6SXNzdWUzMzUwMjUwMzA=", "number": 8806, "title": "Proposal: move Variable.version_counter to Storage", "user": {"login": "colesbury", "id": 655866, "node_id": "MDQ6VXNlcjY1NTg2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/655866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colesbury", "html_url": "https://github.com/colesbury", "followers_url": "https://api.github.com/users/colesbury/followers", "following_url": "https://api.github.com/users/colesbury/following{/other_user}", "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions", "organizations_url": "https://api.github.com/users/colesbury/orgs", "repos_url": "https://api.github.com/users/colesbury/repos", "events_url": "https://api.github.com/users/colesbury/events{/privacy}", "received_events_url": "https://api.github.com/users/colesbury/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1027606656, "node_id": "MDU6TGFiZWwxMDI3NjA2NjU2", "url": "https://api.github.com/repos/pytorch/pytorch/labels/bootcamp", "name": "bootcamp", "color": "a99bdd", "default": false}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-06-22T21:30:40Z", "updated_at": "2018-08-17T20:38:18Z", "closed_at": null, "author_association": "MEMBER", "body_html": "<p>Currently, we store a <code>version_counter</code> in the VariableImpl wrapper that increments every time a <code>Variable</code> is modified by an in-place operation. It's used to detect modifications to variables that were saved to compute some future autograd derivative. The version counter is tracked even on Variables that do not have <code>requires_grad=True</code> because those variables may still be saved.</p>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=13564\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ezyang\">@ezyang</a> suggested moving the version counter to the <code>Storage</code>. This would avoid the need for a <code>shared_ptr</code> (and the extra allocation that incurs) since Variables that share storages would implicitly share version counters.</p>\n<p>This would change the semantics of <code>Variable.data</code>. Currently, the result of <code>self.data</code> does not share a version counter with <code>self</code>, but after this change it would.</p>\n<p>As an \"escape hatch\", we could add a global, thread-local flag that disables version-counter updates during in-place operations.  For example,</p>\n<pre><code>with torch.no_version_counter():\n   x += 1  # version_counter of x not modified\n</code></pre>\n<p>One motivation behind this change is to make sure that C10/Caffe2 does incur extra overhead for autograd if it's not used.</p>\n<p>cc <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=4583066\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/apaszke\">@apaszke</a></p>", "body_text": "Currently, we store a version_counter in the VariableImpl wrapper that increments every time a Variable is modified by an in-place operation. It's used to detect modifications to variables that were saved to compute some future autograd derivative. The version counter is tracked even on Variables that do not have requires_grad=True because those variables may still be saved.\n@ezyang suggested moving the version counter to the Storage. This would avoid the need for a shared_ptr (and the extra allocation that incurs) since Variables that share storages would implicitly share version counters.\nThis would change the semantics of Variable.data. Currently, the result of self.data does not share a version counter with self, but after this change it would.\nAs an \"escape hatch\", we could add a global, thread-local flag that disables version-counter updates during in-place operations.  For example,\nwith torch.no_version_counter():\n   x += 1  # version_counter of x not modified\n\nOne motivation behind this change is to make sure that C10/Caffe2 does incur extra overhead for autograd if it's not used.\ncc @apaszke", "body": "Currently, we store a `version_counter` in the VariableImpl wrapper that increments every time a `Variable` is modified by an in-place operation. It's used to detect modifications to variables that were saved to compute some future autograd derivative. The version counter is tracked even on Variables that do not have `requires_grad=True` because those variables may still be saved.\r\n\r\n@ezyang suggested moving the version counter to the `Storage`. This would avoid the need for a `shared_ptr` (and the extra allocation that incurs) since Variables that share storages would implicitly share version counters.\r\n\r\nThis would change the semantics of `Variable.data`. Currently, the result of `self.data` does not share a version counter with `self`, but after this change it would.\r\n\r\nAs an \"escape hatch\", we could add a global, thread-local flag that disables version-counter updates during in-place operations.  For example,\r\n\r\n```\r\nwith torch.no_version_counter():\r\n   x += 1  # version_counter of x not modified\r\n```\r\n\r\nOne motivation behind this change is to make sure that C10/Caffe2 does incur extra overhead for autograd if it's not used.\r\n\r\ncc @apaszke "}