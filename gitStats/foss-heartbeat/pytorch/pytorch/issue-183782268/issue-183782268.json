{"url": "https://api.github.com/repos/pytorch/pytorch/issues/140", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/140/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/140/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/140/events", "html_url": "https://github.com/pytorch/pytorch/issues/140", "id": 183782268, "node_id": "MDU6SXNzdWUxODM3ODIyNjg=", "number": 140, "title": "Index / SetValue don't work for 1D Variables", "user": {"login": "fmassa", "id": 9110200, "node_id": "MDQ6VXNlcjkxMTAyMDA=", "avatar_url": "https://avatars2.githubusercontent.com/u/9110200?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fmassa", "html_url": "https://github.com/fmassa", "followers_url": "https://api.github.com/users/fmassa/followers", "following_url": "https://api.github.com/users/fmassa/following{/other_user}", "gists_url": "https://api.github.com/users/fmassa/gists{/gist_id}", "starred_url": "https://api.github.com/users/fmassa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fmassa/subscriptions", "organizations_url": "https://api.github.com/users/fmassa/orgs", "repos_url": "https://api.github.com/users/fmassa/repos", "events_url": "https://api.github.com/users/fmassa/events{/privacy}", "received_events_url": "https://api.github.com/users/fmassa/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 424131847, "node_id": "MDU6TGFiZWw0MjQxMzE4NDc=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/bug", "name": "bug", "color": "b60205", "default": true}, {"id": 443484135, "node_id": "MDU6TGFiZWw0NDM0ODQxMzU=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/high%20priority", "name": "high priority", "color": "F22613", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-10-18T19:36:25Z", "updated_at": "2016-10-29T22:22:48Z", "closed_at": "2016-10-29T22:22:48Z", "author_association": "MEMBER", "body_html": "<p>Snippet to reproduce.</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> torch\n<span class=\"pl-k\">from</span> torch.autograd <span class=\"pl-k\">import</span> Variable\n\nx <span class=\"pl-k\">=</span> Variable(torch.Tensor([<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">3</span>]), <span class=\"pl-v\">requires_grad</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>)\ny <span class=\"pl-k\">=</span> x[<span class=\"pl-c1\">0</span>]\n\ny.backward() <span class=\"pl-c\"><span class=\"pl-c\">#</span> error</span>\n\nx[<span class=\"pl-c1\">1</span>] <span class=\"pl-k\">=</span> <span class=\"pl-c1\">5</span> <span class=\"pl-c\"><span class=\"pl-c\">#</span> error</span></pre></div>\n<p>The problem is in <a href=\"https://github.com/pytorch/pytorch/blob/master/torch/autograd/functions/tensor.py#L27\">here</a>, <a href=\"https://github.com/pytorch/pytorch/blob/master/torch/autograd/functions/tensor.py#L40\">here</a> and <a href=\"https://github.com/pytorch/pytorch/blob/master/torch/autograd/functions/tensor.py#L45\">here</a>, and is due to the fact that <code>torch.Tensor</code> return numbers when indexing a 1D tensor (which I think is the desired behaviour as we don't have broadcasting yet?).</p>\n<p>Maybe we should check if the input is 1D (and that the index is of range 1) and to use <code>narrow</code> instead of <code>select</code> in this case?<br>\nAutograd <code>Variables</code> return a 1D tensor anyway if we index it with a 1D tensor in forward, but this solution could avoid the sync point with cuda tensors in <code>Index</code> (as we don't return a number).</p>\n<p>Or, another solution would be to have something like 0D tensors which behave almost like numbers? This seems to be what numpy does.</p>", "body_text": "Snippet to reproduce.\nimport torch\nfrom torch.autograd import Variable\n\nx = Variable(torch.Tensor([1, 2, 3]), requires_grad=True)\ny = x[0]\n\ny.backward() # error\n\nx[1] = 5 # error\nThe problem is in here, here and here, and is due to the fact that torch.Tensor return numbers when indexing a 1D tensor (which I think is the desired behaviour as we don't have broadcasting yet?).\nMaybe we should check if the input is 1D (and that the index is of range 1) and to use narrow instead of select in this case?\nAutograd Variables return a 1D tensor anyway if we index it with a 1D tensor in forward, but this solution could avoid the sync point with cuda tensors in Index (as we don't return a number).\nOr, another solution would be to have something like 0D tensors which behave almost like numbers? This seems to be what numpy does.", "body": "Snippet to reproduce.\n\n``` python\nimport torch\nfrom torch.autograd import Variable\n\nx = Variable(torch.Tensor([1, 2, 3]), requires_grad=True)\ny = x[0]\n\ny.backward() # error\n\nx[1] = 5 # error\n```\n\nThe problem is in [here](https://github.com/pytorch/pytorch/blob/master/torch/autograd/functions/tensor.py#L27), [here](https://github.com/pytorch/pytorch/blob/master/torch/autograd/functions/tensor.py#L40) and [here](https://github.com/pytorch/pytorch/blob/master/torch/autograd/functions/tensor.py#L45), and is due to the fact that `torch.Tensor` return numbers when indexing a 1D tensor (which I think is the desired behaviour as we don't have broadcasting yet?).\n\nMaybe we should check if the input is 1D (and that the index is of range 1) and to use `narrow` instead of `select` in this case?\nAutograd `Variables` return a 1D tensor anyway if we index it with a 1D tensor in forward, but this solution could avoid the sync point with cuda tensors in `Index` (as we don't return a number).\n\nOr, another solution would be to have something like 0D tensors which behave almost like numbers? This seems to be what numpy does.\n"}