{"url": "https://api.github.com/repos/pytorch/pytorch/issues/11325", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/11325/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/11325/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/11325/events", "html_url": "https://github.com/pytorch/pytorch/issues/11325", "id": 357521429, "node_id": "MDU6SXNzdWUzNTc1MjE0Mjk=", "number": 11325, "title": "[linear-algebra][discussion][proposal] Move linear algebra functions to torch.linalg, at::native::linalg", "user": {"login": "vishwakftw", "id": 23639302, "node_id": "MDQ6VXNlcjIzNjM5MzAy", "avatar_url": "https://avatars2.githubusercontent.com/u/23639302?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vishwakftw", "html_url": "https://github.com/vishwakftw", "followers_url": "https://api.github.com/users/vishwakftw/followers", "following_url": "https://api.github.com/users/vishwakftw/following{/other_user}", "gists_url": "https://api.github.com/users/vishwakftw/gists{/gist_id}", "starred_url": "https://api.github.com/users/vishwakftw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vishwakftw/subscriptions", "organizations_url": "https://api.github.com/users/vishwakftw/orgs", "repos_url": "https://api.github.com/users/vishwakftw/repos", "events_url": "https://api.github.com/users/vishwakftw/events{/privacy}", "received_events_url": "https://api.github.com/users/vishwakftw/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2018-09-06T07:02:18Z", "updated_at": "2018-09-14T15:40:09Z", "closed_at": null, "author_association": "CONTRIBUTOR", "body_html": "<p>I believe we have quite a few linear algebra centric operations excluding the most commonly used ones (<code>matmul</code>, <code>mm</code>, <code>mv</code>, etc.) such as:</p>\n<ul>\n<li><code>ger</code></li>\n<li><code>qr</code> / <code>ormqr</code> / <code>orgqr</code> / <code>geqrf</code></li>\n<li><code>gesv</code> / <code>gels</code> / <code>btrifact</code> (and its variants)</li>\n<li><code>triu</code> / <code>tril</code></li>\n<li><code>eig</code> / <code>symeig</code></li>\n<li><code>svd</code></li>\n<li><code>inverse</code> / <code>pinverse</code></li>\n<li><code>matrix_rank</code></li>\n<li><code>det</code> / <code>logdet</code> / <code>slogdet</code></li>\n</ul>\n<p>I think it would be nice to organize them as <code>torch.linalg</code> analogous to <code>numpy.linalg</code>. This would prevent cluttering of the <code>torch</code> module while importing <code>torch</code>. Also, it would be nice to have these organized in a specific namespace within <code>ATen</code> (as <code>at::native::linalg</code> for example).</p>\n<p>Some issues might include BC-breaking ones, but if we are looking towards 1.0, I think this might ensure a cleaner API.</p>\n<p>Please let me know your thoughts about this.</p>", "body_text": "I believe we have quite a few linear algebra centric operations excluding the most commonly used ones (matmul, mm, mv, etc.) such as:\n\nger\nqr / ormqr / orgqr / geqrf\ngesv / gels / btrifact (and its variants)\ntriu / tril\neig / symeig\nsvd\ninverse / pinverse\nmatrix_rank\ndet / logdet / slogdet\n\nI think it would be nice to organize them as torch.linalg analogous to numpy.linalg. This would prevent cluttering of the torch module while importing torch. Also, it would be nice to have these organized in a specific namespace within ATen (as at::native::linalg for example).\nSome issues might include BC-breaking ones, but if we are looking towards 1.0, I think this might ensure a cleaner API.\nPlease let me know your thoughts about this.", "body": "I believe we have quite a few linear algebra centric operations excluding the most commonly used ones (`matmul`, `mm`, `mv`, etc.) such as:\r\n- `ger`\r\n- `qr` / `ormqr` / `orgqr` / `geqrf`\r\n- `gesv` / `gels` / `btrifact` (and its variants)\r\n- `triu` / `tril`\r\n- `eig` / `symeig`\r\n- `svd`\r\n- `inverse` / `pinverse`\r\n- `matrix_rank`\r\n- `det` / `logdet` / `slogdet`\r\n\r\nI think it would be nice to organize them as `torch.linalg` analogous to `numpy.linalg`. This would prevent cluttering of the `torch` module while importing `torch`. Also, it would be nice to have these organized in a specific namespace within `ATen` (as `at::native::linalg` for example).\r\n\r\nSome issues might include BC-breaking ones, but if we are looking towards 1.0, I think this might ensure a cleaner API.\r\n\r\nPlease let me know your thoughts about this."}