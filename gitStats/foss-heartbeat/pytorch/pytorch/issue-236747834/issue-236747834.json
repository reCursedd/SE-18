{"url": "https://api.github.com/repos/pytorch/pytorch/issues/1837", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/1837/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/1837/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/1837/events", "html_url": "https://github.com/pytorch/pytorch/issues/1837", "id": 236747834, "node_id": "MDU6SXNzdWUyMzY3NDc4MzQ=", "number": 1837, "title": "Inconsistant results between numpy.median() and torch.median()", "user": {"login": "lijunzh", "id": 9093413, "node_id": "MDQ6VXNlcjkwOTM0MTM=", "avatar_url": "https://avatars0.githubusercontent.com/u/9093413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lijunzh", "html_url": "https://github.com/lijunzh", "followers_url": "https://api.github.com/users/lijunzh/followers", "following_url": "https://api.github.com/users/lijunzh/following{/other_user}", "gists_url": "https://api.github.com/users/lijunzh/gists{/gist_id}", "starred_url": "https://api.github.com/users/lijunzh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lijunzh/subscriptions", "organizations_url": "https://api.github.com/users/lijunzh/orgs", "repos_url": "https://api.github.com/users/lijunzh/repos", "events_url": "https://api.github.com/users/lijunzh/events{/privacy}", "received_events_url": "https://api.github.com/users/lijunzh/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-06-18T21:49:25Z", "updated_at": "2017-07-14T15:05:56Z", "closed_at": "2017-07-13T07:13:20Z", "author_association": "NONE", "body_html": "<p>Numpy seems to give the correct median of even number of elements (which is the mean of the center two elements) as defined in <a href=\"https://en.wikipedia.org/wiki/Median\" rel=\"nofollow\">Wikipedia</a> while torch gives one of the center elements that are closer to their mean (I guessed from the results I see).  I am not sure if this is intended behavior or we need to fix this bug? As least, I think we should have a function that does the standard median for comparision with numpy or any other math programs, such as MATLAB.</p>\n<pre><code>In [88]: a = np.random.randn(4, 4)\n\nIn [89]: a\nOut[89]:\narray([[ 0.21654775, -2.84948564, -0.89086479,  0.31074037],\n       [-2.02333919,  0.59465567,  1.55680421, -0.33646373],\n       [ 1.15586001,  0.16046311,  0.01646207, -1.19663499],\n       [ 0.7947269 , -0.22558656, -1.25525967, -0.29217645]])\n\nIn [90]: b = torch.from_numpy(a)\n\nIn [91]: np.median(a, axis=0)\nOut[91]: array([ 0.50563732, -0.03256172, -0.43720136, -0.31432009])\n\nIn [92]: torch.median(b, dim=0)[0]\nOut[92]:\n\n 0.2165 -0.2256 -0.8909 -0.3365\n[torch.DoubleTensor of size 1x4]\n</code></pre>", "body_text": "Numpy seems to give the correct median of even number of elements (which is the mean of the center two elements) as defined in Wikipedia while torch gives one of the center elements that are closer to their mean (I guessed from the results I see).  I am not sure if this is intended behavior or we need to fix this bug? As least, I think we should have a function that does the standard median for comparision with numpy or any other math programs, such as MATLAB.\nIn [88]: a = np.random.randn(4, 4)\n\nIn [89]: a\nOut[89]:\narray([[ 0.21654775, -2.84948564, -0.89086479,  0.31074037],\n       [-2.02333919,  0.59465567,  1.55680421, -0.33646373],\n       [ 1.15586001,  0.16046311,  0.01646207, -1.19663499],\n       [ 0.7947269 , -0.22558656, -1.25525967, -0.29217645]])\n\nIn [90]: b = torch.from_numpy(a)\n\nIn [91]: np.median(a, axis=0)\nOut[91]: array([ 0.50563732, -0.03256172, -0.43720136, -0.31432009])\n\nIn [92]: torch.median(b, dim=0)[0]\nOut[92]:\n\n 0.2165 -0.2256 -0.8909 -0.3365\n[torch.DoubleTensor of size 1x4]", "body": "Numpy seems to give the correct median of even number of elements (which is the mean of the center two elements) as defined in [Wikipedia](https://en.wikipedia.org/wiki/Median) while torch gives one of the center elements that are closer to their mean (I guessed from the results I see).  I am not sure if this is intended behavior or we need to fix this bug? As least, I think we should have a function that does the standard median for comparision with numpy or any other math programs, such as MATLAB.\r\n\r\n```\r\nIn [88]: a = np.random.randn(4, 4)\r\n\r\nIn [89]: a\r\nOut[89]:\r\narray([[ 0.21654775, -2.84948564, -0.89086479,  0.31074037],\r\n       [-2.02333919,  0.59465567,  1.55680421, -0.33646373],\r\n       [ 1.15586001,  0.16046311,  0.01646207, -1.19663499],\r\n       [ 0.7947269 , -0.22558656, -1.25525967, -0.29217645]])\r\n\r\nIn [90]: b = torch.from_numpy(a)\r\n\r\nIn [91]: np.median(a, axis=0)\r\nOut[91]: array([ 0.50563732, -0.03256172, -0.43720136, -0.31432009])\r\n\r\nIn [92]: torch.median(b, dim=0)[0]\r\nOut[92]:\r\n\r\n 0.2165 -0.2256 -0.8909 -0.3365\r\n[torch.DoubleTensor of size 1x4]\r\n```"}