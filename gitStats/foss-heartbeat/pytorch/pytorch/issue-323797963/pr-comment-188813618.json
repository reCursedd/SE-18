{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/188813618", "pull_request_review_id": 120864014, "id": 188813618, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4ODgxMzYxOA==", "diff_hunk": "@@ -0,0 +1,390 @@\n+#include \"ProcessGroupGloo.hpp\"\n+\n+#include <gloo/allreduce_halving_doubling.h>\n+#include <gloo/rendezvous/context.h>\n+\n+#define GENERATE_ALL_TYPES(type, func, args...)                         \\\n+  switch (type) {                                                       \\\n+    case ::at::ScalarType::Float: func<float>(args); break;             \\\n+    case ::at::ScalarType::Double: func<double>(args); break;           \\\n+    case ::at::ScalarType::Half: func<gloo::float16>(args); break;      \\\n+    case ::at::ScalarType::Char: func<int8_t>(args); break;             \\\n+    case ::at::ScalarType::Byte: func<uint8_t>(args); break;            \\\n+    case ::at::ScalarType::Int: func<int32_t>(args); break;             \\\n+    case ::at::ScalarType::Long: func<int64_t>(args); break;            \\\n+    default:                                                            \\\n+      throw std::runtime_error(\"Invalid scalar type\");                  \\\n+  }\n+\n+namespace c10d {\n+\n+using KeyType = AlgorithmKey;\n+using EntryType = std::unique_ptr<AlgorithmEntry>;\n+\n+namespace {\n+\n+// Wrap c10d store as Gloo store\n+class GlooStore : public ::gloo::rendezvous::Store {\n+ public:\n+  GlooStore(const std::shared_ptr<::c10d::Store>& store)\n+      : store_(store) {\n+  }\n+\n+  void set(const std::string& key, const std::vector<char>& value) override {\n+    // @pietern was unable to figure out a way to cast the value of\n+    // type std::vector<char> to an std::vector<unsigned char>,\n+    // so going with a copy here (it's not a hot path so it's fine).\n+    std::vector<uint8_t> tmp(value.size());", "path": "torch/lib/c10d/ProcessGroupGloo.cpp", "position": null, "original_position": 37, "commit_id": "f81bd359f6b3550c6c311ff39b58bf62535e43cc", "original_commit_id": "eed8b1e7d7febb5d1c6cc9eef757290ff957bd7f", "user": {"login": "teng-li", "id": 8120856, "node_id": "MDQ6VXNlcjgxMjA4NTY=", "avatar_url": "https://avatars2.githubusercontent.com/u/8120856?v=4", "gravatar_id": "", "url": "https://api.github.com/users/teng-li", "html_url": "https://github.com/teng-li", "followers_url": "https://api.github.com/users/teng-li/followers", "following_url": "https://api.github.com/users/teng-li/following{/other_user}", "gists_url": "https://api.github.com/users/teng-li/gists{/gist_id}", "starred_url": "https://api.github.com/users/teng-li/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/teng-li/subscriptions", "organizations_url": "https://api.github.com/users/teng-li/orgs", "repos_url": "https://api.github.com/users/teng-li/repos", "events_url": "https://api.github.com/users/teng-li/events{/privacy}", "received_events_url": "https://api.github.com/users/teng-li/received_events", "type": "User", "site_admin": false}, "body": "```\r\nstd::vector<uint8_t> setValue(value.begin(), value.end()) \r\nstore_->set(key, setValue);\r\n```\r\nshould be enough\r\n", "created_at": "2018-05-17T00:59:56Z", "updated_at": "2018-11-23T15:44:12Z", "html_url": "https://github.com/pytorch/pytorch/pull/7628#discussion_r188813618", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/7628", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/188813618"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/7628#discussion_r188813618"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/7628"}}, "body_html": "<pre><code>std::vector&lt;uint8_t&gt; setValue(value.begin(), value.end()) \nstore_-&gt;set(key, setValue);\n</code></pre>\n<p>should be enough</p>", "body_text": "std::vector<uint8_t> setValue(value.begin(), value.end()) \nstore_->set(key, setValue);\n\nshould be enough"}