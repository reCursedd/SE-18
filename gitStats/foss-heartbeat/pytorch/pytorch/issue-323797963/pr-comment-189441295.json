{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/189441295", "pull_request_review_id": 121625607, "id": 189441295, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4OTQ0MTI5NQ==", "diff_hunk": "@@ -3,18 +3,124 @@\n #include <sys/socket.h>\n #include <sys/types.h>\n \n-#include <cstdlib>\n+#include <chrono>\n #include <cstdint>\n+#include <cstdlib>\n #include <functional>\n #include <limits>\n #include <string>\n #include <system_error>\n #include <tuple>\n #include <vector>\n-#include <chrono>\n+\n+#include <ATen/ATen.h>\n+\n+#include \"Types.hpp\"\n+\n+inline void hash_combine(std::size_t& seed) {}\n+\n+template <typename T, typename... Rest>\n+inline void hash_combine(std::size_t& seed, const T& v, Rest... rest) {\n+  std::hash<T> hasher;\n+  seed ^= hasher(v) + 0x9e3779b9 + (seed << 6) + (seed >> 2);\n+  hash_combine(seed, rest...);\n+}\n+\n+#define MAKE_HASHABLE(type, ...)                  \\\n+  namespace std {                                 \\\n+  template <>                                     \\\n+  struct hash<type> {                             \\\n+    std::size_t operator()(const type& t) const { \\\n+      std::size_t ret = 0;                        \\\n+      hash_combine(ret, __VA_ARGS__);             \\\n+      return ret;                                 \\\n+    }                                             \\\n+  };                                              \\\n+  }\n+\n+// Make std::vector<T> hashable\n+namespace std {\n+template <typename T>\n+struct hash<vector<T>> {\n+  std::size_t operator()(const vector<T>& v) const {\n+    std::size_t ret = v.size();\n+    for (const auto& e : v) {\n+      hash_combine(ret, e);\n+    }\n+    return ret;\n+  }\n+};\n+} // namespace std", "path": "torch/lib/c10d/Utils.hpp", "position": null, "original_position": 53, "commit_id": "f81bd359f6b3550c6c311ff39b58bf62535e43cc", "original_commit_id": "9eae42435952a9e0c723aff63234ca783460d467", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Hmm if we do this, then we should really make sure this header *never* gets included by the users. I'd consider adding `hash` instances for non-internal types a bad practice for a library (same applies to `ArrayRef` below).\r\n\r\nI've actually written a helper for hashing that uses a separate mechanism from `std::hash`, to make it easier to support things like vectors, and making structs hashable easier (it will look for a `.hash()` method on them by default, and only then fall back to `std::hash`). It also supports multiple args, so `torch::hash(x, y, z, w)` is a valid expr. cc @ezyang as this might be useful for c10 utility discussions at some point.", "created_at": "2018-05-19T18:20:30Z", "updated_at": "2018-11-23T15:44:20Z", "html_url": "https://github.com/pytorch/pytorch/pull/7628#discussion_r189441295", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/7628", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/189441295"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/7628#discussion_r189441295"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/7628"}}, "body_html": "<p>Hmm if we do this, then we should really make sure this header <em>never</em> gets included by the users. I'd consider adding <code>hash</code> instances for non-internal types a bad practice for a library (same applies to <code>ArrayRef</code> below).</p>\n<p>I've actually written a helper for hashing that uses a separate mechanism from <code>std::hash</code>, to make it easier to support things like vectors, and making structs hashable easier (it will look for a <code>.hash()</code> method on them by default, and only then fall back to <code>std::hash</code>). It also supports multiple args, so <code>torch::hash(x, y, z, w)</code> is a valid expr. cc <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=13564\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ezyang\">@ezyang</a> as this might be useful for c10 utility discussions at some point.</p>", "body_text": "Hmm if we do this, then we should really make sure this header never gets included by the users. I'd consider adding hash instances for non-internal types a bad practice for a library (same applies to ArrayRef below).\nI've actually written a helper for hashing that uses a separate mechanism from std::hash, to make it easier to support things like vectors, and making structs hashable easier (it will look for a .hash() method on them by default, and only then fall back to std::hash). It also supports multiple args, so torch::hash(x, y, z, w) is a valid expr. cc @ezyang as this might be useful for c10 utility discussions at some point."}