{"url": "https://api.github.com/repos/pytorch/pytorch/issues/3082", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/3082/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/3082/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/3082/events", "html_url": "https://github.com/pytorch/pytorch/issues/3082", "id": 264781166, "node_id": "MDU6SXNzdWUyNjQ3ODExNjY=", "number": 3082, "title": "init_process_group creates context on the current device, even when it does not seem necessary", "user": {"login": "ngimel", "id": 15841449, "node_id": "MDQ6VXNlcjE1ODQxNDQ5", "avatar_url": "https://avatars3.githubusercontent.com/u/15841449?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ngimel", "html_url": "https://github.com/ngimel", "followers_url": "https://api.github.com/users/ngimel/followers", "following_url": "https://api.github.com/users/ngimel/following{/other_user}", "gists_url": "https://api.github.com/users/ngimel/gists{/gist_id}", "starred_url": "https://api.github.com/users/ngimel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ngimel/subscriptions", "organizations_url": "https://api.github.com/users/ngimel/orgs", "repos_url": "https://api.github.com/users/ngimel/repos", "events_url": "https://api.github.com/users/ngimel/events{/privacy}", "received_events_url": "https://api.github.com/users/ngimel/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 424131847, "node_id": "MDU6TGFiZWw0MjQxMzE4NDc=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/bug", "name": "bug", "color": "b60205", "default": true}, {"id": 679953883, "node_id": "MDU6TGFiZWw2Nzk5NTM4ODM=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/distributed", "name": "distributed", "color": "c2e0c6", "default": false}, {"id": 443484135, "node_id": "MDU6TGFiZWw0NDM0ODQxMzU=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/high%20priority", "name": "high priority", "color": "F22613", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-10-12T00:54:18Z", "updated_at": "2017-10-31T00:23:33Z", "closed_at": "2017-10-31T00:23:33Z", "author_association": "CONTRIBUTOR", "body_html": "<pre><code>import torch\nfrom torch.autograd import Variable\nimport torch.nn as nn\nimport torch.nn.functional as F\nimport torch.distributed as dist\nimport ctypes\nimport argparse\nlib = ctypes.cdll.LoadLibrary(None)\n\nparser=argparse.ArgumentParser(description='distributed_bug')\nparser.add_argument('-rank', default=0, type=int,\n                                                help=\"\"\"distributed rank of process\"\"\")\nopt = parser.parse_args()\n\nclass Net(nn.Module):\n    def __init__(self):\n        super(Net, self).__init__()\n        self.conv1 = nn.Conv2d(3, 6, 5)\n        self.pool = nn.MaxPool2d(2, 2)\n        self.conv2 = nn.Conv2d(6, 16, 5)\n        self.fc1 = nn.Linear(16 * 5 * 5, 3200)\n        self.fc2 = nn.Linear(3200, 84)\n        self.fc3 = nn.Linear(84, 10)\n        self.bn2 = torch.nn.BatchNorm2d(16)\n\n    def forward(self, x):\n        x = self.pool(F.relu((self.conv1(x))))\n        x = self.pool(F.relu(self.bn2(self.conv2(x))))\n        x = x.view(-1, 16 * 5 * 5)\n        x = F.relu(self.fc1(x))\n        x = F.relu(self.fc2(x))\n        x = self.fc3(x)\n        return x\n\n#torch.cuda.set_device(opt.rank)    \nnet = Net().cuda(opt.rank)\nworld_size=2\ndist_url = 'tcp://224.66.41.62:23456'\ndist_backend = 'gloo'\n\ndist.init_process_group(backend=dist_backend, init_method=dist_url, world_size=world_size)\ntorch.cuda.synchronize()\nnet = torch.nn.parallel.DistributedDataParallel(net, device_ids=[opt.rank])\ntorch.cuda.synchronize()\ninp = Variable(torch.randn(64, 3, 32,32))\ntorch.cuda.synchronize()\nfor i in range(10):\n    out = net.forward(inp)\n    loss = out.sum()\n    loss.backward()\n    torch.cuda.synchronize()\nlib.cudaProfilerStop()\nprint(\"Finished\")\n</code></pre>\n<p>when torch.cuda.set_device is commented out, there would be as many python processes on device 0 as there are ranks, each taking ~450 MB memory. For 8 GPUs that adds up. Extra processes are created by init_process_group call, before that each process initializes context and allocates memory on its own GPU. While there's an easy workaround (set gpu before calling init_process_group), still looks like a bug. Run with</p>\n<pre><code>python test.py -rank 0 &amp;\npython test.py -rank 1 &amp;\n</code></pre>", "body_text": "import torch\nfrom torch.autograd import Variable\nimport torch.nn as nn\nimport torch.nn.functional as F\nimport torch.distributed as dist\nimport ctypes\nimport argparse\nlib = ctypes.cdll.LoadLibrary(None)\n\nparser=argparse.ArgumentParser(description='distributed_bug')\nparser.add_argument('-rank', default=0, type=int,\n                                                help=\"\"\"distributed rank of process\"\"\")\nopt = parser.parse_args()\n\nclass Net(nn.Module):\n    def __init__(self):\n        super(Net, self).__init__()\n        self.conv1 = nn.Conv2d(3, 6, 5)\n        self.pool = nn.MaxPool2d(2, 2)\n        self.conv2 = nn.Conv2d(6, 16, 5)\n        self.fc1 = nn.Linear(16 * 5 * 5, 3200)\n        self.fc2 = nn.Linear(3200, 84)\n        self.fc3 = nn.Linear(84, 10)\n        self.bn2 = torch.nn.BatchNorm2d(16)\n\n    def forward(self, x):\n        x = self.pool(F.relu((self.conv1(x))))\n        x = self.pool(F.relu(self.bn2(self.conv2(x))))\n        x = x.view(-1, 16 * 5 * 5)\n        x = F.relu(self.fc1(x))\n        x = F.relu(self.fc2(x))\n        x = self.fc3(x)\n        return x\n\n#torch.cuda.set_device(opt.rank)    \nnet = Net().cuda(opt.rank)\nworld_size=2\ndist_url = 'tcp://224.66.41.62:23456'\ndist_backend = 'gloo'\n\ndist.init_process_group(backend=dist_backend, init_method=dist_url, world_size=world_size)\ntorch.cuda.synchronize()\nnet = torch.nn.parallel.DistributedDataParallel(net, device_ids=[opt.rank])\ntorch.cuda.synchronize()\ninp = Variable(torch.randn(64, 3, 32,32))\ntorch.cuda.synchronize()\nfor i in range(10):\n    out = net.forward(inp)\n    loss = out.sum()\n    loss.backward()\n    torch.cuda.synchronize()\nlib.cudaProfilerStop()\nprint(\"Finished\")\n\nwhen torch.cuda.set_device is commented out, there would be as many python processes on device 0 as there are ranks, each taking ~450 MB memory. For 8 GPUs that adds up. Extra processes are created by init_process_group call, before that each process initializes context and allocates memory on its own GPU. While there's an easy workaround (set gpu before calling init_process_group), still looks like a bug. Run with\npython test.py -rank 0 &\npython test.py -rank 1 &", "body": "```\r\nimport torch\r\nfrom torch.autograd import Variable\r\nimport torch.nn as nn\r\nimport torch.nn.functional as F\r\nimport torch.distributed as dist\r\nimport ctypes\r\nimport argparse\r\nlib = ctypes.cdll.LoadLibrary(None)\r\n\r\nparser=argparse.ArgumentParser(description='distributed_bug')\r\nparser.add_argument('-rank', default=0, type=int,\r\n                                                help=\"\"\"distributed rank of process\"\"\")\r\nopt = parser.parse_args()\r\n\r\nclass Net(nn.Module):\r\n    def __init__(self):\r\n        super(Net, self).__init__()\r\n        self.conv1 = nn.Conv2d(3, 6, 5)\r\n        self.pool = nn.MaxPool2d(2, 2)\r\n        self.conv2 = nn.Conv2d(6, 16, 5)\r\n        self.fc1 = nn.Linear(16 * 5 * 5, 3200)\r\n        self.fc2 = nn.Linear(3200, 84)\r\n        self.fc3 = nn.Linear(84, 10)\r\n        self.bn2 = torch.nn.BatchNorm2d(16)\r\n\r\n    def forward(self, x):\r\n        x = self.pool(F.relu((self.conv1(x))))\r\n        x = self.pool(F.relu(self.bn2(self.conv2(x))))\r\n        x = x.view(-1, 16 * 5 * 5)\r\n        x = F.relu(self.fc1(x))\r\n        x = F.relu(self.fc2(x))\r\n        x = self.fc3(x)\r\n        return x\r\n\r\n#torch.cuda.set_device(opt.rank)    \r\nnet = Net().cuda(opt.rank)\r\nworld_size=2\r\ndist_url = 'tcp://224.66.41.62:23456'\r\ndist_backend = 'gloo'\r\n\r\ndist.init_process_group(backend=dist_backend, init_method=dist_url, world_size=world_size)\r\ntorch.cuda.synchronize()\r\nnet = torch.nn.parallel.DistributedDataParallel(net, device_ids=[opt.rank])\r\ntorch.cuda.synchronize()\r\ninp = Variable(torch.randn(64, 3, 32,32))\r\ntorch.cuda.synchronize()\r\nfor i in range(10):\r\n    out = net.forward(inp)\r\n    loss = out.sum()\r\n    loss.backward()\r\n    torch.cuda.synchronize()\r\nlib.cudaProfilerStop()\r\nprint(\"Finished\")\r\n```\r\nwhen torch.cuda.set_device is commented out, there would be as many python processes on device 0 as there are ranks, each taking ~450 MB memory. For 8 GPUs that adds up. Extra processes are created by init_process_group call, before that each process initializes context and allocates memory on its own GPU. While there's an easy workaround (set gpu before calling init_process_group), still looks like a bug. Run with \r\n```\r\npython test.py -rank 0 &\r\npython test.py -rank 1 &\r\n```\r\n\r\n\r\n\r\n"}