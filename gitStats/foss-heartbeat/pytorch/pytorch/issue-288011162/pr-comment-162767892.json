{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/162767892", "pull_request_review_id": 90288349, "id": 162767892, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2Mjc2Nzg5Mg==", "diff_hunk": "@@ -1178,6 +1178,47 @@ def local_response_norm(input, size, alpha=1e-4, beta=0.75, k=1):\n     return input / div\n \n \n+def instance_norm_wrapper(input, weight, bias, saved_running_mean, saved_running_var,\n+                          training=False, momentum=0.1, eps=1e-5, affine=False):\n+    \"\"\"This wrapper is for ONNX exporting.\n+    In PyTorch, InstanceNorm is implemented using BatchNorm. However it is not a good idea to export\n+    InstanceNorm as a combination of Reshapes and BatchNorm to ONNX, since Reshapes may not be cheap\n+    in other frameworks, plus we don't want to lose high-level information during exporting. So here\n+    we apply the same trick/hack as we did for RNN. This trick requires that the symbolic function\n+    and the real implementation must have exactly the same signatures.\n+    \"\"\"\n+    import torch\n+    func = instance_norm\n+    if torch._C._jit_is_tracing(input):", "path": "torch/nn/functional.py", "position": null, "original_position": 15, "commit_id": "6f870f5c329e3e94c9f6b743a0ef40ed56e61b02", "original_commit_id": "579be4111110225e2196b843237ead8937e68f01", "user": {"login": "houseroad", "id": 30275821, "node_id": "MDQ6VXNlcjMwMjc1ODIx", "avatar_url": "https://avatars0.githubusercontent.com/u/30275821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/houseroad", "html_url": "https://github.com/houseroad", "followers_url": "https://api.github.com/users/houseroad/followers", "following_url": "https://api.github.com/users/houseroad/following{/other_user}", "gists_url": "https://api.github.com/users/houseroad/gists{/gist_id}", "starred_url": "https://api.github.com/users/houseroad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/houseroad/subscriptions", "organizations_url": "https://api.github.com/users/houseroad/orgs", "repos_url": "https://api.github.com/users/houseroad/repos", "events_url": "https://api.github.com/users/houseroad/events{/privacy}", "received_events_url": "https://api.github.com/users/houseroad/received_events", "type": "User", "site_admin": false}, "body": "I like symbolic_override_based_on_first more, @ezyang, what do you think? :-)", "created_at": "2018-01-20T01:27:16Z", "updated_at": "2018-11-23T15:38:20Z", "html_url": "https://github.com/pytorch/pytorch/pull/4626#discussion_r162767892", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4626", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/162767892"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/4626#discussion_r162767892"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4626"}}, "body_html": "<p>I like symbolic_override_based_on_first more, <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=13564\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ezyang\">@ezyang</a>, what do you think? :-)</p>", "body_text": "I like symbolic_override_based_on_first more, @ezyang, what do you think? :-)", "in_reply_to_id": 162556893}