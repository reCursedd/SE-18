{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/163175368", "pull_request_review_id": 90743740, "id": 163175368, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MzE3NTM2OA==", "diff_hunk": "@@ -619,3 +619,15 @@ def symbolic(g, input, all_weights, h0, **fkwargs):\n         return prev_output, h_outs\n \n     return torch.onnx.symbolic_override(symbolic)\n+\n+\n+def instance_norm_symbolic_builder(*args, **kwargs):", "path": "torch/onnx/symbolic.py", "position": null, "original_position": 6, "commit_id": "6f870f5c329e3e94c9f6b743a0ef40ed56e61b02", "original_commit_id": "579be4111110225e2196b843237ead8937e68f01", "user": {"login": "dzhulgakov", "id": 17890620, "node_id": "MDQ6VXNlcjE3ODkwNjIw", "avatar_url": "https://avatars2.githubusercontent.com/u/17890620?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dzhulgakov", "html_url": "https://github.com/dzhulgakov", "followers_url": "https://api.github.com/users/dzhulgakov/followers", "following_url": "https://api.github.com/users/dzhulgakov/following{/other_user}", "gists_url": "https://api.github.com/users/dzhulgakov/gists{/gist_id}", "starred_url": "https://api.github.com/users/dzhulgakov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dzhulgakov/subscriptions", "organizations_url": "https://api.github.com/users/dzhulgakov/orgs", "repos_url": "https://api.github.com/users/dzhulgakov/repos", "events_url": "https://api.github.com/users/dzhulgakov/events{/privacy}", "received_events_url": "https://api.github.com/users/dzhulgakov/received_events", "type": "User", "site_admin": false}, "body": "With #4799 just have here:\r\n\r\n```\r\n# not sure how to inherit the default values...\r\ndef symbolic(g, input, weight, bias, eps, **unused_rest_kwargs):\r\n        input_type = input.type().scalarType()\r\n        if not weight:\r\n            weight = g.constant(1.0, [input.type().sizes()[1]], input_type)\r\n        if not bias:\r\n            bias = g.constant(0.0, [input.type().sizes()[1]], input_type)\r\n        return g.op(\"InstanceNormalization\", input, weight, bias, epsilon_f=eps)\r\n```\r\n\r\nAnd just add above:\r\n\r\n```\r\n@torch.onnx.symbolic_override_first_arg_based(torch.onnx.symbolic.instance_norm)\r\ndef instance_norm(....): ...\r\n```", "created_at": "2018-01-23T08:48:12Z", "updated_at": "2018-11-23T15:38:25Z", "html_url": "https://github.com/pytorch/pytorch/pull/4626#discussion_r163175368", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4626", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/163175368"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/4626#discussion_r163175368"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4626"}}, "body_html": "<p>With <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"290753196\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/4799\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/pytorch/pytorch/pull/4799/hovercard\" href=\"https://github.com/pytorch/pytorch/pull/4799\">#4799</a> just have here:</p>\n<pre><code># not sure how to inherit the default values...\ndef symbolic(g, input, weight, bias, eps, **unused_rest_kwargs):\n        input_type = input.type().scalarType()\n        if not weight:\n            weight = g.constant(1.0, [input.type().sizes()[1]], input_type)\n        if not bias:\n            bias = g.constant(0.0, [input.type().sizes()[1]], input_type)\n        return g.op(\"InstanceNormalization\", input, weight, bias, epsilon_f=eps)\n</code></pre>\n<p>And just add above:</p>\n<pre><code>@torch.onnx.symbolic_override_first_arg_based(torch.onnx.symbolic.instance_norm)\ndef instance_norm(....): ...\n</code></pre>", "body_text": "With #4799 just have here:\n# not sure how to inherit the default values...\ndef symbolic(g, input, weight, bias, eps, **unused_rest_kwargs):\n        input_type = input.type().scalarType()\n        if not weight:\n            weight = g.constant(1.0, [input.type().sizes()[1]], input_type)\n        if not bias:\n            bias = g.constant(0.0, [input.type().sizes()[1]], input_type)\n        return g.op(\"InstanceNormalization\", input, weight, bias, epsilon_f=eps)\n\nAnd just add above:\n@torch.onnx.symbolic_override_first_arg_based(torch.onnx.symbolic.instance_norm)\ndef instance_norm(....): ...", "in_reply_to_id": 162556409}