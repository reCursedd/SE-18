{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/429103997", "html_url": "https://github.com/pytorch/pytorch/pull/12493#issuecomment-429103997", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/12493", "id": 429103997, "node_id": "MDEyOklzc3VlQ29tbWVudDQyOTEwMzk5Nw==", "user": {"login": "anderspapitto", "id": 1388690, "node_id": "MDQ6VXNlcjEzODg2OTA=", "avatar_url": "https://avatars3.githubusercontent.com/u/1388690?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anderspapitto", "html_url": "https://github.com/anderspapitto", "followers_url": "https://api.github.com/users/anderspapitto/followers", "following_url": "https://api.github.com/users/anderspapitto/following{/other_user}", "gists_url": "https://api.github.com/users/anderspapitto/gists{/gist_id}", "starred_url": "https://api.github.com/users/anderspapitto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anderspapitto/subscriptions", "organizations_url": "https://api.github.com/users/anderspapitto/orgs", "repos_url": "https://api.github.com/users/anderspapitto/repos", "events_url": "https://api.github.com/users/anderspapitto/events{/privacy}", "received_events_url": "https://api.github.com/users/anderspapitto/received_events", "type": "User", "site_admin": false}, "created_at": "2018-10-11T20:19:47Z", "updated_at": "2018-10-11T21:10:59Z", "author_association": "MEMBER", "body_html": "<p>I've made two changes to account for <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=3768583\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/gchanan\">@gchanan</a>'s concerns.</p>\n<p>The first change is that we now generate VariableTypeEverything.cpp alongside the various shards. This file is not used by the build itself, but contains all generated definitions. Anyone who wants to see all definitions in one predictable place (for example to compare generated functions between commits) should look here. This is documented in a prominent comment at the top of templates/VariableType.cpp (and therefore also in each generated file).</p>\n<p>The second change is that rather than round-robining function definitions, we now sort them alphabetically and take equal-sized contiguous chunks. This will lead to less churn over time (though anyone looking at these generated files manually is still strongly recommended to use VariableTypeEverything.cpp).</p>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=3768583\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/gchanan\">@gchanan</a> and I also investigated breaking the file up along semantic lines, based on the properties of each decl. However, it's not clear that there is any division which is both semantically pleasing and breaks into equal-sized chunks. For example,</p>\n<pre><code>In [11]: Counter([tuple([decl['abstract']] + decl['method_of']) for decl in aten_decls])\nOut[11]:\nCounter({(True, 'Type', 'Tensor'): 90,\n         (True, 'Type', 'namespace'): 540,\n         (True, 'Type', 'Tensor', 'namespace'): 118,\n         (True, 'Type'): 14,\n         (False, 'Type', 'namespace'): 344,\n         (False, 'Type', 'Tensor', 'namespace'): 152,\n         (False, 'Type', 'Tensor'): 28,\n         (False, 'Type'): 1})\n</code></pre>\n<p>Another downside of a semantic division is that if the distribution were to skew over time as functions are added/removed/modified, it's unlikely that anyone would catch (much less diagnose and fix) the build-perf regression.</p>", "body_text": "I've made two changes to account for @gchanan's concerns.\nThe first change is that we now generate VariableTypeEverything.cpp alongside the various shards. This file is not used by the build itself, but contains all generated definitions. Anyone who wants to see all definitions in one predictable place (for example to compare generated functions between commits) should look here. This is documented in a prominent comment at the top of templates/VariableType.cpp (and therefore also in each generated file).\nThe second change is that rather than round-robining function definitions, we now sort them alphabetically and take equal-sized contiguous chunks. This will lead to less churn over time (though anyone looking at these generated files manually is still strongly recommended to use VariableTypeEverything.cpp).\n@gchanan and I also investigated breaking the file up along semantic lines, based on the properties of each decl. However, it's not clear that there is any division which is both semantically pleasing and breaks into equal-sized chunks. For example,\nIn [11]: Counter([tuple([decl['abstract']] + decl['method_of']) for decl in aten_decls])\nOut[11]:\nCounter({(True, 'Type', 'Tensor'): 90,\n         (True, 'Type', 'namespace'): 540,\n         (True, 'Type', 'Tensor', 'namespace'): 118,\n         (True, 'Type'): 14,\n         (False, 'Type', 'namespace'): 344,\n         (False, 'Type', 'Tensor', 'namespace'): 152,\n         (False, 'Type', 'Tensor'): 28,\n         (False, 'Type'): 1})\n\nAnother downside of a semantic division is that if the distribution were to skew over time as functions are added/removed/modified, it's unlikely that anyone would catch (much less diagnose and fix) the build-perf regression.", "body": "I've made two changes to account for @gchanan's concerns.\r\n\r\nThe first change is that we now generate VariableTypeEverything.cpp alongside the various shards. This file is not used by the build itself, but contains all generated definitions. Anyone who wants to see all definitions in one predictable place (for example to compare generated functions between commits) should look here. This is documented in a prominent comment at the top of templates/VariableType.cpp (and therefore also in each generated file).\r\n\r\nThe second change is that rather than round-robining function definitions, we now sort them alphabetically and take equal-sized contiguous chunks. This will lead to less churn over time (though anyone looking at these generated files manually is still strongly recommended to use VariableTypeEverything.cpp).\r\n\r\n@gchanan and I also investigated breaking the file up along semantic lines, based on the properties of each decl. However, it's not clear that there is any division which is both semantically pleasing and breaks into equal-sized chunks. For example,\r\n\r\n```\r\nIn [11]: Counter([tuple([decl['abstract']] + decl['method_of']) for decl in aten_decls])\r\nOut[11]:\r\nCounter({(True, 'Type', 'Tensor'): 90,\r\n         (True, 'Type', 'namespace'): 540,\r\n         (True, 'Type', 'Tensor', 'namespace'): 118,\r\n         (True, 'Type'): 14,\r\n         (False, 'Type', 'namespace'): 344,\r\n         (False, 'Type', 'Tensor', 'namespace'): 152,\r\n         (False, 'Type', 'Tensor'): 28,\r\n         (False, 'Type'): 1})\r\n```\r\n\r\nAnother downside of a semantic division is that if the distribution were to skew over time as functions are added/removed/modified, it's unlikely that anyone would catch (much less diagnose and fix) the build-perf regression."}