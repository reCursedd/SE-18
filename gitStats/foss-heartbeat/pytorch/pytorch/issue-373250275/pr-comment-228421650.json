{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/228421650", "pull_request_review_id": 168691255, "id": 228421650, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyODQyMTY1MA==", "diff_hunk": "@@ -875,6 +875,197 @@ Node* Node::insertAfter(Node * n) {\n   return this;\n }\n \n+bool Node::moveAfterTopologicallyValid(Node* n) {\n+  return tryMove(n, MoveSide::AFTER);\n+}\n+\n+bool Node::moveBeforeTopologicallyValid(Node* n) {\n+  return tryMove(n, MoveSide::BEFORE);\n+}\n+\n+// Helper for topologically-safe node moves. See `tryMove()` for details.\n+namespace {\n+struct WorkingSet {\n+ public:\n+  explicit WorkingSet(Node* mover) {\n+    add(mover);\n+  }\n+\n+  // Add `n` to the working set\n+  void add(Node* n) {\n+    nodes_.push_back(n);\n+    for (const auto user : getUsersSameBlock(n)) {\n+      users_.insert(user);\n+    }\n+  }\n+\n+  void eraseMover() {\n+    nodes_.pop_front();\n+  }\n+\n+  const std::list<Node*>& nodes() {\n+    return nodes_;\n+  }\n+\n+  // Does the working set depend on `n`?\n+  bool dependsOn(Node* n) const {\n+    if (nodes_.empty()) {\n+      return false;\n+    }\n+\n+    if (n->isAfter(nodes_.front())) {\n+      return producesFor(n);\n+    } else {\n+      return consumesFrom(n);\n+    }\n+  }\n+\n+  // Does the working set produce any values consumed by `n`?\n+  bool producesFor(Node* n) const {\n+    // This equivalent to asking: does the total use-set of all the nodes in the\n+    // working set include `n`?\n+    return users_.count(n) != 0;\n+  }\n+\n+  // Does the working set consume any values produced by `n`?\n+  bool consumesFrom(Node* n) const {\n+    const auto& users = getUsersSameBlock(n);\n+    return std::any_of(nodes_.begin(), nodes_.end(), [&](Node* node) {\n+      return users.count(node) != 0;\n+    });\n+  }\n+\n+ private:\n+  // Get all users of outputs of `n`, in the same block as `n`.\n+  // This means if there is an `if` node that uses an output of `n` in some\n+  // inner sub-block, we will consider the whole `if` node a user of `n`.\n+  std::unordered_set<Node*> getUsersSameBlock(Node* n) const {\n+    std::unordered_set<Node*> users;\n+    for (const auto output : n->outputs()) {\n+      for (const auto& use : output->uses()) {\n+        if (use.user->owningBlock() == n->owningBlock()) {\n+          users.insert(use.user);\n+        } else {\n+          // This user is in a sub-block. Traverse the blockchain upward until\n+          // we arrive at a node that shares a block with `this`\n+          auto curNode = use.user;\n+          while (curNode->owningBlock() != n->owningBlock()) {\n+            curNode = curNode->owningBlock()->owningNode();\n+          }\n+          users.insert(curNode);\n+        }\n+      }\n+    }\n+\n+    return users;\n+  }\n+\n+  std::list<Node*> nodes_;\n+  std::unordered_set<Node*> users_;\n+};\n+} // namespace\n+\n+// Try to move `this` before/after `movePoint` while preserving value\n+// dependencies. Returns false iff such a move could not be made\n+//\n+// The basic approach is: have a \"working set\" that we are moving forward, one\n+// node at a time. When we can't move past a node (because it depends on the\n+// working set), then add it to the working set and keep moving until we hit\n+// `moveAfter`.\n+bool Node::tryMove(Node* movePoint, MoveSide moveSide) {\n+  JIT_ASSERT(this->inBlockList() && movePoint->inBlockList());\n+  JIT_ASSERT(this->owningBlock() == movePoint->owningBlock());\n+  JIT_ASSERT(this != movePoint);\n+\n+  // 1. Move from `this` toward movePoint, building up the working set of\n+  // dependencies\n+  WorkingSet workingSet(this);\n+\n+  int direction;\n+  if (this->isAfter(movePoint)) {\n+    direction = kPrevDirection;\n+  } else {\n+    direction = kNextDirection;\n+  }\n+\n+  auto curNode = this->next_in_graph[direction];\n+  // Move forward one node at a time\n+  while (curNode != movePoint) {\n+    if (workingSet.dependsOn(curNode)) {\n+      // If we can't move past this node, add it to the working set\n+      workingSet.add(curNode);\n+    }\n+    curNode = curNode->next_in_graph[direction];\n+  }\n+\n+  // 2. Decide whether we can move it all to `movePoint`.\n+\n+  // Say we are moving directly before movePoint and `this` starts before\n+  // movePoint in the graph. The move looks like\n+  //\n+  //  `this`              `this`           |\n+  //  <dependencies>  ->  `movePoint`      | `this` and deps are split\n+  //  `movePoint`         <dependencies>   |\n+  //\n+  // Contrast with the case where `this` starts AFTER movePoint:\n+  //\n+  //  `movePoint`         <dependencies>   |\n+  //  <dependencies>  ->  `this`           | `this` and deps are together\n+  //  `this`              `movePoint`      |\n+  //\n+  // In the first case, we need to split `this` off from its dependencies, so we\n+  // can move the dependencies below `movePoint` and keep `this` above.\n+  const bool splitThisAndDeps =\n+      (moveSide == MoveSide::BEFORE && this->isBefore(movePoint)) ||\n+      (moveSide == MoveSide::AFTER && this->isAfter(movePoint));\n+\n+  if (splitThisAndDeps) {\n+    // remove `this` from dependencies to be moved past `movePoint`\n+    workingSet.eraseMover();", "path": "torch/csrc/jit/ir.cpp", "position": 165, "original_position": 150, "commit_id": "65c1823be93c87ccb8f900061aa30f27f370a9b1", "original_commit_id": "8c8bef3eea2389ca75bd5ba89b5015a618995890", "user": {"login": "suo", "id": 1617424, "node_id": "MDQ6VXNlcjE2MTc0MjQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/1617424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/suo", "html_url": "https://github.com/suo", "followers_url": "https://api.github.com/users/suo/followers", "following_url": "https://api.github.com/users/suo/following{/other_user}", "gists_url": "https://api.github.com/users/suo/gists{/gist_id}", "starred_url": "https://api.github.com/users/suo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/suo/subscriptions", "organizations_url": "https://api.github.com/users/suo/orgs", "repos_url": "https://api.github.com/users/suo/repos", "events_url": "https://api.github.com/users/suo/events{/privacy}", "received_events_url": "https://api.github.com/users/suo/received_events", "type": "User", "site_admin": false}, "body": "whoops, you're right. I'll fix", "created_at": "2018-10-26T06:55:45Z", "updated_at": "2018-11-23T15:53:41Z", "html_url": "https://github.com/pytorch/pytorch/pull/13026#discussion_r228421650", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/13026", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/228421650"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/13026#discussion_r228421650"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/13026"}}, "body_html": "<p>whoops, you're right. I'll fix</p>", "body_text": "whoops, you're right. I'll fix", "in_reply_to_id": 228417100}