{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/228344566", "pull_request_review_id": 168598531, "id": 228344566, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyODM0NDU2Ng==", "diff_hunk": "@@ -894,6 +894,171 @@ Node* Node::insertAfter(Node * n) {\n   return this;\n }\n \n+bool Node::moveAfterTopologicallyValid(Node* n) {\n+  return tryMove(n, MoveSide::AFTER);\n+}\n+\n+bool Node::moveBeforeTopologicallyValid(Node* n) {\n+  return tryMove(n, MoveSide::BEFORE);\n+}\n+\n+bool Node::isDependent(const std::list<Node*>& nodes) const {\n+  if (nodes.empty()) {\n+    return false;\n+  }\n+\n+  if (this->isAfter(nodes.front())) {\n+    return consumesFrom(nodes);\n+  } else {\n+    return producesFor(nodes);\n+  }\n+}\n+\n+// Try to move `this` before/after `movePoint` while preserving value\n+// dependencies. Returns false iff such a move could not be made\n+//\n+// The basic approach is: have a \"working set\" that we are moving forward, one\n+// node at a time. When we can't move past a node (because it depends on the\n+// working set), then add it to the working set and keep moving until we hit\n+// `moveAfter`.\n+bool Node::tryMove(Node* movePoint, MoveSide moveSide) {\n+  JIT_ASSERT(this->inBlockList() && movePoint->inBlockList());\n+  JIT_ASSERT(this->owningBlock() == movePoint->owningBlock());\n+  JIT_ASSERT(this != movePoint);\n+\n+  // 1. Move from `this` toward movePoint, building up the working set of\n+  // dependencies\n+  std::list<Node*> workingSet;\n+  workingSet.push_back(this);\n+\n+  int direction;\n+  if (this->isAfter(movePoint)) {\n+    direction = kPrevDirection;\n+  } else {\n+    direction = kNextDirection;\n+  }\n+\n+  auto curNode = this->next_in_graph[direction];\n+  // Move forward one node at a time\n+  while (curNode != movePoint) {\n+    if (curNode->isDependent(workingSet)) {\n+      // If we can't move past this node, add it to the working set\n+      workingSet.push_back(curNode);\n+    }\n+    curNode = curNode->next_in_graph[direction];\n+  }\n+\n+  // 2. Decide whether we can move it all to `movePoint`.\n+\n+  // Say we are moving directly before movePoint and `this` starts before\n+  // movePoint in the graph. The move looks like\n+  //\n+  //  `this`              `this`           |\n+  //  <dependencies>  ->  `movePoint`      | `this` and deps are split\n+  //  `movePoint`         <dependencies>   |\n+  //\n+  // Contrast with the case where `this` starts AFTER movePoint:\n+  //\n+  //  `movePoint`         <dependencies>   |\n+  //  <dependencies>  ->  `this`           | `this` and deps are together\n+  //  `this`              `movePoint`      |\n+  //\n+  // In the first case, we need to split `this` off from its dependencies, so we\n+  // can move the dependencies below `movePoint` and keep `this` above.\n+  const bool splitThisAndDeps =\n+      (moveSide == MoveSide::BEFORE && this->isBefore(movePoint)) ||\n+      (moveSide == MoveSide::AFTER && this->isAfter(movePoint));\n+\n+  if (splitThisAndDeps) {\n+    // remove `this` from dependencies to be moved past `movePoint`\n+    workingSet.pop_front();\n+  }\n+\n+  // Check if we can move the working set past the move point\n+  if (movePoint->isDependent(workingSet)) {\n+    // if we can't, then there are intermediate dependencies between the\n+    // `this` and `movePoint`, so we can't do the move\n+    return false;\n+  }\n+\n+  // 3. Execute the move\n+  JIT_ASSERT(curNode == movePoint);\n+  if (splitThisAndDeps) {\n+    // Move `this`\n+    this->move(movePoint, moveSide);\n+\n+    // Then move all of its dependencies on the other side of `movePoint`\n+    const auto reversed =\n+        moveSide == MoveSide::BEFORE ? MoveSide::AFTER : MoveSide::BEFORE;\n+    for (auto toMove : workingSet) {\n+      toMove->move(curNode, reversed);\n+      curNode = toMove;\n+    }\n+  } else {\n+    // Just append/prepend everything to `movePoint`\n+    for (auto toMove : workingSet) {\n+      toMove->move(curNode, moveSide);\n+      curNode = toMove;\n+    }\n+  }\n+  return true;\n+}\n+\n+// Helper function so we can generalize `tryMove`\n+void Node::move(Node* movePoint, MoveSide moveSide) {\n+  switch (moveSide) {\n+    case MoveSide::BEFORE:\n+      this->moveBefore(movePoint);\n+      break;\n+    case MoveSide::AFTER:\n+      this->moveAfter(movePoint);\n+      break;\n+  }\n+}\n+\n+// Does `this` output any values used by `nodes`?\n+template <typename T>", "path": "torch/csrc/jit/ir.cpp", "position": null, "original_position": 127, "commit_id": "65c1823be93c87ccb8f900061aa30f27f370a9b1", "original_commit_id": "71d8baacd0e27c9ca820d011f2216733ed229ee3", "user": {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, "body": "why the template?", "created_at": "2018-10-25T21:42:23Z", "updated_at": "2018-11-23T15:53:37Z", "html_url": "https://github.com/pytorch/pytorch/pull/13026#discussion_r228344566", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/13026", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/228344566"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/13026#discussion_r228344566"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/13026"}}, "body_html": "<p>why the template?</p>", "body_text": "why the template?"}