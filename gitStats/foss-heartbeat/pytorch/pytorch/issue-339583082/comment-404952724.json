{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/404952724", "html_url": "https://github.com/pytorch/pytorch/pull/9281#issuecomment-404952724", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/9281", "id": 404952724, "node_id": "MDEyOklzc3VlQ29tbWVudDQwNDk1MjcyNA==", "user": {"login": "vadimkantorov", "id": 1041752, "node_id": "MDQ6VXNlcjEwNDE3NTI=", "avatar_url": "https://avatars0.githubusercontent.com/u/1041752?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vadimkantorov", "html_url": "https://github.com/vadimkantorov", "followers_url": "https://api.github.com/users/vadimkantorov/followers", "following_url": "https://api.github.com/users/vadimkantorov/following{/other_user}", "gists_url": "https://api.github.com/users/vadimkantorov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vadimkantorov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vadimkantorov/subscriptions", "organizations_url": "https://api.github.com/users/vadimkantorov/orgs", "repos_url": "https://api.github.com/users/vadimkantorov/repos", "events_url": "https://api.github.com/users/vadimkantorov/events{/privacy}", "received_events_url": "https://api.github.com/users/vadimkantorov/received_events", "type": "User", "site_admin": false}, "created_at": "2018-07-13T20:59:50Z", "updated_at": "2018-07-13T21:02:16Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1310570\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/soumith\">@soumith</a> I think it's worth to see actual usages of <code>torch.eye</code> in <code>torch.distributions</code> and <code>Pyro</code> in the future. If many usages are meaning to do sth like batched <code>torch.eye_like</code> for batched covariances, it may be a reason to reconsider at some point.</p>\n<p>Basically, my grievance is that there's no concise way to transfer type and device (and potentially layout) to tensor factory methods (there seems no concice equivalent of TensorOptions in Python): <code>torch.eye(some_shape, device = x.device, type = x.dtype)</code> without calling <code>type_as</code> and resorting to copying or a less readable <code>torch.eye(some_shape, out = x.new())</code></p>\n<p>It also sucks that GitHub doesn't have an easy way to find all usages of a function in PyTorch itself or other PyTorch-using projects :/</p>", "body_text": "@soumith I think it's worth to see actual usages of torch.eye in torch.distributions and Pyro in the future. If many usages are meaning to do sth like batched torch.eye_like for batched covariances, it may be a reason to reconsider at some point.\nBasically, my grievance is that there's no concise way to transfer type and device (and potentially layout) to tensor factory methods (there seems no concice equivalent of TensorOptions in Python): torch.eye(some_shape, device = x.device, type = x.dtype) without calling type_as and resorting to copying or a less readable torch.eye(some_shape, out = x.new())\nIt also sucks that GitHub doesn't have an easy way to find all usages of a function in PyTorch itself or other PyTorch-using projects :/", "body": "@soumith I think it's worth to see actual usages of `torch.eye` in `torch.distributions` and `Pyro` in the future. If many usages are meaning to do sth like batched `torch.eye_like` for batched covariances, it may be a reason to reconsider at some point.\r\n\r\nBasically, my grievance is that there's no concise way to transfer type and device (and potentially layout) to tensor factory methods (there seems no concice equivalent of TensorOptions in Python): `torch.eye(some_shape, device = x.device, type = x.dtype)` without calling `type_as` and resorting to copying or a less readable `torch.eye(some_shape, out = x.new())`\r\n\r\nIt also sucks that GitHub doesn't have an easy way to find all usages of a function in PyTorch itself or other PyTorch-using projects :/"}