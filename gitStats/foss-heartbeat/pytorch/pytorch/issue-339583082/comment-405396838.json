{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/405396838", "html_url": "https://github.com/pytorch/pytorch/pull/9281#issuecomment-405396838", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/9281", "id": 405396838, "node_id": "MDEyOklzc3VlQ29tbWVudDQwNTM5NjgzOA==", "user": {"login": "gchanan", "id": 3768583, "node_id": "MDQ6VXNlcjM3Njg1ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3768583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gchanan", "html_url": "https://github.com/gchanan", "followers_url": "https://api.github.com/users/gchanan/followers", "following_url": "https://api.github.com/users/gchanan/following{/other_user}", "gists_url": "https://api.github.com/users/gchanan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gchanan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gchanan/subscriptions", "organizations_url": "https://api.github.com/users/gchanan/orgs", "repos_url": "https://api.github.com/users/gchanan/repos", "events_url": "https://api.github.com/users/gchanan/events{/privacy}", "received_events_url": "https://api.github.com/users/gchanan/received_events", "type": "User", "site_admin": false}, "created_at": "2018-07-16T22:07:43Z", "updated_at": "2018-07-16T22:07:43Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=5674597\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/SsnL\">@SsnL</a> I don't think we are arguing about the same thing: my response was in regard to adding <code>like</code> or <code>as</code> argument; sorry if that wasn't clear!  I don't have any objection to the <code>new_</code> functions except I don't think they are discoverable.</p>\n<blockquote>\n<p>**t.options() isn't more consistent.</p>\n</blockquote>\n<p>I don't really agree with this, but I don't think it's important either; the argument against <code>as</code> or <code>like</code> don't depend on consistency with the C++ API.  But your argument here papers over the differences between \"more consistent\" and \"is exactly the same as\".</p>\n<blockquote>\n<p>**t.options() isn't clearer either.</p>\n</blockquote>\n<p>Again, I think we've mixed the arguments up.  I don't think <code>**t.options()</code> is clearer than the <code>new_</code> functions, I think it is clearer than <code>like</code> or <code>as</code> parameters and more discoverable than the <code>new_</code> functions.</p>\n<blockquote>\n<p>Again, what's the use of t.options() as a public API if its use is pretty much only in kwarg expansion of tensor factory methods?</p>\n</blockquote>\n<p>See above: \" I think it is clearer than <code>like</code> or <code>as</code> parameters and more discoverable than the <code>new_</code> functions.\"</p>", "body_text": "@SsnL I don't think we are arguing about the same thing: my response was in regard to adding like or as argument; sorry if that wasn't clear!  I don't have any objection to the new_ functions except I don't think they are discoverable.\n\n**t.options() isn't more consistent.\n\nI don't really agree with this, but I don't think it's important either; the argument against as or like don't depend on consistency with the C++ API.  But your argument here papers over the differences between \"more consistent\" and \"is exactly the same as\".\n\n**t.options() isn't clearer either.\n\nAgain, I think we've mixed the arguments up.  I don't think **t.options() is clearer than the new_ functions, I think it is clearer than like or as parameters and more discoverable than the new_ functions.\n\nAgain, what's the use of t.options() as a public API if its use is pretty much only in kwarg expansion of tensor factory methods?\n\nSee above: \" I think it is clearer than like or as parameters and more discoverable than the new_ functions.\"", "body": "@Ssnl I don't think we are arguing about the same thing: my response was in regard to adding `like` or `as` argument; sorry if that wasn't clear!  I don't have any objection to the `new_` functions except I don't think they are discoverable.\r\n\r\n> **t.options() isn't more consistent.\r\n\r\nI don't really agree with this, but I don't think it's important either; the argument against `as` or `like` don't depend on consistency with the C++ API.  But your argument here papers over the differences between \"more consistent\" and \"is exactly the same as\".\r\n\r\n> **t.options() isn't clearer either.\r\n\r\nAgain, I think we've mixed the arguments up.  I don't think `**t.options()` is clearer than the `new_` functions, I think it is clearer than `like` or `as` parameters and more discoverable than the `new_` functions.\r\n\r\n> Again, what's the use of t.options() as a public API if its use is pretty much only in kwarg expansion of tensor factory methods?\r\n\r\nSee above: \" I think it is clearer than `like` or `as` parameters and more discoverable than the `new_` functions.\""}