{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/405094609", "html_url": "https://github.com/pytorch/pytorch/pull/9281#issuecomment-405094609", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/9281", "id": 405094609, "node_id": "MDEyOklzc3VlQ29tbWVudDQwNTA5NDYwOQ==", "user": {"login": "SsnL", "id": 5674597, "node_id": "MDQ6VXNlcjU2NzQ1OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5674597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SsnL", "html_url": "https://github.com/SsnL", "followers_url": "https://api.github.com/users/SsnL/followers", "following_url": "https://api.github.com/users/SsnL/following{/other_user}", "gists_url": "https://api.github.com/users/SsnL/gists{/gist_id}", "starred_url": "https://api.github.com/users/SsnL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SsnL/subscriptions", "organizations_url": "https://api.github.com/users/SsnL/orgs", "repos_url": "https://api.github.com/users/SsnL/repos", "events_url": "https://api.github.com/users/SsnL/events{/privacy}", "received_events_url": "https://api.github.com/users/SsnL/received_events", "type": "User", "site_admin": false}, "created_at": "2018-07-15T14:09:23Z", "updated_at": "2018-07-15T14:09:53Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=13564\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ezyang\">@ezyang</a> yeah, but <code>**t.options()</code> is still quite verbose, and not immediately readable to people not familiar with pytorch. In addition, this pretty much means that <code>Tensor.options()</code> will mostly have only this use. Moreover, the purpose of the <code>new_</code> functions is to preserve device and dtype (and those are overwritable too!). So, with <code>new_</code> functions so suitable, having a separate mechanism seems unnecessary.</p>", "body_text": "@ezyang yeah, but **t.options() is still quite verbose, and not immediately readable to people not familiar with pytorch. In addition, this pretty much means that Tensor.options() will mostly have only this use. Moreover, the purpose of the new_ functions is to preserve device and dtype (and those are overwritable too!). So, with new_ functions so suitable, having a separate mechanism seems unnecessary.", "body": "@ezyang yeah, but `**t.options()` is still quite verbose, and not immediately readable to people not familiar with pytorch. In addition, this pretty much means that `Tensor.options()` will mostly have only this use. Moreover, the purpose of the `new_` functions is to preserve device and dtype (and those are overwritable too!). So, with `new_` functions so suitable, having a separate mechanism seems unnecessary."}