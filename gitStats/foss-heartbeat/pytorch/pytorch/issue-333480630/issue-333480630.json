{"url": "https://api.github.com/repos/pytorch/pytorch/issues/8634", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/8634/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/8634/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/8634/events", "html_url": "https://github.com/pytorch/pytorch/issues/8634", "id": 333480630, "node_id": "MDU6SXNzdWUzMzM0ODA2MzA=", "number": 8634, "title": "[JIT] Improve coverage of `throw ErrorReport` callsites ", "user": {"login": "jamesr66a", "id": 4685384, "node_id": "MDQ6VXNlcjQ2ODUzODQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/4685384?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamesr66a", "html_url": "https://github.com/jamesr66a", "followers_url": "https://api.github.com/users/jamesr66a/followers", "following_url": "https://api.github.com/users/jamesr66a/following{/other_user}", "gists_url": "https://api.github.com/users/jamesr66a/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamesr66a/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamesr66a/subscriptions", "organizations_url": "https://api.github.com/users/jamesr66a/orgs", "repos_url": "https://api.github.com/users/jamesr66a/repos", "events_url": "https://api.github.com/users/jamesr66a/events{/privacy}", "received_events_url": "https://api.github.com/users/jamesr66a/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 679953983, "node_id": "MDU6TGFiZWw2Nzk5NTM5ODM=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/jit", "name": "jit", "color": "c5def5", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-06-19T00:36:44Z", "updated_at": "2018-06-29T21:22:59Z", "closed_at": "2018-06-29T21:22:59Z", "author_association": "CONTRIBUTOR", "body_html": "<p>For robustness of error messages, we should ensure all code paths where we throw an ErrorReport are tested and return meaningful errors.</p>\n<p>As of today, this is the coverage of the times that we <code>throw ErrorReport</code> for a run of <code>test_jit.py</code>. Format is <code>line, #calls, source code</code>:</p>\n<pre><code>torch/csrc/jit/script/compiler.cpp:\n  148|      0|        throw ErrorReport(loc) &lt;&lt; \"cannot re-assign '\" &lt;&lt; name &lt;&lt; \"' to a value of type \" &lt;&lt; value-&gt;kind()\n  153|      0|        throw ErrorReport(loc) &lt;&lt; \"cannot re-assign '\" &lt;&lt; name &lt;&lt; \"' because it has type \" &lt;&lt; value-&gt;kind()\n  157|      2|        throw ErrorReport(loc) &lt;&lt; \"variable '\" &lt;&lt; name &lt;&lt; \"' previously has type \" &lt;&lt; simple_parent-&gt;type()-&gt;name()\n  192|      4|      throw ErrorReport(range) &lt;&lt; \"undefined value \" &lt;&lt; ident;\n  248|      0|      throw ErrorReport(loc) &lt;&lt; \"attributes must be scalars or lists of scalars\";\n  252|      0|  throw ErrorReport(loc) &lt;&lt; \"attributes must be constant expressions\";\n  497|      0|      throw ErrorReport(loc) &lt;&lt; \"argument 'chunks' must be a constant\";\n  549|      0|    throw ErrorReport(loc) &lt;&lt; \"unknown builtin op\";\n  551|      9|  throw ErrorReport(loc) &lt;&lt; \"arguments for call are not valid:\\n\"\n  565|      0|    throw ErrorReport(range) &lt;&lt; \"expected a tensor value but found a tuple\";\n  616|      0|        throw ErrorReport(def.params().range()) &lt;&lt; \"methods must have a self argument\";\n  713|      0|          throw ErrorReport(stmt) &lt;&lt; \"return statements can appear only at the end \"\n  913|      0|      throw ErrorReport(range)\n  926|      0|      throw ErrorReport(stmt)\n  930|      0|      throw ErrorReport(stmt) &lt;&lt; \"Iteration variable unpacking is not supported\";\n  934|      0|      throw ErrorReport(targets[0]) &lt;&lt; \"Starred unpacking is currently not\"\n  992|      0|        throw ErrorReport(assignee)\n  998|      0|      throw ErrorReport(r)\n 1003|      0|      throw ErrorReport(r) &lt;&lt; \"A Starred expression may only appear on the \"\n 1015|      0|        throw ErrorReport(stmt)\n 1042|      3|      throw ErrorReport(stmt)\n 1048|      4|      throw ErrorReport(stmt)\n 1060|      0|          throw ErrorReport(var) &lt;&lt; \"Cannot pack a tuple into a non-variable.\";\n 1169|      0|        throw ErrorReport(ident) &lt;&lt; \"print doesn't accept any keyword arguments\";\n 1249|      0|        throw ErrorReport(tree) &lt;&lt; \"Unexpected starred expansion. File a bug report.\";\n 1284|      0|        throw ErrorReport(tree) &lt;&lt; \"NYI: \" &lt;&lt; tree;\n 1305|      0|        throw ErrorReport(input) &lt;&lt; \"Unrecognized type: \" &lt;&lt; type;\n 1364|      0|      throw ErrorReport(loc)\n 1461|      0|        throw ErrorReport(def) &lt;&lt; \"duplicate definition of function '\" &lt;&lt; name &lt;&lt; \"'\";\n 1495|      4|  throw ErrorReport(loc) &lt;&lt; value-&gt;type()-&gt;name() &lt;&lt; \" cannot be used as a tuple\";\n 1500|      0|    throw ErrorReport(loc) &lt;&lt; \"expected \" &lt;&lt; expected &lt;&lt; \" \" &lt;&lt; what &lt;&lt; \" but found \" &lt;&lt; actual;\ntorch/csrc/jit/script/compiler.h:\n   41|      0|    throw ErrorReport(loc) &lt;&lt; kind() &lt;&lt; \" cannot be used as a value\";\n   46|      0|    throw ErrorReport(loc) &lt;&lt; \"attribute lookup is not defined on \" &lt;&lt; kind();\n   52|      0|    throw ErrorReport(loc) &lt;&lt; kind() &lt;&lt; \" cannot be used as a tuple\";\n   78|      0|    throw ErrorReport(loc) &lt;&lt; \"cannot call a \" &lt;&lt; kind();\ntorch/csrc/jit/script/init.cpp:\n   56|      3|      throw ErrorReport(loc) &lt;&lt; \"calling a Python function with an incorrect number \"\n   61|      1|        throw ErrorReport(loc) &lt;&lt; \"type mismatch at argument \" &lt;&lt; i &lt;&lt; \": expected \"\n   70|      0|      throw ErrorReport(loc) &lt;&lt; \"keyword arguments in Python calls aren't supported\";\n  103|      0|        throw ErrorReport(loc) &lt;&lt; \"Python functions can currently only return Tensors\";\n  134|      0|      throw ErrorReport(loc) &lt;&lt; \"object has no attribute \" &lt;&lt; name;\n  210|      0|  throw ErrorReport(loc) &lt;&lt; \"unsupported attribute lookup on \" &lt;&lt; py::repr(self) &lt;&lt; \".\";\n  276|      2|        throw ErrorReport(loc) &lt;&lt; \"attribute '\" &lt;&lt; field &lt;&lt; \"' of type '\" &lt;&lt; typeString(attr) &lt;&lt; \"' is not usable in a script method (did you forget to add it __constants__?)\";\n  279|      0|    throw ErrorReport(loc) &lt;&lt; \"module has no attribute '\" &lt;&lt; field &lt;&lt; \"'\";\ntorch/csrc/jit/script/module.cpp:\n   34|      1|    throw ErrorReport(loc) &lt;&lt; \" method '\" &lt;&lt; callee.name()\n   44|      0|    throw ErrorReport(loc) &lt;&lt; failure_messages.str();\ntorch/csrc/jit/script/tree_views.h:\n  169|      0|      throw ErrorReport(tree) &lt;&lt; \"Maybe trees can have at most one subtree\";\n  211|      0|        throw ErrorReport(tree) &lt;&lt; kindToString(tree-&gt;kind()) &lt;&lt; \" is not a valid Type\";\n  228|      0|        throw ErrorReport(tree) &lt;&lt; kindToString(tree-&gt;kind()) &lt;&lt; \" is not a valid Stmt\";\n  266|      0|        throw ErrorReport(tree) &lt;&lt; kindToString(tree-&gt;kind()) &lt;&lt; \" is not a valid Expr\";\n  333|      0|        throw ErrorReport(tree) &lt;&lt; kindToString(tree-&gt;kind()) &lt;&lt; \" is not a valid ScalarType\";\n  451|      0|        throw ErrorReport(tree) &lt;&lt; \"is not a valid AssignKind\";\n  525|      0|          throw ErrorReport(tree) &lt;&lt; \"BinOp expected 2 subtrees, found \" &lt;&lt; tree-&gt;trees().size();\n  528|      0|        throw ErrorReport(tree) &lt;&lt; kindToString(tree-&gt;kind()) &lt;&lt; \" is not a valid BinOp\";\n  548|      0|          throw ErrorReport(tree) &lt;&lt; \"UnaryOp expected 1 subtree, found \" &lt;&lt; tree-&gt;trees().size();\n 551| 0| throw ErrorReport(tree) &lt;&lt; kindToString(tree-&gt;kind()) &lt;&lt; \" is not a valid UnaryOp\";\n</code></pre>", "body_text": "For robustness of error messages, we should ensure all code paths where we throw an ErrorReport are tested and return meaningful errors.\nAs of today, this is the coverage of the times that we throw ErrorReport for a run of test_jit.py. Format is line, #calls, source code:\ntorch/csrc/jit/script/compiler.cpp:\n  148|      0|        throw ErrorReport(loc) << \"cannot re-assign '\" << name << \"' to a value of type \" << value->kind()\n  153|      0|        throw ErrorReport(loc) << \"cannot re-assign '\" << name << \"' because it has type \" << value->kind()\n  157|      2|        throw ErrorReport(loc) << \"variable '\" << name << \"' previously has type \" << simple_parent->type()->name()\n  192|      4|      throw ErrorReport(range) << \"undefined value \" << ident;\n  248|      0|      throw ErrorReport(loc) << \"attributes must be scalars or lists of scalars\";\n  252|      0|  throw ErrorReport(loc) << \"attributes must be constant expressions\";\n  497|      0|      throw ErrorReport(loc) << \"argument 'chunks' must be a constant\";\n  549|      0|    throw ErrorReport(loc) << \"unknown builtin op\";\n  551|      9|  throw ErrorReport(loc) << \"arguments for call are not valid:\\n\"\n  565|      0|    throw ErrorReport(range) << \"expected a tensor value but found a tuple\";\n  616|      0|        throw ErrorReport(def.params().range()) << \"methods must have a self argument\";\n  713|      0|          throw ErrorReport(stmt) << \"return statements can appear only at the end \"\n  913|      0|      throw ErrorReport(range)\n  926|      0|      throw ErrorReport(stmt)\n  930|      0|      throw ErrorReport(stmt) << \"Iteration variable unpacking is not supported\";\n  934|      0|      throw ErrorReport(targets[0]) << \"Starred unpacking is currently not\"\n  992|      0|        throw ErrorReport(assignee)\n  998|      0|      throw ErrorReport(r)\n 1003|      0|      throw ErrorReport(r) << \"A Starred expression may only appear on the \"\n 1015|      0|        throw ErrorReport(stmt)\n 1042|      3|      throw ErrorReport(stmt)\n 1048|      4|      throw ErrorReport(stmt)\n 1060|      0|          throw ErrorReport(var) << \"Cannot pack a tuple into a non-variable.\";\n 1169|      0|        throw ErrorReport(ident) << \"print doesn't accept any keyword arguments\";\n 1249|      0|        throw ErrorReport(tree) << \"Unexpected starred expansion. File a bug report.\";\n 1284|      0|        throw ErrorReport(tree) << \"NYI: \" << tree;\n 1305|      0|        throw ErrorReport(input) << \"Unrecognized type: \" << type;\n 1364|      0|      throw ErrorReport(loc)\n 1461|      0|        throw ErrorReport(def) << \"duplicate definition of function '\" << name << \"'\";\n 1495|      4|  throw ErrorReport(loc) << value->type()->name() << \" cannot be used as a tuple\";\n 1500|      0|    throw ErrorReport(loc) << \"expected \" << expected << \" \" << what << \" but found \" << actual;\ntorch/csrc/jit/script/compiler.h:\n   41|      0|    throw ErrorReport(loc) << kind() << \" cannot be used as a value\";\n   46|      0|    throw ErrorReport(loc) << \"attribute lookup is not defined on \" << kind();\n   52|      0|    throw ErrorReport(loc) << kind() << \" cannot be used as a tuple\";\n   78|      0|    throw ErrorReport(loc) << \"cannot call a \" << kind();\ntorch/csrc/jit/script/init.cpp:\n   56|      3|      throw ErrorReport(loc) << \"calling a Python function with an incorrect number \"\n   61|      1|        throw ErrorReport(loc) << \"type mismatch at argument \" << i << \": expected \"\n   70|      0|      throw ErrorReport(loc) << \"keyword arguments in Python calls aren't supported\";\n  103|      0|        throw ErrorReport(loc) << \"Python functions can currently only return Tensors\";\n  134|      0|      throw ErrorReport(loc) << \"object has no attribute \" << name;\n  210|      0|  throw ErrorReport(loc) << \"unsupported attribute lookup on \" << py::repr(self) << \".\";\n  276|      2|        throw ErrorReport(loc) << \"attribute '\" << field << \"' of type '\" << typeString(attr) << \"' is not usable in a script method (did you forget to add it __constants__?)\";\n  279|      0|    throw ErrorReport(loc) << \"module has no attribute '\" << field << \"'\";\ntorch/csrc/jit/script/module.cpp:\n   34|      1|    throw ErrorReport(loc) << \" method '\" << callee.name()\n   44|      0|    throw ErrorReport(loc) << failure_messages.str();\ntorch/csrc/jit/script/tree_views.h:\n  169|      0|      throw ErrorReport(tree) << \"Maybe trees can have at most one subtree\";\n  211|      0|        throw ErrorReport(tree) << kindToString(tree->kind()) << \" is not a valid Type\";\n  228|      0|        throw ErrorReport(tree) << kindToString(tree->kind()) << \" is not a valid Stmt\";\n  266|      0|        throw ErrorReport(tree) << kindToString(tree->kind()) << \" is not a valid Expr\";\n  333|      0|        throw ErrorReport(tree) << kindToString(tree->kind()) << \" is not a valid ScalarType\";\n  451|      0|        throw ErrorReport(tree) << \"is not a valid AssignKind\";\n  525|      0|          throw ErrorReport(tree) << \"BinOp expected 2 subtrees, found \" << tree->trees().size();\n  528|      0|        throw ErrorReport(tree) << kindToString(tree->kind()) << \" is not a valid BinOp\";\n  548|      0|          throw ErrorReport(tree) << \"UnaryOp expected 1 subtree, found \" << tree->trees().size();\n 551| 0| throw ErrorReport(tree) << kindToString(tree->kind()) << \" is not a valid UnaryOp\";", "body": "For robustness of error messages, we should ensure all code paths where we throw an ErrorReport are tested and return meaningful errors.\r\n\r\nAs of today, this is the coverage of the times that we `throw ErrorReport` for a run of `test_jit.py`. Format is `line, #calls, source code`:\r\n\r\n```\r\ntorch/csrc/jit/script/compiler.cpp:\r\n  148|      0|        throw ErrorReport(loc) << \"cannot re-assign '\" << name << \"' to a value of type \" << value->kind()\r\n  153|      0|        throw ErrorReport(loc) << \"cannot re-assign '\" << name << \"' because it has type \" << value->kind()\r\n  157|      2|        throw ErrorReport(loc) << \"variable '\" << name << \"' previously has type \" << simple_parent->type()->name()\r\n  192|      4|      throw ErrorReport(range) << \"undefined value \" << ident;\r\n  248|      0|      throw ErrorReport(loc) << \"attributes must be scalars or lists of scalars\";\r\n  252|      0|  throw ErrorReport(loc) << \"attributes must be constant expressions\";\r\n  497|      0|      throw ErrorReport(loc) << \"argument 'chunks' must be a constant\";\r\n  549|      0|    throw ErrorReport(loc) << \"unknown builtin op\";\r\n  551|      9|  throw ErrorReport(loc) << \"arguments for call are not valid:\\n\"\r\n  565|      0|    throw ErrorReport(range) << \"expected a tensor value but found a tuple\";\r\n  616|      0|        throw ErrorReport(def.params().range()) << \"methods must have a self argument\";\r\n  713|      0|          throw ErrorReport(stmt) << \"return statements can appear only at the end \"\r\n  913|      0|      throw ErrorReport(range)\r\n  926|      0|      throw ErrorReport(stmt)\r\n  930|      0|      throw ErrorReport(stmt) << \"Iteration variable unpacking is not supported\";\r\n  934|      0|      throw ErrorReport(targets[0]) << \"Starred unpacking is currently not\"\r\n  992|      0|        throw ErrorReport(assignee)\r\n  998|      0|      throw ErrorReport(r)\r\n 1003|      0|      throw ErrorReport(r) << \"A Starred expression may only appear on the \"\r\n 1015|      0|        throw ErrorReport(stmt)\r\n 1042|      3|      throw ErrorReport(stmt)\r\n 1048|      4|      throw ErrorReport(stmt)\r\n 1060|      0|          throw ErrorReport(var) << \"Cannot pack a tuple into a non-variable.\";\r\n 1169|      0|        throw ErrorReport(ident) << \"print doesn't accept any keyword arguments\";\r\n 1249|      0|        throw ErrorReport(tree) << \"Unexpected starred expansion. File a bug report.\";\r\n 1284|      0|        throw ErrorReport(tree) << \"NYI: \" << tree;\r\n 1305|      0|        throw ErrorReport(input) << \"Unrecognized type: \" << type;\r\n 1364|      0|      throw ErrorReport(loc)\r\n 1461|      0|        throw ErrorReport(def) << \"duplicate definition of function '\" << name << \"'\";\r\n 1495|      4|  throw ErrorReport(loc) << value->type()->name() << \" cannot be used as a tuple\";\r\n 1500|      0|    throw ErrorReport(loc) << \"expected \" << expected << \" \" << what << \" but found \" << actual;\r\ntorch/csrc/jit/script/compiler.h:\r\n   41|      0|    throw ErrorReport(loc) << kind() << \" cannot be used as a value\";\r\n   46|      0|    throw ErrorReport(loc) << \"attribute lookup is not defined on \" << kind();\r\n   52|      0|    throw ErrorReport(loc) << kind() << \" cannot be used as a tuple\";\r\n   78|      0|    throw ErrorReport(loc) << \"cannot call a \" << kind();\r\ntorch/csrc/jit/script/init.cpp:\r\n   56|      3|      throw ErrorReport(loc) << \"calling a Python function with an incorrect number \"\r\n   61|      1|        throw ErrorReport(loc) << \"type mismatch at argument \" << i << \": expected \"\r\n   70|      0|      throw ErrorReport(loc) << \"keyword arguments in Python calls aren't supported\";\r\n  103|      0|        throw ErrorReport(loc) << \"Python functions can currently only return Tensors\";\r\n  134|      0|      throw ErrorReport(loc) << \"object has no attribute \" << name;\r\n  210|      0|  throw ErrorReport(loc) << \"unsupported attribute lookup on \" << py::repr(self) << \".\";\r\n  276|      2|        throw ErrorReport(loc) << \"attribute '\" << field << \"' of type '\" << typeString(attr) << \"' is not usable in a script method (did you forget to add it __constants__?)\";\r\n  279|      0|    throw ErrorReport(loc) << \"module has no attribute '\" << field << \"'\";\r\ntorch/csrc/jit/script/module.cpp:\r\n   34|      1|    throw ErrorReport(loc) << \" method '\" << callee.name()\r\n   44|      0|    throw ErrorReport(loc) << failure_messages.str();\r\ntorch/csrc/jit/script/tree_views.h:\r\n  169|      0|      throw ErrorReport(tree) << \"Maybe trees can have at most one subtree\";\r\n  211|      0|        throw ErrorReport(tree) << kindToString(tree->kind()) << \" is not a valid Type\";\r\n  228|      0|        throw ErrorReport(tree) << kindToString(tree->kind()) << \" is not a valid Stmt\";\r\n  266|      0|        throw ErrorReport(tree) << kindToString(tree->kind()) << \" is not a valid Expr\";\r\n  333|      0|        throw ErrorReport(tree) << kindToString(tree->kind()) << \" is not a valid ScalarType\";\r\n  451|      0|        throw ErrorReport(tree) << \"is not a valid AssignKind\";\r\n  525|      0|          throw ErrorReport(tree) << \"BinOp expected 2 subtrees, found \" << tree->trees().size();\r\n  528|      0|        throw ErrorReport(tree) << kindToString(tree->kind()) << \" is not a valid BinOp\";\r\n  548|      0|          throw ErrorReport(tree) << \"UnaryOp expected 1 subtree, found \" << tree->trees().size();\r\n 551| 0| throw ErrorReport(tree) << kindToString(tree->kind()) << \" is not a valid UnaryOp\";\r\n```"}