{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/347915329", "html_url": "https://github.com/pytorch/pytorch/issues/3238#issuecomment-347915329", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/3238", "id": 347915329, "node_id": "MDEyOklzc3VlQ29tbWVudDM0NzkxNTMyOQ==", "user": {"login": "herlimenezes", "id": 1139726, "node_id": "MDQ6VXNlcjExMzk3MjY=", "avatar_url": "https://avatars2.githubusercontent.com/u/1139726?v=4", "gravatar_id": "", "url": "https://api.github.com/users/herlimenezes", "html_url": "https://github.com/herlimenezes", "followers_url": "https://api.github.com/users/herlimenezes/followers", "following_url": "https://api.github.com/users/herlimenezes/following{/other_user}", "gists_url": "https://api.github.com/users/herlimenezes/gists{/gist_id}", "starred_url": "https://api.github.com/users/herlimenezes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/herlimenezes/subscriptions", "organizations_url": "https://api.github.com/users/herlimenezes/orgs", "repos_url": "https://api.github.com/users/herlimenezes/repos", "events_url": "https://api.github.com/users/herlimenezes/events{/privacy}", "received_events_url": "https://api.github.com/users/herlimenezes/received_events", "type": "User", "site_admin": false}, "created_at": "2017-11-29T16:27:12Z", "updated_at": "2017-11-29T16:27:12Z", "author_association": "NONE", "body_html": "<p>Solved stating<br>\n** usual imports **</p>\n<blockquote>\n<p>torch.manual_seed(1)<br>\ndim = 0</p>\n</blockquote>\n<p>data2 = autograd.Variable(torch.randn(5))<br>\nprint(data2)<br>\nprint(F.softmax(data2, dim))<br>\nprint(F.softmax(data2, dim).sum())<br>\nprint(F.log_softmax(data2, dim))</p>", "body_text": "Solved stating\n** usual imports **\n\ntorch.manual_seed(1)\ndim = 0\n\ndata2 = autograd.Variable(torch.randn(5))\nprint(data2)\nprint(F.softmax(data2, dim))\nprint(F.softmax(data2, dim).sum())\nprint(F.log_softmax(data2, dim))", "body": "Solved stating \r\n** usual imports **\r\n\r\n> torch.manual_seed(1)\r\ndim = 0\r\n\r\ndata2 = autograd.Variable(torch.randn(5))\r\nprint(data2)\r\nprint(F.softmax(data2, dim))\r\nprint(F.softmax(data2, dim).sum())\r\nprint(F.log_softmax(data2, dim))\r\n"}