{"url": "https://api.github.com/repos/pytorch/pytorch/issues/188", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/188/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/188/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/188/events", "html_url": "https://github.com/pytorch/pytorch/issues/188", "id": 186414868, "node_id": "MDU6SXNzdWUxODY0MTQ4Njg=", "number": 188, "title": "Calling `cuda()` et al. on deserialized cuda module segfaults", "user": {"login": "adamlerer", "id": 5702157, "node_id": "MDQ6VXNlcjU3MDIxNTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5702157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adamlerer", "html_url": "https://github.com/adamlerer", "followers_url": "https://api.github.com/users/adamlerer/followers", "following_url": "https://api.github.com/users/adamlerer/following{/other_user}", "gists_url": "https://api.github.com/users/adamlerer/gists{/gist_id}", "starred_url": "https://api.github.com/users/adamlerer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adamlerer/subscriptions", "organizations_url": "https://api.github.com/users/adamlerer/orgs", "repos_url": "https://api.github.com/users/adamlerer/repos", "events_url": "https://api.github.com/users/adamlerer/events{/privacy}", "received_events_url": "https://api.github.com/users/adamlerer/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 424131847, "node_id": "MDU6TGFiZWw0MjQxMzE4NDc=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/bug", "name": "bug", "color": "b60205", "default": true}, {"id": 443484135, "node_id": "MDU6TGFiZWw0NDM0ODQxMzU=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/high%20priority", "name": "high priority", "color": "F22613", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2016-10-31T22:22:55Z", "updated_at": "2016-11-01T18:32:05Z", "closed_at": "2016-11-01T18:32:05Z", "author_association": "CONTRIBUTOR", "body_html": "<pre><code>import torch.cuda\nimport torch.nn as nn\n\nprint(\"serdes linear\")\nlin = nn.Linear(5,3)\nlin.cuda() # necessary\nwith open('lin.pt', 'wb') as f: torch.save(lin, f)\nwith open('lin.pt', 'rb') as f: lin2 = torch.load(f)\nlin2.cuda()\n# segfault or cuda error\n\nprint(\"serdes rnn\")\nrnn = nn.RNN(5,3,2)\nrnn.cuda() # necessary\nwith open('rnn.pt', 'wb') as f: torch.save(rnn, f)\nwith open('rnn.pt', 'rb') as f: rnn2 = torch.load(f)\nrnn2.cuda()\n# segfault or cuda error\n\nprint(\"done\")\n</code></pre>", "body_text": "import torch.cuda\nimport torch.nn as nn\n\nprint(\"serdes linear\")\nlin = nn.Linear(5,3)\nlin.cuda() # necessary\nwith open('lin.pt', 'wb') as f: torch.save(lin, f)\nwith open('lin.pt', 'rb') as f: lin2 = torch.load(f)\nlin2.cuda()\n# segfault or cuda error\n\nprint(\"serdes rnn\")\nrnn = nn.RNN(5,3,2)\nrnn.cuda() # necessary\nwith open('rnn.pt', 'wb') as f: torch.save(rnn, f)\nwith open('rnn.pt', 'rb') as f: rnn2 = torch.load(f)\nrnn2.cuda()\n# segfault or cuda error\n\nprint(\"done\")", "body": "```\r\nimport torch.cuda\r\nimport torch.nn as nn\r\n\r\nprint(\"serdes linear\")\r\nlin = nn.Linear(5,3)\r\nlin.cuda() # necessary\r\nwith open('lin.pt', 'wb') as f: torch.save(lin, f)\r\nwith open('lin.pt', 'rb') as f: lin2 = torch.load(f)\r\nlin2.cuda()\r\n# segfault or cuda error\r\n\r\nprint(\"serdes rnn\")\r\nrnn = nn.RNN(5,3,2)\r\nrnn.cuda() # necessary\r\nwith open('rnn.pt', 'wb') as f: torch.save(rnn, f)\r\nwith open('rnn.pt', 'rb') as f: rnn2 = torch.load(f)\r\nrnn2.cuda()\r\n# segfault or cuda error\r\n\r\nprint(\"done\")\r\n```"}