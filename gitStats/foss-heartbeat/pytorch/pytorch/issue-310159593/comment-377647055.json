{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/377647055", "html_url": "https://github.com/pytorch/pytorch/issues/6153#issuecomment-377647055", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/6153", "id": 377647055, "node_id": "MDEyOklzc3VlQ29tbWVudDM3NzY0NzA1NQ==", "user": {"login": "jamesr66a", "id": 4685384, "node_id": "MDQ6VXNlcjQ2ODUzODQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/4685384?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamesr66a", "html_url": "https://github.com/jamesr66a", "followers_url": "https://api.github.com/users/jamesr66a/followers", "following_url": "https://api.github.com/users/jamesr66a/following{/other_user}", "gists_url": "https://api.github.com/users/jamesr66a/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamesr66a/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamesr66a/subscriptions", "organizations_url": "https://api.github.com/users/jamesr66a/orgs", "repos_url": "https://api.github.com/users/jamesr66a/repos", "events_url": "https://api.github.com/users/jamesr66a/events{/privacy}", "received_events_url": "https://api.github.com/users/jamesr66a/received_events", "type": "User", "site_admin": false}, "created_at": "2018-03-30T23:43:28Z", "updated_at": "2018-03-30T23:43:28Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Short of changing the semantics of the language all the way down to the execution engine, I think I'm going to implement a restricted subset of starred functionality. I'm going to make a desugaring pass that will match the following scenario:</p>\n<ul>\n<li>We have a method invocation with # outputs &gt; 1 that is in an assignment statement where lhs has only a single identifier. E.g. <code>myouts = someMethodThatReturnsTwoValues()</code></li>\n<li>That single identifier is <em>only</em> used in 0 or more unary star expressions, e.g. <code>someOtherMethod(*myouts)</code></li>\n</ul>\n<p>Since we know the number of outputs from the first method, we can desugar this scenario at compile time by creating dummy identifiers for the N values in the tuple. After this desugaring pass, the compiler would see something like:</p>\n<pre><code>__1, __2 = someMethodThatReturnsTwoValues()\nsomeOtherMethod(__1, __2)\n</code></pre>", "body_text": "Short of changing the semantics of the language all the way down to the execution engine, I think I'm going to implement a restricted subset of starred functionality. I'm going to make a desugaring pass that will match the following scenario:\n\nWe have a method invocation with # outputs > 1 that is in an assignment statement where lhs has only a single identifier. E.g. myouts = someMethodThatReturnsTwoValues()\nThat single identifier is only used in 0 or more unary star expressions, e.g. someOtherMethod(*myouts)\n\nSince we know the number of outputs from the first method, we can desugar this scenario at compile time by creating dummy identifiers for the N values in the tuple. After this desugaring pass, the compiler would see something like:\n__1, __2 = someMethodThatReturnsTwoValues()\nsomeOtherMethod(__1, __2)", "body": "Short of changing the semantics of the language all the way down to the execution engine, I think I'm going to implement a restricted subset of starred functionality. I'm going to make a desugaring pass that will match the following scenario:\r\n\r\n- We have a method invocation with # outputs > 1 that is in an assignment statement where lhs has only a single identifier. E.g. `myouts = someMethodThatReturnsTwoValues()`\r\n- That single identifier is *only* used in 0 or more unary star expressions, e.g. `someOtherMethod(*myouts)`\r\n\r\nSince we know the number of outputs from the first method, we can desugar this scenario at compile time by creating dummy identifiers for the N values in the tuple. After this desugaring pass, the compiler would see something like:\r\n\r\n```\r\n__1, __2 = someMethodThatReturnsTwoValues()\r\nsomeOtherMethod(__1, __2)"}