{"url": "https://api.github.com/repos/pytorch/pytorch/issues/6153", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/6153/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/6153/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/6153/events", "html_url": "https://github.com/pytorch/pytorch/issues/6153", "id": 310159593, "node_id": "MDU6SXNzdWUzMTAxNTk1OTM=", "number": 6153, "title": "[jit][script] Implement tuples & starred unpacking", "user": {"login": "jamesr66a", "id": 4685384, "node_id": "MDQ6VXNlcjQ2ODUzODQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/4685384?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamesr66a", "html_url": "https://github.com/jamesr66a", "followers_url": "https://api.github.com/users/jamesr66a/followers", "following_url": "https://api.github.com/users/jamesr66a/following{/other_user}", "gists_url": "https://api.github.com/users/jamesr66a/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamesr66a/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamesr66a/subscriptions", "organizations_url": "https://api.github.com/users/jamesr66a/orgs", "repos_url": "https://api.github.com/users/jamesr66a/repos", "events_url": "https://api.github.com/users/jamesr66a/events{/privacy}", "received_events_url": "https://api.github.com/users/jamesr66a/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 679953983, "node_id": "MDU6TGFiZWw2Nzk5NTM5ODM=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/jit", "name": "jit", "color": "c5def5", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-03-30T20:20:45Z", "updated_at": "2018-04-17T18:23:47Z", "closed_at": "2018-04-17T18:23:47Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Variadic arguments are a good way to deal with inputs/outputs that change w/ hyperparameters, e.g. number of layers, number of models in an ensemble. We should support tuples of tensors as return values and allow unpacking of them into the flattened inputs to a model invocation. E.g.:</p>\n<pre><code>            encoder_outs = self.encoder_ens(src_tokens, src_lengths)\n            for i in range(20):\n                decoder_outs = self.decoder_ens(src_tokens.t(), i, *encoder_outs)\n\n            return decoder_outs\n</code></pre>\n<p>where encoder_outs is a tuple of tensor</p>", "body_text": "Variadic arguments are a good way to deal with inputs/outputs that change w/ hyperparameters, e.g. number of layers, number of models in an ensemble. We should support tuples of tensors as return values and allow unpacking of them into the flattened inputs to a model invocation. E.g.:\n            encoder_outs = self.encoder_ens(src_tokens, src_lengths)\n            for i in range(20):\n                decoder_outs = self.decoder_ens(src_tokens.t(), i, *encoder_outs)\n\n            return decoder_outs\n\nwhere encoder_outs is a tuple of tensor", "body": "Variadic arguments are a good way to deal with inputs/outputs that change w/ hyperparameters, e.g. number of layers, number of models in an ensemble. We should support tuples of tensors as return values and allow unpacking of them into the flattened inputs to a model invocation. E.g.:\r\n\r\n```\r\n            encoder_outs = self.encoder_ens(src_tokens, src_lengths)\r\n            for i in range(20):\r\n                decoder_outs = self.decoder_ens(src_tokens.t(), i, *encoder_outs)\r\n\r\n            return decoder_outs\r\n```\r\n\r\nwhere encoder_outs is a tuple of tensor"}