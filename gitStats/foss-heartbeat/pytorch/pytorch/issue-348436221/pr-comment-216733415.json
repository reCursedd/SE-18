{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/216733415", "pull_request_review_id": 154283631, "id": 216733415, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNjczMzQxNQ==", "diff_hunk": "@@ -251,6 +256,357 @@ std::ostream& operator<<(std::ostream & out, const Graph & g) {\n   return out;\n }\n \n+class PrettyPrintPass {\n+  Graph& graph_;\n+\n+  // When printing a name if there is a conflict with an existing name in the\n+  // graph, record the value -> new generated name mapping\n+  std::unordered_map<const Value*, const Value*> aliases_;\n+\n+  // The Graph already tracks unique_names_, this is just for additional ones\n+  // generated during printing\n+  std::unordered_map<std::string, const Value*> generated_names_;\n+\n+  // Cache of value names\n+  std::unordered_map<const Value*, std::string> value_names_;\n+\n+  template<class T>\n+  void dualIterator(\n+    at::ArrayRef<T> list_a,\n+    at::ArrayRef<T> list_b,\n+    const size_t offset_a,\n+    const size_t offset_b,\n+    std::function<void(T, T)> action\n+  ) const {\n+    auto it_a = list_a.begin() + offset_a;\n+    auto it_b = list_b.begin() + offset_b;\n+\n+    for (; it_a != list_a.end() && it_b != list_b.end(); ++it_a, ++it_b) {\n+      action(*it_a, *it_b);\n+    }\n+  }\n+\n+  std::ostream& printValueList(\n+    std::ostream & out,\n+    at::ArrayRef<const Value*> list\n+  ) {\n+    out << \"(\";\n+    auto delimiter = \"\";\n+    for (const auto* value : list) {\n+      out << delimiter;\n+      printValue(out, value);\n+      delimiter = \", \";\n+    }\n+    out << \")\";\n+    return out;\n+  }\n+\n+  void printAssignment(\n+    std::ostream& out,\n+    const Value* lhs,\n+    const Value* rhs,\n+    const size_t level\n+  ) {\n+    indent(out, level);\n+    printValue(out, lhs);\n+    out << \" = \";\n+    printValue(out, rhs);\n+    out << std::endl;\n+  }\n+\n+  std::ostream& printIf(\n+    std::ostream & out,\n+    const Node* node,\n+    const size_t level\n+  ) {\n+    indent(out, level);\n+    out << \"if \";\n+    const auto if_block = node->blocks()[0];\n+    const auto else_block = node->blocks()[1];\n+    printValue(out, node->inputs()[0]);\n+    out << \":\" << std::endl;\n+\n+    // Print node contents\n+    printBlock(out, if_block, level + 1);\n+\n+    // Print if block output\n+    dualIterator<const Value*>(\n+      node->outputs(),\n+      if_block->outputs(),\n+      0, 0,\n+      [&](const Value* node_output, const Value* return_input) {\n+        printAssignment(out, node_output, return_input, level + 1);\n+      }\n+    );\n+\n+    indent(out, level);\n+    out << \"else:\" << std::endl;\n+    printBlock(out, else_block, level + 1);\n+    dualIterator<const Value*>(\n+      node->outputs(),\n+      else_block->outputs(),\n+      0, 0,\n+      [&](const Value* node_output, const Value* return_input) {\n+        printAssignment(out, node_output, return_input, level + 1);\n+      }\n+    );\n+\n+    return out;\n+  }\n+\n+  bool isValueUsedLater(\n+    const Value* val\n+  ) const {\n+    if (aliases_.find(val) != aliases_.end()) {\n+      return true;\n+    }\n+    return val->uses().size() > 0;\n+  }\n+\n+  std::ostream& printLoop(\n+    std::ostream & out,\n+    const Node* node,\n+    const size_t level\n+  ) {\n+    const auto body_block = node->blocks()[0];\n+    aliases_[body_block->inputs()[0]] = body_block->inputs()[0];\n+\n+    // Add temporaries for loop-carried dependencies\n+    dualIterator<const Value*>(\n+      node->inputs(),\n+      body_block->inputs(),\n+      1, 0,\n+      [&](const Value* node_input, const Value* param_output) {\n+        if (isValueUsedLater(param_output)) {\n+          printAssignment(out, param_output, node_input, level);\n+        }\n+      }\n+    );\n+\n+    dualIterator<const Value*>(\n+      node->outputs(),\n+      node->inputs(),\n+      0, 2,\n+      [&](const Value* node_output, const Value* return_input) {\n+        if (isValueUsedLater(node_output)) {\n+          printAssignment(out, node_output, return_input, level);\n+        }\n+      }\n+    );\n+\n+    // Loop header\n+    indent(out, level);\n+    out << \"while \";\n+    printValue(out, body_block->inputs()[0]);\n+    out << \":\";\n+    out << std::endl;", "path": "torch/csrc/jit/ir.cpp", "position": null, "original_position": 278, "commit_id": "18b69e2bcd43668ecfbec43f1f39c956378a9608", "original_commit_id": "8cd596a427051487ad3c148fa3ab3dffc9253f7e", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "nit: it's better to use `\"\\n\"` instead of `std::endl`, because `endl` forces an IO buffer flush. We don't need it here, so better to avoid it.", "created_at": "2018-09-11T16:26:03Z", "updated_at": "2018-11-23T15:50:59Z", "html_url": "https://github.com/pytorch/pytorch/pull/10319#discussion_r216733415", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/10319", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/216733415"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/10319#discussion_r216733415"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/10319"}}, "body_html": "<p>nit: it's better to use <code>\"\\n\"</code> instead of <code>std::endl</code>, because <code>endl</code> forces an IO buffer flush. We don't need it here, so better to avoid it.</p>", "body_text": "nit: it's better to use \"\\n\" instead of std::endl, because endl forces an IO buffer flush. We don't need it here, so better to avoid it."}