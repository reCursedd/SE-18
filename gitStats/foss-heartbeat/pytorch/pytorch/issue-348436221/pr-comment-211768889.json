{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/211768889", "pull_request_review_id": 148254687, "id": 211768889, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMTc2ODg4OQ==", "diff_hunk": "@@ -251,6 +255,322 @@ std::ostream& operator<<(std::ostream & out, const Graph & g) {\n   return out;\n }\n \n+struct PrettyPrintPass {\n+  std::unordered_map<std::string, std::string> aliases;\n+  std::unordered_set<const Node*> seen_nodes;\n+  std::unordered_map<std::string, std::pair<const Node*, Symbol>> constants;\n+  std::unordered_set<const Value*> unresolved_values;\n+};\n+\n+template<class T>\n+static void dualIterator(\n+  at::ArrayRef<T> list_a,\n+  at::ArrayRef<T> list_b,\n+  const size_t offset_a,\n+  const size_t offset_b,\n+  std::function<void(T, T)> action\n+) {\n+  auto it_a = list_a.begin() + offset_a;\n+  auto it_b = list_b.begin() + offset_b;\n+\n+  for (; it_a != list_a.end() && it_b != list_b.end(); ++it_a, ++it_b) {\n+    action(*it_a, *it_b);\n+  }\n+}\n+\n+static std::ostream& prettyPrintNode(\n+  std::ostream & out,\n+  const Node* root,\n+  const size_t level,\n+  PrettyPrintPass& pass\n+);\n+\n+static std::ostream& prettyPrintValue(\n+  std::ostream & out,\n+  const Value* val,\n+  PrettyPrintPass& pass\n+) {\n+  const auto unique = val->uniqueName();\n+  if (val->node()->kind() == prim::Constant) {\n+    const auto const_value = pass.constants.find(unique);\n+    if (const_value != pass.constants.end()) {\n+      printAttributeValue(out, const_value->second.second, const_value->second.first);\n+    } else {\n+      AT_ERROR(\"Could not find a constant for value: \", unique);\n+    }\n+  } else {\n+    auto name = unique;\n+\n+    auto aliased_name = pass.aliases.find(unique);\n+    if (aliased_name != pass.aliases.end()) {\n+      name = aliased_name->second;\n+    }\n+\n+    if (isdigit(name.at(0))) {\n+      out << \"t\";\n+    } else {\n+      // Make unique name a valid variable name (e.g. a.1 -> a1)\n+      name.erase(std::remove(name.begin(), name.end(), '.'), name.end());", "path": "torch/csrc/jit/ir.cpp", "position": null, "original_position": 187, "commit_id": "18b69e2bcd43668ecfbec43f1f39c956378a9608", "original_commit_id": "a271d2b0ed13d0574a8035315125fe713b41c9fe", "user": {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, "body": "Generally, anytime you modify a name,  you are going to need to make sure it is still unique. Typically this is done by keeping a set of unique names, and when you get a conflict in this set after modifying a name suffixing the name with a unique number, and checking that the new name is now unique.", "created_at": "2018-08-21T21:39:15Z", "updated_at": "2018-11-23T15:49:42Z", "html_url": "https://github.com/pytorch/pytorch/pull/10319#discussion_r211768889", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/10319", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/211768889"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/10319#discussion_r211768889"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/10319"}}, "body_html": "<p>Generally, anytime you modify a name,  you are going to need to make sure it is still unique. Typically this is done by keeping a set of unique names, and when you get a conflict in this set after modifying a name suffixing the name with a unique number, and checking that the new name is now unique.</p>", "body_text": "Generally, anytime you modify a name,  you are going to need to make sure it is still unique. Typically this is done by keeping a set of unique names, and when you get a conflict in this set after modifying a name suffixing the name with a unique number, and checking that the new name is now unique.", "in_reply_to_id": 211767620}