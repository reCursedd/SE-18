{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/208346634", "pull_request_review_id": 144135823, "id": 208346634, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODM0NjYzNA==", "diff_hunk": "@@ -250,6 +250,175 @@ std::ostream& operator<<(std::ostream & out, const Graph & g) {\n   return out;\n }\n \n+std::string getBaseName(std::string str) {\n+  return str.substr(0, str.find_first_of('.'));\n+}\n+\n+std::ostream& prettyPrintValue(std::ostream & out, const Value* val) {\n+  auto scope = val->node()->scope();\n+  auto unique = val->uniqueName();\n+  if (val->node()->kind() == prim::Constant) {\n+    if (scope->hasConstant(unique)) {\n+      out << scope->getConstant(unique);\n+    } else {\n+      throw std::runtime_error(\"const not found for : \" + unique);\n+    }\n+  } else {\n+    auto name = val->readableName();\n+    if (scope->hasNameAlias(unique)) {\n+      name = scope->getNameAlias(unique);\n+    }\n+\n+    if (isdigit(name.at(0))) {\n+      out << \"%\";\n+    }\n+    out << name;\n+  }\n+return out;\n+}\n+\n+std::ostream& prettyPrintInputs(std::ostream & out, const Node* node) {\n+  out << \"(\";\n+  auto delimiter = \"\";\n+  for (auto in_value : node->inputs()) {\n+    out << delimiter;\n+    prettyPrintValue(out, in_value);\n+    delimiter = \", \";\n+  }\n+  out << \")\";\n+  return out;\n+}\n+\n+std::ostream& prettyPrintNodeVisitor(std::ostream & out, const Node* root, int level);\n+\n+std::ostream& prettyPrintBlockVisitor(std::ostream & out, const Block* root, int level) {\n+  for (auto node : root->nodes()) {\n+    prettyPrintNodeVisitor(out, node, level);\n+  }\n+\n+  prettyPrintNodeVisitor(out, root->return_node(), level);\n+\n+  return out;\n+}\n+\n+// Handles iterating over nodes/subblocks\n+std::ostream& prettyPrintNodeVisitor(std::ostream & out, const Node* node, int level) {\n+  if (node->kind() == prim::Constant) {\n+    // Add constant to current scope map\n+    node->scope()->addConstant(\n+      node->outputs()[0]->uniqueName(),\n+      node->i(node->attributeNames()[0])\n+    );\n+    return out;\n+  }\n+\n+  if (node->kind() == prim::Return) {\n+    // Handled elsewhere, do nothing\n+    return out;\n+  }\n+\n+  indent(out, level);\n+  int new_level = level + 1;\n+\n+  // if there are subblocks on this node, visit them\n+  switch (node->kind()) {\n+  case prim::Loop: {\n+    out << \"while \";", "path": "torch/csrc/jit/ir.cpp", "position": null, "original_position": 77, "commit_id": "18b69e2bcd43668ecfbec43f1f39c956378a9608", "original_commit_id": "e1bbb0015f991078439f9eec43a30283da0f484a", "user": {"login": "goldsborough", "id": 6429851, "node_id": "MDQ6VXNlcjY0Mjk4NTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/6429851?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goldsborough", "html_url": "https://github.com/goldsborough", "followers_url": "https://api.github.com/users/goldsborough/followers", "following_url": "https://api.github.com/users/goldsborough/following{/other_user}", "gists_url": "https://api.github.com/users/goldsborough/gists{/gist_id}", "starred_url": "https://api.github.com/users/goldsborough/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goldsborough/subscriptions", "organizations_url": "https://api.github.com/users/goldsborough/orgs", "repos_url": "https://api.github.com/users/goldsborough/repos", "events_url": "https://api.github.com/users/goldsborough/events{/privacy}", "received_events_url": "https://api.github.com/users/goldsborough/received_events", "type": "User", "site_admin": false}, "body": "I feel like these huge switch cases make it *extremely* easy to forget the `break` at the end. Maybe put each into a little helper function? Or some other solution to this problem", "created_at": "2018-08-07T18:54:03Z", "updated_at": "2018-11-23T15:48:55Z", "html_url": "https://github.com/pytorch/pytorch/pull/10319#discussion_r208346634", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/10319", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/208346634"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/10319#discussion_r208346634"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/10319"}}, "body_html": "<p>I feel like these huge switch cases make it <em>extremely</em> easy to forget the <code>break</code> at the end. Maybe put each into a little helper function? Or some other solution to this problem</p>", "body_text": "I feel like these huge switch cases make it extremely easy to forget the break at the end. Maybe put each into a little helper function? Or some other solution to this problem"}