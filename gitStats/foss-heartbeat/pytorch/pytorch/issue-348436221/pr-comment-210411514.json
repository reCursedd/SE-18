{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/210411514", "pull_request_review_id": 146622940, "id": 210411514, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMDQxMTUxNA==", "diff_hunk": "@@ -250,6 +254,220 @@ std::ostream& operator<<(std::ostream & out, const Graph & g) {\n   return out;\n }\n \n+typedef std::unordered_map<std::string, std::string> alias_list;\n+typedef std::unordered_map<std::string, std::pair<const Node*, Symbol>> constant_list;\n+\n+std::ostream& prettyPrintValue(\n+  std::ostream & out,\n+  const Value* val,\n+  constant_list& constants,\n+  alias_list& aliases\n+) {\n+  auto unique = val->uniqueName();\n+  if (val->node()->kind() == prim::Constant) {\n+    auto const_value = constants.find(unique);\n+    if (const_value != constants.end()) {\n+      printAttributeValue(out, const_value->second.second, const_value->second.first);\n+    } else {\n+      AT_ERROR(\"Could not find a constant\");\n+    }\n+  } else {\n+    auto name = val->readableName();\n+\n+    auto aliased_name = aliases.find(unique);\n+    if (aliased_name != aliases.end()) {\n+      name = aliased_name->second;\n+    }\n+\n+    if (isdigit(name.at(0))) {\n+      out << \"%\";\n+    }\n+    out << name;\n+  }\n+return out;\n+}\n+\n+std::ostream& prettyPrintInputs(\n+  std::ostream & out,\n+  const Node* node,\n+  constant_list& constants,\n+  alias_list& aliases\n+) {\n+  out << \"(\";\n+  auto delimiter = \"\";\n+  for (const auto* in_value : node->inputs()) {\n+    out << delimiter;\n+    prettyPrintValue(out, in_value, constants, aliases);\n+    delimiter = \", \";\n+  }\n+  out << \")\";\n+  return out;\n+}\n+\n+std::ostream& prettyPrintNodeVisitor(\n+  std::ostream & out,\n+  const Node* root,\n+  int level,\n+  constant_list& constants,\n+  alias_list& aliases\n+);\n+\n+std::ostream& prettyPrintBlockVisitor(\n+  std::ostream & out,\n+  const Block* root,\n+  int level,\n+  constant_list& constants,\n+  alias_list& aliases\n+) {\n+  for (const auto* node : root->nodes()) {\n+    prettyPrintNodeVisitor(out, node, level, constants, aliases);\n+  }\n+\n+  prettyPrintNodeVisitor(out, root->return_node(), level, constants, aliases);\n+\n+  return out;\n+}\n+\n+std::ostream& prettyPrintIf(\n+  std::ostream & out,\n+  const Node* node,\n+  int level,\n+  constant_list& constants,\n+  alias_list& aliases\n+) {\n+  out << \"if \";\n+  auto if_block = node->blocks()[0];\n+  auto else_block = node->blocks()[1];\n+  prettyPrintValue(out, node->inputs()[0], constants, aliases);\n+  out << \":\" << std::endl;\n+\n+  // Print node contents\n+  prettyPrintBlockVisitor(out, if_block, level + 1, constants, aliases);\n+  // Print if block output\n+  int if_count = 0;\n+  for (const auto* output_value : node->outputs()) {\n+    indent(out, level + 1);\n+    prettyPrintValue(out, output_value, constants, aliases);\n+    out << \" = \";\n+    prettyPrintValue(out, if_block->return_node()->inputs()[if_count++], constants, aliases);\n+    out << std::endl;\n+    if_count++;\n+  }\n+\n+  indent(out, level);\n+  out << \"else:\" << std::endl;\n+  prettyPrintBlockVisitor(out, else_block, level + 1, constants, aliases);\n+  int else_count = 0;\n+  for (const auto* output_value : node->outputs()) {\n+    indent(out, level + 1);\n+    out << output_value->readableName();\n+    out << \" = \";\n+    prettyPrintValue(out, else_block->return_node()->inputs()[else_count], constants, aliases);\n+    out << std::endl;\n+    else_count++;\n+  }\n+\n+  return out;\n+}\n+\n+std::ostream& prettyPrintLoop(\n+  std::ostream & out,\n+  const Node* node,\n+  int level,\n+  constant_list& constants,\n+  alias_list& aliases\n+) {\n+  out << \"while \";\n+  prettyPrintValue(out, node->inputs()[1], constants, aliases);\n+\n+  out << std::endl;\n+  auto body_block = node->blocks()[0];\n+\n+  // Offset to skip loop trip count\n+  int count = 1;\n+  for (const auto* block_param : body_block->param_node()->outputs())  {\n+    // add names to map\n+    aliases[block_param->uniqueName()] = node->inputs()[count]->readableName();", "path": "torch/csrc/jit/ir.cpp", "position": null, "original_position": 265, "commit_id": "18b69e2bcd43668ecfbec43f1f39c956378a9608", "original_commit_id": "9a511862d3a5fed05d413f2c926c46be5a6139df", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "Are you saying that the frontend will never generate core in this order? But don't you agree that it can generate:\r\n\r\n```\r\nWhile(cond, carry_init)\r\n  graph (carry_in) {\r\n    new_cond = Op2(carry_in) // now first\r\n    carry_out = Op(carry_in) // now second\r\n    return (new_cond, carry_out)\r\n  }\r\n```\r\n\r\nfrom \r\n\r\n```\r\nwhile cond:\r\n  cond = carry_init * 2\r\n  carry_init = carry_init * 2\r\n```\r\n\r\nAnd don't you agree that it is a valid optimization to reorder these two instructions? Then the bad graph can arise. Isn't it a design goal for the pretty-printer to work on optimized graphs?", "created_at": "2018-08-15T21:13:25Z", "updated_at": "2018-11-23T15:49:27Z", "html_url": "https://github.com/pytorch/pytorch/pull/10319#discussion_r210411514", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/10319", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/210411514"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/10319#discussion_r210411514"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/10319"}}, "body_html": "<p>Are you saying that the frontend will never generate core in this order? But don't you agree that it can generate:</p>\n<pre><code>While(cond, carry_init)\n  graph (carry_in) {\n    new_cond = Op2(carry_in) // now first\n    carry_out = Op(carry_in) // now second\n    return (new_cond, carry_out)\n  }\n</code></pre>\n<p>from</p>\n<pre><code>while cond:\n  cond = carry_init * 2\n  carry_init = carry_init * 2\n</code></pre>\n<p>And don't you agree that it is a valid optimization to reorder these two instructions? Then the bad graph can arise. Isn't it a design goal for the pretty-printer to work on optimized graphs?</p>", "body_text": "Are you saying that the frontend will never generate core in this order? But don't you agree that it can generate:\nWhile(cond, carry_init)\n  graph (carry_in) {\n    new_cond = Op2(carry_in) // now first\n    carry_out = Op(carry_in) // now second\n    return (new_cond, carry_out)\n  }\n\nfrom\nwhile cond:\n  cond = carry_init * 2\n  carry_init = carry_init * 2\n\nAnd don't you agree that it is a valid optimization to reorder these two instructions? Then the bad graph can arise. Isn't it a design goal for the pretty-printer to work on optimized graphs?", "in_reply_to_id": 210165180}