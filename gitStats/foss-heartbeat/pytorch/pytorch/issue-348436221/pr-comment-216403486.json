{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/216403486", "pull_request_review_id": 153869931, "id": 216403486, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNjQwMzQ4Ng==", "diff_hunk": "@@ -251,6 +256,335 @@ std::ostream& operator<<(std::ostream & out, const Graph & g) {\n   return out;\n }\n \n+class PrettyPrintPass {\n+  Graph& graph_;\n+\n+  // When printing a name if there is a conflict with an existing name in the\n+  // graph, record the value -> new generated name mapping\n+  std::unordered_map<const Value*, const Value*> aliases_;\n+  // std::unordered_map<const Value*, std::string> aliases_;\n+\n+  // The Graph already tracks unique_names_, this is just for additional ones\n+  // generated during printing\n+  std::unordered_map<std::string, const Value*> generated_names_;\n+\n+  template<class T>\n+  void dualIterator(\n+    at::ArrayRef<T> list_a,\n+    at::ArrayRef<T> list_b,\n+    const size_t offset_a,\n+    const size_t offset_b,\n+    std::function<void(T, T)> action\n+  ) const {\n+    auto it_a = list_a.begin() + offset_a;\n+    auto it_b = list_b.begin() + offset_b;\n+\n+    for (; it_a != list_a.end() && it_b != list_b.end(); ++it_a, ++it_b) {\n+      action(*it_a, *it_b);\n+    }\n+  }\n+\n+  std::ostream& printValueList(\n+    std::ostream & out,\n+    at::ArrayRef<const Value*> list\n+  ) {\n+    out << \"(\";\n+    auto delimiter = \"\";\n+    for (const auto* value : list) {\n+      out << delimiter;\n+      printValue(out, value);\n+      delimiter = \", \";\n+    }\n+    out << \")\";\n+    return out;\n+  }\n+\n+  void printAssignment(\n+    std::ostream& out,\n+    const Value* lhs,\n+    const Value* rhs,\n+    const size_t level\n+  ) {\n+    indent(out, level);\n+    printValue(out, lhs);\n+    out << \" = \";\n+    printValue(out, rhs);\n+    out << std::endl;\n+  }\n+\n+  std::ostream& printIf(\n+    std::ostream & out,\n+    const Node* node,\n+    const size_t level\n+  ) {\n+    indent(out, level);\n+    out << \"if \";\n+    const auto if_block = node->blocks()[0];\n+    const auto else_block = node->blocks()[1];\n+    printValue(out, node->inputs()[0]);\n+    out << \":\" << std::endl;\n+\n+    // Print node contents\n+    printBlock(out, if_block, level + 1);\n+\n+    // Print if block output\n+    dualIterator<const Value*>(\n+      node->outputs(),\n+      if_block->outputs(),\n+      0, 0,\n+      [&](const Value* node_output, const Value* return_input) {\n+        printAssignment(out, node_output, return_input, level + 1);\n+      }\n+    );\n+\n+    indent(out, level);\n+    out << \"else:\" << std::endl;\n+    printBlock(out, else_block, level + 1);\n+    dualIterator<const Value*>(\n+      node->outputs(),\n+      else_block->outputs(),\n+      0, 0,\n+      [&](const Value* node_output, const Value* return_input) {\n+        printAssignment(out, node_output, return_input, level + 1);\n+      }\n+    );\n+\n+    return out;\n+  }\n+\n+  bool isValueUsedLater(\n+    const Value* val\n+  ) const {\n+    if (aliases_.find(val) != aliases_.end()) {\n+      return true;\n+    }\n+    return val->uses().size() > 0;\n+  }\n+\n+  std::ostream& printLoop(\n+    std::ostream & out,\n+    const Node* node,\n+    const size_t level\n+  ) {\n+    const auto body_block = node->blocks()[0];\n+    // aliases_[body_block->inputs()[0]] = body_block->inputs()[0]->uniqueName();\n+    aliases_[body_block->inputs()[0]] = body_block->inputs()[0];\n+\n+    // The block outputs are not live after the end of the block, so we can use\n+    // them as the value names and avoid printing assignments\n+    dualIterator<const Value*>(\n+      node->outputs(),\n+      body_block->outputs(),\n+      0, 1,\n+      [&](const Value* node_output, const Value* return_input) {\n+        aliases_[node_output] = return_input;\n+      }\n+    );\n+\n+    // Add temporaries for loop-carried dependencies\n+    dualIterator<const Value*>(\n+      node->inputs(),\n+      body_block->inputs(),\n+      1, 0,\n+      [&](const Value* node_input, const Value* param_output) {\n+        if (isValueUsedLater(param_output)) {\n+          printAssignment(out, param_output, node_input, level);\n+        }\n+      }\n+    );\n+\n+    // Loop header\n+    indent(out, level);\n+    out << \"while \";\n+    printValue(out, body_block->inputs()[0]);\n+    out << \":\";\n+    out << std::endl;\n+\n+    // Loop body\n+    printBlock(out, body_block, level + 1);\n+\n+    // Re-assign block outputs to inputs for next iteration\n+    dualIterator<const Value*>(\n+      body_block->inputs(),\n+      body_block->outputs(),\n+      0, 0,\n+      [&](const Value* param_output, const Value* return_input) {\n+        if (isValueUsedLater(param_output)) {\n+          printAssignment(out, param_output, return_input, level + 1);\n+        }\n+      }\n+    );\n+\n+    return out;\n+  }\n+\n+  std::ostream& printNode(\n+    std::ostream & out,\n+    const Node* node,\n+    const size_t level\n+  ) {\n+    // if there are subblocks on this node, visit them\n+    switch (node->kind()) {\n+    case prim::Return:\n+      // Handled elsewhere, do nothing\n+      break;\n+    case prim::Constant:\n+      break;\n+    case prim::Loop:\n+      printLoop(out, node, level);\n+      break;\n+    case prim::If:\n+      printIf(out, node, level);\n+      break;\n+    default:\n+      indent(out, level);\n+      // Print outputs\n+      if (node->outputs().size() > 0) {\n+        auto delim = \"\";\n+        for (const auto* output_value : node->outputs()) {\n+          out << delim;\n+          printValue(out, output_value);\n+          delim = \", \";\n+        }\n+        out << \" = \";\n+      }\n+\n+      out << node->kind().toQualString();\n+\n+      // Print instruction parameters\n+      printValueList(out, node->inputs());\n+\n+      out << std::endl;\n+    }\n+\n+    return out;\n+  }\n+\n+  std::ostream& printReturn(\n+    std::ostream & out,\n+    const Node* node,\n+    const size_t level\n+  ) {\n+    indent(out, level);\n+    const auto& returns = node->inputs();\n+    if (returns.size() > 0) {\n+      out << \"return \";\n+      std::string delimiter = \"\";\n+      if (returns.size() > 1) {\n+        printValueList(out, returns);\n+      } else {\n+        printValue(out, returns[0]);\n+      }\n+      out << std::endl;\n+    }\n+    return out;\n+  }\n+\n+  std::ostream& printBlock(\n+    std::ostream & out,\n+    const Block* root,\n+    const size_t level\n+  ) {\n+    for (const auto* node : root->nodes()) {\n+      printNode(out, node, level);\n+    }\n+\n+    printNode(out, root->return_node(), level);\n+\n+    return out;\n+  }\n+\n+  inline bool isNameUnique(std::string& name, const Value* val) const {\n+    auto generated_name_value = generated_names_.find(name);\n+    if (generated_name_value != generated_names_.end() &&\n+        generated_name_value->second != val) {\n+      // Found a generated name match, check that it's for a different value\n+      return false;\n+    }\n+    return graph_.uniqueNames().find(name) == graph_.uniqueNames().end();\n+  }\n+\n+  std::ostream& printValue(\n+    std::ostream & out,\n+    const Value* val\n+  ) {\n+    const auto node = val->node();\n+    if (node->kind() == prim::Constant) {\n+      printAttributeValue(out, node->attributeNames()[0], node);\n+      return out;\n+    }\n+\n+    auto name_source = val;\n+\n+    auto aliased_name = aliases_.find(val);\n+    if (aliased_name != aliases_.end()) {\n+      name_source = aliased_name->second;\n+    }\n+\n+    auto name = name_source->uniqueName();\n+\n+    bool using_generated_name = false;\n+    if (isdigit(name.at(0))) {\n+      std::stringstream ss;\n+      ss << \"t\" << name;\n+      name = ss.str();\n+      using_generated_name = true;\n+    } else if (name.find_last_of('.') != std::string::npos) {\n+      // Make unique name a valid variable name (e.g. a.1 -> a1)\n+      name.erase(std::remove(name.begin(), name.end(), '.'), name.end());\n+      using_generated_name = true;\n+    }\n+\n+    if (using_generated_name) {", "path": "torch/csrc/jit/ir.cpp", "position": null, "original_position": 414, "commit_id": "18b69e2bcd43668ecfbec43f1f39c956378a9608", "original_commit_id": "4a297db42120d7ad5358c5d0c983e23d93a43ef5", "user": {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, "body": "Isn't this going to run every time a Value is referenced? I feel the `Value* -> pretty_name` mapping should be cached.", "created_at": "2018-09-10T17:16:31Z", "updated_at": "2018-11-23T15:50:52Z", "html_url": "https://github.com/pytorch/pytorch/pull/10319#discussion_r216403486", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/10319", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/216403486"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/10319#discussion_r216403486"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/10319"}}, "body_html": "<p>Isn't this going to run every time a Value is referenced? I feel the <code>Value* -&gt; pretty_name</code> mapping should be cached.</p>", "body_text": "Isn't this going to run every time a Value is referenced? I feel the Value* -> pretty_name mapping should be cached."}