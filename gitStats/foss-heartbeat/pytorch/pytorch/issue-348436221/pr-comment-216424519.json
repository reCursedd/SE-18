{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/216424519", "pull_request_review_id": 153902048, "id": 216424519, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNjQyNDUxOQ==", "diff_hunk": "@@ -251,6 +256,335 @@ std::ostream& operator<<(std::ostream & out, const Graph & g) {\n   return out;\n }\n \n+class PrettyPrintPass {\n+  Graph& graph_;\n+\n+  // When printing a name if there is a conflict with an existing name in the\n+  // graph, record the value -> new generated name mapping\n+  std::unordered_map<const Value*, const Value*> aliases_;\n+  // std::unordered_map<const Value*, std::string> aliases_;\n+\n+  // The Graph already tracks unique_names_, this is just for additional ones\n+  // generated during printing\n+  std::unordered_map<std::string, const Value*> generated_names_;\n+\n+  template<class T>\n+  void dualIterator(\n+    at::ArrayRef<T> list_a,\n+    at::ArrayRef<T> list_b,\n+    const size_t offset_a,\n+    const size_t offset_b,\n+    std::function<void(T, T)> action\n+  ) const {\n+    auto it_a = list_a.begin() + offset_a;\n+    auto it_b = list_b.begin() + offset_b;\n+\n+    for (; it_a != list_a.end() && it_b != list_b.end(); ++it_a, ++it_b) {\n+      action(*it_a, *it_b);\n+    }\n+  }\n+\n+  std::ostream& printValueList(\n+    std::ostream & out,\n+    at::ArrayRef<const Value*> list\n+  ) {\n+    out << \"(\";\n+    auto delimiter = \"\";\n+    for (const auto* value : list) {\n+      out << delimiter;\n+      printValue(out, value);\n+      delimiter = \", \";\n+    }\n+    out << \")\";\n+    return out;\n+  }\n+\n+  void printAssignment(\n+    std::ostream& out,\n+    const Value* lhs,\n+    const Value* rhs,\n+    const size_t level\n+  ) {\n+    indent(out, level);\n+    printValue(out, lhs);\n+    out << \" = \";\n+    printValue(out, rhs);\n+    out << std::endl;\n+  }\n+\n+  std::ostream& printIf(\n+    std::ostream & out,\n+    const Node* node,\n+    const size_t level\n+  ) {\n+    indent(out, level);\n+    out << \"if \";\n+    const auto if_block = node->blocks()[0];\n+    const auto else_block = node->blocks()[1];\n+    printValue(out, node->inputs()[0]);\n+    out << \":\" << std::endl;\n+\n+    // Print node contents\n+    printBlock(out, if_block, level + 1);\n+\n+    // Print if block output\n+    dualIterator<const Value*>(\n+      node->outputs(),\n+      if_block->outputs(),\n+      0, 0,\n+      [&](const Value* node_output, const Value* return_input) {\n+        printAssignment(out, node_output, return_input, level + 1);\n+      }\n+    );\n+\n+    indent(out, level);\n+    out << \"else:\" << std::endl;\n+    printBlock(out, else_block, level + 1);\n+    dualIterator<const Value*>(\n+      node->outputs(),\n+      else_block->outputs(),\n+      0, 0,\n+      [&](const Value* node_output, const Value* return_input) {\n+        printAssignment(out, node_output, return_input, level + 1);\n+      }\n+    );\n+\n+    return out;\n+  }\n+\n+  bool isValueUsedLater(\n+    const Value* val\n+  ) const {\n+    if (aliases_.find(val) != aliases_.end()) {\n+      return true;\n+    }\n+    return val->uses().size() > 0;\n+  }\n+\n+  std::ostream& printLoop(\n+    std::ostream & out,\n+    const Node* node,\n+    const size_t level\n+  ) {\n+    const auto body_block = node->blocks()[0];\n+    // aliases_[body_block->inputs()[0]] = body_block->inputs()[0]->uniqueName();\n+    aliases_[body_block->inputs()[0]] = body_block->inputs()[0];\n+\n+    // The block outputs are not live after the end of the block, so we can use", "path": "torch/csrc/jit/ir.cpp", "position": null, "original_position": 249, "commit_id": "18b69e2bcd43668ecfbec43f1f39c956378a9608", "original_commit_id": "4a297db42120d7ad5358c5d0c983e23d93a43ef5", "user": {"login": "driazati", "id": 9407960, "node_id": "MDQ6VXNlcjk0MDc5NjA=", "avatar_url": "https://avatars3.githubusercontent.com/u/9407960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/driazati", "html_url": "https://github.com/driazati", "followers_url": "https://api.github.com/users/driazati/followers", "following_url": "https://api.github.com/users/driazati/following{/other_user}", "gists_url": "https://api.github.com/users/driazati/gists{/gist_id}", "starred_url": "https://api.github.com/users/driazati/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/driazati/subscriptions", "organizations_url": "https://api.github.com/users/driazati/orgs", "repos_url": "https://api.github.com/users/driazati/repos", "events_url": "https://api.github.com/users/driazati/events{/privacy}", "received_events_url": "https://api.github.com/users/driazati/received_events", "type": "User", "site_admin": false}, "body": "The block inputs and outputs are only live within that particular block, right?\r\n\r\nIn that particular case `z` gets aliased to `x` at the end and it outputs `return (x, x)`. If there's some intermediate then the earlier `z` gets renamed to `x` and the output is still correct, see:\r\n\r\n```python\r\ndef foo(y):\r\n   x = y + 1\r\n   z = 4\r\n   while y < 8:\r\n      y += 1\r\n      z = x\r\n  z += 10\r\n  return x, z\r\n```\r\n\r\nprints\r\n\r\n```python\r\ndef script(y1):\r\n  x = aten::add(y1, 1, 1)\r\n  z1 = aten::add(y1, 5, 1)\r\n  t9 = aten::lt(y1, 8)\r\n  t10 = prim::TensorToNum(t9)\r\n  t11 = t10\r\n  t12 = y1\r\n  while t11:\r\n    y2 = aten::add(t12, 1, 1)\r\n    t17 = aten::lt(y2, 8)\r\n    t18 = prim::TensorToNum(t17)\r\n    t11 = t18\r\n    t12 = y2\r\n  z = aten::add(x, 1, 1)\r\n  return (x, z)\r\n```\r\n", "created_at": "2018-09-10T18:21:07Z", "updated_at": "2018-11-23T15:50:53Z", "html_url": "https://github.com/pytorch/pytorch/pull/10319#discussion_r216424519", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/10319", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/216424519"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/10319#discussion_r216424519"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/10319"}}, "body_html": "<p>The block inputs and outputs are only live within that particular block, right?</p>\n<p>In that particular case <code>z</code> gets aliased to <code>x</code> at the end and it outputs <code>return (x, x)</code>. If there's some intermediate then the earlier <code>z</code> gets renamed to <code>x</code> and the output is still correct, see:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">foo</span>(<span class=\"pl-smi\">y</span>):\n   x <span class=\"pl-k\">=</span> y <span class=\"pl-k\">+</span> <span class=\"pl-c1\">1</span>\n   z <span class=\"pl-k\">=</span> <span class=\"pl-c1\">4</span>\n   <span class=\"pl-k\">while</span> y <span class=\"pl-k\">&lt;</span> <span class=\"pl-c1\">8</span>:\n      y <span class=\"pl-k\">+=</span> <span class=\"pl-c1\">1</span>\n      z <span class=\"pl-k\">=</span> x\n  z <span class=\"pl-k\">+=</span> <span class=\"pl-c1\">10</span>\n  <span class=\"pl-k\">return</span> x, z</pre></div>\n<p>prints</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">script</span>(<span class=\"pl-smi\">y1</span>):\n  x <span class=\"pl-k\">=</span> aten::add(y1, <span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>)\n  z1 <span class=\"pl-k\">=</span> aten::add(y1, <span class=\"pl-c1\">5</span>, <span class=\"pl-c1\">1</span>)\n  t9 <span class=\"pl-k\">=</span> aten::lt(y1, <span class=\"pl-c1\">8</span>)\n  t10 <span class=\"pl-k\">=</span> prim::TensorToNum(t9)\n  t11 <span class=\"pl-k\">=</span> t10\n  t12 <span class=\"pl-k\">=</span> y1\n  <span class=\"pl-k\">while</span> t11:\n    y2 <span class=\"pl-k\">=</span> aten::add(t12, <span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>)\n    t17 <span class=\"pl-k\">=</span> aten::lt(y2, <span class=\"pl-c1\">8</span>)\n    t18 <span class=\"pl-k\">=</span> prim::TensorToNum(t17)\n    t11 <span class=\"pl-k\">=</span> t18\n    t12 <span class=\"pl-k\">=</span> y2\n  z <span class=\"pl-k\">=</span> aten::add(x, <span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>)\n  <span class=\"pl-k\">return</span> (x, z)</pre></div>", "body_text": "The block inputs and outputs are only live within that particular block, right?\nIn that particular case z gets aliased to x at the end and it outputs return (x, x). If there's some intermediate then the earlier z gets renamed to x and the output is still correct, see:\ndef foo(y):\n   x = y + 1\n   z = 4\n   while y < 8:\n      y += 1\n      z = x\n  z += 10\n  return x, z\nprints\ndef script(y1):\n  x = aten::add(y1, 1, 1)\n  z1 = aten::add(y1, 5, 1)\n  t9 = aten::lt(y1, 8)\n  t10 = prim::TensorToNum(t9)\n  t11 = t10\n  t12 = y1\n  while t11:\n    y2 = aten::add(t12, 1, 1)\n    t17 = aten::lt(y2, 8)\n    t18 = prim::TensorToNum(t17)\n    t11 = t18\n    t12 = y2\n  z = aten::add(x, 1, 1)\n  return (x, z)", "in_reply_to_id": 216398387}