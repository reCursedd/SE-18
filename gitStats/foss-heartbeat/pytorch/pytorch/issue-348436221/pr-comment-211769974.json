{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/211769974", "pull_request_review_id": 148254687, "id": 211769974, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMTc2OTk3NA==", "diff_hunk": "@@ -251,6 +255,322 @@ std::ostream& operator<<(std::ostream & out, const Graph & g) {\n   return out;\n }\n \n+struct PrettyPrintPass {\n+  std::unordered_map<std::string, std::string> aliases;\n+  std::unordered_set<const Node*> seen_nodes;\n+  std::unordered_map<std::string, std::pair<const Node*, Symbol>> constants;\n+  std::unordered_set<const Value*> unresolved_values;\n+};\n+\n+template<class T>\n+static void dualIterator(\n+  at::ArrayRef<T> list_a,\n+  at::ArrayRef<T> list_b,\n+  const size_t offset_a,\n+  const size_t offset_b,\n+  std::function<void(T, T)> action\n+) {\n+  auto it_a = list_a.begin() + offset_a;\n+  auto it_b = list_b.begin() + offset_b;\n+\n+  for (; it_a != list_a.end() && it_b != list_b.end(); ++it_a, ++it_b) {\n+    action(*it_a, *it_b);\n+  }\n+}\n+\n+static std::ostream& prettyPrintNode(\n+  std::ostream & out,\n+  const Node* root,\n+  const size_t level,\n+  PrettyPrintPass& pass\n+);\n+\n+static std::ostream& prettyPrintValue(\n+  std::ostream & out,\n+  const Value* val,\n+  PrettyPrintPass& pass\n+) {\n+  const auto unique = val->uniqueName();\n+  if (val->node()->kind() == prim::Constant) {\n+    const auto const_value = pass.constants.find(unique);\n+    if (const_value != pass.constants.end()) {\n+      printAttributeValue(out, const_value->second.second, const_value->second.first);\n+    } else {\n+      AT_ERROR(\"Could not find a constant for value: \", unique);\n+    }\n+  } else {\n+    auto name = unique;\n+\n+    auto aliased_name = pass.aliases.find(unique);\n+    if (aliased_name != pass.aliases.end()) {\n+      name = aliased_name->second;\n+    }\n+\n+    if (isdigit(name.at(0))) {\n+      out << \"t\";\n+    } else {\n+      // Make unique name a valid variable name (e.g. a.1 -> a1)\n+      name.erase(std::remove(name.begin(), name.end(), '.'), name.end());\n+    }\n+\n+    out << name;\n+  }\n+  return out;\n+}\n+\n+static std::ostream& prettyPrintInputs(\n+  std::ostream & out,\n+  const Node* node,\n+  PrettyPrintPass& pass\n+) {\n+  out << \"(\";\n+  auto delimiter = \"\";\n+  for (const auto* in_value : node->inputs()) {\n+    out << delimiter;\n+    prettyPrintValue(out, in_value, pass);\n+    delimiter = \", \";\n+  }\n+  out << \")\";\n+  return out;\n+}\n+\n+static std::ostream& prettyPrintBlock(\n+  std::ostream & out,\n+  const Block* root,\n+  const size_t level,\n+  PrettyPrintPass& pass\n+) {\n+  for (const auto* node : root->nodes()) {\n+    prettyPrintNode(out, node, level, pass);\n+  }\n+\n+  prettyPrintNode(out, root->return_node(), level, pass);\n+\n+  return out;\n+}\n+\n+static void prettyPrintStmt(\n+  std::ostream& out,\n+  const Value* lhs,\n+  const Value* rhs,\n+  const size_t level,\n+  PrettyPrintPass& pass\n+) {\n+  indent(out, level);\n+  prettyPrintValue(out, lhs, pass);\n+  out << \" = \";\n+  prettyPrintValue(out, rhs, pass);\n+  out << std::endl;\n+}\n+\n+static std::ostream& prettyPrintIf(\n+  std::ostream & out,\n+  const Node* node,\n+  const size_t level,\n+  PrettyPrintPass& pass\n+) {\n+  indent(out, level);\n+  out << \"if \";\n+  const auto if_block = node->blocks()[0];\n+  const auto else_block = node->blocks()[1];\n+  prettyPrintValue(out, node->inputs()[0], pass);\n+  out << \":\" << std::endl;\n+\n+  // Print node contents\n+  prettyPrintBlock(out, if_block, level + 1, pass);\n+\n+  // Print if block output\n+  dualIterator<const Value*>(\n+    node->outputs(),\n+    if_block->return_node()->inputs(),\n+    0, 0,\n+    [&](const Value* node_output, const Value* return_input) {\n+      prettyPrintStmt(out, node_output, return_input, level + 1, pass);\n+    }\n+  );\n+\n+  indent(out, level);\n+  out << \"else:\" << std::endl;\n+  prettyPrintBlock(out, else_block, level + 1, pass);\n+  dualIterator<const Value*>(\n+    node->outputs(),\n+    else_block->return_node()->inputs(),\n+    0, 0,\n+    [&](const Value* node_output, const Value* return_input) {\n+      prettyPrintStmt(out, node_output, return_input, level + 1, pass);\n+    }\n+  );\n+\n+  return out;\n+}\n+\n+static bool isValueUsed(\n+  const Value* val,\n+  PrettyPrintPass& pass\n+) {\n+  if (pass.aliases.find(val->uniqueName()) != pass.aliases.end()) {\n+    return true;\n+  }\n+  return val->uses().size() > 0;\n+}\n+\n+static std::ostream& prettyPrintLoop(\n+  std::ostream & out,\n+  const Node* node,\n+  const size_t level,\n+  PrettyPrintPass& pass\n+) {\n+  const auto body_block = node->blocks()[0];\n+\n+  // Add temporaries for loop-carried dependencies\n+  dualIterator<const Value*>(\n+    node->inputs(),\n+    body_block->param_node()->outputs(),\n+    1, 0,\n+    [&](const Value* node_input, const Value* param_output) {\n+      if (isValueUsed(param_output, pass)) {\n+        prettyPrintStmt(out, param_output, node_input, level, pass);\n+      }\n+    }\n+  );\n+\n+  // Add an alias for the loop condition variable so it doesn't add an extra\n+  // temporary for it\n+  pass.aliases[body_block->param_node()->outputs()[0]->uniqueName()] = node->inputs()[1]->uniqueName();\n+\n+  // Loop header\n+  indent(out, level);\n+  out << \"while \";\n+  prettyPrintValue(out, body_block->param_node()->outputs()[0], pass);\n+  out << \":\";\n+  out << std::endl;\n+\n+  // Loop body\n+  prettyPrintBlock(out, body_block, level + 1, pass);\n+\n+  // Re-assign block outputs to inputs for next iteration\n+  dualIterator<const Value*>(\n+    body_block->param_node()->outputs(),\n+    body_block->return_node()->inputs(),\n+    0, 0,\n+    [&](const Value* param_output, const Value* return_input) {\n+      if (isValueUsed(param_output, pass)) {\n+        prettyPrintStmt(out, param_output, return_input, level + 1, pass);\n+      }\n+    }\n+  );\n+\n+  // Add assign loop-dependencies to the outputs of the prim::Loop\n+  dualIterator<const Value*>(\n+    node->outputs(),\n+    body_block->return_node()->inputs(),\n+    0, 1,\n+    [&](const Value* node_output, const Value* return_input) {\n+      if (isValueUsed(node_output, pass)) {\n+        prettyPrintStmt(out, node_output, return_input, level, pass);\n+      }\n+    }\n+  );\n+\n+  return out;\n+}\n+\n+static std::ostream& prettyPrintReturn(\n+  std::ostream & out,\n+  const Node* node,\n+  const size_t level,\n+  PrettyPrintPass& pass\n+) {\n+  indent(out, level);\n+  const auto& returns = node->inputs();\n+  if (returns.size() > 0) {\n+    out << \"return \";\n+    std::string delimiter = \"\";\n+    if (returns.size() > 1) {\n+      out << \"(\";\n+      for (const auto* return_node : returns) {\n+        out << delimiter;\n+        prettyPrintValue(out, return_node, pass);\n+        delimiter = \", \";\n+      }\n+      out << \")\";\n+    } else {\n+      prettyPrintValue(out, returns[0], pass);\n+    }\n+    out << std::endl;\n+  }\n+  return out;\n+}\n+\n+static std::ostream& prettyPrintNode(\n+  std::ostream & out,\n+  const Node* node,\n+  const size_t level,\n+  PrettyPrintPass& pass\n+) {\n+  pass.seen_nodes.insert(node);\n+\n+  // if there are subblocks on this node, visit them\n+  switch (node->kind()) {\n+  case prim::Loop:\n+    prettyPrintLoop(out, node, level, pass);\n+    break;\n+  case prim::If:\n+    prettyPrintIf(out, node, level, pass);\n+    break;\n+  case prim::Return:\n+    // Handled elsewhere, do nothing\n+    return out;\n+  case prim::Constant:\n+    pass.constants[node->outputs()[0]->uniqueName()] = std::make_pair(", "path": "torch/csrc/jit/ir.cpp", "position": null, "original_position": 399, "commit_id": "18b69e2bcd43668ecfbec43f1f39c956378a9608", "original_commit_id": "a271d2b0ed13d0574a8035315125fe713b41c9fe", "user": {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, "body": "can be skipped as per earlier comment", "created_at": "2018-08-21T21:43:17Z", "updated_at": "2018-11-23T15:49:42Z", "html_url": "https://github.com/pytorch/pytorch/pull/10319#discussion_r211769974", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/10319", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/211769974"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/10319#discussion_r211769974"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/10319"}}, "body_html": "<p>can be skipped as per earlier comment</p>", "body_text": "can be skipped as per earlier comment"}