{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/209399730", "pull_request_review_id": 145416635, "id": 209399730, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTM5OTczMA==", "diff_hunk": "@@ -55,62 +55,67 @@ void Tensor::backward(\n   pImpl->backward(std::move(gradient), keep_graph, create_graph);\n }\n \n-TensorImpl::TensorImpl(Backend backend, ScalarType scalar_type) {\n-  backend_ = backend;\n-  scalar_type_ = scalar_type;\n-  auto type = &globalContext().getType(backend, scalar_type);\n-  Storage* storage = type->storage(true).release();\n-  StorageImpl* storage_impl = storage->pImpl();\n-  tensor = new THTensor(storage_impl);\n-}\n-\n-TensorImpl::~TensorImpl() {\n-  if (tensor) tensor->release();\n+TensorImpl::TensorImpl(\n+    Backend backend,\n+    ScalarType scalar_type,\n+    bool is_variable)\n+    : TensorImpl(nullptr, backend, scalar_type, is_variable) {\n+  auto type = &globalContext().getType(backend_, scalar_type_);\n+  try {", "path": "aten/src/ATen/TensorImpl.cpp", "position": 27, "original_position": 27, "commit_id": "28013aa17b2986f31b5892c82cc974201f2cce63", "original_commit_id": "28013aa17b2986f31b5892c82cc974201f2cce63", "user": {"login": "cpuhrsch", "id": 1716488, "node_id": "MDQ6VXNlcjE3MTY0ODg=", "avatar_url": "https://avatars1.githubusercontent.com/u/1716488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cpuhrsch", "html_url": "https://github.com/cpuhrsch", "followers_url": "https://api.github.com/users/cpuhrsch/followers", "following_url": "https://api.github.com/users/cpuhrsch/following{/other_user}", "gists_url": "https://api.github.com/users/cpuhrsch/gists{/gist_id}", "starred_url": "https://api.github.com/users/cpuhrsch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cpuhrsch/subscriptions", "organizations_url": "https://api.github.com/users/cpuhrsch/orgs", "repos_url": "https://api.github.com/users/cpuhrsch/repos", "events_url": "https://api.github.com/users/cpuhrsch/events{/privacy}", "received_events_url": "https://api.github.com/users/cpuhrsch/received_events", "type": "User", "site_admin": false}, "body": "This should be resolved! Not clear what the best approach is:\r\n- Could add virtual \"make_storage\" to Type and have subclasses return nullptr\r\n- Could add argument \"has_storage\"", "created_at": "2018-08-10T22:37:38Z", "updated_at": "2018-11-23T15:49:07Z", "html_url": "https://github.com/pytorch/pytorch/pull/10421#discussion_r209399730", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/10421", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/209399730"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/10421#discussion_r209399730"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/10421"}}, "body_html": "<p>This should be resolved! Not clear what the best approach is:</p>\n<ul>\n<li>Could add virtual \"make_storage\" to Type and have subclasses return nullptr</li>\n<li>Could add argument \"has_storage\"</li>\n</ul>", "body_text": "This should be resolved! Not clear what the best approach is:\n\nCould add virtual \"make_storage\" to Type and have subclasses return nullptr\nCould add argument \"has_storage\""}