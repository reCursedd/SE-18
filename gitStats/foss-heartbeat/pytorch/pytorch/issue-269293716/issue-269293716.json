{"url": "https://api.github.com/repos/pytorch/pytorch/issues/3335", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/3335/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/3335/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/3335/events", "html_url": "https://github.com/pytorch/pytorch/issues/3335", "id": 269293716, "node_id": "MDU6SXNzdWUyNjkyOTM3MTY=", "number": 3335, "title": "[Feature Request] Deployment in c++ project", "user": {"login": "x10000year", "id": 22427780, "node_id": "MDQ6VXNlcjIyNDI3Nzgw", "avatar_url": "https://avatars0.githubusercontent.com/u/22427780?v=4", "gravatar_id": "", "url": "https://api.github.com/users/x10000year", "html_url": "https://github.com/x10000year", "followers_url": "https://api.github.com/users/x10000year/followers", "following_url": "https://api.github.com/users/x10000year/following{/other_user}", "gists_url": "https://api.github.com/users/x10000year/gists{/gist_id}", "starred_url": "https://api.github.com/users/x10000year/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/x10000year/subscriptions", "organizations_url": "https://api.github.com/users/x10000year/orgs", "repos_url": "https://api.github.com/users/x10000year/repos", "events_url": "https://api.github.com/users/x10000year/events{/privacy}", "received_events_url": "https://api.github.com/users/x10000year/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 424131849, "node_id": "MDU6TGFiZWw0MjQxMzE4NDk=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true}, {"id": 693805995, "node_id": "MDU6TGFiZWw2OTM4MDU5OTU=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/onnx", "name": "onnx", "color": "e99695", "default": false}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2017-10-28T07:38:21Z", "updated_at": "2018-04-20T18:33:15Z", "closed_at": null, "author_association": "NONE", "body_html": "<p>In production environment, deep learning models have to be deployed in applications developed in languages beyond python. ONNX is never a viable solution for complex projects in which there are many custom ops/extensions. It is terrible to develop and maintain the same custom ops/extensions for both pytorch and caffe2. c/c++ interfaces for model deployment is needed, even if it may require running python interpreter in c/c++.</p>\n<p>Another feature request is better support for custom op. In tensorflow, custom ops can be built into a .so with the toolchain of the user's choice. The custom ops can be used in training after loading the .so file in python. The ffi way provided by pytorch is too limited and is not suitable for big c/c++ projects.</p>", "body_text": "In production environment, deep learning models have to be deployed in applications developed in languages beyond python. ONNX is never a viable solution for complex projects in which there are many custom ops/extensions. It is terrible to develop and maintain the same custom ops/extensions for both pytorch and caffe2. c/c++ interfaces for model deployment is needed, even if it may require running python interpreter in c/c++.\nAnother feature request is better support for custom op. In tensorflow, custom ops can be built into a .so with the toolchain of the user's choice. The custom ops can be used in training after loading the .so file in python. The ffi way provided by pytorch is too limited and is not suitable for big c/c++ projects.", "body": "In production environment, deep learning models have to be deployed in applications developed in languages beyond python. ONNX is never a viable solution for complex projects in which there are many custom ops/extensions. It is terrible to develop and maintain the same custom ops/extensions for both pytorch and caffe2. c/c++ interfaces for model deployment is needed, even if it may require running python interpreter in c/c++.\r\n\r\nAnother feature request is better support for custom op. In tensorflow, custom ops can be built into a .so with the toolchain of the user's choice. The custom ops can be used in training after loading the .so file in python. The ffi way provided by pytorch is too limited and is not suitable for big c/c++ projects."}