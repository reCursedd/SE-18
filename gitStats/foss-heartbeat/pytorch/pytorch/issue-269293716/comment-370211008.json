{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/370211008", "html_url": "https://github.com/pytorch/pytorch/issues/3335#issuecomment-370211008", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/3335", "id": 370211008, "node_id": "MDEyOklzc3VlQ29tbWVudDM3MDIxMTAwOA==", "user": {"login": "ahkarami", "id": 28620609, "node_id": "MDQ6VXNlcjI4NjIwNjA5", "avatar_url": "https://avatars0.githubusercontent.com/u/28620609?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ahkarami", "html_url": "https://github.com/ahkarami", "followers_url": "https://api.github.com/users/ahkarami/followers", "following_url": "https://api.github.com/users/ahkarami/following{/other_user}", "gists_url": "https://api.github.com/users/ahkarami/gists{/gist_id}", "starred_url": "https://api.github.com/users/ahkarami/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ahkarami/subscriptions", "organizations_url": "https://api.github.com/users/ahkarami/orgs", "repos_url": "https://api.github.com/users/ahkarami/repos", "events_url": "https://api.github.com/users/ahkarami/events{/privacy}", "received_events_url": "https://api.github.com/users/ahkarami/received_events", "type": "User", "site_admin": false}, "created_at": "2018-03-04T08:24:59Z", "updated_at": "2018-03-04T08:24:59Z", "author_association": "NONE", "body_html": "<p>Dear <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=13564\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ezyang\">@ezyang</a>,<br>\nThank you for your answer. I agree with you about classic models. However, suppose one must convert some pre-trained models (<em>e.g.,</em> detection based models, 3D ConvNets, etc.) from PyTorch into C++ (<em>e.g.,</em> for production &amp; deployment in a large and commercial project).<br>\nTo the best of my knowledge, In this cases, the PyTorch team offers ONNX to convert models into Caffe2. But, In my opinion, the syntax of caffe2 framework is so hard and its tutorials &amp; docs are really bad (especially for its C++ API). Now, Is another better solution exists for doing this task?<br>\nAs I have searched about this task, I have found that <strong>ATen Library</strong> can be a great solution for doing such tasks. However, as you have mentioned, <em>ATen is just a library, it is not a runtime</em>. Also you have mentioned that <em>we don't plan to be in the business of building a new, production-ready runtime on top of Torch</em>. Has the plan of PyTorch team changed about designing a new C++ production-ready runtime on top of PyTorch? (If your answer is no, Why not? I think it would be really great that the PyTorch has a C++ API like its current fantastic syntax.) The <a href=\"https://github.com/warmspringwinds/pytorch-cpp\"><strong>Pytorch C++ Library</strong></a> actually done it, and I think it is a really fantastic project, but unfortunately it seems that its contributor hasn't any plan for progress it. Maybe it would be great that PyTorch team think about designing and releasing a nice C++ API for PyTorch via ATen library.</p>", "body_text": "Dear @ezyang,\nThank you for your answer. I agree with you about classic models. However, suppose one must convert some pre-trained models (e.g., detection based models, 3D ConvNets, etc.) from PyTorch into C++ (e.g., for production & deployment in a large and commercial project).\nTo the best of my knowledge, In this cases, the PyTorch team offers ONNX to convert models into Caffe2. But, In my opinion, the syntax of caffe2 framework is so hard and its tutorials & docs are really bad (especially for its C++ API). Now, Is another better solution exists for doing this task?\nAs I have searched about this task, I have found that ATen Library can be a great solution for doing such tasks. However, as you have mentioned, ATen is just a library, it is not a runtime. Also you have mentioned that we don't plan to be in the business of building a new, production-ready runtime on top of Torch. Has the plan of PyTorch team changed about designing a new C++ production-ready runtime on top of PyTorch? (If your answer is no, Why not? I think it would be really great that the PyTorch has a C++ API like its current fantastic syntax.) The Pytorch C++ Library actually done it, and I think it is a really fantastic project, but unfortunately it seems that its contributor hasn't any plan for progress it. Maybe it would be great that PyTorch team think about designing and releasing a nice C++ API for PyTorch via ATen library.", "body": "Dear @ezyang,\r\nThank you for your answer. I agree with you about classic models. However, suppose one must convert some pre-trained models (_e.g.,_ detection based models, 3D ConvNets, etc.) from PyTorch into C++ (_e.g.,_ for production & deployment in a large and commercial project). \r\nTo the best of my knowledge, In this cases, the PyTorch team offers ONNX to convert models into Caffe2. But, In my opinion, the syntax of caffe2 framework is so hard and its tutorials & docs are really bad (especially for its C++ API). Now, Is another better solution exists for doing this task? \r\nAs I have searched about this task, I have found that **ATen Library** can be a great solution for doing such tasks. However, as you have mentioned, _ATen is just a library, it is not a runtime_. Also you have mentioned that _we don't plan to be in the business of building a new, production-ready runtime on top of Torch_. Has the plan of PyTorch team changed about designing a new C++ production-ready runtime on top of PyTorch? (If your answer is no, Why not? I think it would be really great that the PyTorch has a C++ API like its current fantastic syntax.) The [**Pytorch C++ Library**](https://github.com/warmspringwinds/pytorch-cpp) actually done it, and I think it is a really fantastic project, but unfortunately it seems that its contributor hasn't any plan for progress it. Maybe it would be great that PyTorch team think about designing and releasing a nice C++ API for PyTorch via ATen library. "}