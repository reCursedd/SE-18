{"url": "https://api.github.com/repos/pytorch/pytorch/issues/8199", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/8199/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/8199/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/8199/events", "html_url": "https://github.com/pytorch/pytorch/issues/8199", "id": 329933770, "node_id": "MDU6SXNzdWUzMjk5MzM3NzA=", "number": 8199, "title": "[Feature request] Equivalent of softmax_cross_entropy_with_logits", "user": {"login": "rohitrango", "id": 15312514, "node_id": "MDQ6VXNlcjE1MzEyNTE0", "avatar_url": "https://avatars2.githubusercontent.com/u/15312514?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rohitrango", "html_url": "https://github.com/rohitrango", "followers_url": "https://api.github.com/users/rohitrango/followers", "following_url": "https://api.github.com/users/rohitrango/following{/other_user}", "gists_url": "https://api.github.com/users/rohitrango/gists{/gist_id}", "starred_url": "https://api.github.com/users/rohitrango/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rohitrango/subscriptions", "organizations_url": "https://api.github.com/users/rohitrango/orgs", "repos_url": "https://api.github.com/users/rohitrango/repos", "events_url": "https://api.github.com/users/rohitrango/events{/privacy}", "received_events_url": "https://api.github.com/users/rohitrango/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-06-06T16:03:28Z", "updated_at": "2018-06-06T17:17:35Z", "closed_at": "2018-06-06T17:17:35Z", "author_association": "NONE", "body_html": "<p>I don't think there an equivalent of <code>tf.nn.softmax_cross_entropy_with_logits</code> in PyTorch. The closest function I found is <code>BCEWithLogitsLoss</code> but it combines a <code>sigmoid</code> followed by the BCE loss instead of a <code>softmax</code>.<br>\nCan we have an implementation of a <code>softmax_cross_entropy_with_logits</code> (instead of combining softmax and cross entropy loss for numerical stability)?</p>\n<p>Thanks!</p>", "body_text": "I don't think there an equivalent of tf.nn.softmax_cross_entropy_with_logits in PyTorch. The closest function I found is BCEWithLogitsLoss but it combines a sigmoid followed by the BCE loss instead of a softmax.\nCan we have an implementation of a softmax_cross_entropy_with_logits (instead of combining softmax and cross entropy loss for numerical stability)?\nThanks!", "body": "I don't think there an equivalent of `tf.nn.softmax_cross_entropy_with_logits` in PyTorch. The closest function I found is `BCEWithLogitsLoss` but it combines a `sigmoid` followed by the BCE loss instead of a `softmax`. \r\nCan we have an implementation of a `softmax_cross_entropy_with_logits` (instead of combining softmax and cross entropy loss for numerical stability)? \r\n\r\nThanks! "}