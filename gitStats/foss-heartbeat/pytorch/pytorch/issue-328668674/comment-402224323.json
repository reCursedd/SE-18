{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/402224323", "html_url": "https://github.com/pytorch/pytorch/issues/8049#issuecomment-402224323", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/8049", "id": 402224323, "node_id": "MDEyOklzc3VlQ29tbWVudDQwMjIyNDMyMw==", "user": {"login": "vadimkantorov", "id": 1041752, "node_id": "MDQ6VXNlcjEwNDE3NTI=", "avatar_url": "https://avatars0.githubusercontent.com/u/1041752?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vadimkantorov", "html_url": "https://github.com/vadimkantorov", "followers_url": "https://api.github.com/users/vadimkantorov/followers", "following_url": "https://api.github.com/users/vadimkantorov/following{/other_user}", "gists_url": "https://api.github.com/users/vadimkantorov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vadimkantorov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vadimkantorov/subscriptions", "organizations_url": "https://api.github.com/users/vadimkantorov/orgs", "repos_url": "https://api.github.com/users/vadimkantorov/repos", "events_url": "https://api.github.com/users/vadimkantorov/events{/privacy}", "received_events_url": "https://api.github.com/users/vadimkantorov/received_events", "type": "User", "site_admin": false}, "created_at": "2018-07-03T16:55:26Z", "updated_at": "2018-07-03T16:59:59Z", "author_association": "NONE", "body_html": "<p>Another existing implementations in sklearn that may be useful for API design:<br>\n<a href=\"http://scikit-learn.org/stable/modules/generated/sklearn.decomposition.TruncatedSVD.html\" rel=\"nofollow\">http://scikit-learn.org/stable/modules/generated/sklearn.decomposition.TruncatedSVD.html</a> (based on<br>\n<a href=\"http://scikit-learn.org/dev/modules/generated/sklearn.utils.extmath.randomized_svd.html\" rel=\"nofollow\">http://scikit-learn.org/dev/modules/generated/sklearn.utils.extmath.randomized_svd.html</a> )</p>\n<p>Also it would be nice to have a solid method for extracting the top single eigenvector and the top eigen/singular value for operator norm estimation: <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"311501800\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/6305\" data-hovercard-type=\"issue\" data-hovercard-url=\"/pytorch/pytorch/issues/6305/hovercard\" href=\"https://github.com/pytorch/pytorch/issues/6305\">#6305</a></p>\n<p>In Facebook package there is existing code for estimating the top eigenvalue: <a href=\"https://github.com/facebook/fbpca/blob/master/fbpca.py#L1503\">https://github.com/facebook/fbpca/blob/master/fbpca.py#L1503</a>. In PyTorch it happens in Spectral Normalization, but it would be nice to surface it, since it can be a good indicator for debugging</p>", "body_text": "Another existing implementations in sklearn that may be useful for API design:\nhttp://scikit-learn.org/stable/modules/generated/sklearn.decomposition.TruncatedSVD.html (based on\nhttp://scikit-learn.org/dev/modules/generated/sklearn.utils.extmath.randomized_svd.html )\nAlso it would be nice to have a solid method for extracting the top single eigenvector and the top eigen/singular value for operator norm estimation: #6305\nIn Facebook package there is existing code for estimating the top eigenvalue: https://github.com/facebook/fbpca/blob/master/fbpca.py#L1503. In PyTorch it happens in Spectral Normalization, but it would be nice to surface it, since it can be a good indicator for debugging", "body": "Another existing implementations in sklearn that may be useful for API design:\r\nhttp://scikit-learn.org/stable/modules/generated/sklearn.decomposition.TruncatedSVD.html (based on \r\nhttp://scikit-learn.org/dev/modules/generated/sklearn.utils.extmath.randomized_svd.html )\r\n\r\nAlso it would be nice to have a solid method for extracting the top single eigenvector and the top eigen/singular value for operator norm estimation: https://github.com/pytorch/pytorch/issues/6305\r\n\r\nIn Facebook package there is existing code for estimating the top eigenvalue: https://github.com/facebook/fbpca/blob/master/fbpca.py#L1503. In PyTorch it happens in Spectral Normalization, but it would be nice to surface it, since it can be a good indicator for debugging"}