{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/395680625", "html_url": "https://github.com/pytorch/pytorch/issues/8268#issuecomment-395680625", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/8268", "id": 395680625, "node_id": "MDEyOklzc3VlQ29tbWVudDM5NTY4MDYyNQ==", "user": {"login": "boegel", "id": 620876, "node_id": "MDQ6VXNlcjYyMDg3Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/620876?v=4", "gravatar_id": "", "url": "https://api.github.com/users/boegel", "html_url": "https://github.com/boegel", "followers_url": "https://api.github.com/users/boegel/followers", "following_url": "https://api.github.com/users/boegel/following{/other_user}", "gists_url": "https://api.github.com/users/boegel/gists{/gist_id}", "starred_url": "https://api.github.com/users/boegel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/boegel/subscriptions", "organizations_url": "https://api.github.com/users/boegel/orgs", "repos_url": "https://api.github.com/users/boegel/repos", "events_url": "https://api.github.com/users/boegel/events{/privacy}", "received_events_url": "https://api.github.com/users/boegel/received_events", "type": "User", "site_admin": false}, "created_at": "2018-06-08T07:55:44Z", "updated_at": "2018-06-08T07:55:44Z", "author_association": "NONE", "body_html": "<p>Very much +1 on not changing existing tags, for whatever reason.</p>\n<p>The proper way to deal with this would have been to create a new tag with a (sub)minor version increase like <code>0.4.1</code> or <code>0.4.0.1</code>.</p>\n<p>Changing an existing tag does more harm than good, even if the existing tag doesn't work anymore: it creates a lot of confusion all around the world, since people that checksum things may suddenly wonder why stuff changed upstream. It's quite frustrating...</p>\n<p>As <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=299842\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/tgamblin\">@tgamblin</a> mentioned, I hope tagging commits isn't the only way of releasing PyTorch: you should also create source tarballs that don't require <code>git</code> at all (for example by including a <code>git clone</code> of the submodules in it, if you must).</p>\n<p>Orthogonal to this issue: please make sure we can provide the required dependencies some other way, don't force us to deal with git submodules... They make sense for developers of software, not for packagers of the software.</p>\n<p>It's a bit ironic that <code>PyTorch</code> is making the same mistake as <code>TensorFlow</code> was a while ago (see <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"313395904\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/18424\" data-hovercard-type=\"issue\" data-hovercard-url=\"/tensorflow/tensorflow/issues/18424/hovercard\" href=\"https://github.com/tensorflow/tensorflow/issues/18424\">tensorflow/tensorflow#18424</a> already referenced by <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=22602168\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ccoulombe\">@ccoulombe</a>).</p>\n<p>Can't resist: see <a href=\"https://www.youtube.com/watch?v=NSemlYagjIU\" rel=\"nofollow\">https://www.youtube.com/watch?v=NSemlYagjIU</a> for more ideas on how to make package managers cry.</p>", "body_text": "Very much +1 on not changing existing tags, for whatever reason.\nThe proper way to deal with this would have been to create a new tag with a (sub)minor version increase like 0.4.1 or 0.4.0.1.\nChanging an existing tag does more harm than good, even if the existing tag doesn't work anymore: it creates a lot of confusion all around the world, since people that checksum things may suddenly wonder why stuff changed upstream. It's quite frustrating...\nAs @tgamblin mentioned, I hope tagging commits isn't the only way of releasing PyTorch: you should also create source tarballs that don't require git at all (for example by including a git clone of the submodules in it, if you must).\nOrthogonal to this issue: please make sure we can provide the required dependencies some other way, don't force us to deal with git submodules... They make sense for developers of software, not for packagers of the software.\nIt's a bit ironic that PyTorch is making the same mistake as TensorFlow was a while ago (see tensorflow/tensorflow#18424 already referenced by @ccoulombe).\nCan't resist: see https://www.youtube.com/watch?v=NSemlYagjIU for more ideas on how to make package managers cry.", "body": "Very much +1 on not changing existing tags, for whatever reason.\r\n\r\nThe proper way to deal with this would have been to create a new tag with a (sub)minor version increase like `0.4.1` or `0.4.0.1`.\r\n\r\nChanging an existing tag does more harm than good, even if the existing tag doesn't work anymore: it creates a lot of confusion all around the world, since people that checksum things may suddenly wonder why stuff changed upstream. It's quite frustrating...\r\n\r\nAs @tgamblin mentioned, I hope tagging commits isn't the only way of releasing PyTorch: you should also create source tarballs that don't require `git` at all (for example by including a `git clone` of the submodules in it, if you must).\r\n\r\nOrthogonal to this issue: please make sure we can provide the required dependencies some other way, don't force us to deal with git submodules... They make sense for developers of software, not for packagers of the software.\r\n\r\nIt's a bit ironic that `PyTorch` is making the same mistake as `TensorFlow` was a while ago (see https://github.com/tensorflow/tensorflow/issues/18424 already referenced by @ccoulombe).\r\n\r\nCan't resist: see https://www.youtube.com/watch?v=NSemlYagjIU for more ideas on how to make package managers cry."}