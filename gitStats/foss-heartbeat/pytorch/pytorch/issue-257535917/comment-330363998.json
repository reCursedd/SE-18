{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/330363998", "html_url": "https://github.com/pytorch/pytorch/pull/2728#issuecomment-330363998", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/2728", "id": 330363998, "node_id": "MDEyOklzc3VlQ29tbWVudDMzMDM2Mzk5OA==", "user": {"login": "SsnL", "id": 5674597, "node_id": "MDQ6VXNlcjU2NzQ1OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5674597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SsnL", "html_url": "https://github.com/SsnL", "followers_url": "https://api.github.com/users/SsnL/followers", "following_url": "https://api.github.com/users/SsnL/following{/other_user}", "gists_url": "https://api.github.com/users/SsnL/gists{/gist_id}", "starred_url": "https://api.github.com/users/SsnL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SsnL/subscriptions", "organizations_url": "https://api.github.com/users/SsnL/orgs", "repos_url": "https://api.github.com/users/SsnL/repos", "events_url": "https://api.github.com/users/SsnL/events{/privacy}", "received_events_url": "https://api.github.com/users/SsnL/received_events", "type": "User", "site_admin": false}, "created_at": "2017-09-18T21:38:05Z", "updated_at": "2017-09-19T00:34:30Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Hi <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=3768583\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/gchanan\">@gchanan</a> , I've addressed your comments in new commits. Now:</p>\n<ol>\n<li>The <code>int64_t</code>s (<code>long</code>s) in spatial versions stay as <code>int64_t</code>s.</li>\n<li>Corresponding variables in volumetric versions are now <code>int64_t</code>s.</li>\n<li>I propose<br>\na. changing spatial CUDA kernel's stride inputs to type <code>int64_t</code> because the caller has them in <code>int64_t</code>. So this fixes the case that everything but strides fit into <code>int</code>s in CUDA spatial case.<br>\nb. removing unused sizeD (#features) input parameter for spatial CUDA kernels.<br>\nThese are done in a separate commit <code>changed stride in spatial CUDA kernel to int64_t, removed an unused parameter</code>.</li>\n<li>Rebased &amp; fixed conflicts.</li>\n</ol>\n<p>Thanks again for your comments!</p>", "body_text": "Hi @gchanan , I've addressed your comments in new commits. Now:\n\nThe int64_ts (longs) in spatial versions stay as int64_ts.\nCorresponding variables in volumetric versions are now int64_ts.\nI propose\na. changing spatial CUDA kernel's stride inputs to type int64_t because the caller has them in int64_t. So this fixes the case that everything but strides fit into ints in CUDA spatial case.\nb. removing unused sizeD (#features) input parameter for spatial CUDA kernels.\nThese are done in a separate commit changed stride in spatial CUDA kernel to int64_t, removed an unused parameter.\nRebased & fixed conflicts.\n\nThanks again for your comments!", "body": "Hi @gchanan , I've addressed your comments in new commits. Now:\r\n1. The `int64_t`s (`long`s) in spatial versions stay as `int64_t`s.\r\n2. Corresponding variables in volumetric versions are now `int64_t`s.\r\n3. I propose \r\na. changing spatial CUDA kernel's stride inputs to type `int64_t` because the caller has them in `int64_t`. So this fixes the case that everything but strides fit into `int`s in CUDA spatial case. \r\nb. removing unused sizeD (#features) input parameter for spatial CUDA kernels.\r\nThese are done in a separate commit `changed stride in spatial CUDA kernel to int64_t, removed an unused parameter`.\r\n4. Rebased & fixed conflicts.\r\n\r\nThanks again for your comments! \r\n\r\n\r\n"}