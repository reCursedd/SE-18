{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/182510218", "pull_request_review_id": 113320170, "id": 182510218, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjUxMDIxOA==", "diff_hunk": "@@ -593,79 +617,103 @@ def state_dict(self, destination=None, prefix='', keep_vars=False):\n                 destination[prefix + name] = buf\n         for name, module in self._modules.items():\n             if module is not None:\n-                module.state_dict(destination, prefix + name + '.', keep_vars=keep_vars)\n+                module._state_dict(destination, prefix + name + '.', keep_vars=keep_vars)\n         return destination\n \n-    def _load_state_dict_key_mismatch(self, full_name, name, is_missing):\n-        r\"\"\"This is called in :meth:`~torch.nn.Module.load_state_dict` when\n-        there is state dict key mismatch in ``strict=True`` mode. This method\n-        can be overridden by subclasses to raise class-specific errors.\n-\n-        When :attr:`is_missing` is ``True``, :attr:`full_name` can not be found in\n-        the dict being loaded. When :attr:`is_missing` is ``False``,\n-        :attr:`full_name` is unexpected in the dict being loaded.\n+    def _load_from_state_dict(self, state_dict, prefix, strict, missing_keys, unexpected_keys):\n+        r\"\"\"Copies parameters and buffers from :attr:`state_dict` into only\n+        this module, but not its descendants. This is called on every submodule\n+        in :meth:`~torch.nn.Module.load_state_dict`. Metadata saved for this\n+        module in input :attr:`state_dict` is at ``state_dict._metadata[prefix]``.\n+        Subclasses can achieve class-specific backward compatible loading using\n+        the version number at ``state_dict._metadata[prefix][\"version\"]``.\n \n-        :attr:`name` is the actual name of the parameter/buffer, i.e., the\n-        substring after the last `dot` in :attr:`full_name`.\n-        \"\"\"\n-        pass\n-\n-    def load_state_dict(self, state_dict, strict=True):\n-        r\"\"\"Copies parameters and buffers from :attr:`state_dict` into\n-        this module and its descendants. If :attr:`strict` is ``True`` then\n-        the keys of :attr:`state_dict` must exactly match the keys returned\n-        by this module's :func:`state_dict()` function.\n+        .. note::\n+            :attr:`state_dict` is not the same object as the input\n+            :attr:`state_dict` to :meth:`~torch.nn.Module.load_state_dict`. So\n+            it can be modified.\n \n         Arguments:\n-            state_dict (dict): A dict containing parameters and\n+            state_dict (dict): a dict containing parameters and\n                 persistent buffers.\n-            strict (bool): Strictly enforce that the keys in :attr:`state_dict`\n-                match the keys returned by this module's `:func:`state_dict()`\n-                function.\n+            prefix (str): the prefix for parameters and buffers used in this\n+                module\n+            strict (bool): whether to strictly enforce that the keys in\n+                :attr:`state_dict` with :attr:`prefix` match the names of\n+                parameters and buffers in this module\n+            missing_keys (list of str): if ``strict=False``, add missing keys to\n+                this list\n+            unexpected_keys (list of str): if ``strict=False``, add unexpected\n+                keys to this list\n         \"\"\"\n-        def submodule_key_mismatch(full_name, is_missing):\n-            module = self\n-            names = full_name.split(\".\")\n-            for module_name in names[:-1]:\n-                if module_name in module._modules:\n-                    module = module._modules[module_name]\n-                else:\n-                    return\n-            module._load_state_dict_key_mismatch(full_name, names[-1], is_missing)\n-\n-        unexpected = []\n-        own_state = self.state_dict()\n-        for name, param in state_dict.items():\n-            if name in own_state:\n-                if isinstance(param, Parameter):\n+        local_name_params = itertools.chain(self._parameters.items(), self._buffers.items())\n+        local_state = {k: v.data for k, v in local_name_params if v is not None}\n+\n+        for name, param in local_state.items():\n+            key = prefix + name\n+            if key in state_dict:\n+                input_param = state_dict[key]\n+                if isinstance(input_param, Parameter):\n                     # backwards compatibility for serialized parameters\n-                    param = param.data\n+                    input_param = input_param.data\n                 try:\n-                    own_state[name].copy_(param)\n+                    param.copy_(input_param)\n                 except Exception:\n-                    raise RuntimeError('While copying the parameter named {}, '\n+                    raise RuntimeError('While copying the parameter named \"{}\", '\n                                        'whose dimensions in the model are {} and '\n                                        'whose dimensions in the checkpoint are {}.'\n-                                       .format(name, own_state[name].size(), param.size()))\n+                                       .format(key, param.size(), input_param.size()))\n             elif strict:\n-                unexpected.append(name)\n+                missing_keys.append(key)\n+\n+        if strict:\n+            for key, input_param in state_dict.items():\n+                if key.startswith(prefix):\n+                    input_name = key[len(prefix):]\n+                    if '.' not in input_name and input_name not in local_state:\n+                        unexpected_keys.append(key)\n+\n+    def load_state_dict(self, state_dict, strict=True):\n+        r\"\"\"Copies parameters and buffers from :attr:`state_dict` into\n+        this module and its descendants. If :attr:`strict` is ``True``, then\n+        the keys of :attr:`state_dict` must exactly match the keys returned\n+        by this module's :meth:`~torch.nn.Module.state_dict` function.\n+\n+        Arguments:\n+            state_dict (dict): a dict containing parameters and\n+                persistent buffers.\n+            strict (bool, optional): whether to strictly enforce that the keys\n+                in :attr:`state_dict` match the keys returned by this module's\n+                :meth:`~torch.nn.Module.state_dict` function. Default: ``True``\n+        \"\"\"\n+        missing_keys = []\n+        unexpected_keys = []\n+\n+        # copy state_dict so _load_from_state_dict can modify it\n+        metadata = state_dict._metadata if hasattr(state_dict, '_metadata') else None\n+        state_dict = state_dict.copy()\n+        if metadata is not None:\n+            state_dict._metadata = metadata\n+\n+        def load(module, prefix=''):\n+            module._load_from_state_dict(state_dict, prefix, strict, missing_keys, unexpected_keys)\n+            for name, child in module._modules.items():\n+                if child is not None:\n+                    load(child, prefix + name + '.')", "path": "torch/nn/modules/module.py", "position": null, "original_position": 215, "commit_id": "051a8e1e9def17d9617615d95745202900890bda", "original_commit_id": "4bf337859c9252f661a1cb3f3d1ca821c7e05044", "user": {"login": "SsnL", "id": 5674597, "node_id": "MDQ6VXNlcjU2NzQ1OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5674597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SsnL", "html_url": "https://github.com/SsnL", "followers_url": "https://api.github.com/users/SsnL/followers", "following_url": "https://api.github.com/users/SsnL/following{/other_user}", "gists_url": "https://api.github.com/users/SsnL/gists{/gist_id}", "starred_url": "https://api.github.com/users/SsnL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SsnL/subscriptions", "organizations_url": "https://api.github.com/users/SsnL/orgs", "repos_url": "https://api.github.com/users/SsnL/repos", "events_url": "https://api.github.com/users/SsnL/events{/privacy}", "received_events_url": "https://api.github.com/users/SsnL/received_events", "type": "User", "site_admin": false}, "body": "Right.. but if it is a dag like below:\r\n```\r\n  A \r\n / \\\r\nB   C\r\n \\ /\r\n  D\r\n\r\nall arrows from top to bottom\r\n```\r\nThen `D`'s param will still occur twice in `A.state_dict()` each time with different keys, right?", "created_at": "2018-04-18T17:37:02Z", "updated_at": "2018-11-23T15:42:46Z", "html_url": "https://github.com/pytorch/pytorch/pull/6639#discussion_r182510218", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/6639", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/182510218"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/6639#discussion_r182510218"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/6639"}}, "body_html": "<p>Right.. but if it is a dag like below:</p>\n<pre><code>  A \n / \\\nB   C\n \\ /\n  D\n\nall arrows from top to bottom\n</code></pre>\n<p>Then <code>D</code>'s param will still occur twice in <code>A.state_dict()</code> each time with different keys, right?</p>", "body_text": "Right.. but if it is a dag like below:\n  A \n / \\\nB   C\n \\ /\n  D\n\nall arrows from top to bottom\n\nThen D's param will still occur twice in A.state_dict() each time with different keys, right?", "in_reply_to_id": 182501724}