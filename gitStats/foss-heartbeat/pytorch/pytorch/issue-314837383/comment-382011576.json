{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/382011576", "html_url": "https://github.com/pytorch/pytorch/pull/6639#issuecomment-382011576", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/6639", "id": 382011576, "node_id": "MDEyOklzc3VlQ29tbWVudDM4MjAxMTU3Ng==", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "created_at": "2018-04-17T14:24:28Z", "updated_at": "2018-04-17T14:24:28Z", "author_association": "MEMBER", "body_html": "<p>I would really like to avoid modifying the set of keys and values of <code>state_dict</code>, because this really is part of our interface, and there's nothing like an internal key of the dict. It probably breaks a bunch of our code too. What I had in mind when we discussed this was something like this:</p>\n<ul>\n<li>We have a global version of the state dicts in the <code>nn</code> package. We bump this every time something changes in any module. We use <code>&lt;=</code> to test for intervals of time in different modules.</li>\n<li>When building a <code>state_dict</code>, we add a <code>_version</code> <em>attribute</em> to it. This is pretty much invisible to the outside code, but will be picked.</li>\n<li>When loading a <code>state_dict</code>, we look for the <code>_version</code> attr, and if it's missing we assume it's the newest version. If we detect any mismatches, we report that it was missing the version, so the errors might be caused by that.</li>\n</ul>\n<p>Wdyt?</p>", "body_text": "I would really like to avoid modifying the set of keys and values of state_dict, because this really is part of our interface, and there's nothing like an internal key of the dict. It probably breaks a bunch of our code too. What I had in mind when we discussed this was something like this:\n\nWe have a global version of the state dicts in the nn package. We bump this every time something changes in any module. We use <= to test for intervals of time in different modules.\nWhen building a state_dict, we add a _version attribute to it. This is pretty much invisible to the outside code, but will be picked.\nWhen loading a state_dict, we look for the _version attr, and if it's missing we assume it's the newest version. If we detect any mismatches, we report that it was missing the version, so the errors might be caused by that.\n\nWdyt?", "body": "I would really like to avoid modifying the set of keys and values of `state_dict`, because this really is part of our interface, and there's nothing like an internal key of the dict. It probably breaks a bunch of our code too. What I had in mind when we discussed this was something like this:\r\n- We have a global version of the state dicts in the `nn` package. We bump this every time something changes in any module. We use `<=` to test for intervals of time in different modules.\r\n- When building a `state_dict`, we add a `_version` *attribute* to it. This is pretty much invisible to the outside code, but will be picked.\r\n- When loading a `state_dict`, we look for the `_version` attr, and if it's missing we assume it's the newest version. If we detect any mismatches, we report that it was missing the version, so the errors might be caused by that.\r\n\r\nWdyt?\r\n"}