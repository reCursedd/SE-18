{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/182399480", "pull_request_review_id": 113179855, "id": 182399480, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjM5OTQ4MA==", "diff_hunk": "@@ -586,87 +613,162 @@ def state_dict(self, destination=None, prefix='', keep_vars=False):\n         \"\"\"\n         if destination is None:\n             destination = OrderedDict()\n+            destination._versions = OrderedDict()\n+        if hasattr(destination, '_versions'):\n+            destination._versions[prefix + 'version'] = self._version\n         for name, param in self._parameters.items():\n             if param is not None:\n                 destination[prefix + name] = param if keep_vars else param.data\n         for name, buf in self._buffers.items():\n             if buf is not None:\n                 destination[prefix + name] = buf\n-        for name, module in self._modules.items():\n-            if module is not None:\n-                module.state_dict(destination, prefix + name + '.', keep_vars=keep_vars)\n+        if not no_child:\n+            for name, module in self._modules.items():\n+                if module is not None:\n+                    module.state_dict(destination, prefix + name + '.', keep_vars=keep_vars)\n         return destination\n \n-    def _load_state_dict_key_mismatch(self, full_name, name, is_missing):\n-        r\"\"\"This is called in :meth:`~torch.nn.Module.load_state_dict` when\n-        there is state dict key mismatch in ``strict=True`` mode. This method\n-        can be overridden by subclasses to raise class-specific errors.\n-\n-        When :attr:`is_missing` is ``True``, :attr:`full_name` can not be found in\n-        the dict being loaded. When :attr:`is_missing` is ``False``,\n-        :attr:`full_name` is unexpected in the dict being loaded.\n+    def load_local_state_dict(self, local_state_dict, version, strict):\n+        r\"\"\"Copies parameters and buffers from :attr:`local_state_dict` into\n+        only this module, but not its descendants. This is called on every\n+        submodule in :meth:`~torch.nn.Module.load_state_dict`. This method\n+        can be overridden by subclasses to achieve class-specific backward\n+        compatible loading using the version number :attr:`version`.\n \n-        :attr:`name` is the actual name of the parameter/buffer, i.e., the\n-        substring after the last `dot` in :attr:`full_name`.\n-        \"\"\"\n-        pass\n-\n-    def load_state_dict(self, state_dict, strict=True):\n-        r\"\"\"Copies parameters and buffers from :attr:`state_dict` into\n-        this module and its descendants. If :attr:`strict` is ``True`` then\n-        the keys of :attr:`state_dict` must exactly match the keys returned\n-        by this module's :func:`state_dict()` function.\n+        .. note::\n+            :attr:`local_state_dict` is a different object that the input\n+            :attr:`state_dict` to :meth:`~torch.nn.Module.load_state_dict`. So\n+            it can be modified freely if needed.\n \n         Arguments:\n-            state_dict (dict): A dict containing parameters and\n-                persistent buffers.\n-            strict (bool): Strictly enforce that the keys in :attr:`state_dict`\n-                match the keys returned by this module's `:func:`state_dict()`\n-                function.\n+            local_state_dict (dict): A dict containing local parameters and\n+                persistent buffers of this module, but not of its descendants.\n+            version (int): The version number associated with the input\n+                :attr:`local_state_dict`. If the input state dict was created\n+                without a version number, this will be ``None``\n+            strict (bool): Whether to strictly enforce that the keys in\n+                :attr:`state_dict` match the keys returned by this module's\n+                :meth:`~torch.nn.Module.state_dict` function.\n         \"\"\"\n-        def submodule_key_mismatch(full_name, is_missing):\n-            module = self\n-            names = full_name.split(\".\")\n-            for module_name in names[:-1]:\n-                if module_name in module._modules:\n-                    module = module._modules[module_name]\n-                else:\n-                    return\n-            module._load_state_dict_key_mismatch(full_name, names[-1], is_missing)\n+        own_local_state = self.state_dict(no_child=True)\n \n         unexpected = []\n-        own_state = self.state_dict()\n-        for name, param in state_dict.items():\n-            if name in own_state:\n+        for name, param in local_state_dict.items():\n+            if name in own_local_state:\n                 if isinstance(param, Parameter):\n                     # backwards compatibility for serialized parameters\n                     param = param.data\n                 try:\n-                    own_state[name].copy_(param)\n+                    own_local_state[name].copy_(param)\n                 except Exception:\n                     raise RuntimeError('While copying the parameter named {}, '\n                                        'whose dimensions in the model are {} and '\n                                        'whose dimensions in the checkpoint are {}.'\n-                                       .format(name, own_state[name].size(), param.size()))\n+                                       .format(name, own_local_state[name].size(), param.size()))\n             elif strict:\n                 unexpected.append(name)\n+\n         if strict:\n-            missing = set(own_state.keys()) - set(state_dict.keys())\n-            # pass the mismatch info to submodules so that they have a chance to\n-            # raise a custom class-specific error\n-            for name in unexpected:\n-                submodule_key_mismatch(name, False)\n-            for name in missing:\n-                submodule_key_mismatch(name, True)\n+            missing = set(own_local_state.keys()) - set(local_state_dict.keys())\n             error_msg = ''\n             if len(unexpected) > 0:\n                 error_msg += 'Unexpected key(s) in state_dict: {}. '.format(\n                     ', '.join('\"{}\"'.format(k) for k in unexpected))\n             if len(missing) > 0:\n                 error_msg += 'Missing key(s) in state_dict: {}. '.format(\n-                    ', '.join('\"{}\"'.format(k) for k in unexpected))\n+                    ', '.join('\"{}\"'.format(k) for k in missing))", "path": "torch/nn/modules/module.py", "position": null, "original_position": 180, "commit_id": "051a8e1e9def17d9617615d95745202900890bda", "original_commit_id": "4bea5da8073e121be0817538180a5acc65c8d571", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Do the keys have prefix removed at this point? If so, then this error will be very uninformative.", "created_at": "2018-04-18T11:55:24Z", "updated_at": "2018-11-23T15:42:43Z", "html_url": "https://github.com/pytorch/pytorch/pull/6639#discussion_r182399480", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/6639", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/182399480"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/6639#discussion_r182399480"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/6639"}}, "body_html": "<p>Do the keys have prefix removed at this point? If so, then this error will be very uninformative.</p>", "body_text": "Do the keys have prefix removed at this point? If so, then this error will be very uninformative."}