{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/182776102", "pull_request_review_id": 113642881, "id": 182776102, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4Mjc3NjEwMg==", "diff_hunk": "@@ -596,76 +604,109 @@ def state_dict(self, destination=None, prefix='', keep_vars=False):\n                 module.state_dict(destination, prefix + name + '.', keep_vars=keep_vars)\n         return destination\n \n-    def _load_state_dict_key_mismatch(self, full_name, name, is_missing):\n-        r\"\"\"This is called in :meth:`~torch.nn.Module.load_state_dict` when\n-        there is state dict key mismatch in ``strict=True`` mode. This method\n-        can be overridden by subclasses to raise class-specific errors.\n+    def _load_from_state_dict(self, state_dict, prefix, strict, missing_keys, unexpected_keys, error_msgs):\n+        r\"\"\"Copies parameters and buffers from :attr:`state_dict` into only\n+        this module, but not its descendants. This is called on every submodule\n+        in :meth:`~torch.nn.Module.load_state_dict`. Metadata saved for this\n+        module in input :attr:`state_dict` is at ``state_dict._metadata[prefix]``.\n+        Subclasses can achieve class-specific backward compatible loading using\n+        the version number at ``state_dict._metadata[prefix][\"version\"]``.\n \n-        When :attr:`is_missing` is ``True``, :attr:`full_name` can not be found in\n-        the dict being loaded. When :attr:`is_missing` is ``False``,\n-        :attr:`full_name` is unexpected in the dict being loaded.\n+        .. note::\n+            :attr:`state_dict` is not the same object as the input\n+            :attr:`state_dict` to :meth:`~torch.nn.Module.load_state_dict`. So\n+            it can be modified.\n \n-        :attr:`name` is the actual name of the parameter/buffer, i.e., the\n-        substring after the last `dot` in :attr:`full_name`.\n+        Arguments:\n+            state_dict (dict): a dict containing parameters and\n+                persistent buffers.\n+            prefix (str): the prefix for parameters and buffers used in this\n+                module\n+            strict (bool): whether to strictly enforce that the keys in\n+                :attr:`state_dict` with :attr:`prefix` match the names of\n+                parameters and buffers in this module\n+            missing_keys (list of str): if ``strict=False``, add missing keys to\n+                this list\n+            unexpected_keys (list of str): if ``strict=False``, add unexpected\n+                keys to this list\n+            error_msgs (list of str): error messages should be added to this\n+                list, and will be reported together in\n+                :meth:`~torch.nn.Module.load_state_dict`\n         \"\"\"\n-        pass\n+        local_name_params = itertools.chain(self._parameters.items(), self._buffers.items())\n+        local_state = {k: v.data for k, v in local_name_params if v is not None}\n+\n+        for name, param in local_state.items():\n+            key = prefix + name\n+            if key in state_dict:\n+                input_param = state_dict[key]\n+                if isinstance(input_param, Parameter):\n+                    # backwards compatibility for serialized parameters\n+                    input_param = input_param.data\n+                try:\n+                    param.copy_(input_param)\n+                except Exception:\n+                    error_msgs.append('While copying the parameter named \"{}\", '\n+                                      'whose dimensions in the model are {} and '\n+                                      'whose dimensions in the checkpoint are {}.'\n+                                      .format(key, param.size(), input_param.size()))\n+            elif strict:\n+                missing_keys.append(key)\n+\n+        if strict:\n+            for key, input_param in state_dict.items():\n+                if key.startswith(prefix):\n+                    input_name = key[len(prefix):]\n+                    input_name = input_name.split('.', 1)[0]  # get the name of param/buffer/child", "path": "torch/nn/modules/module.py", "position": 161, "original_position": 149, "commit_id": "051a8e1e9def17d9617615d95745202900890bda", "original_commit_id": "1ad1ffe7cfccd35a3e60e705d9384d55abab48e7", "user": {"login": "SsnL", "id": 5674597, "node_id": "MDQ6VXNlcjU2NzQ1OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5674597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SsnL", "html_url": "https://github.com/SsnL", "followers_url": "https://api.github.com/users/SsnL/followers", "following_url": "https://api.github.com/users/SsnL/following{/other_user}", "gists_url": "https://api.github.com/users/SsnL/gists{/gist_id}", "starred_url": "https://api.github.com/users/SsnL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SsnL/subscriptions", "organizations_url": "https://api.github.com/users/SsnL/orgs", "repos_url": "https://api.github.com/users/SsnL/repos", "events_url": "https://api.github.com/users/SsnL/events{/privacy}", "received_events_url": "https://api.github.com/users/SsnL/received_events", "type": "User", "site_admin": false}, "body": "This is necessary. If we just check for `.`, then we won't detect the submodules with names not in `self._modules`", "created_at": "2018-04-19T14:55:16Z", "updated_at": "2018-11-23T15:42:52Z", "html_url": "https://github.com/pytorch/pytorch/pull/6639#discussion_r182776102", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/6639", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/182776102"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/6639#discussion_r182776102"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/6639"}}, "body_html": "<p>This is necessary. If we just check for <code>.</code>, then we won't detect the submodules with names not in <code>self._modules</code></p>", "body_text": "This is necessary. If we just check for ., then we won't detect the submodules with names not in self._modules", "in_reply_to_id": 182713577}