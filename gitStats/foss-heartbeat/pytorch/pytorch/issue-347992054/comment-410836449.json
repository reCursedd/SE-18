{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/410836449", "html_url": "https://github.com/pytorch/pytorch/pull/10260#issuecomment-410836449", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/10260", "id": 410836449, "node_id": "MDEyOklzc3VlQ29tbWVudDQxMDgzNjQ0OQ==", "user": {"login": "richardalligier", "id": 24826685, "node_id": "MDQ6VXNlcjI0ODI2Njg1", "avatar_url": "https://avatars3.githubusercontent.com/u/24826685?v=4", "gravatar_id": "", "url": "https://api.github.com/users/richardalligier", "html_url": "https://github.com/richardalligier", "followers_url": "https://api.github.com/users/richardalligier/followers", "following_url": "https://api.github.com/users/richardalligier/following{/other_user}", "gists_url": "https://api.github.com/users/richardalligier/gists{/gist_id}", "starred_url": "https://api.github.com/users/richardalligier/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/richardalligier/subscriptions", "organizations_url": "https://api.github.com/users/richardalligier/orgs", "repos_url": "https://api.github.com/users/richardalligier/repos", "events_url": "https://api.github.com/users/richardalligier/events{/privacy}", "received_events_url": "https://api.github.com/users/richardalligier/received_events", "type": "User", "site_admin": false}, "created_at": "2018-08-06T20:06:19Z", "updated_at": "2018-08-06T20:10:25Z", "author_association": "NONE", "body_html": "<p>I agree, this is very specific to a particular kind of datasets however this type of datasets are pretty common for regression problems.</p>\n<p>The Dataloader class is very convenient. I only had performance problem with it. Thus, I fixed the performance issue without changing the API nor the behavior (at least I hope so). I could do it with a batch sampler but it felt like I would be writing my own Dataloader.</p>\n<p>Having a <code>batch_collate_fn</code> parameter would solve my issue and might also be useful for others who have data structure for which 1 query of n elements is faster than n queries of 1 element. Though, I will understand if you don't want to change the API.</p>", "body_text": "I agree, this is very specific to a particular kind of datasets however this type of datasets are pretty common for regression problems.\nThe Dataloader class is very convenient. I only had performance problem with it. Thus, I fixed the performance issue without changing the API nor the behavior (at least I hope so). I could do it with a batch sampler but it felt like I would be writing my own Dataloader.\nHaving a batch_collate_fn parameter would solve my issue and might also be useful for others who have data structure for which 1 query of n elements is faster than n queries of 1 element. Though, I will understand if you don't want to change the API.", "body": "I agree, this is very specific to a particular kind of datasets however this type of datasets are pretty common for regression problems.\r\n\r\nThe Dataloader class is very convenient. I only had performance problem with it. Thus, I fixed the performance issue without changing the API nor the behavior (at least I hope so). I could do it with a batch sampler but it felt like I would be writing my own Dataloader.\r\n\r\nHaving a `batch_collate_fn` parameter would solve my issue and might also be useful for others who have data structure for which 1 query of n elements is faster than n queries of 1 element. Though, I will understand if you don't want to change the API."}