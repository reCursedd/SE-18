{"url": "https://api.github.com/repos/pytorch/pytorch/issues/13195", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/13195/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/13195/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/13195/events", "html_url": "https://github.com/pytorch/pytorch/pull/13195", "id": 374581104, "node_id": "MDExOlB1bGxSZXF1ZXN0MjI2MjUyMDcz", "number": 13195, "title": "[Pytorch][ONNX]Fix EraseListConstruct pass during ONNX export", "user": {"login": "wanchaol", "id": 9443650, "node_id": "MDQ6VXNlcjk0NDM2NTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/9443650?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wanchaol", "html_url": "https://github.com/wanchaol", "followers_url": "https://api.github.com/users/wanchaol/followers", "following_url": "https://api.github.com/users/wanchaol/following{/other_user}", "gists_url": "https://api.github.com/users/wanchaol/gists{/gist_id}", "starred_url": "https://api.github.com/users/wanchaol/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wanchaol/subscriptions", "organizations_url": "https://api.github.com/users/wanchaol/orgs", "repos_url": "https://api.github.com/users/wanchaol/repos", "events_url": "https://api.github.com/users/wanchaol/events{/privacy}", "received_events_url": "https://api.github.com/users/wanchaol/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-10-26T23:43:21Z", "updated_at": "2018-11-02T22:13:53Z", "closed_at": "2018-11-02T22:10:40Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/13195", "html_url": "https://github.com/pytorch/pytorch/pull/13195", "diff_url": "https://github.com/pytorch/pytorch/pull/13195.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/13195.patch"}, "body_html": "<p>There should really be a single place to erase or do special treatment to the prim::ListConstruct during ONNX export, this will make it consistent across different calls. e.g it will give a correct output graph in the following case:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">class</span> <span class=\"pl-en\">Test</span>(<span class=\"pl-e\">torch</span>.<span class=\"pl-e\">nn</span>.<span class=\"pl-e\">Module</span>):\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">forward</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>, <span class=\"pl-smi\">input</span>):\n        <span class=\"pl-k\">return</span> torch.cat([<span class=\"pl-c1\">input</span>, torch.zeros(<span class=\"pl-c1\">input</span>.size(<span class=\"pl-c1\">0</span>), <span class=\"pl-c1\">1</span>).type_as(<span class=\"pl-c1\">input</span>)], <span class=\"pl-v\">dim</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">1</span>)</pre></div>\n<p>Before this PR, we have the onnx graph as:</p>\n<pre><code>graph(%0 : Byte(2, 3)) {\n  %1 : Long() = onnx::Constant[value={0}](), scope: Test\n  %2 : Dynamic = onnx::Shape(%0), scope: Test\n  %3 : Long() = onnx::Gather[axis=0](%2, %1), scope: Test\n  %4 : Long() = onnx::Constant[value={1}](), scope: Test\n  %5 : Dynamic = onnx::Unsqueeze[axes=[0]](%3)\n  %6 : Dynamic = onnx::Unsqueeze[axes=[0]](%4)\n  %7 : int[] = onnx::Concat[axis=0](%5, %6)\n  %8 : Float(2, 1) = onnx::ConstantFill[dtype=1, input_as_shape=1, value=0](%7), scope: Test\n  %9 : Byte(2, 1) = onnx::Cast[to=2](%8), scope: Test\n  %10 : Byte(2, 4) = onnx::Concat[axis=1](%0, %9), scope: Test\n  return (%10);\n}\n\n</code></pre>\n<p>Which is wrong since onnx does not have a concept of <code>int[]</code>, here is the onnx graph after this PR:</p>\n<pre><code>graph(%0 : Byte(2, 3)) {\n  %1 : Long() = onnx::Constant[value={0}](), scope: Test\n  %2 : Dynamic = onnx::Shape(%0), scope: Test\n  %3 : Long() = onnx::Gather[axis=0](%2, %1), scope: Test\n  %4 : Long() = onnx::Constant[value={1}](), scope: Test\n  %5 : Dynamic = onnx::Unsqueeze[axes=[0]](%3)\n  %6 : Dynamic = onnx::Unsqueeze[axes=[0]](%4)\n  %7 : Dynamic = onnx::Concat[axis=0](%5, %6)\n  %8 : Float(2, 1) = onnx::ConstantFill[dtype=1, input_as_shape=1, value=0](%7), scope: Test\n  %9 : Byte(2, 1) = onnx::Cast[to=2](%8), scope: Test\n  %10 : Byte(2, 4) = onnx::Concat[axis=1](%0, %9), scope: Test\n  return (%10);\n}\n</code></pre>", "body_text": "There should really be a single place to erase or do special treatment to the prim::ListConstruct during ONNX export, this will make it consistent across different calls. e.g it will give a correct output graph in the following case:\nclass Test(torch.nn.Module):\n    def forward(self, input):\n        return torch.cat([input, torch.zeros(input.size(0), 1).type_as(input)], dim=1)\nBefore this PR, we have the onnx graph as:\ngraph(%0 : Byte(2, 3)) {\n  %1 : Long() = onnx::Constant[value={0}](), scope: Test\n  %2 : Dynamic = onnx::Shape(%0), scope: Test\n  %3 : Long() = onnx::Gather[axis=0](%2, %1), scope: Test\n  %4 : Long() = onnx::Constant[value={1}](), scope: Test\n  %5 : Dynamic = onnx::Unsqueeze[axes=[0]](%3)\n  %6 : Dynamic = onnx::Unsqueeze[axes=[0]](%4)\n  %7 : int[] = onnx::Concat[axis=0](%5, %6)\n  %8 : Float(2, 1) = onnx::ConstantFill[dtype=1, input_as_shape=1, value=0](%7), scope: Test\n  %9 : Byte(2, 1) = onnx::Cast[to=2](%8), scope: Test\n  %10 : Byte(2, 4) = onnx::Concat[axis=1](%0, %9), scope: Test\n  return (%10);\n}\n\n\nWhich is wrong since onnx does not have a concept of int[], here is the onnx graph after this PR:\ngraph(%0 : Byte(2, 3)) {\n  %1 : Long() = onnx::Constant[value={0}](), scope: Test\n  %2 : Dynamic = onnx::Shape(%0), scope: Test\n  %3 : Long() = onnx::Gather[axis=0](%2, %1), scope: Test\n  %4 : Long() = onnx::Constant[value={1}](), scope: Test\n  %5 : Dynamic = onnx::Unsqueeze[axes=[0]](%3)\n  %6 : Dynamic = onnx::Unsqueeze[axes=[0]](%4)\n  %7 : Dynamic = onnx::Concat[axis=0](%5, %6)\n  %8 : Float(2, 1) = onnx::ConstantFill[dtype=1, input_as_shape=1, value=0](%7), scope: Test\n  %9 : Byte(2, 1) = onnx::Cast[to=2](%8), scope: Test\n  %10 : Byte(2, 4) = onnx::Concat[axis=1](%0, %9), scope: Test\n  return (%10);\n}", "body": "There should really be a single place to erase or do special treatment to the prim::ListConstruct during ONNX export, this will make it consistent across different calls. e.g it will give a correct output graph in the following case: \r\n```python\r\nclass Test(torch.nn.Module):\r\n    def forward(self, input):\r\n        return torch.cat([input, torch.zeros(input.size(0), 1).type_as(input)], dim=1)\r\n```\r\nBefore this PR, we have the onnx graph as:\r\n\r\n```\r\ngraph(%0 : Byte(2, 3)) {\r\n  %1 : Long() = onnx::Constant[value={0}](), scope: Test\r\n  %2 : Dynamic = onnx::Shape(%0), scope: Test\r\n  %3 : Long() = onnx::Gather[axis=0](%2, %1), scope: Test\r\n  %4 : Long() = onnx::Constant[value={1}](), scope: Test\r\n  %5 : Dynamic = onnx::Unsqueeze[axes=[0]](%3)\r\n  %6 : Dynamic = onnx::Unsqueeze[axes=[0]](%4)\r\n  %7 : int[] = onnx::Concat[axis=0](%5, %6)\r\n  %8 : Float(2, 1) = onnx::ConstantFill[dtype=1, input_as_shape=1, value=0](%7), scope: Test\r\n  %9 : Byte(2, 1) = onnx::Cast[to=2](%8), scope: Test\r\n  %10 : Byte(2, 4) = onnx::Concat[axis=1](%0, %9), scope: Test\r\n  return (%10);\r\n}\r\n\r\n```\r\nWhich is wrong since onnx does not have a concept of `int[]`, here is the onnx graph after this PR:\r\n```\r\ngraph(%0 : Byte(2, 3)) {\r\n  %1 : Long() = onnx::Constant[value={0}](), scope: Test\r\n  %2 : Dynamic = onnx::Shape(%0), scope: Test\r\n  %3 : Long() = onnx::Gather[axis=0](%2, %1), scope: Test\r\n  %4 : Long() = onnx::Constant[value={1}](), scope: Test\r\n  %5 : Dynamic = onnx::Unsqueeze[axes=[0]](%3)\r\n  %6 : Dynamic = onnx::Unsqueeze[axes=[0]](%4)\r\n  %7 : Dynamic = onnx::Concat[axis=0](%5, %6)\r\n  %8 : Float(2, 1) = onnx::ConstantFill[dtype=1, input_as_shape=1, value=0](%7), scope: Test\r\n  %9 : Byte(2, 1) = onnx::Cast[to=2](%8), scope: Test\r\n  %10 : Byte(2, 4) = onnx::Concat[axis=1](%0, %9), scope: Test\r\n  return (%10);\r\n}\r\n```"}