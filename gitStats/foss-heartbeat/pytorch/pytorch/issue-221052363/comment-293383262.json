{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/293383262", "html_url": "https://github.com/pytorch/pytorch/pull/1234#issuecomment-293383262", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/1234", "id": 293383262, "node_id": "MDEyOklzc3VlQ29tbWVudDI5MzM4MzI2Mg==", "user": {"login": "Smerity", "id": 32325, "node_id": "MDQ6VXNlcjMyMzI1", "avatar_url": "https://avatars0.githubusercontent.com/u/32325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Smerity", "html_url": "https://github.com/Smerity", "followers_url": "https://api.github.com/users/Smerity/followers", "following_url": "https://api.github.com/users/Smerity/following{/other_user}", "gists_url": "https://api.github.com/users/Smerity/gists{/gist_id}", "starred_url": "https://api.github.com/users/Smerity/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Smerity/subscriptions", "organizations_url": "https://api.github.com/users/Smerity/orgs", "repos_url": "https://api.github.com/users/Smerity/repos", "events_url": "https://api.github.com/users/Smerity/events{/privacy}", "received_events_url": "https://api.github.com/users/Smerity/received_events", "type": "User", "site_admin": false}, "created_at": "2017-04-11T20:00:41Z", "updated_at": "2017-04-11T20:25:15Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Just wanted to thank <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=22205833\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/csarofeen\">@csarofeen</a> for finding this. While I absolutely adore the cuDNN accelerated RNN cells, there are times when I need to implement something custom and don't have the time / flexibility to optimize at the CUDA level. Improving the runtime speed of custom non-fused non-cuDNN RNN cells has a direct impact on my research :)<br>\nAdding to <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=22205833\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/csarofeen\">@csarofeen</a>'s later comment (LSTM/GRU cell w/o cuDNN) - absolutely! If use a standard RNN cell but want to use recurrent dropout (zoneout, variational dropout, etc) you need to avoid non-cuDNN for now - again hugely improved by this optimization! ^_^</p>", "body_text": "Just wanted to thank @csarofeen for finding this. While I absolutely adore the cuDNN accelerated RNN cells, there are times when I need to implement something custom and don't have the time / flexibility to optimize at the CUDA level. Improving the runtime speed of custom non-fused non-cuDNN RNN cells has a direct impact on my research :)\nAdding to @csarofeen's later comment (LSTM/GRU cell w/o cuDNN) - absolutely! If use a standard RNN cell but want to use recurrent dropout (zoneout, variational dropout, etc) you need to avoid non-cuDNN for now - again hugely improved by this optimization! ^_^", "body": "Just wanted to thank @csarofeen for finding this. While I absolutely adore the cuDNN accelerated RNN cells, there are times when I need to implement something custom and don't have the time / flexibility to optimize at the CUDA level. Improving the runtime speed of custom non-fused non-cuDNN RNN cells has a direct impact on my research :)\r\nAdding to @csarofeen's later comment (LSTM/GRU cell w/o cuDNN) - absolutely! If use a standard RNN cell but want to use recurrent dropout (zoneout, variational dropout, etc) you need to avoid non-cuDNN for now - again hugely improved by this optimization! ^_^"}