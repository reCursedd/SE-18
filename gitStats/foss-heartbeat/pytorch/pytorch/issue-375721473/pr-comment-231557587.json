{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/231557587", "pull_request_review_id": 172553463, "id": 231557587, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMTU1NzU4Nw==", "diff_hunk": "@@ -94,9 +96,11 @@ void THTensor_(copyCuda)(THCState *state, THTensor *self, struct THCTensor *src)\n       THTensor *srcf = THTensor_(newWithSize)(src->sizes(), {});          \\\n                                                                           \\\n       THTensor_(copyCuda)(state, srcf, src);                              \\\n-      TH_CONCAT_4(TH,TYPEC,Tensor_copy,Real)(self, srcf);                 \\\n+      at::Tensor srcf_wrap = THTensor_wrap(srcf);                         \\\n+      at::Tensor self_wrap = THTensor_wrap(self);                         \\\n+      at::_copy_(self_wrap, srcf_wrap);                                    \\\n                                                                           \\\n-      c10::raw::intrusive_ptr::decref(srcf);                                              \\\n+      c10::raw::intrusive_ptr::decref(srcf);                              \\", "path": "aten/src/THC/generic/THCTensorCopy.cpp", "position": null, "original_position": 22, "commit_id": "a6b86495326c0daf1e2469a6f5d889c9f84246ad", "original_commit_id": "6fd5537ac3a15dd047de863b49295a0ffec7add5", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "nit: Since `srcf` is never used after here, you don't need to incref/decref; you can just steal it entirely, saving an incref/decref. This is unlikely to show up in a singlethreaded benchmark, but we should practice good hygiene.\r\n\r\nActually, going one step further, `srcf` is allocated using `THTensor_(newWithSize)`, but you could use an equivalent ATen function `at::empty(src->sizes())` to have the same effect, and get a `at::Tensor` while you're at it.", "created_at": "2018-11-07T15:43:21Z", "updated_at": "2018-11-23T15:54:26Z", "html_url": "https://github.com/pytorch/pytorch/pull/13347#discussion_r231557587", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/13347", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/231557587"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/13347#discussion_r231557587"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/13347"}}, "body_html": "<p>nit: Since <code>srcf</code> is never used after here, you don't need to incref/decref; you can just steal it entirely, saving an incref/decref. This is unlikely to show up in a singlethreaded benchmark, but we should practice good hygiene.</p>\n<p>Actually, going one step further, <code>srcf</code> is allocated using <code>THTensor_(newWithSize)</code>, but you could use an equivalent ATen function <code>at::empty(src-&gt;sizes())</code> to have the same effect, and get a <code>at::Tensor</code> while you're at it.</p>", "body_text": "nit: Since srcf is never used after here, you don't need to incref/decref; you can just steal it entirely, saving an incref/decref. This is unlikely to show up in a singlethreaded benchmark, but we should practice good hygiene.\nActually, going one step further, srcf is allocated using THTensor_(newWithSize), but you could use an equivalent ATen function at::empty(src->sizes()) to have the same effect, and get a at::Tensor while you're at it."}