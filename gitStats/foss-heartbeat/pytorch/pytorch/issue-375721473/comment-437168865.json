{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/437168865", "html_url": "https://github.com/pytorch/pytorch/pull/13347#issuecomment-437168865", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/13347", "id": 437168865, "node_id": "MDEyOklzc3VlQ29tbWVudDQzNzE2ODg2NQ==", "user": {"login": "li-roy", "id": 8813817, "node_id": "MDQ6VXNlcjg4MTM4MTc=", "avatar_url": "https://avatars0.githubusercontent.com/u/8813817?v=4", "gravatar_id": "", "url": "https://api.github.com/users/li-roy", "html_url": "https://github.com/li-roy", "followers_url": "https://api.github.com/users/li-roy/followers", "following_url": "https://api.github.com/users/li-roy/following{/other_user}", "gists_url": "https://api.github.com/users/li-roy/gists{/gist_id}", "starred_url": "https://api.github.com/users/li-roy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/li-roy/subscriptions", "organizations_url": "https://api.github.com/users/li-roy/orgs", "repos_url": "https://api.github.com/users/li-roy/repos", "events_url": "https://api.github.com/users/li-roy/events{/privacy}", "received_events_url": "https://api.github.com/users/li-roy/received_events", "type": "User", "site_admin": false}, "created_at": "2018-11-08T21:51:07Z", "updated_at": "2018-11-08T21:51:07Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Did some simple benchmarking with this example:</p>\n<pre><code>import torch\n\ndef a():\n  b = torch.randn(10,10)\n  c = torch.randn(10,10,dtype=torch.double)\n  b.copy_(c)\n  \n%timeit a()\n</code></pre>\n<p>Results are consistently the same before and after this PR. Some examples given below.<br>\n100 elements, float: 8.81 \u00b5s \u00b1 99.7 ns per loop (mean \u00b1 std. dev. of 7 runs, 100000 loops each)<br>\n1M elements, float: 19.3 ms \u00b1 329 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 10 loops each)<br>\n100 elements, double to float: 17.3 \u00b5s \u00b1 145 ns per loop (mean \u00b1 std. dev. of 7 runs, 100000 loops each)<br>\n1M elements, double to float: 82.7 ms \u00b1 1.7 ms per loop (mean \u00b1 std. dev. of 7 runs, 10 loops each)</p>", "body_text": "Did some simple benchmarking with this example:\nimport torch\n\ndef a():\n  b = torch.randn(10,10)\n  c = torch.randn(10,10,dtype=torch.double)\n  b.copy_(c)\n  \n%timeit a()\n\nResults are consistently the same before and after this PR. Some examples given below.\n100 elements, float: 8.81 \u00b5s \u00b1 99.7 ns per loop (mean \u00b1 std. dev. of 7 runs, 100000 loops each)\n1M elements, float: 19.3 ms \u00b1 329 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 10 loops each)\n100 elements, double to float: 17.3 \u00b5s \u00b1 145 ns per loop (mean \u00b1 std. dev. of 7 runs, 100000 loops each)\n1M elements, double to float: 82.7 ms \u00b1 1.7 ms per loop (mean \u00b1 std. dev. of 7 runs, 10 loops each)", "body": "Did some simple benchmarking with this example:\r\n\r\n```\r\nimport torch\r\n\r\ndef a():\r\n  b = torch.randn(10,10)\r\n  c = torch.randn(10,10,dtype=torch.double)\r\n  b.copy_(c)\r\n  \r\n%timeit a()\r\n```\r\n\r\nResults are consistently the same before and after this PR. Some examples given below.\r\n100 elements, float: 8.81 \u00b5s \u00b1 99.7 ns per loop (mean \u00b1 std. dev. of 7 runs, 100000 loops each)\r\n1M elements, float: 19.3 ms \u00b1 329 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 10 loops each)\r\n100 elements, double to float: 17.3 \u00b5s \u00b1 145 ns per loop (mean \u00b1 std. dev. of 7 runs, 100000 loops each)\r\n1M elements, double to float: 82.7 ms \u00b1 1.7 ms per loop (mean \u00b1 std. dev. of 7 runs, 10 loops each)"}