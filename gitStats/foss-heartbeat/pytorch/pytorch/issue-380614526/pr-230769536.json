{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/13961", "id": 230769536, "node_id": "MDExOlB1bGxSZXF1ZXN0MjMwNzY5NTM2", "html_url": "https://github.com/pytorch/pytorch/pull/13961", "diff_url": "https://github.com/pytorch/pytorch/pull/13961.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/13961.patch", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/13961", "number": 13961, "state": "closed", "locked": false, "title": "[JIT] Allow cooperative structured objects to be passed modules in tracing", "user": {"login": "t-vi", "id": 20787943, "node_id": "MDQ6VXNlcjIwNzg3OTQz", "avatar_url": "https://avatars2.githubusercontent.com/u/20787943?v=4", "gravatar_id": "", "url": "https://api.github.com/users/t-vi", "html_url": "https://github.com/t-vi", "followers_url": "https://api.github.com/users/t-vi/followers", "following_url": "https://api.github.com/users/t-vi/following{/other_user}", "gists_url": "https://api.github.com/users/t-vi/gists{/gist_id}", "starred_url": "https://api.github.com/users/t-vi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/t-vi/subscriptions", "organizations_url": "https://api.github.com/users/t-vi/orgs", "repos_url": "https://api.github.com/users/t-vi/repos", "events_url": "https://api.github.com/users/t-vi/events{/privacy}", "received_events_url": "https://api.github.com/users/t-vi/received_events", "type": "User", "site_admin": false}, "body": "Before this patch, the JIT does not allow Module's forward to take\r\nstructured objects.\r\nThis patch allows cooperative objects to do so.\r\nCooperative means:\r\n- It has a method self._jit_unwrap() that returns (a list/tuple of)\r\n  tensors. These are then used in _iter_tensors.\r\n- It has a method self._jit_wrap(flattened_input) that takes\r\n  (a list/tuple?) the flattened_unput (potentially more than it needs)\r\n  and returns itself (updated) and the unconsumed flattened_inputs.\r\n  This is then used in the _unflatten mechanism.\r\n\r\nThis is all it takes to permit maskrcnn-benchmark to use\r\nits structured BoxList/ImageList types and trace it without calling\r\nthe .forward directly.\r\nI'll push a model working with this patch in\r\nhttps://github.com/facebookresearch/maskrcnn-benchmark/pull/138\r\n\r\nI must admit I haven't fully checked whether there are ONNX changes needed before it, too, can profit, but I would be hopeful that anything currently usable remains so.\r\n\r\n@fmassa @zdevito \r\n\r\nSo the main downside that I'm aware of is that people will later want to use more elaborate mechanisms, but I think this could be done by just amending what wrap/unwrap are returning / consuming.", "created_at": "2018-11-14T09:46:16Z", "updated_at": "2018-11-16T22:03:44Z", "closed_at": "2018-11-16T22:03:44Z", "merged_at": null, "merge_commit_sha": "4e2978b451b01af044946e844c1101174b8dbed7", "assignee": null, "assignees": [], "requested_reviewers": [], "requested_teams": [], "labels": [], "milestone": null, "commits_url": "https://api.github.com/repos/pytorch/pytorch/pulls/13961/commits", "review_comments_url": "https://api.github.com/repos/pytorch/pytorch/pulls/13961/comments", "review_comment_url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments{/number}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/13961/comments", "statuses_url": "https://api.github.com/repos/pytorch/pytorch/statuses/6db878eb75e9b2fb98b4a8cfc32b79ed35df9a18", "head": {"label": "t-vi:trace_unwrap_structured_types", "ref": "trace_unwrap_structured_types", "sha": "6db878eb75e9b2fb98b4a8cfc32b79ed35df9a18", "user": {"login": "t-vi", "id": 20787943, "node_id": "MDQ6VXNlcjIwNzg3OTQz", "avatar_url": "https://avatars2.githubusercontent.com/u/20787943?v=4", "gravatar_id": "", "url": "https://api.github.com/users/t-vi", "html_url": "https://github.com/t-vi", "followers_url": "https://api.github.com/users/t-vi/followers", "following_url": "https://api.github.com/users/t-vi/following{/other_user}", "gists_url": "https://api.github.com/users/t-vi/gists{/gist_id}", "starred_url": "https://api.github.com/users/t-vi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/t-vi/subscriptions", "organizations_url": "https://api.github.com/users/t-vi/orgs", "repos_url": "https://api.github.com/users/t-vi/repos", "events_url": "https://api.github.com/users/t-vi/events{/privacy}", "received_events_url": "https://api.github.com/users/t-vi/received_events", "type": "User", "site_admin": false}, "repo": {"id": 90661339, "node_id": "MDEwOlJlcG9zaXRvcnk5MDY2MTMzOQ==", "name": "pytorch", "full_name": "t-vi/pytorch", "private": false, "owner": {"login": "t-vi", "id": 20787943, "node_id": "MDQ6VXNlcjIwNzg3OTQz", "avatar_url": "https://avatars2.githubusercontent.com/u/20787943?v=4", "gravatar_id": "", "url": "https://api.github.com/users/t-vi", "html_url": "https://github.com/t-vi", "followers_url": "https://api.github.com/users/t-vi/followers", "following_url": "https://api.github.com/users/t-vi/following{/other_user}", "gists_url": "https://api.github.com/users/t-vi/gists{/gist_id}", "starred_url": "https://api.github.com/users/t-vi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/t-vi/subscriptions", "organizations_url": "https://api.github.com/users/t-vi/orgs", "repos_url": "https://api.github.com/users/t-vi/repos", "events_url": "https://api.github.com/users/t-vi/events{/privacy}", "received_events_url": "https://api.github.com/users/t-vi/received_events", "type": "User", "site_admin": false}, "html_url": "https://github.com/t-vi/pytorch", "description": "Tensors and Dynamic neural networks in Python  with strong GPU acceleration", "fork": true, "url": "https://api.github.com/repos/t-vi/pytorch", "forks_url": "https://api.github.com/repos/t-vi/pytorch/forks", "keys_url": "https://api.github.com/repos/t-vi/pytorch/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/t-vi/pytorch/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/t-vi/pytorch/teams", "hooks_url": "https://api.github.com/repos/t-vi/pytorch/hooks", "issue_events_url": "https://api.github.com/repos/t-vi/pytorch/issues/events{/number}", "events_url": "https://api.github.com/repos/t-vi/pytorch/events", "assignees_url": "https://api.github.com/repos/t-vi/pytorch/assignees{/user}", "branches_url": "https://api.github.com/repos/t-vi/pytorch/branches{/branch}", "tags_url": "https://api.github.com/repos/t-vi/pytorch/tags", "blobs_url": "https://api.github.com/repos/t-vi/pytorch/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/t-vi/pytorch/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/t-vi/pytorch/git/refs{/sha}", "trees_url": "https://api.github.com/repos/t-vi/pytorch/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/t-vi/pytorch/statuses/{sha}", "languages_url": "https://api.github.com/repos/t-vi/pytorch/languages", "stargazers_url": "https://api.github.com/repos/t-vi/pytorch/stargazers", "contributors_url": "https://api.github.com/repos/t-vi/pytorch/contributors", "subscribers_url": "https://api.github.com/repos/t-vi/pytorch/subscribers", "subscription_url": "https://api.github.com/repos/t-vi/pytorch/subscription", "commits_url": "https://api.github.com/repos/t-vi/pytorch/commits{/sha}", "git_commits_url": "https://api.github.com/repos/t-vi/pytorch/git/commits{/sha}", "comments_url": "https://api.github.com/repos/t-vi/pytorch/comments{/number}", "issue_comment_url": "https://api.github.com/repos/t-vi/pytorch/issues/comments{/number}", "contents_url": "https://api.github.com/repos/t-vi/pytorch/contents/{+path}", "compare_url": "https://api.github.com/repos/t-vi/pytorch/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/t-vi/pytorch/merges", "archive_url": "https://api.github.com/repos/t-vi/pytorch/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/t-vi/pytorch/downloads", "issues_url": "https://api.github.com/repos/t-vi/pytorch/issues{/number}", "pulls_url": "https://api.github.com/repos/t-vi/pytorch/pulls{/number}", "milestones_url": "https://api.github.com/repos/t-vi/pytorch/milestones{/number}", "notifications_url": "https://api.github.com/repos/t-vi/pytorch/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/t-vi/pytorch/labels{/name}", "releases_url": "https://api.github.com/repos/t-vi/pytorch/releases{/id}", "deployments_url": "https://api.github.com/repos/t-vi/pytorch/deployments", "created_at": "2017-05-08T18:46:07Z", "updated_at": "2018-11-12T13:08:51Z", "pushed_at": "2018-11-23T13:17:17Z", "git_url": "git://github.com/t-vi/pytorch.git", "ssh_url": "git@github.com:t-vi/pytorch.git", "clone_url": "https://github.com/t-vi/pytorch.git", "svn_url": "https://github.com/t-vi/pytorch", "homepage": "http://pytorch.org", "size": 87913, "stargazers_count": 0, "watchers_count": 0, "language": "C++", "has_issues": false, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 0, "mirror_url": null, "archived": false, "open_issues_count": 0, "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "forks": 0, "open_issues": 0, "watchers": 0, "default_branch": "master"}}, "base": {"label": "pytorch:master", "ref": "master", "sha": "97036d3c3043b99b9015bf44f9a58eb14f106a80", "user": {"login": "pytorch", "id": 21003710, "node_id": "MDEyOk9yZ2FuaXphdGlvbjIxMDAzNzEw", "avatar_url": "https://avatars3.githubusercontent.com/u/21003710?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pytorch", "html_url": "https://github.com/pytorch", "followers_url": "https://api.github.com/users/pytorch/followers", "following_url": "https://api.github.com/users/pytorch/following{/other_user}", "gists_url": "https://api.github.com/users/pytorch/gists{/gist_id}", "starred_url": "https://api.github.com/users/pytorch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pytorch/subscriptions", "organizations_url": "https://api.github.com/users/pytorch/orgs", "repos_url": "https://api.github.com/users/pytorch/repos", "events_url": "https://api.github.com/users/pytorch/events{/privacy}", "received_events_url": "https://api.github.com/users/pytorch/received_events", "type": "Organization", "site_admin": false}, "repo": {"id": 65600975, "node_id": "MDEwOlJlcG9zaXRvcnk2NTYwMDk3NQ==", "name": "pytorch", "full_name": "pytorch/pytorch", "private": false, "owner": {"login": "pytorch", "id": 21003710, "node_id": "MDEyOk9yZ2FuaXphdGlvbjIxMDAzNzEw", "avatar_url": "https://avatars3.githubusercontent.com/u/21003710?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pytorch", "html_url": "https://github.com/pytorch", "followers_url": "https://api.github.com/users/pytorch/followers", "following_url": "https://api.github.com/users/pytorch/following{/other_user}", "gists_url": "https://api.github.com/users/pytorch/gists{/gist_id}", "starred_url": "https://api.github.com/users/pytorch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pytorch/subscriptions", "organizations_url": "https://api.github.com/users/pytorch/orgs", "repos_url": "https://api.github.com/users/pytorch/repos", "events_url": "https://api.github.com/users/pytorch/events{/privacy}", "received_events_url": "https://api.github.com/users/pytorch/received_events", "type": "Organization", "site_admin": false}, "html_url": "https://github.com/pytorch/pytorch", "description": "Tensors and Dynamic neural networks in Python  with strong GPU acceleration", "fork": false, "url": "https://api.github.com/repos/pytorch/pytorch", "forks_url": "https://api.github.com/repos/pytorch/pytorch/forks", "keys_url": "https://api.github.com/repos/pytorch/pytorch/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/pytorch/pytorch/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/pytorch/pytorch/teams", "hooks_url": "https://api.github.com/repos/pytorch/pytorch/hooks", "issue_events_url": "https://api.github.com/repos/pytorch/pytorch/issues/events{/number}", "events_url": "https://api.github.com/repos/pytorch/pytorch/events", "assignees_url": "https://api.github.com/repos/pytorch/pytorch/assignees{/user}", "branches_url": "https://api.github.com/repos/pytorch/pytorch/branches{/branch}", "tags_url": "https://api.github.com/repos/pytorch/pytorch/tags", "blobs_url": "https://api.github.com/repos/pytorch/pytorch/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/pytorch/pytorch/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/pytorch/pytorch/git/refs{/sha}", "trees_url": "https://api.github.com/repos/pytorch/pytorch/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/pytorch/pytorch/statuses/{sha}", "languages_url": "https://api.github.com/repos/pytorch/pytorch/languages", "stargazers_url": "https://api.github.com/repos/pytorch/pytorch/stargazers", "contributors_url": "https://api.github.com/repos/pytorch/pytorch/contributors", "subscribers_url": "https://api.github.com/repos/pytorch/pytorch/subscribers", "subscription_url": "https://api.github.com/repos/pytorch/pytorch/subscription", "commits_url": "https://api.github.com/repos/pytorch/pytorch/commits{/sha}", "git_commits_url": "https://api.github.com/repos/pytorch/pytorch/git/commits{/sha}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/comments{/number}", "issue_comment_url": "https://api.github.com/repos/pytorch/pytorch/issues/comments{/number}", "contents_url": "https://api.github.com/repos/pytorch/pytorch/contents/{+path}", "compare_url": "https://api.github.com/repos/pytorch/pytorch/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/pytorch/pytorch/merges", "archive_url": "https://api.github.com/repos/pytorch/pytorch/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/pytorch/pytorch/downloads", "issues_url": "https://api.github.com/repos/pytorch/pytorch/issues{/number}", "pulls_url": "https://api.github.com/repos/pytorch/pytorch/pulls{/number}", "milestones_url": "https://api.github.com/repos/pytorch/pytorch/milestones{/number}", "notifications_url": "https://api.github.com/repos/pytorch/pytorch/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/pytorch/pytorch/labels{/name}", "releases_url": "https://api.github.com/repos/pytorch/pytorch/releases{/id}", "deployments_url": "https://api.github.com/repos/pytorch/pytorch/deployments", "created_at": "2016-08-13T05:26:41Z", "updated_at": "2018-11-24T05:35:41Z", "pushed_at": "2018-11-24T05:34:07Z", "git_url": "git://github.com/pytorch/pytorch.git", "ssh_url": "git@github.com:pytorch/pytorch.git", "clone_url": "https://github.com/pytorch/pytorch.git", "svn_url": "https://github.com/pytorch/pytorch", "homepage": "http://pytorch.org", "size": 89651, "stargazers_count": 21577, "watchers_count": 21577, "language": "C++", "has_issues": true, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 5149, "mirror_url": null, "archived": false, "open_issues_count": 2193, "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "forks": 5149, "open_issues": 2193, "watchers": 21577, "default_branch": "master"}}, "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/13961"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/13961"}, "issue": {"href": "https://api.github.com/repos/pytorch/pytorch/issues/13961"}, "comments": {"href": "https://api.github.com/repos/pytorch/pytorch/issues/13961/comments"}, "review_comments": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/13961/comments"}, "review_comment": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments{/number}"}, "commits": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/13961/commits"}, "statuses": {"href": "https://api.github.com/repos/pytorch/pytorch/statuses/6db878eb75e9b2fb98b4a8cfc32b79ed35df9a18"}}, "author_association": "CONTRIBUTOR", "body_html": "<p>Before this patch, the JIT does not allow Module's forward to take<br>\nstructured objects.<br>\nThis patch allows cooperative objects to do so.<br>\nCooperative means:</p>\n<ul>\n<li>It has a method self._jit_unwrap() that returns (a list/tuple of)<br>\ntensors. These are then used in _iter_tensors.</li>\n<li>It has a method self._jit_wrap(flattened_input) that takes<br>\n(a list/tuple?) the flattened_unput (potentially more than it needs)<br>\nand returns itself (updated) and the unconsumed flattened_inputs.<br>\nThis is then used in the _unflatten mechanism.</li>\n</ul>\n<p>This is all it takes to permit maskrcnn-benchmark to use<br>\nits structured BoxList/ImageList types and trace it without calling<br>\nthe .forward directly.<br>\nI'll push a model working with this patch in<br>\n<a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"379416258\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/facebookresearch/maskrcnn-benchmark/issues/138\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/facebookresearch/maskrcnn-benchmark/pull/138/hovercard\" href=\"https://github.com/facebookresearch/maskrcnn-benchmark/pull/138\">facebookresearch/maskrcnn-benchmark#138</a></p>\n<p>I must admit I haven't fully checked whether there are ONNX changes needed before it, too, can profit, but I would be hopeful that anything currently usable remains so.</p>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=9110200\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/fmassa\">@fmassa</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=370202\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/zdevito\">@zdevito</a></p>\n<p>So the main downside that I'm aware of is that people will later want to use more elaborate mechanisms, but I think this could be done by just amending what wrap/unwrap are returning / consuming.</p>", "body_text": "Before this patch, the JIT does not allow Module's forward to take\nstructured objects.\nThis patch allows cooperative objects to do so.\nCooperative means:\n\nIt has a method self._jit_unwrap() that returns (a list/tuple of)\ntensors. These are then used in _iter_tensors.\nIt has a method self._jit_wrap(flattened_input) that takes\n(a list/tuple?) the flattened_unput (potentially more than it needs)\nand returns itself (updated) and the unconsumed flattened_inputs.\nThis is then used in the _unflatten mechanism.\n\nThis is all it takes to permit maskrcnn-benchmark to use\nits structured BoxList/ImageList types and trace it without calling\nthe .forward directly.\nI'll push a model working with this patch in\nfacebookresearch/maskrcnn-benchmark#138\nI must admit I haven't fully checked whether there are ONNX changes needed before it, too, can profit, but I would be hopeful that anything currently usable remains so.\n@fmassa @zdevito\nSo the main downside that I'm aware of is that people will later want to use more elaborate mechanisms, but I think this could be done by just amending what wrap/unwrap are returning / consuming.", "merged": false, "mergeable": null, "rebaseable": null, "mergeable_state": "unknown", "merged_by": null, "comments": 3, "review_comments": 0, "maintainer_can_modify": false, "commits": 2, "additions": 14, "deletions": 2, "changed_files": 1}