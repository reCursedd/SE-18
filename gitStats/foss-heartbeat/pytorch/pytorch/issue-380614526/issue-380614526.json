{"url": "https://api.github.com/repos/pytorch/pytorch/issues/13961", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/13961/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/13961/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/13961/events", "html_url": "https://github.com/pytorch/pytorch/pull/13961", "id": 380614526, "node_id": "MDExOlB1bGxSZXF1ZXN0MjMwNzY5NTM2", "number": 13961, "title": "[JIT] Allow cooperative structured objects to be passed modules in tracing", "user": {"login": "t-vi", "id": 20787943, "node_id": "MDQ6VXNlcjIwNzg3OTQz", "avatar_url": "https://avatars2.githubusercontent.com/u/20787943?v=4", "gravatar_id": "", "url": "https://api.github.com/users/t-vi", "html_url": "https://github.com/t-vi", "followers_url": "https://api.github.com/users/t-vi/followers", "following_url": "https://api.github.com/users/t-vi/following{/other_user}", "gists_url": "https://api.github.com/users/t-vi/gists{/gist_id}", "starred_url": "https://api.github.com/users/t-vi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/t-vi/subscriptions", "organizations_url": "https://api.github.com/users/t-vi/orgs", "repos_url": "https://api.github.com/users/t-vi/repos", "events_url": "https://api.github.com/users/t-vi/events{/privacy}", "received_events_url": "https://api.github.com/users/t-vi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-11-14T09:46:16Z", "updated_at": "2018-11-16T22:03:44Z", "closed_at": "2018-11-16T22:03:44Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/13961", "html_url": "https://github.com/pytorch/pytorch/pull/13961", "diff_url": "https://github.com/pytorch/pytorch/pull/13961.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/13961.patch"}, "body_html": "<p>Before this patch, the JIT does not allow Module's forward to take<br>\nstructured objects.<br>\nThis patch allows cooperative objects to do so.<br>\nCooperative means:</p>\n<ul>\n<li>It has a method self._jit_unwrap() that returns (a list/tuple of)<br>\ntensors. These are then used in _iter_tensors.</li>\n<li>It has a method self._jit_wrap(flattened_input) that takes<br>\n(a list/tuple?) the flattened_unput (potentially more than it needs)<br>\nand returns itself (updated) and the unconsumed flattened_inputs.<br>\nThis is then used in the _unflatten mechanism.</li>\n</ul>\n<p>This is all it takes to permit maskrcnn-benchmark to use<br>\nits structured BoxList/ImageList types and trace it without calling<br>\nthe .forward directly.<br>\nI'll push a model working with this patch in<br>\n<a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"379416258\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/facebookresearch/maskrcnn-benchmark/issues/138\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/facebookresearch/maskrcnn-benchmark/pull/138/hovercard\" href=\"https://github.com/facebookresearch/maskrcnn-benchmark/pull/138\">facebookresearch/maskrcnn-benchmark#138</a></p>\n<p>I must admit I haven't fully checked whether there are ONNX changes needed before it, too, can profit, but I would be hopeful that anything currently usable remains so.</p>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=9110200\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/fmassa\">@fmassa</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=370202\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/zdevito\">@zdevito</a></p>\n<p>So the main downside that I'm aware of is that people will later want to use more elaborate mechanisms, but I think this could be done by just amending what wrap/unwrap are returning / consuming.</p>", "body_text": "Before this patch, the JIT does not allow Module's forward to take\nstructured objects.\nThis patch allows cooperative objects to do so.\nCooperative means:\n\nIt has a method self._jit_unwrap() that returns (a list/tuple of)\ntensors. These are then used in _iter_tensors.\nIt has a method self._jit_wrap(flattened_input) that takes\n(a list/tuple?) the flattened_unput (potentially more than it needs)\nand returns itself (updated) and the unconsumed flattened_inputs.\nThis is then used in the _unflatten mechanism.\n\nThis is all it takes to permit maskrcnn-benchmark to use\nits structured BoxList/ImageList types and trace it without calling\nthe .forward directly.\nI'll push a model working with this patch in\nfacebookresearch/maskrcnn-benchmark#138\nI must admit I haven't fully checked whether there are ONNX changes needed before it, too, can profit, but I would be hopeful that anything currently usable remains so.\n@fmassa @zdevito\nSo the main downside that I'm aware of is that people will later want to use more elaborate mechanisms, but I think this could be done by just amending what wrap/unwrap are returning / consuming.", "body": "Before this patch, the JIT does not allow Module's forward to take\r\nstructured objects.\r\nThis patch allows cooperative objects to do so.\r\nCooperative means:\r\n- It has a method self._jit_unwrap() that returns (a list/tuple of)\r\n  tensors. These are then used in _iter_tensors.\r\n- It has a method self._jit_wrap(flattened_input) that takes\r\n  (a list/tuple?) the flattened_unput (potentially more than it needs)\r\n  and returns itself (updated) and the unconsumed flattened_inputs.\r\n  This is then used in the _unflatten mechanism.\r\n\r\nThis is all it takes to permit maskrcnn-benchmark to use\r\nits structured BoxList/ImageList types and trace it without calling\r\nthe .forward directly.\r\nI'll push a model working with this patch in\r\nhttps://github.com/facebookresearch/maskrcnn-benchmark/pull/138\r\n\r\nI must admit I haven't fully checked whether there are ONNX changes needed before it, too, can profit, but I would be hopeful that anything currently usable remains so.\r\n\r\n@fmassa @zdevito \r\n\r\nSo the main downside that I'm aware of is that people will later want to use more elaborate mechanisms, but I think this could be done by just amending what wrap/unwrap are returning / consuming."}