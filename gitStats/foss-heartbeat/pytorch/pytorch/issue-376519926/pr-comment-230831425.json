{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/230831425", "pull_request_review_id": 171658187, "id": 230831425, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMDgzMTQyNQ==", "diff_hunk": "@@ -71,24 +72,31 @@ struct AT_CUDA_API CUDAEvent {\n     if (!was_recorded_) record(stream);\n   }\n \n+  // Note: cudaEventRecord must be called on the same device as the STREAM\n   void record(const CUDAStream& stream) {\n+    at::cuda::CUDAGuard device_index_guard(static_cast<int16_t>(stream.device_index()));", "path": "aten/src/ATen/cuda/CUDAEvent.h", "position": 14, "original_position": 14, "commit_id": "f17fdefad4836755282b98c96c3736c6f2c1e325", "original_commit_id": "f17fdefad4836755282b98c96c3736c6f2c1e325", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "Not really for this PR, but we should eliminate the need for this static cast at some point. `device_index` and `CUDAGuard` should produce and accept `int16_t`, no problem. And in any case, we should use `DeviceIndex` instead to represent the type.", "created_at": "2018-11-05T17:02:40Z", "updated_at": "2018-11-23T15:54:17Z", "html_url": "https://github.com/pytorch/pytorch/pull/13464#discussion_r230831425", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/13464", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/230831425"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/13464#discussion_r230831425"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/13464"}}, "body_html": "<p>Not really for this PR, but we should eliminate the need for this static cast at some point. <code>device_index</code> and <code>CUDAGuard</code> should produce and accept <code>int16_t</code>, no problem. And in any case, we should use <code>DeviceIndex</code> instead to represent the type.</p>", "body_text": "Not really for this PR, but we should eliminate the need for this static cast at some point. device_index and CUDAGuard should produce and accept int16_t, no problem. And in any case, we should use DeviceIndex instead to represent the type."}