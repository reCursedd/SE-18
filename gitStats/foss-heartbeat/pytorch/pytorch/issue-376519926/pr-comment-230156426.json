{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/230156426", "pull_request_review_id": 170829332, "id": 230156426, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMDE1NjQyNg==", "diff_hunk": "@@ -66,37 +67,25 @@ std::vector<at::Device> getDeviceList(const std::vector<at::Tensor>& tensors) {\n   return res;\n }\n \n-// Helper that lets the input ncclStreams to wait for the THC stream\n+// Helper that lets the input ncclStreams to wait for the current stream\n void syncStreams(\n-    THCState* thcState,\n     const std::vector<at::Device>& devices,\n-    std::vector<CUDAEvent>& ncclEvents,\n+    std::vector<at::cuda::CUDAEvent>& ncclEvents,\n     std::vector<at::cuda::CUDAStream>& ncclStreams) {\n-  at::cuda::CUDAGuard gpuGuard;\n   for (size_t i = 0; i < devices.size(); ++i) {\n-    gpuGuard.set_index(devices[i].index());\n-    auto currentThcStream =\n-        THCState_getCurrentStreamOnDevice(thcState, devices[i].index());\n     at::cuda::CUDAStream& ncclStream = ncclStreams[i];\n-    CUDAEvent& ncclEvent = ncclEvents[i];\n-\n-    C10D_CUDA_CHECK(cudaEventRecord(ncclEvent.getEvent(), currentThcStream));\n-    C10D_CUDA_CHECK(\n-        cudaStreamWaitEvent(ncclStream.stream(), ncclEvent.getEvent(), 0));\n+    at::cuda::CUDAEvent& ncclEvent = ncclEvents[i];\n+    ncclEvent.record(at::cuda::getCurrentCUDAStream(devices[i].index()));\n+    ncclEvent.block(ncclStream);", "path": "torch/lib/c10d/ProcessGroupNCCL.cpp", "position": 39, "original_position": 39, "commit_id": "f17fdefad4836755282b98c96c3736c6f2c1e325", "original_commit_id": "e420b564ee929253d29963e7b9708fe1e03c1d78", "user": {"login": "pietern", "id": 9845, "node_id": "MDQ6VXNlcjk4NDU=", "avatar_url": "https://avatars3.githubusercontent.com/u/9845?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietern", "html_url": "https://github.com/pietern", "followers_url": "https://api.github.com/users/pietern/followers", "following_url": "https://api.github.com/users/pietern/following{/other_user}", "gists_url": "https://api.github.com/users/pietern/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietern/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietern/subscriptions", "organizations_url": "https://api.github.com/users/pietern/orgs", "repos_url": "https://api.github.com/users/pietern/repos", "events_url": "https://api.github.com/users/pietern/events{/privacy}", "received_events_url": "https://api.github.com/users/pietern/received_events", "type": "User", "site_admin": false}, "body": "This is less optimal than the previous case (related to the device guard in CUDAEvent::record). Instead of updating a single guard you end up setting/unsetting the device N times. This is `devices.size()` times more `cudaSetDevice` calls.", "created_at": "2018-11-01T18:51:08Z", "updated_at": "2018-11-23T15:54:04Z", "html_url": "https://github.com/pytorch/pytorch/pull/13464#discussion_r230156426", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/13464", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/230156426"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/13464#discussion_r230156426"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/13464"}}, "body_html": "<p>This is less optimal than the previous case (related to the device guard in CUDAEvent::record). Instead of updating a single guard you end up setting/unsetting the device N times. This is <code>devices.size()</code> times more <code>cudaSetDevice</code> calls.</p>", "body_text": "This is less optimal than the previous case (related to the device guard in CUDAEvent::record). Instead of updating a single guard you end up setting/unsetting the device N times. This is devices.size() times more cudaSetDevice calls."}