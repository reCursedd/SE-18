{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/140863118", "pull_request_review_id": 64956713, "id": 140863118, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0MDg2MzExOA==", "diff_hunk": "@@ -6,6 +6,68 @@ using namespace at;\n \n namespace torch { namespace autograd {\n \n+Tensor norm_backward(const Tensor & grad, const Tensor & self, const Scalar & p_) {\n+  auto p = p_.toDouble();\n+  if (p == 2.0) {\n+    return self * (grad / self.norm(2));\n+  } else {\n+    auto pow_ = self.abs().pow(p - 2);\n+    auto scale_v = grad / self.norm(p).toTensor().pow(p - 1);\n+    return self * pow_ * scale_v;\n+  }\n+}\n+\n+Tensor norm_backward(const Tensor & grad, const Tensor & self, const Scalar & p, int64_t dim, bool keepdim) {\n+  throw std::runtime_error(\"norm_backward(dim): NYI\");\n+}\n+\n+Tensor reduce_to(const Tensor & grad, IntList sizes) {\n+  Tensor result = grad;\n+  while (result.dim() > (int64_t)sizes.size()) {\n+    result = result.sum(0, false);\n+  }\n+  for (int64_t i = 0; i < result.dim(); ++i) {\n+    if (sizes[i] == 1 && result.sizes()[i] > 1) {\n+      result = result.sum(i, true);\n+    }\n+  }\n+  return result;\n+}\n+\n+Tensor sum_backward(const Tensor & grad, IntList sizes, int64_t dim, bool keepdim) {\n+  if (!keepdim) {\n+    return grad.unsqueeze(dim).expand(sizes);\n+  } else {\n+    return grad.expand(sizes);\n+  }\n+}\n+\n+Tensor cumsum_backward(const Tensor & x, int64_t dim) {\n+  auto ret = at::cumsum(-x, dim);\n+  auto ret_sum = ret.narrow(dim, ret.size(dim) - 1, 1).clone();\n+  ret -= ret_sum.expand(ret.sizes());\n+  ret += x;\n+  return ret;\n+}\n+\n+Tensor unnarrow(const Tensor & self, IntList sizes, int64_t dimension, int64_t offset) {\n+  auto result = self.type().zeros(sizes);\n+  result.narrow(dimension, offset, self.size(dimension)).copy_(self);\n+  // TODO: hook up grad_fn", "path": "tools/autograd/templates/Functions.cpp", "position": null, "original_position": 51, "commit_id": "e471756dd09f27c1ac6fff4e977d1faeb4b030cf", "original_commit_id": "a5e60c1254517fffaebc9f5432faf08fb533ae4e", "user": {"login": "colesbury", "id": 655866, "node_id": "MDQ6VXNlcjY1NTg2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/655866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colesbury", "html_url": "https://github.com/colesbury", "followers_url": "https://api.github.com/users/colesbury/followers", "following_url": "https://api.github.com/users/colesbury/following{/other_user}", "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions", "organizations_url": "https://api.github.com/users/colesbury/orgs", "repos_url": "https://api.github.com/users/colesbury/repos", "events_url": "https://api.github.com/users/colesbury/events{/privacy}", "received_events_url": "https://api.github.com/users/colesbury/received_events", "type": "User", "site_admin": false}, "body": "Yes, I think so. I don't see a good, efficient way to express the backwards of \"narrow\" based solely on other differentiable ops, which is why this is different and not fully implemented yet.\r\n\r\n(The grad_fn of \"unnarrow\" should just call narrow)", "created_at": "2017-09-25T18:42:31Z", "updated_at": "2018-11-23T15:34:48Z", "html_url": "https://github.com/pytorch/pytorch/pull/2805#discussion_r140863118", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/2805", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/140863118"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/2805#discussion_r140863118"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/2805"}}, "body_html": "<p>Yes, I think so. I don't see a good, efficient way to express the backwards of \"narrow\" based solely on other differentiable ops, which is why this is different and not fully implemented yet.</p>\n<p>(The grad_fn of \"unnarrow\" should just call narrow)</p>", "body_text": "Yes, I think so. I don't see a good, efficient way to express the backwards of \"narrow\" based solely on other differentiable ops, which is why this is different and not fully implemented yet.\n(The grad_fn of \"unnarrow\" should just call narrow)", "in_reply_to_id": 140104580}