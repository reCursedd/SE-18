{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/140830599", "pull_request_review_id": 64956713, "id": 140830599, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0MDgzMDU5OQ==", "diff_hunk": "@@ -28,30 +46,133 @@\n METHOD_DEFINITION_FALLTHROUGH = CodeTemplate(\"\"\"\\\n return baseType->${method_prefix}${api_name}(${unpacked_args});\"\"\")\n \n+METHOD_DEFINITION_FALLTHROUGH_VARIABLE = CodeTemplate(\"\"\"\\\n+return make_variable(baseType->${method_prefix}${api_name}(${unpacked_args}));\"\"\")\n+\n UNWRAP_TENSOR = CodeTemplate(\"\"\"\\\n auto& ${arg_name}_ = checked_unpack(${arg_name}, \"${arg_name}\", ${arg_pos});\"\"\")\n \n-GENERATED_COMMENT = CodeTemplate(\"\"\"\\\n-generated from tools/autograd/templates/${filename}\"\"\")\n+FUNCTION_DECLARATION = CodeTemplate(\"\"\"\\\n+struct ${op} : public Function {\n+  using Function::Function;\n+  variable_list apply(const variable_list& inputs) override;\n+  std::string name() override { return \"${op}\"; }\n+  ${saved_variables}\n+};\n+\"\"\")\n+\n+FUNCTION_DEFINITION = CodeTemplate(\"\"\"\\\n+variable_list ${op}::apply(const variable_list& inputs) {\n+  variable_list grad_inputs(${num_inputs});\n+  ${body}\n+  return grad_inputs;\n+}\n+\"\"\")\n+\n+PY_FUNCTION_DEFINITION = CodeTemplate(\"\"\"\\\n+static PyTypeObject ${op}Class;\n+addClass<${op}>(${op}Class, \"${op}\");\n+\"\"\")\n+\n+\n+DERIVATIVE = CodeTemplate(\"\"\"\\\n+if (should_compute_output(${i})) {\n+  ${unpack_save_variables}\n+  grad_inputs[${i}] = ${derivative};\n+}\n+\"\"\")\n+\n+METHOD_DEFINITION_DERIVATIVE = CodeTemplate(\"\"\"\\\n+auto flags = Function::flags({ ${tensor_args} });\n+auto grad_fn = std::make_shared<${op}>();\n+if (flags.is_executable) {\n+  ${save_variables}\n+}\n+auto output = as_variable(baseType->${method_prefix}${api_name}(${unpacked_args}));\n+wrap_output(*output.get(), std::move(flags), std::move(grad_fn));\n+return ${return_value};\n+\"\"\")\n+\n+METHOD_DEFINITION_INPLACE = CodeTemplate(\"\"\"\\\n+auto& pImpl = static_cast<VariableImpl&>(*self.get());\n+check_inplace(pImpl);\n+auto flags = Function::flags({ ${tensor_args} });\n+auto grad_fn = std::make_shared<${op}>();\n+if (flags.is_executable) {\n+  ${save_variables}\n+}\n+baseType->${method_prefix}${api_name}(${unpacked_args});\n+(*pImpl.version_counter)++;\n+wrap_output(pImpl, std::move(flags), std::move(grad_fn));\n+return self;\n+\"\"\")\n+\n+PY_VARIABLE_METHOD_VARARGS = CodeTemplate(\"\"\"\\\n+static PyObject * THPVariable_${name}(PyObject* self, PyObject* args, PyObject* kwargs)\n+{\n+  HANDLE_TH_ERRORS\n+  static PythonArgParser parser({\n+    ${prototypes}\n+  });\n+  auto& self_ = reinterpret_cast<THPVariable*>(self)->cdata;\n+  PyObject* parsed_args[${max_args}];\n+  auto r = parser.parse(args, kwargs, parsed_args);\n+  ${dispatch}\n+  Py_RETURN_NONE;\n+  END_HANDLE_TH_ERRORS\n+}\n+\"\"\")\n+\n+PY_VARIABLE_CASE = CodeTemplate(\"\"\"\\\n+${cond} (r.idx == ${i}) {\n+  return wrap(${name}(${args_with_self}));\n+\"\"\")\n+\n+PY_VARIABLE_DISPATCH = CodeTemplate(\"\"\"\\\n+inline ${return_type} ${name}(${formal_args}) {\n+  ${AutoNoGIL}\n+  ${AutoGPU}\n+  return self.${name}(${dispatch_args});\n+}\n+\"\"\")\n+\n+PY_VARIABLE_METHOD_NOARGS = CodeTemplate(\"\"\"\\\n+static PyObject * THPVariable_${name}(PyObject* self, PyObject* args)\n+{\n+  HANDLE_TH_ERRORS\n+  auto& self_ = reinterpret_cast<THPVariable*>(self)->cdata;\n+  return wrap(${name}(self_));\n+  END_HANDLE_TH_ERRORS\n+}\n+\"\"\")\n \n PY_VARIABLE_METHOD_DEF = CodeTemplate(\"\"\"\\\n {\"${name}\", (PyCFunction)THPVariable_${name}, ${flags}, NULL},\"\"\")\n \n+GENERATED_COMMENT = CodeTemplate(\"\"\"\\\n+generated from tools/autograd/templates/${filename}\"\"\")\n \n template_path = os.path.join(os.path.dirname(__file__), 'templates')\n \n VARIABLE_TYPE_H = CodeTemplate.from_file(template_path + '/VariableType.h')\n VARIABLE_TYPE_CPP = CodeTemplate.from_file(template_path + '/VariableType.cpp')\n-VARIABLE_METHODS_CPP = CodeTemplate.from_file(template_path + '/python_variable_methods.cpp')\n-\n FUNCTIONS_H = CodeTemplate.from_file(template_path + '/Functions.h')\n FUNCTIONS_CPP = CodeTemplate.from_file(template_path + '/Functions.cpp')\n+PY_VARIABLE_METHODS_CPP = CodeTemplate.from_file(template_path + '/py_variable_methods.cpp')\n+PY_VARIABLE_DISPATCH_H = CodeTemplate.from_file(template_path + '/py_variable_methods_dispatch.h')\n+PY_FUNCTIONS_H = CodeTemplate.from_file(template_path + '/python_functions.h')\n+PY_FUNCTIONS_CPP = CodeTemplate.from_file(template_path + '/python_functions.cpp')\n \n derivatives_path = os.path.join(os.path.dirname(__file__), 'derivatives.yaml')\n+deprecated_path = os.path.join(os.path.dirname(__file__), 'deprecated.yaml')\n \n # Functions with these return types delegate completely to the underlying\n # base at::Type\n FALLTHROUGH_RETURN_TYPES = {'int64_t', 'void*', 'bool', 'IntList'}\n+FALLTHROUGH_FUNCTIONS = {", "path": "tools/autograd/gen_variable_type.py", "position": 160, "original_position": 160, "commit_id": "e471756dd09f27c1ac6fff4e977d1faeb4b030cf", "original_commit_id": "a5e60c1254517fffaebc9f5432faf08fb533ae4e", "user": {"login": "colesbury", "id": 655866, "node_id": "MDQ6VXNlcjY1NTg2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/655866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colesbury", "html_url": "https://github.com/colesbury", "followers_url": "https://api.github.com/users/colesbury/followers", "following_url": "https://api.github.com/users/colesbury/following{/other_user}", "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions", "organizations_url": "https://api.github.com/users/colesbury/orgs", "repos_url": "https://api.github.com/users/colesbury/repos", "events_url": "https://api.github.com/users/colesbury/events{/privacy}", "received_events_url": "https://api.github.com/users/colesbury/received_events", "type": "User", "site_admin": false}, "body": "It's the same. I stopped using `fallthrough: True`. I'll remove those lines from `derivatives.yaml`", "created_at": "2017-09-25T16:40:06Z", "updated_at": "2018-11-23T15:34:47Z", "html_url": "https://github.com/pytorch/pytorch/pull/2805#discussion_r140830599", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/2805", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/140830599"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/2805#discussion_r140830599"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/2805"}}, "body_html": "<p>It's the same. I stopped using <code>fallthrough: True</code>. I'll remove those lines from <code>derivatives.yaml</code></p>", "body_text": "It's the same. I stopped using fallthrough: True. I'll remove those lines from derivatives.yaml", "in_reply_to_id": 140108678}