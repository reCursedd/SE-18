{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/140867065", "pull_request_review_id": 64956713, "id": 140867065, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0MDg2NzA2NQ==", "diff_hunk": "@@ -28,8 +28,8 @@ struct Variable : public at::Tensor {\n   Variable(const Variable & rhs) : Tensor(rhs) {}\n   Variable(Variable && rhs) noexcept : Tensor(std::move(rhs)) {}\n \n-  explicit Variable(Tensor const & rhs) : Tensor(rhs) {}\n-  explicit Variable(Tensor && rhs) noexcept : Tensor(std::move(rhs)) {}\n+  /*implicit*/ Variable(Tensor const & rhs) : Tensor(rhs) {}\n+  /*implicit*/ Variable(Tensor && rhs) noexcept : Tensor(std::move(rhs)) {}", "path": "torch/csrc/autograd/variable.h", "position": null, "original_position": 7, "commit_id": "e471756dd09f27c1ac6fff4e977d1faeb4b030cf", "original_commit_id": "a5e60c1254517fffaebc9f5432faf08fb533ae4e", "user": {"login": "colesbury", "id": 655866, "node_id": "MDQ6VXNlcjY1NTg2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/655866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colesbury", "html_url": "https://github.com/colesbury", "followers_url": "https://api.github.com/users/colesbury/followers", "following_url": "https://api.github.com/users/colesbury/following{/other_user}", "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions", "organizations_url": "https://api.github.com/users/colesbury/orgs", "repos_url": "https://api.github.com/users/colesbury/repos", "events_url": "https://api.github.com/users/colesbury/events{/privacy}", "received_events_url": "https://api.github.com/users/colesbury/received_events", "type": "User", "site_admin": false}, "body": "This doesn't construct a new Variable. `Variable make_variable(at::Tensor data)` constructs a new Variable.\r\n\r\nIt's not possible to construct a new Variable with a Variable as data because the `VariableImpl` [constructor](https://github.com/pytorch/pytorch/blob/1290e586fbc3d6266423f3417723d6620267054b/torch/csrc/autograd/variable.cpp#L11) calls `getType()` which will throw an exception when `type.ID()` [is called](https://github.com/pytorch/pytorch/blob/1290e586fbc3d6266423f3417723d6620267054b/torch/csrc/autograd/variable.cpp#L122) if the data is a Variable.\r\n\r\nThis constructor is similar to casting. It's possible to incorrectly call this constructor on a non-Variable `rhs`. For example, this code is silently incorrect:\r\n\r\n```C++\r\nauto tensor = CPU(kFloat).ones({5, 5})\r\nVariable v(tensor); // BAD\r\nv.requires_grad() = true; // will crash and burn\r\n```\r\n\r\nTo be safe, we could add a check in the body of this constructor. I wouldn't want it to run in opt builds because these constructors are called often and are nearly zero-cost right now.", "created_at": "2017-09-25T18:58:08Z", "updated_at": "2018-11-23T15:34:48Z", "html_url": "https://github.com/pytorch/pytorch/pull/2805#discussion_r140867065", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/2805", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/140867065"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/2805#discussion_r140867065"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/2805"}}, "body_html": "<p>This doesn't construct a new Variable. <code>Variable make_variable(at::Tensor data)</code> constructs a new Variable.</p>\n<p>It's not possible to construct a new Variable with a Variable as data because the <code>VariableImpl</code> <a href=\"https://github.com/pytorch/pytorch/blob/1290e586fbc3d6266423f3417723d6620267054b/torch/csrc/autograd/variable.cpp#L11\">constructor</a> calls <code>getType()</code> which will throw an exception when <code>type.ID()</code> <a href=\"https://github.com/pytorch/pytorch/blob/1290e586fbc3d6266423f3417723d6620267054b/torch/csrc/autograd/variable.cpp#L122\">is called</a> if the data is a Variable.</p>\n<p>This constructor is similar to casting. It's possible to incorrectly call this constructor on a non-Variable <code>rhs</code>. For example, this code is silently incorrect:</p>\n<div class=\"highlight highlight-source-c++\"><pre><span class=\"pl-k\">auto</span> tensor = CPU(<span class=\"pl-c1\">kFloat</span>).ones({<span class=\"pl-c1\">5</span>, <span class=\"pl-c1\">5</span>})\nVariable <span class=\"pl-en\">v</span>(tensor); <span class=\"pl-c\"><span class=\"pl-c\">//</span> BAD</span>\nv.requires_grad() = <span class=\"pl-c1\">true</span>; <span class=\"pl-c\"><span class=\"pl-c\">//</span> will crash and burn</span></pre></div>\n<p>To be safe, we could add a check in the body of this constructor. I wouldn't want it to run in opt builds because these constructors are called often and are nearly zero-cost right now.</p>", "body_text": "This doesn't construct a new Variable. Variable make_variable(at::Tensor data) constructs a new Variable.\nIt's not possible to construct a new Variable with a Variable as data because the VariableImpl constructor calls getType() which will throw an exception when type.ID() is called if the data is a Variable.\nThis constructor is similar to casting. It's possible to incorrectly call this constructor on a non-Variable rhs. For example, this code is silently incorrect:\nauto tensor = CPU(kFloat).ones({5, 5})\nVariable v(tensor); // BAD\nv.requires_grad() = true; // will crash and burn\nTo be safe, we could add a check in the body of this constructor. I wouldn't want it to run in opt builds because these constructors are called often and are nearly zero-cost right now.", "in_reply_to_id": 140105160}