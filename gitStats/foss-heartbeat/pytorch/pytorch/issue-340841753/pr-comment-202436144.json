{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/202436144", "pull_request_review_id": 137135837, "id": 202436144, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMjQzNjE0NA==", "diff_hunk": "@@ -1673,13 +1693,16 @@ std::vector<Value*> inlineCallTo(Graph& g, Graph& callee, ArrayRef<Value*> input\n   return outputs;\n }\n \n-void defineMethodsInModule(Module & m, const std::vector<Def>& definitions, const std::vector<Resolver>& resolvers, SugaredValuePtr self) {\n+void defineMethodsInModule(Module & m, const std::vector<DefAndTypes>& definitions, const std::vector<Resolver>& resolvers, SugaredValuePtr self, bool pure_func) {\n   FunctionTable table;\n   JIT_ASSERT(definitions.size() == resolvers.size());\n+  if (pure_func) {\n+    JIT_ASSERT(definitions.size() == 1);\n+  }\n   auto resolver_it = resolvers.begin();\n   std::vector<Method*> methods;\n-  for(Def def : definitions) {\n-    const std::string& name = def.name().name();\n+  for(DefAndTypes def : definitions) {\n+    const std::string& name = pure_func ? \"forward\" : def.def.name().name();", "path": "torch/csrc/jit/script/compiler.cpp", "position": 80, "original_position": 80, "commit_id": "8a01c6b0c0e2bb996d539db67ec860e099cb71da", "original_commit_id": "8a01c6b0c0e2bb996d539db67ec860e099cb71da", "user": {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, "body": "Note: if DefAndTypes had a FunctionSchema, then you can use its name to decide the method name. That way you can parse `def foo(...)` but then register it as 'forward' by providing a schema with a different name. This will also fix the need for the `pure_func` flag.", "created_at": "2018-07-13T18:27:31Z", "updated_at": "2018-11-23T15:47:22Z", "html_url": "https://github.com/pytorch/pytorch/pull/9405#discussion_r202436144", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/9405", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/202436144"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/9405#discussion_r202436144"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/9405"}}, "body_html": "<p>Note: if DefAndTypes had a FunctionSchema, then you can use its name to decide the method name. That way you can parse <code>def foo(...)</code> but then register it as 'forward' by providing a schema with a different name. This will also fix the need for the <code>pure_func</code> flag.</p>", "body_text": "Note: if DefAndTypes had a FunctionSchema, then you can use its name to decide the method name. That way you can parse def foo(...) but then register it as 'forward' by providing a schema with a different name. This will also fix the need for the pure_func flag."}