{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/198659118", "pull_request_review_id": 132630388, "id": 198659118, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5ODY1OTExOA==", "diff_hunk": "@@ -0,0 +1,70 @@\n+#include \"BatchTensor.h\"\n+\n+namespace torch { namespace jit {\n+\n+BatchTensor::BatchTensor(at::Tensor data, at::Tensor mask, std::vector<bool> dims){\n+  if(data.dim() != mask.dim() || mask.dim() != int64_t(dims.size()) + 1){\n+    throw std::runtime_error(\"malformed MaskedBatch with data: \"\n+      + std::string(data.toString()) + \" mask: \" + mask.toString());\n+  }\n+  this->data = data;\n+  this->mask = mask;\n+  this->dims = dims;\n+}\n+\n+BatchTensor::BatchTensor(std::vector<at::Tensor> datalist, std::vector<bool> dims) {", "path": "torch/csrc/jit/batched/BatchTensor.cpp", "position": null, "original_position": 15, "commit_id": "d2fe9e89e99dd664c9c00d706cc551a0a741e5cc", "original_commit_id": "efa2475b2253aade7c5c818a76b6f417f6afc600", "user": {"login": "jamesr66a", "id": 4685384, "node_id": "MDQ6VXNlcjQ2ODUzODQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/4685384?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamesr66a", "html_url": "https://github.com/jamesr66a", "followers_url": "https://api.github.com/users/jamesr66a/followers", "following_url": "https://api.github.com/users/jamesr66a/following{/other_user}", "gists_url": "https://api.github.com/users/jamesr66a/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamesr66a/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamesr66a/subscriptions", "organizations_url": "https://api.github.com/users/jamesr66a/orgs", "repos_url": "https://api.github.com/users/jamesr66a/repos", "events_url": "https://api.github.com/users/jamesr66a/events{/privacy}", "received_events_url": "https://api.github.com/users/jamesr66a/received_events", "type": "User", "site_admin": false}, "body": "Take `datalist` here as const reference.\r\n\r\nLater, since you're making an internal copy of `dims`, it's okay to take that as value and move out of this instance into the class member\r\n\r\n```\r\n BatchTensor::BatchTensor(const std::vector<at::Tensor>& datalist, std::vector<bool> dims) { \r\n```", "created_at": "2018-06-27T22:22:02Z", "updated_at": "2018-11-23T15:46:29Z", "html_url": "https://github.com/pytorch/pytorch/pull/8922#discussion_r198659118", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/8922", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/198659118"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/8922#discussion_r198659118"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/8922"}}, "body_html": "<p>Take <code>datalist</code> here as const reference.</p>\n<p>Later, since you're making an internal copy of <code>dims</code>, it's okay to take that as value and move out of this instance into the class member</p>\n<pre><code> BatchTensor::BatchTensor(const std::vector&lt;at::Tensor&gt;&amp; datalist, std::vector&lt;bool&gt; dims) { \n</code></pre>", "body_text": "Take datalist here as const reference.\nLater, since you're making an internal copy of dims, it's okay to take that as value and move out of this instance into the class member\n BatchTensor::BatchTensor(const std::vector<at::Tensor>& datalist, std::vector<bool> dims) {"}