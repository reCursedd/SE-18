{"url": "https://api.github.com/repos/pytorch/pytorch/issues/12782", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/12782/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/12782/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/12782/events", "html_url": "https://github.com/pytorch/pytorch/pull/12782", "id": 371250356, "node_id": "MDExOlB1bGxSZXF1ZXN0MjIzNzQwMzA3", "number": 12782, "title": "Try to reduce c10d test flakiness", "user": {"login": "pietern", "id": 9845, "node_id": "MDQ6VXNlcjk4NDU=", "avatar_url": "https://avatars3.githubusercontent.com/u/9845?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietern", "html_url": "https://github.com/pietern", "followers_url": "https://api.github.com/users/pietern/followers", "following_url": "https://api.github.com/users/pietern/following{/other_user}", "gists_url": "https://api.github.com/users/pietern/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietern/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietern/subscriptions", "organizations_url": "https://api.github.com/users/pietern/orgs", "repos_url": "https://api.github.com/users/pietern/repos", "events_url": "https://api.github.com/users/pietern/events{/privacy}", "received_events_url": "https://api.github.com/users/pietern/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-10-17T20:18:52Z", "updated_at": "2018-11-23T15:53:09Z", "closed_at": "2018-10-18T19:13:50Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/12782", "html_url": "https://github.com/pytorch/pytorch/pull/12782", "diff_url": "https://github.com/pytorch/pytorch/pull/12782.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/12782.patch"}, "body_html": "<p>Summary: We have seen the \"Address already in use\" error popup a few times when instantiating the TCPStore. The port that it uses is dynamically generated through common.find_free_port(), which binds a new socket to a random port, closes the socket, and returns the port that the OS had assigned. If some other process grabs that port in the time between closing the socket and the TCPStore binding to it, the bind error shows up. This commit changes most tests to use the FileStore instead and includes a retry when testing the TCPStore.</p>\n<p>Differential Revision: D10433401</p>", "body_text": "Summary: We have seen the \"Address already in use\" error popup a few times when instantiating the TCPStore. The port that it uses is dynamically generated through common.find_free_port(), which binds a new socket to a random port, closes the socket, and returns the port that the OS had assigned. If some other process grabs that port in the time between closing the socket and the TCPStore binding to it, the bind error shows up. This commit changes most tests to use the FileStore instead and includes a retry when testing the TCPStore.\nDifferential Revision: D10433401", "body": "Summary: We have seen the \"Address already in use\" error popup a few times when instantiating the TCPStore. The port that it uses is dynamically generated through common.find_free_port(), which binds a new socket to a random port, closes the socket, and returns the port that the OS had assigned. If some other process grabs that port in the time between closing the socket and the TCPStore binding to it, the bind error shows up. This commit changes most tests to use the FileStore instead and includes a retry when testing the TCPStore.\n\nDifferential Revision: D10433401\n"}