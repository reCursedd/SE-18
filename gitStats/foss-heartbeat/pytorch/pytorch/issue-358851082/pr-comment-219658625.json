{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/219658625", "pull_request_review_id": 157896042, "id": 219658625, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxOTY1ODYyNQ==", "diff_hunk": "@@ -409,49 +395,80 @@ inline bool operator!=(const TypeMeta& lhs, const TypeMeta& rhs) noexcept {\n #ifdef _MSC_VER\n #define CAFFE_KNOWN_TYPE(T)                                               \\\n   template <>                                                             \\\n-  AT_CORE_EXPORT TypeIdentifier TypeMeta::Id<T>() {                       \\\n+  AT_CORE_EXPORT TypeIdentifier TypeIdentifier::Get<T>() {                \\\n     static const TypeIdentifier type_id = TypeIdentifier::createTypeId(); \\\n-    static TypeNameRegisterer<T> registerer(type_id, #T);                 \\\n     return type_id;                                                       \\\n+  }                                                                       \\\n+  namespace detail {                                                      \\\n+  template <>                                                             \\\n+  AT_CORE_EXPORT const char* __TypeName<T>() noexcept {                   \\\n+    return #T;                                                            \\\n+  }                                                                       \\\n+  template <>                                                             \\\n+  AT_CORE_EXPORT const TypeMetaData* _TypeMetaData<T>() noexcept {        \\\n+    static TypeMetaData singleton = createTypeMetaData<T>();              \\\n+    return &singleton;                                                    \\\n+  }                                                                       \\\n   }\n #else // _MSC_VER\n #define CAFFE_KNOWN_TYPE(T)                                               \\\n   template <>                                                             \\\n-  TypeIdentifier TypeMeta::Id<T>() {                                      \\\n+  TypeIdentifier TypeIdentifier::Get<T>() {                               \\\n     static const TypeIdentifier type_id = TypeIdentifier::createTypeId(); \\\n-    static TypeNameRegisterer<T> registerer(type_id, #T);                 \\\n     return type_id;                                                       \\\n+  }                                                                       \\\n+  namespace detail {                                                      \\\n+  template <>                                                             \\\n+  const char* __TypeName<T>() noexcept {                                  \\\n+    return #T;                                                            \\\n+  }                                                                       \\\n+  template <>                                                             \\\n+  const TypeMetaData* _TypeMetaData<T>() noexcept {                       \\", "path": "aten/src/ATen/core/typeid.h", "position": null, "original_position": 587, "commit_id": "25e01f322fe194f8bc320f6285d1065d4712bbf5", "original_commit_id": "440524f900a7cfb2d3bb2c7ae1c9e3c42ff9a514", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "(This doesn't seem like what is causing the CI failure though...)", "created_at": "2018-09-22T02:13:24Z", "updated_at": "2018-11-23T15:51:48Z", "html_url": "https://github.com/pytorch/pytorch/pull/11502#discussion_r219658625", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/11502", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/219658625"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/11502#discussion_r219658625"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/11502"}}, "body_html": "<p>(This doesn't seem like what is causing the CI failure though...)</p>", "body_text": "(This doesn't seem like what is causing the CI failure though...)", "in_reply_to_id": 219658236}