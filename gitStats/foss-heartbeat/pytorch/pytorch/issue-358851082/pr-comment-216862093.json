{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/216862093", "pull_request_review_id": 154443384, "id": 216862093, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNjg2MjA5Mw==", "diff_hunk": "@@ -81,50 +90,144 @@ AT_DEFINE_HASH_FOR_IDWRAPPER(caffe2::TypeIdentifier)\n \n namespace caffe2 {\n \n-AT_CORE_API std::unordered_map<TypeIdentifier, std::string>& gTypeNames();\n-AT_CORE_API std::unordered_set<std::string>& gRegisteredTypeNames();\n \n+namespace detail {\n+\n+struct TypeMetaData final {\n+  using PlacementNew = void(void*, size_t);\n+  using TypedCopy = void(const void*, void*, size_t);\n+  using TypedDestructor = void(void*, size_t);\n+\n+  size_t itemsize_;\n+  PlacementNew* ctor_;\n+  TypedCopy* copy_;\n+  TypedDestructor* dtor_;\n+  TypeIdentifier id_;\n+  const char* name_;\n+};\n+\n+// Mechanism for throwing errors which can't be prevented at compile time\n+// due to type erasure. E.g. somebody calling TypeMeta::copy() for\n+// non-copiable type. Right now just throws exception but is implemented\n+// in .cpp to manage dependencies\n+void _ThrowRuntimeTypeLogicError(const std::string& msg);\n \n-AT_CORE_API std::mutex& gTypeRegistrationMutex();\n+/**\n+ * Placement new function for the type.\n+ */\n+template <typename T>\n+inline void _Ctor(void* ptr, size_t n) {\n+  T* typed_ptr = static_cast<T*>(ptr);\n+  for (size_t i = 0; i < n; ++i) {\n+    new (typed_ptr + i) T;\n+  }\n+}\n \n template <typename T>\n-struct TypeNameRegisterer {\n-  TypeNameRegisterer(TypeIdentifier id, const std::string& literal_name) {\n-    std::lock_guard<std::mutex> guard(gTypeRegistrationMutex());\n-#ifdef __GXX_RTTI\n-    (void)literal_name;\n-\n-    std::string name = at::demangle(typeid(T).name());\n-    // If we are in RTTI mode, we will also use this opportunity to do sanity\n-    // check if there are duplicated ids registered for the same type. This\n-    // usually happens when one does not do RTLD_GLOBAL, which is often the\n-    // case in Python. The way we do the check is to make sure that there are\n-    // no duplicated names registered - this could be done by checking the\n-    // uniqueness of names.\n-    if (gRegisteredTypeNames().count(name)) {\n-      AT_ERROR(\"typeid.h: Type name \", name, \" was registered twice.  \"\n-               \"This should not happen.  Things to check:\\n\"\n-               \"1. Did you add a new CAFFE_KNOWN_TYPE?  If so, check that \"\n-               \"it is not duplicated with an existing CAFFE_KNOWN_TYPE.\\n\"\n-               \"2. Did you build and install PyTorch and Caffe2 separately? \"\n-               \"For example, this would be the case if you ran scripts/onnx/install.sh or \"\n-               \"scripts/onnx/install-develop.sh prior to Aug 12, 2018 \"\n-               \"(commit 1756daaa7530d).  If so, rebuild using the environment variable \"\n-               \" FULL_CAFFE2=1 (if you build latest master, the ONNX scripts are \"\n-               \"updated to do this for you.) \"\n-               \"For more context, see https://github.com/pytorch/pytorch/issues/10460\");\n-    }\n-    gRegisteredTypeNames().insert(name);\n-    gTypeNames()[id] = name;\n-#else // __GXX_RTTI\n-    if (literal_name.empty()) {\n-      gTypeNames()[id] = \"(RTTI disabled, cannot show name)\";\n-    } else {\n-      gTypeNames()[id] = literal_name;\n-    }\n-#endif // __GXX_RTTI\n+inline void _CtorNotDefault(void* /*ptr*/, size_t /*n*/) {\n+  _ThrowRuntimeTypeLogicError(\n+      \"Type \" + std::string(at::demangle_type<T>()) +\n+      \" is not default-constructible.\");\n+}\n+\n+template <\n+    typename T,\n+    typename std::enable_if<std::is_default_constructible<T>::value>::type* =\n+        nullptr>\n+inline TypeMetaData::PlacementNew* _PickCtor() {\n+  return &_Ctor<T>;\n+}\n+\n+template <\n+    typename T,\n+    typename std::enable_if<!std::is_default_constructible<T>::value>::type* =\n+        nullptr>\n+inline TypeMetaData::PlacementNew* _PickCtor() {\n+  return &_CtorNotDefault<T>;\n+}\n+\n+/**\n+ * Typed copy function for classes.\n+ */\n+template <typename T>\n+inline void _Copy(const void* src, void* dst, size_t n) {\n+  const T* typed_src = static_cast<const T*>(src);", "path": "aten/src/ATen/core/typeid.h", "position": 194, "original_position": 141, "commit_id": "25e01f322fe194f8bc320f6285d1065d4712bbf5", "original_commit_id": "69b952cfd067c985bf9ab70b44370eb4112632e9", "user": {"login": "smessmer", "id": 2373925, "node_id": "MDQ6VXNlcjIzNzM5MjU=", "avatar_url": "https://avatars3.githubusercontent.com/u/2373925?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smessmer", "html_url": "https://github.com/smessmer", "followers_url": "https://api.github.com/users/smessmer/followers", "following_url": "https://api.github.com/users/smessmer/following{/other_user}", "gists_url": "https://api.github.com/users/smessmer/gists{/gist_id}", "starred_url": "https://api.github.com/users/smessmer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smessmer/subscriptions", "organizations_url": "https://api.github.com/users/smessmer/orgs", "repos_url": "https://api.github.com/users/smessmer/repos", "events_url": "https://api.github.com/users/smessmer/events{/privacy}", "received_events_url": "https://api.github.com/users/smessmer/received_events", "type": "User", "site_admin": false}, "body": "This is not changed in this PR and worked before, so I hope it's correct ;)", "created_at": "2018-09-12T00:05:40Z", "updated_at": "2018-11-23T15:51:06Z", "html_url": "https://github.com/pytorch/pytorch/pull/11502#discussion_r216862093", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/11502", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/216862093"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/11502#discussion_r216862093"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/11502"}}, "body_html": "<p>This is not changed in this PR and worked before, so I hope it's correct ;)</p>", "body_text": "This is not changed in this PR and worked before, so I hope it's correct ;)", "in_reply_to_id": 216834314}