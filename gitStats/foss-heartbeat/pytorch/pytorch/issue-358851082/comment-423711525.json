{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/423711525", "html_url": "https://github.com/pytorch/pytorch/pull/11502#issuecomment-423711525", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/11502", "id": 423711525, "node_id": "MDEyOklzc3VlQ29tbWVudDQyMzcxMTUyNQ==", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "created_at": "2018-09-22T02:50:57Z", "updated_at": "2018-09-22T02:50:57Z", "author_association": "CONTRIBUTOR", "body_html": "<p>My guess for why CI is failing is that you need to mark the template specializations as visible, otherwise they won't be visible across compilation units. (I don't know why the old code didn't have this problem; guess it got lucky.)</p>\n<p>Simple way to show that this matters:</p>\n<pre><code>hnavarro-mba:cross-comp-tempalte ezyang$ cat a.cpp\n#include \"a.h\"\ntemplate&lt;&gt;\nvoid f&lt;int&gt;() {}\nhnavarro-mba:cross-comp-tempalte ezyang$ cat a.h\ntemplate&lt;typename T&gt;\nvoid f();\nhnavarro-mba:cross-comp-tempalte ezyang$ cat b.cpp\n#include \"a.h\"\nint main() {\n  f&lt;int&gt;();\n  return 0;\n}\nhnavarro-mba:cross-comp-tempalte ezyang$ g++ -shared a.cpp -o liba.dylib -fvisibility=hidden\nhnavarro-mba:cross-comp-tempalte ezyang$ g++ -L. -la b.cpp\nUndefined symbols for architecture x86_64:\n  \"void f&lt;int&gt;()\", referenced from:\n      _main in b-0f4f7f.o\nld: symbol(s) not found for architecture x86_64\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\nhnavarro-mba:cross-comp-tempalte ezyang$ g++ -shared a.cpp -o liba.dylib \nhnavarro-mba:cross-comp-tempalte ezyang$ g++ -L. -la b.cpp\nhnavarro-mba:cross-comp-tempalte ezyang$ \n</code></pre>", "body_text": "My guess for why CI is failing is that you need to mark the template specializations as visible, otherwise they won't be visible across compilation units. (I don't know why the old code didn't have this problem; guess it got lucky.)\nSimple way to show that this matters:\nhnavarro-mba:cross-comp-tempalte ezyang$ cat a.cpp\n#include \"a.h\"\ntemplate<>\nvoid f<int>() {}\nhnavarro-mba:cross-comp-tempalte ezyang$ cat a.h\ntemplate<typename T>\nvoid f();\nhnavarro-mba:cross-comp-tempalte ezyang$ cat b.cpp\n#include \"a.h\"\nint main() {\n  f<int>();\n  return 0;\n}\nhnavarro-mba:cross-comp-tempalte ezyang$ g++ -shared a.cpp -o liba.dylib -fvisibility=hidden\nhnavarro-mba:cross-comp-tempalte ezyang$ g++ -L. -la b.cpp\nUndefined symbols for architecture x86_64:\n  \"void f<int>()\", referenced from:\n      _main in b-0f4f7f.o\nld: symbol(s) not found for architecture x86_64\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\nhnavarro-mba:cross-comp-tempalte ezyang$ g++ -shared a.cpp -o liba.dylib \nhnavarro-mba:cross-comp-tempalte ezyang$ g++ -L. -la b.cpp\nhnavarro-mba:cross-comp-tempalte ezyang$", "body": "My guess for why CI is failing is that you need to mark the template specializations as visible, otherwise they won't be visible across compilation units. (I don't know why the old code didn't have this problem; guess it got lucky.)\r\n\r\nSimple way to show that this matters:\r\n\r\n```\r\nhnavarro-mba:cross-comp-tempalte ezyang$ cat a.cpp\r\n#include \"a.h\"\r\ntemplate<>\r\nvoid f<int>() {}\r\nhnavarro-mba:cross-comp-tempalte ezyang$ cat a.h\r\ntemplate<typename T>\r\nvoid f();\r\nhnavarro-mba:cross-comp-tempalte ezyang$ cat b.cpp\r\n#include \"a.h\"\r\nint main() {\r\n  f<int>();\r\n  return 0;\r\n}\r\nhnavarro-mba:cross-comp-tempalte ezyang$ g++ -shared a.cpp -o liba.dylib -fvisibility=hidden\r\nhnavarro-mba:cross-comp-tempalte ezyang$ g++ -L. -la b.cpp\r\nUndefined symbols for architecture x86_64:\r\n  \"void f<int>()\", referenced from:\r\n      _main in b-0f4f7f.o\r\nld: symbol(s) not found for architecture x86_64\r\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\r\nhnavarro-mba:cross-comp-tempalte ezyang$ g++ -shared a.cpp -o liba.dylib \r\nhnavarro-mba:cross-comp-tempalte ezyang$ g++ -L. -la b.cpp\r\nhnavarro-mba:cross-comp-tempalte ezyang$ \r\n```"}