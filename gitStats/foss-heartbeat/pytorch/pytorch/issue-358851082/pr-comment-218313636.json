{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/218313636", "pull_request_review_id": 156221069, "id": 218313636, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxODMxMzYzNg==", "diff_hunk": "@@ -134,253 +237,123 @@ struct TypeNameRegisterer {\n  */\n class AT_CORE_API TypeMeta {\n  public:\n-  using PlacementNew = void(void*, size_t);\n-  using TypedCopy = void(const void*, void*, size_t);\n-  using TypedDestructor = void(void*, size_t);\n+  using PlacementNew = detail::TypeMetaData::PlacementNew;\n+  using TypedCopy = detail::TypeMetaData::TypedCopy;\n+  using TypedDestructor = detail::TypeMetaData::TypedDestructor;\n+\n   /** Create a dummy TypeMeta object. To create a TypeMeta object for a specific\n    * type, use TypeMeta::Make<T>().\n    */\n-  TypeMeta() noexcept\n-      : id_(TypeIdentifier::uninitialized()),\n-        itemsize_(0),\n-        ctor_(nullptr),\n-        copy_(nullptr),\n-        dtor_(nullptr) {}\n+  constexpr TypeMeta() noexcept\n+      : data_(&uninitialized_) {}\n \n   /**\n    * Copy constructor.\n    */\n-  TypeMeta(const TypeMeta& src) noexcept = default;\n+  constexpr TypeMeta(const TypeMeta& src) noexcept = default;\n \n   /**\n    * Assignment operator.\n    */\n-  TypeMeta& operator=(const TypeMeta& src) noexcept = default;\n+  AT_CPP14_CONSTEXPR TypeMeta& operator=(const TypeMeta& src) noexcept = default;\n \n-  TypeMeta(TypeMeta&& rhs) noexcept = default;\n+  constexpr TypeMeta(TypeMeta&& rhs) noexcept = default;\n \n  private:\n   // TypeMeta can only be created by Make, making sure that we do not\n   // create incorrectly mixed up TypeMeta objects.\n-  TypeMeta(\n-      TypeIdentifier i,\n-      size_t s,\n-      PlacementNew* ctor,\n-      TypedCopy* copy,\n-      TypedDestructor* dtor) noexcept\n-      : id_(i), itemsize_(s), ctor_(ctor), copy_(copy), dtor_(dtor) {}\n-\n-  // Mechanism for throwing errors which can't be prevented at compile time\n-  // due to type erasure. E.g. somebody calling TypeMeta::copy() for\n-  // non-copiable type. Right now just throws exception but is implemented\n-  // in .cpp to manage dependencies\n-  static void _ThrowRuntimeTypeLogicError(const std::string& msg);\n+  constexpr TypeMeta(const detail::TypeMetaData* data) noexcept\n+      : data_(data) {}\n \n  public:\n   /**\n    * Returns the type id.\n    */\n-  const TypeIdentifier& id() const noexcept {\n-    return id_;\n+  constexpr TypeIdentifier id() const noexcept {\n+    return data_->id_;\n   }\n   /**\n    * Returns the size of the item.\n    */\n-  const size_t& itemsize() const noexcept {\n-    return itemsize_;\n+  constexpr size_t itemsize() const noexcept {", "path": "aten/src/ATen/core/typeid.h", "position": 370, "original_position": 293, "commit_id": "25e01f322fe194f8bc320f6285d1065d4712bbf5", "original_commit_id": "850ad0b7295b8c2033e54aaa87ae0d5400e1d576", "user": {"login": "dzhulgakov", "id": 17890620, "node_id": "MDQ6VXNlcjE3ODkwNjIw", "avatar_url": "https://avatars2.githubusercontent.com/u/17890620?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dzhulgakov", "html_url": "https://github.com/dzhulgakov", "followers_url": "https://api.github.com/users/dzhulgakov/followers", "following_url": "https://api.github.com/users/dzhulgakov/following{/other_user}", "gists_url": "https://api.github.com/users/dzhulgakov/gists{/gist_id}", "starred_url": "https://api.github.com/users/dzhulgakov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dzhulgakov/subscriptions", "organizations_url": "https://api.github.com/users/dzhulgakov/orgs", "repos_url": "https://api.github.com/users/dzhulgakov/repos", "events_url": "https://api.github.com/users/dzhulgakov/events{/privacy}", "received_events_url": "https://api.github.com/users/dzhulgakov/received_events", "type": "User", "site_admin": false}, "body": "dump question - how does constexpr help here?", "created_at": "2018-09-18T06:42:16Z", "updated_at": "2018-11-23T15:51:33Z", "html_url": "https://github.com/pytorch/pytorch/pull/11502#discussion_r218313636", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/11502", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/218313636"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/11502#discussion_r218313636"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/11502"}}, "body_html": "<p>dump question - how does constexpr help here?</p>", "body_text": "dump question - how does constexpr help here?"}