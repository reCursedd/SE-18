{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/419976773", "html_url": "https://github.com/pytorch/pytorch/pull/10881#issuecomment-419976773", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/10881", "id": 419976773, "node_id": "MDEyOklzc3VlQ29tbWVudDQxOTk3Njc3Mw==", "user": {"login": "mcarilli", "id": 7799218, "node_id": "MDQ6VXNlcjc3OTkyMTg=", "avatar_url": "https://avatars0.githubusercontent.com/u/7799218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarilli", "html_url": "https://github.com/mcarilli", "followers_url": "https://api.github.com/users/mcarilli/followers", "following_url": "https://api.github.com/users/mcarilli/following{/other_user}", "gists_url": "https://api.github.com/users/mcarilli/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarilli/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarilli/subscriptions", "organizations_url": "https://api.github.com/users/mcarilli/orgs", "repos_url": "https://api.github.com/users/mcarilli/repos", "events_url": "https://api.github.com/users/mcarilli/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarilli/received_events", "type": "User", "site_admin": false}, "created_at": "2018-09-10T16:32:27Z", "updated_at": "2018-09-10T16:32:27Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=4583066\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/apaszke\">@apaszke</a> Again, I'm not sure what you mean.  My goal is to create NVTX ranges annotated with sequence numbers, and NVTX ranges are pushed and popped on the fly (wrapping the calls they are intended to mark).  They don't return anything to Python, they end up in the sqlite file created by the nvprof executable.  I don't believe there is a way to stitch sequence number information onto NVTX ranges after they've been pushed and popped.</p>\n<p>If you're suggesting I move the annotations to use profiler::Event instead of NVTX, I agree that string processing could be postponed, but I'm afraid that defeats the purpose for us.  The research and arch people I'm supporting need sequence number information to be integrated into the nvprof dumps.</p>", "body_text": "@apaszke Again, I'm not sure what you mean.  My goal is to create NVTX ranges annotated with sequence numbers, and NVTX ranges are pushed and popped on the fly (wrapping the calls they are intended to mark).  They don't return anything to Python, they end up in the sqlite file created by the nvprof executable.  I don't believe there is a way to stitch sequence number information onto NVTX ranges after they've been pushed and popped.\nIf you're suggesting I move the annotations to use profiler::Event instead of NVTX, I agree that string processing could be postponed, but I'm afraid that defeats the purpose for us.  The research and arch people I'm supporting need sequence number information to be integrated into the nvprof dumps.", "body": "@apaszke Again, I'm not sure what you mean.  My goal is to create NVTX ranges annotated with sequence numbers, and NVTX ranges are pushed and popped on the fly (wrapping the calls they are intended to mark).  They don't return anything to Python, they end up in the sqlite file created by the nvprof executable.  I don't believe there is a way to stitch sequence number information onto NVTX ranges after they've been pushed and popped.  \r\n\r\nIf you're suggesting I move the annotations to use profiler::Event instead of NVTX, I agree that string processing could be postponed, but I'm afraid that defeats the purpose for us.  The research and arch people I'm supporting need sequence number information to be integrated into the nvprof dumps."}