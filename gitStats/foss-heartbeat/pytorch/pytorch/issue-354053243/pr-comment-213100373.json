{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/213100373", "pull_request_review_id": 149866174, "id": 213100373, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMzEwMDM3Mw==", "diff_hunk": "@@ -95,14 +97,25 @@ RecordFunction::RecordFunction(const char* name) {\n   pushRange(name);\n }\n \n+RecordFunction::RecordFunction(const char* name, int64_t current_sequence_nr) \n+{\n+  if (state == ProfilerState::Disabled)\n+    return;\n+  std::stringstream s;\n+  s << name << \", current sequence nr \" << current_sequence_nr;\n+  pushRange(s.str());", "path": "torch/csrc/autograd/profiler.cpp", "position": null, "original_position": 19, "commit_id": "e381a7b571a238371006fd69e7aff72bdd1ffb1e", "original_commit_id": "ca57b19fd7ee94f62e9c9aae97a7687f257caa29", "user": {"login": "mcarilli", "id": 7799218, "node_id": "MDQ6VXNlcjc3OTkyMTg=", "avatar_url": "https://avatars0.githubusercontent.com/u/7799218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarilli", "html_url": "https://github.com/mcarilli", "followers_url": "https://api.github.com/users/mcarilli/followers", "following_url": "https://api.github.com/users/mcarilli/following{/other_user}", "gists_url": "https://api.github.com/users/mcarilli/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarilli/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarilli/subscriptions", "organizations_url": "https://api.github.com/users/mcarilli/orgs", "repos_url": "https://api.github.com/users/mcarilli/repos", "events_url": "https://api.github.com/users/mcarilli/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarilli/received_events", "type": "User", "site_admin": false}, "body": "Again, thank you for the quick review.\r\n\r\nLess verbose is definitely an improvement.  How about `Add, seq=123` and `AddBackward, forward_seq=123`?\r\n\r\n`All string formatting should happen when the trace is processed.` what do you mean by this?  `trace` is an overloaded/ambiguous term here.  Should I defer the string processing to [the actual nvtxRangePushA call](https://github.com/pytorch/pytorch/blob/ca57b19fd7ee94f62e9c9aae97a7687f257caa29/torch/csrc/autograd/profiler.cpp#L48), which is the latest it can be deferred?\r\n\r\nThe id needs to be dynamically appended to a string somehow, some way.  Globally, I don't see how this overhead can be avoided.", "created_at": "2018-08-27T20:15:09Z", "updated_at": "2018-11-23T15:50:06Z", "html_url": "https://github.com/pytorch/pytorch/pull/10881#discussion_r213100373", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/10881", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/213100373"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/10881#discussion_r213100373"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/10881"}}, "body_html": "<p>Again, thank you for the quick review.</p>\n<p>Less verbose is definitely an improvement.  How about <code>Add, seq=123</code> and <code>AddBackward, forward_seq=123</code>?</p>\n<p><code>All string formatting should happen when the trace is processed.</code> what do you mean by this?  <code>trace</code> is an overloaded/ambiguous term here.  Should I defer the string processing to <a href=\"https://github.com/pytorch/pytorch/blob/ca57b19fd7ee94f62e9c9aae97a7687f257caa29/torch/csrc/autograd/profiler.cpp#L48\">the actual nvtxRangePushA call</a>, which is the latest it can be deferred?</p>\n<p>The id needs to be dynamically appended to a string somehow, some way.  Globally, I don't see how this overhead can be avoided.</p>", "body_text": "Again, thank you for the quick review.\nLess verbose is definitely an improvement.  How about Add, seq=123 and AddBackward, forward_seq=123?\nAll string formatting should happen when the trace is processed. what do you mean by this?  trace is an overloaded/ambiguous term here.  Should I defer the string processing to the actual nvtxRangePushA call, which is the latest it can be deferred?\nThe id needs to be dynamically appended to a string somehow, some way.  Globally, I don't see how this overhead can be avoided.", "in_reply_to_id": 212831631}