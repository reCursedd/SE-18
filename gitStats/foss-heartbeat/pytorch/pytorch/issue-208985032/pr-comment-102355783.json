{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/102355783", "pull_request_review_id": 23109445, "id": 102355783, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMjM1NTc4Mw==", "diff_hunk": "@@ -439,16 +439,37 @@ def cross_entropy(input, target, weight=None, size_average=True):\n     See :class:`torch.nn.CrossEntropyLoss` for details.\n \n     Args:\n-        input: Variable :math:`(N, C)` where `C = number of classes`\n-        target: Variable :math:`(N)` where each value is `0 <= targets[i] <= C-1`\n+        input: Variable :math:`(N, C)` or :math:`(N, C, H, W)`\n+            where `C = number of classes`, `H = image height`,\n+            and `W = image width`.\n+        target: Variable :math:`(N)` or :math:`(N, H, W)`\n+            where each value is `0 <= targets[i] <= C-1`\n         weight (Variable, optional): a manual rescaling weight given to each\n                 class. If given, has to be a Variable of size \"nclasses\"\n         size_average (bool, optional): By default, the losses are averaged\n                 over observations for each minibatch. However, if the field\n                 sizeAverage is set to False, the losses are instead summed\n                 for each minibatch.\n     \"\"\"\n-    return nll_loss(log_softmax(input), target, weight, size_average)\n+    dim = input.dim()\n+    if dim == 2:\n+        return nll_loss(log_softmax(input), target, weight, size_average)\n+    elif dim == 4:\n+        N, C, H, W = input.size()\n+        log_p = F.log_softmax(input)  # (N, C, H, W)\n+        log_p = log_p.transpose(1, 2).transpose(2, 3).contiguous().view(-1, C)\n+        log_p = log_p[target.view(N, H, W, 1).repeat(1, 1, 1, C) >= 0]\n+        log_p = log_p.view(-1, C)  # (M, C) where M = (target >= 0).sum()\n+        mask = target >= 0  # (M,)\n+        target = target[mask]\n+        loss = F.nll_loss(log_p, target, weight=weight, size_average=False)\n+        if size_average:\n+            loss /= mask.sum().data[0]\n+        else:\n+            loss /= N", "path": "torch/nn/functional.py", "position": null, "original_position": 34, "commit_id": "b9ed14efb6f66a8339d2cb71d2a6804059c454d4", "original_commit_id": "0b61aa54c796296ed64520ad7e2aa101f40da4c5", "user": {"login": "wkentaro", "id": 4310419, "node_id": "MDQ6VXNlcjQzMTA0MTk=", "avatar_url": "https://avatars2.githubusercontent.com/u/4310419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wkentaro", "html_url": "https://github.com/wkentaro", "followers_url": "https://api.github.com/users/wkentaro/followers", "following_url": "https://api.github.com/users/wkentaro/following{/other_user}", "gists_url": "https://api.github.com/users/wkentaro/gists{/gist_id}", "starred_url": "https://api.github.com/users/wkentaro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wkentaro/subscriptions", "organizations_url": "https://api.github.com/users/wkentaro/orgs", "repos_url": "https://api.github.com/users/wkentaro/repos", "events_url": "https://api.github.com/users/wkentaro/events{/privacy}", "received_events_url": "https://api.github.com/users/wkentaro/received_events", "type": "User", "site_admin": false}, "body": "Ok.", "created_at": "2017-02-22T00:29:00Z", "updated_at": "2018-11-23T15:32:29Z", "html_url": "https://github.com/pytorch/pytorch/pull/802#discussion_r102355783", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/802", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/102355783"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/802#discussion_r102355783"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/802"}}, "body_html": "<p>Ok.</p>", "body_text": "Ok.", "in_reply_to_id": 102355365}