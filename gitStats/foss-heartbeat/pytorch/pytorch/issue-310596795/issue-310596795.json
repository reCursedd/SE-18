{"url": "https://api.github.com/repos/pytorch/pytorch/issues/6197", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/6197/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/6197/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/6197/events", "html_url": "https://github.com/pytorch/pytorch/issues/6197", "id": 310596795, "node_id": "MDU6SXNzdWUzMTA1OTY3OTU=", "number": 6197, "title": "Fix integral tensor division ", "user": {"login": "li-roy", "id": 8813817, "node_id": "MDQ6VXNlcjg4MTM4MTc=", "avatar_url": "https://avatars0.githubusercontent.com/u/8813817?v=4", "gravatar_id": "", "url": "https://api.github.com/users/li-roy", "html_url": "https://github.com/li-roy", "followers_url": "https://api.github.com/users/li-roy/followers", "following_url": "https://api.github.com/users/li-roy/following{/other_user}", "gists_url": "https://api.github.com/users/li-roy/gists{/gist_id}", "starred_url": "https://api.github.com/users/li-roy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/li-roy/subscriptions", "organizations_url": "https://api.github.com/users/li-roy/orgs", "repos_url": "https://api.github.com/users/li-roy/repos", "events_url": "https://api.github.com/users/li-roy/events{/privacy}", "received_events_url": "https://api.github.com/users/li-roy/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-04-02T20:17:20Z", "updated_at": "2018-04-03T18:54:31Z", "closed_at": "2018-04-03T18:54:31Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Example below. While we don't support ops between different dtype tensors, we should consider changing this behavior. In numpy, this would return a floating tensor.</p>\n<pre><code>&gt;&gt;&gt; import torch\n&gt;&gt;&gt; a = torch.tensor([1,2,3], dtype=torch.long)\n&gt;&gt;&gt; b = torch.tensor([3,2,1], dtype=torch.long)\n&gt;&gt;&gt; a/b\n\n 0\n 1\n 3\n[torch.LongTensor of size (3,)]\n</code></pre>", "body_text": "Example below. While we don't support ops between different dtype tensors, we should consider changing this behavior. In numpy, this would return a floating tensor.\n>>> import torch\n>>> a = torch.tensor([1,2,3], dtype=torch.long)\n>>> b = torch.tensor([3,2,1], dtype=torch.long)\n>>> a/b\n\n 0\n 1\n 3\n[torch.LongTensor of size (3,)]", "body": "Example below. While we don't support ops between different dtype tensors, we should consider changing this behavior. In numpy, this would return a floating tensor.\r\n\r\n```\r\n>>> import torch\r\n>>> a = torch.tensor([1,2,3], dtype=torch.long)\r\n>>> b = torch.tensor([3,2,1], dtype=torch.long)\r\n>>> a/b\r\n\r\n 0\r\n 1\r\n 3\r\n[torch.LongTensor of size (3,)]\r\n```"}