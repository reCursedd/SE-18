{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/165485026", "pull_request_review_id": 93434369, "id": 165485026, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NTQ4NTAyNg==", "diff_hunk": "@@ -218,6 +230,31 @@ Operation getOperation(jit::Node *node) {\n     return [](const list_of_retainable & inputs, list_of_retainable & outputs) {\n       outputs.push_back(toRetainableSteal(at::Tensor()));\n     };\n+  IR_ELSEIF(ReplaceIfUndef)\n+    return [](const list_of_retainable & inputs, list_of_retainable & outputs) {\n+      auto result = inputs[0];\n+      //TODO: refcounting stuff here is ugly but TensorTemporary is not\n+      //present. Consider whether we\n+      // 1. expose tensor temporary here\n+      // 2. keep as is\n+      // 3. remove all of this retainable stuff anyway since the new\n+      // execution paths do not need handle types.\n+      // Note that list_of_retainable is painful because it is yet another\n+      // list of pointers that require needless copies.\n+      if(result == at::UndefinedTensor::singleton()) {\n+        result = inputs[1];\n+      }\n+      result->retain();\n+      outputs.push_back(result);\n+    };\n+  IR_ELSEIF(GraphExecutor)\n+    GraphExecutor executor(value->g(kSubgraph));\n+    return [=](const list_of_retainable & inputs, list_of_retainable & outputs) mutable {\n+      autograd::profiler::RecordFunction record(\"GraphExecutor\");\n+      tensor_list tinputs = unsafeToTensorListShare(inputs);\n+      tensor_list toutputs = executor.run(tinputs);", "path": "torch/csrc/jit/interpreter.cpp", "position": null, "original_position": 76, "commit_id": "50f1371ab9d4af3f9ffba960951d8178b326d11c", "original_commit_id": "b84e313451e285323db29add20e1602d1e51aab8", "user": {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, "body": "Again, we need to redo this stuff anyway, but this is exactly the same code as FusionGroup.", "created_at": "2018-02-01T20:56:32Z", "updated_at": "2018-11-23T15:38:56Z", "html_url": "https://github.com/pytorch/pytorch/pull/4982#discussion_r165485026", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4982", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/165485026"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/4982#discussion_r165485026"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4982"}}, "body_html": "<p>Again, we need to redo this stuff anyway, but this is exactly the same code as FusionGroup.</p>", "body_text": "Again, we need to redo this stuff anyway, but this is exactly the same code as FusionGroup.", "in_reply_to_id": 165445638}