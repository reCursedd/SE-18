{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/165440614", "pull_request_review_id": 93361964, "id": 165440614, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NTQ0MDYxNA==", "diff_hunk": "@@ -0,0 +1,396 @@\n+#include \"Python.h\"\n+#include \"torch/csrc/jit/graph_executor.h\"\n+#include \"torch/csrc/jit/ir.h\"\n+#include \"torch/csrc/jit/argument_spec.h\"\n+#include \"torch/csrc/jit/autodiff.h\"\n+#include \"torch/csrc/jit/interpreter.h\"\n+#include \"torch/csrc/autograd/grad_mode.h\"\n+#include \"torch/csrc/jit/passes/create_autodiff_subgraphs.h\"\n+#include \"torch/csrc/jit/passes/shape_analysis.h\"\n+#include \"torch/csrc/jit/passes/dead_code_elimination.h\"\n+#include \"torch/csrc/jit/passes/common_subexpression_elimination.h\"\n+#include \"torch/csrc/jit/passes/peephole.h\"\n+#include \"torch/csrc/jit/passes/graph_fuser.h\"\n+#include \"torch/csrc/jit/passes/inplace_check.h\"\n+#include \"torch/csrc/jit/passes/batch_mm.h\"\n+\n+#include \"torch/csrc/autograd/function.h\"\n+\n+#include <unordered_map>\n+\n+namespace torch { namespace jit {\n+\n+namespace {\n+\n+using tensor_list = std::vector<at::Tensor>;\n+using variable_tensor_list = tensor_list;\n+using Variable = autograd::Variable;\n+using autograd::variable_list;\n+\n+struct ExecutionPlanAutogradFunction : public autograd::Function {\n+  ExecutionPlanAutogradFunction(GraphExecutor graph, size_t capture_size)\n+  : graph(std::move(graph)), captures(capture_size) {}\n+  virtual variable_list apply(const variable_list& inputs) override {\n+    // TODO: expensive copies here to convert to/from tensor_list\n+    // TODO: becuse inputs is passed by const reference there is no\n+    // way to release tensors incrementally as this runs\n+    variable_tensor_list all_inputs;\n+    all_inputs.reserve(captures.size() + inputs.size());\n+    for(auto & sv : captures) {\n+      all_inputs.push_back(sv.unpack(this->shared_from_this()));\n+    }\n+    all_inputs.insert(all_inputs.end(), inputs.begin(), inputs.end());\n+    auto tensors = graph.run(std::move(all_inputs));\n+    // TODO: another copy that needs to be removed\n+    return autograd::variable_list(tensors.begin(), tensors.end());\n+  }\n+private:\n+  friend struct ExecutionPlan;\n+  GraphExecutor graph;\n+  std::vector<autograd::SavedVariable> captures;\n+};\n+\n+\n+// an optimized way of executing the subgraph computed directly on\n+// tensors rather than Variables.\n+// This will unwrap Variables, run the plan, and re-wrap them.\n+// It can optionally also have a gradient which is hooked up\n+// to the output Variables if present.\n+struct ExecutionPlan {\n+  ExecutionPlan(std::shared_ptr<Graph> & graph)\n+  : f(graph) {}\n+  ExecutionPlan(std::shared_ptr<Graph> & graph, Gradient grad)\n+  : f(graph), grad(std::move(grad)), grad_executor(this->grad.df) {}\n+\n+  variable_tensor_list run(variable_tensor_list inputs) {\n+    if(grad) {\n+      return runWithGrad(std::move(inputs));\n+    }\n+    unwrapVariables(inputs);\n+    // TODO: intepreter needs to accept moved inputs\n+    // and delete incrementally\n+    tensor_list outputs;\n+    InterpreterState(f).runOneStage(std::move(inputs), outputs);\n+    wrapTensors(outputs);\n+    return outputs;\n+  }\n+private:\n+  // inplace to avoid allocations\n+  void unwrapVariables(tensor_list & list) {\n+    for(auto & v : list) {\n+      v = v.defined() ? autograd::Variable(v).data() : at::Tensor();\n+    }\n+  }\n+  // inplace to avoid allocations\n+  void wrapTensors(tensor_list & list) {\n+    for(auto & v : list) {\n+      v = autograd::make_variable(v);\n+    }\n+  }\n+  // TODO: both captureInputs/captureOutputs have to iterate over the entire\n+  // capture list because the list is not sorted with inputs before outputs.\n+  // We cannot capture both, because we actually destroy our input lists (to release references)\n+  // before we get the outputs list.\n+  void captureInputs(ExecutionPlanAutogradFunction & grad_fn, variable_tensor_list & inputs) {\n+    auto & capture_desc = grad.df_input_captures;\n+    size_t N = capture_desc.size();\n+    for(size_t i = 0; i < N; ++i) {\n+      if(capture_desc[i].kind == Capture::Kind::Input) {\n+        size_t offset = capture_desc[i].offset;\n+        grad_fn.captures[i] = autograd::SavedVariable(autograd::Variable(inputs[offset]), false);\n+      }\n+    }\n+  }\n+  void captureOutputs(ExecutionPlanAutogradFunction & grad_fn, variable_tensor_list & outputs) {\n+    auto & capture_desc = grad.df_input_captures;\n+    size_t N = capture_desc.size();\n+    for(size_t i = 0; i < N; ++i) {\n+      if(capture_desc[i].kind == Capture::Kind::Output) {\n+        size_t offset = capture_desc[i].offset;\n+        grad_fn.captures[i] = autograd::SavedVariable(autograd::Variable(outputs[offset]), true);\n+      }\n+    }\n+  }\n+\n+  variable_tensor_list runWithGrad(variable_tensor_list inputs) {\n+    auto grad_fn = std::make_shared<ExecutionPlanAutogradFunction>(grad_executor, grad.df_input_captures.size());\n+    // hook up the outputs of df to the gradient functions of the inputs that require\n+    // gradients\n+    for(auto idx : grad.df_output_vjps) {\n+      autograd::Variable v(inputs[idx]);\n+      // TODO: this kinda stuff is _way_ to low level to the public API of variable.\n+      // Why do I have to care here whether v has a grad_fn or grad accumulator?\n+      // Why do I have to care here about output_nr? I just want to say\n+      // grad_fn->setOutputTo(i, v.input_port());\n+      grad_fn->next_functions.emplace_back(v.grad_fn() ? v.grad_fn() : v.grad_accumulator(), v.output_nr());\n+    }\n+    captureInputs(*grad_fn, inputs);\n+\n+    unwrapVariables(inputs);\n+    tensor_list outputs;\n+    InterpreterState(f).runOneStage(std::move(inputs), outputs);\n+    wrapTensors(outputs);\n+    // hookup the gradients for the output tensors that require gradients\n+    // to the inputs to our gradient function df\n+    // TODO - XXX - if any output is the same tensor multiple times, views have to be\n+    // setup here. We need to refactor autograd until it is safe for\n+    // tensors to be constructed without all the viewing infrastructure.\n+    // this is currently intentionally not done here so we can get an idea of our\n+    // perf before introducing overhead for correctness\n+    for(auto idx : grad.df_input_vjps) {\n+      autograd::Variable o(outputs[idx]);\n+      auto impl = o.get();\n+      // Note: we have to set this up in place, or we have to\n+      // throw away and reallocate variables that were already created in\n+      // wrapTensors. We should add an API for this, and more generally\n+      // we need to clean up the fields of Variable.\n+      impl->_grad_fn = grad_fn;\n+      impl->output_nr = grad_fn->num_inputs++;\n+      impl->_requires_grad = true;\n+    }\n+    captureOutputs(*grad_fn, outputs);\n+    // drop the temporary outputs so that we return the same number of\n+    // outputs as if we were not also calculating gradient\n+    outputs.erase(outputs.begin() + grad.f_real_outputs, outputs.end());\n+    return outputs;\n+  }\n+  Code f;\n+  // description of gradient as a graph\n+  Gradient grad; // if(grad) is false when this is unused\n+  // executor for df, including code caches\n+  GraphExecutor grad_executor;\n+};\n+\n+} // anonymous namespace\n+\n+// a Graph can be created via tracing, or via a language-based frontend\n+// GraphExecutor runs it. It can run the same graph on many different sizes\n+// and different requires_grad states, and handles specializations for each situation.\n+// GraphExecutor is completely unaware of tracing or module parameters to keep the\n+// tracing concerns separated.\n+struct GraphExecutorImpl {\n+\n+  GraphExecutorImpl(std::shared_ptr<Graph> graph, bool optimize, bool symbolically_differentiable)\n+  : graph(std::move(graph))\n+  , optimize(optimize)\n+  , symbolically_differentiable(symbolically_differentiable) {}\n+  GraphExecutorImpl(std::shared_ptr<Graph> graph, bool optimize)\n+  : graph(std::move(graph))\n+  , optimize(optimize)\n+  , symbolically_differentiable(isDifferentiable(*this->graph)) {}\n+\n+  // entry point where execution begins\n+  variable_tensor_list run(variable_tensor_list inputs) {\n+    // this is the fallback pathway, when we cannot differentiate\n+    if(!optimize || (!symbolically_differentiable && gradientIsPossible(inputs))) {\n+      auto & fb = getOrCreateAutogradFallback();\n+      InterpreterState state(fb);\n+      tensor_list outputs;\n+      state.runOneStage(std::move(inputs), outputs);\n+      // note: we never unwrapped inputs, because we want autograd to record the trace\n+      return outputs;\n+    }\n+\n+    // either we can symbolically differentiate, or we do not need a gradient.\n+    // go down the route where we treat the inputs as tensors\n+    // and fully optimize\n+    auto & implementation = getOrCompile(inputs);\n+    return implementation.run(std::move(inputs));\n+  }\n+\n+private:\n+\n+  static bool gradientIsPossible(const variable_tensor_list & inputs) {\n+    if (!autograd::GradMode::is_enabled()) {\n+      return false;\n+    }\n+    for (const auto & tensor : inputs) {\n+      if(tensor.defined() && Variable(tensor).requires_grad())\n+        return true;\n+    }\n+    return false;\n+  }\n+  static bool isDifferentiable(Graph & g) {\n+    for(auto n : g.nodes()) {\n+      if(!jit::isDifferentiable(n))\n+        return false;\n+    }\n+    return true;\n+  }\n+\n+  static std::shared_ptr<Graph> copy(Graph & g) {\n+    auto new_g = std::make_shared<Graph>();\n+    std::unordered_map<Value*, Value*> value_map;\n+    for(auto input : g.inputs()) {\n+      value_map[input] = new_g->addInput()->copyMetadata(input);\n+    }\n+    for(auto node : g.nodes()) {\n+      auto new_node = new_g->appendNode(new_g->createClone(node, [&](Value* v) {\n+        return value_map.at(v);\n+      }));\n+      for(size_t i = 0; i < node->outputs().size(); ++i) {\n+        value_map[node->outputs()[i]] = new_node->outputs()[i];\n+        new_node->outputs()[i]->copyMetadata(node->outputs()[i]);\n+      }\n+    }\n+    for(auto output : g.outputs()) {\n+      new_g->registerOutput(value_map.at(output));\n+    }\n+    return new_g;\n+  }\n+\n+  void runOptimization(std::shared_ptr<Graph> & graph, bool graphMustSupportVariables) {\n+    EliminateDeadCode(graph);\n+    CheckInplace(graph);\n+    EliminateCommonSubexpression(graph);\n+    if (!graphMustSupportVariables) {\n+      // These optimizations can introduce operators like FusionGroup that\n+      // do not work on variables\n+      PeepholeOptimize(graph);", "path": "torch/csrc/jit/graph_executor.cpp", "position": null, "original_position": 249, "commit_id": "50f1371ab9d4af3f9ffba960951d8178b326d11c", "original_commit_id": "b84e313451e285323db29add20e1602d1e51aab8", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Would be nice if we had a conservative version of peephole optimize that works with Variables too. Can you please mark it as a TODO, so we don't forget?", "created_at": "2018-02-01T18:08:34Z", "updated_at": "2018-11-23T15:38:54Z", "html_url": "https://github.com/pytorch/pytorch/pull/4982#discussion_r165440614", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4982", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/165440614"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/4982#discussion_r165440614"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4982"}}, "body_html": "<p>Would be nice if we had a conservative version of peephole optimize that works with Variables too. Can you please mark it as a TODO, so we don't forget?</p>", "body_text": "Would be nice if we had a conservative version of peephole optimize that works with Variables too. Can you please mark it as a TODO, so we don't forget?"}