{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/165685125", "pull_request_review_id": 93474346, "id": 165685125, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NTY4NTEyNQ==", "diff_hunk": "@@ -0,0 +1,392 @@\n+#include \"Python.h\"\n+#include \"torch/csrc/jit/graph_executor.h\"\n+#include \"torch/csrc/jit/ir.h\"\n+#include \"torch/csrc/jit/argument_spec.h\"\n+#include \"torch/csrc/jit/autodiff.h\"\n+#include \"torch/csrc/jit/interpreter.h\"\n+#include \"torch/csrc/autograd/grad_mode.h\"\n+#include \"torch/csrc/jit/passes/create_autodiff_subgraphs.h\"\n+#include \"torch/csrc/jit/passes/shape_analysis.h\"\n+#include \"torch/csrc/jit/passes/dead_code_elimination.h\"\n+#include \"torch/csrc/jit/passes/common_subexpression_elimination.h\"\n+#include \"torch/csrc/jit/passes/peephole.h\"\n+#include \"torch/csrc/jit/passes/graph_fuser.h\"\n+#include \"torch/csrc/jit/passes/inplace_check.h\"\n+#include \"torch/csrc/jit/passes/batch_mm.h\"\n+\n+#include \"torch/csrc/autograd/function.h\"\n+\n+#include <unordered_map>\n+\n+namespace torch { namespace jit {\n+\n+namespace {\n+\n+using tensor_list = std::vector<at::Tensor>;\n+using Variable = autograd::Variable;\n+using autograd::variable_list;\n+\n+struct ExecutionPlanAutogradFunction : public autograd::Function {\n+  ExecutionPlanAutogradFunction(GraphExecutor graph, size_t capture_size)\n+  : graph(std::move(graph)), captures(capture_size) {}\n+  virtual variable_list apply(const variable_list& inputs) override {\n+    // TODO: expensive copies here to convert to/from tensor_list\n+    // TODO: becuse inputs is passed by const reference there is no\n+    // way to release tensors incrementally as this runs\n+    variable_tensor_list all_inputs;\n+    all_inputs.reserve(captures.size() + inputs.size());\n+    for(auto & sv : captures) {\n+      all_inputs.push_back(sv.unpack(this->shared_from_this()));\n+    }\n+    all_inputs.insert(all_inputs.end(), inputs.begin(), inputs.end());\n+    auto tensors = graph.run(std::move(all_inputs));\n+    // TODO: another copy that needs to be removed\n+    return autograd::variable_list(tensors.begin(), tensors.end());\n+  }\n+private:\n+  friend struct ExecutionPlan;\n+  GraphExecutor graph;\n+  std::vector<autograd::SavedVariable> captures;\n+};\n+\n+\n+// an optimized way of executing the subgraph computed directly on\n+// tensors rather than Variables.\n+// This will unwrap Variables, run the plan, and re-wrap them.\n+// It can optionally also have a gradient which is hooked up\n+// to the output Variables if present.\n+struct ExecutionPlan {\n+  ExecutionPlan(std::shared_ptr<Graph> & graph)\n+  : f(graph) {}\n+  ExecutionPlan(std::shared_ptr<Graph> & graph, Gradient grad)\n+  : f(graph), grad(std::move(grad)), grad_executor(this->grad.df) {}\n+\n+  variable_tensor_list run(variable_tensor_list inputs) {\n+    if(grad) {\n+      return runWithGrad(std::move(inputs));\n+    }\n+    // TODO: intepreter needs to accept moved inputs\n+    // and delete incrementally\n+    tensor_list outputs;\n+    InterpreterState(f).runOneStage(unwrapVariables(std::move(inputs)), outputs);\n+    return wrapTensors(std::move(outputs));\n+  }\n+private:\n+  // inplace to avoid allocations\n+  tensor_list unwrapVariables(variable_tensor_list && list) {\n+    for(auto & v : list) {\n+      v = v.defined() ? static_cast<Variable&>(v).data() : at::Tensor();\n+    }\n+    return std::move(list);\n+  }\n+  // inplace to avoid allocations\n+  variable_tensor_list wrapTensors(tensor_list && list) {\n+    for(auto & v : list) {\n+      v = autograd::make_variable(v);\n+    }\n+    return variable_tensor_list(std::move(list));\n+  }\n+  // TODO: both captureInputs/captureOutputs have to iterate over the entire\n+  // capture list because the list is not sorted with inputs before outputs.\n+  // We cannot capture both, because we actually destroy our input lists (to release references)\n+  // before we get the outputs list.\n+  void captureInputs(ExecutionPlanAutogradFunction & grad_fn, variable_tensor_list & inputs) {\n+    auto & capture_desc = grad.df_input_captures;\n+    size_t N = capture_desc.size();\n+    for(size_t i = 0; i < N; ++i) {\n+      if(capture_desc[i].kind == Capture::Kind::Input) {\n+        size_t offset = capture_desc[i].offset;\n+        grad_fn.captures[i] = autograd::SavedVariable(static_cast<Variable&>(inputs[offset]), false);\n+      }\n+    }\n+  }\n+  void captureOutputs(ExecutionPlanAutogradFunction & grad_fn, variable_tensor_list & outputs) {\n+    auto & capture_desc = grad.df_input_captures;\n+    size_t N = capture_desc.size();\n+    for(size_t i = 0; i < N; ++i) {\n+      if(capture_desc[i].kind == Capture::Kind::Output) {\n+        size_t offset = capture_desc[i].offset;\n+        grad_fn.captures[i] = autograd::SavedVariable(static_cast<Variable&>(outputs[offset]), true);\n+      }\n+    }\n+  }\n+\n+  variable_tensor_list runWithGrad(variable_tensor_list&& inputs) {\n+    auto grad_fn = std::make_shared<ExecutionPlanAutogradFunction>(grad_executor, grad.df_input_captures.size());\n+    // hook up the outputs of df to the gradient functions of the inputs that require\n+    // gradients\n+    for(auto idx : grad.df_output_vjps) {\n+      auto & v = static_cast<Variable&>(inputs[idx]);\n+      // TODO: this kinda stuff is _way_ to low level to the public API of variable.\n+      // Why do I have to care here whether v has a grad_fn or grad accumulator?\n+      // Why do I have to care here about output_nr? I just want to say\n+      // grad_fn->setOutputTo(i, v.input_port());\n+      grad_fn->next_functions.emplace_back(v.grad_fn() ? v.grad_fn() : v.grad_accumulator(), v.output_nr());\n+    }\n+    captureInputs(*grad_fn, inputs);\n+\n+    tensor_list outputs_;\n+    InterpreterState(f).runOneStage(unwrapVariables(std::move(inputs)), outputs_);\n+    variable_tensor_list outputs = wrapTensors(std::move(outputs_));\n+    \n+    // hookup the gradients for the output tensors that require gradients\n+    // to the inputs to our gradient function df\n+    // TODO - XXX - if any output is the same tensor multiple times, views have to be\n+    // setup here. We need to refactor autograd until it is safe for\n+    // tensors to be constructed without all the viewing infrastructure.\n+    // this is currently intentionally not done here so we can get an idea of our\n+    // perf before introducing overhead for correctness\n+    for(auto idx : grad.df_input_vjps) {\n+      auto & o = static_cast<Variable&>(outputs[idx]);\n+      auto impl = o.get();\n+      // Note: we have to set this up in place, or we have to\n+      // throw away and reallocate variables that were already created in\n+      // wrapTensors. We should add an API for this, and more generally\n+      // we need to clean up the fields of Variable.\n+      impl->_grad_fn = grad_fn;\n+      impl->output_nr = grad_fn->num_inputs++;\n+      impl->_requires_grad = true;\n+    }\n+    captureOutputs(*grad_fn, outputs);\n+    // drop the temporary outputs so that we return the same number of\n+    // outputs as if we were not also calculating gradient\n+    outputs.erase(outputs.begin() + grad.f_real_outputs, outputs.end());\n+    return outputs;\n+  }\n+  Code f;\n+  // description of gradient as a graph\n+  Gradient grad; // if(grad) is false when this is unused\n+  // executor for df, including code caches\n+  GraphExecutor grad_executor;\n+};\n+\n+} // anonymous namespace\n+\n+// a Graph can be created via tracing, or via a language-based frontend\n+// GraphExecutor runs it. It can run the same graph on many different sizes\n+// and different requires_grad states, and handles specializations for each situation.\n+// GraphExecutor is completely unaware of tracing or module parameters to keep the\n+// tracing concerns separated.\n+struct GraphExecutorImpl {\n+\n+  GraphExecutorImpl(std::shared_ptr<Graph> graph, bool optimize, bool symbolically_differentiable)\n+  : graph(std::move(graph))\n+  , optimize(optimize)\n+  , symbolically_differentiable(symbolically_differentiable) {}\n+  GraphExecutorImpl(std::shared_ptr<Graph> graph, bool optimize)\n+  : graph(std::move(graph))\n+  , optimize(optimize)\n+  , symbolically_differentiable(isDifferentiable(*this->graph)) {}\n+\n+  // entry point where execution begins\n+  variable_tensor_list run(variable_tensor_list inputs) {\n+    // this is the fallback pathway, when we cannot differentiate\n+    if(!optimize || (!symbolically_differentiable && needsGradient(inputs))) {\n+      auto & fb = getOrCreateAutogradFallback();\n+      InterpreterState state(fb);\n+      tensor_list outputs;\n+      state.runOneStage(std::move(inputs), outputs);\n+      // note: we never unwrapped inputs, because we want autograd to record the trace\n+      return variable_tensor_list(std::move(outputs));\n+    }\n+\n+    // either we can symbolically differentiate, or we do not need a gradient.\n+    // go down the route where we treat the inputs as tensors\n+    // and fully optimize\n+    auto & implementation = getOrCompile(inputs);\n+    return implementation.run(std::move(inputs));\n+  }\n+\n+private:\n+\n+  static bool needsGradient(const variable_tensor_list & inputs) {\n+    if (!autograd::GradMode::is_enabled()) {\n+      return false;\n+    }\n+    for (const auto & tensor : inputs) {\n+      if(tensor.defined() && static_cast<const Variable&>(tensor).requires_grad())\n+        return true;\n+    }\n+    return false;\n+  }\n+  static bool isDifferentiable(Graph & g) {\n+    for(auto n : g.nodes()) {\n+      if(!jit::isDifferentiable(n))\n+        return false;\n+    }\n+    return true;\n+  }\n+\n+  void runOptimization(std::shared_ptr<Graph> & graph, bool graphMustSupportVariables) {\n+\n+    // these optimizations must run in the presence of variables\n+    // and when shape information is not statically known.\n+\n+    EliminateDeadCode(graph);\n+    CheckInplace(graph);\n+    EliminateCommonSubexpression(graph);\n+\n+    if (!graphMustSupportVariables) {\n+      // These optimizations can introduce operators like FusionGroup that\n+      // do not work on variables\n+\n+      // They also may assume that concrete sizes/strides are availiable\n+\n+      //TODO: create peephole optimizations that are safe to run\n+      // when we are using variables, and when we do not know sizes.\n+      PeepholeOptimize(graph);\n+      // TODO: remove mandatory size checking in BatchMM, otherwise\n+      // it works fine on variables.\n+      BatchMM(graph);\n+      FuseGraph(graph);\n+    }\n+  }\n+  Code & getOrCreateAutogradFallback() {\n+    std::lock_guard<std::mutex> lock(compile_mutex);\n+    if(autograd_fallback) {\n+      return autograd_fallback;\n+    }\n+    auto graph_ = graph->copy();\n+    if(optimize) {\n+      CreateAutodiffSubgraphs(*graph_);\n+      runOptimization(graph_, /*graphMustSupportVariables=*/true);\n+    }\n+    autograd_fallback = Code(graph_);\n+    return autograd_fallback;\n+  }\n+  ExecutionPlan & getOrCompile(const variable_tensor_list & inputs) {\n+    // outside lock guard, to minimize the time holding the lock on the fast path\n+    // ArgumentSpec even computes its hashCode here.\n+    ArgumentSpec spec(autograd::GradMode::is_enabled(), inputs);\n+    {\n+      std::lock_guard<std::mutex> lock(compile_mutex);\n+      auto it = plan_cache.find(spec);\n+      if(it != plan_cache.end())\n+        return it->second;\n+      auto plan = compileSpec(spec);\n+      auto r = plan_cache.emplace(std::move(spec), std::move(plan));\n+      return r.first->second;\n+    }\n+  }\n+  bool needsGradient(const ArgumentSpec & spec) {\n+    for(size_t i = 0; i < spec.size(); ++i) {\n+      if(spec.tensorInfo(i).requires_grad())\n+        return true;\n+    }\n+    return false;\n+  }\n+\n+\n+  // remove ReplaceIfUndef(v, replacement) nodes that consume inputs with 'v' if\n+  // the input is defined, and 'replacement' if it is not.\n+  void specializeUndef(Graph & g, const ArgumentSpec & spec) {\n+    for(size_t i = 0; i < spec.size(); i++) {\n+      std::vector<Value*> to_replace;\n+      // do not edit in place, since it invalides uses iterator", "path": "torch/csrc/jit/graph_executor.cpp", "position": null, "original_position": 285, "commit_id": "50f1371ab9d4af3f9ffba960951d8178b326d11c", "original_commit_id": "493e3432b758ea442a0042828da4d25e02fd8c1c", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "invalidates", "created_at": "2018-02-02T16:04:16Z", "updated_at": "2018-11-23T15:39:00Z", "html_url": "https://github.com/pytorch/pytorch/pull/4982#discussion_r165685125", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4982", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/165685125"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/4982#discussion_r165685125"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4982"}}, "body_html": "<p>invalidates</p>", "body_text": "invalidates"}