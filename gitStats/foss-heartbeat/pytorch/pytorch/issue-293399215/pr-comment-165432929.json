{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/165432929", "pull_request_review_id": 93361964, "id": 165432929, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NTQzMjkyOQ==", "diff_hunk": "@@ -0,0 +1,396 @@\n+#include \"Python.h\"\n+#include \"torch/csrc/jit/graph_executor.h\"\n+#include \"torch/csrc/jit/ir.h\"\n+#include \"torch/csrc/jit/argument_spec.h\"\n+#include \"torch/csrc/jit/autodiff.h\"\n+#include \"torch/csrc/jit/interpreter.h\"\n+#include \"torch/csrc/autograd/grad_mode.h\"\n+#include \"torch/csrc/jit/passes/create_autodiff_subgraphs.h\"\n+#include \"torch/csrc/jit/passes/shape_analysis.h\"\n+#include \"torch/csrc/jit/passes/dead_code_elimination.h\"\n+#include \"torch/csrc/jit/passes/common_subexpression_elimination.h\"\n+#include \"torch/csrc/jit/passes/peephole.h\"\n+#include \"torch/csrc/jit/passes/graph_fuser.h\"\n+#include \"torch/csrc/jit/passes/inplace_check.h\"\n+#include \"torch/csrc/jit/passes/batch_mm.h\"\n+\n+#include \"torch/csrc/autograd/function.h\"\n+\n+#include <unordered_map>\n+\n+namespace torch { namespace jit {\n+\n+namespace {\n+\n+using tensor_list = std::vector<at::Tensor>;\n+using variable_tensor_list = tensor_list;\n+using Variable = autograd::Variable;\n+using autograd::variable_list;\n+\n+struct ExecutionPlanAutogradFunction : public autograd::Function {\n+  ExecutionPlanAutogradFunction(GraphExecutor graph, size_t capture_size)\n+  : graph(std::move(graph)), captures(capture_size) {}\n+  virtual variable_list apply(const variable_list& inputs) override {\n+    // TODO: expensive copies here to convert to/from tensor_list\n+    // TODO: becuse inputs is passed by const reference there is no\n+    // way to release tensors incrementally as this runs\n+    variable_tensor_list all_inputs;\n+    all_inputs.reserve(captures.size() + inputs.size());\n+    for(auto & sv : captures) {\n+      all_inputs.push_back(sv.unpack(this->shared_from_this()));\n+    }", "path": "torch/csrc/jit/graph_executor.cpp", "position": 45, "original_position": 41, "commit_id": "50f1371ab9d4af3f9ffba960951d8178b326d11c", "original_commit_id": "b84e313451e285323db29add20e1602d1e51aab8", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "NB: I think we could reuse captures between runs - autograd gives us guarantee that a single (backward) function won't ever be run concurrently more than once (assuming it's inputs/outputs are on the same device).", "created_at": "2018-02-01T17:41:32Z", "updated_at": "2018-11-23T15:38:54Z", "html_url": "https://github.com/pytorch/pytorch/pull/4982#discussion_r165432929", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4982", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/165432929"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/4982#discussion_r165432929"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4982"}}, "body_html": "<p>NB: I think we could reuse captures between runs - autograd gives us guarantee that a single (backward) function won't ever be run concurrently more than once (assuming it's inputs/outputs are on the same device).</p>", "body_text": "NB: I think we could reuse captures between runs - autograd gives us guarantee that a single (backward) function won't ever be run concurrently more than once (assuming it's inputs/outputs are on the same device)."}