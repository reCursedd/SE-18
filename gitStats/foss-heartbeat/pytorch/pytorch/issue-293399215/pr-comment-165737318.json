{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/165737318", "pull_request_review_id": 93730060, "id": 165737318, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NTczNzMxOA==", "diff_hunk": "@@ -202,6 +229,45 @@ static std::shared_ptr<Graph> splitOffStage(\n   return graph_clone;\n }\n \n+bool isZero(Value * v) {\n+  auto n = v->node();\n+  return n->kind() == kConstant &&\n+    n->hasAttribute(kis_zero) &&\n+    n->i(kis_zero);\n+}\n+\n+// In the case where an input is routed to an output\n+// return the (possibly undefined) input rather than\n+// the value guarded by replaceIfUndef\n+// this ensures that we do not produce a 0 tensor\n+// when the autograd would produce None\n+// graph(a) {\n+//   b = replaceIfUndef(a,0);\n+//   c = b + b\n+//   return c, b; // will replace 'b' with 'a'\n+// }\n+// Also replace any known-to-be-zero outputs with Undef\n+// for the same reason", "path": "torch/csrc/jit/autodiff.cpp", "position": 125, "original_position": 125, "commit_id": "50f1371ab9d4af3f9ffba960951d8178b326d11c", "original_commit_id": "493e3432b758ea442a0042828da4d25e02fd8c1c", "user": {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, "body": "A follow up: using Undefined to sometimes-but-not-always represent a 0 is very fragile and impacts the entire codebase. We really should have a concept of a known-to-be-zero zero-dim tensor (i.e. a zero-literal-tensor) that is a subtype of all other tensor types but can be tested for in ops that can optimize for it. ", "created_at": "2018-02-02T19:28:13Z", "updated_at": "2018-11-23T15:39:01Z", "html_url": "https://github.com/pytorch/pytorch/pull/4982#discussion_r165737318", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4982", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/165737318"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/4982#discussion_r165737318"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4982"}}, "body_html": "<p>A follow up: using Undefined to sometimes-but-not-always represent a 0 is very fragile and impacts the entire codebase. We really should have a concept of a known-to-be-zero zero-dim tensor (i.e. a zero-literal-tensor) that is a subtype of all other tensor types but can be tested for in ops that can optimize for it.</p>", "body_text": "A follow up: using Undefined to sometimes-but-not-always represent a 0 is very fragile and impacts the entire codebase. We really should have a concept of a known-to-be-zero zero-dim tensor (i.e. a zero-literal-tensor) that is a subtype of all other tensor types but can be tested for in ops that can optimize for it.", "in_reply_to_id": 165678534}