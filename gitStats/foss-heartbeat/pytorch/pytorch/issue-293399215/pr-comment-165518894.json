{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/165518894", "pull_request_review_id": 93474025, "id": 165518894, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NTUxODg5NA==", "diff_hunk": "@@ -61,6 +86,22 @@ void initJITBindings(PyObject *module) {\n      return py::reinterpret_steal<py::object>(python::unflatten(vars, desc));\n    });\n \n+   py::class_<GraphExecutor>(m,\"GraphExecutor\")\n+   .def(py::init([](py::function func, std::vector<tracer::TraceInput> inputs){\n+     return createExecutorByTracing(true, func, std::move(inputs));\n+   }))\n+   .def(\"__call__\",[](py::args args) {\n+     auto ge = py::cast<GraphExecutor&>(args[0]);\n+     auto inputs = py::cast<std::vector<at::Tensor>>(tuple_tail(args));\n+     auto outputs = ge.run(std::move(inputs));\n+     // if we don't tell pybind these are variables it chokes on the conversion.\n+     // TODO: fix conversions to be sane and make sure this works.\n+     return std::vector<autograd::Variable>(outputs.begin(), outputs.end());\n+   });\n+  // hook so we can temporarily get to the non-optimizing version of GraphExecutor", "path": "torch/csrc/jit/init.cpp", "position": null, "original_position": 64, "commit_id": "50f1371ab9d4af3f9ffba960951d8178b326d11c", "original_commit_id": "b84e313451e285323db29add20e1602d1e51aab8", "user": {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, "body": "I was worried about memory leaks, because that exercises a similar pathway to the leak we found before.  I guess we can change it and see what happens. I'd be more confident if we had a way of writing tests for leaks.", "created_at": "2018-02-01T23:21:31Z", "updated_at": "2018-11-23T15:38:57Z", "html_url": "https://github.com/pytorch/pytorch/pull/4982#discussion_r165518894", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4982", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/165518894"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/4982#discussion_r165518894"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4982"}}, "body_html": "<p>I was worried about memory leaks, because that exercises a similar pathway to the leak we found before.  I guess we can change it and see what happens. I'd be more confident if we had a way of writing tests for leaks.</p>", "body_text": "I was worried about memory leaks, because that exercises a similar pathway to the leak we found before.  I guess we can change it and see what happens. I'd be more confident if we had a way of writing tests for leaks.", "in_reply_to_id": 165430708}