{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/165514103", "pull_request_review_id": 93468508, "id": 165514103, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NTUxNDEwMw==", "diff_hunk": "@@ -0,0 +1,396 @@\n+#include \"Python.h\"\n+#include \"torch/csrc/jit/graph_executor.h\"\n+#include \"torch/csrc/jit/ir.h\"\n+#include \"torch/csrc/jit/argument_spec.h\"\n+#include \"torch/csrc/jit/autodiff.h\"\n+#include \"torch/csrc/jit/interpreter.h\"\n+#include \"torch/csrc/autograd/grad_mode.h\"\n+#include \"torch/csrc/jit/passes/create_autodiff_subgraphs.h\"\n+#include \"torch/csrc/jit/passes/shape_analysis.h\"\n+#include \"torch/csrc/jit/passes/dead_code_elimination.h\"\n+#include \"torch/csrc/jit/passes/common_subexpression_elimination.h\"\n+#include \"torch/csrc/jit/passes/peephole.h\"\n+#include \"torch/csrc/jit/passes/graph_fuser.h\"\n+#include \"torch/csrc/jit/passes/inplace_check.h\"\n+#include \"torch/csrc/jit/passes/batch_mm.h\"\n+\n+#include \"torch/csrc/autograd/function.h\"\n+\n+#include <unordered_map>\n+\n+namespace torch { namespace jit {\n+\n+namespace {\n+\n+using tensor_list = std::vector<at::Tensor>;\n+using variable_tensor_list = tensor_list;\n+using Variable = autograd::Variable;\n+using autograd::variable_list;\n+\n+struct ExecutionPlanAutogradFunction : public autograd::Function {\n+  ExecutionPlanAutogradFunction(GraphExecutor graph, size_t capture_size)\n+  : graph(std::move(graph)), captures(capture_size) {}\n+  virtual variable_list apply(const variable_list& inputs) override {\n+    // TODO: expensive copies here to convert to/from tensor_list\n+    // TODO: becuse inputs is passed by const reference there is no\n+    // way to release tensors incrementally as this runs\n+    variable_tensor_list all_inputs;\n+    all_inputs.reserve(captures.size() + inputs.size());\n+    for(auto & sv : captures) {\n+      all_inputs.push_back(sv.unpack(this->shared_from_this()));\n+    }\n+    all_inputs.insert(all_inputs.end(), inputs.begin(), inputs.end());\n+    auto tensors = graph.run(std::move(all_inputs));\n+    // TODO: another copy that needs to be removed\n+    return autograd::variable_list(tensors.begin(), tensors.end());\n+  }\n+private:\n+  friend struct ExecutionPlan;\n+  GraphExecutor graph;\n+  std::vector<autograd::SavedVariable> captures;\n+};\n+\n+\n+// an optimized way of executing the subgraph computed directly on\n+// tensors rather than Variables.\n+// This will unwrap Variables, run the plan, and re-wrap them.\n+// It can optionally also have a gradient which is hooked up\n+// to the output Variables if present.\n+struct ExecutionPlan {\n+  ExecutionPlan(std::shared_ptr<Graph> & graph)\n+  : f(graph) {}\n+  ExecutionPlan(std::shared_ptr<Graph> & graph, Gradient grad)\n+  : f(graph), grad(std::move(grad)), grad_executor(this->grad.df) {}\n+\n+  variable_tensor_list run(variable_tensor_list inputs) {\n+    if(grad) {\n+      return runWithGrad(std::move(inputs));\n+    }\n+    unwrapVariables(inputs);\n+    // TODO: intepreter needs to accept moved inputs\n+    // and delete incrementally\n+    tensor_list outputs;\n+    InterpreterState(f).runOneStage(std::move(inputs), outputs);\n+    wrapTensors(outputs);\n+    return outputs;\n+  }\n+private:\n+  // inplace to avoid allocations\n+  void unwrapVariables(tensor_list & list) {\n+    for(auto & v : list) {\n+      v = v.defined() ? autograd::Variable(v).data() : at::Tensor();\n+    }\n+  }\n+  // inplace to avoid allocations\n+  void wrapTensors(tensor_list & list) {\n+    for(auto & v : list) {\n+      v = autograd::make_variable(v);\n+    }\n+  }\n+  // TODO: both captureInputs/captureOutputs have to iterate over the entire\n+  // capture list because the list is not sorted with inputs before outputs.\n+  // We cannot capture both, because we actually destroy our input lists (to release references)\n+  // before we get the outputs list.\n+  void captureInputs(ExecutionPlanAutogradFunction & grad_fn, variable_tensor_list & inputs) {\n+    auto & capture_desc = grad.df_input_captures;\n+    size_t N = capture_desc.size();\n+    for(size_t i = 0; i < N; ++i) {\n+      if(capture_desc[i].kind == Capture::Kind::Input) {\n+        size_t offset = capture_desc[i].offset;\n+        grad_fn.captures[i] = autograd::SavedVariable(autograd::Variable(inputs[offset]), false);\n+      }\n+    }\n+  }\n+  void captureOutputs(ExecutionPlanAutogradFunction & grad_fn, variable_tensor_list & outputs) {\n+    auto & capture_desc = grad.df_input_captures;\n+    size_t N = capture_desc.size();\n+    for(size_t i = 0; i < N; ++i) {\n+      if(capture_desc[i].kind == Capture::Kind::Output) {\n+        size_t offset = capture_desc[i].offset;\n+        grad_fn.captures[i] = autograd::SavedVariable(autograd::Variable(outputs[offset]), true);\n+      }\n+    }\n+  }\n+\n+  variable_tensor_list runWithGrad(variable_tensor_list inputs) {\n+    auto grad_fn = std::make_shared<ExecutionPlanAutogradFunction>(grad_executor, grad.df_input_captures.size());\n+    // hook up the outputs of df to the gradient functions of the inputs that require\n+    // gradients\n+    for(auto idx : grad.df_output_vjps) {\n+      autograd::Variable v(inputs[idx]);\n+      // TODO: this kinda stuff is _way_ to low level to the public API of variable.\n+      // Why do I have to care here whether v has a grad_fn or grad accumulator?\n+      // Why do I have to care here about output_nr? I just want to say\n+      // grad_fn->setOutputTo(i, v.input_port());", "path": "torch/csrc/jit/graph_executor.cpp", "position": null, "original_position": 124, "commit_id": "50f1371ab9d4af3f9ffba960951d8178b326d11c", "original_commit_id": "b84e313451e285323db29add20e1602d1e51aab8", "user": {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, "body": "Yeah, @goldsborough was interested in learning more about the autograd, so I might have him see if he can encapsulate some of these details.", "created_at": "2018-02-01T22:56:26Z", "updated_at": "2018-11-23T15:38:57Z", "html_url": "https://github.com/pytorch/pytorch/pull/4982#discussion_r165514103", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4982", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/165514103"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/4982#discussion_r165514103"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4982"}}, "body_html": "<p>Yeah, <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=6429851\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/goldsborough\">@goldsborough</a> was interested in learning more about the autograd, so I might have him see if he can encapsulate some of these details.</p>", "body_text": "Yeah, @goldsborough was interested in learning more about the autograd, so I might have him see if he can encapsulate some of these details.", "in_reply_to_id": 165438223}