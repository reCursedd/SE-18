{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/354004811", "html_url": "https://github.com/pytorch/pytorch/issues/4330#issuecomment-354004811", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/4330", "id": 354004811, "node_id": "MDEyOklzc3VlQ29tbWVudDM1NDAwNDgxMQ==", "user": {"login": "fritzo", "id": 648532, "node_id": "MDQ6VXNlcjY0ODUzMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/648532?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fritzo", "html_url": "https://github.com/fritzo", "followers_url": "https://api.github.com/users/fritzo/followers", "following_url": "https://api.github.com/users/fritzo/following{/other_user}", "gists_url": "https://api.github.com/users/fritzo/gists{/gist_id}", "starred_url": "https://api.github.com/users/fritzo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fritzo/subscriptions", "organizations_url": "https://api.github.com/users/fritzo/orgs", "repos_url": "https://api.github.com/users/fritzo/repos", "events_url": "https://api.github.com/users/fritzo/events{/privacy}", "received_events_url": "https://api.github.com/users/fritzo/received_events", "type": "User", "site_admin": false}, "created_at": "2017-12-26T19:34:10Z", "updated_at": "2017-12-26T19:34:30Z", "author_association": "CONTRIBUTOR", "body_html": "<p>This was briefly discussed on the <a href=\"https://docs.google.com/document/d/1wnABg0cdyaVMr-Xqz_brHBwnPJuzTeSk3Oqko2HHSfE/edit#heading=h.7w4tro6t2bxr\" rel=\"nofollow\">Design Doc</a>, but no conclusion was reached. We should discuss more. Here are my thoughts:</p>\n<p>It would be great to maximize compatibility with <a href=\"https://www.tensorflow.org/versions/r0.12/api_docs/python/contrib.distributions/kullback-leibler_divergence\" rel=\"nofollow\">Tensorflow Distributions</a> and provide a function <code>torch.distributions.kl(p,q)</code>. The <code>kl(p,q)</code> function seems cleaner to me than a <code>p.kl(q)</code> method. I also like the idea of a registration mechanism for multiple dispatch, maybe a decorator like</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-en\">@torch.distributions.register_kl</span>(Normal, Normal)\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">_normal_normal_kl</span>(<span class=\"pl-smi\">p</span>, <span class=\"pl-smi\">q</span>):\n    <span class=\"pl-k\">assert</span> <span class=\"pl-c1\">isinstance</span>(p, Normal) <span class=\"pl-k\">and</span> <span class=\"pl-c1\">isinstance</span>(q, Normal)\n    <span class=\"pl-c1\">...</span>implementation<span class=\"pl-c1\">...</span></pre></div>", "body_text": "This was briefly discussed on the Design Doc, but no conclusion was reached. We should discuss more. Here are my thoughts:\nIt would be great to maximize compatibility with Tensorflow Distributions and provide a function torch.distributions.kl(p,q). The kl(p,q) function seems cleaner to me than a p.kl(q) method. I also like the idea of a registration mechanism for multiple dispatch, maybe a decorator like\n@torch.distributions.register_kl(Normal, Normal)\ndef _normal_normal_kl(p, q):\n    assert isinstance(p, Normal) and isinstance(q, Normal)\n    ...implementation...", "body": "This was briefly discussed on the [Design Doc](https://docs.google.com/document/d/1wnABg0cdyaVMr-Xqz_brHBwnPJuzTeSk3Oqko2HHSfE/edit#heading=h.7w4tro6t2bxr), but no conclusion was reached. We should discuss more. Here are my thoughts:\r\n\r\nIt would be great to maximize compatibility with [Tensorflow Distributions](https://www.tensorflow.org/versions/r0.12/api_docs/python/contrib.distributions/kullback-leibler_divergence) and provide a function `torch.distributions.kl(p,q)`. The `kl(p,q)` function seems cleaner to me than a `p.kl(q)` method. I also like the idea of a registration mechanism for multiple dispatch, maybe a decorator like\r\n```py\r\n@torch.distributions.register_kl(Normal, Normal)\r\ndef _normal_normal_kl(p, q):\r\n    assert isinstance(p, Normal) and isinstance(q, Normal)\r\n    ...implementation...\r\n```"}