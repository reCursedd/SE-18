{"url": "https://api.github.com/repos/pytorch/pytorch/issues/3486", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/3486/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/3486/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/3486/events", "html_url": "https://github.com/pytorch/pytorch/issues/3486", "id": 271157070, "node_id": "MDU6SXNzdWUyNzExNTcwNzA=", "number": 3486, "title": "Creating a C extension API for PyTorch", "user": {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-11-04T01:36:35Z", "updated_at": "2018-04-26T17:02:56Z", "closed_at": "2018-04-26T17:02:56Z", "author_association": "CONTRIBUTOR", "body_html": "<p>This issues tracks the ability to be able to write Python C extension libraries that can interact with PyTorch tensors. We currently do not provide a good way to do this.</p>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> We should install header files with functions from <code>DynamicTypes.h</code> that can convert PyObject * into at::Tensor objects and also make the aten headers available. Like other libraries we can provide a function like <code>torch.include_directory()</code> that lets builds know where they can find these headers in the current install. For ATen this directory should be <code>$PREFIX/include/</code>, but for PyTorch's headers, it can be wherever.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> We should document how to build C extensions that use PyTorch and ensure that a user's favored way of building them works. For instance, a pybind11 module should be usable.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> We should also consider more user-friendly ways of getting access to C-land such as providing Cython support and possibly just helping to compile C++ code at runtime for quick experiments.</li>\n</ul>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=13488275\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/prigoyal\">@prigoyal</a> this should make building PyTorch extensions a lot less hacky.</p>", "body_text": "This issues tracks the ability to be able to write Python C extension libraries that can interact with PyTorch tensors. We currently do not provide a good way to do this.\n\n We should install header files with functions from DynamicTypes.h that can convert PyObject * into at::Tensor objects and also make the aten headers available. Like other libraries we can provide a function like torch.include_directory() that lets builds know where they can find these headers in the current install. For ATen this directory should be $PREFIX/include/, but for PyTorch's headers, it can be wherever.\n We should document how to build C extensions that use PyTorch and ensure that a user's favored way of building them works. For instance, a pybind11 module should be usable.\n We should also consider more user-friendly ways of getting access to C-land such as providing Cython support and possibly just helping to compile C++ code at runtime for quick experiments.\n\n@prigoyal this should make building PyTorch extensions a lot less hacky.", "body": "This issues tracks the ability to be able to write Python C extension libraries that can interact with PyTorch tensors. We currently do not provide a good way to do this.\r\n\r\n- [ ] We should install header files with functions from `DynamicTypes.h` that can convert PyObject * into at::Tensor objects and also make the aten headers available. Like other libraries we can provide a function like `torch.include_directory()` that lets builds know where they can find these headers in the current install. For ATen this directory should be `$PREFIX/include/`, but for PyTorch's headers, it can be wherever.\r\n- [ ] We should document how to build C extensions that use PyTorch and ensure that a user's favored way of building them works. For instance, a pybind11 module should be usable.\r\n- [ ] We should also consider more user-friendly ways of getting access to C-land such as providing Cython support and possibly just helping to compile C++ code at runtime for quick experiments.\r\n\r\n@prigoyal this should make building PyTorch extensions a lot less hacky."}