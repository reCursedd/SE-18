{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/297087530", "html_url": "https://github.com/pytorch/pytorch/pull/1353#issuecomment-297087530", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/1353", "id": 297087530, "node_id": "MDEyOklzc3VlQ29tbWVudDI5NzA4NzUzMA==", "user": {"login": "gchanan", "id": 3768583, "node_id": "MDQ6VXNlcjM3Njg1ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3768583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gchanan", "html_url": "https://github.com/gchanan", "followers_url": "https://api.github.com/users/gchanan/followers", "following_url": "https://api.github.com/users/gchanan/following{/other_user}", "gists_url": "https://api.github.com/users/gchanan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gchanan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gchanan/subscriptions", "organizations_url": "https://api.github.com/users/gchanan/orgs", "repos_url": "https://api.github.com/users/gchanan/repos", "events_url": "https://api.github.com/users/gchanan/events{/privacy}", "received_events_url": "https://api.github.com/users/gchanan/received_events", "type": "User", "site_admin": false}, "created_at": "2017-04-25T16:31:08Z", "updated_at": "2017-04-25T18:26:40Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=15841449\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ngimel\">@ngimel</a> good suggestion.  One other point that <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=4583066\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/apaszke\">@apaszke</a>  made previously is that this can be done more efficiently in a single loop.  I'm implementing something like this for two operands to support efficient numpy style broadcast (see <a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/gchanan/pytorch/commit/63711ee75c0f344443fcc54553a9016255e6bd5c/hovercard\" href=\"https://github.com/gchanan/pytorch/commit/63711ee75c0f344443fcc54553a9016255e6bd5c\">gchanan@<tt>63711ee</tt></a> as a POC).  Since we probably want to share these implementations as much as possible, and it's not clear exactly what that means yet with two operands, I'd suggest we either just get this in and I'll do the work to unify everything or @kileeent and I work this out in a separate branch.  I'd have a preference for the former given broadcast could take some work (need to decide for each function whether it's supported, update documentation, etc), but I'm happy either way.</p>", "body_text": "@ngimel good suggestion.  One other point that @apaszke  made previously is that this can be done more efficiently in a single loop.  I'm implementing something like this for two operands to support efficient numpy style broadcast (see gchanan@63711ee as a POC).  Since we probably want to share these implementations as much as possible, and it's not clear exactly what that means yet with two operands, I'd suggest we either just get this in and I'll do the work to unify everything or @kileeent and I work this out in a separate branch.  I'd have a preference for the former given broadcast could take some work (need to decide for each function whether it's supported, update documentation, etc), but I'm happy either way.", "body": "@ngimel good suggestion.  One other point that @apaszke  made previously is that this can be done more efficiently in a single loop.  I'm implementing something like this for two operands to support efficient numpy style broadcast (see https://github.com/gchanan/pytorch/commit/63711ee75c0f344443fcc54553a9016255e6bd5c as a POC).  Since we probably want to share these implementations as much as possible, and it's not clear exactly what that means yet with two operands, I'd suggest we either just get this in and I'll do the work to unify everything or @kileeent and I work this out in a separate branch.  I'd have a preference for the former given broadcast could take some work (need to decide for each function whether it's supported, update documentation, etc), but I'm happy either way."}