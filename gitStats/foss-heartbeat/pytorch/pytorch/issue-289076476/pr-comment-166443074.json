{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/166443074", "pull_request_review_id": 94505678, "id": 166443074, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NjQ0MzA3NA==", "diff_hunk": "@@ -288,15 +288,22 @@ def _iter(obj):\n \n \n def _unflatten(input, proto):\n+    from torch.nn.utils.rnn import PackedSequence\n+\n     # unflatten a list or tuple input into a nested list/tuple structure\n     # specified by proto\n     def unflatten_helper(input, proto):\n         res = []\n         if not isinstance(proto, (list, tuple)):\n             return input[0], input[1:]\n         for e in proto:\n-            res_e, input = unflatten_helper(input, e)\n-            res.append(res_e)\n+            if e is None:\n+                res.append(e)\n+            else:\n+                res_e, input = unflatten_helper(input, e)\n+                res.append(res_e)\n+        if isinstance(proto, PackedSequence):\n+            return PackedSequence(*res), input", "path": "torch/autograd/function.py", "position": null, "original_position": 21, "commit_id": "c9c0a5924fdbb682f43d1e499db132b5babdba72", "original_commit_id": "789dac8436892d861f60247d245bb8181eaef765", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "@anderspapitto and I agreed that we'll do `type(proto)(res)` and add a constructor to `PackedSequence` which takes a regular tuple.", "created_at": "2018-02-06T21:11:48Z", "updated_at": "2018-11-23T15:39:13Z", "html_url": "https://github.com/pytorch/pytorch/pull/4695#discussion_r166443074", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4695", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/166443074"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/4695#discussion_r166443074"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4695"}}, "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1388690\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/anderspapitto\">@anderspapitto</a> and I agreed that we'll do <code>type(proto)(res)</code> and add a constructor to <code>PackedSequence</code> which takes a regular tuple.</p>", "body_text": "@anderspapitto and I agreed that we'll do type(proto)(res) and add a constructor to PackedSequence which takes a regular tuple.", "in_reply_to_id": 166437354}