{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/164274716", "pull_request_review_id": 92028567, "id": 164274716, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NDI3NDcxNg==", "diff_hunk": "@@ -171,6 +171,34 @@ void fuseTransposeIntoGemm(std::shared_ptr<Graph>& graph) {\n   }\n }\n \n+void eliminatePackedSequence(std::shared_ptr<Graph>& graph) {\n+  for (auto it = graph->begin(); it != graph->end(); ++it) {\n+    auto* n = *it;\n+\n+    // for any PadPacked, if we can trace the PackedSequence back to", "path": "torch/csrc/jit/passes/onnx/peephole.cpp", "position": null, "original_position": 8, "commit_id": "c9c0a5924fdbb682f43d1e499db132b5babdba72", "original_commit_id": "fd3989d312a9e74288c167f3d49cde780bb0aebd", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "So, what it looks like to me, is that your optimization is validated by the following equations (in a simplified setting where these ops all have one argument/output; in reality the side conditions are slightly more complicated):\r\n\r\n```\r\nPadPacked(RNN(x)) == RNN(PackPadded(x))\r\nPadPacked(PackPadded(x)) = Id\r\n```\r\n\r\nSo it seems more sound to me to structure the optimization pass this way:\r\n\r\n1. Traverse the graph looking for occurrences of `PadPacked`\r\n2. If the output of `PadPacked` is used by the first argument of `RNN`, \"push\" it past the RNN, turning into a `PackPadded` on the first output of the RNN\r\n3. If the use of a `PadPacked` is a `PackPadded`, eliminate the pair of operations.\r\n\r\nThere's some leeway in whether or not you should require these to be single-use or not before the optimization fires, in reality they are probably all single use.\r\n\r\nHow does this sound?", "created_at": "2018-01-27T16:02:39Z", "updated_at": "2018-11-23T15:38:39Z", "html_url": "https://github.com/pytorch/pytorch/pull/4695#discussion_r164274716", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4695", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/164274716"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/4695#discussion_r164274716"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4695"}}, "body_html": "<p>So, what it looks like to me, is that your optimization is validated by the following equations (in a simplified setting where these ops all have one argument/output; in reality the side conditions are slightly more complicated):</p>\n<pre><code>PadPacked(RNN(x)) == RNN(PackPadded(x))\nPadPacked(PackPadded(x)) = Id\n</code></pre>\n<p>So it seems more sound to me to structure the optimization pass this way:</p>\n<ol>\n<li>Traverse the graph looking for occurrences of <code>PadPacked</code></li>\n<li>If the output of <code>PadPacked</code> is used by the first argument of <code>RNN</code>, \"push\" it past the RNN, turning into a <code>PackPadded</code> on the first output of the RNN</li>\n<li>If the use of a <code>PadPacked</code> is a <code>PackPadded</code>, eliminate the pair of operations.</li>\n</ol>\n<p>There's some leeway in whether or not you should require these to be single-use or not before the optimization fires, in reality they are probably all single use.</p>\n<p>How does this sound?</p>", "body_text": "So, what it looks like to me, is that your optimization is validated by the following equations (in a simplified setting where these ops all have one argument/output; in reality the side conditions are slightly more complicated):\nPadPacked(RNN(x)) == RNN(PackPadded(x))\nPadPacked(PackPadded(x)) = Id\n\nSo it seems more sound to me to structure the optimization pass this way:\n\nTraverse the graph looking for occurrences of PadPacked\nIf the output of PadPacked is used by the first argument of RNN, \"push\" it past the RNN, turning into a PackPadded on the first output of the RNN\nIf the use of a PadPacked is a PackPadded, eliminate the pair of operations.\n\nThere's some leeway in whether or not you should require these to be single-use or not before the optimization fires, in reality they are probably all single use.\nHow does this sound?", "in_reply_to_id": 163433042}