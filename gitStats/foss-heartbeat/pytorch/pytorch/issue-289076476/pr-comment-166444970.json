{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/166444970", "pull_request_review_id": 94507848, "id": 166444970, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NjQ0NDk3MA==", "diff_hunk": "@@ -142,7 +142,7 @@ def forward(self, input, hx=None):\n         is_packed = isinstance(input, PackedSequence)\n         if is_packed:\n             input, batch_sizes = input\n-            max_batch_size = batch_sizes[0]\n+            max_batch_size = batch_sizes.data[0]", "path": "torch/nn/modules/rnn.py", "position": null, "original_position": 14, "commit_id": "c9c0a5924fdbb682f43d1e499db132b5babdba72", "original_commit_id": "a617fe07a346a29e64ce35e7e75f1ffc4acf47f7", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "OK, it is going to be affected.\r\n\r\nTo make this code forwards compatible, you'll need to replace `batch_sizes.data[0]` with `int(batch_sizes[0])`.\r\n\r\nBack story: in the old days, indexing into 1D tensors would give you a Python number back, but indexing into 1D variables would give you a (scalar) Variable. Since we are merging Variable and Tensor, we are changing the semantics of Tensor indexing to match Variable. This means that the code you wrote above will give you a PyTorch Scalar and will subsequently break when you try to use it later. Using an explicit conversion with `int()` solves the problem, and also solves you having to look at `data`.", "created_at": "2018-02-06T21:18:14Z", "updated_at": "2018-11-23T15:39:14Z", "html_url": "https://github.com/pytorch/pytorch/pull/4695#discussion_r166444970", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4695", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/166444970"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/4695#discussion_r166444970"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4695"}}, "body_html": "<p>OK, it is going to be affected.</p>\n<p>To make this code forwards compatible, you'll need to replace <code>batch_sizes.data[0]</code> with <code>int(batch_sizes[0])</code>.</p>\n<p>Back story: in the old days, indexing into 1D tensors would give you a Python number back, but indexing into 1D variables would give you a (scalar) Variable. Since we are merging Variable and Tensor, we are changing the semantics of Tensor indexing to match Variable. This means that the code you wrote above will give you a PyTorch Scalar and will subsequently break when you try to use it later. Using an explicit conversion with <code>int()</code> solves the problem, and also solves you having to look at <code>data</code>.</p>", "body_text": "OK, it is going to be affected.\nTo make this code forwards compatible, you'll need to replace batch_sizes.data[0] with int(batch_sizes[0]).\nBack story: in the old days, indexing into 1D tensors would give you a Python number back, but indexing into 1D variables would give you a (scalar) Variable. Since we are merging Variable and Tensor, we are changing the semantics of Tensor indexing to match Variable. This means that the code you wrote above will give you a PyTorch Scalar and will subsequently break when you try to use it later. Using an explicit conversion with int() solves the problem, and also solves you having to look at data.", "in_reply_to_id": 166162437}