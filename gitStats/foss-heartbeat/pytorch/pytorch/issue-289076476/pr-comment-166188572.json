{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/166188572", "pull_request_review_id": 94226962, "id": 166188572, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NjE4ODU3Mg==", "diff_hunk": "@@ -288,15 +288,22 @@ def _iter(obj):\n \n \n def _unflatten(input, proto):\n+    from torch.nn.utils.rnn import PackedSequence\n+\n     # unflatten a list or tuple input into a nested list/tuple structure\n     # specified by proto\n     def unflatten_helper(input, proto):\n         res = []\n         if not isinstance(proto, (list, tuple)):\n             return input[0], input[1:]\n         for e in proto:\n-            res_e, input = unflatten_helper(input, e)\n-            res.append(res_e)\n+            if e is None:\n+                res.append(e)\n+            else:\n+                res_e, input = unflatten_helper(input, e)\n+                res.append(res_e)\n+        if isinstance(proto, PackedSequence):", "path": "torch/autograd/function.py", "position": null, "original_position": 20, "commit_id": "c9c0a5924fdbb682f43d1e499db132b5babdba72", "original_commit_id": "13a2906bf6ad6779c7320baa62380d1c57d9ff8c", "user": {"login": "dzhulgakov", "id": 17890620, "node_id": "MDQ6VXNlcjE3ODkwNjIw", "avatar_url": "https://avatars2.githubusercontent.com/u/17890620?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dzhulgakov", "html_url": "https://github.com/dzhulgakov", "followers_url": "https://api.github.com/users/dzhulgakov/followers", "following_url": "https://api.github.com/users/dzhulgakov/following{/other_user}", "gists_url": "https://api.github.com/users/dzhulgakov/gists{/gist_id}", "starred_url": "https://api.github.com/users/dzhulgakov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dzhulgakov/subscriptions", "organizations_url": "https://api.github.com/users/dzhulgakov/orgs", "repos_url": "https://api.github.com/users/dzhulgakov/repos", "events_url": "https://api.github.com/users/dzhulgakov/events{/privacy}", "received_events_url": "https://api.github.com/users/dzhulgakov/received_events", "type": "User", "site_admin": false}, "body": "this is not a problem of this diff, but I wonder if there's a more elegant solution to handle this than importing random tuples.\r\n\r\nOne semi-hacky option is to spot any `namedtuple` instances. All of them seem to have `_make` method that takes iterable. So you can do `if hasattr(type(proto), '_make') return type(proto)(*res), input`\r\n\r\nThen it'd work for any namedtuple and you'd avoid dependencies", "created_at": "2018-02-06T05:07:52Z", "updated_at": "2018-11-23T15:39:08Z", "html_url": "https://github.com/pytorch/pytorch/pull/4695#discussion_r166188572", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4695", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/166188572"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/4695#discussion_r166188572"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4695"}}, "body_html": "<p>this is not a problem of this diff, but I wonder if there's a more elegant solution to handle this than importing random tuples.</p>\n<p>One semi-hacky option is to spot any <code>namedtuple</code> instances. All of them seem to have <code>_make</code> method that takes iterable. So you can do <code>if hasattr(type(proto), '_make') return type(proto)(*res), input</code></p>\n<p>Then it'd work for any namedtuple and you'd avoid dependencies</p>", "body_text": "this is not a problem of this diff, but I wonder if there's a more elegant solution to handle this than importing random tuples.\nOne semi-hacky option is to spot any namedtuple instances. All of them seem to have _make method that takes iterable. So you can do if hasattr(type(proto), '_make') return type(proto)(*res), input\nThen it'd work for any namedtuple and you'd avoid dependencies"}