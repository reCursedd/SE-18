{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/163646579", "pull_request_review_id": 91293928, "id": 163646579, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MzY0NjU3OQ==", "diff_hunk": "@@ -171,6 +171,34 @@ void fuseTransposeIntoGemm(std::shared_ptr<Graph>& graph) {\n   }\n }\n \n+void eliminatePackedSequence(std::shared_ptr<Graph>& graph) {\n+  for (auto it = graph->begin(); it != graph->end(); ++it) {\n+    auto* n = *it;\n+\n+    // for any PadPacked, if we can trace the PackedSequence back to", "path": "torch/csrc/jit/passes/onnx/peephole.cpp", "position": null, "original_position": 8, "commit_id": "c9c0a5924fdbb682f43d1e499db132b5babdba72", "original_commit_id": "fd3989d312a9e74288c167f3d49cde780bb0aebd", "user": {"login": "anderspapitto", "id": 1388690, "node_id": "MDQ6VXNlcjEzODg2OTA=", "avatar_url": "https://avatars3.githubusercontent.com/u/1388690?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anderspapitto", "html_url": "https://github.com/anderspapitto", "followers_url": "https://api.github.com/users/anderspapitto/followers", "following_url": "https://api.github.com/users/anderspapitto/following{/other_user}", "gists_url": "https://api.github.com/users/anderspapitto/gists{/gist_id}", "starred_url": "https://api.github.com/users/anderspapitto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anderspapitto/subscriptions", "organizations_url": "https://api.github.com/users/anderspapitto/orgs", "repos_url": "https://api.github.com/users/anderspapitto/repos", "events_url": "https://api.github.com/users/anderspapitto/events{/privacy}", "received_events_url": "https://api.github.com/users/anderspapitto/received_events", "type": "User", "site_admin": false}, "body": "Here's an example export of 3-layer Elman RNN, using packed sequences. (try your best to ignore all the concats and slices cluttering it up, they aren't relevant here)\r\n\r\nWIth peephole optimizations turned off, we get\r\n\r\n```\r\ngraph(%0 : Float(5, 2, 7)\r\n      %1 : Float(3, 2, 13)\r\n      %2 : Long(2)\r\n      %3 : Float(13, 7)\r\n      %4 : Float(13, 13)\r\n      %5 : Float(13)\r\n      %6 : Float(13)\r\n      %7 : Float(13, 13)\r\n      %8 : Float(13, 13)\r\n      %9 : Float(13)\r\n      %10 : Float(13)\r\n      %11 : Float(13, 13)\r\n      %12 : Float(13, 13)\r\n      %13 : Float(13)\r\n      %14 : Float(13)) {\r\n  %15 : Float(10, 7), %16 : Long(5) = PackPadded(%0, %2), scope: RnnModelWithPackedSequence\r\n  %17 : UNKNOWN_TYPE = Constant[value= 10  10  10  10  10  10  10 [ CPUIntTensor{7} ]](), scope: RnnModelWithPackedSequence/RNN[model]\r\n  %18 : UNKNOWN_TYPE = Concat[axis=0](%5, %6), scope: RnnModelWithPackedSequence/RNN[model]\r\n  %19 : UNKNOWN_TYPE = Slice[axes=[0], ends=[1], starts=[0]](%1), scope: RnnModelWithPackedSequence/RNN[model]\r\n  %20 : UNKNOWN_TYPE, %21 : UNKNOWN_TYPE = RNN[activations=[tanh], hidden_size=13](%15, %3, %4, %18, %17, %19), scope: RnnModelWithPackedSequence/RNN[model]\r\n  %22 : UNKNOWN_TYPE = Concat[axis=0](%9, %10), scope: RnnModelWithPackedSequence/RNN[model]\r\n  %23 : UNKNOWN_TYPE = Slice[axes=[0], ends=[2], starts=[1]](%1), scope: RnnModelWithPackedSequence/RNN[model]\r\n  %24 : UNKNOWN_TYPE, %25 : UNKNOWN_TYPE = RNN[activations=[tanh], hidden_size=13](%20, %7, %8, %22, %17, %23), scope: RnnModelWithPackedSequence/RNN[model]\r\n  %26 : UNKNOWN_TYPE = Concat[axis=0](%13, %14), scope: RnnModelWithPackedSequence/RNN[model]\r\n  %27 : UNKNOWN_TYPE = Slice[axes=[0], ends=[3], starts=[2]](%1), scope: RnnModelWithPackedSequence/RNN[model]\r\n  %28 : Float(10, 13), %29 : UNKNOWN_TYPE = RNN[activations=[tanh], hidden_size=13](%24, %11, %12, %26, %17, %27), scope: RnnModelWithPackedSequence/RNN[model]\r\n  %30 : Float(5, 2, 13), %31 : Long(2) = PadPacked(%28, %16), scope: RnnModelWithPackedSequence\r\n  return (%30);\r\n}\r\n```\r\n\r\nwith peephole optimizations turned back on, we get\r\n\r\n```\r\ngraph(%0 : Float(5, 2, 7)\r\n      %1 : Float(3, 2, 13)\r\n      %2 : Long(2)\r\n      %3 : Float(13, 7)\r\n      %4 : Float(13, 13)\r\n      %5 : Float(13)\r\n      %6 : Float(13)\r\n      %7 : Float(13, 13)\r\n      %8 : Float(13, 13)\r\n      %9 : Float(13)\r\n      %10 : Float(13)\r\n      %11 : Float(13, 13)\r\n      %12 : Float(13, 13)\r\n      %13 : Float(13)\r\n      %14 : Float(13)) {\r\n  %15 : UNKNOWN_TYPE = Constant[value= 10  10  10  10  10  10  10 [ CPUIntTensor{7} ]](), scope: RnnModelWithPackedSequence/RNN[model]\r\n  %16 : UNKNOWN_TYPE = Concat[axis=0](%5, %6), scope: RnnModelWithPackedSequence/RNN[model]\r\n  %17 : UNKNOWN_TYPE = Slice[axes=[0], ends=[1], starts=[0]](%1), scope: RnnModelWithPackedSequence/RNN[model]\r\n  %18 : UNKNOWN_TYPE, %19 : UNKNOWN_TYPE = RNN[activations=[tanh], hidden_size=13](%0, %3, %4, %16, %15, %17), scope: RnnModelWithPackedSequence/RNN[model]\r\n  %20 : UNKNOWN_TYPE = Concat[axis=0](%9, %10), scope: RnnModelWithPackedSequence/RNN[model]\r\n  %21 : UNKNOWN_TYPE = Slice[axes=[0], ends=[2], starts=[1]](%1), scope: RnnModelWithPackedSequence/RNN[model]\r\n  %22 : UNKNOWN_TYPE, %23 : UNKNOWN_TYPE = RNN[activations=[tanh], hidden_size=13](%18, %7, %8, %20, %15, %21), scope: RnnModelWithPackedSequence/RNN[model]\r\n  %24 : UNKNOWN_TYPE = Concat[axis=0](%13, %14), scope: RnnModelWithPackedSequence/RNN[model]\r\n  %25 : UNKNOWN_TYPE = Slice[axes=[0], ends=[3], starts=[2]](%1), scope: RnnModelWithPackedSequence/RNN[model]\r\n  %26 : Float(10, 13), %27 : UNKNOWN_TYPE = RNN[activations=[tanh], hidden_size=13](%22, %11, %12, %24, %15, %25), scope: RnnModelWithPackedSequence/RNN[model]\r\n  return (%26);\r\n}\r\n```", "created_at": "2018-01-24T19:07:57Z", "updated_at": "2018-11-23T15:38:32Z", "html_url": "https://github.com/pytorch/pytorch/pull/4695#discussion_r163646579", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4695", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/163646579"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/4695#discussion_r163646579"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4695"}}, "body_html": "<p>Here's an example export of 3-layer Elman RNN, using packed sequences. (try your best to ignore all the concats and slices cluttering it up, they aren't relevant here)</p>\n<p>WIth peephole optimizations turned off, we get</p>\n<pre><code>graph(%0 : Float(5, 2, 7)\n      %1 : Float(3, 2, 13)\n      %2 : Long(2)\n      %3 : Float(13, 7)\n      %4 : Float(13, 13)\n      %5 : Float(13)\n      %6 : Float(13)\n      %7 : Float(13, 13)\n      %8 : Float(13, 13)\n      %9 : Float(13)\n      %10 : Float(13)\n      %11 : Float(13, 13)\n      %12 : Float(13, 13)\n      %13 : Float(13)\n      %14 : Float(13)) {\n  %15 : Float(10, 7), %16 : Long(5) = PackPadded(%0, %2), scope: RnnModelWithPackedSequence\n  %17 : UNKNOWN_TYPE = Constant[value= 10  10  10  10  10  10  10 [ CPUIntTensor{7} ]](), scope: RnnModelWithPackedSequence/RNN[model]\n  %18 : UNKNOWN_TYPE = Concat[axis=0](%5, %6), scope: RnnModelWithPackedSequence/RNN[model]\n  %19 : UNKNOWN_TYPE = Slice[axes=[0], ends=[1], starts=[0]](%1), scope: RnnModelWithPackedSequence/RNN[model]\n  %20 : UNKNOWN_TYPE, %21 : UNKNOWN_TYPE = RNN[activations=[tanh], hidden_size=13](%15, %3, %4, %18, %17, %19), scope: RnnModelWithPackedSequence/RNN[model]\n  %22 : UNKNOWN_TYPE = Concat[axis=0](%9, %10), scope: RnnModelWithPackedSequence/RNN[model]\n  %23 : UNKNOWN_TYPE = Slice[axes=[0], ends=[2], starts=[1]](%1), scope: RnnModelWithPackedSequence/RNN[model]\n  %24 : UNKNOWN_TYPE, %25 : UNKNOWN_TYPE = RNN[activations=[tanh], hidden_size=13](%20, %7, %8, %22, %17, %23), scope: RnnModelWithPackedSequence/RNN[model]\n  %26 : UNKNOWN_TYPE = Concat[axis=0](%13, %14), scope: RnnModelWithPackedSequence/RNN[model]\n  %27 : UNKNOWN_TYPE = Slice[axes=[0], ends=[3], starts=[2]](%1), scope: RnnModelWithPackedSequence/RNN[model]\n  %28 : Float(10, 13), %29 : UNKNOWN_TYPE = RNN[activations=[tanh], hidden_size=13](%24, %11, %12, %26, %17, %27), scope: RnnModelWithPackedSequence/RNN[model]\n  %30 : Float(5, 2, 13), %31 : Long(2) = PadPacked(%28, %16), scope: RnnModelWithPackedSequence\n  return (%30);\n}\n</code></pre>\n<p>with peephole optimizations turned back on, we get</p>\n<pre><code>graph(%0 : Float(5, 2, 7)\n      %1 : Float(3, 2, 13)\n      %2 : Long(2)\n      %3 : Float(13, 7)\n      %4 : Float(13, 13)\n      %5 : Float(13)\n      %6 : Float(13)\n      %7 : Float(13, 13)\n      %8 : Float(13, 13)\n      %9 : Float(13)\n      %10 : Float(13)\n      %11 : Float(13, 13)\n      %12 : Float(13, 13)\n      %13 : Float(13)\n      %14 : Float(13)) {\n  %15 : UNKNOWN_TYPE = Constant[value= 10  10  10  10  10  10  10 [ CPUIntTensor{7} ]](), scope: RnnModelWithPackedSequence/RNN[model]\n  %16 : UNKNOWN_TYPE = Concat[axis=0](%5, %6), scope: RnnModelWithPackedSequence/RNN[model]\n  %17 : UNKNOWN_TYPE = Slice[axes=[0], ends=[1], starts=[0]](%1), scope: RnnModelWithPackedSequence/RNN[model]\n  %18 : UNKNOWN_TYPE, %19 : UNKNOWN_TYPE = RNN[activations=[tanh], hidden_size=13](%0, %3, %4, %16, %15, %17), scope: RnnModelWithPackedSequence/RNN[model]\n  %20 : UNKNOWN_TYPE = Concat[axis=0](%9, %10), scope: RnnModelWithPackedSequence/RNN[model]\n  %21 : UNKNOWN_TYPE = Slice[axes=[0], ends=[2], starts=[1]](%1), scope: RnnModelWithPackedSequence/RNN[model]\n  %22 : UNKNOWN_TYPE, %23 : UNKNOWN_TYPE = RNN[activations=[tanh], hidden_size=13](%18, %7, %8, %20, %15, %21), scope: RnnModelWithPackedSequence/RNN[model]\n  %24 : UNKNOWN_TYPE = Concat[axis=0](%13, %14), scope: RnnModelWithPackedSequence/RNN[model]\n  %25 : UNKNOWN_TYPE = Slice[axes=[0], ends=[3], starts=[2]](%1), scope: RnnModelWithPackedSequence/RNN[model]\n  %26 : Float(10, 13), %27 : UNKNOWN_TYPE = RNN[activations=[tanh], hidden_size=13](%22, %11, %12, %24, %15, %25), scope: RnnModelWithPackedSequence/RNN[model]\n  return (%26);\n}\n</code></pre>", "body_text": "Here's an example export of 3-layer Elman RNN, using packed sequences. (try your best to ignore all the concats and slices cluttering it up, they aren't relevant here)\nWIth peephole optimizations turned off, we get\ngraph(%0 : Float(5, 2, 7)\n      %1 : Float(3, 2, 13)\n      %2 : Long(2)\n      %3 : Float(13, 7)\n      %4 : Float(13, 13)\n      %5 : Float(13)\n      %6 : Float(13)\n      %7 : Float(13, 13)\n      %8 : Float(13, 13)\n      %9 : Float(13)\n      %10 : Float(13)\n      %11 : Float(13, 13)\n      %12 : Float(13, 13)\n      %13 : Float(13)\n      %14 : Float(13)) {\n  %15 : Float(10, 7), %16 : Long(5) = PackPadded(%0, %2), scope: RnnModelWithPackedSequence\n  %17 : UNKNOWN_TYPE = Constant[value= 10  10  10  10  10  10  10 [ CPUIntTensor{7} ]](), scope: RnnModelWithPackedSequence/RNN[model]\n  %18 : UNKNOWN_TYPE = Concat[axis=0](%5, %6), scope: RnnModelWithPackedSequence/RNN[model]\n  %19 : UNKNOWN_TYPE = Slice[axes=[0], ends=[1], starts=[0]](%1), scope: RnnModelWithPackedSequence/RNN[model]\n  %20 : UNKNOWN_TYPE, %21 : UNKNOWN_TYPE = RNN[activations=[tanh], hidden_size=13](%15, %3, %4, %18, %17, %19), scope: RnnModelWithPackedSequence/RNN[model]\n  %22 : UNKNOWN_TYPE = Concat[axis=0](%9, %10), scope: RnnModelWithPackedSequence/RNN[model]\n  %23 : UNKNOWN_TYPE = Slice[axes=[0], ends=[2], starts=[1]](%1), scope: RnnModelWithPackedSequence/RNN[model]\n  %24 : UNKNOWN_TYPE, %25 : UNKNOWN_TYPE = RNN[activations=[tanh], hidden_size=13](%20, %7, %8, %22, %17, %23), scope: RnnModelWithPackedSequence/RNN[model]\n  %26 : UNKNOWN_TYPE = Concat[axis=0](%13, %14), scope: RnnModelWithPackedSequence/RNN[model]\n  %27 : UNKNOWN_TYPE = Slice[axes=[0], ends=[3], starts=[2]](%1), scope: RnnModelWithPackedSequence/RNN[model]\n  %28 : Float(10, 13), %29 : UNKNOWN_TYPE = RNN[activations=[tanh], hidden_size=13](%24, %11, %12, %26, %17, %27), scope: RnnModelWithPackedSequence/RNN[model]\n  %30 : Float(5, 2, 13), %31 : Long(2) = PadPacked(%28, %16), scope: RnnModelWithPackedSequence\n  return (%30);\n}\n\nwith peephole optimizations turned back on, we get\ngraph(%0 : Float(5, 2, 7)\n      %1 : Float(3, 2, 13)\n      %2 : Long(2)\n      %3 : Float(13, 7)\n      %4 : Float(13, 13)\n      %5 : Float(13)\n      %6 : Float(13)\n      %7 : Float(13, 13)\n      %8 : Float(13, 13)\n      %9 : Float(13)\n      %10 : Float(13)\n      %11 : Float(13, 13)\n      %12 : Float(13, 13)\n      %13 : Float(13)\n      %14 : Float(13)) {\n  %15 : UNKNOWN_TYPE = Constant[value= 10  10  10  10  10  10  10 [ CPUIntTensor{7} ]](), scope: RnnModelWithPackedSequence/RNN[model]\n  %16 : UNKNOWN_TYPE = Concat[axis=0](%5, %6), scope: RnnModelWithPackedSequence/RNN[model]\n  %17 : UNKNOWN_TYPE = Slice[axes=[0], ends=[1], starts=[0]](%1), scope: RnnModelWithPackedSequence/RNN[model]\n  %18 : UNKNOWN_TYPE, %19 : UNKNOWN_TYPE = RNN[activations=[tanh], hidden_size=13](%0, %3, %4, %16, %15, %17), scope: RnnModelWithPackedSequence/RNN[model]\n  %20 : UNKNOWN_TYPE = Concat[axis=0](%9, %10), scope: RnnModelWithPackedSequence/RNN[model]\n  %21 : UNKNOWN_TYPE = Slice[axes=[0], ends=[2], starts=[1]](%1), scope: RnnModelWithPackedSequence/RNN[model]\n  %22 : UNKNOWN_TYPE, %23 : UNKNOWN_TYPE = RNN[activations=[tanh], hidden_size=13](%18, %7, %8, %20, %15, %21), scope: RnnModelWithPackedSequence/RNN[model]\n  %24 : UNKNOWN_TYPE = Concat[axis=0](%13, %14), scope: RnnModelWithPackedSequence/RNN[model]\n  %25 : UNKNOWN_TYPE = Slice[axes=[0], ends=[3], starts=[2]](%1), scope: RnnModelWithPackedSequence/RNN[model]\n  %26 : Float(10, 13), %27 : UNKNOWN_TYPE = RNN[activations=[tanh], hidden_size=13](%22, %11, %12, %24, %15, %25), scope: RnnModelWithPackedSequence/RNN[model]\n  return (%26);\n}", "in_reply_to_id": 163433042}