{"url": "https://api.github.com/repos/pytorch/pytorch/issues/6112", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/6112/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/6112/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/6112/events", "html_url": "https://github.com/pytorch/pytorch/pull/6112", "id": 309847429, "node_id": "MDExOlB1bGxSZXF1ZXN0MTc4Mzk4Mjk1", "number": 6112, "title": "Give ATen errors backtraces", "user": {"login": "goldsborough", "id": 6429851, "node_id": "MDQ6VXNlcjY0Mjk4NTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/6429851?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goldsborough", "html_url": "https://github.com/goldsborough", "followers_url": "https://api.github.com/users/goldsborough/followers", "following_url": "https://api.github.com/users/goldsborough/following{/other_user}", "gists_url": "https://api.github.com/users/goldsborough/gists{/gist_id}", "starred_url": "https://api.github.com/users/goldsborough/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goldsborough/subscriptions", "organizations_url": "https://api.github.com/users/goldsborough/orgs", "repos_url": "https://api.github.com/users/goldsborough/repos", "events_url": "https://api.github.com/users/goldsborough/events{/privacy}", "received_events_url": "https://api.github.com/users/goldsborough/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 545367190, "node_id": "MDU6TGFiZWw1NDUzNjcxOTA=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/awaiting%20response", "name": "awaiting response", "color": "5319e7", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-03-29T17:55:05Z", "updated_at": "2018-11-23T15:41:27Z", "closed_at": "2018-03-31T14:39:13Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/6112", "html_url": "https://github.com/pytorch/pytorch/pull/6112", "diff_url": "https://github.com/pytorch/pytorch/pull/6112.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/6112.patch"}, "body_html": "<p>This PR builds on top of <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"309189472\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/6059\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/pytorch/pytorch/pull/6059/hovercard\" href=\"https://github.com/pytorch/pytorch/pull/6059\">#6059</a> to now add backtraces to errors inside ATen. This greatly improves the debugging experience for our C++ users. It works towards <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"309149162\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/6055\" data-hovercard-type=\"issue\" data-hovercard-url=\"/pytorch/pytorch/issues/6055/hovercard\" href=\"https://github.com/pytorch/pytorch/issues/6055\">#6055</a>.</p>\n<h2>Example</h2>\n<p>Before:</p>\n<pre><code>terminate called after throwing an instance of 'std::runtime_error'\n  what():  hello\n./run.sh: line 1: 786857 Aborted                 (core dumped) LD_LIBRARY_PATH=\"torch/lib/:./build/lib.linux-x86_64-3.6/torch/:/home/psag/local/miniconda/lib\" ./e\n</code></pre>\n<p>After:</p>\n<pre><code>terminate called after throwing an instance of 'at::Error'\n  what():  hello (embedding_backward at ../src/ATen/native/Embedding.cpp:38)\nframe #0: at::Type::embedding_backward(at::Tensor const&amp;, at::Tensor const&amp;, long, long, bool, bool) const + 0x27 (0x7f7bc5e15f07 in torch/lib/libATen.so.1)\nframe #1: torch::autograd::VariableType::embedding_backward(at::Tensor const&amp;, at::Tensor const&amp;, long, long, bool, bool) const + 0x1fd (0x7f7bc1519fbd in ./build/lib.linux-x86_64-3.6/torch/_C.cpython-36m-x86_64-linux-gnu.so)\nframe #2: torch::autograd::generated::EmbeddingBackward::apply(std::vector&lt;torch::autograd::Variable, std::allocator&lt;torch::autograd::Variable&gt; &gt; const&amp;) + 0xf0 (0x7f7bc15ec490 in ./build/lib.linux-x86_64-3.6/torch/_C.cpython-36m-x86_64-linux-gnu.so)\nframe #3: torch::autograd::Engine::evaluate_function(torch::autograd::FunctionTask&amp;) + 0x3db (0x7f7bc14aa69b in ./build/lib.linux-x86_64-3.6/torch/_C.cpython-36m-x86_64-linux-gnu.so)\nframe #4: torch::autograd::Engine::thread_main(torch::autograd::GraphTask*) + 0xe5 (0x7f7bc14ab665 in ./build/lib.linux-x86_64-3.6/torch/_C.cpython-36m-x86_64-linux-gnu.so)\nframe #5: torch::autograd::Engine::thread_init(int) + 0x5e (0x7f7bc14a7dce in ./build/lib.linux-x86_64-3.6/torch/_C.cpython-36m-x86_64-linux-gnu.so)\n\n./run.sh: line 1: 685721 Aborted                 (core dumped) LD_LIBRARY_PATH=\"torch/lib/:./build/lib.linux-x86_64-3.6/torch/:/home/psag/local/miniconda/lib\" ./e\n</code></pre>\n<h2>Implementation</h2>\n<p>The implementation of this feature relies entirely on glibc/libstdc++/libcxx features and requires no extra dependencies. It uses the <code>backtrace()</code> family of glibc function to get call stack information and then uses <code>__cxa_demangle</code> from libstc++/libcxx to demangle symbol names. It works well across dynamic library boundaries and works on both Linux and macOS. Windows has a pretty good API to implement this, but is not a priority now. I've put some pointers on how to implement it on Windows if we get a request.</p>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=4583066\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/apaszke\">@apaszke</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1716488\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/cpuhrsch\">@cpuhrsch</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=655866\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/colesbury\">@colesbury</a></p>\n<p>CC <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=3605224\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ebetica\">@ebetica</a></p>\n<p><span class=\"issue-keyword tooltipped tooltipped-se\" aria-label=\"This pull request closes issue #6055.\">Fixes</span> <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"309149162\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/6055\" data-hovercard-type=\"issue\" data-hovercard-url=\"/pytorch/pytorch/issues/6055/hovercard\" href=\"https://github.com/pytorch/pytorch/issues/6055\">#6055</a></p>", "body_text": "This PR builds on top of #6059 to now add backtraces to errors inside ATen. This greatly improves the debugging experience for our C++ users. It works towards #6055.\nExample\nBefore:\nterminate called after throwing an instance of 'std::runtime_error'\n  what():  hello\n./run.sh: line 1: 786857 Aborted                 (core dumped) LD_LIBRARY_PATH=\"torch/lib/:./build/lib.linux-x86_64-3.6/torch/:/home/psag/local/miniconda/lib\" ./e\n\nAfter:\nterminate called after throwing an instance of 'at::Error'\n  what():  hello (embedding_backward at ../src/ATen/native/Embedding.cpp:38)\nframe #0: at::Type::embedding_backward(at::Tensor const&, at::Tensor const&, long, long, bool, bool) const + 0x27 (0x7f7bc5e15f07 in torch/lib/libATen.so.1)\nframe #1: torch::autograd::VariableType::embedding_backward(at::Tensor const&, at::Tensor const&, long, long, bool, bool) const + 0x1fd (0x7f7bc1519fbd in ./build/lib.linux-x86_64-3.6/torch/_C.cpython-36m-x86_64-linux-gnu.so)\nframe #2: torch::autograd::generated::EmbeddingBackward::apply(std::vector<torch::autograd::Variable, std::allocator<torch::autograd::Variable> > const&) + 0xf0 (0x7f7bc15ec490 in ./build/lib.linux-x86_64-3.6/torch/_C.cpython-36m-x86_64-linux-gnu.so)\nframe #3: torch::autograd::Engine::evaluate_function(torch::autograd::FunctionTask&) + 0x3db (0x7f7bc14aa69b in ./build/lib.linux-x86_64-3.6/torch/_C.cpython-36m-x86_64-linux-gnu.so)\nframe #4: torch::autograd::Engine::thread_main(torch::autograd::GraphTask*) + 0xe5 (0x7f7bc14ab665 in ./build/lib.linux-x86_64-3.6/torch/_C.cpython-36m-x86_64-linux-gnu.so)\nframe #5: torch::autograd::Engine::thread_init(int) + 0x5e (0x7f7bc14a7dce in ./build/lib.linux-x86_64-3.6/torch/_C.cpython-36m-x86_64-linux-gnu.so)\n\n./run.sh: line 1: 685721 Aborted                 (core dumped) LD_LIBRARY_PATH=\"torch/lib/:./build/lib.linux-x86_64-3.6/torch/:/home/psag/local/miniconda/lib\" ./e\n\nImplementation\nThe implementation of this feature relies entirely on glibc/libstdc++/libcxx features and requires no extra dependencies. It uses the backtrace() family of glibc function to get call stack information and then uses __cxa_demangle from libstc++/libcxx to demangle symbol names. It works well across dynamic library boundaries and works on both Linux and macOS. Windows has a pretty good API to implement this, but is not a priority now. I've put some pointers on how to implement it on Windows if we get a request.\n@apaszke @cpuhrsch @colesbury\nCC @ebetica\nFixes #6055", "body": "This PR builds on top of #6059 to now add backtraces to errors inside ATen. This greatly improves the debugging experience for our C++ users. It works towards #6055.\r\n\r\n## Example\r\n\r\nBefore:\r\n\r\n```\r\nterminate called after throwing an instance of 'std::runtime_error'\r\n  what():  hello\r\n./run.sh: line 1: 786857 Aborted                 (core dumped) LD_LIBRARY_PATH=\"torch/lib/:./build/lib.linux-x86_64-3.6/torch/:/home/psag/local/miniconda/lib\" ./e\r\n```\r\n\r\nAfter:\r\n\r\n```\r\nterminate called after throwing an instance of 'at::Error'\r\n  what():  hello (embedding_backward at ../src/ATen/native/Embedding.cpp:38)\r\nframe #0: at::Type::embedding_backward(at::Tensor const&, at::Tensor const&, long, long, bool, bool) const + 0x27 (0x7f7bc5e15f07 in torch/lib/libATen.so.1)\r\nframe #1: torch::autograd::VariableType::embedding_backward(at::Tensor const&, at::Tensor const&, long, long, bool, bool) const + 0x1fd (0x7f7bc1519fbd in ./build/lib.linux-x86_64-3.6/torch/_C.cpython-36m-x86_64-linux-gnu.so)\r\nframe #2: torch::autograd::generated::EmbeddingBackward::apply(std::vector<torch::autograd::Variable, std::allocator<torch::autograd::Variable> > const&) + 0xf0 (0x7f7bc15ec490 in ./build/lib.linux-x86_64-3.6/torch/_C.cpython-36m-x86_64-linux-gnu.so)\r\nframe #3: torch::autograd::Engine::evaluate_function(torch::autograd::FunctionTask&) + 0x3db (0x7f7bc14aa69b in ./build/lib.linux-x86_64-3.6/torch/_C.cpython-36m-x86_64-linux-gnu.so)\r\nframe #4: torch::autograd::Engine::thread_main(torch::autograd::GraphTask*) + 0xe5 (0x7f7bc14ab665 in ./build/lib.linux-x86_64-3.6/torch/_C.cpython-36m-x86_64-linux-gnu.so)\r\nframe #5: torch::autograd::Engine::thread_init(int) + 0x5e (0x7f7bc14a7dce in ./build/lib.linux-x86_64-3.6/torch/_C.cpython-36m-x86_64-linux-gnu.so)\r\n\r\n./run.sh: line 1: 685721 Aborted                 (core dumped) LD_LIBRARY_PATH=\"torch/lib/:./build/lib.linux-x86_64-3.6/torch/:/home/psag/local/miniconda/lib\" ./e\r\n```\r\n\r\n## Implementation\r\n\r\nThe implementation of this feature relies entirely on glibc/libstdc++/libcxx features and requires no extra dependencies. It uses the `backtrace()` family of glibc function to get call stack information and then uses `__cxa_demangle` from libstc++/libcxx to demangle symbol names. It works well across dynamic library boundaries and works on both Linux and macOS. Windows has a pretty good API to implement this, but is not a priority now. I've put some pointers on how to implement it on Windows if we get a request.\r\n\r\n@apaszke @cpuhrsch @colesbury \r\n\r\nCC @ebetica \r\n\r\nFixes #6055 "}