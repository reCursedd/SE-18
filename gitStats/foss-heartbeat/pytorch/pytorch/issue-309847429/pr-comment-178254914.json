{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/178254914", "pull_request_review_id": 108288021, "id": 178254914, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3ODI1NDkxNA==", "diff_hunk": "@@ -5,14 +5,164 @@\n #include <cstdint>\n #include <cstdio>\n #include <exception>\n+#include <sstream>\n #include <stdexcept>\n #include <string>\n #include <type_traits>\n+#include <vector>\n \n #include <stdarg.h>\n \n+#if !defined(_WIN32)\n+#include <cxxabi.h>\n+#include <execinfo.h>\n+#endif // !defined(_WIN32)\n+\n namespace at {\n namespace detail {\n+\n+// TODO: This backtrace retrieval can be implemented on Windows via the Windows\n+// API using `CaptureStackBackTrace` and `SymFromAddr`.\n+// https://stackoverflow.com/questions/5693192/win32-backtrace-from-c-code\n+// https://stackoverflow.com/questions/26398064/counterpart-to-glibcs-backtrace-and-backtrace-symbols-on-windows\n+// https://msdn.microsoft.com/en-us/library/windows/desktop/bb204633%28v=vs.85%29.aspx.\n+#if !defined(_WIN32)\n+struct FrameInformation {\n+  /// If available, the demangled name of the function at this frame, else\n+  /// whatever (possibly mangled) name we got from `backtrace()`.\n+  std::string function_name;\n+  /// This is a number in hexadecimal form (e.g. \"0xdead\") representing the\n+  /// offset into the function's machine code at which the function's body\n+  /// starts, i.e. skipping the \"prologue\" that handles stack manipulation and\n+  /// other calling convention things.\n+  std::string offset_into_function;\n+  /// NOTE: In debugger parlance, the \"object file\" refers to the ELF file that\n+  /// the symbol originates from, i.e. either an executable or a library.\n+  std::string object_file;\n+};\n+\n+inline FrameInformation parse_frame_information(\n+    const std::string& frame_string) {\n+  FrameInformation frame;\n+\n+  // This is the function name in the CXX ABI mangled format, e.g. something\n+  // like _Z1gv. Reference:\n+  // https://itanium-cxx-abi.github.io/cxx-abi/abi.html#mangling\n+  std::string mangled_function_name;\n+\n+#ifdef __GLIBCXX__\n+  // In GLIBCXX, `frame_string` follows the pattern\n+  // `<object-file>(<mangled-function-name>+<offset-into-function>)\n+  // [<return-address>]`\n+\n+  const auto function_name_start = frame_string.find('(') + 1;\n+  const auto offset_start = frame_string.find('+', function_name_start) + 1;\n+  const auto offset_end = frame_string.find(')', offset_start);", "path": "aten/src/ATen/Error.h", "position": null, "original_position": 56, "commit_id": "05ca220a56797d7f61dbbd465d9bf617e8602a60", "original_commit_id": "ae43fdfb8bbac711dc7187646f438f8b2a69fe07", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Can you check that they're not `npos`?", "created_at": "2018-03-30T08:36:04Z", "updated_at": "2018-11-23T15:41:21Z", "html_url": "https://github.com/pytorch/pytorch/pull/6112#discussion_r178254914", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/6112", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/178254914"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/6112#discussion_r178254914"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/6112"}}, "body_html": "<p>Can you check that they're not <code>npos</code>?</p>", "body_text": "Can you check that they're not npos?"}