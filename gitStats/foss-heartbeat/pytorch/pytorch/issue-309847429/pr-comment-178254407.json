{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/178254407", "pull_request_review_id": 108288021, "id": 178254407, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3ODI1NDQwNw==", "diff_hunk": "@@ -5,14 +5,164 @@\n #include <cstdint>\n #include <cstdio>\n #include <exception>\n+#include <sstream>\n #include <stdexcept>\n #include <string>\n #include <type_traits>\n+#include <vector>\n \n #include <stdarg.h>\n \n+#if !defined(_WIN32)\n+#include <cxxabi.h>\n+#include <execinfo.h>\n+#endif // !defined(_WIN32)\n+\n namespace at {\n namespace detail {\n+\n+// TODO: This backtrace retrieval can be implemented on Windows via the Windows\n+// API using `CaptureStackBackTrace` and `SymFromAddr`.\n+// https://stackoverflow.com/questions/5693192/win32-backtrace-from-c-code\n+// https://stackoverflow.com/questions/26398064/counterpart-to-glibcs-backtrace-and-backtrace-symbols-on-windows\n+// https://msdn.microsoft.com/en-us/library/windows/desktop/bb204633%28v=vs.85%29.aspx.\n+#if !defined(_WIN32)\n+struct FrameInformation {\n+  /// If available, the demangled name of the function at this frame, else\n+  /// whatever (possibly mangled) name we got from `backtrace()`.\n+  std::string function_name;\n+  /// This is a number in hexadecimal form (e.g. \"0xdead\") representing the\n+  /// offset into the function's machine code at which the function's body\n+  /// starts, i.e. skipping the \"prologue\" that handles stack manipulation and\n+  /// other calling convention things.\n+  std::string offset_into_function;\n+  /// NOTE: In debugger parlance, the \"object file\" refers to the ELF file that\n+  /// the symbol originates from, i.e. either an executable or a library.\n+  std::string object_file;\n+};\n+\n+inline FrameInformation parse_frame_information(\n+    const std::string& frame_string) {\n+  FrameInformation frame;\n+\n+  // This is the function name in the CXX ABI mangled format, e.g. something\n+  // like _Z1gv. Reference:\n+  // https://itanium-cxx-abi.github.io/cxx-abi/abi.html#mangling\n+  std::string mangled_function_name;\n+\n+#ifdef __GLIBCXX__\n+  // In GLIBCXX, `frame_string` follows the pattern\n+  // `<object-file>(<mangled-function-name>+<offset-into-function>)\n+  // [<return-address>]`\n+\n+  const auto function_name_start = frame_string.find('(') + 1;\n+  const auto offset_start = frame_string.find('+', function_name_start) + 1;\n+  const auto offset_end = frame_string.find(')', offset_start);\n+  frame.object_file = frame_string.substr(0, function_name_start - 1);\n+  frame.offset_into_function =\n+      frame_string.substr(offset_start, offset_end - offset_start);\n+\n+  // NOTE: We don't need to parse the return address because\n+  // we already have it from the call to `backtrace()`.\n+\n+  mangled_function_name = frame_string.substr(\n+      function_name_start, (offset_start - 1) - function_name_start);\n+#else\n+  // In LIBCXX, The pattern is\n+  // `<frame number> <object-file> <return-address> <mangled-function-name> +\n+  // <offset-into-function>`\n+  std::string skip;\n+  std::istringstream input_stream(frame_string);\n+  input_stream >> skip >> frame.object_file >> skip >> mangled_function_name >>\n+      skip >> frame.offset_into_function;\n+#endif\n+\n+  int status = -1;\n+  // This function will demangle the mangled function name into a more human\n+  // readable format, e.g. _Z1gv -> g().\n+  // More information:\n+  // https://github.com/gcc-mirror/gcc/blob/master/libstdc%2B%2B-v3/libsupc%2B%2B/cxxabi.h\n+  char* demangled_function_name = abi::__cxa_demangle(\n+      mangled_function_name.c_str(),\n+      /*__output_buffer=*/nullptr,\n+      /*__length=*/0,\n+      &status);\n+\n+  // Demangling may fail, for example when the name does not follow the\n+  // standard C++ (Itanium ABI) mangling scheme. This is the case for `main` or\n+  // `clone` for example, so the mangled name is a fine default.\n+  if (status == 0) {\n+    frame.function_name = demangled_function_name;\n+  } else {\n+    frame.function_name = mangled_function_name;\n+  }\n+\n+  // `__cxa_demangle` returns a malloc'd string that we have to free ourselves.\n+  free(demangled_function_name);\n+\n+  return frame;\n+}\n+\n+inline std::string get_backtrace(\n+    size_t frames_to_skip = 0,\n+    size_t maximum_number_of_frames = 64) {\n+  // We always skip this frame (backtrace).\n+  frames_to_skip += 1;\n+\n+  std::vector<void*> callstack(\n+      frames_to_skip + maximum_number_of_frames, nullptr);\n+  // backtrace() gives us a list of return addresses in the current call stack.\n+  // NOTE: As per man (3) backtrace it can never fail\n+  // (http://man7.org/linux/man-pages/man3/backtrace.3.html).\n+  auto number_of_frames = ::backtrace(callstack.data(), callstack.size());\n+\n+  // Skip as many frames as requested. This is not efficient, but the sizes here\n+  // are small and it makes the code nicer and safer.\n+  for (; frames_to_skip > 0 && number_of_frames > 0;\n+       --frames_to_skip, --number_of_frames) {\n+    callstack.erase(callstack.begin());\n+  }\n+\n+  // `number_of_frames` is strictly less than the current capacity of\n+  // `callstack`, so this is just a pointer subtraction and makes the subsequent\n+  // code safer.\n+  callstack.resize(number_of_frames);\n+\n+  // `backtrace_symbols` takes the return addresses obtained from `backtrace()`\n+  // and fetches string representations of each stack. Unfortunately it doesn't\n+  // return a struct of individual pieces of information but a concatenated\n+  // string, so we'll have to parse the string after.\n+  char** raw_symbols = ::backtrace_symbols(callstack.data(), callstack.size());\n+  std::vector<std::string> symbols(raw_symbols, raw_symbols + callstack.size());\n+\n+  // The array returned by `backtrace_symbols` is malloc'd and must be manually\n+  // freed, but not the strings inside the array.\n+  free(raw_symbols);", "path": "aten/src/ATen/Error.h", "position": null, "original_position": 136, "commit_id": "05ca220a56797d7f61dbbd465d9bf617e8602a60", "original_commit_id": "ae43fdfb8bbac711dc7187646f438f8b2a69fe07", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Let's use a `unique_ptr` to manage this", "created_at": "2018-03-30T08:32:36Z", "updated_at": "2018-11-23T15:41:21Z", "html_url": "https://github.com/pytorch/pytorch/pull/6112#discussion_r178254407", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/6112", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/178254407"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/6112#discussion_r178254407"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/6112"}}, "body_html": "<p>Let's use a <code>unique_ptr</code> to manage this</p>", "body_text": "Let's use a unique_ptr to manage this"}