{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/205231866", "pull_request_review_id": 140461902, "id": 205231866, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTIzMTg2Ng==", "diff_hunk": "@@ -319,4 +320,113 @@ std::shared_ptr<script::Module> ImportIRModule(\n   return decoder.decode(module, serialized_module, storage_map);\n }\n \n+// TODO: mmap file reader\n+class PyTorchFileReader {\n+ public:\n+  PyTorchFileReader(const std::string& filename) {\n+   fp = std::fopen(filename.c_str(), \"rb\");\n+   std::fseek(fp, 0L, SEEK_END);\n+   file_size = std::ftell(fp);\n+   std::fseek(fp, 0L, SEEK_SET);\n+   readAndValidateFileHeader();\n+  }\n+\n+  // returns raw data map and the index of the last record (i.e. the ModelProto)\n+  std::tuple<std::unordered_map<std::string, std::string>&, size_t> read_raw() {\n+    JIT_ASSERT(!finalized);\n+    size_t final_record_offset = cursor; // TODO: this is probably wrong\n+    while (cursor != file_size) {\n+      final_record_offset = readRecordIntoMap();\n+    }\n+    finalized = true;\n+    return {raw_values, final_record_offset};\n+  }\n+\n+  ~PyTorchFileReader() {\n+    std::fclose(fp);\n+  }\n+", "path": "torch/csrc/jit/import.cpp", "position": null, "original_position": 37, "commit_id": "a8547739734eff329ac82fcbd0e4590894267a82", "original_commit_id": "17e4045588f0b19107e92bfbc7c82ae48b205cea", "user": {"login": "jamesr66a", "id": 4685384, "node_id": "MDQ6VXNlcjQ2ODUzODQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/4685384?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamesr66a", "html_url": "https://github.com/jamesr66a", "followers_url": "https://api.github.com/users/jamesr66a/followers", "following_url": "https://api.github.com/users/jamesr66a/following{/other_user}", "gists_url": "https://api.github.com/users/jamesr66a/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamesr66a/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamesr66a/subscriptions", "organizations_url": "https://api.github.com/users/jamesr66a/orgs", "repos_url": "https://api.github.com/users/jamesr66a/repos", "events_url": "https://api.github.com/users/jamesr66a/events{/privacy}", "received_events_url": "https://api.github.com/users/jamesr66a/received_events", "type": "User", "site_admin": false}, "body": "I think I'm going to scrap the concept of assuming that the last entry is the proto and instead encode that as an offset in the file header", "created_at": "2018-07-25T19:18:42Z", "updated_at": "2018-11-23T15:48:06Z", "html_url": "https://github.com/pytorch/pytorch/pull/9794#discussion_r205231866", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/9794", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/205231866"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/9794#discussion_r205231866"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/9794"}}, "body_html": "<p>I think I'm going to scrap the concept of assuming that the last entry is the proto and instead encode that as an offset in the file header</p>", "body_text": "I think I'm going to scrap the concept of assuming that the last entry is the proto and instead encode that as an offset in the file header", "in_reply_to_id": 204952765}