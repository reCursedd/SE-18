{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/204950576", "pull_request_review_id": 140125178, "id": 204950576, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDk1MDU3Ng==", "diff_hunk": "@@ -756,6 +757,174 @@ std::tuple<std::string, RawDataExportMap> ExportGraph(\n   return std::make_tuple(model_proto.SerializeAsString(), graph_encoder.get_raw_data_export_map());\n }\n \n+class PyTorchFileWriter {\n+public:\n+  PyTorchFileWriter(const std::string& filename){\n+    fp = std::fopen(filename.c_str(), \"wb\");\n+    writeFileHeader();\n+  }\n+\n+  // Serialize a tensor to file, then return its offset\n+  size_t serializeTensor(const std::string& name, at::Tensor t) {\n+    JIT_ASSERT(!finalized);\n+    JIT_ASSERT(cursor % kFieldAlignment == 0);\n+    // Keep track of the offset into the file for this tensor\n+    JIT_ASSERT(key_to_file_offset.count(name) == 0);\n+    key_to_file_offset[name] = cursor;\n+\n+    // Write out local \"file\" header: size of \"file\" in bytes + padding\n+    size_t copy_bytes = t.type().elementSizeInBytes() * t.numel();\n+    write64BitIntegerLittleEndian(copy_bytes);\n+    padToNextAlignmentBoundary();\n+\n+    // Write out the actual data\n+    std::fwrite(t.data_ptr(), copy_bytes, 1u, fp);\n+    cursor += copy_bytes;\n+    padToNextAlignmentBoundary();\n+\n+    return key_to_file_offset[name];\n+  }\n+\n+  size_t tensorNameToOffset(const std::string& name) const {\n+    return key_to_file_offset.at(name);\n+  }\n+\n+  size_t getModelProtoOffset() const {\n+    return key_to_file_offset.at(\"__MODEL_PROTO\");\n+  }\n+\n+  // Serialize the model proto to file, replacing the tensor names with\n+  // string verisions of their file offsets. This also finalizes the file,\n+  // and calling serializeTensor after calling this method is illegal.\n+  // NOTE: this method mutates the model proto\n+  size_t serializeModelProto(::ONNX_NAMESPACE::ModelProto *model_proto) {", "path": "torch/csrc/jit/export.cpp", "position": 1064, "original_position": 61, "commit_id": "a8547739734eff329ac82fcbd0e4590894267a82", "original_commit_id": "17e4045588f0b19107e92bfbc7c82ae48b205cea", "user": {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, "body": "This logic can instead be moved entirely into ModelEncoder and ModelDecoder.", "created_at": "2018-07-25T00:21:59Z", "updated_at": "2018-11-23T15:48:03Z", "html_url": "https://github.com/pytorch/pytorch/pull/9794#discussion_r204950576", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/9794", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/204950576"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/9794#discussion_r204950576"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/9794"}}, "body_html": "<p>This logic can instead be moved entirely into ModelEncoder and ModelDecoder.</p>", "body_text": "This logic can instead be moved entirely into ModelEncoder and ModelDecoder.", "in_reply_to_id": 204950233}