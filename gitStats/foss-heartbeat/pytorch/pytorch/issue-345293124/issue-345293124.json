{"url": "https://api.github.com/repos/pytorch/pytorch/issues/9938", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/9938/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/9938/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/9938/events", "html_url": "https://github.com/pytorch/pytorch/pull/9938", "id": 345293124, "node_id": "MDExOlB1bGxSZXF1ZXN0MjA0NDgzMDA0", "number": 9938, "title": "Creates stream pool", "user": {"login": "mruberry", "id": 38511765, "node_id": "MDQ6VXNlcjM4NTExNzY1", "avatar_url": "https://avatars3.githubusercontent.com/u/38511765?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mruberry", "html_url": "https://github.com/mruberry", "followers_url": "https://api.github.com/users/mruberry/followers", "following_url": "https://api.github.com/users/mruberry/following{/other_user}", "gists_url": "https://api.github.com/users/mruberry/gists{/gist_id}", "starred_url": "https://api.github.com/users/mruberry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mruberry/subscriptions", "organizations_url": "https://api.github.com/users/mruberry/orgs", "repos_url": "https://api.github.com/users/mruberry/repos", "events_url": "https://api.github.com/users/mruberry/events{/privacy}", "received_events_url": "https://api.github.com/users/mruberry/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 559719279, "node_id": "MDU6TGFiZWw1NTk3MTkyNzk=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/ready%20for%20review", "name": "ready for review", "color": "b60205", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2018-07-27T16:40:06Z", "updated_at": "2018-11-23T15:50:15Z", "closed_at": "2018-08-30T19:41:37Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/9938", "html_url": "https://github.com/pytorch/pytorch/pull/9938", "diff_url": "https://github.com/pytorch/pytorch/pull/9938.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/9938.patch"}, "body_html": "<p>This PR creates a stream pool per issue <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"343207895\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/9646\" data-hovercard-type=\"issue\" data-hovercard-url=\"/pytorch/pytorch/issues/9646/hovercard\" href=\"https://github.com/pytorch/pytorch/issues/9646\">#9646</a>. When a new stream is requested, that device it's requested on lazily creates two pools, one low priority and one high priority, of 32 streams each. Streams are returned from these pools round-robin. That is, stream 0 is returned, then stream 1... then stream 31, then stream 0... This PR also takes the opportunity to clean up the stream API, reducing its complexity and verbosity.</p>\n<p>Change notes:</p>\n<ul>\n<li>There are now 3 sets of streams per device, the default stream, the low priority streams, and the high priority streams. These streams live in lazily initialized pools and are destroyed on shutdown.</li>\n<li>All stream refcounting has been removed (the pools pattern replaces it).</li>\n<li>Setting a stream now sets it on its device. Streams are associated with a device and the previous<br>\nrequirement to specify that device was unnecessary.</li>\n<li>There is no exposure for setting the flags on a stream. This may also seem like a regression but the flag was always set to cudaStreamNonBlocking.</li>\n<li>Streams are now low or high priority whereas previously the priority could be set with an integer. In practice, however, the range for priorities is -1 to 0 on the latest hardware. -1 is high priority, 0 is low priority (aka default priority). Low vs. high actually clarifies this behavior if people were trying finer separations. (E.g., if someone tried streams with priorities 0, 1, and 2, they would actually all have priority 0, historically, and the intended behavior would not be respected.)</li>\n<li>Unused THCStream and THCState stream-related functions were removed.</li>\n<li>A new test of pooling behavior was added in stream_test.</li>\n</ul>\n<p>fyi: <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=655866\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/colesbury\">@colesbury</a>, <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=4583066\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/apaszke\">@apaszke</a>, <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=6429851\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/goldsborough\">@goldsborough</a></p>", "body_text": "This PR creates a stream pool per issue #9646. When a new stream is requested, that device it's requested on lazily creates two pools, one low priority and one high priority, of 32 streams each. Streams are returned from these pools round-robin. That is, stream 0 is returned, then stream 1... then stream 31, then stream 0... This PR also takes the opportunity to clean up the stream API, reducing its complexity and verbosity.\nChange notes:\n\nThere are now 3 sets of streams per device, the default stream, the low priority streams, and the high priority streams. These streams live in lazily initialized pools and are destroyed on shutdown.\nAll stream refcounting has been removed (the pools pattern replaces it).\nSetting a stream now sets it on its device. Streams are associated with a device and the previous\nrequirement to specify that device was unnecessary.\nThere is no exposure for setting the flags on a stream. This may also seem like a regression but the flag was always set to cudaStreamNonBlocking.\nStreams are now low or high priority whereas previously the priority could be set with an integer. In practice, however, the range for priorities is -1 to 0 on the latest hardware. -1 is high priority, 0 is low priority (aka default priority). Low vs. high actually clarifies this behavior if people were trying finer separations. (E.g., if someone tried streams with priorities 0, 1, and 2, they would actually all have priority 0, historically, and the intended behavior would not be respected.)\nUnused THCStream and THCState stream-related functions were removed.\nA new test of pooling behavior was added in stream_test.\n\nfyi: @colesbury, @apaszke, @goldsborough", "body": "This PR creates a stream pool per issue #9646. When a new stream is requested, that device it's requested on lazily creates two pools, one low priority and one high priority, of 32 streams each. Streams are returned from these pools round-robin. That is, stream 0 is returned, then stream 1... then stream 31, then stream 0... This PR also takes the opportunity to clean up the stream API, reducing its complexity and verbosity. \r\n\r\nChange notes:\r\n\r\n- There are now 3 sets of streams per device, the default stream, the low priority streams, and the high priority streams. These streams live in lazily initialized pools and are destroyed on shutdown.\r\n- All stream refcounting has been removed (the pools pattern replaces it). \r\n- Setting a stream now sets it on its device. Streams are associated with a device and the previous\r\nrequirement to specify that device was unnecessary.\r\n- There is no exposure for setting the flags on a stream. This may also seem like a regression but the flag was always set to cudaStreamNonBlocking.\r\n- Streams are now low or high priority whereas previously the priority could be set with an integer. In practice, however, the range for priorities is -1 to 0 on the latest hardware. -1 is high priority, 0 is low priority (aka default priority). Low vs. high actually clarifies this behavior if people were trying finer separations. (E.g., if someone tried streams with priorities 0, 1, and 2, they would actually all have priority 0, historically, and the intended behavior would not be respected.) \r\n- Unused THCStream and THCState stream-related functions were removed. \r\n- A new test of pooling behavior was added in stream_test. \r\n\r\nfyi: @colesbury, @apaszke, @goldsborough \r\n\r\n\r\n"}