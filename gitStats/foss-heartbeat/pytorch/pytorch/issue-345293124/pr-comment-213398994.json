{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/213398994", "pull_request_review_id": 150226438, "id": 213398994, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMzM5ODk5NA==", "diff_hunk": "@@ -67,77 +137,64 @@ namespace detail {\n     AT_ASSERT(device >= 0 && device < num_gpus);\n   }\n \n-  CUDAStreamInternals* CUDAStream_getDefaultStreamOnDevice(int64_t device) {\n-    initCUDAStreamsOnce();\n-    check_gpu(device);\n-    return &default_streams[device];\n-  }\n-  CUDAStreamInternals* CUDAStream_getDefaultStream() {\n-    return CUDAStream_getDefaultStreamOnDevice(current_device());\n-  }\n-\n-  // Creates (and retains) and new cuda stream\n-  CUDAStreamInternals* CUDAStream_createAndRetainWithOptions(int32_t flags, int32_t priority) {\n-    CUDAStreamInternals* internals = (CUDAStreamInternals*) malloc(sizeof(CUDAStreamInternals));\n-    internals->is_destructible = true;\n-    internals->refcount = 1;\n-    internals->device = current_device();\n-    #ifndef __HIP_PLATFORM_HCC__\n-      AT_CUDA_CHECK(cudaStreamCreateWithPriority(&internals->stream, flags, priority));\n-    #else \n-      AT_CUDA_CHECK(cudaStreamCreateWithFlags(&internals->stream, flags));\n-    #endif // __HIP_PLATFORM_HCC__\n-    return internals;\n+  // Helper to determine the index of the stream to return\n+  // Streams are returned round-robin, and the counter is \"kept\" between\n+  // 0 and STREAMS_PER_POOl. \n+  // Note: it is possible the counter will grow beyond STREAMS_PER_POOL \n+  // temporarily, but it will eventually return to the desired range.\n+  static int get_idx(std::atomic<int> &counter) {\n+    int raw_idx = counter++;\n+    int modded = raw_idx % STREAMS_PER_POOL;\n+    if (raw_idx >= STREAMS_PER_POOL && modded == 0) {\n+      counter -= STREAMS_PER_POOL;\n+    }", "path": "aten/src/ATen/cuda/CUDAStream.cpp", "position": null, "original_position": 184, "commit_id": "3c0c30659be4528f10b94829b64f8532c3e61bb1", "original_commit_id": "47920408ab3d205b1817b9be4865fc8d0b2402ba", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "This is confusing. You're claiming to generate numbers in the `[0, STREAMS_PER_POOL]` interval, but it really looks like you're doing `[1, STREAMS_PER_POOL]`. Apart from that it seems simpler to just do `return (raw_idx % STREAMS_PER_POOL) + 1`", "created_at": "2018-08-28T17:13:53Z", "updated_at": "2018-11-23T15:50:10Z", "html_url": "https://github.com/pytorch/pytorch/pull/9938#discussion_r213398994", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/9938", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/213398994"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/9938#discussion_r213398994"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/9938"}}, "body_html": "<p>This is confusing. You're claiming to generate numbers in the <code>[0, STREAMS_PER_POOL]</code> interval, but it really looks like you're doing <code>[1, STREAMS_PER_POOL]</code>. Apart from that it seems simpler to just do <code>return (raw_idx % STREAMS_PER_POOL) + 1</code></p>", "body_text": "This is confusing. You're claiming to generate numbers in the [0, STREAMS_PER_POOL] interval, but it really looks like you're doing [1, STREAMS_PER_POOL]. Apart from that it seems simpler to just do return (raw_idx % STREAMS_PER_POOL) + 1"}