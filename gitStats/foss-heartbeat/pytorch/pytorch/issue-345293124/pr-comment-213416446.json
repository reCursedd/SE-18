{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/213416446", "pull_request_review_id": 150248169, "id": 213416446, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMzQxNjQ0Ng==", "diff_hunk": "@@ -1,57 +1,127 @@\n #include \"ATen/cuda/CUDAStream.h\"\n #include \"ATen/cuda/CUDAContext.h\"\n #include \"ATen/cuda/Exceptions.h\"\n+#include \"ATen/DeviceGuard.h\"\n #include \"ATen/Error.h\"\n \n #include <mutex>\n #include <atomic>\n+#include <cstdint>\n+#include <deque>\n+#include <vector>\n \n // Internal implementation is entirely hidden\n+// Note: CUDAStreamInternals doubles for a THCStream\n struct CUDAStreamInternals {\n-  bool is_destructible;\n-  std::atomic<int> refcount;\n-  int64_t device; // Note: cudaGetDevice works with int32_t, not int64_t\n-  cudaStream_t stream;\n+  CUDAStreamInternals() = default;\n+\n+  ~CUDAStreamInternals() {\n+    if (stream) cudaStreamDestroy(stream);\n+  }\n+\n+  int64_t device = -1; \n+  cudaStream_t stream = nullptr;\n };\n \n namespace at {\n namespace cuda {\n \n namespace detail {\n \n-  /*\n-  * Stream state\n-  */\n-  static constexpr cudaStream_t DEFAULT_STREAM = 0;\n-\n-  static std::once_flag init_flag;\n+  // Global stream state and constants\n   static int64_t num_gpus;\n-  static CUDAStreamInternals* default_streams;\n+  static constexpr int STREAMS_PER_POOL = 32;\n+  static constexpr unsigned int DEFAULT_FLAGS = cudaStreamNonBlocking;\n+  static int HIGH_PRIORITY = 0;", "path": "aten/src/ATen/cuda/CUDAStream.cpp", "position": null, "original_position": 46, "commit_id": "3c0c30659be4528f10b94829b64f8532c3e61bb1", "original_commit_id": "47920408ab3d205b1817b9be4865fc8d0b2402ba", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "Since these constants are not initialized for HIP, I'd quite like it if they were ifdef'ed out, so people don't accidentally use them (in their uninitialized form).", "created_at": "2018-08-28T18:03:52Z", "updated_at": "2018-11-23T15:50:11Z", "html_url": "https://github.com/pytorch/pytorch/pull/9938#discussion_r213416446", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/9938", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/213416446"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/9938#discussion_r213416446"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/9938"}}, "body_html": "<p>Since these constants are not initialized for HIP, I'd quite like it if they were ifdef'ed out, so people don't accidentally use them (in their uninitialized form).</p>", "body_text": "Since these constants are not initialized for HIP, I'd quite like it if they were ifdef'ed out, so people don't accidentally use them (in their uninitialized form).", "in_reply_to_id": 206213255}