{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/213399824", "pull_request_review_id": 150226438, "id": 213399824, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMzM5OTgyNA==", "diff_hunk": "@@ -67,77 +137,64 @@ namespace detail {\n     AT_ASSERT(device >= 0 && device < num_gpus);\n   }\n \n-  CUDAStreamInternals* CUDAStream_getDefaultStreamOnDevice(int64_t device) {\n-    initCUDAStreamsOnce();\n-    check_gpu(device);\n-    return &default_streams[device];\n-  }\n-  CUDAStreamInternals* CUDAStream_getDefaultStream() {\n-    return CUDAStream_getDefaultStreamOnDevice(current_device());\n-  }\n-\n-  // Creates (and retains) and new cuda stream\n-  CUDAStreamInternals* CUDAStream_createAndRetainWithOptions(int32_t flags, int32_t priority) {\n-    CUDAStreamInternals* internals = (CUDAStreamInternals*) malloc(sizeof(CUDAStreamInternals));\n-    internals->is_destructible = true;\n-    internals->refcount = 1;\n-    internals->device = current_device();\n-    #ifndef __HIP_PLATFORM_HCC__\n-      AT_CUDA_CHECK(cudaStreamCreateWithPriority(&internals->stream, flags, priority));\n-    #else \n-      AT_CUDA_CHECK(cudaStreamCreateWithFlags(&internals->stream, flags));\n-    #endif // __HIP_PLATFORM_HCC__\n-    return internals;\n+  // Helper to determine the index of the stream to return\n+  // Streams are returned round-robin, and the counter is \"kept\" between\n+  // 0 and STREAMS_PER_POOl. \n+  // Note: it is possible the counter will grow beyond STREAMS_PER_POOL \n+  // temporarily, but it will eventually return to the desired range.\n+  static int get_idx(std::atomic<int> &counter) {\n+    int raw_idx = counter++;\n+    int modded = raw_idx % STREAMS_PER_POOL;\n+    if (raw_idx >= STREAMS_PER_POOL && modded == 0) {\n+      counter -= STREAMS_PER_POOL;\n+    }\n+    return modded;\n   }\n \n-  // Note: despite not being \"unsafe,\" is using these methods in a multithreaded\n-  // environment then the caller must be sure that streams are valid\n-  // when they're requested. These methods will throw an error if an\n-  // invalid stream is requested.\n-  CUDAStreamInternals* CUDAStream_getAndRetainCurrentStreamOnDevice(int64_t device) {\n+  CUDAStreamInternals* CUDAStream_getDefaultStream(int64_t device) {\n     initCUDAStreamsOnce();\n+    if (device == -1) device = current_device();\n     check_gpu(device);\n-    auto cur = current_streams[device];\n-    AT_ASSERT(CUDAStream_retain(cur));\n-    return cur;\n-  }\n-  CUDAStreamInternals* CUDAStream_getAndRetainCurrentStream() {\n-    return CUDAStream_getAndRetainCurrentStreamOnDevice(current_device());\n+    return &default_streams[device];\n   }\n \n-  // Note: these unsafe methods do not retain the stream before returning it.\n-  // This is unsafe behavior and these methods SHOULD NOT BE USED.\n-  // They are here only for legacy compatibility.\n-  CUDAStreamInternals* CUDAStream_getCurrentStreamOnDeviceUnsafe(int64_t device) {\n+  // Returns a stream from the requested pool\n+  // Note: when called the first time on a device, this will create the\n+  // stream pools for that device.\n+  CUDAStreamInternals* CUDAStream_createStream(\n+    const bool isHighPriority\n+  , int64_t device) {\n     initCUDAStreamsOnce();\n+    if (device == -1) device = current_device();\n     check_gpu(device);\n-    return current_streams[device];\n-  }\n-  CUDAStreamInternals* CUDAStream_getCurrentStreamUnsafe() {\n-    return CUDAStream_getCurrentStreamOnDeviceUnsafe(current_device());\n-  }\n+    \n+    // Initializes the stream pools (once)\n+    std::call_once(device_flags[device], initDeviceStreamState, device);\n \n-  void CUDAStream_setStreamOnDevice(int64_t device, CUDAStreamInternals* ptr) {\n-    initCUDAStreamsOnce();\n-    check_gpu(device);\n-    AT_ASSERT(ptr);\n-    AT_ASSERT(ptr->device == device);\n-    AT_ASSERT(CUDAStream_retain(ptr));\n+    if (isHighPriority) {\n+      const auto idx = get_idx(high_priority_counters[device]);\n+      return &high_priority_streams[device][idx];\n+    }\n \n-    CUDAStream_free(current_streams[device]);\n-    current_streams[device] = ptr;\n-  }\n+    const auto idx = get_idx(low_priority_counters[device]);\n+    return &low_priority_streams[device][idx];", "path": "aten/src/ATen/cuda/CUDAStream.cpp", "position": null, "original_position": 243, "commit_id": "3c0c30659be4528f10b94829b64f8532c3e61bb1", "original_commit_id": "47920408ab3d205b1817b9be4865fc8d0b2402ba", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Could we simply assign `low_priority_streams` or `high_priority_streams` to a reference? There's really no reason to duplicate the code.", "created_at": "2018-08-28T17:16:30Z", "updated_at": "2018-11-23T15:50:10Z", "html_url": "https://github.com/pytorch/pytorch/pull/9938#discussion_r213399824", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/9938", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/213399824"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/9938#discussion_r213399824"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/9938"}}, "body_html": "<p>Could we simply assign <code>low_priority_streams</code> or <code>high_priority_streams</code> to a reference? There's really no reason to duplicate the code.</p>", "body_text": "Could we simply assign low_priority_streams or high_priority_streams to a reference? There's really no reason to duplicate the code."}