{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/206213255", "pull_request_review_id": 141594396, "id": 206213255, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjIxMzI1NQ==", "diff_hunk": "@@ -1,57 +1,127 @@\n #include \"ATen/cuda/CUDAStream.h\"\n #include \"ATen/cuda/CUDAContext.h\"\n #include \"ATen/cuda/Exceptions.h\"\n+#include \"ATen/DeviceGuard.h\"\n #include \"ATen/Error.h\"\n \n #include <mutex>\n #include <atomic>\n+#include <cstdint>\n+#include <deque>\n+#include <vector>\n \n // Internal implementation is entirely hidden\n+// Note: CUDAStreamInternals doubles for a THCStream\n struct CUDAStreamInternals {\n-  bool is_destructible;\n-  std::atomic<int> refcount;\n-  int64_t device; // Note: cudaGetDevice works with int32_t, not int64_t\n-  cudaStream_t stream;\n+  CUDAStreamInternals() = default;\n+\n+  ~CUDAStreamInternals() {\n+    if (stream) cudaStreamDestroy(stream);\n+  }\n+\n+  int64_t device = -1; \n+  cudaStream_t stream = nullptr;\n };\n \n namespace at {\n namespace cuda {\n \n namespace detail {\n \n-  /*\n-  * Stream state\n-  */\n-  static constexpr cudaStream_t DEFAULT_STREAM = 0;\n-\n-  static std::once_flag init_flag;\n+  // Global stream state and constants\n   static int64_t num_gpus;\n-  static CUDAStreamInternals* default_streams;\n+  static constexpr int STREAMS_PER_POOL = 32;\n+  static constexpr unsigned int DEFAULT_FLAGS = cudaStreamNonBlocking;\n+  static int HIGH_PRIORITY = 0;", "path": "aten/src/ATen/cuda/CUDAStream.cpp", "position": null, "original_position": 46, "commit_id": "3c0c30659be4528f10b94829b64f8532c3e61bb1", "original_commit_id": "47920408ab3d205b1817b9be4865fc8d0b2402ba", "user": {"login": "goldsborough", "id": 6429851, "node_id": "MDQ6VXNlcjY0Mjk4NTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/6429851?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goldsborough", "html_url": "https://github.com/goldsborough", "followers_url": "https://api.github.com/users/goldsborough/followers", "following_url": "https://api.github.com/users/goldsborough/following{/other_user}", "gists_url": "https://api.github.com/users/goldsborough/gists{/gist_id}", "starred_url": "https://api.github.com/users/goldsborough/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goldsborough/subscriptions", "organizations_url": "https://api.github.com/users/goldsborough/orgs", "repos_url": "https://api.github.com/users/goldsborough/repos", "events_url": "https://api.github.com/users/goldsborough/events{/privacy}", "received_events_url": "https://api.github.com/users/goldsborough/received_events", "type": "User", "site_admin": false}, "body": "btw if you're already touching this, our convention in ATen/PyTorch for global constants is `kCamelCaseConstant`, might want to change this", "created_at": "2018-07-30T15:42:33Z", "updated_at": "2018-11-23T15:48:21Z", "html_url": "https://github.com/pytorch/pytorch/pull/9938#discussion_r206213255", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/9938", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/206213255"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/9938#discussion_r206213255"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/9938"}}, "body_html": "<p>btw if you're already touching this, our convention in ATen/PyTorch for global constants is <code>kCamelCaseConstant</code>, might want to change this</p>", "body_text": "btw if you're already touching this, our convention in ATen/PyTorch for global constants is kCamelCaseConstant, might want to change this"}