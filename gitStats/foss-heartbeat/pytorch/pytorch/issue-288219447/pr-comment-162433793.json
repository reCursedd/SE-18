{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/162433793", "pull_request_review_id": 89890744, "id": 162433793, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MjQzMzc5Mw==", "diff_hunk": "@@ -175,21 +225,65 @@ def __len__(self):\n \n \n def _test_timeout():\n-    os.close(sys.stderr.fileno())\n-    sys.stderr.close()\n     dataset = SleepDataset(10, 10)\n     dataloader = DataLoader(dataset, batch_size=2, num_workers=2, timeout=1)\n     _ = next(iter(dataloader))\n \n \n def _test_segfault():\n-    os.close(sys.stderr.fileno())\n-    sys.stderr.close()\n     dataset = SegfaultDataset(10)\n     dataloader = DataLoader(dataset, batch_size=2, num_workers=2)\n     _ = next(iter(dataloader))\n \n \n+def _test_interrupt_retry(timeout=0):\n+    dataset = TensorDataset(torch.randn(1, 1), torch.randn(1, 1))\n+    dataloader = DataLoader(dataset, batch_size=1, num_workers=1, timeout=timeout)\n+    dataloaderiter = iter(dataloader)\n+\n+    # make SIGUSR1 interrupt\n+    def handler(signum, frame):\n+        pass\n+    signal.signal(signal.SIGUSR1, handler)\n+\n+    # Replace iterator getter with a wrapper that reliably calls an\n+    # interruptable blocking recv syscall to simulate interruption during recv\n+    # in queue.get.\n+    # The used socket.recv call below in the replacing function is quite\n+    # dangerous because it blocks everything on Python side, including the\n+    # cleaning up in dataloder.__del__ when this process exits. To prevent\n+    # orphan worker child, we manually terminate worker process here.", "path": "test/test_dataloader.py", "position": null, "original_position": 112, "commit_id": "d4882230052d14432fd34e0aa2f5fc0f73977352", "original_commit_id": "123156a896f1c974f2eb44efb09b330c44ff9704", "user": {"login": "SsnL", "id": 5674597, "node_id": "MDQ6VXNlcjU2NzQ1OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5674597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SsnL", "html_url": "https://github.com/SsnL", "followers_url": "https://api.github.com/users/SsnL/followers", "following_url": "https://api.github.com/users/SsnL/following{/other_user}", "gists_url": "https://api.github.com/users/SsnL/gists{/gist_id}", "starred_url": "https://api.github.com/users/SsnL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SsnL/subscriptions", "organizations_url": "https://api.github.com/users/SsnL/orgs", "repos_url": "https://api.github.com/users/SsnL/repos", "events_url": "https://api.github.com/users/SsnL/events{/privacy}", "received_events_url": "https://api.github.com/users/SsnL/received_events", "type": "User", "site_admin": false}, "body": "If I don't terminate the workers here, the test leaves orphan worker processes even if they have`.daemon=True` and we terminate the loader process. Even adding a python SIGTERM/SIGUSR2/etc handler doesn't work. So my guess is that `socket.recv` holds on GIL or something that stops everything in Python from running.", "created_at": "2018-01-18T18:45:51Z", "updated_at": "2018-11-23T15:38:18Z", "html_url": "https://github.com/pytorch/pytorch/pull/4643#discussion_r162433793", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4643", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/162433793"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/4643#discussion_r162433793"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4643"}}, "body_html": "<p>If I don't terminate the workers here, the test leaves orphan worker processes even if they have<code>.daemon=True</code> and we terminate the loader process. Even adding a python SIGTERM/SIGUSR2/etc handler doesn't work. So my guess is that <code>socket.recv</code> holds on GIL or something that stops everything in Python from running.</p>", "body_text": "If I don't terminate the workers here, the test leaves orphan worker processes even if they have.daemon=True and we terminate the loader process. Even adding a python SIGTERM/SIGUSR2/etc handler doesn't work. So my guess is that socket.recv holds on GIL or something that stops everything in Python from running.", "in_reply_to_id": 162432480}