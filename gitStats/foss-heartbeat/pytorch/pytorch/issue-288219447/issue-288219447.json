{"url": "https://api.github.com/repos/pytorch/pytorch/issues/4643", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/4643/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/4643/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/4643/events", "html_url": "https://github.com/pytorch/pytorch/pull/4643", "id": 288219447, "node_id": "MDExOlB1bGxSZXF1ZXN0MTYyNzA1Mzk3", "number": 4643, "title": "Dataloader issues", "user": {"login": "SsnL", "id": 5674597, "node_id": "MDQ6VXNlcjU2NzQ1OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5674597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SsnL", "html_url": "https://github.com/SsnL", "followers_url": "https://api.github.com/users/SsnL/followers", "following_url": "https://api.github.com/users/SsnL/following{/other_user}", "gists_url": "https://api.github.com/users/SsnL/gists{/gist_id}", "starred_url": "https://api.github.com/users/SsnL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SsnL/subscriptions", "organizations_url": "https://api.github.com/users/SsnL/orgs", "repos_url": "https://api.github.com/users/SsnL/repos", "events_url": "https://api.github.com/users/SsnL/events{/privacy}", "received_events_url": "https://api.github.com/users/SsnL/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 825466279, "node_id": "MDU6TGFiZWw4MjU0NjYyNzk=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/0.3.1", "name": "0.3.1", "color": "aefcae", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2018-01-12T19:17:34Z", "updated_at": "2018-11-23T15:38:35Z", "closed_at": "2018-01-29T00:18:18Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/4643", "html_url": "https://github.com/pytorch/pytorch/pull/4643", "diff_url": "https://github.com/pytorch/pytorch/pull/4643.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/4643.patch"}, "body_html": "<ol>\n<li>\n<p>Fixes <code>signal.signal</code> being called on child threads.</p>\n</li>\n<li>\n<p>Sometimes error in dataloader methods causes the trace to be polluted as in <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"286455331\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/4507\" data-hovercard-type=\"issue\" data-hovercard-url=\"/pytorch/pytorch/issues/4507/hovercard\" href=\"https://github.com/pytorch/pytorch/issues/4507\">#4507</a> . After investigating this with <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=13564\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ezyang\">@ezyang</a> , we realize the reason is that when an exception is thrown,</p>\n<ol>\n<li>\n<p>sometimes worker processes are terminated before the <code>Dataloader</code> is deleted (likely because that the trace contains a reference to the <code>Dataloader</code>)</p>\n</li>\n<li>\n<p>then the workers got SIGTERM from loader before the clean up methods are called in <code>Dataloader.__del__</code></p>\n</li>\n<li>\n<p>then loader's SIGCHLD handler is triggered, and it sees that workers fail, so it reports a RuntimeError with polluted trace as shown in <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"286455331\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/4507\" data-hovercard-type=\"issue\" data-hovercard-url=\"/pytorch/pytorch/issues/4507/hovercard\" href=\"https://github.com/pytorch/pytorch/issues/4507\">#4507</a> .</p>\n</li>\n</ol>\n<p>As a solution, this PR suppresses SIGTERM from loader in worker SIGTERM handler, and <code>exit(0)</code> in such case.</p>\n</li>\n<li>\n<p>Improves some dataloder tests so they use a subclass of <code>multiprocessing.Process</code> that tracks the last error, and checks the error message.</p>\n</li>\n<li>\n<p>Prevents unnecessary cuda context initialization in <code>Dataloader</code> by <code>torch.cuda.current_device()</code> in case <code>pin_memory=False</code>.</p>\n</li>\n<li>\n<p>Always call <code>_remove_worker_pids</code> in <code>Dataloader.shutdown</code> so the set on cpp side in <code>Dataloder.cpp</code> is always updated correctly even when <code>Dataloader.shutdown</code> errors.</p>\n</li>\n</ol>\n<p><span class=\"issue-keyword tooltipped tooltipped-se\" aria-label=\"This pull request closes issue #4507.\">Fixes</span> <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"286455331\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/4507\" data-hovercard-type=\"issue\" data-hovercard-url=\"/pytorch/pytorch/issues/4507/hovercard\" href=\"https://github.com/pytorch/pytorch/issues/4507\">#4507</a> .</p>\n<p>Verified that windows tests pass.</p>", "body_text": "Fixes signal.signal being called on child threads.\n\n\nSometimes error in dataloader methods causes the trace to be polluted as in #4507 . After investigating this with @ezyang , we realize the reason is that when an exception is thrown,\n\n\nsometimes worker processes are terminated before the Dataloader is deleted (likely because that the trace contains a reference to the Dataloader)\n\n\nthen the workers got SIGTERM from loader before the clean up methods are called in Dataloader.__del__\n\n\nthen loader's SIGCHLD handler is triggered, and it sees that workers fail, so it reports a RuntimeError with polluted trace as shown in #4507 .\n\n\nAs a solution, this PR suppresses SIGTERM from loader in worker SIGTERM handler, and exit(0) in such case.\n\n\nImproves some dataloder tests so they use a subclass of multiprocessing.Process that tracks the last error, and checks the error message.\n\n\nPrevents unnecessary cuda context initialization in Dataloader by torch.cuda.current_device() in case pin_memory=False.\n\n\nAlways call _remove_worker_pids in Dataloader.shutdown so the set on cpp side in Dataloder.cpp is always updated correctly even when Dataloader.shutdown errors.\n\n\nFixes #4507 .\nVerified that windows tests pass.", "body": "1. Fixes `signal.signal` being called on child threads.\r\n\r\n2. Sometimes error in dataloader methods causes the trace to be polluted as in #4507 . After investigating this with @ezyang , we realize the reason is that when an exception is thrown, \r\n\r\n    1. sometimes worker processes are terminated before the `Dataloader` is deleted (likely because that the trace contains a reference to the `Dataloader`)\r\n\r\n    2. then the workers got SIGTERM from loader before the clean up methods are called in `Dataloader.__del__`\r\n\r\n    3. then loader's SIGCHLD handler is triggered, and it sees that workers fail, so it reports a RuntimeError with polluted trace as shown in #4507 .\r\n\r\n    As a solution, this PR suppresses SIGTERM from loader in worker SIGTERM handler, and `exit(0)` in such case.\r\n\r\n3. Improves some dataloder tests so they use a subclass of `multiprocessing.Process` that tracks the last error, and checks the error message.\r\n\r\n4. Prevents unnecessary cuda context initialization in `Dataloader` by `torch.cuda.current_device()` in case `pin_memory=False`.\r\n\r\n5. Always call `_remove_worker_pids` in `Dataloader.shutdown` so the set on cpp side in `Dataloder.cpp` is always updated correctly even when `Dataloader.shutdown` errors.\r\n\r\nFixes #4507 .\r\n\r\nVerified that windows tests pass."}