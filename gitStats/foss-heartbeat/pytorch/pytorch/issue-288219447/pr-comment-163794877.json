{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/163794877", "pull_request_review_id": 91464204, "id": 163794877, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2Mzc5NDg3Nw==", "diff_hunk": "@@ -175,21 +226,73 @@ def __len__(self):\n \n \n def _test_timeout():\n-    os.close(sys.stderr.fileno())\n-    sys.stderr.close()\n     dataset = SleepDataset(10, 10)\n     dataloader = DataLoader(dataset, batch_size=2, num_workers=2, timeout=1)\n     _ = next(iter(dataloader))\n \n \n def _test_segfault():\n-    os.close(sys.stderr.fileno())\n-    sys.stderr.close()\n     dataset = SegfaultDataset(10)\n     dataloader = DataLoader(dataset, batch_size=2, num_workers=2)\n     _ = next(iter(dataloader))\n \n \n+def _test_interrupt_retry(timeout=0):\n+    dataset = TensorDataset(torch.randn(1, 1), torch.randn(1, 1))\n+    dataloader = DataLoader(dataset, batch_size=1, num_workers=1, timeout=timeout)\n+    dataloaderiter = iter(dataloader)\n+\n+    # make SIGUSR1 interrupt\n+    def handler(signum, frame):\n+        pass\n+    signal.signal(signal.SIGUSR1, handler)\n+\n+    # Replace iterator getter with a wrapper that reliably calls an\n+    # interruptable blocking recv syscall to simulate interruption during recv\n+    # in queue.get.\n+    # The used socket.recv call below in the replacing function is quite\n+    # dangerous because it blocks everything on Python side (likely by holding\n+    # GIL), including any Python signal handlers and the cleaning up in\n+    # dataloder.__del__ when this process exits. To prevent orphan worker child,\n+    # we manually terminate worker process here.\n+    # Conveniently, the worker has SIGTERM handler installed so SIGTERM from\n+    # loader process won't cause loader error.\n+\n+    data_queue = dataloaderiter.data_queue\n+    data = data_queue.get()  # ensure that worker handlers are installed\n+    for w in dataloaderiter.workers:\n+        w.terminate()", "path": "test/test_dataloader.py", "position": null, "original_position": 122, "commit_id": "d4882230052d14432fd34e0aa2f5fc0f73977352", "original_commit_id": "d3c3a952d30abc86b300a3deb507d1184c4d892a", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "We kill all the workers so we don't orphan them when this process is terminated, right?", "created_at": "2018-01-25T09:55:27Z", "updated_at": "2018-11-23T15:38:33Z", "html_url": "https://github.com/pytorch/pytorch/pull/4643#discussion_r163794877", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4643", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/163794877"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/4643#discussion_r163794877"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4643"}}, "body_html": "<p>We kill all the workers so we don't orphan them when this process is terminated, right?</p>", "body_text": "We kill all the workers so we don't orphan them when this process is terminated, right?"}