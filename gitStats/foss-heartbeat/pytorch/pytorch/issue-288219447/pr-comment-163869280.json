{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/163869280", "pull_request_review_id": 91552732, "id": 163869280, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2Mzg2OTI4MA==", "diff_hunk": "@@ -175,21 +226,73 @@ def __len__(self):\n \n \n def _test_timeout():\n-    os.close(sys.stderr.fileno())\n-    sys.stderr.close()\n     dataset = SleepDataset(10, 10)\n     dataloader = DataLoader(dataset, batch_size=2, num_workers=2, timeout=1)\n     _ = next(iter(dataloader))\n \n \n def _test_segfault():\n-    os.close(sys.stderr.fileno())\n-    sys.stderr.close()\n     dataset = SegfaultDataset(10)\n     dataloader = DataLoader(dataset, batch_size=2, num_workers=2)\n     _ = next(iter(dataloader))\n \n \n+def _test_interrupt_retry(timeout=0):\n+    dataset = TensorDataset(torch.randn(1, 1), torch.randn(1, 1))\n+    dataloader = DataLoader(dataset, batch_size=1, num_workers=1, timeout=timeout)\n+    dataloaderiter = iter(dataloader)\n+\n+    # make SIGUSR1 interrupt\n+    def handler(signum, frame):\n+        pass\n+    signal.signal(signal.SIGUSR1, handler)\n+\n+    # Replace iterator getter with a wrapper that reliably calls an\n+    # interruptable blocking recv syscall to simulate interruption during recv\n+    # in queue.get.\n+    # The used socket.recv call below in the replacing function is quite\n+    # dangerous because it blocks everything on Python side (likely by holding\n+    # GIL), including any Python signal handlers and the cleaning up in\n+    # dataloder.__del__ when this process exits. To prevent orphan worker child,\n+    # we manually terminate worker process here.\n+    # Conveniently, the worker has SIGTERM handler installed so SIGTERM from\n+    # loader process won't cause loader error.\n+\n+    data_queue = dataloaderiter.data_queue\n+    data = data_queue.get()  # ensure that worker handlers are installed\n+    for w in dataloaderiter.workers:\n+        w.terminate()\n+\n+    def interruptable_get(*args, **kwargs):\n+        if dataloaderiter.shutdown:\n+            return data\n+        # get and config timeout if the argument is present\n+        if timeout >= 0:\n+            if 'timeout' in kwargs:\n+                timeout_val = kwargs['timeout']\n+            elif len(args) > 1:\n+                timeout_val = args[1]  # first arg is `block`\n+            else:\n+                timeout_val = None\n+            socket.setdefaulttimeout(timeout_val)\n+        s = socket.socket(socket.AF_INET, type=socket.SOCK_DGRAM)\n+        s.bind((\"127.0.0.1\", 0))\n+        try:\n+            return s.recv(1024)\n+        except socket.timeout:\n+            raise queue.Empty\n+        finally:\n+            s.close()\n+\n+    try:\n+        if isinstance(data_queue, QueueWrapper):\n+            data_queue.queue.get = interruptable_get\n+    except Exception:\n+        # in Python >= 3.5 or on Windows QueueWrapper is not a class but a no-op\n+        pass", "path": "test/test_dataloader.py", "position": null, "original_position": 150, "commit_id": "d4882230052d14432fd34e0aa2f5fc0f73977352", "original_commit_id": "d3c3a952d30abc86b300a3deb507d1184c4d892a", "user": {"login": "SsnL", "id": 5674597, "node_id": "MDQ6VXNlcjU2NzQ1OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5674597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SsnL", "html_url": "https://github.com/SsnL", "followers_url": "https://api.github.com/users/SsnL/followers", "following_url": "https://api.github.com/users/SsnL/following{/other_user}", "gists_url": "https://api.github.com/users/SsnL/gists{/gist_id}", "starred_url": "https://api.github.com/users/SsnL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SsnL/subscriptions", "organizations_url": "https://api.github.com/users/SsnL/orgs", "repos_url": "https://api.github.com/users/SsnL/repos", "events_url": "https://api.github.com/users/SsnL/events{/privacy}", "received_events_url": "https://api.github.com/users/SsnL/received_events", "type": "User", "site_admin": false}, "body": "The default get is interruptible, but only during its `recv` call. And it doesn't call `recv` unless the queue has data. So in reality there is only a tiny timeframe where it is interruptible, so it is really not testable. The custom implementation can be interrupted at any time.", "created_at": "2018-01-25T15:09:07Z", "updated_at": "2018-11-23T15:38:34Z", "html_url": "https://github.com/pytorch/pytorch/pull/4643#discussion_r163869280", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4643", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/163869280"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/4643#discussion_r163869280"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4643"}}, "body_html": "<p>The default get is interruptible, but only during its <code>recv</code> call. And it doesn't call <code>recv</code> unless the queue has data. So in reality there is only a tiny timeframe where it is interruptible, so it is really not testable. The custom implementation can be interrupted at any time.</p>", "body_text": "The default get is interruptible, but only during its recv call. And it doesn't call recv unless the queue has data. So in reality there is only a tiny timeframe where it is interruptible, so it is really not testable. The custom implementation can be interrupted at any time.", "in_reply_to_id": 163797534}