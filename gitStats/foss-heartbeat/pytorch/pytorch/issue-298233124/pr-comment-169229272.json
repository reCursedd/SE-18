{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/169229272", "pull_request_review_id": 97720247, "id": 169229272, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2OTIyOTI3Mg==", "diff_hunk": "@@ -90,6 +90,78 @@ def forward(self, input):\n         return input\n \n \n+class ModuleDict(Module):\n+    r\"\"\"Holds submodules in a dict.\n+\n+    ModuleDict can be indexed like a regular Python dict, but modules it contains\n+    as values are properly registered, and will be visible by all Module methods.\n+\n+    Arguments:\n+        modules (dict, optional): a dict of keys : modules to add\n+\n+    Example::\n+\n+        class TwoHeadedNet(nn.Module):\n+            def __init__(self):\n+                super(MyModule, self).__init__()\n+                self.shared_backbone = nn.Linear(10, 10)\n+                self.heads = nn.ModuleDict({\n+                    'task1' : nn.Linear(10, 5),\n+                    'task2' : nn.Linear(10, 10),\n+                })\n+\n+            def forward(self, x, task_name):\n+                # takes an extra `task_name` argument to determine\n+                # which head of the network to use\n+                assert task_name in ['task1', 'task2']\n+\n+                x = self.shared_backbone(x)\n+                x = self.heads[task_name](x)\n+                return x\n+    \"\"\"\n+\n+    def __init__(self, modules=None):\n+        super(ModuleDict, self).__init__()\n+        if modules is not None:\n+            self.update(modules)\n+\n+    def __getitem__(self, key):\n+        return self._modules[key]\n+\n+    def __setitem__(self, key, module):\n+        return setattr(self, key, module)", "path": "torch/nn/modules/container.py", "position": 43, "original_position": 43, "commit_id": "debb5c711ed90e29843956f652dba068de32f932", "original_commit_id": "debb5c711ed90e29843956f652dba068de32f932", "user": {"login": "SsnL", "id": 5674597, "node_id": "MDQ6VXNlcjU2NzQ1OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5674597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SsnL", "html_url": "https://github.com/SsnL", "followers_url": "https://api.github.com/users/SsnL/followers", "following_url": "https://api.github.com/users/SsnL/following{/other_user}", "gists_url": "https://api.github.com/users/SsnL/gists{/gist_id}", "starred_url": "https://api.github.com/users/SsnL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SsnL/subscriptions", "organizations_url": "https://api.github.com/users/SsnL/orgs", "repos_url": "https://api.github.com/users/SsnL/repos", "events_url": "https://api.github.com/users/SsnL/events{/privacy}", "received_events_url": "https://api.github.com/users/SsnL/received_events", "type": "User", "site_admin": false}, "body": "I don't like that setting `a_module_dict['keys'] = my_module` breaks the `keys()` method.", "created_at": "2018-02-20T06:51:10Z", "updated_at": "2018-11-23T15:39:44Z", "html_url": "https://github.com/pytorch/pytorch/pull/5297#discussion_r169229272", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/5297", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/169229272"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/5297#discussion_r169229272"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/5297"}}, "body_html": "<p>I don't like that setting <code>a_module_dict['keys'] = my_module</code> breaks the <code>keys()</code> method.</p>", "body_text": "I don't like that setting a_module_dict['keys'] = my_module breaks the keys() method."}