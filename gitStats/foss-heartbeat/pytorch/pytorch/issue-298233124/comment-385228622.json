{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/385228622", "html_url": "https://github.com/pytorch/pytorch/pull/5297#issuecomment-385228622", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/5297", "id": 385228622, "node_id": "MDEyOklzc3VlQ29tbWVudDM4NTIyODYyMg==", "user": {"login": "sbhaaf", "id": 19878077, "node_id": "MDQ6VXNlcjE5ODc4MDc3", "avatar_url": "https://avatars2.githubusercontent.com/u/19878077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sbhaaf", "html_url": "https://github.com/sbhaaf", "followers_url": "https://api.github.com/users/sbhaaf/followers", "following_url": "https://api.github.com/users/sbhaaf/following{/other_user}", "gists_url": "https://api.github.com/users/sbhaaf/gists{/gist_id}", "starred_url": "https://api.github.com/users/sbhaaf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sbhaaf/subscriptions", "organizations_url": "https://api.github.com/users/sbhaaf/orgs", "repos_url": "https://api.github.com/users/sbhaaf/repos", "events_url": "https://api.github.com/users/sbhaaf/events{/privacy}", "received_events_url": "https://api.github.com/users/sbhaaf/received_events", "type": "User", "site_admin": false}, "created_at": "2018-04-29T06:11:00Z", "updated_at": "2018-04-29T06:11:00Z", "author_association": "NONE", "body_html": "<p>Here is mine</p>\n<pre><code>class ModuleDict(nn.Module):\n    def __init__(self, data=None):\n        super().__init__()\n        self._module_list = nn.ModuleList()\n        self._module_idcs = {}\n        self._items = {}\n        self.__dict__['_save_params'] = {}\n        if data is not None:\n            if isinstance(data, dict):\n                for key,value in data.items():\n                    self[key] = value\n            elif all(len(item)==2 for item in list_(data)):\n                for key,value in list_(data):\n                    self[key] = value\n\n    def forward(self, *inputs, **kwargs):\n        raise NotImplementedError\n\n    def __setitem__(self, key, value):\n        def _has_module(arg):\n            if isinstance(arg, dict): return any(_has_module(arg[k]) for k in arg)\n            return isinstance(arg, nn.Module)\n\n        if key in self._items:\n            del self[key]\n\n        if isinstance(value, dict):\n            if _has_module(value): self[key] = ModuleDict(value)\n            else: self._items[key] = value\n        elif isinstance(value, nn.Module):\n            self._items[key] = value\n            self._module_idcs[key] = len(self._module_list)\n            self._module_list.append(value)\n        else:\n            self._items[key] = value\n            self.__dict__['_save_params'][key] = value\n\n    def __getitem__(self, key):\n        if key in self._items:\n            return self._items[key]\n        raise KeyError('ModuleDict as no attribute `%s`' % key)\n\n    def __delitem__(self, key):\n        if isinstance(self[key], nn.Module):\n            self._module_list[self._module_idcs[key]] = None\n            del self._module_idcs[key]\n        else:\n            del self.__dict__['_save_params'][key]\n        del self._items[key]\n\n    def __repr__(self, root=True):\n        return ('ModuleDict({%s})' if root else '{%s}') % ', '.join(\n            [\"'%s': %s\" % (k, v.__repr__(False) if isinstance(v, ModuleDict) else v if not isinstance(v, nn.Module) \\\n                else v.__class__.__name__ + '()') for k,v in self.items()]\n        )\n\n    def __iter__(self):\n        return iter(self._items)\n\n    def items(self):\n        return self._items.items()\n\n    def keys(self):\n        return self._items.keys()\n\n    def init(self):\n        return init_([mod for mod in self._module_list])\n</code></pre>", "body_text": "Here is mine\nclass ModuleDict(nn.Module):\n    def __init__(self, data=None):\n        super().__init__()\n        self._module_list = nn.ModuleList()\n        self._module_idcs = {}\n        self._items = {}\n        self.__dict__['_save_params'] = {}\n        if data is not None:\n            if isinstance(data, dict):\n                for key,value in data.items():\n                    self[key] = value\n            elif all(len(item)==2 for item in list_(data)):\n                for key,value in list_(data):\n                    self[key] = value\n\n    def forward(self, *inputs, **kwargs):\n        raise NotImplementedError\n\n    def __setitem__(self, key, value):\n        def _has_module(arg):\n            if isinstance(arg, dict): return any(_has_module(arg[k]) for k in arg)\n            return isinstance(arg, nn.Module)\n\n        if key in self._items:\n            del self[key]\n\n        if isinstance(value, dict):\n            if _has_module(value): self[key] = ModuleDict(value)\n            else: self._items[key] = value\n        elif isinstance(value, nn.Module):\n            self._items[key] = value\n            self._module_idcs[key] = len(self._module_list)\n            self._module_list.append(value)\n        else:\n            self._items[key] = value\n            self.__dict__['_save_params'][key] = value\n\n    def __getitem__(self, key):\n        if key in self._items:\n            return self._items[key]\n        raise KeyError('ModuleDict as no attribute `%s`' % key)\n\n    def __delitem__(self, key):\n        if isinstance(self[key], nn.Module):\n            self._module_list[self._module_idcs[key]] = None\n            del self._module_idcs[key]\n        else:\n            del self.__dict__['_save_params'][key]\n        del self._items[key]\n\n    def __repr__(self, root=True):\n        return ('ModuleDict({%s})' if root else '{%s}') % ', '.join(\n            [\"'%s': %s\" % (k, v.__repr__(False) if isinstance(v, ModuleDict) else v if not isinstance(v, nn.Module) \\\n                else v.__class__.__name__ + '()') for k,v in self.items()]\n        )\n\n    def __iter__(self):\n        return iter(self._items)\n\n    def items(self):\n        return self._items.items()\n\n    def keys(self):\n        return self._items.keys()\n\n    def init(self):\n        return init_([mod for mod in self._module_list])", "body": "Here is mine\r\n```\r\nclass ModuleDict(nn.Module):\r\n    def __init__(self, data=None):\r\n        super().__init__()\r\n        self._module_list = nn.ModuleList()\r\n        self._module_idcs = {}\r\n        self._items = {}\r\n        self.__dict__['_save_params'] = {}\r\n        if data is not None:\r\n            if isinstance(data, dict):\r\n                for key,value in data.items():\r\n                    self[key] = value\r\n            elif all(len(item)==2 for item in list_(data)):\r\n                for key,value in list_(data):\r\n                    self[key] = value\r\n\r\n    def forward(self, *inputs, **kwargs):\r\n        raise NotImplementedError\r\n\r\n    def __setitem__(self, key, value):\r\n        def _has_module(arg):\r\n            if isinstance(arg, dict): return any(_has_module(arg[k]) for k in arg)\r\n            return isinstance(arg, nn.Module)\r\n\r\n        if key in self._items:\r\n            del self[key]\r\n\r\n        if isinstance(value, dict):\r\n            if _has_module(value): self[key] = ModuleDict(value)\r\n            else: self._items[key] = value\r\n        elif isinstance(value, nn.Module):\r\n            self._items[key] = value\r\n            self._module_idcs[key] = len(self._module_list)\r\n            self._module_list.append(value)\r\n        else:\r\n            self._items[key] = value\r\n            self.__dict__['_save_params'][key] = value\r\n\r\n    def __getitem__(self, key):\r\n        if key in self._items:\r\n            return self._items[key]\r\n        raise KeyError('ModuleDict as no attribute `%s`' % key)\r\n\r\n    def __delitem__(self, key):\r\n        if isinstance(self[key], nn.Module):\r\n            self._module_list[self._module_idcs[key]] = None\r\n            del self._module_idcs[key]\r\n        else:\r\n            del self.__dict__['_save_params'][key]\r\n        del self._items[key]\r\n\r\n    def __repr__(self, root=True):\r\n        return ('ModuleDict({%s})' if root else '{%s}') % ', '.join(\r\n            [\"'%s': %s\" % (k, v.__repr__(False) if isinstance(v, ModuleDict) else v if not isinstance(v, nn.Module) \\\r\n                else v.__class__.__name__ + '()') for k,v in self.items()]\r\n        )\r\n\r\n    def __iter__(self):\r\n        return iter(self._items)\r\n\r\n    def items(self):\r\n        return self._items.items()\r\n\r\n    def keys(self):\r\n        return self._items.keys()\r\n\r\n    def init(self):\r\n        return init_([mod for mod in self._module_list])\r\n```"}