{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/315284121", "html_url": "https://github.com/pytorch/pytorch/issues/1776#issuecomment-315284121", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/1776", "id": 315284121, "node_id": "MDEyOklzc3VlQ29tbWVudDMxNTI4NDEyMQ==", "user": {"login": "magzHL", "id": 29353643, "node_id": "MDQ6VXNlcjI5MzUzNjQz", "avatar_url": "https://avatars1.githubusercontent.com/u/29353643?v=4", "gravatar_id": "", "url": "https://api.github.com/users/magzHL", "html_url": "https://github.com/magzHL", "followers_url": "https://api.github.com/users/magzHL/followers", "following_url": "https://api.github.com/users/magzHL/following{/other_user}", "gists_url": "https://api.github.com/users/magzHL/gists{/gist_id}", "starred_url": "https://api.github.com/users/magzHL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/magzHL/subscriptions", "organizations_url": "https://api.github.com/users/magzHL/orgs", "repos_url": "https://api.github.com/users/magzHL/repos", "events_url": "https://api.github.com/users/magzHL/events{/privacy}", "received_events_url": "https://api.github.com/users/magzHL/received_events", "type": "User", "site_admin": false}, "created_at": "2017-07-14T06:44:22Z", "updated_at": "2017-07-14T06:44:22Z", "author_association": "NONE", "body_html": "<p>In the mean time I found a workaround for my needs:<br>\n<a href=\"https://discuss.pytorch.org/t/call-backward-on-function-inside-a-backpropagation-step/3793/6?u=magz\" rel=\"nofollow\">https://discuss.pytorch.org/t/call-backward-on-function-inside-a-backpropagation-step/3793/6?u=magz</a></p>\n<p>It consists of two steps: Breaking the function call into two pieces, where the first function is used to manipulate the data in a way that suits the desired behaviour (e.g. just passing it unchanged in the forward step, in case only backward gradients should be changed), afterwards use the implemented standard function (like Conv2d). When it then comes to the backward step, \"catch\" the gradient from the standard function, and manipulate it again in the first, user-defined function.<br>\nIn the end just wrap these two functions inside a module to have a nice looking interface to the outside world ;)</p>\n<p>However, this workaround still appears to be clumsy. compared to a \"backward in backward\" approach. So I'm looking forward to it. Thanks!</p>", "body_text": "In the mean time I found a workaround for my needs:\nhttps://discuss.pytorch.org/t/call-backward-on-function-inside-a-backpropagation-step/3793/6?u=magz\nIt consists of two steps: Breaking the function call into two pieces, where the first function is used to manipulate the data in a way that suits the desired behaviour (e.g. just passing it unchanged in the forward step, in case only backward gradients should be changed), afterwards use the implemented standard function (like Conv2d). When it then comes to the backward step, \"catch\" the gradient from the standard function, and manipulate it again in the first, user-defined function.\nIn the end just wrap these two functions inside a module to have a nice looking interface to the outside world ;)\nHowever, this workaround still appears to be clumsy. compared to a \"backward in backward\" approach. So I'm looking forward to it. Thanks!", "body": "In the mean time I found a workaround for my needs:\r\nhttps://discuss.pytorch.org/t/call-backward-on-function-inside-a-backpropagation-step/3793/6?u=magz\r\n\r\nIt consists of two steps: Breaking the function call into two pieces, where the first function is used to manipulate the data in a way that suits the desired behaviour (e.g. just passing it unchanged in the forward step, in case only backward gradients should be changed), afterwards use the implemented standard function (like Conv2d). When it then comes to the backward step, \"catch\" the gradient from the standard function, and manipulate it again in the first, user-defined function. \r\nIn the end just wrap these two functions inside a module to have a nice looking interface to the outside world ;)\r\n\r\nHowever, this workaround still appears to be clumsy. compared to a \"backward in backward\" approach. So I'm looking forward to it. Thanks!"}