{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/112786022", "pull_request_review_id": 34132227, "id": 112786022, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMjc4NjAyMg==", "diff_hunk": "@@ -64,13 +69,29 @@ def backward(self, grad_output):\n \n class UpsamplingBilinear2d(_UpsamplingBase):\n \n+    def __init__(self, size=None, scale_factor=None):\n+        super(UpsamplingBilinear2d, self).__init__(size, scale_factor)\n+\n+        if self.scale_factor is not None:\n+            self.scale_factor = _pair(self.scale_factor)\n+            # we have to be a tuple at this point\n+            try:\n+                assert len(self.scale_factor) == 2\n+                for i in self.scale_factor:\n+                    assert isinstance(i, Integral)\n+                    assert i >= 1\n+            except AssertionError as e:\n+                raise ValueError('scale_factor must be a non-negative integer, '\n+                                 'or a tuple of non-negative integers for bilinear upsamplings, but got: '\n+                                 '{}'.format(self.scale_factor))\n+\n     def forward(self, input):\n         assert input.dim() == 4\n \n-        if self.scale_factor:\n+        if self.scale_factor is not None:\n             self.output_size = (\n-                input.size(2) * self.scale_factor,\n-                input.size(3) * self.scale_factor,\n+                input.size(2) * self.scale_factor[0],", "path": "torch/nn/_functions/thnn/upsampling.py", "position": 56, "original_position": 62, "commit_id": "1d026923bb90ca4ceff0ec78cd87dc2a1f4c2c25", "original_commit_id": "6611bb7d69927010452feada794c238102583c90", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "You need to write a `__setstate__` function for modules that were serialized - `self.scale_factor` won't be a tuple for them, so you need to patch it:\r\n```python\r\ndef __setstate__(self, state):\r\n    self.__dict__.update(state)\r\n    self.scale_factor = _tuple(self.scale_factor)\r\n```", "created_at": "2017-04-21T22:11:53Z", "updated_at": "2018-11-23T15:33:08Z", "html_url": "https://github.com/pytorch/pytorch/pull/1317#discussion_r112786022", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/1317", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/112786022"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/1317#discussion_r112786022"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/1317"}}, "body_html": "<p>You need to write a <code>__setstate__</code> function for modules that were serialized - <code>self.scale_factor</code> won't be a tuple for them, so you need to patch it:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-c1\">__setstate__</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>, <span class=\"pl-smi\">state</span>):\n    <span class=\"pl-c1\">self</span>.<span class=\"pl-c1\">__dict__</span>.update(state)\n    <span class=\"pl-c1\">self</span>.scale_factor <span class=\"pl-k\">=</span> _tuple(<span class=\"pl-c1\">self</span>.scale_factor)</pre></div>", "body_text": "You need to write a __setstate__ function for modules that were serialized - self.scale_factor won't be a tuple for them, so you need to patch it:\ndef __setstate__(self, state):\n    self.__dict__.update(state)\n    self.scale_factor = _tuple(self.scale_factor)"}