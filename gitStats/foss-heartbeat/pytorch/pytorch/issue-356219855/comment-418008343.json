{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/418008343", "html_url": "https://github.com/pytorch/pytorch/issues/11174#issuecomment-418008343", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/11174", "id": 418008343, "node_id": "MDEyOklzc3VlQ29tbWVudDQxODAwODM0Mw==", "user": {"login": "SsnL", "id": 5674597, "node_id": "MDQ6VXNlcjU2NzQ1OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5674597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SsnL", "html_url": "https://github.com/SsnL", "followers_url": "https://api.github.com/users/SsnL/followers", "following_url": "https://api.github.com/users/SsnL/following{/other_user}", "gists_url": "https://api.github.com/users/SsnL/gists{/gist_id}", "starred_url": "https://api.github.com/users/SsnL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SsnL/subscriptions", "organizations_url": "https://api.github.com/users/SsnL/orgs", "repos_url": "https://api.github.com/users/SsnL/repos", "events_url": "https://api.github.com/users/SsnL/events{/privacy}", "received_events_url": "https://api.github.com/users/SsnL/received_events", "type": "User", "site_admin": false}, "created_at": "2018-09-03T06:00:02Z", "updated_at": "2018-09-03T06:00:19Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=23639302\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/vishwakftw\">@vishwakftw</a> I'm not so sure about that, for two reasons:</p>\n<ol>\n<li><code>gels</code> (what we currently use) is actually much faster than both <code>gelss</code> and <code>gelsd</code> for the full rank case.</li>\n<li>Using <code>gelsd/s/y/x</code> for CPU while using <code>gels</code> for CUDA will introduce the inconsistent behavior where CPU code works with rank deficient matrices, but CUDA code doesn't.</li>\n</ol>\n<p>What we can do, is to introduce a flag on <code>torch.gels</code> for users to specify whether their matrix might not be full rank, and use <code>gelsd/s/y</code> for CPU &amp; CUDA. (We may want to chose a different one for CUDA vs. CPU due to memory constraints on CUDA)</p>", "body_text": "@vishwakftw I'm not so sure about that, for two reasons:\n\ngels (what we currently use) is actually much faster than both gelss and gelsd for the full rank case.\nUsing gelsd/s/y/x for CPU while using gels for CUDA will introduce the inconsistent behavior where CPU code works with rank deficient matrices, but CUDA code doesn't.\n\nWhat we can do, is to introduce a flag on torch.gels for users to specify whether their matrix might not be full rank, and use gelsd/s/y for CPU & CUDA. (We may want to chose a different one for CUDA vs. CPU due to memory constraints on CUDA)", "body": "@vishwakftw I'm not so sure about that, for two reasons:\r\n1. `gels` (what we currently use) is actually much faster than both `gelss` and `gelsd` for the full rank case.\r\n2. Using `gelsd/s/y/x` for CPU while using `gels` for CUDA will introduce the inconsistent behavior where CPU code works with rank deficient matrices, but CUDA code doesn't.\r\n\r\nWhat we can do, is to introduce a flag on `torch.gels` for users to specify whether their matrix might not be full rank, and use `gelsd/s/y` for CPU & CUDA. (We may want to chose a different one for CUDA vs. CPU due to memory constraints on CUDA)"}