{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/417903236", "html_url": "https://github.com/pytorch/pytorch/issues/11174#issuecomment-417903236", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/11174", "id": 417903236, "node_id": "MDEyOklzc3VlQ29tbWVudDQxNzkwMzIzNg==", "user": {"login": "soumith", "id": 1310570, "node_id": "MDQ6VXNlcjEzMTA1NzA=", "avatar_url": "https://avatars0.githubusercontent.com/u/1310570?v=4", "gravatar_id": "", "url": "https://api.github.com/users/soumith", "html_url": "https://github.com/soumith", "followers_url": "https://api.github.com/users/soumith/followers", "following_url": "https://api.github.com/users/soumith/following{/other_user}", "gists_url": "https://api.github.com/users/soumith/gists{/gist_id}", "starred_url": "https://api.github.com/users/soumith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/soumith/subscriptions", "organizations_url": "https://api.github.com/users/soumith/orgs", "repos_url": "https://api.github.com/users/soumith/repos", "events_url": "https://api.github.com/users/soumith/events{/privacy}", "received_events_url": "https://api.github.com/users/soumith/received_events", "type": "User", "site_admin": false}, "created_at": "2018-09-02T03:56:27Z", "updated_at": "2018-09-02T03:56:27Z", "author_association": "MEMBER", "body_html": "<p>This is a good thread on <code>gesdd</code> vs <code>gesvd</code>: <a href=\"https://groups.google.com/forum/#!msg/julia-dev/mmgO65i6-fA/5OUDc7_nS3wJ\" rel=\"nofollow\">https://groups.google.com/forum/#!msg/julia-dev/mmgO65i6-fA/5OUDc7_nS3wJ</a></p>\n<p>Jack Poulson writes on that thread:</p>\n<blockquote>\n<p>The appropriate reference is LAPACK Working Note 88:<br>\n<a href=\"http://www.netlib.org/lapack/lawnspdf/lawn88.pdf\" rel=\"nofollow\">http://www.netlib.org/lapack/lawnspdf/lawn88.pdf</a></p>\n</blockquote>\n<blockquote>\n<p>Though it is not explicitly discussed in that paper (AFAIK), the main reason one would choose the implementation based upon the QR algorithm (dgesvd) rather than the one which uses a Divide and Conquer algorithm (dgesdd) is that the latter one requires O(min(m,n)^2) workspace, where k=min(m,n), while the former only requires O(max(m,n)). See the descriptions of LWORK in the following files:<br>\n<a href=\"http://www.netlib.org/lapack/double/dgesvd.f\" rel=\"nofollow\">http://www.netlib.org/lapack/double/dgesvd.f</a><br>\n<a href=\"http://www.netlib.org/lapack/double/dgesdd.f\" rel=\"nofollow\">http://www.netlib.org/lapack/double/dgesdd.f</a></p>\n</blockquote>\n<ul>\n<li>On the CPU, we should switch to <code>gesdd</code>.</li>\n<li>On the GPU, memory is a premium, so we should prefer <code>gesvd</code>, which takes up much lesser workspace area.</li>\n</ul>", "body_text": "This is a good thread on gesdd vs gesvd: https://groups.google.com/forum/#!msg/julia-dev/mmgO65i6-fA/5OUDc7_nS3wJ\nJack Poulson writes on that thread:\n\nThe appropriate reference is LAPACK Working Note 88:\nhttp://www.netlib.org/lapack/lawnspdf/lawn88.pdf\n\n\nThough it is not explicitly discussed in that paper (AFAIK), the main reason one would choose the implementation based upon the QR algorithm (dgesvd) rather than the one which uses a Divide and Conquer algorithm (dgesdd) is that the latter one requires O(min(m,n)^2) workspace, where k=min(m,n), while the former only requires O(max(m,n)). See the descriptions of LWORK in the following files:\nhttp://www.netlib.org/lapack/double/dgesvd.f\nhttp://www.netlib.org/lapack/double/dgesdd.f\n\n\nOn the CPU, we should switch to gesdd.\nOn the GPU, memory is a premium, so we should prefer gesvd, which takes up much lesser workspace area.", "body": "This is a good thread on `gesdd` vs `gesvd`: https://groups.google.com/forum/#!msg/julia-dev/mmgO65i6-fA/5OUDc7_nS3wJ\r\n\r\nJack Poulson writes on that thread:\r\n\r\n> The appropriate reference is LAPACK Working Note 88:\r\nhttp://www.netlib.org/lapack/lawnspdf/lawn88.pdf\r\n\r\n> Though it is not explicitly discussed in that paper (AFAIK), the main reason one would choose the implementation based upon the QR algorithm (dgesvd) rather than the one which uses a Divide and Conquer algorithm (dgesdd) is that the latter one requires O(min(m,n)^2) workspace, where k=min(m,n), while the former only requires O(max(m,n)). See the descriptions of LWORK in the following files:\r\n> http://www.netlib.org/lapack/double/dgesvd.f\r\n> http://www.netlib.org/lapack/double/dgesdd.f\r\n\r\n- On the CPU, we should switch to `gesdd`.\r\n- On the GPU, memory is a premium, so we should prefer `gesvd`, which takes up much lesser workspace area.\r\n"}