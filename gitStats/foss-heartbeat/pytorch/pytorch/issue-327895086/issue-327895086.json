{"url": "https://api.github.com/repos/pytorch/pytorch/issues/7964", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/7964/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/7964/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/7964/events", "html_url": "https://github.com/pytorch/pytorch/pull/7964", "id": 327895086, "node_id": "MDExOlB1bGxSZXF1ZXN0MTkxNTc3NjI4", "number": 7964, "title": "Make THStorage / THCStorage have void* data ptr.", "user": {"login": "gchanan", "id": 3768583, "node_id": "MDQ6VXNlcjM3Njg1ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3768583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gchanan", "html_url": "https://github.com/gchanan", "followers_url": "https://api.github.com/users/gchanan/followers", "following_url": "https://api.github.com/users/gchanan/following{/other_user}", "gists_url": "https://api.github.com/users/gchanan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gchanan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gchanan/subscriptions", "organizations_url": "https://api.github.com/users/gchanan/orgs", "repos_url": "https://api.github.com/users/gchanan/repos", "events_url": "https://api.github.com/users/gchanan/events{/privacy}", "received_events_url": "https://api.github.com/users/gchanan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-05-30T20:53:28Z", "updated_at": "2018-11-23T15:44:47Z", "closed_at": "2018-05-31T17:10:09Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/7964", "html_url": "https://github.com/pytorch/pytorch/pull/7964", "diff_url": "https://github.com/pytorch/pytorch/pull/7964.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/7964.patch"}, "body_html": "<p>This is the initial step in unifying the ATen and TH tensor representations, next is to only generate a single THStorage / THCStorage type.</p>\n<p>The major changes here are:</p>\n<ol>\n<li>data has been renamed to data_ptr and made void* in THStorage/THCStorage.</li>\n<li>THStorage / THCStorage stores a at::ScalarType representing its data type (This will be useful when we generate a single THStorage/THCStorage).</li>\n<li>APIs for Accessing the data as a real*:<br>\na) storage-&gt;data() -- this does runtime-type checking (checks that the at::ScalarType is correct).<br>\nb) storage-&gt;unsafeData() -- as above, but no runtime-type checking (used in inner loops / fast code paths).<br>\nc) THStorage_(data)(storage) -- this already existed, just calls storage-&gt;data().</li>\n</ol>", "body_text": "This is the initial step in unifying the ATen and TH tensor representations, next is to only generate a single THStorage / THCStorage type.\nThe major changes here are:\n\ndata has been renamed to data_ptr and made void* in THStorage/THCStorage.\nTHStorage / THCStorage stores a at::ScalarType representing its data type (This will be useful when we generate a single THStorage/THCStorage).\nAPIs for Accessing the data as a real*:\na) storage->data() -- this does runtime-type checking (checks that the at::ScalarType is correct).\nb) storage->unsafeData() -- as above, but no runtime-type checking (used in inner loops / fast code paths).\nc) THStorage_(data)(storage) -- this already existed, just calls storage->data().", "body": "This is the initial step in unifying the ATen and TH tensor representations, next is to only generate a single THStorage / THCStorage type.\r\n\r\nThe major changes here are:\r\n1) data has been renamed to data_ptr and made void* in THStorage/THCStorage.\r\n2) THStorage / THCStorage stores a at::ScalarType representing its data type (This will be useful when we generate a single THStorage/THCStorage).\r\n3) APIs for Accessing the data as a real*:\r\na) storage->data<real>() -- this does runtime-type checking (checks that the at::ScalarType is correct).\r\nb) storage->unsafeData<real>() -- as above, but no runtime-type checking (used in inner loops / fast code paths).\r\nc) THStorage_(data)(storage) -- this already existed, just calls storage->data<real>().\r\n\r\n"}