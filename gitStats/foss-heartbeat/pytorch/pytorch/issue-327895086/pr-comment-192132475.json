{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/192132475", "pull_request_review_id": 124847102, "id": 192132475, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MjEzMjQ3NQ==", "diff_hunk": "@@ -5,49 +5,61 @@\n void THStorage_(rawCopy)(THStorage *storage, real *src)\n {\n   ptrdiff_t i;\n+  real *data = THStorage_(data)(storage);\n   for(i = 0; i < storage->size; i++)\n-    storage->data[i] = src[i];\n+    data[i] = src[i];\n }\n \n void THStorage_(copy)(THStorage *storage, THStorage *src)\n {\n   THArgCheck(storage->size == src->size, 2, \"size mismatch\");\n-  THStorage_(rawCopy)(storage, src->data);\n+  THStorage_(rawCopy)(storage, THStorage_(data)(src));\n }\n \n+// NOTE: for performance, these macros generally directly access data, rather\n+// than THStorage_(data)\u00df\n+\n #define IMPLEMENT_THStorage_COPY(TYPENAMESRC) \\\n void THStorage_(copy##TYPENAMESRC)(THStorage *storage, TH##TYPENAMESRC##Storage *src) \\\n { \\\n-  ptrdiff_t i;                                                        \\\n-  for(i = 0; i < storage->size; i++)                                  \\\n-    storage->data[i] = (real)src->data[i];                            \\\n+  ptrdiff_t i;                                                          \\\n+  auto data = THStorage_(data)(storage);                                \\", "path": "aten/src/TH/generic/THStorageCopy.cpp", "position": 27, "original_position": 27, "commit_id": "28c038232e66a7211e012283b83c308de395bc6c", "original_commit_id": "e3037a89224d0d53d861691aaf0dca58ece58294", "user": {"login": "gchanan", "id": 3768583, "node_id": "MDQ6VXNlcjM3Njg1ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3768583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gchanan", "html_url": "https://github.com/gchanan", "followers_url": "https://api.github.com/users/gchanan/followers", "following_url": "https://api.github.com/users/gchanan/following{/other_user}", "gists_url": "https://api.github.com/users/gchanan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gchanan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gchanan/subscriptions", "organizations_url": "https://api.github.com/users/gchanan/orgs", "repos_url": "https://api.github.com/users/gchanan/repos", "events_url": "https://api.github.com/users/gchanan/events{/privacy}", "received_events_url": "https://api.github.com/users/gchanan/received_events", "type": "User", "site_admin": false}, "body": "I don't agree, I pull out the data pointers with type checking once and then use the raw pointers directly in the loop.", "created_at": "2018-05-31T15:06:48Z", "updated_at": "2018-11-23T15:44:47Z", "html_url": "https://github.com/pytorch/pytorch/pull/7964#discussion_r192132475", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/7964", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/192132475"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/7964#discussion_r192132475"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/7964"}}, "body_html": "<p>I don't agree, I pull out the data pointers with type checking once and then use the raw pointers directly in the loop.</p>", "body_text": "I don't agree, I pull out the data pointers with type checking once and then use the raw pointers directly in the loop.", "in_reply_to_id": 192130361}