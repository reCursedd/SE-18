{"url": "https://api.github.com/repos/pytorch/pytorch/issues/1627", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/1627/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/1627/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/1627/events", "html_url": "https://github.com/pytorch/pytorch/issues/1627", "id": 230778260, "node_id": "MDU6SXNzdWUyMzA3NzgyNjA=", "number": 1627, "title": "max() index should not be tensor?", "user": {"login": "makeyourownneuralnetwork", "id": 17411198, "node_id": "MDQ6VXNlcjE3NDExMTk4", "avatar_url": "https://avatars2.githubusercontent.com/u/17411198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/makeyourownneuralnetwork", "html_url": "https://github.com/makeyourownneuralnetwork", "followers_url": "https://api.github.com/users/makeyourownneuralnetwork/followers", "following_url": "https://api.github.com/users/makeyourownneuralnetwork/following{/other_user}", "gists_url": "https://api.github.com/users/makeyourownneuralnetwork/gists{/gist_id}", "starred_url": "https://api.github.com/users/makeyourownneuralnetwork/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/makeyourownneuralnetwork/subscriptions", "organizations_url": "https://api.github.com/users/makeyourownneuralnetwork/orgs", "repos_url": "https://api.github.com/users/makeyourownneuralnetwork/repos", "events_url": "https://api.github.com/users/makeyourownneuralnetwork/events{/privacy}", "received_events_url": "https://api.github.com/users/makeyourownneuralnetwork/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-05-23T16:58:40Z", "updated_at": "2017-05-23T17:04:08Z", "closed_at": "2017-05-23T17:03:31Z", "author_association": "NONE", "body_html": "<p>The result of calling torch.max() or tensor.max() gives an index that is a Tensor, wrapped in a Variable.</p>\n<p>To make use of the actual index, we need to extract via numpy and index into the resultant bumpy array.</p>\n<p>When we have a simple 1-dimensional tensor (vector) this leads to too much code:</p>\n<pre><code>maxval, idx = outputs.max(1)\n\nif (idx.data.numpy()[0][0] == correct_label):\n    ...\n</code></pre>\n<p>I suspect this will be a common user-story .. .could it be made easier?<br>\nMost people don't need the index to be a tensor, in my humble opinion.</p>\n<p>You can't actually do the <code>==</code> comparison with the <code>idx</code> or <code>int(idx)</code> and this leads to bugs because no error is raised, it quietly continues with a true bool ...</p>", "body_text": "The result of calling torch.max() or tensor.max() gives an index that is a Tensor, wrapped in a Variable.\nTo make use of the actual index, we need to extract via numpy and index into the resultant bumpy array.\nWhen we have a simple 1-dimensional tensor (vector) this leads to too much code:\nmaxval, idx = outputs.max(1)\n\nif (idx.data.numpy()[0][0] == correct_label):\n    ...\n\nI suspect this will be a common user-story .. .could it be made easier?\nMost people don't need the index to be a tensor, in my humble opinion.\nYou can't actually do the == comparison with the idx or int(idx) and this leads to bugs because no error is raised, it quietly continues with a true bool ...", "body": "The result of calling torch.max() or tensor.max() gives an index that is a Tensor, wrapped in a Variable.\r\n\r\nTo make use of the actual index, we need to extract via numpy and index into the resultant bumpy array.\r\n\r\nWhen we have a simple 1-dimensional tensor (vector) this leads to too much code:\r\n\r\n```\r\nmaxval, idx = outputs.max(1)\r\n\r\nif (idx.data.numpy()[0][0] == correct_label):\r\n    ...\r\n```\r\n\r\nI suspect this will be a common user-story .. .could it be made easier?\r\nMost people don't need the index to be a tensor, in my humble opinion.\r\n\r\nYou can't actually do the `==` comparison with the `idx` or `int(idx)` and this leads to bugs because no error is raised, it quietly continues with a true bool ..."}