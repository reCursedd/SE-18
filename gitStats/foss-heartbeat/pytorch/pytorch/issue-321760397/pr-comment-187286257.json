{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/187286257", "pull_request_review_id": 119031389, "id": 187286257, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NzI4NjI1Nw==", "diff_hunk": "@@ -58,12 +58,17 @@ struct tensor_as_impl<std::array<bool, N>> {\n template<>\n struct tensor_as_impl<at::IntList> {\n   at::IntList operator()(at::Tensor&& t) {\n+    t = t.toBackend(at::kCPU).contiguous();\n     if (t.type().scalarType() != at::ScalarType::Long)\n       throw tensor_conversion_error(\"Expected a LongTensor\");\n-    if (t.dim() != 1)\n-      throw tensor_conversion_error(\"Expected a 1D LongTensor\");\n-    if (!t.is_contiguous())\n-      throw tensor_conversion_error(\"Expected a contiguous LongTensor\");\n+    // certain ops like view and expand allow varargs behavior:\n+    //    t.expand(3,4) --> t.expand([3, 4])\n+    // In the case where we have `t.expand(s)` in @script,  we don't\n+    // know whether s is a 1D list or a scalar. In this case we leave it\n+    // as is in the IR and allow zero-dim tensors to turn into a list here:\n+    // t.expand(3) --> t.expand([3])\n+    if (t.dim() > 1)\n+      throw tensor_conversion_error(\"Expected a scalar or 1D LongTensor\");\n     return at::IntList{t.data<int64_t>(), static_cast<size_t>(t.numel())};", "path": "torch/csrc/jit/tensor_conversions.h", "position": 59, "original_position": 19, "commit_id": "1d771ab0fce810be2302d37d981e2a0d9d0c6252", "original_commit_id": "1d771ab0fce810be2302d37d981e2a0d9d0c6252", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "I realized that this code looks quite worrying. The interface encourages passing in temporary tensors, but the returned `IntList` depends on them being alive *after* this function returns. Adding the extra cast + contiguous call only makes matters worse.", "created_at": "2018-05-10T09:47:09Z", "updated_at": "2018-11-23T15:43:50Z", "html_url": "https://github.com/pytorch/pytorch/pull/7444#discussion_r187286257", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/7444", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/187286257"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/7444#discussion_r187286257"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/7444"}}, "body_html": "<p>I realized that this code looks quite worrying. The interface encourages passing in temporary tensors, but the returned <code>IntList</code> depends on them being alive <em>after</em> this function returns. Adding the extra cast + contiguous call only makes matters worse.</p>", "body_text": "I realized that this code looks quite worrying. The interface encourages passing in temporary tensors, but the returned IntList depends on them being alive after this function returns. Adding the extra cast + contiguous call only makes matters worse."}