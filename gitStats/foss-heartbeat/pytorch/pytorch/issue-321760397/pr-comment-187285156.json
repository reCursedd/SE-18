{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/187285156", "pull_request_review_id": 119031389, "id": 187285156, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NzI4NTE1Ng==", "diff_hunk": "@@ -372,16 +392,26 @@ at::optional<std::vector<Value*>> tryMatchSchema(\n \n     std::vector<at::optional<NamedValue>> positional_inputs(schema.arguments.size(), at::nullopt);\n \n-    size_t total_inputs = attributes.size() + inputs.size();\n-    if(total_inputs > schema.arguments.size()) {\n-      err() << \"expected at most \" << schema.arguments.size() << \" arguments \"\n-      << \" but found \" << total_inputs << \"\\n\" << loc << \"\\n\";\n-      return at::nullopt;\n-    }\n     // fill in positional arguments\n-    for(size_t i = 0; i < inputs.size(); ++i) {\n+    size_t non_vararg = std::min(inputs.size(), schema.arguments.size());\n+    for(size_t i = 0; i < non_vararg; ++i) {\n       positional_inputs[i] = inputs[i];\n     }\n+    // if we have extra vararg arguments pack them all up into a tuple as the last argument", "path": "torch/csrc/jit/script/compiler.cpp", "position": null, "original_position": 43, "commit_id": "1d771ab0fce810be2302d37d981e2a0d9d0c6252", "original_commit_id": "1d771ab0fce810be2302d37d981e2a0d9d0c6252", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Tbh this logic is a bit weird for me. In a call like `expand(tensor, 1, 2, 3, 4)`, this will initially fill in `positional_inputs` with `{tensor, 1}`. It would be clearer if we did a check for vararg function before, and took different paths based on that.\r\n\r\nAnother weird thing with this code (that just so happens to work because we represent singleton tuples in the same way as elements) is that a single argument doesn't get promoted to a tuple type. This is a recipe for a breakage in the future.", "created_at": "2018-05-10T09:41:26Z", "updated_at": "2018-11-23T15:43:50Z", "html_url": "https://github.com/pytorch/pytorch/pull/7444#discussion_r187285156", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/7444", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/187285156"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/7444#discussion_r187285156"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/7444"}}, "body_html": "<p>Tbh this logic is a bit weird for me. In a call like <code>expand(tensor, 1, 2, 3, 4)</code>, this will initially fill in <code>positional_inputs</code> with <code>{tensor, 1}</code>. It would be clearer if we did a check for vararg function before, and took different paths based on that.</p>\n<p>Another weird thing with this code (that just so happens to work because we represent singleton tuples in the same way as elements) is that a single argument doesn't get promoted to a tuple type. This is a recipe for a breakage in the future.</p>", "body_text": "Tbh this logic is a bit weird for me. In a call like expand(tensor, 1, 2, 3, 4), this will initially fill in positional_inputs with {tensor, 1}. It would be clearer if we did a check for vararg function before, and took different paths based on that.\nAnother weird thing with this code (that just so happens to work because we represent singleton tuples in the same way as elements) is that a single argument doesn't get promoted to a tuple type. This is a recipe for a breakage in the future."}