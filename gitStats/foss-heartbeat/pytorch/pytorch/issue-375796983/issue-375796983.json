{"url": "https://api.github.com/repos/pytorch/pytorch/issues/13370", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/13370/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/13370/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/13370/events", "html_url": "https://github.com/pytorch/pytorch/pull/13370", "id": 375796983, "node_id": "MDExOlB1bGxSZXF1ZXN0MjI3MTU4MjQw", "number": 13370, "title": "net_simple_refcount type to help experimentation with dynamic allocation.", "user": {"login": "Yangqing", "id": 551151, "node_id": "MDQ6VXNlcjU1MTE1MQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/551151?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Yangqing", "html_url": "https://github.com/Yangqing", "followers_url": "https://api.github.com/users/Yangqing/followers", "following_url": "https://api.github.com/users/Yangqing/following{/other_user}", "gists_url": "https://api.github.com/users/Yangqing/gists{/gist_id}", "starred_url": "https://api.github.com/users/Yangqing/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Yangqing/subscriptions", "organizations_url": "https://api.github.com/users/Yangqing/orgs", "repos_url": "https://api.github.com/users/Yangqing/repos", "events_url": "https://api.github.com/users/Yangqing/events{/privacy}", "received_events_url": "https://api.github.com/users/Yangqing/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-10-31T04:46:24Z", "updated_at": "2018-10-31T23:00:49Z", "closed_at": "2018-10-31T23:00:49Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/13370", "html_url": "https://github.com/pytorch/pytorch/pull/13370", "diff_url": "https://github.com/pytorch/pytorch/pull/13370.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/13370.patch"}, "body_html": "<p>Summary:<br>\nThis diff adds a new net type (simple_refcount) that does one thing: for all<br>\nintermediate results produced by a net, it will keep refcount about internal<br>\nusage, and when it finishes its consumption, the net will delete the blob<br>\ncontent to mimic the case of dynamic allocation. In fact, this would also be<br>\nthe behavior when we go functional: anything that is not explicitly marked as<br>\ninput or output will be up to the executor for lifetime management.</p>\n<p>See the comments in net_simple_refcount.cc for details.</p>\n<p>Differential Revision: D12855489</p>", "body_text": "Summary:\nThis diff adds a new net type (simple_refcount) that does one thing: for all\nintermediate results produced by a net, it will keep refcount about internal\nusage, and when it finishes its consumption, the net will delete the blob\ncontent to mimic the case of dynamic allocation. In fact, this would also be\nthe behavior when we go functional: anything that is not explicitly marked as\ninput or output will be up to the executor for lifetime management.\nSee the comments in net_simple_refcount.cc for details.\nDifferential Revision: D12855489", "body": "Summary:\nThis diff adds a new net type (simple_refcount) that does one thing: for all\nintermediate results produced by a net, it will keep refcount about internal\nusage, and when it finishes its consumption, the net will delete the blob\ncontent to mimic the case of dynamic allocation. In fact, this would also be\nthe behavior when we go functional: anything that is not explicitly marked as\ninput or output will be up to the executor for lifetime management.\n\nSee the comments in net_simple_refcount.cc for details.\n\nDifferential Revision: D12855489\n"}