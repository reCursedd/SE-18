{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/109388709", "pull_request_review_id": 30485918, "id": 109388709, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwOTM4ODcwOQ==", "diff_hunk": "@@ -354,15 +354,43 @@ def test_fmod(self):\n         self.assertEqual(res1, res2)\n \n     def test_remainder(self):\n+        # Check the Floating point case\n         m1 = torch.Tensor(10, 10).uniform_(-10., 10.)\n         res1 = m1.clone()\n-        q = 2.1\n-        res1[:, 3].remainder_(q)\n         res2 = m1.clone()\n-        for i in range(m1.size(0)):\n-            res2[i, 3] = res2[i, 3] % q\n+        qs = torch.range(-5.1, 4.1)\n+        # Check the case where the divisor is a simple float\n+        for col_idx, q in enumerate(qs):\n+            # Reference\n+            for i in range(m1.size(0)):\n+                res2[i, col_idx] = res2[i, col_idx] % q\n+            # To test\n+            res1[:, col_idx].remainder_(q)\n+        self.assertEqual(res1, res2)\n+        # Check the case where the divisor is a tensor\n+        res1 = m1.clone()\n+        res1.remainder_(qs.unsqueeze(0).expand_as(res1))\n         self.assertEqual(res1, res2)\n \n+        # Check the LongTensor case\n+        long_m1 = torch.LongTensor(10, 10).random_(-10, 10)\n+        long_res1 = long_m1.clone()\n+        long_res2 = long_m1.clone()\n+        long_qs = torch.range(-5, 4).long()\n+        long_qs[5] = 5  # Can't handle the divisor=0 case", "path": "test/test_torch.py", "position": 31, "original_position": 31, "commit_id": "d6760a245d24f391a0e1178a00de72c2bc0a790f", "original_commit_id": "14c1ecb9848c0a04aee9b693bdc33d12eb9aa029", "user": {"login": "fmassa", "id": 9110200, "node_id": "MDQ6VXNlcjkxMTAyMDA=", "avatar_url": "https://avatars2.githubusercontent.com/u/9110200?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fmassa", "html_url": "https://github.com/fmassa", "followers_url": "https://api.github.com/users/fmassa/followers", "following_url": "https://api.github.com/users/fmassa/following{/other_user}", "gists_url": "https://api.github.com/users/fmassa/gists{/gist_id}", "starred_url": "https://api.github.com/users/fmassa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fmassa/subscriptions", "organizations_url": "https://api.github.com/users/fmassa/orgs", "repos_url": "https://api.github.com/users/fmassa/repos", "events_url": "https://api.github.com/users/fmassa/events{/privacy}", "received_events_url": "https://api.github.com/users/fmassa/received_events", "type": "User", "site_admin": false}, "body": "Do we want to handle integer division by zero in pytorch? According to what I understood in [this issue](https://github.com/pytorch/pytorch/issues/327), I think that we shouldn't care about adding special cases checking for zero, but this might be different here.", "created_at": "2017-04-03T10:54:46Z", "updated_at": "2018-11-23T15:32:58Z", "html_url": "https://github.com/pytorch/pytorch/pull/1170#discussion_r109388709", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/1170", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/109388709"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/1170#discussion_r109388709"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/1170"}}, "body_html": "<p>Do we want to handle integer division by zero in pytorch? According to what I understood in <a href=\"https://github.com/pytorch/pytorch/issues/327\" data-hovercard-type=\"issue\" data-hovercard-url=\"/pytorch/pytorch/issues/327/hovercard\">this issue</a>, I think that we shouldn't care about adding special cases checking for zero, but this might be different here.</p>", "body_text": "Do we want to handle integer division by zero in pytorch? According to what I understood in this issue, I think that we shouldn't care about adding special cases checking for zero, but this might be different here.", "in_reply_to_id": 109329065}