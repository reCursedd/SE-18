{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/385848554", "html_url": "https://github.com/pytorch/pytorch/pull/6554#issuecomment-385848554", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/6554", "id": 385848554, "node_id": "MDEyOklzc3VlQ29tbWVudDM4NTg0ODU1NA==", "user": {"login": "dzhulgakov", "id": 17890620, "node_id": "MDQ6VXNlcjE3ODkwNjIw", "avatar_url": "https://avatars2.githubusercontent.com/u/17890620?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dzhulgakov", "html_url": "https://github.com/dzhulgakov", "followers_url": "https://api.github.com/users/dzhulgakov/followers", "following_url": "https://api.github.com/users/dzhulgakov/following{/other_user}", "gists_url": "https://api.github.com/users/dzhulgakov/gists{/gist_id}", "starred_url": "https://api.github.com/users/dzhulgakov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dzhulgakov/subscriptions", "organizations_url": "https://api.github.com/users/dzhulgakov/orgs", "repos_url": "https://api.github.com/users/dzhulgakov/repos", "events_url": "https://api.github.com/users/dzhulgakov/events{/privacy}", "received_events_url": "https://api.github.com/users/dzhulgakov/received_events", "type": "User", "site_admin": false}, "created_at": "2018-05-02T02:41:04Z", "updated_at": "2018-05-02T02:41:04Z", "author_association": "MEMBER", "body_html": "<p>So the error you're encountering is coming from indeed trying to reverse-engineer things in <code>view</code>'s symbolic (<a href=\"https://sourcegraph.com/github.com/pytorch/pytorch/-/blob/torch/onnx/symbolic.py#L279\" rel=\"nofollow\">https://sourcegraph.com/github.com/pytorch/pytorch/-/blob/torch/onnx/symbolic.py#L279</a>). It's basically a speculation to cover a common case when people use view() to do flatten except for the first dimension.</p>\n<p>I think it's a reasonable speculation and does what you want. But to make it work we need to get \"numeric sizes\" to be used in symbolics? So can we have something like <code>_get_real_sizes()</code> which returns integers even under tracing and can be used in implementing onnx symbolics?</p>", "body_text": "So the error you're encountering is coming from indeed trying to reverse-engineer things in view's symbolic (https://sourcegraph.com/github.com/pytorch/pytorch/-/blob/torch/onnx/symbolic.py#L279). It's basically a speculation to cover a common case when people use view() to do flatten except for the first dimension.\nI think it's a reasonable speculation and does what you want. But to make it work we need to get \"numeric sizes\" to be used in symbolics? So can we have something like _get_real_sizes() which returns integers even under tracing and can be used in implementing onnx symbolics?", "body": "So the error you're encountering is coming from indeed trying to reverse-engineer things in `view`'s symbolic (https://sourcegraph.com/github.com/pytorch/pytorch/-/blob/torch/onnx/symbolic.py#L279). It's basically a speculation to cover a common case when people use view() to do flatten except for the first dimension.\r\n\r\nI think it's a reasonable speculation and does what you want. But to make it work we need to get \"numeric sizes\" to be used in symbolics? So can we have something like `_get_real_sizes()` which returns integers even under tracing and can be used in implementing onnx symbolics?"}