{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/182394511", "pull_request_review_id": 113179234, "id": 182394511, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjM5NDUxMQ==", "diff_hunk": "@@ -41,6 +43,52 @@ static void setattr(jit::Node* n, jit::Symbol name, double v)              { n->\n template<std::size_t N>\n static void setattr(jit::Node* n, jit::Symbol name, std::array<bool, N> v) { n->is_(name, std::vector<int64_t>(v.begin(), v.end())); }\n \n+template<typename T>\n+static jit::Value* createConstant(jit::Node* n, T value) {\n+  return n->owningGraph()->createConstant(jit::as_tensor(value))->insertBefore(n)->output();\n+}\n+\n+template<typename T>\n+static void genericInsertInput(jit::Node* n, size_t idx, T value) {\n+  n->insertInput(idx, createConstant(n, t));\n+}\n+\n+void failPosAttr() {\n+  throw std::runtime_error(\"unsupported type in setposattr. File a bug report!\");\n+}\n+\n+static void setposattr(jit::Node* n, size_t idx, const char *name, int64_t v)             { genericInsertInput(n, idx, v); }\n+static void setposattr(jit::Node* n, size_t idx, const char *name, const at::Scalar& v)   { genericInsertInput(n, idx, v); }\n+static void setposattr(jit::Node* n, size_t idx, const char *name, SparseTensor s)        { failPosAttr(); }\n+static void setposattr(jit::Node* n, size_t idx, const char *name, const at::IntList& v)  {\n+  using ArgumentStash = jit::tracer::ArgumentStash;\n+  if (ArgumentStash::hasIntList(name)) {\n+    auto info = ArgumentStash::popIntList(name);\n+    for (size_t i = 0; i < info.size(); ++i) {\n+      if (info[i] != nullptr) continue;", "path": "tools/autograd/templates/VariableType.cpp", "position": 35, "original_position": 35, "commit_id": "f28741691dae2b1b5540bc1b50d1b97ad4279cf8", "original_commit_id": "28a2f65c8728b3cd777477227f3c9d6b66eee018", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Exactly. Not all elements of that int list have to be traceable.", "created_at": "2018-04-18T11:33:01Z", "updated_at": "2018-11-23T15:42:43Z", "html_url": "https://github.com/pytorch/pytorch/pull/6554#discussion_r182394511", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/6554", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/182394511"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/6554#discussion_r182394511"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/6554"}}, "body_html": "<p>Exactly. Not all elements of that int list have to be traceable.</p>", "body_text": "Exactly. Not all elements of that int list have to be traceable.", "in_reply_to_id": 182316027}