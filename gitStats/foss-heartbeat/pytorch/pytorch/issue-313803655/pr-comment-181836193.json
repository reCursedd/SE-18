{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/181836193", "pull_request_review_id": 112530072, "id": 181836193, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MTgzNjE5Mw==", "diff_hunk": "@@ -41,6 +43,52 @@ static void setattr(jit::Node* n, jit::Symbol name, double v)              { n->\n template<std::size_t N>\n static void setattr(jit::Node* n, jit::Symbol name, std::array<bool, N> v) { n->is_(name, std::vector<int64_t>(v.begin(), v.end())); }\n \n+template<typename T>\n+static jit::Value* createConstant(jit::Node* n, T value) {\n+  return n->owningGraph()->createConstant(jit::as_tensor(value))->insertBefore(n)->output();\n+}\n+\n+template<typename T>\n+static void genericInsertInput(jit::Node* n, size_t idx, T value) {\n+  n->insertInput(idx, createConstant(n, t));\n+}\n+\n+void failPosAttr() {\n+  throw std::runtime_error(\"unsupported type in setposattr. File a bug report!\");\n+}\n+\n+static void setposattr(jit::Node* n, size_t idx, const char *name, int64_t v)             { genericInsertInput(n, idx, v); }\n+static void setposattr(jit::Node* n, size_t idx, const char *name, const at::Scalar& v)   { genericInsertInput(n, idx, v); }\n+static void setposattr(jit::Node* n, size_t idx, const char *name, SparseTensor s)        { failPosAttr(); }\n+static void setposattr(jit::Node* n, size_t idx, const char *name, const at::IntList& v)  {", "path": "tools/autograd/templates/VariableType.cpp", "position": null, "original_position": 30, "commit_id": "f28741691dae2b1b5540bc1b50d1b97ad4279cf8", "original_commit_id": "28a2f65c8728b3cd777477227f3c9d6b66eee018", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "The code here seems to imply that we'll only \"notice\" a traced shape when it's inside an IntList. But in principle, shouldn't I be allowed to take an individual scalar from the shape and pass to an argument that expects `int64_t`?\r\n\r\n(P.S. I'm guessing how the code works based how I read it; but a Note saying how you are ferrying the traced scalars to the final site would be super helpful.)", "created_at": "2018-04-16T18:12:08Z", "updated_at": "2018-11-23T15:42:31Z", "html_url": "https://github.com/pytorch/pytorch/pull/6554#discussion_r181836193", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/6554", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/181836193"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/6554#discussion_r181836193"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/6554"}}, "body_html": "<p>The code here seems to imply that we'll only \"notice\" a traced shape when it's inside an IntList. But in principle, shouldn't I be allowed to take an individual scalar from the shape and pass to an argument that expects <code>int64_t</code>?</p>\n<p>(P.S. I'm guessing how the code works based how I read it; but a Note saying how you are ferrying the traced scalars to the final site would be super helpful.)</p>", "body_text": "The code here seems to imply that we'll only \"notice\" a traced shape when it's inside an IntList. But in principle, shouldn't I be allowed to take an individual scalar from the shape and pass to an argument that expects int64_t?\n(P.S. I'm guessing how the code works based how I read it; but a Note saying how you are ferrying the traced scalars to the final site would be super helpful.)"}