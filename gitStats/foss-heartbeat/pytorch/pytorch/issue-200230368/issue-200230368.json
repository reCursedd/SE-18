{"url": "https://api.github.com/repos/pytorch/pytorch/issues/433", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/433/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/433/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/433/events", "html_url": "https://github.com/pytorch/pytorch/issues/433", "id": 200230368, "node_id": "MDU6SXNzdWUyMDAyMzAzNjg=", "number": 433, "title": "optim.Optimizer() - Missing argument type check for single parameter", "user": {"login": "andreaskoepf", "id": 9976399, "node_id": "MDQ6VXNlcjk5NzYzOTk=", "avatar_url": "https://avatars2.githubusercontent.com/u/9976399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andreaskoepf", "html_url": "https://github.com/andreaskoepf", "followers_url": "https://api.github.com/users/andreaskoepf/followers", "following_url": "https://api.github.com/users/andreaskoepf/following{/other_user}", "gists_url": "https://api.github.com/users/andreaskoepf/gists{/gist_id}", "starred_url": "https://api.github.com/users/andreaskoepf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andreaskoepf/subscriptions", "organizations_url": "https://api.github.com/users/andreaskoepf/orgs", "repos_url": "https://api.github.com/users/andreaskoepf/repos", "events_url": "https://api.github.com/users/andreaskoepf/events{/privacy}", "received_events_url": "https://api.github.com/users/andreaskoepf/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 424131847, "node_id": "MDU6TGFiZWw0MjQxMzE4NDc=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/bug", "name": "bug", "color": "b60205", "default": true}, {"id": 443484135, "node_id": "MDU6TGFiZWw0NDM0ODQxMzU=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/high%20priority", "name": "high priority", "color": "F22613", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 0, "created_at": "2017-01-11T22:47:23Z", "updated_at": "2017-01-16T18:08:16Z", "closed_at": "2017-01-16T18:08:16Z", "author_association": "CONTRIBUTOR", "body_html": "<p>It is currently possible to pass a single Variable/Parameter to an optimizer without putting it in a list. At least no error is raised. Unfortunately an optimizer step does not change anything.</p>\n<p>e.g. <code>optim.Adam(p)</code> does not work but generates no error while <code>optim.Adam([p])</code> works.</p>\n<pre><code>p = nn.Parameter(torch.eye(1))\np.grad.fill_(1)\nbefore = p.data.clone()\no = optim.Adam(p) \n# o = optim.Adam([p])   # passing p in a list makes it work\no.step()\n(p.data-before).abs().sum() # this should not be 0\n</code></pre>\n<p>Interestingly if I pass a single <code>Variable</code> it is checked for <code>requires_grad</code>. E.g. if I try <code>optim.Adam(Variable(torch.eye(1)))</code> the call fails with: <code>ValueError: optimizing a parameter that doesn't require gradients</code>.</p>", "body_text": "It is currently possible to pass a single Variable/Parameter to an optimizer without putting it in a list. At least no error is raised. Unfortunately an optimizer step does not change anything.\ne.g. optim.Adam(p) does not work but generates no error while optim.Adam([p]) works.\np = nn.Parameter(torch.eye(1))\np.grad.fill_(1)\nbefore = p.data.clone()\no = optim.Adam(p) \n# o = optim.Adam([p])   # passing p in a list makes it work\no.step()\n(p.data-before).abs().sum() # this should not be 0\n\nInterestingly if I pass a single Variable it is checked for requires_grad. E.g. if I try optim.Adam(Variable(torch.eye(1))) the call fails with: ValueError: optimizing a parameter that doesn't require gradients.", "body": "It is currently possible to pass a single Variable/Parameter to an optimizer without putting it in a list. At least no error is raised. Unfortunately an optimizer step does not change anything.\r\n\r\ne.g. `optim.Adam(p)` does not work but generates no error while `optim.Adam([p])` works.\r\n\r\n```\r\np = nn.Parameter(torch.eye(1))\r\np.grad.fill_(1)\r\nbefore = p.data.clone()\r\no = optim.Adam(p) \r\n# o = optim.Adam([p])   # passing p in a list makes it work\r\no.step()\r\n(p.data-before).abs().sum() # this should not be 0\r\n```\r\n\r\nInterestingly if I pass a single `Variable` it is checked for `requires_grad`. E.g. if I try `optim.Adam(Variable(torch.eye(1)))` the call fails with: `ValueError: optimizing a parameter that doesn't require gradients`.\r\n\r\n"}