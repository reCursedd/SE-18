{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/201809292", "pull_request_review_id": 136384362, "id": 201809292, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTgwOTI5Mg==", "diff_hunk": "@@ -18,9 +21,59 @@ using function_constructor = std::function<std::shared_ptr<Function>(edge_list&&\n variable_list wrap_outputs(const variable_list& inputs, tensor_list&& outputs,\n                            function_constructor ctr);\n \n-/**\n- * Checks that inputs contains exactly `args` items and that the first `required_args`\n- * items are not nullptr. If not specified, `required_args` defaults to `args`.\n- */\n+///  Checks that inputs contains exactly `args` items and that the first `required_args`\n+/// items are not nullptr. If not specified, `required_args` defaults to `args`.\n void check_input_variables(const char* name, const variable_list& inputs, int args, int required_args=-1);\n+\n+struct ComputeRequiresGrad : IterArgs<ComputeRequiresGrad> {\n+  bool out = false;\n+  using IterArgs<ComputeRequiresGrad>::operator();\n+  void operator()(const at::Tensor& tensor) {\n+    const auto& var = static_cast<const Variable&>(tensor);\n+    if (var.defined() && var.requires_grad()) {\n+      out = true;\n+    }\n+  }\n+  bool short_circuit() {\n+    return out;\n+  }\n+};\n+\n+template <typename... Args>\n+inline bool compute_requires_grad(Args&&... args) {\n+  if (!GradMode::is_enabled()) {\n+    return false;\n+  }\n+  return ComputeRequiresGrad().apply(std::forward<Args>(args)...).out;\n+}\n+\n+inline void set_history(\n+    at::Tensor& variable,\n+    const std::shared_ptr<Function>& grad_fn) {\n+  if (grad_fn) {\n+    if (variable.defined()) {\n+      auto output_nr =\n+          grad_fn->add_input_metadata(variable.type(), variable.sizes());\n+      as_variable_ref(variable).set_gradient_edge({grad_fn, output_nr});\n+    } else {\n+      grad_fn->add_input_metadata(Function::undefined_input());\n+    }\n+  }\n+}\n+\n+inline void set_history(\n+    std::vector<Variable>&& variables,\n+    const std::shared_ptr<Function>& grad_fn) {\n+  for (auto& variable : variables) {\n+    set_history(variable, grad_fn);\n+  }\n+}", "path": "torch/csrc/autograd/functions/utils.h", "position": 67, "original_position": 67, "commit_id": "bcaacf8be9df7fd32007e3528295943a9be46e14", "original_commit_id": "ee79272a6c9444f83f74b66005f86369e9120edf", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Is this overload necessary? Looks like we could just make the one below take a `const` to the vector, and it would match this one too. ", "created_at": "2018-07-11T19:13:41Z", "updated_at": "2018-11-23T15:47:10Z", "html_url": "https://github.com/pytorch/pytorch/pull/9234#discussion_r201809292", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/9234", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/201809292"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/9234#discussion_r201809292"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/9234"}}, "body_html": "<p>Is this overload necessary? Looks like we could just make the one below take a <code>const</code> to the vector, and it would match this one too.</p>", "body_text": "Is this overload necessary? Looks like we could just make the one below take a const to the vector, and it would match this one too."}