{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/171101607", "pull_request_review_id": 99895672, "id": 171101607, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MTEwMTYwNw==", "diff_hunk": "@@ -384,35 +390,73 @@ Operation createPythonOperation(PythonOp* op) {\n     size_t next_scalar = 0;\n     size_t next_tensor = 0;\n     HandleBuilder builder(has_handle);\n-    for(auto arg_type : op->cconv) {\n-      if(arg_type == 's') {\n-        py_inputs[i] = py::reinterpret_borrow<py::object>(op->scalar_args[next_scalar++].get());\n-      } else if(arg_type == 't') {\n-        py_inputs[i] = py::reinterpret_steal<py::object>(THPVariable_Wrap(\n-          builder.addInput(std::move(fromLast(stack, num_inputs - next_tensor)), op->var_flags.at(next_tensor))));\n-        next_tensor++;\n+    if (unpack_variables) {\n+      for (auto arg_type : op->cconv) {\n+        if (arg_type == 's') {\n+          py_inputs[i] = py::reinterpret_borrow<py::object>(\n+              op->scalar_args[next_scalar++].get());\n+        } else if (arg_type == 't') {\n+          py_inputs[i] = py::reinterpret_steal<py::object>(\n+              THPVariable_Wrap(builder.addInput(\n+                  std::move(fromLast(stack, num_inputs - next_tensor)),\n+                  op->var_flags.at(next_tensor))));\n+          next_tensor++;\n+        }\n+        i++;\n       }\n-      i++;\n-    }\n-    drop(stack, num_inputs);\n-    py::object py_outputs(func(*py_inputs));\n-\n-    auto addOutput = [&](py::handle entry) {\n-      if(!THPVariable_Check(entry.ptr())) {\n-        throw std::runtime_error(\"Function.apply returned a non-Variable output\");\n+      drop(stack, num_inputs);\n+      py::object py_outputs(func(*py_inputs));\n+      auto addOutput = [&](py::handle entry) {\n+        if (!THPVariable_Check(entry.ptr())) {\n+          throw std::runtime_error(\n+              \"Function.apply returned a non-Variable output\");\n+        }\n+        THPVariable* var = (THPVariable*)entry.ptr();\n+        stack.push_back(builder.addOutput(var->cdata));\n+      };\n+      if (!PyTuple_Check(py_outputs.ptr())) {\n+        addOutput(py_outputs);\n+      } else {\n+        for (py::handle entry : py::tuple(py_outputs)) {\n+          addOutput(entry);\n+        }\n       }\n-      THPVariable *var = (THPVariable*) entry.ptr();\n-      stack.push_back(builder.addOutput(var->cdata));\n-    };\n-    if(!PyTuple_Check(py_outputs.ptr())) {\n-      addOutput(py_outputs);\n+      builder.writeTo(stack);\n+      return 0;\n     } else {\n-      for(py::handle entry : py::tuple(py_outputs)) {\n-        addOutput(entry);\n+      for (auto arg_type : op->cconv) {\n+        if (arg_type == 's') {\n+          py_inputs[i] = py::reinterpret_borrow<py::object>(\n+              op->scalar_args[next_scalar++].get());\n+        } else if (arg_type == 't') {\n+          auto var = fromLast(stack, num_inputs - next_tensor);\n+          py_inputs[i] = py::reinterpret_steal<py::object>(\n+              THPVariable_Wrap(autograd::make_variable(var)));", "path": "torch/csrc/jit/interpreter.cpp", "position": null, "original_position": 82, "commit_id": "7b960c17637717b61803232353e71d8c33ab1dd5", "original_commit_id": "6eeee6943d31d0b84a712e71f7eca43b8a7d7fad", "user": {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, "body": "I don't think there should be an `autograd::make_variable` call here. If you didn't unwrap the variables, then you shouldn't be wrapping the variable again. ", "created_at": "2018-02-27T23:29:19Z", "updated_at": "2018-11-23T15:40:05Z", "html_url": "https://github.com/pytorch/pytorch/pull/5445#discussion_r171101607", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/5445", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/171101607"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/5445#discussion_r171101607"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/5445"}}, "body_html": "<p>I don't think there should be an <code>autograd::make_variable</code> call here. If you didn't unwrap the variables, then you shouldn't be wrapping the variable again.</p>", "body_text": "I don't think there should be an autograd::make_variable call here. If you didn't unwrap the variables, then you shouldn't be wrapping the variable again."}