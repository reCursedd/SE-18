{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/146620335", "pull_request_review_id": 71588385, "id": 146620335, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0NjYyMDMzNQ==", "diff_hunk": "@@ -349,6 +349,84 @@ void THTensor_(indexCopy)(THTensor *tensor, int dim, THLongTensor *index, THTens\n   THLongTensor_free(index);\n }\n \n+static ptrdiff_t THTensor_(dataOffset)(THTensor* tensor, ptrdiff_t linearIndex) {\n+  int64_t *size = tensor->size;\n+  int64_t *stride = tensor->stride;\n+  int nDim = tensor->nDimension;\n+  ptrdiff_t dataOffset = 0;\n+  for (int i = nDim - 1; i >= 0; i--) {\n+    dataOffset += (linearIndex % size[i]) * stride[i];\n+    linearIndex /= size[i];\n+  }\n+  return dataOffset;\n+}\n+\n+static int64_t THTensor_(wrapLinearIndex)(int64_t linearIndex, int64_t numel) {\n+  THArgCheck(linearIndex < numel && linearIndex >= -numel, 2, \"out of range\");\n+  return linearIndex < 0 ? linearIndex + numel : linearIndex;\n+}\n+\n+void THTensor_(take)(THTensor *r_, THTensor *src, THLongTensor *index)\n+{\n+  ptrdiff_t nIndices = THLongTensor_nElement(index);\n+  THArgCheck(nIndices != THTensor_(nElement)(src), 2,\n+    \"src should have the same number of elements as index\");\n+\n+  THTensor_(resizeNd)(r_, index->nDimension, index->size, NULL);\n+  THTensor* dst = THTensor_(newContiguous)(r_);\n+\n+  index = THLongTensor_newContiguous(index);\n+  long* index_data = THLongTensor_data(index);\n+  ptrdiff_t srcElements = THTensor_(nElement)(src);\n+  real* src_data = THTensor_(data)(src);\n+  real* dst_data = THTensor_(data)(dst);\n+\n+  if (THTensor_(isContiguous)(src)) {\n+    #pragma omp parallel for if(nIndices > TH_OMP_OVERHEAD_THRESHOLD)\n+    for (ptrdiff_t i = 0; i < nIndices; i++) {", "path": "torch/lib/TH/generic/THTensorMath.c", "position": null, "original_position": 38, "commit_id": "ed2c3dd9291070d3a54260f90666587c129faa32", "original_commit_id": "977dd26f1e20994a4cb8bcd4f2b1571d643d55fa", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "this will break Windows build because MSVC can't support declaring loop variables inside for \ud83d\ude0a Declare `i` outside and make it `private(i)`", "created_at": "2017-10-24T16:38:12Z", "updated_at": "2018-11-23T15:35:39Z", "html_url": "https://github.com/pytorch/pytorch/pull/3263#discussion_r146620335", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/3263", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/146620335"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/3263#discussion_r146620335"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/3263"}}, "body_html": "<p>this will break Windows build because MSVC can't support declaring loop variables inside for <g-emoji class=\"g-emoji\" alias=\"blush\" fallback-src=\"https://assets-cdn.github.com/images/icons/emoji/unicode/1f60a.png\">\ud83d\ude0a</g-emoji> Declare <code>i</code> outside and make it <code>private(i)</code></p>", "body_text": "this will break Windows build because MSVC can't support declaring loop variables inside for \ud83d\ude0a Declare i outside and make it private(i)"}