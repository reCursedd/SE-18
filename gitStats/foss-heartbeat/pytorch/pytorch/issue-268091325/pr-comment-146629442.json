{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/146629442", "pull_request_review_id": 71588385, "id": 146629442, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0NjYyOTQ0Mg==", "diff_hunk": "@@ -398,5 +398,53 @@ __global__ void calculateLinearIndices(\n    }\n }\n \n+template <typename T, typename IndexType, int Dims>\n+struct TensorPutOp {\n+  TensorPutOp(TensorInfo<T, IndexType> info) : info(info) {}\n+\n+  __device__ __forceinline__ void operator()(T* value, int64_t* index) {\n+    IndexType linearIndex = static_cast<IndexType>(*index);\n+    IndexType offset = IndexToOffset<T, IndexType, Dims>::get(linearIndex, info) - TH_INDEX_BASE;\n+    info.data[offset] = *value;\n+  }\n+\n+  const TensorInfo<T, IndexType> info;\n+};\n+\n+template <typename T, typename IndexType, int Dims>\n+struct TensorTakeOp {\n+  TensorTakeOp(TensorInfo<T, IndexType> info) : info(info) {}\n+\n+  __device__ __forceinline__ void operator()(T* out, int64_t* index) {\n+    IndexType linearIndex = static_cast<IndexType>(*index);\n+    IndexType offset = IndexToOffset<T, IndexType, Dims>::get(linearIndex, info) - TH_INDEX_BASE;\n+    *out = info.data[offset];\n+  }\n+\n+  const TensorInfo<T, IndexType> info;\n+};\n+\n+template<typename IndexType, typename real, template<class, class, int> class Op, typename TensorType>\n+void dispatchTakePutImpl(THCState *state, TensorType *a, TensorType *b, THCudaLongTensor *index) {\n+  auto aInfo = getTensorInfo<TensorType, IndexType>(state, a);\n+  aInfo.collapseDims();\n+  if (aInfo.isContiguous()) {\n+    auto op = Op<real, IndexType, -2>(aInfo);\n+    THC_pointwiseApply2(state, b, index, op);\n+  } else {\n+    auto op = Op<real, IndexType, -1>(aInfo);\n+    THC_pointwiseApply2(state, b, index, op);", "path": "torch/lib/THC/THCTensorIndex.cu", "position": null, "original_position": 39, "commit_id": "ed2c3dd9291070d3a54260f90666587c129faa32", "original_commit_id": "51b1a7b14980b70e24c5cc88dbdc375558e9a055", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "You forgot the other 62 template instantiations :blush:", "created_at": "2017-10-24T17:11:47Z", "updated_at": "2018-11-23T15:35:39Z", "html_url": "https://github.com/pytorch/pytorch/pull/3263#discussion_r146629442", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/3263", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/146629442"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/3263#discussion_r146629442"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/3263"}}, "body_html": "<p>You forgot the other 62 template instantiations <g-emoji class=\"g-emoji\" alias=\"blush\" fallback-src=\"https://assets-cdn.github.com/images/icons/emoji/unicode/1f60a.png\">\ud83d\ude0a</g-emoji></p>", "body_text": "You forgot the other 62 template instantiations \ud83d\ude0a"}