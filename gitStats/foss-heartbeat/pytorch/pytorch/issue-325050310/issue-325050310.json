{"url": "https://api.github.com/repos/pytorch/pytorch/issues/7743", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/7743/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/7743/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/7743/events", "html_url": "https://github.com/pytorch/pytorch/issues/7743", "id": 325050310, "node_id": "MDU6SXNzdWUzMjUwNTAzMTA=", "number": 7743, "title": "[pytorch] [feature request] Flatten convenience method", "user": {"login": "vadimkantorov", "id": 1041752, "node_id": "MDQ6VXNlcjEwNDE3NTI=", "avatar_url": "https://avatars0.githubusercontent.com/u/1041752?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vadimkantorov", "html_url": "https://github.com/vadimkantorov", "followers_url": "https://api.github.com/users/vadimkantorov/followers", "following_url": "https://api.github.com/users/vadimkantorov/following{/other_user}", "gists_url": "https://api.github.com/users/vadimkantorov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vadimkantorov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vadimkantorov/subscriptions", "organizations_url": "https://api.github.com/users/vadimkantorov/orgs", "repos_url": "https://api.github.com/users/vadimkantorov/repos", "events_url": "https://api.github.com/users/vadimkantorov/events{/privacy}", "received_events_url": "https://api.github.com/users/vadimkantorov/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 443484050, "node_id": "MDU6TGFiZWw0NDM0ODQwNTA=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/medium%20priority", "name": "medium priority", "color": "fbca04", "default": false}, {"id": 443483881, "node_id": "MDU6TGFiZWw0NDM0ODM4ODE=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/todo", "name": "todo", "color": "c2e0c6", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "li-roy", "id": 8813817, "node_id": "MDQ6VXNlcjg4MTM4MTc=", "avatar_url": "https://avatars0.githubusercontent.com/u/8813817?v=4", "gravatar_id": "", "url": "https://api.github.com/users/li-roy", "html_url": "https://github.com/li-roy", "followers_url": "https://api.github.com/users/li-roy/followers", "following_url": "https://api.github.com/users/li-roy/following{/other_user}", "gists_url": "https://api.github.com/users/li-roy/gists{/gist_id}", "starred_url": "https://api.github.com/users/li-roy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/li-roy/subscriptions", "organizations_url": "https://api.github.com/users/li-roy/orgs", "repos_url": "https://api.github.com/users/li-roy/repos", "events_url": "https://api.github.com/users/li-roy/events{/privacy}", "received_events_url": "https://api.github.com/users/li-roy/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "li-roy", "id": 8813817, "node_id": "MDQ6VXNlcjg4MTM4MTc=", "avatar_url": "https://avatars0.githubusercontent.com/u/8813817?v=4", "gravatar_id": "", "url": "https://api.github.com/users/li-roy", "html_url": "https://github.com/li-roy", "followers_url": "https://api.github.com/users/li-roy/followers", "following_url": "https://api.github.com/users/li-roy/following{/other_user}", "gists_url": "https://api.github.com/users/li-roy/gists{/gist_id}", "starred_url": "https://api.github.com/users/li-roy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/li-roy/subscriptions", "organizations_url": "https://api.github.com/users/li-roy/orgs", "repos_url": "https://api.github.com/users/li-roy/repos", "events_url": "https://api.github.com/users/li-roy/events{/privacy}", "received_events_url": "https://api.github.com/users/li-roy/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 3, "created_at": "2018-05-21T20:34:52Z", "updated_at": "2018-06-20T16:53:07Z", "closed_at": "2018-06-20T16:53:07Z", "author_association": "NONE", "body_html": "<p>Minor suggestion (trivial to implement in user code, but having it in the library would improve code brevity). The purpose is to flatten specific trailing dimensions by passing negative dimension index.</p>\n<p>Can be useful for aggregating across multiple trailing dimensions, before mean/max etc get multiple dimensions support.</p>\n<p>Exists in numpy/tensorflow/onnx, but semantics there doesn't allow flattening only specific dimensions.</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">flatten</span>(<span class=\"pl-smi\">x</span>, <span class=\"pl-smi\">dim</span>):\n    <span class=\"pl-k\">return</span> x.view(x.size()[:dim] <span class=\"pl-k\">+</span> (<span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>, ))\n\nflatten(torch.rand(<span class=\"pl-c1\">2</span>,<span class=\"pl-c1\">3</span>,<span class=\"pl-c1\">4</span>,<span class=\"pl-c1\">5</span>,<span class=\"pl-c1\">6</span>), <span class=\"pl-v\">dim</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">-</span><span class=\"pl-c1\">2</span>).shape\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> (2, 3, 4, 30)</span></pre></div>", "body_text": "Minor suggestion (trivial to implement in user code, but having it in the library would improve code brevity). The purpose is to flatten specific trailing dimensions by passing negative dimension index.\nCan be useful for aggregating across multiple trailing dimensions, before mean/max etc get multiple dimensions support.\nExists in numpy/tensorflow/onnx, but semantics there doesn't allow flattening only specific dimensions.\ndef flatten(x, dim):\n    return x.view(x.size()[:dim] + (-1, ))\n\nflatten(torch.rand(2,3,4,5,6), dim = -2).shape\n# (2, 3, 4, 30)", "body": "Minor suggestion (trivial to implement in user code, but having it in the library would improve code brevity). The purpose is to flatten specific trailing dimensions by passing negative dimension index.\r\n\r\nCan be useful for aggregating across multiple trailing dimensions, before mean/max etc get multiple dimensions support.\r\n\r\nExists in numpy/tensorflow/onnx, but semantics there doesn't allow flattening only specific dimensions.\r\n\r\n```python\r\ndef flatten(x, dim):\r\n    return x.view(x.size()[:dim] + (-1, ))\r\n\r\nflatten(torch.rand(2,3,4,5,6), dim = -2).shape\r\n# (2, 3, 4, 30)\r\n```"}