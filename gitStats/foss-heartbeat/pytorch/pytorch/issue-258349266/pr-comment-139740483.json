{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/139740483", "pull_request_review_id": 63715856, "id": 139740483, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzOTc0MDQ4Mw==", "diff_hunk": "@@ -69,20 +78,59 @@ void THTensor_(copyTranspose)(THTensor *tensor, THTensor *src) {\n void THTensor_(copy)(THTensor *tensor, THTensor *src)\n {\n   if (tensor == src) return;\n-  if (THTensor_(isContiguous)(tensor) && THTensor_(isContiguous)(src) && THTensor_(nElement)(tensor) == THTensor_(nElement)(src)) {\n-    real *sp = THTensor_(data)(src);\n-    real *rp = THTensor_(data)(tensor);\n-    ptrdiff_t sz = THTensor_(nElement)(tensor);\n+  ptrdiff_t tensorSize = THTensor_(nElement)(tensor);\n+  ptrdiff_t srcSize = THTensor_(nElement)(src);\n+  int tensorContig = THTensor_(isContiguous)(tensor);\n+  int srcContig = THTensor_(isContiguous)(src);\n+\n+  int serial_path = 0;\n+  int inOMP = omp_in_parallel();", "path": "torch/lib/TH/generic/THTensorCopy.c", "position": null, "original_position": 45, "commit_id": "1ccad046aab11cd78eab647a18fa3713bb9cfd6f", "original_commit_id": "d04868fc4aa3f0ff2530830c9ce3356b67b58318", "user": {"login": "MlWoo", "id": 20226293, "node_id": "MDQ6VXNlcjIwMjI2Mjkz", "avatar_url": "https://avatars2.githubusercontent.com/u/20226293?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MlWoo", "html_url": "https://github.com/MlWoo", "followers_url": "https://api.github.com/users/MlWoo/followers", "following_url": "https://api.github.com/users/MlWoo/following{/other_user}", "gists_url": "https://api.github.com/users/MlWoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/MlWoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MlWoo/subscriptions", "organizations_url": "https://api.github.com/users/MlWoo/orgs", "repos_url": "https://api.github.com/users/MlWoo/repos", "events_url": "https://api.github.com/users/MlWoo/events{/privacy}", "received_events_url": "https://api.github.com/users/MlWoo/received_events", "type": "User", "site_admin": false}, "body": "#ifdef _OPENMP is a compiling macro.  It is used to check the machine support Openmp or not when compiling the code.  omp_in_parallel  is check the code is within openmp region when the code executes. ", "created_at": "2017-09-19T16:09:16Z", "updated_at": "2018-11-23T15:34:39Z", "html_url": "https://github.com/pytorch/pytorch/pull/2764#discussion_r139740483", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/2764", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/139740483"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/2764#discussion_r139740483"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/2764"}}, "body_html": "<p>#ifdef _OPENMP is a compiling macro.  It is used to check the machine support Openmp or not when compiling the code.  omp_in_parallel  is check the code is within openmp region when the code executes.</p>", "body_text": "#ifdef _OPENMP is a compiling macro.  It is used to check the machine support Openmp or not when compiling the code.  omp_in_parallel  is check the code is within openmp region when the code executes.", "in_reply_to_id": 139729339}