{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/207654714", "pull_request_review_id": 143319245, "id": 207654714, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzY1NDcxNA==", "diff_hunk": "@@ -1827,8 +1827,22 @@ def multilabel_soft_margin_loss(input, target, weight=None, size_average=None,\n     \"\"\"\n     if size_average is not None or reduce is not None:\n         reduction = _Reduction.legacy_get_string(size_average, reduce)\n-    input = torch.sigmoid(input)\n-    return binary_cross_entropy(input, target, weight, None, None, reduction)\n+\n+    loss = -(target * logsigmoid(input) + (1 - target) * logsigmoid(-input))\n+\n+    if weight is not None:\n+        loss = loss * weight\n+\n+    loss = loss.sum(dim=1)  # only return N loss values\n+\n+    if reduction == 'none':\n+        return loss", "path": "torch/nn/functional.py", "position": null, "original_position": 15, "commit_id": "5ae40c448843e915f45bb4a7b649718dbb555527", "original_commit_id": "f8fb4118235f697989cdc9cb436ff364937225da", "user": {"login": "li-roy", "id": 8813817, "node_id": "MDQ6VXNlcjg4MTM4MTc=", "avatar_url": "https://avatars0.githubusercontent.com/u/8813817?v=4", "gravatar_id": "", "url": "https://api.github.com/users/li-roy", "html_url": "https://github.com/li-roy", "followers_url": "https://api.github.com/users/li-roy/followers", "following_url": "https://api.github.com/users/li-roy/following{/other_user}", "gists_url": "https://api.github.com/users/li-roy/gists{/gist_id}", "starred_url": "https://api.github.com/users/li-roy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/li-roy/subscriptions", "organizations_url": "https://api.github.com/users/li-roy/orgs", "repos_url": "https://api.github.com/users/li-roy/repos", "events_url": "https://api.github.com/users/li-roy/events{/privacy}", "received_events_url": "https://api.github.com/users/li-roy/received_events", "type": "User", "site_admin": false}, "body": "I'm still a bit confused by the behavior we have here. It looks like if reduction is none, we're returning a tensor of N losses, and each individual loss is the sum of the losses for each class of that sample. However, when reduction is elementwise_mean or sum, it seems that you're now averaging the losses for each class, rather than summing them. We should choose one of these and stick to it, I believe summing is the legacy behavior.", "created_at": "2018-08-03T20:11:26Z", "updated_at": "2018-11-23T15:48:43Z", "html_url": "https://github.com/pytorch/pytorch/pull/9965#discussion_r207654714", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/9965", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/207654714"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/9965#discussion_r207654714"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/9965"}}, "body_html": "<p>I'm still a bit confused by the behavior we have here. It looks like if reduction is none, we're returning a tensor of N losses, and each individual loss is the sum of the losses for each class of that sample. However, when reduction is elementwise_mean or sum, it seems that you're now averaging the losses for each class, rather than summing them. We should choose one of these and stick to it, I believe summing is the legacy behavior.</p>", "body_text": "I'm still a bit confused by the behavior we have here. It looks like if reduction is none, we're returning a tensor of N losses, and each individual loss is the sum of the losses for each class of that sample. However, when reduction is elementwise_mean or sum, it seems that you're now averaging the losses for each class, rather than summing them. We should choose one of these and stick to it, I believe summing is the legacy behavior."}