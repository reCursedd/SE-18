{"url": "https://api.github.com/repos/pytorch/pytorch/issues/7660", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/7660/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/7660/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/7660/events", "html_url": "https://github.com/pytorch/pytorch/issues/7660", "id": 324209423, "node_id": "MDU6SXNzdWUzMjQyMDk0MjM=", "number": 7660, "title": "Canonicalize aten operators in IR", "user": {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 679953983, "node_id": "MDU6TGFiZWw2Nzk5NTM5ODM=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/jit", "name": "jit", "color": "c5def5", "default": false}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-05-17T22:34:37Z", "updated_at": "2018-05-17T22:34:37Z", "closed_at": null, "author_association": "CONTRIBUTOR", "body_html": "<p>Currently many operators in the aten IR have multiple forms.</p>\n<p>Any operator that takes a non-tensor argument (e.g. IntList or int64_t) will have two forms: one with the non-tensor arguments encoded as tensor inputs and one with the arguments as attributes on the graph.</p>\n<p>This makes every pass that we write in the IR harder because it needs to handle both cases.</p>\n<p>Proposed solution:</p>\n<ol>\n<li>\n<p>Canonicalize on the tensor input format. Graphs are optimized in this format. This format is more general because inputs are not required to be constants.</p>\n</li>\n<li>\n<p>expose the <code>at::optional&lt;T&gt; constant_as&lt;T&gt;(Value*)</code> function in compiler for general usage. Optimizations then check for const-ness of these inputs to work.</p>\n</li>\n<li>\n<p>Before interpretation, lower back to the attribute-only format when thing are constants. <code>compiler.cpp</code> already includes this function, it just has to be written into a pass.</p>\n</li>\n</ol>", "body_text": "Currently many operators in the aten IR have multiple forms.\nAny operator that takes a non-tensor argument (e.g. IntList or int64_t) will have two forms: one with the non-tensor arguments encoded as tensor inputs and one with the arguments as attributes on the graph.\nThis makes every pass that we write in the IR harder because it needs to handle both cases.\nProposed solution:\n\n\nCanonicalize on the tensor input format. Graphs are optimized in this format. This format is more general because inputs are not required to be constants.\n\n\nexpose the at::optional<T> constant_as<T>(Value*) function in compiler for general usage. Optimizations then check for const-ness of these inputs to work.\n\n\nBefore interpretation, lower back to the attribute-only format when thing are constants. compiler.cpp already includes this function, it just has to be written into a pass.", "body": "Currently many operators in the aten IR have multiple forms.\r\n\r\nAny operator that takes a non-tensor argument (e.g. IntList or int64_t) will have two forms: one with the non-tensor arguments encoded as tensor inputs and one with the arguments as attributes on the graph.\r\n\r\nThis makes every pass that we write in the IR harder because it needs to handle both cases.\r\n\r\nProposed solution:\r\n\r\n1. Canonicalize on the tensor input format. Graphs are optimized in this format. This format is more general because inputs are not required to be constants.\r\n\r\n2. expose the `at::optional<T> constant_as<T>(Value*)` function in compiler for general usage. Optimizations then check for const-ness of these inputs to work.\r\n\r\n3. Before interpretation, lower back to the attribute-only format when thing are constants. `compiler.cpp` already includes this function, it just has to be written into a pass."}