{"url": "https://api.github.com/repos/pytorch/pytorch/issues/7884", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/7884/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/7884/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/7884/events", "html_url": "https://github.com/pytorch/pytorch/issues/7884", "id": 326821851, "node_id": "MDU6SXNzdWUzMjY4MjE4NTE=", "number": 7884, "title": "[pytorch] A bug for torch.nn.AdaptiveMaxPool2d", "user": {"login": "michuanhaohao", "id": 23547900, "node_id": "MDQ6VXNlcjIzNTQ3OTAw", "avatar_url": "https://avatars0.githubusercontent.com/u/23547900?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michuanhaohao", "html_url": "https://github.com/michuanhaohao", "followers_url": "https://api.github.com/users/michuanhaohao/followers", "following_url": "https://api.github.com/users/michuanhaohao/following{/other_user}", "gists_url": "https://api.github.com/users/michuanhaohao/gists{/gist_id}", "starred_url": "https://api.github.com/users/michuanhaohao/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michuanhaohao/subscriptions", "organizations_url": "https://api.github.com/users/michuanhaohao/orgs", "repos_url": "https://api.github.com/users/michuanhaohao/repos", "events_url": "https://api.github.com/users/michuanhaohao/events{/privacy}", "received_events_url": "https://api.github.com/users/michuanhaohao/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "ailzhang", "id": 5248122, "node_id": "MDQ6VXNlcjUyNDgxMjI=", "avatar_url": "https://avatars2.githubusercontent.com/u/5248122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ailzhang", "html_url": "https://github.com/ailzhang", "followers_url": "https://api.github.com/users/ailzhang/followers", "following_url": "https://api.github.com/users/ailzhang/following{/other_user}", "gists_url": "https://api.github.com/users/ailzhang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ailzhang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ailzhang/subscriptions", "organizations_url": "https://api.github.com/users/ailzhang/orgs", "repos_url": "https://api.github.com/users/ailzhang/repos", "events_url": "https://api.github.com/users/ailzhang/events{/privacy}", "received_events_url": "https://api.github.com/users/ailzhang/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "ailzhang", "id": 5248122, "node_id": "MDQ6VXNlcjUyNDgxMjI=", "avatar_url": "https://avatars2.githubusercontent.com/u/5248122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ailzhang", "html_url": "https://github.com/ailzhang", "followers_url": "https://api.github.com/users/ailzhang/followers", "following_url": "https://api.github.com/users/ailzhang/following{/other_user}", "gists_url": "https://api.github.com/users/ailzhang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ailzhang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ailzhang/subscriptions", "organizations_url": "https://api.github.com/users/ailzhang/orgs", "repos_url": "https://api.github.com/users/ailzhang/repos", "events_url": "https://api.github.com/users/ailzhang/events{/privacy}", "received_events_url": "https://api.github.com/users/ailzhang/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2018-05-27T14:41:46Z", "updated_at": "2018-06-22T17:29:16Z", "closed_at": "2018-06-22T17:29:16Z", "author_association": "NONE", "body_html": "<h2>Issue description</h2>\n<p>I run the example code of pytorch, but there was a bug.</p>\n<pre><code>&gt;&gt;&gt; # target output size of 10x7\n&gt;&gt;&gt; m = nn.AdaptiveMaxPool2d((None, 7))\n&gt;&gt;&gt; input = torch.randn(1, 64, 10, 9)\n&gt;&gt;&gt; output = m(input)\n</code></pre>\n<p>When i used \"nn.AdaptiveMaxPool2d((10, 7))\", it was OK.</p>\n<h2>Code example</h2>\n<pre><code>In [17]: input = torch.randn(1, 64, 10, 9)\n\nIn [18]: m = nn.AdaptiveMaxPool2d((None, 7))\n\nIn [19]: output = m(input)   \n</code></pre>\n<h2>System Info</h2>\n<pre><code>---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n&lt;ipython-input-19-0b450ddad2f3&gt; in &lt;module&gt;()\n----&gt; 1 output = m(input)\n\n/usr/local/lib/python2.7/dist-packages/torch/nn/modules/module.pyc in __call__(self, *input, **kwargs)\n    489             result = self._slow_forward(*input, **kwargs)\n    490         else:\n--&gt; 491             result = self.forward(*input, **kwargs)\n    492         for hook in self._forward_hooks.values():\n    493             hook_result = hook(self, input, result)\n\n/usr/local/lib/python2.7/dist-packages/torch/nn/modules/pooling.pyc in forward(self, input)\n    848 \n    849     def forward(self, input):\n--&gt; 850         return F.adaptive_max_pool2d(input, self.output_size, self.return_indices)\n    851 \n    852 \n\n/usr/local/lib/python2.7/dist-packages/torch/nn/functional.pyc in adaptive_max_pool2d(input, output_size, return_indices)\n    489         return_indices: whether to return pooling indices. Default: ``False``\n    490     \"\"\"\n--&gt; 491     ret = torch._C._nn.adaptive_max_pool2d(input, output_size)\n    492     return ret if return_indices else ret[0]\n    493 \n\nTypeError: an integer is required\n</code></pre>\n<h2>Code example</h2>\n<pre><code>In [20]: input = torch.randn(1, 64, 10, 9)\n\nIn [21]: m = nn.AdaptiveMaxPool2d((10, 7))\n\nIn [22]: output = m(input)\n\nIn [23]: output.size()\n</code></pre>\n<h2>System Info</h2>\n<p><code>Out[23]: torch.Size([1, 64, 10, 7])</code></p>", "body_text": "Issue description\nI run the example code of pytorch, but there was a bug.\n>>> # target output size of 10x7\n>>> m = nn.AdaptiveMaxPool2d((None, 7))\n>>> input = torch.randn(1, 64, 10, 9)\n>>> output = m(input)\n\nWhen i used \"nn.AdaptiveMaxPool2d((10, 7))\", it was OK.\nCode example\nIn [17]: input = torch.randn(1, 64, 10, 9)\n\nIn [18]: m = nn.AdaptiveMaxPool2d((None, 7))\n\nIn [19]: output = m(input)   \n\nSystem Info\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n<ipython-input-19-0b450ddad2f3> in <module>()\n----> 1 output = m(input)\n\n/usr/local/lib/python2.7/dist-packages/torch/nn/modules/module.pyc in __call__(self, *input, **kwargs)\n    489             result = self._slow_forward(*input, **kwargs)\n    490         else:\n--> 491             result = self.forward(*input, **kwargs)\n    492         for hook in self._forward_hooks.values():\n    493             hook_result = hook(self, input, result)\n\n/usr/local/lib/python2.7/dist-packages/torch/nn/modules/pooling.pyc in forward(self, input)\n    848 \n    849     def forward(self, input):\n--> 850         return F.adaptive_max_pool2d(input, self.output_size, self.return_indices)\n    851 \n    852 \n\n/usr/local/lib/python2.7/dist-packages/torch/nn/functional.pyc in adaptive_max_pool2d(input, output_size, return_indices)\n    489         return_indices: whether to return pooling indices. Default: ``False``\n    490     \"\"\"\n--> 491     ret = torch._C._nn.adaptive_max_pool2d(input, output_size)\n    492     return ret if return_indices else ret[0]\n    493 \n\nTypeError: an integer is required\n\nCode example\nIn [20]: input = torch.randn(1, 64, 10, 9)\n\nIn [21]: m = nn.AdaptiveMaxPool2d((10, 7))\n\nIn [22]: output = m(input)\n\nIn [23]: output.size()\n\nSystem Info\nOut[23]: torch.Size([1, 64, 10, 7])", "body": "## Issue description\r\nI run the example code of pytorch, but there was a bug.\r\n```\r\n>>> # target output size of 10x7\r\n>>> m = nn.AdaptiveMaxPool2d((None, 7))\r\n>>> input = torch.randn(1, 64, 10, 9)\r\n>>> output = m(input)\r\n```\r\nWhen i used \"nn.AdaptiveMaxPool2d((10, 7))\", it was OK.\r\n\r\n## Code example\r\n\r\n```\r\nIn [17]: input = torch.randn(1, 64, 10, 9)\r\n\r\nIn [18]: m = nn.AdaptiveMaxPool2d((None, 7))\r\n\r\nIn [19]: output = m(input)   \r\n```\r\n\r\n## System Info\r\n```\r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\n<ipython-input-19-0b450ddad2f3> in <module>()\r\n----> 1 output = m(input)\r\n\r\n/usr/local/lib/python2.7/dist-packages/torch/nn/modules/module.pyc in __call__(self, *input, **kwargs)\r\n    489             result = self._slow_forward(*input, **kwargs)\r\n    490         else:\r\n--> 491             result = self.forward(*input, **kwargs)\r\n    492         for hook in self._forward_hooks.values():\r\n    493             hook_result = hook(self, input, result)\r\n\r\n/usr/local/lib/python2.7/dist-packages/torch/nn/modules/pooling.pyc in forward(self, input)\r\n    848 \r\n    849     def forward(self, input):\r\n--> 850         return F.adaptive_max_pool2d(input, self.output_size, self.return_indices)\r\n    851 \r\n    852 \r\n\r\n/usr/local/lib/python2.7/dist-packages/torch/nn/functional.pyc in adaptive_max_pool2d(input, output_size, return_indices)\r\n    489         return_indices: whether to return pooling indices. Default: ``False``\r\n    490     \"\"\"\r\n--> 491     ret = torch._C._nn.adaptive_max_pool2d(input, output_size)\r\n    492     return ret if return_indices else ret[0]\r\n    493 \r\n\r\nTypeError: an integer is required\r\n```\r\n\r\n## Code example\r\n\r\n```\r\nIn [20]: input = torch.randn(1, 64, 10, 9)\r\n\r\nIn [21]: m = nn.AdaptiveMaxPool2d((10, 7))\r\n\r\nIn [22]: output = m(input)\r\n\r\nIn [23]: output.size()\r\n```\r\n\r\n## System Info\r\n\r\n`Out[23]: torch.Size([1, 64, 10, 7])`\r\n\r\n\r\n\r\n\r\n"}