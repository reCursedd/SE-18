{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/205897662", "pull_request_review_id": 140924889, "id": 205897662, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTg5NzY2Mg==", "diff_hunk": "@@ -0,0 +1,284 @@\n+#pragma once\n+\n+#include <cstdio>\n+#include <cstring>\n+#include <cerrno>\n+\n+namespace torch { namespace jit {\n+\n+// This file defines an on-disk serialization format to be used for PyTorch\n+// model serialization. All integer values are serialized as little-endian.\n+// Everything in this format is aligned to 64-byte boundaries to allow for direct\n+// memory mapping and use in, for example, AVX512 instructions.\n+// The format is as follows:\n+//\n+// -- File header --\n+// [8 bytes] Magic number - little endian integer that spells 'PYTORCH1' in ASCII\n+// [8 bytes] Version number - The version of this file format that this file is in.\n+//                            this allows us to revise and extend this format\n+// [56 bytes] Padding/reserved\n+//\n+// After the file header reside N records of the format\n+// [8 bytes] Tag - this is a tag that identifies the type of this record. The\n+//                 values are defined in the RecordTags enum below.\n+// [8 bytes] size - Size in bytes of the payload of this record\n+// [56 bytes] Pad/reserved - This space pads out the payload to a 64-byte alignment.\n+// [size bytes] Payload - The actual raw data for the object serialized in this record\n+// [size - (size % 64) bytes] Pad/reserved - pad out this record so the next\n+//                                                one is aligned to 64 bytes\n+//\n+// Following those records is a special footer:\n+// [8 bytes] Tag - This tag field should contain the value for RecordTags::FOOTER\n+//                 to correctly identify the footer\n+// [8 bytes] Offset of last record - The last record in this format is used\n+//                                   as an index into the rest of the file, so\n+//                                   a reader can use this offset to seek to\n+//                                   the last record and read the index.\n+// [56 bytes] Pad/reserved - Pad out the footer s.t. the whole file's size is a\n+//                           multiple of 64 bytes.\n+//\n+//\n+// When developing this format we want to pay particular attention to the\n+// following use cases:\n+//\n+// -- Reading --\n+// 1) Reading with full random access\n+//   a) Reading with file api's such as fread()\n+//   b) mmaping the file and jumping around the mapped region\n+// 2) Reading with 1-pass sequential access\n+//      -> A reader will need to build up a data structure of parsed structures\n+//         as it reads\n+//\n+// -- Writing --\n+// 1) Writing with full random access\n+// 2) Writing with 1-pass sequential access\n+//      -> We must take care not to require updating values that have already\n+//         been written. We place the variable-length index at the end and do\n+//         not put any indicies into the header to fulfill this constraint.\n+\n+namespace {\n+  struct RecordTags {\n+    enum {\n+      STORAGE = 1,\n+      FOOTER = 2,\n+    };\n+  };\n+\n+  // Common constants\n+  static constexpr uint64_t kFileMagicNumber = 0x314843524f545950L; // PYTORCH1\n+  static constexpr uint64_t kFieldAlignment = 64L; // 64 byte alignment supports up to AVX512 for mmap\n+\n+  // Reader-specific constants\n+  static constexpr uint64_t kMaxSupportedFileFormatVersion = 0x1L;\n+\n+  // Writer-specific constants\n+  static constexpr uint64_t kFileFormatVersion = 0x1L;\n+  static constexpr uint8_t kPadValue = 0xEF;\n+\n+  void wrapPErrorAndThrow(const std::string& msg) {\n+    std::ostringstream oss;\n+    oss << msg << \" : \" << strerror(errno);\n+    throw std::runtime_error(oss.str());\n+  }\n+}  // namespace\n+\n+class PyTorchFileReader {", "path": "torch/csrc/jit/serialization.h", "position": 85, "original_position": 85, "commit_id": "2350ec0166f9a3d91da36ea069a67df3cb2d32fb", "original_commit_id": "2350ec0166f9a3d91da36ea069a67df3cb2d32fb", "user": {"login": "dzhulgakov", "id": 17890620, "node_id": "MDQ6VXNlcjE3ODkwNjIw", "avatar_url": "https://avatars2.githubusercontent.com/u/17890620?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dzhulgakov", "html_url": "https://github.com/dzhulgakov", "followers_url": "https://api.github.com/users/dzhulgakov/followers", "following_url": "https://api.github.com/users/dzhulgakov/following{/other_user}", "gists_url": "https://api.github.com/users/dzhulgakov/gists{/gist_id}", "starred_url": "https://api.github.com/users/dzhulgakov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dzhulgakov/subscriptions", "organizations_url": "https://api.github.com/users/dzhulgakov/orgs", "repos_url": "https://api.github.com/users/dzhulgakov/repos", "events_url": "https://api.github.com/users/dzhulgakov/events{/privacy}", "received_events_url": "https://api.github.com/users/dzhulgakov/received_events", "type": "User", "site_admin": false}, "body": "shall we also expose an API for sequential record reading? or is it not useful at all?", "created_at": "2018-07-27T20:57:48Z", "updated_at": "2018-11-23T15:48:20Z", "html_url": "https://github.com/pytorch/pytorch/pull/9900#discussion_r205897662", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/9900", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/205897662"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/9900#discussion_r205897662"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/9900"}}, "body_html": "<p>shall we also expose an API for sequential record reading? or is it not useful at all?</p>", "body_text": "shall we also expose an API for sequential record reading? or is it not useful at all?"}