{"url": "https://api.github.com/repos/pytorch/pytorch/issues/4102", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/4102/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/4102/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/4102/events", "html_url": "https://github.com/pytorch/pytorch/issues/4102", "id": 280784791, "node_id": "MDU6SXNzdWUyODA3ODQ3OTE=", "number": 4102, "title": "Make the generator tools data model more explicit", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-12-10T05:41:18Z", "updated_at": "2017-12-10T05:41:18Z", "closed_at": null, "author_association": "CONTRIBUTOR", "body_html": "<p>Right now, data is passed around in <code>gen.py</code> and similar scripts purely as JSON/YAML, with no schema well-defined at any point. This is bad for developers, who need to essentially reread all of the generator scripts to figure out how any given attribute is being used. Let's make it more explicit.  I propose a two pronged approach:</p>\n<ul>\n<li>\n<p>Named tuples over dictionaries. By pre-declaring the data structures which we fill and pass around, we have an obvious point to hang documentation and format specification</p>\n</li>\n<li>\n<p>MyPy for tools only. By adding types, we can machine-check that our structure documentation is up-to-date. MyPy supports a comment syntax which is Python 2 compatible, and is completely optional so non-developers can easily run without any extra installation.</p>\n</li>\n</ul>", "body_text": "Right now, data is passed around in gen.py and similar scripts purely as JSON/YAML, with no schema well-defined at any point. This is bad for developers, who need to essentially reread all of the generator scripts to figure out how any given attribute is being used. Let's make it more explicit.  I propose a two pronged approach:\n\n\nNamed tuples over dictionaries. By pre-declaring the data structures which we fill and pass around, we have an obvious point to hang documentation and format specification\n\n\nMyPy for tools only. By adding types, we can machine-check that our structure documentation is up-to-date. MyPy supports a comment syntax which is Python 2 compatible, and is completely optional so non-developers can easily run without any extra installation.", "body": "Right now, data is passed around in `gen.py` and similar scripts purely as JSON/YAML, with no schema well-defined at any point. This is bad for developers, who need to essentially reread all of the generator scripts to figure out how any given attribute is being used. Let's make it more explicit.  I propose a two pronged approach:\r\n\r\n* Named tuples over dictionaries. By pre-declaring the data structures which we fill and pass around, we have an obvious point to hang documentation and format specification\r\n\r\n* MyPy for tools only. By adding types, we can machine-check that our structure documentation is up-to-date. MyPy supports a comment syntax which is Python 2 compatible, and is completely optional so non-developers can easily run without any extra installation."}