{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/365690996", "html_url": "https://github.com/pytorch/pytorch/issues/5169#issuecomment-365690996", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/5169", "id": 365690996, "node_id": "MDEyOklzc3VlQ29tbWVudDM2NTY5MDk5Ng==", "user": {"login": "colesbury", "id": 655866, "node_id": "MDQ6VXNlcjY1NTg2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/655866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colesbury", "html_url": "https://github.com/colesbury", "followers_url": "https://api.github.com/users/colesbury/followers", "following_url": "https://api.github.com/users/colesbury/following{/other_user}", "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions", "organizations_url": "https://api.github.com/users/colesbury/orgs", "repos_url": "https://api.github.com/users/colesbury/repos", "events_url": "https://api.github.com/users/colesbury/events{/privacy}", "received_events_url": "https://api.github.com/users/colesbury/received_events", "type": "User", "site_admin": false}, "created_at": "2018-02-14T17:56:03Z", "updated_at": "2018-02-14T17:56:03Z", "author_association": "MEMBER", "body_html": "<p>The issue is due to a combination of a 3d x 2d <code>matmul</code> (from the nn.Linear) with the behavior for 3384. 3384 added specific behavior for in-place operations on views.  The 3d x 2d case of matmul ends with a viewing operation:</p>\n<p><div class=\"border rounded-1 my-2\">\n  <div class=\"f6 px-3 py-2 lh-condensed border-bottom bg-gray-light\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/pytorch/pytorch/blob/bf603299b6a61d05744dbee8a4ee642bbac2979f/aten/src/ATen/native/LinearAlgebra.cpp#L197\">pytorch/aten/src/ATen/native/LinearAlgebra.cpp</a>\n    </p>\n    <p class=\"mb-0 text-gray-light\">\n         Line 197\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/pytorch/pytorch/commit/bf603299b6a61d05744dbee8a4ee642bbac2979f\">bf60329</a>\n    </p>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L197\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"197\"></td>\n          <td id=\"LC197\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-k\">auto</span> output = t1.<span class=\"pl-c1\">mm</span>(t2).<span class=\"pl-c1\">view</span>(output_size); </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n</p>\n<p>After the matmul, <code>linear</code> performs an in-place addition:</p>\n<p><div class=\"border rounded-1 my-2\">\n  <div class=\"f6 px-3 py-2 lh-condensed border-bottom bg-gray-light\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/pytorch/pytorch/blob/5bcacb21d512c359a2a4e7f19d020b68b3103284/torch/nn/functional.py#L903-L906\">pytorch/torch/nn/functional.py</a>\n    </p>\n    <p class=\"mb-0 text-gray-light\">\n        Lines 903 to 906\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/pytorch/pytorch/commit/5bcacb21d512c359a2a4e7f19d020b68b3103284\">5bcacb2</a>\n    </p>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L903\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"903\"></td>\n          <td id=\"LC903\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> output <span class=\"pl-k\">=</span> <span class=\"pl-c1\">input</span>.matmul(weight.t()) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L904\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"904\"></td>\n          <td id=\"LC904\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-k\">if</span> bias <span class=\"pl-k\">is</span> <span class=\"pl-k\">not</span> <span class=\"pl-c1\">None</span>: </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L905\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"905\"></td>\n          <td id=\"LC905\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     output <span class=\"pl-k\">+=</span> bias </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L906\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"906\"></td>\n          <td id=\"LC906\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-k\">return</span> output </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n</p>\n<p>The in-place operation on the view triggers the <code>CopySlices</code> backward.</p>\n<p>There are two ways we can fix this:</p>\n<ol>\n<li>Try to avoid copying in <code>CopySlices</code> and <code>AsStridedBackward</code> in favor of viewing operations when possible. This is a bit tricky, but doable at least for some common cases.</li>\n<li>Specify an explicit derivative for matmul instead of differentiating the individual operations. This would avoid treating the output as a view of another Tensor.</li>\n</ol>\n<p>(We can also do both)</p>", "body_text": "The issue is due to a combination of a 3d x 2d matmul (from the nn.Linear) with the behavior for 3384. 3384 added specific behavior for in-place operations on views.  The 3d x 2d case of matmul ends with a viewing operation:\n\n  \n    \n      pytorch/aten/src/ATen/native/LinearAlgebra.cpp\n    \n    \n         Line 197\n      in\n      bf60329\n    \n    \n    \n    \n\n        \n          \n           auto output = t1.mm(t2).view(output_size); \n        \n    \n  \n\n\nAfter the matmul, linear performs an in-place addition:\n\n  \n    \n      pytorch/torch/nn/functional.py\n    \n    \n        Lines 903 to 906\n      in\n      5bcacb2\n    \n    \n    \n    \n\n        \n          \n           output = input.matmul(weight.t()) \n        \n\n        \n          \n           if bias is not None: \n        \n\n        \n          \n               output += bias \n        \n\n        \n          \n           return output \n        \n    \n  \n\n\nThe in-place operation on the view triggers the CopySlices backward.\nThere are two ways we can fix this:\n\nTry to avoid copying in CopySlices and AsStridedBackward in favor of viewing operations when possible. This is a bit tricky, but doable at least for some common cases.\nSpecify an explicit derivative for matmul instead of differentiating the individual operations. This would avoid treating the output as a view of another Tensor.\n\n(We can also do both)", "body": "The issue is due to a combination of a 3d x 2d `matmul` (from the nn.Linear) with the behavior for 3384. 3384 added specific behavior for in-place operations on views.  The 3d x 2d case of matmul ends with a viewing operation:\r\n\r\nhttps://github.com/pytorch/pytorch/blob/bf603299b6a61d05744dbee8a4ee642bbac2979f/aten/src/ATen/native/LinearAlgebra.cpp#L197\r\n\r\nAfter the matmul, `linear` performs an in-place addition:\r\n\r\nhttps://github.com/pytorch/pytorch/blob/5bcacb21d512c359a2a4e7f19d020b68b3103284/torch/nn/functional.py#L903-L906\r\n\r\nThe in-place operation on the view triggers the `CopySlices` backward.\r\n\r\nThere are two ways we can fix this:\r\n\r\n1) Try to avoid copying in `CopySlices` and `AsStridedBackward` in favor of viewing operations when possible. This is a bit tricky, but doable at least for some common cases.\r\n2) Specify an explicit derivative for matmul instead of differentiating the individual operations. This would avoid treating the output as a view of another Tensor.\r\n\r\n(We can also do both)"}