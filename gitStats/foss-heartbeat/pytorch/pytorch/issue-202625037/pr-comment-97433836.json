{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/97433836", "pull_request_review_id": 18043738, "id": 97433836, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk3NDMzODM2", "diff_hunk": "@@ -84,77 +84,139 @@ BenchmarkCache<cudnnConvolutionBwdDataAlgo_t> bwd_data_algos;\n BenchmarkCache<cudnnConvolutionBwdFilterAlgo_t> bwd_filter_algos;\n \n struct Workspace {\n-  void* data;\n-  THCState* state;\n-  Workspace(THCState* state, size_t size) : data(NULL), state(state) {\n+  Workspace(THCState* state, size_t size) : state(state), size(size), data(NULL) {\n     CUDA_CHECK(THCudaMalloc(state, &data, size));\n   }\n+  Workspace(const Workspace&) = delete;\n+  Workspace(Workspace&&) = default;\n   ~Workspace() {\n-    THCudaFree(state, data);\n+    if (data) {\n+      THCudaFree(state, data);\n+    }\n   }\n+\n+  THCState* state;\n+  size_t size;\n+  void* data;\n };\n \n-cudnnConvolutionFwdAlgo_t chooseForwardAlgorithm(\n-  cudnnHandle_t handle, const Convolution& conv, bool benchmark)\n-{\n-  cudnnConvolutionFwdAlgo_t algo;\n-  if (benchmark) {\n-    if (fwd_algos.find(conv.params, algo)) {\n-      return algo;\n-    }\n+template<typename algo_t>\n+struct algorithm_search {\n+};\n+\n+template<>\n+struct algorithm_search<cudnnConvolutionFwdAlgo_t> {\n+  static constexpr auto DEFAULT_ALGO = CUDNN_CONVOLUTION_FWD_ALGO_IMPLICIT_GEMM;\n+  static BenchmarkCache<cudnnConvolutionFwdAlgo_t>& cache() {\n+    return fwd_algos;\n+  }\n+\n+  static cudnnConvolutionFwdAlgoPerf_t findAlgorithm(cudnnHandle_t handle, const Convolution& conv) {\n     int algoCount;\n     cudnnConvolutionFwdAlgoPerf_t perfResults;\n     CHECK(cudnnFindConvolutionForwardAlgorithm(handle, conv.idesc.desc,\n         conv.wdesc.desc, conv.cdesc.desc, conv.odesc.desc, 1, &algoCount, &perfResults));\n-    fwd_algos.insert(conv.params, perfResults.algo);\n-    return perfResults.algo;\n+    return perfResults;\n   }\n-  cudnnConvolutionFwdPreference_t pref = CUDNN_CONVOLUTION_FWD_PREFER_FASTEST;\n-  CHECK(cudnnGetConvolutionForwardAlgorithm(handle, conv.idesc.desc,\n-      conv.wdesc.desc, conv.cdesc.desc, conv.odesc.desc, pref, 0, &algo));\n-  return algo;\n-}\n \n-cudnnConvolutionBwdDataAlgo_t chooseBackwardDataAlgorithm(\n-    cudnnHandle_t handle, const Convolution& conv, bool benchmark)\n-{\n-  cudnnConvolutionBwdDataAlgo_t algo;\n-  if (benchmark) {\n-    if (bwd_data_algos.find(conv.params, algo)) {\n-      return algo;\n-    }\n+  static void getAlgorithm(cudnnHandle_t handle, const Convolution& conv, cudnnConvolutionFwdAlgo_t* algo) {\n+    cudnnConvolutionFwdPreference_t pref = CUDNN_CONVOLUTION_FWD_PREFER_FASTEST;\n+    CHECK(cudnnGetConvolutionForwardAlgorithm(handle, conv.idesc.desc,\n+        conv.wdesc.desc, conv.cdesc.desc, conv.odesc.desc, pref, 0, algo));\n+  }\n+\n+  static void getWorkspaceSize(cudnnHandle_t handle, const Convolution& conv, cudnnConvolutionFwdAlgo_t algo, size_t* workspaceSize) {\n+    CHECK(cudnnGetConvolutionForwardWorkspaceSize(handle, conv.idesc.desc, conv.wdesc.desc,\n+        conv.cdesc.desc, conv.odesc.desc, algo, workspaceSize));\n+  }\n+};\n+\n+template<>\n+struct algorithm_search<cudnnConvolutionBwdDataAlgo_t> {\n+  static constexpr auto DEFAULT_ALGO = CUDNN_CONVOLUTION_BWD_DATA_ALGO_1;\n+  static BenchmarkCache<cudnnConvolutionBwdDataAlgo_t>& cache() {\n+    return bwd_data_algos;\n+  }\n+\n+  static cudnnConvolutionBwdDataAlgoPerf_t findAlgorithm(cudnnHandle_t handle, const Convolution& conv) {\n     int algoCount;\n     cudnnConvolutionBwdDataAlgoPerf_t perfResults;\n     CHECK(cudnnFindConvolutionBackwardDataAlgorithm(handle, conv.wdesc.desc,\n         conv.odesc.desc, conv.cdesc.desc, conv.idesc.desc, 1, &algoCount, &perfResults));\n-    bwd_data_algos.insert(conv.params, perfResults.algo);\n-    return perfResults.algo;\n+    return perfResults;\n   }\n-  cudnnConvolutionBwdDataPreference_t pref = CUDNN_CONVOLUTION_BWD_DATA_PREFER_FASTEST;\n-  CHECK(cudnnGetConvolutionBackwardDataAlgorithm(handle, conv.wdesc.desc,\n-      conv.odesc.desc, conv.cdesc.desc, conv.idesc.desc, pref, 0, &algo));\n-  return algo;\n-}\n \n-cudnnConvolutionBwdFilterAlgo_t chooseBackwardFilterAlgorithm(\n-    cudnnHandle_t handle, const Convolution& conv, bool benchmark)\n-{\n-  cudnnConvolutionBwdFilterAlgo_t algo;\n-  if (benchmark) {\n-    if (bwd_filter_algos.find(conv.params, algo)) {\n-      return algo;\n-    }\n+  static void getAlgorithm(cudnnHandle_t handle, const Convolution& conv, cudnnConvolutionBwdDataAlgo_t* algo) {\n+    CHECK(cudnnGetConvolutionBackwardDataAlgorithm(handle, conv.wdesc.desc,\n+        conv.odesc.desc, conv.cdesc.desc, conv.idesc.desc,\n+        CUDNN_CONVOLUTION_BWD_DATA_PREFER_FASTEST, 0, algo));\n+  }\n+\n+  static void getWorkspaceSize(cudnnHandle_t handle, const Convolution& conv, cudnnConvolutionBwdDataAlgo_t algo, size_t* workspaceSize) {\n+    CHECK(cudnnGetConvolutionBackwardDataWorkspaceSize(handle, conv.wdesc.desc,\n+        conv.odesc.desc, conv.cdesc.desc, conv.idesc.desc, algo,\n+        workspaceSize));\n+  }\n+};\n+\n+template<>\n+struct algorithm_search<cudnnConvolutionBwdFilterAlgo_t> {\n+  static constexpr auto DEFAULT_ALGO = CUDNN_CONVOLUTION_BWD_FILTER_ALGO_1;\n+  static BenchmarkCache<cudnnConvolutionBwdFilterAlgo_t>& cache() {\n+    return bwd_filter_algos;\n+  }\n+\n+  static cudnnConvolutionBwdFilterAlgoPerf_t findAlgorithm(cudnnHandle_t handle, const Convolution& conv) {\n     int algoCount;\n     cudnnConvolutionBwdFilterAlgoPerf_t perfResults;\n     CHECK(cudnnFindConvolutionBackwardFilterAlgorithm(handle, conv.idesc.desc,\n         conv.odesc.desc, conv.cdesc.desc, conv.wdesc.desc, 1, &algoCount, &perfResults));\n-    bwd_filter_algos.insert(conv.params, perfResults.algo);\n-    return perfResults.algo;\n+    return perfResults;\n+  }\n+\n+  static void getAlgorithm(cudnnHandle_t handle, const Convolution& conv, cudnnConvolutionBwdFilterAlgo_t* algo) {\n+    CHECK(cudnnGetConvolutionBackwardFilterAlgorithm(handle, conv.idesc.desc,\n+        conv.odesc.desc, conv.cdesc.desc, conv.wdesc.desc,\n+        CUDNN_CONVOLUTION_BWD_FILTER_PREFER_FASTEST, 0, algo));\n+  }\n+\n+  static void getWorkspaceSize(cudnnHandle_t handle, const Convolution& conv, cudnnConvolutionBwdFilterAlgo_t algo, size_t* workspaceSize) {\n+    CHECK(cudnnGetConvolutionBackwardFilterWorkspaceSize(handle, conv.idesc.desc,\n+        conv.odesc.desc, conv.cdesc.desc, conv.wdesc.desc, algo, workspaceSize));\n+  }\n+};\n+\n+template<typename algo_t>\n+Workspace chooseAlgorithm(\n+    THCState* state, cudnnHandle_t handle, const Convolution& conv,\n+    bool benchmark, algo_t* algo)\n+{\n+  using search = algorithm_search<algo_t>;\n+  if (benchmark) {\n+    auto& cache = search::cache();\n+    if (!cache.find(conv.params, algo)) {\n+      auto perfResults = search::findAlgorithm(handle, conv);\n+      if (perfResults.status == CUDNN_STATUS_SUCCESS) {\n+        *algo = perfResults.algo;\n+      } else {\n+        *algo = search::DEFAULT_ALGO;\n+      }\n+      cache.insert(conv.params, *algo);\n+    }\n+  } else {\n+    search::getAlgorithm(handle, conv, algo);\n+  }\n+\n+  size_t workspace_size;\n+  search::getWorkspaceSize(handle, conv, *algo, &workspace_size);\n+  try {\n+    return Workspace(state, workspace_size);", "path": "torch/csrc/cudnn/Conv.cpp", "position": 191, "original_position": 190, "commit_id": "f6f3877569553885dd3bc07ebab2dd52197ec0dd", "original_commit_id": "51f057ecf400e2274f44b301a0bfa5791bed98f5", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "That sounds pretty awful for those who'll be running with tight memory constraints and won't be using `benchmark` \ud83d\ude15 ", "created_at": "2017-01-23T22:38:43Z", "updated_at": "2018-11-23T15:32:17Z", "html_url": "https://github.com/pytorch/pytorch/pull/558#discussion_r97433836", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/558", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/97433836"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/558#discussion_r97433836"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/558"}}, "body_html": "<p>That sounds pretty awful for those who'll be running with tight memory constraints and won't be using <code>benchmark</code> <g-emoji class=\"g-emoji\" alias=\"confused\" fallback-src=\"https://assets-cdn.github.com/images/icons/emoji/unicode/1f615.png\">\ud83d\ude15</g-emoji></p>", "body_text": "That sounds pretty awful for those who'll be running with tight memory constraints and won't be using benchmark \ud83d\ude15", "in_reply_to_id": 97421310}