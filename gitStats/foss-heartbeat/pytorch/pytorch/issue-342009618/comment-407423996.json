{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/407423996", "html_url": "https://github.com/pytorch/pytorch/issues/9503#issuecomment-407423996", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/9503", "id": 407423996, "node_id": "MDEyOklzc3VlQ29tbWVudDQwNzQyMzk5Ng==", "user": {"login": "zou3519", "id": 5652049, "node_id": "MDQ6VXNlcjU2NTIwNDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/5652049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zou3519", "html_url": "https://github.com/zou3519", "followers_url": "https://api.github.com/users/zou3519/followers", "following_url": "https://api.github.com/users/zou3519/following{/other_user}", "gists_url": "https://api.github.com/users/zou3519/gists{/gist_id}", "starred_url": "https://api.github.com/users/zou3519/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zou3519/subscriptions", "organizations_url": "https://api.github.com/users/zou3519/orgs", "repos_url": "https://api.github.com/users/zou3519/repos", "events_url": "https://api.github.com/users/zou3519/events{/privacy}", "received_events_url": "https://api.github.com/users/zou3519/received_events", "type": "User", "site_admin": false}, "created_at": "2018-07-24T14:20:45Z", "updated_at": "2018-07-24T14:20:45Z", "author_association": "CONTRIBUTOR", "body_html": "<p>I think we wanted <code>torch.meshgrid</code> to follow numpy semantics. <code>numpy.meshgrid</code> returns a list of ndarrays:</p>\n<pre><code>In [95]:  x = np.arange(0, 5, 1)\n\nIn [96]: y = np.arange(0, 5, 1)\n\nIn [97]: np.meshgrid(x, y)\nOut[97]:\n[array([[0, 1, 2, 3, 4],\n        [0, 1, 2, 3, 4],\n        [0, 1, 2, 3, 4],\n        [0, 1, 2, 3, 4],\n        [0, 1, 2, 3, 4]]), array([[0, 0, 0, 0, 0],\n        [1, 1, 1, 1, 1],\n        [2, 2, 2, 2, 2],\n        [3, 3, 3, 3, 3],\n        [4, 4, 4, 4, 4]])]\n</code></pre>\n<p>I'm not sure what would be useful: having a stacked tensor or returning two outputs. Perhaps we could add an option to meshgrid to return a stacked tensor?</p>", "body_text": "I think we wanted torch.meshgrid to follow numpy semantics. numpy.meshgrid returns a list of ndarrays:\nIn [95]:  x = np.arange(0, 5, 1)\n\nIn [96]: y = np.arange(0, 5, 1)\n\nIn [97]: np.meshgrid(x, y)\nOut[97]:\n[array([[0, 1, 2, 3, 4],\n        [0, 1, 2, 3, 4],\n        [0, 1, 2, 3, 4],\n        [0, 1, 2, 3, 4],\n        [0, 1, 2, 3, 4]]), array([[0, 0, 0, 0, 0],\n        [1, 1, 1, 1, 1],\n        [2, 2, 2, 2, 2],\n        [3, 3, 3, 3, 3],\n        [4, 4, 4, 4, 4]])]\n\nI'm not sure what would be useful: having a stacked tensor or returning two outputs. Perhaps we could add an option to meshgrid to return a stacked tensor?", "body": "I think we wanted `torch.meshgrid` to follow numpy semantics. `numpy.meshgrid` returns a list of ndarrays:\r\n```\r\nIn [95]:  x = np.arange(0, 5, 1)\r\n\r\nIn [96]: y = np.arange(0, 5, 1)\r\n\r\nIn [97]: np.meshgrid(x, y)\r\nOut[97]:\r\n[array([[0, 1, 2, 3, 4],\r\n        [0, 1, 2, 3, 4],\r\n        [0, 1, 2, 3, 4],\r\n        [0, 1, 2, 3, 4],\r\n        [0, 1, 2, 3, 4]]), array([[0, 0, 0, 0, 0],\r\n        [1, 1, 1, 1, 1],\r\n        [2, 2, 2, 2, 2],\r\n        [3, 3, 3, 3, 3],\r\n        [4, 4, 4, 4, 4]])]\r\n```\r\nI'm not sure what would be useful: having a stacked tensor or returning two outputs. Perhaps we could add an option to meshgrid to return a stacked tensor?"}