{"url": "https://api.github.com/repos/pytorch/pytorch/issues/1176", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/1176/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/1176/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/1176/events", "html_url": "https://github.com/pytorch/pytorch/issues/1176", "id": 218830224, "node_id": "MDU6SXNzdWUyMTg4MzAyMjQ=", "number": 1176, "title": "RNN sequence padding with batch_first", "user": {"login": "MaximumEntropy", "id": 9114321, "node_id": "MDQ6VXNlcjkxMTQzMjE=", "avatar_url": "https://avatars3.githubusercontent.com/u/9114321?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MaximumEntropy", "html_url": "https://github.com/MaximumEntropy", "followers_url": "https://api.github.com/users/MaximumEntropy/followers", "following_url": "https://api.github.com/users/MaximumEntropy/following{/other_user}", "gists_url": "https://api.github.com/users/MaximumEntropy/gists{/gist_id}", "starred_url": "https://api.github.com/users/MaximumEntropy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MaximumEntropy/subscriptions", "organizations_url": "https://api.github.com/users/MaximumEntropy/orgs", "repos_url": "https://api.github.com/users/MaximumEntropy/repos", "events_url": "https://api.github.com/users/MaximumEntropy/events{/privacy}", "received_events_url": "https://api.github.com/users/MaximumEntropy/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-04-03T04:57:13Z", "updated_at": "2017-04-03T19:21:07Z", "closed_at": "2017-04-03T19:07:07Z", "author_association": "CONTRIBUTOR", "body_html": "<p>I noticed that using batch_first with pack_padded_Sequence and pad_packed_sequence with an LSTM/GRU doesn't give me the expected output shape.</p>\n<pre lang=\"import\" data-meta=\"torch\"><code>import torch.nn as nn\nfrom torch.autograd import Variable\nfrom torch.nn.utils.rnn import pad_packed_sequence, pack_padded_sequence\n\nx = Variable(torch.randn(10, 20, 30))\nlens = range(20)\nlens = [z + 1 for z in lens]\nlens = lens[::-1][:10]\nx = pack_padded_sequence(x, lens, batch_first=True)\n\nlstm = nn.LSTM(30, 50, batch_first=True)\nh0 = Variable(torch.zeros(1, 10, 50))\nc0 = Variable(torch.zeros(1, 10, 50))\n\npacked_h, (packed_h_t, packed_c_t) = lstm(x, (h0, c0))\nh, _ = pad_packed_sequence(packed_h)\nprint h.size() # Size 20 x 10 x 50 instead of 10 x 20 x 50\n\n\n</code></pre>", "body_text": "I noticed that using batch_first with pack_padded_Sequence and pad_packed_sequence with an LSTM/GRU doesn't give me the expected output shape.\nimport torch.nn as nn\nfrom torch.autograd import Variable\nfrom torch.nn.utils.rnn import pad_packed_sequence, pack_padded_sequence\n\nx = Variable(torch.randn(10, 20, 30))\nlens = range(20)\nlens = [z + 1 for z in lens]\nlens = lens[::-1][:10]\nx = pack_padded_sequence(x, lens, batch_first=True)\n\nlstm = nn.LSTM(30, 50, batch_first=True)\nh0 = Variable(torch.zeros(1, 10, 50))\nc0 = Variable(torch.zeros(1, 10, 50))\n\npacked_h, (packed_h_t, packed_c_t) = lstm(x, (h0, c0))\nh, _ = pad_packed_sequence(packed_h)\nprint h.size() # Size 20 x 10 x 50 instead of 10 x 20 x 50", "body": "I noticed that using batch_first with pack_padded_Sequence and pad_packed_sequence with an LSTM/GRU doesn't give me the expected output shape.\r\n\r\n``` import torch\r\nimport torch.nn as nn\r\nfrom torch.autograd import Variable\r\nfrom torch.nn.utils.rnn import pad_packed_sequence, pack_padded_sequence\r\n\r\nx = Variable(torch.randn(10, 20, 30))\r\nlens = range(20)\r\nlens = [z + 1 for z in lens]\r\nlens = lens[::-1][:10]\r\nx = pack_padded_sequence(x, lens, batch_first=True)\r\n\r\nlstm = nn.LSTM(30, 50, batch_first=True)\r\nh0 = Variable(torch.zeros(1, 10, 50))\r\nc0 = Variable(torch.zeros(1, 10, 50))\r\n\r\npacked_h, (packed_h_t, packed_c_t) = lstm(x, (h0, c0))\r\nh, _ = pad_packed_sequence(packed_h)\r\nprint h.size() # Size 20 x 10 x 50 instead of 10 x 20 x 50\r\n\r\n\r\n"}