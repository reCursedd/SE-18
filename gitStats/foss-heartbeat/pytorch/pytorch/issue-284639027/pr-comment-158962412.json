{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/158962412", "pull_request_review_id": 85841437, "id": 158962412, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODk2MjQxMg==", "diff_hunk": "@@ -0,0 +1,60 @@\n+import torch\n+from torch.autograd import Variable\n+from torch.distributions.distribution import Distribution\n+from torch.distributions.categorical import Categorical\n+\n+\n+class OneHotCategorical(Distribution):\n+    r\"\"\"\n+    Creates a one-hot categorical distribution parameterized by `probs`.\n+\n+    Samples are one-hot coded vectors of size probs.size(-1).\n+\n+    See also: :func:`torch.distributions.Categorical`\n+\n+    Example::\n+\n+        >>> m = OneHotCategorical(torch.Tensor([ 0.25, 0.25, 0.25, 0.25 ]))\n+        >>> m.sample()  # equal probability of 0, 1, 2, 3\n+         0\n+         0\n+         1\n+         0\n+        [torch.FloatTensor of size 4]\n+\n+    Args:\n+        probs (Tensor or Variable): event probabilities\n+    \"\"\"\n+    has_enumerate_support = True\n+\n+    def __init__(self, probs):\n+        self._categorical = Categorical(probs)\n+        batch_shape = probs.size()[:-1]\n+        event_shape = probs.size()[-1:]\n+        super(OneHotCategorical, self).__init__(batch_shape, event_shape)\n+\n+    def sample(self, sample_shape=torch.Size()):\n+        sample_shape = torch.Size(sample_shape)\n+        probs = self._categorical.probs\n+        one_hot = probs.new(self._extended_shape(sample_shape)).zero_()\n+        indices = self._categorical.sample(sample_shape)\n+        if indices.dim() < one_hot.dim():\n+            indices = indices.unsqueeze(-1)\n+        return one_hot.scatter_(-1, indices, 1)\n+\n+    def log_prob(self, value):\n+        indices = value.max(-1)[1]\n+        return self._categorical.log_prob(indices)", "path": "torch/distributions/one_hot_categorical.py", "position": 47, "original_position": 47, "commit_id": "c5fe0a435b80f7a6089018d22d048d5e1eaf212d", "original_commit_id": "c5fe0a435b80f7a6089018d22d048d5e1eaf212d", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "it might be nicer to implement this as something more like this (modulo correct broadcasting and viewing the output properly):\r\n```python3\r\nprobs.log().expand_as(value)[value]\r\n```\r\nbut I'm ok with merging this too", "created_at": "2017-12-28T15:54:32Z", "updated_at": "2018-11-23T15:37:41Z", "html_url": "https://github.com/pytorch/pytorch/pull/4357#discussion_r158962412", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4357", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/158962412"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/4357#discussion_r158962412"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4357"}}, "body_html": "<p>it might be nicer to implement this as something more like this (modulo correct broadcasting and viewing the output properly):</p>\n<div class=\"highlight highlight-source-python\"><pre>probs.log().expand_as(value)[value]</pre></div>\n<p>but I'm ok with merging this too</p>", "body_text": "it might be nicer to implement this as something more like this (modulo correct broadcasting and viewing the output properly):\nprobs.log().expand_as(value)[value]\nbut I'm ok with merging this too"}