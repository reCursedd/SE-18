{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/351908972", "html_url": "https://github.com/pytorch/pytorch/issues/4190#issuecomment-351908972", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/4190", "id": 351908972, "node_id": "MDEyOklzc3VlQ29tbWVudDM1MTkwODk3Mg==", "user": {"login": "Prinsphield", "id": 12531720, "node_id": "MDQ6VXNlcjEyNTMxNzIw", "avatar_url": "https://avatars0.githubusercontent.com/u/12531720?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Prinsphield", "html_url": "https://github.com/Prinsphield", "followers_url": "https://api.github.com/users/Prinsphield/followers", "following_url": "https://api.github.com/users/Prinsphield/following{/other_user}", "gists_url": "https://api.github.com/users/Prinsphield/gists{/gist_id}", "starred_url": "https://api.github.com/users/Prinsphield/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Prinsphield/subscriptions", "organizations_url": "https://api.github.com/users/Prinsphield/orgs", "repos_url": "https://api.github.com/users/Prinsphield/repos", "events_url": "https://api.github.com/users/Prinsphield/events{/privacy}", "received_events_url": "https://api.github.com/users/Prinsphield/received_events", "type": "User", "site_admin": false}, "created_at": "2017-12-15T04:14:30Z", "updated_at": "2017-12-15T04:14:30Z", "author_association": "NONE", "body_html": "<p>Here is my new code.  Still slow.</p>\n<pre><code>class CelebADataset(Dataset):\n    def __init__(self, attribute, positive, transform=transforms.ToTensor(), config=config):\n    \u00a6   self.attribute = attribute\n    \u00a6   self.positive = positive\n    \u00a6   self.config = config\n    \u00a6   self.transform = transform\n\n    \u00a6   with open(os.path.join(self.config.data_dir, 'list_attr_celeba.txt'), 'r') as f:\n    \u00a6   \u00a6   lines = f.read().strip().split('\\n')\n    \u00a6   \u00a6   col_id = lines[1].split().index(self.attribute) + 1\n    \u00a6   \u00a6   self.attr_list = list(map(int, [x.split()[col_id] for x in lines[2:]]))\n\n    \u00a6   if self.positive:\n    \u00a6   \u00a6   self.idxs = list(filter(lambda x: self.attr_list[x] ==  1, range(len(self.attr_list))))\n    \u00a6   else:\n    \u00a6   \u00a6   self.idxs = list(filter(lambda x: self.attr_list[x] == -1, range(len(self.attr_list))))\n\n    \u00a6   self.filenames = [os.path.join(self.config.data_dir, 'align_5p/{:06d}.jpg'.format(idx+1)) for idx in self.idxs]\n\n    def __len__(self):\n    \u00a6   return len(self.filenames)\n\n    def __getitem__(self, idx):\n    \u00a6   img = misc.imread(self.filenames[idx])\n    \u00a6   if self.transform:\n    \u00a6   \u00a6   img = self.transform(img)\n    \u00a6   # img = misc.imresize(img, (self.config.nchw[2], self.config.nchw[3]))\n    \u00a6   # img = img.transpose((2,0,1)) / 255.\n    \u00a6   # img = img.astype(np.float32)\n    \u00a6   return img\n</code></pre>", "body_text": "Here is my new code.  Still slow.\nclass CelebADataset(Dataset):\n    def __init__(self, attribute, positive, transform=transforms.ToTensor(), config=config):\n    \u00a6   self.attribute = attribute\n    \u00a6   self.positive = positive\n    \u00a6   self.config = config\n    \u00a6   self.transform = transform\n\n    \u00a6   with open(os.path.join(self.config.data_dir, 'list_attr_celeba.txt'), 'r') as f:\n    \u00a6   \u00a6   lines = f.read().strip().split('\\n')\n    \u00a6   \u00a6   col_id = lines[1].split().index(self.attribute) + 1\n    \u00a6   \u00a6   self.attr_list = list(map(int, [x.split()[col_id] for x in lines[2:]]))\n\n    \u00a6   if self.positive:\n    \u00a6   \u00a6   self.idxs = list(filter(lambda x: self.attr_list[x] ==  1, range(len(self.attr_list))))\n    \u00a6   else:\n    \u00a6   \u00a6   self.idxs = list(filter(lambda x: self.attr_list[x] == -1, range(len(self.attr_list))))\n\n    \u00a6   self.filenames = [os.path.join(self.config.data_dir, 'align_5p/{:06d}.jpg'.format(idx+1)) for idx in self.idxs]\n\n    def __len__(self):\n    \u00a6   return len(self.filenames)\n\n    def __getitem__(self, idx):\n    \u00a6   img = misc.imread(self.filenames[idx])\n    \u00a6   if self.transform:\n    \u00a6   \u00a6   img = self.transform(img)\n    \u00a6   # img = misc.imresize(img, (self.config.nchw[2], self.config.nchw[3]))\n    \u00a6   # img = img.transpose((2,0,1)) / 255.\n    \u00a6   # img = img.astype(np.float32)\n    \u00a6   return img", "body": "Here is my new code.  Still slow.\r\n\r\n```\r\nclass CelebADataset(Dataset):\r\n    def __init__(self, attribute, positive, transform=transforms.ToTensor(), config=config):\r\n    \u00a6   self.attribute = attribute\r\n    \u00a6   self.positive = positive\r\n    \u00a6   self.config = config\r\n    \u00a6   self.transform = transform\r\n\r\n    \u00a6   with open(os.path.join(self.config.data_dir, 'list_attr_celeba.txt'), 'r') as f:\r\n    \u00a6   \u00a6   lines = f.read().strip().split('\\n')\r\n    \u00a6   \u00a6   col_id = lines[1].split().index(self.attribute) + 1\r\n    \u00a6   \u00a6   self.attr_list = list(map(int, [x.split()[col_id] for x in lines[2:]]))\r\n\r\n    \u00a6   if self.positive:\r\n    \u00a6   \u00a6   self.idxs = list(filter(lambda x: self.attr_list[x] ==  1, range(len(self.attr_list))))\r\n    \u00a6   else:\r\n    \u00a6   \u00a6   self.idxs = list(filter(lambda x: self.attr_list[x] == -1, range(len(self.attr_list))))\r\n\r\n    \u00a6   self.filenames = [os.path.join(self.config.data_dir, 'align_5p/{:06d}.jpg'.format(idx+1)) for idx in self.idxs]\r\n\r\n    def __len__(self):\r\n    \u00a6   return len(self.filenames)\r\n\r\n    def __getitem__(self, idx):\r\n    \u00a6   img = misc.imread(self.filenames[idx])\r\n    \u00a6   if self.transform:\r\n    \u00a6   \u00a6   img = self.transform(img)\r\n    \u00a6   # img = misc.imresize(img, (self.config.nchw[2], self.config.nchw[3]))\r\n    \u00a6   # img = img.transpose((2,0,1)) / 255.\r\n    \u00a6   # img = img.astype(np.float32)\r\n    \u00a6   return img\r\n```"}