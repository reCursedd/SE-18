{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/191635162", "pull_request_review_id": 124240061, "id": 191635162, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTYzNTE2Mg==", "diff_hunk": "@@ -46,7 +47,43 @@ void PeepholeOptimize(Block * block) {\n             }\n           }\n         }\n-        break;\n+      } break;\n+      // Fuse mm + add into addmm\n+      case aten::add: {\n+        // Must have two inputs\n+        if (n->inputs().size() != 2) {\n+          continue;\n+        }\n+        // Alpha parameter must be 1.0\n+        auto alpha = at::Scalar(it->t(attr::alpha));\n+        if (alpha.to<double>() != 1.0) {\n+          continue;\n+        }\n+\n+        auto input_node = n->input(1)->node();\n+        // Input must be an mm node\n+        if (input_node->kind() != aten::mm) {\n+          continue;\n+        }\n+\n+        WithInsertPoint guard(n);\n+\n+        SymbolicVariable mat(n->input(0));\n+        SymbolicVariable mat1(input_node->input(0));\n+        SymbolicVariable mat2(input_node->input(1));\n+        SymbolicVariable addmm_value = mat.addmm(mat1, mat2);\n+\n+        n->output()->replaceAllUsesWith(addmm_value);\n+        it.destroyCurrent();\n+\n+        if (input_node->output()->uses().size() == 0) {", "path": "torch/csrc/jit/passes/peephole.cpp", "position": null, "original_position": 60, "commit_id": "4c2e757bee8e4c487ed6e8334c8f3e0cf56c55fc", "original_commit_id": "81aca03472af7a0c6b06089f4539ebbb41b56557", "user": {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, "body": "Can we let DCE fix up this left over node? I feel like a lot of the peephole passes will want to have that cleanup anyway, and the check for `*it == input_node` is pretty obscure. ", "created_at": "2018-05-30T03:43:16Z", "updated_at": "2018-11-23T15:44:42Z", "html_url": "https://github.com/pytorch/pytorch/pull/7938#discussion_r191635162", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/7938", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/191635162"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/7938#discussion_r191635162"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/7938"}}, "body_html": "<p>Can we let DCE fix up this left over node? I feel like a lot of the peephole passes will want to have that cleanup anyway, and the check for <code>*it == input_node</code> is pretty obscure.</p>", "body_text": "Can we let DCE fix up this left over node? I feel like a lot of the peephole passes will want to have that cleanup anyway, and the check for *it == input_node is pretty obscure."}