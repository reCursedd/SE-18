{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/234282018", "pull_request_review_id": 175897334, "id": 234282018, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzNDI4MjAxOA==", "diff_hunk": "@@ -881,205 +791,46 @@ def run(self):\n \n main_compile_args = ['-D_THP_CORE', '-DONNX_NAMESPACE=' + ONNX_NAMESPACE]\n main_libraries = ['shm']\n-main_link_args = CAFFE2_LIBS\n+main_link_args = []\n if IS_WINDOWS:\n-    main_link_args.append(os.path.join(lib_path, 'torch.lib'))\n+    main_link_args.append(os.path.join(lib_path, 'torch_python.lib'))\n elif IS_DARWIN:\n-    main_link_args.append(os.path.join(lib_path, 'libtorch.dylib'))\n+    main_link_args.append(os.path.join(lib_path, 'libtorch_python.dylib'))\n else:\n-    main_link_args.append(os.path.join(lib_path, 'libtorch.so'))\n-main_sources = [\n-    \"torch/csrc/DataLoader.cpp\",\n-    \"torch/csrc/Device.cpp\",\n-    \"torch/csrc/Dtype.cpp\",\n-    \"torch/csrc/DynamicTypes.cpp\",\n-    \"torch/csrc/Exceptions.cpp\",\n-    \"torch/csrc/TypeInfo.cpp\",\n-    \"torch/csrc/Generator.cpp\",\n-    \"torch/csrc/Layout.cpp\",\n-    \"torch/csrc/Module.cpp\",\n-    \"torch/csrc/PtrWrapper.cpp\",\n-    \"torch/csrc/Size.cpp\",\n-    \"torch/csrc/Storage.cpp\",\n-    \"torch/csrc/autograd/functions/init.cpp\",\n-    \"torch/csrc/autograd/generated/python_functions.cpp\",\n-    \"torch/csrc/autograd/generated/python_nn_functions.cpp\",\n-    \"torch/csrc/autograd/generated/python_torch_functions.cpp\",\n-    \"torch/csrc/autograd/generated/python_variable_methods.cpp\",\n-    \"torch/csrc/autograd/init.cpp\",\n-    \"torch/csrc/autograd/python_anomaly_mode.cpp\",\n-    \"torch/csrc/autograd/python_cpp_function.cpp\",\n-    \"torch/csrc/autograd/python_engine.cpp\",\n-    \"torch/csrc/autograd/python_function.cpp\",\n-    \"torch/csrc/autograd/python_hook.cpp\",\n-    \"torch/csrc/autograd/python_legacy_variable.cpp\",\n-    \"torch/csrc/autograd/python_variable.cpp\",\n-    \"torch/csrc/autograd/python_variable_indexing.cpp\",\n-    \"torch/csrc/byte_order.cpp\",\n-    \"torch/csrc/jit/batched/BatchTensor.cpp\",\n-    \"torch/csrc/jit/init.cpp\",\n-    \"torch/csrc/jit/passes/onnx.cpp\",\n-    \"torch/csrc/jit/passes/onnx/fixup_onnx_loop.cpp\",\n-    \"torch/csrc/jit/passes/onnx/prepare_division_for_onnx.cpp\",\n-    \"torch/csrc/jit/passes/onnx/peephole.cpp\",\n-    \"torch/csrc/jit/passes/to_batch.cpp\",\n-    \"torch/csrc/jit/python_arg_flatten.cpp\",\n-    \"torch/csrc/jit/python_interpreter.cpp\",\n-    \"torch/csrc/jit/python_ir.cpp\",\n-    \"torch/csrc/jit/python_tracer.cpp\",\n-    \"torch/csrc/jit/script/init.cpp\",\n-    \"torch/csrc/jit/script/lexer.cpp\",\n-    \"torch/csrc/jit/script/module.cpp\",\n-    \"torch/csrc/jit/script/python_tree_views.cpp\",\n-    \"torch/csrc/nn/THNN.cpp\",\n-    \"torch/csrc/onnx/init.cpp\",\n-    \"torch/csrc/serialization.cpp\",\n-    \"torch/csrc/tensor/python_tensor.cpp\",\n-    \"torch/csrc/utils.cpp\",\n-    \"torch/csrc/utils/cuda_lazy_init.cpp\",\n-    \"torch/csrc/utils/invalid_arguments.cpp\",\n-    \"torch/csrc/utils/object_ptr.cpp\",\n-    \"torch/csrc/utils/python_arg_parser.cpp\",\n-    \"torch/csrc/utils/tensor_apply.cpp\",\n-    \"torch/csrc/utils/tensor_conversion_dispatch.cpp\",\n-    \"torch/csrc/utils/tensor_dtypes.cpp\",\n-    \"torch/csrc/utils/tensor_flatten.cpp\",\n-    \"torch/csrc/utils/tensor_layouts.cpp\",\n-    \"torch/csrc/utils/tensor_list.cpp\",\n-    \"torch/csrc/utils/tensor_new.cpp\",\n-    \"torch/csrc/utils/tensor_numpy.cpp\",\n-    \"torch/csrc/utils/tensor_types.cpp\",\n-    \"torch/csrc/utils/tuple_parser.cpp\",\n-]\n+    main_link_args.append(os.path.join(lib_path, 'libtorch_python.so'))\n+main_sources = [\"torch/csrc/stub.cpp\"]\n+\n+# Before the introduction of stub.cpp, _C.so and libcaffe2.so defined\n+# some of the same symbols, and it was important for _C.so to be\n+# loaded before libcaffe2.so so that the versions in _C.so got\n+# used. This happened automatically because we loaded _C.so directly,\n+# and libcaffe2.so was brought in as a dependency (though I suspect it\n+# may have been possible to break by importing caffe2 first in the\n+# same process).\n+#\n+# Now, libtorch_python.so and libcaffe2.so define some of the same\n+# symbols. We directly load the _C.so stub, which brings both of these\n+# in as dependencies. We have to make sure that symbols continue to be\n+# looked up in libtorch_python.so first, by making sure it comes\n+# before libcaffe2.so in the linker command.\n+main_link_args.extend(CAFFE2_LIBS)\n \n try:\n     import numpy as np\n-    include_dirs.append(np.get_include())\n-    extra_compile_args.append('-DUSE_NUMPY')\n     USE_NUMPY = True\n except ImportError:\n     USE_NUMPY = False\n \n-if USE_DISTRIBUTED:\n-    extra_compile_args += ['-DUSE_DISTRIBUTED']\n-    main_sources += [\n-        \"torch/csrc/distributed/Module.cpp\",\n-    ]\n-    include_dirs += [tmp_install_path + \"/include/THD\"]\n-    main_link_args += [THD_LIB]\n-    if IS_LINUX:\n-        extra_compile_args.append('-DUSE_C10D')\n-        main_sources.append('torch/csrc/distributed/c10d/init.cpp')\n-        main_link_args.append(C10D_LIB)\n-        main_link_args.append(GLOO_LIB)\n-        if USE_CUDA:\n-            main_sources.append('torch/csrc/distributed/c10d/ddp.cpp')\n-            main_link_args.append(GLOO_CUDA_LIB)\n-\n if USE_CUDA:\n-    nvtoolext_lib_name = None\n     if IS_WINDOWS:\n         cuda_lib_path = CUDA_HOME + '/lib/x64/'\n-        nvtoolext_lib_path = NVTOOLEXT_HOME + '/lib/x64/'\n-        nvtoolext_include_path = os.path.join(NVTOOLEXT_HOME, 'include')\n-\n-        library_dirs.append(nvtoolext_lib_path)\n-        include_dirs.append(nvtoolext_include_path)\n-\n-        nvtoolext_lib_name = 'nvToolsExt64_1'\n-\n-        # MSVC doesn't support runtime symbol resolving, `nvrtc` and `cuda` should be linked\n-        main_libraries += ['nvrtc', 'cuda']\n     else:\n         cuda_lib_dirs = ['lib64', 'lib']\n-\n         for lib_dir in cuda_lib_dirs:\n             cuda_lib_path = os.path.join(CUDA_HOME, lib_dir)\n             if os.path.exists(cuda_lib_path):\n                 break\n-        extra_link_args.append('-Wl,-rpath,' + cuda_lib_path)\n-\n-        nvtoolext_lib_name = 'nvToolsExt'\n-\n     library_dirs.append(cuda_lib_path)\n-    cuda_include_path = os.path.join(CUDA_HOME, 'include')\n-    include_dirs.append(cuda_include_path)\n-    include_dirs.append(tmp_install_path + \"/include/THCUNN\")\n-    extra_compile_args += ['-DUSE_CUDA']\n-    extra_compile_args += ['-DCUDA_LIB_PATH=' + cuda_lib_path]\n-    main_libraries += ['cudart', nvtoolext_lib_name]\n-    main_sources += [\n-        \"torch/csrc/cuda/Module.cpp\",\n-        \"torch/csrc/cuda/Storage.cpp\",\n-        \"torch/csrc/cuda/Stream.cpp\",\n-        \"torch/csrc/cuda/utils.cpp\",\n-        \"torch/csrc/cuda/comm.cpp\",\n-        \"torch/csrc/cuda/python_comm.cpp\",\n-        \"torch/csrc/cuda/serialization.cpp\",\n-        \"torch/csrc/nn/THCUNN.cpp\",\n-    ]\n-\n-if USE_ROCM:\n-    rocm_include_path = '/opt/rocm/include'\n-    hcc_include_path = '/opt/rocm/hcc/include'\n-    rocblas_include_path = '/opt/rocm/rocblas/include'\n-    hipsparse_include_path = '/opt/rocm/hipsparse/include'\n-    rocfft_include_path = '/opt/rocm/rocfft/include'\n-    hiprand_include_path = '/opt/rocm/hiprand/include'\n-    rocrand_include_path = '/opt/rocm/rocrand/include'\n-    thrust_include_path = '/opt/rocm/include/'\n-    hip_lib_path = '/opt/rocm/hip/lib'\n-    hcc_lib_path = '/opt/rocm/hcc/lib'\n-    include_dirs.append(rocm_include_path)\n-    include_dirs.append(hcc_include_path)\n-    include_dirs.append(rocblas_include_path)\n-    include_dirs.append(rocfft_include_path)\n-    include_dirs.append(hipsparse_include_path)\n-    include_dirs.append(hiprand_include_path)\n-    include_dirs.append(rocrand_include_path)\n-    include_dirs.append(thrust_include_path)\n-    include_dirs.append(tmp_install_path + \"/include/THCUNN\")\n-    extra_link_args.append('-L' + hip_lib_path)\n-    extra_link_args.append('-Wl,-rpath,' + hip_lib_path)\n-    extra_compile_args += ['-DUSE_ROCM']\n-    extra_compile_args += ['-D__HIP_PLATFORM_HCC__']\n-\n-    main_sources += [\n-        \"torch/csrc/cuda/Module.cpp\",\n-        \"torch/csrc/cuda/Storage.cpp\",\n-        \"torch/csrc/cuda/Stream.cpp\",\n-        \"torch/csrc/cuda/utils.cpp\",\n-        \"torch/csrc/cuda/comm.cpp\",\n-        \"torch/csrc/cuda/python_comm.cpp\",\n-        \"torch/csrc/cuda/serialization.cpp\",\n-        \"torch/csrc/nn/THCUNN.cpp\",\n-    ]\n-\n-if USE_NCCL:\n-    if USE_SYSTEM_NCCL:\n-        include_dirs.append(NCCL_INCLUDE_DIR)\n-    else:\n-        include_dirs.append(\"build/nccl/include\")\n-    extra_compile_args += ['-DUSE_NCCL']\n-    main_sources += [\n-        \"torch/csrc/cuda/nccl.cpp\",\n-        \"torch/csrc/cuda/python_nccl.cpp\",\n-    ]\n-if USE_CUDNN:\n-    main_libraries += [CUDNN_LIBRARY]\n-    # NOTE: these are at the front, in case there's another cuDNN in CUDA path", "path": "setup.py", "position": 402, "original_position": 371, "commit_id": "13162b86c2f74c71400afdb05cf753d11a511690", "original_commit_id": "da3d5a17dde8d69159c46f9b35610f52a41fbb2a", "user": {"login": "anderspapitto", "id": 1388690, "node_id": "MDQ6VXNlcjEzODg2OTA=", "avatar_url": "https://avatars3.githubusercontent.com/u/1388690?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anderspapitto", "html_url": "https://github.com/anderspapitto", "followers_url": "https://api.github.com/users/anderspapitto/followers", "following_url": "https://api.github.com/users/anderspapitto/following{/other_user}", "gists_url": "https://api.github.com/users/anderspapitto/gists{/gist_id}", "starred_url": "https://api.github.com/users/anderspapitto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anderspapitto/subscriptions", "organizations_url": "https://api.github.com/users/anderspapitto/orgs", "repos_url": "https://api.github.com/users/anderspapitto/repos", "events_url": "https://api.github.com/users/anderspapitto/events{/privacy}", "received_events_url": "https://api.github.com/users/anderspapitto/received_events", "type": "User", "site_admin": false}, "body": "handled it below in accordance with your comment there", "created_at": "2018-11-16T17:10:29Z", "updated_at": "2018-11-23T15:55:01Z", "html_url": "https://github.com/pytorch/pytorch/pull/12742#discussion_r234282018", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/12742", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/234282018"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/12742#discussion_r234282018"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/12742"}}, "body_html": "<p>handled it below in accordance with your comment there</p>", "body_text": "handled it below in accordance with your comment there", "in_reply_to_id": 234095054}