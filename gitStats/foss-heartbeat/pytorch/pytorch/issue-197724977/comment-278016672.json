{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/278016672", "html_url": "https://github.com/pytorch/pytorch/issues/358#issuecomment-278016672", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/358", "id": 278016672, "node_id": "MDEyOklzc3VlQ29tbWVudDI3ODAxNjY3Mg==", "user": {"login": "nhynes", "id": 2353785, "node_id": "MDQ6VXNlcjIzNTM3ODU=", "avatar_url": "https://avatars2.githubusercontent.com/u/2353785?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nhynes", "html_url": "https://github.com/nhynes", "followers_url": "https://api.github.com/users/nhynes/followers", "following_url": "https://api.github.com/users/nhynes/following{/other_user}", "gists_url": "https://api.github.com/users/nhynes/gists{/gist_id}", "starred_url": "https://api.github.com/users/nhynes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nhynes/subscriptions", "organizations_url": "https://api.github.com/users/nhynes/orgs", "repos_url": "https://api.github.com/users/nhynes/repos", "events_url": "https://api.github.com/users/nhynes/events{/privacy}", "received_events_url": "https://api.github.com/users/nhynes/received_events", "type": "User", "site_admin": false}, "created_at": "2017-02-07T14:33:44Z", "updated_at": "2017-02-07T16:26:12Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Behold, opinions:</p>\n<blockquote>\n<p>immutable is much better</p>\n</blockquote>\n<p>I agree with the sentiment and, indeed, the implementation is effectively so. Unfortunately, the rest of the API is mutable and I think that users would be confused by the inconsistency.</p>\n<blockquote>\n<p><code>add_module</code> makes no sense in context of sequential</p>\n</blockquote>\n<p>Yes; having a separate API would be nice. I think that the real problem is that all modules must have names. In the context of something like <code>Parallel</code> or <code>Concat</code>, modules added by the list constructor would not have meaningful names, either.</p>\n<p>Regarding the PR,  <code>insert_module</code> takes both an optional index <em>and</em> name since the <code>OrderedDict</code> constructor precludes a bijection between names and indices.<br>\n<code>add_module</code> doesn't break any invariants,  but it is redundant with <code>insert_module(mod, None 'name')</code>.</p>\n<p>IMHO, a nice solution would be:</p>\n<ul>\n<li><code>self._modules = ODict</code> -&gt; <code>self._modules = []</code> so that the consequences of moving children are made explicit (and less onerous).</li>\n<li><code>add_module(name, module)</code> -&gt; <code>add_module(module, name=None)</code> because some modules don't have proper names and, in the future people might want \"private\" modules.</li>\n<li><code>Sequential.add_module(module, name=None, index=None)</code> where <code>index=None</code> is append</li>\n</ul>", "body_text": "Behold, opinions:\n\nimmutable is much better\n\nI agree with the sentiment and, indeed, the implementation is effectively so. Unfortunately, the rest of the API is mutable and I think that users would be confused by the inconsistency.\n\nadd_module makes no sense in context of sequential\n\nYes; having a separate API would be nice. I think that the real problem is that all modules must have names. In the context of something like Parallel or Concat, modules added by the list constructor would not have meaningful names, either.\nRegarding the PR,  insert_module takes both an optional index and name since the OrderedDict constructor precludes a bijection between names and indices.\nadd_module doesn't break any invariants,  but it is redundant with insert_module(mod, None 'name').\nIMHO, a nice solution would be:\n\nself._modules = ODict -> self._modules = [] so that the consequences of moving children are made explicit (and less onerous).\nadd_module(name, module) -> add_module(module, name=None) because some modules don't have proper names and, in the future people might want \"private\" modules.\nSequential.add_module(module, name=None, index=None) where index=None is append", "body": "Behold, opinions:\r\n\r\n> immutable is much better\r\n\r\nI agree with the sentiment and, indeed, the implementation is effectively so. Unfortunately, the rest of the API is mutable and I think that users would be confused by the inconsistency.\r\n\r\n> `add_module` makes no sense in context of sequential\r\n\r\nYes; having a separate API would be nice. I think that the real problem is that all modules must have names. In the context of something like `Parallel` or `Concat`, modules added by the list constructor would not have meaningful names, either.\r\n\r\nRegarding the PR,  `insert_module` takes both an optional index *and* name since the `OrderedDict` constructor precludes a bijection between names and indices.\r\n`add_module` doesn't break any invariants,  but it is redundant with `insert_module(mod, None 'name')`.\r\n\r\nIMHO, a nice solution would be:\r\n* `self._modules = ODict` -> `self._modules = []` so that the consequences of moving children are made explicit (and less onerous).\r\n* `add_module(name, module)` -> `add_module(module, name=None)` because some modules don't have proper names and, in the future people might want \"private\" modules.\r\n* `Sequential.add_module(module, name=None, index=None)` where `index=None` is append"}