{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/405025636", "html_url": "https://github.com/pytorch/pytorch/issues/358#issuecomment-405025636", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/358", "id": 405025636, "node_id": "MDEyOklzc3VlQ29tbWVudDQwNTAyNTYzNg==", "user": {"login": "pbloem", "id": 1104629, "node_id": "MDQ6VXNlcjExMDQ2Mjk=", "avatar_url": "https://avatars3.githubusercontent.com/u/1104629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pbloem", "html_url": "https://github.com/pbloem", "followers_url": "https://api.github.com/users/pbloem/followers", "following_url": "https://api.github.com/users/pbloem/following{/other_user}", "gists_url": "https://api.github.com/users/pbloem/gists{/gist_id}", "starred_url": "https://api.github.com/users/pbloem/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pbloem/subscriptions", "organizations_url": "https://api.github.com/users/pbloem/orgs", "repos_url": "https://api.github.com/users/pbloem/repos", "events_url": "https://api.github.com/users/pbloem/events{/privacy}", "received_events_url": "https://api.github.com/users/pbloem/received_events", "type": "User", "site_admin": false}, "created_at": "2018-07-14T14:02:47Z", "updated_at": "2018-07-14T14:02:47Z", "author_association": "NONE", "body_html": "<p>Sorry to rake this one up again, but having to name each module in a Sequential model when I add them one-by-one really ruins the readability of my code.</p>\n<p>Would it be a solution to add an extend() to the sequential model (with the same contract as that in ModuleList)?</p>\n<p>This would allow you to write</p>\n<pre><code>seq.extend([Conv2d(3, 5, 4)])\n</code></pre>\n<p>for a single module and has the benefit of expanding to</p>\n<pre><code>seq.extend([\n    Conv2d(3, 5, 4),\n    RelU(),\n    MaxPool2d((4, 4)),\n])\n</code></pre>\n<p>for multiple modules. Which looks a lot like how you would add a list of modules to the constructor.</p>\n<p>This doesn't affect add_module, so it doesn't hurt any of the existing contracts and backward compatibilities, and it stops you from having to give arbitrary, unique names to your modules.</p>", "body_text": "Sorry to rake this one up again, but having to name each module in a Sequential model when I add them one-by-one really ruins the readability of my code.\nWould it be a solution to add an extend() to the sequential model (with the same contract as that in ModuleList)?\nThis would allow you to write\nseq.extend([Conv2d(3, 5, 4)])\n\nfor a single module and has the benefit of expanding to\nseq.extend([\n    Conv2d(3, 5, 4),\n    RelU(),\n    MaxPool2d((4, 4)),\n])\n\nfor multiple modules. Which looks a lot like how you would add a list of modules to the constructor.\nThis doesn't affect add_module, so it doesn't hurt any of the existing contracts and backward compatibilities, and it stops you from having to give arbitrary, unique names to your modules.", "body": "Sorry to rake this one up again, but having to name each module in a Sequential model when I add them one-by-one really ruins the readability of my code.\r\n\r\nWould it be a solution to add an extend() to the sequential model (with the same contract as that in ModuleList)?\r\n\r\nThis would allow you to write\r\n```\r\nseq.extend([Conv2d(3, 5, 4)])\r\n```\r\nfor a single module and has the benefit of expanding to \r\n```\r\nseq.extend([\r\n    Conv2d(3, 5, 4),\r\n    RelU(),\r\n    MaxPool2d((4, 4)),\r\n])\r\n```\r\nfor multiple modules. Which looks a lot like how you would add a list of modules to the constructor. \r\n\r\nThis doesn't affect add_module, so it doesn't hurt any of the existing contracts and backward compatibilities, and it stops you from having to give arbitrary, unique names to your modules."}