{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/356036955", "html_url": "https://github.com/pytorch/pytorch/pull/4508#issuecomment-356036955", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/4508", "id": 356036955, "node_id": "MDEyOklzc3VlQ29tbWVudDM1NjAzNjk1NQ==", "user": {"login": "N-Dekker", "id": 27005366, "node_id": "MDQ6VXNlcjI3MDA1MzY2", "avatar_url": "https://avatars0.githubusercontent.com/u/27005366?v=4", "gravatar_id": "", "url": "https://api.github.com/users/N-Dekker", "html_url": "https://github.com/N-Dekker", "followers_url": "https://api.github.com/users/N-Dekker/followers", "following_url": "https://api.github.com/users/N-Dekker/following{/other_user}", "gists_url": "https://api.github.com/users/N-Dekker/gists{/gist_id}", "starred_url": "https://api.github.com/users/N-Dekker/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/N-Dekker/subscriptions", "organizations_url": "https://api.github.com/users/N-Dekker/orgs", "repos_url": "https://api.github.com/users/N-Dekker/repos", "events_url": "https://api.github.com/users/N-Dekker/events{/privacy}", "received_events_url": "https://api.github.com/users/N-Dekker/received_events", "type": "User", "site_admin": false}, "created_at": "2018-01-08T17:35:12Z", "updated_at": "2018-01-08T17:39:13Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=9998726\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/peterjc123\">@peterjc123</a> CMake already takes care of adding optimization flags to the Release configuration, and debugging flags to the Debug configuration, by default! I just generated a Visual Studio 2015 solution file (64-bit) from the following CMakeLists.txt:</p>\n<pre><code># CMakeLists.txt\ncmake_minimum_required( VERSION 3.10 )\nproject( MyProject )\nadd_executable(MyExecutable my_cplusplus.cpp my_c.c)\n</code></pre>\n<p>It produced the following command-line options:</p>\n<p>For my_c.c, Debug:</p>\n<blockquote>\n<p>/GS /TC /W3 /Zc:wchar_t /Zi /Gm- /Od /Ob0 /Fd\"MyExecutable.dir\\Debug\\vc140.pdb\" /Zc:inline /fp:precise /D \"WIN32\" /D \"_WINDOWS\" /D \"CMAKE_INTDIR=\"Debug\"\" /D \"_MBCS\" /errorReport:prompt /WX- /Zc:forScope /RTC1 /GR /Gd /MDd /Fa\"Debug/\" /EHsc /nologo /Fo\"MyExecutable.dir\\Debug\" /Fp\"MyExecutable.dir\\Debug\\MyExecutable.pch\"</p>\n</blockquote>\n<p>For my_c.c, Release:</p>\n<blockquote>\n<p>/GS /TC /W3 /Zc:wchar_t /Gm- /O2 /Ob2 /Fd\"MyExecutable.dir\\Release\\vc140.pdb\" /Zc:inline /fp:precise /D \"WIN32\" /D \"_WINDOWS\" /D \"NDEBUG\" /D \"CMAKE_INTDIR=\"Release\"\" /D \"_MBCS\" /errorReport:prompt /WX- /Zc:forScope /GR /Gd /MD /Fa\"Release/\" /EHsc /nologo /Fo\"MyExecutable.dir\\Release\" /Fp\"MyExecutable.dir\\Release\\MyExecutable.pch\"</p>\n</blockquote>\n<p>For my_cplusplus.cpp, Debug:</p>\n<blockquote>\n<p>/GS /TP /W3 /Zc:wchar_t /Zi /Gm- /Od /Ob0 /Fd\"MyExecutable.dir\\Debug\\vc140.pdb\" /Zc:inline /fp:precise /D \"WIN32\" /D \"_WINDOWS\" /D \"CMAKE_INTDIR=\"Debug\"\" /D \"_MBCS\" /errorReport:prompt /WX- /Zc:forScope /RTC1 /GR /Gd /MDd /Fa\"Debug/\" /EHsc /nologo /Fo\"MyExecutable.dir\\Debug\" /Fp\"MyExecutable.dir\\Debug\\MyExecutable.pch\"</p>\n</blockquote>\n<p>For my_cplusplus.cpp, Release:</p>\n<blockquote>\n<p>/GS /TP /W3 /Zc:wchar_t /Gm- /O2 /Ob2 /Fd\"MyExecutable.dir\\Release\\vc140.pdb\" /Zc:inline /fp:precise /D \"WIN32\" /D \"_WINDOWS\" /D \"NDEBUG\" /D \"CMAKE_INTDIR=\"Release\"\" /D \"_MBCS\" /errorReport:prompt /WX- /Zc:forScope /GR /Gd /MD /Fa\"Release/\" /EHsc /nologo /Fo\"MyExecutable.dir\\Release\" /Fp\"MyExecutable.dir\\Release\\MyExecutable.pch\"</p>\n</blockquote>\n<p>So for Release configurations, CMake adds \"/O2 /Ob2\" by default. Which seems similar to the optimizations offered by the flag you are adding, \"/Ox\". <a href=\"https://msdn.microsoft.com/en-us/library/59a3b321.aspx\" rel=\"nofollow\">https://msdn.microsoft.com/en-us/library/59a3b321.aspx</a> If you still prefer to add \"/Ox\" (but only for Release build), I think you can do so by setting CMAKE_C_FLAGS_RELEASE and CMAKE_CXX_FLAGS_RELEASE. What do you think?</p>", "body_text": "@peterjc123 CMake already takes care of adding optimization flags to the Release configuration, and debugging flags to the Debug configuration, by default! I just generated a Visual Studio 2015 solution file (64-bit) from the following CMakeLists.txt:\n# CMakeLists.txt\ncmake_minimum_required( VERSION 3.10 )\nproject( MyProject )\nadd_executable(MyExecutable my_cplusplus.cpp my_c.c)\n\nIt produced the following command-line options:\nFor my_c.c, Debug:\n\n/GS /TC /W3 /Zc:wchar_t /Zi /Gm- /Od /Ob0 /Fd\"MyExecutable.dir\\Debug\\vc140.pdb\" /Zc:inline /fp:precise /D \"WIN32\" /D \"_WINDOWS\" /D \"CMAKE_INTDIR=\"Debug\"\" /D \"_MBCS\" /errorReport:prompt /WX- /Zc:forScope /RTC1 /GR /Gd /MDd /Fa\"Debug/\" /EHsc /nologo /Fo\"MyExecutable.dir\\Debug\" /Fp\"MyExecutable.dir\\Debug\\MyExecutable.pch\"\n\nFor my_c.c, Release:\n\n/GS /TC /W3 /Zc:wchar_t /Gm- /O2 /Ob2 /Fd\"MyExecutable.dir\\Release\\vc140.pdb\" /Zc:inline /fp:precise /D \"WIN32\" /D \"_WINDOWS\" /D \"NDEBUG\" /D \"CMAKE_INTDIR=\"Release\"\" /D \"_MBCS\" /errorReport:prompt /WX- /Zc:forScope /GR /Gd /MD /Fa\"Release/\" /EHsc /nologo /Fo\"MyExecutable.dir\\Release\" /Fp\"MyExecutable.dir\\Release\\MyExecutable.pch\"\n\nFor my_cplusplus.cpp, Debug:\n\n/GS /TP /W3 /Zc:wchar_t /Zi /Gm- /Od /Ob0 /Fd\"MyExecutable.dir\\Debug\\vc140.pdb\" /Zc:inline /fp:precise /D \"WIN32\" /D \"_WINDOWS\" /D \"CMAKE_INTDIR=\"Debug\"\" /D \"_MBCS\" /errorReport:prompt /WX- /Zc:forScope /RTC1 /GR /Gd /MDd /Fa\"Debug/\" /EHsc /nologo /Fo\"MyExecutable.dir\\Debug\" /Fp\"MyExecutable.dir\\Debug\\MyExecutable.pch\"\n\nFor my_cplusplus.cpp, Release:\n\n/GS /TP /W3 /Zc:wchar_t /Gm- /O2 /Ob2 /Fd\"MyExecutable.dir\\Release\\vc140.pdb\" /Zc:inline /fp:precise /D \"WIN32\" /D \"_WINDOWS\" /D \"NDEBUG\" /D \"CMAKE_INTDIR=\"Release\"\" /D \"_MBCS\" /errorReport:prompt /WX- /Zc:forScope /GR /Gd /MD /Fa\"Release/\" /EHsc /nologo /Fo\"MyExecutable.dir\\Release\" /Fp\"MyExecutable.dir\\Release\\MyExecutable.pch\"\n\nSo for Release configurations, CMake adds \"/O2 /Ob2\" by default. Which seems similar to the optimizations offered by the flag you are adding, \"/Ox\". https://msdn.microsoft.com/en-us/library/59a3b321.aspx If you still prefer to add \"/Ox\" (but only for Release build), I think you can do so by setting CMAKE_C_FLAGS_RELEASE and CMAKE_CXX_FLAGS_RELEASE. What do you think?", "body": "@peterjc123 CMake already takes care of adding optimization flags to the Release configuration, and debugging flags to the Debug configuration, by default! I just generated a Visual Studio 2015 solution file (64-bit) from the following CMakeLists.txt: \r\n```\r\n# CMakeLists.txt\r\ncmake_minimum_required( VERSION 3.10 )\r\nproject( MyProject )\r\nadd_executable(MyExecutable my_cplusplus.cpp my_c.c)\r\n```\r\nIt produced the following command-line options:\r\n\r\nFor my_c.c, Debug:\r\n> /GS /TC /W3 /Zc:wchar_t /Zi /Gm- /Od /Ob0 /Fd\"MyExecutable.dir\\Debug\\vc140.pdb\" /Zc:inline /fp:precise /D \"WIN32\" /D \"_WINDOWS\" /D \"CMAKE_INTDIR=\\\"Debug\\\"\" /D \"_MBCS\" /errorReport:prompt /WX- /Zc:forScope /RTC1 /GR /Gd /MDd /Fa\"Debug/\" /EHsc /nologo /Fo\"MyExecutable.dir\\Debug\\\" /Fp\"MyExecutable.dir\\Debug\\MyExecutable.pch\" \r\n \r\nFor my_c.c, Release:\r\n> /GS /TC /W3 /Zc:wchar_t /Gm- /O2 /Ob2 /Fd\"MyExecutable.dir\\Release\\vc140.pdb\" /Zc:inline /fp:precise /D \"WIN32\" /D \"_WINDOWS\" /D \"NDEBUG\" /D \"CMAKE_INTDIR=\\\"Release\\\"\" /D \"_MBCS\" /errorReport:prompt /WX- /Zc:forScope /GR /Gd /MD /Fa\"Release/\" /EHsc /nologo /Fo\"MyExecutable.dir\\Release\\\" /Fp\"MyExecutable.dir\\Release\\MyExecutable.pch\"  \r\n\r\nFor my_cplusplus.cpp, Debug:\r\n> /GS /TP /W3 /Zc:wchar_t /Zi /Gm- /Od /Ob0 /Fd\"MyExecutable.dir\\Debug\\vc140.pdb\" /Zc:inline /fp:precise /D \"WIN32\" /D \"_WINDOWS\" /D \"CMAKE_INTDIR=\\\"Debug\\\"\" /D \"_MBCS\" /errorReport:prompt /WX- /Zc:forScope /RTC1 /GR /Gd /MDd /Fa\"Debug/\" /EHsc /nologo /Fo\"MyExecutable.dir\\Debug\\\" /Fp\"MyExecutable.dir\\Debug\\MyExecutable.pch\" \r\n\r\nFor my_cplusplus.cpp, Release:\r\n\r\n> /GS /TP /W3 /Zc:wchar_t /Gm- /O2 /Ob2 /Fd\"MyExecutable.dir\\Release\\vc140.pdb\" /Zc:inline /fp:precise /D \"WIN32\" /D \"_WINDOWS\" /D \"NDEBUG\" /D \"CMAKE_INTDIR=\\\"Release\\\"\" /D \"_MBCS\" /errorReport:prompt /WX- /Zc:forScope /GR /Gd /MD /Fa\"Release/\" /EHsc /nologo /Fo\"MyExecutable.dir\\Release\\\" /Fp\"MyExecutable.dir\\Release\\MyExecutable.pch\" \r\n\r\nSo for Release configurations, CMake adds \"/O2 /Ob2\" by default. Which seems similar to the optimizations offered by the flag you are adding, \"/Ox\". https://msdn.microsoft.com/en-us/library/59a3b321.aspx If you still prefer to add \"/Ox\" (but only for Release build), I think you can do so by setting CMAKE_C_FLAGS_RELEASE and CMAKE_CXX_FLAGS_RELEASE. What do you think?\r\n  "}