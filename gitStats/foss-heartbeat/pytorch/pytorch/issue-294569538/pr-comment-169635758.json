{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/169635758", "pull_request_review_id": 98191922, "id": 169635758, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2OTYzNTc1OA==", "diff_hunk": "@@ -222,7 +243,79 @@ def _register_grad_hooks(self):\n                     grad_acc.register_hook(self._make_param_hook(p, device_idx))\n                     self._grad_accs.append(grad_acc)\n \n+    def _register_nccl_grad_hook(self):\n+        \"\"\"\n+        This function registers the callback all-reduction function for the\n+        NCCL backend. All gradients will be all reduced in one single step.\n+        The NCCL reduction will directly be enqueued into the\n+        default CUDA stream. Therefore, no synchronization is needed.\n+        \"\"\"\n+        # Creating a new group\n+        self.nccl_reduction_group_id = dist.new_group()\n+\n+        def reduction_fn_nccl():\n+            # This function only needs to be called once\n+            if not self.need_reduction:\n+                return\n+\n+            self.need_reduction = False\n+            all_grads = [[] for _ in range(len(self._module_copies))]\n+            all_grads_buckets_iters = []\n+\n+            # Bucketing all the gradients\n+            for dev_idx, module in enumerate(self._module_copies):\n+                for param in module.parameters():\n+                    if not param.requires_grad or param.grad is None:\n+                        continue\n+                    if param.grad.requires_grad:\n+                        raise RuntimeError(\"DistributedDataParallel only works \"\n+                                           \"with gradients that don't require \"\n+                                           \"grad\")\n+                    # Adding the gradients for reduction\n+                    all_grads[dev_idx].append(param.grad.data)\n+\n+                # Now bucketing the parameters\n+                dev_grads_buckets = _take_tensors(all_grads[dev_idx],\n+                                                  self.nccl_reduce_bucket_size)\n+\n+                all_grads_buckets_iters.append(dev_grads_buckets)\n+\n+            # Now reduce each bucket one after another\n+            for grads_batch in zip(*all_grads_buckets_iters):\n+                grads_batch_coalesced = []\n+                # Coalesce each bucket\n+                for dev_idx, dev_grads_batch in enumerate(grads_batch):\n+                    dev_id = self.device_ids[dev_idx]\n+                    with torch.cuda.device(dev_id):\n+                        dev_grads_batch_coalesced = _flatten_dense_tensors(dev_grads_batch)\n+                        grads_batch_coalesced.append(dev_grads_batch_coalesced)\n+\n+                # We will only use device 0's results, but this single op should be\n+                # faster than doing the following two operation sequentially:\n+                # (1) intra-node reduce to lead GPU, followed by\n+                # (2) inter-node allreduce for all the first lead GPUs in all nodes\n+                dist.all_reduce_multigpu(grads_batch_coalesced,\n+                                         group=self.nccl_reduction_group_id)", "path": "torch/nn/parallel/distributed.py", "position": 151, "original_position": 136, "commit_id": "97e14897a9a7407c1e3aed1ab6d9ff0a9e1f9ed8", "original_commit_id": "03cb5fef97e080626b75ac893b7879dd342f70dc", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Do we do that in the other path? I'm not sure now", "created_at": "2018-02-21T13:30:19Z", "updated_at": "2018-11-23T15:39:47Z", "html_url": "https://github.com/pytorch/pytorch/pull/5064#discussion_r169635758", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/5064", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/169635758"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/5064#discussion_r169635758"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/5064"}}, "body_html": "<p>Do we do that in the other path? I'm not sure now</p>", "body_text": "Do we do that in the other path? I'm not sure now", "in_reply_to_id": 168801004}