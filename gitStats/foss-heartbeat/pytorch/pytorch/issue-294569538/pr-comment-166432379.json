{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/166432379", "pull_request_review_id": 94493157, "id": 166432379, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NjQzMjM3OQ==", "diff_hunk": "@@ -222,6 +240,66 @@ def _register_grad_hooks(self):\n                     grad_acc.register_hook(self._make_param_hook(p, device_idx))\n                     self._grad_accs.append(grad_acc)\n \n+    def _register_nccl_grad_hook(self):\n+        \"\"\"\n+        This function registers the callback all-reduction function for the\n+        NCCL backend. All gradients will be all reduced in one single step.\n+        The NCCL reduction will directly be enqueued into the\n+        default CUDA stream. Therefore, no synchronization is needed.\n+        \"\"\"\n+        # creating a new group\n+        self.nccl_reduction_group_id = dist.new_group()\n+\n+        def reduction_fn_nccl():\n+            # This function only needs to be called once\n+            if not self.need_reduction:\n+                return\n+            self.need_reduction = False\n+            all_grads = [[] for _ in range(len(self._module_copies))]\n+            all_grads_coalesced = []\n+\n+            # Coalesce all the gradients\n+            # TODO: Add mixed precision support here\n+            for idx, module in enumerate(self._module_copies):\n+                for param in module.parameters():\n+                    if not param.requires_grad or param.grad is None:\n+                        continue\n+                    if param.grad.requires_grad:\n+                        raise RuntimeError(\"DistributedDataParallel only works \"\n+                                           \"with gradients that don't require \"\n+                                           \"grad\")\n+                    # Adding the gradients for reduction\n+                    all_grads[idx].append(param.grad.data)\n+                with torch.cuda.device(self.device_ids[idx]):\n+                    dev_grads_coalesced = _flatten_dense_tensors(all_grads[idx])", "path": "torch/nn/parallel/distributed.py", "position": null, "original_position": 94, "commit_id": "97e14897a9a7407c1e3aed1ab6d9ff0a9e1f9ed8", "original_commit_id": "d3ba5e9b0232cebc61ae98c24ad63c6d56b6e73c", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "This has no bound on the size, so you'll possibly double the memory usage. Use `_take_tensors` to bucket them appropriately.", "created_at": "2018-02-06T20:26:33Z", "updated_at": "2018-11-23T15:39:12Z", "html_url": "https://github.com/pytorch/pytorch/pull/5064#discussion_r166432379", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/5064", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/166432379"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/5064#discussion_r166432379"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/5064"}}, "body_html": "<p>This has no bound on the size, so you'll possibly double the memory usage. Use <code>_take_tensors</code> to bucket them appropriately.</p>", "body_text": "This has no bound on the size, so you'll possibly double the memory usage. Use _take_tensors to bucket them appropriately."}