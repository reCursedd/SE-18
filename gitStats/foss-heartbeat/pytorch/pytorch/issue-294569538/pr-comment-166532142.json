{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/166532142", "pull_request_review_id": 94606855, "id": 166532142, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NjUzMjE0Mg==", "diff_hunk": "@@ -222,6 +240,66 @@ def _register_grad_hooks(self):\n                     grad_acc.register_hook(self._make_param_hook(p, device_idx))\n                     self._grad_accs.append(grad_acc)\n \n+    def _register_nccl_grad_hook(self):\n+        \"\"\"\n+        This function registers the callback all-reduction function for the\n+        NCCL backend. All gradients will be all reduced in one single step.\n+        The NCCL reduction will directly be enqueued into the\n+        default CUDA stream. Therefore, no synchronization is needed.\n+        \"\"\"\n+        # creating a new group\n+        self.nccl_reduction_group_id = dist.new_group()\n+\n+        def reduction_fn_nccl():\n+            # This function only needs to be called once\n+            if not self.need_reduction:\n+                return\n+            self.need_reduction = False\n+            all_grads = [[] for _ in range(len(self._module_copies))]\n+            all_grads_coalesced = []\n+\n+            # Coalesce all the gradients\n+            # TODO: Add mixed precision support here\n+            for idx, module in enumerate(self._module_copies):\n+                for param in module.parameters():\n+                    if not param.requires_grad or param.grad is None:\n+                        continue\n+                    if param.grad.requires_grad:\n+                        raise RuntimeError(\"DistributedDataParallel only works \"\n+                                           \"with gradients that don't require \"\n+                                           \"grad\")\n+                    # Adding the gradients for reduction\n+                    all_grads[idx].append(param.grad.data)\n+                with torch.cuda.device(self.device_ids[idx]):\n+                    dev_grads_coalesced = _flatten_dense_tensors(all_grads[idx])\n+                    all_grads_coalesced.append(dev_grads_coalesced)\n+\n+            # This single op will do all-reduce on all GPUs utilizing multiple\n+            # all reduce rings when we have more than one fast IB interfaces.\n+            # We will only use device 0's results, but this single op should be\n+            # faster than doing the following two operation sequentially:\n+            # (1) intra-node reduce to lead GPU, followed by\n+            # (2) inter-node allreduce for all the first lead GPUs in all nodes\n+            dist.all_reduce_multigpu(all_grads_coalesced,\n+                                     group=self.nccl_reduction_group_id)\n+\n+            # Now only work on the first lead GPU\n+            all_grads_coalesced[0] /= dist.get_world_size()\n+            for grad, reduced in \\\n+                    zip(all_grads[0],\n+                        _unflatten_dense_tensors(all_grads_coalesced[0],\n+                                                 all_grads[0])):\n+                grad.copy_(reduced)\n+\n+        # Now register the reduction function in the execution engine\n+        for module in self._module_copies:\n+            for p in module.parameters():\n+                if p.requires_grad:\n+                    def allreduce_hook(*unused):\n+                        Variable._execution_engine.\\", "path": "torch/nn/parallel/distributed.py", "position": null, "original_position": 119, "commit_id": "97e14897a9a7407c1e3aed1ab6d9ff0a9e1f9ed8", "original_commit_id": "d3ba5e9b0232cebc61ae98c24ad63c6d56b6e73c", "user": {"login": "teng-li", "id": 8120856, "node_id": "MDQ6VXNlcjgxMjA4NTY=", "avatar_url": "https://avatars2.githubusercontent.com/u/8120856?v=4", "gravatar_id": "", "url": "https://api.github.com/users/teng-li", "html_url": "https://github.com/teng-li", "followers_url": "https://api.github.com/users/teng-li/followers", "following_url": "https://api.github.com/users/teng-li/following{/other_user}", "gists_url": "https://api.github.com/users/teng-li/gists{/gist_id}", "starred_url": "https://api.github.com/users/teng-li/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/teng-li/subscriptions", "organizations_url": "https://api.github.com/users/teng-li/orgs", "repos_url": "https://api.github.com/users/teng-li/repos", "events_url": "https://api.github.com/users/teng-li/events{/privacy}", "received_events_url": "https://api.github.com/users/teng-li/received_events", "type": "User", "site_admin": false}, "body": "80 line limit is FB's coding style :) So I think a lot of the PR does that too.", "created_at": "2018-02-07T07:00:54Z", "updated_at": "2018-11-23T15:39:17Z", "html_url": "https://github.com/pytorch/pytorch/pull/5064#discussion_r166532142", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/5064", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/166532142"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/5064#discussion_r166532142"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/5064"}}, "body_html": "<p>80 line limit is FB's coding style :) So I think a lot of the PR does that too.</p>", "body_text": "80 line limit is FB's coding style :) So I think a lot of the PR does that too.", "in_reply_to_id": 166432978}