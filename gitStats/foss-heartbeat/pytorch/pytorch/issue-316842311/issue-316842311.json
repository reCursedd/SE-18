{"url": "https://api.github.com/repos/pytorch/pytorch/issues/6862", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/6862/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/6862/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/6862/events", "html_url": "https://github.com/pytorch/pytorch/issues/6862", "id": 316842311, "node_id": "MDU6SXNzdWUzMTY4NDIzMTE=", "number": 6862, "title": "Arguments are located on different GPU with torch.nn.EmbeddingBag", "user": {"login": "theevann", "id": 3309183, "node_id": "MDQ6VXNlcjMzMDkxODM=", "avatar_url": "https://avatars3.githubusercontent.com/u/3309183?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theevann", "html_url": "https://github.com/theevann", "followers_url": "https://api.github.com/users/theevann/followers", "following_url": "https://api.github.com/users/theevann/following{/other_user}", "gists_url": "https://api.github.com/users/theevann/gists{/gist_id}", "starred_url": "https://api.github.com/users/theevann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theevann/subscriptions", "organizations_url": "https://api.github.com/users/theevann/orgs", "repos_url": "https://api.github.com/users/theevann/repos", "events_url": "https://api.github.com/users/theevann/events{/privacy}", "received_events_url": "https://api.github.com/users/theevann/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-04-23T14:39:04Z", "updated_at": "2018-04-23T15:23:29Z", "closed_at": "2018-04-23T15:23:12Z", "author_association": "NONE", "body_html": "<h2>Issue description</h2>\n<p>Question unanswered on pytorch forum that looks like a bug.</p>\n<p>When:</p>\n<ul>\n<li>using <code>torch.nn.EmbeddingBag</code></li>\n<li>without an offset but with a 2D (B x N) batch</li>\n<li>with cuda</li>\n<li>on a gpu different than 0</li>\n</ul>\n<p>we get an \" <em>arguments are located on different GPU</em> \" error.</p>\n<h2>Code example</h2>\n<pre><code>import torch\nfrom torch.autograd import Variable\n\ne = torch.nn.EmbeddingBag(10, 3)\na = Variable(torch.LongTensor([[1,2,3],[4,5,6]]))\n\ne(a)  # OK\n\ne.cuda(0)\na = a.cuda(0)\ne(a)  # OK\n\ne.cuda(1)\na = a.cuda(1)\ne(a)  # ERROR\n\ntorch.cuda.set_device(1)\ne(a)  # OK\n\n</code></pre>\n<p>Is that a bug ?</p>\n<p>The trick to use <code>torch.cuda.set_device(1)</code> works, but that shouldn't be necessary according to me.</p>\n<h2>System Info</h2>\n<p>PyTorch version: 0.3.1.post2<br>\nIs debug build: No<br>\nCUDA used to build PyTorch: 8.0.61</p>\n<p>OS: Ubuntu 16.04.3 LTS<br>\nGCC version: (Ubuntu 5.4.0-6ubuntu1~16.04.9) 5.4.0 20160609<br>\nCMake version: version 3.10.0</p>\n<p>Python version: 3.6<br>\nIs CUDA available: Yes<br>\nCUDA runtime version: Could not collect<br>\nGPU models and configuration:<br>\nGPU 0: GeForce GTX TITAN X<br>\nGPU 1: GeForce GTX TITAN X<br>\nGPU 2: GeForce GTX TITAN X<br>\nGPU 3: GeForce GTX TITAN X<br>\nGPU 4: GeForce GTX TITAN X<br>\nGPU 5: GeForce GTX TITAN X<br>\nGPU 6: GeForce GTX TITAN X<br>\nGPU 7: GeForce GTX TITAN X</p>\n<p>Nvidia driver version: 384.111<br>\ncuDNN version: Probably one of the following:<br>\n/usr/lib/x86_64-linux-gnu/libcudnn.so.6.0.21<br>\n/usr/local/cuda-8.0/lib64/libcudnn.so<br>\n/usr/local/cuda-8.0/lib64/libcudnn.so.7<br>\n/usr/local/cuda-8.0/lib64/libcudnn.so.7.0.4<br>\n/usr/local/cuda-8.0/lib64/libcudnn_static.a<br>\n/usr/local/lib/python3.5/dist-packages/torch/lib/libcudnn-a2b758a6.so.7.0.3</p>\n<p>Versions of relevant libraries:<br>\n[pip3] numpy (1.13.3)<br>\n[pip3] torch (0.3.0.post4)<br>\n[pip3] torchtext (0.2.3)<br>\n[conda] cuda80                    1.0                  h205658b_0    pytorch<br>\n[conda] pytorch                   0.3.1           py36_cuda8.0.61_cudnn7.0.5_2    pytorch<br>\n[conda] torchvision               0.2.0            py36h17b6947_1    pytorch</p>", "body_text": "Issue description\nQuestion unanswered on pytorch forum that looks like a bug.\nWhen:\n\nusing torch.nn.EmbeddingBag\nwithout an offset but with a 2D (B x N) batch\nwith cuda\non a gpu different than 0\n\nwe get an \" arguments are located on different GPU \" error.\nCode example\nimport torch\nfrom torch.autograd import Variable\n\ne = torch.nn.EmbeddingBag(10, 3)\na = Variable(torch.LongTensor([[1,2,3],[4,5,6]]))\n\ne(a)  # OK\n\ne.cuda(0)\na = a.cuda(0)\ne(a)  # OK\n\ne.cuda(1)\na = a.cuda(1)\ne(a)  # ERROR\n\ntorch.cuda.set_device(1)\ne(a)  # OK\n\n\nIs that a bug ?\nThe trick to use torch.cuda.set_device(1) works, but that shouldn't be necessary according to me.\nSystem Info\nPyTorch version: 0.3.1.post2\nIs debug build: No\nCUDA used to build PyTorch: 8.0.61\nOS: Ubuntu 16.04.3 LTS\nGCC version: (Ubuntu 5.4.0-6ubuntu1~16.04.9) 5.4.0 20160609\nCMake version: version 3.10.0\nPython version: 3.6\nIs CUDA available: Yes\nCUDA runtime version: Could not collect\nGPU models and configuration:\nGPU 0: GeForce GTX TITAN X\nGPU 1: GeForce GTX TITAN X\nGPU 2: GeForce GTX TITAN X\nGPU 3: GeForce GTX TITAN X\nGPU 4: GeForce GTX TITAN X\nGPU 5: GeForce GTX TITAN X\nGPU 6: GeForce GTX TITAN X\nGPU 7: GeForce GTX TITAN X\nNvidia driver version: 384.111\ncuDNN version: Probably one of the following:\n/usr/lib/x86_64-linux-gnu/libcudnn.so.6.0.21\n/usr/local/cuda-8.0/lib64/libcudnn.so\n/usr/local/cuda-8.0/lib64/libcudnn.so.7\n/usr/local/cuda-8.0/lib64/libcudnn.so.7.0.4\n/usr/local/cuda-8.0/lib64/libcudnn_static.a\n/usr/local/lib/python3.5/dist-packages/torch/lib/libcudnn-a2b758a6.so.7.0.3\nVersions of relevant libraries:\n[pip3] numpy (1.13.3)\n[pip3] torch (0.3.0.post4)\n[pip3] torchtext (0.2.3)\n[conda] cuda80                    1.0                  h205658b_0    pytorch\n[conda] pytorch                   0.3.1           py36_cuda8.0.61_cudnn7.0.5_2    pytorch\n[conda] torchvision               0.2.0            py36h17b6947_1    pytorch", "body": "## Issue description\r\n\r\nQuestion unanswered on pytorch forum that looks like a bug.\r\n\r\nWhen:\r\n- using `torch.nn.EmbeddingBag`\r\n- without an offset but with a 2D (B x N) batch\r\n- with cuda\r\n- on a gpu different than 0\r\n\r\nwe get an \" *arguments are located on different GPU* \" error. \r\n\r\n## Code example\r\n\r\n```\r\nimport torch\r\nfrom torch.autograd import Variable\r\n\r\ne = torch.nn.EmbeddingBag(10, 3)\r\na = Variable(torch.LongTensor([[1,2,3],[4,5,6]]))\r\n\r\ne(a)  # OK\r\n\r\ne.cuda(0)\r\na = a.cuda(0)\r\ne(a)  # OK\r\n\r\ne.cuda(1)\r\na = a.cuda(1)\r\ne(a)  # ERROR\r\n\r\ntorch.cuda.set_device(1)\r\ne(a)  # OK\r\n\r\n```\r\n\r\nIs that a bug ?\r\n\r\nThe trick to use `torch.cuda.set_device(1)` works, but that shouldn't be necessary according to me.\r\n\r\n## System Info\r\n\r\nPyTorch version: 0.3.1.post2\r\nIs debug build: No\r\nCUDA used to build PyTorch: 8.0.61\r\n\r\nOS: Ubuntu 16.04.3 LTS\r\nGCC version: (Ubuntu 5.4.0-6ubuntu1~16.04.9) 5.4.0 20160609\r\nCMake version: version 3.10.0\r\n\r\nPython version: 3.6\r\nIs CUDA available: Yes\r\nCUDA runtime version: Could not collect\r\nGPU models and configuration: \r\nGPU 0: GeForce GTX TITAN X\r\nGPU 1: GeForce GTX TITAN X\r\nGPU 2: GeForce GTX TITAN X\r\nGPU 3: GeForce GTX TITAN X\r\nGPU 4: GeForce GTX TITAN X\r\nGPU 5: GeForce GTX TITAN X\r\nGPU 6: GeForce GTX TITAN X\r\nGPU 7: GeForce GTX TITAN X\r\n\r\nNvidia driver version: 384.111\r\ncuDNN version: Probably one of the following:\r\n/usr/lib/x86_64-linux-gnu/libcudnn.so.6.0.21\r\n/usr/local/cuda-8.0/lib64/libcudnn.so\r\n/usr/local/cuda-8.0/lib64/libcudnn.so.7\r\n/usr/local/cuda-8.0/lib64/libcudnn.so.7.0.4\r\n/usr/local/cuda-8.0/lib64/libcudnn_static.a\r\n/usr/local/lib/python3.5/dist-packages/torch/lib/libcudnn-a2b758a6.so.7.0.3\r\n\r\nVersions of relevant libraries:\r\n[pip3] numpy (1.13.3)\r\n[pip3] torch (0.3.0.post4)\r\n[pip3] torchtext (0.2.3)\r\n[conda] cuda80                    1.0                  h205658b_0    pytorch\r\n[conda] pytorch                   0.3.1           py36_cuda8.0.61_cudnn7.0.5_2    pytorch\r\n[conda] torchvision               0.2.0            py36h17b6947_1    pytorch\r\n"}