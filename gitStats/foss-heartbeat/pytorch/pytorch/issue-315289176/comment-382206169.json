{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/382206169", "html_url": "https://github.com/pytorch/pytorch/pull/6687#issuecomment-382206169", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/6687", "id": 382206169, "node_id": "MDEyOklzc3VlQ29tbWVudDM4MjIwNjE2OQ==", "user": {"login": "goldsborough", "id": 6429851, "node_id": "MDQ6VXNlcjY0Mjk4NTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/6429851?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goldsborough", "html_url": "https://github.com/goldsborough", "followers_url": "https://api.github.com/users/goldsborough/followers", "following_url": "https://api.github.com/users/goldsborough/following{/other_user}", "gists_url": "https://api.github.com/users/goldsborough/gists{/gist_id}", "starred_url": "https://api.github.com/users/goldsborough/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goldsborough/subscriptions", "organizations_url": "https://api.github.com/users/goldsborough/orgs", "repos_url": "https://api.github.com/users/goldsborough/repos", "events_url": "https://api.github.com/users/goldsborough/events{/privacy}", "received_events_url": "https://api.github.com/users/goldsborough/received_events", "type": "User", "site_admin": false}, "created_at": "2018-04-18T00:47:55Z", "updated_at": "2018-04-18T00:47:55Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Can you also <code>std::forward&lt;Args&gt;(args)...</code> inside the method, while you're at it? This is currently not handling move semantics correctly. You'll want to do the same for the <code>decltype</code>. It makes a difference when you have an overload that takes a <code>Tensor&amp;&amp;</code> and one a <code>const Tensor&amp;</code>, for example</p>", "body_text": "Can you also std::forward<Args>(args)... inside the method, while you're at it? This is currently not handling move semantics correctly. You'll want to do the same for the decltype. It makes a difference when you have an overload that takes a Tensor&& and one a const Tensor&, for example", "body": "Can you also `std::forward<Args>(args)...` inside the method, while you're at it? This is currently not handling move semantics correctly. You'll want to do the same for the `decltype`. It makes a difference when you have an overload that takes a `Tensor&&` and one a `const Tensor&`, for example"}