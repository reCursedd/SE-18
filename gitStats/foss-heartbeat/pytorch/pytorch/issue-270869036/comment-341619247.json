{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/341619247", "html_url": "https://github.com/pytorch/pytorch/issues/3462#issuecomment-341619247", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/3462", "id": 341619247, "node_id": "MDEyOklzc3VlQ29tbWVudDM0MTYxOTI0Nw==", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "created_at": "2017-11-03T04:12:23Z", "updated_at": "2017-11-03T04:13:47Z", "author_association": "CONTRIBUTOR", "body_html": "<p>This is a floating point accuracy problem; at large numbers, float can't distinguish small differences. If your numbers are not too big, increasing precision to double can help solve your problem:</p>\n<pre><code>import torch\n\nbatch_size = 3\ndim = 3\n\n### pytorch\na1 = torch.DoubleTensor(batch_size, dim).normal_()\nv1, r1 = a1.sort(dim=1)\n\ninc = torch.DoubleTensor(batch_size).fill_(1)[:,None]*99999999\na2 = inc + a1\nv2, r2 = a2.sort(dim=1)\n\nprint(r1)\nprint(r2)\n</code></pre>\n<p>Numpy does not have this problem because it defaults to double precision.</p>\n<p>It might also help if you can scale your log probabilities so that they fall within a range that can be accurately represented with floats.</p>", "body_text": "This is a floating point accuracy problem; at large numbers, float can't distinguish small differences. If your numbers are not too big, increasing precision to double can help solve your problem:\nimport torch\n\nbatch_size = 3\ndim = 3\n\n### pytorch\na1 = torch.DoubleTensor(batch_size, dim).normal_()\nv1, r1 = a1.sort(dim=1)\n\ninc = torch.DoubleTensor(batch_size).fill_(1)[:,None]*99999999\na2 = inc + a1\nv2, r2 = a2.sort(dim=1)\n\nprint(r1)\nprint(r2)\n\nNumpy does not have this problem because it defaults to double precision.\nIt might also help if you can scale your log probabilities so that they fall within a range that can be accurately represented with floats.", "body": "This is a floating point accuracy problem; at large numbers, float can't distinguish small differences. If your numbers are not too big, increasing precision to double can help solve your problem:\r\n\r\n```\r\nimport torch\r\n\r\nbatch_size = 3\r\ndim = 3\r\n\r\n### pytorch\r\na1 = torch.DoubleTensor(batch_size, dim).normal_()\r\nv1, r1 = a1.sort(dim=1)\r\n\r\ninc = torch.DoubleTensor(batch_size).fill_(1)[:,None]*99999999\r\na2 = inc + a1\r\nv2, r2 = a2.sort(dim=1)\r\n\r\nprint(r1)\r\nprint(r2)\r\n```\r\n\r\nNumpy does not have this problem because it defaults to double precision.\r\n\r\nIt might also help if you can scale your log probabilities so that they fall within a range that can be accurately represented with floats."}