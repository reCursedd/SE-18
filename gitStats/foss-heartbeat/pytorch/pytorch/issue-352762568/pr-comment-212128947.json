{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/212128947", "pull_request_review_id": 148695045, "id": 212128947, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMjEyODk0Nw==", "diff_hunk": "@@ -317,87 +219,72 @@ RNNImpl::RNNImpl(RNNOptions options)\n           detail::RNNOptionsBase(options.input_size_, options.hidden_size_)\n               .layers(options.layers_)\n               .with_bias(options.with_bias_)\n-              .dropout(options.dropout_),\n-          /*cudnn_mode=*/static_cast<CuDNNMode>(options.activation_)),\n-      options(options) {\n+              .dropout(options.dropout_)\n+              .bidirectional(options.bidirectional_)\n+              .batch_first(options.batch_first_),\n+          static_cast<CuDNNMode>(options.activation_)),\n+      options(options) {}\n+\n+RNNOutput RNNImpl::forward(Tensor input, Tensor state) {\n   switch (options.activation_) {\n-    case RNNActivation::ReLU: {\n-      activation_function_ = torch::relu;\n-      break;\n-    }\n-    case RNNActivation::Tanh: {\n-      activation_function_ = torch::tanh;\n-      break;\n-    }\n+    case RNNActivation::ReLU:\n+      return generic_forward(\n+          static_cast<RNNFunctionSignature*>(&torch::rnn_relu), input, state);\n+    case RNNActivation::Tanh:\n+      return generic_forward(\n+          static_cast<RNNFunctionSignature*>(&torch::rnn_tanh), input, state);\n+    default:\n+      AT_ERROR(\"Unhandled RNN activation function!\");\n   }\n }\n \n-Tensor RNNImpl::cell_forward(Tensor input, Tensor state, int64_t layer) {\n-  auto hx = state.defined()\n-      ? state\n-      : torch::zeros({input.size(0), options.hidden_size_}, input.options());\n-\n-  auto h = linear(input, w_ih[layer], b_ih[layer]) +\n-      linear(hx, w_hh[layer], b_hh[layer]);\n-\n-  return torch::stack(activation_function_(h));\n-}\n-\n // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ LSTM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n LSTMImpl::LSTMImpl(LSTMOptions options)\n     : detail::RNNImplBase<LSTMImpl>(\n           options,\n-          /*cudnn_mode=*/CuDNNMode::LSTM,\n-          /*number_of_gates=*/4,\n-          /*has_cell_state=*/true) {}\n-\n-Tensor LSTMImpl::cell_forward(Tensor input, Tensor state, int64_t layer) {\n-  auto hid = state.defined()\n-      ? state\n-      : torch::zeros({2, input.size(0), options.hidden_size_}, input.options());\n-  auto hx = hid[0];\n-  auto cx = hid[1];\n-\n-  auto gates = linear(input, w_ih[layer], b_ih[layer]) +\n-      linear(hx, w_hh[layer], b_hh[layer]);\n-\n-  auto chunked = gates.chunk(4, 1);\n-  auto in_gate = chunked[0].sigmoid();\n-  auto forget_gate = chunked[1].sigmoid();\n-  auto cell_gate = chunked[2].tanh();\n-  auto out_gate = chunked[3].sigmoid();\n-\n-  auto cy = (forget_gate * cx) + (in_gate * cell_gate);\n-  auto hy = out_gate * cy.tanh();\n-\n-  return torch::stack({hy, cy}, 0);\n+          CuDNNMode::LSTM,\n+          /*number_of_gates=*/4) {}\n+\n+RNNOutput LSTMImpl::forward(Tensor input, Tensor state) {", "path": "torch/csrc/api/src/nn/modules/rnn.cpp", "position": 411, "original_position": 390, "commit_id": "1474faaf96f2466af81ee8bf5f4d9ab8a2eb095b", "original_commit_id": "f72a058c5a1d39e53f806688ab480701cb9d3b00", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "It would be nice to have this one conform to the Python APIs for hidden state.", "created_at": "2018-08-22T22:21:11Z", "updated_at": "2018-11-23T15:49:47Z", "html_url": "https://github.com/pytorch/pytorch/pull/10761#discussion_r212128947", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/10761", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/212128947"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/10761#discussion_r212128947"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/10761"}}, "body_html": "<p>It would be nice to have this one conform to the Python APIs for hidden state.</p>", "body_text": "It would be nice to have this one conform to the Python APIs for hidden state."}