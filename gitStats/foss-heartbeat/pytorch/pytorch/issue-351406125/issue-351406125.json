{"url": "https://api.github.com/repos/pytorch/pytorch/issues/10601", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/10601/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/10601/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/10601/events", "html_url": "https://github.com/pytorch/pytorch/issues/10601", "id": 351406125, "node_id": "MDU6SXNzdWUzNTE0MDYxMjU=", "number": 10601, "title": "[Caffe2] Error LNK2019 unresolved symbols due to mis-defined TypeMeta::Id<T>.", "user": {"login": "xkszltl", "id": 5203025, "node_id": "MDQ6VXNlcjUyMDMwMjU=", "avatar_url": "https://avatars0.githubusercontent.com/u/5203025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xkszltl", "html_url": "https://github.com/xkszltl", "followers_url": "https://api.github.com/users/xkszltl/followers", "following_url": "https://api.github.com/users/xkszltl/following{/other_user}", "gists_url": "https://api.github.com/users/xkszltl/gists{/gist_id}", "starred_url": "https://api.github.com/users/xkszltl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xkszltl/subscriptions", "organizations_url": "https://api.github.com/users/xkszltl/orgs", "repos_url": "https://api.github.com/users/xkszltl/repos", "events_url": "https://api.github.com/users/xkszltl/events{/privacy}", "received_events_url": "https://api.github.com/users/xkszltl/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-08-16T23:46:53Z", "updated_at": "2018-08-17T21:23:32Z", "closed_at": "2018-08-17T09:39:22Z", "author_association": "CONTRIBUTOR", "body_html": "<h2>Issue description</h2>\n<p>VS complains about <code>error LNK2019: unresolved external symbol</code> for several tests (e.g <code>blob_test</code>).</p>\n<p><div class=\"border rounded-1 my-2\">\n  <div class=\"f6 px-3 py-2 lh-condensed border-bottom bg-gray-light\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/pytorch/pytorch/blob/36939417b23eb20d4bedb2cd8388c805874876f2/caffe2/core/blob_test.cc#L41-L43\">pytorch/caffe2/core/blob_test.cc</a>\n    </p>\n    <p class=\"mb-0 text-gray-light\">\n        Lines 41 to 43\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/pytorch/pytorch/commit/36939417b23eb20d4bedb2cd8388c805874876f2\">3693941</a>\n    </p>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L41\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"41\"></td>\n          <td id=\"LC41\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-en\">CAFFE_KNOWN_TYPE</span>(BlobTestFoo); </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L42\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"42\"></td>\n          <td id=\"LC42\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-en\">CAFFE_KNOWN_TYPE</span>(BlobTestBar); </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L43\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"43\"></td>\n          <td id=\"LC43\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-en\">CAFFE_KNOWN_TYPE</span>(BlobTestNonDefaultConstructible); </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n</p>\n<pre><code> blob_test.obj : error LNK2019: unresolved external symbol \"__declspec(dllimport) public: static class caffe2::TypeIdentifier __cdecl caffe2::TypeMeta::Id&lt;class caffe2::`anonymous namespace'::BlobTestFoo&gt;(void)\" (__imp_??$Id@VBlobTestFoo@?A0xd2e92dc8@caffe2@@@TypeMeta@caffe2@@SA?AVTypeIdentifier@1@XZ) referenced in function \"private: virtual void __cdecl caffe2::`anonymous namespace'::BlobTest_BlobMove_Test::TestBody(void)\" (?TestBody@BlobTest_BlobMove_Test@?A0xd2e92dc8@caffe2@@EEAAXXZ) [caffe2\\blob_test.vcxproj]\n  blob_test.obj : error LNK2019: unresolved external symbol \"__declspec(dllimport) public: static class caffe2::TypeIdentifier __cdecl caffe2::TypeMeta::Id&lt;class caffe2::`anonymous namespace'::BlobTestBar&gt;(void)\" (__imp_??$Id@VBlobTestBar@?A0xd2e92dc8@caffe2@@@TypeMeta@caffe2@@SA?AVTypeIdentifier@1@XZ) referenced in function \"private: virtual void __cdecl caffe2::`anonymous namespace'::BlobTest_CastingMessage_Test::TestBody(void)\" (?TestBody@BlobTest_CastingMessage_Test@?A0xd2e92dc8@caffe2@@EEAAXXZ) [build\\caffe2\\blob_test.vcxproj]\n  blob_test.obj : error LNK2019: unresolved external symbol \"__declspec(dllimport) public: static class caffe2::TypeIdentifier __cdecl caffe2::TypeMeta::Id&lt;class caffe2::`anonymous namespace'::BlobTestNonDefaultConstructible&gt;(void)\" (__imp_??$Id@VBlobTestNonDefaultConstructible@?A0xd2e92dc8@caffe2@@@TypeMeta@caffe2@@SA?AVTypeIdentifier@1@XZ) referenced in function \"private: virtual void __cdecl caffe2::`anonymous namespace'::BlobTest_BlobNonConstructible_Test::TestBody(void)\" (?TestBody@BlobTest_BlobNonConstructible_Test@?A0xd2e92dc8@caffe2@@EEAAXXZ) [build\\caffe2\\blob_test.vcxproj]\n  blob_test.obj : error LNK2019: unresolved external symbol \"__declspec(dllimport) public: static class caffe2::TypeIdentifier __cdecl caffe2::TypeMeta::Id&lt;struct caffe2::`anonymous namespace'::DummyType&gt;(void)\" (__imp_??$Id@UDummyType@?A0xd2e92dc8@caffe2@@@TypeMeta@caffe2@@SA?AVTypeIdentifier@1@XZ) referenced in function \"public: virtual void __cdecl caffe2::`anonymous namespace'::DummyTypeSerializer::Serialize(class caffe2::Blob const &amp;,class std::basic_string&lt;char,struct std::char_traits&lt;char&gt;,class std::allocator&lt;char&gt; &gt; const &amp;,class std::function&lt;void __cdecl(class std::basic_string&lt;char,struct std::char_traits&lt;char&gt;,class std::allocator&lt;char&gt; &gt; const &amp;,class std::basic_string&lt;char,struct std::char_traits&lt;char&gt;,class std::allocator&lt;char&gt; &gt; const &amp;)&gt;)\" (?Serialize@DummyTypeSerializer@?A0xd2e92dc8@caffe2@@UEAAXAEBVBlob@3@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$function@$$A6AXAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z@6@@Z) [build\\caffe2\\blob_test.vcxproj]\n  build\\bin\\RelWithDebInfo\\blob_test.exe : fatal error LNK1120: 4 unresolved externals [build\\caffe2\\blob_test.vcxproj]\n</code></pre>\n<p><code>CAFFE_KNOWN_TYPE</code> decorates <code>TypeMeta::Id&lt;T&gt;</code> with <code>AT_CORE_API</code>, which is wrong according to the note:<br>\n<div class=\"border rounded-1 my-2\">\n  <div class=\"f6 px-3 py-2 lh-condensed border-bottom bg-gray-light\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/pytorch/pytorch/blob/05dcf00644fb5d9701ac68b2b0ef66149f228cf4/aten/src/ATen/core/typeid.h#L383-L422\">pytorch/aten/src/ATen/core/typeid.h</a>\n    </p>\n    <p class=\"mb-0 text-gray-light\">\n        Lines 383 to 422\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/pytorch/pytorch/commit/05dcf00644fb5d9701ac68b2b0ef66149f228cf4\">05dcf00</a>\n    </p>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L383\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"383\"></td>\n          <td id=\"LC383\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-c\"><span class=\"pl-c\">/*</span>*</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L384\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"384\"></td>\n          <td id=\"LC384\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-c\"> * Register unique id for a type so it can be used in TypeMeta context, e.g. be</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L385\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"385\"></td>\n          <td id=\"LC385\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-c\"> * used as a type for Blob or for Tensor elements.</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L386\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"386\"></td>\n          <td id=\"LC386\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-c\"> *</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L387\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"387\"></td>\n          <td id=\"LC387\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-c\"> * CAFFE_KNOWN_TYPE does explicit instantiation of TypeMeta::Id&lt;T&gt; template</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L388\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"388\"></td>\n          <td id=\"LC388\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-c\"> * function and thus needs to be put in a single translation unit (.cpp file)</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L389\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"389\"></td>\n          <td id=\"LC389\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-c\"> * for a given type T. Other translation units that use type T as a type of the</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L390\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"390\"></td>\n          <td id=\"LC390\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-c\"> * caffe2::Blob or element type of caffe2::Tensor need to depend on the</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L391\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"391\"></td>\n          <td id=\"LC391\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-c\"> * translation unit that contains CAFFE_KNOWN_TYPE declaration via regular</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L392\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"392\"></td>\n          <td id=\"LC392\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-c\"> * linkage dependencies.</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L393\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"393\"></td>\n          <td id=\"LC393\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-c\"> *</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L394\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"394\"></td>\n          <td id=\"LC394\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-c\"> * NOTE: the macro needs to be invoked in ::caffe2 namespace</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L395\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"395\"></td>\n          <td id=\"LC395\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-c\"> <span class=\"pl-c\">*/</span></span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L396\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"396\"></td>\n          <td id=\"LC396\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-c\"><span class=\"pl-c\">//</span> Implementation note: in MSVC, we will need to prepend the AT_CORE_API</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L397\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"397\"></td>\n          <td id=\"LC397\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-c\"><span class=\"pl-c\">//</span> keyword in order to get things compiled properly. in Linux, gcc seems to</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L398\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"398\"></td>\n          <td id=\"LC398\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-c\"><span class=\"pl-c\">//</span> create attribute ignored error for explicit template instantiations, see</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L399\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"399\"></td>\n          <td id=\"LC399\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-c\"><span class=\"pl-c\">//</span>   http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0537r0.html</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L400\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"400\"></td>\n          <td id=\"LC400\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-c\"><span class=\"pl-c\">//</span>   https://gcc.gnu.org/bugzilla/show_bug.cgi?id=51930</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L401\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"401\"></td>\n          <td id=\"LC401\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-c\"><span class=\"pl-c\">//</span> and as a result, we define these two macros slightly differently.</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L402\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"402\"></td>\n          <td id=\"LC402\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-c\"><span class=\"pl-c\">//</span> TODO(jiayq): AT_CORE_API below is not correct, because we may use the</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L403\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"403\"></td>\n          <td id=\"LC403\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-c\"><span class=\"pl-c\">//</span> definition in third party dependent libraries. The proper way is to use</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L404\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"404\"></td>\n          <td id=\"LC404\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-c\"><span class=\"pl-c\">//</span> CAFFE2_EXPORT (which explicitly requires dllexport). Marking this as a</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L405\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"405\"></td>\n          <td id=\"LC405\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-c\"><span class=\"pl-c\">//</span> todo item when the unified build is finished.</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L406\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"406\"></td>\n          <td id=\"LC406\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> #<span class=\"pl-k\">ifdef</span> _MSC_VER </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L407\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"407\"></td>\n          <td id=\"LC407\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> #<span class=\"pl-k\">define</span> <span class=\"pl-en\">CAFFE_KNOWN_TYPE</span>(<span class=\"pl-v\">T</span>)                                               \\ </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L408\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"408\"></td>\n          <td id=\"LC408\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   <span class=\"pl-k\">template </span>&lt;&gt;                                                             \\ </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L409\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"409\"></td>\n          <td id=\"LC409\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   AT_CORE_API TypeIdentifier TypeMeta::Id&lt;T&gt;() {                          \\ </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L410\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"410\"></td>\n          <td id=\"LC410\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     <span class=\"pl-k\">static</span> <span class=\"pl-k\">const</span> TypeIdentifier type_id = <span class=\"pl-c1\">TypeIdentifier::createTypeId</span>(); \\ </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L411\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"411\"></td>\n          <td id=\"LC411\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     <span class=\"pl-k\">static</span> TypeNameRegisterer&lt;T&gt; <span class=\"pl-c1\">registerer</span>(type_id, #T);                 \\ </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L412\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"412\"></td>\n          <td id=\"LC412\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     <span class=\"pl-k\">return</span> type_id;                                                       \\ </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L413\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"413\"></td>\n          <td id=\"LC413\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   } </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L414\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"414\"></td>\n          <td id=\"LC414\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> #<span class=\"pl-k\">else</span> <span class=\"pl-c\"><span class=\"pl-c\">//</span> _MSC_VER</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L415\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"415\"></td>\n          <td id=\"LC415\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> #<span class=\"pl-k\">define</span> <span class=\"pl-en\">CAFFE_KNOWN_TYPE</span>(<span class=\"pl-v\">T</span>)                                               \\ </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L416\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"416\"></td>\n          <td id=\"LC416\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   <span class=\"pl-k\">template </span>&lt;&gt;                                                             \\ </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L417\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"417\"></td>\n          <td id=\"LC417\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   TypeIdentifier TypeMeta::Id&lt;T&gt;() {                                      \\ </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L418\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"418\"></td>\n          <td id=\"LC418\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     <span class=\"pl-k\">static</span> <span class=\"pl-k\">const</span> TypeIdentifier type_id = <span class=\"pl-c1\">TypeIdentifier::createTypeId</span>(); \\ </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L419\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"419\"></td>\n          <td id=\"LC419\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     <span class=\"pl-k\">static</span> TypeNameRegisterer&lt;T&gt; <span class=\"pl-c1\">registerer</span>(type_id, #T);                 \\ </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L420\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"420\"></td>\n          <td id=\"LC420\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     <span class=\"pl-k\">return</span> type_id;                                                       \\ </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L421\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"421\"></td>\n          <td id=\"LC421\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   } </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L422\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"422\"></td>\n          <td id=\"LC422\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> #<span class=\"pl-k\">endif</span> </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n</p>\n<h2>System Info</h2>\n<ul>\n<li>PyTorch or Caffe2: C2</li>\n<li>How you installed PyTorch (conda, pip, source): src</li>\n<li>Build command you used (if compiling from source): cmake</li>\n<li>OS: Win10</li>\n<li>PyTorch version: master</li>\n<li>VS version (if compiling from source): 2017</li>\n<li>CMake version: 3.12</li>\n</ul>", "body_text": "Issue description\nVS complains about error LNK2019: unresolved external symbol for several tests (e.g blob_test).\n\n  \n    \n      pytorch/caffe2/core/blob_test.cc\n    \n    \n        Lines 41 to 43\n      in\n      3693941\n    \n    \n    \n    \n\n        \n          \n           CAFFE_KNOWN_TYPE(BlobTestFoo); \n        \n\n        \n          \n           CAFFE_KNOWN_TYPE(BlobTestBar); \n        \n\n        \n          \n           CAFFE_KNOWN_TYPE(BlobTestNonDefaultConstructible); \n        \n    \n  \n\n\n blob_test.obj : error LNK2019: unresolved external symbol \"__declspec(dllimport) public: static class caffe2::TypeIdentifier __cdecl caffe2::TypeMeta::Id<class caffe2::`anonymous namespace'::BlobTestFoo>(void)\" (__imp_??$Id@VBlobTestFoo@?A0xd2e92dc8@caffe2@@@TypeMeta@caffe2@@SA?AVTypeIdentifier@1@XZ) referenced in function \"private: virtual void __cdecl caffe2::`anonymous namespace'::BlobTest_BlobMove_Test::TestBody(void)\" (?TestBody@BlobTest_BlobMove_Test@?A0xd2e92dc8@caffe2@@EEAAXXZ) [caffe2\\blob_test.vcxproj]\n  blob_test.obj : error LNK2019: unresolved external symbol \"__declspec(dllimport) public: static class caffe2::TypeIdentifier __cdecl caffe2::TypeMeta::Id<class caffe2::`anonymous namespace'::BlobTestBar>(void)\" (__imp_??$Id@VBlobTestBar@?A0xd2e92dc8@caffe2@@@TypeMeta@caffe2@@SA?AVTypeIdentifier@1@XZ) referenced in function \"private: virtual void __cdecl caffe2::`anonymous namespace'::BlobTest_CastingMessage_Test::TestBody(void)\" (?TestBody@BlobTest_CastingMessage_Test@?A0xd2e92dc8@caffe2@@EEAAXXZ) [build\\caffe2\\blob_test.vcxproj]\n  blob_test.obj : error LNK2019: unresolved external symbol \"__declspec(dllimport) public: static class caffe2::TypeIdentifier __cdecl caffe2::TypeMeta::Id<class caffe2::`anonymous namespace'::BlobTestNonDefaultConstructible>(void)\" (__imp_??$Id@VBlobTestNonDefaultConstructible@?A0xd2e92dc8@caffe2@@@TypeMeta@caffe2@@SA?AVTypeIdentifier@1@XZ) referenced in function \"private: virtual void __cdecl caffe2::`anonymous namespace'::BlobTest_BlobNonConstructible_Test::TestBody(void)\" (?TestBody@BlobTest_BlobNonConstructible_Test@?A0xd2e92dc8@caffe2@@EEAAXXZ) [build\\caffe2\\blob_test.vcxproj]\n  blob_test.obj : error LNK2019: unresolved external symbol \"__declspec(dllimport) public: static class caffe2::TypeIdentifier __cdecl caffe2::TypeMeta::Id<struct caffe2::`anonymous namespace'::DummyType>(void)\" (__imp_??$Id@UDummyType@?A0xd2e92dc8@caffe2@@@TypeMeta@caffe2@@SA?AVTypeIdentifier@1@XZ) referenced in function \"public: virtual void __cdecl caffe2::`anonymous namespace'::DummyTypeSerializer::Serialize(class caffe2::Blob const &,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,class std::function<void __cdecl(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)>)\" (?Serialize@DummyTypeSerializer@?A0xd2e92dc8@caffe2@@UEAAXAEBVBlob@3@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$function@$$A6AXAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z@6@@Z) [build\\caffe2\\blob_test.vcxproj]\n  build\\bin\\RelWithDebInfo\\blob_test.exe : fatal error LNK1120: 4 unresolved externals [build\\caffe2\\blob_test.vcxproj]\n\nCAFFE_KNOWN_TYPE decorates TypeMeta::Id<T> with AT_CORE_API, which is wrong according to the note:\n\n  \n    \n      pytorch/aten/src/ATen/core/typeid.h\n    \n    \n        Lines 383 to 422\n      in\n      05dcf00\n    \n    \n    \n    \n\n        \n          \n           /** \n        \n\n        \n          \n            * Register unique id for a type so it can be used in TypeMeta context, e.g. be \n        \n\n        \n          \n            * used as a type for Blob or for Tensor elements. \n        \n\n        \n          \n            * \n        \n\n        \n          \n            * CAFFE_KNOWN_TYPE does explicit instantiation of TypeMeta::Id<T> template \n        \n\n        \n          \n            * function and thus needs to be put in a single translation unit (.cpp file) \n        \n\n        \n          \n            * for a given type T. Other translation units that use type T as a type of the \n        \n\n        \n          \n            * caffe2::Blob or element type of caffe2::Tensor need to depend on the \n        \n\n        \n          \n            * translation unit that contains CAFFE_KNOWN_TYPE declaration via regular \n        \n\n        \n          \n            * linkage dependencies. \n        \n\n        \n          \n            * \n        \n\n        \n          \n            * NOTE: the macro needs to be invoked in ::caffe2 namespace \n        \n\n        \n          \n            */ \n        \n\n        \n          \n           // Implementation note: in MSVC, we will need to prepend the AT_CORE_API \n        \n\n        \n          \n           // keyword in order to get things compiled properly. in Linux, gcc seems to \n        \n\n        \n          \n           // create attribute ignored error for explicit template instantiations, see \n        \n\n        \n          \n           //   http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0537r0.html \n        \n\n        \n          \n           //   https://gcc.gnu.org/bugzilla/show_bug.cgi?id=51930 \n        \n\n        \n          \n           // and as a result, we define these two macros slightly differently. \n        \n\n        \n          \n           // TODO(jiayq): AT_CORE_API below is not correct, because we may use the \n        \n\n        \n          \n           // definition in third party dependent libraries. The proper way is to use \n        \n\n        \n          \n           // CAFFE2_EXPORT (which explicitly requires dllexport). Marking this as a \n        \n\n        \n          \n           // todo item when the unified build is finished. \n        \n\n        \n          \n           #ifdef _MSC_VER \n        \n\n        \n          \n           #define CAFFE_KNOWN_TYPE(T)                                               \\ \n        \n\n        \n          \n             template <>                                                             \\ \n        \n\n        \n          \n             AT_CORE_API TypeIdentifier TypeMeta::Id<T>() {                          \\ \n        \n\n        \n          \n               static const TypeIdentifier type_id = TypeIdentifier::createTypeId(); \\ \n        \n\n        \n          \n               static TypeNameRegisterer<T> registerer(type_id, #T);                 \\ \n        \n\n        \n          \n               return type_id;                                                       \\ \n        \n\n        \n          \n             } \n        \n\n        \n          \n           #else // _MSC_VER \n        \n\n        \n          \n           #define CAFFE_KNOWN_TYPE(T)                                               \\ \n        \n\n        \n          \n             template <>                                                             \\ \n        \n\n        \n          \n             TypeIdentifier TypeMeta::Id<T>() {                                      \\ \n        \n\n        \n          \n               static const TypeIdentifier type_id = TypeIdentifier::createTypeId(); \\ \n        \n\n        \n          \n               static TypeNameRegisterer<T> registerer(type_id, #T);                 \\ \n        \n\n        \n          \n               return type_id;                                                       \\ \n        \n\n        \n          \n             } \n        \n\n        \n          \n           #endif \n        \n    \n  \n\n\nSystem Info\n\nPyTorch or Caffe2: C2\nHow you installed PyTorch (conda, pip, source): src\nBuild command you used (if compiling from source): cmake\nOS: Win10\nPyTorch version: master\nVS version (if compiling from source): 2017\nCMake version: 3.12", "body": "## Issue description\r\n\r\nVS complains about `error LNK2019: unresolved external symbol` for several tests (e.g `blob_test`).\r\n\r\nhttps://github.com/pytorch/pytorch/blob/36939417b23eb20d4bedb2cd8388c805874876f2/caffe2/core/blob_test.cc#L41-L43\r\n\r\n```\r\n blob_test.obj : error LNK2019: unresolved external symbol \"__declspec(dllimport) public: static class caffe2::TypeIdentifier __cdecl caffe2::TypeMeta::Id<class caffe2::`anonymous namespace'::BlobTestFoo>(void)\" (__imp_??$Id@VBlobTestFoo@?A0xd2e92dc8@caffe2@@@TypeMeta@caffe2@@SA?AVTypeIdentifier@1@XZ) referenced in function \"private: virtual void __cdecl caffe2::`anonymous namespace'::BlobTest_BlobMove_Test::TestBody(void)\" (?TestBody@BlobTest_BlobMove_Test@?A0xd2e92dc8@caffe2@@EEAAXXZ) [caffe2\\blob_test.vcxproj]\r\n  blob_test.obj : error LNK2019: unresolved external symbol \"__declspec(dllimport) public: static class caffe2::TypeIdentifier __cdecl caffe2::TypeMeta::Id<class caffe2::`anonymous namespace'::BlobTestBar>(void)\" (__imp_??$Id@VBlobTestBar@?A0xd2e92dc8@caffe2@@@TypeMeta@caffe2@@SA?AVTypeIdentifier@1@XZ) referenced in function \"private: virtual void __cdecl caffe2::`anonymous namespace'::BlobTest_CastingMessage_Test::TestBody(void)\" (?TestBody@BlobTest_CastingMessage_Test@?A0xd2e92dc8@caffe2@@EEAAXXZ) [build\\caffe2\\blob_test.vcxproj]\r\n  blob_test.obj : error LNK2019: unresolved external symbol \"__declspec(dllimport) public: static class caffe2::TypeIdentifier __cdecl caffe2::TypeMeta::Id<class caffe2::`anonymous namespace'::BlobTestNonDefaultConstructible>(void)\" (__imp_??$Id@VBlobTestNonDefaultConstructible@?A0xd2e92dc8@caffe2@@@TypeMeta@caffe2@@SA?AVTypeIdentifier@1@XZ) referenced in function \"private: virtual void __cdecl caffe2::`anonymous namespace'::BlobTest_BlobNonConstructible_Test::TestBody(void)\" (?TestBody@BlobTest_BlobNonConstructible_Test@?A0xd2e92dc8@caffe2@@EEAAXXZ) [build\\caffe2\\blob_test.vcxproj]\r\n  blob_test.obj : error LNK2019: unresolved external symbol \"__declspec(dllimport) public: static class caffe2::TypeIdentifier __cdecl caffe2::TypeMeta::Id<struct caffe2::`anonymous namespace'::DummyType>(void)\" (__imp_??$Id@UDummyType@?A0xd2e92dc8@caffe2@@@TypeMeta@caffe2@@SA?AVTypeIdentifier@1@XZ) referenced in function \"public: virtual void __cdecl caffe2::`anonymous namespace'::DummyTypeSerializer::Serialize(class caffe2::Blob const &,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,class std::function<void __cdecl(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)>)\" (?Serialize@DummyTypeSerializer@?A0xd2e92dc8@caffe2@@UEAAXAEBVBlob@3@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$function@$$A6AXAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z@6@@Z) [build\\caffe2\\blob_test.vcxproj]\r\n  build\\bin\\RelWithDebInfo\\blob_test.exe : fatal error LNK1120: 4 unresolved externals [build\\caffe2\\blob_test.vcxproj]\r\n```\r\n\r\n`CAFFE_KNOWN_TYPE` decorates `TypeMeta::Id<T>` with `AT_CORE_API`, which is wrong according to the note:\r\nhttps://github.com/pytorch/pytorch/blob/05dcf00644fb5d9701ac68b2b0ef66149f228cf4/aten/src/ATen/core/typeid.h#L383-L422\r\n\r\n## System Info\r\n- PyTorch or Caffe2: C2\r\n- How you installed PyTorch (conda, pip, source): src\r\n- Build command you used (if compiling from source): cmake\r\n- OS: Win10\r\n- PyTorch version: master\r\n- VS version (if compiling from source): 2017\r\n- CMake version: 3.12"}