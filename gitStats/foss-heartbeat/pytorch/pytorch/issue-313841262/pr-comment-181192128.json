{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/181192128", "pull_request_review_id": 111755110, "id": 181192128, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MTE5MjEyOA==", "diff_hunk": "@@ -0,0 +1,550 @@\n+/**\n+ * Copyright (c) 2016-present, Facebook, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+#include <string>\n+\n+#include \"caffe2/core/init.h\"\n+#include \"caffe2/core/logging.h\"\n+#include \"caffe2/core/operator.h\"\n+#include \"caffe2/core/timer.h\"\n+#include \"caffe2/core/types.h\"\n+#include \"caffe2/proto/caffe2.pb.h\"\n+#include \"caffe2/utils/proto_utils.h\"\n+#include \"caffe2/utils/string_utils.h\"\n+\n+CAFFE2_DEFINE_string(net, \"\", \"The given net to benchmark.\");\n+CAFFE2_DEFINE_string(\n+    optimized_net,\n+    \"\",\n+    \"Output filename for optimized NetDef protobuf.\");\n+CAFFE2_DEFINE_string(\n+    init_net,\n+    \"\",\n+    \"The given net to initialize any parameters.\");\n+CAFFE2_DEFINE_string(\n+    input,\n+    \"\",\n+    \"Input that is needed for running the network. If \"\n+    \"multiple input needed, use comma separated string.\");\n+CAFFE2_DEFINE_string(\n+    input_file,\n+    \"\",\n+    \"Input file that contain the serialized protobuf for \"\n+    \"the input blobs. If multiple input needed, use comma \"\n+    \"separated string. Must have the same number of items \"\n+    \"as input does.\");\n+CAFFE2_DEFINE_string(\n+    input_dims,\n+    \"\",\n+    \"Alternate to input_files, if all inputs are simple \"\n+    \"float TensorCPUs, specify the dimension using comma \"\n+    \"separated numbers. If multiple input needed, use \"\n+    \"semicolon to separate the dimension of different \"\n+    \"tensors.\");\n+CAFFE2_DEFINE_string(input_type, \"\", \"Input type (uint8_t/float)\");\n+CAFFE2_DEFINE_bool(\n+    try_winograd_fp16,\n+    true,\n+    \"Consider WINOGRAD_FP16 NNPACK algorithm in auto-tuning.\");\n+CAFFE2_DEFINE_int(\n+    samples,\n+    7,\n+    \"The number of samples of warm-up & main iterations to run.\");\n+CAFFE2_DEFINE_int(warmup, 5, \"The number of warm-up iterations to run.\");\n+CAFFE2_DEFINE_int(iter, 15, \"The number of iterations to run.\");\n+\n+using std::string;\n+using std::unique_ptr;\n+using std::vector;\n+\n+struct InputDescription {\n+  InputDescription(const string& name, const caffe2::BlobProto& blob)\n+      : name(name), blob(blob) {}\n+\n+  InputDescription(const string& name, caffe2::BlobProto&& blob)\n+      : name(name), blob(blob) {}\n+\n+  InputDescription(const string& name, const vector<int> shape, bool is_float)\n+      : name(name), shape(shape), is_float(is_float) {}\n+\n+  string name;\n+  /*\n+   * Protobuf with blob data and metadata.\n+   * If this value is not initialized, a new blob is created based on shape and\n+   * is_float values.\n+   */\n+  caffe2::BlobProto blob;\n+  /* Shape of the input (ignored if blob is initialized). */\n+  vector<int> shape;\n+  /* If true, input is of float type. Otherwise, it is of uint8_t type. */", "path": "binaries/autotuner.cc", "position": 92, "original_position": 92, "commit_id": "fa1ef10b045c6a37dbe7c1ab8b924c9410eddc05", "original_commit_id": "fa1ef10b045c6a37dbe7c1ab8b924c9410eddc05", "user": {"login": "bwasti", "id": 4842908, "node_id": "MDQ6VXNlcjQ4NDI5MDg=", "avatar_url": "https://avatars2.githubusercontent.com/u/4842908?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bwasti", "html_url": "https://github.com/bwasti", "followers_url": "https://api.github.com/users/bwasti/followers", "following_url": "https://api.github.com/users/bwasti/following{/other_user}", "gists_url": "https://api.github.com/users/bwasti/gists{/gist_id}", "starred_url": "https://api.github.com/users/bwasti/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bwasti/subscriptions", "organizations_url": "https://api.github.com/users/bwasti/orgs", "repos_url": "https://api.github.com/users/bwasti/repos", "events_url": "https://api.github.com/users/bwasti/events{/privacy}", "received_events_url": "https://api.github.com/users/bwasti/received_events", "type": "User", "site_admin": false}, "body": "caffe2 has a whole TypeMeta class that would be better to use (as this may eventually evolve in fp16 for GPU autotuning)", "created_at": "2018-04-12T19:13:01Z", "updated_at": "2018-11-23T15:42:19Z", "html_url": "https://github.com/pytorch/pytorch/pull/6557#discussion_r181192128", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/6557", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/181192128"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/6557#discussion_r181192128"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/6557"}}, "body_html": "<p>caffe2 has a whole TypeMeta class that would be better to use (as this may eventually evolve in fp16 for GPU autotuning)</p>", "body_text": "caffe2 has a whole TypeMeta class that would be better to use (as this may eventually evolve in fp16 for GPU autotuning)"}