{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/323244562", "html_url": "https://github.com/pytorch/pytorch/pull/1375#issuecomment-323244562", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/1375", "id": 323244562, "node_id": "MDEyOklzc3VlQ29tbWVudDMyMzI0NDU2Mg==", "user": {"login": "WarBean", "id": 5501392, "node_id": "MDQ6VXNlcjU1MDEzOTI=", "avatar_url": "https://avatars2.githubusercontent.com/u/5501392?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WarBean", "html_url": "https://github.com/WarBean", "followers_url": "https://api.github.com/users/WarBean/followers", "following_url": "https://api.github.com/users/WarBean/following{/other_user}", "gists_url": "https://api.github.com/users/WarBean/gists{/gist_id}", "starred_url": "https://api.github.com/users/WarBean/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WarBean/subscriptions", "organizations_url": "https://api.github.com/users/WarBean/orgs", "repos_url": "https://api.github.com/users/WarBean/repos", "events_url": "https://api.github.com/users/WarBean/events{/privacy}", "received_events_url": "https://api.github.com/users/WarBean/received_events", "type": "User", "site_admin": false}, "created_at": "2017-08-18T02:40:10Z", "updated_at": "2017-08-18T02:40:10Z", "author_association": "NONE", "body_html": "<p>I don't know how to add tests inside the project but I have write an extra test script:</p>\n<pre><code>import torch\nfrom rnn import *\nimport numpy as np\nfrom torch.autograd import Variable\n\nlengths = np.sort(np.random.randint(1, 100, 128)).tolist()[::-1]\na = Variable(torch.zeros(max(lengths), len(lengths), 13))\nfor i, length in enumerate(lengths):\n    a.data[length - 1, i] = 1\nsequence = pack_padded_sequence(a, lengths)\nlast_step = sequence.last_step_tensor()\nprint(last_step)\nassert torch.sum(last_step.data - 1) == 0\n</code></pre>\n<p>Output:</p>\n<pre><code>Variable containing:\n    1     1     1  ...      1     1     1\n    1     1     1  ...      1     1     1\n    1     1     1  ...      1     1     1\n       ...          \u22f1          ...\n    1     1     1  ...      1     1     1\n    1     1     1  ...      1     1     1\n    1     1     1  ...      1     1     1\n[torch.FloatTensor of size 128x13]\n</code></pre>\n<p>Seems nothing wrong.</p>", "body_text": "I don't know how to add tests inside the project but I have write an extra test script:\nimport torch\nfrom rnn import *\nimport numpy as np\nfrom torch.autograd import Variable\n\nlengths = np.sort(np.random.randint(1, 100, 128)).tolist()[::-1]\na = Variable(torch.zeros(max(lengths), len(lengths), 13))\nfor i, length in enumerate(lengths):\n    a.data[length - 1, i] = 1\nsequence = pack_padded_sequence(a, lengths)\nlast_step = sequence.last_step_tensor()\nprint(last_step)\nassert torch.sum(last_step.data - 1) == 0\n\nOutput:\nVariable containing:\n    1     1     1  ...      1     1     1\n    1     1     1  ...      1     1     1\n    1     1     1  ...      1     1     1\n       ...          \u22f1          ...\n    1     1     1  ...      1     1     1\n    1     1     1  ...      1     1     1\n    1     1     1  ...      1     1     1\n[torch.FloatTensor of size 128x13]\n\nSeems nothing wrong.", "body": "I don't know how to add tests inside the project but I have write an extra test script:\r\n\r\n```\r\nimport torch\r\nfrom rnn import *\r\nimport numpy as np\r\nfrom torch.autograd import Variable\r\n\r\nlengths = np.sort(np.random.randint(1, 100, 128)).tolist()[::-1]\r\na = Variable(torch.zeros(max(lengths), len(lengths), 13))\r\nfor i, length in enumerate(lengths):\r\n    a.data[length - 1, i] = 1\r\nsequence = pack_padded_sequence(a, lengths)\r\nlast_step = sequence.last_step_tensor()\r\nprint(last_step)\r\nassert torch.sum(last_step.data - 1) == 0\r\n```\r\n\r\nOutput:\r\n\r\n```\r\nVariable containing:\r\n    1     1     1  ...      1     1     1\r\n    1     1     1  ...      1     1     1\r\n    1     1     1  ...      1     1     1\r\n       ...          \u22f1          ...\r\n    1     1     1  ...      1     1     1\r\n    1     1     1  ...      1     1     1\r\n    1     1     1  ...      1     1     1\r\n[torch.FloatTensor of size 128x13]\r\n```\r\n\r\nSeems nothing wrong."}