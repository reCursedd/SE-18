{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/338791102", "html_url": "https://github.com/pytorch/pytorch/issues/3202#issuecomment-338791102", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/3202", "id": 338791102, "node_id": "MDEyOklzc3VlQ29tbWVudDMzODc5MTEwMg==", "user": {"login": "gchanan", "id": 3768583, "node_id": "MDQ6VXNlcjM3Njg1ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3768583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gchanan", "html_url": "https://github.com/gchanan", "followers_url": "https://api.github.com/users/gchanan/followers", "following_url": "https://api.github.com/users/gchanan/following{/other_user}", "gists_url": "https://api.github.com/users/gchanan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gchanan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gchanan/subscriptions", "organizations_url": "https://api.github.com/users/gchanan/orgs", "repos_url": "https://api.github.com/users/gchanan/repos", "events_url": "https://api.github.com/users/gchanan/events{/privacy}", "received_events_url": "https://api.github.com/users/gchanan/received_events", "type": "User", "site_admin": false}, "created_at": "2017-10-23T20:45:35Z", "updated_at": "2017-10-23T20:45:35Z", "author_association": "CONTRIBUTOR", "body_html": "<p>I'm not convinced that making it easy for end users to avoid thinking about device semantics is the correct goal.  The different devices have different performance characteristics, amount of memory/cache, incur data transfer costs/synchronizations, etc.  My worry is that by papering over these issues, we make it really easy to write non-performant code and really difficult to figure out why.  This discussion is similar to a discussion in the distributed systems community:  <a href=\"http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.41.7628\" rel=\"nofollow\">http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.41.7628</a> is a good discussion of why trying to unify all interfaces might not be the best idea (there are admittedly additional complexities in distributed computing like partial failures).</p>\n<p>Anyway, that's why I like making it obvious when there are cuda storage / device transfers going on, because those are obvious places to look at performance.</p>", "body_text": "I'm not convinced that making it easy for end users to avoid thinking about device semantics is the correct goal.  The different devices have different performance characteristics, amount of memory/cache, incur data transfer costs/synchronizations, etc.  My worry is that by papering over these issues, we make it really easy to write non-performant code and really difficult to figure out why.  This discussion is similar to a discussion in the distributed systems community:  http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.41.7628 is a good discussion of why trying to unify all interfaces might not be the best idea (there are admittedly additional complexities in distributed computing like partial failures).\nAnyway, that's why I like making it obvious when there are cuda storage / device transfers going on, because those are obvious places to look at performance.", "body": "I'm not convinced that making it easy for end users to avoid thinking about device semantics is the correct goal.  The different devices have different performance characteristics, amount of memory/cache, incur data transfer costs/synchronizations, etc.  My worry is that by papering over these issues, we make it really easy to write non-performant code and really difficult to figure out why.  This discussion is similar to a discussion in the distributed systems community:  http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.41.7628 is a good discussion of why trying to unify all interfaces might not be the best idea (there are admittedly additional complexities in distributed computing like partial failures).\r\n\r\nAnyway, that's why I like making it obvious when there are cuda storage / device transfers going on, because those are obvious places to look at performance."}