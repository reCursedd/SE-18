{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/338504617", "html_url": "https://github.com/pytorch/pytorch/issues/3202#issuecomment-338504617", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/3202", "id": 338504617, "node_id": "MDEyOklzc3VlQ29tbWVudDMzODUwNDYxNw==", "user": {"login": "Kaixhin", "id": 991891, "node_id": "MDQ6VXNlcjk5MTg5MQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/991891?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kaixhin", "html_url": "https://github.com/Kaixhin", "followers_url": "https://api.github.com/users/Kaixhin/followers", "following_url": "https://api.github.com/users/Kaixhin/following{/other_user}", "gists_url": "https://api.github.com/users/Kaixhin/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kaixhin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kaixhin/subscriptions", "organizations_url": "https://api.github.com/users/Kaixhin/orgs", "repos_url": "https://api.github.com/users/Kaixhin/repos", "events_url": "https://api.github.com/users/Kaixhin/events{/privacy}", "received_events_url": "https://api.github.com/users/Kaixhin/received_events", "type": "User", "site_admin": false}, "created_at": "2017-10-22T19:58:27Z", "updated_at": "2017-10-22T19:58:27Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Thanks for more in-depth feedback on some options. For existing practices, highlighting <code>new</code>, <code>ones_like</code> and <code>zeros_like</code> are probably the way to go.</p>\n<p>In terms of what to do when there aren't existing tensors, what I see as the main target is the <a href=\"https://github.com/pytorch/examples/blob/master/mnist/main.py\">MNIST example</a>. Precisely, can we do <a href=\"https://github.com/pytorch/examples/blob/master/mnist/main.py#L71-L72\">module casting</a> and <a href=\"https://github.com/pytorch/examples/blob/master/mnist/main.py#L79-L80\">tensor/variable casting</a> without using the if statement? The cast/dtype solution seems good for tensors, but anything we can do for modules?</p>", "body_text": "Thanks for more in-depth feedback on some options. For existing practices, highlighting new, ones_like and zeros_like are probably the way to go.\nIn terms of what to do when there aren't existing tensors, what I see as the main target is the MNIST example. Precisely, can we do module casting and tensor/variable casting without using the if statement? The cast/dtype solution seems good for tensors, but anything we can do for modules?", "body": "Thanks for more in-depth feedback on some options. For existing practices, highlighting `new`, `ones_like` and `zeros_like` are probably the way to go.\r\n\r\nIn terms of what to do when there aren't existing tensors, what I see as the main target is the [MNIST example](https://github.com/pytorch/examples/blob/master/mnist/main.py). Precisely, can we do [module casting](https://github.com/pytorch/examples/blob/master/mnist/main.py#L71-L72) and [tensor/variable casting](https://github.com/pytorch/examples/blob/master/mnist/main.py#L79-L80) without using the if statement? The cast/dtype solution seems good for tensors, but anything we can do for modules?"}