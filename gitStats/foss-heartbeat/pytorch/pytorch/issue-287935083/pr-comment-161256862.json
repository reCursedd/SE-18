{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/161256862", "pull_request_review_id": 88519744, "id": 161256862, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MTI1Njg2Mg==", "diff_hunk": "@@ -0,0 +1,208 @@\n+#include \"torch/csrc/jit/passes/batch_mm.h\"\n+\n+#include \"torch/csrc/jit/passes/dead_code_elimination.h\"\n+#include \"torch/csrc/jit/interned_strings.h\"\n+#include \"torch/csrc/utils/functional.h\"\n+\n+#include <ATen/ATen.h>\n+#include <algorithm>\n+#include <unordered_map>\n+\n+namespace torch { namespace jit {\n+\n+// This pass looks for trees in the graph, where leaves are mm ops, and the inner\n+// vertices are add nodes. Once we have such a tree they can be reduced to two\n+// concats and a single mm (basically into a single multiply of a wide matrix, with\n+// a tall matrix).\n+// Such patterns show up mostly in backward of RNNs, since the derivative of many\n+// uses of matrix multiplies with same weights forms exactly such a tree\n+// (note that it's usually also highly imbalanced i.e. has O(n) depth).\n+//\n+// This (or any tree of adds of MMs):\n+//\n+// +------+ +------+   +------+ +------+   +------+\n+// |      | |      |   |      | |      |   |      |\n+// |  L1  | |  R1  | + |  L2  | |  R2  | = |  O   |\n+// |      | |      |   |      | |      |   |      |\n+// +------+ +------+   +------+ +------+   +------+\n+//\n+// can be basically transformed into a single MM which looks like this\n+// (we concat all lhs operands, concat rhs operands, do mm):\n+//\n+//                 +------+\n+//                 |      |\n+//                 |  R1  |\n+//                 |      |\n+//                 +------+\n+//                 |      |\n+//                 |  R2  |\n+//                 |      |\n+//                 +------+\n+// +------+------+ +------+\n+// |      |      | |      |\n+// |  L1  |  L2  | |  O   |\n+// |      |      | |      |\n+// +------+------+ +------+\n+\n+\n+\n+// Note [Further optimizations]\n+// It would be straightforward to extend the TreeToken class to also detect if all\n+// MMs had the same lhs/rhs. In such case it's more efficient to expand the lhs\n+// and use bmm + sum instead of repeating it in memory via concat.\n+\n+// Note [Overlapping trees]\n+// Additionally it wouldn't be too hard to add support for partially overlapping\n+// trees. Right now the it's forbidden in the algorithm (only a single tree will\n+// be allowed), so theoretically we might miss some optimization options, especially\n+// that the rejected tree could be much larger. I didn't implement that because it's\n+// not necessary for the simple RNN cases I saw, so I decided to keep stuff simple.\n+// If we ever get around implementing this, the right solution is probably to fuse\n+// MMs for the common part, and assume it's an input leaf for the outer two parts\n+// (I don't think it's beneficial to recompute, unless the subtree is super small,\n+// but let's not get into such details).\n+\n+// The algorithm we're using is simple. We're iterating through the graph in the\n+// topological order and labeling nodes with TreeTokens. Then, we look for roots of\n+// the trees we formed and fuse them.\n+\n+enum class Side {\n+  LHS,\n+  RHS\n+};\n+\n+// Tunable parameter. Set to something larger if it turns out to be better.\n+static constexpr std::size_t min_fusion_size = 2;\n+\n+static std::array<int64_t, 2> as_array(at::IntList sizes) {\n+  JIT_ASSERT(sizes.size() == 2);\n+  std::array<int64_t, 2> arr;\n+  arr[0] = sizes[0];\n+  arr[1] = sizes[1];\n+  return arr;\n+}\n+\n+// TreeTokens will be used to label nodes of the graph, if the nodes will fit\n+// our mm/add tree pattern. Basically we do dynamic programming on DAGs, where\n+// when we reach node N with inputs A and B, then A and B have already been\n+// procesed, and we can try to unify their TreeTokens (if they have them)", "path": "torch/csrc/jit/passes/batch_mm.cpp", "position": 81, "original_position": 88, "commit_id": "e1c9b8d84992928c6b74c8bc1ffdee2ad9203c41", "original_commit_id": "33685d861c6bf211a5011d8c761b711f51987e91", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "processed", "created_at": "2018-01-12T15:52:20Z", "updated_at": "2018-11-23T15:38:06Z", "html_url": "https://github.com/pytorch/pytorch/pull/4615#discussion_r161256862", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4615", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/161256862"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/4615#discussion_r161256862"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4615"}}, "body_html": "<p>processed</p>", "body_text": "processed"}