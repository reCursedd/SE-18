{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/161341983", "pull_request_review_id": 88621850, "id": 161341983, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MTM0MTk4Mw==", "diff_hunk": "@@ -0,0 +1,208 @@\n+#include \"torch/csrc/jit/passes/batch_mm.h\"\n+\n+#include \"torch/csrc/jit/passes/dead_code_elimination.h\"\n+#include \"torch/csrc/jit/interned_strings.h\"\n+#include \"torch/csrc/utils/functional.h\"\n+\n+#include <ATen/ATen.h>\n+#include <algorithm>\n+#include <unordered_map>\n+\n+namespace torch { namespace jit {\n+\n+// This pass looks for trees in the graph, where leaves are mm ops, and the inner\n+// vertices are add nodes. Once we have such a tree they can be reduced to two\n+// concats and a single mm (basically into a single multiply of a wide matrix, with\n+// a tall matrix).\n+// Such patterns show up mostly in backward of RNNs, since the derivative of many\n+// uses of matrix multiplies with same weights forms exactly such a tree\n+// (note that it's usually also highly imbalanced i.e. has O(n) depth).\n+//\n+// This (or any tree of adds of MMs):\n+//\n+// +------+ +------+   +------+ +------+   +------+\n+// |      | |      |   |      | |      |   |      |\n+// |  L1  | |  R1  | + |  L2  | |  R2  | = |  O   |\n+// |      | |      |   |      | |      |   |      |\n+// +------+ +------+   +------+ +------+   +------+\n+//\n+// can be basically transformed into a single MM which looks like this\n+// (we concat all lhs operands, concat rhs operands, do mm):\n+//\n+//                 +------+\n+//                 |      |\n+//                 |  R1  |\n+//                 |      |\n+//                 +------+\n+//                 |      |\n+//                 |  R2  |\n+//                 |      |\n+//                 +------+\n+// +------+------+ +------+\n+// |      |      | |      |\n+// |  L1  |  L2  | |  O   |\n+// |      |      | |      |\n+// +------+------+ +------+\n+\n+\n+\n+// Note [Further optimizations]\n+// It would be straightforward to extend the TreeToken class to also detect if all\n+// MMs had the same lhs/rhs. In such case it's more efficient to expand the lhs\n+// and use bmm + sum instead of repeating it in memory via concat.\n+\n+// Note [Overlapping trees]\n+// Additionally it wouldn't be too hard to add support for partially overlapping\n+// trees. Right now the it's forbidden in the algorithm (only a single tree will\n+// be allowed), so theoretically we might miss some optimization options, especially\n+// that the rejected tree could be much larger. I didn't implement that because it's\n+// not necessary for the simple RNN cases I saw, so I decided to keep stuff simple.\n+// If we ever get around implementing this, the right solution is probably to fuse\n+// MMs for the common part, and assume it's an input leaf for the outer two parts\n+// (I don't think it's beneficial to recompute, unless the subtree is super small,\n+// but let's not get into such details).\n+\n+// The algorithm we're using is simple. We're iterating through the graph in the\n+// topological order and labeling nodes with TreeTokens. Then, we look for roots of\n+// the trees we formed and fuse them.\n+\n+enum class Side {\n+  LHS,\n+  RHS\n+};\n+\n+// Tunable parameter. Set to something larger if it turns out to be better.\n+static constexpr std::size_t min_fusion_size = 2;\n+\n+static std::array<int64_t, 2> as_array(at::IntList sizes) {\n+  JIT_ASSERT(sizes.size() == 2);\n+  std::array<int64_t, 2> arr;\n+  arr[0] = sizes[0];\n+  arr[1] = sizes[1];\n+  return arr;\n+}\n+\n+// TreeTokens will be used to label nodes of the graph, if the nodes will fit\n+// our mm/add tree pattern. Basically we do dynamic programming on DAGs, where\n+// when we reach node N with inputs A and B, then A and B have already been\n+// procesed, and we can try to unify their TreeTokens (if they have them)\n+// and build a larger tree.\n+struct TreeToken {\n+  uint64_t tree_size = 0; // NOTE: measured in number of leaves i.e. mm ops\n+  std::array<int64_t, 2> lhs_sizes;\n+  std::array<int64_t, 2> rhs_sizes;\n+  Node *node = nullptr;\n+  bool is_root = false;\n+\n+  static TreeToken fromMM(Node *mm) {\n+    TreeToken token;\n+    token.tree_size = 1;\n+    Value *lhs = mm->inputs()[0];\n+    Value *rhs = mm->inputs()[1];\n+    token.lhs_sizes = as_array(lhs->type()->expect<TensorType>()->sizes());\n+    token.rhs_sizes = as_array(rhs->type()->expect<TensorType>()->sizes());\n+    token.node = mm;\n+    token.is_root = true;\n+    return token;\n+  }\n+\n+  static TreeToken unify(Node *add, TreeToken& l, TreeToken& r) {\n+    TreeToken token;\n+    // See Note [Overlapping trees]\n+    if (&l == &r || !l.is_root || !r.is_root)\n+      return token;\n+    // We can batch the tree only if all sizes match, because we need to\n+    // cat inputs for both operands\n+    if (l.lhs_sizes != r.lhs_sizes)\n+      return token;\n+    if (l.rhs_sizes != r.rhs_sizes)\n+      return token;\n+    token.tree_size = l.tree_size + r.tree_size;\n+    token.lhs_sizes = l.lhs_sizes;\n+    token.rhs_sizes = l.rhs_sizes;\n+    token.node = add;\n+    token.is_root = true;\n+    l.is_root = r.is_root = false; // Reserve the subtrees, so they can't be used again.\n+    return token;\n+  }\n+\n+  operator bool() {\n+    return is_root;\n+  }\n+\n+  std::vector<Node*> gatherMatMuls() {\n+    static Symbol mm_kind = \"mm\"_sym;\n+    std::vector<Node*> matmuls;\n+    std::vector<Node*> queue {node};\n+    while (!queue.empty()) {\n+      auto n = queue.back(); queue.pop_back();\n+      if (n->kind() == mm_kind) {\n+        matmuls.push_back(n);\n+      } else {\n+        queue.push_back(n->inputs()[0]->node());\n+        queue.push_back(n->inputs()[1]->node());\n+      }\n+    }\n+    return matmuls;\n+  }\n+};\n+\n+void BatchMM(std::shared_ptr<Graph>& graph) {\n+  static Symbol mm_kind = \"mm\"_sym;\n+  static Symbol add_kind = \"add\"_sym;\n+  static Symbol cat_kind = \"cat\"_sym;\n+  static Symbol dim_sym = \"dim\"_sym;\n+\n+  // Look for trees in the graph\n+  std::unordered_map<Node*, TreeToken> tokens;\n+  for (auto node : graph->nodes()) {\n+    if (node->kind() == mm_kind) {\n+      tokens[node] = TreeToken::fromMM(node);\n+    } else if (node->kind() == add_kind) {\n+      Node *lhs = node->inputs()[0]->node();\n+      Node *rhs = node->inputs()[1]->node();\n+      auto lhs_it = tokens.find(lhs);\n+      auto rhs_it = tokens.find(rhs);\n+      // See Note [Overlapping trees] (regarding the uses().size() == 1 check)\n+      // We could treat a subtree with multiple uses as if it was overlapping.\n+      if (lhs_it != tokens.end() && rhs_it != tokens.end() &&\n+          lhs->output()->uses().size() == 1 && rhs->output()->uses().size() == 1) {", "path": "torch/csrc/jit/passes/batch_mm.cpp", "position": null, "original_position": 169, "commit_id": "e1c9b8d84992928c6b74c8bc1ffdee2ad9203c41", "original_commit_id": "33685d861c6bf211a5011d8c761b711f51987e91", "user": {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, "body": "// note: uses().size() == 1 ensures that the output of any matrix multiply cannot appear as the input to another matrix multiple, which would cause this batching to violate topological order.", "created_at": "2018-01-12T22:37:51Z", "updated_at": "2018-11-23T15:38:08Z", "html_url": "https://github.com/pytorch/pytorch/pull/4615#discussion_r161341983", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4615", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/161341983"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/4615#discussion_r161341983"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4615"}}, "body_html": "<p>// note: uses().size() == 1 ensures that the output of any matrix multiply cannot appear as the input to another matrix multiple, which would cause this batching to violate topological order.</p>", "body_text": "// note: uses().size() == 1 ensures that the output of any matrix multiply cannot appear as the input to another matrix multiple, which would cause this batching to violate topological order."}