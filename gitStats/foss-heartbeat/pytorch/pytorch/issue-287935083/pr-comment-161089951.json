{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/161089951", "pull_request_review_id": 88322893, "id": 161089951, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MTA4OTk1MQ==", "diff_hunk": "@@ -0,0 +1,173 @@\n+#include \"torch/csrc/jit/passes/batch_mm.h\"\n+\n+#include \"torch/csrc/jit/passes/dead_code_elimination.h\"\n+#include \"torch/csrc/jit/interned_strings.h\"\n+#include \"torch/csrc/utils/functional.h\"\n+\n+#include <ATen/ATen.h>\n+#include <algorithm>\n+#include <unordered_map>\n+\n+namespace torch { namespace jit {\n+\n+// This pass looks for trees in the graph, where leaves are mm ops, and the inner\n+// vertices are add nodes. Once we have such a tree they can be reduced to two\n+// concats and a single mm (basically into a single multiply of a wide matrix, with\n+// a tall matrix).\n+// Such patterns show up mostly in backward of RNNs, since the derivative of many\n+// uses of matrix multiplies with same weights forms exactly such a tree\n+// (note that it's usually also highly imbalanced i.e. has O(n) depth).", "path": "torch/csrc/jit/passes/batch_mm.cpp", "position": 19, "original_position": 19, "commit_id": "e1c9b8d84992928c6b74c8bc1ffdee2ad9203c41", "original_commit_id": "0b2101fb75fa20167758ab935a0334308549d526", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "Could this optimization be bad for memory usage if you're doing higher order gradients?", "created_at": "2018-01-11T22:08:07Z", "updated_at": "2018-11-23T15:38:04Z", "html_url": "https://github.com/pytorch/pytorch/pull/4615#discussion_r161089951", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4615", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/161089951"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/4615#discussion_r161089951"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4615"}}, "body_html": "<p>Could this optimization be bad for memory usage if you're doing higher order gradients?</p>", "body_text": "Could this optimization be bad for memory usage if you're doing higher order gradients?"}