{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/161340413", "pull_request_review_id": 88621850, "id": 161340413, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MTM0MDQxMw==", "diff_hunk": "@@ -0,0 +1,208 @@\n+#include \"torch/csrc/jit/passes/batch_mm.h\"\n+\n+#include \"torch/csrc/jit/passes/dead_code_elimination.h\"\n+#include \"torch/csrc/jit/interned_strings.h\"\n+#include \"torch/csrc/utils/functional.h\"\n+\n+#include <ATen/ATen.h>\n+#include <algorithm>\n+#include <unordered_map>\n+\n+namespace torch { namespace jit {\n+\n+// This pass looks for trees in the graph, where leaves are mm ops, and the inner\n+// vertices are add nodes. Once we have such a tree they can be reduced to two\n+// concats and a single mm (basically into a single multiply of a wide matrix, with\n+// a tall matrix).\n+// Such patterns show up mostly in backward of RNNs, since the derivative of many\n+// uses of matrix multiplies with same weights forms exactly such a tree\n+// (note that it's usually also highly imbalanced i.e. has O(n) depth).\n+//\n+// This (or any tree of adds of MMs):\n+//\n+// +------+ +------+   +------+ +------+   +------+\n+// |      | |      |   |      | |      |   |      |\n+// |  L1  | |  R1  | + |  L2  | |  R2  | = |  O   |\n+// |      | |      |   |      | |      |   |      |\n+// +------+ +------+   +------+ +------+   +------+\n+//\n+// can be basically transformed into a single MM which looks like this\n+// (we concat all lhs operands, concat rhs operands, do mm):\n+//\n+//                 +------+\n+//                 |      |\n+//                 |  R1  |\n+//                 |      |\n+//                 +------+\n+//                 |      |\n+//                 |  R2  |\n+//                 |      |\n+//                 +------+\n+// +------+------+ +------+", "path": "torch/csrc/jit/passes/batch_mm.cpp", "position": 41, "original_position": 41, "commit_id": "e1c9b8d84992928c6b74c8bc1ffdee2ad9203c41", "original_commit_id": "33685d861c6bf211a5011d8c761b711f51987e91", "user": {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, "body": "Awesome! The picture makes the optimization really clear", "created_at": "2018-01-12T22:28:13Z", "updated_at": "2018-11-23T15:38:08Z", "html_url": "https://github.com/pytorch/pytorch/pull/4615#discussion_r161340413", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4615", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/161340413"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/4615#discussion_r161340413"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4615"}}, "body_html": "<p>Awesome! The picture makes the optimization really clear</p>", "body_text": "Awesome! The picture makes the optimization really clear"}