{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/313254507", "html_url": "https://github.com/pytorch/pytorch/issues/1750#issuecomment-313254507", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/1750", "id": 313254507, "node_id": "MDEyOklzc3VlQ29tbWVudDMxMzI1NDUwNw==", "user": {"login": "jaxony", "id": 12774152, "node_id": "MDQ6VXNlcjEyNzc0MTUy", "avatar_url": "https://avatars3.githubusercontent.com/u/12774152?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jaxony", "html_url": "https://github.com/jaxony", "followers_url": "https://api.github.com/users/jaxony/followers", "following_url": "https://api.github.com/users/jaxony/following{/other_user}", "gists_url": "https://api.github.com/users/jaxony/gists{/gist_id}", "starred_url": "https://api.github.com/users/jaxony/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jaxony/subscriptions", "organizations_url": "https://api.github.com/users/jaxony/orgs", "repos_url": "https://api.github.com/users/jaxony/repos", "events_url": "https://api.github.com/users/jaxony/events{/privacy}", "received_events_url": "https://api.github.com/users/jaxony/received_events", "type": "User", "site_admin": false}, "created_at": "2017-07-05T23:32:09Z", "updated_at": "2017-07-05T23:40:29Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=13564\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ezyang\">@ezyang</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=4583066\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/apaszke\">@apaszke</a> Hi Adam and Edward, I've started to code up this feature. I would appreciate any comments on the class that I've implemented for the equivalent of <code>nvtxEventAttributes_t</code> in python.</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">class</span> <span class=\"pl-en\">EventAttributes</span>(<span class=\"pl-e\">ctypes</span>.<span class=\"pl-e\">Structure</span>):\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"\"\"</span></span>\n<span class=\"pl-s\">    A C struct containing essential attributes and optional</span>\n<span class=\"pl-s\">    attributes about a CUDA event. The optional attributes currently</span>\n<span class=\"pl-s\">    implemented are 'msg' and 'color'.</span>\n<span class=\"pl-s\"></span>\n<span class=\"pl-s\">    The data types of the fields are based on cupy's implementation.</span>\n<span class=\"pl-s\">    <span class=\"pl-pds\">\"\"\"</span></span>\n    _fields_ <span class=\"pl-k\">=</span> [(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>version<span class=\"pl-pds\">'</span></span>, ctypes.c_ushort),\n                (<span class=\"pl-s\"><span class=\"pl-pds\">'</span>size<span class=\"pl-pds\">'</span></span>, ctypes.c_ushort),\n                (<span class=\"pl-s\"><span class=\"pl-pds\">'</span>colorType<span class=\"pl-pds\">'</span></span>, ctypes.c_int),\n                (<span class=\"pl-s\"><span class=\"pl-pds\">'</span>color<span class=\"pl-pds\">'</span></span>, ctypes.c_uint),\n                (<span class=\"pl-s\"><span class=\"pl-pds\">'</span>msgType<span class=\"pl-pds\">'</span></span>, ctypes.c_int),\n                (<span class=\"pl-s\"><span class=\"pl-pds\">'</span>msg<span class=\"pl-pds\">'</span></span>, ctypes.c_char_p)\n               ]\n\n    <span class=\"pl-k\">def</span> <span class=\"pl-c1\">__init__</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>, <span class=\"pl-smi\">message</span>, <span class=\"pl-smi\">color</span>, <span class=\"pl-smi\">version</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">DEFAULT</span>,\n                 <span class=\"pl-smi\">size</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">DEFAULT</span>, <span class=\"pl-smi\">colorType</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">DEFAULT</span>):\n        \n        <span class=\"pl-c\"><span class=\"pl-c\">#</span> Set to fields to zero as per NVTX documentation</span>\n        <span class=\"pl-k\">for</span> attr_name <span class=\"pl-k\">in</span> [field[<span class=\"pl-c1\">0</span>] <span class=\"pl-k\">for</span> field <span class=\"pl-k\">in</span> _fields_]:\n            <span class=\"pl-c1\">setattr</span>(<span class=\"pl-c1\">self</span>, attr_name, <span class=\"pl-c1\">0</span>)\n\n        <span class=\"pl-c\"><span class=\"pl-c\">#</span> Now use user-defined values for the fields</span>\n        <span class=\"pl-c1\">super</span>(EventAttributes, <span class=\"pl-c1\">self</span>).<span class=\"pl-c1\">__init__</span>(message, color, version,\n                                              size, colorType)</pre></div>\n<ol>\n<li>Is there a better / more elegant way to initialize the struct fields to zero?</li>\n<li>The <code>DEFAULT</code>s are currently placeholders for real values/variables. How can I give the <code>__init__</code> method the correct <code>version</code> and <code>size</code>? EDIT: I just realised I have to use <code>_libnvToolsExt</code> function to get the version information.</li>\n</ol>\n<p>Thanks!</p>", "body_text": "@ezyang @apaszke Hi Adam and Edward, I've started to code up this feature. I would appreciate any comments on the class that I've implemented for the equivalent of nvtxEventAttributes_t in python.\nclass EventAttributes(ctypes.Structure):\n    \"\"\"\n    A C struct containing essential attributes and optional\n    attributes about a CUDA event. The optional attributes currently\n    implemented are 'msg' and 'color'.\n\n    The data types of the fields are based on cupy's implementation.\n    \"\"\"\n    _fields_ = [('version', ctypes.c_ushort),\n                ('size', ctypes.c_ushort),\n                ('colorType', ctypes.c_int),\n                ('color', ctypes.c_uint),\n                ('msgType', ctypes.c_int),\n                ('msg', ctypes.c_char_p)\n               ]\n\n    def __init__(self, message, color, version=DEFAULT,\n                 size=DEFAULT, colorType=DEFAULT):\n        \n        # Set to fields to zero as per NVTX documentation\n        for attr_name in [field[0] for field in _fields_]:\n            setattr(self, attr_name, 0)\n\n        # Now use user-defined values for the fields\n        super(EventAttributes, self).__init__(message, color, version,\n                                              size, colorType)\n\nIs there a better / more elegant way to initialize the struct fields to zero?\nThe DEFAULTs are currently placeholders for real values/variables. How can I give the __init__ method the correct version and size? EDIT: I just realised I have to use _libnvToolsExt function to get the version information.\n\nThanks!", "body": "@ezyang @apaszke Hi Adam and Edward, I've started to code up this feature. I would appreciate any comments on the class that I've implemented for the equivalent of `nvtxEventAttributes_t` in python.\r\n\r\n```python\r\nclass EventAttributes(ctypes.Structure):\r\n    \"\"\"\r\n    A C struct containing essential attributes and optional\r\n    attributes about a CUDA event. The optional attributes currently\r\n    implemented are 'msg' and 'color'.\r\n\r\n    The data types of the fields are based on cupy's implementation.\r\n    \"\"\"\r\n    _fields_ = [('version', ctypes.c_ushort),\r\n                ('size', ctypes.c_ushort),\r\n                ('colorType', ctypes.c_int),\r\n                ('color', ctypes.c_uint),\r\n                ('msgType', ctypes.c_int),\r\n                ('msg', ctypes.c_char_p)\r\n               ]\r\n\r\n    def __init__(self, message, color, version=DEFAULT,\r\n                 size=DEFAULT, colorType=DEFAULT):\r\n        \r\n        # Set to fields to zero as per NVTX documentation\r\n        for attr_name in [field[0] for field in _fields_]:\r\n            setattr(self, attr_name, 0)\r\n\r\n        # Now use user-defined values for the fields\r\n        super(EventAttributes, self).__init__(message, color, version,\r\n                                              size, colorType)\r\n```\r\n\r\n1. Is there a better / more elegant way to initialize the struct fields to zero?\r\n2. The `DEFAULT`s are currently placeholders for real values/variables. How can I give the `__init__` method the correct `version` and `size`? EDIT: I just realised I have to use `_libnvToolsExt` function to get the version information.\r\n\r\nThanks!"}