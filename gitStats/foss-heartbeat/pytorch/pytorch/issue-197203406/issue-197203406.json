{"url": "https://api.github.com/repos/pytorch/pytorch/issues/344", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/344/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/344/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/344/events", "html_url": "https://github.com/pytorch/pytorch/pull/344", "id": 197203406, "node_id": "MDExOlB1bGxSZXF1ZXN0OTkxMjUzNjQ=", "number": 344, "title": "Use ForkingPickler for sharing tensor/storages across processes", "user": {"login": "colesbury", "id": 655866, "node_id": "MDQ6VXNlcjY1NTg2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/655866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colesbury", "html_url": "https://github.com/colesbury", "followers_url": "https://api.github.com/users/colesbury/followers", "following_url": "https://api.github.com/users/colesbury/following{/other_user}", "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions", "organizations_url": "https://api.github.com/users/colesbury/orgs", "repos_url": "https://api.github.com/users/colesbury/repos", "events_url": "https://api.github.com/users/colesbury/events{/privacy}", "received_events_url": "https://api.github.com/users/colesbury/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-12-22T15:48:27Z", "updated_at": "2018-11-23T15:32:06Z", "closed_at": "2016-12-29T01:34:24Z", "author_association": "MEMBER", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/344", "html_url": "https://github.com/pytorch/pytorch/pull/344", "diff_url": "https://github.com/pytorch/pytorch/pull/344.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/344.patch"}, "body_html": "<p>This hooks into the (internal) ForkingPickler class in multiprocessing<br>\nto reduce tensors, storages, and CUDA events instead of our queue from<br>\njoblib. This makes it easier to use the standard multiprocessing classes<br>\nin later versions of Python.</p>\n<p>This also exposes:</p>\n<ul>\n<li>Tensor/Storage.share_memory_()</li>\n<li>Module.share_memory()</li>\n</ul>\n<p>These methods move the CPU tensors and storages to shared memory. If<br>\nyou're using the \"fork\" method of multiprocessing, these objects can be<br>\ndirectly inherited instead of serialized through a queue.</p>", "body_text": "This hooks into the (internal) ForkingPickler class in multiprocessing\nto reduce tensors, storages, and CUDA events instead of our queue from\njoblib. This makes it easier to use the standard multiprocessing classes\nin later versions of Python.\nThis also exposes:\n\nTensor/Storage.share_memory_()\nModule.share_memory()\n\nThese methods move the CPU tensors and storages to shared memory. If\nyou're using the \"fork\" method of multiprocessing, these objects can be\ndirectly inherited instead of serialized through a queue.", "body": "This hooks into the (internal) ForkingPickler class in multiprocessing\r\nto reduce tensors, storages, and CUDA events instead of our queue from\r\njoblib. This makes it easier to use the standard multiprocessing classes\r\nin later versions of Python.\r\n\r\nThis also exposes:\r\n\r\n - Tensor/Storage.share_memory_()\r\n - Module.share_memory()\r\n\r\nThese methods move the CPU tensors and storages to shared memory. If\r\nyou're using the \"fork\" method of multiprocessing, these objects can be\r\ndirectly inherited instead of serialized through a queue."}