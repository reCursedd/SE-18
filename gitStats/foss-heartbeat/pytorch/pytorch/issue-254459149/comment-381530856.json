{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/381530856", "html_url": "https://github.com/pytorch/pytorch/issues/2591#issuecomment-381530856", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/2591", "id": 381530856, "node_id": "MDEyOklzc3VlQ29tbWVudDM4MTUzMDg1Ng==", "user": {"login": "sytrus-in-github", "id": 12224616, "node_id": "MDQ6VXNlcjEyMjI0NjE2", "avatar_url": "https://avatars0.githubusercontent.com/u/12224616?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sytrus-in-github", "html_url": "https://github.com/sytrus-in-github", "followers_url": "https://api.github.com/users/sytrus-in-github/followers", "following_url": "https://api.github.com/users/sytrus-in-github/following{/other_user}", "gists_url": "https://api.github.com/users/sytrus-in-github/gists{/gist_id}", "starred_url": "https://api.github.com/users/sytrus-in-github/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sytrus-in-github/subscriptions", "organizations_url": "https://api.github.com/users/sytrus-in-github/orgs", "repos_url": "https://api.github.com/users/sytrus-in-github/repos", "events_url": "https://api.github.com/users/sytrus-in-github/events{/privacy}", "received_events_url": "https://api.github.com/users/sytrus-in-github/received_events", "type": "User", "site_admin": false}, "created_at": "2018-04-16T09:05:34Z", "updated_at": "2018-04-16T09:05:34Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Yet another version that handles <code>inf</code> and <code>-inf</code> cases properly so that no <code>nan</code> appears. Requires <code>torch.where</code> from nightly build or work-around for version 0.3:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-c\"><span class=\"pl-c\">#</span> https://github.com/pytorch/pytorch/issues/2591</span>\n<span class=\"pl-k\">import</span> torch\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">logsumexp</span>(<span class=\"pl-smi\">x</span>, <span class=\"pl-smi\">dim</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">None</span>, <span class=\"pl-smi\">keepdim</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">False</span>):\n    <span class=\"pl-k\">if</span> dim <span class=\"pl-k\">is</span> <span class=\"pl-c1\">None</span>:\n        x, dim <span class=\"pl-k\">=</span> x.view(<span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>), <span class=\"pl-c1\">0</span>\n    xm, _ <span class=\"pl-k\">=</span> torch.max(x, dim, <span class=\"pl-v\">keepdim</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>)\n    x <span class=\"pl-k\">=</span> torch.where(\n        (xm <span class=\"pl-k\">==</span> <span class=\"pl-c1\">float</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>inf<span class=\"pl-pds\">'</span></span>)) <span class=\"pl-k\">|</span> (xm <span class=\"pl-k\">==</span> <span class=\"pl-c1\">float</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>-inf<span class=\"pl-pds\">'</span></span>)), \n        xm,\n        xm <span class=\"pl-k\">+</span> torch.log(torch.sum(torch.exp(x <span class=\"pl-k\">-</span> xm), dim, <span class=\"pl-v\">keepdim</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>)))\n    <span class=\"pl-k\">return</span> x <span class=\"pl-k\">if</span> keepdim <span class=\"pl-k\">else</span> x.squeeze(dim)</pre></div>\n<p>A possible <code>torch.where</code> work-around for version 0.3 which does not handle broadcasting:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">where</span>(<span class=\"pl-smi\">cond</span>, <span class=\"pl-smi\">xt</span>, <span class=\"pl-smi\">xf</span>):\n    ret <span class=\"pl-k\">=</span> torch.zeros_like(xt)\n    ret[cond] <span class=\"pl-k\">=</span> xt[cond]\n    ret[cond <span class=\"pl-k\">^</span> <span class=\"pl-c1\">1</span>] <span class=\"pl-k\">=</span> xf[cond <span class=\"pl-k\">^</span> <span class=\"pl-c1\">1</span>]\n    <span class=\"pl-k\">return</span> ret</pre></div>", "body_text": "Yet another version that handles inf and -inf cases properly so that no nan appears. Requires torch.where from nightly build or work-around for version 0.3:\n# https://github.com/pytorch/pytorch/issues/2591\nimport torch\n\ndef logsumexp(x, dim=None, keepdim=False):\n    if dim is None:\n        x, dim = x.view(-1), 0\n    xm, _ = torch.max(x, dim, keepdim=True)\n    x = torch.where(\n        (xm == float('inf')) | (xm == float('-inf')), \n        xm,\n        xm + torch.log(torch.sum(torch.exp(x - xm), dim, keepdim=True)))\n    return x if keepdim else x.squeeze(dim)\nA possible torch.where work-around for version 0.3 which does not handle broadcasting:\ndef where(cond, xt, xf):\n    ret = torch.zeros_like(xt)\n    ret[cond] = xt[cond]\n    ret[cond ^ 1] = xf[cond ^ 1]\n    return ret", "body": "Yet another version that handles `inf` and `-inf` cases properly so that no `nan` appears. Requires `torch.where` from nightly build or work-around for version 0.3:\r\n```python\r\n# https://github.com/pytorch/pytorch/issues/2591\r\nimport torch\r\n\r\ndef logsumexp(x, dim=None, keepdim=False):\r\n    if dim is None:\r\n        x, dim = x.view(-1), 0\r\n    xm, _ = torch.max(x, dim, keepdim=True)\r\n    x = torch.where(\r\n        (xm == float('inf')) | (xm == float('-inf')), \r\n        xm,\r\n        xm + torch.log(torch.sum(torch.exp(x - xm), dim, keepdim=True)))\r\n    return x if keepdim else x.squeeze(dim)\r\n```\r\nA possible `torch.where` work-around for version 0.3 which does not handle broadcasting:\r\n```python\r\ndef where(cond, xt, xf):\r\n    ret = torch.zeros_like(xt)\r\n    ret[cond] = xt[cond]\r\n    ret[cond ^ 1] = xf[cond ^ 1]\r\n    return ret\r\n```\r\n"}