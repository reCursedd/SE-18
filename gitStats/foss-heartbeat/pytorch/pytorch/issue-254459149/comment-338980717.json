{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/338980717", "html_url": "https://github.com/pytorch/pytorch/issues/2591#issuecomment-338980717", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/2591", "id": 338980717, "node_id": "MDEyOklzc3VlQ29tbWVudDMzODk4MDcxNw==", "user": {"login": "jwvdm", "id": 1158561, "node_id": "MDQ6VXNlcjExNTg1NjE=", "avatar_url": "https://avatars1.githubusercontent.com/u/1158561?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwvdm", "html_url": "https://github.com/jwvdm", "followers_url": "https://api.github.com/users/jwvdm/followers", "following_url": "https://api.github.com/users/jwvdm/following{/other_user}", "gists_url": "https://api.github.com/users/jwvdm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwvdm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwvdm/subscriptions", "organizations_url": "https://api.github.com/users/jwvdm/orgs", "repos_url": "https://api.github.com/users/jwvdm/repos", "events_url": "https://api.github.com/users/jwvdm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwvdm/received_events", "type": "User", "site_admin": false}, "created_at": "2017-10-24T12:57:32Z", "updated_at": "2017-10-24T12:57:41Z", "author_association": "NONE", "body_html": "<p>Here is an implementation that we wrote, which supports both variable and tensor inputs:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">log_sum_exp</span>(<span class=\"pl-smi\">value</span>, <span class=\"pl-smi\">dim</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">None</span>, <span class=\"pl-smi\">keepdim</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">False</span>):\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"\"\"</span>Numerically stable implementation of the operation</span>\n<span class=\"pl-s\"></span>\n<span class=\"pl-s\">    value.exp().sum(dim, keepdim).log()</span>\n<span class=\"pl-s\">    <span class=\"pl-pds\">\"\"\"</span></span>\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> <span class=\"pl-k\">TODO</span>: torch.max(value, dim=None) threw an error at time of writing</span>\n    <span class=\"pl-k\">if</span> dim <span class=\"pl-k\">is</span> <span class=\"pl-k\">not</span> <span class=\"pl-c1\">None</span>:\n        m, _ <span class=\"pl-k\">=</span> torch.max(value, <span class=\"pl-v\">dim</span><span class=\"pl-k\">=</span>dim, <span class=\"pl-v\">keepdim</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>)\n        value0 <span class=\"pl-k\">=</span> value <span class=\"pl-k\">-</span> m\n        <span class=\"pl-k\">if</span> keepdim <span class=\"pl-k\">is</span> <span class=\"pl-c1\">False</span>:\n            m <span class=\"pl-k\">=</span> m.squeeze(dim)\n        <span class=\"pl-k\">return</span> m <span class=\"pl-k\">+</span> torch.log(torch.sum(torch.exp(value0),\n                                       <span class=\"pl-v\">dim</span><span class=\"pl-k\">=</span>dim, <span class=\"pl-v\">keepdim</span><span class=\"pl-k\">=</span>keepdim))\n    <span class=\"pl-k\">else</span>:\n        m <span class=\"pl-k\">=</span> torch.max(value)\n        sum_exp <span class=\"pl-k\">=</span> torch.sum(torch.exp(value <span class=\"pl-k\">-</span> m))\n        <span class=\"pl-k\">if</span> <span class=\"pl-c1\">isinstance</span>(sum_exp, Number):\n            <span class=\"pl-k\">return</span> m <span class=\"pl-k\">+</span> math.log(sum_exp)\n        <span class=\"pl-k\">else</span>:\n            <span class=\"pl-k\">return</span> m <span class=\"pl-k\">+</span> torch.log(sum_exp)</pre></div>\n<p>I agree that an implementation in C would be very helpful!</p>", "body_text": "Here is an implementation that we wrote, which supports both variable and tensor inputs:\ndef log_sum_exp(value, dim=None, keepdim=False):\n    \"\"\"Numerically stable implementation of the operation\n\n    value.exp().sum(dim, keepdim).log()\n    \"\"\"\n    # TODO: torch.max(value, dim=None) threw an error at time of writing\n    if dim is not None:\n        m, _ = torch.max(value, dim=dim, keepdim=True)\n        value0 = value - m\n        if keepdim is False:\n            m = m.squeeze(dim)\n        return m + torch.log(torch.sum(torch.exp(value0),\n                                       dim=dim, keepdim=keepdim))\n    else:\n        m = torch.max(value)\n        sum_exp = torch.sum(torch.exp(value - m))\n        if isinstance(sum_exp, Number):\n            return m + math.log(sum_exp)\n        else:\n            return m + torch.log(sum_exp)\nI agree that an implementation in C would be very helpful!", "body": "Here is an implementation that we wrote, which supports both variable and tensor inputs:\r\n```python\r\ndef log_sum_exp(value, dim=None, keepdim=False):\r\n    \"\"\"Numerically stable implementation of the operation\r\n\r\n    value.exp().sum(dim, keepdim).log()\r\n    \"\"\"\r\n    # TODO: torch.max(value, dim=None) threw an error at time of writing\r\n    if dim is not None:\r\n        m, _ = torch.max(value, dim=dim, keepdim=True)\r\n        value0 = value - m\r\n        if keepdim is False:\r\n            m = m.squeeze(dim)\r\n        return m + torch.log(torch.sum(torch.exp(value0),\r\n                                       dim=dim, keepdim=keepdim))\r\n    else:\r\n        m = torch.max(value)\r\n        sum_exp = torch.sum(torch.exp(value - m))\r\n        if isinstance(sum_exp, Number):\r\n            return m + math.log(sum_exp)\r\n        else:\r\n            return m + torch.log(sum_exp)\r\n```\r\nI agree that an implementation in C would be very helpful! "}