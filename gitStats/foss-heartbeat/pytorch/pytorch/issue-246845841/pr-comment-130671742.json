{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/130671742", "pull_request_review_id": 53573371, "id": 130671742, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMDY3MTc0Mg==", "diff_hunk": "@@ -1621,60 +1621,68 @@ def test_ConvTranspose2d_output_size(self):\n \n     def test_Conv2d_naive_groups(self):\n         # Check that grouped convolutions matches two half convolutions\n-        m = nn.Conv2d(4, 4, kernel_size=3, groups=2)\n-        i = Variable(torch.randn(2, 4, 6, 6), requires_grad=True)\n-        output = m(i)\n-        grad_output = torch.randn(2, 4, 4, 4)\n-        output.backward(grad_output)\n+        types = (torch.FloatTensor,)\n+        if TEST_CUDA:\n+            types += (torch.cuda.FloatTensor,)\n+        for tp in types:\n+            m = nn.Conv2d(4, 4, kernel_size=3, groups=2).type(tp)\n+            i = Variable(torch.randn(2, 4, 6, 6).type(tp), requires_grad=True)\n+            output = m(i)\n+            grad_output = torch.randn(2, 4, 4, 4).type(tp)\n+            output.backward(grad_output)\n \n-        m1 = nn.Conv2d(2, 2, kernel_size=3)\n-        m1.weight.data.copy_(m.weight.data[:2])\n-        m1.bias.data.copy_(m.bias.data[:2])\n-        i1 = Variable(i.data[:, :2].contiguous(), requires_grad=True)\n-        output1 = m1(i1)\n-        output1.backward(grad_output[:, :2].contiguous())\n-\n-        m2 = nn.Conv2d(2, 2, kernel_size=3)\n-        m2.weight.data.copy_(m.weight.data[2:])\n-        m2.bias.data.copy_(m.bias.data[2:])\n-        i2 = Variable(i.data[:, 2:].contiguous(), requires_grad=True)\n-        output2 = m2(i2)\n-        output2.backward(grad_output[:, 2:].contiguous())\n-\n-        self.assertEqual(output, torch.cat([output1, output2], 1))\n-        self.assertEqual(i.grad.data,\n-                         torch.cat([i1.grad.data, i2.grad.data], 1))\n-        self.assertEqual(m.bias.grad.data,\n-                         torch.cat([m1.bias.grad.data, m2.bias.grad.data], 0))\n-        self.assertEqual(m.weight.grad.data,\n-                         torch.cat([m1.weight.grad.data, m2.weight.grad.data], 0))\n+            m1 = nn.Conv2d(2, 2, kernel_size=3).type(tp)\n+            m1.weight.data.copy_(m.weight.data[:2])\n+            m1.bias.data.copy_(m.bias.data[:2])\n+            i1 = Variable(i.data[:, :2].contiguous(), requires_grad=True)\n+            output1 = m1(i1)\n+            output1.backward(grad_output[:, :2].contiguous())\n+\n+            m2 = nn.Conv2d(2, 2, kernel_size=3).type(tp)\n+            m2.weight.data.copy_(m.weight.data[2:])\n+            m2.bias.data.copy_(m.bias.data[2:])\n+            i2 = Variable(i.data[:, 2:].contiguous(), requires_grad=True)\n+            output2 = m2(i2)\n+            output2.backward(grad_output[:, 2:].contiguous())\n+\n+            self.assertEqual(output, torch.cat([output1, output2], 1))\n+            self.assertEqual(i.grad.data,\n+                             torch.cat([i1.grad.data, i2.grad.data], 1))\n+            self.assertEqual(m.bias.grad.data,\n+                             torch.cat([m1.bias.grad.data, m2.bias.grad.data], 0))\n+            self.assertEqual(m.weight.grad.data,\n+                             torch.cat([m1.weight.grad.data, m2.weight.grad.data], 0))\n \n     # For https://github.com/pytorch/pytorch/pull/1273\n     # Almost identical to the above `test_Conv2d_naive_groups`\n     def test_Conv2d_groups_nobias(self):\n-        m = nn.Conv2d(4, 4, kernel_size=3, groups=2, bias=False)\n-        i = Variable(torch.randn(2, 4, 6, 6), requires_grad=True)\n-        output = m(i)\n-        grad_output = torch.randn(2, 4, 4, 4)\n-        output.backward(grad_output)\n+        types = (torch.FloatTensor,)\n+        if TEST_CUDA:\n+            types += (torch.cuda.FloatTensor,)", "path": "test/test_nn.py", "position": null, "original_position": 72, "commit_id": "0d7d79ad759ac90c21cb3268d1bfe14e19ee68f5", "original_commit_id": "df591f6ba908d89b3eaef2220205061794d50d61", "user": {"login": "csarofeen", "id": 22205833, "node_id": "MDQ6VXNlcjIyMjA1ODMz", "avatar_url": "https://avatars2.githubusercontent.com/u/22205833?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csarofeen", "html_url": "https://github.com/csarofeen", "followers_url": "https://api.github.com/users/csarofeen/followers", "following_url": "https://api.github.com/users/csarofeen/following{/other_user}", "gists_url": "https://api.github.com/users/csarofeen/gists{/gist_id}", "starred_url": "https://api.github.com/users/csarofeen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csarofeen/subscriptions", "organizations_url": "https://api.github.com/users/csarofeen/orgs", "repos_url": "https://api.github.com/users/csarofeen/repos", "events_url": "https://api.github.com/users/csarofeen/events{/privacy}", "received_events_url": "https://api.github.com/users/csarofeen/received_events", "type": "User", "site_admin": false}, "body": "I guess test_batchnorm_eval should be changed as well then?\r\nhttps://github.com/pytorch/pytorch/blob/master/test/test_nn.py#L2437-L2461", "created_at": "2017-08-01T17:23:35Z", "updated_at": "2018-11-23T15:34:17Z", "html_url": "https://github.com/pytorch/pytorch/pull/2263#discussion_r130671742", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/2263", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/130671742"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/2263#discussion_r130671742"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/2263"}}, "body_html": "<p>I guess test_batchnorm_eval should be changed as well then?<br>\n<a href=\"https://github.com/pytorch/pytorch/blob/master/test/test_nn.py#L2437-L2461\">https://github.com/pytorch/pytorch/blob/master/test/test_nn.py#L2437-L2461</a></p>", "body_text": "I guess test_batchnorm_eval should be changed as well then?\nhttps://github.com/pytorch/pytorch/blob/master/test/test_nn.py#L2437-L2461", "in_reply_to_id": 130634920}