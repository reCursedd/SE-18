{"url": "https://api.github.com/repos/pytorch/pytorch/issues/8758", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/8758/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/8758/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/8758/events", "html_url": "https://github.com/pytorch/pytorch/issues/8758", "id": 334637238, "node_id": "MDU6SXNzdWUzMzQ2MzcyMzg=", "number": 8758, "title": "[JIT] Add bool type to the schema (fix torch.var)", "user": {"login": "zou3519", "id": 5652049, "node_id": "MDQ6VXNlcjU2NTIwNDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/5652049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zou3519", "html_url": "https://github.com/zou3519", "followers_url": "https://api.github.com/users/zou3519/followers", "following_url": "https://api.github.com/users/zou3519/following{/other_user}", "gists_url": "https://api.github.com/users/zou3519/gists{/gist_id}", "starred_url": "https://api.github.com/users/zou3519/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zou3519/subscriptions", "organizations_url": "https://api.github.com/users/zou3519/orgs", "repos_url": "https://api.github.com/users/zou3519/repos", "events_url": "https://api.github.com/users/zou3519/events{/privacy}", "received_events_url": "https://api.github.com/users/zou3519/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 679953983, "node_id": "MDU6TGFiZWw2Nzk5NTM5ODM=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/jit", "name": "jit", "color": "c5def5", "default": false}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-06-21T20:03:22Z", "updated_at": "2018-06-21T20:12:30Z", "closed_at": null, "author_association": "CONTRIBUTOR", "body_html": "<p><code>torch.var</code> and <code>torch.std</code> in jit script exhibit incorrect behavior.</p>\n<pre><code>import torch\n@torch.jit.script\ndef fn(x):\n    dim = 1\n    return torch.std(x, dim)\n\nx = torch.randn(2, 3)\nfn(x)  # gives  tensor(0.8668)\ntorch.std(x, 1)  # gives tensor([1.2670, 0.4717])\n</code></pre>\n<p>This is because of the following:</p>\n<p>there are two schemas for var (and std):<br>\n(1) var(Tensor, int, *, bool, bool, Tensor)<br>\n(2) var(Tensor, *, bool)</p>\n<p>Right now, the following is happening:</p>\n<ul>\n<li>Shorter schemas come before longer schemas</li>\n<li>bool, int are treated as IntType rather than DynamicType like before<br>\nSo the schemas look like the following in aten_schema:<br>\n(2) var(DynamicType, IntType)<br>\n(1) var(DynamicType, IntType, IntType, DynamicType)</li>\n</ul>\n<p>Now, when one calls torch.var(tensor, dim=1), the compiler mistakingly matches it with (2) instead of (1), which is a problem.</p>", "body_text": "torch.var and torch.std in jit script exhibit incorrect behavior.\nimport torch\n@torch.jit.script\ndef fn(x):\n    dim = 1\n    return torch.std(x, dim)\n\nx = torch.randn(2, 3)\nfn(x)  # gives  tensor(0.8668)\ntorch.std(x, 1)  # gives tensor([1.2670, 0.4717])\n\nThis is because of the following:\nthere are two schemas for var (and std):\n(1) var(Tensor, int, *, bool, bool, Tensor)\n(2) var(Tensor, *, bool)\nRight now, the following is happening:\n\nShorter schemas come before longer schemas\nbool, int are treated as IntType rather than DynamicType like before\nSo the schemas look like the following in aten_schema:\n(2) var(DynamicType, IntType)\n(1) var(DynamicType, IntType, IntType, DynamicType)\n\nNow, when one calls torch.var(tensor, dim=1), the compiler mistakingly matches it with (2) instead of (1), which is a problem.", "body": "`torch.var` and `torch.std` in jit script exhibit incorrect behavior.\r\n\r\n```\r\nimport torch\r\n@torch.jit.script\r\ndef fn(x):\r\n    dim = 1\r\n    return torch.std(x, dim)\r\n\r\nx = torch.randn(2, 3)\r\nfn(x)  # gives  tensor(0.8668)\r\ntorch.std(x, 1)  # gives tensor([1.2670, 0.4717])\r\n```\r\n\r\nThis is because of the following:\r\n\r\nthere are two schemas for var (and std):\r\n(1) var(Tensor, int, *, bool, bool, Tensor)\r\n(2) var(Tensor, *, bool)\r\n\r\nRight now, the following is happening:\r\n- Shorter schemas come before longer schemas\r\n- bool, int are treated as IntType rather than DynamicType like before\r\nSo the schemas look like the following in aten_schema:\r\n(2) var(DynamicType, IntType)\r\n(1) var(DynamicType, IntType, IntType, DynamicType)\r\n\r\nNow, when one calls torch.var(tensor, dim=1), the compiler mistakingly matches it with (2) instead of (1), which is a problem."}