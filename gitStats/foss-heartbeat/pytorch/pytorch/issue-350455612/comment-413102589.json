{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/413102589", "html_url": "https://github.com/pytorch/pytorch/pull/10505#issuecomment-413102589", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/10505", "id": 413102589, "node_id": "MDEyOklzc3VlQ29tbWVudDQxMzEwMjU4OQ==", "user": {"login": "Balandat", "id": 1605878, "node_id": "MDQ6VXNlcjE2MDU4Nzg=", "avatar_url": "https://avatars2.githubusercontent.com/u/1605878?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Balandat", "html_url": "https://github.com/Balandat", "followers_url": "https://api.github.com/users/Balandat/followers", "following_url": "https://api.github.com/users/Balandat/following{/other_user}", "gists_url": "https://api.github.com/users/Balandat/gists{/gist_id}", "starred_url": "https://api.github.com/users/Balandat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Balandat/subscriptions", "organizations_url": "https://api.github.com/users/Balandat/orgs", "repos_url": "https://api.github.com/users/Balandat/repos", "events_url": "https://api.github.com/users/Balandat/events{/privacy}", "received_events_url": "https://api.github.com/users/Balandat/received_events", "type": "User", "site_admin": false}, "created_at": "2018-08-15T06:04:18Z", "updated_at": "2018-08-15T06:04:18Z", "author_association": "NONE", "body_html": "<p>First of all, thanks a lot for working on this.</p>\n<p>I haven't had time to look through this in much detail, but it seems to generate samples correctly (and in particular, it passes the provided unit tests).</p>\n<p>I'm a little surprised by the much (much!) longer runtime compared to the Cython implementation though. Some basic tests:</p>\n<pre><code>&gt; tsobol = SobolEngine(4, scramble=True)\n&gt; %timeit tsobol.draw(100)\n2.36 ms \u00b1 37.9 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 100 loops each)\n</code></pre>\n<pre><code># import the cython version as CSobolEngine (this creates numpy arrays)\n&gt; csobol = CSobolEngine(4, scramble=True)\n&gt; %timeit csobol.draw(100)\n14.4 \u00b5s \u00b1 89.5 ns per loop (mean \u00b1 std. dev. of 7 runs, 100000 loops each)\n\n# even with creating a pytorch tensor from the numpy array using\n# `torch.from_numpy` this is still way faster:\n25.3 \u00b5s \u00b1 405 ns per loop (mean \u00b1 std. dev. of 7 runs, 10000 loops each)\n</code></pre>\n<p>Seems odd to me that the Cython implementation would be around 100x faster.... there can't possibly be that much overhead, can there?</p>", "body_text": "First of all, thanks a lot for working on this.\nI haven't had time to look through this in much detail, but it seems to generate samples correctly (and in particular, it passes the provided unit tests).\nI'm a little surprised by the much (much!) longer runtime compared to the Cython implementation though. Some basic tests:\n> tsobol = SobolEngine(4, scramble=True)\n> %timeit tsobol.draw(100)\n2.36 ms \u00b1 37.9 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 100 loops each)\n\n# import the cython version as CSobolEngine (this creates numpy arrays)\n> csobol = CSobolEngine(4, scramble=True)\n> %timeit csobol.draw(100)\n14.4 \u00b5s \u00b1 89.5 ns per loop (mean \u00b1 std. dev. of 7 runs, 100000 loops each)\n\n# even with creating a pytorch tensor from the numpy array using\n# `torch.from_numpy` this is still way faster:\n25.3 \u00b5s \u00b1 405 ns per loop (mean \u00b1 std. dev. of 7 runs, 10000 loops each)\n\nSeems odd to me that the Cython implementation would be around 100x faster.... there can't possibly be that much overhead, can there?", "body": "First of all, thanks a lot for working on this. \r\n\r\nI haven't had time to look through this in much detail, but it seems to generate samples correctly (and in particular, it passes the provided unit tests).\r\n\r\nI'm a little surprised by the much (much!) longer runtime compared to the Cython implementation though. Some basic tests:\r\n\r\n```\r\n> tsobol = SobolEngine(4, scramble=True)\r\n> %timeit tsobol.draw(100)\r\n2.36 ms \u00b1 37.9 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 100 loops each)\r\n```\r\n\r\n```\r\n# import the cython version as CSobolEngine (this creates numpy arrays)\r\n> csobol = CSobolEngine(4, scramble=True)\r\n> %timeit csobol.draw(100)\r\n14.4 \u00b5s \u00b1 89.5 ns per loop (mean \u00b1 std. dev. of 7 runs, 100000 loops each)\r\n\r\n# even with creating a pytorch tensor from the numpy array using\r\n# `torch.from_numpy` this is still way faster:\r\n25.3 \u00b5s \u00b1 405 ns per loop (mean \u00b1 std. dev. of 7 runs, 10000 loops each)\r\n```\r\n\r\nSeems odd to me that the Cython implementation would be around 100x faster.... there can't possibly be that much overhead, can there?"}