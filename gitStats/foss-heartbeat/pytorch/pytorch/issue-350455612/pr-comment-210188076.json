{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/210188076", "pull_request_review_id": 146349664, "id": 210188076, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMDE4ODA3Ng==", "diff_hunk": "@@ -0,0 +1,138 @@\n+#include \"ATen/ATen.h\"\n+#include \"ATen/NativeFunctions.h\"\n+\n+#include \"ATen/native/SobolEngineOpsUtils.h\"\n+\n+#include <vector>\n+\n+namespace at {\n+namespace native {\n+\n+/// This is the core function to draw samples from a `SobolEngine` given\n+/// its state variables (`sobolstate` and `quasi`). `dimension` can be\n+/// inferred from `sobolstate`, but choosing to pass it explicitly to avoid\n+/// an extra operation to obtain the size of the first dimension of\n+/// `sobolstate`.\n+std::tuple<Tensor, Tensor> _sobol_engine_draw(const Tensor& quasi, int64_t n, const Tensor& sobolstate,\n+                                              int64_t dimension, int64_t num_generated) {\n+  Tensor wquasi = quasi.clone();\n+  std::vector<Tensor> result;", "path": "aten/src/ATen/native/SobolEngineOps.cpp", "position": null, "original_position": 19, "commit_id": "fca2445f6c70ee50686c1d54fae1d10013f80ef7", "original_commit_id": "6ef3ed9687e75679cab3aee2ddf8759c8e15c7da", "user": {"login": "vishwakftw", "id": 23639302, "node_id": "MDQ6VXNlcjIzNjM5MzAy", "avatar_url": "https://avatars2.githubusercontent.com/u/23639302?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vishwakftw", "html_url": "https://github.com/vishwakftw", "followers_url": "https://api.github.com/users/vishwakftw/followers", "following_url": "https://api.github.com/users/vishwakftw/following{/other_user}", "gists_url": "https://api.github.com/users/vishwakftw/gists{/gist_id}", "starred_url": "https://api.github.com/users/vishwakftw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vishwakftw/subscriptions", "organizations_url": "https://api.github.com/users/vishwakftw/orgs", "repos_url": "https://api.github.com/users/vishwakftw/repos", "events_url": "https://api.github.com/users/vishwakftw/events{/privacy}", "received_events_url": "https://api.github.com/users/vishwakftw/received_events", "type": "User", "site_admin": false}, "body": "I am not sure if this is an efficient way to do this. One might as well create an equivalent matrix, and copy the required rows in the correct places.\r\n\r\n`emplace_back` + `clone` + `stack` could be a source of regression as well.", "created_at": "2018-08-15T07:17:47Z", "updated_at": "2018-11-23T15:49:23Z", "html_url": "https://github.com/pytorch/pytorch/pull/10505#discussion_r210188076", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/10505", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/210188076"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/10505#discussion_r210188076"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/10505"}}, "body_html": "<p>I am not sure if this is an efficient way to do this. One might as well create an equivalent matrix, and copy the required rows in the correct places.</p>\n<p><code>emplace_back</code> + <code>clone</code> + <code>stack</code> could be a source of regression as well.</p>", "body_text": "I am not sure if this is an efficient way to do this. One might as well create an equivalent matrix, and copy the required rows in the correct places.\nemplace_back + clone + stack could be a source of regression as well."}