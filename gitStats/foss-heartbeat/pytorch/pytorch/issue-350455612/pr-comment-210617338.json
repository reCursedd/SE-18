{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/210617338", "pull_request_review_id": 146869428, "id": 210617338, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMDYxNzMzOA==", "diff_hunk": "@@ -0,0 +1,147 @@\n+#include \"ATen/ATen.h\"\n+#include \"ATen/NativeFunctions.h\"\n+\n+#include \"ATen/native/SobolEngineOpsUtils.h\"\n+\n+#include <vector>\n+\n+namespace at {\n+namespace native {\n+\n+/// This is the core function to draw samples from a `SobolEngine` given\n+/// its state variables (`sobolstate` and `quasi`). `dimension` can be\n+/// inferred from `sobolstate`, but choosing to pass it explicitly to avoid\n+/// an extra operation to obtain the size of the first dimension of\n+/// `sobolstate`.\n+std::tuple<Tensor, Tensor> _sobol_engine_draw(const Tensor& quasi, int64_t n, const Tensor& sobolstate,\n+                                              int64_t dimension, int64_t num_generated) {\n+  AT_CHECK(sobolstate.type().scalarType() == at::ScalarType::Long,\n+           \"sobolstate needs to be of type \", at::ScalarType::Long);\n+  AT_CHECK(quasi.type().scalarType() == at::ScalarType::Long,\n+           \"quasi needs to be of type \", at::ScalarType::Long);\n+\n+  /// Performing one `unbind` operation and caching the result to prevent `n`\n+  /// `select` operations.\n+  std::vector<Tensor> sobolstate_unbind = at::native::unbind(sobolstate, 1);\n+\n+  /// Considering a vector of `n` Tensors to store the results in.\n+  std::vector<Tensor> result;\n+  Tensor wquasi = quasi.clone();\n+\n+  for (int64_t i = 0; i < n; ++i) {\n+    int64_t l = rightmost_zero(num_generated);\n+    result.emplace_back(wquasi.__ixor__(sobolstate_unbind[l]).clone());", "path": "aten/src/ATen/native/SobolEngineOps.cpp", "position": 33, "original_position": 33, "commit_id": "fca2445f6c70ee50686c1d54fae1d10013f80ef7", "original_commit_id": "f43a0d265d44566e57383470d72bd8ab83e03694", "user": {"login": "vishwakftw", "id": 23639302, "node_id": "MDQ6VXNlcjIzNjM5MzAy", "avatar_url": "https://avatars2.githubusercontent.com/u/23639302?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vishwakftw", "html_url": "https://github.com/vishwakftw", "followers_url": "https://api.github.com/users/vishwakftw/followers", "following_url": "https://api.github.com/users/vishwakftw/following{/other_user}", "gists_url": "https://api.github.com/users/vishwakftw/gists{/gist_id}", "starred_url": "https://api.github.com/users/vishwakftw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vishwakftw/subscriptions", "organizations_url": "https://api.github.com/users/vishwakftw/orgs", "repos_url": "https://api.github.com/users/vishwakftw/repos", "events_url": "https://api.github.com/users/vishwakftw/events{/privacy}", "received_events_url": "https://api.github.com/users/vishwakftw/received_events", "type": "User", "site_admin": false}, "body": "This needs to be optimized. I tried using a `copy_` instead but I kept getting an error about `copy_from` not being auto-differentiable.", "created_at": "2018-08-16T14:26:04Z", "updated_at": "2018-11-23T15:49:31Z", "html_url": "https://github.com/pytorch/pytorch/pull/10505#discussion_r210617338", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/10505", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/210617338"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/10505#discussion_r210617338"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/10505"}}, "body_html": "<p>This needs to be optimized. I tried using a <code>copy_</code> instead but I kept getting an error about <code>copy_from</code> not being auto-differentiable.</p>", "body_text": "This needs to be optimized. I tried using a copy_ instead but I kept getting an error about copy_from not being auto-differentiable."}