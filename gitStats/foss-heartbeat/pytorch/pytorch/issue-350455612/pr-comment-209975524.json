{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/209975524", "pull_request_review_id": 146093664, "id": 209975524, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTk3NTUyNA==", "diff_hunk": "@@ -0,0 +1,1265 @@\n+/// This file contains some tensor-agnostic operations to be used in the\n+/// core functions of the `SobolEngine`\n+#include \"ATen/ATen.h\"\n+\n+/// Function to return the minimum of number of bits to represent the integer `n`\n+static inline int bit_length(const int64_t n) {\n+  int nbits, nloc;\n+  for (nloc = n, nbits = 0; nloc > 0; nloc /= 2, nbits++);\n+  return nbits;\n+}\n+\n+/// Function to get the position of the rightmost zero in the bit representation of an integer\n+/// This value is not the zero-indexed position but one-indexed position\n+static inline int rightmost_zero(const int64_t n) {\n+  int z, i;\n+  for (z = n, i = 0; z % 2 == 1; z /= 2, i++);\n+  return i + 1;\n+}\n+\n+/// Function to get a subsequence of bits in the representation of an integer starting from\n+/// `pos` and of length `length`\n+static inline int64_t bitsubseq(const int64_t n, const int pos, const int length) {\n+  return (n >> pos) & ((1 << length) - 1);\n+}\n+\n+/// Function to perform the inner product between a batched square matrix and a power of 2 vector\n+static inline at::Tensor cdot_pow2(const at::Tensor& bmat) {\n+  at::Tensor inter = bmat.type().toScalarType(at::kLong)._arange(bmat.size(-1) - 1, -1, -1);\n+  inter = at::pow(2, inter).expand_as(bmat);\n+  return at::mul(inter, bmat).sum(-1);\n+}\n+\n+/// All definitions below this point are data. These are constant, and should not be modified", "path": "aten/src/ATen/native/SobolEngineOpsUtils.h", "position": 33, "original_position": 33, "commit_id": "fca2445f6c70ee50686c1d54fae1d10013f80ef7", "original_commit_id": "01e622a02da33a3e91e29f3e683455981bdd3376", "user": {"login": "vishwakftw", "id": 23639302, "node_id": "MDQ6VXNlcjIzNjM5MzAy", "avatar_url": "https://avatars2.githubusercontent.com/u/23639302?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vishwakftw", "html_url": "https://github.com/vishwakftw", "followers_url": "https://api.github.com/users/vishwakftw/followers", "following_url": "https://api.github.com/users/vishwakftw/following{/other_user}", "gists_url": "https://api.github.com/users/vishwakftw/gists{/gist_id}", "starred_url": "https://api.github.com/users/vishwakftw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vishwakftw/subscriptions", "organizations_url": "https://api.github.com/users/vishwakftw/orgs", "repos_url": "https://api.github.com/users/vishwakftw/repos", "events_url": "https://api.github.com/users/vishwakftw/events{/privacy}", "received_events_url": "https://api.github.com/users/vishwakftw/received_events", "type": "User", "site_admin": false}, "body": "Please take note, reviewers.", "created_at": "2018-08-14T14:34:24Z", "updated_at": "2018-11-23T15:49:16Z", "html_url": "https://github.com/pytorch/pytorch/pull/10505#discussion_r209975524", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/10505", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/209975524"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/10505#discussion_r209975524"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/10505"}}, "body_html": "<p>Please take note, reviewers.</p>", "body_text": "Please take note, reviewers."}