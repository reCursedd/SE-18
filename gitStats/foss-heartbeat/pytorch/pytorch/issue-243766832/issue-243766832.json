{"url": "https://api.github.com/repos/pytorch/pytorch/issues/2141", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/2141/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/2141/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/2141/events", "html_url": "https://github.com/pytorch/pytorch/issues/2141", "id": 243766832, "node_id": "MDU6SXNzdWUyNDM3NjY4MzI=", "number": 2141, "title": "warning: macro expansion producing 'defined' has undefined behavior", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-07-18T15:58:43Z", "updated_at": "2017-07-19T02:24:56Z", "closed_at": "2017-07-19T02:24:56Z", "author_association": "CONTRIBUTOR", "body_html": "<p>In <code>torch/csrc/generic/TensorMethods.cwrap</code> we define a number of macros which are subsequently used in if statements:</p>\n<pre><code>#ifndef THC_GENERIC_FILE\n#define IS_CUDA false\n#define CUDA_FLOAT false\n#else\n#define IS_CUDA true\n#define CUDA_BYTE defined(THC_REAL_IS_BYTE)\n#define CUDA_CHAR defined(THC_REAL_IS_CHAR)\n#define CUDA_SHORT defined(THC_REAL_IS_SHORT)\n#define CUDA_INT defined(THC_REAL_IS_INT)\n#define CUDA_LONG defined(THC_REAL_IS_LONG)\n#define CUDA_FLOAT defined(THC_REAL_IS_FLOAT)\n#define CUDA_DOUBLE defined(THC_REAL_IS_DOUBLE)\n#define CUDA_HALF defined(THC_REAL_IS_HALF)\n#endif\n</code></pre>\n<p>This is undefined. On clang 3.4.2, these warnings don't seem to actually get printed out (<code>777 warnings generated.</code>) but on clang 4.0.0 they seem to always get emitted.</p>", "body_text": "In torch/csrc/generic/TensorMethods.cwrap we define a number of macros which are subsequently used in if statements:\n#ifndef THC_GENERIC_FILE\n#define IS_CUDA false\n#define CUDA_FLOAT false\n#else\n#define IS_CUDA true\n#define CUDA_BYTE defined(THC_REAL_IS_BYTE)\n#define CUDA_CHAR defined(THC_REAL_IS_CHAR)\n#define CUDA_SHORT defined(THC_REAL_IS_SHORT)\n#define CUDA_INT defined(THC_REAL_IS_INT)\n#define CUDA_LONG defined(THC_REAL_IS_LONG)\n#define CUDA_FLOAT defined(THC_REAL_IS_FLOAT)\n#define CUDA_DOUBLE defined(THC_REAL_IS_DOUBLE)\n#define CUDA_HALF defined(THC_REAL_IS_HALF)\n#endif\n\nThis is undefined. On clang 3.4.2, these warnings don't seem to actually get printed out (777 warnings generated.) but on clang 4.0.0 they seem to always get emitted.", "body": "In `torch/csrc/generic/TensorMethods.cwrap` we define a number of macros which are subsequently used in if statements:\r\n\r\n```\r\n#ifndef THC_GENERIC_FILE\r\n#define IS_CUDA false\r\n#define CUDA_FLOAT false\r\n#else\r\n#define IS_CUDA true\r\n#define CUDA_BYTE defined(THC_REAL_IS_BYTE)\r\n#define CUDA_CHAR defined(THC_REAL_IS_CHAR)\r\n#define CUDA_SHORT defined(THC_REAL_IS_SHORT)\r\n#define CUDA_INT defined(THC_REAL_IS_INT)\r\n#define CUDA_LONG defined(THC_REAL_IS_LONG)\r\n#define CUDA_FLOAT defined(THC_REAL_IS_FLOAT)\r\n#define CUDA_DOUBLE defined(THC_REAL_IS_DOUBLE)\r\n#define CUDA_HALF defined(THC_REAL_IS_HALF)\r\n#endif\r\n```\r\n\r\nThis is undefined. On clang 3.4.2, these warnings don't seem to actually get printed out (`777 warnings generated.`) but on clang 4.0.0 they seem to always get emitted."}