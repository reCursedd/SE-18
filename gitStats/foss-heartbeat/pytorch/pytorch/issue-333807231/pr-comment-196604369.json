{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/196604369", "pull_request_review_id": 130189945, "id": 196604369, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NjYwNDM2OQ==", "diff_hunk": "@@ -0,0 +1,28 @@\n+#pragma once\n+\n+#include <functional>\n+#include <iostream>\n+\n+namespace c10 {\n+\n+enum class DeviceId : uint8_t {\n+    UNDEFINED,", "path": "caffe2/core/dispatch/DeviceId.h", "position": null, "original_position": 9, "commit_id": "dc0577c9f521b81b236c172357c8522af30c68b0", "original_commit_id": "65843f01c93c2a16c05f0b17cd3c711cb9165b19", "user": {"login": "smessmer", "id": 2373925, "node_id": "MDQ6VXNlcjIzNzM5MjU=", "avatar_url": "https://avatars3.githubusercontent.com/u/2373925?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smessmer", "html_url": "https://github.com/smessmer", "followers_url": "https://api.github.com/users/smessmer/followers", "following_url": "https://api.github.com/users/smessmer/following{/other_user}", "gists_url": "https://api.github.com/users/smessmer/gists{/gist_id}", "starred_url": "https://api.github.com/users/smessmer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smessmer/subscriptions", "organizations_url": "https://api.github.com/users/smessmer/orgs", "repos_url": "https://api.github.com/users/smessmer/repos", "events_url": "https://api.github.com/users/smessmer/events{/privacy}", "received_events_url": "https://api.github.com/users/smessmer/received_events", "type": "User", "site_admin": false}, "body": "What I mean is that this person shouldn't look at the enum but at the serialization code to see what the number means. Adding numbers to the enum here suggests a relationship that isn't there. Nothing checks that you aren't doing anything stupid like\r\n\r\n    enum class DeviceId : uint8_t {\r\n        CPU = 0,\r\n        CUDA = 1\r\n    };\r\n    int serialize(DeviceId id) {\r\n       switch(id) {\r\n         case CPU: return 1;\r\n         case CUDA: return 0;\r\n       }\r\n    }\r\n\r\nGiven that, the number has exactly the same safety guarantees as a comment\r\n\r\n    enum class DeviceId : uint8_t {\r\n        CPU,  // this is serialized as 0\r\n        CUDA  // this is serialized as 1\r\n     };\r\n\r\nAnd we probably wouldn't write such a comment.", "created_at": "2018-06-19T22:58:22Z", "updated_at": "2018-11-23T15:45:50Z", "html_url": "https://github.com/pytorch/pytorch/pull/8662#discussion_r196604369", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/8662", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/196604369"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/8662#discussion_r196604369"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/8662"}}, "body_html": "<p>What I mean is that this person shouldn't look at the enum but at the serialization code to see what the number means. Adding numbers to the enum here suggests a relationship that isn't there. Nothing checks that you aren't doing anything stupid like</p>\n<pre><code>enum class DeviceId : uint8_t {\n    CPU = 0,\n    CUDA = 1\n};\nint serialize(DeviceId id) {\n   switch(id) {\n     case CPU: return 1;\n     case CUDA: return 0;\n   }\n}\n</code></pre>\n<p>Given that, the number has exactly the same safety guarantees as a comment</p>\n<pre><code>enum class DeviceId : uint8_t {\n    CPU,  // this is serialized as 0\n    CUDA  // this is serialized as 1\n };\n</code></pre>\n<p>And we probably wouldn't write such a comment.</p>", "body_text": "What I mean is that this person shouldn't look at the enum but at the serialization code to see what the number means. Adding numbers to the enum here suggests a relationship that isn't there. Nothing checks that you aren't doing anything stupid like\nenum class DeviceId : uint8_t {\n    CPU = 0,\n    CUDA = 1\n};\nint serialize(DeviceId id) {\n   switch(id) {\n     case CPU: return 1;\n     case CUDA: return 0;\n   }\n}\n\nGiven that, the number has exactly the same safety guarantees as a comment\nenum class DeviceId : uint8_t {\n    CPU,  // this is serialized as 0\n    CUDA  // this is serialized as 1\n };\n\nAnd we probably wouldn't write such a comment.", "in_reply_to_id": 196563346}