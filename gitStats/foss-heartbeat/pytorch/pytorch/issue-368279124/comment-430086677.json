{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/430086677", "html_url": "https://github.com/pytorch/pytorch/issues/12484#issuecomment-430086677", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/12484", "id": 430086677, "node_id": "MDEyOklzc3VlQ29tbWVudDQzMDA4NjY3Nw==", "user": {"login": "weiyangfb", "id": 38509346, "node_id": "MDQ6VXNlcjM4NTA5MzQ2", "avatar_url": "https://avatars1.githubusercontent.com/u/38509346?v=4", "gravatar_id": "", "url": "https://api.github.com/users/weiyangfb", "html_url": "https://github.com/weiyangfb", "followers_url": "https://api.github.com/users/weiyangfb/followers", "following_url": "https://api.github.com/users/weiyangfb/following{/other_user}", "gists_url": "https://api.github.com/users/weiyangfb/gists{/gist_id}", "starred_url": "https://api.github.com/users/weiyangfb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/weiyangfb/subscriptions", "organizations_url": "https://api.github.com/users/weiyangfb/orgs", "repos_url": "https://api.github.com/users/weiyangfb/repos", "events_url": "https://api.github.com/users/weiyangfb/events{/privacy}", "received_events_url": "https://api.github.com/users/weiyangfb/received_events", "type": "User", "site_admin": false}, "created_at": "2018-10-16T03:18:06Z", "updated_at": "2018-10-16T03:18:06Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=22191150\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/dhgrs\">@dhgrs</a> I can't repro the issue and output <code>-Inf</code> in CUDA with the code you provided:</p>\n<pre><code>import argparse\n\nimport torch\nimport numpy\n\nparser = argparse.ArgumentParser()\nparser.add_argument('--use_cuda', action='store_true', help='use cuda?')\nargs = parser.parse_args()\n\nconv = torch.nn.Conv1d(1, 128, 3, 1, 1)\nconv.weight.data[...] = float('NaN')\nconv = conv.to(torch.device('cuda' if args.use_cuda else 'cpu'))\nif torch.isnan(conv.weight).all():\n    print('weight has nan')\n\nx = torch.Tensor(numpy.zeros(256, dtype=numpy.float32).reshape((1, 1, 256)))\nx = x.to(torch.device('cuda' if args.use_cuda else 'cpu'))\n\noutput = conv(x)\nif torch.isnan(output).any():\n    print('output has nan')\nprint(output)\n</code></pre>\n<p>With <code>--use_cuda</code>, the output is:</p>\n<pre><code>weight has nan\noutput has nan\ntensor([[[nan, nan, nan,  ..., nan, nan, nan],\n         [nan, nan, nan,  ..., nan, nan, nan],\n         [nan, nan, nan,  ..., nan, nan, nan],\n         ...,\n         [nan, nan, nan,  ..., nan, nan, nan],\n         [nan, nan, nan,  ..., nan, nan, nan],\n         [nan, nan, nan,  ..., nan, nan, nan]]], device='cuda:0',\n       grad_fn=&lt;SqueezeBackward1&gt;)\n</code></pre>\n<p>Could you clarify a bit?</p>", "body_text": "@dhgrs I can't repro the issue and output -Inf in CUDA with the code you provided:\nimport argparse\n\nimport torch\nimport numpy\n\nparser = argparse.ArgumentParser()\nparser.add_argument('--use_cuda', action='store_true', help='use cuda?')\nargs = parser.parse_args()\n\nconv = torch.nn.Conv1d(1, 128, 3, 1, 1)\nconv.weight.data[...] = float('NaN')\nconv = conv.to(torch.device('cuda' if args.use_cuda else 'cpu'))\nif torch.isnan(conv.weight).all():\n    print('weight has nan')\n\nx = torch.Tensor(numpy.zeros(256, dtype=numpy.float32).reshape((1, 1, 256)))\nx = x.to(torch.device('cuda' if args.use_cuda else 'cpu'))\n\noutput = conv(x)\nif torch.isnan(output).any():\n    print('output has nan')\nprint(output)\n\nWith --use_cuda, the output is:\nweight has nan\noutput has nan\ntensor([[[nan, nan, nan,  ..., nan, nan, nan],\n         [nan, nan, nan,  ..., nan, nan, nan],\n         [nan, nan, nan,  ..., nan, nan, nan],\n         ...,\n         [nan, nan, nan,  ..., nan, nan, nan],\n         [nan, nan, nan,  ..., nan, nan, nan],\n         [nan, nan, nan,  ..., nan, nan, nan]]], device='cuda:0',\n       grad_fn=<SqueezeBackward1>)\n\nCould you clarify a bit?", "body": "@dhgrs I can't repro the issue and output `-Inf` in CUDA with the code you provided:\r\n```\r\nimport argparse\r\n\r\nimport torch\r\nimport numpy\r\n\r\nparser = argparse.ArgumentParser()\r\nparser.add_argument('--use_cuda', action='store_true', help='use cuda?')\r\nargs = parser.parse_args()\r\n\r\nconv = torch.nn.Conv1d(1, 128, 3, 1, 1)\r\nconv.weight.data[...] = float('NaN')\r\nconv = conv.to(torch.device('cuda' if args.use_cuda else 'cpu'))\r\nif torch.isnan(conv.weight).all():\r\n    print('weight has nan')\r\n\r\nx = torch.Tensor(numpy.zeros(256, dtype=numpy.float32).reshape((1, 1, 256)))\r\nx = x.to(torch.device('cuda' if args.use_cuda else 'cpu'))\r\n\r\noutput = conv(x)\r\nif torch.isnan(output).any():\r\n    print('output has nan')\r\nprint(output)\r\n```\r\n\r\nWith `--use_cuda`, the output is:\r\n```\r\nweight has nan\r\noutput has nan\r\ntensor([[[nan, nan, nan,  ..., nan, nan, nan],\r\n         [nan, nan, nan,  ..., nan, nan, nan],\r\n         [nan, nan, nan,  ..., nan, nan, nan],\r\n         ...,\r\n         [nan, nan, nan,  ..., nan, nan, nan],\r\n         [nan, nan, nan,  ..., nan, nan, nan],\r\n         [nan, nan, nan,  ..., nan, nan, nan]]], device='cuda:0',\r\n       grad_fn=<SqueezeBackward1>)\r\n```\r\n\r\nCould you clarify a bit?"}