{"url": "https://api.github.com/repos/pytorch/pytorch/issues/12484", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/12484/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/12484/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/12484/events", "html_url": "https://github.com/pytorch/pytorch/issues/12484", "id": 368279124, "node_id": "MDU6SXNzdWUzNjgyNzkxMjQ=", "number": 12484, "title": "I got non-nan values from Conv1d with nan weights", "user": {"login": "dhgrs", "id": 22191150, "node_id": "MDQ6VXNlcjIyMTkxMTUw", "avatar_url": "https://avatars2.githubusercontent.com/u/22191150?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dhgrs", "html_url": "https://github.com/dhgrs", "followers_url": "https://api.github.com/users/dhgrs/followers", "following_url": "https://api.github.com/users/dhgrs/following{/other_user}", "gists_url": "https://api.github.com/users/dhgrs/gists{/gist_id}", "starred_url": "https://api.github.com/users/dhgrs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dhgrs/subscriptions", "organizations_url": "https://api.github.com/users/dhgrs/orgs", "repos_url": "https://api.github.com/users/dhgrs/repos", "events_url": "https://api.github.com/users/dhgrs/events{/privacy}", "received_events_url": "https://api.github.com/users/dhgrs/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 443484135, "node_id": "MDU6TGFiZWw0NDM0ODQxMzU=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/high%20priority", "name": "high priority", "color": "F22613", "default": false}, {"id": 553773019, "node_id": "MDU6TGFiZWw1NTM3NzMwMTk=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/needs-reproduction", "name": "needs-reproduction", "color": "e99695", "default": false}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2018-10-09T15:50:30Z", "updated_at": "2018-10-26T18:13:05Z", "closed_at": null, "author_association": "NONE", "body_html": "<h2><g-emoji class=\"g-emoji\" alias=\"bug\" fallback-src=\"https://assets-cdn.github.com/images/icons/emoji/unicode/1f41b.png\">\ud83d\udc1b</g-emoji> Bug</h2>\n\n<p><code>Conv1d</code> with nan weights outputs non-nan values during traing. But after saving and reloading the weights, it outputs nan values. It should output nan value not only after reloading but also during training if the weights are nan. And I don't know why the weights become nan.</p>\n<p>These lines in my repo are example. It prints only <code>weight has nan</code> after hundreds iterations.</p>\n<p><a href=\"https://github.com/dhgrs/pytorch-UniWaveNet/blob/484efb51a48586f9b1189a60ce35c6408310d744/net.py#L58-L70\">https://github.com/dhgrs/pytorch-UniWaveNet/blob/484efb51a48586f9b1189a60ce35c6408310d744/net.py#L58-L70</a></p>\n<h2>To Reproduce</h2>\n<p>Steps to reproduce the behavior:</p>\n<ol>\n<li>Clone this <a href=\"https://github.com/dhgrs/pytorch-UniWaveNet\">repo</a>.</li>\n<li>Download <a href=\"https://keithito.com/LJ-Speech-Dataset/\" rel=\"nofollow\">LJSpeech</a> and set the path in <code>params.py</code>.</li>\n<li>Install librosa and tqdm.</li>\n<li><code>Python train.py</code></li>\n</ol>\n<h2>Expected behavior</h2>\n<p><code>Conv1d</code> outputs nan value or <code>Conv1d</code>'s weights are not  nan values.</p>\n\n<h2>Environment</h2>\n<p>PyTorch version: 0.5.0a0+a24163a<br>\nIs debug build: No<br>\nCUDA used to build PyTorch: 9.1.85</p>\n<p>OS: Ubuntu 16.04.5 LTS<br>\nGCC version: (Ubuntu 5.4.0-6ubuntu1~16.04.10) 5.4.0 20160609<br>\nCMake version: version 3.5.1</p>\n<p>Python version: 3.6<br>\nIs CUDA available: Yes<br>\nCUDA runtime version: 9.1.85<br>\nGPU models and configuration: GPU 0: GeForce GTX 1080 Ti<br>\nNvidia driver version: 390.87<br>\ncuDNN version: Probably one of the following:<br>\n/usr/lib/x86_64-linux-gnu/libcudnn.so.7.1.2<br>\n/usr/lib/x86_64-linux-gnu/libcudnn_static_v7.a<br>\n/usr/local/lib/python3.6/site-packages/cupy/_lib/libcudnn.so.7</p>\n<p>Versions of relevant libraries:<br>\n[pip3] msgpack-numpy (0.4.3.1)<br>\n[pip3] numpy (1.15.1)<br>\n[pip3] torch (0.5.0a0+a24163a)<br>\n[pip3] torchtext (0.2.3)<br>\n[pip3] torchvision (0.2.1)<br>\n[conda] Could not collect</p>", "body_text": "\ud83d\udc1b Bug\n\nConv1d with nan weights outputs non-nan values during traing. But after saving and reloading the weights, it outputs nan values. It should output nan value not only after reloading but also during training if the weights are nan. And I don't know why the weights become nan.\nThese lines in my repo are example. It prints only weight has nan after hundreds iterations.\nhttps://github.com/dhgrs/pytorch-UniWaveNet/blob/484efb51a48586f9b1189a60ce35c6408310d744/net.py#L58-L70\nTo Reproduce\nSteps to reproduce the behavior:\n\nClone this repo.\nDownload LJSpeech and set the path in params.py.\nInstall librosa and tqdm.\nPython train.py\n\nExpected behavior\nConv1d outputs nan value or Conv1d's weights are not  nan values.\n\nEnvironment\nPyTorch version: 0.5.0a0+a24163a\nIs debug build: No\nCUDA used to build PyTorch: 9.1.85\nOS: Ubuntu 16.04.5 LTS\nGCC version: (Ubuntu 5.4.0-6ubuntu1~16.04.10) 5.4.0 20160609\nCMake version: version 3.5.1\nPython version: 3.6\nIs CUDA available: Yes\nCUDA runtime version: 9.1.85\nGPU models and configuration: GPU 0: GeForce GTX 1080 Ti\nNvidia driver version: 390.87\ncuDNN version: Probably one of the following:\n/usr/lib/x86_64-linux-gnu/libcudnn.so.7.1.2\n/usr/lib/x86_64-linux-gnu/libcudnn_static_v7.a\n/usr/local/lib/python3.6/site-packages/cupy/_lib/libcudnn.so.7\nVersions of relevant libraries:\n[pip3] msgpack-numpy (0.4.3.1)\n[pip3] numpy (1.15.1)\n[pip3] torch (0.5.0a0+a24163a)\n[pip3] torchtext (0.2.3)\n[pip3] torchvision (0.2.1)\n[conda] Could not collect", "body": "## \ud83d\udc1b Bug\r\n\r\n<!-- A clear and concise description of what the bug is. -->\r\n`Conv1d` with nan weights outputs non-nan values during traing. But after saving and reloading the weights, it outputs nan values. It should output nan value not only after reloading but also during training if the weights are nan. And I don't know why the weights become nan.\r\n\r\nThese lines in my repo are example. It prints only `weight has nan` after hundreds iterations.\r\n\r\nhttps://github.com/dhgrs/pytorch-UniWaveNet/blob/484efb51a48586f9b1189a60ce35c6408310d744/net.py#L58-L70\r\n\r\n## To Reproduce\r\n\r\nSteps to reproduce the behavior:\r\n\r\n1. Clone this [repo](https://github.com/dhgrs/pytorch-UniWaveNet).\r\n1. Download [LJSpeech](https://keithito.com/LJ-Speech-Dataset/) and set the path in `params.py`.\r\n1. Install librosa and tqdm.\r\n1. `Python train.py`\r\n\r\n## Expected behavior\r\n\r\n`Conv1d` outputs nan value or `Conv1d`'s weights are not  nan values.\r\n\r\n<!-- A clear and concise description of what you expected to happen. -->\r\n\r\n## Environment\r\nPyTorch version: 0.5.0a0+a24163a\r\nIs debug build: No\r\nCUDA used to build PyTorch: 9.1.85\r\n\r\nOS: Ubuntu 16.04.5 LTS\r\nGCC version: (Ubuntu 5.4.0-6ubuntu1~16.04.10) 5.4.0 20160609\r\nCMake version: version 3.5.1\r\n\r\nPython version: 3.6\r\nIs CUDA available: Yes\r\nCUDA runtime version: 9.1.85\r\nGPU models and configuration: GPU 0: GeForce GTX 1080 Ti\r\nNvidia driver version: 390.87\r\ncuDNN version: Probably one of the following:\r\n/usr/lib/x86_64-linux-gnu/libcudnn.so.7.1.2\r\n/usr/lib/x86_64-linux-gnu/libcudnn_static_v7.a\r\n/usr/local/lib/python3.6/site-packages/cupy/_lib/libcudnn.so.7\r\n\r\nVersions of relevant libraries:\r\n[pip3] msgpack-numpy (0.4.3.1)\r\n[pip3] numpy (1.15.1)\r\n[pip3] torch (0.5.0a0+a24163a)\r\n[pip3] torchtext (0.2.3)\r\n[pip3] torchvision (0.2.1)\r\n[conda] Could not collect\r\n"}