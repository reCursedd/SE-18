{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/201785344", "pull_request_review_id": 136354562, "id": 201785344, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTc4NTM0NA==", "diff_hunk": "@@ -254,6 +254,49 @@ def f(x, y):\n         self.assertExpectedGraph(trace)\n         self.assertExportImport(trace, (x, y))\n \n+    def test_peephole(self):\n+        a = torch.tensor([0.4], requires_grad=True)\n+        b = torch.tensor([0.7], requires_grad=True)\n+        c = torch.tensor([0.4, 0.5], requires_grad=True)\n+        d = torch.tensor([0], dtype=torch.int32)\n+\n+        def f(x, y):\n+            return x.type_as(y)\n+\n+        trace, z = torch.jit.get_trace_graph(f, (a, b))\n+        self.run_pass('peephole', trace)\n+        self.assertExpectedGraph(trace, subname=\"same_size\")\n+        trace, z = torch.jit.get_trace_graph(f, (a, c))\n+        self.run_pass('peephole', trace)\n+        self.assertExpectedGraph(trace, subname=\"different_size\")\n+        trace, z = torch.jit.get_trace_graph(f, (a, d))\n+        self.run_pass('peephole', trace)\n+        self.assertExpectedGraph(trace, subname=\"different_type\")\n+\n+    def test_peephole_dynamic(self):\n+        def f(x, y):\n+            return x.type_as(y)\n+\n+        fn = torch.jit.script(f)\n+        torch._C._jit_pass_peephole(fn.graph)\n+        self.assertExpectedGraph(fn.graph)", "path": "test/test_jit.py", "position": null, "original_position": 29, "commit_id": "703edf4faf8934ca107a428a82fd23e5f562ac54", "original_commit_id": "96c57893a32dbe7913fb8426f260698d46073637", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "I agree. I just don't see much value in ensuring that having no type annotations prevents the optimization (which is pretty obvious, and it's not even the setup in which the pass will be used).", "created_at": "2018-07-11T17:53:22Z", "updated_at": "2018-11-23T15:47:09Z", "html_url": "https://github.com/pytorch/pytorch/pull/9316#discussion_r201785344", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/9316", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/201785344"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/9316#discussion_r201785344"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/9316"}}, "body_html": "<p>I agree. I just don't see much value in ensuring that having no type annotations prevents the optimization (which is pretty obvious, and it's not even the setup in which the pass will be used).</p>", "body_text": "I agree. I just don't see much value in ensuring that having no type annotations prevents the optimization (which is pretty obvious, and it's not even the setup in which the pass will be used).", "in_reply_to_id": 201753672}