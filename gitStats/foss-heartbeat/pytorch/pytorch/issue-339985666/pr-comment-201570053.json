{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/201570053", "pull_request_review_id": 136096258, "id": 201570053, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTU3MDA1Mw==", "diff_hunk": "@@ -41,6 +41,20 @@ void PeepholeOptimize(Block * block) {\n           // Let DCE clean up any unused nodes at this point\n         }\n       } break;\n+      case aten::type_as: {\n+        JIT_ASSERT(n->inputs().size() == 2);\n+        Value* LHS(n->input(0));\n+        Value* RHS(n->input(1));\n+        // If LHS and RHS have the same static type, remove the type_as operator.\n+        if (RHS->type()->kind() == TypeKind::TensorType) {\n+           auto LType = (*LHS->type()).cast<TensorType>();", "path": "torch/csrc/jit/passes/peephole.cpp", "position": null, "original_position": 10, "commit_id": "703edf4faf8934ca107a428a82fd23e5f562ac54", "original_commit_id": "96c57893a32dbe7913fb8426f260698d46073637", "user": {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, "body": "The `cast` function returns null when something is not a tensor type, but is not being checked for the LHS here. You want something like:\r\n\r\n```\r\nif(TensorType* lhs = n->input(0)->type()->cast<TenorType>()) {\r\n  if(TensorType* rhs = n->input(1)->type()->cast<TenorType>()) {\r\n     ...\r\n```", "created_at": "2018-07-11T05:42:03Z", "updated_at": "2018-11-23T15:47:06Z", "html_url": "https://github.com/pytorch/pytorch/pull/9316#discussion_r201570053", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/9316", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/201570053"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/9316#discussion_r201570053"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/9316"}}, "body_html": "<p>The <code>cast</code> function returns null when something is not a tensor type, but is not being checked for the LHS here. You want something like:</p>\n<pre><code>if(TensorType* lhs = n-&gt;input(0)-&gt;type()-&gt;cast&lt;TenorType&gt;()) {\n  if(TensorType* rhs = n-&gt;input(1)-&gt;type()-&gt;cast&lt;TenorType&gt;()) {\n     ...\n</code></pre>", "body_text": "The cast function returns null when something is not a tensor type, but is not being checked for the LHS here. You want something like:\nif(TensorType* lhs = n->input(0)->type()->cast<TenorType>()) {\n  if(TensorType* rhs = n->input(1)->type()->cast<TenorType>()) {\n     ..."}