{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/201514290", "pull_request_review_id": 136032506, "id": 201514290, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTUxNDI5MA==", "diff_hunk": "@@ -41,6 +41,16 @@ void PeepholeOptimize(Block * block) {\n           // Let DCE clean up any unused nodes at this point\n         }\n       } break;\n+      case aten::type_as: {\n+        JIT_ASSERT(n->inputs().size() == 2);\n+        Value* LHS(n->input(0));\n+        Value* RHS(n->input(1));\n+        // If LHS and RHS have the same static type, remove the type_as operator.\n+        if ((RHS->type()->kind() != TypeKind::DynamicType &&", "path": "torch/csrc/jit/passes/peephole.cpp", "position": null, "original_position": 9, "commit_id": "703edf4faf8934ca107a428a82fd23e5f562ac54", "original_commit_id": "61b9813315c08dec7466ea0ba6926a7f32f3d51d", "user": {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, "body": "This condition will allow some redundant type_as nodes to remain. `type_as` is redundant if:\r\n\r\n1. Both rhs and lhs are TensorType types (use .cast<TensorType> to check [1])\r\n2. rhs  and lhs have the same `device` and `scalarType`\r\n\r\nSizes/strides can be different between the two tensors.\r\n\r\n\r\n[1] \r\n```\r\nif(TensorType* lhs = n->input(0)) {\r\n  if(TensorType* rhs = n->input(1)) {\r\n     ...\r\n   }\r\n} \r\n```", "created_at": "2018-07-10T22:23:15Z", "updated_at": "2018-11-23T15:47:05Z", "html_url": "https://github.com/pytorch/pytorch/pull/9316#discussion_r201514290", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/9316", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/201514290"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/9316#discussion_r201514290"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/9316"}}, "body_html": "<p>This condition will allow some redundant type_as nodes to remain. <code>type_as</code> is redundant if:</p>\n<ol>\n<li>Both rhs and lhs are TensorType types (use .cast to check [1])</li>\n<li>rhs  and lhs have the same <code>device</code> and <code>scalarType</code></li>\n</ol>\n<p>Sizes/strides can be different between the two tensors.</p>\n<p>[1]</p>\n<pre><code>if(TensorType* lhs = n-&gt;input(0)) {\n  if(TensorType* rhs = n-&gt;input(1)) {\n     ...\n   }\n} \n</code></pre>", "body_text": "This condition will allow some redundant type_as nodes to remain. type_as is redundant if:\n\nBoth rhs and lhs are TensorType types (use .cast to check [1])\nrhs  and lhs have the same device and scalarType\n\nSizes/strides can be different between the two tensors.\n[1]\nif(TensorType* lhs = n->input(0)) {\n  if(TensorType* rhs = n->input(1)) {\n     ...\n   }\n}"}