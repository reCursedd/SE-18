{"url": "https://api.github.com/repos/pytorch/pytorch/issues/3001", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/3001/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/3001/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/3001/events", "html_url": "https://github.com/pytorch/pytorch/issues/3001", "id": 263348122, "node_id": "MDU6SXNzdWUyNjMzNDgxMjI=", "number": 3001, "title": "Trying to do advanced indexing using a Variable causes a hang", "user": {"login": "futurulus", "id": 933453, "node_id": "MDQ6VXNlcjkzMzQ1Mw==", "avatar_url": "https://avatars3.githubusercontent.com/u/933453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/futurulus", "html_url": "https://github.com/futurulus", "followers_url": "https://api.github.com/users/futurulus/followers", "following_url": "https://api.github.com/users/futurulus/following{/other_user}", "gists_url": "https://api.github.com/users/futurulus/gists{/gist_id}", "starred_url": "https://api.github.com/users/futurulus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/futurulus/subscriptions", "organizations_url": "https://api.github.com/users/futurulus/orgs", "repos_url": "https://api.github.com/users/futurulus/repos", "events_url": "https://api.github.com/users/futurulus/events{/privacy}", "received_events_url": "https://api.github.com/users/futurulus/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 424131847, "node_id": "MDU6TGFiZWw0MjQxMzE4NDc=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/bug", "name": "bug", "color": "b60205", "default": true}, {"id": 443484135, "node_id": "MDU6TGFiZWw0NDM0ODQxMzU=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/high%20priority", "name": "high priority", "color": "F22613", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "killeent", "id": 4529377, "node_id": "MDQ6VXNlcjQ1MjkzNzc=", "avatar_url": "https://avatars1.githubusercontent.com/u/4529377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/killeent", "html_url": "https://github.com/killeent", "followers_url": "https://api.github.com/users/killeent/followers", "following_url": "https://api.github.com/users/killeent/following{/other_user}", "gists_url": "https://api.github.com/users/killeent/gists{/gist_id}", "starred_url": "https://api.github.com/users/killeent/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/killeent/subscriptions", "organizations_url": "https://api.github.com/users/killeent/orgs", "repos_url": "https://api.github.com/users/killeent/repos", "events_url": "https://api.github.com/users/killeent/events{/privacy}", "received_events_url": "https://api.github.com/users/killeent/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "killeent", "id": 4529377, "node_id": "MDQ6VXNlcjQ1MjkzNzc=", "avatar_url": "https://avatars1.githubusercontent.com/u/4529377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/killeent", "html_url": "https://github.com/killeent", "followers_url": "https://api.github.com/users/killeent/followers", "following_url": "https://api.github.com/users/killeent/following{/other_user}", "gists_url": "https://api.github.com/users/killeent/gists{/gist_id}", "starred_url": "https://api.github.com/users/killeent/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/killeent/subscriptions", "organizations_url": "https://api.github.com/users/killeent/orgs", "repos_url": "https://api.github.com/users/killeent/repos", "events_url": "https://api.github.com/users/killeent/events{/privacy}", "received_events_url": "https://api.github.com/users/killeent/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 6, "created_at": "2017-10-06T06:32:52Z", "updated_at": "2017-10-18T21:13:33Z", "closed_at": "2017-10-18T21:13:33Z", "author_association": "NONE", "body_html": "<p><strong>Minimal test case:</strong></p>\n<pre><code>import torch\nx = torch.autograd.Variable(torch.FloatTensor([[0.1, 0.2], [0.3, 0.4]]))\nidx = torch.autograd.Variable(torch.LongTensor([1, 0]))\nprint(x[idx, :])\n</code></pre>\n<p><strong>Expected output:</strong></p>\n<p>Either:</p>\n<pre><code>Variable containing:\n 0.3000  0.4000\n 0.1000  0.2000\n[torch.FloatTensor of size 2x2]\n</code></pre>\n<p>(the above is what is printed if I replace the last line with <code>print(x[idx])</code>)</p>\n<p>...or an immediate exception traceback informing me that advanced indices must be a <code>Tensor</code> and not a <code>Variable</code>.</p>\n<p><strong>Actual output:</strong></p>\n<p>The program initially hangs. <em>After</em> I interrupt the program with ^C, the following exception is displayed:</p>\n<pre><code>Traceback (most recent call last):\n  File \"loop.py\", line 5, in &lt;module&gt;\n    print(x[idx, :])\n  File \"/home/.../lib/python3.5/site-packages/torch/autograd/variable.py\", line 76, in __getitem__\n    return Index.apply(self, key)\n  File \"/home/.../lib/python3.5/site-packages/torch/autograd/_functions/tensor.py\", line 16, in forward\n    result = i.index(ctx.index)\nIndexError: When performing advanced indexing the indexing objects must be LongTensors or convertible to LongTensors\n</code></pre>\n<p><strong>More details:</strong></p>\n<p>From some digging around in pdb, it looked like <a href=\"https://github.com/pytorch/pytorch/blob/master/torch/autograd/variable.py#L78\"><code>Variable.__getitem__</code></a> was tail-calling itself via C code. While I couldn't identify the full stack, it looks like it eventually made its way to <a href=\"https://github.com/pytorch/pytorch/blob/master/torch/csrc/generic/Tensor.cpp#L785\">this attempt to convert the <code>Variable</code> index to a <code>LongTensor</code></a>. Sure enough, this also hangs:</p>\n<pre><code>torch.LongTensor(idx)\n</code></pre>\n<p>Perhaps the <code>LongTensor</code> constructor is trying to treat the <code>Variable</code> as a iterable, and getting stuck because iterating through a <code>Variable</code> returns a sequence of <code>Variables</code>? (Happy to dig further, if someone can point me to the logic for initializing a <code>LongTensor</code>.)</p>\n<p>Python 3.5.2, GCC 5.4.0 on Linux, <code>torch.__version__</code> = '0.2.0_3', no CUDA</p>", "body_text": "Minimal test case:\nimport torch\nx = torch.autograd.Variable(torch.FloatTensor([[0.1, 0.2], [0.3, 0.4]]))\nidx = torch.autograd.Variable(torch.LongTensor([1, 0]))\nprint(x[idx, :])\n\nExpected output:\nEither:\nVariable containing:\n 0.3000  0.4000\n 0.1000  0.2000\n[torch.FloatTensor of size 2x2]\n\n(the above is what is printed if I replace the last line with print(x[idx]))\n...or an immediate exception traceback informing me that advanced indices must be a Tensor and not a Variable.\nActual output:\nThe program initially hangs. After I interrupt the program with ^C, the following exception is displayed:\nTraceback (most recent call last):\n  File \"loop.py\", line 5, in <module>\n    print(x[idx, :])\n  File \"/home/.../lib/python3.5/site-packages/torch/autograd/variable.py\", line 76, in __getitem__\n    return Index.apply(self, key)\n  File \"/home/.../lib/python3.5/site-packages/torch/autograd/_functions/tensor.py\", line 16, in forward\n    result = i.index(ctx.index)\nIndexError: When performing advanced indexing the indexing objects must be LongTensors or convertible to LongTensors\n\nMore details:\nFrom some digging around in pdb, it looked like Variable.__getitem__ was tail-calling itself via C code. While I couldn't identify the full stack, it looks like it eventually made its way to this attempt to convert the Variable index to a LongTensor. Sure enough, this also hangs:\ntorch.LongTensor(idx)\n\nPerhaps the LongTensor constructor is trying to treat the Variable as a iterable, and getting stuck because iterating through a Variable returns a sequence of Variables? (Happy to dig further, if someone can point me to the logic for initializing a LongTensor.)\nPython 3.5.2, GCC 5.4.0 on Linux, torch.__version__ = '0.2.0_3', no CUDA", "body": "**Minimal test case:**\r\n\r\n    import torch\r\n    x = torch.autograd.Variable(torch.FloatTensor([[0.1, 0.2], [0.3, 0.4]]))\r\n    idx = torch.autograd.Variable(torch.LongTensor([1, 0]))\r\n    print(x[idx, :])\r\n\r\n**Expected output:**\r\n\r\nEither:\r\n\r\n    Variable containing:\r\n     0.3000  0.4000\r\n     0.1000  0.2000\r\n    [torch.FloatTensor of size 2x2]\r\n\r\n(the above is what is printed if I replace the last line with `print(x[idx])`)\r\n\r\n...or an immediate exception traceback informing me that advanced indices must be a `Tensor` and not a `Variable`.\r\n\r\n**Actual output:**\r\n\r\nThe program initially hangs. *After* I interrupt the program with ^C, the following exception is displayed:\r\n\r\n    Traceback (most recent call last):\r\n      File \"loop.py\", line 5, in <module>\r\n        print(x[idx, :])\r\n      File \"/home/.../lib/python3.5/site-packages/torch/autograd/variable.py\", line 76, in __getitem__\r\n        return Index.apply(self, key)\r\n      File \"/home/.../lib/python3.5/site-packages/torch/autograd/_functions/tensor.py\", line 16, in forward\r\n        result = i.index(ctx.index)\r\n    IndexError: When performing advanced indexing the indexing objects must be LongTensors or convertible to LongTensors\r\n\r\n**More details:**\r\n\r\nFrom some digging around in pdb, it looked like [`Variable.__getitem__`](https://github.com/pytorch/pytorch/blob/master/torch/autograd/variable.py#L78) was tail-calling itself via C code. While I couldn't identify the full stack, it looks like it eventually made its way to [this attempt to convert the `Variable` index to a `LongTensor`](https://github.com/pytorch/pytorch/blob/master/torch/csrc/generic/Tensor.cpp#L785). Sure enough, this also hangs:\r\n\r\n    torch.LongTensor(idx)\r\n\r\nPerhaps the `LongTensor` constructor is trying to treat the `Variable` as a iterable, and getting stuck because iterating through a `Variable` returns a sequence of `Variables`? (Happy to dig further, if someone can point me to the logic for initializing a `LongTensor`.)\r\n\r\nPython 3.5.2, GCC 5.4.0 on Linux, `torch.__version__` = '0.2.0_3', no CUDA"}