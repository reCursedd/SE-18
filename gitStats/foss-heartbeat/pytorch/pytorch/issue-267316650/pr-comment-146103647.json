{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/146103647", "pull_request_review_id": 71005614, "id": 146103647, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0NjEwMzY0Nw==", "diff_hunk": "@@ -173,12 +173,61 @@ Variable VariableType::as_variable(const Scalar & scalar) const {\n   return make_variable(std::move(tensor));\n }\n \n-static void check_inplace(const VariableImpl& pImpl) {\n-  if (pImpl.requires_grad && !pImpl.grad_fn) {\n+struct VariableFlags {\n+  bool requires_grad;\n+  bool is_volatile;\n+};\n+\n+template<typename T>\n+static VariableFlags compute_flags_tmpl(T tensors) {\n+  VariableFlags flags = {false, false};\n+  for (const Tensor& tensor : tensors) {\n+    auto& var = static_cast<const Variable&>(tensor);\n+    if (var.defined()) {\n+      flags.requires_grad |= var.requires_grad();\n+      flags.is_volatile |= var.is_volatile();\n+    }\n+  }\n+  flags.requires_grad &= !flags.is_volatile;\n+  return flags;\n+}\n+\n+using TensorRef = std::reference_wrapper<const Tensor>;", "path": "tools/autograd/templates/VariableType.cpp", "position": 25, "original_position": 25, "commit_id": "dc74aec7ca603a5217702101ec2c35cdeb454590", "original_commit_id": "69cc2ba56dd94ff8731e7f18ff506ead115179d9", "user": {"login": "colesbury", "id": 655866, "node_id": "MDQ6VXNlcjY1NTg2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/655866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colesbury", "html_url": "https://github.com/colesbury", "followers_url": "https://api.github.com/users/colesbury/followers", "following_url": "https://api.github.com/users/colesbury/following{/other_user}", "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions", "organizations_url": "https://api.github.com/users/colesbury/orgs", "repos_url": "https://api.github.com/users/colesbury/repos", "events_url": "https://api.github.com/users/colesbury/events{/privacy}", "received_events_url": "https://api.github.com/users/colesbury/received_events", "type": "User", "site_admin": false}, "body": "No. The point of this is to avoid the copy-constructor (and atomic ops) in `std::initializer_list<Tensor>`. Since `std::initializer_list<Tensor&>` isn't valid C++ (`Tensor&` isn't copyable), we have to use a `reference_wrapper`.", "created_at": "2017-10-21T11:38:20Z", "updated_at": "2018-11-23T15:35:35Z", "html_url": "https://github.com/pytorch/pytorch/pull/3212#discussion_r146103647", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/3212", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/146103647"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/3212#discussion_r146103647"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/3212"}}, "body_html": "<p>No. The point of this is to avoid the copy-constructor (and atomic ops) in <code>std::initializer_list&lt;Tensor&gt;</code>. Since <code>std::initializer_list&lt;Tensor&amp;&gt;</code> isn't valid C++ (<code>Tensor&amp;</code> isn't copyable), we have to use a <code>reference_wrapper</code>.</p>", "body_text": "No. The point of this is to avoid the copy-constructor (and atomic ops) in std::initializer_list<Tensor>. Since std::initializer_list<Tensor&> isn't valid C++ (Tensor& isn't copyable), we have to use a reference_wrapper.", "in_reply_to_id": 146096119}