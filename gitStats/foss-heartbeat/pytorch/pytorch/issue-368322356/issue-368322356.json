{"url": "https://api.github.com/repos/pytorch/pytorch/issues/12490", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/12490/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/12490/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/12490/events", "html_url": "https://github.com/pytorch/pytorch/pull/12490", "id": 368322356, "node_id": "MDExOlB1bGxSZXF1ZXN0MjIxNTI2OTk2", "number": 12490, "title": "Multinomial raise error", "user": {"login": "ailzhang", "id": 5248122, "node_id": "MDQ6VXNlcjUyNDgxMjI=", "avatar_url": "https://avatars2.githubusercontent.com/u/5248122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ailzhang", "html_url": "https://github.com/ailzhang", "followers_url": "https://api.github.com/users/ailzhang/followers", "following_url": "https://api.github.com/users/ailzhang/following{/other_user}", "gists_url": "https://api.github.com/users/ailzhang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ailzhang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ailzhang/subscriptions", "organizations_url": "https://api.github.com/users/ailzhang/orgs", "repos_url": "https://api.github.com/users/ailzhang/repos", "events_url": "https://api.github.com/users/ailzhang/events{/privacy}", "received_events_url": "https://api.github.com/users/ailzhang/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-10-09T17:43:15Z", "updated_at": "2018-11-23T15:52:45Z", "closed_at": "2018-10-11T03:40:27Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/12490", "html_url": "https://github.com/pytorch/pytorch/pull/12490", "diff_url": "https://github.com/pytorch/pytorch/pull/12490.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/12490.patch"}, "body_html": "<p><span class=\"issue-keyword tooltipped tooltipped-se\" aria-label=\"This pull request closes issue #12260.\">Fixes</span> <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"365948681\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/12260\" data-hovercard-type=\"issue\" data-hovercard-url=\"/pytorch/pytorch/issues/12260/hovercard\" href=\"https://github.com/pytorch/pytorch/issues/12260\">#12260</a> <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"261678734\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/2896\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/pytorch/pytorch/pull/2896/hovercard\" href=\"https://github.com/pytorch/pytorch/pull/2896\">#2896</a></p>\n<pre><code>torch.multinomial(torch.FloatTensor([0, 1, 0, 0]), 3, replacement=False)\n</code></pre>\n<p>The old behavior is that we return <code>0</code> after we run out of postive categories. Now we raise an error based on discussion in the issue thread.</p>\n<ul>\n<li>Add testcase for cpu &amp; cuda case, in cuda case <code>n_samples=1</code> is a simple special case, so we test against <code>n_sample=2</code> instead.</li>\n</ul>", "body_text": "Fixes #12260 #2896\ntorch.multinomial(torch.FloatTensor([0, 1, 0, 0]), 3, replacement=False)\n\nThe old behavior is that we return 0 after we run out of postive categories. Now we raise an error based on discussion in the issue thread.\n\nAdd testcase for cpu & cuda case, in cuda case n_samples=1 is a simple special case, so we test against n_sample=2 instead.", "body": "Fixes #12260 #2896\r\n\r\n```\r\ntorch.multinomial(torch.FloatTensor([0, 1, 0, 0]), 3, replacement=False)\r\n```\r\nThe old behavior is that we return `0` after we run out of postive categories. Now we raise an error based on discussion in the issue thread. \r\n\r\n- Add testcase for cpu & cuda case, in cuda case `n_samples=1` is a simple special case, so we test against `n_sample=2` instead. "}