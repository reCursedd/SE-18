{"url": "https://api.github.com/repos/pytorch/pytorch/issues/14072", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/14072/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/14072/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/14072/events", "html_url": "https://github.com/pytorch/pytorch/issues/14072", "id": 381429002, "node_id": "MDU6SXNzdWUzODE0MjkwMDI=", "number": 14072, "title": "the device of tensor can not be change", "user": {"login": "szupzp", "id": 26061103, "node_id": "MDQ6VXNlcjI2MDYxMTAz", "avatar_url": "https://avatars0.githubusercontent.com/u/26061103?v=4", "gravatar_id": "", "url": "https://api.github.com/users/szupzp", "html_url": "https://github.com/szupzp", "followers_url": "https://api.github.com/users/szupzp/followers", "following_url": "https://api.github.com/users/szupzp/following{/other_user}", "gists_url": "https://api.github.com/users/szupzp/gists{/gist_id}", "starred_url": "https://api.github.com/users/szupzp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/szupzp/subscriptions", "organizations_url": "https://api.github.com/users/szupzp/orgs", "repos_url": "https://api.github.com/users/szupzp/repos", "events_url": "https://api.github.com/users/szupzp/events{/privacy}", "received_events_url": "https://api.github.com/users/szupzp/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-11-16T03:16:17Z", "updated_at": "2018-11-16T04:27:39Z", "closed_at": "2018-11-16T03:28:11Z", "author_association": "NONE", "body_html": "<p>I got an error while training my model.<br>\n`def train(args):</p>\n<pre><code># Setup Dataloader\ntrain_set = Loader(root_path='/home/zhanpengpan/zhanpengpan/train_test_data/',\n                                                    sub_path=['clean_trainset_56spk_32k_wav_lp07/', 'clean_trainset_56spk_32k_wav_lp14/'],\n                                                     win_type='hanning', win_len=256, hop_len=128, sr=32000, model_type= args.arch\n                                                     )\nvali_set = Loader(root_path='/home/zhanpengpan/zhanpengpan/train_test_data/',\n                                                    sub_path=['clean_testset_32k_wav_lp07/', 'clean_testset_32k_wav_lp14/'],\n                                                     win_type='hanning', win_len=256, hop_len=128, sr=32000, model_type= args.arch\n\n                                              )\ntrain_loader = data.DataLoader(train_set, batch_size=args.batch_size, num_workers=8)\nval_loader = data.DataLoader(vali_set, batch_size=args.batch_size, num_workers=8)\n# setup model\nif(args.arch=='dnn'):\n    model = models.DNN()\nelif(args.arch=='cnn'):\n    model = models.CNN()\nif torch.cuda.is_available():\n    device = torch.device(\"cuda\")\n    model.to(device)\n\n\n# optimizer\noptimizer = torch.optim.Adam(model.parameters(), lr=args.l_rate, weight_decay=5e-4)\n\n# loss function\nloss_f = nn.MSELoss()\n\n# Setup device\ndevice = torch.device(\"cuda:0\")\nprint(device)\n# train\nmin_loss = 100000.0\nfor epoch in range(args.n_epoch):\n    model.train()\n    for i, (lp07, lp14) in enumerate(train_loader):\n        if args.arch == 'cnn':\n            lp07 = lp07.permute(1,0,2)\n            lp07 = lp07.view(-1, 1, 64)\n        else:\n            lp07 = lp07.view(-1,64)\n        lp14 = lp14.view(-1,64)\n        if lp07.shape != lp14.shape:\n            print(lp07.shape)\n            print(lp14.shape)\n        lp07.to(device)\n        lp14.to(device)\n        optimizer.zero_grad()\n        outputs = model(lp07)\n        loss = loss_f(outputs, lp14)\n        optimizer.step()\n\n        if (i + 1) % 50 == 0:\n            print(\"Epoch [%d/%d] Loss: %.4f\" % (epoch + 1, args.n_epoch, loss.data[0]))\n\n    model.eval()\n    sum_loss = 0.0\n    for i_val, (lp07_val, lp14_val) in tqdm(enumerate(val_loader)):\n        if args.arch == 'cnn':\n            lp07_val = lp07_val.permute(1,0,2)\n            lp07_val = lp07_val.view(-1, 1, 64)\n        else:\n            lp07_val = lp07_val.view(-1,64)\n        lp14_val = lp14_val.view(-1,64)\n        val_outputs = model(lp07_val)\n        val_loss = loss_f(val_outputs, lp14_val)\n        sum_loss += val_loss\n    print('val_loss = %f',sum_loss/vali_set.__len__())`\n</code></pre>\n<p>the error is:<br>\nTraceback (most recent call last):<br>\nFile \"/home/zhanpengpan/zhanpengpan/PycharmProjects/blind_bwe/train.py\", line 114, in <br>\ntrain(args)<br>\nFile \"/home/zhanpengpan/zhanpengpan/PycharmProjects/blind_bwe/train.py\", line 69, in train<br>\noutputs = model(lp07)<br>\nFile \"/home/zhanpengpan/.local/lib/python3.5/site-packages/torch/nn/modules/module.py\", line 477, in <strong>call</strong><br>\nresult = self.forward(*input, **kwargs)<br>\nFile \"/media/datas/zhanpengpan/PycharmProjects/blind_bwe/models/DNN.py\", line 27, in forward<br>\noutput = self.fc1(input)<br>\nFile \"/home/zhanpengpan/.local/lib/python3.5/site-packages/torch/nn/modules/module.py\", line 477, in <strong>call</strong><br>\nresult = self.forward(*input, **kwargs)<br>\nFile \"/home/zhanpengpan/.local/lib/python3.5/site-packages/torch/nn/modules/container.py\", line 91, in forward<br>\ninput = module(input)<br>\nFile \"/home/zhanpengpan/.local/lib/python3.5/site-packages/torch/nn/modules/module.py\", line 477, in <strong>call</strong><br>\nresult = self.forward(*input, **kwargs)<br>\nFile \"/home/zhanpengpan/.local/lib/python3.5/site-packages/torch/nn/modules/linear.py\", line 55, in forward<br>\nreturn F.linear(input, self.weight, self.bias)<br>\nFile \"/home/zhanpengpan/.local/lib/python3.5/site-packages/torch/nn/functional.py\", line 1024, in linear<br>\nreturn torch.addmm(bias, input, weight.t())<br>\nRuntimeError: Expected object of type torch.cuda.FloatTensor but found type torch.FloatTensor for argument <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"171522963\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/4\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/pytorch/pytorch/pull/4/hovercard\" href=\"https://github.com/pytorch/pytorch/pull/4\">#4</a> 'mat1'</p>\n<p>It means that my model's device is GPU but the input tensor is CPU. How can i do ?</p>", "body_text": "I got an error while training my model.\n`def train(args):\n# Setup Dataloader\ntrain_set = Loader(root_path='/home/zhanpengpan/zhanpengpan/train_test_data/',\n                                                    sub_path=['clean_trainset_56spk_32k_wav_lp07/', 'clean_trainset_56spk_32k_wav_lp14/'],\n                                                     win_type='hanning', win_len=256, hop_len=128, sr=32000, model_type= args.arch\n                                                     )\nvali_set = Loader(root_path='/home/zhanpengpan/zhanpengpan/train_test_data/',\n                                                    sub_path=['clean_testset_32k_wav_lp07/', 'clean_testset_32k_wav_lp14/'],\n                                                     win_type='hanning', win_len=256, hop_len=128, sr=32000, model_type= args.arch\n\n                                              )\ntrain_loader = data.DataLoader(train_set, batch_size=args.batch_size, num_workers=8)\nval_loader = data.DataLoader(vali_set, batch_size=args.batch_size, num_workers=8)\n# setup model\nif(args.arch=='dnn'):\n    model = models.DNN()\nelif(args.arch=='cnn'):\n    model = models.CNN()\nif torch.cuda.is_available():\n    device = torch.device(\"cuda\")\n    model.to(device)\n\n\n# optimizer\noptimizer = torch.optim.Adam(model.parameters(), lr=args.l_rate, weight_decay=5e-4)\n\n# loss function\nloss_f = nn.MSELoss()\n\n# Setup device\ndevice = torch.device(\"cuda:0\")\nprint(device)\n# train\nmin_loss = 100000.0\nfor epoch in range(args.n_epoch):\n    model.train()\n    for i, (lp07, lp14) in enumerate(train_loader):\n        if args.arch == 'cnn':\n            lp07 = lp07.permute(1,0,2)\n            lp07 = lp07.view(-1, 1, 64)\n        else:\n            lp07 = lp07.view(-1,64)\n        lp14 = lp14.view(-1,64)\n        if lp07.shape != lp14.shape:\n            print(lp07.shape)\n            print(lp14.shape)\n        lp07.to(device)\n        lp14.to(device)\n        optimizer.zero_grad()\n        outputs = model(lp07)\n        loss = loss_f(outputs, lp14)\n        optimizer.step()\n\n        if (i + 1) % 50 == 0:\n            print(\"Epoch [%d/%d] Loss: %.4f\" % (epoch + 1, args.n_epoch, loss.data[0]))\n\n    model.eval()\n    sum_loss = 0.0\n    for i_val, (lp07_val, lp14_val) in tqdm(enumerate(val_loader)):\n        if args.arch == 'cnn':\n            lp07_val = lp07_val.permute(1,0,2)\n            lp07_val = lp07_val.view(-1, 1, 64)\n        else:\n            lp07_val = lp07_val.view(-1,64)\n        lp14_val = lp14_val.view(-1,64)\n        val_outputs = model(lp07_val)\n        val_loss = loss_f(val_outputs, lp14_val)\n        sum_loss += val_loss\n    print('val_loss = %f',sum_loss/vali_set.__len__())`\n\nthe error is:\nTraceback (most recent call last):\nFile \"/home/zhanpengpan/zhanpengpan/PycharmProjects/blind_bwe/train.py\", line 114, in \ntrain(args)\nFile \"/home/zhanpengpan/zhanpengpan/PycharmProjects/blind_bwe/train.py\", line 69, in train\noutputs = model(lp07)\nFile \"/home/zhanpengpan/.local/lib/python3.5/site-packages/torch/nn/modules/module.py\", line 477, in call\nresult = self.forward(*input, **kwargs)\nFile \"/media/datas/zhanpengpan/PycharmProjects/blind_bwe/models/DNN.py\", line 27, in forward\noutput = self.fc1(input)\nFile \"/home/zhanpengpan/.local/lib/python3.5/site-packages/torch/nn/modules/module.py\", line 477, in call\nresult = self.forward(*input, **kwargs)\nFile \"/home/zhanpengpan/.local/lib/python3.5/site-packages/torch/nn/modules/container.py\", line 91, in forward\ninput = module(input)\nFile \"/home/zhanpengpan/.local/lib/python3.5/site-packages/torch/nn/modules/module.py\", line 477, in call\nresult = self.forward(*input, **kwargs)\nFile \"/home/zhanpengpan/.local/lib/python3.5/site-packages/torch/nn/modules/linear.py\", line 55, in forward\nreturn F.linear(input, self.weight, self.bias)\nFile \"/home/zhanpengpan/.local/lib/python3.5/site-packages/torch/nn/functional.py\", line 1024, in linear\nreturn torch.addmm(bias, input, weight.t())\nRuntimeError: Expected object of type torch.cuda.FloatTensor but found type torch.FloatTensor for argument #4 'mat1'\nIt means that my model's device is GPU but the input tensor is CPU. How can i do ?", "body": "I got an error while training my model.\r\n`def train(args):\r\n\r\n    # Setup Dataloader\r\n    train_set = Loader(root_path='/home/zhanpengpan/zhanpengpan/train_test_data/',\r\n                                                        sub_path=['clean_trainset_56spk_32k_wav_lp07/', 'clean_trainset_56spk_32k_wav_lp14/'],\r\n                                                         win_type='hanning', win_len=256, hop_len=128, sr=32000, model_type= args.arch\r\n                                                         )\r\n    vali_set = Loader(root_path='/home/zhanpengpan/zhanpengpan/train_test_data/',\r\n                                                        sub_path=['clean_testset_32k_wav_lp07/', 'clean_testset_32k_wav_lp14/'],\r\n                                                         win_type='hanning', win_len=256, hop_len=128, sr=32000, model_type= args.arch\r\n\r\n                                                  )\r\n    train_loader = data.DataLoader(train_set, batch_size=args.batch_size, num_workers=8)\r\n    val_loader = data.DataLoader(vali_set, batch_size=args.batch_size, num_workers=8)\r\n    # setup model\r\n    if(args.arch=='dnn'):\r\n        model = models.DNN()\r\n    elif(args.arch=='cnn'):\r\n        model = models.CNN()\r\n    if torch.cuda.is_available():\r\n        device = torch.device(\"cuda\")\r\n        model.to(device)\r\n\r\n\r\n    # optimizer\r\n    optimizer = torch.optim.Adam(model.parameters(), lr=args.l_rate, weight_decay=5e-4)\r\n\r\n    # loss function\r\n    loss_f = nn.MSELoss()\r\n\r\n    # Setup device\r\n    device = torch.device(\"cuda:0\")\r\n    print(device)\r\n    # train\r\n    min_loss = 100000.0\r\n    for epoch in range(args.n_epoch):\r\n        model.train()\r\n        for i, (lp07, lp14) in enumerate(train_loader):\r\n            if args.arch == 'cnn':\r\n                lp07 = lp07.permute(1,0,2)\r\n                lp07 = lp07.view(-1, 1, 64)\r\n            else:\r\n                lp07 = lp07.view(-1,64)\r\n            lp14 = lp14.view(-1,64)\r\n            if lp07.shape != lp14.shape:\r\n                print(lp07.shape)\r\n                print(lp14.shape)\r\n            lp07.to(device)\r\n            lp14.to(device)\r\n            optimizer.zero_grad()\r\n            outputs = model(lp07)\r\n            loss = loss_f(outputs, lp14)\r\n            optimizer.step()\r\n\r\n            if (i + 1) % 50 == 0:\r\n                print(\"Epoch [%d/%d] Loss: %.4f\" % (epoch + 1, args.n_epoch, loss.data[0]))\r\n\r\n        model.eval()\r\n        sum_loss = 0.0\r\n        for i_val, (lp07_val, lp14_val) in tqdm(enumerate(val_loader)):\r\n            if args.arch == 'cnn':\r\n                lp07_val = lp07_val.permute(1,0,2)\r\n                lp07_val = lp07_val.view(-1, 1, 64)\r\n            else:\r\n                lp07_val = lp07_val.view(-1,64)\r\n            lp14_val = lp14_val.view(-1,64)\r\n            val_outputs = model(lp07_val)\r\n            val_loss = loss_f(val_outputs, lp14_val)\r\n            sum_loss += val_loss\r\n        print('val_loss = %f',sum_loss/vali_set.__len__())`\r\n\r\nthe error is:\r\nTraceback (most recent call last):\r\n  File \"/home/zhanpengpan/zhanpengpan/PycharmProjects/blind_bwe/train.py\", line 114, in <module>\r\n    train(args)\r\n  File \"/home/zhanpengpan/zhanpengpan/PycharmProjects/blind_bwe/train.py\", line 69, in train\r\n    outputs = model(lp07)\r\n  File \"/home/zhanpengpan/.local/lib/python3.5/site-packages/torch/nn/modules/module.py\", line 477, in __call__\r\n    result = self.forward(*input, **kwargs)\r\n  File \"/media/datas/zhanpengpan/PycharmProjects/blind_bwe/models/DNN.py\", line 27, in forward\r\n    output = self.fc1(input)\r\n  File \"/home/zhanpengpan/.local/lib/python3.5/site-packages/torch/nn/modules/module.py\", line 477, in __call__\r\n    result = self.forward(*input, **kwargs)\r\n  File \"/home/zhanpengpan/.local/lib/python3.5/site-packages/torch/nn/modules/container.py\", line 91, in forward\r\n    input = module(input)\r\n  File \"/home/zhanpengpan/.local/lib/python3.5/site-packages/torch/nn/modules/module.py\", line 477, in __call__\r\n    result = self.forward(*input, **kwargs)\r\n  File \"/home/zhanpengpan/.local/lib/python3.5/site-packages/torch/nn/modules/linear.py\", line 55, in forward\r\n    return F.linear(input, self.weight, self.bias)\r\n  File \"/home/zhanpengpan/.local/lib/python3.5/site-packages/torch/nn/functional.py\", line 1024, in linear\r\n    return torch.addmm(bias, input, weight.t())\r\nRuntimeError: Expected object of type torch.cuda.FloatTensor but found type torch.FloatTensor for argument #4 'mat1'\r\n\r\nIt means that my model's device is GPU but the input tensor is CPU. How can i do ?"}