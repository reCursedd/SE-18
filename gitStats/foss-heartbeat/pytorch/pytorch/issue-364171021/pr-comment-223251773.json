{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/223251773", "pull_request_review_id": 162332522, "id": 223251773, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyMzI1MTc3Mw==", "diff_hunk": "@@ -133,3 +133,26 @@ struct CAFFE2_API InefficientStdFunctionContext {\n };\n \n } // namespace at\n+\n+namespace caffe2 {\n+\n+/** Set the allocator for DeviceType `t` without taking ownership to avoid", "path": "aten/src/ATen/core/Allocator.h", "position": null, "original_position": 7, "commit_id": "77422586b8e686972b9416373fac71d159761ae1", "original_commit_id": "faf4e16595117b9c1e66c12987a8b1d327d16fca", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "Heh, thank you for updating the comment, but for those folks who didn't review this PR, this comment is very oblique sounding. Just a few words can help, reframing the comment as guidance for where such an allocator might come from. Try:\r\n\r\n```\r\n/** Set the allocator for DeviceType `t`. The passed in allocator pointer is\r\n   expected to have static lifetime; this function does NOT take ownership\r\n   of the raw pointer. (The reason for this is to prevent existing pointers\r\n   to an allocator of a particular device from being invalidated when SetAllocator is called.)\r\n```", "created_at": "2018-10-08T05:43:08Z", "updated_at": "2018-11-23T15:52:31Z", "html_url": "https://github.com/pytorch/pytorch/pull/12111#discussion_r223251773", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/12111", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/223251773"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/12111#discussion_r223251773"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/12111"}}, "body_html": "<p>Heh, thank you for updating the comment, but for those folks who didn't review this PR, this comment is very oblique sounding. Just a few words can help, reframing the comment as guidance for where such an allocator might come from. Try:</p>\n<pre><code>/** Set the allocator for DeviceType `t`. The passed in allocator pointer is\n   expected to have static lifetime; this function does NOT take ownership\n   of the raw pointer. (The reason for this is to prevent existing pointers\n   to an allocator of a particular device from being invalidated when SetAllocator is called.)\n</code></pre>", "body_text": "Heh, thank you for updating the comment, but for those folks who didn't review this PR, this comment is very oblique sounding. Just a few words can help, reframing the comment as guidance for where such an allocator might come from. Try:\n/** Set the allocator for DeviceType `t`. The passed in allocator pointer is\n   expected to have static lifetime; this function does NOT take ownership\n   of the raw pointer. (The reason for this is to prevent existing pointers\n   to an allocator of a particular device from being invalidated when SetAllocator is called.)"}