{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/223119824", "pull_request_review_id": 162178348, "id": 223119824, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyMzExOTgyNA==", "diff_hunk": "@@ -133,3 +133,27 @@ struct CAFFE2_API InefficientStdFunctionContext {\n };\n \n } // namespace at\n+\n+namespace caffe2 {\n+\n+// using AllocatorArray = std::array<\n+//     std::unique_ptr<at::Allocator>,\n+//     static_cast<int>(at::DeviceType::COMPILE_TIME_MAX_DEVICE_TYPES)>;\n+/** Set the allocator for DeviceType `t` and takes ownership of the allocator", "path": "aten/src/ATen/core/Allocator.h", "position": null, "original_position": 10, "commit_id": "77422586b8e686972b9416373fac71d159761ae1", "original_commit_id": "c12524ab752182358290446a59759d7b7bce1dd8", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "It seems a lot safer for this to just accept a `std::unique_ptr<at::Allocator>&&` directly, and have the call site make a unique pointer if they have a raw pointer they want to steal. At some point we should fix the `SetCPUAllocator` to something more safe (think about the API difference between `shared_ptr<V>(new V())` versus `make_shared<V>())`, but we can start by making the inner-most API have the safe types.", "created_at": "2018-10-05T19:41:32Z", "updated_at": "2018-11-23T15:52:26Z", "html_url": "https://github.com/pytorch/pytorch/pull/12111#discussion_r223119824", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/12111", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/223119824"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/12111#discussion_r223119824"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/12111"}}, "body_html": "<p>It seems a lot safer for this to just accept a <code>std::unique_ptr&lt;at::Allocator&gt;&amp;&amp;</code> directly, and have the call site make a unique pointer if they have a raw pointer they want to steal. At some point we should fix the <code>SetCPUAllocator</code> to something more safe (think about the API difference between <code>shared_ptr&lt;V&gt;(new V())</code> versus <code>make_shared&lt;V&gt;())</code>, but we can start by making the inner-most API have the safe types.</p>", "body_text": "It seems a lot safer for this to just accept a std::unique_ptr<at::Allocator>&& directly, and have the call site make a unique pointer if they have a raw pointer they want to steal. At some point we should fix the SetCPUAllocator to something more safe (think about the API difference between shared_ptr<V>(new V()) versus make_shared<V>()), but we can start by making the inner-most API have the safe types."}