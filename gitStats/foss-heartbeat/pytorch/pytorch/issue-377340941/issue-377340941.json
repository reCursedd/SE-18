{"url": "https://api.github.com/repos/pytorch/pytorch/issues/13564", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/13564/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/13564/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/13564/events", "html_url": "https://github.com/pytorch/pytorch/issues/13564", "id": 377340941, "node_id": "MDU6SXNzdWUzNzczNDA5NDE=", "number": 13564, "title": "[JIT] Cannot trace custom ops", "user": {"login": "t-vi", "id": 20787943, "node_id": "MDQ6VXNlcjIwNzg3OTQz", "avatar_url": "https://avatars2.githubusercontent.com/u/20787943?v=4", "gravatar_id": "", "url": "https://api.github.com/users/t-vi", "html_url": "https://github.com/t-vi", "followers_url": "https://api.github.com/users/t-vi/followers", "following_url": "https://api.github.com/users/t-vi/following{/other_user}", "gists_url": "https://api.github.com/users/t-vi/gists{/gist_id}", "starred_url": "https://api.github.com/users/t-vi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/t-vi/subscriptions", "organizations_url": "https://api.github.com/users/t-vi/orgs", "repos_url": "https://api.github.com/users/t-vi/repos", "events_url": "https://api.github.com/users/t-vi/events{/privacy}", "received_events_url": "https://api.github.com/users/t-vi/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 679953983, "node_id": "MDU6TGFiZWw2Nzk5NTM5ODM=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/jit", "name": "jit", "color": "c5def5", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "goldsborough", "id": 6429851, "node_id": "MDQ6VXNlcjY0Mjk4NTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/6429851?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goldsborough", "html_url": "https://github.com/goldsborough", "followers_url": "https://api.github.com/users/goldsborough/followers", "following_url": "https://api.github.com/users/goldsborough/following{/other_user}", "gists_url": "https://api.github.com/users/goldsborough/gists{/gist_id}", "starred_url": "https://api.github.com/users/goldsborough/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goldsborough/subscriptions", "organizations_url": "https://api.github.com/users/goldsborough/orgs", "repos_url": "https://api.github.com/users/goldsborough/repos", "events_url": "https://api.github.com/users/goldsborough/events{/privacy}", "received_events_url": "https://api.github.com/users/goldsborough/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "goldsborough", "id": 6429851, "node_id": "MDQ6VXNlcjY0Mjk4NTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/6429851?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goldsborough", "html_url": "https://github.com/goldsborough", "followers_url": "https://api.github.com/users/goldsborough/followers", "following_url": "https://api.github.com/users/goldsborough/following{/other_user}", "gists_url": "https://api.github.com/users/goldsborough/gists{/gist_id}", "starred_url": "https://api.github.com/users/goldsborough/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goldsborough/subscriptions", "organizations_url": "https://api.github.com/users/goldsborough/orgs", "repos_url": "https://api.github.com/users/goldsborough/repos", "events_url": "https://api.github.com/users/goldsborough/events{/privacy}", "received_events_url": "https://api.github.com/users/goldsborough/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 0, "created_at": "2018-11-05T10:40:01Z", "updated_at": "2018-11-07T17:24:21Z", "closed_at": "2018-11-07T17:24:21Z", "author_association": "CONTRIBUTOR", "body_html": "<h2><g-emoji class=\"g-emoji\" alias=\"bug\" fallback-src=\"https://assets-cdn.github.com/images/icons/emoji/unicode/1f41b.png\">\ud83d\udc1b</g-emoji> Bug</h2>\n<p>Custom ops can be used in JIT script, but not in tracing.</p>\n<h2>To Reproduce</h2>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> os\n<span class=\"pl-k\">import</span> torch\n<span class=\"pl-k\">import</span> torch.jit\ncsrc <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"\"\"</span></span>\n<span class=\"pl-s\">#include &lt;torch/extension.h&gt;</span>\n<span class=\"pl-s\">#include &lt;torch/script.h&gt;</span>\n<span class=\"pl-s\"></span>\n<span class=\"pl-s\">using namespace at;</span>\n<span class=\"pl-s\"></span>\n<span class=\"pl-s\">Tensor test(const Tensor&amp; inp) {</span>\n<span class=\"pl-s\">  return inp * 2;</span>\n<span class=\"pl-s\">}</span>\n<span class=\"pl-s\"></span>\n<span class=\"pl-s\">static auto registry =</span>\n<span class=\"pl-s\">  torch::jit::RegisterOperators()</span>\n<span class=\"pl-s\">    .op(\"mytest::test\", &amp;test);</span>\n<span class=\"pl-s\"></span>\n<span class=\"pl-s\">PYBIND11_MODULE(TORCH_EXTENSION_NAME, m) {</span>\n<span class=\"pl-s\">  m.def(\"test\", &amp;test, \"super test!\");</span>\n<span class=\"pl-s\">}</span>\n<span class=\"pl-s\"><span class=\"pl-pds\">\"\"\"</span></span>\n\n<span class=\"pl-k\">import</span> torch.utils.cpp_extension\n\next <span class=\"pl-k\">=</span> torch.utils.cpp_extension.load_inline(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>test<span class=\"pl-pds\">\"</span></span>, [csrc], <span class=\"pl-v\">verbose</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>,\n                                            <span class=\"pl-v\">extra_ldflags</span><span class=\"pl-k\">=</span>[<span class=\"pl-s\"><span class=\"pl-pds\">'</span>-ltorch<span class=\"pl-pds\">'</span></span>,<span class=\"pl-s\"><span class=\"pl-pds\">'</span>-lcaffe2<span class=\"pl-pds\">'</span></span>,\n                                                           <span class=\"pl-s\"><span class=\"pl-pds\">'</span>-L<span class=\"pl-pds\">'</span></span><span class=\"pl-k\">+</span>os.path.join(os.path.dirname(torch._C.<span class=\"pl-c1\">__file__</span>), <span class=\"pl-s\"><span class=\"pl-pds\">'</span>lib<span class=\"pl-pds\">'</span></span>) ])\ntorch.ops.load_library(ext.<span class=\"pl-c1\">__file__</span>)\n\nt <span class=\"pl-k\">=</span> torch.randn(<span class=\"pl-c1\">5</span>)\n<span class=\"pl-c1\">print</span>(torch.ops.mytest.test(t)) <span class=\"pl-c\"><span class=\"pl-c\">#</span> works</span>\n\n<span class=\"pl-en\">@torch.jit.script</span>\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">test_wrapper</span>(<span class=\"pl-smi\">t</span>):\n    <span class=\"pl-k\">return</span> torch.ops.mytest.test(t)\n\n<span class=\"pl-c1\">print</span> (torch.jit.trace(test_wrapper, (t,)))  <span class=\"pl-c\"><span class=\"pl-c\">#</span> works, too</span>\n\n\n<span class=\"pl-c1\">print</span> (torch.jit.trace(torch.ops.mytest.test, (t,)))  <span class=\"pl-c\"><span class=\"pl-c\">#</span> should work!</span></pre></div>\n<h2>Expected behavior</h2>\n<p>Everything to work perfectly!</p>\n<h2>Environment</h2>\n<p>Today's master</p>\n<h2>Context</h2>\n<p>I noticed this with a formidable JIT challenge (<a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=9110200\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/fmassa\">@fmassa</a> ):<br>\n<a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"374238665\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/facebookresearch/maskrcnn-benchmark/issues/27\" data-hovercard-type=\"issue\" data-hovercard-url=\"/facebookresearch/maskrcnn-benchmark/issues/27/hovercard?comment_id=435789228&amp;comment_type=issue_comment\" href=\"https://github.com/facebookresearch/maskrcnn-benchmark/issues/27#issuecomment-435789228\">facebookresearch/maskrcnn-benchmark#27 (comment)</a></p>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=6429851\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/goldsborough\">@goldsborough</a> : This is as mentioned on the slack.</p>", "body_text": "\ud83d\udc1b Bug\nCustom ops can be used in JIT script, but not in tracing.\nTo Reproduce\nimport os\nimport torch\nimport torch.jit\ncsrc = \"\"\"\n#include <torch/extension.h>\n#include <torch/script.h>\n\nusing namespace at;\n\nTensor test(const Tensor& inp) {\n  return inp * 2;\n}\n\nstatic auto registry =\n  torch::jit::RegisterOperators()\n    .op(\"mytest::test\", &test);\n\nPYBIND11_MODULE(TORCH_EXTENSION_NAME, m) {\n  m.def(\"test\", &test, \"super test!\");\n}\n\"\"\"\n\nimport torch.utils.cpp_extension\n\next = torch.utils.cpp_extension.load_inline(\"test\", [csrc], verbose=True,\n                                            extra_ldflags=['-ltorch','-lcaffe2',\n                                                           '-L'+os.path.join(os.path.dirname(torch._C.__file__), 'lib') ])\ntorch.ops.load_library(ext.__file__)\n\nt = torch.randn(5)\nprint(torch.ops.mytest.test(t)) # works\n\n@torch.jit.script\ndef test_wrapper(t):\n    return torch.ops.mytest.test(t)\n\nprint (torch.jit.trace(test_wrapper, (t,)))  # works, too\n\n\nprint (torch.jit.trace(torch.ops.mytest.test, (t,)))  # should work!\nExpected behavior\nEverything to work perfectly!\nEnvironment\nToday's master\nContext\nI noticed this with a formidable JIT challenge (@fmassa ):\nfacebookresearch/maskrcnn-benchmark#27 (comment)\n@goldsborough : This is as mentioned on the slack.", "body": "## \ud83d\udc1b Bug\r\n\r\nCustom ops can be used in JIT script, but not in tracing.\r\n\r\n## To Reproduce\r\n\r\n```python\r\nimport os\r\nimport torch\r\nimport torch.jit\r\ncsrc = \"\"\"\r\n#include <torch/extension.h>\r\n#include <torch/script.h>\r\n\r\nusing namespace at;\r\n\r\nTensor test(const Tensor& inp) {\r\n  return inp * 2;\r\n}\r\n\r\nstatic auto registry =\r\n  torch::jit::RegisterOperators()\r\n    .op(\"mytest::test\", &test);\r\n\r\nPYBIND11_MODULE(TORCH_EXTENSION_NAME, m) {\r\n  m.def(\"test\", &test, \"super test!\");\r\n}\r\n\"\"\"\r\n\r\nimport torch.utils.cpp_extension\r\n\r\next = torch.utils.cpp_extension.load_inline(\"test\", [csrc], verbose=True,\r\n                                            extra_ldflags=['-ltorch','-lcaffe2',\r\n                                                           '-L'+os.path.join(os.path.dirname(torch._C.__file__), 'lib') ])\r\ntorch.ops.load_library(ext.__file__)\r\n\r\nt = torch.randn(5)\r\nprint(torch.ops.mytest.test(t)) # works\r\n\r\n@torch.jit.script\r\ndef test_wrapper(t):\r\n    return torch.ops.mytest.test(t)\r\n\r\nprint (torch.jit.trace(test_wrapper, (t,)))  # works, too\r\n\r\n\r\nprint (torch.jit.trace(torch.ops.mytest.test, (t,)))  # should work!\r\n```\r\n\r\n## Expected behavior\r\n\r\nEverything to work perfectly!\r\n\r\n## Environment\r\n\r\nToday's master\r\n\r\n## Context\r\n\r\nI noticed this with a formidable JIT challenge (@fmassa ):\r\nhttps://github.com/facebookresearch/maskrcnn-benchmark/issues/27#issuecomment-435789228\r\n\r\n@goldsborough : This is as mentioned on the slack.\r\n"}