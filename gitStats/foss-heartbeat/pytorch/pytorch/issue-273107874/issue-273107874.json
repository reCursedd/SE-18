{"url": "https://api.github.com/repos/pytorch/pytorch/issues/3636", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/3636/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/3636/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/3636/events", "html_url": "https://github.com/pytorch/pytorch/issues/3636", "id": 273107874, "node_id": "MDU6SXNzdWUyNzMxMDc4NzQ=", "number": 3636, "title": "Dataset goes into infinite loop when used as iterator", "user": {"login": "w4nderlust", "id": 349256, "node_id": "MDQ6VXNlcjM0OTI1Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/349256?v=4", "gravatar_id": "", "url": "https://api.github.com/users/w4nderlust", "html_url": "https://github.com/w4nderlust", "followers_url": "https://api.github.com/users/w4nderlust/followers", "following_url": "https://api.github.com/users/w4nderlust/following{/other_user}", "gists_url": "https://api.github.com/users/w4nderlust/gists{/gist_id}", "starred_url": "https://api.github.com/users/w4nderlust/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/w4nderlust/subscriptions", "organizations_url": "https://api.github.com/users/w4nderlust/orgs", "repos_url": "https://api.github.com/users/w4nderlust/repos", "events_url": "https://api.github.com/users/w4nderlust/events{/privacy}", "received_events_url": "https://api.github.com/users/w4nderlust/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2017-11-11T02:13:46Z", "updated_at": "2017-11-12T02:51:54Z", "closed_at": "2017-11-11T15:53:41Z", "author_association": "NONE", "body_html": "<p>In the examples on how to use a Dataset object, it is suggested to access it with:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">for</span> i <span class=\"pl-k\">in</span> <span class=\"pl-c1\">range</span>(<span class=\"pl-c1\">len</span>(dataset)):\n    <span class=\"pl-c1\">print</span>(dataset[i])</pre></div>\n<p>but it would be reasonable to expect that you can access a dataset as an iterator, like:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">for</span> item <span class=\"pl-k\">in</span> dataset:\n    <span class=\"pl-c1\">print</span>(item)</pre></div>\n<p>unfortunately doing so leads to an infinite loop.</p>\n<p>Here's a simple code example that shows this behavior:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">from</span> torch.utils.data <span class=\"pl-k\">import</span> Dataset\n\n<span class=\"pl-k\">class</span> <span class=\"pl-en\">TestDataset</span>(<span class=\"pl-e\">Dataset</span>):\n    <span class=\"pl-k\">def</span> <span class=\"pl-c1\">__init__</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>, <span class=\"pl-smi\">num</span>):\n        <span class=\"pl-c1\">self</span>.num <span class=\"pl-k\">=</span> num\n\n    <span class=\"pl-k\">def</span> <span class=\"pl-c1\">__len__</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>):\n        <span class=\"pl-k\">return</span> <span class=\"pl-c1\">self</span>.num\n\n    <span class=\"pl-k\">def</span> <span class=\"pl-c1\">__getitem__</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>, <span class=\"pl-smi\">index</span>):\n        <span class=\"pl-k\">return</span> index\n\ntd <span class=\"pl-k\">=</span> TestDataset(<span class=\"pl-c1\">10</span>)\n<span class=\"pl-k\">for</span> i <span class=\"pl-k\">in</span> <span class=\"pl-c1\">range</span>(<span class=\"pl-c1\">len</span>(td)):\n    <span class=\"pl-c1\">print</span>(td[i])\n<span class=\"pl-k\">for</span> item <span class=\"pl-k\">in</span> <span class=\"pl-c1\">iter</span>(td):\n    <span class=\"pl-c1\">print</span>(item)</pre></div>", "body_text": "In the examples on how to use a Dataset object, it is suggested to access it with:\nfor i in range(len(dataset)):\n    print(dataset[i])\nbut it would be reasonable to expect that you can access a dataset as an iterator, like:\nfor item in dataset:\n    print(item)\nunfortunately doing so leads to an infinite loop.\nHere's a simple code example that shows this behavior:\nfrom torch.utils.data import Dataset\n\nclass TestDataset(Dataset):\n    def __init__(self, num):\n        self.num = num\n\n    def __len__(self):\n        return self.num\n\n    def __getitem__(self, index):\n        return index\n\ntd = TestDataset(10)\nfor i in range(len(td)):\n    print(td[i])\nfor item in iter(td):\n    print(item)", "body": "In the examples on how to use a Dataset object, it is suggested to access it with:\r\n```python\r\nfor i in range(len(dataset)):\r\n    print(dataset[i])\r\n```\r\nbut it would be reasonable to expect that you can access a dataset as an iterator, like:\r\n```python\r\nfor item in dataset:\r\n    print(item)\r\n```\r\nunfortunately doing so leads to an infinite loop.\r\n\r\nHere's a simple code example that shows this behavior:\r\n```python\r\nfrom torch.utils.data import Dataset\r\n\r\nclass TestDataset(Dataset):\r\n    def __init__(self, num):\r\n        self.num = num\r\n\r\n    def __len__(self):\r\n        return self.num\r\n\r\n    def __getitem__(self, index):\r\n        return index\r\n\r\ntd = TestDataset(10)\r\nfor i in range(len(td)):\r\n    print(td[i])\r\nfor item in iter(td):\r\n    print(item)\r\n```"}