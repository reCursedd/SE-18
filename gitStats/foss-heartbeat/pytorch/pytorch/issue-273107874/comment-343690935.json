{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/343690935", "html_url": "https://github.com/pytorch/pytorch/issues/3636#issuecomment-343690935", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/3636", "id": 343690935, "node_id": "MDEyOklzc3VlQ29tbWVudDM0MzY5MDkzNQ==", "user": {"login": "w4nderlust", "id": 349256, "node_id": "MDQ6VXNlcjM0OTI1Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/349256?v=4", "gravatar_id": "", "url": "https://api.github.com/users/w4nderlust", "html_url": "https://github.com/w4nderlust", "followers_url": "https://api.github.com/users/w4nderlust/followers", "following_url": "https://api.github.com/users/w4nderlust/following{/other_user}", "gists_url": "https://api.github.com/users/w4nderlust/gists{/gist_id}", "starred_url": "https://api.github.com/users/w4nderlust/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/w4nderlust/subscriptions", "organizations_url": "https://api.github.com/users/w4nderlust/orgs", "repos_url": "https://api.github.com/users/w4nderlust/repos", "events_url": "https://api.github.com/users/w4nderlust/events{/privacy}", "received_events_url": "https://api.github.com/users/w4nderlust/received_events", "type": "User", "site_admin": false}, "created_at": "2017-11-11T20:11:33Z", "updated_at": "2017-11-11T20:11:33Z", "author_association": "NONE", "body_html": "<p>No <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=9110200\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/fmassa\">@fmassa</a> I'm not. I'm writing my own custom one for dealing with my specific usecase (dealing with patches of tensors). And <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=4348795\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/bheinzerling\">@bheinzerling</a> answer lead me to find a solution to my problems, but now the issue is different I guess, and it is:<br>\nIf the result of slicing is an empty tensor, should pytorch return a <code>ValueError</code> like it is doing today or should it return an <code>IndexError</code>? My use case suggests it should return an <code>IndexError</code> because that's part of <code>__getitem__</code> in an iterator, but maybe there are arguments against it.</p>", "body_text": "No @fmassa I'm not. I'm writing my own custom one for dealing with my specific usecase (dealing with patches of tensors). And @bheinzerling answer lead me to find a solution to my problems, but now the issue is different I guess, and it is:\nIf the result of slicing is an empty tensor, should pytorch return a ValueError like it is doing today or should it return an IndexError? My use case suggests it should return an IndexError because that's part of __getitem__ in an iterator, but maybe there are arguments against it.", "body": "No @fmassa I'm not. I'm writing my own custom one for dealing with my specific usecase (dealing with patches of tensors). And @bheinzerling answer lead me to find a solution to my problems, but now the issue is different I guess, and it is:\r\nIf the result of slicing is an empty tensor, should pytorch return a `ValueError` like it is doing today or should it return an `IndexError`? My use case suggests it should return an `IndexError` because that's part of `__getitem__` in an iterator, but maybe there are arguments against it."}