{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/343709737", "html_url": "https://github.com/pytorch/pytorch/issues/3636#issuecomment-343709737", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/3636", "id": 343709737, "node_id": "MDEyOklzc3VlQ29tbWVudDM0MzcwOTczNw==", "user": {"login": "w4nderlust", "id": 349256, "node_id": "MDQ6VXNlcjM0OTI1Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/349256?v=4", "gravatar_id": "", "url": "https://api.github.com/users/w4nderlust", "html_url": "https://github.com/w4nderlust", "followers_url": "https://api.github.com/users/w4nderlust/followers", "following_url": "https://api.github.com/users/w4nderlust/following{/other_user}", "gists_url": "https://api.github.com/users/w4nderlust/gists{/gist_id}", "starred_url": "https://api.github.com/users/w4nderlust/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/w4nderlust/subscriptions", "organizations_url": "https://api.github.com/users/w4nderlust/orgs", "repos_url": "https://api.github.com/users/w4nderlust/repos", "events_url": "https://api.github.com/users/w4nderlust/events{/privacy}", "received_events_url": "https://api.github.com/users/w4nderlust/received_events", "type": "User", "site_admin": false}, "created_at": "2017-11-12T02:51:54Z", "updated_at": "2017-11-12T02:51:54Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=9110200\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/fmassa\">@fmassa</a> I see, so there's a discrepancy on how zero-dimensional tensors are treater and you're going to conform to the numpy behavior. In that case, my workaround catching <code>ValueError</code> won't work anymore as there won't be any error to catch, so I guess I should probably just check myself if the requested index in less than <code>len</code> and return <code>IndexError</code> in that case.<br>\nThanks for the suggestion, it makes a lot of sense. At hte moment I'm just testing with a small dataset that fits in memory, so I don't really need it, but as soon as I'll start using bigger datasets it will make a huge difference!</p>", "body_text": "@fmassa I see, so there's a discrepancy on how zero-dimensional tensors are treater and you're going to conform to the numpy behavior. In that case, my workaround catching ValueError won't work anymore as there won't be any error to catch, so I guess I should probably just check myself if the requested index in less than len and return IndexError in that case.\nThanks for the suggestion, it makes a lot of sense. At hte moment I'm just testing with a small dataset that fits in memory, so I don't really need it, but as soon as I'll start using bigger datasets it will make a huge difference!", "body": "@fmassa I see, so there's a discrepancy on how zero-dimensional tensors are treater and you're going to conform to the numpy behavior. In that case, my workaround catching `ValueError` won't work anymore as there won't be any error to catch, so I guess I should probably just check myself if the requested index in less than `len` and return `IndexError` in that case.\r\nThanks for the suggestion, it makes a lot of sense. At hte moment I'm just testing with a small dataset that fits in memory, so I don't really need it, but as soon as I'll start using bigger datasets it will make a huge difference!"}