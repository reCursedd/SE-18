{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/343672879", "html_url": "https://github.com/pytorch/pytorch/issues/3636#issuecomment-343672879", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/3636", "id": 343672879, "node_id": "MDEyOklzc3VlQ29tbWVudDM0MzY3Mjg3OQ==", "user": {"login": "bheinzerling", "id": 4348795, "node_id": "MDQ6VXNlcjQzNDg3OTU=", "avatar_url": "https://avatars1.githubusercontent.com/u/4348795?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bheinzerling", "html_url": "https://github.com/bheinzerling", "followers_url": "https://api.github.com/users/bheinzerling/followers", "following_url": "https://api.github.com/users/bheinzerling/following{/other_user}", "gists_url": "https://api.github.com/users/bheinzerling/gists{/gist_id}", "starred_url": "https://api.github.com/users/bheinzerling/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bheinzerling/subscriptions", "organizations_url": "https://api.github.com/users/bheinzerling/orgs", "repos_url": "https://api.github.com/users/bheinzerling/repos", "events_url": "https://api.github.com/users/bheinzerling/events{/privacy}", "received_events_url": "https://api.github.com/users/bheinzerling/received_events", "type": "User", "site_admin": false}, "created_at": "2017-11-11T15:31:22Z", "updated_at": "2017-11-11T15:35:52Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Here are a couple of points that should help clear up this issue:</p>\n<ul>\n<li>\n<p>Python iterators are either created explicitly by defining <code>__iter__</code> and <code>__next__</code> methods, or implicitly via <code>__getitem__</code>. In the latter case the Python interpreter will call the object's <code>__getitem__</code> method with indices 0, 1, 2,..., (i.e. object[0], object[1], etc.) The <code>__getitem__</code> method is responsible for ending the iteration by raising an IndexError or a StopIteration exception. It doesn't matter if the iterator implements <strong>len</strong> or not: an iterator's length is never checked during iteration and some (e.g. infinite) iterators don't have lengths. Btw, it is redundant to call <code>iter(X)</code> in a for loop, just <code>for x in X:</code> is enough.</p>\n</li>\n<li>\n<p><code>__getitem__</code> in your example just returns index, and never stops the iteration because it doesn't raise StopIteration and there is no way for an IndexError to occur.</p>\n</li>\n<li>\n<p>For example, <code>__getitem__</code> in pytorch's TensorDataSet looks like this:</p>\n</li>\n</ul>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-c1\">__getitem__</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>, <span class=\"pl-smi\">index</span>):\n    <span class=\"pl-k\">return</span> <span class=\"pl-c1\">self</span>.data_tensor[index], <span class=\"pl-c1\">self</span>.target_tensor[index]</pre></div>\n<p>This will throw an IndexError at some point and thereby stop the iteration.</p>", "body_text": "Here are a couple of points that should help clear up this issue:\n\n\nPython iterators are either created explicitly by defining __iter__ and __next__ methods, or implicitly via __getitem__. In the latter case the Python interpreter will call the object's __getitem__ method with indices 0, 1, 2,..., (i.e. object[0], object[1], etc.) The __getitem__ method is responsible for ending the iteration by raising an IndexError or a StopIteration exception. It doesn't matter if the iterator implements len or not: an iterator's length is never checked during iteration and some (e.g. infinite) iterators don't have lengths. Btw, it is redundant to call iter(X) in a for loop, just for x in X: is enough.\n\n\n__getitem__ in your example just returns index, and never stops the iteration because it doesn't raise StopIteration and there is no way for an IndexError to occur.\n\n\nFor example, __getitem__ in pytorch's TensorDataSet looks like this:\n\n\ndef __getitem__(self, index):\n    return self.data_tensor[index], self.target_tensor[index]\nThis will throw an IndexError at some point and thereby stop the iteration.", "body": "Here are a couple of points that should help clear up this issue:\r\n\r\n- Python iterators are either created explicitly by defining `__iter__` and `__next__` methods, or implicitly via `__getitem__`. In the latter case the Python interpreter will call the object's `__getitem__` method with indices 0, 1, 2,..., (i.e. object[0], object[1], etc.) The `__getitem__` method is responsible for ending the iteration by raising an IndexError or a StopIteration exception. It doesn't matter if the iterator implements __len__ or not: an iterator's length is never checked during iteration and some (e.g. infinite) iterators don't have lengths. Btw, it is redundant to call `iter(X)` in a for loop, just `for x in X:` is enough.\r\n\r\n- `__getitem__` in your example just returns index, and never stops the iteration because it doesn't raise StopIteration and there is no way for an IndexError to occur.\r\n\r\n- For example, `__getitem__` in pytorch's TensorDataSet looks like this:\r\n```Python\r\ndef __getitem__(self, index):\r\n    return self.data_tensor[index], self.target_tensor[index]\r\n```\r\nThis will throw an IndexError at some point and thereby stop the iteration."}