{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/198205602", "pull_request_review_id": 132094043, "id": 198205602, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5ODIwNTYwMg==", "diff_hunk": "@@ -165,38 +165,55 @@ def get_lr(self):\n \n class CosineAnnealingLR(_LRScheduler):\n     r\"\"\"Set the learning rate of each parameter group using a cosine annealing\n-    schedule, where :math:`\\eta_{max}` is set to the initial lr and\n+    schedule, where :math:`\\eta_{max}` is set to the initial lr,\n+    :math:`T_{mult}` is the multiplicative factor of T_max and\n     :math:`T_{cur}` is the number of epochs since the last restart in SGDR:\n \n     .. math::\n \n         \\eta_t = \\eta_{min} + \\frac{1}{2}(\\eta_{max} - \\eta_{min})(1 +\n-        \\cos(\\frac{T_{cur}}{T_{max}}\\pi))\n+        \\cos(\\frac{T_{cur}}{T_{max}\\cdot T_{mult}}\\pi))\n \n     When last_epoch=-1, sets initial lr as lr.\n \n     It has been proposed in\n-    `SGDR: Stochastic Gradient Descent with Warm Restarts`_. Note that this only\n-    implements the cosine annealing part of SGDR, and not the restarts.\n+    `SGDR: Stochastic Gradient Descent with Warm Restarts`_.\n \n     Args:\n         optimizer (Optimizer): Wrapped optimizer.\n         T_max (int): Maximum number of iterations.\n         eta_min (float): Minimum learning rate. Default: 0.\n         last_epoch (int): The index of last epoch. Default: -1.\n+        T_mult (int): Multiplicative factor of T_max. Default: 2.\n \n     .. _SGDR\\: Stochastic Gradient Descent with Warm Restarts:\n         https://arxiv.org/abs/1608.03983\n     \"\"\"\n \n-    def __init__(self, optimizer, T_max, eta_min=0, last_epoch=-1):\n+    def __init__(self, optimizer, T_max, eta_min=0, last_epoch=-1, T_mult=2):\n         self.T_max = T_max\n+        self.Ti = T_max\n         self.eta_min = eta_min\n+        self.T_mult = T_mult\n+        self.cycle = 0\n         super(CosineAnnealingLR, self).__init__(optimizer, last_epoch)\n \n+    def step(self, epoch=None):\n+        if epoch is None:\n+            epoch = self.last_epoch + 1\n+            if epoch == self.Ti:\n+                epoch = 0\n+                self.cycle += 1\n+        else:\n+            self.cycle = int(math.floor(math.log(epoch / self.T_max * (self.T_mult - 1) + 1, self.T_mult)))\n+            epoch -= sum([self.T_max * self.T_mult ** x for x in range(self.cycle)])", "path": "torch/optim/lr_scheduler.py", "position": 50, "original_position": 50, "commit_id": "67d26ccb4e7540788c873ee20f448018b2d44c1f", "original_commit_id": "67d26ccb4e7540788c873ee20f448018b2d44c1f", "user": {"login": "SsnL", "id": 5674597, "node_id": "MDQ6VXNlcjU2NzQ1OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5674597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SsnL", "html_url": "https://github.com/SsnL", "followers_url": "https://api.github.com/users/SsnL/followers", "following_url": "https://api.github.com/users/SsnL/following{/other_user}", "gists_url": "https://api.github.com/users/SsnL/gists{/gist_id}", "starred_url": "https://api.github.com/users/SsnL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SsnL/subscriptions", "organizations_url": "https://api.github.com/users/SsnL/orgs", "repos_url": "https://api.github.com/users/SsnL/repos", "events_url": "https://api.github.com/users/SsnL/events{/privacy}", "received_events_url": "https://api.github.com/users/SsnL/received_events", "type": "User", "site_admin": false}, "body": "Would it be possible to not change `self.last_epoch`? An attribute called that should just be the actual epoch number. Maybe something like `self.epoch_in_T`?", "created_at": "2018-06-26T16:06:11Z", "updated_at": "2018-11-23T15:46:21Z", "html_url": "https://github.com/pytorch/pytorch/pull/6130#discussion_r198205602", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/6130", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/198205602"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/6130#discussion_r198205602"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/6130"}}, "body_html": "<p>Would it be possible to not change <code>self.last_epoch</code>? An attribute called that should just be the actual epoch number. Maybe something like <code>self.epoch_in_T</code>?</p>", "body_text": "Would it be possible to not change self.last_epoch? An attribute called that should just be the actual epoch number. Maybe something like self.epoch_in_T?"}