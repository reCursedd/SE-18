{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/181220035", "pull_request_review_id": 111791627, "id": 181220035, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MTIyMDAzNQ==", "diff_hunk": "@@ -165,38 +165,55 @@ def get_lr(self):\n \n class CosineAnnealingLR(_LRScheduler):\n     r\"\"\"Set the learning rate of each parameter group using a cosine annealing\n-    schedule, where :math:`\\eta_{max}` is set to the initial lr and\n+    schedule, where :math:`\\eta_{max}` is set to the initial lr,\n+    :math:`T_{mult}` is the multiplicative factor of T_max and\n     :math:`T_{cur}` is the number of epochs since the last restart in SGDR:\n \n     .. math::\n \n         \\eta_t = \\eta_{min} + \\frac{1}{2}(\\eta_{max} - \\eta_{min})(1 +\n-        \\cos(\\frac{T_{cur}}{T_{max}}\\pi))\n+        \\cos(\\frac{T_{cur}}{T_{max}\\times T_{mult}}\\pi))\n \n     When last_epoch=-1, sets initial lr as lr.\n \n     It has been proposed in\n-    `SGDR: Stochastic Gradient Descent with Warm Restarts`_. Note that this only\n-    implements the cosine annealing part of SGDR, and not the restarts.\n+    `SGDR: Stochastic Gradient Descent with Warm Restarts`_.\n \n     Args:\n         optimizer (Optimizer): Wrapped optimizer.\n         T_max (int): Maximum number of iterations.\n         eta_min (float): Minimum learning rate. Default: 0.\n+        T_mult (int): Multiplicative factor of T_max. Default: 2.\n         last_epoch (int): The index of last epoch. Default: -1.\n \n     .. _SGDR\\: Stochastic Gradient Descent with Warm Restarts:\n         https://arxiv.org/abs/1608.03983\n     \"\"\"\n \n-    def __init__(self, optimizer, T_max, eta_min=0, last_epoch=-1):\n+    def __init__(self, optimizer, T_max, eta_min=0, T_mult=2, last_epoch=-1):\n         self.T_max = T_max\n+        self.Ti = T_max\n         self.eta_min = eta_min\n+        self.T_mult = T_mult\n+        self.cycle = 0\n         super(CosineAnnealingLR, self).__init__(optimizer, last_epoch)\n \n+    def step(self, epoch=None):", "path": "torch/optim/lr_scheduler.py", "position": 42, "original_position": 42, "commit_id": "67d26ccb4e7540788c873ee20f448018b2d44c1f", "original_commit_id": "889d6c529a9bb49d27bbdeddfbd65d5bb415e6c1", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "I'm sorry but I can't see how this is equivalent. If someone calls `step(epoch=3)`, then `Ti` will be assigned a value of `T_max * T_mult ** cycle`, which generally is not equal to `T_max`, so it will be different.", "created_at": "2018-04-12T20:58:47Z", "updated_at": "2018-11-23T15:42:21Z", "html_url": "https://github.com/pytorch/pytorch/pull/6130#discussion_r181220035", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/6130", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/181220035"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/6130#discussion_r181220035"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/6130"}}, "body_html": "<p>I'm sorry but I can't see how this is equivalent. If someone calls <code>step(epoch=3)</code>, then <code>Ti</code> will be assigned a value of <code>T_max * T_mult ** cycle</code>, which generally is not equal to <code>T_max</code>, so it will be different.</p>", "body_text": "I'm sorry but I can't see how this is equivalent. If someone calls step(epoch=3), then Ti will be assigned a value of T_max * T_mult ** cycle, which generally is not equal to T_max, so it will be different.", "in_reply_to_id": 180529271}