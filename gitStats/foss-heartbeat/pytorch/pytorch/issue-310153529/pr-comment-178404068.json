{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/178404068", "pull_request_review_id": 108463969, "id": 178404068, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3ODQwNDA2OA==", "diff_hunk": "@@ -0,0 +1,224 @@\n+#include \"caffe2/contrib/tensorrt/tensorrt_op_trt.h\"\n+#include \"caffe2/core/logging.h\"\n+\n+#include <numeric>\n+#include <unordered_map>\n+\n+namespace caffe2 {\n+\n+namespace {\n+// Note that input of trt tensor is in CHW format, while our tensor is NCHW\n+// \\return -1 if there is dimension mismatch between C2 tensor and trt tensor.\n+// Otherwise, return the multiplicaton of CHW dimensions\n+int64_t CheckDims(\n+    const nvinfer1::Dims& nv_dims,\n+    const std::vector<TIndex>& c2_dims) {\n+  if (nv_dims.nbDims + 1 != c2_dims.size()) {\n+    return -1;\n+  }\n+  int64_t chw = 1;\n+  for (int i = 0; i < nv_dims.nbDims; ++i) {\n+    if (nv_dims.d[i] != c2_dims[i + 1]) {\n+      return -1;\n+    }\n+    chw *= nv_dims.d[i];\n+  }\n+  return chw;\n+}\n+\n+} // namespace\n+\n+// Upon construction, we build the inference enigne by deserializing from\n+// protobuf string. And since we know the input/output blobs, we can do the\n+// binding here too.\n+TensorRTOp::TensorRTOp(const OperatorDef& operator_def, Workspace* ws)\n+    : Operator<CUDAContext>(operator_def, ws),\n+      logger_((nvinfer1::ILogger::Severity)(\n+          OperatorBase::GetSingleArgument<int>(\"log_verbosity\", 2))),\n+      max_batch_size_(OperatorBase::GetSingleArgument<int>(\"max_batch_size\", 1)) {\n+  {\n+    auto engine_string =\n+        OperatorBase::GetSingleArgument<std::string>(\"serialized_engine\", \"\");\n+    CAFFE_ENFORCE(!engine_string.empty(), \"Empty serialized TensorRT engine!\");\n+    auto trt_runtime = InferObject(nvinfer1::createInferRuntime(logger_));\n+    // TODO(support trt plugin factory)\n+    trt_engine_ = InferObject(trt_runtime->deserializeCudaEngine(\n+        engine_string.data(), engine_string.size(), nullptr));\n+  }\n+\n+  if(!trt_engine_) {\n+    CAFFE_THROW(\"Cannot deserialize TensorRT engine!\");\n+  }\n+\n+  std::unordered_map<std::string, int> inputs;\n+  std::unordered_map<std::string, int> outputs;\n+  for (int i = 0; i < operator_def.input_size(); ++i) {\n+    inputs.emplace(operator_def.input(i), i);\n+    VLOG(0) << \"Adding Input: \" << operator_def.input(i);\n+  }\n+  for (int i = 0; i < operator_def.output_size(); ++i) {\n+    outputs.emplace(operator_def.output(i), i);\n+    VLOG(0) << \"Adding Output: \" << operator_def.output(i);\n+  }\n+\n+  // Set up the output size hints\n+  std::vector<int> output_size_hints_encoded(\n+      OperatorBase::GetRepeatedArgument<int>(\"output_size_hints\"));\n+  std::vector<std::string> output_size_names(\n+      OperatorBase::GetRepeatedArgument<std::string>(\"output_size_names\"));\n+  int idx = 0;\n+  for (const auto& oname : output_size_names) {\n+    const auto it = outputs.find(oname);\n+    if (it != outputs.end()) {\n+      std::vector<TIndex> dims;\n+      for (; idx < output_size_hints_encoded.size() && output_size_hints_encoded[idx] > 0; ++idx) {\n+        dims.push_back(output_size_hints_encoded[idx]);\n+      }\n+      output_size_hints_.emplace(it->second, std::move(dims));\n+    }\n+  }\n+\n+  // match and bind the input/output\n+  int num_bindings = trt_engine_->getNbBindings();\n+  for (int b = 0; b < num_bindings; ++b) {\n+    const auto& name = trt_engine_->getBindingName(b);\n+    nv_dims_.push_back(trt_engine_->getBindingDimensions(b));\n+    if (trt_engine_->bindingIsInput(b)) {\n+      const auto it = inputs.find(name);\n+      CAFFE_ENFORCE(it != inputs.end(), MakeString(\"Cannot find trt input: \", name));\n+      binding_hints_.emplace_back(it->second, true);\n+    } else {\n+      const auto it = outputs.find(name);\n+      CAFFE_ENFORCE(it != outputs.end());\n+      binding_hints_.emplace_back(it->second, false);\n+    }\n+  }\n+\n+  trt_executor_ = InferObject(trt_engine_->createExecutionContext());\n+}\n+\n+void TensorRTOp::MaybeAdjustOutputShape(int output_idx, std::vector<TIndex>* dims) {\n+  const auto it = output_size_hints_.find(output_idx);\n+  if (it != output_size_hints_.end()) {\n+    const auto& dims_hint = it->second;\n+    auto total_trt = std::accumulate(dims->begin(), dims->end(), (TIndex)(1), std::multiplies<TIndex>());\n+    auto total_c2 = std::accumulate(dims_hint.begin(), dims_hint.end(), (TIndex)(1), std::multiplies<TIndex>());\n+    if (total_c2 != total_trt) {\n+      LOG(WARNING) << \"The total size of TensorRT op output and hint don't match: \" << total_trt << \" vs \" << total_c2;\n+      return;\n+    }\n+\n+    bool identical_shape = true;\n+    if (dims->size() != dims_hint.size()) {\n+      identical_shape = false;\n+    } else {\n+      for (int i = 0; i < dims->size(); ++i) {\n+        if((*dims)[i] != dims_hint[i]) {\n+          identical_shape = false;\n+          break;\n+        }\n+      }\n+    }\n+\n+    // We conform to the output shape hints. NB: We might need an explicit reshape op for this\n+    if (!identical_shape) {\n+      *dims = dims_hint;\n+    }\n+  }\n+}\n+\n+bool TensorRTOp::RunOnDevice() {\n+  CAFFE_ENFORCE(trt_executor_);\n+  // Decide input batch size\n+  size_t N = 0;\n+  bool first = true;\n+  for (int i = 0; i < InputSize(); ++i) {\n+    const auto& input_tensor = Input(i);\n+    const auto& tensor_dims = input_tensor.dims();\n+    if (first) {\n+      N = tensor_dims.front();\n+      first = false;\n+    } else {\n+      CAFFE_ENFORCE_EQ(\n+          N, tensor_dims.front(), \"Mismatched batch size in input tensors\");\n+    }\n+  }\n+\n+  // We need to do the binding at RunOnDevice time because we only know the\n+  // exact shapes of the tensors now. In addtion, since TensorRT engine has\n+  // max_batch_size, we need to call that multiple times if input batch size\n+  // exceeeds this limit.\n+  std::vector<void*> bindings;\n+  auto batch_size = max_batch_size_;\n+  for (size_t offset = 0; offset < N; offset += batch_size) {\n+    bindings.clear();\n+    batch_size =\n+        offset + max_batch_size_ > N ? N - offset : max_batch_size_;\n+    VLOG(2) << \"Offset: \" << offset << \", batch_size: \" << batch_size << \", N: \" << N;\n+    int b = 0;\n+    for (const auto& p : binding_hints_) {\n+      const auto& dims = nv_dims_[b++];\n+      if (p.second) {\n+        // input, check input dimensions\n+        const auto& input_tensor = Input(p.first);\n+        const float* input_data = input_tensor.data<float>();\n+        const auto& tensor_dims = input_tensor.dims();\n+        auto chw = CheckDims(dims, tensor_dims);\n+        CAFFE_ENFORCE_GE(chw, 0, \"Mismatched dimensions between TRT input and C2 input\");\n+        bindings.push_back((void*)(input_data + offset * chw));\n+      } else {\n+        // output, we need to allocate the output tensor at first batch run\n+        auto* output_tensor = Output(p.first);\n+        std::vector<TIndex> tensor_dims;\n+        tensor_dims.push_back(N);\n+        int64_t chw = 1;\n+        for (int i = 0; i < dims.nbDims; ++i) {\n+          tensor_dims.push_back(dims.d[i]);\n+          chw *= dims.d[i];\n+        }\n+\n+        if (offset == 0) {\n+          MaybeAdjustOutputShape(p.first, &tensor_dims);\n+          output_tensor->Resize(tensor_dims);\n+        }\n+        float* output_data = output_tensor->mutable_data<float>();\n+        bindings.push_back((void*)(output_data + offset * chw));\n+      }\n+    }\n+\n+    CAFFE_ENFORCE(bindings.size() == InputSize() + OutputSize());\n+    if(!trt_executor_->execute(batch_size, &bindings[0])){", "path": "caffe2/contrib/tensorrt/tensorrt_op_trt.cc", "position": null, "original_position": 190, "commit_id": "66758cc2919a2a6add56c6bcda8e33f50c94044b", "original_commit_id": "1051f2359f3ec0a4d7c28794d4a3ea67360bcd3d", "user": {"login": "Maratyszcza", "id": 1093985, "node_id": "MDQ6VXNlcjEwOTM5ODU=", "avatar_url": "https://avatars1.githubusercontent.com/u/1093985?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Maratyszcza", "html_url": "https://github.com/Maratyszcza", "followers_url": "https://api.github.com/users/Maratyszcza/followers", "following_url": "https://api.github.com/users/Maratyszcza/following{/other_user}", "gists_url": "https://api.github.com/users/Maratyszcza/gists{/gist_id}", "starred_url": "https://api.github.com/users/Maratyszcza/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Maratyszcza/subscriptions", "organizations_url": "https://api.github.com/users/Maratyszcza/orgs", "repos_url": "https://api.github.com/users/Maratyszcza/repos", "events_url": "https://api.github.com/users/Maratyszcza/events{/privacy}", "received_events_url": "https://api.github.com/users/Maratyszcza/received_events", "type": "User", "site_admin": false}, "body": "`&bindings[0]` -> `bindings.data()`", "created_at": "2018-03-30T23:15:58Z", "updated_at": "2018-11-23T15:41:24Z", "html_url": "https://github.com/pytorch/pytorch/pull/6150#discussion_r178404068", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/6150", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/178404068"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/6150#discussion_r178404068"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/6150"}}, "body_html": "<p><code>&amp;bindings[0]</code> -&gt; <code>bindings.data()</code></p>", "body_text": "&bindings[0] -> bindings.data()"}