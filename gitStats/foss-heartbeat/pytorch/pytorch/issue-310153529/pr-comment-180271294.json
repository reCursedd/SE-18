{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/180271294", "pull_request_review_id": 110658511, "id": 180271294, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MDI3MTI5NA==", "diff_hunk": "@@ -0,0 +1,195 @@\n+#include \"caffe2/contrib/tensorrt/tensorrt_op_trt.h\"\n+#include \"caffe2/core/logging.h\"\n+\n+#include <numeric>\n+#include <unordered_map>\n+\n+namespace caffe2 {\n+\n+namespace {\n+// Note that input of trt tensor is in CHW format, while our tensor is NCHW\n+// \\return -1 if there is dimension mismatch between C2 tensor and trt tensor.\n+// Otherwise, return the product of CHW dimensions\n+int64_t CheckDims(\n+    const nvinfer1::Dims& nv_dims,\n+    const std::vector<TIndex>& c2_dims) {\n+  if (nv_dims.nbDims + 1 != c2_dims.size()) {\n+    CAFFE_THROW(\"Mismatched dimensions between TRT input and C2 input\");\n+  }\n+  int64_t chw = 1;\n+  for (int i = 0; i < nv_dims.nbDims; ++i) {\n+    if (nv_dims.d[i] != c2_dims[i + 1]) {\n+      return -1;\n+    }\n+    chw *= nv_dims.d[i];\n+  }\n+  return chw;\n+}\n+\n+} // namespace\n+\n+// Upon construction, we build the inference engine by deserializing from\n+// protobuf string. And since we know the input/output blobs, we can do the\n+// binding here too.\n+TensorRTOp::TensorRTOp(const OperatorDef& operator_def, Workspace* ws)\n+    : Operator<CUDAContext>(operator_def, ws),\n+      logger_((nvinfer1::ILogger::Severity)(\n+          OperatorBase::GetSingleArgument<int>(\"log_verbosity\", FLAGS_minloglevel))),\n+      max_batch_size_(OperatorBase::GetSingleArgument<int>(\"max_batch_size\", 1)) {\n+  {\n+    auto engine_string =\n+        OperatorBase::GetSingleArgument<std::string>(\"serialized_engine\", \"\");\n+    CAFFE_ENFORCE(!engine_string.empty(), \"Empty serialized TensorRT engine!\");\n+    auto trt_runtime = InferObject(nvinfer1::createInferRuntime(logger_));\n+    // TODO(support trt plugin factory)\n+    trt_engine_ = InferObject(trt_runtime->deserializeCudaEngine(\n+        engine_string.data(), engine_string.size(), nullptr));\n+  }\n+\n+  CAFFE_ENFORCE(trt_engine_, \"Cannot deserialize TensorRT engine!\");\n+\n+  // match and bind the input/output\n+  const int num_bindings = trt_engine_->getNbBindings();\n+  int output_idx = 0;\n+  for (int b = 0; b < num_bindings; ++b) {\n+    nv_dims_.push_back(trt_engine_->getBindingDimensions(b));\n+    bool is_input = trt_engine_->bindingIsInput(b);\n+    is_input_.push_back(is_input);\n+    if (!is_input) {\n+      // For output, we try to get its output size hint\n+      const std::string key = MakeString(\"output_size_hint_\", output_idx);\n+      auto output_size_hint = OperatorBase::GetRepeatedArgument<int>(key);\n+      if (!output_size_hint.empty()) {\n+        std::vector<TIndex> dims;\n+        for (const auto v: output_size_hint) {\n+          dims.push_back(v);\n+        }\n+        output_size_hints_.emplace(output_idx, std::move(dims));\n+      }\n+      ++output_idx;\n+    }\n+  }\n+\n+  trt_executor_ = InferObject(trt_engine_->createExecutionContext());\n+}\n+\n+void TensorRTOp::MaybeAdjustOutputShape(int output_idx, std::vector<TIndex>* dims) {\n+  const auto it = output_size_hints_.find(output_idx);", "path": "caffe2/contrib/tensorrt/tensorrt_op_trt.cc", "position": null, "original_position": 77, "commit_id": "66758cc2919a2a6add56c6bcda8e33f50c94044b", "original_commit_id": "ce45759d924624a90b532be892ecbf0693101d14", "user": {"login": "dzhulgakov", "id": 17890620, "node_id": "MDQ6VXNlcjE3ODkwNjIw", "avatar_url": "https://avatars2.githubusercontent.com/u/17890620?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dzhulgakov", "html_url": "https://github.com/dzhulgakov", "followers_url": "https://api.github.com/users/dzhulgakov/followers", "following_url": "https://api.github.com/users/dzhulgakov/following{/other_user}", "gists_url": "https://api.github.com/users/dzhulgakov/gists{/gist_id}", "starred_url": "https://api.github.com/users/dzhulgakov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dzhulgakov/subscriptions", "organizations_url": "https://api.github.com/users/dzhulgakov/orgs", "repos_url": "https://api.github.com/users/dzhulgakov/repos", "events_url": "https://api.github.com/users/dzhulgakov/events{/privacy}", "received_events_url": "https://api.github.com/users/dzhulgakov/received_events", "type": "User", "site_admin": false}, "body": "output_size_hints could have been just a vectors instead of a map, but matters less I guess", "created_at": "2018-04-10T00:56:07Z", "updated_at": "2018-11-23T15:42:07Z", "html_url": "https://github.com/pytorch/pytorch/pull/6150#discussion_r180271294", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/6150", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/180271294"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/6150#discussion_r180271294"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/6150"}}, "body_html": "<p>output_size_hints could have been just a vectors instead of a map, but matters less I guess</p>", "body_text": "output_size_hints could have been just a vectors instead of a map, but matters less I guess"}