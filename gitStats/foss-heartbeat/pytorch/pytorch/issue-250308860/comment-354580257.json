{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/354580257", "html_url": "https://github.com/pytorch/pytorch/issues/2421#issuecomment-354580257", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/2421", "id": 354580257, "node_id": "MDEyOklzc3VlQ29tbWVudDM1NDU4MDI1Nw==", "user": {"login": "D-X-Y", "id": 9547057, "node_id": "MDQ6VXNlcjk1NDcwNTc=", "avatar_url": "https://avatars0.githubusercontent.com/u/9547057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/D-X-Y", "html_url": "https://github.com/D-X-Y", "followers_url": "https://api.github.com/users/D-X-Y/followers", "following_url": "https://api.github.com/users/D-X-Y/following{/other_user}", "gists_url": "https://api.github.com/users/D-X-Y/gists{/gist_id}", "starred_url": "https://api.github.com/users/D-X-Y/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/D-X-Y/subscriptions", "organizations_url": "https://api.github.com/users/D-X-Y/orgs", "repos_url": "https://api.github.com/users/D-X-Y/repos", "events_url": "https://api.github.com/users/D-X-Y/events{/privacy}", "received_events_url": "https://api.github.com/users/D-X-Y/received_events", "type": "User", "site_admin": false}, "created_at": "2017-12-31T01:56:37Z", "updated_at": "2017-12-31T01:56:37Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1310570\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/soumith\">@soumith</a> Hi, the norm function can give use the 0 gradients now.<br>\nHowever, the following code still has the nan gradient problem</p>\n<pre><code>x = torch.autograd.Variable(torch.zeros(1), requires_grad=True)\ny = torch.sqrt( x * x )\ny.backward()\nprint (x.grad)\n</code></pre>", "body_text": "@soumith Hi, the norm function can give use the 0 gradients now.\nHowever, the following code still has the nan gradient problem\nx = torch.autograd.Variable(torch.zeros(1), requires_grad=True)\ny = torch.sqrt( x * x )\ny.backward()\nprint (x.grad)", "body": "@soumith Hi, the norm function can give use the 0 gradients now.\r\nHowever, the following code still has the nan gradient problem\r\n```\r\nx = torch.autograd.Variable(torch.zeros(1), requires_grad=True)\r\ny = torch.sqrt( x * x )\r\ny.backward()\r\nprint (x.grad)\r\n```"}