{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/306336962", "html_url": "https://github.com/pytorch/pytorch/issues/1730#issuecomment-306336962", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/1730", "id": 306336962, "node_id": "MDEyOklzc3VlQ29tbWVudDMwNjMzNjk2Mg==", "user": {"login": "yenchanghsu", "id": 6336892, "node_id": "MDQ6VXNlcjYzMzY4OTI=", "avatar_url": "https://avatars2.githubusercontent.com/u/6336892?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yenchanghsu", "html_url": "https://github.com/yenchanghsu", "followers_url": "https://api.github.com/users/yenchanghsu/followers", "following_url": "https://api.github.com/users/yenchanghsu/following{/other_user}", "gists_url": "https://api.github.com/users/yenchanghsu/gists{/gist_id}", "starred_url": "https://api.github.com/users/yenchanghsu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yenchanghsu/subscriptions", "organizations_url": "https://api.github.com/users/yenchanghsu/orgs", "repos_url": "https://api.github.com/users/yenchanghsu/repos", "events_url": "https://api.github.com/users/yenchanghsu/events{/privacy}", "received_events_url": "https://api.github.com/users/yenchanghsu/received_events", "type": "User", "site_admin": false}, "created_at": "2017-06-05T23:16:43Z", "updated_at": "2017-06-05T23:16:43Z", "author_association": "NONE", "body_html": "<p>Hi <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1310570\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/soumith\">@soumith</a><br>\nAll three commands gave incorrect results.<br>\nFurthermore, if I repeatedly run \"foo.py\", the results are random patterns of {1,2,3}. Such randomness happened with all three options you gave. Here is an example:</p>\n<pre><code>    2     2     2  ...      1     1     1\n    1     1     1  ...      1     1     1\n    1     1     1  ...      2     2     2\n       ...          \u22f1          ...       \n    3     3     3  ...      3     3     3\n    3     3     3  ...      3     3     3\n    3     3     3  ...      3     3     3\n[torch.FloatTensor of size 91x91]\n</code></pre>\n<p>The cpuinfo:</p>\n<pre><code>processor\t: 0\nvendor_id\t: GenuineIntel\ncpu family\t: 6\nmodel\t\t: 45\nmodel name\t: Intel(R) Xeon(R) CPU E5-2667 0 @ 2.90GHz\nstepping\t: 7\nmicrocode\t: 0x710\ncpu MHz\t\t: 1200.000\ncache size\t: 15360 KB\nphysical id\t: 0\nsiblings\t: 12\ncore id\t\t: 0\ncpu cores\t: 6\napicid\t\t: 0\ninitial apicid\t: 0\nfpu\t\t: yes\nfpu_exception\t: yes\ncpuid level\t: 13\nwp\t\t: yes\nflags\t\t: fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb xsaveopt pln pts dtherm tpr_shadow vnmi flexpriority ept vpid\nbogomips\t: 5785.67\nclflush size\t: 64\ncache_alignment\t: 64\naddress sizes\t: 46 bits physical, 48 bits virtual\npower management:\n</code></pre>", "body_text": "Hi @soumith\nAll three commands gave incorrect results.\nFurthermore, if I repeatedly run \"foo.py\", the results are random patterns of {1,2,3}. Such randomness happened with all three options you gave. Here is an example:\n    2     2     2  ...      1     1     1\n    1     1     1  ...      1     1     1\n    1     1     1  ...      2     2     2\n       ...          \u22f1          ...       \n    3     3     3  ...      3     3     3\n    3     3     3  ...      3     3     3\n    3     3     3  ...      3     3     3\n[torch.FloatTensor of size 91x91]\n\nThe cpuinfo:\nprocessor\t: 0\nvendor_id\t: GenuineIntel\ncpu family\t: 6\nmodel\t\t: 45\nmodel name\t: Intel(R) Xeon(R) CPU E5-2667 0 @ 2.90GHz\nstepping\t: 7\nmicrocode\t: 0x710\ncpu MHz\t\t: 1200.000\ncache size\t: 15360 KB\nphysical id\t: 0\nsiblings\t: 12\ncore id\t\t: 0\ncpu cores\t: 6\napicid\t\t: 0\ninitial apicid\t: 0\nfpu\t\t: yes\nfpu_exception\t: yes\ncpuid level\t: 13\nwp\t\t: yes\nflags\t\t: fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb xsaveopt pln pts dtherm tpr_shadow vnmi flexpriority ept vpid\nbogomips\t: 5785.67\nclflush size\t: 64\ncache_alignment\t: 64\naddress sizes\t: 46 bits physical, 48 bits virtual\npower management:", "body": "Hi @soumith \r\nAll three commands gave incorrect results.\r\nFurthermore, if I repeatedly run \"foo.py\", the results are random patterns of {1,2,3}. Such randomness happened with all three options you gave. Here is an example:\r\n```\r\n    2     2     2  ...      1     1     1\r\n    1     1     1  ...      1     1     1\r\n    1     1     1  ...      2     2     2\r\n       ...          \u22f1          ...       \r\n    3     3     3  ...      3     3     3\r\n    3     3     3  ...      3     3     3\r\n    3     3     3  ...      3     3     3\r\n[torch.FloatTensor of size 91x91]\r\n```\r\nThe cpuinfo:\r\n```\r\nprocessor\t: 0\r\nvendor_id\t: GenuineIntel\r\ncpu family\t: 6\r\nmodel\t\t: 45\r\nmodel name\t: Intel(R) Xeon(R) CPU E5-2667 0 @ 2.90GHz\r\nstepping\t: 7\r\nmicrocode\t: 0x710\r\ncpu MHz\t\t: 1200.000\r\ncache size\t: 15360 KB\r\nphysical id\t: 0\r\nsiblings\t: 12\r\ncore id\t\t: 0\r\ncpu cores\t: 6\r\napicid\t\t: 0\r\ninitial apicid\t: 0\r\nfpu\t\t: yes\r\nfpu_exception\t: yes\r\ncpuid level\t: 13\r\nwp\t\t: yes\r\nflags\t\t: fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb xsaveopt pln pts dtherm tpr_shadow vnmi flexpriority ept vpid\r\nbogomips\t: 5785.67\r\nclflush size\t: 64\r\ncache_alignment\t: 64\r\naddress sizes\t: 46 bits physical, 48 bits virtual\r\npower management:\r\n```"}