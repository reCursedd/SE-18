{"url": "https://api.github.com/repos/pytorch/pytorch/issues/1730", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/1730/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/1730/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/1730/events", "html_url": "https://github.com/pytorch/pytorch/issues/1730", "id": 233678363, "node_id": "MDU6SXNzdWUyMzM2NzgzNjM=", "number": 1730, "title": "Inplace add result is not correct under certain case", "user": {"login": "yenchanghsu", "id": 6336892, "node_id": "MDQ6VXNlcjYzMzY4OTI=", "avatar_url": "https://avatars2.githubusercontent.com/u/6336892?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yenchanghsu", "html_url": "https://github.com/yenchanghsu", "followers_url": "https://api.github.com/users/yenchanghsu/followers", "following_url": "https://api.github.com/users/yenchanghsu/following{/other_user}", "gists_url": "https://api.github.com/users/yenchanghsu/gists{/gist_id}", "starred_url": "https://api.github.com/users/yenchanghsu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yenchanghsu/subscriptions", "organizations_url": "https://api.github.com/users/yenchanghsu/orgs", "repos_url": "https://api.github.com/users/yenchanghsu/repos", "events_url": "https://api.github.com/users/yenchanghsu/events{/privacy}", "received_events_url": "https://api.github.com/users/yenchanghsu/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2017-06-05T18:59:59Z", "updated_at": "2017-06-06T23:09:41Z", "closed_at": null, "author_association": "NONE", "body_html": "<p>Case 1: with inplace add =&gt; incorrect result</p>\n<pre><code>import torch\nsource=torch.ones(91,91)\ntarget=torch.zeros(91,91)\ntarget.add_(source)\nprint(target)\n\n    3     3     3  ...      3     3     3\n    3     3     3  ...      3     3     3\n    3     3     3  ...      3     3     3\n       ...          \u22f1          ...       \n    3     3     3  ...      3     3     3\n    3     3     3  ...      3     3     3\n    3     3     3  ...      3     3     3\n[torch.FloatTensor of size 91x91]\n</code></pre>\n<p>Case 2: without inplace add =&gt; works properly</p>\n<pre><code>source=torch.ones(91,91)\ntarget=torch.zeros(91,91)\ntarget = target.add(source)\nprint(target)\n\n    1     1     1  ...      1     1     1\n    1     1     1  ...      1     1     1\n    1     1     1  ...      1     1     1\n       ...          \u22f1          ...       \n    1     1     1  ...      1     1     1\n    1     1     1  ...      1     1     1\n    1     1     1  ...      1     1     1\n[torch.FloatTensor of size 91x91]\n</code></pre>\n<p>Case 3: inplace add with smaller tensor =&gt; works properly</p>\n<pre><code>source=torch.ones(90,90)\ntarget=torch.zeros(90,90)\ntarget.add_(source)\nprint(target)\n\n    1     1     1  ...      1     1     1\n    1     1     1  ...      1     1     1\n    1     1     1  ...      1     1     1\n       ...          \u22f1          ...       \n    1     1     1  ...      1     1     1\n    1     1     1  ...      1     1     1\n    1     1     1  ...      1     1     1\n[torch.FloatTensor of size 90x90]\n</code></pre>\n<p>Case 4: inplace add with larger tensor =&gt;  incorrect result with larger values</p>\n<pre><code>source=torch.ones(300,300)\ntarget=torch.zeros(300,300)\ntarget.add_(source)\nprint(target)\n\n    6     6     6  ...      6     6     6\n    6     6     6  ...      6     6     6\n    6     6     6  ...      6     6     6\n       ...          \u22f1          ...       \n    6     6     6  ...      6     6     6\n    6     6     6  ...      6     6     6\n    6     6     6  ...      6     6     6\n[torch.FloatTensor of size 300x300]\n</code></pre>\n<h3>More details:</h3>\n<p>Case 1 and 4 only failed on one machine but works properly on another machine (with the same pytorch version). I guess the issue is caused by a dependent module? Could someone give me a hint to further analyze the issue?</p>\n<ul>\n<li>pytorch version: 0.1.12_2</li>\n<li>Linux, pip, python 2.7</li>\n</ul>", "body_text": "Case 1: with inplace add => incorrect result\nimport torch\nsource=torch.ones(91,91)\ntarget=torch.zeros(91,91)\ntarget.add_(source)\nprint(target)\n\n    3     3     3  ...      3     3     3\n    3     3     3  ...      3     3     3\n    3     3     3  ...      3     3     3\n       ...          \u22f1          ...       \n    3     3     3  ...      3     3     3\n    3     3     3  ...      3     3     3\n    3     3     3  ...      3     3     3\n[torch.FloatTensor of size 91x91]\n\nCase 2: without inplace add => works properly\nsource=torch.ones(91,91)\ntarget=torch.zeros(91,91)\ntarget = target.add(source)\nprint(target)\n\n    1     1     1  ...      1     1     1\n    1     1     1  ...      1     1     1\n    1     1     1  ...      1     1     1\n       ...          \u22f1          ...       \n    1     1     1  ...      1     1     1\n    1     1     1  ...      1     1     1\n    1     1     1  ...      1     1     1\n[torch.FloatTensor of size 91x91]\n\nCase 3: inplace add with smaller tensor => works properly\nsource=torch.ones(90,90)\ntarget=torch.zeros(90,90)\ntarget.add_(source)\nprint(target)\n\n    1     1     1  ...      1     1     1\n    1     1     1  ...      1     1     1\n    1     1     1  ...      1     1     1\n       ...          \u22f1          ...       \n    1     1     1  ...      1     1     1\n    1     1     1  ...      1     1     1\n    1     1     1  ...      1     1     1\n[torch.FloatTensor of size 90x90]\n\nCase 4: inplace add with larger tensor =>  incorrect result with larger values\nsource=torch.ones(300,300)\ntarget=torch.zeros(300,300)\ntarget.add_(source)\nprint(target)\n\n    6     6     6  ...      6     6     6\n    6     6     6  ...      6     6     6\n    6     6     6  ...      6     6     6\n       ...          \u22f1          ...       \n    6     6     6  ...      6     6     6\n    6     6     6  ...      6     6     6\n    6     6     6  ...      6     6     6\n[torch.FloatTensor of size 300x300]\n\nMore details:\nCase 1 and 4 only failed on one machine but works properly on another machine (with the same pytorch version). I guess the issue is caused by a dependent module? Could someone give me a hint to further analyze the issue?\n\npytorch version: 0.1.12_2\nLinux, pip, python 2.7", "body": "Case 1: with inplace add => incorrect result\r\n```\r\nimport torch\r\nsource=torch.ones(91,91)\r\ntarget=torch.zeros(91,91)\r\ntarget.add_(source)\r\nprint(target)\r\n\r\n    3     3     3  ...      3     3     3\r\n    3     3     3  ...      3     3     3\r\n    3     3     3  ...      3     3     3\r\n       ...          \u22f1          ...       \r\n    3     3     3  ...      3     3     3\r\n    3     3     3  ...      3     3     3\r\n    3     3     3  ...      3     3     3\r\n[torch.FloatTensor of size 91x91]\r\n```\r\n\r\nCase 2: without inplace add => works properly\r\n```\r\nsource=torch.ones(91,91)\r\ntarget=torch.zeros(91,91)\r\ntarget = target.add(source)\r\nprint(target)\r\n\r\n    1     1     1  ...      1     1     1\r\n    1     1     1  ...      1     1     1\r\n    1     1     1  ...      1     1     1\r\n       ...          \u22f1          ...       \r\n    1     1     1  ...      1     1     1\r\n    1     1     1  ...      1     1     1\r\n    1     1     1  ...      1     1     1\r\n[torch.FloatTensor of size 91x91]\r\n```\r\n\r\nCase 3: inplace add with smaller tensor => works properly\r\n```\r\nsource=torch.ones(90,90)\r\ntarget=torch.zeros(90,90)\r\ntarget.add_(source)\r\nprint(target)\r\n\r\n    1     1     1  ...      1     1     1\r\n    1     1     1  ...      1     1     1\r\n    1     1     1  ...      1     1     1\r\n       ...          \u22f1          ...       \r\n    1     1     1  ...      1     1     1\r\n    1     1     1  ...      1     1     1\r\n    1     1     1  ...      1     1     1\r\n[torch.FloatTensor of size 90x90]\r\n```\r\n\r\nCase 4: inplace add with larger tensor =>  incorrect result with larger values\r\n```\r\nsource=torch.ones(300,300)\r\ntarget=torch.zeros(300,300)\r\ntarget.add_(source)\r\nprint(target)\r\n\r\n    6     6     6  ...      6     6     6\r\n    6     6     6  ...      6     6     6\r\n    6     6     6  ...      6     6     6\r\n       ...          \u22f1          ...       \r\n    6     6     6  ...      6     6     6\r\n    6     6     6  ...      6     6     6\r\n    6     6     6  ...      6     6     6\r\n[torch.FloatTensor of size 300x300]\r\n```\r\n\r\n### More details:\r\nCase 1 and 4 only failed on one machine but works properly on another machine (with the same pytorch version). I guess the issue is caused by a dependent module? Could someone give me a hint to further analyze the issue? \r\n- pytorch version: 0.1.12_2\r\n- Linux, pip, python 2.7\r\n\r\n"}