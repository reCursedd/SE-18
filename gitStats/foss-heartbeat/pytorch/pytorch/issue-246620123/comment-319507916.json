{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/319507916", "html_url": "https://github.com/pytorch/pytorch/issues/2258#issuecomment-319507916", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/2258", "id": 319507916, "node_id": "MDEyOklzc3VlQ29tbWVudDMxOTUwNzkxNg==", "user": {"login": "alexsax", "id": 5157485, "node_id": "MDQ6VXNlcjUxNTc0ODU=", "avatar_url": "https://avatars3.githubusercontent.com/u/5157485?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexsax", "html_url": "https://github.com/alexsax", "followers_url": "https://api.github.com/users/alexsax/followers", "following_url": "https://api.github.com/users/alexsax/following{/other_user}", "gists_url": "https://api.github.com/users/alexsax/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexsax/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexsax/subscriptions", "organizations_url": "https://api.github.com/users/alexsax/orgs", "repos_url": "https://api.github.com/users/alexsax/repos", "events_url": "https://api.github.com/users/alexsax/events{/privacy}", "received_events_url": "https://api.github.com/users/alexsax/received_events", "type": "User", "site_admin": false}, "created_at": "2017-08-01T21:52:36Z", "updated_at": "2017-08-01T21:52:36Z", "author_association": "NONE", "body_html": "<p>Awesome, TNT looks like the type of training loop that I am looking for. It's got nice callbacks that don't abstract away too much. <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=7032458\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/nasimrahaman\">@nasimrahaman</a>, Inferno also looks promising. Do you plan to support RL use cases, as well?</p>\n<p>Since there are already libraries which encapsulate the training loop, perhaps the most flexible way to integrate visual logging is to write a separate library of plugins that could be used with all of the above.<br>\ne.g.</p>\n<pre><code># Training loop variants gather the data from the state dict\nvl = VisdomLogger(\"heatmap\", [\"conv4.activations\"], register=state) # TNT version\nvl = VisdomLogger(\"heatmap\", [\"conv4.activations\"], register=state, (2, \"epoch\")) #Existing PyTorch trainer/Inferno version\ntrainer.train(**kwargs)\n\n# Version for no training loop still eliminates the need to carry around parameters all the time\nvl = VisdomLogger(\"heatmap\") \nfor i in count():\n    # do stuff\n    vl.log(data)\n</code></pre>", "body_text": "Awesome, TNT looks like the type of training loop that I am looking for. It's got nice callbacks that don't abstract away too much. @nasimrahaman, Inferno also looks promising. Do you plan to support RL use cases, as well?\nSince there are already libraries which encapsulate the training loop, perhaps the most flexible way to integrate visual logging is to write a separate library of plugins that could be used with all of the above.\ne.g.\n# Training loop variants gather the data from the state dict\nvl = VisdomLogger(\"heatmap\", [\"conv4.activations\"], register=state) # TNT version\nvl = VisdomLogger(\"heatmap\", [\"conv4.activations\"], register=state, (2, \"epoch\")) #Existing PyTorch trainer/Inferno version\ntrainer.train(**kwargs)\n\n# Version for no training loop still eliminates the need to carry around parameters all the time\nvl = VisdomLogger(\"heatmap\") \nfor i in count():\n    # do stuff\n    vl.log(data)", "body": "Awesome, TNT looks like the type of training loop that I am looking for. It's got nice callbacks that don't abstract away too much. @nasimrahaman, Inferno also looks promising. Do you plan to support RL use cases, as well?\r\n\r\nSince there are already libraries which encapsulate the training loop, perhaps the most flexible way to integrate visual logging is to write a separate library of plugins that could be used with all of the above. \r\ne.g.\r\n```\r\n# Training loop variants gather the data from the state dict\r\nvl = VisdomLogger(\"heatmap\", [\"conv4.activations\"], register=state) # TNT version\r\nvl = VisdomLogger(\"heatmap\", [\"conv4.activations\"], register=state, (2, \"epoch\")) #Existing PyTorch trainer/Inferno version\r\ntrainer.train(**kwargs)\r\n\r\n# Version for no training loop still eliminates the need to carry around parameters all the time\r\nvl = VisdomLogger(\"heatmap\") \r\nfor i in count():\r\n    # do stuff\r\n    vl.log(data)\r\n```\r\n"}