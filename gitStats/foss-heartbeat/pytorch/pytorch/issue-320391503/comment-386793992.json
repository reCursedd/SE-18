{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/386793992", "html_url": "https://github.com/pytorch/pytorch/pull/7298#issuecomment-386793992", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/7298", "id": 386793992, "node_id": "MDEyOklzc3VlQ29tbWVudDM4Njc5Mzk5Mg==", "user": {"login": "t-vi", "id": 20787943, "node_id": "MDQ6VXNlcjIwNzg3OTQz", "avatar_url": "https://avatars2.githubusercontent.com/u/20787943?v=4", "gravatar_id": "", "url": "https://api.github.com/users/t-vi", "html_url": "https://github.com/t-vi", "followers_url": "https://api.github.com/users/t-vi/followers", "following_url": "https://api.github.com/users/t-vi/following{/other_user}", "gists_url": "https://api.github.com/users/t-vi/gists{/gist_id}", "starred_url": "https://api.github.com/users/t-vi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/t-vi/subscriptions", "organizations_url": "https://api.github.com/users/t-vi/orgs", "repos_url": "https://api.github.com/users/t-vi/repos", "events_url": "https://api.github.com/users/t-vi/events{/privacy}", "received_events_url": "https://api.github.com/users/t-vi/received_events", "type": "User", "site_admin": false}, "created_at": "2018-05-05T09:54:12Z", "updated_at": "2018-05-05T09:54:42Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=16191443\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/crcrpar\">@crcrpar</a> He, thank you for your implementation!<br>\nI wonder if the technical python trickery should be wrapped into a proper abstraction - another use case for this type of \"precomputation\" would be transformed / constrained parameters.</p>", "body_text": "@crcrpar He, thank you for your implementation!\nI wonder if the technical python trickery should be wrapped into a proper abstraction - another use case for this type of \"precomputation\" would be transformed / constrained parameters.", "body": "@crcrpar He, thank you for your implementation!\r\nI wonder if the technical python trickery should be wrapped into a proper abstraction - another use case for this type of \"precomputation\" would be transformed / constrained parameters."}