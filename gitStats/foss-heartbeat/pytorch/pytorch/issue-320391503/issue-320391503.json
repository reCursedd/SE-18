{"url": "https://api.github.com/repos/pytorch/pytorch/issues/7298", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/7298/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/7298/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/7298/events", "html_url": "https://github.com/pytorch/pytorch/pull/7298", "id": 320391503, "node_id": "MDExOlB1bGxSZXF1ZXN0MTg2MDczNTEy", "number": 7298, "title": "Improve spectral_norm (fixes #7261)", "user": {"login": "t-vi", "id": 20787943, "node_id": "MDQ6VXNlcjIwNzg3OTQz", "avatar_url": "https://avatars2.githubusercontent.com/u/20787943?v=4", "gravatar_id": "", "url": "https://api.github.com/users/t-vi", "html_url": "https://github.com/t-vi", "followers_url": "https://api.github.com/users/t-vi/followers", "following_url": "https://api.github.com/users/t-vi/following{/other_user}", "gists_url": "https://api.github.com/users/t-vi/gists{/gist_id}", "starred_url": "https://api.github.com/users/t-vi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/t-vi/subscriptions", "organizations_url": "https://api.github.com/users/t-vi/orgs", "repos_url": "https://api.github.com/users/t-vi/repos", "events_url": "https://api.github.com/users/t-vi/events{/privacy}", "received_events_url": "https://api.github.com/users/t-vi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-05-04T19:02:13Z", "updated_at": "2018-11-23T15:44:40Z", "closed_at": "2018-05-13T03:31:38Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/7298", "html_url": "https://github.com/pytorch/pytorch/pull/7298", "diff_url": "https://github.com/pytorch/pytorch/pull/7298.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/7298.patch"}, "body_html": "<p>Thank you Morgan Funtowicz for the report and minimal example!</p>\n<p>This eliminates the memory leaking behavious that Morgan observed insofar as <code>print (\"memory\", torch.cuda.memory_allocated())</code> is stable (with some noise - i.e. oscillations between nearby values, but not increasing).</p>\n<p>In the course of the above, it makes two functional changes to the code: I assume that we do <em>not</em> need gradients for the spectral of the <code>weight</code> nor <code>u</code>, but only for the <code>weight</code> and by the rescaled weight. On the other hand, I divide the weight rather than weight.data to not get into trouble with the backward. This brings the code closer to my interpretation of the reference. This should probably be double-checked who knows bettter (<a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=16191443\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/crcrpar\">@crcrpar</a>)?</p>", "body_text": "Thank you Morgan Funtowicz for the report and minimal example!\nThis eliminates the memory leaking behavious that Morgan observed insofar as print (\"memory\", torch.cuda.memory_allocated()) is stable (with some noise - i.e. oscillations between nearby values, but not increasing).\nIn the course of the above, it makes two functional changes to the code: I assume that we do not need gradients for the spectral of the weight nor u, but only for the weight and by the rescaled weight. On the other hand, I divide the weight rather than weight.data to not get into trouble with the backward. This brings the code closer to my interpretation of the reference. This should probably be double-checked who knows bettter (@crcrpar)?", "body": "Thank you Morgan Funtowicz for the report and minimal example!\r\n\r\nThis eliminates the memory leaking behavious that Morgan observed insofar as `print (\"memory\", torch.cuda.memory_allocated())` is stable (with some noise - i.e. oscillations between nearby values, but not increasing).\r\n\r\nIn the course of the above, it makes two functional changes to the code: I assume that we do *not* need gradients for the spectral of the `weight` nor `u`, but only for the `weight` and by the rescaled weight. On the other hand, I divide the weight rather than weight.data to not get into trouble with the backward. This brings the code closer to my interpretation of the reference. This should probably be double-checked who knows bettter (@crcrpar)?\r\n"}