{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/179554874", "pull_request_review_id": 109821601, "id": 179554874, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTU1NDg3NA==", "diff_hunk": "@@ -0,0 +1,114 @@\n+import torch\n+\n+\n+def detach_variable(inputs):\n+    if torch.is_tensor(inputs):\n+        inp = inputs.detach()\n+        return inp\n+    elif isinstance(inputs, tuple):\n+        return tuple(detach_variable(v) for v in inputs)\n+    else:\n+        raise RuntimeError(\n+            \"Only tensor or tuple of tensors is supported. Got Unsupported input type: \", type(inputs).__name__)\n+\n+\n+class CheckpointFunction(torch.autograd.Function):\n+\n+    @staticmethod\n+    def forward(ctx, run_function, *args):\n+        ctx.run_function = run_function\n+        ctx.save_for_backward(*args)\n+        with torch.no_grad():\n+            outputs = run_function(*args)\n+        return outputs\n+\n+    @staticmethod\n+    def backward(ctx, *args):\n+        if (not torch.autograd.is_checkpoint_valid()):\n+            raise RuntimeError(\"Checkpointing is not compatible with .grad(), please use .backward() if possible\")\n+        inputs = ctx.saved_tensors\n+        inputs_list = detach_variable(inputs)\n+        with torch.enable_grad():\n+            outputs = ctx.run_function(*inputs_list)\n+\n+        if torch.is_tensor(outputs):\n+            outputs = (outputs,)\n+        torch.autograd.backward(outputs, args)\n+\n+        input_grads = None\n+        if isinstance(inputs_list, tuple):\n+            input_grads = tuple(inp.grad for inp in inputs_list)\n+            return (None,) + input_grads\n+        elif torch.is_tensor(inputs_list):\n+            input_grads = inputs_list.grad\n+            return None, input_grads\n+\n+\n+def checkpoint(run_function, *args):\n+    r\"\"\"Checkpoint a model or part of the model\n+\n+    Checkpoint works by trading compute for memory. It can be applied on any\n+    part of the model. In the forward pass, the model activations are not\n+    stored. The forward pass save the inputs tuple and the run_function\n+    parameter. In the backwards pass, the saved inputs and run_function is\n+    retreived, and the forward pass is done on the model again (non-volatile\n+    this time) since we need to get the activations values for calculating the\n+    gradient and then the gradients are calculated.\n+    WARNING: checkpointing doesn't work with torch.autograd.grad(), but only with\n+    torch.autograd.backward()\n+\n+    Args:\n+        run_function : describes what to run in the forward pass of the model or\n+                       part of the model. It should also know how to handle\n+                       the inputs passed as the tuple. For example, in LSTM,\n+                       user passes (activation, hidden), run_function should\n+                       correctly use first input as activation and second input\n+                       as hidden\n+        args:         tuple containing inputs to the run_function\n+\n+    Returns:\n+        Output of running the run_function on *args\n+    \"\"\"\n+    return CheckpointFunction.apply(run_function, *args)\n+\n+\n+def checkpoint_sequential(modules, segments, *inputs):\n+    r\"\"\"A helper function for checkpointing sequential based models.\n+\n+    For models that are constructed using sequential, they normally are built\n+    using various modules. For such models, given a list of modules it executes\n+    sequentially, we can divide the model in various segments and checkpoint\n+    the segments. All segments except the last will be run in volatile manner.\n+    The inputs of each checkpointed segment will be saved for re-running the\n+    segment in the backward pass.\n+\n+    Args:\n+        modules: The sequence of modules (comprising the model) to run in order.\n+        segments: Number of times chunks to create in the model\n+        inputs: tuple containing the inputs to run_function\n+\n+    Returns:\n+        Output of running the modules on *inputs\n+\n+    Example:\n+        >>> modules = [module for k, module in self._modules.items()][0]", "path": "torch/utils/checkpoint.py", "position": null, "original_position": 94, "commit_id": "37ee79fe45bdcfd2fb70eccc146369d6c765137e", "original_commit_id": "7722996ee7feab59b9b93673c5eb22a544314fcf", "user": {"login": "prigoyal", "id": 13488275, "node_id": "MDQ6VXNlcjEzNDg4Mjc1", "avatar_url": "https://avatars0.githubusercontent.com/u/13488275?v=4", "gravatar_id": "", "url": "https://api.github.com/users/prigoyal", "html_url": "https://github.com/prigoyal", "followers_url": "https://api.github.com/users/prigoyal/followers", "following_url": "https://api.github.com/users/prigoyal/following{/other_user}", "gists_url": "https://api.github.com/users/prigoyal/gists{/gist_id}", "starred_url": "https://api.github.com/users/prigoyal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/prigoyal/subscriptions", "organizations_url": "https://api.github.com/users/prigoyal/orgs", "repos_url": "https://api.github.com/users/prigoyal/repos", "events_url": "https://api.github.com/users/prigoyal/events{/privacy}", "received_events_url": "https://api.github.com/users/prigoyal/received_events", "type": "User", "site_admin": false}, "body": "what's the reason for not exposing `._modules` to users? I can just remove this example, we are providing tutorial anyways.\r\n\r\nCan you recommend me a way how to get what modules are part of the model? we use this to slice up the model in chunks that user wants. ", "created_at": "2018-04-05T18:15:07Z", "updated_at": "2018-11-23T15:41:47Z", "html_url": "https://github.com/pytorch/pytorch/pull/4594#discussion_r179554874", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4594", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/179554874"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/4594#discussion_r179554874"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4594"}}, "body_html": "<p>what's the reason for not exposing <code>._modules</code> to users? I can just remove this example, we are providing tutorial anyways.</p>\n<p>Can you recommend me a way how to get what modules are part of the model? we use this to slice up the model in chunks that user wants.</p>", "body_text": "what's the reason for not exposing ._modules to users? I can just remove this example, we are providing tutorial anyways.\nCan you recommend me a way how to get what modules are part of the model? we use this to slice up the model in chunks that user wants.", "in_reply_to_id": 179208883}