{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/162820002", "pull_request_review_id": 90339372, "id": 162820002, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MjgyMDAwMg==", "diff_hunk": "@@ -0,0 +1,140 @@\n+import torch\n+from torch.autograd import Variable, Function\n+\n+\n+def wrap_variable(inputs):\n+    if torch.is_tensor(inputs):\n+        return Variable(inputs)\n+    elif isinstance(inputs, tuple):\n+        return tuple(wrap_variable(v) for v in inputs)\n+    else:\n+        raise RuntimeError(\"Unsupported input type: \", type(inputs).__name__)\n+\n+\n+def unpack_variables(inputs):\n+    if isinstance(inputs, Variable):\n+        return inputs.data\n+    elif torch.is_tensor(inputs):\n+        return inputs\n+    elif isinstance(inputs, tuple):\n+        return tuple(unpack_variables(v) for v in inputs)\n+    else:\n+        raise RuntimeError(\"Unsupported input type: \", type(inputs).__name__)\n+\n+\n+class CheckpointFunction(Function):\n+\n+    @staticmethod\n+    def forward(ctx, run_function, *args):\n+        ctx.run_function = run_function\n+        ctx.save_for_backward(*args)\n+        var_args = wrap_variable(args)\n+        with torch.no_grad():\n+            outputs = run_function(*var_args)\n+        return unpack_variables(outputs)\n+\n+    @staticmethod\n+    def backward(ctx, *grads):\n+        real_inputs = ctx.saved_variables\n+        # We need to create new Variables to mark this place in the graph.\n+        # Reusing real_inputs would be incorrect if a case like this:\n+        #\n+        # y = checkpoint(lambda x: x + 1, x)\n+        # z = checkpoint(lambda x, y: x + y, x, y)\n+        #\n+        # This would fail, because when grad((x + y), (x, y)) is called in\n+        # the second checkpoint, autograd would traverse all paths from (x + y)\n+        # to the definition of x, which includes the first checkpoint. To\n+        # prevent this situation, we create views of the inputs, which lets us\n+        # still get all correctness checks, but uniquely marks the place up to\n+        # which we want to differentiate, because all views are independent nodes\n+        # (i.e. there is no path from one to another via .grad_fn chain).\n+        inputs = [i[:] for i in real_inputs]\n+        with torch.enable_grad():\n+            outputs = ctx.run_function(*inputs)\n+        if isinstance(outputs, Variable)", "path": "torch/utils/checkpoint.py", "position": null, "original_position": 55, "commit_id": "37ee79fe45bdcfd2fb70eccc146369d6c765137e", "original_commit_id": "29ed59f6443125ec72cde5a59fd685f520a4aa77", "user": {"login": "adynathos", "id": 8000512, "node_id": "MDQ6VXNlcjgwMDA1MTI=", "avatar_url": "https://avatars0.githubusercontent.com/u/8000512?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adynathos", "html_url": "https://github.com/adynathos", "followers_url": "https://api.github.com/users/adynathos/followers", "following_url": "https://api.github.com/users/adynathos/following{/other_user}", "gists_url": "https://api.github.com/users/adynathos/gists{/gist_id}", "starred_url": "https://api.github.com/users/adynathos/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adynathos/subscriptions", "organizations_url": "https://api.github.com/users/adynathos/orgs", "repos_url": "https://api.github.com/users/adynathos/repos", "events_url": "https://api.github.com/users/adynathos/events{/privacy}", "received_events_url": "https://api.github.com/users/adynathos/received_events", "type": "User", "site_admin": false}, "body": "There should be a `:` at the end of line", "created_at": "2018-01-21T17:55:26Z", "updated_at": "2018-11-23T15:38:22Z", "html_url": "https://github.com/pytorch/pytorch/pull/4594#discussion_r162820002", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4594", "author_association": "NONE", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/162820002"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/4594#discussion_r162820002"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4594"}}, "body_html": "<p>There should be a <code>:</code> at the end of line</p>", "body_text": "There should be a : at the end of line"}