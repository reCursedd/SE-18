{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/375797745", "html_url": "https://github.com/pytorch/pytorch/pull/4594#issuecomment-375797745", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/4594", "id": 375797745, "node_id": "MDEyOklzc3VlQ29tbWVudDM3NTc5Nzc0NQ==", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "created_at": "2018-03-23T21:03:39Z", "updated_at": "2018-03-23T21:04:04Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=13488275\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/prigoyal\">@prigoyal</a> and I discussed how to add \"am I in backward() or in grad()\" to PyTorch API. One complicating factor is that backwards invocations can be reentrant so a global variable is not enough.</p>\n<p>I suggest:</p>\n<ol>\n<li>Modify <code>GraphTask</code> to record whether or not <code>outputs</code> was empty or not (empty means <code>backward</code>, non-empty means <code>grad</code>). This is set in <code>execute()</code> in the engine</li>\n<li>Somehow propagate this bool to the Python frontend. I don't know a good way to do this, maybe we can mark a bit on the Variables we pass in. Or we can have some thread local state, and then write a Python binding to access it. <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=4583066\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/apaszke\">@apaszke</a> do you have any good ideas</li>\n</ol>", "body_text": "@prigoyal and I discussed how to add \"am I in backward() or in grad()\" to PyTorch API. One complicating factor is that backwards invocations can be reentrant so a global variable is not enough.\nI suggest:\n\nModify GraphTask to record whether or not outputs was empty or not (empty means backward, non-empty means grad). This is set in execute() in the engine\nSomehow propagate this bool to the Python frontend. I don't know a good way to do this, maybe we can mark a bit on the Variables we pass in. Or we can have some thread local state, and then write a Python binding to access it. @apaszke do you have any good ideas", "body": "@prigoyal and I discussed how to add \"am I in backward() or in grad()\" to PyTorch API. One complicating factor is that backwards invocations can be reentrant so a global variable is not enough.\r\n\r\nI suggest:\r\n\r\n1. Modify `GraphTask` to record whether or not `outputs` was empty or not (empty means `backward`, non-empty means `grad`). This is set in `execute()` in the engine\r\n2. Somehow propagate this bool to the Python frontend. I don't know a good way to do this, maybe we can mark a bit on the Variables we pass in. Or we can have some thread local state, and then write a Python binding to access it. @apaszke do you have any good ideas"}