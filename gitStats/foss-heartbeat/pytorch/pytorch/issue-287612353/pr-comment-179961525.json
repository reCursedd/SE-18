{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/179961525", "pull_request_review_id": 110300181, "id": 179961525, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTk2MTUyNQ==", "diff_hunk": "@@ -112,6 +114,96 @@ def __len__(self):\n         return 10\n \n \n+class TestCheckpoint(TestCase):\n+\n+    # Test whether checkpoint is being triggered or not. For this, we check\n+    # the number of times forward pass happens\n+    def test_checkpoint_trigger(self):\n+\n+        class Net(nn.Module):\n+\n+            def __init__(self):\n+                super(Net, self).__init__()\n+                self.count = 0\n+\n+            def forward(self, input_var):\n+                self.count += 1\n+                return input_var\n+\n+        # checkpointed\n+        chunks = 2\n+        module1, module2 = Net(), Net()\n+        assert(module1.count == 0)\n+        modules = [module1, module2]\n+        input_var = torch.randn(3, 4, requires_grad=True)\n+        out = checkpoint_sequential(modules, chunks, input_var)\n+        out.sum().backward()\n+        assert (module1.count == 2)\n+\n+    def test_checkpoint_valid(self):\n+        model = nn.Sequential(\n+            nn.Linear(100, 50),\n+            nn.ReLU(),\n+            nn.Linear(50, 20),\n+            nn.ReLU(),\n+            nn.Linear(20, 5),\n+            nn.ReLU()\n+        )\n+\n+        input_var = torch.randn(1, 100, requires_grad=True)\n+\n+        # checkpointed\n+        chunks = 2\n+        modules = list(model.children())\n+        out = checkpoint_sequential(modules, chunks, input_var)\n+        with self.assertRaisesRegex(RuntimeError, \"Checkpointing is not compatible\"):\n+            torch.autograd.grad(\n+                outputs=[out], grad_outputs=[torch.ones(1, 5)], inputs=[input_var], create_graph=True\n+            )\n+\n+    def test_checkpoint(self):\n+        model = nn.Sequential(\n+            nn.Linear(100, 50),\n+            nn.ReLU(),\n+            nn.Linear(50, 20),\n+            nn.ReLU(),\n+            nn.Linear(20, 5),\n+            nn.ReLU()\n+        )\n+\n+        x = torch.randn(1, 100, requires_grad=True)\n+\n+        # not checkpointed\n+        out = model(x)\n+        out_not_checkpointed = out.data.clone()\n+        model.zero_grad()\n+        out.sum().backward()\n+        grad_not_checkpointed = {}\n+        for name, param in model.named_parameters():\n+            grad_not_checkpointed[name] = param.grad.data.clone()\n+        input_grad = x.grad.data.clone()\n+\n+        # checkpointed\n+        chunks = 2\n+        modules = list(model.children())", "path": "test/test_utils.py", "position": 133, "original_position": 88, "commit_id": "37ee79fe45bdcfd2fb70eccc146369d6c765137e", "original_commit_id": "6b37243f2c25d6f6f6bf633c3fa0862dff2c843b", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Can you pass in the sequential so we test this code path too?", "created_at": "2018-04-08T21:12:14Z", "updated_at": "2018-11-23T15:42:01Z", "html_url": "https://github.com/pytorch/pytorch/pull/4594#discussion_r179961525", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4594", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/179961525"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/4594#discussion_r179961525"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4594"}}, "body_html": "<p>Can you pass in the sequential so we test this code path too?</p>", "body_text": "Can you pass in the sequential so we test this code path too?"}