{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/179098217", "pull_request_review_id": 109272366, "id": 179098217, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTA5ODIxNw==", "diff_hunk": "@@ -0,0 +1,119 @@\n+import torch\n+\n+\n+def detach_variable(inputs):\n+    if torch.is_tensor(inputs):\n+        inp = inputs.detach()\n+        return inp\n+    elif isinstance(inputs, tuple):\n+        return tuple(detach_variable(v) for v in inputs)\n+    else:\n+        raise RuntimeError(\"Unsupported input type: \", type(inputs).__name__)\n+\n+\n+class CheckpointFunction(torch.autograd.Function):\n+\n+    @staticmethod\n+    def forward(ctx, run_function, *args):\n+        ctx.run_function = run_function\n+        ctx.save_for_backward(*args)\n+        with torch.no_grad():\n+            outputs = run_function(*args)\n+        return outputs\n+\n+    @staticmethod\n+    def backward(ctx, *args):\n+        assert (torch.autograd.is_checkpoint_valid()), \\\n+            \"Checkpointing is not compatible with .grad(), please use .backward() if possible\"\n+        inputs = ctx.saved_tensors\n+        inputs_list = detach_variable(inputs)\n+        with torch.enable_grad():\n+            outputs = ctx.run_function(*inputs_list)\n+\n+        if isinstance(outputs, tuple):\n+            output_list = list(outputs)\n+        elif torch.is_tensor(outputs):\n+            output_list = [outputs]", "path": "torch/utils/checkpoint.py", "position": null, "original_position": 36, "commit_id": "37ee79fe45bdcfd2fb70eccc146369d6c765137e", "original_commit_id": "718c291acc8942ab8ffee2803b475372c1c300a3", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "There's no reason why we have to force outputs to be a list. It's even better to keep them as a tuple. It's enough to do `if torch.is_tensor(output): outputs = (outputs,)`.", "created_at": "2018-04-04T10:50:14Z", "updated_at": "2018-11-23T15:41:38Z", "html_url": "https://github.com/pytorch/pytorch/pull/4594#discussion_r179098217", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4594", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/179098217"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/4594#discussion_r179098217"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4594"}}, "body_html": "<p>There's no reason why we have to force outputs to be a list. It's even better to keep them as a tuple. It's enough to do <code>if torch.is_tensor(output): outputs = (outputs,)</code>.</p>", "body_text": "There's no reason why we have to force outputs to be a list. It's even better to keep them as a tuple. It's enough to do if torch.is_tensor(output): outputs = (outputs,)."}