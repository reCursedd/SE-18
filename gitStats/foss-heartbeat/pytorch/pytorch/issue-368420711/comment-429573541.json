{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/429573541", "html_url": "https://github.com/pytorch/pytorch/issues/12506#issuecomment-429573541", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/12506", "id": 429573541, "node_id": "MDEyOklzc3VlQ29tbWVudDQyOTU3MzU0MQ==", "user": {"login": "goldsborough", "id": 6429851, "node_id": "MDQ6VXNlcjY0Mjk4NTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/6429851?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goldsborough", "html_url": "https://github.com/goldsborough", "followers_url": "https://api.github.com/users/goldsborough/followers", "following_url": "https://api.github.com/users/goldsborough/following{/other_user}", "gists_url": "https://api.github.com/users/goldsborough/gists{/gist_id}", "starred_url": "https://api.github.com/users/goldsborough/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goldsborough/subscriptions", "organizations_url": "https://api.github.com/users/goldsborough/orgs", "repos_url": "https://api.github.com/users/goldsborough/repos", "events_url": "https://api.github.com/users/goldsborough/events{/privacy}", "received_events_url": "https://api.github.com/users/goldsborough/received_events", "type": "User", "site_admin": false}, "created_at": "2018-10-13T20:39:22Z", "updated_at": "2018-10-13T20:39:22Z", "author_association": "CONTRIBUTOR", "body_html": "<p>For reference, this is the C++ extension I had in my slides at the devcon:</p>\n<pre><code>#include &lt;opencv2/opencv.hpp&gt;\n#include &lt;torch/extension.h&gt;\n\nat::Tensor compute(at::Tensor x, at::Tensor w) {\n  cv::Mat input(x.size(0), x.size(1), CV_32FC1, x.data&lt;float&gt;());\n  cv::Mat warp(3, 3, CV_32FC1, w.data&lt;float&gt;());\n\n  cv::Mat output;\n  cv::warpPerspective(input, output, warp, {64, 64});\n\n  return torch::from_blob(output.ptr&lt;float&gt;(), {64, 64}).clone();\n}\n</code></pre>\n<p>I think the order in which you want to convert is inverted, but maybe it's useful :)</p>", "body_text": "For reference, this is the C++ extension I had in my slides at the devcon:\n#include <opencv2/opencv.hpp>\n#include <torch/extension.h>\n\nat::Tensor compute(at::Tensor x, at::Tensor w) {\n  cv::Mat input(x.size(0), x.size(1), CV_32FC1, x.data<float>());\n  cv::Mat warp(3, 3, CV_32FC1, w.data<float>());\n\n  cv::Mat output;\n  cv::warpPerspective(input, output, warp, {64, 64});\n\n  return torch::from_blob(output.ptr<float>(), {64, 64}).clone();\n}\n\nI think the order in which you want to convert is inverted, but maybe it's useful :)", "body": "For reference, this is the C++ extension I had in my slides at the devcon:\r\n\r\n```\r\n#include <opencv2/opencv.hpp>\r\n#include <torch/extension.h>\r\n\r\nat::Tensor compute(at::Tensor x, at::Tensor w) {\r\n  cv::Mat input(x.size(0), x.size(1), CV_32FC1, x.data<float>());\r\n  cv::Mat warp(3, 3, CV_32FC1, w.data<float>());\r\n\r\n  cv::Mat output;\r\n  cv::warpPerspective(input, output, warp, {64, 64});\r\n\r\n  return torch::from_blob(output.ptr<float>(), {64, 64}).clone();\r\n}\r\n```\r\n\r\nI think the order in which you want to convert is inverted, but maybe it's useful :) "}