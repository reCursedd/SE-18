{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/429906599", "html_url": "https://github.com/pytorch/pytorch/issues/12506#issuecomment-429906599", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/12506", "id": 429906599, "node_id": "MDEyOklzc3VlQ29tbWVudDQyOTkwNjU5OQ==", "user": {"login": "zeryx", "id": 1892175, "node_id": "MDQ6VXNlcjE4OTIxNzU=", "avatar_url": "https://avatars1.githubusercontent.com/u/1892175?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zeryx", "html_url": "https://github.com/zeryx", "followers_url": "https://api.github.com/users/zeryx/followers", "following_url": "https://api.github.com/users/zeryx/following{/other_user}", "gists_url": "https://api.github.com/users/zeryx/gists{/gist_id}", "starred_url": "https://api.github.com/users/zeryx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zeryx/subscriptions", "organizations_url": "https://api.github.com/users/zeryx/orgs", "repos_url": "https://api.github.com/users/zeryx/repos", "events_url": "https://api.github.com/users/zeryx/events{/privacy}", "received_events_url": "https://api.github.com/users/zeryx/received_events", "type": "User", "site_admin": false}, "created_at": "2018-10-15T15:43:22Z", "updated_at": "2018-10-15T15:43:22Z", "author_association": "NONE", "body_html": "<p>Thanks for the help there <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=6429851\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/goldsborough\">@goldsborough</a>! Very interesting point about tensor ownership - I assumed it was a consumer, but that would be counter to many pytorch principles wrt tensors heh.</p>\n<p>On the output end, say I pass in a <code>cv::Mat</code> like what I did above, and perform some kind of operation to the tensor. If I wanted to get access to that tensor and use it to render as an RGB image, would I interact with that <code>cv::Mat</code> I used to load &amp; process the input image in the first place since the blob was never cloned? Or is there another process here to convert the <code>at::Tensor</code> back into something I could pass to openCV to save or view the output as an image?</p>", "body_text": "Thanks for the help there @goldsborough! Very interesting point about tensor ownership - I assumed it was a consumer, but that would be counter to many pytorch principles wrt tensors heh.\nOn the output end, say I pass in a cv::Mat like what I did above, and perform some kind of operation to the tensor. If I wanted to get access to that tensor and use it to render as an RGB image, would I interact with that cv::Mat I used to load & process the input image in the first place since the blob was never cloned? Or is there another process here to convert the at::Tensor back into something I could pass to openCV to save or view the output as an image?", "body": "Thanks for the help there @goldsborough! Very interesting point about tensor ownership - I assumed it was a consumer, but that would be counter to many pytorch principles wrt tensors heh.  \r\n\r\nOn the output end, say I pass in a `cv::Mat` like what I did above, and perform some kind of operation to the tensor. If I wanted to get access to that tensor and use it to render as an RGB image, would I interact with that `cv::Mat` I used to load & process the input image in the first place since the blob was never cloned? Or is there another process here to convert the `at::Tensor` back into something I could pass to openCV to save or view the output as an image?\r\n"}