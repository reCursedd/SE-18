{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/349236875", "html_url": "https://github.com/pytorch/pytorch/issues/3867#issuecomment-349236875", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/3867", "id": 349236875, "node_id": "MDEyOklzc3VlQ29tbWVudDM0OTIzNjg3NQ==", "user": {"login": "qbx2", "id": 5977817, "node_id": "MDQ6VXNlcjU5Nzc4MTc=", "avatar_url": "https://avatars1.githubusercontent.com/u/5977817?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qbx2", "html_url": "https://github.com/qbx2", "followers_url": "https://api.github.com/users/qbx2/followers", "following_url": "https://api.github.com/users/qbx2/following{/other_user}", "gists_url": "https://api.github.com/users/qbx2/gists{/gist_id}", "starred_url": "https://api.github.com/users/qbx2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qbx2/subscriptions", "organizations_url": "https://api.github.com/users/qbx2/orgs", "repos_url": "https://api.github.com/users/qbx2/repos", "events_url": "https://api.github.com/users/qbx2/events{/privacy}", "received_events_url": "https://api.github.com/users/qbx2/received_events", "type": "User", "site_admin": false}, "created_at": "2017-12-05T08:51:41Z", "updated_at": "2017-12-05T08:57:20Z", "author_association": "CONTRIBUTOR", "body_html": "<p>In result, what I suggest is a simple utility function, like (pseudocode):</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">calc_pad_conv1d</span>(<span class=\"pl-smi\">width</span>, <span class=\"pl-smi\">padding</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>same<span class=\"pl-pds\">'</span></span>, <span class=\"pl-smi\">check_symmetric</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>, ... &lt;params that conv1d has&gt;):\n    shape <span class=\"pl-k\">=</span> <span class=\"pl-k\">&lt;</span>calculate padding<span class=\"pl-k\">&gt;</span>\n\n    <span class=\"pl-k\">assert</span> <span class=\"pl-k\">not</span> check_symmetric <span class=\"pl-k\">or</span> <span class=\"pl-k\">&lt;</span>shape <span class=\"pl-k\">is</span> symmetric<span class=\"pl-k\">&gt;</span>, \\\n        <span class=\"pl-s\"><span class=\"pl-pds\">'</span>Calculated padding shape is asymmetric, which is not supported by conv1d. <span class=\"pl-pds\">'</span></span> \\ \n        <span class=\"pl-s\"><span class=\"pl-pds\">'</span>If you just want to get the value, consider using check_symmetric=False.<span class=\"pl-pds\">'</span></span>\n\n    <span class=\"pl-k\">return</span> shape\n\n\nwidth <span class=\"pl-k\">=</span> <span class=\"pl-c1\">100</span>  <span class=\"pl-c\"><span class=\"pl-c\">#</span> for example</span>\npadding <span class=\"pl-k\">=</span> calc_pad_conv1d(width, <span class=\"pl-c1\">...</span>)\nm <span class=\"pl-k\">=</span> nn.Conv1d(<span class=\"pl-c1\">...</span>, <span class=\"pl-v\">padding</span><span class=\"pl-k\">=</span>padding)</pre></div>\n<p>Also, The function could be used with <code>F.pad</code> in user's favor.</p>", "body_text": "In result, what I suggest is a simple utility function, like (pseudocode):\ndef calc_pad_conv1d(width, padding='same', check_symmetric=True, ... <params that conv1d has>):\n    shape = <calculate padding>\n\n    assert not check_symmetric or <shape is symmetric>, \\\n        'Calculated padding shape is asymmetric, which is not supported by conv1d. ' \\ \n        'If you just want to get the value, consider using check_symmetric=False.'\n\n    return shape\n\n\nwidth = 100  # for example\npadding = calc_pad_conv1d(width, ...)\nm = nn.Conv1d(..., padding=padding)\nAlso, The function could be used with F.pad in user's favor.", "body": "In result, what I suggest is a simple utility function, like (pseudocode):\r\n```python\r\ndef calc_pad_conv1d(width, padding='same', check_symmetric=True, ... <params that conv1d has>):\r\n    shape = <calculate padding>\r\n\r\n    assert not check_symmetric or <shape is symmetric>, \\\r\n        'Calculated padding shape is asymmetric, which is not supported by conv1d. ' \\ \r\n        'If you just want to get the value, consider using check_symmetric=False.'\r\n\r\n    return shape\r\n\r\n\r\nwidth = 100  # for example\r\npadding = calc_pad_conv1d(width, ...)\r\nm = nn.Conv1d(..., padding=padding)\r\n```\r\n\r\nAlso, The function could be used with `F.pad` in user's favor.\r\n"}