{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/349337538", "html_url": "https://github.com/pytorch/pytorch/issues/3867#issuecomment-349337538", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/3867", "id": 349337538, "node_id": "MDEyOklzc3VlQ29tbWVudDM0OTMzNzUzOA==", "user": {"login": "qbx2", "id": 5977817, "node_id": "MDQ6VXNlcjU5Nzc4MTc=", "avatar_url": "https://avatars1.githubusercontent.com/u/5977817?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qbx2", "html_url": "https://github.com/qbx2", "followers_url": "https://api.github.com/users/qbx2/followers", "following_url": "https://api.github.com/users/qbx2/following{/other_user}", "gists_url": "https://api.github.com/users/qbx2/gists{/gist_id}", "starred_url": "https://api.github.com/users/qbx2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qbx2/subscriptions", "organizations_url": "https://api.github.com/users/qbx2/orgs", "repos_url": "https://api.github.com/users/qbx2/repos", "events_url": "https://api.github.com/users/qbx2/events{/privacy}", "received_events_url": "https://api.github.com/users/qbx2/received_events", "type": "User", "site_admin": false}, "created_at": "2017-12-05T15:25:14Z", "updated_at": "2017-12-06T02:10:17Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=9110200\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/fmassa\">@fmassa</a> Yes, you're right. It may be inefficient to calculate the padding on every <code>forward()</code>.</p>\n<p>However, my proposal is NOT to calculate the padding every <code>forward()</code> call. A researcher (developer) may expect the sizes of images to <code>nn.Conv2d</code> before runtime. And if he/she wants the 'same' padding, he/she can use the function to calculate required padding to mimic 'SAME'.</p>\n<p>For example, think the case that a researcher has images with 200x200, 300x300, 400x400. Then he/she can calculate paddings for the three cases in the initialization phase and just pass the images to <code>F.pad()</code> with the corresponding padding. Or he/she just change the padding field of <code>nn.Conv2d</code> before the <code>forward()</code> call, either. Refer to this:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">import</span> torch\n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">import</span> torch.nn <span class=\"pl-k\">as</span> nn\n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">from</span> torch.autograd <span class=\"pl-k\">import</span> Variable\n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> m <span class=\"pl-k\">=</span> nn.Conv2d(<span class=\"pl-c1\">1</span>,<span class=\"pl-c1\">1</span>,<span class=\"pl-c1\">1</span>)\n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> m(Variable(torch.randn(<span class=\"pl-c1\">1</span>,<span class=\"pl-c1\">1</span>,<span class=\"pl-c1\">2</span>,<span class=\"pl-c1\">2</span>))).shape\ntorch.Size([<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">2</span>])\n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> m.padding <span class=\"pl-k\">=</span> (<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>)\n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> m(Variable(torch.randn(<span class=\"pl-c1\">1</span>,<span class=\"pl-c1\">1</span>,<span class=\"pl-c1\">2</span>,<span class=\"pl-c1\">2</span>))).shape\ntorch.Size([<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">4</span>, <span class=\"pl-c1\">4</span>])</pre></div>\n<p>Yes, <strong>I just want to add the \"padding calculating utility function\" in pytorch core.</strong></p>\n<p>When the researcher wants dependent padding on each input image size, he/she can combine the function with <code>F.pad()</code> before passing the image to <code>nn.Conv2d</code>. <strong>I want to let the code writer decide whether to pad the inputs on every <code>forward()</code> call or not.</strong></p>", "body_text": "@fmassa Yes, you're right. It may be inefficient to calculate the padding on every forward().\nHowever, my proposal is NOT to calculate the padding every forward() call. A researcher (developer) may expect the sizes of images to nn.Conv2d before runtime. And if he/she wants the 'same' padding, he/she can use the function to calculate required padding to mimic 'SAME'.\nFor example, think the case that a researcher has images with 200x200, 300x300, 400x400. Then he/she can calculate paddings for the three cases in the initialization phase and just pass the images to F.pad() with the corresponding padding. Or he/she just change the padding field of nn.Conv2d before the forward() call, either. Refer to this:\n>>> import torch\n>>> import torch.nn as nn\n>>> from torch.autograd import Variable\n>>> m = nn.Conv2d(1,1,1)\n>>> m(Variable(torch.randn(1,1,2,2))).shape\ntorch.Size([1, 1, 2, 2])\n>>> m.padding = (1, 1)\n>>> m(Variable(torch.randn(1,1,2,2))).shape\ntorch.Size([1, 1, 4, 4])\nYes, I just want to add the \"padding calculating utility function\" in pytorch core.\nWhen the researcher wants dependent padding on each input image size, he/she can combine the function with F.pad() before passing the image to nn.Conv2d. I want to let the code writer decide whether to pad the inputs on every forward() call or not.", "body": "@fmassa Yes, you're right. It may be inefficient to calculate the padding on every `forward()`.\r\n\r\nHowever, my proposal is NOT to calculate the padding every `forward()` call. A researcher (developer) may expect the sizes of images to `nn.Conv2d` before runtime. And if he/she wants the 'same' padding, he/she can use the function to calculate required padding to mimic 'SAME'.\r\n\r\nFor example, think the case that a researcher has images with 200x200, 300x300, 400x400. Then he/she can calculate paddings for the three cases in the initialization phase and just pass the images to `F.pad()` with the corresponding padding. Or he/she just change the padding field of `nn.Conv2d` before the `forward()` call, either. Refer to this:\r\n\r\n```python\r\n>>> import torch\r\n>>> import torch.nn as nn\r\n>>> from torch.autograd import Variable\r\n>>> m = nn.Conv2d(1,1,1)\r\n>>> m(Variable(torch.randn(1,1,2,2))).shape\r\ntorch.Size([1, 1, 2, 2])\r\n>>> m.padding = (1, 1)\r\n>>> m(Variable(torch.randn(1,1,2,2))).shape\r\ntorch.Size([1, 1, 4, 4])\r\n```\r\n\r\nYes, **I just want to add the \"padding calculating utility function\" in pytorch core.**\r\n\r\nWhen the researcher wants dependent padding on each input image size, he/she can combine the function with `F.pad()` before passing the image to `nn.Conv2d`. **I want to let the code writer decide whether to pad the inputs on every `forward()` call or not.**\r\n"}