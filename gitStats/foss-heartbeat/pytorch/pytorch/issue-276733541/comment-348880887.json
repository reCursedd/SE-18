{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/348880887", "html_url": "https://github.com/pytorch/pytorch/issues/3867#issuecomment-348880887", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/3867", "id": 348880887, "node_id": "MDEyOklzc3VlQ29tbWVudDM0ODg4MDg4Nw==", "user": {"login": "qbx2", "id": 5977817, "node_id": "MDQ6VXNlcjU5Nzc4MTc=", "avatar_url": "https://avatars1.githubusercontent.com/u/5977817?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qbx2", "html_url": "https://github.com/qbx2", "followers_url": "https://api.github.com/users/qbx2/followers", "following_url": "https://api.github.com/users/qbx2/following{/other_user}", "gists_url": "https://api.github.com/users/qbx2/gists{/gist_id}", "starred_url": "https://api.github.com/users/qbx2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qbx2/subscriptions", "organizations_url": "https://api.github.com/users/qbx2/orgs", "repos_url": "https://api.github.com/users/qbx2/repos", "events_url": "https://api.github.com/users/qbx2/events{/privacy}", "received_events_url": "https://api.github.com/users/qbx2/received_events", "type": "User", "site_admin": false}, "created_at": "2017-12-04T07:28:39Z", "updated_at": "2017-12-05T08:56:34Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=9110200\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/fmassa\">@fmassa</a>, what I intended was to calculate \"constant\" padding shape in <code>__init__()</code> using <code>nn.CalcPadConv*d()</code>. As you said, this way won't just work when calculated padding is odd. Therefore, it is needed for <code>F.pad</code> layer to be added, or, support of <code>F.conv*d</code> for odd paddings should help.</p>\n<p>EDIT: Then what I suggested should be a function and placed in,  say, torch.nn.utils or torch.utils.</p>", "body_text": "@fmassa, what I intended was to calculate \"constant\" padding shape in __init__() using nn.CalcPadConv*d(). As you said, this way won't just work when calculated padding is odd. Therefore, it is needed for F.pad layer to be added, or, support of F.conv*d for odd paddings should help.\nEDIT: Then what I suggested should be a function and placed in,  say, torch.nn.utils or torch.utils.", "body": "@fmassa, what I intended was to calculate \"constant\" padding shape in `__init__()` using `nn.CalcPadConv*d()`. As you said, this way won't just work when calculated padding is odd. Therefore, it is needed for `F.pad` layer to be added, or, support of `F.conv*d` for odd paddings should help.\r\n\r\nEDIT: Then what I suggested should be a function and placed in,  say, torch.nn.utils or torch.utils."}