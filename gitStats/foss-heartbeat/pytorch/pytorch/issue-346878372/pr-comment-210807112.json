{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/210807112", "pull_request_review_id": 147100344, "id": 210807112, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMDgwNzExMg==", "diff_hunk": "@@ -105,53 +103,80 @@ class IDeepFeeder : public BlobFeederBase {\n       return itensor::data_type::data_undef;\n   }\n \n- public:\n-   void FeedTensor(\n-       const DeviceOption& option,\n-       PyArrayObject *original_array,\n-       itensor *tensor) {\n-     PyArrayObject *array = PyArray_GETCONTIGUOUS(original_array);\n-     auto g = MakeGuard([&]() {Py_XDECREF(array); });\n-\n-     const auto npy_type = PyArray_TYPE(array);\n-     const TypeMeta& meta = NumpyTypeToCaffe(npy_type);\n-     CAFFE_ENFORCE(\n+public:\n+  void FeedTensor(\n+      const DeviceOption &option,\n+      PyArrayObject *original_array,\n+      itensor *tensor) {\n+    PyArrayObject *array = PyArray_GETCONTIGUOUS(original_array);\n+    auto g = MakeGuard([&]() { Py_XDECREF(array); });\n+    const auto npy_type = PyArray_TYPE(array);\n+    const TypeMeta &meta = NumpyTypeToCaffe(npy_type);\n+    CAFFE_ENFORCE(\n         meta.id() != TypeIdentifier::uninitialized(),\n         \"This numpy data type is not supported: \",\n-        PyArray_TYPE(array),\n-        \".\");\n-\n-     int ndim = PyArray_NDIM(array);\n-     npy_intp* npy_dims = PyArray_DIMS(array);\n-\n-     itensor::dims adims;\n-     for (int i = 0; i < ndim; i++) {\n-       adims.push_back(static_cast<itensor::dims::value_type>(\n-             npy_dims[i]));\n-     }\n-\n-     switch (npy_type) {\n-      case NPY_OBJECT:\n-      case NPY_UNICODE:\n-        CAFFE_THROW(\"IDeep doesn't support string\");\n-        break;\n-      default:\n-        auto type = type_transform(meta);\n+        PyArray_TYPE(array), \".\");\n+\n+    int ndim = PyArray_NDIM(array);\n+    npy_intp *npy_dims = PyArray_DIMS(array);\n+\n+    itensor::dims adims;\n+    for (int i = 0; i < ndim; i++) {\n+      adims.push_back(static_cast<itensor::dims::value_type>(npy_dims[i]));\n+    }\n+\n+    switch (npy_type) {\n+    case NPY_OBJECT:\n+    case NPY_UNICODE:\n+      CAFFE_THROW(\"IDeep doesn't support string\");\n+      break;\n+    default:\n+      auto type = type_transform(meta);\n+      if (tensor->get_dims() != adims || type != tensor->get_data_type()) {\n         tensor->resize(adims, type);\n-        tensor->reorder_from(adims, type,\n-            static_cast<void *>(PyArray_DATA(array)));\n-     }\n-   }\n-\n-   void Feed(const DeviceOption& option, PyArrayObject* original_array,\n-       Blob* blob) {\n-      try {\n+      }\n+      tensor->reorder_from(adims, type,\n+                           static_cast<void *>(PyArray_DATA(array)));\n+    }\n+  }\n+\n+  bool ZeroDim(PyArrayObject *array) {\n+    int ndim = PyArray_NDIM(array);\n+    npy_intp *npy_dims = PyArray_DIMS(array);\n+    if (ndim == 0) {\n+      return true;\n+    }\n+    for (int i = 0; i < ndim; i++) {", "path": "caffe2/python/pybind_state_ideep.cc", "position": null, "original_position": 188, "commit_id": "406f1bafc343417b64ffbe7fb5ea93570e645b06", "original_commit_id": "0ede18024b59e054ecb33c736d98f4db57de1fb6", "user": {"login": "BIT-silence", "id": 3357667, "node_id": "MDQ6VXNlcjMzNTc2Njc=", "avatar_url": "https://avatars0.githubusercontent.com/u/3357667?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BIT-silence", "html_url": "https://github.com/BIT-silence", "followers_url": "https://api.github.com/users/BIT-silence/followers", "following_url": "https://api.github.com/users/BIT-silence/following{/other_user}", "gists_url": "https://api.github.com/users/BIT-silence/gists{/gist_id}", "starred_url": "https://api.github.com/users/BIT-silence/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BIT-silence/subscriptions", "organizations_url": "https://api.github.com/users/BIT-silence/orgs", "repos_url": "https://api.github.com/users/BIT-silence/repos", "events_url": "https://api.github.com/users/BIT-silence/events{/privacy}", "received_events_url": "https://api.github.com/users/BIT-silence/received_events", "type": "User", "site_admin": false}, "body": "return std::find(npy_dims, npy_dims + ndim, 0) != npy_dims + ndim;", "created_at": "2018-08-17T05:22:09Z", "updated_at": "2018-11-23T15:49:35Z", "html_url": "https://github.com/pytorch/pytorch/pull/10157#discussion_r210807112", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/10157", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/210807112"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/10157#discussion_r210807112"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/10157"}}, "body_html": "<p>return std::find(npy_dims, npy_dims + ndim, 0) != npy_dims + ndim;</p>", "body_text": "return std::find(npy_dims, npy_dims + ndim, 0) != npy_dims + ndim;"}