{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/368189942", "html_url": "https://github.com/pytorch/pytorch/issues/5349#issuecomment-368189942", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/5349", "id": 368189942, "node_id": "MDEyOklzc3VlQ29tbWVudDM2ODE4OTk0Mg==", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "created_at": "2018-02-24T02:19:59Z", "updated_at": "2018-02-24T02:19:59Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=4583066\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/apaszke\">@apaszke</a> Given that <code>no_grad</code> is coming, wouldn't it be feasible to also extend this with <code>only_grad(list of variables)</code> which has the same effect as setting <code>requires_grad=True</code> for the listed variables, and False for everything else? Then an optimizer can, in fact, \"just take care of it\" for you.</p>", "body_text": "@apaszke Given that no_grad is coming, wouldn't it be feasible to also extend this with only_grad(list of variables) which has the same effect as setting requires_grad=True for the listed variables, and False for everything else? Then an optimizer can, in fact, \"just take care of it\" for you.", "body": "@apaszke Given that `no_grad` is coming, wouldn't it be feasible to also extend this with `only_grad(list of variables)` which has the same effect as setting `requires_grad=True` for the listed variables, and False for everything else? Then an optimizer can, in fact, \"just take care of it\" for you."}