{"url": "https://api.github.com/repos/pytorch/pytorch/issues/6047", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/6047/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/6047/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/6047/events", "html_url": "https://github.com/pytorch/pytorch/issues/6047", "id": 309082758, "node_id": "MDU6SXNzdWUzMDkwODI3NTg=", "number": 6047, "title": "torch.nn.utils.clip_grad is fine", "user": {"login": "jiamenguk", "id": 19616679, "node_id": "MDQ6VXNlcjE5NjE2Njc5", "avatar_url": "https://avatars2.githubusercontent.com/u/19616679?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jiamenguk", "html_url": "https://github.com/jiamenguk", "followers_url": "https://api.github.com/users/jiamenguk/followers", "following_url": "https://api.github.com/users/jiamenguk/following{/other_user}", "gists_url": "https://api.github.com/users/jiamenguk/gists{/gist_id}", "starred_url": "https://api.github.com/users/jiamenguk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jiamenguk/subscriptions", "organizations_url": "https://api.github.com/users/jiamenguk/orgs", "repos_url": "https://api.github.com/users/jiamenguk/repos", "events_url": "https://api.github.com/users/jiamenguk/events{/privacy}", "received_events_url": "https://api.github.com/users/jiamenguk/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-03-27T18:28:23Z", "updated_at": "2018-03-27T18:30:54Z", "closed_at": "2018-03-27T18:29:02Z", "author_association": "NONE", "body_html": "<p><del>I was using the <a href=\"https://github.com/pytorch/pytorch/blob/master/torch/nn/utils/clip_grad.py\">clip_grad in torch.nn.utils</a>, which normalises the gradients for each of the parameters by the sum of a power norm of the gradient, however the code itself looks something like this:</del></p>\n<pre lang=\"total_norm\" data-meta=\"= 0\"><code>for p in parameters:\n    param_norm = p.grad.data.norm(norm_type)\n    total_norm += param_norm ** norm_type\ntotal_norm = total_norm ** (1. / norm_type)\n</code></pre>\n<p><del>Where <code>norm_type</code> is the power of the norm, such as 2 for L2-norms. Maybe I've had too much coffee today, but that looks like the norm is applied twice before being added to the total norm?</del></p>", "body_text": "I was using the clip_grad in torch.nn.utils, which normalises the gradients for each of the parameters by the sum of a power norm of the gradient, however the code itself looks something like this:\nfor p in parameters:\n    param_norm = p.grad.data.norm(norm_type)\n    total_norm += param_norm ** norm_type\ntotal_norm = total_norm ** (1. / norm_type)\n\nWhere norm_type is the power of the norm, such as 2 for L2-norms. Maybe I've had too much coffee today, but that looks like the norm is applied twice before being added to the total norm?", "body": "~~I was using the [clip_grad in torch.nn.utils](https://github.com/pytorch/pytorch/blob/master/torch/nn/utils/clip_grad.py), which normalises the gradients for each of the parameters by the sum of a power norm of the gradient, however the code itself looks something like this:~~\r\n\r\n```total_norm = 0\r\nfor p in parameters:\r\n    param_norm = p.grad.data.norm(norm_type)\r\n    total_norm += param_norm ** norm_type\r\ntotal_norm = total_norm ** (1. / norm_type)\r\n```\r\n\r\n~~Where `norm_type` is the power of the norm, such as 2 for L2-norms. Maybe I've had too much coffee today, but that looks like the norm is applied twice before being added to the total norm?~~"}