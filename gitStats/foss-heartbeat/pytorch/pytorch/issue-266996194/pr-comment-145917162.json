{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/145917162", "pull_request_review_id": 70784886, "id": 145917162, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0NTkxNzE2Mg==", "diff_hunk": "@@ -60,11 +60,34 @@ inline std::vector<VariableFlags> getVarFlags(const variable_list& vars) {\n // Should a function which takes 'vars' as inputs be traced?\n // It sufficies for ONE variable to be tracing: any \"untraced\" variables\n // are treated as constants.\n-inline bool isTracing(const variable_list& vars) {\n+//\n+// TODO: This code lives in the hotpath; make sure it is fast\n+inline bool isTracing(const Variable& var) {\n+  if (!var.defined() || !var.tracing_state()) return false;\n+  return std::any_of(var.tracing_state()->begin(), var.tracing_state()->end(), detail::isElemActive);\n+}\n+\n+inline bool isTracing(std::initializer_list<Variable> vars) {\n+  // Reference to avoid refcount bump\n   for (auto& var : vars) {\n-    if (!var.defined() || !var.tracing_state()) continue;\n-    if (std::any_of(var.tracing_state()->begin(), var.tracing_state()->end(), detail::isElemActive))\n-      return true;\n+    if (isTracing(var)) return true;\n+  }\n+  return false;\n+}\n+\n+inline bool isTracing(const at::ArrayRef<Variable>& vars) {\n+  // Reference to avoid refcount bump\n+  for (const Variable& var : vars) {\n+    if (isTracing(var)) return true;\n+  }\n+  return false;\n+}\n+\n+inline bool isTracing(const at::TensorList& vars) {\n+  // NB: This can't be a ref, because we need to actually implicit-construct a\n+  // Variable.  That means a refcount bump does happen here (sigh).", "path": "torch/csrc/jit/tracer.h", "position": 33, "original_position": 33, "commit_id": "06e2ed468ab4dad0749fe1f7b92d83127321895b", "original_commit_id": "d52b8e833ea59217b1a70b8f95010eb7d103aab7", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "You could always `static_cast` tensors from `vars` to avoid refcounting cost. It's not any more dangerous than what the `Variable` constructor does anyway :blush:", "created_at": "2017-10-20T09:27:36Z", "updated_at": "2018-11-23T15:35:34Z", "html_url": "https://github.com/pytorch/pytorch/pull/3189#discussion_r145917162", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/3189", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/145917162"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/3189#discussion_r145917162"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/3189"}}, "body_html": "<p>You could always <code>static_cast</code> tensors from <code>vars</code> to avoid refcounting cost. It's not any more dangerous than what the <code>Variable</code> constructor does anyway <g-emoji class=\"g-emoji\" alias=\"blush\" fallback-src=\"https://assets-cdn.github.com/images/icons/emoji/unicode/1f60a.png\">\ud83d\ude0a</g-emoji></p>", "body_text": "You could always static_cast tensors from vars to avoid refcounting cost. It's not any more dangerous than what the Variable constructor does anyway \ud83d\ude0a"}