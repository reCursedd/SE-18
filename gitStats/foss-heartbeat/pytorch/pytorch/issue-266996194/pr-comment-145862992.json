{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/145862992", "pull_request_review_id": 70725518, "id": 145862992, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0NTg2Mjk5Mg==", "diff_hunk": "@@ -149,20 +149,73 @@ def _newNode(self, opname, *args, **kwargs):\n     return n\n \n \n-def _op(self, opname, *args, **kwargs):\n+def _op(self, opname, *raw_args, **kwargs):\n+    outputs = kwargs.pop('outputs', 1)\n+    def const_if_tensor(arg):\n+        if isinstance(arg, torch._C.Node):\n+            return arg\n+        else:\n+            return self.op(\"Constant\", value_z=arg)\n+    args = list(const_if_tensor(arg) for arg in raw_args)\n+    n = self.appendNode(_newNode(self, opname, *args, **kwargs))\n+    if outputs == 1:\n+        return n\n+    return tuple(self.appendNode(self.createSelect(n, i)) for i in _range(outputs))\n+\n+\n+# Note [Export inplace]\n+# ~~~~~~~~~~~~~~~~~~~~~\n+# In abstract, it would be better for us to export inplace annotations,\n+# than to not export them, since it is useful information that can\n+# help the target of an ONNX export export more efficiently.  However,\n+# ONNX doesn't currently formalize inplace.  Fortunately, it's sound to drop\n+# inplace annotations, but we are losing information this way.\n+\n+\n+_current_graph = None\n+\n+\n+def run_symbolic_function(g, n, inputs):\n+    import torch.onnx.symbolic\n+    global _current_graph\n+    assert not _current_graph\n+    _current_graph = g\n+    # TODO: Monkeypatch this on Node or implement it directly in the bindings\n+    def get_node_attr(n, k):", "path": "torch/onnx/__init__.py", "position": null, "original_position": 55, "commit_id": "06e2ed468ab4dad0749fe1f7b92d83127321895b", "original_commit_id": "d52b8e833ea59217b1a70b8f95010eb7d103aab7", "user": {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, "body": "I think @apaszke  and I converged on enabling `foo[attr]` to do exactly this (`__getitem__` only). So monkey patch it if you desire.", "created_at": "2017-10-20T01:46:54Z", "updated_at": "2018-11-23T15:35:33Z", "html_url": "https://github.com/pytorch/pytorch/pull/3189#discussion_r145862992", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/3189", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/145862992"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/3189#discussion_r145862992"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/3189"}}, "body_html": "<p>I think <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=4583066\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/apaszke\">@apaszke</a>  and I converged on enabling <code>foo[attr]</code> to do exactly this (<code>__getitem__</code> only). So monkey patch it if you desire.</p>", "body_text": "I think @apaszke  and I converged on enabling foo[attr] to do exactly this (__getitem__ only). So monkey patch it if you desire."}