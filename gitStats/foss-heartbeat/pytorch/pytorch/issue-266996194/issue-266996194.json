{"url": "https://api.github.com/repos/pytorch/pytorch/issues/3189", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/3189/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/3189/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/3189/events", "html_url": "https://github.com/pytorch/pytorch/pull/3189", "id": 266996194, "node_id": "MDExOlB1bGxSZXF1ZXN0MTQ3NjcxMTQ4", "number": 3189, "title": "ONNX for C++ Autograd", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-10-19T21:32:18Z", "updated_at": "2018-11-23T15:35:37Z", "closed_at": "2017-10-20T19:38:02Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/3189", "html_url": "https://github.com/pytorch/pytorch/pull/3189", "diff_url": "https://github.com/pytorch/pytorch/pull/3189.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/3189.patch"}, "body_html": "<p>Obsoletes <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"266534268\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/3160\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/pytorch/pytorch/pull/3160/hovercard\" href=\"https://github.com/pytorch/pytorch/pull/3160\">#3160</a>.</p>\n<pre><code>Make ONNX work with new C++ autograd world.\nThe general strategy is there is a new module, torch.onnx.symbolic, which\ncontains a function for every ATen method name with the ONNX translation.\nWhile implementing this, I took the opportunity to expunge all references\nof 'g' from the public API; instead, it is managed by a global variable in\ntorch.onnx which tracks the \"current graph\".\n\nOther changes:\n\n- If you pass a Tensor to op as an argument, it will now automatically be\n  converted into a Constant ONNX node.  This lets us remove needing to\n  implement ONNX\n\n- Rename value to other, wherever there is both a Scalar and Tensor overload.\n  This way, keyword dispatch can work uniformly in both cases.\n\n- Deleted any autograd Function classes that both had a symbolic and were ported\n  to the new C++ autograd implementation.  There may still be some straggling\n  classes that didn't have symbolic.\n</code></pre>\n<p>Also has the changes, with code review fixes, for ATen tracing.</p>\n<p>We can't merge this yet because there are bugs in some C++ implementations of ATen ops.</p>", "body_text": "Obsoletes #3160.\nMake ONNX work with new C++ autograd world.\nThe general strategy is there is a new module, torch.onnx.symbolic, which\ncontains a function for every ATen method name with the ONNX translation.\nWhile implementing this, I took the opportunity to expunge all references\nof 'g' from the public API; instead, it is managed by a global variable in\ntorch.onnx which tracks the \"current graph\".\n\nOther changes:\n\n- If you pass a Tensor to op as an argument, it will now automatically be\n  converted into a Constant ONNX node.  This lets us remove needing to\n  implement ONNX\n\n- Rename value to other, wherever there is both a Scalar and Tensor overload.\n  This way, keyword dispatch can work uniformly in both cases.\n\n- Deleted any autograd Function classes that both had a symbolic and were ported\n  to the new C++ autograd implementation.  There may still be some straggling\n  classes that didn't have symbolic.\n\nAlso has the changes, with code review fixes, for ATen tracing.\nWe can't merge this yet because there are bugs in some C++ implementations of ATen ops.", "body": "Obsoletes #3160.\r\n\r\n```\r\nMake ONNX work with new C++ autograd world.\r\nThe general strategy is there is a new module, torch.onnx.symbolic, which\r\ncontains a function for every ATen method name with the ONNX translation.\r\nWhile implementing this, I took the opportunity to expunge all references\r\nof 'g' from the public API; instead, it is managed by a global variable in\r\ntorch.onnx which tracks the \"current graph\".\r\n\r\nOther changes:\r\n\r\n- If you pass a Tensor to op as an argument, it will now automatically be\r\n  converted into a Constant ONNX node.  This lets us remove needing to\r\n  implement ONNX\r\n\r\n- Rename value to other, wherever there is both a Scalar and Tensor overload.\r\n  This way, keyword dispatch can work uniformly in both cases.\r\n\r\n- Deleted any autograd Function classes that both had a symbolic and were ported\r\n  to the new C++ autograd implementation.  There may still be some straggling\r\n  classes that didn't have symbolic.\r\n```\r\n\r\nAlso has the changes, with code review fixes, for ATen tracing.\r\n\r\nWe can't merge this yet because there are bugs in some C++ implementations of ATen ops.\r\n"}