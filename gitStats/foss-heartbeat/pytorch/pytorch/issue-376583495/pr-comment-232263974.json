{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/232263974", "pull_request_review_id": 173423988, "id": 232263974, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMjI2Mzk3NA==", "diff_hunk": "@@ -5,90 +5,38 @@\n \n #include <torch/csrc/python_headers.h>\n #include <torch/csrc/utils/pybind.h>\n-#include <torch/types.h>\n-#include <torch/ordered_dict.h>\n \n-#include <iterator>\n-#include <string>\n-#include <unordered_map>\n-#include <utility>\n-#include <vector>\n+#include <memory>\n \n namespace torch {\n namespace python {\n namespace detail {\n-inline std::unordered_map<std::string, Tensor> ordered_dict_to_map(\n-    const OrderedDict<std::string, torch::Tensor>& dict) {\n-  auto pairs = dict.pairs();\n-  return {pairs.begin(), pairs.end()};\n-}\n+// The first template argument is the ModuleType we are binding, the second is\n+// the base class and the last is the holder type for the created object when\n+// going between C++ and Python.\n+template <typename ModuleType>\n+using ModulePybindClass =\n+    py::class_<ModuleType, torch::nn::Module, std::shared_ptr<ModuleType>>;\n } // namespace detail\n \n-/// Adds method bindings for a pybind11 `class_` that binds an `nn::Module`\n-/// subclass.\n-///\n-/// Say you have a pybind11 class object created with `py::class_<Net>(m,\n-/// \"Net\")`. This function will add all the necessary `.def()` calls to bind the\n-/// `nn::Module` base class' methods, such as `train()`, `eval()` etc. into\n-/// Python. The exact list of supported methods and their Python signatures are:\n-/// - `train()`\n-/// - `eval()`\n-/// - `is_training() -> bool`\n-/// - `zero_grad()`\n-/// - `cuda()`\n-/// - `cpu()`\n-/// - `parameters() -> List<Tensor>`\n-/// - `named_parameters() -> Dict<String, Tensor>`\n-/// - `buffers() -> List<Tensor>`\n-/// - `named_buffers() -> Dict<String, Tensor>`\n-template <typename M, typename... Extra>\n-py::class_<M, Extra...> add_module_bindings(py::class_<M, Extra...> module) {\n-  return module.def(\"train\", [](M& module) { module.train(); })\n-      .def(\"eval\", [](M& module) { module.eval(); })\n-      .def(\"clone\", [](M& module) { return module.clone(); })\n-      .def_property_readonly(\n-          \"training\", [](M& module) { return module.is_training(); })\n-      .def(\"zero_grad\", [](M& module) { module.zero_grad(); })\n-      .def(\"cuda\", [](M& module) { module.to(torch::kCUDA); })\n-      .def(\"cpu\", [](M& module) { module.to(torch::kCPU); })\n-      .def(\"parameters\", [](M& module) { return module.parameters(); })\n-      .def(\n-          \"named_parameters\",\n-          [](M& module) {\n-            return detail::ordered_dict_to_map(module.named_parameters());\n-          })\n-      .def(\"buffers\", [](M& module) { return module.buffers(); })\n-      .def(\"named_buffers\", [](M& module) {\n-        return detail::ordered_dict_to_map(module.named_buffers());\n-      });\n+template <typename ModuleType>\n+torch::disable_if_t<\n+    torch::detail::has_forward<ModuleType>::value,\n+    detail::ModulePybindClass<ModuleType>>\n+bind_module(py::module module, const char* name) {\n+  return {module, name};\n }\n \n-/// Creates a pybind11 class object for an `nn::Module` subclass type and adds\n-/// default bindings.\n-///\n-/// After adding the default bindings, the class object is returned, such that\n-/// you can add more bindings.\n-///\n-/// Example usage:\n-/// \\rst\n-/// .. code-block:: cpp\n-///\n-///   struct Net : torch::nn::Module {\n-///     Net(int in, int out) { }\n-///     torch::Tensor forward(torch::Tensor x) { return x; }\n-///   };\n-///\n-///   PYBIND11_MODULE(my_module, m) {\n-///     torch::python::bind_module<Net>(m, \"Net\")\n-///       .def(py::init<int, int>())\n-///       .def(\"forward\", &Net::forward);\n-///  }\n-/// \\endrst\n-template <typename M>\n-py::class_<M, std::shared_ptr<M>> bind_module(\n+template <\n+    typename ModuleType,\n+    typename =\n+        torch::enable_if_t<torch::detail::has_forward<ModuleType>::value>>\n+detail::ModulePybindClass<ModuleType> bind_module(", "path": "torch/csrc/api/include/torch/python.h", "position": 102, "original_position": 102, "commit_id": "b38180fbf8e52215fc06471dc6a0261f6d0324eb", "original_commit_id": "39a7e0b6b7de2f0d0c7da98036dad157eb87909b", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "So to expose a C++ module someone needs to call this on all of their types? Or does it work out of the box?", "created_at": "2018-11-09T14:08:53Z", "updated_at": "2018-11-23T15:54:35Z", "html_url": "https://github.com/pytorch/pytorch/pull/13481#discussion_r232263974", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/13481", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/232263974"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/13481#discussion_r232263974"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/13481"}}, "body_html": "<p>So to expose a C++ module someone needs to call this on all of their types? Or does it work out of the box?</p>", "body_text": "So to expose a C++ module someone needs to call this on all of their types? Or does it work out of the box?"}