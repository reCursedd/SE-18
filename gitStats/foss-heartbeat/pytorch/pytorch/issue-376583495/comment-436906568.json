{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/436906568", "html_url": "https://github.com/pytorch/pytorch/pull/13481#issuecomment-436906568", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/13481", "id": 436906568, "node_id": "MDEyOklzc3VlQ29tbWVudDQzNjkwNjU2OA==", "user": {"login": "dzhulgakov", "id": 17890620, "node_id": "MDQ6VXNlcjE3ODkwNjIw", "avatar_url": "https://avatars2.githubusercontent.com/u/17890620?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dzhulgakov", "html_url": "https://github.com/dzhulgakov", "followers_url": "https://api.github.com/users/dzhulgakov/followers", "following_url": "https://api.github.com/users/dzhulgakov/following{/other_user}", "gists_url": "https://api.github.com/users/dzhulgakov/gists{/gist_id}", "starred_url": "https://api.github.com/users/dzhulgakov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dzhulgakov/subscriptions", "organizations_url": "https://api.github.com/users/dzhulgakov/orgs", "repos_url": "https://api.github.com/users/dzhulgakov/repos", "events_url": "https://api.github.com/users/dzhulgakov/events{/privacy}", "received_events_url": "https://api.github.com/users/dzhulgakov/received_events", "type": "User", "site_admin": false}, "created_at": "2018-11-08T08:04:22Z", "updated_at": "2018-11-08T08:04:22Z", "author_association": "MEMBER", "body_html": "<p>This is super-cool - thanks for working on it!</p>\n<p>For the RNNG use case I believe we also need to opposite direction - embedding PythonModule (ok, TracedModule actually) inside a C++ module. In that case you have complex C++ code (parser) and want to invoke traceable python-constructed LSTM module inside.</p>\n<p>Maybe we actually don't need a proper module interop in that case and c++ functions that can take modules as args might be sufficient. But we should think that through (in particular now jit/tracing actually doesn't support module calls and instead inlines them)</p>", "body_text": "This is super-cool - thanks for working on it!\nFor the RNNG use case I believe we also need to opposite direction - embedding PythonModule (ok, TracedModule actually) inside a C++ module. In that case you have complex C++ code (parser) and want to invoke traceable python-constructed LSTM module inside.\nMaybe we actually don't need a proper module interop in that case and c++ functions that can take modules as args might be sufficient. But we should think that through (in particular now jit/tracing actually doesn't support module calls and instead inlines them)", "body": "This is super-cool - thanks for working on it!\r\n\r\nFor the RNNG use case I believe we also need to opposite direction - embedding PythonModule (ok, TracedModule actually) inside a C++ module. In that case you have complex C++ code (parser) and want to invoke traceable python-constructed LSTM module inside.\r\n\r\nMaybe we actually don't need a proper module interop in that case and c++ functions that can take modules as args might be sufficient. But we should think that through (in particular now jit/tracing actually doesn't support module calls and instead inlines them)"}