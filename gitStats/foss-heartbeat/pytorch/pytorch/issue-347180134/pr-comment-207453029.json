{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/207453029", "pull_request_review_id": 143067910, "id": 207453029, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzQ1MzAyOQ==", "diff_hunk": "@@ -221,23 +221,50 @@ def get_summarized_data(self):\n         return self\n \n \n-def _str(self):\n+def _str(self, skip_device=False):\n     if self.is_sparse:\n-        size_str = str(tuple(self.shape)).replace(' ', '')\n-        return '{} of size {} with indices:\\n{}\\nand values:\\n{}'.format(\n-            self.type(), size_str, self._indices(), self._values())\n+        size_str = str(tuple(self.shape))\n+        prefix = 'tensor('\n+        indent = len(prefix)\n+        tensor_str = 'layout={},'.format(self.layout)\n+        # indices and values need to be detached to not print their `grad_fn`s,\n+        # which are not implemented.\n+        for i, l in enumerate(_str(self._indices().detach(), skip_device=True).split('\\n')):\n+            if i == 0:\n+                tensor_str += '\\n{}indices={}'.format(' ' * indent, l)\n+                indent += len('indices=')\n+            else:\n+                tensor_str += '\\n{}{}'.format(' ' * indent, l)\n+        indent = len(prefix)\n+        tensor_str += ','\n+        for i, l in enumerate(_str(self._values().detach(), skip_device=True).split('\\n')):\n+            if i == 0:\n+                tensor_str += '\\n{}values={}'.format(' ' * indent, l)\n+                indent += len('values=')\n+            else:\n+                tensor_str += '\\n{}{}'.format(' ' * indent, l)\n+        indent = len(prefix)\n+        tensor_str += ',\\n{}size={}'.format(' ' * indent, str(tuple(self.shape)))\n+        if self.dtype != torch.get_default_dtype() and self.dtype != torch.int64:\n+            tensor_str += ',\\n{}dtype={}'.format(' ' * indent, str(self.dtype))\n+        if self.grad_fn is not None:\n+            tensor_str += ',\\n{}grad_fn=<{}>'.format(' ' * indent, type(self.grad_fn).__name__)\n+        elif self.requires_grad:\n+            tensor_str += ',\\n{}requires_grad=True'.format(' ' * indent)\n+        return prefix + tensor_str + ')'\n \n     prefix = 'tensor('\n     indent = len(prefix)\n     summarize = self.numel() > PRINT_OPTS.threshold\n \n     suffix = ''\n-    if not torch._C._is_default_type_cuda():\n-        if self.device.type == 'cuda':\n-            suffix += ', device=\\'' + str(self.device) + '\\''\n-    else:\n-        if self.device.type == 'cpu' or torch.cuda.current_device() != self.device.index:\n-            suffix += ', device=\\'' + str(self.device) + '\\''\n+    if not skip_device:", "path": "torch/_tensor_str.py", "position": null, "original_position": 51, "commit_id": "72ca0478da31a4cd50ad0bdfca1d493dceafa397", "original_commit_id": "e0eb7dd7d7cfbd58c61e7b9ddd47d59cec897717", "user": {"login": "weiyangfb", "id": 38509346, "node_id": "MDQ6VXNlcjM4NTA5MzQ2", "avatar_url": "https://avatars1.githubusercontent.com/u/38509346?v=4", "gravatar_id": "", "url": "https://api.github.com/users/weiyangfb", "html_url": "https://github.com/weiyangfb", "followers_url": "https://api.github.com/users/weiyangfb/followers", "following_url": "https://api.github.com/users/weiyangfb/following{/other_user}", "gists_url": "https://api.github.com/users/weiyangfb/gists{/gist_id}", "starred_url": "https://api.github.com/users/weiyangfb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/weiyangfb/subscriptions", "organizations_url": "https://api.github.com/users/weiyangfb/orgs", "repos_url": "https://api.github.com/users/weiyangfb/repos", "events_url": "https://api.github.com/users/weiyangfb/events{/privacy}", "received_events_url": "https://api.github.com/users/weiyangfb/received_events", "type": "User", "site_admin": false}, "body": "Does the device info get printed for sparse? Maybe add a test for it?", "created_at": "2018-08-03T06:35:36Z", "updated_at": "2018-11-23T15:48:42Z", "html_url": "https://github.com/pytorch/pytorch/pull/10181#discussion_r207453029", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/10181", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/207453029"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/10181#discussion_r207453029"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/10181"}}, "body_html": "<p>Does the device info get printed for sparse? Maybe add a test for it?</p>", "body_text": "Does the device info get printed for sparse? Maybe add a test for it?"}