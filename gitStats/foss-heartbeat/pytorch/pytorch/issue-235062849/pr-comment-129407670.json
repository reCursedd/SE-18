{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/129407670", "pull_request_review_id": 52177714, "id": 129407670, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyOTQwNzY3MA==", "diff_hunk": "@@ -406,6 +407,28 @@ def dropout(input, p=0.5, training=False, inplace=False):\n     return _functions.dropout.Dropout(p, training, inplace)(input)\n \n \n+def alpha_dropout(input, p=0.5, training=False):\n+    if p < 0 or p > 1:\n+        raise ValueError(\"dropout probability has to be between 0 and 1, \"\n+                         \"but got {}\".format(p))\n+\n+    if p == 0 or not training:\n+        return input\n+\n+    alpha = -1.7580993408473766", "path": "torch/nn/functional.py", "position": 20, "original_position": 20, "commit_id": "c06c7699168a15291b7454b8771ea9960456fe06", "original_commit_id": "c06c7699168a15291b7454b8771ea9960456fe06", "user": {"login": "fmassa", "id": 9110200, "node_id": "MDQ6VXNlcjkxMTAyMDA=", "avatar_url": "https://avatars2.githubusercontent.com/u/9110200?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fmassa", "html_url": "https://github.com/fmassa", "followers_url": "https://api.github.com/users/fmassa/followers", "following_url": "https://api.github.com/users/fmassa/following{/other_user}", "gists_url": "https://api.github.com/users/fmassa/gists{/gist_id}", "starred_url": "https://api.github.com/users/fmassa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fmassa/subscriptions", "organizations_url": "https://api.github.com/users/fmassa/orgs", "repos_url": "https://api.github.com/users/fmassa/repos", "events_url": "https://api.github.com/users/fmassa/events{/privacy}", "received_events_url": "https://api.github.com/users/fmassa/received_events", "type": "User", "site_admin": false}, "body": "I've used the value from [original implementation by the authors](https://github.com/bioinf-jku/SNNs/blob/master/selu.py#L35), which seems to be the value so that the distributions are with mean 0 and std 1 after each layer. I could add arguments to enable the user to specify the desired mean/std, but is there an use-case for that?", "created_at": "2017-07-25T19:52:35Z", "updated_at": "2018-11-23T15:34:14Z", "html_url": "https://github.com/pytorch/pytorch/pull/1775#discussion_r129407670", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/1775", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/129407670"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/1775#discussion_r129407670"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/1775"}}, "body_html": "<p>I've used the value from <a href=\"https://github.com/bioinf-jku/SNNs/blob/master/selu.py#L35\">original implementation by the authors</a>, which seems to be the value so that the distributions are with mean 0 and std 1 after each layer. I could add arguments to enable the user to specify the desired mean/std, but is there an use-case for that?</p>", "body_text": "I've used the value from original implementation by the authors, which seems to be the value so that the distributions are with mean 0 and std 1 after each layer. I could add arguments to enable the user to specify the desired mean/std, but is there an use-case for that?", "in_reply_to_id": 129406076}