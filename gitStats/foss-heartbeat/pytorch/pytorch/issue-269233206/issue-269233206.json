{"url": "https://api.github.com/repos/pytorch/pytorch/issues/3329", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/3329/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/3329/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/3329/events", "html_url": "https://github.com/pytorch/pytorch/pull/3329", "id": 269233206, "node_id": "MDExOlB1bGxSZXF1ZXN0MTQ5Mjg0NTc5", "number": 3329, "title": "Add sparseTensor.new wrapper bindings", "user": {"login": "SsnL", "id": 5674597, "node_id": "MDQ6VXNlcjU2NzQ1OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5674597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SsnL", "html_url": "https://github.com/SsnL", "followers_url": "https://api.github.com/users/SsnL/followers", "following_url": "https://api.github.com/users/SsnL/following{/other_user}", "gists_url": "https://api.github.com/users/SsnL/gists{/gist_id}", "starred_url": "https://api.github.com/users/SsnL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SsnL/subscriptions", "organizations_url": "https://api.github.com/users/SsnL/orgs", "repos_url": "https://api.github.com/users/SsnL/repos", "events_url": "https://api.github.com/users/SsnL/events{/privacy}", "received_events_url": "https://api.github.com/users/SsnL/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-10-27T20:57:27Z", "updated_at": "2017-11-13T18:51:50Z", "closed_at": "2017-10-28T14:34:09Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/3329", "html_url": "https://github.com/pytorch/pytorch/pull/3329", "diff_url": "https://github.com/pytorch/pytorch/pull/3329.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/3329.patch"}, "body_html": "<p><span class=\"issue-keyword tooltipped tooltipped-se\" aria-label=\"This pull request closes issue #3312.\">Fixes</span> <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"268891320\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/3312\" data-hovercard-type=\"issue\" data-hovercard-url=\"/pytorch/pytorch/issues/3312/hovercard\" href=\"https://github.com/pytorch/pytorch/issues/3312\">#3312</a> . Relevant to <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"265887405\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/3137\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/pytorch/pytorch/pull/3137/hovercard\" href=\"https://github.com/pytorch/pytorch/pull/3137\">#3137</a> .</p>\n<p>However, I'd appreciate if someone can explain to me how all these <code>.cwrap</code> bindings work. From poking around, my understanding is:</p>\n<ol>\n<li>Both ATen cwrap and <code>csrc/generic</code> crwap are needed for the method to exist.</li>\n<li>Somehow, if a python <code>new</code> is not supplied in a cwrap binding, calling <code>.new</code> will automatically invoke the <code>tp_new</code> on the c <code>PyObject</code>. I'm also curious where this happens.</li>\n</ol>", "body_text": "Fixes #3312 . Relevant to #3137 .\nHowever, I'd appreciate if someone can explain to me how all these .cwrap bindings work. From poking around, my understanding is:\n\nBoth ATen cwrap and csrc/generic crwap are needed for the method to exist.\nSomehow, if a python new is not supplied in a cwrap binding, calling .new will automatically invoke the tp_new on the c PyObject. I'm also curious where this happens.", "body": "Fixes #3312 . Relevant to #3137 .\r\n\r\nHowever, I'd appreciate if someone can explain to me how all these `.cwrap` bindings work. From poking around, my understanding is:\r\n\r\n1. Both ATen cwrap and `csrc/generic` crwap are needed for the method to exist.\r\n2. Somehow, if a python `new` is not supplied in a cwrap binding, calling `.new` will automatically invoke the `tp_new` on the c `PyObject`. I'm also curious where this happens.\r\n\r\n"}