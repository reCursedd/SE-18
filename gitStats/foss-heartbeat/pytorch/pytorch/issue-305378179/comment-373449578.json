{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/373449578", "html_url": "https://github.com/pytorch/pytorch/pull/5794#issuecomment-373449578", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/5794", "id": 373449578, "node_id": "MDEyOklzc3VlQ29tbWVudDM3MzQ0OTU3OA==", "user": {"login": "goldsborough", "id": 6429851, "node_id": "MDQ6VXNlcjY0Mjk4NTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/6429851?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goldsborough", "html_url": "https://github.com/goldsborough", "followers_url": "https://api.github.com/users/goldsborough/followers", "following_url": "https://api.github.com/users/goldsborough/following{/other_user}", "gists_url": "https://api.github.com/users/goldsborough/gists{/gist_id}", "starred_url": "https://api.github.com/users/goldsborough/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goldsborough/subscriptions", "organizations_url": "https://api.github.com/users/goldsborough/orgs", "repos_url": "https://api.github.com/users/goldsborough/repos", "events_url": "https://api.github.com/users/goldsborough/events{/privacy}", "received_events_url": "https://api.github.com/users/goldsborough/received_events", "type": "User", "site_admin": false}, "created_at": "2018-03-15T17:01:09Z", "updated_at": "2018-03-15T17:01:09Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=13564\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ezyang\">@ezyang</a> I'm pretty sure we weren't making use of the <code>constexpr</code>-ness of this variable since the places it was used were not <code>constexpr</code>.  AFAIS from the passages cited in the standard in that answer, this should not have compiled for us (on C++11) unless these static contexpr values were never ODR-used (their memory address never taken). From what I can see, we are actually passing them to functions that take <code>const&amp;</code>. I think we're deep into the edge cases of the standard here where traditionally high variance can crop up within different versions of different compilers. I will follow up with better comments and the correct solution of defining the values in the cpp file.</p>", "body_text": "@ezyang I'm pretty sure we weren't making use of the constexpr-ness of this variable since the places it was used were not constexpr.  AFAIS from the passages cited in the standard in that answer, this should not have compiled for us (on C++11) unless these static contexpr values were never ODR-used (their memory address never taken). From what I can see, we are actually passing them to functions that take const&. I think we're deep into the edge cases of the standard here where traditionally high variance can crop up within different versions of different compilers. I will follow up with better comments and the correct solution of defining the values in the cpp file.", "body": "@ezyang I'm pretty sure we weren't making use of the `constexpr`-ness of this variable since the places it was used were not `constexpr`.  AFAIS from the passages cited in the standard in that answer, this should not have compiled for us (on C++11) unless these static contexpr values were never ODR-used (their memory address never taken). From what I can see, we are actually passing them to functions that take `const&`. I think we're deep into the edge cases of the standard here where traditionally high variance can crop up within different versions of different compilers. I will follow up with better comments and the correct solution of defining the values in the cpp file."}