{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/165811074", "pull_request_review_id": 93813123, "id": 165811074, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NTgxMTA3NA==", "diff_hunk": "@@ -333,12 +330,11 @@ auto Engine::compute_dependencies(Function* root, GraphTask& task) -> void {\n   while (queue.size() > 0) {\n     auto fn = queue.back(); queue.pop_back();\n     for (auto& edge : fn->next_functions) {\n-      Function* next_ptr = edge.first.get();\n-      if (!next_ptr) continue;\n-      dependencies[next_ptr] += 1;\n-      bool inserted;\n-      std::tie(std::ignore, inserted) = seen.insert(next_ptr);\n-      if (inserted) queue.push_back(next_ptr);\n+      if (auto next_ptr = edge.function.get()) {\n+        dependencies[next_ptr] += 1;\n+        const auto result = seen.insert(next_ptr);\n+        if (result.second) queue.push_back(next_ptr);", "path": "torch/csrc/autograd/engine.cpp", "position": null, "original_position": 77, "commit_id": "62b9f8f91783f6a3fc51a5447e0e94e49d8e15de", "original_commit_id": "f3c56996533b5bf895961eeaac3385111db769d1", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "nit: this has the downside that someone needs to remember what's `result.second`. It used to be clear, albeit more verbose before. The pattern I quite like now (which still makes the high-level idea clear) is\r\n```cpp\r\nif (/* bool unseen = */ seen.insert(next_ptr).second) queue.push_back(next_ptr);\r\n```", "created_at": "2018-02-03T10:26:50Z", "updated_at": "2018-11-23T15:39:04Z", "html_url": "https://github.com/pytorch/pytorch/pull/5030#discussion_r165811074", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/5030", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/165811074"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/5030#discussion_r165811074"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/5030"}}, "body_html": "<p>nit: this has the downside that someone needs to remember what's <code>result.second</code>. It used to be clear, albeit more verbose before. The pattern I quite like now (which still makes the high-level idea clear) is</p>\n<div class=\"highlight highlight-source-c++\"><pre><span class=\"pl-k\">if</span> (<span class=\"pl-c\"><span class=\"pl-c\">/*</span> bool unseen = <span class=\"pl-c\">*/</span></span> seen.insert(next_ptr).second) queue.push_back(next_ptr);</pre></div>", "body_text": "nit: this has the downside that someone needs to remember what's result.second. It used to be clear, albeit more verbose before. The pattern I quite like now (which still makes the high-level idea clear) is\nif (/* bool unseen = */ seen.insert(next_ptr).second) queue.push_back(next_ptr);"}