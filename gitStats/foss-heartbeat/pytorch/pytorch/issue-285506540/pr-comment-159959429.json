{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/159959429", "pull_request_review_id": 86999548, "id": 159959429, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1OTk1OTQyOQ==", "diff_hunk": "@@ -0,0 +1,99 @@\n+#include \"comm.h\"\n+\n+#include \"torch/csrc/utils/tensor_flatten.h\"\n+#include \"torch/csrc/utils/auto_gpu.h\"\n+#include \"torch/csrc/cuda/device_set.h\"\n+#include \"torch/csrc/cuda/nccl.h\"\n+\n+#include <ATen/ATen.h>\n+\n+namespace torch { namespace cuda {\n+\n+using namespace at;\n+\n+// Some operations can be performed more efficiently if we're handling tensors\n+// of a single type only. Adding this logic directly in the loop makes it a bit\n+// ugly, so here's a helper for it.\n+struct unique_type_checker {\n+  void show(const at::Type& t) {\n+    if (!unique) return;\n+    if (!type) type = &t;\n+    unique = (type == &t);\n+  }\n+\n+  const at::Type *type = nullptr;\n+  bool unique = true;\n+};\n+\n+std::vector<Tensor> broadcast(const Tensor& tensor, const IntList& devices) {\n+  auto & type = tensor.type();\n+  if (type.is_cuda() && tensor.get_device() != devices[0])\n+    throw std::runtime_error(\"device of broadcasted tensor must appear as the \"\n+                             \"first on devices list\");\n+  std::vector<Tensor> tensors;\n+  tensors.reserve(devices.size());\n+  if (nccl::is_available({tensor})) {\n+    tensors.push_back(tensor);\n+    for (std::size_t i = 1, num_devices = devices.size(); i < num_devices; ++i) {", "path": "torch/csrc/cuda/comm.cpp", "position": null, "original_position": 37, "commit_id": "a297a5469f60513dcb937ad0a0826208448ad1dd", "original_commit_id": "1f392e8c78e427442cb37da78ba221ad2e2b830c", "user": {"login": "colesbury", "id": 655866, "node_id": "MDQ6VXNlcjY1NTg2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/655866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colesbury", "html_url": "https://github.com/colesbury", "followers_url": "https://api.github.com/users/colesbury/followers", "following_url": "https://api.github.com/users/colesbury/following{/other_user}", "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions", "organizations_url": "https://api.github.com/users/colesbury/orgs", "repos_url": "https://api.github.com/users/colesbury/repos", "events_url": "https://api.github.com/users/colesbury/events{/privacy}", "received_events_url": "https://api.github.com/users/colesbury/received_events", "type": "User", "site_admin": false}, "body": "Can this just be:\r\n\r\n```\r\nfor (int device : devices) {\r\n ...\r\n}\r\n```", "created_at": "2018-01-05T19:25:18Z", "updated_at": "2018-11-23T15:37:52Z", "html_url": "https://github.com/pytorch/pytorch/pull/4443#discussion_r159959429", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4443", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/159959429"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/4443#discussion_r159959429"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4443"}}, "body_html": "<p>Can this just be:</p>\n<pre><code>for (int device : devices) {\n ...\n}\n</code></pre>", "body_text": "Can this just be:\nfor (int device : devices) {\n ...\n}"}