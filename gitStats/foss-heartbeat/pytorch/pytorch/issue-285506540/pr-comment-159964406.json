{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/159964406", "pull_request_review_id": 86999548, "id": 159964406, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1OTk2NDQwNg==", "diff_hunk": "@@ -0,0 +1,95 @@\n+#include \"torch/csrc/utils/tensor_flatten.h\"\n+\n+#include <unordered_map>\n+\n+namespace torch { namespace utils {\n+\n+using namespace at;\n+\n+std::vector<TensorGroup> take_tensors(const TensorList& tensors, std::size_t size_limit) {\n+  std::vector<TensorGroup> results;\n+  results.reserve(tensors.size()); // an overapproximation, but at least we won't have to copy stuff around\n+  std::unordered_map<at::Type*, TensorGroup> groups_;\n+  for (const auto & tensor : tensors) {\n+    auto & type = tensor.type();\n+    std::size_t tensor_size;\n+    if (type.is_sparse()) {\n+      const auto& indices = tensor._indices();\n+      const auto& values = tensor._values();\n+      tensor_size = indices.numel() * indices.type().elementSizeInBytes() +\n+                    values.numel() * indices.type().elementSizeInBytes();\n+    } else {\n+      tensor_size = tensor.numel() * type.elementSizeInBytes();\n+    }\n+    auto & type_group = groups_[&type];\n+    type_group.tensors.push_back(tensor);\n+    type_group.size += tensor_size;\n+    if (type_group.size + tensor_size >= size_limit) {\n+      results.emplace_back();\n+      std::swap(results.back(), type_group);\n+    }\n+  }\n+  // End case. Look for any remaining groups and return them.\n+  for (auto & entry : groups_) {\n+    auto & group = entry.second;\n+    if (group.size > 0) {\n+      results.emplace_back(std::move(group));\n+    }\n+  }\n+  return results;\n+}\n+\n+void reorder_tensors_like(std::vector<Tensor>& tensors, const TensorList& order) {\n+  TORCH_ASSERT(tensors.size() == order.size());\n+  std::unordered_map<at::Type*, std::vector<std::size_t>> type_indices;\n+  for (std::size_t i = 0, num_tensors = tensors.size(); i < num_tensors; ++i)\n+    type_indices[&tensors[i].type()].push_back(i);\n+\n+  std::unordered_map<at::Type*, std::size_t> type_used;\n+  std::vector<Tensor> ordered_tensors;", "path": "torch/csrc/utils/tensor_flatten.cpp", "position": 49, "original_position": 49, "commit_id": "a297a5469f60513dcb937ad0a0826208448ad1dd", "original_commit_id": "1f392e8c78e427442cb37da78ba221ad2e2b830c", "user": {"login": "colesbury", "id": 655866, "node_id": "MDQ6VXNlcjY1NTg2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/655866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colesbury", "html_url": "https://github.com/colesbury", "followers_url": "https://api.github.com/users/colesbury/followers", "following_url": "https://api.github.com/users/colesbury/following{/other_user}", "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions", "organizations_url": "https://api.github.com/users/colesbury/orgs", "repos_url": "https://api.github.com/users/colesbury/repos", "events_url": "https://api.github.com/users/colesbury/events{/privacy}", "received_events_url": "https://api.github.com/users/colesbury/received_events", "type": "User", "site_admin": false}, "body": "If you're going to create a new std::vector anyways, I think it's a little cleaner to return it instead of modifying a function argument, but up to you.", "created_at": "2018-01-05T19:48:40Z", "updated_at": "2018-11-23T15:37:52Z", "html_url": "https://github.com/pytorch/pytorch/pull/4443#discussion_r159964406", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4443", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/159964406"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/4443#discussion_r159964406"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4443"}}, "body_html": "<p>If you're going to create a new std::vector anyways, I think it's a little cleaner to return it instead of modifying a function argument, but up to you.</p>", "body_text": "If you're going to create a new std::vector anyways, I think it's a little cleaner to return it instead of modifying a function argument, but up to you."}