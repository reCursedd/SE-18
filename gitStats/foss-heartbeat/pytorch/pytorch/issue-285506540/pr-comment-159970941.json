{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/159970941", "pull_request_review_id": 87013378, "id": 159970941, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1OTk3MDk0MQ==", "diff_hunk": "@@ -0,0 +1,95 @@\n+#include \"torch/csrc/utils/tensor_flatten.h\"\n+\n+#include <unordered_map>\n+\n+namespace torch { namespace utils {\n+\n+using namespace at;\n+\n+std::vector<TensorGroup> take_tensors(const TensorList& tensors, std::size_t size_limit) {\n+  std::vector<TensorGroup> results;\n+  results.reserve(tensors.size()); // an overapproximation, but at least we won't have to copy stuff around\n+  std::unordered_map<at::Type*, TensorGroup> groups_;", "path": "torch/csrc/utils/tensor_flatten.cpp", "position": null, "original_position": 12, "commit_id": "a297a5469f60513dcb937ad0a0826208448ad1dd", "original_commit_id": "1f392e8c78e427442cb37da78ba221ad2e2b830c", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Oh I implemented a generator-like thing (basically a lazy iterator), and this was part of the state that it was closed over. It wasn't any faster, and the memory complexity is the same, so I just used the simpler version that precomputes the whole vector at once. I'll remove the underscore", "created_at": "2018-01-05T20:20:23Z", "updated_at": "2018-11-23T15:37:52Z", "html_url": "https://github.com/pytorch/pytorch/pull/4443#discussion_r159970941", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4443", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/159970941"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/4443#discussion_r159970941"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4443"}}, "body_html": "<p>Oh I implemented a generator-like thing (basically a lazy iterator), and this was part of the state that it was closed over. It wasn't any faster, and the memory complexity is the same, so I just used the simpler version that precomputes the whole vector at once. I'll remove the underscore</p>", "body_text": "Oh I implemented a generator-like thing (basically a lazy iterator), and this was part of the state that it was closed over. It wasn't any faster, and the memory complexity is the same, so I just used the simpler version that precomputes the whole vector at once. I'll remove the underscore", "in_reply_to_id": 159965475}