{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/159960158", "pull_request_review_id": 86999548, "id": 159960158, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1OTk2MDE1OA==", "diff_hunk": "@@ -47,40 +51,39 @@ struct NcclCommList {\n   }\n };\n \n-struct AutoNcclGroup {\n-  AutoNcclGroup() {\n-#if defined(NCCL_MAJOR) && (NCCL_MAJOR >= 2)\n-    CHECK(ncclGroupStart());\n-#endif\n-  }\n-  ~AutoNcclGroup() {\n-#if defined(NCCL_MAJOR) && (NCCL_MAJOR >= 2)\n-    CHECK(ncclGroupEnd());\n-#endif\n-  }\n-};\n-\n+using device_list = std::vector<int>;\n // accesses to this object have to be guarded by THC's CudaFreeMutex\n-std::unordered_map<std::string, NcclCommList> _communicators;\n+static std::unordered_map<device_list, NcclCommList, torch::hash<device_list>> _communicators;\n \n-static ArrayRef<ncclComm_t> _get_communicators(TensorList inputs) {\n-  std::stringstream hash_stream;\n-  std::vector<int> devs;\n-  for (auto& input : inputs) {\n-    int dev = input.get_device();\n-    hash_stream << dev << \",\";\n-    devs.push_back(dev);\n+ArrayRef<ncclComm_t> _get_communicators(TensorList inputs) {\n+  static auto get_device = [](const at::Tensor& t) -> int { return t.get_device(); };\n+  device_list devices;\n+  devices.reserve(16);\n+  for (auto & t : inputs)\n+    devices.push_back(t.get_device());\n+  auto it = _communicators.find(devices);\n+  if (it == _communicators.end())\n+    std::tie(it, std::ignore) = _communicators.emplace(devices, fmap(inputs, get_device));", "path": "torch/csrc/cuda/nccl.cpp", "position": null, "original_position": 65, "commit_id": "a297a5469f60513dcb937ad0a0826208448ad1dd", "original_commit_id": "1f392e8c78e427442cb37da78ba221ad2e2b830c", "user": {"login": "colesbury", "id": 655866, "node_id": "MDQ6VXNlcjY1NTg2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/655866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colesbury", "html_url": "https://github.com/colesbury", "followers_url": "https://api.github.com/users/colesbury/followers", "following_url": "https://api.github.com/users/colesbury/following{/other_user}", "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions", "organizations_url": "https://api.github.com/users/colesbury/orgs", "repos_url": "https://api.github.com/users/colesbury/repos", "events_url": "https://api.github.com/users/colesbury/events{/privacy}", "received_events_url": "https://api.github.com/users/colesbury/received_events", "type": "User", "site_admin": false}, "body": "Isn't `fmap(inputs, get_device)` just `devices`?", "created_at": "2018-01-05T19:28:25Z", "updated_at": "2018-11-23T15:37:52Z", "html_url": "https://github.com/pytorch/pytorch/pull/4443#discussion_r159960158", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4443", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/159960158"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/4443#discussion_r159960158"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4443"}}, "body_html": "<p>Isn't <code>fmap(inputs, get_device)</code> just <code>devices</code>?</p>", "body_text": "Isn't fmap(inputs, get_device) just devices?"}