{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/159961375", "pull_request_review_id": 86999548, "id": 159961375, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1OTk2MTM3NQ==", "diff_hunk": "@@ -0,0 +1,18 @@\n+#include \"torch/csrc/utils/pybind.h\"\n+#include \"torch/csrc/cuda/comm.h\"\n+\n+#include <chrono>\n+\n+namespace torch { namespace cuda { namespace python {\n+\n+void initCommMethods(PyObject *module) {\n+  auto m = py::cast<py::module>(module);\n+  m.def(\"_broadcast_coalesced\", [](std::vector<at::Tensor>& tensors, std::vector<int64_t> devices, std::size_t buffer_size) {", "path": "torch/csrc/cuda/python_comm.cpp", "position": 10, "original_position": 10, "commit_id": "a297a5469f60513dcb937ad0a0826208448ad1dd", "original_commit_id": "1f392e8c78e427442cb37da78ba221ad2e2b830c", "user": {"login": "colesbury", "id": 655866, "node_id": "MDQ6VXNlcjY1NTg2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/655866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colesbury", "html_url": "https://github.com/colesbury", "followers_url": "https://api.github.com/users/colesbury/followers", "following_url": "https://api.github.com/users/colesbury/following{/other_user}", "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions", "organizations_url": "https://api.github.com/users/colesbury/orgs", "repos_url": "https://api.github.com/users/colesbury/repos", "events_url": "https://api.github.com/users/colesbury/events{/privacy}", "received_events_url": "https://api.github.com/users/colesbury/received_events", "type": "User", "site_admin": false}, "body": "What's the plan with pybind11? Do these methods release the GIL?\r\n\r\nFWIW, if you wanted, you could probably bind all these types with `PythonArgParser`, but it doesn't matter.\r\n\r\nI think, longer term, it would be good to have the NCCL bindings inside ATen like we do with cuDNN, but it's not necessary in this PR.", "created_at": "2018-01-05T19:34:12Z", "updated_at": "2018-11-23T15:37:52Z", "html_url": "https://github.com/pytorch/pytorch/pull/4443#discussion_r159961375", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4443", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/159961375"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/4443#discussion_r159961375"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4443"}}, "body_html": "<p>What's the plan with pybind11? Do these methods release the GIL?</p>\n<p>FWIW, if you wanted, you could probably bind all these types with <code>PythonArgParser</code>, but it doesn't matter.</p>\n<p>I think, longer term, it would be good to have the NCCL bindings inside ATen like we do with cuDNN, but it's not necessary in this PR.</p>", "body_text": "What's the plan with pybind11? Do these methods release the GIL?\nFWIW, if you wanted, you could probably bind all these types with PythonArgParser, but it doesn't matter.\nI think, longer term, it would be good to have the NCCL bindings inside ATen like we do with cuDNN, but it's not necessary in this PR."}