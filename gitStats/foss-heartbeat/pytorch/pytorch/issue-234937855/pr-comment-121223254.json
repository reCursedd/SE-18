{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/121223254", "pull_request_review_id": 43261787, "id": 121223254, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMTIyMzI1NA==", "diff_hunk": "@@ -0,0 +1,163 @@\n+\n+CMAKE_MINIMUM_REQUIRED(VERSION 2.8)\n+SET(CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake ${CMAKE_MODULE_PATH})\n+\n+if(${CMAKE_VERSION} VERSION_LESS \"2.8.12\")\n+  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -std=c++11\")\n+else(${CMAKE_VERSION} VERSION_LESS \"2.8.12\")\n+  if(${CMAKE_VERSION} VERSION_LESS \"3.1\")\n+    add_compile_options(-std=c++11) # CMake 2.8.12 to 3.1\n+  endif(${CMAKE_VERSION} VERSION_LESS \"3.1\")\n+endif(${CMAKE_VERSION} VERSION_LESS \"2.8.12\")\n+\n+################################################################################\n+# Helper functions\n+################################################################################\n+\n+FUNCTION(EXCLUDE_DIR list_name dir_name)\n+  # A helper that excludes all files that contain dir_name in their file path\n+  SET(local_list ${${list_name}})\n+  FOREACH(source ${local_list})\n+    IF(${source} MATCHES ${dir_name})\n+      MESSAGE(STATUS \"Excluding \" ${source} \" from the build\")\n+      LIST(REMOVE_ITEM local_list ${source})\n+    ENDIF()\n+  ENDFOREACH()\n+  SET(${list_name} ${local_list} PARENT_SCOPE)\n+ENDFUNCTION()\n+\n+function(filter_list output input)\n+    unset(result)\n+    foreach(filename ${${input}})\n+        foreach(pattern ${ARGN})\n+            if(\"${filename}\" MATCHES \"${pattern}\")\n+                list(APPEND result \"${filename}\")\n+            endif()\n+        endforeach()\n+    endforeach()\n+    set(${output} ${result} PARENT_SCOPE)\n+endfunction()\n+\n+IF(NOT Torch_FOUND)\n+  FIND_PACKAGE(Torch REQUIRED)\n+ENDIF()\n+\n+IF(NOT TH_LIBRARIES)\n+  SET(TH_LIBRARIES \"TH\")\n+ENDIF(NOT TH_LIBRARIES)\n+MESSAGE(STATUS \"TH_LIBRARIES: ${TH_LIBRARIES}\")\n+\n+IF(NOT THS_LIBRARIES)\n+  SET(THS_LIBRARIES \"THS\")\n+ENDIF()\n+\n+IF(NO_CUDA)\n+  MESSAGE(STATUS \"ignoring CUDA\")\n+  SET(CUDA_FLAG -n)\n+ELSE()\n+  ADD_DEFINITIONS(-DTENSORLIB_CUDA_ENABLED)\n+  FIND_PACKAGE(CUDA 5.5)\n+  IF(CUDA_FOUND)\n+    INCLUDE_DIRECTORIES(${CUDA_INCLUDE_DIRS})\n+    INCLUDE_DIRECTORIES(\"${CUDA_SDK_ROOT_DIR}/common/inc\")\n+\n+    IF(NOT THC_LIBRARIES)\n+      SET(THC_LIBRARIES \"THC\")\n+    ENDIF(NOT THC_LIBRARIES)\n+    MESSAGE(STATUS \"THC_LIBRARIES: ${THC_LIBRARIES}\")\n+\n+    IF(NOT THCS_LIBRARIES)\n+      SET(THCS_LIBRARIES \"THCS\")\n+    ENDIF(NOT THCS_LIBRARIES)\n+    MESSAGE(STATUS \"THCS_LIBRARIES: ${THCS_LIBRARIES}\")\n+  ENDIF()\n+ENDIF()\n+\n+# Can be compiled standalone\n+IF(NOT TENSOR_LIB_INSTALL_BIN_DIR OR NOT TENSOR_LIB_INSTALL_LIB_DIR OR NOT TENSOR_LIB_INSTALL_INCLUDE_DIR)\n+  SET(TENSOR_LIB_INSTALL_BIN_DIR \"bin\" CACHE PATH \"TENSOR_LIB install binary subdirectory\")\n+  SET(TENSOR_LIB_INSTALL_LIB_DIR \"lib\" CACHE PATH \"TENSOR_LIB install library subdirectory\")\n+  SET(TENSOR_LIB_INSTALL_INCLUDE_DIR \"include\" CACHE PATH \"TENSOR_LIB install include subdirectory\")\n+ENDIF()\n+\n+FILE(GLOB base_h RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} \"*.h\")\n+FILE(GLOB base_cpp RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} \"*.cpp\")\n+\n+FILE(GLOB all_python RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} \"*.py\")\n+\n+EXECUTE_PROCESS(\n+    COMMAND python ${CMAKE_CURRENT_SOURCE_DIR}/gen.py ${CUDA_FLAG} -s ${CMAKE_CURRENT_SOURCE_DIR} --print-dependencies\n+    # user stderr rather than stdout so we can still debug the script with print\n+    ERROR_VARIABLE generated_cpp\n+    RESULT_VARIABLE RETURN_VALUE\n+)\n+if (NOT RETURN_VALUE EQUAL 0)\n+    message(STATUS ${generated_cpp})\n+    message(FATAL_ERROR \"Failed to get generated_cpp list\")\n+\n+endif()\n+\n+FILE(GLOB_RECURSE all_templates \"templates/*\")\n+\n+FILE(MAKE_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/TensorLib)\n+\n+SET(CWRAP_FILES_BASE ${CMAKE_CURRENT_SOURCE_DIR}/../../csrc  )\n+SET(cwrap_files\n+# ${CWRAP_FILES_BASE}/cudnn/cuDNN.cwrap\n+  ${CWRAP_FILES_BASE}/generic/TensorMethods.cwrap\n+# ${CWRAP_FILES_BASE}/generic/methods/SparseTensor.cwrap\n+  ${CWRAP_FILES_BASE}/generic/methods/Tensor.cwrap\n+  ${CWRAP_FILES_BASE}/generic/methods/TensorApply.cwrap\n+  ${CWRAP_FILES_BASE}/generic/methods/TensorCompare.cwrap\n+  ${CWRAP_FILES_BASE}/generic/methods/TensorCuda.cwrap\n+  ${CWRAP_FILES_BASE}/generic/methods/TensorMath.cwrap\n+  ${CWRAP_FILES_BASE}/generic/methods/TensorRandom.cwrap\n+#  ${CWRAP_FILES_BASE}/generic/methods/TensorSerialization.cwrap\n+#  ${CWRAP_FILES_BASE}/nn/THNN.cwrap\n+#  ${CWRAP_FILES_BASE}/nn/THCUNN.cwrap\n+#  ${CWRAP_FILES_BASE}/nn/THNN_generic.cwrap\n+  ${CMAKE_CURRENT_SOURCE_DIR}/Local.cwrap\n+)\n+\n+\n+ADD_CUSTOM_COMMAND(OUTPUT ${generated_cpp}\n+COMMAND python ${CMAKE_CURRENT_SOURCE_DIR}/gen.py ${CUDA_FLAG} -s ${CMAKE_CURRENT_SOURCE_DIR} ${cwrap_files}", "path": "torch/lib/TensorLib/CMakeLists.txt", "position": null, "original_position": 124, "commit_id": "dadf12e892b69bca8457a4be963fece8328f2393", "original_commit_id": "e34f14280c610773902bd3bdc908c3757ec4668c", "user": {"login": "killeent", "id": 4529377, "node_id": "MDQ6VXNlcjQ1MjkzNzc=", "avatar_url": "https://avatars1.githubusercontent.com/u/4529377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/killeent", "html_url": "https://github.com/killeent", "followers_url": "https://api.github.com/users/killeent/followers", "following_url": "https://api.github.com/users/killeent/following{/other_user}", "gists_url": "https://api.github.com/users/killeent/gists{/gist_id}", "starred_url": "https://api.github.com/users/killeent/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/killeent/subscriptions", "organizations_url": "https://api.github.com/users/killeent/orgs", "repos_url": "https://api.github.com/users/killeent/repos", "events_url": "https://api.github.com/users/killeent/events{/privacy}", "received_events_url": "https://api.github.com/users/killeent/received_events", "type": "User", "site_admin": false}, "body": "Code generation happens here.", "created_at": "2017-06-09T21:09:04Z", "updated_at": "2018-11-23T15:33:43Z", "html_url": "https://github.com/pytorch/pytorch/pull/1766#discussion_r121223254", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/1766", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/121223254"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/1766#discussion_r121223254"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/1766"}}, "body_html": "<p>Code generation happens here.</p>", "body_text": "Code generation happens here."}