{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/121264666", "pull_request_review_id": 43304058, "id": 121264666, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMTI2NDY2Ng==", "diff_hunk": "@@ -0,0 +1,114 @@\n+#pragma once\n+\n+#include<stdint.h>\n+#include <stdexcept>\n+#include <string>\n+#include \"TensorLib/HalfConvert.h\"\n+\n+#ifdef TENSORLIB_CUDA_ENABLED\n+#include <cuda_runtime.h>\n+#include <cuda_fp16.h>\n+#endif\n+\n+#if defined(__GNUC__)\n+#define TLIB_ALIGN(n) __attribute__((aligned(n)))\n+#elif defined(_WIN32)\n+#define TLIB_ALIGN(n) __declspec(align(n))\n+#else\n+#define TLIB_ALIGN(n)\n+#endif\n+\n+\n+\n+namespace tlib {\n+\n+\n+template<typename To, typename From> To convert(From f) {\n+  return static_cast<To>(f);\n+}\n+\n+typedef struct  TLIB_ALIGN(2) {\n+  unsigned short x;\n+#ifdef TENSORLIB_CUDA_ENABLED\n+  operator half() { return half { x }; }\n+#endif\n+  operator double();\n+} Half;\n+\n+template<> Half convert(double f);\n+template<> double convert(Half f);\n+template<> Half convert(int64_t f);\n+template<> int64_t convert(Half f);\n+\n+inline Half::operator double() {\n+  return convert<double,Half>(*this);\n+}\n+#ifdef TENSORLIB_CUDA_ENABLED\n+template<> half convert(double d);\n+#endif\n+\n+#define TLIB_SCALAR_TYPES(_) \\\n+_(uint8_t,Byte,i) \\\n+_(int8_t,Char,i) \\\n+_(double,Double,d) \\\n+_(float,Float,d) \\\n+_(int,Int,i) \\\n+_(int64_t,Long,i) \\\n+_(int16_t,Short,i) \\\n+_(Half,Half,d)\n+\n+class Scalar {\n+public:\n+#define DEFINE_IMPLICIT_CTOR(type,name,member) \\\n+  Scalar(type v) \\\n+  : tag(Tag::HAS_##member) { \\\n+    member = convert<decltype(member),type>(v); \\\n+  }\n+\n+  TLIB_SCALAR_TYPES(DEFINE_IMPLICIT_CTOR)", "path": "torch/lib/TensorLib/Scalar.h", "position": null, "original_position": 68, "commit_id": "dadf12e892b69bca8457a4be963fece8328f2393", "original_commit_id": "a5c86f848213f4877fae40e248a0b7b20d25a458", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "nit: Personally, I'd find this much easier to read if the macro would be called `TLIB_FORALL_SCALAR_TYPES`. This would change to:\r\n```cpp\r\nTLIB_FORALL_SCALAR_TYPES(DEFINE_IMPLICIT_CTOR)\r\n```", "created_at": "2017-06-10T19:31:11Z", "updated_at": "2018-11-23T15:33:46Z", "html_url": "https://github.com/pytorch/pytorch/pull/1766#discussion_r121264666", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/1766", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/121264666"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/1766#discussion_r121264666"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/1766"}}, "body_html": "<p>nit: Personally, I'd find this much easier to read if the macro would be called <code>TLIB_FORALL_SCALAR_TYPES</code>. This would change to:</p>\n<div class=\"highlight highlight-source-c++\"><pre><span class=\"pl-en\">TLIB_FORALL_SCALAR_TYPES</span>(DEFINE_IMPLICIT_CTOR)</pre></div>", "body_text": "nit: Personally, I'd find this much easier to read if the macro would be called TLIB_FORALL_SCALAR_TYPES. This would change to:\nTLIB_FORALL_SCALAR_TYPES(DEFINE_IMPLICIT_CTOR)"}