{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/121268681", "pull_request_review_id": 43308364, "id": 121268681, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMTI2ODY4MQ==", "diff_hunk": "@@ -0,0 +1,91 @@\n+#include \"TensorLib/${Storage}.h\"\n+#include \"TensorLib/HalfConvert.h\"\n+\n+namespace tlib {\n+\n+${Storage}::${Storage}(Context* context):\n+    storage(${THStorage}_new(${state})), context(context) {}\n+\n+${Storage}::${Storage}(Context* context, ${THStorage}* storage):\n+    storage(storage), context(context) {}\n+\n+${Storage}::${Storage}(Context* context, std::size_t storage_size)\n+  : storage(${THStorage}_newWithSize(${state,} storage_size)), context(context) {}\n+\n+${Storage}::~${Storage}() {\n+  ${THStorage}_free(${state,} storage);\n+}\n+\n+std::size_t ${Storage}::elementSize() const {\n+  return sizeof(${ScalarType});\n+}\n+\n+std::size_t ${Storage}::size() const {\n+  return storage->size;\n+}\n+\n+void* ${Storage}::data() {\n+  return storage->data;\n+}\n+\n+const void* ${Storage}::data() const {\n+  return storage->data;\n+}\n+\n+auto ${Storage}::retain() -> ${Storage}& {\n+  ${THStorage}_retain(${state,} storage);\n+  return *this;\n+}\n+\n+auto ${Storage}::free() -> ${Storage}& {\n+  ${THStorage}_free(${state,} storage);\n+  return *this;\n+}\n+\n+auto ${Storage}::resize(long new_size) -> ${Storage}& {\n+  ${THStorage}_resize(${state,} storage, new_size);\n+  return *this;\n+}\n+\n+auto ${Storage}::fill(Scalar value) -> ${Storage}& {\n+  ${THStorage}_fill(${state,} storage, ${to_th_half}(value.to${ScalarName}()));\n+  return *this;\n+}\n+\n+auto ${Storage}::set(std::size_t ind, Scalar value) -> ${Storage}& {\n+  ${THStorage}_set(${state,} storage, ind, ${to_th_half}(value.to${ScalarName}()));\n+  return *this;\n+}\n+\n+auto ${Storage}::fast_set(std::size_t ind, Scalar value) -> ${Storage}& {\n+  throw std::runtime_error(\"unsupported operation 'fast_set'\");", "path": "torch/lib/TensorLib/templates/StorageDerived.cpp", "position": 61, "original_position": 61, "commit_id": "dadf12e892b69bca8457a4be963fece8328f2393", "original_commit_id": "a5c86f848213f4877fae40e248a0b7b20d25a458", "user": {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, "body": "it has to behave differently than THPP because it will need to take a scalar_type template argument. We'll make sure to have it when we start replacing uses of THPP.", "created_at": "2017-06-10T23:50:41Z", "updated_at": "2018-11-23T15:33:48Z", "html_url": "https://github.com/pytorch/pytorch/pull/1766#discussion_r121268681", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/1766", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/121268681"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/1766#discussion_r121268681"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/1766"}}, "body_html": "<p>it has to behave differently than THPP because it will need to take a scalar_type template argument. We'll make sure to have it when we start replacing uses of THPP.</p>", "body_text": "it has to behave differently than THPP because it will need to take a scalar_type template argument. We'll make sure to have it when we start replacing uses of THPP.", "in_reply_to_id": 121265149}