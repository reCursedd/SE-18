{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/121264614", "pull_request_review_id": 43304058, "id": 121264614, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMTI2NDYxNA==", "diff_hunk": "@@ -0,0 +1,114 @@\n+#pragma once\n+\n+#include<stdint.h>\n+#include <stdexcept>\n+#include <string>\n+#include \"TensorLib/HalfConvert.h\"\n+\n+#ifdef TENSORLIB_CUDA_ENABLED\n+#include <cuda_runtime.h>\n+#include <cuda_fp16.h>\n+#endif\n+\n+#if defined(__GNUC__)\n+#define TLIB_ALIGN(n) __attribute__((aligned(n)))\n+#elif defined(_WIN32)\n+#define TLIB_ALIGN(n) __declspec(align(n))\n+#else\n+#define TLIB_ALIGN(n)\n+#endif\n+\n+\n+\n+namespace tlib {\n+\n+\n+template<typename To, typename From> To convert(From f) {\n+  return static_cast<To>(f);\n+}\n+\n+typedef struct  TLIB_ALIGN(2) {\n+  unsigned short x;\n+#ifdef TENSORLIB_CUDA_ENABLED\n+  operator half() { return half { x }; }\n+#endif\n+  operator double();\n+} Half;\n+\n+template<> Half convert(double f);\n+template<> double convert(Half f);\n+template<> Half convert(int64_t f);\n+template<> int64_t convert(Half f);\n+\n+inline Half::operator double() {\n+  return convert<double,Half>(*this);", "path": "torch/lib/TensorLib/Scalar.h", "position": 44, "original_position": 44, "commit_id": "dadf12e892b69bca8457a4be963fece8328f2393", "original_commit_id": "a5c86f848213f4877fae40e248a0b7b20d25a458", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "btw do you really need to specify both types to this template? It should be possible for the compiler to infer the input type. then, this would become `scalar_cast<double>(*this)`", "created_at": "2017-06-10T19:28:05Z", "updated_at": "2018-11-23T15:33:46Z", "html_url": "https://github.com/pytorch/pytorch/pull/1766#discussion_r121264614", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/1766", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/121264614"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/1766#discussion_r121264614"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/1766"}}, "body_html": "<p>btw do you really need to specify both types to this template? It should be possible for the compiler to infer the input type. then, this would become <code>scalar_cast&lt;double&gt;(*this)</code></p>", "body_text": "btw do you really need to specify both types to this template? It should be possible for the compiler to infer the input type. then, this would become scalar_cast<double>(*this)"}