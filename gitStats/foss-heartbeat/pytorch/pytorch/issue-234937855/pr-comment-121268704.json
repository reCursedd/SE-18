{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/121268704", "pull_request_review_id": 43308391, "id": 121268704, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMTI2ODcwNA==", "diff_hunk": "@@ -0,0 +1,67 @@\n+#include \"TensorLib/${Tensor}.h\"\n+#include \"TensorLib/HalfConvert.h\"\n+\n+//sketch:\n+\n+/*\n+\n+class Type {\n+  // ctor is configurable as well\n+  Tensor new(...) {}\n+  // all  methods and pure functions, virtually dispatched\n+  virtual Tensor add(Tensor a, Tensor b);\n+\n+  // no Tensor arguments but virtually dispatched on type\n+  virtual Tensor linspace(int a, int b);\n+  //\n+}\n+\n+// base class of derived tensors\n+class TensorImpl {\n+  Type * type_; //non-virtual so that we don't double indirect unnecessarily ...\n+\n+  // not virtual - Type * handles the virtual dispatch\n+  Tensor add(Tensor b) {\n+    type_->add(self,b);\n+  }\n+}", "path": "torch/lib/TensorLib/templates/TensorDerived.cpp", "position": 27, "original_position": 27, "commit_id": "dadf12e892b69bca8457a4be963fece8328f2393", "original_commit_id": "a5c86f848213f4877fae40e248a0b7b20d25a458", "user": {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, "body": "Things like zeros/ones/linespace fit naturally as methods on Type because it combines both the backend and scalar type, which is enough to choose the concrete return type of the Tensor being created. It is also useful to pass them around to allow polymorphic construction of Tensors, making it easier to write cross-backend and cross-type code. Currently all dynamic dispatch goes through the Type objects.", "created_at": "2017-06-10T23:52:42Z", "updated_at": "2018-11-23T15:33:48Z", "html_url": "https://github.com/pytorch/pytorch/pull/1766#discussion_r121268704", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/1766", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/121268704"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/1766#discussion_r121268704"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/1766"}}, "body_html": "<p>Things like zeros/ones/linespace fit naturally as methods on Type because it combines both the backend and scalar type, which is enough to choose the concrete return type of the Tensor being created. It is also useful to pass them around to allow polymorphic construction of Tensors, making it easier to write cross-backend and cross-type code. Currently all dynamic dispatch goes through the Type objects.</p>", "body_text": "Things like zeros/ones/linespace fit naturally as methods on Type because it combines both the backend and scalar type, which is enough to choose the concrete return type of the Tensor being created. It is also useful to pass them around to allow polymorphic construction of Tensors, making it easier to write cross-backend and cross-type code. Currently all dynamic dispatch goes through the Type objects.", "in_reply_to_id": 121265242}