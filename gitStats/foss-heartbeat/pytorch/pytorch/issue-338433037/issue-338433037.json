{"url": "https://api.github.com/repos/pytorch/pytorch/issues/9177", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/9177/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/9177/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/9177/events", "html_url": "https://github.com/pytorch/pytorch/pull/9177", "id": 338433037, "node_id": "MDExOlB1bGxSZXF1ZXN0MTk5MzYzNTQx", "number": 9177, "title": "Add Feature-wise Linear Modulation layer", "user": {"login": "ethanjperez", "id": 6402205, "node_id": "MDQ6VXNlcjY0MDIyMDU=", "avatar_url": "https://avatars2.githubusercontent.com/u/6402205?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ethanjperez", "html_url": "https://github.com/ethanjperez", "followers_url": "https://api.github.com/users/ethanjperez/followers", "following_url": "https://api.github.com/users/ethanjperez/following{/other_user}", "gists_url": "https://api.github.com/users/ethanjperez/gists{/gist_id}", "starred_url": "https://api.github.com/users/ethanjperez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ethanjperez/subscriptions", "organizations_url": "https://api.github.com/users/ethanjperez/orgs", "repos_url": "https://api.github.com/users/ethanjperez/repos", "events_url": "https://api.github.com/users/ethanjperez/events{/privacy}", "received_events_url": "https://api.github.com/users/ethanjperez/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1003638619, "node_id": "MDU6TGFiZWwxMDAzNjM4NjE5", "url": "https://api.github.com/repos/pytorch/pytorch/labels/contrib", "name": "contrib", "color": "59d6b0", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-07-05T05:39:13Z", "updated_at": "2018-08-14T16:27:18Z", "closed_at": "2018-08-14T16:27:18Z", "author_association": "NONE", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/9177", "html_url": "https://github.com/pytorch/pytorch/pull/9177", "diff_url": "https://github.com/pytorch/pytorch/pull/9177.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/9177.patch"}, "body_html": "<p>This PR adds an implementation for Feature-wise Linear Modulation (FiLM) layers, which scale and shift each feature (map) of a set of activations independently. FiLM is particularly useful for learning from multiple inputs/modalities and for incorporating external conditioning information.</p>\n<p>This layer was introduced in \"<a href=\"https://arxiv.org/abs/1709.07871\" rel=\"nofollow\">FiLM: Visual Reasoning with a General Conditioning Layer</a>\" and has since been used in follow-up work such as:</p>\n<ul>\n<li>\"<a href=\"https://arxiv.org/abs/1712.01238\" rel=\"nofollow\">Learning by Asking Questions</a>\"</li>\n<li>\"<a href=\"https://arxiv.org/abs/1806.01946\" rel=\"nofollow\">Learning to Follow Language Instructions with Adversarial Reward Induction</a>\"</li>\n<li>\"<a href=\"https://arxiv.org/abs/1803.06092\" rel=\"nofollow\">A dataset and architecture for visual reasoning with a working memory</a>\"</li>\n<li>\"<a href=\"https://arxiv.org/abs/1805.08329\" rel=\"nofollow\">Guided Feature Transformation (GFT): A Neural<br>\nLanguage Grounding Module for Embodied Agents</a>\"</li>\n</ul>\n<p>If placed immediately after a batch norm layer with affine=false, this layer implements Conditional Normalization methods used in <a href=\"https://arxiv.org/abs/1707.00683\" rel=\"nofollow\">visual question-answering</a>, <a href=\"https://arxiv.org/abs/1610.07629\" rel=\"nofollow\">image style transfer</a>, and <a href=\"https://arxiv.org/abs/1707.06065\" rel=\"nofollow\">speech recognition</a>. Conditional Normalization was recently independently proposed as a <a href=\"https://github.com/pytorch/pytorch/issues/8985\" data-hovercard-type=\"issue\" data-hovercard-url=\"/pytorch/pytorch/issues/8985/hovercard\">feature proposal</a> for PyTorch.</p>", "body_text": "This PR adds an implementation for Feature-wise Linear Modulation (FiLM) layers, which scale and shift each feature (map) of a set of activations independently. FiLM is particularly useful for learning from multiple inputs/modalities and for incorporating external conditioning information.\nThis layer was introduced in \"FiLM: Visual Reasoning with a General Conditioning Layer\" and has since been used in follow-up work such as:\n\n\"Learning by Asking Questions\"\n\"Learning to Follow Language Instructions with Adversarial Reward Induction\"\n\"A dataset and architecture for visual reasoning with a working memory\"\n\"Guided Feature Transformation (GFT): A Neural\nLanguage Grounding Module for Embodied Agents\"\n\nIf placed immediately after a batch norm layer with affine=false, this layer implements Conditional Normalization methods used in visual question-answering, image style transfer, and speech recognition. Conditional Normalization was recently independently proposed as a feature proposal for PyTorch.", "body": "This PR adds an implementation for Feature-wise Linear Modulation (FiLM) layers, which scale and shift each feature (map) of a set of activations independently. FiLM is particularly useful for learning from multiple inputs/modalities and for incorporating external conditioning information.\r\n\r\nThis layer was introduced in \"[FiLM: Visual Reasoning with a General Conditioning Layer](https://arxiv.org/abs/1709.07871)\" and has since been used in follow-up work such as:\r\n- \"[Learning by Asking Questions](https://arxiv.org/abs/1712.01238)\"\r\n- \"[Learning to Follow Language Instructions with Adversarial Reward Induction](https://arxiv.org/abs/1806.01946)\"\r\n- \"[A dataset and architecture for visual reasoning with a working memory](https://arxiv.org/abs/1803.06092)\"\r\n- \"[Guided Feature Transformation (GFT): A Neural\r\nLanguage Grounding Module for Embodied Agents](https://arxiv.org/abs/1805.08329)\"\r\n\r\nIf placed immediately after a batch norm layer with affine=false, this layer implements Conditional Normalization methods used in [visual question-answering](https://arxiv.org/abs/1707.00683), [image style transfer](https://arxiv.org/abs/1610.07629), and [speech recognition](https://arxiv.org/abs/1707.06065). Conditional Normalization was recently independently proposed as a [feature proposal](https://github.com/pytorch/pytorch/issues/8985) for PyTorch."}