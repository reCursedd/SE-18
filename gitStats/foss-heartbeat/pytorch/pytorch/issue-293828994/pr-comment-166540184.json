{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/166540184", "pull_request_review_id": 94616439, "id": 166540184, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NjU0MDE4NA==", "diff_hunk": "@@ -3629,22 +3629,32 @@ TENSOR_IMPLEMENT_LOGICAL(ne,!=)\n     ptrdiff_t r_Size = THTensor_(nElement)(r_);               \\\n     int r_Contig = THTensor_(isContiguous)(r_);               \\\n     int tContig = THTensor_(isContiguous)(t);                 \\\n-    int inOMP = omp_in_parallel();                            \\\n-    if( (r_Size > TH_OMP_OVERHEAD_THRESHOLD) && (!inOMP) ){   \\\n-      TH_TENSOR_APPLY2_OMP(r_Size, r_Contig, tContig, real, r_, real, t, *r__data = CFUNC(*t_data););        \\\n-    }                                                                                                        \\\n-    else {                                                                                                   \\\n-      TH_TENSOR_APPLY2(real, r_, real, t, *r__data = CFUNC(*t_data););                                       \\\n-    }                                                                                                        \\\n+    if (r_Contig && tContig) {                                \\\n+      TH_TENSOR_APPLY2_CONTIG(real, r_, real, t, THVector_(NAME)(r__data, t_data, r__len););                   \\\n+    } else {                                                                                                   \\\n+      int inOMP = omp_in_parallel();                            \\\n+      if( (r_Size > TH_OMP_OVERHEAD_THRESHOLD) && (!inOMP) ){   \\\n+        TH_TENSOR_APPLY2_OMP(r_Size, r_Contig, tContig, real, r_, real, t, *r__data = CFUNC(*t_data););        \\", "path": "aten/src/TH/generic/THTensorMath.c", "position": 17, "original_position": 16, "commit_id": "4b09649650748a8cb42e86009d8fd0c2f34450d5", "original_commit_id": "9325de7e95e2636a28c72ad657ecd1af4f72b390", "user": {"login": "vedanuj", "id": 13946458, "node_id": "MDQ6VXNlcjEzOTQ2NDU4", "avatar_url": "https://avatars2.githubusercontent.com/u/13946458?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vedanuj", "html_url": "https://github.com/vedanuj", "followers_url": "https://api.github.com/users/vedanuj/followers", "following_url": "https://api.github.com/users/vedanuj/following{/other_user}", "gists_url": "https://api.github.com/users/vedanuj/gists{/gist_id}", "starred_url": "https://api.github.com/users/vedanuj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vedanuj/subscriptions", "organizations_url": "https://api.github.com/users/vedanuj/orgs", "repos_url": "https://api.github.com/users/vedanuj/repos", "events_url": "https://api.github.com/users/vedanuj/events{/privacy}", "received_events_url": "https://api.github.com/users/vedanuj/received_events", "type": "User", "site_admin": false}, "body": "@zdevito I can make these changes into a new macro for vectorized functions(for now only sigmoid will use that) and any other functions that will be vectorized later can use this new macro. However changing the LAB_IMPLEMENT_BASIC_FUCNTION macro doesn't hurt  perf for the other non vectorized functions because their THVector implementations are calling the serialized version of the functions in [` VECTOR_IMPLEMENT_FUNCTION`](https://github.com/pytorch/pytorch/blob/master/aten/src/TH/generic/THVectorDefault.cpp#L185). I tested a few functions like `tanh`, `log`, `exp` and didn't notice any degradation in their perf with this change.  \r\n", "created_at": "2018-02-07T07:56:08Z", "updated_at": "2018-11-23T15:39:17Z", "html_url": "https://github.com/pytorch/pytorch/pull/5010#discussion_r166540184", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/5010", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/166540184"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/5010#discussion_r166540184"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/5010"}}, "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=370202\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/zdevito\">@zdevito</a> I can make these changes into a new macro for vectorized functions(for now only sigmoid will use that) and any other functions that will be vectorized later can use this new macro. However changing the LAB_IMPLEMENT_BASIC_FUCNTION macro doesn't hurt  perf for the other non vectorized functions because their THVector implementations are calling the serialized version of the functions in <a href=\"https://github.com/pytorch/pytorch/blob/master/aten/src/TH/generic/THVectorDefault.cpp#L185\"><code> VECTOR_IMPLEMENT_FUNCTION</code></a>. I tested a few functions like <code>tanh</code>, <code>log</code>, <code>exp</code> and didn't notice any degradation in their perf with this change.</p>", "body_text": "@zdevito I can make these changes into a new macro for vectorized functions(for now only sigmoid will use that) and any other functions that will be vectorized later can use this new macro. However changing the LAB_IMPLEMENT_BASIC_FUCNTION macro doesn't hurt  perf for the other non vectorized functions because their THVector implementations are calling the serialized version of the functions in  VECTOR_IMPLEMENT_FUNCTION. I tested a few functions like tanh, log, exp and didn't notice any degradation in their perf with this change.", "in_reply_to_id": 166192714}