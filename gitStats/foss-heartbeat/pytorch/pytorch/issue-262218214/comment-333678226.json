{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/333678226", "html_url": "https://github.com/pytorch/pytorch/issues/2935#issuecomment-333678226", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/2935", "id": 333678226, "node_id": "MDEyOklzc3VlQ29tbWVudDMzMzY3ODIyNg==", "user": {"login": "kohr-h", "id": 5030250, "node_id": "MDQ6VXNlcjUwMzAyNTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/5030250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kohr-h", "html_url": "https://github.com/kohr-h", "followers_url": "https://api.github.com/users/kohr-h/followers", "following_url": "https://api.github.com/users/kohr-h/following{/other_user}", "gists_url": "https://api.github.com/users/kohr-h/gists{/gist_id}", "starred_url": "https://api.github.com/users/kohr-h/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kohr-h/subscriptions", "organizations_url": "https://api.github.com/users/kohr-h/orgs", "repos_url": "https://api.github.com/users/kohr-h/repos", "events_url": "https://api.github.com/users/kohr-h/events{/privacy}", "received_events_url": "https://api.github.com/users/kohr-h/received_events", "type": "User", "site_admin": false}, "created_at": "2017-10-02T22:02:49Z", "updated_at": "2017-10-02T22:02:49Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Alright, I'll make a PR then.</p>\n<blockquote>\n<p>Note that it's much simpler to use torch.from_numpy, which will create a Tensor of appropriate type for you</p>\n</blockquote>\n<p>You're right, I don't know why I overlooked this.</p>\n<p>Regarding placement, my suggestion is to define the generic methods like above in <code>torch/__init__.py</code> and then just set the attribute in each class.<br>\n<strong>Question1</strong> regarding <code>HalfTensor</code>: it doesn't implement <code>numpy()</code> so this code will crash with that tensor class. Should we let it crash or rather leave the attribute off the class? An argument for the former is that if it's left out, <code>numpy.asarray</code> will still silently work but yield a (largely useless) <code>object</code> array with 1 element (the tensor).<br>\n<strong>Question2</strong> regarding bools: Okay to use <code>ByteTensor</code>? Again, the alternative is to just let it crash.</p>", "body_text": "Alright, I'll make a PR then.\n\nNote that it's much simpler to use torch.from_numpy, which will create a Tensor of appropriate type for you\n\nYou're right, I don't know why I overlooked this.\nRegarding placement, my suggestion is to define the generic methods like above in torch/__init__.py and then just set the attribute in each class.\nQuestion1 regarding HalfTensor: it doesn't implement numpy() so this code will crash with that tensor class. Should we let it crash or rather leave the attribute off the class? An argument for the former is that if it's left out, numpy.asarray will still silently work but yield a (largely useless) object array with 1 element (the tensor).\nQuestion2 regarding bools: Okay to use ByteTensor? Again, the alternative is to just let it crash.", "body": "Alright, I'll make a PR then.\r\n\r\n> Note that it's much simpler to use torch.from_numpy, which will create a Tensor of appropriate type for you\r\n\r\nYou're right, I don't know why I overlooked this.\r\n\r\nRegarding placement, my suggestion is to define the generic methods like above in `torch/__init__.py` and then just set the attribute in each class.\r\n**Question1** regarding `HalfTensor`: it doesn't implement `numpy()` so this code will crash with that tensor class. Should we let it crash or rather leave the attribute off the class? An argument for the former is that if it's left out, `numpy.asarray` will still silently work but yield a (largely useless) `object` array with 1 element (the tensor).\r\n**Question2** regarding bools: Okay to use `ByteTensor`? Again, the alternative is to just let it crash."}