{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/364888988", "html_url": "https://github.com/pytorch/pytorch/issues/3584#issuecomment-364888988", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/3584", "id": 364888988, "node_id": "MDEyOklzc3VlQ29tbWVudDM2NDg4ODk4OA==", "user": {"login": "RadZaeem", "id": 4066712, "node_id": "MDQ6VXNlcjQwNjY3MTI=", "avatar_url": "https://avatars3.githubusercontent.com/u/4066712?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RadZaeem", "html_url": "https://github.com/RadZaeem", "followers_url": "https://api.github.com/users/RadZaeem/followers", "following_url": "https://api.github.com/users/RadZaeem/following{/other_user}", "gists_url": "https://api.github.com/users/RadZaeem/gists{/gist_id}", "starred_url": "https://api.github.com/users/RadZaeem/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RadZaeem/subscriptions", "organizations_url": "https://api.github.com/users/RadZaeem/orgs", "repos_url": "https://api.github.com/users/RadZaeem/repos", "events_url": "https://api.github.com/users/RadZaeem/events{/privacy}", "received_events_url": "https://api.github.com/users/RadZaeem/received_events", "type": "User", "site_admin": false}, "created_at": "2018-02-12T10:54:42Z", "updated_at": "2018-02-12T10:58:06Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=13687736\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/zhoujunpei\">@zhoujunpei</a><br>\nin my experience, I managed to do backprop by also sorting the labels with the same ordering as the lengths list.<br>\nlabels = labels[perm_index]<br>\nloss = CrossEntropy(out, labels)<br>\nloss.backward()</p>\n<p>if not, the backprop will fit into garbage (random labels)</p>\n<p>maybe your method also works. the point is the ouput and label index is same</p>", "body_text": "@zhoujunpei\nin my experience, I managed to do backprop by also sorting the labels with the same ordering as the lengths list.\nlabels = labels[perm_index]\nloss = CrossEntropy(out, labels)\nloss.backward()\nif not, the backprop will fit into garbage (random labels)\nmaybe your method also works. the point is the ouput and label index is same", "body": "@zhoujunpei \r\nin my experience, I managed to do backprop by also sorting the labels with the same ordering as the lengths list.\r\nlabels = labels[perm_index]\r\nloss = CrossEntropy(out, labels)\r\nloss.backward()\r\n\r\nif not, the backprop will fit into garbage (random labels)\r\n\r\nmaybe your method also works. the point is the ouput and label index is same"}