{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/343122562", "html_url": "https://github.com/pytorch/pytorch/issues/3558#issuecomment-343122562", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/3558", "id": 343122562, "node_id": "MDEyOklzc3VlQ29tbWVudDM0MzEyMjU2Mg==", "user": {"login": "ozancaglayan", "id": 330946, "node_id": "MDQ6VXNlcjMzMDk0Ng==", "avatar_url": "https://avatars0.githubusercontent.com/u/330946?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ozancaglayan", "html_url": "https://github.com/ozancaglayan", "followers_url": "https://api.github.com/users/ozancaglayan/followers", "following_url": "https://api.github.com/users/ozancaglayan/following{/other_user}", "gists_url": "https://api.github.com/users/ozancaglayan/gists{/gist_id}", "starred_url": "https://api.github.com/users/ozancaglayan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ozancaglayan/subscriptions", "organizations_url": "https://api.github.com/users/ozancaglayan/orgs", "repos_url": "https://api.github.com/users/ozancaglayan/repos", "events_url": "https://api.github.com/users/ozancaglayan/events{/privacy}", "received_events_url": "https://api.github.com/users/ozancaglayan/received_events", "type": "User", "site_admin": false}, "created_at": "2017-11-09T11:08:11Z", "updated_at": "2017-11-09T11:08:11Z", "author_association": "CONTRIBUTOR", "body_html": "<p>It depends on the data generated and the precision I think. Wrote a quick snippet below where all results are at least equal with atol <code>1e-1</code> but for higher precisions the behaviour is data-dependent.</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-c\"><span class=\"pl-c\">#</span>!/usr/bin/env python</span>\n<span class=\"pl-k\">import</span> torch\n<span class=\"pl-k\">import</span> numpy <span class=\"pl-k\">as</span> np\n\n<span class=\"pl-k\">if</span> <span class=\"pl-c1\">__name__</span> <span class=\"pl-k\">==</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>__main__<span class=\"pl-pds\">'</span></span>:\n    <span class=\"pl-k\">for</span> seed <span class=\"pl-k\">in</span> (<span class=\"pl-c1\">23</span>, <span class=\"pl-c1\">435</span>, <span class=\"pl-c1\">29</span>, <span class=\"pl-c1\">560</span>):\n        <span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Seed: <span class=\"pl-c1\">{}</span><span class=\"pl-pds\">'</span></span>.format(seed))\n        torch.manual_seed(seed)\n        <span class=\"pl-k\">for</span> dim <span class=\"pl-k\">in</span> [<span class=\"pl-c1\">10</span>,<span class=\"pl-c1\">100</span>,<span class=\"pl-c1\">200</span>,<span class=\"pl-c1\">400</span>,<span class=\"pl-c1\">800</span>,<span class=\"pl-c1\">1600</span>,<span class=\"pl-c1\">2000</span>]:\n            A <span class=\"pl-k\">=</span> torch.randn([dim, dim])\n            b <span class=\"pl-k\">=</span> torch.eye(dim)\n            x, _ <span class=\"pl-k\">=</span> torch.gesv(b, A)\n\n            xn <span class=\"pl-k\">=</span> np.linalg.solve(A.numpy(), b.numpy())\n            all_failed <span class=\"pl-k\">=</span> <span class=\"pl-c1\">True</span>\n            <span class=\"pl-k\">for</span> atol <span class=\"pl-k\">in</span> [<span class=\"pl-c1\">1e-1</span>, <span class=\"pl-c1\">1e-2</span>, <span class=\"pl-c1\">1e-3</span>, <span class=\"pl-c1\">1e-4</span>]:\n                <span class=\"pl-k\">if</span> <span class=\"pl-k\">not</span> np.allclose(x, xn, <span class=\"pl-v\">atol</span><span class=\"pl-k\">=</span>atol):\n                    <span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Failed for dim <span class=\"pl-c1\">{}</span> (atol=<span class=\"pl-c1\">{}</span>)<span class=\"pl-pds\">'</span></span>.format(dim, atol))\n                <span class=\"pl-k\">else</span>:\n                    all_failed <span class=\"pl-k\">=</span> <span class=\"pl-c1\">False</span>\n            <span class=\"pl-k\">if</span> all_failed:\n                <span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>All failed for dim <span class=\"pl-c1\">{}</span><span class=\"pl-pds\">'</span></span>.format(dim))</pre></div>", "body_text": "It depends on the data generated and the precision I think. Wrote a quick snippet below where all results are at least equal with atol 1e-1 but for higher precisions the behaviour is data-dependent.\n#!/usr/bin/env python\nimport torch\nimport numpy as np\n\nif __name__ == '__main__':\n    for seed in (23, 435, 29, 560):\n        print('Seed: {}'.format(seed))\n        torch.manual_seed(seed)\n        for dim in [10,100,200,400,800,1600,2000]:\n            A = torch.randn([dim, dim])\n            b = torch.eye(dim)\n            x, _ = torch.gesv(b, A)\n\n            xn = np.linalg.solve(A.numpy(), b.numpy())\n            all_failed = True\n            for atol in [1e-1, 1e-2, 1e-3, 1e-4]:\n                if not np.allclose(x, xn, atol=atol):\n                    print('Failed for dim {} (atol={})'.format(dim, atol))\n                else:\n                    all_failed = False\n            if all_failed:\n                print('All failed for dim {}'.format(dim))", "body": "It depends on the data generated and the precision I think. Wrote a quick snippet below where all results are at least equal with atol `1e-1` but for higher precisions the behaviour is data-dependent.\r\n\r\n```python\r\n#!/usr/bin/env python\r\nimport torch\r\nimport numpy as np\r\n\r\nif __name__ == '__main__':\r\n    for seed in (23, 435, 29, 560):\r\n        print('Seed: {}'.format(seed))\r\n        torch.manual_seed(seed)\r\n        for dim in [10,100,200,400,800,1600,2000]:\r\n            A = torch.randn([dim, dim])\r\n            b = torch.eye(dim)\r\n            x, _ = torch.gesv(b, A)\r\n\r\n            xn = np.linalg.solve(A.numpy(), b.numpy())\r\n            all_failed = True\r\n            for atol in [1e-1, 1e-2, 1e-3, 1e-4]:\r\n                if not np.allclose(x, xn, atol=atol):\r\n                    print('Failed for dim {} (atol={})'.format(dim, atol))\r\n                else:\r\n                    all_failed = False\r\n            if all_failed:\r\n                print('All failed for dim {}'.format(dim))\r\n```"}