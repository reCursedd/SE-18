{"url": "https://api.github.com/repos/pytorch/pytorch/issues/3558", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/3558/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/3558/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/3558/events", "html_url": "https://github.com/pytorch/pytorch/issues/3558", "id": 272051495, "node_id": "MDU6SXNzdWUyNzIwNTE0OTU=", "number": 3558, "title": "Numerical issue in torch.gesv(b, A) and torch.inverse()", "user": {"login": "gd-zhang", "id": 12405714, "node_id": "MDQ6VXNlcjEyNDA1NzE0", "avatar_url": "https://avatars3.githubusercontent.com/u/12405714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gd-zhang", "html_url": "https://github.com/gd-zhang", "followers_url": "https://api.github.com/users/gd-zhang/followers", "following_url": "https://api.github.com/users/gd-zhang/following{/other_user}", "gists_url": "https://api.github.com/users/gd-zhang/gists{/gist_id}", "starred_url": "https://api.github.com/users/gd-zhang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gd-zhang/subscriptions", "organizations_url": "https://api.github.com/users/gd-zhang/orgs", "repos_url": "https://api.github.com/users/gd-zhang/repos", "events_url": "https://api.github.com/users/gd-zhang/events{/privacy}", "received_events_url": "https://api.github.com/users/gd-zhang/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 553773019, "node_id": "MDU6TGFiZWw1NTM3NzMwMTk=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/needs-reproduction", "name": "needs-reproduction", "color": "e99695", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "SsnL", "id": 5674597, "node_id": "MDQ6VXNlcjU2NzQ1OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5674597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SsnL", "html_url": "https://github.com/SsnL", "followers_url": "https://api.github.com/users/SsnL/followers", "following_url": "https://api.github.com/users/SsnL/following{/other_user}", "gists_url": "https://api.github.com/users/SsnL/gists{/gist_id}", "starred_url": "https://api.github.com/users/SsnL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SsnL/subscriptions", "organizations_url": "https://api.github.com/users/SsnL/orgs", "repos_url": "https://api.github.com/users/SsnL/repos", "events_url": "https://api.github.com/users/SsnL/events{/privacy}", "received_events_url": "https://api.github.com/users/SsnL/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "SsnL", "id": 5674597, "node_id": "MDQ6VXNlcjU2NzQ1OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5674597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SsnL", "html_url": "https://github.com/SsnL", "followers_url": "https://api.github.com/users/SsnL/followers", "following_url": "https://api.github.com/users/SsnL/following{/other_user}", "gists_url": "https://api.github.com/users/SsnL/gists{/gist_id}", "starred_url": "https://api.github.com/users/SsnL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SsnL/subscriptions", "organizations_url": "https://api.github.com/users/SsnL/orgs", "repos_url": "https://api.github.com/users/SsnL/repos", "events_url": "https://api.github.com/users/SsnL/events{/privacy}", "received_events_url": "https://api.github.com/users/SsnL/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 4, "created_at": "2017-11-08T02:12:56Z", "updated_at": "2017-11-12T05:41:50Z", "closed_at": "2017-11-12T05:41:50Z", "author_association": "NONE", "body_html": "<p>I found gesv would get completely wrong results once the dimension of matrix A is large, say 200. (The same problem also occurs in torch.inverse()). But in numpy, linalg.solve works very well in much larger A and b.</p>\n<div class=\"highlight highlight-source-python\"><pre>A <span class=\"pl-k\">=</span> torch.randn([<span class=\"pl-c1\">200</span>, <span class=\"pl-c1\">200</span>])\nb <span class=\"pl-k\">=</span> torch.eye(<span class=\"pl-c1\">200</span>)\nx, _ <span class=\"pl-k\">=</span> torch.gesv(b, A)\nrec <span class=\"pl-k\">=</span> A.mm(x)</pre></div>\n<p>get rec:<br>\n12.5733     0.7703     3.3207  ...    -71.7724   -10.3178    -4.7247<br>\n28.7078     2.0905    17.2917  ...   -184.5936   -28.1566   -21.9251<br>\n55.6995     3.9526    29.5577  ...   -357.7238   -53.0334   -37.8292<br>\n...                  \u22f1                 ...<br>\n-29.2093    -2.0292   -15.7188  ...    188.9897    27.8947    19.6602<br>\n-57.7021    -3.9133   -21.4146  ...    349.9576    51.1917    30.0501<br>\n-5.3475    -0.3623    -1.7454  ...     31.8616     5.1076     3.6032</p>", "body_text": "I found gesv would get completely wrong results once the dimension of matrix A is large, say 200. (The same problem also occurs in torch.inverse()). But in numpy, linalg.solve works very well in much larger A and b.\nA = torch.randn([200, 200])\nb = torch.eye(200)\nx, _ = torch.gesv(b, A)\nrec = A.mm(x)\nget rec:\n12.5733     0.7703     3.3207  ...    -71.7724   -10.3178    -4.7247\n28.7078     2.0905    17.2917  ...   -184.5936   -28.1566   -21.9251\n55.6995     3.9526    29.5577  ...   -357.7238   -53.0334   -37.8292\n...                  \u22f1                 ...\n-29.2093    -2.0292   -15.7188  ...    188.9897    27.8947    19.6602\n-57.7021    -3.9133   -21.4146  ...    349.9576    51.1917    30.0501\n-5.3475    -0.3623    -1.7454  ...     31.8616     5.1076     3.6032", "body": "I found gesv would get completely wrong results once the dimension of matrix A is large, say 200. (The same problem also occurs in torch.inverse()). But in numpy, linalg.solve works very well in much larger A and b.\r\n\r\n```python\r\nA = torch.randn([200, 200])\r\nb = torch.eye(200)\r\nx, _ = torch.gesv(b, A)\r\nrec = A.mm(x)\r\n```\r\n\r\nget rec:\r\n   12.5733     0.7703     3.3207  ...    -71.7724   -10.3178    -4.7247\r\n   28.7078     2.0905    17.2917  ...   -184.5936   -28.1566   -21.9251\r\n   55.6995     3.9526    29.5577  ...   -357.7238   -53.0334   -37.8292\r\n              ...                  \u22f1                 ...               \r\n  -29.2093    -2.0292   -15.7188  ...    188.9897    27.8947    19.6602\r\n  -57.7021    -3.9133   -21.4146  ...    349.9576    51.1917    30.0501\r\n   -5.3475    -0.3623    -1.7454  ...     31.8616     5.1076     3.6032\r\n"}