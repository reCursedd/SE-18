{"url": "https://api.github.com/repos/pytorch/pytorch/issues/12746", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/12746/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/12746/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/12746/events", "html_url": "https://github.com/pytorch/pytorch/pull/12746", "id": 370886023, "node_id": "MDExOlB1bGxSZXF1ZXN0MjIzNDU5NjAy", "number": 12746, "title": "Fix print precision and match numpy behavior", "user": {"login": "ailzhang", "id": 5248122, "node_id": "MDQ6VXNlcjUyNDgxMjI=", "avatar_url": "https://avatars2.githubusercontent.com/u/5248122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ailzhang", "html_url": "https://github.com/ailzhang", "followers_url": "https://api.github.com/users/ailzhang/followers", "following_url": "https://api.github.com/users/ailzhang/following{/other_user}", "gists_url": "https://api.github.com/users/ailzhang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ailzhang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ailzhang/subscriptions", "organizations_url": "https://api.github.com/users/ailzhang/orgs", "repos_url": "https://api.github.com/users/ailzhang/repos", "events_url": "https://api.github.com/users/ailzhang/events{/privacy}", "received_events_url": "https://api.github.com/users/ailzhang/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-10-17T03:41:58Z", "updated_at": "2018-11-23T15:53:07Z", "closed_at": "2018-10-25T01:14:13Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/12746", "html_url": "https://github.com/pytorch/pytorch/pull/12746", "diff_url": "https://github.com/pytorch/pytorch/pull/12746.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/12746.patch"}, "body_html": "<p><span class=\"issue-keyword tooltipped tooltipped-se\" aria-label=\"This pull request closes issue #12578.\">Fixes</span> <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"369287279\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/12578\" data-hovercard-type=\"issue\" data-hovercard-url=\"/pytorch/pytorch/issues/12578/hovercard\" href=\"https://github.com/pytorch/pytorch/issues/12578\">#12578</a> <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"340757841\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/9395\" data-hovercard-type=\"issue\" data-hovercard-url=\"/pytorch/pytorch/issues/9395/hovercard\" href=\"https://github.com/pytorch/pytorch/issues/9395\">#9395</a>.</p>\n<ul>\n<li>\n<p>Fix and simplify print logic</p>\n</li>\n<li>\n<p>Follow numpy print rule <a href=\"https://github.com/numpy/numpy/blob/eb2bd11870731ea19a0eee72e616c7deb00f6c54/numpy/core/arrayprint.py#L859\">https://github.com/numpy/numpy/blob/eb2bd11870731ea19a0eee72e616c7deb00f6c54/numpy/core/arrayprint.py#L859</a></p>\n</li>\n</ul>\n<blockquote>\n<p>scientific notation is used when absolute value of the smallest number is &lt; 1e-4 or maximum &gt; 1e8 or the ratio of the maximum absolute value to the minimum is &gt; 1e3</p>\n</blockquote>\n<p>I hope I didn't break anything since there seems to be a lot of edge cases here... Here are some easy sanity checks.</p>\n<pre><code># For int tensor, we just print, never use scientific.\nIn [5]: torch.tensor(1)\nOut[5]: tensor(1)\nOut[2]: array(1) # numpy\n\nIn [6]: torch.tensor(10)\nOut[6]: tensor(10)\nOut[3]: array(10) # numpy\n\nIn [8]: torch.tensor(99000000)\nOut[8]: tensor(99000000)\nOut[5]: array(99000000) # numpy\n\nIn [9]: torch.tensor(100000000)\nOut[9]: tensor(100000000)\nOut[6]: array(100000000) # numpy\n\nIn [10]: torch.tensor(100000001)\nOut[10]: tensor(100000001)\nOut[7]: array(100000001) # numpy\n\nIn [11]: torch.tensor(1000000000)\nOut[11]: tensor(1000000000)\nOut[8]: array(1000000000) # numpy\n\nIn [12]: torch.tensor([1, 1000])\nOut[12]: tensor([   1, 1000])\nOut[9]: array([   1, 1000]) # numpy\n\nIn [13]: torch.tensor([1, 1010])\nOut[13]: tensor([   1, 1010])\nOut[10]: array([   1, 1010]) # numpy\n</code></pre>\n<p>For floating points, we use scientific when <code>max/min &gt; 1000 || max &gt; 1e8 || min &lt; 1e-4</code><br>\nLines with \"old\" are old behaviors that either has precision issue, or not aligned with numpy</p>\n<pre><code>In [14]: torch.tensor(0.01)\nOut[14]: tensor(0.0100)\nOut[11]: array(0.01) # numpy\n\nIn [15]: torch.tensor(0.1)\nOut[15]: tensor(0.1000)\nOut[12]: array(0.1) # numpy\n\nIn [16]: torch.tensor(0.0001)\nOut[16]: tensor(0.0001)\nOut[14]: array(0.0001) # numpy\n\nIn [17]: torch.tensor(0.00002)\nOut[17]: tensor(2.0000e-05)\nOut[15]: array(2e-05) # numpy\nOut[5]: tensor(0.0000) # old\n\nIn [18]: torch.tensor(1e8)\nOut[18]: tensor(100000000.)\nOut[16]: array(100000000.0) # numpy\n\nIn [19]: torch.tensor(1.1e8)\nOut[19]: tensor(1.1000e+08)\nOut[17]: array(1.1e8) # numpy 1.14.5, In &lt;= 1.13 this was not using scientific print\nOut[10]: tensor(110000000.) # old\n\nIn [20]: torch.tensor([0.01, 10.])\nOut[20]: tensor([ 0.0100, 10.0000])\nOut[18]: array([  0.01,  10.  ]) # numpy\n\nIn [21]: torch.tensor([0.01, 11.])\nOut[21]: tensor([1.0000e-02, 1.1000e+01])\nOut[19]: array([  1.00000000e-02,   1.10000000e+01]) # numpy\nOut[7]: tensor([ 0.0100, 11.0000]) # old\n</code></pre>\n<p>When print floating number in int mode, we still need to respect rules to use scientific mode first</p>\n<pre><code>In [22]: torch.tensor([1., 1000.])\nOut[22]: tensor([   1., 1000.])\nOut[20]: array([    1.,  1000.]) # numpy\n\nIn [23]: torch.tensor([1., 1010.])\nOut[23]: tensor([1.0000e+00, 1.0100e+03])\nOut[21]: array([  1.00000000e+00,   1.01000000e+03]) # numpy\nOut[9]: tensor([   1., 1010.]) # old\n</code></pre>", "body_text": "Fixes #12578 #9395.\n\n\nFix and simplify print logic\n\n\nFollow numpy print rule https://github.com/numpy/numpy/blob/eb2bd11870731ea19a0eee72e616c7deb00f6c54/numpy/core/arrayprint.py#L859\n\n\n\nscientific notation is used when absolute value of the smallest number is < 1e-4 or maximum > 1e8 or the ratio of the maximum absolute value to the minimum is > 1e3\n\nI hope I didn't break anything since there seems to be a lot of edge cases here... Here are some easy sanity checks.\n# For int tensor, we just print, never use scientific.\nIn [5]: torch.tensor(1)\nOut[5]: tensor(1)\nOut[2]: array(1) # numpy\n\nIn [6]: torch.tensor(10)\nOut[6]: tensor(10)\nOut[3]: array(10) # numpy\n\nIn [8]: torch.tensor(99000000)\nOut[8]: tensor(99000000)\nOut[5]: array(99000000) # numpy\n\nIn [9]: torch.tensor(100000000)\nOut[9]: tensor(100000000)\nOut[6]: array(100000000) # numpy\n\nIn [10]: torch.tensor(100000001)\nOut[10]: tensor(100000001)\nOut[7]: array(100000001) # numpy\n\nIn [11]: torch.tensor(1000000000)\nOut[11]: tensor(1000000000)\nOut[8]: array(1000000000) # numpy\n\nIn [12]: torch.tensor([1, 1000])\nOut[12]: tensor([   1, 1000])\nOut[9]: array([   1, 1000]) # numpy\n\nIn [13]: torch.tensor([1, 1010])\nOut[13]: tensor([   1, 1010])\nOut[10]: array([   1, 1010]) # numpy\n\nFor floating points, we use scientific when max/min > 1000 || max > 1e8 || min < 1e-4\nLines with \"old\" are old behaviors that either has precision issue, or not aligned with numpy\nIn [14]: torch.tensor(0.01)\nOut[14]: tensor(0.0100)\nOut[11]: array(0.01) # numpy\n\nIn [15]: torch.tensor(0.1)\nOut[15]: tensor(0.1000)\nOut[12]: array(0.1) # numpy\n\nIn [16]: torch.tensor(0.0001)\nOut[16]: tensor(0.0001)\nOut[14]: array(0.0001) # numpy\n\nIn [17]: torch.tensor(0.00002)\nOut[17]: tensor(2.0000e-05)\nOut[15]: array(2e-05) # numpy\nOut[5]: tensor(0.0000) # old\n\nIn [18]: torch.tensor(1e8)\nOut[18]: tensor(100000000.)\nOut[16]: array(100000000.0) # numpy\n\nIn [19]: torch.tensor(1.1e8)\nOut[19]: tensor(1.1000e+08)\nOut[17]: array(1.1e8) # numpy 1.14.5, In <= 1.13 this was not using scientific print\nOut[10]: tensor(110000000.) # old\n\nIn [20]: torch.tensor([0.01, 10.])\nOut[20]: tensor([ 0.0100, 10.0000])\nOut[18]: array([  0.01,  10.  ]) # numpy\n\nIn [21]: torch.tensor([0.01, 11.])\nOut[21]: tensor([1.0000e-02, 1.1000e+01])\nOut[19]: array([  1.00000000e-02,   1.10000000e+01]) # numpy\nOut[7]: tensor([ 0.0100, 11.0000]) # old\n\nWhen print floating number in int mode, we still need to respect rules to use scientific mode first\nIn [22]: torch.tensor([1., 1000.])\nOut[22]: tensor([   1., 1000.])\nOut[20]: array([    1.,  1000.]) # numpy\n\nIn [23]: torch.tensor([1., 1010.])\nOut[23]: tensor([1.0000e+00, 1.0100e+03])\nOut[21]: array([  1.00000000e+00,   1.01000000e+03]) # numpy\nOut[9]: tensor([   1., 1010.]) # old", "body": "Fixes #12578 #9395.\r\n\r\n* Fix and simplify print logic\r\n\r\n* Follow numpy print rule https://github.com/numpy/numpy/blob/eb2bd11870731ea19a0eee72e616c7deb00f6c54/numpy/core/arrayprint.py#L859\r\n> scientific notation is used when absolute value of the smallest number is < 1e-4 or maximum > 1e8 or the ratio of the maximum absolute value to the minimum is > 1e3\r\n\r\n\r\n\r\nI hope I didn't break anything since there seems to be a lot of edge cases here... Here are some easy sanity checks. \r\n```\r\n# For int tensor, we just print, never use scientific.\r\nIn [5]: torch.tensor(1)\r\nOut[5]: tensor(1)\r\nOut[2]: array(1) # numpy\r\n\r\nIn [6]: torch.tensor(10)\r\nOut[6]: tensor(10)\r\nOut[3]: array(10) # numpy\r\n\r\nIn [8]: torch.tensor(99000000)\r\nOut[8]: tensor(99000000)\r\nOut[5]: array(99000000) # numpy\r\n\r\nIn [9]: torch.tensor(100000000)\r\nOut[9]: tensor(100000000)\r\nOut[6]: array(100000000) # numpy\r\n\r\nIn [10]: torch.tensor(100000001)\r\nOut[10]: tensor(100000001)\r\nOut[7]: array(100000001) # numpy\r\n\r\nIn [11]: torch.tensor(1000000000)\r\nOut[11]: tensor(1000000000)\r\nOut[8]: array(1000000000) # numpy\r\n\r\nIn [12]: torch.tensor([1, 1000])\r\nOut[12]: tensor([   1, 1000])\r\nOut[9]: array([   1, 1000]) # numpy\r\n\r\nIn [13]: torch.tensor([1, 1010])\r\nOut[13]: tensor([   1, 1010])\r\nOut[10]: array([   1, 1010]) # numpy\r\n```\r\nFor floating points, we use scientific when `max/min > 1000 || max > 1e8 || min < 1e-4`\r\nLines with \"old\" are old behaviors that either has precision issue, or not aligned with numpy\r\n```\r\nIn [14]: torch.tensor(0.01)\r\nOut[14]: tensor(0.0100)\r\nOut[11]: array(0.01) # numpy\r\n\r\nIn [15]: torch.tensor(0.1)\r\nOut[15]: tensor(0.1000)\r\nOut[12]: array(0.1) # numpy\r\n\r\nIn [16]: torch.tensor(0.0001)\r\nOut[16]: tensor(0.0001)\r\nOut[14]: array(0.0001) # numpy\r\n\r\nIn [17]: torch.tensor(0.00002)\r\nOut[17]: tensor(2.0000e-05)\r\nOut[15]: array(2e-05) # numpy\r\nOut[5]: tensor(0.0000) # old\r\n\r\nIn [18]: torch.tensor(1e8)\r\nOut[18]: tensor(100000000.)\r\nOut[16]: array(100000000.0) # numpy\r\n\r\nIn [19]: torch.tensor(1.1e8)\r\nOut[19]: tensor(1.1000e+08)\r\nOut[17]: array(1.1e8) # numpy 1.14.5, In <= 1.13 this was not using scientific print\r\nOut[10]: tensor(110000000.) # old\r\n\r\nIn [20]: torch.tensor([0.01, 10.])\r\nOut[20]: tensor([ 0.0100, 10.0000])\r\nOut[18]: array([  0.01,  10.  ]) # numpy\r\n\r\nIn [21]: torch.tensor([0.01, 11.])\r\nOut[21]: tensor([1.0000e-02, 1.1000e+01])\r\nOut[19]: array([  1.00000000e-02,   1.10000000e+01]) # numpy\r\nOut[7]: tensor([ 0.0100, 11.0000]) # old\r\n```\r\nWhen print floating number in int mode, we still need to respect rules to use scientific mode first\r\n```\r\nIn [22]: torch.tensor([1., 1000.])\r\nOut[22]: tensor([   1., 1000.])\r\nOut[20]: array([    1.,  1000.]) # numpy\r\n\r\nIn [23]: torch.tensor([1., 1010.])\r\nOut[23]: tensor([1.0000e+00, 1.0100e+03])\r\nOut[21]: array([  1.00000000e+00,   1.01000000e+03]) # numpy\r\nOut[9]: tensor([   1., 1010.]) # old\r\n```\r\n"}