{"url": "https://api.github.com/repos/pytorch/pytorch/issues/7740", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/7740/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/7740/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/7740/events", "html_url": "https://github.com/pytorch/pytorch/issues/7740", "id": 325023266, "node_id": "MDU6SXNzdWUzMjUwMjMyNjY=", "number": 7740, "title": "Conv3D can be optimized for cases when kernel is spatial (probably)", "user": {"login": "Naman-ntc", "id": 23135406, "node_id": "MDQ6VXNlcjIzMTM1NDA2", "avatar_url": "https://avatars2.githubusercontent.com/u/23135406?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Naman-ntc", "html_url": "https://github.com/Naman-ntc", "followers_url": "https://api.github.com/users/Naman-ntc/followers", "following_url": "https://api.github.com/users/Naman-ntc/following{/other_user}", "gists_url": "https://api.github.com/users/Naman-ntc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Naman-ntc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Naman-ntc/subscriptions", "organizations_url": "https://api.github.com/users/Naman-ntc/orgs", "repos_url": "https://api.github.com/users/Naman-ntc/repos", "events_url": "https://api.github.com/users/Naman-ntc/events{/privacy}", "received_events_url": "https://api.github.com/users/Naman-ntc/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-05-21T18:58:52Z", "updated_at": "2018-05-21T18:58:52Z", "closed_at": null, "author_association": "CONTRIBUTOR", "body_html": "<p>While using 3D CNNs we may need to use kernels with temporal dimension 1 (i.e. 1xHxW kernel), example 3D Resnet.</p>\n<p>It would be similar to using a 2D Conv on reshaped input. What I have observed is that if i reshape, then do a 2D conv and then reshape back I get quicker results than 3D conv (which is maybe not very surprising).</p>\n<p><a href=\"https://discuss.pytorch.org/t/conv3d-can-be-optimized-for-case-when-no-temporal-stride-done/18184\" rel=\"nofollow\">Here</a> is link to form post I created referencing this issue.</p>\n<p>While measuring speed I used <code>torch.cuda.synchronize</code> so I hope my calculations were correct.</p>\n<p><a href=\"https://www.cse.iitb.ac.in/~namanjain/test2DConv.py\" rel=\"nofollow\">Here</a> is the script I used for method using 2D Convolutions and <a href=\"https://www.cse.iitb.ac.in/~namanjain/test3DConv.py\" rel=\"nofollow\">here</a><br>\nis the one that used plane 3D convs.</p>\n<p>I might have miscalculated the times but my observations showed scope of improvement which I believe would be useful..</p>\n<p>What do you guys think???</p>", "body_text": "While using 3D CNNs we may need to use kernels with temporal dimension 1 (i.e. 1xHxW kernel), example 3D Resnet.\nIt would be similar to using a 2D Conv on reshaped input. What I have observed is that if i reshape, then do a 2D conv and then reshape back I get quicker results than 3D conv (which is maybe not very surprising).\nHere is link to form post I created referencing this issue.\nWhile measuring speed I used torch.cuda.synchronize so I hope my calculations were correct.\nHere is the script I used for method using 2D Convolutions and here\nis the one that used plane 3D convs.\nI might have miscalculated the times but my observations showed scope of improvement which I believe would be useful..\nWhat do you guys think???", "body": "While using 3D CNNs we may need to use kernels with temporal dimension 1 (i.e. 1xHxW kernel), example 3D Resnet.\r\n\r\nIt would be similar to using a 2D Conv on reshaped input. What I have observed is that if i reshape, then do a 2D conv and then reshape back I get quicker results than 3D conv (which is maybe not very surprising).\r\n\r\n[Here](https://discuss.pytorch.org/t/conv3d-can-be-optimized-for-case-when-no-temporal-stride-done/18184) is link to form post I created referencing this issue.\r\n\r\nWhile measuring speed I used `torch.cuda.synchronize` so I hope my calculations were correct. \r\n\r\n[Here](https://www.cse.iitb.ac.in/~namanjain/test2DConv.py) is the script I used for method using 2D Convolutions and [here](https://www.cse.iitb.ac.in/~namanjain/test3DConv.py)\r\nis the one that used plane 3D convs.\r\n\r\nI might have miscalculated the times but my observations showed scope of improvement which I believe would be useful..\r\n\r\nWhat do you guys think???\r\n\r\n"}