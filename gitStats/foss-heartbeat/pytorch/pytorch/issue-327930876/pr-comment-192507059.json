{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/192507059", "pull_request_review_id": 125306459, "id": 192507059, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MjUwNzA1OQ==", "diff_hunk": "@@ -17,18 +14,27 @@\n \n #include <typeinfo>\n \n-#ifndef NO_PYTHON\n-#include \"torch/csrc/autograd/python_engine.h\"\n-#include \"torch/csrc/autograd/python_variable.h\"\n-#include \"torch/csrc/jit/pybind.h\"\n-#include \"torch/csrc/utils/auto_gil.h\"\n-\n-namespace py = pybind11;\n-#endif\n-\n namespace torch { namespace jit {\n \n \n+// externally registered handles, currently used so that python ops\n+// can be in a separate compilation unit\n+static std::mutex handler_mutex;\n+static std::vector<OpHandler> handlers;\n+void addInterpreterOpHandler(OpHandler handler) {\n+  std::lock_guard<std::mutex> guard(handler_mutex);\n+  handlers.push_back(handler);\n+}\n+at::optional<Operation> lookupExternalOp(Node* n) {\n+  std::lock_guard<std::mutex> guard(handler_mutex);\n+  for(auto & handler : handlers) {", "path": "torch/csrc/jit/interpreter.cpp", "position": 33, "original_position": 33, "commit_id": "9b66ecf5a329615b226faf8d3bf90441e1df389b", "original_commit_id": "9b66ecf5a329615b226faf8d3bf90441e1df389b", "user": {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, "body": "I know you are joking, but the indention here is that each handler doesn't check a single op, but that each handler checks _all_ the ops that a shared library has added. So the number of handlers should be a small constant.", "created_at": "2018-06-01T20:27:26Z", "updated_at": "2018-11-23T15:44:51Z", "html_url": "https://github.com/pytorch/pytorch/pull/7970#discussion_r192507059", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/7970", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/192507059"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/7970#discussion_r192507059"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/7970"}}, "body_html": "<p>I know you are joking, but the indention here is that each handler doesn't check a single op, but that each handler checks <em>all</em> the ops that a shared library has added. So the number of handlers should be a small constant.</p>", "body_text": "I know you are joking, but the indention here is that each handler doesn't check a single op, but that each handler checks all the ops that a shared library has added. So the number of handlers should be a small constant.", "in_reply_to_id": 192279582}