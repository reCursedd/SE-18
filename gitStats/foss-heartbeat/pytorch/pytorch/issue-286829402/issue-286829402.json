{"url": "https://api.github.com/repos/pytorch/pytorch/issues/4536", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/4536/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/4536/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/4536/events", "html_url": "https://github.com/pytorch/pytorch/pull/4536", "id": 286829402, "node_id": "MDExOlB1bGxSZXF1ZXN0MTYxNjg3ODQ5", "number": 4536, "title": "[ATen] Support wrapping dimensions over scalars.", "user": {"login": "gchanan", "id": 3768583, "node_id": "MDQ6VXNlcjM3Njg1ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3768583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gchanan", "html_url": "https://github.com/gchanan", "followers_url": "https://api.github.com/users/gchanan/followers", "following_url": "https://api.github.com/users/gchanan/following{/other_user}", "gists_url": "https://api.github.com/users/gchanan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gchanan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gchanan/subscriptions", "organizations_url": "https://api.github.com/users/gchanan/orgs", "repos_url": "https://api.github.com/users/gchanan/repos", "events_url": "https://api.github.com/users/gchanan/events{/privacy}", "received_events_url": "https://api.github.com/users/gchanan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-01-08T17:53:45Z", "updated_at": "2018-11-23T15:37:59Z", "closed_at": "2018-01-09T00:54:27Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/4536", "html_url": "https://github.com/pytorch/pytorch/pull/4536", "diff_url": "https://github.com/pytorch/pytorch/pull/4536.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/4536.patch"}, "body_html": "<p>This follows the behavior of numpy in that you can wrap dimensions over a scalar (0-dimensional<br>\ntensor) in the range [-1, 0].  I.e. scalarTensor.prod(0) and scalarTensor.prod(-1) works, but<br>\nscalarTensor.prod(2) does not.</p>\n<p>The only current exception to this is with size(dim) and stride(dim);<br>\nthere are no numpy equivalents of these (they are attributes), so it seems cleaner to just have<br>\nthese as (dimensional wrapping) sugar for sizes()[dim] and strides()[dim]; otherwise there are<br>\nsubtle differences in semantics, e.g. you have to use size(dim) when you want it to directly<br>\napply to scalars, if the default value (1?) makes sense in that case.  Simpler to just not have<br>\nthat difference.</p>\n<p>Note that this change can cause problems if code assumed that maybe_wrap_dim would throw an<br>\nexception in this case and then called sizes()[dim] or size(dim) without checking; I went<br>\nthrough the code and only found this case in squeeze/squeeze_.</p>", "body_text": "This follows the behavior of numpy in that you can wrap dimensions over a scalar (0-dimensional\ntensor) in the range [-1, 0].  I.e. scalarTensor.prod(0) and scalarTensor.prod(-1) works, but\nscalarTensor.prod(2) does not.\nThe only current exception to this is with size(dim) and stride(dim);\nthere are no numpy equivalents of these (they are attributes), so it seems cleaner to just have\nthese as (dimensional wrapping) sugar for sizes()[dim] and strides()[dim]; otherwise there are\nsubtle differences in semantics, e.g. you have to use size(dim) when you want it to directly\napply to scalars, if the default value (1?) makes sense in that case.  Simpler to just not have\nthat difference.\nNote that this change can cause problems if code assumed that maybe_wrap_dim would throw an\nexception in this case and then called sizes()[dim] or size(dim) without checking; I went\nthrough the code and only found this case in squeeze/squeeze_.", "body": "This follows the behavior of numpy in that you can wrap dimensions over a scalar (0-dimensional\r\ntensor) in the range [-1, 0].  I.e. scalarTensor.prod(0) and scalarTensor.prod(-1) works, but\r\nscalarTensor.prod(2) does not.\r\n\r\nThe only current exception to this is with size(dim) and stride(dim);\r\nthere are no numpy equivalents of these (they are attributes), so it seems cleaner to just have\r\nthese as (dimensional wrapping) sugar for sizes()[dim] and strides()[dim]; otherwise there are\r\nsubtle differences in semantics, e.g. you have to use size(dim) when you want it to directly\r\napply to scalars, if the default value (1?) makes sense in that case.  Simpler to just not have\r\nthat difference.\r\n\r\nNote that this change can cause problems if code assumed that maybe_wrap_dim would throw an\r\nexception in this case and then called sizes()[dim] or size(dim) without checking; I went\r\nthrough the code and only found this case in squeeze/squeeze_."}