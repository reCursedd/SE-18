{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/352482758", "html_url": "https://github.com/pytorch/pytorch/issues/4219#issuecomment-352482758", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/4219", "id": 352482758, "node_id": "MDEyOklzc3VlQ29tbWVudDM1MjQ4Mjc1OA==", "user": {"login": "fmassa", "id": 9110200, "node_id": "MDQ6VXNlcjkxMTAyMDA=", "avatar_url": "https://avatars2.githubusercontent.com/u/9110200?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fmassa", "html_url": "https://github.com/fmassa", "followers_url": "https://api.github.com/users/fmassa/followers", "following_url": "https://api.github.com/users/fmassa/following{/other_user}", "gists_url": "https://api.github.com/users/fmassa/gists{/gist_id}", "starred_url": "https://api.github.com/users/fmassa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fmassa/subscriptions", "organizations_url": "https://api.github.com/users/fmassa/orgs", "repos_url": "https://api.github.com/users/fmassa/repos", "events_url": "https://api.github.com/users/fmassa/events{/privacy}", "received_events_url": "https://api.github.com/users/fmassa/received_events", "type": "User", "site_admin": false}, "created_at": "2017-12-18T16:41:41Z", "updated_at": "2017-12-18T16:41:41Z", "author_association": "MEMBER", "body_html": "<p>Oh, no, boolean indexing means that only non-zero entries will be considered for indexing.<br>\nSo</p>\n<div class=\"highlight highlight-source-python\"><pre>a <span class=\"pl-k\">=</span> torch.rand(<span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">2</span>)\na[a <span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">0.5</span>] <span class=\"pl-k\">=</span> <span class=\"pl-c1\">0</span>\n<span class=\"pl-c1\">print</span>(a[a <span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">0.5</span>]) <span class=\"pl-c\"><span class=\"pl-c\">#</span> 1d tensor</span></pre></div>\n<p>The equivalent in terms of LongTensor indexing would be somewhat similar to using <code>nonzero</code> in the boolean array.</p>", "body_text": "Oh, no, boolean indexing means that only non-zero entries will be considered for indexing.\nSo\na = torch.rand(2, 2, 2)\na[a > 0.5] = 0\nprint(a[a > 0.5]) # 1d tensor\nThe equivalent in terms of LongTensor indexing would be somewhat similar to using nonzero in the boolean array.", "body": "Oh, no, boolean indexing means that only non-zero entries will be considered for indexing.\r\nSo\r\n```python\r\na = torch.rand(2, 2, 2)\r\na[a > 0.5] = 0\r\nprint(a[a > 0.5]) # 1d tensor\r\n```\r\nThe equivalent in terms of LongTensor indexing would be somewhat similar to using `nonzero` in the boolean array."}