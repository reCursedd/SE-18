{"url": "https://api.github.com/repos/pytorch/pytorch/issues/4726", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/4726/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/4726/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/4726/events", "html_url": "https://github.com/pytorch/pytorch/pull/4726", "id": 289750781, "node_id": "MDExOlB1bGxSZXF1ZXN0MTYzODAyOTIx", "number": 4726, "title": "Various testing and utility improvements including torch.testing module.", "user": {"login": "gchanan", "id": 3768583, "node_id": "MDQ6VXNlcjM3Njg1ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3768583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gchanan", "html_url": "https://github.com/gchanan", "followers_url": "https://api.github.com/users/gchanan/followers", "following_url": "https://api.github.com/users/gchanan/following{/other_user}", "gists_url": "https://api.github.com/users/gchanan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gchanan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gchanan/subscriptions", "organizations_url": "https://api.github.com/users/gchanan/orgs", "repos_url": "https://api.github.com/users/gchanan/repos", "events_url": "https://api.github.com/users/gchanan/events{/privacy}", "received_events_url": "https://api.github.com/users/gchanan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-01-18T19:38:13Z", "updated_at": "2018-11-23T15:38:19Z", "closed_at": "2018-01-19T15:54:42Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/4726", "html_url": "https://github.com/pytorch/pytorch/pull/4726", "diff_url": "https://github.com/pytorch/pytorch/pull/4726.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/4726.patch"}, "body_html": "<ol>\n<li>Remove method definition for randn_like since ones_like, zeros_like do not have methods.</li>\n<li>Add an empty_like native function for creating a tensor with uninitialized values.</li>\n<li>Add an is_floating_point() native function, similar to is_signed().</li>\n<li>Add a torch.testing module loosely modeled after numpy.testing; currently it contains make_non_contiguous (moved from test_autograd) and randn_like (wrapper around the VariableFunction).</li>\n<li>Remove code from test_autograd and test_nn that is responsible for generating grad_outputs to use with gradgradcheck.  These now use gradgradcheck's own generating code.  This fixes test_nn.py with scalars because gradgradcheck does the right thing here already.</li>\n</ol>", "body_text": "Remove method definition for randn_like since ones_like, zeros_like do not have methods.\nAdd an empty_like native function for creating a tensor with uninitialized values.\nAdd an is_floating_point() native function, similar to is_signed().\nAdd a torch.testing module loosely modeled after numpy.testing; currently it contains make_non_contiguous (moved from test_autograd) and randn_like (wrapper around the VariableFunction).\nRemove code from test_autograd and test_nn that is responsible for generating grad_outputs to use with gradgradcheck.  These now use gradgradcheck's own generating code.  This fixes test_nn.py with scalars because gradgradcheck does the right thing here already.", "body": "1) Remove method definition for randn_like since ones_like, zeros_like do not have methods.\r\n2) Add an empty_like native function for creating a tensor with uninitialized values.\r\n3) Add an is_floating_point() native function, similar to is_signed().\r\n4) Add a torch.testing module loosely modeled after numpy.testing; currently it contains make_non_contiguous (moved from test_autograd) and randn_like (wrapper around the VariableFunction).\r\n5) Remove code from test_autograd and test_nn that is responsible for generating grad_outputs to use with gradgradcheck.  These now use gradgradcheck's own generating code.  This fixes test_nn.py with scalars because gradgradcheck does the right thing here already."}