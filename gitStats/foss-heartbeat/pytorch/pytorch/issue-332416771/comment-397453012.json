{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/397453012", "html_url": "https://github.com/pytorch/pytorch/issues/8483#issuecomment-397453012", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/8483", "id": 397453012, "node_id": "MDEyOklzc3VlQ29tbWVudDM5NzQ1MzAxMg==", "user": {"login": "phalexo", "id": 4603365, "node_id": "MDQ6VXNlcjQ2MDMzNjU=", "avatar_url": "https://avatars1.githubusercontent.com/u/4603365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phalexo", "html_url": "https://github.com/phalexo", "followers_url": "https://api.github.com/users/phalexo/followers", "following_url": "https://api.github.com/users/phalexo/following{/other_user}", "gists_url": "https://api.github.com/users/phalexo/gists{/gist_id}", "starred_url": "https://api.github.com/users/phalexo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phalexo/subscriptions", "organizations_url": "https://api.github.com/users/phalexo/orgs", "repos_url": "https://api.github.com/users/phalexo/repos", "events_url": "https://api.github.com/users/phalexo/events{/privacy}", "received_events_url": "https://api.github.com/users/phalexo/received_events", "type": "User", "site_admin": false}, "created_at": "2018-06-14T22:06:28Z", "updated_at": "2018-06-14T22:06:28Z", "author_association": "NONE", "body_html": "<p>I've been looking at the changes and unfortunately I am not seeing how everything is connected.</p>\n<p>The first error occurs in this line:<br>\nsuccess = BilinearSamplerBHWD_updateOutput_cuda_kernel(output-&gt;size[1],<br>\noutput is the \"undefined\" pointer. It does not appear to be a stream.</p>\n<p>#include &lt;THC/THC.h&gt;<br>\n#include &lt;stdbool.h&gt;<br>\n#include &lt;stdio.h&gt;<br>\n#include \"roi_crop_cuda_kernel.h\"</p>\n<p>#define real float</p>\n<p>// this symbol will be resolved automatically from PyTorch libs<br>\nextern THCState *state;</p>\n<p>// Bilinear sampling is done in BHWD (coalescing is not obvious in BDHW)<br>\n// we assume BHWD format in inputImages<br>\n// we assume BHW(YX) format on grids</p>\n<p>int BilinearSamplerBHWD_updateOutput_cuda(THCudaTensor *inputImages, THCudaTensor *grids, THCudaTensor *output){<br>\n//  THCState *state = getCutorchState(L);<br>\n//  THCudaTensor *inputImages = (THCudaTensor *)luaT_checkudata(L, 2, \"torch.CudaTensor\");<br>\n//  THCudaTensor *grids = (THCudaTensor *)luaT_checkudata(L, 3, \"torch.CudaTensor\");<br>\n//  THCudaTensor *output = (THCudaTensor *)luaT_checkudata(L, 4, \"torch.CudaTensor\");</p>\n<p>int success = 0;<br>\nsuccess = BilinearSamplerBHWD_updateOutput_cuda_kernel(output-&gt;size[1],<br>\noutput-&gt;size[3],<br>\noutput-&gt;size[2],<br>\noutput-&gt;size[0],<br>\nTHCudaTensor_size(state, inputImages, 1),<br>\nTHCudaTensor_size(state, inputImages, 2),<br>\nTHCudaTensor_size(state, inputImages, 3),<br>\nTHCudaTensor_size(state, inputImages, 0),<br>\nTHCudaTensor_data(state, inputImages),<br>\nTHCudaTensor_stride(state, inputImages, 0),<br>\nTHCudaTensor_stride(state, inputImages, 1),<br>\nTHCudaTensor_stride(state, inputImages, 2),<br>\nTHCudaTensor_stride(state, inputImages, 3),<br>\nTHCudaTensor_data(state, grids),<br>\nTHCudaTensor_stride(state, grids, 0),<br>\nTHCudaTensor_stride(state, grids, 3),<br>\nTHCudaTensor_stride(state, grids, 1),<br>\nTHCudaTensor_stride(state, grids, 2),<br>\nTHCudaTensor_data(state, output),<br>\nTHCudaTensor_stride(state, output, 0),<br>\nTHCudaTensor_stride(state, output, 1),<br>\nTHCudaTensor_stride(state, output, 2),<br>\nTHCudaTensor_stride(state, output, 3),<br>\nTHCState_getCurrentStream(state));</p>\n<p>//check for errors<br>\nif (!success) {<br>\nTHError(\"aborting\");<br>\n}<br>\nreturn 1;<br>\n}</p>", "body_text": "I've been looking at the changes and unfortunately I am not seeing how everything is connected.\nThe first error occurs in this line:\nsuccess = BilinearSamplerBHWD_updateOutput_cuda_kernel(output->size[1],\noutput is the \"undefined\" pointer. It does not appear to be a stream.\n#include <THC/THC.h>\n#include <stdbool.h>\n#include <stdio.h>\n#include \"roi_crop_cuda_kernel.h\"\n#define real float\n// this symbol will be resolved automatically from PyTorch libs\nextern THCState *state;\n// Bilinear sampling is done in BHWD (coalescing is not obvious in BDHW)\n// we assume BHWD format in inputImages\n// we assume BHW(YX) format on grids\nint BilinearSamplerBHWD_updateOutput_cuda(THCudaTensor *inputImages, THCudaTensor *grids, THCudaTensor *output){\n//  THCState *state = getCutorchState(L);\n//  THCudaTensor *inputImages = (THCudaTensor *)luaT_checkudata(L, 2, \"torch.CudaTensor\");\n//  THCudaTensor *grids = (THCudaTensor *)luaT_checkudata(L, 3, \"torch.CudaTensor\");\n//  THCudaTensor *output = (THCudaTensor *)luaT_checkudata(L, 4, \"torch.CudaTensor\");\nint success = 0;\nsuccess = BilinearSamplerBHWD_updateOutput_cuda_kernel(output->size[1],\noutput->size[3],\noutput->size[2],\noutput->size[0],\nTHCudaTensor_size(state, inputImages, 1),\nTHCudaTensor_size(state, inputImages, 2),\nTHCudaTensor_size(state, inputImages, 3),\nTHCudaTensor_size(state, inputImages, 0),\nTHCudaTensor_data(state, inputImages),\nTHCudaTensor_stride(state, inputImages, 0),\nTHCudaTensor_stride(state, inputImages, 1),\nTHCudaTensor_stride(state, inputImages, 2),\nTHCudaTensor_stride(state, inputImages, 3),\nTHCudaTensor_data(state, grids),\nTHCudaTensor_stride(state, grids, 0),\nTHCudaTensor_stride(state, grids, 3),\nTHCudaTensor_stride(state, grids, 1),\nTHCudaTensor_stride(state, grids, 2),\nTHCudaTensor_data(state, output),\nTHCudaTensor_stride(state, output, 0),\nTHCudaTensor_stride(state, output, 1),\nTHCudaTensor_stride(state, output, 2),\nTHCudaTensor_stride(state, output, 3),\nTHCState_getCurrentStream(state));\n//check for errors\nif (!success) {\nTHError(\"aborting\");\n}\nreturn 1;\n}", "body": "I've been looking at the changes and unfortunately I am not seeing how everything is connected. \r\n\r\nThe first error occurs in this line:\r\n  success = BilinearSamplerBHWD_updateOutput_cuda_kernel(output->size[1],\r\noutput is the \"undefined\" pointer. It does not appear to be a stream.\r\n\r\n#include <THC/THC.h>\r\n#include <stdbool.h>\r\n#include <stdio.h>\r\n#include \"roi_crop_cuda_kernel.h\"\r\n\r\n#define real float\r\n\r\n// this symbol will be resolved automatically from PyTorch libs\r\nextern THCState *state;\r\n\r\n// Bilinear sampling is done in BHWD (coalescing is not obvious in BDHW)\r\n// we assume BHWD format in inputImages\r\n// we assume BHW(YX) format on grids\r\n\r\nint BilinearSamplerBHWD_updateOutput_cuda(THCudaTensor *inputImages, THCudaTensor *grids, THCudaTensor *output){\r\n//  THCState *state = getCutorchState(L);\r\n//  THCudaTensor *inputImages = (THCudaTensor *)luaT_checkudata(L, 2, \"torch.CudaTensor\");\r\n//  THCudaTensor *grids = (THCudaTensor *)luaT_checkudata(L, 3, \"torch.CudaTensor\");\r\n//  THCudaTensor *output = (THCudaTensor *)luaT_checkudata(L, 4, \"torch.CudaTensor\");\r\n\r\n  int success = 0;\r\n  success = BilinearSamplerBHWD_updateOutput_cuda_kernel(output->size[1],\r\n                                               output->size[3],\r\n                                               output->size[2],\r\n                                               output->size[0],\r\n                                               THCudaTensor_size(state, inputImages, 1),\r\n                                               THCudaTensor_size(state, inputImages, 2),\r\n                                               THCudaTensor_size(state, inputImages, 3),\r\n                                               THCudaTensor_size(state, inputImages, 0),\r\n                                               THCudaTensor_data(state, inputImages),\r\n                                               THCudaTensor_stride(state, inputImages, 0),\r\n                                               THCudaTensor_stride(state, inputImages, 1),\r\n                                               THCudaTensor_stride(state, inputImages, 2),\r\n                                               THCudaTensor_stride(state, inputImages, 3),\r\n                                               THCudaTensor_data(state, grids),\r\n                                               THCudaTensor_stride(state, grids, 0),\r\n                                               THCudaTensor_stride(state, grids, 3),\r\n                                               THCudaTensor_stride(state, grids, 1),\r\n                                               THCudaTensor_stride(state, grids, 2),\r\n                                               THCudaTensor_data(state, output),\r\n                                               THCudaTensor_stride(state, output, 0),\r\n                                               THCudaTensor_stride(state, output, 1),\r\n                                               THCudaTensor_stride(state, output, 2),\r\n                                               THCudaTensor_stride(state, output, 3),\r\n                                               THCState_getCurrentStream(state));\r\n\r\n  //check for errors\r\n  if (!success) {\r\n    THError(\"aborting\");\r\n  }\r\n  return 1;\r\n}\r\n"}