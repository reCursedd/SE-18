{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/234025379", "pull_request_review_id": 175577816, "id": 234025379, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzNDAyNTM3OQ==", "diff_hunk": "@@ -1,69 +1,72 @@\n #pragma once\n \n-#include <ATen/core/ivalue.h>\n-#include <ATen/core/interned_strings.h>\n-#include <ATen/core/functional.h>\n-#include <ATen/core/Type.h>\n #include <ATen/core/TensorMethods.h>\n+#include <ATen/core/Type.h>\n+#include <ATen/core/functional.h>\n+#include <ATen/core/interned_strings.h>\n+#include <ATen/core/ivalue.h>\n \n #include <caffe2/core/common.h>\n \n-#include <memory>\n #include <iostream>\n+#include <memory>\n #include <type_traits>\n \n namespace c10 {\n \n #define C10_FORALL_TYPES(_) \\\n-_(DynamicType) \\\n-_(TensorType) \\\n-_(CompleteTensorType) \\\n-_(UndefinedTensorType) \\\n-_(TupleType) \\\n-_(ListType) \\\n-_(NumberType) \\\n-_(FloatType) \\\n-_(FutureType) \\\n-_(IntType) \\\n-_(NoneType) \\\n-_(StringType) \\\n-_(GeneratorType) \\\n-_(BoolType) \\\n-_(OptionalType) \\\n-_(VarType) \\\n+  _(DynamicType)            \\\n+  _(TensorType)             \\\n+  _(CompleteTensorType)     \\\n+  _(UndefinedTensorType)    \\\n+  _(TupleType)              \\\n+  _(ListType)               \\\n+  _(NumberType)             \\\n+  _(FloatType)              \\\n+  _(FutureType)             \\\n+  _(IntType)                \\\n+  _(NoneType)               \\\n+  _(StringType)             \\\n+  _(GeneratorType)          \\\n+  _(BoolType)               \\\n+  _(OptionalType)           \\\n+  _(VarType)\n \n enum class TypeKind {\n #define DEFINE_TYPE(T) T,\n   C10_FORALL_TYPES(DEFINE_TYPE)\n #undef DEFINE_TYPE\n };\n \n-#define DEFINE_IS_SUBCLASS(_kind) \\\n+#define DEFINE_IS_SUBCLASS(_kind)                       \\\n   bool isSubclass(const TypeKind kind) const override { \\\n-    return kind == TypeKind::_kind; \\\n+    return kind == TypeKind::_kind;                     \\\n   }\n \n+inline static at::Device ConvertIntToDevice(int device) {", "path": "aten/src/ATen/core/jit_type.h", "position": 69, "original_position": 69, "commit_id": "7b828ab2106f071dec7eb5b8e06a7bc9538c6fff", "original_commit_id": "7b828ab2106f071dec7eb5b8e06a7bc9538c6fff", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "This is very CUDA-specific; put CUDA in its name? :)", "created_at": "2018-11-15T22:03:17Z", "updated_at": "2018-11-23T15:54:57Z", "html_url": "https://github.com/pytorch/pytorch/pull/14008#discussion_r234025379", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/14008", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/234025379"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/14008#discussion_r234025379"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/14008"}}, "body_html": "<p>This is very CUDA-specific; put CUDA in its name? :)</p>", "body_text": "This is very CUDA-specific; put CUDA in its name? :)"}