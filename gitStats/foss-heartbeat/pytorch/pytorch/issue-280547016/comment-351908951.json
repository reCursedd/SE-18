{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/351908951", "html_url": "https://github.com/pytorch/pytorch/pull/4087#issuecomment-351908951", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/4087", "id": 351908951, "node_id": "MDEyOklzc3VlQ29tbWVudDM1MTkwODk1MQ==", "user": {"login": "zou3519", "id": 5652049, "node_id": "MDQ6VXNlcjU2NTIwNDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/5652049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zou3519", "html_url": "https://github.com/zou3519", "followers_url": "https://api.github.com/users/zou3519/followers", "following_url": "https://api.github.com/users/zou3519/following{/other_user}", "gists_url": "https://api.github.com/users/zou3519/gists{/gist_id}", "starred_url": "https://api.github.com/users/zou3519/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zou3519/subscriptions", "organizations_url": "https://api.github.com/users/zou3519/orgs", "repos_url": "https://api.github.com/users/zou3519/repos", "events_url": "https://api.github.com/users/zou3519/events{/privacy}", "received_events_url": "https://api.github.com/users/zou3519/received_events", "type": "User", "site_admin": false}, "created_at": "2017-12-15T04:14:20Z", "updated_at": "2017-12-15T04:14:20Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Good point, I hadn't thought about implementing the shape checks in aten. I think it shouldn't be too bad to do that: I could rename <code>cat</code> in the cwrap to something and implement a native function that wraps the renamed <code>cat</code> along with performing size checks.</p>\n<p>The two downsides I see with this approach are that:</p>\n<ul>\n<li>tensors don't benefit from the size check (only Variables, since size check is in aten). When tensors/Variables get merged this won't be a problem</li>\n<li>we'd be doing an extra pass through the list of tensors to cat. Right now the size of the final tensor is computed at the same time as the size checks; separating the two would mean two loops, one for the size checks (in aten), and another to compute the size of the final tensor (in TH). This probably doesn't matter.</li>\n</ul>\n<p>Alternatively I could just rewrite <code>cat</code> completely as a native function</p>", "body_text": "Good point, I hadn't thought about implementing the shape checks in aten. I think it shouldn't be too bad to do that: I could rename cat in the cwrap to something and implement a native function that wraps the renamed cat along with performing size checks.\nThe two downsides I see with this approach are that:\n\ntensors don't benefit from the size check (only Variables, since size check is in aten). When tensors/Variables get merged this won't be a problem\nwe'd be doing an extra pass through the list of tensors to cat. Right now the size of the final tensor is computed at the same time as the size checks; separating the two would mean two loops, one for the size checks (in aten), and another to compute the size of the final tensor (in TH). This probably doesn't matter.\n\nAlternatively I could just rewrite cat completely as a native function", "body": "Good point, I hadn't thought about implementing the shape checks in aten. I think it shouldn't be too bad to do that: I could rename `cat` in the cwrap to something and implement a native function that wraps the renamed `cat` along with performing size checks.\r\n\r\nThe two downsides I see with this approach are that:\r\n- tensors don't benefit from the size check (only Variables, since size check is in aten). When tensors/Variables get merged this won't be a problem\r\n- we'd be doing an extra pass through the list of tensors to cat. Right now the size of the final tensor is computed at the same time as the size checks; separating the two would mean two loops, one for the size checks (in aten), and another to compute the size of the final tensor (in TH). This probably doesn't matter.\r\n\r\nAlternatively I could just rewrite `cat` completely as a native function"}