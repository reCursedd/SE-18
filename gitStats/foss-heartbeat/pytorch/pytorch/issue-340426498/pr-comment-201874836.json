{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/201874836", "pull_request_review_id": 136463000, "id": 201874836, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTg3NDgzNg==", "diff_hunk": "@@ -181,7 +198,9 @@ Tensor repeat(const Tensor& self, IntList repeats) {\n   Tensor result = self.type().tensor(target_size);\n   Tensor urtensor = result.type().alias(result);\n   for (int64_t i = 0; i < xtensor.dim(); ++i) {\n-    urtensor = urtensor.unfold(i, xtensor.size(i), xtensor.size(i));\n+    // can't unfold with step 0, so make sure step is at least 1\n+    // (it doesn't matter what it is in that case, because the size is 0).\n+    urtensor = urtensor.unfold(i, xtensor.size(i), std::max<int64_t>(xtensor.size(i), 1));", "path": "aten/src/ATen/native/TensorShape.cpp", "position": 56, "original_position": 52, "commit_id": "6193143982dbda86bd844b548b0a9e142cf4cd1b", "original_commit_id": "f8468dd729d183130e6b8b3e255538fe18153e79", "user": {"login": "gchanan", "id": 3768583, "node_id": "MDQ6VXNlcjM3Njg1ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3768583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gchanan", "html_url": "https://github.com/gchanan", "followers_url": "https://api.github.com/users/gchanan/followers", "following_url": "https://api.github.com/users/gchanan/following{/other_user}", "gists_url": "https://api.github.com/users/gchanan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gchanan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gchanan/subscriptions", "organizations_url": "https://api.github.com/users/gchanan/orgs", "repos_url": "https://api.github.com/users/gchanan/repos", "events_url": "https://api.github.com/users/gchanan/events{/privacy}", "received_events_url": "https://api.github.com/users/gchanan/received_events", "type": "User", "site_admin": false}, "body": "I didn't do that because the size of dimension of the returned tensor (according to the documentation and code) is: `(sizedim - size) / step + 1`, so it's not defined if step is 0.\r\n\r\nNumPy doesn't have an equivalent AFAIK.", "created_at": "2018-07-11T23:59:45Z", "updated_at": "2018-11-23T15:47:13Z", "html_url": "https://github.com/pytorch/pytorch/pull/9362#discussion_r201874836", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/9362", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/201874836"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/9362#discussion_r201874836"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/9362"}}, "body_html": "<p>I didn't do that because the size of dimension of the returned tensor (according to the documentation and code) is: <code>(sizedim - size) / step + 1</code>, so it's not defined if step is 0.</p>\n<p>NumPy doesn't have an equivalent AFAIK.</p>", "body_text": "I didn't do that because the size of dimension of the returned tensor (according to the documentation and code) is: (sizedim - size) / step + 1, so it's not defined if step is 0.\nNumPy doesn't have an equivalent AFAIK.", "in_reply_to_id": 201870614}