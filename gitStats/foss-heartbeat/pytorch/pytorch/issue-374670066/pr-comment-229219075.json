{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/229219075", "pull_request_review_id": 169662904, "id": 229219075, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyOTIxOTA3NQ==", "diff_hunk": "@@ -457,19 +459,17 @@ struct CAFFE2_API IValue final {\n \n // Future\n struct C10_EXPORT ivalue::Future final : c10::intrusive_ptr_target {\n-  explicit Future(IValue result_) : result(result_), ready(true) {}\n+  explicit Future(std::future<IValue>&& future_) : future(std::move(future_)) {}\n \n-  IValue get() const {\n-    AT_ASSERT(ready);\n-    return result;\n+  IValue get() {", "path": "aten/src/ATen/core/ivalue.h", "position": null, "original_position": 18, "commit_id": "928476a76fc9249e71a8a523919ab91bc49e5b2e", "original_commit_id": "d6a86359da6c1a35792defdfc2482772175fb6a5", "user": {"login": "highker", "id": 2192913, "node_id": "MDQ6VXNlcjIxOTI5MTM=", "avatar_url": "https://avatars0.githubusercontent.com/u/2192913?v=4", "gravatar_id": "", "url": "https://api.github.com/users/highker", "html_url": "https://github.com/highker", "followers_url": "https://api.github.com/users/highker/followers", "following_url": "https://api.github.com/users/highker/following{/other_user}", "gists_url": "https://api.github.com/users/highker/gists{/gist_id}", "starred_url": "https://api.github.com/users/highker/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/highker/subscriptions", "organizations_url": "https://api.github.com/users/highker/orgs", "repos_url": "https://api.github.com/users/highker/repos", "events_url": "https://api.github.com/users/highker/events{/privacy}", "received_events_url": "https://api.github.com/users/highker/received_events", "type": "User", "site_admin": false}, "body": "Thanks for the comments. Shall we make a stack of `(InterpreterState*, Stack*)` pair so that when the current interpreter suspends (i.e., `wait()`), it pushes its own `(InterpreterState*, Stack*)` to the stack and then the newly forked `(InterpreterState*, Stack*)`? A simple paradigm could be keeping calling `run()` for the top element of the stack till it is empty.\r\nWe can chat in person if that works for you.", "created_at": "2018-10-30T08:52:53Z", "updated_at": "2018-11-23T15:53:50Z", "html_url": "https://github.com/pytorch/pytorch/pull/13212#discussion_r229219075", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/13212", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/229219075"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/13212#discussion_r229219075"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/13212"}}, "body_html": "<p>Thanks for the comments. Shall we make a stack of <code>(InterpreterState*, Stack*)</code> pair so that when the current interpreter suspends (i.e., <code>wait()</code>), it pushes its own <code>(InterpreterState*, Stack*)</code> to the stack and then the newly forked <code>(InterpreterState*, Stack*)</code>? A simple paradigm could be keeping calling <code>run()</code> for the top element of the stack till it is empty.<br>\nWe can chat in person if that works for you.</p>", "body_text": "Thanks for the comments. Shall we make a stack of (InterpreterState*, Stack*) pair so that when the current interpreter suspends (i.e., wait()), it pushes its own (InterpreterState*, Stack*) to the stack and then the newly forked (InterpreterState*, Stack*)? A simple paradigm could be keeping calling run() for the top element of the stack till it is empty.\nWe can chat in person if that works for you.", "in_reply_to_id": 229167332}