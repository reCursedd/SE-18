{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/232016704", "pull_request_review_id": 173115554, "id": 232016704, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMjAxNjcwNA==", "diff_hunk": "@@ -443,19 +444,56 @@ struct CAFFE2_API IValue final {\n \n // Future\n struct C10_EXPORT ivalue::Future final : c10::intrusive_ptr_target {\n-  explicit Future(IValue result_) : result(result_), ready(true) {}\n+ private:\n+  c10::intrusive_ptr<Future> intrusive_from_this() {\n+    c10::raw::intrusive_ptr::incref(this); // we are creating a new pointer\n+                                           // from a raw `this` pointer\n+                                           // so we need to bump the refcount\n+                                           // to account for this ownership\n+    return c10::intrusive_ptr<Future>::reclaim(this);\n+  }\n+\n+ public:\n+  void wait() {\n+    if (completed()) {\n+      return;\n+    }\n+    c10::global_work_queue.workOnTasksUntilCompleted(intrusive_from_this());\n+    AT_ASSERT(completed());\n+  }\n+\n+  void markCompleted(IValue value) {\n+    value_ = std::move(value);\n+    completed_ = true;\n+    for (auto& callback : callbacks) {\n+      callback();\n+    }\n+    callbacks.clear();\n+  }\n+\n+  // Get the result of the current future.\n+  IValue value() {\n+    AT_ASSERT(completed());\n+    return value_;\n+  }\n \n-  IValue get() const {\n-    AT_ASSERT(ready);\n-    return result;\n+  void addCallback(std::function<void(void)> callback) {", "path": "aten/src/ATen/core/ivalue.h", "position": 49, "original_position": 49, "commit_id": "928476a76fc9249e71a8a523919ab91bc49e5b2e", "original_commit_id": "cb9a3e61d6187fb5632a5b152550259fc723dfbe", "user": {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, "body": "nit: if the future is already completed, this should call the callback immediately. This won't matter until we have threads racing each other, but it is an important part of the interface.", "created_at": "2018-11-08T18:47:16Z", "updated_at": "2018-11-23T15:54:32Z", "html_url": "https://github.com/pytorch/pytorch/pull/13212#discussion_r232016704", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/13212", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/232016704"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/13212#discussion_r232016704"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/13212"}}, "body_html": "<p>nit: if the future is already completed, this should call the callback immediately. This won't matter until we have threads racing each other, but it is an important part of the interface.</p>", "body_text": "nit: if the future is already completed, this should call the callback immediately. This won't matter until we have threads racing each other, but it is an important part of the interface."}