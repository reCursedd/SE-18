{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/231682655", "pull_request_review_id": 172696539, "id": 231682655, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMTY4MjY1NQ==", "diff_hunk": "@@ -645,25 +645,47 @@ struct InterpreterStateImpl {\n     bool_data(function->bool_data),\n     registers(function->register_size) {\n   }\n-  void run(Stack & stack) {\n+\n+  void run(Stack& stack) {\n     // std::cout << *function->graph << \"\\n\";\n     // function->dump(std::cout);\n     size_t pc = current_pc;\n     auto & instructions = function->instructions;\n     size_t last = instructions.size();\n-    while(pc < last) {\n+\n+    // Check if we are recovered from a suspend\n+    if (current_inst) {\n+      registerOutputs(*current_inst, stack);\n+      current_inst = nullptr;\n+    }\n+\n+    while (pc < last) {\n         // std::cout << \"executing \" << pc << \": \";\n         // function->dumpInstruction(std::cout, pc);\n         // std::cout << \"\\n\";\n         try {\n           auto & inst = instructions[pc];\n           loadTensorsFromRegisters(inst.inputs, stack);\n-          size_t new_pc = pc + 1 + inst.callback(stack);\n-          for(int i = inst.outputs.size - 1; i >= 0; i--) {\n-            int reg = get(inst.outputs,i);\n-            registers[reg] = pop(stack);\n-            // std::cout << \"pop reg[\" << reg << \"];\\n\" << registers[reg] << \"\\n\";\n+          size_t new_pc = pc + 1;\n+          try {\n+            new_pc += inst.callback(stack);\n+          } catch (Suspend& e) {\n+            JIT_ASSERT(!e.future->completed());", "path": "torch/csrc/jit/interpreter.cpp", "position": null, "original_position": 36, "commit_id": "928476a76fc9249e71a8a523919ab91bc49e5b2e", "original_commit_id": "eba61b41862c42d186e6bf317d356c00ef197abd", "user": {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, "body": "this will be a race condition when multithreaded, between throw and catch another thread _could_ complete this future. Instead it is always safe to call addCallback on a future: it will just immediately call the callback if it is already completed.", "created_at": "2018-11-07T21:26:22Z", "updated_at": "2018-11-23T15:54:28Z", "html_url": "https://github.com/pytorch/pytorch/pull/13212#discussion_r231682655", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/13212", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/231682655"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/13212#discussion_r231682655"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/13212"}}, "body_html": "<p>this will be a race condition when multithreaded, between throw and catch another thread <em>could</em> complete this future. Instead it is always safe to call addCallback on a future: it will just immediately call the callback if it is already completed.</p>", "body_text": "this will be a race condition when multithreaded, between throw and catch another thread could complete this future. Instead it is always safe to call addCallback on a future: it will just immediately call the callback if it is already completed."}