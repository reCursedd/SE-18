{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/231686119", "pull_request_review_id": 172696539, "id": 231686119, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMTY4NjExOQ==", "diff_hunk": "@@ -697,12 +725,21 @@ struct InterpreterStateImpl {\n \n     }\n   }\n+  void registerOutputs(const Instruction& inst, Stack& stack) {\n+    for (int i = inst.outputs.size - 1; i >= 0; --i) {\n+      int reg = get(inst.outputs, i);\n+      registers[reg] = pop(stack);\n+      // std::cout << \"pop reg[\" << reg << \"];\\n\" << registers[reg] << \"\\n\";\n+    }\n+  }\n   // note: it may seem unnecessary to keep the current_pc inside InterpreterState\n   // since InterpreterState::run completes the function. However, in the\n   // future we will end up with interpreters that can suspend (e.g. for asynchrony)\n   // so we keep this design in place eventhough we removed the 'staging'\n   // that it was originally used for.\n   size_t current_pc = 0;\n+  Instruction* current_inst = nullptr;\n+  c10::intrusive_ptr<Future> future = c10::make_intrusive<Future>();", "path": "torch/csrc/jit/interpreter.cpp", "position": null, "original_position": 87, "commit_id": "928476a76fc9249e71a8a523919ab91bc49e5b2e", "original_commit_id": "eba61b41862c42d186e6bf317d356c00ef197abd", "user": {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, "body": "We should avoid allocating the future along the synchronous pathway. Here is my suggestion. We have 2 entry points:\r\n\r\n```\r\nvoid run(Stack& stack) {\r\n    bool suspended = runImpl(stack);\r\n    if(suspended)) {\r\n       future.wait();\r\n      if(num_outputs == 1)\r\n         stack.push(future.value())\r\n      else\r\n        <unpack the tuple, pushing each value onto the stack>\r\n   }\r\n\r\n}\r\nintrusive_ptr<Future> runAsync(Stack& stack) {\r\n    if(!future) {\r\n       future = make_instrusive<Future>();\r\n    }\r\n   runImpl(stack);\r\n   return future;\r\n}\r\n// private, replaces current run\r\nbool runImpl(Stack& stack) {\r\n    <do normal run>\r\n    ...\r\n   catch(Suspend& e) {\r\n      if(!future)\r\n         future = make_future(); // we need to ensure this is allocated regardless\r\n      return true; //we suspended and did not push the results to the stack\r\n   }\r\n     ...\r\n    // under the synchronous pathway future will only be allocated on a suspend, \r\n    // so guard the mark of completion for the case where we never allocate it.\r\n    if(future) {\r\n        <markCompletedLogic>\r\n    }\r\n}\r\n```", "created_at": "2018-11-07T21:37:54Z", "updated_at": "2018-11-23T15:54:29Z", "html_url": "https://github.com/pytorch/pytorch/pull/13212#discussion_r231686119", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/13212", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/231686119"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/13212#discussion_r231686119"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/13212"}}, "body_html": "<p>We should avoid allocating the future along the synchronous pathway. Here is my suggestion. We have 2 entry points:</p>\n<pre><code>void run(Stack&amp; stack) {\n    bool suspended = runImpl(stack);\n    if(suspended)) {\n       future.wait();\n      if(num_outputs == 1)\n         stack.push(future.value())\n      else\n        &lt;unpack the tuple, pushing each value onto the stack&gt;\n   }\n\n}\nintrusive_ptr&lt;Future&gt; runAsync(Stack&amp; stack) {\n    if(!future) {\n       future = make_instrusive&lt;Future&gt;();\n    }\n   runImpl(stack);\n   return future;\n}\n// private, replaces current run\nbool runImpl(Stack&amp; stack) {\n    &lt;do normal run&gt;\n    ...\n   catch(Suspend&amp; e) {\n      if(!future)\n         future = make_future(); // we need to ensure this is allocated regardless\n      return true; //we suspended and did not push the results to the stack\n   }\n     ...\n    // under the synchronous pathway future will only be allocated on a suspend, \n    // so guard the mark of completion for the case where we never allocate it.\n    if(future) {\n        &lt;markCompletedLogic&gt;\n    }\n}\n</code></pre>", "body_text": "We should avoid allocating the future along the synchronous pathway. Here is my suggestion. We have 2 entry points:\nvoid run(Stack& stack) {\n    bool suspended = runImpl(stack);\n    if(suspended)) {\n       future.wait();\n      if(num_outputs == 1)\n         stack.push(future.value())\n      else\n        <unpack the tuple, pushing each value onto the stack>\n   }\n\n}\nintrusive_ptr<Future> runAsync(Stack& stack) {\n    if(!future) {\n       future = make_instrusive<Future>();\n    }\n   runImpl(stack);\n   return future;\n}\n// private, replaces current run\nbool runImpl(Stack& stack) {\n    <do normal run>\n    ...\n   catch(Suspend& e) {\n      if(!future)\n         future = make_future(); // we need to ensure this is allocated regardless\n      return true; //we suspended and did not push the results to the stack\n   }\n     ...\n    // under the synchronous pathway future will only be allocated on a suspend, \n    // so guard the mark of completion for the case where we never allocate it.\n    if(future) {\n        <markCompletedLogic>\n    }\n}"}