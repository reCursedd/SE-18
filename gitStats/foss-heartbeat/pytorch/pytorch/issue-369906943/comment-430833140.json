{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/430833140", "html_url": "https://github.com/pytorch/pytorch/issues/12633#issuecomment-430833140", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/12633", "id": 430833140, "node_id": "MDEyOklzc3VlQ29tbWVudDQzMDgzMzE0MA==", "user": {"login": "SsnL", "id": 5674597, "node_id": "MDQ6VXNlcjU2NzQ1OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5674597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SsnL", "html_url": "https://github.com/SsnL", "followers_url": "https://api.github.com/users/SsnL/followers", "following_url": "https://api.github.com/users/SsnL/following{/other_user}", "gists_url": "https://api.github.com/users/SsnL/gists{/gist_id}", "starred_url": "https://api.github.com/users/SsnL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SsnL/subscriptions", "organizations_url": "https://api.github.com/users/SsnL/orgs", "repos_url": "https://api.github.com/users/SsnL/repos", "events_url": "https://api.github.com/users/SsnL/events{/privacy}", "received_events_url": "https://api.github.com/users/SsnL/received_events", "type": "User", "site_admin": false}, "created_at": "2018-10-18T00:20:23Z", "updated_at": "2018-10-18T00:20:23Z", "author_association": "CONTRIBUTOR", "body_html": "<div class=\"email-fragment\">Why would you ever need that? All the sparse ops sets the coalesced flag\ncorrectly. There is no reason you need it yourself.</div>\n<span class=\"email-hidden-toggle\"><a href=\"#\">\u2026</a></span><div class=\"email-hidden-reply\">\n<div class=\"email-quoted-reply\">On Wed, Oct 17, 2018 at 19:17 Wei Yang ***@***.***&gt; wrote:\n <a class=\"user-mention\" href=\"https://github.com/SsnL\">@SsnL</a> &lt;<a href=\"https://github.com/SsnL\">https://github.com/SsnL</a>&gt; I see, can we also have a _coalesced_safe\n to do the explicit check? Right there is no easy way to safely assert a\n sparse tensor is truly coalesced.\n\n \u2014\n You are receiving this because you were mentioned.\n Reply to this email directly, view it on GitHub\n &lt;<a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"369906943\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/12633\" href=\"https://github.com/pytorch/pytorch/issues/12633#issuecomment-430821854\">#12633 (comment)</a>&gt;,\n or mute the thread\n &lt;<a href=\"https://github.com/notifications/unsubscribe-auth/AFaWZd-FuxOFVM_yI1hmY9h4cVsE96Neks5ul7p6gaJpZM4XbJmu\">https://github.com/notifications/unsubscribe-auth/AFaWZd-FuxOFVM_yI1hmY9h4cVsE96Neks5ul7p6gaJpZM4XbJmu</a>&gt;\n .\n</div>\n<div class=\"email-fragment\"></div>\n</div>", "body_text": "Why would you ever need that? All the sparse ops sets the coalesced flag\ncorrectly. There is no reason you need it yourself.\n\u2026\nOn Wed, Oct 17, 2018 at 19:17 Wei Yang ***@***.***> wrote:\n @SsnL <https://github.com/SsnL> I see, can we also have a _coalesced_safe\n to do the explicit check? Right there is no easy way to safely assert a\n sparse tensor is truly coalesced.\n\n \u2014\n You are receiving this because you were mentioned.\n Reply to this email directly, view it on GitHub\n <#12633 (comment)>,\n or mute the thread\n <https://github.com/notifications/unsubscribe-auth/AFaWZd-FuxOFVM_yI1hmY9h4cVsE96Neks5ul7p6gaJpZM4XbJmu>\n .", "body": "Why would you ever need that? All the sparse ops sets the coalesced flag\ncorrectly. There is no reason you need it yourself.\n\nOn Wed, Oct 17, 2018 at 19:17 Wei Yang <notifications@github.com> wrote:\n\n> @SsnL <https://github.com/SsnL> I see, can we also have a _coalesced_safe\n> to do the explicit check? Right there is no easy way to safely assert a\n> sparse tensor is truly coalesced.\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/pytorch/pytorch/issues/12633#issuecomment-430821854>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AFaWZd-FuxOFVM_yI1hmY9h4cVsE96Neks5ul7p6gaJpZM4XbJmu>\n> .\n>\n"}