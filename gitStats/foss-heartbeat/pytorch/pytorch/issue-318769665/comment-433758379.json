{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/433758379", "html_url": "https://github.com/pytorch/pytorch/issues/7083#issuecomment-433758379", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/7083", "id": 433758379, "node_id": "MDEyOklzc3VlQ29tbWVudDQzMzc1ODM3OQ==", "user": {"login": "yaceben", "id": 19843412, "node_id": "MDQ6VXNlcjE5ODQzNDEy", "avatar_url": "https://avatars3.githubusercontent.com/u/19843412?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yaceben", "html_url": "https://github.com/yaceben", "followers_url": "https://api.github.com/users/yaceben/followers", "following_url": "https://api.github.com/users/yaceben/following{/other_user}", "gists_url": "https://api.github.com/users/yaceben/gists{/gist_id}", "starred_url": "https://api.github.com/users/yaceben/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yaceben/subscriptions", "organizations_url": "https://api.github.com/users/yaceben/orgs", "repos_url": "https://api.github.com/users/yaceben/repos", "events_url": "https://api.github.com/users/yaceben/events{/privacy}", "received_events_url": "https://api.github.com/users/yaceben/received_events", "type": "User", "site_admin": false}, "created_at": "2018-10-29T00:46:18Z", "updated_at": "2018-10-29T00:49:03Z", "author_association": "NONE", "body_html": "<p>Hey all,</p>\n<p>On pytorch rc1 I had the same problem and I \"resolved\" it by using a ugly hack in cmake/Modules/FindMKL.cmake to force it to not find system local mkl libs</p>\n<div class=\"highlight highlight-source-cmake\"><pre><span class=\"pl-c1\">SET</span>(INTEL_COMPILER_DIR <span class=\"pl-s\">\"/optometriste/intel\"</span> <span class=\"pl-k\">CACHE</span> STRING\n  <span class=\"pl-s\">\"Root directory of the Intel Compiler Suite (contains ipp, mkl, etc.)\"</span>)\n<span class=\"pl-c1\">SET</span>(INTEL_MKL_DIR <span class=\"pl-s\">\"/optometriste/intel/mkl\"</span> <span class=\"pl-k\">CACHE</span> STRING\n  <span class=\"pl-s\">\"Root directory of the Intel MKL (standalone)\"</span>)\n<span class=\"pl-c1\">SET</span>(INTEL_MKL_SEQUENTIAL <span class=\"pl-k\">OFF</span> <span class=\"pl-k\">CACHE</span> BOOL\n  <span class=\"pl-s\">\"Force using the sequential (non threaded) libraries\"</span>)</pre></div>\n<p>Since I have the Intel compiler suite (v19, not compatible, without much hacking, with Cuda) it would always override the anaconda mkl libs... since I don't know much about cmake beyond breaking things I think maybe adding a simple bool switch like USE_SYSTEM_MKL would be a good idea ?</p>\n<p>Cheers</p>", "body_text": "Hey all,\nOn pytorch rc1 I had the same problem and I \"resolved\" it by using a ugly hack in cmake/Modules/FindMKL.cmake to force it to not find system local mkl libs\nSET(INTEL_COMPILER_DIR \"/optometriste/intel\" CACHE STRING\n  \"Root directory of the Intel Compiler Suite (contains ipp, mkl, etc.)\")\nSET(INTEL_MKL_DIR \"/optometriste/intel/mkl\" CACHE STRING\n  \"Root directory of the Intel MKL (standalone)\")\nSET(INTEL_MKL_SEQUENTIAL OFF CACHE BOOL\n  \"Force using the sequential (non threaded) libraries\")\nSince I have the Intel compiler suite (v19, not compatible, without much hacking, with Cuda) it would always override the anaconda mkl libs... since I don't know much about cmake beyond breaking things I think maybe adding a simple bool switch like USE_SYSTEM_MKL would be a good idea ?\nCheers", "body": "Hey all,\r\n\r\nOn pytorch rc1 I had the same problem and I \"resolved\" it by using a ugly hack in cmake/Modules/FindMKL.cmake to force it to not find system local mkl libs\r\n\r\n```cmake\r\nSET(INTEL_COMPILER_DIR \"/optometriste/intel\" CACHE STRING\r\n  \"Root directory of the Intel Compiler Suite (contains ipp, mkl, etc.)\")\r\nSET(INTEL_MKL_DIR \"/optometriste/intel/mkl\" CACHE STRING\r\n  \"Root directory of the Intel MKL (standalone)\")\r\nSET(INTEL_MKL_SEQUENTIAL OFF CACHE BOOL\r\n  \"Force using the sequential (non threaded) libraries\")\r\n```\r\n\r\nSince I have the Intel compiler suite (v19, not compatible, without much hacking, with Cuda) it would always override the anaconda mkl libs... since I don't know much about cmake beyond breaking things I think maybe adding a simple bool switch like USE_SYSTEM_MKL would be a good idea ?\r\n\r\nCheers"}