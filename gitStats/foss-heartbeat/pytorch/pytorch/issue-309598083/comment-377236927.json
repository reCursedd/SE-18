{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/377236927", "html_url": "https://github.com/pytorch/pytorch/issues/6098#issuecomment-377236927", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/6098", "id": 377236927, "node_id": "MDEyOklzc3VlQ29tbWVudDM3NzIzNjkyNw==", "user": {"login": "HongweiLuan", "id": 23178953, "node_id": "MDQ6VXNlcjIzMTc4OTUz", "avatar_url": "https://avatars0.githubusercontent.com/u/23178953?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HongweiLuan", "html_url": "https://github.com/HongweiLuan", "followers_url": "https://api.github.com/users/HongweiLuan/followers", "following_url": "https://api.github.com/users/HongweiLuan/following{/other_user}", "gists_url": "https://api.github.com/users/HongweiLuan/gists{/gist_id}", "starred_url": "https://api.github.com/users/HongweiLuan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HongweiLuan/subscriptions", "organizations_url": "https://api.github.com/users/HongweiLuan/orgs", "repos_url": "https://api.github.com/users/HongweiLuan/repos", "events_url": "https://api.github.com/users/HongweiLuan/events{/privacy}", "received_events_url": "https://api.github.com/users/HongweiLuan/received_events", "type": "User", "site_admin": false}, "created_at": "2018-03-29T13:36:01Z", "updated_at": "2018-03-29T13:36:01Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=9998726\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/peterjc123\">@peterjc123</a> Thank you very much for your response.</p>\n<p>the code is below. I copied the source files of cudnn to cuda library. I also tried to cuda.find_nvcc() and find_cuda_version() from pytorch.tools.setup_helpers import cuda. This works. However, torch.cuda.is_available() gives me false. When I checked the code in the cuda.py, hasattr(torch._C, '_cuda_isDriverSufficient') also gives me false.</p>\n<p>I am not sure whether torch._C is not working or my Driver is not updated. I tried to update it to M391 but it downgraded to 388 when I installed cuda 9.1.</p>\n<p>Thanks</p>\n<p>print('@%s:  ' % os.path.basename(<strong>file</strong>))</p>\n<p>if 1:<br>\nSEED = 35202 #1510302253  #int(time.time()) #<br>\nrandom.seed(SEED)<br>\nnp.random.seed(SEED)<br>\ntorch.manual_seed(SEED)<br>\ntorch.cuda.manual_seed_all(SEED)<br>\nprint ('\\tset random seed')<br>\nprint ('\\t\\tSEED=%d'%SEED)</p>\n<p>if 1:<br>\ntorch.backends.cudnn.benchmark = True  ##uses the inbuilt cudnn auto-tuner to find the fastest convolution algorithms. -<br>\ntorch.backends.cudnn.enabled   = True<br>\nprint ('\\tset cuda environment')<br>\nprint ('\\t\\ttorch.<strong>version</strong>              =', torch.<strong>version</strong>)<br>\nprint ('\\t\\ttorch.version.cuda             =', torch.version.cuda)<br>\nprint ('\\t\\ttorch.backends.cudnn.version() =', torch.backends.cudnn.version())<br>\ntry:<br>\nprint ('\\t\\tos['CUDA_VISIBLE_DEVICES']     =',os.environ['CUDA_VISIBLE_DEVICES'])<br>\nNUM_CUDA_DEVICES = len(os.environ['CUDA_VISIBLE_DEVICES'].split(','))<br>\nexcept Exception:<br>\nprint ('\\t\\tos['CUDA_VISIBLE_DEVICES']     =','None')<br>\nNUM_CUDA_DEVICES = 1</p>\n<pre><code>print ('\\t\\ttorch.cuda.device_count()      =', torch.cuda.device_count())\nprint ('\\t\\ttorch.cuda.current_device()    =', torch.cuda.current_device())\n</code></pre>\n<p>print('')</p>", "body_text": "@peterjc123 Thank you very much for your response.\nthe code is below. I copied the source files of cudnn to cuda library. I also tried to cuda.find_nvcc() and find_cuda_version() from pytorch.tools.setup_helpers import cuda. This works. However, torch.cuda.is_available() gives me false. When I checked the code in the cuda.py, hasattr(torch._C, '_cuda_isDriverSufficient') also gives me false.\nI am not sure whether torch._C is not working or my Driver is not updated. I tried to update it to M391 but it downgraded to 388 when I installed cuda 9.1.\nThanks\nprint('@%s:  ' % os.path.basename(file))\nif 1:\nSEED = 35202 #1510302253  #int(time.time()) #\nrandom.seed(SEED)\nnp.random.seed(SEED)\ntorch.manual_seed(SEED)\ntorch.cuda.manual_seed_all(SEED)\nprint ('\\tset random seed')\nprint ('\\t\\tSEED=%d'%SEED)\nif 1:\ntorch.backends.cudnn.benchmark = True  ##uses the inbuilt cudnn auto-tuner to find the fastest convolution algorithms. -\ntorch.backends.cudnn.enabled   = True\nprint ('\\tset cuda environment')\nprint ('\\t\\ttorch.version              =', torch.version)\nprint ('\\t\\ttorch.version.cuda             =', torch.version.cuda)\nprint ('\\t\\ttorch.backends.cudnn.version() =', torch.backends.cudnn.version())\ntry:\nprint ('\\t\\tos['CUDA_VISIBLE_DEVICES']     =',os.environ['CUDA_VISIBLE_DEVICES'])\nNUM_CUDA_DEVICES = len(os.environ['CUDA_VISIBLE_DEVICES'].split(','))\nexcept Exception:\nprint ('\\t\\tos['CUDA_VISIBLE_DEVICES']     =','None')\nNUM_CUDA_DEVICES = 1\nprint ('\\t\\ttorch.cuda.device_count()      =', torch.cuda.device_count())\nprint ('\\t\\ttorch.cuda.current_device()    =', torch.cuda.current_device())\n\nprint('')", "body": "@peterjc123 Thank you very much for your response. \r\n\r\nthe code is below. I copied the source files of cudnn to cuda library. I also tried to cuda.find_nvcc() and find_cuda_version() from pytorch.tools.setup_helpers import cuda. This works. However, torch.cuda.is_available() gives me false. When I checked the code in the cuda.py, hasattr(torch._C, '_cuda_isDriverSufficient') also gives me false. \r\n\r\nI am not sure whether torch._C is not working or my Driver is not updated. I tried to update it to M391 but it downgraded to 388 when I installed cuda 9.1. \r\n\r\nThanks\r\n\r\n\r\nprint('@%s:  ' % os.path.basename(__file__))\r\n\r\nif 1:\r\n    SEED = 35202 #1510302253  #int(time.time()) #\r\n    random.seed(SEED)\r\n    np.random.seed(SEED)\r\n    torch.manual_seed(SEED)\r\n    torch.cuda.manual_seed_all(SEED)\r\n    print ('\\tset random seed')\r\n    print ('\\t\\tSEED=%d'%SEED)\r\n\r\nif 1:\r\n    torch.backends.cudnn.benchmark = True  ##uses the inbuilt cudnn auto-tuner to find the fastest convolution algorithms. -\r\n    torch.backends.cudnn.enabled   = True\r\n    print ('\\tset cuda environment')\r\n    print ('\\t\\ttorch.__version__              =', torch.__version__)\r\n    print ('\\t\\ttorch.version.cuda             =', torch.version.cuda)\r\n    print ('\\t\\ttorch.backends.cudnn.version() =', torch.backends.cudnn.version())\r\n    try:\r\n        print ('\\t\\tos[\\'CUDA_VISIBLE_DEVICES\\']     =',os.environ['CUDA_VISIBLE_DEVICES'])\r\n        NUM_CUDA_DEVICES = len(os.environ['CUDA_VISIBLE_DEVICES'].split(','))\r\n    except Exception:\r\n        print ('\\t\\tos[\\'CUDA_VISIBLE_DEVICES\\']     =','None')\r\n        NUM_CUDA_DEVICES = 1\r\n\r\n    print ('\\t\\ttorch.cuda.device_count()      =', torch.cuda.device_count())\r\n    print ('\\t\\ttorch.cuda.current_device()    =', torch.cuda.current_device())\r\n\r\n\r\nprint('')\r\n"}