{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/183199183", "pull_request_review_id": 114161775, "id": 183199183, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MzE5OTE4Mw==", "diff_hunk": "@@ -115,20 +115,25 @@ def _number_format(tensor, min_sz=-1):\n     if int_mode:\n         if exp_max > prec + 1:\n             format = '{{:11.{}e}}'.format(prec)\n+            fmt_fn = lambda x: format.format(x)\n             sz = max(min_sz, 7 + prec)\n         else:\n             sz = max(min_sz, exp_max + 1)", "path": "torch/_tensor_str.py", "position": null, "original_position": 7, "commit_id": "13146650d4d02a09d22f3d242ac40c5b2536aa7c", "original_commit_id": "da578570a1e55b1768906304c6a9a9af8f33c950", "user": {"login": "gchanan", "id": 3768583, "node_id": "MDQ6VXNlcjM3Njg1ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3768583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gchanan", "html_url": "https://github.com/gchanan", "followers_url": "https://api.github.com/users/gchanan/followers", "following_url": "https://api.github.com/users/gchanan/following{/other_user}", "gists_url": "https://api.github.com/users/gchanan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gchanan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gchanan/subscriptions", "organizations_url": "https://api.github.com/users/gchanan/orgs", "repos_url": "https://api.github.com/users/gchanan/repos", "events_url": "https://api.github.com/users/gchanan/events{/privacy}", "received_events_url": "https://api.github.com/users/gchanan/received_events", "type": "User", "site_admin": false}, "body": "good catch.  Maybe it makes sense to move the size calculation up, something like:\r\n```\r\nsz = max(min_sz, exp_max + 1 + include_decimal_int_mode)\r\nformat = '{:' + str(sz) + '.0f}'\r\nfmt_fn = lambda x: format.format(x)\r\nif include_decimal_int_mode:\r\n    format_decimal = format + '.'\r\n    fmt_fn = lambda x: format_decimal.format(x) if math.isfinite(x) else format.format(x)\r\n ```", "created_at": "2018-04-21T03:45:31Z", "updated_at": "2018-11-23T15:42:55Z", "html_url": "https://github.com/pytorch/pytorch/pull/6835#discussion_r183199183", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/6835", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/183199183"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/6835#discussion_r183199183"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/6835"}}, "body_html": "<p>good catch.  Maybe it makes sense to move the size calculation up, something like:</p>\n<pre><code>sz = max(min_sz, exp_max + 1 + include_decimal_int_mode)\nformat = '{:' + str(sz) + '.0f}'\nfmt_fn = lambda x: format.format(x)\nif include_decimal_int_mode:\n    format_decimal = format + '.'\n    fmt_fn = lambda x: format_decimal.format(x) if math.isfinite(x) else format.format(x)\n</code></pre>", "body_text": "good catch.  Maybe it makes sense to move the size calculation up, something like:\nsz = max(min_sz, exp_max + 1 + include_decimal_int_mode)\nformat = '{:' + str(sz) + '.0f}'\nfmt_fn = lambda x: format.format(x)\nif include_decimal_int_mode:\n    format_decimal = format + '.'\n    fmt_fn = lambda x: format_decimal.format(x) if math.isfinite(x) else format.format(x)"}