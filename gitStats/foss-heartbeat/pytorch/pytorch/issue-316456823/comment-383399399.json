{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/383399399", "html_url": "https://github.com/pytorch/pytorch/pull/6835#issuecomment-383399399", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/6835", "id": 383399399, "node_id": "MDEyOklzc3VlQ29tbWVudDM4MzM5OTM5OQ==", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "created_at": "2018-04-22T17:49:27Z", "updated_at": "2018-04-22T17:49:27Z", "author_association": "CONTRIBUTOR", "body_html": "<p>I don't mind merging this to get the fix, but the code structure in this patch seems a bit funky to me.</p>\n<p>The usual justification for factoring out a function into a subprocedure is so that every call site gets the \"extra\" logic that the subprocedure has. However, in your patch, the extra logic is predicated exclusively on whether or not the optional <code>nonfinite_format</code> option was passed; that is, you <em>had</em> to have remembered to call the function with this argument, otherwise it really doesn't do anything. So if that's the case, why bother with a subprocedure at all? Just add the extra logic to the single(!!) call site that actually needs it, and let the next person who actually needs the extra logic to factor it the way the need. Otherwise I am scratching my head over why exactly this function was defined, when it is not doing anything in the common case.</p>", "body_text": "I don't mind merging this to get the fix, but the code structure in this patch seems a bit funky to me.\nThe usual justification for factoring out a function into a subprocedure is so that every call site gets the \"extra\" logic that the subprocedure has. However, in your patch, the extra logic is predicated exclusively on whether or not the optional nonfinite_format option was passed; that is, you had to have remembered to call the function with this argument, otherwise it really doesn't do anything. So if that's the case, why bother with a subprocedure at all? Just add the extra logic to the single(!!) call site that actually needs it, and let the next person who actually needs the extra logic to factor it the way the need. Otherwise I am scratching my head over why exactly this function was defined, when it is not doing anything in the common case.", "body": "I don't mind merging this to get the fix, but the code structure in this patch seems a bit funky to me.\r\n\r\nThe usual justification for factoring out a function into a subprocedure is so that every call site gets the \"extra\" logic that the subprocedure has. However, in your patch, the extra logic is predicated exclusively on whether or not the optional `nonfinite_format` option was passed; that is, you *had* to have remembered to call the function with this argument, otherwise it really doesn't do anything. So if that's the case, why bother with a subprocedure at all? Just add the extra logic to the single(!!) call site that actually needs it, and let the next person who actually needs the extra logic to factor it the way the need. Otherwise I am scratching my head over why exactly this function was defined, when it is not doing anything in the common case."}