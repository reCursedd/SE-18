{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/205634591", "pull_request_review_id": 140947077, "id": 205634591, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTYzNDU5MQ==", "diff_hunk": "@@ -566,6 +882,18 @@ void CompiledFusionFunction::launch_with_tensors(at::ArrayRef<at::Tensor> inputs\n       }\n     }\n   }\n+\n+  #ifdef USE_CUDA\n+    // If the kernel call contains a random op, we need to pass in random seeds as\n+    // well.\n+    if(has_random && this->backend() == at::kCUDA) {\n+      auto gen_ = THCRandom_getGenerator(at::globalContext().getTHCState());\n+      uint64_t offset = gen_->state.philox_seed_offset.fetch_add(20);", "path": "torch/csrc/jit/fusion_compiler.cpp", "position": null, "original_position": 400, "commit_id": "d802d7a10e5ef692c0fa662605c62fc79ffc8957", "original_commit_id": "dae9db045de4dc496fb5be6cc99be05a10d4df0b", "user": {"login": "ngimel", "id": 15841449, "node_id": "MDQ6VXNlcjE1ODQxNDQ5", "avatar_url": "https://avatars3.githubusercontent.com/u/15841449?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ngimel", "html_url": "https://github.com/ngimel", "followers_url": "https://api.github.com/users/ngimel/followers", "following_url": "https://api.github.com/users/ngimel/following{/other_user}", "gists_url": "https://api.github.com/users/ngimel/gists{/gist_id}", "starred_url": "https://api.github.com/users/ngimel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ngimel/subscriptions", "organizations_url": "https://api.github.com/users/ngimel/orgs", "repos_url": "https://api.github.com/users/ngimel/repos", "events_url": "https://api.github.com/users/ngimel/events{/privacy}", "received_events_url": "https://api.github.com/users/ngimel/received_events", "type": "User", "site_admin": false}, "body": "It shouldn't be divided by 4, I think. Philox counter the way it's implemented here is counting every number. See in my pr for offset increment https://github.com/pytorch/pytorch/pull/9666/files#diff-13a03e6a295e68ffd7ca94678b5b581dR108\r\nAlso, Distributions.cu have a very inefficient pattern of calling random number generation, efficient pattern is in dropout pr also. ", "created_at": "2018-07-26T23:51:10Z", "updated_at": "2018-11-23T15:48:17Z", "html_url": "https://github.com/pytorch/pytorch/pull/9795#discussion_r205634591", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/9795", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/205634591"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/9795#discussion_r205634591"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/9795"}}, "body_html": "<p>It shouldn't be divided by 4, I think. Philox counter the way it's implemented here is counting every number. See in my pr for offset increment <a href=\"https://github.com/pytorch/pytorch/pull/9666/files#diff-13a03e6a295e68ffd7ca94678b5b581dR108\">https://github.com/pytorch/pytorch/pull/9666/files#diff-13a03e6a295e68ffd7ca94678b5b581dR108</a><br>\nAlso, Distributions.cu have a very inefficient pattern of calling random number generation, efficient pattern is in dropout pr also.</p>", "body_text": "It shouldn't be divided by 4, I think. Philox counter the way it's implemented here is counting every number. See in my pr for offset increment https://github.com/pytorch/pytorch/pull/9666/files#diff-13a03e6a295e68ffd7ca94678b5b581dR108\nAlso, Distributions.cu have a very inefficient pattern of calling random number generation, efficient pattern is in dropout pr also.", "in_reply_to_id": 205586219}