{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/206663271", "pull_request_review_id": 142119988, "id": 206663271, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjY2MzI3MQ==", "diff_hunk": "@@ -88,11 +94,116 @@ struct TensorInfo {\n };\n )\");\n \n+// The reason why we used TensorFlow's philox implementation is that currently\n+// NVRTC couldn't resolve the curand.h header file correctly, as curand.h will\n+// include lots of other header files which will break the NVRTC preprocessor.\n+// The TF's version is standalone and thus we don't need to worry too much\n+// about including in stuff that we don't need.\n+constexpr auto rand_support_literal = R\"(\n+\n+  class Philox {\n+  public:\n+    __device__ inline Philox(unsigned long long seed,\n+                             unsigned long long subsequence,\n+                             unsigned long long offset) {\n+      key.x = (unsigned int)seed;\n+      key.y = (unsigned int)(seed >> 32);\n+      counter = make_uint4(0, 0, 0, 0);\n+      counter.z = (unsigned int)(subsequence);\n+      counter.w = (unsigned int)(subsequence >> 32);\n+      STATE = 0;\n+      incr_n(offset / 4);\n+    }\n+\n+    __device__ inline unsigned long operator()() {\n+      if(STATE == 0) {\n+        uint4 counter_ = counter;\n+        uint2 key_ = key;\n+        for(int i = 0; i < 9; i++) {\n+          counter_ = single_round(counter_, key_);\n+          key_.x += (kPhilox10A); key_.y += (kPhilox10B);\n+        }\n+        output = single_round(counter_, key_);\n+        incr();\n+      }\n+      unsigned long ret;\n+      switch(STATE) {\n+        case 0: ret = output.x; break;\n+        case 1: ret = output.y; break;\n+        case 2: ret = output.z; break;\n+        case 3: ret = output.w; break;\n+      }\n+      STATE = (STATE + 1) % 4;\n+      return ret;\n+    }\n+\n+  private:\n+    uint4 counter;\n+    uint4 output;\n+    uint2 key;\n+    unsigned int STATE;\n+    __device__ inline void incr_n(unsigned long long n) {\n+      unsigned int nlo = (unsigned int)(n);\n+      unsigned int nhi = (unsigned int)(n >> 32);\n+      counter.x += nlo;\n+      if (counter.x < nlo)\n+        nhi++;\n+      counter.y += nhi;", "path": "torch/csrc/jit/fusion_compiler.cpp", "position": 82, "original_position": 85, "commit_id": "d802d7a10e5ef692c0fa662605c62fc79ffc8957", "original_commit_id": "32b5a1e2b44d2e306224ef917c83c15425f4f95c", "user": {"login": "ngimel", "id": 15841449, "node_id": "MDQ6VXNlcjE1ODQxNDQ5", "avatar_url": "https://avatars3.githubusercontent.com/u/15841449?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ngimel", "html_url": "https://github.com/ngimel", "followers_url": "https://api.github.com/users/ngimel/followers", "following_url": "https://api.github.com/users/ngimel/following{/other_user}", "gists_url": "https://api.github.com/users/ngimel/gists{/gist_id}", "starred_url": "https://api.github.com/users/ngimel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ngimel/subscriptions", "organizations_url": "https://api.github.com/users/ngimel/orgs", "repos_url": "https://api.github.com/users/ngimel/repos", "events_url": "https://api.github.com/users/ngimel/events{/privacy}", "received_events_url": "https://api.github.com/users/ngimel/received_events", "type": "User", "site_admin": false}, "body": "nhi should also be checked for overflow. ", "created_at": "2018-07-31T19:57:28Z", "updated_at": "2018-11-23T15:48:29Z", "html_url": "https://github.com/pytorch/pytorch/pull/9795#discussion_r206663271", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/9795", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/206663271"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/9795#discussion_r206663271"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/9795"}}, "body_html": "<p>nhi should also be checked for overflow.</p>", "body_text": "nhi should also be checked for overflow."}