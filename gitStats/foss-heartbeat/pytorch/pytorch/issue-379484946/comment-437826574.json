{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/437826574", "html_url": "https://github.com/pytorch/pytorch/issues/13818#issuecomment-437826574", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/13818", "id": 437826574, "node_id": "MDEyOklzc3VlQ29tbWVudDQzNzgyNjU3NA==", "user": {"login": "t-vi", "id": 20787943, "node_id": "MDQ6VXNlcjIwNzg3OTQz", "avatar_url": "https://avatars2.githubusercontent.com/u/20787943?v=4", "gravatar_id": "", "url": "https://api.github.com/users/t-vi", "html_url": "https://github.com/t-vi", "followers_url": "https://api.github.com/users/t-vi/followers", "following_url": "https://api.github.com/users/t-vi/following{/other_user}", "gists_url": "https://api.github.com/users/t-vi/gists{/gist_id}", "starred_url": "https://api.github.com/users/t-vi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/t-vi/subscriptions", "organizations_url": "https://api.github.com/users/t-vi/orgs", "repos_url": "https://api.github.com/users/t-vi/repos", "events_url": "https://api.github.com/users/t-vi/events{/privacy}", "received_events_url": "https://api.github.com/users/t-vi/received_events", "type": "User", "site_admin": false}, "created_at": "2018-11-12T10:15:32Z", "updated_at": "2018-11-12T10:15:32Z", "author_association": "CONTRIBUTOR", "body_html": "<p>So this is the \"multiple forward\" bit (the last gradcheck in test_spectral_norm) apparently.</p>\n<ul>\n<li>What we (I at least) don't know is what apply_dp/requires_grad is.</li>\n<li>My first impression is that the test is \"multi-gpu\" or \"cpu\" only.  When I change the multi-gpu branch<br>\nto work on single GPU, it seems to succeed every time. (I use cuda 9.2 currently, I have yet to try 8 - if I manage to compile that)</li>\n<li>Would we believe that there are determinism issues for multi-gpu here? I think that the spectral norm parameters are only updated on the first GPU, does that work correctly here (i.e. that all GPUs are reset)?</li>\n<li>The two instances I've seen are  on cuda8. Do we think there might be \"non-determinism\" issues with cuda8?</li>\n<li><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=13564\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ezyang\">@ezyang</a> Do you have an overview what the actual failure rate is? Is it all on cuda8? That is a test run that has multiple GPUs? Is it the only one?</li>\n</ul>\n<p>Unfortunately, I still didn't buy a computer large enough to put my second GPU in...</p>", "body_text": "So this is the \"multiple forward\" bit (the last gradcheck in test_spectral_norm) apparently.\n\nWhat we (I at least) don't know is what apply_dp/requires_grad is.\nMy first impression is that the test is \"multi-gpu\" or \"cpu\" only.  When I change the multi-gpu branch\nto work on single GPU, it seems to succeed every time. (I use cuda 9.2 currently, I have yet to try 8 - if I manage to compile that)\nWould we believe that there are determinism issues for multi-gpu here? I think that the spectral norm parameters are only updated on the first GPU, does that work correctly here (i.e. that all GPUs are reset)?\nThe two instances I've seen are  on cuda8. Do we think there might be \"non-determinism\" issues with cuda8?\n@ezyang Do you have an overview what the actual failure rate is? Is it all on cuda8? That is a test run that has multiple GPUs? Is it the only one?\n\nUnfortunately, I still didn't buy a computer large enough to put my second GPU in...", "body": "So this is the \"multiple forward\" bit (the last gradcheck in test_spectral_norm) apparently.\r\n- What we (I at least) don't know is what apply_dp/requires_grad is.\r\n- My first impression is that the test is \"multi-gpu\" or \"cpu\" only.  When I change the multi-gpu branch\r\n  to work on single GPU, it seems to succeed every time. (I use cuda 9.2 currently, I have yet to try 8 - if I manage to compile that)\r\n- Would we believe that there are determinism issues for multi-gpu here? I think that the spectral norm parameters are only updated on the first GPU, does that work correctly here (i.e. that all GPUs are reset)?\r\n- The two instances I've seen are  on cuda8. Do we think there might be \"non-determinism\" issues with cuda8?\r\n- @ezyang Do you have an overview what the actual failure rate is? Is it all on cuda8? That is a test run that has multiple GPUs? Is it the only one?\r\n\r\nUnfortunately, I still didn't buy a computer large enough to put my second GPU in...\r\n"}