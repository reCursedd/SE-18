{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/421076562", "html_url": "https://github.com/pytorch/pytorch/issues/11645#issuecomment-421076562", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/11645", "id": 421076562, "node_id": "MDEyOklzc3VlQ29tbWVudDQyMTA3NjU2Mg==", "user": {"login": "PetrochukM", "id": 7424737, "node_id": "MDQ6VXNlcjc0MjQ3Mzc=", "avatar_url": "https://avatars2.githubusercontent.com/u/7424737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PetrochukM", "html_url": "https://github.com/PetrochukM", "followers_url": "https://api.github.com/users/PetrochukM/followers", "following_url": "https://api.github.com/users/PetrochukM/following{/other_user}", "gists_url": "https://api.github.com/users/PetrochukM/gists{/gist_id}", "starred_url": "https://api.github.com/users/PetrochukM/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PetrochukM/subscriptions", "organizations_url": "https://api.github.com/users/PetrochukM/orgs", "repos_url": "https://api.github.com/users/PetrochukM/repos", "events_url": "https://api.github.com/users/PetrochukM/events{/privacy}", "received_events_url": "https://api.github.com/users/PetrochukM/received_events", "type": "User", "site_admin": false}, "created_at": "2018-09-13T16:54:02Z", "updated_at": "2018-09-14T01:25:58Z", "author_association": "NONE", "body_html": "<p>For anyone struggling with this, <code>nn.LSTMCell</code> works in the multiple GPU scenario while <code>nn.LSTM</code> does not.</p>\n<p>With a model like this...</p>\n<div class=\"highlight highlight-source-python\"><pre>    <span class=\"pl-k\">def</span> <span class=\"pl-en\">forward</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>, <span class=\"pl-smi\">input_</span>):\n        hidden_state <span class=\"pl-k\">=</span> <span class=\"pl-c1\">None</span>\n        outputs <span class=\"pl-k\">=</span> []\n        <span class=\"pl-k\">for</span> i <span class=\"pl-k\">in</span> <span class=\"pl-c1\">range</span>(input_.shape[<span class=\"pl-c1\">0</span>]):\n            output, hidden_state <span class=\"pl-k\">=</span> <span class=\"pl-c1\">self</span>.rnn(input_[i].unsqueeze(<span class=\"pl-c1\">0</span>))\n            outputs.append(output)\n        <span class=\"pl-k\">return</span> outputs</pre></div>\n<p>It may be better to run <code>DataDistributed</code> instead of <code>DataParallel</code>...</p>\n<blockquote>\n<p>Each process contains an independent Python interpreter, eliminating the extra interpreter overhead and \u201cGIL-thrashing\u201d that comes from driving several execution threads, model replicas, or GPUs from a single Python process. <strong>This is especially important for models that make heavy use of the Python runtime, including models with recurrent layers or many small components</strong>.</p>\n</blockquote>\n<p>EDIT:<br>\nRan with with <code>DataDistributed</code> and the problem went away and got a nice speed improvement.</p>", "body_text": "For anyone struggling with this, nn.LSTMCell works in the multiple GPU scenario while nn.LSTM does not.\nWith a model like this...\n    def forward(self, input_):\n        hidden_state = None\n        outputs = []\n        for i in range(input_.shape[0]):\n            output, hidden_state = self.rnn(input_[i].unsqueeze(0))\n            outputs.append(output)\n        return outputs\nIt may be better to run DataDistributed instead of DataParallel...\n\nEach process contains an independent Python interpreter, eliminating the extra interpreter overhead and \u201cGIL-thrashing\u201d that comes from driving several execution threads, model replicas, or GPUs from a single Python process. This is especially important for models that make heavy use of the Python runtime, including models with recurrent layers or many small components.\n\nEDIT:\nRan with with DataDistributed and the problem went away and got a nice speed improvement.", "body": "For anyone struggling with this, ``nn.LSTMCell`` works in the multiple GPU scenario while ``nn.LSTM`` does not. \r\n\r\nWith a model like this...\r\n```python\r\n    def forward(self, input_):\r\n        hidden_state = None\r\n        outputs = []\r\n        for i in range(input_.shape[0]):\r\n            output, hidden_state = self.rnn(input_[i].unsqueeze(0))\r\n            outputs.append(output)\r\n        return outputs\r\n```\r\n\r\nIt may be better to run ``DataDistributed`` instead of ``DataParallel``...\r\n> Each process contains an independent Python interpreter, eliminating the extra interpreter overhead and \u201cGIL-thrashing\u201d that comes from driving several execution threads, model replicas, or GPUs from a single Python process. **This is especially important for models that make heavy use of the Python runtime, including models with recurrent layers or many small components**.\r\n\r\nEDIT:\r\nRan with with ``DataDistributed`` and the problem went away and got a nice speed improvement."}