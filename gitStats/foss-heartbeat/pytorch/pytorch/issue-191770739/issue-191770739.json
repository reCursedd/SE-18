{"url": "https://api.github.com/repos/pytorch/pytorch/issues/254", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/254/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/254/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/254/events", "html_url": "https://github.com/pytorch/pytorch/issues/254", "id": 191770739, "node_id": "MDU6SXNzdWUxOTE3NzA3Mzk=", "number": 254, "title": "UnboundLocalError when importing torch.cuda", "user": {"login": "jcjohnson", "id": 2718714, "node_id": "MDQ6VXNlcjI3MTg3MTQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/2718714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jcjohnson", "html_url": "https://github.com/jcjohnson", "followers_url": "https://api.github.com/users/jcjohnson/followers", "following_url": "https://api.github.com/users/jcjohnson/following{/other_user}", "gists_url": "https://api.github.com/users/jcjohnson/gists{/gist_id}", "starred_url": "https://api.github.com/users/jcjohnson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jcjohnson/subscriptions", "organizations_url": "https://api.github.com/users/jcjohnson/orgs", "repos_url": "https://api.github.com/users/jcjohnson/repos", "events_url": "https://api.github.com/users/jcjohnson/events{/privacy}", "received_events_url": "https://api.github.com/users/jcjohnson/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-11-25T22:25:39Z", "updated_at": "2016-11-26T00:48:02Z", "closed_at": "2016-11-25T22:41:07Z", "author_association": "CONTRIBUTOR", "body_html": "<p>This code</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> torch\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">foo</span>():\n  <span class=\"pl-c1\">print</span> torch\n  <span class=\"pl-k\">import</span> torch.cuda\nfoo()</pre></div>\n<p>crashes on the <code>print</code> statement with  <code>UnboundLocalError: local variable 'torch' referenced before assignment</code>.</p>\n<p>All of the following permutations work without a problem:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> torch\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">foo</span>():\n  <span class=\"pl-k\">import</span> torch.cuda\n  <span class=\"pl-c1\">print</span> torch\nfoo()</pre></div>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> torch\n<span class=\"pl-c1\">print</span> torch\n<span class=\"pl-k\">import</span> torch.cuda</pre></div>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> torch\n<span class=\"pl-k\">import</span> torch.cuda\n<span class=\"pl-c1\">print</span> torch</pre></div>\n<p>My use case for this pattern is to only import <code>torch.cuda</code> when command-flags request the usage of a GPU; in Torch7 I've used this pattern because users without CUDA installed were unable to install <code>cutorch</code> or <code>cunn</code>, so they had to be conditionally imported. Is this still a concern in PyTorch?</p>", "body_text": "This code\nimport torch\n\ndef foo():\n  print torch\n  import torch.cuda\nfoo()\ncrashes on the print statement with  UnboundLocalError: local variable 'torch' referenced before assignment.\nAll of the following permutations work without a problem:\nimport torch\n\ndef foo():\n  import torch.cuda\n  print torch\nfoo()\nimport torch\nprint torch\nimport torch.cuda\nimport torch\nimport torch.cuda\nprint torch\nMy use case for this pattern is to only import torch.cuda when command-flags request the usage of a GPU; in Torch7 I've used this pattern because users without CUDA installed were unable to install cutorch or cunn, so they had to be conditionally imported. Is this still a concern in PyTorch?", "body": "This code\r\n\r\n```python\r\nimport torch\r\n\r\ndef foo():\r\n  print torch\r\n  import torch.cuda\r\nfoo()\r\n```\r\n\r\ncrashes on the `print` statement with  `UnboundLocalError: local variable 'torch' referenced before assignment`.\r\n\r\nAll of the following permutations work without a problem:\r\n\r\n```python\r\nimport torch\r\n\r\ndef foo():\r\n  import torch.cuda\r\n  print torch\r\nfoo()\r\n```\r\n\r\n```python\r\nimport torch\r\nprint torch\r\nimport torch.cuda\r\n```\r\n\r\n```python\r\nimport torch\r\nimport torch.cuda\r\nprint torch\r\n```\r\n\r\nMy use case for this pattern is to only import `torch.cuda` when command-flags request the usage of a GPU; in Torch7 I've used this pattern because users without CUDA installed were unable to install `cutorch` or `cunn`, so they had to be conditionally imported. Is this still a concern in PyTorch?"}