{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/382334419", "html_url": "https://github.com/pytorch/pytorch/pull/6307#issuecomment-382334419", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/6307", "id": 382334419, "node_id": "MDEyOklzc3VlQ29tbWVudDM4MjMzNDQxOQ==", "user": {"login": "fmassa", "id": 9110200, "node_id": "MDQ6VXNlcjkxMTAyMDA=", "avatar_url": "https://avatars2.githubusercontent.com/u/9110200?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fmassa", "html_url": "https://github.com/fmassa", "followers_url": "https://api.github.com/users/fmassa/followers", "following_url": "https://api.github.com/users/fmassa/following{/other_user}", "gists_url": "https://api.github.com/users/fmassa/gists{/gist_id}", "starred_url": "https://api.github.com/users/fmassa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fmassa/subscriptions", "organizations_url": "https://api.github.com/users/fmassa/orgs", "repos_url": "https://api.github.com/users/fmassa/repos", "events_url": "https://api.github.com/users/fmassa/events{/privacy}", "received_events_url": "https://api.github.com/users/fmassa/received_events", "type": "User", "site_admin": false}, "created_at": "2018-04-18T10:02:24Z", "updated_at": "2018-04-18T10:02:24Z", "author_association": "MEMBER", "body_html": "<p>And I think it's fine to have the tensor arguments being passed as tuple for the moment.<br>\nAnother workaround for the tuple parsing would be to have the python do the tuple wrapping:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">einsum</span>(<span class=\"pl-smi\">eqn</span>, <span class=\"pl-k\">*</span><span class=\"pl-smi\">args</span>):\n    <span class=\"pl-k\">return</span> torch._einsum(eqn, args)</pre></div>\n<p>but I don't think this is really necessary. <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=4583066\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/apaszke\">@apaszke</a> any thoughts on that? Do we <strong>really</strong> want to follow numpy einsum interface?</p>", "body_text": "And I think it's fine to have the tensor arguments being passed as tuple for the moment.\nAnother workaround for the tuple parsing would be to have the python do the tuple wrapping:\ndef einsum(eqn, *args):\n    return torch._einsum(eqn, args)\nbut I don't think this is really necessary. @apaszke any thoughts on that? Do we really want to follow numpy einsum interface?", "body": "And I think it's fine to have the tensor arguments being passed as tuple for the moment.\r\nAnother workaround for the tuple parsing would be to have the python do the tuple wrapping:\r\n```python\r\ndef einsum(eqn, *args):\r\n    return torch._einsum(eqn, args)\r\n```\r\nbut I don't think this is really necessary. @apaszke any thoughts on that? Do we **really** want to follow numpy einsum interface?"}