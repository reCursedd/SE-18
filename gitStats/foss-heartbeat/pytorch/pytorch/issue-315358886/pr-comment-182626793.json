{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/182626793", "pull_request_review_id": 113459141, "id": 182626793, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjYyNjc5Mw==", "diff_hunk": "@@ -373,32 +285,58 @@ OperatorDef TensorRTTransformer::BuildTrtOp(\n   return op;\n }\n \n-void TensorRTTransformer::ClusterToTrtOp(\n+NetDef TensorRTTransformer::SubnetToTrtOp(\n+    const caffe2::NetDef& net,\n     Workspace* ws,\n-    const NetDef& pred_net,\n-    int start,\n-    int end,\n-    const std::unordered_set<std::string>& weights,\n-    const std::unordered_map<std::string, TensorShape>& shape_hints,\n-    ::ONNX_NAMESPACE::ModelProto* model,\n-    std::vector<OperatorDef>* new_ops) {\n-  if (model->graph().node_size() == 0) {\n-    return;\n+    onnx::OnnxExporter* exporter,\n+    std::unordered_map<std::string, TensorShape>* shape_hints) {\n+  ::ONNX_NAMESPACE::ModelProto onnx_model;\n+  FillModelInfo(&onnx_model);\n+\n+  // Convert c2 ops to onnx ops, add const weights if there are any\n+  for (const auto& op : net.op()) {\n+    const auto results = exporter->Caffe2OpToOnnxNodes(op, *shape_hints);\n+    const auto& node_protos = results.first;\n+    for (const auto& n : node_protos) {\n+      onnx_model.mutable_graph()->add_node()->CopyFrom(n);\n+    }\n+    for (const auto& t : results.second) {\n+      VLOG(2) << \"Adding extra init tensor: \" << t.name();\n+      TensorShape shape;\n+      shape.mutable_dims()->CopyFrom(t.dims());\n+      shape_hints->emplace(t.name(), std::move(shape));\n+      ::ONNX_NAMESPACE::TensorProto tf;\n+      tf.set_name(t.name());\n+      tf.mutable_dims()->CopyFrom(t.dims());\n+      tf.set_data_type(::ONNX_NAMESPACE::TensorProto::FLOAT);\n+      std::vector<int64_t> v;\n+      v.resize(t.raw_data().size() / sizeof(int64_t));", "path": "caffe2/contrib/tensorrt/tensorrt_tranformer.cc", "position": 159, "original_position": 159, "commit_id": "f5557d66938f4b650f59ef0df73276bbb4401fb1", "original_commit_id": "1befdbf81796cfb902b8be63d2a848ba4bed5e65", "user": {"login": "yinghai", "id": 1100089, "node_id": "MDQ6VXNlcjExMDAwODk=", "avatar_url": "https://avatars1.githubusercontent.com/u/1100089?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yinghai", "html_url": "https://github.com/yinghai", "followers_url": "https://api.github.com/users/yinghai/followers", "following_url": "https://api.github.com/users/yinghai/following{/other_user}", "gists_url": "https://api.github.com/users/yinghai/gists{/gist_id}", "starred_url": "https://api.github.com/users/yinghai/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yinghai/subscriptions", "organizations_url": "https://api.github.com/users/yinghai/orgs", "repos_url": "https://api.github.com/users/yinghai/repos", "events_url": "https://api.github.com/users/yinghai/events{/privacy}", "received_events_url": "https://api.github.com/users/yinghai/received_events", "type": "User", "site_admin": false}, "body": "Hmm, I went sloppy on that, will fix. ", "created_at": "2018-04-19T03:41:28Z", "updated_at": "2018-11-23T15:42:49Z", "html_url": "https://github.com/pytorch/pytorch/pull/6696#discussion_r182626793", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/6696", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/182626793"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/6696#discussion_r182626793"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/6696"}}, "body_html": "<p>Hmm, I went sloppy on that, will fix.</p>", "body_text": "Hmm, I went sloppy on that, will fix.", "in_reply_to_id": 182560344}