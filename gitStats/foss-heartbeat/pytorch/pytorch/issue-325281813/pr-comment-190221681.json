{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/190221681", "pull_request_review_id": 122553483, "id": 190221681, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MDIyMTY4MQ==", "diff_hunk": "@@ -63,6 +63,12 @@\n }\n \"\"\")\n \n+DERIVATIVE_MULTI_COPY_RANGE = CodeTemplate(\"\"\"\\\n+  if (should_compute_output({ ${name}_ix })) {\n+    copy_range(grad_inputs, ${name}_ix, std::get<${i}>(grad_result));\n+  }", "path": "tools/autograd/gen_autograd_functions.py", "position": 7, "original_position": 7, "commit_id": "82e339d50dc51bbd4c6a073ab7d718a8c07a18a9", "original_commit_id": "82e339d50dc51bbd4c6a073ab7d718a8c07a18a9", "user": {"login": "t-vi", "id": 20787943, "node_id": "MDQ6VXNlcjIwNzg3OTQz", "avatar_url": "https://avatars2.githubusercontent.com/u/20787943?v=4", "gravatar_id": "", "url": "https://api.github.com/users/t-vi", "html_url": "https://github.com/t-vi", "followers_url": "https://api.github.com/users/t-vi/followers", "following_url": "https://api.github.com/users/t-vi/following{/other_user}", "gists_url": "https://api.github.com/users/t-vi/gists{/gist_id}", "starred_url": "https://api.github.com/users/t-vi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/t-vi/subscriptions", "organizations_url": "https://api.github.com/users/t-vi/orgs", "repos_url": "https://api.github.com/users/t-vi/repos", "events_url": "https://api.github.com/users/t-vi/events{/privacy}", "received_events_url": "https://api.github.com/users/t-vi/received_events", "type": "User", "site_admin": false}, "body": "From inspecting the generated Functions.cpp I had the impression that\r\n- Previously, copy_range was not called when the other grads of the \"MULTI\" had should_compute_output evaluate to false as well\r\n- Now, copy_range is not called for the parameters for which should_compute_output is false, regardless of it's \"peers\".\r\n\r\nSo I only make the calling of copy_range not depend on the other should_compute_outputs, and do not introduce a new \"type of result\" when considering each parameter on its own.\r\nI must admit that I still cannot figure out what to change when revisiting Functions.cpp with your comment in mind.", "created_at": "2018-05-23T12:10:33Z", "updated_at": "2018-11-23T15:44:34Z", "html_url": "https://github.com/pytorch/pytorch/pull/7759#discussion_r190221681", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/7759", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/190221681"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/7759#discussion_r190221681"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/7759"}}, "body_html": "<p>From inspecting the generated Functions.cpp I had the impression that</p>\n<ul>\n<li>Previously, copy_range was not called when the other grads of the \"MULTI\" had should_compute_output evaluate to false as well</li>\n<li>Now, copy_range is not called for the parameters for which should_compute_output is false, regardless of it's \"peers\".</li>\n</ul>\n<p>So I only make the calling of copy_range not depend on the other should_compute_outputs, and do not introduce a new \"type of result\" when considering each parameter on its own.<br>\nI must admit that I still cannot figure out what to change when revisiting Functions.cpp with your comment in mind.</p>", "body_text": "From inspecting the generated Functions.cpp I had the impression that\n\nPreviously, copy_range was not called when the other grads of the \"MULTI\" had should_compute_output evaluate to false as well\nNow, copy_range is not called for the parameters for which should_compute_output is false, regardless of it's \"peers\".\n\nSo I only make the calling of copy_range not depend on the other should_compute_outputs, and do not introduce a new \"type of result\" when considering each parameter on its own.\nI must admit that I still cannot figure out what to change when revisiting Functions.cpp with your comment in mind.", "in_reply_to_id": 190203706}