{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/190518108", "pull_request_review_id": 122908592, "id": 190518108, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MDUxODEwOA==", "diff_hunk": "@@ -63,6 +63,12 @@\n }\n \"\"\")\n \n+DERIVATIVE_MULTI_COPY_RANGE = CodeTemplate(\"\"\"\\\n+  if (should_compute_output({ ${name}_ix })) {\n+    copy_range(grad_inputs, ${name}_ix, std::get<${i}>(grad_result));\n+  }", "path": "tools/autograd/gen_autograd_functions.py", "position": 7, "original_position": 7, "commit_id": "82e339d50dc51bbd4c6a073ab7d718a8c07a18a9", "original_commit_id": "82e339d50dc51bbd4c6a073ab7d718a8c07a18a9", "user": {"login": "t-vi", "id": 20787943, "node_id": "MDQ6VXNlcjIwNzg3OTQz", "avatar_url": "https://avatars2.githubusercontent.com/u/20787943?v=4", "gravatar_id": "", "url": "https://api.github.com/users/t-vi", "html_url": "https://github.com/t-vi", "followers_url": "https://api.github.com/users/t-vi/followers", "following_url": "https://api.github.com/users/t-vi/following{/other_user}", "gists_url": "https://api.github.com/users/t-vi/gists{/gist_id}", "starred_url": "https://api.github.com/users/t-vi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/t-vi/subscriptions", "organizations_url": "https://api.github.com/users/t-vi/orgs", "repos_url": "https://api.github.com/users/t-vi/repos", "events_url": "https://api.github.com/users/t-vi/events{/privacy}", "received_events_url": "https://api.github.com/users/t-vi/received_events", "type": "User", "site_admin": false}, "body": "Oh, the above is hard to read without the context of the actual code. The generated snippet for cudnn rnn backward *before* the PR is:\r\n```\r\n  if (should_compute_output({ input_ix, hx_ix, cx_ix, weight_ix })) {\r\n      auto grad_input_mask = std::array<bool, 4>{\r\n      should_compute_output({ input_ix }),\r\n      should_compute_output({ hx_ix }),\r\n      should_compute_output({ cx_ix }),\r\n      should_compute_output({ weight_ix }),\r\n    };\r\n    auto grad_result = _cudnn_rnn_backward(input, weight, weight_stride0, result4, hx, cx, result0, grads[0], grads[1], grads[2], mode, hidden_size, num_layers, $\r\n    copy_range(grad_inputs, input_ix, std::get<0>(grad_result));\r\n    copy_range(grad_inputs, hx_ix, std::get<1>(grad_result));\r\n    copy_range(grad_inputs, cx_ix, std::get<2>(grad_result));\r\n    copy_range(grad_inputs, weight_ix, std::get<3>(grad_result));\r\n  }\r\n```\r\nand afterwards, you get the additional `if`s around the copy_range calls.\r\nLooking at that, I might use `grad_input_mask` instead of `should_compute_output` if you prefer.", "created_at": "2018-05-24T09:19:52Z", "updated_at": "2018-11-23T15:44:36Z", "html_url": "https://github.com/pytorch/pytorch/pull/7759#discussion_r190518108", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/7759", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/190518108"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/7759#discussion_r190518108"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/7759"}}, "body_html": "<p>Oh, the above is hard to read without the context of the actual code. The generated snippet for cudnn rnn backward <em>before</em> the PR is:</p>\n<pre><code>  if (should_compute_output({ input_ix, hx_ix, cx_ix, weight_ix })) {\n      auto grad_input_mask = std::array&lt;bool, 4&gt;{\n      should_compute_output({ input_ix }),\n      should_compute_output({ hx_ix }),\n      should_compute_output({ cx_ix }),\n      should_compute_output({ weight_ix }),\n    };\n    auto grad_result = _cudnn_rnn_backward(input, weight, weight_stride0, result4, hx, cx, result0, grads[0], grads[1], grads[2], mode, hidden_size, num_layers, $\n    copy_range(grad_inputs, input_ix, std::get&lt;0&gt;(grad_result));\n    copy_range(grad_inputs, hx_ix, std::get&lt;1&gt;(grad_result));\n    copy_range(grad_inputs, cx_ix, std::get&lt;2&gt;(grad_result));\n    copy_range(grad_inputs, weight_ix, std::get&lt;3&gt;(grad_result));\n  }\n</code></pre>\n<p>and afterwards, you get the additional <code>if</code>s around the copy_range calls.<br>\nLooking at that, I might use <code>grad_input_mask</code> instead of <code>should_compute_output</code> if you prefer.</p>", "body_text": "Oh, the above is hard to read without the context of the actual code. The generated snippet for cudnn rnn backward before the PR is:\n  if (should_compute_output({ input_ix, hx_ix, cx_ix, weight_ix })) {\n      auto grad_input_mask = std::array<bool, 4>{\n      should_compute_output({ input_ix }),\n      should_compute_output({ hx_ix }),\n      should_compute_output({ cx_ix }),\n      should_compute_output({ weight_ix }),\n    };\n    auto grad_result = _cudnn_rnn_backward(input, weight, weight_stride0, result4, hx, cx, result0, grads[0], grads[1], grads[2], mode, hidden_size, num_layers, $\n    copy_range(grad_inputs, input_ix, std::get<0>(grad_result));\n    copy_range(grad_inputs, hx_ix, std::get<1>(grad_result));\n    copy_range(grad_inputs, cx_ix, std::get<2>(grad_result));\n    copy_range(grad_inputs, weight_ix, std::get<3>(grad_result));\n  }\n\nand afterwards, you get the additional ifs around the copy_range calls.\nLooking at that, I might use grad_input_mask instead of should_compute_output if you prefer.", "in_reply_to_id": 190203706}