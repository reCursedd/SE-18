{"url": "https://api.github.com/repos/pytorch/pytorch/issues/6899", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/6899/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/6899/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/6899/events", "html_url": "https://github.com/pytorch/pytorch/pull/6899", "id": 317253876, "node_id": "MDExOlB1bGxSZXF1ZXN0MTgzNzU2ODcz", "number": 6899, "title": "Speedup sparse init", "user": {"login": "mttk", "id": 3007947, "node_id": "MDQ6VXNlcjMwMDc5NDc=", "avatar_url": "https://avatars2.githubusercontent.com/u/3007947?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mttk", "html_url": "https://github.com/mttk", "followers_url": "https://api.github.com/users/mttk/followers", "following_url": "https://api.github.com/users/mttk/following{/other_user}", "gists_url": "https://api.github.com/users/mttk/gists{/gist_id}", "starred_url": "https://api.github.com/users/mttk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mttk/subscriptions", "organizations_url": "https://api.github.com/users/mttk/orgs", "repos_url": "https://api.github.com/users/mttk/repos", "events_url": "https://api.github.com/users/mttk/events{/privacy}", "received_events_url": "https://api.github.com/users/mttk/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 545367190, "node_id": "MDU6TGFiZWw1NDUzNjcxOTA=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/awaiting%20response", "name": "awaiting response", "color": "5319e7", "default": false}, {"id": 897288569, "node_id": "MDU6TGFiZWw4OTcyODg1Njk=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/pytorch", "name": "pytorch", "color": "f05732", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-04-24T14:31:11Z", "updated_at": "2018-11-23T15:43:34Z", "closed_at": "2018-05-03T13:29:13Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/6899", "html_url": "https://github.com/pytorch/pytorch/pull/6899", "diff_url": "https://github.com/pytorch/pytorch/pull/6899.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/6899.patch"}, "body_html": "<p>As per <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"308740311\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/6021\" data-hovercard-type=\"issue\" data-hovercard-url=\"/pytorch/pytorch/issues/6021/hovercard\" href=\"https://github.com/pytorch/pytorch/issues/6021\">#6021</a></p>\n<ul>\n<li>Removes the nested for loop in favor of list indexing</li>\n<li>Obtains ~10-20x speedup on average.</li>\n</ul>\n<p>Following the discussion in the issue, I ran a shootout between the currently implemented initialization,  the version proposed by <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=11474759\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/stefanonardo\">@stefanonardo</a> (Opt1) and the version proposed by <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=9110200\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/fmassa\">@fmassa</a> (Opt2).</p>\n<p>I ran sparse init on tensors of sizes  <code>[(500, 500), (100, 100), (50, 50), (10, 10)]</code> and for sparsities of <code>[1, 0.1, 0.01]</code>. Each initialization was re-ran 10 times. What I learned:</p>\n<ul>\n<li>The original version is consistently &gt;= 10x slower</li>\n<li>Opt1 is faster for larger numbers of zero elements (due to what I assume, <code>topk</code> having complexity of k*n), where k is the number of zeros</li>\n<li>Opt2 is faster for smaller numbers of zero elements</li>\n</ul>\n<p>However, in the largest case I tested (500x500 tensor, sparsity=1), Opt2 is about the same speed as the original version, and in the other edge case (500x500 tensor, sparsity=0.01), it is ~27% slower with a higher speed deviation.</p>\n<p>Implementation credit goes to <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=11474759\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/stefanonardo\">@stefanonardo</a></p>\n<p>Full (badly formatted) results are here for the next month: <a href=\"https://pastebin.com/fB4mHqM9\" rel=\"nofollow\">https://pastebin.com/fB4mHqM9</a></p>", "body_text": "As per #6021\n\nRemoves the nested for loop in favor of list indexing\nObtains ~10-20x speedup on average.\n\nFollowing the discussion in the issue, I ran a shootout between the currently implemented initialization,  the version proposed by @stefanonardo (Opt1) and the version proposed by @fmassa (Opt2).\nI ran sparse init on tensors of sizes  [(500, 500), (100, 100), (50, 50), (10, 10)] and for sparsities of [1, 0.1, 0.01]. Each initialization was re-ran 10 times. What I learned:\n\nThe original version is consistently >= 10x slower\nOpt1 is faster for larger numbers of zero elements (due to what I assume, topk having complexity of k*n), where k is the number of zeros\nOpt2 is faster for smaller numbers of zero elements\n\nHowever, in the largest case I tested (500x500 tensor, sparsity=1), Opt2 is about the same speed as the original version, and in the other edge case (500x500 tensor, sparsity=0.01), it is ~27% slower with a higher speed deviation.\nImplementation credit goes to @stefanonardo\nFull (badly formatted) results are here for the next month: https://pastebin.com/fB4mHqM9", "body": "As per #6021\r\n\r\n- Removes the nested for loop in favor of list indexing\r\n- Obtains ~10-20x speedup on average.\r\n\r\nFollowing the discussion in the issue, I ran a shootout between the currently implemented initialization,  the version proposed by @stefanonardo (Opt1) and the version proposed by @fmassa (Opt2).\r\n\r\nI ran sparse init on tensors of sizes  `[(500, 500), (100, 100), (50, 50), (10, 10)]` and for sparsities of `[1, 0.1, 0.01]`. Each initialization was re-ran 10 times. What I learned:\r\n\r\n- The original version is consistently >= 10x slower\r\n- Opt1 is faster for larger numbers of zero elements (due to what I assume, `topk` having complexity of k*n), where k is the number of zeros\r\n- Opt2 is faster for smaller numbers of zero elements\r\n\r\nHowever, in the largest case I tested (500x500 tensor, sparsity=1), Opt2 is about the same speed as the original version, and in the other edge case (500x500 tensor, sparsity=0.01), it is ~27% slower with a higher speed deviation.\r\n\r\nImplementation credit goes to @stefanonardo \r\n\r\nFull (badly formatted) results are here for the next month: https://pastebin.com/fB4mHqM9\r\n"}