{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/275580109", "html_url": "https://github.com/pytorch/pytorch/issues/599#issuecomment-275580109", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/599", "id": 275580109, "node_id": "MDEyOklzc3VlQ29tbWVudDI3NTU4MDEwOQ==", "user": {"login": "colesbury", "id": 655866, "node_id": "MDQ6VXNlcjY1NTg2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/655866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colesbury", "html_url": "https://github.com/colesbury", "followers_url": "https://api.github.com/users/colesbury/followers", "following_url": "https://api.github.com/users/colesbury/following{/other_user}", "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions", "organizations_url": "https://api.github.com/users/colesbury/orgs", "repos_url": "https://api.github.com/users/colesbury/repos", "events_url": "https://api.github.com/users/colesbury/events{/privacy}", "received_events_url": "https://api.github.com/users/colesbury/received_events", "type": "User", "site_admin": false}, "created_at": "2017-01-27T03:15:21Z", "updated_at": "2017-01-27T03:15:21Z", "author_association": "MEMBER", "body_html": "<p>The issue is that <code>CudnnRNN</code> in <code>torch/nn/_functions/rnn.py</code> creates cyclic references. It's made worse by the fact that it holds on to more memory than it should (like the workspace). You can see this by adding a <code>gc.collect()</code> as the first line in your for loop. With the explicit call to the GC every iteration, the memory usage doesn't explode.</p>", "body_text": "The issue is that CudnnRNN in torch/nn/_functions/rnn.py creates cyclic references. It's made worse by the fact that it holds on to more memory than it should (like the workspace). You can see this by adding a gc.collect() as the first line in your for loop. With the explicit call to the GC every iteration, the memory usage doesn't explode.", "body": "The issue is that `CudnnRNN` in `torch/nn/_functions/rnn.py` creates cyclic references. It's made worse by the fact that it holds on to more memory than it should (like the workspace). You can see this by adding a `gc.collect()` as the first line in your for loop. With the explicit call to the GC every iteration, the memory usage doesn't explode."}