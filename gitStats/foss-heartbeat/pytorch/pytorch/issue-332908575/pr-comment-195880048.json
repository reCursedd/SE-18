{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/195880048", "pull_request_review_id": 129338498, "id": 195880048, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTg4MDA0OA==", "diff_hunk": "@@ -318,7 +318,18 @@ include_directories(SYSTEM ${EIGEN3_INCLUDE_DIR})\n \n # ---[ Python + Numpy\n if(BUILD_PYTHON)\n-  set(Python_ADDITIONAL_VERSIONS 3.6 3.5 2.8 2.7 2.6)\n+  # Put the currently-activated python version at the front of\n+  # Python_ADDITIONAL_VERSIONS so that it is found first. Otherwise there may\n+  # be mismatches between Python executables and libraries used at different\n+  # stages of build time and at runtime", "path": "cmake/Dependencies.cmake", "position": 8, "original_position": 8, "commit_id": "d18b7ed9441ad56a4c40d3ffb5f99d4f5d05e0e6", "original_commit_id": "378e2ccf5e5d0f5cb588ac8e1d0ec98509a292a9", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "This seems like an oddly oblique way to get what you want. Given that you want to pin to whatever `python` is (BTW, not *necessarily* always the case), why don't you just invoke Python to get all of the information you need?\r\n\r\nThe scheme as it is here, couldn't I hypothetically get a Python that is different from `python`, but \"happens\" to have the same version?", "created_at": "2018-06-15T22:59:05Z", "updated_at": "2018-11-23T15:45:41Z", "html_url": "https://github.com/pytorch/pytorch/pull/8569#discussion_r195880048", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/8569", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/195880048"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/8569#discussion_r195880048"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/8569"}}, "body_html": "<p>This seems like an oddly oblique way to get what you want. Given that you want to pin to whatever <code>python</code> is (BTW, not <em>necessarily</em> always the case), why don't you just invoke Python to get all of the information you need?</p>\n<p>The scheme as it is here, couldn't I hypothetically get a Python that is different from <code>python</code>, but \"happens\" to have the same version?</p>", "body_text": "This seems like an oddly oblique way to get what you want. Given that you want to pin to whatever python is (BTW, not necessarily always the case), why don't you just invoke Python to get all of the information you need?\nThe scheme as it is here, couldn't I hypothetically get a Python that is different from python, but \"happens\" to have the same version?"}