{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/158278348", "pull_request_review_id": 85062733, "id": 158278348, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODI3ODM0OA==", "diff_hunk": "@@ -2164,6 +2164,84 @@ def test_invalid_dropout_p(self):\n         self.assertRaises(ValueError, lambda: F.dropout(v, -0.1))\n         self.assertRaises(ValueError, lambda: F.dropout(v, 1.1))\n \n+    def test_pad_sequence(self):\n+        def pad(tensor, length):\n+            return torch.cat(\n+                [tensor.data, tensor.data.new(\n+                    length - tensor.size(0), *tensor.size()[1:]).zero_()])\n+        # single dimensional\n+        a = Variable(torch.Tensor([1, 2, 3]))\n+        b = Variable(torch.Tensor([4, 5]))\n+        c = Variable(torch.Tensor([6]))\n+\n+        # batch_first = true\n+        expected = Variable(torch.Tensor([[1, 2, 3], [4, 5, 0], [6, 0, 0]]))\n+        padded = rnn_utils.pad_sequence([a, b, c], [3, 2, 1], True)\n+        self.assertEqual(padded, expected)\n+\n+        # batch_first = false\n+        padded = rnn_utils.pad_sequence([a, b, c], [3, 2, 1])\n+        self.assertEqual(padded, expected.transpose(0, 1))\n+\n+        # more dimensional\n+        maxlen = 9\n+        for num_dim in (0, 1, 2, 3):\n+            sequences = []\n+            lengths = []\n+            trailing_dims = [4] * num_dim\n+            for i in range(maxlen, 0, -1):\n+                seq_len = i * i\n+                lengths.append(seq_len)\n+                sequences.append(Variable(torch.rand(seq_len, 5, *trailing_dims)))\n+            expected = []\n+            for seq in sequences:\n+                expected.append(pad(seq, maxlen * maxlen))\n+            # batch first = true\n+            expected = Variable(torch.stack(expected))\n+            padded = rnn_utils.pad_sequence(sequences, lengths, True)\n+            self.assertEqual(padded, expected)\n+\n+            # batch first = false\n+            padded = rnn_utils.pad_sequence(sequences, lengths)\n+            self.assertEqual(padded, expected.transpose(0, 1))\n+\n+        # unsorted sequences should raise exception\n+        self.assertRaises(\n+            ValueError, lambda: rnn_utils.pad_sequence([b, a, c], [2, 3, 1]))\n+\n+    def test_pack_sequence(self):\n+        def _compatibility_test(sequences, lengths, batch_first):\n+            padded = rnn_utils.pad_sequence(sequences, lengths, batch_first)\n+            packed = rnn_utils.pack_sequence(sequences, lengths)\n+            unpacked = rnn_utils.pad_packed_sequence(packed, batch_first)\n+            self.assertEqual(padded, unpacked[0])", "path": "test/test_nn.py", "position": null, "original_position": 54, "commit_id": "7bdd58e4ab2ef58e72c2d1b5fa62f3dc0f511cf6", "original_commit_id": "35487fed37b4c49b981944999c8fbca853acf841", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Why is this `[0]` necessary? This seems incorrect to me", "created_at": "2017-12-21T13:37:50Z", "updated_at": "2018-11-23T15:37:35Z", "html_url": "https://github.com/pytorch/pytorch/pull/3875#discussion_r158278348", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/3875", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/158278348"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/3875#discussion_r158278348"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/3875"}}, "body_html": "<p>Why is this <code>[0]</code> necessary? This seems incorrect to me</p>", "body_text": "Why is this [0] necessary? This seems incorrect to me"}