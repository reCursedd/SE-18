{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/154505424", "pull_request_review_id": 80683506, "id": 154505424, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDUwNTQyNA==", "diff_hunk": "@@ -123,3 +124,126 @@ def pad_packed_sequence(sequence, batch_first=False, padding_value=0.0):\n     if batch_first:\n         output = output.transpose(0, 1)\n     return output, lengths\n+\n+\n+def pad_sequence(sequences, lengths, batch_first=False):\n+    r\"\"\"Pad a list of variable length Variables with zero\n+\n+    The ``pad_sequence`` pads the list of Variables on zeroth dimension and\n+    stack all the sequences on zeroth dimension. For example, if the input is\n+    list of sequences with size `` Lx*`` and if batch_first is False, the\n+    output will be of size `` TxBx* `` and if batch_first is True,\n+    output will be of size ``BxTx* ``. The ``pad_sequence`` accepts list of\n+    sequences and its lengths which should be sorted in decreasing order\n+\n+    B is batch size - Number of elements in ``sequences``\n+    T is length longest sequence\n+    L is length of the sequence\n+    * is any number of trailing dimensions, including none\n+\n+    >>> from torch.nn.utils.rnn import pad_sequence\n+    >>> a = Variable(torch.ones(25, 300))\n+    >>> b = Variable(torch.ones(22, 300))\n+    >>> c = Variable(torch.ones(15, 300))\n+    >>> pad_sequence([a, b, c], [25, 22, 15]).size()\n+    torch.Size([25, 3, 300])\n+\n+    Note:\n+        This function returns a Variable of size TxBx* or BxTx* where T is the\n+            length of longest sequence (lengths[0])\n+        Function assumes trailing dimensions and type of all the Variables\n+            in sequences are same\n+\n+    Arguments:\n+        sequences (list[Variable]): list of variable length sequences.\n+        lengths (list[int]): list of sequences lengths of each batch element.\n+        batch_first (bool, optional): if True, the input is expected in Bx*x*\n+            format.\n+\n+    Returns:\n+        Variable of size ``T x B x * `` if batch_first = False\n+        Variable of size ``B x T x * `` otherwise\n+    \"\"\"\n+\n+    if len(lengths) != len(sequences):\n+        raise ValueError(\"number of elements in lengths and sequences didn't match\")\n+\n+    # assuming trailing dimensions and type of all the Variables\n+    # in sequences are same and fetching those from sequences[0]\n+    max_len = lengths[0]\n+    trailing_dims = list(sequences[0].size())[1:]\n+    prev_l = max_len\n+    if batch_first:\n+        out_dims = [len(sequences), max_len] + trailing_dims\n+        out_variable = Variable(sequences[0].data.new(*out_dims).zero_())\n+        for i, variable, length in zip(range(len(lengths)), sequences, lengths):\n+            # temperory sort check, can be removed when we handle sorting internally\n+            if prev_l < length:\n+                    raise ValueError(\"lengths array has to be sorted in decreasing order\")\n+            prev_l = length\n+            if length < max_len:\n+                prev_l = length\n+                padding_dims = [lengths[0] - length] + trailing_dims\n+                filler = Variable(variable.data.new(*padding_dims).zero_())\n+                out_variable[i] = torch.cat((variable, filler))", "path": "torch/nn/utils/rnn.py", "position": null, "original_position": 71, "commit_id": "7bdd58e4ab2ef58e72c2d1b5fa62f3dc0f511cf6", "original_commit_id": "91291f56d4006c7dcdc9de4c57ac9ac643ec2fdb", "user": {"login": "fmassa", "id": 9110200, "node_id": "MDQ6VXNlcjkxMTAyMDA=", "avatar_url": "https://avatars2.githubusercontent.com/u/9110200?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fmassa", "html_url": "https://github.com/fmassa", "followers_url": "https://api.github.com/users/fmassa/followers", "following_url": "https://api.github.com/users/fmassa/following{/other_user}", "gists_url": "https://api.github.com/users/fmassa/gists{/gist_id}", "starred_url": "https://api.github.com/users/fmassa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fmassa/subscriptions", "organizations_url": "https://api.github.com/users/fmassa/orgs", "repos_url": "https://api.github.com/users/fmassa/repos", "events_url": "https://api.github.com/users/fmassa/events{/privacy}", "received_events_url": "https://api.github.com/users/fmassa/received_events", "type": "User", "site_admin": false}, "body": "Question: instead of performing the concatenation, can't we instead slice `out_variable` and only copy `variable`?\r\nSomething like (untested)\r\n```python\r\nout_variable[i, :length] = variable\r\n```\r\n?", "created_at": "2017-12-02T20:04:44Z", "updated_at": "2018-11-23T15:37:02Z", "html_url": "https://github.com/pytorch/pytorch/pull/3875#discussion_r154505424", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/3875", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/154505424"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/3875#discussion_r154505424"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/3875"}}, "body_html": "<p>Question: instead of performing the concatenation, can't we instead slice <code>out_variable</code> and only copy <code>variable</code>?<br>\nSomething like (untested)</p>\n<div class=\"highlight highlight-source-python\"><pre>out_variable[i, :length] <span class=\"pl-k\">=</span> variable</pre></div>\n<p>?</p>", "body_text": "Question: instead of performing the concatenation, can't we instead slice out_variable and only copy variable?\nSomething like (untested)\nout_variable[i, :length] = variable\n?"}