{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/396790191", "html_url": "https://github.com/pytorch/pytorch/issues/8329#issuecomment-396790191", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/8329", "id": 396790191, "node_id": "MDEyOklzc3VlQ29tbWVudDM5Njc5MDE5MQ==", "user": {"login": "HuangJunJie2017", "id": 31001081, "node_id": "MDQ6VXNlcjMxMDAxMDgx", "avatar_url": "https://avatars3.githubusercontent.com/u/31001081?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HuangJunJie2017", "html_url": "https://github.com/HuangJunJie2017", "followers_url": "https://api.github.com/users/HuangJunJie2017/followers", "following_url": "https://api.github.com/users/HuangJunJie2017/following{/other_user}", "gists_url": "https://api.github.com/users/HuangJunJie2017/gists{/gist_id}", "starred_url": "https://api.github.com/users/HuangJunJie2017/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HuangJunJie2017/subscriptions", "organizations_url": "https://api.github.com/users/HuangJunJie2017/orgs", "repos_url": "https://api.github.com/users/HuangJunJie2017/repos", "events_url": "https://api.github.com/users/HuangJunJie2017/events{/privacy}", "received_events_url": "https://api.github.com/users/HuangJunJie2017/received_events", "type": "User", "site_admin": false}, "created_at": "2018-06-13T02:05:32Z", "updated_at": "2018-06-13T02:06:03Z", "author_association": "NONE", "body_html": "<h1>Summary</h1>\n<h2>Issue</h2>\n<p>using 'torch.utils.ffi' for C extension under windows environment</p>\n<h2>Environment</h2>\n<p>windows10 + python3.6.4 + pytorch 0.4.0 + VS2015</p>\n<h2>Specific question</h2>\n<p>using C extension to implement the add operation on 'torch.Tensor' (i.e. torch.Tensor + torch.Tensor)</p>\n<h2>File prepare</h2>\n<h3>src/my_lib.cpp</h3>\n<p>/* src/my_lib.cpp */<br>\n#include &lt;THC/THC.h&gt;<br>\n#include &lt;ATen/ATen.h&gt;</p>\n<p>THCState *state = at::globalContext().thc_state;</p>\n<p>extern \"C\" int my_lib_add_forward(THFloatTensor *input1, THFloatTensor *input2,<br>\nTHFloatTensor *output)<br>\n{<br>\nif (!THFloatTensor_isSameSizeAs(input1, input2))<br>\nreturn 0;<br>\nTHFloatTensor_resizeAs(output, input1);<br>\nTHFloatTensor_cadd(output, input1, 1.0, input2);<br>\nreturn 1;<br>\n}</p>\n<p>extern \"C\" int my_lib_add_backward(THFloatTensor *grad_output, THFloatTensor *grad_input)<br>\n{<br>\nTHFloatTensor_resizeAs(grad_input, grad_output);<br>\nTHFloatTensor_fill(grad_input, 1);<br>\nreturn 1;<br>\n}</p>\n<h3>src/my_lib.h</h3>\n<p>/* src/my_lib.h */<br>\nint my_lib_add_forward(THFloatTensor *input1, THFloatTensor *input2, THFloatTensor *output);<br>\nint my_lib_add_backward(THFloatTensor *grad_output, THFloatTensor *grad_input);</p>\n<h3>build.py</h3>\n<p>from torch.utils.ffi import create_extension<br>\nffi = create_extension(<br>\nname='_ext.my_lib_test',<br>\nheaders=['src/my_lib_test.h'],<br>\nsources=['src/my_lib_test.cpp'],<br>\nrelative_to=<strong>file</strong>,<br>\nwith_cuda=False,<br>\nextra_compile_args=[\"-std=c99\"],<br>\ninclude_dirs = ['C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include'],  # add this if there's an error of 'cuda.h missing'<br>\nlibrary_dirs = ['C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\lib\\x64'],  # example<br>\nlibraries=['ATen', '_C'] # Append cuda libaries when necessary, like cudart<br>\n)<br>\nffi.build()</p>\n<h2>Operation</h2>\n<p>run build.py by 'python  build.py'<br>\nto test the result, follow the instruction in<br>\n<a href=\"https://pytorch.org/tutorials/advanced/c_extension.html\" rel=\"nofollow\">https://pytorch.org/tutorials/advanced/c_extension.html</a></p>\n<h2>Two details</h2>\n<h3>error \u201ccuda.h\u201d: No such file or directory</h3>\n<p>add 'include_dirs' option to ffi define</p>\n<h3>clean the build before build again</h3>\n<p>delete the directory _ext, _ext.my_lib or anything like that</p>\n<h2>Reference</h2>\n<p>error \u201ccuda.h\u201d: No such file or directory<br>\n<a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"331151464\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/8329\" data-hovercard-type=\"issue\" data-hovercard-url=\"/pytorch/pytorch/issues/8329/hovercard\" href=\"https://github.com/pytorch/pytorch/issues/8329\">#8329</a></p>\n<p>C extension in linux<br>\n<a href=\"https://pytorch.org/tutorials/advanced/c_extension.html\" rel=\"nofollow\">https://pytorch.org/tutorials/advanced/c_extension.html</a></p>\n<p>Modified C extension for windows<br>\n<a href=\"https://pytorch.org/docs/stable/notes/windows.html#cffi-extension\" rel=\"nofollow\">https://pytorch.org/docs/stable/notes/windows.html#cffi-extension</a></p>", "body_text": "Summary\nIssue\nusing 'torch.utils.ffi' for C extension under windows environment\nEnvironment\nwindows10 + python3.6.4 + pytorch 0.4.0 + VS2015\nSpecific question\nusing C extension to implement the add operation on 'torch.Tensor' (i.e. torch.Tensor + torch.Tensor)\nFile prepare\nsrc/my_lib.cpp\n/* src/my_lib.cpp */\n#include <THC/THC.h>\n#include <ATen/ATen.h>\nTHCState *state = at::globalContext().thc_state;\nextern \"C\" int my_lib_add_forward(THFloatTensor *input1, THFloatTensor *input2,\nTHFloatTensor *output)\n{\nif (!THFloatTensor_isSameSizeAs(input1, input2))\nreturn 0;\nTHFloatTensor_resizeAs(output, input1);\nTHFloatTensor_cadd(output, input1, 1.0, input2);\nreturn 1;\n}\nextern \"C\" int my_lib_add_backward(THFloatTensor *grad_output, THFloatTensor *grad_input)\n{\nTHFloatTensor_resizeAs(grad_input, grad_output);\nTHFloatTensor_fill(grad_input, 1);\nreturn 1;\n}\nsrc/my_lib.h\n/* src/my_lib.h */\nint my_lib_add_forward(THFloatTensor *input1, THFloatTensor *input2, THFloatTensor *output);\nint my_lib_add_backward(THFloatTensor *grad_output, THFloatTensor *grad_input);\nbuild.py\nfrom torch.utils.ffi import create_extension\nffi = create_extension(\nname='_ext.my_lib_test',\nheaders=['src/my_lib_test.h'],\nsources=['src/my_lib_test.cpp'],\nrelative_to=file,\nwith_cuda=False,\nextra_compile_args=[\"-std=c99\"],\ninclude_dirs = ['C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include'],  # add this if there's an error of 'cuda.h missing'\nlibrary_dirs = ['C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\lib\\x64'],  # example\nlibraries=['ATen', '_C'] # Append cuda libaries when necessary, like cudart\n)\nffi.build()\nOperation\nrun build.py by 'python  build.py'\nto test the result, follow the instruction in\nhttps://pytorch.org/tutorials/advanced/c_extension.html\nTwo details\nerror \u201ccuda.h\u201d: No such file or directory\nadd 'include_dirs' option to ffi define\nclean the build before build again\ndelete the directory _ext, _ext.my_lib or anything like that\nReference\nerror \u201ccuda.h\u201d: No such file or directory\n#8329\nC extension in linux\nhttps://pytorch.org/tutorials/advanced/c_extension.html\nModified C extension for windows\nhttps://pytorch.org/docs/stable/notes/windows.html#cffi-extension", "body": "# Summary\r\n## Issue\r\nusing 'torch.utils.ffi' for C extension under windows environment\r\n\r\n## Environment\r\nwindows10 + python3.6.4 + pytorch 0.4.0 + VS2015 \r\n\r\n## Specific question\r\nusing C extension to implement the add operation on 'torch.Tensor' (i.e. torch.Tensor + torch.Tensor)\r\n\r\n## File prepare\r\n### src/my_lib.cpp \r\n/* src/my_lib.cpp */\r\n#include <THC/THC.h>\r\n#include <ATen/ATen.h>\r\n\r\nTHCState *state = at::globalContext().thc_state;\r\n\r\nextern \"C\" int my_lib_add_forward(THFloatTensor *input1, THFloatTensor *input2,\r\nTHFloatTensor *output)\r\n{\r\nif (!THFloatTensor_isSameSizeAs(input1, input2))\r\nreturn 0;\r\nTHFloatTensor_resizeAs(output, input1);\r\nTHFloatTensor_cadd(output, input1, 1.0, input2);\r\nreturn 1;\r\n}\r\n\r\nextern \"C\" int my_lib_add_backward(THFloatTensor *grad_output, THFloatTensor *grad_input)\r\n{\r\nTHFloatTensor_resizeAs(grad_input, grad_output);\r\nTHFloatTensor_fill(grad_input, 1);\r\nreturn 1;\r\n}\r\n\r\n### src/my_lib.h\r\n/* src/my_lib.h */\r\nint my_lib_add_forward(THFloatTensor *input1, THFloatTensor *input2, THFloatTensor *output);\r\nint my_lib_add_backward(THFloatTensor *grad_output, THFloatTensor *grad_input);\r\n\r\n### build.py\r\nfrom torch.utils.ffi import create_extension\r\nffi = create_extension(\r\nname='_ext.my_lib_test',\r\nheaders=['src/my_lib_test.h'],\r\nsources=['src/my_lib_test.cpp'],\r\nrelative_to=__file__,\r\nwith_cuda=False,\r\nextra_compile_args=[\"-std=c99\"],\r\ninclude_dirs = ['C:\\\\Program Files\\\\NVIDIA GPU Computing Toolkit\\\\CUDA\\\\v8.0\\\\include'],  # add this if there's an error of 'cuda.h missing'\r\nlibrary_dirs = ['C:\\\\Program Files\\\\NVIDIA GPU Computing Toolkit\\\\CUDA\\\\v8.0\\\\lib\\\\x64'],  # example\r\nlibraries=['ATen', '_C'] # Append cuda libaries when necessary, like cudart\r\n)\r\nffi.build()\r\n\r\n\r\n\r\n## Operation\r\nrun build.py by 'python  build.py'\r\nto test the result, follow the instruction in  \r\nhttps://pytorch.org/tutorials/advanced/c_extension.html\r\n\r\n## Two details\r\n### error \u201ccuda.h\u201d: No such file or directory\r\nadd 'include_dirs' option to ffi define\r\n\r\n### clean the build before build again\r\ndelete the directory _ext, _ext.my_lib or anything like that\r\n\r\n## Reference\r\nerror \u201ccuda.h\u201d: No such file or directory\r\nhttps://github.com/pytorch/pytorch/issues/8329\r\n\r\nC extension in linux\r\nhttps://pytorch.org/tutorials/advanced/c_extension.html\r\n\r\nModified C extension for windows\r\nhttps://pytorch.org/docs/stable/notes/windows.html#cffi-extension"}