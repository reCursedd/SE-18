{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/398864984", "html_url": "https://github.com/pytorch/pytorch/issues/7961#issuecomment-398864984", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/7961", "id": 398864984, "node_id": "MDEyOklzc3VlQ29tbWVudDM5ODg2NDk4NA==", "user": {"login": "simon555", "id": 29953850, "node_id": "MDQ6VXNlcjI5OTUzODUw", "avatar_url": "https://avatars0.githubusercontent.com/u/29953850?v=4", "gravatar_id": "", "url": "https://api.github.com/users/simon555", "html_url": "https://github.com/simon555", "followers_url": "https://api.github.com/users/simon555/followers", "following_url": "https://api.github.com/users/simon555/following{/other_user}", "gists_url": "https://api.github.com/users/simon555/gists{/gist_id}", "starred_url": "https://api.github.com/users/simon555/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/simon555/subscriptions", "organizations_url": "https://api.github.com/users/simon555/orgs", "repos_url": "https://api.github.com/users/simon555/repos", "events_url": "https://api.github.com/users/simon555/events{/privacy}", "received_events_url": "https://api.github.com/users/simon555/received_events", "type": "User", "site_admin": false}, "created_at": "2018-06-20T19:16:15Z", "updated_at": "2018-06-20T19:17:33Z", "author_association": "NONE", "body_html": "<p>And here is my training loop   :</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">for</span> epoch <span class=\"pl-k\">in</span> <span class=\"pl-c1\">range</span>(args.epochs):\n        <span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Epoch <span class=\"pl-c1\">{}</span>, lr <span class=\"pl-c1\">{}</span><span class=\"pl-pds\">\"</span></span>.format(epoch, optimizer.param_groups[<span class=\"pl-c1\">0</span>][<span class=\"pl-s\"><span class=\"pl-pds\">'</span>lr<span class=\"pl-pds\">'</span></span>]))\n        train_loss, train_words <span class=\"pl-k\">=</span> model.train_epoch(\n            <span class=\"pl-v\">iter</span><span class=\"pl-k\">=</span>train_iter, <span class=\"pl-v\">loss</span><span class=\"pl-k\">=</span>loss, <span class=\"pl-v\">optimizer</span><span class=\"pl-k\">=</span>optimizer,<span class=\"pl-v\">infoToPlot</span><span class=\"pl-k\">=</span>infoToPlot, <span class=\"pl-v\">viz</span><span class=\"pl-k\">=</span>viz, <span class=\"pl-v\">win</span><span class=\"pl-k\">=</span>win, <span class=\"pl-v\">TEXT</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">TEXT</span>)\n        valid_loss, valid_words <span class=\"pl-k\">=</span> model.validate(valid_iter, loss, <span class=\"pl-v\">infoToPlot</span><span class=\"pl-k\">=</span>infoToPlot, <span class=\"pl-v\">viz</span><span class=\"pl-k\">=</span>viz, <span class=\"pl-v\">win</span><span class=\"pl-k\">=</span>win)\n        schedule.step(valid_loss)\n        <span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Train: <span class=\"pl-c1\">{}</span>, Valid: <span class=\"pl-c1\">{}</span><span class=\"pl-pds\">\"</span></span>.format(\n            math.exp(train_loss <span class=\"pl-k\">/</span> train_words), math.exp(valid_loss <span class=\"pl-k\">/</span> valid_words)))\n        \n        <span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>save info...<span class=\"pl-pds\">'</span></span>)\n        <span class=\"pl-k\">with</span> <span class=\"pl-c1\">open</span>(os.path.join(directoryData,<span class=\"pl-s\"><span class=\"pl-pds\">'</span>data.pkl<span class=\"pl-pds\">'</span></span>), <span class=\"pl-s\"><span class=\"pl-pds\">'</span>wb<span class=\"pl-pds\">'</span></span>) <span class=\"pl-k\">as</span> f:\n            pickle.dump(infoToPlot, f, pickle.<span class=\"pl-c1\">HIGHEST_PROTOCOL</span>)\n        <span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>generate sameple sentences...<span class=\"pl-pds\">'</span></span>)    \n        outputs<span class=\"pl-k\">=</span>model.generate_predictions(<span class=\"pl-c1\">TEXT</span>, <span class=\"pl-v\">saveOutputs</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>)<span class=\"pl-bu\">`</span></pre></div>", "body_text": "And here is my training loop   :\nfor epoch in range(args.epochs):\n        print(\"Epoch {}, lr {}\".format(epoch, optimizer.param_groups[0]['lr']))\n        train_loss, train_words = model.train_epoch(\n            iter=train_iter, loss=loss, optimizer=optimizer,infoToPlot=infoToPlot, viz=viz, win=win, TEXT=TEXT)\n        valid_loss, valid_words = model.validate(valid_iter, loss, infoToPlot=infoToPlot, viz=viz, win=win)\n        schedule.step(valid_loss)\n        print(\"Train: {}, Valid: {}\".format(\n            math.exp(train_loss / train_words), math.exp(valid_loss / valid_words)))\n        \n        print('save info...')\n        with open(os.path.join(directoryData,'data.pkl'), 'wb') as f:\n            pickle.dump(infoToPlot, f, pickle.HIGHEST_PROTOCOL)\n        print('generate sameple sentences...')    \n        outputs=model.generate_predictions(TEXT, saveOutputs=True)`", "body": "And here is my training loop   : \r\n\r\n```py\r\nfor epoch in range(args.epochs):\r\n        print(\"Epoch {}, lr {}\".format(epoch, optimizer.param_groups[0]['lr']))\r\n        train_loss, train_words = model.train_epoch(\r\n            iter=train_iter, loss=loss, optimizer=optimizer,infoToPlot=infoToPlot, viz=viz, win=win, TEXT=TEXT)\r\n        valid_loss, valid_words = model.validate(valid_iter, loss, infoToPlot=infoToPlot, viz=viz, win=win)\r\n        schedule.step(valid_loss)\r\n        print(\"Train: {}, Valid: {}\".format(\r\n            math.exp(train_loss / train_words), math.exp(valid_loss / valid_words)))\r\n        \r\n        print('save info...')\r\n        with open(os.path.join(directoryData,'data.pkl'), 'wb') as f:\r\n            pickle.dump(infoToPlot, f, pickle.HIGHEST_PROTOCOL)\r\n        print('generate sameple sentences...')    \r\n        outputs=model.generate_predictions(TEXT, saveOutputs=True)`"}