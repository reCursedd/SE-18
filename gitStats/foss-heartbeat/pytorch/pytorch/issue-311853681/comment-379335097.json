{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/379335097", "html_url": "https://github.com/pytorch/pytorch/issues/6338#issuecomment-379335097", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/6338", "id": 379335097, "node_id": "MDEyOklzc3VlQ29tbWVudDM3OTMzNTA5Nw==", "user": {"login": "SsnL", "id": 5674597, "node_id": "MDQ6VXNlcjU2NzQ1OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5674597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SsnL", "html_url": "https://github.com/SsnL", "followers_url": "https://api.github.com/users/SsnL/followers", "following_url": "https://api.github.com/users/SsnL/following{/other_user}", "gists_url": "https://api.github.com/users/SsnL/gists{/gist_id}", "starred_url": "https://api.github.com/users/SsnL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SsnL/subscriptions", "organizations_url": "https://api.github.com/users/SsnL/orgs", "repos_url": "https://api.github.com/users/SsnL/repos", "events_url": "https://api.github.com/users/SsnL/events{/privacy}", "received_events_url": "https://api.github.com/users/SsnL/received_events", "type": "User", "site_admin": false}, "created_at": "2018-04-06T18:18:06Z", "updated_at": "2018-04-06T18:18:15Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=6359743\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/albanD\">@albanD</a> Integer types are better because the result is always integer.</p>\n<p>In fact, my above suggestion doesn't work in all cases because <code>THRandom_random(_generator) % range)</code> may exceed <code>int64_t</code> range. However, <code>THRandom_random(_generator) % range) + min</code> is guaranteed to be in range. <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=655866\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/colesbury\">@colesbury</a> suggested that we should keep <code>THRandom_random(_generator) % range) + min</code> as <code>uint64_t</code> and then cast it to <code>int64_t</code> and then to <code>real</code>. I've verified that the following works:</p>\n<pre><code>static_cast&lt;real&gt;(static_cast&lt;int64_t&gt;((THRandom_random(_generator) % range) + min))\n</code></pre>", "body_text": "@albanD Integer types are better because the result is always integer.\nIn fact, my above suggestion doesn't work in all cases because THRandom_random(_generator) % range) may exceed int64_t range. However, THRandom_random(_generator) % range) + min is guaranteed to be in range. @colesbury suggested that we should keep THRandom_random(_generator) % range) + min as uint64_t and then cast it to int64_t and then to real. I've verified that the following works:\nstatic_cast<real>(static_cast<int64_t>((THRandom_random(_generator) % range) + min))", "body": "@albanD Integer types are better because the result is always integer. \r\n\r\nIn fact, my above suggestion doesn't work in all cases because `THRandom_random(_generator) % range)` may exceed `int64_t` range. However, `THRandom_random(_generator) % range) + min` is guaranteed to be in range. @colesbury suggested that we should keep `THRandom_random(_generator) % range) + min` as `uint64_t` and then cast it to `int64_t` and then to `real`. I've verified that the following works:\r\n```\r\nstatic_cast<real>(static_cast<int64_t>((THRandom_random(_generator) % range) + min))\r\n```"}