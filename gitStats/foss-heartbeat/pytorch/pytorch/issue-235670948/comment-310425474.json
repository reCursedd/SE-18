{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/310425474", "html_url": "https://github.com/pytorch/pytorch/issues/1794#issuecomment-310425474", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/1794", "id": 310425474, "node_id": "MDEyOklzc3VlQ29tbWVudDMxMDQyNTQ3NA==", "user": {"login": "rdipietro", "id": 5150559, "node_id": "MDQ6VXNlcjUxNTA1NTk=", "avatar_url": "https://avatars1.githubusercontent.com/u/5150559?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rdipietro", "html_url": "https://github.com/rdipietro", "followers_url": "https://api.github.com/users/rdipietro/followers", "following_url": "https://api.github.com/users/rdipietro/following{/other_user}", "gists_url": "https://api.github.com/users/rdipietro/gists{/gist_id}", "starred_url": "https://api.github.com/users/rdipietro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rdipietro/subscriptions", "organizations_url": "https://api.github.com/users/rdipietro/orgs", "repos_url": "https://api.github.com/users/rdipietro/repos", "events_url": "https://api.github.com/users/rdipietro/events{/privacy}", "received_events_url": "https://api.github.com/users/rdipietro/received_events", "type": "User", "site_admin": false}, "created_at": "2017-06-22T16:02:56Z", "updated_at": "2017-06-22T16:02:56Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Computation wise or code wise? Computation wise I do expect it to be worse or the same (depending on sequence length distribution, batch size, hidden size), but code wise I think this alternative is simpler. I haven't gone through the current boilerplate code in detail, but my guess is that all of <code>pack_padded_sequence</code>, <code>pad_packed_sequence</code>, <code>VariableRecurrent</code>, and <code>VariableRecurrentReverse</code> are specifically there for handling <code>PackedSequence</code>s? The flow above requires none of this code. Thoughts?</p>", "body_text": "Computation wise or code wise? Computation wise I do expect it to be worse or the same (depending on sequence length distribution, batch size, hidden size), but code wise I think this alternative is simpler. I haven't gone through the current boilerplate code in detail, but my guess is that all of pack_padded_sequence, pad_packed_sequence, VariableRecurrent, and VariableRecurrentReverse are specifically there for handling PackedSequences? The flow above requires none of this code. Thoughts?", "body": "Computation wise or code wise? Computation wise I do expect it to be worse or the same (depending on sequence length distribution, batch size, hidden size), but code wise I think this alternative is simpler. I haven't gone through the current boilerplate code in detail, but my guess is that all of `pack_padded_sequence`, `pad_packed_sequence`, `VariableRecurrent`, and `VariableRecurrentReverse` are specifically there for handling `PackedSequence`s? The flow above requires none of this code. Thoughts?"}