{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/340138508", "html_url": "https://github.com/pytorch/pytorch/issues/3313#issuecomment-340138508", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/3313", "id": 340138508, "node_id": "MDEyOklzc3VlQ29tbWVudDM0MDEzODUwOA==", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "created_at": "2017-10-28T04:31:22Z", "updated_at": "2017-10-28T04:31:22Z", "author_association": "CONTRIBUTOR", "body_html": "<p>For the record, I've talked to <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=655866\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/colesbury\">@colesbury</a> about this in person and I'm really convinced about the technical feasibility of the idea.</p>\n<blockquote>\n<p>In general I think it's possible to overcome this problem, but this requires structuring the backward graph a bit differently (it would have to be a single atomic autograd op, that does slicing, performs another call, and copies the result back into the original thing. add clones where necessary)</p>\n</blockquote>\n<p>Sounds like a job for the optimizer :) (Though, we're losing all of our inplace information already in the JIT. Win some, lose some.)</p>", "body_text": "For the record, I've talked to @colesbury about this in person and I'm really convinced about the technical feasibility of the idea.\n\nIn general I think it's possible to overcome this problem, but this requires structuring the backward graph a bit differently (it would have to be a single atomic autograd op, that does slicing, performs another call, and copies the result back into the original thing. add clones where necessary)\n\nSounds like a job for the optimizer :) (Though, we're losing all of our inplace information already in the JIT. Win some, lose some.)", "body": "For the record, I've talked to @colesbury about this in person and I'm really convinced about the technical feasibility of the idea.\r\n\r\n> In general I think it's possible to overcome this problem, but this requires structuring the backward graph a bit differently (it would have to be a single atomic autograd op, that does slicing, performs another call, and copies the result back into the original thing. add clones where necessary)\r\n\r\nSounds like a job for the optimizer :) (Though, we're losing all of our inplace information already in the JIT. Win some, lose some.)"}