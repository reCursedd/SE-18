{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/156817844", "pull_request_review_id": 83357469, "id": 156817844, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NjgxNzg0NA==", "diff_hunk": "@@ -625,8 +625,13 @@ struct DynamicLibrary {\n static const std::string so_template = \"/tmp/pytorch_fuserXXXXXX.so\";\n static const std::string cpp_template = \"/tmp/pytorch_fuserXXXXXX.cpp\";\n \n+#ifdef __PPC64__ \n+static const std::string compile_string =\n+  \"\\\"${cxx}\\\" -O3 -g -std=c++11 -fPIC -shared \\\"${cpp_file}\\\" -o \\\"${so_file}\\\"\";\n+#else\n static const std::string compile_string =\n   \"\\\"${cxx}\\\" -O3 -g -march=native -std=c++11 -fPIC -shared \\\"${cpp_file}\\\" -o \\\"${so_file}\\\"\";\n+#endif", "path": "torch/csrc/jit/fusion_compiler.cpp", "position": null, "original_position": 10, "commit_id": "f751e9c62e65fa4d2f777c0193443f3bad997955", "original_commit_id": "7a92977deea034ec8ec1970e46a1c7a5aacccd52", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "It would be nicer to split it off like this (and exploit the fact that preprocessor concatenates adjacent string literals for you automatically):\r\n```cpp\r\nstatic const std::string compile_string =\r\n  \"${cxx} -O3 ... \"\r\n#ifndef __PPC64__\r\n  \" -march=native \"\r\n#endif\r\n  \" ... ${so_file}\"\r\n```", "created_at": "2017-12-13T23:38:36Z", "updated_at": "2018-11-23T15:37:21Z", "html_url": "https://github.com/pytorch/pytorch/pull/4162#discussion_r156817844", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4162", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/156817844"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/4162#discussion_r156817844"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4162"}}, "body_html": "<p>It would be nicer to split it off like this (and exploit the fact that preprocessor concatenates adjacent string literals for you automatically):</p>\n<div class=\"highlight highlight-source-c++\"><pre><span class=\"pl-k\">static</span> <span class=\"pl-k\">const</span> std::string compile_string =\n  <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>${cxx} -O3 ... <span class=\"pl-pds\">\"</span></span>\n#<span class=\"pl-k\">ifndef</span> __PPC64__\n  <span class=\"pl-s\"><span class=\"pl-pds\">\"</span> -march=native <span class=\"pl-pds\">\"</span></span>\n#<span class=\"pl-k\">endif</span>\n  <span class=\"pl-s\"><span class=\"pl-pds\">\"</span> ... ${so_file}<span class=\"pl-pds\">\"</span></span></pre></div>", "body_text": "It would be nicer to split it off like this (and exploit the fact that preprocessor concatenates adjacent string literals for you automatically):\nstatic const std::string compile_string =\n  \"${cxx} -O3 ... \"\n#ifndef __PPC64__\n  \" -march=native \"\n#endif\n  \" ... ${so_file}\""}