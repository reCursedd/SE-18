{"url": "https://api.github.com/repos/pytorch/pytorch/issues/1273", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/1273/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/1273/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/1273/events", "html_url": "https://github.com/pytorch/pytorch/pull/1273", "id": 222181061, "node_id": "MDExOlB1bGxSZXF1ZXN0MTE2MTY3NzE0", "number": 1273, "title": "Fix group-convolution w/o biases on CPU.", "user": {"login": "lucasb-eyer", "id": 1476029, "node_id": "MDQ6VXNlcjE0NzYwMjk=", "avatar_url": "https://avatars1.githubusercontent.com/u/1476029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lucasb-eyer", "html_url": "https://github.com/lucasb-eyer", "followers_url": "https://api.github.com/users/lucasb-eyer/followers", "following_url": "https://api.github.com/users/lucasb-eyer/following{/other_user}", "gists_url": "https://api.github.com/users/lucasb-eyer/gists{/gist_id}", "starred_url": "https://api.github.com/users/lucasb-eyer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lucasb-eyer/subscriptions", "organizations_url": "https://api.github.com/users/lucasb-eyer/orgs", "repos_url": "https://api.github.com/users/lucasb-eyer/repos", "events_url": "https://api.github.com/users/lucasb-eyer/events{/privacy}", "received_events_url": "https://api.github.com/users/lucasb-eyer/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2017-04-17T17:35:16Z", "updated_at": "2017-04-17T18:53:35Z", "closed_at": "2017-04-17T18:53:29Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/1273", "html_url": "https://github.com/pytorch/pytorch/pull/1273", "diff_url": "https://github.com/pytorch/pytorch/pull/1273.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/1273.patch"}, "body_html": "<p>Not having this guard will cause a crash further down in the <code>cat</code><br>\nfunction when it uses the first element in the passed list to create a<br>\nnew tensor. (And even after that, <code>cat</code> doesn't handle <code>NULL</code>s well.)</p>\n<p>I have a minimal reproducing example that I only attach here as I didn't find a canonical place for unittests in the C/C++ code:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> torch\n<span class=\"pl-k\">import</span> torch.nn <span class=\"pl-k\">as</span> nn\n<span class=\"pl-k\">import</span> torch.nn.functional <span class=\"pl-k\">as</span> F\n<span class=\"pl-k\">from</span> torch.autograd <span class=\"pl-k\">import</span> Variable\n\nXv <span class=\"pl-k\">=</span> Variable(torch.randn(<span class=\"pl-c1\">1</span>,<span class=\"pl-c1\">8</span>,<span class=\"pl-c1\">3</span>,<span class=\"pl-c1\">3</span>))\nyv <span class=\"pl-k\">=</span> Variable(torch.LongTensor([<span class=\"pl-c1\">0</span>]))\n\nconv <span class=\"pl-k\">=</span> nn.Conv2d(<span class=\"pl-c1\">8</span>, <span class=\"pl-c1\">16</span>, <span class=\"pl-v\">kernel_size</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">3</span>, <span class=\"pl-v\">bias</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">False</span>, <span class=\"pl-v\">groups</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">4</span>)\ncost <span class=\"pl-k\">=</span> F.cross_entropy(conv(Xv).view(<span class=\"pl-c1\">1</span>,<span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>), yv)\n<span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Going to bprop<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-v\">flush</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>)\ncost.backward()\n<span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Done<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-v\">flush</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>)</pre></div>\n<p>Is there some upstream autograd repo that I should also contribute this to, or is this it?</p>", "body_text": "Not having this guard will cause a crash further down in the cat\nfunction when it uses the first element in the passed list to create a\nnew tensor. (And even after that, cat doesn't handle NULLs well.)\nI have a minimal reproducing example that I only attach here as I didn't find a canonical place for unittests in the C/C++ code:\nimport torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nfrom torch.autograd import Variable\n\nXv = Variable(torch.randn(1,8,3,3))\nyv = Variable(torch.LongTensor([0]))\n\nconv = nn.Conv2d(8, 16, kernel_size=3, bias=False, groups=4)\ncost = F.cross_entropy(conv(Xv).view(1,-1), yv)\nprint(\"Going to bprop\", flush=True)\ncost.backward()\nprint(\"Done\", flush=True)\nIs there some upstream autograd repo that I should also contribute this to, or is this it?", "body": "Not having this guard will cause a crash further down in the `cat`\r\nfunction when it uses the first element in the passed list to create a\r\nnew tensor. (And even after that, `cat` doesn't handle `NULL`s well.)\r\n\r\nI have a minimal reproducing example that I only attach here as I didn't find a canonical place for unittests in the C/C++ code:\r\n\r\n```python\r\nimport torch\r\nimport torch.nn as nn\r\nimport torch.nn.functional as F\r\nfrom torch.autograd import Variable\r\n\r\nXv = Variable(torch.randn(1,8,3,3))\r\nyv = Variable(torch.LongTensor([0]))\r\n\r\nconv = nn.Conv2d(8, 16, kernel_size=3, bias=False, groups=4)\r\ncost = F.cross_entropy(conv(Xv).view(1,-1), yv)\r\nprint(\"Going to bprop\", flush=True)\r\ncost.backward()\r\nprint(\"Done\", flush=True)\r\n```\r\n\r\nIs there some upstream autograd repo that I should also contribute this to, or is this it?"}