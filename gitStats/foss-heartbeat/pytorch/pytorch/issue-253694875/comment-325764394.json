{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/325764394", "html_url": "https://github.com/pytorch/pytorch/issues/2561#issuecomment-325764394", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/2561", "id": 325764394, "node_id": "MDEyOklzc3VlQ29tbWVudDMyNTc2NDM5NA==", "user": {"login": "colesbury", "id": 655866, "node_id": "MDQ6VXNlcjY1NTg2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/655866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colesbury", "html_url": "https://github.com/colesbury", "followers_url": "https://api.github.com/users/colesbury/followers", "following_url": "https://api.github.com/users/colesbury/following{/other_user}", "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions", "organizations_url": "https://api.github.com/users/colesbury/orgs", "repos_url": "https://api.github.com/users/colesbury/repos", "events_url": "https://api.github.com/users/colesbury/events{/privacy}", "received_events_url": "https://api.github.com/users/colesbury/received_events", "type": "User", "site_admin": false}, "created_at": "2017-08-29T19:06:26Z", "updated_at": "2017-08-29T19:06:26Z", "author_association": "MEMBER", "body_html": "<p>The CUDA exponential generator uses:<br>\n<code>(-1/lambda) * log(1 - curand_uniform())</code></p>\n<p><div class=\"border rounded-1 my-2\">\n  <div class=\"f6 px-3 py-2 lh-condensed border-bottom bg-gray-light\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/pytorch/pytorch/blob/0f65c9267d5ec55584b0ec65acb5374c95af9c16/torch/lib/THC/THCTensorRandom.cu#L139\">pytorch/torch/lib/THC/THCTensorRandom.cu</a>\n    </p>\n    <p class=\"mb-0 text-gray-light\">\n         Line 139\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/pytorch/pytorch/commit/0f65c9267d5ec55584b0ec65acb5374c95af9c16\">0f65c92</a>\n    </p>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L139\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"139\"></td>\n          <td id=\"LC139\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> GENERATE_KERNEL1(generate_exponential, <span class=\"pl-k\">float</span>, <span class=\"pl-k\">double</span> lambda, <span class=\"pl-k\">float</span>, curand_uniform, (<span class=\"pl-k\">float</span>)(-<span class=\"pl-c1\">1</span>. / lambda * <span class=\"pl-en\">log</span>(<span class=\"pl-c1\">1</span>-x))) </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n</p>\n<p>curand_uniform() can return between 0.0 (exclusive) and 1.0 (inclusive). I'm not sure why we don't use:<br>\n<code>(-1/lambda) * log(curand_uniform())</code></p>\n<p>It seems like that would avoid the inf problem.</p>\n<p>The CPU generator is much less likely to hit this issue because it uses double-precision random numbers and only truncates to single-precision at the end.</p>", "body_text": "The CUDA exponential generator uses:\n(-1/lambda) * log(1 - curand_uniform())\n\n  \n    \n      pytorch/torch/lib/THC/THCTensorRandom.cu\n    \n    \n         Line 139\n      in\n      0f65c92\n    \n    \n    \n    \n\n        \n          \n           GENERATE_KERNEL1(generate_exponential, float, double lambda, float, curand_uniform, (float)(-1. / lambda * log(1-x))) \n        \n    \n  \n\n\ncurand_uniform() can return between 0.0 (exclusive) and 1.0 (inclusive). I'm not sure why we don't use:\n(-1/lambda) * log(curand_uniform())\nIt seems like that would avoid the inf problem.\nThe CPU generator is much less likely to hit this issue because it uses double-precision random numbers and only truncates to single-precision at the end.", "body": "The CUDA exponential generator uses:\r\n`(-1/lambda) * log(1 - curand_uniform())`\r\n\r\nhttps://github.com/pytorch/pytorch/blob/0f65c9267d5ec55584b0ec65acb5374c95af9c16/torch/lib/THC/THCTensorRandom.cu#L139\r\n\r\ncurand_uniform() can return between 0.0 (exclusive) and 1.0 (inclusive). I'm not sure why we don't use:\r\n`(-1/lambda) * log(curand_uniform())`\r\n\r\nIt seems like that would avoid the inf problem.\r\n\r\nThe CPU generator is much less likely to hit this issue because it uses double-precision random numbers and only truncates to single-precision at the end."}