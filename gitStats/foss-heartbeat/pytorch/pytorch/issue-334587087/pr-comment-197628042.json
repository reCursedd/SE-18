{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/197628042", "pull_request_review_id": 131411359, "id": 197628042, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NzYyODA0Mg==", "diff_hunk": "@@ -0,0 +1,157 @@\n+#include \"caffe2/operators/onnxifi_op.h\"\n+\n+namespace caffe2 {\n+\n+namespace {\n+\n+void CPUTensorToTensorProto(\n+    const TensorCPU& cpu_tensor,\n+    ::ONNX_NAMESPACE::TensorProto* t) {\n+  const auto len = cpu_tensor.size();\n+  if (cpu_tensor.template IsType<float>()) {\n+    t->set_data_type(::ONNX_NAMESPACE::TensorProto::FLOAT);\n+    const float* data = cpu_tensor.template data<float>();\n+    for (auto i = 0; i < len; ++i) {\n+      t->add_float_data(*data++);\n+    }\n+  } else if (cpu_tensor.template IsType<int64_t>()) {\n+    t->set_data_type(::ONNX_NAMESPACE::TensorProto::INT64);\n+    const int64_t* data = cpu_tensor.template data<int64_t>();\n+    for (auto i = 0; i < len; ++i) {\n+      t->add_int64_data(*data++);\n+    }\n+  } else if (cpu_tensor.template IsType<int32_t>()) {\n+    t->set_data_type(::ONNX_NAMESPACE::TensorProto::INT32);\n+    const int32_t* data = cpu_tensor.template data<int32_t>();\n+    for (auto i = 0; i < len; ++i) {\n+      t->add_int32_data(*data++);\n+    }\n+  } else {\n+    CAFFE_THROW(\n+        \"Don't know how to convert workspace tensor type \",\n+        cpu_tensor.meta().name(),\n+        \" to ONNX TensorProto\");\n+  }\n+}\n+\n+void BlobToTensorProto(\n+    const std::string& name,\n+    Workspace* ws,\n+    ::ONNX_NAMESPACE::TensorProto* t) {\n+  // Set name\n+  t->set_name(name);\n+  const Blob* blob = ws->GetBlob(name);\n+  CAFFE_ENFORCE(blob, \"Blob \", name, \" doesn't exist\");\n+\n+  // Set dims\n+  const auto shape = GetTensorShapeOfBlob(blob);\n+  for (const auto i : shape.dims()) {\n+    t->add_dims(i);\n+  }\n+\n+  // Set values\n+  CAFFE_ENFORCE(\n+      blob->template IsType<TensorCPU>(),\n+      \"Initialization blob \",\n+      name,\n+      \" needs to be either TensorCPU or TensorCUDA\");\n+  CPUTensorToTensorProto(blob->template Get<TensorCPU>(), t);\n+}\n+}\n+\n+template <>\n+void OnnxifiOp<float, CPUContext>::BuildInitializationList(\n+    Workspace* ws,\n+    ::ONNX_NAMESPACE::GraphProto* g,\n+    std::unordered_set<std::string>* initialization_list) {\n+  const std::vector<string>& ws_blobs = ws->Blobs();\n+\n+  for (const auto& s : ws_blobs) {\n+    auto it = initialization_list->find(s);\n+    if (it != initialization_list->end()) {\n+      auto* init_tensor = g->add_initializer();\n+      BlobToTensorProto(s, ws, init_tensor);\n+      initialization_list->erase(it);\n+    }\n+  }\n+  CAFFE_ENFORCE(\n+      initialization_list->empty(), \"Unfulfilled initialization list\");\n+  for (const auto& t : g->initializer()) {\n+    VLOG(2) << \"Initializer: \" << t.name();\n+  }\n+}\n+\n+template <>\n+bool OnnxifiOp<float, CPUContext>::RunOnDevice() {\n+  for (unsigned i = 0U; i < InputSize(); ++i) {\n+    const auto& input_tensor = Input(i);\n+    const auto& tensor_dims = input_tensor.dims();\n+    auto& tensor_descriptor = input_desc_.at(i);\n+    tensor_descriptor.dataType = ONNXIFI_DATATYPE_FLOAT32;\n+    tensor_descriptor.memoryType = ONNXIFI_MEMORY_TYPE_CPU;\n+    tensor_descriptor.dimensions = tensor_dims.size();\n+    input_shapes_.emplace_back();\n+    auto& input_shape = input_shapes_.back();\n+    for (unsigned j = 0U; j < tensor_descriptor.dimensions; ++j) {\n+      input_shape.push_back(tensor_dims[j]);\n+    }\n+    tensor_descriptor.shape = input_shape.data();\n+    tensor_descriptor.buffer = (onnxPointer)(input_tensor.data<float>());\n+  }\n+\n+  for (unsigned i = 0U; i < OutputSize(); ++i) {\n+    auto* output_tensor = Output(i);\n+    std::vector<TIndex> tensor_dims;\n+    SetOutputShape(i, &tensor_dims);\n+    output_tensor->Resize(tensor_dims);\n+    auto& tensor_descriptor = output_desc_.at(i);\n+    tensor_descriptor.dataType = ONNXIFI_DATATYPE_FLOAT32;\n+    tensor_descriptor.memoryType = ONNXIFI_MEMORY_TYPE_CPU;\n+    tensor_descriptor.dimensions = tensor_dims.size();\n+    tensor_descriptor.shape = new uint64_t[tensor_descriptor.dimensions];\n+    output_shapes_.emplace_back();\n+    auto& output_shape = output_shapes_.back();\n+    for (unsigned j = 0U; j < tensor_descriptor.dimensions; ++j) {\n+      output_shape.push_back(tensor_dims[j]);\n+    }\n+    tensor_descriptor.shape = output_shape.data();\n+    tensor_descriptor.buffer =\n+        (onnxPointer)(output_tensor->mutable_data<float>());\n+  }\n+\n+  CAFFE_ENFORCE_EQ(\n+      lib_->onnxSetGraphIO(\n+          graph_,\n+          input_desc_.size(),\n+          input_desc_.data(),\n+          output_desc_.size(),\n+          output_desc_.data()),\n+      ONNXIFI_STATUS_SUCCESS);\n+\n+  // TODO (support async)\n+  CAFFE_ENFORCE_EQ(\n+      lib_->onnxRunGraph(graph_, nullptr, nullptr), ONNXIFI_STATUS_SUCCESS);\n+\n+  return true;\n+}\n+\n+REGISTER_CPU_OPERATOR(Onnxifi, OnnxifiOp<float, CPUContext>);\n+OPERATOR_SCHEMA(Onnxifi)\n+    .NumInputs(0, INT_MAX)\n+    .NumOutputs(0, INT_MAX)\n+    .SetDoc(R\"DOC(\n+    The Onnixifi operator is a black-box operator to lower the computation to Onnxifi backend\n+    )DOC\")\n+    .Arg(\"onnxifi_backend\", \"(string default=\\\"\\\") Name of the backend\")\n+    .Arg(\"onnxifi_backend_suffix\", \"(string default=\\\"\\\") Function suffix of the backend\")\n+    .Arg(\n+        \"onnxifi_backend_path\",\n+        \"(string default=\\\"\\\") Path to the onnxifi bakcend dynamic library\")\n+    .Arg(\"onnxifi_backend_idx\", \"(int default 0) Backend index to be used\")", "path": "caffe2/operators/onnxifi_op.cc", "position": null, "original_position": 150, "commit_id": "d441bb622ebb16bcc309e6ffb07b51ed43f161ce", "original_commit_id": "3a10fd562ca087dd3e1f61cff4439eb5ef7a61a0", "user": {"login": "Maratyszcza", "id": 1093985, "node_id": "MDQ6VXNlcjEwOTM5ODU=", "avatar_url": "https://avatars1.githubusercontent.com/u/1093985?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Maratyszcza", "html_url": "https://github.com/Maratyszcza", "followers_url": "https://api.github.com/users/Maratyszcza/followers", "following_url": "https://api.github.com/users/Maratyszcza/following{/other_user}", "gists_url": "https://api.github.com/users/Maratyszcza/gists{/gist_id}", "starred_url": "https://api.github.com/users/Maratyszcza/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Maratyszcza/subscriptions", "organizations_url": "https://api.github.com/users/Maratyszcza/orgs", "repos_url": "https://api.github.com/users/Maratyszcza/repos", "events_url": "https://api.github.com/users/Maratyszcza/events{/privacy}", "received_events_url": "https://api.github.com/users/Maratyszcza/received_events", "type": "User", "site_admin": false}, "body": "It seems you use an old `onnxifi.h`, backend index is gone in the latest version.", "created_at": "2018-06-24T04:24:32Z", "updated_at": "2018-11-23T15:46:11Z", "html_url": "https://github.com/pytorch/pytorch/pull/8749#discussion_r197628042", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/8749", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/197628042"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/8749#discussion_r197628042"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/8749"}}, "body_html": "<p>It seems you use an old <code>onnxifi.h</code>, backend index is gone in the latest version.</p>", "body_text": "It seems you use an old onnxifi.h, backend index is gone in the latest version."}