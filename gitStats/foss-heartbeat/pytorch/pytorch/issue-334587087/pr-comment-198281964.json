{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/198281964", "pull_request_review_id": 132185880, "id": 198281964, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5ODI4MTk2NA==", "diff_hunk": "@@ -0,0 +1,192 @@\n+#include \"caffe2/operators/onnxifi_op.h\"\n+\n+namespace caffe2 {\n+\n+namespace {\n+\n+void CPUTensorToTensorProto(\n+    const TensorCPU& cpu_tensor,\n+    ::ONNX_NAMESPACE::TensorProto* t) {\n+  const auto len = cpu_tensor.size();\n+  if (cpu_tensor.template IsType<float>()) {\n+    t->set_data_type(::ONNX_NAMESPACE::TensorProto::FLOAT);\n+    const float* data = cpu_tensor.template data<float>();\n+    for (auto i = 0; i < len; ++i) {\n+      t->add_float_data(*data++);\n+    }\n+  } else if (cpu_tensor.template IsType<int64_t>()) {\n+    t->set_data_type(::ONNX_NAMESPACE::TensorProto::INT64);\n+    const int64_t* data = cpu_tensor.template data<int64_t>();\n+    for (auto i = 0; i < len; ++i) {\n+      t->add_int64_data(*data++);\n+    }\n+  } else if (cpu_tensor.template IsType<int32_t>()) {\n+    t->set_data_type(::ONNX_NAMESPACE::TensorProto::INT32);\n+    const int32_t* data = cpu_tensor.template data<int32_t>();\n+    for (auto i = 0; i < len; ++i) {\n+      t->add_int32_data(*data++);\n+    }\n+  } else {\n+    CAFFE_THROW(\n+        \"Don't know how to convert workspace tensor type \",\n+        cpu_tensor.meta().name(),\n+        \" to ONNX TensorProto\");\n+  }\n+}\n+\n+void BlobToTensorDescriptor(\n+    const std::string& name,\n+    Workspace* ws,\n+    onnxTensorDescriptor* desc,\n+    std::vector<std::vector<uint64_t>>* shapes) {\n+  const Blob* blob = ws->GetBlob(name);\n+  CAFFE_ENFORCE(blob, \"Blob \", name, \" doesn't exist\");\n+\n+  // Memory type\n+  // We only allow weights to be CPU tensor for now\n+  CAFFE_ENFORCE(\n+      blob->template IsType<TensorCPU>(),\n+      \"Initialization blob \",\n+      name,\n+      \" needs to be TensorCPU\");\n+  desc->memoryType = ONNXIFI_MEMORY_TYPE_CPU;\n+\n+  // Data type\n+  const auto& cpu_tensor = blob->template Get<TensorCPU>();\n+  if (cpu_tensor.template IsType<float>()) {\n+    desc->dataType = ONNXIFI_DATATYPE_FLOAT32;\n+    desc->buffer = (onnxPointer)(cpu_tensor.data<float>());", "path": "caffe2/operators/onnxifi_op.cc", "position": null, "original_position": 58, "commit_id": "d441bb622ebb16bcc309e6ffb07b51ed43f161ce", "original_commit_id": "debb55005fa6b7de47d4aaad7a306ef58c7e075f", "user": {"login": "Maratyszcza", "id": 1093985, "node_id": "MDQ6VXNlcjEwOTM5ODU=", "avatar_url": "https://avatars1.githubusercontent.com/u/1093985?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Maratyszcza", "html_url": "https://github.com/Maratyszcza", "followers_url": "https://api.github.com/users/Maratyszcza/followers", "following_url": "https://api.github.com/users/Maratyszcza/following{/other_user}", "gists_url": "https://api.github.com/users/Maratyszcza/gists{/gist_id}", "starred_url": "https://api.github.com/users/Maratyszcza/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Maratyszcza/subscriptions", "organizations_url": "https://api.github.com/users/Maratyszcza/orgs", "repos_url": "https://api.github.com/users/Maratyszcza/repos", "events_url": "https://api.github.com/users/Maratyszcza/events{/privacy}", "received_events_url": "https://api.github.com/users/Maratyszcza/received_events", "type": "User", "site_admin": false}, "body": "`reinterpret_cast<onnxPointer>(cpu_tensor.data<float>());` would be more C++-style", "created_at": "2018-06-26T20:13:45Z", "updated_at": "2018-11-23T15:46:23Z", "html_url": "https://github.com/pytorch/pytorch/pull/8749#discussion_r198281964", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/8749", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/198281964"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/8749#discussion_r198281964"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/8749"}}, "body_html": "<p><code>reinterpret_cast&lt;onnxPointer&gt;(cpu_tensor.data&lt;float&gt;());</code> would be more C++-style</p>", "body_text": "reinterpret_cast<onnxPointer>(cpu_tensor.data<float>()); would be more C++-style"}