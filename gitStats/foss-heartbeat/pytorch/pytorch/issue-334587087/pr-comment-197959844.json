{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/197959844", "pull_request_review_id": 131804650, "id": 197959844, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5Nzk1OTg0NA==", "diff_hunk": "@@ -0,0 +1,192 @@\n+#include \"caffe2/operators/onnxifi_op.h\"\n+\n+namespace caffe2 {\n+\n+namespace {\n+\n+void CPUTensorToTensorProto(\n+    const TensorCPU& cpu_tensor,\n+    ::ONNX_NAMESPACE::TensorProto* t) {\n+  const auto len = cpu_tensor.size();\n+  if (cpu_tensor.template IsType<float>()) {\n+    t->set_data_type(::ONNX_NAMESPACE::TensorProto::FLOAT);\n+    const float* data = cpu_tensor.template data<float>();\n+    for (auto i = 0; i < len; ++i) {\n+      t->add_float_data(*data++);\n+    }\n+  } else if (cpu_tensor.template IsType<int64_t>()) {\n+    t->set_data_type(::ONNX_NAMESPACE::TensorProto::INT64);\n+    const int64_t* data = cpu_tensor.template data<int64_t>();\n+    for (auto i = 0; i < len; ++i) {\n+      t->add_int64_data(*data++);\n+    }\n+  } else if (cpu_tensor.template IsType<int32_t>()) {\n+    t->set_data_type(::ONNX_NAMESPACE::TensorProto::INT32);\n+    const int32_t* data = cpu_tensor.template data<int32_t>();\n+    for (auto i = 0; i < len; ++i) {\n+      t->add_int32_data(*data++);\n+    }\n+  } else {\n+    CAFFE_THROW(\n+        \"Don't know how to convert workspace tensor type \",\n+        cpu_tensor.meta().name(),\n+        \" to ONNX TensorProto\");\n+  }\n+}\n+\n+void BlobToTensorDescriptor(\n+    const std::string& name,\n+    Workspace* ws,\n+    onnxTensorDescriptor* desc,\n+    std::vector<std::vector<uint64_t>>* shapes) {\n+  const Blob* blob = ws->GetBlob(name);\n+  CAFFE_ENFORCE(blob, \"Blob \", name, \" doesn't exist\");\n+\n+  // Memory type\n+  // We only allow weights to be CPU tensor for now\n+  CAFFE_ENFORCE(\n+      blob->template IsType<TensorCPU>(),\n+      \"Initialization blob \",\n+      name,\n+      \" needs to be TensorCPU\");\n+  desc->memoryType = ONNXIFI_MEMORY_TYPE_CPU;\n+\n+  // Data type\n+  const auto& cpu_tensor = blob->template Get<TensorCPU>();\n+  if (cpu_tensor.template IsType<float>()) {\n+    desc->dataType = ONNXIFI_DATATYPE_FLOAT32;\n+    desc->buffer = (onnxPointer)(cpu_tensor.data<float>());\n+  } else if (cpu_tensor.template IsType<int64_t>()) {\n+    desc->dataType = ONNXIFI_DATATYPE_INT64;\n+    desc->buffer = (onnxPointer)(cpu_tensor.data<int64_t>());\n+  } else if (cpu_tensor.template IsType<int32_t>()) {\n+    desc->dataType = ONNXIFI_DATATYPE_INT32;\n+    desc->buffer = (onnxPointer)(cpu_tensor.data<int32_t>());\n+  }\n+\n+  // Set dims\n+  const auto shape = GetTensorShapeOfBlob(blob);\n+  desc->dimensions = shape.dims_size();\n+  shapes->emplace_back();\n+  auto& shape_tmp = shapes->back();\n+  for (const auto d : shape.dims()) {\n+    shape_tmp.push_back(d);\n+  }\n+  desc->shape = shape_tmp.data();\n+}\n+} // namespace\n+\n+template <>\n+std::vector<onnxTensorDescriptor>\n+OnnxifiOp<float, CPUContext>::BuildInitializationList(\n+    Workspace* ws,\n+    std::unordered_set<std::string>* initialization_list,\n+    std::vector<std::string>* weight_names,\n+    std::vector<std::vector<uint64_t>>* weight_shapes) {\n+  const std::vector<string>& ws_blobs = ws->Blobs();\n+  std::vector<onnxTensorDescriptor> descs;\n+  for (const auto& s : ws_blobs) {\n+    auto it = initialization_list->find(s);\n+    if (it != initialization_list->end()) {\n+      weight_names->emplace_back(s);\n+      descs.emplace_back();\n+      auto& tensor_desc = descs.back();\n+      tensor_desc.name = weight_names->back().c_str();\n+      BlobToTensorDescriptor(s, ws, &tensor_desc, weight_shapes);\n+      initialization_list->erase(it);\n+    }\n+  }\n+  CAFFE_ENFORCE(\n+      initialization_list->empty(), \"Unfulfilled initialization list\");\n+  return descs;\n+}\n+\n+template <>\n+bool OnnxifiOp<float, CPUContext>::RunOnDevice() {\n+  for (unsigned i = 0U; i < InputSize(); ++i) {\n+    const auto& input_tensor = Input(i);\n+    const auto& tensor_dims = input_tensor.dims();\n+    auto& tensor_descriptor = input_desc_.at(i);\n+    tensor_descriptor.dataType = ONNXIFI_DATATYPE_FLOAT32;\n+    tensor_descriptor.memoryType = ONNXIFI_MEMORY_TYPE_CPU;\n+    tensor_descriptor.dimensions = tensor_dims.size();\n+    input_shapes_.emplace_back();\n+    auto& input_shape = input_shapes_.back();\n+    for (unsigned j = 0U; j < tensor_descriptor.dimensions; ++j) {\n+      input_shape.push_back(tensor_dims[j]);\n+    }\n+    tensor_descriptor.shape = input_shape.data();\n+    tensor_descriptor.buffer = (onnxPointer)(input_tensor.data<float>());\n+  }\n+\n+  for (unsigned i = 0U; i < OutputSize(); ++i) {\n+    auto* output_tensor = Output(i);\n+    std::vector<TIndex> tensor_dims;\n+    SetOutputShape(i, &tensor_dims);\n+    output_tensor->Resize(tensor_dims);\n+    auto& tensor_descriptor = output_desc_.at(i);\n+    tensor_descriptor.dataType = ONNXIFI_DATATYPE_FLOAT32;\n+    tensor_descriptor.memoryType = ONNXIFI_MEMORY_TYPE_CPU;\n+    tensor_descriptor.dimensions = tensor_dims.size();\n+    output_shapes_.emplace_back();\n+    auto& output_shape = output_shapes_.back();\n+    for (unsigned j = 0U; j < tensor_descriptor.dimensions; ++j) {\n+      output_shape.push_back(tensor_dims[j]);\n+    }\n+    tensor_descriptor.shape = output_shape.data();\n+    tensor_descriptor.buffer =\n+        (onnxPointer)(output_tensor->mutable_data<float>());\n+  }\n+\n+  CAFFE_ENFORCE_EQ(\n+      lib_->onnxSetGraphIO(\n+          graph_,\n+          input_desc_.size(),\n+          input_desc_.data(),\n+          output_desc_.size(),\n+          output_desc_.data()),\n+      ONNXIFI_STATUS_SUCCESS);\n+\n+  onnxMemoryFence input_fence;\n+  input_fence.event = nullptr;\n+  input_fence.type = ONNXIFI_SYNCHRONIZATION_EVENT;", "path": "caffe2/operators/onnxifi_op.cc", "position": 111, "original_position": 152, "commit_id": "d441bb622ebb16bcc309e6ffb07b51ed43f161ce", "original_commit_id": "debb55005fa6b7de47d4aaad7a306ef58c7e075f", "user": {"login": "yinghai", "id": 1100089, "node_id": "MDQ6VXNlcjExMDAwODk=", "avatar_url": "https://avatars1.githubusercontent.com/u/1100089?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yinghai", "html_url": "https://github.com/yinghai", "followers_url": "https://api.github.com/users/yinghai/followers", "following_url": "https://api.github.com/users/yinghai/following{/other_user}", "gists_url": "https://api.github.com/users/yinghai/gists{/gist_id}", "starred_url": "https://api.github.com/users/yinghai/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yinghai/subscriptions", "organizations_url": "https://api.github.com/users/yinghai/orgs", "repos_url": "https://api.github.com/users/yinghai/repos", "events_url": "https://api.github.com/users/yinghai/events{/privacy}", "received_events_url": "https://api.github.com/users/yinghai/received_events", "type": "User", "site_admin": false}, "body": "Addressed in https://github.com/onnx/onnx/pull/1143", "created_at": "2018-06-25T22:16:26Z", "updated_at": "2018-11-23T15:46:18Z", "html_url": "https://github.com/pytorch/pytorch/pull/8749#discussion_r197959844", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/8749", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/197959844"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/8749#discussion_r197959844"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/8749"}}, "body_html": "<p>Addressed in <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"335586604\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/onnx/onnx/issues/1143\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/onnx/onnx/pull/1143/hovercard\" href=\"https://github.com/onnx/onnx/pull/1143\">onnx/onnx#1143</a></p>", "body_text": "Addressed in onnx/onnx#1143", "in_reply_to_id": 197946289}