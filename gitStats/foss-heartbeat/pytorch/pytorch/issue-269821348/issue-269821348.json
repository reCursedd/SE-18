{"url": "https://api.github.com/repos/pytorch/pytorch/issues/3387", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/3387/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/3387/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/3387/events", "html_url": "https://github.com/pytorch/pytorch/issues/3387", "id": 269821348, "node_id": "MDU6SXNzdWUyNjk4MjEzNDg=", "number": 3387, "title": "[Feature request] Densely crop patches through a whole image.", "user": {"login": "LambdaWill", "id": 26055298, "node_id": "MDQ6VXNlcjI2MDU1Mjk4", "avatar_url": "https://avatars3.githubusercontent.com/u/26055298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LambdaWill", "html_url": "https://github.com/LambdaWill", "followers_url": "https://api.github.com/users/LambdaWill/followers", "following_url": "https://api.github.com/users/LambdaWill/following{/other_user}", "gists_url": "https://api.github.com/users/LambdaWill/gists{/gist_id}", "starred_url": "https://api.github.com/users/LambdaWill/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LambdaWill/subscriptions", "organizations_url": "https://api.github.com/users/LambdaWill/orgs", "repos_url": "https://api.github.com/users/LambdaWill/repos", "events_url": "https://api.github.com/users/LambdaWill/events{/privacy}", "received_events_url": "https://api.github.com/users/LambdaWill/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-10-31T03:18:31Z", "updated_at": "2017-10-31T18:07:56Z", "closed_at": "2017-10-31T08:46:45Z", "author_association": "NONE", "body_html": "<p>I am trying to transfer <a href=\"https://arxiv.org/abs/1612.04337\" rel=\"nofollow\">Fast Patch-based Style Transfer of Arbitrary Style</a>(based on troch) to pytorch. Then I realize these for-loop is too slow, especially when<br>\n<code>img</code> is large.</p>\n<div class=\"highlight highlight-source-lua\"><pre><span class=\"pl-k\">function</span> <span class=\"pl-en\">module._extract_patches</span>(<span class=\"pl-smi\">img</span>, <span class=\"pl-smi\">patch_size</span>, <span class=\"pl-smi\">stride</span>)\n    <span class=\"pl-k\">local</span> nDim <span class=\"pl-k\">=</span> <span class=\"pl-c1\">3</span>\n    <span class=\"pl-c1\">assert</span>(img:<span class=\"pl-c1\">nDimension</span>() <span class=\"pl-k\">==</span> nDim, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>image must be of dimension 3.<span class=\"pl-pds\">'</span></span>)\n    <span class=\"pl-k\">local</span> C, H, W <span class=\"pl-k\">=</span> img:<span class=\"pl-c1\">size</span>(nDim<span class=\"pl-k\">-</span><span class=\"pl-c1\">2</span>), img:<span class=\"pl-c1\">size</span>(nDim<span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>), img:<span class=\"pl-c1\">size</span>(nDim)\n    <span class=\"pl-k\">local</span> nH <span class=\"pl-k\">=</span> <span class=\"pl-c1\">math.floor</span>( (H <span class=\"pl-k\">-</span> patch_size)<span class=\"pl-k\">/</span>stride <span class=\"pl-k\">+</span> <span class=\"pl-c1\">1</span>)\n    <span class=\"pl-k\">local</span> nW <span class=\"pl-k\">=</span> <span class=\"pl-c1\">math.floor</span>( (W <span class=\"pl-k\">-</span> patch_size)<span class=\"pl-k\">/</span>stride <span class=\"pl-k\">+</span> <span class=\"pl-c1\">1</span>)\n\n    <span class=\"pl-c\"><span class=\"pl-c\">--</span> extract patches</span>\n    <span class=\"pl-k\">local</span> patches <span class=\"pl-k\">=</span> torch.<span class=\"pl-c1\">Tensor</span>(nH<span class=\"pl-k\">*</span>nW, C, patch_size, patch_size):<span class=\"pl-c1\">typeAs</span>(img)\n    <span class=\"pl-k\">for</span> i<span class=\"pl-k\">=</span><span class=\"pl-c1\">1</span>,nH<span class=\"pl-k\">*</span>nW <span class=\"pl-k\">do</span>\n        <span class=\"pl-k\">local</span> h <span class=\"pl-k\">=</span> <span class=\"pl-c1\">math.floor</span>((i<span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>)<span class=\"pl-k\">/</span>nW)  <span class=\"pl-c\"><span class=\"pl-c\">--</span> zero-index</span>\n        <span class=\"pl-k\">local</span> w <span class=\"pl-k\">=</span> <span class=\"pl-c1\">math.floor</span>((i<span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>)<span class=\"pl-k\">%</span>nW)  <span class=\"pl-c\"><span class=\"pl-c\">--</span> zero-index</span>\n        patches[i] <span class=\"pl-k\">=</span> img[{{},\n        {<span class=\"pl-c1\">1</span> <span class=\"pl-k\">+</span> h<span class=\"pl-k\">*</span>stride, <span class=\"pl-c1\">1</span> <span class=\"pl-k\">+</span> h<span class=\"pl-k\">*</span>stride <span class=\"pl-k\">+</span> patch_size<span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>},\n        {<span class=\"pl-c1\">1</span> <span class=\"pl-k\">+</span> w<span class=\"pl-k\">*</span>stride, <span class=\"pl-c1\">1</span> <span class=\"pl-k\">+</span> w<span class=\"pl-k\">*</span>stride <span class=\"pl-k\">+</span> patch_size<span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>}\n        }]\n    <span class=\"pl-k\">end</span>\n\n    <span class=\"pl-k\">return</span> patches\n<span class=\"pl-k\">end</span></pre></div>\n<p>Can the operation be implemented in an efficient way?</p>", "body_text": "I am trying to transfer Fast Patch-based Style Transfer of Arbitrary Style(based on troch) to pytorch. Then I realize these for-loop is too slow, especially when\nimg is large.\nfunction module._extract_patches(img, patch_size, stride)\n    local nDim = 3\n    assert(img:nDimension() == nDim, 'image must be of dimension 3.')\n    local C, H, W = img:size(nDim-2), img:size(nDim-1), img:size(nDim)\n    local nH = math.floor( (H - patch_size)/stride + 1)\n    local nW = math.floor( (W - patch_size)/stride + 1)\n\n    -- extract patches\n    local patches = torch.Tensor(nH*nW, C, patch_size, patch_size):typeAs(img)\n    for i=1,nH*nW do\n        local h = math.floor((i-1)/nW)  -- zero-index\n        local w = math.floor((i-1)%nW)  -- zero-index\n        patches[i] = img[{{},\n        {1 + h*stride, 1 + h*stride + patch_size-1},\n        {1 + w*stride, 1 + w*stride + patch_size-1}\n        }]\n    end\n\n    return patches\nend\nCan the operation be implemented in an efficient way?", "body": "I am trying to transfer [Fast Patch-based Style Transfer of Arbitrary Style](https://arxiv.org/abs/1612.04337)(based on troch) to pytorch. Then I realize these for-loop is too slow, especially when\r\n`img` is large.\r\n```lua\r\nfunction module._extract_patches(img, patch_size, stride)\r\n    local nDim = 3\r\n    assert(img:nDimension() == nDim, 'image must be of dimension 3.')\r\n    local C, H, W = img:size(nDim-2), img:size(nDim-1), img:size(nDim)\r\n    local nH = math.floor( (H - patch_size)/stride + 1)\r\n    local nW = math.floor( (W - patch_size)/stride + 1)\r\n\r\n    -- extract patches\r\n    local patches = torch.Tensor(nH*nW, C, patch_size, patch_size):typeAs(img)\r\n    for i=1,nH*nW do\r\n        local h = math.floor((i-1)/nW)  -- zero-index\r\n        local w = math.floor((i-1)%nW)  -- zero-index\r\n        patches[i] = img[{{},\r\n        {1 + h*stride, 1 + h*stride + patch_size-1},\r\n        {1 + w*stride, 1 + w*stride + patch_size-1}\r\n        }]\r\n    end\r\n\r\n    return patches\r\nend\r\n```\r\nCan the operation be implemented in an efficient way?"}