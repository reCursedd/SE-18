{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/408628609", "html_url": "https://github.com/pytorch/pytorch/issues/8366#issuecomment-408628609", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/8366", "id": 408628609, "node_id": "MDEyOklzc3VlQ29tbWVudDQwODYyODYwOQ==", "user": {"login": "t-vi", "id": 20787943, "node_id": "MDQ6VXNlcjIwNzg3OTQz", "avatar_url": "https://avatars2.githubusercontent.com/u/20787943?v=4", "gravatar_id": "", "url": "https://api.github.com/users/t-vi", "html_url": "https://github.com/t-vi", "followers_url": "https://api.github.com/users/t-vi/followers", "following_url": "https://api.github.com/users/t-vi/following{/other_user}", "gists_url": "https://api.github.com/users/t-vi/gists{/gist_id}", "starred_url": "https://api.github.com/users/t-vi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/t-vi/subscriptions", "organizations_url": "https://api.github.com/users/t-vi/orgs", "repos_url": "https://api.github.com/users/t-vi/repos", "events_url": "https://api.github.com/users/t-vi/events{/privacy}", "received_events_url": "https://api.github.com/users/t-vi/received_events", "type": "User", "site_admin": false}, "created_at": "2018-07-28T19:03:10Z", "updated_at": "2018-07-28T21:23:06Z", "author_association": "CONTRIBUTOR", "body_html": "<p>So to make an implementation strategy concrete: Would a DeviceTensorAccessor cut the mustard with the following properties:</p>\n<ul>\n<li>constructable from a TensorAccessor</li>\n<li>copies strides and sizes to std::vector</li>\n<li>non-scalar [] returns a TensorAccessor (to not copy stuff for that).<br>\nIf I understand things correctly,</li>\n<li>You can declare a global as taking a DeviceTensorAccessor</li>\n<li>You can pass tensor.accessor&lt;...&gt;() to it.<br>\nThe CTC CPU code really looks so much nicer (and closer to the description in the publication) that I would love to have it on GPU, too.<br>\nIf the above sounds reasonable, I'd send a PR.<br>\n(Somehow handle <strong>restrict</strong>, probably doesn't work with reusing accessor as subaccessor then...)</li>\n</ul>", "body_text": "So to make an implementation strategy concrete: Would a DeviceTensorAccessor cut the mustard with the following properties:\n\nconstructable from a TensorAccessor\ncopies strides and sizes to std::vector\nnon-scalar [] returns a TensorAccessor (to not copy stuff for that).\nIf I understand things correctly,\nYou can declare a global as taking a DeviceTensorAccessor\nYou can pass tensor.accessor<...>() to it.\nThe CTC CPU code really looks so much nicer (and closer to the description in the publication) that I would love to have it on GPU, too.\nIf the above sounds reasonable, I'd send a PR.\n(Somehow handle restrict, probably doesn't work with reusing accessor as subaccessor then...)", "body": "So to make an implementation strategy concrete: Would a DeviceTensorAccessor cut the mustard with the following properties:\r\n- constructable from a TensorAccessor\r\n- copies strides and sizes to std::vector<int64>\r\n- non-scalar [] returns a TensorAccessor (to not copy stuff for that).\r\nIf I understand things correctly,\r\n- You can declare a global as taking a DeviceTensorAccessor\r\n- You can pass tensor.accessor<...>() to it.\r\nThe CTC CPU code really looks so much nicer (and closer to the description in the publication) that I would love to have it on GPU, too.\r\nIf the above sounds reasonable, I'd send a PR.\r\n(Somehow handle __restrict__, probably doesn't work with reusing accessor as subaccessor then...)"}