{"url": "https://api.github.com/repos/pytorch/pytorch/issues/4138", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/4138/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/4138/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/4138/events", "html_url": "https://github.com/pytorch/pytorch/issues/4138", "id": 281547503, "node_id": "MDU6SXNzdWUyODE1NDc1MDM=", "number": 4138, "title": "Generate overloads in VariableType for non-s methods", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 679953983, "node_id": "MDU6TGFiZWw2Nzk5NTM5ODM=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/jit", "name": "jit", "color": "c5def5", "default": false}, {"id": 693805995, "node_id": "MDU6TGFiZWw2OTM4MDU5OTU=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/onnx", "name": "onnx", "color": "e99695", "default": false}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-12-12T21:43:00Z", "updated_at": "2017-12-28T21:52:36Z", "closed_at": null, "author_association": "CONTRIBUTOR", "body_html": "<p>Right now, overloads in VariableType are only ever generated for <code>s_foo</code> functions, which are functions which assume that their arguments are already expanded as necessary. This is fine for derivatives, but it's more convenient for ONNX tracing (and some cases for the optimizer, perhaps) for us to get the non-expanded API calls. Now that we have <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"281239606\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/4127\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/pytorch/pytorch/pull/4127/hovercard\" href=\"https://github.com/pytorch/pytorch/pull/4127\">#4127</a>, it's actually not too difficult to make the broadcasting operators get generated: just generate dispatch code for <code>foo</code> as well!</p>\n<p>It might be necessary to make these virtual. We don't mind.</p>", "body_text": "Right now, overloads in VariableType are only ever generated for s_foo functions, which are functions which assume that their arguments are already expanded as necessary. This is fine for derivatives, but it's more convenient for ONNX tracing (and some cases for the optimizer, perhaps) for us to get the non-expanded API calls. Now that we have #4127, it's actually not too difficult to make the broadcasting operators get generated: just generate dispatch code for foo as well!\nIt might be necessary to make these virtual. We don't mind.", "body": "Right now, overloads in VariableType are only ever generated for `s_foo` functions, which are functions which assume that their arguments are already expanded as necessary. This is fine for derivatives, but it's more convenient for ONNX tracing (and some cases for the optimizer, perhaps) for us to get the non-expanded API calls. Now that we have #4127, it's actually not too difficult to make the broadcasting operators get generated: just generate dispatch code for `foo` as well!\r\n\r\nIt might be necessary to make these virtual. We don't mind."}