{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/214114760", "pull_request_review_id": 151100238, "id": 214114760, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNDExNDc2MA==", "diff_hunk": "@@ -0,0 +1,12 @@\n+#pragma once\n+\n+#include \"torch/csrc/jit/ir.h\"\n+\n+namespace torch { namespace jit {\n+\n+// Erase detach. This is necessary for export to ONNX, since ONNX\n+// does not support training. This is safe because, again,\n+// ONNX does not suppor ttracing.\n+TORCH_API void EraseDetach(const std::shared_ptr<Graph>& graph);", "path": "torch/csrc/jit/passes/erase_detach.h", "position": null, "original_position": 10, "commit_id": "a0091630a0fd59e1f7273b47486a81151ea9172d", "original_commit_id": "14133dcb67e2b34b1094621e3f409d121f51d0ed", "user": {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, "body": "You don't need an entire pass to do this. Here is how it is done for a similar op, clone in `symbolics.py`:\r\n\r\n```\r\n# ignore clone operators that are inserted by PyTorch autograd\r\ndef clone(g, input):\r\n    return input\r\n```", "created_at": "2018-08-30T17:25:43Z", "updated_at": "2018-11-23T15:50:21Z", "html_url": "https://github.com/pytorch/pytorch/pull/11038#discussion_r214114760", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/11038", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/214114760"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/11038#discussion_r214114760"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/11038"}}, "body_html": "<p>You don't need an entire pass to do this. Here is how it is done for a similar op, clone in <code>symbolics.py</code>:</p>\n<pre><code># ignore clone operators that are inserted by PyTorch autograd\ndef clone(g, input):\n    return input\n</code></pre>", "body_text": "You don't need an entire pass to do this. Here is how it is done for a similar op, clone in symbolics.py:\n# ignore clone operators that are inserted by PyTorch autograd\ndef clone(g, input):\n    return input"}