{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/377620440", "html_url": "https://github.com/pytorch/pytorch/issues/5874#issuecomment-377620440", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/5874", "id": 377620440, "node_id": "MDEyOklzc3VlQ29tbWVudDM3NzYyMDQ0MA==", "user": {"login": "Naman-ntc", "id": 23135406, "node_id": "MDQ6VXNlcjIzMTM1NDA2", "avatar_url": "https://avatars2.githubusercontent.com/u/23135406?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Naman-ntc", "html_url": "https://github.com/Naman-ntc", "followers_url": "https://api.github.com/users/Naman-ntc/followers", "following_url": "https://api.github.com/users/Naman-ntc/following{/other_user}", "gists_url": "https://api.github.com/users/Naman-ntc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Naman-ntc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Naman-ntc/subscriptions", "organizations_url": "https://api.github.com/users/Naman-ntc/orgs", "repos_url": "https://api.github.com/users/Naman-ntc/repos", "events_url": "https://api.github.com/users/Naman-ntc/events{/privacy}", "received_events_url": "https://api.github.com/users/Naman-ntc/received_events", "type": "User", "site_admin": false}, "created_at": "2018-03-30T20:51:54Z", "updated_at": "2018-03-30T20:58:24Z", "author_association": "CONTRIBUTOR", "body_html": "<p>With reference to <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=655866\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/colesbury\">@colesbury</a> comment on <a href=\"https://github.com/pytorch/pytorch/pull/6136\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/pytorch/pytorch/pull/6136/hovercard\">#6136</a> regarding <a href=\"https://github.com/pytorch/pytorch/pull/6136\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/pytorch/pytorch/pull/6136/hovercard\">numpy like randint behaviour</a> : in numpy we enclose the size/shape in a single tuple parameter unlike in pytorch where we pass all dimensions as separate arguments.</p>\n<p>So we can't really achieve default parameters like numpy right as we cant distinguish dimensions of Tensor in case of default argument or is there any way around?</p>\n<p><code>torch.randint(4,10,2,3) # should mean a 2x3 dim, tensor having random ints in range [4,10)</code><br>\n<code># If default arguments supported then we cant distinguish it with tensor of dim. 10x2x3</code></p>\n<p>Should we implement tuple based shaping via a separate shape parameter? (It'll be inconsistent with other initialization methods!) Eg :<br>\n<code>torch.randint(low=4,high=10,size=(2,3))</code></p>", "body_text": "With reference to @colesbury comment on #6136 regarding numpy like randint behaviour : in numpy we enclose the size/shape in a single tuple parameter unlike in pytorch where we pass all dimensions as separate arguments.\nSo we can't really achieve default parameters like numpy right as we cant distinguish dimensions of Tensor in case of default argument or is there any way around?\ntorch.randint(4,10,2,3) # should mean a 2x3 dim, tensor having random ints in range [4,10)\n# If default arguments supported then we cant distinguish it with tensor of dim. 10x2x3\nShould we implement tuple based shaping via a separate shape parameter? (It'll be inconsistent with other initialization methods!) Eg :\ntorch.randint(low=4,high=10,size=(2,3))", "body": "With reference to @colesbury comment on [#6136](https://github.com/pytorch/pytorch/pull/6136) regarding [numpy like randint behaviour](https://github.com/pytorch/pytorch/pull/6136) : in numpy we enclose the size/shape in a single tuple parameter unlike in pytorch where we pass all dimensions as separate arguments.\r\n\r\nSo we can't really achieve default parameters like numpy right as we cant distinguish dimensions of Tensor in case of default argument or is there any way around?\r\n\r\n`torch.randint(4,10,2,3) # should mean a 2x3 dim, tensor having random ints in range [4,10)`\r\n`# If default arguments supported then we cant distinguish it with tensor of dim. 10x2x3`\r\n\r\nShould we implement tuple based shaping via a separate shape parameter? (It'll be inconsistent with other initialization methods!) Eg :\r\n`torch.randint(low=4,high=10,size=(2,3))`"}