{"url": "https://api.github.com/repos/pytorch/pytorch/issues/5874", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/5874/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/5874/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/5874/events", "html_url": "https://github.com/pytorch/pytorch/issues/5874", "id": 306453062, "node_id": "MDU6SXNzdWUzMDY0NTMwNjI=", "number": 5874, "title": "[feature request] random integer generator", "user": {"login": "Stonesjtu", "id": 4556044, "node_id": "MDQ6VXNlcjQ1NTYwNDQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/4556044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Stonesjtu", "html_url": "https://github.com/Stonesjtu", "followers_url": "https://api.github.com/users/Stonesjtu/followers", "following_url": "https://api.github.com/users/Stonesjtu/following{/other_user}", "gists_url": "https://api.github.com/users/Stonesjtu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Stonesjtu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Stonesjtu/subscriptions", "organizations_url": "https://api.github.com/users/Stonesjtu/orgs", "repos_url": "https://api.github.com/users/Stonesjtu/repos", "events_url": "https://api.github.com/users/Stonesjtu/events{/privacy}", "received_events_url": "https://api.github.com/users/Stonesjtu/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 24, "created_at": "2018-03-19T13:02:22Z", "updated_at": "2018-04-10T16:19:59Z", "closed_at": "2018-04-10T16:19:59Z", "author_association": "CONTRIBUTOR", "body_html": "<p>I couldn't find an easy way to generate uniform distributed <strong>integer</strong>.</p>\n<p>Currently I work it around like this:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">def</span> torch.randint(<span class=\"pl-c1\">max</span>, size):\n    <span class=\"pl-k\">return</span> (torch.rand(size) <span class=\"pl-k\">*</span> <span class=\"pl-c1\">max</span>).long()</pre></div>\n<p>Or we can generate random integer in C backend.</p>\n<p>I can make a PR if it's OK.</p>", "body_text": "I couldn't find an easy way to generate uniform distributed integer.\nCurrently I work it around like this:\ndef torch.randint(max, size):\n    return (torch.rand(size) * max).long()\nOr we can generate random integer in C backend.\nI can make a PR if it's OK.", "body": "I couldn't find an easy way to generate uniform distributed **integer**.\r\n\r\nCurrently I work it around like this:\r\n```Python\r\ndef torch.randint(max, size):\r\n    return (torch.rand(size) * max).long()\r\n```\r\n\r\nOr we can generate random integer in C backend.\r\n\r\nI can make a PR if it's OK."}