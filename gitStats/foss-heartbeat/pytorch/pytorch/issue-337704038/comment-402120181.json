{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/402120181", "html_url": "https://github.com/pytorch/pytorch/issues/9123#issuecomment-402120181", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/9123", "id": 402120181, "node_id": "MDEyOklzc3VlQ29tbWVudDQwMjEyMDE4MQ==", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "created_at": "2018-07-03T11:28:39Z", "updated_at": "2018-07-03T11:28:39Z", "author_association": "MEMBER", "body_html": "<p>Well the asserts usually guard out-of-bounds accesses, and I don't know how we could solve it otherwise. I don't think silently ignoring them is a good idea, because this can lead to values from uninitialized memory creeping into someone's computation, and blowing up things like BatchNorm stats in the middle of the training. We discussed the performance hit, and concluded that it's not big enough to warrant the extra debugging difficulty, or silencing the errors.</p>\n<p>I guess I would be ok with having two sets of kernels with asserts on and off, but I'm confident that the default should be on, and off would be a high-perf-I-know-what-I'm-doing mode.</p>", "body_text": "Well the asserts usually guard out-of-bounds accesses, and I don't know how we could solve it otherwise. I don't think silently ignoring them is a good idea, because this can lead to values from uninitialized memory creeping into someone's computation, and blowing up things like BatchNorm stats in the middle of the training. We discussed the performance hit, and concluded that it's not big enough to warrant the extra debugging difficulty, or silencing the errors.\nI guess I would be ok with having two sets of kernels with asserts on and off, but I'm confident that the default should be on, and off would be a high-perf-I-know-what-I'm-doing mode.", "body": "Well the asserts usually guard out-of-bounds accesses, and I don't know how we could solve it otherwise. I don't think silently ignoring them is a good idea, because this can lead to values from uninitialized memory creeping into someone's computation, and blowing up things like BatchNorm stats in the middle of the training. We discussed the performance hit, and concluded that it's not big enough to warrant the extra debugging difficulty, or silencing the errors.\r\n\r\nI guess I would be ok with having two sets of kernels with asserts on and off, but I'm confident that the default should be on, and off would be a high-perf-I-know-what-I'm-doing mode."}