{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/375711646", "html_url": "https://github.com/pytorch/pytorch/issues/5958#issuecomment-375711646", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/5958", "id": 375711646, "node_id": "MDEyOklzc3VlQ29tbWVudDM3NTcxMTY0Ng==", "user": {"login": "Erotemic", "id": 3186211, "node_id": "MDQ6VXNlcjMxODYyMTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/3186211?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Erotemic", "html_url": "https://github.com/Erotemic", "followers_url": "https://api.github.com/users/Erotemic/followers", "following_url": "https://api.github.com/users/Erotemic/following{/other_user}", "gists_url": "https://api.github.com/users/Erotemic/gists{/gist_id}", "starred_url": "https://api.github.com/users/Erotemic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Erotemic/subscriptions", "organizations_url": "https://api.github.com/users/Erotemic/orgs", "repos_url": "https://api.github.com/users/Erotemic/repos", "events_url": "https://api.github.com/users/Erotemic/events{/privacy}", "received_events_url": "https://api.github.com/users/Erotemic/received_events", "type": "User", "site_admin": false}, "created_at": "2018-03-23T15:53:37Z", "updated_at": "2018-03-23T15:53:37Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Returning what you want from the top-level forward function should defiantly work. You could do this pretty easily with an additional wrapper. As such:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">class</span> <span class=\"pl-en\">NormalModel</span>(<span class=\"pl-e\">nn</span>.<span class=\"pl-e\">Module</span>):\n    <span class=\"pl-k\">pass</span>\n\n<span class=\"pl-k\">class</span> <span class=\"pl-en\">ExtraOutputWrapper</span>(<span class=\"pl-e\">nn</span>.<span class=\"pl-e\">Module</span>):\n   <span class=\"pl-k\">def</span> <span class=\"pl-c1\">__init__</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>, <span class=\"pl-k\">*</span><span class=\"pl-smi\">args</span>, <span class=\"pl-k\">**</span><span class=\"pl-smi\">kw</span>):\n       <span class=\"pl-c1\">self</span>.wrapped <span class=\"pl-k\">=</span> NormalModel(<span class=\"pl-k\">*</span>args, <span class=\"pl-k\">**</span>kw)\n\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">forward</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>, <span class=\"pl-smi\">input</span>):\n        normal_output <span class=\"pl-k\">=</span> <span class=\"pl-c1\">self</span>.wrapped(<span class=\"pl-c1\">input</span>)\n        extra_output <span class=\"pl-k\">=</span> <span class=\"pl-c1\">self</span>.wrapped.layer_of_interest.property\n        <span class=\"pl-k\">return</span> normal_output, extra_output</pre></div>\n<p>Then wrap <code>ExtraOutputWrapper</code> with <code>DataParallel</code> and it will return the property of interest.  This seems fairly clean to me. Is there an issue with this?</p>", "body_text": "Returning what you want from the top-level forward function should defiantly work. You could do this pretty easily with an additional wrapper. As such:\nclass NormalModel(nn.Module):\n    pass\n\nclass ExtraOutputWrapper(nn.Module):\n   def __init__(self, *args, **kw):\n       self.wrapped = NormalModel(*args, **kw)\n\n    def forward(self, input):\n        normal_output = self.wrapped(input)\n        extra_output = self.wrapped.layer_of_interest.property\n        return normal_output, extra_output\nThen wrap ExtraOutputWrapper with DataParallel and it will return the property of interest.  This seems fairly clean to me. Is there an issue with this?", "body": "Returning what you want from the top-level forward function should defiantly work. You could do this pretty easily with an additional wrapper. As such:\r\n\r\n```python\r\n\r\nclass NormalModel(nn.Module):\r\n    pass\r\n\r\nclass ExtraOutputWrapper(nn.Module):\r\n   def __init__(self, *args, **kw):\r\n       self.wrapped = NormalModel(*args, **kw)\r\n\r\n    def forward(self, input):\r\n        normal_output = self.wrapped(input)\r\n        extra_output = self.wrapped.layer_of_interest.property\r\n        return normal_output, extra_output\r\n```\r\n\r\nThen wrap `ExtraOutputWrapper` with `DataParallel` and it will return the property of interest.  This seems fairly clean to me. Is there an issue with this?"}