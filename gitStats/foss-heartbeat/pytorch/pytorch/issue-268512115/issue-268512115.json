{"url": "https://api.github.com/repos/pytorch/pytorch/issues/3291", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/3291/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/3291/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/3291/events", "html_url": "https://github.com/pytorch/pytorch/pull/3291", "id": 268512115, "node_id": "MDExOlB1bGxSZXF1ZXN0MTQ4NzUzNDcx", "number": 3291, "title": "Fixes for JIT", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 679953983, "node_id": "MDU6TGFiZWw2Nzk5NTM5ODM=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/jit", "name": "jit", "color": "c5def5", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-10-25T19:02:41Z", "updated_at": "2018-11-23T15:35:43Z", "closed_at": "2017-10-26T21:10:10Z", "author_association": "MEMBER", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/3291", "html_url": "https://github.com/pytorch/pytorch/pull/3291", "diff_url": "https://github.com/pytorch/pytorch/pull/3291.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/3291.patch"}, "body_html": "<p>Add the script to auto-generate functions calling ATen methods corresponding to JIT nodes.</p>\n<p>Also, re-enable JIT tests (they're all working now).</p>\n<p>Generated <code>constructors</code> look like this:</p>\n<div class=\"highlight highlight-source-c++\"><pre>  {<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>btrisolve-3<span class=\"pl-pds\">\"</span></span>, [](Node *node) {\n  \n    <span class=\"pl-k\">return</span> <span class=\"pl-c1\">TensorOp</span>([=](<span class=\"pl-k\">const</span> variable_list&amp; vars) -&gt; variable_list {\n      <span class=\"pl-k\">return</span> <span class=\"pl-c1\">pack_list</span>(<span class=\"pl-c1\">at::btrisolve</span>(vars[<span class=\"pl-c1\">0</span>], vars[<span class=\"pl-c1\">1</span>], vars[<span class=\"pl-c1\">2</span>]));\n    }, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>btrisolve<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-c1\">3</span>);\n  }},\n  {<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>cat-1-dim<span class=\"pl-pds\">\"</span></span>, [](Node *node) {\n    <span class=\"pl-c1\">int64_t</span> dim = (node-&gt;<span class=\"pl-c1\">i</span>(<span class=\"pl-c1\">stringToSymbol</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>dim<span class=\"pl-pds\">\"</span></span>)));\n    <span class=\"pl-k\">return</span> <span class=\"pl-c1\">TensorOp</span>([=](<span class=\"pl-k\">const</span> variable_list&amp; vars) -&gt; variable_list {\n      <span class=\"pl-k\">return</span> <span class=\"pl-c1\">pack_list</span>(<span class=\"pl-c1\">at::cat</span>(<span class=\"pl-c1\">as_tensor_list</span>(vars), dim));\n    }, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>cat<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-c1\">1</span>);\n  }},</pre></div>", "body_text": "Add the script to auto-generate functions calling ATen methods corresponding to JIT nodes.\nAlso, re-enable JIT tests (they're all working now).\nGenerated constructors look like this:\n  {\"btrisolve-3\", [](Node *node) {\n  \n    return TensorOp([=](const variable_list& vars) -> variable_list {\n      return pack_list(at::btrisolve(vars[0], vars[1], vars[2]));\n    }, \"btrisolve\", 3);\n  }},\n  {\"cat-1-dim\", [](Node *node) {\n    int64_t dim = (node->i(stringToSymbol(\"dim\")));\n    return TensorOp([=](const variable_list& vars) -> variable_list {\n      return pack_list(at::cat(as_tensor_list(vars), dim));\n    }, \"cat\", 1);\n  }},", "body": "Add the script to auto-generate functions calling ATen methods corresponding to JIT nodes.\r\n\r\nAlso, re-enable JIT tests (they're all working now).\r\n\r\nGenerated `constructors` look like this:\r\n```cpp\r\n  {\"btrisolve-3\", [](Node *node) {\r\n  \r\n    return TensorOp([=](const variable_list& vars) -> variable_list {\r\n      return pack_list(at::btrisolve(vars[0], vars[1], vars[2]));\r\n    }, \"btrisolve\", 3);\r\n  }},\r\n  {\"cat-1-dim\", [](Node *node) {\r\n    int64_t dim = (node->i(stringToSymbol(\"dim\")));\r\n    return TensorOp([=](const variable_list& vars) -> variable_list {\r\n      return pack_list(at::cat(as_tensor_list(vars), dim));\r\n    }, \"cat\", 1);\r\n  }},\r\n```"}