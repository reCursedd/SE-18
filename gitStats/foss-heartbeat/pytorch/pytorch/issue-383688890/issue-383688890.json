{"url": "https://api.github.com/repos/pytorch/pytorch/issues/14330", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/14330/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/14330/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/14330/events", "html_url": "https://github.com/pytorch/pytorch/issues/14330", "id": 383688890, "node_id": "MDU6SXNzdWUzODM2ODg4OTA=", "number": 14330, "title": "Loading opencv image to pytorch tensor", "user": {"login": "jainshobhit", "id": 16581564, "node_id": "MDQ6VXNlcjE2NTgxNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/16581564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jainshobhit", "html_url": "https://github.com/jainshobhit", "followers_url": "https://api.github.com/users/jainshobhit/followers", "following_url": "https://api.github.com/users/jainshobhit/following{/other_user}", "gists_url": "https://api.github.com/users/jainshobhit/gists{/gist_id}", "starred_url": "https://api.github.com/users/jainshobhit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jainshobhit/subscriptions", "organizations_url": "https://api.github.com/users/jainshobhit/orgs", "repos_url": "https://api.github.com/users/jainshobhit/repos", "events_url": "https://api.github.com/users/jainshobhit/events{/privacy}", "received_events_url": "https://api.github.com/users/jainshobhit/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-11-23T02:38:28Z", "updated_at": "2018-11-23T13:10:11Z", "closed_at": "2018-11-23T07:24:41Z", "author_association": "NONE", "body_html": "<h2><g-emoji class=\"g-emoji\" alias=\"question\" fallback-src=\"https://assets-cdn.github.com/images/icons/emoji/unicode/2753.png\">\u2753</g-emoji> Questions and Help</h2>\n<p>I am trying to load an image in OpenCV Mat variable and then converting it into tensor for passing it into my TorchScript model. I followed <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"368420711\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/12506\" data-hovercard-type=\"issue\" data-hovercard-url=\"/pytorch/pytorch/issues/12506/hovercard\" href=\"https://github.com/pytorch/pytorch/issues/12506\">#12506</a> for loading the image however, I am not sure whether it is  the correct way or not.<br>\nHere is my code</p>\n<div class=\"highlight highlight-source-c++\"><pre>#<span class=\"pl-k\">include</span> <span class=\"pl-s\"><span class=\"pl-pds\">&lt;</span>torch/script.h<span class=\"pl-pds\">&gt;</span></span> <span class=\"pl-c\"><span class=\"pl-c\">//</span> One-stop header.</span>\n#<span class=\"pl-k\">include</span> <span class=\"pl-s\"><span class=\"pl-pds\">&lt;</span>iostream<span class=\"pl-pds\">&gt;</span></span>\n#<span class=\"pl-k\">include</span> <span class=\"pl-s\"><span class=\"pl-pds\">&lt;</span>memory<span class=\"pl-pds\">&gt;</span></span>\n#<span class=\"pl-k\">include</span> <span class=\"pl-s\"><span class=\"pl-pds\">&lt;</span>opencv2/core/core.hpp<span class=\"pl-pds\">&gt;</span></span>\n#<span class=\"pl-k\">include</span> <span class=\"pl-s\"><span class=\"pl-pds\">&lt;</span>opencv2/imgproc/imgproc.hpp<span class=\"pl-pds\">&gt;</span></span>\n#<span class=\"pl-k\">include</span> <span class=\"pl-s\"><span class=\"pl-pds\">&lt;</span>opencv2/highgui/highgui.hpp<span class=\"pl-pds\">&gt;</span></span>\n\n<span class=\"pl-k\">using</span> <span class=\"pl-k\">namespace</span> <span class=\"pl-en\">cv</span><span class=\"pl-k\">;</span>\n<span class=\"pl-k\">using</span> <span class=\"pl-k\">namespace</span> <span class=\"pl-en\">std</span><span class=\"pl-k\">;</span>\n\n<span class=\"pl-k\">int</span> <span class=\"pl-en\">main</span>(<span class=\"pl-k\">int</span> argc, <span class=\"pl-k\">const</span> <span class=\"pl-k\">char</span>* argv[]) {\n  <span class=\"pl-k\">if</span> (argc != <span class=\"pl-c1\">2</span>) {\n    std::cerr &lt;&lt; <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>usage: example-app &lt;path-to-exported-script-module&gt;<span class=\"pl-cce\">\\n</span><span class=\"pl-pds\">\"</span></span>;\n    <span class=\"pl-k\">return</span> -<span class=\"pl-c1\">1</span>;\n  }\n  <span class=\"pl-c\"><span class=\"pl-c\">//</span> Deserialize the ScriptModule from a file using torch::jit::load().</span>\n  std::shared_ptr&lt;torch::jit::script::Module&gt; module = <span class=\"pl-c1\">torch::jit::load</span>(argv[<span class=\"pl-c1\">1</span>]);\n\n  <span class=\"pl-c1\">assert</span>(module != <span class=\"pl-c1\">nullptr</span>);\n  std::cout &lt;&lt; <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>ok<span class=\"pl-cce\">\\n</span><span class=\"pl-pds\">\"</span></span>;\n\n  Mat image_bgr, image;\n  image_bgr = <span class=\"pl-c1\">imread</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/home/landscape_org.jpg<span class=\"pl-pds\">\"</span></span>);\n  <span class=\"pl-c1\">cvtColor</span>(image_bgr, image, COLOR_BGR2RGB);\n  <span class=\"pl-k\">for</span> (<span class=\"pl-k\">int</span> j=<span class=\"pl-c1\">0</span>;j&lt;<span class=\"pl-c1\">10</span>;j++)\n  {\n    cout&lt;&lt;image.<span class=\"pl-smi\">at</span>&lt;Vec3b&gt;(<span class=\"pl-c1\">0</span>,j)&lt;&lt;endl;\n  }\n  at::Tensor tensor_image = <span class=\"pl-c1\">torch::from_blob</span>(image.<span class=\"pl-smi\">data</span>, {<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">3</span>, image.<span class=\"pl-smi\">rows</span>, image.<span class=\"pl-smi\">cols</span>}, at::<span class=\"pl-c1\">kByte</span>);\n  tensor_image = tensor_image.<span class=\"pl-c1\">to</span>(at::<span class=\"pl-c1\">kFloat</span>);\n  cout&lt;&lt;tensor_image.<span class=\"pl-c1\">slice</span>(<span class=\"pl-c1\">2</span>,<span class=\"pl-c1\">0</span>,<span class=\"pl-c1\">1</span>)&lt;&lt;endl;\n\n  <span class=\"pl-c\"><span class=\"pl-c\">//</span> Create a vector of inputs.</span>\n  std::vector&lt;torch::jit::IValue&gt; input;\n  input.<span class=\"pl-c1\">emplace_back</span>(tensor_image);\n\n  <span class=\"pl-c\"><span class=\"pl-c\">//</span> Execute the model and turn its output into a tensor.</span>\n  <span class=\"pl-k\">auto</span> output = module-&gt;<span class=\"pl-c1\">forward</span>(input).<span class=\"pl-c1\">toTuple</span>()-&gt;<span class=\"pl-c1\">elements</span>()[<span class=\"pl-c1\">6</span>].<span class=\"pl-c1\">toTensor</span>().<span class=\"pl-c1\">clone</span>().<span class=\"pl-c1\">clamp</span>(<span class=\"pl-c1\">0</span>,<span class=\"pl-c1\">255</span>);\n  Mat <span class=\"pl-smi\">output_mat</span>(<span class=\"pl-c1\">cv::Size</span>(<span class=\"pl-c1\">1920</span>,<span class=\"pl-c1\">1080</span>), CV_8UC3, output.<span class=\"pl-smi\">data</span>&lt;<span class=\"pl-k\">float</span>&gt;());\n\n  Mat output8, output_bgr;\n  <span class=\"pl-c1\">cvtColor</span>(output8, output_bgr, COLOR_RGB2BGR);\n  <span class=\"pl-c1\">imwrite</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>landscape_output.jpg<span class=\"pl-pds\">\"</span></span>, output_bgr);\n}</pre></div>\n<p>The output for the first 10 pixel values is</p>\n<pre><code>[53, 149, 249] \n[52, 148, 248] \n[53, 149, 249] \n[55, 151, 251]\n[58, 154, 254]\n[58, 154, 254]\n[61, 155, 255]\n[61, 155, 255]\n[58, 152, 252]\n[58, 152, 252]\n</code></pre>\n<p>And the output on calling the slice function on the resulting tensor  (<code>cout&lt;&lt;tensor_image.slice(2,0,1)&lt;&lt;endl;</code>) is (only mentioning the first few columns of the R color channel):</p>\n<pre><code>(1,1,.,.) =\nColumns 1 to 15   53  149  249   52  148  248   53  149  249   55  151  251   58  154  254\nColumns 16 to 30   58  154  254   61  155  255   61  155  255   58  152  252   58  152  252\n</code></pre>\n<p>This clearly shows that the values are not being copied correctly in the tensor.</p>\n<p>I am not able to figure out what is the correct way to perform this step since I was not able to find adequate documentation.</p>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=6429851\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/goldsborough\">@goldsborough</a></p>", "body_text": "\u2753 Questions and Help\nI am trying to load an image in OpenCV Mat variable and then converting it into tensor for passing it into my TorchScript model. I followed #12506 for loading the image however, I am not sure whether it is  the correct way or not.\nHere is my code\n#include <torch/script.h> // One-stop header.\n#include <iostream>\n#include <memory>\n#include <opencv2/core/core.hpp>\n#include <opencv2/imgproc/imgproc.hpp>\n#include <opencv2/highgui/highgui.hpp>\n\nusing namespace cv;\nusing namespace std;\n\nint main(int argc, const char* argv[]) {\n  if (argc != 2) {\n    std::cerr << \"usage: example-app <path-to-exported-script-module>\\n\";\n    return -1;\n  }\n  // Deserialize the ScriptModule from a file using torch::jit::load().\n  std::shared_ptr<torch::jit::script::Module> module = torch::jit::load(argv[1]);\n\n  assert(module != nullptr);\n  std::cout << \"ok\\n\";\n\n  Mat image_bgr, image;\n  image_bgr = imread(\"/home/landscape_org.jpg\");\n  cvtColor(image_bgr, image, COLOR_BGR2RGB);\n  for (int j=0;j<10;j++)\n  {\n    cout<<image.at<Vec3b>(0,j)<<endl;\n  }\n  at::Tensor tensor_image = torch::from_blob(image.data, {1, 3, image.rows, image.cols}, at::kByte);\n  tensor_image = tensor_image.to(at::kFloat);\n  cout<<tensor_image.slice(2,0,1)<<endl;\n\n  // Create a vector of inputs.\n  std::vector<torch::jit::IValue> input;\n  input.emplace_back(tensor_image);\n\n  // Execute the model and turn its output into a tensor.\n  auto output = module->forward(input).toTuple()->elements()[6].toTensor().clone().clamp(0,255);\n  Mat output_mat(cv::Size(1920,1080), CV_8UC3, output.data<float>());\n\n  Mat output8, output_bgr;\n  cvtColor(output8, output_bgr, COLOR_RGB2BGR);\n  imwrite(\"landscape_output.jpg\", output_bgr);\n}\nThe output for the first 10 pixel values is\n[53, 149, 249] \n[52, 148, 248] \n[53, 149, 249] \n[55, 151, 251]\n[58, 154, 254]\n[58, 154, 254]\n[61, 155, 255]\n[61, 155, 255]\n[58, 152, 252]\n[58, 152, 252]\n\nAnd the output on calling the slice function on the resulting tensor  (cout<<tensor_image.slice(2,0,1)<<endl;) is (only mentioning the first few columns of the R color channel):\n(1,1,.,.) =\nColumns 1 to 15   53  149  249   52  148  248   53  149  249   55  151  251   58  154  254\nColumns 16 to 30   58  154  254   61  155  255   61  155  255   58  152  252   58  152  252\n\nThis clearly shows that the values are not being copied correctly in the tensor.\nI am not able to figure out what is the correct way to perform this step since I was not able to find adequate documentation.\n@goldsborough", "body": "## \u2753 Questions and Help\r\nI am trying to load an image in OpenCV Mat variable and then converting it into tensor for passing it into my TorchScript model. I followed https://github.com/pytorch/pytorch/issues/12506 for loading the image however, I am not sure whether it is  the correct way or not. \r\nHere is my code\r\n\r\n```cpp\r\n#include <torch/script.h> // One-stop header.\r\n#include <iostream>\r\n#include <memory>\r\n#include <opencv2/core/core.hpp>\r\n#include <opencv2/imgproc/imgproc.hpp>\r\n#include <opencv2/highgui/highgui.hpp>\r\n\r\nusing namespace cv;\r\nusing namespace std;\r\n\r\nint main(int argc, const char* argv[]) {\r\n  if (argc != 2) {\r\n    std::cerr << \"usage: example-app <path-to-exported-script-module>\\n\";\r\n    return -1;\r\n  }\r\n  // Deserialize the ScriptModule from a file using torch::jit::load().\r\n  std::shared_ptr<torch::jit::script::Module> module = torch::jit::load(argv[1]);\r\n\r\n  assert(module != nullptr);\r\n  std::cout << \"ok\\n\";\r\n\r\n  Mat image_bgr, image;\r\n  image_bgr = imread(\"/home/landscape_org.jpg\");\r\n  cvtColor(image_bgr, image, COLOR_BGR2RGB);\r\n  for (int j=0;j<10;j++)\r\n  {\r\n    cout<<image.at<Vec3b>(0,j)<<endl;\r\n  }\r\n  at::Tensor tensor_image = torch::from_blob(image.data, {1, 3, image.rows, image.cols}, at::kByte);\r\n  tensor_image = tensor_image.to(at::kFloat);\r\n  cout<<tensor_image.slice(2,0,1)<<endl;\r\n\r\n  // Create a vector of inputs.\r\n  std::vector<torch::jit::IValue> input;\r\n  input.emplace_back(tensor_image);\r\n\r\n  // Execute the model and turn its output into a tensor.\r\n  auto output = module->forward(input).toTuple()->elements()[6].toTensor().clone().clamp(0,255);\r\n  Mat output_mat(cv::Size(1920,1080), CV_8UC3, output.data<float>());\r\n\r\n  Mat output8, output_bgr;\r\n  cvtColor(output8, output_bgr, COLOR_RGB2BGR);\r\n  imwrite(\"landscape_output.jpg\", output_bgr);\r\n}\r\n```\r\n\r\nThe output for the first 10 pixel values is \r\n\r\n```\r\n[53, 149, 249] \r\n[52, 148, 248] \r\n[53, 149, 249] \r\n[55, 151, 251]\r\n[58, 154, 254]\r\n[58, 154, 254]\r\n[61, 155, 255]\r\n[61, 155, 255]\r\n[58, 152, 252]\r\n[58, 152, 252]\r\n```\r\n\r\nAnd the output on calling the slice function on the resulting tensor  (`cout<<tensor_image.slice(2,0,1)<<endl;`) is (only mentioning the first few columns of the R color channel):\r\n``` \r\n(1,1,.,.) =\r\nColumns 1 to 15   53  149  249   52  148  248   53  149  249   55  151  251   58  154  254\r\nColumns 16 to 30   58  154  254   61  155  255   61  155  255   58  152  252   58  152  252\r\n```\r\nThis clearly shows that the values are not being copied correctly in the tensor. \r\n\r\nI am not able to figure out what is the correct way to perform this step since I was not able to find adequate documentation. \r\n\r\n@goldsborough "}