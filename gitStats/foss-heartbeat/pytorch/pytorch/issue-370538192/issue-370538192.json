{"url": "https://api.github.com/repos/pytorch/pytorch/issues/12706", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/12706/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/12706/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/12706/events", "html_url": "https://github.com/pytorch/pytorch/pull/12706", "id": 370538192, "node_id": "MDExOlB1bGxSZXF1ZXN0MjIzMTkxMjk2", "number": 12706, "title": "Simplify typeid SFINAE", "user": {"login": "smessmer", "id": 2373925, "node_id": "MDQ6VXNlcjIzNzM5MjU=", "avatar_url": "https://avatars3.githubusercontent.com/u/2373925?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smessmer", "html_url": "https://github.com/smessmer", "followers_url": "https://api.github.com/users/smessmer/followers", "following_url": "https://api.github.com/users/smessmer/following{/other_user}", "gists_url": "https://api.github.com/users/smessmer/gists{/gist_id}", "starred_url": "https://api.github.com/users/smessmer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smessmer/subscriptions", "organizations_url": "https://api.github.com/users/smessmer/orgs", "repos_url": "https://api.github.com/users/smessmer/repos", "events_url": "https://api.github.com/users/smessmer/events{/privacy}", "received_events_url": "https://api.github.com/users/smessmer/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-10-16T10:13:16Z", "updated_at": "2018-10-22T18:29:03Z", "closed_at": "2018-10-22T18:29:03Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/12706", "html_url": "https://github.com/pytorch/pytorch/pull/12706", "diff_url": "https://github.com/pytorch/pytorch/pull/12706.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/12706.patch"}, "body_html": "<p>Stack:<br>\n\u00a0\u00a0\u00a0\u00a0<g-emoji class=\"g-emoji\" alias=\"white_circle\" fallback-src=\"https://assets-cdn.github.com/images/icons/emoji/unicode/26aa.png\">\u26aa\ufe0f</g-emoji>\u00a0 <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"366561543\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/12307\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/pytorch/pytorch/pull/12307/hovercard\" href=\"https://github.com/pytorch/pytorch/pull/12307\">#12307</a> Add TypeMeta::New/Delete\u00a0\u00a0<a href=\"https://our.internmc.facebook.com/intern/diff/D10184116/\" rel=\"nofollow\"><g-emoji class=\"g-emoji\" alias=\"green_heart\" fallback-src=\"https://assets-cdn.github.com/images/icons/emoji/unicode/1f49a.png\">\ud83d\udc9a</g-emoji></a><br>\n\u00a0\u00a0\u00a0\u00a0<g-emoji class=\"g-emoji\" alias=\"black_circle\" fallback-src=\"https://assets-cdn.github.com/images/icons/emoji/unicode/26ab.png\">\u26ab\ufe0f</g-emoji>\u00a0 <strong><a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"370538192\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/12706\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/pytorch/pytorch/pull/12706/hovercard\" href=\"https://github.com/pytorch/pytorch/pull/12706\">#12706</a> [wip] Simplify typeid SFINAE</strong>\u00a0\u00a0<a href=\"https://our.internmc.facebook.com/intern/diff/D10400927/\" rel=\"nofollow\"><g-emoji class=\"g-emoji\" alias=\"yellow_heart\" fallback-src=\"https://assets-cdn.github.com/images/icons/emoji/unicode/1f49b.png\">\ud83d\udc9b</g-emoji></a></p>\n<p>If both branches are valid C++ code independent from the type passed in, then we can just use if/else inside of a constexpr function<br>\nto decide between the cases. Only if one branch would be invalid code (say because type T doesn't have a default constructor), we'd<br>\nneed \"constexpr if\" or SFINAE.</p>\n<p>Differential Revision: <a href=\"https://our.internmc.facebook.com/intern/diff/D10400927/\" rel=\"nofollow\">D10400927</a></p>", "body_text": "Stack:\n\u00a0\u00a0\u00a0\u00a0\u26aa\ufe0f\u00a0 #12307 Add TypeMeta::New/Delete\u00a0\u00a0\ud83d\udc9a\n\u00a0\u00a0\u00a0\u00a0\u26ab\ufe0f\u00a0 #12706 [wip] Simplify typeid SFINAE\u00a0\u00a0\ud83d\udc9b\nIf both branches are valid C++ code independent from the type passed in, then we can just use if/else inside of a constexpr function\nto decide between the cases. Only if one branch would be invalid code (say because type T doesn't have a default constructor), we'd\nneed \"constexpr if\" or SFINAE.\nDifferential Revision: D10400927", "body": "Stack:\n&nbsp;&nbsp;&nbsp;&nbsp;:white_circle:&nbsp; #12307 Add TypeMeta::New/Delete&nbsp;&nbsp;[:green_heart:](https://our.internmc.facebook.com/intern/diff/D10184116/)\n&nbsp;&nbsp;&nbsp;&nbsp;:black_circle:&nbsp; **#12706 [wip] Simplify typeid SFINAE**&nbsp;&nbsp;[:yellow_heart:](https://our.internmc.facebook.com/intern/diff/D10400927/)\n\nIf both branches are valid C++ code independent from the type passed in, then we can just use if/else inside of a constexpr function\nto decide between the cases. Only if one branch would be invalid code (say because type T doesn't have a default constructor), we'd\nneed \"constexpr if\" or SFINAE.\n\nDifferential Revision: [D10400927](https://our.internmc.facebook.com/intern/diff/D10400927/)"}