{"url": "https://api.github.com/repos/pytorch/pytorch/issues/3978", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/3978/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/3978/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/3978/events", "html_url": "https://github.com/pytorch/pytorch/pull/3978", "id": 278639115, "node_id": "MDExOlB1bGxSZXF1ZXN0MTU1OTg5MDkw", "number": 3978, "title": "Implement reparameterized gradient for Gamma sampler", "user": {"login": "fritzo", "id": 648532, "node_id": "MDQ6VXNlcjY0ODUzMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/648532?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fritzo", "html_url": "https://github.com/fritzo", "followers_url": "https://api.github.com/users/fritzo/followers", "following_url": "https://api.github.com/users/fritzo/following{/other_user}", "gists_url": "https://api.github.com/users/fritzo/gists{/gist_id}", "starred_url": "https://api.github.com/users/fritzo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fritzo/subscriptions", "organizations_url": "https://api.github.com/users/fritzo/orgs", "repos_url": "https://api.github.com/users/fritzo/repos", "events_url": "https://api.github.com/users/fritzo/events{/privacy}", "received_events_url": "https://api.github.com/users/fritzo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-12-02T00:57:56Z", "updated_at": "2018-11-23T15:37:13Z", "closed_at": "2017-12-11T11:32:16Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/3978", "html_url": "https://github.com/pytorch/pytorch/pull/3978", "diff_url": "https://github.com/pytorch/pytorch/pull/3978.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/3978.patch"}, "body_html": "<p><span class=\"issue-keyword tooltipped tooltipped-se\" aria-label=\"This pull request closes issue #3813.\">Closes</span> <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"275791032\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/3813\" data-hovercard-type=\"issue\" data-hovercard-url=\"/pytorch/pytorch/issues/3813/hovercard\" href=\"https://github.com/pytorch/pytorch/issues/3813\">#3813</a></p>\n<p>This implements reparameterized gradient for <code>distributions.Gamma</code>. The gradient is implemented by directly approximating the reparameterized gradient function <code>dx/dalpha</code> following <a href=\"https://arxiv.org/pdf/1509.01631.pdf\" rel=\"nofollow\">Knowles (2015)</a>. The approximation is accurate to within 0.5% relative error for a wide range of alphas.</p>\n<h2>Derivation</h2>\n<p>First consider the <code>beta</code> variable. If <code>x ~ Gamma(alpha, beta)</code> then <code>x / beta ~ Gamma(alpha, 1)</code>. Since division is already implemented in PyTorch, we can thus reduce our problem to computing a reparameterized gradient of a standard gamma <code>x ~ Gamma(alpha) = Gamma(alpha, 1)</code> wrt <code>alpha</code>.</p>\n<p>This PR implements a function <code>standard_gamma_grad(x, alpha)</code> that directly approximates the reparameterized gradient defined (for any continuous univariate distribution) as</p>\n<pre><code>                d/dalpha cdf(x; alpha)     d/dalpha cdf(x; alpha)\ndx / dalpha = - ---------------------- = - ----------------------\n                  d/dx cdf(x; alpha)           pdf(x; alpha)\n</code></pre>\n<p>This definition is used in the unit tests in <code>tests/test_distributions.py</code>, which compute <code>d/dalpha cdf(x;alpha)</code> via finite difference of the <code>scipy.stats.gamma.cdf()</code> function.</p>\n<p>The approximation is split into three regions:</p>\n<ul>\n<li>For small <code>x</code> we use a power series approximation of <code>cdf(x, alpha)</code>.<br>\nUntil <code>digamma()</code> is implemented in PyTorch, we use a finite difference of <code>lgamma()</code>.</li>\n<li>For large <code>alpha</code> we use the approximation\n<pre><code>standard_gamma_grad(x, alpha) = sqrt(x/alpha)\n</code></pre>\n</li>\n<li>For intermediate x,alpha we use a rational function approximation\n<pre><code>standard_gamma_grad(x, alpha) = exp(PQ(log(x / alpha), log(alpha)))\n</code></pre>\nwhere <code>PQ(u,v)</code> is a rational function of order 2 in u and 3 in v.</li>\n</ul>\n<p>For complete derivation, see this <a href=\"https://github.com/fritzo/notebooks/blob/master/gamma-reparameterized.ipynb\">Jupyter Notebook</a>.</p>", "body_text": "Closes #3813\nThis implements reparameterized gradient for distributions.Gamma. The gradient is implemented by directly approximating the reparameterized gradient function dx/dalpha following Knowles (2015). The approximation is accurate to within 0.5% relative error for a wide range of alphas.\nDerivation\nFirst consider the beta variable. If x ~ Gamma(alpha, beta) then x / beta ~ Gamma(alpha, 1). Since division is already implemented in PyTorch, we can thus reduce our problem to computing a reparameterized gradient of a standard gamma x ~ Gamma(alpha) = Gamma(alpha, 1) wrt alpha.\nThis PR implements a function standard_gamma_grad(x, alpha) that directly approximates the reparameterized gradient defined (for any continuous univariate distribution) as\n                d/dalpha cdf(x; alpha)     d/dalpha cdf(x; alpha)\ndx / dalpha = - ---------------------- = - ----------------------\n                  d/dx cdf(x; alpha)           pdf(x; alpha)\n\nThis definition is used in the unit tests in tests/test_distributions.py, which compute d/dalpha cdf(x;alpha) via finite difference of the scipy.stats.gamma.cdf() function.\nThe approximation is split into three regions:\n\nFor small x we use a power series approximation of cdf(x, alpha).\nUntil digamma() is implemented in PyTorch, we use a finite difference of lgamma().\nFor large alpha we use the approximation\nstandard_gamma_grad(x, alpha) = sqrt(x/alpha)\n\n\nFor intermediate x,alpha we use a rational function approximation\nstandard_gamma_grad(x, alpha) = exp(PQ(log(x / alpha), log(alpha)))\n\nwhere PQ(u,v) is a rational function of order 2 in u and 3 in v.\n\nFor complete derivation, see this Jupyter Notebook.", "body": "Closes #3813\r\n\r\nThis implements reparameterized gradient for `distributions.Gamma`. The gradient is implemented by directly approximating the reparameterized gradient function `dx/dalpha` following [Knowles (2015)](https://arxiv.org/pdf/1509.01631.pdf). The approximation is accurate to within 0.5% relative error for a wide range of alphas.\r\n\r\n## Derivation\r\n\r\nFirst consider the `beta` variable. If `x ~ Gamma(alpha, beta)` then `x / beta ~ Gamma(alpha, 1)`. Since division is already implemented in PyTorch, we can thus reduce our problem to computing a reparameterized gradient of a standard gamma `x ~ Gamma(alpha) = Gamma(alpha, 1)` wrt `alpha`.\r\n\r\nThis PR implements a function `standard_gamma_grad(x, alpha)` that directly approximates the reparameterized gradient defined (for any continuous univariate distribution) as\r\n```\r\n                d/dalpha cdf(x; alpha)     d/dalpha cdf(x; alpha)\r\ndx / dalpha = - ---------------------- = - ----------------------\r\n                  d/dx cdf(x; alpha)           pdf(x; alpha)\r\n```\r\nThis definition is used in the unit tests in `tests/test_distributions.py`, which compute `d/dalpha cdf(x;alpha)` via finite difference of the `scipy.stats.gamma.cdf()` function.\r\n\r\nThe approximation is split into three regions:\r\n- For small `x` we use a power series approximation of `cdf(x, alpha)`.\r\n  Until `digamma()` is implemented in PyTorch, we use a finite difference of `lgamma()`.\r\n- For large `alpha` we use the approximation\r\n  ```\r\n  standard_gamma_grad(x, alpha) = sqrt(x/alpha)\r\n  ```\r\n- For intermediate x,alpha we use a rational function approximation\r\n   ```\r\n   standard_gamma_grad(x, alpha) = exp(PQ(log(x / alpha), log(alpha)))\r\n   ```\r\n   where `PQ(u,v)` is a rational function of order 2 in u and 3 in v.\r\n\r\nFor complete derivation, see this [Jupyter Notebook](https://github.com/fritzo/notebooks/blob/master/gamma-reparameterized.ipynb)."}