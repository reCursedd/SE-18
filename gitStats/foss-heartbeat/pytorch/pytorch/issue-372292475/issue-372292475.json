{"url": "https://api.github.com/repos/pytorch/pytorch/issues/12911", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/12911/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/12911/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/12911/events", "html_url": "https://github.com/pytorch/pytorch/issues/12911", "id": 372292475, "node_id": "MDU6SXNzdWUzNzIyOTI0NzU=", "number": 12911, "title": "Libtorch: can't build program with libtorch and cuda sources with cmake 3.12", "user": {"login": "traveller59", "id": 28866047, "node_id": "MDQ6VXNlcjI4ODY2MDQ3", "avatar_url": "https://avatars1.githubusercontent.com/u/28866047?v=4", "gravatar_id": "", "url": "https://api.github.com/users/traveller59", "html_url": "https://github.com/traveller59", "followers_url": "https://api.github.com/users/traveller59/followers", "following_url": "https://api.github.com/users/traveller59/following{/other_user}", "gists_url": "https://api.github.com/users/traveller59/gists{/gist_id}", "starred_url": "https://api.github.com/users/traveller59/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/traveller59/subscriptions", "organizations_url": "https://api.github.com/users/traveller59/orgs", "repos_url": "https://api.github.com/users/traveller59/repos", "events_url": "https://api.github.com/users/traveller59/events{/privacy}", "received_events_url": "https://api.github.com/users/traveller59/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2018-10-21T08:41:40Z", "updated_at": "2018-10-30T01:14:38Z", "closed_at": null, "author_association": "NONE", "body_html": "<h2><g-emoji class=\"g-emoji\" alias=\"bug\" fallback-src=\"https://assets-cdn.github.com/images/icons/emoji/unicode/1f41b.png\">\ud83d\udc1b</g-emoji> Bug</h2>\n<p>If I want to use libtorch in my cmake project, I got an error:</p>\n<pre><code>[build] [ 94%] Linking CUDA device code CMakeFiles/xxx.dir/cmake_device_link.o\n[build] nvcc fatal   : Unknown option 'Wl,--no-as-needed,/home/xxx/library/libtorch/lib/libcaffe2.so'\n</code></pre>\n<h2>To Reproduce</h2>\n<p>Steps to reproduce the behavior:</p>\n<ol>\n<li>download nightly libtorch 1.0.0.dev20181020</li>\n<li>prepare cmake project:<br>\nCMakeLists.txt:</li>\n</ol>\n<pre><code>cmake_minimum_required(VERSION 3.12 FATAL_ERROR)\nproject(TorchBug LANGUAGES CXX CUDA VERSION 0.0.1)\nfind_package(Torch REQUIRED)\nadd_executable(matmulbug matmulbug.cpp matmul.cu)\ntarget_include_directories(matmulbug PRIVATE ${CMAKE_CUDA_TOOLKIT_INCLUDE_DIRECTORIES})\nset_property(TARGET matmulbug PROPERTY CXX_STANDARD 11)\nset_target_properties(matmulbug PROPERTIES CUDA_SEPARABLE_COMPILATION ON)\ntarget_link_libraries(matmulbug ${TORCH_LIBRARIES})\n</code></pre>\n<p>matmul.h:</p>\n<div class=\"highlight highlight-source-c++\"><pre>#<span class=\"pl-k\">pragma</span> once\n<span class=\"pl-k\">void</span> <span class=\"pl-en\">matmul2</span>(<span class=\"pl-k\">float</span> *C, <span class=\"pl-k\">float</span> *A, <span class=\"pl-k\">float</span> *B, <span class=\"pl-k\">int</span> wA, <span class=\"pl-k\">int</span> wB);</pre></div>\n<p>matmul.cu:</p>\n<div class=\"highlight highlight-source-c++\"><pre>#<span class=\"pl-k\">include</span> <span class=\"pl-s\"><span class=\"pl-pds\">&lt;</span>stdio.h<span class=\"pl-pds\">&gt;</span></span>\n#<span class=\"pl-k\">include</span> <span class=\"pl-s\"><span class=\"pl-pds\">&lt;</span>assert.h<span class=\"pl-pds\">&gt;</span></span>\n#<span class=\"pl-k\">include</span> <span class=\"pl-s\"><span class=\"pl-pds\">&lt;</span>cuda_runtime.h<span class=\"pl-pds\">&gt;</span></span>\n#<span class=\"pl-k\">include</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>matmul.h<span class=\"pl-pds\">\"</span></span>\n\n<span class=\"pl-k\">const</span> <span class=\"pl-k\">int</span> BLOCK_SIZE = <span class=\"pl-c1\">15</span>;\n__global__ <span class=\"pl-k\">void</span> <span class=\"pl-en\">MatrixMulCUDA</span>(<span class=\"pl-k\">float</span> *C, <span class=\"pl-k\">float</span> *A,\n    <span class=\"pl-k\">float</span> *B, <span class=\"pl-k\">int</span> wA,\n    <span class=\"pl-k\">int</span> wB) {\n  <span class=\"pl-c\"><span class=\"pl-c\">//</span> Block index</span>\n  <span class=\"pl-k\">int</span> bx = blockIdx.<span class=\"pl-smi\">x</span>;\n  <span class=\"pl-k\">int</span> by = blockIdx.<span class=\"pl-smi\">y</span>;\n  <span class=\"pl-k\">int</span> tx = threadIdx.<span class=\"pl-smi\">x</span>;\n  <span class=\"pl-k\">int</span> ty = threadIdx.<span class=\"pl-smi\">y</span>;\n  <span class=\"pl-k\">int</span> aBegin = wA * BLOCK_SIZE * by;\n  <span class=\"pl-k\">int</span> aEnd   = aBegin + wA - <span class=\"pl-c1\">1</span>;\n  <span class=\"pl-k\">int</span> aStep  = BLOCK_SIZE;\n  <span class=\"pl-k\">int</span> bBegin = BLOCK_SIZE * bx;\n  <span class=\"pl-k\">int</span> bStep  = BLOCK_SIZE * wB;\n  <span class=\"pl-k\">float</span> Csub = <span class=\"pl-c1\">0</span>;\n  <span class=\"pl-k\">for</span> (<span class=\"pl-k\">int</span> a = aBegin, b = bBegin;\n       a &lt;= aEnd;\n       a += aStep, b += bStep) {\n    __shared__ <span class=\"pl-k\">float</span> As[BLOCK_SIZE][BLOCK_SIZE];\n\n    __shared__ <span class=\"pl-k\">float</span> Bs[BLOCK_SIZE][BLOCK_SIZE];\n\n    As[ty][tx] = A[a + wA * ty + tx];\n    Bs[ty][tx] = B[b + wB * ty + tx];\n    <span class=\"pl-c1\">__syncthreads</span>();\n#<span class=\"pl-k\">pragma</span> unroll\n\n    <span class=\"pl-k\">for</span> (<span class=\"pl-k\">int</span> k = <span class=\"pl-c1\">0</span>; k &lt; BLOCK_SIZE; ++k) {\n      Csub += As[ty][k] * Bs[k][tx];\n    }\n    <span class=\"pl-c1\">__syncthreads</span>();\n  }\n  <span class=\"pl-k\">int</span> c = wB * BLOCK_SIZE * by + BLOCK_SIZE * bx;\n  C[c + wB * ty + tx] = Csub;\n}\n<span class=\"pl-k\">void</span> <span class=\"pl-en\">matmul2</span>(<span class=\"pl-k\">float</span> *C, <span class=\"pl-k\">float</span> *A, <span class=\"pl-k\">float</span> *B, <span class=\"pl-k\">int</span> wA, <span class=\"pl-k\">int</span> wB){\n  <span class=\"pl-c1\">printf</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>hello world<span class=\"pl-pds\">\"</span></span>); \n  <span class=\"pl-k\">return</span>;\n}</pre></div>\n<p>matmulbug.cpp:</p>\n<div class=\"highlight highlight-source-c++\"><pre>#<span class=\"pl-k\">include</span> <span class=\"pl-s\"><span class=\"pl-pds\">&lt;</span>torch/torch.h<span class=\"pl-pds\">&gt;</span></span>\n#<span class=\"pl-k\">include</span> <span class=\"pl-s\"><span class=\"pl-pds\">&lt;</span>iostream<span class=\"pl-pds\">&gt;</span></span>\n#<span class=\"pl-k\">include</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>matmul.h<span class=\"pl-pds\">\"</span></span>\n<span class=\"pl-k\">int</span> <span class=\"pl-en\">main</span>() {\n  at::Tensor tensor = <span class=\"pl-c1\">torch::rand</span>({<span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">3</span>});\n  std::cout &lt;&lt; tensor &lt;&lt; std::endl;\n  <span class=\"pl-c1\">matmul2</span>(<span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">0</span>);\n}</pre></div>\n<p>then run cmake to build.</p>\n<h2>Expected behavior</h2>\n<p>build successful.</p>\n<h2>Environment</h2>\n<p>Ubuntu 18.04<br>\ncmake 3.12<br>\ngcc 7.3.0<br>\ncuda 9.0<br>\nlibtorch 1.0.0.dev20181020</p>", "body_text": "\ud83d\udc1b Bug\nIf I want to use libtorch in my cmake project, I got an error:\n[build] [ 94%] Linking CUDA device code CMakeFiles/xxx.dir/cmake_device_link.o\n[build] nvcc fatal   : Unknown option 'Wl,--no-as-needed,/home/xxx/library/libtorch/lib/libcaffe2.so'\n\nTo Reproduce\nSteps to reproduce the behavior:\n\ndownload nightly libtorch 1.0.0.dev20181020\nprepare cmake project:\nCMakeLists.txt:\n\ncmake_minimum_required(VERSION 3.12 FATAL_ERROR)\nproject(TorchBug LANGUAGES CXX CUDA VERSION 0.0.1)\nfind_package(Torch REQUIRED)\nadd_executable(matmulbug matmulbug.cpp matmul.cu)\ntarget_include_directories(matmulbug PRIVATE ${CMAKE_CUDA_TOOLKIT_INCLUDE_DIRECTORIES})\nset_property(TARGET matmulbug PROPERTY CXX_STANDARD 11)\nset_target_properties(matmulbug PROPERTIES CUDA_SEPARABLE_COMPILATION ON)\ntarget_link_libraries(matmulbug ${TORCH_LIBRARIES})\n\nmatmul.h:\n#pragma once\nvoid matmul2(float *C, float *A, float *B, int wA, int wB);\nmatmul.cu:\n#include <stdio.h>\n#include <assert.h>\n#include <cuda_runtime.h>\n#include \"matmul.h\"\n\nconst int BLOCK_SIZE = 15;\n__global__ void MatrixMulCUDA(float *C, float *A,\n    float *B, int wA,\n    int wB) {\n  // Block index\n  int bx = blockIdx.x;\n  int by = blockIdx.y;\n  int tx = threadIdx.x;\n  int ty = threadIdx.y;\n  int aBegin = wA * BLOCK_SIZE * by;\n  int aEnd   = aBegin + wA - 1;\n  int aStep  = BLOCK_SIZE;\n  int bBegin = BLOCK_SIZE * bx;\n  int bStep  = BLOCK_SIZE * wB;\n  float Csub = 0;\n  for (int a = aBegin, b = bBegin;\n       a <= aEnd;\n       a += aStep, b += bStep) {\n    __shared__ float As[BLOCK_SIZE][BLOCK_SIZE];\n\n    __shared__ float Bs[BLOCK_SIZE][BLOCK_SIZE];\n\n    As[ty][tx] = A[a + wA * ty + tx];\n    Bs[ty][tx] = B[b + wB * ty + tx];\n    __syncthreads();\n#pragma unroll\n\n    for (int k = 0; k < BLOCK_SIZE; ++k) {\n      Csub += As[ty][k] * Bs[k][tx];\n    }\n    __syncthreads();\n  }\n  int c = wB * BLOCK_SIZE * by + BLOCK_SIZE * bx;\n  C[c + wB * ty + tx] = Csub;\n}\nvoid matmul2(float *C, float *A, float *B, int wA, int wB){\n  printf(\"hello world\"); \n  return;\n}\nmatmulbug.cpp:\n#include <torch/torch.h>\n#include <iostream>\n#include \"matmul.h\"\nint main() {\n  at::Tensor tensor = torch::rand({2, 3});\n  std::cout << tensor << std::endl;\n  matmul2(0, 0, 0, 0, 0);\n}\nthen run cmake to build.\nExpected behavior\nbuild successful.\nEnvironment\nUbuntu 18.04\ncmake 3.12\ngcc 7.3.0\ncuda 9.0\nlibtorch 1.0.0.dev20181020", "body": "## \ud83d\udc1b Bug\r\nIf I want to use libtorch in my cmake project, I got an error:\r\n```\r\n[build] [ 94%] Linking CUDA device code CMakeFiles/xxx.dir/cmake_device_link.o\r\n[build] nvcc fatal   : Unknown option 'Wl,--no-as-needed,/home/xxx/library/libtorch/lib/libcaffe2.so'\r\n```\r\n\r\n## To Reproduce\r\nSteps to reproduce the behavior:\r\n1. download nightly libtorch 1.0.0.dev20181020\r\n2. prepare cmake project:\r\nCMakeLists.txt:\r\n```\r\ncmake_minimum_required(VERSION 3.12 FATAL_ERROR)\r\nproject(TorchBug LANGUAGES CXX CUDA VERSION 0.0.1)\r\nfind_package(Torch REQUIRED)\r\nadd_executable(matmulbug matmulbug.cpp matmul.cu)\r\ntarget_include_directories(matmulbug PRIVATE ${CMAKE_CUDA_TOOLKIT_INCLUDE_DIRECTORIES})\r\nset_property(TARGET matmulbug PROPERTY CXX_STANDARD 11)\r\nset_target_properties(matmulbug PROPERTIES CUDA_SEPARABLE_COMPILATION ON)\r\ntarget_link_libraries(matmulbug ${TORCH_LIBRARIES})\r\n```\r\nmatmul.h:\r\n```C++\r\n#pragma once\r\nvoid matmul2(float *C, float *A, float *B, int wA, int wB);\r\n```\r\nmatmul.cu:\r\n```C++\r\n#include <stdio.h>\r\n#include <assert.h>\r\n#include <cuda_runtime.h>\r\n#include \"matmul.h\"\r\n\r\nconst int BLOCK_SIZE = 15;\r\n__global__ void MatrixMulCUDA(float *C, float *A,\r\n    float *B, int wA,\r\n    int wB) {\r\n  // Block index\r\n  int bx = blockIdx.x;\r\n  int by = blockIdx.y;\r\n  int tx = threadIdx.x;\r\n  int ty = threadIdx.y;\r\n  int aBegin = wA * BLOCK_SIZE * by;\r\n  int aEnd   = aBegin + wA - 1;\r\n  int aStep  = BLOCK_SIZE;\r\n  int bBegin = BLOCK_SIZE * bx;\r\n  int bStep  = BLOCK_SIZE * wB;\r\n  float Csub = 0;\r\n  for (int a = aBegin, b = bBegin;\r\n       a <= aEnd;\r\n       a += aStep, b += bStep) {\r\n    __shared__ float As[BLOCK_SIZE][BLOCK_SIZE];\r\n\r\n    __shared__ float Bs[BLOCK_SIZE][BLOCK_SIZE];\r\n\r\n    As[ty][tx] = A[a + wA * ty + tx];\r\n    Bs[ty][tx] = B[b + wB * ty + tx];\r\n    __syncthreads();\r\n#pragma unroll\r\n\r\n    for (int k = 0; k < BLOCK_SIZE; ++k) {\r\n      Csub += As[ty][k] * Bs[k][tx];\r\n    }\r\n    __syncthreads();\r\n  }\r\n  int c = wB * BLOCK_SIZE * by + BLOCK_SIZE * bx;\r\n  C[c + wB * ty + tx] = Csub;\r\n}\r\nvoid matmul2(float *C, float *A, float *B, int wA, int wB){\r\n  printf(\"hello world\"); \r\n  return;\r\n}\r\n```\r\nmatmulbug.cpp:\r\n```C++\r\n#include <torch/torch.h>\r\n#include <iostream>\r\n#include \"matmul.h\"\r\nint main() {\r\n  at::Tensor tensor = torch::rand({2, 3});\r\n  std::cout << tensor << std::endl;\r\n  matmul2(0, 0, 0, 0, 0);\r\n}\r\n```\r\nthen run cmake to build.\r\n\r\n## Expected behavior\r\nbuild successful.\r\n## Environment\r\nUbuntu 18.04\r\ncmake 3.12\r\ngcc 7.3.0\r\ncuda 9.0\r\nlibtorch 1.0.0.dev20181020\r\n"}