{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/205475727", "pull_request_review_id": 140750457, "id": 205475727, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTQ3NTcyNw==", "diff_hunk": "@@ -97,32 +101,83 @@ struct THTensor\n         delete this;\n       }\n     }\n+\n+    friend const int64_t* THTensor_getSizePtr(THTensor* tensor);\n+    friend const int64_t* THTensor_getStridePtr(THTensor* tensor);\n+    friend void THTensor_resizeDim(THTensor* tensor, int64_t ndim);\n+    friend void THTensor_setSizesAndStrides(THTensor* tensor, std::vector<int64_t>&& new_size, std::vector<int64_t>&& new_stride);\n+    friend void THTensor_setSizeAtDim(THTensor* tensor, int dim, int64_t new_size);\n+    friend void THTensor_setStrideAtDim(THTensor* tensor, int dim, int64_t new_stride);\n+    friend void THTensor_setStorageOffset(THTensor* tensor, ptrdiff_t storage_offset);", "path": "aten/src/TH/THTensor.hpp", "position": null, "original_position": 68, "commit_id": "f7e8b169081a165590e83a88c9d7c4bfbe6c0342", "original_commit_id": "1298c731b051ba3bec94026978a02c6e167cc473", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "Mini-audit (I did TH only):\r\n\r\nTHTensor_resizeDim\r\n* Why isn't this in the official API? It's semantics are a bit wonky: if you reduce the dimension, we truncate trailing dimensions (in general, this will result in a non-contiguous tensor before you reset the strides); if you increase the dimension, the result used to be undefined (now, each added dimension has size and stride 1).\r\n* Call-sites:\r\n  * Narrow: the function sets sizes and strides, and reduces dim by one. We could probably replace this with `THTensor_setSizesAndStrides`\r\n  * Squeeze: the function sets sizes and strides, then reduces the dim. Replace with `THTensor_setSizesAndStrides`\r\n  * Select: the function sets sizes and strides, then reduces dim. Replace with `THTensor_setSizesAndStrides`.\r\n  * Unsqueeze: the function increases the number of dimensions by one, and then writes in the correct sizes/strides afterwards. Replace with `THTensor_setSizesAndStrides`\r\n  * Resize: the function changes the number of dimensions to the requested amount, then fills in correct sizes/strides. Replace with `THTensor_setSizesAndStrides`\r\n* Conclusion: Replace this with `THTensor_setSizesAndStrides`\r\n\r\nTHTensor_setSizesAndStrides\r\n* Why isn't this in the official API? It is a function that allows invariant breaking: you can easily set the sizes and strides so that they go out of bounds of the allocated storage, leading to a subsequent segfault. Maybe this is not a good reason and we should make it a method.\r\n* Call-sites:\r\n  * Unfold: Used to restride the tensor\r\n  * (see above for functions we probably will replace with this)\r\n\r\nTHTensor_setSizeAtDim/THTensor_setStrideAtDim\r\n* Why isn't this in the official API? Like setSizesAndStrides, it can be used to break invariants.\r\n* Call-sites:\r\n  * These two functions seem to always be used together\r\n  * It's generally used anywhere resizeDim was called: narrow, select, squeeze, unsqueeze, resize\r\n  * Transpose: Used to swap the sizes and strides at the transposed dimension\r\n  * Max/min/sum/prod/logicalAnd/logicalAny: Used as a poor mans \"expand_as\" (when ported to ATen, probably just use `expand_as` directly)\r\n\r\nTHTensor_setStorageOffset\r\n* Why isn't this in the official API? Invariant breaking. Also, it's unclear if the offset is bytes or numels (it's numels).\r\n* Call-sites:\r\n  * Narrow: for obvious reasons, though arguably set should also handle setting the storage offset as well\r\n  * SetStorageNd: Allows setting the storage offset\r\n\r\nTHTensor_stealAndSetStoragePtr\r\n* Why not? It takes a raw pointer; I want it to take a Storage RAII smart pointer so that it can't be misused.\r\n* Call-sites:\r\n  * SetStorageNd: Not actually stealing: we retain the pointer before we take it.\r\n  * ResizeNd: Used to set a fresh storage (so yes, stealing)", "created_at": "2018-07-26T14:20:00Z", "updated_at": "2018-11-23T15:48:13Z", "html_url": "https://github.com/pytorch/pytorch/pull/9821#discussion_r205475727", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/9821", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/205475727"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/9821#discussion_r205475727"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/9821"}}, "body_html": "<p>Mini-audit (I did TH only):</p>\n<p>THTensor_resizeDim</p>\n<ul>\n<li>Why isn't this in the official API? It's semantics are a bit wonky: if you reduce the dimension, we truncate trailing dimensions (in general, this will result in a non-contiguous tensor before you reset the strides); if you increase the dimension, the result used to be undefined (now, each added dimension has size and stride 1).</li>\n<li>Call-sites:\n<ul>\n<li>Narrow: the function sets sizes and strides, and reduces dim by one. We could probably replace this with <code>THTensor_setSizesAndStrides</code></li>\n<li>Squeeze: the function sets sizes and strides, then reduces the dim. Replace with <code>THTensor_setSizesAndStrides</code></li>\n<li>Select: the function sets sizes and strides, then reduces dim. Replace with <code>THTensor_setSizesAndStrides</code>.</li>\n<li>Unsqueeze: the function increases the number of dimensions by one, and then writes in the correct sizes/strides afterwards. Replace with <code>THTensor_setSizesAndStrides</code></li>\n<li>Resize: the function changes the number of dimensions to the requested amount, then fills in correct sizes/strides. Replace with <code>THTensor_setSizesAndStrides</code></li>\n</ul>\n</li>\n<li>Conclusion: Replace this with <code>THTensor_setSizesAndStrides</code></li>\n</ul>\n<p>THTensor_setSizesAndStrides</p>\n<ul>\n<li>Why isn't this in the official API? It is a function that allows invariant breaking: you can easily set the sizes and strides so that they go out of bounds of the allocated storage, leading to a subsequent segfault. Maybe this is not a good reason and we should make it a method.</li>\n<li>Call-sites:\n<ul>\n<li>Unfold: Used to restride the tensor</li>\n<li>(see above for functions we probably will replace with this)</li>\n</ul>\n</li>\n</ul>\n<p>THTensor_setSizeAtDim/THTensor_setStrideAtDim</p>\n<ul>\n<li>Why isn't this in the official API? Like setSizesAndStrides, it can be used to break invariants.</li>\n<li>Call-sites:\n<ul>\n<li>These two functions seem to always be used together</li>\n<li>It's generally used anywhere resizeDim was called: narrow, select, squeeze, unsqueeze, resize</li>\n<li>Transpose: Used to swap the sizes and strides at the transposed dimension</li>\n<li>Max/min/sum/prod/logicalAnd/logicalAny: Used as a poor mans \"expand_as\" (when ported to ATen, probably just use <code>expand_as</code> directly)</li>\n</ul>\n</li>\n</ul>\n<p>THTensor_setStorageOffset</p>\n<ul>\n<li>Why isn't this in the official API? Invariant breaking. Also, it's unclear if the offset is bytes or numels (it's numels).</li>\n<li>Call-sites:\n<ul>\n<li>Narrow: for obvious reasons, though arguably set should also handle setting the storage offset as well</li>\n<li>SetStorageNd: Allows setting the storage offset</li>\n</ul>\n</li>\n</ul>\n<p>THTensor_stealAndSetStoragePtr</p>\n<ul>\n<li>Why not? It takes a raw pointer; I want it to take a Storage RAII smart pointer so that it can't be misused.</li>\n<li>Call-sites:\n<ul>\n<li>SetStorageNd: Not actually stealing: we retain the pointer before we take it.</li>\n<li>ResizeNd: Used to set a fresh storage (so yes, stealing)</li>\n</ul>\n</li>\n</ul>", "body_text": "Mini-audit (I did TH only):\nTHTensor_resizeDim\n\nWhy isn't this in the official API? It's semantics are a bit wonky: if you reduce the dimension, we truncate trailing dimensions (in general, this will result in a non-contiguous tensor before you reset the strides); if you increase the dimension, the result used to be undefined (now, each added dimension has size and stride 1).\nCall-sites:\n\nNarrow: the function sets sizes and strides, and reduces dim by one. We could probably replace this with THTensor_setSizesAndStrides\nSqueeze: the function sets sizes and strides, then reduces the dim. Replace with THTensor_setSizesAndStrides\nSelect: the function sets sizes and strides, then reduces dim. Replace with THTensor_setSizesAndStrides.\nUnsqueeze: the function increases the number of dimensions by one, and then writes in the correct sizes/strides afterwards. Replace with THTensor_setSizesAndStrides\nResize: the function changes the number of dimensions to the requested amount, then fills in correct sizes/strides. Replace with THTensor_setSizesAndStrides\n\n\nConclusion: Replace this with THTensor_setSizesAndStrides\n\nTHTensor_setSizesAndStrides\n\nWhy isn't this in the official API? It is a function that allows invariant breaking: you can easily set the sizes and strides so that they go out of bounds of the allocated storage, leading to a subsequent segfault. Maybe this is not a good reason and we should make it a method.\nCall-sites:\n\nUnfold: Used to restride the tensor\n(see above for functions we probably will replace with this)\n\n\n\nTHTensor_setSizeAtDim/THTensor_setStrideAtDim\n\nWhy isn't this in the official API? Like setSizesAndStrides, it can be used to break invariants.\nCall-sites:\n\nThese two functions seem to always be used together\nIt's generally used anywhere resizeDim was called: narrow, select, squeeze, unsqueeze, resize\nTranspose: Used to swap the sizes and strides at the transposed dimension\nMax/min/sum/prod/logicalAnd/logicalAny: Used as a poor mans \"expand_as\" (when ported to ATen, probably just use expand_as directly)\n\n\n\nTHTensor_setStorageOffset\n\nWhy isn't this in the official API? Invariant breaking. Also, it's unclear if the offset is bytes or numels (it's numels).\nCall-sites:\n\nNarrow: for obvious reasons, though arguably set should also handle setting the storage offset as well\nSetStorageNd: Allows setting the storage offset\n\n\n\nTHTensor_stealAndSetStoragePtr\n\nWhy not? It takes a raw pointer; I want it to take a Storage RAII smart pointer so that it can't be misused.\nCall-sites:\n\nSetStorageNd: Not actually stealing: we retain the pointer before we take it.\nResizeNd: Used to set a fresh storage (so yes, stealing)", "in_reply_to_id": 205168651}