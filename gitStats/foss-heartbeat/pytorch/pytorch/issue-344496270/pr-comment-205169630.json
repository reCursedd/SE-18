{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/205169630", "pull_request_review_id": 140375140, "id": 205169630, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTE2OTYzMA==", "diff_hunk": "@@ -97,32 +101,83 @@ struct THTensor\n         delete this;\n       }\n     }\n+\n+    friend const int64_t* THTensor_getSizePtr(THTensor* tensor);\n+    friend const int64_t* THTensor_getStridePtr(THTensor* tensor);\n+    friend void THTensor_resizeDim(THTensor* tensor, int64_t ndim);\n+    friend void THTensor_setSizesAndStrides(THTensor* tensor, std::vector<int64_t>&& new_size, std::vector<int64_t>&& new_stride);\n+    friend void THTensor_setSizeAtDim(THTensor* tensor, int dim, int64_t new_size);\n+    friend void THTensor_setStrideAtDim(THTensor* tensor, int dim, int64_t new_stride);\n+    friend void THTensor_setStorageOffset(THTensor* tensor, ptrdiff_t storage_offset);\n+    friend THStorage* THTensor_getStoragePtr(const THTensor* tensor);\n+    friend void THTensor_stealAndSetStoragePtr(THTensor* tensor, THStorage* storage);\n };\n \n #include \"generic/THTensorFastGetSet.hpp\"\n #include \"THGenerateAllTypes.h\"\n \n-inline int64_t* THTensor_getSizePtr(THTensor* tensor) {\n+inline const int64_t* THTensor_getSizePtr(THTensor* tensor) {\n   return tensor->sizes_.data();\n }\n \n-inline int64_t* THTensor_getStridePtr(THTensor* tensor) {\n+inline const int64_t* THTensor_getStridePtr(THTensor* tensor) {\n   return tensor->strides_.data();\n }\n \n+// NB: This is *truly* a resize; calling code (e.g., squeeze)\n+// assumes that old values are preserved\n+// TODO: Get rid of this function; it's a bit inefficient from\n+// a calculating cached numels perspective.\n inline void THTensor_resizeDim(THTensor* tensor, int64_t ndim) {\n-  // NB: This is *truly* a resize; calling code (e.g., squeeze)\n-  // assumes that old values are preserved\n-  tensor->sizes_.resize(ndim);\n-  tensor->strides_.resize(ndim);\n+  AT_ASSERT(ndim >= 0);\n+  if (ndim < static_cast<int64_t>(tensor->sizes_.size())) {\n+    if (tensor->numel_ != 0) {\n+      for (int64_t i = static_cast<int64_t>(tensor->sizes_.size()) - 1; i >= ndim; i--) {", "path": "aten/src/TH/THTensor.hpp", "position": null, "original_position": 98, "commit_id": "f7e8b169081a165590e83a88c9d7c4bfbe6c0342", "original_commit_id": "1298c731b051ba3bec94026978a02c6e167cc473", "user": {"login": "gchanan", "id": 3768583, "node_id": "MDQ6VXNlcjM3Njg1ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3768583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gchanan", "html_url": "https://github.com/gchanan", "followers_url": "https://api.github.com/users/gchanan/followers", "following_url": "https://api.github.com/users/gchanan/following{/other_user}", "gists_url": "https://api.github.com/users/gchanan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gchanan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gchanan/subscriptions", "organizations_url": "https://api.github.com/users/gchanan/orgs", "repos_url": "https://api.github.com/users/gchanan/repos", "events_url": "https://api.github.com/users/gchanan/events{/privacy}", "received_events_url": "https://api.github.com/users/gchanan/received_events", "type": "User", "site_admin": false}, "body": "I'd just unify these two cases; there's no guarantee the divide strategy is better than the multiply.", "created_at": "2018-07-25T16:05:14Z", "updated_at": "2018-11-23T15:48:05Z", "html_url": "https://github.com/pytorch/pytorch/pull/9821#discussion_r205169630", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/9821", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/205169630"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/9821#discussion_r205169630"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/9821"}}, "body_html": "<p>I'd just unify these two cases; there's no guarantee the divide strategy is better than the multiply.</p>", "body_text": "I'd just unify these two cases; there's no guarantee the divide strategy is better than the multiply."}