{"url": "https://api.github.com/repos/pytorch/pytorch/issues/11198", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/11198/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/11198/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/11198/events", "html_url": "https://github.com/pytorch/pytorch/pull/11198", "id": 356399895, "node_id": "MDExOlB1bGxSZXF1ZXN0MjEyNjcxMTA0", "number": 11198, "title": "Use custom hcc/HIP, purge hcSPARSE", "user": {"login": "iotamudelta", "id": 12565466, "node_id": "MDQ6VXNlcjEyNTY1NDY2", "avatar_url": "https://avatars2.githubusercontent.com/u/12565466?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iotamudelta", "html_url": "https://github.com/iotamudelta", "followers_url": "https://api.github.com/users/iotamudelta/followers", "following_url": "https://api.github.com/users/iotamudelta/following{/other_user}", "gists_url": "https://api.github.com/users/iotamudelta/gists{/gist_id}", "starred_url": "https://api.github.com/users/iotamudelta/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iotamudelta/subscriptions", "organizations_url": "https://api.github.com/users/iotamudelta/orgs", "repos_url": "https://api.github.com/users/iotamudelta/repos", "events_url": "https://api.github.com/users/iotamudelta/events{/privacy}", "received_events_url": "https://api.github.com/users/iotamudelta/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2018-09-03T08:10:34Z", "updated_at": "2018-11-23T15:50:33Z", "closed_at": "2018-09-07T02:39:24Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/11198", "html_url": "https://github.com/pytorch/pytorch/pull/11198", "diff_url": "https://github.com/pytorch/pytorch/pull/11198.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/11198.patch"}, "body_html": "<ul>\n<li>purge hcSPARSE now that rocSPARSE is available</li>\n<li>integrate a custom hcc and HIP</li>\n<li>hcc brings two important compiler fixes (fixes hundreds of unit tests)</li>\n<li>HIP brings a smart dispatcher that allows us to avoid a lot of static_casts (we haven't yet removed the automatic static_casts but this catches some occurrences the script did not catch)</li>\n<li>mark 5 unit tests skipping that have regressed w/ the new hcc (we don't know yet what is at fault)</li>\n<li>optimize bitonic sort - the comparator is always an empty struct - therefore passing it by value saves at least 3 bytes. It also removes an ambiguity around passing references to <code>__global__</code> functions</li>\n</ul>", "body_text": "purge hcSPARSE now that rocSPARSE is available\nintegrate a custom hcc and HIP\nhcc brings two important compiler fixes (fixes hundreds of unit tests)\nHIP brings a smart dispatcher that allows us to avoid a lot of static_casts (we haven't yet removed the automatic static_casts but this catches some occurrences the script did not catch)\nmark 5 unit tests skipping that have regressed w/ the new hcc (we don't know yet what is at fault)\noptimize bitonic sort - the comparator is always an empty struct - therefore passing it by value saves at least 3 bytes. It also removes an ambiguity around passing references to __global__ functions", "body": "* purge hcSPARSE now that rocSPARSE is available\r\n* integrate a custom hcc and HIP\r\n* hcc brings two important compiler fixes (fixes hundreds of unit tests)\r\n* HIP brings a smart dispatcher that allows us to avoid a lot of static_casts (we haven't yet removed the automatic static_casts but this catches some occurrences the script did not catch)\r\n* mark 5 unit tests skipping that have regressed w/ the new hcc (we don't know yet what is at fault)\r\n* optimize bitonic sort - the comparator is always an empty struct - therefore passing it by value saves at least 3 bytes. It also removes an ambiguity around passing references to `__global__` functions\r\n\r\n"}