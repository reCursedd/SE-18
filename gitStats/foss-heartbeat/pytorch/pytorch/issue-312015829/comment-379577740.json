{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/379577740", "html_url": "https://github.com/pytorch/pytorch/issues/6351#issuecomment-379577740", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/6351", "id": 379577740, "node_id": "MDEyOklzc3VlQ29tbWVudDM3OTU3Nzc0MA==", "user": {"login": "lvdmaaten", "id": 1168046, "node_id": "MDQ6VXNlcjExNjgwNDY=", "avatar_url": "https://avatars0.githubusercontent.com/u/1168046?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lvdmaaten", "html_url": "https://github.com/lvdmaaten", "followers_url": "https://api.github.com/users/lvdmaaten/followers", "following_url": "https://api.github.com/users/lvdmaaten/following{/other_user}", "gists_url": "https://api.github.com/users/lvdmaaten/gists{/gist_id}", "starred_url": "https://api.github.com/users/lvdmaaten/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lvdmaaten/subscriptions", "organizations_url": "https://api.github.com/users/lvdmaaten/orgs", "repos_url": "https://api.github.com/users/lvdmaaten/repos", "events_url": "https://api.github.com/users/lvdmaaten/events{/privacy}", "received_events_url": "https://api.github.com/users/lvdmaaten/received_events", "type": "User", "site_admin": false}, "created_at": "2018-04-08T19:56:16Z", "updated_at": "2018-04-08T19:56:16Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=15841449\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ngimel\">@ngimel</a> That logic seems wrong to me. Only benchmarking deterministic implementations does not lead to deterministic behavior: two different implementations are very likely to produce different results, even if those implementations themselves are deterministic. (And which implementation is selected by the benchmarking may vary per run, platform, etc.)</p>\n<p>Afaict the only way to produce fully deterministic behavior is by not doing any benchmarking when <code>cudnn.deterministic=True</code>. If also <code>cudnn.benchmark=True</code>, the user should be warned that benchmarking is not possible in a deterministic implementation.</p>", "body_text": "@ngimel That logic seems wrong to me. Only benchmarking deterministic implementations does not lead to deterministic behavior: two different implementations are very likely to produce different results, even if those implementations themselves are deterministic. (And which implementation is selected by the benchmarking may vary per run, platform, etc.)\nAfaict the only way to produce fully deterministic behavior is by not doing any benchmarking when cudnn.deterministic=True. If also cudnn.benchmark=True, the user should be warned that benchmarking is not possible in a deterministic implementation.", "body": "@ngimel That logic seems wrong to me. Only benchmarking deterministic implementations does not lead to deterministic behavior: two different implementations are very likely to produce different results, even if those implementations themselves are deterministic. (And which implementation is selected by the benchmarking may vary per run, platform, etc.)\r\n\r\nAfaict the only way to produce fully deterministic behavior is by not doing any benchmarking when `cudnn.deterministic=True`. If also `cudnn.benchmark=True`, the user should be warned that benchmarking is not possible in a deterministic implementation."}