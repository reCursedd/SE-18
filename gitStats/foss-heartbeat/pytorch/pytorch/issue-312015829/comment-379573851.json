{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/379573851", "html_url": "https://github.com/pytorch/pytorch/issues/6351#issuecomment-379573851", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/6351", "id": 379573851, "node_id": "MDEyOklzc3VlQ29tbWVudDM3OTU3Mzg1MQ==", "user": {"login": "lvdmaaten", "id": 1168046, "node_id": "MDQ6VXNlcjExNjgwNDY=", "avatar_url": "https://avatars0.githubusercontent.com/u/1168046?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lvdmaaten", "html_url": "https://github.com/lvdmaaten", "followers_url": "https://api.github.com/users/lvdmaaten/followers", "following_url": "https://api.github.com/users/lvdmaaten/following{/other_user}", "gists_url": "https://api.github.com/users/lvdmaaten/gists{/gist_id}", "starred_url": "https://api.github.com/users/lvdmaaten/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lvdmaaten/subscriptions", "organizations_url": "https://api.github.com/users/lvdmaaten/orgs", "repos_url": "https://api.github.com/users/lvdmaaten/repos", "events_url": "https://api.github.com/users/lvdmaaten/events{/privacy}", "received_events_url": "https://api.github.com/users/lvdmaaten/received_events", "type": "User", "site_admin": false}, "created_at": "2018-04-08T19:01:48Z", "updated_at": "2018-04-08T19:01:48Z", "author_association": "NONE", "body_html": "<p>I haven't checked the implementation, but what I do know is that currently the outputs of the modules are non-deterministic when <code>benchmark = True</code>, even though <code>deterministic = True</code>. (Which makes sense as the implementations being used under the hood may vary because of the benchmarking.) That seems undesired: it is promising the user deterministic behavior, but not providing it.</p>", "body_text": "I haven't checked the implementation, but what I do know is that currently the outputs of the modules are non-deterministic when benchmark = True, even though deterministic = True. (Which makes sense as the implementations being used under the hood may vary because of the benchmarking.) That seems undesired: it is promising the user deterministic behavior, but not providing it.", "body": "I haven't checked the implementation, but what I do know is that currently the outputs of the modules are non-deterministic when `benchmark = True`, even though `deterministic = True`. (Which makes sense as the implementations being used under the hood may vary because of the benchmarking.) That seems undesired: it is promising the user deterministic behavior, but not providing it."}