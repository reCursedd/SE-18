{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/419751947", "html_url": "https://github.com/pytorch/pytorch/issues/11427#issuecomment-419751947", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/11427", "id": 419751947, "node_id": "MDEyOklzc3VlQ29tbWVudDQxOTc1MTk0Nw==", "user": {"login": "ghost", "id": 10137, "node_id": "MDQ6VXNlcjEwMTM3", "avatar_url": "https://avatars3.githubusercontent.com/u/10137?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ghost", "html_url": "https://github.com/ghost", "followers_url": "https://api.github.com/users/ghost/followers", "following_url": "https://api.github.com/users/ghost/following{/other_user}", "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}", "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ghost/subscriptions", "organizations_url": "https://api.github.com/users/ghost/orgs", "repos_url": "https://api.github.com/users/ghost/repos", "events_url": "https://api.github.com/users/ghost/events{/privacy}", "received_events_url": "https://api.github.com/users/ghost/received_events", "type": "User", "site_admin": false}, "created_at": "2018-09-09T23:10:02Z", "updated_at": "2018-09-09T23:10:02Z", "author_association": "NONE", "body_html": "<p>This also happens with</p>\n<pre><code>import torch\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\ni = torch.FloatTensor(3, device='cuda') # or torch.Tensor(...)\n#i = i.to(device)\nassert i.is_cuda\n</code></pre>\n<p>Uncommenting passes the assertion.</p>", "body_text": "This also happens with\nimport torch\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\ni = torch.FloatTensor(3, device='cuda') # or torch.Tensor(...)\n#i = i.to(device)\nassert i.is_cuda\n\nUncommenting passes the assertion.", "body": "This also happens with \r\n```\r\nimport torch\r\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\r\ni = torch.FloatTensor(3, device='cuda') # or torch.Tensor(...)\r\n#i = i.to(device)\r\nassert i.is_cuda\r\n```\r\n\r\nUncommenting passes the assertion.\r\n"}