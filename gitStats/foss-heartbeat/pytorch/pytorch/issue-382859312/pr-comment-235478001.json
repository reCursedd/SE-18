{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/235478001", "pull_request_review_id": 177353863, "id": 235478001, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzNTQ3ODAwMQ==", "diff_hunk": "@@ -329,37 +269,62 @@ CUDAStreamInternals* CUDAStream_internals(CUDAStream s) {\n \n CUDAStream CUDAStream_fromInternals(const CUDAStreamInternals* ptr) {\n   return CUDAStream(CUDAStream::UNCHECKED,\n-                    Stream(c10::Device(DeviceType::CUDA, CUDAStream_device(ptr)),\n+                    Stream(c10::Device(DeviceType::CUDA, ptr->device_index),\n                            CUDAStream_getStreamId(ptr)));\n }\n \n } // anonymous namespace\n \n cudaStream_t CUDAStream::stream() const {\n-  return CUDAStream_stream(CUDAStream_internals(*this));\n+  auto ptr = CUDAStream_internals(*this);\n+  AT_ASSERT(ptr);\n+  return ptr->stream;\n }\n \n-/* Streams */\n+// Returns a stream from the requested pool\n+// Note: when called the first time on a device, this will create the\n+// stream pools for that device.\n CUDAStream getStreamFromPool(\n   const bool isHighPriority\n-, int64_t device) {\n-  return CUDAStream_fromInternals(CUDAStream_getStreamFromPool(isHighPriority, device));\n+, DeviceIndex device_index) {\n+  initCUDAStreamsOnce();\n+  if (device_index == -1) device_index = current_device();\n+  check_gpu(device_index);\n+\n+  // Initializes the stream pools (once)\n+  std::call_once(device_flags[device_index], initDeviceStreamState, device_index);\n+\n+  if (isHighPriority) {\n+    const auto idx = get_idx(high_priority_counters[device_index]);\n+    return CUDAStream_fromInternals(&high_priority_streams[device_index][idx]);\n+  }\n+\n+  const auto idx = get_idx(low_priority_counters[device_index]);\n+  return CUDAStream_fromInternals(&low_priority_streams[device_index][idx]);\n }\n \n-CUDAStream getDefaultCUDAStream(int64_t device) {\n-  return CUDAStream_fromInternals(CUDAStream_getDefaultStream(device));\n+CUDAStream getDefaultCUDAStream(DeviceIndex device_index) {\n+  initCUDAStreamsOnce();\n+  if (device_index == -1) device_index = current_device();\n+  check_gpu(device_index);\n+  return CUDAStream_fromInternals(&default_streams[device_index]);\n }\n-CUDAStream getCurrentCUDAStream(int64_t device) {\n-  return CUDAStream_fromInternals(CUDAStream_getCurrentStream(device));\n+CUDAStream getCurrentCUDAStream(DeviceIndex device_index) {\n+  initCUDAStreamsOnce();\n+  if (device_index == -1) device_index = current_device();\n+  check_gpu(device_index);\n+  return CUDAStream_fromInternals(current_streams[device_index]);\n }\n \n void setCurrentCUDAStream(CUDAStream stream) {", "path": "aten/src/ATen/cuda/CUDAStream.cpp", "position": 197, "original_position": 197, "commit_id": "20c6bda20f05615e36211847ec98ac46b1a848e6", "original_commit_id": "e33d89625ddb38dc847a7c53eb640341c445b351", "user": {"login": "mruberry", "id": 38511765, "node_id": "MDQ6VXNlcjM4NTExNzY1", "avatar_url": "https://avatars3.githubusercontent.com/u/38511765?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mruberry", "html_url": "https://github.com/mruberry", "followers_url": "https://api.github.com/users/mruberry/followers", "following_url": "https://api.github.com/users/mruberry/following{/other_user}", "gists_url": "https://api.github.com/users/mruberry/gists{/gist_id}", "starred_url": "https://api.github.com/users/mruberry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mruberry/subscriptions", "organizations_url": "https://api.github.com/users/mruberry/orgs", "repos_url": "https://api.github.com/users/mruberry/repos", "events_url": "https://api.github.com/users/mruberry/events{/privacy}", "received_events_url": "https://api.github.com/users/mruberry/received_events", "type": "User", "site_admin": false}, "body": "Setting a stream also needs to call initCUDAStreamsOnce(). This is a bug I introduced in my original change (I put a fix in the streaming backwards PR, but that's in limbo for months while other changes are made). Without calling this it's possible to acquire a stream on one thread, pass that stream to another thread, and then try to set the stream on the other thread where the streams are not initialized -> error.", "created_at": "2018-11-21T17:25:13Z", "updated_at": "2018-11-23T15:55:20Z", "html_url": "https://github.com/pytorch/pytorch/pull/14247#discussion_r235478001", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/14247", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/235478001"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/14247#discussion_r235478001"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/14247"}}, "body_html": "<p>Setting a stream also needs to call initCUDAStreamsOnce(). This is a bug I introduced in my original change (I put a fix in the streaming backwards PR, but that's in limbo for months while other changes are made). Without calling this it's possible to acquire a stream on one thread, pass that stream to another thread, and then try to set the stream on the other thread where the streams are not initialized -&gt; error.</p>", "body_text": "Setting a stream also needs to call initCUDAStreamsOnce(). This is a bug I introduced in my original change (I put a fix in the streaming backwards PR, but that's in limbo for months while other changes are made). Without calling this it's possible to acquire a stream on one thread, pass that stream to another thread, and then try to set the stream on the other thread where the streams are not initialized -> error."}