{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/174562803", "pull_request_review_id": 103942563, "id": 174562803, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NDU2MjgwMw==", "diff_hunk": "@@ -140,8 +140,16 @@ __device__ int binarySearchForMultinomial(T* dist,\n \n   if (start == size) {\n     // No probability mass or precision problems; just return the\n-    // first element\n-    start = 0;\n+    // first non-zero element by setting start to size-1 here,\n+    // the code below will move it to the last non-zero probability\n+    // this actually can happen when the random number is 1\n+    // (github pytorch issue #4858).\n+    if (size > 0) {", "path": "aten/src/THC/THCTensorRandom.cuh", "position": null, "original_position": 10, "commit_id": "adefab083a85fa08926754c8b2ca9bccb123f8c6", "original_commit_id": "234bf79aba8877e4c0531681a276e38a4f64cfd1", "user": {"login": "zou3519", "id": 5652049, "node_id": "MDQ6VXNlcjU2NTIwNDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/5652049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zou3519", "html_url": "https://github.com/zou3519", "followers_url": "https://api.github.com/users/zou3519/followers", "following_url": "https://api.github.com/users/zou3519/following{/other_user}", "gists_url": "https://api.github.com/users/zou3519/gists{/gist_id}", "starred_url": "https://api.github.com/users/zou3519/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zou3519/subscriptions", "organizations_url": "https://api.github.com/users/zou3519/orgs", "repos_url": "https://api.github.com/users/zou3519/repos", "events_url": "https://api.github.com/users/zou3519/events{/privacy}", "received_events_url": "https://api.github.com/users/zou3519/received_events", "type": "User", "site_admin": false}, "body": "Yes. The problem I was thinking about was with empty tensors that contain no elements but have dimension 1:\r\n```\r\nIn [10]: import torch\r\n\r\nIn [11]: x = torch.Tensor().cuda()\r\n\r\nIn [12]: x.dim()\r\nOut[12]: 1\r\n\r\nIn [13]: torch.multinomial(x, 1)\r\n---------------------------------------------------------------------------\r\nRuntimeError                              Traceback (most recent call last)\r\n<ipython-input-13-6732e20c3568> in <module>()\r\n----> 1 torch.multinomial(x, 1)\r\n\r\nRuntimeError: invalid argument 2: prob_dist must be 1 or 2 dim at /private/home/rzou/p\r\nytorch/pytorch/aten/src/THC/generic/THCTensorRandom.cu:142\r\n```\r\nBut I guess that isn't a problem (this error message should be fixed but that can happen another time). At any rate the size check doesn't need to happen inside the kernel.", "created_at": "2018-03-14T18:22:08Z", "updated_at": "2018-11-23T15:40:44Z", "html_url": "https://github.com/pytorch/pytorch/pull/5774#discussion_r174562803", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/5774", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/174562803"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/5774#discussion_r174562803"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/5774"}}, "body_html": "<p>Yes. The problem I was thinking about was with empty tensors that contain no elements but have dimension 1:</p>\n<pre><code>In [10]: import torch\n\nIn [11]: x = torch.Tensor().cuda()\n\nIn [12]: x.dim()\nOut[12]: 1\n\nIn [13]: torch.multinomial(x, 1)\n---------------------------------------------------------------------------\nRuntimeError                              Traceback (most recent call last)\n&lt;ipython-input-13-6732e20c3568&gt; in &lt;module&gt;()\n----&gt; 1 torch.multinomial(x, 1)\n\nRuntimeError: invalid argument 2: prob_dist must be 1 or 2 dim at /private/home/rzou/p\nytorch/pytorch/aten/src/THC/generic/THCTensorRandom.cu:142\n</code></pre>\n<p>But I guess that isn't a problem (this error message should be fixed but that can happen another time). At any rate the size check doesn't need to happen inside the kernel.</p>", "body_text": "Yes. The problem I was thinking about was with empty tensors that contain no elements but have dimension 1:\nIn [10]: import torch\n\nIn [11]: x = torch.Tensor().cuda()\n\nIn [12]: x.dim()\nOut[12]: 1\n\nIn [13]: torch.multinomial(x, 1)\n---------------------------------------------------------------------------\nRuntimeError                              Traceback (most recent call last)\n<ipython-input-13-6732e20c3568> in <module>()\n----> 1 torch.multinomial(x, 1)\n\nRuntimeError: invalid argument 2: prob_dist must be 1 or 2 dim at /private/home/rzou/p\nytorch/pytorch/aten/src/THC/generic/THCTensorRandom.cu:142\n\nBut I guess that isn't a problem (this error message should be fixed but that can happen another time). At any rate the size check doesn't need to happen inside the kernel.", "in_reply_to_id": 174517774}