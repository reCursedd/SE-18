{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/380161375", "html_url": "https://github.com/pytorch/pytorch/issues/6021#issuecomment-380161375", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/6021", "id": 380161375, "node_id": "MDEyOklzc3VlQ29tbWVudDM4MDE2MTM3NQ==", "user": {"login": "stefanonardo", "id": 11474759, "node_id": "MDQ6VXNlcjExNDc0NzU5", "avatar_url": "https://avatars2.githubusercontent.com/u/11474759?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stefanonardo", "html_url": "https://github.com/stefanonardo", "followers_url": "https://api.github.com/users/stefanonardo/followers", "following_url": "https://api.github.com/users/stefanonardo/following{/other_user}", "gists_url": "https://api.github.com/users/stefanonardo/gists{/gist_id}", "starred_url": "https://api.github.com/users/stefanonardo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stefanonardo/subscriptions", "organizations_url": "https://api.github.com/users/stefanonardo/orgs", "repos_url": "https://api.github.com/users/stefanonardo/repos", "events_url": "https://api.github.com/users/stefanonardo/events{/privacy}", "received_events_url": "https://api.github.com/users/stefanonardo/received_events", "type": "User", "site_admin": false}, "created_at": "2018-04-10T16:20:02Z", "updated_at": "2018-04-10T16:20:37Z", "author_association": "NONE", "body_html": "<p>If you need non-zero elements per row, this is still quite fast.</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">sparse_</span>(<span class=\"pl-smi\">tensor</span>, <span class=\"pl-smi\">sparsity</span>, <span class=\"pl-smi\">std</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">0.01</span>):\n    <span class=\"pl-k\">if</span> tensor.ndimension() <span class=\"pl-k\">!=</span> <span class=\"pl-c1\">2</span>:\n        <span class=\"pl-k\">raise</span> <span class=\"pl-c1\">ValueError</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Only tensors with 2 dimensions are supported<span class=\"pl-pds\">\"</span></span>)\n\n    rows, cols <span class=\"pl-k\">=</span> tensor.shape\n    num_zeros <span class=\"pl-k\">=</span> <span class=\"pl-c1\">round</span>(rows <span class=\"pl-k\">*</span> sparsity)\n    <span class=\"pl-k\">with</span> torch.no_grad():\n        tensor.normal_(<span class=\"pl-c1\">0</span>, std)\n        <span class=\"pl-k\">if</span> sparsity <span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">0</span>:\n            <span class=\"pl-k\">for</span> col_idx <span class=\"pl-k\">in</span> <span class=\"pl-c1\">range</span>(cols):\n                row_indices <span class=\"pl-k\">=</span> torch.randperm(rows)\n                zero_indices <span class=\"pl-k\">=</span> row_indices[:num_zeros]\n                t <span class=\"pl-k\">=</span> tensor[:, col_idx]\n                t[zero_indices] <span class=\"pl-k\">=</span> <span class=\"pl-c1\">0</span>\n        <span class=\"pl-k\">return</span> tensor</pre></div>", "body_text": "If you need non-zero elements per row, this is still quite fast.\ndef sparse_(tensor, sparsity, std=0.01):\n    if tensor.ndimension() != 2:\n        raise ValueError(\"Only tensors with 2 dimensions are supported\")\n\n    rows, cols = tensor.shape\n    num_zeros = round(rows * sparsity)\n    with torch.no_grad():\n        tensor.normal_(0, std)\n        if sparsity > 0:\n            for col_idx in range(cols):\n                row_indices = torch.randperm(rows)\n                zero_indices = row_indices[:num_zeros]\n                t = tensor[:, col_idx]\n                t[zero_indices] = 0\n        return tensor", "body": "If you need non-zero elements per row, this is still quite fast.\r\n\r\n```python\r\ndef sparse_(tensor, sparsity, std=0.01):\r\n    if tensor.ndimension() != 2:\r\n        raise ValueError(\"Only tensors with 2 dimensions are supported\")\r\n\r\n    rows, cols = tensor.shape\r\n    num_zeros = round(rows * sparsity)\r\n    with torch.no_grad():\r\n        tensor.normal_(0, std)\r\n        if sparsity > 0:\r\n            for col_idx in range(cols):\r\n                row_indices = torch.randperm(rows)\r\n                zero_indices = row_indices[:num_zeros]\r\n                t = tensor[:, col_idx]\r\n                t[zero_indices] = 0\r\n        return tensor\r\n```"}