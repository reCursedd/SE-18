{"url": "https://api.github.com/repos/pytorch/pytorch/issues/4010", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/4010/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/4010/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/4010/events", "html_url": "https://github.com/pytorch/pytorch/issues/4010", "id": 279128190, "node_id": "MDU6SXNzdWUyNzkxMjgxOTA=", "number": 4010, "title": "[proposal] Preserve zero-strides and storage size for simple element-wise ops", "user": {"login": "vadimkantorov", "id": 1041752, "node_id": "MDQ6VXNlcjEwNDE3NTI=", "avatar_url": "https://avatars0.githubusercontent.com/u/1041752?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vadimkantorov", "html_url": "https://github.com/vadimkantorov", "followers_url": "https://api.github.com/users/vadimkantorov/followers", "following_url": "https://api.github.com/users/vadimkantorov/following{/other_user}", "gists_url": "https://api.github.com/users/vadimkantorov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vadimkantorov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vadimkantorov/subscriptions", "organizations_url": "https://api.github.com/users/vadimkantorov/orgs", "repos_url": "https://api.github.com/users/vadimkantorov/repos", "events_url": "https://api.github.com/users/vadimkantorov/events{/privacy}", "received_events_url": "https://api.github.com/users/vadimkantorov/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2017-12-04T19:58:52Z", "updated_at": "2017-12-04T20:35:44Z", "closed_at": "2017-12-04T20:12:06Z", "author_association": "NONE", "body_html": "<p>This is a controversial proposal, since it would imply a change to the C-contiguity contract, but it may be useful to save memory and some computation.</p>\n<div class=\"highlight highlight-source-python\"><pre>a <span class=\"pl-k\">=</span> torch.ones(<span class=\"pl-c1\">5</span>, <span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>)\n\n<span class=\"pl-c1\">print</span>(a.expand(<span class=\"pl-c1\">len</span>(a), <span class=\"pl-c1\">10</span>, <span class=\"pl-c1\">10</span>).stride())\n<span class=\"pl-c1\">print</span>(a.expand(<span class=\"pl-c1\">len</span>(a), <span class=\"pl-c1\">10</span>, <span class=\"pl-c1\">10</span>).storage().size())\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> (1L, 0L, 0L)</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> 5L</span>\n\n<span class=\"pl-c1\">print</span>(a.expand(<span class=\"pl-c1\">len</span>(a), <span class=\"pl-c1\">10</span>, <span class=\"pl-c1\">10</span>).mul(<span class=\"pl-c1\">5</span>).stride())\n<span class=\"pl-c1\">print</span>(a.expand(<span class=\"pl-c1\">len</span>(a), <span class=\"pl-c1\">10</span>, <span class=\"pl-c1\">10</span>).mul(<span class=\"pl-c1\">5</span>).storage().size())\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> (100L, 10L, 1L)</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> 500L</span></pre></div>", "body_text": "This is a controversial proposal, since it would imply a change to the C-contiguity contract, but it may be useful to save memory and some computation.\na = torch.ones(5, 1, 1)\n\nprint(a.expand(len(a), 10, 10).stride())\nprint(a.expand(len(a), 10, 10).storage().size())\n# (1L, 0L, 0L)\n# 5L\n\nprint(a.expand(len(a), 10, 10).mul(5).stride())\nprint(a.expand(len(a), 10, 10).mul(5).storage().size())\n# (100L, 10L, 1L)\n# 500L", "body": "This is a controversial proposal, since it would imply a change to the C-contiguity contract, but it may be useful to save memory and some computation.\r\n\r\n```python\r\na = torch.ones(5, 1, 1)\r\n\r\nprint(a.expand(len(a), 10, 10).stride())\r\nprint(a.expand(len(a), 10, 10).storage().size())\r\n# (1L, 0L, 0L)\r\n# 5L\r\n\r\nprint(a.expand(len(a), 10, 10).mul(5).stride())\r\nprint(a.expand(len(a), 10, 10).mul(5).storage().size())\r\n# (100L, 10L, 1L)\r\n# 500L\r\n```"}