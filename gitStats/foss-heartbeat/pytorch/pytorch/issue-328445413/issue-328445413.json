{"url": "https://api.github.com/repos/pytorch/pytorch/issues/8027", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/8027/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/8027/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/8027/events", "html_url": "https://github.com/pytorch/pytorch/issues/8027", "id": 328445413, "node_id": "MDU6SXNzdWUzMjg0NDU0MTM=", "number": 8027, "title": "Custom kernel for 2d convolution", "user": {"login": "jmmcd", "id": 167942, "node_id": "MDQ6VXNlcjE2Nzk0Mg==", "avatar_url": "https://avatars3.githubusercontent.com/u/167942?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jmmcd", "html_url": "https://github.com/jmmcd", "followers_url": "https://api.github.com/users/jmmcd/followers", "following_url": "https://api.github.com/users/jmmcd/following{/other_user}", "gists_url": "https://api.github.com/users/jmmcd/gists{/gist_id}", "starred_url": "https://api.github.com/users/jmmcd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jmmcd/subscriptions", "organizations_url": "https://api.github.com/users/jmmcd/orgs", "repos_url": "https://api.github.com/users/jmmcd/repos", "events_url": "https://api.github.com/users/jmmcd/events{/privacy}", "received_events_url": "https://api.github.com/users/jmmcd/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-06-01T09:25:56Z", "updated_at": "2018-06-04T17:39:24Z", "closed_at": "2018-06-04T17:39:24Z", "author_association": "NONE", "body_html": "<p>I want to create a 2d convolution with a kernel like this:</p>\n<pre><code>000010000\n000010000\n100010001\n000010000\n000010000\n</code></pre>\n<p>The horizontal aspect is like dilation, I guess, but the vertical part is different. I see that dilation is available as a parameter in conv2d, but it has to be a scalar or single-element tuple (not one element per dimension), so I don't think it can do what I want here. More generally, I would like to be able to specify a kernel as an arbitrary matrix.</p>\n<p>(For reference, I added the same question on Stackoverflow, but I now guess this is really a new feature request, not a how to? request: <a href=\"https://stackoverflow.com/questions/50635736/custom-convolution-kernel-and-toroidal-convolution-in-pytorch\" rel=\"nofollow\">https://stackoverflow.com/questions/50635736/custom-convolution-kernel-and-toroidal-convolution-in-pytorch</a>)</p>", "body_text": "I want to create a 2d convolution with a kernel like this:\n000010000\n000010000\n100010001\n000010000\n000010000\n\nThe horizontal aspect is like dilation, I guess, but the vertical part is different. I see that dilation is available as a parameter in conv2d, but it has to be a scalar or single-element tuple (not one element per dimension), so I don't think it can do what I want here. More generally, I would like to be able to specify a kernel as an arbitrary matrix.\n(For reference, I added the same question on Stackoverflow, but I now guess this is really a new feature request, not a how to? request: https://stackoverflow.com/questions/50635736/custom-convolution-kernel-and-toroidal-convolution-in-pytorch)", "body": "I want to create a 2d convolution with a kernel like this:\r\n\r\n```\r\n000010000\r\n000010000\r\n100010001\r\n000010000\r\n000010000\r\n```\r\n\r\nThe horizontal aspect is like dilation, I guess, but the vertical part is different. I see that dilation is available as a parameter in conv2d, but it has to be a scalar or single-element tuple (not one element per dimension), so I don't think it can do what I want here. More generally, I would like to be able to specify a kernel as an arbitrary matrix.\r\n\r\n(For reference, I added the same question on Stackoverflow, but I now guess this is really a new feature request, not a how to? request: https://stackoverflow.com/questions/50635736/custom-convolution-kernel-and-toroidal-convolution-in-pytorch)"}