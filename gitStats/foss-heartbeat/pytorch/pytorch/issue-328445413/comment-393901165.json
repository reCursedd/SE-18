{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/393901165", "html_url": "https://github.com/pytorch/pytorch/issues/8027#issuecomment-393901165", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/8027", "id": 393901165, "node_id": "MDEyOklzc3VlQ29tbWVudDM5MzkwMTE2NQ==", "user": {"login": "fmassa", "id": 9110200, "node_id": "MDQ6VXNlcjkxMTAyMDA=", "avatar_url": "https://avatars2.githubusercontent.com/u/9110200?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fmassa", "html_url": "https://github.com/fmassa", "followers_url": "https://api.github.com/users/fmassa/followers", "following_url": "https://api.github.com/users/fmassa/following{/other_user}", "gists_url": "https://api.github.com/users/fmassa/gists{/gist_id}", "starred_url": "https://api.github.com/users/fmassa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fmassa/subscriptions", "organizations_url": "https://api.github.com/users/fmassa/orgs", "repos_url": "https://api.github.com/users/fmassa/repos", "events_url": "https://api.github.com/users/fmassa/events{/privacy}", "received_events_url": "https://api.github.com/users/fmassa/received_events", "type": "User", "site_admin": false}, "created_at": "2018-06-01T14:39:10Z", "updated_at": "2018-06-01T14:39:10Z", "author_association": "MEMBER", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=167942\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/jmmcd\">@jmmcd</a> note that an easy (but not the most efficient) way of doing this is by simply doing a masking on the convolution kernel, using the functional interface.</p>\n<p>Here is an example:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">class</span> <span class=\"pl-en\">MyConv2d</span>(<span class=\"pl-e\">nn</span>.<span class=\"pl-e\">Conv2d</span>):\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">forward</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>, <span class=\"pl-smi\">x</span>):\n        mask <span class=\"pl-k\">=</span> <span class=\"pl-c1\">self</span>.mask <span class=\"pl-c\"><span class=\"pl-c\">#</span> a matrix with the masking pattern</span>\n        mask <span class=\"pl-k\">=</span> mask[<span class=\"pl-c1\">None</span>, <span class=\"pl-c1\">None</span>] <span class=\"pl-c\"><span class=\"pl-c\">#</span> mask is 2d, unsqueeze for broadcast</span>\n        <span class=\"pl-k\">return</span> F.conv2d(x, <span class=\"pl-c1\">self</span>.weight <span class=\"pl-k\">*</span> mask, <span class=\"pl-c1\">...</span>)</pre></div>", "body_text": "@jmmcd note that an easy (but not the most efficient) way of doing this is by simply doing a masking on the convolution kernel, using the functional interface.\nHere is an example:\nclass MyConv2d(nn.Conv2d):\n    def forward(self, x):\n        mask = self.mask # a matrix with the masking pattern\n        mask = mask[None, None] # mask is 2d, unsqueeze for broadcast\n        return F.conv2d(x, self.weight * mask, ...)", "body": "@jmmcd note that an easy (but not the most efficient) way of doing this is by simply doing a masking on the convolution kernel, using the functional interface.\r\n\r\nHere is an example:\r\n\r\n```python\r\nclass MyConv2d(nn.Conv2d):\r\n    def forward(self, x):\r\n        mask = self.mask # a matrix with the masking pattern\r\n        mask = mask[None, None] # mask is 2d, unsqueeze for broadcast\r\n        return F.conv2d(x, self.weight * mask, ...)\r\n```"}