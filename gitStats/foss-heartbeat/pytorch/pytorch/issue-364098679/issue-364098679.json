{"url": "https://api.github.com/repos/pytorch/pytorch/issues/12093", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/12093/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/12093/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/12093/events", "html_url": "https://github.com/pytorch/pytorch/issues/12093", "id": 364098679, "node_id": "MDU6SXNzdWUzNjQwOTg2Nzk=", "number": 12093, "title": "Can't convert numpy to tensor", "user": {"login": "Darel13712", "id": 23708773, "node_id": "MDQ6VXNlcjIzNzA4Nzcz", "avatar_url": "https://avatars0.githubusercontent.com/u/23708773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Darel13712", "html_url": "https://github.com/Darel13712", "followers_url": "https://api.github.com/users/Darel13712/followers", "following_url": "https://api.github.com/users/Darel13712/following{/other_user}", "gists_url": "https://api.github.com/users/Darel13712/gists{/gist_id}", "starred_url": "https://api.github.com/users/Darel13712/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Darel13712/subscriptions", "organizations_url": "https://api.github.com/users/Darel13712/orgs", "repos_url": "https://api.github.com/users/Darel13712/repos", "events_url": "https://api.github.com/users/Darel13712/events{/privacy}", "received_events_url": "https://api.github.com/users/Darel13712/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 443483881, "node_id": "MDU6TGFiZWw0NDM0ODM4ODE=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/todo", "name": "todo", "color": "c2e0c6", "default": false}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-09-26T15:50:25Z", "updated_at": "2018-10-01T17:43:15Z", "closed_at": null, "author_association": "NONE", "body_html": "<h2>Issue description</h2>\n<p>torch.tensor() fails at certain long arrays</p>\n<h2>Code example</h2>\n<pre><code>&gt;&gt;&gt; import torch\n&gt;&gt;&gt; import numpy as np\n&gt;&gt;&gt; a = np.random.random(1239*25).reshape(-1, 25).astype(np.float16)\n&gt;&gt;&gt; torch.tensor(a[:40])\n</code></pre>\n<p>works just fine:</p>\n<pre><code>tensor([[0.7393, 0.1298, 0.9209, 0.3218, 0.0799, 0.0392, 0.3503, 0.8389, 0.5161,\n         0.4705, 0.3870, 0.8120, 0.7759, 0.3667, 0.9966, 0.4863, 0.9233, 0.4229,\n         0.8965, 0.8398, 0.8677, 0.7915, 0.5654, 0.3433, 0.3972],\n...\n</code></pre>\n<p>But...</p>\n<pre><code>&gt;&gt;&gt; torch.tensor(a[:41])\n\n---------------------------------------------------------------------------\nRuntimeError                              Traceback (most recent call last)\n/usr/anaconda3/lib/python3.6/site-packages/IPython/core/formatters.py in __call__(self, obj)\n    700                 type_pprinters=self.type_printers,\n    701                 deferred_pprinters=self.deferred_printers)\n--&gt; 702             printer.pretty(obj)\n    703             printer.flush()\n    704             return stream.getvalue()\n\n/usr/anaconda3/lib/python3.6/site-packages/IPython/lib/pretty.py in pretty(self, obj)\n    393                             if callable(meth):\n    394                                 return meth(obj, self, cycle)\n--&gt; 395             return _default_pprint(obj, self, cycle)\n    396         finally:\n    397             self.end_group()\n\n/usr/anaconda3/lib/python3.6/site-packages/IPython/lib/pretty.py in _default_pprint(obj, p, cycle)\n    508     if _safe_getattr(klass, '__repr__', None) is not object.__repr__:\n    509         # A user-provided repr. Find newlines and replace them with p.break_()\n--&gt; 510         _repr_pprint(obj, p, cycle)\n    511         return\n    512     p.begin_group(1, '&lt;')\n\n/usr/anaconda3/lib/python3.6/site-packages/IPython/lib/pretty.py in _repr_pprint(obj, p, cycle)\n    699     \"\"\"A pprint that just redirects to the normal repr function.\"\"\"\n    700     # Find newlines and replace them with p.break_()\n--&gt; 701     output = repr(obj)\n    702     for idx,output_line in enumerate(output.splitlines()):\n    703         if idx:\n\n/usr/anaconda3/lib/python3.6/site-packages/torch/tensor.py in __repr__(self)\n     55         # characters to replace unicode characters with.\n     56         if sys.version_info &gt; (3,):\n---&gt; 57             return torch._tensor_str._str(self)\n     58         else:\n     59             if hasattr(sys.stdout, 'encoding'):\n\n/usr/anaconda3/lib/python3.6/site-packages/torch/_tensor_str.py in _str(self)\n    254             suffix += ', dtype=' + str(self.dtype)\n    255 \n--&gt; 256         formatter = _Formatter(get_summarized_data(self) if summarize else self)\n    257         tensor_str = _tensor_str(self, indent, formatter, summarize)\n    258 \n\n/usr/anaconda3/lib/python3.6/site-packages/torch/_tensor_str.py in get_summarized_data(self)\n    214             return self\n    215     if self.size(0) &gt; 2 * PRINT_OPTS.edgeitems:\n--&gt; 216         start = [get_summarized_data(self[i]).view(-1) for i in range(0, PRINT_OPTS.edgeitems)]\n    217         end = ([get_summarized_data(self[i]).view(-1)\n    218                for i in range(len(self) - PRINT_OPTS.edgeitems, len(self))])\n\n/usr/anaconda3/lib/python3.6/site-packages/torch/_tensor_str.py in &lt;listcomp&gt;(.0)\n    214             return self\n    215     if self.size(0) &gt; 2 * PRINT_OPTS.edgeitems:\n--&gt; 216         start = [get_summarized_data(self[i]).view(-1) for i in range(0, PRINT_OPTS.edgeitems)]\n    217         end = ([get_summarized_data(self[i]).view(-1)\n    218                for i in range(len(self) - PRINT_OPTS.edgeitems, len(self))])\n\n/usr/anaconda3/lib/python3.6/site-packages/torch/_tensor_str.py in get_summarized_data(self)\n    210     if dim == 1:\n    211         if self.size(0) &gt; 2 * PRINT_OPTS.edgeitems:\n--&gt; 212             return torch.cat((self[:PRINT_OPTS.edgeitems], self[-PRINT_OPTS.edgeitems:]))\n    213         else:\n    214             return self\n\nRuntimeError: _cat is not implemented for type torch.HalfTensor\n</code></pre>\n<p>Latest Pytorch</p>\n<pre><code># conda list pytorch\n# packages in environment at /usr/anaconda3:\n#\n# Name                    Version                   Build  Channel\npytorch                   0.4.1            py36ha74772b_0\n</code></pre>", "body_text": "Issue description\ntorch.tensor() fails at certain long arrays\nCode example\n>>> import torch\n>>> import numpy as np\n>>> a = np.random.random(1239*25).reshape(-1, 25).astype(np.float16)\n>>> torch.tensor(a[:40])\n\nworks just fine:\ntensor([[0.7393, 0.1298, 0.9209, 0.3218, 0.0799, 0.0392, 0.3503, 0.8389, 0.5161,\n         0.4705, 0.3870, 0.8120, 0.7759, 0.3667, 0.9966, 0.4863, 0.9233, 0.4229,\n         0.8965, 0.8398, 0.8677, 0.7915, 0.5654, 0.3433, 0.3972],\n...\n\nBut...\n>>> torch.tensor(a[:41])\n\n---------------------------------------------------------------------------\nRuntimeError                              Traceback (most recent call last)\n/usr/anaconda3/lib/python3.6/site-packages/IPython/core/formatters.py in __call__(self, obj)\n    700                 type_pprinters=self.type_printers,\n    701                 deferred_pprinters=self.deferred_printers)\n--> 702             printer.pretty(obj)\n    703             printer.flush()\n    704             return stream.getvalue()\n\n/usr/anaconda3/lib/python3.6/site-packages/IPython/lib/pretty.py in pretty(self, obj)\n    393                             if callable(meth):\n    394                                 return meth(obj, self, cycle)\n--> 395             return _default_pprint(obj, self, cycle)\n    396         finally:\n    397             self.end_group()\n\n/usr/anaconda3/lib/python3.6/site-packages/IPython/lib/pretty.py in _default_pprint(obj, p, cycle)\n    508     if _safe_getattr(klass, '__repr__', None) is not object.__repr__:\n    509         # A user-provided repr. Find newlines and replace them with p.break_()\n--> 510         _repr_pprint(obj, p, cycle)\n    511         return\n    512     p.begin_group(1, '<')\n\n/usr/anaconda3/lib/python3.6/site-packages/IPython/lib/pretty.py in _repr_pprint(obj, p, cycle)\n    699     \"\"\"A pprint that just redirects to the normal repr function.\"\"\"\n    700     # Find newlines and replace them with p.break_()\n--> 701     output = repr(obj)\n    702     for idx,output_line in enumerate(output.splitlines()):\n    703         if idx:\n\n/usr/anaconda3/lib/python3.6/site-packages/torch/tensor.py in __repr__(self)\n     55         # characters to replace unicode characters with.\n     56         if sys.version_info > (3,):\n---> 57             return torch._tensor_str._str(self)\n     58         else:\n     59             if hasattr(sys.stdout, 'encoding'):\n\n/usr/anaconda3/lib/python3.6/site-packages/torch/_tensor_str.py in _str(self)\n    254             suffix += ', dtype=' + str(self.dtype)\n    255 \n--> 256         formatter = _Formatter(get_summarized_data(self) if summarize else self)\n    257         tensor_str = _tensor_str(self, indent, formatter, summarize)\n    258 \n\n/usr/anaconda3/lib/python3.6/site-packages/torch/_tensor_str.py in get_summarized_data(self)\n    214             return self\n    215     if self.size(0) > 2 * PRINT_OPTS.edgeitems:\n--> 216         start = [get_summarized_data(self[i]).view(-1) for i in range(0, PRINT_OPTS.edgeitems)]\n    217         end = ([get_summarized_data(self[i]).view(-1)\n    218                for i in range(len(self) - PRINT_OPTS.edgeitems, len(self))])\n\n/usr/anaconda3/lib/python3.6/site-packages/torch/_tensor_str.py in <listcomp>(.0)\n    214             return self\n    215     if self.size(0) > 2 * PRINT_OPTS.edgeitems:\n--> 216         start = [get_summarized_data(self[i]).view(-1) for i in range(0, PRINT_OPTS.edgeitems)]\n    217         end = ([get_summarized_data(self[i]).view(-1)\n    218                for i in range(len(self) - PRINT_OPTS.edgeitems, len(self))])\n\n/usr/anaconda3/lib/python3.6/site-packages/torch/_tensor_str.py in get_summarized_data(self)\n    210     if dim == 1:\n    211         if self.size(0) > 2 * PRINT_OPTS.edgeitems:\n--> 212             return torch.cat((self[:PRINT_OPTS.edgeitems], self[-PRINT_OPTS.edgeitems:]))\n    213         else:\n    214             return self\n\nRuntimeError: _cat is not implemented for type torch.HalfTensor\n\nLatest Pytorch\n# conda list pytorch\n# packages in environment at /usr/anaconda3:\n#\n# Name                    Version                   Build  Channel\npytorch                   0.4.1            py36ha74772b_0", "body": "## Issue description\r\n\r\ntorch.tensor() fails at certain long arrays\r\n\r\n## Code example\r\n\r\n```\r\n>>> import torch\r\n>>> import numpy as np\r\n>>> a = np.random.random(1239*25).reshape(-1, 25).astype(np.float16)\r\n>>> torch.tensor(a[:40])\r\n```\r\nworks just fine:\r\n```\r\ntensor([[0.7393, 0.1298, 0.9209, 0.3218, 0.0799, 0.0392, 0.3503, 0.8389, 0.5161,\r\n         0.4705, 0.3870, 0.8120, 0.7759, 0.3667, 0.9966, 0.4863, 0.9233, 0.4229,\r\n         0.8965, 0.8398, 0.8677, 0.7915, 0.5654, 0.3433, 0.3972],\r\n...\r\n```\r\nBut...\r\n```\r\n>>> torch.tensor(a[:41])\r\n\r\n---------------------------------------------------------------------------\r\nRuntimeError                              Traceback (most recent call last)\r\n/usr/anaconda3/lib/python3.6/site-packages/IPython/core/formatters.py in __call__(self, obj)\r\n    700                 type_pprinters=self.type_printers,\r\n    701                 deferred_pprinters=self.deferred_printers)\r\n--> 702             printer.pretty(obj)\r\n    703             printer.flush()\r\n    704             return stream.getvalue()\r\n\r\n/usr/anaconda3/lib/python3.6/site-packages/IPython/lib/pretty.py in pretty(self, obj)\r\n    393                             if callable(meth):\r\n    394                                 return meth(obj, self, cycle)\r\n--> 395             return _default_pprint(obj, self, cycle)\r\n    396         finally:\r\n    397             self.end_group()\r\n\r\n/usr/anaconda3/lib/python3.6/site-packages/IPython/lib/pretty.py in _default_pprint(obj, p, cycle)\r\n    508     if _safe_getattr(klass, '__repr__', None) is not object.__repr__:\r\n    509         # A user-provided repr. Find newlines and replace them with p.break_()\r\n--> 510         _repr_pprint(obj, p, cycle)\r\n    511         return\r\n    512     p.begin_group(1, '<')\r\n\r\n/usr/anaconda3/lib/python3.6/site-packages/IPython/lib/pretty.py in _repr_pprint(obj, p, cycle)\r\n    699     \"\"\"A pprint that just redirects to the normal repr function.\"\"\"\r\n    700     # Find newlines and replace them with p.break_()\r\n--> 701     output = repr(obj)\r\n    702     for idx,output_line in enumerate(output.splitlines()):\r\n    703         if idx:\r\n\r\n/usr/anaconda3/lib/python3.6/site-packages/torch/tensor.py in __repr__(self)\r\n     55         # characters to replace unicode characters with.\r\n     56         if sys.version_info > (3,):\r\n---> 57             return torch._tensor_str._str(self)\r\n     58         else:\r\n     59             if hasattr(sys.stdout, 'encoding'):\r\n\r\n/usr/anaconda3/lib/python3.6/site-packages/torch/_tensor_str.py in _str(self)\r\n    254             suffix += ', dtype=' + str(self.dtype)\r\n    255 \r\n--> 256         formatter = _Formatter(get_summarized_data(self) if summarize else self)\r\n    257         tensor_str = _tensor_str(self, indent, formatter, summarize)\r\n    258 \r\n\r\n/usr/anaconda3/lib/python3.6/site-packages/torch/_tensor_str.py in get_summarized_data(self)\r\n    214             return self\r\n    215     if self.size(0) > 2 * PRINT_OPTS.edgeitems:\r\n--> 216         start = [get_summarized_data(self[i]).view(-1) for i in range(0, PRINT_OPTS.edgeitems)]\r\n    217         end = ([get_summarized_data(self[i]).view(-1)\r\n    218                for i in range(len(self) - PRINT_OPTS.edgeitems, len(self))])\r\n\r\n/usr/anaconda3/lib/python3.6/site-packages/torch/_tensor_str.py in <listcomp>(.0)\r\n    214             return self\r\n    215     if self.size(0) > 2 * PRINT_OPTS.edgeitems:\r\n--> 216         start = [get_summarized_data(self[i]).view(-1) for i in range(0, PRINT_OPTS.edgeitems)]\r\n    217         end = ([get_summarized_data(self[i]).view(-1)\r\n    218                for i in range(len(self) - PRINT_OPTS.edgeitems, len(self))])\r\n\r\n/usr/anaconda3/lib/python3.6/site-packages/torch/_tensor_str.py in get_summarized_data(self)\r\n    210     if dim == 1:\r\n    211         if self.size(0) > 2 * PRINT_OPTS.edgeitems:\r\n--> 212             return torch.cat((self[:PRINT_OPTS.edgeitems], self[-PRINT_OPTS.edgeitems:]))\r\n    213         else:\r\n    214             return self\r\n\r\nRuntimeError: _cat is not implemented for type torch.HalfTensor\r\n```\r\n\r\nLatest Pytorch\r\n```\r\n# conda list pytorch\r\n# packages in environment at /usr/anaconda3:\r\n#\r\n# Name                    Version                   Build  Channel\r\npytorch                   0.4.1            py36ha74772b_0\r\n```\r\n\r\n"}