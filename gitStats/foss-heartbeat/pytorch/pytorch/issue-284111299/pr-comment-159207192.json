{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/159207192", "pull_request_review_id": 86118395, "id": 159207192, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1OTIwNzE5Mg==", "diff_hunk": "@@ -45,4 +47,62 @@ void THFloatVector_cadd_AVX2(float *z, const float *x, const float *y, const flo\n   }\n }\n \n+static void normal_fill_16_AVX2(float *data,\n+                                const __m256* two_pi,\n+                                const __m256* one,\n+                                const __m256* minus_two,\n+                                const __m256* mean,\n+                                const __m256* stddev) {\n+  const __m256 u1 = _mm256_sub_ps(*one, _mm256_loadu_ps(data));\n+  const __m256 u2 = _mm256_loadu_ps(data + 8);\n+\n+  // sincos256_ps and log256_ps are from avx_mathfun.h\n+  const __m256 radius = _mm256_sqrt_ps(_mm256_mul_ps(*minus_two, log256_ps(u1)));\n+  const __m256 theta = _mm256_mul_ps(*two_pi, u2);\n+\n+  __m256 sintheta, costheta;\n+  sincos256_ps(theta, &sintheta, &costheta);\n+\n+  const __m256 n1 = _mm256_mul_ps(radius, costheta);\n+  const __m256 n2 = _mm256_mul_ps(radius, sintheta);\n+\n+  _mm256_storeu_ps(data, _mm256_fmadd_ps(n1, *stddev, *mean));\n+  _mm256_storeu_ps(data + 8, _mm256_fmadd_ps(n2, *stddev, *mean));\n+}\n+\n+void THFloatVector_normal_fill_AVX2(float *data,\n+                                    const int64_t size,\n+                                    THGenerator *generator,\n+                                    const float mean,\n+                                    const float stddev)\n+{\n+  THAssert(size >= 16 && \"Size must be >= 16 for AVX2 normal fill\");\n+  const __m256 two_pi = _mm256_set1_ps(2.0f * M_PI);\n+  const __m256 one = _mm256_set1_ps(1.0f);\n+  const __m256 minus_two = _mm256_set1_ps(-2.0f);\n+  const __m256 mean_v = _mm256_set1_ps(mean);\n+  const __m256 stddev_v = _mm256_set1_ps(stddev);\n+\n+  // First fill the data with the uniform numbers. Box-Mueller is a 2 -> 2\n+  // mapping of 2 uniform numbers to 2 normal numbers (per iteration), so we\n+  // we need exactly as much space for uniform and normal numbers and can just\n+  // use the single buffer for both.\n+  for (int64_t i = 0; i < size; ++i) {\n+    data[i] = THRandom_uniformFloat(generator, 0, 1);\n+  }\n+\n+  for (int64_t i = 0; i < size - 15; i += 16) {\n+    normal_fill_16_AVX2(data + i, &two_pi, &one, &minus_two, &mean_v, &stddev_v);\n+  }\n+\n+  if (size % 16 != 0) {\n+    // We rewind so that we have 16 values and then compute them in one step.\n+    data += (size - 16);", "path": "aten/src/TH/vector/AVX2.c", "position": null, "original_position": 63, "commit_id": "f7c556dd0a1093cab2d45534eefbb851c1297875", "original_commit_id": "4d695fb923ccbeacaaaa7ef265241705fb4c2074", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Ohhh right. Not sure why I thought it was that way", "created_at": "2018-01-02T11:07:08Z", "updated_at": "2018-11-23T15:37:46Z", "html_url": "https://github.com/pytorch/pytorch/pull/4312#discussion_r159207192", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4312", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/159207192"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/4312#discussion_r159207192"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4312"}}, "body_html": "<p>Ohhh right. Not sure why I thought it was that way</p>", "body_text": "Ohhh right. Not sure why I thought it was that way", "in_reply_to_id": 159165009}