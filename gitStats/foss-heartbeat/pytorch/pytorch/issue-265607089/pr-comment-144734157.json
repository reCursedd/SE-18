{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/144734157", "pull_request_review_id": 69432123, "id": 144734157, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0NDczNDE1Nw==", "diff_hunk": "@@ -705,6 +707,85 @@ def embedding(input, embedding_matrix,\n     )\n \n \n+def embedding_bag(embedding_matrix, indices, offsets=None,\n+                  max_norm=None, norm_type=2, scale_grad_by_freq=False, mode='mean'):\n+    r\"\"\"Computes sums or means of 'bags' of embeddings, without instantiating the\n+        intermediate embeddings.\n+\n+        For bags of constant length,\n+            * embedding_bag with `mode=sum` is equivalent to nn.functional.embedding followed by `torch.sum(dim=1)`\n+            * with `mode=mean` is equivalent to nn.functional.embedding followed by `torch.mean(dim=1)`\n+\n+        However, embedding_bag is much more time and memory efficient than using a chain of these\n+        operations.\n+\n+        Args:\n+            embedding_matrix: FloatTensor, where number of rows should correspond to the maximum possible index + 1,\n+                              number of columns is the embedding size\n+            indices (N or BxN): LongTensor containing the indices of the embeddings to extract.\n+                                When `input` is 1D Tensor of shape `N`, an `offsets` Tensor is given, that contains the\n+                                starting position of each new sequence in the mini-batch.\n+            offsets (B or None): LongTensor containing the starting positions of each sample in a mini-batch of variable\n+                                 length sequences. If `input` is 2D (BxN), then offsets does not need to be given,\n+                                 as the `input` is treated as a mini-batch of fixed length sequences of length `N` each.\n+            max_norm (float, optional): If given, will renormalize the embeddings to always have a norm lesser than this\n+            norm_type (float, optional): The p of the p-norm to compute for the max_norm option\n+            scale_grad_by_freq (boolean, optional): if given, this will scale gradients by the frequency of\n+                                                    the words in the dictionary.\n+            mode (string, optional): 'sum' | 'mean'. Specifies the way to reduce the bag. Default: 'mean'\n+\n+        Shape:\n+            - Embedding_matrix: FloatTensor `(V, embedding_dim)`,\n+                                V = number of embeddings, embedding_dim = embedding size\n+            - Input: LongTensor `N`, N = number of embeddings to extract\n+                     (or) LongTensor `BxN`, B = number of sequences in mini-batch,\n+                                            N = number of embeddings per sequence\n+            - Offsets: LongTensor `B`, B = number of bags. The values are the\n+                       offsets in `input` for each bag, i.e. the cumsum of lengths.\n+                       Offsets is not given if Input is 2D `BxN` Tensor,\n+                       the input is considered to be of fixed-length sequences\n+            - Output: `(B, embedding_dim)`\n+\n+        Examples::\n+\n+            >>> # an Embedding module containing 10 tensors of size 3\n+            >>> embedding_matrix = Variable(torch.rand(10, 3))\n+            >>> # a batch of 2 samples of 4 indices each\n+            >>> input = Variable(torch.LongTensor([1,2,4,5,4,3,2,9]))\n+            >>> offsets = Variable(torch.LongTensor([0,4]))\n+            >>> embedding_bag(embedding_matrix, input, offsets)\n+\n+            Variable containing:\n+            -1.1840 -0.2547 -0.5860\n+            -0.7126  0.0002 -0.3411\n+            [torch.FloatTensor of size 2x3]\n+\n+        \"\"\"\n+    if indices.dim() == 2:\n+        if offsets is not None:\n+            raise ValueError(\"if input is 2D, then offsets has to be None\"\n+                             \", as input is treated is a mini-batch of\"\n+                             \" fixed length sequences. However, found \"\n+                             \"offsets of type {}\".format(type(offsets)))\n+        else:\n+            offsets = Variable(torch.arange(0, indices.numel(), indices.size(1),\n+                               out=indices.data.new().long()))\n+            indices = indices.view(-1)\n+\n+    elif indices.dim() != 1:\n+        raise ValueError(\"input has to be 1D or 2D Tensor,\"\n+                         \" but got Tensor of dimension {}\".format(indices.dim()))\n+\n+    if offsets is None:\n+        raise ValueError(\"offsets has to be a 1D Tensor but got None\")\n+\n+    return torch.nn.backends.thnn.backend.EmbeddingBag.apply(", "path": "torch/nn/functional.py", "position": null, "original_position": 96, "commit_id": "66cc25a8a3d856ba795bfd9ca38b2b55e8bad501", "original_commit_id": "e358991109581012a88a47e39b154c50729d1256", "user": {"login": "elanmart", "id": 10772830, "node_id": "MDQ6VXNlcjEwNzcyODMw", "avatar_url": "https://avatars3.githubusercontent.com/u/10772830?v=4", "gravatar_id": "", "url": "https://api.github.com/users/elanmart", "html_url": "https://github.com/elanmart", "followers_url": "https://api.github.com/users/elanmart/followers", "following_url": "https://api.github.com/users/elanmart/following{/other_user}", "gists_url": "https://api.github.com/users/elanmart/gists{/gist_id}", "starred_url": "https://api.github.com/users/elanmart/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/elanmart/subscriptions", "organizations_url": "https://api.github.com/users/elanmart/orgs", "repos_url": "https://api.github.com/users/elanmart/repos", "events_url": "https://api.github.com/users/elanmart/events{/privacy}", "received_events_url": "https://api.github.com/users/elanmart/received_events", "type": "User", "site_admin": false}, "body": "sorry, I got confused since `Embedding` also calls its function via `torch.nn`. ", "created_at": "2017-10-15T22:33:34Z", "updated_at": "2018-11-23T15:35:18Z", "html_url": "https://github.com/pytorch/pytorch/pull/3128#discussion_r144734157", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/3128", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/144734157"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/3128#discussion_r144734157"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/3128"}}, "body_html": "<p>sorry, I got confused since <code>Embedding</code> also calls its function via <code>torch.nn</code>.</p>", "body_text": "sorry, I got confused since Embedding also calls its function via torch.nn.", "in_reply_to_id": 144733419}