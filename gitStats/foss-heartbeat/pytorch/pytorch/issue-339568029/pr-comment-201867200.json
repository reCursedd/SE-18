{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/201867200", "pull_request_review_id": 136454172, "id": 201867200, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTg2NzIwMA==", "diff_hunk": "@@ -145,18 +143,16 @@ std::vector<at::Tensor> scatter(\n   } else {\n     chunks = tensor.chunk(/*chunks=*/devices.size(), /*dim=*/dim);\n   }\n-  auto* thc_state = at::globalContext().lazyInitCUDA();\n   for (size_t chunk = 0; chunk < chunks.size(); ++chunk) {\n-    const int32_t device_index = devices[chunk];\n-    // We must set the current device before setting the current stream.\n-    const at::DeviceGuard device_guard({at::kCUDA, device_index});\n-    const AutoStream stream_guard(\n-        streams ? (*streams)[chunk]\n-                : THCState_getStreamOnDevice(thc_state, device_index));\n-    // Copy the chunk from its current device to its destination device, which\n-    // we set as the default device above, thus specified as -1.\n-    chunks[chunk] =\n-        chunks[chunk].contiguous().to({at::kCUDA, -1}, /*non_blocking=*/true);\n+    const auto device_index = static_cast<int32_t>(devices[chunk]);\n+    at::CUDAStreamGuard stream_guard;\n+    if (streams) {\n+      // Increase the ref-count before converting from THCStream to CUDAStream.", "path": "torch/csrc/cuda/comm.cpp", "position": null, "original_position": 28, "commit_id": "785cdd4e4be06c0de0ba165b59f52be4faa553be", "original_commit_id": "abf6063adfbf877d434444bf7ab1c43e46dc622a", "user": {"login": "goldsborough", "id": 6429851, "node_id": "MDQ6VXNlcjY0Mjk4NTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/6429851?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goldsborough", "html_url": "https://github.com/goldsborough", "followers_url": "https://api.github.com/users/goldsborough/followers", "following_url": "https://api.github.com/users/goldsborough/following{/other_user}", "gists_url": "https://api.github.com/users/goldsborough/gists{/gist_id}", "starred_url": "https://api.github.com/users/goldsborough/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goldsborough/subscriptions", "organizations_url": "https://api.github.com/users/goldsborough/orgs", "repos_url": "https://api.github.com/users/goldsborough/repos", "events_url": "https://api.github.com/users/goldsborough/events{/privacy}", "received_events_url": "https://api.github.com/users/goldsborough/received_events", "type": "User", "site_admin": false}, "body": "we could add a `bool retain= false` to the constructor of `CUDAStream` maybe?", "created_at": "2018-07-11T23:09:51Z", "updated_at": "2018-11-23T15:47:12Z", "html_url": "https://github.com/pytorch/pytorch/pull/9277#discussion_r201867200", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/9277", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/201867200"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/9277#discussion_r201867200"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/9277"}}, "body_html": "<p>we could add a <code>bool retain= false</code> to the constructor of <code>CUDAStream</code> maybe?</p>", "body_text": "we could add a bool retain= false to the constructor of CUDAStream maybe?", "in_reply_to_id": 201576496}