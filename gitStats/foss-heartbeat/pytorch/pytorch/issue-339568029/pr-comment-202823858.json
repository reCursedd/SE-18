{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/202823858", "pull_request_review_id": 137592055, "id": 202823858, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMjgyMzg1OA==", "diff_hunk": "@@ -0,0 +1,97 @@\n+#pragma once\n+\n+#include <ATen/CUDAStream.h>\n+#include <ATen/Context.h>\n+#include <ATen/DeviceGuard.h>\n+\n+#include <cstddef>\n+#include <vector>\n+\n+namespace at {\n+\n+/// A variant of `DeviceGuard` that augments it with an understanding of CUDA\n+/// streams. This guard can not only set and reset the current CUDA device, but\n+/// also set and reset the current CUDA stream. It is important to note that\n+/// because a CUDA stream is intrinsically associated with the CUDA device to\n+/// which it is bound, setting the CUDA stream *also* sets the current CUDA\n+/// device to that of the stream.\n+struct CUDAGuard {\n+  /// Default constructor, does nothing and causes no change in the current\n+  /// stream or device until `set_stream` or `set_device` is called.\n+  CUDAGuard() = default;\n+\n+  /// Sets the CUDA stream and its associated device as the current one (calls\n+  /// `set_stream`).\n+  explicit CUDAGuard(const CUDAStream& stream) {\n+    set_stream(stream);\n+  }\n+\n+  /// Calls `set_device` with the given index.\n+  explicit CUDAGuard(int32_t device) {\n+    set_device(device);\n+  }\n+\n+  /// Copy is disallowed.\n+  CUDAGuard(const CUDAGuard&) = delete;\n+  CUDAGuard& operator=(const CUDAGuard&) = delete;\n+\n+  /// Move is disallowed.\n+  CUDAGuard(CUDAGuard&&) = delete;\n+  CUDAGuard& operator=(CUDAGuard&&) = delete;\n+\n+  /// Resets the CUDA stream on each device to the one that was active upon\n+  /// construction.\n+  ~CUDAGuard() {\n+    if (!original_streams_.empty()) {\n+      for (size_t device = 0; device < original_streams_.size(); ++device) {\n+        globalContext().uncheckedSetCurrentCUDAStreamOnDevice(\n+            device, original_streams_[device]);\n+      }\n+    }\n+  }\n+\n+  /// Sets the current CUDA device to the device associated with the given\n+  /// stream, and then sets the current stream on that device to the one given.\n+  void set_stream(const CUDAStream& stream) {\n+    device_guard_.set_index(stream.device());\n+    // If we haven't stored the current stream yet, store it now.\n+    if (original_streams_.empty()) {\n+      const size_t device_count = globalContext().getNumGPUs();\n+      original_streams_.reserve(device_count);\n+      for (size_t device = 0; device < device_count; ++device) {\n+        original_streams_.push_back(\n+            globalContext().getCurrentCUDAStreamOnDevice(device));\n+      }\n+    }\n+    globalContext().setCurrentCUDAStreamOnDevice(\n+        device_guard_.last_index(), stream);\n+  }\n+\n+  /// Sets the CUDA device to the given one.\n+  void set_device(int32_t device) {\n+    device_guard_.set_index(device);\n+  }\n+\n+  /// Returns the CUDA stream that was set upon construction of the guard.", "path": "aten/src/ATen/CUDAGuard.h", "position": null, "original_position": 75, "commit_id": "785cdd4e4be06c0de0ba165b59f52be4faa553be", "original_commit_id": "46eada923743d0f381f507417035715761396bd1", "user": {"login": "colesbury", "id": 655866, "node_id": "MDQ6VXNlcjY1NTg2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/655866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colesbury", "html_url": "https://github.com/colesbury", "followers_url": "https://api.github.com/users/colesbury/followers", "following_url": "https://api.github.com/users/colesbury/following{/other_user}", "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions", "organizations_url": "https://api.github.com/users/colesbury/orgs", "repos_url": "https://api.github.com/users/colesbury/repos", "events_url": "https://api.github.com/users/colesbury/events{/privacy}", "received_events_url": "https://api.github.com/users/colesbury/received_events", "type": "User", "site_admin": false}, "body": "This comment is only accurate if the `CUDAGuard(const CUDAStream& stream)` constructor was used.", "created_at": "2018-07-16T21:02:46Z", "updated_at": "2018-11-23T15:47:31Z", "html_url": "https://github.com/pytorch/pytorch/pull/9277#discussion_r202823858", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/9277", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/202823858"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/9277#discussion_r202823858"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/9277"}}, "body_html": "<p>This comment is only accurate if the <code>CUDAGuard(const CUDAStream&amp; stream)</code> constructor was used.</p>", "body_text": "This comment is only accurate if the CUDAGuard(const CUDAStream& stream) constructor was used."}