{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/202820790", "pull_request_review_id": 137592055, "id": 202820790, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMjgyMDc5MA==", "diff_hunk": "@@ -0,0 +1,97 @@\n+#pragma once\n+\n+#include <ATen/CUDAStream.h>\n+#include <ATen/Context.h>\n+#include <ATen/DeviceGuard.h>\n+\n+#include <cstddef>\n+#include <vector>\n+\n+namespace at {\n+\n+/// A variant of `DeviceGuard` that augments it with an understanding of CUDA\n+/// streams. This guard can not only set and reset the current CUDA device, but\n+/// also set and reset the current CUDA stream. It is important to note that\n+/// because a CUDA stream is intrinsically associated with the CUDA device to\n+/// which it is bound, setting the CUDA stream *also* sets the current CUDA\n+/// device to that of the stream.\n+struct CUDAGuard {\n+  /// Default constructor, does nothing and causes no change in the current\n+  /// stream or device until `set_stream` or `set_device` is called.\n+  CUDAGuard() = default;\n+\n+  /// Sets the CUDA stream and its associated device as the current one (calls\n+  /// `set_stream`).\n+  explicit CUDAGuard(const CUDAStream& stream) {\n+    set_stream(stream);\n+  }\n+\n+  /// Calls `set_device` with the given index.\n+  explicit CUDAGuard(int32_t device) {\n+    set_device(device);\n+  }\n+\n+  /// Copy is disallowed.\n+  CUDAGuard(const CUDAGuard&) = delete;\n+  CUDAGuard& operator=(const CUDAGuard&) = delete;\n+\n+  /// Move is disallowed.\n+  CUDAGuard(CUDAGuard&&) = delete;", "path": "aten/src/ATen/CUDAGuard.h", "position": null, "original_position": 39, "commit_id": "785cdd4e4be06c0de0ba165b59f52be4faa553be", "original_commit_id": "46eada923743d0f381f507417035715761396bd1", "user": {"login": "colesbury", "id": 655866, "node_id": "MDQ6VXNlcjY1NTg2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/655866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colesbury", "html_url": "https://github.com/colesbury", "followers_url": "https://api.github.com/users/colesbury/followers", "following_url": "https://api.github.com/users/colesbury/following{/other_user}", "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions", "organizations_url": "https://api.github.com/users/colesbury/orgs", "repos_url": "https://api.github.com/users/colesbury/repos", "events_url": "https://api.github.com/users/colesbury/events{/privacy}", "received_events_url": "https://api.github.com/users/colesbury/received_events", "type": "User", "site_admin": false}, "body": "Since C++11, the style seems to be to allow RAII-style structs to be movable. See std::unique_lock for example (vs. the older std::lock_guard)", "created_at": "2018-07-16T20:52:31Z", "updated_at": "2018-11-23T15:47:31Z", "html_url": "https://github.com/pytorch/pytorch/pull/9277#discussion_r202820790", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/9277", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/202820790"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/9277#discussion_r202820790"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/9277"}}, "body_html": "<p>Since C++11, the style seems to be to allow RAII-style structs to be movable. See std::unique_lock for example (vs. the older std::lock_guard)</p>", "body_text": "Since C++11, the style seems to be to allow RAII-style structs to be movable. See std::unique_lock for example (vs. the older std::lock_guard)"}