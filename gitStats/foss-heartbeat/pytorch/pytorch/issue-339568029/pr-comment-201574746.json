{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/201574746", "pull_request_review_id": 136101728, "id": 201574746, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTU3NDc0Ng==", "diff_hunk": "@@ -0,0 +1,67 @@\n+#pragma once\n+\n+#include <ATen/CUDAStream.h>\n+#include <ATen/Context.h>\n+\n+#include <cstddef>\n+\n+namespace at {\n+\n+/// RAII guard that sets the current CUDA Stream for a particular CUDA device,\n+/// identified by its device index, and sets it back to the original stream upon\n+/// destruction.\n+///\n+/// The stream is always reset to the one that was active at the time of\n+/// construction of the guard. Even if you `set_stream` after construction, the\n+/// destructor will still reset the stream to the one that was active at\n+/// construction time.\n+struct CUDAStreamGuard {\n+  /// Default constructor, does nothing and causes no change in the current\n+  /// stream until `set_stream` is called.\n+  CUDAStreamGuard() = default;", "path": "aten/src/ATen/CUDAStreamGuard.h", "position": null, "original_position": 21, "commit_id": "785cdd4e4be06c0de0ba165b59f52be4faa553be", "original_commit_id": "abf6063adfbf877d434444bf7ab1c43e46dc622a", "user": {"login": "mruberry", "id": 38511765, "node_id": "MDQ6VXNlcjM4NTExNzY1", "avatar_url": "https://avatars3.githubusercontent.com/u/38511765?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mruberry", "html_url": "https://github.com/mruberry", "followers_url": "https://api.github.com/users/mruberry/followers", "following_url": "https://api.github.com/users/mruberry/following{/other_user}", "gists_url": "https://api.github.com/users/mruberry/gists{/gist_id}", "starred_url": "https://api.github.com/users/mruberry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mruberry/subscriptions", "organizations_url": "https://api.github.com/users/mruberry/orgs", "repos_url": "https://api.github.com/users/mruberry/repos", "events_url": "https://api.github.com/users/mruberry/events{/privacy}", "received_events_url": "https://api.github.com/users/mruberry/received_events", "type": "User", "site_admin": false}, "body": "Maybe make the guard not movable/copyable just in case? ", "created_at": "2018-07-11T06:16:44Z", "updated_at": "2018-11-23T15:47:06Z", "html_url": "https://github.com/pytorch/pytorch/pull/9277#discussion_r201574746", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/9277", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/201574746"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/9277#discussion_r201574746"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/9277"}}, "body_html": "<p>Maybe make the guard not movable/copyable just in case?</p>", "body_text": "Maybe make the guard not movable/copyable just in case?"}