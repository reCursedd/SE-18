{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/179332557", "pull_request_review_id": 109557133, "id": 179332557, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTMzMjU1Nw==", "diff_hunk": "@@ -52,66 +52,20 @@ bool isBroadcasting(Node* node) {\n   return broadcasting.count(node->kind());\n }\n \n-// First iterate over the 'from' tensor sizes. Ignore all leading and trailing\n-// dimensions that are simply one, since they can be trivially broadcasted.\n-// When iterating over the dimension sizes (with reduced 'from' tensor),\n-// starting at the trailing dimension, the dimension sizes must either be equal,\n-// or one of them does not exist. If a broadcast candidate is not found at the\n-// trailing dimension, search at the leading dimension. If one is found here,\n-// return the `axis` argument to be emitted to ONNX on the broadcasting operator\n-//\n-// Note that this is NOT equivalent to numpy broadcasting semantics, and do\n-// not represent the generalized broadcasting that Pytorch implements.\n-// Rather, this is Caffe2-style broadcasting.\n-//\n-// Return value is 1) Whether this expand is fusable, 2) the `axis` argument we\n-// should emit to ONNX. Coming from a Pytorch frontend, this should either not\n-// be emitted (if we're broadcasting trailing dimensions) or it should be\n-// emitted as `0` (leading dimensions.)", "path": "torch/csrc/jit/passes/onnx/peephole.cpp", "position": 19, "original_position": 19, "commit_id": "8ad30842f8460ac7d5d04276c284ecce13230d9e", "original_commit_id": "b7e8c94609d9b5d699e0c91260a0ca5b4f7e3f77", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "The comment is gone... so what are the semantics now, and why are they this way?", "created_at": "2018-04-05T01:52:17Z", "updated_at": "2018-11-23T15:41:45Z", "html_url": "https://github.com/pytorch/pytorch/pull/6243#discussion_r179332557", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/6243", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/179332557"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/6243#discussion_r179332557"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/6243"}}, "body_html": "<p>The comment is gone... so what are the semantics now, and why are they this way?</p>", "body_text": "The comment is gone... so what are the semantics now, and why are they this way?"}