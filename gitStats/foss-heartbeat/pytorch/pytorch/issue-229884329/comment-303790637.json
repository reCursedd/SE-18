{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/303790637", "html_url": "https://github.com/pytorch/pytorch/pull/1594#issuecomment-303790637", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/1594", "id": 303790637, "node_id": "MDEyOklzc3VlQ29tbWVudDMwMzc5MDYzNw==", "user": {"login": "colesbury", "id": 655866, "node_id": "MDQ6VXNlcjY1NTg2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/655866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colesbury", "html_url": "https://github.com/colesbury", "followers_url": "https://api.github.com/users/colesbury/followers", "following_url": "https://api.github.com/users/colesbury/following{/other_user}", "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions", "organizations_url": "https://api.github.com/users/colesbury/orgs", "repos_url": "https://api.github.com/users/colesbury/repos", "events_url": "https://api.github.com/users/colesbury/events{/privacy}", "received_events_url": "https://api.github.com/users/colesbury/received_events", "type": "User", "site_admin": false}, "created_at": "2017-05-24T17:13:03Z", "updated_at": "2017-05-24T17:13:03Z", "author_association": "MEMBER", "body_html": "<p>We discussed this earlier and I don't think these heuristics are a good idea. If you're worried that the caching allocator will unnecessarily hold on to large blocks, call <code>THCCachingAllocator_emptyCache</code> after benchmarking.</p>", "body_text": "We discussed this earlier and I don't think these heuristics are a good idea. If you're worried that the caching allocator will unnecessarily hold on to large blocks, call THCCachingAllocator_emptyCache after benchmarking.", "body": "We discussed this earlier and I don't think these heuristics are a good idea. If you're worried that the caching allocator will unnecessarily hold on to large blocks, call `THCCachingAllocator_emptyCache` after benchmarking. "}