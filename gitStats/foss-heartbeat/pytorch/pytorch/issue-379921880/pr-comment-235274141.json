{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/235274141", "pull_request_review_id": 177101409, "id": 235274141, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzNTI3NDE0MQ==", "diff_hunk": "@@ -90,35 +90,21 @@ class SpatialBNOp : public Operator<Context> {\n           alpha_data,\n           beta_data);\n     } else {\n-      auto* saved_mean = Output(SAVED_MEAN);\n-      auto* saved_rstd = Output(SAVED_INV_STD);\n-      if (num_batches_ == 1) {\n-        saved_mean->Resize(C);\n-        saved_rstd->Resize(C);\n-      } else {\n-        const auto& batch_mean_sum = Input(BATCH_MEAN_SUM);\n-        const auto& batch_var_sum = Input(BATCH_VAR_SUM);\n-        if (saved_mean != &batch_mean_sum) {\n-          saved_mean->Resize(C);\n-        }\n-        if (saved_rstd != &batch_var_sum) {\n-          saved_rstd->Resize(C);\n-        }\n-      }\n+      auto* saved_mean = Output(SAVED_MEAN, {C}, at::dtype<T>());\n+      auto* saved_rstd = Output(SAVED_INV_STD, {C}, at::dtype<T>());\n       T* saved_mean_data = saved_mean->template mutable_data<T>();\n       T* saved_rstd_data = saved_rstd->template mutable_data<T>();\n-      auto* running_mean = Output(RUNNING_MEAN);\n-      auto* running_var = Output(RUNNING_VAR);\n-      if (running_mean->numel() != C) {\n-        running_mean->Resize(C);\n-        math::Set<T, Context>(", "path": "caffe2/operators/spatial_batch_norm_op.h", "position": 27, "original_position": 27, "commit_id": "44a39b74ed6b9315a66f440e45176b3ec7767ab9", "original_commit_id": "cb3dc3e5064f10a0e9e0f3929908d372b3eb929c", "user": {"login": "dzhulgakov", "id": 17890620, "node_id": "MDQ6VXNlcjE3ODkwNjIw", "avatar_url": "https://avatars2.githubusercontent.com/u/17890620?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dzhulgakov", "html_url": "https://github.com/dzhulgakov", "followers_url": "https://api.github.com/users/dzhulgakov/followers", "following_url": "https://api.github.com/users/dzhulgakov/following{/other_user}", "gists_url": "https://api.github.com/users/dzhulgakov/gists{/gist_id}", "starred_url": "https://api.github.com/users/dzhulgakov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dzhulgakov/subscriptions", "organizations_url": "https://api.github.com/users/dzhulgakov/orgs", "repos_url": "https://api.github.com/users/dzhulgakov/repos", "events_url": "https://api.github.com/users/dzhulgakov/events{/privacy}", "received_events_url": "https://api.github.com/users/dzhulgakov/received_events", "type": "User", "site_admin": false}, "body": "yes, it's comparison for the first run effectively together with zero initialization of a tensor (and it's a bad design)\r\n\r\nThe hack you can do is check corresponding Input().size() (as it's \"enforce in place\") and if it's wrong - reset the output and do explicit zero-fill. It's if you want to play safe.\r\n\r\nAnother option is to just assert that the output already has the right size. It might be fine as most of the code I can find correctly initializes the buffers in init_net, so it would be fine.\r\n\r\nNote, that it's not fully safe to do your current code - if the size is wrong we'd silently resize the output without zero-fill and continue populating the garbage memory", "created_at": "2018-11-21T07:18:23Z", "updated_at": "2018-11-23T15:55:18Z", "html_url": "https://github.com/pytorch/pytorch/pull/13856#discussion_r235274141", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/13856", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/235274141"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/13856#discussion_r235274141"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/13856"}}, "body_html": "<p>yes, it's comparison for the first run effectively together with zero initialization of a tensor (and it's a bad design)</p>\n<p>The hack you can do is check corresponding Input().size() (as it's \"enforce in place\") and if it's wrong - reset the output and do explicit zero-fill. It's if you want to play safe.</p>\n<p>Another option is to just assert that the output already has the right size. It might be fine as most of the code I can find correctly initializes the buffers in init_net, so it would be fine.</p>\n<p>Note, that it's not fully safe to do your current code - if the size is wrong we'd silently resize the output without zero-fill and continue populating the garbage memory</p>", "body_text": "yes, it's comparison for the first run effectively together with zero initialization of a tensor (and it's a bad design)\nThe hack you can do is check corresponding Input().size() (as it's \"enforce in place\") and if it's wrong - reset the output and do explicit zero-fill. It's if you want to play safe.\nAnother option is to just assert that the output already has the right size. It might be fine as most of the code I can find correctly initializes the buffers in init_net, so it would be fine.\nNote, that it's not fully safe to do your current code - if the size is wrong we'd silently resize the output without zero-fill and continue populating the garbage memory", "in_reply_to_id": 232865374}