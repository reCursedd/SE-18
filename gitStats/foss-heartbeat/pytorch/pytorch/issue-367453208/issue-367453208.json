{"url": "https://api.github.com/repos/pytorch/pytorch/issues/12417", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/12417/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/12417/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/12417/events", "html_url": "https://github.com/pytorch/pytorch/issues/12417", "id": 367453208, "node_id": "MDU6SXNzdWUzNjc0NTMyMDg=", "number": 12417, "title": "More structured alternative to native_functions.yaml", "user": {"login": "LaurentMazare", "id": 1041292, "node_id": "MDQ6VXNlcjEwNDEyOTI=", "avatar_url": "https://avatars0.githubusercontent.com/u/1041292?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LaurentMazare", "html_url": "https://github.com/LaurentMazare", "followers_url": "https://api.github.com/users/LaurentMazare/followers", "following_url": "https://api.github.com/users/LaurentMazare/following{/other_user}", "gists_url": "https://api.github.com/users/LaurentMazare/gists{/gist_id}", "starred_url": "https://api.github.com/users/LaurentMazare/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LaurentMazare/subscriptions", "organizations_url": "https://api.github.com/users/LaurentMazare/orgs", "repos_url": "https://api.github.com/users/LaurentMazare/repos", "events_url": "https://api.github.com/users/LaurentMazare/events{/privacy}", "received_events_url": "https://api.github.com/users/LaurentMazare/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-10-06T12:33:58Z", "updated_at": "2018-10-07T18:34:04Z", "closed_at": null, "author_association": "CONTRIBUTOR", "body_html": "<h2><g-emoji class=\"g-emoji\" alias=\"rocket\" fallback-src=\"https://assets-cdn.github.com/images/icons/emoji/unicode/1f680.png\">\ud83d\ude80</g-emoji> Feature</h2>\n\n<p><a href=\"https://github.com/pytorch/pytorch/blob/master/aten/src/ATen/native/native_functions.yaml\">native_functions.yaml</a> provides a list of supported tensor functions/methods in YAML. The function description is given as a string, e.g.</p>\n<pre><code>- func: add(Tensor self, Tensor other, *, Scalar alpha=1) -&gt; Tensor\n</code></pre>\n<p>Maybe would it make sense to support a more structured version so that tools don't have to parse these strings.</p>\n<h2>Motivation</h2>\n\n<p>I'm currently writing <a href=\"https://github.com/LaurentMazare/ocaml-torch\">ocaml-pytorch</a> some experimental OCaml bindings for the C++ API of PyTorch.</p>\n<p>It's working pretty well so far, as there are lots of functions in the C++ tensor API, some of the bindings boilerplate code gets automatically generated from <code>native_functions.yaml</code>.</p>\n<h2>Pitch</h2>\n<p>Parsing the function description is a bit cumbersome. As an alternative, the yaml file (or some other files) could contain a more structured version of the same data. E.g instead of:</p>\n<pre><code>- func: add(Tensor self, Tensor other, *, Scalar alpha=1) -&gt; Tensor\n</code></pre>\n<p>Something like:</p>\n<pre><code>- funcname: add\n  args:\n    - argname: self\n      argtype: Tensor\n    - argname: other\n      argtype: Tensor\n    - argname: alpha\n      argtype: Scalar\n      default: 1\n  returns: Tensor\n</code></pre>\n\n<h2>Alternatives</h2>\n<p>Maybe there are some other files that can currently be scraped to obtain the same information. Reading directly <code>Tensor.h</code> would also be possible but not ideal as it's using the C syntax.</p>\n\n<h2>Additional context</h2>\n", "body_text": "\ud83d\ude80 Feature\n\nnative_functions.yaml provides a list of supported tensor functions/methods in YAML. The function description is given as a string, e.g.\n- func: add(Tensor self, Tensor other, *, Scalar alpha=1) -> Tensor\n\nMaybe would it make sense to support a more structured version so that tools don't have to parse these strings.\nMotivation\n\nI'm currently writing ocaml-pytorch some experimental OCaml bindings for the C++ API of PyTorch.\nIt's working pretty well so far, as there are lots of functions in the C++ tensor API, some of the bindings boilerplate code gets automatically generated from native_functions.yaml.\nPitch\nParsing the function description is a bit cumbersome. As an alternative, the yaml file (or some other files) could contain a more structured version of the same data. E.g instead of:\n- func: add(Tensor self, Tensor other, *, Scalar alpha=1) -> Tensor\n\nSomething like:\n- funcname: add\n  args:\n    - argname: self\n      argtype: Tensor\n    - argname: other\n      argtype: Tensor\n    - argname: alpha\n      argtype: Scalar\n      default: 1\n  returns: Tensor\n\n\nAlternatives\nMaybe there are some other files that can currently be scraped to obtain the same information. Reading directly Tensor.h would also be possible but not ideal as it's using the C syntax.\n\nAdditional context", "body": "## \ud83d\ude80 Feature\r\n<!-- A clear and concise description of the feature proposal -->\r\n[native_functions.yaml](https://github.com/pytorch/pytorch/blob/master/aten/src/ATen/native/native_functions.yaml) provides a list of supported tensor functions/methods in YAML. The function description is given as a string, e.g. \r\n```\r\n- func: add(Tensor self, Tensor other, *, Scalar alpha=1) -> Tensor\r\n```\r\nMaybe would it make sense to support a more structured version so that tools don't have to parse these strings.\r\n\r\n## Motivation\r\n\r\n<!-- Please outline the motivation for the proposal. Is your feature request related to a problem? e.g., I'm always frustrated when [...]. If this is related to another GitHub issue, please link here too -->\r\nI'm currently writing [ocaml-pytorch](https://github.com/LaurentMazare/ocaml-torch) some experimental OCaml bindings for the C++ API of PyTorch.\r\n\r\nIt's working pretty well so far, as there are lots of functions in the C++ tensor API, some of the bindings boilerplate code gets automatically generated from `native_functions.yaml`.\r\n\r\n\r\n## Pitch\r\nParsing the function description is a bit cumbersome. As an alternative, the yaml file (or some other files) could contain a more structured version of the same data. E.g instead of:\r\n```\r\n- func: add(Tensor self, Tensor other, *, Scalar alpha=1) -> Tensor\r\n```\r\nSomething like:\r\n```\r\n- funcname: add\r\n  args:\r\n    - argname: self\r\n      argtype: Tensor\r\n    - argname: other\r\n      argtype: Tensor\r\n    - argname: alpha\r\n      argtype: Scalar\r\n      default: 1\r\n  returns: Tensor\r\n```\r\n\r\n<!-- A clear and concise description of what you want to happen. -->\r\n\r\n## Alternatives\r\n\r\nMaybe there are some other files that can currently be scraped to obtain the same information. Reading directly `Tensor.h` would also be possible but not ideal as it's using the C syntax.\r\n<!-- A clear and concise description of any alternative solutions or features you've considered, if any. -->\r\n\r\n## Additional context\r\n\r\n<!-- Add any other context or screenshots about the feature request here. -->\r\n"}