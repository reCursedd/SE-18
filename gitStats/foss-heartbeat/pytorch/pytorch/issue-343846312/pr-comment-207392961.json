{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/207392961", "pull_request_review_id": 142998962, "id": 207392961, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzM5Mjk2MQ==", "diff_hunk": "@@ -72,6 +78,63 @@ static void applyGesv(Tensor& b, Tensor& A, std::vector<int64_t> infos) {\n   }\n }\n \n+std::tuple<Tensor&,Tensor&> _gesv_single_out_cpu(\n+    Tensor& sol, Tensor& lu,\n+    const Tensor& self, const Tensor& A) {\n+#ifndef USE_LAPACK\n+  AT_ERROR(\"gesv: LAPACK library not found in compilation\");\n+#endif\n+  int64_t bx = self.size(0);\n+  int64_t by = (self.dim() == 1) ? 1 : self.size(1);\n+  int64_t ax = A.size(0);\n+  int64_t ay = A.size(1);\n+  int info = 0;\n+\n+  /* Init to column major format. `sol` and `lu` need to be contiguous\n+   * since we pass sol.data() and lu.data() to Lapack */\n+  bool tc = sol.dim() == 2 && isTransposeContiguous(sol);\n+  if (tc) {\n+    // if transpose of output tensor is contiguous, use it\n+    sol.t_();\n+  }\n+\n+  sol.resize_({by, bx});\n+  if (self.data_ptr() == sol.data_ptr()) {", "path": "aten/src/ATen/native/Gesv.cpp", "position": null, "original_position": 47, "commit_id": "6c573ec2fe05deacdb8541c2229f21fa51d96e30", "original_commit_id": "a4ae8617d9d37adb709942b6fbace6af0d05842f", "user": {"login": "animesht", "id": 1777276, "node_id": "MDQ6VXNlcjE3NzcyNzY=", "avatar_url": "https://avatars3.githubusercontent.com/u/1777276?v=4", "gravatar_id": "", "url": "https://api.github.com/users/animesht", "html_url": "https://github.com/animesht", "followers_url": "https://api.github.com/users/animesht/followers", "following_url": "https://api.github.com/users/animesht/following{/other_user}", "gists_url": "https://api.github.com/users/animesht/gists{/gist_id}", "starred_url": "https://api.github.com/users/animesht/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/animesht/subscriptions", "organizations_url": "https://api.github.com/users/animesht/orgs", "repos_url": "https://api.github.com/users/animesht/repos", "events_url": "https://api.github.com/users/animesht/events{/privacy}", "received_events_url": "https://api.github.com/users/animesht/received_events", "type": "User", "site_admin": false}, "body": "Reverted to address check. However, it breaks when the output tensor is a view of the input tensor (address will not be the same so will try to copy data without a `.clone()` and get weird results). Is there any alternative method to check overlap between the two tensors and always clone if it exists?", "created_at": "2018-08-02T22:22:43Z", "updated_at": "2018-11-23T15:48:40Z", "html_url": "https://github.com/pytorch/pytorch/pull/9742#discussion_r207392961", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/9742", "author_association": "NONE", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/207392961"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/9742#discussion_r207392961"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/9742"}}, "body_html": "<p>Reverted to address check. However, it breaks when the output tensor is a view of the input tensor (address will not be the same so will try to copy data without a <code>.clone()</code> and get weird results). Is there any alternative method to check overlap between the two tensors and always clone if it exists?</p>", "body_text": "Reverted to address check. However, it breaks when the output tensor is a view of the input tensor (address will not be the same so will try to copy data without a .clone() and get weird results). Is there any alternative method to check overlap between the two tensors and always clone if it exists?", "in_reply_to_id": 207046012}