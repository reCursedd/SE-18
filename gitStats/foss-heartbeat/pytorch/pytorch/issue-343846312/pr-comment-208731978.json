{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/208731978", "pull_request_review_id": 144604073, "id": 208731978, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODczMTk3OA==", "diff_hunk": "@@ -72,6 +78,118 @@ static void applyGesv(Tensor& b, Tensor& A, std::vector<int64_t> infos) {\n   }\n }\n \n+std::tuple<Tensor&,Tensor&> _gesv_single_out_cpu(\n+    Tensor& sol, Tensor& lu,\n+    const Tensor& self, const Tensor& A) {\n+#ifndef USE_LAPACK\n+  AT_ERROR(\"gesv: LAPACK library not found in compilation\");\n+#endif\n+  /* gesv takes two tensors (self, A) and returns (sol, lu).\n+   * The output Tensors (sol, lu) may be the same as input Tensors (self, A)\n+   *\n+   * Before passing pointers into Lapack, we need to ensure that:\n+   * (i)  self and A are represented in column major format\n+   * (ii) These pointers point to contiguous data for self and A.\n+   *\n+   * For 2D matrices, A.t() and self.t() represent their column major formats.\n+   *\n+   * Case 1) The output tensor is of the correct shape, but it and its transpose\n+   *         are not contiguous. eg. torch.gesv(... , out=(n[::2], ...)):\n+   *         - clone input tensor into a buffer and use it\n+   *\n+   * Note: In both cases below, we resize_ if required. This helps to:\n+   *       (i)  Make output tensors bigger and contiguous, if required, and\n+   *       (ii) Unsqueeze potential 1D `sol`, eg. torch.gesv(b, A, out=(b, A))\n+   *\n+   * Case 2) output_tensor.t() is contiguous (tc_sol / tc_lu is true):\n+   *         a) &input_tensor == &output_tensor:\n+   *            - it's fine to use output_tensor.data() as-is. Do nothing.\n+   *              (we need to transpose input_tensor for column-major anyway)\n+   *         b) &input_tensor != &output_tensor:\n+   *            - copy input_tensor.t() to output_tensor.t()\n+   *\n+   * Case 3) output_tensor.t() is not contiguous:\n+   *         - resize_ should make non-contig/incorrectly-sized tensors usable\n+   *         a) &input_tensor == &output_tensor:\n+   *            - copy input_tensor.t() to itself -- clone before copying\n+   *         b) &input_tensor != &output_tensor:\n+   *            - copy input_tensor.t() to output_tensor\n+   */\n+  int64_t bx = self.size(0);\n+  int64_t by = (self.dim() == 1) ? 1 : self.size(1);\n+  int64_t ax = A.size(0);\n+  int64_t ay = A.size(1);\n+  int info = 0;\n+  bool tc_sol = isTransposeContiguous(sol);\n+  bool tc_lu = isTransposeContiguous(lu);\n+  bool sol_correct_shape = sol.dim() == 2 &&\n+                           sol.size(0) == bx && sol.size(1) == by;\n+  bool lu_correct_shape = lu.dim() == 2 && lu.size(0) == ax && lu.size(1) == ay;\n+  Tensor temp_sol;\n+  Tensor temp_lu;\n+\n+  /* self is always viewable to {bx, by} since they are the dimensions\n+   * of self (or by == 1). Basically a shortcut to see 1D `self` as 2D */\n+  auto self_t = self.view({bx, by}).t();", "path": "aten/src/ATen/native/Gesv.cpp", "position": null, "original_position": 78, "commit_id": "6c573ec2fe05deacdb8541c2229f21fa51d96e30", "original_commit_id": "91de09fc44e95449998ea9c153d4632f761f7f39", "user": {"login": "animesht", "id": 1777276, "node_id": "MDQ6VXNlcjE3NzcyNzY=", "avatar_url": "https://avatars3.githubusercontent.com/u/1777276?v=4", "gravatar_id": "", "url": "https://api.github.com/users/animesht", "html_url": "https://github.com/animesht", "followers_url": "https://api.github.com/users/animesht/followers", "following_url": "https://api.github.com/users/animesht/following{/other_user}", "gists_url": "https://api.github.com/users/animesht/gists{/gist_id}", "starred_url": "https://api.github.com/users/animesht/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/animesht/subscriptions", "organizations_url": "https://api.github.com/users/animesht/orgs", "repos_url": "https://api.github.com/users/animesht/repos", "events_url": "https://api.github.com/users/animesht/events{/privacy}", "received_events_url": "https://api.github.com/users/animesht/received_events", "type": "User", "site_admin": false}, "body": "I used `.view().t()` since we may not actually need to use `self_t` in one case (when `tc_sol == true` and `&sol == &self`), so we can avoid doing additional work if it's not being copied. Are there any other benefits to doing an inplace `t_()` here?", "created_at": "2018-08-08T20:53:09Z", "updated_at": "2018-11-23T15:48:59Z", "html_url": "https://github.com/pytorch/pytorch/pull/9742#discussion_r208731978", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/9742", "author_association": "NONE", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/208731978"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/9742#discussion_r208731978"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/9742"}}, "body_html": "<p>I used <code>.view().t()</code> since we may not actually need to use <code>self_t</code> in one case (when <code>tc_sol == true</code> and <code>&amp;sol == &amp;self</code>), so we can avoid doing additional work if it's not being copied. Are there any other benefits to doing an inplace <code>t_()</code> here?</p>", "body_text": "I used .view().t() since we may not actually need to use self_t in one case (when tc_sol == true and &sol == &self), so we can avoid doing additional work if it's not being copied. Are there any other benefits to doing an inplace t_() here?", "in_reply_to_id": 208724707}