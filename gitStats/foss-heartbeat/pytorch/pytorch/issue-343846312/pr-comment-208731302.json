{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/208731302", "pull_request_review_id": 144603209, "id": 208731302, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODczMTMwMg==", "diff_hunk": "@@ -72,6 +78,107 @@ static void applyGesv(Tensor& b, Tensor& A, std::vector<int64_t> infos) {\n   }\n }\n \n+std::tuple<Tensor&,Tensor&> _gesv_single_out_cpu(\n+    Tensor& sol, Tensor& lu,\n+    const Tensor& self, const Tensor& A) {\n+#ifndef USE_LAPACK\n+  AT_ERROR(\"gesv: LAPACK library not found in compilation\");\n+#endif\n+  int64_t bx = self.size(0);\n+  int64_t by = (self.dim() == 1) ? 1 : self.size(1);\n+  int64_t ax = A.size(0);\n+  int64_t ay = A.size(1);\n+  int info = 0;\n+  Tensor temp_sol;\n+  Tensor temp_lu;\n+\n+  /* Init to column major format. `sol` and `lu` need to be contiguous\n+   * since we pass sol.data() and lu.data() to Lapack */\n+  bool tc_sol = isTransposeContiguous(sol);\n+  auto self_t = self.view({bx, by}).t();\n+  if (!tc_sol &&\n+      !sol.is_contiguous() &&\n+      sol.dim() == 2 &&\n+      sol.size(0) == bx &&\n+      sol.size(1) == by) {\n+    // eg. torch.gesv(.., out=(n[::2], ...))\n+    temp_sol = self_t.clone();\n+  }\n+\n+  if (!temp_sol.defined()) {\n+    if (tc_sol) {\n+      sol.t().resize_({by, bx});\n+    } else {\n+      sol.resize_({by, bx});\n+    }\n+    if (&self == &sol) {\n+      // note: not a comprehensive check. Will fail for views\n+      if (!tc_sol) {\n+        sol.copy_(self_t.clone());\n+      }\n+    } else {\n+      if (tc_sol) {\n+        sol.t().copy_(self_t);\n+      } else {\n+        sol.copy_(self_t);\n+      }\n+    }\n+  }\n+\n+  bool tc_lu = isTransposeContiguous(lu);\n+  if (!tc_lu &&\n+      !lu.is_contiguous() &&\n+      lu.dim() == 2 &&\n+      lu.size(0) == ax &&\n+      lu.size(1) == ay) {\n+    temp_lu = A.t().clone();\n+  }\n+\n+  if (!temp_lu.defined()) {\n+    if (tc_lu) {\n+      lu.t().resize_({ay, ax});\n+    } else {\n+      lu.resize_({ay, ax});\n+    }\n+    if (&A == &lu) {\n+      if (!tc_lu) {\n+        lu.copy_(A.t().clone());\n+      }\n+    } else {\n+      if (tc_lu) {\n+        lu.t().copy_(A.t());\n+      } else {\n+        lu.copy_(A.t());\n+      }\n+    }\n+  }\n+\n+  AT_DISPATCH_FLOATING_TYPES(self.type(), \"gesv\", [&]{\n+    auto A_ptr = temp_lu.defined() ? temp_lu.data<scalar_t>()\n+                                   : lu.data<scalar_t>();\n+    auto b_ptr = temp_sol.defined() ? temp_sol.data<scalar_t>()\n+                                    : sol.data<scalar_t>();\n+    auto ipiv = at::empty({bx}, sol.options().dtype(kInt));\n+    lapackGesv<scalar_t>(bx, by, A_ptr, bx, ipiv.data<int>(), b_ptr, bx, &info);\n+  });\n+\n+  checkErrors({info});\n+\n+  if (temp_sol.defined()) {\n+    sol.copy_(temp_sol.t_());\n+  } else if (!tc_sol) {\n+    sol.t_();", "path": "aten/src/ATen/native/Gesv.cpp", "position": null, "original_position": 115, "commit_id": "6c573ec2fe05deacdb8541c2229f21fa51d96e30", "original_commit_id": "2a3644b8476df19d674a3982c37e918cdc61c89a", "user": {"login": "animesht", "id": 1777276, "node_id": "MDQ6VXNlcjE3NzcyNzY=", "avatar_url": "https://avatars3.githubusercontent.com/u/1777276?v=4", "gravatar_id": "", "url": "https://api.github.com/users/animesht", "html_url": "https://github.com/animesht", "followers_url": "https://api.github.com/users/animesht/followers", "following_url": "https://api.github.com/users/animesht/following{/other_user}", "gists_url": "https://api.github.com/users/animesht/gists{/gist_id}", "starred_url": "https://api.github.com/users/animesht/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/animesht/subscriptions", "organizations_url": "https://api.github.com/users/animesht/orgs", "repos_url": "https://api.github.com/users/animesht/repos", "events_url": "https://api.github.com/users/animesht/events{/privacy}", "received_events_url": "https://api.github.com/users/animesht/received_events", "type": "User", "site_admin": false}, "body": "Yeah I put it here since we wanted to avoid using t_() before all error checks were done, but I can move it to case 3", "created_at": "2018-08-08T20:51:00Z", "updated_at": "2018-11-23T15:48:59Z", "html_url": "https://github.com/pytorch/pytorch/pull/9742#discussion_r208731302", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/9742", "author_association": "NONE", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/208731302"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/9742#discussion_r208731302"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/9742"}}, "body_html": "<p>Yeah I put it here since we wanted to avoid using t_() before all error checks were done, but I can move it to case 3</p>", "body_text": "Yeah I put it here since we wanted to avoid using t_() before all error checks were done, but I can move it to case 3", "in_reply_to_id": 208405389}