{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/205805377", "pull_request_review_id": 141151556, "id": 205805377, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTgwNTM3Nw==", "diff_hunk": "@@ -138,6 +160,35 @@ std::tuple<Tensor,Tensor> _gesv_helper_cuda(const Tensor& self, const Tensor& A)\n   return std::tuple<Tensor,Tensor>(b_working_copy, A_working_copy);\n }\n \n+std::tuple<Tensor&,Tensor&> _gesv_single_out_cuda(Tensor& result0, Tensor& result1,\n+    const Tensor& self, const Tensor& A) {\n+#ifndef USE_MAGMA\n+AT_ERROR(\"gesv: MAGMA library not found in \"\n+    \"compilation. Please rebuild with MAGMA.\");\n+#else\n+  int64_t bx = self.size(0);\n+  int64_t by = (self.dim() == 1) ? 1 : self.size(1);\n+  int info;\n+  int* ipiv;\n+\n+  result1 = A.t().clone();", "path": "aten/src/ATen/native/cuda/Gesv.cu", "position": null, "original_position": 44, "commit_id": "6c573ec2fe05deacdb8541c2229f21fa51d96e30", "original_commit_id": "152f0cb968488561d7dc89facfc14cfb6cddd26f", "user": {"login": "zou3519", "id": 5652049, "node_id": "MDQ6VXNlcjU2NTIwNDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/5652049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zou3519", "html_url": "https://github.com/zou3519", "followers_url": "https://api.github.com/users/zou3519/followers", "following_url": "https://api.github.com/users/zou3519/following{/other_user}", "gists_url": "https://api.github.com/users/zou3519/gists{/gist_id}", "starred_url": "https://api.github.com/users/zou3519/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zou3519/subscriptions", "organizations_url": "https://api.github.com/users/zou3519/orgs", "repos_url": "https://api.github.com/users/zou3519/repos", "events_url": "https://api.github.com/users/zou3519/events{/privacy}", "received_events_url": "https://api.github.com/users/zou3519/received_events", "type": "User", "site_admin": false}, "body": "edit: I thought about it some more and `.t().clone()` is fine.\r\n\r\nYou could call https://github.com/pytorch/pytorch/blob/71626491c40c86eb1ee410e695c467486084144c/aten/src/ATen/native/LinearAlgebraUtils.h#L15 instead (and probably rename the function to something like \"cloneColumnMajor\") so this becomes clearer.", "created_at": "2018-07-27T15:05:45Z", "updated_at": "2018-11-23T15:48:19Z", "html_url": "https://github.com/pytorch/pytorch/pull/9742#discussion_r205805377", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/9742", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/205805377"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/9742#discussion_r205805377"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/9742"}}, "body_html": "<p>edit: I thought about it some more and <code>.t().clone()</code> is fine.</p>\n<p>You could call <div class=\"border rounded-1 my-2\">\n  <div class=\"f6 px-3 py-2 lh-condensed border-bottom bg-gray-light\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/pytorch/pytorch/blob/71626491c40c86eb1ee410e695c467486084144c/aten/src/ATen/native/LinearAlgebraUtils.h#L15\">pytorch/aten/src/ATen/native/LinearAlgebraUtils.h</a>\n    </p>\n    <p class=\"mb-0 text-gray-light\">\n         Line 15\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/pytorch/pytorch/commit/71626491c40c86eb1ee410e695c467486084144c\">7162649</a>\n    </p>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L15\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"15\"></td>\n          <td id=\"LC15\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-k\">static</span> <span class=\"pl-k\">inline</span> Tensor <span class=\"pl-en\">cloneBatchedColumnMajor</span>(<span class=\"pl-k\">const</span> Tensor&amp; src) { </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n instead (and probably rename the function to something like \"cloneColumnMajor\") so this becomes clearer.</p>", "body_text": "edit: I thought about it some more and .t().clone() is fine.\nYou could call \n  \n    \n      pytorch/aten/src/ATen/native/LinearAlgebraUtils.h\n    \n    \n         Line 15\n      in\n      7162649\n    \n    \n    \n    \n\n        \n          \n           static inline Tensor cloneBatchedColumnMajor(const Tensor& src) { \n        \n    \n  \n\n instead (and probably rename the function to something like \"cloneColumnMajor\") so this becomes clearer.", "in_reply_to_id": 205797753}