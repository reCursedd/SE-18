{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/309270327", "html_url": "https://github.com/pytorch/pytorch/pull/1779#issuecomment-309270327", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/1779", "id": 309270327, "node_id": "MDEyOklzc3VlQ29tbWVudDMwOTI3MDMyNw==", "user": {"login": "vlasenkov", "id": 13369474, "node_id": "MDQ6VXNlcjEzMzY5NDc0", "avatar_url": "https://avatars3.githubusercontent.com/u/13369474?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vlasenkov", "html_url": "https://github.com/vlasenkov", "followers_url": "https://api.github.com/users/vlasenkov/followers", "following_url": "https://api.github.com/users/vlasenkov/following{/other_user}", "gists_url": "https://api.github.com/users/vlasenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vlasenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vlasenkov/subscriptions", "organizations_url": "https://api.github.com/users/vlasenkov/orgs", "repos_url": "https://api.github.com/users/vlasenkov/repos", "events_url": "https://api.github.com/users/vlasenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/vlasenkov/received_events", "type": "User", "site_admin": false}, "created_at": "2017-06-18T10:57:01Z", "updated_at": "2017-06-18T11:01:31Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=9110200\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/fmassa\">@fmassa</a>, PR is ready for review.<br>\nIt's usual for target to be 2 or 3, and when summing loss for a large sample the error of approximation grows, so I wanted to add optional ability to compute exact <code>log(target!)</code> for small target values. This could be implemented as:</p>\n<pre><code>mask = target &lt;= 10\nloss[mask] += target[mask].apply_(lambda x: math.log(math.factorial(x)))\nloss[~mask] += ...  # Stirling approximation\n</code></pre>\n<p>But <code>autograd.Variable</code> has no <code>apply</code> member. This would not have impact on automatic differentiation because we do not need to compute derivative w.r.t <code>target</code>. Are there some workarounds?</p>", "body_text": "@fmassa, PR is ready for review.\nIt's usual for target to be 2 or 3, and when summing loss for a large sample the error of approximation grows, so I wanted to add optional ability to compute exact log(target!) for small target values. This could be implemented as:\nmask = target <= 10\nloss[mask] += target[mask].apply_(lambda x: math.log(math.factorial(x)))\nloss[~mask] += ...  # Stirling approximation\n\nBut autograd.Variable has no apply member. This would not have impact on automatic differentiation because we do not need to compute derivative w.r.t target. Are there some workarounds?", "body": "@fmassa, PR is ready for review.\r\nIt's usual for target to be 2 or 3, and when summing loss for a large sample the error of approximation grows, so I wanted to add optional ability to compute exact `log(target!)` for small target values. This could be implemented as:\r\n```\r\nmask = target <= 10\r\nloss[mask] += target[mask].apply_(lambda x: math.log(math.factorial(x)))\r\nloss[~mask] += ...  # Stirling approximation\r\n```\r\nBut `autograd.Variable` has no `apply` member. This would not have impact on automatic differentiation because we do not need to compute derivative w.r.t `target`. Are there some workarounds?"}