{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/122521243", "pull_request_review_id": 44650196, "id": 122521243, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMjUyMTI0Mw==", "diff_hunk": "@@ -547,6 +547,22 @@ def nll_loss(input, target, weight=None, size_average=True):\n     return f(input, target)\n \n \n+def poisson_nll_loss(log_input, target, size_average=True):\n+    r\"\"\"Poisson negative log likelihood loss.\n+\n+    Drops :math:`log(target!)` term. See :class:`~torch.nn.PoissonNLLLoss` for details.\n+\n+    Args:\n+        log_input: :math:`log(input)`\n+        target: :math:`target \\sim Pois(input)`\n+    \"\"\"\n+    loss = torch.exp(log_input) - target * log_input", "path": "torch/nn/functional.py", "position": null, "original_position": 13, "commit_id": "e25e166720fb43a89f40f671d8b3267c0881c093", "original_commit_id": "cae7d3088d7899a139f461ba39e8cd4b9579b8e0", "user": {"login": "fmassa", "id": 9110200, "node_id": "MDQ6VXNlcjkxMTAyMDA=", "avatar_url": "https://avatars2.githubusercontent.com/u/9110200?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fmassa", "html_url": "https://github.com/fmassa", "followers_url": "https://api.github.com/users/fmassa/followers", "following_url": "https://api.github.com/users/fmassa/following{/other_user}", "gists_url": "https://api.github.com/users/fmassa/gists{/gist_id}", "starred_url": "https://api.github.com/users/fmassa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fmassa/subscriptions", "organizations_url": "https://api.github.com/users/fmassa/orgs", "repos_url": "https://api.github.com/users/fmassa/repos", "events_url": "https://api.github.com/users/fmassa/events{/privacy}", "received_events_url": "https://api.github.com/users/fmassa/received_events", "type": "User", "site_admin": false}, "body": "I see.\r\nThis loss seems a bit too niche, but as it's implemented in TF then maybe it would make sense to have it.\r\nMaybe it would be good then to also add the stirling's approximation for the loss as an argument? It seems that we can easily implement it following [TF implementation](https://github.com/tensorflow/tensorflow/blob/r1.2/tensorflow/python/ops/nn_impl.py#L88-L96)?", "created_at": "2017-06-16T19:54:15Z", "updated_at": "2018-11-23T15:33:55Z", "html_url": "https://github.com/pytorch/pytorch/pull/1779#discussion_r122521243", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/1779", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/122521243"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/1779#discussion_r122521243"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/1779"}}, "body_html": "<p>I see.<br>\nThis loss seems a bit too niche, but as it's implemented in TF then maybe it would make sense to have it.<br>\nMaybe it would be good then to also add the stirling's approximation for the loss as an argument? It seems that we can easily implement it following <a href=\"https://github.com/tensorflow/tensorflow/blob/r1.2/tensorflow/python/ops/nn_impl.py#L88-L96\">TF implementation</a>?</p>", "body_text": "I see.\nThis loss seems a bit too niche, but as it's implemented in TF then maybe it would make sense to have it.\nMaybe it would be good then to also add the stirling's approximation for the loss as an argument? It seems that we can easily implement it following TF implementation?", "in_reply_to_id": 122468298}