{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/176812995", "pull_request_review_id": 106588859, "id": 176812995, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NjgxMjk5NQ==", "diff_hunk": "@@ -5897,3 +5900,325 @@\n     )\n \n \"\"\")\n+\n+add_docstr(torch.fft,\n+           r\"\"\"\n+fft(input, signal_ndim, normalized=False) -> Tensor\n+\n+Complex-to-complex Discrete Fourier Transform\n+\n+This method computes the complex-to-complex discrete Fourier transform.\n+Ignoring the batch dimension, it computes the following expression:\n+\n+.. math::\n+    X[\\omega_1, \\dots, \\omega_d] =\n+        \\frac{1}{\\prod_{i=1}^d N_i} \\sum_{n_1=0}^{N_1} \\dots \\sum_{n_d=0}^{N_d} x[n_1, \\dots, n_d]\n+         e^{-j\\ 2 \\pi \\sum_{i=0}^d \\frac{\\omega_i n_i}{N_i}},\n+\n+where :math:`d`=:attr:`signal_ndim` is number of dimensions for the\n+signal, and :math:`N_i` is the size of signal dimension :math:`i`.\n+\n+This method supports 1D, 2D and 3D complex-to-complex transforms, indicated\n+by :attr:`signal_ndim`. :attr:`input` must be a tensor with last dimension\n+of size 2, representing the real and imaginary components of complex\n+numbers. Also :attr:`input` should be of ``signal_ndim + 1`` dimensions or\n+``signal_ndim + 2`` dimensions with batched data. If :attr:`normalized` is\n+set to ``True``, this returns the normalized Fourier transform results,\n+i.e., divided by :math:`\\sqrt{\\prod_{i=1}^d N_i}`, to become a unitary\n+operator.\n+\n+Returns the real and the imaginary parts together as one tensor of size\n+:math:`(* \\times 2)`, where :math:`*` is the shape of\n+:attr:`input`.\n+\n+The inverse of this function is :func:`ifft`.\n+\n+.. warning::\n+    For CPU tensors, this method is currently only available with MKL\n+    installed.\n+\n+Arguments:\n+    input (Tensor): the input tensor", "path": "torch/_torch_docs.py", "position": null, "original_position": 81, "commit_id": "4f42e27b4155bfc1db469b02be6a050eba627e5d", "original_commit_id": "f4cfc3bf0b8890b02d047b13801981282d93425c", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "What is the format of the dimensions of the input tensor?", "created_at": "2018-03-23T17:42:44Z", "updated_at": "2018-11-23T15:41:05Z", "html_url": "https://github.com/pytorch/pytorch/pull/5537#discussion_r176812995", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/5537", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/176812995"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/5537#discussion_r176812995"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/5537"}}, "body_html": "<p>What is the format of the dimensions of the input tensor?</p>", "body_text": "What is the format of the dimensions of the input tensor?"}