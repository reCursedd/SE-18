{"url": "https://api.github.com/repos/pytorch/pytorch/issues/13482", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/13482/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/13482/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/13482/events", "html_url": "https://github.com/pytorch/pytorch/pull/13482", "id": 376592408, "node_id": "MDExOlB1bGxSZXF1ZXN0MjI3Nzc2NjQ4", "number": 13482, "title": "Restructure torch/torch.h and extension.h", "user": {"login": "goldsborough", "id": 6429851, "node_id": "MDQ6VXNlcjY0Mjk4NTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/6429851?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goldsborough", "html_url": "https://github.com/goldsborough", "followers_url": "https://api.github.com/users/goldsborough/followers", "following_url": "https://api.github.com/users/goldsborough/following{/other_user}", "gists_url": "https://api.github.com/users/goldsborough/gists{/gist_id}", "starred_url": "https://api.github.com/users/goldsborough/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goldsborough/subscriptions", "organizations_url": "https://api.github.com/users/goldsborough/orgs", "repos_url": "https://api.github.com/users/goldsborough/repos", "events_url": "https://api.github.com/users/goldsborough/events{/privacy}", "received_events_url": "https://api.github.com/users/goldsborough/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-11-01T22:16:18Z", "updated_at": "2018-11-06T22:42:05Z", "closed_at": "2018-11-06T00:48:21Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/13482", "html_url": "https://github.com/pytorch/pytorch/pull/13482", "diff_url": "https://github.com/pytorch/pytorch/pull/13482.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/13482.patch"}, "body_html": "<p>This PR restructures the public-facing C++ headers in a backwards compatible way. The problem right now is that the C++ extension header <code>torch/extension.h</code> does not include the C++ frontend headers from <code>torch/torch.h</code>. However, those C++ frontend headers can be convenient. Further, including the C++ frontend main header <code>torch/torch.h</code> in a C++ extension currently raises a warning because we want to move people away from exclusively including <code>torch/torch.h</code> in extensions (which was the correct thing 6 months ago), since that <em>used</em> to be the main C++ extension header but is now the main C++ frontend header. In short: it should be possible to include the C++ frontend functionality from <code>torch/torch.h</code>, but without including that header directly because it's deprecated for extensions.</p>\n<p>For clarification: why is <code>torch/torch.h</code> deprecated for extensions? Because for extensions we need to include Python stuff, but for the C++ frontend we don't want this Python stuff. For now the python stuff is included in <code>torch/torch.h</code> whenever the header is used from a C++ extension (enabled by a macro passed by <code>cpp_extensions.py</code>) to not break existing users, but this should change in the future.</p>\n<p>The overall fix is simple:</p>\n<ol>\n<li>C++ frontend sub-headers move from <code>torch/torch.h</code> into <code>torch/all.h</code>.</li>\n<li><code>torch/all.h</code> is included in:\n<ol>\n<li><code>torch/torch.h</code>, as is.</li>\n<li><code>torch/extensions.h</code>, to now also give C++ extension users this functionality.</li>\n</ol>\n</li>\n</ol>\n<p>With the next release we can then:</p>\n<ol>\n<li>Remove the Python includes from <code>torch/torch.h</code></li>\n<li>Move C++-only sub-headers from <code>all.h</code> back into <code>torch.h</code></li>\n<li>Make <code>extension.h</code> include <code>torch.h</code> and <code>Python.h</code></li>\n</ol>\n<p>This will then break old C++ extensions that include <code>torch/torch.h</code>, since the correct header for C++ extensions is <code>torch/extension.h</code>.</p>\n<p>I've also gone ahead and deprecated <code>torch::CPU</code> et al. since those are long due to die.</p>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=13564\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ezyang\">@ezyang</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1310570\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/soumith\">@soumith</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=4583066\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/apaszke\">@apaszke</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=9110200\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/fmassa\">@fmassa</a></p>", "body_text": "This PR restructures the public-facing C++ headers in a backwards compatible way. The problem right now is that the C++ extension header torch/extension.h does not include the C++ frontend headers from torch/torch.h. However, those C++ frontend headers can be convenient. Further, including the C++ frontend main header torch/torch.h in a C++ extension currently raises a warning because we want to move people away from exclusively including torch/torch.h in extensions (which was the correct thing 6 months ago), since that used to be the main C++ extension header but is now the main C++ frontend header. In short: it should be possible to include the C++ frontend functionality from torch/torch.h, but without including that header directly because it's deprecated for extensions.\nFor clarification: why is torch/torch.h deprecated for extensions? Because for extensions we need to include Python stuff, but for the C++ frontend we don't want this Python stuff. For now the python stuff is included in torch/torch.h whenever the header is used from a C++ extension (enabled by a macro passed by cpp_extensions.py) to not break existing users, but this should change in the future.\nThe overall fix is simple:\n\nC++ frontend sub-headers move from torch/torch.h into torch/all.h.\ntorch/all.h is included in:\n\ntorch/torch.h, as is.\ntorch/extensions.h, to now also give C++ extension users this functionality.\n\n\n\nWith the next release we can then:\n\nRemove the Python includes from torch/torch.h\nMove C++-only sub-headers from all.h back into torch.h\nMake extension.h include torch.h and Python.h\n\nThis will then break old C++ extensions that include torch/torch.h, since the correct header for C++ extensions is torch/extension.h.\nI've also gone ahead and deprecated torch::CPU et al. since those are long due to die.\n@ezyang @soumith @apaszke @fmassa", "body": "This PR restructures the public-facing C++ headers in a backwards compatible way. The problem right now is that the C++ extension header `torch/extension.h` does not include the C++ frontend headers from `torch/torch.h`. However, those C++ frontend headers can be convenient. Further, including the C++ frontend main header `torch/torch.h` in a C++ extension currently raises a warning because we want to move people away from exclusively including `torch/torch.h` in extensions (which was the correct thing 6 months ago), since that *used* to be the main C++ extension header but is now the main C++ frontend header. In short: it should be possible to include the C++ frontend functionality from `torch/torch.h`, but without including that header directly because it's deprecated for extensions. \r\n\r\nFor clarification: why is `torch/torch.h` deprecated for extensions? Because for extensions we need to include Python stuff, but for the C++ frontend we don't want this Python stuff. For now the python stuff is included in `torch/torch.h` whenever the header is used from a C++ extension (enabled by a macro passed by `cpp_extensions.py`) to not break existing users, but this should change in the future.\r\n\r\nThe overall fix is simple:\r\n\r\n1. C++ frontend sub-headers move from `torch/torch.h` into `torch/all.h`.\r\n2. `torch/all.h` is included in:\r\n    1. `torch/torch.h`, as is.\r\n    2. `torch/extensions.h`, to now also give C++ extension users this functionality.\r\n\r\n\r\nWith the next release we can then:\r\n1. Remove the Python includes from `torch/torch.h`\r\n2. Move C++-only sub-headers from `all.h` back into `torch.h`\r\n3. Make `extension.h` include `torch.h` and `Python.h`\r\n\r\nThis will then break old C++ extensions that include `torch/torch.h`, since the correct header for C++ extensions is `torch/extension.h`.\r\n\r\nI've also gone ahead and deprecated `torch::CPU` et al. since those are long due to die.\r\n\r\n@ezyang @soumith @apaszke @fmassa "}