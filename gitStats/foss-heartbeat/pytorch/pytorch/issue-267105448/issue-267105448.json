{"url": "https://api.github.com/repos/pytorch/pytorch/issues/3197", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/3197/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/3197/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/3197/events", "html_url": "https://github.com/pytorch/pytorch/issues/3197", "id": 267105448, "node_id": "MDU6SXNzdWUyNjcxMDU0NDg=", "number": 3197, "title": "Inconsistent behavior of F.softmax on CPU and GPU", "user": {"login": "jihunchoi", "id": 1898501, "node_id": "MDQ6VXNlcjE4OTg1MDE=", "avatar_url": "https://avatars2.githubusercontent.com/u/1898501?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jihunchoi", "html_url": "https://github.com/jihunchoi", "followers_url": "https://api.github.com/users/jihunchoi/followers", "following_url": "https://api.github.com/users/jihunchoi/following{/other_user}", "gists_url": "https://api.github.com/users/jihunchoi/gists{/gist_id}", "starred_url": "https://api.github.com/users/jihunchoi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jihunchoi/subscriptions", "organizations_url": "https://api.github.com/users/jihunchoi/orgs", "repos_url": "https://api.github.com/users/jihunchoi/repos", "events_url": "https://api.github.com/users/jihunchoi/events{/privacy}", "received_events_url": "https://api.github.com/users/jihunchoi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-10-20T08:49:27Z", "updated_at": "2017-10-20T08:54:41Z", "closed_at": "2017-10-20T08:54:41Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Recently, <code>functional.softmax</code> has been changed to accept <code>dim</code> as argument.<br>\nWhen run on CPU, I can specify arbitrary value for <code>dim</code>, whether <code>input</code> is 2D or 3D.</p>\n<p>For example, the following code works without any problem:</p>\n<pre><code>In [23]: functional.softmax(Variable(torch.ones(3, 4)), dim=0)\nOut[23]: \nVariable containing:\n 0.3333  0.3333  0.3333  0.3333\n 0.3333  0.3333  0.3333  0.3333\n 0.3333  0.3333  0.3333  0.3333\n[torch.FloatTensor of size 3x4]\n\nIn [24]: functional.softmax(Variable(torch.ones(3, 4, 5)), dim=1)\nOut[24]: \nVariable containing:\n(0 ,.,.) = \n  0.2500  0.2500  0.2500  0.2500  0.2500\n  0.2500  0.2500  0.2500  0.2500  0.2500\n  0.2500  0.2500  0.2500  0.2500  0.2500\n  0.2500  0.2500  0.2500  0.2500  0.2500\n\n(1 ,.,.) = \n  0.2500  0.2500  0.2500  0.2500  0.2500\n  0.2500  0.2500  0.2500  0.2500  0.2500\n  0.2500  0.2500  0.2500  0.2500  0.2500\n  0.2500  0.2500  0.2500  0.2500  0.2500\n\n(2 ,.,.) = \n  0.2500  0.2500  0.2500  0.2500  0.2500\n  0.2500  0.2500  0.2500  0.2500  0.2500\n  0.2500  0.2500  0.2500  0.2500  0.2500\n  0.2500  0.2500  0.2500  0.2500  0.2500\n[torch.FloatTensor of size 3x4x5]\n</code></pre>\n<p>However, when the computation is performed in GPU, the flexibility decreases.</p>\n<pre><code>In [25]: functional.softmax(Variable(torch.ones(3, 4)).cuda(), dim=0)\n---------------------------------------------------------------------------\nRuntimeError                              Traceback (most recent call last)\n&lt;ipython-input-25-d95ff8a04b77&gt; in &lt;module&gt;()\n----&gt; 1 functional.softmax(Variable(torch.ones(3, 4)).cuda(), dim=0)\n\n~/anaconda3/envs/ml/lib/python3.6/site-packages/torch/nn/functional.py in softmax(input, dim, _stacklevel)\n    648     if dim is None:\n    649         dim = _get_softmax_dim('softmax', input.dim(), _stacklevel)\n--&gt; 650     return _Softmax(dim)(input)\n    651 \n    652 \n\nRuntimeError: invalid argument 4: dim has to be 1 for 2D input at /home/jhchoi/workspace/pytorch/torch/lib/THCUNN/generic/SoftMax.cu:32\n\nIn [26]: functional.softmax(Variable(torch.ones(3, 4, 5)).cuda(), dim=1)\n---------------------------------------------------------------------------\nRuntimeError                              Traceback (most recent call last)\n&lt;ipython-input-26-672d6d5d3b8d&gt; in &lt;module&gt;()\n----&gt; 1 functional.softmax(Variable(torch.ones(3, 4, 5)).cuda(), dim=1)\n\n~/anaconda3/envs/ml/lib/python3.6/site-packages/torch/nn/functional.py in softmax(input, dim, _stacklevel)\n    648     if dim is None:\n    649         dim = _get_softmax_dim('softmax', input.dim(), _stacklevel)\n--&gt; 650     return _Softmax(dim)(input)\n    651 \n    652 \n\nRuntimeError: invalid argument 4: dim has to be 0 for 3D input at /home/jhchoi/workspace/pytorch/torch/lib/THCUNN/generic/SoftMax.cu:42\n</code></pre>\n<p>Is it intended behavior? If it is, then I think it should be specified in the document.</p>", "body_text": "Recently, functional.softmax has been changed to accept dim as argument.\nWhen run on CPU, I can specify arbitrary value for dim, whether input is 2D or 3D.\nFor example, the following code works without any problem:\nIn [23]: functional.softmax(Variable(torch.ones(3, 4)), dim=0)\nOut[23]: \nVariable containing:\n 0.3333  0.3333  0.3333  0.3333\n 0.3333  0.3333  0.3333  0.3333\n 0.3333  0.3333  0.3333  0.3333\n[torch.FloatTensor of size 3x4]\n\nIn [24]: functional.softmax(Variable(torch.ones(3, 4, 5)), dim=1)\nOut[24]: \nVariable containing:\n(0 ,.,.) = \n  0.2500  0.2500  0.2500  0.2500  0.2500\n  0.2500  0.2500  0.2500  0.2500  0.2500\n  0.2500  0.2500  0.2500  0.2500  0.2500\n  0.2500  0.2500  0.2500  0.2500  0.2500\n\n(1 ,.,.) = \n  0.2500  0.2500  0.2500  0.2500  0.2500\n  0.2500  0.2500  0.2500  0.2500  0.2500\n  0.2500  0.2500  0.2500  0.2500  0.2500\n  0.2500  0.2500  0.2500  0.2500  0.2500\n\n(2 ,.,.) = \n  0.2500  0.2500  0.2500  0.2500  0.2500\n  0.2500  0.2500  0.2500  0.2500  0.2500\n  0.2500  0.2500  0.2500  0.2500  0.2500\n  0.2500  0.2500  0.2500  0.2500  0.2500\n[torch.FloatTensor of size 3x4x5]\n\nHowever, when the computation is performed in GPU, the flexibility decreases.\nIn [25]: functional.softmax(Variable(torch.ones(3, 4)).cuda(), dim=0)\n---------------------------------------------------------------------------\nRuntimeError                              Traceback (most recent call last)\n<ipython-input-25-d95ff8a04b77> in <module>()\n----> 1 functional.softmax(Variable(torch.ones(3, 4)).cuda(), dim=0)\n\n~/anaconda3/envs/ml/lib/python3.6/site-packages/torch/nn/functional.py in softmax(input, dim, _stacklevel)\n    648     if dim is None:\n    649         dim = _get_softmax_dim('softmax', input.dim(), _stacklevel)\n--> 650     return _Softmax(dim)(input)\n    651 \n    652 \n\nRuntimeError: invalid argument 4: dim has to be 1 for 2D input at /home/jhchoi/workspace/pytorch/torch/lib/THCUNN/generic/SoftMax.cu:32\n\nIn [26]: functional.softmax(Variable(torch.ones(3, 4, 5)).cuda(), dim=1)\n---------------------------------------------------------------------------\nRuntimeError                              Traceback (most recent call last)\n<ipython-input-26-672d6d5d3b8d> in <module>()\n----> 1 functional.softmax(Variable(torch.ones(3, 4, 5)).cuda(), dim=1)\n\n~/anaconda3/envs/ml/lib/python3.6/site-packages/torch/nn/functional.py in softmax(input, dim, _stacklevel)\n    648     if dim is None:\n    649         dim = _get_softmax_dim('softmax', input.dim(), _stacklevel)\n--> 650     return _Softmax(dim)(input)\n    651 \n    652 \n\nRuntimeError: invalid argument 4: dim has to be 0 for 3D input at /home/jhchoi/workspace/pytorch/torch/lib/THCUNN/generic/SoftMax.cu:42\n\nIs it intended behavior? If it is, then I think it should be specified in the document.", "body": "Recently, `functional.softmax` has been changed to accept `dim` as argument.\r\nWhen run on CPU, I can specify arbitrary value for `dim`, whether `input` is 2D or 3D.\r\n\r\nFor example, the following code works without any problem:\r\n```\r\nIn [23]: functional.softmax(Variable(torch.ones(3, 4)), dim=0)\r\nOut[23]: \r\nVariable containing:\r\n 0.3333  0.3333  0.3333  0.3333\r\n 0.3333  0.3333  0.3333  0.3333\r\n 0.3333  0.3333  0.3333  0.3333\r\n[torch.FloatTensor of size 3x4]\r\n\r\nIn [24]: functional.softmax(Variable(torch.ones(3, 4, 5)), dim=1)\r\nOut[24]: \r\nVariable containing:\r\n(0 ,.,.) = \r\n  0.2500  0.2500  0.2500  0.2500  0.2500\r\n  0.2500  0.2500  0.2500  0.2500  0.2500\r\n  0.2500  0.2500  0.2500  0.2500  0.2500\r\n  0.2500  0.2500  0.2500  0.2500  0.2500\r\n\r\n(1 ,.,.) = \r\n  0.2500  0.2500  0.2500  0.2500  0.2500\r\n  0.2500  0.2500  0.2500  0.2500  0.2500\r\n  0.2500  0.2500  0.2500  0.2500  0.2500\r\n  0.2500  0.2500  0.2500  0.2500  0.2500\r\n\r\n(2 ,.,.) = \r\n  0.2500  0.2500  0.2500  0.2500  0.2500\r\n  0.2500  0.2500  0.2500  0.2500  0.2500\r\n  0.2500  0.2500  0.2500  0.2500  0.2500\r\n  0.2500  0.2500  0.2500  0.2500  0.2500\r\n[torch.FloatTensor of size 3x4x5]\r\n```\r\n\r\nHowever, when the computation is performed in GPU, the flexibility decreases.\r\n```\r\nIn [25]: functional.softmax(Variable(torch.ones(3, 4)).cuda(), dim=0)\r\n---------------------------------------------------------------------------\r\nRuntimeError                              Traceback (most recent call last)\r\n<ipython-input-25-d95ff8a04b77> in <module>()\r\n----> 1 functional.softmax(Variable(torch.ones(3, 4)).cuda(), dim=0)\r\n\r\n~/anaconda3/envs/ml/lib/python3.6/site-packages/torch/nn/functional.py in softmax(input, dim, _stacklevel)\r\n    648     if dim is None:\r\n    649         dim = _get_softmax_dim('softmax', input.dim(), _stacklevel)\r\n--> 650     return _Softmax(dim)(input)\r\n    651 \r\n    652 \r\n\r\nRuntimeError: invalid argument 4: dim has to be 1 for 2D input at /home/jhchoi/workspace/pytorch/torch/lib/THCUNN/generic/SoftMax.cu:32\r\n\r\nIn [26]: functional.softmax(Variable(torch.ones(3, 4, 5)).cuda(), dim=1)\r\n---------------------------------------------------------------------------\r\nRuntimeError                              Traceback (most recent call last)\r\n<ipython-input-26-672d6d5d3b8d> in <module>()\r\n----> 1 functional.softmax(Variable(torch.ones(3, 4, 5)).cuda(), dim=1)\r\n\r\n~/anaconda3/envs/ml/lib/python3.6/site-packages/torch/nn/functional.py in softmax(input, dim, _stacklevel)\r\n    648     if dim is None:\r\n    649         dim = _get_softmax_dim('softmax', input.dim(), _stacklevel)\r\n--> 650     return _Softmax(dim)(input)\r\n    651 \r\n    652 \r\n\r\nRuntimeError: invalid argument 4: dim has to be 0 for 3D input at /home/jhchoi/workspace/pytorch/torch/lib/THCUNN/generic/SoftMax.cu:42\r\n```\r\n\r\nIs it intended behavior? If it is, then I think it should be specified in the document."}