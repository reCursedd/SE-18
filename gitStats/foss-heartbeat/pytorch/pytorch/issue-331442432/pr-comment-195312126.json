{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/195312126", "pull_request_review_id": 128653347, "id": 195312126, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTMxMjEyNg==", "diff_hunk": "@@ -40,6 +40,20 @@ void addGlobalMethods(pybind11::module& m);\n // Expose Workspace, Net, Blob\n void addObjectMethods(pybind11::module& m);\n \n+/**\n+ * Pybind11 would crash on py::gil_scoped_acquired if you call it from a", "path": "caffe2/python/pybind_state.h", "position": 5, "original_position": 5, "commit_id": "58d676e98f89e99c3e37773d60de5193beb3dfa8", "original_commit_id": "58d676e98f89e99c3e37773d60de5193beb3dfa8", "user": {"login": "kittipatv", "id": 6920665, "node_id": "MDQ6VXNlcjY5MjA2NjU=", "avatar_url": "https://avatars3.githubusercontent.com/u/6920665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kittipatv", "html_url": "https://github.com/kittipatv", "followers_url": "https://api.github.com/users/kittipatv/followers", "following_url": "https://api.github.com/users/kittipatv/following{/other_user}", "gists_url": "https://api.github.com/users/kittipatv/gists{/gist_id}", "starred_url": "https://api.github.com/users/kittipatv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kittipatv/subscriptions", "organizations_url": "https://api.github.com/users/kittipatv/orgs", "repos_url": "https://api.github.com/users/kittipatv/repos", "events_url": "https://api.github.com/users/kittipatv/events{/privacy}", "received_events_url": "https://api.github.com/users/kittipatv/received_events", "type": "User", "site_admin": false}, "body": "@bddppq It's in this thread https://fb.facebook.com/groups/101100140348621/permalink/466378917154073/. There is stack trace there. The repro would be create an (dynamically-loaded) operator and just try to acquire the GIL. I could put up the repro on phabricator tomorrow.", "created_at": "2018-06-14T06:20:49Z", "updated_at": "2018-11-23T15:45:31Z", "html_url": "https://github.com/pytorch/pytorch/pull/8361#discussion_r195312126", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/8361", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/195312126"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/8361#discussion_r195312126"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/8361"}}, "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=9300575\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/bddppq\">@bddppq</a> It's in this thread <a href=\"https://fb.facebook.com/groups/101100140348621/permalink/466378917154073/\" rel=\"nofollow\">https://fb.facebook.com/groups/101100140348621/permalink/466378917154073/</a>. There is stack trace there. The repro would be create an (dynamically-loaded) operator and just try to acquire the GIL. I could put up the repro on phabricator tomorrow.</p>", "body_text": "@bddppq It's in this thread https://fb.facebook.com/groups/101100140348621/permalink/466378917154073/. There is stack trace there. The repro would be create an (dynamically-loaded) operator and just try to acquire the GIL. I could put up the repro on phabricator tomorrow.", "in_reply_to_id": 194908389}