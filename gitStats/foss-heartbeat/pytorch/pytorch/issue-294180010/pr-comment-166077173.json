{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/166077173", "pull_request_review_id": 94102327, "id": 166077173, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NjA3NzE3Mw==", "diff_hunk": "@@ -319,107 +273,105 @@ static void lambdaLiftReverse(Graph& graph,\n   //   [original outputs], [temporaries]\n   //\n   // Reverse inputs:\n-  //   [captured primal values, in topological order],\n   //   [output vjps (aka grad_outputs)], [temporary vjps]\n-\n-  // -- Simple cases -----------------------------------------------------------\n-  value_list primal_inputs   = filter(graph.inputs(),  is_stage_0);\n-  value_list reverse_outputs = filter(graph.outputs(), is_stage_1);\n+  //   [captured primal values, in topological order],\n \n   // -- Construct primal_outputs, df_input_captures, f_real_outputs ----\n-  value_list primal_outputs  = filter(graph.outputs(), is_stage_0);\n-  grad_desc.f_real_outputs = primal_outputs.size();\n+  grad_desc.f_real_outputs = graph.outputs().size();\n \n   std::unordered_map<Value*, std::size_t> orig_primal_outputs_idx;\n   std::unordered_map<Value*, std::size_t> orig_primal_inputs_idx;\n   // NOTE: we use emplace to avoid replacing an existing index if an output is repeated\n-  for (std::size_t i = 0, num_outputs = primal_outputs.size(); i < num_outputs; ++i)\n-    orig_primal_outputs_idx.emplace(primal_outputs[i], i);\n-  for (std::size_t i = 0, num_inputs = primal_inputs.size(); i < num_inputs; ++i)\n-    orig_primal_inputs_idx[primal_inputs[i]] = i;\n+  for (std::size_t i = 0, num_outputs = graph.outputs().size(); i < num_outputs; ++i)\n+    orig_primal_outputs_idx.emplace(graph.outputs()[i], i);\n+  for (std::size_t i = 0, num_inputs = graph.inputs().size(); i < num_inputs; ++i)\n+    orig_primal_inputs_idx[graph.inputs()[i]] = i;\n \n   // NB: reverse_captures are already deduplicated, and in topo order\n   for (Value * capture_val : reverse_captures) {\n     // If it's already an output we don't have to add anything,\n     // but register the fact that it needs to be captured.\n     if (orig_primal_outputs_idx.count(capture_val) > 0) {\n-      grad_desc.df_input_captures.emplace_back(Capture::Kind::Output,\n-                                              orig_primal_outputs_idx[capture_val]);\n+      grad_desc.df_input_captured_outputs.push_back(orig_primal_outputs_idx[capture_val]);\n     // If it's an input, we could add it as an output but in fact it's\n     // more efficient to use a special kind of capture.\n     } else if (orig_primal_inputs_idx.count(capture_val) > 0) {\n-      grad_desc.df_input_captures.emplace_back(Capture::Kind::Input,\n-                                               orig_primal_inputs_idx.at(capture_val));\n+      grad_desc.df_input_captured_inputs.push_back(orig_primal_inputs_idx.at(capture_val));\n     // Otherwise it's just a regular intermediate value that we need to add as an output\n     } else {\n-      primal_outputs.emplace_back(capture_val);\n-      grad_desc.df_input_captures.emplace_back(Capture::Kind::Output,\n-                                               primal_outputs.size() - 1);\n+      // we need to create a new temporary output for this capture because it wasn't availiable.", "path": "torch/csrc/jit/autodiff.cpp", "position": 289, "original_position": 289, "commit_id": "6f27a41a86b8da8934947f2ad37d0c8efff17d6d", "original_commit_id": "6f27a41a86b8da8934947f2ad37d0c8efff17d6d", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "This duplicates the comment above", "created_at": "2018-02-05T19:00:26Z", "updated_at": "2018-11-23T15:39:06Z", "html_url": "https://github.com/pytorch/pytorch/pull/5036#discussion_r166077173", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/5036", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/166077173"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/5036#discussion_r166077173"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/5036"}}, "body_html": "<p>This duplicates the comment above</p>", "body_text": "This duplicates the comment above"}