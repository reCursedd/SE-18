{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/420452058", "html_url": "https://github.com/pytorch/pytorch/pull/11534#issuecomment-420452058", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/11534", "id": 420452058, "node_id": "MDEyOklzc3VlQ29tbWVudDQyMDQ1MjA1OA==", "user": {"login": "resistor", "id": 9796, "node_id": "MDQ6VXNlcjk3OTY=", "avatar_url": "https://avatars0.githubusercontent.com/u/9796?v=4", "gravatar_id": "", "url": "https://api.github.com/users/resistor", "html_url": "https://github.com/resistor", "followers_url": "https://api.github.com/users/resistor/followers", "following_url": "https://api.github.com/users/resistor/following{/other_user}", "gists_url": "https://api.github.com/users/resistor/gists{/gist_id}", "starred_url": "https://api.github.com/users/resistor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/resistor/subscriptions", "organizations_url": "https://api.github.com/users/resistor/orgs", "repos_url": "https://api.github.com/users/resistor/repos", "events_url": "https://api.github.com/users/resistor/events{/privacy}", "received_events_url": "https://api.github.com/users/resistor/received_events", "type": "User", "site_admin": false}, "created_at": "2018-09-11T22:48:18Z", "updated_at": "2018-09-11T22:48:18Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=4583066\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/apaszke\">@apaszke</a> Speed is of no value if it crashes.  And plenty of JITs block program execution on compilation.</p>\n<p>I'm also not sure why you would assume the prior version is faster.  The memory locality of using vectors will generally be better than using deques like the current version does, and that is borne out in measurement.  Decreasing the recursion threshold will only make the difference more pronounced by moving more work from the stack onto the deque.</p>\n<blockquote>\n<h3>WITH PR</h3>\n<p>Time to build graph (s):<br>\n0.09391583776474<br>\nTime to free graph (s):<br>\n0.019444111347198485</p>\n<p>Time to build graph (s):<br>\n0.0975230975151062<br>\nTime to free graph (s):<br>\n0.02031881332397461</p>\n<h3>ON MASTER</h3>\n<p>Time to build graph (s):<br>\n0.09743225431442261<br>\nTime to free graph (s):<br>\n0.024351720809936524</p>\n<p>Time to build graph (s):<br>\n0.09882893228530884<br>\nTime to free graph (s):<br>\n0.02464564323425293</p>\n</blockquote>", "body_text": "@apaszke Speed is of no value if it crashes.  And plenty of JITs block program execution on compilation.\nI'm also not sure why you would assume the prior version is faster.  The memory locality of using vectors will generally be better than using deques like the current version does, and that is borne out in measurement.  Decreasing the recursion threshold will only make the difference more pronounced by moving more work from the stack onto the deque.\n\nWITH PR\nTime to build graph (s):\n0.09391583776474\nTime to free graph (s):\n0.019444111347198485\nTime to build graph (s):\n0.0975230975151062\nTime to free graph (s):\n0.02031881332397461\nON MASTER\nTime to build graph (s):\n0.09743225431442261\nTime to free graph (s):\n0.024351720809936524\nTime to build graph (s):\n0.09882893228530884\nTime to free graph (s):\n0.02464564323425293", "body": "@apaszke Speed is of no value if it crashes.  And plenty of JITs block program execution on compilation.\r\n\r\nI'm also not sure why you would assume the prior version is faster.  The memory locality of using vectors will generally be better than using deques like the current version does, and that is borne out in measurement.  Decreasing the recursion threshold will only make the difference more pronounced by moving more work from the stack onto the deque.\r\n\r\n> ### WITH PR\r\n> \r\n> Time to build graph (s):\r\n> 0.09391583776474\r\n> Time to free graph (s):\r\n> 0.019444111347198485\r\n> \r\n> Time to build graph (s):\r\n> 0.0975230975151062\r\n> Time to free graph (s):\r\n> 0.02031881332397461\r\n> \r\n> ### ON MASTER\r\n> \r\n> Time to build graph (s):\r\n> 0.09743225431442261\r\n> Time to free graph (s):\r\n> 0.024351720809936524\r\n> \r\n> Time to build graph (s):\r\n> 0.09882893228530884\r\n> Time to free graph (s):\r\n> 0.02464564323425293\r\n"}