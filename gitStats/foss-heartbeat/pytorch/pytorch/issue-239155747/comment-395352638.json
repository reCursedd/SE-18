{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/395352638", "html_url": "https://github.com/pytorch/pytorch/issues/1927#issuecomment-395352638", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/1927", "id": 395352638, "node_id": "MDEyOklzc3VlQ29tbWVudDM5NTM1MjYzOA==", "user": {"login": "t-vi", "id": 20787943, "node_id": "MDQ6VXNlcjIwNzg3OTQz", "avatar_url": "https://avatars2.githubusercontent.com/u/20787943?v=4", "gravatar_id": "", "url": "https://api.github.com/users/t-vi", "html_url": "https://github.com/t-vi", "followers_url": "https://api.github.com/users/t-vi/followers", "following_url": "https://api.github.com/users/t-vi/following{/other_user}", "gists_url": "https://api.github.com/users/t-vi/gists{/gist_id}", "starred_url": "https://api.github.com/users/t-vi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/t-vi/subscriptions", "organizations_url": "https://api.github.com/users/t-vi/orgs", "repos_url": "https://api.github.com/users/t-vi/repos", "events_url": "https://api.github.com/users/t-vi/events{/privacy}", "received_events_url": "https://api.github.com/users/t-vi/received_events", "type": "User", "site_admin": false}, "created_at": "2018-06-07T09:18:51Z", "updated_at": "2018-06-07T09:22:45Z", "author_association": "CONTRIBUTOR", "body_html": "<p>The functional version is essentially a equivalent to a decorator.<br>\nBut I'm not sure how I would go using the decorator for an existing class (I used it for Embedding and Bilinear, the latter with two args) without a wrapper or mixin class.<br>\n(So for packed sequences I use something like</p>\n<pre><code>def elementwise_apply(fn, *args):\n    return torch.nn.utils.rnn.PackedSequence(fn(*[(arg.data if type(arg)==torch.nn.utils.rnn.PackedSequence else arg) for arg in args]), args[0].batch_sizes)\n</code></pre>\n<p>for tensors, I would use <code>view(arg.size(0)*arg.size(1), *arg.shape[2:])</code> or so similar to the Bottle above and back).</p>", "body_text": "The functional version is essentially a equivalent to a decorator.\nBut I'm not sure how I would go using the decorator for an existing class (I used it for Embedding and Bilinear, the latter with two args) without a wrapper or mixin class.\n(So for packed sequences I use something like\ndef elementwise_apply(fn, *args):\n    return torch.nn.utils.rnn.PackedSequence(fn(*[(arg.data if type(arg)==torch.nn.utils.rnn.PackedSequence else arg) for arg in args]), args[0].batch_sizes)\n\nfor tensors, I would use view(arg.size(0)*arg.size(1), *arg.shape[2:]) or so similar to the Bottle above and back).", "body": "The functional version is essentially a equivalent to a decorator.\r\nBut I'm not sure how I would go using the decorator for an existing class (I used it for Embedding and Bilinear, the latter with two args) without a wrapper or mixin class.\r\n(So for packed sequences I use something like\r\n```\r\ndef elementwise_apply(fn, *args):\r\n    return torch.nn.utils.rnn.PackedSequence(fn(*[(arg.data if type(arg)==torch.nn.utils.rnn.PackedSequence else arg) for arg in args]), args[0].batch_sizes)\r\n```\r\nfor tensors, I would use `view(arg.size(0)*arg.size(1), *arg.shape[2:])` or so similar to the Bottle above and back)."}