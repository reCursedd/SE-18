{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/145827679", "pull_request_review_id": 70686771, "id": 145827679, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0NTgyNzY3OQ==", "diff_hunk": "@@ -4,52 +4,95 @@\n \n namespace torch { namespace autograd {\n \n+struct VersionBlock {\n+  VersionBlock() : version(), live_refs(1) {}\n+\n+  // monotonically increasing version\n+  std::atomic<int> version;\n+  // number of references excluding SavedVariables\n+  std::atomic<int> live_refs;\n+};\n+\n+struct SavedVersion;\n+\n struct VariableVersion {\n-  VariableVersion() {\n-    saved_ref = false;\n-    version_block = new int[3];\n-    version_block[0] = 0; // version\n-    version_block[1] = 1; // refcount\n-    version_block[2] = 1; // number of variables currently using the counter\n-  };\n+  VariableVersion() : version_block(std::make_shared<VersionBlock>()) {}\n+  VariableVersion(const VariableVersion&) = delete;\n+  VariableVersion(VariableVersion&&) = delete;\n \n-  int operator++(int) { return version_block[0]++; }\n+  ~VariableVersion() {\n+    --version_block->live_refs;\n+  }\n+\n+  // increment the version counter\n+  void increment() { version_block->version++; }\n \n-  int operator*() { return *version_block; }\n+  // current version\n+  int current_version() const { return version_block->version.load(); }\n \n-  int var_refcnt() { return version_block[2]; }\n+  // number of variables using this version counter (excludes SavedVariables)\n+  int live_refs() const { return version_block->live_refs.load(); }\n \n-  void join_with(VariableVersion &other) {\n-    if (this == &other) {\n-      return;\n-    }\n-    cleanup();\n+  // creates a saved reference with the current version and the counter\n+  inline SavedVersion save() const;\n+\n+  // Uses another variable's version counter. Used for variables which share storages\n+  // NOTE: not thread-safe to call this from multiple threads without synchronization", "path": "torch/csrc/autograd/variable_version.h", "position": 52, "original_position": 52, "commit_id": "5728a4a0355b69a86205f08cb328bbe682b0cb39", "original_commit_id": "1e15da0d96ad13d08b3cb70dceebf7e826b3e569", "user": {"login": "colesbury", "id": 655866, "node_id": "MDQ6VXNlcjY1NTg2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/655866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colesbury", "html_url": "https://github.com/colesbury", "followers_url": "https://api.github.com/users/colesbury/followers", "following_url": "https://api.github.com/users/colesbury/following{/other_user}", "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions", "organizations_url": "https://api.github.com/users/colesbury/orgs", "repos_url": "https://api.github.com/users/colesbury/repos", "events_url": "https://api.github.com/users/colesbury/events{/privacy}", "received_events_url": "https://api.github.com/users/colesbury/received_events", "type": "User", "site_admin": false}, "body": "Yes, that's all", "created_at": "2017-10-19T21:21:47Z", "updated_at": "2018-11-23T15:35:32Z", "html_url": "https://github.com/pytorch/pytorch/pull/3184#discussion_r145827679", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/3184", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/145827679"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/3184#discussion_r145827679"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/3184"}}, "body_html": "<p>Yes, that's all</p>", "body_text": "Yes, that's all", "in_reply_to_id": 145806167}