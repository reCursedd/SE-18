{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/421709829", "html_url": "https://github.com/pytorch/pytorch/issues/11727#issuecomment-421709829", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/11727", "id": 421709829, "node_id": "MDEyOklzc3VlQ29tbWVudDQyMTcwOTgyOQ==", "user": {"login": "chengs", "id": 824529, "node_id": "MDQ6VXNlcjgyNDUyOQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/824529?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chengs", "html_url": "https://github.com/chengs", "followers_url": "https://api.github.com/users/chengs/followers", "following_url": "https://api.github.com/users/chengs/following{/other_user}", "gists_url": "https://api.github.com/users/chengs/gists{/gist_id}", "starred_url": "https://api.github.com/users/chengs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chengs/subscriptions", "organizations_url": "https://api.github.com/users/chengs/orgs", "repos_url": "https://api.github.com/users/chengs/repos", "events_url": "https://api.github.com/users/chengs/events{/privacy}", "received_events_url": "https://api.github.com/users/chengs/received_events", "type": "User", "site_admin": false}, "created_at": "2018-09-16T06:40:01Z", "updated_at": "2018-09-16T06:40:33Z", "author_association": "NONE", "body_html": "<p>I tried <code>everything</code> like this and it still works without warning...<br>\nRun this, and let me know your output.</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">if</span> <span class=\"pl-c1\">__name__</span> <span class=\"pl-k\">==</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>__main__<span class=\"pl-pds\">'</span></span>:\n    <span class=\"pl-k\">from</span> torch <span class=\"pl-k\">import</span> multiprocessing\n    <span class=\"pl-k\">try</span>:\n        multiprocessing.set_start_method(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>spawn<span class=\"pl-pds\">'</span></span>)\n    <span class=\"pl-k\">except</span> <span class=\"pl-c1\">RuntimeError</span>:\n        <span class=\"pl-k\">pass</span>\n\n    mp_lock <span class=\"pl-k\">=</span> multiprocessing.RLock()\n\n    <span class=\"pl-k\">import</span> torch\n    <span class=\"pl-k\">from</span> torch.utils.data <span class=\"pl-k\">import</span> DataLoader\n    data_iterator <span class=\"pl-k\">=</span> torch.utils.data.DataLoader([torch.tensor(i) <span class=\"pl-k\">for</span> i <span class=\"pl-k\">in</span> <span class=\"pl-c1\">range</span>(<span class=\"pl-c1\">10</span>)], <span class=\"pl-v\">num_workers</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">4</span>)\n    <span class=\"pl-k\">for</span> batch <span class=\"pl-k\">in</span> data_iterator:\n        <span class=\"pl-k\">pass</span></pre></div>\n<blockquote>\n<p>The issue here is not that you cannot avoid this problem. The issue is that it\u2019s not good software engineering if a function or package has a undocumented and hard to spot side affect.</p>\n</blockquote>\n<p>This I agree, there may be a way to avoid using <code>RLock</code> inside tqdm, to have better compatibility, although if a dev follows the document (I mean multiprocessing), this conflict can be avoid in a high possibility.</p>", "body_text": "I tried everything like this and it still works without warning...\nRun this, and let me know your output.\nif __name__ == '__main__':\n    from torch import multiprocessing\n    try:\n        multiprocessing.set_start_method('spawn')\n    except RuntimeError:\n        pass\n\n    mp_lock = multiprocessing.RLock()\n\n    import torch\n    from torch.utils.data import DataLoader\n    data_iterator = torch.utils.data.DataLoader([torch.tensor(i) for i in range(10)], num_workers=4)\n    for batch in data_iterator:\n        pass\n\nThe issue here is not that you cannot avoid this problem. The issue is that it\u2019s not good software engineering if a function or package has a undocumented and hard to spot side affect.\n\nThis I agree, there may be a way to avoid using RLock inside tqdm, to have better compatibility, although if a dev follows the document (I mean multiprocessing), this conflict can be avoid in a high possibility.", "body": "I tried ``everything`` like this and it still works without warning...\r\nRun this, and let me know your output.\r\n\r\n```python\r\nif __name__ == '__main__':\r\n    from torch import multiprocessing\r\n    try:\r\n        multiprocessing.set_start_method('spawn')\r\n    except RuntimeError:\r\n        pass\r\n\r\n    mp_lock = multiprocessing.RLock()\r\n\r\n    import torch\r\n    from torch.utils.data import DataLoader\r\n    data_iterator = torch.utils.data.DataLoader([torch.tensor(i) for i in range(10)], num_workers=4)\r\n    for batch in data_iterator:\r\n        pass\r\n```\r\n\r\n> The issue here is not that you cannot avoid this problem. The issue is that it\u2019s not good software engineering if a function or package has a undocumented and hard to spot side affect.\r\n\r\nThis I agree, there may be a way to avoid using ``RLock`` inside tqdm, to have better compatibility, although if a dev follows the document (I mean multiprocessing), this conflict can be avoid in a high possibility."}