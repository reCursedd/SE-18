{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/196282458", "pull_request_review_id": 129803278, "id": 196282458, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NjI4MjQ1OA==", "diff_hunk": "@@ -80,6 +80,21 @@ Tensor& cumprod_out(Tensor& result, const Tensor& self, int64_t dim) {\n \n // ALL REDUCE #################################################################\n \n+static inline Tensor mean(const Tensor &self, optional<ScalarType> dtype) {\n+  Tensor result = at::sum(integer_upcast(self, dtype));\n+  if (self.numel() > 0)\n+    result.div_(self.numel());", "path": "aten/src/ATen/native/ReduceOps.cpp", "position": null, "original_position": 7, "commit_id": "ac073f282f262f953dfe951306d99ba45a60f100", "original_commit_id": "f41bed5961752ada2692acb7dbd404221645a40f", "user": {"login": "gchanan", "id": 3768583, "node_id": "MDQ6VXNlcjM3Njg1ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3768583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gchanan", "html_url": "https://github.com/gchanan", "followers_url": "https://api.github.com/users/gchanan/followers", "following_url": "https://api.github.com/users/gchanan/following{/other_user}", "gists_url": "https://api.github.com/users/gchanan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gchanan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gchanan/subscriptions", "organizations_url": "https://api.github.com/users/gchanan/orgs", "repos_url": "https://api.github.com/users/gchanan/repos", "events_url": "https://api.github.com/users/gchanan/events{/privacy}", "received_events_url": "https://api.github.com/users/gchanan/received_events", "type": "User", "site_admin": false}, "body": "for an integer dtype self this will return an integer tensor, correct?  If so, that's not the NumPy behavior, see https://github.com/gchanan/pytorch/wiki/Reduction-dtype-notes.  IMO it's okay to either check for floating point dtype and throw an exception or do the NumPy equivalents.", "created_at": "2018-06-19T02:56:23Z", "updated_at": "2018-11-23T15:45:44Z", "html_url": "https://github.com/pytorch/pytorch/pull/8618#discussion_r196282458", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/8618", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/196282458"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/8618#discussion_r196282458"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/8618"}}, "body_html": "<p>for an integer dtype self this will return an integer tensor, correct?  If so, that's not the NumPy behavior, see <a href=\"https://github.com/gchanan/pytorch/wiki/Reduction-dtype-notes\">https://github.com/gchanan/pytorch/wiki/Reduction-dtype-notes</a>.  IMO it's okay to either check for floating point dtype and throw an exception or do the NumPy equivalents.</p>", "body_text": "for an integer dtype self this will return an integer tensor, correct?  If so, that's not the NumPy behavior, see https://github.com/gchanan/pytorch/wiki/Reduction-dtype-notes.  IMO it's okay to either check for floating point dtype and throw an exception or do the NumPy equivalents."}