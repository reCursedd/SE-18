{"url": "https://api.github.com/repos/pytorch/pytorch/issues/863", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/863/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/863/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/863/events", "html_url": "https://github.com/pytorch/pytorch/issues/863", "id": 210481698, "node_id": "MDU6SXNzdWUyMTA0ODE2OTg=", "number": 863, "title": "Variable.requires_grad property spread procedure behaves differently on CUDA and CPU mode", "user": {"login": "splintersu", "id": 14844903, "node_id": "MDQ6VXNlcjE0ODQ0OTAz", "avatar_url": "https://avatars0.githubusercontent.com/u/14844903?v=4", "gravatar_id": "", "url": "https://api.github.com/users/splintersu", "html_url": "https://github.com/splintersu", "followers_url": "https://api.github.com/users/splintersu/followers", "following_url": "https://api.github.com/users/splintersu/following{/other_user}", "gists_url": "https://api.github.com/users/splintersu/gists{/gist_id}", "starred_url": "https://api.github.com/users/splintersu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/splintersu/subscriptions", "organizations_url": "https://api.github.com/users/splintersu/orgs", "repos_url": "https://api.github.com/users/splintersu/repos", "events_url": "https://api.github.com/users/splintersu/events{/privacy}", "received_events_url": "https://api.github.com/users/splintersu/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-02-27T13:20:30Z", "updated_at": "2017-02-27T23:38:30Z", "closed_at": "2017-02-27T23:38:30Z", "author_association": "NONE", "body_html": "<p>`<br>\nimport torch as th<br>\nfrom torch.autograd import Variable</p>\n<p>x = Variable(th.Tensor([1 , 2 , 3]) , requires_grad = False)<br>\ny = Variable(th.Tensor([100]) , requires_grad = True)</p>\n<p>x = x.cuda(0)<br>\ny = y.cuda(0)</p>\n<p>x[0] = y</p>\n<p>print(x.requires_grad)<br>\n`</p>\n<p>If (x=x.cuda(0) y=y.cuda(0)) is executed then the output is False, True otherwise.<br>\nI think the result that x.requires_grad = True is more natural.</p>", "body_text": "`\nimport torch as th\nfrom torch.autograd import Variable\nx = Variable(th.Tensor([1 , 2 , 3]) , requires_grad = False)\ny = Variable(th.Tensor([100]) , requires_grad = True)\nx = x.cuda(0)\ny = y.cuda(0)\nx[0] = y\nprint(x.requires_grad)\n`\nIf (x=x.cuda(0) y=y.cuda(0)) is executed then the output is False, True otherwise.\nI think the result that x.requires_grad = True is more natural.", "body": "`\r\nimport torch as th\r\nfrom torch.autograd import Variable\r\n\r\nx = Variable(th.Tensor([1 , 2 , 3]) , requires_grad = False)\r\ny = Variable(th.Tensor([100]) , requires_grad = True)\r\n\r\nx = x.cuda(0)\r\ny = y.cuda(0)\r\n\r\nx[0] = y\r\n\r\nprint(x.requires_grad)\r\n`\r\n\r\nIf (x=x.cuda(0) y=y.cuda(0)) is executed then the output is False, True otherwise.\r\nI think the result that x.requires_grad = True is more natural.\r\n"}