{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/231655693", "pull_request_review_id": 172672412, "id": 231655693, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMTY1NTY5Mw==", "diff_hunk": "@@ -131,65 +131,6 @@ inline int CalculateInputRadius(int input_integer_bits, int input_left_shift) {\n   return static_cast<int>(std::floor(max_input_rescaled));\n }\n \n-// An adaptor to use the Caffe2 WorkersPool implementation for gemmlowp\n-// multithreading functions.\n-class C2GEMMContext : public gemmlowp::SingleThreadGemmContext {\n-  class C2WorkersPool;\n-\n- public:\n-  C2GEMMContext(ThreadPool* pool) : threadPool_(pool), workersPool_(pool) {}\n-  int max_num_threads() const {\n-    CHECK(threadPool_);\n-    return threadPool_->getNumThreads();\n-  }\n-  C2WorkersPool* workers_pool() {\n-    return &workersPool_;\n-  }\n-\n-  ThreadPool* threadPool() {\n-    return threadPool_;\n-  }\n-\n- private:\n-  class C2WorkersPool {\n-   public:\n-    C2WorkersPool(ThreadPool* pool) : pool_(pool) {}\n-    void Execute(const std::vector<gemmlowp::Task*>& tasks) {\n-      class C2Task : public Task {\n-       public:\n-        C2Task(gemmlowp::Task* task) : task_(task){};\n-        virtual void Run() override {\n-          CHECK(task_);\n-          task_->Run();\n-        }\n-\n-       private:\n-        gemmlowp::Task* task_;\n-      };\n-      std::vector<std::shared_ptr<Task>> c2tasks;\n-      c2tasks.reserve(tasks.size());\n-      std::vector<gemmlowp::Allocator> allocators(tasks.size());\n-\n-      for (size_t i = 0; i < tasks.size(); ++i) {\n-        auto* task = tasks[i];\n-        CHECK(task);\n-        task->local_allocator = &allocators[i];\n-        c2tasks.push_back(std::shared_ptr<Task>(new C2Task(task)));\n-      }\n-      CHECK(pool_);\n-      pool_->withPool([&](WorkersPool* pool) { pool->Execute(c2tasks); });", "path": "caffe2/operators/quantized/int8_utils.h", "position": 50, "original_position": 50, "commit_id": "fc685039326606e65116fce1bdf7c33310c95376", "original_commit_id": "fc685039326606e65116fce1bdf7c33310c95376", "user": {"login": "ajtulloch", "id": 1121581, "node_id": "MDQ6VXNlcjExMjE1ODE=", "avatar_url": "https://avatars3.githubusercontent.com/u/1121581?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ajtulloch", "html_url": "https://github.com/ajtulloch", "followers_url": "https://api.github.com/users/ajtulloch/followers", "following_url": "https://api.github.com/users/ajtulloch/following{/other_user}", "gists_url": "https://api.github.com/users/ajtulloch/gists{/gist_id}", "starred_url": "https://api.github.com/users/ajtulloch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ajtulloch/subscriptions", "organizations_url": "https://api.github.com/users/ajtulloch/orgs", "repos_url": "https://api.github.com/users/ajtulloch/repos", "events_url": "https://api.github.com/users/ajtulloch/events{/privacy}", "received_events_url": "https://api.github.com/users/ajtulloch/received_events", "type": "User", "site_admin": false}, "body": "We can also remove this function `ThreadPool::withPool` BTW.", "created_at": "2018-11-07T19:57:14Z", "updated_at": "2018-11-23T15:54:28Z", "html_url": "https://github.com/pytorch/pytorch/pull/13443#discussion_r231655693", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/13443", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/231655693"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/13443#discussion_r231655693"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/13443"}}, "body_html": "<p>We can also remove this function <code>ThreadPool::withPool</code> BTW.</p>", "body_text": "We can also remove this function ThreadPool::withPool BTW."}