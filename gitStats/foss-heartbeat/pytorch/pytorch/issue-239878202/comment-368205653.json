{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/368205653", "html_url": "https://github.com/pytorch/pytorch/issues/1959#issuecomment-368205653", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/1959", "id": 368205653, "node_id": "MDEyOklzc3VlQ29tbWVudDM2ODIwNTY1Mw==", "user": {"login": "SsnL", "id": 5674597, "node_id": "MDQ6VXNlcjU2NzQ1OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5674597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SsnL", "html_url": "https://github.com/SsnL", "followers_url": "https://api.github.com/users/SsnL/followers", "following_url": "https://api.github.com/users/SsnL/following{/other_user}", "gists_url": "https://api.github.com/users/SsnL/gists{/gist_id}", "starred_url": "https://api.github.com/users/SsnL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SsnL/subscriptions", "organizations_url": "https://api.github.com/users/SsnL/orgs", "repos_url": "https://api.github.com/users/SsnL/repos", "events_url": "https://api.github.com/users/SsnL/events{/privacy}", "received_events_url": "https://api.github.com/users/SsnL/received_events", "type": "User", "site_admin": false}, "created_at": "2018-02-24T06:49:01Z", "updated_at": "2018-02-24T06:49:01Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=6906411\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/wandering007\">@wandering007</a> They are very similar, but have some subtle differences. IN is applied on each channel of channeled data like images, but LN is usually applied on entire sample and often in NLP tasks. Also LN applies elementwise affine transform, while IN usually don't apply affine transform. PyTorch does support IN with a scalar affine transform applied to each channel, but that's mostly coming from that IN is implemented with BN code.</p>", "body_text": "@wandering007 They are very similar, but have some subtle differences. IN is applied on each channel of channeled data like images, but LN is usually applied on entire sample and often in NLP tasks. Also LN applies elementwise affine transform, while IN usually don't apply affine transform. PyTorch does support IN with a scalar affine transform applied to each channel, but that's mostly coming from that IN is implemented with BN code.", "body": "@wandering007 They are very similar, but have some subtle differences. IN is applied on each channel of channeled data like images, but LN is usually applied on entire sample and often in NLP tasks. Also LN applies elementwise affine transform, while IN usually don't apply affine transform. PyTorch does support IN with a scalar affine transform applied to each channel, but that's mostly coming from that IN is implemented with BN code."}