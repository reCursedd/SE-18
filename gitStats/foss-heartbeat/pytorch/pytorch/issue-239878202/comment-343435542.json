{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/343435542", "html_url": "https://github.com/pytorch/pytorch/issues/1959#issuecomment-343435542", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/1959", "id": 343435542, "node_id": "MDEyOklzc3VlQ29tbWVudDM0MzQzNTU0Mg==", "user": {"login": "LynnHo", "id": 16457298, "node_id": "MDQ6VXNlcjE2NDU3Mjk4", "avatar_url": "https://avatars0.githubusercontent.com/u/16457298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LynnHo", "html_url": "https://github.com/LynnHo", "followers_url": "https://api.github.com/users/LynnHo/followers", "following_url": "https://api.github.com/users/LynnHo/following{/other_user}", "gists_url": "https://api.github.com/users/LynnHo/gists{/gist_id}", "starred_url": "https://api.github.com/users/LynnHo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LynnHo/subscriptions", "organizations_url": "https://api.github.com/users/LynnHo/orgs", "repos_url": "https://api.github.com/users/LynnHo/repos", "events_url": "https://api.github.com/users/LynnHo/events{/privacy}", "received_events_url": "https://api.github.com/users/LynnHo/received_events", "type": "User", "site_admin": false}, "created_at": "2017-11-10T10:24:44Z", "updated_at": "2017-11-10T10:24:44Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=11729078\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/jekbradbury\">@jekbradbury</a>, this is the LayerNorm for &gt;=2D modified from your code</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">class</span> <span class=\"pl-en\">LayerNorm</span>(<span class=\"pl-e\">nn</span>.<span class=\"pl-e\">Module</span>):\n\n    <span class=\"pl-k\">def</span> <span class=\"pl-c1\">__init__</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>, <span class=\"pl-smi\">num_features</span>, <span class=\"pl-smi\">eps</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">1e-5</span>, <span class=\"pl-smi\">affine</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>):\n        <span class=\"pl-c1\">super</span>(LayerNorm, <span class=\"pl-c1\">self</span>).<span class=\"pl-c1\">__init__</span>()\n        <span class=\"pl-c1\">self</span>.num_features <span class=\"pl-k\">=</span> num_features\n        <span class=\"pl-c1\">self</span>.affine <span class=\"pl-k\">=</span> affine\n        <span class=\"pl-c1\">self</span>.eps <span class=\"pl-k\">=</span> eps\n\n        <span class=\"pl-k\">if</span> <span class=\"pl-c1\">self</span>.affine:\n            <span class=\"pl-c1\">self</span>.gamma <span class=\"pl-k\">=</span> nn.Parameter(torch.Tensor(num_features).uniform_())\n            <span class=\"pl-c1\">self</span>.beta <span class=\"pl-k\">=</span> nn.Parameter(torch.zeros(num_features))\n\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">forward</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>, <span class=\"pl-smi\">x</span>):\n        shape <span class=\"pl-k\">=</span> [<span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>] <span class=\"pl-k\">+</span> [<span class=\"pl-c1\">1</span>] <span class=\"pl-k\">*</span> (x.dim() <span class=\"pl-k\">-</span> <span class=\"pl-c1\">1</span>)\n        mean <span class=\"pl-k\">=</span> x.view(x.size(<span class=\"pl-c1\">0</span>), <span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>).mean(<span class=\"pl-c1\">1</span>).view(<span class=\"pl-k\">*</span>shape)\n        std <span class=\"pl-k\">=</span> x.view(x.size(<span class=\"pl-c1\">0</span>), <span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>).std(<span class=\"pl-c1\">1</span>).view(<span class=\"pl-k\">*</span>shape)\n\n        y <span class=\"pl-k\">=</span> (x <span class=\"pl-k\">-</span> mean) <span class=\"pl-k\">/</span> (std <span class=\"pl-k\">+</span> <span class=\"pl-c1\">self</span>.eps)\n        <span class=\"pl-k\">if</span> <span class=\"pl-c1\">self</span>.affine:\n            shape <span class=\"pl-k\">=</span> [<span class=\"pl-c1\">1</span>, <span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>] <span class=\"pl-k\">+</span> [<span class=\"pl-c1\">1</span>] <span class=\"pl-k\">*</span> (x.dim() <span class=\"pl-k\">-</span> <span class=\"pl-c1\">2</span>)\n            y <span class=\"pl-k\">=</span> <span class=\"pl-c1\">self</span>.gamma.view(<span class=\"pl-k\">*</span>shape) <span class=\"pl-k\">*</span> y <span class=\"pl-k\">+</span> <span class=\"pl-c1\">self</span>.beta.view(<span class=\"pl-k\">*</span>shape)\n        <span class=\"pl-k\">return</span> y</pre></div>", "body_text": "@jekbradbury, this is the LayerNorm for >=2D modified from your code\nclass LayerNorm(nn.Module):\n\n    def __init__(self, num_features, eps=1e-5, affine=True):\n        super(LayerNorm, self).__init__()\n        self.num_features = num_features\n        self.affine = affine\n        self.eps = eps\n\n        if self.affine:\n            self.gamma = nn.Parameter(torch.Tensor(num_features).uniform_())\n            self.beta = nn.Parameter(torch.zeros(num_features))\n\n    def forward(self, x):\n        shape = [-1] + [1] * (x.dim() - 1)\n        mean = x.view(x.size(0), -1).mean(1).view(*shape)\n        std = x.view(x.size(0), -1).std(1).view(*shape)\n\n        y = (x - mean) / (std + self.eps)\n        if self.affine:\n            shape = [1, -1] + [1] * (x.dim() - 2)\n            y = self.gamma.view(*shape) * y + self.beta.view(*shape)\n        return y", "body": "@jekbradbury, this is the LayerNorm for >=2D modified from your code\r\n\r\n```python\r\nclass LayerNorm(nn.Module):\r\n\r\n    def __init__(self, num_features, eps=1e-5, affine=True):\r\n        super(LayerNorm, self).__init__()\r\n        self.num_features = num_features\r\n        self.affine = affine\r\n        self.eps = eps\r\n\r\n        if self.affine:\r\n            self.gamma = nn.Parameter(torch.Tensor(num_features).uniform_())\r\n            self.beta = nn.Parameter(torch.zeros(num_features))\r\n\r\n    def forward(self, x):\r\n        shape = [-1] + [1] * (x.dim() - 1)\r\n        mean = x.view(x.size(0), -1).mean(1).view(*shape)\r\n        std = x.view(x.size(0), -1).std(1).view(*shape)\r\n\r\n        y = (x - mean) / (std + self.eps)\r\n        if self.affine:\r\n            shape = [1, -1] + [1] * (x.dim() - 2)\r\n            y = self.gamma.view(*shape) * y + self.beta.view(*shape)\r\n        return y\r\n```"}