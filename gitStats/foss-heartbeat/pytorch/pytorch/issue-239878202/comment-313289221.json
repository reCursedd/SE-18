{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/313289221", "html_url": "https://github.com/pytorch/pytorch/issues/1959#issuecomment-313289221", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/1959", "id": 313289221, "node_id": "MDEyOklzc3VlQ29tbWVudDMxMzI4OTIyMQ==", "user": {"login": "weihancug", "id": 29792653, "node_id": "MDQ6VXNlcjI5NzkyNjUz", "avatar_url": "https://avatars0.githubusercontent.com/u/29792653?v=4", "gravatar_id": "", "url": "https://api.github.com/users/weihancug", "html_url": "https://github.com/weihancug", "followers_url": "https://api.github.com/users/weihancug/followers", "following_url": "https://api.github.com/users/weihancug/following{/other_user}", "gists_url": "https://api.github.com/users/weihancug/gists{/gist_id}", "starred_url": "https://api.github.com/users/weihancug/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/weihancug/subscriptions", "organizations_url": "https://api.github.com/users/weihancug/orgs", "repos_url": "https://api.github.com/users/weihancug/repos", "events_url": "https://api.github.com/users/weihancug/events{/privacy}", "received_events_url": "https://api.github.com/users/weihancug/received_events", "type": "User", "site_admin": false}, "created_at": "2017-07-06T04:02:25Z", "updated_at": "2017-07-06T04:02:25Z", "author_association": "NONE", "body_html": "<p>This is the Layer normalization <a href=\"https://github.com/igul222/improved_wgan_training/blob/master/tflib/ops/layernorm.py\">implementation</a> in tensorflow. So How I can transfer it to pytorch implementation , how to transfer the nn.moments and etc..</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">Layernorm</span>(<span class=\"pl-smi\">name</span>, <span class=\"pl-smi\">norm_axes</span>, <span class=\"pl-smi\">inputs</span>):\n\u00a0 mean, var <span class=\"pl-k\">=</span> tf.nn.moments(inputs, norm_axes, <span class=\"pl-v\">keep_dims</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>)\n\u00a0 <span class=\"pl-c\"><span class=\"pl-c\">#</span> Assume the 'neurons' axis is the first of norm_axes. This is the case for fully-connected and BCHW conv layers.</span>\n\u00a0 n_neurons <span class=\"pl-k\">=</span> inputs.get_shape().as_list()[norm_axes[<span class=\"pl-c1\">0</span>]]\n\u00a0 \u00a0\n\u00a0 offset <span class=\"pl-k\">=</span> lib.param(name<span class=\"pl-k\">+</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>.offset<span class=\"pl-pds\">'</span></span>, np.zeros(n_neurons, <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>float32<span class=\"pl-pds\">'</span></span>))\n\u00a0 scale <span class=\"pl-k\">=</span> lib.param(name<span class=\"pl-k\">+</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>.scale<span class=\"pl-pds\">'</span></span>, np.ones(n_neurons, <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>float32<span class=\"pl-pds\">'</span></span>))\n\u00a0 \u00a0\n\u00a0 <span class=\"pl-c\"><span class=\"pl-c\">#</span> Add broadcasting dims to offset and scale (e.g. BCHW conv data)</span>\n\u00a0 offset <span class=\"pl-k\">=</span> tf.reshape(offset, [<span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>] <span class=\"pl-k\">+</span> [<span class=\"pl-c1\">1</span> <span class=\"pl-k\">for</span> i <span class=\"pl-k\">in</span> <span class=\"pl-v\">xrange</span>(<span class=\"pl-c1\">len</span>(norm_axes)<span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>)])\n\u00a0 scale <span class=\"pl-k\">=</span> tf.reshape(scale, [<span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>] <span class=\"pl-k\">+</span> [<span class=\"pl-c1\">1</span> <span class=\"pl-k\">for</span> i <span class=\"pl-k\">in</span> <span class=\"pl-v\">xrange</span>(<span class=\"pl-c1\">len</span>(norm_axes)<span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>)])\n\u00a0 \n\u00a0 result <span class=\"pl-k\">=</span> tf.nn.batch_normalization(inputs, mean, var, offset, scale, <span class=\"pl-c1\">1e-5</span>)\n\u00a0  \u00a0\n\u00a0 <span class=\"pl-k\">return</span> result</pre></div>", "body_text": "This is the Layer normalization implementation in tensorflow. So How I can transfer it to pytorch implementation , how to transfer the nn.moments and etc..\ndef Layernorm(name, norm_axes, inputs):\n\u00a0 mean, var = tf.nn.moments(inputs, norm_axes, keep_dims=True)\n\u00a0 # Assume the 'neurons' axis is the first of norm_axes. This is the case for fully-connected and BCHW conv layers.\n\u00a0 n_neurons = inputs.get_shape().as_list()[norm_axes[0]]\n\u00a0 \u00a0\n\u00a0 offset = lib.param(name+'.offset', np.zeros(n_neurons, dtype='float32'))\n\u00a0 scale = lib.param(name+'.scale', np.ones(n_neurons, dtype='float32'))\n\u00a0 \u00a0\n\u00a0 # Add broadcasting dims to offset and scale (e.g. BCHW conv data)\n\u00a0 offset = tf.reshape(offset, [-1] + [1 for i in xrange(len(norm_axes)-1)])\n\u00a0 scale = tf.reshape(scale, [-1] + [1 for i in xrange(len(norm_axes)-1)])\n\u00a0 \n\u00a0 result = tf.nn.batch_normalization(inputs, mean, var, offset, scale, 1e-5)\n\u00a0  \u00a0\n\u00a0 return result", "body": "This is the Layer normalization [implementation](https://github.com/igul222/improved_wgan_training/blob/master/tflib/ops/layernorm.py) in tensorflow. So How I can transfer it to pytorch implementation , how to transfer the nn.moments and etc..\r\n\r\n```python\r\ndef Layernorm(name, norm_axes, inputs):\r\n\u00a0 mean, var = tf.nn.moments(inputs, norm_axes, keep_dims=True)\r\n\u00a0 # Assume the 'neurons' axis is the first of norm_axes. This is the case for fully-connected and BCHW conv layers.\r\n\u00a0 n_neurons = inputs.get_shape().as_list()[norm_axes[0]]\r\n\u00a0 \u00a0\r\n\u00a0 offset = lib.param(name+'.offset', np.zeros(n_neurons, dtype='float32'))\r\n\u00a0 scale = lib.param(name+'.scale', np.ones(n_neurons, dtype='float32'))\r\n\u00a0 \u00a0\r\n\u00a0 # Add broadcasting dims to offset and scale (e.g. BCHW conv data)\r\n\u00a0 offset = tf.reshape(offset, [-1] + [1 for i in xrange(len(norm_axes)-1)])\r\n\u00a0 scale = tf.reshape(scale, [-1] + [1 for i in xrange(len(norm_axes)-1)])\r\n\u00a0 \r\n\u00a0 result = tf.nn.batch_normalization(inputs, mean, var, offset, scale, 1e-5)\r\n\u00a0  \u00a0\r\n\u00a0 return result\r\n```\r\n"}