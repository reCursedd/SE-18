{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/312364139", "html_url": "https://github.com/pytorch/pytorch/issues/1959#issuecomment-312364139", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/1959", "id": 312364139, "node_id": "MDEyOklzc3VlQ29tbWVudDMxMjM2NDEzOQ==", "user": {"login": "jekbradbury", "id": 11729078, "node_id": "MDQ6VXNlcjExNzI5MDc4", "avatar_url": "https://avatars2.githubusercontent.com/u/11729078?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jekbradbury", "html_url": "https://github.com/jekbradbury", "followers_url": "https://api.github.com/users/jekbradbury/followers", "following_url": "https://api.github.com/users/jekbradbury/following{/other_user}", "gists_url": "https://api.github.com/users/jekbradbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/jekbradbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jekbradbury/subscriptions", "organizations_url": "https://api.github.com/users/jekbradbury/orgs", "repos_url": "https://api.github.com/users/jekbradbury/repos", "events_url": "https://api.github.com/users/jekbradbury/events{/privacy}", "received_events_url": "https://api.github.com/users/jekbradbury/received_events", "type": "User", "site_admin": false}, "created_at": "2017-06-30T20:20:21Z", "updated_at": "2017-06-30T20:20:21Z", "author_association": "CONTRIBUTOR", "body_html": "<p>I use this:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">class</span> <span class=\"pl-en\">LayerNorm</span>(<span class=\"pl-e\">nn</span>.<span class=\"pl-e\">Module</span>):\n\n    <span class=\"pl-k\">def</span> <span class=\"pl-c1\">__init__</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>, <span class=\"pl-smi\">features</span>, <span class=\"pl-smi\">eps</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">1e-6</span>):\n        <span class=\"pl-c1\">super</span>().<span class=\"pl-c1\">__init__</span>()\n        <span class=\"pl-c1\">self</span>.gamma <span class=\"pl-k\">=</span> nn.Parameter(torch.ones(features))\n        <span class=\"pl-c1\">self</span>.beta <span class=\"pl-k\">=</span> nn.Parameter(torch.zeros(features))\n        <span class=\"pl-c1\">self</span>.eps <span class=\"pl-k\">=</span> eps\n\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">forward</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>, <span class=\"pl-smi\">x</span>):\n        mean <span class=\"pl-k\">=</span> x.mean(<span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>, <span class=\"pl-v\">keepdim</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>)\n        std <span class=\"pl-k\">=</span> x.std(<span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>, <span class=\"pl-v\">keepdim</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>)\n        <span class=\"pl-k\">return</span> <span class=\"pl-c1\">self</span>.gamma <span class=\"pl-k\">*</span> (x <span class=\"pl-k\">-</span> mean) <span class=\"pl-k\">/</span> (std <span class=\"pl-k\">+</span> <span class=\"pl-c1\">self</span>.eps) <span class=\"pl-k\">+</span> <span class=\"pl-c1\">self</span>.beta</pre></div>", "body_text": "I use this:\nclass LayerNorm(nn.Module):\n\n    def __init__(self, features, eps=1e-6):\n        super().__init__()\n        self.gamma = nn.Parameter(torch.ones(features))\n        self.beta = nn.Parameter(torch.zeros(features))\n        self.eps = eps\n\n    def forward(self, x):\n        mean = x.mean(-1, keepdim=True)\n        std = x.std(-1, keepdim=True)\n        return self.gamma * (x - mean) / (std + self.eps) + self.beta", "body": "I use this:\r\n\r\n```python\r\nclass LayerNorm(nn.Module):\r\n\r\n    def __init__(self, features, eps=1e-6):\r\n        super().__init__()\r\n        self.gamma = nn.Parameter(torch.ones(features))\r\n        self.beta = nn.Parameter(torch.zeros(features))\r\n        self.eps = eps\r\n\r\n    def forward(self, x):\r\n        mean = x.mean(-1, keepdim=True)\r\n        std = x.std(-1, keepdim=True)\r\n        return self.gamma * (x - mean) / (std + self.eps) + self.beta\r\n```"}