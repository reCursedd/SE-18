{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/224285527", "pull_request_review_id": 163614997, "id": 224285527, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNDI4NTUyNw==", "diff_hunk": "@@ -520,7 +526,14 @@ void TensorDeserializer::Deserialize(const TensorProto& proto, Tensor* tensor) {\n                 (i + chunkBegin) * temp_blob.meta().itemsize(),\n             1);\n       }\n-    }\n+    } break;\n+    case TensorProto_DataType_SPECIAL: {\n+      CAFFE_THROW(\"SPECIAL Tensor is not handled yet.\");\n+    } break;\n+    case TensorProto_DataType_NO_CONTENT: {\n+      CAFFE_THROW(\"NO_CONTENT Tensor should not be deserialized.\");\n+    } break;\n+      // Note: we intentially do not provide \"default:\" so if any new data types", "path": "caffe2/core/blob_serialization.cc", "position": 6, "original_position": 25, "commit_id": "af60ce1589b2921a069f7c301ab6bec2886fba79", "original_commit_id": "68dd65e5dfe6fee935ecbf8564478f422446414f", "user": {"login": "Yangqing", "id": 551151, "node_id": "MDQ6VXNlcjU1MTE1MQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/551151?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Yangqing", "html_url": "https://github.com/Yangqing", "followers_url": "https://api.github.com/users/Yangqing/followers", "following_url": "https://api.github.com/users/Yangqing/following{/other_user}", "gists_url": "https://api.github.com/users/Yangqing/gists{/gist_id}", "starred_url": "https://api.github.com/users/Yangqing/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Yangqing/subscriptions", "organizations_url": "https://api.github.com/users/Yangqing/orgs", "repos_url": "https://api.github.com/users/Yangqing/repos", "events_url": "https://api.github.com/users/Yangqing/events{/privacy}", "received_events_url": "https://api.github.com/users/Yangqing/received_events", "type": "User", "site_admin": false}, "body": "This actually uses a compiler feature \"-Wswitch\", which I quote here:\r\n\r\n-Wswitch\r\nWarn whenever a switch statement has an index of enumerated type and lacks a case for one or more of the named codes of that enumeration. (The presence of a default label prevents this warning.) case labels outside the enumeration range also provoke warnings when this option is used (even if there is a default label). This warning is enabled by -Wall.\r\n\r\nAlternative approach is to put a default and always fail explicitly - that might be safer indeed.", "created_at": "2018-10-11T00:51:57Z", "updated_at": "2018-11-23T15:52:52Z", "html_url": "https://github.com/pytorch/pytorch/pull/12384#discussion_r224285527", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/12384", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/224285527"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/12384#discussion_r224285527"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/12384"}}, "body_html": "<p>This actually uses a compiler feature \"-Wswitch\", which I quote here:</p>\n<p>-Wswitch<br>\nWarn whenever a switch statement has an index of enumerated type and lacks a case for one or more of the named codes of that enumeration. (The presence of a default label prevents this warning.) case labels outside the enumeration range also provoke warnings when this option is used (even if there is a default label). This warning is enabled by -Wall.</p>\n<p>Alternative approach is to put a default and always fail explicitly - that might be safer indeed.</p>", "body_text": "This actually uses a compiler feature \"-Wswitch\", which I quote here:\n-Wswitch\nWarn whenever a switch statement has an index of enumerated type and lacks a case for one or more of the named codes of that enumeration. (The presence of a default label prevents this warning.) case labels outside the enumeration range also provoke warnings when this option is used (even if there is a default label). This warning is enabled by -Wall.\nAlternative approach is to put a default and always fail explicitly - that might be safer indeed.", "in_reply_to_id": 223977384}