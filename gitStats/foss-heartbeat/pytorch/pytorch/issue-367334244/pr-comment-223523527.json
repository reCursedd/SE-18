{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/223523527", "pull_request_review_id": 162671382, "id": 223523527, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyMzUyMzUyNw==", "diff_hunk": "@@ -4,547 +4,85 @@ import \"caffe2/proto/caffe2.proto\";\n \n package torch;\n \n-// Overview\n-//\n-// ONNX is an open specification that is comprised of the following components:\n-//\n-// 1)  A definition of an extensible computation graph model.\n-// 2)  Definitions of standard data types.\n-// 3)  Definitions of built-in operators.\n-//\n-// This document describes the syntax of models and their computation graphs,\n-// as well as the standard data types. Together, they are referred to as the ONNX\n-// Intermediate Representation, or 'IR' for short.\n-//\n-// The normative semantic specification of the ONNX IR is found in docs/IR.md.\n-// Definitions of the built-in neural network operators may be found in docs/Operators.md.\n-\n-// Notes\n-//\n-// Release\n-//\n-// We are still in the very early stage of defining ONNX. The current\n-// version of ONNX is a starting point. While we are actively working\n-// towards a complete spec, we would like to get the community involved\n-// by sharing our working version of ONNX.\n-//\n-// Protobuf compatibility\n-//\n-// To simplify framework compatibility, ONNX is defined using the subset of\n-// protobuf that is compatible with both protobuf v2 and v3. This means that we\n-// do not use any protobuf features that are only available in one of the two\n-// versions.\n-//\n-// Here are the most notable contortions we have to carry out to work around\n-// these limitations:\n-//\n-//   - No 'map' (added protobuf 3.0). We instead represent mappings as lists\n-//     of key-value pairs, where order does not matter and duplicates\n-//     are not allowed.\n-\n-// Versioning\n-//\n-// ONNX versioning is specified in docs/IR.md and elaborated on in docs/Versioning.md\n-//\n-// To be compatible with both proto2 and proto3, we will use a version number\n-// that is not defined by the default value but an explicit enum number.\n-enum Version {\n-  // proto3 requires the first enum value to be zero.\n-  // We add this just to appease the compiler.\n+enum ProtoVersion {\n   _START_VERSION = 0;\n-  // The version field is always serialized and we will use it to store the\n-  // version that the  graph is generated from. This helps us set up version\n-  // control.\n-  // For the IR, we are using simple numbers starting with with 0x00000001,\n-  // which was the version we published on Oct 10, 2017.\n-  IR_VERSION_2017_10_10 = 0x0000000000000001;\n-\n-  // IR_VERSION 2 published on Oct 30, 2017\n-  // - Added type discriminator to AttributeProto to support proto3 users\n-  IR_VERSION_2017_10_30 = 0x0000000000000002;\n-\n-  // IR VERSION 3 published on Nov 3, 2017\n-  // - For operator versioning:\n-  //    - Added new message OperatorSetIdProto\n-  //    - Added opset_import in ModelProto\n-  // - For vendor extensions, added domain in NodeProto\n-  IR_VERSION_NEWEST_ONNX = 0x0000000000000003;\n-\n-  // PYTORCH IR VERSION\n-  IR_VERSION_NEWEST = 0x0000000000000103;\n+  IR_VERSION_NEWEST = 0x0000000000000101;\n }\n \n-// Attributes\n-//\n-// A named attribute containing either singular float, integer, string, graph,\n-// and tensor values, or repeated float, integer, string, graph, and tensor values.\n-// An AttributeProto MUST contain the name field, and *only one* of the\n-// following content fields, effectively enforcing a C/C++ union equivalent.\n-message AttributeProto {\n-\n-  // Note: this enum is structurally identical to the OpSchema::AttrType\n-  // enum defined in schema.h.  If you rev one, you likely need to rev the other.\n-  enum AttributeType {\n-    UNDEFINED = 0;\n-    FLOAT = 1;\n-    INT = 2;\n-    STRING = 3;\n-    TENSOR = 4;\n-    GRAPH = 5;\n-\n-    FLOATS = 6;\n-    INTS = 7;\n-    STRINGS = 8;\n-    TENSORS = 9;\n-    GRAPHS = 10;\n+message MethodDef {\n+  // method name", "path": "caffe2/proto/torch.proto", "position": 392, "original_position": 100, "commit_id": "af60ce1589b2921a069f7c301ab6bec2886fba79", "original_commit_id": "838babc6328000dfa8cfdbcecf65cbb9062886e7", "user": {"login": "houseroad", "id": 30275821, "node_id": "MDQ6VXNlcjMwMjc1ODIx", "avatar_url": "https://avatars0.githubusercontent.com/u/30275821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/houseroad", "html_url": "https://github.com/houseroad", "followers_url": "https://api.github.com/users/houseroad/followers", "following_url": "https://api.github.com/users/houseroad/following{/other_user}", "gists_url": "https://api.github.com/users/houseroad/gists{/gist_id}", "starred_url": "https://api.github.com/users/houseroad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/houseroad/subscriptions", "organizations_url": "https://api.github.com/users/houseroad/orgs", "repos_url": "https://api.github.com/users/houseroad/repos", "events_url": "https://api.github.com/users/houseroad/events{/privacy}", "received_events_url": "https://api.github.com/users/houseroad/received_events", "type": "User", "site_admin": false}, "body": "Will remove the unnecessary fields.", "created_at": "2018-10-08T23:24:03Z", "updated_at": "2018-11-23T15:52:38Z", "html_url": "https://github.com/pytorch/pytorch/pull/12384#discussion_r223523527", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/12384", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/223523527"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/12384#discussion_r223523527"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/12384"}}, "body_html": "<p>Will remove the unnecessary fields.</p>", "body_text": "Will remove the unnecessary fields.", "in_reply_to_id": 223516167}