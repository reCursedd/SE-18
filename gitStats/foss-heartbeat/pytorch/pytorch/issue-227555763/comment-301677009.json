{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/301677009", "html_url": "https://github.com/pytorch/pytorch/issues/1524#issuecomment-301677009", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/1524", "id": 301677009, "node_id": "MDEyOklzc3VlQ29tbWVudDMwMTY3NzAwOQ==", "user": {"login": "stegben", "id": 6868283, "node_id": "MDQ6VXNlcjY4NjgyODM=", "avatar_url": "https://avatars3.githubusercontent.com/u/6868283?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stegben", "html_url": "https://github.com/stegben", "followers_url": "https://api.github.com/users/stegben/followers", "following_url": "https://api.github.com/users/stegben/following{/other_user}", "gists_url": "https://api.github.com/users/stegben/gists{/gist_id}", "starred_url": "https://api.github.com/users/stegben/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stegben/subscriptions", "organizations_url": "https://api.github.com/users/stegben/orgs", "repos_url": "https://api.github.com/users/stegben/repos", "events_url": "https://api.github.com/users/stegben/events{/privacy}", "received_events_url": "https://api.github.com/users/stegben/received_events", "type": "User", "site_admin": false}, "created_at": "2017-05-16T05:09:57Z", "updated_at": "2017-05-16T05:09:57Z", "author_association": "CONTRIBUTOR", "body_html": "<p>I think the problem lies in the generated code of <code>TensorMethod.cwrap</code></p>\n<div class=\"highlight highlight-source-c\"><pre>PyObject * <span class=\"pl-en\">THPTensor_</span>(set_)(PyObject *self, PyObject *args, PyObject *kwargs)\n{\n    HANDLE_TH_ERRORS\n    <span class=\"pl-k\">int</span> __tuplecount = args ? <span class=\"pl-c1\">PyTuple_Size</span>(args) : <span class=\"pl-c1\">0</span>;\n    <span class=\"pl-k\">int</span> __dictcount = kwargs ? <span class=\"pl-c1\">PyDict_Size</span>(kwargs) : <span class=\"pl-c1\">0</span>;\n    <span class=\"pl-k\">int</span> __argcount = __tuplecount + __dictcount;\n    THLongStoragePtr __size;\nTHLongStoragePtr __stride;\n    \n\n    \n    <span class=\"pl-k\">if</span> (__argcount == <span class=\"pl-c1\">4</span> &amp;&amp;\n          (PyObject*)<span class=\"pl-c1\">Py_TYPE</span>(<span class=\"pl-c1\">PyTuple_GET_ITEM</span>(args, <span class=\"pl-c1\">0</span>)) == THPStorageClass &amp;&amp;\n          <span class=\"pl-c1\">THPUtils_checkLong</span>(<span class=\"pl-c1\">PyTuple_GET_ITEM</span>(args, <span class=\"pl-c1\">1</span>)) &amp;&amp;\n          <span class=\"pl-c1\">THPUtils_tryUnpackLongs</span>(<span class=\"pl-c1\">PyTuple_GET_ITEM</span>(args, <span class=\"pl-c1\">2</span>), __size) &amp;&amp;\n          <span class=\"pl-c1\">THPUtils_tryUnpackLongs</span>(<span class=\"pl-c1\">PyTuple_GET_ITEM</span>(args, <span class=\"pl-c1\">3</span>), __stride)) {\n      ...</pre></div>\n<p>The <code>__argcount</code> may came from both <code>args</code> and <code>kwargs</code>, but it only unpack from <code>args</code>.</p>\n<p>I can help with this issue.</p>", "body_text": "I think the problem lies in the generated code of TensorMethod.cwrap\nPyObject * THPTensor_(set_)(PyObject *self, PyObject *args, PyObject *kwargs)\n{\n    HANDLE_TH_ERRORS\n    int __tuplecount = args ? PyTuple_Size(args) : 0;\n    int __dictcount = kwargs ? PyDict_Size(kwargs) : 0;\n    int __argcount = __tuplecount + __dictcount;\n    THLongStoragePtr __size;\nTHLongStoragePtr __stride;\n    \n\n    \n    if (__argcount == 4 &&\n          (PyObject*)Py_TYPE(PyTuple_GET_ITEM(args, 0)) == THPStorageClass &&\n          THPUtils_checkLong(PyTuple_GET_ITEM(args, 1)) &&\n          THPUtils_tryUnpackLongs(PyTuple_GET_ITEM(args, 2), __size) &&\n          THPUtils_tryUnpackLongs(PyTuple_GET_ITEM(args, 3), __stride)) {\n      ...\nThe __argcount may came from both args and kwargs, but it only unpack from args.\nI can help with this issue.", "body": "I think the problem lies in the generated code of `TensorMethod.cwrap`\r\n```c\r\nPyObject * THPTensor_(set_)(PyObject *self, PyObject *args, PyObject *kwargs)\r\n{\r\n    HANDLE_TH_ERRORS\r\n    int __tuplecount = args ? PyTuple_Size(args) : 0;\r\n    int __dictcount = kwargs ? PyDict_Size(kwargs) : 0;\r\n    int __argcount = __tuplecount + __dictcount;\r\n    THLongStoragePtr __size;\r\nTHLongStoragePtr __stride;\r\n    \r\n\r\n    \r\n    if (__argcount == 4 &&\r\n          (PyObject*)Py_TYPE(PyTuple_GET_ITEM(args, 0)) == THPStorageClass &&\r\n          THPUtils_checkLong(PyTuple_GET_ITEM(args, 1)) &&\r\n          THPUtils_tryUnpackLongs(PyTuple_GET_ITEM(args, 2), __size) &&\r\n          THPUtils_tryUnpackLongs(PyTuple_GET_ITEM(args, 3), __stride)) {\r\n      ...\r\n```\r\n\r\nThe `__argcount` may came from both `args` and `kwargs`, but it only unpack from `args`.\r\n\r\nI can help with this issue."}