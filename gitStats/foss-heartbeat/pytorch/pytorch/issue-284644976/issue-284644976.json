{"url": "https://api.github.com/repos/pytorch/pytorch/issues/4358", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/4358/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/4358/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/4358/events", "html_url": "https://github.com/pytorch/pytorch/issues/4358", "id": 284644976, "node_id": "MDU6SXNzdWUyODQ2NDQ5NzY=", "number": 4358, "title": "Invoking MKL in multiprocessing with importing torch causes blocking", "user": {"login": "kamo-naoyuki", "id": 19261024, "node_id": "MDQ6VXNlcjE5MjYxMDI0", "avatar_url": "https://avatars0.githubusercontent.com/u/19261024?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kamo-naoyuki", "html_url": "https://github.com/kamo-naoyuki", "followers_url": "https://api.github.com/users/kamo-naoyuki/followers", "following_url": "https://api.github.com/users/kamo-naoyuki/following{/other_user}", "gists_url": "https://api.github.com/users/kamo-naoyuki/gists{/gist_id}", "starred_url": "https://api.github.com/users/kamo-naoyuki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kamo-naoyuki/subscriptions", "organizations_url": "https://api.github.com/users/kamo-naoyuki/orgs", "repos_url": "https://api.github.com/users/kamo-naoyuki/repos", "events_url": "https://api.github.com/users/kamo-naoyuki/events{/privacy}", "received_events_url": "https://api.github.com/users/kamo-naoyuki/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-12-27T04:07:21Z", "updated_at": "2017-12-28T00:22:12Z", "closed_at": null, "author_association": "NONE", "body_html": "<p>Using numpy.lialg.svd(invoking functions in MKL may be its triger) in multiprocessing with importing torch causes blocking.</p>\n<p>The following stops at \"Start svd\":</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-c\"><span class=\"pl-c\">#</span>!/usr/bin/env python</span>\n<span class=\"pl-k\">import</span> multiprocessing <span class=\"pl-k\">as</span> mp\n\n<span class=\"pl-k\">import</span> numpy\n<span class=\"pl-k\">import</span> torch <span class=\"pl-c\"><span class=\"pl-c\">#</span> Just to import, not using anymore</span>\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">f</span>(<span class=\"pl-smi\">x</span>):\n    <span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Start svd<span class=\"pl-pds\">'</span></span>)\n    numpy.linalg.svd(numpy.ones((<span class=\"pl-c1\">100</span>, <span class=\"pl-c1\">100</span>)))\n    <span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>End svd<span class=\"pl-pds\">'</span></span>)\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">test1</span>():\n    <span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>### Start test1 ###<span class=\"pl-pds\">'</span></span>)\n    <span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Start multiprocessing<span class=\"pl-pds\">'</span></span>)\n   <span class=\"pl-c\"><span class=\"pl-c\">#</span> mp.set_start_method('spawn')</span>\n    <span class=\"pl-k\">with</span> mp.Pool(<span class=\"pl-c1\">1</span>) <span class=\"pl-k\">as</span> p:\n        p.map(f, [<span class=\"pl-c1\">None</span>])\n    <span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>End multiprocessing<span class=\"pl-pds\">'</span></span>)\n\n\n<span class=\"pl-k\">if</span> <span class=\"pl-c1\">__name__</span> <span class=\"pl-k\">==</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>__main__<span class=\"pl-pds\">'</span></span>:\n    test1()</pre></div>\n<p>It works without the comment of set_start_method or with comment of importing torch, but it means that just importing torch affects the original multiprocessing in python or numpy.mkl.</p>", "body_text": "Using numpy.lialg.svd(invoking functions in MKL may be its triger) in multiprocessing with importing torch causes blocking.\nThe following stops at \"Start svd\":\n#!/usr/bin/env python\nimport multiprocessing as mp\n\nimport numpy\nimport torch # Just to import, not using anymore\n\ndef f(x):\n    print('Start svd')\n    numpy.linalg.svd(numpy.ones((100, 100)))\n    print('End svd')\n\ndef test1():\n    print('### Start test1 ###')\n    print('Start multiprocessing')\n   # mp.set_start_method('spawn')\n    with mp.Pool(1) as p:\n        p.map(f, [None])\n    print('End multiprocessing')\n\n\nif __name__ == '__main__':\n    test1()\nIt works without the comment of set_start_method or with comment of importing torch, but it means that just importing torch affects the original multiprocessing in python or numpy.mkl.", "body": "Using numpy.lialg.svd(invoking functions in MKL may be its triger) in multiprocessing with importing torch causes blocking.\r\n\r\nThe following stops at \"Start svd\":\r\n\r\n```python\r\n#!/usr/bin/env python\r\nimport multiprocessing as mp\r\n\r\nimport numpy\r\nimport torch # Just to import, not using anymore\r\n\r\ndef f(x):\r\n    print('Start svd')\r\n    numpy.linalg.svd(numpy.ones((100, 100)))\r\n    print('End svd')\r\n\r\ndef test1():\r\n    print('### Start test1 ###')\r\n    print('Start multiprocessing')\r\n   # mp.set_start_method('spawn')\r\n    with mp.Pool(1) as p:\r\n        p.map(f, [None])\r\n    print('End multiprocessing')\r\n\r\n\r\nif __name__ == '__main__':\r\n    test1()\r\n```\r\n\r\nIt works without the comment of set_start_method or with comment of importing torch, but it means that just importing torch affects the original multiprocessing in python or numpy.mkl."}