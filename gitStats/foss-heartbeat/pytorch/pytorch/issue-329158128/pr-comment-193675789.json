{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/193675789", "pull_request_review_id": 126690301, "id": 193675789, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MzY3NTc4OQ==", "diff_hunk": "@@ -0,0 +1,186 @@\n+import math\n+import multiprocessing\n+import sys\n+import tempfile\n+import unittest\n+from functools import wraps\n+\n+import torch\n+import torch.c10d as c10d\n+\n+from common import TestCase\n+\n+\n+TCP_ADDR = '127.0.0.1'\n+TCP_PORT = 29500\n+\n+TIMEOUT_DEFAULT = 5\n+TIMEOUT_OVERRIDE = {}\n+\n+\n+def get_timeout(test_id):\n+    return TIMEOUT_OVERRIDE.get(test_id.split('.')[-1], TIMEOUT_DEFAULT)\n+\n+\n+if not c10d.is_available():\n+    print('c10d not available, skipping tests')\n+    sys.exit(0)\n+\n+\n+class StoreTestBase(object):\n+    def _create_store(self, i):\n+        raise RuntimeError(\"implement this\")\n+\n+    def _test_set_get(self, fs):\n+        fs.set(\"key0\", \"value0\")\n+        fs.set(\"key1\", \"value1\")\n+        fs.set(\"key2\", \"value2\")\n+        self.assertEqual(b\"value0\", fs.get(\"key0\"))\n+        self.assertEqual(b\"value1\", fs.get(\"key1\"))\n+        self.assertEqual(b\"value2\", fs.get(\"key2\"))\n+\n+    def test_set_get(self):\n+        self._test_set_get(self._create_store())\n+\n+\n+class FileStoreTest(TestCase, StoreTestBase):\n+    def setUp(self):\n+        self.file = tempfile.NamedTemporaryFile()\n+\n+    def _create_store(self):\n+        return c10d.FileStore(self.file.name)\n+\n+\n+class TCPStoreTest(TestCase, StoreTestBase):\n+    def _create_store(self):\n+        return c10d.TCPStore(TCP_ADDR, TCP_PORT, True)\n+\n+\n+class ProcessGroupTestBase(object):\n+    def _spawn(self, size):\n+        processes = []\n+        for rank in range(size):\n+            name = 'process ' + str(rank)\n+            process = multiprocessing.Process(target=self._run, name=name, args=(rank,))\n+            process.start()\n+            processes.append(process)\n+        return processes\n+\n+    def _run(self, rank):\n+        self.rank = rank\n+        # self.id() == e.g. '__main__.TestDistributed.test_get_rank'\n+        # We're retreiving a corresponding test and executing it.\n+        getattr(self, self.id().split(\".\")[2])()\n+        sys.exit(0)\n+\n+\n+class ProcessGroupGlooTest(TestCase):\n+    MAIN_PROCESS_RANK = -1\n+\n+    @staticmethod\n+    def join_or_run(fn):\n+        @wraps(fn)\n+        def wrapper(self):\n+            if self.rank == self.MAIN_PROCESS_RANK:\n+                self._join_processes(fn)\n+            else:\n+                fn(self)\n+        return wrapper\n+\n+    # The main process spawns N subprocesses that run the test.\n+    # This function patches overwrites every test function to either\n+    # assume the role of the main process and join its subprocesses,\n+    # or run the underlying test function.\n+    @classmethod\n+    def setUpClass(cls):\n+        for attr in dir(cls):\n+            if attr.startswith('test'):\n+                fn = getattr(cls, attr)\n+                setattr(cls, attr, cls.join_or_run(fn))\n+\n+    def setUp(self):\n+        self.rank = self.MAIN_PROCESS_RANK\n+        self.size = 16", "path": "test/test_c10d.py", "position": null, "original_position": 103, "commit_id": "d6b04766ae9a33157480a696af057a709d12bcfe", "original_commit_id": "83bf660bb0e8a043d4cdecc12bac187f2234bd97", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "There might be issues with too large sizes if we are going to test the NCCL backend (which needs at most a single rank per GPU).", "created_at": "2018-06-07T09:05:15Z", "updated_at": "2018-11-23T15:45:09Z", "html_url": "https://github.com/pytorch/pytorch/pull/8119#discussion_r193675789", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/8119", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/193675789"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/8119#discussion_r193675789"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/8119"}}, "body_html": "<p>There might be issues with too large sizes if we are going to test the NCCL backend (which needs at most a single rank per GPU).</p>", "body_text": "There might be issues with too large sizes if we are going to test the NCCL backend (which needs at most a single rank per GPU)."}