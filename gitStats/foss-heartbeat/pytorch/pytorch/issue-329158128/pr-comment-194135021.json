{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/194135021", "pull_request_review_id": 127257617, "id": 194135021, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDEzNTAyMQ==", "diff_hunk": "@@ -0,0 +1,186 @@\n+import math\n+import multiprocessing\n+import sys\n+import tempfile\n+import unittest\n+from functools import wraps\n+\n+import torch\n+import torch.c10d as c10d\n+\n+from common import TestCase\n+\n+\n+TCP_ADDR = '127.0.0.1'\n+TCP_PORT = 29500\n+\n+TIMEOUT_DEFAULT = 5\n+TIMEOUT_OVERRIDE = {}\n+\n+\n+def get_timeout(test_id):\n+    return TIMEOUT_OVERRIDE.get(test_id.split('.')[-1], TIMEOUT_DEFAULT)\n+\n+\n+if not c10d.is_available():\n+    print('c10d not available, skipping tests')\n+    sys.exit(0)\n+\n+\n+class StoreTestBase(object):\n+    def _create_store(self, i):\n+        raise RuntimeError(\"implement this\")\n+\n+    def _test_set_get(self, fs):\n+        fs.set(\"key0\", \"value0\")\n+        fs.set(\"key1\", \"value1\")\n+        fs.set(\"key2\", \"value2\")\n+        self.assertEqual(b\"value0\", fs.get(\"key0\"))\n+        self.assertEqual(b\"value1\", fs.get(\"key1\"))\n+        self.assertEqual(b\"value2\", fs.get(\"key2\"))\n+\n+    def test_set_get(self):\n+        self._test_set_get(self._create_store())\n+\n+\n+class FileStoreTest(TestCase, StoreTestBase):\n+    def setUp(self):\n+        self.file = tempfile.NamedTemporaryFile()", "path": "test/test_c10d.py", "position": 48, "original_position": 48, "commit_id": "d6b04766ae9a33157480a696af057a709d12bcfe", "original_commit_id": "83bf660bb0e8a043d4cdecc12bac187f2234bd97", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Well you never call `.close()` and I'm pretty sure it's not closed automatically in `__del__`. Those objects are usualy used as context managers, and are deleted once you exit the scope.", "created_at": "2018-06-08T17:53:20Z", "updated_at": "2018-11-23T15:45:16Z", "html_url": "https://github.com/pytorch/pytorch/pull/8119#discussion_r194135021", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/8119", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/194135021"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/8119#discussion_r194135021"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/8119"}}, "body_html": "<p>Well you never call <code>.close()</code> and I'm pretty sure it's not closed automatically in <code>__del__</code>. Those objects are usualy used as context managers, and are deleted once you exit the scope.</p>", "body_text": "Well you never call .close() and I'm pretty sure it's not closed automatically in __del__. Those objects are usualy used as context managers, and are deleted once you exit the scope.", "in_reply_to_id": 193674344}