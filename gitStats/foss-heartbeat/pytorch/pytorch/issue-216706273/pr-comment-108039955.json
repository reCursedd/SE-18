{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/108039955", "pull_request_review_id": 29051180, "id": 108039955, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwODAzOTk1NQ==", "diff_hunk": "@@ -364,6 +364,145 @@ def backward(self, grad_output):\n                                                          self.stride[0], self.stride[2], self.stride[1])\n         return grad_input\n \n+\n+class AdaptiveMaxPool1d(Function):\n+\n+    def __init__(self, output_size, return_indices=False):\n+        self.output_size = _single(output_size)\n+        self.return_indices = return_indices\n+\n+    def forward(self, input):\n+        if input.dim() != 3:\n+            raise ValueError('expected 3D input (got {}D input)'\n+                             .format(input.dim()))\n+\n+        input2d = input.unsqueeze(2)    # size = N*C*1*L\n+        backend = type2backend[type(input)]\n+        indices, output = input2d.new().long(), input2d.new()\n+        backend.SpatialAdaptiveMaxPooling_updateOutput(backend.library_state,\n+                                                       input2d, output, indices,\n+                                                       self.output_size, 1)", "path": "torch/nn/_functions/thnn/pooling.py", "position": null, "original_position": 21, "commit_id": "022b5c46ee2af18a6fbf1dd41b229bd9d1dde3d1", "original_commit_id": "976838c35537955ec68109b5447715212a9a53f1", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "How is it possible that it works without unpacking the tuple?", "created_at": "2017-03-25T16:40:29Z", "updated_at": "2018-11-23T15:32:51Z", "html_url": "https://github.com/pytorch/pytorch/pull/1084#discussion_r108039955", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/1084", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/108039955"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/1084#discussion_r108039955"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/1084"}}, "body_html": "<p>How is it possible that it works without unpacking the tuple?</p>", "body_text": "How is it possible that it works without unpacking the tuple?"}