{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/108048100", "pull_request_review_id": 29058774, "id": 108048100, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwODA0ODEwMA==", "diff_hunk": "@@ -364,6 +364,145 @@ def backward(self, grad_output):\n                                                          self.stride[0], self.stride[2], self.stride[1])\n         return grad_input\n \n+\n+class AdaptiveMaxPool1d(Function):\n+\n+    def __init__(self, output_size, return_indices=False):\n+        self.output_size = _single(output_size)\n+        self.return_indices = return_indices\n+\n+    def forward(self, input):\n+        if input.dim() != 3:\n+            raise ValueError('expected 3D input (got {}D input)'\n+                             .format(input.dim()))\n+\n+        input2d = input.unsqueeze(2)    # size = N*C*1*L\n+        backend = type2backend[type(input)]\n+        indices, output = input2d.new().long(), input2d.new()\n+        backend.SpatialAdaptiveMaxPooling_updateOutput(backend.library_state,\n+                                                       input2d, output, indices,\n+                                                       self.output_size, 1)\n+        indices = indices.squeeze(2)\n+        output = output.squeeze(2)\n+        if self.return_indices:\n+            self.save_for_backward(input, indices)\n+            self.mark_non_differentiable(indices)\n+            return output, indices\n+        else:\n+            self.save_for_backward(input)\n+            self.indices = indices\n+            return output\n+\n+    def backward(self, grad_output, _indices_grad=None):\n+        if self.return_indices:\n+            input, indices = self.saved_tensors\n+        else:\n+            input, = self.saved_tensors\n+            indices = self.indices\n+\n+        input2d = input.unsqueeze(2)\n+        indices2d = indices.unsqueeze(2)\n+        grad_output2d = grad_output.unsqueeze(2)\n+        grad_input = grad_output2d.new()\n+        backend = type2backend[type(input)]\n+        backend.SpatialAdaptiveMaxPooling_updateGradInput(backend.library_state,\n+                                                          input2d, grad_output2d, grad_input, indices2d)\n+        grad_input = grad_input.squeeze(2)\n+        return grad_input\n+\n+\n+class AdaptiveMaxPool2d(Function):\n+\n+    def __init__(self, output_size, return_indices=False):\n+        self.output_size = _pair(output_size)\n+        self.return_indices = return_indices\n+\n+    def forward(self, input):\n+        backend = type2backend[type(input)]\n+        indices, output = input.new().long(), input.new()\n+        backend.SpatialAdaptiveMaxPooling_updateOutput(backend.library_state,\n+                                                       input, output, indices,\n+                                                       self.output_size[1], self.output_size[0])\n+        if self.return_indices:\n+            self.save_for_backward(input, indices)\n+            self.mark_non_differentiable(indices)\n+            return output, indices\n+        else:\n+            self.save_for_backward(input)\n+            self.indices = indices\n+            return output\n+\n+    def backward(self, grad_output, _indices_grad=None):\n+        if self.return_indices:\n+            input, indices = self.saved_tensors\n+        else:\n+            input, = self.saved_tensors\n+            indices = self.indices\n+        grad_input = grad_output.new()\n+        backend = type2backend[type(input)]\n+        backend.SpatialAdaptiveMaxPooling_updateGradInput(backend.library_state,\n+                                                          input, grad_output, grad_input, indices)\n+        return grad_input\n+\n+\n+class AdaptiveAvgPool1d(Function):\n+\n+    def __init__(self, output_size):\n+        self.output_size = _single(output_size)\n+\n+    def forward(self, input):\n+        if input.dim() != 3:\n+            raise ValueError('expected 3D input (got {}D input)'\n+                             .format(input.dim()))\n+\n+        input2d = input.unsqueeze(2)    # size = N*C*1*L\n+        backend = type2backend[type(input)]\n+        output = input2d.new()\n+        self.save_for_backward(input)\n+        backend.SpatialAdaptiveAveragePooling_updateOutput(\n+            backend.library_state,\n+            input2d, output,\n+            self.output_size[1], self.output_size[0])", "path": "torch/nn/_functions/thnn/pooling.py", "position": null, "original_position": 102, "commit_id": "022b5c46ee2af18a6fbf1dd41b229bd9d1dde3d1", "original_commit_id": "976838c35537955ec68109b5447715212a9a53f1", "user": {"login": "xternalz", "id": 3975361, "node_id": "MDQ6VXNlcjM5NzUzNjE=", "avatar_url": "https://avatars1.githubusercontent.com/u/3975361?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xternalz", "html_url": "https://github.com/xternalz", "followers_url": "https://api.github.com/users/xternalz/followers", "following_url": "https://api.github.com/users/xternalz/following{/other_user}", "gists_url": "https://api.github.com/users/xternalz/gists{/gist_id}", "starred_url": "https://api.github.com/users/xternalz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xternalz/subscriptions", "organizations_url": "https://api.github.com/users/xternalz/orgs", "repos_url": "https://api.github.com/users/xternalz/repos", "events_url": "https://api.github.com/users/xternalz/events{/privacy}", "received_events_url": "https://api.github.com/users/xternalz/received_events", "type": "User", "site_admin": false}, "body": "fixed this.", "created_at": "2017-03-25T23:48:03Z", "updated_at": "2018-11-23T15:32:51Z", "html_url": "https://github.com/pytorch/pytorch/pull/1084#discussion_r108048100", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/1084", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/108048100"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/1084#discussion_r108048100"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/1084"}}, "body_html": "<p>fixed this.</p>", "body_text": "fixed this.", "in_reply_to_id": 108039978}