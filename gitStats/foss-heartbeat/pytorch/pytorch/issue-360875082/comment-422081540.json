{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/422081540", "html_url": "https://github.com/pytorch/pytorch/issues/11755#issuecomment-422081540", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/11755", "id": 422081540, "node_id": "MDEyOklzc3VlQ29tbWVudDQyMjA4MTU0MA==", "user": {"login": "fritzo", "id": 648532, "node_id": "MDQ6VXNlcjY0ODUzMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/648532?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fritzo", "html_url": "https://github.com/fritzo", "followers_url": "https://api.github.com/users/fritzo/followers", "following_url": "https://api.github.com/users/fritzo/following{/other_user}", "gists_url": "https://api.github.com/users/fritzo/gists{/gist_id}", "starred_url": "https://api.github.com/users/fritzo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fritzo/subscriptions", "organizations_url": "https://api.github.com/users/fritzo/orgs", "repos_url": "https://api.github.com/users/fritzo/repos", "events_url": "https://api.github.com/users/fritzo/events{/privacy}", "received_events_url": "https://api.github.com/users/fritzo/received_events", "type": "User", "site_admin": false}, "created_at": "2018-09-17T16:26:46Z", "updated_at": "2018-09-17T16:27:19Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1647846\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ahmadsalim\">@ahmadsalim</a> yes these <code>StackTransform</code> and <code>CatTransform</code> are hypothetical, but they are natural objects (functors) with clearly defined semantics:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">class</span> <span class=\"pl-en\">CatTransform</span>(<span class=\"pl-e\">Transform</span>):\n    <span class=\"pl-k\">def</span> <span class=\"pl-c1\">__init__</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>, <span class=\"pl-smi\">seq</span>, <span class=\"pl-smi\">dim</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">0</span>):\n        <span class=\"pl-c1\">self</span>.transforms <span class=\"pl-k\">=</span> <span class=\"pl-c1\">list</span>(seq)\n        <span class=\"pl-k\">assert</span> <span class=\"pl-c1\">all</span>(<span class=\"pl-c1\">isinstance</span>(t, Transform) <span class=\"pl-k\">for</span> t <span class=\"pl-k\">in</span> <span class=\"pl-c1\">self</span>.transforms)\n        <span class=\"pl-c1\">...</span>\n\n<span class=\"pl-k\">class</span> <span class=\"pl-en\">StackTransform</span>(<span class=\"pl-e\">Transform</span>):\n    <span class=\"pl-k\">def</span> <span class=\"pl-c1\">__init__</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>, <span class=\"pl-smi\">seq</span>, <span class=\"pl-smi\">dim</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">0</span>):\n        <span class=\"pl-c1\">self</span>.transforms <span class=\"pl-k\">=</span> <span class=\"pl-c1\">list</span>(seq)\n        <span class=\"pl-k\">assert</span> <span class=\"pl-c1\">all</span>(<span class=\"pl-c1\">isinstance</span>(t, Transform) <span class=\"pl-k\">for</span> t <span class=\"pl-k\">in</span> <span class=\"pl-c1\">self</span>.transforms)\n        <span class=\"pl-c1\">...</span>\n\n<span class=\"pl-k\">class</span> <span class=\"pl-en\">TestFunctors</span>(<span class=\"pl-e\">TestCase</span>):\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">test_cat_transform</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>):\n        x1, x2, x3 <span class=\"pl-k\">=</span> <span class=\"pl-c1\">...</span>\n        t1, t2, t3 <span class=\"pl-k\">=</span> <span class=\"pl-c1\">...</span>\n        dim <span class=\"pl-k\">=</span> <span class=\"pl-c1\">...</span>\n        x <span class=\"pl-k\">=</span> torch.cat([x1, x2, x3], <span class=\"pl-v\">dim</span><span class=\"pl-k\">=</span>dim)\n        t <span class=\"pl-k\">=</span> CatTransform([t1, t2, t3], <span class=\"pl-v\">dim</span><span class=\"pl-k\">=</span>dim)\n        actual <span class=\"pl-k\">=</span> t(x)\n        expected <span class=\"pl-k\">=</span> torch.cat([t1(x1), t2(x2), t3(x3)], <span class=\"pl-v\">dim</span><span class=\"pl-k\">=</span>dim)\n        <span class=\"pl-c1\">self</span>.assertEqual(expected, actual)\n\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">test_stack_transform</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>):\n        x1, x2, x3 <span class=\"pl-k\">=</span> <span class=\"pl-c1\">...</span>\n        t1, t2, t3 <span class=\"pl-k\">=</span> <span class=\"pl-c1\">...</span>\n        dim <span class=\"pl-k\">=</span> <span class=\"pl-c1\">...</span>\n        x <span class=\"pl-k\">=</span> torch.stack([x1, x2, x3], <span class=\"pl-v\">dim</span><span class=\"pl-k\">=</span>dim)\n        t <span class=\"pl-k\">=</span> StackTransform([t1, t2, t3], <span class=\"pl-v\">dim</span><span class=\"pl-k\">=</span>dim)\n        actual <span class=\"pl-k\">=</span> t(x)\n        expected <span class=\"pl-k\">=</span> torch.stack([t1(x1), t2(x2), t3(x3)], <span class=\"pl-v\">dim</span><span class=\"pl-k\">=</span>dim)\n        <span class=\"pl-c1\">self</span>.assertEqual(expected, actual)</pre></div>", "body_text": "@ahmadsalim yes these StackTransform and CatTransform are hypothetical, but they are natural objects (functors) with clearly defined semantics:\nclass CatTransform(Transform):\n    def __init__(self, seq, dim=0):\n        self.transforms = list(seq)\n        assert all(isinstance(t, Transform) for t in self.transforms)\n        ...\n\nclass StackTransform(Transform):\n    def __init__(self, seq, dim=0):\n        self.transforms = list(seq)\n        assert all(isinstance(t, Transform) for t in self.transforms)\n        ...\n\nclass TestFunctors(TestCase):\n    def test_cat_transform(self):\n        x1, x2, x3 = ...\n        t1, t2, t3 = ...\n        dim = ...\n        x = torch.cat([x1, x2, x3], dim=dim)\n        t = CatTransform([t1, t2, t3], dim=dim)\n        actual = t(x)\n        expected = torch.cat([t1(x1), t2(x2), t3(x3)], dim=dim)\n        self.assertEqual(expected, actual)\n\n    def test_stack_transform(self):\n        x1, x2, x3 = ...\n        t1, t2, t3 = ...\n        dim = ...\n        x = torch.stack([x1, x2, x3], dim=dim)\n        t = StackTransform([t1, t2, t3], dim=dim)\n        actual = t(x)\n        expected = torch.stack([t1(x1), t2(x2), t3(x3)], dim=dim)\n        self.assertEqual(expected, actual)", "body": "@ahmadsalim yes these `StackTransform` and `CatTransform` are hypothetical, but they are natural objects (functors) with clearly defined semantics:\r\n```py\r\nclass CatTransform(Transform):\r\n    def __init__(self, seq, dim=0):\r\n        self.transforms = list(seq)\r\n        assert all(isinstance(t, Transform) for t in self.transforms)\r\n        ...\r\n\r\nclass StackTransform(Transform):\r\n    def __init__(self, seq, dim=0):\r\n        self.transforms = list(seq)\r\n        assert all(isinstance(t, Transform) for t in self.transforms)\r\n        ...\r\n\r\nclass TestFunctors(TestCase):\r\n    def test_cat_transform(self):\r\n        x1, x2, x3 = ...\r\n        t1, t2, t3 = ...\r\n        dim = ...\r\n        x = torch.cat([x1, x2, x3], dim=dim)\r\n        t = CatTransform([t1, t2, t3], dim=dim)\r\n        actual = t(x)\r\n        expected = torch.cat([t1(x1), t2(x2), t3(x3)], dim=dim)\r\n        self.assertEqual(expected, actual)\r\n\r\n    def test_stack_transform(self):\r\n        x1, x2, x3 = ...\r\n        t1, t2, t3 = ...\r\n        dim = ...\r\n        x = torch.stack([x1, x2, x3], dim=dim)\r\n        t = StackTransform([t1, t2, t3], dim=dim)\r\n        actual = t(x)\r\n        expected = torch.stack([t1(x1), t2(x2), t3(x3)], dim=dim)\r\n        self.assertEqual(expected, actual)\r\n```"}