{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/422053274", "html_url": "https://github.com/pytorch/pytorch/issues/11755#issuecomment-422053274", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/11755", "id": 422053274, "node_id": "MDEyOklzc3VlQ29tbWVudDQyMjA1MzI3NA==", "user": {"login": "fritzo", "id": 648532, "node_id": "MDQ6VXNlcjY0ODUzMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/648532?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fritzo", "html_url": "https://github.com/fritzo", "followers_url": "https://api.github.com/users/fritzo/followers", "following_url": "https://api.github.com/users/fritzo/following{/other_user}", "gists_url": "https://api.github.com/users/fritzo/gists{/gist_id}", "starred_url": "https://api.github.com/users/fritzo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fritzo/subscriptions", "organizations_url": "https://api.github.com/users/fritzo/orgs", "repos_url": "https://api.github.com/users/fritzo/repos", "events_url": "https://api.github.com/users/fritzo/events{/privacy}", "received_events_url": "https://api.github.com/users/fritzo/received_events", "type": "User", "site_admin": false}, "created_at": "2018-09-17T15:05:25Z", "updated_at": "2018-09-17T15:07:30Z", "author_association": "CONTRIBUTOR", "body_html": "<p>To me the most natural way to compose transforms would be through classes <code>CatTransform</code> and <code>StackTransform</code> that mimic the shape behavior of <a href=\"https://pytorch.org/docs/stable/torch.html?highlight=cat#torch.cat\" rel=\"nofollow\"><code>torch.cat</code></a> and <a href=\"https://pytorch.org/docs/stable/torch.html?highlight=stack#torch.stack\" rel=\"nofollow\"><code>torch.stack</code></a>, including a <code>dim</code> kwarg. In particular these would play well with broadcasting for e.g. batching. <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1647846\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ahmadsalim\">@ahmadsalim</a> I think <code>CatTransform</code> is pretty close to your component-wise transform.</p>", "body_text": "To me the most natural way to compose transforms would be through classes CatTransform and StackTransform that mimic the shape behavior of torch.cat and torch.stack, including a dim kwarg. In particular these would play well with broadcasting for e.g. batching. @ahmadsalim I think CatTransform is pretty close to your component-wise transform.", "body": "To me the most natural way to compose transforms would be through classes `CatTransform` and `StackTransform` that mimic the shape behavior of [`torch.cat`](https://pytorch.org/docs/stable/torch.html?highlight=cat#torch.cat) and [`torch.stack`](https://pytorch.org/docs/stable/torch.html?highlight=stack#torch.stack), including a `dim` kwarg. In particular these would play well with broadcasting for e.g. batching. @ahmadsalim I think `CatTransform` is pretty close to your component-wise transform."}