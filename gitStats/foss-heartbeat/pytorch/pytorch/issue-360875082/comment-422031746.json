{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/422031746", "html_url": "https://github.com/pytorch/pytorch/issues/11755#issuecomment-422031746", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/11755", "id": 422031746, "node_id": "MDEyOklzc3VlQ29tbWVudDQyMjAzMTc0Ng==", "user": {"login": "ahmadsalim", "id": 1647846, "node_id": "MDQ6VXNlcjE2NDc4NDY=", "avatar_url": "https://avatars0.githubusercontent.com/u/1647846?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ahmadsalim", "html_url": "https://github.com/ahmadsalim", "followers_url": "https://api.github.com/users/ahmadsalim/followers", "following_url": "https://api.github.com/users/ahmadsalim/following{/other_user}", "gists_url": "https://api.github.com/users/ahmadsalim/gists{/gist_id}", "starred_url": "https://api.github.com/users/ahmadsalim/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ahmadsalim/subscriptions", "organizations_url": "https://api.github.com/users/ahmadsalim/orgs", "repos_url": "https://api.github.com/users/ahmadsalim/repos", "events_url": "https://api.github.com/users/ahmadsalim/events{/privacy}", "received_events_url": "https://api.github.com/users/ahmadsalim/received_events", "type": "User", "site_admin": false}, "created_at": "2018-09-17T14:09:06Z", "updated_at": "2018-09-17T14:10:25Z", "author_association": "NONE", "body_html": "<p>Sure!<br>\nI have a model where some of the observed variables are angles and distances, which I want to correlate. So I am using a multivariate normal to represent a vector of an angle and a distance, and I transform the angle by wrapping and the distance by exponentiation (so I get a log-normal prior on the distance component).</p>\n<p>More formally, let us assume that we have some vector of random variables <code>(x_1, ..., x_n)</code> which we want to apply invertable transforms <code>(t_1, ..., t_n)</code> component-wise to get a vector of transformed RVs <code>(y_1, ..., y_n)</code> (so, <code>y_i = t_i(x_i)</code> and <code>x_i = t_i^[-1](y_i)</code>). The transform I have implemented allows this to be done easily.</p>", "body_text": "Sure!\nI have a model where some of the observed variables are angles and distances, which I want to correlate. So I am using a multivariate normal to represent a vector of an angle and a distance, and I transform the angle by wrapping and the distance by exponentiation (so I get a log-normal prior on the distance component).\nMore formally, let us assume that we have some vector of random variables (x_1, ..., x_n) which we want to apply invertable transforms (t_1, ..., t_n) component-wise to get a vector of transformed RVs (y_1, ..., y_n) (so, y_i = t_i(x_i) and x_i = t_i^[-1](y_i)). The transform I have implemented allows this to be done easily.", "body": "Sure!\r\nI have a model where some of the observed variables are angles and distances, which I want to correlate. So I am using a multivariate normal to represent a vector of an angle and a distance, and I transform the angle by wrapping and the distance by exponentiation (so I get a log-normal prior on the distance component).\r\n\r\nMore formally, let us assume that we have some vector of random variables `(x_1, ..., x_n)` which we want to apply invertable transforms `(t_1, ..., t_n)` component-wise to get a vector of transformed RVs `(y_1, ..., y_n)` (so, `y_i = t_i(x_i)` and `x_i = t_i^[-1](y_i)`). The transform I have implemented allows this to be done easily."}