{"url": "https://api.github.com/repos/pytorch/pytorch/issues/1523", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/1523/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/1523/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/1523/events", "html_url": "https://github.com/pytorch/pytorch/pull/1523", "id": 227526015, "node_id": "MDExOlB1bGxSZXF1ZXN0MTE5Nzc0Njcz", "number": 1523, "title": "Add unfold to autograd", "user": {"login": "fmassa", "id": 9110200, "node_id": "MDQ6VXNlcjkxMTAyMDA=", "avatar_url": "https://avatars2.githubusercontent.com/u/9110200?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fmassa", "html_url": "https://github.com/fmassa", "followers_url": "https://api.github.com/users/fmassa/followers", "following_url": "https://api.github.com/users/fmassa/following{/other_user}", "gists_url": "https://api.github.com/users/fmassa/gists{/gist_id}", "starred_url": "https://api.github.com/users/fmassa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fmassa/subscriptions", "organizations_url": "https://api.github.com/users/fmassa/orgs", "repos_url": "https://api.github.com/users/fmassa/repos", "events_url": "https://api.github.com/users/fmassa/events{/privacy}", "received_events_url": "https://api.github.com/users/fmassa/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2017-05-09T23:24:13Z", "updated_at": "2017-05-11T15:53:52Z", "closed_at": "2017-05-11T15:53:17Z", "author_association": "MEMBER", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/1523", "html_url": "https://github.com/pytorch/pytorch/pull/1523", "diff_url": "https://github.com/pytorch/pytorch/pull/1523.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/1523.patch"}, "body_html": "<p>Unfold is very handy whenever we want to perform operations in local neighbourhoods (like in convolutions or poolings).</p>\n<p>For example, 2d max-pooling can be alternatively computed as follows:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">max_pool2d</span>(<span class=\"pl-smi\">input</span>, <span class=\"pl-smi\">kernel_size</span>, <span class=\"pl-smi\">stride</span>):\n    kh, kw <span class=\"pl-k\">=</span> kernel_size\n    dh, dw <span class=\"pl-k\">=</span> stride\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> get all image windows of size (kh, kw) and stride (dh, dw)</span>\n    input_windows <span class=\"pl-k\">=</span> <span class=\"pl-c1\">input</span>.unfold(<span class=\"pl-c1\">2</span>, kh, dh).unfold(<span class=\"pl-c1\">3</span>, kw, dw)\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> view the windows as (kh * kw)</span>\n    input_windows <span class=\"pl-k\">=</span> input_windows.contiguous().view(<span class=\"pl-k\">*</span>input_windows.size()[:<span class=\"pl-k\">-</span><span class=\"pl-c1\">2</span>], <span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>)\n    max_val, max_idx <span class=\"pl-k\">=</span> input_windows.max(<span class=\"pl-c1\">4</span>)\n    <span class=\"pl-k\">return</span> max_val, max_idx</pre></div>", "body_text": "Unfold is very handy whenever we want to perform operations in local neighbourhoods (like in convolutions or poolings).\nFor example, 2d max-pooling can be alternatively computed as follows:\ndef max_pool2d(input, kernel_size, stride):\n    kh, kw = kernel_size\n    dh, dw = stride\n    # get all image windows of size (kh, kw) and stride (dh, dw)\n    input_windows = input.unfold(2, kh, dh).unfold(3, kw, dw)\n    # view the windows as (kh * kw)\n    input_windows = input_windows.contiguous().view(*input_windows.size()[:-2], -1)\n    max_val, max_idx = input_windows.max(4)\n    return max_val, max_idx", "body": "Unfold is very handy whenever we want to perform operations in local neighbourhoods (like in convolutions or poolings).\r\n\r\nFor example, 2d max-pooling can be alternatively computed as follows:\r\n```python\r\ndef max_pool2d(input, kernel_size, stride):\r\n    kh, kw = kernel_size\r\n    dh, dw = stride\r\n    # get all image windows of size (kh, kw) and stride (dh, dw)\r\n    input_windows = input.unfold(2, kh, dh).unfold(3, kw, dw)\r\n    # view the windows as (kh * kw)\r\n    input_windows = input_windows.contiguous().view(*input_windows.size()[:-2], -1)\r\n    max_val, max_idx = input_windows.max(4)\r\n    return max_val, max_idx\r\n```"}