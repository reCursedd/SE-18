{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/409300163", "html_url": "https://github.com/pytorch/pytorch/pull/9979#issuecomment-409300163", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/9979", "id": 409300163, "node_id": "MDEyOklzc3VlQ29tbWVudDQwOTMwMDE2Mw==", "user": {"login": "zasdfgbnm", "id": 1032377, "node_id": "MDQ6VXNlcjEwMzIzNzc=", "avatar_url": "https://avatars2.githubusercontent.com/u/1032377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zasdfgbnm", "html_url": "https://github.com/zasdfgbnm", "followers_url": "https://api.github.com/users/zasdfgbnm/followers", "following_url": "https://api.github.com/users/zasdfgbnm/following{/other_user}", "gists_url": "https://api.github.com/users/zasdfgbnm/gists{/gist_id}", "starred_url": "https://api.github.com/users/zasdfgbnm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zasdfgbnm/subscriptions", "organizations_url": "https://api.github.com/users/zasdfgbnm/orgs", "repos_url": "https://api.github.com/users/zasdfgbnm/repos", "events_url": "https://api.github.com/users/zasdfgbnm/events{/privacy}", "received_events_url": "https://api.github.com/users/zasdfgbnm/received_events", "type": "User", "site_admin": false}, "created_at": "2018-07-31T17:20:52Z", "updated_at": "2018-07-31T17:20:52Z", "author_association": "CONTRIBUTOR", "body_html": "<blockquote>\n<p>My feeling is, just like inputs are unpacked, all intermediate outputs are implicitly unpacked and given to the next module.</p>\n</blockquote>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1310570\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/soumith\">@soumith</a> This has semantic changes I think. It will break previously working code like:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">class</span> <span class=\"pl-en\">Repeat</span>(<span class=\"pl-e\">nn</span>.<span class=\"pl-e\">Module</span>):\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">forward</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>, <span class=\"pl-smi\">x</span>):\n        <span class=\"pl-k\">return</span> x, x\n\n<span class=\"pl-k\">class</span> <span class=\"pl-en\">Add</span>(<span class=\"pl-e\">nn</span>.<span class=\"pl-e\">Module</span>):\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">forward</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>, <span class=\"pl-smi\">pair</span>):\n        x, y <span class=\"pl-k\">=</span> pair\n        <span class=\"pl-k\">return</span> x <span class=\"pl-k\">+</span> y\n\ndoubler <span class=\"pl-k\">=</span> nn.Sequential(Repeat(), Add())\ndoubler(torch.tensor([<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">3</span>]))</pre></div>", "body_text": "My feeling is, just like inputs are unpacked, all intermediate outputs are implicitly unpacked and given to the next module.\n\n@soumith This has semantic changes I think. It will break previously working code like:\nclass Repeat(nn.Module):\n    def forward(self, x):\n        return x, x\n\nclass Add(nn.Module):\n    def forward(self, pair):\n        x, y = pair\n        return x + y\n\ndoubler = nn.Sequential(Repeat(), Add())\ndoubler(torch.tensor([1, 2, 3]))", "body": "> My feeling is, just like inputs are unpacked, all intermediate outputs are implicitly unpacked and given to the next module.\r\n\r\n@soumith This has semantic changes I think. It will break previously working code like:\r\n\r\n```python\r\nclass Repeat(nn.Module):\r\n    def forward(self, x):\r\n        return x, x\r\n\r\nclass Add(nn.Module):\r\n    def forward(self, pair):\r\n        x, y = pair\r\n        return x + y\r\n\r\ndoubler = nn.Sequential(Repeat(), Add())\r\ndoubler(torch.tensor([1, 2, 3]))\r\n```"}