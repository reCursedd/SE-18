{"url": "https://api.github.com/repos/pytorch/pytorch/issues/8290", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/8290/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/8290/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/8290/events", "html_url": "https://github.com/pytorch/pytorch/issues/8290", "id": 330797066, "node_id": "MDU6SXNzdWUzMzA3OTcwNjY=", "number": 8290, "title": "[feature request] MPI init_method for torch.distributed", "user": {"login": "dashesy", "id": 873905, "node_id": "MDQ6VXNlcjg3MzkwNQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/873905?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dashesy", "html_url": "https://github.com/dashesy", "followers_url": "https://api.github.com/users/dashesy/followers", "following_url": "https://api.github.com/users/dashesy/following{/other_user}", "gists_url": "https://api.github.com/users/dashesy/gists{/gist_id}", "starred_url": "https://api.github.com/users/dashesy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dashesy/subscriptions", "organizations_url": "https://api.github.com/users/dashesy/orgs", "repos_url": "https://api.github.com/users/dashesy/repos", "events_url": "https://api.github.com/users/dashesy/events{/privacy}", "received_events_url": "https://api.github.com/users/dashesy/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": {"login": "ailzhang", "id": 5248122, "node_id": "MDQ6VXNlcjUyNDgxMjI=", "avatar_url": "https://avatars2.githubusercontent.com/u/5248122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ailzhang", "html_url": "https://github.com/ailzhang", "followers_url": "https://api.github.com/users/ailzhang/followers", "following_url": "https://api.github.com/users/ailzhang/following{/other_user}", "gists_url": "https://api.github.com/users/ailzhang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ailzhang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ailzhang/subscriptions", "organizations_url": "https://api.github.com/users/ailzhang/orgs", "repos_url": "https://api.github.com/users/ailzhang/repos", "events_url": "https://api.github.com/users/ailzhang/events{/privacy}", "received_events_url": "https://api.github.com/users/ailzhang/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "ailzhang", "id": 5248122, "node_id": "MDQ6VXNlcjUyNDgxMjI=", "avatar_url": "https://avatars2.githubusercontent.com/u/5248122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ailzhang", "html_url": "https://github.com/ailzhang", "followers_url": "https://api.github.com/users/ailzhang/followers", "following_url": "https://api.github.com/users/ailzhang/following{/other_user}", "gists_url": "https://api.github.com/users/ailzhang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ailzhang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ailzhang/subscriptions", "organizations_url": "https://api.github.com/users/ailzhang/orgs", "repos_url": "https://api.github.com/users/ailzhang/repos", "events_url": "https://api.github.com/users/ailzhang/events{/privacy}", "received_events_url": "https://api.github.com/users/ailzhang/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 4, "created_at": "2018-06-08T20:44:15Z", "updated_at": "2018-07-26T02:01:12Z", "closed_at": null, "author_association": "CONTRIBUTOR", "body_html": "<p>That would be nice to have an init_method that is not socket-based, using MPI for initializing/side-channel communications. I am not talking about MPI backend (or cuda-aware MPI) here, but want to use mpi just for the init part. If we could use a custom <code>init_method</code> we could even use <code>mpi4py</code>.</p>\n<h2>Code example</h2>\n<p>Ideally something like:</p>\n<div class=\"highlight highlight-source-python\"><pre>            dist.init_process_group(\n                <span class=\"pl-v\">backend</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>nccl<span class=\"pl-pds\">\"</span></span>,\n                <span class=\"pl-v\">init_method</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>mpi://<span class=\"pl-pds\">'</span></span>,\n                <span class=\"pl-v\">world_size</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">self</span>.world_size,\n                <span class=\"pl-v\">rank</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">self</span>.rank,\n                <span class=\"pl-v\">group_name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>mtorch<span class=\"pl-pds\">'</span></span>\n            )</pre></div>\n<p>discussed <a href=\"https://discuss.pytorch.org/t/nccl-backend-and-init-method-with-mpi/19418\" rel=\"nofollow\">here</a>.</p>\n<h2>System Info</h2>\n<p>PyTorch version: 0.4.0<br>\nIs debug build: No<br>\nCUDA used to build PyTorch: 8.0.61</p>\n<p>OS: Ubuntu 16.04.3 LTS<br>\nGCC version: (Ubuntu 5.4.0-6ubuntu1~16.04.9) 5.4.0 20160609<br>\nCMake version: version 3.5.1</p>\n<p>Python version: 2.7<br>\nIs CUDA available: No<br>\nCUDA runtime version: 8.0.61<br>\nGPU models and configuration: Could not collect<br>\nNvidia driver version: Could not collect<br>\ncuDNN version: Probably one of the following:<br>\n/usr/lib/x86_64-linux-gnu/libcudnn.so.6.0.21<br>\n/usr/lib/x86_64-linux-gnu/libcudnn_static_v6.a</p>\n<p>Versions of relevant libraries:<br>\n[pip] numpy (1.14.3)<br>\n[pip] numpydoc (0.8.0)<br>\n[pip] torch (0.4.0)<br>\n[pip] torchvision (0.2.1)<br>\n[conda] pytorch 0.4.0 py27_cuda8.0.61_cudnn7.1.2_1 pytorch<br>\n[conda] torchvision 0.2.1 py27_1 pytorch</p>", "body_text": "That would be nice to have an init_method that is not socket-based, using MPI for initializing/side-channel communications. I am not talking about MPI backend (or cuda-aware MPI) here, but want to use mpi just for the init part. If we could use a custom init_method we could even use mpi4py.\nCode example\nIdeally something like:\n            dist.init_process_group(\n                backend=\"nccl\",\n                init_method='mpi://',\n                world_size=self.world_size,\n                rank=self.rank,\n                group_name='mtorch'\n            )\ndiscussed here.\nSystem Info\nPyTorch version: 0.4.0\nIs debug build: No\nCUDA used to build PyTorch: 8.0.61\nOS: Ubuntu 16.04.3 LTS\nGCC version: (Ubuntu 5.4.0-6ubuntu1~16.04.9) 5.4.0 20160609\nCMake version: version 3.5.1\nPython version: 2.7\nIs CUDA available: No\nCUDA runtime version: 8.0.61\nGPU models and configuration: Could not collect\nNvidia driver version: Could not collect\ncuDNN version: Probably one of the following:\n/usr/lib/x86_64-linux-gnu/libcudnn.so.6.0.21\n/usr/lib/x86_64-linux-gnu/libcudnn_static_v6.a\nVersions of relevant libraries:\n[pip] numpy (1.14.3)\n[pip] numpydoc (0.8.0)\n[pip] torch (0.4.0)\n[pip] torchvision (0.2.1)\n[conda] pytorch 0.4.0 py27_cuda8.0.61_cudnn7.1.2_1 pytorch\n[conda] torchvision 0.2.1 py27_1 pytorch", "body": "That would be nice to have an init_method that is not socket-based, using MPI for initializing/side-channel communications. I am not talking about MPI backend (or cuda-aware MPI) here, but want to use mpi just for the init part. If we could use a custom `init_method` we could even use `mpi4py`.\r\n\r\n## Code example\r\n\r\nIdeally something like:\r\n\r\n```python\r\n            dist.init_process_group(\r\n                backend=\"nccl\",\r\n                init_method='mpi://',\r\n                world_size=self.world_size,\r\n                rank=self.rank,\r\n                group_name='mtorch'\r\n            )\r\n```\r\n\r\ndiscussed [here](https://discuss.pytorch.org/t/nccl-backend-and-init-method-with-mpi/19418).\r\n\r\n## System Info\r\nPyTorch version: 0.4.0\r\nIs debug build: No\r\nCUDA used to build PyTorch: 8.0.61\r\n\r\nOS: Ubuntu 16.04.3 LTS\r\nGCC version: (Ubuntu 5.4.0-6ubuntu1~16.04.9) 5.4.0 20160609\r\nCMake version: version 3.5.1\r\n\r\nPython version: 2.7\r\nIs CUDA available: No\r\nCUDA runtime version: 8.0.61\r\nGPU models and configuration: Could not collect\r\nNvidia driver version: Could not collect\r\ncuDNN version: Probably one of the following:\r\n/usr/lib/x86_64-linux-gnu/libcudnn.so.6.0.21\r\n/usr/lib/x86_64-linux-gnu/libcudnn_static_v6.a\r\n\r\nVersions of relevant libraries:\r\n[pip] numpy (1.14.3)\r\n[pip] numpydoc (0.8.0)\r\n[pip] torch (0.4.0)\r\n[pip] torchvision (0.2.1)\r\n[conda] pytorch 0.4.0 py27_cuda8.0.61_cudnn7.1.2_1 pytorch\r\n[conda] torchvision 0.2.1 py27_1 pytorch"}