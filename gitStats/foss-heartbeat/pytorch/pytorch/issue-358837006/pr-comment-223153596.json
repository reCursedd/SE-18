{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/223153596", "pull_request_review_id": 162219742, "id": 223153596, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyMzE1MzU5Ng==", "diff_hunk": "@@ -150,60 +163,91 @@ void THCTensor_(catArray)(THCState *state, THCTensor *result,\n   // 6. All input tensors can use 32-bit indexing\n   // 7. All input tensors are on the same device\n \n-  if (numInputs > 1 &&\n-      !hasSkippedInput &&\n+  if (numInputs > 1 && !hasSkippedInput &&\n       result->dim() <= CAT_ARRAY_MAX_INPUT_DIMS &&\n       THCTensor_canUse32BitIndexMath(state, result) &&\n       THCTensor_allContiguous(state, inputs, numInputs) &&\n       THCTensor_all32BitIndexable(state, inputs, numInputs) &&\n       THCTensor_allSameDevice(state, inputs, numInputs)) {\n-\n-    // First, let's set up our kernel parameters. We start with a raw pointer to the storage\n-    // for the output Tensor.\n-    scalar_t *data = THCTensor_(data)(state, result);\n+    // First, let's set up our kernel parameters. We start with a raw pointer to\n+    // the storage for the output Tensor.\n+    scalar_t* data = THCTensor_(data)(state, result);\n \n     // Kernel Parameter\n-    size_t tensorMetadataSize = sizeof(CatArrInputTensor<scalar_t, unsigned int>) * CAT_ARRAY_BATCH_SIZE;\n-    auto d_inputs = static_cast<CatArrInputTensor<scalar_t, unsigned int> *>(THCudaMalloc(state, tensorMetadataSize));\n+    size_t tensorMetadataSize = sizeof(CatArrInputTensor<", "path": "aten/src/THC/generic/THCTensorMath.cu", "position": null, "original_position": 153, "commit_id": "5b48bc2cd9a61cb81e09f008730bc096561a0e9a", "original_commit_id": "679b3bb28b6479e114147027fbd52369c13d4aee", "user": {"login": "gchanan", "id": 3768583, "node_id": "MDQ6VXNlcjM3Njg1ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3768583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gchanan", "html_url": "https://github.com/gchanan", "followers_url": "https://api.github.com/users/gchanan/followers", "following_url": "https://api.github.com/users/gchanan/following{/other_user}", "gists_url": "https://api.github.com/users/gchanan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gchanan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gchanan/subscriptions", "organizations_url": "https://api.github.com/users/gchanan/orgs", "repos_url": "https://api.github.com/users/gchanan/repos", "events_url": "https://api.github.com/users/gchanan/events{/privacy}", "received_events_url": "https://api.github.com/users/gchanan/received_events", "type": "User", "site_admin": false}, "body": "nit: can you just put a \"using\" declaration and a short name, this spacing makes it painful to read.", "created_at": "2018-10-05T22:30:55Z", "updated_at": "2018-11-23T15:52:28Z", "html_url": "https://github.com/pytorch/pytorch/pull/11494#discussion_r223153596", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/11494", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/223153596"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/11494#discussion_r223153596"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/11494"}}, "body_html": "<p>nit: can you just put a \"using\" declaration and a short name, this spacing makes it painful to read.</p>", "body_text": "nit: can you just put a \"using\" declaration and a short name, this spacing makes it painful to read."}