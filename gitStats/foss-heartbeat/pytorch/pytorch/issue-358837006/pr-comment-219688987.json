{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/219688987", "pull_request_review_id": 157929288, "id": 219688987, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxOTY4ODk4Nw==", "diff_hunk": "@@ -40,47 +40,29 @@ inline bool getCatGrid(THCState* state, ptrdiff_t nTensors, dim3& grid) {\n   //X dim of grid for cat array cooperates on a single tensor in the cat.\n   //Given half of the GPU, full utilization will always occur.\n   grid = dim3( 2LL * numSM, (long long) nTensors );\n-\t     \n+\n   return true;\n }\n \n-// Similar to any other IndexToOffset calculation for copying along a given dimension.\n-template <typename IndexType, int Dims>\n-struct CatArrIndexToOffset {\n-  static inline __device__ IndexType compute(\n-      const IndexType outputSize[Dims],\n-      const IndexType outputStride[Dims],\n-      const IndexType dimSize,\n-      const unsigned int concatDim,\n-      IndexType linearIndex) {\n-    IndexType offset = 0;\n-\n-#pragma unroll\n-    for (int i = Dims - 1; i >= 1; --i) {\n-      IndexType curDimSize = i == concatDim ? dimSize : outputSize[i];\n-      IndexType nextDimIndex = linearIndex / curDimSize;\n-      IndexType curDimIndex = linearIndex - curDimSize * nextDimIndex;\n-      IndexType curDimOffset = curDimIndex * outputStride[i];\n-      offset += curDimOffset;\n-      linearIndex = nextDimIndex;\n-    }\n+template<typename IndexType, unsigned int MaxDims>\n+struct OutputTensorSizeStride {\n+  IndexType outputSize[MaxDims];\n+  IndexType outputStride[MaxDims];\n+};\n \n-    return offset + linearIndex * outputStride[0];\n-  }\n+template<typename IndexType, unsigned int MaxDims>\n+struct InputTensorSize {", "path": "aten/src/THC/THCTensorMath.cuh", "position": null, "original_position": 38, "commit_id": "5b48bc2cd9a61cb81e09f008730bc096561a0e9a", "original_commit_id": "50f05c039c1e83163bdfc926371e673311da4b06", "user": {"login": "ngimel", "id": 15841449, "node_id": "MDQ6VXNlcjE1ODQxNDQ5", "avatar_url": "https://avatars3.githubusercontent.com/u/15841449?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ngimel", "html_url": "https://github.com/ngimel", "followers_url": "https://api.github.com/users/ngimel/followers", "following_url": "https://api.github.com/users/ngimel/following{/other_user}", "gists_url": "https://api.github.com/users/ngimel/gists{/gist_id}", "starred_url": "https://api.github.com/users/ngimel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ngimel/subscriptions", "organizations_url": "https://api.github.com/users/ngimel/orgs", "repos_url": "https://api.github.com/users/ngimel/repos", "events_url": "https://api.github.com/users/ngimel/events{/privacy}", "received_events_url": "https://api.github.com/users/ngimel/received_events", "type": "User", "site_admin": false}, "body": "what's the reason for two identical structures (InputTensorSize and OutputTensorSizeStride) with just differently named members?", "created_at": "2018-09-23T05:42:26Z", "updated_at": "2018-11-23T15:51:49Z", "html_url": "https://github.com/pytorch/pytorch/pull/11494#discussion_r219688987", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/11494", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/219688987"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/11494#discussion_r219688987"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/11494"}}, "body_html": "<p>what's the reason for two identical structures (InputTensorSize and OutputTensorSizeStride) with just differently named members?</p>", "body_text": "what's the reason for two identical structures (InputTensorSize and OutputTensorSizeStride) with just differently named members?"}