{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/221015251", "pull_request_review_id": 159562549, "id": 221015251, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyMTAxNTI1MQ==", "diff_hunk": "@@ -350,7 +358,21 @@ static std::vector<Value*> gradientForNode(Node* node, ArrayRef<Value*> grad_val\n         auto grad = grads.at(0);\n         std::vector<SymbolicVariable> tensor_grads;\n         for (auto input : tensor_inputs) {\n-          tensor_grads.push_back(grad.narrow(dim, offset, input.sizes()[dim]));\n+          if (pad) {\n+            int64_t ndim = input.sizes().size();\n+            for (int64_t i = 0; i < ndim; ++i) {\n+              auto result = grad;\n+              if (i == dim) {", "path": "torch/csrc/jit/autodiff.cpp", "position": 57, "original_position": 38, "commit_id": "5b48bc2cd9a61cb81e09f008730bc096561a0e9a", "original_commit_id": "66efdc6c11a9705d9069ef91c210b405324487e1", "user": {"login": "zou3519", "id": 5652049, "node_id": "MDQ6VXNlcjU2NTIwNDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/5652049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zou3519", "html_url": "https://github.com/zou3519", "followers_url": "https://api.github.com/users/zou3519/followers", "following_url": "https://api.github.com/users/zou3519/following{/other_user}", "gists_url": "https://api.github.com/users/zou3519/gists{/gist_id}", "starred_url": "https://api.github.com/users/zou3519/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zou3519/subscriptions", "organizations_url": "https://api.github.com/users/zou3519/orgs", "repos_url": "https://api.github.com/users/zou3519/repos", "events_url": "https://api.github.com/users/zou3519/events{/privacy}", "received_events_url": "https://api.github.com/users/zou3519/received_events", "type": "User", "site_admin": false}, "body": "This doesn't look right...\r\nLet's say I have tensors x, y of size (1, 2, 3) and (1, 3, 2) and I'm doing `torch.cat([x, y], dim=0, pad_value=0`.\r\nThe result has size (2, 3, 3).\r\n\r\nNow, you're given a grad of size (2, 3, 3). You have to slice out (1, 2, 3) and (1, 3, 2) from this, so you get that by:\r\n```\r\ngrad_x = grad.narrow(dim, 0, 1).narrow(...).narrow(...)  # need to narrow along dim 1 and dim 2 s.t. the sizes match\r\ngrad_y = grad.narrow(dim, 1, 1).narrow(...).narrow(...) # need to narrow along dim 1 and dim 2 s.t. the sizes match", "created_at": "2018-09-27T17:42:34Z", "updated_at": "2018-11-23T15:52:06Z", "html_url": "https://github.com/pytorch/pytorch/pull/11494#discussion_r221015251", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/11494", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/221015251"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/11494#discussion_r221015251"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/11494"}}, "body_html": "<p>This doesn't look right...<br>\nLet's say I have tensors x, y of size (1, 2, 3) and (1, 3, 2) and I'm doing <code>torch.cat([x, y], dim=0, pad_value=0</code>.<br>\nThe result has size (2, 3, 3).</p>\n<p>Now, you're given a grad of size (2, 3, 3). You have to slice out (1, 2, 3) and (1, 3, 2) from this, so you get that by:</p>\n<pre><code>grad_x = grad.narrow(dim, 0, 1).narrow(...).narrow(...)  # need to narrow along dim 1 and dim 2 s.t. the sizes match\ngrad_y = grad.narrow(dim, 1, 1).narrow(...).narrow(...) # need to narrow along dim 1 and dim 2 s.t. the sizes match\n</code></pre>", "body_text": "This doesn't look right...\nLet's say I have tensors x, y of size (1, 2, 3) and (1, 3, 2) and I'm doing torch.cat([x, y], dim=0, pad_value=0.\nThe result has size (2, 3, 3).\nNow, you're given a grad of size (2, 3, 3). You have to slice out (1, 2, 3) and (1, 3, 2) from this, so you get that by:\ngrad_x = grad.narrow(dim, 0, 1).narrow(...).narrow(...)  # need to narrow along dim 1 and dim 2 s.t. the sizes match\ngrad_y = grad.narrow(dim, 1, 1).narrow(...).narrow(...) # need to narrow along dim 1 and dim 2 s.t. the sizes match"}