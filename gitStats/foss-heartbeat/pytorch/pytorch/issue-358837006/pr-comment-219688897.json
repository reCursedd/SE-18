{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/219688897", "pull_request_review_id": 157929288, "id": 219688897, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxOTY4ODg5Nw==", "diff_hunk": "@@ -95,35 +77,44 @@ struct OutputTensorSizeStride {\n   *\n   * The most important assumption made is that the input tensors are contiguous.\n   */\n-\n-\n-\n template <typename T, typename IndexType, int Dims>\n __global__ void CatArrayBatchedCopy(\n     T* output,\n-    CatArrInputTensor<T, IndexType>* inputs,\n+    CatArrInputTensor<T, IndexType, CAT_ARRAY_MAX_INPUT_DIMS>* inputs,\n     OutputTensorSizeStride<IndexType, CAT_ARRAY_MAX_INPUT_DIMS> os,\n     const int concatDim,\n-    IndexType dimStride) {\n-\n-    IndexType tid = blockIdx.x * blockDim.x + threadIdx.x;\n-    IndexType nElements = inputs[blockIdx.y].nElements;\n+    T pad_value) {\n \n-    if(tid >= nElements) return;\n-    \n+    IndexType nElementsOutput = inputs[blockIdx.y].nElementsOutput;\n     T* data = inputs[blockIdx.y].input;\n-    IndexType offset = inputs[blockIdx.y].offset;\n-    IndexType dimSize = inputs[blockIdx.y].dimSize;\n-    IndexType dataOffset = offset * dimStride;\n-\n-    IndexType stride = gridDim.x * blockDim.x;\n-\n-    while( tid < nElements){\n-    IndexType elementOffset = CatArrIndexToOffset<IndexType, Dims>::compute(\n-    \t      os.outputSize, os.outputStride, dimSize, concatDim, tid);\n-    output[dataOffset + elementOffset] = data[tid];\n-\n-    tid += stride;\n+    IndexType dimOffset = inputs[blockIdx.y].offset;\n+    IndexType dataOffset = dimOffset * os.outputStride[concatDim];\n+\n+    for (IndexType linearIndex = (IndexType) blockIdx.x * blockDim.x + threadIdx.x;\n+      linearIndex < nElementsOutput;\n+      linearIndex += (IndexType) gridDim.x * blockDim.x) {\n+      IndexType inputOffset = 0;\n+      IndexType outputOffset = 0;\n+      bool inbound = true;\n+      for (int i = Dims - 1; i >= 1; --i) {\n+        IndexType inputDimSize = inputs[blockIdx.y].inputParam.inputSize[i];\n+        IndexType curDimSize = i == concatDim ? inputDimSize : os.outputSize[i];\n+        IndexType nextDimIndex = linearIndex / curDimSize;\n+        IndexType curDimIndex = linearIndex - curDimSize * nextDimIndex;\n+        if (curDimIndex >= inputDimSize && inbound) {", "path": "aten/src/THC/THCTensorMath.cuh", "position": null, "original_position": 111, "commit_id": "5b48bc2cd9a61cb81e09f008730bc096561a0e9a", "original_commit_id": "50f05c039c1e83163bdfc926371e673311da4b06", "user": {"login": "ngimel", "id": 15841449, "node_id": "MDQ6VXNlcjE1ODQxNDQ5", "avatar_url": "https://avatars3.githubusercontent.com/u/15841449?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ngimel", "html_url": "https://github.com/ngimel", "followers_url": "https://api.github.com/users/ngimel/followers", "following_url": "https://api.github.com/users/ngimel/following{/other_user}", "gists_url": "https://api.github.com/users/ngimel/gists{/gist_id}", "starred_url": "https://api.github.com/users/ngimel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ngimel/subscriptions", "organizations_url": "https://api.github.com/users/ngimel/orgs", "repos_url": "https://api.github.com/users/ngimel/repos", "events_url": "https://api.github.com/users/ngimel/events{/privacy}", "received_events_url": "https://api.github.com/users/ngimel/received_events", "type": "User", "site_admin": false}, "body": "nit: it will be more readable and probably generate better code (no branching) if written like `inbound = inbound && curDimIndex >= inputDimSize`", "created_at": "2018-09-23T05:33:16Z", "updated_at": "2018-11-23T15:51:49Z", "html_url": "https://github.com/pytorch/pytorch/pull/11494#discussion_r219688897", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/11494", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/219688897"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/11494#discussion_r219688897"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/11494"}}, "body_html": "<p>nit: it will be more readable and probably generate better code (no branching) if written like <code>inbound = inbound &amp;&amp; curDimIndex &gt;= inputDimSize</code></p>", "body_text": "nit: it will be more readable and probably generate better code (no branching) if written like inbound = inbound && curDimIndex >= inputDimSize"}