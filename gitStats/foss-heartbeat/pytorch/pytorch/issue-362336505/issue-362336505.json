{"url": "https://api.github.com/repos/pytorch/pytorch/issues/11901", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/11901/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/11901/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/11901/events", "html_url": "https://github.com/pytorch/pytorch/issues/11901", "id": 362336505, "node_id": "MDU6SXNzdWUzNjIzMzY1MDU=", "number": 11901, "title": "[feature request] ability to nest ParameterList", "user": {"login": "CharlesJQuarra", "id": 7565570, "node_id": "MDQ6VXNlcjc1NjU1NzA=", "avatar_url": "https://avatars1.githubusercontent.com/u/7565570?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CharlesJQuarra", "html_url": "https://github.com/CharlesJQuarra", "followers_url": "https://api.github.com/users/CharlesJQuarra/followers", "following_url": "https://api.github.com/users/CharlesJQuarra/following{/other_user}", "gists_url": "https://api.github.com/users/CharlesJQuarra/gists{/gist_id}", "starred_url": "https://api.github.com/users/CharlesJQuarra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CharlesJQuarra/subscriptions", "organizations_url": "https://api.github.com/users/CharlesJQuarra/orgs", "repos_url": "https://api.github.com/users/CharlesJQuarra/repos", "events_url": "https://api.github.com/users/CharlesJQuarra/events{/privacy}", "received_events_url": "https://api.github.com/users/CharlesJQuarra/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-09-20T19:39:50Z", "updated_at": "2018-09-21T15:16:11Z", "closed_at": "2018-09-21T15:16:11Z", "author_association": "NONE", "body_html": "<p>In some cases, it is more convenient to arrange some parameters as 2d or 3d arrays rather than 1D list. One could solve it by computing a Nd to 1D offset array, but this could be avoided if the <code>nn.ParameterList</code> objects could be nested</p>\n<p>Example:</p>\n<pre><code>class someModule(nn.Module):\n  def __init__(self, x, y):\n     params = []\n     for ix in range(x):\n       param_row = []\n       for iy in range(y):\n         param_row.append( nn.Parameter(torch.randn(1)))\n       params.append( nn.ParameterList(param_row))\n    param_array = nn.ParameterList(params)\n</code></pre>", "body_text": "In some cases, it is more convenient to arrange some parameters as 2d or 3d arrays rather than 1D list. One could solve it by computing a Nd to 1D offset array, but this could be avoided if the nn.ParameterList objects could be nested\nExample:\nclass someModule(nn.Module):\n  def __init__(self, x, y):\n     params = []\n     for ix in range(x):\n       param_row = []\n       for iy in range(y):\n         param_row.append( nn.Parameter(torch.randn(1)))\n       params.append( nn.ParameterList(param_row))\n    param_array = nn.ParameterList(params)", "body": "In some cases, it is more convenient to arrange some parameters as 2d or 3d arrays rather than 1D list. One could solve it by computing a Nd to 1D offset array, but this could be avoided if the `nn.ParameterList` objects could be nested\r\n\r\nExample:\r\n\r\n```\r\nclass someModule(nn.Module):\r\n  def __init__(self, x, y):\r\n     params = []\r\n     for ix in range(x):\r\n       param_row = []\r\n       for iy in range(y):\r\n         param_row.append( nn.Parameter(torch.randn(1)))\r\n       params.append( nn.ParameterList(param_row))\r\n    param_array = nn.ParameterList(params)\r\n```\r\n"}