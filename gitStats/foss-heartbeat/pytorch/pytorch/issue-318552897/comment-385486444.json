{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/385486444", "html_url": "https://github.com/pytorch/pytorch/pull/7052#issuecomment-385486444", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/7052", "id": 385486444, "node_id": "MDEyOklzc3VlQ29tbWVudDM4NTQ4NjQ0NA==", "user": {"login": "t-vi", "id": 20787943, "node_id": "MDQ6VXNlcjIwNzg3OTQz", "avatar_url": "https://avatars2.githubusercontent.com/u/20787943?v=4", "gravatar_id": "", "url": "https://api.github.com/users/t-vi", "html_url": "https://github.com/t-vi", "followers_url": "https://api.github.com/users/t-vi/followers", "following_url": "https://api.github.com/users/t-vi/following{/other_user}", "gists_url": "https://api.github.com/users/t-vi/gists{/gist_id}", "starred_url": "https://api.github.com/users/t-vi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/t-vi/subscriptions", "organizations_url": "https://api.github.com/users/t-vi/orgs", "repos_url": "https://api.github.com/users/t-vi/repos", "events_url": "https://api.github.com/users/t-vi/events{/privacy}", "received_events_url": "https://api.github.com/users/t-vi/received_events", "type": "User", "site_admin": false}, "created_at": "2018-04-30T18:26:29Z", "updated_at": "2018-04-30T18:26:29Z", "author_association": "CONTRIBUTOR", "body_html": "<p>(Sorry, the second mail doesn't seem to have reached the issue log... :( )<br>\nOh, it is roughly the same, CPU does the comparison first and then checks if value was NaN (then theMax is NaN because how the \"&gt;\" is formulated) and if it is, it aborts and theMax will be NaN.<br>\nPreviously, the Cuda kernel would put NaN into the accumulator (a in how the cuda function is called, theMax in CPU) and then overwrite it when doing the next comparison.<br>\nWith the proposed fix, the cuda kernel form checks if the left hand side (a - equivalent to theMax in how it is used) is NaN and if it is, it keeps a. I think this is result-equivalent to how the CPU works.</p>", "body_text": "(Sorry, the second mail doesn't seem to have reached the issue log... :( )\nOh, it is roughly the same, CPU does the comparison first and then checks if value was NaN (then theMax is NaN because how the \">\" is formulated) and if it is, it aborts and theMax will be NaN.\nPreviously, the Cuda kernel would put NaN into the accumulator (a in how the cuda function is called, theMax in CPU) and then overwrite it when doing the next comparison.\nWith the proposed fix, the cuda kernel form checks if the left hand side (a - equivalent to theMax in how it is used) is NaN and if it is, it keeps a. I think this is result-equivalent to how the CPU works.", "body": "(Sorry, the second mail doesn't seem to have reached the issue log... :( )\r\nOh, it is roughly the same, CPU does the comparison first and then checks if value was NaN (then theMax is NaN because how the \">\" is formulated) and if it is, it aborts and theMax will be NaN.\r\nPreviously, the Cuda kernel would put NaN into the accumulator (a in how the cuda function is called, theMax in CPU) and then overwrite it when doing the next comparison.\r\nWith the proposed fix, the cuda kernel form checks if the left hand side (a - equivalent to theMax in how it is used) is NaN and if it is, it keeps a. I think this is result-equivalent to how the CPU works. \r\n"}