{"url": "https://api.github.com/repos/pytorch/pytorch/issues/4927", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/4927/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/4927/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/4927/events", "html_url": "https://github.com/pytorch/pytorch/issues/4927", "id": 292680043, "node_id": "MDU6SXNzdWUyOTI2ODAwNDM=", "number": 4927, "title": "[Feature Request]would PackedSequence support unsorted sequences?", "user": {"login": "dugu9sword", "id": 6239743, "node_id": "MDQ6VXNlcjYyMzk3NDM=", "avatar_url": "https://avatars3.githubusercontent.com/u/6239743?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dugu9sword", "html_url": "https://github.com/dugu9sword", "followers_url": "https://api.github.com/users/dugu9sword/followers", "following_url": "https://api.github.com/users/dugu9sword/following{/other_user}", "gists_url": "https://api.github.com/users/dugu9sword/gists{/gist_id}", "starred_url": "https://api.github.com/users/dugu9sword/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dugu9sword/subscriptions", "organizations_url": "https://api.github.com/users/dugu9sword/orgs", "repos_url": "https://api.github.com/users/dugu9sword/repos", "events_url": "https://api.github.com/users/dugu9sword/events{/privacy}", "received_events_url": "https://api.github.com/users/dugu9sword/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-01-30T07:33:37Z", "updated_at": "2018-01-30T07:38:53Z", "closed_at": null, "author_association": "NONE", "body_html": "<p>By default, sequences packed in <code>PackedSequence</code> will be sorted by length.<br>\nHowever in some cases where a datum contains two sequences (<strong>A - B</strong>), the descendant order of <strong>A</strong> is not the order of <strong>B</strong>. This will course some mismatches.<br>\nMaybe the correct way is:<br>\n<code>sort A -&gt; feed into RNN -&gt; unsort A -&gt; sort B -&gt; feed into RNN -&gt; unsort B </code><br>\nI am wondering if <code>PackedSequence</code> can support the <strong>sort</strong> and <strong>unsort</strong> operation automatically.</p>\n<p>Below is the code I implemented for an RNN:</p>\n<div class=\"highlight highlight-source-python\"><pre>    <span class=\"pl-k\">def</span> <span class=\"pl-en\">forward</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>, <span class=\"pl-smi\">input_ids</span>: List, <span class=\"pl-smi\">input_lens</span>: List, <span class=\"pl-smi\">lens_sorted</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>):\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"\"\"</span>Sort by input lens<span class=\"pl-pds\">\"\"\"</span></span>\n        <span class=\"pl-k\">if</span> lens_sorted:\n            sorted_word_ids, sorted_lens <span class=\"pl-k\">=</span> torch.autograd.Variable(torch.LongTensor(input_ids)), input_lens\n        <span class=\"pl-k\">else</span>:\n            sorted_lens, sorted_idx <span class=\"pl-k\">=</span> torch.sort(torch.autograd.Variable(torch.LongTensor(input_lens)), <span class=\"pl-c1\">0</span>, <span class=\"pl-v\">descending</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>)\n            sorted_lens <span class=\"pl-k\">=</span> sorted_lens.cpu().data.numpy().tolist()\n            sorted_word_ids <span class=\"pl-k\">=</span> torch.index_select(torch.autograd.Variable(torch.LongTensor(input_ids)), <span class=\"pl-v\">dim</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">0</span>, <span class=\"pl-v\">index</span><span class=\"pl-k\">=</span>sorted_idx)\n            unsorted_idx <span class=\"pl-k\">=</span> torch.zeros(sorted_idx.size()).long() \\\n                .scatter_(<span class=\"pl-c1\">0</span>, sorted_idx.cpu().data, torch.LongTensor(<span class=\"pl-c1\">list</span>(<span class=\"pl-c1\">range</span>(<span class=\"pl-c1\">len</span>(input_ids)))))\n\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"\"\"</span>Calculating the hidden and outputs<span class=\"pl-pds\">\"\"\"</span></span>\n        <span class=\"pl-c\"><span class=\"pl-c\">#</span> ......</span>\n\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"\"\"</span>Unsort by input lens<span class=\"pl-pds\">\"\"\"</span></span>\n        <span class=\"pl-k\">if</span> lens_sorted:\n            unsorted_outputs, unsorted_hidden <span class=\"pl-k\">=</span> outputs, hidden\n        <span class=\"pl-k\">else</span>:\n            unsorted_outputs <span class=\"pl-k\">=</span> torch.index_select(outputs, <span class=\"pl-v\">dim</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">0</span>, <span class=\"pl-v\">index</span><span class=\"pl-k\">=</span>torch.autograd.Variable(unsorted_idx))\n            unsorted_hidden <span class=\"pl-k\">=</span> torch.index_select(hidden, <span class=\"pl-v\">dim</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">1</span>, <span class=\"pl-v\">index</span><span class=\"pl-k\">=</span>torch.autograd.Variable(unsorted_idx))\n\n        <span class=\"pl-k\">return</span> unsorted_outputs, unsorted_hidden</pre></div>", "body_text": "By default, sequences packed in PackedSequence will be sorted by length.\nHowever in some cases where a datum contains two sequences (A - B), the descendant order of A is not the order of B. This will course some mismatches.\nMaybe the correct way is:\nsort A -> feed into RNN -> unsort A -> sort B -> feed into RNN -> unsort B \nI am wondering if PackedSequence can support the sort and unsort operation automatically.\nBelow is the code I implemented for an RNN:\n    def forward(self, input_ids: List, input_lens: List, lens_sorted=True):\n        \"\"\"Sort by input lens\"\"\"\n        if lens_sorted:\n            sorted_word_ids, sorted_lens = torch.autograd.Variable(torch.LongTensor(input_ids)), input_lens\n        else:\n            sorted_lens, sorted_idx = torch.sort(torch.autograd.Variable(torch.LongTensor(input_lens)), 0, descending=True)\n            sorted_lens = sorted_lens.cpu().data.numpy().tolist()\n            sorted_word_ids = torch.index_select(torch.autograd.Variable(torch.LongTensor(input_ids)), dim=0, index=sorted_idx)\n            unsorted_idx = torch.zeros(sorted_idx.size()).long() \\\n                .scatter_(0, sorted_idx.cpu().data, torch.LongTensor(list(range(len(input_ids)))))\n\n        \"\"\"Calculating the hidden and outputs\"\"\"\n        # ......\n\n        \"\"\"Unsort by input lens\"\"\"\n        if lens_sorted:\n            unsorted_outputs, unsorted_hidden = outputs, hidden\n        else:\n            unsorted_outputs = torch.index_select(outputs, dim=0, index=torch.autograd.Variable(unsorted_idx))\n            unsorted_hidden = torch.index_select(hidden, dim=1, index=torch.autograd.Variable(unsorted_idx))\n\n        return unsorted_outputs, unsorted_hidden", "body": "By default, sequences packed in `PackedSequence` will be sorted by length.\r\nHowever in some cases where a datum contains two sequences (**A - B**), the descendant order of **A** is not the order of **B**. This will course some mismatches. \r\nMaybe the correct way is:\r\n`sort A -> feed into RNN -> unsort A -> sort B -> feed into RNN -> unsort B `\r\nI am wondering if `PackedSequence` can support the **sort** and **unsort** operation automatically.\r\n\r\nBelow is the code I implemented for an RNN:\r\n```python\r\n    def forward(self, input_ids: List, input_lens: List, lens_sorted=True):\r\n        \"\"\"Sort by input lens\"\"\"\r\n        if lens_sorted:\r\n            sorted_word_ids, sorted_lens = torch.autograd.Variable(torch.LongTensor(input_ids)), input_lens\r\n        else:\r\n            sorted_lens, sorted_idx = torch.sort(torch.autograd.Variable(torch.LongTensor(input_lens)), 0, descending=True)\r\n            sorted_lens = sorted_lens.cpu().data.numpy().tolist()\r\n            sorted_word_ids = torch.index_select(torch.autograd.Variable(torch.LongTensor(input_ids)), dim=0, index=sorted_idx)\r\n            unsorted_idx = torch.zeros(sorted_idx.size()).long() \\\r\n                .scatter_(0, sorted_idx.cpu().data, torch.LongTensor(list(range(len(input_ids)))))\r\n\r\n        \"\"\"Calculating the hidden and outputs\"\"\"\r\n        # ......\r\n\r\n        \"\"\"Unsort by input lens\"\"\"\r\n        if lens_sorted:\r\n            unsorted_outputs, unsorted_hidden = outputs, hidden\r\n        else:\r\n            unsorted_outputs = torch.index_select(outputs, dim=0, index=torch.autograd.Variable(unsorted_idx))\r\n            unsorted_hidden = torch.index_select(hidden, dim=1, index=torch.autograd.Variable(unsorted_idx))\r\n\r\n        return unsorted_outputs, unsorted_hidden\r\n```"}