{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/196500458", "pull_request_review_id": 130065059, "id": 196500458, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NjUwMDQ1OA==", "diff_hunk": "@@ -2,85 +2,101 @@\n #include \"common.h\"\n #include \"THCTensor.hpp\"\n \n-#include <thrust/transform.h>\n-#include <thrust/reduce.h>\n-#include <thrust/transform_reduce.h>\n-#include <thrust/functional.h>\n+#include \"linear_upsampling.h\"\n+#include \"THCDeviceTensor.cuh\"\n+#include \"THCDeviceTensorUtils.cuh\"\n+#include \"THCDeviceUtils.cuh\"\n \n #include \"THCHalf.h\"\n #include \"THCHalfAutoNumerics.cuh\"\n+#include \"THCAtomics.cuh\"\n \n-/*\n- * Description:\n- */\n+template<typename Dtype, typename Acctype>\n+__global__ void nearest_neighbor_interp2_kernel(", "path": "aten/src/THCUNN/SpatialUpSamplingNearest.cu", "position": null, "original_position": 21, "commit_id": "f99c543ab514043a5a842d80d166f4ef7e36d93b", "original_commit_id": "1958eb421c916bd3864353ffed4e36f574774c4e", "user": {"login": "ailzhang", "id": 5248122, "node_id": "MDQ6VXNlcjUyNDgxMjI=", "avatar_url": "https://avatars2.githubusercontent.com/u/5248122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ailzhang", "html_url": "https://github.com/ailzhang", "followers_url": "https://api.github.com/users/ailzhang/followers", "following_url": "https://api.github.com/users/ailzhang/following{/other_user}", "gists_url": "https://api.github.com/users/ailzhang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ailzhang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ailzhang/subscriptions", "organizations_url": "https://api.github.com/users/ailzhang/orgs", "repos_url": "https://api.github.com/users/ailzhang/repos", "events_url": "https://api.github.com/users/ailzhang/events{/privacy}", "received_events_url": "https://api.github.com/users/ailzhang/received_events", "type": "User", "site_admin": false}, "body": "Do you mean we could reuse kernels for linear methods? I guess the main motivation for this was \"we had a kernel method for each (linear/nearest , 1d/2d/3d) combination before\" and then I thought we might have some reasons to keep specific kernels. But honestly the answer is i'm not sure :P ", "created_at": "2018-06-19T16:48:19Z", "updated_at": "2018-11-23T15:45:46Z", "html_url": "https://github.com/pytorch/pytorch/pull/8591#discussion_r196500458", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/8591", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/196500458"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/8591#discussion_r196500458"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/8591"}}, "body_html": "<p>Do you mean we could reuse kernels for linear methods? I guess the main motivation for this was \"we had a kernel method for each (linear/nearest , 1d/2d/3d) combination before\" and then I thought we might have some reasons to keep specific kernels. But honestly the answer is i'm not sure :P</p>", "body_text": "Do you mean we could reuse kernels for linear methods? I guess the main motivation for this was \"we had a kernel method for each (linear/nearest , 1d/2d/3d) combination before\" and then I thought we might have some reasons to keep specific kernels. But honestly the answer is i'm not sure :P", "in_reply_to_id": 196477198}