{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/197380706", "pull_request_review_id": 131103694, "id": 197380706, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NzM4MDcwNg==", "diff_hunk": "@@ -2,172 +2,131 @@\n #define TH_GENERIC_FILE \"generic/TemporalUpSamplingNearest.c\"\n #else\n \n+#include \"linear_upsampling.h\"\n+#include <stdio.h>\n \n static inline void THNN_(TemporalUpSamplingNearest_shapeCheck)\n      (THTensor *input, THTensor *gradOutput,\n-      int scale_factor) {\n-  THArgCheck(input != NULL, 2, \"3D input tensor expected but got NULL\");\n-  THArgCheck(scale_factor > 1, 4,\n-\t     \"scale_factor must be greater than 1, but got: %d\", scale_factor);\n-  THNN_ARGCHECK(!input->is_empty() && (input->dim() == 2 || input->dim() == 3), 2, input,\n-\t\t\"non-empty 2D or 3D input tensor expected but got: %s\");\n-  if (input->dim() == 2) {\n-    int nChannels    = THTensor_(size)(input, 0);\n-    int inputWidth   = THTensor_(size)(input, 1);\n-    int outputWidth  = inputWidth  * scale_factor;\n-    if (gradOutput != NULL) {\n-      THNN_CHECK_DIM_SIZE(gradOutput, 3, 0, nChannels);\n-      THNN_CHECK_DIM_SIZE(gradOutput, 3, 1, outputWidth);\n-    }\n-  } else {\n-    int nBatch       = THTensor_(size)(input, 0);\n-    int nChannels    = THTensor_(size)(input, 1);\n-    int inputWidth   = THTensor_(size)(input, 2);\n-    int outputWidth  = inputWidth  * scale_factor;\n-    if (gradOutput != NULL) {\n-      THNN_CHECK_DIM_SIZE(gradOutput, 3, 0, nBatch);\n-      THNN_CHECK_DIM_SIZE(gradOutput, 3, 1, nChannels);\n-      THNN_CHECK_DIM_SIZE(gradOutput, 3, 2, outputWidth);\n-    }\n+      int nBatch, int nChannels,\n+      int inputWidth, int outputWidth) {\n+  THArgCheck(inputWidth > 0 && outputWidth > 0, 2,\n+       \"input and output sizes should be greater than 0,\"\n+       \" but got input (W: %d) output (W: %d)\",\n+       inputWidth, outputWidth);\n+  if (input != NULL) {\n+    THNN_ARGCHECK(input->_dim() == 3, 2, input,\n+      \"3D input tensor expected but got: %s\");\n+  }\n+\n+  if (gradOutput != NULL) {\n+    THNN_CHECK_DIM_SIZE(gradOutput, 3, 0, nBatch);\n+    THNN_CHECK_DIM_SIZE(gradOutput, 3, 1, nChannels);\n+    THNN_CHECK_DIM_SIZE(gradOutput, 3, 2, outputWidth);\n   }\n }\n \n void THNN_(TemporalUpSamplingNearest_updateOutput)(\n     THNNState *state,\n     THTensor *input,\n     THTensor *output,\n-    int scale_factor)\n+    int outputWidth)\n {\n-  THNN_(TemporalUpSamplingNearest_shapeCheck)(input, NULL, scale_factor);\n-  int inputWidth  = THTensor_(size)(input,  input->dim()-1);\n-  int outputWidth = inputWidth * scale_factor;\n+  int nbatch = THTensor_(size)(input, 0);\n+  int channels = THTensor_(size)(input, 1);\n+  int inputWidth = THTensor_(size)(input, 2);\n+  const float scale = (float) inputWidth / (float)outputWidth;\n+\n+  THNN_(TemporalUpSamplingNearest_shapeCheck)(input, NULL, nbatch, channels, inputWidth, outputWidth);\n \n-  if (input->dim() == 2) {\n-    THTensor_(resize2d)(output,\n-\t\t\tTHTensor_(size)(input, 0),\n-      outputWidth);\n-  } else {\n     THTensor_(resize3d)(output,\n \t\t\tTHTensor_(size)(input, 0),\n       THTensor_(size)(input, 1),\n       outputWidth);\n+    channels = channels * nbatch; \n+\n+  THAssert(inputWidth > 0 && outputWidth > 0);\n+\n+  input = THTensor_(newContiguous)(input);\n+  THTensor_(zero)(output);\n+  real *idata = THTensor_(data)(input);\n+  real *odata = THTensor_(data)(output);\n+\n+  // special case: just copy\n+  if (inputWidth == outputWidth) {\n+    for (int w2 = 0; w2 < outputWidth; ++w2) {\n+      const int w1 = w2;\n+      const real* pos1 = &idata[w1];\n+      real* pos2 = &odata[w2];\n+      for (int c = 0; c < channels; ++c) {\n+        pos2[0] = pos1[0];\n+        pos1 += inputWidth;\n+        pos2 += outputWidth;\n+      }\n+    }\n+    return;\n   }\n \n-  int dW = scale_factor;\n-  int xDim = input->dim()-1;\n-\n-  // dims\n-  int idim = input->dim();\n-  int osz0 = output->size[0];\n-  int osz1 = output->size[1];\n-  int osz2 = 1;\n-  if (idim > 2) {\n-    osz2 = output->size[2];\n-  }\n+  for (int w2 = 0; w2 < outputWidth; ++w2) {\n+    const accreal src_x = nearest_neighbor_compute_source_index(scale, w2, inputWidth);\n+    const int w1 = src_x;\n+    const real* pos1 = &idata[w1];\n+    real* pos2 = &odata[w2];\n+    for (int c = 0; c < channels; ++c) {\n+      pos2[0] = pos1[0];\n+      pos1 += inputWidth;\n+      pos2 += outputWidth;\n \n-  // get strides\n-  int64_t *is = input->stride;\n-  int64_t *os = output->stride;\n-\n-  // get raw pointers\n-  real *pin = THTensor_(data)(input);\n-  real *pout = THTensor_(data)(output);\n-\n-  // perform the upsampling\n-  int i0, i1, i2, isrc, idst;\n-  int iout[3];  // Output indices\n-  int iin[3];  // Input indices\n-\n-  for (i0 = 0; i0 < osz0; i0++) {\n-    iout[0] = i0;\n-    iin[0] = i0;\n-    for (i1 = 0; i1 < osz1; i1++) {\n-      iout[1] = i1;\n-      iin[1] = i1;\n-      for (i2 = 0; i2 < osz2; i2++) {\n-        iout[2] = i2;\n-        iin[2] = i2;\n-\n-        // set the indices for the upsampled dimensions\n-        iin[xDim] = iout[xDim] / dW;\n-\n-        idst = i0*os[0] + i1*os[1];\n-        isrc = iin[0]*is[0] + iin[1]*is[1];\n-        if (idim > 2) {\n-          idst += i2*os[2];\n-          isrc += iin[2]*is[2];\n-        }\n-\n-        pout[idst] = pin[isrc];\n-      }\n     }\n   }\n+  THTensor_(free)(input);\n }\n \n void THNN_(TemporalUpSamplingNearest_updateGradInput)(\n     THNNState *state,\n-    THTensor *input,\n     THTensor *gradOutput,\n     THTensor *gradInput,\n-    int scale_factor)\n+    int nbatch,\n+    int channels,\n+    int inputWidth,\n+    int outputWidth)\n {\n-  THNN_(TemporalUpSamplingNearest_shapeCheck)(input, gradOutput, scale_factor);\n-  THTensor_(resizeAs)(gradInput, input);\n-\n-  int dW = scale_factor;\n-  int xDim = gradInput->dim()-1;\n-\n-  // dims\n-  int idim = gradInput->dim();  // Guaranteed to be between 2 and 4\n-  int isz0 = gradInput->size[0];\n-  int isz1 = gradInput->size[1];\n-  int isz2 = 1;\n-  if (idim > 2) {\n-    isz2 = gradInput->size[2];\n-  }\n-\n-  // get strides\n-  int64_t *is = gradInput->stride;\n-  int64_t *os = gradOutput->stride;\n-\n-  // get raw pointers\n-  real *pin = THTensor_(data)(gradInput);\n-  real *pout = THTensor_(data)(gradOutput);\n-\n-  // perform the upsampling\n-  int i0, i1, i2, isrc, idst, x;\n-  int iin[3];  // Input indices\n-  int iout[3];  // Output indices\n+  THNN_(TemporalUpSamplingNearest_shapeCheck)(NULL, gradOutput, nbatch, channels, inputWidth, outputWidth);\n+  THTensor_(resize3d)(gradInput, nbatch, channels, inputWidth);\n \n   THTensor_(zero)(gradInput);\n-\n-  for (i0 = 0; i0 < isz0; i0++) {\n-    iin[0] = i0;\n-    iout[0] = i0;\n-    for (i1 = 0; i1 < isz1; i1++) {\n-      iin[1] = i1;\n-      iout[1] = i1;\n-      for (i2 = 0; i2 < isz2; i2++) {\n-        iin[2] = i2;\n-        iout[2] = i2;\n-\n-        idst = i0*is[0] + i1*is[1];\n-        if (idim > 2) {\n-          idst += i2*is[2];\n-        }\n-\n-        // Now accumulate the gradients from gradOutput\n-        for (x = 0; x < dW; x++) {\n-          iout[xDim] = dW * iin[xDim] + x;\n-          isrc = iout[0]*os[0] + iout[1]*os[1];\n-          if (idim > 2) {\n-            isrc += iout[2]*os[2];\n-          }\n-          pin[idst] += pout[isrc];\n-        }\n+  gradOutput = THTensor_(newContiguous)(gradOutput);\n+  real *data1 = THTensor_(data)(gradInput);\n+  real *data2 = THTensor_(data)(gradOutput);\n+  channels = nbatch * channels;\n+  const float scale = (float) inputWidth / (float)outputWidth;\n+\n+  // special case: same-size matching grids\n+  if (inputWidth == outputWidth) {\n+    for (int w2 = 0; w2 < outputWidth; ++w2) {\n+      const int w1 = w2;\n+      real* pos1 = &data1[w1];\n+      const real* pos2 = &data2[w2];\n+      for (int c = 0; c < channels; ++c) {\n+        pos1[0] += pos2[0];\n+        pos1 += inputWidth;\n+        pos2 += outputWidth;\n       }\n     }\n+    return;", "path": "aten/src/THNN/generic/TemporalUpSamplingNearest.c", "position": null, "original_position": 247, "commit_id": "f99c543ab514043a5a842d80d166f4ef7e36d93b", "original_commit_id": "744dc0c71459d34a6763718fcff1bb45cb5461b1", "user": {"login": "fmassa", "id": 9110200, "node_id": "MDQ6VXNlcjkxMTAyMDA=", "avatar_url": "https://avatars2.githubusercontent.com/u/9110200?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fmassa", "html_url": "https://github.com/fmassa", "followers_url": "https://api.github.com/users/fmassa/followers", "following_url": "https://api.github.com/users/fmassa/following{/other_user}", "gists_url": "https://api.github.com/users/fmassa/gists{/gist_id}", "starred_url": "https://api.github.com/users/fmassa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fmassa/subscriptions", "organizations_url": "https://api.github.com/users/fmassa/orgs", "repos_url": "https://api.github.com/users/fmassa/repos", "events_url": "https://api.github.com/users/fmassa/events{/privacy}", "received_events_url": "https://api.github.com/users/fmassa/received_events", "type": "User", "site_admin": false}, "body": "and here?", "created_at": "2018-06-22T08:46:40Z", "updated_at": "2018-11-23T15:46:05Z", "html_url": "https://github.com/pytorch/pytorch/pull/8591#discussion_r197380706", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/8591", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/197380706"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/8591#discussion_r197380706"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/8591"}}, "body_html": "<p>and here?</p>", "body_text": "and here?"}