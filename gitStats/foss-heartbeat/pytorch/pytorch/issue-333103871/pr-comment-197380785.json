{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/197380785", "pull_request_review_id": 131103694, "id": 197380785, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NzM4MDc4NQ==", "diff_hunk": "@@ -2,225 +2,175 @@\n #define TH_GENERIC_FILE \"generic/VolumetricUpSamplingNearest.c\"\n #else\n \n+#include \"linear_upsampling.h\"\n+#include <stdio.h>\n \n static inline void THNN_(VolumetricUpSamplingNearest_shapeCheck)\n      (THTensor *input, THTensor *gradOutput,\n-      int scale_factor) {\n-  THArgCheck(input != NULL, 2, \"5D input tensor expected but got NULL\");\n-  THArgCheck(scale_factor > 1, 4,\n-\t     \"scale_factor must be greater than 1, but got: %d\", scale_factor);\n-  THNN_ARGCHECK(!input->is_empty() && (input->dim() == 4 || input->dim() == 5), 2, input,\n-\t\t\"non-empty 4D or 5D input tensor expected but got: %s\");\n-  if (input->dim() == 4) {\n-    int nChannels    = THTensor_(size)(input, 0);\n-    int inputDepth   = THTensor_(size)(input, 1);\n-    int inputHeight  = THTensor_(size)(input, 2);\n-    int inputWidth   = THTensor_(size)(input, 3);\n-    int outputDepth  = inputDepth  * scale_factor;\n-    int outputHeight = inputHeight * scale_factor;\n-    int outputWidth  = inputWidth  * scale_factor;\n-    if (gradOutput != NULL) {\n-      THNN_CHECK_DIM_SIZE(gradOutput, 4, 0, nChannels);\n-      THNN_CHECK_DIM_SIZE(gradOutput, 4, 1, outputDepth);\n-      THNN_CHECK_DIM_SIZE(gradOutput, 4, 2, outputHeight);\n-      THNN_CHECK_DIM_SIZE(gradOutput, 4, 3, outputWidth);\n-    }\n-  } else {\n-    int nBatch       = THTensor_(size)(input, 0);\n-    int nChannels    = THTensor_(size)(input, 1);\n-    int inputDepth   = THTensor_(size)(input, 2);\n-    int inputHeight  = THTensor_(size)(input, 3);\n-    int inputWidth   = THTensor_(size)(input, 4);  \n-    int outputDepth  = inputDepth  * scale_factor;\n-    int outputHeight = inputHeight * scale_factor;\n-    int outputWidth  = inputWidth  * scale_factor;\n-    if (gradOutput != NULL) {\n-      THNN_CHECK_DIM_SIZE(gradOutput, 5, 0, nBatch);\n-      THNN_CHECK_DIM_SIZE(gradOutput, 5, 1, nChannels);\n-      THNN_CHECK_DIM_SIZE(gradOutput, 5, 2, outputDepth);\n-      THNN_CHECK_DIM_SIZE(gradOutput, 5, 3, outputHeight);\n-      THNN_CHECK_DIM_SIZE(gradOutput, 5, 4, outputWidth);\n-    }\n+      int nBatch, int nChannels,\n+      int inputDepth, int inputHeight, int inputWidth,\n+      int outputDepth, int outputHeight, int outputWidth) {\n+  THArgCheck(inputDepth > 0 && inputHeight > 0 && inputWidth > 0\n+       && outputDepth > 0 && outputHeight > 0 && outputWidth > 0, 2,\n+       \"input and output sizes should be greater than 0,\"\n+       \" but got input (D: %d, H: %d, W: %d) output (D: %d, H: %d, W: %d)\",\n+       inputDepth, inputHeight, inputWidth, outputDepth, outputHeight, outputWidth);\n+  if (input != NULL) {\n+    THNN_ARGCHECK(input->_dim() == 5, 2, input,\n+      \"5D input tensor expected but got: %s\");\n+  }\n+\n+  if (gradOutput != NULL) {\n+    THNN_CHECK_DIM_SIZE(gradOutput, 5, 0, nBatch);\n+    THNN_CHECK_DIM_SIZE(gradOutput, 5, 1, nChannels);\n+    THNN_CHECK_DIM_SIZE(gradOutput, 5, 2, outputDepth);\n+    THNN_CHECK_DIM_SIZE(gradOutput, 5, 3, outputHeight);\n+    THNN_CHECK_DIM_SIZE(gradOutput, 5, 4, outputWidth);\n+\n   }\n }\n \n+\n void THNN_(VolumetricUpSamplingNearest_updateOutput)(\n     THNNState *state,\n     THTensor *input,\n     THTensor *output,\n-    int scale_factor)\n+    int outputDepth,\n+    int outputHeight,\n+    int outputWidth)\n {\n-  THNN_(VolumetricUpSamplingNearest_shapeCheck)(input, NULL, scale_factor);\n-  int inputDepth   = THTensor_(size)(input, input->dim()-3);\n-  int inputHeight  = THTensor_(size)(input, input->dim()-2);\n-  int inputWidth   = THTensor_(size)(input,  input->dim()-1);\n-  int outputDepth  = inputDepth * scale_factor;\n-  int outputHeight = inputHeight * scale_factor;\n-  int outputWidth  = inputWidth * scale_factor;\n-\n-  if (input->dim() == 4) {\n-    THTensor_(resize4d)(output,\n-\t\t\tTHTensor_(size)(input, 0),\n-\t\t\toutputDepth, outputHeight, outputWidth);    \n-  } else {\n-    THTensor_(resize5d)(output,\n-\t\t\tTHTensor_(size)(input, 0),\n-\t\t\tTHTensor_(size)(input, 1),\n-\t\t\toutputDepth, outputHeight, outputWidth);\n-  }\n-\n-  int dT = scale_factor;\n-  int dW = scale_factor;\n-  int dH = scale_factor;\n-  int xDim = input->dim()-3;\n-  int yDim = input->dim()-2;\n-  int zDim = input->dim()-1;\n-\n-  // dims\n-  int idim = input->dim();\n-  int osz0 = output->size[0];\n-  int osz1 = output->size[1];\n-  int osz2 = output->size[2];\n-  int osz3 = output->size[3];\n-  int osz4 = 1;\n-  if (idim > 4) {\n-    osz4 = output->size[4];\n-  }\n+  int nbatch = THTensor_(size)(input, 0);\n+  int channels = THTensor_(size)(input, 1);\n+  int inputDepth = THTensor_(size)(input, 2);\n+  int inputHeight = THTensor_(size)(input, 3);\n+  int inputWidth = THTensor_(size)(input, 4);\n+  const float depth_scale = (float) inputDepth / (float) outputDepth; \n+  const float height_scale = (float) inputHeight / (float)outputHeight;\n+  const float width_scale = (float) inputWidth / (float)outputWidth;\n+\n+  THNN_(VolumetricUpSamplingNearest_shapeCheck)(input, NULL, nbatch, channels, inputDepth, inputHeight, inputWidth, outputDepth, outputHeight, outputWidth);\n+\n+  THTensor_(resize5d)(output,\n+      \t\t      THTensor_(size)(input, 0),\n+                      THTensor_(size)(input, 1),\n+                      outputDepth,\n+                      outputHeight,\n+                      outputWidth);\n+  channels = channels * nbatch; \n+\n+  THAssert(inputDepth > 0 && inputHeight > 0 && inputWidth > 0 && outputDepth > 0 && outputHeight > 0 && outputWidth > 0);\n+\n+  input = THTensor_(newContiguous)(input);\n+  THTensor_(zero)(output);\n+  real *idata = THTensor_(data)(input);\n+  real *odata = THTensor_(data)(output);\n+\n+  // special case: just copy\n+  if (inputDepth == outputDepth && inputHeight == outputHeight && inputWidth == outputWidth) {\n+    for (int d2 = 0; d2 < outputDepth; ++d2) {\n+      const int d1 = d2;\n+      for (int h2 = 0; h2 < outputHeight; ++h2) {\n+        const int h1 = h2;\n+        for (int w2 = 0; w2 < outputWidth; ++w2) {\n+          const int w1 = w2;\n+          const real* pos1 = &idata[d1 * inputHeight * inputWidth + h1 * inputWidth + w1];\n+          real* pos2 = &odata[d2 * outputHeight * outputWidth + h2 * outputWidth + w2];\n+          for (int c = 0; c < channels; ++c) {\n+            pos2[0] = pos1[0];\n+            pos1 += inputDepth * inputHeight * inputWidth;\n+            pos2 += outputDepth * outputHeight * outputWidth;\n \n-  // get strides\n-  int64_t *is = input->stride;\n-  int64_t *os = output->stride;\n-\n-  // get raw pointers\n-  real *pin = THTensor_(data)(input);\n-  real *pout = THTensor_(data)(output);\n-\n-  // perform the upsampling\n-  int i0, i1, i2, i3, i4, isrc, idst;\n-  int iout[5];  // Output indices\n-  int iin[5];  // Input indices\n-\n-  for (i0 = 0; i0 < osz0; i0++) {\n-    iout[0] = i0;\n-    iin[0] = i0;\n-    for (i1 = 0; i1 < osz1; i1++) {\n-      iout[1] = i1;\n-      iin[1] = i1;\n-      for (i2 = 0; i2 < osz2; i2++) {\n-        iout[2] = i2;\n-        iin[2] = i2;\n-        for (i3 = 0; i3 < osz3; i3++) {\n-          iout[3] = i3;\n-          iin[3] = i3;\n-          for (i4 = 0; i4 < osz4; i4++) {\n-            iout[4] = i4;\n-            iin[4] = i4;\n-\n-            // set the indices for the upsampled dimensions\n-            iin[xDim] = iout[xDim] / dW;\n-            iin[yDim] = iout[yDim] / dH;\n-            iin[zDim] = iout[zDim] / dT;\n-\n-            idst = i0*os[0] + i1*os[1] + i2*os[2] + i3*os[3];\n-            isrc = iin[0]*is[0] + iin[1]*is[1] + iin[2]*is[2] + iin[3]*is[3];\n-            if (idim > 4) {\n-              idst += i4*os[4];\n-              isrc += iin[4]*is[4];\n-            }\n-\n-            pout[idst] = pin[isrc];\n           }\n         }\n       }\n     }\n+    return;", "path": "aten/src/THNN/generic/VolumetricUpSamplingNearest.c", "position": null, "original_position": 201, "commit_id": "f99c543ab514043a5a842d80d166f4ef7e36d93b", "original_commit_id": "744dc0c71459d34a6763718fcff1bb45cb5461b1", "user": {"login": "fmassa", "id": 9110200, "node_id": "MDQ6VXNlcjkxMTAyMDA=", "avatar_url": "https://avatars2.githubusercontent.com/u/9110200?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fmassa", "html_url": "https://github.com/fmassa", "followers_url": "https://api.github.com/users/fmassa/followers", "following_url": "https://api.github.com/users/fmassa/following{/other_user}", "gists_url": "https://api.github.com/users/fmassa/gists{/gist_id}", "starred_url": "https://api.github.com/users/fmassa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fmassa/subscriptions", "organizations_url": "https://api.github.com/users/fmassa/orgs", "repos_url": "https://api.github.com/users/fmassa/repos", "events_url": "https://api.github.com/users/fmassa/events{/privacy}", "received_events_url": "https://api.github.com/users/fmassa/received_events", "type": "User", "site_admin": false}, "body": "and here?", "created_at": "2018-06-22T08:46:59Z", "updated_at": "2018-11-23T15:46:05Z", "html_url": "https://github.com/pytorch/pytorch/pull/8591#discussion_r197380785", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/8591", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/197380785"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/8591#discussion_r197380785"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/8591"}}, "body_html": "<p>and here?</p>", "body_text": "and here?"}