{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/197380666", "pull_request_review_id": 131103694, "id": 197380666, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NzM4MDY2Ng==", "diff_hunk": "@@ -2,172 +2,131 @@\n #define TH_GENERIC_FILE \"generic/TemporalUpSamplingNearest.c\"\n #else\n \n+#include \"linear_upsampling.h\"\n+#include <stdio.h>\n \n static inline void THNN_(TemporalUpSamplingNearest_shapeCheck)\n      (THTensor *input, THTensor *gradOutput,\n-      int scale_factor) {\n-  THArgCheck(input != NULL, 2, \"3D input tensor expected but got NULL\");\n-  THArgCheck(scale_factor > 1, 4,\n-\t     \"scale_factor must be greater than 1, but got: %d\", scale_factor);\n-  THNN_ARGCHECK(!input->is_empty() && (input->dim() == 2 || input->dim() == 3), 2, input,\n-\t\t\"non-empty 2D or 3D input tensor expected but got: %s\");\n-  if (input->dim() == 2) {\n-    int nChannels    = THTensor_(size)(input, 0);\n-    int inputWidth   = THTensor_(size)(input, 1);\n-    int outputWidth  = inputWidth  * scale_factor;\n-    if (gradOutput != NULL) {\n-      THNN_CHECK_DIM_SIZE(gradOutput, 3, 0, nChannels);\n-      THNN_CHECK_DIM_SIZE(gradOutput, 3, 1, outputWidth);\n-    }\n-  } else {\n-    int nBatch       = THTensor_(size)(input, 0);\n-    int nChannels    = THTensor_(size)(input, 1);\n-    int inputWidth   = THTensor_(size)(input, 2);\n-    int outputWidth  = inputWidth  * scale_factor;\n-    if (gradOutput != NULL) {\n-      THNN_CHECK_DIM_SIZE(gradOutput, 3, 0, nBatch);\n-      THNN_CHECK_DIM_SIZE(gradOutput, 3, 1, nChannels);\n-      THNN_CHECK_DIM_SIZE(gradOutput, 3, 2, outputWidth);\n-    }\n+      int nBatch, int nChannels,\n+      int inputWidth, int outputWidth) {\n+  THArgCheck(inputWidth > 0 && outputWidth > 0, 2,\n+       \"input and output sizes should be greater than 0,\"\n+       \" but got input (W: %d) output (W: %d)\",\n+       inputWidth, outputWidth);\n+  if (input != NULL) {\n+    THNN_ARGCHECK(input->_dim() == 3, 2, input,\n+      \"3D input tensor expected but got: %s\");\n+  }\n+\n+  if (gradOutput != NULL) {\n+    THNN_CHECK_DIM_SIZE(gradOutput, 3, 0, nBatch);\n+    THNN_CHECK_DIM_SIZE(gradOutput, 3, 1, nChannels);\n+    THNN_CHECK_DIM_SIZE(gradOutput, 3, 2, outputWidth);\n   }\n }\n \n void THNN_(TemporalUpSamplingNearest_updateOutput)(\n     THNNState *state,\n     THTensor *input,\n     THTensor *output,\n-    int scale_factor)\n+    int outputWidth)\n {\n-  THNN_(TemporalUpSamplingNearest_shapeCheck)(input, NULL, scale_factor);\n-  int inputWidth  = THTensor_(size)(input,  input->dim()-1);\n-  int outputWidth = inputWidth * scale_factor;\n+  int nbatch = THTensor_(size)(input, 0);\n+  int channels = THTensor_(size)(input, 1);\n+  int inputWidth = THTensor_(size)(input, 2);\n+  const float scale = (float) inputWidth / (float)outputWidth;\n+\n+  THNN_(TemporalUpSamplingNearest_shapeCheck)(input, NULL, nbatch, channels, inputWidth, outputWidth);\n \n-  if (input->dim() == 2) {\n-    THTensor_(resize2d)(output,\n-\t\t\tTHTensor_(size)(input, 0),\n-      outputWidth);\n-  } else {\n     THTensor_(resize3d)(output,\n \t\t\tTHTensor_(size)(input, 0),\n       THTensor_(size)(input, 1),\n       outputWidth);\n+    channels = channels * nbatch; \n+\n+  THAssert(inputWidth > 0 && outputWidth > 0);\n+\n+  input = THTensor_(newContiguous)(input);\n+  THTensor_(zero)(output);\n+  real *idata = THTensor_(data)(input);\n+  real *odata = THTensor_(data)(output);\n+\n+  // special case: just copy\n+  if (inputWidth == outputWidth) {\n+    for (int w2 = 0; w2 < outputWidth; ++w2) {\n+      const int w1 = w2;\n+      const real* pos1 = &idata[w1];\n+      real* pos2 = &odata[w2];\n+      for (int c = 0; c < channels; ++c) {\n+        pos2[0] = pos1[0];\n+        pos1 += inputWidth;\n+        pos2 += outputWidth;\n+      }\n+    }\n+    return;", "path": "aten/src/THNN/generic/TemporalUpSamplingNearest.c", "position": null, "original_position": 98, "commit_id": "f99c543ab514043a5a842d80d166f4ef7e36d93b", "original_commit_id": "744dc0c71459d34a6763718fcff1bb45cb5461b1", "user": {"login": "fmassa", "id": 9110200, "node_id": "MDQ6VXNlcjkxMTAyMDA=", "avatar_url": "https://avatars2.githubusercontent.com/u/9110200?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fmassa", "html_url": "https://github.com/fmassa", "followers_url": "https://api.github.com/users/fmassa/followers", "following_url": "https://api.github.com/users/fmassa/following{/other_user}", "gists_url": "https://api.github.com/users/fmassa/gists{/gist_id}", "starred_url": "https://api.github.com/users/fmassa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fmassa/subscriptions", "organizations_url": "https://api.github.com/users/fmassa/orgs", "repos_url": "https://api.github.com/users/fmassa/repos", "events_url": "https://api.github.com/users/fmassa/events{/privacy}", "received_events_url": "https://api.github.com/users/fmassa/received_events", "type": "User", "site_admin": false}, "body": "free here?", "created_at": "2018-06-22T08:46:30Z", "updated_at": "2018-11-23T15:46:05Z", "html_url": "https://github.com/pytorch/pytorch/pull/8591#discussion_r197380666", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/8591", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/197380666"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/8591#discussion_r197380666"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/8591"}}, "body_html": "<p>free here?</p>", "body_text": "free here?"}