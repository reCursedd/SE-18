{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/220658737", "pull_request_review_id": 159117935, "id": 220658737, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyMDY1ODczNw==", "diff_hunk": "@@ -131,6 +131,8 @@ def __init__(self, loc, covariance_matrix=None, precision_matrix=None, scale_tri\n             if covariance_matrix.dim() < 2:\n                 raise ValueError(\"covariance_matrix must be at least two-dimensional, \"\n                                  \"with optional leading batch dimensions\")\n+            if not constraints.positive_definite.check(covariance_matrix).all():\n+                raise ValueError(\"covariance matrix must be positive definite\")", "path": "torch/distributions/multivariate_normal.py", "position": null, "original_position": 5, "commit_id": "7e1ebde33cf8155a3bb58ad6460c1a7d0bbf4bdb", "original_commit_id": "5d9829b4e5e5888fc5dbefb44ed7fe1909963310", "user": {"login": "fritzo", "id": 648532, "node_id": "MDQ6VXNlcjY0ODUzMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/648532?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fritzo", "html_url": "https://github.com/fritzo", "followers_url": "https://api.github.com/users/fritzo/followers", "following_url": "https://api.github.com/users/fritzo/following{/other_user}", "gists_url": "https://api.github.com/users/fritzo/gists{/gist_id}", "starred_url": "https://api.github.com/users/fritzo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fritzo/subscriptions", "organizations_url": "https://api.github.com/users/fritzo/orgs", "repos_url": "https://api.github.com/users/fritzo/repos", "events_url": "https://api.github.com/users/fritzo/events{/privacy}", "received_events_url": "https://api.github.com/users/fritzo/received_events", "type": "User", "site_admin": false}, "body": "Correct. In fact this check is already happening in`super(MultivariateNormal, self).__init__()` below, guarded by `validate_args`.\r\n\r\nI think this PR should instead move the `self._unbroadcasted_scale_tril` computations to be after `super(...).__init__()`, so that arg checking happens before we do any serious linear algebra. WDYT? I think you can repeat the same conditional statements:\r\n```py\r\nsuper(MultivariateNormal, self).__init__(...)\r\n\r\n# Compute unbroadcasted scale_tril after arg validation.\r\nif scale_tril is not None:\r\n   self._unbroadcasted_scale_tril = scale_tril\r\nelse:\r\n    self._unbroadcasted_scale_tril = _batch_potrf_lower(covariance_matrix)\r\n```\r\nNote this still misses the linear algebra to compute cov from precision, which might error...\r\n```py\r\ncovariance_matrix = _batch_inverse(precision_matrix)\r\n```", "created_at": "2018-09-26T17:41:56Z", "updated_at": "2018-11-23T15:52:02Z", "html_url": "https://github.com/pytorch/pytorch/pull/12102#discussion_r220658737", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/12102", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/220658737"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/12102#discussion_r220658737"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/12102"}}, "body_html": "<p>Correct. In fact this check is already happening in<code>super(MultivariateNormal, self).__init__()</code> below, guarded by <code>validate_args</code>.</p>\n<p>I think this PR should instead move the <code>self._unbroadcasted_scale_tril</code> computations to be after <code>super(...).__init__()</code>, so that arg checking happens before we do any serious linear algebra. WDYT? I think you can repeat the same conditional statements:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-c1\">super</span>(MultivariateNormal, <span class=\"pl-c1\">self</span>).<span class=\"pl-c1\">__init__</span>(<span class=\"pl-c1\">...</span>)\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> Compute unbroadcasted scale_tril after arg validation.</span>\n<span class=\"pl-k\">if</span> scale_tril <span class=\"pl-k\">is</span> <span class=\"pl-k\">not</span> <span class=\"pl-c1\">None</span>:\n   <span class=\"pl-c1\">self</span>._unbroadcasted_scale_tril <span class=\"pl-k\">=</span> scale_tril\n<span class=\"pl-k\">else</span>:\n    <span class=\"pl-c1\">self</span>._unbroadcasted_scale_tril <span class=\"pl-k\">=</span> _batch_potrf_lower(covariance_matrix)</pre></div>\n<p>Note this still misses the linear algebra to compute cov from precision, which might error...</p>\n<div class=\"highlight highlight-source-python\"><pre>covariance_matrix <span class=\"pl-k\">=</span> _batch_inverse(precision_matrix)</pre></div>", "body_text": "Correct. In fact this check is already happening insuper(MultivariateNormal, self).__init__() below, guarded by validate_args.\nI think this PR should instead move the self._unbroadcasted_scale_tril computations to be after super(...).__init__(), so that arg checking happens before we do any serious linear algebra. WDYT? I think you can repeat the same conditional statements:\nsuper(MultivariateNormal, self).__init__(...)\n\n# Compute unbroadcasted scale_tril after arg validation.\nif scale_tril is not None:\n   self._unbroadcasted_scale_tril = scale_tril\nelse:\n    self._unbroadcasted_scale_tril = _batch_potrf_lower(covariance_matrix)\nNote this still misses the linear algebra to compute cov from precision, which might error...\ncovariance_matrix = _batch_inverse(precision_matrix)", "in_reply_to_id": 220652289}