{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/115320844", "pull_request_review_id": 36848901, "id": 115320844, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNTMyMDg0NA==", "diff_hunk": "@@ -126,6 +127,56 @@ def backward(self, grad_output):\n         return grad_input.mul(-1)\n \n \n+class Threshold(Function):\n+\n+    @staticmethod\n+    def forward(ctx, input, threshold, value, inplace):\n+        if inplace:\n+            if value > threshold:\n+                raise RuntimeError('in-place processing requires value ({}) to not '\n+                                   'exceed threshold ({})'.format(value, threshold))\n+        ctx.threshold = threshold\n+        ctx.value = value\n+        ctx.inplace = inplace\n+\n+        if inplace:\n+            ctx.mark_dirty(input)\n+        output = input.new(input.size())\n+        ctx.save_for_backward(input)\n+\n+        backend = type2backend[type(input)]\n+        backend.Threshold_updateOutput(\n+            backend.library_state,\n+            input,\n+            output,\n+            threshold,\n+            value,\n+            inplace\n+        )\n+        return output\n+\n+    @staticmethod\n+    def backward(ctx, grad_output):\n+        input, = ctx.saved_variables\n+        if grad_output.volatile:\n+            grad_input = Variable(input.data.new(input.size()), volatile=True)\n+            backend = type2backend[type(input.data)]\n+            backend.Threshold_updateGradInput(\n+                backend.library_state,\n+                input.data,\n+                grad_output.data,\n+                grad_input.data,\n+                ctx.threshold,\n+                ctx.value,\n+                False\n+            )\n+        else:\n+            mask = input > ctx.threshold\n+            grad_input = mask.type_as(grad_output) * grad_output", "path": "torch/nn/_functions/thnn/activation.py", "position": null, "original_position": 57, "commit_id": "988ee5f7fa6623d787146b8002fa5c81eaa59fa2", "original_commit_id": "3bbce337a7f572c7399073e337603cdebc7c5271", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "I think `grad_input = grad_output.masked_fill(input > ctx.threshold, 0)` would be more efficient.", "created_at": "2017-05-08T18:35:50Z", "updated_at": "2018-11-23T15:33:23Z", "html_url": "https://github.com/pytorch/pytorch/pull/1507#discussion_r115320844", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/1507", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/115320844"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/1507#discussion_r115320844"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/1507"}}, "body_html": "<p>I think <code>grad_input = grad_output.masked_fill(input &gt; ctx.threshold, 0)</code> would be more efficient.</p>", "body_text": "I think grad_input = grad_output.masked_fill(input > ctx.threshold, 0) would be more efficient."}