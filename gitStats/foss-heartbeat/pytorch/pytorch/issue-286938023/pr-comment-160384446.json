{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/160384446", "pull_request_review_id": 87489813, "id": 160384446, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MDM4NDQ0Ng==", "diff_hunk": "@@ -104,7 +104,14 @@ Variable & VariableType::checked_cast(const Type & type, const Tensor & t, const\n     runtime_error(\"Expected a Tensor of type %s but found an undefined Tensor for argument #%d '%s'\",\n         type.toString(), pos, name);\n   }\n-  if (&t.type() != &type && &t.type() != &type.toBackend(toSparse(t.type().backend()))) {\n+\n+  // Not all types have a matching sparse type\n+  Type* sparse_type = &type.toScalarType(ScalarType::Undefined);\n+  try {\n+    sparse_type = &type.toBackend(toSparse(t.type().backend()));\n+  } catch (std::runtime_error &e) { }", "path": "tools/autograd/templates/VariableType.cpp", "position": 10, "original_position": 10, "commit_id": "04f707054ae7118114a72a965455dbf808264acd", "original_commit_id": "04f707054ae7118114a72a965455dbf808264acd", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "That seems to be a very hacky way. We should try to come up with something better (perhaps we should have `toBackendOpt` that returns a pointer instead of a reference, and this can be `null`)", "created_at": "2018-01-09T11:42:10Z", "updated_at": "2018-11-23T15:37:58Z", "html_url": "https://github.com/pytorch/pytorch/pull/4548#discussion_r160384446", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4548", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/160384446"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/4548#discussion_r160384446"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4548"}}, "body_html": "<p>That seems to be a very hacky way. We should try to come up with something better (perhaps we should have <code>toBackendOpt</code> that returns a pointer instead of a reference, and this can be <code>null</code>)</p>", "body_text": "That seems to be a very hacky way. We should try to come up with something better (perhaps we should have toBackendOpt that returns a pointer instead of a reference, and this can be null)", "in_reply_to_id": 160382329}