{"url": "https://api.github.com/repos/pytorch/pytorch/issues/5293", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/5293/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/5293/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/5293/events", "html_url": "https://github.com/pytorch/pytorch/pull/5293", "id": 298064203, "node_id": "MDExOlB1bGxSZXF1ZXN0MTY5ODE4MDI4", "number": 5293, "title": "add control flow to interpreter", "user": {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-02-18T07:01:12Z", "updated_at": "2018-11-23T15:39:54Z", "closed_at": "2018-02-23T03:56:16Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/5293", "html_url": "https://github.com/pytorch/pytorch/pull/5293", "diff_url": "https://github.com/pytorch/pytorch/pull/5293.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/5293.patch"}, "body_html": "<p>This PR adds Loop and If to the interpreter.</p>\n<p>Code is organized in two commits, and will be easier to review if you look at each separately:</p>\n<ol>\n<li>change interpreter to a stack machine, to make tensor-lifetime management easier, and to get the interpreter ready to have control flow implementations layered on top.</li>\n<li>add the actual control flow implementation.</li>\n</ol>\n<p>Notes:</p>\n<ul>\n<li>The interpret no longer has <code>Stage</code> objects, and instead is a single list of instructions. Stages begin and end with <code>Store/Load</code> instructions which store elements from the stack into local variables, and then load local variables onto the stack. The interpreter pauses after every Load instruction.</li>\n<li>Operation now returns an offset which updates the program counter and is used by the jump instructions.</li>\n<li>The interpreter now preprocesses the graph to determine where it should release its handles on tensors. This is done as a preprocess rather than directly on the instructions as it was previously done because the control-flow instructions sometimes need to insert new instructions to \"Drop\" registers that are no longer used.</li>\n<li>The interpreter can dump the instructions now for debugging.</li>\n</ul>\n<pre><code>Things not in this commit:\n* Handling trip-count in Loop, since our frontend doesn't generate it yet, it is hard to test\n* Handling passing the `cond` value to the loop. I think this should just be removed from the way we generate loops entirely, since it just complicates the implementation.\n</code></pre>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=4685384\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/jamesr66a\">@jamesr66a</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=4583066\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/apaszke\">@apaszke</a></p>", "body_text": "This PR adds Loop and If to the interpreter.\nCode is organized in two commits, and will be easier to review if you look at each separately:\n\nchange interpreter to a stack machine, to make tensor-lifetime management easier, and to get the interpreter ready to have control flow implementations layered on top.\nadd the actual control flow implementation.\n\nNotes:\n\nThe interpret no longer has Stage objects, and instead is a single list of instructions. Stages begin and end with Store/Load instructions which store elements from the stack into local variables, and then load local variables onto the stack. The interpreter pauses after every Load instruction.\nOperation now returns an offset which updates the program counter and is used by the jump instructions.\nThe interpreter now preprocesses the graph to determine where it should release its handles on tensors. This is done as a preprocess rather than directly on the instructions as it was previously done because the control-flow instructions sometimes need to insert new instructions to \"Drop\" registers that are no longer used.\nThe interpreter can dump the instructions now for debugging.\n\nThings not in this commit:\n* Handling trip-count in Loop, since our frontend doesn't generate it yet, it is hard to test\n* Handling passing the `cond` value to the loop. I think this should just be removed from the way we generate loops entirely, since it just complicates the implementation.\n\n@jamesr66a @apaszke", "body": "This PR adds Loop and If to the interpreter. \r\n\r\nCode is organized in two commits, and will be easier to review if you look at each separately:\r\n1. change interpreter to a stack machine, to make tensor-lifetime management easier, and to get the interpreter ready to have control flow implementations layered on top.\r\n2. add the actual control flow implementation.\r\n\r\n\r\nNotes:\r\n* The interpret no longer has `Stage` objects, and instead is a single list of instructions. Stages begin and end with `Store/Load` instructions which store elements from the stack into local variables, and then load local variables onto the stack. The interpreter pauses after every Load instruction. \r\n* Operation now returns an offset which updates the program counter and is used by the jump instructions.\r\n* The interpreter now preprocesses the graph to determine where it should release its handles on tensors. This is done as a preprocess rather than directly on the instructions as it was previously done because the control-flow instructions sometimes need to insert new instructions to \"Drop\" registers that are no longer used.\r\n* The interpreter can dump the instructions now for debugging.\r\n \r\n\r\n```\r\nThings not in this commit:\r\n* Handling trip-count in Loop, since our frontend doesn't generate it yet, it is hard to test\r\n* Handling passing the `cond` value to the loop. I think this should just be removed from the way we generate loops entirely, since it just complicates the implementation.\r\n```\r\n\r\n@jamesr66a @apaszke "}