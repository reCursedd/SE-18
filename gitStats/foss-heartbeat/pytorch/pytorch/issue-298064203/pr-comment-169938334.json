{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/169938334", "pull_request_review_id": 98515584, "id": 169938334, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2OTkzODMzNA==", "diff_hunk": "@@ -130,39 +399,45 @@ Operation createPythonOperation(PythonOp* op) {\n         addOutput(entry);\n       }\n     }\n-    builder.writeTo(outputs);\n+    builder.writeTo(stack);\n+    return 0;\n   };\n }\n \n Operation createCppOperation(CppOp* op) {\n   std::shared_ptr<autograd::Function> func = op->fn;\n   bool has_handle = hasHandleOutput(op);\n-  return [=](const list_of_retainable & inputs, list_of_retainable & outputs) {\n+  auto num_inputs = op->inputs().size();\n+  return [=](Stack & stack) {\n     HandleBuilder builder(has_handle);\n     autograd::variable_list v_inputs;\n-    for(size_t i = 0; i < inputs.size(); i++) {\n-      v_inputs.push_back(builder.addInput(inputs[i], op->var_flags[i]));\n+    for(size_t i = 0; i < num_inputs; i++) {\n+      v_inputs.push_back(builder.addInput(std::move(fromLast(stack, num_inputs - i)), op->var_flags[i]));\n     }\n+    drop(stack, num_inputs);\n     autograd::variable_list v_outputs = (*func)(v_inputs);\n     for(auto & output : v_outputs) {\n-      outputs.push_back(builder.addOutput(output));\n+      stack.push_back(builder.addOutput(output));\n     }\n-    builder.writeTo(outputs);\n+    builder.writeTo(stack);\n+    return 0;\n   };\n }\n \n Operation createEvalOperation(CppOp * op) {\n   bool has_handle_output = hasHandleOutput(op);\n-  return [=](const list_of_retainable & inputs,\n-             list_of_retainable & outputs) {\n-    AutogradHandle * handle_in = dynamic_cast<AutogradHandle*>(inputs.back());\n+  auto num_inputs = op->inputs().size();\n+  return [=](Stack & stack) {\n+    at::Tensor handle_t = std::move(stack.back());\n+    AutogradHandle * handle_in = dynamic_cast<AutogradHandle*>(handle_t.get());\n     JIT_ASSERT(handle_in);\n     HandleBuilder builder(has_handle_output);\n     auto& engine = autograd::python::PythonEngine::getDefaultEngine();\n     autograd::variable_list v_inputs;\n-    for(size_t i = 0; i < inputs.size() - 1; i++) {\n-      v_inputs.push_back(builder.addInput(inputs[i], op->var_flags[i]));\n+    for(size_t i = 0; i < num_inputs - 1; i++) {\n+      v_inputs.push_back(builder.addInput(std::move(fromLast(stack, num_inputs - i)), op->var_flags[i]));\n     }\n+    drop(stack, num_inputs);", "path": "torch/csrc/jit/interpreter.cpp", "position": 431, "original_position": 409, "commit_id": "f5f7d01b5b3c2859ffdb99316771529d4a624c22", "original_commit_id": "be682ec37e185e4b57c4b125d715d2d9e86485de", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "It would be nice to never have to use `drop` only after we move all tensors out of the stack. Otherwise it might become a bit messed up in case anything throws before we reach this line", "created_at": "2018-02-22T12:17:41Z", "updated_at": "2018-11-23T15:39:50Z", "html_url": "https://github.com/pytorch/pytorch/pull/5293#discussion_r169938334", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/5293", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/169938334"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/5293#discussion_r169938334"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/5293"}}, "body_html": "<p>It would be nice to never have to use <code>drop</code> only after we move all tensors out of the stack. Otherwise it might become a bit messed up in case anything throws before we reach this line</p>", "body_text": "It would be nice to never have to use drop only after we move all tensors out of the stack. Otherwise it might become a bit messed up in case anything throws before we reach this line"}