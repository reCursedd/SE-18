{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/170126442", "pull_request_review_id": 98767405, "id": 170126442, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MDEyNjQ0Mg==", "diff_hunk": "@@ -479,72 +873,52 @@ struct InterpreterStateImpl {\n     bool_data(function->bool_data),\n     registers(function->register_size) {\n   }\n-  void runOneStage(\n-    const std::vector<at::Tensor> & inputs,\n-    std::vector<at::Tensor> & outputs) {\n-      // std::cout << \"running stage: \" << current_stage << \" of \" << function->stages.size() << \"\\n\";\n-      // std::cout << *function->graph << \"\\n\";\n-      JIT_ASSERT(current_stage < function->stages.size());\n-      auto & stage = function->stages[current_stage++];\n-      JIT_ASSERT((int)inputs.size() == stage.inputs.size);\n-      for(int i = 0; i < stage.inputs.size; i++) {\n-        int reg = get(stage.inputs,i);\n-        if(reg >= 0) { // otherwise this input is dead, and we do not store it to avoid holding the reference\n-          registers.takeOwnership(reg, toRetainableShare(inputs[i]));\n-        }\n-        // std::cout << \"registers[\" << reg << \"] = inputs[\" << i << \"](\" << registers[reg] << \")\\n\";\n-      }\n-      for(auto & inst : stage.instructions) {\n-        auto & inputs = inst.inputs.values;\n-        for(int i = 0; i < inputs.size; i++) {\n-          int reg = get(inputs,i);\n-          input_buffer.push_back(registers[reg]);\n-          // std::cout << \"inputs[\" << i << \"] = registers[\" << reg << \"](\" << registers[reg] << \")\\n\";\n-        }\n-        inst.callback(input_buffer, output_buffer);\n-        for(int i = 0; i < inst.outputs.size; i++) {\n+  void runOneStage(Stack & stack) {\n+    // std::cout << \"running stage: \" << current_stage << \" of \" << function->stage_end.size() << \"\\n\";\n+    // std::cout << *function->graph << \"\\n\";\n+    // function->dump(std::cout);\n+    size_t pc = current_pc;\n+    size_t last = function->stage_end[current_stage];\n+    auto & instructions = function->instructions;\n+    while(pc < last) {\n+        // std::cout << \"executing \" << pc << \": \";\n+        // function->dumpInstruction(std::cout, pc);\n+        // std::cout << \"\\n\";\n+        auto & inst = instructions[pc];\n+        loadTensorsFromRegisters(inst.inputs, stack);\n+        pc += 1 + inst.callback(stack);\n+        for(int i = inst.outputs.size - 1; i >= 0; i--) {\n           int reg = get(inst.outputs,i);\n-          registers.takeOwnership(reg, std::move(output_buffer[i]));\n-          // std::cout << \"registers[\" << reg << \"] = outputs[\" << i << \"](\" << registers[reg] << \")\\n\";\n-        }\n-        auto & frees = inst.inputs.free_flags;\n-        for(int i = 0; i < frees.size; i++) {\n-          if(get(frees,i)) {\n-            registers.reset(get(inputs,i));\n-          }\n+          registers[reg] = pop(stack);\n+          // std::cout << \"pop reg[\" << reg << \"];\\n\" << registers[reg].pImpl << \"\\n\";\n         }\n-        output_buffer.clear();\n-        input_buffer.clear();\n-      }\n-      outputs.clear();\n-      loadTensorsFromRegisters(stage.outputs, outputs);\n+    }\n+    current_pc = pc;", "path": "torch/csrc/jit/interpreter.cpp", "position": 1040, "original_position": 1023, "commit_id": "f5f7d01b5b3c2859ffdb99316771529d4a624c22", "original_commit_id": "be682ec37e185e4b57c4b125d715d2d9e86485de", "user": {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, "body": "I am worried about alias analysis not realizing `current_pc` can stay in a register because it is a member of a struct and we are calling indirect functions. Writing it this way proves to C++ that `pc` can be in a register.  ", "created_at": "2018-02-22T23:29:38Z", "updated_at": "2018-11-23T15:39:54Z", "html_url": "https://github.com/pytorch/pytorch/pull/5293#discussion_r170126442", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/5293", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/170126442"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/5293#discussion_r170126442"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/5293"}}, "body_html": "<p>I am worried about alias analysis not realizing <code>current_pc</code> can stay in a register because it is a member of a struct and we are calling indirect functions. Writing it this way proves to C++ that <code>pc</code> can be in a register.</p>", "body_text": "I am worried about alias analysis not realizing current_pc can stay in a register because it is a member of a struct and we are calling indirect functions. Writing it this way proves to C++ that pc can be in a register.", "in_reply_to_id": 169945260}