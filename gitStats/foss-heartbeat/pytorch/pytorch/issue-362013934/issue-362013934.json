{"url": "https://api.github.com/repos/pytorch/pytorch/issues/11884", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/11884/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/11884/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/11884/events", "html_url": "https://github.com/pytorch/pytorch/pull/11884", "id": 362013934, "node_id": "MDExOlB1bGxSZXF1ZXN0MjE2ODQxMzA4", "number": 11884, "title": "optimization on cpu conv3d", "user": {"login": "jspark1105", "id": 5545022, "node_id": "MDQ6VXNlcjU1NDUwMjI=", "avatar_url": "https://avatars2.githubusercontent.com/u/5545022?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jspark1105", "html_url": "https://github.com/jspark1105", "followers_url": "https://api.github.com/users/jspark1105/followers", "following_url": "https://api.github.com/users/jspark1105/following{/other_user}", "gists_url": "https://api.github.com/users/jspark1105/gists{/gist_id}", "starred_url": "https://api.github.com/users/jspark1105/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jspark1105/subscriptions", "organizations_url": "https://api.github.com/users/jspark1105/orgs", "repos_url": "https://api.github.com/users/jspark1105/repos", "events_url": "https://api.github.com/users/jspark1105/events{/privacy}", "received_events_url": "https://api.github.com/users/jspark1105/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 890282107, "node_id": "MDU6TGFiZWw4OTAyODIxMDc=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/caffe2", "name": "caffe2", "color": "210aa8", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-09-20T04:25:30Z", "updated_at": "2018-11-01T22:14:50Z", "closed_at": "2018-11-01T22:14:50Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/11884", "html_url": "https://github.com/pytorch/pytorch/pull/11884", "diff_url": "https://github.com/pytorch/pytorch/pull/11884.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/11884.patch"}, "body_html": "<p>Summary:<br>\nIn cpu mode, current convNd uses Im2ColNdNCHWImpl, which is generic implementation to handle convolutional layer for arbitrary number of dimensions. In video modeling, we use convNd for filter dimension=3.</p>\n<p>The problem of current convNd is that Im2ColNdNCHWImpl is much slower than Im2Col used by conv2d for the filters with same Flops. For example, a (1, 7, 7) 3d filter takes 5 times longer than a (7, 7) 2d filter at inference time.</p>\n<p>This diff extends Im2Col to 3d case (Im2Col3dNCHWImpl), and this optimization for 3d convolution gives 4~5 times faster inference time on cpu for various video models:</p>\n<p>{F128300920}</p>\n<p>Differential Revision: D8245940</p>", "body_text": "Summary:\nIn cpu mode, current convNd uses Im2ColNdNCHWImpl, which is generic implementation to handle convolutional layer for arbitrary number of dimensions. In video modeling, we use convNd for filter dimension=3.\nThe problem of current convNd is that Im2ColNdNCHWImpl is much slower than Im2Col used by conv2d for the filters with same Flops. For example, a (1, 7, 7) 3d filter takes 5 times longer than a (7, 7) 2d filter at inference time.\nThis diff extends Im2Col to 3d case (Im2Col3dNCHWImpl), and this optimization for 3d convolution gives 4~5 times faster inference time on cpu for various video models:\n{F128300920}\nDifferential Revision: D8245940", "body": "Summary:\nIn cpu mode, current convNd uses Im2ColNdNCHWImpl, which is generic implementation to handle convolutional layer for arbitrary number of dimensions. In video modeling, we use convNd for filter dimension=3.\n\nThe problem of current convNd is that Im2ColNdNCHWImpl is much slower than Im2Col used by conv2d for the filters with same Flops. For example, a (1, 7, 7) 3d filter takes 5 times longer than a (7, 7) 2d filter at inference time.\n\nThis diff extends Im2Col to 3d case (Im2Col3dNCHWImpl), and this optimization for 3d convolution gives 4~5 times faster inference time on cpu for various video models:\n\n{F128300920}\n\nDifferential Revision: D8245940\n"}