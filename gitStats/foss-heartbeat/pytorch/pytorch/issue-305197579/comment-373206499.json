{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/373206499", "html_url": "https://github.com/pytorch/pytorch/pull/5776#issuecomment-373206499", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/5776", "id": 373206499, "node_id": "MDEyOklzc3VlQ29tbWVudDM3MzIwNjQ5OQ==", "user": {"login": "cpuhrsch", "id": 1716488, "node_id": "MDQ6VXNlcjE3MTY0ODg=", "avatar_url": "https://avatars1.githubusercontent.com/u/1716488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cpuhrsch", "html_url": "https://github.com/cpuhrsch", "followers_url": "https://api.github.com/users/cpuhrsch/followers", "following_url": "https://api.github.com/users/cpuhrsch/following{/other_user}", "gists_url": "https://api.github.com/users/cpuhrsch/gists{/gist_id}", "starred_url": "https://api.github.com/users/cpuhrsch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cpuhrsch/subscriptions", "organizations_url": "https://api.github.com/users/cpuhrsch/orgs", "repos_url": "https://api.github.com/users/cpuhrsch/repos", "events_url": "https://api.github.com/users/cpuhrsch/events{/privacy}", "received_events_url": "https://api.github.com/users/cpuhrsch/received_events", "type": "User", "site_admin": false}, "created_at": "2018-03-14T23:17:02Z", "updated_at": "2018-03-14T23:35:28Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Ok, It looks like all builds and tests pass, except for Windows. And Windows keeps on failing with</p>\n<pre><code>22:38:09 Folders: 86\n22:38:09 Files: 1049\n22:38:09 Size:       334909577\n22:38:09 Compressed: 28359267\n22:38:09 \n22:38:09 (base) C:\\Jenkins\\workspace\\pytorch-builds\\pytorch-win-ws2016-cuda9-cudnn7-py3-test\\test&gt;python run_test.py --verbose   &amp;&amp; python ..\\ci_scripts\\delete_image.py \n22:38:20 Traceback (most recent call last):\n22:38:20   File \"test_autograd.py\", line 2633, in &lt;module&gt;\n22:38:20     ('masked_select', (M, M), (mask_not_all_zeros((M, M)),)),\n22:38:20   File \"test_autograd.py\", line 2082, in mask_not_all_zeros\n22:38:20     if result.sum() &gt; 0:\n22:38:20 RuntimeError: Function not yet implemented for AVX2\n22:38:20 Excluding cpp_extensions on Windows\n22:38:20 Excluding distributed on Windows\n22:38:20 Selected tests: autograd, cuda, dataloader, distributions, indexing, jit, legacy_nn, multiprocessing, nccl, nn, optim, sparse, torch, utils\n22:38:20 Running test_autograd.py ...\n22:38:20 Traceback (most recent call last):\n22:38:20   File \"run_test.py\", line 238, in &lt;module&gt;\n22:38:20     main()\n22:38:20   File \"run_test.py\", line 230, in main\n22:38:20     raise RuntimeError('{} failed!'.format(test_module))\n22:38:20 RuntimeError: test_autograd.py failed!\n22:38:20 + cleanup\n22:38:20 + retcode=1\n22:38:20 + set +x\n</code></pre>\n<p>So, at this point, I'm relatively confident that the problem is with MSVC, specifically it not compiling the various copies directly. I'm setting up Windows on a remote machine to step into this and am also trying different compile flags. If one of you sees a mistake with the MSVC specific flags, please let me know.</p>\n<p>The relevant section of the cmake file aten/src/ATen/CMakeLists.txt  should be</p>\n<pre><code>FILE(GLOB cpu_kernel_cpp_in RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} \"native/cpu/*.cpp\")\n\nlist(APPEND CPU_CAPABILITY_NAMES \"DEFAULT\" \"AVX\" \"AVX2\")\nIF(MSVC)\n  LIST(APPEND CPU_CAPABILITY_FLAGS \"${MSVC_OPT_FLAG}\" \"${MSVC_OPT_FLAG}/arch:AVX\" \"${MSVC_OPT_FLAG}/arch:AVX2\")\nELSE(MSVC)\n  LIST(APPEND CPU_CAPABILITY_FLAGS \"-O3\" \"-O3 -mavx\" \"-O3 -mavx2\")\nENDIF(MSVC)\n\nlist(LENGTH CPU_CAPABILITY_NAMES NUM_CPU_CAPABILITY_NAMES)\nmath(EXPR NUM_CPU_CAPABILITY_NAMES \"${NUM_CPU_CAPABILITY_NAMES}-1\")\n\nFOREACH(i RANGE ${NUM_CPU_CAPABILITY_NAMES})\n  FOREACH(IMPL ${cpu_kernel_cpp_in})\n    LIST(GET CPU_CAPABILITY_NAMES ${i} CPU_CAPABILITY)\n    SET(NEW_IMPL ${CMAKE_CURRENT_BINARY_DIR}/${IMPL}.${CPU_CAPABILITY}.cpp)\n    CONFIGURE_FILE(${IMPL} ${NEW_IMPL} COPYONLY)\n    SET(cpu_kernel_cpp ${NEW_IMPL} ${cpu_kernel_cpp}) # Create list of copies\n    LIST(GET CPU_CAPABILITY_FLAGS ${i} FLAGS)\n    IF(MSVC)\n      SET(MACRO_FLAG \"/DCPUCAPABILITY${CPU_CAPABILITY}\")\n    ELSE(MSVC)\n      SET(MACRO_FLAG \"-DCPUCAPABILITY${CPU_CAPABILITY}\")\n    ENDIF(MSVC)\n    SET_SOURCE_FILES_PROPERTIES(${NEW_IMPL} PROPERTIES COMPILE_FLAGS \"${FLAGS} ${MACRO_FLAG}\")\n  ENDFOREACH()\nENDFOREACH()\n</code></pre>", "body_text": "Ok, It looks like all builds and tests pass, except for Windows. And Windows keeps on failing with\n22:38:09 Folders: 86\n22:38:09 Files: 1049\n22:38:09 Size:       334909577\n22:38:09 Compressed: 28359267\n22:38:09 \n22:38:09 (base) C:\\Jenkins\\workspace\\pytorch-builds\\pytorch-win-ws2016-cuda9-cudnn7-py3-test\\test>python run_test.py --verbose   && python ..\\ci_scripts\\delete_image.py \n22:38:20 Traceback (most recent call last):\n22:38:20   File \"test_autograd.py\", line 2633, in <module>\n22:38:20     ('masked_select', (M, M), (mask_not_all_zeros((M, M)),)),\n22:38:20   File \"test_autograd.py\", line 2082, in mask_not_all_zeros\n22:38:20     if result.sum() > 0:\n22:38:20 RuntimeError: Function not yet implemented for AVX2\n22:38:20 Excluding cpp_extensions on Windows\n22:38:20 Excluding distributed on Windows\n22:38:20 Selected tests: autograd, cuda, dataloader, distributions, indexing, jit, legacy_nn, multiprocessing, nccl, nn, optim, sparse, torch, utils\n22:38:20 Running test_autograd.py ...\n22:38:20 Traceback (most recent call last):\n22:38:20   File \"run_test.py\", line 238, in <module>\n22:38:20     main()\n22:38:20   File \"run_test.py\", line 230, in main\n22:38:20     raise RuntimeError('{} failed!'.format(test_module))\n22:38:20 RuntimeError: test_autograd.py failed!\n22:38:20 + cleanup\n22:38:20 + retcode=1\n22:38:20 + set +x\n\nSo, at this point, I'm relatively confident that the problem is with MSVC, specifically it not compiling the various copies directly. I'm setting up Windows on a remote machine to step into this and am also trying different compile flags. If one of you sees a mistake with the MSVC specific flags, please let me know.\nThe relevant section of the cmake file aten/src/ATen/CMakeLists.txt  should be\nFILE(GLOB cpu_kernel_cpp_in RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} \"native/cpu/*.cpp\")\n\nlist(APPEND CPU_CAPABILITY_NAMES \"DEFAULT\" \"AVX\" \"AVX2\")\nIF(MSVC)\n  LIST(APPEND CPU_CAPABILITY_FLAGS \"${MSVC_OPT_FLAG}\" \"${MSVC_OPT_FLAG}/arch:AVX\" \"${MSVC_OPT_FLAG}/arch:AVX2\")\nELSE(MSVC)\n  LIST(APPEND CPU_CAPABILITY_FLAGS \"-O3\" \"-O3 -mavx\" \"-O3 -mavx2\")\nENDIF(MSVC)\n\nlist(LENGTH CPU_CAPABILITY_NAMES NUM_CPU_CAPABILITY_NAMES)\nmath(EXPR NUM_CPU_CAPABILITY_NAMES \"${NUM_CPU_CAPABILITY_NAMES}-1\")\n\nFOREACH(i RANGE ${NUM_CPU_CAPABILITY_NAMES})\n  FOREACH(IMPL ${cpu_kernel_cpp_in})\n    LIST(GET CPU_CAPABILITY_NAMES ${i} CPU_CAPABILITY)\n    SET(NEW_IMPL ${CMAKE_CURRENT_BINARY_DIR}/${IMPL}.${CPU_CAPABILITY}.cpp)\n    CONFIGURE_FILE(${IMPL} ${NEW_IMPL} COPYONLY)\n    SET(cpu_kernel_cpp ${NEW_IMPL} ${cpu_kernel_cpp}) # Create list of copies\n    LIST(GET CPU_CAPABILITY_FLAGS ${i} FLAGS)\n    IF(MSVC)\n      SET(MACRO_FLAG \"/DCPUCAPABILITY${CPU_CAPABILITY}\")\n    ELSE(MSVC)\n      SET(MACRO_FLAG \"-DCPUCAPABILITY${CPU_CAPABILITY}\")\n    ENDIF(MSVC)\n    SET_SOURCE_FILES_PROPERTIES(${NEW_IMPL} PROPERTIES COMPILE_FLAGS \"${FLAGS} ${MACRO_FLAG}\")\n  ENDFOREACH()\nENDFOREACH()", "body": "Ok, It looks like all builds and tests pass, except for Windows. And Windows keeps on failing with\r\n\r\n```\r\n22:38:09 Folders: 86\r\n22:38:09 Files: 1049\r\n22:38:09 Size:       334909577\r\n22:38:09 Compressed: 28359267\r\n22:38:09 \r\n22:38:09 (base) C:\\Jenkins\\workspace\\pytorch-builds\\pytorch-win-ws2016-cuda9-cudnn7-py3-test\\test>python run_test.py --verbose   && python ..\\ci_scripts\\delete_image.py \r\n22:38:20 Traceback (most recent call last):\r\n22:38:20   File \"test_autograd.py\", line 2633, in <module>\r\n22:38:20     ('masked_select', (M, M), (mask_not_all_zeros((M, M)),)),\r\n22:38:20   File \"test_autograd.py\", line 2082, in mask_not_all_zeros\r\n22:38:20     if result.sum() > 0:\r\n22:38:20 RuntimeError: Function not yet implemented for AVX2\r\n22:38:20 Excluding cpp_extensions on Windows\r\n22:38:20 Excluding distributed on Windows\r\n22:38:20 Selected tests: autograd, cuda, dataloader, distributions, indexing, jit, legacy_nn, multiprocessing, nccl, nn, optim, sparse, torch, utils\r\n22:38:20 Running test_autograd.py ...\r\n22:38:20 Traceback (most recent call last):\r\n22:38:20   File \"run_test.py\", line 238, in <module>\r\n22:38:20     main()\r\n22:38:20   File \"run_test.py\", line 230, in main\r\n22:38:20     raise RuntimeError('{} failed!'.format(test_module))\r\n22:38:20 RuntimeError: test_autograd.py failed!\r\n22:38:20 + cleanup\r\n22:38:20 + retcode=1\r\n22:38:20 + set +x\r\n```\r\n\r\nSo, at this point, I'm relatively confident that the problem is with MSVC, specifically it not compiling the various copies directly. I'm setting up Windows on a remote machine to step into this and am also trying different compile flags. If one of you sees a mistake with the MSVC specific flags, please let me know.\r\n\r\nThe relevant section of the cmake file aten/src/ATen/CMakeLists.txt  should be\r\n\r\n```\r\nFILE(GLOB cpu_kernel_cpp_in RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} \"native/cpu/*.cpp\")\r\n\r\nlist(APPEND CPU_CAPABILITY_NAMES \"DEFAULT\" \"AVX\" \"AVX2\")\r\nIF(MSVC)\r\n  LIST(APPEND CPU_CAPABILITY_FLAGS \"${MSVC_OPT_FLAG}\" \"${MSVC_OPT_FLAG}/arch:AVX\" \"${MSVC_OPT_FLAG}/arch:AVX2\")\r\nELSE(MSVC)\r\n  LIST(APPEND CPU_CAPABILITY_FLAGS \"-O3\" \"-O3 -mavx\" \"-O3 -mavx2\")\r\nENDIF(MSVC)\r\n\r\nlist(LENGTH CPU_CAPABILITY_NAMES NUM_CPU_CAPABILITY_NAMES)\r\nmath(EXPR NUM_CPU_CAPABILITY_NAMES \"${NUM_CPU_CAPABILITY_NAMES}-1\")\r\n\r\nFOREACH(i RANGE ${NUM_CPU_CAPABILITY_NAMES})\r\n  FOREACH(IMPL ${cpu_kernel_cpp_in})\r\n    LIST(GET CPU_CAPABILITY_NAMES ${i} CPU_CAPABILITY)\r\n    SET(NEW_IMPL ${CMAKE_CURRENT_BINARY_DIR}/${IMPL}.${CPU_CAPABILITY}.cpp)\r\n    CONFIGURE_FILE(${IMPL} ${NEW_IMPL} COPYONLY)\r\n    SET(cpu_kernel_cpp ${NEW_IMPL} ${cpu_kernel_cpp}) # Create list of copies\r\n    LIST(GET CPU_CAPABILITY_FLAGS ${i} FLAGS)\r\n    IF(MSVC)\r\n      SET(MACRO_FLAG \"/DCPUCAPABILITY${CPU_CAPABILITY}\")\r\n    ELSE(MSVC)\r\n      SET(MACRO_FLAG \"-DCPUCAPABILITY${CPU_CAPABILITY}\")\r\n    ENDIF(MSVC)\r\n    SET_SOURCE_FILES_PROPERTIES(${NEW_IMPL} PROPERTIES COMPILE_FLAGS \"${FLAGS} ${MACRO_FLAG}\")\r\n  ENDFOREACH()\r\nENDFOREACH()\r\n```"}