{"url": "https://api.github.com/repos/pytorch/pytorch/issues/2384", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/2384/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/2384/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/2384/events", "html_url": "https://github.com/pytorch/pytorch/issues/2384", "id": 249542785, "node_id": "MDU6SXNzdWUyNDk1NDI3ODU=", "number": 2384, "title": "How the grad is transferred between layer", "user": {"login": "ShawnXuan", "id": 16327185, "node_id": "MDQ6VXNlcjE2MzI3MTg1", "avatar_url": "https://avatars1.githubusercontent.com/u/16327185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ShawnXuan", "html_url": "https://github.com/ShawnXuan", "followers_url": "https://api.github.com/users/ShawnXuan/followers", "following_url": "https://api.github.com/users/ShawnXuan/following{/other_user}", "gists_url": "https://api.github.com/users/ShawnXuan/gists{/gist_id}", "starred_url": "https://api.github.com/users/ShawnXuan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ShawnXuan/subscriptions", "organizations_url": "https://api.github.com/users/ShawnXuan/orgs", "repos_url": "https://api.github.com/users/ShawnXuan/repos", "events_url": "https://api.github.com/users/ShawnXuan/events{/privacy}", "received_events_url": "https://api.github.com/users/ShawnXuan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-08-11T05:35:28Z", "updated_at": "2017-08-11T07:07:54Z", "closed_at": "2017-08-11T07:07:54Z", "author_association": "NONE", "body_html": "<p>consider a simple example here:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> torch\n<span class=\"pl-k\">from</span> torch.autograd <span class=\"pl-k\">import</span> Variable\n\n<span class=\"pl-c1\">input</span> <span class=\"pl-k\">=</span> Variable(torch.randn(<span class=\"pl-c1\">20</span>, <span class=\"pl-c1\">3</span>, <span class=\"pl-c1\">28</span>, <span class=\"pl-c1\">28</span>), <span class=\"pl-v\">requires_grad</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>)\nm <span class=\"pl-k\">=</span> torch.nn.Conv2d(<span class=\"pl-c1\">3</span>, <span class=\"pl-c1\">16</span>, <span class=\"pl-c1\">5</span>)\noutput <span class=\"pl-k\">=</span> m(<span class=\"pl-c1\">input</span>)\n\nloss <span class=\"pl-k\">=</span> torch.sum(output)<span class=\"pl-c\"><span class=\"pl-c\">#</span> define loss to perform backprop</span>\nm.zero_grad()\nloss.backward()\n\n<span class=\"pl-c1\">print</span>(<span class=\"pl-c1\">type</span>(<span class=\"pl-c1\">input</span>))\n<span class=\"pl-c1\">print</span>(<span class=\"pl-c1\">input</span>.grad.size())\n<span class=\"pl-c1\">print</span>(<span class=\"pl-c1\">type</span>(output))\n<span class=\"pl-c1\">print</span>(output.grad)</pre></div>\n<p>the output is:</p>\n<pre><code>&lt;class 'torch.autograd.variable.Variable'&gt;\ntorch.Size([20, 3, 28, 28])\n&lt;class 'torch.autograd.variable.Variable'&gt;\nNone\n</code></pre>\n<p>I find the <code>output.grad</code> is <code>None</code>. I don't know how the <code>input.grad</code> is calculated without <code>output.grad</code>.<br>\nand want to know how to get the values of <code>output.grad</code>.</p>\n<p>thanks!</p>", "body_text": "consider a simple example here:\nimport torch\nfrom torch.autograd import Variable\n\ninput = Variable(torch.randn(20, 3, 28, 28), requires_grad=True)\nm = torch.nn.Conv2d(3, 16, 5)\noutput = m(input)\n\nloss = torch.sum(output)# define loss to perform backprop\nm.zero_grad()\nloss.backward()\n\nprint(type(input))\nprint(input.grad.size())\nprint(type(output))\nprint(output.grad)\nthe output is:\n<class 'torch.autograd.variable.Variable'>\ntorch.Size([20, 3, 28, 28])\n<class 'torch.autograd.variable.Variable'>\nNone\n\nI find the output.grad is None. I don't know how the input.grad is calculated without output.grad.\nand want to know how to get the values of output.grad.\nthanks!", "body": "consider a simple example here:\r\n```python\r\nimport torch\r\nfrom torch.autograd import Variable\r\n\r\ninput = Variable(torch.randn(20, 3, 28, 28), requires_grad=True)\r\nm = torch.nn.Conv2d(3, 16, 5)\r\noutput = m(input)\r\n\r\nloss = torch.sum(output)# define loss to perform backprop\r\nm.zero_grad()\r\nloss.backward()\r\n\r\nprint(type(input))\r\nprint(input.grad.size())\r\nprint(type(output))\r\nprint(output.grad)\r\n```\r\nthe output is:\r\n```\r\n<class 'torch.autograd.variable.Variable'>\r\ntorch.Size([20, 3, 28, 28])\r\n<class 'torch.autograd.variable.Variable'>\r\nNone\r\n```\r\nI find the `output.grad` is `None`. I don't know how the `input.grad` is calculated without `output.grad`.\r\nand want to know how to get the values of `output.grad`.\r\n\r\nthanks!"}