{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/206398947", "pull_request_review_id": 141805196, "id": 206398947, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjM5ODk0Nw==", "diff_hunk": "@@ -0,0 +1,141 @@\n+#pragma once\n+\n+#include <torch/csrc/jit/function_schema.h>\n+#include <torch/csrc/jit/ir.h>\n+#include <torch/csrc/jit/operator.h>\n+#include <torch/csrc/jit/stack.h>\n+#include <torch/csrc/utils/variadic.h>\n+\n+#include <caffe2/utils/Metaprogramming.h>\n+#include <caffe2/utils/TypeList.h>\n+\n+namespace torch { namespace jit {\n+namespace detail {\n+template <typename... Ts, size_t... Is>\n+std::vector<Argument> createArgumentVectorFromTypes(Indices<Is...> indices) {\n+  // Arguments are named \"_<index>\"\n+  return {Argument(\"_\" + std::to_string(Is), getTypePtr<Ts>())...};\n+}\n+\n+template <typename... Ts, size_t... Is>\n+std::vector<Argument> createReturns(Indices<Is...> indices) {\n+  return createArgumentVectorFromTypes<Ts..., Is...>();\n+}\n+\n+/// Unpack a tuple return type into a vector of return types, one per tuple\n+/// element.\n+template <typename... Ts>\n+std::vector<Argument> createReturns(std::tuple<Ts...>* tuple) {\n+  // Create an index pack so we can call `get<Indices>` on the tuple next.\n+  return createReturns<Ts...>(typename MakeIndices<sizeof...(Ts)>::indices{});\n+}\n+\n+/// Create a single-element `vector` for simple (non-tuple) return types.\n+template <typename ReturnType>\n+std::vector<Argument> createReturns(ReturnType*) {\n+  return {Argument(\"_1\", getTypePtr<ReturnType>())};\n+}\n+\n+/// Creates a vector of `Argument` from `FunctionTraits` and a pack of indices\n+/// into the argument list.\n+template <typename FunctionTraits, size_t... Is>\n+std::vector<Argument> createArgumentVectorFromTraits(Indices<Is...> indices) {\n+  using ArgumentTypes = typename FunctionTraits::parameter_types;\n+  return createArgumentVectorFromTypes<\n+      c10::guts::typelist::element_t<Is, ArgumentTypes>...>(indices);\n+}\n+\n+/// Creates a `FunctionSchema` object from a `FunctionTraits` type for a\n+/// function.\n+template <typename FunctionTraits>\n+FunctionSchema createFunctionSchemaFromTraits(const std::string& name) {\n+  using ReturnType = typename FunctionTraits::return_type;\n+  auto arguments = createArgumentVectorFromTraits<FunctionTraits>(\n+      typename MakeIndices<FunctionTraits::number_of_parameters>::indices{});\n+  auto returns = createReturns(static_cast<ReturnType*>(nullptr));\n+  return {name, arguments, returns};\n+}\n+\n+/// Does two things for an operator implementation and a tuple of arguments:\n+/// 1. Pops all necessary arguments off the stack into the tuple's elements,\n+/// 2. Unpacks the tuple and calls the operator implementation.\n+/// The result of the implementation call is returned.\n+template <\n+    typename ReturnType,\n+    typename Implementation,\n+    typename... Types,\n+    size_t... Is>\n+ReturnType callOperatorWithTuple(\n+    Implementation&& implementation,\n+    Stack& stack,\n+    std::tuple<Types...>& tuple,\n+    Indices<Is...>) {\n+  pop(stack, std::get<Is>(tuple)...);\n+  return std::forward<Implementation>(implementation)(std::get<Is>(tuple)...);\n+}\n+} // namespace detail\n+\n+/// Low-level interface to register an operator with a parsed `FunctionSchema`\n+/// and a stack-based operator implementation (the `operation`). The `operation`\n+/// must pop its arguments from the stack, perform some operation on those\n+/// arguments, and then push the return value back onto the stack.\n+inline void registerOperatorWithStack(\n+    FunctionSchema schema,\n+    Operation operation) {\n+  registerOperator({schema, [operation](Node*) { return operation; }});\n+}\n+\n+/// Registers a custom operator with a schema and an implementation function.\n+/// The implementation function can be a function pointer or a functor\n+/// (including a lambda object). The function (or `operator()`) can take any\n+/// number of arguments with a type from the subset accepted by the PyTorch\n+/// JIT/Script backend, and return a single type or a tuple of types.\n+/// Example invocation:\n+/// ```\n+/// registerOperator(\n+///    parseSchema(\"foo::bar(float a, Tensor b)\"),\n+///    [](float a, at::Tensor b) { return a + b; });\n+/// ```\n+template <typename Implementation>\n+void registerOperator(FunctionSchema schema, Implementation&& implementation) {", "path": "torch/csrc/jit/custom_operator.h", "position": null, "original_position": 100, "commit_id": "0f99f499f0d40e72445c4ac45bebe436638e3f79", "original_commit_id": "009c4eae58481c11b40344186f4bcb8a565cc30d", "user": {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, "body": "It would be nice if these functions just returned Operator so that they can be used with the `RegisterOperators` class. Easy change.", "created_at": "2018-07-31T05:33:02Z", "updated_at": "2018-11-23T15:48:25Z", "html_url": "https://github.com/pytorch/pytorch/pull/10048#discussion_r206398947", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/10048", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/206398947"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/10048#discussion_r206398947"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/10048"}}, "body_html": "<p>It would be nice if these functions just returned Operator so that they can be used with the <code>RegisterOperators</code> class. Easy change.</p>", "body_text": "It would be nice if these functions just returned Operator so that they can be used with the RegisterOperators class. Easy change."}