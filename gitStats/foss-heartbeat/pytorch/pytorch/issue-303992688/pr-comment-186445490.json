{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/186445490", "pull_request_review_id": 118023638, "id": 186445490, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NjQ0NTQ5MA==", "diff_hunk": "@@ -23,10 +23,19 @@ static PyObject * THPSize_pynew(PyTypeObject *type, PyObject *args, PyObject *kw\n   if (self) {\n     for (Py_ssize_t i = 0; i < PyTuple_Size(self); ++i) {\n       PyObject *item = PyTuple_GET_ITEM(self.get(), i);\n-      if (!THPUtils_checkLong(item)) {\n-        return PyErr_Format(PyExc_TypeError, \"torch.Size() takes an iterable of 'int' (item %zd is '%s')\",\n-            i, Py_TYPE(item)->tp_name);\n+      if (THPUtils_checkLong(item)) {\n+        continue;\n       }\n+      // item.__index__() works with 0-dim tensors and tensors with one element\n+      THPObjectPtr number(PyNumber_Index(item));\n+      if (number && THPUtils_checkLong(number.get())) {", "path": "torch/csrc/Size.cpp", "position": null, "original_position": 12, "commit_id": "eaff4eb19540b2bfac3ff79299eb17f5ee23d9ad", "original_commit_id": "56091be80bf967537bbfc500a7e054554c1c7472", "user": {"login": "zou3519", "id": 5652049, "node_id": "MDQ6VXNlcjU2NTIwNDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/5652049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zou3519", "html_url": "https://github.com/zou3519", "followers_url": "https://api.github.com/users/zou3519/followers", "following_url": "https://api.github.com/users/zou3519/following{/other_user}", "gists_url": "https://api.github.com/users/zou3519/gists{/gist_id}", "starred_url": "https://api.github.com/users/zou3519/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zou3519/subscriptions", "organizations_url": "https://api.github.com/users/zou3519/orgs", "repos_url": "https://api.github.com/users/zou3519/repos", "events_url": "https://api.github.com/users/zou3519/events{/privacy}", "received_events_url": "https://api.github.com/users/zou3519/received_events", "type": "User", "site_admin": false}, "body": "unpackIndex returns an int64_t. Here I wanted to return a \"python int\". The logic is that I'm replacing the elements (including any scalar tensors) of the tuple that the user has passed to torch.Size with \"python ints\".", "created_at": "2018-05-07T14:45:15Z", "updated_at": "2018-11-23T15:43:39Z", "html_url": "https://github.com/pytorch/pytorch/pull/5676#discussion_r186445490", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/5676", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/186445490"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/5676#discussion_r186445490"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/5676"}}, "body_html": "<p>unpackIndex returns an int64_t. Here I wanted to return a \"python int\". The logic is that I'm replacing the elements (including any scalar tensors) of the tuple that the user has passed to torch.Size with \"python ints\".</p>", "body_text": "unpackIndex returns an int64_t. Here I wanted to return a \"python int\". The logic is that I'm replacing the elements (including any scalar tensors) of the tuple that the user has passed to torch.Size with \"python ints\".", "in_reply_to_id": 185389356}