{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/372356101", "html_url": "https://github.com/pytorch/pytorch/pull/5676#issuecomment-372356101", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/5676", "id": 372356101, "node_id": "MDEyOklzc3VlQ29tbWVudDM3MjM1NjEwMQ==", "user": {"login": "gchanan", "id": 3768583, "node_id": "MDQ6VXNlcjM3Njg1ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3768583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gchanan", "html_url": "https://github.com/gchanan", "followers_url": "https://api.github.com/users/gchanan/followers", "following_url": "https://api.github.com/users/gchanan/following{/other_user}", "gists_url": "https://api.github.com/users/gchanan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gchanan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gchanan/subscriptions", "organizations_url": "https://api.github.com/users/gchanan/orgs", "repos_url": "https://api.github.com/users/gchanan/repos", "events_url": "https://api.github.com/users/gchanan/events{/privacy}", "received_events_url": "https://api.github.com/users/gchanan/received_events", "type": "User", "site_admin": false}, "created_at": "2018-03-12T15:43:18Z", "updated_at": "2018-03-12T15:43:18Z", "author_association": "CONTRIBUTOR", "body_html": "<p>No, don't change the internal representation.  What I meant is if we were to write this API today, we'd probably use the python arg parser and one of the overloads would be to take an IntList.  And it seems reasonable for an IntList to contain mixtures of python longs and pytorch integral types (just as it seems reasonable for python longs and pytorch integral types to map to an int64_t.</p>", "body_text": "No, don't change the internal representation.  What I meant is if we were to write this API today, we'd probably use the python arg parser and one of the overloads would be to take an IntList.  And it seems reasonable for an IntList to contain mixtures of python longs and pytorch integral types (just as it seems reasonable for python longs and pytorch integral types to map to an int64_t.", "body": "No, don't change the internal representation.  What I meant is if we were to write this API today, we'd probably use the python arg parser and one of the overloads would be to take an IntList.  And it seems reasonable for an IntList to contain mixtures of python longs and pytorch integral types (just as it seems reasonable for python longs and pytorch integral types to map to an int64_t."}