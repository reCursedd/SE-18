{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/229156512", "pull_request_review_id": 169588672, "id": 229156512, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyOTE1NjUxMg==", "diff_hunk": "@@ -0,0 +1,600 @@\n+#pragma once\n+\n+#include <unordered_map>\n+#include <stack>\n+#include <string>\n+\n+#include <ATen/core/Allocator.h>\n+\n+#include \"caffe2/core/common.h\"\n+#include \"caffe2/proto/caffe2_pb.h\"\n+#include \"caffe2/proto/torch_pb.h\"\n+#include \"caffe2/serialize/inline_container.h\"\n+\n+namespace at {\n+namespace serialize {\n+\n+// multiple tensor may share the same content\n+// SharedData contains:\n+//    1) record id (i.e., the offset in the inline container)\n+//    2) size, the size of the content\n+//    3) data, in serialize, IntermediateModel does NOT own the data,\n+//       in deserialize, the data pointer is returned by PyTorchFileReader,\n+//       and IntermediateModel owns the data. The ownership later will be\n+//       transferred to Tensor\n+class SharedData {\n+ public:\n+  // constructor\n+  explicit SharedData(uint64_t record_id, at::DataPtr&& data_ptr, uint64_t size)\n+    : recordId_(record_id), dataPtr_(std::move(data_ptr)), size_(size){}\n+\n+  // getters\n+  void* rawData() {\n+    return dataPtr_.get();\n+  }\n+\n+  uint64_t recordId() const {\n+    return recordId_;\n+  }\n+\n+  uint64_t size() const {\n+    return size_;\n+  }\n+\n+  // setters\n+  void setDataPtr(at::DataPtr&& data_ptr) {\n+    dataPtr_ = std::move(data_ptr);\n+  }\n+\n+  void setRecordId(uint64_t record_id) {\n+    recordId_ = record_id;\n+  }\n+\n+  void setSize(uint64_t size) {\n+    size_ = size;\n+  }\n+\n+ private:\n+  uint64_t recordId_;\n+  at::DataPtr dataPtr_;\n+  uint64_t size_;\n+};\n+\n+// IntermediateDeviceOption stores device related information\n+struct IntermediateDeviceOption {\n+  int32_t deviceType = 0;\n+  int32_t deviceId;\n+  bool hasDeviceId = false;", "path": "caffe2/serialize/intermediate_model.h", "position": null, "original_position": 67, "commit_id": "53180b449481169c2c2ff9e23ac18289412c62b3", "original_commit_id": "a01175f558ff676c429944fe0c885483a2a4265c", "user": {"login": "dzhulgakov", "id": 17890620, "node_id": "MDQ6VXNlcjE3ODkwNjIw", "avatar_url": "https://avatars2.githubusercontent.com/u/17890620?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dzhulgakov", "html_url": "https://github.com/dzhulgakov", "followers_url": "https://api.github.com/users/dzhulgakov/followers", "following_url": "https://api.github.com/users/dzhulgakov/following{/other_user}", "gists_url": "https://api.github.com/users/dzhulgakov/gists{/gist_id}", "starred_url": "https://api.github.com/users/dzhulgakov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dzhulgakov/subscriptions", "organizations_url": "https://api.github.com/users/dzhulgakov/orgs", "repos_url": "https://api.github.com/users/dzhulgakov/repos", "events_url": "https://api.github.com/users/dzhulgakov/events{/privacy}", "received_events_url": "https://api.github.com/users/dzhulgakov/received_events", "type": "User", "site_admin": false}, "body": "why not use c10::optional to represent it?", "created_at": "2018-10-30T02:14:01Z", "updated_at": "2018-11-23T15:53:49Z", "html_url": "https://github.com/pytorch/pytorch/pull/13020#discussion_r229156512", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/13020", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/229156512"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/13020#discussion_r229156512"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/13020"}}, "body_html": "<p>why not use c10::optional to represent it?</p>", "body_text": "why not use c10::optional to represent it?"}