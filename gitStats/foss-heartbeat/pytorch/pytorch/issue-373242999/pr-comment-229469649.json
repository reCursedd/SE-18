{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/229469649", "pull_request_review_id": 169979590, "id": 229469649, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyOTQ2OTY0OQ==", "diff_hunk": "@@ -0,0 +1,600 @@\n+#pragma once\n+\n+#include <unordered_map>\n+#include <stack>\n+#include <string>\n+\n+#include <ATen/core/Allocator.h>\n+\n+#include \"caffe2/core/common.h\"\n+#include \"caffe2/proto/caffe2_pb.h\"\n+#include \"caffe2/proto/torch_pb.h\"\n+#include \"caffe2/serialize/inline_container.h\"\n+\n+namespace at {\n+namespace serialize {\n+\n+// multiple tensor may share the same content\n+// SharedData contains:\n+//    1) record id (i.e., the offset in the inline container)\n+//    2) size, the size of the content\n+//    3) data, in serialize, IntermediateModel does NOT own the data,\n+//       in deserialize, the data pointer is returned by PyTorchFileReader,\n+//       and IntermediateModel owns the data. The ownership later will be\n+//       transferred to Tensor\n+class SharedData {\n+ public:\n+  // constructor\n+  explicit SharedData(uint64_t record_id, at::DataPtr&& data_ptr, uint64_t size)\n+    : recordId_(record_id), dataPtr_(std::move(data_ptr)), size_(size){}\n+\n+  // getters\n+  void* rawData() {\n+    return dataPtr_.get();\n+  }\n+\n+  uint64_t recordId() const {\n+    return recordId_;\n+  }\n+\n+  uint64_t size() const {\n+    return size_;\n+  }\n+\n+  // setters\n+  void setDataPtr(at::DataPtr&& data_ptr) {\n+    dataPtr_ = std::move(data_ptr);\n+  }\n+\n+  void setRecordId(uint64_t record_id) {\n+    recordId_ = record_id;\n+  }\n+\n+  void setSize(uint64_t size) {\n+    size_ = size;\n+  }\n+\n+ private:\n+  uint64_t recordId_;\n+  at::DataPtr dataPtr_;\n+  uint64_t size_;\n+};\n+\n+// IntermediateDeviceOption stores device related information\n+struct IntermediateDeviceOption {\n+  int32_t deviceType = 0;\n+  int32_t deviceId;\n+  bool hasDeviceId = false;\n+};\n+\n+// IntermediateTensor contains\n+//   1) element type information\n+//   2) shape information\n+//   3) pointer to the data (including offset and strides)\n+class IntermediateTensor final {\n+ public:\n+  // constructor\n+  IntermediateTensor() = default;\n+\n+  // extract data from TensorProto, called in deserialize\n+  // assume record id to data mapping is complete\n+  void update(caffe2::TensorProto* tensor_proto,", "path": "caffe2/serialize/intermediate_model.h", "position": null, "original_position": 81, "commit_id": "53180b449481169c2c2ff9e23ac18289412c62b3", "original_commit_id": "a01175f558ff676c429944fe0c885483a2a4265c", "user": {"login": "houseroad", "id": 30275821, "node_id": "MDQ6VXNlcjMwMjc1ODIx", "avatar_url": "https://avatars0.githubusercontent.com/u/30275821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/houseroad", "html_url": "https://github.com/houseroad", "followers_url": "https://api.github.com/users/houseroad/followers", "following_url": "https://api.github.com/users/houseroad/following{/other_user}", "gists_url": "https://api.github.com/users/houseroad/gists{/gist_id}", "starred_url": "https://api.github.com/users/houseroad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/houseroad/subscriptions", "organizations_url": "https://api.github.com/users/houseroad/orgs", "repos_url": "https://api.github.com/users/houseroad/repos", "events_url": "https://api.github.com/users/houseroad/events{/privacy}", "received_events_url": "https://api.github.com/users/houseroad/received_events", "type": "User", "site_admin": false}, "body": "yeah, will remove most implementation to cpp, and make sure, we don't include protobuf headers in this header.", "created_at": "2018-10-30T20:17:44Z", "updated_at": "2018-11-23T15:53:52Z", "html_url": "https://github.com/pytorch/pytorch/pull/13020#discussion_r229469649", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/13020", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/229469649"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/13020#discussion_r229469649"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/13020"}}, "body_html": "<p>yeah, will remove most implementation to cpp, and make sure, we don't include protobuf headers in this header.</p>", "body_text": "yeah, will remove most implementation to cpp, and make sure, we don't include protobuf headers in this header.", "in_reply_to_id": 229156699}