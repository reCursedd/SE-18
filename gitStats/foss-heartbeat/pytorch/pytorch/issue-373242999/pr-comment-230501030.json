{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/230501030", "pull_request_review_id": 171262190, "id": 230501030, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMDUwMTAzMA==", "diff_hunk": "@@ -0,0 +1,385 @@\n+#pragma once\n+\n+#include <unordered_map>\n+#include <stack>\n+#include <string>\n+\n+#include <ATen/core/Allocator.h>\n+#include <c10/util/Optional.h>\n+\n+#include \"caffe2/core/common.h\"\n+#include \"caffe2/serialize/inline_container.h\"\n+\n+namespace caffe2 {\n+  class TensorProto;\n+  class NetDef;\n+}\n+\n+namespace torch {\n+  class ParameterDef;\n+  class MethodDef;\n+  class ModuleDef;\n+  class ModelDef;\n+}\n+\n+namespace at {\n+namespace serialize {\n+\n+enum DeserializeMode {\n+  // In EAGER mode, we load the file from the beginning, and eagarly load the content of tensors\n+  EAGER = 1,\n+  // In LAZY mode, we only load the last record of the file, which is the model metadata\n+  // And the data of the tensor will be loaded later\n+  LAZY = 2,\n+};\n+\n+// multiple tensor may share the same content\n+// SharedData contains:\n+//    1) record id (i.e., the offset in the inline container)\n+//    2) size, the size of the content\n+//    3) data, in serialize, IntermediateModel does NOT own the data,\n+//       in deserialize, the data pointer is returned by PyTorchFileReader,\n+//       and IntermediateModel owns the data. The ownership later will be\n+//       transferred to Tensor\n+struct SharedData {\n+  // constructor\n+  explicit SharedData(uint64_t record_id) : recordId(record_id), dataPtr() {}\n+  explicit SharedData(uint64_t record_id, at::DataPtr&& data_ptr, uint64_t size)\n+    : recordId(record_id), dataPtr(std::move(data_ptr)), size(size) {}\n+\n+  c10::optional<uint64_t> recordId;\n+  at::DataPtr dataPtr;\n+  // For deserialize:\n+  //   1) in EAGER mode, size information is avaiable immediately\n+  //   2) in LAZY mode, until we load the tensor data, size won't be available\n+  uint64_t size = 0;", "path": "caffe2/serialize/intermediate_model.h", "position": null, "original_position": 55, "commit_id": "53180b449481169c2c2ff9e23ac18289412c62b3", "original_commit_id": "79a037e168a2f09bbc918c6801865b6e333c8a03", "user": {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, "body": "Size information should be part of the metadata file, always. We don't want to have to jump around the file just to setup tensors. Furthermore, adding a single meta-data field to the records themselves will encourage more people to stash things with the records. Eventually this will devolve into having some fields next to the records and some in the meta-data file, which would be a very bad situation for versioning. My opinion is that all records should only be black boxes and that understanding them will require reading the meta-data file to find out anything else.", "created_at": "2018-11-02T20:36:32Z", "updated_at": "2018-11-23T15:54:13Z", "html_url": "https://github.com/pytorch/pytorch/pull/13020#discussion_r230501030", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/13020", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/230501030"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/13020#discussion_r230501030"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/13020"}}, "body_html": "<p>Size information should be part of the metadata file, always. We don't want to have to jump around the file just to setup tensors. Furthermore, adding a single meta-data field to the records themselves will encourage more people to stash things with the records. Eventually this will devolve into having some fields next to the records and some in the meta-data file, which would be a very bad situation for versioning. My opinion is that all records should only be black boxes and that understanding them will require reading the meta-data file to find out anything else.</p>", "body_text": "Size information should be part of the metadata file, always. We don't want to have to jump around the file just to setup tensors. Furthermore, adding a single meta-data field to the records themselves will encourage more people to stash things with the records. Eventually this will devolve into having some fields next to the records and some in the meta-data file, which would be a very bad situation for versioning. My opinion is that all records should only be black boxes and that understanding them will require reading the meta-data file to find out anything else.", "in_reply_to_id": 230489022}