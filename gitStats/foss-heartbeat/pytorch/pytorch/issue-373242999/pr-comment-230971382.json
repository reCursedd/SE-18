{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/230971382", "pull_request_review_id": 171830968, "id": 230971382, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMDk3MTM4Mg==", "diff_hunk": "@@ -0,0 +1,335 @@\n+#include \"caffe2/proto/caffe2_pb.h\"\n+#include \"caffe2/proto/torch_pb.h\"\n+\n+#include \"caffe2/serialize/intermediate_model.h\"\n+\n+namespace at {\n+namespace serialize{\n+\n+void IntermediateTensor::update(caffe2::TensorProto* tensor_proto,\n+    std::unordered_map<uint64_t, std::shared_ptr<SharedData>>* id_data,\n+    DeserializeMode mode) {\n+  AT_ASSERTM(tensor_proto->has_data_type(), \"no data_type in TensorProto!\");\n+  dataType_ = tensor_proto->data_type();\n+  for (int i = 0; i < tensor_proto->dims_size(); ++i) {\n+    dims_.push_back(tensor_proto->dims(i));\n+  }\n+  if (tensor_proto->has_name()) {\n+    // TODO: TensorProto's name is not used, we just keep it here for now\n+    // later we will deprecate it.\n+    name_ = tensor_proto->name();\n+  }\n+  if (tensor_proto->has_device_detail()) {\n+    const auto& device_detail = tensor_proto->device_detail();\n+    deviceDetail_.deviceType = device_detail.device_type();\n+    if (device_detail.has_device_id()) {\n+      deviceDetail_.deviceId = device_detail.device_id();\n+    }\n+    if (device_detail.has_random_seed()) {\n+      AT_ERROR(\"DeviceOption contains random seed, not supported!\");\n+    }\n+    if (device_detail.has_node_name()) {\n+      AT_ERROR(\"DeviceOption contains node name, not supported!\");\n+    }\n+    if (device_detail.extra_info_size() > 0) {\n+      AT_ERROR(\"DeviceOption contains extra info, not supported!\");\n+    }\n+  }\n+  AT_ASSERTM(tensor_proto->has_storage_type(), \"no storage_type in TensorProto!\");\n+  int64_t storage_type = tensor_proto->storage_type();\n+  switch (storage_type) {\n+    case caffe2::TensorProto_StorageType_TYPED:\n+      // TODO\n+      AT_ERROR(\"Storing data in typed field is not suppored yet!\");\n+    case caffe2::TensorProto_StorageType_RAW:\n+      // TODO\n+      AT_ERROR(\"Storing data in raw field is not supported yet!\");\n+    case caffe2::TensorProto_StorageType_EXTERNAL:\n+      {\n+        AT_ASSERTM(tensor_proto->has_external_data(), \"storage type is EXTERNAL, \"\n+            \"but no external_data in TensorProto!\");\n+        auto& external_data = tensor_proto->external_data();\n+        offset_ = external_data.offset();\n+        for (int i = 0; i < external_data.strides_size(); ++i) {\n+          strides_.push_back(external_data.strides(i));\n+        }\n+        int64_t source_type = external_data.source_type();\n+        if (source_type == caffe2::ExternalDataProto_SourceType_INLINE_CONTAINER) {\n+          AT_ASSERTM(external_data.has_record_id(), \"no record_id in ExternalDataProto and source_type is INLINE_CONTAINER!\");\n+          // only load the data of the tensor in LOADER_TENSOR_DATA mode\n+          uint64_t record_id = caffe2::stoull(external_data.record_id());\n+          uint64_t record_size = external_data.record_size();\n+          auto it = id_data->find(record_id);\n+          if (mode == DeserializeMode::LOADER_TENSOR_DATA) {\n+            // tensor data is only loaded in LOADER_TENSOR_DATA mode\n+            if (it == id_data->end()) {\n+              AT_ERROR(\"Tensor's data is missing in id_data, tensor name is \",\n+                  name_, \", and record_id is \", caffe2::to_string(record_id));\n+            }\n+            data_ = it->second;\n+            AT_ASSERT(data_->recordId.value() == record_id);\n+            AT_ASSERT(data_->size == record_size);\n+          } else {\n+            AT_ASSERTM(mode == DeserializeMode::HEADER_ONLY, \"unkonw deserialize mode.\");", "path": "caffe2/serialize/intermediate_model.cc", "position": null, "original_position": 73, "commit_id": "53180b449481169c2c2ff9e23ac18289412c62b3", "original_commit_id": "b92465d67052d337dd5428de49ebb85816a093c8", "user": {"login": "houseroad", "id": 30275821, "node_id": "MDQ6VXNlcjMwMjc1ODIx", "avatar_url": "https://avatars0.githubusercontent.com/u/30275821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/houseroad", "html_url": "https://github.com/houseroad", "followers_url": "https://api.github.com/users/houseroad/followers", "following_url": "https://api.github.com/users/houseroad/following{/other_user}", "gists_url": "https://api.github.com/users/houseroad/gists{/gist_id}", "starred_url": "https://api.github.com/users/houseroad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/houseroad/subscriptions", "organizations_url": "https://api.github.com/users/houseroad/orgs", "repos_url": "https://api.github.com/users/houseroad/repos", "events_url": "https://api.github.com/users/houseroad/events{/privacy}", "received_events_url": "https://api.github.com/users/houseroad/received_events", "type": "User", "site_admin": false}, "body": "good catch~", "created_at": "2018-11-06T01:09:19Z", "updated_at": "2018-11-23T15:54:21Z", "html_url": "https://github.com/pytorch/pytorch/pull/13020#discussion_r230971382", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/13020", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/230971382"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/13020#discussion_r230971382"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/13020"}}, "body_html": "<p>good catch~</p>", "body_text": "good catch~", "in_reply_to_id": 230942708}