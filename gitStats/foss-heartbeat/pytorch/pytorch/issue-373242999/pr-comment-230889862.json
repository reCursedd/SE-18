{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/230889862", "pull_request_review_id": 171727783, "id": 230889862, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMDg4OTg2Mg==", "diff_hunk": "@@ -0,0 +1,167 @@\n+#include <cstdio>\n+#include <string>\n+\n+#include <gtest/gtest.h>\n+\n+#include \"caffe2/proto/caffe2_pb.h\"\n+#include \"caffe2/proto/torch_pb.h\"\n+#include \"caffe2/serialize/intermediate_model.h\"\n+\n+namespace at {\n+namespace {\n+\n+TEST(IntermediateModel, SerializeAndDeserialize) {\n+  // TODO: split the test cases\n+  // TODO test different type of device\n+\n+  // prepare model\n+  std::string model_name(\"Test-Model-Name\");\n+  std::string producer_name(\"Test-Producer-Name\");\n+  std::string producer_version(\"Test-Producer-Version\");\n+  int64_t proto_version = 2; // invalid, only for testing\n+  serialize::IntermediateModel imodel;\n+  imodel.setName(model_name);\n+  imodel.setProducerName(producer_name);\n+  imodel.setProducerVersion(producer_version);\n+  imodel.setProtoVersion(proto_version);\n+\n+  // prepare main module\n+  serialize::IntermediateModule* main_module = imodel.mutableMainModule();\n+  std::string module_name(\"Test-Module-Name\");\n+  main_module->setName(module_name);\n+\n+  // prepare method for main module\n+  std::vector<serialize::IntermediateMethod>* methods = main_module->mutableMethods();\n+  methods->resize(1);\n+  serialize::IntermediateMethod& method = methods->at(0);\n+  std::string method_name(\"Test-Method-Name\");\n+  method.setName(method_name);\n+  std::string torch_script(\"Test-Method-Torch-Script\");\n+  method.setTorchScript(torch_script);\n+\n+  // prepare submodule for main module\n+  std::vector<serialize::IntermediateModule>* subs = main_module->mutableSubmodules();\n+  subs->resize(1);\n+  serialize::IntermediateModule& sub_module = subs->at(0);\n+  std::string sub_name(\"Test-Submodule-Name\");\n+  sub_module.setName(sub_name);\n+\n+  // prepare parameters for main module\n+  std::vector<serialize::IntermediateParameter>* params = main_module->mutableParameters();\n+  std::string param1_name(\"Test-Parameter-Name\");\n+  bool is_buffer = true;\n+  bool require_gradient = true;\n+  // prepare first parameter\n+  params->emplace_back(param1_name, is_buffer, require_gradient);\n+  serialize::IntermediateTensor* tensor1 = params->at(0).mutableTensor();\n+  size_t raw_size = sizeof(float);\n+  std::vector<int64_t> dims = {2, 3, 4};\n+  for (auto dim : dims) {\n+    raw_size *= dim;\n+  }\n+  std::vector<int64_t> strides = {12, 4, 1};\n+  *tensor1 = serialize::IntermediateTensor(caffe2::TensorProto_DataType_FLOAT, dims, 0);\n+  std::vector<char> data_vector;\n+  data_vector.resize(raw_size);\n+  for (size_t i = 0; i < data_vector.size(); ++i) {\n+    data_vector[i] = data_vector.size() - i;\n+  }\n+  at::DataPtr data_ptr(data_vector.data(), at::kCPU);\n+  std::shared_ptr<serialize::SharedData> data =\n+    std::make_shared<serialize::SharedData>(0, raw_size, std::move(data_ptr));\n+  tensor1->setData(data);\n+  tensor1->setStrides(strides);\n+  // prepare second parameter, share the data with first parameter\n+  std::string param2_name = \"Test-Parameter-2-Name\";\n+  params->emplace_back(param2_name, is_buffer, require_gradient);\n+  serialize::IntermediateTensor* tensor2 = params->at(1).mutableTensor();\n+  *tensor2 = serialize::IntermediateTensor(caffe2::TensorProto_DataType_FLOAT, dims, 0);\n+  tensor2->setData(data);", "path": "caffe2/serialize/intermediate_model_test.cc", "position": 87, "original_position": 79, "commit_id": "53180b449481169c2c2ff9e23ac18289412c62b3", "original_commit_id": "ae448c8605543fd4a17223fd1f83f3f2bc37245d", "user": {"login": "dzhulgakov", "id": 17890620, "node_id": "MDQ6VXNlcjE3ODkwNjIw", "avatar_url": "https://avatars2.githubusercontent.com/u/17890620?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dzhulgakov", "html_url": "https://github.com/dzhulgakov", "followers_url": "https://api.github.com/users/dzhulgakov/followers", "following_url": "https://api.github.com/users/dzhulgakov/following{/other_user}", "gists_url": "https://api.github.com/users/dzhulgakov/gists{/gist_id}", "starred_url": "https://api.github.com/users/dzhulgakov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dzhulgakov/subscriptions", "organizations_url": "https://api.github.com/users/dzhulgakov/orgs", "repos_url": "https://api.github.com/users/dzhulgakov/repos", "events_url": "https://api.github.com/users/dzhulgakov/events{/privacy}", "received_events_url": "https://api.github.com/users/dzhulgakov/received_events", "type": "User", "site_admin": false}, "body": "verify also that the offset is saved properly? or is it coming in a follow up diff?", "created_at": "2018-11-05T19:54:39Z", "updated_at": "2018-11-23T15:54:18Z", "html_url": "https://github.com/pytorch/pytorch/pull/13020#discussion_r230889862", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/13020", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/230889862"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/13020#discussion_r230889862"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/13020"}}, "body_html": "<p>verify also that the offset is saved properly? or is it coming in a follow up diff?</p>", "body_text": "verify also that the offset is saved properly? or is it coming in a follow up diff?"}