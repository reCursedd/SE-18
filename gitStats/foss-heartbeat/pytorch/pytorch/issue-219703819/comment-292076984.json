{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/292076984", "html_url": "https://github.com/pytorch/pytorch/issues/1197#issuecomment-292076984", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/1197", "id": 292076984, "node_id": "MDEyOklzc3VlQ29tbWVudDI5MjA3Njk4NA==", "user": {"login": "alexander-beer-weiss", "id": 9837758, "node_id": "MDQ6VXNlcjk4Mzc3NTg=", "avatar_url": "https://avatars2.githubusercontent.com/u/9837758?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexander-beer-weiss", "html_url": "https://github.com/alexander-beer-weiss", "followers_url": "https://api.github.com/users/alexander-beer-weiss/followers", "following_url": "https://api.github.com/users/alexander-beer-weiss/following{/other_user}", "gists_url": "https://api.github.com/users/alexander-beer-weiss/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexander-beer-weiss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexander-beer-weiss/subscriptions", "organizations_url": "https://api.github.com/users/alexander-beer-weiss/orgs", "repos_url": "https://api.github.com/users/alexander-beer-weiss/repos", "events_url": "https://api.github.com/users/alexander-beer-weiss/events{/privacy}", "received_events_url": "https://api.github.com/users/alexander-beer-weiss/received_events", "type": "User", "site_admin": false}, "created_at": "2017-04-06T06:01:03Z", "updated_at": "2017-04-06T06:01:03Z", "author_association": "NONE", "body_html": "<p>I see.  It's a bit annoying that 2d and 3d pooling follow completely different indexing conventions.  I actually ran into a problem because I was trying to slice indices from a MaxPool3d layer and feed those sliced indices into a MaxUnpool2d layer.  Of course, now that I understand the structure, I can convert the indices properly; although maybe it's more efficient to just use a MaxUnpool3d layer with a kernel_size=(1,x,x).  I don't think PyTorch currently has bit manipulation operators for Tensors.</p>\n<p>I would suggest that the indexing conventions be discussed in the PyTorch documentation (possibly with a note that they are different).  I wasted a lot of time on this, so probably others will as well.  Even better would be if there was one consistent (preferably human-readable) convention for both 2d and 3d.</p>", "body_text": "I see.  It's a bit annoying that 2d and 3d pooling follow completely different indexing conventions.  I actually ran into a problem because I was trying to slice indices from a MaxPool3d layer and feed those sliced indices into a MaxUnpool2d layer.  Of course, now that I understand the structure, I can convert the indices properly; although maybe it's more efficient to just use a MaxUnpool3d layer with a kernel_size=(1,x,x).  I don't think PyTorch currently has bit manipulation operators for Tensors.\nI would suggest that the indexing conventions be discussed in the PyTorch documentation (possibly with a note that they are different).  I wasted a lot of time on this, so probably others will as well.  Even better would be if there was one consistent (preferably human-readable) convention for both 2d and 3d.", "body": "I see.  It's a bit annoying that 2d and 3d pooling follow completely different indexing conventions.  I actually ran into a problem because I was trying to slice indices from a MaxPool3d layer and feed those sliced indices into a MaxUnpool2d layer.  Of course, now that I understand the structure, I can convert the indices properly; although maybe it's more efficient to just use a MaxUnpool3d layer with a kernel_size=(1,x,x).  I don't think PyTorch currently has bit manipulation operators for Tensors.\r\n\r\nI would suggest that the indexing conventions be discussed in the PyTorch documentation (possibly with a note that they are different).  I wasted a lot of time on this, so probably others will as well.  Even better would be if there was one consistent (preferably human-readable) convention for both 2d and 3d."}