{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/292044581", "html_url": "https://github.com/pytorch/pytorch/issues/1197#issuecomment-292044581", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/1197", "id": 292044581, "node_id": "MDEyOklzc3VlQ29tbWVudDI5MjA0NDU4MQ==", "user": {"login": "ngimel", "id": 15841449, "node_id": "MDQ6VXNlcjE1ODQxNDQ5", "avatar_url": "https://avatars3.githubusercontent.com/u/15841449?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ngimel", "html_url": "https://github.com/ngimel", "followers_url": "https://api.github.com/users/ngimel/followers", "following_url": "https://api.github.com/users/ngimel/following{/other_user}", "gists_url": "https://api.github.com/users/ngimel/gists{/gist_id}", "starred_url": "https://api.github.com/users/ngimel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ngimel/subscriptions", "organizations_url": "https://api.github.com/users/ngimel/orgs", "repos_url": "https://api.github.com/users/ngimel/repos", "events_url": "https://api.github.com/users/ngimel/events{/privacy}", "received_events_url": "https://api.github.com/users/ngimel/received_events", "type": "User", "site_admin": false}, "created_at": "2017-04-06T01:37:19Z", "updated_at": "2017-04-06T01:37:19Z", "author_association": "CONTRIBUTOR", "body_html": "<p>It's kind of Ok (but not really). Unpooling example from the samples work (<a href=\"http://pytorch.org/docs/nn.html?highlight=maxunpool3d#torch.nn.MaxUnpool3d\" rel=\"nofollow\">http://pytorch.org/docs/nn.html?highlight=maxunpool3d#torch.nn.MaxUnpool3d</a>) even with these seemingly junk indices.<br>\nMaxPooling3d has a very special way of setting indices that is different from MaxPooling2d, where it sets only the lower 4 bytes of an 8-byte long value:<br>\n<a href=\"https://github.com/torch/nn/blob/master/lib/THNN/generic/VolumetricDilatedMaxPooling.c#L188-L191\">https://github.com/torch/nn/blob/master/lib/THNN/generic/VolumetricDilatedMaxPooling.c#L188-L191</a>,<br>\nand indices are never properly zeroed, so the upper bytes are initialized to garbage (that's why you have all those e+18 values). So, bottom line, indices as output are Ok for subsequent backprop and for unpooling (because neither of those routines ever read upper 4 bytes), but they are not human-readable.</p>", "body_text": "It's kind of Ok (but not really). Unpooling example from the samples work (http://pytorch.org/docs/nn.html?highlight=maxunpool3d#torch.nn.MaxUnpool3d) even with these seemingly junk indices.\nMaxPooling3d has a very special way of setting indices that is different from MaxPooling2d, where it sets only the lower 4 bytes of an 8-byte long value:\nhttps://github.com/torch/nn/blob/master/lib/THNN/generic/VolumetricDilatedMaxPooling.c#L188-L191,\nand indices are never properly zeroed, so the upper bytes are initialized to garbage (that's why you have all those e+18 values). So, bottom line, indices as output are Ok for subsequent backprop and for unpooling (because neither of those routines ever read upper 4 bytes), but they are not human-readable.", "body": "It's kind of Ok (but not really). Unpooling example from the samples work (http://pytorch.org/docs/nn.html?highlight=maxunpool3d#torch.nn.MaxUnpool3d) even with these seemingly junk indices. \r\nMaxPooling3d has a very special way of setting indices that is different from MaxPooling2d, where it sets only the lower 4 bytes of an 8-byte long value: \r\nhttps://github.com/torch/nn/blob/master/lib/THNN/generic/VolumetricDilatedMaxPooling.c#L188-L191, \r\nand indices are never properly zeroed, so the upper bytes are initialized to garbage (that's why you have all those e+18 values). So, bottom line, indices as output are Ok for subsequent backprop and for unpooling (because neither of those routines ever read upper 4 bytes), but they are not human-readable. "}