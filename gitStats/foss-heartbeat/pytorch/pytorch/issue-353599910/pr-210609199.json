{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/10841", "id": 210609199, "node_id": "MDExOlB1bGxSZXF1ZXN0MjEwNjA5MTk5", "html_url": "https://github.com/pytorch/pytorch/pull/10841", "diff_url": "https://github.com/pytorch/pytorch/pull/10841.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/10841.patch", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/10841", "number": 10841, "state": "closed", "locked": false, "title": "[JIT][tracer] Sanity checks for tracing", "user": {"login": "jamesr66a", "id": 4685384, "node_id": "MDQ6VXNlcjQ2ODUzODQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/4685384?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamesr66a", "html_url": "https://github.com/jamesr66a", "followers_url": "https://api.github.com/users/jamesr66a/followers", "following_url": "https://api.github.com/users/jamesr66a/following{/other_user}", "gists_url": "https://api.github.com/users/jamesr66a/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamesr66a/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamesr66a/subscriptions", "organizations_url": "https://api.github.com/users/jamesr66a/orgs", "repos_url": "https://api.github.com/users/jamesr66a/repos", "events_url": "https://api.github.com/users/jamesr66a/events{/privacy}", "received_events_url": "https://api.github.com/users/jamesr66a/received_events", "type": "User", "site_admin": false}, "body": "TODO: integrate into torch.onnx.export -- separate PR\r\n\r\n*Problem:* We have a facility to trace PyTorch operations on Python code, but there are several failure modes where the trace is not representative of the actual underlying computation:\r\n\r\n* The tracer encountered dynamic control flow\r\n* Some computation escaped the tracer, and appeared as a Constant tensor node in the graph\r\n* Some stateful function was traced, e.g. someone did an optimization in Python by memoizing function outputs\r\n\r\n*Objective*: In an ideal world, this whole process would be automated and the user can trust that the system will magically capture the intended semantics from the program. Realistically speaking, we will likely have to settle with a human-in-the-loop error reporting system, allowing for the user to identify problems and modify the source code to allow for tracing.\r\n\r\n*Stage 1* (this PR): Output-level checking & graph diff. torch.jit.trace gains a kwarg 'check_inputs', which is a list of tuples of input arguments. We will iterate through the list and trace the function again for each set of check inputs. We'll also interpret the original trace with these inputs and compare output values and graphs, printing a diff of the graph if there is a difference.\r\n\r\n\r\nExamples:\r\n\r\n```\r\n@torch.jit.trace(torch.rand(3, 4), check_inputs=[(torch.rand(4, 5),)])\r\ndef foo(x):\r\n    y = torch.arange(0, x.shape[0]).float()\r\n    return x + y.unsqueeze(1)\r\n```\r\n\r\n```\r\ntorch.jit.TracingCheckError: Tracing failed sanity checks!\r\nERROR: Graphs differed across invocations!\r\n\tGraph diff:\r\n\t\t  graph(%0 : Dynamic) {\r\n\t\t-   %1 : Dynamic = prim::Constant[value= 0  1  2 [ CPULongType{3} ]]()\r\n\t\t?                                                              ^\r\n\t\t+   %1 : Dynamic = prim::Constant[value= 0  1  2  3 [ CPULongType{4} ]]()\r\n\t\t?                                                +++              ^\r\n\t\t    %2 : int = prim::Constant[value=0]()\r\n\t\t    %3 : Dynamic = aten::_cast_Float(%1, %2)\r\n\t\t    %4 : int = prim::Constant[value=1]()\r\n\t\t    %5 : Dynamic = aten::unsqueeze(%3, %4)\r\n\t\t    %6 : int = prim::Constant[value=1]()\r\n\t\t    %7 : Dynamic = aten::add(%0, %5, %6)\r\n\t\t    return (%7);\r\n\t\t  }\r\n\tNode diff:\r\n\t\t- %1 : Dynamic = prim::Constant[value= 0  1  2 [ CPULongType{3} ]]()\r\n\t\t?                                                            ^\r\n\t\t+ %1 : Dynamic = prim::Constant[value= 0  1  2  3 [ CPULongType{4} ]]()\r\n\t\t?                                              +++              ^\r\n\tTrace source location:\r\n\t\tdank.py(5): foo\r\n\t\t/Users/jamesreed/onnx-fairseq/pytorch/torch/jit/__init__.py(402): wrapper\r\n\t\tdank.py(3): <module>\r\n\tCheck source location:\r\n\t\tdank.py(5): foo\r\n\t\t/Users/jamesreed/onnx-fairseq/pytorch/torch/jit/__init__.py(281): check_trace\r\n\t\t/Users/jamesreed/onnx-fairseq/pytorch/torch/jit/__init__.py(408): wrapper\r\n\t\tdank.py(3): <module>\r\nERROR: Tensor-valued Constant nodes differed in value across invocations. This often indicates that the tracer has encountered untraceable code.\r\n\tNode:\r\n\t\t%1 : Dynamic = prim::Constant[value= 0  1  2 [ CPULongType{3} ]]()\r\n\tSource Location:\r\n\t\tdank.py(5): foo\r\n\t\t/Users/jamesreed/onnx-fairseq/pytorch/torch/jit/__init__.py(402): wrapper\r\n\t\tdank.py(3): <module>\r\n\tComparison exception:\r\n\t\tNot equal to tolerance rtol=1e-07, atol=0\r\n\r\n\t\t(shapes (3,), (4,) mismatch)\r\n\t\t x: array([0, 1, 2])\r\n\t\t y: array([0, 1, 2, 3])\r\n\r\n```\r\n==\r\n\r\n```\r\n@torch.jit.trace(torch.rand(3, 4), check_inputs=[(torch.rand(3, 4),)])\r\ndef foo(x):\r\n    y = x.data\r\n    return x + y\r\n```\r\n\r\n```\r\ntorch.jit.TracingCheckError: Tracing failed sanity checks!\r\nERROR: Traced function outputs do not match the Python function outputs.\r\nERROR: Tensor-valued Constant nodes differed in value across invocations. This often indicates that the tracer has encountered untraceable code.\r\n\tNode:\r\n\t\t%1 : Dynamic = prim::Constant[value=<Tensor>]()\r\n\tSource Location:\r\n\t\tdank.py(6): foo\r\n\t\t/Users/jamesreed/onnx-fairseq/pytorch/torch/jit/__init__.py(402): wrapper\r\n\t\tdank.py(3): <module>\r\n\tComparison exception:\r\n\t\tNot equal to tolerance rtol=1e-07, atol=0\r\n\r\n\t\t(mismatch 100.0%)\r\n\t\t x: array([0.397137, 0.956105, 0.169478, 0.560292, 0.392568, 0.108441,\r\n\t\t       0.97645 , 0.34412 , 0.951246, 0.793061, 0.557595, 0.770245],\r\n\t\t      dtype=float32)\r\n\t\t y: array([0.243178, 0.315964, 0.972041, 0.0215  , 0.927751, 0.457512,\r\n\t\t       0.951092, 0.97883 , 0.048688, 0.118066, 0.779345, 0.271272],\r\n\t\t      dtype=float32)\r\n```\r\n\r\n==\r\n\r\n```\r\nimport torch\r\n\r\n@torch.jit.trace(torch.rand(3, 4), check_inputs=[(torch.rand(4, 4),)])\r\ndef foo(x):\r\n    for _ in range(x.size(0)):\r\n        x = torch.neg(x)\r\n    return x\r\n```\r\n\r\n```\r\ntorch.jit.TracingCheckError: Tracing failed sanity checks!\r\nERROR: Traced function outputs do not match the Python function outputs.\r\nERROR: Graphs differed across invocations!\r\n\tGraph diff:\r\n\t\t  graph(%0 : Dynamic) {\r\n\t\t    %1 : Dynamic = aten::neg(%0)\r\n\t\t    %2 : Dynamic = aten::neg(%1)\r\n\t\t    %3 : Dynamic = aten::neg(%2)\r\n\t\t+   %4 : Dynamic = aten::neg(%3)\r\n\t\t-   return (%3);\r\n\t\t?            ^\r\n\t\t+   return (%4);\r\n\t\t?            ^\r\n\t\t  }\r\n```\r\n\r\n==\r\n\r\n```\r\nimport torch\r\n\r\ndef foo(x):\r\n    if not hasattr(foo, 'cache'):\r\n        foo.cache = torch.neg(x)\r\n    return x + foo.cache\r\n\r\ntraced = torch.jit.trace(torch.rand(3, 4), check_inputs=[(torch.rand(3, 4),)])(foo)\r\n```\r\n\r\n```\r\ntorch.jit.TracingCheckError: Tracing failed sanity checks!\r\nERROR: Traced function outputs do not match the Python function outputs.\r\nERROR: Graphs differed across invocations!\r\n\tGraph diff:\r\n\t\t  graph(%0 : Dynamic) {\r\n\t\t-   %1 : Dynamic = aten::neg(%0)\r\n\t\t+   %1 : Dynamic = prim::Constant[value=<Tensor>]()\r\n\t\t    %2 : int = prim::Constant[value=1]()\r\n\t\t    %3 : Dynamic = aten::add(%0, %1, %2)\r\n\t\t    return (%3);\r\n\t\t  }\r\n\tNode diff:\r\n\t\t- %1 : Dynamic = aten::neg(%0)\r\n\t\t+ %1 : Dynamic = prim::Constant[value=<Tensor>]()\r\n\tTrace source location:\r\n\t\ttest.py(5): foo\r\n\t\t/Users/jamesreed/onnx-fairseq/pytorch/torch/jit/__init__.py(402): wrapper\r\n\t\ttest.py(8): <module>\r\n\tCheck source location:\r\n\t\ttest.py(6): foo\r\n\t\t/Users/jamesreed/onnx-fairseq/pytorch/torch/jit/__init__.py(281): check_trace\r\n\t\t/Users/jamesreed/onnx-fairseq/pytorch/torch/jit/__init__.py(408): wrapper\r\n\t\ttest.py(8): <module>\r\n```\r\n\r\nThe following two examples show instances where program semantics are lost in the Python -> trace transformation, and repeated invocation does not give us useful debug information. Further design in underway for catching these scenarios.\r\n\r\n```\r\nimport torch\r\n\r\n@torch.jit.trace(torch.rand(3, 4), check_inputs=[(torch.rand(3, 4),)])\r\ndef foo(x):\r\n    for i in range(3):\r\n        x[i, :] = torch.zeros(4)\r\n    return x\r\n```\r\n\r\n```\r\ntorch.jit.TracingCheckError: Tracing failed sanity checks!\r\nERROR: Traced function outputs do not match the Python function outputs.\r\nException:\r\nNot equal to tolerance rtol=1e-07, atol=0\r\n\r\n(mismatch 100.0%)\r\n x: array([0.830221, 0.915481, 0.940281, 0.555241], dtype=float32)\r\n y: array([0., 0., 0., 0.], dtype=float32)\r\n```\r\n\r\n==\r\n\r\n```\r\nimport torch\r\n\r\n@torch.jit.trace(torch.rand(3, 4), check_inputs=[(torch.rand(5, 6),)])\r\ndef foo(x):\r\n    x.view(-1).add_(-x.view(-1))\r\n    return x\r\n```\r\n\r\n```\r\ntorch.jit.TracingCheckError: Tracing failed sanity checks!\r\nERROR: Traced function outputs do not match the Python function outputs.\r\nException:\r\nNot equal to tolerance rtol=1e-07, atol=0\r\n\r\n(mismatch 100.0%)\r\n x: array([0.734441, 0.445327, 0.640592, 0.30076 , 0.891674, 0.124771],\r\n      dtype=float32)\r\n y: array([0., 0., 0., 0., 0., 0.], dtype=float32)\r\n```\r\n", "created_at": "2018-08-24T00:21:02Z", "updated_at": "2018-11-23T15:50:13Z", "closed_at": "2018-08-29T03:26:28Z", "merged_at": null, "merge_commit_sha": "e710efbc5f949fe1933ff23467ef83b2125b2b48", "assignee": null, "assignees": [], "requested_reviewers": [{"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, {"login": "colesbury", "id": 655866, "node_id": "MDQ6VXNlcjY1NTg2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/655866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colesbury", "html_url": "https://github.com/colesbury", "followers_url": "https://api.github.com/users/colesbury/followers", "following_url": "https://api.github.com/users/colesbury/following{/other_user}", "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions", "organizations_url": "https://api.github.com/users/colesbury/orgs", "repos_url": "https://api.github.com/users/colesbury/repos", "events_url": "https://api.github.com/users/colesbury/events{/privacy}", "received_events_url": "https://api.github.com/users/colesbury/received_events", "type": "User", "site_admin": false}, {"login": "soumith", "id": 1310570, "node_id": "MDQ6VXNlcjEzMTA1NzA=", "avatar_url": "https://avatars0.githubusercontent.com/u/1310570?v=4", "gravatar_id": "", "url": "https://api.github.com/users/soumith", "html_url": "https://github.com/soumith", "followers_url": "https://api.github.com/users/soumith/followers", "following_url": "https://api.github.com/users/soumith/following{/other_user}", "gists_url": "https://api.github.com/users/soumith/gists{/gist_id}", "starred_url": "https://api.github.com/users/soumith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/soumith/subscriptions", "organizations_url": "https://api.github.com/users/soumith/orgs", "repos_url": "https://api.github.com/users/soumith/repos", "events_url": "https://api.github.com/users/soumith/events{/privacy}", "received_events_url": "https://api.github.com/users/soumith/received_events", "type": "User", "site_admin": false}, {"login": "gchanan", "id": 3768583, "node_id": "MDQ6VXNlcjM3Njg1ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3768583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gchanan", "html_url": "https://github.com/gchanan", "followers_url": "https://api.github.com/users/gchanan/followers", "following_url": "https://api.github.com/users/gchanan/following{/other_user}", "gists_url": "https://api.github.com/users/gchanan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gchanan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gchanan/subscriptions", "organizations_url": "https://api.github.com/users/gchanan/orgs", "repos_url": "https://api.github.com/users/gchanan/repos", "events_url": "https://api.github.com/users/gchanan/events{/privacy}", "received_events_url": "https://api.github.com/users/gchanan/received_events", "type": "User", "site_admin": false}], "requested_teams": [], "labels": [{"id": 679953983, "node_id": "MDU6TGFiZWw2Nzk5NTM5ODM=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/jit", "name": "jit", "color": "c5def5", "default": false}], "milestone": null, "commits_url": "https://api.github.com/repos/pytorch/pytorch/pulls/10841/commits", "review_comments_url": "https://api.github.com/repos/pytorch/pytorch/pulls/10841/comments", "review_comment_url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments{/number}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/10841/comments", "statuses_url": "https://api.github.com/repos/pytorch/pytorch/statuses/dc008cc6bf20f723ea9b9f4e419e039aec3224d7", "head": {"label": "jamesr66a:trace_check", "ref": "trace_check", "sha": "dc008cc6bf20f723ea9b9f4e419e039aec3224d7", "user": {"login": "jamesr66a", "id": 4685384, "node_id": "MDQ6VXNlcjQ2ODUzODQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/4685384?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamesr66a", "html_url": "https://github.com/jamesr66a", "followers_url": "https://api.github.com/users/jamesr66a/followers", "following_url": "https://api.github.com/users/jamesr66a/following{/other_user}", "gists_url": "https://api.github.com/users/jamesr66a/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamesr66a/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamesr66a/subscriptions", "organizations_url": "https://api.github.com/users/jamesr66a/orgs", "repos_url": "https://api.github.com/users/jamesr66a/repos", "events_url": "https://api.github.com/users/jamesr66a/events{/privacy}", "received_events_url": "https://api.github.com/users/jamesr66a/received_events", "type": "User", "site_admin": false}, "repo": {"id": 108300243, "node_id": "MDEwOlJlcG9zaXRvcnkxMDgzMDAyNDM=", "name": "pytorch", "full_name": "jamesr66a/pytorch", "private": false, "owner": {"login": "jamesr66a", "id": 4685384, "node_id": "MDQ6VXNlcjQ2ODUzODQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/4685384?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamesr66a", "html_url": "https://github.com/jamesr66a", "followers_url": "https://api.github.com/users/jamesr66a/followers", "following_url": "https://api.github.com/users/jamesr66a/following{/other_user}", "gists_url": "https://api.github.com/users/jamesr66a/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamesr66a/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamesr66a/subscriptions", "organizations_url": "https://api.github.com/users/jamesr66a/orgs", "repos_url": "https://api.github.com/users/jamesr66a/repos", "events_url": "https://api.github.com/users/jamesr66a/events{/privacy}", "received_events_url": "https://api.github.com/users/jamesr66a/received_events", "type": "User", "site_admin": false}, "html_url": "https://github.com/jamesr66a/pytorch", "description": "Tensors and Dynamic neural networks in Python  with strong GPU acceleration", "fork": true, "url": "https://api.github.com/repos/jamesr66a/pytorch", "forks_url": "https://api.github.com/repos/jamesr66a/pytorch/forks", "keys_url": "https://api.github.com/repos/jamesr66a/pytorch/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/jamesr66a/pytorch/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/jamesr66a/pytorch/teams", "hooks_url": "https://api.github.com/repos/jamesr66a/pytorch/hooks", "issue_events_url": "https://api.github.com/repos/jamesr66a/pytorch/issues/events{/number}", "events_url": "https://api.github.com/repos/jamesr66a/pytorch/events", "assignees_url": "https://api.github.com/repos/jamesr66a/pytorch/assignees{/user}", "branches_url": "https://api.github.com/repos/jamesr66a/pytorch/branches{/branch}", "tags_url": "https://api.github.com/repos/jamesr66a/pytorch/tags", "blobs_url": "https://api.github.com/repos/jamesr66a/pytorch/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/jamesr66a/pytorch/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/jamesr66a/pytorch/git/refs{/sha}", "trees_url": "https://api.github.com/repos/jamesr66a/pytorch/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/jamesr66a/pytorch/statuses/{sha}", "languages_url": "https://api.github.com/repos/jamesr66a/pytorch/languages", "stargazers_url": "https://api.github.com/repos/jamesr66a/pytorch/stargazers", "contributors_url": "https://api.github.com/repos/jamesr66a/pytorch/contributors", "subscribers_url": "https://api.github.com/repos/jamesr66a/pytorch/subscribers", "subscription_url": "https://api.github.com/repos/jamesr66a/pytorch/subscription", "commits_url": "https://api.github.com/repos/jamesr66a/pytorch/commits{/sha}", "git_commits_url": "https://api.github.com/repos/jamesr66a/pytorch/git/commits{/sha}", "comments_url": "https://api.github.com/repos/jamesr66a/pytorch/comments{/number}", "issue_comment_url": "https://api.github.com/repos/jamesr66a/pytorch/issues/comments{/number}", "contents_url": "https://api.github.com/repos/jamesr66a/pytorch/contents/{+path}", "compare_url": "https://api.github.com/repos/jamesr66a/pytorch/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/jamesr66a/pytorch/merges", "archive_url": "https://api.github.com/repos/jamesr66a/pytorch/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/jamesr66a/pytorch/downloads", "issues_url": "https://api.github.com/repos/jamesr66a/pytorch/issues{/number}", "pulls_url": "https://api.github.com/repos/jamesr66a/pytorch/pulls{/number}", "milestones_url": "https://api.github.com/repos/jamesr66a/pytorch/milestones{/number}", "notifications_url": "https://api.github.com/repos/jamesr66a/pytorch/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/jamesr66a/pytorch/labels{/name}", "releases_url": "https://api.github.com/repos/jamesr66a/pytorch/releases{/id}", "deployments_url": "https://api.github.com/repos/jamesr66a/pytorch/deployments", "created_at": "2017-10-25T17:06:33Z", "updated_at": "2018-08-06T22:44:22Z", "pushed_at": "2018-11-20T22:05:47Z", "git_url": "git://github.com/jamesr66a/pytorch.git", "ssh_url": "git@github.com:jamesr66a/pytorch.git", "clone_url": "https://github.com/jamesr66a/pytorch.git", "svn_url": "https://github.com/jamesr66a/pytorch", "homepage": "http://pytorch.org", "size": 87144, "stargazers_count": 0, "watchers_count": 0, "language": "C++", "has_issues": false, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 0, "mirror_url": null, "archived": false, "open_issues_count": 0, "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "forks": 0, "open_issues": 0, "watchers": 0, "default_branch": "master"}}, "base": {"label": "pytorch:master", "ref": "master", "sha": "f7b02b3a685a7721307c776f17dffda763966641", "user": {"login": "pytorch", "id": 21003710, "node_id": "MDEyOk9yZ2FuaXphdGlvbjIxMDAzNzEw", "avatar_url": "https://avatars3.githubusercontent.com/u/21003710?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pytorch", "html_url": "https://github.com/pytorch", "followers_url": "https://api.github.com/users/pytorch/followers", "following_url": "https://api.github.com/users/pytorch/following{/other_user}", "gists_url": "https://api.github.com/users/pytorch/gists{/gist_id}", "starred_url": "https://api.github.com/users/pytorch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pytorch/subscriptions", "organizations_url": "https://api.github.com/users/pytorch/orgs", "repos_url": "https://api.github.com/users/pytorch/repos", "events_url": "https://api.github.com/users/pytorch/events{/privacy}", "received_events_url": "https://api.github.com/users/pytorch/received_events", "type": "Organization", "site_admin": false}, "repo": {"id": 65600975, "node_id": "MDEwOlJlcG9zaXRvcnk2NTYwMDk3NQ==", "name": "pytorch", "full_name": "pytorch/pytorch", "private": false, "owner": {"login": "pytorch", "id": 21003710, "node_id": "MDEyOk9yZ2FuaXphdGlvbjIxMDAzNzEw", "avatar_url": "https://avatars3.githubusercontent.com/u/21003710?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pytorch", "html_url": "https://github.com/pytorch", "followers_url": "https://api.github.com/users/pytorch/followers", "following_url": "https://api.github.com/users/pytorch/following{/other_user}", "gists_url": "https://api.github.com/users/pytorch/gists{/gist_id}", "starred_url": "https://api.github.com/users/pytorch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pytorch/subscriptions", "organizations_url": "https://api.github.com/users/pytorch/orgs", "repos_url": "https://api.github.com/users/pytorch/repos", "events_url": "https://api.github.com/users/pytorch/events{/privacy}", "received_events_url": "https://api.github.com/users/pytorch/received_events", "type": "Organization", "site_admin": false}, "html_url": "https://github.com/pytorch/pytorch", "description": "Tensors and Dynamic neural networks in Python  with strong GPU acceleration", "fork": false, "url": "https://api.github.com/repos/pytorch/pytorch", "forks_url": "https://api.github.com/repos/pytorch/pytorch/forks", "keys_url": "https://api.github.com/repos/pytorch/pytorch/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/pytorch/pytorch/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/pytorch/pytorch/teams", "hooks_url": "https://api.github.com/repos/pytorch/pytorch/hooks", "issue_events_url": "https://api.github.com/repos/pytorch/pytorch/issues/events{/number}", "events_url": "https://api.github.com/repos/pytorch/pytorch/events", "assignees_url": "https://api.github.com/repos/pytorch/pytorch/assignees{/user}", "branches_url": "https://api.github.com/repos/pytorch/pytorch/branches{/branch}", "tags_url": "https://api.github.com/repos/pytorch/pytorch/tags", "blobs_url": "https://api.github.com/repos/pytorch/pytorch/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/pytorch/pytorch/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/pytorch/pytorch/git/refs{/sha}", "trees_url": "https://api.github.com/repos/pytorch/pytorch/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/pytorch/pytorch/statuses/{sha}", "languages_url": "https://api.github.com/repos/pytorch/pytorch/languages", "stargazers_url": "https://api.github.com/repos/pytorch/pytorch/stargazers", "contributors_url": "https://api.github.com/repos/pytorch/pytorch/contributors", "subscribers_url": "https://api.github.com/repos/pytorch/pytorch/subscribers", "subscription_url": "https://api.github.com/repos/pytorch/pytorch/subscription", "commits_url": "https://api.github.com/repos/pytorch/pytorch/commits{/sha}", "git_commits_url": "https://api.github.com/repos/pytorch/pytorch/git/commits{/sha}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/comments{/number}", "issue_comment_url": "https://api.github.com/repos/pytorch/pytorch/issues/comments{/number}", "contents_url": "https://api.github.com/repos/pytorch/pytorch/contents/{+path}", "compare_url": "https://api.github.com/repos/pytorch/pytorch/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/pytorch/pytorch/merges", "archive_url": "https://api.github.com/repos/pytorch/pytorch/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/pytorch/pytorch/downloads", "issues_url": "https://api.github.com/repos/pytorch/pytorch/issues{/number}", "pulls_url": "https://api.github.com/repos/pytorch/pytorch/pulls{/number}", "milestones_url": "https://api.github.com/repos/pytorch/pytorch/milestones{/number}", "notifications_url": "https://api.github.com/repos/pytorch/pytorch/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/pytorch/pytorch/labels{/name}", "releases_url": "https://api.github.com/repos/pytorch/pytorch/releases{/id}", "deployments_url": "https://api.github.com/repos/pytorch/pytorch/deployments", "created_at": "2016-08-13T05:26:41Z", "updated_at": "2018-11-24T12:35:43Z", "pushed_at": "2018-11-24T12:42:01Z", "git_url": "git://github.com/pytorch/pytorch.git", "ssh_url": "git@github.com:pytorch/pytorch.git", "clone_url": "https://github.com/pytorch/pytorch.git", "svn_url": "https://github.com/pytorch/pytorch", "homepage": "http://pytorch.org", "size": 89656, "stargazers_count": 21589, "watchers_count": 21589, "language": "C++", "has_issues": true, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 5153, "mirror_url": null, "archived": false, "open_issues_count": 2196, "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "forks": 5153, "open_issues": 2196, "watchers": 21589, "default_branch": "master"}}, "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/10841"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/10841"}, "issue": {"href": "https://api.github.com/repos/pytorch/pytorch/issues/10841"}, "comments": {"href": "https://api.github.com/repos/pytorch/pytorch/issues/10841/comments"}, "review_comments": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/10841/comments"}, "review_comment": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments{/number}"}, "commits": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/10841/commits"}, "statuses": {"href": "https://api.github.com/repos/pytorch/pytorch/statuses/dc008cc6bf20f723ea9b9f4e419e039aec3224d7"}}, "author_association": "CONTRIBUTOR", "body_html": "<p>TODO: integrate into torch.onnx.export -- separate PR</p>\n<p><em>Problem:</em> We have a facility to trace PyTorch operations on Python code, but there are several failure modes where the trace is not representative of the actual underlying computation:</p>\n<ul>\n<li>The tracer encountered dynamic control flow</li>\n<li>Some computation escaped the tracer, and appeared as a Constant tensor node in the graph</li>\n<li>Some stateful function was traced, e.g. someone did an optimization in Python by memoizing function outputs</li>\n</ul>\n<p><em>Objective</em>: In an ideal world, this whole process would be automated and the user can trust that the system will magically capture the intended semantics from the program. Realistically speaking, we will likely have to settle with a human-in-the-loop error reporting system, allowing for the user to identify problems and modify the source code to allow for tracing.</p>\n<p><em>Stage 1</em> (this PR): Output-level checking &amp; graph diff. torch.jit.trace gains a kwarg 'check_inputs', which is a list of tuples of input arguments. We will iterate through the list and trace the function again for each set of check inputs. We'll also interpret the original trace with these inputs and compare output values and graphs, printing a diff of the graph if there is a difference.</p>\n<p>Examples:</p>\n<pre><code>@torch.jit.trace(torch.rand(3, 4), check_inputs=[(torch.rand(4, 5),)])\ndef foo(x):\n    y = torch.arange(0, x.shape[0]).float()\n    return x + y.unsqueeze(1)\n</code></pre>\n<pre><code>torch.jit.TracingCheckError: Tracing failed sanity checks!\nERROR: Graphs differed across invocations!\n\tGraph diff:\n\t\t  graph(%0 : Dynamic) {\n\t\t-   %1 : Dynamic = prim::Constant[value= 0  1  2 [ CPULongType{3} ]]()\n\t\t?                                                              ^\n\t\t+   %1 : Dynamic = prim::Constant[value= 0  1  2  3 [ CPULongType{4} ]]()\n\t\t?                                                +++              ^\n\t\t    %2 : int = prim::Constant[value=0]()\n\t\t    %3 : Dynamic = aten::_cast_Float(%1, %2)\n\t\t    %4 : int = prim::Constant[value=1]()\n\t\t    %5 : Dynamic = aten::unsqueeze(%3, %4)\n\t\t    %6 : int = prim::Constant[value=1]()\n\t\t    %7 : Dynamic = aten::add(%0, %5, %6)\n\t\t    return (%7);\n\t\t  }\n\tNode diff:\n\t\t- %1 : Dynamic = prim::Constant[value= 0  1  2 [ CPULongType{3} ]]()\n\t\t?                                                            ^\n\t\t+ %1 : Dynamic = prim::Constant[value= 0  1  2  3 [ CPULongType{4} ]]()\n\t\t?                                              +++              ^\n\tTrace source location:\n\t\tdank.py(5): foo\n\t\t/Users/jamesreed/onnx-fairseq/pytorch/torch/jit/__init__.py(402): wrapper\n\t\tdank.py(3): &lt;module&gt;\n\tCheck source location:\n\t\tdank.py(5): foo\n\t\t/Users/jamesreed/onnx-fairseq/pytorch/torch/jit/__init__.py(281): check_trace\n\t\t/Users/jamesreed/onnx-fairseq/pytorch/torch/jit/__init__.py(408): wrapper\n\t\tdank.py(3): &lt;module&gt;\nERROR: Tensor-valued Constant nodes differed in value across invocations. This often indicates that the tracer has encountered untraceable code.\n\tNode:\n\t\t%1 : Dynamic = prim::Constant[value= 0  1  2 [ CPULongType{3} ]]()\n\tSource Location:\n\t\tdank.py(5): foo\n\t\t/Users/jamesreed/onnx-fairseq/pytorch/torch/jit/__init__.py(402): wrapper\n\t\tdank.py(3): &lt;module&gt;\n\tComparison exception:\n\t\tNot equal to tolerance rtol=1e-07, atol=0\n\n\t\t(shapes (3,), (4,) mismatch)\n\t\t x: array([0, 1, 2])\n\t\t y: array([0, 1, 2, 3])\n\n</code></pre>\n<p>==</p>\n<pre><code>@torch.jit.trace(torch.rand(3, 4), check_inputs=[(torch.rand(3, 4),)])\ndef foo(x):\n    y = x.data\n    return x + y\n</code></pre>\n<pre><code>torch.jit.TracingCheckError: Tracing failed sanity checks!\nERROR: Traced function outputs do not match the Python function outputs.\nERROR: Tensor-valued Constant nodes differed in value across invocations. This often indicates that the tracer has encountered untraceable code.\n\tNode:\n\t\t%1 : Dynamic = prim::Constant[value=&lt;Tensor&gt;]()\n\tSource Location:\n\t\tdank.py(6): foo\n\t\t/Users/jamesreed/onnx-fairseq/pytorch/torch/jit/__init__.py(402): wrapper\n\t\tdank.py(3): &lt;module&gt;\n\tComparison exception:\n\t\tNot equal to tolerance rtol=1e-07, atol=0\n\n\t\t(mismatch 100.0%)\n\t\t x: array([0.397137, 0.956105, 0.169478, 0.560292, 0.392568, 0.108441,\n\t\t       0.97645 , 0.34412 , 0.951246, 0.793061, 0.557595, 0.770245],\n\t\t      dtype=float32)\n\t\t y: array([0.243178, 0.315964, 0.972041, 0.0215  , 0.927751, 0.457512,\n\t\t       0.951092, 0.97883 , 0.048688, 0.118066, 0.779345, 0.271272],\n\t\t      dtype=float32)\n</code></pre>\n<p>==</p>\n<pre><code>import torch\n\n@torch.jit.trace(torch.rand(3, 4), check_inputs=[(torch.rand(4, 4),)])\ndef foo(x):\n    for _ in range(x.size(0)):\n        x = torch.neg(x)\n    return x\n</code></pre>\n<pre><code>torch.jit.TracingCheckError: Tracing failed sanity checks!\nERROR: Traced function outputs do not match the Python function outputs.\nERROR: Graphs differed across invocations!\n\tGraph diff:\n\t\t  graph(%0 : Dynamic) {\n\t\t    %1 : Dynamic = aten::neg(%0)\n\t\t    %2 : Dynamic = aten::neg(%1)\n\t\t    %3 : Dynamic = aten::neg(%2)\n\t\t+   %4 : Dynamic = aten::neg(%3)\n\t\t-   return (%3);\n\t\t?            ^\n\t\t+   return (%4);\n\t\t?            ^\n\t\t  }\n</code></pre>\n<p>==</p>\n<pre><code>import torch\n\ndef foo(x):\n    if not hasattr(foo, 'cache'):\n        foo.cache = torch.neg(x)\n    return x + foo.cache\n\ntraced = torch.jit.trace(torch.rand(3, 4), check_inputs=[(torch.rand(3, 4),)])(foo)\n</code></pre>\n<pre><code>torch.jit.TracingCheckError: Tracing failed sanity checks!\nERROR: Traced function outputs do not match the Python function outputs.\nERROR: Graphs differed across invocations!\n\tGraph diff:\n\t\t  graph(%0 : Dynamic) {\n\t\t-   %1 : Dynamic = aten::neg(%0)\n\t\t+   %1 : Dynamic = prim::Constant[value=&lt;Tensor&gt;]()\n\t\t    %2 : int = prim::Constant[value=1]()\n\t\t    %3 : Dynamic = aten::add(%0, %1, %2)\n\t\t    return (%3);\n\t\t  }\n\tNode diff:\n\t\t- %1 : Dynamic = aten::neg(%0)\n\t\t+ %1 : Dynamic = prim::Constant[value=&lt;Tensor&gt;]()\n\tTrace source location:\n\t\ttest.py(5): foo\n\t\t/Users/jamesreed/onnx-fairseq/pytorch/torch/jit/__init__.py(402): wrapper\n\t\ttest.py(8): &lt;module&gt;\n\tCheck source location:\n\t\ttest.py(6): foo\n\t\t/Users/jamesreed/onnx-fairseq/pytorch/torch/jit/__init__.py(281): check_trace\n\t\t/Users/jamesreed/onnx-fairseq/pytorch/torch/jit/__init__.py(408): wrapper\n\t\ttest.py(8): &lt;module&gt;\n</code></pre>\n<p>The following two examples show instances where program semantics are lost in the Python -&gt; trace transformation, and repeated invocation does not give us useful debug information. Further design in underway for catching these scenarios.</p>\n<pre><code>import torch\n\n@torch.jit.trace(torch.rand(3, 4), check_inputs=[(torch.rand(3, 4),)])\ndef foo(x):\n    for i in range(3):\n        x[i, :] = torch.zeros(4)\n    return x\n</code></pre>\n<pre><code>torch.jit.TracingCheckError: Tracing failed sanity checks!\nERROR: Traced function outputs do not match the Python function outputs.\nException:\nNot equal to tolerance rtol=1e-07, atol=0\n\n(mismatch 100.0%)\n x: array([0.830221, 0.915481, 0.940281, 0.555241], dtype=float32)\n y: array([0., 0., 0., 0.], dtype=float32)\n</code></pre>\n<p>==</p>\n<pre><code>import torch\n\n@torch.jit.trace(torch.rand(3, 4), check_inputs=[(torch.rand(5, 6),)])\ndef foo(x):\n    x.view(-1).add_(-x.view(-1))\n    return x\n</code></pre>\n<pre><code>torch.jit.TracingCheckError: Tracing failed sanity checks!\nERROR: Traced function outputs do not match the Python function outputs.\nException:\nNot equal to tolerance rtol=1e-07, atol=0\n\n(mismatch 100.0%)\n x: array([0.734441, 0.445327, 0.640592, 0.30076 , 0.891674, 0.124771],\n      dtype=float32)\n y: array([0., 0., 0., 0., 0., 0.], dtype=float32)\n</code></pre>", "body_text": "TODO: integrate into torch.onnx.export -- separate PR\nProblem: We have a facility to trace PyTorch operations on Python code, but there are several failure modes where the trace is not representative of the actual underlying computation:\n\nThe tracer encountered dynamic control flow\nSome computation escaped the tracer, and appeared as a Constant tensor node in the graph\nSome stateful function was traced, e.g. someone did an optimization in Python by memoizing function outputs\n\nObjective: In an ideal world, this whole process would be automated and the user can trust that the system will magically capture the intended semantics from the program. Realistically speaking, we will likely have to settle with a human-in-the-loop error reporting system, allowing for the user to identify problems and modify the source code to allow for tracing.\nStage 1 (this PR): Output-level checking & graph diff. torch.jit.trace gains a kwarg 'check_inputs', which is a list of tuples of input arguments. We will iterate through the list and trace the function again for each set of check inputs. We'll also interpret the original trace with these inputs and compare output values and graphs, printing a diff of the graph if there is a difference.\nExamples:\n@torch.jit.trace(torch.rand(3, 4), check_inputs=[(torch.rand(4, 5),)])\ndef foo(x):\n    y = torch.arange(0, x.shape[0]).float()\n    return x + y.unsqueeze(1)\n\ntorch.jit.TracingCheckError: Tracing failed sanity checks!\nERROR: Graphs differed across invocations!\n\tGraph diff:\n\t\t  graph(%0 : Dynamic) {\n\t\t-   %1 : Dynamic = prim::Constant[value= 0  1  2 [ CPULongType{3} ]]()\n\t\t?                                                              ^\n\t\t+   %1 : Dynamic = prim::Constant[value= 0  1  2  3 [ CPULongType{4} ]]()\n\t\t?                                                +++              ^\n\t\t    %2 : int = prim::Constant[value=0]()\n\t\t    %3 : Dynamic = aten::_cast_Float(%1, %2)\n\t\t    %4 : int = prim::Constant[value=1]()\n\t\t    %5 : Dynamic = aten::unsqueeze(%3, %4)\n\t\t    %6 : int = prim::Constant[value=1]()\n\t\t    %7 : Dynamic = aten::add(%0, %5, %6)\n\t\t    return (%7);\n\t\t  }\n\tNode diff:\n\t\t- %1 : Dynamic = prim::Constant[value= 0  1  2 [ CPULongType{3} ]]()\n\t\t?                                                            ^\n\t\t+ %1 : Dynamic = prim::Constant[value= 0  1  2  3 [ CPULongType{4} ]]()\n\t\t?                                              +++              ^\n\tTrace source location:\n\t\tdank.py(5): foo\n\t\t/Users/jamesreed/onnx-fairseq/pytorch/torch/jit/__init__.py(402): wrapper\n\t\tdank.py(3): <module>\n\tCheck source location:\n\t\tdank.py(5): foo\n\t\t/Users/jamesreed/onnx-fairseq/pytorch/torch/jit/__init__.py(281): check_trace\n\t\t/Users/jamesreed/onnx-fairseq/pytorch/torch/jit/__init__.py(408): wrapper\n\t\tdank.py(3): <module>\nERROR: Tensor-valued Constant nodes differed in value across invocations. This often indicates that the tracer has encountered untraceable code.\n\tNode:\n\t\t%1 : Dynamic = prim::Constant[value= 0  1  2 [ CPULongType{3} ]]()\n\tSource Location:\n\t\tdank.py(5): foo\n\t\t/Users/jamesreed/onnx-fairseq/pytorch/torch/jit/__init__.py(402): wrapper\n\t\tdank.py(3): <module>\n\tComparison exception:\n\t\tNot equal to tolerance rtol=1e-07, atol=0\n\n\t\t(shapes (3,), (4,) mismatch)\n\t\t x: array([0, 1, 2])\n\t\t y: array([0, 1, 2, 3])\n\n\n==\n@torch.jit.trace(torch.rand(3, 4), check_inputs=[(torch.rand(3, 4),)])\ndef foo(x):\n    y = x.data\n    return x + y\n\ntorch.jit.TracingCheckError: Tracing failed sanity checks!\nERROR: Traced function outputs do not match the Python function outputs.\nERROR: Tensor-valued Constant nodes differed in value across invocations. This often indicates that the tracer has encountered untraceable code.\n\tNode:\n\t\t%1 : Dynamic = prim::Constant[value=<Tensor>]()\n\tSource Location:\n\t\tdank.py(6): foo\n\t\t/Users/jamesreed/onnx-fairseq/pytorch/torch/jit/__init__.py(402): wrapper\n\t\tdank.py(3): <module>\n\tComparison exception:\n\t\tNot equal to tolerance rtol=1e-07, atol=0\n\n\t\t(mismatch 100.0%)\n\t\t x: array([0.397137, 0.956105, 0.169478, 0.560292, 0.392568, 0.108441,\n\t\t       0.97645 , 0.34412 , 0.951246, 0.793061, 0.557595, 0.770245],\n\t\t      dtype=float32)\n\t\t y: array([0.243178, 0.315964, 0.972041, 0.0215  , 0.927751, 0.457512,\n\t\t       0.951092, 0.97883 , 0.048688, 0.118066, 0.779345, 0.271272],\n\t\t      dtype=float32)\n\n==\nimport torch\n\n@torch.jit.trace(torch.rand(3, 4), check_inputs=[(torch.rand(4, 4),)])\ndef foo(x):\n    for _ in range(x.size(0)):\n        x = torch.neg(x)\n    return x\n\ntorch.jit.TracingCheckError: Tracing failed sanity checks!\nERROR: Traced function outputs do not match the Python function outputs.\nERROR: Graphs differed across invocations!\n\tGraph diff:\n\t\t  graph(%0 : Dynamic) {\n\t\t    %1 : Dynamic = aten::neg(%0)\n\t\t    %2 : Dynamic = aten::neg(%1)\n\t\t    %3 : Dynamic = aten::neg(%2)\n\t\t+   %4 : Dynamic = aten::neg(%3)\n\t\t-   return (%3);\n\t\t?            ^\n\t\t+   return (%4);\n\t\t?            ^\n\t\t  }\n\n==\nimport torch\n\ndef foo(x):\n    if not hasattr(foo, 'cache'):\n        foo.cache = torch.neg(x)\n    return x + foo.cache\n\ntraced = torch.jit.trace(torch.rand(3, 4), check_inputs=[(torch.rand(3, 4),)])(foo)\n\ntorch.jit.TracingCheckError: Tracing failed sanity checks!\nERROR: Traced function outputs do not match the Python function outputs.\nERROR: Graphs differed across invocations!\n\tGraph diff:\n\t\t  graph(%0 : Dynamic) {\n\t\t-   %1 : Dynamic = aten::neg(%0)\n\t\t+   %1 : Dynamic = prim::Constant[value=<Tensor>]()\n\t\t    %2 : int = prim::Constant[value=1]()\n\t\t    %3 : Dynamic = aten::add(%0, %1, %2)\n\t\t    return (%3);\n\t\t  }\n\tNode diff:\n\t\t- %1 : Dynamic = aten::neg(%0)\n\t\t+ %1 : Dynamic = prim::Constant[value=<Tensor>]()\n\tTrace source location:\n\t\ttest.py(5): foo\n\t\t/Users/jamesreed/onnx-fairseq/pytorch/torch/jit/__init__.py(402): wrapper\n\t\ttest.py(8): <module>\n\tCheck source location:\n\t\ttest.py(6): foo\n\t\t/Users/jamesreed/onnx-fairseq/pytorch/torch/jit/__init__.py(281): check_trace\n\t\t/Users/jamesreed/onnx-fairseq/pytorch/torch/jit/__init__.py(408): wrapper\n\t\ttest.py(8): <module>\n\nThe following two examples show instances where program semantics are lost in the Python -> trace transformation, and repeated invocation does not give us useful debug information. Further design in underway for catching these scenarios.\nimport torch\n\n@torch.jit.trace(torch.rand(3, 4), check_inputs=[(torch.rand(3, 4),)])\ndef foo(x):\n    for i in range(3):\n        x[i, :] = torch.zeros(4)\n    return x\n\ntorch.jit.TracingCheckError: Tracing failed sanity checks!\nERROR: Traced function outputs do not match the Python function outputs.\nException:\nNot equal to tolerance rtol=1e-07, atol=0\n\n(mismatch 100.0%)\n x: array([0.830221, 0.915481, 0.940281, 0.555241], dtype=float32)\n y: array([0., 0., 0., 0.], dtype=float32)\n\n==\nimport torch\n\n@torch.jit.trace(torch.rand(3, 4), check_inputs=[(torch.rand(5, 6),)])\ndef foo(x):\n    x.view(-1).add_(-x.view(-1))\n    return x\n\ntorch.jit.TracingCheckError: Tracing failed sanity checks!\nERROR: Traced function outputs do not match the Python function outputs.\nException:\nNot equal to tolerance rtol=1e-07, atol=0\n\n(mismatch 100.0%)\n x: array([0.734441, 0.445327, 0.640592, 0.30076 , 0.891674, 0.124771],\n      dtype=float32)\n y: array([0., 0., 0., 0., 0., 0.], dtype=float32)", "merged": false, "mergeable": null, "rebaseable": null, "mergeable_state": "unknown", "merged_by": null, "comments": 1, "review_comments": 33, "maintainer_can_modify": false, "commits": 10, "additions": 370, "deletions": 30, "changed_files": 23}