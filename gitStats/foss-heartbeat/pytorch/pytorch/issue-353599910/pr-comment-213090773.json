{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/213090773", "pull_request_review_id": 149854056, "id": 213090773, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMzA5MDc3Mw==", "diff_hunk": "@@ -5998,6 +5998,70 @@ def forward(self, x):\n             FooMod(), (torch.rand(3, 4),), f,\n             operator_export_type=OperatorExportTypes.ONNX_ATEN_FALLBACK))\n \n+    def test_trace_checker_arange_as_constant(self):\n+        with self.assertRaisesRegex(torch.jit.TracingCheckError, r'Graphs differed across invocations!'):\n+            @torch.jit.trace(torch.rand(3, 4), check_inputs=[(torch.rand(4, 5),)])\n+            def foo(x):\n+                y = torch.arange(0, x.shape[0]).double()\n+                return x + y.unsqueeze(1)\n+\n+    def test_trace_checker_dot_data(self):\n+        with self.assertRaisesRegex(torch.jit.TracingCheckError, r'Tensor-valued Constant nodes differed in value '\n+                                                                 r'across invocations'):\n+            @torch.jit.trace(torch.rand(3, 4), check_inputs=[(torch.rand(3, 4),)])\n+            def foo(x):\n+                y = x.data\n+                return x + y\n+\n+    def test_trace_checker_control_flow(self):\n+        with self.assertRaisesRegex(torch.jit.TracingCheckError, r'Graphs differed across invocations!'):\n+            @torch.jit.trace(torch.rand(3, 4), check_inputs=[(torch.rand(4, 4),)])\n+            def foo(x):\n+                for _ in range(x.size(0)):\n+                    x = torch.neg(x)\n+                return x\n+\n+    def test_trace_checker_memoization(self):\n+        with self.assertRaisesRegex(torch.jit.TracingCheckError, r'Graphs differed across invocations!'):\n+            def foo(x):\n+                if not hasattr(foo, 'cache'):\n+                    foo.cache = torch.neg(x)\n+                return x + foo.cache\n+\n+            traced = torch.jit.trace(torch.rand(3, 4), check_inputs=[(torch.rand(3, 4),)])(foo)\n+\n+    def test_trace_checker_slice_lhs(self):\n+        with self.assertRaisesRegex(torch.jit.TracingCheckError, r'Traced function outputs do not match the Python'\n+                                                                 r' function outputs'):\n+            @torch.jit.trace(torch.rand(3, 4), check_inputs=[(torch.rand(3, 4),)])\n+            def foo(x):\n+                for i in range(3):\n+                    x[i, :] = torch.zeros(4)\n+                return x\n+\n+    def test_trace_checker_inplace_on_view(self):\n+        with self.assertRaisesRegex(torch.jit.TracingCheckError, r'Traced function outputs do not match the Python'\n+                                                                 r' function outputs'):\n+            @torch.jit.trace(torch.rand(3, 4), check_inputs=[(torch.rand(5, 6),)])\n+            def foo(x):\n+                x.view(-1).add_(-x.view(-1))\n+                return x\n+\n+    def test_trace_checker_dropout_train(self):\n+        with self.assertRaisesRegex(torch.jit.TracingCheckError, r'Trace had nondeterministic nodes'):\n+            @torch.jit.trace(torch.rand(3, 4))\n+            def foo(x):\n+                return torch.dropout(x, p=0.5, train=True)\n+\n+    def test_trace_checker_dropout_notrain(self):\n+        input = torch.rand(3, 4)\n+\n+        @torch.jit.trace(input)\n+        def foo(x):\n+            return torch.dropout(x, p=0.5, train=False)\n+\n+        np.testing.assert_allclose(foo(input), input)", "path": "test/test_jit.py", "position": null, "original_position": 165, "commit_id": "dc008cc6bf20f723ea9b9f4e419e039aec3224d7", "original_commit_id": "dd7bd71c4f7272b568d007a717477da7c86f5b0a", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "`self.assertEqual`", "created_at": "2018-08-27T19:41:41Z", "updated_at": "2018-11-23T15:50:05Z", "html_url": "https://github.com/pytorch/pytorch/pull/10841#discussion_r213090773", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/10841", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/213090773"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/10841#discussion_r213090773"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/10841"}}, "body_html": "<p><code>self.assertEqual</code></p>", "body_text": "self.assertEqual"}