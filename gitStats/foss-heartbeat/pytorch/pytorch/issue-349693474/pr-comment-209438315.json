{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/209438315", "pull_request_review_id": 145457935, "id": 209438315, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQzODMxNQ==", "diff_hunk": "@@ -241,6 +223,53 @@ def apply(self, fn):\n         fn(self)\n         return self\n \n+    def apply_data(self, fn, to_parameters=True, to_gradients=True, to_buffers=True, recursive=True):\n+        r\"\"\"Applies ``fn`` to the various tensors within the module.\n+\n+        This method differs from ``apply()`` in that it acts on the tensors of\n+        the module rather than the module itself.\n+\n+        Args:\n+            fn (:class:`Tensor` -> None): function to be applied to each tensor.\n+            to_parameters (bool): whether to apply the function to parameters.\n+            to_gradients (bool): whether to apply the function to parameter gradients.\n+            to_buffers (bool): whether to apply the function to parameter buffers.\n+            recursive (bool): whether to apply the function to all submodules.\n+\n+        Returns:\n+            Module: self\n+\n+        Example:\n+            # Equivalent to module.half()\n+            module.apply_data(lambda t: t.half() if t.is_floating_point() else t)\n+        \"\"\"\n+        if recursive:\n+            for module in self.children():\n+                module.apply_data(fn)\n+\n+        for param in self._parameters.values():\n+            if param is not None and to_parameters:\n+                # Tensors stored in modules are graph leaves, and we don't\n+                # want to create copy nodes, so we have to unpack the data.\n+                param.data = fn(param.data)", "path": "torch/nn/modules/module.py", "position": null, "original_position": 57, "commit_id": "ead08ec98a69f8dceec2d2d09ec3d7c463309c99", "original_commit_id": "b4b64f84e002fc16fa833411ffb128ba93a81739", "user": {"login": "jma127", "id": 2780434, "node_id": "MDQ6VXNlcjI3ODA0MzQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/2780434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jma127", "html_url": "https://github.com/jma127", "followers_url": "https://api.github.com/users/jma127/followers", "following_url": "https://api.github.com/users/jma127/following{/other_user}", "gists_url": "https://api.github.com/users/jma127/gists{/gist_id}", "starred_url": "https://api.github.com/users/jma127/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jma127/subscriptions", "organizations_url": "https://api.github.com/users/jma127/orgs", "repos_url": "https://api.github.com/users/jma127/repos", "events_url": "https://api.github.com/users/jma127/events{/privacy}", "received_events_url": "https://api.github.com/users/jma127/received_events", "type": "User", "site_admin": false}, "body": "Thanks for flagging, will fix.", "created_at": "2018-08-11T21:48:53Z", "updated_at": "2018-11-23T15:49:08Z", "html_url": "https://github.com/pytorch/pytorch/pull/10429#discussion_r209438315", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/10429", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/209438315"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/10429#discussion_r209438315"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/10429"}}, "body_html": "<p>Thanks for flagging, will fix.</p>", "body_text": "Thanks for flagging, will fix.", "in_reply_to_id": 209437604}