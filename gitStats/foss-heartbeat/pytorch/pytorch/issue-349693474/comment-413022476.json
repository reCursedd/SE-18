{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/413022476", "html_url": "https://github.com/pytorch/pytorch/pull/10429#issuecomment-413022476", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/10429", "id": 413022476, "node_id": "MDEyOklzc3VlQ29tbWVudDQxMzAyMjQ3Ng==", "user": {"login": "jma127", "id": 2780434, "node_id": "MDQ6VXNlcjI3ODA0MzQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/2780434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jma127", "html_url": "https://github.com/jma127", "followers_url": "https://api.github.com/users/jma127/followers", "following_url": "https://api.github.com/users/jma127/following{/other_user}", "gists_url": "https://api.github.com/users/jma127/gists{/gist_id}", "starred_url": "https://api.github.com/users/jma127/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jma127/subscriptions", "organizations_url": "https://api.github.com/users/jma127/orgs", "repos_url": "https://api.github.com/users/jma127/repos", "events_url": "https://api.github.com/users/jma127/events{/privacy}", "received_events_url": "https://api.github.com/users/jma127/received_events", "type": "User", "site_admin": false}, "created_at": "2018-08-14T21:29:21Z", "updated_at": "2018-08-14T21:29:21Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=5674597\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/SsnL\">@SsnL</a> I don't think conversion behavior should be a part of the module definition. Some users may be happy (and in fact, may prefer) 16b-quantized floats, some users may want the original floats, etc. Rather than enforcing one-off conversion behavior for specific modules, I think we should make the default behavior consistent and predictable (i.e. <code>half()</code> will give you a fully fp16 module no matter what). If you want anything fancier, you can be explicit by manually iterating through the individual submodules and specifying exactly what conversion you want to perform (as in the provided example).</p>", "body_text": "@SsnL I don't think conversion behavior should be a part of the module definition. Some users may be happy (and in fact, may prefer) 16b-quantized floats, some users may want the original floats, etc. Rather than enforcing one-off conversion behavior for specific modules, I think we should make the default behavior consistent and predictable (i.e. half() will give you a fully fp16 module no matter what). If you want anything fancier, you can be explicit by manually iterating through the individual submodules and specifying exactly what conversion you want to perform (as in the provided example).", "body": "@SsnL I don't think conversion behavior should be a part of the module definition. Some users may be happy (and in fact, may prefer) 16b-quantized floats, some users may want the original floats, etc. Rather than enforcing one-off conversion behavior for specific modules, I think we should make the default behavior consistent and predictable (i.e. ``half()`` will give you a fully fp16 module no matter what). If you want anything fancier, you can be explicit by manually iterating through the individual submodules and specifying exactly what conversion you want to perform (as in the provided example)."}