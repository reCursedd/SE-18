{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/210161228", "pull_request_review_id": 146319040, "id": 210161228, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMDE2MTIyOA==", "diff_hunk": "@@ -241,6 +223,69 @@ def apply(self, fn):\n         fn(self)\n         return self\n \n+    def apply_tensor(self, fn, to_parameters=True, to_gradients=True,\n+                     to_buffers=True, recursive=True):\n+        r\"\"\"Applies ``fn`` to the various tensors within the module.\n+\n+        This method differs from ``apply()`` in that it acts on the tensors\n+        of the module rather than the module itself.\n+\n+        Specifically, the method will apply the given function to\n+        tensor members, after detaching and with version tracking disabled\n+        (i.e. on ``.data``).\n+\n+        Args:\n+            fn (:class:`Tensor` -> :class:`Tensor`):\n+                function to be applied to each tensor, returning the\n+                desired new value of the tensor.\n+            to_parameters (bool):\n+                whether to apply the function to parameters.\n+            to_gradients (bool):\n+                whether to apply the function to parameter gradients.\n+            to_buffers (bool):\n+                whether to apply the function to buffers.\n+            recursive (bool):\n+                whether to apply the function to tensors in\n+                all submodules.\n+\n+        Returns:\n+            Module: self\n+\n+        Example:\n+            # Converts model's non-batchnorm parameters to half precision.\n+            for m in model.modules()\n+                if isinstance(m, torch.nn.modules.batchnorm._BatchNorm):\n+                    continue\n+                m.apply_tensor((lambda t: t.half() if t.is_floating_point() else t),\n+                               recursive=False)\n+        \"\"\"\n+        if recursive:\n+            for module in self.children():\n+                module.apply_tensor(fn)\n+\n+        for param in self._parameters.values():\n+            if param is not None and to_parameters:\n+                # Tensors stored in modules are graph leaves, and we don't\n+                # want to create copy nodes, so we have to unpack the data.\n+                param.data = fn(param.data)\n+            if param is not None and param._grad is not None and to_gradients:\n+                # Tensors stored in modules are graph leaves, and we don't\n+                # want to create copy nodes, so we have to unpack the data.\n+                param._grad.data = fn(param._grad.data)\n+\n+        for key, buf in self._buffers.items():\n+            if buf is not None and to_buffers:", "path": "torch/nn/modules/module.py", "position": null, "original_position": 80, "commit_id": "ead08ec98a69f8dceec2d2d09ec3d7c463309c99", "original_commit_id": "66e552d9147f83ad6594b96febe5c49de4b01bce", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "Hoist the `to_buffers` check outside of the loop", "created_at": "2018-08-15T03:09:23Z", "updated_at": "2018-11-23T15:49:22Z", "html_url": "https://github.com/pytorch/pytorch/pull/10429#discussion_r210161228", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/10429", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/210161228"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/10429#discussion_r210161228"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/10429"}}, "body_html": "<p>Hoist the <code>to_buffers</code> check outside of the loop</p>", "body_text": "Hoist the to_buffers check outside of the loop"}