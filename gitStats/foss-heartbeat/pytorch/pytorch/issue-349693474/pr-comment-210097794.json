{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/210097794", "pull_request_review_id": 146157556, "id": 210097794, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMDA5Nzc5NA==", "diff_hunk": "@@ -241,6 +223,69 @@ def apply(self, fn):\n         fn(self)\n         return self\n \n+    def apply_tensor(self, fn, to_parameters=True, to_gradients=True,\n+                     to_buffers=True, recursive=True):\n+        r\"\"\"Applies ``fn`` to the various tensors within the module.\n+\n+        This method differs from ``apply()`` in that it acts on the tensors\n+        of the module rather than the module itself.\n+\n+        Specifically, the method will apply the given function to\n+        tensor members, after detaching and with version tracking disabled\n+        (i.e. on ``.data``).\n+\n+        Args:\n+            fn (:class:`Tensor` -> :class:`Tensor`):\n+                function to be applied to each tensor, returning the\n+                desired new value of the tensor.\n+            to_parameters (bool):\n+                whether to apply the function to parameters.\n+            to_gradients (bool):\n+                whether to apply the function to parameter gradients.\n+            to_buffers (bool):\n+                whether to apply the function to buffers.\n+            recursive (bool):\n+                whether to apply the function to tensors in\n+                all submodules.\n+\n+        Returns:\n+            Module: self\n+\n+        Example:\n+            # Converts model's non-batchnorm parameters to half precision.", "path": "torch/nn/modules/module.py", "position": null, "original_position": 58, "commit_id": "ead08ec98a69f8dceec2d2d09ec3d7c463309c99", "original_commit_id": "66e552d9147f83ad6594b96febe5c49de4b01bce", "user": {"login": "SsnL", "id": 5674597, "node_id": "MDQ6VXNlcjU2NzQ1OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5674597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SsnL", "html_url": "https://github.com/SsnL", "followers_url": "https://api.github.com/users/SsnL/followers", "following_url": "https://api.github.com/users/SsnL/following{/other_user}", "gists_url": "https://api.github.com/users/SsnL/gists{/gist_id}", "starred_url": "https://api.github.com/users/SsnL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SsnL/subscriptions", "organizations_url": "https://api.github.com/users/SsnL/orgs", "repos_url": "https://api.github.com/users/SsnL/repos", "events_url": "https://api.github.com/users/SsnL/events{/privacy}", "received_events_url": "https://api.github.com/users/SsnL/received_events", "type": "User", "site_admin": false}, "body": "The example format should be consistent with other examples we have, e.g., prefix with >>> and others. See https://github.com/pytorch/pytorch/blob/master/torch/nn/modules/module.py#L214 for an example.", "created_at": "2018-08-14T20:46:22Z", "updated_at": "2018-11-23T15:49:20Z", "html_url": "https://github.com/pytorch/pytorch/pull/10429#discussion_r210097794", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/10429", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/210097794"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/10429#discussion_r210097794"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/10429"}}, "body_html": "<p>The example format should be consistent with other examples we have, e.g., prefix with &gt;&gt;&gt; and others. See <a href=\"https://github.com/pytorch/pytorch/blob/master/torch/nn/modules/module.py#L214\">https://github.com/pytorch/pytorch/blob/master/torch/nn/modules/module.py#L214</a> for an example.</p>", "body_text": "The example format should be consistent with other examples we have, e.g., prefix with >>> and others. See https://github.com/pytorch/pytorch/blob/master/torch/nn/modules/module.py#L214 for an example."}