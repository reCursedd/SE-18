{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/413086672", "html_url": "https://github.com/pytorch/pytorch/pull/10429#issuecomment-413086672", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/10429", "id": 413086672, "node_id": "MDEyOklzc3VlQ29tbWVudDQxMzA4NjY3Mg==", "user": {"login": "jma127", "id": 2780434, "node_id": "MDQ6VXNlcjI3ODA0MzQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/2780434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jma127", "html_url": "https://github.com/jma127", "followers_url": "https://api.github.com/users/jma127/followers", "following_url": "https://api.github.com/users/jma127/following{/other_user}", "gists_url": "https://api.github.com/users/jma127/gists{/gist_id}", "starred_url": "https://api.github.com/users/jma127/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jma127/subscriptions", "organizations_url": "https://api.github.com/users/jma127/orgs", "repos_url": "https://api.github.com/users/jma127/repos", "events_url": "https://api.github.com/users/jma127/events{/privacy}", "received_events_url": "https://api.github.com/users/jma127/received_events", "type": "User", "site_admin": false}, "created_at": "2018-08-15T03:52:51Z", "updated_at": "2018-08-15T03:52:51Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=5674597\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/SsnL\">@SsnL</a> I considered that exact thing (i.e. some <code>iter_tensors</code> method). The problem I envisioned was that you can't perform certain operations on tensors in-place (certainly not something like <code>half()</code>).</p>\n<p>The additional functionality that <code>apply_tensor</code> provides over something like <code>iter_tensor</code> is to support these non-inplace operations.</p>", "body_text": "@SsnL I considered that exact thing (i.e. some iter_tensors method). The problem I envisioned was that you can't perform certain operations on tensors in-place (certainly not something like half()).\nThe additional functionality that apply_tensor provides over something like iter_tensor is to support these non-inplace operations.", "body": "@SsnL I considered that exact thing (i.e. some ``iter_tensors`` method). The problem I envisioned was that you can't perform certain operations on tensors in-place (certainly not something like ``half()``).\r\n\r\nThe additional functionality that ``apply_tensor`` provides over something like ``iter_tensor`` is to support these non-inplace operations."}