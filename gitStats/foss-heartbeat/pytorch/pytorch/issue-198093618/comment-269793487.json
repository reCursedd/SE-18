{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/269793487", "html_url": "https://github.com/pytorch/pytorch/pull/375#issuecomment-269793487", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/375", "id": 269793487, "node_id": "MDEyOklzc3VlQ29tbWVudDI2OTc5MzQ4Nw==", "user": {"login": "alykhantejani", "id": 687194, "node_id": "MDQ6VXNlcjY4NzE5NA==", "avatar_url": "https://avatars1.githubusercontent.com/u/687194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alykhantejani", "html_url": "https://github.com/alykhantejani", "followers_url": "https://api.github.com/users/alykhantejani/followers", "following_url": "https://api.github.com/users/alykhantejani/following{/other_user}", "gists_url": "https://api.github.com/users/alykhantejani/gists{/gist_id}", "starred_url": "https://api.github.com/users/alykhantejani/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alykhantejani/subscriptions", "organizations_url": "https://api.github.com/users/alykhantejani/orgs", "repos_url": "https://api.github.com/users/alykhantejani/repos", "events_url": "https://api.github.com/users/alykhantejani/events{/privacy}", "received_events_url": "https://api.github.com/users/alykhantejani/received_events", "type": "User", "site_admin": false}, "created_at": "2016-12-30T16:48:10Z", "updated_at": "2016-12-30T16:48:10Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Ah cool, did not know that autograd would handle the permutations. As long as the following test passed:</p>\n<pre><code>        input = Variable(torch.Tensor(batch_size, channels, height, width).uniform_(), requires_grad=True)\n        ps = nn.PixelShuffle(upscale_factor)\n        output = ps(input)\n        output.backward(output.data)\n        self.assertEqual(input.data, input.grad)\n</code></pre>\n<p>i.e. the <code>input == backwards(forwards(input))</code> then it LGTM.</p>\n<p>This test is already in <code>test_nn</code> so that means it should work fine with autograd. Nice spot <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=655866\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/colesbury\">@colesbury</a></p>", "body_text": "Ah cool, did not know that autograd would handle the permutations. As long as the following test passed:\n        input = Variable(torch.Tensor(batch_size, channels, height, width).uniform_(), requires_grad=True)\n        ps = nn.PixelShuffle(upscale_factor)\n        output = ps(input)\n        output.backward(output.data)\n        self.assertEqual(input.data, input.grad)\n\ni.e. the input == backwards(forwards(input)) then it LGTM.\nThis test is already in test_nn so that means it should work fine with autograd. Nice spot @colesbury", "body": "Ah cool, did not know that autograd would handle the permutations. As long as the following test passed:\r\n\r\n```\r\n        input = Variable(torch.Tensor(batch_size, channels, height, width).uniform_(), requires_grad=True)\r\n        ps = nn.PixelShuffle(upscale_factor)\r\n        output = ps(input)\r\n        output.backward(output.data)\r\n        self.assertEqual(input.data, input.grad)\r\n```\r\n\r\ni.e. the `input == backwards(forwards(input))` then it LGTM. \r\n\r\nThis test is already in `test_nn` so that means it should work fine with autograd. Nice spot @colesbury "}