{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/177507199", "pull_request_review_id": 107390225, "id": 177507199, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NzUwNzE5OQ==", "diff_hunk": "@@ -1,118 +1,154 @@\n #include \"ATen/native/cpu/ReduceOpsKernel.h\"\n+\n+#include <numeric>\n+\n #include \"ATen/Dispatch.h\"\n #include \"ATen/Parallel.h\"\n+#include \"ATen/optional.h\"\n+#include \"ATen/cpu/vec256/vec256.h\"\n \n namespace at {\n namespace native {\n \n using namespace vec256;\n \n-// This adds the content of arr to sum\n-template <class scalar_t, template <class> class OP, CPUCapability C>\n-inline scalar_t allreduce_kernel_(const scalar_t *arr, size_t start, size_t end,\n-                                  scalar_t sum) {\n-  Vec256<scalar_t> part_sum;\n-  // Use all 16 registers.\n-  Vec256<scalar_t> tmp_sum[4], tmp_sum1, tmp_sum2, tmp_sum3;\n-  Vec256<scalar_t> a[8];\n-  size_t width =\n-      256 / sizeof(scalar_t); // primitives per 256 bytes (two cache lines)\n-  size_t epr = 32 / sizeof(scalar_t); // primitives per Vec256\n-  size_t k = 0;\n-  for (; k < (end - start) / width; k++) {\n-    for (size_t i = 0; i < 8; i++) {\n-      a[i].load(arr + (k * width) + i * epr + start);\n+static inline int64_t round_down(int64_t a, int64_t m) {\n+  return a - (a % m);\n+}\n+\n+template<typename F>\n+static void parallel_for(int64_t end, int64_t step, bool parallelize, F func) {\n+  if (parallelize) {\n+    tbb::parallel_for<int64_t>(0, end, step, func);\n+  } else {\n+    for (int64_t i = 0; i != end; i += step) {\n+      func(i);\n     }\n-    for (size_t i = 0; i < 8; i += 2) {\n-      tmp_sum[i / 2] = OP<Vec256<scalar_t>>()(a[i], a[i + 1]);\n+  }\n+}\n+\n+static tbb::affinity_partitioner ap;\n+\n+// Vectorized reduction defined by reduce operation `Op` with identity `ident`.\n+// The reduction is built on top of reduce128, which reduces down a column\n+// 128 bytes wide (WIDTH scalar elements). The width of 128 bytes is chosen\n+// because of the \"adjacent cache line prefetch\" behavior on x86 CPUs.\n+template<typename scalar_t, template <class> class Op, int ident>\n+struct Reduction {\n+  // reduction width in number of scalar elements\n+  static constexpr int WIDTH = 128 / sizeof(scalar_t);\n+\n+  using Vec = Vec256<scalar_t>;\n+  using Reduce = Op<Vec>;\n+  using ReduceScalar = Op<scalar_t>;\n+\n+  static void apply(Tensor& res, const Tensor& self, at::optional<int64_t> dim) {\n+    internal::init_tbb_num_threads();\n+\n+    auto out = res.data<scalar_t>();\n+    auto data = self.data<scalar_t>();\n+    auto numel = self.numel();\n+    if (!dim.has_value()) {\n+      *out = reduce_all(data, numel);\n+      return;\n     }\n-    tmp_sum1 = OP<Vec256<scalar_t>>()(tmp_sum[0], tmp_sum[1]);\n-    tmp_sum2 = OP<Vec256<scalar_t>>()(tmp_sum[2], tmp_sum[3]);\n-    if (k == 0) {\n-      part_sum = OP<Vec256<scalar_t>>()(tmp_sum1, tmp_sum2);\n+\n+    int64_t n = self.size(*dim);\n+    int64_t stride = self.stride(*dim);\n+    int64_t batch = numel / (n * stride);\n+    bool paralellize = batch * n > internal::TBB_GRAIN_SIZE;\n+    parallel_for(batch, 1, paralellize, [=](int64_t b) {\n+      if (stride == 1) {\n+        out[b] = reduce_all(&data[b * n], n);\n+      } else {\n+        reduce2d(&data[b * n * stride], &out[b * stride], n, stride, stride);\n+      }\n+    });\n+  }\n+\n+  static scalar_t reduce_all(const scalar_t* data, int64_t size) {\n+    int64_t k = size / WIDTH;\n+\n+    scalar_t sum;\n+    if (size > internal::TBB_GRAIN_SIZE) {\n+      sum = tbb::parallel_reduce(", "path": "aten/src/ATen/native/cpu/ReduceOpsKernel.cpp", "position": 97, "original_position": 95, "commit_id": "9b9386f1c858a6e7c23c0ed640790998dde845de", "original_commit_id": "cad1390ff1a3d71319802960cfcf4da44abe85fe", "user": {"login": "cpuhrsch", "id": 1716488, "node_id": "MDQ6VXNlcjE3MTY0ODg=", "avatar_url": "https://avatars1.githubusercontent.com/u/1716488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cpuhrsch", "html_url": "https://github.com/cpuhrsch", "followers_url": "https://api.github.com/users/cpuhrsch/followers", "following_url": "https://api.github.com/users/cpuhrsch/following{/other_user}", "gists_url": "https://api.github.com/users/cpuhrsch/gists{/gist_id}", "starred_url": "https://api.github.com/users/cpuhrsch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cpuhrsch/subscriptions", "organizations_url": "https://api.github.com/users/cpuhrsch/orgs", "repos_url": "https://api.github.com/users/cpuhrsch/repos", "events_url": "https://api.github.com/users/cpuhrsch/events{/privacy}", "received_events_url": "https://api.github.com/users/cpuhrsch/received_events", "type": "User", "site_admin": false}, "body": "I'd add it simply as a convention, but I can't force you. The computational cost is negligible  and the cost of someone calling a tbb algorithm before the init justifies the extra line of code in my mind.", "created_at": "2018-03-27T17:27:39Z", "updated_at": "2018-11-23T15:41:11Z", "html_url": "https://github.com/pytorch/pytorch/pull/6026#discussion_r177507199", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/6026", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/177507199"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/6026#discussion_r177507199"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/6026"}}, "body_html": "<p>I'd add it simply as a convention, but I can't force you. The computational cost is negligible  and the cost of someone calling a tbb algorithm before the init justifies the extra line of code in my mind.</p>", "body_text": "I'd add it simply as a convention, but I can't force you. The computational cost is negligible  and the cost of someone calling a tbb algorithm before the init justifies the extra line of code in my mind.", "in_reply_to_id": 177303633}