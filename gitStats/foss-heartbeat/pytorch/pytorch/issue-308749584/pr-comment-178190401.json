{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/178190401", "pull_request_review_id": 108215053, "id": 178190401, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3ODE5MDQwMQ==", "diff_hunk": "@@ -1,76 +1,142 @@\n #include \"ATen/native/cpu/UnaryOpsKernel.h\"\n+\n #include <cmath>\n+#include <iostream>\n #include \"ATen/Dispatch.h\"\n #include \"ATen/Parallel.h\"\n-#include \"ATen/native/cpu/Vec256.h\"\n+#include \"ATen/cpu/vec256/vec256.h\"\n+#include \"ATen/native/cpu/CapabilityDispatch.h\"\n \n namespace at { namespace native {\n \n using namespace vec256;\n \n-// This modifies arr in place with given OP\n-template <class scalar_t, template <class> class VOP, CPUCapability C>\n-inline void\n-kernel_(scalar_t* arr_out, const scalar_t* arr_in, size_t start, size_t end) {\n-  Vec256<scalar_t> a;\n-  size_t epr = 32 / sizeof(scalar_t); // primitives per Vec256\n-  size_t k = start;\n-  size_t vec_end = end > epr ? end - epr : 0;\n-  for (; k < vec_end; k += epr) {\n-    a.load(arr_in + k);\n-    VOP<scalar_t>()(a).store(arr_out + k);\n+template <typename scalar_t, typename F>\n+static void unary_kernel(scalar_t* arr_out, const scalar_t* arr_in, int64_t size, F func) {\n+  using Vec = Vec256<scalar_t>;\n+  int64_t size_rounded = size - (size % Vec::size);\n+  int64_t k = 0;\n+  for (; k != size_rounded; k += Vec::size) {\n+    auto value = func(Vec::s_load(arr_in + k));\n+    value.store(arr_out + k);\n   }\n-  size_t leftover = std::min((end - k), a.size);\n-  a.load(arr_in + k, leftover);\n-  VOP<scalar_t>()(a).store(arr_out + k, leftover);\n+  auto leftover = size - k;\n+  Vec a;\n+  a.load_partial(arr_in + k, leftover);\n+  func(a).store_partial(arr_out + k, leftover);\n }\n \n-// Functions excluding one-offs\n-#define GENERIC_UNARY_OPS_MACRO(MACRO) \\\n-  MACRO (ceil) \\\n-  MACRO (cos) \\\n-  MACRO (exp) \\\n-  MACRO (floor) \\\n-  MACRO (log) \\\n-  MACRO (round) \\\n-  MACRO (sin) \\\n-  MACRO (sqrt) \\\n-  MACRO (trunc) \\\n-\n-namespace {\n-\n-#define FUNCVOP(NAME)                          \\\n-  template <typename T>                        \\\n-  struct NAME##VOP {                           \\\n-    Vec256<T> operator()(Vec256<T>& x) const { \\\n-      return x.NAME();                         \\\n-    }                                          \\\n-  };\n-\n-UNARY_OPS_MACRO(FUNCVOP)\n-\n-} // namespace\n-\n-#define FUNCImpl(NAME)                                                      \\\n-  template <>                                                               \\\n-  void NAME##ImplC<CURRENT_CAPABILITY>::function(                           \\\n-      Tensor& result, const Tensor& self) {                                 \\\n-    AT_DISPATCH_FLOATING_TYPES(self.type(), NAME, [&] {                     \\\n-      at::parallel_for_1d<scalar_t>(                                        \\\n-          &kernel_<scalar_t, NAME##VOP, CURRENT_CAPABILITY>, result, self); \\\n-    });                                                                     \\\n+template <class scalar_t, class F>\n+static void parallel_apply(Tensor& result, const Tensor& self, F f) {\n+  internal::init_tbb_num_threads();\n+\n+  static tbb::affinity_partitioner ap;\n+\n+  auto arr_out = result.data<scalar_t>();\n+  auto arr_in = self.data<scalar_t>();\n+  int64_t size = self.numel();\n+  if (size < internal::TBB_GRAIN_SIZE) {\n+    unary_kernel(arr_out, arr_in, size, f);\n+  } else {\n+    tbb::parallel_for(\n+        tbb::blocked_range<int64_t>(0, size, internal::TBB_GRAIN_SIZE),\n+        [&](const tbb::blocked_range<int64_t>& r) {\n+          auto size = r.end() - r.begin();\n+          unary_kernel(arr_out + r.begin(), arr_in + r.begin(), size, f);\n+        },\n+        ap);\n   }\n+}\n+\n+static void abs_kernel(Tensor& result, const Tensor& self) {\n+  AT_DISPATCH_ALL_TYPES(self.type(), \"abs\", [&] {\n+    parallel_apply<scalar_t>(result, self, [](const Vec256<scalar_t>& x) {\n+      return x.abs();\n+    });\n+  });\n+}\n+\n+static void ceil_kernel(Tensor& result, const Tensor& self) {\n+  AT_DISPATCH_FLOATING_TYPES(self.type(), \"ceil\", [&] {\n+    parallel_apply<scalar_t>(result, self, [](const Vec256<scalar_t>& x) {\n+      return x.ceil();\n+    });\n+  });\n+}\n+\n+static void cos_kernel(Tensor& result, const Tensor& self) {\n+  AT_DISPATCH_FLOATING_TYPES(self.type(), \"cos\", [&] {\n+    parallel_apply<scalar_t>(result, self, [](const Vec256<scalar_t>& x) {\n+      return x.cos();\n+    });\n+  });\n+}\n \n-GENERIC_UNARY_OPS_MACRO(FUNCImpl)\n+static void exp_kernel(Tensor& result, const Tensor& self) {\n+  AT_DISPATCH_FLOATING_TYPES(self.type(), \"exp\", [&] {\n+    parallel_apply<scalar_t>(result, self, [](const Vec256<scalar_t>& x) {\n+      return x.exp();\n+    });\n+  });\n+}\n \n-template <>\n-void absImplC<CURRENT_CAPABILITY>::function(\n-    Tensor& result,\n-    const Tensor& self) {\n-  AT_DISPATCH_ALL_TYPES(self.type(), abs, [&] {\n-    at::parallel_for_1d<scalar_t>(\n-        &kernel_<scalar_t, absVOP, CURRENT_CAPABILITY>, result, self);\n+static void floor_kernel(Tensor& result, const Tensor& self) {\n+  AT_DISPATCH_FLOATING_TYPES(self.type(), \"floor\", [&] {\n+    parallel_apply<scalar_t>(result, self, [](const Vec256<scalar_t>& x) {\n+      return x.floor();\n+    });\n   });\n }\n \n+static void log_kernel(Tensor& result, const Tensor& self) {\n+  AT_DISPATCH_FLOATING_TYPES(self.type(), \"log\", [&] {\n+    parallel_apply<scalar_t>(result, self, [](const Vec256<scalar_t>& x) {\n+      return x.log();\n+    });\n+  });\n+}\n+\n+static void round_kernel(Tensor& result, const Tensor& self) {\n+  AT_DISPATCH_FLOATING_TYPES(self.type(), \"round\", [&] {\n+    parallel_apply<scalar_t>(result, self, [](const Vec256<scalar_t>& x) {\n+      return x.round();\n+    });\n+  });\n+}\n+\n+static void sin_kernel(Tensor& result, const Tensor& self) {\n+  AT_DISPATCH_FLOATING_TYPES(self.type(), \"sin\", [&] {\n+    parallel_apply<scalar_t>(result, self, [](const Vec256<scalar_t>& x) {\n+      return x.sin();\n+    });\n+  });\n+}\n+\n+static void sqrt_kernel(Tensor& result, const Tensor& self) {", "path": "aten/src/ATen/native/cpu/UnaryOpsKernel.cpp", "position": 172, "original_position": 172, "commit_id": "9b9386f1c858a6e7c23c0ed640790998dde845de", "original_commit_id": "9b9386f1c858a6e7c23c0ed640790998dde845de", "user": {"login": "cpuhrsch", "id": 1716488, "node_id": "MDQ6VXNlcjE3MTY0ODg=", "avatar_url": "https://avatars1.githubusercontent.com/u/1716488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cpuhrsch", "html_url": "https://github.com/cpuhrsch", "followers_url": "https://api.github.com/users/cpuhrsch/followers", "following_url": "https://api.github.com/users/cpuhrsch/following{/other_user}", "gists_url": "https://api.github.com/users/cpuhrsch/gists{/gist_id}", "starred_url": "https://api.github.com/users/cpuhrsch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cpuhrsch/subscriptions", "organizations_url": "https://api.github.com/users/cpuhrsch/orgs", "repos_url": "https://api.github.com/users/cpuhrsch/repos", "events_url": "https://api.github.com/users/cpuhrsch/events{/privacy}", "received_events_url": "https://api.github.com/users/cpuhrsch/received_events", "type": "User", "site_admin": false}, "body": "Why is it better to write out all of this explicitly instead of using a macro?", "created_at": "2018-03-29T21:47:12Z", "updated_at": "2018-11-23T15:41:20Z", "html_url": "https://github.com/pytorch/pytorch/pull/6026#discussion_r178190401", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/6026", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/178190401"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/6026#discussion_r178190401"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/6026"}}, "body_html": "<p>Why is it better to write out all of this explicitly instead of using a macro?</p>", "body_text": "Why is it better to write out all of this explicitly instead of using a macro?"}