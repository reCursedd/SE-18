{"url": "https://api.github.com/repos/pytorch/pytorch/issues/12228", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/12228/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/12228/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/12228/events", "html_url": "https://github.com/pytorch/pytorch/pull/12228", "id": 365592585, "node_id": "MDExOlB1bGxSZXF1ZXN0MjE5NDc2NTY0", "number": 12228, "title": "Hub Implementation", "user": {"login": "ailzhang", "id": 5248122, "node_id": "MDQ6VXNlcjUyNDgxMjI=", "avatar_url": "https://avatars2.githubusercontent.com/u/5248122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ailzhang", "html_url": "https://github.com/ailzhang", "followers_url": "https://api.github.com/users/ailzhang/followers", "following_url": "https://api.github.com/users/ailzhang/following{/other_user}", "gists_url": "https://api.github.com/users/ailzhang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ailzhang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ailzhang/subscriptions", "organizations_url": "https://api.github.com/users/ailzhang/orgs", "repos_url": "https://api.github.com/users/ailzhang/repos", "events_url": "https://api.github.com/users/ailzhang/events{/privacy}", "received_events_url": "https://api.github.com/users/ailzhang/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-10-01T18:46:29Z", "updated_at": "2018-11-23T15:52:25Z", "closed_at": "2018-10-30T01:44:27Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/12228", "html_url": "https://github.com/pytorch/pytorch/pull/12228", "diff_url": "https://github.com/pytorch/pytorch/pull/12228.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/12228.patch"}, "body_html": "<p>[Edit: after applied <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=655866\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/colesbury\">@colesbury</a> 's suggestions]</p>\n<ul>\n<li>Hub module enable users to share code + pretrained weights through github repos.<br>\nExample usage:</li>\n</ul>\n<pre><code>hub_model = hub.load(\n     'ailzhang/vision:hub', # repo_owner/repo_name:branch\n     'wrapper1', # entrypoint\n      1234, # args for callable [not applicable to resnet18]\n      pretrained=True) # kwargs for callable\n</code></pre>\n<ul>\n<li>Protocol on repo owner side: example <a href=\"https://github.com/ailzhang/vision/tree/hub\">https://github.com/ailzhang/vision/tree/hub</a>\n<ul>\n<li>The \"published\" models should be at least in a branch/tag. It can't be a random commit.</li>\n<li>Repo owner should have the following field defined in <code>hubconf.py</code>\n<ul>\n<li>function/entrypoint with function signature <code>def wrapper1(pretrained=False, *args, **kwargs):</code></li>\n<li><code>pretrained</code> allows users to load pretrained weights from repo owner.</li>\n<li><code>args</code> and <code>kwargs</code> are passed to the callable <code>resnet18</code>, repo owner should clearly specify their help message in the docstring</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<pre><code>def wrapper1(pretrained=False, *args, **kwargs):\n    \"\"\"\n    pretrained (bool): a recommended kwargs for all entrypoints\n    args &amp; kwargs are arguments for the function\n    \"\"\"\n    from torchvision.models.resnet import resnet18\n    model = resnet18(*args, **kwargs)\n    checkpoint = 'https://download.pytorch.org/models/resnet18-5c106cde.pth'\n    if pretrained:\n        model.load_state_dict(model_zoo.load_url(checkpoint, progress=False))\n    return model\n</code></pre>\n<ul>\n<li>\n<p>Hub_dir</p>\n<ul>\n<li><code>hub_dir</code> specifies where the intermediate files/folders will be saved. By default this is <code>~/.torch/hub</code>.</li>\n<li>Users can change it by either setting the environment variable <code>TORCH_HUB_DIR</code> or calling <code>hub.set_dir(PATH_TO_HUB_DIR)</code>.</li>\n<li>By default, we don't cleanup files after loading so that users can use cache next time.</li>\n</ul>\n</li>\n<li>\n<p>Cache logic :</p>\n<ul>\n<li>We used the cache by default if it exists in <code>hub_dir</code>.</li>\n<li>Users can force a fresh reload by calling <code>hub.load(..., force_reload=True)</code>.</li>\n</ul>\n</li>\n</ul>", "body_text": "[Edit: after applied @colesbury 's suggestions]\n\nHub module enable users to share code + pretrained weights through github repos.\nExample usage:\n\nhub_model = hub.load(\n     'ailzhang/vision:hub', # repo_owner/repo_name:branch\n     'wrapper1', # entrypoint\n      1234, # args for callable [not applicable to resnet18]\n      pretrained=True) # kwargs for callable\n\n\nProtocol on repo owner side: example https://github.com/ailzhang/vision/tree/hub\n\nThe \"published\" models should be at least in a branch/tag. It can't be a random commit.\nRepo owner should have the following field defined in hubconf.py\n\nfunction/entrypoint with function signature def wrapper1(pretrained=False, *args, **kwargs):\npretrained allows users to load pretrained weights from repo owner.\nargs and kwargs are passed to the callable resnet18, repo owner should clearly specify their help message in the docstring\n\n\n\n\n\ndef wrapper1(pretrained=False, *args, **kwargs):\n    \"\"\"\n    pretrained (bool): a recommended kwargs for all entrypoints\n    args & kwargs are arguments for the function\n    \"\"\"\n    from torchvision.models.resnet import resnet18\n    model = resnet18(*args, **kwargs)\n    checkpoint = 'https://download.pytorch.org/models/resnet18-5c106cde.pth'\n    if pretrained:\n        model.load_state_dict(model_zoo.load_url(checkpoint, progress=False))\n    return model\n\n\n\nHub_dir\n\nhub_dir specifies where the intermediate files/folders will be saved. By default this is ~/.torch/hub.\nUsers can change it by either setting the environment variable TORCH_HUB_DIR or calling hub.set_dir(PATH_TO_HUB_DIR).\nBy default, we don't cleanup files after loading so that users can use cache next time.\n\n\n\nCache logic :\n\nWe used the cache by default if it exists in hub_dir.\nUsers can force a fresh reload by calling hub.load(..., force_reload=True).", "body": "[Edit: after applied @colesbury 's suggestions]\r\n* Hub module enable users to share code + pretrained weights through github repos. \r\nExample usage:\r\n```\r\nhub_model = hub.load(\r\n     'ailzhang/vision:hub', # repo_owner/repo_name:branch\r\n     'wrapper1', # entrypoint\r\n      1234, # args for callable [not applicable to resnet18]\r\n      pretrained=True) # kwargs for callable\r\n```\r\n* Protocol on repo owner side: example https://github.com/ailzhang/vision/tree/hub\r\n     * The \"published\" models should be at least in a branch/tag. It can't be a random commit. \r\n     * Repo owner should have the following field defined in `hubconf.py` \r\n        * function/entrypoint with function signature `def wrapper1(pretrained=False, *args, **kwargs):`\r\n        * `pretrained` allows users to load pretrained weights from repo owner.\r\n        * `args` and `kwargs` are passed to the callable `resnet18`, repo owner should clearly specify their help message in the docstring \r\n\r\n```\r\ndef wrapper1(pretrained=False, *args, **kwargs):\r\n    \"\"\"\r\n    pretrained (bool): a recommended kwargs for all entrypoints\r\n    args & kwargs are arguments for the function\r\n    \"\"\"\r\n    from torchvision.models.resnet import resnet18\r\n    model = resnet18(*args, **kwargs)\r\n    checkpoint = 'https://download.pytorch.org/models/resnet18-5c106cde.pth'\r\n    if pretrained:\r\n        model.load_state_dict(model_zoo.load_url(checkpoint, progress=False))\r\n    return model\r\n```\r\n* Hub_dir\r\n    * `hub_dir` specifies where the intermediate files/folders will be saved. By default this is `~/.torch/hub`.\r\n    * Users can change it by either setting the environment variable `TORCH_HUB_DIR` or calling `hub.set_dir(PATH_TO_HUB_DIR)`.\r\n    * By default, we don't cleanup files after loading so that users can use cache next time.\r\n\r\n* Cache logic : \r\n    * We used the cache by default if it exists in `hub_dir`.\r\n    * Users can force a fresh reload by calling `hub.load(..., force_reload=True)`.\r\n   "}