{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/103077836", "pull_request_review_id": 23857094, "id": 103077836, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMzA3NzgzNg==", "diff_hunk": "@@ -1689,13 +1693,13 @@ def test_orthogonal(self):\n                         input_tensor = input_tensor.data\n \n                     rows, cols = tensor_size[0], int(np.prod(tensor_size[1:]))\n-                    flattened_tensor = input_tensor.view(rows, cols).numpy()\n+                    flattened_tensor = input_tensor.view(rows, cols)\n                     if rows > cols:\n-                        assert np.allclose(np.dot(flattened_tensor.T, flattened_tensor), np.eye(cols) * gain ** 2,\n-                                           atol=1e-6)\n+                        assert torch.dist(torch.mm(flattened_tensor.t(), flattened_tensor),", "path": "test/test_nn.py", "position": null, "original_position": 49, "commit_id": "7d979075cc3167a956b14cd3cfd05a56fde264fa", "original_commit_id": "b191412c9cfa8ac9fe993457f5fd5bcac8b8a76d", "user": {"login": "fmassa", "id": 9110200, "node_id": "MDQ6VXNlcjkxMTAyMDA=", "avatar_url": "https://avatars2.githubusercontent.com/u/9110200?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fmassa", "html_url": "https://github.com/fmassa", "followers_url": "https://api.github.com/users/fmassa/followers", "following_url": "https://api.github.com/users/fmassa/following{/other_user}", "gists_url": "https://api.github.com/users/fmassa/gists{/gist_id}", "starred_url": "https://api.github.com/users/fmassa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fmassa/subscriptions", "organizations_url": "https://api.github.com/users/fmassa/orgs", "repos_url": "https://api.github.com/users/fmassa/repos", "events_url": "https://api.github.com/users/fmassa/events{/privacy}", "received_events_url": "https://api.github.com/users/fmassa/received_events", "type": "User", "site_admin": false}, "body": "I think you can pass a tolerance parameter to `self.assertEqual` that handles tensors as well, see https://github.com/pytorch/pytorch/blob/master/test/common.py#L93", "created_at": "2017-02-25T12:13:31Z", "updated_at": "2018-11-23T15:32:32Z", "html_url": "https://github.com/pytorch/pytorch/pull/833#discussion_r103077836", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/833", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/103077836"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/833#discussion_r103077836"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/833"}}, "body_html": "<p>I think you can pass a tolerance parameter to <code>self.assertEqual</code> that handles tensors as well, see <a href=\"https://github.com/pytorch/pytorch/blob/master/test/common.py#L93\">https://github.com/pytorch/pytorch/blob/master/test/common.py#L93</a></p>", "body_text": "I think you can pass a tolerance parameter to self.assertEqual that handles tensors as well, see https://github.com/pytorch/pytorch/blob/master/test/common.py#L93"}