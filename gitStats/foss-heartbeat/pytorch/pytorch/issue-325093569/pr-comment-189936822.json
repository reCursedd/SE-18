{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/189936822", "pull_request_review_id": 122212839, "id": 189936822, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4OTkzNjgyMg==", "diff_hunk": "@@ -140,39 +146,39 @@ struct Vec256 {\n template <class T> Vec256<T> operator+(const Vec256<T> &a, const Vec256<T> &b) {\n   Vec256<T> c = Vec256<T>();\n   for (int i = 0; i != Vec256<T>::size; i++) {\n-    c.values[i] = a.values[i] + b.values[i];\n+    c.set_value(i, a[i] + b[i]);", "path": "aten/src/ATen/cpu/vec256/vec256_base.h", "position": 22, "original_position": 22, "commit_id": "64e069a5b77117b5db0ea5a67c038aedd3d7d535", "original_commit_id": "64e069a5b77117b5db0ea5a67c038aedd3d7d535", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Why would we even implement `+` like this for packed types? Falling back to implementation that extracts the elements scalar by scalar (remember that it's not a single store/load - it's done for every indexing and every `set_value`) seems like a really bad idea. If we can't use intrinsics, we shouldn't pretend that we can do that.", "created_at": "2018-05-22T15:03:47Z", "updated_at": "2018-11-23T15:44:30Z", "html_url": "https://github.com/pytorch/pytorch/pull/7746#discussion_r189936822", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/7746", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/189936822"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/7746#discussion_r189936822"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/7746"}}, "body_html": "<p>Why would we even implement <code>+</code> like this for packed types? Falling back to implementation that extracts the elements scalar by scalar (remember that it's not a single store/load - it's done for every indexing and every <code>set_value</code>) seems like a really bad idea. If we can't use intrinsics, we shouldn't pretend that we can do that.</p>", "body_text": "Why would we even implement + like this for packed types? Falling back to implementation that extracts the elements scalar by scalar (remember that it's not a single store/load - it's done for every indexing and every set_value) seems like a really bad idea. If we can't use intrinsics, we shouldn't pretend that we can do that.", "in_reply_to_id": 189847482}