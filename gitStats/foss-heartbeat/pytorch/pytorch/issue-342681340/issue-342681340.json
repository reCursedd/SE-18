{"url": "https://api.github.com/repos/pytorch/pytorch/issues/9585", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/9585/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/9585/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/9585/events", "html_url": "https://github.com/pytorch/pytorch/issues/9585", "id": 342681340, "node_id": "MDU6SXNzdWUzNDI2ODEzNDA=", "number": 9585, "title": "cuda runtime error (59) : device-side assert triggered at /pytorch/aten/src/THC/generic/THCTensorCopy.c:20", "user": {"login": "ninjakx", "id": 29797787, "node_id": "MDQ6VXNlcjI5Nzk3Nzg3", "avatar_url": "https://avatars2.githubusercontent.com/u/29797787?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ninjakx", "html_url": "https://github.com/ninjakx", "followers_url": "https://api.github.com/users/ninjakx/followers", "following_url": "https://api.github.com/users/ninjakx/following{/other_user}", "gists_url": "https://api.github.com/users/ninjakx/gists{/gist_id}", "starred_url": "https://api.github.com/users/ninjakx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ninjakx/subscriptions", "organizations_url": "https://api.github.com/users/ninjakx/orgs", "repos_url": "https://api.github.com/users/ninjakx/repos", "events_url": "https://api.github.com/users/ninjakx/events{/privacy}", "received_events_url": "https://api.github.com/users/ninjakx/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-07-19T11:02:01Z", "updated_at": "2018-08-27T18:55:35Z", "closed_at": "2018-08-27T18:55:35Z", "author_association": "NONE", "body_html": "<p>I am running this code on google colab:</p>\n<pre><code>from __future__ import print_function\nimport os\nimport itertools\nimport torch\nimport torch.nn as nn\nimport torch.optim as optim\nimport torch.nn.functional as F\nimport torch.backends.cudnn as cudnn\nimport torchvision\nimport torchvision.transforms as transforms\nfrom ssd import SSD300\nfrom multibox_loss import MultiBoxLoss\nfrom torch.autograd import Variable\n\nlr = 1e-3\nresume = ''\n\nuse_cuda = torch.cuda.is_available()\nbest_loss = float('inf')  # best test loss\nstart_epoch = 0  # start from epoch 0 or last epoch\n\n# Data\nprint('==&gt; Preparing data..')\ntransform = transforms.Compose([transforms.ToTensor(),\n                                transforms.Normalize(mean=(0.485, 0.456, 0.406), std=(0.229, 0.224, 0.225))])\n\ntrainset = ListDataset(root='Images', list_file='itrain.txt', train=True, transform=transform)\ntrainloader = torch.utils.data.DataLoader(trainset, batch_size=32, shuffle=True, num_workers=4)\n\ntestset = ListDataset(root='Images', list_file='itest.txt', train=False, transform=transform)\ntestloader = torch.utils.data.DataLoader(testset, batch_size=32, shuffle=False, num_workers=4)\n\n\n# Model\nnet = SSD300()\nif resume:\n    print('==&gt; Resuming from checkpoint..')\n    checkpoint = torch.load('checkpoint/ckpt.pth')\n    net.load_state_dict(checkpoint['net'])\n    best_loss = checkpoint['loss']\n    start_epoch = checkpoint['epoch']\nelse:\n    # Convert from pretrained VGG model.\n    net.load_state_dict(torch.load('ssd.pth'))\n\ncriterion = MultiBoxLoss()\nif use_cuda:\n    #net = torch.nn.DataParallel(net, device_ids=[0,1,2,3,4,5,6,7])\n    net.cuda()\n    cudnn.benchmark = True\n\noptimizer = optim.SGD(net.parameters(), lr=lr, momentum=0.9, weight_decay=1e-4)\n\n\n</code></pre>\n<p>This is the error i am getting:</p>\n<pre><code>RuntimeError                              Traceback (most recent call last)\n&lt;ipython-input-45-1d68494f6580&gt; in &lt;module&gt;()\n     62 if use_cuda:\n     63     #net = torch.nn.DataParallel(net, device_ids=[0,1,2,3,4,5,6,7])\n---&gt; 64     net.cuda()\n     65     cudnn.benchmark = True\n     66 \n\n/usr/local/lib/python3.6/dist-packages/torch/nn/modules/module.py in cuda(self, device)\n    247             Module: self\n    248         \"\"\"\n--&gt; 249         return self._apply(lambda t: t.cuda(device))\n    250 \n    251     def cpu(self):\n\n/usr/local/lib/python3.6/dist-packages/torch/nn/modules/module.py in _apply(self, fn)\n    174     def _apply(self, fn):\n    175         for module in self.children():\n--&gt; 176             module._apply(fn)\n    177 \n    178         for param in self._parameters.values():\n\n/usr/local/lib/python3.6/dist-packages/torch/nn/modules/module.py in _apply(self, fn)\n    174     def _apply(self, fn):\n    175         for module in self.children():\n--&gt; 176             module._apply(fn)\n    177 \n    178         for param in self._parameters.values():\n\n/usr/local/lib/python3.6/dist-packages/torch/nn/modules/module.py in _apply(self, fn)\n    180                 # Tensors stored in modules are graph leaves, and we don't\n    181                 # want to create copy nodes, so we have to unpack the data.\n--&gt; 182                 param.data = fn(param.data)\n    183                 if param._grad is not None:\n    184                     param._grad.data = fn(param._grad.data)\n\n/usr/local/lib/python3.6/dist-packages/torch/nn/modules/module.py in &lt;lambda&gt;(t)\n    247             Module: self\n    248         \"\"\"\n--&gt; 249         return self._apply(lambda t: t.cuda(device))\n    250 \n    251     def cpu(self):\n\nRuntimeError: cuda runtime error (59) : device-side assert triggered at /pytorch/aten/src/THC/generic/THCTensorCopy.c:20\n</code></pre>", "body_text": "I am running this code on google colab:\nfrom __future__ import print_function\nimport os\nimport itertools\nimport torch\nimport torch.nn as nn\nimport torch.optim as optim\nimport torch.nn.functional as F\nimport torch.backends.cudnn as cudnn\nimport torchvision\nimport torchvision.transforms as transforms\nfrom ssd import SSD300\nfrom multibox_loss import MultiBoxLoss\nfrom torch.autograd import Variable\n\nlr = 1e-3\nresume = ''\n\nuse_cuda = torch.cuda.is_available()\nbest_loss = float('inf')  # best test loss\nstart_epoch = 0  # start from epoch 0 or last epoch\n\n# Data\nprint('==> Preparing data..')\ntransform = transforms.Compose([transforms.ToTensor(),\n                                transforms.Normalize(mean=(0.485, 0.456, 0.406), std=(0.229, 0.224, 0.225))])\n\ntrainset = ListDataset(root='Images', list_file='itrain.txt', train=True, transform=transform)\ntrainloader = torch.utils.data.DataLoader(trainset, batch_size=32, shuffle=True, num_workers=4)\n\ntestset = ListDataset(root='Images', list_file='itest.txt', train=False, transform=transform)\ntestloader = torch.utils.data.DataLoader(testset, batch_size=32, shuffle=False, num_workers=4)\n\n\n# Model\nnet = SSD300()\nif resume:\n    print('==> Resuming from checkpoint..')\n    checkpoint = torch.load('checkpoint/ckpt.pth')\n    net.load_state_dict(checkpoint['net'])\n    best_loss = checkpoint['loss']\n    start_epoch = checkpoint['epoch']\nelse:\n    # Convert from pretrained VGG model.\n    net.load_state_dict(torch.load('ssd.pth'))\n\ncriterion = MultiBoxLoss()\nif use_cuda:\n    #net = torch.nn.DataParallel(net, device_ids=[0,1,2,3,4,5,6,7])\n    net.cuda()\n    cudnn.benchmark = True\n\noptimizer = optim.SGD(net.parameters(), lr=lr, momentum=0.9, weight_decay=1e-4)\n\n\n\nThis is the error i am getting:\nRuntimeError                              Traceback (most recent call last)\n<ipython-input-45-1d68494f6580> in <module>()\n     62 if use_cuda:\n     63     #net = torch.nn.DataParallel(net, device_ids=[0,1,2,3,4,5,6,7])\n---> 64     net.cuda()\n     65     cudnn.benchmark = True\n     66 \n\n/usr/local/lib/python3.6/dist-packages/torch/nn/modules/module.py in cuda(self, device)\n    247             Module: self\n    248         \"\"\"\n--> 249         return self._apply(lambda t: t.cuda(device))\n    250 \n    251     def cpu(self):\n\n/usr/local/lib/python3.6/dist-packages/torch/nn/modules/module.py in _apply(self, fn)\n    174     def _apply(self, fn):\n    175         for module in self.children():\n--> 176             module._apply(fn)\n    177 \n    178         for param in self._parameters.values():\n\n/usr/local/lib/python3.6/dist-packages/torch/nn/modules/module.py in _apply(self, fn)\n    174     def _apply(self, fn):\n    175         for module in self.children():\n--> 176             module._apply(fn)\n    177 \n    178         for param in self._parameters.values():\n\n/usr/local/lib/python3.6/dist-packages/torch/nn/modules/module.py in _apply(self, fn)\n    180                 # Tensors stored in modules are graph leaves, and we don't\n    181                 # want to create copy nodes, so we have to unpack the data.\n--> 182                 param.data = fn(param.data)\n    183                 if param._grad is not None:\n    184                     param._grad.data = fn(param._grad.data)\n\n/usr/local/lib/python3.6/dist-packages/torch/nn/modules/module.py in <lambda>(t)\n    247             Module: self\n    248         \"\"\"\n--> 249         return self._apply(lambda t: t.cuda(device))\n    250 \n    251     def cpu(self):\n\nRuntimeError: cuda runtime error (59) : device-side assert triggered at /pytorch/aten/src/THC/generic/THCTensorCopy.c:20", "body": "I am running this code on google colab:\r\n\r\n```\r\nfrom __future__ import print_function\r\nimport os\r\nimport itertools\r\nimport torch\r\nimport torch.nn as nn\r\nimport torch.optim as optim\r\nimport torch.nn.functional as F\r\nimport torch.backends.cudnn as cudnn\r\nimport torchvision\r\nimport torchvision.transforms as transforms\r\nfrom ssd import SSD300\r\nfrom multibox_loss import MultiBoxLoss\r\nfrom torch.autograd import Variable\r\n\r\nlr = 1e-3\r\nresume = ''\r\n\r\nuse_cuda = torch.cuda.is_available()\r\nbest_loss = float('inf')  # best test loss\r\nstart_epoch = 0  # start from epoch 0 or last epoch\r\n\r\n# Data\r\nprint('==> Preparing data..')\r\ntransform = transforms.Compose([transforms.ToTensor(),\r\n                                transforms.Normalize(mean=(0.485, 0.456, 0.406), std=(0.229, 0.224, 0.225))])\r\n\r\ntrainset = ListDataset(root='Images', list_file='itrain.txt', train=True, transform=transform)\r\ntrainloader = torch.utils.data.DataLoader(trainset, batch_size=32, shuffle=True, num_workers=4)\r\n\r\ntestset = ListDataset(root='Images', list_file='itest.txt', train=False, transform=transform)\r\ntestloader = torch.utils.data.DataLoader(testset, batch_size=32, shuffle=False, num_workers=4)\r\n\r\n\r\n# Model\r\nnet = SSD300()\r\nif resume:\r\n    print('==> Resuming from checkpoint..')\r\n    checkpoint = torch.load('checkpoint/ckpt.pth')\r\n    net.load_state_dict(checkpoint['net'])\r\n    best_loss = checkpoint['loss']\r\n    start_epoch = checkpoint['epoch']\r\nelse:\r\n    # Convert from pretrained VGG model.\r\n    net.load_state_dict(torch.load('ssd.pth'))\r\n\r\ncriterion = MultiBoxLoss()\r\nif use_cuda:\r\n    #net = torch.nn.DataParallel(net, device_ids=[0,1,2,3,4,5,6,7])\r\n    net.cuda()\r\n    cudnn.benchmark = True\r\n\r\noptimizer = optim.SGD(net.parameters(), lr=lr, momentum=0.9, weight_decay=1e-4)\r\n\r\n\r\n```\r\nThis is the error i am getting:\r\n```\r\nRuntimeError                              Traceback (most recent call last)\r\n<ipython-input-45-1d68494f6580> in <module>()\r\n     62 if use_cuda:\r\n     63     #net = torch.nn.DataParallel(net, device_ids=[0,1,2,3,4,5,6,7])\r\n---> 64     net.cuda()\r\n     65     cudnn.benchmark = True\r\n     66 \r\n\r\n/usr/local/lib/python3.6/dist-packages/torch/nn/modules/module.py in cuda(self, device)\r\n    247             Module: self\r\n    248         \"\"\"\r\n--> 249         return self._apply(lambda t: t.cuda(device))\r\n    250 \r\n    251     def cpu(self):\r\n\r\n/usr/local/lib/python3.6/dist-packages/torch/nn/modules/module.py in _apply(self, fn)\r\n    174     def _apply(self, fn):\r\n    175         for module in self.children():\r\n--> 176             module._apply(fn)\r\n    177 \r\n    178         for param in self._parameters.values():\r\n\r\n/usr/local/lib/python3.6/dist-packages/torch/nn/modules/module.py in _apply(self, fn)\r\n    174     def _apply(self, fn):\r\n    175         for module in self.children():\r\n--> 176             module._apply(fn)\r\n    177 \r\n    178         for param in self._parameters.values():\r\n\r\n/usr/local/lib/python3.6/dist-packages/torch/nn/modules/module.py in _apply(self, fn)\r\n    180                 # Tensors stored in modules are graph leaves, and we don't\r\n    181                 # want to create copy nodes, so we have to unpack the data.\r\n--> 182                 param.data = fn(param.data)\r\n    183                 if param._grad is not None:\r\n    184                     param._grad.data = fn(param._grad.data)\r\n\r\n/usr/local/lib/python3.6/dist-packages/torch/nn/modules/module.py in <lambda>(t)\r\n    247             Module: self\r\n    248         \"\"\"\r\n--> 249         return self._apply(lambda t: t.cuda(device))\r\n    250 \r\n    251     def cpu(self):\r\n\r\nRuntimeError: cuda runtime error (59) : device-side assert triggered at /pytorch/aten/src/THC/generic/THCTensorCopy.c:20\r\n```"}