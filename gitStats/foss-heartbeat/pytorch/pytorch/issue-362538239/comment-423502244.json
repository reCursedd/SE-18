{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/423502244", "html_url": "https://github.com/pytorch/pytorch/issues/11931#issuecomment-423502244", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/11931", "id": 423502244, "node_id": "MDEyOklzc3VlQ29tbWVudDQyMzUwMjI0NA==", "user": {"login": "t-vi", "id": 20787943, "node_id": "MDQ6VXNlcjIwNzg3OTQz", "avatar_url": "https://avatars2.githubusercontent.com/u/20787943?v=4", "gravatar_id": "", "url": "https://api.github.com/users/t-vi", "html_url": "https://github.com/t-vi", "followers_url": "https://api.github.com/users/t-vi/followers", "following_url": "https://api.github.com/users/t-vi/following{/other_user}", "gists_url": "https://api.github.com/users/t-vi/gists{/gist_id}", "starred_url": "https://api.github.com/users/t-vi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/t-vi/subscriptions", "organizations_url": "https://api.github.com/users/t-vi/orgs", "repos_url": "https://api.github.com/users/t-vi/repos", "events_url": "https://api.github.com/users/t-vi/events{/privacy}", "received_events_url": "https://api.github.com/users/t-vi/received_events", "type": "User", "site_admin": false}, "created_at": "2018-09-21T11:35:55Z", "updated_at": "2018-09-21T13:03:41Z", "author_association": "CONTRIBUTOR", "body_html": "<p>So what numpy does is approximately (it's easy for the non-batched case):</p>\n<pre><code>p = torch.ones(1_000_000)\nhave = 0\nwant = 100_000\np_ = p.clone()\nresult = torch.empty(want, dtype=torch.long)\nwhile have &lt; want:\n    a = torch.multinomial(p_, want-have, replacement=True)\n    b = a.unique()\n    result[have:have+b.size(-1)] = b\n    p_[b] = 0\n    have += b.size(-1)\n</code></pre>\n<p>so it will attempt (but fail) to get all samples, but will be much more efficient than sampling only one at a time and renormalizing the pdf after each sample.<br>\nI'll implement this, but I can't promise to get it done before 1.0.</p>", "body_text": "So what numpy does is approximately (it's easy for the non-batched case):\np = torch.ones(1_000_000)\nhave = 0\nwant = 100_000\np_ = p.clone()\nresult = torch.empty(want, dtype=torch.long)\nwhile have < want:\n    a = torch.multinomial(p_, want-have, replacement=True)\n    b = a.unique()\n    result[have:have+b.size(-1)] = b\n    p_[b] = 0\n    have += b.size(-1)\n\nso it will attempt (but fail) to get all samples, but will be much more efficient than sampling only one at a time and renormalizing the pdf after each sample.\nI'll implement this, but I can't promise to get it done before 1.0.", "body": "So what numpy does is approximately (it's easy for the non-batched case):\r\n```\r\np = torch.ones(1_000_000)\r\nhave = 0\r\nwant = 100_000\r\np_ = p.clone()\r\nresult = torch.empty(want, dtype=torch.long)\r\nwhile have < want:\r\n    a = torch.multinomial(p_, want-have, replacement=True)\r\n    b = a.unique()\r\n    result[have:have+b.size(-1)] = b\r\n    p_[b] = 0\r\n    have += b.size(-1)\r\n```\r\nso it will attempt (but fail) to get all samples, but will be much more efficient than sampling only one at a time and renormalizing the pdf after each sample.\r\nI'll implement this, but I can't promise to get it done before 1.0."}