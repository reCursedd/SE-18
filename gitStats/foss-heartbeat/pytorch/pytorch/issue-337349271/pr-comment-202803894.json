{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/202803894", "pull_request_review_id": 137571078, "id": 202803894, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMjgwMzg5NA==", "diff_hunk": "@@ -0,0 +1,168 @@\n+#include \"adadelta_op.h\"\n+#include \"caffe2/core/common_gpu.h\"\n+#include \"caffe2/core/context_gpu.h\"\n+#include \"caffe2/utils/mixed_utils.h\"\n+\n+namespace caffe2 {\n+\n+__global__ void AdadeltaUpdate(\n+    int N,\n+    const float* w,\n+    const float* g,\n+    const float* h,\n+    const float* d,\n+    float* nw,\n+    float* nh,\n+    float* nd,\n+    float epsilon,\n+    float decay,\n+    const float* lr) {\n+  CUDA_1D_KERNEL_LOOP(i, N) {\n+    float gi = g[i];\n+    float di = d[i];\n+    float hi = nh[i] = decay * h[i] + (1.0f - decay) * gi * gi;\n+    float ng = (std::sqrt(di + epsilon) / std::sqrt(hi + epsilon)) * gi;\n+    nw[i] = w[i] + lr[0] * ng;\n+    nd[i] = decay * di + (1.0f - decay) * ng * ng;\n+  }\n+}\n+\n+template <>\n+void adadelta_update<CUDAContext>(\n+    int N,\n+    const float* w,\n+    const float* g,\n+    const float* h,\n+    const float* d,\n+    float* nw,\n+    float* nh,\n+    float* nd,\n+    float epsilon,\n+    float decay,\n+    const float* lr,\n+    CUDAContext* context) {\n+  AdadeltaUpdate<<<\n+      CAFFE_GET_BLOCKS(N),\n+      CAFFE_CUDA_NUM_THREADS,\n+      0,\n+      context->cuda_stream()>>>(N, w, g, h, d, nw, nh, nd, epsilon, decay, lr);\n+}\n+\n+template <typename SIndex, typename THalf>\n+__global__ void SparseAdadeltaKernel(\n+    const size_t N,\n+    const size_t grad_slice_sz,\n+    const float epsilon,\n+    const float decay,\n+    THalf* param,\n+    THalf* param_mom,\n+    THalf* param_mom_delta,\n+    const SIndex* indices,\n+    const float* grad,\n+    const float* lr) {\n+  const float LR = lr[0];\n+  CUDA_1D_KERNEL_LOOP(i, N) {\n+    const size_t gradIdx = i;\n+    const SIndex index = indices[i / grad_slice_sz];\n+    const size_t paramIdx = index * grad_slice_sz + (i % grad_slice_sz);\n+\n+    float mom_new = mixed_mult(decay, param_mom[paramIdx]) +\n+        (1.0f - decay) * grad[gradIdx] * grad[gradIdx];\n+    mixed_store(&mom_new, &(param_mom[paramIdx]));\n+    float grad_new = (sqrt(mixed_add(epsilon, param_mom_delta[paramIdx])) /\n+                      sqrt(mom_new + epsilon)) *\n+        grad[gradIdx];\n+    float param_new = mixed_add(LR * grad_new, param[paramIdx]);\n+    mixed_store(&param_new, &(param[paramIdx]));\n+    float mom_delta_new = mixed_mult(decay, param_mom_delta[paramIdx]) +\n+        (1.0f - decay) * grad_new * grad_new;\n+    mixed_store(&mom_delta_new, &(param_mom_delta[paramIdx]));\n+  }\n+}\n+\n+template <typename T, class Context>\n+class CUDASparseAdadeltaOp final : public Operator<Context> {\n+ public:\n+  USE_OPERATOR_CONTEXT_FUNCTIONS;\n+  CUDASparseAdadeltaOp(const OperatorDef& operator_def, Workspace* ws)\n+      : Operator<Context>(operator_def, ws),\n+        epsilon_(OperatorBase::GetSingleArgument<T>(\"epsilon\", 1e-5f)),", "path": "caffe2/sgd/adadelta_op_gpu.cu", "position": null, "original_position": 89, "commit_id": "c1bec97c4308dabee966c9b488f6d4863dba6fa5", "original_commit_id": "92f3b6d535fcadf55a7e60c862887e0309906883", "user": {"login": "BIT-silence", "id": 3357667, "node_id": "MDQ6VXNlcjMzNTc2Njc=", "avatar_url": "https://avatars0.githubusercontent.com/u/3357667?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BIT-silence", "html_url": "https://github.com/BIT-silence", "followers_url": "https://api.github.com/users/BIT-silence/followers", "following_url": "https://api.github.com/users/BIT-silence/following{/other_user}", "gists_url": "https://api.github.com/users/BIT-silence/gists{/gist_id}", "starred_url": "https://api.github.com/users/BIT-silence/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BIT-silence/subscriptions", "organizations_url": "https://api.github.com/users/BIT-silence/orgs", "repos_url": "https://api.github.com/users/BIT-silence/repos", "events_url": "https://api.github.com/users/BIT-silence/events{/privacy}", "received_events_url": "https://api.github.com/users/BIT-silence/received_events", "type": "User", "site_admin": false}, "body": "Here we can make epsilon and decay as float type and cast it to T when using it.", "created_at": "2018-07-16T19:55:02Z", "updated_at": "2018-11-23T15:47:30Z", "html_url": "https://github.com/pytorch/pytorch/pull/9088#discussion_r202803894", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/9088", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/202803894"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/9088#discussion_r202803894"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/9088"}}, "body_html": "<p>Here we can make epsilon and decay as float type and cast it to T when using it.</p>", "body_text": "Here we can make epsilon and decay as float type and cast it to T when using it."}