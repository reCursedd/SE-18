{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/204140973", "pull_request_review_id": 139175514, "id": 204140973, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDE0MDk3Mw==", "diff_hunk": "@@ -0,0 +1,168 @@\n+#include \"adadelta_op.h\"\n+#include \"caffe2/core/common_gpu.h\"\n+#include \"caffe2/core/context_gpu.h\"\n+#include \"caffe2/utils/mixed_utils.h\"\n+\n+namespace caffe2 {\n+\n+__global__ void AdadeltaUpdate(\n+    int N,\n+    const float* w,\n+    const float* g,\n+    const float* h,\n+    const float* d,\n+    float* nw,\n+    float* nh,\n+    float* nd,\n+    float epsilon,\n+    float decay,\n+    const float* lr) {\n+  CUDA_1D_KERNEL_LOOP(i, N) {\n+    float gi = g[i];\n+    float di = d[i];\n+    float hi = nh[i] = decay * h[i] + (1.0f - decay) * gi * gi;\n+    float ng = (std::sqrt(di + epsilon) / std::sqrt(hi + epsilon)) * gi;\n+    nw[i] = w[i] + lr[0] * ng;\n+    nd[i] = decay * di + (1.0f - decay) * ng * ng;\n+  }\n+}\n+\n+template <>\n+void adadelta_update<CUDAContext>(\n+    int N,\n+    const float* w,\n+    const float* g,\n+    const float* h,\n+    const float* d,\n+    float* nw,\n+    float* nh,\n+    float* nd,\n+    float epsilon,\n+    float decay,\n+    const float* lr,\n+    CUDAContext* context) {\n+  AdadeltaUpdate<<<\n+      CAFFE_GET_BLOCKS(N),\n+      CAFFE_CUDA_NUM_THREADS,\n+      0,\n+      context->cuda_stream()>>>(N, w, g, h, d, nw, nh, nd, epsilon, decay, lr);\n+}\n+\n+template <typename SIndex, typename THalf>\n+__global__ void SparseAdadeltaKernel(\n+    const size_t N,\n+    const size_t grad_slice_sz,\n+    const float epsilon,\n+    const float decay,\n+    THalf* param,\n+    THalf* param_mom,\n+    THalf* param_mom_delta,\n+    const SIndex* indices,\n+    const float* grad,\n+    const float* lr) {\n+  const float LR = lr[0];\n+  CUDA_1D_KERNEL_LOOP(i, N) {\n+    const size_t gradIdx = i;\n+    const SIndex index = indices[i / grad_slice_sz];\n+    const size_t paramIdx = index * grad_slice_sz + (i % grad_slice_sz);\n+\n+    float mom_new = mixed_mult(decay, param_mom[paramIdx]) +\n+        (1.0f - decay) * grad[gradIdx] * grad[gradIdx];\n+    mixed_store(&mom_new, &(param_mom[paramIdx]));\n+    float grad_new = (sqrt(mixed_add(epsilon, param_mom_delta[paramIdx])) /\n+                      sqrt(mom_new + epsilon)) *\n+        grad[gradIdx];\n+    float param_new = mixed_add(LR * grad_new, param[paramIdx]);\n+    mixed_store(&param_new, &(param[paramIdx]));\n+    float mom_delta_new = mixed_mult(decay, param_mom_delta[paramIdx]) +\n+        (1.0f - decay) * grad_new * grad_new;\n+    mixed_store(&mom_delta_new, &(param_mom_delta[paramIdx]));\n+  }\n+}\n+\n+template <typename T, class Context>\n+class CUDASparseAdadeltaOp final : public Operator<Context> {\n+ public:\n+  USE_OPERATOR_CONTEXT_FUNCTIONS;\n+  CUDASparseAdadeltaOp(const OperatorDef& operator_def, Workspace* ws)\n+      : Operator<Context>(operator_def, ws),\n+        epsilon_(OperatorBase::GetSingleArgument<T>(\"epsilon\", 1e-5f)),\n+        decay_(OperatorBase::GetSingleArgument<T>(\"decay\", 0.95f)) {}\n+\n+  bool RunOnDevice() override {\n+    // Enforce shapes\n+    CAFFE_ENFORCE_EQ(Input(PARAM).size(), Input(MOMENT_GRAD).size());\n+    CAFFE_ENFORCE_EQ(Input(PARAM).size(), Input(MOMENT_DELTA).size());\n+    CAFFE_ENFORCE_EQ(Input(LR).size(), 1);\n+    CAFFE_ENFORCE_EQ(\n+        Input(PARAM).size_from_dim(1),\n+        Input(GRAD).size_from_dim(Input(INDICES).ndim()));\n+    // Enforce domain constraints on attributes\n+    CAFFE_ENFORCE_GE(static_cast<T>(epsilon_), 0.0f);\n+    CAFFE_ENFORCE_GT(static_cast<T>(decay_), 0.0f);\n+    CAFFE_ENFORCE_LT(static_cast<T>(decay_), 1.0f);\n+\n+    return DispatchHelper<TensorTypes<int32_t, int64_t>>::call(\n+        this, Input(INDICES));\n+  }\n+\n+  template <typename IndexType>\n+  bool DoRunWithType() {\n+    auto n = Input(INDICES).size();\n+    if (n == 0) {\n+      return true;\n+    }\n+    return DispatchHelper<TensorTypes2<float, float16>, IndexType>::call(\n+        this, Input(PARAM));\n+  }\n+\n+  template <typename IndexType, typename THalf>", "path": "caffe2/sgd/adadelta_op_gpu.cu", "position": 123, "original_position": 119, "commit_id": "c1bec97c4308dabee966c9b488f6d4863dba6fa5", "original_commit_id": "92f3b6d535fcadf55a7e60c862887e0309906883", "user": {"login": "sidgoyal78", "id": 6762570, "node_id": "MDQ6VXNlcjY3NjI1NzA=", "avatar_url": "https://avatars1.githubusercontent.com/u/6762570?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sidgoyal78", "html_url": "https://github.com/sidgoyal78", "followers_url": "https://api.github.com/users/sidgoyal78/followers", "following_url": "https://api.github.com/users/sidgoyal78/following{/other_user}", "gists_url": "https://api.github.com/users/sidgoyal78/gists{/gist_id}", "starred_url": "https://api.github.com/users/sidgoyal78/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sidgoyal78/subscriptions", "organizations_url": "https://api.github.com/users/sidgoyal78/orgs", "repos_url": "https://api.github.com/users/sidgoyal78/repos", "events_url": "https://api.github.com/users/sidgoyal78/events{/privacy}", "received_events_url": "https://api.github.com/users/sidgoyal78/received_events", "type": "User", "site_admin": false}, "body": "For your comments regarding T and THalf, since we don't have kernels for other types like float16 or double, I have removed the typename T at Op-level, for simplicity. However, even when we had type T at the Op level, I don't think there would be an issue.\r\n\r\nLet me make sure that what I understand is reasonable (so that we are on the same page). I think this is what is happening with the current implmentation:\r\n- DispatchHelper in L109 (`return DispatchHelper<TensorTypes<int32_t, int64_t>>::call(this, Input(INDICES))`, would produce an if-else code, something like the following:\r\n```\r\n    if (this->INPUT(INDICES).template IsType<int32_t>()) {\r\n        DoRunWithType<int32_t>();\r\n    } else if (this->INPUT(INDICES).template IsType<int32_t>()) {\r\n        DoRunWithType<int64_t>();\r\n    }\r\n```\r\nNow we have `DispatchHelper<TensorTypes2<float, float16>` in the `DoRunWithType()`. This again will call `DoRunWithType2()` with `<float>` or `<float16>` depending on the type of `Input(PARAM)`. And I think this is what is intended.\r\n\r\nEven when we had type T at the Op level, only `const auto* gradIn = Input(GRAD).template data<T>();` would have been different (L127). So this would have been still fine.", "created_at": "2018-07-20T19:00:51Z", "updated_at": "2018-11-23T15:47:48Z", "html_url": "https://github.com/pytorch/pytorch/pull/9088#discussion_r204140973", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/9088", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/204140973"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/9088#discussion_r204140973"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/9088"}}, "body_html": "<p>For your comments regarding T and THalf, since we don't have kernels for other types like float16 or double, I have removed the typename T at Op-level, for simplicity. However, even when we had type T at the Op level, I don't think there would be an issue.</p>\n<p>Let me make sure that what I understand is reasonable (so that we are on the same page). I think this is what is happening with the current implmentation:</p>\n<ul>\n<li>DispatchHelper in L109 (<code>return DispatchHelper&lt;TensorTypes&lt;int32_t, int64_t&gt;&gt;::call(this, Input(INDICES))</code>, would produce an if-else code, something like the following:</li>\n</ul>\n<pre><code>    if (this-&gt;INPUT(INDICES).template IsType&lt;int32_t&gt;()) {\n        DoRunWithType&lt;int32_t&gt;();\n    } else if (this-&gt;INPUT(INDICES).template IsType&lt;int32_t&gt;()) {\n        DoRunWithType&lt;int64_t&gt;();\n    }\n</code></pre>\n<p>Now we have <code>DispatchHelper&lt;TensorTypes2&lt;float, float16&gt;</code> in the <code>DoRunWithType()</code>. This again will call <code>DoRunWithType2()</code> with <code>&lt;float&gt;</code> or <code>&lt;float16&gt;</code> depending on the type of <code>Input(PARAM)</code>. And I think this is what is intended.</p>\n<p>Even when we had type T at the Op level, only <code>const auto* gradIn = Input(GRAD).template data&lt;T&gt;();</code> would have been different (L127). So this would have been still fine.</p>", "body_text": "For your comments regarding T and THalf, since we don't have kernels for other types like float16 or double, I have removed the typename T at Op-level, for simplicity. However, even when we had type T at the Op level, I don't think there would be an issue.\nLet me make sure that what I understand is reasonable (so that we are on the same page). I think this is what is happening with the current implmentation:\n\nDispatchHelper in L109 (return DispatchHelper<TensorTypes<int32_t, int64_t>>::call(this, Input(INDICES)), would produce an if-else code, something like the following:\n\n    if (this->INPUT(INDICES).template IsType<int32_t>()) {\n        DoRunWithType<int32_t>();\n    } else if (this->INPUT(INDICES).template IsType<int32_t>()) {\n        DoRunWithType<int64_t>();\n    }\n\nNow we have DispatchHelper<TensorTypes2<float, float16> in the DoRunWithType(). This again will call DoRunWithType2() with <float> or <float16> depending on the type of Input(PARAM). And I think this is what is intended.\nEven when we had type T at the Op level, only const auto* gradIn = Input(GRAD).template data<T>(); would have been different (L127). So this would have been still fine.", "in_reply_to_id": 202801385}