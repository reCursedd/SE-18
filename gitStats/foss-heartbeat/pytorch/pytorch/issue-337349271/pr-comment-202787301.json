{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/202787301", "pull_request_review_id": 137544643, "id": 202787301, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMjc4NzMwMQ==", "diff_hunk": "@@ -0,0 +1,179 @@\n+#pragma once\n+\n+#include \"caffe2/core/operator.h\"\n+\n+namespace caffe2 {\n+\n+template <typename Context>\n+void adadelta_update(\n+    int N,\n+    const float* w,\n+    const float* g,\n+    const float* h,\n+    const float* d,\n+    float* nw,\n+    float* nh,\n+    float* nd,\n+    float epsilon,\n+    float decay,\n+    const float* lr,\n+    Context* /*context*/) {\n+  for (auto i = 0; i < N; ++i) {", "path": "caffe2/sgd/adadelta_op.h", "position": null, "original_position": 21, "commit_id": "c1bec97c4308dabee966c9b488f6d4863dba6fa5", "original_commit_id": "92f3b6d535fcadf55a7e60c862887e0309906883", "user": {"login": "BIT-silence", "id": 3357667, "node_id": "MDQ6VXNlcjMzNTc2Njc=", "avatar_url": "https://avatars0.githubusercontent.com/u/3357667?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BIT-silence", "html_url": "https://github.com/BIT-silence", "followers_url": "https://api.github.com/users/BIT-silence/followers", "following_url": "https://api.github.com/users/BIT-silence/following{/other_user}", "gists_url": "https://api.github.com/users/BIT-silence/gists{/gist_id}", "starred_url": "https://api.github.com/users/BIT-silence/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BIT-silence/subscriptions", "organizations_url": "https://api.github.com/users/BIT-silence/orgs", "repos_url": "https://api.github.com/users/BIT-silence/repos", "events_url": "https://api.github.com/users/BIT-silence/events{/privacy}", "received_events_url": "https://api.github.com/users/BIT-silence/received_events", "type": "User", "site_admin": false}, "body": "I'd suggest to write this function like.\r\n\r\nConstEigenVectorArrayMap<T> w_arr(w, N);\r\nConstEigenVectorArrayMap<T> g_arr(g, N);\r\nConstEigenVectorArrayMap<T> h_arr(h, N);\r\nConstEigenVectorArrayMap<T> d_arr(d, N);\r\nEigenVectorArrayMap<T> ng_arr(nw, N);\r\nEigenVectorMap<T>(nh, N) = decay * h_arr + (T(1) - decay) * g_arr.square();\r\nng_arr = (d_arr + epsilon).sqrt() * (h_arr + epsilon).rsqrt() * g_arr;\r\nEigenVectorMap<T>(nd, N) = decay * d_arr + (T(1) - decay) * ng_arr.square();\r\nEigenVectorMap<T>(nw, N) = w_arr + lr[0] * ng_arr;\r\n\r\nIt will be much faster on CPU to use eigen here since most of the ops above in Eigen have SIMD support.\r\nhttps://eigen.tuxfamily.org/dox/group__CoeffwiseMathFunctions.html\r\n", "created_at": "2018-07-16T18:56:05Z", "updated_at": "2018-11-23T15:47:28Z", "html_url": "https://github.com/pytorch/pytorch/pull/9088#discussion_r202787301", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/9088", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/202787301"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/9088#discussion_r202787301"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/9088"}}, "body_html": "<p>I'd suggest to write this function like.</p>\n<p>ConstEigenVectorArrayMap w_arr(w, N);<br>\nConstEigenVectorArrayMap g_arr(g, N);<br>\nConstEigenVectorArrayMap h_arr(h, N);<br>\nConstEigenVectorArrayMap d_arr(d, N);<br>\nEigenVectorArrayMap ng_arr(nw, N);<br>\nEigenVectorMap(nh, N) = decay * h_arr + (T(1) - decay) * g_arr.square();<br>\nng_arr = (d_arr + epsilon).sqrt() * (h_arr + epsilon).rsqrt() * g_arr;<br>\nEigenVectorMap(nd, N) = decay * d_arr + (T(1) - decay) * ng_arr.square();<br>\nEigenVectorMap(nw, N) = w_arr + lr[0] * ng_arr;</p>\n<p>It will be much faster on CPU to use eigen here since most of the ops above in Eigen have SIMD support.<br>\n<a href=\"https://eigen.tuxfamily.org/dox/group__CoeffwiseMathFunctions.html\" rel=\"nofollow\">https://eigen.tuxfamily.org/dox/group__CoeffwiseMathFunctions.html</a></p>", "body_text": "I'd suggest to write this function like.\nConstEigenVectorArrayMap w_arr(w, N);\nConstEigenVectorArrayMap g_arr(g, N);\nConstEigenVectorArrayMap h_arr(h, N);\nConstEigenVectorArrayMap d_arr(d, N);\nEigenVectorArrayMap ng_arr(nw, N);\nEigenVectorMap(nh, N) = decay * h_arr + (T(1) - decay) * g_arr.square();\nng_arr = (d_arr + epsilon).sqrt() * (h_arr + epsilon).rsqrt() * g_arr;\nEigenVectorMap(nd, N) = decay * d_arr + (T(1) - decay) * ng_arr.square();\nEigenVectorMap(nw, N) = w_arr + lr[0] * ng_arr;\nIt will be much faster on CPU to use eigen here since most of the ops above in Eigen have SIMD support.\nhttps://eigen.tuxfamily.org/dox/group__CoeffwiseMathFunctions.html"}