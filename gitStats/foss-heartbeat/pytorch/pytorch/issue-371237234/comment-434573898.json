{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/434573898", "html_url": "https://github.com/pytorch/pytorch/issues/12780#issuecomment-434573898", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/12780", "id": 434573898, "node_id": "MDEyOklzc3VlQ29tbWVudDQzNDU3Mzg5OA==", "user": {"login": "suo", "id": 1617424, "node_id": "MDQ6VXNlcjE2MTc0MjQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/1617424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/suo", "html_url": "https://github.com/suo", "followers_url": "https://api.github.com/users/suo/followers", "following_url": "https://api.github.com/users/suo/following{/other_user}", "gists_url": "https://api.github.com/users/suo/gists{/gist_id}", "starred_url": "https://api.github.com/users/suo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/suo/subscriptions", "organizations_url": "https://api.github.com/users/suo/orgs", "repos_url": "https://api.github.com/users/suo/repos", "events_url": "https://api.github.com/users/suo/events{/privacy}", "received_events_url": "https://api.github.com/users/suo/received_events", "type": "User", "site_admin": false}, "created_at": "2018-10-31T06:16:40Z", "updated_at": "2018-10-31T06:25:28Z", "author_association": "MEMBER", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=28248770\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/phi-go\">@phi-go</a> your example is caused by a bug in how we do argument promotion. Specifically, <code>len(tensor)</code> is returning 1, because <code>tensor</code> is being promoted to a list of tensors of size 1. A minimal example to demonstrate the problem:</p>\n<pre><code>import torch\n\ntensor = torch.IntTensor(4, 2).zero_()\nprint(len(tensor))  # prints 4\n\n@torch.jit.script\ndef foo(tensor):\n    print(len(tensor)) # this is dispatching to aten::len(Tensor[]), not aten::len(Tensor)\n\nfoo(tensor)  # prints 1\n</code></pre>\n<p>This is definitely a bug on our side and we'll issue a fix. <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1892175\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/zeryx\">@zeryx</a>, your problem may be different; I'll dig into that as well.</p>", "body_text": "@phi-go your example is caused by a bug in how we do argument promotion. Specifically, len(tensor) is returning 1, because tensor is being promoted to a list of tensors of size 1. A minimal example to demonstrate the problem:\nimport torch\n\ntensor = torch.IntTensor(4, 2).zero_()\nprint(len(tensor))  # prints 4\n\n@torch.jit.script\ndef foo(tensor):\n    print(len(tensor)) # this is dispatching to aten::len(Tensor[]), not aten::len(Tensor)\n\nfoo(tensor)  # prints 1\n\nThis is definitely a bug on our side and we'll issue a fix. @zeryx, your problem may be different; I'll dig into that as well.", "body": "@phi-go your example is caused by a bug in how we do argument promotion. Specifically, `len(tensor)` is returning 1, because `tensor` is being promoted to a list of tensors of size 1. A minimal example to demonstrate the problem:\r\n```\r\nimport torch\r\n\r\ntensor = torch.IntTensor(4, 2).zero_()\r\nprint(len(tensor))  # prints 4\r\n\r\n@torch.jit.script\r\ndef foo(tensor):\r\n    print(len(tensor)) # this is dispatching to aten::len(Tensor[]), not aten::len(Tensor)\r\n\r\nfoo(tensor)  # prints 1\r\n```\r\nThis is definitely a bug on our side and we'll issue a fix. @zeryx, your problem may be different; I'll dig into that as well."}