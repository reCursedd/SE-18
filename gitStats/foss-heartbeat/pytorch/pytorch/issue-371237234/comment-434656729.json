{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/434656729", "html_url": "https://github.com/pytorch/pytorch/issues/12780#issuecomment-434656729", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/12780", "id": 434656729, "node_id": "MDEyOklzc3VlQ29tbWVudDQzNDY1NjcyOQ==", "user": {"login": "phi-go", "id": 28248770, "node_id": "MDQ6VXNlcjI4MjQ4Nzcw", "avatar_url": "https://avatars0.githubusercontent.com/u/28248770?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phi-go", "html_url": "https://github.com/phi-go", "followers_url": "https://api.github.com/users/phi-go/followers", "following_url": "https://api.github.com/users/phi-go/following{/other_user}", "gists_url": "https://api.github.com/users/phi-go/gists{/gist_id}", "starred_url": "https://api.github.com/users/phi-go/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phi-go/subscriptions", "organizations_url": "https://api.github.com/users/phi-go/orgs", "repos_url": "https://api.github.com/users/phi-go/repos", "events_url": "https://api.github.com/users/phi-go/events{/privacy}", "received_events_url": "https://api.github.com/users/phi-go/received_events", "type": "User", "site_admin": false}, "created_at": "2018-10-31T11:45:27Z", "updated_at": "2018-10-31T11:45:27Z", "author_association": "NONE", "body_html": "<p>I was trying to get my code to work with tensor.size but now I'm also experiencing the \"list merging\" problem. Note that the error only occurs when the <code>ItsAList</code> Modules are somehow used, see the comment. Also if the list variable is created in a <code>@script</code> function it works as expected, so <code>ScriptModule</code>  has to play some role.</p>\n<p>Code:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> torch\n<span class=\"pl-k\">from</span> torch <span class=\"pl-k\">import</span> nn\n\n<span class=\"pl-k\">from</span> torch.jit <span class=\"pl-k\">import</span> ScriptModule, script_method\n\n\n<span class=\"pl-k\">class</span> <span class=\"pl-en\">ItsAList</span>(<span class=\"pl-e\">ScriptModule</span>):\n\n    <span class=\"pl-k\">def</span> <span class=\"pl-c1\">__init__</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>):\n        <span class=\"pl-c1\">super</span>(ItsAList, <span class=\"pl-c1\">self</span>).<span class=\"pl-c1\">__init__</span>()\n\n    <span class=\"pl-en\">@script_method</span>\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">forward</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>, <span class=\"pl-smi\">tensor</span>):\n        just_a_list <span class=\"pl-k\">=</span> []\n        <span class=\"pl-k\">return</span> just_a_list\n\n\n<span class=\"pl-k\">class</span> <span class=\"pl-en\">RebuildSeveralTimes</span>(<span class=\"pl-e\">ScriptModule</span>):\n    __constants__ <span class=\"pl-k\">=</span> [<span class=\"pl-s\"><span class=\"pl-pds\">'</span>module_list<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>times<span class=\"pl-pds\">'</span></span>]\n\n    <span class=\"pl-k\">def</span> <span class=\"pl-c1\">__init__</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>, <span class=\"pl-smi\">times</span>):\n        <span class=\"pl-c1\">super</span>(RebuildSeveralTimes, <span class=\"pl-c1\">self</span>).<span class=\"pl-c1\">__init__</span>()\n        <span class=\"pl-c1\">self</span>.times <span class=\"pl-k\">=</span> times\n        alist_modules <span class=\"pl-k\">=</span> []\n        <span class=\"pl-k\">for</span> i <span class=\"pl-k\">in</span> <span class=\"pl-c1\">range</span>(times):\n            alist_modules.append(ItsAList())\n        <span class=\"pl-c1\">self</span>.module_list <span class=\"pl-k\">=</span> nn.ModuleList(alist_modules)\n\n    <span class=\"pl-en\">@script_method</span>\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">forward</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>, <span class=\"pl-smi\">tensor</span>):\n        <span class=\"pl-k\">for</span> _ <span class=\"pl-k\">in</span> <span class=\"pl-c1\">self</span>.module_list:  <span class=\"pl-c\"><span class=\"pl-c\">#</span> works as expected with: for _ in range(self.times):</span>\n            tensor_list <span class=\"pl-k\">=</span> []\n            <span class=\"pl-k\">for</span> i <span class=\"pl-k\">in</span> <span class=\"pl-c1\">range</span>(tensor.size(<span class=\"pl-c1\">0</span>)):\n                n <span class=\"pl-k\">=</span> tensor[i]\n                tensor_list.append(n)\n            tensor <span class=\"pl-k\">=</span> torch.stack(tensor_list)\n        <span class=\"pl-k\">return</span> tensor\n\n\n<span class=\"pl-k\">for</span> i <span class=\"pl-k\">in</span> <span class=\"pl-c1\">range</span>(<span class=\"pl-c1\">4</span>):\n    tensor <span class=\"pl-k\">=</span> torch.FloatTensor([i])\n    model <span class=\"pl-k\">=</span> RebuildSeveralTimes(i)\n    new_tensor <span class=\"pl-k\">=</span> model(tensor)\n    <span class=\"pl-c1\">print</span>(<span class=\"pl-s\">f</span><span class=\"pl-pds\">\"</span><span class=\"pl-s\">i </span><span class=\"pl-c1\">{</span>i<span class=\"pl-c1\">}</span><span class=\"pl-pds\">\"</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>=<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">*</span><span class=\"pl-c1\">20</span>)\n    <span class=\"pl-c1\">print</span>(tensor)\n    <span class=\"pl-c1\">print</span>(new_tensor)</pre></div>\n<p>Output:</p>\n<pre><code>i 0 ====================\ntensor([0.])\ntensor([0.])\ni 1 ====================\ntensor([1.])\ntensor([1.])\ni 2 ====================\ntensor([2.])\ntensor([2., 2.])\ni 3 ====================\ntensor([3.])\ntensor([3., 3., 3., 3.])\n</code></pre>\n<p>Output with PYTHON_JIT=0:</p>\n<pre><code>i 0 ====================\ntensor([0.])\ntensor([0.])\ni 1 ====================\ntensor([1.])\ntensor([1.])\ni 2 ====================\ntensor([2.])\ntensor([2.])\ni 3 ====================\ntensor([3.])\ntensor([3.])\n</code></pre>", "body_text": "I was trying to get my code to work with tensor.size but now I'm also experiencing the \"list merging\" problem. Note that the error only occurs when the ItsAList Modules are somehow used, see the comment. Also if the list variable is created in a @script function it works as expected, so ScriptModule  has to play some role.\nCode:\nimport torch\nfrom torch import nn\n\nfrom torch.jit import ScriptModule, script_method\n\n\nclass ItsAList(ScriptModule):\n\n    def __init__(self):\n        super(ItsAList, self).__init__()\n\n    @script_method\n    def forward(self, tensor):\n        just_a_list = []\n        return just_a_list\n\n\nclass RebuildSeveralTimes(ScriptModule):\n    __constants__ = ['module_list', 'times']\n\n    def __init__(self, times):\n        super(RebuildSeveralTimes, self).__init__()\n        self.times = times\n        alist_modules = []\n        for i in range(times):\n            alist_modules.append(ItsAList())\n        self.module_list = nn.ModuleList(alist_modules)\n\n    @script_method\n    def forward(self, tensor):\n        for _ in self.module_list:  # works as expected with: for _ in range(self.times):\n            tensor_list = []\n            for i in range(tensor.size(0)):\n                n = tensor[i]\n                tensor_list.append(n)\n            tensor = torch.stack(tensor_list)\n        return tensor\n\n\nfor i in range(4):\n    tensor = torch.FloatTensor([i])\n    model = RebuildSeveralTimes(i)\n    new_tensor = model(tensor)\n    print(f\"i {i}\", \"=\"*20)\n    print(tensor)\n    print(new_tensor)\nOutput:\ni 0 ====================\ntensor([0.])\ntensor([0.])\ni 1 ====================\ntensor([1.])\ntensor([1.])\ni 2 ====================\ntensor([2.])\ntensor([2., 2.])\ni 3 ====================\ntensor([3.])\ntensor([3., 3., 3., 3.])\n\nOutput with PYTHON_JIT=0:\ni 0 ====================\ntensor([0.])\ntensor([0.])\ni 1 ====================\ntensor([1.])\ntensor([1.])\ni 2 ====================\ntensor([2.])\ntensor([2.])\ni 3 ====================\ntensor([3.])\ntensor([3.])", "body": "I was trying to get my code to work with tensor.size but now I'm also experiencing the \"list merging\" problem. Note that the error only occurs when the `ItsAList` Modules are somehow used, see the comment. Also if the list variable is created in a `@script` function it works as expected, so `ScriptModule`  has to play some role.\r\n\r\nCode:\r\n```python\r\nimport torch\r\nfrom torch import nn\r\n\r\nfrom torch.jit import ScriptModule, script_method\r\n\r\n\r\nclass ItsAList(ScriptModule):\r\n\r\n    def __init__(self):\r\n        super(ItsAList, self).__init__()\r\n\r\n    @script_method\r\n    def forward(self, tensor):\r\n        just_a_list = []\r\n        return just_a_list\r\n\r\n\r\nclass RebuildSeveralTimes(ScriptModule):\r\n    __constants__ = ['module_list', 'times']\r\n\r\n    def __init__(self, times):\r\n        super(RebuildSeveralTimes, self).__init__()\r\n        self.times = times\r\n        alist_modules = []\r\n        for i in range(times):\r\n            alist_modules.append(ItsAList())\r\n        self.module_list = nn.ModuleList(alist_modules)\r\n\r\n    @script_method\r\n    def forward(self, tensor):\r\n        for _ in self.module_list:  # works as expected with: for _ in range(self.times):\r\n            tensor_list = []\r\n            for i in range(tensor.size(0)):\r\n                n = tensor[i]\r\n                tensor_list.append(n)\r\n            tensor = torch.stack(tensor_list)\r\n        return tensor\r\n\r\n\r\nfor i in range(4):\r\n    tensor = torch.FloatTensor([i])\r\n    model = RebuildSeveralTimes(i)\r\n    new_tensor = model(tensor)\r\n    print(f\"i {i}\", \"=\"*20)\r\n    print(tensor)\r\n    print(new_tensor)\r\n```\r\n\r\nOutput:\r\n```\r\ni 0 ====================\r\ntensor([0.])\r\ntensor([0.])\r\ni 1 ====================\r\ntensor([1.])\r\ntensor([1.])\r\ni 2 ====================\r\ntensor([2.])\r\ntensor([2., 2.])\r\ni 3 ====================\r\ntensor([3.])\r\ntensor([3., 3., 3., 3.])\r\n```\r\n\r\nOutput with PYTHON_JIT=0:\r\n```\r\ni 0 ====================\r\ntensor([0.])\r\ntensor([0.])\r\ni 1 ====================\r\ntensor([1.])\r\ntensor([1.])\r\ni 2 ====================\r\ntensor([2.])\r\ntensor([2.])\r\ni 3 ====================\r\ntensor([3.])\r\ntensor([3.])\r\n```\r\n"}