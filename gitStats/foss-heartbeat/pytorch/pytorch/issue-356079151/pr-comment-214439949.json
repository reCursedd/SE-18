{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/214439949", "pull_request_review_id": 151505828, "id": 214439949, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNDQzOTk0OQ==", "diff_hunk": "@@ -668,6 +669,24 @@ def f(x, y):\n         y = torch.randn(4, 4, dtype=torch.float, device='cuda')\n \n         ge = self.checkTrace(f, (x, y))\n+        self.assertExpectedGraph(ge.graph_for(x,y))\n+\n+    @unittest.skipIf(IS_WINDOWS, \"NYI: fuser support for Windows\")\n+    @unittest.skipIf(not RUN_CUDA, \"fuser requires CUDA\")\n+    @skipIfRocm\n+    def test_comparison_eq_ne(self):\n+        def f(x, y):\n+            mask = (x == 0).type_as(x)\n+            z = x * mask + y\n+            mask = (x != 0).type_as(x)\n+            z = z * mask + y\n+            return z\n+\n+        x = torch.randn(4, 4, dtype=torch.float, device='cuda')\n+        y = torch.randn(4, 4, dtype=torch.float, device='cuda')\n+\n+        ge = self.checkTrace(f, (x, y))\n+        self.assertExpectedGraph(ge.graph_for(x,y))", "path": "test/test_jit.py", "position": null, "original_position": 29, "commit_id": "0611329e624bde6c4395688d710fbcd4adcd1d71", "original_commit_id": "dc32244f25cfab06d29be40f72cea2b3e2af0756", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Since the only thing you want to check here is that the whole graph was fused, it would be better to do this instead of adding more expects:\r\n```py\r\ndef assertAllFused(self, graph):\r\n  nodes = list(graph.nodes())\r\n  self.assertEqual(len(nodes), 1)\r\n  self.assertEqual(nodes[0].kind(), 'prim::FusionGroup')\r\n\r\ndef test_comparison(self):\r\n   ...\r\n   self.assertAllFused(ge.graph_for(x, y))\r\n```\r\n\r\nIt would be even better if we could auto-generate those traces instead of writing them out manually. It's very easy - just construct closures of different operators.", "created_at": "2018-08-31T18:29:41Z", "updated_at": "2018-11-23T15:50:28Z", "html_url": "https://github.com/pytorch/pytorch/pull/11150#discussion_r214439949", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/11150", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/214439949"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/11150#discussion_r214439949"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/11150"}}, "body_html": "<p>Since the only thing you want to check here is that the whole graph was fused, it would be better to do this instead of adding more expects:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">assertAllFused</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>, <span class=\"pl-smi\">graph</span>):\n  nodes <span class=\"pl-k\">=</span> <span class=\"pl-c1\">list</span>(graph.nodes())\n  <span class=\"pl-c1\">self</span>.assertEqual(<span class=\"pl-c1\">len</span>(nodes), <span class=\"pl-c1\">1</span>)\n  <span class=\"pl-c1\">self</span>.assertEqual(nodes[<span class=\"pl-c1\">0</span>].kind(), <span class=\"pl-s\"><span class=\"pl-pds\">'</span>prim::FusionGroup<span class=\"pl-pds\">'</span></span>)\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">test_comparison</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>):\n   <span class=\"pl-c1\">...</span>\n   <span class=\"pl-c1\">self</span>.assertAllFused(ge.graph_for(x, y))</pre></div>\n<p>It would be even better if we could auto-generate those traces instead of writing them out manually. It's very easy - just construct closures of different operators.</p>", "body_text": "Since the only thing you want to check here is that the whole graph was fused, it would be better to do this instead of adding more expects:\ndef assertAllFused(self, graph):\n  nodes = list(graph.nodes())\n  self.assertEqual(len(nodes), 1)\n  self.assertEqual(nodes[0].kind(), 'prim::FusionGroup')\n\ndef test_comparison(self):\n   ...\n   self.assertAllFused(ge.graph_for(x, y))\nIt would be even better if we could auto-generate those traces instead of writing them out manually. It's very easy - just construct closures of different operators."}