{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/215677347", "pull_request_review_id": 152996722, "id": 215677347, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNTY3NzM0Nw==", "diff_hunk": "@@ -668,6 +669,24 @@ def f(x, y):\n         y = torch.randn(4, 4, dtype=torch.float, device='cuda')\n \n         ge = self.checkTrace(f, (x, y))\n+        self.assertExpectedGraph(ge.graph_for(x,y))\n+\n+    @unittest.skipIf(IS_WINDOWS, \"NYI: fuser support for Windows\")\n+    @unittest.skipIf(not RUN_CUDA, \"fuser requires CUDA\")\n+    @skipIfRocm\n+    def test_comparison_eq_ne(self):\n+        def f(x, y):\n+            mask = (x == 0).type_as(x)\n+            z = x * mask + y\n+            mask = (x != 0).type_as(x)\n+            z = z * mask + y\n+            return z\n+\n+        x = torch.randn(4, 4, dtype=torch.float, device='cuda')\n+        y = torch.randn(4, 4, dtype=torch.float, device='cuda')\n+\n+        ge = self.checkTrace(f, (x, y))\n+        self.assertExpectedGraph(ge.graph_for(x,y))", "path": "test/test_jit.py", "position": null, "original_position": 29, "commit_id": "0611329e624bde6c4395688d710fbcd4adcd1d71", "original_commit_id": "dc32244f25cfab06d29be40f72cea2b3e2af0756", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "I'm confused about your comment. The expects you added have no constant nodes at the top level, so what I proposed should still be easy to do.\r\n\r\nAlso, checking that only nodes you have are constants or fusion groups is as easy as\r\n```python\r\nself.assertTrue(all(node.kind() in {'prim::Constant', 'prim::FusionGroup'} for node in nodes))\r\n```", "created_at": "2018-09-06T15:44:36Z", "updated_at": "2018-11-23T15:50:40Z", "html_url": "https://github.com/pytorch/pytorch/pull/11150#discussion_r215677347", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/11150", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/215677347"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/11150#discussion_r215677347"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/11150"}}, "body_html": "<p>I'm confused about your comment. The expects you added have no constant nodes at the top level, so what I proposed should still be easy to do.</p>\n<p>Also, checking that only nodes you have are constants or fusion groups is as easy as</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-c1\">self</span>.assertTrue(<span class=\"pl-c1\">all</span>(node.kind() <span class=\"pl-k\">in</span> {<span class=\"pl-s\"><span class=\"pl-pds\">'</span>prim::Constant<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>prim::FusionGroup<span class=\"pl-pds\">'</span></span>} <span class=\"pl-k\">for</span> node <span class=\"pl-k\">in</span> nodes))</pre></div>", "body_text": "I'm confused about your comment. The expects you added have no constant nodes at the top level, so what I proposed should still be easy to do.\nAlso, checking that only nodes you have are constants or fusion groups is as easy as\nself.assertTrue(all(node.kind() in {'prim::Constant', 'prim::FusionGroup'} for node in nodes))", "in_reply_to_id": 214439949}