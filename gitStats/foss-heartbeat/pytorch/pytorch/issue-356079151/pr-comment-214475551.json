{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/214475551", "pull_request_review_id": 151549071, "id": 214475551, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNDQ3NTU1MQ==", "diff_hunk": "@@ -668,6 +669,24 @@ def f(x, y):\n         y = torch.randn(4, 4, dtype=torch.float, device='cuda')\n \n         ge = self.checkTrace(f, (x, y))\n+        self.assertExpectedGraph(ge.graph_for(x,y))\n+\n+    @unittest.skipIf(IS_WINDOWS, \"NYI: fuser support for Windows\")\n+    @unittest.skipIf(not RUN_CUDA, \"fuser requires CUDA\")\n+    @skipIfRocm\n+    def test_comparison_eq_ne(self):\n+        def f(x, y):\n+            mask = (x == 0).type_as(x)\n+            z = x * mask + y\n+            mask = (x != 0).type_as(x)\n+            z = z * mask + y\n+            return z\n+\n+        x = torch.randn(4, 4, dtype=torch.float, device='cuda')\n+        y = torch.randn(4, 4, dtype=torch.float, device='cuda')\n+\n+        ge = self.checkTrace(f, (x, y))\n+        self.assertExpectedGraph(ge.graph_for(x,y))", "path": "test/test_jit.py", "position": null, "original_position": 29, "commit_id": "0611329e624bde6c4395688d710fbcd4adcd1d71", "original_commit_id": "dc32244f25cfab06d29be40f72cea2b3e2af0756", "user": {"login": "ngimel", "id": 15841449, "node_id": "MDQ6VXNlcjE1ODQxNDQ5", "avatar_url": "https://avatars3.githubusercontent.com/u/15841449?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ngimel", "html_url": "https://github.com/ngimel", "followers_url": "https://api.github.com/users/ngimel/followers", "following_url": "https://api.github.com/users/ngimel/following{/other_user}", "gists_url": "https://api.github.com/users/ngimel/gists{/gist_id}", "starred_url": "https://api.github.com/users/ngimel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ngimel/subscriptions", "organizations_url": "https://api.github.com/users/ngimel/orgs", "repos_url": "https://api.github.com/users/ngimel/repos", "events_url": "https://api.github.com/users/ngimel/events{/privacy}", "received_events_url": "https://api.github.com/users/ngimel/received_events", "type": "User", "site_admin": false}, "body": "Arbitrary number of `int = prim::Constant` nodes gets added to list(graph.nodes()), in these particular cases len(nodes) is 3. I can't find a good way to filter them out other than grepping for something `aten::` or `Float(*`, which seems incredibly fragile. ", "created_at": "2018-08-31T21:07:42Z", "updated_at": "2018-11-23T15:50:30Z", "html_url": "https://github.com/pytorch/pytorch/pull/11150#discussion_r214475551", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/11150", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/214475551"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/11150#discussion_r214475551"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/11150"}}, "body_html": "<p>Arbitrary number of <code>int = prim::Constant</code> nodes gets added to list(graph.nodes()), in these particular cases len(nodes) is 3. I can't find a good way to filter them out other than grepping for something <code>aten::</code> or <code>Float(*</code>, which seems incredibly fragile.</p>", "body_text": "Arbitrary number of int = prim::Constant nodes gets added to list(graph.nodes()), in these particular cases len(nodes) is 3. I can't find a good way to filter them out other than grepping for something aten:: or Float(*, which seems incredibly fragile.", "in_reply_to_id": 214439949}