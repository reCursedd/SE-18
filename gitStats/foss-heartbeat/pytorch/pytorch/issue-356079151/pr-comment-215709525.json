{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/215709525", "pull_request_review_id": 153036071, "id": 215709525, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNTcwOTUyNQ==", "diff_hunk": "@@ -668,6 +669,24 @@ def f(x, y):\n         y = torch.randn(4, 4, dtype=torch.float, device='cuda')\n \n         ge = self.checkTrace(f, (x, y))\n+        self.assertExpectedGraph(ge.graph_for(x,y))\n+\n+    @unittest.skipIf(IS_WINDOWS, \"NYI: fuser support for Windows\")\n+    @unittest.skipIf(not RUN_CUDA, \"fuser requires CUDA\")\n+    @skipIfRocm\n+    def test_comparison_eq_ne(self):\n+        def f(x, y):\n+            mask = (x == 0).type_as(x)\n+            z = x * mask + y\n+            mask = (x != 0).type_as(x)\n+            z = z * mask + y\n+            return z\n+\n+        x = torch.randn(4, 4, dtype=torch.float, device='cuda')\n+        y = torch.randn(4, 4, dtype=torch.float, device='cuda')\n+\n+        ge = self.checkTrace(f, (x, y))\n+        self.assertExpectedGraph(ge.graph_for(x,y))", "path": "test/test_jit.py", "position": null, "original_position": 29, "commit_id": "0611329e624bde6c4395688d710fbcd4adcd1d71", "original_commit_id": "dc32244f25cfab06d29be40f72cea2b3e2af0756", "user": {"login": "ngimel", "id": 15841449, "node_id": "MDQ6VXNlcjE1ODQxNDQ5", "avatar_url": "https://avatars3.githubusercontent.com/u/15841449?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ngimel", "html_url": "https://github.com/ngimel", "followers_url": "https://api.github.com/users/ngimel/followers", "following_url": "https://api.github.com/users/ngimel/following{/other_user}", "gists_url": "https://api.github.com/users/ngimel/gists{/gist_id}", "starred_url": "https://api.github.com/users/ngimel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ngimel/subscriptions", "organizations_url": "https://api.github.com/users/ngimel/orgs", "repos_url": "https://api.github.com/users/ngimel/repos", "events_url": "https://api.github.com/users/ngimel/events{/privacy}", "received_events_url": "https://api.github.com/users/ngimel/received_events", "type": "User", "site_admin": false}, "body": "Added a test for all fused nodes. \r\nHere's a graph I was getting when I was trying to add the test as you suggested:\r\n```\r\nroot@4685160f54af:/workspace/ngimel/pytorch_upstream# python test/test_jit.py TestJit.test_comparison_ge_le\r\ngraph(%0 : Float(*, *)\r\n      %1 : Float(*, *)) {\r\n  %2 : int = prim::Constant[value=0]()\r\n  %6 : int = prim::Constant[value=1]()\r\n  %14 : Float(*, *) = prim::FusionGroup_0[device=0](%1, %0)\r\n  return (%14);\r\n}\r\nwith prim::FusionGroup_0 = graph(%1 : Float(*, *)\r\n      %8 : Float(*, *)) {\r\n  %19 : int = prim::Constant[value=0]()\r\n  %20 : Byte(*, *) = aten::ge(%8, %19)\r\n  %18 : Float(*, *) = aten::type_as(%20, %8)\r\n  %16 : Float(*, *) = aten::mul(%8, %18)\r\n  %13 : int = prim::Constant[value=1]()\r\n  %14 : Float(*, *) = aten::add(%16, %1, %13)\r\n  %10 : int = prim::Constant[value=0]()\r\n  %11 : Byte(*, *) = aten::le(%8, %10)\r\n  %9 : Float(*, *) = aten::type_as(%11, %8)\r\n  %6 : Float(*, *) = aten::mul(%14, %9)\r\n  %2 : int = prim::Constant[value=1]()\r\n  %3 : Float(*, *) = aten::add(%6, %1, %2)\r\n  return (%3);\r\n}\r\n```\r\nWith everythin jit-related being in a rapid motion and no documentation on what functions are available (e.g. `node.kind()`, or even `graph_for` itself), making robust tests is non-trivial. ", "created_at": "2018-09-06T17:21:38Z", "updated_at": "2018-11-23T15:50:41Z", "html_url": "https://github.com/pytorch/pytorch/pull/11150#discussion_r215709525", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/11150", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/215709525"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/11150#discussion_r215709525"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/11150"}}, "body_html": "<p>Added a test for all fused nodes.<br>\nHere's a graph I was getting when I was trying to add the test as you suggested:</p>\n<pre><code>root@4685160f54af:/workspace/ngimel/pytorch_upstream# python test/test_jit.py TestJit.test_comparison_ge_le\ngraph(%0 : Float(*, *)\n      %1 : Float(*, *)) {\n  %2 : int = prim::Constant[value=0]()\n  %6 : int = prim::Constant[value=1]()\n  %14 : Float(*, *) = prim::FusionGroup_0[device=0](%1, %0)\n  return (%14);\n}\nwith prim::FusionGroup_0 = graph(%1 : Float(*, *)\n      %8 : Float(*, *)) {\n  %19 : int = prim::Constant[value=0]()\n  %20 : Byte(*, *) = aten::ge(%8, %19)\n  %18 : Float(*, *) = aten::type_as(%20, %8)\n  %16 : Float(*, *) = aten::mul(%8, %18)\n  %13 : int = prim::Constant[value=1]()\n  %14 : Float(*, *) = aten::add(%16, %1, %13)\n  %10 : int = prim::Constant[value=0]()\n  %11 : Byte(*, *) = aten::le(%8, %10)\n  %9 : Float(*, *) = aten::type_as(%11, %8)\n  %6 : Float(*, *) = aten::mul(%14, %9)\n  %2 : int = prim::Constant[value=1]()\n  %3 : Float(*, *) = aten::add(%6, %1, %2)\n  return (%3);\n}\n</code></pre>\n<p>With everythin jit-related being in a rapid motion and no documentation on what functions are available (e.g. <code>node.kind()</code>, or even <code>graph_for</code> itself), making robust tests is non-trivial.</p>", "body_text": "Added a test for all fused nodes.\nHere's a graph I was getting when I was trying to add the test as you suggested:\nroot@4685160f54af:/workspace/ngimel/pytorch_upstream# python test/test_jit.py TestJit.test_comparison_ge_le\ngraph(%0 : Float(*, *)\n      %1 : Float(*, *)) {\n  %2 : int = prim::Constant[value=0]()\n  %6 : int = prim::Constant[value=1]()\n  %14 : Float(*, *) = prim::FusionGroup_0[device=0](%1, %0)\n  return (%14);\n}\nwith prim::FusionGroup_0 = graph(%1 : Float(*, *)\n      %8 : Float(*, *)) {\n  %19 : int = prim::Constant[value=0]()\n  %20 : Byte(*, *) = aten::ge(%8, %19)\n  %18 : Float(*, *) = aten::type_as(%20, %8)\n  %16 : Float(*, *) = aten::mul(%8, %18)\n  %13 : int = prim::Constant[value=1]()\n  %14 : Float(*, *) = aten::add(%16, %1, %13)\n  %10 : int = prim::Constant[value=0]()\n  %11 : Byte(*, *) = aten::le(%8, %10)\n  %9 : Float(*, *) = aten::type_as(%11, %8)\n  %6 : Float(*, *) = aten::mul(%14, %9)\n  %2 : int = prim::Constant[value=1]()\n  %3 : Float(*, *) = aten::add(%6, %1, %2)\n  return (%3);\n}\n\nWith everythin jit-related being in a rapid motion and no documentation on what functions are available (e.g. node.kind(), or even graph_for itself), making robust tests is non-trivial.", "in_reply_to_id": 214439949}