{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/134714276", "pull_request_review_id": 58036451, "id": 134714276, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNDcxNDI3Ng==", "diff_hunk": "@@ -14,102 +14,103 @@ struct THCNumerics {\n };\n \n template <>\n-struct THCNumerics<unsigned char> {\n-  static inline __host__ __device__ unsigned char min() { return 0; }\n-  static inline __host__ __device__ unsigned char max() { return UCHAR_MAX; }\n-\n-  static inline __host__ __device__ bool lt(unsigned char a, unsigned char b) { return a < b; }\n-  static inline __host__ __device__ bool le(unsigned char a, unsigned char b) { return a <= b; }\n-  static inline __host__ __device__ bool gt(unsigned char a, unsigned char b) { return a > b; }\n-  static inline __host__ __device__ bool ge(unsigned char a, unsigned char b) { return a >= b; }\n-  static inline __host__ __device__ bool eq(unsigned char a, unsigned char b) { return a == b; }\n-  static inline __host__ __device__ bool ne(unsigned char a, unsigned char b) { return a != b; }\n-\n-  static inline __host__ __device__  unsigned char add(unsigned char a, unsigned char b) { return a + b; }\n-  static inline __host__ __device__  unsigned char mul(unsigned char a, unsigned char b) { return a * b; }\n-  static inline __host__ __device__  unsigned char sub(unsigned char a, unsigned char b) { return a - b; }\n-  static inline __host__ __device__  unsigned char div(unsigned char a, unsigned char b) { return a / b; }\n-  static inline __host__ __device__  unsigned char abs(unsigned char a) { return abs(a); }\n+struct THCNumerics<uint8_t> {\n+  static inline __host__ __device__ uint8_t min() { return 0; }\n+  static inline __host__ __device__ uint8_t max() { return UCHAR_MAX; }\n+\n+  static inline __host__ __device__ bool lt(uint8_t a, uint8_t b) { return a < b; }\n+  static inline __host__ __device__ bool le(uint8_t a, uint8_t b) { return a <= b; }\n+  static inline __host__ __device__ bool gt(uint8_t a, uint8_t b) { return a > b; }\n+  static inline __host__ __device__ bool ge(uint8_t a, uint8_t b) { return a >= b; }\n+  static inline __host__ __device__ bool eq(uint8_t a, uint8_t b) { return a == b; }\n+  static inline __host__ __device__ bool ne(uint8_t a, uint8_t b) { return a != b; }\n+\n+  static inline __host__ __device__  uint8_t add(uint8_t a, uint8_t b) { return a + b; }\n+  static inline __host__ __device__  uint8_t mul(uint8_t a, uint8_t b) { return a * b; }\n+  static inline __host__ __device__  uint8_t sub(uint8_t a, uint8_t b) { return a - b; }\n+  static inline __host__ __device__  uint8_t div(uint8_t a, uint8_t b) { return a / b; }\n+  static inline __host__ __device__  uint8_t abs(uint8_t a) { return abs(a); }\n };\n \n template <>\n-struct THCNumerics<char> {\n-  static inline __host__ __device__ char min() { return CHAR_MIN; }\n-  static inline __host__ __device__ char max() { return CHAR_MAX; }\n-\n-  static inline __host__ __device__ bool lt(char a, char b) { return a < b; }\n-  static inline __host__ __device__ bool le(char a, char b) { return a <= b; }\n-  static inline __host__ __device__ bool gt(char a, char b) { return a > b; }\n-  static inline __host__ __device__ bool ge(char a, char b) { return a >= b; }\n-  static inline __host__ __device__ bool eq(char a, char b) { return a == b; }\n-  static inline __host__ __device__ bool ne(char a, char b) { return a != b; }\n-\n-  static inline __host__ __device__  char neg(char a) { return -a; }\n-  static inline __host__ __device__  char add(char a, char b) { return a + b; }\n-  static inline __host__ __device__  char mul(char a, char b) { return a * b; }\n-  static inline __host__ __device__  char sub(char a, char b) { return a - b; }\n-  static inline __host__ __device__  char div(char a, char b) { return a / b; }\n-  static inline __host__ __device__  char abs(char a) { return ::abs((int)a); }\n+struct THCNumerics<int8_t> {\n+  static inline __host__ __device__ int8_t min() { return CHAR_MIN; }\n+  static inline __host__ __device__ int8_t max() { return CHAR_MAX; }\n+\n+  static inline __host__ __device__ bool lt(int8_t a, int8_t b) { return a < b; }\n+  static inline __host__ __device__ bool le(int8_t a, int8_t b) { return a <= b; }\n+  static inline __host__ __device__ bool gt(int8_t a, int8_t b) { return a > b; }\n+  static inline __host__ __device__ bool ge(int8_t a, int8_t b) { return a >= b; }\n+  static inline __host__ __device__ bool eq(int8_t a, int8_t b) { return a == b; }\n+  static inline __host__ __device__ bool ne(int8_t a, int8_t b) { return a != b; }\n+\n+  static inline __host__ __device__  int8_t neg(int8_t a) { return -a; }\n+  static inline __host__ __device__  int8_t add(int8_t a, int8_t b) { return a + b; }\n+  static inline __host__ __device__  int8_t mul(int8_t a, int8_t b) { return a * b; }\n+  static inline __host__ __device__  int8_t sub(int8_t a, int8_t b) { return a - b; }\n+  static inline __host__ __device__  int8_t div(int8_t a, int8_t b) { return a / b; }\n+  static inline __host__ __device__  int8_t abs(int8_t a) { return ::abs((int)a); }\n };\n \n template <>\n-struct THCNumerics<short> {\n-  static inline __host__ __device__ short min() { return SHRT_MIN; }\n-  static inline __host__ __device__ short max() { return SHRT_MAX; }\n-\n-  static inline __host__ __device__ bool lt(short a, short b) { return a < b; }\n-  static inline __host__ __device__ bool le(short a, short b) { return a <= b; }\n-  static inline __host__ __device__ bool gt(short a, short b) { return a > b; }\n-  static inline __host__ __device__ bool ge(short a, short b) { return a >= b; }\n-  static inline __host__ __device__ bool eq(short a, short b) { return a == b; }\n-  static inline __host__ __device__ bool ne(short a, short b) { return a != b; }\n-\n-  static inline __host__ __device__  short neg(short a) { return -a; }\n-  static inline __host__ __device__  short add(short a, short b) { return a + b; }\n-  static inline __host__ __device__  short mul(short a, short b) { return a * b; }\n-  static inline __host__ __device__  short sub(short a, short b) { return a - b; }\n-  static inline __host__ __device__  short div(short a, short b) { return a / b; }\n-  static inline __host__ __device__  short abs(short a) { return ::abs((int)a); }\n+struct THCNumerics<int16_t> {\n+  static inline __host__ __device__ int16_t min() { return SHRT_MIN; }\n+  static inline __host__ __device__ int16_t max() { return SHRT_MAX; }\n+\n+  static inline __host__ __device__ bool lt(int16_t a, int16_t b) { return a < b; }\n+  static inline __host__ __device__ bool le(int16_t a, int16_t b) { return a <= b; }\n+  static inline __host__ __device__ bool gt(int16_t a, int16_t b) { return a > b; }\n+  static inline __host__ __device__ bool ge(int16_t a, int16_t b) { return a >= b; }\n+  static inline __host__ __device__ bool eq(int16_t a, int16_t b) { return a == b; }\n+  static inline __host__ __device__ bool ne(int16_t a, int16_t b) { return a != b; }\n+\n+  static inline __host__ __device__  int16_t neg(int16_t a) { return -a; }\n+  static inline __host__ __device__  int16_t add(int16_t a, int16_t b) { return a + b; }\n+  static inline __host__ __device__  int16_t mul(int16_t a, int16_t b) { return a * b; }\n+  static inline __host__ __device__  int16_t sub(int16_t a, int16_t b) { return a - b; }\n+  static inline __host__ __device__  int16_t div(int16_t a, int16_t b) { return a / b; }\n+  static inline __host__ __device__  int16_t abs(int16_t a) { return ::abs((int)a); }\n };\n \n template <>\n-struct THCNumerics<int> {\n-  static inline __host__ __device__ int min() { return INT_MIN; }\n-  static inline __host__ __device__ int max() { return INT_MAX; }\n-\n-  static inline __host__ __device__ bool lt(int a, int b) { return a < b; }\n-  static inline __host__ __device__ bool le(int a, int b) { return a <= b; }\n-  static inline __host__ __device__ bool gt(int a, int b) { return a > b; }\n-  static inline __host__ __device__ bool ge(int a, int b) { return a >= b; }\n-  static inline __host__ __device__ bool eq(int a, int b) { return a == b; }\n-  static inline __host__ __device__ bool ne(int a, int b) { return a != b; }\n-\n-  static inline __host__ __device__  int neg(int a) { return -a; }\n-  static inline __host__ __device__  int add(int a, int b) { return a + b; }\n-  static inline __host__ __device__  int mul(int a, int b) { return a * b; }\n-  static inline __host__ __device__  int sub(int a, int b) { return a - b; }\n-  static inline __host__ __device__  int div(int a, int b) { return a / b; }\n-  static inline __host__ __device__  int abs(int a) { return ::abs(a); }\n+struct THCNumerics<int32_t> {\n+  static inline __host__ __device__ int32_t min() { return INT_MIN; }\n+  static inline __host__ __device__ int32_t max() { return INT_MAX; }\n+\n+  static inline __host__ __device__ bool lt(int32_t a, int32_t b) { return a < b; }\n+  static inline __host__ __device__ bool le(int32_t a, int32_t b) { return a <= b; }\n+  static inline __host__ __device__ bool gt(int32_t a, int32_t b) { return a > b; }\n+  static inline __host__ __device__ bool ge(int32_t a, int32_t b) { return a >= b; }\n+  static inline __host__ __device__ bool eq(int32_t a, int32_t b) { return a == b; }\n+  static inline __host__ __device__ bool ne(int32_t a, int32_t b) { return a != b; }\n+\n+  static inline __host__ __device__  int32_t neg(int32_t a) { return -a; }\n+  static inline __host__ __device__  int32_t add(int32_t a, int32_t b) { return a + b; }\n+  static inline __host__ __device__  int32_t mul(int32_t a, int32_t b) { return a * b; }\n+  static inline __host__ __device__  int32_t sub(int32_t a, int32_t b) { return a - b; }\n+  static inline __host__ __device__  int32_t div(int32_t a, int32_t b) { return a / b; }\n+  static inline __host__ __device__  int32_t abs(int32_t a) { return ::abs(a); }\n };\n \n template <>\n-struct THCNumerics<long> {\n-  static inline __host__ __device__ long min() { return LONG_MIN; }\n-  static inline __host__ __device__ long max() { return LONG_MAX; }\n-\n-  static inline __host__ __device__ bool lt(long a, long b) { return a < b; }\n-  static inline __host__ __device__ bool le(long a, long b) { return a <= b; }\n-  static inline __host__ __device__ bool gt(long a, long b) { return a > b; }\n-  static inline __host__ __device__ bool ge(long a, long b) { return a >= b; }\n-  static inline __host__ __device__ bool eq(long a, long b) { return a == b; }\n-  static inline __host__ __device__ bool ne(long a, long b) { return a != b; }\n-\n-  static inline __host__ __device__  long neg(long a) { return -a; }\n-  static inline __host__ __device__  long add(long a, long b) { return a + b; }\n-  static inline __host__ __device__  long mul(long a, long b) { return a * b; }\n-  static inline __host__ __device__  long sub(long a, long b) { return a - b; }\n-  static inline __host__ __device__  long div(long a, long b) { return a / b; };\n-  static inline __host__ __device__  long abs(long a) { return labs(a); }\n+struct THCNumerics<int64_t> {\n+  static inline __host__ __device__ int64_t min() { return LONG_MIN; }", "path": "torch/lib/THC/THCNumerics.cuh", "position": null, "original_position": 168, "commit_id": "097e311833283192a672dabcfc46cf3e6649e2e7", "original_commit_id": "042c66d2e8a3cdb2cfdfd2567154cb8da3369caa", "user": {"login": "fmassa", "id": 9110200, "node_id": "MDQ6VXNlcjkxMTAyMDA=", "avatar_url": "https://avatars2.githubusercontent.com/u/9110200?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fmassa", "html_url": "https://github.com/fmassa", "followers_url": "https://api.github.com/users/fmassa/followers", "following_url": "https://api.github.com/users/fmassa/following{/other_user}", "gists_url": "https://api.github.com/users/fmassa/gists{/gist_id}", "starred_url": "https://api.github.com/users/fmassa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fmassa/subscriptions", "organizations_url": "https://api.github.com/users/fmassa/orgs", "repos_url": "https://api.github.com/users/fmassa/repos", "events_url": "https://api.github.com/users/fmassa/events{/privacy}", "received_events_url": "https://api.github.com/users/fmassa/received_events", "type": "User", "site_admin": false}, "body": "I think the only occurrences of `THCNumerics<type>::min()` and `THCNumerics<type>::max()` are [here](https://github.com/pytorch/pytorch/blob/master/torch/lib/THC/generic/THCTensorMathReduce.cu#L327) and [here](https://github.com/pytorch/pytorch/blob/master/torch/lib/THC/generic/THCTensorMathReduce.cu#L311), so maybe use-cases where we might have problems is when a `LongTensor` has a value greater than `2^32` inside and we call `torch.min(tensor)`?", "created_at": "2017-08-23T10:28:53Z", "updated_at": "2018-11-23T15:34:26Z", "html_url": "https://github.com/pytorch/pytorch/pull/2440#discussion_r134714276", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/2440", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/134714276"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/2440#discussion_r134714276"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/2440"}}, "body_html": "<p>I think the only occurrences of <code>THCNumerics&lt;type&gt;::min()</code> and <code>THCNumerics&lt;type&gt;::max()</code> are <a href=\"https://github.com/pytorch/pytorch/blob/master/torch/lib/THC/generic/THCTensorMathReduce.cu#L327\">here</a> and <a href=\"https://github.com/pytorch/pytorch/blob/master/torch/lib/THC/generic/THCTensorMathReduce.cu#L311\">here</a>, so maybe use-cases where we might have problems is when a <code>LongTensor</code> has a value greater than <code>2^32</code> inside and we call <code>torch.min(tensor)</code>?</p>", "body_text": "I think the only occurrences of THCNumerics<type>::min() and THCNumerics<type>::max() are here and here, so maybe use-cases where we might have problems is when a LongTensor has a value greater than 2^32 inside and we call torch.min(tensor)?", "in_reply_to_id": 134021432}