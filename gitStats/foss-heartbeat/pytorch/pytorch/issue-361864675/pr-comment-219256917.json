{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/219256917", "pull_request_review_id": 157390248, "id": 219256917, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxOTI1NjkxNw==", "diff_hunk": "@@ -297,6 +301,59 @@ def check(self, value):\n         return (value == value).all()  # False for NANs.\n \n \n+class _Cat(Constraint):\n+    \"\"\"\n+    Constraint functor that applies a sequence of constraints\n+    `cseq` at the submatrices at dimension `dim`,\n+    each of size `lengths[dim]`, in a way compatible with :func:`torch.cat`.\n+    \"\"\"\n+    def __init__(self, cseq, dim=0, lengths=None):\n+        assert all(isinstance(c, Constraint) for c in cseq)\n+        self.cseq = list(cseq)\n+        if lengths is None:\n+            lengths = [1] * len(self.cseq)\n+        self.lengths = list(lengths)\n+        assert len(self.lengths) == len(self.cseq)\n+        self.dim = dim\n+\n+    def check(self, value):\n+        assert -value.dim() <= self.dim < value.dim()\n+        checks = []\n+        start = 0\n+        for constr, length in zip(self.cseq, self.lengths):\n+            v = value.narrow(self.dim, start, length)\n+            checks.append(constr.check(v))\n+            start = start + length  # avoid += for jit compat\n+        return torch.cat(checks, self.dim)\n+\n+\n+class _Stack(Constraint):\n+    \"\"\"\n+    Constraint functor that applies a sequence of constraints\n+    `cseq` at the submatrices at dimension `dim`,\n+    each of size `lengths[dim]` in a way compatible with :func:`torch.stack`.\n+    \"\"\"\n+    def __init__(self, cseq, dim=0, lengths=None):", "path": "torch/distributions/constraints.py", "position": null, "original_position": 68, "commit_id": "a8745e666ea64dcec8487005e48f55dd90ac42da", "original_commit_id": "3c15eda3fd9f3325bc2060ab36a6e329a29f16f5", "user": {"login": "ahmadsalim", "id": 1647846, "node_id": "MDQ6VXNlcjE2NDc4NDY=", "avatar_url": "https://avatars0.githubusercontent.com/u/1647846?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ahmadsalim", "html_url": "https://github.com/ahmadsalim", "followers_url": "https://api.github.com/users/ahmadsalim/followers", "following_url": "https://api.github.com/users/ahmadsalim/following{/other_user}", "gists_url": "https://api.github.com/users/ahmadsalim/gists{/gist_id}", "starred_url": "https://api.github.com/users/ahmadsalim/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ahmadsalim/subscriptions", "organizations_url": "https://api.github.com/users/ahmadsalim/orgs", "repos_url": "https://api.github.com/users/ahmadsalim/repos", "events_url": "https://api.github.com/users/ahmadsalim/events{/privacy}", "received_events_url": "https://api.github.com/users/ahmadsalim/received_events", "type": "User", "site_admin": false}, "body": "I think I agree! I was just thinking about how weird it was when I was doing the slicing.", "created_at": "2018-09-20T17:44:48Z", "updated_at": "2018-11-23T15:51:45Z", "html_url": "https://github.com/pytorch/pytorch/pull/11868#discussion_r219256917", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/11868", "author_association": "NONE", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/219256917"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/11868#discussion_r219256917"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/11868"}}, "body_html": "<p>I think I agree! I was just thinking about how weird it was when I was doing the slicing.</p>", "body_text": "I think I agree! I was just thinking about how weird it was when I was doing the slicing.", "in_reply_to_id": 219255264}