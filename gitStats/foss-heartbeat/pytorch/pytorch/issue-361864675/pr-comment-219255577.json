{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/219255577", "pull_request_review_id": 157388138, "id": 219255577, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxOTI1NTU3Nw==", "diff_hunk": "@@ -533,9 +535,159 @@ def _inverse_on_event(self, y):\n         return y.tril(-1) + y.diag().log().diag()\n \n     def _call(self, x):\n-        flat_x = x.contiguous().view((-1,) + x.shape[-2:])\n+        flat_x = x.reshape((-1,) + x.shape[-2:])\n         return torch.stack([self._call_on_event(z) for z in flat_x]).view(x.shape)\n \n     def _inverse(self, y):\n-        flat_y = y.contiguous().view((-1,) + y.shape[-2:])\n+        flat_y = y.reshape((-1,) + y.shape[-2:])\n         return torch.stack([self._inverse_on_event(z) for z in flat_y]).view(y.shape)\n+\n+\n+class CatTransform(Transform):\n+    \"\"\"\n+    Transform functor that applies a sequence of transforms `tseq`\n+    component-wise to each submatrix at `dim`, of length `lengths[dim]`,\n+    in a way compatible with :func:`torch.cat`.\n+    \"\"\"\n+    def __init__(self, tseq, dim=0, lengths=None):\n+        assert all(isinstance(t, Transform) for t in tseq)\n+        super(CatTransform, self).__init__()\n+        self.transforms = list(tseq)\n+        if lengths is None:\n+            lengths = [1] * len(self.transforms)\n+        self.lengths = list(lengths)\n+        assert len(self.lengths) == len(self.transforms)\n+        self.dim = dim\n+\n+    @lazy_property\n+    def length(self):\n+        return sum(self.lengths)\n+\n+    def _call(self, x):\n+        assert -x.dim() <= self.dim < x.dim()\n+        assert x.size(self.dim) == len(self.transforms)\n+        yslices = []\n+        start = 0\n+        for trans, length in zip(self.transforms, self.lengths):\n+            xslice = x.narrow(self.dim, start, length)\n+            yslices.append(trans(xslice))\n+            start = start + length  # avoid += for jit compat\n+        return torch.cat(yslices, dim=self.dim)\n+\n+    def _inverse(self, y):\n+        assert -y.dim() <= self.dim < y.dim()\n+        assert y.size(self.dim) == len(self.transforms)\n+        xslices = []\n+        start = 0\n+        for trans, length in zip(self.transforms, self.lengths):\n+            yslice = y.narrow(self.dim, start, length)\n+            xslices.append(trans.inv(yslice))\n+            start = start + length  # avoid += for jit compat\n+        return torch.cat(xslices, dim=self.dim)\n+\n+    def log_abs_det_jacobian(self, x, y):\n+        assert -x.dim() <= self.dim < x.dim()\n+        assert x.size(self.dim) == len(self.transforms)\n+        assert -y.dim() <= self.dim < y.dim()\n+        assert y.size(self.dim) == len(self.transforms)\n+        logdetjacs = []\n+        start = 0\n+        for trans, length in zip(self.transforms, self.lengths):\n+            xslice = x.narrow(self.dim, start, length)\n+            yslice = y.narrow(self.dim, start, length)\n+            logdetjacs.append(trans.log_abs_det_jacobian(xslice, yslice))\n+            start = start + length  # avoid += for jit compat\n+        return torch.cat(logdetjacs, dim=self.dim)\n+\n+    @property\n+    def bijective(self):\n+        return all(t.bijective for t in self.transforms)\n+\n+    @constraints.dependent_property\n+    def domain(self):\n+        return constraints.cat([t.domain for t in self.transforms],\n+                               self.dim, self.lengths)\n+\n+    @constraints.dependent_property\n+    def codomain(self):\n+        return constraints.cat([t.codomain for t in self.transforms],\n+                               self.dim, self.lengths)\n+\n+\n+class StackTransform(Transform):\n+    \"\"\"\n+    Transform functor that applies a sequence of transforms `tseq`\n+    component-wise to each submatrix at `dim`, of size `lengths[dim]`\n+    in a way compatible with :func:`torch.stack`.\n+    \"\"\"\n+    def __init__(self, tseq, dim=0, lengths=None):", "path": "torch/distributions/transforms.py", "position": null, "original_position": 106, "commit_id": "a8745e666ea64dcec8487005e48f55dd90ac42da", "original_commit_id": "3c15eda3fd9f3325bc2060ab36a6e329a29f16f5", "user": {"login": "fritzo", "id": 648532, "node_id": "MDQ6VXNlcjY0ODUzMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/648532?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fritzo", "html_url": "https://github.com/fritzo", "followers_url": "https://api.github.com/users/fritzo/followers", "following_url": "https://api.github.com/users/fritzo/following{/other_user}", "gists_url": "https://api.github.com/users/fritzo/gists{/gist_id}", "starred_url": "https://api.github.com/users/fritzo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fritzo/subscriptions", "organizations_url": "https://api.github.com/users/fritzo/orgs", "repos_url": "https://api.github.com/users/fritzo/repos", "events_url": "https://api.github.com/users/fritzo/events{/privacy}", "received_events_url": "https://api.github.com/users/fritzo/received_events", "type": "User", "site_admin": false}, "body": "ditto: I think `lengths` makes sense for `Cat` but not for `Stack`. Am I missing something?", "created_at": "2018-09-20T17:40:34Z", "updated_at": "2018-11-23T15:51:45Z", "html_url": "https://github.com/pytorch/pytorch/pull/11868#discussion_r219255577", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/11868", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/219255577"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/11868#discussion_r219255577"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/11868"}}, "body_html": "<p>ditto: I think <code>lengths</code> makes sense for <code>Cat</code> but not for <code>Stack</code>. Am I missing something?</p>", "body_text": "ditto: I think lengths makes sense for Cat but not for Stack. Am I missing something?"}