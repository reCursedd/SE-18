{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/219043194", "pull_request_review_id": 157116228, "id": 219043194, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxOTA0MzE5NA==", "diff_hunk": "@@ -539,3 +541,112 @@ def _call(self, x):\n     def _inverse(self, y):\n         flat_y = y.contiguous().view((-1,) + y.shape[-2:])\n         return torch.stack([self._inverse_on_event(z) for z in flat_y]).view(y.shape)\n+\n+\n+class CatTransform(Transform):\n+    \"\"\"\n+    Transform functor that applies a sequence of transforms `tseq`\n+    component-wise to each submatrix at `dim` in a way compatible\n+    with `torch.cat`.\n+    \"\"\"\n+    def __init__(self, tseq, dim=0):\n+        assert all(isinstance(t, Transform) for t in tseq)\n+        super(CatTransform, self).__init__()\n+        self.transforms = list(tseq)\n+        self.dim = dim\n+    \n+    def _call(self, x):\n+        assert -x.dim() <= self.dim < x.dim()\n+        assert x.size(self.dim) == len(self.transforms)\n+        yslices = []\n+        for xslice, trans in zip(x.chunk(x.size(self.dim), self.dim), self.transforms):\n+            yslices.append(trans(xslice))\n+        return torch.cat(yslices, dim=self.dim)\n+\n+    def _inverse(self, y):\n+        assert -y.dim() <= self.dim < y.dim()\n+        assert y.size(self.dim) == len(self.transforms)\n+        xslices = []\n+        for yslice, trans in zip(y.chunk(y.size(self.dim), self.dim), self.transforms):\n+            xslices.append(trans.inv(yslice))\n+        return torch.cat(xslices, dim=self.dim)\n+\n+    def log_abs_det_jacobian(self, x, y):\n+        assert -x.dim() <= self.dim < x.dim()\n+        assert x.size(self.dim) == len(self.transforms)\n+        assert -y.dim() <= self.dim < y.dim()\n+        assert y.size(self.dim) == len(self.transforms)\n+        logdetjacs = []\n+        yslices = y.chunk(y.size(self.dim), self.dim)\n+        xslices = x.chunk(x.size(self.dim), self.dim)\n+        for xslice, yslice, trans in zip(xslices, yslices, self.transforms):\n+            logdetjacs.append(trans.log_abs_det_jacobian(xslice, yslice))\n+        return torch.cat(logdetjacs, dim=self.dim)\n+\n+    @property\n+    def bijective(self):\n+        return all(t.bijective for t in self.transforms)\n+\n+    @constraints.dependent_property\n+    def domain(self):\n+        return constraints.cat([t.domain for t in self.transforms], self.dim)\n+\n+    @constraints.dependent_property\n+    def codomain(self):\n+        return constraints.cat([t.codomain for t in self.transforms], self.dim)\n+\n+\n+class StackTransform(Transform):\n+    \"\"\"\n+    Transform functor that applies a sequence of transforms `tseq`\n+    component-wise to each submatrix at `dim` in a way compatible\n+    with `torch.stack`.\n+    \"\"\"\n+    def __init__(self, tseq, dim=0):\n+        assert all(isinstance(t, Transform) for t in tseq)\n+        super(StackTransform, self).__init__()\n+        self.transforms = list(tseq)\n+        self.dim = dim\n+\n+    def _slice(self, z):\n+        return [z.select(self.dim, i) for i in range(z.size(self.dim))]\n+\n+    def _call(self, x):\n+        assert -x.dim() <= self.dim < x.dim()\n+        assert x.size(self.dim) == len(self.transforms)\n+        yslices = []\n+        for xslice, trans in zip(self._slice(x), self.transforms):\n+            yslices.append(trans(xslice))\n+        return torch.stack(yslices, dim=self.dim)\n+\n+    def _inverse(self, y):\n+        assert -y.dim() <= self.dim < y.dim()\n+        assert y.size(self.dim) == len(self.transforms)\n+        xslices = []\n+        for yslice, trans in zip(self._slice(y), self.transforms):\n+            xslices.append(trans.inv(yslice))\n+        return torch.stack(xslices, dim=self.dim)\n+\n+    def log_abs_det_jacobian(self, x, y):\n+        assert -x.dim() <= self.dim < x.dim()\n+        assert x.size(self.dim) == len(self.transforms)\n+        assert -y.dim() <= self.dim < y.dim()\n+        assert y.size(self.dim) == len(self.transforms)\n+        logdetjacs = []\n+        yslices = self._slice(y)\n+        xslices = self._slice(x)\n+        for xslice, yslice, trans in zip(xslices, yslices, self.transforms):\n+            logdetjacs.append(trans.log_abs_det_jacobian(xslice, yslice))\n+        return torch.stack(logdetjacs, dim=self.dim)\n+\n+    @property\n+    def bijective(self):\n+        return all(t.bijective for t in self.transforms)\n+\n+    @constraints.dependent_property\n+    def domain(self):\n+        return constraints.stack([t.domain for t in self.transforms], self.dim)\n+\n+    @constraints.dependent_property\n+    def codomain(self):\n+        return constraints.stack([t.codomain for t in self.transforms], self.dim)", "path": "torch/distributions/transforms.py", "position": 165, "original_position": 127, "commit_id": "a8745e666ea64dcec8487005e48f55dd90ac42da", "original_commit_id": "e4d4309b77c68d605df24d65fe7b14e957d0fbaf", "user": {"login": "vishwakftw", "id": 23639302, "node_id": "MDQ6VXNlcjIzNjM5MzAy", "avatar_url": "https://avatars2.githubusercontent.com/u/23639302?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vishwakftw", "html_url": "https://github.com/vishwakftw", "followers_url": "https://api.github.com/users/vishwakftw/followers", "following_url": "https://api.github.com/users/vishwakftw/following{/other_user}", "gists_url": "https://api.github.com/users/vishwakftw/gists{/gist_id}", "starred_url": "https://api.github.com/users/vishwakftw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vishwakftw/subscriptions", "organizations_url": "https://api.github.com/users/vishwakftw/orgs", "repos_url": "https://api.github.com/users/vishwakftw/repos", "events_url": "https://api.github.com/users/vishwakftw/events{/privacy}", "received_events_url": "https://api.github.com/users/vishwakftw/received_events", "type": "User", "site_admin": false}, "body": "No newline is causing lint to fail.", "created_at": "2018-09-20T06:06:32Z", "updated_at": "2018-11-23T15:51:44Z", "html_url": "https://github.com/pytorch/pytorch/pull/11868#discussion_r219043194", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/11868", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/219043194"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/11868#discussion_r219043194"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/11868"}}, "body_html": "<p>No newline is causing lint to fail.</p>", "body_text": "No newline is causing lint to fail."}