{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/219266041", "pull_request_review_id": 157401954, "id": 219266041, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxOTI2NjA0MQ==", "diff_hunk": "@@ -212,3 +212,20 @@ def _transform_to_simplex(constraint):\n @transform_to.register(constraints.lower_cholesky)\n def _transform_to_lower_cholesky(constraint):\n     return transforms.LowerCholeskyTransform()\n+\n+\n+@biject_to.register(constraints.cat)", "path": "torch/distributions/constraint_registry.py", "position": 6, "original_position": 6, "commit_id": "a8745e666ea64dcec8487005e48f55dd90ac42da", "original_commit_id": "0eb3985a63a77f6b9a06c14000111f00ffe21894", "user": {"login": "fritzo", "id": 648532, "node_id": "MDQ6VXNlcjY0ODUzMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/648532?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fritzo", "html_url": "https://github.com/fritzo", "followers_url": "https://api.github.com/users/fritzo/followers", "following_url": "https://api.github.com/users/fritzo/following{/other_user}", "gists_url": "https://api.github.com/users/fritzo/gists{/gist_id}", "starred_url": "https://api.github.com/users/fritzo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fritzo/subscriptions", "organizations_url": "https://api.github.com/users/fritzo/orgs", "repos_url": "https://api.github.com/users/fritzo/repos", "events_url": "https://api.github.com/users/fritzo/events{/privacy}", "received_events_url": "https://api.github.com/users/fritzo/received_events", "type": "User", "site_admin": false}, "body": "Oh one more thing, you'll want to register bijections and transforms separately:\r\n```py\r\n@biject_to.register(constraints.cat)\r\ndef _biject_to_cat(constraint):\r\n    return transforms.CatTransform([biject_to(c) for c in constraint.cseq],\r\n                                   constraint.dim,\r\n                                   constraint.lengths)\r\n\r\n@transform_to.register(constraints.cat)\r\ndef _transform_to_cat(constraint):\r\n    return transforms.CatTransform([transform_to(c) for c in constraint.cseq],\r\n                                   constraint.dim,\r\n                                   constraint.lengths)\r\n```\r\nand similarly for `StackTransform`", "created_at": "2018-09-20T18:13:11Z", "updated_at": "2018-11-23T15:51:45Z", "html_url": "https://github.com/pytorch/pytorch/pull/11868#discussion_r219266041", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/11868", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/219266041"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/11868#discussion_r219266041"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/11868"}}, "body_html": "<p>Oh one more thing, you'll want to register bijections and transforms separately:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-en\">@biject_to.register</span>(constraints.cat)\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">_biject_to_cat</span>(<span class=\"pl-smi\">constraint</span>):\n    <span class=\"pl-k\">return</span> transforms.CatTransform([biject_to(c) <span class=\"pl-k\">for</span> c <span class=\"pl-k\">in</span> constraint.cseq],\n                                   constraint.dim,\n                                   constraint.lengths)\n\n<span class=\"pl-en\">@transform_to.register</span>(constraints.cat)\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">_transform_to_cat</span>(<span class=\"pl-smi\">constraint</span>):\n    <span class=\"pl-k\">return</span> transforms.CatTransform([transform_to(c) <span class=\"pl-k\">for</span> c <span class=\"pl-k\">in</span> constraint.cseq],\n                                   constraint.dim,\n                                   constraint.lengths)</pre></div>\n<p>and similarly for <code>StackTransform</code></p>", "body_text": "Oh one more thing, you'll want to register bijections and transforms separately:\n@biject_to.register(constraints.cat)\ndef _biject_to_cat(constraint):\n    return transforms.CatTransform([biject_to(c) for c in constraint.cseq],\n                                   constraint.dim,\n                                   constraint.lengths)\n\n@transform_to.register(constraints.cat)\ndef _transform_to_cat(constraint):\n    return transforms.CatTransform([transform_to(c) for c in constraint.cseq],\n                                   constraint.dim,\n                                   constraint.lengths)\nand similarly for StackTransform"}