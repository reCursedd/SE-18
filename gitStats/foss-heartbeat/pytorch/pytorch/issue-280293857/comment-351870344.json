{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/351870344", "html_url": "https://github.com/pytorch/pytorch/issues/4081#issuecomment-351870344", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/4081", "id": 351870344, "node_id": "MDEyOklzc3VlQ29tbWVudDM1MTg3MDM0NA==", "user": {"login": "lantiga", "id": 191033, "node_id": "MDQ6VXNlcjE5MTAzMw==", "avatar_url": "https://avatars2.githubusercontent.com/u/191033?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lantiga", "html_url": "https://github.com/lantiga", "followers_url": "https://api.github.com/users/lantiga/followers", "following_url": "https://api.github.com/users/lantiga/following{/other_user}", "gists_url": "https://api.github.com/users/lantiga/gists{/gist_id}", "starred_url": "https://api.github.com/users/lantiga/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lantiga/subscriptions", "organizations_url": "https://api.github.com/users/lantiga/orgs", "repos_url": "https://api.github.com/users/lantiga/repos", "events_url": "https://api.github.com/users/lantiga/events{/privacy}", "received_events_url": "https://api.github.com/users/lantiga/received_events", "type": "User", "site_admin": false}, "created_at": "2017-12-14T23:44:41Z", "updated_at": "2017-12-14T23:44:41Z", "author_association": "COLLABORATOR", "body_html": "<p>I think there's a change in <code>gen_variable_type.py</code> for inplace to work properly, i.e. independently from the non-inplace derivative definition (you should be able to use <code>self</code> for the non inplace and <code>output</code> for the inplace):</p>\n<pre><code>--- a/tools/autograd/gen_variable_type.py\n+++ b/tools/autograd/gen_variable_type.py\n@@ -414,12 +414,7 @@ def load_derivatives(path, declarations_by_signature, declarations_by_name):\n \n         declaration = declarations_by_name[defn_name][0]\n         base_name = defn_name if not declaration['inplace'] else defn_name[:-1]\n-        fwd_name = base_name + '_forward'\n-\n-        if declaration['inplace']:\n-            declaration['base_name'] = fwd_name + '_'\n-            declaration['derivative'] = declarations_by_name[base_name][0]['derivative']\n-            return None\n+        fwd_name = base_name + ('_forward' if not declaration['inplace'] else '_forward_')\n \n         assert len(declarations_by_name[fwd_name]) == 1\n</code></pre>", "body_text": "I think there's a change in gen_variable_type.py for inplace to work properly, i.e. independently from the non-inplace derivative definition (you should be able to use self for the non inplace and output for the inplace):\n--- a/tools/autograd/gen_variable_type.py\n+++ b/tools/autograd/gen_variable_type.py\n@@ -414,12 +414,7 @@ def load_derivatives(path, declarations_by_signature, declarations_by_name):\n \n         declaration = declarations_by_name[defn_name][0]\n         base_name = defn_name if not declaration['inplace'] else defn_name[:-1]\n-        fwd_name = base_name + '_forward'\n-\n-        if declaration['inplace']:\n-            declaration['base_name'] = fwd_name + '_'\n-            declaration['derivative'] = declarations_by_name[base_name][0]['derivative']\n-            return None\n+        fwd_name = base_name + ('_forward' if not declaration['inplace'] else '_forward_')\n \n         assert len(declarations_by_name[fwd_name]) == 1", "body": "I think there's a change in `gen_variable_type.py` for inplace to work properly, i.e. independently from the non-inplace derivative definition (you should be able to use `self` for the non inplace and `output` for the inplace):\r\n```\r\n--- a/tools/autograd/gen_variable_type.py\r\n+++ b/tools/autograd/gen_variable_type.py\r\n@@ -414,12 +414,7 @@ def load_derivatives(path, declarations_by_signature, declarations_by_name):\r\n \r\n         declaration = declarations_by_name[defn_name][0]\r\n         base_name = defn_name if not declaration['inplace'] else defn_name[:-1]\r\n-        fwd_name = base_name + '_forward'\r\n-\r\n-        if declaration['inplace']:\r\n-            declaration['base_name'] = fwd_name + '_'\r\n-            declaration['derivative'] = declarations_by_name[base_name][0]['derivative']\r\n-            return None\r\n+        fwd_name = base_name + ('_forward' if not declaration['inplace'] else '_forward_')\r\n \r\n         assert len(declarations_by_name[fwd_name]) == 1\r\n```"}