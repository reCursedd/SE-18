{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/184808126", "pull_request_review_id": 116044532, "id": 184808126, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NDgwODEyNg==", "diff_hunk": "@@ -102,6 +102,7 @@ void BlockToONNX(Block* old_block, Block* new_block, bool aten, std::unordered_m\n   auto cloneNode = [&](Node * node) {\n     auto n_ = ctx.block->appendNode(ctx.block->owningGraph()->createClone(node, envFn));\n     for(size_t i = 0; i < node->outputs().size(); i++) {\n+      n_->outputs()[i]->setType(node->outputs()[i]->type());", "path": "torch/csrc/jit/passes/onnx.cpp", "position": null, "original_position": 4, "commit_id": "46c6dde3de2a1b5518fcc0676ef1acdce0485956", "original_commit_id": "4442bd9b0b9e66bd381a7e45a7763e4984e5bd01", "user": {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, "body": "Create clone already copies types:\r\n\r\n```\r\n  Node * createClone(Node * n, std::function<Value*(Value*)> value_map, bool copy_blocks=true) {\r\n    //n can be from a different graph\r\n    Node * r = n->allocNewInstance(this);\r\n    for(auto o : n->outputs()) {\r\n      r->addOutput()->copyMetadata(o); // also copies types.\r\n    }\r\n```\r\n\r\nIs this line actually needed?", "created_at": "2018-04-27T21:12:11Z", "updated_at": "2018-11-23T15:43:21Z", "html_url": "https://github.com/pytorch/pytorch/pull/7044#discussion_r184808126", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/7044", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/184808126"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/7044#discussion_r184808126"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/7044"}}, "body_html": "<p>Create clone already copies types:</p>\n<pre><code>  Node * createClone(Node * n, std::function&lt;Value*(Value*)&gt; value_map, bool copy_blocks=true) {\n    //n can be from a different graph\n    Node * r = n-&gt;allocNewInstance(this);\n    for(auto o : n-&gt;outputs()) {\n      r-&gt;addOutput()-&gt;copyMetadata(o); // also copies types.\n    }\n</code></pre>\n<p>Is this line actually needed?</p>", "body_text": "Create clone already copies types:\n  Node * createClone(Node * n, std::function<Value*(Value*)> value_map, bool copy_blocks=true) {\n    //n can be from a different graph\n    Node * r = n->allocNewInstance(this);\n    for(auto o : n->outputs()) {\n      r->addOutput()->copyMetadata(o); // also copies types.\n    }\n\nIs this line actually needed?"}