{"url": "https://api.github.com/repos/pytorch/pytorch/issues/4164", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/4164/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/4164/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/4164/events", "html_url": "https://github.com/pytorch/pytorch/issues/4164", "id": 281961353, "node_id": "MDU6SXNzdWUyODE5NjEzNTM=", "number": 4164, "title": "[Proposal] Named Axes/Dimensions or Tensor Shape Annotations", "user": {"login": "michalwols", "id": 1071969, "node_id": "MDQ6VXNlcjEwNzE5Njk=", "avatar_url": "https://avatars3.githubusercontent.com/u/1071969?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michalwols", "html_url": "https://github.com/michalwols", "followers_url": "https://api.github.com/users/michalwols/followers", "following_url": "https://api.github.com/users/michalwols/following{/other_user}", "gists_url": "https://api.github.com/users/michalwols/gists{/gist_id}", "starred_url": "https://api.github.com/users/michalwols/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michalwols/subscriptions", "organizations_url": "https://api.github.com/users/michalwols/orgs", "repos_url": "https://api.github.com/users/michalwols/repos", "events_url": "https://api.github.com/users/michalwols/events{/privacy}", "received_events_url": "https://api.github.com/users/michalwols/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-12-14T02:26:44Z", "updated_at": "2018-08-11T05:35:42Z", "closed_at": null, "author_association": "NONE", "body_html": "<p>It would be great if there was a way to name tensor dimensions and use the names in all of the tensor methods that take dim as an argument.</p>\n<div class=\"highlight highlight-source-python\"><pre>images <span class=\"pl-k\">=</span> torch.Tensor(data, <span class=\"pl-v\">dims</span><span class=\"pl-k\">=</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>batch<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>channel<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>height<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>width<span class=\"pl-pds\">'</span></span>))\nmore_images <span class=\"pl-k\">=</span> torch.Tensor(data, <span class=\"pl-v\">dims</span><span class=\"pl-k\">=</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>batch<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>channel<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>height<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>width<span class=\"pl-pds\">'</span></span>))\n\ntorch.cat((images, more_images), <span class=\"pl-v\">dim</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>batch<span class=\"pl-pds\">'</span></span>)</pre></div>\n<p>This could obviously be expanded to support axis objects that could support a basic algebra to allow using dimensions in functions like <code>view()</code>.</p>\n<p>Another somewhat related feature would be a way to add type annotations as proposed in <a href=\"https://docs.google.com/document/d/1vpMse4c6DrWH5rq2tQSx3qwP_m_0lyn-Ij4WHqQqRHY/edit#heading=h.rkj7d39awayl\" rel=\"nofollow\">this google doc</a>:</p>\n<div class=\"highlight highlight-source-python\"><pre>Batch <span class=\"pl-k\">=</span> DimensionVar(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Batch<span class=\"pl-pds\">'</span></span>)\nRow <span class=\"pl-k\">=</span> DimensionVar(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Row<span class=\"pl-pds\">'</span></span>)\nColumn <span class=\"pl-k\">=</span> DimensionVar(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Column<span class=\"pl-pds\">'</span></span>)\nChannel <span class=\"pl-k\">=</span> DimensionVar(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Channel<span class=\"pl-pds\">'</span></span>, <span class=\"pl-v\">size</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">3</span>)\n\nRGBImage <span class=\"pl-k\">=</span> NDArray[Batch, Row, Column, Channel]\nGrayscaleImage <span class=\"pl-k\">=</span> NDArray[Batch, Row, Column]\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">rgb_to_grayscale</span>(<span class=\"pl-smi\">array</span>: RGBImage) -&gt; GrayscaleImage:\n  <span class=\"pl-k\">return</span> numpy.mean(array, <span class=\"pl-v\">axis</span><span class=\"pl-k\">=</span>RGBImage.axis(Channel))</pre></div>\n<ul>\n<li><a href=\"https://github.com/BIDS/datarray\">Datarray: numpy with axis names</a></li>\n<li><a href=\"https://mail.python.org/pipermail/numpy-discussion/2017-November/077429.html\" rel=\"nofollow\">python mailing list discussion</a></li>\n<li><a href=\"https://docs.google.com/document/d/1vpMse4c6DrWH5rq2tQSx3qwP_m_0lyn-Ij4WHqQqRHY/edit#heading=h.rkj7d39awayl\" rel=\"nofollow\">Google doc proposing array shape annotations</a></li>\n<li><a href=\"https://www.python.org/dev/peps/pep-0472/\" rel=\"nofollow\">Python PEP 472 proposing named indexing</a></li>\n</ul>", "body_text": "It would be great if there was a way to name tensor dimensions and use the names in all of the tensor methods that take dim as an argument.\nimages = torch.Tensor(data, dims=('batch', 'channel', 'height', 'width'))\nmore_images = torch.Tensor(data, dims=('batch', 'channel', 'height', 'width'))\n\ntorch.cat((images, more_images), dim='batch')\nThis could obviously be expanded to support axis objects that could support a basic algebra to allow using dimensions in functions like view().\nAnother somewhat related feature would be a way to add type annotations as proposed in this google doc:\nBatch = DimensionVar('Batch')\nRow = DimensionVar('Row')\nColumn = DimensionVar('Column')\nChannel = DimensionVar('Channel', size=3)\n\nRGBImage = NDArray[Batch, Row, Column, Channel]\nGrayscaleImage = NDArray[Batch, Row, Column]\n\ndef rgb_to_grayscale(array: RGBImage) -> GrayscaleImage:\n  return numpy.mean(array, axis=RGBImage.axis(Channel))\n\nDatarray: numpy with axis names\npython mailing list discussion\nGoogle doc proposing array shape annotations\nPython PEP 472 proposing named indexing", "body": "It would be great if there was a way to name tensor dimensions and use the names in all of the tensor methods that take dim as an argument. \r\n\r\n```python\r\nimages = torch.Tensor(data, dims=('batch', 'channel', 'height', 'width'))\r\nmore_images = torch.Tensor(data, dims=('batch', 'channel', 'height', 'width'))\r\n\r\ntorch.cat((images, more_images), dim='batch')\r\n```\r\n\r\nThis could obviously be expanded to support axis objects that could support a basic algebra to allow using dimensions in functions like `view()`.\r\n\r\nAnother somewhat related feature would be a way to add type annotations as proposed in [this google doc](https://docs.google.com/document/d/1vpMse4c6DrWH5rq2tQSx3qwP_m_0lyn-Ij4WHqQqRHY/edit#heading=h.rkj7d39awayl):\r\n\r\n```python\r\nBatch = DimensionVar('Batch')\r\nRow = DimensionVar('Row')\r\nColumn = DimensionVar('Column')\r\nChannel = DimensionVar('Channel', size=3)\r\n\r\nRGBImage = NDArray[Batch, Row, Column, Channel]\r\nGrayscaleImage = NDArray[Batch, Row, Column]\r\n\r\ndef rgb_to_grayscale(array: RGBImage) -> GrayscaleImage:\r\n  return numpy.mean(array, axis=RGBImage.axis(Channel))\r\n```\r\n\r\n- [Datarray: numpy with axis names](https://github.com/BIDS/datarray)\r\n- [python mailing list discussion](https://mail.python.org/pipermail/numpy-discussion/2017-November/077429.html)\r\n- [Google doc proposing array shape annotations](https://docs.google.com/document/d/1vpMse4c6DrWH5rq2tQSx3qwP_m_0lyn-Ij4WHqQqRHY/edit#heading=h.rkj7d39awayl)\r\n- [Python PEP 472 proposing named indexing]( https://www.python.org/dev/peps/pep-0472/)"}