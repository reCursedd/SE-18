{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/209993284", "pull_request_review_id": 146115519, "id": 209993284, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTk5MzI4NA==", "diff_hunk": "@@ -85,4 +85,48 @@ ListTypePtr ListType::ofFloats() {\n   return value;\n }\n \n+at::optional<TypePtr> unifyTypes(const TypePtr& t1, const TypePtr& t2) {\n+  //cases that t1 == t2, or t1 is a type refinement of t2 and vice versa\n+  if (t1->isSubtypeOf(t2)) {\n+    return t2;\n+  } else if (t2->isSubtypeOf(t1)) {\n+    return t1;\n+  }\n+\n+  // cases in which two types share a supertype\n+  if (t1->isSubtypeOf(NumberType::get()) && t2->isSubtypeOf(NumberType::get())) {\n+    return static_cast<TypePtr>(NumberType::get());", "path": "torch/csrc/jit/type.cpp", "position": null, "original_position": 14, "commit_id": "624f11f604758f6f58bddba3f0d9912df4ac86c9", "original_commit_id": "6e67eef9d7aa9d9a6e3634966b584e94eccaa6de", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Hmm I've been thinking about it and I'm not 100% sure if we really want to allow returning `NumberType`s from loops and conditionals. E.g. we don't have an op for `aten::add(Int, Number)`.", "created_at": "2018-08-14T15:19:13Z", "updated_at": "2018-11-23T15:49:18Z", "html_url": "https://github.com/pytorch/pytorch/pull/10281#discussion_r209993284", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/10281", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/209993284"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/10281#discussion_r209993284"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/10281"}}, "body_html": "<p>Hmm I've been thinking about it and I'm not 100% sure if we really want to allow returning <code>NumberType</code>s from loops and conditionals. E.g. we don't have an op for <code>aten::add(Int, Number)</code>.</p>", "body_text": "Hmm I've been thinking about it and I'm not 100% sure if we really want to allow returning NumberTypes from loops and conditionals. E.g. we don't have an op for aten::add(Int, Number)."}