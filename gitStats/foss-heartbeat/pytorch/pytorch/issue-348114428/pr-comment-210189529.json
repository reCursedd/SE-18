{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/210189529", "pull_request_review_id": 146350866, "id": 210189529, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMDE4OTUyOQ==", "diff_hunk": "@@ -85,4 +85,48 @@ ListTypePtr ListType::ofFloats() {\n   return value;\n }\n \n+at::optional<TypePtr> unifyTypes(const TypePtr& t1, const TypePtr& t2) {\n+  //cases that t1 == t2, or t1 is a type refinement of t2 and vice versa\n+  if (t1->isSubtypeOf(t2)) {", "path": "torch/csrc/jit/type.cpp", "position": 6, "original_position": 6, "commit_id": "624f11f604758f6f58bddba3f0d9912df4ac86c9", "original_commit_id": "1f7701716e83c30910223a9e55cf040d1c7b9ae2", "user": {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, "body": "Right now Tuple is considered a subtype of List, but they are not represented in the interpreter in the same way (this is perhaps a bad idea, but not something easily changed right now). The problem with this code is that it will allow a tuple to turn into a list without inserting a list construct node. The interpreter would then fail. I think for now it would be much safer to just check type equality after calling `unshapedType`. I believe that this is basically equivalent to this code but would not allow tuple->list which would cause the previously mentioned problem.", "created_at": "2018-08-15T07:26:25Z", "updated_at": "2018-11-23T15:49:23Z", "html_url": "https://github.com/pytorch/pytorch/pull/10281#discussion_r210189529", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/10281", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/210189529"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/10281#discussion_r210189529"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/10281"}}, "body_html": "<p>Right now Tuple is considered a subtype of List, but they are not represented in the interpreter in the same way (this is perhaps a bad idea, but not something easily changed right now). The problem with this code is that it will allow a tuple to turn into a list without inserting a list construct node. The interpreter would then fail. I think for now it would be much safer to just check type equality after calling <code>unshapedType</code>. I believe that this is basically equivalent to this code but would not allow tuple-&gt;list which would cause the previously mentioned problem.</p>", "body_text": "Right now Tuple is considered a subtype of List, but they are not represented in the interpreter in the same way (this is perhaps a bad idea, but not something easily changed right now). The problem with this code is that it will allow a tuple to turn into a list without inserting a list construct node. The interpreter would then fail. I think for now it would be much safer to just check type equality after calling unshapedType. I believe that this is basically equivalent to this code but would not allow tuple->list which would cause the previously mentioned problem."}