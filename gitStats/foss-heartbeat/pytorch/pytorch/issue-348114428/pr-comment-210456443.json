{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/210456443", "pull_request_review_id": 146674625, "id": 210456443, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMDQ1NjQ0Mw==", "diff_hunk": "@@ -899,12 +899,17 @@ struct to_ir {\n     // Register outputs in each block\n     for (const auto& x : mutated_variables) {\n       auto tv = save_true->getVar(x, stmt.range());\n-      true_block->registerOutput(tv);\n       auto fv = save_false->getVar(x, stmt.range());\n+      auto unified = unifyTypes(tv->type(), fv->type());\n+      if (!unified) {\n+        throw ErrorReport(stmt)\n+          << \"Type mismatch: \" << x << \" is set to type \" << tv->type()->str() << \" in the true branch\"", "path": "torch/csrc/jit/script/compiler.cpp", "position": null, "original_position": 9, "commit_id": "624f11f604758f6f58bddba3f0d9912df4ac86c9", "original_commit_id": "1f7701716e83c30910223a9e55cf040d1c7b9ae2", "user": {"login": "eellison", "id": 11477974, "node_id": "MDQ6VXNlcjExNDc3OTc0", "avatar_url": "https://avatars2.githubusercontent.com/u/11477974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eellison", "html_url": "https://github.com/eellison", "followers_url": "https://api.github.com/users/eellison/followers", "following_url": "https://api.github.com/users/eellison/following{/other_user}", "gists_url": "https://api.github.com/users/eellison/gists{/gist_id}", "starred_url": "https://api.github.com/users/eellison/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eellison/subscriptions", "organizations_url": "https://api.github.com/users/eellison/orgs", "repos_url": "https://api.github.com/users/eellison/repos", "events_url": "https://api.github.com/users/eellison/events{/privacy}", "received_events_url": "https://api.github.com/users/eellison/received_events", "type": "User", "site_admin": false}, "body": "If the variable is in scope, should we be asserting that it the new type is a subtype of its previous type? That's the behavior in emitWhile, and in assignment", "created_at": "2018-08-16T01:33:19Z", "updated_at": "2018-11-23T15:49:30Z", "html_url": "https://github.com/pytorch/pytorch/pull/10281#discussion_r210456443", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/10281", "author_association": "NONE", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/210456443"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/10281#discussion_r210456443"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/10281"}}, "body_html": "<p>If the variable is in scope, should we be asserting that it the new type is a subtype of its previous type? That's the behavior in emitWhile, and in assignment</p>", "body_text": "If the variable is in scope, should we be asserting that it the new type is a subtype of its previous type? That's the behavior in emitWhile, and in assignment", "in_reply_to_id": 210188827}