{"url": "https://api.github.com/repos/pytorch/pytorch/issues/8481", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/8481/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/8481/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/8481/events", "html_url": "https://github.com/pytorch/pytorch/issues/8481", "id": 332386647, "node_id": "MDU6SXNzdWUzMzIzODY2NDc=", "number": 8481, "title": "Retrocompatibility issue for batchnorm", "user": {"login": "Cerbal", "id": 4238961, "node_id": "MDQ6VXNlcjQyMzg5NjE=", "avatar_url": "https://avatars2.githubusercontent.com/u/4238961?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Cerbal", "html_url": "https://github.com/Cerbal", "followers_url": "https://api.github.com/users/Cerbal/followers", "following_url": "https://api.github.com/users/Cerbal/following{/other_user}", "gists_url": "https://api.github.com/users/Cerbal/gists{/gist_id}", "starred_url": "https://api.github.com/users/Cerbal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Cerbal/subscriptions", "organizations_url": "https://api.github.com/users/Cerbal/orgs", "repos_url": "https://api.github.com/users/Cerbal/repos", "events_url": "https://api.github.com/users/Cerbal/events{/privacy}", "received_events_url": "https://api.github.com/users/Cerbal/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 424131847, "node_id": "MDU6TGFiZWw0MjQxMzE4NDc=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/bug", "name": "bug", "color": "b60205", "default": true}, {"id": 443483881, "node_id": "MDU6TGFiZWw0NDM0ODM4ODE=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/todo", "name": "todo", "color": "c2e0c6", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "SsnL", "id": 5674597, "node_id": "MDQ6VXNlcjU2NzQ1OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5674597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SsnL", "html_url": "https://github.com/SsnL", "followers_url": "https://api.github.com/users/SsnL/followers", "following_url": "https://api.github.com/users/SsnL/following{/other_user}", "gists_url": "https://api.github.com/users/SsnL/gists{/gist_id}", "starred_url": "https://api.github.com/users/SsnL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SsnL/subscriptions", "organizations_url": "https://api.github.com/users/SsnL/orgs", "repos_url": "https://api.github.com/users/SsnL/repos", "events_url": "https://api.github.com/users/SsnL/events{/privacy}", "received_events_url": "https://api.github.com/users/SsnL/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "SsnL", "id": 5674597, "node_id": "MDQ6VXNlcjU2NzQ1OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5674597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SsnL", "html_url": "https://github.com/SsnL", "followers_url": "https://api.github.com/users/SsnL/followers", "following_url": "https://api.github.com/users/SsnL/following{/other_user}", "gists_url": "https://api.github.com/users/SsnL/gists{/gist_id}", "starred_url": "https://api.github.com/users/SsnL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SsnL/subscriptions", "organizations_url": "https://api.github.com/users/SsnL/orgs", "repos_url": "https://api.github.com/users/SsnL/repos", "events_url": "https://api.github.com/users/SsnL/events{/privacy}", "received_events_url": "https://api.github.com/users/SsnL/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2018-06-14T12:46:24Z", "updated_at": "2018-07-02T05:25:23Z", "closed_at": "2018-07-02T05:25:23Z", "author_association": "NONE", "body_html": "<p>Modules created in pytorch v0.4 are not loadable in pytorch master.</p>\n<pre><code>        Missing key(s) in state_dict: \"batchnorm.num_batches_tracked\". \n</code></pre>\n<h3>Minimal code to reproduce:</h3>\n<p><strong>Within pytorch 0.4</strong></p>\n<p>Module</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">class</span> <span class=\"pl-en\">MyModule</span>(<span class=\"pl-e\">nn</span>.<span class=\"pl-e\">Module</span>):\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"\"\"</span></span>\n<span class=\"pl-s\">        Create a toy module with just one batch norm</span>\n<span class=\"pl-s\">    <span class=\"pl-pds\">\"\"\"</span></span>\n\n    <span class=\"pl-k\">def</span> <span class=\"pl-c1\">__init__</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>):\n        <span class=\"pl-c1\">super</span>(MyModule, <span class=\"pl-c1\">self</span>).<span class=\"pl-c1\">__init__</span>()\n        <span class=\"pl-c1\">self</span>.batchnorm <span class=\"pl-k\">=</span> nn.BatchNorm1d(<span class=\"pl-c1\">10</span>)\n\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">forward</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>, <span class=\"pl-smi\">inputs</span>):\n        <span class=\"pl-k\">return</span> <span class=\"pl-c1\">self</span>.batchnorm(inputs)</pre></div>\n<p>Save the model</p>\n<div class=\"highlight highlight-source-python\"><pre>model <span class=\"pl-k\">=</span> MyModule()\nstate_dict <span class=\"pl-k\">=</span> model.state_dict()\ntorch.save(state_dict, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>state_dict.mdl<span class=\"pl-pds\">\"</span></span>)</pre></div>\n<p><strong>Within pytorch master</strong></p>\n<div class=\"highlight highlight-source-python\"><pre>state_dict <span class=\"pl-k\">=</span> torch.load(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>state_dict.mdl<span class=\"pl-pds\">\"</span></span>)\nmodel <span class=\"pl-k\">=</span> MyModule()\nmodel.load_state_dict(state_dict)</pre></div>\n<p>Observe:</p>\n<pre><code>Traceback (most recent call last):\n  File \"load.py\", line 10, in &lt;module&gt;\n    model.load_state_dict(state_dict)\n  File \"/private/home/samuelhumeau/.conda/envs/pytorch-sources/lib/python3.6/site-packages/torch/nn/modules/module.py\", line 698, in load_state_dict\n    self.__class__.__name__, \"\\n\\t\".join(error_msgs)))\nRuntimeError: Error(s) in loading state_dict for MyModule:\n        Missing key(s) in state_dict: \"batchnorm.num_batches_tracked\". \n</code></pre>\n<h3>Educated guess of what is going on</h3>\n<pre><code>&gt;&gt;&gt; print(state_dict._metadata)\nOrderedDict([('', {'version': 1}), ('batchnorm', {'version': 1})])\n</code></pre>\n<p><a href=\"https://github.com/pytorch/pytorch/blob/master/torch/nn/modules/batchnorm.py#L79\">This line</a> seems to only deal with the case where the version is None though.</p>", "body_text": "Modules created in pytorch v0.4 are not loadable in pytorch master.\n        Missing key(s) in state_dict: \"batchnorm.num_batches_tracked\". \n\nMinimal code to reproduce:\nWithin pytorch 0.4\nModule\nclass MyModule(nn.Module):\n    \"\"\"\n        Create a toy module with just one batch norm\n    \"\"\"\n\n    def __init__(self):\n        super(MyModule, self).__init__()\n        self.batchnorm = nn.BatchNorm1d(10)\n\n    def forward(self, inputs):\n        return self.batchnorm(inputs)\nSave the model\nmodel = MyModule()\nstate_dict = model.state_dict()\ntorch.save(state_dict, \"state_dict.mdl\")\nWithin pytorch master\nstate_dict = torch.load(\"state_dict.mdl\")\nmodel = MyModule()\nmodel.load_state_dict(state_dict)\nObserve:\nTraceback (most recent call last):\n  File \"load.py\", line 10, in <module>\n    model.load_state_dict(state_dict)\n  File \"/private/home/samuelhumeau/.conda/envs/pytorch-sources/lib/python3.6/site-packages/torch/nn/modules/module.py\", line 698, in load_state_dict\n    self.__class__.__name__, \"\\n\\t\".join(error_msgs)))\nRuntimeError: Error(s) in loading state_dict for MyModule:\n        Missing key(s) in state_dict: \"batchnorm.num_batches_tracked\". \n\nEducated guess of what is going on\n>>> print(state_dict._metadata)\nOrderedDict([('', {'version': 1}), ('batchnorm', {'version': 1})])\n\nThis line seems to only deal with the case where the version is None though.", "body": "Modules created in pytorch v0.4 are not loadable in pytorch master. \r\n```\r\n        Missing key(s) in state_dict: \"batchnorm.num_batches_tracked\". \r\n```\r\n\r\n### Minimal code to reproduce:\r\n**Within pytorch 0.4**\r\n\r\nModule\r\n``` python\r\nclass MyModule(nn.Module):\r\n    \"\"\"\r\n        Create a toy module with just one batch norm\r\n    \"\"\"\r\n\r\n    def __init__(self):\r\n        super(MyModule, self).__init__()\r\n        self.batchnorm = nn.BatchNorm1d(10)\r\n\r\n    def forward(self, inputs):\r\n        return self.batchnorm(inputs)\r\n```\r\n\r\nSave the model\r\n```python\r\nmodel = MyModule()\r\nstate_dict = model.state_dict()\r\ntorch.save(state_dict, \"state_dict.mdl\")\r\n```\r\n\r\n**Within pytorch master**\r\n\r\n```python\r\nstate_dict = torch.load(\"state_dict.mdl\")\r\nmodel = MyModule()\r\nmodel.load_state_dict(state_dict)\r\n```\r\n\r\nObserve:\r\n```\r\nTraceback (most recent call last):\r\n  File \"load.py\", line 10, in <module>\r\n    model.load_state_dict(state_dict)\r\n  File \"/private/home/samuelhumeau/.conda/envs/pytorch-sources/lib/python3.6/site-packages/torch/nn/modules/module.py\", line 698, in load_state_dict\r\n    self.__class__.__name__, \"\\n\\t\".join(error_msgs)))\r\nRuntimeError: Error(s) in loading state_dict for MyModule:\r\n        Missing key(s) in state_dict: \"batchnorm.num_batches_tracked\". \r\n```\r\n\r\n### Educated guess of what is going on\r\n\r\n```\r\n>>> print(state_dict._metadata)\r\nOrderedDict([('', {'version': 1}), ('batchnorm', {'version': 1})])\r\n```\r\n\r\n[This line](https://github.com/pytorch/pytorch/blob/master/torch/nn/modules/batchnorm.py#L79 ) seems to only deal with the case where the version is None though.\r\n"}