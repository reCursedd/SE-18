{"url": "https://api.github.com/repos/pytorch/pytorch/issues/11714", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/11714/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/11714/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/11714/events", "html_url": "https://github.com/pytorch/pytorch/issues/11714", "id": 360418451, "node_id": "MDU6SXNzdWUzNjA0MTg0NTE=", "number": 11714, "title": "[Feature Request] ModuleDict non-string keys", "user": {"login": "davidmascharka", "id": 5611862, "node_id": "MDQ6VXNlcjU2MTE4NjI=", "avatar_url": "https://avatars1.githubusercontent.com/u/5611862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmascharka", "html_url": "https://github.com/davidmascharka", "followers_url": "https://api.github.com/users/davidmascharka/followers", "following_url": "https://api.github.com/users/davidmascharka/following{/other_user}", "gists_url": "https://api.github.com/users/davidmascharka/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmascharka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmascharka/subscriptions", "organizations_url": "https://api.github.com/users/davidmascharka/orgs", "repos_url": "https://api.github.com/users/davidmascharka/repos", "events_url": "https://api.github.com/users/davidmascharka/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmascharka/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2018-09-14T19:00:05Z", "updated_at": "2018-09-17T23:47:49Z", "closed_at": null, "author_association": "CONTRIBUTOR", "body_html": "<h2>Issue description</h2>\n<p>Currently, <code>ModuleDict</code> only supports string keys:</p>\n<div class=\"highlight highlight-source-python\"><pre>In [<span class=\"pl-c1\">1</span>]: <span class=\"pl-k\">import</span> torch\n\nIn [<span class=\"pl-c1\">2</span>]: torch.nn.ModuleDict({<span class=\"pl-s\"><span class=\"pl-pds\">'</span>key<span class=\"pl-pds\">'</span></span>: torch.nn.Linear(<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>)})\nOut[<span class=\"pl-c1\">2</span>]: \nModuleDict(\n  (key): Linear(<span class=\"pl-v\">in_features</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">1</span>, <span class=\"pl-v\">out_features</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">1</span>, <span class=\"pl-v\">bias</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>)\n)\n\nIn [<span class=\"pl-c1\">3</span>]: torch.nn.ModuleDict({<span class=\"pl-c1\">1</span>: torch.nn.Linear(<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>)})\n<span class=\"pl-ii\">--------------------------------------------------------------------------</span><span class=\"pl-k\">-</span>\n<span class=\"pl-c1\">TypeError</span>                                 Traceback (most recent call last)\n<span class=\"pl-k\">&lt;</span>ipython<span class=\"pl-k\">-</span><span class=\"pl-c1\">input</span><span class=\"pl-k\">-</span><span class=\"pl-c1\">3</span><span class=\"pl-k\">-</span><span class=\"pl-ii\">0f67c1a0790f</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">in</span> <span class=\"pl-k\">&lt;</span>module<span class=\"pl-k\">&gt;</span>()\n<span class=\"pl-ii\">----</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">1</span> torch.nn.ModuleDict({<span class=\"pl-c1\">1</span>: torch.nn.Linear(<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>)})\n\n<span class=\"pl-k\">~</span><span class=\"pl-k\">/</span>anaconda3<span class=\"pl-k\">/</span>lib<span class=\"pl-k\">/</span>python3.6<span class=\"pl-k\">/</span>site<span class=\"pl-k\">-</span>packages<span class=\"pl-k\">/</span>torch<span class=\"pl-k\">/</span>nn<span class=\"pl-k\">/</span>modules<span class=\"pl-k\">/</span>container.py <span class=\"pl-k\">in</span> <span class=\"pl-c1\">__init__</span>(<span class=\"pl-c1\">self</span>, modules)\n    <span class=\"pl-c1\">221</span>         <span class=\"pl-c1\">super</span>(ModuleDict, <span class=\"pl-c1\">self</span>).<span class=\"pl-c1\">__init__</span>()\n    <span class=\"pl-c1\">222</span>         <span class=\"pl-k\">if</span> modules <span class=\"pl-k\">is</span> <span class=\"pl-k\">not</span> <span class=\"pl-c1\">None</span>:\n<span class=\"pl-ii\">--</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">223</span>             <span class=\"pl-c1\">self</span>.update(modules)\n    <span class=\"pl-c1\">224</span> \n    <span class=\"pl-c1\">225</span>     <span class=\"pl-k\">def</span> <span class=\"pl-c1\">__getitem__</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>, <span class=\"pl-smi\">key</span>):\n\n<span class=\"pl-k\">~</span><span class=\"pl-k\">/</span>anaconda3<span class=\"pl-k\">/</span>lib<span class=\"pl-k\">/</span>python3.6<span class=\"pl-k\">/</span>site<span class=\"pl-k\">-</span>packages<span class=\"pl-k\">/</span>torch<span class=\"pl-k\">/</span>nn<span class=\"pl-k\">/</span>modules<span class=\"pl-k\">/</span>container.py <span class=\"pl-k\">in</span> update(<span class=\"pl-c1\">self</span>, modules)\n    <span class=\"pl-c1\">290</span>             <span class=\"pl-k\">else</span>:\n    <span class=\"pl-c1\">291</span>                 <span class=\"pl-k\">for</span> key, module <span class=\"pl-k\">in</span> <span class=\"pl-c1\">sorted</span>(modules.items()):\n<span class=\"pl-ii\">--</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">292</span>                     <span class=\"pl-c1\">self</span>[key] <span class=\"pl-k\">=</span> module\n    <span class=\"pl-c1\">293</span>         <span class=\"pl-k\">else</span>:\n    <span class=\"pl-c1\">294</span>             <span class=\"pl-k\">for</span> j, m <span class=\"pl-k\">in</span> <span class=\"pl-c1\">enumerate</span>(modules):\n\n<span class=\"pl-k\">~</span><span class=\"pl-k\">/</span>anaconda3<span class=\"pl-k\">/</span>lib<span class=\"pl-k\">/</span>python3.6<span class=\"pl-k\">/</span>site<span class=\"pl-k\">-</span>packages<span class=\"pl-k\">/</span>torch<span class=\"pl-k\">/</span>nn<span class=\"pl-k\">/</span>modules<span class=\"pl-k\">/</span>container.py <span class=\"pl-k\">in</span> <span class=\"pl-c1\">__setitem__</span>(<span class=\"pl-c1\">self</span>, key, module)\n    <span class=\"pl-c1\">227</span> \n    <span class=\"pl-c1\">228</span>     <span class=\"pl-k\">def</span> <span class=\"pl-c1\">__setitem__</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>, <span class=\"pl-smi\">key</span>, <span class=\"pl-smi\">module</span>):\n<span class=\"pl-ii\">--</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">229</span>         <span class=\"pl-c1\">self</span>.add_module(key, module)\n    <span class=\"pl-c1\">230</span> \n    <span class=\"pl-c1\">231</span>     <span class=\"pl-k\">def</span> <span class=\"pl-c1\">__delitem__</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>, <span class=\"pl-smi\">key</span>):\n\n<span class=\"pl-k\">~</span><span class=\"pl-k\">/</span>anaconda3<span class=\"pl-k\">/</span>lib<span class=\"pl-k\">/</span>python3.6<span class=\"pl-k\">/</span>site<span class=\"pl-k\">-</span>packages<span class=\"pl-k\">/</span>torch<span class=\"pl-k\">/</span>nn<span class=\"pl-k\">/</span>modules<span class=\"pl-k\">/</span>module.py <span class=\"pl-k\">in</span> add_module(<span class=\"pl-c1\">self</span>, name, module)\n    <span class=\"pl-c1\">172</span>         <span class=\"pl-k\">elif</span> <span class=\"pl-k\">not</span> <span class=\"pl-c1\">isinstance</span>(name, torch._six.string_classes):\n    <span class=\"pl-c1\">173</span>             <span class=\"pl-k\">raise</span> <span class=\"pl-c1\">TypeError</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>module name should be a string. Got <span class=\"pl-c1\">{}</span><span class=\"pl-pds\">\"</span></span>.format(\n<span class=\"pl-ii\">--</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">174</span>                 torch.typename(name)))\n    <span class=\"pl-c1\">175</span>         <span class=\"pl-k\">elif</span> <span class=\"pl-c1\">hasattr</span>(<span class=\"pl-c1\">self</span>, name) <span class=\"pl-k\">and</span> name <span class=\"pl-k\">not</span> <span class=\"pl-k\">in</span> <span class=\"pl-c1\">self</span>._modules:\n    <span class=\"pl-c1\">176</span>             <span class=\"pl-k\">raise</span> <span class=\"pl-c1\">KeyError</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>attribute '<span class=\"pl-c1\">{}</span>' already exists<span class=\"pl-pds\">\"</span></span>.format(name))\n\n<span class=\"pl-c1\">TypeError</span>: module name should be a string. Got <span class=\"pl-c1\">int</span></pre></div>\n<p>It would be lovely if non-string keys were allowed in <code>ModuleDict</code>.</p>", "body_text": "Issue description\nCurrently, ModuleDict only supports string keys:\nIn [1]: import torch\n\nIn [2]: torch.nn.ModuleDict({'key': torch.nn.Linear(1, 1)})\nOut[2]: \nModuleDict(\n  (key): Linear(in_features=1, out_features=1, bias=True)\n)\n\nIn [3]: torch.nn.ModuleDict({1: torch.nn.Linear(1, 1)})\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n<ipython-input-3-0f67c1a0790f> in <module>()\n----> 1 torch.nn.ModuleDict({1: torch.nn.Linear(1, 1)})\n\n~/anaconda3/lib/python3.6/site-packages/torch/nn/modules/container.py in __init__(self, modules)\n    221         super(ModuleDict, self).__init__()\n    222         if modules is not None:\n--> 223             self.update(modules)\n    224 \n    225     def __getitem__(self, key):\n\n~/anaconda3/lib/python3.6/site-packages/torch/nn/modules/container.py in update(self, modules)\n    290             else:\n    291                 for key, module in sorted(modules.items()):\n--> 292                     self[key] = module\n    293         else:\n    294             for j, m in enumerate(modules):\n\n~/anaconda3/lib/python3.6/site-packages/torch/nn/modules/container.py in __setitem__(self, key, module)\n    227 \n    228     def __setitem__(self, key, module):\n--> 229         self.add_module(key, module)\n    230 \n    231     def __delitem__(self, key):\n\n~/anaconda3/lib/python3.6/site-packages/torch/nn/modules/module.py in add_module(self, name, module)\n    172         elif not isinstance(name, torch._six.string_classes):\n    173             raise TypeError(\"module name should be a string. Got {}\".format(\n--> 174                 torch.typename(name)))\n    175         elif hasattr(self, name) and name not in self._modules:\n    176             raise KeyError(\"attribute '{}' already exists\".format(name))\n\nTypeError: module name should be a string. Got int\nIt would be lovely if non-string keys were allowed in ModuleDict.", "body": "## Issue description\r\n\r\nCurrently, `ModuleDict` only supports string keys:\r\n\r\n``` python\r\nIn [1]: import torch\r\n\r\nIn [2]: torch.nn.ModuleDict({'key': torch.nn.Linear(1, 1)})\r\nOut[2]: \r\nModuleDict(\r\n  (key): Linear(in_features=1, out_features=1, bias=True)\r\n)\r\n\r\nIn [3]: torch.nn.ModuleDict({1: torch.nn.Linear(1, 1)})\r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\n<ipython-input-3-0f67c1a0790f> in <module>()\r\n----> 1 torch.nn.ModuleDict({1: torch.nn.Linear(1, 1)})\r\n\r\n~/anaconda3/lib/python3.6/site-packages/torch/nn/modules/container.py in __init__(self, modules)\r\n    221         super(ModuleDict, self).__init__()\r\n    222         if modules is not None:\r\n--> 223             self.update(modules)\r\n    224 \r\n    225     def __getitem__(self, key):\r\n\r\n~/anaconda3/lib/python3.6/site-packages/torch/nn/modules/container.py in update(self, modules)\r\n    290             else:\r\n    291                 for key, module in sorted(modules.items()):\r\n--> 292                     self[key] = module\r\n    293         else:\r\n    294             for j, m in enumerate(modules):\r\n\r\n~/anaconda3/lib/python3.6/site-packages/torch/nn/modules/container.py in __setitem__(self, key, module)\r\n    227 \r\n    228     def __setitem__(self, key, module):\r\n--> 229         self.add_module(key, module)\r\n    230 \r\n    231     def __delitem__(self, key):\r\n\r\n~/anaconda3/lib/python3.6/site-packages/torch/nn/modules/module.py in add_module(self, name, module)\r\n    172         elif not isinstance(name, torch._six.string_classes):\r\n    173             raise TypeError(\"module name should be a string. Got {}\".format(\r\n--> 174                 torch.typename(name)))\r\n    175         elif hasattr(self, name) and name not in self._modules:\r\n    176             raise KeyError(\"attribute '{}' already exists\".format(name))\r\n\r\nTypeError: module name should be a string. Got int\r\n```\r\n\r\nIt would be lovely if non-string keys were allowed in `ModuleDict`."}