{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/186797557", "pull_request_review_id": 118443026, "id": 186797557, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4Njc5NzU1Nw==", "diff_hunk": "@@ -0,0 +1,101 @@\n+#include \"torch/csrc/jit/aten_schema.h\"\n+#include \"torch/csrc/jit/tensor_conversions.h\"\n+\n+namespace torch { namespace jit {\n+\n+using SchemaMap = std::unordered_map<std::string, std::vector<OperatorSchema>>;\n+\n+\n+std::vector<OperatorSchema> createOperatorSchemas() {\n+  using namespace at; // for tensor initialization\n+  std::vector<OperatorSchema> schemas;\n+\n+  // [aten_schema encoding]\n+  // This format tries to minimize the actual amount of code produced here to keep\n+  // compile times low. A naive encoding of this data directly into constructor\n+  // literals took over 3 minutes in gcc, while this format takes only 10 seconds.\n+\n+  // However, it is more complicated because of this issue and described below\n+\n+  // literals are stored uniqued and interned in these arrays:\n+\n+  // string literals\n+  const char* names[] = {\n+    ${names}\n+  };\n+\n+  // default argument values for all ops, represented as using tensors via tensor_as\n+  at::optional<at::Tensor> tensors[] = {\n+    ${tensors}\n+  };\n+\n+  // the attribute kind tag for any arguments that have optional attribute encodings\n+  // in the IR.\n+  at::optional<AttributeKind> attributes[] = {\n+    ${attributes}\n+  };\n+\n+  // for compound objects, it uses 1 integer per argument to the object's constructor\n+  // which is an index into one of the above tables\n+  using ArgumentCtor = uint32_t[4];\n+  ArgumentCtor arguments[] = {\n+    ${arguments}\n+  };\n+\n+  // OperatorSchema(string name, vector<Argument> args, vector<Argument> returns)\n+  // the integer for args and returns is the _number_ of argument objects\n+  // which are read sequentially off of the arguments array above\n+  using OperatorCtor = uint32_t[3];\n+  OperatorCtor operators[] = {\n+    ${operators}\n+  };\n+  size_t n_operators = ${n_operators};\n+\n+  size_t next_argument = 0;\n+\n+  auto getArgumentList = [&](uint32_t N){\n+    std::vector<Argument> result;\n+    for(size_t i = 0; i < N; ++i) {\n+      auto & a = arguments[next_argument++];\n+      result.push_back({ names[a[0]], tensors[a[1]], attributes[a[2]], a[3] != 0 });\n+    }\n+    return result;\n+  };\n+\n+  for(size_t i = 0; i < n_operators; ++i) {\n+    auto & op = operators[i];\n+    schemas.push_back({names[op[0]], getArgumentList(op[1]), getArgumentList(op[2])});\n+  }\n+  return schemas;\n+}\n+\n+std::vector<OperatorSchema> & getOperatorSchemas() {\n+  static std::vector<OperatorSchema> schema = createOperatorSchemas();\n+  return schema;\n+}\n+\n+static SchemaMap createSchemaMap() {\n+  auto schemas = getOperatorSchemas();", "path": "tools/jit/templates/aten_schema.cpp", "position": null, "original_position": 78, "commit_id": "ed702bbdd1400a0d0865f59a9e69828337b447d9", "original_commit_id": "c2a099f9be67122cb2ae1d5645c3719d22703361", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Won't this make a copy of the whole vector? Would be better to just do `auto & schema : getOperatorSchemas()`", "created_at": "2018-05-08T16:59:29Z", "updated_at": "2018-11-23T15:43:42Z", "html_url": "https://github.com/pytorch/pytorch/pull/7311#discussion_r186797557", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/7311", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/186797557"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/7311#discussion_r186797557"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/7311"}}, "body_html": "<p>Won't this make a copy of the whole vector? Would be better to just do <code>auto &amp; schema : getOperatorSchemas()</code></p>", "body_text": "Won't this make a copy of the whole vector? Would be better to just do auto & schema : getOperatorSchemas()"}