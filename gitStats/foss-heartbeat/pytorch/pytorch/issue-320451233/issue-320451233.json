{"url": "https://api.github.com/repos/pytorch/pytorch/issues/7311", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/7311/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/7311/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/7311/events", "html_url": "https://github.com/pytorch/pytorch/pull/7311", "id": 320451233, "node_id": "MDExOlB1bGxSZXF1ZXN0MTg2MTE5Nzg3", "number": 7311, "title": "Improve script builtin checking using schema", "user": {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2018-05-04T22:45:58Z", "updated_at": "2018-11-23T15:43:57Z", "closed_at": "2018-05-14T21:46:36Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/7311", "html_url": "https://github.com/pytorch/pytorch/pull/7311", "diff_url": "https://github.com/pytorch/pytorch/pull/7311.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/7311.patch"}, "body_html": "<ul>\n<li>This add aten_schema.h which provides a barebones amount of type and<br>\nargument information about each builtin operator</li>\n<li>emitBuiltinCall is updated to use this information rather than<br>\naten_dispatch to ensure the operator is correct.</li>\n<li>handling of keyword and position arguments now matches python behavior</li>\n<li>There is no longer a requirement that kwargs be constant or that the<br>\nattributes of an op must be entirely constant or non-constant</li>\n<li>compiler now constructs a non-attributed version of the op first and<br>\nthen turns it into the constant-attribute version if all attributes<br>\nare constants.</li>\n<li>default arguments for builtins now work</li>\n<li>SugaredValue::call and similar functions now have SourceRange information<br>\nfor their arguments so that error reporting is more accurate</li>\n</ul>\n<p>Notes:</p>\n<ul>\n<li>\n<p>This does not try to merge the builtin checking with python arg parser.<br>\nGiven that we will eventually have C10 schema which will replace aten_schema,<br>\nwe will eventually have a C++ description of the schema and working of that<br>\ndescription directly will be the easiest form to understand.</p>\n</li>\n<li>\n<p>python function calls and script method calls do not support keyword arguments yet.<br>\nWhen we add this support we should refactor the handling in tryEmitSchema<br>\nthat resolves keywords into a common function.</p>\n</li>\n<li>\n<p>default arguments work</p>\n</li>\n<li>\n<p>keyword arguments to builtins work (still need to extend to calling python and other script methods)</p>\n</li>\n<li>\n<p>much better error reporting for incorrect builtins</p>\n</li>\n</ul>\n<p>Lift any constants to attributes on nodes when possible</p>\n<p>Some fail tests</p>\n<p>some working tests</p>", "body_text": "This add aten_schema.h which provides a barebones amount of type and\nargument information about each builtin operator\nemitBuiltinCall is updated to use this information rather than\naten_dispatch to ensure the operator is correct.\nhandling of keyword and position arguments now matches python behavior\nThere is no longer a requirement that kwargs be constant or that the\nattributes of an op must be entirely constant or non-constant\ncompiler now constructs a non-attributed version of the op first and\nthen turns it into the constant-attribute version if all attributes\nare constants.\ndefault arguments for builtins now work\nSugaredValue::call and similar functions now have SourceRange information\nfor their arguments so that error reporting is more accurate\n\nNotes:\n\n\nThis does not try to merge the builtin checking with python arg parser.\nGiven that we will eventually have C10 schema which will replace aten_schema,\nwe will eventually have a C++ description of the schema and working of that\ndescription directly will be the easiest form to understand.\n\n\npython function calls and script method calls do not support keyword arguments yet.\nWhen we add this support we should refactor the handling in tryEmitSchema\nthat resolves keywords into a common function.\n\n\ndefault arguments work\n\n\nkeyword arguments to builtins work (still need to extend to calling python and other script methods)\n\n\nmuch better error reporting for incorrect builtins\n\n\nLift any constants to attributes on nodes when possible\nSome fail tests\nsome working tests", "body": "* This add aten_schema.h which provides a barebones amount of type and\r\n  argument information about each builtin operator\r\n* emitBuiltinCall is updated to use this information rather than\r\n  aten_dispatch to ensure the operator is correct.\r\n* handling of keyword and position arguments now matches python behavior\r\n* There is no longer a requirement that kwargs be constant or that the\r\n  attributes of an op must be entirely constant or non-constant\r\n* compiler now constructs a non-attributed version of the op first and\r\n  then turns it into the constant-attribute version if all attributes\r\n  are constants.\r\n* default arguments for builtins now work\r\n* SugaredValue::call and similar functions now have SourceRange information\r\n  for their arguments so that error reporting is more accurate\r\n\r\nNotes:\r\n* This does not try to merge the builtin checking with python arg parser.\r\n  Given that we will eventually have C10 schema which will replace aten_schema,\r\n  we will eventually have a C++ description of the schema and working of that\r\n  description directly will be the easiest form to understand.\r\n* python function calls and script method calls do not support keyword arguments yet.\r\n  When we add this support we should refactor the handling in tryEmitSchema\r\n  that resolves keywords into a common function.\r\n\r\n* default arguments work\r\n* keyword arguments to builtins work (still need to extend to calling python and other script methods)\r\n* much better error reporting for incorrect builtins\r\n\r\nLift any constants to attributes on nodes when possible\r\n\r\nSome fail tests\r\n\r\nsome working tests\r\n\r\n"}