{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/388599855", "html_url": "https://github.com/pytorch/pytorch/pull/7487#issuecomment-388599855", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/7487", "id": 388599855, "node_id": "MDEyOklzc3VlQ29tbWVudDM4ODU5OTg1NQ==", "user": {"login": "mruberry", "id": 38511765, "node_id": "MDQ6VXNlcjM4NTExNzY1", "avatar_url": "https://avatars3.githubusercontent.com/u/38511765?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mruberry", "html_url": "https://github.com/mruberry", "followers_url": "https://api.github.com/users/mruberry/followers", "following_url": "https://api.github.com/users/mruberry/following{/other_user}", "gists_url": "https://api.github.com/users/mruberry/gists{/gist_id}", "starred_url": "https://api.github.com/users/mruberry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mruberry/subscriptions", "organizations_url": "https://api.github.com/users/mruberry/orgs", "repos_url": "https://api.github.com/users/mruberry/repos", "events_url": "https://api.github.com/users/mruberry/events{/privacy}", "received_events_url": "https://api.github.com/users/mruberry/received_events", "type": "User", "site_admin": false}, "created_at": "2018-05-13T04:18:05Z", "updated_at": "2018-05-13T06:40:31Z", "author_association": "CONTRIBUTOR", "body_html": "<p>I did not measure the impact on binary size or performance, unfortunately. It would be interesting and I can do so if you like, but I know some people are eager for this fix and I'd like them to begin testing with it.</p>\n<p>The binary size should decrease because: reduceAccOp is gone, reduceOps are now only specialized on a single type and not two, the -2 special case for reductions is gone (just like with pointwise apply), and modify and reduce ops for half are removed. Adding the FinalizeOp should also be a very small increase to the binary size (I believe it will result in at most three additional instantiations per type) since it is nontrivial only for 3 calls (the 2-norm, the n-norm, and mean).</p>", "body_text": "I did not measure the impact on binary size or performance, unfortunately. It would be interesting and I can do so if you like, but I know some people are eager for this fix and I'd like them to begin testing with it.\nThe binary size should decrease because: reduceAccOp is gone, reduceOps are now only specialized on a single type and not two, the -2 special case for reductions is gone (just like with pointwise apply), and modify and reduce ops for half are removed. Adding the FinalizeOp should also be a very small increase to the binary size (I believe it will result in at most three additional instantiations per type) since it is nontrivial only for 3 calls (the 2-norm, the n-norm, and mean).", "body": "I did not measure the impact on binary size or performance, unfortunately. It would be interesting and I can do so if you like, but I know some people are eager for this fix and I'd like them to begin testing with it. \r\n\r\nThe binary size should decrease because: reduceAccOp is gone, reduceOps are now only specialized on a single type and not two, the -2 special case for reductions is gone (just like with pointwise apply), and modify and reduce ops for half are removed. Adding the FinalizeOp should also be a very small increase to the binary size (I believe it will result in at most three additional instantiations per type) since it is nontrivial only for 3 calls (the 2-norm, the n-norm, and mean). "}