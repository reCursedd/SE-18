{"url": "https://api.github.com/repos/pytorch/pytorch/issues/3475", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/3475/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/3475/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/3475/events", "html_url": "https://github.com/pytorch/pytorch/issues/3475", "id": 271128346, "node_id": "MDU6SXNzdWUyNzExMjgzNDY=", "number": 3475, "title": "CUDA tensor allows negative values in torch.multinomial", "user": {"login": "dnaq", "id": 1299717, "node_id": "MDQ6VXNlcjEyOTk3MTc=", "avatar_url": "https://avatars1.githubusercontent.com/u/1299717?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dnaq", "html_url": "https://github.com/dnaq", "followers_url": "https://api.github.com/users/dnaq/followers", "following_url": "https://api.github.com/users/dnaq/following{/other_user}", "gists_url": "https://api.github.com/users/dnaq/gists{/gist_id}", "starred_url": "https://api.github.com/users/dnaq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dnaq/subscriptions", "organizations_url": "https://api.github.com/users/dnaq/orgs", "repos_url": "https://api.github.com/users/dnaq/repos", "events_url": "https://api.github.com/users/dnaq/events{/privacy}", "received_events_url": "https://api.github.com/users/dnaq/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 424131847, "node_id": "MDU6TGFiZWw0MjQxMzE4NDc=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/bug", "name": "bug", "color": "b60205", "default": true}, {"id": 443484135, "node_id": "MDU6TGFiZWw0NDM0ODQxMzU=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/high%20priority", "name": "high priority", "color": "F22613", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "SsnL", "id": 5674597, "node_id": "MDQ6VXNlcjU2NzQ1OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5674597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SsnL", "html_url": "https://github.com/SsnL", "followers_url": "https://api.github.com/users/SsnL/followers", "following_url": "https://api.github.com/users/SsnL/following{/other_user}", "gists_url": "https://api.github.com/users/SsnL/gists{/gist_id}", "starred_url": "https://api.github.com/users/SsnL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SsnL/subscriptions", "organizations_url": "https://api.github.com/users/SsnL/orgs", "repos_url": "https://api.github.com/users/SsnL/repos", "events_url": "https://api.github.com/users/SsnL/events{/privacy}", "received_events_url": "https://api.github.com/users/SsnL/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "SsnL", "id": 5674597, "node_id": "MDQ6VXNlcjU2NzQ1OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5674597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SsnL", "html_url": "https://github.com/SsnL", "followers_url": "https://api.github.com/users/SsnL/followers", "following_url": "https://api.github.com/users/SsnL/following{/other_user}", "gists_url": "https://api.github.com/users/SsnL/gists{/gist_id}", "starred_url": "https://api.github.com/users/SsnL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SsnL/subscriptions", "organizations_url": "https://api.github.com/users/SsnL/orgs", "repos_url": "https://api.github.com/users/SsnL/repos", "events_url": "https://api.github.com/users/SsnL/events{/privacy}", "received_events_url": "https://api.github.com/users/SsnL/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2017-11-03T21:51:05Z", "updated_at": "2017-12-18T07:20:27Z", "closed_at": "2017-12-18T07:20:27Z", "author_association": "NONE", "body_html": "<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> torch\nt <span class=\"pl-k\">=</span> torch.rand(<span class=\"pl-c1\">10</span>) <span class=\"pl-c\"><span class=\"pl-c\">#</span>create CPU tensor</span>\nt.multinomial(<span class=\"pl-c1\">1</span>) <span class=\"pl-c\"><span class=\"pl-c\">#</span>returns a result, as expected</span>\ntn <span class=\"pl-k\">=</span> <span class=\"pl-k\">-</span>t\ntn.multinomial(<span class=\"pl-c1\">1</span>) <span class=\"pl-c\"><span class=\"pl-c\">#</span> throws an exception, as per the documentation</span>\ntn <span class=\"pl-k\">=</span> tn.cuda()\ntn.multinomial(<span class=\"pl-c1\">1</span>) <span class=\"pl-c\"><span class=\"pl-c\">#</span> returns a value, don't know from what distribution</span>\ntn.multinomial(<span class=\"pl-c1\">1000</span>, <span class=\"pl-c1\">True</span>) <span class=\"pl-c\"><span class=\"pl-c\">#</span> returns a tensor of 1000 zeros</span></pre></div>\n<p>Looking at the values returned from tn.multinomial(1) and counting them, it seems like it returns the values of the multinomial distribution taken from t, i.e. that it has ignored the signs of the values. However, it seem like <code>tn.multinomial(n where n &gt; 1)</code> always returns a tensor filled with zeros.</p>", "body_text": "import torch\nt = torch.rand(10) #create CPU tensor\nt.multinomial(1) #returns a result, as expected\ntn = -t\ntn.multinomial(1) # throws an exception, as per the documentation\ntn = tn.cuda()\ntn.multinomial(1) # returns a value, don't know from what distribution\ntn.multinomial(1000, True) # returns a tensor of 1000 zeros\nLooking at the values returned from tn.multinomial(1) and counting them, it seems like it returns the values of the multinomial distribution taken from t, i.e. that it has ignored the signs of the values. However, it seem like tn.multinomial(n where n > 1) always returns a tensor filled with zeros.", "body": "```python\r\nimport torch\r\nt = torch.rand(10) #create CPU tensor\r\nt.multinomial(1) #returns a result, as expected\r\ntn = -t\r\ntn.multinomial(1) # throws an exception, as per the documentation\r\ntn = tn.cuda()\r\ntn.multinomial(1) # returns a value, don't know from what distribution\r\ntn.multinomial(1000, True) # returns a tensor of 1000 zeros\r\n```\r\n\r\nLooking at the values returned from tn.multinomial(1) and counting them, it seems like it returns the values of the multinomial distribution taken from t, i.e. that it has ignored the signs of the values. However, it seem like `tn.multinomial(n where n > 1)` always returns a tensor filled with zeros."}