{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/313072344", "html_url": "https://github.com/pytorch/pytorch/issues/1979#issuecomment-313072344", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/1979", "id": 313072344, "node_id": "MDEyOklzc3VlQ29tbWVudDMxMzA3MjM0NA==", "user": {"login": "hughperkins", "id": 123560, "node_id": "MDQ6VXNlcjEyMzU2MA==", "avatar_url": "https://avatars2.githubusercontent.com/u/123560?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hughperkins", "html_url": "https://github.com/hughperkins", "followers_url": "https://api.github.com/users/hughperkins/followers", "following_url": "https://api.github.com/users/hughperkins/following{/other_user}", "gists_url": "https://api.github.com/users/hughperkins/gists{/gist_id}", "starred_url": "https://api.github.com/users/hughperkins/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hughperkins/subscriptions", "organizations_url": "https://api.github.com/users/hughperkins/orgs", "repos_url": "https://api.github.com/users/hughperkins/repos", "events_url": "https://api.github.com/users/hughperkins/events{/privacy}", "received_events_url": "https://api.github.com/users/hughperkins/received_events", "type": "User", "site_admin": false}, "created_at": "2017-07-05T11:05:56Z", "updated_at": "2017-07-05T11:05:56Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Seems like functional convolution simply instantiates a functor behind hte scenes:</p>\n<pre><code>    f = ConvNd(_pair(stride), _pair(padding), _pair(dilation), False,\n               _pair(0), groups, torch.backends.cudnn.benchmark, torch.backends.cudnn.enabled)\n    return f(input, weight, bias)\n</code></pre>\n<p>Wont this end up instantiating a second copy of the weights?  Or does <code>Parameter</code> lazily initialize? :</p>\n<pre><code>            self.weight = Parameter(torch.Tensor(\n                out_channels, in_channels // groups, *kernel_size))\n</code></pre>", "body_text": "Seems like functional convolution simply instantiates a functor behind hte scenes:\n    f = ConvNd(_pair(stride), _pair(padding), _pair(dilation), False,\n               _pair(0), groups, torch.backends.cudnn.benchmark, torch.backends.cudnn.enabled)\n    return f(input, weight, bias)\n\nWont this end up instantiating a second copy of the weights?  Or does Parameter lazily initialize? :\n            self.weight = Parameter(torch.Tensor(\n                out_channels, in_channels // groups, *kernel_size))", "body": "Seems like functional convolution simply instantiates a functor behind hte scenes:\r\n\r\n```\r\n    f = ConvNd(_pair(stride), _pair(padding), _pair(dilation), False,\r\n               _pair(0), groups, torch.backends.cudnn.benchmark, torch.backends.cudnn.enabled)\r\n    return f(input, weight, bias)\r\n```\r\nWont this end up instantiating a second copy of the weights?  Or does `Parameter` lazily initialize? :\r\n```\r\n            self.weight = Parameter(torch.Tensor(\r\n                out_channels, in_channels // groups, *kernel_size))\r\n```\r\n"}