{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/154407427", "pull_request_review_id": 80572075, "id": 154407427, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDQwNzQyNw==", "diff_hunk": "@@ -426,58 +432,49 @@ __global__ void THCTensor_kernel_varInnermostDim(Real *tgt, Real *src_, unsigned\n       }\n     }\n \n-    local_sum[threadIdx.y][threadIdx.x] =\n+    Accreal local_sum =\n         THCNumerics<Accreal>::mul(local_mean, ScalarConvert<int, Accreal>::to(count));\n     __syncthreads();\n \n-\n-    // Compute the true mean of each of the blockDim.x rows by reducing the sums\n-    for (unsigned s = 8; s > 1; s >>= 1) {\n-      if (row < num_rows && threadIdx.x < s) {\n-        local_sum[threadIdx.y][threadIdx.x] = THCNumerics<Accreal>::add(\n-            local_sum[threadIdx.y][threadIdx.x],\n-            local_sum[threadIdx.y][threadIdx.x + s]);\n-      }\n-      __syncthreads();\n-    }\n-\n-    if (row < num_rows && threadIdx.x == 0) {\n-      mean[threadIdx.y] = THCNumerics<Accreal>::div(\n-          THCNumerics<Accreal>::add(local_sum[threadIdx.y][0], local_sum[threadIdx.y][1]),\n-          ScalarConvert<int, Accreal>::to(row_size));\n+    /*\n+     * We are reducing across each row of 16 threads to find the true sum of the\n+     * entire input row. The warp shfl xor loop ultimately gives each thread the \n+     * true sum.\n+     */\n+    for (unsigned lane_mask = 8; lane_mask > 0; lane_mask >>= 1) {\n+      local_sum = THCNumerics<Accreal>::add(local_sum, \n+          WARP_SHFL_XOR((row < num_rows) ? local_sum : acc_zero, lane_mask, 16));\n     }\n-    __syncthreads();\n-\n+    Accreal true_mean = THCNumerics<Accreal>::div(local_sum, \n+        ScalarConvert<int, Accreal>::to(row_size));\n \n     /*\n      * Adjust each local_M2 according to the following:\n      *   adjusted_M2 = local_M2 + mean_diff * mean_diff * count\n      * The sum of these adjusted M2s is equal to the overall M2.\n      */\n+    Accreal adjusted_M2 = acc_zero;\n     if (row < num_rows) {\n-      Accreal mean_diff = THCNumerics<Accreal>::sub(mean[threadIdx.y], local_mean);\n-      adjusted_M2[threadIdx.y][threadIdx.x] = THCNumerics<Accreal>::add(\n+      Accreal mean_diff = THCNumerics<Accreal>::sub(true_mean, local_mean);\n+      adjusted_M2 = THCNumerics<Accreal>::add(\n           local_M2,\n           THCNumerics<Accreal>::mul(\n               THCNumerics<Accreal>::mul(mean_diff, mean_diff),\n               ScalarConvert<int, Accreal>::to(count)));\n     }\n     __syncthreads();", "path": "aten/src/THC/THCTensorMathReduce.cuh", "position": null, "original_position": 94, "commit_id": "3196e5ddaa826b9e19563999120c64aa6efb545e", "original_commit_id": "a09bdaf17a3aa3143292a2ee452d1e3027819dc5", "user": {"login": "colesbury", "id": 655866, "node_id": "MDQ6VXNlcjY1NTg2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/655866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colesbury", "html_url": "https://github.com/colesbury", "followers_url": "https://api.github.com/users/colesbury/followers", "following_url": "https://api.github.com/users/colesbury/following{/other_user}", "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions", "organizations_url": "https://api.github.com/users/colesbury/orgs", "repos_url": "https://api.github.com/users/colesbury/repos", "events_url": "https://api.github.com/users/colesbury/events{/privacy}", "received_events_url": "https://api.github.com/users/colesbury/received_events", "type": "User", "site_admin": false}, "body": "Same here", "created_at": "2017-12-01T17:56:38Z", "updated_at": "2018-11-23T15:37:00Z", "html_url": "https://github.com/pytorch/pytorch/pull/3846#discussion_r154407427", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/3846", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/154407427"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/3846#discussion_r154407427"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/3846"}}, "body_html": "<p>Same here</p>", "body_text": "Same here"}