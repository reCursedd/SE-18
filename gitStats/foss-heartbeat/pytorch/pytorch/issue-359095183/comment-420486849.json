{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/420486849", "html_url": "https://github.com/pytorch/pytorch/issues/11516#issuecomment-420486849", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/11516", "id": 420486849, "node_id": "MDEyOklzc3VlQ29tbWVudDQyMDQ4Njg0OQ==", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "created_at": "2018-09-12T02:04:09Z", "updated_at": "2018-09-12T02:04:09Z", "author_association": "CONTRIBUTOR", "body_html": "<p>If you're interested in the resolution to this, please also check <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"359283037\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/11559\" data-hovercard-type=\"issue\" data-hovercard-url=\"/pytorch/pytorch/issues/11559/hovercard\" href=\"https://github.com/pytorch/pytorch/issues/11559\">#11559</a>, which describes an analogous situation with <code>TensorOptions</code>. Actually, the situations are a little asymmetric:</p>\n<ul>\n<li>Right now, <code>TensorOptions</code> is always fully specified (and we immediately fill in defaults on construction), as opposed to <code>Device</code> which is optional, and not filled in until the call site.</li>\n<li>If I say <code>x.to(device=None)</code>, I request to keep <code>x</code> on whatever device it is on today; however, if I say <code>x.to(device=\"cuda\")</code>, I'm requesting it to be moved to the <em>current</em> CUDA device, even if it is already CUDA.</li>\n</ul>\n<p>I actually feel pretty positive about having two types, and actually I like <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=3768583\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/gchanan\">@gchanan</a>'s suggested names. I don't buy the \"users will be confused\" argument: it's not like the fact that concepts \"unresolved\" and \"resolved\" index devices magically went away because you refused to name them in the static type system: you just kicked away a very helpful tool for making sure you don't mix them up.</p>\n<p>If we split them, I think we should:</p>\n<ol>\n<li>Delete <code>operator==</code> on any device that has unresolved indexes. It isn't really meaningful.</li>\n<li>Define implicit conversions from DeviceType to DeviceSpec, so that idioms like <code>to(at::kCUDA)</code> still work.</li>\n</ol>\n<p>Along with Adam's suggested implicit conversions.</p>", "body_text": "If you're interested in the resolution to this, please also check #11559, which describes an analogous situation with TensorOptions. Actually, the situations are a little asymmetric:\n\nRight now, TensorOptions is always fully specified (and we immediately fill in defaults on construction), as opposed to Device which is optional, and not filled in until the call site.\nIf I say x.to(device=None), I request to keep x on whatever device it is on today; however, if I say x.to(device=\"cuda\"), I'm requesting it to be moved to the current CUDA device, even if it is already CUDA.\n\nI actually feel pretty positive about having two types, and actually I like @gchanan's suggested names. I don't buy the \"users will be confused\" argument: it's not like the fact that concepts \"unresolved\" and \"resolved\" index devices magically went away because you refused to name them in the static type system: you just kicked away a very helpful tool for making sure you don't mix them up.\nIf we split them, I think we should:\n\nDelete operator== on any device that has unresolved indexes. It isn't really meaningful.\nDefine implicit conversions from DeviceType to DeviceSpec, so that idioms like to(at::kCUDA) still work.\n\nAlong with Adam's suggested implicit conversions.", "body": "If you're interested in the resolution to this, please also check #11559, which describes an analogous situation with `TensorOptions`. Actually, the situations are a little asymmetric:\r\n\r\n* Right now, `TensorOptions` is always fully specified (and we immediately fill in defaults on construction), as opposed to `Device` which is optional, and not filled in until the call site.\r\n* If I say `x.to(device=None)`, I request to keep `x` on whatever device it is on today; however, if I say `x.to(device=\"cuda\")`, I'm requesting it to be moved to the *current* CUDA device, even if it is already CUDA.\r\n\r\nI actually feel pretty positive about having two types, and actually I like @gchanan's suggested names. I don't buy the \"users will be confused\" argument: it's not like the fact that concepts \"unresolved\" and \"resolved\" index devices magically went away because you refused to name them in the static type system: you just kicked away a very helpful tool for making sure you don't mix them up.\r\n\r\nIf we split them, I think we should:\r\n\r\n1. Delete `operator==` on any device that has unresolved indexes. It isn't really meaningful.\r\n2. Define implicit conversions from DeviceType to DeviceSpec, so that idioms like `to(at::kCUDA)` still work.\r\n\r\nAlong with Adam's suggested implicit conversions."}