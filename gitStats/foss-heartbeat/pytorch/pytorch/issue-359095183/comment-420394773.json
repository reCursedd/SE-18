{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/420394773", "html_url": "https://github.com/pytorch/pytorch/issues/11516#issuecomment-420394773", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/11516", "id": 420394773, "node_id": "MDEyOklzc3VlQ29tbWVudDQyMDM5NDc3Mw==", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "created_at": "2018-09-11T19:30:20Z", "updated_at": "2018-09-11T19:30:20Z", "author_association": "MEMBER", "body_html": "<blockquote>\n<p>For one, in order to fix it to give it the semantics you expected, why not change the operator== to check if one of the indices -1?</p>\n</blockquote>\n<p>Because it's not the case that device without any index is equal to all devices. At best it's equivalent to a device of the same kind, with the currently (thread-locally) selected index.</p>\n<blockquote>\n<p>A default constructed string is quite different from a string with content and you wouldn\u2019t expect them to compare equal.</p>\n</blockquote>\n<p>Can't see the analogy.</p>\n<blockquote>\n<p>I think whatever we decide Device::operator== should not change its semantics from what they currently are.</p>\n</blockquote>\n<p>Agreed. The only proposal that changes <code>Device::operator==</code> is the last one, and I already pointed out a pretty fatal flaw of that approach in my initial comment.</p>\n<blockquote>\n<p>FullDevice, would add additional complexity and require more education of users</p>\n</blockquote>\n<p>Of course, but at least people would understand that <code>at::Device</code> hides this additional complexity, which you might not be aware of.</p>\n<blockquote>\n<ol>\n<li><code>ensure_has_index()</code> is useful to have either way, let's add that as a way to \"concretize\" the index.</li>\n<li>Use explicit logic for what you wanted to achieve, which was:</li>\n</ol>\n</blockquote>\n<p>Sure, both ways solve <em>this</em> problem, but they don't prevent us from adding buggy code like this one in the future.</p>\n<blockquote>\n<p>I actually don't know why your method even accepts a device in your example, that sounds like the wrong argument?</p>\n</blockquote>\n<p>This is for the <code>to()</code> functions, which need an explicit <code>Device</code> argument.</p>", "body_text": "For one, in order to fix it to give it the semantics you expected, why not change the operator== to check if one of the indices -1?\n\nBecause it's not the case that device without any index is equal to all devices. At best it's equivalent to a device of the same kind, with the currently (thread-locally) selected index.\n\nA default constructed string is quite different from a string with content and you wouldn\u2019t expect them to compare equal.\n\nCan't see the analogy.\n\nI think whatever we decide Device::operator== should not change its semantics from what they currently are.\n\nAgreed. The only proposal that changes Device::operator== is the last one, and I already pointed out a pretty fatal flaw of that approach in my initial comment.\n\nFullDevice, would add additional complexity and require more education of users\n\nOf course, but at least people would understand that at::Device hides this additional complexity, which you might not be aware of.\n\n\nensure_has_index() is useful to have either way, let's add that as a way to \"concretize\" the index.\nUse explicit logic for what you wanted to achieve, which was:\n\n\nSure, both ways solve this problem, but they don't prevent us from adding buggy code like this one in the future.\n\nI actually don't know why your method even accepts a device in your example, that sounds like the wrong argument?\n\nThis is for the to() functions, which need an explicit Device argument.", "body": "> For one, in order to fix it to give it the semantics you expected, why not change the operator== to check if one of the indices -1?\r\n\r\nBecause it's not the case that device without any index is equal to all devices. At best it's equivalent to a device of the same kind, with the currently (thread-locally) selected index.\r\n\r\n> A default constructed string is quite different from a string with content and you wouldn\u2019t expect them to compare equal.\r\n\r\nCan't see the analogy.\r\n\r\n> I think whatever we decide Device::operator== should not change its semantics from what they currently are.\r\n\r\nAgreed. The only proposal that changes `Device::operator==` is the last one, and I already pointed out a pretty fatal flaw of that approach in my initial comment.\r\n\r\n> FullDevice, would add additional complexity and require more education of users\r\n\r\nOf course, but at least people would understand that `at::Device` hides this additional complexity, which you might not be aware of.\r\n\r\n> 1. `ensure_has_index()` is useful to have either way, let's add that as a way to \"concretize\" the index.\r\n> 2. Use explicit logic for what you wanted to achieve, which was:\r\n\r\nSure, both ways solve *this* problem, but they don't prevent us from adding buggy code like this one in the future.\r\n\r\n> I actually don't know why your method even accepts a device in your example, that sounds like the wrong argument?\r\n\r\nThis is for the `to()` functions, which need an explicit `Device` argument."}