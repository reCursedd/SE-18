{"url": "https://api.github.com/repos/pytorch/pytorch/issues/4014", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/4014/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/4014/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/4014/events", "html_url": "https://github.com/pytorch/pytorch/pull/4014", "id": 279165304, "node_id": "MDExOlB1bGxSZXF1ZXN0MTU2MzE3MTYz", "number": 4014, "title": "Fix segfault during ONNX export", "user": {"login": "lantiga", "id": 191033, "node_id": "MDQ6VXNlcjE5MTAzMw==", "avatar_url": "https://avatars2.githubusercontent.com/u/191033?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lantiga", "html_url": "https://github.com/lantiga", "followers_url": "https://api.github.com/users/lantiga/followers", "following_url": "https://api.github.com/users/lantiga/following{/other_user}", "gists_url": "https://api.github.com/users/lantiga/gists{/gist_id}", "starred_url": "https://api.github.com/users/lantiga/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lantiga/subscriptions", "organizations_url": "https://api.github.com/users/lantiga/orgs", "repos_url": "https://api.github.com/users/lantiga/repos", "events_url": "https://api.github.com/users/lantiga/events{/privacy}", "received_events_url": "https://api.github.com/users/lantiga/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-12-04T21:57:26Z", "updated_at": "2017-12-05T19:31:41Z", "closed_at": "2017-12-05T19:31:40Z", "author_association": "COLLABORATOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/4014", "html_url": "https://github.com/pytorch/pytorch/pull/4014", "diff_url": "https://github.com/pytorch/pytorch/pull/4014.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/4014.patch"}, "body_html": "<p>This PR fixes segfault occurring at: <a href=\"https://ci.pytorch.org/jenkins/job/onnx-fb-universe-builds/job/caffe2-linux-xenial/45/console\" rel=\"nofollow\">https://ci.pytorch.org/jenkins/job/onnx-fb-universe-builds/job/caffe2-linux-xenial/45/console</a><br>\nStacktrace here: <a href=\"https://gist.github.com/bddppq/b90ffaa91a0415e935ffe642bb6e760c\">https://gist.github.com/bddppq/b90ffaa91a0415e935ffe642bb6e760c</a></p>\n<p>Essentially, <code>Value::setScope</code> was implemented by relaying the call to <code>node()</code>, but <code>node()</code> was not guaranteed to be non-null.</p>\n<p>Rather than checking for <code>nullptr</code> everywhere, I decided to just remove <code>Value::setScope</code> (and the other scope-related methods) from <code>Value</code> and have the user call the corresponding method on the value returned by <code>node()</code> (torch/csrc/jit/passes/onnx.cpp:89):</p>\n<pre><code>outputs[i]-&gt;node()-&gt;setScope(node-&gt;scope());\n</code></pre>\n<p>This follows the same strategy adopted for setting the source location (torch/csrc/jit/passes/onnx.cpp:88):</p>\n<pre><code>outputs[i]-&gt;node()-&gt;setSourceLocation(node-&gt;getSourceLocation());\n</code></pre>\n<p>/cc <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=13564\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ezyang\">@ezyang</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=9300575\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/bddppq\">@bddppq</a></p>", "body_text": "This PR fixes segfault occurring at: https://ci.pytorch.org/jenkins/job/onnx-fb-universe-builds/job/caffe2-linux-xenial/45/console\nStacktrace here: https://gist.github.com/bddppq/b90ffaa91a0415e935ffe642bb6e760c\nEssentially, Value::setScope was implemented by relaying the call to node(), but node() was not guaranteed to be non-null.\nRather than checking for nullptr everywhere, I decided to just remove Value::setScope (and the other scope-related methods) from Value and have the user call the corresponding method on the value returned by node() (torch/csrc/jit/passes/onnx.cpp:89):\noutputs[i]->node()->setScope(node->scope());\n\nThis follows the same strategy adopted for setting the source location (torch/csrc/jit/passes/onnx.cpp:88):\noutputs[i]->node()->setSourceLocation(node->getSourceLocation());\n\n/cc @ezyang @bddppq", "body": "This PR fixes segfault occurring at: https://ci.pytorch.org/jenkins/job/onnx-fb-universe-builds/job/caffe2-linux-xenial/45/console\r\nStacktrace here: https://gist.github.com/bddppq/b90ffaa91a0415e935ffe642bb6e760c\r\n\r\nEssentially, `Value::setScope` was implemented by relaying the call to `node()`, but `node()` was not guaranteed to be non-null.\r\n\r\nRather than checking for `nullptr` everywhere, I decided to just remove `Value::setScope` (and the other scope-related methods) from `Value` and have the user call the corresponding method on the value returned by `node()` (torch/csrc/jit/passes/onnx.cpp:89):\r\n```\r\noutputs[i]->node()->setScope(node->scope());\r\n```\r\n\r\nThis follows the same strategy adopted for setting the source location (torch/csrc/jit/passes/onnx.cpp:88):\r\n```\r\noutputs[i]->node()->setSourceLocation(node->getSourceLocation());\r\n```\r\n\r\n/cc @ezyang @bddppq "}