{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/144134365", "pull_request_review_id": 68749873, "id": 144134365, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0NDEzNDM2NQ==", "diff_hunk": "@@ -46,6 +43,37 @@ void THNN_(ClassNLLCriterion_updateOutput)(\n             \" but got weight tensor of shape: %s\", n_classes, s1.str);\n   }\n \n+  if (!reduce && n_dims == 2) {\n+    THCTensor_(resize1d)(state, output, batch_size);\n+    bool not_contiguous_weights = weights && !THCTensor_(isContiguous)(state, weights);", "path": "torch/lib/THCUNN/generic/ClassNLLCriterion.cu", "position": null, "original_position": 20, "commit_id": "81c2ad99e94da640e43931e777b99c5744978069", "original_commit_id": "3cec9d8634a22dd6d8179d9a6c490f3f3baa4a9a", "user": {"login": "colesbury", "id": 655866, "node_id": "MDQ6VXNlcjY1NTg2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/655866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colesbury", "html_url": "https://github.com/colesbury", "followers_url": "https://api.github.com/users/colesbury/followers", "following_url": "https://api.github.com/users/colesbury/following{/other_user}", "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions", "organizations_url": "https://api.github.com/users/colesbury/orgs", "repos_url": "https://api.github.com/users/colesbury/repos", "events_url": "https://api.github.com/users/colesbury/events{/privacy}", "received_events_url": "https://api.github.com/users/colesbury/received_events", "type": "User", "site_admin": false}, "body": "Use:\r\n\r\n```\r\nweights = THCTensor_(newContiguous)(state, weights)\r\n...\r\nTHCTensor_(free)(state, weights)\r\n```\r\n\r\ni.e. don't guard it with a contiguous check. `newContiguous` will already avoid the copy and just incref the tensor if it's already contiguous.", "created_at": "2017-10-11T20:59:07Z", "updated_at": "2018-11-23T15:35:14Z", "html_url": "https://github.com/pytorch/pytorch/pull/3080#discussion_r144134365", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/3080", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/144134365"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/3080#discussion_r144134365"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/3080"}}, "body_html": "<p>Use:</p>\n<pre><code>weights = THCTensor_(newContiguous)(state, weights)\n...\nTHCTensor_(free)(state, weights)\n</code></pre>\n<p>i.e. don't guard it with a contiguous check. <code>newContiguous</code> will already avoid the copy and just incref the tensor if it's already contiguous.</p>", "body_text": "Use:\nweights = THCTensor_(newContiguous)(state, weights)\n...\nTHCTensor_(free)(state, weights)\n\ni.e. don't guard it with a contiguous check. newContiguous will already avoid the copy and just incref the tensor if it's already contiguous."}