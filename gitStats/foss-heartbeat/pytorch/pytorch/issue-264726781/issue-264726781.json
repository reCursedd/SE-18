{"url": "https://api.github.com/repos/pytorch/pytorch/issues/3080", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/3080/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/3080/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/3080/events", "html_url": "https://github.com/pytorch/pytorch/pull/3080", "id": 264726781, "node_id": "MDExOlB1bGxSZXF1ZXN0MTQ2MDU0OTQ4", "number": 3080, "title": "Add reduce keyword to NLLLoss and NLLLoss2d", "user": {"login": "zou3519", "id": 5652049, "node_id": "MDQ6VXNlcjU2NTIwNDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/5652049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zou3519", "html_url": "https://github.com/zou3519", "followers_url": "https://api.github.com/users/zou3519/followers", "following_url": "https://api.github.com/users/zou3519/following{/other_user}", "gists_url": "https://api.github.com/users/zou3519/gists{/gist_id}", "starred_url": "https://api.github.com/users/zou3519/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zou3519/subscriptions", "organizations_url": "https://api.github.com/users/zou3519/orgs", "repos_url": "https://api.github.com/users/zou3519/repos", "events_url": "https://api.github.com/users/zou3519/events{/privacy}", "received_events_url": "https://api.github.com/users/zou3519/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-10-11T20:34:36Z", "updated_at": "2018-11-23T15:35:41Z", "closed_at": "2017-10-26T17:54:20Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/3080", "html_url": "https://github.com/pytorch/pytorch/pull/3080", "diff_url": "https://github.com/pytorch/pytorch/pull/3080.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/3080.patch"}, "body_html": "<h3>Summary</h3>\n<p>Adding a reduce keyword to NLLLoss as per <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"192143117\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/264\" data-hovercard-type=\"issue\" data-hovercard-url=\"/pytorch/pytorch/issues/264/hovercard\" href=\"https://github.com/pytorch/pytorch/issues/264\">#264</a>.<br>\nBy default reduce is True and gives the usual behavior; when reduce is False the loss returns<br>\na loss per element.</p>\n<h3>Test Plan</h3>\n<p>Added a few new module unit tests. Each unit test is analogous to a criterion test (in the case that reduce is True):</p>\n<ul>\n<li>NLLLoss, no reduce</li>\n<li>NLLLoss, no reduce, ignore index</li>\n<li>NLLLoss, no reduce, weights</li>\n<li>NLLLoss, no reduce, weights and ignore index</li>\n<li>NLLLoss, no reduce, negative ignore index</li>\n<li>NLLLoss2d, no reduce</li>\n<li>NLLLoss2d, weights</li>\n<li>NLLLoss2d, ignore index</li>\n</ul>\n<p>Also ran gradcheck by hand for several of the above cases. Example code:</p>\n<pre><code>import torch\nimport torch.autograd as autograd\nimport torch.nn as nn\n\nloss = nn.NLLLoss(size_average=False)\nloss2 = nn.NLLLoss(reduce=False)\ninput = autograd.Variable(torch.randn(3, 5).double().cuda(), requires_grad=True)\ntarget = autograd.Variable(torch.LongTensor([1, 0, 4]).cuda(), requires_grad=False)\nautograd.gradcheck(loss2, (input, target), raise_exception=True)\nsum(loss2(input, target)) - loss(input, target)  # check that this is 0\n</code></pre>", "body_text": "Summary\nAdding a reduce keyword to NLLLoss as per #264.\nBy default reduce is True and gives the usual behavior; when reduce is False the loss returns\na loss per element.\nTest Plan\nAdded a few new module unit tests. Each unit test is analogous to a criterion test (in the case that reduce is True):\n\nNLLLoss, no reduce\nNLLLoss, no reduce, ignore index\nNLLLoss, no reduce, weights\nNLLLoss, no reduce, weights and ignore index\nNLLLoss, no reduce, negative ignore index\nNLLLoss2d, no reduce\nNLLLoss2d, weights\nNLLLoss2d, ignore index\n\nAlso ran gradcheck by hand for several of the above cases. Example code:\nimport torch\nimport torch.autograd as autograd\nimport torch.nn as nn\n\nloss = nn.NLLLoss(size_average=False)\nloss2 = nn.NLLLoss(reduce=False)\ninput = autograd.Variable(torch.randn(3, 5).double().cuda(), requires_grad=True)\ntarget = autograd.Variable(torch.LongTensor([1, 0, 4]).cuda(), requires_grad=False)\nautograd.gradcheck(loss2, (input, target), raise_exception=True)\nsum(loss2(input, target)) - loss(input, target)  # check that this is 0", "body": "### Summary\r\nAdding a reduce keyword to NLLLoss as per https://github.com/pytorch/pytorch/issues/264. \r\nBy default reduce is True and gives the usual behavior; when reduce is False the loss returns\r\na loss per element.\r\n\r\n### Test Plan\r\nAdded a few new module unit tests. Each unit test is analogous to a criterion test (in the case that reduce is True):\r\n- NLLLoss, no reduce\r\n- NLLLoss, no reduce, ignore index\r\n- NLLLoss, no reduce, weights\r\n- NLLLoss, no reduce, weights and ignore index\r\n- NLLLoss, no reduce, negative ignore index\r\n- NLLLoss2d, no reduce\r\n- NLLLoss2d, weights\r\n- NLLLoss2d, ignore index\r\n\r\nAlso ran gradcheck by hand for several of the above cases. Example code:\r\n```\r\nimport torch\r\nimport torch.autograd as autograd\r\nimport torch.nn as nn\r\n\r\nloss = nn.NLLLoss(size_average=False)\r\nloss2 = nn.NLLLoss(reduce=False)\r\ninput = autograd.Variable(torch.randn(3, 5).double().cuda(), requires_grad=True)\r\ntarget = autograd.Variable(torch.LongTensor([1, 0, 4]).cuda(), requires_grad=False)\r\nautograd.gradcheck(loss2, (input, target), raise_exception=True)\r\nsum(loss2(input, target)) - loss(input, target)  # check that this is 0\r\n```"}