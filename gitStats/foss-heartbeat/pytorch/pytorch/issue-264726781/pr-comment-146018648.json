{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/146018648", "pull_request_review_id": 70908061, "id": 146018648, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0NjAxODY0OA==", "diff_hunk": "@@ -135,9 +163,38 @@ void THNN_(ClassNLLCriterion_updateGradInput)(\n     THError(\"weight tensor should be defined either for all or no classes\");\n   }\n \n+  if (!reduce && n_dims == 2) {\n+    THCUNN_check_dim_size(state, gradOutput, 1, 0, batch_size);\n+    if (weights) {\n+      weights = THCTensor_(newContiguous)(state, weights);\n+    }\n+\n+    ClassNLLCriterion_updateGradInput_no_reduce_kernel<real>\n+      <<<GET_BLOCKS(batch_size), CUDA_NUM_THREADS, 0, THCState_getCurrentStream(state)>>>(\n+        batch_size,\n+        toDeviceTensor<THCIndex_t, 1>(state, target),\n+        toDeviceTensor<real, 1>(state, gradOutput),\n+        toDeviceTensor<real, 2>(state, gradInput),\n+        weights ? THCTensor_(data)(state, weights) : NULL,\n+        ignore_index);\n+ \n+    if (weights) {\n+      THCTensor_(free)(state, weights);\n+    }\n+    return;\n+  }\n+\n+  if (!reduce && n_dims <= 1) {\n+    sizeAverage = false;\n+  }\n+\n+  ignore_index -= TH_INDEX_BASE;\n+\n   weights = weights ? THCTensor_(newContiguous)(state, weights) : NULL;\n   target = THCIndexTensor_(newContiguous)(state, target);\n \n+  THCUNN_check_dim_size(state, gradOutput, 1, 0, 1);\n+  real gradOutput_data = THCTensor_(get1d)(state, gradOutput, 0);", "path": "torch/lib/THCUNN/generic/ClassNLLCriterion.cu", "position": null, "original_position": 105, "commit_id": "81c2ad99e94da640e43931e777b99c5744978069", "original_commit_id": "9fb835a203e5122f5115f8f3afa1d1a765849d9b", "user": {"login": "colesbury", "id": 655866, "node_id": "MDQ6VXNlcjY1NTg2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/655866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colesbury", "html_url": "https://github.com/colesbury", "followers_url": "https://api.github.com/users/colesbury/followers", "following_url": "https://api.github.com/users/colesbury/following{/other_user}", "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions", "organizations_url": "https://api.github.com/users/colesbury/orgs", "repos_url": "https://api.github.com/users/colesbury/repos", "events_url": "https://api.github.com/users/colesbury/events{/privacy}", "received_events_url": "https://api.github.com/users/colesbury/received_events", "type": "User", "site_admin": false}, "body": "This will cause a host-device synchronization. I think it's probably better to pass the data pointer into the kernel and use it there.\r\n\r\n(Same with the other `THCTensor_(get1d)` call below)", "created_at": "2017-10-20T17:11:35Z", "updated_at": "2018-11-23T15:35:34Z", "html_url": "https://github.com/pytorch/pytorch/pull/3080#discussion_r146018648", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/3080", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/146018648"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/3080#discussion_r146018648"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/3080"}}, "body_html": "<p>This will cause a host-device synchronization. I think it's probably better to pass the data pointer into the kernel and use it there.</p>\n<p>(Same with the other <code>THCTensor_(get1d)</code> call below)</p>", "body_text": "This will cause a host-device synchronization. I think it's probably better to pass the data pointer into the kernel and use it there.\n(Same with the other THCTensor_(get1d) call below)"}