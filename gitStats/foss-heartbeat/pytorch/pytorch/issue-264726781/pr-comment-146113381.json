{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/146113381", "pull_request_review_id": 71014979, "id": 146113381, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0NjExMzM4MQ==", "diff_hunk": "@@ -34,6 +37,47 @@ __global__ void cunn_ClassNLLCriterion_updateOutput_kernel1(Dtype *output,\n   }\n }\n \n+template <typename Dtype>\n+__global__ void ClassNLLCriterion_updateOutput_no_reduce_kernel(\n+    int64_t batch_size,\n+    THCDeviceTensor<Dtype, 2> input,\n+    THCDeviceTensor<THCIndex_t, 1> target,\n+    THCDeviceTensor<Dtype, 1> output,\n+    Dtype *weights,\n+    int64_t ignore_index) {\n+\n+  CUDA_KERNEL_LOOP(index, batch_size) {\n+    int64_t cur_target = target[index];\n+    if (cur_target == ignore_index) {\n+      output[index] = ScalarConvert<int, Dtype>::to(0);\n+      continue;\n+    }\n+    Dtype weight =\n+       weights ? weights[cur_target] : ScalarConvert<int, Dtype>::to(1);\n+    output[index] = -weight * input[index][cur_target];\n+  }\n+}\n+\n+template <typename Dtype>\n+__global__ void ClassNLLCriterion_updateGradInput_no_reduce_kernel(\n+    int64_t batch_size,\n+    THCDeviceTensor<THCIndex_t, 1> target,\n+    THCDeviceTensor<Dtype, 1> gradOutput,\n+    THCDeviceTensor<Dtype, 2> gradInput,\n+    Dtype *weights,\n+    int64_t ignore_index) {\n+\n+  CUDA_KERNEL_LOOP(index, batch_size) {\n+    int64_t cur_target = target[index];", "path": "torch/lib/THCUNN/ClassNLLCriterion.cu", "position": null, "original_position": 45, "commit_id": "81c2ad99e94da640e43931e777b99c5744978069", "original_commit_id": "9fb835a203e5122f5115f8f3afa1d1a765849d9b", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "You should avoid using `int64_t` math in CUDA kernels. It's way more expensive than 32-bit math. In most cases we instantiate two kernels using two kinds of indexing, based on tensor sizes", "created_at": "2017-10-21T19:17:29Z", "updated_at": "2018-11-23T15:35:37Z", "html_url": "https://github.com/pytorch/pytorch/pull/3080#discussion_r146113381", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/3080", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/146113381"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/3080#discussion_r146113381"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/3080"}}, "body_html": "<p>You should avoid using <code>int64_t</code> math in CUDA kernels. It's way more expensive than 32-bit math. In most cases we instantiate two kernels using two kinds of indexing, based on tensor sizes</p>", "body_text": "You should avoid using int64_t math in CUDA kernels. It's way more expensive than 32-bit math. In most cases we instantiate two kernels using two kinds of indexing, based on tensor sizes"}