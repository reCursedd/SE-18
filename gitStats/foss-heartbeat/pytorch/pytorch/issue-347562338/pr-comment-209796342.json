{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/209796342", "pull_request_review_id": 145879924, "id": 209796342, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTc5NjM0Mg==", "diff_hunk": "@@ -0,0 +1,37 @@\n+#include <torch/op.h>\n+\n+#if defined(WITH_PYTHON_OP_BINDINGS)\n+#include <pybind11/pybind11.h>\n+#endif\n+\n+#include <cstddef>\n+#include <vector>\n+\n+std::vector<at::Tensor> custom_op(\n+    at::Tensor tensor,\n+    double scalar,\n+    int64_t repeat) {\n+  std::vector<at::Tensor> output;\n+  output.reserve(repeat);\n+  for (int64_t i = 0; i < repeat; ++i) {\n+    output.push_back(tensor * scalar);\n+  }\n+  return output;\n+}\n+\n+torch::RegisterOperators registry(\"custom::op\", &custom_op);\n+\n+#if defined(WITH_PYTHON_OP_BINDINGS)", "path": "test/custom_operator/op.cpp", "position": null, "original_position": 24, "commit_id": "f02b34055cddf98152c01c97d3e87e9104978c9b", "original_commit_id": "8cb6d7132be52ae42b834a9f25bf3b4fa2ad8227", "user": {"login": "dzhulgakov", "id": 17890620, "node_id": "MDQ6VXNlcjE3ODkwNjIw", "avatar_url": "https://avatars2.githubusercontent.com/u/17890620?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dzhulgakov", "html_url": "https://github.com/dzhulgakov", "followers_url": "https://api.github.com/users/dzhulgakov/followers", "following_url": "https://api.github.com/users/dzhulgakov/following{/other_user}", "gists_url": "https://api.github.com/users/dzhulgakov/gists{/gist_id}", "starred_url": "https://api.github.com/users/dzhulgakov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dzhulgakov/subscriptions", "organizations_url": "https://api.github.com/users/dzhulgakov/orgs", "repos_url": "https://api.github.com/users/dzhulgakov/repos", "events_url": "https://api.github.com/users/dzhulgakov/events{/privacy}", "received_events_url": "https://api.github.com/users/dzhulgakov/received_events", "type": "User", "site_admin": false}, "body": "you don't need to create python module. If you create the shared library that works through the registration mechanism, it's sufficient to just load it into memory and it can be done ctypes.CDLL\r\n\r\nactually you can verbatim copy the mechanism Caffe2 uses as it's exactly the same problem. See:\r\n* https://github.com/pytorch/pytorch/blob/HEAD/caffe2/python/dyndep.py\r\n* https://github.com/pytorch/pytorch/blob/HEAD/caffe2/python/extension_loader.py (handles RTLD_GLOBAL)\r\n* pytorch already handles RTLD_GLOBAL for the main _C.so: https://github.com/pytorch/pytorch/blob/HEAD/torch/__init__.py#L75\r\n\r\nThe only benefit of setup.py I can see is that setuptools manages the install path for the package. However, it depends on what's the target workflow you imagine for people developing c++ extensions. Would they install it to system paths? Or would they just drop the .so in the current model folder and load it directly?", "created_at": "2018-08-14T00:08:52Z", "updated_at": "2018-11-23T15:49:14Z", "html_url": "https://github.com/pytorch/pytorch/pull/10226#discussion_r209796342", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/10226", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/209796342"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/10226#discussion_r209796342"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/10226"}}, "body_html": "<p>you don't need to create python module. If you create the shared library that works through the registration mechanism, it's sufficient to just load it into memory and it can be done ctypes.CDLL</p>\n<p>actually you can verbatim copy the mechanism Caffe2 uses as it's exactly the same problem. See:</p>\n<ul>\n<li><a href=\"https://github.com/pytorch/pytorch/blob/HEAD/caffe2/python/dyndep.py\">https://github.com/pytorch/pytorch/blob/HEAD/caffe2/python/dyndep.py</a></li>\n<li><a href=\"https://github.com/pytorch/pytorch/blob/HEAD/caffe2/python/extension_loader.py\">https://github.com/pytorch/pytorch/blob/HEAD/caffe2/python/extension_loader.py</a> (handles RTLD_GLOBAL)</li>\n<li>pytorch already handles RTLD_GLOBAL for the main _C.so: <a href=\"https://github.com/pytorch/pytorch/blob/HEAD/torch/__init__.py#L75\">https://github.com/pytorch/pytorch/blob/HEAD/torch/__init__.py#L75</a></li>\n</ul>\n<p>The only benefit of setup.py I can see is that setuptools manages the install path for the package. However, it depends on what's the target workflow you imagine for people developing c++ extensions. Would they install it to system paths? Or would they just drop the .so in the current model folder and load it directly?</p>", "body_text": "you don't need to create python module. If you create the shared library that works through the registration mechanism, it's sufficient to just load it into memory and it can be done ctypes.CDLL\nactually you can verbatim copy the mechanism Caffe2 uses as it's exactly the same problem. See:\n\nhttps://github.com/pytorch/pytorch/blob/HEAD/caffe2/python/dyndep.py\nhttps://github.com/pytorch/pytorch/blob/HEAD/caffe2/python/extension_loader.py (handles RTLD_GLOBAL)\npytorch already handles RTLD_GLOBAL for the main _C.so: https://github.com/pytorch/pytorch/blob/HEAD/torch/__init__.py#L75\n\nThe only benefit of setup.py I can see is that setuptools manages the install path for the package. However, it depends on what's the target workflow you imagine for people developing c++ extensions. Would they install it to system paths? Or would they just drop the .so in the current model folder and load it directly?"}