{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/209803198", "pull_request_review_id": 145887470, "id": 209803198, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTgwMzE5OA==", "diff_hunk": "@@ -204,21 +199,54 @@ Operator createOperator(\n       c10::guts::typelist::map_t<decay_t, typename Traits::parameter_types>;\n   using ArgumentTuple =\n       typename c10::guts::typelist::to_tuple<ArgumentTypes>::type;\n-  using ReturnType = decay_t<typename Traits::return_type>;\n \n   auto schema = torch::jit::detail::inferAndCheckSchema<Traits>(schemaOrName);\n \n   return Operator(schema, [implementation, schema](Stack& stack) {\n     ArgumentTuple tuple;\n-    auto result = torch::jit::detail::callOperatorWithTuple<ReturnType>(\n+    torch::jit::detail::callOperatorWithTuple(\n         schema,\n         std::move(implementation),\n         stack,\n         tuple,\n         typename MakeIndices<std::tuple_size<ArgumentTuple>::value>::indices{});\n-    pack(stack, std::move(result));\n     return 0;\n   });\n }\n+\n+/// Registration class for new operators. Effectively calls\n+/// `torch::jit::registerOperator` for every supplied operator, but allows doing\n+/// so in the global scope when a `RegisterOperators` object is assigned to a\n+/// static variable. Also handles registration of user-defined, \"custom\"\n+/// operators.\n+struct TORCH_API RegisterOperators {", "path": "torch/csrc/jit/custom_operator.h", "position": 66, "original_position": 63, "commit_id": "f02b34055cddf98152c01c97d3e87e9104978c9b", "original_commit_id": "8cb6d7132be52ae42b834a9f25bf3b4fa2ad8227", "user": {"login": "goldsborough", "id": 6429851, "node_id": "MDQ6VXNlcjY0Mjk4NTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/6429851?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goldsborough", "html_url": "https://github.com/goldsborough", "followers_url": "https://api.github.com/users/goldsborough/followers", "following_url": "https://api.github.com/users/goldsborough/following{/other_user}", "gists_url": "https://api.github.com/users/goldsborough/gists{/gist_id}", "starred_url": "https://api.github.com/users/goldsborough/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goldsborough/subscriptions", "organizations_url": "https://api.github.com/users/goldsborough/orgs", "repos_url": "https://api.github.com/users/goldsborough/repos", "events_url": "https://api.github.com/users/goldsborough/events{/privacy}", "received_events_url": "https://api.github.com/users/goldsborough/received_events", "type": "User", "site_admin": false}, "body": "The original code using this, e.g. `register_aten_ops.cpp`, looks more like this:\r\n```\r\nRegisterOperators reg({\r\n  Operator(\r\n      \"aten::RoiPooling2d_backward(Tensor input, Tensor rois, int pooledHeight, int pooledWidth, float spatialScale, Tensor gradOutput, Tensor argmaxes) -> Tensor\",\r\n      [](Stack & stack) {\r\n          autograd::profiler::RecordFunction record(\"RoiPooling2d_backward\");\r\n          auto result = at::RoiPooling2d_backward(\r\n              (std::move(peek(stack, 0, 7))).toTensor(),\r\n              (std::move(peek(stack, 1, 7))).toTensor(),\r\n              (std::move(peek(stack, 2, 7))).toInt(),\r\n              (std::move(peek(stack, 3, 7))).toInt(),\r\n              (std::move(peek(stack, 4, 7))).toDouble(),\r\n              (std::move(peek(stack, 5, 7))).toTensor(),\r\n              (std::move(peek(stack, 6, 7))).toTensor()\r\n          );\r\n          drop(stack, 7);\r\n          pack(stack, std::move(result));\r\n          return 0;\r\n      }\r\n  ),\r\n  Operator(\r\n      \"aten::RoiPooling2d_forward(Tensor input, Tensor rois, int pooledHeight, int pooledWidth, float spatialScale) -> (Tensor, Tensor)\",\r\n      [](Stack & stack) {\r\n          autograd::profiler::RecordFunction record(\"RoiPooling2d_forward\");\r\n          auto result = at::RoiPooling2d_forward(\r\n              (std::move(peek(stack, 0, 5))).toTensor(),\r\n              (std::move(peek(stack, 1, 5))).toTensor(),\r\n              (std::move(peek(stack, 2, 5))).toInt(),\r\n              (std::move(peek(stack, 3, 5))).toInt(),\r\n              (std::move(peek(stack, 4, 5))).toDouble()\r\n          );\r\n          drop(stack, 5);\r\n          pack(stack, std::move(result));\r\n          return 0;\r\n      }\r\n  ),\r\n  Operator(\r\n      \"aten::__and__(Tensor self, Tensor other) -> Tensor\",\r\n      [](Stack & stack) {\r\n          autograd::profiler::RecordFunction record(\"__and__\");\r\n          auto result = at::__and__(\r\n              (std::move(peek(stack, 0, 2))).toTensor(),\r\n              (std::move(peek(stack, 1, 2))).toTensor()\r\n          );\r\n          drop(stack, 2);\r\n          pack(stack, std::move(result));\r\n          return 0;\r\n      }\r\n  ),\r\n...\r\n```", "created_at": "2018-08-14T01:00:25Z", "updated_at": "2018-11-23T15:49:15Z", "html_url": "https://github.com/pytorch/pytorch/pull/10226#discussion_r209803198", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/10226", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/209803198"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/10226#discussion_r209803198"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/10226"}}, "body_html": "<p>The original code using this, e.g. <code>register_aten_ops.cpp</code>, looks more like this:</p>\n<pre><code>RegisterOperators reg({\n  Operator(\n      \"aten::RoiPooling2d_backward(Tensor input, Tensor rois, int pooledHeight, int pooledWidth, float spatialScale, Tensor gradOutput, Tensor argmaxes) -&gt; Tensor\",\n      [](Stack &amp; stack) {\n          autograd::profiler::RecordFunction record(\"RoiPooling2d_backward\");\n          auto result = at::RoiPooling2d_backward(\n              (std::move(peek(stack, 0, 7))).toTensor(),\n              (std::move(peek(stack, 1, 7))).toTensor(),\n              (std::move(peek(stack, 2, 7))).toInt(),\n              (std::move(peek(stack, 3, 7))).toInt(),\n              (std::move(peek(stack, 4, 7))).toDouble(),\n              (std::move(peek(stack, 5, 7))).toTensor(),\n              (std::move(peek(stack, 6, 7))).toTensor()\n          );\n          drop(stack, 7);\n          pack(stack, std::move(result));\n          return 0;\n      }\n  ),\n  Operator(\n      \"aten::RoiPooling2d_forward(Tensor input, Tensor rois, int pooledHeight, int pooledWidth, float spatialScale) -&gt; (Tensor, Tensor)\",\n      [](Stack &amp; stack) {\n          autograd::profiler::RecordFunction record(\"RoiPooling2d_forward\");\n          auto result = at::RoiPooling2d_forward(\n              (std::move(peek(stack, 0, 5))).toTensor(),\n              (std::move(peek(stack, 1, 5))).toTensor(),\n              (std::move(peek(stack, 2, 5))).toInt(),\n              (std::move(peek(stack, 3, 5))).toInt(),\n              (std::move(peek(stack, 4, 5))).toDouble()\n          );\n          drop(stack, 5);\n          pack(stack, std::move(result));\n          return 0;\n      }\n  ),\n  Operator(\n      \"aten::__and__(Tensor self, Tensor other) -&gt; Tensor\",\n      [](Stack &amp; stack) {\n          autograd::profiler::RecordFunction record(\"__and__\");\n          auto result = at::__and__(\n              (std::move(peek(stack, 0, 2))).toTensor(),\n              (std::move(peek(stack, 1, 2))).toTensor()\n          );\n          drop(stack, 2);\n          pack(stack, std::move(result));\n          return 0;\n      }\n  ),\n...\n</code></pre>", "body_text": "The original code using this, e.g. register_aten_ops.cpp, looks more like this:\nRegisterOperators reg({\n  Operator(\n      \"aten::RoiPooling2d_backward(Tensor input, Tensor rois, int pooledHeight, int pooledWidth, float spatialScale, Tensor gradOutput, Tensor argmaxes) -> Tensor\",\n      [](Stack & stack) {\n          autograd::profiler::RecordFunction record(\"RoiPooling2d_backward\");\n          auto result = at::RoiPooling2d_backward(\n              (std::move(peek(stack, 0, 7))).toTensor(),\n              (std::move(peek(stack, 1, 7))).toTensor(),\n              (std::move(peek(stack, 2, 7))).toInt(),\n              (std::move(peek(stack, 3, 7))).toInt(),\n              (std::move(peek(stack, 4, 7))).toDouble(),\n              (std::move(peek(stack, 5, 7))).toTensor(),\n              (std::move(peek(stack, 6, 7))).toTensor()\n          );\n          drop(stack, 7);\n          pack(stack, std::move(result));\n          return 0;\n      }\n  ),\n  Operator(\n      \"aten::RoiPooling2d_forward(Tensor input, Tensor rois, int pooledHeight, int pooledWidth, float spatialScale) -> (Tensor, Tensor)\",\n      [](Stack & stack) {\n          autograd::profiler::RecordFunction record(\"RoiPooling2d_forward\");\n          auto result = at::RoiPooling2d_forward(\n              (std::move(peek(stack, 0, 5))).toTensor(),\n              (std::move(peek(stack, 1, 5))).toTensor(),\n              (std::move(peek(stack, 2, 5))).toInt(),\n              (std::move(peek(stack, 3, 5))).toInt(),\n              (std::move(peek(stack, 4, 5))).toDouble()\n          );\n          drop(stack, 5);\n          pack(stack, std::move(result));\n          return 0;\n      }\n  ),\n  Operator(\n      \"aten::__and__(Tensor self, Tensor other) -> Tensor\",\n      [](Stack & stack) {\n          autograd::profiler::RecordFunction record(\"__and__\");\n          auto result = at::__and__(\n              (std::move(peek(stack, 0, 2))).toTensor(),\n              (std::move(peek(stack, 1, 2))).toTensor()\n          );\n          drop(stack, 2);\n          pack(stack, std::move(result));\n          return 0;\n      }\n  ),\n...", "in_reply_to_id": 209796907}