{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/209796939", "pull_request_review_id": 145879924, "id": 209796939, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTc5NjkzOQ==", "diff_hunk": "@@ -204,21 +199,54 @@ Operator createOperator(\n       c10::guts::typelist::map_t<decay_t, typename Traits::parameter_types>;\n   using ArgumentTuple =\n       typename c10::guts::typelist::to_tuple<ArgumentTypes>::type;\n-  using ReturnType = decay_t<typename Traits::return_type>;\n \n   auto schema = torch::jit::detail::inferAndCheckSchema<Traits>(schemaOrName);\n \n   return Operator(schema, [implementation, schema](Stack& stack) {\n     ArgumentTuple tuple;\n-    auto result = torch::jit::detail::callOperatorWithTuple<ReturnType>(\n+    torch::jit::detail::callOperatorWithTuple(\n         schema,\n         std::move(implementation),\n         stack,\n         tuple,\n         typename MakeIndices<std::tuple_size<ArgumentTuple>::value>::indices{});\n-    pack(stack, std::move(result));\n     return 0;\n   });\n }\n+\n+/// Registration class for new operators. Effectively calls\n+/// `torch::jit::registerOperator` for every supplied operator, but allows doing\n+/// so in the global scope when a `RegisterOperators` object is assigned to a\n+/// static variable. Also handles registration of user-defined, \"custom\"\n+/// operators.\n+struct TORCH_API RegisterOperators {\n+  RegisterOperators() = default;", "path": "torch/csrc/jit/custom_operator.h", "position": 67, "original_position": 64, "commit_id": "f02b34055cddf98152c01c97d3e87e9104978c9b", "original_commit_id": "8cb6d7132be52ae42b834a9f25bf3b4fa2ad8227", "user": {"login": "dzhulgakov", "id": 17890620, "node_id": "MDQ6VXNlcjE3ODkwNjIw", "avatar_url": "https://avatars2.githubusercontent.com/u/17890620?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dzhulgakov", "html_url": "https://github.com/dzhulgakov", "followers_url": "https://api.github.com/users/dzhulgakov/followers", "following_url": "https://api.github.com/users/dzhulgakov/following{/other_user}", "gists_url": "https://api.github.com/users/dzhulgakov/gists{/gist_id}", "starred_url": "https://api.github.com/users/dzhulgakov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dzhulgakov/subscriptions", "organizations_url": "https://api.github.com/users/dzhulgakov/orgs", "repos_url": "https://api.github.com/users/dzhulgakov/repos", "events_url": "https://api.github.com/users/dzhulgakov/events{/privacy}", "received_events_url": "https://api.github.com/users/dzhulgakov/received_events", "type": "User", "site_admin": false}, "body": "why not =delete?", "created_at": "2018-08-14T00:12:44Z", "updated_at": "2018-11-23T15:49:15Z", "html_url": "https://github.com/pytorch/pytorch/pull/10226#discussion_r209796939", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/10226", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/209796939"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/10226#discussion_r209796939"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/10226"}}, "body_html": "<p>why not =delete?</p>", "body_text": "why not =delete?"}