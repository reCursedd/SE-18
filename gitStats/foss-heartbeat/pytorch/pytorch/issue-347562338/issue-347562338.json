{"url": "https://api.github.com/repos/pytorch/pytorch/issues/10226", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/10226/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/10226/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/10226/events", "html_url": "https://github.com/pytorch/pytorch/pull/10226", "id": 347562338, "node_id": "MDExOlB1bGxSZXF1ZXN0MjA2MTU5MzA4", "number": 10226, "title": "[JIT] Build mechanism for custom operators", "user": {"login": "goldsborough", "id": 6429851, "node_id": "MDQ6VXNlcjY0Mjk4NTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/6429851?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goldsborough", "html_url": "https://github.com/goldsborough", "followers_url": "https://api.github.com/users/goldsborough/followers", "following_url": "https://api.github.com/users/goldsborough/following{/other_user}", "gists_url": "https://api.github.com/users/goldsborough/gists{/gist_id}", "starred_url": "https://api.github.com/users/goldsborough/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goldsborough/subscriptions", "organizations_url": "https://api.github.com/users/goldsborough/orgs", "repos_url": "https://api.github.com/users/goldsborough/repos", "events_url": "https://api.github.com/users/goldsborough/events{/privacy}", "received_events_url": "https://api.github.com/users/goldsborough/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 679953983, "node_id": "MDU6TGFiZWw2Nzk5NTM5ODM=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/jit", "name": "jit", "color": "c5def5", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-08-03T23:27:57Z", "updated_at": "2018-11-23T15:49:37Z", "closed_at": "2018-08-17T01:57:28Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/10226", "html_url": "https://github.com/pytorch/pytorch/pull/10226", "diff_url": "https://github.com/pytorch/pytorch/pull/10226.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/10226.patch"}, "body_html": "<p>This is the last step in the custom operator implementation: providing a way to build from C++ and Python. For this I:</p>\n<ol>\n<li>Created a <code>FindTorch.cmake</code> taken largely from <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=3605224\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ebetica\">@ebetica</a> with a CMake function to easily create simple custom op libraries</li>\n<li>Created a <code> torch/op.h</code> header for easy inclusion of necessary headers,</li>\n<li>Created a test directory <code>pytorch/test/custom_operator</code> which includes the basic setup for a custom op.\n<ol>\n<li>It defines an op in <code>op.{h,cpp}</code></li>\n<li>Registers it with the JIT using <code>RegisterOperators</code></li>\n<li>Builds it into a shared library via a <code>CMakeLists.txt</code></li>\n<li>Binds it into Python using a <code>setup.py</code>. This step makes use of our C++ extension setup that we already have. No work, yey!</li>\n</ol>\n</li>\n</ol>\n<p>The pure C++ and the Python builds are separate and not coupled in any way.</p>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=370202\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/zdevito\">@zdevito</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1310570\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/soumith\">@soumith</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=17890620\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/dzhulgakov\">@dzhulgakov</a></p>", "body_text": "This is the last step in the custom operator implementation: providing a way to build from C++ and Python. For this I:\n\nCreated a FindTorch.cmake taken largely from @ebetica with a CMake function to easily create simple custom op libraries\nCreated a  torch/op.h header for easy inclusion of necessary headers,\nCreated a test directory pytorch/test/custom_operator which includes the basic setup for a custom op.\n\nIt defines an op in op.{h,cpp}\nRegisters it with the JIT using RegisterOperators\nBuilds it into a shared library via a CMakeLists.txt\nBinds it into Python using a setup.py. This step makes use of our C++ extension setup that we already have. No work, yey!\n\n\n\nThe pure C++ and the Python builds are separate and not coupled in any way.\n@zdevito @soumith @dzhulgakov", "body": "This is the last step in the custom operator implementation: providing a way to build from C++ and Python. For this I:\r\n\r\n1. Created a `FindTorch.cmake` taken largely from @ebetica with a CMake function to easily create simple custom op libraries\r\n2. Created a ` torch/op.h` header for easy inclusion of necessary headers,\r\n3. Created a test directory `pytorch/test/custom_operator` which includes the basic setup for a custom op. \r\n    1. It defines an op in `op.{h,cpp}`\r\n    2. Registers it with the JIT using `RegisterOperators`\r\n    3. Builds it into a shared library via a `CMakeLists.txt`\r\n    4. Binds it into Python using a `setup.py`. This step makes use of our C++ extension setup that we already have. No work, yey!\r\n\r\nThe pure C++ and the Python builds are separate and not coupled in any way.\r\n\r\n@zdevito @soumith @dzhulgakov "}