{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/395938042", "html_url": "https://github.com/pytorch/pytorch/issues/8283#issuecomment-395938042", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/8283", "id": 395938042, "node_id": "MDEyOklzc3VlQ29tbWVudDM5NTkzODA0Mg==", "user": {"login": "ngimel", "id": 15841449, "node_id": "MDQ6VXNlcjE1ODQxNDQ5", "avatar_url": "https://avatars3.githubusercontent.com/u/15841449?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ngimel", "html_url": "https://github.com/ngimel", "followers_url": "https://api.github.com/users/ngimel/followers", "following_url": "https://api.github.com/users/ngimel/following{/other_user}", "gists_url": "https://api.github.com/users/ngimel/gists{/gist_id}", "starred_url": "https://api.github.com/users/ngimel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ngimel/subscriptions", "organizations_url": "https://api.github.com/users/ngimel/orgs", "repos_url": "https://api.github.com/users/ngimel/repos", "events_url": "https://api.github.com/users/ngimel/events{/privacy}", "received_events_url": "https://api.github.com/users/ngimel/received_events", "type": "User", "site_admin": false}, "created_at": "2018-06-09T04:10:31Z", "updated_at": "2018-06-09T04:10:31Z", "author_association": "CONTRIBUTOR", "body_html": "<p>I was not able to reproduce non-deterministic results as long as bn weights are initialized to a fixed value. You are right that in your case the expected results is 0, as expected results is (x-mean)/var*weight[+bias], and, as long as mean is exactly equal to tensor values (as it should be), result is 0. However, due to some quirks of how cudnn computes output, a small (on the order of 1 ulp) error creeps in. With the default epsilon 1/var is approx 300, weight is on the order of 1, to get the result you are getting x-mean should be on the order of 1e-5. Given that x and mean are 100, it's enough for mean to have a 1e-7 relative error (which is approx 1 ulp) to produce the results you are seeing, which may happen due to fp arithmetic being inexact.</p>", "body_text": "I was not able to reproduce non-deterministic results as long as bn weights are initialized to a fixed value. You are right that in your case the expected results is 0, as expected results is (x-mean)/var*weight[+bias], and, as long as mean is exactly equal to tensor values (as it should be), result is 0. However, due to some quirks of how cudnn computes output, a small (on the order of 1 ulp) error creeps in. With the default epsilon 1/var is approx 300, weight is on the order of 1, to get the result you are getting x-mean should be on the order of 1e-5. Given that x and mean are 100, it's enough for mean to have a 1e-7 relative error (which is approx 1 ulp) to produce the results you are seeing, which may happen due to fp arithmetic being inexact.", "body": "I was not able to reproduce non-deterministic results as long as bn weights are initialized to a fixed value. You are right that in your case the expected results is 0, as expected results is (x-mean)/var*weight[+bias], and, as long as mean is exactly equal to tensor values (as it should be), result is 0. However, due to some quirks of how cudnn computes output, a small (on the order of 1 ulp) error creeps in. With the default epsilon 1/var is approx 300, weight is on the order of 1, to get the result you are getting x-mean should be on the order of 1e-5. Given that x and mean are 100, it's enough for mean to have a 1e-7 relative error (which is approx 1 ulp) to produce the results you are seeing, which may happen due to fp arithmetic being inexact. "}