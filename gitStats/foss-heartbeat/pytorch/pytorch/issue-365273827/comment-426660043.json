{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/426660043", "html_url": "https://github.com/pytorch/pytorch/pull/12213#issuecomment-426660043", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/12213", "id": 426660043, "node_id": "MDEyOklzc3VlQ29tbWVudDQyNjY2MDA0Mw==", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "created_at": "2018-10-03T14:32:59Z", "updated_at": "2018-10-03T14:32:59Z", "author_association": "CONTRIBUTOR", "body_html": "<p>CR on <code>clang_tidy.py</code></p>\n<ul>\n<li><div class=\"border rounded-1 my-2\">\n  <div class=\"f6 px-3 py-2 lh-condensed border-bottom bg-gray-light\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/pytorch/pytorch/blob/5564d8c0af37d74bd9ff0f19d083d065244acc08/tools/clang_tidy.py#L164\">pytorch/tools/clang_tidy.py</a>\n    </p>\n    <p class=\"mb-0 text-gray-light\">\n         Line 164\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/pytorch/pytorch/commit/5564d8c0af37d74bd9ff0f19d083d065244acc08\">5564d8c</a>\n    </p>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L164\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"164\"></td>\n          <td id=\"LC164\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> parser.add_argument( </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n This is not the idiomatic way to pass extra arguments to an underlying executable, when there is a unique such executable (as is this case); these arguments should come after a <code>--</code> in the command line. See <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"356623217\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/11209\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/pytorch/pytorch/pull/11209/hovercard\" href=\"https://github.com/pytorch/pytorch/pull/11209\">#11209</a> for an example of adding this functionality to a Python script using argparse.</li>\n<li><div class=\"border rounded-1 my-2\">\n  <div class=\"f6 px-3 py-2 lh-condensed border-bottom bg-gray-light\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/pytorch/pytorch/blob/5564d8c0af37d74bd9ff0f19d083d065244acc08/tools/clang_tidy.py#L207\">pytorch/tools/clang_tidy.py</a>\n    </p>\n    <p class=\"mb-0 text-gray-light\">\n         Line 207\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/pytorch/pytorch/commit/5564d8c0af37d74bd9ff0f19d083d065244acc08\">5564d8c</a>\n    </p>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L207\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"207\"></td>\n          <td id=\"LC207\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> parser.add_argument( </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n This is not the idiomatic flag name; the idiomatic name is <code>--dry-run</code> with abbreviation <code>-n</code>. See for example <a href=\"https://linux.die.net/man/1/rsync\" rel=\"nofollow\">https://linux.die.net/man/1/rsync</a> <a href=\"https://linux.die.net/man/1/git-review\" rel=\"nofollow\">https://linux.die.net/man/1/git-review</a> <a href=\"https://linux.die.net/man/1/hg\" rel=\"nofollow\">https://linux.die.net/man/1/hg</a> (Sometimes people accept <code>-s</code>, but that's short for <code>--simulate</code>)</li>\n<li><div class=\"border rounded-1 my-2\">\n  <div class=\"f6 px-3 py-2 lh-condensed border-bottom bg-gray-light\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/pytorch/pytorch/blob/5564d8c0af37d74bd9ff0f19d083d065244acc08/tools/clang_tidy.py#L59\">pytorch/tools/clang_tidy.py</a>\n    </p>\n    <p class=\"mb-0 text-gray-light\">\n         Line 59\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/pytorch/pytorch/commit/5564d8c0af37d74bd9ff0f19d083d065244acc08\">5564d8c</a>\n    </p>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L59\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"59\"></td>\n          <td id=\"LC59\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> command <span class=\"pl-k\">=</span> [<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>git<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>--no-pager<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>diff<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>--no-color<span class=\"pl-pds\">\"</span></span>] <span class=\"pl-k\">+</span> args </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n This is not the correct way to query git programatically. You should use a plumbing command, rather than the porcelain command (see also <code>Git - Plumbing and Porcelain &lt;https://git-scm.com/book/en/v2/Git-Internals-Plumbing-and-Porcelain&gt;</code>_). Using plumbing will reduce the amount of preparatory work you have to do to get the command to give you something machine only (e.g., you don't have to pass <code>--no-pager</code> and <code>--no-color</code>). In this case, because you want to diff against the working tree, you should use <code>git-diff-index</code>. Read the manpage for this command to see how it can be done.</li>\n<li><div class=\"border rounded-1 my-2\">\n  <div class=\"f6 px-3 py-2 lh-condensed border-bottom bg-gray-light\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/pytorch/pytorch/blob/5564d8c0af37d74bd9ff0f19d083d065244acc08/tools/clang_tidy.py#L110\">pytorch/tools/clang_tidy.py</a>\n    </p>\n    <p class=\"mb-0 text-gray-light\">\n         Line 110\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/pytorch/pytorch/commit/5564d8c0af37d74bd9ff0f19d083d065244acc08\">5564d8c</a>\n    </p>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L110\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"110\"></td>\n          <td id=\"LC110\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-s\"><span class=\"pl-pds\">\"\"\"</span>Yields all files in any of the given paths<span class=\"pl-pds\">\"\"\"</span></span> </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n No, please don't do this. If you pass the base directory, this will walk recursively into the build directory and <code>.git</code> and grab you all of your build products too. Even if you use it on a subdirectory, it will still grab any build products. Use <code>git-ls-files</code> to get an accurate listing of all files in Git which are checked into source control and can be profitably linted.</li>\n<li><div class=\"border rounded-1 my-2\">\n  <div class=\"f6 px-3 py-2 lh-condensed border-bottom bg-gray-light\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/pytorch/pytorch/blob/5564d8c0af37d74bd9ff0f19d083d065244acc08/tools/clang_tidy.py#L232\">pytorch/tools/clang_tidy.py</a>\n    </p>\n    <p class=\"mb-0 text-gray-light\">\n         Line 232\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/pytorch/pytorch/commit/5564d8c0af37d74bd9ff0f19d083d065244acc08\">5564d8c</a>\n    </p>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L232\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"232\"></td>\n          <td id=\"LC232\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> files <span class=\"pl-k\">=</span> remove_recursive_files(files, paths, options.verbose) </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n This seems like an awfully circuitous way to implement recursive file removal.</li>\n<li><div class=\"border rounded-1 my-2\">\n  <div class=\"f6 px-3 py-2 lh-condensed border-bottom bg-gray-light\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/pytorch/pytorch/blob/5564d8c0af37d74bd9ff0f19d083d065244acc08/tools/clang_tidy.py#L183\">pytorch/tools/clang_tidy.py</a>\n    </p>\n    <p class=\"mb-0 text-gray-light\">\n         Line 183\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/pytorch/pytorch/commit/5564d8c0af37d74bd9ff0f19d083d065244acc08\">5564d8c</a>\n    </p>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L183\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"183\"></td>\n          <td id=\"LC183\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-v\">help</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>File patterns as regular expressions<span class=\"pl-pds\">\"</span></span>, </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n The doc here should mention that regexes implicitly get <code>$</code> appended to them</li>\n<li><div class=\"border rounded-1 my-2\">\n  <div class=\"f6 px-3 py-2 lh-condensed border-bottom bg-gray-light\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/pytorch/pytorch/blob/5564d8c0af37d74bd9ff0f19d083d065244acc08/tools/clang_tidy.py#L44\">pytorch/tools/clang_tidy.py</a>\n    </p>\n    <p class=\"mb-0 text-gray-light\">\n         Line 44\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/pytorch/pytorch/commit/5564d8c0af37d74bd9ff0f19d083d065244acc08\">5564d8c</a>\n    </p>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L44\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"44\"></td>\n          <td id=\"LC44\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-k\">return</span> [glob.replace(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>*<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>.*<span class=\"pl-pds\">\"</span></span>).replace(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>?<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>.<span class=\"pl-pds\">\"</span></span>) <span class=\"pl-k\">for</span> glob <span class=\"pl-k\">in</span> globs] </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n Uhhhhh no, please don't do this. Use <a href=\"https://docs.python.org/2/library/fnmatch.html#fnmatch.fnmatch\" rel=\"nofollow\">https://docs.python.org/2/library/fnmatch.html#fnmatch.fnmatch</a> instead</li>\n<li><div class=\"border rounded-1 my-2\">\n  <div class=\"f6 px-3 py-2 lh-condensed border-bottom bg-gray-light\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/pytorch/pytorch/blob/5564d8c0af37d74bd9ff0f19d083d065244acc08/tools/clang_tidy.py#L138\">pytorch/tools/clang_tidy.py</a>\n    </p>\n    <p class=\"mb-0 text-gray-light\">\n         Line 138\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/pytorch/pytorch/commit/5564d8c0af37d74bd9ff0f19d083d065244acc08\">5564d8c</a>\n    </p>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L138\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"138\"></td>\n          <td id=\"LC138\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-c\"><span class=\"pl-c\">#</span> Here we convert the YAML config file to a JSON blob.</span> </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n That's weird, <a href=\"http://manpages.ubuntu.com/manpages/xenial/man1/clang-tidy-3.7.1.html\" rel=\"nofollow\">http://manpages.ubuntu.com/manpages/xenial/man1/clang-tidy-3.7.1.html</a> seems to imply that clang-tidy understands YAML here too. What's going on? In fact, clang-tidy seems to imply that it will automatically try to read <code>.clang-tidy</code> itself</li>\n<li><div class=\"border rounded-1 my-2\">\n  <div class=\"f6 px-3 py-2 lh-condensed border-bottom bg-gray-light\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/pytorch/pytorch/blob/5564d8c0af37d74bd9ff0f19d083d065244acc08/tools/clang_tidy.py#L17\">pytorch/tools/clang_tidy.py</a>\n    </p>\n    <p class=\"mb-0 text-gray-light\">\n         Line 17\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/pytorch/pytorch/commit/5564d8c0af37d74bd9ff0f19d083d065244acc08\">5564d8c</a>\n    </p>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L17\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"17\"></td>\n          <td id=\"LC17\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-k\">def</span> <span class=\"pl-en\">run_shell_command</span>(<span class=\"pl-smi\">arguments</span>, <span class=\"pl-smi\">process_name</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">None</span>, <span class=\"pl-smi\">verbose</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">False</span>): </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n I still find this function deeply dubious.</li>\n</ul>", "body_text": "CR on clang_tidy.py\n\n\n  \n    \n      pytorch/tools/clang_tidy.py\n    \n    \n         Line 164\n      in\n      5564d8c\n    \n    \n    \n    \n\n        \n          \n           parser.add_argument( \n        \n    \n  \n\n This is not the idiomatic way to pass extra arguments to an underlying executable, when there is a unique such executable (as is this case); these arguments should come after a -- in the command line. See #11209 for an example of adding this functionality to a Python script using argparse.\n\n  \n    \n      pytorch/tools/clang_tidy.py\n    \n    \n         Line 207\n      in\n      5564d8c\n    \n    \n    \n    \n\n        \n          \n           parser.add_argument( \n        \n    \n  \n\n This is not the idiomatic flag name; the idiomatic name is --dry-run with abbreviation -n. See for example https://linux.die.net/man/1/rsync https://linux.die.net/man/1/git-review https://linux.die.net/man/1/hg (Sometimes people accept -s, but that's short for --simulate)\n\n  \n    \n      pytorch/tools/clang_tidy.py\n    \n    \n         Line 59\n      in\n      5564d8c\n    \n    \n    \n    \n\n        \n          \n           command = [\"git\", \"--no-pager\", \"diff\", \"--no-color\"] + args \n        \n    \n  \n\n This is not the correct way to query git programatically. You should use a plumbing command, rather than the porcelain command (see also Git - Plumbing and Porcelain <https://git-scm.com/book/en/v2/Git-Internals-Plumbing-and-Porcelain>_). Using plumbing will reduce the amount of preparatory work you have to do to get the command to give you something machine only (e.g., you don't have to pass --no-pager and --no-color). In this case, because you want to diff against the working tree, you should use git-diff-index. Read the manpage for this command to see how it can be done.\n\n  \n    \n      pytorch/tools/clang_tidy.py\n    \n    \n         Line 110\n      in\n      5564d8c\n    \n    \n    \n    \n\n        \n          \n           \"\"\"Yields all files in any of the given paths\"\"\" \n        \n    \n  \n\n No, please don't do this. If you pass the base directory, this will walk recursively into the build directory and .git and grab you all of your build products too. Even if you use it on a subdirectory, it will still grab any build products. Use git-ls-files to get an accurate listing of all files in Git which are checked into source control and can be profitably linted.\n\n  \n    \n      pytorch/tools/clang_tidy.py\n    \n    \n         Line 232\n      in\n      5564d8c\n    \n    \n    \n    \n\n        \n          \n           files = remove_recursive_files(files, paths, options.verbose) \n        \n    \n  \n\n This seems like an awfully circuitous way to implement recursive file removal.\n\n  \n    \n      pytorch/tools/clang_tidy.py\n    \n    \n         Line 183\n      in\n      5564d8c\n    \n    \n    \n    \n\n        \n          \n           help=\"File patterns as regular expressions\", \n        \n    \n  \n\n The doc here should mention that regexes implicitly get $ appended to them\n\n  \n    \n      pytorch/tools/clang_tidy.py\n    \n    \n         Line 44\n      in\n      5564d8c\n    \n    \n    \n    \n\n        \n          \n           return [glob.replace(\"*\", \".*\").replace(\"?\", \".\") for glob in globs] \n        \n    \n  \n\n Uhhhhh no, please don't do this. Use https://docs.python.org/2/library/fnmatch.html#fnmatch.fnmatch instead\n\n  \n    \n      pytorch/tools/clang_tidy.py\n    \n    \n         Line 138\n      in\n      5564d8c\n    \n    \n    \n    \n\n        \n          \n           # Here we convert the YAML config file to a JSON blob. \n        \n    \n  \n\n That's weird, http://manpages.ubuntu.com/manpages/xenial/man1/clang-tidy-3.7.1.html seems to imply that clang-tidy understands YAML here too. What's going on? In fact, clang-tidy seems to imply that it will automatically try to read .clang-tidy itself\n\n  \n    \n      pytorch/tools/clang_tidy.py\n    \n    \n         Line 17\n      in\n      5564d8c\n    \n    \n    \n    \n\n        \n          \n           def run_shell_command(arguments, process_name=None, verbose=False): \n        \n    \n  \n\n I still find this function deeply dubious.", "body": "CR on `clang_tidy.py`\r\n\r\n* https://github.com/pytorch/pytorch/blob/5564d8c0af37d74bd9ff0f19d083d065244acc08/tools/clang_tidy.py#L164 This is not the idiomatic way to pass extra arguments to an underlying executable, when there is a unique such executable (as is this case); these arguments should come after a `--` in the command line. See #11209 for an example of adding this functionality to a Python script using argparse.\r\n* https://github.com/pytorch/pytorch/blob/5564d8c0af37d74bd9ff0f19d083d065244acc08/tools/clang_tidy.py#L207 This is not the idiomatic flag name; the idiomatic name is `--dry-run` with abbreviation `-n`. See for example https://linux.die.net/man/1/rsync https://linux.die.net/man/1/git-review https://linux.die.net/man/1/hg (Sometimes people accept `-s`, but that's short for `--simulate`)\r\n* https://github.com/pytorch/pytorch/blob/5564d8c0af37d74bd9ff0f19d083d065244acc08/tools/clang_tidy.py#L59 This is not the correct way to query git programatically. You should use a plumbing command, rather than the porcelain command (see also `Git - Plumbing and Porcelain <https://git-scm.com/book/en/v2/Git-Internals-Plumbing-and-Porcelain>`_). Using plumbing will reduce the amount of preparatory work you have to do to get the command to give you something machine only (e.g., you don't have to pass `--no-pager` and `--no-color`). In this case, because you want to diff against the working tree, you should use `git-diff-index`. Read the manpage for this command to see how it can be done.\r\n* https://github.com/pytorch/pytorch/blob/5564d8c0af37d74bd9ff0f19d083d065244acc08/tools/clang_tidy.py#L110 No, please don't do this. If you pass the base directory, this will walk recursively into the build directory and `.git` and grab you all of your build products too. Even if you use it on a subdirectory, it will still grab any build products. Use `git-ls-files` to get an accurate listing of all files in Git which are checked into source control and can be profitably linted.\r\n* https://github.com/pytorch/pytorch/blob/5564d8c0af37d74bd9ff0f19d083d065244acc08/tools/clang_tidy.py#L232 This seems like an awfully circuitous way to implement recursive file removal.\r\n* https://github.com/pytorch/pytorch/blob/5564d8c0af37d74bd9ff0f19d083d065244acc08/tools/clang_tidy.py#L183 The doc here should mention that regexes implicitly get `$` appended to them\r\n* https://github.com/pytorch/pytorch/blob/5564d8c0af37d74bd9ff0f19d083d065244acc08/tools/clang_tidy.py#L44 Uhhhhh no, please don't do this. Use https://docs.python.org/2/library/fnmatch.html#fnmatch.fnmatch instead\r\n* https://github.com/pytorch/pytorch/blob/5564d8c0af37d74bd9ff0f19d083d065244acc08/tools/clang_tidy.py#L138 That's weird, http://manpages.ubuntu.com/manpages/xenial/man1/clang-tidy-3.7.1.html seems to imply that clang-tidy understands YAML here too. What's going on? In fact, clang-tidy seems to imply that it will automatically try to read `.clang-tidy` itself\r\n* https://github.com/pytorch/pytorch/blob/5564d8c0af37d74bd9ff0f19d083d065244acc08/tools/clang_tidy.py#L17 I still find this function deeply dubious."}