{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/364595446", "html_url": "https://github.com/pytorch/pytorch/pull/5108#issuecomment-364595446", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/5108", "id": 364595446, "node_id": "MDEyOklzc3VlQ29tbWVudDM2NDU5NTQ0Ng==", "user": {"login": "Stonesjtu", "id": 4556044, "node_id": "MDQ6VXNlcjQ1NTYwNDQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/4556044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Stonesjtu", "html_url": "https://github.com/Stonesjtu", "followers_url": "https://api.github.com/users/Stonesjtu/followers", "following_url": "https://api.github.com/users/Stonesjtu/following{/other_user}", "gists_url": "https://api.github.com/users/Stonesjtu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Stonesjtu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Stonesjtu/subscriptions", "organizations_url": "https://api.github.com/users/Stonesjtu/orgs", "repos_url": "https://api.github.com/users/Stonesjtu/repos", "events_url": "https://api.github.com/users/Stonesjtu/events{/privacy}", "received_events_url": "https://api.github.com/users/Stonesjtu/received_events", "type": "User", "site_admin": false}, "created_at": "2018-02-09T23:07:56Z", "updated_at": "2018-02-09T23:07:56Z", "author_association": "CONTRIBUTOR", "body_html": "<p>I can't agree more, predicting the workload can get even more complicated since pytorch ultilizes dynamic graph which is built on every data batch. But  <code>batch_size</code> is at least the most general metric of workload that can be easily obtained before actual <strong>forward</strong> and <strong>backward</strong> .</p>", "body_text": "I can't agree more, predicting the workload can get even more complicated since pytorch ultilizes dynamic graph which is built on every data batch. But  batch_size is at least the most general metric of workload that can be easily obtained before actual forward and backward .", "body": "I can't agree more, predicting the workload can get even more complicated since pytorch ultilizes dynamic graph which is built on every data batch. But  `batch_size` is at least the most general metric of workload that can be easily obtained before actual **forward** and **backward** ."}