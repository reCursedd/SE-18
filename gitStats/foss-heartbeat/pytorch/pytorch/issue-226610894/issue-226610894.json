{"url": "https://api.github.com/repos/pytorch/pytorch/issues/1487", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/1487/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/1487/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/1487/events", "html_url": "https://github.com/pytorch/pytorch/issues/1487", "id": 226610894, "node_id": "MDU6SXNzdWUyMjY2MTA4OTQ=", "number": 1487, "title": "[feature request/proposal] Relax scale_factor for nearest neighbor upsampling", "user": {"login": "andrewgiessel", "id": 1160997, "node_id": "MDQ6VXNlcjExNjA5OTc=", "avatar_url": "https://avatars0.githubusercontent.com/u/1160997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andrewgiessel", "html_url": "https://github.com/andrewgiessel", "followers_url": "https://api.github.com/users/andrewgiessel/followers", "following_url": "https://api.github.com/users/andrewgiessel/following{/other_user}", "gists_url": "https://api.github.com/users/andrewgiessel/gists{/gist_id}", "starred_url": "https://api.github.com/users/andrewgiessel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andrewgiessel/subscriptions", "organizations_url": "https://api.github.com/users/andrewgiessel/orgs", "repos_url": "https://api.github.com/users/andrewgiessel/repos", "events_url": "https://api.github.com/users/andrewgiessel/events{/privacy}", "received_events_url": "https://api.github.com/users/andrewgiessel/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 424131849, "node_id": "MDU6TGFiZWw0MjQxMzE4NDk=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true}, {"id": 443483881, "node_id": "MDU6TGFiZWw0NDM0ODM4ODE=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/todo", "name": "todo", "color": "c2e0c6", "default": false}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-05-05T15:35:21Z", "updated_at": "2017-05-10T09:35:19Z", "closed_at": null, "author_association": "CONTRIBUTOR", "body_html": "<p>Much like <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"221714389\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/1257\" data-hovercard-type=\"issue\" data-hovercard-url=\"/pytorch/pytorch/issues/1257/hovercard\" href=\"https://github.com/pytorch/pytorch/issues/1257\">#1257</a>, I'd like to allow nearest neighbor upsampling to be non-uniform.  From what I can tell, this means going down into cuda/c level code.</p>\n<p>It seems like <a href=\"https://github.com/pytorch/pytorch/blob/master/torch/lib/THCUNN/generic/SpatialUpSamplingNearest.cu\">this</a> is the relevant file, in particular lines <a href=\"https://github.com/pytorch/pytorch/blob/master/torch/lib/THCUNN/generic/SpatialUpSamplingNearest.cu#L19-L20\">19-20</a>, <a href=\"https://github.com/pytorch/pytorch/blob/master/torch/lib/THCUNN/generic/SpatialUpSamplingNearest.cu#L54-L55\">54-55</a>, and <a href=\"url\"></a> all use a single integer <code>scale_factor</code> parameter in simple ways, but also, <a href=\"https://github.com/pytorch/pytorch/blob/master/torch/lib/THCUNN/generic/SpatialUpSamplingNearest.cu#L165-L166\">165-166</a> is a cuda kernel call (I <em>think</em>).   The idea would be to change this to a pair of ints, and do the tuple casting up in the python layers.</p>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=4583066\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/apaszke\">@apaszke</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1310570\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/soumith\">@soumith</a>  any pointers about what I'd need to change or thoughts in general?  also pinging <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=191033\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/lantiga\">@lantiga</a>, who's been working on another upsampling PR, and has done work at the cuda/c level.</p>\n<p>FWIW and for anyone that finds this via search I'll point out that I've build a manual solution for my needs in a <code>forward()</code> call within my network.  Simply make a new <code>Variable</code> that's the size needed and manually fill the array with data from the smaller variable.</p>", "body_text": "Much like #1257, I'd like to allow nearest neighbor upsampling to be non-uniform.  From what I can tell, this means going down into cuda/c level code.\nIt seems like this is the relevant file, in particular lines 19-20, 54-55, and  all use a single integer scale_factor parameter in simple ways, but also, 165-166 is a cuda kernel call (I think).   The idea would be to change this to a pair of ints, and do the tuple casting up in the python layers.\n@apaszke @soumith  any pointers about what I'd need to change or thoughts in general?  also pinging @lantiga, who's been working on another upsampling PR, and has done work at the cuda/c level.\nFWIW and for anyone that finds this via search I'll point out that I've build a manual solution for my needs in a forward() call within my network.  Simply make a new Variable that's the size needed and manually fill the array with data from the smaller variable.", "body": "Much like #1257, I'd like to allow nearest neighbor upsampling to be non-uniform.  From what I can tell, this means going down into cuda/c level code.\r\n\r\nIt seems like [this](https://github.com/pytorch/pytorch/blob/master/torch/lib/THCUNN/generic/SpatialUpSamplingNearest.cu) is the relevant file, in particular lines [19-20](https://github.com/pytorch/pytorch/blob/master/torch/lib/THCUNN/generic/SpatialUpSamplingNearest.cu#L19-L20), [54-55](https://github.com/pytorch/pytorch/blob/master/torch/lib/THCUNN/generic/SpatialUpSamplingNearest.cu#L54-L55), and [](url) all use a single integer `scale_factor` parameter in simple ways, but also, [165-166](https://github.com/pytorch/pytorch/blob/master/torch/lib/THCUNN/generic/SpatialUpSamplingNearest.cu#L165-L166) is a cuda kernel call (I *think*).   The idea would be to change this to a pair of ints, and do the tuple casting up in the python layers.\r\n\r\n@apaszke @soumith  any pointers about what I'd need to change or thoughts in general?  also pinging @lantiga, who's been working on another upsampling PR, and has done work at the cuda/c level.\r\n\r\nFWIW and for anyone that finds this via search I'll point out that I've build a manual solution for my needs in a `forward()` call within my network.  Simply make a new `Variable` that's the size needed and manually fill the array with data from the smaller variable."}