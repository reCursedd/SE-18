{"url": "https://api.github.com/repos/pytorch/pytorch/issues/4935", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/4935/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/4935/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/4935/events", "html_url": "https://github.com/pytorch/pytorch/issues/4935", "id": 292777284, "node_id": "MDU6SXNzdWUyOTI3NzcyODQ=", "number": 4935, "title": "Different values of index of topk  for one tensor", "user": {"login": "kudep", "id": 11869257, "node_id": "MDQ6VXNlcjExODY5MjU3", "avatar_url": "https://avatars0.githubusercontent.com/u/11869257?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kudep", "html_url": "https://github.com/kudep", "followers_url": "https://api.github.com/users/kudep/followers", "following_url": "https://api.github.com/users/kudep/following{/other_user}", "gists_url": "https://api.github.com/users/kudep/gists{/gist_id}", "starred_url": "https://api.github.com/users/kudep/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kudep/subscriptions", "organizations_url": "https://api.github.com/users/kudep/orgs", "repos_url": "https://api.github.com/users/kudep/repos", "events_url": "https://api.github.com/users/kudep/events{/privacy}", "received_events_url": "https://api.github.com/users/kudep/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-01-30T13:11:05Z", "updated_at": "2018-06-06T21:37:44Z", "closed_at": "2018-06-06T21:37:44Z", "author_association": "NONE", "body_html": "<h2>Environment info</h2>\n<ul>\n<li>OS: Linux 4.13.0-31-generic <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"177291339\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/34\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/pytorch/pytorch/pull/34/hovercard\" href=\"https://github.com/pytorch/pytorch/pull/34\">#34</a>~16.04.1-Ubuntu</li>\n<li>PyTorch version: 0.3</li>\n<li>How you installed PyTorch (conda, pip, source): pip</li>\n<li>Python version: 3.5</li>\n<li>CUDA/cuDNN version: 8/7</li>\n<li>GPU models and configuration: 1080Ti</li>\n</ul>\n<h2>Issue</h2>\n<p>Snippet:</p>\n<pre><code>print(\"============================================================\")\nif DEBUG_LOG1 : print(\"type(decoder_output) = {}\".format(type(decoder_output)))\nif DEBUG_LOG1 : print(\"decoder_output.size() = {}\".format(decoder_output.size()))\nprint(\"++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\")\nif DEBUG_LOG1 : print(\"decoder_output.data.topk(1) = \".format(decoder_output.data.topk(1)))\nif DEBUG_LOG1 : print(\"decoder_output.data.topk(1) = \".format(decoder_output.data.topk(1)))\nif DEBUG_LOG1 : print(\"decoder_output.data.topk(1) = \".format(decoder_output.data.topk(1)))\nif DEBUG_LOG1 : print(\"decoder_output.data.topk(1) = \".format(decoder_output.data.topk(1)))\nprint(\"////////////////////////////////////////////////////////////\")\ntopv, topi = decoder_output.data.topk(1)\nif DEBUG_LOG1 : print(\"topi,topv = {}{}\".format(topi,topv))\ntopv, topi = decoder_output.data.topk(1)\nif DEBUG_LOG1 : print(\"topi,topv = {}{}\".format(topi,topv))\ntopv, topi = decoder_output.data.topk(1)\nif DEBUG_LOG1 : print(\"topi,topv = {}{}\".format(topi,topv))\ntopv, topi = decoder_output.data.topk(1)\nif DEBUG_LOG1 : print(\"topi,topv = {}{}\".format(topi,topv))\nprint(\"------------------------------------------------------------\")\n</code></pre>\n<p>Out:</p>\n<pre><code>============================================================\ntype(decoder_output) = &lt;class 'torch.autograd.variable.Variable'&gt;\ndecoder_output.size() = torch.Size([1, 29419])\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\ndecoder_output.data.topk(1) = (\nnan\n[torch.cuda.FloatTensor of size 1x1 (GPU 0)]\n, \n 0\n[torch.cuda.LongTensor of size 1x1 (GPU 0)]\n)\ndecoder_output.data.topk(1) = (\nnan\n[torch.cuda.FloatTensor of size 1x1 (GPU 0)]\n, \n 0\n[torch.cuda.LongTensor of size 1x1 (GPU 0)]\n)\ndecoder_output.data.topk(1) = (\nnan\n[torch.cuda.FloatTensor of size 1x1 (GPU 0)]\n, \n 0\n[torch.cuda.LongTensor of size 1x1 (GPU 0)]\n)\ndecoder_output.data.topk(1) = (\nnan\n[torch.cuda.FloatTensor of size 1x1 (GPU 0)]\n, \n 0\n[torch.cuda.LongTensor of size 1x1 (GPU 0)]\n)\n\n////////////////////////////////////////////////////////////\ntopi,topv = \n 0\n[torch.cuda.LongTensor of size 1x1 (GPU 0)]\n\nnan\n[torch.cuda.FloatTensor of size 1x1 (GPU 0)]\n\ntopi,topv = \n 9.2234e+18\n[torch.cuda.LongTensor of size 1x1 (GPU 0)]\n\nnan\n[torch.cuda.FloatTensor of size 1x1 (GPU 0)]\n\ntopi,topv = \n 9.2234e+18\n[torch.cuda.LongTensor of size 1x1 (GPU 0)]\n\nnan\n[torch.cuda.FloatTensor of size 1x1 (GPU 0)]\n\ntopi,topv = \n 2.1475e+09\n[torch.cuda.LongTensor of size 1x1 (GPU 0)]\n\nnan\n[torch.cuda.FloatTensor of size 1x1 (GPU 0)]\n\n------------------------------------------------------------\n\n</code></pre>", "body_text": "Environment info\n\nOS: Linux 4.13.0-31-generic #34~16.04.1-Ubuntu\nPyTorch version: 0.3\nHow you installed PyTorch (conda, pip, source): pip\nPython version: 3.5\nCUDA/cuDNN version: 8/7\nGPU models and configuration: 1080Ti\n\nIssue\nSnippet:\nprint(\"============================================================\")\nif DEBUG_LOG1 : print(\"type(decoder_output) = {}\".format(type(decoder_output)))\nif DEBUG_LOG1 : print(\"decoder_output.size() = {}\".format(decoder_output.size()))\nprint(\"++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\")\nif DEBUG_LOG1 : print(\"decoder_output.data.topk(1) = \".format(decoder_output.data.topk(1)))\nif DEBUG_LOG1 : print(\"decoder_output.data.topk(1) = \".format(decoder_output.data.topk(1)))\nif DEBUG_LOG1 : print(\"decoder_output.data.topk(1) = \".format(decoder_output.data.topk(1)))\nif DEBUG_LOG1 : print(\"decoder_output.data.topk(1) = \".format(decoder_output.data.topk(1)))\nprint(\"////////////////////////////////////////////////////////////\")\ntopv, topi = decoder_output.data.topk(1)\nif DEBUG_LOG1 : print(\"topi,topv = {}{}\".format(topi,topv))\ntopv, topi = decoder_output.data.topk(1)\nif DEBUG_LOG1 : print(\"topi,topv = {}{}\".format(topi,topv))\ntopv, topi = decoder_output.data.topk(1)\nif DEBUG_LOG1 : print(\"topi,topv = {}{}\".format(topi,topv))\ntopv, topi = decoder_output.data.topk(1)\nif DEBUG_LOG1 : print(\"topi,topv = {}{}\".format(topi,topv))\nprint(\"------------------------------------------------------------\")\n\nOut:\n============================================================\ntype(decoder_output) = <class 'torch.autograd.variable.Variable'>\ndecoder_output.size() = torch.Size([1, 29419])\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\ndecoder_output.data.topk(1) = (\nnan\n[torch.cuda.FloatTensor of size 1x1 (GPU 0)]\n, \n 0\n[torch.cuda.LongTensor of size 1x1 (GPU 0)]\n)\ndecoder_output.data.topk(1) = (\nnan\n[torch.cuda.FloatTensor of size 1x1 (GPU 0)]\n, \n 0\n[torch.cuda.LongTensor of size 1x1 (GPU 0)]\n)\ndecoder_output.data.topk(1) = (\nnan\n[torch.cuda.FloatTensor of size 1x1 (GPU 0)]\n, \n 0\n[torch.cuda.LongTensor of size 1x1 (GPU 0)]\n)\ndecoder_output.data.topk(1) = (\nnan\n[torch.cuda.FloatTensor of size 1x1 (GPU 0)]\n, \n 0\n[torch.cuda.LongTensor of size 1x1 (GPU 0)]\n)\n\n////////////////////////////////////////////////////////////\ntopi,topv = \n 0\n[torch.cuda.LongTensor of size 1x1 (GPU 0)]\n\nnan\n[torch.cuda.FloatTensor of size 1x1 (GPU 0)]\n\ntopi,topv = \n 9.2234e+18\n[torch.cuda.LongTensor of size 1x1 (GPU 0)]\n\nnan\n[torch.cuda.FloatTensor of size 1x1 (GPU 0)]\n\ntopi,topv = \n 9.2234e+18\n[torch.cuda.LongTensor of size 1x1 (GPU 0)]\n\nnan\n[torch.cuda.FloatTensor of size 1x1 (GPU 0)]\n\ntopi,topv = \n 2.1475e+09\n[torch.cuda.LongTensor of size 1x1 (GPU 0)]\n\nnan\n[torch.cuda.FloatTensor of size 1x1 (GPU 0)]\n\n------------------------------------------------------------", "body": "\r\n## Environment info\r\n- OS: Linux 4.13.0-31-generic #34~16.04.1-Ubuntu\r\n- PyTorch version: 0.3\r\n- How you installed PyTorch (conda, pip, source): pip\r\n- Python version: 3.5\r\n- CUDA/cuDNN version: 8/7\r\n- GPU models and configuration: 1080Ti\r\n\r\n## Issue\r\nSnippet:\r\n```\r\nprint(\"============================================================\")\r\nif DEBUG_LOG1 : print(\"type(decoder_output) = {}\".format(type(decoder_output)))\r\nif DEBUG_LOG1 : print(\"decoder_output.size() = {}\".format(decoder_output.size()))\r\nprint(\"++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\")\r\nif DEBUG_LOG1 : print(\"decoder_output.data.topk(1) = \".format(decoder_output.data.topk(1)))\r\nif DEBUG_LOG1 : print(\"decoder_output.data.topk(1) = \".format(decoder_output.data.topk(1)))\r\nif DEBUG_LOG1 : print(\"decoder_output.data.topk(1) = \".format(decoder_output.data.topk(1)))\r\nif DEBUG_LOG1 : print(\"decoder_output.data.topk(1) = \".format(decoder_output.data.topk(1)))\r\nprint(\"////////////////////////////////////////////////////////////\")\r\ntopv, topi = decoder_output.data.topk(1)\r\nif DEBUG_LOG1 : print(\"topi,topv = {}{}\".format(topi,topv))\r\ntopv, topi = decoder_output.data.topk(1)\r\nif DEBUG_LOG1 : print(\"topi,topv = {}{}\".format(topi,topv))\r\ntopv, topi = decoder_output.data.topk(1)\r\nif DEBUG_LOG1 : print(\"topi,topv = {}{}\".format(topi,topv))\r\ntopv, topi = decoder_output.data.topk(1)\r\nif DEBUG_LOG1 : print(\"topi,topv = {}{}\".format(topi,topv))\r\nprint(\"------------------------------------------------------------\")\r\n```\r\nOut:\r\n```\r\n============================================================\r\ntype(decoder_output) = <class 'torch.autograd.variable.Variable'>\r\ndecoder_output.size() = torch.Size([1, 29419])\r\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\r\ndecoder_output.data.topk(1) = (\r\nnan\r\n[torch.cuda.FloatTensor of size 1x1 (GPU 0)]\r\n, \r\n 0\r\n[torch.cuda.LongTensor of size 1x1 (GPU 0)]\r\n)\r\ndecoder_output.data.topk(1) = (\r\nnan\r\n[torch.cuda.FloatTensor of size 1x1 (GPU 0)]\r\n, \r\n 0\r\n[torch.cuda.LongTensor of size 1x1 (GPU 0)]\r\n)\r\ndecoder_output.data.topk(1) = (\r\nnan\r\n[torch.cuda.FloatTensor of size 1x1 (GPU 0)]\r\n, \r\n 0\r\n[torch.cuda.LongTensor of size 1x1 (GPU 0)]\r\n)\r\ndecoder_output.data.topk(1) = (\r\nnan\r\n[torch.cuda.FloatTensor of size 1x1 (GPU 0)]\r\n, \r\n 0\r\n[torch.cuda.LongTensor of size 1x1 (GPU 0)]\r\n)\r\n\r\n////////////////////////////////////////////////////////////\r\ntopi,topv = \r\n 0\r\n[torch.cuda.LongTensor of size 1x1 (GPU 0)]\r\n\r\nnan\r\n[torch.cuda.FloatTensor of size 1x1 (GPU 0)]\r\n\r\ntopi,topv = \r\n 9.2234e+18\r\n[torch.cuda.LongTensor of size 1x1 (GPU 0)]\r\n\r\nnan\r\n[torch.cuda.FloatTensor of size 1x1 (GPU 0)]\r\n\r\ntopi,topv = \r\n 9.2234e+18\r\n[torch.cuda.LongTensor of size 1x1 (GPU 0)]\r\n\r\nnan\r\n[torch.cuda.FloatTensor of size 1x1 (GPU 0)]\r\n\r\ntopi,topv = \r\n 2.1475e+09\r\n[torch.cuda.LongTensor of size 1x1 (GPU 0)]\r\n\r\nnan\r\n[torch.cuda.FloatTensor of size 1x1 (GPU 0)]\r\n\r\n------------------------------------------------------------\r\n\r\n```\r\n\r\n"}