{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/171619760", "pull_request_review_id": 100504991, "id": 171619760, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MTYxOTc2MA==", "diff_hunk": "@@ -1,4 +1,3 @@\n-#include \"Python.h\"", "path": "tools/jit/templates/aten_dispatch.cpp", "position": 1, "original_position": 1, "commit_id": "a0eb1cd51127dcfc01172a01a5add6687d64291b", "original_commit_id": "481ef326e27efed3c679628d9abb51007659db97", "user": {"login": "lantiga", "id": 191033, "node_id": "MDQ6VXNlcjE5MTAzMw==", "avatar_url": "https://avatars2.githubusercontent.com/u/191033?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lantiga", "html_url": "https://github.com/lantiga", "followers_url": "https://api.github.com/users/lantiga/followers", "following_url": "https://api.github.com/users/lantiga/following{/other_user}", "gists_url": "https://api.github.com/users/lantiga/gists{/gist_id}", "starred_url": "https://api.github.com/users/lantiga/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lantiga/subscriptions", "organizations_url": "https://api.github.com/users/lantiga/orgs", "repos_url": "https://api.github.com/users/lantiga/repos", "events_url": "https://api.github.com/users/lantiga/events{/privacy}", "received_events_url": "https://api.github.com/users/lantiga/received_events", "type": "User", "site_admin": false}, "body": "So, as I understand it, the issue is that non-Python-using headers currently include `Python.h` only to avoid the warnings, just because `Python.h` (version 2.x) doesn't `undef` 3 symbols before (re-)defining them.\r\n\r\nThe solution I've seen floating around is to manually undef those symbols before including `Python.h` in Python-using headers.\r\n\r\nIn this PR, I've removed all unnecessary `Python.h` includes in non-Python-using headers.\r\nThe last part of the fix would be to create a new header where we just `undef` those symbols and include `Python.h`. The idea would be to include that header instead of including `Python.h` directly in Python-using-headers.\r\n\r\nThe (maybe) more explicit alternative would be to create a macro that undefs those symbols to call before including `Python.h` in Python-using-headers. I'm not sure that's any better.\r\n\r\nI hope I'm getting it in general :-)", "created_at": "2018-03-01T16:44:07Z", "updated_at": "2018-11-23T15:40:13Z", "html_url": "https://github.com/pytorch/pytorch/pull/5356#discussion_r171619760", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/5356", "author_association": "COLLABORATOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/171619760"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/5356#discussion_r171619760"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/5356"}}, "body_html": "<p>So, as I understand it, the issue is that non-Python-using headers currently include <code>Python.h</code> only to avoid the warnings, just because <code>Python.h</code> (version 2.x) doesn't <code>undef</code> 3 symbols before (re-)defining them.</p>\n<p>The solution I've seen floating around is to manually undef those symbols before including <code>Python.h</code> in Python-using headers.</p>\n<p>In this PR, I've removed all unnecessary <code>Python.h</code> includes in non-Python-using headers.<br>\nThe last part of the fix would be to create a new header where we just <code>undef</code> those symbols and include <code>Python.h</code>. The idea would be to include that header instead of including <code>Python.h</code> directly in Python-using-headers.</p>\n<p>The (maybe) more explicit alternative would be to create a macro that undefs those symbols to call before including <code>Python.h</code> in Python-using-headers. I'm not sure that's any better.</p>\n<p>I hope I'm getting it in general :-)</p>", "body_text": "So, as I understand it, the issue is that non-Python-using headers currently include Python.h only to avoid the warnings, just because Python.h (version 2.x) doesn't undef 3 symbols before (re-)defining them.\nThe solution I've seen floating around is to manually undef those symbols before including Python.h in Python-using headers.\nIn this PR, I've removed all unnecessary Python.h includes in non-Python-using headers.\nThe last part of the fix would be to create a new header where we just undef those symbols and include Python.h. The idea would be to include that header instead of including Python.h directly in Python-using-headers.\nThe (maybe) more explicit alternative would be to create a macro that undefs those symbols to call before including Python.h in Python-using-headers. I'm not sure that's any better.\nI hope I'm getting it in general :-)", "in_reply_to_id": 171228718}