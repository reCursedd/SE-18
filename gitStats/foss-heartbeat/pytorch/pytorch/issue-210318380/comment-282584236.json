{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/282584236", "html_url": "https://github.com/pytorch/pytorch/pull/857#issuecomment-282584236", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/857", "id": 282584236, "node_id": "MDEyOklzc3VlQ29tbWVudDI4MjU4NDIzNg==", "user": {"login": "ngimel", "id": 15841449, "node_id": "MDQ6VXNlcjE1ODQxNDQ5", "avatar_url": "https://avatars3.githubusercontent.com/u/15841449?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ngimel", "html_url": "https://github.com/ngimel", "followers_url": "https://api.github.com/users/ngimel/followers", "following_url": "https://api.github.com/users/ngimel/following{/other_user}", "gists_url": "https://api.github.com/users/ngimel/gists{/gist_id}", "starred_url": "https://api.github.com/users/ngimel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ngimel/subscriptions", "organizations_url": "https://api.github.com/users/ngimel/orgs", "repos_url": "https://api.github.com/users/ngimel/repos", "events_url": "https://api.github.com/users/ngimel/events{/privacy}", "received_events_url": "https://api.github.com/users/ngimel/received_events", "type": "User", "site_admin": false}, "created_at": "2017-02-26T20:22:27Z", "updated_at": "2017-02-26T20:22:27Z", "author_association": "CONTRIBUTOR", "body_html": "<p>I must be missing something - why are expands slow on the GPU? Those are CPU operations setting the necessary dimensions and strides, without operations on the underlying GPU data. I was experimenting recently with replacing creating add_buffer and addr_ with expand and add for Linear, and while cublas ger_kernel is usually faster than torch's pointwiseApply2, overall time is on par or slightly less (because in the first case, input.new(1).resize().fill_ translates into cudaMemset, a bunch of cudaGetDevice/cudaSetDevice (why so many?), launching pointwiseApply1 kernel to fill, and only then launching cublas ger_kernel). There is no reason why torch's pointwiseApply kernels should be much slower than cublas - they can be improved by adding unrolls and handling 0 strides more efficiently, except bias_add is rarely a bottleneck, so no one is doing it.<br>\ncudnn has addTensor and opTensor that handle addition with broadcasting, but they are a pain to use and have strange performance holes for some sizes.</p>", "body_text": "I must be missing something - why are expands slow on the GPU? Those are CPU operations setting the necessary dimensions and strides, without operations on the underlying GPU data. I was experimenting recently with replacing creating add_buffer and addr_ with expand and add for Linear, and while cublas ger_kernel is usually faster than torch's pointwiseApply2, overall time is on par or slightly less (because in the first case, input.new(1).resize().fill_ translates into cudaMemset, a bunch of cudaGetDevice/cudaSetDevice (why so many?), launching pointwiseApply1 kernel to fill, and only then launching cublas ger_kernel). There is no reason why torch's pointwiseApply kernels should be much slower than cublas - they can be improved by adding unrolls and handling 0 strides more efficiently, except bias_add is rarely a bottleneck, so no one is doing it.\ncudnn has addTensor and opTensor that handle addition with broadcasting, but they are a pain to use and have strange performance holes for some sizes.", "body": "I must be missing something - why are expands slow on the GPU? Those are CPU operations setting the necessary dimensions and strides, without operations on the underlying GPU data. I was experimenting recently with replacing creating add_buffer and addr_ with expand and add for Linear, and while cublas ger_kernel is usually faster than torch's pointwiseApply2, overall time is on par or slightly less (because in the first case, input.new(1).resize().fill_ translates into cudaMemset, a bunch of cudaGetDevice/cudaSetDevice (why so many?), launching pointwiseApply1 kernel to fill, and only then launching cublas ger_kernel). There is no reason why torch's pointwiseApply kernels should be much slower than cublas - they can be improved by adding unrolls and handling 0 strides more efficiently, except bias_add is rarely a bottleneck, so no one is doing it. \r\ncudnn has addTensor and opTensor that handle addition with broadcasting, but they are a pain to use and have strange performance holes for some sizes. "}