{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/289123628", "html_url": "https://github.com/pytorch/pytorch/pull/857#issuecomment-289123628", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/857", "id": 289123628, "node_id": "MDEyOklzc3VlQ29tbWVudDI4OTEyMzYyOA==", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "created_at": "2017-03-24T19:36:07Z", "updated_at": "2017-03-24T19:49:15Z", "author_association": "MEMBER", "body_html": "<p>I'm not sure if it's the right way to use biases on the GPU. I just ran a quick benchmark and it seems that <code>addr_</code> is 20x slower than <code>expand_as</code> + <code>add_</code>. Here's the script (requires Python&gt;=3.3):</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> torch\n<span class=\"pl-k\">import</span> time                             \n                                    \nx <span class=\"pl-k\">=</span> torch.randn(<span class=\"pl-c1\">4000</span>).cuda()        \ny <span class=\"pl-k\">=</span> torch.zeros(<span class=\"pl-c1\">128</span>, <span class=\"pl-c1\">4000</span>).cuda()                            \n                    \ns <span class=\"pl-k\">=</span> time.perf_counter()             \n<span class=\"pl-k\">for</span> i <span class=\"pl-k\">in</span> <span class=\"pl-c1\">range</span>(<span class=\"pl-c1\">1000</span>):               \n    add_buffer <span class=\"pl-k\">=</span> x.new(<span class=\"pl-c1\">128</span>).fill_(<span class=\"pl-c1\">1</span>)\n    y.addr_(add_buffer, x)          \ntorch.cuda.synchronize()            \n<span class=\"pl-c1\">print</span>(time.perf_counter() <span class=\"pl-k\">-</span> s)      \n                                    \ns <span class=\"pl-k\">=</span> time.perf_counter()             \n<span class=\"pl-k\">for</span> i <span class=\"pl-k\">in</span> <span class=\"pl-c1\">range</span>(<span class=\"pl-c1\">1000</span>):               \n    y.add_(x.expand_as(y))          \ntorch.cuda.synchronize()            \n<span class=\"pl-c1\">print</span>(time.perf_counter() <span class=\"pl-k\">-</span> s)      </pre></div>\n<p>And the results are:</p>\n<pre><code>0.23105818685144186\n0.01973715308122337\n</code></pre>", "body_text": "I'm not sure if it's the right way to use biases on the GPU. I just ran a quick benchmark and it seems that addr_ is 20x slower than expand_as + add_. Here's the script (requires Python>=3.3):\nimport torch\nimport time                             \n                                    \nx = torch.randn(4000).cuda()        \ny = torch.zeros(128, 4000).cuda()                            \n                    \ns = time.perf_counter()             \nfor i in range(1000):               \n    add_buffer = x.new(128).fill_(1)\n    y.addr_(add_buffer, x)          \ntorch.cuda.synchronize()            \nprint(time.perf_counter() - s)      \n                                    \ns = time.perf_counter()             \nfor i in range(1000):               \n    y.add_(x.expand_as(y))          \ntorch.cuda.synchronize()            \nprint(time.perf_counter() - s)      \nAnd the results are:\n0.23105818685144186\n0.01973715308122337", "body": "I'm not sure if it's the right way to use biases on the GPU. I just ran a quick benchmark and it seems that `addr_` is 20x slower than `expand_as` + `add_`. Here's the script (requires Python>=3.3):\r\n```python\r\nimport torch\r\nimport time                             \r\n                                    \r\nx = torch.randn(4000).cuda()        \r\ny = torch.zeros(128, 4000).cuda()                            \r\n                    \r\ns = time.perf_counter()             \r\nfor i in range(1000):               \r\n    add_buffer = x.new(128).fill_(1)\r\n    y.addr_(add_buffer, x)          \r\ntorch.cuda.synchronize()            \r\nprint(time.perf_counter() - s)      \r\n                                    \r\ns = time.perf_counter()             \r\nfor i in range(1000):               \r\n    y.add_(x.expand_as(y))          \r\ntorch.cuda.synchronize()            \r\nprint(time.perf_counter() - s)      \r\n```\r\n\r\nAnd the results are:\r\n```\r\n0.23105818685144186\r\n0.01973715308122337\r\n```"}