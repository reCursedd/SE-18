{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/143749092", "pull_request_review_id": 68303334, "id": 143749092, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0Mzc0OTA5Mg==", "diff_hunk": "@@ -551,6 +551,81 @@ def __repr__(self):\n         tmpstr = tmpstr + ')'\n         return tmpstr\n \n+    def summary(self, input_size):\n+        def register_hook(module):\n+            def hook(module, input, output):\n+                class_name = str(module.__class__).split('.')[-1].split(\"'\")[0]\n+                module_idx = len(summary)\n+                m_key = '%s-%i' % (class_name, module_idx + 1)\n+                summary[m_key] = OrderedDict()\n+                summary[m_key]['input_shape'] = list(input[0].size())\n+                summary[m_key]['input_shape'][0] = None\n+                summary[m_key]['output_shape'] = list(output.size())\n+                summary[m_key]['output_shape'][0] = None\n+\n+                params = 0\n+                if hasattr(module, 'weight'):\n+                    params += torch.prod(torch.LongTensor(list(module.weight.size())))\n+                    if module.weight.requires_grad:\n+                        summary[m_key]['trainable'] = True\n+                    else:\n+                        summary[m_key]['trainable'] = False\n+                if hasattr(module, 'bias'):\n+                    params += torch.prod(torch.LongTensor(list(module.bias.size())))\n+                summary[m_key]['nb_params'] = params\n+\n+            if not isinstance(module, torch.nn.Sequential) and \\\n+               not isinstance(module, torch.nn.ModuleList) and \\\n+               not (module == self):\n+                hooks.append(module.register_forward_hook(hook))\n+\n+        # check if there are multiple inputs to the network\n+        if isinstance(input_size[0], (list, tuple)):\n+            x = [Variable(th.rand(1, *in_size)) for in_size in input_size]\n+        else:\n+            x = Variable(torch.randn(1, *input_size))\n+\n+        # create properties\n+        summary = OrderedDict()\n+        hooks = []\n+        # register hook\n+        self.apply(register_hook)\n+        # make a forward pass\n+        self(x)\n+        # remove these hooks\n+        for h in hooks:\n+            h.remove()\n+\n+        # print out neatly\n+        names = list(self._modules.keys())", "path": "torch/nn/modules/module.py", "position": null, "original_position": 50, "commit_id": "b7b04c276b0cf406e327d1192f61489b78267488", "original_commit_id": "98a3fdf83d1d345cf8db906f395c8a973961cc6b", "user": {"login": "fmassa", "id": 9110200, "node_id": "MDQ6VXNlcjkxMTAyMDA=", "avatar_url": "https://avatars2.githubusercontent.com/u/9110200?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fmassa", "html_url": "https://github.com/fmassa", "followers_url": "https://api.github.com/users/fmassa/followers", "following_url": "https://api.github.com/users/fmassa/following{/other_user}", "gists_url": "https://api.github.com/users/fmassa/gists{/gist_id}", "starred_url": "https://api.github.com/users/fmassa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fmassa/subscriptions", "organizations_url": "https://api.github.com/users/fmassa/orgs", "repos_url": "https://api.github.com/users/fmassa/repos", "events_url": "https://api.github.com/users/fmassa/events{/privacy}", "received_events_url": "https://api.github.com/users/fmassa/received_events", "type": "User", "site_admin": false}, "body": "This only prints the modules that are in the parent module, but what if you have something like the following?\r\n```python\r\nclass Model0(nn.Module):\r\n    def __init__(self):\r\n        super(Model0, self).__init__()\r\n        self.conv1 = nn.Conv2d(1, 1, 1)\r\n    def forward(self, input):\r\n        return self.conv1(input)\r\n\r\nclass Model(nn.Module):\r\n    def __init__(self):\r\n        super(Model, self).__init__()\r\n        self.conv1 = nn.Conv2d(1, 1, 1)\r\n        self.mod = Model0()\r\n    def forward(self, input):\r\n        return self.mod(self.conv1(input))\r\n```\r\nGiven that you are applying the hooks to all modules iteratively (because of the `apply`), I think we should also walk recursively here, maybe using `self.named_modules()`?", "created_at": "2017-10-10T14:41:57Z", "updated_at": "2018-11-23T15:35:12Z", "html_url": "https://github.com/pytorch/pytorch/pull/3043#discussion_r143749092", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/3043", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/143749092"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/3043#discussion_r143749092"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/3043"}}, "body_html": "<p>This only prints the modules that are in the parent module, but what if you have something like the following?</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">class</span> <span class=\"pl-en\">Model0</span>(<span class=\"pl-e\">nn</span>.<span class=\"pl-e\">Module</span>):\n    <span class=\"pl-k\">def</span> <span class=\"pl-c1\">__init__</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>):\n        <span class=\"pl-c1\">super</span>(Model0, <span class=\"pl-c1\">self</span>).<span class=\"pl-c1\">__init__</span>()\n        <span class=\"pl-c1\">self</span>.conv1 <span class=\"pl-k\">=</span> nn.Conv2d(<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>)\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">forward</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>, <span class=\"pl-smi\">input</span>):\n        <span class=\"pl-k\">return</span> <span class=\"pl-c1\">self</span>.conv1(<span class=\"pl-c1\">input</span>)\n\n<span class=\"pl-k\">class</span> <span class=\"pl-en\">Model</span>(<span class=\"pl-e\">nn</span>.<span class=\"pl-e\">Module</span>):\n    <span class=\"pl-k\">def</span> <span class=\"pl-c1\">__init__</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>):\n        <span class=\"pl-c1\">super</span>(Model, <span class=\"pl-c1\">self</span>).<span class=\"pl-c1\">__init__</span>()\n        <span class=\"pl-c1\">self</span>.conv1 <span class=\"pl-k\">=</span> nn.Conv2d(<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>)\n        <span class=\"pl-c1\">self</span>.mod <span class=\"pl-k\">=</span> Model0()\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">forward</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>, <span class=\"pl-smi\">input</span>):\n        <span class=\"pl-k\">return</span> <span class=\"pl-c1\">self</span>.mod(<span class=\"pl-c1\">self</span>.conv1(<span class=\"pl-c1\">input</span>))</pre></div>\n<p>Given that you are applying the hooks to all modules iteratively (because of the <code>apply</code>), I think we should also walk recursively here, maybe using <code>self.named_modules()</code>?</p>", "body_text": "This only prints the modules that are in the parent module, but what if you have something like the following?\nclass Model0(nn.Module):\n    def __init__(self):\n        super(Model0, self).__init__()\n        self.conv1 = nn.Conv2d(1, 1, 1)\n    def forward(self, input):\n        return self.conv1(input)\n\nclass Model(nn.Module):\n    def __init__(self):\n        super(Model, self).__init__()\n        self.conv1 = nn.Conv2d(1, 1, 1)\n        self.mod = Model0()\n    def forward(self, input):\n        return self.mod(self.conv1(input))\nGiven that you are applying the hooks to all modules iteratively (because of the apply), I think we should also walk recursively here, maybe using self.named_modules()?"}