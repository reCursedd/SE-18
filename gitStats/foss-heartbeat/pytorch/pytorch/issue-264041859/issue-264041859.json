{"url": "https://api.github.com/repos/pytorch/pytorch/issues/3043", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/3043/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/3043/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/3043/events", "html_url": "https://github.com/pytorch/pytorch/pull/3043", "id": 264041859, "node_id": "MDExOlB1bGxSZXF1ZXN0MTQ1NTU5Mjk1", "number": 3043, "title": "[WIP] PyTorch Model Summary", "user": {"login": "isaykatsman", "id": 10509755, "node_id": "MDQ6VXNlcjEwNTA5NzU1", "avatar_url": "https://avatars1.githubusercontent.com/u/10509755?v=4", "gravatar_id": "", "url": "https://api.github.com/users/isaykatsman", "html_url": "https://github.com/isaykatsman", "followers_url": "https://api.github.com/users/isaykatsman/followers", "following_url": "https://api.github.com/users/isaykatsman/following{/other_user}", "gists_url": "https://api.github.com/users/isaykatsman/gists{/gist_id}", "starred_url": "https://api.github.com/users/isaykatsman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/isaykatsman/subscriptions", "organizations_url": "https://api.github.com/users/isaykatsman/orgs", "repos_url": "https://api.github.com/users/isaykatsman/repos", "events_url": "https://api.github.com/users/isaykatsman/events{/privacy}", "received_events_url": "https://api.github.com/users/isaykatsman/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 23, "created_at": "2017-10-09T22:14:11Z", "updated_at": "2018-11-23T15:39:44Z", "closed_at": "2018-02-20T15:30:15Z", "author_association": "NONE", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/3043", "html_url": "https://github.com/pytorch/pytorch/pull/3043", "diff_url": "https://github.com/pytorch/pytorch/pull/3043.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/3043.patch"}, "body_html": "<p>This is my first PR, would definitely appreciate feedback. Implements functionality requested in <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"241202996\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/2001\" data-hovercard-type=\"issue\" data-hovercard-url=\"/pytorch/pytorch/issues/2001/hovercard\" href=\"https://github.com/pytorch/pytorch/issues/2001\">#2001</a> .</p>\n<p>The summary call requires an input size argument (with no batch dimension), but otherwise behaves exactly like keras model summary. Example:</p>\n<pre><code>class NNTwoLayer(torch.nn.Module):\n    def __init__(self, D_in, H, D_out):\n        super(NNTwoLayer, self).__init__()\n        self.lin1 = torch.nn.Linear(D_in, H)\n        self.relu1 = torch.nn.ReLU(inplace=True)\n        self.lin2 = torch.nn.Linear(H, D_out)\n\n    def forward(self, x):\n        h_pred = self.lin1(x)\n        h_relu = self.relu1(h_pred)\n        y_pred = self.lin2(h_relu)\n        return y_pred\n\n#construct a model and print summary\nmymodel = NNTwoLayer(1000,100,10)\nmymodel.summary([1000])\n</code></pre>\n<p>Output:<br>\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/dfc09bf223cfd3f306b03d4bd3e42272d38f2e5f/68747470733a2f2f692e696d6775722e636f6d2f495651484963492e706e67\"><img src=\"https://camo.githubusercontent.com/dfc09bf223cfd3f306b03d4bd3e42272d38f2e5f/68747470733a2f2f692e696d6775722e636f6d2f495651484963492e706e67\" alt=\"PyTorch Model Summary\" data-canonical-src=\"https://i.imgur.com/IVQHIcI.png\" style=\"max-width:100%;\"></a></p>", "body_text": "This is my first PR, would definitely appreciate feedback. Implements functionality requested in #2001 .\nThe summary call requires an input size argument (with no batch dimension), but otherwise behaves exactly like keras model summary. Example:\nclass NNTwoLayer(torch.nn.Module):\n    def __init__(self, D_in, H, D_out):\n        super(NNTwoLayer, self).__init__()\n        self.lin1 = torch.nn.Linear(D_in, H)\n        self.relu1 = torch.nn.ReLU(inplace=True)\n        self.lin2 = torch.nn.Linear(H, D_out)\n\n    def forward(self, x):\n        h_pred = self.lin1(x)\n        h_relu = self.relu1(h_pred)\n        y_pred = self.lin2(h_relu)\n        return y_pred\n\n#construct a model and print summary\nmymodel = NNTwoLayer(1000,100,10)\nmymodel.summary([1000])\n\nOutput:", "body": "This is my first PR, would definitely appreciate feedback. Implements functionality requested in #2001 .\r\n\r\nThe summary call requires an input size argument (with no batch dimension), but otherwise behaves exactly like keras model summary. Example:\r\n\r\n```\r\nclass NNTwoLayer(torch.nn.Module):\r\n    def __init__(self, D_in, H, D_out):\r\n        super(NNTwoLayer, self).__init__()\r\n        self.lin1 = torch.nn.Linear(D_in, H)\r\n        self.relu1 = torch.nn.ReLU(inplace=True)\r\n        self.lin2 = torch.nn.Linear(H, D_out)\r\n\r\n    def forward(self, x):\r\n        h_pred = self.lin1(x)\r\n        h_relu = self.relu1(h_pred)\r\n        y_pred = self.lin2(h_relu)\r\n        return y_pred\r\n\r\n#construct a model and print summary\r\nmymodel = NNTwoLayer(1000,100,10)\r\nmymodel.summary([1000])\r\n```\r\n\r\nOutput:\r\n![PyTorch Model Summary](https://i.imgur.com/IVQHIcI.png)"}