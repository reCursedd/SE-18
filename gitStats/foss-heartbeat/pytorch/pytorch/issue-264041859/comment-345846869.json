{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/345846869", "html_url": "https://github.com/pytorch/pytorch/pull/3043#issuecomment-345846869", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/3043", "id": 345846869, "node_id": "MDEyOklzc3VlQ29tbWVudDM0NTg0Njg2OQ==", "user": {"login": "Erotemic", "id": 3186211, "node_id": "MDQ6VXNlcjMxODYyMTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/3186211?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Erotemic", "html_url": "https://github.com/Erotemic", "followers_url": "https://api.github.com/users/Erotemic/followers", "following_url": "https://api.github.com/users/Erotemic/following{/other_user}", "gists_url": "https://api.github.com/users/Erotemic/gists{/gist_id}", "starred_url": "https://api.github.com/users/Erotemic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Erotemic/subscriptions", "organizations_url": "https://api.github.com/users/Erotemic/orgs", "repos_url": "https://api.github.com/users/Erotemic/repos", "events_url": "https://api.github.com/users/Erotemic/events{/privacy}", "received_events_url": "https://api.github.com/users/Erotemic/received_events", "type": "User", "site_admin": false}, "created_at": "2017-11-20T22:04:12Z", "updated_at": "2017-11-20T22:04:12Z", "author_association": "CONTRIBUTOR", "body_html": "<p>To get output shapes for modules it would be nice if there was an <code>output_shape_for(self, input_shape)</code> method similar to the one used by Lasange. Most of this information is already in the docstrings. It would be nice if this could be exposed as a function for the classes it makes sense for.</p>\n<p>This is important for me because I want to compute how many outputs I need to feed into my fully connected layers depending on the input size of images I'm using. I'd rather not have to do a  forward pass to determine this information.</p>\n<p>I have a hacky in-house solution here: <a href=\"https://gist.github.com/Erotemic/1b742413d4b20020ef44bbfc44a45476\">https://gist.github.com/Erotemic/1b742413d4b20020ef44bbfc44a45476</a></p>\n<p>This solution also lets me hack in sympy functions like floor so I can construct a symbolic representation of what the output size will be based on any given input.</p>\n<pre><code>        import sympy as sym\n        shape = input_shape\n\n        input_shape_ = sym.symbols('N, C, W, H', integer=True, positive=True)\n        orig = OutputShapeFor.math\n        OutputShapeFor.math = sym\n        shape = input_shape_\n        # hack OutputShapeFor with sympy to do some symbolic math\n        output_shape = self.output_shape_for(shape)\n        OutputShapeFor.math = orig\n</code></pre>\n<p>While the sympy stuff is probably not necessary here it would be nice for both this PR and other applications to have a <code>output_shape_for(self, input_shape)</code> method. The work would consist of a lot of copy/paste/search/replace because the formulas are already in the docstrings, but there are a lot of classes that the change would need to be applied to.</p>", "body_text": "To get output shapes for modules it would be nice if there was an output_shape_for(self, input_shape) method similar to the one used by Lasange. Most of this information is already in the docstrings. It would be nice if this could be exposed as a function for the classes it makes sense for.\nThis is important for me because I want to compute how many outputs I need to feed into my fully connected layers depending on the input size of images I'm using. I'd rather not have to do a  forward pass to determine this information.\nI have a hacky in-house solution here: https://gist.github.com/Erotemic/1b742413d4b20020ef44bbfc44a45476\nThis solution also lets me hack in sympy functions like floor so I can construct a symbolic representation of what the output size will be based on any given input.\n        import sympy as sym\n        shape = input_shape\n\n        input_shape_ = sym.symbols('N, C, W, H', integer=True, positive=True)\n        orig = OutputShapeFor.math\n        OutputShapeFor.math = sym\n        shape = input_shape_\n        # hack OutputShapeFor with sympy to do some symbolic math\n        output_shape = self.output_shape_for(shape)\n        OutputShapeFor.math = orig\n\nWhile the sympy stuff is probably not necessary here it would be nice for both this PR and other applications to have a output_shape_for(self, input_shape) method. The work would consist of a lot of copy/paste/search/replace because the formulas are already in the docstrings, but there are a lot of classes that the change would need to be applied to.", "body": "To get output shapes for modules it would be nice if there was an `output_shape_for(self, input_shape)` method similar to the one used by Lasange. Most of this information is already in the docstrings. It would be nice if this could be exposed as a function for the classes it makes sense for. \r\n\r\nThis is important for me because I want to compute how many outputs I need to feed into my fully connected layers depending on the input size of images I'm using. I'd rather not have to do a  forward pass to determine this information. \r\n\r\nI have a hacky in-house solution here: https://gist.github.com/Erotemic/1b742413d4b20020ef44bbfc44a45476\r\n\r\nThis solution also lets me hack in sympy functions like floor so I can construct a symbolic representation of what the output size will be based on any given input. \r\n\r\n```\r\n        import sympy as sym\r\n        shape = input_shape\r\n\r\n        input_shape_ = sym.symbols('N, C, W, H', integer=True, positive=True)\r\n        orig = OutputShapeFor.math\r\n        OutputShapeFor.math = sym\r\n        shape = input_shape_\r\n        # hack OutputShapeFor with sympy to do some symbolic math\r\n        output_shape = self.output_shape_for(shape)\r\n        OutputShapeFor.math = orig\r\n```\r\n\r\nWhile the sympy stuff is probably not necessary here it would be nice for both this PR and other applications to have a `output_shape_for(self, input_shape)` method. The work would consist of a lot of copy/paste/search/replace because the formulas are already in the docstrings, but there are a lot of classes that the change would need to be applied to. "}