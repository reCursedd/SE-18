{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/169075726", "pull_request_review_id": 97542535, "id": 169075726, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2OTA3NTcyNg==", "diff_hunk": "@@ -551,6 +551,92 @@ def __repr__(self):\n         tmpstr = tmpstr + ')'\n         return tmpstr\n \n+    def summary(self, input_size):\n+        def register_hook(module):\n+            def hook(module, input, output):\n+                if module._modules:  # only want base layers\n+                    return\n+                class_name = str(module.__class__).split('.')[-1].split(\"'\")[0]\n+                module_idx = len(summary)\n+                m_key = '%s-%i' % (class_name, module_idx + 1)\n+                summary[m_key] = OrderedDict()\n+                summary[m_key]['input_shape'] = list(input[0].size())\n+                summary[m_key]['input_shape'][0] = None\n+                if output.__class__.__name__ == 'tuple':\n+                    summary[m_key]['output_shape'] = list(output[0].size())\n+                else:\n+                    summary[m_key]['output_shape'] = list(output.size())\n+                summary[m_key]['output_shape'][0] = None\n+\n+                params = 0\n+                # iterate through parameters and count num params\n+                for name, p in module._parameters.items():\n+                    params += torch.numel(p.data)\n+                    summary[m_key]['trainable'] = p.requires_grad\n+\n+                summary[m_key]['nb_params'] = params\n+\n+            if not isinstance(module, torch.nn.Sequential) and \\\n+               not isinstance(module, torch.nn.ModuleList) and \\\n+               not (module == self):\n+                hooks.append(module.register_forward_hook(hook))\n+\n+        # check if there are multiple inputs to the network\n+        if isinstance(input_size[0], (list, tuple)):\n+            x = [Variable(torch.rand(1, *in_size)) for in_size in input_size]\n+        else:\n+            x = Variable(torch.randn(1, *input_size))\n+\n+        # create properties\n+        summary = OrderedDict()\n+        hooks = []\n+        # register hook\n+        self.apply(register_hook)\n+        # make a forward pass\n+        self(x)\n+        # remove these hooks\n+        for h in hooks:\n+            h.remove()\n+\n+        # print out neatly\n+        def get_names(module, name, acc):\n+            if not module._modules:\n+                acc.append(name)\n+            else:\n+                for key in module._modules.keys():\n+                    p_name = key if name == \"\" else name + \".\" + key\n+                    get_names(module._modules[key], p_name, acc)\n+        names = []\n+        get_names(self, \"\", names)\n+\n+        col_width = 25  # should be >= 12\n+        summary_width = 61\n+\n+        def crop(s):\n+            return s[:col_width] if len(s) > col_width else s\n+\n+        print('_' * summary_width)\n+        print('{0: <{3}} {1: <{3}} {2: <{3}}'.format(\n+            'Layer (type)', 'Output Shape', 'Param #', col_width))\n+        print('=' * summary_width)\n+        total_params = 0\n+        trainable_params = 0\n+        for (i, l_type), l_name in zip(enumerate(summary), names):\n+            d = summary[l_type]\n+            total_params += d['nb_params']\n+            if 'trainable' in d and d['trainable']:\n+                trainable_params += d['nb_params']\n+            print('{0: <{3}} {1: <{3}} {2: <{3}}'.format(\n+                crop(l_name + ' (' + l_type[:-2] + ')'), crop(str(d['output_shape'])),", "path": "torch/nn/modules/module.py", "position": 80, "original_position": 80, "commit_id": "b7b04c276b0cf406e327d1192f61489b78267488", "original_commit_id": "b7b04c276b0cf406e327d1192f61489b78267488", "user": {"login": "vfdev-5", "id": 2459423, "node_id": "MDQ6VXNlcjI0NTk0MjM=", "avatar_url": "https://avatars0.githubusercontent.com/u/2459423?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vfdev-5", "html_url": "https://github.com/vfdev-5", "followers_url": "https://api.github.com/users/vfdev-5/followers", "following_url": "https://api.github.com/users/vfdev-5/following{/other_user}", "gists_url": "https://api.github.com/users/vfdev-5/gists{/gist_id}", "starred_url": "https://api.github.com/users/vfdev-5/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vfdev-5/subscriptions", "organizations_url": "https://api.github.com/users/vfdev-5/orgs", "repos_url": "https://api.github.com/users/vfdev-5/repos", "events_url": "https://api.github.com/users/vfdev-5/events{/privacy}", "received_events_url": "https://api.github.com/users/vfdev-5/received_events", "type": "User", "site_admin": false}, "body": "Here it's better to replace by `l_type[:l_type.index('-')]`, otherwise `-` appears if index is larger than a single digit. ", "created_at": "2018-02-19T13:30:38Z", "updated_at": "2018-11-23T15:39:44Z", "html_url": "https://github.com/pytorch/pytorch/pull/3043#discussion_r169075726", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/3043", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/169075726"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/3043#discussion_r169075726"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/3043"}}, "body_html": "<p>Here it's better to replace by <code>l_type[:l_type.index('-')]</code>, otherwise <code>-</code> appears if index is larger than a single digit.</p>", "body_text": "Here it's better to replace by l_type[:l_type.index('-')], otherwise - appears if index is larger than a single digit."}