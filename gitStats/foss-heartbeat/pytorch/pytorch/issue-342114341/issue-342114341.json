{"url": "https://api.github.com/repos/pytorch/pytorch/issues/9513", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/9513/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/9513/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/9513/events", "html_url": "https://github.com/pytorch/pytorch/issues/9513", "id": 342114341, "node_id": "MDU6SXNzdWUzNDIxMTQzNDE=", "number": 9513, "title": "[jit] support at::optional", "user": {"login": "SsnL", "id": 5674597, "node_id": "MDQ6VXNlcjU2NzQ1OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5674597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SsnL", "html_url": "https://github.com/SsnL", "followers_url": "https://api.github.com/users/SsnL/followers", "following_url": "https://api.github.com/users/SsnL/following{/other_user}", "gists_url": "https://api.github.com/users/SsnL/gists{/gist_id}", "starred_url": "https://api.github.com/users/SsnL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SsnL/subscriptions", "organizations_url": "https://api.github.com/users/SsnL/orgs", "repos_url": "https://api.github.com/users/SsnL/repos", "events_url": "https://api.github.com/users/SsnL/events{/privacy}", "received_events_url": "https://api.github.com/users/SsnL/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 679953983, "node_id": "MDU6TGFiZWw2Nzk5NTM5ODM=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/jit", "name": "jit", "color": "c5def5", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "wanchaol", "id": 9443650, "node_id": "MDQ6VXNlcjk0NDM2NTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/9443650?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wanchaol", "html_url": "https://github.com/wanchaol", "followers_url": "https://api.github.com/users/wanchaol/followers", "following_url": "https://api.github.com/users/wanchaol/following{/other_user}", "gists_url": "https://api.github.com/users/wanchaol/gists{/gist_id}", "starred_url": "https://api.github.com/users/wanchaol/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wanchaol/subscriptions", "organizations_url": "https://api.github.com/users/wanchaol/orgs", "repos_url": "https://api.github.com/users/wanchaol/repos", "events_url": "https://api.github.com/users/wanchaol/events{/privacy}", "received_events_url": "https://api.github.com/users/wanchaol/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "wanchaol", "id": 9443650, "node_id": "MDQ6VXNlcjk0NDM2NTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/9443650?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wanchaol", "html_url": "https://github.com/wanchaol", "followers_url": "https://api.github.com/users/wanchaol/followers", "following_url": "https://api.github.com/users/wanchaol/following{/other_user}", "gists_url": "https://api.github.com/users/wanchaol/gists{/gist_id}", "starred_url": "https://api.github.com/users/wanchaol/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wanchaol/subscriptions", "organizations_url": "https://api.github.com/users/wanchaol/orgs", "repos_url": "https://api.github.com/users/wanchaol/repos", "events_url": "https://api.github.com/users/wanchaol/events{/privacy}", "received_events_url": "https://api.github.com/users/wanchaol/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 4, "created_at": "2018-07-17T22:39:36Z", "updated_at": "2018-10-25T23:09:48Z", "closed_at": "2018-10-25T23:09:48Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Currently we can't use <code>at::optional</code> in input argument of a native function. I am aware of some on-going work for this which plans to trace <code>None</code> numeric types as <code>nan</code>. IMO, this isn't ideal because:</p>\n<ol>\n<li><code>nan</code> is a perfect valid input, and we can't differentiate python input <code>None</code> from <code>math.nan</code>.</li>\n<li><code>nan</code> doesn't make sense for integral types.</li>\n<li>what about other types like <code>at::optional&lt;std::string&gt;</code>?</li>\n</ol>", "body_text": "Currently we can't use at::optional in input argument of a native function. I am aware of some on-going work for this which plans to trace None numeric types as nan. IMO, this isn't ideal because:\n\nnan is a perfect valid input, and we can't differentiate python input None from math.nan.\nnan doesn't make sense for integral types.\nwhat about other types like at::optional<std::string>?", "body": "Currently we can't use `at::optional` in input argument of a native function. I am aware of some on-going work for this which plans to trace `None` numeric types as `nan`. IMO, this isn't ideal because:\r\n1. `nan` is a perfect valid input, and we can't differentiate python input `None` from `math.nan`.\r\n2. `nan` doesn't make sense for integral types.\r\n3. what about other types like `at::optional<std::string>`?"}