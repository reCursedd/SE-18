{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/173642495", "pull_request_review_id": 102870278, "id": 173642495, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MzY0MjQ5NQ==", "diff_hunk": "@@ -0,0 +1,209 @@\n+\"\"\"Gradient interface\"\"\"\n+\n+import torch\n+from .modules.utils import _pair, _triple\n+\n+\n+def _output_padding(input, output_size, stride, padding, kernel_size):\n+    output_size = list(output_size)\n+    k = input.dim() - 2\n+    print(k)\n+    print(output_size)\n+    if len(output_size) == k + 2:\n+        output_size = output_size[-k:]\n+    if len(output_size) != k:\n+        raise ValueError(\"output_size must have {} or {} elements (got {})\"\n+                         .format(k, k + 2, len(output_size)))\n+\n+    def dim_size(d):\n+        return ((input.size(d + 2) - 1) * stride[d] - 2 * padding[d] +\n+                kernel_size[d])\n+\n+    min_sizes = [dim_size(d) for d in range(k)]\n+    max_sizes = [min_sizes[d] + stride[d] - 1 for d in range(k)]\n+    for size, min_size, max_size in zip(output_size, min_sizes, max_sizes):\n+        if size < min_size or size > max_size:\n+            raise ValueError(\n+                (\"requested an output size of {}, but valid sizes range \"\n+                 \"from {} to {} (for an input of {})\").format(\n+                     output_size, min_sizes, max_sizes,\n+                     input.size()[2:]))\n+\n+    return tuple([output_size[d] - min_sizes[d] for d in range(k)])\n+\n+\n+def conv2d_input(in_channels, out_channels, out_backprop, weight, input_size,\n+                 stride=1, padding=0, dilation=1, groups=1, bias=None):\n+    r\"\"\"\n+    Computes the gradient of conv2d with respect to the input of the convolution.\n+    This is same as the 2D transposed convolution operator under the hood but requires\n+    the shape of the gradient w.r.t. input to be specified explicitly.\n+\n+    Args:\n+        in_channels (int): Number of channels in the input image\n+        out_channels (int): Number of channels in the output gradient\n+        out_backprop : output gradient tensor (minibatch x out_channels x oH x oW)\n+        weight: filters tensor (out_channels x in_channels/groups x kH x kW)\n+        input_size : Shape of the input gradient tensor\n+        stride (int or tuple, optional): Stride of the convolution. Default: 1\n+        padding (int or tuple, optional): Zero-padding added to both sides of the input. Default: 0\n+        dilation (int or tuple, optional): Spacing between kernel elements. Default: 1\n+        groups (int, optional): Number of blocked connections from input channels to output channels. Default: 1\n+        bias: optional bias tensor (out_channels). Default: None\n+\n+    Examples::\n+\n+        >>> out_backprop = autograd.Variable(torch.randn(1,1,3,2))\n+        >>> weight = autograd.Variable(torch.randn(1,1,1,2))\n+        >>> F.grad.conv2d_input(out_backprop, weight, stride=1, input_size=(1,1,3,3))\n+    \"\"\"\n+    stride = _pair(stride)\n+    padding = _pair(padding)\n+    dilation = _pair(dilation)\n+    kernel_size = (weight.shape[2], weight.shape[3])\n+\n+    if input_size is None:\n+        raise ValueError(\"grad.conv2d_input requires specifying an input_size\")\n+\n+    input_gradient_padding = _output_padding(out_backprop, input_size, stride,\n+                                             padding, kernel_size)\n+\n+    return torch._C._VariableFunctions.conv_transpose2d(\n+        out_backprop, weight, bias, stride, padding, input_gradient_padding,\n+        groups, dilation)\n+\n+\n+def conv2d_weight(in_channels, out_channels, input, out_backprop, stride=1,\n+                  padding=0, dilation=1, groups=1, bias=None):\n+    r\"\"\"\n+    Computes the gradient of conv2d with respect to the weight of the convolution.\n+\n+    Args:\n+        in_channels (int): Number of channels in the input image\n+        out_channels (int): Number of channels in the output gradient\n+        input: input tensor of shape (minibatch x in_channels x iH x iW)\n+        out_backprop : output gradient tensor (minibatch x out_channels x oH x oW)\n+        stride (int or tuple, optional): Stride of the convolution. Default: 1\n+        padding (int or tuple, optional): Zero-padding added to both sides of the input. Default: 0\n+        dilation (int or tuple, optional): Spacing between kernel elements. Default: 1\n+        groups (int, optional): Number of blocked connections from input channels to output channels. Default: 1\n+        bias: optional bias tensor (out_channels). Default: None\n+\n+    Examples::\n+\n+        >>> input = torch.autograd.Variable(torch.randn(1,1,3,3))\n+        >>> out_backprop = torch.autograd.Variable(torch.randn(1,1,3,2))\n+        >>> F.grad.conv2d_weight(1,1, input, out_backprop)\n+    \"\"\"\n+    stride = _pair(stride)\n+    padding = _pair(padding)\n+    dilation = _pair(dilation)\n+    dims = out_backprop.shape\n+    min_batch = input.shape[0]\n+\n+    out_backprop_ = out_backprop.repeat(1, in_channels // groups, 1, 1)", "path": "torch/nn/gradients.py", "position": null, "original_position": 104, "commit_id": "e19881ef0ac35bb42a3da4205702f45296eee9f3", "original_commit_id": "46f080042946a920acb6254b4a227374e176d6ef", "user": {"login": "vedanuj", "id": 13946458, "node_id": "MDQ6VXNlcjEzOTQ2NDU4", "avatar_url": "https://avatars2.githubusercontent.com/u/13946458?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vedanuj", "html_url": "https://github.com/vedanuj", "followers_url": "https://api.github.com/users/vedanuj/followers", "following_url": "https://api.github.com/users/vedanuj/following{/other_user}", "gists_url": "https://api.github.com/users/vedanuj/gists{/gist_id}", "starred_url": "https://api.github.com/users/vedanuj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vedanuj/subscriptions", "organizations_url": "https://api.github.com/users/vedanuj/orgs", "repos_url": "https://api.github.com/users/vedanuj/repos", "events_url": "https://api.github.com/users/vedanuj/events{/privacy}", "received_events_url": "https://api.github.com/users/vedanuj/received_events", "type": "User", "site_admin": false}, "body": "For calculating the gradient with respect to weight, the `out_backprop` is the weight for the `conv2d` and the weight gradient is the output.  The `out_backprop` is expanded and reshaped so that the forward convolution results in the (weight gradient) having the same shape as the `weight`. The `out_backprop` is expanded by the number of input channels divided by the number of groups (`in_channels // groups`). Then the `input` is reshaped so that it has channels and batches merged and the `conv2d` forward pass with groups = `in_channels * min_batch`. \r\n\r\nThe result is reshaped with dimension 0 as the number of batches and the tensor is summed along that dimension. After that, the result(`grad_w`) is reshaped and narrowed to fit the `weight_size`.", "created_at": "2018-03-11T03:57:34Z", "updated_at": "2018-11-23T15:40:34Z", "html_url": "https://github.com/pytorch/pytorch/pull/5408#discussion_r173642495", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/5408", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/173642495"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/5408#discussion_r173642495"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/5408"}}, "body_html": "<p>For calculating the gradient with respect to weight, the <code>out_backprop</code> is the weight for the <code>conv2d</code> and the weight gradient is the output.  The <code>out_backprop</code> is expanded and reshaped so that the forward convolution results in the (weight gradient) having the same shape as the <code>weight</code>. The <code>out_backprop</code> is expanded by the number of input channels divided by the number of groups (<code>in_channels // groups</code>). Then the <code>input</code> is reshaped so that it has channels and batches merged and the <code>conv2d</code> forward pass with groups = <code>in_channels * min_batch</code>.</p>\n<p>The result is reshaped with dimension 0 as the number of batches and the tensor is summed along that dimension. After that, the result(<code>grad_w</code>) is reshaped and narrowed to fit the <code>weight_size</code>.</p>", "body_text": "For calculating the gradient with respect to weight, the out_backprop is the weight for the conv2d and the weight gradient is the output.  The out_backprop is expanded and reshaped so that the forward convolution results in the (weight gradient) having the same shape as the weight. The out_backprop is expanded by the number of input channels divided by the number of groups (in_channels // groups). Then the input is reshaped so that it has channels and batches merged and the conv2d forward pass with groups = in_channels * min_batch.\nThe result is reshaped with dimension 0 as the number of batches and the tensor is summed along that dimension. After that, the result(grad_w) is reshaped and narrowed to fit the weight_size.", "in_reply_to_id": 172641125}