{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/172639239", "pull_request_review_id": 101691342, "id": 172639239, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MjYzOTIzOQ==", "diff_hunk": "@@ -0,0 +1,209 @@\n+\"\"\"Gradient interface\"\"\"\n+\n+import torch\n+from .modules.utils import _pair, _triple\n+\n+\n+def _output_padding(input, output_size, stride, padding, kernel_size):\n+    output_size = list(output_size)\n+    k = input.dim() - 2\n+    print(k)\n+    print(output_size)\n+    if len(output_size) == k + 2:\n+        output_size = output_size[-k:]\n+    if len(output_size) != k:\n+        raise ValueError(\"output_size must have {} or {} elements (got {})\"\n+                         .format(k, k + 2, len(output_size)))\n+\n+    def dim_size(d):\n+        return ((input.size(d + 2) - 1) * stride[d] - 2 * padding[d] +\n+                kernel_size[d])\n+\n+    min_sizes = [dim_size(d) for d in range(k)]\n+    max_sizes = [min_sizes[d] + stride[d] - 1 for d in range(k)]\n+    for size, min_size, max_size in zip(output_size, min_sizes, max_sizes):\n+        if size < min_size or size > max_size:\n+            raise ValueError(\n+                (\"requested an output size of {}, but valid sizes range \"\n+                 \"from {} to {} (for an input of {})\").format(\n+                     output_size, min_sizes, max_sizes,\n+                     input.size()[2:]))\n+\n+    return tuple([output_size[d] - min_sizes[d] for d in range(k)])\n+\n+\n+def conv2d_input(in_channels, out_channels, out_backprop, weight, input_size,\n+                 stride=1, padding=0, dilation=1, groups=1, bias=None):\n+    r\"\"\"\n+    Computes the gradient of conv2d with respect to the input of the convolution.\n+    This is same as the 2D transposed convolution operator under the hood but requires\n+    the shape of the gradient w.r.t. input to be specified explicitly.\n+\n+    Args:\n+        in_channels (int): Number of channels in the input image\n+        out_channels (int): Number of channels in the output gradient\n+        out_backprop : output gradient tensor (minibatch x out_channels x oH x oW)\n+        weight: filters tensor (out_channels x in_channels/groups x kH x kW)\n+        input_size : Shape of the input gradient tensor\n+        stride (int or tuple, optional): Stride of the convolution. Default: 1\n+        padding (int or tuple, optional): Zero-padding added to both sides of the input. Default: 0\n+        dilation (int or tuple, optional): Spacing between kernel elements. Default: 1\n+        groups (int, optional): Number of blocked connections from input channels to output channels. Default: 1\n+        bias: optional bias tensor (out_channels). Default: None\n+\n+    Examples::\n+\n+        >>> out_backprop = autograd.Variable(torch.randn(1,1,3,2))\n+        >>> weight = autograd.Variable(torch.randn(1,1,1,2))\n+        >>> F.grad.conv2d_input(out_backprop, weight, stride=1, input_size=(1,1,3,3))", "path": "torch/nn/gradients.py", "position": null, "original_position": 58, "commit_id": "e19881ef0ac35bb42a3da4205702f45296eee9f3", "original_commit_id": "46f080042946a920acb6254b4a227374e176d6ef", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "A helpful thing to show is how `F.grad.conv2d_input` is related to a sequence of calls to `F.conv2d` and then `torch.autograd.grad()`. These would be good tests as well (which we need to have on the PR.)", "created_at": "2018-03-06T19:51:56Z", "updated_at": "2018-11-23T15:40:25Z", "html_url": "https://github.com/pytorch/pytorch/pull/5408#discussion_r172639239", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/5408", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/172639239"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/5408#discussion_r172639239"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/5408"}}, "body_html": "<p>A helpful thing to show is how <code>F.grad.conv2d_input</code> is related to a sequence of calls to <code>F.conv2d</code> and then <code>torch.autograd.grad()</code>. These would be good tests as well (which we need to have on the PR.)</p>", "body_text": "A helpful thing to show is how F.grad.conv2d_input is related to a sequence of calls to F.conv2d and then torch.autograd.grad(). These would be good tests as well (which we need to have on the PR.)"}