{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/170818328", "pull_request_review_id": 99561628, "id": 170818328, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MDgxODMyOA==", "diff_hunk": "@@ -636,6 +636,102 @@ def forward(self, input, output_size=None):\n             output_padding, self.groups, self.dilation)\n \n \n+class Conv2dBackward(_ConvTransposeMixin, _ConvNd):", "path": "torch/nn/modules/conv.py", "position": null, "original_position": 4, "commit_id": "e19881ef0ac35bb42a3da4205702f45296eee9f3", "original_commit_id": "c909be9e2bfc44f4d8dd924c2c1e3ee263ad9024", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "So, the real utility of exposing backwards convolution is not the backwards on input (which is pretty simple) but the backwards on weight, which is also itself a convolution but with dilation and stride swapped. Yes, the user can do the math themselves, but why not just make their life easier.\r\n\r\nAs for the slippery slope argument, I think the answer is the same as all the other ops; we add them if people ask for them, and don't if they don't. A functional interface to autograd sounds like an awfully convoluted way to do this. When we have the symbolic differentiator things are probably less bad.\r\n\r\n@vedanuj We're probably going to need all of the other variants, but maybe we should first convince @apaszke this is a good idea :)", "created_at": "2018-02-27T05:24:30Z", "updated_at": "2018-11-23T15:40:02Z", "html_url": "https://github.com/pytorch/pytorch/pull/5408#discussion_r170818328", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/5408", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/170818328"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/5408#discussion_r170818328"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/5408"}}, "body_html": "<p>So, the real utility of exposing backwards convolution is not the backwards on input (which is pretty simple) but the backwards on weight, which is also itself a convolution but with dilation and stride swapped. Yes, the user can do the math themselves, but why not just make their life easier.</p>\n<p>As for the slippery slope argument, I think the answer is the same as all the other ops; we add them if people ask for them, and don't if they don't. A functional interface to autograd sounds like an awfully convoluted way to do this. When we have the symbolic differentiator things are probably less bad.</p>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=13946458\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/vedanuj\">@vedanuj</a> We're probably going to need all of the other variants, but maybe we should first convince <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=4583066\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/apaszke\">@apaszke</a> this is a good idea :)</p>", "body_text": "So, the real utility of exposing backwards convolution is not the backwards on input (which is pretty simple) but the backwards on weight, which is also itself a convolution but with dilation and stride swapped. Yes, the user can do the math themselves, but why not just make their life easier.\nAs for the slippery slope argument, I think the answer is the same as all the other ops; we add them if people ask for them, and don't if they don't. A functional interface to autograd sounds like an awfully convoluted way to do this. When we have the symbolic differentiator things are probably less bad.\n@vedanuj We're probably going to need all of the other variants, but maybe we should first convince @apaszke this is a good idea :)", "in_reply_to_id": 170552145}