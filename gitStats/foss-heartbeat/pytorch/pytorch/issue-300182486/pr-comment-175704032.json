{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/175704032", "pull_request_review_id": 102996326, "id": 175704032, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTcwNDAzMg==", "diff_hunk": "@@ -0,0 +1,317 @@\n+\"\"\"Gradient interface\"\"\"\n+\n+import torch\n+from .modules.utils import _single, _pair, _triple\n+\n+\n+def input_grad_padding(out_backprop, input_size, stride, padding, kernel_size):\n+    input_size = list(input_size)\n+    k = out_backprop.dim() - 2\n+\n+    if len(input_size) == k + 2:\n+        input_size = input_size[-k:]\n+    if len(input_size) != k:\n+        raise ValueError(\"input_size must have {} elements (got {})\"\n+                         .format(k + 2, len(input_size)))\n+\n+    def dim_size(d):\n+        return ((out_backprop.size(d + 2) - 1) * stride[d] - 2 * padding[d] +\n+                kernel_size[d])\n+\n+    min_sizes = [dim_size(d) for d in range(k)]\n+    max_sizes = [min_sizes[d] + stride[d] - 1 for d in range(k)]\n+    for size, min_size, max_size in zip(input_size, min_sizes, max_sizes):\n+        if size < min_size or size > max_size:\n+            raise ValueError(\n+                (\"requested an input grad size of {}, but valid sizes range \"\n+                 \"from {} to {} (for an out_backprop of {})\").format(\n+                     input_size, min_sizes, max_sizes,\n+                     out_backprop.size()[2:]))\n+\n+    return tuple(input_size[d] - min_sizes[d] for d in range(k))\n+\n+\n+def conv1d_input(input_size, weight, out_backprop, stride=1, padding=0, dilation=1, groups=1, bias=None):\n+    r\"\"\"\n+    Computes the gradient of conv1d with respect to the input of the convolution.\n+    This is same as the 1D transposed convolution operator under the hood but requires\n+    the shape of the gradient w.r.t. input to be specified explicitly.\n+\n+    Args:\n+        input_size : Shape of the input gradient tensor\n+        weight: weight tensor (out_channels x in_channels/groups x kW)\n+        out_backprop : output gradient tensor (minibatch x out_channels x oW)\n+        stride (int or tuple, optional): Stride of the convolution. Default: 1\n+        padding (int or tuple, optional): Zero-padding added to both sides of the input. Default: 0\n+        dilation (int or tuple, optional): Spacing between kernel elements. Default: 1\n+        groups (int, optional): Number of blocked connections from input channels to output channels. Default: 1\n+        bias: optional bias tensor (out_channels). Default: None\n+\n+    Examples::\n+\n+        >>> input = torch.autograd.Variable(torch.randn(1,1,3), requires_grad=True)\n+        >>> weight = torch.autograd.Variable(torch.randn(1,1,1), requires_grad=True)\n+        >>> output = F.conv1d(input, weight)\n+        >>> gradient_o = torch.autograd.Variable(torch.randn(output.shape))\n+        >>> gradient_i = torch.autograd.grad(output, input, gradient_o)\n+        >>> F.grad.conv1d_input(input.shape, weight, gradient_o)\n+\n+    \"\"\"\n+    stride = _single(stride)\n+    padding = _single(padding)\n+    dilation = _single(dilation)\n+    kernel_size = [weight.shape[2]]\n+\n+    if input_size is None:\n+        raise ValueError(\"grad.conv1d_input requires specifying an input_size\")\n+\n+    grad_i_padding = input_grad_padding(out_backprop, input_size, stride,\n+                                        padding, kernel_size)\n+\n+    return torch._C._VariableFunctions.conv_transpose1d(\n+        out_backprop, weight, bias, stride, padding, grad_i_padding, groups,\n+        dilation)\n+\n+\n+def conv1d_weight(input, weight_size, out_backprop, stride=1, padding=0, dilation=1, groups=1, bias=None):\n+    r\"\"\"\n+    Computes the gradient of conv1d with respect to the weight of the convolution.\n+\n+    Args:\n+        input: input tensor of shape (minibatch x in_channels x iW)\n+        weight_size : Shape of the weight gradient tensor\n+        out_backprop : output gradient tensor (minibatch x out_channels x oW)\n+        stride (int or tuple, optional): Stride of the convolution. Default: 1\n+        padding (int or tuple, optional): Zero-padding added to both sides of the input. Default: 0\n+        dilation (int or tuple, optional): Spacing between kernel elements. Default: 1\n+        groups (int, optional): Number of blocked connections from input channels to output channels. Default: 1\n+        bias: optional bias tensor (out_channels). Default: None\n+\n+    Examples::\n+\n+        >>> input = torch.autograd.Variable(torch.randn(1,1,3), requires_grad=True)\n+        >>> weight = torch.autograd.Variable(torch.randn(1,1,1), requires_grad=True)\n+        >>> output = F.conv1d(input, weight)\n+        >>> gradient_o = torch.autograd.Variable(torch.randn(output.shape))\n+        >>> gradient_w = torch.autograd.grad(output, filter, gradient_o)\n+        >>> F.grad.conv1d_weight(input, weight.shape, gradient_o)\n+\n+    \"\"\"\n+    stride = _single(stride)\n+    padding = _single(padding)\n+    dilation = _single(dilation)\n+    in_channels = input.shape[1]\n+    out_channels = out_backprop.shape[1]\n+    min_batch = input.shape[0]\n+\n+    out_backprop_ = out_backprop.contiguous().repeat(1, in_channels // groups,\n+                                                     1)\n+    out_backprop_ = out_backprop_.contiguous().view(\n+        out_backprop_.shape[0] * out_backprop_.shape[1], 1,\n+        out_backprop_.shape[2])\n+\n+    input = input.contiguous().view(1, input.shape[0] * input.shape[1],\n+                                    input.shape[2])\n+\n+    grad_w = torch._C._VariableFunctions.conv1d(input, out_backprop_, bias,\n+                                                dilation, padding, stride,\n+                                                in_channels * min_batch)\n+\n+    grad_w = grad_w.contiguous().view(min_batch, grad_w.shape[1] // min_batch,\n+                                      grad_w.shape[2])\n+\n+    return grad_w.sum(dim=0).view(in_channels // groups, out_channels,\n+                                  grad_w.shape[2]).transpose(0, 1).narrow(\n+                                      2, 0, weight_size[2])\n+\n+\n+def conv2d_input(input_size, weight, out_backprop, stride=1, padding=0, dilation=1, groups=1, bias=None):\n+    r\"\"\"\n+    Computes the gradient of conv2d with respect to the input of the convolution.\n+    This is same as the 2D transposed convolution operator under the hood but requires\n+    the shape of the gradient w.r.t. input to be specified explicitly.\n+\n+    Args:\n+        input_size : Shape of the input gradient tensor\n+        weight: weight tensor (out_channels x in_channels/groups x kH x kW)\n+        out_backprop : output gradient tensor (minibatch x out_channels x oH x oW)\n+        stride (int or tuple, optional): Stride of the convolution. Default: 1\n+        padding (int or tuple, optional): Zero-padding added to both sides of the input. Default: 0\n+        dilation (int or tuple, optional): Spacing between kernel elements. Default: 1\n+        groups (int, optional): Number of blocked connections from input channels to output channels. Default: 1\n+        bias: optional bias tensor (out_channels). Default: None\n+\n+    Examples::\n+\n+        >>> input = torch.autograd.Variable(torch.randn(1,1,3,3), requires_grad=True)\n+        >>> weight = torch.autograd.Variable(torch.randn(1,1,1,2), requires_grad=True)\n+        >>> output = F.conv2d(input, weight)\n+        >>> gradient_o = torch.autograd.Variable(torch.randn(output.shape))\n+        >>> gradient_i = torch.autograd.grad(output, input, gradient_o)\n+        >>> F.grad.conv2d_input(input.shape, weight, gradient_o)\n+\n+    \"\"\"\n+    stride = _pair(stride)\n+    padding = _pair(padding)\n+    dilation = _pair(dilation)\n+    kernel_size = (weight.shape[2], weight.shape[3])\n+\n+    if input_size is None:\n+        raise ValueError(\"grad.conv2d_input requires specifying an input_size\")\n+\n+    grad_i_padding = input_grad_padding(out_backprop, input_size, stride,\n+                                        padding, kernel_size)\n+\n+    return torch._C._VariableFunctions.conv_transpose2d(\n+        out_backprop, weight, bias, stride, padding, grad_i_padding, groups,\n+        dilation)\n+\n+\n+def conv2d_weight(input, weight_size, out_backprop, stride=1, padding=0, dilation=1, groups=1, bias=None):\n+    r\"\"\"\n+    Computes the gradient of conv2d with respect to the weight of the convolution.\n+\n+    Args:\n+        input: input tensor of shape (minibatch x in_channels x iH x iW)\n+        weight_size : Shape of the weight gradient tensor\n+        out_backprop : output gradient tensor (minibatch x out_channels x oH x oW)\n+        stride (int or tuple, optional): Stride of the convolution. Default: 1\n+        padding (int or tuple, optional): Zero-padding added to both sides of the input. Default: 0\n+        dilation (int or tuple, optional): Spacing between kernel elements. Default: 1\n+        groups (int, optional): Number of blocked connections from input channels to output channels. Default: 1\n+        bias: optional bias tensor (out_channels). Default: None\n+\n+    Examples::\n+\n+        >>> input = torch.autograd.Variable(torch.randn(1,1,3,3), requires_grad=True)\n+        >>> weight = torch.autograd.Variable(torch.randn(1,1,1,2), requires_grad=True)\n+        >>> output = F.conv2d(input, weight)\n+        >>> gradient_o = torch.autograd.Variable(torch.randn(output.shape))\n+        >>> gradient_w = torch.autograd.grad(output, filter, gradient_o)\n+        >>> F.grad.conv2d_weight(input, weight.shape, gradient_o)\n+\n+    \"\"\"\n+    stride = _pair(stride)\n+    padding = _pair(padding)\n+    dilation = _pair(dilation)\n+    in_channels = input.shape[1]\n+    out_channels = out_backprop.shape[1]\n+    min_batch = input.shape[0]\n+\n+    out_backprop_ = out_backprop.contiguous().repeat(1, in_channels // groups,\n+                                                     1, 1)\n+    out_backprop_ = out_backprop_.contiguous().view(\n+        out_backprop_.shape[0] * out_backprop_.shape[1], 1,\n+        out_backprop_.shape[2], out_backprop_.shape[3])\n+\n+    input = input.contiguous().view(1, input.shape[0] * input.shape[1],\n+                                    input.shape[2], input.shape[3])\n+\n+    grad_w = torch._C._VariableFunctions.conv2d(input, out_backprop_, bias,\n+                                                dilation, padding, stride,\n+                                                in_channels * min_batch)\n+\n+    grad_w = grad_w.contiguous().view(min_batch, grad_w.shape[1] // min_batch,\n+                                      grad_w.shape[2], grad_w.shape[3])\n+\n+    return grad_w.sum(dim=0).view(in_channels // groups, out_channels,\n+                                  grad_w.shape[2], grad_w.shape[3]).transpose(\n+                                      0, 1).narrow(2, 0,\n+                                                   weight_size[2]).narrow(\n+                                                       3, 0, weight_size[3])\n+\n+\n+def conv3d_input(input_size, weight, out_backprop, stride=1, padding=0, dilation=1, groups=1, bias=None):\n+    r\"\"\"\n+    Computes the gradient of conv3d with respect to the input of the convolution.\n+    This is same as the 3D transposed convolution operator under the hood but requires\n+    the shape of the gradient w.r.t. input to be specified explicitly.\n+\n+    Args:\n+        input_size : Shape of the input gradient tensor\n+        weight: weights tensor (out_channels x in_channels/groups x kT x kH x kW)\n+        out_backprop : output gradient tensor (minibatch x out_channels x oT x oH x oW)\n+        stride (int or tuple, optional): Stride of the convolution. Default: 1\n+        padding (int or tuple, optional): Zero-padding added to both sides of the input. Default: 0\n+        dilation (int or tuple, optional): Spacing between kernel elements. Default: 1\n+        groups (int, optional): Number of blocked connections from input channels to output channels. Default: 1\n+        bias: optional bias tensor (out_channels). Default: None\n+\n+    Examples::\n+\n+        >>> input = torch.autograd.Variable(torch.randn(2, 8, 10, 10, 20), requires_grad=True)\n+        >>> weight = torch.autograd.Variable(torch.randn(4, 8, 2, 3, 3), requires_grad=True)\n+        >>> output = F.conv3d(input, weight)\n+        >>> gradient_o = torch.autograd.Variable(torch.randn(output.shape))\n+        >>> gradient_i = torch.autograd.grad(output, input, gradient_o)\n+        >>> F.grad.conv3d_input(input.shape, weight, gradient_o)\n+\n+    \"\"\"\n+    stride = _triple(stride)\n+    padding = _triple(padding)\n+    dilation = _triple(dilation)\n+    kernel_size = (weight.shape[2], weight.shape[3], weight.shape[4])\n+\n+    if input_size is None:\n+        raise ValueError(\"grad.conv3d_input requires specifying an input_size\")\n+\n+    grad_i_padding = input_grad_padding(out_backprop, input_size, stride,\n+                                        padding, kernel_size)\n+\n+    return torch._C._VariableFunctions.conv_transpose3d(\n+        out_backprop, weight, bias, stride, padding, grad_i_padding, groups,\n+        dilation)\n+\n+\n+def conv3d_weight(input, weight_size, out_backprop, stride=1, padding=0, dilation=1, groups=1, bias=None):\n+    r\"\"\"\n+    Computes the gradient of conv3d with respect to the weight of the convolution.\n+\n+    Args:\n+        input: input tensor of shape (minibatch x in_channels x iT x iH x iW)\n+        weight_size : Shape of the weight gradient tensor\n+        out_backprop : output gradient tensor (minibatch x out_channels x oT x oH x oW)", "path": "torch/nn/gradients.py", "position": null, "original_position": 273, "commit_id": "e19881ef0ac35bb42a3da4205702f45296eee9f3", "original_commit_id": "23a6b3aadb7eea8704440a028252dfe4d28e95f1", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Please call this `grad_output`. That's the convention we have everywhere else", "created_at": "2018-03-20T09:45:04Z", "updated_at": "2018-11-23T15:40:58Z", "html_url": "https://github.com/pytorch/pytorch/pull/5408#discussion_r175704032", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/5408", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/175704032"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/5408#discussion_r175704032"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/5408"}}, "body_html": "<p>Please call this <code>grad_output</code>. That's the convention we have everywhere else</p>", "body_text": "Please call this grad_output. That's the convention we have everywhere else"}