{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/369065212", "html_url": "https://github.com/pytorch/pytorch/pull/5408#issuecomment-369065212", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/5408", "id": 369065212, "node_id": "MDEyOklzc3VlQ29tbWVudDM2OTA2NTIxMg==", "user": {"login": "soumith", "id": 1310570, "node_id": "MDQ6VXNlcjEzMTA1NzA=", "avatar_url": "https://avatars0.githubusercontent.com/u/1310570?v=4", "gravatar_id": "", "url": "https://api.github.com/users/soumith", "html_url": "https://github.com/soumith", "followers_url": "https://api.github.com/users/soumith/followers", "following_url": "https://api.github.com/users/soumith/following{/other_user}", "gists_url": "https://api.github.com/users/soumith/gists{/gist_id}", "starred_url": "https://api.github.com/users/soumith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/soumith/subscriptions", "organizations_url": "https://api.github.com/users/soumith/orgs", "repos_url": "https://api.github.com/users/soumith/repos", "events_url": "https://api.github.com/users/soumith/events{/privacy}", "received_events_url": "https://api.github.com/users/soumith/received_events", "type": "User", "site_admin": false}, "created_at": "2018-02-27T23:30:31Z", "updated_at": "2018-02-27T23:30:31Z", "author_association": "MEMBER", "body_html": "<p>So, the reservation from Adam is valid, but not in the way he expressed it.<br>\nWhat we want is to not increase the API surface to accommodate each of these \"backward\" calls.<br>\nImagine having:</p>\n<pre><code>F.conv2d\nF.conv2d_backward_input\nF.conv2d_backward_weight\nF.conv2d_backward_bias\n</code></pre>\n<p>I think the right design would be a separate lookup table that branches one step further. For example:</p>\n<pre><code>F.grad.conv2d_input\nF.grad.conv2d_weight\nF.grad.conv2d_bias\n</code></pre>\n<p>This way, all this extra API is encapsulated in the <code>grad</code> tree.</p>", "body_text": "So, the reservation from Adam is valid, but not in the way he expressed it.\nWhat we want is to not increase the API surface to accommodate each of these \"backward\" calls.\nImagine having:\nF.conv2d\nF.conv2d_backward_input\nF.conv2d_backward_weight\nF.conv2d_backward_bias\n\nI think the right design would be a separate lookup table that branches one step further. For example:\nF.grad.conv2d_input\nF.grad.conv2d_weight\nF.grad.conv2d_bias\n\nThis way, all this extra API is encapsulated in the grad tree.", "body": "So, the reservation from Adam is valid, but not in the way he expressed it.\r\nWhat we want is to not increase the API surface to accommodate each of these \"backward\" calls.\r\nImagine having:\r\n\r\n```\r\nF.conv2d\r\nF.conv2d_backward_input\r\nF.conv2d_backward_weight\r\nF.conv2d_backward_bias\r\n```\r\n\r\nI think the right design would be a separate lookup table that branches one step further. For example:\r\n\r\n```\r\nF.grad.conv2d_input\r\nF.grad.conv2d_weight\r\nF.grad.conv2d_bias\r\n```\r\n\r\nThis way, all this extra API is encapsulated in the `grad` tree."}