{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/176641523", "pull_request_review_id": 106381194, "id": 176641523, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NjY0MTUyMw==", "diff_hunk": "@@ -0,0 +1,317 @@\n+\"\"\"Gradient interface\"\"\"\n+\n+import torch\n+from .modules.utils import _single, _pair, _triple\n+\n+\n+def input_grad_padding(out_backprop, input_size, stride, padding, kernel_size):\n+    input_size = list(input_size)\n+    k = out_backprop.dim() - 2\n+\n+    if len(input_size) == k + 2:\n+        input_size = input_size[-k:]\n+    if len(input_size) != k:\n+        raise ValueError(\"input_size must have {} elements (got {})\"\n+                         .format(k + 2, len(input_size)))\n+\n+    def dim_size(d):\n+        return ((out_backprop.size(d + 2) - 1) * stride[d] - 2 * padding[d] +\n+                kernel_size[d])\n+\n+    min_sizes = [dim_size(d) for d in range(k)]\n+    max_sizes = [min_sizes[d] + stride[d] - 1 for d in range(k)]\n+    for size, min_size, max_size in zip(input_size, min_sizes, max_sizes):\n+        if size < min_size or size > max_size:\n+            raise ValueError(\n+                (\"requested an input grad size of {}, but valid sizes range \"\n+                 \"from {} to {} (for an out_backprop of {})\").format(\n+                     input_size, min_sizes, max_sizes,\n+                     out_backprop.size()[2:]))\n+\n+    return tuple(input_size[d] - min_sizes[d] for d in range(k))\n+\n+\n+def conv1d_input(input_size, weight, out_backprop, stride=1, padding=0, dilation=1, groups=1, bias=None):\n+    r\"\"\"\n+    Computes the gradient of conv1d with respect to the input of the convolution.\n+    This is same as the 1D transposed convolution operator under the hood but requires\n+    the shape of the gradient w.r.t. input to be specified explicitly.\n+\n+    Args:\n+        input_size : Shape of the input gradient tensor", "path": "torch/nn/gradients.py", "position": null, "original_position": 41, "commit_id": "e19881ef0ac35bb42a3da4205702f45296eee9f3", "original_commit_id": "23a6b3aadb7eea8704440a028252dfe4d28e95f1", "user": {"login": "vedanuj", "id": 13946458, "node_id": "MDQ6VXNlcjEzOTQ2NDU4", "avatar_url": "https://avatars2.githubusercontent.com/u/13946458?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vedanuj", "html_url": "https://github.com/vedanuj", "followers_url": "https://api.github.com/users/vedanuj/followers", "following_url": "https://api.github.com/users/vedanuj/following{/other_user}", "gists_url": "https://api.github.com/users/vedanuj/gists{/gist_id}", "starred_url": "https://api.github.com/users/vedanuj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vedanuj/subscriptions", "organizations_url": "https://api.github.com/users/vedanuj/orgs", "repos_url": "https://api.github.com/users/vedanuj/repos", "events_url": "https://api.github.com/users/vedanuj/events{/privacy}", "received_events_url": "https://api.github.com/users/vedanuj/received_events", "type": "User", "site_admin": false}, "body": "Yes we can do that. We can calculate the batch and channels of input from weight and output shape. ", "created_at": "2018-03-23T05:23:24Z", "updated_at": "2018-11-23T15:41:02Z", "html_url": "https://github.com/pytorch/pytorch/pull/5408#discussion_r176641523", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/5408", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/176641523"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/5408#discussion_r176641523"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/5408"}}, "body_html": "<p>Yes we can do that. We can calculate the batch and channels of input from weight and output shape.</p>", "body_text": "Yes we can do that. We can calculate the batch and channels of input from weight and output shape.", "in_reply_to_id": 175703842}