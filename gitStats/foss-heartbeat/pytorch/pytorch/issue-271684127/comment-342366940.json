{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/342366940", "html_url": "https://github.com/pytorch/pytorch/pull/3524#issuecomment-342366940", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/3524", "id": 342366940, "node_id": "MDEyOklzc3VlQ29tbWVudDM0MjM2Njk0MA==", "user": {"login": "colesbury", "id": 655866, "node_id": "MDQ6VXNlcjY1NTg2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/655866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colesbury", "html_url": "https://github.com/colesbury", "followers_url": "https://api.github.com/users/colesbury/followers", "following_url": "https://api.github.com/users/colesbury/following{/other_user}", "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions", "organizations_url": "https://api.github.com/users/colesbury/orgs", "repos_url": "https://api.github.com/users/colesbury/repos", "events_url": "https://api.github.com/users/colesbury/events{/privacy}", "received_events_url": "https://api.github.com/users/colesbury/received_events", "type": "User", "site_admin": false}, "created_at": "2017-11-07T03:44:22Z", "updated_at": "2017-11-07T03:44:22Z", "author_association": "MEMBER", "body_html": "<p>Yes, the additional flag is needed. newContiguous always increments the reference count, but may return the same pointer as its argument. The pointer equality test you suggest, which exists in the current code, doesn\u2019t handle this case.</p>", "body_text": "Yes, the additional flag is needed. newContiguous always increments the reference count, but may return the same pointer as its argument. The pointer equality test you suggest, which exists in the current code, doesn\u2019t handle this case.", "body": "Yes, the additional flag is needed. newContiguous always increments the reference count, but may return the same pointer as its argument. The pointer equality test you suggest, which exists in the current code, doesn\u2019t handle this case."}