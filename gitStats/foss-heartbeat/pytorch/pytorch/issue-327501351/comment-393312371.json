{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/393312371", "html_url": "https://github.com/pytorch/pytorch/pull/7935#issuecomment-393312371", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/7935", "id": 393312371, "node_id": "MDEyOklzc3VlQ29tbWVudDM5MzMxMjM3MQ==", "user": {"login": "soumith", "id": 1310570, "node_id": "MDQ6VXNlcjEzMTA1NzA=", "avatar_url": "https://avatars0.githubusercontent.com/u/1310570?v=4", "gravatar_id": "", "url": "https://api.github.com/users/soumith", "html_url": "https://github.com/soumith", "followers_url": "https://api.github.com/users/soumith/followers", "following_url": "https://api.github.com/users/soumith/following{/other_user}", "gists_url": "https://api.github.com/users/soumith/gists{/gist_id}", "starred_url": "https://api.github.com/users/soumith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/soumith/subscriptions", "organizations_url": "https://api.github.com/users/soumith/orgs", "repos_url": "https://api.github.com/users/soumith/repos", "events_url": "https://api.github.com/users/soumith/events{/privacy}", "received_events_url": "https://api.github.com/users/soumith/received_events", "type": "User", "site_admin": false}, "created_at": "2018-05-30T20:43:01Z", "updated_at": "2018-05-30T20:43:01Z", "author_association": "MEMBER", "body_html": "<pre><code>15:26:25 =================================== FAILURES ===================================\n15:26:25 __________________________ TestOperators.test_flatten __________________________\n15:26:25 [gw0] linux2 -- Python 2.7.12 /usr/bin/python2\n15:26:25 \n15:26:25 self = &lt;test_operators.TestOperators testMethod=test_flatten&gt;\n15:26:25 \n15:26:25     def test_flatten(self):\n15:26:25         # Flatten is a special case of Reshape when the output is a 2-D tensor.\n15:26:25         x = Variable(torch.randn(1, 2, 3, 4), requires_grad=True)\n15:26:25 &gt;       self.assertONNX(lambda x: x.view(x.size()[0], x.numel() // x.size()[0]), x)\n15:26:25 \n15:26:25 /var/lib/jenkins/workspace/test/onnx/test_operators.py:347: \n15:26:25 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n15:26:25 /var/lib/jenkins/workspace/test/onnx/test_operators.py:63: in assertONNX\n15:26:25     onnx_model_pb = export_to_string(m, args, **kwargs)\n15:26:25 /var/lib/jenkins/workspace/test/onnx/test_operators.py:34: in export_to_string\n15:26:25     torch.onnx.export(model, inputs, f, *args, **kwargs)\n15:26:25 /var/lib/jenkins/.local/lib/python2.7/site-packages/torch/onnx/__init__.py:30: in export\n15:26:25     return utils.export(*args, **kwargs)\n15:26:25 /var/lib/jenkins/.local/lib/python2.7/site-packages/torch/onnx/utils.py:87: in export\n15:26:25     aten, export_raw_ir=export_raw_ir)\n15:26:25 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n15:26:25 \n15:26:25 model = FuncModule(\n15:26:25   (params): ParameterList()\n15:26:25 )\n15:26:25 args = tensor([[[[-0.1117, -0.4966,  0.1631, -0.8817],\n15:26:25           [ 0.0539,  0.6684, -...  1.4778, -0.1696, -0.9919],\n15:26:25           [-1.4569,  0.2563, -0.4030,  0.4195]]]])\n15:26:25 f = &lt;_io.BytesIO object at 0x7faebefff650&gt;, export_params = True\n15:26:25 verbose = False, training = False, input_names = None, output_names = None\n15:26:25 aten = False, export_raw_ir = False, export_type = 1, example_outputs = None\n15:26:25 propagate = False\n15:26:25 \n15:26:25     def _export(model, args, f, export_params=True, verbose=False, training=False,\n15:26:25                 input_names=None, output_names=None, aten=False, export_raw_ir=False,\n15:26:25                 export_type=ExportTypes.PROTOBUF_FILE, example_outputs=None, propagate=False):\n15:26:25         graph, params, torch_out = _model_to_graph(model, args, f, verbose,\n15:26:25                                                    training, input_names,\n15:26:25                                                    output_names, aten, export_raw_ir,\n15:26:25                                                    example_outputs, propagate)\n15:26:25     \n15:26:25         # TODO: Don't allocate a in-memory string for the protobuf\n15:26:25         from torch.onnx.symbolic import _onnx_opset_version\n15:26:25         defer_weight_export = export_type is not ExportTypes.PROTOBUF_FILE\n15:26:25         if export_params:\n15:26:25 &gt;           proto, export_map = graph.export(params, _onnx_opset_version, defer_weight_export, export_raw_ir)\n15:26:25 E           RuntimeError: ONNX export failed: Couldn't export operator aten::_cast_Double\n</code></pre>", "body_text": "15:26:25 =================================== FAILURES ===================================\n15:26:25 __________________________ TestOperators.test_flatten __________________________\n15:26:25 [gw0] linux2 -- Python 2.7.12 /usr/bin/python2\n15:26:25 \n15:26:25 self = <test_operators.TestOperators testMethod=test_flatten>\n15:26:25 \n15:26:25     def test_flatten(self):\n15:26:25         # Flatten is a special case of Reshape when the output is a 2-D tensor.\n15:26:25         x = Variable(torch.randn(1, 2, 3, 4), requires_grad=True)\n15:26:25 >       self.assertONNX(lambda x: x.view(x.size()[0], x.numel() // x.size()[0]), x)\n15:26:25 \n15:26:25 /var/lib/jenkins/workspace/test/onnx/test_operators.py:347: \n15:26:25 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n15:26:25 /var/lib/jenkins/workspace/test/onnx/test_operators.py:63: in assertONNX\n15:26:25     onnx_model_pb = export_to_string(m, args, **kwargs)\n15:26:25 /var/lib/jenkins/workspace/test/onnx/test_operators.py:34: in export_to_string\n15:26:25     torch.onnx.export(model, inputs, f, *args, **kwargs)\n15:26:25 /var/lib/jenkins/.local/lib/python2.7/site-packages/torch/onnx/__init__.py:30: in export\n15:26:25     return utils.export(*args, **kwargs)\n15:26:25 /var/lib/jenkins/.local/lib/python2.7/site-packages/torch/onnx/utils.py:87: in export\n15:26:25     aten, export_raw_ir=export_raw_ir)\n15:26:25 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n15:26:25 \n15:26:25 model = FuncModule(\n15:26:25   (params): ParameterList()\n15:26:25 )\n15:26:25 args = tensor([[[[-0.1117, -0.4966,  0.1631, -0.8817],\n15:26:25           [ 0.0539,  0.6684, -...  1.4778, -0.1696, -0.9919],\n15:26:25           [-1.4569,  0.2563, -0.4030,  0.4195]]]])\n15:26:25 f = <_io.BytesIO object at 0x7faebefff650>, export_params = True\n15:26:25 verbose = False, training = False, input_names = None, output_names = None\n15:26:25 aten = False, export_raw_ir = False, export_type = 1, example_outputs = None\n15:26:25 propagate = False\n15:26:25 \n15:26:25     def _export(model, args, f, export_params=True, verbose=False, training=False,\n15:26:25                 input_names=None, output_names=None, aten=False, export_raw_ir=False,\n15:26:25                 export_type=ExportTypes.PROTOBUF_FILE, example_outputs=None, propagate=False):\n15:26:25         graph, params, torch_out = _model_to_graph(model, args, f, verbose,\n15:26:25                                                    training, input_names,\n15:26:25                                                    output_names, aten, export_raw_ir,\n15:26:25                                                    example_outputs, propagate)\n15:26:25     \n15:26:25         # TODO: Don't allocate a in-memory string for the protobuf\n15:26:25         from torch.onnx.symbolic import _onnx_opset_version\n15:26:25         defer_weight_export = export_type is not ExportTypes.PROTOBUF_FILE\n15:26:25         if export_params:\n15:26:25 >           proto, export_map = graph.export(params, _onnx_opset_version, defer_weight_export, export_raw_ir)\n15:26:25 E           RuntimeError: ONNX export failed: Couldn't export operator aten::_cast_Double", "body": "```\r\n15:26:25 =================================== FAILURES ===================================\r\n15:26:25 __________________________ TestOperators.test_flatten __________________________\r\n15:26:25 [gw0] linux2 -- Python 2.7.12 /usr/bin/python2\r\n15:26:25 \r\n15:26:25 self = <test_operators.TestOperators testMethod=test_flatten>\r\n15:26:25 \r\n15:26:25     def test_flatten(self):\r\n15:26:25         # Flatten is a special case of Reshape when the output is a 2-D tensor.\r\n15:26:25         x = Variable(torch.randn(1, 2, 3, 4), requires_grad=True)\r\n15:26:25 >       self.assertONNX(lambda x: x.view(x.size()[0], x.numel() // x.size()[0]), x)\r\n15:26:25 \r\n15:26:25 /var/lib/jenkins/workspace/test/onnx/test_operators.py:347: \r\n15:26:25 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n15:26:25 /var/lib/jenkins/workspace/test/onnx/test_operators.py:63: in assertONNX\r\n15:26:25     onnx_model_pb = export_to_string(m, args, **kwargs)\r\n15:26:25 /var/lib/jenkins/workspace/test/onnx/test_operators.py:34: in export_to_string\r\n15:26:25     torch.onnx.export(model, inputs, f, *args, **kwargs)\r\n15:26:25 /var/lib/jenkins/.local/lib/python2.7/site-packages/torch/onnx/__init__.py:30: in export\r\n15:26:25     return utils.export(*args, **kwargs)\r\n15:26:25 /var/lib/jenkins/.local/lib/python2.7/site-packages/torch/onnx/utils.py:87: in export\r\n15:26:25     aten, export_raw_ir=export_raw_ir)\r\n15:26:25 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n15:26:25 \r\n15:26:25 model = FuncModule(\r\n15:26:25   (params): ParameterList()\r\n15:26:25 )\r\n15:26:25 args = tensor([[[[-0.1117, -0.4966,  0.1631, -0.8817],\r\n15:26:25           [ 0.0539,  0.6684, -...  1.4778, -0.1696, -0.9919],\r\n15:26:25           [-1.4569,  0.2563, -0.4030,  0.4195]]]])\r\n15:26:25 f = <_io.BytesIO object at 0x7faebefff650>, export_params = True\r\n15:26:25 verbose = False, training = False, input_names = None, output_names = None\r\n15:26:25 aten = False, export_raw_ir = False, export_type = 1, example_outputs = None\r\n15:26:25 propagate = False\r\n15:26:25 \r\n15:26:25     def _export(model, args, f, export_params=True, verbose=False, training=False,\r\n15:26:25                 input_names=None, output_names=None, aten=False, export_raw_ir=False,\r\n15:26:25                 export_type=ExportTypes.PROTOBUF_FILE, example_outputs=None, propagate=False):\r\n15:26:25         graph, params, torch_out = _model_to_graph(model, args, f, verbose,\r\n15:26:25                                                    training, input_names,\r\n15:26:25                                                    output_names, aten, export_raw_ir,\r\n15:26:25                                                    example_outputs, propagate)\r\n15:26:25     \r\n15:26:25         # TODO: Don't allocate a in-memory string for the protobuf\r\n15:26:25         from torch.onnx.symbolic import _onnx_opset_version\r\n15:26:25         defer_weight_export = export_type is not ExportTypes.PROTOBUF_FILE\r\n15:26:25         if export_params:\r\n15:26:25 >           proto, export_map = graph.export(params, _onnx_opset_version, defer_weight_export, export_raw_ir)\r\n15:26:25 E           RuntimeError: ONNX export failed: Couldn't export operator aten::_cast_Double\r\n```"}