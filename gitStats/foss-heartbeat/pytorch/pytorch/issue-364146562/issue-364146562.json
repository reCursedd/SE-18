{"url": "https://api.github.com/repos/pytorch/pytorch/issues/12106", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/12106/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/12106/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/12106/events", "html_url": "https://github.com/pytorch/pytorch/issues/12106", "id": 364146562, "node_id": "MDU6SXNzdWUzNjQxNDY1NjI=", "number": 12106, "title": "Autograd Engine clears callbacks at each invocation, breaking reentrant backwards callbacks", "user": {"login": "mruberry", "id": 38511765, "node_id": "MDQ6VXNlcjM4NTExNzY1", "avatar_url": "https://avatars3.githubusercontent.com/u/38511765?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mruberry", "html_url": "https://github.com/mruberry", "followers_url": "https://api.github.com/users/mruberry/followers", "following_url": "https://api.github.com/users/mruberry/following{/other_user}", "gists_url": "https://api.github.com/users/mruberry/gists{/gist_id}", "starred_url": "https://api.github.com/users/mruberry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mruberry/subscriptions", "organizations_url": "https://api.github.com/users/mruberry/orgs", "repos_url": "https://api.github.com/users/mruberry/repos", "events_url": "https://api.github.com/users/mruberry/events{/privacy}", "received_events_url": "https://api.github.com/users/mruberry/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-09-26T18:03:46Z", "updated_at": "2018-09-26T18:05:11Z", "closed_at": null, "author_association": "CONTRIBUTOR", "body_html": "<p>In PR <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"331398278\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/8354\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/pytorch/pytorch/pull/8354/hovercard\" href=\"https://github.com/pytorch/pytorch/pull/8354\">#8354</a> we noted that the autograd engine always clears its final callbacks on execute():</p>\n<pre><code>auto Engine::execute(const edge_list&amp; roots,\n                     const variable_list&amp; inputs,\n                     bool keep_graph,\n                     bool create_graph,\n                     const edge_list&amp; outputs) -&gt; variable_list {\n  std::call_once(start_threads_flag, &amp;Engine::start_threads, this);\n\n  // NOLINTNEXTLINE(cppcoreguidelines-pro-type-const-cast)\n  validate_outputs(roots, const_cast&lt;variable_list&amp;&gt;(inputs), [](const std::string&amp; msg) {\n    return msg;\n  });\n\n  // Callbacks are only valid for the duration of this run and should always be cleared\n  ClearCallbacks _cb_guard(final_callbacks, post_callbacks_lock);\n</code></pre>\n<p>Which suggests that if execute() is called twice during a run of backward() then callbacks already enqueued from the first or outermost run will be destroyed. This is clearly unexpected.</p>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=4583066\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/apaszke\">@apaszke</a> and I think we could address this by associating final callbacks with backwards graphs and calling them as each graph finishes. We may also want to throw an error if a final callback is created outside of a backward graph it can be associated with.</p>\n<p>Edit: code formatting.</p>", "body_text": "In PR #8354 we noted that the autograd engine always clears its final callbacks on execute():\nauto Engine::execute(const edge_list& roots,\n                     const variable_list& inputs,\n                     bool keep_graph,\n                     bool create_graph,\n                     const edge_list& outputs) -> variable_list {\n  std::call_once(start_threads_flag, &Engine::start_threads, this);\n\n  // NOLINTNEXTLINE(cppcoreguidelines-pro-type-const-cast)\n  validate_outputs(roots, const_cast<variable_list&>(inputs), [](const std::string& msg) {\n    return msg;\n  });\n\n  // Callbacks are only valid for the duration of this run and should always be cleared\n  ClearCallbacks _cb_guard(final_callbacks, post_callbacks_lock);\n\nWhich suggests that if execute() is called twice during a run of backward() then callbacks already enqueued from the first or outermost run will be destroyed. This is clearly unexpected.\n@apaszke and I think we could address this by associating final callbacks with backwards graphs and calling them as each graph finishes. We may also want to throw an error if a final callback is created outside of a backward graph it can be associated with.\nEdit: code formatting.", "body": "In PR #8354 we noted that the autograd engine always clears its final callbacks on execute():\r\n\r\n```\r\nauto Engine::execute(const edge_list& roots,\r\n                     const variable_list& inputs,\r\n                     bool keep_graph,\r\n                     bool create_graph,\r\n                     const edge_list& outputs) -> variable_list {\r\n  std::call_once(start_threads_flag, &Engine::start_threads, this);\r\n\r\n  // NOLINTNEXTLINE(cppcoreguidelines-pro-type-const-cast)\r\n  validate_outputs(roots, const_cast<variable_list&>(inputs), [](const std::string& msg) {\r\n    return msg;\r\n  });\r\n\r\n  // Callbacks are only valid for the duration of this run and should always be cleared\r\n  ClearCallbacks _cb_guard(final_callbacks, post_callbacks_lock);\r\n```\r\n\r\nWhich suggests that if execute() is called twice during a run of backward() then callbacks already enqueued from the first or outermost run will be destroyed. This is clearly unexpected.\r\n\r\n@apaszke and I think we could address this by associating final callbacks with backwards graphs and calling them as each graph finishes. We may also want to throw an error if a final callback is created outside of a backward graph it can be associated with.\r\n\r\nEdit: code formatting. "}