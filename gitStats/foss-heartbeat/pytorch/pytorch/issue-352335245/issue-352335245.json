{"url": "https://api.github.com/repos/pytorch/pytorch/issues/10712", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/10712/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/10712/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/10712/events", "html_url": "https://github.com/pytorch/pytorch/issues/10712", "id": 352335245, "node_id": "MDU6SXNzdWUzNTIzMzUyNDU=", "number": 10712, "title": "Softmax / Categorical sampled logit=-float('inf') that has prob=0", "user": {"login": "Kelym", "id": 4526957, "node_id": "MDQ6VXNlcjQ1MjY5NTc=", "avatar_url": "https://avatars0.githubusercontent.com/u/4526957?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kelym", "html_url": "https://github.com/Kelym", "followers_url": "https://api.github.com/users/Kelym/followers", "following_url": "https://api.github.com/users/Kelym/following{/other_user}", "gists_url": "https://api.github.com/users/Kelym/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kelym/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kelym/subscriptions", "organizations_url": "https://api.github.com/users/Kelym/orgs", "repos_url": "https://api.github.com/users/Kelym/repos", "events_url": "https://api.github.com/users/Kelym/events{/privacy}", "received_events_url": "https://api.github.com/users/Kelym/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-08-20T23:49:19Z", "updated_at": "2018-08-21T00:05:52Z", "closed_at": "2018-08-21T00:05:52Z", "author_association": "NONE", "body_html": "<h2>Issue description</h2>\n<p><strong>TL;DR</strong> setting logit[i]=-float('inf') does not prevent torch.nn.functional.softmax from sampling that bit.</p>\n<p>I am training a seq2seq agent which will output <code>logit</code> then I'd use softmax and categorical to sample from it. Sometimes I will mask out a specific logit by setting <code>logit[x,y]=-float('inf')</code>. I assumed that this action will make <code>m</code> never sampling an <code>a</code> such that <code>a[x]=y</code>. However I observed that this is not the case (happened once after 2 hours of training).</p>\n<h2>Code example</h2>\n<pre><code>probs = F.softmax(logit,dim=1)\nm = D.Categorical(probs)\na = m.sample()\n</code></pre>\n<p>Printing out the value:</p>\n<pre><code>logit[i] = tensor([ 3.1237, -0.6266, -3.3107, -4.1575,    -inf,  0.8783], \n       device='cuda:0', grad_fn=&lt;SelectBackward&gt;)\nm.probs[i] = tensor([0.8836, 0.0208, 0.0014, 0.0006, 0.0000, 0.0936], \n       device='cuda:0', grad_fn=&lt;SelectBackward&gt;)\na_t[i]=4\nm.log_prob(a_t)[i] = -15.9424\n</code></pre>\n<h2>System Info</h2>\n<pre><code>Collecting environment information...\nPyTorch version: 0.4.1\nIs debug build: No\nCUDA used to build PyTorch: 9.0.176\n\nOS: Ubuntu 16.04.4 LTS\nGCC version: (Ubuntu 5.4.0-6ubuntu1~16.04.10) 5.4.0 20160609\nCMake version: version 3.5.1\n\nPython version: 3.6\nIs CUDA available: Yes\nCUDA runtime version: Could not collect\nGPU models and configuration:\nGPU 0: GeForce GTX 1080 Ti\nGPU 1: GeForce GTX 1060 6GB\n\nNvidia driver version: 396.26\ncuDNN version: Probably one of the following:\n/usr/lib/x86_64-linux-gnu/libcudnn.so.7.0.5\n/usr/lib/x86_64-linux-gnu/libcudnn_static_v7.a\n\nVersions of relevant libraries:\n[pip3] numpy (1.14.0)\n[pip3] numpydoc (0.7.0)\n[conda] cuda90                    1.0                  h6433d27_0    pytorch\n[conda] pytorch                   0.4.1           py36_cuda9.0.176_cudnn7.1.2_1    soumith\n[conda] torchvision               0.1.9            py36h7584368_1    soumith\n</code></pre>", "body_text": "Issue description\nTL;DR setting logit[i]=-float('inf') does not prevent torch.nn.functional.softmax from sampling that bit.\nI am training a seq2seq agent which will output logit then I'd use softmax and categorical to sample from it. Sometimes I will mask out a specific logit by setting logit[x,y]=-float('inf'). I assumed that this action will make m never sampling an a such that a[x]=y. However I observed that this is not the case (happened once after 2 hours of training).\nCode example\nprobs = F.softmax(logit,dim=1)\nm = D.Categorical(probs)\na = m.sample()\n\nPrinting out the value:\nlogit[i] = tensor([ 3.1237, -0.6266, -3.3107, -4.1575,    -inf,  0.8783], \n       device='cuda:0', grad_fn=<SelectBackward>)\nm.probs[i] = tensor([0.8836, 0.0208, 0.0014, 0.0006, 0.0000, 0.0936], \n       device='cuda:0', grad_fn=<SelectBackward>)\na_t[i]=4\nm.log_prob(a_t)[i] = -15.9424\n\nSystem Info\nCollecting environment information...\nPyTorch version: 0.4.1\nIs debug build: No\nCUDA used to build PyTorch: 9.0.176\n\nOS: Ubuntu 16.04.4 LTS\nGCC version: (Ubuntu 5.4.0-6ubuntu1~16.04.10) 5.4.0 20160609\nCMake version: version 3.5.1\n\nPython version: 3.6\nIs CUDA available: Yes\nCUDA runtime version: Could not collect\nGPU models and configuration:\nGPU 0: GeForce GTX 1080 Ti\nGPU 1: GeForce GTX 1060 6GB\n\nNvidia driver version: 396.26\ncuDNN version: Probably one of the following:\n/usr/lib/x86_64-linux-gnu/libcudnn.so.7.0.5\n/usr/lib/x86_64-linux-gnu/libcudnn_static_v7.a\n\nVersions of relevant libraries:\n[pip3] numpy (1.14.0)\n[pip3] numpydoc (0.7.0)\n[conda] cuda90                    1.0                  h6433d27_0    pytorch\n[conda] pytorch                   0.4.1           py36_cuda9.0.176_cudnn7.1.2_1    soumith\n[conda] torchvision               0.1.9            py36h7584368_1    soumith", "body": "## Issue description\r\n\r\n**TL;DR** setting logit[i]=-float('inf') does not prevent torch.nn.functional.softmax from sampling that bit. \r\n\r\n \r\nI am training a seq2seq agent which will output `logit` then I'd use softmax and categorical to sample from it. Sometimes I will mask out a specific logit by setting `logit[x,y]=-float('inf')`. I assumed that this action will make `m` never sampling an `a` such that `a[x]=y`. However I observed that this is not the case (happened once after 2 hours of training).\r\n\r\n## Code example\r\n\r\n```\r\nprobs = F.softmax(logit,dim=1)\r\nm = D.Categorical(probs)\r\na = m.sample()\r\n```\r\n \r\nPrinting out the value: \r\n```\r\nlogit[i] = tensor([ 3.1237, -0.6266, -3.3107, -4.1575,    -inf,  0.8783], \r\n       device='cuda:0', grad_fn=<SelectBackward>)\r\nm.probs[i] = tensor([0.8836, 0.0208, 0.0014, 0.0006, 0.0000, 0.0936], \r\n       device='cuda:0', grad_fn=<SelectBackward>)\r\na_t[i]=4\r\nm.log_prob(a_t)[i] = -15.9424\r\n```\r\n\r\n## System Info\r\n\r\n```\r\nCollecting environment information...\r\nPyTorch version: 0.4.1\r\nIs debug build: No\r\nCUDA used to build PyTorch: 9.0.176\r\n\r\nOS: Ubuntu 16.04.4 LTS\r\nGCC version: (Ubuntu 5.4.0-6ubuntu1~16.04.10) 5.4.0 20160609\r\nCMake version: version 3.5.1\r\n\r\nPython version: 3.6\r\nIs CUDA available: Yes\r\nCUDA runtime version: Could not collect\r\nGPU models and configuration:\r\nGPU 0: GeForce GTX 1080 Ti\r\nGPU 1: GeForce GTX 1060 6GB\r\n\r\nNvidia driver version: 396.26\r\ncuDNN version: Probably one of the following:\r\n/usr/lib/x86_64-linux-gnu/libcudnn.so.7.0.5\r\n/usr/lib/x86_64-linux-gnu/libcudnn_static_v7.a\r\n\r\nVersions of relevant libraries:\r\n[pip3] numpy (1.14.0)\r\n[pip3] numpydoc (0.7.0)\r\n[conda] cuda90                    1.0                  h6433d27_0    pytorch\r\n[conda] pytorch                   0.4.1           py36_cuda9.0.176_cudnn7.1.2_1    soumith\r\n[conda] torchvision               0.1.9            py36h7584368_1    soumith\r\n```"}