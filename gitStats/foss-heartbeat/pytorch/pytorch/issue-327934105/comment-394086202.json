{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/394086202", "html_url": "https://github.com/pytorch/pytorch/pull/7973#issuecomment-394086202", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/7973", "id": 394086202, "node_id": "MDEyOklzc3VlQ29tbWVudDM5NDA4NjIwMg==", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "created_at": "2018-06-02T13:04:01Z", "updated_at": "2018-06-02T13:04:01Z", "author_association": "MEMBER", "body_html": "<p>If someone's code was generally structured similarly to our ImageNet example (meaning the DP is used depending on command line args and system configuration), which I think is a good recommendation, then this patch would actually encourage a more complicated approach than just adding an <code>.unsqueeze(0)</code> at the end of the module. This is because now someone needs to add an <code>if</code> after this module returns the output, to make sure they handle the vector case specially. I really think that tensor shape is best thought of as part of the tensor type, and having a single variable take different shapes in different runs makes it much harder to reason about the user program.</p>\n<p>Additionally, I think this will cause the same problem even if someone <em>always uses DP</em>. If they run it on a system with 2 GPUs, DP will take the multi-GPU path, call <code>gather</code>, and return a vector. If they run it with 1 GPU visible, DP will take the sequential path, completely ignore <code>gather</code> because it's unnecessary, and return a scalar.</p>", "body_text": "If someone's code was generally structured similarly to our ImageNet example (meaning the DP is used depending on command line args and system configuration), which I think is a good recommendation, then this patch would actually encourage a more complicated approach than just adding an .unsqueeze(0) at the end of the module. This is because now someone needs to add an if after this module returns the output, to make sure they handle the vector case specially. I really think that tensor shape is best thought of as part of the tensor type, and having a single variable take different shapes in different runs makes it much harder to reason about the user program.\nAdditionally, I think this will cause the same problem even if someone always uses DP. If they run it on a system with 2 GPUs, DP will take the multi-GPU path, call gather, and return a vector. If they run it with 1 GPU visible, DP will take the sequential path, completely ignore gather because it's unnecessary, and return a scalar.", "body": "If someone's code was generally structured similarly to our ImageNet example (meaning the DP is used depending on command line args and system configuration), which I think is a good recommendation, then this patch would actually encourage a more complicated approach than just adding an `.unsqueeze(0)` at the end of the module. This is because now someone needs to add an `if` after this module returns the output, to make sure they handle the vector case specially. I really think that tensor shape is best thought of as part of the tensor type, and having a single variable take different shapes in different runs makes it much harder to reason about the user program.\r\n\r\nAdditionally, I think this will cause the same problem even if someone *always uses DP*. If they run it on a system with 2 GPUs, DP will take the multi-GPU path, call `gather`, and return a vector. If they run it with 1 GPU visible, DP will take the sequential path, completely ignore `gather` because it's unnecessary, and return a scalar."}