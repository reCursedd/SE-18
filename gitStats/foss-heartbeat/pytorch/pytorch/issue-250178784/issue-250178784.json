{"url": "https://api.github.com/repos/pytorch/pytorch/issues/2416", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/2416/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/2416/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/2416/events", "html_url": "https://github.com/pytorch/pytorch/issues/2416", "id": 250178784, "node_id": "MDU6SXNzdWUyNTAxNzg3ODQ=", "number": 2416, "title": "Sparse Tensors Odd Behavior v0.2", "user": {"login": "ch3njust1n", "id": 3211697, "node_id": "MDQ6VXNlcjMyMTE2OTc=", "avatar_url": "https://avatars0.githubusercontent.com/u/3211697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ch3njust1n", "html_url": "https://github.com/ch3njust1n", "followers_url": "https://api.github.com/users/ch3njust1n/followers", "following_url": "https://api.github.com/users/ch3njust1n/following{/other_user}", "gists_url": "https://api.github.com/users/ch3njust1n/gists{/gist_id}", "starred_url": "https://api.github.com/users/ch3njust1n/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ch3njust1n/subscriptions", "organizations_url": "https://api.github.com/users/ch3njust1n/orgs", "repos_url": "https://api.github.com/users/ch3njust1n/repos", "events_url": "https://api.github.com/users/ch3njust1n/events{/privacy}", "received_events_url": "https://api.github.com/users/ch3njust1n/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-08-14T23:08:07Z", "updated_at": "2017-08-15T17:36:31Z", "closed_at": "2017-08-15T17:36:31Z", "author_association": "NONE", "body_html": "<p>The indices don't align with the values. In the example given on the website, by this logic, seems like it's indexing the columns first and that the indices are in reverse order to their values. Seems like <code>[0, 1]</code> corresponds to 4 and <code>[2, 0]</code> corresponds to 3.</p>\n<pre><code>i = torch.LongTensor([[0, 1], [2, 0]])\nv = torch.FloatTensor([3, 4])\ntorch.sparse.FloatTensor(i, v, torch.Size([2,3])).to_dense()\n 0  0  3\n 4  0  0\n[torch.FloatTensor of size 2x3]\n</code></pre>\n<p>If I change the indices to <code>[0, 1]</code> and <code>[0, 1]</code>, I get</p>\n<pre><code>i = torch.LongTensor([[0, 1], [0,1]])\nv = torch.FloatTensor([3, 4])\ntorch.sparse.FloatTensor(i, v, torch.Size([2,3])).to_dense()\n\n 3  0  0\n 0  4  0\n[torch.FloatTensor of size 2x3]\n</code></pre>\n<p>....this seems like unexpected behavior.<br>\nAlso if I try - should be intuitive - putting a value in position <code>[1,  1]</code></p>\n<pre><code>i = torch.LongTensor([[0, 1], [2, 0], [1,1]])\nv = torch.FloatTensor([3, 4, 5])\ntorch.sparse.FloatTensor(i, v, torch.Size([2,3])).to_dense()\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nRuntimeError: invalid argument 2: number of dimensions must be nDimI + nDimV at /pytorch/torch/lib/THS/generic/THSTensor.c:169\n</code></pre>\n<p>Help please?</p>", "body_text": "The indices don't align with the values. In the example given on the website, by this logic, seems like it's indexing the columns first and that the indices are in reverse order to their values. Seems like [0, 1] corresponds to 4 and [2, 0] corresponds to 3.\ni = torch.LongTensor([[0, 1], [2, 0]])\nv = torch.FloatTensor([3, 4])\ntorch.sparse.FloatTensor(i, v, torch.Size([2,3])).to_dense()\n 0  0  3\n 4  0  0\n[torch.FloatTensor of size 2x3]\n\nIf I change the indices to [0, 1] and [0, 1], I get\ni = torch.LongTensor([[0, 1], [0,1]])\nv = torch.FloatTensor([3, 4])\ntorch.sparse.FloatTensor(i, v, torch.Size([2,3])).to_dense()\n\n 3  0  0\n 0  4  0\n[torch.FloatTensor of size 2x3]\n\n....this seems like unexpected behavior.\nAlso if I try - should be intuitive - putting a value in position [1,  1]\ni = torch.LongTensor([[0, 1], [2, 0], [1,1]])\nv = torch.FloatTensor([3, 4, 5])\ntorch.sparse.FloatTensor(i, v, torch.Size([2,3])).to_dense()\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nRuntimeError: invalid argument 2: number of dimensions must be nDimI + nDimV at /pytorch/torch/lib/THS/generic/THSTensor.c:169\n\nHelp please?", "body": "The indices don't align with the values. In the example given on the website, by this logic, seems like it's indexing the columns first and that the indices are in reverse order to their values. Seems like `[0, 1]` corresponds to 4 and `[2, 0]` corresponds to 3.\r\n\r\n    i = torch.LongTensor([[0, 1], [2, 0]])\r\n    v = torch.FloatTensor([3, 4])\r\n    torch.sparse.FloatTensor(i, v, torch.Size([2,3])).to_dense()\r\n     0  0  3\r\n     4  0  0\r\n    [torch.FloatTensor of size 2x3]\r\n\r\nIf I change the indices to `[0, 1]` and `[0, 1]`, I get\r\n\r\n    i = torch.LongTensor([[0, 1], [0,1]])\r\n    v = torch.FloatTensor([3, 4])\r\n    torch.sparse.FloatTensor(i, v, torch.Size([2,3])).to_dense()\r\n\r\n     3  0  0\r\n     0  4  0\r\n    [torch.FloatTensor of size 2x3]\r\n....this seems like unexpected behavior. \r\nAlso if I try - should be intuitive - putting a value in position `[1,  1]`\r\n\r\n    i = torch.LongTensor([[0, 1], [2, 0], [1,1]])\r\n    v = torch.FloatTensor([3, 4, 5])\r\n    torch.sparse.FloatTensor(i, v, torch.Size([2,3])).to_dense()\r\n    Traceback (most recent call last):\r\n      File \"<stdin>\", line 1, in <module>\r\n    RuntimeError: invalid argument 2: number of dimensions must be nDimI + nDimV at /pytorch/torch/lib/THS/generic/THSTensor.c:169\r\n\r\nHelp please?"}