{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/149737272", "pull_request_review_id": 75176023, "id": 149737272, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0OTczNzI3Mg==", "diff_hunk": "@@ -535,9 +543,18 @@ def emit_derivative(derivative):\n             else:\n                 grad_inputs = ', '.join(['grad_inputs[{}]'.format(i) for i in idxs])\n                 masks = ['should_compute_output({}),'.format(i) for i in idxs]\n+                # A backwards function conventionally takes an\n+                # output_mask as an argument.  This means that for the\n+                # double backwards, we need two masks: the output_mask\n+                # that was passed to backwards, and the grad_mask\n+                # specifying which grad-grads we should compute.", "path": "tools/autograd/gen_variable_type.py", "position": null, "original_position": 67, "commit_id": "2ea1f85192643dff812788018aa30e3d48ac7591", "original_commit_id": "28c4cde87be38c40781feb5d722381fb5b64639f", "user": {"login": "colesbury", "id": 655866, "node_id": "MDQ6VXNlcjY1NTg2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/655866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colesbury", "html_url": "https://github.com/colesbury", "followers_url": "https://api.github.com/users/colesbury/followers", "following_url": "https://api.github.com/users/colesbury/following{/other_user}", "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions", "organizations_url": "https://api.github.com/users/colesbury/orgs", "repos_url": "https://api.github.com/users/colesbury/repos", "events_url": "https://api.github.com/users/colesbury/events{/privacy}", "received_events_url": "https://api.github.com/users/colesbury/received_events", "type": "User", "site_admin": false}, "body": "It should just take a single `output_mask`. `output_mask` is just an optimization that allows the function avoid computing some outputs. It doesn't affect the derivative.", "created_at": "2017-11-08T17:19:27Z", "updated_at": "2018-11-23T15:36:12Z", "html_url": "https://github.com/pytorch/pytorch/pull/3562#discussion_r149737272", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/3562", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/149737272"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/3562#discussion_r149737272"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/3562"}}, "body_html": "<p>It should just take a single <code>output_mask</code>. <code>output_mask</code> is just an optimization that allows the function avoid computing some outputs. It doesn't affect the derivative.</p>", "body_text": "It should just take a single output_mask. output_mask is just an optimization that allows the function avoid computing some outputs. It doesn't affect the derivative."}