{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/150021552", "pull_request_review_id": 75509277, "id": 150021552, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MDAyMTU1Mg==", "diff_hunk": "@@ -5,11 +5,52 @@\n #include \"ATen/ExpandUtils.h\"\n #include <vector>\n \n+/**\n+ * ATen native functions are ways to write ATen methods which make only\n+ * make use of other ATen operations (e.g., it is not necessary to\n+ * bind into TH/THC code or drop into CUDA kernels.)  These functions\n+ * are written as both functions as well as cwrap fragments, which are\n+ * then folded into the ATen code generation process; define a function\n+ * here, and it will show up as a method on at::Tensor.\n+ *\n+ * At the moment, only type_method_definition_level: base is supported.\n+ */\n+\n namespace at {\n namespace native {\n \n /*\n [NativeFunction]\n+name: type_as\n+arg: Tensor self\n+arg: Tensor other\n+return: Tensor\n+variants: method, function\n+type_method_definition_level: base\n+type_method_definition_dispatch: at::native::type_as\n+[/NativeFunction]\n+*/\n+static inline Tensor type_as(const Tensor &self, const Tensor &other) {\n+  return self.toType(other.type());;\n+}\n+\n+/*\n+[NativeFunction]\n+name: expand_as\n+arg: Tensor self\n+arg: Tensor other\n+return: Tensor\n+variants: method, function\n+type_method_definition_level: base\n+type_method_definition_dispatch: at::native::type_as", "path": "aten/src/ATen/NativeFunctions.h", "position": 26, "original_position": 41, "commit_id": "2ea1f85192643dff812788018aa30e3d48ac7591", "original_commit_id": "f841189149faa408025c5db0b51ee5beb47295da", "user": {"login": "colesbury", "id": 655866, "node_id": "MDQ6VXNlcjY1NTg2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/655866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colesbury", "html_url": "https://github.com/colesbury", "followers_url": "https://api.github.com/users/colesbury/followers", "following_url": "https://api.github.com/users/colesbury/following{/other_user}", "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions", "organizations_url": "https://api.github.com/users/colesbury/orgs", "repos_url": "https://api.github.com/users/colesbury/repos", "events_url": "https://api.github.com/users/colesbury/events{/privacy}", "received_events_url": "https://api.github.com/users/colesbury/received_events", "type": "User", "site_admin": false}, "body": "typo: s/type_as/expand_as", "created_at": "2017-11-09T16:53:39Z", "updated_at": "2018-11-23T15:36:16Z", "html_url": "https://github.com/pytorch/pytorch/pull/3562#discussion_r150021552", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/3562", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/150021552"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/3562#discussion_r150021552"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/3562"}}, "body_html": "<p>typo: s/type_as/expand_as</p>", "body_text": "typo: s/type_as/expand_as"}