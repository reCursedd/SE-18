{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/149910505", "pull_request_review_id": 75378317, "id": 149910505, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0OTkxMDUwNQ==", "diff_hunk": "@@ -761,14 +778,34 @@ def emit_body(declaration):\n             env['trace_outputs'] = 'ret'\n         else:\n             env['return_value'] = '{}(std::move(ret))'.format(declaration['return_type'])\n-            env['result'] = 'std::get<0>(ret)' if len(declaration['returns']) > 1 else 'ret'\n             if len(declaration['returns']) > 1:\n                 # NB: This won't work if we get heterogenous outputs\n-                outs = ['std::get<{}>(ret)'.format(i)\n-                        for i, v in enumerate(declaration['returns']) if v['type'] == 'Tensor']\n+                def mk_tuple_getters(pred):\n+                    return ['std::get<{}>(ret)'.format(i)\n+                            for i, v in enumerate(declaration['returns'])\n+                            if v['type'] == 'Tensor' and pred(v)]\n+                diff_outs = mk_tuple_getters(lambda v: v['dynamic_type'] == 'Tensor')\n+                trace_outs = mk_tuple_getters(lambda v: True)\n+            else:\n+                diff_outs = ['ret']\n+                trace_outs = ['ret']\n+            # TODO: This is a bit dodgy, but the basic idea is, if you\n+            # used 'grad' in the derivative computation, you have\n+            # implicitly assumed that there is only one gradient being\n+            # passed into you, which in turn means that only the first\n+            # return of the corresponding forward was meant to be\n+            # differentiable.  If you actually wanted to differentiate\n+            # on the other returns, you would have used 'grads' instead.\n+            # This happens in practice with 'gesv'.", "path": "tools/autograd/gen_variable_type.py", "position": 159, "original_position": 104, "commit_id": "2ea1f85192643dff812788018aa30e3d48ac7591", "original_commit_id": "28c4cde87be38c40781feb5d722381fb5b64639f", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Can you mark the second output of `gesv` as non-differentiable?", "created_at": "2017-11-09T09:54:48Z", "updated_at": "2018-11-23T15:36:14Z", "html_url": "https://github.com/pytorch/pytorch/pull/3562#discussion_r149910505", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/3562", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/149910505"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/3562#discussion_r149910505"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/3562"}}, "body_html": "<p>Can you mark the second output of <code>gesv</code> as non-differentiable?</p>", "body_text": "Can you mark the second output of gesv as non-differentiable?", "in_reply_to_id": 149737414}