{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/149651928", "pull_request_review_id": 75077345, "id": 149651928, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0OTY1MTkyOA==", "diff_hunk": "@@ -112,8 +112,12 @@ type_method_definition_dispatch: at::native::expand\n */\n static inline Tensor expand(const Tensor &self, IntList size) {\n   if (size.size() < (size_t)self.dim()) {\n-    throw std::runtime_error(\"the number of sizes provided must be greater or equal to the \"\n-                             \"number of dimensions in the tensor\");\n+    std::ostringstream ss;\n+    ss << \"at::expand(\" << self.type() << \"{\" << self.sizes() << \"}, size=\" << size", "path": "aten/src/ATen/NativeFunctions.h", "position": null, "original_position": 7, "commit_id": "2ea1f85192643dff812788018aa30e3d48ac7591", "original_commit_id": "3e7c87a725004c80b288c38c8846d765b8d1da06", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "So, we have a more general problem, where the new ATen code may raise an exception somewhere deep inside an implementation, even though the user visible trace doesn't mention the problem at all. For example, I triggered this error message above by passing an incorrectly shaped gradient out of backwards. Then I got an \"expand\" error when invoking \"backward()\". Very perplexing. Inspecting the C++ trace in gdb helped elucidate the situation, but this is not very user friendly.", "created_at": "2017-11-08T12:16:51Z", "updated_at": "2018-11-23T15:36:11Z", "html_url": "https://github.com/pytorch/pytorch/pull/3562#discussion_r149651928", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/3562", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/149651928"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/3562#discussion_r149651928"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/3562"}}, "body_html": "<p>So, we have a more general problem, where the new ATen code may raise an exception somewhere deep inside an implementation, even though the user visible trace doesn't mention the problem at all. For example, I triggered this error message above by passing an incorrectly shaped gradient out of backwards. Then I got an \"expand\" error when invoking \"backward()\". Very perplexing. Inspecting the C++ trace in gdb helped elucidate the situation, but this is not very user friendly.</p>", "body_text": "So, we have a more general problem, where the new ATen code may raise an exception somewhere deep inside an implementation, even though the user visible trace doesn't mention the problem at all. For example, I triggered this error message above by passing an incorrectly shaped gradient out of backwards. Then I got an \"expand\" error when invoking \"backward()\". Very perplexing. Inspecting the C++ trace in gdb helped elucidate the situation, but this is not very user friendly.", "in_reply_to_id": 149647348}