{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/387901559", "html_url": "https://github.com/pytorch/pytorch/pull/7409#issuecomment-387901559", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/7409", "id": 387901559, "node_id": "MDEyOklzc3VlQ29tbWVudDM4NzkwMTU1OQ==", "user": {"login": "goldsborough", "id": 6429851, "node_id": "MDQ6VXNlcjY0Mjk4NTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/6429851?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goldsborough", "html_url": "https://github.com/goldsborough", "followers_url": "https://api.github.com/users/goldsborough/followers", "following_url": "https://api.github.com/users/goldsborough/following{/other_user}", "gists_url": "https://api.github.com/users/goldsborough/gists{/gist_id}", "starred_url": "https://api.github.com/users/goldsborough/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goldsborough/subscriptions", "organizations_url": "https://api.github.com/users/goldsborough/orgs", "repos_url": "https://api.github.com/users/goldsborough/repos", "events_url": "https://api.github.com/users/goldsborough/events{/privacy}", "received_events_url": "https://api.github.com/users/goldsborough/received_events", "type": "User", "site_admin": false}, "created_at": "2018-05-09T23:07:39Z", "updated_at": "2018-05-09T23:07:39Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Actually turns out <code>this</code> always points to the base object inside constructors, so doing <code>typeid(*this)</code> in the constructor doesn't work. Instead I lazily initialize the name member the first time <code>name()</code> is called, since by then <code>this</code> will work polymorphically</p>", "body_text": "Actually turns out this always points to the base object inside constructors, so doing typeid(*this) in the constructor doesn't work. Instead I lazily initialize the name member the first time name() is called, since by then this will work polymorphically", "body": "Actually turns out `this` always points to the base object inside constructors, so doing `typeid(*this)` in the constructor doesn't work. Instead I lazily initialize the name member the first time `name()` is called, since by then `this` will work polymorphically"}