{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/198361109", "pull_request_review_id": 132278382, "id": 198361109, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5ODM2MTEwOQ==", "diff_hunk": "@@ -337,6 +350,58 @@ ConvertedResult OnnxExporter::CommonCaffe2OpToOnnxNodes(\n   return result;\n }\n \n+ConvertedResult OnnxExporter::CreateBinaryElementwiseOpNodes(\n+    const caffe2::OperatorDef& def,\n+    const std::unordered_map<std::string, caffe2::TensorShape>& shapes) {\n+  // The upper bound (excluded) of expanded y.\n+  // 0 indicates that no need to unsqueeze y, otherwise, we have to do the unsqueeze.\n+  caffe2::OperatorDef mdef(def);  // The modified def without broadcast and axis\n+  const auto& x = mdef.input(0);\n+  const auto& y = def.input(1);  // Refer to the old def, later won't change it.\n+  const auto& z = mdef.output(0);\n+  const auto& x_shape = shapes.at(x);\n+  const auto& y_shape = shapes.at(y);\n+  for (int i = 0; i < mdef.arg_size(); ++i) {\n+    const auto& arg = mdef.arg(i);\n+    if (arg.name() == \"broadcast\") {\n+      if (i < mdef.arg_size() - 1) {\n+        mdef.mutable_arg()->SwapElements(i, mdef.arg_size() - 1);\n+      }\n+      mdef.mutable_arg()->RemoveLast();\n+      break;\n+    }\n+  }\n+  std::vector<int64_t> axes;\n+  for (int i = 0; i < mdef.arg_size(); ++i) {\n+    const auto& arg = mdef.arg(i);\n+    if (arg.name() == \"axis\") {\n+      int64_t axis = arg.i();\n+      if (x_shape.dims().size() - axis != y_shape.dims().size()) {\n+        int64_t end_dim = y_shape.dims().size() - 1 - axis + x_shape.dims().size();\n+        for (int64_t j = y_shape.dims().size(); j < end_dim; ++j) {\n+          axes.emplace_back(j);", "path": "caffe2/onnx/onnx_exporter.cc", "position": null, "original_position": 62, "commit_id": "150cbafa44b91e62175cae664f8e5d2b05b356c9", "original_commit_id": "1f27183429cd2eb5cdf8b9df07a9e3aec903cbc7", "user": {"login": "yinghai", "id": 1100089, "node_id": "MDQ6VXNlcjExMDAwODk=", "avatar_url": "https://avatars1.githubusercontent.com/u/1100089?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yinghai", "html_url": "https://github.com/yinghai", "followers_url": "https://api.github.com/users/yinghai/followers", "following_url": "https://api.github.com/users/yinghai/following{/other_user}", "gists_url": "https://api.github.com/users/yinghai/gists{/gist_id}", "starred_url": "https://api.github.com/users/yinghai/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yinghai/subscriptions", "organizations_url": "https://api.github.com/users/yinghai/orgs", "repos_url": "https://api.github.com/users/yinghai/repos", "events_url": "https://api.github.com/users/yinghai/events{/privacy}", "received_events_url": "https://api.github.com/users/yinghai/received_events", "type": "User", "site_admin": false}, "body": "I guess `std::iota` also works. ", "created_at": "2018-06-27T04:02:49Z", "updated_at": "2018-11-23T15:46:25Z", "html_url": "https://github.com/pytorch/pytorch/pull/8854#discussion_r198361109", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/8854", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/198361109"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/8854#discussion_r198361109"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/8854"}}, "body_html": "<p>I guess <code>std::iota</code> also works.</p>", "body_text": "I guess std::iota also works.", "in_reply_to_id": 198358240}