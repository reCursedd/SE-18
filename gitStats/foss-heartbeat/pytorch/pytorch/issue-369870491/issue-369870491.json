{"url": "https://api.github.com/repos/pytorch/pytorch/issues/12631", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/12631/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/12631/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/12631/events", "html_url": "https://github.com/pytorch/pytorch/issues/12631", "id": 369870491, "node_id": "MDU6SXNzdWUzNjk4NzA0OTE=", "number": 12631, "title": "Give non-differentiable output None grad in Python autograd fn", "user": {"login": "SsnL", "id": 5674597, "node_id": "MDQ6VXNlcjU2NzQ1OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5674597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SsnL", "html_url": "https://github.com/SsnL", "followers_url": "https://api.github.com/users/SsnL/followers", "following_url": "https://api.github.com/users/SsnL/following{/other_user}", "gists_url": "https://api.github.com/users/SsnL/gists{/gist_id}", "starred_url": "https://api.github.com/users/SsnL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SsnL/subscriptions", "organizations_url": "https://api.github.com/users/SsnL/orgs", "repos_url": "https://api.github.com/users/SsnL/repos", "events_url": "https://api.github.com/users/SsnL/events{/privacy}", "received_events_url": "https://api.github.com/users/SsnL/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-10-14T05:49:55Z", "updated_at": "2018-10-14T05:49:55Z", "closed_at": null, "author_association": "CONTRIBUTOR", "body_html": "<p><div class=\"border rounded-1 my-2\">\n  <div class=\"f6 px-3 py-2 lh-condensed border-bottom bg-gray-light\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/pytorch/pytorch/blob/0c6ab0e8f43ded4a67b444f3b4c08673409ef6ca/torch/autograd/function.py#L53-L54\">pytorch/torch/autograd/function.py</a>\n    </p>\n    <p class=\"mb-0 text-gray-light\">\n        Lines 53 to 54\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/pytorch/pytorch/commit/0c6ab0e8f43ded4a67b444f3b4c08673409ef6ca\">0c6ab0e</a>\n    </p>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L53\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"53\"></td>\n          <td id=\"LC53\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-s\">        for each output in :meth:`~Function.backward`, but it's always going to</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L54\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"54\"></td>\n          <td id=\"LC54\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-s\">        be ``None``.</span> </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n<br>\nThis is currently a lie. They somehow get all zero grad in backward. And somehow we rely on this behavior at<br>\n<div class=\"border rounded-1 my-2\">\n  <div class=\"f6 px-3 py-2 lh-condensed border-bottom bg-gray-light\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/pytorch/pytorch/blob/0c6ab0e8f43ded4a67b444f3b4c08673409ef6ca/torch/nn/parallel/_functions.py#L31-L43\">pytorch/torch/nn/parallel/_functions.py</a>\n    </p>\n    <p class=\"mb-0 text-gray-light\">\n        Lines 31 to 43\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/pytorch/pytorch/commit/0c6ab0e8f43ded4a67b444f3b4c08673409ef6ca\">0c6ab0e</a>\n    </p>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L31\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"31\"></td>\n          <td id=\"LC31\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     <span class=\"pl-k\">def</span> <span class=\"pl-en\">backward</span>(<span class=\"pl-smi\">ctx</span>, <span class=\"pl-k\">*</span><span class=\"pl-smi\">grad_outputs</span>): </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L32\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"32\"></td>\n          <td id=\"LC32\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">         <span class=\"pl-k\">return</span> (<span class=\"pl-c1\">None</span>,) <span class=\"pl-k\">+</span> ReduceAddCoalesced.apply(ctx.input_device, ctx.num_inputs, <span class=\"pl-k\">*</span>grad_outputs) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L33\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"33\"></td>\n          <td id=\"LC33\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">  </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L34\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"34\"></td>\n          <td id=\"LC34\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">  </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L35\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"35\"></td>\n          <td id=\"LC35\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-k\">class</span> <span class=\"pl-en\">ReduceAddCoalesced</span>(<span class=\"pl-e\">Function</span>): </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L36\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"36\"></td>\n          <td id=\"LC36\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">  </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L37\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"37\"></td>\n          <td id=\"LC37\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     <span class=\"pl-en\">@</span><span class=\"pl-c1\">staticmethod</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L38\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"38\"></td>\n          <td id=\"LC38\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     <span class=\"pl-k\">def</span> <span class=\"pl-en\">forward</span>(<span class=\"pl-smi\">ctx</span>, <span class=\"pl-smi\">destination</span>, <span class=\"pl-smi\">num_inputs</span>, <span class=\"pl-k\">*</span><span class=\"pl-smi\">grads</span>): </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L39\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"39\"></td>\n          <td id=\"LC39\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">         ctx.target_gpus <span class=\"pl-k\">=</span> [grads[i].get_device() <span class=\"pl-k\">for</span> i <span class=\"pl-k\">in</span> <span class=\"pl-c1\">range</span>(<span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">len</span>(grads), num_inputs)] </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L40\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"40\"></td>\n          <td id=\"LC40\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">  </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L41\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"41\"></td>\n          <td id=\"LC41\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">         grads <span class=\"pl-k\">=</span> [grads[i:i <span class=\"pl-k\">+</span> num_inputs] </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L42\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"42\"></td>\n          <td id=\"LC42\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">                  <span class=\"pl-k\">for</span> i <span class=\"pl-k\">in</span> <span class=\"pl-c1\">range</span>(<span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">len</span>(grads), num_inputs)] </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L43\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"43\"></td>\n          <td id=\"LC43\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">         <span class=\"pl-k\">return</span> comm.reduce_add_coalesced(grads, destination) </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n</p>", "body_text": "pytorch/torch/autograd/function.py\n    \n    \n        Lines 53 to 54\n      in\n      0c6ab0e\n    \n    \n    \n    \n\n        \n          \n                   for each output in :meth:`~Function.backward`, but it's always going to \n        \n\n        \n          \n                   be ``None``. \n        \n    \n  \n\n\nThis is currently a lie. They somehow get all zero grad in backward. And somehow we rely on this behavior at\n\n  \n    \n      pytorch/torch/nn/parallel/_functions.py\n    \n    \n        Lines 31 to 43\n      in\n      0c6ab0e\n    \n    \n    \n    \n\n        \n          \n               def backward(ctx, *grad_outputs): \n        \n\n        \n          \n                   return (None,) + ReduceAddCoalesced.apply(ctx.input_device, ctx.num_inputs, *grad_outputs) \n        \n\n        \n          \n            \n        \n\n        \n          \n            \n        \n\n        \n          \n           class ReduceAddCoalesced(Function): \n        \n\n        \n          \n            \n        \n\n        \n          \n               @staticmethod \n        \n\n        \n          \n               def forward(ctx, destination, num_inputs, *grads): \n        \n\n        \n          \n                   ctx.target_gpus = [grads[i].get_device() for i in range(0, len(grads), num_inputs)] \n        \n\n        \n          \n            \n        \n\n        \n          \n                   grads = [grads[i:i + num_inputs] \n        \n\n        \n          \n                            for i in range(0, len(grads), num_inputs)] \n        \n\n        \n          \n                   return comm.reduce_add_coalesced(grads, destination)", "body": "https://github.com/pytorch/pytorch/blob/0c6ab0e8f43ded4a67b444f3b4c08673409ef6ca/torch/autograd/function.py#L53-L54\r\nThis is currently a lie. They somehow get all zero grad in backward. And somehow we rely on this behavior at\r\nhttps://github.com/pytorch/pytorch/blob/0c6ab0e8f43ded4a67b444f3b4c08673409ef6ca/torch/nn/parallel/_functions.py#L31-L43"}