{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/204892102", "pull_request_review_id": 140056027, "id": 204892102, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDg5MjEwMg==", "diff_hunk": "@@ -0,0 +1,313 @@\n+// Copyright (c) 2018 MathInf GmbH, Thomas Viehmann\n+// Licensed under the BSD-3-Clause license\n+\n+#include <ATen/ATen.h>\n+#include \"ATen/Dispatch.h\"\n+#include \"ATen/TensorUtils.h\"\n+\n+#include <numeric>\n+\n+namespace at {\n+namespace native {\n+\n+namespace {\n+\n+inline int64_t get_target_prime(int64_t* target, int64_t offset, int64_t stride, int64_t idx, int64_t BLANK) {\n+  if (idx % 2 == 0) {\n+    return BLANK;\n+  } else {\n+    return target[offset + stride * (idx / 2)];\n+  }\n+}\n+\n+template<typename scalar_t>\n+std::tuple<Tensor, Tensor> ctc_loss_cpu_template(const Tensor& log_probs, const Tensor& targets, const Tensor& input_lengths, const Tensor& target_lengths, int64_t BLANK) {", "path": "aten/src/ATen/native/LossCTC.cpp", "position": null, "original_position": 24, "commit_id": "11b97f7337172d5bfef0e2af792569597aafaee1", "original_commit_id": "77eb0e5d50dfaab028894081e65f13f822c8fe0f", "user": {"login": "t-vi", "id": 20787943, "node_id": "MDQ6VXNlcjIwNzg3OTQz", "avatar_url": "https://avatars2.githubusercontent.com/u/20787943?v=4", "gravatar_id": "", "url": "https://api.github.com/users/t-vi", "html_url": "https://github.com/t-vi", "followers_url": "https://api.github.com/users/t-vi/followers", "following_url": "https://api.github.com/users/t-vi/following{/other_user}", "gists_url": "https://api.github.com/users/t-vi/gists{/gist_id}", "starred_url": "https://api.github.com/users/t-vi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/t-vi/subscriptions", "organizations_url": "https://api.github.com/users/t-vi/orgs", "repos_url": "https://api.github.com/users/t-vi/repos", "events_url": "https://api.github.com/users/t-vi/events{/privacy}", "received_events_url": "https://api.github.com/users/t-vi/received_events", "type": "User", "site_admin": false}, "body": "I can change that, but there two things that would need to be done:\r\n- So for cuda, I would need to pass those to the kernel eventually.\r\n- Also, for cuDNN they need to be int32.\r\n\r\nThat said, they aren't particularly large (batch_size items) and I need some things on the CPU to validate sizes, so IntList may just be the thing to do.\r\n", "created_at": "2018-07-24T20:02:27Z", "updated_at": "2018-11-23T15:47:59Z", "html_url": "https://github.com/pytorch/pytorch/pull/9628#discussion_r204892102", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/9628", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/204892102"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/9628#discussion_r204892102"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/9628"}}, "body_html": "<p>I can change that, but there two things that would need to be done:</p>\n<ul>\n<li>So for cuda, I would need to pass those to the kernel eventually.</li>\n<li>Also, for cuDNN they need to be int32.</li>\n</ul>\n<p>That said, they aren't particularly large (batch_size items) and I need some things on the CPU to validate sizes, so IntList may just be the thing to do.</p>", "body_text": "I can change that, but there two things that would need to be done:\n\nSo for cuda, I would need to pass those to the kernel eventually.\nAlso, for cuDNN they need to be int32.\n\nThat said, they aren't particularly large (batch_size items) and I need some things on the CPU to validate sizes, so IntList may just be the thing to do.", "in_reply_to_id": 204810795}