{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/206624530", "pull_request_review_id": 142072679, "id": 206624530, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjYyNDUzMA==", "diff_hunk": "@@ -0,0 +1,365 @@\n+// Copyright (c) 2018 MathInf GmbH, Thomas Viehmann\n+// Licensed under the BSD-3-Clause license\n+// This is the CPU implementation of the Connectionist Temporal Loss.\n+// We mostly follow Graves.\n+// 1. Graves et al: http://www.cs.toronto.edu/~graves/icml_2006.pdf\n+// We use the equations from above link, but note that [1] has 1-based indexing and we (of course) use 0-based.\n+// Graves et al call the probabilities y, we use log_probs (also calling them inputs)\n+\n+#include <ATen/ATen.h>\n+#include \"ATen/Dispatch.h\"\n+#include \"ATen/TensorUtils.h\"\n+\n+#include <numeric>\n+#include <type_traits>\n+\n+namespace at {\n+namespace native {\n+\n+namespace {\n+\n+// this ad-hoc converts from targets (l in [1]) to augmented targets (l' in [1]) note that no bound-checking is done\n+template<typename target_t>\n+static inline int64_t get_target_prime(target_t* target, int64_t offset, int64_t stride, int64_t idx, int64_t BLANK) {\n+  if (idx % 2 == 0) {\n+    return BLANK;\n+  } else {\n+    return target[offset + stride * (idx / 2)];\n+  }\n+}\n+\n+// This kernel is a relatively straightforward implementation of the alpha calculation in the forward backward algorithm (section 4.1).\n+// A (minor) twist is that we are using log-calculations to enhance numerical stability (log_probs and log_alpha).\n+// The function returns the loss and the alphas, the alphas are kept for the backward step. The wrapper (ctc_loss below) hides\n+// the alphas from the user by only returning the loss.\n+template<typename scalar_t, ScalarType target_scalar_type>\n+std::tuple<Tensor, Tensor> ctc_loss_cpu_template(const Tensor& log_probs, const Tensor& targets, IntList input_lengths, IntList target_lengths, int64_t BLANK) {\n+  // log_probs: input_len x batch_size x num_labels\n+  // targets [int64]: batch_size x target_length OR sum(target_lengths)\n+  constexpr scalar_t neginf = -std::numeric_limits<scalar_t>::infinity();\n+  using target_t = typename std::conditional<target_scalar_type == kInt, int, int64_t>::type;\n+\n+  CheckedFrom c = \"ctc_loss_cpu\";\n+  auto log_probs_arg = TensorArg(log_probs, \"log_probs\", 1);\n+  auto targets_arg = TensorArg(targets, \"targets\", 2);\n+  checkScalarType(c, targets_arg, target_scalar_type);\n+  checkDim(c, log_probs_arg, 3);\n+  checkDimRange(c, targets_arg, 1, 3);\n+\n+  int64_t batch_size = log_probs.size(1);\n+  int64_t num_labels = log_probs.size(2);\n+  AT_CHECK(BLANK < num_labels, \"blank must be in label range\");", "path": "aten/src/ATen/native/LossCTC.cpp", "position": 51, "original_position": 51, "commit_id": "11b97f7337172d5bfef0e2af792569597aafaee1", "original_commit_id": "11b97f7337172d5bfef0e2af792569597aafaee1", "user": {"login": "SsnL", "id": 5674597, "node_id": "MDQ6VXNlcjU2NzQ1OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5674597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SsnL", "html_url": "https://github.com/SsnL", "followers_url": "https://api.github.com/users/SsnL/followers", "following_url": "https://api.github.com/users/SsnL/following{/other_user}", "gists_url": "https://api.github.com/users/SsnL/gists{/gist_id}", "starred_url": "https://api.github.com/users/SsnL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SsnL/subscriptions", "organizations_url": "https://api.github.com/users/SsnL/orgs", "repos_url": "https://api.github.com/users/SsnL/repos", "events_url": "https://api.github.com/users/SsnL/events{/privacy}", "received_events_url": "https://api.github.com/users/SsnL/received_events", "type": "User", "site_admin": false}, "body": "you didn't check that `BLANK >= 0` :)", "created_at": "2018-07-31T17:53:23Z", "updated_at": "2018-11-23T15:48:29Z", "html_url": "https://github.com/pytorch/pytorch/pull/9628#discussion_r206624530", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/9628", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/206624530"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/9628#discussion_r206624530"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/9628"}}, "body_html": "<p>you didn't check that <code>BLANK &gt;= 0</code> :)</p>", "body_text": "you didn't check that BLANK >= 0 :)"}