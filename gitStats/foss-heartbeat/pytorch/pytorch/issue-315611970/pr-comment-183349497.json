{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/183349497", "pull_request_review_id": 114327841, "id": 183349497, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MzM0OTQ5Nw==", "diff_hunk": "@@ -717,6 +717,40 @@ Tensor diag_backward(const Tensor & grad, IntList input_sizes, int64_t diagonal)\n   return grad_input;\n }\n \n+Tensor diagonal_backward(const Tensor & grad, IntList input_sizes, int64_t offset, int64_t dim1_, int64_t dim2_) {\n+  auto grad_input = at::zeros(grad.type(), input_sizes);\n+  // the following until the assignment of auto diag\n+  // copies the diagonal code in aten/src/ATen/native/TensorShape.cpp\n+  // that would be equivalent to\n+  //        auto diag = grad_input.diagonal(offset, dim1, dim2);\n+  // when using diagonal, the output is not differentiable twice", "path": "tools/autograd/templates/Functions.cpp", "position": null, "original_position": 10, "commit_id": "71eb0d5b7ce223c63deed433516d7bf6ace9762f", "original_commit_id": "67d2734ecd6f748d7639efeab4270205313a227f", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Why wouldn't it be differentiable twice if you did that? It's generally ok to use an op to implement its own backward, and there are many cases where this happens: `transpose`, `permute`, `view`, ...", "created_at": "2018-04-23T10:42:31Z", "updated_at": "2018-11-23T15:42:58Z", "html_url": "https://github.com/pytorch/pytorch/pull/6718#discussion_r183349497", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/6718", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/183349497"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/6718#discussion_r183349497"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/6718"}}, "body_html": "<p>Why wouldn't it be differentiable twice if you did that? It's generally ok to use an op to implement its own backward, and there are many cases where this happens: <code>transpose</code>, <code>permute</code>, <code>view</code>, ...</p>", "body_text": "Why wouldn't it be differentiable twice if you did that? It's generally ok to use an op to implement its own backward, and there are many cases where this happens: transpose, permute, view, ..."}