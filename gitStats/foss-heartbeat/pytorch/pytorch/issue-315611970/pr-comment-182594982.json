{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/182594982", "pull_request_review_id": 113422654, "id": 182594982, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjU5NDk4Mg==", "diff_hunk": "@@ -717,6 +717,13 @@ Tensor diag_backward(const Tensor & grad, IntList input_sizes, int64_t diagonal)\n   return grad_input;\n }\n \n+Tensor diagonal_backward(const Tensor & grad, IntList input_sizes, int64_t offset, int64_t dim1, int64_t dim2) {\n+  auto grad_input = at::zeros(grad.type(), input_sizes);\n+  auto diag = at::diagonal(grad_input, offset, dim1, dim2);\n+  diag.copy_(grad);", "path": "tools/autograd/templates/Functions.cpp", "position": null, "original_position": 7, "commit_id": "71eb0d5b7ce223c63deed433516d7bf6ace9762f", "original_commit_id": "7bf93af988dd15fb6a95b3118a1c54ae611393e7", "user": {"login": "t-vi", "id": 20787943, "node_id": "MDQ6VXNlcjIwNzg3OTQz", "avatar_url": "https://avatars2.githubusercontent.com/u/20787943?v=4", "gravatar_id": "", "url": "https://api.github.com/users/t-vi", "html_url": "https://github.com/t-vi", "followers_url": "https://api.github.com/users/t-vi/followers", "following_url": "https://api.github.com/users/t-vi/following{/other_user}", "gists_url": "https://api.github.com/users/t-vi/gists{/gist_id}", "starred_url": "https://api.github.com/users/t-vi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/t-vi/subscriptions", "organizations_url": "https://api.github.com/users/t-vi/orgs", "repos_url": "https://api.github.com/users/t-vi/repos", "events_url": "https://api.github.com/users/t-vi/events{/privacy}", "received_events_url": "https://api.github.com/users/t-vi/received_events", "type": "User", "site_admin": false}, "body": "No, it doesn't work.\r\n```\r\na = torch.randn(5, 6, requires_grad=True)\r\nb = torch.diagonal(a)**2\r\nc = b.sum()\r\nd, = torch.autograd.grad(c,a, retain_graph=True, create_graph=True)\r\n```\r\nnow `d.requires_grad` will be zero.\r\nThe strange part is that if I exactly copypaste my diagonal code and replace `self` with `grad_in`, it suddenly works (I got the idea that it would work from the non-square case in `diag_backward`).\r\nI have no idea what the difference is between `auto diag = grad_in.diagonal(...)` and doing the calculations locally and `auto diag = grad_in.as_strided(...)`.\r\nHow should I deal with that? Move the calculations in a utility function in a header?", "created_at": "2018-04-18T23:08:52Z", "updated_at": "2018-11-23T15:42:48Z", "html_url": "https://github.com/pytorch/pytorch/pull/6718#discussion_r182594982", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/6718", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/182594982"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/6718#discussion_r182594982"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/6718"}}, "body_html": "<p>No, it doesn't work.</p>\n<pre><code>a = torch.randn(5, 6, requires_grad=True)\nb = torch.diagonal(a)**2\nc = b.sum()\nd, = torch.autograd.grad(c,a, retain_graph=True, create_graph=True)\n</code></pre>\n<p>now <code>d.requires_grad</code> will be zero.<br>\nThe strange part is that if I exactly copypaste my diagonal code and replace <code>self</code> with <code>grad_in</code>, it suddenly works (I got the idea that it would work from the non-square case in <code>diag_backward</code>).<br>\nI have no idea what the difference is between <code>auto diag = grad_in.diagonal(...)</code> and doing the calculations locally and <code>auto diag = grad_in.as_strided(...)</code>.<br>\nHow should I deal with that? Move the calculations in a utility function in a header?</p>", "body_text": "No, it doesn't work.\na = torch.randn(5, 6, requires_grad=True)\nb = torch.diagonal(a)**2\nc = b.sum()\nd, = torch.autograd.grad(c,a, retain_graph=True, create_graph=True)\n\nnow d.requires_grad will be zero.\nThe strange part is that if I exactly copypaste my diagonal code and replace self with grad_in, it suddenly works (I got the idea that it would work from the non-square case in diag_backward).\nI have no idea what the difference is between auto diag = grad_in.diagonal(...) and doing the calculations locally and auto diag = grad_in.as_strided(...).\nHow should I deal with that? Move the calculations in a utility function in a header?", "in_reply_to_id": 182579121}