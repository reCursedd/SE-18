{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/182576424", "pull_request_review_id": 113400718, "id": 182576424, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjU3NjQyNA==", "diff_hunk": "@@ -44,11 +44,42 @@ Tensor diagflat(const Tensor& self, int64_t offset) {\n   return self.contiguous().view(-1).diag(offset);\n }\n \n-Tensor diagonal(const Tensor& self, int64_t offset) {\n-  if (self.dim() != 2) {\n-    throw std::runtime_error(\"diagonal expects a 2-dimensional tensor\");\n-  }\n-  return self.diag(offset);\n+Tensor diagonal(const Tensor& self, int64_t offset, int64_t dim1_, int64_t dim2_) {\n+  int64_t nDims = self.dim();\n+  int64_t dim1 = maybe_wrap_dim(dim1_, nDims);\n+  int64_t dim2 = maybe_wrap_dim(dim2_, nDims);\n+  AT_ASSERT(dim1 != dim2, \"diagonal dimensions cannot be identical %zd, %zd\", dim1_, dim2_);\n+  int64_t diag_size;\n+  int64_t storage_offset = self.storage_offset();\n+  // compute storage offset and size for the diagonal\n+  // for positive values of offset (above the main diagonal)\n+  // \"leftmost columns\" (along dim2) are dropped\n+  // for negative values of offset (below the main diagonal)\n+  // \"topmost rows\" (along dim1) are dropped.\n+  // Note that we invert +/- in the second to absorb the negative\n+  // sign in the offset.\n+  if (offset >= 0) {\n+    diag_size = std::min(self.size(dim1), self.size(dim2)-offset);\n+    storage_offset += offset * self.stride(dim2);\n+  } else {\n+    diag_size = std::min(self.size(dim1)+offset, self.size(dim2));\n+    storage_offset -= offset * self.stride(dim1);\n+  }\n+  AT_ASSERT(diag_size > 0, \"invalid diagonal offset %zd\", offset); // the diagonal offset was too large in magnitude", "path": "aten/src/ATen/native/TensorShape.cpp", "position": 30, "original_position": 30, "commit_id": "71eb0d5b7ce223c63deed433516d7bf6ace9762f", "original_commit_id": "7bf93af988dd15fb6a95b3118a1c54ae611393e7", "user": {"login": "t-vi", "id": 20787943, "node_id": "MDQ6VXNlcjIwNzg3OTQz", "avatar_url": "https://avatars2.githubusercontent.com/u/20787943?v=4", "gravatar_id": "", "url": "https://api.github.com/users/t-vi", "html_url": "https://github.com/t-vi", "followers_url": "https://api.github.com/users/t-vi/followers", "following_url": "https://api.github.com/users/t-vi/following{/other_user}", "gists_url": "https://api.github.com/users/t-vi/gists{/gist_id}", "starred_url": "https://api.github.com/users/t-vi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/t-vi/subscriptions", "organizations_url": "https://api.github.com/users/t-vi/orgs", "repos_url": "https://api.github.com/users/t-vi/repos", "events_url": "https://api.github.com/users/t-vi/events{/privacy}", "received_events_url": "https://api.github.com/users/t-vi/received_events", "type": "User", "site_admin": false}, "body": "It can happen if the user supplies a diagonal that lies entirely outside the matrix, e.g. `torch.diagonal(torch.randn(3,3),3)`.", "created_at": "2018-04-18T21:34:00Z", "updated_at": "2018-11-23T15:42:48Z", "html_url": "https://github.com/pytorch/pytorch/pull/6718#discussion_r182576424", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/6718", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/182576424"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/6718#discussion_r182576424"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/6718"}}, "body_html": "<p>It can happen if the user supplies a diagonal that lies entirely outside the matrix, e.g. <code>torch.diagonal(torch.randn(3,3),3)</code>.</p>", "body_text": "It can happen if the user supplies a diagonal that lies entirely outside the matrix, e.g. torch.diagonal(torch.randn(3,3),3).", "in_reply_to_id": 182563136}