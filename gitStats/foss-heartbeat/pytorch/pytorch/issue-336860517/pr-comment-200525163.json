{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/200525163", "pull_request_review_id": 134859486, "id": 200525163, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDUyNTE2Mw==", "diff_hunk": "@@ -133,68 +95,33 @@ Symbol Symbol::fromQualString(const std::string & s) {\n   return globalStrings().symbol(s);\n }\n \n-const char* symbolNamespaceString(SymbolNamespace ns) {\n-  switch (ns) {\n-    case SymbolNamespace::onnx: return \"onnx\";\n-    case SymbolNamespace::prim: return \"prim\";\n-    case SymbolNamespace::aten: return \"aten\";\n-    case SymbolNamespace::attr: return \"attr\";\n-    case SymbolNamespace::scope: return \"scope\";\n-    // NB: throwing an exception here causes gcc -O3 to produce far worse code\n-    default: return \"\";\n-  }\n-}\n-\n-// NB: I really wanted to define this as std::strlen(symbolNamespaceString(ns)),\n-// but gcc -O3 doesn't seem to be smart enough to push the std::strlen into\n-// the switch statement.\n-size_t symbolNamespaceLength(SymbolNamespace ns) {\n-  switch (ns) {\n-    case SymbolNamespace::onnx: return 4;\n-    case SymbolNamespace::prim: return 4;\n-    case SymbolNamespace::aten: return 4;\n-    case SymbolNamespace::attr: return 4;\n-    case SymbolNamespace::scope: return 5;\n-    default: return 0;\n-  }\n-}\n-\n const char * Symbol::toUnqualString() const {\n-  return globalStrings().string(*this) + symbolNamespaceLength(ns()) + 2 /* double colon */;\n+  return toQualString() + (globalStrings().string(ns()).second - strlen(\"namespaces\"));", "path": "torch/csrc/jit/interned_strings.cpp", "position": null, "original_position": 202, "commit_id": "27d78678f528b8710327719cc8db3f0167dec701", "original_commit_id": "9403e35e275d1f3f6ed2d6867a932a74aa1798f8", "user": {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, "body": "I changed this to be more clear. We now just store a struct for each symbol:\r\n\r\n```\r\n  struct SymbolInfo {\r\n    Symbol ns;\r\n    std::string qual_name;\r\n    std::string unqual_name;\r\n  };\r\n```\r\n\r\nSo there is no need for doing string math to get the unqual string.", "created_at": "2018-07-06T00:47:13Z", "updated_at": "2018-11-23T15:46:50Z", "html_url": "https://github.com/pytorch/pytorch/pull/9018#discussion_r200525163", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/9018", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/200525163"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/9018#discussion_r200525163"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/9018"}}, "body_html": "<p>I changed this to be more clear. We now just store a struct for each symbol:</p>\n<pre><code>  struct SymbolInfo {\n    Symbol ns;\n    std::string qual_name;\n    std::string unqual_name;\n  };\n</code></pre>\n<p>So there is no need for doing string math to get the unqual string.</p>", "body_text": "I changed this to be more clear. We now just store a struct for each symbol:\n  struct SymbolInfo {\n    Symbol ns;\n    std::string qual_name;\n    std::string unqual_name;\n  };\n\nSo there is no need for doing string math to get the unqual string.", "in_reply_to_id": 200442926}