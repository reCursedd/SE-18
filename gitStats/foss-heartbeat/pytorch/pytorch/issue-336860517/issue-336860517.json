{"url": "https://api.github.com/repos/pytorch/pytorch/issues/9018", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/9018/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/9018/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/9018/events", "html_url": "https://github.com/pytorch/pytorch/pull/9018", "id": 336860517, "node_id": "MDExOlB1bGxSZXF1ZXN0MTk4MjEzMjA1", "number": 9018, "title": "Allow arbitrary namespaces for Symbols", "user": {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2018-06-29T04:37:42Z", "updated_at": "2018-11-23T15:46:50Z", "closed_at": "2018-07-06T17:12:25Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/9018", "html_url": "https://github.com/pytorch/pytorch/pull/9018", "diff_url": "https://github.com/pytorch/pytorch/pull/9018.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/9018.patch"}, "body_html": "<p>Context: I am updating jit::FunctionSchema to use <code>Symbol name;</code> rather than <code>std::string name</code>. Sometimes the name refers to a builtin  thing like <code>prim::UnpackTuple</code>, sometimes to an aten operator like <code>aten::add</code>, and sometimes just to a raw string, like <code>my_method_foo</code> that really doesn't belong in any namespace and should be printed to the user in that form. For this last case, I want the ability to create a raw Symbol again, like was previously possible, that just represents an interned string. This PR enables that use, keeps the other functionality still possible, and simplifies interned_string's implementation a bit.</p>\n<p>This changes how Symbol is implemented. Now the namespace of a symbol<br>\nis optional and the namespaces themselves are Symbols.<br>\nThis allows Symbol to be used with arbitrary namespaces, and allows<br>\nyou to use Symbol as an simple interned string using via fromQualString<br>\nand toQualString without :: in the string. This also simplifies the<br>\nimplementation. Like with string conversion, builtin primitives go<br>\nthrough a fast path for namespace lookup while registered symbols require<br>\nholding a lock and reading an array entry to lookup the namespace.</p>\n<p>Note: alexnet expect file update is from a previous commit. It doesn't run in CI because pytorch vision is not installed.</p>", "body_text": "Context: I am updating jit::FunctionSchema to use Symbol name; rather than std::string name. Sometimes the name refers to a builtin  thing like prim::UnpackTuple, sometimes to an aten operator like aten::add, and sometimes just to a raw string, like my_method_foo that really doesn't belong in any namespace and should be printed to the user in that form. For this last case, I want the ability to create a raw Symbol again, like was previously possible, that just represents an interned string. This PR enables that use, keeps the other functionality still possible, and simplifies interned_string's implementation a bit.\nThis changes how Symbol is implemented. Now the namespace of a symbol\nis optional and the namespaces themselves are Symbols.\nThis allows Symbol to be used with arbitrary namespaces, and allows\nyou to use Symbol as an simple interned string using via fromQualString\nand toQualString without :: in the string. This also simplifies the\nimplementation. Like with string conversion, builtin primitives go\nthrough a fast path for namespace lookup while registered symbols require\nholding a lock and reading an array entry to lookup the namespace.\nNote: alexnet expect file update is from a previous commit. It doesn't run in CI because pytorch vision is not installed.", "body": "Context: I am updating jit::FunctionSchema to use `Symbol name;` rather than `std::string name`. Sometimes the name refers to a builtin  thing like `prim::UnpackTuple`, sometimes to an aten operator like `aten::add`, and sometimes just to a raw string, like `my_method_foo` that really doesn't belong in any namespace and should be printed to the user in that form. For this last case, I want the ability to create a raw Symbol again, like was previously possible, that just represents an interned string. This PR enables that use, keeps the other functionality still possible, and simplifies interned_string's implementation a bit. \r\n\r\nThis changes how Symbol is implemented. Now the namespace of a symbol\r\nis optional and the namespaces themselves are Symbols.\r\nThis allows Symbol to be used with arbitrary namespaces, and allows\r\nyou to use Symbol as an simple interned string using via fromQualString\r\nand toQualString without :: in the string. This also simplifies the\r\nimplementation. Like with string conversion, builtin primitives go\r\nthrough a fast path for namespace lookup while registered symbols require\r\nholding a lock and reading an array entry to lookup the namespace.\r\n\r\n\r\n\r\nNote: alexnet expect file update is from a previous commit. It doesn't run in CI because pytorch vision is not installed.\r\n"}