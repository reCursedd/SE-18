{"url": "https://api.github.com/repos/pytorch/pytorch/issues/11159", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/11159/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/11159/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/11159/events", "html_url": "https://github.com/pytorch/pytorch/pull/11159", "id": 356119936, "node_id": "MDExOlB1bGxSZXF1ZXN0MjEyNDkxMTUx", "number": 11159, "title": "[c2][serialized_tests] Refactor tests part 1", "user": {"login": "ajyu", "id": 1071670, "node_id": "MDQ6VXNlcjEwNzE2NzA=", "avatar_url": "https://avatars2.githubusercontent.com/u/1071670?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ajyu", "html_url": "https://github.com/ajyu", "followers_url": "https://api.github.com/users/ajyu/followers", "following_url": "https://api.github.com/users/ajyu/following{/other_user}", "gists_url": "https://api.github.com/users/ajyu/gists{/gist_id}", "starred_url": "https://api.github.com/users/ajyu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ajyu/subscriptions", "organizations_url": "https://api.github.com/users/ajyu/orgs", "repos_url": "https://api.github.com/users/ajyu/repos", "events_url": "https://api.github.com/users/ajyu/events{/privacy}", "received_events_url": "https://api.github.com/users/ajyu/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 890282107, "node_id": "MDU6TGFiZWw4OTAyODIxMDc=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/caffe2", "name": "caffe2", "color": "210aa8", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-08-31T20:50:18Z", "updated_at": "2018-09-04T22:32:02Z", "closed_at": "2018-09-04T22:32:02Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/11159", "html_url": "https://github.com/pytorch/pytorch/pull/11159", "diff_url": "https://github.com/pytorch/pytorch/pull/11159.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/11159.patch"}, "body_html": "<p>Followup to <a href=\"https://github.com/pytorch/pytorch/pull/10594\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/pytorch/pytorch/pull/10594/hovercard\">the serialized test framework</a></p>\n<p>Round 1 for refactoring tests, starting alphabetically. I added some functionality, so I wanted to send out some of these initial changes sooner.</p>\n<ol>\n<li>Start alphabetically producing serialized outputs for test functions, annotating those we want to include with <code>@given_and_seeded</code>. So far I've only added one test per operator, but this already does seem to add quite a few tests.</li>\n<li>Add functionality to allow us to generate outputs using pytest by adding pytest argument options. This allows us to skip adding a <code>__main__</code> function to quite a few tests.</li>\n<li>Catch any exceptions generating the gradient operator and skip serializing/reading it, since certain operators don't have gradients.</li>\n</ol>\n<p>I also noticed that there is some hypothesis handling that makes <code>@given_and_seeded</code> not compatible with adding more hypothesis decorators on top. For example, there are tests that do</p>\n<pre><code>@settings(...)\n@given(...)\ndef test_my_stuff(...)\n</code></pre>\n<p>But there is a hypothesis handler that explicitly checks that <code>@given</code> is called below <code>@settings</code>, so we cannot refactor this to <code>@given_and_seeded</code>. I've just avoided decorating these kinds of tests for now, I hope that's alright.</p>", "body_text": "Followup to the serialized test framework\nRound 1 for refactoring tests, starting alphabetically. I added some functionality, so I wanted to send out some of these initial changes sooner.\n\nStart alphabetically producing serialized outputs for test functions, annotating those we want to include with @given_and_seeded. So far I've only added one test per operator, but this already does seem to add quite a few tests.\nAdd functionality to allow us to generate outputs using pytest by adding pytest argument options. This allows us to skip adding a __main__ function to quite a few tests.\nCatch any exceptions generating the gradient operator and skip serializing/reading it, since certain operators don't have gradients.\n\nI also noticed that there is some hypothesis handling that makes @given_and_seeded not compatible with adding more hypothesis decorators on top. For example, there are tests that do\n@settings(...)\n@given(...)\ndef test_my_stuff(...)\n\nBut there is a hypothesis handler that explicitly checks that @given is called below @settings, so we cannot refactor this to @given_and_seeded. I've just avoided decorating these kinds of tests for now, I hope that's alright.", "body": "Followup to [the serialized test framework](https://github.com/pytorch/pytorch/pull/10594)\r\n\r\n\r\nRound 1 for refactoring tests, starting alphabetically. I added some functionality, so I wanted to send out some of these initial changes sooner.\r\n1. Start alphabetically producing serialized outputs for test functions, annotating those we want to include with `@given_and_seeded`. So far I've only added one test per operator, but this already does seem to add quite a few tests.\r\n2. Add functionality to allow us to generate outputs using pytest by adding pytest argument options. This allows us to skip adding a `__main__` function to quite a few tests.\r\n3. Catch any exceptions generating the gradient operator and skip serializing/reading it, since certain operators don't have gradients.\r\n\r\nI also noticed that there is some hypothesis handling that makes `@given_and_seeded` not compatible with adding more hypothesis decorators on top. For example, there are tests that do \r\n```\r\n@settings(...)\r\n@given(...)\r\ndef test_my_stuff(...)\r\n```\r\nBut there is a hypothesis handler that explicitly checks that `@given` is called below `@settings`, so we cannot refactor this to `@given_and_seeded`. I've just avoided decorating these kinds of tests for now, I hope that's alright."}