{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/412954664", "html_url": "https://github.com/pytorch/pytorch/pull/8371#issuecomment-412954664", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/8371", "id": 412954664, "node_id": "MDEyOklzc3VlQ29tbWVudDQxMjk1NDY2NA==", "user": {"login": "colesbury", "id": 655866, "node_id": "MDQ6VXNlcjY1NTg2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/655866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colesbury", "html_url": "https://github.com/colesbury", "followers_url": "https://api.github.com/users/colesbury/followers", "following_url": "https://api.github.com/users/colesbury/following{/other_user}", "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions", "organizations_url": "https://api.github.com/users/colesbury/orgs", "repos_url": "https://api.github.com/users/colesbury/repos", "events_url": "https://api.github.com/users/colesbury/events{/privacy}", "received_events_url": "https://api.github.com/users/colesbury/received_events", "type": "User", "site_admin": false}, "created_at": "2018-08-14T17:36:48Z", "updated_at": "2018-08-14T17:36:48Z", "author_association": "MEMBER", "body_html": "<p>I like the idea of reducing time-to-first-batch, but I don't think we should merge this PR. There seem to be two substantial changes as part of this PR:</p>\n<ol>\n<li>The indices queue is shared between workers</li>\n<li>An option to pre-load future DataLoaderIter objects</li>\n</ol>\n<p>The first change breaks determinism, which I don't think is an acceptable trade-off.</p>\n<p>The second change won't speed-up the first epoch, but may speed-up subsequent epochs. I'm not sure the extra complexity is worth it. You can get a similar effect by replicating your dataset (i.e. make each epoch 10x longer and run for 1/10 the number of epochs).</p>\n<p>I also like the idea of having the work granularity be samples instead of mini-batches, but I think there are a bunch of challenges to make that work effectively. The biggest challenge is that copying a tensor to shared memory is an expensive operation. We would probably need to change how workers communicate with the main process to make that work well.</p>", "body_text": "I like the idea of reducing time-to-first-batch, but I don't think we should merge this PR. There seem to be two substantial changes as part of this PR:\n\nThe indices queue is shared between workers\nAn option to pre-load future DataLoaderIter objects\n\nThe first change breaks determinism, which I don't think is an acceptable trade-off.\nThe second change won't speed-up the first epoch, but may speed-up subsequent epochs. I'm not sure the extra complexity is worth it. You can get a similar effect by replicating your dataset (i.e. make each epoch 10x longer and run for 1/10 the number of epochs).\nI also like the idea of having the work granularity be samples instead of mini-batches, but I think there are a bunch of challenges to make that work effectively. The biggest challenge is that copying a tensor to shared memory is an expensive operation. We would probably need to change how workers communicate with the main process to make that work well.", "body": "I like the idea of reducing time-to-first-batch, but I don't think we should merge this PR. There seem to be two substantial changes as part of this PR:\r\n\r\n1) The indices queue is shared between workers\r\n2) An option to pre-load future DataLoaderIter objects\r\n\r\nThe first change breaks determinism, which I don't think is an acceptable trade-off.\r\n\r\nThe second change won't speed-up the first epoch, but may speed-up subsequent epochs. I'm not sure the extra complexity is worth it. You can get a similar effect by replicating your dataset (i.e. make each epoch 10x longer and run for 1/10 the number of epochs).\r\n\r\nI also like the idea of having the work granularity be samples instead of mini-batches, but I think there are a bunch of challenges to make that work effectively. The biggest challenge is that copying a tensor to shared memory is an expensive operation. We would probably need to change how workers communicate with the main process to make that work well."}