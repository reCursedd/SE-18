{"url": "https://api.github.com/repos/pytorch/pytorch/issues/9392", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/9392/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/9392/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/9392/events", "html_url": "https://github.com/pytorch/pytorch/pull/9392", "id": 340731545, "node_id": "MDExOlB1bGxSZXF1ZXN0MjAxMDczODU4", "number": 9392, "title": "[JIT] Auto-batching IR transformation for control flow", "user": {"login": "ChunliF", "id": 36351432, "node_id": "MDQ6VXNlcjM2MzUxNDMy", "avatar_url": "https://avatars0.githubusercontent.com/u/36351432?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ChunliF", "html_url": "https://github.com/ChunliF", "followers_url": "https://api.github.com/users/ChunliF/followers", "following_url": "https://api.github.com/users/ChunliF/following{/other_user}", "gists_url": "https://api.github.com/users/ChunliF/gists{/gist_id}", "starred_url": "https://api.github.com/users/ChunliF/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ChunliF/subscriptions", "organizations_url": "https://api.github.com/users/ChunliF/orgs", "repos_url": "https://api.github.com/users/ChunliF/repos", "events_url": "https://api.github.com/users/ChunliF/events{/privacy}", "received_events_url": "https://api.github.com/users/ChunliF/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 679953983, "node_id": "MDU6TGFiZWw2Nzk5NTM5ODM=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/jit", "name": "jit", "color": "c5def5", "default": false}, {"id": 559719279, "node_id": "MDU6TGFiZWw1NTk3MTkyNzk=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/ready%20for%20review", "name": "ready for review", "color": "b60205", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-07-12T17:34:13Z", "updated_at": "2018-11-23T15:48:09Z", "closed_at": "2018-08-02T05:25:46Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/9392", "html_url": "https://github.com/pytorch/pytorch/pull/9392", "diff_url": "https://github.com/pytorch/pytorch/pull/9392.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/9392.patch"}, "body_html": "<p>Implement IR transformation for control flow</p>\n<ul>\n<li><code>prim::Constant</code>: clone to new graph directly</li>\n<li><code>prim::NumToTensor</code>: create a <code>BatchTensor</code> from output tensor with <code>batch_size = 1</code></li>\n<li><code>prim::TensorToNum</code>: clone to new graph</li>\n<li><code>prim::ListConstruct</code>: clone to new graph</li>\n<li><code>prim::If</code>: execute both <code>if_block</code> and <code>else_block</code> and combine results from them using <code>cond</code></li>\n<li><code>prim::Loop</code>:\n<ul>\n<li>for loop</li>\n<li>while loop: change while <code>cond</code> to <code>cond_any</code>, use <code>cond</code> to update outputs</li>\n</ul>\n</li>\n</ul>\n<p>test case: hand-written LSTM, greedy search, beam search</p>", "body_text": "Implement IR transformation for control flow\n\nprim::Constant: clone to new graph directly\nprim::NumToTensor: create a BatchTensor from output tensor with batch_size = 1\nprim::TensorToNum: clone to new graph\nprim::ListConstruct: clone to new graph\nprim::If: execute both if_block and else_block and combine results from them using cond\nprim::Loop:\n\nfor loop\nwhile loop: change while cond to cond_any, use cond to update outputs\n\n\n\ntest case: hand-written LSTM, greedy search, beam search", "body": "Implement IR transformation for control flow\r\n\r\n- `prim::Constant`: clone to new graph directly\r\n- `prim::NumToTensor`: create a `BatchTensor` from output tensor with `batch_size = 1`\r\n- `prim::TensorToNum`: clone to new graph\r\n- `prim::ListConstruct`: clone to new graph\r\n- `prim::If`: execute both `if_block` and `else_block` and combine results from them using `cond`\r\n- `prim::Loop`: \r\n  - for loop\r\n  - while loop: change while `cond` to `cond_any`, use `cond` to update outputs\r\n\r\ntest case: hand-written LSTM, greedy search, beam search"}