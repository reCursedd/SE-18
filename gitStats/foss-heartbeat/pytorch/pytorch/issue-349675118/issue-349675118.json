{"url": "https://api.github.com/repos/pytorch/pytorch/issues/10423", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/10423/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/10423/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/10423/events", "html_url": "https://github.com/pytorch/pytorch/pull/10423", "id": 349675118, "node_id": "MDExOlB1bGxSZXF1ZXN0MjA3NzM2MDcw", "number": 10423, "title": "Adds `dim` argument to `torch.unique`", "user": {"login": "ptrblck", "id": 11662379, "node_id": "MDQ6VXNlcjExNjYyMzc5", "avatar_url": "https://avatars3.githubusercontent.com/u/11662379?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptrblck", "html_url": "https://github.com/ptrblck", "followers_url": "https://api.github.com/users/ptrblck/followers", "following_url": "https://api.github.com/users/ptrblck/following{/other_user}", "gists_url": "https://api.github.com/users/ptrblck/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptrblck/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptrblck/subscriptions", "organizations_url": "https://api.github.com/users/ptrblck/orgs", "repos_url": "https://api.github.com/users/ptrblck/repos", "events_url": "https://api.github.com/users/ptrblck/events{/privacy}", "received_events_url": "https://api.github.com/users/ptrblck/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 559719279, "node_id": "MDU6TGFiZWw1NTk3MTkyNzk=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/ready%20for%20review", "name": "ready for review", "color": "b60205", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-08-10T22:28:53Z", "updated_at": "2018-11-23T15:49:28Z", "closed_at": "2018-08-29T23:27:18Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/10423", "html_url": "https://github.com/pytorch/pytorch/pull/10423", "diff_url": "https://github.com/pytorch/pytorch/pull/10423.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/10423.patch"}, "body_html": "<p>Initial version of <code>unique</code> supporting a <code>dim</code> argument.</p>\n<p>As discussed in <a href=\"https://github.com/pytorch/pytorch/issues/9997\" data-hovercard-type=\"issue\" data-hovercard-url=\"/pytorch/pytorch/issues/9997/hovercard\">this issue</a> I added the <code>dim</code> argument to <code>torch.unique</code> with the same behavior like <a href=\"https://docs.scipy.org/doc/numpy-1.14.0/reference/generated/numpy.unique.html\" rel=\"nofollow\">numpy</a>.</p>\n<p>Since the implementation is based on <code>std/thrust::unique</code>, the <code>tensor</code> always needs to be sorted. The <code>sorted</code> argument in <code>torch.unique</code> does not have any function, as in the CUDA version of the plain <code>torch.unique</code>.</p>\n<p>To check the performance and equal behavior between <code>torch.unique</code> and <code>np.unique</code>, I've used <a href=\"https://gist.github.com/ptrblck/ac0dc862f4e1766f0e1036c252cdb105\">this gist</a>.</p>\n<p>Currently we achieve the following timings for an input of <code>x = torch.randint(2, (1000, 1000))</code>:<br>\n(The values are calculated by taking the average of the times for both dimension)</p>\n<table>\n<thead>\n<tr>\n<th>Device</th>\n<th>PyTorch (return_inverse=False)</th>\n<th>Numpy (return_inverse=False)</th>\n<th>PyTorch (return_inverse=True)</th>\n<th>Numpy (return_inverse=True)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>CPU</td>\n<td>~0.007331s</td>\n<td>~0.022452s</td>\n<td>~0.011139s</td>\n<td>~0.044800s</td>\n</tr>\n<tr>\n<td>GPU</td>\n<td>~0.006154s</td>\n<td>-</td>\n<td>~0.105373s</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<p>Many thanks to <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=655866\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/colesbury\">@colesbury</a> for the awesome mentoring and the valuable advices on the general implementation and performance issues!</p>", "body_text": "Initial version of unique supporting a dim argument.\nAs discussed in this issue I added the dim argument to torch.unique with the same behavior like numpy.\nSince the implementation is based on std/thrust::unique, the tensor always needs to be sorted. The sorted argument in torch.unique does not have any function, as in the CUDA version of the plain torch.unique.\nTo check the performance and equal behavior between torch.unique and np.unique, I've used this gist.\nCurrently we achieve the following timings for an input of x = torch.randint(2, (1000, 1000)):\n(The values are calculated by taking the average of the times for both dimension)\n\n\n\nDevice\nPyTorch (return_inverse=False)\nNumpy (return_inverse=False)\nPyTorch (return_inverse=True)\nNumpy (return_inverse=True)\n\n\n\n\nCPU\n~0.007331s\n~0.022452s\n~0.011139s\n~0.044800s\n\n\nGPU\n~0.006154s\n-\n~0.105373s\n-\n\n\n\nMany thanks to @colesbury for the awesome mentoring and the valuable advices on the general implementation and performance issues!", "body": "Initial version of `unique` supporting a `dim` argument.\r\n\r\nAs discussed in [this issue](https://github.com/pytorch/pytorch/issues/9997) I added the `dim` argument to `torch.unique` with the same behavior like [numpy](https://docs.scipy.org/doc/numpy-1.14.0/reference/generated/numpy.unique.html).\r\n\r\nSince the implementation is based on `std/thrust::unique`, the `tensor` always needs to be sorted. The `sorted` argument in `torch.unique` does not have any function, as in the CUDA version of the plain `torch.unique`.\r\n\r\nTo check the performance and equal behavior between `torch.unique` and `np.unique`, I've used [this gist](https://gist.github.com/ptrblck/ac0dc862f4e1766f0e1036c252cdb105).\r\n\r\nCurrently we achieve the following timings for an input of `x = torch.randint(2, (1000, 1000))`:\r\n(The values are calculated by taking the average of the times for both dimension)\r\n\r\n| Device | PyTorch (return_inverse=False) | Numpy (return_inverse=False) | PyTorch (return_inverse=True) | Numpy (return_inverse=True) |\r\n| --- | --- | --- | --- | --- |\r\n| CPU | ~0.007331s | ~0.022452s | ~0.011139s | ~0.044800s |\r\n| GPU | ~0.006154s | - | ~0.105373s | - |\r\n\r\nMany thanks to @colesbury for the awesome mentoring and the valuable advices on the general implementation and performance issues!"}