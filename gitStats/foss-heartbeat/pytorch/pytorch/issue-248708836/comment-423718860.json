{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/423718860", "html_url": "https://github.com/pytorch/pytorch/issues/2341#issuecomment-423718860", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/2341", "id": 423718860, "node_id": "MDEyOklzc3VlQ29tbWVudDQyMzcxODg2MA==", "user": {"login": "Dehde", "id": 18052826, "node_id": "MDQ6VXNlcjE4MDUyODI2", "avatar_url": "https://avatars0.githubusercontent.com/u/18052826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dehde", "html_url": "https://github.com/Dehde", "followers_url": "https://api.github.com/users/Dehde/followers", "following_url": "https://api.github.com/users/Dehde/following{/other_user}", "gists_url": "https://api.github.com/users/Dehde/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dehde/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dehde/subscriptions", "organizations_url": "https://api.github.com/users/Dehde/orgs", "repos_url": "https://api.github.com/users/Dehde/repos", "events_url": "https://api.github.com/users/Dehde/events{/privacy}", "received_events_url": "https://api.github.com/users/Dehde/received_events", "type": "User", "site_admin": false}, "created_at": "2018-09-22T05:47:08Z", "updated_at": "2018-09-24T07:03:00Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=9998726\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/peterjc123\">@peterjc123</a><br>\nI will edit it into this post here on monday, don't have access to the code right now. Thank you!</p>\n<p>As promised, the code I use:</p>\n<p>`<br>\nif <strong>name</strong> == '<strong>main</strong>':</p>\n<pre><code>batch_size = 256\n\nsize = (128, 128)\nimage_datasets = {}\nimage_datasets[\"train\"] = WaterbodyDataset(masks=train_masks, images=train_imgs,\n                                            transform_img=transforms.Compose([\n                                                RandomCrop(size),\n                                                transforms.ToTensor(),\n                                            ]),\n                                            transform_mask=transforms.Compose([\n                                                RandomCrop(size),\n                                                transforms.ToTensor(),\n                                            ]))\n\nimage_datasets[\"val\"] = WaterbodyDataset(masks=val_masks, images=val_imgs,\n                                            transform_img=transforms.Compose([\n                                                transforms.ToTensor(),\n                                            ]),\n                                            transform_mask=transforms.Compose([\n                                                transforms.ToTensor()\n                                            ]))\n\ndataloaders = {'train': torch.utils.data.DataLoader(image_datasets['train'], batch_size=batch_size, \n                                                    shuffle=True, num_workers=1),\n               'val' : torch.utils.data.DataLoader(image_datasets['val'], batch_size=batch_size, \n                                                   shuffle=False, num_workers=1)}\n\ndataset_sizes = {x: len(image_datasets[x]) for x in ['train', 'val']}\n\nhps = HyperParams()\nhps.update(\"name=resnet34_128_deconv_pret00rained_bs32_adam_lr0.0001_wd0_pat5,\"\n           \"arch=resnet34,input_channel=4,freeze=0,deconv=1,opt=adam,debug=0,\"\n           \"weight_decay=0.0,patience=100,pretrained=1,lr=0.0001,print_freq=10,every_x_epoch_eval=1\")\npprint(attr.asdict(hps))\n\nmodel = Model(hps)\nmodel.train(dataloaders)`\n</code></pre>\n<p>The WaterbodyDataset inherits from the pytorch dataset class.</p>", "body_text": "@peterjc123\nI will edit it into this post here on monday, don't have access to the code right now. Thank you!\nAs promised, the code I use:\n`\nif name == 'main':\nbatch_size = 256\n\nsize = (128, 128)\nimage_datasets = {}\nimage_datasets[\"train\"] = WaterbodyDataset(masks=train_masks, images=train_imgs,\n                                            transform_img=transforms.Compose([\n                                                RandomCrop(size),\n                                                transforms.ToTensor(),\n                                            ]),\n                                            transform_mask=transforms.Compose([\n                                                RandomCrop(size),\n                                                transforms.ToTensor(),\n                                            ]))\n\nimage_datasets[\"val\"] = WaterbodyDataset(masks=val_masks, images=val_imgs,\n                                            transform_img=transforms.Compose([\n                                                transforms.ToTensor(),\n                                            ]),\n                                            transform_mask=transforms.Compose([\n                                                transforms.ToTensor()\n                                            ]))\n\ndataloaders = {'train': torch.utils.data.DataLoader(image_datasets['train'], batch_size=batch_size, \n                                                    shuffle=True, num_workers=1),\n               'val' : torch.utils.data.DataLoader(image_datasets['val'], batch_size=batch_size, \n                                                   shuffle=False, num_workers=1)}\n\ndataset_sizes = {x: len(image_datasets[x]) for x in ['train', 'val']}\n\nhps = HyperParams()\nhps.update(\"name=resnet34_128_deconv_pret00rained_bs32_adam_lr0.0001_wd0_pat5,\"\n           \"arch=resnet34,input_channel=4,freeze=0,deconv=1,opt=adam,debug=0,\"\n           \"weight_decay=0.0,patience=100,pretrained=1,lr=0.0001,print_freq=10,every_x_epoch_eval=1\")\npprint(attr.asdict(hps))\n\nmodel = Model(hps)\nmodel.train(dataloaders)`\n\nThe WaterbodyDataset inherits from the pytorch dataset class.", "body": "@peterjc123 \r\nI will edit it into this post here on monday, don't have access to the code right now. Thank you!\r\n\r\nAs promised, the code I use:\r\n\r\n`     \r\n    if __name__ == '__main__':\r\n   \r\n    batch_size = 256\r\n\r\n    size = (128, 128)\r\n    image_datasets = {}\r\n    image_datasets[\"train\"] = WaterbodyDataset(masks=train_masks, images=train_imgs,\r\n                                                transform_img=transforms.Compose([\r\n                                                    RandomCrop(size),\r\n                                                    transforms.ToTensor(),\r\n                                                ]),\r\n                                                transform_mask=transforms.Compose([\r\n                                                    RandomCrop(size),\r\n                                                    transforms.ToTensor(),\r\n                                                ]))\r\n\r\n    image_datasets[\"val\"] = WaterbodyDataset(masks=val_masks, images=val_imgs,\r\n                                                transform_img=transforms.Compose([\r\n                                                    transforms.ToTensor(),\r\n                                                ]),\r\n                                                transform_mask=transforms.Compose([\r\n                                                    transforms.ToTensor()\r\n                                                ]))\r\n\r\n    dataloaders = {'train': torch.utils.data.DataLoader(image_datasets['train'], batch_size=batch_size, \r\n                                                        shuffle=True, num_workers=1),\r\n                   'val' : torch.utils.data.DataLoader(image_datasets['val'], batch_size=batch_size, \r\n                                                       shuffle=False, num_workers=1)}\r\n\r\n    dataset_sizes = {x: len(image_datasets[x]) for x in ['train', 'val']}\r\n\r\n    hps = HyperParams()\r\n    hps.update(\"name=resnet34_128_deconv_pret00rained_bs32_adam_lr0.0001_wd0_pat5,\"\r\n               \"arch=resnet34,input_channel=4,freeze=0,deconv=1,opt=adam,debug=0,\"\r\n               \"weight_decay=0.0,patience=100,pretrained=1,lr=0.0001,print_freq=10,every_x_epoch_eval=1\")\r\n    pprint(attr.asdict(hps))\r\n\r\n    model = Model(hps)\r\n    model.train(dataloaders)`\r\n\r\nThe WaterbodyDataset inherits from the pytorch dataset class."}