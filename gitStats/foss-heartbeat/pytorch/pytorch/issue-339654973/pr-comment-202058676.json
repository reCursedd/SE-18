{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/202058676", "pull_request_review_id": 136680285, "id": 202058676, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMjA1ODY3Ng==", "diff_hunk": "@@ -27,6 +28,12 @@ PyObject* THPCppFunction_call(PyObject* self, PyObject* args, PyObject *kwargs)\n   }\n \n   int num_inputs = PyTuple_GET_SIZE(args);\n+  int num_inputs_required = ((THPCppFunction*)self)->cdata->num_inputs();\n+  std::string self_name = ((THPCppFunction*)self)->cdata->name();\n+  if ((self_name.find(\"Error\") == std::string::npos) && (num_inputs != num_inputs_required)) {", "path": "torch/csrc/autograd/python_cpp_function.cpp", "position": null, "original_position": 14, "commit_id": "33a56d7f283f49ed3970e9c8abc6026c5da1ba7d", "original_commit_id": "3b81072fbc80def3e272f76900585acc86873eda", "user": {"login": "vishwakftw", "id": 23639302, "node_id": "MDQ6VXNlcjIzNjM5MzAy", "avatar_url": "https://avatars2.githubusercontent.com/u/23639302?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vishwakftw", "html_url": "https://github.com/vishwakftw", "followers_url": "https://api.github.com/users/vishwakftw/followers", "following_url": "https://api.github.com/users/vishwakftw/following{/other_user}", "gists_url": "https://api.github.com/users/vishwakftw/gists{/gist_id}", "starred_url": "https://api.github.com/users/vishwakftw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vishwakftw/subscriptions", "organizations_url": "https://api.github.com/users/vishwakftw/orgs", "repos_url": "https://api.github.com/users/vishwakftw/repos", "events_url": "https://api.github.com/users/vishwakftw/events{/privacy}", "received_events_url": "https://api.github.com/users/vishwakftw/received_events", "type": "User", "site_admin": false}, "body": "There are two solutions based on the latter way (number of inputs in the constructor):\r\n1. This solution might require making `num_inputs()` `virtual`. Add `input_nr` and return `input_nr` when `num_inputs()` is called.\r\n2. This solution might require adding metadata, but without making `num_inputs()` virtual. Emplace `input_nr` times into `input_metadata` so that the return value of `num_inputs()` matches `input_nr`.\r\n\r\nWhich one do you think is better?", "created_at": "2018-07-12T14:36:26Z", "updated_at": "2018-11-23T15:47:13Z", "html_url": "https://github.com/pytorch/pytorch/pull/9292#discussion_r202058676", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/9292", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/202058676"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/9292#discussion_r202058676"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/9292"}}, "body_html": "<p>There are two solutions based on the latter way (number of inputs in the constructor):</p>\n<ol>\n<li>This solution might require making <code>num_inputs()</code> <code>virtual</code>. Add <code>input_nr</code> and return <code>input_nr</code> when <code>num_inputs()</code> is called.</li>\n<li>This solution might require adding metadata, but without making <code>num_inputs()</code> virtual. Emplace <code>input_nr</code> times into <code>input_metadata</code> so that the return value of <code>num_inputs()</code> matches <code>input_nr</code>.</li>\n</ol>\n<p>Which one do you think is better?</p>", "body_text": "There are two solutions based on the latter way (number of inputs in the constructor):\n\nThis solution might require making num_inputs() virtual. Add input_nr and return input_nr when num_inputs() is called.\nThis solution might require adding metadata, but without making num_inputs() virtual. Emplace input_nr times into input_metadata so that the return value of num_inputs() matches input_nr.\n\nWhich one do you think is better?", "in_reply_to_id": 202050828}