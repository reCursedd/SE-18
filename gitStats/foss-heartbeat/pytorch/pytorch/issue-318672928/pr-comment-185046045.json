{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/185046045", "pull_request_review_id": 116359596, "id": 185046045, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NTA0NjA0NQ==", "diff_hunk": "@@ -0,0 +1,81 @@\n+from __future__ import division\n+from __future__ import print_function\n+\n+import argparse\n+import gzip\n+import os\n+import sys\n+import urllib\n+\n+try:\n+    from urllib.error import URLError\n+    from urllib.request import urlretrieve\n+except ImportError:\n+    from urllib2 import URLError\n+    from urllib import urlretrieve\n+\n+RESOURCES = [\n+    'train-images-idx3-ubyte.gz',\n+    'train-labels-idx1-ubyte.gz',\n+    't10k-images-idx3-ubyte.gz',\n+    't10k-labels-idx1-ubyte.gz',\n+]\n+\n+\n+def report_download_progress(chunk_number, chunk_size, file_size):\n+    if file_size != -1:\n+        percent = min(1, (chunk_number * chunk_size) / file_size)\n+        bar = '#' * int(64 * percent)\n+        sys.stdout.write('\\r0% |{:<64}| {}%'.format(bar, int(percent * 100)))\n+\n+\n+def download(destination_path, url):\n+    if os.path.exists(destination_path):\n+        print('{} already exists, skipping ...'.format(destination_path))\n+    else:\n+        print('Downloading {} ...'.format(url))\n+        try:\n+            urlretrieve(\n+                url, destination_path, reporthook=report_download_progress)\n+        except URLError:\n+            raise RuntimeError('Error downloading resource!')\n+        finally:\n+            # Just a newline.\n+            print()\n+\n+\n+def unzip(zipped_path):\n+    unzipped_path = os.path.splitext(zipped_path)[0]\n+    if os.path.exists(unzipped_path):\n+        print('{} already exists, skipping ... '.format(unzipped_path))\n+        return\n+    with gzip.open(zipped_path, 'rb') as zipped_file:\n+        with open(unzipped_path, 'wb') as unzipped_file:\n+            unzipped_file.write(zipped_file.read())\n+            print('Unzipped {} ...'.format(zipped_path))\n+\n+\n+def main():\n+    parser = argparse.ArgumentParser(\n+        description='Download the MNIST dataset from the internet')\n+    parser.add_argument(\n+        '-d', '--destination', default='.', help='Destination directory')\n+    options = parser.parse_args()\n+\n+    if not os.path.exists(options.destination):\n+        os.makedirs(options.destination)\n+\n+    try:\n+        for resource in RESOURCES:\n+            path = os.path.join(options.destination, resource)\n+            url = 'http://yann.lecun.com/exdb/mnist/{}'.format(resource)\n+            download(path, url)\n+            unzip(path)\n+    except KeyboardInterrupt:\n+        print('Interrupted')\n+\n+    print('Done')\n+\n+\n+if __name__ == '__main__':", "path": "tools/download_mnist.py", "position": 80, "original_position": 80, "commit_id": "7f9494e072c6bfd2bad27570d9f9557c22ea46c1", "original_commit_id": "7f9494e072c6bfd2bad27570d9f9557c22ea46c1", "user": {"login": "goldsborough", "id": 6429851, "node_id": "MDQ6VXNlcjY0Mjk4NTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/6429851?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goldsborough", "html_url": "https://github.com/goldsborough", "followers_url": "https://api.github.com/users/goldsborough/followers", "following_url": "https://api.github.com/users/goldsborough/following{/other_user}", "gists_url": "https://api.github.com/users/goldsborough/gists{/gist_id}", "starred_url": "https://api.github.com/users/goldsborough/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goldsborough/subscriptions", "organizations_url": "https://api.github.com/users/goldsborough/orgs", "repos_url": "https://api.github.com/users/goldsborough/repos", "events_url": "https://api.github.com/users/goldsborough/events{/privacy}", "received_events_url": "https://api.github.com/users/goldsborough/received_events", "type": "User", "site_admin": false}, "body": "I saw that we could do it with `torchvision`, but wanted to avoid having to `pip install torchvision`. @ebetica can you comment on whether we need MNIST for the integration test", "created_at": "2018-04-30T17:00:43Z", "updated_at": "2018-11-23T15:43:26Z", "html_url": "https://github.com/pytorch/pytorch/pull/7074#discussion_r185046045", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/7074", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/185046045"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/7074#discussion_r185046045"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/7074"}}, "body_html": "<p>I saw that we could do it with <code>torchvision</code>, but wanted to avoid having to <code>pip install torchvision</code>. <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=3605224\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ebetica\">@ebetica</a> can you comment on whether we need MNIST for the integration test</p>", "body_text": "I saw that we could do it with torchvision, but wanted to avoid having to pip install torchvision. @ebetica can you comment on whether we need MNIST for the integration test", "in_reply_to_id": 184932329}