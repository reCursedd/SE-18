{"url": "https://api.github.com/repos/pytorch/pytorch/issues/9067", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/9067/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/9067/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/9067/events", "html_url": "https://github.com/pytorch/pytorch/issues/9067", "id": 337229803, "node_id": "MDU6SXNzdWUzMzcyMjk4MDM=", "number": 9067, "title": "[jit] gen_jit_dispatch generates duplicate \"descriptor\"s", "user": {"login": "SsnL", "id": 5674597, "node_id": "MDQ6VXNlcjU2NzQ1OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5674597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SsnL", "html_url": "https://github.com/SsnL", "followers_url": "https://api.github.com/users/SsnL/followers", "following_url": "https://api.github.com/users/SsnL/following{/other_user}", "gists_url": "https://api.github.com/users/SsnL/gists{/gist_id}", "starred_url": "https://api.github.com/users/SsnL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SsnL/subscriptions", "organizations_url": "https://api.github.com/users/SsnL/orgs", "repos_url": "https://api.github.com/users/SsnL/repos", "events_url": "https://api.github.com/users/SsnL/events{/privacy}", "received_events_url": "https://api.github.com/users/SsnL/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 679953983, "node_id": "MDU6TGFiZWw2Nzk5NTM5ODM=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/jit", "name": "jit", "color": "c5def5", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-06-30T17:20:19Z", "updated_at": "2018-07-26T17:52:03Z", "closed_at": "2018-07-26T17:52:03Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Both following native tensor factory function entries generate same <code>descriptor</code> (<code>\"bernoulli-5\"</code>):</p>\n<div class=\"highlight highlight-source-yaml\"><pre>- <span class=\"pl-ent\">func</span>: <span class=\"pl-s\">bernoulli(IntList size, Tensor p, *, TensorOptions options={}) -&gt; Tensor</span>\n  <span class=\"pl-ent\">variants</span>: <span class=\"pl-s\">function</span>\n\n- <span class=\"pl-ent\">func</span>: <span class=\"pl-s\">bernoulli(IntList size, double p, *, TensorOptions options={}) -&gt; Tensor</span>\n  <span class=\"pl-ent\">variants</span>: <span class=\"pl-s\">function</span></pre></div>\n<p>The corresponding <code>decl</code>s are</p>\n<div class=\"highlight highlight-source-python\"><pre>{<span class=\"pl-s\"><span class=\"pl-pds\">'</span>abstract<span class=\"pl-pds\">'</span></span>: <span class=\"pl-c1\">False</span>,\n <span class=\"pl-s\"><span class=\"pl-pds\">'</span>api_name<span class=\"pl-pds\">'</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>bernoulli<span class=\"pl-pds\">'</span></span>,\n <span class=\"pl-s\"><span class=\"pl-pds\">'</span>args<span class=\"pl-pds\">'</span></span>: [<span class=\"pl-s\"><span class=\"pl-pds\">'</span>size<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>p<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>options<span class=\"pl-pds\">'</span></span>],\n <span class=\"pl-s\"><span class=\"pl-pds\">'</span>arguments<span class=\"pl-pds\">'</span></span>: [{<span class=\"pl-s\"><span class=\"pl-pds\">'</span>dynamic_type<span class=\"pl-pds\">'</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>IntList<span class=\"pl-pds\">'</span></span>,\n                <span class=\"pl-s\"><span class=\"pl-pds\">'</span>is_nullable<span class=\"pl-pds\">'</span></span>: <span class=\"pl-c1\">False</span>,\n                <span class=\"pl-s\"><span class=\"pl-pds\">'</span>name<span class=\"pl-pds\">'</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>size<span class=\"pl-pds\">'</span></span>,\n                <span class=\"pl-s\"><span class=\"pl-pds\">'</span>simple_type<span class=\"pl-pds\">'</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>IntList<span class=\"pl-pds\">'</span></span>,\n                <span class=\"pl-s\"><span class=\"pl-pds\">'</span>type<span class=\"pl-pds\">'</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>IntList<span class=\"pl-pds\">'</span></span>},\n               {<span class=\"pl-s\"><span class=\"pl-pds\">'</span>dynamic_type<span class=\"pl-pds\">'</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>Tensor<span class=\"pl-pds\">'</span></span>,\n                <span class=\"pl-s\"><span class=\"pl-pds\">'</span>is_nullable<span class=\"pl-pds\">'</span></span>: <span class=\"pl-c1\">False</span>,\n                <span class=\"pl-s\"><span class=\"pl-pds\">'</span>name<span class=\"pl-pds\">'</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>p<span class=\"pl-pds\">'</span></span>,\n                <span class=\"pl-s\"><span class=\"pl-pds\">'</span>simple_type<span class=\"pl-pds\">'</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>Tensor<span class=\"pl-pds\">'</span></span>,\n                <span class=\"pl-s\"><span class=\"pl-pds\">'</span>type<span class=\"pl-pds\">'</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>const Tensor &amp;<span class=\"pl-pds\">'</span></span>},\n               {<span class=\"pl-s\"><span class=\"pl-pds\">'</span>default<span class=\"pl-pds\">'</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>static_cast&lt;int64_t&gt;(at::kFloat)<span class=\"pl-pds\">'</span></span>,\n                <span class=\"pl-s\"><span class=\"pl-pds\">'</span>name<span class=\"pl-pds\">'</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>dtype<span class=\"pl-pds\">'</span></span>,\n                <span class=\"pl-s\"><span class=\"pl-pds\">'</span>simple_type<span class=\"pl-pds\">'</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>int64_t<span class=\"pl-pds\">'</span></span>},\n               {<span class=\"pl-s\"><span class=\"pl-pds\">'</span>default<span class=\"pl-pds\">'</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>{static_cast&lt;int64_t&gt;(at::Device::Type::CPU), -1}<span class=\"pl-pds\">'</span></span>,\n                <span class=\"pl-s\"><span class=\"pl-pds\">'</span>name<span class=\"pl-pds\">'</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>device<span class=\"pl-pds\">'</span></span>,\n                <span class=\"pl-s\"><span class=\"pl-pds\">'</span>simple_type<span class=\"pl-pds\">'</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>IntList<span class=\"pl-pds\">'</span></span>},\n               {<span class=\"pl-s\"><span class=\"pl-pds\">'</span>default<span class=\"pl-pds\">'</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>static_cast&lt;int64_t&gt;(at::kStrided)<span class=\"pl-pds\">'</span></span>,\n                <span class=\"pl-s\"><span class=\"pl-pds\">'</span>name<span class=\"pl-pds\">'</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>layout<span class=\"pl-pds\">'</span></span>,\n                <span class=\"pl-s\"><span class=\"pl-pds\">'</span>simple_type<span class=\"pl-pds\">'</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>int64_t<span class=\"pl-pds\">'</span></span>}],\n <span class=\"pl-s\"><span class=\"pl-pds\">'</span>base_name<span class=\"pl-pds\">'</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>bernoulli<span class=\"pl-pds\">'</span></span>,\n <span class=\"pl-s\"><span class=\"pl-pds\">'</span>deprecated<span class=\"pl-pds\">'</span></span>: <span class=\"pl-c1\">False</span>,\n <span class=\"pl-s\"><span class=\"pl-pds\">'</span>device_guard<span class=\"pl-pds\">'</span></span>: <span class=\"pl-c1\">True</span>,\n <span class=\"pl-s\"><span class=\"pl-pds\">'</span>formals<span class=\"pl-pds\">'</span></span>: [<span class=\"pl-s\"><span class=\"pl-pds\">'</span>IntList size<span class=\"pl-pds\">'</span></span>,\n             <span class=\"pl-s\"><span class=\"pl-pds\">'</span>const Tensor &amp; p<span class=\"pl-pds\">'</span></span>,\n             <span class=\"pl-s\"><span class=\"pl-pds\">'</span>const TensorOptions &amp; options<span class=\"pl-pds\">'</span></span>],\n <span class=\"pl-s\"><span class=\"pl-pds\">'</span>has_tensor_options<span class=\"pl-pds\">'</span></span>: <span class=\"pl-c1\">True</span>,\n <span class=\"pl-s\"><span class=\"pl-pds\">'</span>inplace<span class=\"pl-pds\">'</span></span>: <span class=\"pl-c1\">False</span>,\n <span class=\"pl-s\"><span class=\"pl-pds\">'</span>method_of<span class=\"pl-pds\">'</span></span>: [<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Type<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>namespace<span class=\"pl-pds\">'</span></span>],\n <span class=\"pl-s\"><span class=\"pl-pds\">'</span>method_prefix_derived<span class=\"pl-pds\">'</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">'</span><span class=\"pl-pds\">'</span></span>,\n <span class=\"pl-s\"><span class=\"pl-pds\">'</span>mode<span class=\"pl-pds\">'</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>native<span class=\"pl-pds\">'</span></span>,\n <span class=\"pl-s\"><span class=\"pl-pds\">'</span>name<span class=\"pl-pds\">'</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>bernoulli<span class=\"pl-pds\">'</span></span>,\n <span class=\"pl-s\"><span class=\"pl-pds\">'</span>return_type<span class=\"pl-pds\">'</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>Tensor<span class=\"pl-pds\">'</span></span>,\n <span class=\"pl-s\"><span class=\"pl-pds\">'</span>returns<span class=\"pl-pds\">'</span></span>: [{<span class=\"pl-s\"><span class=\"pl-pds\">'</span>dynamic_type<span class=\"pl-pds\">'</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>Tensor<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>name<span class=\"pl-pds\">'</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>result<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>type<span class=\"pl-pds\">'</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>Tensor<span class=\"pl-pds\">'</span></span>}],\n <span class=\"pl-s\"><span class=\"pl-pds\">'</span>type_method_args<span class=\"pl-pds\">'</span></span>: [<span class=\"pl-s\"><span class=\"pl-pds\">'</span>size<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>p<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>options<span class=\"pl-pds\">'</span></span>],\n <span class=\"pl-s\"><span class=\"pl-pds\">'</span>type_method_formals<span class=\"pl-pds\">'</span></span>: [<span class=\"pl-s\"><span class=\"pl-pds\">'</span>IntList size<span class=\"pl-pds\">'</span></span>,\n                         <span class=\"pl-s\"><span class=\"pl-pds\">'</span>const Tensor &amp; p<span class=\"pl-pds\">'</span></span>,\n                         <span class=\"pl-s\"><span class=\"pl-pds\">'</span>const TensorOptions &amp; options<span class=\"pl-pds\">'</span></span>],\n <span class=\"pl-s\"><span class=\"pl-pds\">'</span>with_gil<span class=\"pl-pds\">'</span></span>: <span class=\"pl-c1\">False</span>}</pre></div>\n<p>and</p>\n<div class=\"highlight highlight-source-python\"><pre>{<span class=\"pl-s\"><span class=\"pl-pds\">'</span>abstract<span class=\"pl-pds\">'</span></span>: <span class=\"pl-c1\">False</span>,\n <span class=\"pl-s\"><span class=\"pl-pds\">'</span>api_name<span class=\"pl-pds\">'</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>bernoulli<span class=\"pl-pds\">'</span></span>,\n <span class=\"pl-s\"><span class=\"pl-pds\">'</span>args<span class=\"pl-pds\">'</span></span>: [<span class=\"pl-s\"><span class=\"pl-pds\">'</span>size<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>p<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>options<span class=\"pl-pds\">'</span></span>],\n <span class=\"pl-s\"><span class=\"pl-pds\">'</span>arguments<span class=\"pl-pds\">'</span></span>: [{<span class=\"pl-s\"><span class=\"pl-pds\">'</span>dynamic_type<span class=\"pl-pds\">'</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>IntList<span class=\"pl-pds\">'</span></span>,\n                <span class=\"pl-s\"><span class=\"pl-pds\">'</span>is_nullable<span class=\"pl-pds\">'</span></span>: <span class=\"pl-c1\">False</span>,\n                <span class=\"pl-s\"><span class=\"pl-pds\">'</span>name<span class=\"pl-pds\">'</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>size<span class=\"pl-pds\">'</span></span>,\n                <span class=\"pl-s\"><span class=\"pl-pds\">'</span>simple_type<span class=\"pl-pds\">'</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>IntList<span class=\"pl-pds\">'</span></span>,\n                <span class=\"pl-s\"><span class=\"pl-pds\">'</span>type<span class=\"pl-pds\">'</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>IntList<span class=\"pl-pds\">'</span></span>},\n               {<span class=\"pl-s\"><span class=\"pl-pds\">'</span>dynamic_type<span class=\"pl-pds\">'</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>double<span class=\"pl-pds\">'</span></span>,\n                <span class=\"pl-s\"><span class=\"pl-pds\">'</span>is_nullable<span class=\"pl-pds\">'</span></span>: <span class=\"pl-c1\">False</span>,\n                <span class=\"pl-s\"><span class=\"pl-pds\">'</span>name<span class=\"pl-pds\">'</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>p<span class=\"pl-pds\">'</span></span>,\n                <span class=\"pl-s\"><span class=\"pl-pds\">'</span>simple_type<span class=\"pl-pds\">'</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>double<span class=\"pl-pds\">'</span></span>,\n                <span class=\"pl-s\"><span class=\"pl-pds\">'</span>type<span class=\"pl-pds\">'</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>double<span class=\"pl-pds\">'</span></span>},\n               {<span class=\"pl-s\"><span class=\"pl-pds\">'</span>default<span class=\"pl-pds\">'</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>static_cast&lt;int64_t&gt;(at::kFloat)<span class=\"pl-pds\">'</span></span>,\n                <span class=\"pl-s\"><span class=\"pl-pds\">'</span>name<span class=\"pl-pds\">'</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>dtype<span class=\"pl-pds\">'</span></span>,\n                <span class=\"pl-s\"><span class=\"pl-pds\">'</span>simple_type<span class=\"pl-pds\">'</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>int64_t<span class=\"pl-pds\">'</span></span>},\n               {<span class=\"pl-s\"><span class=\"pl-pds\">'</span>default<span class=\"pl-pds\">'</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>{static_cast&lt;int64_t&gt;(at::Device::Type::CPU), -1}<span class=\"pl-pds\">'</span></span>,\n                <span class=\"pl-s\"><span class=\"pl-pds\">'</span>name<span class=\"pl-pds\">'</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>device<span class=\"pl-pds\">'</span></span>,\n                <span class=\"pl-s\"><span class=\"pl-pds\">'</span>simple_type<span class=\"pl-pds\">'</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>IntList<span class=\"pl-pds\">'</span></span>},\n               {<span class=\"pl-s\"><span class=\"pl-pds\">'</span>default<span class=\"pl-pds\">'</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>static_cast&lt;int64_t&gt;(at::kStrided)<span class=\"pl-pds\">'</span></span>,\n                <span class=\"pl-s\"><span class=\"pl-pds\">'</span>name<span class=\"pl-pds\">'</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>layout<span class=\"pl-pds\">'</span></span>,\n                <span class=\"pl-s\"><span class=\"pl-pds\">'</span>simple_type<span class=\"pl-pds\">'</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>int64_t<span class=\"pl-pds\">'</span></span>}],\n <span class=\"pl-s\"><span class=\"pl-pds\">'</span>base_name<span class=\"pl-pds\">'</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>bernoulli<span class=\"pl-pds\">'</span></span>,\n <span class=\"pl-s\"><span class=\"pl-pds\">'</span>deprecated<span class=\"pl-pds\">'</span></span>: <span class=\"pl-c1\">False</span>,\n <span class=\"pl-s\"><span class=\"pl-pds\">'</span>device_guard<span class=\"pl-pds\">'</span></span>: <span class=\"pl-c1\">True</span>,\n <span class=\"pl-s\"><span class=\"pl-pds\">'</span>formals<span class=\"pl-pds\">'</span></span>: [<span class=\"pl-s\"><span class=\"pl-pds\">'</span>IntList size<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>double p<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>const TensorOptions &amp; options<span class=\"pl-pds\">'</span></span>],\n <span class=\"pl-s\"><span class=\"pl-pds\">'</span>has_tensor_options<span class=\"pl-pds\">'</span></span>: <span class=\"pl-c1\">True</span>,\n <span class=\"pl-s\"><span class=\"pl-pds\">'</span>inplace<span class=\"pl-pds\">'</span></span>: <span class=\"pl-c1\">False</span>,\n <span class=\"pl-s\"><span class=\"pl-pds\">'</span>method_of<span class=\"pl-pds\">'</span></span>: [<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Type<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>namespace<span class=\"pl-pds\">'</span></span>],\n <span class=\"pl-s\"><span class=\"pl-pds\">'</span>method_prefix_derived<span class=\"pl-pds\">'</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">'</span><span class=\"pl-pds\">'</span></span>,\n <span class=\"pl-s\"><span class=\"pl-pds\">'</span>mode<span class=\"pl-pds\">'</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>native<span class=\"pl-pds\">'</span></span>,\n <span class=\"pl-s\"><span class=\"pl-pds\">'</span>name<span class=\"pl-pds\">'</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>bernoulli<span class=\"pl-pds\">'</span></span>,\n <span class=\"pl-s\"><span class=\"pl-pds\">'</span>return_type<span class=\"pl-pds\">'</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>Tensor<span class=\"pl-pds\">'</span></span>,\n <span class=\"pl-s\"><span class=\"pl-pds\">'</span>returns<span class=\"pl-pds\">'</span></span>: [{<span class=\"pl-s\"><span class=\"pl-pds\">'</span>dynamic_type<span class=\"pl-pds\">'</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>Tensor<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>name<span class=\"pl-pds\">'</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>result<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>type<span class=\"pl-pds\">'</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>Tensor<span class=\"pl-pds\">'</span></span>}],\n <span class=\"pl-s\"><span class=\"pl-pds\">'</span>type_method_args<span class=\"pl-pds\">'</span></span>: [<span class=\"pl-s\"><span class=\"pl-pds\">'</span>size<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>p<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>options<span class=\"pl-pds\">'</span></span>],\n <span class=\"pl-s\"><span class=\"pl-pds\">'</span>type_method_formals<span class=\"pl-pds\">'</span></span>: [<span class=\"pl-s\"><span class=\"pl-pds\">'</span>IntList size<span class=\"pl-pds\">'</span></span>,\n                         <span class=\"pl-s\"><span class=\"pl-pds\">'</span>double p<span class=\"pl-pds\">'</span></span>,\n                         <span class=\"pl-s\"><span class=\"pl-pds\">'</span>const TensorOptions &amp; options<span class=\"pl-pds\">'</span></span>],\n <span class=\"pl-s\"><span class=\"pl-pds\">'</span>with_gil<span class=\"pl-pds\">'</span></span>: <span class=\"pl-c1\">False</span>}</pre></div>", "body_text": "Both following native tensor factory function entries generate same descriptor (\"bernoulli-5\"):\n- func: bernoulli(IntList size, Tensor p, *, TensorOptions options={}) -> Tensor\n  variants: function\n\n- func: bernoulli(IntList size, double p, *, TensorOptions options={}) -> Tensor\n  variants: function\nThe corresponding decls are\n{'abstract': False,\n 'api_name': 'bernoulli',\n 'args': ['size', 'p', 'options'],\n 'arguments': [{'dynamic_type': 'IntList',\n                'is_nullable': False,\n                'name': 'size',\n                'simple_type': 'IntList',\n                'type': 'IntList'},\n               {'dynamic_type': 'Tensor',\n                'is_nullable': False,\n                'name': 'p',\n                'simple_type': 'Tensor',\n                'type': 'const Tensor &'},\n               {'default': 'static_cast<int64_t>(at::kFloat)',\n                'name': 'dtype',\n                'simple_type': 'int64_t'},\n               {'default': '{static_cast<int64_t>(at::Device::Type::CPU), -1}',\n                'name': 'device',\n                'simple_type': 'IntList'},\n               {'default': 'static_cast<int64_t>(at::kStrided)',\n                'name': 'layout',\n                'simple_type': 'int64_t'}],\n 'base_name': 'bernoulli',\n 'deprecated': False,\n 'device_guard': True,\n 'formals': ['IntList size',\n             'const Tensor & p',\n             'const TensorOptions & options'],\n 'has_tensor_options': True,\n 'inplace': False,\n 'method_of': ['Type', 'namespace'],\n 'method_prefix_derived': '',\n 'mode': 'native',\n 'name': 'bernoulli',\n 'return_type': 'Tensor',\n 'returns': [{'dynamic_type': 'Tensor', 'name': 'result', 'type': 'Tensor'}],\n 'type_method_args': ['size', 'p', 'options'],\n 'type_method_formals': ['IntList size',\n                         'const Tensor & p',\n                         'const TensorOptions & options'],\n 'with_gil': False}\nand\n{'abstract': False,\n 'api_name': 'bernoulli',\n 'args': ['size', 'p', 'options'],\n 'arguments': [{'dynamic_type': 'IntList',\n                'is_nullable': False,\n                'name': 'size',\n                'simple_type': 'IntList',\n                'type': 'IntList'},\n               {'dynamic_type': 'double',\n                'is_nullable': False,\n                'name': 'p',\n                'simple_type': 'double',\n                'type': 'double'},\n               {'default': 'static_cast<int64_t>(at::kFloat)',\n                'name': 'dtype',\n                'simple_type': 'int64_t'},\n               {'default': '{static_cast<int64_t>(at::Device::Type::CPU), -1}',\n                'name': 'device',\n                'simple_type': 'IntList'},\n               {'default': 'static_cast<int64_t>(at::kStrided)',\n                'name': 'layout',\n                'simple_type': 'int64_t'}],\n 'base_name': 'bernoulli',\n 'deprecated': False,\n 'device_guard': True,\n 'formals': ['IntList size', 'double p', 'const TensorOptions & options'],\n 'has_tensor_options': True,\n 'inplace': False,\n 'method_of': ['Type', 'namespace'],\n 'method_prefix_derived': '',\n 'mode': 'native',\n 'name': 'bernoulli',\n 'return_type': 'Tensor',\n 'returns': [{'dynamic_type': 'Tensor', 'name': 'result', 'type': 'Tensor'}],\n 'type_method_args': ['size', 'p', 'options'],\n 'type_method_formals': ['IntList size',\n                         'double p',\n                         'const TensorOptions & options'],\n 'with_gil': False}", "body": "Both following native tensor factory function entries generate same `descriptor` (`\"bernoulli-5\"`):\r\n```yaml\r\n- func: bernoulli(IntList size, Tensor p, *, TensorOptions options={}) -> Tensor\r\n  variants: function\r\n\r\n- func: bernoulli(IntList size, double p, *, TensorOptions options={}) -> Tensor\r\n  variants: function\r\n```\r\n\r\nThe corresponding `decl`s are\r\n```py\r\n{'abstract': False,\r\n 'api_name': 'bernoulli',\r\n 'args': ['size', 'p', 'options'],\r\n 'arguments': [{'dynamic_type': 'IntList',\r\n                'is_nullable': False,\r\n                'name': 'size',\r\n                'simple_type': 'IntList',\r\n                'type': 'IntList'},\r\n               {'dynamic_type': 'Tensor',\r\n                'is_nullable': False,\r\n                'name': 'p',\r\n                'simple_type': 'Tensor',\r\n                'type': 'const Tensor &'},\r\n               {'default': 'static_cast<int64_t>(at::kFloat)',\r\n                'name': 'dtype',\r\n                'simple_type': 'int64_t'},\r\n               {'default': '{static_cast<int64_t>(at::Device::Type::CPU), -1}',\r\n                'name': 'device',\r\n                'simple_type': 'IntList'},\r\n               {'default': 'static_cast<int64_t>(at::kStrided)',\r\n                'name': 'layout',\r\n                'simple_type': 'int64_t'}],\r\n 'base_name': 'bernoulli',\r\n 'deprecated': False,\r\n 'device_guard': True,\r\n 'formals': ['IntList size',\r\n             'const Tensor & p',\r\n             'const TensorOptions & options'],\r\n 'has_tensor_options': True,\r\n 'inplace': False,\r\n 'method_of': ['Type', 'namespace'],\r\n 'method_prefix_derived': '',\r\n 'mode': 'native',\r\n 'name': 'bernoulli',\r\n 'return_type': 'Tensor',\r\n 'returns': [{'dynamic_type': 'Tensor', 'name': 'result', 'type': 'Tensor'}],\r\n 'type_method_args': ['size', 'p', 'options'],\r\n 'type_method_formals': ['IntList size',\r\n                         'const Tensor & p',\r\n                         'const TensorOptions & options'],\r\n 'with_gil': False}\r\n```\r\nand \r\n```py\r\n{'abstract': False,\r\n 'api_name': 'bernoulli',\r\n 'args': ['size', 'p', 'options'],\r\n 'arguments': [{'dynamic_type': 'IntList',\r\n                'is_nullable': False,\r\n                'name': 'size',\r\n                'simple_type': 'IntList',\r\n                'type': 'IntList'},\r\n               {'dynamic_type': 'double',\r\n                'is_nullable': False,\r\n                'name': 'p',\r\n                'simple_type': 'double',\r\n                'type': 'double'},\r\n               {'default': 'static_cast<int64_t>(at::kFloat)',\r\n                'name': 'dtype',\r\n                'simple_type': 'int64_t'},\r\n               {'default': '{static_cast<int64_t>(at::Device::Type::CPU), -1}',\r\n                'name': 'device',\r\n                'simple_type': 'IntList'},\r\n               {'default': 'static_cast<int64_t>(at::kStrided)',\r\n                'name': 'layout',\r\n                'simple_type': 'int64_t'}],\r\n 'base_name': 'bernoulli',\r\n 'deprecated': False,\r\n 'device_guard': True,\r\n 'formals': ['IntList size', 'double p', 'const TensorOptions & options'],\r\n 'has_tensor_options': True,\r\n 'inplace': False,\r\n 'method_of': ['Type', 'namespace'],\r\n 'method_prefix_derived': '',\r\n 'mode': 'native',\r\n 'name': 'bernoulli',\r\n 'return_type': 'Tensor',\r\n 'returns': [{'dynamic_type': 'Tensor', 'name': 'result', 'type': 'Tensor'}],\r\n 'type_method_args': ['size', 'p', 'options'],\r\n 'type_method_formals': ['IntList size',\r\n                         'double p',\r\n                         'const TensorOptions & options'],\r\n 'with_gil': False}\r\n```"}