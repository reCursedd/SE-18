{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/383524438", "html_url": "https://github.com/pytorch/pytorch/pull/6854#issuecomment-383524438", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/6854", "id": 383524438, "node_id": "MDEyOklzc3VlQ29tbWVudDM4MzUyNDQzOA==", "user": {"login": "bstriner", "id": 12462956, "node_id": "MDQ6VXNlcjEyNDYyOTU2", "avatar_url": "https://avatars3.githubusercontent.com/u/12462956?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bstriner", "html_url": "https://github.com/bstriner", "followers_url": "https://api.github.com/users/bstriner/followers", "following_url": "https://api.github.com/users/bstriner/following{/other_user}", "gists_url": "https://api.github.com/users/bstriner/gists{/gist_id}", "starred_url": "https://api.github.com/users/bstriner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bstriner/subscriptions", "organizations_url": "https://api.github.com/users/bstriner/orgs", "repos_url": "https://api.github.com/users/bstriner/repos", "events_url": "https://api.github.com/users/bstriner/events{/privacy}", "received_events_url": "https://api.github.com/users/bstriner/received_events", "type": "User", "site_admin": false}, "created_at": "2018-04-23T10:10:19Z", "updated_at": "2018-04-23T10:10:19Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=9998726\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/peterjc123\">@peterjc123</a> Thanks for the quick response! I think I got all the fixes in. Waiting for CI to see what worked.</p>\n<p>My two real concerns:</p>\n<ul>\n<li>hashing is ambiguous if something has both std:hash and T::hash. I disambiguated one way but maybe there is something better.</li>\n<li>that weird thing with operator=. Not sure where it is coming in or if the fact that it is being called itself is the issue. Alternative solution would be to leave the ints as consts, define operator=, and make calling it a runtime error. I'm curious if that is ever used.</li>\n</ul>", "body_text": "@peterjc123 Thanks for the quick response! I think I got all the fixes in. Waiting for CI to see what worked.\nMy two real concerns:\n\nhashing is ambiguous if something has both std:hash and T::hash. I disambiguated one way but maybe there is something better.\nthat weird thing with operator=. Not sure where it is coming in or if the fact that it is being called itself is the issue. Alternative solution would be to leave the ints as consts, define operator=, and make calling it a runtime error. I'm curious if that is ever used.", "body": "@peterjc123 Thanks for the quick response! I think I got all the fixes in. Waiting for CI to see what worked.\r\n\r\nMy two real concerns:\r\n- hashing is ambiguous if something has both std:hash and T::hash. I disambiguated one way but maybe there is something better.\r\n- that weird thing with operator=. Not sure where it is coming in or if the fact that it is being called itself is the issue. Alternative solution would be to leave the ints as consts, define operator=, and make calling it a runtime error. I'm curious if that is ever used."}