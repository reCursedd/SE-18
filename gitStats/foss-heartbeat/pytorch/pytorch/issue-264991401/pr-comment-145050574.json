{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/145050574", "pull_request_review_id": 69791216, "id": 145050574, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0NTA1MDU3NA==", "diff_hunk": "@@ -4417,6 +4417,29 @@ def test_inplace_division(self):\n         id_after = id(t)\n         self.assertEqual(id_before, id_after)\n \n+    def test_contiguous(self):\n+        # x has to have batch_size 1 to test contiguous checks\n+        x = torch.randn(1, 16, 5, 5)\n+        assert x.is_contiguous()\n+        stride = list(x.stride())\n+        stride[0] = 20\n+        # change the stride in dimension 0. the tensor is still contiguous because size[0] is 1\n+        x.set_(x.storage(), 0, x.size(), stride)\n+        assert x.is_contiguous()\n+\n+    @unittest.skipIf(not torch.cuda.is_available(), \"CUDA unavailable\")\n+    def test_contiguous_cuda(self):\n+        # x has to have batch_size 1 to test contiguous checks\n+        x = torch.randn(1, 16, 5, 5).cuda()\n+        assert x.is_contiguous()\n+        stride = list(x.stride())\n+        stride[0] = 20\n+        # change the stride in dimension 0. the tensor is still contiguous because size[0] is 1\n+        x.set_(x.storage(), 0, x.size(), stride)\n+        assert x.is_contiguous()\n+        new_x = x.contiguous()\n+        self.assertEqual(new_x.stride(), [400, 25, 5, 1])", "path": "test/test_torch.py", "position": 25, "original_position": 25, "commit_id": "999cd36b2f801b8b45a0d4ca50dd12aa09adf03d", "original_commit_id": "999cd36b2f801b8b45a0d4ca50dd12aa09adf03d", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "These tests differ, even though they shouldnt. Use a single function parametrized over tensor type (CUDA or not). We already do that for a few of them. Look for TestTorch in test_cuda.py to see how it\u2019s usually done", "created_at": "2017-10-17T07:48:31Z", "updated_at": "2018-11-23T15:35:20Z", "html_url": "https://github.com/pytorch/pytorch/pull/3091#discussion_r145050574", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/3091", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/145050574"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/3091#discussion_r145050574"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/3091"}}, "body_html": "<p>These tests differ, even though they shouldnt. Use a single function parametrized over tensor type (CUDA or not). We already do that for a few of them. Look for TestTorch in test_cuda.py to see how it\u2019s usually done</p>", "body_text": "These tests differ, even though they shouldnt. Use a single function parametrized over tensor type (CUDA or not). We already do that for a few of them. Look for TestTorch in test_cuda.py to see how it\u2019s usually done"}