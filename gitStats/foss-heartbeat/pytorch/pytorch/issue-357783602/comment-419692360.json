{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/419692360", "html_url": "https://github.com/pytorch/pytorch/pull/11342#issuecomment-419692360", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/11342", "id": 419692360, "node_id": "MDEyOklzc3VlQ29tbWVudDQxOTY5MjM2MA==", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "created_at": "2018-09-09T05:36:57Z", "updated_at": "2018-09-09T05:36:57Z", "author_association": "CONTRIBUTOR", "body_html": "<p>To answer your questions:</p>\n<blockquote>\n<p>I used the log1p implementation in <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"336409339\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/8969\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/pytorch/pytorch/pull/8969/hovercard\" href=\"https://github.com/pytorch/pytorch/pull/8969\">#8969</a> as a guide especially for testing. I'm not sure what the @skipIfROCM annotation is for, so unsure if i need it for my test.</p>\n</blockquote>\n<p>skipIfROCM turns off the test for AMD GPUs. I would advise you to omit that for now, and then add it if the AMD tests fail.</p>\n<blockquote>\n<p>I implemented the branching logic in the narrow function itself; is this the right place to do so? I noticed that there a number of places where sparse-specific logic is handled with just an if statement in this file. Or should I implement a separate dispatch in native_functions.yml as in the log1p?</p>\n</blockquote>\n<p>Moot if you don't call this narrow.</p>", "body_text": "To answer your questions:\n\nI used the log1p implementation in #8969 as a guide especially for testing. I'm not sure what the @skipIfROCM annotation is for, so unsure if i need it for my test.\n\nskipIfROCM turns off the test for AMD GPUs. I would advise you to omit that for now, and then add it if the AMD tests fail.\n\nI implemented the branching logic in the narrow function itself; is this the right place to do so? I noticed that there a number of places where sparse-specific logic is handled with just an if statement in this file. Or should I implement a separate dispatch in native_functions.yml as in the log1p?\n\nMoot if you don't call this narrow.", "body": "To answer your questions:\r\n\r\n> I used the log1p implementation in #8969 as a guide especially for testing. I'm not sure what the @skipIfROCM annotation is for, so unsure if i need it for my test.\r\n\r\nskipIfROCM turns off the test for AMD GPUs. I would advise you to omit that for now, and then add it if the AMD tests fail.\r\n\r\n> I implemented the branching logic in the narrow function itself; is this the right place to do so? I noticed that there a number of places where sparse-specific logic is handled with just an if statement in this file. Or should I implement a separate dispatch in native_functions.yml as in the log1p?\r\n\r\nMoot if you don't call this narrow."}