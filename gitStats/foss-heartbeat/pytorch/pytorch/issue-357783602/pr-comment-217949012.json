{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/217949012", "pull_request_review_id": 155781607, "id": 217949012, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNzk0OTAxMg==", "diff_hunk": "@@ -153,6 +153,37 @@ Tensor &as_strided_(Tensor& self, IntList size, IntList stride) {\n   return at::as_strided_(self, size, stride, self.storage_offset());\n }\n \n+Tensor narrow_copy(const Tensor& self, int64_t dim, int64_t start, int64_t length){\n+  if (self.type().is_sparse()) {\n+    AT_CHECK(self.dim() > 0, \"narrow() cannot be applied to a 0-dim tensor.\");\n+    LongTensor indices = self._indices();\n+    int64_t dims = indices.size(0);\n+    int64_t sparseDims = self._sparseDims();\n+    int64_t end = start+length;\n+    \n+    std::vector<int64_t> newSizes = self.sizes().vec();\n+    newSizes[dim]=length;\n+    \n+    Tensor newValues;\n+    LongTensor newIndices;\n+    if(dim < sparseDims){\n+      Tensor mask = (indices[dim] >= start).__and__((indices[dim] < end));\n+      newIndices = indices.masked_select(mask).view({dims, -1});\n+      newIndices[dim].add_(-start);\n+      Tensor nzIndices = mask.nonzero().view(-1);\n+      newValues = self._values().index_select(0, nzIndices);\n+    }else{\n+      newIndices = indices;\n+      int64_t ddim = dim-sparseDims+1;\n+      newValues = self._values().narrow_copy(ddim,start,length);\n+    }\n+   \n+    return self.type().sparse_coo_tensor(newIndices, newValues, newSizes);", "path": "aten/src/ATen/native/TensorShape.cpp", "position": null, "original_position": 29, "commit_id": "13f660e4fb942bf2933ef8643f541e078ce165df", "original_commit_id": "3d71a47e55cedb4f0997de80e116a9276116556f", "user": {"login": "SsnL", "id": 5674597, "node_id": "MDQ6VXNlcjU2NzQ1OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5674597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SsnL", "html_url": "https://github.com/SsnL", "followers_url": "https://api.github.com/users/SsnL/followers", "following_url": "https://api.github.com/users/SsnL/following{/other_user}", "gists_url": "https://api.github.com/users/SsnL/gists{/gist_id}", "starred_url": "https://api.github.com/users/SsnL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SsnL/subscriptions", "organizations_url": "https://api.github.com/users/SsnL/orgs", "repos_url": "https://api.github.com/users/SsnL/repos", "events_url": "https://api.github.com/users/SsnL/events{/privacy}", "received_events_url": "https://api.github.com/users/SsnL/received_events", "type": "User", "site_admin": false}, "body": "This should set coalesced flag to be the same as the original sparse tensor.", "created_at": "2018-09-17T04:59:04Z", "updated_at": "2018-11-23T15:51:28Z", "html_url": "https://github.com/pytorch/pytorch/pull/11342#discussion_r217949012", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/11342", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/217949012"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/11342#discussion_r217949012"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/11342"}}, "body_html": "<p>This should set coalesced flag to be the same as the original sparse tensor.</p>", "body_text": "This should set coalesced flag to be the same as the original sparse tensor."}