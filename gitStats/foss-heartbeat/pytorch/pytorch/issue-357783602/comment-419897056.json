{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/419897056", "html_url": "https://github.com/pytorch/pytorch/pull/11342#issuecomment-419897056", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/11342", "id": 419897056, "node_id": "MDEyOklzc3VlQ29tbWVudDQxOTg5NzA1Ng==", "user": {"login": "realdoug", "id": 2383488, "node_id": "MDQ6VXNlcjIzODM0ODg=", "avatar_url": "https://avatars1.githubusercontent.com/u/2383488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/realdoug", "html_url": "https://github.com/realdoug", "followers_url": "https://api.github.com/users/realdoug/followers", "following_url": "https://api.github.com/users/realdoug/following{/other_user}", "gists_url": "https://api.github.com/users/realdoug/gists{/gist_id}", "starred_url": "https://api.github.com/users/realdoug/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/realdoug/subscriptions", "organizations_url": "https://api.github.com/users/realdoug/orgs", "repos_url": "https://api.github.com/users/realdoug/repos", "events_url": "https://api.github.com/users/realdoug/events{/privacy}", "received_events_url": "https://api.github.com/users/realdoug/received_events", "type": "User", "site_admin": false}, "created_at": "2018-09-10T12:36:11Z", "updated_at": "2018-09-10T12:38:19Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=13564\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ezyang\">@ezyang</a> Thanks for the comments.  My intention is to mirror the functionality of dense.narrow() as closely as I can; so sharing storage is the preferred approach as much as possible.</p>\n<p>A) For <code>sizes</code> &amp; <code>indices</code> the values must change, so I don't know if sharing storage is possible.  Am I correct in saying that?  Can still eliminate the loop w/ <code>masked_select</code> though.</p>\n<p>B) For the <code>values</code> tensor sounds like I can just compute a boolean mask to share storage.  Will do.</p>\n<p>If I'm correct in A &amp; B do you still suggest a name change for the function?</p>", "body_text": "@ezyang Thanks for the comments.  My intention is to mirror the functionality of dense.narrow() as closely as I can; so sharing storage is the preferred approach as much as possible.\nA) For sizes & indices the values must change, so I don't know if sharing storage is possible.  Am I correct in saying that?  Can still eliminate the loop w/ masked_select though.\nB) For the values tensor sounds like I can just compute a boolean mask to share storage.  Will do.\nIf I'm correct in A & B do you still suggest a name change for the function?", "body": "@ezyang Thanks for the comments.  My intention is to mirror the functionality of dense.narrow() as closely as I can; so sharing storage is the preferred approach as much as possible.  \r\n\r\nA) For ```sizes``` & ```indices``` the values must change, so I don't know if sharing storage is possible.  Am I correct in saying that?  Can still eliminate the loop w/ ```masked_select``` though.\r\n\r\nB) For the ```values``` tensor sounds like I can just compute a boolean mask to share storage.  Will do.\r\n\r\nIf I'm correct in A & B do you still suggest a name change for the function?"}