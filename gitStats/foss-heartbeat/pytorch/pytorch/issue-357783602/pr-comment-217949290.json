{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/217949290", "pull_request_review_id": 155781607, "id": 217949290, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNzk0OTI5MA==", "diff_hunk": "@@ -760,6 +760,63 @@ def _test_zeros(self, shape, out_shape_i, out_shape_v=None):\n             self.assertEqual(out._sparseDims(), len(shape))\n             self.assertEqual(out._denseDims(), 0)\n \n+    def test_narrow(self):\n+        if self.is_cuda:\n+            input = torch.cuda.sparse.DoubleTensor(\n+                torch.LongTensor([[0], [1], [2]]).transpose(1, 0).cuda(),\n+                torch.FloatTensor([3, 4, 5]).cuda(),\n+                torch.Size([3]))\n+        else:\n+            input = torch.sparse.DoubleTensor(\n+                torch.LongTensor([[0], [1], [2]]).transpose(1, 0),\n+                torch.FloatTensor([3, 4, 5]),\n+                torch.Size([3]))\n+\n+        narrow_args = [0, 0, 2]  # dim, start, length\n+        expected = torch.tensor([3., 4., 5.]).narrow(*narrow_args)\n+\n+        self.assertEqual(expected, input.narrow_copy(*narrow_args).to_dense())\n+        self.assertEqual(expected, input.coalesce().narrow_copy(*narrow_args).to_dense())\n+\n+        uncoalesced = torch.sparse.DoubleTensor(\n+            torch.LongTensor([[0], [1], [2], [0], [1], [2]]).transpose(1, 0),\n+            torch.FloatTensor([2, 3, 4, 1, 1, 1]),\n+            torch.Size([3]))\n+\n+        self.assertEqual(expected, uncoalesced.narrow_copy(*narrow_args).to_dense())\n+        self.assertEqual(expected, uncoalesced.coalesce().narrow_copy(*narrow_args).to_dense())\n+\n+    def test_narrow_hybrid(self):\n+        if self.is_cuda:\n+            input = torch.cuda.sparse.DoubleTensor(", "path": "test/test_sparse.py", "position": null, "original_position": 32, "commit_id": "13f660e4fb942bf2933ef8643f541e078ce165df", "original_commit_id": "3d71a47e55cedb4f0997de80e116a9276116556f", "user": {"login": "SsnL", "id": 5674597, "node_id": "MDQ6VXNlcjU2NzQ1OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5674597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SsnL", "html_url": "https://github.com/SsnL", "followers_url": "https://api.github.com/users/SsnL/followers", "following_url": "https://api.github.com/users/SsnL/following{/other_user}", "gists_url": "https://api.github.com/users/SsnL/gists{/gist_id}", "starred_url": "https://api.github.com/users/SsnL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SsnL/subscriptions", "organizations_url": "https://api.github.com/users/SsnL/orgs", "repos_url": "https://api.github.com/users/SsnL/repos", "events_url": "https://api.github.com/users/SsnL/events{/privacy}", "received_events_url": "https://api.github.com/users/SsnL/received_events", "type": "User", "site_admin": false}, "body": "You should use the class defined as `self.*Tensor`", "created_at": "2018-09-17T05:03:13Z", "updated_at": "2018-11-23T15:51:28Z", "html_url": "https://github.com/pytorch/pytorch/pull/11342#discussion_r217949290", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/11342", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/217949290"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/11342#discussion_r217949290"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/11342"}}, "body_html": "<p>You should use the class defined as <code>self.*Tensor</code></p>", "body_text": "You should use the class defined as self.*Tensor"}