{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/220307593", "pull_request_review_id": 158686417, "id": 220307593, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyMDMwNzU5Mw==", "diff_hunk": "@@ -1023,6 +1023,52 @@ def test_shape(i_shapes, v_shapes, nnzs):\n         test_shape([0, 3, 4], [3, 4, 5, 6], [0])\n         test_shape([2, 3, 4], [0, 4, 5, 6], [9, 12])\n \n+    def _test_narrow(self, input, narrow_args, dense=None):\n+        if dense is None:\n+            dense = input.to_dense()\n+        expected = dense.narrow(*narrow_args)\n+        self.assertEqual(expected, input.narrow_copy(*narrow_args).to_dense())\n+\n+    def test_narrow(self):\n+        input = self.SparseTensor(\n+            self.IndexTensor([[0], [1], [2]]).transpose(1, 0),\n+            self.ValueTensor([3, 4, 5]),\n+            torch.Size([3]))\n+\n+        narrow_args = [0, 0, 2]", "path": "test/test_sparse.py", "position": null, "original_position": 16, "commit_id": "13f660e4fb942bf2933ef8643f541e078ce165df", "original_commit_id": "c4f06289628a3b4165d084bdbdfd91a203841f7d", "user": {"login": "weiyangfb", "id": 38509346, "node_id": "MDQ6VXNlcjM4NTA5MzQ2", "avatar_url": "https://avatars1.githubusercontent.com/u/38509346?v=4", "gravatar_id": "", "url": "https://api.github.com/users/weiyangfb", "html_url": "https://github.com/weiyangfb", "followers_url": "https://api.github.com/users/weiyangfb/followers", "following_url": "https://api.github.com/users/weiyangfb/following{/other_user}", "gists_url": "https://api.github.com/users/weiyangfb/gists{/gist_id}", "starred_url": "https://api.github.com/users/weiyangfb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/weiyangfb/subscriptions", "organizations_url": "https://api.github.com/users/weiyangfb/orgs", "repos_url": "https://api.github.com/users/weiyangfb/repos", "events_url": "https://api.github.com/users/weiyangfb/events{/privacy}", "received_events_url": "https://api.github.com/users/weiyangfb/received_events", "type": "User", "site_admin": false}, "body": "can you test for all valid combinations of args, e.g., [dim, start, length]? Also test for invalid inputs, .e.g, dim < 0, or dim >= input._sparseDims + input._denseDims, or start < 0, start >= size[dim], etc. Also maybe use `_gen_sparse` to get a more generalized test (it automatically covers both of coalesced and uncoalesced cases), right now the test here only tests for case where sparseDims = 1.", "created_at": "2018-09-25T18:36:57Z", "updated_at": "2018-11-23T15:51:57Z", "html_url": "https://github.com/pytorch/pytorch/pull/11342#discussion_r220307593", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/11342", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/220307593"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/11342#discussion_r220307593"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/11342"}}, "body_html": "<p>can you test for all valid combinations of args, e.g., [dim, start, length]? Also test for invalid inputs, .e.g, dim &lt; 0, or dim &gt;= input._sparseDims + input._denseDims, or start &lt; 0, start &gt;= size[dim], etc. Also maybe use <code>_gen_sparse</code> to get a more generalized test (it automatically covers both of coalesced and uncoalesced cases), right now the test here only tests for case where sparseDims = 1.</p>", "body_text": "can you test for all valid combinations of args, e.g., [dim, start, length]? Also test for invalid inputs, .e.g, dim < 0, or dim >= input._sparseDims + input._denseDims, or start < 0, start >= size[dim], etc. Also maybe use _gen_sparse to get a more generalized test (it automatically covers both of coalesced and uncoalesced cases), right now the test here only tests for case where sparseDims = 1."}