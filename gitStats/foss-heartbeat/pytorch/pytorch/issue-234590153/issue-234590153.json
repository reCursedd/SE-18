{"url": "https://api.github.com/repos/pytorch/pytorch/issues/1757", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/1757/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/1757/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/1757/events", "html_url": "https://github.com/pytorch/pytorch/issues/1757", "id": 234590153, "node_id": "MDU6SXNzdWUyMzQ1OTAxNTM=", "number": 1757, "title": "Should addmm_ supports (int, int, torch.IntTensor, torch.FloatTensor) ?", "user": {"login": "quanvuong", "id": 6988600, "node_id": "MDQ6VXNlcjY5ODg2MDA=", "avatar_url": "https://avatars1.githubusercontent.com/u/6988600?v=4", "gravatar_id": "", "url": "https://api.github.com/users/quanvuong", "html_url": "https://github.com/quanvuong", "followers_url": "https://api.github.com/users/quanvuong/followers", "following_url": "https://api.github.com/users/quanvuong/following{/other_user}", "gists_url": "https://api.github.com/users/quanvuong/gists{/gist_id}", "starred_url": "https://api.github.com/users/quanvuong/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/quanvuong/subscriptions", "organizations_url": "https://api.github.com/users/quanvuong/orgs", "repos_url": "https://api.github.com/users/quanvuong/repos", "events_url": "https://api.github.com/users/quanvuong/events{/privacy}", "received_events_url": "https://api.github.com/users/quanvuong/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-06-08T16:49:41Z", "updated_at": "2017-06-08T17:04:56Z", "closed_at": "2017-06-08T17:04:47Z", "author_association": "CONTRIBUTOR", "body_html": "<p>I have a Sequential model:</p>\n<pre><code>    value_net = torch.nn.Sequential(\n                  torch.nn.Linear(30, 64),\n                  torch.nn.ReLU(),\n                  torch.nn.Linear(64, 1))\n\n</code></pre>\n<p><code>value_net(state)</code> raises this error</p>\n<pre><code>  File \"/Users/QV/miniconda2/envs/pytorch_cpu/lib/python2.7/site-packages/torch/nn/modules/module.py\", line 206, in __call__\n    result = self.forward(*input, **kwargs)\n  File \"/Users/QV/miniconda2/envs/pytorch_cpu/lib/python2.7/site-packages/torch/nn/modules/container.py\", line 64, in forward\n    input = module(input)\n  File \"/Users/QV/miniconda2/envs/pytorch_cpu/lib/python2.7/site-packages/torch/nn/modules/module.py\", line 206, in __call__\n    result = self.forward(*input, **kwargs)\n  File \"/Users/QV/miniconda2/envs/pytorch_cpu/lib/python2.7/site-packages/torch/nn/modules/linear.py\", line 56, in forward\n    return self._backend.Linear()(input, self.weight, self.bias)\n  File \"/Users/QV/miniconda2/envs/pytorch_cpu/lib/python2.7/site-packages/torch/nn/_functions/linear.py\", line 10, in forward\n    output.addmm_(0, 1, input, weight.t())\nTypeError: addmm_ received an invalid combination of arguments - got (int, int, torch.IntTensor, torch.FloatTensor), but expected one of:\n * (torch.IntTensor mat1, torch.IntTensor mat2)\n * (torch.SparseIntTensor mat1, torch.IntTensor mat2)\n * (int beta, torch.IntTensor mat1, torch.IntTensor mat2)\n * (int alpha, torch.IntTensor mat1, torch.IntTensor mat2)\n * (int beta, torch.SparseIntTensor mat1, torch.IntTensor mat2)\n * (int alpha, torch.SparseIntTensor mat1, torch.IntTensor mat2)\n * (int beta, int alpha, torch.IntTensor mat1, torch.IntTensor mat2)\n      didn't match because some of the arguments have invalid types: (int, int, torch.IntTensor, torch.FloatTensor)\n * (int beta, int alpha, torch.SparseIntTensor mat1, torch.IntTensor mat2)\n      didn't match because some of the arguments have invalid types: (int, int, torch.IntTensor, torch.FloatTensor)\n</code></pre>\n<p>In this line <code>output.addmm_(0, 1, input, weight.t())</code>, considering that <code>weight</code> probably denotes A in <code>y=Ax+b</code>, shouldn't <code>torch.FloatTensor</code> be an acceptable type ?</p>", "body_text": "I have a Sequential model:\n    value_net = torch.nn.Sequential(\n                  torch.nn.Linear(30, 64),\n                  torch.nn.ReLU(),\n                  torch.nn.Linear(64, 1))\n\n\nvalue_net(state) raises this error\n  File \"/Users/QV/miniconda2/envs/pytorch_cpu/lib/python2.7/site-packages/torch/nn/modules/module.py\", line 206, in __call__\n    result = self.forward(*input, **kwargs)\n  File \"/Users/QV/miniconda2/envs/pytorch_cpu/lib/python2.7/site-packages/torch/nn/modules/container.py\", line 64, in forward\n    input = module(input)\n  File \"/Users/QV/miniconda2/envs/pytorch_cpu/lib/python2.7/site-packages/torch/nn/modules/module.py\", line 206, in __call__\n    result = self.forward(*input, **kwargs)\n  File \"/Users/QV/miniconda2/envs/pytorch_cpu/lib/python2.7/site-packages/torch/nn/modules/linear.py\", line 56, in forward\n    return self._backend.Linear()(input, self.weight, self.bias)\n  File \"/Users/QV/miniconda2/envs/pytorch_cpu/lib/python2.7/site-packages/torch/nn/_functions/linear.py\", line 10, in forward\n    output.addmm_(0, 1, input, weight.t())\nTypeError: addmm_ received an invalid combination of arguments - got (int, int, torch.IntTensor, torch.FloatTensor), but expected one of:\n * (torch.IntTensor mat1, torch.IntTensor mat2)\n * (torch.SparseIntTensor mat1, torch.IntTensor mat2)\n * (int beta, torch.IntTensor mat1, torch.IntTensor mat2)\n * (int alpha, torch.IntTensor mat1, torch.IntTensor mat2)\n * (int beta, torch.SparseIntTensor mat1, torch.IntTensor mat2)\n * (int alpha, torch.SparseIntTensor mat1, torch.IntTensor mat2)\n * (int beta, int alpha, torch.IntTensor mat1, torch.IntTensor mat2)\n      didn't match because some of the arguments have invalid types: (int, int, torch.IntTensor, torch.FloatTensor)\n * (int beta, int alpha, torch.SparseIntTensor mat1, torch.IntTensor mat2)\n      didn't match because some of the arguments have invalid types: (int, int, torch.IntTensor, torch.FloatTensor)\n\nIn this line output.addmm_(0, 1, input, weight.t()), considering that weight probably denotes A in y=Ax+b, shouldn't torch.FloatTensor be an acceptable type ?", "body": "I have a Sequential model:\r\n\r\n```\r\n    value_net = torch.nn.Sequential(\r\n                  torch.nn.Linear(30, 64),\r\n                  torch.nn.ReLU(),\r\n                  torch.nn.Linear(64, 1))\r\n\r\n```\r\n\r\n`value_net(state)` raises this error\r\n\r\n```\r\n  File \"/Users/QV/miniconda2/envs/pytorch_cpu/lib/python2.7/site-packages/torch/nn/modules/module.py\", line 206, in __call__\r\n    result = self.forward(*input, **kwargs)\r\n  File \"/Users/QV/miniconda2/envs/pytorch_cpu/lib/python2.7/site-packages/torch/nn/modules/container.py\", line 64, in forward\r\n    input = module(input)\r\n  File \"/Users/QV/miniconda2/envs/pytorch_cpu/lib/python2.7/site-packages/torch/nn/modules/module.py\", line 206, in __call__\r\n    result = self.forward(*input, **kwargs)\r\n  File \"/Users/QV/miniconda2/envs/pytorch_cpu/lib/python2.7/site-packages/torch/nn/modules/linear.py\", line 56, in forward\r\n    return self._backend.Linear()(input, self.weight, self.bias)\r\n  File \"/Users/QV/miniconda2/envs/pytorch_cpu/lib/python2.7/site-packages/torch/nn/_functions/linear.py\", line 10, in forward\r\n    output.addmm_(0, 1, input, weight.t())\r\nTypeError: addmm_ received an invalid combination of arguments - got (int, int, torch.IntTensor, torch.FloatTensor), but expected one of:\r\n * (torch.IntTensor mat1, torch.IntTensor mat2)\r\n * (torch.SparseIntTensor mat1, torch.IntTensor mat2)\r\n * (int beta, torch.IntTensor mat1, torch.IntTensor mat2)\r\n * (int alpha, torch.IntTensor mat1, torch.IntTensor mat2)\r\n * (int beta, torch.SparseIntTensor mat1, torch.IntTensor mat2)\r\n * (int alpha, torch.SparseIntTensor mat1, torch.IntTensor mat2)\r\n * (int beta, int alpha, torch.IntTensor mat1, torch.IntTensor mat2)\r\n      didn't match because some of the arguments have invalid types: (int, int, torch.IntTensor, torch.FloatTensor)\r\n * (int beta, int alpha, torch.SparseIntTensor mat1, torch.IntTensor mat2)\r\n      didn't match because some of the arguments have invalid types: (int, int, torch.IntTensor, torch.FloatTensor)\r\n```\r\n\r\nIn this line `output.addmm_(0, 1, input, weight.t())`, considering that `weight` probably denotes A in `y=Ax+b`, shouldn't `torch.FloatTensor` be an acceptable type ? "}