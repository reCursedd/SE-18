{"url": "https://api.github.com/repos/pytorch/pytorch/issues/67", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/67/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/67/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/67/events", "html_url": "https://github.com/pytorch/pytorch/issues/67", "id": 180057550, "node_id": "MDU6SXNzdWUxODAwNTc1NTA=", "number": 67, "title": "MaxUnpool2d segfaults for some configurations", "user": {"login": "fmassa", "id": 9110200, "node_id": "MDQ6VXNlcjkxMTAyMDA=", "avatar_url": "https://avatars2.githubusercontent.com/u/9110200?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fmassa", "html_url": "https://github.com/fmassa", "followers_url": "https://api.github.com/users/fmassa/followers", "following_url": "https://api.github.com/users/fmassa/following{/other_user}", "gists_url": "https://api.github.com/users/fmassa/gists{/gist_id}", "starred_url": "https://api.github.com/users/fmassa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fmassa/subscriptions", "organizations_url": "https://api.github.com/users/fmassa/orgs", "repos_url": "https://api.github.com/users/fmassa/repos", "events_url": "https://api.github.com/users/fmassa/events{/privacy}", "received_events_url": "https://api.github.com/users/fmassa/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 424131847, "node_id": "MDU6TGFiZWw0MjQxMzE4NDc=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/bug", "name": "bug", "color": "b60205", "default": true}, {"id": 443484050, "node_id": "MDU6TGFiZWw0NDM0ODQwNTA=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/medium%20priority", "name": "medium priority", "color": "fbca04", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 8, "created_at": "2016-09-29T14:00:57Z", "updated_at": "2016-11-08T17:13:35Z", "closed_at": "2016-11-08T17:13:35Z", "author_association": "MEMBER", "body_html": "<p>Having the output of <code>MaxUnpool2d</code> <a href=\"https://github.com/pytorch/pytorch/blob/master/torch/nn/modules/pooling.py#L119-L120\">to be computed as follows</a> is error-prone.</p>\n<div class=\"highlight highlight-source-python\"><pre>out_height <span class=\"pl-k\">=</span> (<span class=\"pl-c1\">input</span>.size(<span class=\"pl-c1\">2</span>) <span class=\"pl-k\">-</span> <span class=\"pl-c1\">1</span>) <span class=\"pl-k\">*</span> <span class=\"pl-c1\">self</span>.dh <span class=\"pl-k\">+</span> <span class=\"pl-c1\">self</span>.kh <span class=\"pl-k\">-</span> <span class=\"pl-c1\">2</span><span class=\"pl-k\">*</span><span class=\"pl-c1\">self</span>.padh\nout_width <span class=\"pl-k\">=</span> (<span class=\"pl-c1\">input</span>.size(<span class=\"pl-c1\">3</span>) <span class=\"pl-k\">-</span> <span class=\"pl-c1\">1</span>) <span class=\"pl-k\">*</span> <span class=\"pl-c1\">self</span>.dw <span class=\"pl-k\">+</span> <span class=\"pl-c1\">self</span>.kw <span class=\"pl-k\">-</span> <span class=\"pl-c1\">2</span><span class=\"pl-k\">*</span><span class=\"pl-c1\">self</span>.padw</pre></div>\n<p>For some configurations of <code>input</code> size and <code>stride</code>/<code>kernel size</code>, there are pixel loss in the boundaries due to integer division, so when unpooling we might end up by having accesses which are out of the output size defined by the above equation, or giving completely wrong results.<br>\nHere is a test case:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> torch\n<span class=\"pl-k\">import</span> torch.nn <span class=\"pl-k\">as</span> nn\n<span class=\"pl-k\">import</span> torch.autograd <span class=\"pl-k\">as</span> autograd\n\nm <span class=\"pl-k\">=</span> nn.MaxPool2d(<span class=\"pl-c1\">3</span>, <span class=\"pl-v\">stride</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">2</span>, <span class=\"pl-v\">return_indices</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">True</span>)\nmu <span class=\"pl-k\">=</span> nn.MaxUnpool2d(<span class=\"pl-c1\">3</span>, <span class=\"pl-v\">stride</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">2</span>)\ninput_tensor <span class=\"pl-k\">=</span> torch.rand(<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">6</span>, <span class=\"pl-c1\">6</span>)\ninput_tensor[<span class=\"pl-c1\">0</span>][<span class=\"pl-c1\">0</span>][<span class=\"pl-c1\">5</span>][<span class=\"pl-c1\">5</span>] <span class=\"pl-k\">=</span> <span class=\"pl-c1\">2</span>\n<span class=\"pl-c1\">input</span> <span class=\"pl-k\">=</span> autograd.Variable(input_tensor)\noutput, indices <span class=\"pl-k\">=</span> m.forward(<span class=\"pl-c1\">input</span>)\nunpooled_output <span class=\"pl-k\">=</span> mu.forward(output, indices)</pre></div>\n<p>Curiously, the segfault is doesn't happen all the time, but instead it just raises an out-of-range error, or the outputs max are not in the right position.</p>", "body_text": "Having the output of MaxUnpool2d to be computed as follows is error-prone.\nout_height = (input.size(2) - 1) * self.dh + self.kh - 2*self.padh\nout_width = (input.size(3) - 1) * self.dw + self.kw - 2*self.padw\nFor some configurations of input size and stride/kernel size, there are pixel loss in the boundaries due to integer division, so when unpooling we might end up by having accesses which are out of the output size defined by the above equation, or giving completely wrong results.\nHere is a test case:\nimport torch\nimport torch.nn as nn\nimport torch.autograd as autograd\n\nm = nn.MaxPool2d(3, stride=2, return_indices = True)\nmu = nn.MaxUnpool2d(3, stride=2)\ninput_tensor = torch.rand(1, 1, 6, 6)\ninput_tensor[0][0][5][5] = 2\ninput = autograd.Variable(input_tensor)\noutput, indices = m.forward(input)\nunpooled_output = mu.forward(output, indices)\nCuriously, the segfault is doesn't happen all the time, but instead it just raises an out-of-range error, or the outputs max are not in the right position.", "body": "Having the output of `MaxUnpool2d` [to be computed as follows](https://github.com/pytorch/pytorch/blob/master/torch/nn/modules/pooling.py#L119-L120) is error-prone.\n\n``` python\nout_height = (input.size(2) - 1) * self.dh + self.kh - 2*self.padh\nout_width = (input.size(3) - 1) * self.dw + self.kw - 2*self.padw\n```\n\nFor some configurations of `input` size and `stride`/`kernel size`, there are pixel loss in the boundaries due to integer division, so when unpooling we might end up by having accesses which are out of the output size defined by the above equation, or giving completely wrong results.\nHere is a test case:\n\n``` python\nimport torch\nimport torch.nn as nn\nimport torch.autograd as autograd\n\nm = nn.MaxPool2d(3, stride=2, return_indices = True)\nmu = nn.MaxUnpool2d(3, stride=2)\ninput_tensor = torch.rand(1, 1, 6, 6)\ninput_tensor[0][0][5][5] = 2\ninput = autograd.Variable(input_tensor)\noutput, indices = m.forward(input)\nunpooled_output = mu.forward(output, indices)\n```\n\nCuriously, the segfault is doesn't happen all the time, but instead it just raises an out-of-range error, or the outputs max are not in the right position.\n"}