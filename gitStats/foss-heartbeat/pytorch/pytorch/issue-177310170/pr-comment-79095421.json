{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/79095421", "pull_request_review_id": 284455, "id": 79095421, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDc5MDk1NDIx", "diff_hunk": "@@ -0,0 +1,213 @@\n+import torch\n+from torch.autograd import Function\n+from torch._thnn import type2backend\n+import torch.cuda.cudnn as cudnn\n+import ctypes\n+\n+\n+class Conv2d(Function):\n+    def __init__(self, stride, pad, groups, use_cudnn=True):\n+        super(Conv2d, self).__init__()\n+        self.stride = stride\n+        self.pad = pad\n+        self.groups = groups\n+        self.use_cudnn = use_cudnn\n+\n+    def forward(self, input, weight, bias=None):\n+        output = input.new(*self._output_size(input, weight))\n+        if bias is not None:\n+            self.save_for_backward(input, weight, bias)\n+        else:\n+            self.save_for_backward(input, weight)\n+\n+        if self.use_cudnn and cudnn.is_acceptable(input):\n+            self._forward_cudnn(input, weight, bias, output)\n+        else:\n+            backend = type2backend[type(input)]\n+            self._finput = input.new()\n+            self._fgrad_input = input.new()\n+            backend.SpatialConvolutionMM_updateOutput(\n+                backend.library_state, input, output, weight, bias,\n+                self._finput, self._fgrad_input, weight.size(3), weight.size(2),\n+                self.stride[1], self.stride[0], self.pad[1], self.pad[0])\n+\n+        return output\n+\n+    def backward(self, grad_output):\n+        tensors = self.saved_tensors\n+        if len(tensors) == 2:\n+            input, weight = tensors\n+            bias = None\n+        else:\n+            input, weight, bias = tensors\n+\n+        grad_input, grad_weight, grad_bias = None, None, None\n+\n+        if self.use_cudnn and cudnn.is_acceptable(input):\n+            if self.needs_input_grad[0]:\n+                grad_input = self._backward_cudnn_data(\n+                    grad_output, input, weight)\n+\n+            if self.needs_input_grad[1]:\n+                grad_weight = self._backward_cudnn_filter(\n+                    grad_output, input, weight)\n+\n+            if bias is not None and self.needs_input_grad[2]:\n+                grad_bias = bias.new().resizeAs_(bias)\n+                alpha = cudnn.c_type(input)(1)\n+                beta = cudnn.c_type(input)(0)\n+\n+                cudnn.convolution_backward_bias(\n+                    cudnn.get_handle(), ctypes.byref(alpha), self.odesc_bias,\n+                    ctypes.c_void_p(grad_output.data()), ctypes.byref(beta),\n+                    self.bias_desc, ctypes.c_void_p(grad_bias.data()))\n+        else:\n+            backend = type2backend[type(input)]\n+            if self.needs_input_grad[0]:\n+                grad_input = input.new().resizeAs_(input).zero_()\n+                backend.SpatialConvolutionMM_updateGradInput(\n+                    backend.library_state, input, grad_output, grad_input,\n+                    weight, self._finput, self._fgrad_input, weight.size(3),\n+                    weight.size(2), self.stride[1], self.stride[0], self.pad[1],\n+                    self.pad[0])\n+\n+            if any(self.needs_input_grad[1:]):\n+                grad_weight = weight.new().resizeAs_(weight).zero_()\n+                if bias is not None and self.needs_input_grad[2]:\n+                    grad_bias = bias.new().resizeAs_(bias).zero_()\n+                else:\n+                    grad_bias = None\n+                backend.SpatialConvolutionMM_accGradParameters(\n+                    backend.library_state, input, grad_output, grad_weight,\n+                    grad_bias, self._finput, self._fgrad_input, weight.size(3),\n+                    weight.size(2), self.stride[1], self.stride[0], self.pad[1],\n+                    self.pad[0], 1)\n+\n+        if bias is not None:\n+            return grad_input, grad_weight, grad_bias\n+        else:\n+            return grad_input, grad_weight\n+\n+    def _forward_cudnn(self, input, weight, bias, output):\n+        handle = cudnn.get_handle()\n+        out_channels, in_channels = weight.size(0), weight.size(1)\n+\n+        inslice = input.narrow(1, 0, in_channels // self.groups)\n+        outslice = output.narrow(1, 0, out_channels // self.groups)\n+        weight_slice = (\n+            weight.narrow(0, 0, out_channels // self.groups)", "path": "torch/nn/functions/conv.py", "position": null, "original_position": 98, "commit_id": "e2c52918dd85a87f5ac4033b2f1e6a57e01c40a5", "original_commit_id": "ab82860687eb0fd9e89ee69daded7c2bd37fbeed", "user": {"login": "colesbury", "id": 655866, "node_id": "MDQ6VXNlcjY1NTg2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/655866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colesbury", "html_url": "https://github.com/colesbury", "followers_url": "https://api.github.com/users/colesbury/followers", "following_url": "https://api.github.com/users/colesbury/following{/other_user}", "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions", "organizations_url": "https://api.github.com/users/colesbury/orgs", "repos_url": "https://api.github.com/users/colesbury/repos", "events_url": "https://api.github.com/users/colesbury/events{/privacy}", "received_events_url": "https://api.github.com/users/colesbury/received_events", "type": "User", "site_admin": false}, "body": "It seems to work for me. https://docs.python.org/2/whatsnew/2.2.html#pep-238-changing-the-division-operator seems to suggest that // was introduced in Python 2.2\n", "created_at": "2016-09-16T01:42:11Z", "updated_at": "2018-11-23T15:31:29Z", "html_url": "https://github.com/pytorch/pytorch/pull/36#discussion_r79095421", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/36", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/79095421"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/36#discussion_r79095421"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/36"}}, "body_html": "<p>It seems to work for me. <a href=\"https://docs.python.org/2/whatsnew/2.2.html#pep-238-changing-the-division-operator\" rel=\"nofollow\">https://docs.python.org/2/whatsnew/2.2.html#pep-238-changing-the-division-operator</a> seems to suggest that // was introduced in Python 2.2</p>", "body_text": "It seems to work for me. https://docs.python.org/2/whatsnew/2.2.html#pep-238-changing-the-division-operator seems to suggest that // was introduced in Python 2.2", "in_reply_to_id": 79095018}