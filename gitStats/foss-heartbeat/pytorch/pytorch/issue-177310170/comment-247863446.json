{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/247863446", "html_url": "https://github.com/pytorch/pytorch/pull/36#issuecomment-247863446", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/36", "id": 247863446, "node_id": "MDEyOklzc3VlQ29tbWVudDI0Nzg2MzQ0Ng==", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "created_at": "2016-09-18T18:10:07Z", "updated_at": "2016-09-18T18:10:07Z", "author_association": "MEMBER", "body_html": "<p>No, we don't need users to do that. Backends don't prevent us at all from being fast by default. In  <code>backends/__init__.py</code> you can add a function that selects a default backend for a module, and it will pick cuDNN if only it has the needed functions and is installed. I don't think we should ever mix the code for different libraries/implementations. What if we end up adding neon, nnpack, or any other library later on? We'll have <code>use_*</code> flag for each of them and it'll end up very messy. It should be completely separate and easy to exchange. If you want to ensure it runs with a certain backend, sure it will require some extra calls, and we're going to should support that. But we can still default to the fastest option possible without mixing their code.</p>", "body_text": "No, we don't need users to do that. Backends don't prevent us at all from being fast by default. In  backends/__init__.py you can add a function that selects a default backend for a module, and it will pick cuDNN if only it has the needed functions and is installed. I don't think we should ever mix the code for different libraries/implementations. What if we end up adding neon, nnpack, or any other library later on? We'll have use_* flag for each of them and it'll end up very messy. It should be completely separate and easy to exchange. If you want to ensure it runs with a certain backend, sure it will require some extra calls, and we're going to should support that. But we can still default to the fastest option possible without mixing their code.", "body": "No, we don't need users to do that. Backends don't prevent us at all from being fast by default. In  `backends/__init__.py` you can add a function that selects a default backend for a module, and it will pick cuDNN if only it has the needed functions and is installed. I don't think we should ever mix the code for different libraries/implementations. What if we end up adding neon, nnpack, or any other library later on? We'll have `use_*` flag for each of them and it'll end up very messy. It should be completely separate and easy to exchange. If you want to ensure it runs with a certain backend, sure it will require some extra calls, and we're going to should support that. But we can still default to the fastest option possible without mixing their code.\n"}