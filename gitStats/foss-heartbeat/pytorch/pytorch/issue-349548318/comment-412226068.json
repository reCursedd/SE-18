{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/412226068", "html_url": "https://github.com/pytorch/pytorch/issues/10402#issuecomment-412226068", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/10402", "id": 412226068, "node_id": "MDEyOklzc3VlQ29tbWVudDQxMjIyNjA2OA==", "user": {"login": "ptrblck", "id": 11662379, "node_id": "MDQ6VXNlcjExNjYyMzc5", "avatar_url": "https://avatars3.githubusercontent.com/u/11662379?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptrblck", "html_url": "https://github.com/ptrblck", "followers_url": "https://api.github.com/users/ptrblck/followers", "following_url": "https://api.github.com/users/ptrblck/following{/other_user}", "gists_url": "https://api.github.com/users/ptrblck/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptrblck/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptrblck/subscriptions", "organizations_url": "https://api.github.com/users/ptrblck/orgs", "repos_url": "https://api.github.com/users/ptrblck/repos", "events_url": "https://api.github.com/users/ptrblck/events{/privacy}", "received_events_url": "https://api.github.com/users/ptrblck/received_events", "type": "User", "site_admin": false}, "created_at": "2018-08-10T22:50:19Z", "updated_at": "2018-08-10T22:50:19Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=5674597\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/SsnL\">@SsnL</a> As far as I understand from <a href=\"https://github.com/pytorch/pytorch/pull/10405#discussion_r209359147\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/pytorch/pytorch/pull/10405/hovercard\">your comment</a> the way to go would be to <code>reshape</code> <code>start</code> and <code>end</code> <code>tensors</code>:</p>\n<div class=\"highlight highlight-source-python\"><pre>[get_summarized_data(<span class=\"pl-c1\">self</span>[i]).reshape(<span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>) <span class=\"pl-k\">for</span> i <span class=\"pl-k\">in</span> <span class=\"pl-c1\">...</span> ]</pre></div>\n<p>This could still copy <code>self[i]</code>, if it's non-contiguous, couldn't it?</p>", "body_text": "@SsnL As far as I understand from your comment the way to go would be to reshape start and end tensors:\n[get_summarized_data(self[i]).reshape(-1) for i in ... ]\nThis could still copy self[i], if it's non-contiguous, couldn't it?", "body": "@SsnL As far as I understand from [your comment](https://github.com/pytorch/pytorch/pull/10405#discussion_r209359147) the way to go would be to `reshape` `start` and `end` `tensors`:\r\n```python\r\n[get_summarized_data(self[i]).reshape(-1) for i in ... ]\r\n```\r\nThis could still copy `self[i]`, if it's non-contiguous, couldn't it?\r\n\r\n"}