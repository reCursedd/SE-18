{"url": "https://api.github.com/repos/pytorch/pytorch/issues/6913", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/6913/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/6913/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/6913/events", "html_url": "https://github.com/pytorch/pytorch/pull/6913", "id": 317408403, "node_id": "MDExOlB1bGxSZXF1ZXN0MTgzODc0NTE4", "number": 6913, "title": "Make all of TH and THC C++.", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 20, "created_at": "2018-04-24T21:51:26Z", "updated_at": "2018-11-23T15:43:29Z", "closed_at": "2018-04-28T11:45:03Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/6913", "html_url": "https://github.com/pytorch/pytorch/pull/6913", "diff_url": "https://github.com/pytorch/pytorch/pull/6913.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/6913.patch"}, "body_html": "<p>Changelist:</p>\n<ul>\n<li>Move *.c to *.cpp</li>\n<li>Change includes of \"<em>.c\" to \"</em>.cpp\"</li>\n<li>A bunch of cmake configuration modifying CMAKE_C_FLAGS changed<br>\nto CMAKE_CXX_FLAGS or <code>add_compile_options</code>, because if you do <code>CMAKE_C_FLAGS</code> it only applies when you compile C code</li>\n<li>Explicitly cast <code>void*</code> to <code>T*</code> in a number of places</li>\n<li>Delete <code>extern \"C\" { ... }</code> blocks; instead, properly apply <code>TH_API</code> to everything that should have it (<code>TH_API</code> handles <code>extern \"C\"</code>)</li>\n<li>Stop using <code>stdatomic.h</code>, instead, use <code>&lt;atomic&gt;</code>. This resulted in a bunch of placement-new/delete to be \"totally properly correct\"</li>\n<li>Refactor of <code>THLongStorageView</code> to not have static constructor methods (since it no longer has a copy/move constructor); CC <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=370202\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/zdevito\">@zdevito</a></li>\n<li>Documentation about how the TH C interface (and extern C business) works</li>\n<li>Note that THD <code>master_worker</code> mode is dead</li>\n<li>C++ headers in TH libraries are given <code>.hpp</code> suffix, to make it less likely that you'll confuse them with the C-compatible headers (now suffixed <code>.h</code>)</li>\n<li>New function <code>THCStream_stream</code> and <code>THCStream_device</code> to project out fields of <code>THCStream</code> instead of accessing fields directly</li>\n<li>New function <code>THStorage_(retainIfLive)</code>, which is equivalent to a <code>retain</code> but only if the refcount is greater than zero.</li>\n<li>In general, I tried to avoid using <code>hpp</code> headers outside of ATen/TH. However, there were a few places where I gave up and depended on the headers for my own sanity. See <code>Note [TH abstraction violation]</code> for all the sites where this occurred. All other sites were refactored to use functions</li>\n</ul>\n<p>Signed-off-by: Edward Z. Yang <a href=\"mailto:ezyang@fb.com\">ezyang@fb.com</a></p>", "body_text": "Changelist:\n\nMove *.c to *.cpp\nChange includes of \".c\" to \".cpp\"\nA bunch of cmake configuration modifying CMAKE_C_FLAGS changed\nto CMAKE_CXX_FLAGS or add_compile_options, because if you do CMAKE_C_FLAGS it only applies when you compile C code\nExplicitly cast void* to T* in a number of places\nDelete extern \"C\" { ... } blocks; instead, properly apply TH_API to everything that should have it (TH_API handles extern \"C\")\nStop using stdatomic.h, instead, use <atomic>. This resulted in a bunch of placement-new/delete to be \"totally properly correct\"\nRefactor of THLongStorageView to not have static constructor methods (since it no longer has a copy/move constructor); CC @zdevito\nDocumentation about how the TH C interface (and extern C business) works\nNote that THD master_worker mode is dead\nC++ headers in TH libraries are given .hpp suffix, to make it less likely that you'll confuse them with the C-compatible headers (now suffixed .h)\nNew function THCStream_stream and THCStream_device to project out fields of THCStream instead of accessing fields directly\nNew function THStorage_(retainIfLive), which is equivalent to a retain but only if the refcount is greater than zero.\nIn general, I tried to avoid using hpp headers outside of ATen/TH. However, there were a few places where I gave up and depended on the headers for my own sanity. See Note [TH abstraction violation] for all the sites where this occurred. All other sites were refactored to use functions\n\nSigned-off-by: Edward Z. Yang ezyang@fb.com", "body": "Changelist:\r\n\r\n- Move *.c to *.cpp\r\n- Change includes of \"*.c\" to \"*.cpp\"\r\n- A bunch of cmake configuration modifying CMAKE_C_FLAGS changed\r\n  to CMAKE_CXX_FLAGS or `add_compile_options`, because if you do `CMAKE_C_FLAGS` it only applies when you compile C code\r\n- Explicitly cast `void*` to `T*` in a number of places\r\n- Delete `extern \"C\" { ... }` blocks; instead, properly apply `TH_API` to everything that should have it (`TH_API` handles `extern \"C\"`)\r\n- Stop using `stdatomic.h`, instead, use `<atomic>`. This resulted in a bunch of placement-new/delete to be \"totally properly correct\"\r\n- Refactor of `THLongStorageView` to not have static constructor methods (since it no longer has a copy/move constructor); CC @zdevito \r\n- Documentation about how the TH C interface (and extern C business) works\r\n- Note that THD `master_worker` mode is dead\r\n- C++ headers in TH libraries are given `.hpp` suffix, to make it less likely that you'll confuse them with the C-compatible headers (now suffixed `.h`)\r\n- New function `THCStream_stream` and `THCStream_device` to project out fields of `THCStream` instead of accessing fields directly\r\n- New function `THStorage_(retainIfLive)`, which is equivalent to a `retain` but only if the refcount is greater than zero.\r\n- In general, I tried to avoid using `hpp` headers outside of ATen/TH. However, there were a few places where I gave up and depended on the headers for my own sanity. See `Note [TH abstraction violation]` for all the sites where this occurred. All other sites were refactored to use functions\r\n\r\n\r\nSigned-off-by: Edward Z. Yang <ezyang@fb.com>\r\n\r\n"}