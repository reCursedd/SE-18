{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/173112957", "pull_request_review_id": 102242627, "id": 173112957, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MzExMjk1Nw==", "diff_hunk": "@@ -0,0 +1,152 @@\n+#!/usr/bin/env python\n+\n+import argparse\n+import os\n+import subprocess\n+import sys\n+\n+TESTS = [\n+    'autograd',\n+    'cpp_extensions',\n+    'cuda',\n+    'dataloader',\n+    'distributed',\n+    'distributions',\n+    'indexing',\n+    'jit',\n+    'legacy_nn',\n+    'multiprocessing',\n+    'nccl',\n+    'nn',\n+    'optim',\n+    'sparse',\n+    'torch',\n+    'utils',\n+]\n+\n+WINDOWS_BLACKLIST = [\n+    'cpp_extensions',\n+    'distributed',\n+]\n+\n+\n+def shell(command, cwd):\n+    popen = subprocess.Popen(\n+        command,\n+        stdout=subprocess.PIPE,\n+        universal_newlines=True,\n+        cwd=cwd,\n+        shell=True)\n+    for stdout_line in iter(popen.stdout.readline, ''):\n+        print(stdout_line.strip())\n+    popen.stdout.close()\n+    return_code = popen.wait()\n+    return return_code == 0\n+\n+\n+def get_shell_output(command):\n+    return subprocess.check_output(command, shell=True).decode().strip()\n+\n+\n+def run_test(python, test_module, cwd, verbose):\n+    verbose = '--verbose' if verbose else ''\n+    shell('{} {} {}'.format(python, test_module, verbose), cwd)\n+\n+\n+def test_cpp_extensions(python, test_module, test_directory, verbose):\n+    shell('{} setup.py install --root ./install'.format(python),\n+          os.path.join(test_directory, 'cpp_extensions'))\n+\n+    python_path = os.environ.get('PYTHONPATH', '')\n+    install_directory = get_shell_output(\n+        \"find cpp_extensions/install -name '*-packages'\")\n+    install_directory = os.path.join(test_directory, install_directory)\n+    os.environ['PYTHONPATH'] = '{}:{}'.format(install_directory, python_path)\n+    run_test(python, test_module, test_directory, verbose)\n+    os.environ['PYTHONPATH'] = python_path\n+\n+\n+def test_distributed(python, test_module, cwd, verbose):\n+    os.environ['PYCMD'] = python\n+    shell('./run_distributed_tests.sh', cwd)\n+\n+\n+CUSTOM_HANDLERS = {\n+    'cpp_extensions': test_cpp_extensions,\n+    'distributed': test_distributed,\n+}\n+\n+\n+def parse_args():\n+    parser = argparse.ArgumentParser()\n+    parser.add_argument('-v', '--verbose', action='store_true')\n+    parser.add_argument('-p', '--python')\n+    parser.add_argument('-c', '--coverage', action='store_true')\n+    parser.add_argument(\n+        '-i', '--include', nargs='+', choices=TESTS, default=TESTS)\n+    parser.add_argument(\n+        '-x', '--exclude', nargs='+', choices=TESTS, default=[])\n+    parser.add_argument('-f', '--first', choices=TESTS)\n+    parser.add_argument('-l', '--last', choices=TESTS)\n+    parser.add_argument('--with-windows', action='store_true')\n+    parser.add_argument('--test-dir')\n+    return parser.parse_args()\n+\n+\n+def get_python_command(options):\n+    if options.coverage:\n+        return 'coverage run --parallel-mode --source torch'\n+    elif options.python:\n+        return options.python\n+    else:\n+        return os.environ.get('PYCMD', 'python')\n+\n+\n+def get_selected_tests(options):\n+    selected_tests = list(sorted(set(options.include) - set(options.exclude)))\n+\n+    if options.first:\n+        first_index = selected_tests.index(options.first)\n+        selected_tests = selected_tests[first_index:]\n+\n+    if options.last:\n+        last_index = selected_tests.index(options.last)\n+        selected_tests = selected_tests[:last_index + 1]\n+\n+    if sys.platform == 'win32' and not options.with_windows:\n+        for test in WINDOWS_BLACKLIST:\n+            if test in selected_tests:\n+                print('Excluding {} on Windows'.format(test))\n+                selected_tests.remove(test)\n+\n+    return selected_tests\n+\n+\n+def get_test_directory(options):\n+    return options.test_dir or os.path.dirname(os.path.abspath(__file__))\n+\n+\n+def main():\n+    options = parse_args()\n+    python = get_python_command(options)\n+    selected_tests = get_selected_tests(options)\n+    print('Selected tests: {}'.format(', '.join(selected_tests)))", "path": "test/run_test.py", "position": null, "original_position": 133, "commit_id": "5464ec905a8bc250d8aa9bd61f2b5ea61e870c73", "original_commit_id": "e45a67dbcfe3e80ff145c0e3ad3b75eb850e6982", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Can we print it only when you want to get verbose output?", "created_at": "2018-03-08T10:03:47Z", "updated_at": "2018-11-23T15:40:29Z", "html_url": "https://github.com/pytorch/pytorch/pull/5615#discussion_r173112957", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/5615", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/173112957"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/5615#discussion_r173112957"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/5615"}}, "body_html": "<p>Can we print it only when you want to get verbose output?</p>", "body_text": "Can we print it only when you want to get verbose output?"}