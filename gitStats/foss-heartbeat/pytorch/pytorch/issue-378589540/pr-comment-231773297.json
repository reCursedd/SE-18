{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/231773297", "pull_request_review_id": 172815187, "id": 231773297, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMTc3MzI5Nw==", "diff_hunk": "@@ -234,12 +257,17 @@ int64_t FileStore::add(const std::string& key, int64_t i) {\n     auto len = value.size();\n     ti += std::stoll(std::string(buf, len));\n   }\n-\n+  // Always seek to the end to write\n+  file.seek(0, SEEK_END);\n   // File cursor is at the end of the file now, and we have an\n   // exclusive lock, so we can write the new value.\n   file.write(key);\n   file.write(std::to_string(ti));\n-\n+  // Need to update the cache since get will only read the file if the key is\n+  // not in the cache, in this case, the key is.\n+  auto tiStr = std::to_string(ti);\n+  auto newValue = std::vector<uint8_t>(tiStr.begin(), tiStr.end());\n+  cache_[key] = std::move(newValue);", "path": "torch/lib/c10d/FileStore.cpp", "position": null, "original_position": 67, "commit_id": "459f11878ca51fc436e69a78f8d1beefe44d12f9", "original_commit_id": "a6799f8f8371b9d5b0b4f821cf703cc85dd2f87e", "user": {"login": "pietern", "id": 9845, "node_id": "MDQ6VXNlcjk4NDU=", "avatar_url": "https://avatars3.githubusercontent.com/u/9845?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietern", "html_url": "https://github.com/pietern", "followers_url": "https://api.github.com/users/pietern/followers", "following_url": "https://api.github.com/users/pietern/following{/other_user}", "gists_url": "https://api.github.com/users/pietern/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietern/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietern/subscriptions", "organizations_url": "https://api.github.com/users/pietern/orgs", "repos_url": "https://api.github.com/users/pietern/repos", "events_url": "https://api.github.com/users/pietern/events{/privacy}", "received_events_url": "https://api.github.com/users/pietern/received_events", "type": "User", "site_admin": false}, "body": "This only fixes the case where you have 1 process doing a get after it did its own add. Once another process does an add, the first process cache entry will be invalid and not updated when calling get. Instead, the expected pattern here is to call add(0) and you will always get the real count.", "created_at": "2018-11-08T06:08:47Z", "updated_at": "2018-11-23T15:54:30Z", "html_url": "https://github.com/pytorch/pytorch/pull/13708#discussion_r231773297", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/13708", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/231773297"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/13708#discussion_r231773297"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/13708"}}, "body_html": "<p>This only fixes the case where you have 1 process doing a get after it did its own add. Once another process does an add, the first process cache entry will be invalid and not updated when calling get. Instead, the expected pattern here is to call add(0) and you will always get the real count.</p>", "body_text": "This only fixes the case where you have 1 process doing a get after it did its own add. Once another process does an add, the first process cache entry will be invalid and not updated when calling get. Instead, the expected pattern here is to call add(0) and you will always get the real count."}