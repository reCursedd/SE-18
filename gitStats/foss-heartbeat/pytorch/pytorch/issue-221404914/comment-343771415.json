{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/343771415", "html_url": "https://github.com/pytorch/pytorch/issues/1249#issuecomment-343771415", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/1249", "id": 343771415, "node_id": "MDEyOklzc3VlQ29tbWVudDM0Mzc3MTQxNQ==", "user": {"login": "trypag", "id": 13003839, "node_id": "MDQ6VXNlcjEzMDAzODM5", "avatar_url": "https://avatars1.githubusercontent.com/u/13003839?v=4", "gravatar_id": "", "url": "https://api.github.com/users/trypag", "html_url": "https://github.com/trypag", "followers_url": "https://api.github.com/users/trypag/followers", "following_url": "https://api.github.com/users/trypag/following{/other_user}", "gists_url": "https://api.github.com/users/trypag/gists{/gist_id}", "starred_url": "https://api.github.com/users/trypag/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/trypag/subscriptions", "organizations_url": "https://api.github.com/users/trypag/orgs", "repos_url": "https://api.github.com/users/trypag/repos", "events_url": "https://api.github.com/users/trypag/events{/privacy}", "received_events_url": "https://api.github.com/users/trypag/received_events", "type": "User", "site_admin": false}, "created_at": "2017-11-12T21:57:47Z", "updated_at": "2017-11-13T19:54:17Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=8496304\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/rogertrullo\">@rogertrullo</a> Hi, I am having issues optimizing the dice loss that you specified, the loss term should be something like <code>loss = criterion(output, target_var) + (1- dice_loss(output, target_var))</code>. That formulation is not possible because I noticed the upper bound of the function I implemented is not 1, as opposed to the real dice similarity. I rewrote the dice loss so that I can filter out the unwanted label -1, I might have introduced a bug while rewriting the code.</p>\n<pre><code>def dice_loss(output, target, weights=1, ignore_index=None):\n    output = output.exp()\n    encoded_target = output.data.clone().zero_()\n    if ignore_index is not None:\n        # mask of invalid label\n        mask = target == ignore_index\n        # clone target to not affect the variable ?\n        filtered_target = target.clone()\n        # replace invalid label with whatever legal index value\n        filtered_target[mask] = 0\n        # one hot encoding\n        encoded_target.scatter_(1, filtered_target.unsqueeze(1), 1)\n        # expand the mask for the encoded target array\n        mask = mask.unsqueeze(1).expand(output.data.size())\n        # apply 0 to masked pixels\n        encoded_target[mask] = 0\n    else:\n        encoded_target.scatter_(1, target.unsqueeze(1), 1)\n    encoded_target = Variable(encoded_target)\n\n    assert output.size() == encoded_target.size(), \"Input sizes must be equal.\"\n    assert output.dim() == 4, \"Input must be a 4D Tensor.\"\n\n    numerator = (output * encoded_target).sum(dim=3).sum(dim=2)\n    denominator = output.pow(2) + encoded_target\n    if ignore_index is not None:\n        # exclude masked values from den1\n        denominator[mask] = 0\n\n    dice = 2 * (numerator / denominator.sum(dim=3).sum(dim=2)) * weights\n    return dice.sum() / dice.size(0)\n</code></pre>\n<p>Would you mind to give me your point of view on this code and the formulation of your loss please ?<br>\nThanks</p>", "body_text": "@rogertrullo Hi, I am having issues optimizing the dice loss that you specified, the loss term should be something like loss = criterion(output, target_var) + (1- dice_loss(output, target_var)). That formulation is not possible because I noticed the upper bound of the function I implemented is not 1, as opposed to the real dice similarity. I rewrote the dice loss so that I can filter out the unwanted label -1, I might have introduced a bug while rewriting the code.\ndef dice_loss(output, target, weights=1, ignore_index=None):\n    output = output.exp()\n    encoded_target = output.data.clone().zero_()\n    if ignore_index is not None:\n        # mask of invalid label\n        mask = target == ignore_index\n        # clone target to not affect the variable ?\n        filtered_target = target.clone()\n        # replace invalid label with whatever legal index value\n        filtered_target[mask] = 0\n        # one hot encoding\n        encoded_target.scatter_(1, filtered_target.unsqueeze(1), 1)\n        # expand the mask for the encoded target array\n        mask = mask.unsqueeze(1).expand(output.data.size())\n        # apply 0 to masked pixels\n        encoded_target[mask] = 0\n    else:\n        encoded_target.scatter_(1, target.unsqueeze(1), 1)\n    encoded_target = Variable(encoded_target)\n\n    assert output.size() == encoded_target.size(), \"Input sizes must be equal.\"\n    assert output.dim() == 4, \"Input must be a 4D Tensor.\"\n\n    numerator = (output * encoded_target).sum(dim=3).sum(dim=2)\n    denominator = output.pow(2) + encoded_target\n    if ignore_index is not None:\n        # exclude masked values from den1\n        denominator[mask] = 0\n\n    dice = 2 * (numerator / denominator.sum(dim=3).sum(dim=2)) * weights\n    return dice.sum() / dice.size(0)\n\nWould you mind to give me your point of view on this code and the formulation of your loss please ?\nThanks", "body": "@rogertrullo Hi, I am having issues optimizing the dice loss that you specified, the loss term should be something like `loss = criterion(output, target_var) + (1- dice_loss(output, target_var))`. That formulation is not possible because I noticed the upper bound of the function I implemented is not 1, as opposed to the real dice similarity. I rewrote the dice loss so that I can filter out the unwanted label -1, I might have introduced a bug while rewriting the code.\r\n```\r\ndef dice_loss(output, target, weights=1, ignore_index=None):\r\n    output = output.exp()\r\n    encoded_target = output.data.clone().zero_()\r\n    if ignore_index is not None:\r\n        # mask of invalid label\r\n        mask = target == ignore_index\r\n        # clone target to not affect the variable ?\r\n        filtered_target = target.clone()\r\n        # replace invalid label with whatever legal index value\r\n        filtered_target[mask] = 0\r\n        # one hot encoding\r\n        encoded_target.scatter_(1, filtered_target.unsqueeze(1), 1)\r\n        # expand the mask for the encoded target array\r\n        mask = mask.unsqueeze(1).expand(output.data.size())\r\n        # apply 0 to masked pixels\r\n        encoded_target[mask] = 0\r\n    else:\r\n        encoded_target.scatter_(1, target.unsqueeze(1), 1)\r\n    encoded_target = Variable(encoded_target)\r\n\r\n    assert output.size() == encoded_target.size(), \"Input sizes must be equal.\"\r\n    assert output.dim() == 4, \"Input must be a 4D Tensor.\"\r\n\r\n    numerator = (output * encoded_target).sum(dim=3).sum(dim=2)\r\n    denominator = output.pow(2) + encoded_target\r\n    if ignore_index is not None:\r\n        # exclude masked values from den1\r\n        denominator[mask] = 0\r\n\r\n    dice = 2 * (numerator / denominator.sum(dim=3).sum(dim=2)) * weights\r\n    return dice.sum() / dice.size(0)\r\n```\r\nWould you mind to give me your point of view on this code and the formulation of your loss please ?\r\nThanks"}