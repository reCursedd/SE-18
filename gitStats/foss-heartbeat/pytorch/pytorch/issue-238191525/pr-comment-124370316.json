{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/124370316", "pull_request_review_id": 46652582, "id": 124370316, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNDM3MDMxNg==", "diff_hunk": "@@ -506,25 +506,83 @@ static bool THPTensor_(_indexOnce)(PyObject *index, int &indexed_dim,\n }\n \n #ifndef TH_REAL_IS_HALF\n-static bool THPTensor_(_checkAdvancedIndexing)(THPTensor *indexed, PyObject *arg) {\n-  // Currently we only support the integer-array indexing strategy for advanced\n-  // indexing - where we have ndim sequence/LongTensor arguments\n \n+static bool THPTensor_(_checkBasicIntegerArrayIndexing)(THPTensor *indexed, PyObject *arg) {\n   long ndim = THTensor_(nDimension)(LIBRARY_STATE indexed->cdata);\n \n-  // Verify that all of the inputs are either Tensors or Sequences.\n   if (PySequence_Check(arg) && PySequence_Size(arg) == ndim) {\n+    THPObjectPtr fast = THPObjectPtr(PySequence_Fast(arg, NULL));\n     for (Py_ssize_t i = 0; i < ndim; ++i) {\n-      PyObject *item = PySequence_GetItem(arg, i);\n+      PyObject *item = PySequence_Fast_GET_ITEM(fast.get(), i);\n       if (!THPLongTensor_Check(item) && !PySequence_Check(item)) {\n-        Py_DECREF(item);\n         return false;\n       }\n-      Py_DECREF(item);\n     }\n     return true;\n   }\n   return false;\n+}\n+\n+static bool THPTensor_(_checkAdvancedIndexing)(THPTensor *indexed, PyObject *arg) {\n+  // Currently we only support two forms of advanced indexing:\n+  //\n+  // 1. \"Basic Integer Array Indexing\" the integer-array indexing strategy\n+  // where we have ndim sequence/LongTensor arguments\n+  // 2. Combining Advanced Indexing with \":\", with the limitation that\n+  // the advanced indexing dimensions must be adjacent, i.e.:\n+  //\n+  // x[:, :, [1,2], [3,4], :] --> valid\n+  // x[:, [1,2], :, [3,4], :] --> not valid\n+\n+  // Verification, Step #1 -- ndim sequencers\n+  if (THPTensor_(_checkBasicIntegerArrayIndexing)(indexed, arg)) return true;\n+\n+  // Verification, Step #2 -- at least one sequencer, all the rest are\n+  // ':', can be less than ndim indexers, all sequencers adjacent\n+\n+  long ndim = THTensor_(nDimension)(LIBRARY_STATE indexed->cdata);\n+  // TODO: should this be == ndim? --> for now, yes, but to support\n+  // other things, no\n+  if (PySequence_Check(arg) && PySequence_Size(arg) == ndim) {", "path": "torch/csrc/generic/Tensor.cpp", "position": 48, "original_position": 48, "commit_id": "05c83e7c696e55706dafd8316d586b7c1d294c98", "original_commit_id": "95c97b4675842cd550030ee740e0c1393f58937f", "user": {"login": "killeent", "id": 4529377, "node_id": "MDQ6VXNlcjQ1MjkzNzc=", "avatar_url": "https://avatars1.githubusercontent.com/u/4529377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/killeent", "html_url": "https://github.com/killeent", "followers_url": "https://api.github.com/users/killeent/followers", "following_url": "https://api.github.com/users/killeent/following{/other_user}", "gists_url": "https://api.github.com/users/killeent/gists{/gist_id}", "starred_url": "https://api.github.com/users/killeent/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/killeent/subscriptions", "organizations_url": "https://api.github.com/users/killeent/orgs", "repos_url": "https://api.github.com/users/killeent/repos", "events_url": "https://api.github.com/users/killeent/events{/privacy}", "received_events_url": "https://api.github.com/users/killeent/received_events", "type": "User", "site_admin": false}, "body": "So there are a few things at play here. In NumPy indexing, you can have less than `ndim` indexers, so things like this are valid:\r\n\r\n```\r\nx = np.ndarray(shape=(5, 5, 5))\r\nx[[1, 2], [3,4]] --> valid, returns a (2, 2, 5) Tensor\r\n```\r\n\r\nI have not added support for using less than ndim indexers, whether or not they are advanced indexing objects or empty slices.\r\n\r\nHowever, what you are describing is also not quite right:\r\n\r\n```\r\nx = np.ndarray(shape=(5,5,5,5))\r\nidx=np.zeros(shape=(3,3,3), dtype=np.int)\r\nx[idx, :] --> output shape is (3, 3, 3, 5, 5, 5).\r\n```", "created_at": "2017-06-27T19:18:04Z", "updated_at": "2018-11-23T15:34:00Z", "html_url": "https://github.com/pytorch/pytorch/pull/1890#discussion_r124370316", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/1890", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/124370316"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/1890#discussion_r124370316"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/1890"}}, "body_html": "<p>So there are a few things at play here. In NumPy indexing, you can have less than <code>ndim</code> indexers, so things like this are valid:</p>\n<pre><code>x = np.ndarray(shape=(5, 5, 5))\nx[[1, 2], [3,4]] --&gt; valid, returns a (2, 2, 5) Tensor\n</code></pre>\n<p>I have not added support for using less than ndim indexers, whether or not they are advanced indexing objects or empty slices.</p>\n<p>However, what you are describing is also not quite right:</p>\n<pre><code>x = np.ndarray(shape=(5,5,5,5))\nidx=np.zeros(shape=(3,3,3), dtype=np.int)\nx[idx, :] --&gt; output shape is (3, 3, 3, 5, 5, 5).\n</code></pre>", "body_text": "So there are a few things at play here. In NumPy indexing, you can have less than ndim indexers, so things like this are valid:\nx = np.ndarray(shape=(5, 5, 5))\nx[[1, 2], [3,4]] --> valid, returns a (2, 2, 5) Tensor\n\nI have not added support for using less than ndim indexers, whether or not they are advanced indexing objects or empty slices.\nHowever, what you are describing is also not quite right:\nx = np.ndarray(shape=(5,5,5,5))\nidx=np.zeros(shape=(3,3,3), dtype=np.int)\nx[idx, :] --> output shape is (3, 3, 3, 5, 5, 5).", "in_reply_to_id": 124365995}