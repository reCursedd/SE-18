{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/158091868", "pull_request_review_id": 84845218, "id": 158091868, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODA5MTg2OA==", "diff_hunk": "@@ -109,6 +109,12 @@\n \n - func: matmul(Tensor self, Tensor other) -> Tensor\n \n+# we define both of these because 'where' does the broadcast and '_s_where' doesn't;\n+# this allows us to implicitly calculate the broadcast derivative, while only dealing with the\n+# _s_where derivative.\n+- func: where(BoolTensor condition, Tensor self, Tensor other) -> Tensor\n+- func: _s_where(BoolTensor condition, Tensor self, Tensor other) -> Tensor", "path": "aten/src/ATen/native/native_functions.yaml", "position": 8, "original_position": 8, "commit_id": "045dffca6c21cd3afdb1912b86eb2119c54348fb", "original_commit_id": "045dffca6c21cd3afdb1912b86eb2119c54348fb", "user": {"login": "gchanan", "id": 3768583, "node_id": "MDQ6VXNlcjM3Njg1ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3768583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gchanan", "html_url": "https://github.com/gchanan", "followers_url": "https://api.github.com/users/gchanan/followers", "following_url": "https://api.github.com/users/gchanan/following{/other_user}", "gists_url": "https://api.github.com/users/gchanan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gchanan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gchanan/subscriptions", "organizations_url": "https://api.github.com/users/gchanan/orgs", "repos_url": "https://api.github.com/users/gchanan/repos", "events_url": "https://api.github.com/users/gchanan/events{/privacy}", "received_events_url": "https://api.github.com/users/gchanan/received_events", "type": "User", "site_admin": false}, "body": "Cool, thanks @ezyang.\r\n\r\nOn the broadcasting code, I was hoping to avoid that because although the common case of broadcasting is simple, the general case is complex (e.g. torch.matmul has rules that are totally different from everything else).  If you just write what you want to happen in native_functions and it works that seems like the ideal solution to me.", "created_at": "2017-12-20T17:51:38Z", "updated_at": "2018-11-23T15:37:34Z", "html_url": "https://github.com/pytorch/pytorch/pull/4259#discussion_r158091868", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4259", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/158091868"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/4259#discussion_r158091868"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4259"}}, "body_html": "<p>Cool, thanks <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=13564\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ezyang\">@ezyang</a>.</p>\n<p>On the broadcasting code, I was hoping to avoid that because although the common case of broadcasting is simple, the general case is complex (e.g. torch.matmul has rules that are totally different from everything else).  If you just write what you want to happen in native_functions and it works that seems like the ideal solution to me.</p>", "body_text": "Cool, thanks @ezyang.\nOn the broadcasting code, I was hoping to avoid that because although the common case of broadcasting is simple, the general case is complex (e.g. torch.matmul has rules that are totally different from everything else).  If you just write what you want to happen in native_functions and it works that seems like the ideal solution to me.", "in_reply_to_id": 157985913}