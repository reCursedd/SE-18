{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/158332518", "pull_request_review_id": 85128358, "id": 158332518, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODMzMjUxOA==", "diff_hunk": "@@ -109,6 +109,12 @@\n \n - func: matmul(Tensor self, Tensor other) -> Tensor\n \n+# we define both of these because 'where' does the broadcast and '_s_where' doesn't;\n+# this allows us to implicitly calculate the broadcast derivative, while only dealing with the\n+# _s_where derivative.\n+- func: where(BoolTensor condition, Tensor self, Tensor other) -> Tensor\n+- func: _s_where(BoolTensor condition, Tensor self, Tensor other) -> Tensor", "path": "aten/src/ATen/native/native_functions.yaml", "position": 8, "original_position": 8, "commit_id": "045dffca6c21cd3afdb1912b86eb2119c54348fb", "original_commit_id": "045dffca6c21cd3afdb1912b86eb2119c54348fb", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "you is the code for the derivative. I assume it will look approximately like this: `_s_where(cond, grad_x, grad_y)`, so there's no outer `where` to capture the trace.\r\n\r\nEDIT: it looks like this indeed:\r\n```cpp\r\nvariable_list SWhereBackward::apply(const variable_list& grads) {\r\n  variable_list grad_inputs{3};                                  \r\n  auto& grad = grads[0];                                         \r\n  auto condition = condition_.unpack();                          \r\n  if (should_compute_output(0)) {                                \r\n    grad_inputs[0] = condition_info.zeros();                     \r\n  }                                                              \r\n  if (should_compute_output(2)) {                                \r\n    grad_inputs[2] = _s_where(condition, zeros_like(grad), grad);\r\n  }                                                              \r\n  if (should_compute_output(1)) {                                \r\n    grad_inputs[1] = _s_where(condition, grad, zeros_like(grad));\r\n  }                                                              \r\n  return grad_inputs;                                            \r\n}                                                                \r\n```", "created_at": "2017-12-21T17:20:57Z", "updated_at": "2018-11-23T15:37:36Z", "html_url": "https://github.com/pytorch/pytorch/pull/4259#discussion_r158332518", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4259", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/158332518"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/4259#discussion_r158332518"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4259"}}, "body_html": "<p>you is the code for the derivative. I assume it will look approximately like this: <code>_s_where(cond, grad_x, grad_y)</code>, so there's no outer <code>where</code> to capture the trace.</p>\n<p>EDIT: it looks like this indeed:</p>\n<div class=\"highlight highlight-source-c++\"><pre>variable_list <span class=\"pl-en\">SWhereBackward::apply</span>(<span class=\"pl-k\">const</span> variable_list&amp; grads) {\n  variable_list grad_inputs{<span class=\"pl-c1\">3</span>};                                  \n  <span class=\"pl-k\">auto</span>&amp; grad = grads[<span class=\"pl-c1\">0</span>];                                         \n  <span class=\"pl-k\">auto</span> condition = condition_.<span class=\"pl-c1\">unpack</span>();                          \n  <span class=\"pl-k\">if</span> (<span class=\"pl-c1\">should_compute_output</span>(<span class=\"pl-c1\">0</span>)) {                                \n    grad_inputs[<span class=\"pl-c1\">0</span>] = condition_info.<span class=\"pl-c1\">zeros</span>();                     \n  }                                                              \n  <span class=\"pl-k\">if</span> (<span class=\"pl-c1\">should_compute_output</span>(<span class=\"pl-c1\">2</span>)) {                                \n    grad_inputs[<span class=\"pl-c1\">2</span>] = <span class=\"pl-c1\">_s_where</span>(condition, <span class=\"pl-c1\">zeros_like</span>(grad), grad);\n  }                                                              \n  <span class=\"pl-k\">if</span> (<span class=\"pl-c1\">should_compute_output</span>(<span class=\"pl-c1\">1</span>)) {                                \n    grad_inputs[<span class=\"pl-c1\">1</span>] = <span class=\"pl-c1\">_s_where</span>(condition, grad, <span class=\"pl-c1\">zeros_like</span>(grad));\n  }                                                              \n  <span class=\"pl-k\">return</span> grad_inputs;                                            \n}                                                                </pre></div>", "body_text": "you is the code for the derivative. I assume it will look approximately like this: _s_where(cond, grad_x, grad_y), so there's no outer where to capture the trace.\nEDIT: it looks like this indeed:\nvariable_list SWhereBackward::apply(const variable_list& grads) {\n  variable_list grad_inputs{3};                                  \n  auto& grad = grads[0];                                         \n  auto condition = condition_.unpack();                          \n  if (should_compute_output(0)) {                                \n    grad_inputs[0] = condition_info.zeros();                     \n  }                                                              \n  if (should_compute_output(2)) {                                \n    grad_inputs[2] = _s_where(condition, zeros_like(grad), grad);\n  }                                                              \n  if (should_compute_output(1)) {                                \n    grad_inputs[1] = _s_where(condition, grad, zeros_like(grad));\n  }                                                              \n  return grad_inputs;                                            \n}", "in_reply_to_id": 157985913}