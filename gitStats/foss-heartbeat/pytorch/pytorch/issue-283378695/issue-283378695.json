{"url": "https://api.github.com/repos/pytorch/pytorch/issues/4259", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/4259/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/4259/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/4259/events", "html_url": "https://github.com/pytorch/pytorch/pull/4259", "id": 283378695, "node_id": "MDExOlB1bGxSZXF1ZXN0MTU5Mjc4OTUz", "number": 4259, "title": "Implement torch.where(condition, x, y) CPU Variable.", "user": {"login": "gchanan", "id": 3768583, "node_id": "MDQ6VXNlcjM3Njg1ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3768583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gchanan", "html_url": "https://github.com/gchanan", "followers_url": "https://api.github.com/users/gchanan/followers", "following_url": "https://api.github.com/users/gchanan/following{/other_user}", "gists_url": "https://api.github.com/users/gchanan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gchanan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gchanan/subscriptions", "organizations_url": "https://api.github.com/users/gchanan/orgs", "repos_url": "https://api.github.com/users/gchanan/repos", "events_url": "https://api.github.com/users/gchanan/events{/privacy}", "received_events_url": "https://api.github.com/users/gchanan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-12-19T21:42:53Z", "updated_at": "2018-11-23T15:37:37Z", "closed_at": "2017-12-20T18:08:43Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/4259", "html_url": "https://github.com/pytorch/pytorch/pull/4259", "diff_url": "https://github.com/pytorch/pytorch/pull/4259.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/4259.patch"}, "body_html": "<p>This does the following:</p>\n<ol>\n<li>Adds a four-argument CPU apply template</li>\n<li>Renames scalar template arguments from \"CScalar\" to \"scalar\" as previously agreed.</li>\n<li>Uses auto in a bunch of places for the existing apply functions</li>\n<li>Added a 'BoolTensor' specification in native_functions to indicate it should be a BoolTensor in Declarations.yaml (this matters for Variable type checking)</li>\n<li>Implements 'where' using these above; it's more complex than I would like because you want to figure out the broadcasting backwards implicitly and write the derivative only in terms of same size tensors; this requires writing two different functions (where and _s_where) and writing the derivative in terms of _s_where.  I can't currently think of an easier way to do this without adding a bunch of mechanism complexity to the native_functions path.</li>\n</ol>", "body_text": "This does the following:\n\nAdds a four-argument CPU apply template\nRenames scalar template arguments from \"CScalar\" to \"scalar\" as previously agreed.\nUses auto in a bunch of places for the existing apply functions\nAdded a 'BoolTensor' specification in native_functions to indicate it should be a BoolTensor in Declarations.yaml (this matters for Variable type checking)\nImplements 'where' using these above; it's more complex than I would like because you want to figure out the broadcasting backwards implicitly and write the derivative only in terms of same size tensors; this requires writing two different functions (where and _s_where) and writing the derivative in terms of _s_where.  I can't currently think of an easier way to do this without adding a bunch of mechanism complexity to the native_functions path.", "body": "This does the following:\r\n1) Adds a four-argument CPU apply template\r\n2) Renames scalar template arguments from \"CScalar\" to \"scalar\" as previously agreed.\r\n3) Uses auto in a bunch of places for the existing apply functions\r\n4) Added a 'BoolTensor' specification in native_functions to indicate it should be a BoolTensor in Declarations.yaml (this matters for Variable type checking)\r\n5) Implements 'where' using these above; it's more complex than I would like because you want to figure out the broadcasting backwards implicitly and write the derivative only in terms of same size tensors; this requires writing two different functions (where and _s_where) and writing the derivative in terms of _s_where.  I can't currently think of an easier way to do this without adding a bunch of mechanism complexity to the native_functions path."}