{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/340935744", "html_url": "https://github.com/pytorch/pytorch/pull/3410#issuecomment-340935744", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/3410", "id": 340935744, "node_id": "MDEyOklzc3VlQ29tbWVudDM0MDkzNTc0NA==", "user": {"login": "ngimel", "id": 15841449, "node_id": "MDQ6VXNlcjE1ODQxNDQ5", "avatar_url": "https://avatars3.githubusercontent.com/u/15841449?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ngimel", "html_url": "https://github.com/ngimel", "followers_url": "https://api.github.com/users/ngimel/followers", "following_url": "https://api.github.com/users/ngimel/following{/other_user}", "gists_url": "https://api.github.com/users/ngimel/gists{/gist_id}", "starred_url": "https://api.github.com/users/ngimel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ngimel/subscriptions", "organizations_url": "https://api.github.com/users/ngimel/orgs", "repos_url": "https://api.github.com/users/ngimel/repos", "events_url": "https://api.github.com/users/ngimel/events{/privacy}", "received_events_url": "https://api.github.com/users/ngimel/received_events", "type": "User", "site_admin": false}, "created_at": "2017-10-31T23:22:02Z", "updated_at": "2017-10-31T23:22:02Z", "author_association": "CONTRIBUTOR", "body_html": "<p>After the loop you are computing <code>local_mean</code> and <code>local_m2</code> you have to (in pseudo-code)</p>\n<pre><code>local_sum = local_mean * t_size\n</code></pre>\n<p>reduce it across threads, then compute real mean in the 0-th thread (that has reduction result). This <code>mean</code> variable should be <code>__shared__</code>. Then you should adjust local means that threads have, and adjust m2</p>\n<pre><code>mean_diff = mean - local_mean\nadjusted_m2 = local_m2 + mean_diff * mean_diff * t_size\n</code></pre>\n<p>after that reduce <code>adjusted_m2</code> across threads, and then <code>var</code> can be computed as usual.</p>", "body_text": "After the loop you are computing local_mean and local_m2 you have to (in pseudo-code)\nlocal_sum = local_mean * t_size\n\nreduce it across threads, then compute real mean in the 0-th thread (that has reduction result). This mean variable should be __shared__. Then you should adjust local means that threads have, and adjust m2\nmean_diff = mean - local_mean\nadjusted_m2 = local_m2 + mean_diff * mean_diff * t_size\n\nafter that reduce adjusted_m2 across threads, and then var can be computed as usual.", "body": "After the loop you are computing ```local_mean``` and ```local_m2``` you have to (in pseudo-code)\r\n```\r\nlocal_sum = local_mean * t_size\r\n```\r\nreduce it across threads, then compute real mean in the 0-th thread (that has reduction result). This ```mean``` variable should be ```__shared__```. Then you should adjust local means that threads have, and adjust m2\r\n```\r\nmean_diff = mean - local_mean\r\nadjusted_m2 = local_m2 + mean_diff * mean_diff * t_size\r\n```\r\nafter that reduce ```adjusted_m2``` across threads, and then ```var``` can be computed as usual."}