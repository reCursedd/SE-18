{"url": "https://api.github.com/repos/pytorch/pytorch/issues/9666", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/9666/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/9666/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/9666/events", "html_url": "https://github.com/pytorch/pytorch/pull/9666", "id": 343276072, "node_id": "MDExOlB1bGxSZXF1ZXN0MjAyOTc4MTM3", "number": 9666, "title": "add fused dropout kernels", "user": {"login": "ngimel", "id": 15841449, "node_id": "MDQ6VXNlcjE1ODQxNDQ5", "avatar_url": "https://avatars3.githubusercontent.com/u/15841449?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ngimel", "html_url": "https://github.com/ngimel", "followers_url": "https://api.github.com/users/ngimel/followers", "following_url": "https://api.github.com/users/ngimel/following{/other_user}", "gists_url": "https://api.github.com/users/ngimel/gists{/gist_id}", "starred_url": "https://api.github.com/users/ngimel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ngimel/subscriptions", "organizations_url": "https://api.github.com/users/ngimel/orgs", "repos_url": "https://api.github.com/users/ngimel/repos", "events_url": "https://api.github.com/users/ngimel/events{/privacy}", "received_events_url": "https://api.github.com/users/ngimel/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 14, "created_at": "2018-07-20T23:42:23Z", "updated_at": "2018-11-23T15:47:54Z", "closed_at": "2018-08-07T20:36:08Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/9666", "html_url": "https://github.com/pytorch/pytorch/pull/9666", "diff_url": "https://github.com/pytorch/pytorch/pull/9666.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/9666.patch"}, "body_html": "<p>While waiting for dropout to be fully ported to ATen, here's performance fix for the most common dropout case. Dropout is still in python function, I just added efficient path to it. I could not make inplace work, because generator always generates <code>return self</code> for inplace function, and I need to return both original tensor and mask, so inplace goes on the existing pass. Even with non-inplace version, since mask is now a ByteTensor, memory used is just a little larger than for inplace dropout, due to savings on mask.<br>\nOnce dropout is moved to aten, these kernels still can be used for efficient implementation.</p>", "body_text": "While waiting for dropout to be fully ported to ATen, here's performance fix for the most common dropout case. Dropout is still in python function, I just added efficient path to it. I could not make inplace work, because generator always generates return self for inplace function, and I need to return both original tensor and mask, so inplace goes on the existing pass. Even with non-inplace version, since mask is now a ByteTensor, memory used is just a little larger than for inplace dropout, due to savings on mask.\nOnce dropout is moved to aten, these kernels still can be used for efficient implementation.", "body": "While waiting for dropout to be fully ported to ATen, here's performance fix for the most common dropout case. Dropout is still in python function, I just added efficient path to it. I could not make inplace work, because generator always generates `return self` for inplace function, and I need to return both original tensor and mask, so inplace goes on the existing pass. Even with non-inplace version, since mask is now a ByteTensor, memory used is just a little larger than for inplace dropout, due to savings on mask. \r\nOnce dropout is moved to aten, these kernels still can be used for efficient implementation.  "}