{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/216844526", "pull_request_review_id": 154417738, "id": 216844526, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNjg0NDUyNg==", "diff_hunk": "@@ -45,28 +40,14 @@ struct AT_API SparseTensorImpl : public TensorImpl {\n   Tensor indices() const { return indices_; }\n   Tensor values() const { return values_; }\n \n-  IntList sizes() const override;\n-  IntList strides() const override;\n-  bool is_contiguous() const override;\n-  int64_t size(int64_t d) const override;\n-  int64_t stride(int64_t d) const override;\n-  void resize_dim(int64_t ndim) override;\n-  void set_size(int64_t dim, int64_t new_size) override;\n-  void set_stride(int64_t dim, int64_t new_stride) override;\n-  void set_storage_offset(int64_t storage_offset) override;\n-\n   int64_t dim() const override;\n-  TensorImpl* maybe_zero_dim(bool condition_when_zero_dim) override;\n-  const Storage& storage() const override;\n-  int64_t storage_offset() const override;\n \n   // WARNING: This function does NOT preserve invariants of sparseDims/denseDims with\n   // respect to indices and values\n   void raw_resize_(int64_t sparseDims, int64_t denseDims, IntList size) {\n-    size_ = size.vec();\n+    set_sizes_and_strides(size.vec(), {});", "path": "aten/src/ATen/SparseTensorImpl.h", "position": null, "original_position": 35, "commit_id": "0fbe47284a4448e6bfcd90f67ba50df616e939f2", "original_commit_id": "e7d0d8c60163b6b72e1e1ca7a25d928988409e60", "user": {"login": "gchanan", "id": 3768583, "node_id": "MDQ6VXNlcjM3Njg1ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3768583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gchanan", "html_url": "https://github.com/gchanan", "followers_url": "https://api.github.com/users/gchanan/followers", "following_url": "https://api.github.com/users/gchanan/following{/other_user}", "gists_url": "https://api.github.com/users/gchanan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gchanan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gchanan/subscriptions", "organizations_url": "https://api.github.com/users/gchanan/orgs", "repos_url": "https://api.github.com/users/gchanan/repos", "events_url": "https://api.github.com/users/gchanan/events{/privacy}", "received_events_url": "https://api.github.com/users/gchanan/received_events", "type": "User", "site_admin": false}, "body": "the previous usages of set_sizes_and_strides always set the strides, but now it's overloaded in a pretty subtle way.  How about changing the type of strides to optional<IntList> and passing at::nullopt here and checking that if the thing didn't have strides, that nullopt was passed?", "created_at": "2018-09-11T22:29:19Z", "updated_at": "2018-11-23T15:51:05Z", "html_url": "https://github.com/pytorch/pytorch/pull/11259#discussion_r216844526", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/11259", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/216844526"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/11259#discussion_r216844526"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/11259"}}, "body_html": "<p>the previous usages of set_sizes_and_strides always set the strides, but now it's overloaded in a pretty subtle way.  How about changing the type of strides to optional and passing at::nullopt here and checking that if the thing didn't have strides, that nullopt was passed?</p>", "body_text": "the previous usages of set_sizes_and_strides always set the strides, but now it's overloaded in a pretty subtle way.  How about changing the type of strides to optional and passing at::nullopt here and checking that if the thing didn't have strides, that nullopt was passed?"}