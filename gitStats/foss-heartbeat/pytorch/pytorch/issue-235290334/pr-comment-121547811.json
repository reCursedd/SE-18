{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/121547811", "pull_request_review_id": 43585863, "id": 121547811, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMTU0NzgxMQ==", "diff_hunk": "@@ -113,3 +118,91 @@ def btriunpack(LU_data, LU_pivots, unpack_data=True, unpack_pivots=True):\n         P = None\n \n     return P, L, U\n+\n+def matmul(tensor1, tensor2, out=None):\n+    \"\"\"Matrix product of two tensors.\n+\n+    The behavior depends on the dimensionality of the tensors as follows:\n+\n+    - If both tensors are 1-dimensional, the dot product (scalar) is returned.\n+    - If the first argument is 1-dimensional and the second argument is 2-dimensional,\n+      a 1 is prepended to its dimension for the purpose of the matrix multiply.\n+      After the matrix multiply, the prepended dimension is removed.\n+    - If the first argument is 2-dimensional and the second argument is 1-dimensional,\n+      the matrix-vector product is returned\n+    - If both arguments are 2-dimensional, the matrix-matrix product is returned\n+    - If both arguments are at least 2-dimensional and at least one argument is\n+      N-dimensional (where N > 2), then a batched-matrix multiply is returned.  The\n+      non-matrix dimensions are :ref:`broadcasted <broadcasting-semantics>` (and thus\n+      must be broadcastable).  For example, if :attr:`tensor1` is a `j x 1 x n x m` Tensor\n+      and :attr:`tensor2` is a `k x m x p` Tensor, :attr:`out` will be an `j x k x n x p` Tensor.\n+\n+    .. note::\n+\n+        The 1-dimensional dot product version of this function does not support an :attr:`out` parameter.\n+\n+    Arguments:\n+        tensor1 (Tensor): First tensor to be multiplied\n+        tensor2 (Tensor): Second tensor to be multiplied\n+        out (Tensor, optional): Output tensor\n+    \"\"\"\n+\n+    dim_tensor1 = tensor1.dim()\n+    try:\n+        dim_tensor2 = tensor2.dim()\n+    except AttributeError:  # not a tensor\n+        return NotImplemented\n+    if dim_tensor1 == 1 and dim_tensor2 == 1:\n+        if out is None:\n+            return torch.dot(tensor1, tensor2)\n+        else:\n+            raise ValueError(\"out must be None for 1-d tensor matmul, returns a scalar\")\n+    if dim_tensor1 == 2 and dim_tensor2 == 1:\n+        if out is None:\n+            return torch.mv(tensor1, tensor2)\n+        else:\n+            return torch.mv(tensor1, tensor2, out=out)\n+    if dim_tensor1 == 1 and dim_tensor2 == 2:\n+        if out is None:\n+            return torch.mm(tensor1.unsqueeze(0), tensor2).squeeze(0)\n+        else:\n+            return torch.mm(tensor1.unsqueeze(0), tensor2, out=out).squeeze_(0)", "path": "torch/functional.py", "position": null, "original_position": 64, "commit_id": "70f159eaec8d7f95683ad3fb13e68b6ceba9b319", "original_commit_id": "21087db9adc0e20d01c4951bedc973548ec056d4", "user": {"login": "gchanan", "id": 3768583, "node_id": "MDQ6VXNlcjM3Njg1ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3768583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gchanan", "html_url": "https://github.com/gchanan", "followers_url": "https://api.github.com/users/gchanan/followers", "following_url": "https://api.github.com/users/gchanan/following{/other_user}", "gists_url": "https://api.github.com/users/gchanan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gchanan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gchanan/subscriptions", "organizations_url": "https://api.github.com/users/gchanan/orgs", "repos_url": "https://api.github.com/users/gchanan/repos", "events_url": "https://api.github.com/users/gchanan/events{/privacy}", "received_events_url": "https://api.github.com/users/gchanan/received_events", "type": "User", "site_admin": false}, "body": "I think @apaszke is arguing for making squeeze inplace, not the unsqueeze.\r\n\r\nThe reason it's not inplace in the \"out is None\" case is I just copied that code from what was in __matmul__ before; I don't see any reason why it can't be inplace as well.", "created_at": "2017-06-12T23:03:56Z", "updated_at": "2018-11-23T15:33:50Z", "html_url": "https://github.com/pytorch/pytorch/pull/1780#discussion_r121547811", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/1780", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/121547811"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/1780#discussion_r121547811"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/1780"}}, "body_html": "<p>I think <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=4583066\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/apaszke\">@apaszke</a> is arguing for making squeeze inplace, not the unsqueeze.</p>\n<p>The reason it's not inplace in the \"out is None\" case is I just copied that code from what was in <strong>matmul</strong> before; I don't see any reason why it can't be inplace as well.</p>", "body_text": "I think @apaszke is arguing for making squeeze inplace, not the unsqueeze.\nThe reason it's not inplace in the \"out is None\" case is I just copied that code from what was in matmul before; I don't see any reason why it can't be inplace as well.", "in_reply_to_id": 121545690}