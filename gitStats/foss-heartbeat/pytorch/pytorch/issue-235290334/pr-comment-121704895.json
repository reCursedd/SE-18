{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/121704895", "pull_request_review_id": 43753310, "id": 121704895, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMTcwNDg5NQ==", "diff_hunk": "@@ -113,3 +118,91 @@ def btriunpack(LU_data, LU_pivots, unpack_data=True, unpack_pivots=True):\n         P = None\n \n     return P, L, U\n+\n+def matmul(tensor1, tensor2, out=None):\n+    \"\"\"Matrix product of two tensors.\n+\n+    The behavior depends on the dimensionality of the tensors as follows:\n+\n+    - If both tensors are 1-dimensional, the dot product (scalar) is returned.\n+    - If the first argument is 1-dimensional and the second argument is 2-dimensional,\n+      a 1 is prepended to its dimension for the purpose of the matrix multiply.\n+      After the matrix multiply, the prepended dimension is removed.\n+    - If the first argument is 2-dimensional and the second argument is 1-dimensional,\n+      the matrix-vector product is returned\n+    - If both arguments are 2-dimensional, the matrix-matrix product is returned\n+    - If both arguments are at least 2-dimensional and at least one argument is\n+      N-dimensional (where N > 2), then a batched-matrix multiply is returned.  The\n+      non-matrix dimensions are :ref:`broadcasted <broadcasting-semantics>` (and thus\n+      must be broadcastable).  For example, if :attr:`tensor1` is a `j x 1 x n x m` Tensor\n+      and :attr:`tensor2` is a `k x m x p` Tensor, :attr:`out` will be an `j x k x n x p` Tensor.\n+\n+    .. note::\n+\n+        The 1-dimensional dot product version of this function does not support an :attr:`out` parameter.\n+\n+    Arguments:\n+        tensor1 (Tensor): First tensor to be multiplied\n+        tensor2 (Tensor): Second tensor to be multiplied\n+        out (Tensor, optional): Output tensor\n+    \"\"\"\n+\n+    dim_tensor1 = tensor1.dim()\n+    try:\n+        dim_tensor2 = tensor2.dim()\n+    except AttributeError:  # not a tensor\n+        return NotImplemented", "path": "torch/functional.py", "position": null, "original_position": 49, "commit_id": "70f159eaec8d7f95683ad3fb13e68b6ceba9b319", "original_commit_id": "21087db9adc0e20d01c4951bedc973548ec056d4", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Ah I think it was there for a reason, but it no longer fits this place. `NotImplemented` is a special singleton that you can return from the operator overloads to indicate that you don't know what to do, and Python will raise a proper error message (`unsupported operand type(s) for +: 'int' and 'str'`) if both arguments return it. However in here, it will just return `NotImplemented` as if it was a regular value. So we should:\r\n1. Add a type check in `__matmul__` that returns `NotImplemented` if other is not a tensor (we didn't have a check in first one, because it was `self`).\r\n2. Remove the `try ... except ...` here", "created_at": "2017-06-13T15:01:51Z", "updated_at": "2018-11-23T15:33:51Z", "html_url": "https://github.com/pytorch/pytorch/pull/1780#discussion_r121704895", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/1780", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/121704895"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/1780#discussion_r121704895"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/1780"}}, "body_html": "<p>Ah I think it was there for a reason, but it no longer fits this place. <code>NotImplemented</code> is a special singleton that you can return from the operator overloads to indicate that you don't know what to do, and Python will raise a proper error message (<code>unsupported operand type(s) for +: 'int' and 'str'</code>) if both arguments return it. However in here, it will just return <code>NotImplemented</code> as if it was a regular value. So we should:</p>\n<ol>\n<li>Add a type check in <code>__matmul__</code> that returns <code>NotImplemented</code> if other is not a tensor (we didn't have a check in first one, because it was <code>self</code>).</li>\n<li>Remove the <code>try ... except ...</code> here</li>\n</ol>", "body_text": "Ah I think it was there for a reason, but it no longer fits this place. NotImplemented is a special singleton that you can return from the operator overloads to indicate that you don't know what to do, and Python will raise a proper error message (unsupported operand type(s) for +: 'int' and 'str') if both arguments return it. However in here, it will just return NotImplemented as if it was a regular value. So we should:\n\nAdd a type check in __matmul__ that returns NotImplemented if other is not a tensor (we didn't have a check in first one, because it was self).\nRemove the try ... except ... here", "in_reply_to_id": 121545503}