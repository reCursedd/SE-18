{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/121546356", "pull_request_review_id": 43582867, "id": 121546356, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMTU0NjM1Ng==", "diff_hunk": "@@ -113,3 +118,91 @@ def btriunpack(LU_data, LU_pivots, unpack_data=True, unpack_pivots=True):\n         P = None\n \n     return P, L, U\n+\n+def matmul(tensor1, tensor2, out=None):\n+    \"\"\"Matrix product of two tensors.\n+\n+    The behavior depends on the dimensionality of the tensors as follows:\n+\n+    - If both tensors are 1-dimensional, the dot product (scalar) is returned.\n+    - If the first argument is 1-dimensional and the second argument is 2-dimensional,\n+      a 1 is prepended to its dimension for the purpose of the matrix multiply.\n+      After the matrix multiply, the prepended dimension is removed.\n+    - If the first argument is 2-dimensional and the second argument is 1-dimensional,\n+      the matrix-vector product is returned\n+    - If both arguments are 2-dimensional, the matrix-matrix product is returned\n+    - If both arguments are at least 2-dimensional and at least one argument is\n+      N-dimensional (where N > 2), then a batched-matrix multiply is returned.  The\n+      non-matrix dimensions are :ref:`broadcasted <broadcasting-semantics>` (and thus\n+      must be broadcastable).  For example, if :attr:`tensor1` is a `j x 1 x n x m` Tensor\n+      and :attr:`tensor2` is a `k x m x p` Tensor, :attr:`out` will be an `j x k x n x p` Tensor.\n+\n+    .. note::\n+\n+        The 1-dimensional dot product version of this function does not support an :attr:`out` parameter.\n+\n+    Arguments:\n+        tensor1 (Tensor): First tensor to be multiplied\n+        tensor2 (Tensor): Second tensor to be multiplied\n+        out (Tensor, optional): Output tensor\n+    \"\"\"\n+\n+    dim_tensor1 = tensor1.dim()\n+    try:\n+        dim_tensor2 = tensor2.dim()\n+    except AttributeError:  # not a tensor\n+        return NotImplemented\n+    if dim_tensor1 == 1 and dim_tensor2 == 1:\n+        if out is None:\n+            return torch.dot(tensor1, tensor2)\n+        else:\n+            raise ValueError(\"out must be None for 1-d tensor matmul, returns a scalar\")\n+    if dim_tensor1 == 2 and dim_tensor2 == 1:\n+        if out is None:\n+            return torch.mv(tensor1, tensor2)\n+        else:\n+            return torch.mv(tensor1, tensor2, out=out)\n+    if dim_tensor1 == 1 and dim_tensor2 == 2:\n+        if out is None:\n+            return torch.mm(tensor1.unsqueeze(0), tensor2).squeeze(0)\n+        else:\n+            return torch.mm(tensor1.unsqueeze(0), tensor2, out=out).squeeze_(0)\n+    elif dim_tensor1 == 2 and dim_tensor2 == 2:\n+        if out is None:\n+            return torch.mm(tensor1, tensor2)\n+        else:\n+            return torch.mm(tensor1, tensor2, out=out)\n+    elif dim_tensor1 >= 2 and dim_tensor2 >= 2:\n+        # ensure each tensor is at least 3-dimensional\n+        tensor1_exp_size = torch.Size((1,) * max(3 - tensor1.dim(), 0) + tensor1.size())\n+        tensor2_exp_size = torch.Size((1,) * max(3 - tensor2.dim(), 0) + tensor2.size())\n+\n+        # expand the batch portion (i.e. cut off matrix dimensions and expand rest)\n+        expand_batch_portion = torch._C._infer_size(tensor1_exp_size[:-2], tensor2_exp_size[:-2])\n+\n+        # flatten expanded batches\n+        tensor1_expanded = tensor1.expand(*(expand_batch_portion + tensor1_exp_size[-2:])) \\\n+            .contiguous().view(reduce(mul, expand_batch_portion), *tensor1_exp_size[-2:])\n+        tensor2_expanded = tensor2.expand(*(expand_batch_portion + tensor2_exp_size[-2:])) \\\n+            .contiguous().view(reduce(mul, expand_batch_portion), *tensor2_exp_size[-2:])\n+\n+        # reshape batches back into result\n+        total_expansion = expand_batch_portion + (tensor1_exp_size[-2], tensor2_exp_size[-1])\n+        if out is None:\n+            return torch.bmm(tensor1_expanded, tensor2_expanded).view(*(total_expansion))\n+        else:\n+            # We can only safely reshape the output if the output (after the torch.bmm call)\n+            # is contiguous.  This will happen only if:\n+            # 1) We force it to be contiguous\n+            # 2) The output came in as contiguous\n+            # 3) The output came in as the wrong size (so was resized in the torch.bmm call).\n+            #\n+            # But 1) is inconsistent with other functions (e.g. torch.bmm) that will maintain\n+            # output non-contiguity if the size is correct (perhaps we should change this globally?)\n+            # And 3) is a surprising output to accept if we aren't accepting 1).\n+            # So let's just force accepting contiguous tensors.", "path": "torch/functional.py", "position": null, "original_position": 98, "commit_id": "70f159eaec8d7f95683ad3fb13e68b6ceba9b319", "original_commit_id": "21087db9adc0e20d01c4951bedc973548ec056d4", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "I think it's fine to force it to be contiguous. We don't have any specific conventions regarding `out` argument. Some function will resize it, others won't.", "created_at": "2017-06-12T22:53:28Z", "updated_at": "2018-11-23T15:33:50Z", "html_url": "https://github.com/pytorch/pytorch/pull/1780#discussion_r121546356", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/1780", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/121546356"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/1780#discussion_r121546356"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/1780"}}, "body_html": "<p>I think it's fine to force it to be contiguous. We don't have any specific conventions regarding <code>out</code> argument. Some function will resize it, others won't.</p>", "body_text": "I think it's fine to force it to be contiguous. We don't have any specific conventions regarding out argument. Some function will resize it, others won't."}