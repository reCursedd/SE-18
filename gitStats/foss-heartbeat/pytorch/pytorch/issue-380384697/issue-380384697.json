{"url": "https://api.github.com/repos/pytorch/pytorch/issues/13914", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/13914/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/13914/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/13914/events", "html_url": "https://github.com/pytorch/pytorch/pull/13914", "id": 380384697, "node_id": "MDExOlB1bGxSZXF1ZXN0MjMwNTk2MDQ5", "number": 13914, "title": "Speed up fusion compiler tensor allocation", "user": {"login": "zou3519", "id": 5652049, "node_id": "MDQ6VXNlcjU2NTIwNDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/5652049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zou3519", "html_url": "https://github.com/zou3519", "followers_url": "https://api.github.com/users/zou3519/followers", "following_url": "https://api.github.com/users/zou3519/following{/other_user}", "gists_url": "https://api.github.com/users/zou3519/gists{/gist_id}", "starred_url": "https://api.github.com/users/zou3519/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zou3519/subscriptions", "organizations_url": "https://api.github.com/users/zou3519/orgs", "repos_url": "https://api.github.com/users/zou3519/repos", "events_url": "https://api.github.com/users/zou3519/events{/privacy}", "received_events_url": "https://api.github.com/users/zou3519/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-11-13T19:24:25Z", "updated_at": "2018-11-23T15:54:59Z", "closed_at": "2018-11-14T15:28:18Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/13914", "html_url": "https://github.com/pytorch/pytorch/pull/13914", "diff_url": "https://github.com/pytorch/pytorch/pull/13914.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/13914.patch"}, "body_html": "<p>Previously the fusion compiler would allocate an empty tensor and then<br>\nresize it to the correct size. This PR changes the fusion compiler to<br>\nallocate a tensor of the correct size the first time around. The<br>\ndifference between these approaches for a single tensor is around 400ns;<br>\nfor something like LSTMCell's FusionGroup that emits 8 outputs this is<br>\ntheoretically a 3us win.</p>\n<p>Test Plan:</p>\n<ul>\n<li>run tests</li>\n</ul>\n<p>cc <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=38511765\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/mruberry\">@mruberry</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=4583066\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/apaszke\">@apaszke</a></p>", "body_text": "Previously the fusion compiler would allocate an empty tensor and then\nresize it to the correct size. This PR changes the fusion compiler to\nallocate a tensor of the correct size the first time around. The\ndifference between these approaches for a single tensor is around 400ns;\nfor something like LSTMCell's FusionGroup that emits 8 outputs this is\ntheoretically a 3us win.\nTest Plan:\n\nrun tests\n\ncc @mruberry @apaszke", "body": "Previously the fusion compiler would allocate an empty tensor and then\r\nresize it to the correct size. This PR changes the fusion compiler to\r\nallocate a tensor of the correct size the first time around. The\r\ndifference between these approaches for a single tensor is around 400ns;\r\nfor something like LSTMCell's FusionGroup that emits 8 outputs this is\r\ntheoretically a 3us win.\r\n\r\nTest Plan:\r\n- run tests\r\n\r\ncc @mruberry @apaszke "}