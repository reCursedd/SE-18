{"url": "https://api.github.com/repos/pytorch/pytorch/issues/1279", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/1279/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/1279/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/1279/events", "html_url": "https://github.com/pytorch/pytorch/pull/1279", "id": 222444662, "node_id": "MDExOlB1bGxSZXF1ZXN0MTE2MzQ3Mjcy", "number": 1279, "title": "Add flexible bilinear upsampling aspect ratio", "user": {"login": "andrewgiessel", "id": 1160997, "node_id": "MDQ6VXNlcjExNjA5OTc=", "avatar_url": "https://avatars0.githubusercontent.com/u/1160997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andrewgiessel", "html_url": "https://github.com/andrewgiessel", "followers_url": "https://api.github.com/users/andrewgiessel/followers", "following_url": "https://api.github.com/users/andrewgiessel/following{/other_user}", "gists_url": "https://api.github.com/users/andrewgiessel/gists{/gist_id}", "starred_url": "https://api.github.com/users/andrewgiessel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andrewgiessel/subscriptions", "organizations_url": "https://api.github.com/users/andrewgiessel/orgs", "repos_url": "https://api.github.com/users/andrewgiessel/repos", "events_url": "https://api.github.com/users/andrewgiessel/events{/privacy}", "received_events_url": "https://api.github.com/users/andrewgiessel/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2017-04-18T14:55:56Z", "updated_at": "2018-11-23T15:33:06Z", "closed_at": "2017-04-20T19:28:28Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/1279", "html_url": "https://github.com/pytorch/pytorch/pull/1279", "diff_url": "https://github.com/pytorch/pytorch/pull/1279.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/1279.patch"}, "body_html": "<p>This PR addresses <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"221714389\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/1257\" data-hovercard-type=\"issue\" data-hovercard-url=\"/pytorch/pytorch/issues/1257/hovercard\" href=\"https://github.com/pytorch/pytorch/issues/1257\">#1257</a>, which aims to add non-coupled scaling factors for bilinear 2d upsampling.  I've added two new tests, and currently everything passes.  This is a relatively simple change which only touches python code.</p>\n<p>Some high level notes:</p>\n<ul>\n<li>\n<p>The largest changes refactor the Upsampling module (<a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/pytorch/pytorch/commit/f2efeba68d1de36afae9969265469ec510ec2f57/hovercard\" href=\"https://github.com/pytorch/pytorch/commit/f2efeba68d1de36afae9969265469ec510ec2f57\"><tt>f2efeba</tt></a>) and functions (<a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/pytorch/pytorch/commit/0760a4189fea5f574d57569cbae6523ffef36539/hovercard\" href=\"https://github.com/pytorch/pytorch/commit/0760a4189fea5f574d57569cbae6523ffef36539\"><tt>0760a41</tt></a>), moving everything from the base constructor down into the individual classes.  I normally don't like removing that sort of abstraction, but I didn't see a good way to cleanly check the inputs for all cases at that higher level.</p>\n</li>\n<li>\n<p>I changed <code>scale_factor</code> to be a pair (tuple) of non-negative ints instead of a single int, and edited two lines in the <code>foward()</code> of <code>UpsamplingBilinear2d</code> to reflect this.  If a single number is passed in for scaling, it is duplicated in the tuple.</p>\n</li>\n<li>\n<p>docstrings have been adjusted throughout</p>\n</li>\n<li>\n<p>I added 2 tests.  Not sure if this is sufficient, but given that nothing breaks, seems ok for now.  As an aside, is there a way to run just one test?</p>\n</li>\n</ul>\n<p>Thanks, and input welcome.  Tagging <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1310570\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/soumith\">@soumith</a> and <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=9110200\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/fmassa\">@fmassa</a>, who commented on the initial issue.</p>", "body_text": "This PR addresses #1257, which aims to add non-coupled scaling factors for bilinear 2d upsampling.  I've added two new tests, and currently everything passes.  This is a relatively simple change which only touches python code.\nSome high level notes:\n\n\nThe largest changes refactor the Upsampling module (f2efeba) and functions (0760a41), moving everything from the base constructor down into the individual classes.  I normally don't like removing that sort of abstraction, but I didn't see a good way to cleanly check the inputs for all cases at that higher level.\n\n\nI changed scale_factor to be a pair (tuple) of non-negative ints instead of a single int, and edited two lines in the foward() of UpsamplingBilinear2d to reflect this.  If a single number is passed in for scaling, it is duplicated in the tuple.\n\n\ndocstrings have been adjusted throughout\n\n\nI added 2 tests.  Not sure if this is sufficient, but given that nothing breaks, seems ok for now.  As an aside, is there a way to run just one test?\n\n\nThanks, and input welcome.  Tagging @soumith and @fmassa, who commented on the initial issue.", "body": "This PR addresses #1257, which aims to add non-coupled scaling factors for bilinear 2d upsampling.  I've added two new tests, and currently everything passes.  This is a relatively simple change which only touches python code.\r\n\r\nSome high level notes:\r\n\r\n* The largest changes refactor the Upsampling module (f2efeba) and functions (0760a41), moving everything from the base constructor down into the individual classes.  I normally don't like removing that sort of abstraction, but I didn't see a good way to cleanly check the inputs for all cases at that higher level.  \r\n\r\n* I changed `scale_factor` to be a pair (tuple) of non-negative ints instead of a single int, and edited two lines in the `foward()` of `UpsamplingBilinear2d` to reflect this.  If a single number is passed in for scaling, it is duplicated in the tuple.\r\n\r\n* docstrings have been adjusted throughout\r\n\r\n* I added 2 tests.  Not sure if this is sufficient, but given that nothing breaks, seems ok for now.  As an aside, is there a way to run just one test?\r\n\r\nThanks, and input welcome.  Tagging @soumith and @fmassa, who commented on the initial issue."}