{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/112007988", "pull_request_review_id": 33290085, "id": 112007988, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMjAwNzk4OA==", "diff_hunk": "@@ -62,15 +59,39 @@ def backward(self, grad_output):\n         return grad_input\n \n \n-class UpsamplingBilinear2d(_UpsamplingBase):\n+class UpsamplingBilinear2d(Function):\n+\n+    def __init__(self, size=None, scale_factor=None):\n+        super(UpsamplingBilinear2d, self).__init__()\n+        if size is None and scale_factor is None:\n+            raise ValueError('either size or scale_factor should be defined')\n+        if scale_factor is not None:\n+            if not isinstance(scale_factor, (Integral, tuple)):", "path": "torch/nn/_functions/thnn/upsampling.py", "position": null, "original_position": 36, "commit_id": "b72e375819b41e67a9003436a60ad20599dff389", "original_commit_id": "c31ded0c9f2613d7c5fb51cd0be738ba9fed4902", "user": {"login": "andrewgiessel", "id": 1160997, "node_id": "MDQ6VXNlcjExNjA5OTc=", "avatar_url": "https://avatars0.githubusercontent.com/u/1160997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andrewgiessel", "html_url": "https://github.com/andrewgiessel", "followers_url": "https://api.github.com/users/andrewgiessel/followers", "following_url": "https://api.github.com/users/andrewgiessel/following{/other_user}", "gists_url": "https://api.github.com/users/andrewgiessel/gists{/gist_id}", "starred_url": "https://api.github.com/users/andrewgiessel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andrewgiessel/subscriptions", "organizations_url": "https://api.github.com/users/andrewgiessel/orgs", "repos_url": "https://api.github.com/users/andrewgiessel/repos", "events_url": "https://api.github.com/users/andrewgiessel/events{/privacy}", "received_events_url": "https://api.github.com/users/andrewgiessel/received_events", "type": "User", "site_admin": false}, "body": "I used this constraint for a couple reasons:\r\n\r\n1) the current codebase and THNN both enforce integer scaling factors\r\n2) while you can request non-integer scaling factors implicitly by using the `size` keyword in bilinear upsampling, doing this explicitly for arbitrary floats is not well defined for any resulting image that doesn't have integer pixel sizes.  Does one round up?  Down? \r\n3) I wanted to conceptually mirror the pooling modules as much as possible.", "created_at": "2017-04-18T16:58:29Z", "updated_at": "2018-11-23T15:33:06Z", "html_url": "https://github.com/pytorch/pytorch/pull/1279#discussion_r112007988", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/1279", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/112007988"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/1279#discussion_r112007988"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/1279"}}, "body_html": "<p>I used this constraint for a couple reasons:</p>\n<ol>\n<li>the current codebase and THNN both enforce integer scaling factors</li>\n<li>while you can request non-integer scaling factors implicitly by using the <code>size</code> keyword in bilinear upsampling, doing this explicitly for arbitrary floats is not well defined for any resulting image that doesn't have integer pixel sizes.  Does one round up?  Down?</li>\n<li>I wanted to conceptually mirror the pooling modules as much as possible.</li>\n</ol>", "body_text": "I used this constraint for a couple reasons:\n\nthe current codebase and THNN both enforce integer scaling factors\nwhile you can request non-integer scaling factors implicitly by using the size keyword in bilinear upsampling, doing this explicitly for arbitrary floats is not well defined for any resulting image that doesn't have integer pixel sizes.  Does one round up?  Down?\nI wanted to conceptually mirror the pooling modules as much as possible.", "in_reply_to_id": 111991036}