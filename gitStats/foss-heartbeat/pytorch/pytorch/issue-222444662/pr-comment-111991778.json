{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/111991778", "pull_request_review_id": 33271960, "id": 111991778, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMTk5MTc3OA==", "diff_hunk": "@@ -6,10 +6,10 @@\n from . import _all_functions\n \n \n-class _UpsamplingBase(Function):\n-\n+class UpsamplingNearest2d(Function):\n+    \n     def __init__(self, size=None, scale_factor=None):\n-        super(_UpsamplingBase, self).__init__()\n+        super(UpsamplingNearest2d, self).__init__()", "path": "torch/nn/_functions/thnn/upsampling.py", "position": null, "original_position": 10, "commit_id": "b72e375819b41e67a9003436a60ad20599dff389", "original_commit_id": "c31ded0c9f2613d7c5fb51cd0be738ba9fed4902", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "I think leaving the base class makes sense, as we could allow tuple scale_factors for upsampling nearest too. Then, a subclass constructor would check that the factors are integral and equal.", "created_at": "2017-04-18T15:52:11Z", "updated_at": "2018-11-23T15:33:05Z", "html_url": "https://github.com/pytorch/pytorch/pull/1279#discussion_r111991778", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/1279", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/111991778"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/1279#discussion_r111991778"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/1279"}}, "body_html": "<p>I think leaving the base class makes sense, as we could allow tuple scale_factors for upsampling nearest too. Then, a subclass constructor would check that the factors are integral and equal.</p>", "body_text": "I think leaving the base class makes sense, as we could allow tuple scale_factors for upsampling nearest too. Then, a subclass constructor would check that the factors are integral and equal."}