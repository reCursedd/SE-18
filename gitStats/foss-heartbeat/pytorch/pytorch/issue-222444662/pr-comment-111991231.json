{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/111991231", "pull_request_review_id": 33271960, "id": 111991231, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMTk5MTIzMQ==", "diff_hunk": "@@ -62,15 +59,39 @@ def backward(self, grad_output):\n         return grad_input\n \n \n-class UpsamplingBilinear2d(_UpsamplingBase):\n+class UpsamplingBilinear2d(Function):\n+\n+    def __init__(self, size=None, scale_factor=None):\n+        super(UpsamplingBilinear2d, self).__init__()\n+        if size is None and scale_factor is None:\n+            raise ValueError('either size or scale_factor should be defined')\n+        if scale_factor is not None:\n+            if not isinstance(scale_factor, (Integral, tuple)):\n+                raise ValueError('scale_factor must be a non-negative integer, or a tuple of non-negative integers')\n+            if isinstance(scale_factor, tuple):\n+                try:\n+                    assert len(scale_factor) == 2\n+                    for i in scale_factor:\n+                        assert isinstance(i, Integral)\n+                        assert i >= 1\n+                except AssertionError as e:\n+                    raise ValueError('scale_factor must be a non-negative integer, or a tuple of non-negative integers')\n+                \n+        if size is not None and not isinstance(size, tuple):\n+            size = (size, size)\n+        if scale_factor is not None and not isinstance(scale_factor, tuple):\n+            scale_factor = (scale_factor, scale_factor)", "path": "torch/nn/_functions/thnn/upsampling.py", "position": null, "original_position": 50, "commit_id": "b72e375819b41e67a9003436a60ad20599dff389", "original_commit_id": "c31ded0c9f2613d7c5fb51cd0be738ba9fed4902", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "That's what a `_pair` helper from `_utils` is for.\r\n\r\nAlso, if you do that before the type checks, you can get rid of all `isinstance(scale_factor, tuple)` checks, because you can be sure that it is a tuple now.", "created_at": "2017-04-18T15:50:17Z", "updated_at": "2018-11-23T15:33:05Z", "html_url": "https://github.com/pytorch/pytorch/pull/1279#discussion_r111991231", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/1279", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/111991231"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/1279#discussion_r111991231"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/1279"}}, "body_html": "<p>That's what a <code>_pair</code> helper from <code>_utils</code> is for.</p>\n<p>Also, if you do that before the type checks, you can get rid of all <code>isinstance(scale_factor, tuple)</code> checks, because you can be sure that it is a tuple now.</p>", "body_text": "That's what a _pair helper from _utils is for.\nAlso, if you do that before the type checks, you can get rid of all isinstance(scale_factor, tuple) checks, because you can be sure that it is a tuple now."}