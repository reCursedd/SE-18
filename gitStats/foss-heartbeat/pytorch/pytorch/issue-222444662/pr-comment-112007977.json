{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/112007977", "pull_request_review_id": 33290078, "id": 112007977, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMjAwNzk3Nw==", "diff_hunk": "@@ -6,10 +6,10 @@\n from . import _all_functions\n \n \n-class _UpsamplingBase(Function):\n-\n+class UpsamplingNearest2d(Function):\n+    \n     def __init__(self, size=None, scale_factor=None):\n-        super(_UpsamplingBase, self).__init__()\n+        super(UpsamplingNearest2d, self).__init__()", "path": "torch/nn/_functions/thnn/upsampling.py", "position": null, "original_position": 10, "commit_id": "b72e375819b41e67a9003436a60ad20599dff389", "original_commit_id": "c31ded0c9f2613d7c5fb51cd0be738ba9fed4902", "user": {"login": "andrewgiessel", "id": 1160997, "node_id": "MDQ6VXNlcjExNjA5OTc=", "avatar_url": "https://avatars0.githubusercontent.com/u/1160997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andrewgiessel", "html_url": "https://github.com/andrewgiessel", "followers_url": "https://api.github.com/users/andrewgiessel/followers", "following_url": "https://api.github.com/users/andrewgiessel/following{/other_user}", "gists_url": "https://api.github.com/users/andrewgiessel/gists{/gist_id}", "starred_url": "https://api.github.com/users/andrewgiessel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andrewgiessel/subscriptions", "organizations_url": "https://api.github.com/users/andrewgiessel/orgs", "repos_url": "https://api.github.com/users/andrewgiessel/repos", "events_url": "https://api.github.com/users/andrewgiessel/events{/privacy}", "received_events_url": "https://api.github.com/users/andrewgiessel/received_events", "type": "User", "site_admin": false}, "body": "Upsampling nearest restricts scaling to have equal aspect ratios and integer values [at the C level](https://github.com/torch/nn/blob/master/lib/THNN/generic/SpatialUpSamplingNearest.c#L8).  In contrast, bilinear sampling is more flexible and uses the specified [output size directly](https://github.com/torch/nn/blob/master/lib/THNN/generic/SpatialUpSamplingBilinear.c#L11-L12).  Perhaps there is a way to do NN with differing output aspect ratios, but that seems out of the scope of this PR or even this repo.", "created_at": "2017-04-18T16:58:27Z", "updated_at": "2018-11-23T15:33:06Z", "html_url": "https://github.com/pytorch/pytorch/pull/1279#discussion_r112007977", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/1279", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/112007977"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/1279#discussion_r112007977"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/1279"}}, "body_html": "<p>Upsampling nearest restricts scaling to have equal aspect ratios and integer values <a href=\"https://github.com/torch/nn/blob/master/lib/THNN/generic/SpatialUpSamplingNearest.c#L8\">at the C level</a>.  In contrast, bilinear sampling is more flexible and uses the specified <a href=\"https://github.com/torch/nn/blob/master/lib/THNN/generic/SpatialUpSamplingBilinear.c#L11-L12\">output size directly</a>.  Perhaps there is a way to do NN with differing output aspect ratios, but that seems out of the scope of this PR or even this repo.</p>", "body_text": "Upsampling nearest restricts scaling to have equal aspect ratios and integer values at the C level.  In contrast, bilinear sampling is more flexible and uses the specified output size directly.  Perhaps there is a way to do NN with differing output aspect ratios, but that seems out of the scope of this PR or even this repo.", "in_reply_to_id": 111991778}