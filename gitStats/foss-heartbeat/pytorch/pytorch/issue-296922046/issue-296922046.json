{"url": "https://api.github.com/repos/pytorch/pytorch/issues/5226", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/5226/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/5226/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/5226/events", "html_url": "https://github.com/pytorch/pytorch/pull/5226", "id": 296922046, "node_id": "MDExOlB1bGxSZXF1ZXN0MTY4OTgzNzQy", "number": 5226, "title": "[EASY] CUDA support for JIT-compiling C++ extensions", "user": {"login": "goldsborough", "id": 6429851, "node_id": "MDQ6VXNlcjY0Mjk4NTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/6429851?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goldsborough", "html_url": "https://github.com/goldsborough", "followers_url": "https://api.github.com/users/goldsborough/followers", "following_url": "https://api.github.com/users/goldsborough/following{/other_user}", "gists_url": "https://api.github.com/users/goldsborough/gists{/gist_id}", "starred_url": "https://api.github.com/users/goldsborough/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goldsborough/subscriptions", "organizations_url": "https://api.github.com/users/goldsborough/orgs", "repos_url": "https://api.github.com/users/goldsborough/repos", "events_url": "https://api.github.com/users/goldsborough/events{/privacy}", "received_events_url": "https://api.github.com/users/goldsborough/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-02-13T23:21:35Z", "updated_at": "2018-02-15T20:50:45Z", "closed_at": "2018-02-15T20:50:01Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/5226", "html_url": "https://github.com/pytorch/pytorch/pull/5226", "diff_url": "https://github.com/pytorch/pytorch/pull/5226.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/5226.patch"}, "body_html": "<p>This PR adds CUDA support to the JIT compilation mechanism of our C++ extensions.</p>\n<p>This involved:</p>\n<ul>\n<li>Using different Ninja build rules for different files based on their extension,</li>\n<li>Conditionally passing certain library directories and libraries to the linker,</li>\n<li>Adding an <code>extra_cuda_cflags</code> argument to <code>torch.utils.cpp_extension.load()</code></li>\n</ul>\n<p>The mixed compilation is fairly transparent to the user, i.e. the <code>torch.utils.cpp_extension.load()</code> call is essentially the same as for pure C++.</p>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=370202\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/zdevito\">@zdevito</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=4583066\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/apaszke\">@apaszke</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=13564\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ezyang\">@ezyang</a></p>", "body_text": "This PR adds CUDA support to the JIT compilation mechanism of our C++ extensions.\nThis involved:\n\nUsing different Ninja build rules for different files based on their extension,\nConditionally passing certain library directories and libraries to the linker,\nAdding an extra_cuda_cflags argument to torch.utils.cpp_extension.load()\n\nThe mixed compilation is fairly transparent to the user, i.e. the torch.utils.cpp_extension.load() call is essentially the same as for pure C++.\n@zdevito @apaszke @ezyang", "body": "This PR adds CUDA support to the JIT compilation mechanism of our C++ extensions.\r\n\r\nThis involved:\r\n- Using different Ninja build rules for different files based on their extension,\r\n- Conditionally passing certain library directories and libraries to the linker,\r\n- Adding an `extra_cuda_cflags` argument to `torch.utils.cpp_extension.load()`\r\n\r\nThe mixed compilation is fairly transparent to the user, i.e. the `torch.utils.cpp_extension.load()` call is essentially the same as for pure C++.\r\n\r\n@zdevito @apaszke @ezyang "}