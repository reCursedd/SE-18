{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/409344822", "html_url": "https://github.com/pytorch/pytorch/issues/9146#issuecomment-409344822", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/9146", "id": 409344822, "node_id": "MDEyOklzc3VlQ29tbWVudDQwOTM0NDgyMg==", "user": {"login": "soumith", "id": 1310570, "node_id": "MDQ6VXNlcjEzMTA1NzA=", "avatar_url": "https://avatars0.githubusercontent.com/u/1310570?v=4", "gravatar_id": "", "url": "https://api.github.com/users/soumith", "html_url": "https://github.com/soumith", "followers_url": "https://api.github.com/users/soumith/followers", "following_url": "https://api.github.com/users/soumith/following{/other_user}", "gists_url": "https://api.github.com/users/soumith/gists{/gist_id}", "starred_url": "https://api.github.com/users/soumith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/soumith/subscriptions", "organizations_url": "https://api.github.com/users/soumith/orgs", "repos_url": "https://api.github.com/users/soumith/repos", "events_url": "https://api.github.com/users/soumith/events{/privacy}", "received_events_url": "https://api.github.com/users/soumith/received_events", "type": "User", "site_admin": false}, "created_at": "2018-07-31T19:46:28Z", "updated_at": "2018-07-31T19:46:28Z", "author_association": "MEMBER", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=13595236\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/jfolt\">@jfolt</a></p>\n<blockquote>\n<p>Whatever rounding occurs in the first case, should happen in exactly the same way in the second case.</p>\n</blockquote>\n<p>This is not how it works. Depending on the input shape, the BLAS library (that does matrix multiplication) will order the for loops wildly differently. There's a whole set of schemes to determine which loop-ordering to use. And the loop ordering determines the order in which the elements get added up / multiplied.<br>\nAlmost always you dont notice these things because generally in floating point you dont operate on large numbers combined with small numbers very frequently. But when you do, you notice as the errors amplify.</p>", "body_text": "@jfolt\n\nWhatever rounding occurs in the first case, should happen in exactly the same way in the second case.\n\nThis is not how it works. Depending on the input shape, the BLAS library (that does matrix multiplication) will order the for loops wildly differently. There's a whole set of schemes to determine which loop-ordering to use. And the loop ordering determines the order in which the elements get added up / multiplied.\nAlmost always you dont notice these things because generally in floating point you dont operate on large numbers combined with small numbers very frequently. But when you do, you notice as the errors amplify.", "body": "@jfolt \r\n\r\n> Whatever rounding occurs in the first case, should happen in exactly the same way in the second case.\r\n\r\nThis is not how it works. Depending on the input shape, the BLAS library (that does matrix multiplication) will order the for loops wildly differently. There's a whole set of schemes to determine which loop-ordering to use. And the loop ordering determines the order in which the elements get added up / multiplied.\r\nAlmost always you dont notice these things because generally in floating point you dont operate on large numbers combined with small numbers very frequently. But when you do, you notice as the errors amplify."}