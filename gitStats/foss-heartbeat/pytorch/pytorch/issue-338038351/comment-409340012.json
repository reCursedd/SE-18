{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/409340012", "html_url": "https://github.com/pytorch/pytorch/issues/9146#issuecomment-409340012", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/9146", "id": 409340012, "node_id": "MDEyOklzc3VlQ29tbWVudDQwOTM0MDAxMg==", "user": {"login": "jfolt", "id": 13595236, "node_id": "MDQ6VXNlcjEzNTk1MjM2", "avatar_url": "https://avatars2.githubusercontent.com/u/13595236?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jfolt", "html_url": "https://github.com/jfolt", "followers_url": "https://api.github.com/users/jfolt/followers", "following_url": "https://api.github.com/users/jfolt/following{/other_user}", "gists_url": "https://api.github.com/users/jfolt/gists{/gist_id}", "starred_url": "https://api.github.com/users/jfolt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jfolt/subscriptions", "organizations_url": "https://api.github.com/users/jfolt/orgs", "repos_url": "https://api.github.com/users/jfolt/repos", "events_url": "https://api.github.com/users/jfolt/events{/privacy}", "received_events_url": "https://api.github.com/users/jfolt/received_events", "type": "User", "site_admin": false}, "created_at": "2018-07-31T19:29:17Z", "updated_at": "2018-07-31T19:29:17Z", "author_association": "NONE", "body_html": "<p>Thanks for commenting.</p>\n<p>Yes, there is a float rounding involved in those operations. But that is not the point.</p>\n<p>Those 2 are equivalent operations. In the first case I run all batch members through the linear layer (W*X+b) in one operation, and in second case I do exactly the same but one batch member at a time.</p>\n<p>Whatever rounding occurs in the first case, should happen in exactly the same way in the second case.</p>\n<p>Feel free to ignore this request. I thought fixing it would lead a more deterministic behavior in LinearLayer, so it could help pytorch. But I can implement the same using basic matrix multiplication/addition like torch.mm() which works fine.</p>", "body_text": "Thanks for commenting.\nYes, there is a float rounding involved in those operations. But that is not the point.\nThose 2 are equivalent operations. In the first case I run all batch members through the linear layer (W*X+b) in one operation, and in second case I do exactly the same but one batch member at a time.\nWhatever rounding occurs in the first case, should happen in exactly the same way in the second case.\nFeel free to ignore this request. I thought fixing it would lead a more deterministic behavior in LinearLayer, so it could help pytorch. But I can implement the same using basic matrix multiplication/addition like torch.mm() which works fine.", "body": "Thanks for commenting.\r\n\r\nYes, there is a float rounding involved in those operations. But that is not the point.\r\n\r\nThose 2 are equivalent operations. In the first case I run all batch members through the linear layer (W*X+b) in one operation, and in second case I do exactly the same but one batch member at a time.\r\n\r\nWhatever rounding occurs in the first case, should happen in exactly the same way in the second case.\r\n\r\nFeel free to ignore this request. I thought fixing it would lead a more deterministic behavior in LinearLayer, so it could help pytorch. But I can implement the same using basic matrix multiplication/addition like torch.mm() which works fine."}