{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/361661661", "html_url": "https://github.com/pytorch/pytorch/issues/4865#issuecomment-361661661", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/4865", "id": 361661661, "node_id": "MDEyOklzc3VlQ29tbWVudDM2MTY2MTY2MQ==", "user": {"login": "zou3519", "id": 5652049, "node_id": "MDQ6VXNlcjU2NTIwNDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/5652049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zou3519", "html_url": "https://github.com/zou3519", "followers_url": "https://api.github.com/users/zou3519/followers", "following_url": "https://api.github.com/users/zou3519/following{/other_user}", "gists_url": "https://api.github.com/users/zou3519/gists{/gist_id}", "starred_url": "https://api.github.com/users/zou3519/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zou3519/subscriptions", "organizations_url": "https://api.github.com/users/zou3519/orgs", "repos_url": "https://api.github.com/users/zou3519/repos", "events_url": "https://api.github.com/users/zou3519/events{/privacy}", "received_events_url": "https://api.github.com/users/zou3519/received_events", "type": "User", "site_admin": false}, "created_at": "2018-01-30T17:03:04Z", "updated_at": "2018-01-30T17:03:04Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=3657248\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/khanrc\">@khanrc</a> It's \"normal\" for python code to produce garbage that the garbage collector is able to collect. For example, if the replicate function creates python objects that contain reference cycles, those python objects will stay around until garbage collection because there is no other way for python to automatically reclaim those objects.</p>\n<p>That being said, producing reference cycles is generally not a good thing, especially if it's significantly slowing down your training, and I'm not sure why DataParallel would do this. I'm looking into it.</p>", "body_text": "@khanrc It's \"normal\" for python code to produce garbage that the garbage collector is able to collect. For example, if the replicate function creates python objects that contain reference cycles, those python objects will stay around until garbage collection because there is no other way for python to automatically reclaim those objects.\nThat being said, producing reference cycles is generally not a good thing, especially if it's significantly slowing down your training, and I'm not sure why DataParallel would do this. I'm looking into it.", "body": "@khanrc It's \"normal\" for python code to produce garbage that the garbage collector is able to collect. For example, if the replicate function creates python objects that contain reference cycles, those python objects will stay around until garbage collection because there is no other way for python to automatically reclaim those objects.\r\n\r\nThat being said, producing reference cycles is generally not a good thing, especially if it's significantly slowing down your training, and I'm not sure why DataParallel would do this. I'm looking into it."}