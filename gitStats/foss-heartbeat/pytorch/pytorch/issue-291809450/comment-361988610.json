{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/361988610", "html_url": "https://github.com/pytorch/pytorch/issues/4865#issuecomment-361988610", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/4865", "id": 361988610, "node_id": "MDEyOklzc3VlQ29tbWVudDM2MTk4ODYxMA==", "user": {"login": "zou3519", "id": 5652049, "node_id": "MDQ6VXNlcjU2NTIwNDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/5652049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zou3519", "html_url": "https://github.com/zou3519", "followers_url": "https://api.github.com/users/zou3519/followers", "following_url": "https://api.github.com/users/zou3519/following{/other_user}", "gists_url": "https://api.github.com/users/zou3519/gists{/gist_id}", "starred_url": "https://api.github.com/users/zou3519/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zou3519/subscriptions", "organizations_url": "https://api.github.com/users/zou3519/orgs", "repos_url": "https://api.github.com/users/zou3519/repos", "events_url": "https://api.github.com/users/zou3519/events{/privacy}", "received_events_url": "https://api.github.com/users/zou3519/received_events", "type": "User", "site_admin": false}, "created_at": "2018-01-31T16:30:49Z", "updated_at": "2018-01-31T19:07:34Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=3657248\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/khanrc\">@khanrc</a> Turns out I was running python 3. On python 2.7 there are indeed reference cycles being created with a large number of objects. Am investigating.</p>\n<p>edit: As far as I can tell, the objects with reference cycles that are being garbage collected are created internally by python 2.7 by not by python 3. Those objects also do not take up a lot of memory. You can use <a href=\"https://docs.python.org/2/library/gc.html#gc.set_threshold\" rel=\"nofollow\">gc.set_threshold</a> to control how frequently the python gc runs, or use Python 3 if the objects being created by Python 2.7 bother you.</p>\n<p>I don't think this is a pytorch issue; there's definitely no memory leak, because garbage collection is a normal python thing. Let me know what you think, <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=3657248\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/khanrc\">@khanrc</a>.</p>", "body_text": "@khanrc Turns out I was running python 3. On python 2.7 there are indeed reference cycles being created with a large number of objects. Am investigating.\nedit: As far as I can tell, the objects with reference cycles that are being garbage collected are created internally by python 2.7 by not by python 3. Those objects also do not take up a lot of memory. You can use gc.set_threshold to control how frequently the python gc runs, or use Python 3 if the objects being created by Python 2.7 bother you.\nI don't think this is a pytorch issue; there's definitely no memory leak, because garbage collection is a normal python thing. Let me know what you think, @khanrc.", "body": "@khanrc Turns out I was running python 3. On python 2.7 there are indeed reference cycles being created with a large number of objects. Am investigating.\r\n\r\nedit: As far as I can tell, the objects with reference cycles that are being garbage collected are created internally by python 2.7 by not by python 3. Those objects also do not take up a lot of memory. You can use [gc.set_threshold](https://docs.python.org/2/library/gc.html#gc.set_threshold) to control how frequently the python gc runs, or use Python 3 if the objects being created by Python 2.7 bother you.\r\n\r\nI don't think this is a pytorch issue; there's definitely no memory leak, because garbage collection is a normal python thing. Let me know what you think, @khanrc."}