{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/4807", "id": 164658070, "node_id": "MDExOlB1bGxSZXF1ZXN0MTY0NjU4MDcw", "html_url": "https://github.com/pytorch/pytorch/pull/4807", "diff_url": "https://github.com/pytorch/pytorch/pull/4807.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/4807.patch", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/4807", "number": 4807, "state": "closed", "locked": false, "title": "Fix #4480 by tracing inputs before running function.", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "The DCE trick says that if I have y = f(x), and f is internally implemented as\r\ng, it's OK to trace both g and f. Recall the tracing algorithm is:\r\n\r\n    enter f(x)\r\n    compute its result y\r\n    trace y = f(x)\r\n    return from f\r\n\r\nSo when you run the example above, you'll do this:\r\n\r\n    # suppose x is mapped to %1\r\n    enter f(x)\r\n    enter g(x)\r\n    result of g is y\r\n    trace y = g(x a.k.a. %1) (mapping y to %2)\r\n    return from g\r\n    result of f is y\r\n    trace y = f(x a.k.a. %1) (remapping y to %3)\r\n    return from f\r\n\r\nand end up with a trace like this:\r\n\r\n    %2 = g(%1)\r\n    %3 = f(%1)\r\n\r\n... only %3 is live, because %2 was killed from the mapping...  Subsequent DCE\r\nwill eliminate the invocation of g and you'll only see f in the final trace.\r\n\r\nHowever, if f and g are inplace functions, the machinery breaks:\r\n\r\n    # suppose x is mapped to %1\r\n    enter f(x)\r\n    enter g(x)\r\n    result of g is x\r\n    trace x = g(x a.k.a. %1) (remapping x to %2)\r\n    return from g\r\n    result of f is x\r\n    trace x = f(x a.k.a. %2) (remapping x to %3)\r\n    return from f\r\n    resulting in:\r\n\r\n    %2 = g(%1)\r\n    %3 = f(%2) # OOPS\r\n\r\nThis commit changes the strategy so we instead do this:\r\n\r\n    enter f(x)\r\n    trace f(x)\r\n    compute its result y\r\n    trace y = f(x)  (computed above)\r\n    return from f\r\n\r\nNow we get the correct Value before it is overwritten.\r\nHere is what the new trace code looks like:\r\n\r\n    jit::tracer::PreTraceInfo trace_info;\r\n    if (jit::tracer::isTracing( self, index )) {\r\n      trace_info = jit::tracer::preRecordTrace( \"index_fill\", { self, index } );\r\n      setattr(trace_info.n, jit::Symbol(\"dim\"), dim);\r\n      setattr(trace_info.n, jit::Symbol(\"value\"), value);\r\n    }\r\n    baseType->index_fill_(self_, dim, index_, value);\r\n    increment_version(self);\r\n    rebase_history(self, grad_fn);\r\n    if (trace_info.state != nullptr) {\r\n      jit::tracer::postRecordTrace( trace_info,  { self } );\r\n    }\r\n\r\nSigned-off-by: Edward Z. Yang <ezyang@fb.com>", "created_at": "2018-01-23T18:46:27Z", "updated_at": "2018-11-23T15:38:28Z", "closed_at": "2018-01-23T23:06:55Z", "merged_at": "2018-01-23T23:06:55Z", "merge_commit_sha": "27505e642963bb8b8c18abdcc6dbed4d41ffa0db", "assignee": null, "assignees": [], "requested_reviewers": [{"login": "colesbury", "id": 655866, "node_id": "MDQ6VXNlcjY1NTg2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/655866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colesbury", "html_url": "https://github.com/colesbury", "followers_url": "https://api.github.com/users/colesbury/followers", "following_url": "https://api.github.com/users/colesbury/following{/other_user}", "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions", "organizations_url": "https://api.github.com/users/colesbury/orgs", "repos_url": "https://api.github.com/users/colesbury/repos", "events_url": "https://api.github.com/users/colesbury/events{/privacy}", "received_events_url": "https://api.github.com/users/colesbury/received_events", "type": "User", "site_admin": false}], "requested_teams": [], "labels": [], "milestone": null, "commits_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4807/commits", "review_comments_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4807/comments", "review_comment_url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments{/number}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/4807/comments", "statuses_url": "https://api.github.com/repos/pytorch/pytorch/statuses/152f7befc40b7ac9d0f5e075c73843f82216868b", "head": {"label": "ezyang:pr/inplace-trace-fix", "ref": "pr/inplace-trace-fix", "sha": "152f7befc40b7ac9d0f5e075c73843f82216868b", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "repo": {"id": 101798885, "node_id": "MDEwOlJlcG9zaXRvcnkxMDE3OTg4ODU=", "name": "pytorch", "full_name": "ezyang/pytorch", "private": false, "owner": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "html_url": "https://github.com/ezyang/pytorch", "description": "Tensors and Dynamic neural networks in Python  with strong GPU acceleration", "fork": true, "url": "https://api.github.com/repos/ezyang/pytorch", "forks_url": "https://api.github.com/repos/ezyang/pytorch/forks", "keys_url": "https://api.github.com/repos/ezyang/pytorch/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/ezyang/pytorch/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/ezyang/pytorch/teams", "hooks_url": "https://api.github.com/repos/ezyang/pytorch/hooks", "issue_events_url": "https://api.github.com/repos/ezyang/pytorch/issues/events{/number}", "events_url": "https://api.github.com/repos/ezyang/pytorch/events", "assignees_url": "https://api.github.com/repos/ezyang/pytorch/assignees{/user}", "branches_url": "https://api.github.com/repos/ezyang/pytorch/branches{/branch}", "tags_url": "https://api.github.com/repos/ezyang/pytorch/tags", "blobs_url": "https://api.github.com/repos/ezyang/pytorch/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/ezyang/pytorch/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/ezyang/pytorch/git/refs{/sha}", "trees_url": "https://api.github.com/repos/ezyang/pytorch/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/ezyang/pytorch/statuses/{sha}", "languages_url": "https://api.github.com/repos/ezyang/pytorch/languages", "stargazers_url": "https://api.github.com/repos/ezyang/pytorch/stargazers", "contributors_url": "https://api.github.com/repos/ezyang/pytorch/contributors", "subscribers_url": "https://api.github.com/repos/ezyang/pytorch/subscribers", "subscription_url": "https://api.github.com/repos/ezyang/pytorch/subscription", "commits_url": "https://api.github.com/repos/ezyang/pytorch/commits{/sha}", "git_commits_url": "https://api.github.com/repos/ezyang/pytorch/git/commits{/sha}", "comments_url": "https://api.github.com/repos/ezyang/pytorch/comments{/number}", "issue_comment_url": "https://api.github.com/repos/ezyang/pytorch/issues/comments{/number}", "contents_url": "https://api.github.com/repos/ezyang/pytorch/contents/{+path}", "compare_url": "https://api.github.com/repos/ezyang/pytorch/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/ezyang/pytorch/merges", "archive_url": "https://api.github.com/repos/ezyang/pytorch/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/ezyang/pytorch/downloads", "issues_url": "https://api.github.com/repos/ezyang/pytorch/issues{/number}", "pulls_url": "https://api.github.com/repos/ezyang/pytorch/pulls{/number}", "milestones_url": "https://api.github.com/repos/ezyang/pytorch/milestones{/number}", "notifications_url": "https://api.github.com/repos/ezyang/pytorch/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/ezyang/pytorch/labels{/name}", "releases_url": "https://api.github.com/repos/ezyang/pytorch/releases{/id}", "deployments_url": "https://api.github.com/repos/ezyang/pytorch/deployments", "created_at": "2017-08-29T19:28:39Z", "updated_at": "2018-10-29T15:06:40Z", "pushed_at": "2018-11-21T22:30:09Z", "git_url": "git://github.com/ezyang/pytorch.git", "ssh_url": "git@github.com:ezyang/pytorch.git", "clone_url": "https://github.com/ezyang/pytorch.git", "svn_url": "https://github.com/ezyang/pytorch", "homepage": "http://pytorch.org", "size": 88254, "stargazers_count": 1, "watchers_count": 1, "language": "C++", "has_issues": false, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 0, "mirror_url": null, "archived": false, "open_issues_count": 2, "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "forks": 0, "open_issues": 2, "watchers": 1, "default_branch": "master"}}, "base": {"label": "pytorch:master", "ref": "master", "sha": "5403f3bc1711fcb71de39cdf323884ee48b3a054", "user": {"login": "pytorch", "id": 21003710, "node_id": "MDEyOk9yZ2FuaXphdGlvbjIxMDAzNzEw", "avatar_url": "https://avatars3.githubusercontent.com/u/21003710?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pytorch", "html_url": "https://github.com/pytorch", "followers_url": "https://api.github.com/users/pytorch/followers", "following_url": "https://api.github.com/users/pytorch/following{/other_user}", "gists_url": "https://api.github.com/users/pytorch/gists{/gist_id}", "starred_url": "https://api.github.com/users/pytorch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pytorch/subscriptions", "organizations_url": "https://api.github.com/users/pytorch/orgs", "repos_url": "https://api.github.com/users/pytorch/repos", "events_url": "https://api.github.com/users/pytorch/events{/privacy}", "received_events_url": "https://api.github.com/users/pytorch/received_events", "type": "Organization", "site_admin": false}, "repo": {"id": 65600975, "node_id": "MDEwOlJlcG9zaXRvcnk2NTYwMDk3NQ==", "name": "pytorch", "full_name": "pytorch/pytorch", "private": false, "owner": {"login": "pytorch", "id": 21003710, "node_id": "MDEyOk9yZ2FuaXphdGlvbjIxMDAzNzEw", "avatar_url": "https://avatars3.githubusercontent.com/u/21003710?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pytorch", "html_url": "https://github.com/pytorch", "followers_url": "https://api.github.com/users/pytorch/followers", "following_url": "https://api.github.com/users/pytorch/following{/other_user}", "gists_url": "https://api.github.com/users/pytorch/gists{/gist_id}", "starred_url": "https://api.github.com/users/pytorch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pytorch/subscriptions", "organizations_url": "https://api.github.com/users/pytorch/orgs", "repos_url": "https://api.github.com/users/pytorch/repos", "events_url": "https://api.github.com/users/pytorch/events{/privacy}", "received_events_url": "https://api.github.com/users/pytorch/received_events", "type": "Organization", "site_admin": false}, "html_url": "https://github.com/pytorch/pytorch", "description": "Tensors and Dynamic neural networks in Python  with strong GPU acceleration", "fork": false, "url": "https://api.github.com/repos/pytorch/pytorch", "forks_url": "https://api.github.com/repos/pytorch/pytorch/forks", "keys_url": "https://api.github.com/repos/pytorch/pytorch/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/pytorch/pytorch/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/pytorch/pytorch/teams", "hooks_url": "https://api.github.com/repos/pytorch/pytorch/hooks", "issue_events_url": "https://api.github.com/repos/pytorch/pytorch/issues/events{/number}", "events_url": "https://api.github.com/repos/pytorch/pytorch/events", "assignees_url": "https://api.github.com/repos/pytorch/pytorch/assignees{/user}", "branches_url": "https://api.github.com/repos/pytorch/pytorch/branches{/branch}", "tags_url": "https://api.github.com/repos/pytorch/pytorch/tags", "blobs_url": "https://api.github.com/repos/pytorch/pytorch/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/pytorch/pytorch/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/pytorch/pytorch/git/refs{/sha}", "trees_url": "https://api.github.com/repos/pytorch/pytorch/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/pytorch/pytorch/statuses/{sha}", "languages_url": "https://api.github.com/repos/pytorch/pytorch/languages", "stargazers_url": "https://api.github.com/repos/pytorch/pytorch/stargazers", "contributors_url": "https://api.github.com/repos/pytorch/pytorch/contributors", "subscribers_url": "https://api.github.com/repos/pytorch/pytorch/subscribers", "subscription_url": "https://api.github.com/repos/pytorch/pytorch/subscription", "commits_url": "https://api.github.com/repos/pytorch/pytorch/commits{/sha}", "git_commits_url": "https://api.github.com/repos/pytorch/pytorch/git/commits{/sha}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/comments{/number}", "issue_comment_url": "https://api.github.com/repos/pytorch/pytorch/issues/comments{/number}", "contents_url": "https://api.github.com/repos/pytorch/pytorch/contents/{+path}", "compare_url": "https://api.github.com/repos/pytorch/pytorch/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/pytorch/pytorch/merges", "archive_url": "https://api.github.com/repos/pytorch/pytorch/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/pytorch/pytorch/downloads", "issues_url": "https://api.github.com/repos/pytorch/pytorch/issues{/number}", "pulls_url": "https://api.github.com/repos/pytorch/pytorch/pulls{/number}", "milestones_url": "https://api.github.com/repos/pytorch/pytorch/milestones{/number}", "notifications_url": "https://api.github.com/repos/pytorch/pytorch/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/pytorch/pytorch/labels{/name}", "releases_url": "https://api.github.com/repos/pytorch/pytorch/releases{/id}", "deployments_url": "https://api.github.com/repos/pytorch/pytorch/deployments", "created_at": "2016-08-13T05:26:41Z", "updated_at": "2018-11-24T05:35:41Z", "pushed_at": "2018-11-24T05:34:07Z", "git_url": "git://github.com/pytorch/pytorch.git", "ssh_url": "git@github.com:pytorch/pytorch.git", "clone_url": "https://github.com/pytorch/pytorch.git", "svn_url": "https://github.com/pytorch/pytorch", "homepage": "http://pytorch.org", "size": 89651, "stargazers_count": 21577, "watchers_count": 21577, "language": "C++", "has_issues": true, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 5149, "mirror_url": null, "archived": false, "open_issues_count": 2193, "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "forks": 5149, "open_issues": 2193, "watchers": 21577, "default_branch": "master"}}, "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4807"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/4807"}, "issue": {"href": "https://api.github.com/repos/pytorch/pytorch/issues/4807"}, "comments": {"href": "https://api.github.com/repos/pytorch/pytorch/issues/4807/comments"}, "review_comments": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4807/comments"}, "review_comment": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments{/number}"}, "commits": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4807/commits"}, "statuses": {"href": "https://api.github.com/repos/pytorch/pytorch/statuses/152f7befc40b7ac9d0f5e075c73843f82216868b"}}, "author_association": "CONTRIBUTOR", "body_html": "<p>The DCE trick says that if I have y = f(x), and f is internally implemented as<br>\ng, it's OK to trace both g and f. Recall the tracing algorithm is:</p>\n<pre><code>enter f(x)\ncompute its result y\ntrace y = f(x)\nreturn from f\n</code></pre>\n<p>So when you run the example above, you'll do this:</p>\n<pre><code># suppose x is mapped to %1\nenter f(x)\nenter g(x)\nresult of g is y\ntrace y = g(x a.k.a. %1) (mapping y to %2)\nreturn from g\nresult of f is y\ntrace y = f(x a.k.a. %1) (remapping y to %3)\nreturn from f\n</code></pre>\n<p>and end up with a trace like this:</p>\n<pre><code>%2 = g(%1)\n%3 = f(%1)\n</code></pre>\n<p>... only %3 is live, because %2 was killed from the mapping...  Subsequent DCE<br>\nwill eliminate the invocation of g and you'll only see f in the final trace.</p>\n<p>However, if f and g are inplace functions, the machinery breaks:</p>\n<pre><code># suppose x is mapped to %1\nenter f(x)\nenter g(x)\nresult of g is x\ntrace x = g(x a.k.a. %1) (remapping x to %2)\nreturn from g\nresult of f is x\ntrace x = f(x a.k.a. %2) (remapping x to %3)\nreturn from f\nresulting in:\n\n%2 = g(%1)\n%3 = f(%2) # OOPS\n</code></pre>\n<p>This commit changes the strategy so we instead do this:</p>\n<pre><code>enter f(x)\ntrace f(x)\ncompute its result y\ntrace y = f(x)  (computed above)\nreturn from f\n</code></pre>\n<p>Now we get the correct Value before it is overwritten.<br>\nHere is what the new trace code looks like:</p>\n<pre><code>jit::tracer::PreTraceInfo trace_info;\nif (jit::tracer::isTracing( self, index )) {\n  trace_info = jit::tracer::preRecordTrace( \"index_fill\", { self, index } );\n  setattr(trace_info.n, jit::Symbol(\"dim\"), dim);\n  setattr(trace_info.n, jit::Symbol(\"value\"), value);\n}\nbaseType-&gt;index_fill_(self_, dim, index_, value);\nincrement_version(self);\nrebase_history(self, grad_fn);\nif (trace_info.state != nullptr) {\n  jit::tracer::postRecordTrace( trace_info,  { self } );\n}\n</code></pre>\n<p>Signed-off-by: Edward Z. Yang <a href=\"mailto:ezyang@fb.com\">ezyang@fb.com</a></p>", "body_text": "The DCE trick says that if I have y = f(x), and f is internally implemented as\ng, it's OK to trace both g and f. Recall the tracing algorithm is:\nenter f(x)\ncompute its result y\ntrace y = f(x)\nreturn from f\n\nSo when you run the example above, you'll do this:\n# suppose x is mapped to %1\nenter f(x)\nenter g(x)\nresult of g is y\ntrace y = g(x a.k.a. %1) (mapping y to %2)\nreturn from g\nresult of f is y\ntrace y = f(x a.k.a. %1) (remapping y to %3)\nreturn from f\n\nand end up with a trace like this:\n%2 = g(%1)\n%3 = f(%1)\n\n... only %3 is live, because %2 was killed from the mapping...  Subsequent DCE\nwill eliminate the invocation of g and you'll only see f in the final trace.\nHowever, if f and g are inplace functions, the machinery breaks:\n# suppose x is mapped to %1\nenter f(x)\nenter g(x)\nresult of g is x\ntrace x = g(x a.k.a. %1) (remapping x to %2)\nreturn from g\nresult of f is x\ntrace x = f(x a.k.a. %2) (remapping x to %3)\nreturn from f\nresulting in:\n\n%2 = g(%1)\n%3 = f(%2) # OOPS\n\nThis commit changes the strategy so we instead do this:\nenter f(x)\ntrace f(x)\ncompute its result y\ntrace y = f(x)  (computed above)\nreturn from f\n\nNow we get the correct Value before it is overwritten.\nHere is what the new trace code looks like:\njit::tracer::PreTraceInfo trace_info;\nif (jit::tracer::isTracing( self, index )) {\n  trace_info = jit::tracer::preRecordTrace( \"index_fill\", { self, index } );\n  setattr(trace_info.n, jit::Symbol(\"dim\"), dim);\n  setattr(trace_info.n, jit::Symbol(\"value\"), value);\n}\nbaseType->index_fill_(self_, dim, index_, value);\nincrement_version(self);\nrebase_history(self, grad_fn);\nif (trace_info.state != nullptr) {\n  jit::tracer::postRecordTrace( trace_info,  { self } );\n}\n\nSigned-off-by: Edward Z. Yang ezyang@fb.com", "merged": true, "mergeable": null, "rebaseable": null, "mergeable_state": "unknown", "merged_by": {"login": "soumith", "id": 1310570, "node_id": "MDQ6VXNlcjEzMTA1NzA=", "avatar_url": "https://avatars0.githubusercontent.com/u/1310570?v=4", "gravatar_id": "", "url": "https://api.github.com/users/soumith", "html_url": "https://github.com/soumith", "followers_url": "https://api.github.com/users/soumith/followers", "following_url": "https://api.github.com/users/soumith/following{/other_user}", "gists_url": "https://api.github.com/users/soumith/gists{/gist_id}", "starred_url": "https://api.github.com/users/soumith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/soumith/subscriptions", "organizations_url": "https://api.github.com/users/soumith/orgs", "repos_url": "https://api.github.com/users/soumith/repos", "events_url": "https://api.github.com/users/soumith/events{/privacy}", "received_events_url": "https://api.github.com/users/soumith/received_events", "type": "User", "site_admin": false}, "comments": 4, "review_comments": 1, "maintainer_can_modify": false, "commits": 4, "additions": 63, "deletions": 34, "changed_files": 6}