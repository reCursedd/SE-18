{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/420847932", "html_url": "https://github.com/pytorch/pytorch/pull/11565#issuecomment-420847932", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/11565", "id": 420847932, "node_id": "MDEyOklzc3VlQ29tbWVudDQyMDg0NzkzMg==", "user": {"login": "mingfeima", "id": 20233731, "node_id": "MDQ6VXNlcjIwMjMzNzMx", "avatar_url": "https://avatars0.githubusercontent.com/u/20233731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mingfeima", "html_url": "https://github.com/mingfeima", "followers_url": "https://api.github.com/users/mingfeima/followers", "following_url": "https://api.github.com/users/mingfeima/following{/other_user}", "gists_url": "https://api.github.com/users/mingfeima/gists{/gist_id}", "starred_url": "https://api.github.com/users/mingfeima/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mingfeima/subscriptions", "organizations_url": "https://api.github.com/users/mingfeima/orgs", "repos_url": "https://api.github.com/users/mingfeima/repos", "events_url": "https://api.github.com/users/mingfeima/events{/privacy}", "received_events_url": "https://api.github.com/users/mingfeima/received_events", "type": "User", "site_admin": false}, "created_at": "2018-09-13T01:04:26Z", "updated_at": "2018-09-13T01:04:26Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1716488\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/cpuhrsch\">@cpuhrsch</a> thanks for the review, will do.<br>\nHonestly i'd like to say <code>parallel</code> and <code>vec256</code> work like a charm. With <code>parallel</code> and <code>vec256</code> it is very easy to construct high performance kernels in <code>ATen/native</code>, without touching any <code>pragma omp</code> and intrinsic.<br>\nA little suggestion is that you probably need to add <code>omp_in_parallel</code> check inside parallel_for and parallel_reduce. It could be possible that parallel is called in nested loop unintentionally, in that case, it's going to cause oversubscription.</p>", "body_text": "@cpuhrsch thanks for the review, will do.\nHonestly i'd like to say parallel and vec256 work like a charm. With parallel and vec256 it is very easy to construct high performance kernels in ATen/native, without touching any pragma omp and intrinsic.\nA little suggestion is that you probably need to add omp_in_parallel check inside parallel_for and parallel_reduce. It could be possible that parallel is called in nested loop unintentionally, in that case, it's going to cause oversubscription.", "body": "@cpuhrsch thanks for the review, will do.\r\nHonestly i'd like to say `parallel` and `vec256` work like a charm. With `parallel` and `vec256` it is very easy to construct high performance kernels in `ATen/native`, without touching any `pragma omp` and intrinsic.\r\nA little suggestion is that you probably need to add `omp_in_parallel` check inside parallel_for and parallel_reduce. It could be possible that parallel is called in nested loop unintentionally, in that case, it's going to cause oversubscription."}