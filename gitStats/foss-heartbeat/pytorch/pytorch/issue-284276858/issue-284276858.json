{"url": "https://api.github.com/repos/pytorch/pytorch/issues/4328", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/4328/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/4328/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/4328/events", "html_url": "https://github.com/pytorch/pytorch/pull/4328", "id": 284276858, "node_id": "MDExOlB1bGxSZXF1ZXN0MTU5OTUxMjIz", "number": 4328, "title": "Adding Uniform distribution to PyTorch", "user": {"login": "neerajprad", "id": 1762463, "node_id": "MDQ6VXNlcjE3NjI0NjM=", "avatar_url": "https://avatars3.githubusercontent.com/u/1762463?v=4", "gravatar_id": "", "url": "https://api.github.com/users/neerajprad", "html_url": "https://github.com/neerajprad", "followers_url": "https://api.github.com/users/neerajprad/followers", "following_url": "https://api.github.com/users/neerajprad/following{/other_user}", "gists_url": "https://api.github.com/users/neerajprad/gists{/gist_id}", "starred_url": "https://api.github.com/users/neerajprad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/neerajprad/subscriptions", "organizations_url": "https://api.github.com/users/neerajprad/orgs", "repos_url": "https://api.github.com/users/neerajprad/repos", "events_url": "https://api.github.com/users/neerajprad/events{/privacy}", "received_events_url": "https://api.github.com/users/neerajprad/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-12-23T01:13:26Z", "updated_at": "2017-12-26T18:49:26Z", "closed_at": "2017-12-23T14:14:44Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/4328", "html_url": "https://github.com/pytorch/pytorch/pull/4328", "diff_url": "https://github.com/pytorch/pytorch/pull/4328.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/4328.patch"}, "body_html": "<p>The implementation is straightforward. A couple of notes:</p>\n<ul>\n<li>In our discussions, we had discussed throwing an error if <code>log_prob</code> got a value outside the distribution's support. This returns <code>-inf</code> instead. I thought that throwing an error does not seem to be a good response for a perfectly valid query. For reference, Tensorflow return <code>-inf</code> for uniform but throws an error for Bernoulli (scoring <code>[1]</code> with <code>Bernoulli([0.0])</code> for example). We should be consistent with whatever convention we choose.</li>\n<li>Modified <code>sample_n()</code> to use <code>torch.Size</code> instead of a tuple <code>(n,)</code>. The reason is that <code>tensor.new(tuple)</code> just takes the last dim, as compared to <code>tensor.new(torch.Size)</code>. Not sure if that's expected. cc. <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=4583066\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/apaszke\">@apaszke</a>.</li>\n</ul>\n<pre><code>In [7]: torch.zeros(2, 2).new((3, 2)).size()\nOut[7]: torch.Size([2])\n\nIn [8]: torch.zeros(2, 2).new(torch.Size((3, 2))).size()\nOut[8]: torch.Size([3, 2])\n</code></pre>", "body_text": "The implementation is straightforward. A couple of notes:\n\nIn our discussions, we had discussed throwing an error if log_prob got a value outside the distribution's support. This returns -inf instead. I thought that throwing an error does not seem to be a good response for a perfectly valid query. For reference, Tensorflow return -inf for uniform but throws an error for Bernoulli (scoring [1] with Bernoulli([0.0]) for example). We should be consistent with whatever convention we choose.\nModified sample_n() to use torch.Size instead of a tuple (n,). The reason is that tensor.new(tuple) just takes the last dim, as compared to tensor.new(torch.Size). Not sure if that's expected. cc. @apaszke.\n\nIn [7]: torch.zeros(2, 2).new((3, 2)).size()\nOut[7]: torch.Size([2])\n\nIn [8]: torch.zeros(2, 2).new(torch.Size((3, 2))).size()\nOut[8]: torch.Size([3, 2])", "body": "The implementation is straightforward. A couple of notes:\r\n - In our discussions, we had discussed throwing an error if `log_prob` got a value outside the distribution's support. This returns `-inf` instead. I thought that throwing an error does not seem to be a good response for a perfectly valid query. For reference, Tensorflow return `-inf` for uniform but throws an error for Bernoulli (scoring `[1]` with `Bernoulli([0.0])` for example). We should be consistent with whatever convention we choose.\r\n - Modified `sample_n()` to use `torch.Size` instead of a tuple `(n,)`. The reason is that `tensor.new(tuple)` just takes the last dim, as compared to `tensor.new(torch.Size)`. Not sure if that's expected. cc. @apaszke. \r\n\r\n```\r\nIn [7]: torch.zeros(2, 2).new((3, 2)).size()\r\nOut[7]: torch.Size([2])\r\n\r\nIn [8]: torch.zeros(2, 2).new(torch.Size((3, 2))).size()\r\nOut[8]: torch.Size([3, 2])\r\n```"}