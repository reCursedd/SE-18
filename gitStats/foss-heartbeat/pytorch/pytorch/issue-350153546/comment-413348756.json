{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/413348756", "html_url": "https://github.com/pytorch/pytorch/pull/10479#issuecomment-413348756", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/10479", "id": 413348756, "node_id": "MDEyOklzc3VlQ29tbWVudDQxMzM0ODc1Ng==", "user": {"login": "gchanan", "id": 3768583, "node_id": "MDQ6VXNlcjM3Njg1ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3768583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gchanan", "html_url": "https://github.com/gchanan", "followers_url": "https://api.github.com/users/gchanan/followers", "following_url": "https://api.github.com/users/gchanan/following{/other_user}", "gists_url": "https://api.github.com/users/gchanan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gchanan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gchanan/subscriptions", "organizations_url": "https://api.github.com/users/gchanan/orgs", "repos_url": "https://api.github.com/users/gchanan/repos", "events_url": "https://api.github.com/users/gchanan/events{/privacy}", "received_events_url": "https://api.github.com/users/gchanan/received_events", "type": "User", "site_admin": false}, "created_at": "2018-08-15T21:47:30Z", "updated_at": "2018-08-15T21:47:30Z", "author_association": "CONTRIBUTOR", "body_html": "<p>This should be ready to review.</p>\n<p>Some notes:</p>\n<ol>\n<li>There are still some member variables that are publicly accessible in TensorImpl; we need to rework TH to remove these.</li>\n<li>I removed <code>unsafeGetTH</code> because there are no longer THTensors.  There's a little complexity with this because the closest equivalent (<code>unsafeGetTensorImpl</code>) is a bit confusing for Variable::Impls since a Variable::Impl is both \"is-a\" and \"has-a\" TensorImpl.  The function returns the \"is-a\", and you have to know what you are doing to extract the data.  This seems more-or-less fine, but may confuse external users (hopefully there aren't any).  And this shouldn't be a long term problem, because we are planning to get rid of the \"has-a\" case.</li>\n<li>I included a StorageImpl * accessor in TensorImpl because it makes things convenient temporarily.  This should be changed to use intrusive_ptr.</li>\n<li>Because of Variable::Impl (and sometimes, SparseTensorImpl), a bunch of these functions are virtual when they don't really have to be.  This unfortunately makes a bunch of functions in TH virtual as well, but this should only be temporary.</li>\n<li>For the familiar reason of Variable::Impl, this doesn't merge the size data member usage in TensorImpl and SparseTensorImpl.</li>\n</ol>", "body_text": "This should be ready to review.\nSome notes:\n\nThere are still some member variables that are publicly accessible in TensorImpl; we need to rework TH to remove these.\nI removed unsafeGetTH because there are no longer THTensors.  There's a little complexity with this because the closest equivalent (unsafeGetTensorImpl) is a bit confusing for Variable::Impls since a Variable::Impl is both \"is-a\" and \"has-a\" TensorImpl.  The function returns the \"is-a\", and you have to know what you are doing to extract the data.  This seems more-or-less fine, but may confuse external users (hopefully there aren't any).  And this shouldn't be a long term problem, because we are planning to get rid of the \"has-a\" case.\nI included a StorageImpl * accessor in TensorImpl because it makes things convenient temporarily.  This should be changed to use intrusive_ptr.\nBecause of Variable::Impl (and sometimes, SparseTensorImpl), a bunch of these functions are virtual when they don't really have to be.  This unfortunately makes a bunch of functions in TH virtual as well, but this should only be temporary.\nFor the familiar reason of Variable::Impl, this doesn't merge the size data member usage in TensorImpl and SparseTensorImpl.", "body": "This should be ready to review.\r\n\r\nSome notes:\r\n1) There are still some member variables that are publicly accessible in TensorImpl; we need to rework TH to remove these.\r\n2) I removed `unsafeGetTH` because there are no longer THTensors.  There's a little complexity with this because the closest equivalent (`unsafeGetTensorImpl`) is a bit confusing for Variable::Impls since a Variable::Impl is both \"is-a\" and \"has-a\" TensorImpl.  The function returns the \"is-a\", and you have to know what you are doing to extract the data.  This seems more-or-less fine, but may confuse external users (hopefully there aren't any).  And this shouldn't be a long term problem, because we are planning to get rid of the \"has-a\" case.\r\n3) I included a StorageImpl * accessor in TensorImpl because it makes things convenient temporarily.  This should be changed to use intrusive_ptr.\r\n4) Because of Variable::Impl (and sometimes, SparseTensorImpl), a bunch of these functions are virtual when they don't really have to be.  This unfortunately makes a bunch of functions in TH virtual as well, but this should only be temporary.\r\n5) For the familiar reason of Variable::Impl, this doesn't merge the size data member usage in TensorImpl and SparseTensorImpl."}