{"url": "https://api.github.com/repos/pytorch/pytorch/issues/3346", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/3346/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/3346/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/3346/events", "html_url": "https://github.com/pytorch/pytorch/issues/3346", "id": 269346947, "node_id": "MDU6SXNzdWUyNjkzNDY5NDc=", "number": 3346, "title": "Forcing type will return zeroed tensor using torch.from_numpy.", "user": {"login": "willianrampazzo", "id": 8462595, "node_id": "MDQ6VXNlcjg0NjI1OTU=", "avatar_url": "https://avatars0.githubusercontent.com/u/8462595?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willianrampazzo", "html_url": "https://github.com/willianrampazzo", "followers_url": "https://api.github.com/users/willianrampazzo/followers", "following_url": "https://api.github.com/users/willianrampazzo/following{/other_user}", "gists_url": "https://api.github.com/users/willianrampazzo/gists{/gist_id}", "starred_url": "https://api.github.com/users/willianrampazzo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willianrampazzo/subscriptions", "organizations_url": "https://api.github.com/users/willianrampazzo/orgs", "repos_url": "https://api.github.com/users/willianrampazzo/repos", "events_url": "https://api.github.com/users/willianrampazzo/events{/privacy}", "received_events_url": "https://api.github.com/users/willianrampazzo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-10-28T20:20:24Z", "updated_at": "2017-10-28T23:29:40Z", "closed_at": "2017-10-28T21:53:13Z", "author_association": "NONE", "body_html": "<p>I updated to pytorch 0.2.0_4 and when I use the following syntax I get a tensor with all elements as 0:</p>\n<p>y_train = torch.from_numpy(y_train).type(torch.LongTensor)</p>\n<p>Here is an example:</p>\n<p>print(y_train.shape)<br>\n(1929, 30)<br>\nprint(y_train[0])<br>\n[ 0.37569925 -0.18745263 -0.37027067 -0.24121504  0.24129324 -0.17401204<br>\n0.5235489  -0.16729173 -0.24257143 -0.22105414 -0.51139849 -0.22105414<br>\n0.18652631 -0.39513233  0.67139852 -0.32858044 -0.16192481 -0.39578497<br>\n-0.65924209 -0.38234437 -0.07457143  0.18889172  0.27490225  0.66604513<br>\n-0.40386465  0.61227065 -0.09765413  0.51948869 -0.10144361  0.76012027]<br>\ntorch.from_numpy(y_train)</p>\n<p>0.3757 -0.1875 -0.3703  ...   0.5195 -0.1014  0.7601<br>\n0.3403 -0.2715 -0.3761  ...   0.4639 -0.0528  0.7808<br>\n0.3554 -0.2727 -0.3562  ...   0.4623 -0.0151  0.6387<br>\n...             \u22f1             ...<br>\n0.4256 -0.1948 -0.3980  ...   0.6467 -0.0172  0.8655<br>\n0.3365 -0.3606 -0.4375  ...   0.6521  0.2211  0.6741<br>\n0.3892 -0.2816 -0.3587  ...   0.5826  0.1026  0.7221<br>\n[torch.FloatTensor of size 1929x30]<br>\ntorch.from_numpy(y_train).type(torch.LongTensor)</p>\n<pre><code>0     0     0  ...      0     0     0\n0     0     0  ...      0     0     0\n0     0     0  ...      0     0     0\n   ...          \u22f1          ...       \n0     0     0  ...      0     0     0\n0     0     0  ...      0     0     0\n0     0     0  ...      0     0     0\n</code></pre>\n<p>[torch.LongTensor of size 1929x30]</p>\n<p>This syntax used to work on the previous version I was using (0.1x), so is zeroing all elements an expected behavior now?</p>", "body_text": "I updated to pytorch 0.2.0_4 and when I use the following syntax I get a tensor with all elements as 0:\ny_train = torch.from_numpy(y_train).type(torch.LongTensor)\nHere is an example:\nprint(y_train.shape)\n(1929, 30)\nprint(y_train[0])\n[ 0.37569925 -0.18745263 -0.37027067 -0.24121504  0.24129324 -0.17401204\n0.5235489  -0.16729173 -0.24257143 -0.22105414 -0.51139849 -0.22105414\n0.18652631 -0.39513233  0.67139852 -0.32858044 -0.16192481 -0.39578497\n-0.65924209 -0.38234437 -0.07457143  0.18889172  0.27490225  0.66604513\n-0.40386465  0.61227065 -0.09765413  0.51948869 -0.10144361  0.76012027]\ntorch.from_numpy(y_train)\n0.3757 -0.1875 -0.3703  ...   0.5195 -0.1014  0.7601\n0.3403 -0.2715 -0.3761  ...   0.4639 -0.0528  0.7808\n0.3554 -0.2727 -0.3562  ...   0.4623 -0.0151  0.6387\n...             \u22f1             ...\n0.4256 -0.1948 -0.3980  ...   0.6467 -0.0172  0.8655\n0.3365 -0.3606 -0.4375  ...   0.6521  0.2211  0.6741\n0.3892 -0.2816 -0.3587  ...   0.5826  0.1026  0.7221\n[torch.FloatTensor of size 1929x30]\ntorch.from_numpy(y_train).type(torch.LongTensor)\n0     0     0  ...      0     0     0\n0     0     0  ...      0     0     0\n0     0     0  ...      0     0     0\n   ...          \u22f1          ...       \n0     0     0  ...      0     0     0\n0     0     0  ...      0     0     0\n0     0     0  ...      0     0     0\n\n[torch.LongTensor of size 1929x30]\nThis syntax used to work on the previous version I was using (0.1x), so is zeroing all elements an expected behavior now?", "body": "I updated to pytorch 0.2.0_4 and when I use the following syntax I get a tensor with all elements as 0:\r\n\r\ny_train = torch.from_numpy(y_train).type(torch.LongTensor)\r\n\r\nHere is an example:\r\n\r\nprint(y_train.shape)\r\n(1929, 30)\r\nprint(y_train[0])\r\n[ 0.37569925 -0.18745263 -0.37027067 -0.24121504  0.24129324 -0.17401204\r\n  0.5235489  -0.16729173 -0.24257143 -0.22105414 -0.51139849 -0.22105414\r\n  0.18652631 -0.39513233  0.67139852 -0.32858044 -0.16192481 -0.39578497\r\n -0.65924209 -0.38234437 -0.07457143  0.18889172  0.27490225  0.66604513\r\n -0.40386465  0.61227065 -0.09765413  0.51948869 -0.10144361  0.76012027]\r\ntorch.from_numpy(y_train)\r\n\r\n 0.3757 -0.1875 -0.3703  ...   0.5195 -0.1014  0.7601\r\n 0.3403 -0.2715 -0.3761  ...   0.4639 -0.0528  0.7808\r\n 0.3554 -0.2727 -0.3562  ...   0.4623 -0.0151  0.6387\r\n          ...             \u22f1             ...          \r\n 0.4256 -0.1948 -0.3980  ...   0.6467 -0.0172  0.8655\r\n 0.3365 -0.3606 -0.4375  ...   0.6521  0.2211  0.6741\r\n 0.3892 -0.2816 -0.3587  ...   0.5826  0.1026  0.7221\r\n[torch.FloatTensor of size 1929x30]\r\ntorch.from_numpy(y_train).type(torch.LongTensor)\r\n\r\n    0     0     0  ...      0     0     0\r\n    0     0     0  ...      0     0     0\r\n    0     0     0  ...      0     0     0\r\n       ...          \u22f1          ...       \r\n    0     0     0  ...      0     0     0\r\n    0     0     0  ...      0     0     0\r\n    0     0     0  ...      0     0     0\r\n[torch.LongTensor of size 1929x30]\r\n\r\nThis syntax used to work on the previous version I was using (0.1x), so is zeroing all elements an expected behavior now?"}