{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/209830727", "pull_request_review_id": 145916516, "id": 209830727, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTgzMDcyNw==", "diff_hunk": "@@ -2519,113 +2807,57 @@ void Im2Col<float, CPUContext, StorageOrder::NCHW>(\n     const int stride_w,\n     const float* img_data,\n     float* col_data,\n-    CPUContext* /*context*/) {\n-  const int output_h =\n-      (height + pad_b + pad_t - (dilation_h * (kernel_h - 1) + 1)) / stride_h +\n-      1;\n-  const int output_w =\n-      (width + pad_l + pad_r - (dilation_w * (kernel_w - 1) + 1)) / stride_w +\n-      1;\n-\n-  // Fast path for zero padding and no dilation\n-  // From Torch, THNN_(unfolded_copy)\n-  if (dilation_h == 1 && dilation_w == 1 && pad_l == 0 && pad_r == 0 &&\n-      pad_t == 0 && pad_b == 0) {\n-    for (auto k = 0; k < channels * kernel_h * kernel_w; k++) {\n-      const auto nip = k / (kernel_h * kernel_w);\n-      const auto rest = k % (kernel_h * kernel_w);\n-      const auto kh = rest / kernel_w;\n-      const auto kw = rest % kernel_w;\n-      auto* dst = col_data + nip * (kernel_h * kernel_w * output_h * output_w) +\n-          kh * (kernel_w * output_h * output_w) + kw * (output_h * output_w);\n-      const auto* src = img_data + nip * (height * width);\n-      for (auto y = 0; y < output_h; y++) {\n-        const auto iy = y * stride_h + kh;\n-        const auto ix = kw;\n-        if (stride_w == 1) {\n-          memcpy(\n-              dst + (y * output_w),\n-              src + (iy * width + ix),\n-              sizeof(float) * output_w);\n-        } else {\n-          for (auto x = 0; x < output_w; x++) {\n-            memcpy(\n-                dst + (y * output_w + x),\n-                src + (iy * width + ix + x * stride_w),\n-                sizeof(float));\n-          }\n-        }\n-      }\n-    }\n-    return;\n-  }\n-\n-  // Fast path for equal padding\n-  if (pad_l == pad_r && pad_t == pad_b) {\n-    // From Intel, https://github.com/BVLC/caffe/pull/3536\n-    const int pad_h = pad_t;\n-    const int pad_w = pad_l;\n-    const int channel_size = height * width;\n-    for (int channel = channels; channel--; img_data += channel_size) {\n-      for (int kernel_row = 0; kernel_row < kernel_h; kernel_row++) {\n-        for (int kernel_col = 0; kernel_col < kernel_w; kernel_col++) {\n-          int input_row = -pad_h + kernel_row * dilation_h;\n-          for (int output_rows = output_h; output_rows; output_rows--) {\n-            if (!is_a_ge_zero_and_a_lt_b(input_row, height)) {\n-              for (int output_cols = output_w; output_cols; output_cols--) {\n-                *(col_data++) = 0;\n-              }\n-            } else {\n-              int input_col = -pad_w + kernel_col * dilation_w;\n-              for (int output_col = output_w; output_col; output_col--) {\n-                if (is_a_ge_zero_and_a_lt_b(input_col, width)) {\n-                  *(col_data++) = img_data[input_row * width + input_col];\n-                } else {\n-                  *(col_data++) = 0;\n-                }\n-                input_col += stride_w;\n-              }\n-            }\n-            input_row += stride_h;\n-          }\n-        }\n-      }\n-    }\n+    CPUContext* context) {\n+  // Fast conv with no dilation.", "path": "caffe2/utils/math_cpu.cc", "position": null, "original_position": 469, "commit_id": "9478994057908318fe6eab48381f03e6d1c3e2cf", "original_commit_id": "16d9b0b49dad71e8681d50d3dcbaab775af63890", "user": {"login": "houseroad", "id": 30275821, "node_id": "MDQ6VXNlcjMwMjc1ODIx", "avatar_url": "https://avatars0.githubusercontent.com/u/30275821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/houseroad", "html_url": "https://github.com/houseroad", "followers_url": "https://api.github.com/users/houseroad/followers", "following_url": "https://api.github.com/users/houseroad/following{/other_user}", "gists_url": "https://api.github.com/users/houseroad/gists{/gist_id}", "starred_url": "https://api.github.com/users/houseroad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/houseroad/subscriptions", "organizations_url": "https://api.github.com/users/houseroad/orgs", "repos_url": "https://api.github.com/users/houseroad/repos", "events_url": "https://api.github.com/users/houseroad/events{/privacy}", "received_events_url": "https://api.github.com/users/houseroad/received_events", "type": "User", "site_admin": false}, "body": "actually is zero padding and no dilation", "created_at": "2018-08-14T05:14:47Z", "updated_at": "2018-11-23T15:49:16Z", "html_url": "https://github.com/pytorch/pytorch/pull/10439#discussion_r209830727", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/10439", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/209830727"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/10439#discussion_r209830727"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/10439"}}, "body_html": "<p>actually is zero padding and no dilation</p>", "body_text": "actually is zero padding and no dilation"}