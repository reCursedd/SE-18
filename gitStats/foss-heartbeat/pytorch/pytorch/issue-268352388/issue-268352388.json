{"url": "https://api.github.com/repos/pytorch/pytorch/issues/3281", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/3281/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/3281/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/3281/events", "html_url": "https://github.com/pytorch/pytorch/issues/3281", "id": 268352388, "node_id": "MDU6SXNzdWUyNjgzNTIzODg=", "number": 3281, "title": "DataLoader \"casting\" non statndard objects to lists", "user": {"login": "Arseny-N", "id": 3064867, "node_id": "MDQ6VXNlcjMwNjQ4Njc=", "avatar_url": "https://avatars0.githubusercontent.com/u/3064867?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Arseny-N", "html_url": "https://github.com/Arseny-N", "followers_url": "https://api.github.com/users/Arseny-N/followers", "following_url": "https://api.github.com/users/Arseny-N/following{/other_user}", "gists_url": "https://api.github.com/users/Arseny-N/gists{/gist_id}", "starred_url": "https://api.github.com/users/Arseny-N/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Arseny-N/subscriptions", "organizations_url": "https://api.github.com/users/Arseny-N/orgs", "repos_url": "https://api.github.com/users/Arseny-N/repos", "events_url": "https://api.github.com/users/Arseny-N/events{/privacy}", "received_events_url": "https://api.github.com/users/Arseny-N/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2017-10-25T10:53:01Z", "updated_at": "2017-12-04T14:22:06Z", "closed_at": null, "author_association": "NONE", "body_html": "<p><strong>The Problem:</strong><br>\nCurrently if you implement a nonstandard collate function which, for example returns a namedtuple and set pin_memory=True the namedtuple would be \"casted\" to a list  by the following <a href=\"https://github.com/pytorch/pytorch/blob/23a3f78988aeeaf3ca193ec0b03fd755ddbcdd49/torch/utils/data/dataloader.py#L116\">code</a>.</p>\n<p><strong>Proposed Approach:</strong><br>\nAdd another argument to the data loader constructor <code>DataLoader(batch_type_ctor=bt_ctor)</code>, where bt_ctor is a callable returning a constructed object. The result of pin_memory_batch should be passed to bt_ctor, and so should be the result of collate_fn if collate_fn is default_collate.</p>\n<p>This approach might seem to add complexity to DataLoader since the connection between batch_type_ctor and collate_fn is non trivial if you don't read the code and may result in some code duplication.</p>\n<p>For example if you implement a nonstandard collate_fn which returns a namedtuple then the return value of the collate_fn should be resupplied via batch_type_ctor if pin_memory is used.</p>\n<p>But this approach seems to result in the most simple api and simple implementation.</p>\n<p><strong>PS</strong><br>\nI would enjoy contributing to the project.</p>", "body_text": "The Problem:\nCurrently if you implement a nonstandard collate function which, for example returns a namedtuple and set pin_memory=True the namedtuple would be \"casted\" to a list  by the following code.\nProposed Approach:\nAdd another argument to the data loader constructor DataLoader(batch_type_ctor=bt_ctor), where bt_ctor is a callable returning a constructed object. The result of pin_memory_batch should be passed to bt_ctor, and so should be the result of collate_fn if collate_fn is default_collate.\nThis approach might seem to add complexity to DataLoader since the connection between batch_type_ctor and collate_fn is non trivial if you don't read the code and may result in some code duplication.\nFor example if you implement a nonstandard collate_fn which returns a namedtuple then the return value of the collate_fn should be resupplied via batch_type_ctor if pin_memory is used.\nBut this approach seems to result in the most simple api and simple implementation.\nPS\nI would enjoy contributing to the project.", "body": "**The Problem:**\r\nCurrently if you implement a nonstandard collate function which, for example returns a namedtuple and set pin_memory=True the namedtuple would be \"casted\" to a list  by the following [code](https://github.com/pytorch/pytorch/blob/23a3f78988aeeaf3ca193ec0b03fd755ddbcdd49/torch/utils/data/dataloader.py#L116).\r\n\r\n**Proposed Approach:**\r\nAdd another argument to the data loader constructor `DataLoader(batch_type_ctor=bt_ctor)`, where bt_ctor is a callable returning a constructed object. The result of pin_memory_batch should be passed to bt_ctor, and so should be the result of collate_fn if collate_fn is default_collate.\r\n\r\nThis approach might seem to add complexity to DataLoader since the connection between batch_type_ctor and collate_fn is non trivial if you don't read the code and may result in some code duplication.\r\n\r\nFor example if you implement a nonstandard collate_fn which returns a namedtuple then the return value of the collate_fn should be resupplied via batch_type_ctor if pin_memory is used.\r\n\r\nBut this approach seems to result in the most simple api and simple implementation.\r\n\r\n**PS**\r\nI would enjoy contributing to the project.\r\n\r\n\r\n\r\n"}