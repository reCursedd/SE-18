{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/343249634", "html_url": "https://github.com/pytorch/pytorch/issues/3281#issuecomment-343249634", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/3281", "id": 343249634, "node_id": "MDEyOklzc3VlQ29tbWVudDM0MzI0OTYzNA==", "user": {"login": "martinraison", "id": 2560662, "node_id": "MDQ6VXNlcjI1NjA2NjI=", "avatar_url": "https://avatars3.githubusercontent.com/u/2560662?v=4", "gravatar_id": "", "url": "https://api.github.com/users/martinraison", "html_url": "https://github.com/martinraison", "followers_url": "https://api.github.com/users/martinraison/followers", "following_url": "https://api.github.com/users/martinraison/following{/other_user}", "gists_url": "https://api.github.com/users/martinraison/gists{/gist_id}", "starred_url": "https://api.github.com/users/martinraison/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/martinraison/subscriptions", "organizations_url": "https://api.github.com/users/martinraison/orgs", "repos_url": "https://api.github.com/users/martinraison/repos", "events_url": "https://api.github.com/users/martinraison/events{/privacy}", "received_events_url": "https://api.github.com/users/martinraison/received_events", "type": "User", "site_admin": false}, "created_at": "2017-11-09T18:37:47Z", "updated_at": "2017-11-09T18:38:54Z", "author_association": "CONTRIBUTOR", "body_html": "<p>maybe the pythonic way would be to just try to call the method:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">elif</span> <span class=\"pl-c1\">isinstance</span>(batch, collections.Sequence):\n    <span class=\"pl-k\">try</span>:\n        <span class=\"pl-c\"><span class=\"pl-c\">#</span> Handle namedtuple</span>\n        <span class=\"pl-k\">return</span> batch._make([pin_memory_batch(sample) <span class=\"pl-k\">for</span> sample <span class=\"pl-k\">in</span> batch])\n    <span class=\"pl-k\">except</span> <span class=\"pl-c1\">AttributeError</span>:\n        <span class=\"pl-c\"><span class=\"pl-c\">#</span> Fallback to list</span>\n        <span class=\"pl-k\">return</span> [pin_memory_batch(sample) <span class=\"pl-k\">for</span> sample <span class=\"pl-k\">in</span> batch]</pre></div>\n<p>An extra benefit of doing it this way is that if you really want to use your own tuple-like (but non-namedtuple) custom class, you can just add a <code>_make</code> method to it</p>", "body_text": "maybe the pythonic way would be to just try to call the method:\nelif isinstance(batch, collections.Sequence):\n    try:\n        # Handle namedtuple\n        return batch._make([pin_memory_batch(sample) for sample in batch])\n    except AttributeError:\n        # Fallback to list\n        return [pin_memory_batch(sample) for sample in batch]\nAn extra benefit of doing it this way is that if you really want to use your own tuple-like (but non-namedtuple) custom class, you can just add a _make method to it", "body": "maybe the pythonic way would be to just try to call the method:\r\n\r\n```python\r\nelif isinstance(batch, collections.Sequence):\r\n    try:\r\n        # Handle namedtuple\r\n        return batch._make([pin_memory_batch(sample) for sample in batch])\r\n    except AttributeError:\r\n        # Fallback to list\r\n        return [pin_memory_batch(sample) for sample in batch]\r\n```\r\n\r\nAn extra benefit of doing it this way is that if you really want to use your own tuple-like (but non-namedtuple) custom class, you can just add a `_make` method to it"}