{"url": "https://api.github.com/repos/pytorch/pytorch/issues/1212", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/1212/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/1212/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/1212/events", "html_url": "https://github.com/pytorch/pytorch/issues/1212", "id": 220337920, "node_id": "MDU6SXNzdWUyMjAzMzc5MjA=", "number": 1212, "title": "torch.save crashes when file has been modified with syntax error", "user": {"login": "willwhitney", "id": 597829, "node_id": "MDQ6VXNlcjU5NzgyOQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/597829?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willwhitney", "html_url": "https://github.com/willwhitney", "followers_url": "https://api.github.com/users/willwhitney/followers", "following_url": "https://api.github.com/users/willwhitney/following{/other_user}", "gists_url": "https://api.github.com/users/willwhitney/gists{/gist_id}", "starred_url": "https://api.github.com/users/willwhitney/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willwhitney/subscriptions", "organizations_url": "https://api.github.com/users/willwhitney/orgs", "repos_url": "https://api.github.com/users/willwhitney/repos", "events_url": "https://api.github.com/users/willwhitney/events{/privacy}", "received_events_url": "https://api.github.com/users/willwhitney/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 424131847, "node_id": "MDU6TGFiZWw0MjQxMzE4NDc=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/bug", "name": "bug", "color": "b60205", "default": true}, {"id": 443484135, "node_id": "MDU6TGFiZWw0NDM0ODQxMzU=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/high%20priority", "name": "high priority", "color": "F22613", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2017-04-07T21:52:06Z", "updated_at": "2017-04-11T21:55:42Z", "closed_at": "2017-04-11T21:55:42Z", "author_association": "NONE", "body_html": "<p>I discovered this because my training script autosaves my models, and as I was making some changes all my jobs crashed.</p>\n<p>It seems like pickle is reading the file that defined the model object from disk and trying to parse it. Clearly if the file is now invalid that won't work.</p>\n<p>Does this also mean that if the file has been modified (but remains valid), the saved model will have the modified versions of any functions? Or is it just using the parsed source for some kind of help text?</p>\n<pre><code>In [3]: from models import *\nIn [6]: model = IndependentModel(3, 25, 6)\nIn [8]: torch.save(model, 'tmp.t7')\n# =&gt; works \n\n# now delete a random paren in one of the methods of this class\nIn [9]: torch.save(model, 'tmp.t7')\n---------------------------------------------------------------------------\nTokenError                                Traceback (most recent call last)\n&lt;ipython-input-9-112bbd15d62e&gt; in &lt;module&gt;()\n----&gt; 1 torch.save(model, 'tmp.t7')\n\n/home/will/anaconda/lib/python3.6/site-packages/torch/serialization.py in save(obj, f, pickle_module, pickle_protocol)\n    118         f = open(f, \"wb\")\n    119     try:\n--&gt; 120         return _save(obj, f, pickle_module, pickle_protocol)\n    121     finally:\n    122         if new_fd:\n\n/home/will/anaconda/lib/python3.6/site-packages/torch/serialization.py in _save(obj, f, pickle_module, pickle_protocol)\n    184     pickler = pickle_module.Pickler(f, protocol=pickle_protocol)\n    185     pickler.persistent_id = persistent_id\n--&gt; 186     pickler.dump(obj)\n    187\n    188     serialized_storage_keys = sorted(serialized_storages.keys())\n\n/home/will/anaconda/lib/python3.6/site-packages/torch/serialization.py in persistent_id(obj)\n    142             try:\n    143                 source_file = inspect.getsourcefile(obj)\n--&gt; 144                 source = inspect.getsource(obj)\n    145             except (TypeError, IOError):\n    146                 warnings.warn(\"Couldn't retrieve source code for container of \"\n\n/home/will/anaconda/lib/python3.6/inspect.py in getsource(object)\n    936     or code object.  The source code is returned as a single string.  An\n    937     OSError is raised if the source code cannot be retrieved.\"\"\"\n--&gt; 938     lines, lnum = getsourcelines(object)\n    939     return ''.join(lines)\n    940\n\n/home/will/anaconda/lib/python3.6/inspect.py in getsourcelines(object)\n    928         return lines, 0\n    929     else:\n--&gt; 930         return getblock(lines[lnum:]), lnum + 1\n    931\n    932 def getsource(object):\n\n/home/will/anaconda/lib/python3.6/inspect.py in getblock(lines)\n    908     try:\n    909         tokens = tokenize.generate_tokens(iter(lines).__next__)\n--&gt; 910         for _token in tokens:\n    911             blockfinder.tokeneater(*_token)\n    912     except (EndOfBlock, IndentationError):\n\n/home/will/anaconda/lib/python3.6/tokenize.py in _tokenize(readline, encoding)\n    593         else:                                  # continued statement\n    594             if not line:\n--&gt; 595                 raise TokenError(\"EOF in multi-line statement\", (lnum, 0))\n    596             continued = 0\n    597\n\nTokenError: ('EOF in multi-line statement', (328, 0))\n</code></pre>\n<p>python version : 3.6.0.final.0<br>\npytorch: 0.1.11-py360_4cu80</p>", "body_text": "I discovered this because my training script autosaves my models, and as I was making some changes all my jobs crashed.\nIt seems like pickle is reading the file that defined the model object from disk and trying to parse it. Clearly if the file is now invalid that won't work.\nDoes this also mean that if the file has been modified (but remains valid), the saved model will have the modified versions of any functions? Or is it just using the parsed source for some kind of help text?\nIn [3]: from models import *\nIn [6]: model = IndependentModel(3, 25, 6)\nIn [8]: torch.save(model, 'tmp.t7')\n# => works \n\n# now delete a random paren in one of the methods of this class\nIn [9]: torch.save(model, 'tmp.t7')\n---------------------------------------------------------------------------\nTokenError                                Traceback (most recent call last)\n<ipython-input-9-112bbd15d62e> in <module>()\n----> 1 torch.save(model, 'tmp.t7')\n\n/home/will/anaconda/lib/python3.6/site-packages/torch/serialization.py in save(obj, f, pickle_module, pickle_protocol)\n    118         f = open(f, \"wb\")\n    119     try:\n--> 120         return _save(obj, f, pickle_module, pickle_protocol)\n    121     finally:\n    122         if new_fd:\n\n/home/will/anaconda/lib/python3.6/site-packages/torch/serialization.py in _save(obj, f, pickle_module, pickle_protocol)\n    184     pickler = pickle_module.Pickler(f, protocol=pickle_protocol)\n    185     pickler.persistent_id = persistent_id\n--> 186     pickler.dump(obj)\n    187\n    188     serialized_storage_keys = sorted(serialized_storages.keys())\n\n/home/will/anaconda/lib/python3.6/site-packages/torch/serialization.py in persistent_id(obj)\n    142             try:\n    143                 source_file = inspect.getsourcefile(obj)\n--> 144                 source = inspect.getsource(obj)\n    145             except (TypeError, IOError):\n    146                 warnings.warn(\"Couldn't retrieve source code for container of \"\n\n/home/will/anaconda/lib/python3.6/inspect.py in getsource(object)\n    936     or code object.  The source code is returned as a single string.  An\n    937     OSError is raised if the source code cannot be retrieved.\"\"\"\n--> 938     lines, lnum = getsourcelines(object)\n    939     return ''.join(lines)\n    940\n\n/home/will/anaconda/lib/python3.6/inspect.py in getsourcelines(object)\n    928         return lines, 0\n    929     else:\n--> 930         return getblock(lines[lnum:]), lnum + 1\n    931\n    932 def getsource(object):\n\n/home/will/anaconda/lib/python3.6/inspect.py in getblock(lines)\n    908     try:\n    909         tokens = tokenize.generate_tokens(iter(lines).__next__)\n--> 910         for _token in tokens:\n    911             blockfinder.tokeneater(*_token)\n    912     except (EndOfBlock, IndentationError):\n\n/home/will/anaconda/lib/python3.6/tokenize.py in _tokenize(readline, encoding)\n    593         else:                                  # continued statement\n    594             if not line:\n--> 595                 raise TokenError(\"EOF in multi-line statement\", (lnum, 0))\n    596             continued = 0\n    597\n\nTokenError: ('EOF in multi-line statement', (328, 0))\n\npython version : 3.6.0.final.0\npytorch: 0.1.11-py360_4cu80", "body": "I discovered this because my training script autosaves my models, and as I was making some changes all my jobs crashed.\r\n\r\nIt seems like pickle is reading the file that defined the model object from disk and trying to parse it. Clearly if the file is now invalid that won't work.\r\n\r\nDoes this also mean that if the file has been modified (but remains valid), the saved model will have the modified versions of any functions? Or is it just using the parsed source for some kind of help text?\r\n\r\n```\r\nIn [3]: from models import *\r\nIn [6]: model = IndependentModel(3, 25, 6)\r\nIn [8]: torch.save(model, 'tmp.t7')\r\n# => works \r\n\r\n# now delete a random paren in one of the methods of this class\r\nIn [9]: torch.save(model, 'tmp.t7')\r\n---------------------------------------------------------------------------\r\nTokenError                                Traceback (most recent call last)\r\n<ipython-input-9-112bbd15d62e> in <module>()\r\n----> 1 torch.save(model, 'tmp.t7')\r\n\r\n/home/will/anaconda/lib/python3.6/site-packages/torch/serialization.py in save(obj, f, pickle_module, pickle_protocol)\r\n    118         f = open(f, \"wb\")\r\n    119     try:\r\n--> 120         return _save(obj, f, pickle_module, pickle_protocol)\r\n    121     finally:\r\n    122         if new_fd:\r\n\r\n/home/will/anaconda/lib/python3.6/site-packages/torch/serialization.py in _save(obj, f, pickle_module, pickle_protocol)\r\n    184     pickler = pickle_module.Pickler(f, protocol=pickle_protocol)\r\n    185     pickler.persistent_id = persistent_id\r\n--> 186     pickler.dump(obj)\r\n    187\r\n    188     serialized_storage_keys = sorted(serialized_storages.keys())\r\n\r\n/home/will/anaconda/lib/python3.6/site-packages/torch/serialization.py in persistent_id(obj)\r\n    142             try:\r\n    143                 source_file = inspect.getsourcefile(obj)\r\n--> 144                 source = inspect.getsource(obj)\r\n    145             except (TypeError, IOError):\r\n    146                 warnings.warn(\"Couldn't retrieve source code for container of \"\r\n\r\n/home/will/anaconda/lib/python3.6/inspect.py in getsource(object)\r\n    936     or code object.  The source code is returned as a single string.  An\r\n    937     OSError is raised if the source code cannot be retrieved.\"\"\"\r\n--> 938     lines, lnum = getsourcelines(object)\r\n    939     return ''.join(lines)\r\n    940\r\n\r\n/home/will/anaconda/lib/python3.6/inspect.py in getsourcelines(object)\r\n    928         return lines, 0\r\n    929     else:\r\n--> 930         return getblock(lines[lnum:]), lnum + 1\r\n    931\r\n    932 def getsource(object):\r\n\r\n/home/will/anaconda/lib/python3.6/inspect.py in getblock(lines)\r\n    908     try:\r\n    909         tokens = tokenize.generate_tokens(iter(lines).__next__)\r\n--> 910         for _token in tokens:\r\n    911             blockfinder.tokeneater(*_token)\r\n    912     except (EndOfBlock, IndentationError):\r\n\r\n/home/will/anaconda/lib/python3.6/tokenize.py in _tokenize(readline, encoding)\r\n    593         else:                                  # continued statement\r\n    594             if not line:\r\n--> 595                 raise TokenError(\"EOF in multi-line statement\", (lnum, 0))\r\n    596             continued = 0\r\n    597\r\n\r\nTokenError: ('EOF in multi-line statement', (328, 0))\r\n```\r\n\r\npython version : 3.6.0.final.0\r\npytorch: 0.1.11-py360_4cu80"}