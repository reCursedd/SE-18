{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/204262476", "pull_request_review_id": 139307686, "id": 204262476, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDI2MjQ3Ng==", "diff_hunk": "@@ -95,11 +100,13 @@ def _worker_loop(dataset, index_queue, data_queue, collate_fn, seed, init_fn, wo\n         try:\n             r = index_queue.get(timeout=MANAGER_STATUS_CHECK_INTERVAL)\n         except queue.Empty:\n-            if watchdog.is_alive():\n+            if watchdog.is_alive() and not done_event.is_set():\n                 continue\n             else:\n                 break\n-        if r is None:\n+        # use done_event so that we can get faster exiting signal even if there\n+        # are still indices in index_queue\n+        if r is None or done_event.is_set():", "path": "torch/utils/data/dataloader.py", "position": 33, "original_position": 33, "commit_id": "4a1171304ff05b378e3e3499f7d99b41737451c9", "original_commit_id": "30b8b2e0059ad2529b147adbe38c0d29d5a6f101", "user": {"login": "SsnL", "id": 5674597, "node_id": "MDQ6VXNlcjU2NzQ1OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5674597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SsnL", "html_url": "https://github.com/SsnL", "followers_url": "https://api.github.com/users/SsnL/followers", "following_url": "https://api.github.com/users/SsnL/following{/other_user}", "gists_url": "https://api.github.com/users/SsnL/gists{/gist_id}", "starred_url": "https://api.github.com/users/SsnL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SsnL/subscriptions", "organizations_url": "https://api.github.com/users/SsnL/orgs", "repos_url": "https://api.github.com/users/SsnL/repos", "events_url": "https://api.github.com/users/SsnL/events{/privacy}", "received_events_url": "https://api.github.com/users/SsnL/received_events", "type": "User", "site_admin": false}, "body": "It isn't necessary to fix the hang. But I'd argue that we should have this. Without this, the worker exiting is delayed until all indices in the queue are processed. This could \r\n1. be unexpected by users thus problematic if `dataset.__getitem__` uses scarce resources (e.g. gpu), and\r\n3. cause `__del__` to be slow if the `dataset.__getitem__` is expensive. \r\n\r\nMoreover, `done_event` is already used in addition to `None` in exiting the `manager_thread`, so I think it is fine.", "created_at": "2018-07-23T00:53:10Z", "updated_at": "2018-11-23T15:47:51Z", "html_url": "https://github.com/pytorch/pytorch/pull/9655#discussion_r204262476", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/9655", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/204262476"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/9655#discussion_r204262476"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/9655"}}, "body_html": "<p>It isn't necessary to fix the hang. But I'd argue that we should have this. Without this, the worker exiting is delayed until all indices in the queue are processed. This could</p>\n<ol>\n<li>be unexpected by users thus problematic if <code>dataset.__getitem__</code> uses scarce resources (e.g. gpu), and</li>\n<li>cause <code>__del__</code> to be slow if the <code>dataset.__getitem__</code> is expensive.</li>\n</ol>\n<p>Moreover, <code>done_event</code> is already used in addition to <code>None</code> in exiting the <code>manager_thread</code>, so I think it is fine.</p>", "body_text": "It isn't necessary to fix the hang. But I'd argue that we should have this. Without this, the worker exiting is delayed until all indices in the queue are processed. This could\n\nbe unexpected by users thus problematic if dataset.__getitem__ uses scarce resources (e.g. gpu), and\ncause __del__ to be slow if the dataset.__getitem__ is expensive.\n\nMoreover, done_event is already used in addition to None in exiting the manager_thread, so I think it is fine.", "in_reply_to_id": 204258464}