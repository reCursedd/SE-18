{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/204271452", "pull_request_review_id": 139319762, "id": 204271452, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDI3MTQ1Mg==", "diff_hunk": "@@ -252,23 +258,25 @@ def __init__(self, loader):\n             self.worker_init_fn = loader.worker_init_fn\n             self.index_queues = [multiprocessing.Queue() for _ in range(self.num_workers)]\n             self.worker_queue_idx = 0\n-            self.worker_result_queue = multiprocessing.SimpleQueue()\n+            self.worker_result_queue = multiprocessing.Queue()", "path": "torch/utils/data/dataloader.py", "position": 68, "original_position": 59, "commit_id": "4a1171304ff05b378e3e3499f7d99b41737451c9", "original_commit_id": "30b8b2e0059ad2529b147adbe38c0d29d5a6f101", "user": {"login": "SsnL", "id": 5674597, "node_id": "MDQ6VXNlcjU2NzQ1OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5674597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SsnL", "html_url": "https://github.com/SsnL", "followers_url": "https://api.github.com/users/SsnL/followers", "following_url": "https://api.github.com/users/SsnL/following{/other_user}", "gists_url": "https://api.github.com/users/SsnL/gists{/gist_id}", "starred_url": "https://api.github.com/users/SsnL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SsnL/subscriptions", "organizations_url": "https://api.github.com/users/SsnL/orgs", "repos_url": "https://api.github.com/users/SsnL/repos", "events_url": "https://api.github.com/users/SsnL/events{/privacy}", "received_events_url": "https://api.github.com/users/SsnL/received_events", "type": "User", "site_admin": false}, "body": ":) I think `multiprocessing` should be smart enough. After all, this is called `multiprocessing.Queue`, i.e., a `queues.Queue` particularly designed to pass data around processes. If this isn't supported, then it wouldn't be any useful.\r\n\r\nLooking at `cpython` source, I think this is supported indeed: https://github.com/python/cpython/blob/3.6/Lib/multiprocessing/queues.py#L67-L90", "created_at": "2018-07-23T02:52:09Z", "updated_at": "2018-11-23T15:47:53Z", "html_url": "https://github.com/pytorch/pytorch/pull/9655#discussion_r204271452", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/9655", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/204271452"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/9655#discussion_r204271452"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/9655"}}, "body_html": "<p>:) I think <code>multiprocessing</code> should be smart enough. After all, this is called <code>multiprocessing.Queue</code>, i.e., a <code>queues.Queue</code> particularly designed to pass data around processes. If this isn't supported, then it wouldn't be any useful.</p>\n<p>Looking at <code>cpython</code> source, I think this is supported indeed: <a href=\"https://github.com/python/cpython/blob/3.6/Lib/multiprocessing/queues.py#L67-L90\">https://github.com/python/cpython/blob/3.6/Lib/multiprocessing/queues.py#L67-L90</a></p>", "body_text": ":) I think multiprocessing should be smart enough. After all, this is called multiprocessing.Queue, i.e., a queues.Queue particularly designed to pass data around processes. If this isn't supported, then it wouldn't be any useful.\nLooking at cpython source, I think this is supported indeed: https://github.com/python/cpython/blob/3.6/Lib/multiprocessing/queues.py#L67-L90", "in_reply_to_id": 204258506}