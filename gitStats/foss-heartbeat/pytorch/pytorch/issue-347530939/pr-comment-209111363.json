{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/209111363", "pull_request_review_id": 145064871, "id": 209111363, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTExMTM2Mw==", "diff_hunk": "@@ -418,9 +433,56 @@ def test_variable_sharing(self):\n                            requires_grad=requires_grad)\n             self._test_autograd_sharing(var)\n \n+    def test_leaf_variable_sharing(self):\n+        devices = ['cpu']\n+        if torch.cuda.is_available() and not NO_MULTIPROCESSING_SPAWN and TEST_CUDA_IPC:\n+            devices.append('cuda')\n+        for device in devices:\n+            for requires_grad in [True, False]:\n+                var = Variable(torch.arange(1., 26, device=device).view(5, 5), requires_grad=requires_grad)\n+                self.assertTrue(var.is_leaf)\n+                ctx = mp.get_context('spawn') if device == 'cuda' else mp\n+                ready = ctx.Event()\n+                queue = ctx.Queue()\n+                p = ctx.Process(target=requires_grad_variable_sharing, args=(queue, ready))\n+                p.daemon = True\n+                p.start()\n+                queue.put(var)\n+                ready.wait()\n+                worker_requires_grad = queue.get()\n+                self.assertTrue(worker_requires_grad == requires_grad)\n+\n+    def test_non_leaf_variable_sharing(self):\n+        devices = ['cpu'] if not torch.cuda.is_available() else ['cpu', 'cuda']\n+        for device in devices:\n+            var0 = Variable(torch.arange(1., 26, device=device).view(5, 5), requires_grad=True)\n+            var = var0 * 2\n+            # We can't do the pickling indirectly, e.g., with a queue.put,", "path": "test/test_multiprocessing.py", "position": null, "original_position": 116, "commit_id": "d3c05542a1f869ab97f8b9157172b45b2fa11bb9", "original_commit_id": "a6213c30d8f34a62e2a1d1cdf8e4dcf5d1f6e3ad", "user": {"login": "colesbury", "id": 655866, "node_id": "MDQ6VXNlcjY1NTg2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/655866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colesbury", "html_url": "https://github.com/colesbury", "followers_url": "https://api.github.com/users/colesbury/followers", "following_url": "https://api.github.com/users/colesbury/following{/other_user}", "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions", "organizations_url": "https://api.github.com/users/colesbury/orgs", "repos_url": "https://api.github.com/users/colesbury/repos", "events_url": "https://api.github.com/users/colesbury/events{/privacy}", "received_events_url": "https://api.github.com/users/colesbury/received_events", "type": "User", "site_admin": false}, "body": "You can use `SimpleQueue` which pickles immediately. (Queue uses a background thread)", "created_at": "2018-08-09T23:45:18Z", "updated_at": "2018-11-23T15:49:04Z", "html_url": "https://github.com/pytorch/pytorch/pull/10220#discussion_r209111363", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/10220", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/209111363"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/10220#discussion_r209111363"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/10220"}}, "body_html": "<p>You can use <code>SimpleQueue</code> which pickles immediately. (Queue uses a background thread)</p>", "body_text": "You can use SimpleQueue which pickles immediately. (Queue uses a background thread)"}