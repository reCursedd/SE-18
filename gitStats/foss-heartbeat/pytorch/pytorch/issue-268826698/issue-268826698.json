{"url": "https://api.github.com/repos/pytorch/pytorch/issues/3308", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/3308/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/3308/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/3308/events", "html_url": "https://github.com/pytorch/pytorch/issues/3308", "id": 268826698, "node_id": "MDU6SXNzdWUyNjg4MjY2OTg=", "number": 3308, "title": "`__div__` and `__truediv__` behave as `__floordiv__` on Byte and LongTensors", "user": {"login": "bermanmaxim", "id": 5989894, "node_id": "MDQ6VXNlcjU5ODk4OTQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/5989894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bermanmaxim", "html_url": "https://github.com/bermanmaxim", "followers_url": "https://api.github.com/users/bermanmaxim/followers", "following_url": "https://api.github.com/users/bermanmaxim/following{/other_user}", "gists_url": "https://api.github.com/users/bermanmaxim/gists{/gist_id}", "starred_url": "https://api.github.com/users/bermanmaxim/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bermanmaxim/subscriptions", "organizations_url": "https://api.github.com/users/bermanmaxim/orgs", "repos_url": "https://api.github.com/users/bermanmaxim/repos", "events_url": "https://api.github.com/users/bermanmaxim/events{/privacy}", "received_events_url": "https://api.github.com/users/bermanmaxim/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-10-26T16:25:34Z", "updated_at": "2017-10-26T16:26:02Z", "closed_at": null, "author_association": "CONTRIBUTOR", "body_html": "<p>For compatibility with Python and numpy, maybe it could be considered to return a FloatTensor for the division containing ByteTensor and LongTensor, and preserve the type only with <code>__truediv__</code> (or div in python 2 without <code>from __future__ import division</code>).</p>\n<p>This would also mitigate the floating exception of dividing by Long and Byte tensors with 0 values, since with the true division by default the user would get floating point infinities.</p>", "body_text": "For compatibility with Python and numpy, maybe it could be considered to return a FloatTensor for the division containing ByteTensor and LongTensor, and preserve the type only with __truediv__ (or div in python 2 without from __future__ import division).\nThis would also mitigate the floating exception of dividing by Long and Byte tensors with 0 values, since with the true division by default the user would get floating point infinities.", "body": "For compatibility with Python and numpy, maybe it could be considered to return a FloatTensor for the division containing ByteTensor and LongTensor, and preserve the type only with `__truediv__` (or div in python 2 without `from __future__ import division`).\r\n\r\nThis would also mitigate the floating exception of dividing by Long and Byte tensors with 0 values, since with the true division by default the user would get floating point infinities."}