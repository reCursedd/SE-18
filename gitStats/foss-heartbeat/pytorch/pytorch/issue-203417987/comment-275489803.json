{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/275489803", "html_url": "https://github.com/pytorch/pytorch/issues/598#issuecomment-275489803", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/598", "id": 275489803, "node_id": "MDEyOklzc3VlQ29tbWVudDI3NTQ4OTgwMw==", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "created_at": "2017-01-26T19:36:49Z", "updated_at": "2017-01-26T19:36:49Z", "author_association": "MEMBER", "body_html": "<p>Ok, so the problem is that module hooks are actually registered on the last function that the module has created. In your case <code>x + y + z</code> is computed as <code>((x + y) + z)</code> so the hook is registered on that <code>(_ + z)</code> operation, and this is why you're getting only two grad inputs.</p>\n<p>We'll definitely have to resolve this but it will need a large change in the autograd internals. However, right now <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=655866\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/colesbury\">@colesbury</a> is rewriting them to make it possible to have multiple functions dispatched in parallel, and they would heavily conflict with his work. For now use only Variable hooks (or module hooks, but not on containers). Sorry!</p>", "body_text": "Ok, so the problem is that module hooks are actually registered on the last function that the module has created. In your case x + y + z is computed as ((x + y) + z) so the hook is registered on that (_ + z) operation, and this is why you're getting only two grad inputs.\nWe'll definitely have to resolve this but it will need a large change in the autograd internals. However, right now @colesbury is rewriting them to make it possible to have multiple functions dispatched in parallel, and they would heavily conflict with his work. For now use only Variable hooks (or module hooks, but not on containers). Sorry!", "body": "Ok, so the problem is that module hooks are actually registered on the last function that the module has created. In your case `x + y + z` is computed as `((x + y) + z)` so the hook is registered on that `(_ + z)` operation, and this is why you're getting only two grad inputs.\r\n\r\nWe'll definitely have to resolve this but it will need a large change in the autograd internals. However, right now @colesbury is rewriting them to make it possible to have multiple functions dispatched in parallel, and they would heavily conflict with his work. For now use only Variable hooks (or module hooks, but not on containers). Sorry!"}