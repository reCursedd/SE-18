{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/83831828", "pull_request_review_id": 4647667, "id": 83831828, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgzODMxODI4", "diff_hunk": "@@ -93,21 +93,29 @@ def __getattr__(self, name):\n         return object.__getattribute__(self, name)\n \n     def __setattr__(self, name, value):\n-        if '_parameters' in self.__dict__:\n-            _parameters = self.__dict__['_parameters']\n-            if name in _parameters:\n-                if not isinstance(value, Variable):\n-                    raise RuntimeError((\"assiging a {} object as parameter {} \"\n-                        \"- you can only assign Variables as model\"\n-                        \"parameters\").format(type(value), name))\n-                if value.creator:\n-                    raise RuntimeError((\"All parameters should be leaf \"\n-                            \"variables - they should be created explicitly, \"\n-                            \"not as a result of computation on other \"\n-                            \"variables. If you want to express {} as a \"\n-                            \"function of another variable, simply repeat the \"\n-                            \"computation at every forward pass.\").format(name))\n-        return object.__setattr__(self, name, value)\n+        _parameters = self.__dict__.get('_parameters')\n+        if isinstance(value, Variable):\n+            if value.creator:\n+                raise ValueError(\n+                    \"Cannot assign non-leaf Variable to parameter '{0}'. Model \"\n+                    \"parameters must be created explicitly. To express '{0}' \"\n+                    \"as a function of another variable, compute the value in \"\n+                    \"the forward() method.\".format(name))\n+            _parameters[name] = value\n+        elif _parameters and name in _parameters:\n+            if value is not None:\n+                raise TypeError(\"cannot assign '{}' object to parameter '{}' \"\n+                                \"(torch.autograd.Variable required)\"", "path": "torch/nn/modules/module.py", "position": null, "original_position": 31, "commit_id": "16fe4231438c212e842bfa4abdd1b7769478b89c", "original_commit_id": "40aaa2ee3b734ffa8654578c456fa3d5e3010745", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Variable or None required\n", "created_at": "2016-10-18T11:20:22Z", "updated_at": "2018-11-23T15:31:44Z", "html_url": "https://github.com/pytorch/pytorch/pull/136#discussion_r83831828", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/136", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/83831828"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/136#discussion_r83831828"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/136"}}, "body_html": "<p>Variable or None required</p>", "body_text": "Variable or None required"}