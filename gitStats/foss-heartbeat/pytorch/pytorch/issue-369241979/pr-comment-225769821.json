{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/225769821", "pull_request_review_id": 165442878, "id": 225769821, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNTc2OTgyMQ==", "diff_hunk": "@@ -21,6 +21,16 @@ def backward(ctx, grad_output):\n                 return grad_output.type(ctx.input_type), None\n \n \n+class Noop(Function):", "path": "torch/autograd/_functions/tensor.py", "position": 4, "original_position": 4, "commit_id": "59c5202af559f3be0ca63ebb6b429944e84e52ac", "original_commit_id": "b5542cee24c873184ac1a075b2efe72c620791cf", "user": {"login": "SsnL", "id": 5674597, "node_id": "MDQ6VXNlcjU2NzQ1OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5674597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SsnL", "html_url": "https://github.com/SsnL", "followers_url": "https://api.github.com/users/SsnL/followers", "following_url": "https://api.github.com/users/SsnL/following{/other_user}", "gists_url": "https://api.github.com/users/SsnL/gists{/gist_id}", "starred_url": "https://api.github.com/users/SsnL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SsnL/subscriptions", "organizations_url": "https://api.github.com/users/SsnL/orgs", "repos_url": "https://api.github.com/users/SsnL/repos", "events_url": "https://api.github.com/users/SsnL/events{/privacy}", "received_events_url": "https://api.github.com/users/SsnL/received_events", "type": "User", "site_admin": false}, "body": "@colesbury How does Python autograd function work with our View logic? My guess is that this function is similar to an `input[:]` except that the output only shares storage but not has ViewImpl (a non-differentiable view if you use the terminology in #12502 ). I'm mainly worried that `rebase_history` of base will move this Function around so that the hooks registers on this is not the accurate grad_input/output. I'll need to think about this more.", "created_at": "2018-10-17T03:17:04Z", "updated_at": "2018-11-23T15:53:07Z", "html_url": "https://github.com/pytorch/pytorch/pull/12573#discussion_r225769821", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/12573", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/225769821"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/12573#discussion_r225769821"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/12573"}}, "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=655866\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/colesbury\">@colesbury</a> How does Python autograd function work with our View logic? My guess is that this function is similar to an <code>input[:]</code> except that the output only shares storage but not has ViewImpl (a non-differentiable view if you use the terminology in <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"368408116\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/12502\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/pytorch/pytorch/pull/12502/hovercard\" href=\"https://github.com/pytorch/pytorch/pull/12502\">#12502</a> ). I'm mainly worried that <code>rebase_history</code> of base will move this Function around so that the hooks registers on this is not the accurate grad_input/output. I'll need to think about this more.</p>", "body_text": "@colesbury How does Python autograd function work with our View logic? My guess is that this function is similar to an input[:] except that the output only shares storage but not has ViewImpl (a non-differentiable view if you use the terminology in #12502 ). I'm mainly worried that rebase_history of base will move this Function around so that the hooks registers on this is not the accurate grad_input/output. I'll need to think about this more."}