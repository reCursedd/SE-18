{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/226444283", "pull_request_review_id": 166263779, "id": 226444283, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNjQ0NDI4Mw==", "diff_hunk": "@@ -468,32 +512,59 @@ def _slow_forward(self, *input, **kwargs):\n             tracing_state._traced_module_stack.pop()\n         return result\n \n+    def _validate_backward_hook_args(self, position, args):\n+        for i, element in enumerate(args):\n+            if not torch.is_tensor(element):\n+                raise RuntimeError(\"Backward hooks on nn.Module only works for Modules\"\n+                                   \" that only use Tensors and the {}th {} of {} is of type {}\"\n+                                   \"\".format(i, position, self.__class__.__name__, type(element).__name__))\n+\n+    def _get_backward_hooks(self):\n+        backward_hooks = []\n+        for user_hook in self._backward_hooks.values():\n+            backward_hooks.append(hooks.BackwardHook(self, user_hook))\n+        return backward_hooks\n+\n     def __call__(self, *input, **kwargs):\n+        if len(self._backward_hooks) > 0:\n+            backward_hooks = self._get_backward_hooks()\n+\n+            self._validate_backward_hook_args(\"input\", input)\n+            input = Noop.apply(*input)\n+\n+            noop_fn = _get_prev_function(input)", "path": "torch/nn/modules/module.py", "position": null, "original_position": 132, "commit_id": "59c5202af559f3be0ca63ebb6b429944e84e52ac", "original_commit_id": "1c2986aae99e46e60154a5008e467970a78e6451", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Can we write an internal alternative to `.apply`, which also returns the function object as the second value (e.g. `_apply_ret_self`)? That would be much more robust.", "created_at": "2018-10-18T19:57:19Z", "updated_at": "2018-11-23T15:53:14Z", "html_url": "https://github.com/pytorch/pytorch/pull/12573#discussion_r226444283", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/12573", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/226444283"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/12573#discussion_r226444283"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/12573"}}, "body_html": "<p>Can we write an internal alternative to <code>.apply</code>, which also returns the function object as the second value (e.g. <code>_apply_ret_self</code>)? That would be much more robust.</p>", "body_text": "Can we write an internal alternative to .apply, which also returns the function object as the second value (e.g. _apply_ret_self)? That would be much more robust."}