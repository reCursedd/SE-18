{"url": "https://api.github.com/repos/pytorch/pytorch/issues/8061", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/8061/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/8061/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/8061/events", "html_url": "https://github.com/pytorch/pytorch/pull/8061", "id": 328692641, "node_id": "MDExOlB1bGxSZXF1ZXN0MTkyMTY2ODU5", "number": 8061, "title": "Correct bug in _torch_docs.py that truncates docstrings.", "user": {"login": "sethah", "id": 7275795, "node_id": "MDQ6VXNlcjcyNzU3OTU=", "avatar_url": "https://avatars2.githubusercontent.com/u/7275795?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sethah", "html_url": "https://github.com/sethah", "followers_url": "https://api.github.com/users/sethah/followers", "following_url": "https://api.github.com/users/sethah/following{/other_user}", "gists_url": "https://api.github.com/users/sethah/gists{/gist_id}", "starred_url": "https://api.github.com/users/sethah/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sethah/subscriptions", "organizations_url": "https://api.github.com/users/sethah/orgs", "repos_url": "https://api.github.com/users/sethah/repos", "events_url": "https://api.github.com/users/sethah/events{/privacy}", "received_events_url": "https://api.github.com/users/sethah/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-06-02T00:01:00Z", "updated_at": "2018-06-04T14:48:00Z", "closed_at": "2018-06-04T14:47:56Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/8061", "html_url": "https://github.com/pytorch/pytorch/pull/8061", "diff_url": "https://github.com/pytorch/pytorch/pull/8061.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/8061.patch"}, "body_html": "<p><a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"315555031\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/6709\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/pytorch/pytorch/pull/6709/hovercard\" href=\"https://github.com/pytorch/pytorch/pull/6709\">#6709</a> Introduced a helper function in <code>_torch_docs.py</code> called <code>parse_kwargs</code>.</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">parse_kwargs</span>(<span class=\"pl-smi\">desc</span>):\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"\"\"</span>Maps a description of args to a dictionary of {argname: description}.</span>\n<span class=\"pl-s\">    Input:</span>\n<span class=\"pl-s\">        ('    weight (Tensor): a weight tensor<span class=\"pl-cce\">\\n</span>' +</span>\n<span class=\"pl-s\">         '        Some optional description')</span>\n<span class=\"pl-s\">    Output: {</span>\n<span class=\"pl-s\">        'weight': <span class=\"pl-c1\">\\</span></span>\n<span class=\"pl-s\">        'weight (Tensor): a weight tensor<span class=\"pl-cce\">\\n</span>        Some optional description'</span>\n<span class=\"pl-s\">    }</span>\n<span class=\"pl-s\">    <span class=\"pl-pds\">\"\"\"</span></span>\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> Split by indents. Assumes each arg starts on a new line with 4 spaces.</span>\n    kwargs <span class=\"pl-k\">=</span> [section.strip() <span class=\"pl-k\">for</span> section <span class=\"pl-k\">in</span> desc.split(<span class=\"pl-s\"><span class=\"pl-pds\">'</span><span class=\"pl-cce\">\\n</span>   <span class=\"pl-pds\">'</span></span>)]\n    kwargs <span class=\"pl-k\">=</span> [section <span class=\"pl-k\">for</span> section <span class=\"pl-k\">in</span> kwargs <span class=\"pl-k\">if</span> <span class=\"pl-c1\">len</span>(section) <span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">0</span>]\n    <span class=\"pl-k\">return</span> {desc.split(<span class=\"pl-s\"><span class=\"pl-pds\">'</span> <span class=\"pl-pds\">'</span></span>)[<span class=\"pl-c1\">0</span>]: desc <span class=\"pl-k\">for</span> desc <span class=\"pl-k\">in</span> kwargs}</pre></div>\n<p>The criteria for splitting lines doesn't do what it is supposed to do. You can test this by the following:</p>\n<div class=\"highlight highlight-source-python\"><pre>factory_data_common_args <span class=\"pl-k\">=</span> parse_kwargs(<span class=\"pl-s\"><span class=\"pl-pds\">\"\"\"</span></span>\n<span class=\"pl-s\">    data (array_like): Initial data for the tensor. Can be a list, tuple,</span>\n<span class=\"pl-s\">        NumPy ``ndarray``, scalar, and other types.</span>\n<span class=\"pl-s\">    dtype (:class:`torch.dtype`, optional): the desired data type of returned tensor.</span>\n<span class=\"pl-s\">        Default: if None, infers data type from :attr:`data`.</span>\n<span class=\"pl-s\">    device (:class:`torch.device`, optional): the desired device of returned tensor.</span>\n<span class=\"pl-s\">        Default: if None, uses the current device for the default tensor type</span>\n<span class=\"pl-s\">        (see :func:`torch.set_default_tensor_type`). :attr:`device` will be the CPU</span>\n<span class=\"pl-s\">        for CPU tensor types and the current CUDA device for CUDA tensor types.</span>\n<span class=\"pl-s\">    requires_grad (bool, optional): If autograd should record operations on the</span>\n<span class=\"pl-s\">        returned tensor. Default: ``False``.</span>\n<span class=\"pl-s\"><span class=\"pl-pds\">\"\"\"</span></span>)\n<span class=\"pl-c1\">print</span>(factory_data_common_args)</pre></div>\n<p>Which shows:</p>\n<pre><code>{'data': 'data (array_like): Initial data for the tensor. Can be a list, tuple,',\n 'NumPy': 'NumPy ``ndarray``, scalar, and other types.',\n 'dtype': 'dtype (:class:`torch.dtype`, optional): the desired data type of returned tensor.',\n 'Default:': 'Default: if None, uses the current device for the default tensor type',\n 'device': 'device (:class:`torch.device`, optional): the desired device of returned tensor.',\n '(see': '(see :func:`torch.set_default_tensor_type`). :attr:`device` will be the CPU',\n 'for': 'for CPU tensor types and the current CUDA device for CUDA tensor types.',\n 'requires_grad': 'requires_grad (bool, optional): If autograd should record operations on the',\n 'returned': 'returned tensor. Default: ``False``.'}\n</code></pre>\n<p>This is because the split also matches the patterns of the other lines which start with 8 spaces. This makes only the first line show up in the docstring, which you can verify by <code>torch.tensor?</code>.</p>\n<pre><code>Docstring:\ntensor(data, dtype=None, device=None, requires_grad=False) -&gt; Tensor\n\nConstructs a tensor with :attr:`data`.\n\n.. warning::\n\n    :func:`torch.tensor` always copies :attr:`data`. If you have a Tensor\n    ``data`` and want to avoid a copy, use :func:`torch.Tensor.requires_grad_`\n    or :func:`torch.Tensor.detach`.\n    If you have a NumPy ``ndarray`` and want to avoid a copy, use\n    :func:`torch.from_numpy`.\n\nArgs:\n    data (array_like): Initial data for the tensor. Can be a list, tuple,\n    dtype (:class:`torch.dtype`, optional): the desired data type of returned tensor.\n    device (:class:`torch.device`, optional): the desired device of returned tensor.\n    requires_grad (bool, optional): If autograd should record operations on the\n\n</code></pre>\n<p>I verified this against <a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/pytorch/pytorch/commit/2fb957da814e4e5a351beda4f09a89b58f96186a/hovercard\" href=\"https://github.com/pytorch/pytorch/commit/2fb957da814e4e5a351beda4f09a89b58f96186a\"><tt>2fb957d</tt></a>.</p>\n<p>The solution in this patch is to use a regex to split, which matches only newlines followed by exactly 4 spaces, which was the original intent I believe.</p>", "body_text": "#6709 Introduced a helper function in _torch_docs.py called parse_kwargs.\ndef parse_kwargs(desc):\n    \"\"\"Maps a description of args to a dictionary of {argname: description}.\n    Input:\n        ('    weight (Tensor): a weight tensor\\n' +\n         '        Some optional description')\n    Output: {\n        'weight': \\\n        'weight (Tensor): a weight tensor\\n        Some optional description'\n    }\n    \"\"\"\n    # Split by indents. Assumes each arg starts on a new line with 4 spaces.\n    kwargs = [section.strip() for section in desc.split('\\n   ')]\n    kwargs = [section for section in kwargs if len(section) > 0]\n    return {desc.split(' ')[0]: desc for desc in kwargs}\nThe criteria for splitting lines doesn't do what it is supposed to do. You can test this by the following:\nfactory_data_common_args = parse_kwargs(\"\"\"\n    data (array_like): Initial data for the tensor. Can be a list, tuple,\n        NumPy ``ndarray``, scalar, and other types.\n    dtype (:class:`torch.dtype`, optional): the desired data type of returned tensor.\n        Default: if None, infers data type from :attr:`data`.\n    device (:class:`torch.device`, optional): the desired device of returned tensor.\n        Default: if None, uses the current device for the default tensor type\n        (see :func:`torch.set_default_tensor_type`). :attr:`device` will be the CPU\n        for CPU tensor types and the current CUDA device for CUDA tensor types.\n    requires_grad (bool, optional): If autograd should record operations on the\n        returned tensor. Default: ``False``.\n\"\"\")\nprint(factory_data_common_args)\nWhich shows:\n{'data': 'data (array_like): Initial data for the tensor. Can be a list, tuple,',\n 'NumPy': 'NumPy ``ndarray``, scalar, and other types.',\n 'dtype': 'dtype (:class:`torch.dtype`, optional): the desired data type of returned tensor.',\n 'Default:': 'Default: if None, uses the current device for the default tensor type',\n 'device': 'device (:class:`torch.device`, optional): the desired device of returned tensor.',\n '(see': '(see :func:`torch.set_default_tensor_type`). :attr:`device` will be the CPU',\n 'for': 'for CPU tensor types and the current CUDA device for CUDA tensor types.',\n 'requires_grad': 'requires_grad (bool, optional): If autograd should record operations on the',\n 'returned': 'returned tensor. Default: ``False``.'}\n\nThis is because the split also matches the patterns of the other lines which start with 8 spaces. This makes only the first line show up in the docstring, which you can verify by torch.tensor?.\nDocstring:\ntensor(data, dtype=None, device=None, requires_grad=False) -> Tensor\n\nConstructs a tensor with :attr:`data`.\n\n.. warning::\n\n    :func:`torch.tensor` always copies :attr:`data`. If you have a Tensor\n    ``data`` and want to avoid a copy, use :func:`torch.Tensor.requires_grad_`\n    or :func:`torch.Tensor.detach`.\n    If you have a NumPy ``ndarray`` and want to avoid a copy, use\n    :func:`torch.from_numpy`.\n\nArgs:\n    data (array_like): Initial data for the tensor. Can be a list, tuple,\n    dtype (:class:`torch.dtype`, optional): the desired data type of returned tensor.\n    device (:class:`torch.device`, optional): the desired device of returned tensor.\n    requires_grad (bool, optional): If autograd should record operations on the\n\n\nI verified this against 2fb957d.\nThe solution in this patch is to use a regex to split, which matches only newlines followed by exactly 4 spaces, which was the original intent I believe.", "body": "https://github.com/pytorch/pytorch/pull/6709 Introduced a helper function in `_torch_docs.py` called `parse_kwargs`.\r\n\r\n```python\r\ndef parse_kwargs(desc):\r\n    \"\"\"Maps a description of args to a dictionary of {argname: description}.\r\n    Input:\r\n        ('    weight (Tensor): a weight tensor\\n' +\r\n         '        Some optional description')\r\n    Output: {\r\n        'weight': \\\r\n        'weight (Tensor): a weight tensor\\n        Some optional description'\r\n    }\r\n    \"\"\"\r\n    # Split by indents. Assumes each arg starts on a new line with 4 spaces.\r\n    kwargs = [section.strip() for section in desc.split('\\n   ')]\r\n    kwargs = [section for section in kwargs if len(section) > 0]\r\n    return {desc.split(' ')[0]: desc for desc in kwargs}\r\n```\r\n\r\nThe criteria for splitting lines doesn't do what it is supposed to do. You can test this by the following:\r\n\r\n```python\r\nfactory_data_common_args = parse_kwargs(\"\"\"\r\n    data (array_like): Initial data for the tensor. Can be a list, tuple,\r\n        NumPy ``ndarray``, scalar, and other types.\r\n    dtype (:class:`torch.dtype`, optional): the desired data type of returned tensor.\r\n        Default: if None, infers data type from :attr:`data`.\r\n    device (:class:`torch.device`, optional): the desired device of returned tensor.\r\n        Default: if None, uses the current device for the default tensor type\r\n        (see :func:`torch.set_default_tensor_type`). :attr:`device` will be the CPU\r\n        for CPU tensor types and the current CUDA device for CUDA tensor types.\r\n    requires_grad (bool, optional): If autograd should record operations on the\r\n        returned tensor. Default: ``False``.\r\n\"\"\")\r\nprint(factory_data_common_args)\r\n```\r\n\r\nWhich shows:\r\n```\r\n{'data': 'data (array_like): Initial data for the tensor. Can be a list, tuple,',\r\n 'NumPy': 'NumPy ``ndarray``, scalar, and other types.',\r\n 'dtype': 'dtype (:class:`torch.dtype`, optional): the desired data type of returned tensor.',\r\n 'Default:': 'Default: if None, uses the current device for the default tensor type',\r\n 'device': 'device (:class:`torch.device`, optional): the desired device of returned tensor.',\r\n '(see': '(see :func:`torch.set_default_tensor_type`). :attr:`device` will be the CPU',\r\n 'for': 'for CPU tensor types and the current CUDA device for CUDA tensor types.',\r\n 'requires_grad': 'requires_grad (bool, optional): If autograd should record operations on the',\r\n 'returned': 'returned tensor. Default: ``False``.'}\r\n```\r\n\r\nThis is because the split also matches the patterns of the other lines which start with 8 spaces. This makes only the first line show up in the docstring, which you can verify by `torch.tensor?`.\r\n\r\n```\r\nDocstring:\r\ntensor(data, dtype=None, device=None, requires_grad=False) -> Tensor\r\n\r\nConstructs a tensor with :attr:`data`.\r\n\r\n.. warning::\r\n\r\n    :func:`torch.tensor` always copies :attr:`data`. If you have a Tensor\r\n    ``data`` and want to avoid a copy, use :func:`torch.Tensor.requires_grad_`\r\n    or :func:`torch.Tensor.detach`.\r\n    If you have a NumPy ``ndarray`` and want to avoid a copy, use\r\n    :func:`torch.from_numpy`.\r\n\r\nArgs:\r\n    data (array_like): Initial data for the tensor. Can be a list, tuple,\r\n    dtype (:class:`torch.dtype`, optional): the desired data type of returned tensor.\r\n    device (:class:`torch.device`, optional): the desired device of returned tensor.\r\n    requires_grad (bool, optional): If autograd should record operations on the\r\n\r\n```\r\n\r\nI verified this against https://github.com/pytorch/pytorch/commit/2fb957da814e4e5a351beda4f09a89b58f96186a.\r\n\r\nThe solution in this patch is to use a regex to split, which matches only newlines followed by exactly 4 spaces, which was the original intent I believe."}