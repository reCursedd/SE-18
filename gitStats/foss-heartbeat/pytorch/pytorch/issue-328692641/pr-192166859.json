{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/8061", "id": 192166859, "node_id": "MDExOlB1bGxSZXF1ZXN0MTkyMTY2ODU5", "html_url": "https://github.com/pytorch/pytorch/pull/8061", "diff_url": "https://github.com/pytorch/pytorch/pull/8061.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/8061.patch", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/8061", "number": 8061, "state": "closed", "locked": false, "title": "Correct bug in _torch_docs.py that truncates docstrings.", "user": {"login": "sethah", "id": 7275795, "node_id": "MDQ6VXNlcjcyNzU3OTU=", "avatar_url": "https://avatars2.githubusercontent.com/u/7275795?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sethah", "html_url": "https://github.com/sethah", "followers_url": "https://api.github.com/users/sethah/followers", "following_url": "https://api.github.com/users/sethah/following{/other_user}", "gists_url": "https://api.github.com/users/sethah/gists{/gist_id}", "starred_url": "https://api.github.com/users/sethah/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sethah/subscriptions", "organizations_url": "https://api.github.com/users/sethah/orgs", "repos_url": "https://api.github.com/users/sethah/repos", "events_url": "https://api.github.com/users/sethah/events{/privacy}", "received_events_url": "https://api.github.com/users/sethah/received_events", "type": "User", "site_admin": false}, "body": "https://github.com/pytorch/pytorch/pull/6709 Introduced a helper function in `_torch_docs.py` called `parse_kwargs`.\r\n\r\n```python\r\ndef parse_kwargs(desc):\r\n    \"\"\"Maps a description of args to a dictionary of {argname: description}.\r\n    Input:\r\n        ('    weight (Tensor): a weight tensor\\n' +\r\n         '        Some optional description')\r\n    Output: {\r\n        'weight': \\\r\n        'weight (Tensor): a weight tensor\\n        Some optional description'\r\n    }\r\n    \"\"\"\r\n    # Split by indents. Assumes each arg starts on a new line with 4 spaces.\r\n    kwargs = [section.strip() for section in desc.split('\\n   ')]\r\n    kwargs = [section for section in kwargs if len(section) > 0]\r\n    return {desc.split(' ')[0]: desc for desc in kwargs}\r\n```\r\n\r\nThe criteria for splitting lines doesn't do what it is supposed to do. You can test this by the following:\r\n\r\n```python\r\nfactory_data_common_args = parse_kwargs(\"\"\"\r\n    data (array_like): Initial data for the tensor. Can be a list, tuple,\r\n        NumPy ``ndarray``, scalar, and other types.\r\n    dtype (:class:`torch.dtype`, optional): the desired data type of returned tensor.\r\n        Default: if None, infers data type from :attr:`data`.\r\n    device (:class:`torch.device`, optional): the desired device of returned tensor.\r\n        Default: if None, uses the current device for the default tensor type\r\n        (see :func:`torch.set_default_tensor_type`). :attr:`device` will be the CPU\r\n        for CPU tensor types and the current CUDA device for CUDA tensor types.\r\n    requires_grad (bool, optional): If autograd should record operations on the\r\n        returned tensor. Default: ``False``.\r\n\"\"\")\r\nprint(factory_data_common_args)\r\n```\r\n\r\nWhich shows:\r\n```\r\n{'data': 'data (array_like): Initial data for the tensor. Can be a list, tuple,',\r\n 'NumPy': 'NumPy ``ndarray``, scalar, and other types.',\r\n 'dtype': 'dtype (:class:`torch.dtype`, optional): the desired data type of returned tensor.',\r\n 'Default:': 'Default: if None, uses the current device for the default tensor type',\r\n 'device': 'device (:class:`torch.device`, optional): the desired device of returned tensor.',\r\n '(see': '(see :func:`torch.set_default_tensor_type`). :attr:`device` will be the CPU',\r\n 'for': 'for CPU tensor types and the current CUDA device for CUDA tensor types.',\r\n 'requires_grad': 'requires_grad (bool, optional): If autograd should record operations on the',\r\n 'returned': 'returned tensor. Default: ``False``.'}\r\n```\r\n\r\nThis is because the split also matches the patterns of the other lines which start with 8 spaces. This makes only the first line show up in the docstring, which you can verify by `torch.tensor?`.\r\n\r\n```\r\nDocstring:\r\ntensor(data, dtype=None, device=None, requires_grad=False) -> Tensor\r\n\r\nConstructs a tensor with :attr:`data`.\r\n\r\n.. warning::\r\n\r\n    :func:`torch.tensor` always copies :attr:`data`. If you have a Tensor\r\n    ``data`` and want to avoid a copy, use :func:`torch.Tensor.requires_grad_`\r\n    or :func:`torch.Tensor.detach`.\r\n    If you have a NumPy ``ndarray`` and want to avoid a copy, use\r\n    :func:`torch.from_numpy`.\r\n\r\nArgs:\r\n    data (array_like): Initial data for the tensor. Can be a list, tuple,\r\n    dtype (:class:`torch.dtype`, optional): the desired data type of returned tensor.\r\n    device (:class:`torch.device`, optional): the desired device of returned tensor.\r\n    requires_grad (bool, optional): If autograd should record operations on the\r\n\r\n```\r\n\r\nI verified this against https://github.com/pytorch/pytorch/commit/2fb957da814e4e5a351beda4f09a89b58f96186a.\r\n\r\nThe solution in this patch is to use a regex to split, which matches only newlines followed by exactly 4 spaces, which was the original intent I believe.", "created_at": "2018-06-02T00:01:00Z", "updated_at": "2018-06-04T14:48:00Z", "closed_at": "2018-06-04T14:47:56Z", "merged_at": "2018-06-04T14:47:56Z", "merge_commit_sha": "f8830f9991b4993960f7786dcd0f21ef7774b3aa", "assignee": null, "assignees": [], "requested_reviewers": [{"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, {"login": "colesbury", "id": 655866, "node_id": "MDQ6VXNlcjY1NTg2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/655866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colesbury", "html_url": "https://github.com/colesbury", "followers_url": "https://api.github.com/users/colesbury/followers", "following_url": "https://api.github.com/users/colesbury/following{/other_user}", "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions", "organizations_url": "https://api.github.com/users/colesbury/orgs", "repos_url": "https://api.github.com/users/colesbury/repos", "events_url": "https://api.github.com/users/colesbury/events{/privacy}", "received_events_url": "https://api.github.com/users/colesbury/received_events", "type": "User", "site_admin": false}, {"login": "gchanan", "id": 3768583, "node_id": "MDQ6VXNlcjM3Njg1ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3768583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gchanan", "html_url": "https://github.com/gchanan", "followers_url": "https://api.github.com/users/gchanan/followers", "following_url": "https://api.github.com/users/gchanan/following{/other_user}", "gists_url": "https://api.github.com/users/gchanan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gchanan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gchanan/subscriptions", "organizations_url": "https://api.github.com/users/gchanan/orgs", "repos_url": "https://api.github.com/users/gchanan/repos", "events_url": "https://api.github.com/users/gchanan/events{/privacy}", "received_events_url": "https://api.github.com/users/gchanan/received_events", "type": "User", "site_admin": false}, {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}], "requested_teams": [], "labels": [], "milestone": null, "commits_url": "https://api.github.com/repos/pytorch/pytorch/pulls/8061/commits", "review_comments_url": "https://api.github.com/repos/pytorch/pytorch/pulls/8061/comments", "review_comment_url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments{/number}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/8061/comments", "statuses_url": "https://api.github.com/repos/pytorch/pytorch/statuses/12dd41547e7881f7e2cf08d8b84049b2dcc468ba", "head": {"label": "sethah:kwarg_parse_bug", "ref": "kwarg_parse_bug", "sha": "12dd41547e7881f7e2cf08d8b84049b2dcc468ba", "user": {"login": "sethah", "id": 7275795, "node_id": "MDQ6VXNlcjcyNzU3OTU=", "avatar_url": "https://avatars2.githubusercontent.com/u/7275795?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sethah", "html_url": "https://github.com/sethah", "followers_url": "https://api.github.com/users/sethah/followers", "following_url": "https://api.github.com/users/sethah/following{/other_user}", "gists_url": "https://api.github.com/users/sethah/gists{/gist_id}", "starred_url": "https://api.github.com/users/sethah/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sethah/subscriptions", "organizations_url": "https://api.github.com/users/sethah/orgs", "repos_url": "https://api.github.com/users/sethah/repos", "events_url": "https://api.github.com/users/sethah/events{/privacy}", "received_events_url": "https://api.github.com/users/sethah/received_events", "type": "User", "site_admin": false}, "repo": {"id": 100138275, "node_id": "MDEwOlJlcG9zaXRvcnkxMDAxMzgyNzU=", "name": "pytorch", "full_name": "sethah/pytorch", "private": false, "owner": {"login": "sethah", "id": 7275795, "node_id": "MDQ6VXNlcjcyNzU3OTU=", "avatar_url": "https://avatars2.githubusercontent.com/u/7275795?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sethah", "html_url": "https://github.com/sethah", "followers_url": "https://api.github.com/users/sethah/followers", "following_url": "https://api.github.com/users/sethah/following{/other_user}", "gists_url": "https://api.github.com/users/sethah/gists{/gist_id}", "starred_url": "https://api.github.com/users/sethah/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sethah/subscriptions", "organizations_url": "https://api.github.com/users/sethah/orgs", "repos_url": "https://api.github.com/users/sethah/repos", "events_url": "https://api.github.com/users/sethah/events{/privacy}", "received_events_url": "https://api.github.com/users/sethah/received_events", "type": "User", "site_admin": false}, "html_url": "https://github.com/sethah/pytorch", "description": "Tensors and Dynamic neural networks in Python  with strong GPU acceleration", "fork": true, "url": "https://api.github.com/repos/sethah/pytorch", "forks_url": "https://api.github.com/repos/sethah/pytorch/forks", "keys_url": "https://api.github.com/repos/sethah/pytorch/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/sethah/pytorch/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/sethah/pytorch/teams", "hooks_url": "https://api.github.com/repos/sethah/pytorch/hooks", "issue_events_url": "https://api.github.com/repos/sethah/pytorch/issues/events{/number}", "events_url": "https://api.github.com/repos/sethah/pytorch/events", "assignees_url": "https://api.github.com/repos/sethah/pytorch/assignees{/user}", "branches_url": "https://api.github.com/repos/sethah/pytorch/branches{/branch}", "tags_url": "https://api.github.com/repos/sethah/pytorch/tags", "blobs_url": "https://api.github.com/repos/sethah/pytorch/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/sethah/pytorch/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/sethah/pytorch/git/refs{/sha}", "trees_url": "https://api.github.com/repos/sethah/pytorch/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/sethah/pytorch/statuses/{sha}", "languages_url": "https://api.github.com/repos/sethah/pytorch/languages", "stargazers_url": "https://api.github.com/repos/sethah/pytorch/stargazers", "contributors_url": "https://api.github.com/repos/sethah/pytorch/contributors", "subscribers_url": "https://api.github.com/repos/sethah/pytorch/subscribers", "subscription_url": "https://api.github.com/repos/sethah/pytorch/subscription", "commits_url": "https://api.github.com/repos/sethah/pytorch/commits{/sha}", "git_commits_url": "https://api.github.com/repos/sethah/pytorch/git/commits{/sha}", "comments_url": "https://api.github.com/repos/sethah/pytorch/comments{/number}", "issue_comment_url": "https://api.github.com/repos/sethah/pytorch/issues/comments{/number}", "contents_url": "https://api.github.com/repos/sethah/pytorch/contents/{+path}", "compare_url": "https://api.github.com/repos/sethah/pytorch/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/sethah/pytorch/merges", "archive_url": "https://api.github.com/repos/sethah/pytorch/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/sethah/pytorch/downloads", "issues_url": "https://api.github.com/repos/sethah/pytorch/issues{/number}", "pulls_url": "https://api.github.com/repos/sethah/pytorch/pulls{/number}", "milestones_url": "https://api.github.com/repos/sethah/pytorch/milestones{/number}", "notifications_url": "https://api.github.com/repos/sethah/pytorch/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/sethah/pytorch/labels{/name}", "releases_url": "https://api.github.com/repos/sethah/pytorch/releases{/id}", "deployments_url": "https://api.github.com/repos/sethah/pytorch/deployments", "created_at": "2017-08-12T21:18:06Z", "updated_at": "2017-08-12T21:18:11Z", "pushed_at": "2018-07-24T03:05:26Z", "git_url": "git://github.com/sethah/pytorch.git", "ssh_url": "git@github.com:sethah/pytorch.git", "clone_url": "https://github.com/sethah/pytorch.git", "svn_url": "https://github.com/sethah/pytorch", "homepage": "http://pytorch.org", "size": 63347, "stargazers_count": 0, "watchers_count": 0, "language": "Python", "has_issues": false, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 0, "mirror_url": null, "archived": false, "open_issues_count": 0, "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "forks": 0, "open_issues": 0, "watchers": 0, "default_branch": "master"}}, "base": {"label": "pytorch:master", "ref": "master", "sha": "8d4e92a91db23415018206565017dfb78d2e26e1", "user": {"login": "pytorch", "id": 21003710, "node_id": "MDEyOk9yZ2FuaXphdGlvbjIxMDAzNzEw", "avatar_url": "https://avatars3.githubusercontent.com/u/21003710?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pytorch", "html_url": "https://github.com/pytorch", "followers_url": "https://api.github.com/users/pytorch/followers", "following_url": "https://api.github.com/users/pytorch/following{/other_user}", "gists_url": "https://api.github.com/users/pytorch/gists{/gist_id}", "starred_url": "https://api.github.com/users/pytorch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pytorch/subscriptions", "organizations_url": "https://api.github.com/users/pytorch/orgs", "repos_url": "https://api.github.com/users/pytorch/repos", "events_url": "https://api.github.com/users/pytorch/events{/privacy}", "received_events_url": "https://api.github.com/users/pytorch/received_events", "type": "Organization", "site_admin": false}, "repo": {"id": 65600975, "node_id": "MDEwOlJlcG9zaXRvcnk2NTYwMDk3NQ==", "name": "pytorch", "full_name": "pytorch/pytorch", "private": false, "owner": {"login": "pytorch", "id": 21003710, "node_id": "MDEyOk9yZ2FuaXphdGlvbjIxMDAzNzEw", "avatar_url": "https://avatars3.githubusercontent.com/u/21003710?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pytorch", "html_url": "https://github.com/pytorch", "followers_url": "https://api.github.com/users/pytorch/followers", "following_url": "https://api.github.com/users/pytorch/following{/other_user}", "gists_url": "https://api.github.com/users/pytorch/gists{/gist_id}", "starred_url": "https://api.github.com/users/pytorch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pytorch/subscriptions", "organizations_url": "https://api.github.com/users/pytorch/orgs", "repos_url": "https://api.github.com/users/pytorch/repos", "events_url": "https://api.github.com/users/pytorch/events{/privacy}", "received_events_url": "https://api.github.com/users/pytorch/received_events", "type": "Organization", "site_admin": false}, "html_url": "https://github.com/pytorch/pytorch", "description": "Tensors and Dynamic neural networks in Python  with strong GPU acceleration", "fork": false, "url": "https://api.github.com/repos/pytorch/pytorch", "forks_url": "https://api.github.com/repos/pytorch/pytorch/forks", "keys_url": "https://api.github.com/repos/pytorch/pytorch/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/pytorch/pytorch/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/pytorch/pytorch/teams", "hooks_url": "https://api.github.com/repos/pytorch/pytorch/hooks", "issue_events_url": "https://api.github.com/repos/pytorch/pytorch/issues/events{/number}", "events_url": "https://api.github.com/repos/pytorch/pytorch/events", "assignees_url": "https://api.github.com/repos/pytorch/pytorch/assignees{/user}", "branches_url": "https://api.github.com/repos/pytorch/pytorch/branches{/branch}", "tags_url": "https://api.github.com/repos/pytorch/pytorch/tags", "blobs_url": "https://api.github.com/repos/pytorch/pytorch/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/pytorch/pytorch/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/pytorch/pytorch/git/refs{/sha}", "trees_url": "https://api.github.com/repos/pytorch/pytorch/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/pytorch/pytorch/statuses/{sha}", "languages_url": "https://api.github.com/repos/pytorch/pytorch/languages", "stargazers_url": "https://api.github.com/repos/pytorch/pytorch/stargazers", "contributors_url": "https://api.github.com/repos/pytorch/pytorch/contributors", "subscribers_url": "https://api.github.com/repos/pytorch/pytorch/subscribers", "subscription_url": "https://api.github.com/repos/pytorch/pytorch/subscription", "commits_url": "https://api.github.com/repos/pytorch/pytorch/commits{/sha}", "git_commits_url": "https://api.github.com/repos/pytorch/pytorch/git/commits{/sha}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/comments{/number}", "issue_comment_url": "https://api.github.com/repos/pytorch/pytorch/issues/comments{/number}", "contents_url": "https://api.github.com/repos/pytorch/pytorch/contents/{+path}", "compare_url": "https://api.github.com/repos/pytorch/pytorch/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/pytorch/pytorch/merges", "archive_url": "https://api.github.com/repos/pytorch/pytorch/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/pytorch/pytorch/downloads", "issues_url": "https://api.github.com/repos/pytorch/pytorch/issues{/number}", "pulls_url": "https://api.github.com/repos/pytorch/pytorch/pulls{/number}", "milestones_url": "https://api.github.com/repos/pytorch/pytorch/milestones{/number}", "notifications_url": "https://api.github.com/repos/pytorch/pytorch/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/pytorch/pytorch/labels{/name}", "releases_url": "https://api.github.com/repos/pytorch/pytorch/releases{/id}", "deployments_url": "https://api.github.com/repos/pytorch/pytorch/deployments", "created_at": "2016-08-13T05:26:41Z", "updated_at": "2018-11-24T12:35:43Z", "pushed_at": "2018-11-24T12:42:01Z", "git_url": "git://github.com/pytorch/pytorch.git", "ssh_url": "git@github.com:pytorch/pytorch.git", "clone_url": "https://github.com/pytorch/pytorch.git", "svn_url": "https://github.com/pytorch/pytorch", "homepage": "http://pytorch.org", "size": 89656, "stargazers_count": 21589, "watchers_count": 21589, "language": "C++", "has_issues": true, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 5153, "mirror_url": null, "archived": false, "open_issues_count": 2197, "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "forks": 5153, "open_issues": 2197, "watchers": 21589, "default_branch": "master"}}, "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/8061"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/8061"}, "issue": {"href": "https://api.github.com/repos/pytorch/pytorch/issues/8061"}, "comments": {"href": "https://api.github.com/repos/pytorch/pytorch/issues/8061/comments"}, "review_comments": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/8061/comments"}, "review_comment": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments{/number}"}, "commits": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/8061/commits"}, "statuses": {"href": "https://api.github.com/repos/pytorch/pytorch/statuses/12dd41547e7881f7e2cf08d8b84049b2dcc468ba"}}, "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"315555031\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/6709\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/pytorch/pytorch/pull/6709/hovercard\" href=\"https://github.com/pytorch/pytorch/pull/6709\">#6709</a> Introduced a helper function in <code>_torch_docs.py</code> called <code>parse_kwargs</code>.</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">parse_kwargs</span>(<span class=\"pl-smi\">desc</span>):\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"\"\"</span>Maps a description of args to a dictionary of {argname: description}.</span>\n<span class=\"pl-s\">    Input:</span>\n<span class=\"pl-s\">        ('    weight (Tensor): a weight tensor<span class=\"pl-cce\">\\n</span>' +</span>\n<span class=\"pl-s\">         '        Some optional description')</span>\n<span class=\"pl-s\">    Output: {</span>\n<span class=\"pl-s\">        'weight': <span class=\"pl-c1\">\\</span></span>\n<span class=\"pl-s\">        'weight (Tensor): a weight tensor<span class=\"pl-cce\">\\n</span>        Some optional description'</span>\n<span class=\"pl-s\">    }</span>\n<span class=\"pl-s\">    <span class=\"pl-pds\">\"\"\"</span></span>\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> Split by indents. Assumes each arg starts on a new line with 4 spaces.</span>\n    kwargs <span class=\"pl-k\">=</span> [section.strip() <span class=\"pl-k\">for</span> section <span class=\"pl-k\">in</span> desc.split(<span class=\"pl-s\"><span class=\"pl-pds\">'</span><span class=\"pl-cce\">\\n</span>   <span class=\"pl-pds\">'</span></span>)]\n    kwargs <span class=\"pl-k\">=</span> [section <span class=\"pl-k\">for</span> section <span class=\"pl-k\">in</span> kwargs <span class=\"pl-k\">if</span> <span class=\"pl-c1\">len</span>(section) <span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">0</span>]\n    <span class=\"pl-k\">return</span> {desc.split(<span class=\"pl-s\"><span class=\"pl-pds\">'</span> <span class=\"pl-pds\">'</span></span>)[<span class=\"pl-c1\">0</span>]: desc <span class=\"pl-k\">for</span> desc <span class=\"pl-k\">in</span> kwargs}</pre></div>\n<p>The criteria for splitting lines doesn't do what it is supposed to do. You can test this by the following:</p>\n<div class=\"highlight highlight-source-python\"><pre>factory_data_common_args <span class=\"pl-k\">=</span> parse_kwargs(<span class=\"pl-s\"><span class=\"pl-pds\">\"\"\"</span></span>\n<span class=\"pl-s\">    data (array_like): Initial data for the tensor. Can be a list, tuple,</span>\n<span class=\"pl-s\">        NumPy ``ndarray``, scalar, and other types.</span>\n<span class=\"pl-s\">    dtype (:class:`torch.dtype`, optional): the desired data type of returned tensor.</span>\n<span class=\"pl-s\">        Default: if None, infers data type from :attr:`data`.</span>\n<span class=\"pl-s\">    device (:class:`torch.device`, optional): the desired device of returned tensor.</span>\n<span class=\"pl-s\">        Default: if None, uses the current device for the default tensor type</span>\n<span class=\"pl-s\">        (see :func:`torch.set_default_tensor_type`). :attr:`device` will be the CPU</span>\n<span class=\"pl-s\">        for CPU tensor types and the current CUDA device for CUDA tensor types.</span>\n<span class=\"pl-s\">    requires_grad (bool, optional): If autograd should record operations on the</span>\n<span class=\"pl-s\">        returned tensor. Default: ``False``.</span>\n<span class=\"pl-s\"><span class=\"pl-pds\">\"\"\"</span></span>)\n<span class=\"pl-c1\">print</span>(factory_data_common_args)</pre></div>\n<p>Which shows:</p>\n<pre><code>{'data': 'data (array_like): Initial data for the tensor. Can be a list, tuple,',\n 'NumPy': 'NumPy ``ndarray``, scalar, and other types.',\n 'dtype': 'dtype (:class:`torch.dtype`, optional): the desired data type of returned tensor.',\n 'Default:': 'Default: if None, uses the current device for the default tensor type',\n 'device': 'device (:class:`torch.device`, optional): the desired device of returned tensor.',\n '(see': '(see :func:`torch.set_default_tensor_type`). :attr:`device` will be the CPU',\n 'for': 'for CPU tensor types and the current CUDA device for CUDA tensor types.',\n 'requires_grad': 'requires_grad (bool, optional): If autograd should record operations on the',\n 'returned': 'returned tensor. Default: ``False``.'}\n</code></pre>\n<p>This is because the split also matches the patterns of the other lines which start with 8 spaces. This makes only the first line show up in the docstring, which you can verify by <code>torch.tensor?</code>.</p>\n<pre><code>Docstring:\ntensor(data, dtype=None, device=None, requires_grad=False) -&gt; Tensor\n\nConstructs a tensor with :attr:`data`.\n\n.. warning::\n\n    :func:`torch.tensor` always copies :attr:`data`. If you have a Tensor\n    ``data`` and want to avoid a copy, use :func:`torch.Tensor.requires_grad_`\n    or :func:`torch.Tensor.detach`.\n    If you have a NumPy ``ndarray`` and want to avoid a copy, use\n    :func:`torch.from_numpy`.\n\nArgs:\n    data (array_like): Initial data for the tensor. Can be a list, tuple,\n    dtype (:class:`torch.dtype`, optional): the desired data type of returned tensor.\n    device (:class:`torch.device`, optional): the desired device of returned tensor.\n    requires_grad (bool, optional): If autograd should record operations on the\n\n</code></pre>\n<p>I verified this against <a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/pytorch/pytorch/commit/2fb957da814e4e5a351beda4f09a89b58f96186a/hovercard\" href=\"https://github.com/pytorch/pytorch/commit/2fb957da814e4e5a351beda4f09a89b58f96186a\"><tt>2fb957d</tt></a>.</p>\n<p>The solution in this patch is to use a regex to split, which matches only newlines followed by exactly 4 spaces, which was the original intent I believe.</p>", "body_text": "#6709 Introduced a helper function in _torch_docs.py called parse_kwargs.\ndef parse_kwargs(desc):\n    \"\"\"Maps a description of args to a dictionary of {argname: description}.\n    Input:\n        ('    weight (Tensor): a weight tensor\\n' +\n         '        Some optional description')\n    Output: {\n        'weight': \\\n        'weight (Tensor): a weight tensor\\n        Some optional description'\n    }\n    \"\"\"\n    # Split by indents. Assumes each arg starts on a new line with 4 spaces.\n    kwargs = [section.strip() for section in desc.split('\\n   ')]\n    kwargs = [section for section in kwargs if len(section) > 0]\n    return {desc.split(' ')[0]: desc for desc in kwargs}\nThe criteria for splitting lines doesn't do what it is supposed to do. You can test this by the following:\nfactory_data_common_args = parse_kwargs(\"\"\"\n    data (array_like): Initial data for the tensor. Can be a list, tuple,\n        NumPy ``ndarray``, scalar, and other types.\n    dtype (:class:`torch.dtype`, optional): the desired data type of returned tensor.\n        Default: if None, infers data type from :attr:`data`.\n    device (:class:`torch.device`, optional): the desired device of returned tensor.\n        Default: if None, uses the current device for the default tensor type\n        (see :func:`torch.set_default_tensor_type`). :attr:`device` will be the CPU\n        for CPU tensor types and the current CUDA device for CUDA tensor types.\n    requires_grad (bool, optional): If autograd should record operations on the\n        returned tensor. Default: ``False``.\n\"\"\")\nprint(factory_data_common_args)\nWhich shows:\n{'data': 'data (array_like): Initial data for the tensor. Can be a list, tuple,',\n 'NumPy': 'NumPy ``ndarray``, scalar, and other types.',\n 'dtype': 'dtype (:class:`torch.dtype`, optional): the desired data type of returned tensor.',\n 'Default:': 'Default: if None, uses the current device for the default tensor type',\n 'device': 'device (:class:`torch.device`, optional): the desired device of returned tensor.',\n '(see': '(see :func:`torch.set_default_tensor_type`). :attr:`device` will be the CPU',\n 'for': 'for CPU tensor types and the current CUDA device for CUDA tensor types.',\n 'requires_grad': 'requires_grad (bool, optional): If autograd should record operations on the',\n 'returned': 'returned tensor. Default: ``False``.'}\n\nThis is because the split also matches the patterns of the other lines which start with 8 spaces. This makes only the first line show up in the docstring, which you can verify by torch.tensor?.\nDocstring:\ntensor(data, dtype=None, device=None, requires_grad=False) -> Tensor\n\nConstructs a tensor with :attr:`data`.\n\n.. warning::\n\n    :func:`torch.tensor` always copies :attr:`data`. If you have a Tensor\n    ``data`` and want to avoid a copy, use :func:`torch.Tensor.requires_grad_`\n    or :func:`torch.Tensor.detach`.\n    If you have a NumPy ``ndarray`` and want to avoid a copy, use\n    :func:`torch.from_numpy`.\n\nArgs:\n    data (array_like): Initial data for the tensor. Can be a list, tuple,\n    dtype (:class:`torch.dtype`, optional): the desired data type of returned tensor.\n    device (:class:`torch.device`, optional): the desired device of returned tensor.\n    requires_grad (bool, optional): If autograd should record operations on the\n\n\nI verified this against 2fb957d.\nThe solution in this patch is to use a regex to split, which matches only newlines followed by exactly 4 spaces, which was the original intent I believe.", "merged": true, "mergeable": null, "rebaseable": null, "mergeable_state": "unknown", "merged_by": {"login": "soumith", "id": 1310570, "node_id": "MDQ6VXNlcjEzMTA1NzA=", "avatar_url": "https://avatars0.githubusercontent.com/u/1310570?v=4", "gravatar_id": "", "url": "https://api.github.com/users/soumith", "html_url": "https://github.com/soumith", "followers_url": "https://api.github.com/users/soumith/followers", "following_url": "https://api.github.com/users/soumith/following{/other_user}", "gists_url": "https://api.github.com/users/soumith/gists{/gist_id}", "starred_url": "https://api.github.com/users/soumith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/soumith/subscriptions", "organizations_url": "https://api.github.com/users/soumith/orgs", "repos_url": "https://api.github.com/users/soumith/repos", "events_url": "https://api.github.com/users/soumith/events{/privacy}", "received_events_url": "https://api.github.com/users/soumith/received_events", "type": "User", "site_admin": false}, "comments": 1, "review_comments": 0, "maintainer_can_modify": false, "commits": 1, "additions": 5, "deletions": 2, "changed_files": 1}