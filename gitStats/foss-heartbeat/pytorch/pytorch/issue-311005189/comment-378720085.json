{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/378720085", "html_url": "https://github.com/pytorch/pytorch/issues/6246#issuecomment-378720085", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/6246", "id": 378720085, "node_id": "MDEyOklzc3VlQ29tbWVudDM3ODcyMDA4NQ==", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "created_at": "2018-04-04T19:37:33Z", "updated_at": "2018-04-04T19:37:33Z", "author_association": "MEMBER", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=370202\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/zdevito\">@zdevito</a> I'm not sure where the difficulty is. You just search for the <code>-&gt;</code> token, and you know that there is an expr before it, and an expr after it. We stich those parts to create e.g. a function that has those two statements in the body, use <code>ast</code> to as our parser, and then traverse the two exprs and translate them into our types.</p>\n<p>Basically we hackily reuse the <code>ast</code> module as a parser, and then write a tiny and very simple interpreter that will construct tuples of types from the AST.</p>", "body_text": "@zdevito I'm not sure where the difficulty is. You just search for the -> token, and you know that there is an expr before it, and an expr after it. We stich those parts to create e.g. a function that has those two statements in the body, use ast to as our parser, and then traverse the two exprs and translate them into our types.\nBasically we hackily reuse the ast module as a parser, and then write a tiny and very simple interpreter that will construct tuples of types from the AST.", "body": "@zdevito I'm not sure where the difficulty is. You just search for the `->` token, and you know that there is an expr before it, and an expr after it. We stich those parts to create e.g. a function that has those two statements in the body, use `ast` to as our parser, and then traverse the two exprs and translate them into our types.\r\n\r\nBasically we hackily reuse the `ast` module as a parser, and then write a tiny and very simple interpreter that will construct tuples of types from the AST."}