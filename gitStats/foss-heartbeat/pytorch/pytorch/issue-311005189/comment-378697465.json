{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/378697465", "html_url": "https://github.com/pytorch/pytorch/issues/6246#issuecomment-378697465", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/6246", "id": 378697465, "node_id": "MDEyOklzc3VlQ29tbWVudDM3ODY5NzQ2NQ==", "user": {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, "created_at": "2018-04-04T18:21:50Z", "updated_at": "2018-04-04T18:21:50Z", "author_association": "CONTRIBUTOR", "body_html": "<p>We also need to have type annotations on python functions as well:</p>\n<pre><code>def foo() -&gt; tuple(Tensor, Tensor):\n   ...\n\n@script\ndef bar():\n    tup = foo()\n    return tup[0] + tup[1]\n</code></pre>\n<p>Otherwise we cannot know when constructing <code>bar</code> that we should treat <code>tup</code> as a tuple rather than as a Tensor. Type annotations in the python code would allow us to know this, but it means supporting not just our own annotations but optional annotations on python calls as well.</p>", "body_text": "We also need to have type annotations on python functions as well:\ndef foo() -> tuple(Tensor, Tensor):\n   ...\n\n@script\ndef bar():\n    tup = foo()\n    return tup[0] + tup[1]\n\nOtherwise we cannot know when constructing bar that we should treat tup as a tuple rather than as a Tensor. Type annotations in the python code would allow us to know this, but it means supporting not just our own annotations but optional annotations on python calls as well.", "body": "We also need to have type annotations on python functions as well:\r\n\r\n```\r\ndef foo() -> tuple(Tensor, Tensor):\r\n   ...\r\n\r\n@script\r\ndef bar():\r\n    tup = foo()\r\n    return tup[0] + tup[1]\r\n```\r\nOtherwise we cannot know when constructing `bar` that we should treat `tup` as a tuple rather than as a Tensor. Type annotations in the python code would allow us to know this, but it means supporting not just our own annotations but optional annotations on python calls as well."}