{"url": "https://api.github.com/repos/pytorch/pytorch/issues/2363", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/2363/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/2363/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/2363/events", "html_url": "https://github.com/pytorch/pytorch/issues/2363", "id": 249184654, "node_id": "MDU6SXNzdWUyNDkxODQ2NTQ=", "number": 2363, "title": "Single Node DistributedDataParallel Not Supported", "user": {"login": "ArEsKay3", "id": 6547143, "node_id": "MDQ6VXNlcjY1NDcxNDM=", "avatar_url": "https://avatars3.githubusercontent.com/u/6547143?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ArEsKay3", "html_url": "https://github.com/ArEsKay3", "followers_url": "https://api.github.com/users/ArEsKay3/followers", "following_url": "https://api.github.com/users/ArEsKay3/following{/other_user}", "gists_url": "https://api.github.com/users/ArEsKay3/gists{/gist_id}", "starred_url": "https://api.github.com/users/ArEsKay3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ArEsKay3/subscriptions", "organizations_url": "https://api.github.com/users/ArEsKay3/orgs", "repos_url": "https://api.github.com/users/ArEsKay3/repos", "events_url": "https://api.github.com/users/ArEsKay3/events{/privacy}", "received_events_url": "https://api.github.com/users/ArEsKay3/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2017-08-09T22:50:22Z", "updated_at": "2017-08-25T14:14:15Z", "closed_at": "2017-08-25T14:14:15Z", "author_association": "CONTRIBUTOR", "body_html": "<p>I have seen a suggestion to do the following on the Open-NMT github.</p>\n<blockquote>\n<p>It's worth also trying DistributedDataParallel from torch.distributed, which is available in master already. When running on a single machine, uses Python multiprocessing rather than threads and should avoid at least the GIL-thrashing</p>\n</blockquote>\n<p>I assume this means the ideal way of doing this is using Python multiprocessing (and thus using DDP instead of DP). But, when I try to use DDP on a single node, the handshaking code used during initialization (pytorch/torch/lib/THD/base/init_methods/InitMethodUtils.cpp) doesn't seem to handle the case where there is only a single node with multiple GPUs.</p>\n<pre><code>RuntimeError: public_address was not set in config at /tmp/pip-qmk9li80-build/torch/lib/THD/process_group/General.cpp:17\n</code></pre>\n<p>Is this expected to work or was the initial quoted comment inaccurate?<br>\n<a href=\"https://github.com/OpenNMT/OpenNMT-py/issues/89\" data-hovercard-type=\"issue\" data-hovercard-url=\"/OpenNMT/OpenNMT-py/issues/89/hovercard\">OpenNMT-py #89</a></p>", "body_text": "I have seen a suggestion to do the following on the Open-NMT github.\n\nIt's worth also trying DistributedDataParallel from torch.distributed, which is available in master already. When running on a single machine, uses Python multiprocessing rather than threads and should avoid at least the GIL-thrashing\n\nI assume this means the ideal way of doing this is using Python multiprocessing (and thus using DDP instead of DP). But, when I try to use DDP on a single node, the handshaking code used during initialization (pytorch/torch/lib/THD/base/init_methods/InitMethodUtils.cpp) doesn't seem to handle the case where there is only a single node with multiple GPUs.\nRuntimeError: public_address was not set in config at /tmp/pip-qmk9li80-build/torch/lib/THD/process_group/General.cpp:17\n\nIs this expected to work or was the initial quoted comment inaccurate?\nOpenNMT-py #89", "body": "I have seen a suggestion to do the following on the Open-NMT github.\r\n\r\n> It's worth also trying DistributedDataParallel from torch.distributed, which is available in master already. When running on a single machine, uses Python multiprocessing rather than threads and should avoid at least the GIL-thrashing\r\n\r\nI assume this means the ideal way of doing this is using Python multiprocessing (and thus using DDP instead of DP). But, when I try to use DDP on a single node, the handshaking code used during initialization (pytorch/torch/lib/THD/base/init_methods/InitMethodUtils.cpp) doesn't seem to handle the case where there is only a single node with multiple GPUs.\r\n\r\n```\r\nRuntimeError: public_address was not set in config at /tmp/pip-qmk9li80-build/torch/lib/THD/process_group/General.cpp:17\r\n```\r\n\r\nIs this expected to work or was the initial quoted comment inaccurate?\r\n[OpenNMT-py #89](https://github.com/OpenNMT/OpenNMT-py/issues/89)"}