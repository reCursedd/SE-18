{"url": "https://api.github.com/repos/pytorch/pytorch/issues/7017", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/7017/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/7017/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/7017/events", "html_url": "https://github.com/pytorch/pytorch/pull/7017", "id": 318228263, "node_id": "MDExOlB1bGxSZXF1ZXN0MTg0NDg4MDcx", "number": 7017, "title": "Allow `__constant__` values in a ScriptModule to be used as attributes for builtin functions", "user": {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-04-26T23:17:10Z", "updated_at": "2018-11-23T15:43:20Z", "closed_at": "2018-04-28T00:44:18Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/7017", "html_url": "https://github.com/pytorch/pytorch/pull/7017", "diff_url": "https://github.com/pytorch/pytorch/pull/7017.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/7017.patch"}, "body_html": "<p>Two smaller pieces of script functionality:</p>\n<h3>allow <code>__constant__</code> values in a ScriptModule to be used as attributes for builtin functions</h3>\n<h3>Fix bugs in <a class=\"user-mention\" data-hovercard-type=\"organization\" data-hovercard-url=\"/orgs/script/hovercard\" href=\"https://github.com/script\">@script</a> loops</h3>\n<ol>\n<li>\n<p>while loops run shape propagation multiple times until the shapes have converged.<br>\nThere were two bugs here. (a) First the 'changed' condition was not checking if it actually<br>\nchanged the output, and instead would mark changed = true if the two inputs were different.<br>\nThis incorrect because the output of the block and the input of the block may always have different shapes.<br>\nNow it actually checks if it is about to change the output entry that it is writing to.<br>\n(b) expand nodes were being inserted into the graph even inside the while loop body. However, if<br>\nwe iteratively discover that the input shape to one of these expands is actual dynamic, then<br>\nit was incorrect to insert the expand in the first place. This changes it so that we only insert expands<br>\nafter we have converged on the shapes.</p>\n</li>\n<li>\n<p>the way deleteExtraInputs removed loop-carried dependencies was unsafe because it would lookup<br>\nValue* elements in the loop body's environment that were previously invalidated when deleteExtraInputs<br>\nremove another input to the loop. This changes the way deleteExtraInputs works so that it never has to<br>\nread a value out of the loop body's environment to avoid using the invalidated pointers.</p>\n</li>\n</ol>", "body_text": "Two smaller pieces of script functionality:\nallow __constant__ values in a ScriptModule to be used as attributes for builtin functions\nFix bugs in @script loops\n\n\nwhile loops run shape propagation multiple times until the shapes have converged.\nThere were two bugs here. (a) First the 'changed' condition was not checking if it actually\nchanged the output, and instead would mark changed = true if the two inputs were different.\nThis incorrect because the output of the block and the input of the block may always have different shapes.\nNow it actually checks if it is about to change the output entry that it is writing to.\n(b) expand nodes were being inserted into the graph even inside the while loop body. However, if\nwe iteratively discover that the input shape to one of these expands is actual dynamic, then\nit was incorrect to insert the expand in the first place. This changes it so that we only insert expands\nafter we have converged on the shapes.\n\n\nthe way deleteExtraInputs removed loop-carried dependencies was unsafe because it would lookup\nValue* elements in the loop body's environment that were previously invalidated when deleteExtraInputs\nremove another input to the loop. This changes the way deleteExtraInputs works so that it never has to\nread a value out of the loop body's environment to avoid using the invalidated pointers.", "body": "Two smaller pieces of script functionality:\r\n\r\n### allow `__constant__` values in a ScriptModule to be used as attributes for builtin functions\r\n\r\n### Fix bugs in @script loops\r\n\r\n1. while loops run shape propagation multiple times until the shapes have converged.\r\nThere were two bugs here. (a) First the 'changed' condition was not checking if it actually\r\nchanged the output, and instead would mark changed = true if the two inputs were different.\r\nThis incorrect because the output of the block and the input of the block may always have different shapes.\r\nNow it actually checks if it is about to change the output entry that it is writing to.\r\n(b) expand nodes were being inserted into the graph even inside the while loop body. However, if\r\nwe iteratively discover that the input shape to one of these expands is actual dynamic, then\r\nit was incorrect to insert the expand in the first place. This changes it so that we only insert expands\r\nafter we have converged on the shapes.\r\n\r\n2. the way deleteExtraInputs removed loop-carried dependencies was unsafe because it would lookup\r\nValue* elements in the loop body's environment that were previously invalidated when deleteExtraInputs\r\nremove another input to the loop. This changes the way deleteExtraInputs works so that it never has to\r\nread a value out of the loop body's environment to avoid using the invalidated pointers."}