{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/268299383", "html_url": "https://github.com/pytorch/pytorch/issues/334#issuecomment-268299383", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/334", "id": 268299383, "node_id": "MDEyOklzc3VlQ29tbWVudDI2ODI5OTM4Mw==", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "created_at": "2016-12-20T17:07:46Z", "updated_at": "2016-12-20T17:07:46Z", "author_association": "MEMBER", "body_html": "<p>It is better, but this inheritance has nothing to do with suclassing the Process class. With a fork you can inherit resources e.g. through a closure.</p>\n<p>Anyway, I'm pretty sure that overriding run will break as soon as you stop using fork. I read the code of multiprocessing module when I was developing the pytorch counterpart, and I think the process class is designed to be used only with a callable.</p>", "body_text": "It is better, but this inheritance has nothing to do with suclassing the Process class. With a fork you can inherit resources e.g. through a closure.\nAnyway, I'm pretty sure that overriding run will break as soon as you stop using fork. I read the code of multiprocessing module when I was developing the pytorch counterpart, and I think the process class is designed to be used only with a callable.", "body": "It is better, but this inheritance has nothing to do with suclassing the Process class. With a fork you can inherit resources e.g. through a closure.\r\n\r\nAnyway, I'm pretty sure that overriding run will break as soon as you stop using fork. I read the code of multiprocessing module when I was developing the pytorch counterpart, and I think the process class is designed to be used only with a callable."}