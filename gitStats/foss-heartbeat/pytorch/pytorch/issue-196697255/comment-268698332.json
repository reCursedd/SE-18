{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/268698332", "html_url": "https://github.com/pytorch/pytorch/issues/334#issuecomment-268698332", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/334", "id": 268698332, "node_id": "MDEyOklzc3VlQ29tbWVudDI2ODY5ODMzMg==", "user": {"login": "yuandong-tian", "id": 2973937, "node_id": "MDQ6VXNlcjI5NzM5Mzc=", "avatar_url": "https://avatars3.githubusercontent.com/u/2973937?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yuandong-tian", "html_url": "https://github.com/yuandong-tian", "followers_url": "https://api.github.com/users/yuandong-tian/followers", "following_url": "https://api.github.com/users/yuandong-tian/following{/other_user}", "gists_url": "https://api.github.com/users/yuandong-tian/gists{/gist_id}", "starred_url": "https://api.github.com/users/yuandong-tian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yuandong-tian/subscriptions", "organizations_url": "https://api.github.com/users/yuandong-tian/orgs", "repos_url": "https://api.github.com/users/yuandong-tian/repos", "events_url": "https://api.github.com/users/yuandong-tian/events{/privacy}", "received_events_url": "https://api.github.com/users/yuandong-tian/received_events", "type": "User", "site_admin": false}, "created_at": "2016-12-22T01:56:43Z", "updated_at": "2016-12-22T01:56:43Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=4583066\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/apaszke\">@apaszke</a> Yes. I indeed find that when collecting batches from multiple environments, multithreading does not really work well (presumably due to GIL), only slightly better than single-threaded.</p>\n<p>On the other hand, multiprocessing is a bit too slow with mp.Queue. Maybe one solution to this is to write a C binding that runs multithreading, collects batches and returns refs.</p>", "body_text": "@apaszke Yes. I indeed find that when collecting batches from multiple environments, multithreading does not really work well (presumably due to GIL), only slightly better than single-threaded.\nOn the other hand, multiprocessing is a bit too slow with mp.Queue. Maybe one solution to this is to write a C binding that runs multithreading, collects batches and returns refs.", "body": "@apaszke Yes. I indeed find that when collecting batches from multiple environments, multithreading does not really work well (presumably due to GIL), only slightly better than single-threaded.\r\n\r\nOn the other hand, multiprocessing is a bit too slow with mp.Queue. Maybe one solution to this is to write a C binding that runs multithreading, collects batches and returns refs. "}