{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/268649672", "html_url": "https://github.com/pytorch/pytorch/issues/334#issuecomment-268649672", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/334", "id": 268649672, "node_id": "MDEyOklzc3VlQ29tbWVudDI2ODY0OTY3Mg==", "user": {"login": "yuandong-tian", "id": 2973937, "node_id": "MDQ6VXNlcjI5NzM5Mzc=", "avatar_url": "https://avatars3.githubusercontent.com/u/2973937?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yuandong-tian", "html_url": "https://github.com/yuandong-tian", "followers_url": "https://api.github.com/users/yuandong-tian/followers", "following_url": "https://api.github.com/users/yuandong-tian/following{/other_user}", "gists_url": "https://api.github.com/users/yuandong-tian/gists{/gist_id}", "starred_url": "https://api.github.com/users/yuandong-tian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yuandong-tian/subscriptions", "organizations_url": "https://api.github.com/users/yuandong-tian/orgs", "repos_url": "https://api.github.com/users/yuandong-tian/repos", "events_url": "https://api.github.com/users/yuandong-tian/events{/privacy}", "received_events_url": "https://api.github.com/users/yuandong-tian/received_events", "type": "User", "site_admin": false}, "created_at": "2016-12-21T21:48:52Z", "updated_at": "2016-12-21T21:49:08Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=4583066\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/apaszke\">@apaszke</a> I am nowhere an expert here but it seems that this is not true.</p>\n<p>Python (in particular CPython) indeed has a GIL (Global Interpreter Lock) that will only interpret python code one line at a time. So if the threads are in python then they will be restricted by GIL, but if each thread is running some I/O operations, or time-consuming C routines, then GIL won't affect it,  and things could run concurrently.</p>\n<p>In my case, the two threads (Executer and RLSolver) mostly run CUDA kernels, which should not be restricted by CPython's GIL.</p>\n<p>Note that I might be totally wrong here. So if anyone has a better introduction/tutorials and/or suggestion, let me know.</p>", "body_text": "@apaszke I am nowhere an expert here but it seems that this is not true.\nPython (in particular CPython) indeed has a GIL (Global Interpreter Lock) that will only interpret python code one line at a time. So if the threads are in python then they will be restricted by GIL, but if each thread is running some I/O operations, or time-consuming C routines, then GIL won't affect it,  and things could run concurrently.\nIn my case, the two threads (Executer and RLSolver) mostly run CUDA kernels, which should not be restricted by CPython's GIL.\nNote that I might be totally wrong here. So if anyone has a better introduction/tutorials and/or suggestion, let me know.", "body": "@apaszke I am nowhere an expert here but it seems that this is not true. \r\n\r\nPython (in particular CPython) indeed has a GIL (Global Interpreter Lock) that will only interpret python code one line at a time. So if the threads are in python then they will be restricted by GIL, but if each thread is running some I/O operations, or time-consuming C routines, then GIL won't affect it,  and things could run concurrently.\r\n\r\nIn my case, the two threads (Executer and RLSolver) mostly run CUDA kernels, which should not be restricted by CPython's GIL. \r\n\r\nNote that I might be totally wrong here. So if anyone has a better introduction/tutorials and/or suggestion, let me know. "}