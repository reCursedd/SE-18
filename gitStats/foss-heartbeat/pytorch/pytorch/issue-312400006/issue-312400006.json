{"url": "https://api.github.com/repos/pytorch/pytorch/issues/6415", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/6415/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/6415/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/6415/events", "html_url": "https://github.com/pytorch/pytorch/pull/6415", "id": 312400006, "node_id": "MDExOlB1bGxSZXF1ZXN0MTgwMjE1MjA3", "number": 6415, "title": "[modcmake 3/N] Turn TH into a static library", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-04-09T05:39:33Z", "updated_at": "2018-11-23T15:42:03Z", "closed_at": "2018-04-24T17:30:57Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/6415", "html_url": "https://github.com/pytorch/pytorch/pull/6415", "diff_url": "https://github.com/pytorch/pytorch/pull/6415.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/6415.patch"}, "body_html": "<pre><code>    The benefit of having TH declared internally in CMakeLists.txt\n    as a static library is that it means other components can statically\n    link TH, without having to suss out the meaning of the various variables\n    that are being set in the CMakeLists.txt\n    \n    Some subtleties:\n    \n    - Linking together static archives into a dynamic library is NOT the same\n      as linking objects into a dynamic library; the linker behaves differently\n      in one important way: if any symbol from the static library is\n      not used, it will be dropped by default.  By using -Wl,--whole-archive,\n      we can bypass this problem.  This is achieved via the caffe2_interface_library\n      macro, which creates a wrapper interface library around a static library\n      which specifies the linker flags with whole-archive instead of the default\n      (and also manages maintaining dependencies correctly, because if you directly\n      say this, you lose dependency tracking.)\n    \n    - Some important compiler flags were previously being set in\n      aten/src/ATen/CMakeLists.txt, which means they wouldn't apply to\n      subdirectories, as is done here.  They've been moved to aten/CMakeLists.txt\n      (note that the eventual plan is to have them live in a helper cmake module.)\n    \n    - If we link a static library into a dynamic library using the\n      caffe2_interace_library macro, we MUST specify this as a PRIVATE library;\n      otherwise, the static library will show up in the link line if you use the\n      shared library in another cmake target.  This is ~never what you want,\n      and can lead to some really strange errors (see previous commit for more\n      context.)\n    \n    One benefit:\n    \n    - Property setting of the CPU targets can be done in the TH CMakeLists.txt\n      rather than off to the side in ATen's cmake.\n</code></pre>\n<p>Stacked on <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"312398836\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/6414\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/pytorch/pytorch/pull/6414/hovercard\" href=\"https://github.com/pytorch/pytorch/pull/6414\">#6414</a><br>\nFull PR at <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"310501657\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/6188\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/pytorch/pytorch/pull/6188/hovercard\" href=\"https://github.com/pytorch/pytorch/pull/6188\">#6188</a></p>", "body_text": "The benefit of having TH declared internally in CMakeLists.txt\n    as a static library is that it means other components can statically\n    link TH, without having to suss out the meaning of the various variables\n    that are being set in the CMakeLists.txt\n    \n    Some subtleties:\n    \n    - Linking together static archives into a dynamic library is NOT the same\n      as linking objects into a dynamic library; the linker behaves differently\n      in one important way: if any symbol from the static library is\n      not used, it will be dropped by default.  By using -Wl,--whole-archive,\n      we can bypass this problem.  This is achieved via the caffe2_interface_library\n      macro, which creates a wrapper interface library around a static library\n      which specifies the linker flags with whole-archive instead of the default\n      (and also manages maintaining dependencies correctly, because if you directly\n      say this, you lose dependency tracking.)\n    \n    - Some important compiler flags were previously being set in\n      aten/src/ATen/CMakeLists.txt, which means they wouldn't apply to\n      subdirectories, as is done here.  They've been moved to aten/CMakeLists.txt\n      (note that the eventual plan is to have them live in a helper cmake module.)\n    \n    - If we link a static library into a dynamic library using the\n      caffe2_interace_library macro, we MUST specify this as a PRIVATE library;\n      otherwise, the static library will show up in the link line if you use the\n      shared library in another cmake target.  This is ~never what you want,\n      and can lead to some really strange errors (see previous commit for more\n      context.)\n    \n    One benefit:\n    \n    - Property setting of the CPU targets can be done in the TH CMakeLists.txt\n      rather than off to the side in ATen's cmake.\n\nStacked on #6414\nFull PR at #6188", "body": "```\r\n    The benefit of having TH declared internally in CMakeLists.txt\r\n    as a static library is that it means other components can statically\r\n    link TH, without having to suss out the meaning of the various variables\r\n    that are being set in the CMakeLists.txt\r\n    \r\n    Some subtleties:\r\n    \r\n    - Linking together static archives into a dynamic library is NOT the same\r\n      as linking objects into a dynamic library; the linker behaves differently\r\n      in one important way: if any symbol from the static library is\r\n      not used, it will be dropped by default.  By using -Wl,--whole-archive,\r\n      we can bypass this problem.  This is achieved via the caffe2_interface_library\r\n      macro, which creates a wrapper interface library around a static library\r\n      which specifies the linker flags with whole-archive instead of the default\r\n      (and also manages maintaining dependencies correctly, because if you directly\r\n      say this, you lose dependency tracking.)\r\n    \r\n    - Some important compiler flags were previously being set in\r\n      aten/src/ATen/CMakeLists.txt, which means they wouldn't apply to\r\n      subdirectories, as is done here.  They've been moved to aten/CMakeLists.txt\r\n      (note that the eventual plan is to have them live in a helper cmake module.)\r\n    \r\n    - If we link a static library into a dynamic library using the\r\n      caffe2_interace_library macro, we MUST specify this as a PRIVATE library;\r\n      otherwise, the static library will show up in the link line if you use the\r\n      shared library in another cmake target.  This is ~never what you want,\r\n      and can lead to some really strange errors (see previous commit for more\r\n      context.)\r\n    \r\n    One benefit:\r\n    \r\n    - Property setting of the CPU targets can be done in the TH CMakeLists.txt\r\n      rather than off to the side in ATen's cmake.\r\n```\r\n\r\nStacked on #6414\r\nFull PR at #6188"}