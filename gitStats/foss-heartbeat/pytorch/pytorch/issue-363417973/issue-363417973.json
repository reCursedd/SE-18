{"url": "https://api.github.com/repos/pytorch/pytorch/issues/12040", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/12040/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/12040/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/12040/events", "html_url": "https://github.com/pytorch/pytorch/pull/12040", "id": 363417973, "node_id": "MDExOlB1bGxSZXF1ZXN0MjE3ODYxMDU3", "number": 12040, "title": "Introduce type variables to implement generic list operators", "user": {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-09-25T05:42:08Z", "updated_at": "2018-11-23T15:52:01Z", "closed_at": "2018-09-27T00:04:07Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/12040", "html_url": "https://github.com/pytorch/pytorch/pull/12040", "diff_url": "https://github.com/pytorch/pytorch/pull/12040.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/12040.patch"}, "body_html": "<p>We generate specialized list operations for int, float, and Tensor lists so that small lists of integers like the arguments to conv do not involve tons of boxing code.</p>\n<p>This PR adds a fallback GenericList for List types that contain any other type. It does so by adding type variables to <code>jit::Type</code>, and machinery for matching/replacing the type variables during <code>tryMatchSchema</code> and operator lookup.</p>\n<p>It also modifies the builtin list ops to include a fallback that works on a GenericList object that simply holds IValues. This is distinguished from IValue's tuple type so that conversion to/from Python still happens losslessly.</p>", "body_text": "We generate specialized list operations for int, float, and Tensor lists so that small lists of integers like the arguments to conv do not involve tons of boxing code.\nThis PR adds a fallback GenericList for List types that contain any other type. It does so by adding type variables to jit::Type, and machinery for matching/replacing the type variables during tryMatchSchema and operator lookup.\nIt also modifies the builtin list ops to include a fallback that works on a GenericList object that simply holds IValues. This is distinguished from IValue's tuple type so that conversion to/from Python still happens losslessly.", "body": "We generate specialized list operations for int, float, and Tensor lists so that small lists of integers like the arguments to conv do not involve tons of boxing code.\r\n\r\nThis PR adds a fallback GenericList for List types that contain any other type. It does so by adding type variables to `jit::Type`, and machinery for matching/replacing the type variables during `tryMatchSchema` and operator lookup.\r\n\r\nIt also modifies the builtin list ops to include a fallback that works on a GenericList object that simply holds IValues. This is distinguished from IValue's tuple type so that conversion to/from Python still happens losslessly.\r\n"}