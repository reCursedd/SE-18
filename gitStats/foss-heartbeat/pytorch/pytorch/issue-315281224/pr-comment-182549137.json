{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/182549137", "pull_request_review_id": 113367212, "id": 182549137, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjU0OTEzNw==", "diff_hunk": "@@ -0,0 +1,46 @@\n+import os\n+import time\n+\n+class FileBaton:\n+    '''A primitive, file-based synchronization utility.'''\n+\n+    def __init__(self, lock_file_path, wait_seconds=0.1):\n+        '''\n+        Creates a new :class:`FileBaton`.\n+\n+        Args:\n+            lock_file_path: The path to the file used for locking.\n+            wait_seconds: The seconds to periorically sleep (spin) when\n+                calling ``wait()``.\n+        '''\n+        self.lock_file_path = lock_file_path\n+        self.wait_seconds = wait_seconds\n+        self.fd = None\n+\n+    def try_acquire(self):\n+        '''\n+        Tries to atomically create a file under exclusive access.\n+\n+        Returns:\n+            True if the file could be created, else False.\n+        '''\n+        try:\n+            self.fd = os.open(self.lock_file_path, os.O_CREAT | os.O_EXCL)\n+            return True\n+        except FileExistsError:\n+            return False\n+\n+    def wait(self):\n+        '''\n+        Periodically sleeps for a certain amount until the baton is released.\n+\n+        The amount of time slept depends on the ``wait_seconds`` parameter\n+        passed to the constructor.\n+        '''\n+        while os.path.exists(self.lock_file_path):\n+            time.sleep(self.wait_seconds)", "path": "torch/utils/file_baton.py", "position": 42, "original_position": 41, "commit_id": "b6e2ff2428b8fcc6cd6e8de118edc4f919870551", "original_commit_id": "d5069b1de7a7ff5a56fe6d7ef9913886025193f5", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "That's not very elegant, but oh well \ud83d\ude04 ", "created_at": "2018-04-18T19:51:37Z", "updated_at": "2018-11-23T15:42:47Z", "html_url": "https://github.com/pytorch/pytorch/pull/6684#discussion_r182549137", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/6684", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/182549137"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/6684#discussion_r182549137"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/6684"}}, "body_html": "<p>That's not very elegant, but oh well <g-emoji class=\"g-emoji\" alias=\"smile\" fallback-src=\"https://assets-cdn.github.com/images/icons/emoji/unicode/1f604.png\">\ud83d\ude04</g-emoji></p>", "body_text": "That's not very elegant, but oh well \ud83d\ude04"}