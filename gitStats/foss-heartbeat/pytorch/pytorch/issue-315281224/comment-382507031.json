{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/382507031", "html_url": "https://github.com/pytorch/pytorch/pull/6684#issuecomment-382507031", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/6684", "id": 382507031, "node_id": "MDEyOklzc3VlQ29tbWVudDM4MjUwNzAzMQ==", "user": {"login": "goldsborough", "id": 6429851, "node_id": "MDQ6VXNlcjY0Mjk4NTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/6429851?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goldsborough", "html_url": "https://github.com/goldsborough", "followers_url": "https://api.github.com/users/goldsborough/followers", "following_url": "https://api.github.com/users/goldsborough/following{/other_user}", "gists_url": "https://api.github.com/users/goldsborough/gists{/gist_id}", "starred_url": "https://api.github.com/users/goldsborough/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goldsborough/subscriptions", "organizations_url": "https://api.github.com/users/goldsborough/orgs", "repos_url": "https://api.github.com/users/goldsborough/repos", "events_url": "https://api.github.com/users/goldsborough/events{/privacy}", "received_events_url": "https://api.github.com/users/goldsborough/received_events", "type": "User", "site_admin": false}, "created_at": "2018-04-18T19:47:14Z", "updated_at": "2018-04-18T19:47:14Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Actually, no. It's important to note that we don't need atomic access (read or write) to a file, we need to atomically <em>create</em> a file, i.e. when two processes concurrently try to create the same file with the same name, only one must succeed and the other must fail. The code you linked is for atomically reading/writing to a file. It uses <code>NamedTemporaryFile</code>, which uses <code>mkstemp</code>, which relies on the <code>O_EXCL</code> functionality. I am also using this same flag. It is available on Windows and Unix, I'm just not sure it does the same thing on Windows as on Unix. Though I assume if it's available on Windows, it also does the same thing.</p>", "body_text": "Actually, no. It's important to note that we don't need atomic access (read or write) to a file, we need to atomically create a file, i.e. when two processes concurrently try to create the same file with the same name, only one must succeed and the other must fail. The code you linked is for atomically reading/writing to a file. It uses NamedTemporaryFile, which uses mkstemp, which relies on the O_EXCL functionality. I am also using this same flag. It is available on Windows and Unix, I'm just not sure it does the same thing on Windows as on Unix. Though I assume if it's available on Windows, it also does the same thing.", "body": "Actually, no. It's important to note that we don't need atomic access (read or write) to a file, we need to atomically *create* a file, i.e. when two processes concurrently try to create the same file with the same name, only one must succeed and the other must fail. The code you linked is for atomically reading/writing to a file. It uses `NamedTemporaryFile`, which uses `mkstemp`, which relies on the `O_EXCL` functionality. I am also using this same flag. It is available on Windows and Unix, I'm just not sure it does the same thing on Windows as on Unix. Though I assume if it's available on Windows, it also does the same thing."}