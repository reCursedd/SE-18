{"url": "https://api.github.com/repos/pytorch/pytorch/issues/13268", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/13268/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/13268/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/13268/events", "html_url": "https://github.com/pytorch/pytorch/issues/13268", "id": 375222838, "node_id": "MDU6SXNzdWUzNzUyMjI4Mzg=", "number": 13268, "title": "Non-Zero Padding in Convolution Module", "user": {"login": "ohlr", "id": 26937880, "node_id": "MDQ6VXNlcjI2OTM3ODgw", "avatar_url": "https://avatars0.githubusercontent.com/u/26937880?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ohlr", "html_url": "https://github.com/ohlr", "followers_url": "https://api.github.com/users/ohlr/followers", "following_url": "https://api.github.com/users/ohlr/following{/other_user}", "gists_url": "https://api.github.com/users/ohlr/gists{/gist_id}", "starred_url": "https://api.github.com/users/ohlr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ohlr/subscriptions", "organizations_url": "https://api.github.com/users/ohlr/orgs", "repos_url": "https://api.github.com/users/ohlr/repos", "events_url": "https://api.github.com/users/ohlr/events{/privacy}", "received_events_url": "https://api.github.com/users/ohlr/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-10-29T21:23:48Z", "updated_at": "2018-10-29T21:23:48Z", "closed_at": null, "author_association": "CONTRIBUTOR", "body_html": "<h2><g-emoji class=\"g-emoji\" alias=\"rocket\" fallback-src=\"https://assets-cdn.github.com/images/icons/emoji/unicode/1f680.png\">\ud83d\ude80</g-emoji> Feature</h2>\n<p>Non-Zero Padding is currently only supported by explicitly padding the input before doing the convolution.<br>\nIt would be better (more memory efficient, faster and userfrindly) to add an additional parameter \"padding_value\" to the convolution module.</p>\n<h2>Motivation</h2>\n<p>Zero padding is sufficient to control the dimensions of the output. However, there is no clear motivation for the padding to be zero-valued. On the contrary, zero padding might even deteriorate the end results. Thus, the user should be able to specify an arbitrary value for the padding.</p>\n<h2>Pitch</h2>\n<p>To realise the additional parameter the following changes would needed to be made.</p>\n<ul>\n<li>Python API (Conv1d, Conv2d, Conv3d): <a href=\"https://github.com/pytorch/pytorch/blob/master/torch/nn/modules/conv.py\">torch/nn/modules/conv.py</a></li>\n<li>Convolution Logic: <a href=\"https://github.com/pytorch/pytorch/blob/master/aten/src/ATen/native/Convolution.cpp\">aten/src/ATen/native/Convolution.cpp</a></li>\n<li>Header Generation: <a href=\"https://github.com/pytorch/pytorch/blob/master/aten/src/ATen/nn.yaml\">aten/src/ATen/nn.yaml</a>, <a href=\"https://github.com/pytorch/pytorch/blob/master/aten/src/ATen/native/native_functions.yaml\">aten/src/ATen/native/native_functions.yaml</a>, <a href=\"https://github.com/pytorch/pytorch/blob/master/tools/autograd/derivatives.yaml\">/tools/autograd/derivatives.yaml</a></li>\n<li>THNN, THCUNN headers: <a href=\"https://github.com/pytorch/pytorch/blob/master/aten/src/THNN/generic/THNN.h\">aten/src/THNN/generic/THNN.h</a> <a href=\"https://github.com/pytorch/pytorch/blob/master/aten/src/THCUNN/generic/THCUNN.h\">aten/src/THCUNN/generic/THCUNN.h</a></li>\n<li>Convolution Implementation (in THNN and THCUNN): <a href=\"https://github.com/pytorch/pytorch/blob/master/aten/src/THNN/generic/SpatialConvolutionMM.c\">SpatialConvolutionMM</a>, <a href=\"https://github.com/pytorch/pytorch/blob/master/aten/src/THNN/generic/SpatialDilatedConvolution.c\">SpatialDilatedConvolution</a>...</li>\n<li>Unfolding operations <a href=\"https://github.com/pytorch/pytorch/blob/master/aten/src/THCUNN/im2col.h\">im2col</a></li>\n</ul>\n<h2>Additional context</h2>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=33023295\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/bengisuelis\">@bengisuelis</a>, <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=18092298\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/cdemirsoy\">@cdemirsoy</a> and I implemented the above discribed modifications for gpu (THCUNN) convolutions and would like to contribute our code.<br>\nWe did not add the functionality for external librarys (wrapper neeeded) and Cpu executed code (THNN). For those cases we currently throw a runtime error \"padding_value not yet supported\".</p>", "body_text": "\ud83d\ude80 Feature\nNon-Zero Padding is currently only supported by explicitly padding the input before doing the convolution.\nIt would be better (more memory efficient, faster and userfrindly) to add an additional parameter \"padding_value\" to the convolution module.\nMotivation\nZero padding is sufficient to control the dimensions of the output. However, there is no clear motivation for the padding to be zero-valued. On the contrary, zero padding might even deteriorate the end results. Thus, the user should be able to specify an arbitrary value for the padding.\nPitch\nTo realise the additional parameter the following changes would needed to be made.\n\nPython API (Conv1d, Conv2d, Conv3d): torch/nn/modules/conv.py\nConvolution Logic: aten/src/ATen/native/Convolution.cpp\nHeader Generation: aten/src/ATen/nn.yaml, aten/src/ATen/native/native_functions.yaml, /tools/autograd/derivatives.yaml\nTHNN, THCUNN headers: aten/src/THNN/generic/THNN.h aten/src/THCUNN/generic/THCUNN.h\nConvolution Implementation (in THNN and THCUNN): SpatialConvolutionMM, SpatialDilatedConvolution...\nUnfolding operations im2col\n\nAdditional context\n@bengisuelis, @cdemirsoy and I implemented the above discribed modifications for gpu (THCUNN) convolutions and would like to contribute our code.\nWe did not add the functionality for external librarys (wrapper neeeded) and Cpu executed code (THNN). For those cases we currently throw a runtime error \"padding_value not yet supported\".", "body": "## \ud83d\ude80 Feature\r\nNon-Zero Padding is currently only supported by explicitly padding the input before doing the convolution.\r\nIt would be better (more memory efficient, faster and userfrindly) to add an additional parameter \"padding_value\" to the convolution module.\r\n\r\n## Motivation\r\nZero padding is sufficient to control the dimensions of the output. However, there is no clear motivation for the padding to be zero-valued. On the contrary, zero padding might even deteriorate the end results. Thus, the user should be able to specify an arbitrary value for the padding. \r\n\r\n## Pitch\r\n\r\nTo realise the additional parameter the following changes would needed to be made.\r\n\r\n- Python API (Conv1d, Conv2d, Conv3d): [torch/nn/modules/conv.py](https://github.com/pytorch/pytorch/blob/master/torch/nn/modules/conv.py)\r\n- Convolution Logic: [aten/src/ATen/native/Convolution.cpp](https://github.com/pytorch/pytorch/blob/master/aten/src/ATen/native/Convolution.cpp)\r\n- Header Generation: [aten/src/ATen/nn.yaml](https://github.com/pytorch/pytorch/blob/master/aten/src/ATen/nn.yaml), [aten/src/ATen/native/native_functions.yaml](https://github.com/pytorch/pytorch/blob/master/aten/src/ATen/native/native_functions.yaml), [/tools/autograd/derivatives.yaml](https://github.com/pytorch/pytorch/blob/master/tools/autograd/derivatives.yaml)\r\n- THNN, THCUNN headers: [aten/src/THNN/generic/THNN.h](https://github.com/pytorch/pytorch/blob/master/aten/src/THNN/generic/THNN.h) [aten/src/THCUNN/generic/THCUNN.h](https://github.com/pytorch/pytorch/blob/master/aten/src/THCUNN/generic/THCUNN.h)\r\n- Convolution Implementation (in THNN and THCUNN): [SpatialConvolutionMM](https://github.com/pytorch/pytorch/blob/master/aten/src/THNN/generic/SpatialConvolutionMM.c), [SpatialDilatedConvolution](https://github.com/pytorch/pytorch/blob/master/aten/src/THNN/generic/SpatialDilatedConvolution.c)...\r\n- Unfolding operations [im2col](https://github.com/pytorch/pytorch/blob/master/aten/src/THCUNN/im2col.h)\r\n\r\n## Additional context\r\n\r\n@bengisuelis, @cdemirsoy and I implemented the above discribed modifications for gpu (THCUNN) convolutions and would like to contribute our code. \r\nWe did not add the functionality for external librarys (wrapper neeeded) and Cpu executed code (THNN). For those cases we currently throw a runtime error \"padding_value not yet supported\".\r\n"}