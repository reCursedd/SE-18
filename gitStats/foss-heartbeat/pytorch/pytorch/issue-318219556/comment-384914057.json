{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/384914057", "html_url": "https://github.com/pytorch/pytorch/issues/7014#issuecomment-384914057", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/7014", "id": 384914057, "node_id": "MDEyOklzc3VlQ29tbWVudDM4NDkxNDA1Nw==", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "created_at": "2018-04-27T09:14:19Z", "updated_at": "2018-04-27T09:14:19Z", "author_association": "MEMBER", "body_html": "<p>I actually think that the CUDA behavior is reasonable, we should raise an error in the CPU case as well. You can't have a probability distribution where one of the elements has an infinite probability, so there's nothing we can do. What would you expect to happen in that case?</p>\n<p>Sorry for the long debugging, unfortunately getting meaningful errors from CUDA kernels is a bit hard. In the future you might want to use <code>CUDA_LAUNCH_BLOCKING=1</code> which should report the error in the same operation that caused it.</p>", "body_text": "I actually think that the CUDA behavior is reasonable, we should raise an error in the CPU case as well. You can't have a probability distribution where one of the elements has an infinite probability, so there's nothing we can do. What would you expect to happen in that case?\nSorry for the long debugging, unfortunately getting meaningful errors from CUDA kernels is a bit hard. In the future you might want to use CUDA_LAUNCH_BLOCKING=1 which should report the error in the same operation that caused it.", "body": "I actually think that the CUDA behavior is reasonable, we should raise an error in the CPU case as well. You can't have a probability distribution where one of the elements has an infinite probability, so there's nothing we can do. What would you expect to happen in that case?\r\n\r\nSorry for the long debugging, unfortunately getting meaningful errors from CUDA kernels is a bit hard. In the future you might want to use `CUDA_LAUNCH_BLOCKING=1` which should report the error in the same operation that caused it."}