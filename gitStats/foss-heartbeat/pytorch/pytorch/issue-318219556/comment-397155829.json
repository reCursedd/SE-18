{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/397155829", "html_url": "https://github.com/pytorch/pytorch/issues/7014#issuecomment-397155829", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/7014", "id": 397155829, "node_id": "MDEyOklzc3VlQ29tbWVudDM5NzE1NTgyOQ==", "user": {"login": "yf225", "id": 4063635, "node_id": "MDQ6VXNlcjQwNjM2MzU=", "avatar_url": "https://avatars0.githubusercontent.com/u/4063635?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yf225", "html_url": "https://github.com/yf225", "followers_url": "https://api.github.com/users/yf225/followers", "following_url": "https://api.github.com/users/yf225/following{/other_user}", "gists_url": "https://api.github.com/users/yf225/gists{/gist_id}", "starred_url": "https://api.github.com/users/yf225/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yf225/subscriptions", "organizations_url": "https://api.github.com/users/yf225/orgs", "repos_url": "https://api.github.com/users/yf225/repos", "events_url": "https://api.github.com/users/yf225/events{/privacy}", "received_events_url": "https://api.github.com/users/yf225/received_events", "type": "User", "site_admin": false}, "created_at": "2018-06-14T03:05:56Z", "updated_at": "2018-06-14T03:12:46Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=6156107\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/cle-ros\">@cle-ros</a> <code>torch.multinomial</code> and <code>torch.distributions.categorical.Categorical</code> actually use the same code for sampling, so on current master you should be able to see a more detailed error message the first time the device-side assert is triggered. e.g.:</p>\n<pre><code>&gt;&gt;&gt; import torch\n&gt;&gt;&gt; import numpy as np\n&gt;&gt;&gt; probs = torch.cuda.FloatTensor([np.inf, 0.5, 0.5])\n&gt;&gt;&gt; torch.distributions.categorical.Categorical(probs).sample((2, 2))\n/home/ubuntu/pytorch/aten/src/THC/THCTensorRandom.cuh:185: void sampleMultinomialOnce(long *, long, int, T *, T *, int, int) [with T = float, AccT = float]: block: [2,0,0], thread: [0,0,0] Assertion `THCNumerics&lt;T&gt;::ge(val, zero)` failed.\n/home/ubuntu/pytorch/aten/src/THC/THCTensorRandom.cuh:185: void sampleMultinomialOnce(long *, long, int, T *, T *, int, int) [with T = float, AccT = float]: block: [3,0,0], thread: [0,0,0] Assertion `THCNumerics&lt;T&gt;::ge(val, zero)` failed.\n/home/ubuntu/pytorch/aten/src/THC/THCTensorRandom.cuh:185: void sampleMultinomialOnce(long *, long, int, T *, T *, int, int) [with T = float, AccT = float]: block: [1,0,0], thread: [0,0,0] Assertion `THCNumerics&lt;T&gt;::ge(val, zero)` failed.\n/home/ubuntu/pytorch/aten/src/THC/THCTensorRandom.cuh:185: void sampleMultinomialOnce(long *, long, int, T *, T *, int, int) [with T = float, AccT = float]: block: [0,0,0], thread: [0,0,0] Assertion `THCNumerics&lt;T&gt;::ge(val, zero)` failed.\nTHCudaCheck FAIL file=/home/ubuntu/pytorch/aten/src/THC/generic/THCTensorCopy.cpp line=70 error=59 : device-side assert triggered\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\n  File \"/home/ubuntu/miniconda3/envs/master/lib/python3.6/site-packages/torch/tensor.py\", line 57, in __repr__\n    return torch._tensor_str._str(self)\n  File \"/home/ubuntu/miniconda3/envs/master/lib/python3.6/site-packages/torch/_tensor_str.py\", line 253, in _str\n    fmt, scale, sz = _number_format(get_summarized_data(self) if summarize else self)\n  File \"/home/ubuntu/miniconda3/envs/master/lib/python3.6/site-packages/torch/_tensor_str.py\", line 83, in _number_format\n    tensor = torch.DoubleTensor(tensor.size()).copy_(tensor).abs_().view(tensor.nelement())\nRuntimeError: cuda runtime error (59) : device-side assert triggered at /home/ubuntu/pytorch/aten/src/THC/generic/THCTensorCopy.cpp:70\n</code></pre>\n<p>If you run the <code>torch.distributions.categorical.Categorical(probs).sample((2, 2))</code> line again you will only see the <code>RuntimeError: cuda runtime error (59) : device-side assert triggered at /home/ubuntu/pytorch/aten/src/THC/generated/../generic/THCTensorMathReduce.cu:18</code> error, because at that time CUDA hasn't recovered from previous failure yet, and we will need to re-initialize CUDA to set it back to its original state.</p>\n<p>Regarding how to debug the <code>device-side assert triggered</code> error, you can try to run the program with <code>CUDA_LAUNCH_BLOCKING=1 python script.py</code>, and that will produce the correct stack trace pointing to where the assert was triggered from. <a href=\"https://discuss.pytorch.org/t/runtimeerror-cuda-runtime-error-59/750/8\" rel=\"nofollow\">https://discuss.pytorch.org/t/runtimeerror-cuda-runtime-error-59/750/8</a> has more discussion on why it's designed this way.</p>\n<p>I will create a PR to update the docs for <code>torch.distributions.categorical.Categorical</code> and emphasize that <code>probs</code> must be non-negative and have a non-zero sum.</p>", "body_text": "@cle-ros torch.multinomial and torch.distributions.categorical.Categorical actually use the same code for sampling, so on current master you should be able to see a more detailed error message the first time the device-side assert is triggered. e.g.:\n>>> import torch\n>>> import numpy as np\n>>> probs = torch.cuda.FloatTensor([np.inf, 0.5, 0.5])\n>>> torch.distributions.categorical.Categorical(probs).sample((2, 2))\n/home/ubuntu/pytorch/aten/src/THC/THCTensorRandom.cuh:185: void sampleMultinomialOnce(long *, long, int, T *, T *, int, int) [with T = float, AccT = float]: block: [2,0,0], thread: [0,0,0] Assertion `THCNumerics<T>::ge(val, zero)` failed.\n/home/ubuntu/pytorch/aten/src/THC/THCTensorRandom.cuh:185: void sampleMultinomialOnce(long *, long, int, T *, T *, int, int) [with T = float, AccT = float]: block: [3,0,0], thread: [0,0,0] Assertion `THCNumerics<T>::ge(val, zero)` failed.\n/home/ubuntu/pytorch/aten/src/THC/THCTensorRandom.cuh:185: void sampleMultinomialOnce(long *, long, int, T *, T *, int, int) [with T = float, AccT = float]: block: [1,0,0], thread: [0,0,0] Assertion `THCNumerics<T>::ge(val, zero)` failed.\n/home/ubuntu/pytorch/aten/src/THC/THCTensorRandom.cuh:185: void sampleMultinomialOnce(long *, long, int, T *, T *, int, int) [with T = float, AccT = float]: block: [0,0,0], thread: [0,0,0] Assertion `THCNumerics<T>::ge(val, zero)` failed.\nTHCudaCheck FAIL file=/home/ubuntu/pytorch/aten/src/THC/generic/THCTensorCopy.cpp line=70 error=59 : device-side assert triggered\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"/home/ubuntu/miniconda3/envs/master/lib/python3.6/site-packages/torch/tensor.py\", line 57, in __repr__\n    return torch._tensor_str._str(self)\n  File \"/home/ubuntu/miniconda3/envs/master/lib/python3.6/site-packages/torch/_tensor_str.py\", line 253, in _str\n    fmt, scale, sz = _number_format(get_summarized_data(self) if summarize else self)\n  File \"/home/ubuntu/miniconda3/envs/master/lib/python3.6/site-packages/torch/_tensor_str.py\", line 83, in _number_format\n    tensor = torch.DoubleTensor(tensor.size()).copy_(tensor).abs_().view(tensor.nelement())\nRuntimeError: cuda runtime error (59) : device-side assert triggered at /home/ubuntu/pytorch/aten/src/THC/generic/THCTensorCopy.cpp:70\n\nIf you run the torch.distributions.categorical.Categorical(probs).sample((2, 2)) line again you will only see the RuntimeError: cuda runtime error (59) : device-side assert triggered at /home/ubuntu/pytorch/aten/src/THC/generated/../generic/THCTensorMathReduce.cu:18 error, because at that time CUDA hasn't recovered from previous failure yet, and we will need to re-initialize CUDA to set it back to its original state.\nRegarding how to debug the device-side assert triggered error, you can try to run the program with CUDA_LAUNCH_BLOCKING=1 python script.py, and that will produce the correct stack trace pointing to where the assert was triggered from. https://discuss.pytorch.org/t/runtimeerror-cuda-runtime-error-59/750/8 has more discussion on why it's designed this way.\nI will create a PR to update the docs for torch.distributions.categorical.Categorical and emphasize that probs must be non-negative and have a non-zero sum.", "body": "@cle-ros `torch.multinomial` and `torch.distributions.categorical.Categorical` actually use the same code for sampling, so on current master you should be able to see a more detailed error message the first time the device-side assert is triggered. e.g.:\r\n\r\n```\r\n>>> import torch\r\n>>> import numpy as np\r\n>>> probs = torch.cuda.FloatTensor([np.inf, 0.5, 0.5])\r\n>>> torch.distributions.categorical.Categorical(probs).sample((2, 2))\r\n/home/ubuntu/pytorch/aten/src/THC/THCTensorRandom.cuh:185: void sampleMultinomialOnce(long *, long, int, T *, T *, int, int) [with T = float, AccT = float]: block: [2,0,0], thread: [0,0,0] Assertion `THCNumerics<T>::ge(val, zero)` failed.\r\n/home/ubuntu/pytorch/aten/src/THC/THCTensorRandom.cuh:185: void sampleMultinomialOnce(long *, long, int, T *, T *, int, int) [with T = float, AccT = float]: block: [3,0,0], thread: [0,0,0] Assertion `THCNumerics<T>::ge(val, zero)` failed.\r\n/home/ubuntu/pytorch/aten/src/THC/THCTensorRandom.cuh:185: void sampleMultinomialOnce(long *, long, int, T *, T *, int, int) [with T = float, AccT = float]: block: [1,0,0], thread: [0,0,0] Assertion `THCNumerics<T>::ge(val, zero)` failed.\r\n/home/ubuntu/pytorch/aten/src/THC/THCTensorRandom.cuh:185: void sampleMultinomialOnce(long *, long, int, T *, T *, int, int) [with T = float, AccT = float]: block: [0,0,0], thread: [0,0,0] Assertion `THCNumerics<T>::ge(val, zero)` failed.\r\nTHCudaCheck FAIL file=/home/ubuntu/pytorch/aten/src/THC/generic/THCTensorCopy.cpp line=70 error=59 : device-side assert triggered\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/home/ubuntu/miniconda3/envs/master/lib/python3.6/site-packages/torch/tensor.py\", line 57, in __repr__\r\n    return torch._tensor_str._str(self)\r\n  File \"/home/ubuntu/miniconda3/envs/master/lib/python3.6/site-packages/torch/_tensor_str.py\", line 253, in _str\r\n    fmt, scale, sz = _number_format(get_summarized_data(self) if summarize else self)\r\n  File \"/home/ubuntu/miniconda3/envs/master/lib/python3.6/site-packages/torch/_tensor_str.py\", line 83, in _number_format\r\n    tensor = torch.DoubleTensor(tensor.size()).copy_(tensor).abs_().view(tensor.nelement())\r\nRuntimeError: cuda runtime error (59) : device-side assert triggered at /home/ubuntu/pytorch/aten/src/THC/generic/THCTensorCopy.cpp:70\r\n```\r\n\r\nIf you run the `torch.distributions.categorical.Categorical(probs).sample((2, 2))` line again you will only see the `RuntimeError: cuda runtime error (59) : device-side assert triggered at /home/ubuntu/pytorch/aten/src/THC/generated/../generic/THCTensorMathReduce.cu:18` error, because at that time CUDA hasn't recovered from previous failure yet, and we will need to re-initialize CUDA to set it back to its original state.\r\n\r\nRegarding how to debug the `device-side assert triggered` error, you can try to run the program with `CUDA_LAUNCH_BLOCKING=1 python script.py`, and that will produce the correct stack trace pointing to where the assert was triggered from. https://discuss.pytorch.org/t/runtimeerror-cuda-runtime-error-59/750/8 has more discussion on why it's designed this way.\r\n\r\nI will create a PR to update the docs for `torch.distributions.categorical.Categorical` and emphasize that `probs` must be non-negative and have a non-zero sum."}