{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/392944461", "html_url": "https://github.com/pytorch/pytorch/issues/7014#issuecomment-392944461", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/7014", "id": 392944461, "node_id": "MDEyOklzc3VlQ29tbWVudDM5Mjk0NDQ2MQ==", "user": {"login": "cle-ros", "id": 6156107, "node_id": "MDQ6VXNlcjYxNTYxMDc=", "avatar_url": "https://avatars2.githubusercontent.com/u/6156107?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cle-ros", "html_url": "https://github.com/cle-ros", "followers_url": "https://api.github.com/users/cle-ros/followers", "following_url": "https://api.github.com/users/cle-ros/following{/other_user}", "gists_url": "https://api.github.com/users/cle-ros/gists{/gist_id}", "starred_url": "https://api.github.com/users/cle-ros/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cle-ros/subscriptions", "organizations_url": "https://api.github.com/users/cle-ros/orgs", "repos_url": "https://api.github.com/users/cle-ros/repos", "events_url": "https://api.github.com/users/cle-ros/events{/privacy}", "received_events_url": "https://api.github.com/users/cle-ros/received_events", "type": "User", "site_admin": false}, "created_at": "2018-05-29T21:04:50Z", "updated_at": "2018-05-29T21:06:47Z", "author_association": "NONE", "body_html": "<p>Hi,<br>\nI'm not sure how much code <code>torch.multinomial</code> and <code>torch.distributions.categorical.Categorical</code> share, but <code>torch.distributions.categorical.Categorical</code> behaves the same way.</p>\n<p>In addition, the same behavior occurs for negative values. While the docs for <code>torch.multinomial</code> state that <code>probs</code> should all be positive, the docs for <code>torch.distributions.categorical.Categorical</code> do not. They even state that \"probs will be normalized to be summing to 1.\", which suggests that negative values are possible.</p>\n<p>Here's a mwe:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-c\"><span class=\"pl-c\">#</span> for inf values</span>\nprobs <span class=\"pl-k\">=</span> torch.cuda.FloatTensor([np.inf, <span class=\"pl-c1\">0.5</span>, <span class=\"pl-c1\">0.5</span>])\ndist <span class=\"pl-k\">=</span> torch.distributions.categorical.Categorical(probs)\n[<span class=\"pl-c1\">...</span>] cuda runtime error (<span class=\"pl-c1\">59</span>) : device<span class=\"pl-k\">-</span>side <span class=\"pl-k\">assert</span> triggered at [<span class=\"pl-c1\">...</span>]\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> and for negative ones</span>\nprobs <span class=\"pl-k\">=</span> torch.cuda.FloatTensor([<span class=\"pl-k\">-</span><span class=\"pl-c1\">0.5</span>, <span class=\"pl-c1\">0.5</span>, <span class=\"pl-c1\">0.5</span>])\ndist <span class=\"pl-k\">=</span> torch.distributions.categorical.Categorical(probs)\n[<span class=\"pl-c1\">...</span>] cuda runtime error (<span class=\"pl-c1\">59</span>) : device<span class=\"pl-k\">-</span>side <span class=\"pl-k\">assert</span> triggered at [<span class=\"pl-c1\">...</span>]</pre></div>\n<p>On a side note: wouldn't it be interesting to bundle the different issues that deal with the annoyingly unspecific error messages involving <code>cuda runtime error (59) : device-side assert triggered at [...]</code> ?<br>\nAs they are <em>really</em> hard to debug, might it not be interesting to have some additional data-checking before performing the computation? I'd sacrifice that fraction of speed for good error-messages any day ... this is very close to issue <a href=\"https://github.com/pytorch/pytorch/pull/7647\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/pytorch/pytorch/pull/7647/hovercard\">7647</a>, but as they keep popping up ...</p>\n<p>Thanks for all the great work!</p>", "body_text": "Hi,\nI'm not sure how much code torch.multinomial and torch.distributions.categorical.Categorical share, but torch.distributions.categorical.Categorical behaves the same way.\nIn addition, the same behavior occurs for negative values. While the docs for torch.multinomial state that probs should all be positive, the docs for torch.distributions.categorical.Categorical do not. They even state that \"probs will be normalized to be summing to 1.\", which suggests that negative values are possible.\nHere's a mwe:\n# for inf values\nprobs = torch.cuda.FloatTensor([np.inf, 0.5, 0.5])\ndist = torch.distributions.categorical.Categorical(probs)\n[...] cuda runtime error (59) : device-side assert triggered at [...]\n# and for negative ones\nprobs = torch.cuda.FloatTensor([-0.5, 0.5, 0.5])\ndist = torch.distributions.categorical.Categorical(probs)\n[...] cuda runtime error (59) : device-side assert triggered at [...]\nOn a side note: wouldn't it be interesting to bundle the different issues that deal with the annoyingly unspecific error messages involving cuda runtime error (59) : device-side assert triggered at [...] ?\nAs they are really hard to debug, might it not be interesting to have some additional data-checking before performing the computation? I'd sacrifice that fraction of speed for good error-messages any day ... this is very close to issue 7647, but as they keep popping up ...\nThanks for all the great work!", "body": "Hi,\r\nI'm not sure how much code `torch.multinomial` and `torch.distributions.categorical.Categorical` share, but `torch.distributions.categorical.Categorical` behaves the same way. \r\n\r\nIn addition, the same behavior occurs for negative values. While the docs for `torch.multinomial` state that `probs` should all be positive, the docs for `torch.distributions.categorical.Categorical` do not. They even state that \"probs will be normalized to be summing to 1.\", which suggests that negative values are possible.\r\n\r\nHere's a mwe:\r\n\r\n```python\r\n# for inf values\r\nprobs = torch.cuda.FloatTensor([np.inf, 0.5, 0.5])\r\ndist = torch.distributions.categorical.Categorical(probs)\r\n[...] cuda runtime error (59) : device-side assert triggered at [...]\r\n# and for negative ones\r\nprobs = torch.cuda.FloatTensor([-0.5, 0.5, 0.5])\r\ndist = torch.distributions.categorical.Categorical(probs)\r\n[...] cuda runtime error (59) : device-side assert triggered at [...]\r\n```\r\n\r\nOn a side note: wouldn't it be interesting to bundle the different issues that deal with the annoyingly unspecific error messages involving `cuda runtime error (59) : device-side assert triggered at [...]` ?\r\nAs they are _really_ hard to debug, might it not be interesting to have some additional data-checking before performing the computation? I'd sacrifice that fraction of speed for good error-messages any day ... this is very close to issue [7647](https://github.com/pytorch/pytorch/pull/7647), but as they keep popping up ...\r\n\r\nThanks for all the great work!"}