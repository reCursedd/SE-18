{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/385198098", "html_url": "https://github.com/pytorch/pytorch/issues/7014#issuecomment-385198098", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/7014", "id": 385198098, "node_id": "MDEyOklzc3VlQ29tbWVudDM4NTE5ODA5OA==", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "created_at": "2018-04-28T18:53:30Z", "updated_at": "2018-04-28T18:53:30Z", "author_association": "MEMBER", "body_html": "<p>Thanks <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=157106\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/kylemcdonald\">@kylemcdonald</a>. I think the actionable items here would be:</p>\n<ul>\n<li>Start throwing exceptions on CPU when we see <code>inf</code> values (not sure what's the behavior now).</li>\n<li>Perhaps improve the <code>device-side assert triggered</code> message to suggest people to run their code with <code>CUDA_LAUNCH_BLOCKING=1</code>.</li>\n</ul>\n<p>I'm not exactly sure what do you mean by <code>logits</code> here. <code>multinomial</code> already accepts unnormalized vectors (that are not probability distributions), and will normalize them as part of the process. It's just that the normalization procedure doesn't work with infinite values.</p>", "body_text": "Thanks @kylemcdonald. I think the actionable items here would be:\n\nStart throwing exceptions on CPU when we see inf values (not sure what's the behavior now).\nPerhaps improve the device-side assert triggered message to suggest people to run their code with CUDA_LAUNCH_BLOCKING=1.\n\nI'm not exactly sure what do you mean by logits here. multinomial already accepts unnormalized vectors (that are not probability distributions), and will normalize them as part of the process. It's just that the normalization procedure doesn't work with infinite values.", "body": "Thanks @kylemcdonald. I think the actionable items here would be:\r\n* Start throwing exceptions on CPU when we see `inf` values (not sure what's the behavior now).\r\n* Perhaps improve the `device-side assert triggered` message to suggest people to run their code with `CUDA_LAUNCH_BLOCKING=1`.\r\n\r\nI'm not exactly sure what do you mean by `logits` here. `multinomial` already accepts unnormalized vectors (that are not probability distributions), and will normalize them as part of the process. It's just that the normalization procedure doesn't work with infinite values."}