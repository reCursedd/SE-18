{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/322909327", "html_url": "https://github.com/pytorch/pytorch/issues/1355#issuecomment-322909327", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/1355", "id": 322909327, "node_id": "MDEyOklzc3VlQ29tbWVudDMyMjkwOTMyNw==", "user": {"login": "vadimkantorov", "id": 1041752, "node_id": "MDQ6VXNlcjEwNDE3NTI=", "avatar_url": "https://avatars0.githubusercontent.com/u/1041752?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vadimkantorov", "html_url": "https://github.com/vadimkantorov", "followers_url": "https://api.github.com/users/vadimkantorov/followers", "following_url": "https://api.github.com/users/vadimkantorov/following{/other_user}", "gists_url": "https://api.github.com/users/vadimkantorov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vadimkantorov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vadimkantorov/subscriptions", "organizations_url": "https://api.github.com/users/vadimkantorov/orgs", "repos_url": "https://api.github.com/users/vadimkantorov/repos", "events_url": "https://api.github.com/users/vadimkantorov/events{/privacy}", "received_events_url": "https://api.github.com/users/vadimkantorov/received_events", "type": "User", "site_admin": false}, "created_at": "2017-08-16T21:48:35Z", "updated_at": "2017-08-16T22:19:09Z", "author_association": "NONE", "body_html": "<p>For me, the problem was that if a worker thread dies for whatever reason, then <code>index_queue.put</code> hangs forever. One reason of working threads dying is unpickler failing during initialization. In that case, until this Python <a href=\"https://github.com/python/cpython/commit/bc50f03db4f58c869b78e98468e374d7e61f1227\">bugfix</a> in master in May 2017, the worker thread would die and cause the endless hang. In my case, the hang was happening in batch pre-fetching priming stage.</p>\n<p>Maybe a replacement of <code>SimpleQueue</code> used in <code>DataLoaderIter</code> by <code>Queue</code> which allows for a timeout with a graceful exception message.</p>\n<p><strong>UPD:</strong> I was mistaken, this bugfix patches <code>Queue</code>, not <code>SimpleQueue</code>. It's still true that <code>SimpleQueue</code> will lock if no worker threads are online. An easy way to check that is replacing these <a href=\"https://github.com/pytorch/pytorch/blob/master/torch/utils/data/dataloader.py#L150-L154\">lines</a> with <code>self.workers = []</code>.</p>", "body_text": "For me, the problem was that if a worker thread dies for whatever reason, then index_queue.put hangs forever. One reason of working threads dying is unpickler failing during initialization. In that case, until this Python bugfix in master in May 2017, the worker thread would die and cause the endless hang. In my case, the hang was happening in batch pre-fetching priming stage.\nMaybe a replacement of SimpleQueue used in DataLoaderIter by Queue which allows for a timeout with a graceful exception message.\nUPD: I was mistaken, this bugfix patches Queue, not SimpleQueue. It's still true that SimpleQueue will lock if no worker threads are online. An easy way to check that is replacing these lines with self.workers = [].", "body": "For me, the problem was that if a worker thread dies for whatever reason, then `index_queue.put` hangs forever. One reason of working threads dying is unpickler failing during initialization. In that case, until this Python [bugfix](https://github.com/python/cpython/commit/bc50f03db4f58c869b78e98468e374d7e61f1227) in master in May 2017, the worker thread would die and cause the endless hang. In my case, the hang was happening in batch pre-fetching priming stage.\r\n\r\nMaybe a replacement of `SimpleQueue` used in `DataLoaderIter` by `Queue` which allows for a timeout with a graceful exception message.\r\n\r\n**UPD:** I was mistaken, this bugfix patches `Queue`, not `SimpleQueue`. It's still true that `SimpleQueue` will lock if no worker threads are online. An easy way to check that is replacing these [lines](https://github.com/pytorch/pytorch/blob/master/torch/utils/data/dataloader.py#L150-L154) with `self.workers = []`."}