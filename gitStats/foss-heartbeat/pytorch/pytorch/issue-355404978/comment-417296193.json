{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/417296193", "html_url": "https://github.com/pytorch/pytorch/issues/11062#issuecomment-417296193", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/11062", "id": 417296193, "node_id": "MDEyOklzc3VlQ29tbWVudDQxNzI5NjE5Mw==", "user": {"login": "zym1010", "id": 4273204, "node_id": "MDQ6VXNlcjQyNzMyMDQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/4273204?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zym1010", "html_url": "https://github.com/zym1010", "followers_url": "https://api.github.com/users/zym1010/followers", "following_url": "https://api.github.com/users/zym1010/following{/other_user}", "gists_url": "https://api.github.com/users/zym1010/gists{/gist_id}", "starred_url": "https://api.github.com/users/zym1010/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zym1010/subscriptions", "organizations_url": "https://api.github.com/users/zym1010/orgs", "repos_url": "https://api.github.com/users/zym1010/repos", "events_url": "https://api.github.com/users/zym1010/events{/privacy}", "received_events_url": "https://api.github.com/users/zym1010/received_events", "type": "User", "site_admin": false}, "created_at": "2018-08-30T12:08:07Z", "updated_at": "2018-08-30T18:55:46Z", "author_association": "CONTRIBUTOR", "body_html": "<div class=\"email-fragment\">Thanks. I agree with you on the cause to this problem (I skimmed over the code for data loader a while ago). As for the fix, I\u2019m not sure if your proposal would have other implications. Does that random number in DataLoaderIter only affect how the workload is assigned among workers? If that's the case, then I think we are good.\n\n\nAs for the doc, I don\u2019t think reading the doc in its current state would make people realize the issue I describe here.\n\n\nTo express my concern in another way, I think making behaviorally deterministic operations affect random states is certainly unintuitive; for example, you would not expect that running a few matrix multiplications in numpy can affect random number generation that follows those matrix multiplications.\n\n\nIn addition, I think it would be nice to make data loaders have their own random states without modifying the system ones.</div>\n<span class=\"email-hidden-toggle\"><a href=\"#\">\u2026</a></span><div class=\"email-hidden-reply\">\n<div class=\"email-quoted-reply\"> On Aug 30, 2018, at 7:48 AM, Francisco Massa ***@***.***&gt; wrote:\n\n This happens because we unconditionally generate a random number in the DataLoaderIter, which changes the state of the rng.\n This is kind of documented in this part.\n\n I think that we could reset the state of the rng to the state it was before the generation of this number so that this doesn't happen.\n\n \u2014\n You are receiving this because you authored the thread.\n Reply to this email directly, view it on GitHub, or mute the thread.</div>\n<div class=\"email-fragment\"></div>\n</div>", "body_text": "Thanks. I agree with you on the cause to this problem (I skimmed over the code for data loader a while ago). As for the fix, I\u2019m not sure if your proposal would have other implications. Does that random number in DataLoaderIter only affect how the workload is assigned among workers? If that's the case, then I think we are good.\n\n\nAs for the doc, I don\u2019t think reading the doc in its current state would make people realize the issue I describe here.\n\n\nTo express my concern in another way, I think making behaviorally deterministic operations affect random states is certainly unintuitive; for example, you would not expect that running a few matrix multiplications in numpy can affect random number generation that follows those matrix multiplications.\n\n\nIn addition, I think it would be nice to make data loaders have their own random states without modifying the system ones.\n\u2026\n On Aug 30, 2018, at 7:48 AM, Francisco Massa ***@***.***> wrote:\n\n This happens because we unconditionally generate a random number in the DataLoaderIter, which changes the state of the rng.\n This is kind of documented in this part.\n\n I think that we could reset the state of the rng to the state it was before the generation of this number so that this doesn't happen.\n\n \u2014\n You are receiving this because you authored the thread.\n Reply to this email directly, view it on GitHub, or mute the thread.", "body": "Thanks. I agree with you on the cause to this problem (I skimmed over the code for data loader a while ago). As for the fix, I\u2019m not sure if your proposal would have other implications. Does that random number in DataLoaderIter only affect how the workload is assigned among workers? If that's the case, then I think we are good.\r\n\r\n\r\nAs for the doc, I don\u2019t think reading the doc in its current state would make people realize the issue I describe here.\r\n\r\n\r\nTo express my concern in another way, I think making behaviorally deterministic operations affect random states is certainly unintuitive; for example, you would not expect that running a few matrix multiplications in numpy can affect random number generation that follows those matrix multiplications.\r\n\r\n\r\nIn addition, I think it would be nice to make data loaders have their own random states without modifying the system ones.\r\n\r\n> On Aug 30, 2018, at 7:48 AM, Francisco Massa <notifications@github.com> wrote:\r\n> \r\n> This happens because we unconditionally generate a random number in the DataLoaderIter, which changes the state of the rng.\r\n> This is kind of documented in this part.\r\n> \r\n> I think that we could reset the state of the rng to the state it was before the generation of this number so that this doesn't happen.\r\n> \r\n> \u2014\r\n> You are receiving this because you authored the thread.\r\n> Reply to this email directly, view it on GitHub, or mute the thread.\r\n"}