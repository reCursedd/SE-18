{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/202181405", "pull_request_review_id": 136830734, "id": 202181405, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMjE4MTQwNQ==", "diff_hunk": "@@ -162,80 +162,19 @@ enum class ProfilerState {\n     NVTX,  // only emit NVTX markers\n };\n \n-extern ProfilerState state;\n-extern uint32_t next_thread_id;\n-extern std::mutex all_event_lists_mutex;\n-extern std::list<std::shared_ptr<RangeEventList>> all_event_lists;\n-\n-extern thread_local std::shared_ptr<RangeEventList> event_list;\n-extern thread_local int32_t thread_id;\n-\n-inline RangeEventList& getEventList() {\n-  if (!event_list) {\n-    std::lock_guard<std::mutex> guard(all_event_lists_mutex);\n-    event_list = std::make_shared<RangeEventList>();\n-    thread_id = next_thread_id++;\n-    all_event_lists.emplace_front(event_list);\n-  }\n-  return *event_list;\n-}\n-\n-inline void mark(std::string name, bool include_cuda = true) {\n-  if (state == ProfilerState::NVTX) {\n-#ifdef USE_CUDA\n-    nvtxMarkA(name.c_str());\n-#else\n-    throw std::logic_error(\"mark called with NVTX tracing, but compiled without CUDA\");\n-#endif\n-  } else {\n-    getEventList().record(EventKind::Mark, std::move(name), thread_id, include_cuda && state == ProfilerState::CUDA);\n-  }\n-}\n-\n-inline void pushRange(std::string name) {\n-  if (state == ProfilerState::NVTX) {\n-#ifdef USE_CUDA\n-    nvtxRangePushA(name.c_str());\n-#else\n-    throw std::logic_error(\"pushRange called with NVTX tracing, but compiled without CUDA\");\n-#endif\n-  } else {\n-    getEventList().record(EventKind::PushRange, std::move(name), thread_id, state == ProfilerState::CUDA);\n-  }\n-}\n-\n-inline void popRange() {\n-  if (state == ProfilerState::NVTX) {\n-#ifdef USE_CUDA\n-    nvtxRangePop();\n-#else\n-    throw std::logic_error(\"popRange called with NVTX tracing, but compiled without CUDA\");\n-#endif\n-  } else {\n-    getEventList().record(EventKind::PopRange, std::string(), thread_id, state == ProfilerState::CUDA);\n-  }\n-}\n+RangeEventList& getEventList();", "path": "torch/csrc/autograd/profiler.h", "position": 57, "original_position": 57, "commit_id": "e07054a285cdde51328f3e5d2c353b7e6454d6e1", "original_commit_id": "963842382881326bbc3c24988dc5f308f8eb6fe3", "user": {"login": "goldsborough", "id": 6429851, "node_id": "MDQ6VXNlcjY0Mjk4NTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/6429851?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goldsborough", "html_url": "https://github.com/goldsborough", "followers_url": "https://api.github.com/users/goldsborough/followers", "following_url": "https://api.github.com/users/goldsborough/following{/other_user}", "gists_url": "https://api.github.com/users/goldsborough/gists{/gist_id}", "starred_url": "https://api.github.com/users/goldsborough/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goldsborough/subscriptions", "organizations_url": "https://api.github.com/users/goldsborough/orgs", "repos_url": "https://api.github.com/users/goldsborough/repos", "events_url": "https://api.github.com/users/goldsborough/events{/privacy}", "received_events_url": "https://api.github.com/users/goldsborough/received_events", "type": "User", "site_admin": false}, "body": "What happened here?", "created_at": "2018-07-12T21:14:03Z", "updated_at": "2018-11-23T15:47:14Z", "html_url": "https://github.com/pytorch/pytorch/pull/8792#discussion_r202181405", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/8792", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/202181405"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/8792#discussion_r202181405"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/8792"}}, "body_html": "<p>What happened here?</p>", "body_text": "What happened here?"}