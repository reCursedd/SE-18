{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/202421883", "pull_request_review_id": 137125154, "id": 202421883, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMjQyMTg4Mw==", "diff_hunk": "@@ -347,45 +337,76 @@ install(TARGETS torch\n   LIBRARY DESTINATION \"${TORCH_INSTALL_LIB_DIR}\"\n   ARCHIVE DESTINATION \"${TORCH_INSTALL_LIB_DIR}\")\n \n-if (TORCH_BUILD_TEST)\n-  # JIT Tests. TODO: Put into test/cpp/jit folder\n-\n+# JIT Tests. TODO: Put into test/cpp/jit folder\n+if (NOT MSVC AND NOT APPLE)\n   add_executable(test_jit ${TORCH_SRC_DIR}/csrc/jit/test_jit.cpp)\n+  target_link_libraries(test_jit torch ${TORCH_CUDA_LIBRARIES})\n+  target_compile_definitions(test_jit PUBLIC USE_CATCH _FORCE_INLINES)\n+  target_include_directories(test_jit PUBLIC\n+    \"${TORCH_SRC_DIR}/../third_party/catch/single_include\"\n+    ${ATen_CPU_INCLUDE})\n \n-  target_link_libraries(test_jit torch)\n+  if (USE_CUDA)\n+    target_link_libraries(test_jit ${CUDA_LIBRARIES})\n+  endif()\n+endif()\n \n-  target_include_directories(test_jit PUBLIC\n-    \"${TORCH_SRC_DIR}/../third_party/catch/single_include\")\n-\n-  # API Tests\n-\n-  if (NOT NO_API)\n-    set(TORCH_API_TEST_DIR \"${TORCH_SRC_DIR}/../test/cpp/api\")\n-\n-    add_executable(test_api\n-      ${TORCH_API_TEST_DIR}/any.cpp\n-      ${TORCH_API_TEST_DIR}/modules.cpp\n-      ${TORCH_API_TEST_DIR}/cursor.cpp\n-      ${TORCH_API_TEST_DIR}/integration.cpp\n-      ${TORCH_API_TEST_DIR}/main.cpp\n-      ${TORCH_API_TEST_DIR}/misc.cpp\n-      ${TORCH_API_TEST_DIR}/module.cpp\n-      ${TORCH_API_TEST_DIR}/optim.cpp\n-      ${TORCH_API_TEST_DIR}/sequential.cpp\n-      ${TORCH_API_TEST_DIR}/rnn.cpp\n-      ${TORCH_API_TEST_DIR}/serialization.cpp\n-      ${TORCH_API_TEST_DIR}/static.cpp\n-      ${TORCH_API_TEST_DIR}/tensor.cpp\n-      ${TORCH_API_TEST_DIR}/tensor_cuda.cpp\n-      # Temporary until ATen tests are built with Caffe2\n-      ${TORCH_API_TEST_DIR}/tensor_options.cpp\n-      ${TORCH_API_TEST_DIR}/tensor_options_cuda.cpp\n-    )\n+if (NOT NO_API AND NOT USE_ROCM)\n+  target_include_directories(torch PUBLIC\n+    ${TORCH_SRC_DIR}/csrc/api\n+    ${TORCH_SRC_DIR}/csrc/api/include)\n \n-      target_include_directories(test_api\n-        PUBLIC\n-        \"${TORCH_SRC_DIR}/../third_party/catch/single_include\")\n+  if (NOT MSVC)\n+    target_compile_options(torch PRIVATE -Wno-error=maybe-uninitialized)\n+  endif()\n+\n+  if (APPLE)\n+    target_compile_options(torch PRIVATE -Wno-error=unknown-warning-option)\n+  endif()\n+endif()\n \n-    target_link_libraries(test_api torch)\n+if (NOT NO_API AND NOT USE_ROCM)\n+  set(TORCH_API_TEST_DIR \"${TORCH_SRC_DIR}/../test/cpp/api\")\n+\n+  add_executable(test_api\n+    ${TORCH_API_TEST_DIR}/any.cpp\n+    ${TORCH_API_TEST_DIR}/modules.cpp\n+    ${TORCH_API_TEST_DIR}/cursor.cpp\n+    ${TORCH_API_TEST_DIR}/integration.cpp\n+    ${TORCH_API_TEST_DIR}/main.cpp\n+    ${TORCH_API_TEST_DIR}/misc.cpp\n+    ${TORCH_API_TEST_DIR}/module.cpp\n+    ${TORCH_API_TEST_DIR}/optim.cpp\n+    ${TORCH_API_TEST_DIR}/sequential.cpp\n+    ${TORCH_API_TEST_DIR}/rnn.cpp\n+    ${TORCH_API_TEST_DIR}/serialization.cpp\n+    ${TORCH_API_TEST_DIR}/static.cpp\n+    ${TORCH_API_TEST_DIR}/tensor.cpp\n+    ${TORCH_API_TEST_DIR}/tensor_cuda.cpp\n+    # Temporary until ATen tests are built with Caffe2\n+    ${TORCH_API_TEST_DIR}/tensor_options.cpp\n+    ${TORCH_API_TEST_DIR}/tensor_options_cuda.cpp\n+    )\n+\n+  target_include_directories(test_api\n+    PUBLIC\n+    \"${TORCH_SRC_DIR}/../third_party/catch/single_include\"\n+    ${ATen_CPU_INCLUDE})\n+\n+  target_link_libraries(test_api torch ${TORCH_CUDA_LIBRARIES})\n+\n+  if (APPLE)\n+    target_compile_options(test_api PRIVATE\n+      -Wno-error=unknown-warning-option", "path": "torch/CMakeLists.txt", "position": null, "original_position": 536, "commit_id": "e07054a285cdde51328f3e5d2c353b7e6454d6e1", "original_commit_id": "963842382881326bbc3c24988dc5f308f8eb6fe3", "user": {"login": "anderspapitto", "id": 1388690, "node_id": "MDQ6VXNlcjEzODg2OTA=", "avatar_url": "https://avatars3.githubusercontent.com/u/1388690?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anderspapitto", "html_url": "https://github.com/anderspapitto", "followers_url": "https://api.github.com/users/anderspapitto/followers", "following_url": "https://api.github.com/users/anderspapitto/following{/other_user}", "gists_url": "https://api.github.com/users/anderspapitto/gists{/gist_id}", "starred_url": "https://api.github.com/users/anderspapitto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anderspapitto/subscriptions", "organizations_url": "https://api.github.com/users/anderspapitto/orgs", "repos_url": "https://api.github.com/users/anderspapitto/repos", "events_url": "https://api.github.com/users/anderspapitto/events{/privacy}", "received_events_url": "https://api.github.com/users/anderspapitto/received_events", "type": "User", "site_admin": false}, "body": "++", "created_at": "2018-07-13T17:31:57Z", "updated_at": "2018-11-23T15:47:20Z", "html_url": "https://github.com/pytorch/pytorch/pull/8792#discussion_r202421883", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/8792", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/202421883"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/8792#discussion_r202421883"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/8792"}}, "body_html": "<p>++</p>", "body_text": "++", "in_reply_to_id": 202183202}