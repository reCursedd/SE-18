{"url": "https://api.github.com/repos/pytorch/pytorch/issues/8792", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/8792/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/8792/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/8792/events", "html_url": "https://github.com/pytorch/pytorch/pull/8792", "id": 334954493, "node_id": "MDExOlB1bGxSZXF1ZXN0MTk2Nzk1NjQ1", "number": 8792, "title": "Introduce libtorch to setup.py build", "user": {"login": "anderspapitto", "id": 1388690, "node_id": "MDQ6VXNlcjEzODg2OTA=", "avatar_url": "https://avatars3.githubusercontent.com/u/1388690?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anderspapitto", "html_url": "https://github.com/anderspapitto", "followers_url": "https://api.github.com/users/anderspapitto/followers", "following_url": "https://api.github.com/users/anderspapitto/following{/other_user}", "gists_url": "https://api.github.com/users/anderspapitto/gists{/gist_id}", "starred_url": "https://api.github.com/users/anderspapitto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anderspapitto/subscriptions", "organizations_url": "https://api.github.com/users/anderspapitto/orgs", "repos_url": "https://api.github.com/users/anderspapitto/repos", "events_url": "https://api.github.com/users/anderspapitto/events{/privacy}", "received_events_url": "https://api.github.com/users/anderspapitto/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2018-06-22T17:11:38Z", "updated_at": "2018-11-23T15:47:26Z", "closed_at": "2018-07-18T22:00:33Z", "author_association": "MEMBER", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/8792", "html_url": "https://github.com/pytorch/pytorch/pull/8792", "diff_url": "https://github.com/pytorch/pytorch/pull/8792.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/8792.patch"}, "body_html": "<p>Prior to this diff, there have been two ways of compiling the bulk of the torch codebase. There was no interaction between them - you had to pick one or the other.</p>\n<ol>\n<li>with setup.py. This method</li>\n</ol>\n<ul>\n<li>used the setuptools C extension functionality</li>\n<li>worked on all platforms</li>\n<li>did not build test_jit/test_api binaries</li>\n<li>did not include the C++ api</li>\n<li>always included python functionality</li>\n<li>produced _C.so</li>\n</ul>\n<ol start=\"2\">\n<li>with cpp_build. This method</li>\n</ol>\n<ul>\n<li>used CMake</li>\n<li>did not support Windows or ROCM</li>\n<li>was capable of building the test binaries</li>\n<li>included the C++ api</li>\n<li>did not build the python functionality</li>\n<li>produced libtorch.so</li>\n</ul>\n<p>This diff combines the two.</p>\n<ol>\n<li>cpp_build/CMakeLists.txt has become torch/CMakeLists.txt. This build</li>\n</ol>\n<ul>\n<li>is CMake-based</li>\n<li>works on all platforms</li>\n<li>builds the test binaries</li>\n<li>includes the C++ api</li>\n<li>does not include the python functionality</li>\n<li>produces libtorch.so</li>\n</ul>\n<ol start=\"2\">\n<li>the setup.py build</li>\n</ol>\n<ul>\n<li>compiles the python functionality</li>\n<li>calls into the CMake build to build libtorch.so</li>\n<li>produces _C.so, which has a dependency on libtorch.so</li>\n</ul>\n<p>In terms of code changes, this mostly means extending the cmake build to support the full variety of environments and platforms. There are also a small number of changes related to the fact that there are now two shared objects - in particular, windows requires annotating some symbols with dllimport/dllexport, and doesn't allow exposing thread_local globals directly.</p>", "body_text": "Prior to this diff, there have been two ways of compiling the bulk of the torch codebase. There was no interaction between them - you had to pick one or the other.\n\nwith setup.py. This method\n\n\nused the setuptools C extension functionality\nworked on all platforms\ndid not build test_jit/test_api binaries\ndid not include the C++ api\nalways included python functionality\nproduced _C.so\n\n\nwith cpp_build. This method\n\n\nused CMake\ndid not support Windows or ROCM\nwas capable of building the test binaries\nincluded the C++ api\ndid not build the python functionality\nproduced libtorch.so\n\nThis diff combines the two.\n\ncpp_build/CMakeLists.txt has become torch/CMakeLists.txt. This build\n\n\nis CMake-based\nworks on all platforms\nbuilds the test binaries\nincludes the C++ api\ndoes not include the python functionality\nproduces libtorch.so\n\n\nthe setup.py build\n\n\ncompiles the python functionality\ncalls into the CMake build to build libtorch.so\nproduces _C.so, which has a dependency on libtorch.so\n\nIn terms of code changes, this mostly means extending the cmake build to support the full variety of environments and platforms. There are also a small number of changes related to the fact that there are now two shared objects - in particular, windows requires annotating some symbols with dllimport/dllexport, and doesn't allow exposing thread_local globals directly.", "body": "Prior to this diff, there have been two ways of compiling the bulk of the torch codebase. There was no interaction between them - you had to pick one or the other.\r\n\r\n1) with setup.py. This method\r\n- used the setuptools C extension functionality\r\n- worked on all platforms\r\n- did not build test_jit/test_api binaries\r\n- did not include the C++ api\r\n- always included python functionality\r\n- produced _C.so\r\n\r\n2) with cpp_build. This method\r\n- used CMake\r\n- did not support Windows or ROCM\r\n- was capable of building the test binaries\r\n- included the C++ api\r\n- did not build the python functionality\r\n- produced libtorch.so\r\n\r\nThis diff combines the two.\r\n\r\n1) cpp_build/CMakeLists.txt has become torch/CMakeLists.txt. This build\r\n- is CMake-based\r\n- works on all platforms\r\n- builds the test binaries\r\n- includes the C++ api\r\n- does not include the python functionality\r\n- produces libtorch.so\r\n\r\n2) the setup.py build\r\n- compiles the python functionality\r\n- calls into the CMake build to build libtorch.so\r\n- produces _C.so, which has a dependency on libtorch.so\r\n\r\nIn terms of code changes, this mostly means extending the cmake build to support the full variety of environments and platforms. There are also a small number of changes related to the fact that there are now two shared objects - in particular, windows requires annotating some symbols with dllimport/dllexport, and doesn't allow exposing thread_local globals directly.\r\n"}