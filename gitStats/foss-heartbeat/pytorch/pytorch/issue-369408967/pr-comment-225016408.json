{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/225016408", "pull_request_review_id": 164522816, "id": 225016408, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNTAxNjQwOA==", "diff_hunk": "@@ -537,11 +537,24 @@ namespace {\n            ++a, ++b) {\n         auto param_from = *a, param_to = *b;\n         AT_ASSERTM(param_from.type() == param_to.type(), \"parameter types mismatch\");\n-        param_to.copy_(param_from.view_as(param_to));\n+        if (copy) {\n+            param_to.copy_(param_from.view_as(param_to));\n+        } else {\n+            param_from.resize_as_(param_to);", "path": "aten/src/ATen/native/cudnn/RNN.cpp", "position": 17, "original_position": 17, "commit_id": "5e57eee8daae7e0860b4c911de9a0eecfb287419", "original_commit_id": "5e57eee8daae7e0860b4c911de9a0eecfb287419", "user": {"login": "ngimel", "id": 15841449, "node_id": "MDQ6VXNlcjE1ODQxNDQ5", "avatar_url": "https://avatars3.githubusercontent.com/u/15841449?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ngimel", "html_url": "https://github.com/ngimel", "followers_url": "https://api.github.com/users/ngimel/followers", "following_url": "https://api.github.com/users/ngimel/following{/other_user}", "gists_url": "https://api.github.com/users/ngimel/gists{/gist_id}", "starred_url": "https://api.github.com/users/ngimel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ngimel/subscriptions", "organizations_url": "https://api.github.com/users/ngimel/orgs", "repos_url": "https://api.github.com/users/ngimel/repos", "events_url": "https://api.github.com/users/ngimel/events{/privacy}", "received_events_url": "https://api.github.com/users/ngimel/received_events", "type": "User", "site_admin": false}, "body": "Same thing as going on above, except without a copy. `param_to` contains necessary size information, `param_from` contains the data and needs to be reshaped as `param_to`, rather than copied to `param_to`. `copy` branch (unchanged from before) assumes that `param_from` is viewable as `param_to`, which is as strong (or as weak) an assumption as `param_from` being resizeable as `param_to`. If the number of elements is the same (which is the case both in copy branch and view branch), the contents is guaranteed to be preserved https://pytorch.org/docs/stable/tensors.html?highlight=resize_as_#torch.Tensor.resize_.  ", "created_at": "2018-10-15T00:22:02Z", "updated_at": "2018-11-23T15:53:00Z", "html_url": "https://github.com/pytorch/pytorch/pull/12600#discussion_r225016408", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/12600", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/225016408"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/12600#discussion_r225016408"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/12600"}}, "body_html": "<p>Same thing as going on above, except without a copy. <code>param_to</code> contains necessary size information, <code>param_from</code> contains the data and needs to be reshaped as <code>param_to</code>, rather than copied to <code>param_to</code>. <code>copy</code> branch (unchanged from before) assumes that <code>param_from</code> is viewable as <code>param_to</code>, which is as strong (or as weak) an assumption as <code>param_from</code> being resizeable as <code>param_to</code>. If the number of elements is the same (which is the case both in copy branch and view branch), the contents is guaranteed to be preserved <a href=\"https://pytorch.org/docs/stable/tensors.html?highlight=resize_as_#torch.Tensor.resize\" rel=\"nofollow\">https://pytorch.org/docs/stable/tensors.html?highlight=resize_as_#torch.Tensor.resize</a>_.</p>", "body_text": "Same thing as going on above, except without a copy. param_to contains necessary size information, param_from contains the data and needs to be reshaped as param_to, rather than copied to param_to. copy branch (unchanged from before) assumes that param_from is viewable as param_to, which is as strong (or as weak) an assumption as param_from being resizeable as param_to. If the number of elements is the same (which is the case both in copy branch and view branch), the contents is guaranteed to be preserved https://pytorch.org/docs/stable/tensors.html?highlight=resize_as_#torch.Tensor.resize_.", "in_reply_to_id": 225006506}