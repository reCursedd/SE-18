{"url": "https://api.github.com/repos/pytorch/pytorch/issues/4204", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/4204/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/4204/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/4204/events", "html_url": "https://github.com/pytorch/pytorch/issues/4204", "id": 282570168, "node_id": "MDU6SXNzdWUyODI1NzAxNjg=", "number": 4204, "title": "torch.zeros for sparse matrices", "user": {"login": "mmoghimi", "id": 419486, "node_id": "MDQ6VXNlcjQxOTQ4Ng==", "avatar_url": "https://avatars3.githubusercontent.com/u/419486?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mmoghimi", "html_url": "https://github.com/mmoghimi", "followers_url": "https://api.github.com/users/mmoghimi/followers", "following_url": "https://api.github.com/users/mmoghimi/following{/other_user}", "gists_url": "https://api.github.com/users/mmoghimi/gists{/gist_id}", "starred_url": "https://api.github.com/users/mmoghimi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mmoghimi/subscriptions", "organizations_url": "https://api.github.com/users/mmoghimi/orgs", "repos_url": "https://api.github.com/users/mmoghimi/repos", "events_url": "https://api.github.com/users/mmoghimi/events{/privacy}", "received_events_url": "https://api.github.com/users/mmoghimi/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 443483881, "node_id": "MDU6TGFiZWw0NDM0ODM4ODE=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/todo", "name": "todo", "color": "c2e0c6", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "SsnL", "id": 5674597, "node_id": "MDQ6VXNlcjU2NzQ1OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5674597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SsnL", "html_url": "https://github.com/SsnL", "followers_url": "https://api.github.com/users/SsnL/followers", "following_url": "https://api.github.com/users/SsnL/following{/other_user}", "gists_url": "https://api.github.com/users/SsnL/gists{/gist_id}", "starred_url": "https://api.github.com/users/SsnL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SsnL/subscriptions", "organizations_url": "https://api.github.com/users/SsnL/orgs", "repos_url": "https://api.github.com/users/SsnL/repos", "events_url": "https://api.github.com/users/SsnL/events{/privacy}", "received_events_url": "https://api.github.com/users/SsnL/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "SsnL", "id": 5674597, "node_id": "MDQ6VXNlcjU2NzQ1OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5674597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SsnL", "html_url": "https://github.com/SsnL", "followers_url": "https://api.github.com/users/SsnL/followers", "following_url": "https://api.github.com/users/SsnL/following{/other_user}", "gists_url": "https://api.github.com/users/SsnL/gists{/gist_id}", "starred_url": "https://api.github.com/users/SsnL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SsnL/subscriptions", "organizations_url": "https://api.github.com/users/SsnL/orgs", "repos_url": "https://api.github.com/users/SsnL/repos", "events_url": "https://api.github.com/users/SsnL/events{/privacy}", "received_events_url": "https://api.github.com/users/SsnL/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 8, "created_at": "2017-12-15T22:57:58Z", "updated_at": "2018-09-06T02:46:33Z", "closed_at": "2018-09-06T02:46:33Z", "author_association": "NONE", "body_html": "<p>I\u2019m trying to use a sparse matrix in my model. The sparse matrix is fixed and not being updated. I\u2019m using a custom function for this. However, I\u2019m getting the following error when I use DataParallel. Any ideas how to solve this?</p>\n<p><code>RuntimeError: zeros is not implemented for type torch.cuda.sparse.</code></p>\n<p>And here is the code. It works if you comment out the DataParallel line.</p>\n<pre><code>import torch\n\nclass MyFunction(torch.autograd.Function):\n  def forward(self, tensor, sparse_tensor):\n    self.save_for_backward(sparse_tensor)\n    print sparse_tensor.size(), tensor.size()\n    return torch.matmul(sparse_tensor, tensor.t()).t()\n\n  def backward(self, grad_output):\n    sparse_tensor, = self.saved_tensors\n    print sparse_tensor.size(), grad_output.size()\n    return torch.matmul(sparse_tensor.t(), grad_output.t()), None\n\n\nclass MyCustomNet(torch.nn.Module):\n  def __init__(self):\n    super(MyCustomNet, self).__init__()\n    i = torch.LongTensor([[0, 1, 1],\n                          [2, 0, 2]])\n    v = torch.FloatTensor([3, 4, 5])\n    self.sparse_map = torch.nn.Parameter(torch.sparse.FloatTensor(i, v, torch.Size([2,3])))\n    print torch.sparse.FloatTensor(i, v, torch.Size([2,3])).to_dense()\n  def forward(self, x):\n    self.func = MyFunction()\n    return self.func(x, self.sparse_map)\n\nnet = MyCustomNet()\nnet.eval()\nnet.cuda()\nnet = torch.nn.DataParallel(net)\ndata = torch.autograd.Variable(torch.zeros((10, 3))).cuda()\ntarget = torch.autograd.Variable(torch.zeros((10, 2))).cuda()\n\n\nout = net(data)\nloss_fn = torch.nn.L1Loss()\nloss = loss_fn(out, target)\nloss.backward()\n\n</code></pre>", "body_text": "I\u2019m trying to use a sparse matrix in my model. The sparse matrix is fixed and not being updated. I\u2019m using a custom function for this. However, I\u2019m getting the following error when I use DataParallel. Any ideas how to solve this?\nRuntimeError: zeros is not implemented for type torch.cuda.sparse.\nAnd here is the code. It works if you comment out the DataParallel line.\nimport torch\n\nclass MyFunction(torch.autograd.Function):\n  def forward(self, tensor, sparse_tensor):\n    self.save_for_backward(sparse_tensor)\n    print sparse_tensor.size(), tensor.size()\n    return torch.matmul(sparse_tensor, tensor.t()).t()\n\n  def backward(self, grad_output):\n    sparse_tensor, = self.saved_tensors\n    print sparse_tensor.size(), grad_output.size()\n    return torch.matmul(sparse_tensor.t(), grad_output.t()), None\n\n\nclass MyCustomNet(torch.nn.Module):\n  def __init__(self):\n    super(MyCustomNet, self).__init__()\n    i = torch.LongTensor([[0, 1, 1],\n                          [2, 0, 2]])\n    v = torch.FloatTensor([3, 4, 5])\n    self.sparse_map = torch.nn.Parameter(torch.sparse.FloatTensor(i, v, torch.Size([2,3])))\n    print torch.sparse.FloatTensor(i, v, torch.Size([2,3])).to_dense()\n  def forward(self, x):\n    self.func = MyFunction()\n    return self.func(x, self.sparse_map)\n\nnet = MyCustomNet()\nnet.eval()\nnet.cuda()\nnet = torch.nn.DataParallel(net)\ndata = torch.autograd.Variable(torch.zeros((10, 3))).cuda()\ntarget = torch.autograd.Variable(torch.zeros((10, 2))).cuda()\n\n\nout = net(data)\nloss_fn = torch.nn.L1Loss()\nloss = loss_fn(out, target)\nloss.backward()", "body": "I\u2019m trying to use a sparse matrix in my model. The sparse matrix is fixed and not being updated. I\u2019m using a custom function for this. However, I\u2019m getting the following error when I use DataParallel. Any ideas how to solve this?\r\n\r\n`RuntimeError: zeros is not implemented for type torch.cuda.sparse.`\r\n\r\nAnd here is the code. It works if you comment out the DataParallel line.\r\n\r\n```\r\nimport torch\r\n\r\nclass MyFunction(torch.autograd.Function):\r\n  def forward(self, tensor, sparse_tensor):\r\n    self.save_for_backward(sparse_tensor)\r\n    print sparse_tensor.size(), tensor.size()\r\n    return torch.matmul(sparse_tensor, tensor.t()).t()\r\n\r\n  def backward(self, grad_output):\r\n    sparse_tensor, = self.saved_tensors\r\n    print sparse_tensor.size(), grad_output.size()\r\n    return torch.matmul(sparse_tensor.t(), grad_output.t()), None\r\n\r\n\r\nclass MyCustomNet(torch.nn.Module):\r\n  def __init__(self):\r\n    super(MyCustomNet, self).__init__()\r\n    i = torch.LongTensor([[0, 1, 1],\r\n                          [2, 0, 2]])\r\n    v = torch.FloatTensor([3, 4, 5])\r\n    self.sparse_map = torch.nn.Parameter(torch.sparse.FloatTensor(i, v, torch.Size([2,3])))\r\n    print torch.sparse.FloatTensor(i, v, torch.Size([2,3])).to_dense()\r\n  def forward(self, x):\r\n    self.func = MyFunction()\r\n    return self.func(x, self.sparse_map)\r\n\r\nnet = MyCustomNet()\r\nnet.eval()\r\nnet.cuda()\r\nnet = torch.nn.DataParallel(net)\r\ndata = torch.autograd.Variable(torch.zeros((10, 3))).cuda()\r\ntarget = torch.autograd.Variable(torch.zeros((10, 2))).cuda()\r\n\r\n\r\nout = net(data)\r\nloss_fn = torch.nn.L1Loss()\r\nloss = loss_fn(out, target)\r\nloss.backward()\r\n\r\n```"}