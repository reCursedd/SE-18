{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/109424588", "pull_request_review_id": 30524577, "id": 109424588, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwOTQyNDU4OA==", "diff_hunk": "@@ -0,0 +1,60 @@\n+import torch\n+from torch.autograd import Function\n+\n+\n+class Bilinear(Function):\n+\n+    def forward(self, input1, input2, weight, bias=None):\n+        self.save_for_backward(input1, input2, weight, bias)\n+\n+        output = input1.new()", "path": "torch/nn/_functions/bilinear.py", "position": null, "original_position": 10, "commit_id": "736a4dd03f271dda9929b38228b51789e29e75e2", "original_commit_id": "a04f32ee678955cb50eb267fbf7ba73126e57cc9", "user": {"login": "soumith", "id": 1310570, "node_id": "MDQ6VXNlcjEzMTA1NzA=", "avatar_url": "https://avatars0.githubusercontent.com/u/1310570?v=4", "gravatar_id": "", "url": "https://api.github.com/users/soumith", "html_url": "https://github.com/soumith", "followers_url": "https://api.github.com/users/soumith/followers", "following_url": "https://api.github.com/users/soumith/following{/other_user}", "gists_url": "https://api.github.com/users/soumith/gists{/gist_id}", "starred_url": "https://api.github.com/users/soumith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/soumith/subscriptions", "organizations_url": "https://api.github.com/users/soumith/orgs", "repos_url": "https://api.github.com/users/soumith/repos", "events_url": "https://api.github.com/users/soumith/events{/privacy}", "received_events_url": "https://api.github.com/users/soumith/received_events", "type": "User", "site_admin": false}, "body": "in the new nn (i.e. not legacy nn), we do not need to use temporary buffers.\r\nAlso, torch.mm resizes it's output, so buf doesn't need to be pre-resized\r\nSo this function can be reduced to:\r\n\r\n```\r\nself.save_for_backward(input1, input2, weight, bias)\r\n\r\noutput = input1.new(input1.size(0), weight.size(0))\r\nbuf = input1.new()\r\n\r\n# compute output scores:\r\nfor k, w in enumerate(weight):\r\n    torch.mm(input1, w, out=buf)\r\n    buf.mul_(input2)\r\n    torch.sum(buf, 1, out=output.narrow(1, k, 1))\r\nif bias is not None:\r\n    output.add_(bias.expand_as(output))\r\nreturn output\r\n```", "created_at": "2017-04-03T14:04:07Z", "updated_at": "2018-11-23T15:32:59Z", "html_url": "https://github.com/pytorch/pytorch/pull/1146#discussion_r109424588", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/1146", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/109424588"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/1146#discussion_r109424588"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/1146"}}, "body_html": "<p>in the new nn (i.e. not legacy nn), we do not need to use temporary buffers.<br>\nAlso, torch.mm resizes it's output, so buf doesn't need to be pre-resized<br>\nSo this function can be reduced to:</p>\n<pre><code>self.save_for_backward(input1, input2, weight, bias)\n\noutput = input1.new(input1.size(0), weight.size(0))\nbuf = input1.new()\n\n# compute output scores:\nfor k, w in enumerate(weight):\n    torch.mm(input1, w, out=buf)\n    buf.mul_(input2)\n    torch.sum(buf, 1, out=output.narrow(1, k, 1))\nif bias is not None:\n    output.add_(bias.expand_as(output))\nreturn output\n</code></pre>", "body_text": "in the new nn (i.e. not legacy nn), we do not need to use temporary buffers.\nAlso, torch.mm resizes it's output, so buf doesn't need to be pre-resized\nSo this function can be reduced to:\nself.save_for_backward(input1, input2, weight, bias)\n\noutput = input1.new(input1.size(0), weight.size(0))\nbuf = input1.new()\n\n# compute output scores:\nfor k, w in enumerate(weight):\n    torch.mm(input1, w, out=buf)\n    buf.mul_(input2)\n    torch.sum(buf, 1, out=output.narrow(1, k, 1))\nif bias is not None:\n    output.add_(bias.expand_as(output))\nreturn output"}