{"url": "https://api.github.com/repos/pytorch/pytorch/issues/12069", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/12069/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/12069/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/12069/events", "html_url": "https://github.com/pytorch/pytorch/issues/12069", "id": 363767735, "node_id": "MDU6SXNzdWUzNjM3Njc3MzU=", "number": 12069, "title": "Stop using make_intrusive directly; provide some make_tensor", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-09-25T21:10:21Z", "updated_at": "2018-09-25T21:10:21Z", "closed_at": null, "author_association": "CONTRIBUTOR", "body_html": "<p>Right now, if you are working with the lowest level of abstraction and you want to <em>create</em> a tensor, the current idiom is something like <code>Tensor(c10::make_intrusive&lt;SparseTensorImpl&gt;(some, args, ...))</code>. On further reflection, this is actually a bit strange, because the constructor you're using in this case is <code>Tensor(c10::intrusive_ptr&lt;TensorImpl, UndefinedTensorImpl&gt;)</code> and it's not obvious that <code>c10::intrusive_ptr&lt;SparseTensorImpl&gt;</code> is convertible to this. (It is, courtesy of <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"357041805\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/11260\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/pytorch/pytorch/pull/11260/hovercard\" href=\"https://github.com/pytorch/pytorch/pull/11260\">#11260</a>.)</p>\n<p>But what we really should do is just come up with a new constructor which handles all of this intrusive pointer under the hood. Something like:</p>\n<pre><code>template &lt;typename T, typename... Args&gt;\nTensor make_tensor(Args... args) {\n  return Tensor(c10::make_intrusive&lt;T&gt;(std::forward(args)));\n}\n</code></pre>\n<p>Then the user visible interface doesn't require looking into these conversions.</p>\n<p>cc <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=3768583\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/gchanan\">@gchanan</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=2373925\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/smessmer\">@smessmer</a></p>\n<p>This should be easy to do, if you want to attempt this task, CC me and I can review.</p>", "body_text": "Right now, if you are working with the lowest level of abstraction and you want to create a tensor, the current idiom is something like Tensor(c10::make_intrusive<SparseTensorImpl>(some, args, ...)). On further reflection, this is actually a bit strange, because the constructor you're using in this case is Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>) and it's not obvious that c10::intrusive_ptr<SparseTensorImpl> is convertible to this. (It is, courtesy of #11260.)\nBut what we really should do is just come up with a new constructor which handles all of this intrusive pointer under the hood. Something like:\ntemplate <typename T, typename... Args>\nTensor make_tensor(Args... args) {\n  return Tensor(c10::make_intrusive<T>(std::forward(args)));\n}\n\nThen the user visible interface doesn't require looking into these conversions.\ncc @gchanan @smessmer\nThis should be easy to do, if you want to attempt this task, CC me and I can review.", "body": "Right now, if you are working with the lowest level of abstraction and you want to *create* a tensor, the current idiom is something like `Tensor(c10::make_intrusive<SparseTensorImpl>(some, args, ...))`. On further reflection, this is actually a bit strange, because the constructor you're using in this case is `Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>)` and it's not obvious that `c10::intrusive_ptr<SparseTensorImpl>` is convertible to this. (It is, courtesy of #11260.)\r\n\r\nBut what we really should do is just come up with a new constructor which handles all of this intrusive pointer under the hood. Something like:\r\n\r\n```\r\ntemplate <typename T, typename... Args>\r\nTensor make_tensor(Args... args) {\r\n  return Tensor(c10::make_intrusive<T>(std::forward(args)));\r\n}\r\n```\r\n\r\nThen the user visible interface doesn't require looking into these conversions.\r\n\r\ncc @gchanan @smessmer \r\n\r\nThis should be easy to do, if you want to attempt this task, CC me and I can review."}