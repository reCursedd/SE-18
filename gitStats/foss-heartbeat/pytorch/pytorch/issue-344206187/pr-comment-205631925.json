{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/205631925", "pull_request_review_id": 140943788, "id": 205631925, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTYzMTkyNQ==", "diff_hunk": "@@ -287,42 +326,59 @@ struct TORCH_API NumberType : public Type {\n   static const TypeKind Kind = TypeKind::NumberType;\n   // global singleton\n   static TypePtr get();\n+private:\n+  NumberType()\n+  : Type(TypeKind::NumberType) {}\n };\n \n+struct FloatType;\n+using FloatTypePtr = std::shared_ptr<FloatType>;\n // This node represents a Python float number value\n struct TORCH_API FloatType : public Type {\n-  FloatType()\n-  : Type(TypeKind::FloatType) {}\n+  template<typename ... T>\n+  static FloatTypePtr create( T&& ... all ) {\n+    return FloatTypePtr(new FloatType( std::forward<T>(all)... ));\n+  }\n   bool operator==(const Type& rhs) const override {\n     return rhs.kind() == kind();\n   }\n   std::string str() const override {\n     return \"float\";\n   }\n-  bool isSubtypeOf(const Type& rhs) const override {\n-    return *this == rhs || rhs.kind() == TypeKind::NumberType;\n+  bool isSubtypeOf(const TypePtr rhs) const override {\n+    return *this == *rhs || rhs->kind() == TypeKind::NumberType;\n   }\n   static const TypeKind Kind = TypeKind::FloatType;\n   // global singleton\n   static TypePtr get();\n+private:\n+  FloatType()\n+  : Type(TypeKind::FloatType) {}\n };\n \n+struct IntType;\n+using IntTypePtr = std::shared_ptr<IntType>;\n // This node represents a Python int number value\n struct TORCH_API IntType : public Type {\n-  IntType()\n-  : Type(TypeKind::IntType) {}\n+  template<typename ... T>\n+  static IntTypePtr create( T&& ... all ) {\n+    return IntTypePtr(new IntType( std::forward<T>(all)... ));\n+  }\n   bool operator==(const Type& rhs) const override {\n     return rhs.kind() == kind();\n   }\n   std::string str() const override {\n     return \"int\";\n   }\n-  bool isSubtypeOf(const Type& rhs) const override {\n-    return *this == rhs || rhs.kind() == TypeKind::NumberType;\n+  bool isSubtypeOf(const TypePtr rhs) const override {", "path": "torch/csrc/jit/type.h", "position": 343, "original_position": 343, "commit_id": "301cf0d6dafe548c80dae665b3f2bb1fd9ef77f4", "original_commit_id": "301cf0d6dafe548c80dae665b3f2bb1fd9ef77f4", "user": {"login": "smessmer", "id": 2373925, "node_id": "MDQ6VXNlcjIzNzM5MjU=", "avatar_url": "https://avatars3.githubusercontent.com/u/2373925?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smessmer", "html_url": "https://github.com/smessmer", "followers_url": "https://api.github.com/users/smessmer/followers", "following_url": "https://api.github.com/users/smessmer/following{/other_user}", "gists_url": "https://api.github.com/users/smessmer/gists{/gist_id}", "starred_url": "https://api.github.com/users/smessmer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smessmer/subscriptions", "organizations_url": "https://api.github.com/users/smessmer/orgs", "repos_url": "https://api.github.com/users/smessmer/repos", "events_url": "https://api.github.com/users/smessmer/events{/privacy}", "received_events_url": "https://api.github.com/users/smessmer/received_events", "type": "User", "site_admin": false}, "body": "Passing as `const TypePtr&` might be a bit faster because it doesn't need to increase and decrease the refcount. Also in other places where you're only reading it.", "created_at": "2018-07-26T23:33:22Z", "updated_at": "2018-11-23T15:48:17Z", "html_url": "https://github.com/pytorch/pytorch/pull/9786#discussion_r205631925", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/9786", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/205631925"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/9786#discussion_r205631925"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/9786"}}, "body_html": "<p>Passing as <code>const TypePtr&amp;</code> might be a bit faster because it doesn't need to increase and decrease the refcount. Also in other places where you're only reading it.</p>", "body_text": "Passing as const TypePtr& might be a bit faster because it doesn't need to increase and decrease the refcount. Also in other places where you're only reading it."}