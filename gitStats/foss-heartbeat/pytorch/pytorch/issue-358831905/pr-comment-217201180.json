{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/217201180", "pull_request_review_id": 154858490, "id": 217201180, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNzIwMTE4MA==", "diff_hunk": "@@ -1734,6 +1734,53 @@ struct to_ir {\n     return emitSlice(loc, sliceable, maybe_dim, slice_exp);\n   }\n \n+  Value* emitTupleIndex(const SourceRange& loc,\n+      Value * tuple_val,\n+      Value * idx_val) {\n+    auto throw_integer_constants_error = [loc]() {\n+      throw ErrorReport(loc)\n+        << \"Indexing on tuples only supported with integer constants\";\n+    };\n+\n+    if (!idx_val->type()->isSubtypeOf(IntType::get())) {\n+      throw_integer_constants_error();\n+    }\n+\n+    int64_t index;\n+    if (idx_val->node()->kind() == prim::Constant) {", "path": "torch/csrc/jit/script/compiler.cpp", "position": null, "original_position": 17, "commit_id": "b21e0e10937df577e0f3fb71aded15744aabbf2c", "original_commit_id": "7f2ac45f8541183ee0d832910a7a0559538c476d", "user": {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, "body": "Because it is fragile to do it only here -- it only gets tested along this codepath, so it is more likely to be rare and wrong. It also does not benefit other locations where someone expects a -1 to be an actual constant while type checking. \r\n\r\nAlso, this code fails to check that the nested constant is an integer, and the call to `->i` will hard-fail when it is not. ", "created_at": "2018-09-12T21:49:26Z", "updated_at": "2018-11-23T15:51:13Z", "html_url": "https://github.com/pytorch/pytorch/pull/11492#discussion_r217201180", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/11492", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/217201180"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/11492#discussion_r217201180"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/11492"}}, "body_html": "<p>Because it is fragile to do it only here -- it only gets tested along this codepath, so it is more likely to be rare and wrong. It also does not benefit other locations where someone expects a -1 to be an actual constant while type checking.</p>\n<p>Also, this code fails to check that the nested constant is an integer, and the call to <code>-&gt;i</code> will hard-fail when it is not.</p>", "body_text": "Because it is fragile to do it only here -- it only gets tested along this codepath, so it is more likely to be rare and wrong. It also does not benefit other locations where someone expects a -1 to be an actual constant while type checking.\nAlso, this code fails to check that the nested constant is an integer, and the call to ->i will hard-fail when it is not.", "in_reply_to_id": 217125045}