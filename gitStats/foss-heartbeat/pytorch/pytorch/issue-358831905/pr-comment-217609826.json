{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/217609826", "pull_request_review_id": 155363111, "id": 217609826, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNzYwOTgyNg==", "diff_hunk": "@@ -32,26 +70,12 @@ static void VisitNode(Node* n, Node* insert_point) {\n     return;\n   }\n \n-  // make any TupleUnpack dead by undoing TupleUnpack(TupleConstruct())\n-  if(n->kind() == prim::TupleUnpack) {\n-    auto construct = n->input()->node();\n-    // note: removing these asserts changes this pass from a complete lowering\n-    // pass to one that removes tuples when possible. When tuples are first-class\n-    // in the interpreter, we should still run this pass to remove extraneous uses\n-    JIT_ASSERTM(construct->kind() == prim::TupleConstruct, \"tuple unpack not matched to tuple construct\");\n-    for(size_t i = 0; i < n->outputs().size(); ++i) {\n-      n->outputs()[i]->replaceAllUsesWith(construct->inputs()[i]);\n-    }\n-    return;\n-  }\n+  // note: changing the second argument to false changes this pass from a complete lowering\n+  // pass to one that removes tuples when possible. When tuples are first-class\n+  // in the interpreter, we should still run this pass to remove extraneous uses\n \n-  // undo TupleIndex[index=i](TupleConstruct())\n-  if (n->kind() == prim::TupleIndex) {\n-    auto construct = n->inputs().at(0)->node();\n-    JIT_ASSERTM(construct->kind() == prim::TupleConstruct, \"tuple index not matched to tuple construct\");\n-    auto idx = n->i(attr::index);\n-    n->output()->replaceAllUsesWith(construct->inputs()[idx]);\n-    return;\n+  if (removeTupleNodes(n, /*must_remove_tuples*/true)) {\n+    return; //tuple operator found", "path": "torch/csrc/jit/passes/lower_tuples.cpp", "position": null, "original_position": 85, "commit_id": "b21e0e10937df577e0f3fb71aded15744aabbf2c", "original_commit_id": "8e10ca771e946ddfd45775c56017fe483da275e0", "user": {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, "body": "Can we use:\r\n```\r\nif(n->kind() == TupleConstruct || TupleIndex || TupleSlice)\r\n   removeTupleNodes(n, true);\r\n   return\r\n}\r\n```\r\nThis more closely models the intent: that for these 3 nodes we handle them specially.\r\nIn the code as-is, you need to know that the combination of setting must_remove_tuples, and the return value ensures that you will hit the return.", "created_at": "2018-09-14T06:17:34Z", "updated_at": "2018-11-23T15:51:22Z", "html_url": "https://github.com/pytorch/pytorch/pull/11492#discussion_r217609826", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/11492", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/217609826"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/11492#discussion_r217609826"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/11492"}}, "body_html": "<p>Can we use:</p>\n<pre><code>if(n-&gt;kind() == TupleConstruct || TupleIndex || TupleSlice)\n   removeTupleNodes(n, true);\n   return\n}\n</code></pre>\n<p>This more closely models the intent: that for these 3 nodes we handle them specially.<br>\nIn the code as-is, you need to know that the combination of setting must_remove_tuples, and the return value ensures that you will hit the return.</p>", "body_text": "Can we use:\nif(n->kind() == TupleConstruct || TupleIndex || TupleSlice)\n   removeTupleNodes(n, true);\n   return\n}\n\nThis more closely models the intent: that for these 3 nodes we handle them specially.\nIn the code as-is, you need to know that the combination of setting must_remove_tuples, and the return value ensures that you will hit the return."}