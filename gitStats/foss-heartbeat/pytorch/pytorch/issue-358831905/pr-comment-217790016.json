{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/217790016", "pull_request_review_id": 155594760, "id": 217790016, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNzc5MDAxNg==", "diff_hunk": "@@ -35,12 +35,37 @@ TORCH_API at::optional<IValue> toIValue(Value* v);\n \n // if a value is a constant then try to turn into type T using the\n // same rules as the interpreter\n+// use DEFINE_CONSTANT_AS to define a new case\n template<typename T>\n-at::optional<T> constant_as(Value* v) {\n-  if(auto ivalue = toIValue(v)) {\n-    return ivalue->to<T>();\n-  }\n-  return at::nullopt;\n+at::optional<T> constant_as(Value* v) = delete;\n+\n+// without isName() exception will be thrown if the IValue is the wrong type\n+#define DEFINE_CONSTANT_AS(type, name)                                      \\\n+template<>                                                                  \\\n+inline at::optional<type> constant_as(Value* v) {                           \\\n+  if (at::optional<IValue> ivalue = toIValue(v)) {                          \\\n+    if (ivalue->is ## name()) {                                             \\\n+      return ivalue->to<type>();                                            \\\n+    }                                                                       \\\n+  }                                                                         \\\n+  return at::nullopt;                                                       \\\n }\n \n+DEFINE_CONSTANT_AS(at::Tensor, Tensor)", "path": "torch/csrc/jit/constants.h", "position": null, "original_position": 25, "commit_id": "b21e0e10937df577e0f3fb71aded15744aabbf2c", "original_commit_id": "8e10ca771e946ddfd45775c56017fe483da275e0", "user": {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, "body": "getIntListAttribute is dead, let's just delete it. We should keep the convention that the optional return indicates whether the value was a constant, and not whether it was a constant of the type you wanted. We shouldn't encourage developers using polymorphic constants as it will cause people to miss cases where a constant can have a different type.", "created_at": "2018-09-14T17:41:32Z", "updated_at": "2018-11-23T15:51:24Z", "html_url": "https://github.com/pytorch/pytorch/pull/11492#discussion_r217790016", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/11492", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/217790016"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/11492#discussion_r217790016"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/11492"}}, "body_html": "<p>getIntListAttribute is dead, let's just delete it. We should keep the convention that the optional return indicates whether the value was a constant, and not whether it was a constant of the type you wanted. We shouldn't encourage developers using polymorphic constants as it will cause people to miss cases where a constant can have a different type.</p>", "body_text": "getIntListAttribute is dead, let's just delete it. We should keep the convention that the optional return indicates whether the value was a constant, and not whether it was a constant of the type you wanted. We shouldn't encourage developers using polymorphic constants as it will cause people to miss cases where a constant can have a different type.", "in_reply_to_id": 217611682}