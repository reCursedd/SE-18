{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/223485301", "pull_request_review_id": 162619376, "id": 223485301, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyMzQ4NTMwMQ==", "diff_hunk": "@@ -1761,6 +1778,67 @@ struct to_ir {\n     return emitSlice(loc, sliceable, maybe_dim, slice_exp);\n   }\n \n+  int64_t getTupleIndexVal(const SourceRange& loc,\n+    const TupleTypePtr& tuple_type,\n+      Value * idx_val,\n+      bool allow_out_of_bounds) {\n+\n+    int64_t index;\n+    at::optional<IValue> ivalue = toIValue(idx_val);\n+    if (ivalue && ivalue->isInt()) {\n+      index = ivalue->to<int64_t>();\n+    } else {\n+      throw ErrorReport(loc)\n+        << \"tuple indices must be integer constants\";\n+    }\n+\n+    // set index to be positive to simplify logic in runtime\n+    int64_t adj_index = index;\n+    int64_t tuple_len = tuple_type->elements().size();\n+    if (index < 0) {\n+      adj_index = tuple_len + index;\n+    }\n+    if (!allow_out_of_bounds && (adj_index >= tuple_len || adj_index < 0)) {\n+      throw ErrorReport(loc)\n+        << \"Tuple index out of range. Tuple is length \" << tuple_len\n+        << \" and index is \" << index;\n+    }\n+    return adj_index;\n+  }\n+\n+  Value* emitTupleIndex(const SourceRange& loc,\n+      Value * tuple_val,\n+      Value * idx_val) {\n+    auto tuple_typ = tuple_val->type()->cast<TupleType>();\n+    auto adj_index = getTupleIndexVal(loc, tuple_typ, idx_val, /*out_of_bounds_error*/false);\n+    return graph->insertNode(\n+        graph->createTupleIndex(tuple_val, adj_index))->output();\n+  }\n+\n+  Value* emitTupleSlice(const SourceRange& loc,\n+      const NamedValue& tuple_val,\n+      const NamedValue& beg_val,\n+      const at::optional<NamedValue&> end_val,\n+      const NamedValue& step_val) {\n+    auto tuple_type = tuple_val.value(*graph)->type()->expect<TupleType>();\n+    int64_t beg = getTupleIndexVal(loc, tuple_type, beg_val.value(*graph), /*allow_out_of_bounds*/true);\n+    int64_t step = *constant_as<int64_t>(step_val.value(*graph));\n+    int64_t end;\n+    int64_t tuple_len = tuple_type->elements().size();\n+    if (end_val) {\n+      end = getTupleIndexVal(loc, tuple_type, end_val->value(*graph), true);\n+    } else {\n+      end = tuple_len;\n+    }\n+    // slicing does not throw out of bounds errors\n+    end = std::min(std::max((int64_t)0, end), tuple_len);\n+    beg = std::min(std::max((int64_t)0, beg), tuple_len);\n+", "path": "torch/csrc/jit/script/compiler.cpp", "position": 147, "original_position": 163, "commit_id": "b21e0e10937df577e0f3fb71aded15744aabbf2c", "original_commit_id": "03b972bd549702e5d6eec4929dd5b23541e770c6", "user": {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, "body": "Pretty sure this is missing a check that `beg <= end`, and that when you try it, the compiler will enter an infinite loop.", "created_at": "2018-10-08T20:18:49Z", "updated_at": "2018-11-23T15:52:37Z", "html_url": "https://github.com/pytorch/pytorch/pull/11492#discussion_r223485301", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/11492", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/223485301"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/11492#discussion_r223485301"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/11492"}}, "body_html": "<p>Pretty sure this is missing a check that <code>beg &lt;= end</code>, and that when you try it, the compiler will enter an infinite loop.</p>", "body_text": "Pretty sure this is missing a check that beg <= end, and that when you try it, the compiler will enter an infinite loop."}