{"url": "https://api.github.com/repos/pytorch/pytorch/issues/12006", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/12006/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/12006/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/12006/events", "html_url": "https://github.com/pytorch/pytorch/issues/12006", "id": 363064888, "node_id": "MDU6SXNzdWUzNjMwNjQ4ODg=", "number": 12006, "title": "BN gets dramatically slow when batch_size exceeds a threshold", "user": {"login": "sundw2014", "id": 12440834, "node_id": "MDQ6VXNlcjEyNDQwODM0", "avatar_url": "https://avatars1.githubusercontent.com/u/12440834?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sundw2014", "html_url": "https://github.com/sundw2014", "followers_url": "https://api.github.com/users/sundw2014/followers", "following_url": "https://api.github.com/users/sundw2014/following{/other_user}", "gists_url": "https://api.github.com/users/sundw2014/gists{/gist_id}", "starred_url": "https://api.github.com/users/sundw2014/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sundw2014/subscriptions", "organizations_url": "https://api.github.com/users/sundw2014/orgs", "repos_url": "https://api.github.com/users/sundw2014/repos", "events_url": "https://api.github.com/users/sundw2014/events{/privacy}", "received_events_url": "https://api.github.com/users/sundw2014/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 443484050, "node_id": "MDU6TGFiZWw0NDM0ODQwNTA=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/medium%20priority", "name": "medium priority", "color": "fbca04", "default": false}, {"id": 679952992, "node_id": "MDU6TGFiZWw2Nzk5NTI5OTI=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/performance", "name": "performance", "color": "f9d0c4", "default": false}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2018-09-24T09:10:33Z", "updated_at": "2018-09-28T07:58:11Z", "closed_at": null, "author_association": "CONTRIBUTOR", "body_html": "<h2>Issue description</h2>\n<p>I use <code>torch.nn.BatchNorm1d</code> in my code. When the batchsize of the input exceeds a threshold, BN gets very slow. This problem can be produced on my machine with the code (test_bn.py) provided below.</p>\n<p>For example, in the following output I test it with input of size (5x20000, 256), (6x20000, 256), (7x20000, 256) and (8x20000, 256). The magnitude of the running time changes after 6.</p>\n<div class=\"highlight highlight-source-shell\"><pre><span class=\"pl-k\">~</span>$ CUDA_VISIBLE_DEVICES=5 python test_bn.py 5\nforward: 0.007s\nbackward: 0.019s\ntotal: 0.026s\n<span class=\"pl-k\">~</span>$ CUDA_VISIBLE_DEVICES=5 python test_bn.py 6\nforward: 0.007s\nbackward: 0.022s\ntotal: 0.030s\n<span class=\"pl-k\">~</span>$ CUDA_VISIBLE_DEVICES=5 python test_bn.py 7\nforward: 0.135s\nbackward: 0.102s\ntotal: 0.237s\n<span class=\"pl-k\">~</span>$ CUDA_VISIBLE_DEVICES=5 python test_bn.py 8\nforward: 0.155s\nbackward: 0.117s\ntotal: 0.271s</pre></div>\n<h2>Code example</h2>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-c\"><span class=\"pl-c\">#</span> test_bn.py</span>\n<span class=\"pl-k\">import</span> torch\n<span class=\"pl-k\">import</span> time\n<span class=\"pl-k\">import</span> sys\n\nbs <span class=\"pl-k\">=</span> <span class=\"pl-c1\">int</span>(sys.argv[<span class=\"pl-c1\">1</span>])\nnum_features <span class=\"pl-k\">=</span> <span class=\"pl-c1\">256</span>\n\nshape <span class=\"pl-k\">=</span> torch.Size((bs <span class=\"pl-k\">*</span> <span class=\"pl-c1\">20000</span>, num_features))\n<span class=\"pl-c1\">input</span> <span class=\"pl-k\">=</span> torch.cuda.FloatTensor(shape)\ntorch.randn(shape, <span class=\"pl-v\">out</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">input</span>)\n<span class=\"pl-c1\">input</span>.requires_grad <span class=\"pl-k\">=</span> <span class=\"pl-c1\">True</span>\n\nbn <span class=\"pl-k\">=</span> torch.nn.BatchNorm1d(num_features, <span class=\"pl-v\">eps</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">1e-05</span>, <span class=\"pl-v\">momentum</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">0.1</span>, <span class=\"pl-v\">affine</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>, <span class=\"pl-v\">track_running_stats</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>)\nbn.cuda()\n\nN <span class=\"pl-k\">=</span> <span class=\"pl-c1\">30</span>\nforward_time <span class=\"pl-k\">=</span> <span class=\"pl-c1\">0</span>\nbackward_time <span class=\"pl-k\">=</span> <span class=\"pl-c1\">0</span>\n<span class=\"pl-k\">for</span> i <span class=\"pl-k\">in</span> <span class=\"pl-c1\">range</span>(N):\n    torch.cuda.synchronize()\n    start <span class=\"pl-k\">=</span> time.time()\n    output <span class=\"pl-k\">=</span> bn(<span class=\"pl-c1\">input</span>)\n    output <span class=\"pl-k\">=</span> output.mean()\n    torch.cuda.synchronize()\n    forward_time <span class=\"pl-k\">+=</span> time.time() <span class=\"pl-k\">-</span> start\n\n    torch.cuda.synchronize()\n    start <span class=\"pl-k\">=</span> time.time()\n    output.backward()\n    torch.cuda.synchronize()\n    backward_time <span class=\"pl-k\">+=</span> time.time() <span class=\"pl-k\">-</span> start\n\n<span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>forward: <span class=\"pl-c1\">%f</span><span class=\"pl-pds\">'</span></span>, forward_time <span class=\"pl-k\">/</span> N)\n<span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>backward: <span class=\"pl-c1\">%f</span><span class=\"pl-pds\">'</span></span>, backward_time <span class=\"pl-k\">/</span> N)\n<span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>total: <span class=\"pl-c1\">%f</span><span class=\"pl-pds\">'</span></span>, (forward_time <span class=\"pl-k\">+</span> backward_time) <span class=\"pl-k\">/</span> N)</pre></div>\n<h2>System Info</h2>\n<p>Collecting environment information...<br>\nPyTorch version: 1.0.0.dev20180921<br>\nIs debug build: No<br>\nCUDA used to build PyTorch: 9.0.176</p>\n<p>OS: Ubuntu 16.04.5 LTS<br>\nGCC version: (Ubuntu 5.4.0-6ubuntu1~16.04.9) 5.4.0 20160609<br>\nCMake version: version 3.6.3</p>\n<p>Python version: 3.5<br>\nIs CUDA available: Yes<br>\nCUDA runtime version: 8.0.44<br>\nGPU models and configuration:<br>\nGPU 0: TITAN X (Pascal)<br>\nGPU 1: TITAN X (Pascal)<br>\nGPU 2: TITAN X (Pascal)<br>\nGPU 3: TITAN X (Pascal)<br>\nGPU 4: TITAN X (Pascal)<br>\nGPU 5: TITAN X (Pascal)<br>\nGPU 6: TITAN X (Pascal)<br>\nGPU 7: TITAN X (Pascal)</p>\n<p>Nvidia driver version: 384.111<br>\ncuDNN version: Probably one of the following:<br>\n/usr/local/MATLAB/R2016a/bin/glnxa64/libcudnn.so.7.0.64<br>\n/usr/local/bak-cuda-9.0/lib64/libcudnn.so<br>\n/usr/local/bak-cuda-9.0/lib64/libcudnn.so.7<br>\n/usr/local/bak-cuda-9.0/lib64/libcudnn.so.7.0.5<br>\n/usr/local/bak-cuda-9.0/lib64/libcudnn_static.a<br>\n/usr/local/bak-cuda-9.0/targets/x86_64-linux/lib/libcudnn.so<br>\n/usr/local/bak-cuda-9.0/targets/x86_64-linux/lib/libcudnn.so.7<br>\n/usr/local/bak-cuda-9.0/targets/x86_64-linux/lib/libcudnn.so.7.0.5<br>\n/usr/local/bak-cuda-9.0/targets/x86_64-linux/lib/libcudnn_static.a<br>\n/usr/local/cuda-8.0/lib64/libcudnn.so<br>\n/usr/local/cuda-8.0/lib64/libcudnn.so.7<br>\n/usr/local/cuda-8.0/lib64/libcudnn.so.7.0.5<br>\n/usr/local/cuda-8.0/lib64/libcudnn_static.a<br>\n/usr/local/lib/libcudnn.so.5.1.5<br>\n/usr/local/lib/libcudnn_static.a<br>\n/usr/local/lib/python2.7/dist-packages/torch/lib/libcudnn-900fef33.so.7.0.5</p>\n<p>Versions of relevant libraries:<br>\n[pip] msgpack-numpy (0.4.3.1)<br>\n[pip] numpy (1.15.0)<br>\n[pip] torch (1.0.0.dev20180921)<br>\n[pip] torch-cluster (1.1.5)<br>\n[pip] torch-scatter (1.0.4)<br>\n[pip] torch-sparse (0.2.0)<br>\n[pip] torch-spline-conv (1.0.4)<br>\n[pip] torchfile (0.1.0)<br>\n[pip] torchnet (0.0.2)<br>\n[conda] cuda80                    1.0                           0    soumith<br>\n[conda] magma-cuda80              2.3.0                         1    pytorch<br>\n[conda] nccl2                     1.0                           0    pytorch<br>\n[conda] pytorch-nightly           1.0.0.dev20180921 py3.5_cuda9.0.176_cudnn7.1.2_0    pytorch<br>\n[conda] torch                     0.5.0a0+c8b246a           <br>\n[conda] torch-cluster             1.1.5                     <br>\n[conda] torch-scatter             1.0.4                     <br>\n[conda] torch-sparse              0.2.0                     <br>\n[conda] torch-spline-conv         1.0.4                     <br>\n[conda] torchfile                 0.1.0                     <br>\n[conda] torchnet                  0.0.2                     </p>", "body_text": "Issue description\nI use torch.nn.BatchNorm1d in my code. When the batchsize of the input exceeds a threshold, BN gets very slow. This problem can be produced on my machine with the code (test_bn.py) provided below.\nFor example, in the following output I test it with input of size (5x20000, 256), (6x20000, 256), (7x20000, 256) and (8x20000, 256). The magnitude of the running time changes after 6.\n~$ CUDA_VISIBLE_DEVICES=5 python test_bn.py 5\nforward: 0.007s\nbackward: 0.019s\ntotal: 0.026s\n~$ CUDA_VISIBLE_DEVICES=5 python test_bn.py 6\nforward: 0.007s\nbackward: 0.022s\ntotal: 0.030s\n~$ CUDA_VISIBLE_DEVICES=5 python test_bn.py 7\nforward: 0.135s\nbackward: 0.102s\ntotal: 0.237s\n~$ CUDA_VISIBLE_DEVICES=5 python test_bn.py 8\nforward: 0.155s\nbackward: 0.117s\ntotal: 0.271s\nCode example\n# test_bn.py\nimport torch\nimport time\nimport sys\n\nbs = int(sys.argv[1])\nnum_features = 256\n\nshape = torch.Size((bs * 20000, num_features))\ninput = torch.cuda.FloatTensor(shape)\ntorch.randn(shape, out=input)\ninput.requires_grad = True\n\nbn = torch.nn.BatchNorm1d(num_features, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\nbn.cuda()\n\nN = 30\nforward_time = 0\nbackward_time = 0\nfor i in range(N):\n    torch.cuda.synchronize()\n    start = time.time()\n    output = bn(input)\n    output = output.mean()\n    torch.cuda.synchronize()\n    forward_time += time.time() - start\n\n    torch.cuda.synchronize()\n    start = time.time()\n    output.backward()\n    torch.cuda.synchronize()\n    backward_time += time.time() - start\n\nprint('forward: %f', forward_time / N)\nprint('backward: %f', backward_time / N)\nprint('total: %f', (forward_time + backward_time) / N)\nSystem Info\nCollecting environment information...\nPyTorch version: 1.0.0.dev20180921\nIs debug build: No\nCUDA used to build PyTorch: 9.0.176\nOS: Ubuntu 16.04.5 LTS\nGCC version: (Ubuntu 5.4.0-6ubuntu1~16.04.9) 5.4.0 20160609\nCMake version: version 3.6.3\nPython version: 3.5\nIs CUDA available: Yes\nCUDA runtime version: 8.0.44\nGPU models and configuration:\nGPU 0: TITAN X (Pascal)\nGPU 1: TITAN X (Pascal)\nGPU 2: TITAN X (Pascal)\nGPU 3: TITAN X (Pascal)\nGPU 4: TITAN X (Pascal)\nGPU 5: TITAN X (Pascal)\nGPU 6: TITAN X (Pascal)\nGPU 7: TITAN X (Pascal)\nNvidia driver version: 384.111\ncuDNN version: Probably one of the following:\n/usr/local/MATLAB/R2016a/bin/glnxa64/libcudnn.so.7.0.64\n/usr/local/bak-cuda-9.0/lib64/libcudnn.so\n/usr/local/bak-cuda-9.0/lib64/libcudnn.so.7\n/usr/local/bak-cuda-9.0/lib64/libcudnn.so.7.0.5\n/usr/local/bak-cuda-9.0/lib64/libcudnn_static.a\n/usr/local/bak-cuda-9.0/targets/x86_64-linux/lib/libcudnn.so\n/usr/local/bak-cuda-9.0/targets/x86_64-linux/lib/libcudnn.so.7\n/usr/local/bak-cuda-9.0/targets/x86_64-linux/lib/libcudnn.so.7.0.5\n/usr/local/bak-cuda-9.0/targets/x86_64-linux/lib/libcudnn_static.a\n/usr/local/cuda-8.0/lib64/libcudnn.so\n/usr/local/cuda-8.0/lib64/libcudnn.so.7\n/usr/local/cuda-8.0/lib64/libcudnn.so.7.0.5\n/usr/local/cuda-8.0/lib64/libcudnn_static.a\n/usr/local/lib/libcudnn.so.5.1.5\n/usr/local/lib/libcudnn_static.a\n/usr/local/lib/python2.7/dist-packages/torch/lib/libcudnn-900fef33.so.7.0.5\nVersions of relevant libraries:\n[pip] msgpack-numpy (0.4.3.1)\n[pip] numpy (1.15.0)\n[pip] torch (1.0.0.dev20180921)\n[pip] torch-cluster (1.1.5)\n[pip] torch-scatter (1.0.4)\n[pip] torch-sparse (0.2.0)\n[pip] torch-spline-conv (1.0.4)\n[pip] torchfile (0.1.0)\n[pip] torchnet (0.0.2)\n[conda] cuda80                    1.0                           0    soumith\n[conda] magma-cuda80              2.3.0                         1    pytorch\n[conda] nccl2                     1.0                           0    pytorch\n[conda] pytorch-nightly           1.0.0.dev20180921 py3.5_cuda9.0.176_cudnn7.1.2_0    pytorch\n[conda] torch                     0.5.0a0+c8b246a           \n[conda] torch-cluster             1.1.5                     \n[conda] torch-scatter             1.0.4                     \n[conda] torch-sparse              0.2.0                     \n[conda] torch-spline-conv         1.0.4                     \n[conda] torchfile                 0.1.0                     \n[conda] torchnet                  0.0.2", "body": "## Issue description\r\nI use ```torch.nn.BatchNorm1d``` in my code. When the batchsize of the input exceeds a threshold, BN gets very slow. This problem can be produced on my machine with the code (test_bn.py) provided below.\r\n\r\nFor example, in the following output I test it with input of size (5x20000, 256), (6x20000, 256), (7x20000, 256) and (8x20000, 256). The magnitude of the running time changes after 6.\r\n\r\n```bash\r\n~$ CUDA_VISIBLE_DEVICES=5 python test_bn.py 5\r\nforward: 0.007s\r\nbackward: 0.019s\r\ntotal: 0.026s\r\n~$ CUDA_VISIBLE_DEVICES=5 python test_bn.py 6\r\nforward: 0.007s\r\nbackward: 0.022s\r\ntotal: 0.030s\r\n~$ CUDA_VISIBLE_DEVICES=5 python test_bn.py 7\r\nforward: 0.135s\r\nbackward: 0.102s\r\ntotal: 0.237s\r\n~$ CUDA_VISIBLE_DEVICES=5 python test_bn.py 8\r\nforward: 0.155s\r\nbackward: 0.117s\r\ntotal: 0.271s\r\n```\r\n\r\n## Code example\r\n```python\r\n# test_bn.py\r\nimport torch\r\nimport time\r\nimport sys\r\n\r\nbs = int(sys.argv[1])\r\nnum_features = 256\r\n\r\nshape = torch.Size((bs * 20000, num_features))\r\ninput = torch.cuda.FloatTensor(shape)\r\ntorch.randn(shape, out=input)\r\ninput.requires_grad = True\r\n\r\nbn = torch.nn.BatchNorm1d(num_features, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\r\nbn.cuda()\r\n\r\nN = 30\r\nforward_time = 0\r\nbackward_time = 0\r\nfor i in range(N):\r\n    torch.cuda.synchronize()\r\n    start = time.time()\r\n    output = bn(input)\r\n    output = output.mean()\r\n    torch.cuda.synchronize()\r\n    forward_time += time.time() - start\r\n\r\n    torch.cuda.synchronize()\r\n    start = time.time()\r\n    output.backward()\r\n    torch.cuda.synchronize()\r\n    backward_time += time.time() - start\r\n\r\nprint('forward: %f', forward_time / N)\r\nprint('backward: %f', backward_time / N)\r\nprint('total: %f', (forward_time + backward_time) / N)\r\n```\r\n\r\n\r\n## System Info\r\nCollecting environment information...\r\nPyTorch version: 1.0.0.dev20180921\r\nIs debug build: No\r\nCUDA used to build PyTorch: 9.0.176\r\n\r\nOS: Ubuntu 16.04.5 LTS\r\nGCC version: (Ubuntu 5.4.0-6ubuntu1~16.04.9) 5.4.0 20160609\r\nCMake version: version 3.6.3\r\n\r\nPython version: 3.5\r\nIs CUDA available: Yes\r\nCUDA runtime version: 8.0.44\r\nGPU models and configuration:\r\nGPU 0: TITAN X (Pascal)\r\nGPU 1: TITAN X (Pascal)\r\nGPU 2: TITAN X (Pascal)\r\nGPU 3: TITAN X (Pascal)\r\nGPU 4: TITAN X (Pascal)\r\nGPU 5: TITAN X (Pascal)\r\nGPU 6: TITAN X (Pascal)\r\nGPU 7: TITAN X (Pascal)\r\n\r\nNvidia driver version: 384.111\r\ncuDNN version: Probably one of the following:\r\n/usr/local/MATLAB/R2016a/bin/glnxa64/libcudnn.so.7.0.64\r\n/usr/local/bak-cuda-9.0/lib64/libcudnn.so\r\n/usr/local/bak-cuda-9.0/lib64/libcudnn.so.7\r\n/usr/local/bak-cuda-9.0/lib64/libcudnn.so.7.0.5\r\n/usr/local/bak-cuda-9.0/lib64/libcudnn_static.a\r\n/usr/local/bak-cuda-9.0/targets/x86_64-linux/lib/libcudnn.so\r\n/usr/local/bak-cuda-9.0/targets/x86_64-linux/lib/libcudnn.so.7\r\n/usr/local/bak-cuda-9.0/targets/x86_64-linux/lib/libcudnn.so.7.0.5\r\n/usr/local/bak-cuda-9.0/targets/x86_64-linux/lib/libcudnn_static.a\r\n/usr/local/cuda-8.0/lib64/libcudnn.so\r\n/usr/local/cuda-8.0/lib64/libcudnn.so.7\r\n/usr/local/cuda-8.0/lib64/libcudnn.so.7.0.5\r\n/usr/local/cuda-8.0/lib64/libcudnn_static.a\r\n/usr/local/lib/libcudnn.so.5.1.5\r\n/usr/local/lib/libcudnn_static.a\r\n/usr/local/lib/python2.7/dist-packages/torch/lib/libcudnn-900fef33.so.7.0.5\r\n\r\nVersions of relevant libraries:\r\n[pip] msgpack-numpy (0.4.3.1)\r\n[pip] numpy (1.15.0)\r\n[pip] torch (1.0.0.dev20180921)\r\n[pip] torch-cluster (1.1.5)\r\n[pip] torch-scatter (1.0.4)\r\n[pip] torch-sparse (0.2.0)\r\n[pip] torch-spline-conv (1.0.4)\r\n[pip] torchfile (0.1.0)\r\n[pip] torchnet (0.0.2)\r\n[conda] cuda80                    1.0                           0    soumith\r\n[conda] magma-cuda80              2.3.0                         1    pytorch\r\n[conda] nccl2                     1.0                           0    pytorch\r\n[conda] pytorch-nightly           1.0.0.dev20180921 py3.5_cuda9.0.176_cudnn7.1.2_0    pytorch\r\n[conda] torch                     0.5.0a0+c8b246a           <pip>\r\n[conda] torch-cluster             1.1.5                     <pip>\r\n[conda] torch-scatter             1.0.4                     <pip>\r\n[conda] torch-sparse              0.2.0                     <pip>\r\n[conda] torch-spline-conv         1.0.4                     <pip>\r\n[conda] torchfile                 0.1.0                     <pip>\r\n[conda] torchnet                  0.0.2                     <pip>\r\n"}