{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/227767678", "pull_request_review_id": 167881770, "id": 227767678, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNzc2NzY3OA==", "diff_hunk": "@@ -32,7 +32,18 @@ struct SymbolicVariable {\n       if(g == nullptr) {\n         g = inputs.at(0).value()->owningGraph();\n       }\n-      Node * n = g->insertNode(g->create(kind, num_outputs));\n+      Node* n = g->insertNode(g->create(kind, num_outputs));\n+      size_t max_depth = 0;\n+      ScopePtr s;\n+      for(auto n : inputs) {\n+        size_t d = n.value()->node()->scope()->getDepth();\n+        if(d > max_depth) {", "path": "torch/csrc/jit/symbolic_variable.h", "position": 10, "original_position": 10, "commit_id": "f0e19c46b08db5811ab066df4ca97a78d571f80e", "original_commit_id": "f0e19c46b08db5811ab066df4ca97a78d571f80e", "user": {"login": "lanpa", "id": 2005323, "node_id": "MDQ6VXNlcjIwMDUzMjM=", "avatar_url": "https://avatars0.githubusercontent.com/u/2005323?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lanpa", "html_url": "https://github.com/lanpa", "followers_url": "https://api.github.com/users/lanpa/followers", "following_url": "https://api.github.com/users/lanpa/following{/other_user}", "gists_url": "https://api.github.com/users/lanpa/gists{/gist_id}", "starred_url": "https://api.github.com/users/lanpa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lanpa/subscriptions", "organizations_url": "https://api.github.com/users/lanpa/orgs", "repos_url": "https://api.github.com/users/lanpa/repos", "events_url": "https://api.github.com/users/lanpa/events{/privacy}", "received_events_url": "https://api.github.com/users/lanpa/received_events", "type": "User", "site_admin": false}, "body": "As for resource guard, I have tried and confirmed that `Node->setScope` can be replaced by `WithCurrentScope`.\r\n\r\nI am guessing the design merely from the code, the following might be wrong.\r\n\r\nI think that the scope information for each node is correct before the graph is optimized (by observation).\r\nAfter `_optimize_graph()` is called, some nodes are merged/canonicalized to new node but the scope is not appended to it. This can be verified by print(graph) in `torch/onnx/utils.py`.\r\n\r\nThe original (heuristic) fix is based on the assumption that the scope of the new node can be derived from the scope of its input nodes: The node with the deepest scope will be chosen, and that scope is assigned to the new node. I think things might go wrong if some input node has a very deep scope name while serving as other node\u2019s input. Although among the models I tested this does not happen. \r\n\r\nTo remove the heuristic, we should fix the empty scope problem from the beginning and make an assertion right after a node is created. If all nodes to be merged have the same scope, the scope for the new node is decided. (What if those input nodes have different scope? Is that possible? If it's not, we should add some assertion for that.)\r\nI also noticed that there is no scope information for Graph and Block after `_trace()` is called. If we kept those information, the correct scope might be determined if the above situation happens.\r\n\r\n\r\n@orionr @zdevito \r\n", "created_at": "2018-10-24T12:35:29Z", "updated_at": "2018-11-23T15:53:30Z", "html_url": "https://github.com/pytorch/pytorch/pull/12400#discussion_r227767678", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/12400", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/227767678"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/12400#discussion_r227767678"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/12400"}}, "body_html": "<p>As for resource guard, I have tried and confirmed that <code>Node-&gt;setScope</code> can be replaced by <code>WithCurrentScope</code>.</p>\n<p>I am guessing the design merely from the code, the following might be wrong.</p>\n<p>I think that the scope information for each node is correct before the graph is optimized (by observation).<br>\nAfter <code>_optimize_graph()</code> is called, some nodes are merged/canonicalized to new node but the scope is not appended to it. This can be verified by print(graph) in <code>torch/onnx/utils.py</code>.</p>\n<p>The original (heuristic) fix is based on the assumption that the scope of the new node can be derived from the scope of its input nodes: The node with the deepest scope will be chosen, and that scope is assigned to the new node. I think things might go wrong if some input node has a very deep scope name while serving as other node\u2019s input. Although among the models I tested this does not happen.</p>\n<p>To remove the heuristic, we should fix the empty scope problem from the beginning and make an assertion right after a node is created. If all nodes to be merged have the same scope, the scope for the new node is decided. (What if those input nodes have different scope? Is that possible? If it's not, we should add some assertion for that.)<br>\nI also noticed that there is no scope information for Graph and Block after <code>_trace()</code> is called. If we kept those information, the correct scope might be determined if the above situation happens.</p>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=79994\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/orionr\">@orionr</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=370202\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/zdevito\">@zdevito</a></p>", "body_text": "As for resource guard, I have tried and confirmed that Node->setScope can be replaced by WithCurrentScope.\nI am guessing the design merely from the code, the following might be wrong.\nI think that the scope information for each node is correct before the graph is optimized (by observation).\nAfter _optimize_graph() is called, some nodes are merged/canonicalized to new node but the scope is not appended to it. This can be verified by print(graph) in torch/onnx/utils.py.\nThe original (heuristic) fix is based on the assumption that the scope of the new node can be derived from the scope of its input nodes: The node with the deepest scope will be chosen, and that scope is assigned to the new node. I think things might go wrong if some input node has a very deep scope name while serving as other node\u2019s input. Although among the models I tested this does not happen.\nTo remove the heuristic, we should fix the empty scope problem from the beginning and make an assertion right after a node is created. If all nodes to be merged have the same scope, the scope for the new node is decided. (What if those input nodes have different scope? Is that possible? If it's not, we should add some assertion for that.)\nI also noticed that there is no scope information for Graph and Block after _trace() is called. If we kept those information, the correct scope might be determined if the above situation happens.\n@orionr @zdevito", "in_reply_to_id": 227129669}