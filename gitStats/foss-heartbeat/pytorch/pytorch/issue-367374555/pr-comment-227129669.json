{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/227129669", "pull_request_review_id": 167098876, "id": 227129669, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNzEyOTY2OQ==", "diff_hunk": "@@ -32,7 +32,18 @@ struct SymbolicVariable {\n       if(g == nullptr) {\n         g = inputs.at(0).value()->owningGraph();\n       }\n-      Node * n = g->insertNode(g->create(kind, num_outputs));\n+      Node* n = g->insertNode(g->create(kind, num_outputs));\n+      size_t max_depth = 0;\n+      ScopePtr s;\n+      for(auto n : inputs) {\n+        size_t d = n.value()->node()->scope()->getDepth();\n+        if(d > max_depth) {", "path": "torch/csrc/jit/symbolic_variable.h", "position": 10, "original_position": 10, "commit_id": "f0e19c46b08db5811ab066df4ca97a78d571f80e", "original_commit_id": "f0e19c46b08db5811ab066df4ca97a78d571f80e", "user": {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, "body": "This seems like a pretty arbitrary choice for how the scope gets chosen. In all other cases the scope is set via a resource guard similar to the insert point. Why would it be different here? I am worried about using this heuristic here because if we ever change how a node gets created, we might arbitrarily break some hard-to-test visualization thing. ", "created_at": "2018-10-22T20:38:43Z", "updated_at": "2018-11-23T15:53:22Z", "html_url": "https://github.com/pytorch/pytorch/pull/12400#discussion_r227129669", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/12400", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/227129669"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/12400#discussion_r227129669"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/12400"}}, "body_html": "<p>This seems like a pretty arbitrary choice for how the scope gets chosen. In all other cases the scope is set via a resource guard similar to the insert point. Why would it be different here? I am worried about using this heuristic here because if we ever change how a node gets created, we might arbitrarily break some hard-to-test visualization thing.</p>", "body_text": "This seems like a pretty arbitrary choice for how the scope gets chosen. In all other cases the scope is set via a resource guard similar to the insert point. Why would it be different here? I am worried about using this heuristic here because if we ever change how a node gets created, we might arbitrarily break some hard-to-test visualization thing."}