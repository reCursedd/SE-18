{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/192850391", "pull_request_review_id": 125703545, "id": 192850391, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5Mjg1MDM5MQ==", "diff_hunk": "@@ -2,42 +2,404 @@\n #include \"caffe2/opt/converter.h\"\n #include \"caffe2/opt/fusion.h\"\n \n+#ifdef CAFFE2_USE_IDEEP\n+#include \"caffe2/ideep/ideep_utils.h\"\n+#endif\n+\n namespace caffe2 {\n namespace opt {\n \n using namespace nom;\n \n-void OptimizeForIdeep(repr::NNModule* nn) {\n-  // Conv+Relu fusion\n-  auto should_fuse = [](const repr::Conv& conv) {\n-    const auto annotation = conv.getAnnotation();\n-    if (!annotation || !isa<Caffe2Annotation>(annotation)) {\n-      return false;\n+#ifndef CAFFE2_USE_IDEEP\n+void OptimizeForIdeep(repr::NNModule* nn, caffe2::Workspace* ws, bool training_mode) {\n+  LOG(WARNING) << \"Only support optimizations for IDEEP\";\n+}\n+\n+#else\n+USE_IDEEP_DEF_ALIASES();\n+\n+Blob* getBlob(repr::NNGraph::NodeRef node, caffe2::Workspace* ws) {\n+  auto tensor = repr::nn::get<repr::Tensor>(node);\n+  assert(ws->HasBlob(tensor->getName()) && \"Blob not in workspace\");\n+  return ws->GetBlob(tensor->getName());\n+}\n+\n+template<class T>\n+T* getTensor(Blob* blob) {\n+  assert(blob && \"Blob is invalid\");\n+  if (blob && blob->template IsType<T>()) {\n+    return blob->template GetMutable<T>();\n+  }\n+  return nullptr;\n+}\n+\n+const caffe2::OperatorDef* getOpDef(const repr::NeuralNetOperator& nnOp) {\n+  auto annotation = nnOp.getAnnotation();\n+  if (!annotation || !isa<Caffe2Annotation>(annotation)) {\n+    return nullptr;\n+  }\n+\n+  return dyn_cast<Caffe2Annotation>(annotation)->getOperatorDef();\n+}\n+\n+bool isOnIdeepDevice(const repr::NeuralNetOperator& nnOp) {\n+  // We only want to fuse for IDEEP convs\n+  const auto* op = getOpDef(nnOp);\n+  if (op == nullptr || op->device_option().device_type() != DeviceType::IDEEP) {\n+    return false;\n+  }\n+\n+  return true;\n+}\n+\n+bool shouldFuseConv(const repr::Conv& conv) {\n+  return isOnIdeepDevice(conv) ? (conv.getGroup() <= 1) : false;\n+}\n+\n+void resetConvForFusion(repr::NNGraph::NodeRef convNode, int fusion_type) {\n+  // Fusion types:\n+  // FUSION_CONV_RELU = 1\n+  // FUSION_CONV_SUM = 2\n+  // FUSION_CONV_SUM_RELU = 3\n+  auto conv = repr::nn::get<repr::Conv>(convNode);\n+  auto annotation = conv->getMutableAnnotation();\n+  if (!annotation || !isa<Caffe2Annotation>(annotation)) {\n+    return;\n+  }\n+\n+  auto* op = dyn_cast<Caffe2Annotation>(annotation)->getMutableOperatorDef();\n+  if (op == nullptr) {\n+    return;\n+  }\n+\n+  if (op->type() == \"ConvFusion\") {\n+    assert(fusion_type == 1 && \"Invalid nest fusion\");\n+    for (auto& arg : *op->mutable_arg()) {\n+      if (arg.name() == \"fusion_type\") {\n+        // Only from FUSION_CONV_SUM to FUSION_CONV_SUM_RELU\n+        assert(arg.i() == 2 && \"Invalid nest fusion\");\n+        arg.set_i(3);\n+        return;\n+      }\n     }\n-    const auto* op = dyn_cast<Caffe2Annotation>(annotation)->getOperatorDef();\n+    return;\n+  }\n+\n+  assert(fusion_type < 3 && \"Invalid fusion type\");\n+  op->set_type(\"ConvFusion\");\n+  auto* arg = op->add_arg();\n+  arg->set_name(\"fusion_type\");\n+  arg->set_i(fusion_type);\n+}\n \n-    // We only want to fuse for IDEEP convs\n-    if (op->device_option().device_type() != DeviceType::IDEEP) {\n-      return false;\n+bool fuseConvBNHelperForIdeep(repr::NNModule* nn, caffe2::Workspace* ws) {\n+  for (auto node_pair : repr::nn::dataIterator<repr::Conv>(nn->dataFlow)) {\n+    bool no_bias = false;\n+    repr::NNGraph::NodeRef convNode;\n+    repr::Conv* conv;\n+    std::tie(conv, convNode) = node_pair;\n+\n+    if (!isOnIdeepDevice(*conv)) {\n+      LOG(WARNING) << \"Not a IDEEP operator\";\n+      continue;\n+    }\n+\n+    const auto* op = getOpDef(*conv);\n+    if (op->type() == \"ConvFusion\") {\n+      continue;\n     }\n \n+    auto convOutput = repr::nn::getOutputs(convNode).front();\n+    auto consumers = repr::nn::getConsumers(convOutput);\n+    // convOutput is NOT referenced by sequencial ops after BN.\n+    if (consumers.size() != 1) {\n+      continue;\n+    }\n+\n+    auto consumer = consumers.front();\n+    if (!repr::nn::is<repr::BatchNormalization>(consumer)) {\n+      continue;\n+    }\n+    auto bnNode = consumer;\n+    auto bn = repr::nn::get<repr::BatchNormalization>(bnNode);\n+    auto bnOutput = repr::nn::getOutputs(bnNode).front();\n+\n+    auto convInputs = repr::nn::getInputs(convNode);\n+    if (convInputs.size() < 2) {\n+      LOG(WARNING) << \"Invalid convolution input size\";\n+      continue;\n+    }\n+\n+    auto bnInputs = repr::nn::getInputs(bnNode);\n+    if (bnInputs.size() < 5) {\n+      LOG(WARNING) << \"Invalid batch normalization input size\";\n+      continue;\n+    }\n+\n+    // When no bias, borrow BN bias\n+    if (convInputs.size() < 3) {\n+      no_bias = true;\n+      nn->dataFlow.createEdge(bnInputs[2], convNode);\n+      convInputs = repr::nn::getInputs(convNode);\n+    }\n+\n+#define EXPOSE_TENSOR_DATA(name, index, nodes)                                 \\\n+    auto* name = getTensor<itensor>(getBlob(nodes[index], ws));                \\\n+    if (name == nullptr) {                                                     \\\n+      LOG(WARNING) << #name \" not a IDEEP tensor\";                             \\\n+      continue;                                                                \\\n+    }                                                                          \\\n+    itensor name##Tensor({name->get_dims(), name->get_data_type()});           \\\n+    name##Tensor.reorder_from(*name);                                          \\\n+    assert(name##Tensor.is_public_format() && #name \" not with public format\");\\\n+    auto* name##Data = static_cast<float*>(name##Tensor.get_data_handle());\n+\n+    EXPOSE_TENSOR_DATA(filter, 1, convInputs);\n+    EXPOSE_TENSOR_DATA(biasConv, 2, convInputs);\n+\n+    EXPOSE_TENSOR_DATA(scale, 1, bnInputs);\n+    EXPOSE_TENSOR_DATA(biasBN, 2, bnInputs);\n+    EXPOSE_TENSOR_DATA(mean, 3, bnInputs);\n+    EXPOSE_TENSOR_DATA(variance, 4, bnInputs);\n+\n+#undef EXPOSE_TENSOR_DATA\n+\n+    // Assume M{CHW,HWC}\n+    auto chwDim = filterTensor.get_dim(1) * filterTensor.get_dim(2) *\n+        filterTensor.get_dim(3);\n+    for (auto c = 0; c < filterTensor.get_dim(0); ++c) {\n+      float coeff =\n+          scaleData[c] / std::sqrt(varianceData[c] + bn->getEpsilon());\n+      for (auto i = 0; i < chwDim; ++i) {\n+        filterData[c * chwDim + i] *= coeff;\n+      }\n+      if (no_bias) {\n+        biasConvData[c] = biasBNData[c] - meanData[c] * coeff;\n+      } else {\n+        biasConvData[c] = biasBNData[c] + (biasConvData[c] - meanData[c]) * coeff;\n+      }\n+    }\n+\n+    filter->reorder_from(filterTensor);\n+    biasConv->reorder_from(biasConvTensor);\n+    nn->dataFlow.replaceNode(convOutput, bnOutput);\n+\n+    nn->dataFlow.deleteNode(bnNode);\n+    nn->dataFlow.deleteNode(convOutput);\n+\n     return true;\n-  };\n-  auto postprocess = [](repr::NNGraph::NodeRef conv_node) {\n-    auto conv = repr::nn::get<repr::Conv>(conv_node);\n-    auto annotation = conv->getMutableAnnotation();\n-    if (!annotation || !isa<Caffe2Annotation>(annotation)) {\n-      return;\n+  }\n+\n+  return false;\n+}\n+\n+void fuseConvBNForIdeep(repr::NNModule* nn, caffe2::Workspace* ws) {\n+  while (fuseConvBNHelperForIdeep(nn, ws)) {\n+  }\n+}\n+\n+void fuseConvSumForIdeep(repr::NNModule* nn, caffe2::Workspace* ws) {", "path": "caffe2/opt/optimize_ideep.cc", "position": 227, "original_position": 217, "commit_id": "50e867829c50f4547520d739ee5293806f5753b9", "original_commit_id": "9e791d8e0cd4583eea7c9bdb0eec59db0dc70fc3", "user": {"login": "yinghai", "id": 1100089, "node_id": "MDQ6VXNlcjExMDAwODk=", "avatar_url": "https://avatars1.githubusercontent.com/u/1100089?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yinghai", "html_url": "https://github.com/yinghai", "followers_url": "https://api.github.com/users/yinghai/followers", "following_url": "https://api.github.com/users/yinghai/following{/other_user}", "gists_url": "https://api.github.com/users/yinghai/gists{/gist_id}", "starred_url": "https://api.github.com/users/yinghai/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yinghai/subscriptions", "organizations_url": "https://api.github.com/users/yinghai/orgs", "repos_url": "https://api.github.com/users/yinghai/repos", "events_url": "https://api.github.com/users/yinghai/events{/privacy}", "received_events_url": "https://api.github.com/users/yinghai/received_events", "type": "User", "site_admin": false}, "body": "I still don't understand what's the use case for conv+sum fusion in inference. Could you explain? ", "created_at": "2018-06-04T19:13:10Z", "updated_at": "2018-11-23T15:44:55Z", "html_url": "https://github.com/pytorch/pytorch/pull/8105#discussion_r192850391", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/8105", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/192850391"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/8105#discussion_r192850391"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/8105"}}, "body_html": "<p>I still don't understand what's the use case for conv+sum fusion in inference. Could you explain?</p>", "body_text": "I still don't understand what's the use case for conv+sum fusion in inference. Could you explain?"}