{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/192929463", "pull_request_review_id": 125800190, "id": 192929463, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MjkyOTQ2Mw==", "diff_hunk": "@@ -2,42 +2,404 @@\n #include \"caffe2/opt/converter.h\"\n #include \"caffe2/opt/fusion.h\"\n \n+#ifdef CAFFE2_USE_IDEEP\n+#include \"caffe2/ideep/ideep_utils.h\"\n+#endif\n+\n namespace caffe2 {\n namespace opt {\n \n using namespace nom;\n \n-void OptimizeForIdeep(repr::NNModule* nn) {\n-  // Conv+Relu fusion\n-  auto should_fuse = [](const repr::Conv& conv) {\n-    const auto annotation = conv.getAnnotation();\n-    if (!annotation || !isa<Caffe2Annotation>(annotation)) {\n-      return false;\n+#ifndef CAFFE2_USE_IDEEP\n+void OptimizeForIdeep(repr::NNModule* nn, caffe2::Workspace* ws, bool training_mode) {\n+  LOG(WARNING) << \"Only support optimizations for IDEEP\";\n+}\n+\n+#else\n+USE_IDEEP_DEF_ALIASES();\n+\n+Blob* getBlob(repr::NNGraph::NodeRef node, caffe2::Workspace* ws) {\n+  auto tensor = repr::nn::get<repr::Tensor>(node);\n+  assert(ws->HasBlob(tensor->getName()) && \"Blob not in workspace\");\n+  return ws->GetBlob(tensor->getName());\n+}\n+\n+template<class T>\n+T* getTensor(Blob* blob) {\n+  assert(blob && \"Blob is invalid\");\n+  if (blob && blob->template IsType<T>()) {\n+    return blob->template GetMutable<T>();\n+  }\n+  return nullptr;\n+}\n+\n+const caffe2::OperatorDef* getOpDef(const repr::NeuralNetOperator& nnOp) {\n+  auto annotation = nnOp.getAnnotation();\n+  if (!annotation || !isa<Caffe2Annotation>(annotation)) {\n+    return nullptr;\n+  }\n+\n+  return dyn_cast<Caffe2Annotation>(annotation)->getOperatorDef();\n+}\n+\n+bool isOnIdeepDevice(const repr::NeuralNetOperator& nnOp) {\n+  // We only want to fuse for IDEEP convs\n+  const auto* op = getOpDef(nnOp);\n+  if (op == nullptr || op->device_option().device_type() != DeviceType::IDEEP) {\n+    return false;\n+  }\n+\n+  return true;\n+}\n+\n+bool shouldFuseConv(const repr::Conv& conv) {\n+  return isOnIdeepDevice(conv) ? (conv.getGroup() <= 1) : false;\n+}\n+\n+void resetConvForFusion(repr::NNGraph::NodeRef convNode, int fusion_type) {\n+  // Fusion types:\n+  // FUSION_CONV_RELU = 1\n+  // FUSION_CONV_SUM = 2\n+  // FUSION_CONV_SUM_RELU = 3\n+  auto conv = repr::nn::get<repr::Conv>(convNode);\n+  auto annotation = conv->getMutableAnnotation();\n+  if (!annotation || !isa<Caffe2Annotation>(annotation)) {\n+    return;\n+  }\n+\n+  auto* op = dyn_cast<Caffe2Annotation>(annotation)->getMutableOperatorDef();\n+  if (op == nullptr) {\n+    return;\n+  }\n+\n+  if (op->type() == \"ConvFusion\") {\n+    assert(fusion_type == 1 && \"Invalid nest fusion\");\n+    for (auto& arg : *op->mutable_arg()) {\n+      if (arg.name() == \"fusion_type\") {\n+        // Only from FUSION_CONV_SUM to FUSION_CONV_SUM_RELU\n+        assert(arg.i() == 2 && \"Invalid nest fusion\");\n+        arg.set_i(3);\n+        return;\n+      }\n     }\n-    const auto* op = dyn_cast<Caffe2Annotation>(annotation)->getOperatorDef();\n+    return;\n+  }\n+\n+  assert(fusion_type < 3 && \"Invalid fusion type\");\n+  op->set_type(\"ConvFusion\");\n+  auto* arg = op->add_arg();\n+  arg->set_name(\"fusion_type\");\n+  arg->set_i(fusion_type);\n+}\n \n-    // We only want to fuse for IDEEP convs\n-    if (op->device_option().device_type() != DeviceType::IDEEP) {\n-      return false;\n+bool fuseConvBNHelperForIdeep(repr::NNModule* nn, caffe2::Workspace* ws) {", "path": "caffe2/opt/optimize_ideep.cc", "position": null, "original_position": 105, "commit_id": "50e867829c50f4547520d739ee5293806f5753b9", "original_commit_id": "9e791d8e0cd4583eea7c9bdb0eec59db0dc70fc3", "user": {"login": "gujinghui", "id": 31264804, "node_id": "MDQ6VXNlcjMxMjY0ODA0", "avatar_url": "https://avatars2.githubusercontent.com/u/31264804?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gujinghui", "html_url": "https://github.com/gujinghui", "followers_url": "https://api.github.com/users/gujinghui/followers", "following_url": "https://api.github.com/users/gujinghui/following{/other_user}", "gists_url": "https://api.github.com/users/gujinghui/gists{/gist_id}", "starred_url": "https://api.github.com/users/gujinghui/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gujinghui/subscriptions", "organizations_url": "https://api.github.com/users/gujinghui/orgs", "repos_url": "https://api.github.com/users/gujinghui/repos", "events_url": "https://api.github.com/users/gujinghui/events{/privacy}", "received_events_url": "https://api.github.com/users/gujinghui/received_events", "type": "User", "site_admin": false}, "body": "Yes. But difference tensor type and tensor API. It's difficult to invoke existing ConvBN fusion directly for Ideep tensors.", "created_at": "2018-06-05T02:18:28Z", "updated_at": "2018-11-23T15:44:56Z", "html_url": "https://github.com/pytorch/pytorch/pull/8105#discussion_r192929463", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/8105", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/192929463"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/8105#discussion_r192929463"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/8105"}}, "body_html": "<p>Yes. But difference tensor type and tensor API. It's difficult to invoke existing ConvBN fusion directly for Ideep tensors.</p>", "body_text": "Yes. But difference tensor type and tensor API. It's difficult to invoke existing ConvBN fusion directly for Ideep tensors.", "in_reply_to_id": 192849990}