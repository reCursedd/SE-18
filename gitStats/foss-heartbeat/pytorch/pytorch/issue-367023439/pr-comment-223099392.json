{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/223099392", "pull_request_review_id": 162152203, "id": 223099392, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyMzA5OTM5Mg==", "diff_hunk": "@@ -1,194 +1 @@\n-#pragma once\n-\n-#include <ATen/core/Macros.h>\n-#include <ATen/core/optional.h>\n-\n-#include <cstddef>\n-#include <exception>\n-#include <ostream>\n-#include <sstream>\n-#include <string>\n-#include <vector>\n-\n-#if defined(_MSC_VER) && _MSC_VER <= 1900\n-#define __func__ __FUNCTION__\n-#endif\n-\n-namespace at {\n-\n-namespace detail {\n-\n-// Obtains the base name from a full path.\n-CAFFE2_API std::string StripBasename(const std::string& full_path);\n-\n-inline std::ostream& _str(std::ostream& ss) {\n-  return ss;\n-}\n-\n-template <typename T>\n-inline std::ostream& _str(std::ostream& ss, const T& t) {\n-  ss << t;\n-  return ss;\n-}\n-\n-template <typename T, typename... Args>\n-inline std::ostream& _str(std::ostream& ss, const T& t, const Args&... args) {\n-  return _str(_str(ss, t), args...);\n-}\n-\n-} // namespace detail\n-\n-// Convert a list of string-like arguments into a single string.\n-template <typename... Args>\n-inline std::string str(const Args&... args) {\n-  std::ostringstream ss;\n-  detail::_str(ss, args...);\n-  return ss.str();\n-}\n-\n-// Specializations for already-a-string types.\n-template <>\n-inline std::string str(const std::string& str) {\n-  return str;\n-}\n-inline std::string str(const char* c_str) {\n-  return c_str;\n-}\n-\n-/// Represents a location in source code (for debugging).\n-struct CAFFE2_API SourceLocation {\n-  const char* function;\n-  const char* file;\n-  uint32_t line;\n-};\n-\n-std::ostream& operator<<(std::ostream& out, const SourceLocation& loc);\n-\n-/// The primary ATen error class.\n-/// Provides a complete error message with source location information via\n-/// `what()`, and a more concise message via `what_without_backtrace()`. Should\n-/// primarily be used with the `AT_ERROR` macro.\n-///\n-/// NB: at::Error is handled specially by the default torch to suppress the\n-/// backtrace, see torch/csrc/Exceptions.h\n-class CAFFE2_API Error : public std::exception {\n-  std::vector<std::string> msg_stack_;\n-  std::string backtrace_;\n-\n-  // These two are derived fields from msg_stack_ and backtrace_, but we need\n-  // fields for the strings so that we can return a const char* (as the\n-  // signature of std::exception requires).\n-  std::string msg_;\n-  std::string msg_without_backtrace_;\n-\n-  // This is a little debugging trick: you can stash a relevant pointer\n-  // in caller, and then when you catch the exception, you can compare\n-  // against pointers you have on hand to get more information about\n-  // where the exception came from.  In Caffe2, this is used to figure\n-  // out which operator raised an exception.\n-  const void* caller_;\n-\n- public:\n-  Error(\n-      const std::string& msg,\n-      const std::string& backtrace,\n-      const void* caller = nullptr);\n-  Error(SourceLocation source_location, const std::string& msg);\n-  Error(\n-      const char* file,\n-      const int line,\n-      const char* condition,\n-      const std::string& msg,\n-      const std::string& backtrace,\n-      const void* caller = nullptr);\n-\n-  void AppendMessage(const std::string& msg);\n-\n-  // Compute the full message from msg_ and msg_without_backtrace_\n-  // TODO: Maybe this should be private\n-  std::string msg() const;\n-  std::string msg_without_backtrace() const;\n-\n-  const std::vector<std::string>& msg_stack() const {\n-    return msg_stack_;\n-  }\n-\n-  /// Returns the complete error message, including the source location.\n-  const char* what() const noexcept override {\n-    return msg_.c_str();\n-  }\n-\n-  const void* caller() const noexcept {\n-    return caller_;\n-  }\n-\n-  /// Returns only the error message string, without source location.\n-  const char* what_without_backtrace() const noexcept {\n-    return msg_without_backtrace_.c_str();\n-  }\n-};\n-\n-class CAFFE2_API Warning {\n-  using handler_t =\n-      void (*)(const SourceLocation& source_location, const char* msg);\n-\n- public:\n-  /// Issue a warning with a given message. Dispatched to the current\n-  /// warning handler.\n-  static void warn(SourceLocation source_location, std::string msg);\n-\n-  /// Sets the global warning handler. This is not thread-safe, so it should\n-  /// generally be called once during initialization.\n-  static void set_warning_handler(handler_t handler);\n-\n-  /// The default warning handler. Prints the message to stderr.\n-  static void print_warning(\n-      const SourceLocation& source_location,\n-      const char* msg);\n-\n- private:\n-  static handler_t warning_handler_;\n-};\n-\n-// A utility function to return an exception std::string by prepending its\n-// exception type before its what() content\n-CAFFE2_API std::string GetExceptionString(const std::exception& e);\n-\n-} // namespace at\n-\n-// TODO: variants that print the expression tested and thus don't require\n-// strings\n-// TODO: CAFFE_ENFORCE_WITH_CALLER style macro\n-\n-#define AT_ERROR(...) \\\n-  throw at::Error({__func__, __FILE__, __LINE__}, at::str(__VA_ARGS__))\n-\n-#define AT_WARN(...) \\\n-  at::Warning::warn({__func__, __FILE__, __LINE__}, at::str(__VA_ARGS__))\n-\n-#define AT_ASSERT(cond)                       \\\n-  if (!(cond)) {                              \\\n-    AT_ERROR(                                 \\\n-        #cond \" ASSERT FAILED at \",           \\\n-        __FILE__,                             \\\n-        \":\",                                  \\\n-        __LINE__,                             \\\n-        \", please report a bug to PyTorch.\"); \\\n-  }\n-\n-#define AT_ASSERTM(cond, ...)                 \\\n-  if (!(cond)) {                              \\\n-    AT_ERROR(at::str(                         \\\n-        #cond,                                \\\n-        \" ASSERT FAILED at \",                 \\\n-        __FILE__,                             \\\n-        \":\",                                  \\\n-        __LINE__,                             \\\n-        \", please report a bug to PyTorch. \", \\\n-        __VA_ARGS__));                        \\\n-  }\n-\n-#define AT_CHECK(cond, ...)         \\\n-  if (!(cond)) {                    \\\n-    AT_ERROR(at::str(__VA_ARGS__)); \\\n-  }\n+#include \"c10/util/Exception.h\"", "path": "aten/src/ATen/core/Error.h", "position": 236, "original_position": 195, "commit_id": "05e5f11f3d889b7afde6e552fefef44c19db642c", "original_commit_id": "561a6c0a829bbce962500984e4594c54a2c0e23e", "user": {"login": "smessmer", "id": 2373925, "node_id": "MDQ6VXNlcjIzNzM5MjU=", "avatar_url": "https://avatars3.githubusercontent.com/u/2373925?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smessmer", "html_url": "https://github.com/smessmer", "followers_url": "https://api.github.com/users/smessmer/followers", "following_url": "https://api.github.com/users/smessmer/following{/other_user}", "gists_url": "https://api.github.com/users/smessmer/gists{/gist_id}", "starred_url": "https://api.github.com/users/smessmer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smessmer/subscriptions", "organizations_url": "https://api.github.com/users/smessmer/orgs", "repos_url": "https://api.github.com/users/smessmer/repos", "events_url": "https://api.github.com/users/smessmer/events{/privacy}", "received_events_url": "https://api.github.com/users/smessmer/received_events", "type": "User", "site_admin": false}, "body": "same here", "created_at": "2018-10-05T18:23:48Z", "updated_at": "2018-11-23T15:52:26Z", "html_url": "https://github.com/pytorch/pytorch/pull/12354#discussion_r223099392", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/12354", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/223099392"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/12354#discussion_r223099392"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/12354"}}, "body_html": "<p>same here</p>", "body_text": "same here"}