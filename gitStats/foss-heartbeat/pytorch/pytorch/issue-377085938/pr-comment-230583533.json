{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/230583533", "pull_request_review_id": 171357257, "id": 230583533, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMDU4MzUzMw==", "diff_hunk": "@@ -523,6 +523,7 @@ if (BUILD_PYTHON)\n       caffe2_pybind11_state caffe2_library)\n   if (WIN32)\n     target_link_libraries(caffe2_pybind11_state ${PYTHON_LIBRARIES})\n+    target_link_libraries(caffe2_pybind11_state onnx_proto)", "path": "caffe2/CMakeLists.txt", "position": 4, "original_position": 4, "commit_id": "147c7f735d90054283afe1f78126a85fa03336bd", "original_commit_id": "35c094643b5725f1a59c6de6c7fb863708beaf44", "user": {"login": "ArutyunovG", "id": 10763026, "node_id": "MDQ6VXNlcjEwNzYzMDI2", "avatar_url": "https://avatars0.githubusercontent.com/u/10763026?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ArutyunovG", "html_url": "https://github.com/ArutyunovG", "followers_url": "https://api.github.com/users/ArutyunovG/followers", "following_url": "https://api.github.com/users/ArutyunovG/following{/other_user}", "gists_url": "https://api.github.com/users/ArutyunovG/gists{/gist_id}", "starred_url": "https://api.github.com/users/ArutyunovG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ArutyunovG/subscriptions", "organizations_url": "https://api.github.com/users/ArutyunovG/orgs", "repos_url": "https://api.github.com/users/ArutyunovG/repos", "events_url": "https://api.github.com/users/ArutyunovG/events{/privacy}", "received_events_url": "https://api.github.com/users/ArutyunovG/received_events", "type": "User", "site_admin": false}, "body": "There are two types of linking in Windows: static (against .lib) and dynamic (against .dll with import .lib library).\r\nI don't have experience with dumpbin /exports, however it seems to be a tool to show symbols, which lib file exports for connection with dll. In that case it will not show anything for any standard static lib, that is not intended to be used as import library for dll linkage. But probably I'm mistaken here, since of lack of usage of dumpbin /exports.\r\n\r\nConcrete reason why we link here against onnx_proto is the line:\r\n\r\n::ONNX_NAMESPACE::ValueInfoProto vi{};\r\n\r\nin pybind_state.cc file.\r\n\r\nThis line calls the constructor, which will be unresolved in pybind .pyd file and give us an error:\r\n\r\npublic: __cdecl onnx_c2::ValueInfoProto::ValueInfoProto(void)", "created_at": "2018-11-04T10:44:32Z", "updated_at": "2018-11-23T15:54:15Z", "html_url": "https://github.com/pytorch/pytorch/pull/13550#discussion_r230583533", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/13550", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/230583533"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/13550#discussion_r230583533"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/13550"}}, "body_html": "<p>There are two types of linking in Windows: static (against .lib) and dynamic (against .dll with import .lib library).<br>\nI don't have experience with dumpbin /exports, however it seems to be a tool to show symbols, which lib file exports for connection with dll. In that case it will not show anything for any standard static lib, that is not intended to be used as import library for dll linkage. But probably I'm mistaken here, since of lack of usage of dumpbin /exports.</p>\n<p>Concrete reason why we link here against onnx_proto is the line:</p>\n<p>::ONNX_NAMESPACE::ValueInfoProto vi{};</p>\n<p>in pybind_state.cc file.</p>\n<p>This line calls the constructor, which will be unresolved in pybind .pyd file and give us an error:</p>\n<p>public: __cdecl onnx_c2::ValueInfoProto::ValueInfoProto(void)</p>", "body_text": "There are two types of linking in Windows: static (against .lib) and dynamic (against .dll with import .lib library).\nI don't have experience with dumpbin /exports, however it seems to be a tool to show symbols, which lib file exports for connection with dll. In that case it will not show anything for any standard static lib, that is not intended to be used as import library for dll linkage. But probably I'm mistaken here, since of lack of usage of dumpbin /exports.\nConcrete reason why we link here against onnx_proto is the line:\n::ONNX_NAMESPACE::ValueInfoProto vi{};\nin pybind_state.cc file.\nThis line calls the constructor, which will be unresolved in pybind .pyd file and give us an error:\npublic: __cdecl onnx_c2::ValueInfoProto::ValueInfoProto(void)", "in_reply_to_id": 230574160}