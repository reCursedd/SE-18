{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/232737861", "pull_request_review_id": 173998168, "id": 232737861, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMjczNzg2MQ==", "diff_hunk": "@@ -1266,23 +1267,11 @@ bool ImageInputOp<Context>::CopyPrefetched() {\n       // data comes in as NHWC\n       const int N = X.dim32(0), C = X.dim32(3), H = X.dim32(1), W = X.dim32(2);\n       // data goes out as NCHW\n-      auto dims = std::vector<int64_t>{N, C, H, W};\n-      // GPU transform kernel allows explicitly setting output type\n-      if (output_type_ == TensorProto_DataType_FLOAT) {\n-        auto* image_output = OperatorBase::OutputTensor(\n-            0, dims, at::dtype<float>().device(type));\n-        TransformOnGPU<uint8_t,float,Context>(prefetched_image_on_device_,\n-                                              image_output, mean_gpu_,\n-                                              std_gpu_, &context_);\n-      } else if (output_type_ == TensorProto_DataType_FLOAT16) {\n-        auto* image_output = OperatorBase::OutputTensor(\n-            0, dims, at::dtype<at::Half>().device(type));\n-        TransformOnGPU<uint8_t,at::Half,Context>(prefetched_image_on_device_,\n-                                                image_output, mean_gpu_,\n-                                                std_gpu_, &context_);\n-      }  else {\n-        return false;\n+      auto dims = std::vector<int64_t>{ N, C, H, W };\n+      if (!ApplyTransformOnGPU(dims, type)) {", "path": "caffe2/image/image_input_op.h", "position": 38, "original_position": 29, "commit_id": "147c7f735d90054283afe1f78126a85fa03336bd", "original_commit_id": "6360cd9384b1884f9b166692b449294272da83f5", "user": {"login": "orionr", "id": 79994, "node_id": "MDQ6VXNlcjc5OTk0", "avatar_url": "https://avatars3.githubusercontent.com/u/79994?v=4", "gravatar_id": "", "url": "https://api.github.com/users/orionr", "html_url": "https://github.com/orionr", "followers_url": "https://api.github.com/users/orionr/followers", "following_url": "https://api.github.com/users/orionr/following{/other_user}", "gists_url": "https://api.github.com/users/orionr/gists{/gist_id}", "starred_url": "https://api.github.com/users/orionr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/orionr/subscriptions", "organizations_url": "https://api.github.com/users/orionr/orgs", "repos_url": "https://api.github.com/users/orionr/repos", "events_url": "https://api.github.com/users/orionr/events{/privacy}", "received_events_url": "https://api.github.com/users/orionr/received_events", "type": "User", "site_admin": false}, "body": "Why did you need to pull this into a separate method? Best would be to leave this as-is if possible. You should already be in the CUDAContext case here.", "created_at": "2018-11-12T16:59:46Z", "updated_at": "2018-11-23T15:54:39Z", "html_url": "https://github.com/pytorch/pytorch/pull/13550#discussion_r232737861", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/13550", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/232737861"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/13550#discussion_r232737861"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/13550"}}, "body_html": "<p>Why did you need to pull this into a separate method? Best would be to leave this as-is if possible. You should already be in the CUDAContext case here.</p>", "body_text": "Why did you need to pull this into a separate method? Best would be to leave this as-is if possible. You should already be in the CUDAContext case here."}