{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/431737027", "html_url": "https://github.com/pytorch/pytorch/pull/12805#issuecomment-431737027", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/12805", "id": 431737027, "node_id": "MDEyOklzc3VlQ29tbWVudDQzMTczNzAyNw==", "user": {"login": "parth1595", "id": 21214965, "node_id": "MDQ6VXNlcjIxMjE0OTY1", "avatar_url": "https://avatars1.githubusercontent.com/u/21214965?v=4", "gravatar_id": "", "url": "https://api.github.com/users/parth1595", "html_url": "https://github.com/parth1595", "followers_url": "https://api.github.com/users/parth1595/followers", "following_url": "https://api.github.com/users/parth1595/following{/other_user}", "gists_url": "https://api.github.com/users/parth1595/gists{/gist_id}", "starred_url": "https://api.github.com/users/parth1595/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/parth1595/subscriptions", "organizations_url": "https://api.github.com/users/parth1595/orgs", "repos_url": "https://api.github.com/users/parth1595/repos", "events_url": "https://api.github.com/users/parth1595/events{/privacy}", "received_events_url": "https://api.github.com/users/parth1595/received_events", "type": "User", "site_admin": false}, "created_at": "2018-10-22T04:13:59Z", "updated_at": "2018-10-22T04:27:37Z", "author_association": "NONE", "body_html": "<blockquote>\n<p>dupe of <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"371463378\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/12815\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/pytorch/pytorch/pull/12815/hovercard\" href=\"https://github.com/pytorch/pytorch/pull/12815\">#12815</a></p>\n</blockquote>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=13564\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ezyang\">@ezyang</a> the pull request you are referring it was also from me. And this change is in different file <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"371463378\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/12815\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/pytorch/pytorch/pull/12815/hovercard\" href=\"https://github.com/pytorch/pytorch/pull/12815\">#12815</a> it was from caffe2 source file and this change is in frontend.py. This change come in to picture when any operator who is not supported by onnx.</p>\n<pre><code>def caffe2_op_to_onnx_node(cls, op_def, shapes):\n        if C.support_onnx_export(op_def.type):\n            node_strs, tensor_strs = C.export_to_onnx(cls._dummy_name, op_def.SerializeToString(), shapes)\n            nodes = []\n            for s in node_strs:\n                node = NodeProto()\n                node.ParseFromString(s)\n                nodes.append(node)\n            const_tensors = []\n            for s in tensor_strs:\n                tensor = TensorProto()\n                tensor.ParseFromString(s)\n                const_tensors.append(tensor)\n            return nodes, const_tensors\n        elif op_def.type in cls._special_operators:\n            translator = getattr(cls, cls._special_operators[op_def.type])\n        else:\n            translator = cls._common_caffe2_op_to_onnx_node\n        nodes = translator(op_def, shapes)\n        const_tensors = []\n        if isinstance(nodes, tuple):\n            nodes, const_tensors = nodes\n        if not isinstance(nodes, container_abcs.Iterable):\n            nodes = [nodes]\nreturn nodes, const_tensors \n\n</code></pre>\n<p>So from above code if operator doesn't support then it will go in else condition and through <strong>cls._common_caffe2_op_to_onnx_node</strong> it will find the caffe2 blacklist args which is present in frontend.py are</p>\n<pre><code># caffe2 arguments that are completely removed in onnx\n _blacklist_caffe2_args = {\n     'order': {b'NCHW'},\n     'cudnn_exhaustive_search': {0, 1},\n     'use_cudnn': {0, 1},\n}\n</code></pre>\n<p>So this is not the duplicate of <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"371463378\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/12815\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/pytorch/pytorch/pull/12815/hovercard\" href=\"https://github.com/pytorch/pytorch/pull/12815\">#12815</a> but the change is same.</p>", "body_text": "dupe of #12815\n\n@ezyang the pull request you are referring it was also from me. And this change is in different file #12815 it was from caffe2 source file and this change is in frontend.py. This change come in to picture when any operator who is not supported by onnx.\ndef caffe2_op_to_onnx_node(cls, op_def, shapes):\n        if C.support_onnx_export(op_def.type):\n            node_strs, tensor_strs = C.export_to_onnx(cls._dummy_name, op_def.SerializeToString(), shapes)\n            nodes = []\n            for s in node_strs:\n                node = NodeProto()\n                node.ParseFromString(s)\n                nodes.append(node)\n            const_tensors = []\n            for s in tensor_strs:\n                tensor = TensorProto()\n                tensor.ParseFromString(s)\n                const_tensors.append(tensor)\n            return nodes, const_tensors\n        elif op_def.type in cls._special_operators:\n            translator = getattr(cls, cls._special_operators[op_def.type])\n        else:\n            translator = cls._common_caffe2_op_to_onnx_node\n        nodes = translator(op_def, shapes)\n        const_tensors = []\n        if isinstance(nodes, tuple):\n            nodes, const_tensors = nodes\n        if not isinstance(nodes, container_abcs.Iterable):\n            nodes = [nodes]\nreturn nodes, const_tensors \n\n\nSo from above code if operator doesn't support then it will go in else condition and through cls._common_caffe2_op_to_onnx_node it will find the caffe2 blacklist args which is present in frontend.py are\n# caffe2 arguments that are completely removed in onnx\n _blacklist_caffe2_args = {\n     'order': {b'NCHW'},\n     'cudnn_exhaustive_search': {0, 1},\n     'use_cudnn': {0, 1},\n}\n\nSo this is not the duplicate of #12815 but the change is same.", "body": "> dupe of #12815\r\n\r\n@ezyang the pull request you are referring it was also from me. And this change is in different file #12815 it was from caffe2 source file and this change is in frontend.py. This change come in to picture when any operator who is not supported by onnx.\r\n\r\n```\r\ndef caffe2_op_to_onnx_node(cls, op_def, shapes):\r\n        if C.support_onnx_export(op_def.type):\r\n            node_strs, tensor_strs = C.export_to_onnx(cls._dummy_name, op_def.SerializeToString(), shapes)\r\n            nodes = []\r\n            for s in node_strs:\r\n                node = NodeProto()\r\n                node.ParseFromString(s)\r\n                nodes.append(node)\r\n            const_tensors = []\r\n            for s in tensor_strs:\r\n                tensor = TensorProto()\r\n                tensor.ParseFromString(s)\r\n                const_tensors.append(tensor)\r\n            return nodes, const_tensors\r\n        elif op_def.type in cls._special_operators:\r\n            translator = getattr(cls, cls._special_operators[op_def.type])\r\n        else:\r\n            translator = cls._common_caffe2_op_to_onnx_node\r\n        nodes = translator(op_def, shapes)\r\n        const_tensors = []\r\n        if isinstance(nodes, tuple):\r\n            nodes, const_tensors = nodes\r\n        if not isinstance(nodes, container_abcs.Iterable):\r\n            nodes = [nodes]\r\nreturn nodes, const_tensors \r\n\r\n```\r\nSo from above code if operator doesn't support then it will go in else condition and through **cls._common_caffe2_op_to_onnx_node** it will find the caffe2 blacklist args which is present in frontend.py are \r\n\r\n   ```\r\n # caffe2 arguments that are completely removed in onnx\r\n    _blacklist_caffe2_args = {\r\n        'order': {b'NCHW'},\r\n        'cudnn_exhaustive_search': {0, 1},\r\n        'use_cudnn': {0, 1},\r\n}\r\n```\r\n\r\nSo this is not the duplicate of #12815 but the change is same. "}