{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/271904923", "html_url": "https://github.com/pytorch/pytorch/issues/431#issuecomment-271904923", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/431", "id": 271904923, "node_id": "MDEyOklzc3VlQ29tbWVudDI3MTkwNDkyMw==", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "created_at": "2017-01-11T15:50:18Z", "updated_at": "2017-01-11T15:50:18Z", "author_association": "MEMBER", "body_html": "<p>I see, my solution would be to do something like this (I assume <code>allocate_multi_res</code> returns a dict with tensor values):</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-c1\">__init__</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>):\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> First layer temporary variables</span>\n    <span class=\"pl-c1\">self</span>.U1_c <span class=\"pl-k\">=</span> allocate_multi_res(<span class=\"pl-c1\">1</span>) \n    <span class=\"pl-c1\">self</span>.U1_r <span class=\"pl-k\">=</span> allocate_multi_res()\n    <span class=\"pl-k\">for</span> k, v <span class=\"pl-k\">in</span> <span class=\"pl-c1\">self</span>.U1_c.items():\n        <span class=\"pl-c1\">self</span>.register_buffer(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>U1_c_<span class=\"pl-pds\">'</span></span> <span class=\"pl-k\">+</span> <span class=\"pl-c1\">str</span>(k), v)\n    <span class=\"pl-k\">for</span> k, v <span class=\"pl-k\">in</span> <span class=\"pl-c1\">self</span>.U1_r.items():\n        <span class=\"pl-c1\">self</span>.register_buffer(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>U1_r_<span class=\"pl-pds\">'</span></span> <span class=\"pl-k\">+</span> <span class=\"pl-c1\">str</span>(k), v)\n   \n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> Second layer temporary variables</span>\n    <span class=\"pl-c1\">self</span>.U2_c <span class=\"pl-k\">=</span> allocate_multi_res(<span class=\"pl-c1\">1</span>)\n    <span class=\"pl-c1\">self</span>.U2_r <span class=\"pl-k\">=</span> allocate_multi_res()\n    <span class=\"pl-k\">for</span> k, v <span class=\"pl-k\">in</span> <span class=\"pl-c1\">self</span>.U2_c.items():\n        <span class=\"pl-c1\">self</span>.register_buffer(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>U2_c_<span class=\"pl-pds\">'</span></span> <span class=\"pl-k\">+</span> <span class=\"pl-c1\">str</span>(k), v)\n    <span class=\"pl-k\">for</span> k, v <span class=\"pl-k\">in</span> <span class=\"pl-c1\">self</span>.U2_r.items():\n        <span class=\"pl-c1\">self</span>.register_buffer(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>U2_r_<span class=\"pl-pds\">'</span></span> <span class=\"pl-k\">+</span> <span class=\"pl-c1\">str</span>(k), v)</pre></div>\n<p>then you can access these buffers both as <code>self.U2_r_0</code> and <code>self.U2_r[0]</code>. Is that ok?</p>", "body_text": "I see, my solution would be to do something like this (I assume allocate_multi_res returns a dict with tensor values):\ndef __init__(self):\n    # First layer temporary variables\n    self.U1_c = allocate_multi_res(1) \n    self.U1_r = allocate_multi_res()\n    for k, v in self.U1_c.items():\n        self.register_buffer('U1_c_' + str(k), v)\n    for k, v in self.U1_r.items():\n        self.register_buffer('U1_r_' + str(k), v)\n   \n    # Second layer temporary variables\n    self.U2_c = allocate_multi_res(1)\n    self.U2_r = allocate_multi_res()\n    for k, v in self.U2_c.items():\n        self.register_buffer('U2_c_' + str(k), v)\n    for k, v in self.U2_r.items():\n        self.register_buffer('U2_r_' + str(k), v)\nthen you can access these buffers both as self.U2_r_0 and self.U2_r[0]. Is that ok?", "body": "I see, my solution would be to do something like this (I assume `allocate_multi_res` returns a dict with tensor values):\r\n\r\n```python\r\ndef __init__(self):\r\n    # First layer temporary variables\r\n    self.U1_c = allocate_multi_res(1) \r\n    self.U1_r = allocate_multi_res()\r\n    for k, v in self.U1_c.items():\r\n        self.register_buffer('U1_c_' + str(k), v)\r\n    for k, v in self.U1_r.items():\r\n        self.register_buffer('U1_r_' + str(k), v)\r\n   \r\n    # Second layer temporary variables\r\n    self.U2_c = allocate_multi_res(1)\r\n    self.U2_r = allocate_multi_res()\r\n    for k, v in self.U2_c.items():\r\n        self.register_buffer('U2_c_' + str(k), v)\r\n    for k, v in self.U2_r.items():\r\n        self.register_buffer('U2_r_' + str(k), v)\r\n```\r\n\r\nthen you can access these buffers both as `self.U2_r_0` and `self.U2_r[0]`. Is that ok?"}