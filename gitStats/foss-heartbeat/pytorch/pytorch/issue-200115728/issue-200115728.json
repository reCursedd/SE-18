{"url": "https://api.github.com/repos/pytorch/pytorch/issues/431", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/431/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/431/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/431/events", "html_url": "https://github.com/pytorch/pytorch/issues/431", "id": 200115728, "node_id": "MDU6SXNzdWUyMDAxMTU3Mjg=", "number": 431, "title": "Making .apply_ recursive in nn.Modules", "user": {"login": "edouardoyallon", "id": 4263222, "node_id": "MDQ6VXNlcjQyNjMyMjI=", "avatar_url": "https://avatars3.githubusercontent.com/u/4263222?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edouardoyallon", "html_url": "https://github.com/edouardoyallon", "followers_url": "https://api.github.com/users/edouardoyallon/followers", "following_url": "https://api.github.com/users/edouardoyallon/following{/other_user}", "gists_url": "https://api.github.com/users/edouardoyallon/gists{/gist_id}", "starred_url": "https://api.github.com/users/edouardoyallon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edouardoyallon/subscriptions", "organizations_url": "https://api.github.com/users/edouardoyallon/orgs", "repos_url": "https://api.github.com/users/edouardoyallon/repos", "events_url": "https://api.github.com/users/edouardoyallon/events{/privacy}", "received_events_url": "https://api.github.com/users/edouardoyallon/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2017-01-11T14:59:59Z", "updated_at": "2017-01-11T16:16:29Z", "closed_at": "2017-01-11T16:16:29Z", "author_association": "NONE", "body_html": "<p>Hi!</p>\n<p>First of all, thanks for this amazing implementation. I'm concerned by the lines: <a href=\"https://github.com/pytorch/pytorch/blob/master/torch/nn/modules/module.py#L75-L87\">https://github.com/pytorch/pytorch/blob/master/torch/nn/modules/module.py#L75-L87</a></p>\n<p>Do you think it would possible to make the call recursive, such that in the init of a subclass of a module the following lines become legal:</p>\n<p>stamp = defaultdict(lambda:dict())<br>\nself.register_buffer('stamp_v',stamp)<br>\nself.stamp_v[0]=torch.Tensor()</p>\n<p>and then, a .cuda() call will turn all the variables in the OrderedDict into cuda variables? I don't know if this is in the spirit of this function!</p>\n<p>Thanks!</p>\n<p>Edouard</p>", "body_text": "Hi!\nFirst of all, thanks for this amazing implementation. I'm concerned by the lines: https://github.com/pytorch/pytorch/blob/master/torch/nn/modules/module.py#L75-L87\nDo you think it would possible to make the call recursive, such that in the init of a subclass of a module the following lines become legal:\nstamp = defaultdict(lambda:dict())\nself.register_buffer('stamp_v',stamp)\nself.stamp_v[0]=torch.Tensor()\nand then, a .cuda() call will turn all the variables in the OrderedDict into cuda variables? I don't know if this is in the spirit of this function!\nThanks!\nEdouard", "body": "Hi!\r\n\r\nFirst of all, thanks for this amazing implementation. I'm concerned by the lines: https://github.com/pytorch/pytorch/blob/master/torch/nn/modules/module.py#L75-L87\r\n\r\nDo you think it would possible to make the call recursive, such that in the init of a subclass of a module the following lines become legal:\r\n\r\nstamp = defaultdict(lambda:dict())\r\nself.register_buffer('stamp_v',stamp)\r\nself.stamp_v[0]=torch.Tensor()\r\n\r\nand then, a .cuda() call will turn all the variables in the OrderedDict into cuda variables? I don't know if this is in the spirit of this function!\r\n\r\nThanks!\r\n\r\nEdouard"}