{"url": "https://api.github.com/repos/pytorch/pytorch/issues/8062", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/8062/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/8062/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/8062/events", "html_url": "https://github.com/pytorch/pytorch/issues/8062", "id": 328696079, "node_id": "MDU6SXNzdWUzMjg2OTYwNzk=", "number": 8062, "title": "CrossEntropyLoss mishandles weights", "user": {"login": "bhancock8", "id": 12646092, "node_id": "MDQ6VXNlcjEyNjQ2MDky", "avatar_url": "https://avatars2.githubusercontent.com/u/12646092?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bhancock8", "html_url": "https://github.com/bhancock8", "followers_url": "https://api.github.com/users/bhancock8/followers", "following_url": "https://api.github.com/users/bhancock8/following{/other_user}", "gists_url": "https://api.github.com/users/bhancock8/gists{/gist_id}", "starred_url": "https://api.github.com/users/bhancock8/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bhancock8/subscriptions", "organizations_url": "https://api.github.com/users/bhancock8/orgs", "repos_url": "https://api.github.com/users/bhancock8/repos", "events_url": "https://api.github.com/users/bhancock8/events{/privacy}", "received_events_url": "https://api.github.com/users/bhancock8/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": {"login": "li-roy", "id": 8813817, "node_id": "MDQ6VXNlcjg4MTM4MTc=", "avatar_url": "https://avatars0.githubusercontent.com/u/8813817?v=4", "gravatar_id": "", "url": "https://api.github.com/users/li-roy", "html_url": "https://github.com/li-roy", "followers_url": "https://api.github.com/users/li-roy/followers", "following_url": "https://api.github.com/users/li-roy/following{/other_user}", "gists_url": "https://api.github.com/users/li-roy/gists{/gist_id}", "starred_url": "https://api.github.com/users/li-roy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/li-roy/subscriptions", "organizations_url": "https://api.github.com/users/li-roy/orgs", "repos_url": "https://api.github.com/users/li-roy/repos", "events_url": "https://api.github.com/users/li-roy/events{/privacy}", "received_events_url": "https://api.github.com/users/li-roy/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "li-roy", "id": 8813817, "node_id": "MDQ6VXNlcjg4MTM4MTc=", "avatar_url": "https://avatars0.githubusercontent.com/u/8813817?v=4", "gravatar_id": "", "url": "https://api.github.com/users/li-roy", "html_url": "https://github.com/li-roy", "followers_url": "https://api.github.com/users/li-roy/followers", "following_url": "https://api.github.com/users/li-roy/following{/other_user}", "gists_url": "https://api.github.com/users/li-roy/gists{/gist_id}", "starred_url": "https://api.github.com/users/li-roy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/li-roy/subscriptions", "organizations_url": "https://api.github.com/users/li-roy/orgs", "repos_url": "https://api.github.com/users/li-roy/repos", "events_url": "https://api.github.com/users/li-roy/events{/privacy}", "received_events_url": "https://api.github.com/users/li-roy/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 5, "created_at": "2018-06-02T00:28:04Z", "updated_at": "2018-08-02T16:37:24Z", "closed_at": null, "author_association": "NONE", "body_html": "<h2>Issue description</h2>\n<p>When a <code>weight</code> tensor is passed to CrossEntropyLoss, it exhibits unusual behavior, such as occasionally ignoring the weights, and returning different results when it averages losses over examples versus averaging them manually.</p>\n<h2>Code example</h2>\n<ol>\n<li>Incorrect size_average result</li>\n</ol>\n<pre><code>input = torch.tensor([\n    [-100.,  100.],\n    [-100.,  100.]\n])\ntarget = torch.tensor([0,1], dtype=torch.long)\nweights = torch.tensor([20,10], dtype=torch.float)\n\nce_noreduce = nn.CrossEntropyLoss(weight=weights, reduce=False)\nce_reduce = nn.CrossEntropyLoss(weight=weights, reduce=True, size_average=True)\n\nloss1 = ce_noreduce(input, target)\nloss2 = ce_reduce(input, target)\n\nprint(loss1)\nprint(loss1.mean())\nprint(loss2)\n</code></pre>\n<p>output:</p>\n<pre><code>tensor([ 4000.,    -0.])\ntensor(2000.)\ntensor(133.3333)\n</code></pre>\n<ol start=\"2\">\n<li>Weights ignored</li>\n</ol>\n<pre><code>input = torch.tensor([\n    [-1,  1, -1],\n    [-1,  1, -1],\n    [-1,  1, -1],\n], dtype=torch.float) * 100\ntarget = torch.tensor([0,0,1], dtype=torch.long)\nweights = torch.tensor([1,10,1], dtype=torch.float)\n\nce_noweights = nn.CrossEntropyLoss(weight=None, reduce=False)\nce_weights = nn.CrossEntropyLoss(weight=weights, reduce=False)\n\nloss1 = ce_noweights(input, target)\nloss2 = ce_weights(input, target)\n\nprint(loss1.mean())\nprint(loss2.mean())\n</code></pre>\n<p>output:</p>\n<pre><code>tensor(133.3333)\ntensor(133.3333)\n</code></pre>\n<h2>System Info</h2>\n<pre><code>PyTorch version: 0.4.0\nIs debug build: No\nCUDA used to build PyTorch: None\n\nOS: Mac OSX 10.13.4\nGCC version: Could not collect\nCMake version: Could not collect\n\nPython version: 3.6\nIs CUDA available: No\nCUDA runtime version: No CUDA\nGPU models and configuration: No CUDA\nNvidia driver version: No CUDA\ncuDNN version: No CUDA\n\nVersions of relevant libraries:\n[pip3] msgpack-numpy (0.4.1)\n[pip3] numpy (1.13.3)\n[pip3] numpydoc (0.7.0)\n[pip3] torch (0.3.0.post4)\n[pip3] torchfile (0.1.0)\n[pip3] torchnet (0.0.1)\n[pip3] torchtext (0.2.1)\n[pip3] torchvision (0.2.0)\n[conda] pytorch                   0.4.0           py36_cuda0.0_cudnn0.0_1    pytorch\n[conda] torchvision               0.2.1                    py36_1    pytorch\n</code></pre>", "body_text": "Issue description\nWhen a weight tensor is passed to CrossEntropyLoss, it exhibits unusual behavior, such as occasionally ignoring the weights, and returning different results when it averages losses over examples versus averaging them manually.\nCode example\n\nIncorrect size_average result\n\ninput = torch.tensor([\n    [-100.,  100.],\n    [-100.,  100.]\n])\ntarget = torch.tensor([0,1], dtype=torch.long)\nweights = torch.tensor([20,10], dtype=torch.float)\n\nce_noreduce = nn.CrossEntropyLoss(weight=weights, reduce=False)\nce_reduce = nn.CrossEntropyLoss(weight=weights, reduce=True, size_average=True)\n\nloss1 = ce_noreduce(input, target)\nloss2 = ce_reduce(input, target)\n\nprint(loss1)\nprint(loss1.mean())\nprint(loss2)\n\noutput:\ntensor([ 4000.,    -0.])\ntensor(2000.)\ntensor(133.3333)\n\n\nWeights ignored\n\ninput = torch.tensor([\n    [-1,  1, -1],\n    [-1,  1, -1],\n    [-1,  1, -1],\n], dtype=torch.float) * 100\ntarget = torch.tensor([0,0,1], dtype=torch.long)\nweights = torch.tensor([1,10,1], dtype=torch.float)\n\nce_noweights = nn.CrossEntropyLoss(weight=None, reduce=False)\nce_weights = nn.CrossEntropyLoss(weight=weights, reduce=False)\n\nloss1 = ce_noweights(input, target)\nloss2 = ce_weights(input, target)\n\nprint(loss1.mean())\nprint(loss2.mean())\n\noutput:\ntensor(133.3333)\ntensor(133.3333)\n\nSystem Info\nPyTorch version: 0.4.0\nIs debug build: No\nCUDA used to build PyTorch: None\n\nOS: Mac OSX 10.13.4\nGCC version: Could not collect\nCMake version: Could not collect\n\nPython version: 3.6\nIs CUDA available: No\nCUDA runtime version: No CUDA\nGPU models and configuration: No CUDA\nNvidia driver version: No CUDA\ncuDNN version: No CUDA\n\nVersions of relevant libraries:\n[pip3] msgpack-numpy (0.4.1)\n[pip3] numpy (1.13.3)\n[pip3] numpydoc (0.7.0)\n[pip3] torch (0.3.0.post4)\n[pip3] torchfile (0.1.0)\n[pip3] torchnet (0.0.1)\n[pip3] torchtext (0.2.1)\n[pip3] torchvision (0.2.0)\n[conda] pytorch                   0.4.0           py36_cuda0.0_cudnn0.0_1    pytorch\n[conda] torchvision               0.2.1                    py36_1    pytorch", "body": "## Issue description\r\nWhen a `weight` tensor is passed to CrossEntropyLoss, it exhibits unusual behavior, such as occasionally ignoring the weights, and returning different results when it averages losses over examples versus averaging them manually.\r\n\r\n## Code example\r\n1) Incorrect size_average result\r\n```\r\ninput = torch.tensor([\r\n    [-100.,  100.],\r\n    [-100.,  100.]\r\n])\r\ntarget = torch.tensor([0,1], dtype=torch.long)\r\nweights = torch.tensor([20,10], dtype=torch.float)\r\n\r\nce_noreduce = nn.CrossEntropyLoss(weight=weights, reduce=False)\r\nce_reduce = nn.CrossEntropyLoss(weight=weights, reduce=True, size_average=True)\r\n\r\nloss1 = ce_noreduce(input, target)\r\nloss2 = ce_reduce(input, target)\r\n\r\nprint(loss1)\r\nprint(loss1.mean())\r\nprint(loss2)\r\n```\r\noutput:\r\n```\r\ntensor([ 4000.,    -0.])\r\ntensor(2000.)\r\ntensor(133.3333)\r\n```\r\n\r\n2) Weights ignored\r\n```\r\ninput = torch.tensor([\r\n    [-1,  1, -1],\r\n    [-1,  1, -1],\r\n    [-1,  1, -1],\r\n], dtype=torch.float) * 100\r\ntarget = torch.tensor([0,0,1], dtype=torch.long)\r\nweights = torch.tensor([1,10,1], dtype=torch.float)\r\n\r\nce_noweights = nn.CrossEntropyLoss(weight=None, reduce=False)\r\nce_weights = nn.CrossEntropyLoss(weight=weights, reduce=False)\r\n\r\nloss1 = ce_noweights(input, target)\r\nloss2 = ce_weights(input, target)\r\n\r\nprint(loss1.mean())\r\nprint(loss2.mean())\r\n```\r\noutput:\r\n```\r\ntensor(133.3333)\r\ntensor(133.3333)\r\n```\r\n\r\n## System Info\r\n```\r\nPyTorch version: 0.4.0\r\nIs debug build: No\r\nCUDA used to build PyTorch: None\r\n\r\nOS: Mac OSX 10.13.4\r\nGCC version: Could not collect\r\nCMake version: Could not collect\r\n\r\nPython version: 3.6\r\nIs CUDA available: No\r\nCUDA runtime version: No CUDA\r\nGPU models and configuration: No CUDA\r\nNvidia driver version: No CUDA\r\ncuDNN version: No CUDA\r\n\r\nVersions of relevant libraries:\r\n[pip3] msgpack-numpy (0.4.1)\r\n[pip3] numpy (1.13.3)\r\n[pip3] numpydoc (0.7.0)\r\n[pip3] torch (0.3.0.post4)\r\n[pip3] torchfile (0.1.0)\r\n[pip3] torchnet (0.0.1)\r\n[pip3] torchtext (0.2.1)\r\n[pip3] torchvision (0.2.0)\r\n[conda] pytorch                   0.4.0           py36_cuda0.0_cudnn0.0_1    pytorch\r\n[conda] torchvision               0.2.1                    py36_1    pytorch\r\n```\r\n"}