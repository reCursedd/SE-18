{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/397730122", "html_url": "https://github.com/pytorch/pytorch/issues/8062#issuecomment-397730122", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/8062", "id": 397730122, "node_id": "MDEyOklzc3VlQ29tbWVudDM5NzczMDEyMg==", "user": {"login": "bhancock8", "id": 12646092, "node_id": "MDQ6VXNlcjEyNjQ2MDky", "avatar_url": "https://avatars2.githubusercontent.com/u/12646092?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bhancock8", "html_url": "https://github.com/bhancock8", "followers_url": "https://api.github.com/users/bhancock8/followers", "following_url": "https://api.github.com/users/bhancock8/following{/other_user}", "gists_url": "https://api.github.com/users/bhancock8/gists{/gist_id}", "starred_url": "https://api.github.com/users/bhancock8/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bhancock8/subscriptions", "organizations_url": "https://api.github.com/users/bhancock8/orgs", "repos_url": "https://api.github.com/users/bhancock8/repos", "events_url": "https://api.github.com/users/bhancock8/events{/privacy}", "received_events_url": "https://api.github.com/users/bhancock8/received_events", "type": "User", "site_admin": false}, "created_at": "2018-06-15T20:13:59Z", "updated_at": "2018-06-15T20:13:59Z", "author_association": "NONE", "body_html": "<p>Thanks for taking a look, <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=8813817\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/li-roy\">@li-roy</a>. Looking at the first example:</p>\n<p>It seems that there is a disconnect between the documentation and the implementation. The docs (<a href=\"https://pytorch.org/docs/stable/nn.html#torch.nn.CrossEntropyLoss\" rel=\"nofollow\">https://pytorch.org/docs/stable/nn.html#torch.nn.CrossEntropyLoss</a>) make no mention of dividing by the sum of the weights; they simply show the loss for each class being multiplied by its weight, which is the behavior I expected.</p>\n<p>It also seems surprising that applying the size-average operation manually (by passing reduce=False and then doing a .mean() operation) does not return the same result as passing reduce=True and size_average=True. This could be rectified by either dividing each individual example's loss by the weights as you suggested (even when reduce=False), or being consistent with the documentation as mentioned above and simply using the weights as raw multipliers. Let me know if you disagree. Thanks!</p>", "body_text": "Thanks for taking a look, @li-roy. Looking at the first example:\nIt seems that there is a disconnect between the documentation and the implementation. The docs (https://pytorch.org/docs/stable/nn.html#torch.nn.CrossEntropyLoss) make no mention of dividing by the sum of the weights; they simply show the loss for each class being multiplied by its weight, which is the behavior I expected.\nIt also seems surprising that applying the size-average operation manually (by passing reduce=False and then doing a .mean() operation) does not return the same result as passing reduce=True and size_average=True. This could be rectified by either dividing each individual example's loss by the weights as you suggested (even when reduce=False), or being consistent with the documentation as mentioned above and simply using the weights as raw multipliers. Let me know if you disagree. Thanks!", "body": "Thanks for taking a look, @li-roy. Looking at the first example:\r\n\r\nIt seems that there is a disconnect between the documentation and the implementation. The docs (https://pytorch.org/docs/stable/nn.html#torch.nn.CrossEntropyLoss) make no mention of dividing by the sum of the weights; they simply show the loss for each class being multiplied by its weight, which is the behavior I expected.\r\n\r\nIt also seems surprising that applying the size-average operation manually (by passing reduce=False and then doing a .mean() operation) does not return the same result as passing reduce=True and size_average=True. This could be rectified by either dividing each individual example's loss by the weights as you suggested (even when reduce=False), or being consistent with the documentation as mentioned above and simply using the weights as raw multipliers. Let me know if you disagree. Thanks!"}