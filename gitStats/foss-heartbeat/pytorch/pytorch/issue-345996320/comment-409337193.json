{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/409337193", "html_url": "https://github.com/pytorch/pytorch/issues/10043#issuecomment-409337193", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/10043", "id": 409337193, "node_id": "MDEyOklzc3VlQ29tbWVudDQwOTMzNzE5Mw==", "user": {"login": "vadimkantorov", "id": 1041752, "node_id": "MDQ6VXNlcjEwNDE3NTI=", "avatar_url": "https://avatars0.githubusercontent.com/u/1041752?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vadimkantorov", "html_url": "https://github.com/vadimkantorov", "followers_url": "https://api.github.com/users/vadimkantorov/followers", "following_url": "https://api.github.com/users/vadimkantorov/following{/other_user}", "gists_url": "https://api.github.com/users/vadimkantorov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vadimkantorov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vadimkantorov/subscriptions", "organizations_url": "https://api.github.com/users/vadimkantorov/orgs", "repos_url": "https://api.github.com/users/vadimkantorov/repos", "events_url": "https://api.github.com/users/vadimkantorov/events{/privacy}", "received_events_url": "https://api.github.com/users/vadimkantorov/received_events", "type": "User", "site_admin": false}, "created_at": "2018-07-31T19:19:43Z", "updated_at": "2018-07-31T19:45:47Z", "author_association": "NONE", "body_html": "<p>In NVidia's FastPhotoStyle they are solving CSC-sparse (but for COO the usecase is same I guess) linear systems <code>Ax = b</code> for several different <code>b</code>'s (in order to avoid computing matrix inverse; matrix <code>A</code> is LU-factorized at solver creation time), where <code>A</code> is sparse, in order to smooth image RGB channels with respect to some particular graph laplacian (matting laplacian in their case):</p>\n<p><a href=\"https://github.com/NVIDIA/FastPhotoStyle/blob/master/photo_smooth.py#L52\">https://github.com/NVIDIA/FastPhotoStyle/blob/master/photo_smooth.py#L52</a></p>", "body_text": "In NVidia's FastPhotoStyle they are solving CSC-sparse (but for COO the usecase is same I guess) linear systems Ax = b for several different b's (in order to avoid computing matrix inverse; matrix A is LU-factorized at solver creation time), where A is sparse, in order to smooth image RGB channels with respect to some particular graph laplacian (matting laplacian in their case):\nhttps://github.com/NVIDIA/FastPhotoStyle/blob/master/photo_smooth.py#L52", "body": "In NVidia's FastPhotoStyle they are solving CSC-sparse (but for COO the usecase is same I guess) linear systems `Ax = b` for several different `b`'s (in order to avoid computing matrix inverse; matrix `A` is LU-factorized at solver creation time), where `A` is sparse, in order to smooth image RGB channels with respect to some particular graph laplacian (matting laplacian in their case):\r\n\r\nhttps://github.com/NVIDIA/FastPhotoStyle/blob/master/photo_smooth.py#L52"}