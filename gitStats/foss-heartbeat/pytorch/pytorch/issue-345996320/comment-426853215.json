{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/426853215", "html_url": "https://github.com/pytorch/pytorch/issues/10043#issuecomment-426853215", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/10043", "id": 426853215, "node_id": "MDEyOklzc3VlQ29tbWVudDQyNjg1MzIxNQ==", "user": {"login": "weiyangfb", "id": 38509346, "node_id": "MDQ6VXNlcjM4NTA5MzQ2", "avatar_url": "https://avatars1.githubusercontent.com/u/38509346?v=4", "gravatar_id": "", "url": "https://api.github.com/users/weiyangfb", "html_url": "https://github.com/weiyangfb", "followers_url": "https://api.github.com/users/weiyangfb/followers", "following_url": "https://api.github.com/users/weiyangfb/following{/other_user}", "gists_url": "https://api.github.com/users/weiyangfb/gists{/gist_id}", "starred_url": "https://api.github.com/users/weiyangfb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/weiyangfb/subscriptions", "organizations_url": "https://api.github.com/users/weiyangfb/orgs", "repos_url": "https://api.github.com/users/weiyangfb/repos", "events_url": "https://api.github.com/users/weiyangfb/events{/privacy}", "received_events_url": "https://api.github.com/users/weiyangfb/received_events", "type": "User", "site_admin": false}, "created_at": "2018-10-04T01:12:19Z", "updated_at": "2018-10-04T01:12:19Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=11088808\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/AntoinePrv\">@AntoinePrv</a> You use case makes sense! For your graph input, I wonder if <code>sparse_matmul()</code> with autograd support is sufficient? Note that by autograd support, it behaves the same as you described: only allow gradients for nnz weights during backward. <code>softmax()</code> across row is doable if we mask out the zero locations and only normalize over nnz locations, maybe call this <code>sparse_softmax()</code></p>", "body_text": "@AntoinePrv You use case makes sense! For your graph input, I wonder if sparse_matmul() with autograd support is sufficient? Note that by autograd support, it behaves the same as you described: only allow gradients for nnz weights during backward. softmax() across row is doable if we mask out the zero locations and only normalize over nnz locations, maybe call this sparse_softmax()", "body": "@AntoinePrv You use case makes sense! For your graph input, I wonder if `sparse_matmul()` with autograd support is sufficient? Note that by autograd support, it behaves the same as you described: only allow gradients for nnz weights during backward. `softmax()` across row is doable if we mask out the zero locations and only normalize over nnz locations, maybe call this `sparse_softmax()`"}