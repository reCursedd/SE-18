{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/427453077", "html_url": "https://github.com/pytorch/pytorch/issues/10043#issuecomment-427453077", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/10043", "id": 427453077, "node_id": "MDEyOklzc3VlQ29tbWVudDQyNzQ1MzA3Nw==", "user": {"login": "djsaunde", "id": 1245942, "node_id": "MDQ6VXNlcjEyNDU5NDI=", "avatar_url": "https://avatars3.githubusercontent.com/u/1245942?v=4", "gravatar_id": "", "url": "https://api.github.com/users/djsaunde", "html_url": "https://github.com/djsaunde", "followers_url": "https://api.github.com/users/djsaunde/followers", "following_url": "https://api.github.com/users/djsaunde/following{/other_user}", "gists_url": "https://api.github.com/users/djsaunde/gists{/gist_id}", "starred_url": "https://api.github.com/users/djsaunde/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/djsaunde/subscriptions", "organizations_url": "https://api.github.com/users/djsaunde/orgs", "repos_url": "https://api.github.com/users/djsaunde/repos", "events_url": "https://api.github.com/users/djsaunde/events{/privacy}", "received_events_url": "https://api.github.com/users/djsaunde/received_events", "type": "User", "site_admin": false}, "created_at": "2018-10-05T18:10:44Z", "updated_at": "2018-10-05T18:10:44Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=38509346\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/weiyangfb\">@weiyangfb</a> I'm trying to take the outer product of two sparse vectors. The example I showed above to illustrate uses the <code>scipy.sparse.coo_matrix</code> to do the outer product of two vectors with 10000 elements. Here's a more compact example:</p>\n<pre><code>In [30]: x, y = np.random.binomial(2, 0.01, 10000), np.random.binomial(2, 0.01, 10000)\n\nIn [31]: x, y = coo_matrix(x), coo_matrix(y)\n\nIn [32]: np.outer(x.T, y)\nOut[32]: \narray([[&lt;10000x10000 sparse matrix of type '&lt;class 'numpy.int64'&gt;'\n\twith 39644 stored elements in Compressed Sparse Row format&gt;]],\n      dtype=object)\n</code></pre>\n<p>For the time being, I'm using <code>torch.ger</code> on dense vectors, but I imagine I would get a speedup by using sparse vectors.</p>", "body_text": "@weiyangfb I'm trying to take the outer product of two sparse vectors. The example I showed above to illustrate uses the scipy.sparse.coo_matrix to do the outer product of two vectors with 10000 elements. Here's a more compact example:\nIn [30]: x, y = np.random.binomial(2, 0.01, 10000), np.random.binomial(2, 0.01, 10000)\n\nIn [31]: x, y = coo_matrix(x), coo_matrix(y)\n\nIn [32]: np.outer(x.T, y)\nOut[32]: \narray([[<10000x10000 sparse matrix of type '<class 'numpy.int64'>'\n\twith 39644 stored elements in Compressed Sparse Row format>]],\n      dtype=object)\n\nFor the time being, I'm using torch.ger on dense vectors, but I imagine I would get a speedup by using sparse vectors.", "body": "@weiyangfb I'm trying to take the outer product of two sparse vectors. The example I showed above to illustrate uses the `scipy.sparse.coo_matrix` to do the outer product of two vectors with 10000 elements. Here's a more compact example:\r\n\r\n```\r\nIn [30]: x, y = np.random.binomial(2, 0.01, 10000), np.random.binomial(2, 0.01, 10000)\r\n\r\nIn [31]: x, y = coo_matrix(x), coo_matrix(y)\r\n\r\nIn [32]: np.outer(x.T, y)\r\nOut[32]: \r\narray([[<10000x10000 sparse matrix of type '<class 'numpy.int64'>'\r\n\twith 39644 stored elements in Compressed Sparse Row format>]],\r\n      dtype=object)\r\n```\r\n\r\nFor the time being, I'm using `torch.ger` on dense vectors, but I imagine I would get a speedup by using sparse vectors."}