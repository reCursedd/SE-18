{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/410025171", "html_url": "https://github.com/pytorch/pytorch/issues/10043#issuecomment-410025171", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/10043", "id": 410025171, "node_id": "MDEyOklzc3VlQ29tbWVudDQxMDAyNTE3MQ==", "user": {"login": "emerali", "id": 6067067, "node_id": "MDQ6VXNlcjYwNjcwNjc=", "avatar_url": "https://avatars2.githubusercontent.com/u/6067067?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emerali", "html_url": "https://github.com/emerali", "followers_url": "https://api.github.com/users/emerali/followers", "following_url": "https://api.github.com/users/emerali/following{/other_user}", "gists_url": "https://api.github.com/users/emerali/gists{/gist_id}", "starred_url": "https://api.github.com/users/emerali/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emerali/subscriptions", "organizations_url": "https://api.github.com/users/emerali/orgs", "repos_url": "https://api.github.com/users/emerali/repos", "events_url": "https://api.github.com/users/emerali/events{/privacy}", "received_events_url": "https://api.github.com/users/emerali/received_events", "type": "User", "site_admin": false}, "created_at": "2018-08-02T18:32:43Z", "updated_at": "2018-08-02T18:32:43Z", "author_association": "NONE", "body_html": "<p>I'd like to be able to implement the contents of <a href=\"https://www.nature.com/articles/s41467-018-04316-3\" rel=\"nofollow\">this paper</a> using PyTorch.</p>\n<p>I'm mostly interested in RBMs, so do not personally need autograd support (since for RBMs, I have to compute and assign the gradients manually). But the Feed Forward/Convolutional Neural Network parts will need autograd.</p>\n<p>Other than that, sparse initialization is needed. I'm not sure if <code>torch.nn.init.sparse_</code> currently supports Sparse Tensors, but that's approximately what is needed. We also need to be able to discard the N weights which are closest to zero, and randomly reinitialize another N of the weights which are zero, but I think that can (for now) be done by the user by converting the weight matrix to a numpy array and back to a sparse weight matrix.</p>", "body_text": "I'd like to be able to implement the contents of this paper using PyTorch.\nI'm mostly interested in RBMs, so do not personally need autograd support (since for RBMs, I have to compute and assign the gradients manually). But the Feed Forward/Convolutional Neural Network parts will need autograd.\nOther than that, sparse initialization is needed. I'm not sure if torch.nn.init.sparse_ currently supports Sparse Tensors, but that's approximately what is needed. We also need to be able to discard the N weights which are closest to zero, and randomly reinitialize another N of the weights which are zero, but I think that can (for now) be done by the user by converting the weight matrix to a numpy array and back to a sparse weight matrix.", "body": "I'd like to be able to implement the contents of [this paper](https://www.nature.com/articles/s41467-018-04316-3) using PyTorch.\r\n\r\nI'm mostly interested in RBMs, so do not personally need autograd support (since for RBMs, I have to compute and assign the gradients manually). But the Feed Forward/Convolutional Neural Network parts will need autograd.\r\n\r\nOther than that, sparse initialization is needed. I'm not sure if `torch.nn.init.sparse_` currently supports Sparse Tensors, but that's approximately what is needed. We also need to be able to discard the N weights which are closest to zero, and randomly reinitialize another N of the weights which are zero, but I think that can (for now) be done by the user by converting the weight matrix to a numpy array and back to a sparse weight matrix."}