{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/427442769", "html_url": "https://github.com/pytorch/pytorch/issues/10043#issuecomment-427442769", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/10043", "id": 427442769, "node_id": "MDEyOklzc3VlQ29tbWVudDQyNzQ0Mjc2OQ==", "user": {"login": "weiyangfb", "id": 38509346, "node_id": "MDQ6VXNlcjM4NTA5MzQ2", "avatar_url": "https://avatars1.githubusercontent.com/u/38509346?v=4", "gravatar_id": "", "url": "https://api.github.com/users/weiyangfb", "html_url": "https://github.com/weiyangfb", "followers_url": "https://api.github.com/users/weiyangfb/followers", "following_url": "https://api.github.com/users/weiyangfb/following{/other_user}", "gists_url": "https://api.github.com/users/weiyangfb/gists{/gist_id}", "starred_url": "https://api.github.com/users/weiyangfb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/weiyangfb/subscriptions", "organizations_url": "https://api.github.com/users/weiyangfb/orgs", "repos_url": "https://api.github.com/users/weiyangfb/repos", "events_url": "https://api.github.com/users/weiyangfb/events{/privacy}", "received_events_url": "https://api.github.com/users/weiyangfb/received_events", "type": "User", "site_admin": false}, "created_at": "2018-10-05T17:36:02Z", "updated_at": "2018-10-05T17:36:02Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1245942\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/djsaunde\">@djsaunde</a> have you tried <code>sparse_mask</code>?</p>\n<pre><code>x = torch.rand(1000)\ny = torch.rand(1000).bernoulli().byte()\ns = torch.sparse.ByteTensor(y.nonzero().t(), y[y == 1], y.size()).coalesce()\n\nx_at_s = x.sparse_mask(s)\n</code></pre>", "body_text": "@djsaunde have you tried sparse_mask?\nx = torch.rand(1000)\ny = torch.rand(1000).bernoulli().byte()\ns = torch.sparse.ByteTensor(y.nonzero().t(), y[y == 1], y.size()).coalesce()\n\nx_at_s = x.sparse_mask(s)", "body": "@djsaunde have you tried `sparse_mask`?\r\n```\r\nx = torch.rand(1000)\r\ny = torch.rand(1000).bernoulli().byte()\r\ns = torch.sparse.ByteTensor(y.nonzero().t(), y[y == 1], y.size()).coalesce()\r\n\r\nx_at_s = x.sparse_mask(s)\r\n```"}