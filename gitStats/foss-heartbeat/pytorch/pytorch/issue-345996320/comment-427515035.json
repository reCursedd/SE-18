{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/427515035", "html_url": "https://github.com/pytorch/pytorch/issues/10043#issuecomment-427515035", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/10043", "id": 427515035, "node_id": "MDEyOklzc3VlQ29tbWVudDQyNzUxNTAzNQ==", "user": {"login": "emerali", "id": 6067067, "node_id": "MDQ6VXNlcjYwNjcwNjc=", "avatar_url": "https://avatars2.githubusercontent.com/u/6067067?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emerali", "html_url": "https://github.com/emerali", "followers_url": "https://api.github.com/users/emerali/followers", "following_url": "https://api.github.com/users/emerali/following{/other_user}", "gists_url": "https://api.github.com/users/emerali/gists{/gist_id}", "starred_url": "https://api.github.com/users/emerali/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emerali/subscriptions", "organizations_url": "https://api.github.com/users/emerali/orgs", "repos_url": "https://api.github.com/users/emerali/repos", "events_url": "https://api.github.com/users/emerali/events{/privacy}", "received_events_url": "https://api.github.com/users/emerali/received_events", "type": "User", "site_admin": false}, "created_at": "2018-10-05T22:25:38Z", "updated_at": "2018-10-05T22:25:38Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=38509346\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/weiyangfb\">@weiyangfb</a> for RBMs I need <code>F.linear(D, S, D)</code>, or <code>addmm</code>, as well as softplus, sigmoid, <code>S.sum(dim)</code> and <code>S.abs()</code> if they haven't already been implemented.</p>\n<p>Also <code>torch.kthvalue(S)</code> as well as <code>S.flatten()</code> and some comparison operations like &lt;= and &gt;=. Though to be fair, this part is only done once per epoch, so I can get away with converting to a dense weight matrix temporarily and then back to sparse.</p>\n<p>As for init functions, if you could just get <code>torch.nn.init.sparse_(S, ...)</code> working that would be sweet</p>", "body_text": "@weiyangfb for RBMs I need F.linear(D, S, D), or addmm, as well as softplus, sigmoid, S.sum(dim) and S.abs() if they haven't already been implemented.\nAlso torch.kthvalue(S) as well as S.flatten() and some comparison operations like <= and >=. Though to be fair, this part is only done once per epoch, so I can get away with converting to a dense weight matrix temporarily and then back to sparse.\nAs for init functions, if you could just get torch.nn.init.sparse_(S, ...) working that would be sweet", "body": "@weiyangfb for RBMs I need `F.linear(D, S, D)`, or `addmm`, as well as softplus, sigmoid, `S.sum(dim)` and `S.abs()` if they haven't already been implemented. \r\n\r\nAlso `torch.kthvalue(S)` as well as `S.flatten()` and some comparison operations like <= and >=. Though to be fair, this part is only done once per epoch, so I can get away with converting to a dense weight matrix temporarily and then back to sparse.\r\n\r\nAs for init functions, if you could just get `torch.nn.init.sparse_(S, ...)` working that would be sweet\r\n\r\n"}