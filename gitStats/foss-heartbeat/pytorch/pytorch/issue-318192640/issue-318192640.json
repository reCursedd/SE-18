{"url": "https://api.github.com/repos/pytorch/pytorch/issues/7009", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/7009/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/7009/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/7009/events", "html_url": "https://github.com/pytorch/pytorch/pull/7009", "id": 318192640, "node_id": "MDExOlB1bGxSZXF1ZXN0MTg0NDYwOTM2", "number": 7009, "title": "Add support for type annotations in Python functions", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 679953983, "node_id": "MDU6TGFiZWw2Nzk5NTM5ODM=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/jit", "name": "jit", "color": "c5def5", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-04-26T20:53:06Z", "updated_at": "2018-11-23T15:43:25Z", "closed_at": "2018-05-04T08:54:20Z", "author_association": "MEMBER", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/7009", "html_url": "https://github.com/pytorch/pytorch/pull/7009", "diff_url": "https://github.com/pytorch/pytorch/pull/7009.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/7009.patch"}, "body_html": "<p>When a call to a Python function is resolved, we now actually actively look for type annotations/use the source to guide the type checks instead of blindly trusting the user, and assuming that everything is a tensor. Both the fancy Py3.5+ annotation syntax, and the backwards-compatibly <code># type:</code> comments are supported.</p>\n<p>As an extra benefit I've cleaned up the <code>frame_id</code> mess so that we now pass numbers relative to the current frame everywhere (previously they were absolute wrt. the place where we called <code>inspect.stack()</code>). This finally allows us to use <code>checkScript</code> for script objects that have references to Python functions surrounding them.</p>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=370202\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/zdevito\">@zdevito</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=4685384\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/jamesr66a\">@jamesr66a</a></p>", "body_text": "When a call to a Python function is resolved, we now actually actively look for type annotations/use the source to guide the type checks instead of blindly trusting the user, and assuming that everything is a tensor. Both the fancy Py3.5+ annotation syntax, and the backwards-compatibly # type: comments are supported.\nAs an extra benefit I've cleaned up the frame_id mess so that we now pass numbers relative to the current frame everywhere (previously they were absolute wrt. the place where we called inspect.stack()). This finally allows us to use checkScript for script objects that have references to Python functions surrounding them.\n@zdevito @jamesr66a", "body": "When a call to a Python function is resolved, we now actually actively look for type annotations/use the source to guide the type checks instead of blindly trusting the user, and assuming that everything is a tensor. Both the fancy Py3.5+ annotation syntax, and the backwards-compatibly `# type:` comments are supported.\r\n\r\nAs an extra benefit I've cleaned up the `frame_id` mess so that we now pass numbers relative to the current frame everywhere (previously they were absolute wrt. the place where we called `inspect.stack()`). This finally allows us to use `checkScript` for script objects that have references to Python functions surrounding them.\r\n\r\n@zdevito @jamesr66a "}