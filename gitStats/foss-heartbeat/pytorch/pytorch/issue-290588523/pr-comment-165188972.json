{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/165188972", "pull_request_review_id": 93085728, "id": 165188972, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NTE4ODk3Mg==", "diff_hunk": "@@ -366,100 +349,79 @@ static void _wrap_outputs(THPFunction *self, t2var_type &t2var,\n     self->output_info.reserve(num_outputs);\n   }\n \n-  auto shared_pairs = _parse_shared_pairs(self, t2var);\n+  std::unordered_set<PyObject*> inputs;\n+  int num_inputs = PyTuple_GET_SIZE(inputs_tuple);\n+  for (int i = 0; i < num_inputs; i++) {\n+    inputs.emplace(PyTuple_GET_ITEM(inputs_tuple, i));\n+  }\n+\n   auto non_differentiable = _parse_non_differentiable(self);\n+  auto dirty_inputs = _parse_dirty_inputs(self);\n \n-  // Given an output tensor, find the input Variable with which it shares storage\n-  auto get_shared_base = [&](PyObject* tensor) -> Variable {\n-    auto input_it = t2var.find(tensor);\n-    if (input_it != t2var.end()) {\n-      // If the output is an input treat that as the base\n-      return input_it->second->cdata;\n+  auto as_variable = [&](PyObject* obj, int i) -> Variable {\n+    if (THPVariable_Check(obj)) {\n+      return ((THPVariable*)obj)->cdata;\n     }\n-    auto it = shared_pairs.find(tensor);\n-    if (it != shared_pairs.end()) {\n-      // It's explicitly marked as shared via mark_shared_storage\n-      return it->second->cdata;\n+    if (THPModule_isTensor(obj)) {\n+      // temporarily wrap tensors as variables until the classes are merged\n+      return make_variable(createTensor(obj));\n     }\n-    return Variable();\n+    throw TypeError(\"%s.forward: expected Variable (got %s) for return value %d\",\n+        Py_TYPE(self)->tp_name, Py_TYPE(obj)->tp_name, i);\n   };\n \n-  // Wraps an output Tensor in a Variable or returns the previous wrapper in\n-  // the case of in-place modification.\n-  auto wrap_output = [&](at::Tensor data, Variable prev, int output_nr, bool is_modified, bool is_non_differentiable) -> Variable {\n+  // Sets the grad_fn and output_nr of an output Variable.\n+  auto set_history = [&](Variable& var, int output_nr, bool is_input, bool is_modified,\n+                         bool is_non_differentiable) {\n     if (is_non_differentiable) {\n-      return make_variable(std::move(data));\n-    }\n-    if (!prev.defined()) {\n-      return make_variable(std::move(data), output_nr, cdata);\n-    }\n-    if (is_modified) {\n-      if (prev.is_leaf() && prev.requires_grad()) {\n+      var.detach_();\n+    } else if (is_modified) {\n+      if (var.is_leaf() && var.requires_grad()) {\n         throw std::runtime_error(\"a leaf Variable that requires grad has been used in an in-place operation.\");\n       }\n       // If the input was modified, transplant the grad_fn in the graph:\n       // grad_fn <- variable <- self  ==>  grad_fn <- self <- variable\n-      prev.get()->grad.reset();\n-      prev.get()->hooks.clear();\n-      if (auto grad_acc_fn = prev.get()->grad_accumulator.lock()) {\n+      var.get()->grad.reset();\n+      var.get()->hooks.clear();\n+      if (auto grad_acc_fn = var.get()->grad_accumulator.lock()) {\n         auto grad_acc = dynamic_cast<AccumulateGrad*>(grad_acc_fn.get());\n         grad_acc->variable.reset();\n       }\n       if (cdata) {\n-        prev.rebase_history(output_nr, cdata);\n+        var.rebase_history(output_nr, cdata);\n       }\n-      return prev;\n+    } else if (is_input) {\n+      // An input has been returned, but it wasn't modified. Return it as a view\n+      // so that we can attach a new grad_fn to the Variable.\n+      var = var.slice();\n+      var.get()->output_nr = output_nr;\n+      var.get()->_grad_fn = cdata;\n+    } else if (cdata) {\n+      var.get()->output_nr = output_nr;\n+      var.get()->_grad_fn = cdata;\n     }\n-    // An input has been returned, but it wasn't modified. Return it as a view\n-    // so that we can attach a new grad_fn to the Variable.\n-    return make_variable_view(std::move(prev), std::move(data), output_nr, cdata);\n   };\n \n-  t2var_type output2var;\n   for (int i = 0; i < num_outputs; i++) {\n-    PyObject *output = PyTuple_GET_ITEM(raw_output, i);\n+    PyObject* obj = PyTuple_GET_ITEM(raw_output, i);\n \n-    THPVariable* output_var;\n-    auto it = output2var.find(output);\n-    if (it != output2var.end()) {\n-      output_var = it->second;\n-      Py_INCREF(output_var);\n-    } else {\n-      // Wrap the output in a Variable\n-      bool is_modified = dirty_inputs.count(output) > 0;\n-      bool is_non_differentiable = non_differentiable.count(output) > 0;\n-      Variable var = wrap_output(\n-          torch::createTensor(output),\n-          get_shared_base(output),\n-          i,\n-          is_modified,\n-          is_non_differentiable);\n-\n-      output_var = (THPVariable*)THPVariable_Wrap(var);\n-      if (!output_var) throw python_error();\n-\n-      // We already have the data tensor wrapped as a PyObject*\n-      Py_INCREF(output);\n-      Py_CLEAR(output_var->data);\n-      output_var->data = output;\n-\n-      output2var[output] = output_var;\n-    }\n+    bool is_input = inputs.count(obj) > 0;\n+    bool is_modified = std::find(dirty_inputs.begin(), dirty_inputs.end(), obj) != dirty_inputs.end();\n+    bool is_non_differentiable = non_differentiable.count(obj) > 0;\n+\n+    auto var = as_variable(obj, i);\n+    set_history(var, i, is_input, is_modified, is_non_differentiable);", "path": "torch/csrc/autograd/python_function.cpp", "position": null, "original_position": 253, "commit_id": "a52a6a4055e7bc0053fbc4c65f217b3cb39f0b29", "original_commit_id": "8cb226fa8f53f4b48cd6b5f19b09ac0268c25b6d", "user": {"login": "colesbury", "id": 655866, "node_id": "MDQ6VXNlcjY1NTg2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/655866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colesbury", "html_url": "https://github.com/colesbury", "followers_url": "https://api.github.com/users/colesbury/followers", "following_url": "https://api.github.com/users/colesbury/following{/other_user}", "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions", "organizations_url": "https://api.github.com/users/colesbury/orgs", "repos_url": "https://api.github.com/users/colesbury/repos", "events_url": "https://api.github.com/users/colesbury/events{/privacy}", "received_events_url": "https://api.github.com/users/colesbury/received_events", "type": "User", "site_admin": false}, "body": "I think we should prefer returning the same object when possible. I've added explicit tests for this, although other tests triggered this code path too.\r\n\r\nWhen var is a view and is modified, this raises an exception because we don't support in-place modifications to views from functions that return multiple values.\r\n\r\nOtherwise, the last call to set_history wins. All that will change is the `output_nr` which doesn't really matter.", "created_at": "2018-01-31T21:16:03Z", "updated_at": "2018-11-23T15:38:52Z", "html_url": "https://github.com/pytorch/pytorch/pull/4786#discussion_r165188972", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4786", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/165188972"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/4786#discussion_r165188972"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4786"}}, "body_html": "<p>I think we should prefer returning the same object when possible. I've added explicit tests for this, although other tests triggered this code path too.</p>\n<p>When var is a view and is modified, this raises an exception because we don't support in-place modifications to views from functions that return multiple values.</p>\n<p>Otherwise, the last call to set_history wins. All that will change is the <code>output_nr</code> which doesn't really matter.</p>", "body_text": "I think we should prefer returning the same object when possible. I've added explicit tests for this, although other tests triggered this code path too.\nWhen var is a view and is modified, this raises an exception because we don't support in-place modifications to views from functions that return multiple values.\nOtherwise, the last call to set_history wins. All that will change is the output_nr which doesn't really matter.", "in_reply_to_id": 163787903}