{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/163545221", "pull_request_review_id": 91170538, "id": 163545221, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MzU0NTIyMQ==", "diff_hunk": "@@ -366,100 +349,82 @@ static void _wrap_outputs(THPFunction *self, t2var_type &t2var,\n     self->output_info.reserve(num_outputs);\n   }\n \n-  auto shared_pairs = _parse_shared_pairs(self, t2var);\n+  std::unordered_set<PyObject*> inputs;\n+  int num_inputs = PyTuple_GET_SIZE(inputs_tuple);\n+  for (int i = 0; i < num_inputs; i++) {\n+    inputs.emplace(PyTuple_GET_ITEM(inputs_tuple, i));\n+  }\n+\n   auto non_differentiable = _parse_non_differentiable(self);\n+  auto dirty_inputs = _parse_dirty_inputs(self);\n \n-  // Given an output tensor, find the input Variable with which it shares storage\n-  auto get_shared_base = [&](PyObject* tensor) -> Variable {\n-    auto input_it = t2var.find(tensor);\n-    if (input_it != t2var.end()) {\n-      // If the output is an input treat that as the base\n-      return input_it->second->cdata;\n+  auto as_variable = [&](PyObject* obj, int i) -> Variable {\n+    if (THPVariable_Check(obj)) {\n+      return ((THPVariable*)obj)->cdata;\n     }\n-    auto it = shared_pairs.find(tensor);\n-    if (it != shared_pairs.end()) {\n-      // It's explicitly marked as shared via mark_shared_storage\n-      return it->second->cdata;\n+    if (THPModule_isTensor(obj)) {\n+      // temporarily wrap tensors as variables until the classes are merged\n+      return make_variable(createTensor(obj));\n     }\n-    return Variable();\n+    throw TypeError(\"%s.forward: expected Variable (got %s) for return value %d\",\n+        Py_TYPE(self)->tp_name, Py_TYPE(obj)->tp_name, i);\n   };\n \n   // Wraps an output Tensor in a Variable or returns the previous wrapper in\n   // the case of in-place modification.\n-  auto wrap_output = [&](at::Tensor data, Variable prev, int output_nr, bool is_modified, bool is_non_differentiable) -> Variable {\n+  auto set_history = [&](Variable& var, int output_nr, bool is_input, bool is_modified,\n+                         bool is_non_differentiable) {\n     if (is_non_differentiable) {\n-      return make_variable(std::move(data));\n-    }\n-    if (!prev.defined()) {\n-      return make_variable(std::move(data), output_nr, cdata);\n-    }\n-    if (is_modified) {\n-      if (prev.is_leaf() && prev.requires_grad()) {\n+      var.detach_();\n+    } else if (is_modified) {\n+      if (var.is_leaf() && var.requires_grad()) {\n         throw std::runtime_error(\"a leaf Variable that requires grad has been used in an in-place operation.\");\n       }\n       // If the input was modified, transplant the grad_fn in the graph:\n       // grad_fn <- variable <- self  ==>  grad_fn <- self <- variable\n-      prev.get()->grad.reset();\n-      prev.get()->hooks.clear();\n-      if (auto grad_acc_fn = prev.get()->grad_accumulator.lock()) {\n+      var.get()->grad.reset();\n+      var.get()->hooks.clear();\n+      if (auto grad_acc_fn = var.get()->grad_accumulator.lock()) {\n         auto grad_acc = dynamic_cast<AccumulateGrad*>(grad_acc_fn.get());\n         grad_acc->variable.reset();\n       }\n       if (cdata) {\n-        prev.rebase_history(output_nr, cdata);\n+        var.rebase_history(output_nr, cdata);", "path": "torch/csrc/autograd/python_function.cpp", "position": 199, "original_position": 198, "commit_id": "a52a6a4055e7bc0053fbc4c65f217b3cb39f0b29", "original_commit_id": "6969af0171d696f4e1fff36692502b2e7a22c592", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "`rebase_history` has a special implementation for views, right?", "created_at": "2018-01-24T13:26:30Z", "updated_at": "2018-11-23T15:38:31Z", "html_url": "https://github.com/pytorch/pytorch/pull/4786#discussion_r163545221", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4786", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/163545221"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/4786#discussion_r163545221"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4786"}}, "body_html": "<p><code>rebase_history</code> has a special implementation for views, right?</p>", "body_text": "rebase_history has a special implementation for views, right?"}