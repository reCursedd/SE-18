{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/254011790", "html_url": "https://github.com/pytorch/pytorch/issues/89#issuecomment-254011790", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/89", "id": 254011790, "node_id": "MDEyOklzc3VlQ29tbWVudDI1NDAxMTc5MA==", "user": {"login": "colesbury", "id": 655866, "node_id": "MDQ6VXNlcjY1NTg2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/655866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colesbury", "html_url": "https://github.com/colesbury", "followers_url": "https://api.github.com/users/colesbury/followers", "following_url": "https://api.github.com/users/colesbury/following{/other_user}", "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions", "organizations_url": "https://api.github.com/users/colesbury/orgs", "repos_url": "https://api.github.com/users/colesbury/repos", "events_url": "https://api.github.com/users/colesbury/events{/privacy}", "received_events_url": "https://api.github.com/users/colesbury/received_events", "type": "User", "site_admin": false}, "created_at": "2016-10-15T21:19:16Z", "updated_at": "2016-10-15T21:19:16Z", "author_association": "MEMBER", "body_html": "<p>We may want to prefer this syntax (in examples and docs) instead of the current keyword arguments in the constructor.</p>\n<p>For example:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">class</span> <span class=\"pl-en\">MyNetwork</span>(<span class=\"pl-e\">nn</span>.<span class=\"pl-e\">Container</span>):\n  <span class=\"pl-k\">def</span> <span class=\"pl-c1\">__init__</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>):\n    <span class=\"pl-c1\">super</span>(nn.Container, <span class=\"pl-c1\">self</span>).<span class=\"pl-c1\">__init__</span>()\n    <span class=\"pl-c1\">self</span>.l1 <span class=\"pl-k\">=</span> nn.Linear(<span class=\"pl-c1\">5</span>, <span class=\"pl-c1\">10</span>)\n    <span class=\"pl-c1\">self</span>.l2 <span class=\"pl-k\">=</span> nn.Linear(<span class=\"pl-c1\">10</span>, <span class=\"pl-c1\">20</span>)</pre></div>\n<p>instead of:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">class</span> <span class=\"pl-en\">MyNetwork</span>(<span class=\"pl-e\">nn</span>.<span class=\"pl-e\">Container</span>):\n  <span class=\"pl-k\">def</span> <span class=\"pl-c1\">__init__</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>):\n    <span class=\"pl-c1\">super</span>(nn.Container, <span class=\"pl-c1\">self</span>).<span class=\"pl-c1\">__init__</span>(\n      <span class=\"pl-v\">l1</span><span class=\"pl-k\">=</span>nn.Linear(<span class=\"pl-c1\">5</span>, <span class=\"pl-c1\">10</span>),\n      <span class=\"pl-v\">l2</span><span class=\"pl-k\">=</span>nn.Linear(<span class=\"pl-c1\">10</span>, <span class=\"pl-c1\">20</span>),\n    )</pre></div>\n<p>One advantage is that the order of module iteration would match the order of assignment, which is not true for the constructor syntax (except in the upcoming Python 3.6)</p>", "body_text": "We may want to prefer this syntax (in examples and docs) instead of the current keyword arguments in the constructor.\nFor example:\nclass MyNetwork(nn.Container):\n  def __init__(self):\n    super(nn.Container, self).__init__()\n    self.l1 = nn.Linear(5, 10)\n    self.l2 = nn.Linear(10, 20)\ninstead of:\nclass MyNetwork(nn.Container):\n  def __init__(self):\n    super(nn.Container, self).__init__(\n      l1=nn.Linear(5, 10),\n      l2=nn.Linear(10, 20),\n    )\nOne advantage is that the order of module iteration would match the order of assignment, which is not true for the constructor syntax (except in the upcoming Python 3.6)", "body": "We may want to prefer this syntax (in examples and docs) instead of the current keyword arguments in the constructor. \n\nFor example:\n\n``` python\nclass MyNetwork(nn.Container):\n  def __init__(self):\n    super(nn.Container, self).__init__()\n    self.l1 = nn.Linear(5, 10)\n    self.l2 = nn.Linear(10, 20)\n```\n\ninstead of:\n\n``` python\nclass MyNetwork(nn.Container):\n  def __init__(self):\n    super(nn.Container, self).__init__(\n      l1=nn.Linear(5, 10),\n      l2=nn.Linear(10, 20),\n    )\n```\n\nOne advantage is that the order of module iteration would match the order of assignment, which is not true for the constructor syntax (except in the upcoming Python 3.6)\n"}