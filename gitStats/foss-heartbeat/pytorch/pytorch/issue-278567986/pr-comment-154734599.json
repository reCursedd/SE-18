{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/154734599", "pull_request_review_id": 80934135, "id": 154734599, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDczNDU5OQ==", "diff_hunk": "@@ -14,24 +15,22 @@ auto makeFlags(const T &inputs) -> FunctionFlags {\n   int num_inputs = inputs.size();\n   FunctionFlags f;\n   f.is_executable = false;\n-  f.is_volatile = false;\n   f.next_functions.resize(num_inputs);\n-  {\n-    int i = 0;\n-    for (auto it = inputs.begin(); it != inputs.end(); ++it, ++i) {\n-      auto& var = *it;\n-      if (var.defined()) {\n-        f.is_executable |= var.requires_grad();\n-        f.is_volatile |= var.is_volatile();\n-        if (var.grad_fn()) {\n-          f.next_functions[i] = std::make_pair<>(var.grad_fn(), var.output_nr());\n-        } else {\n-          f.next_functions[i] = std::make_pair<>(var.grad_accumulator(), 0);\n-        }\n+  if (!BackpropMode::is_enabled()) {\n+    return f;\n+  }\n+  int i = 0;\n+  for (auto it = inputs.begin(); it != inputs.end(); ++it, ++i) {\n+    auto& var = *it;\n+    if (var.defined()) {\n+      f.is_executable |= var.requires_grad();\n+      if (var.grad_fn()) {\n+        f.next_functions[i] = std::make_pair<>(var.grad_fn(), var.output_nr());\n+      } else {\n+        f.next_functions[i] = std::make_pair<>(var.grad_accumulator(), 0);", "path": "torch/csrc/autograd/function.cpp", "position": null, "original_position": 37, "commit_id": "5aa6a4195c92aa7a2c416cbdff72ae50e94d4e03", "original_commit_id": "aca0b327182511a74a0ff1ef2deff0656935b1d4", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "nit: `grad_accumulator` has to do this atomic dance to lock the accumulator and create it if it's not there yet. A tiny optimization would be to do nothing if the `var` doesn't require grad (just change `else` to `else if (var.requires_grad())`)", "created_at": "2017-12-04T18:32:49Z", "updated_at": "2018-11-23T15:37:03Z", "html_url": "https://github.com/pytorch/pytorch/pull/3970#discussion_r154734599", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/3970", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/154734599"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/3970#discussion_r154734599"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/3970"}}, "body_html": "<p>nit: <code>grad_accumulator</code> has to do this atomic dance to lock the accumulator and create it if it's not there yet. A tiny optimization would be to do nothing if the <code>var</code> doesn't require grad (just change <code>else</code> to <code>else if (var.requires_grad())</code>)</p>", "body_text": "nit: grad_accumulator has to do this atomic dance to lock the accumulator and create it if it's not there yet. A tiny optimization would be to do nothing if the var doesn't require grad (just change else to else if (var.requires_grad()))"}