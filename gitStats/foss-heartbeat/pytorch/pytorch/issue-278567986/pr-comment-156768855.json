{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/156768855", "pull_request_review_id": 80934135, "id": 156768855, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1Njc2ODg1NQ==", "diff_hunk": "@@ -1548,6 +1541,21 @@ def test_data_parallel_small_back(self):\n         out = dp.data_parallel(l, i, (0, 1))\n         self.assertEqual(out, l(i))\n \n+    @unittest.skipIf(not TEST_MULTIGPU, \"multi-GPU not supported\")\n+    def test_data_parallel_no_backprop(self):\n+        test = self\n+\n+        class Layer(nn.Module):\n+            def forward(self, x):\n+                test.assertFalse(torch.is_backprop_enabled())\n+                return x\n+\n+        l = Layer()\n+        i = Variable(torch.randn(20, 10).float().cuda())\n+        with torch.no_backprop():\n+            dp.data_parallel(l, i, (0, 1))\n+        self.assertRaises(AssertionError, lambda: dp.data_parallel(l, i, (0, 1)))", "path": "test/test_nn.py", "position": null, "original_position": 60, "commit_id": "5aa6a4195c92aa7a2c416cbdff72ae50e94d4e03", "original_commit_id": "aca0b327182511a74a0ff1ef2deff0656935b1d4", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "It's easy to satisfy this assert by triggering a different assert accidentally. Can you raise a custom (local) exception type, or at least check the message?", "created_at": "2017-12-13T20:08:22Z", "updated_at": "2018-11-23T15:37:19Z", "html_url": "https://github.com/pytorch/pytorch/pull/3970#discussion_r156768855", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/3970", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/156768855"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/3970#discussion_r156768855"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/3970"}}, "body_html": "<p>It's easy to satisfy this assert by triggering a different assert accidentally. Can you raise a custom (local) exception type, or at least check the message?</p>", "body_text": "It's easy to satisfy this assert by triggering a different assert accidentally. Can you raise a custom (local) exception type, or at least check the message?"}