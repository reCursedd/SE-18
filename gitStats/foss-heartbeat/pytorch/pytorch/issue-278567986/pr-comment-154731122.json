{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/154731122", "pull_request_review_id": 80934135, "id": 154731122, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDczMTEyMg==", "diff_hunk": "@@ -330,9 +329,9 @@ void VariableType::s_copy(const Tensor & src, Tensor & dst) const {\n   auto& dst_ = unpack(dst, \"dst\", 1);\n   check_inplace(dst);\n   std::shared_ptr<CopyBackwards> grad_fn;\n-  auto flags = compute_flags({ dst, src });\n-  flags.requires_grad &= isFloatingPoint(dst.type().scalarType());\n-  if (flags.requires_grad) {\n+  auto requires_grad = compute_requires_grad({ dst, src });\n+  requires_grad &= isFloatingPoint(dst.type().scalarType());", "path": "tools/autograd/templates/VariableType.cpp", "position": null, "original_position": 114, "commit_id": "5aa6a4195c92aa7a2c416cbdff72ae50e94d4e03", "original_commit_id": "aca0b327182511a74a0ff1ef2deff0656935b1d4", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "When I think of this statement now it makes me a bit nervous that users will miss this fact (it works differently than all other ops). We should clearly document that only floating point Variables can have requires_grad and maybe use `copy_` as an example where a result of an op doesn't require grad even when one of the inputs does.", "created_at": "2017-12-04T18:20:30Z", "updated_at": "2018-11-23T15:37:03Z", "html_url": "https://github.com/pytorch/pytorch/pull/3970#discussion_r154731122", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/3970", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/154731122"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/3970#discussion_r154731122"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/3970"}}, "body_html": "<p>When I think of this statement now it makes me a bit nervous that users will miss this fact (it works differently than all other ops). We should clearly document that only floating point Variables can have requires_grad and maybe use <code>copy_</code> as an example where a result of an op doesn't require grad even when one of the inputs does.</p>", "body_text": "When I think of this statement now it makes me a bit nervous that users will miss this fact (it works differently than all other ops). We should clearly document that only floating point Variables can have requires_grad and maybe use copy_ as an example where a result of an op doesn't require grad even when one of the inputs does."}