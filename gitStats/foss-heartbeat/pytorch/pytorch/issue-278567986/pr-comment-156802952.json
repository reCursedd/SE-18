{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/156802952", "pull_request_review_id": 83330017, "id": 156802952, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NjgwMjk1Mg==", "diff_hunk": "@@ -34,31 +35,22 @@ auto AccumulateGrad::apply(const variable_list& grads) -> variable_list {\n     new_grad = (*hook)({new_grad})[0];\n   }\n \n-  // TODO: Currently if var.grad is volatile and new-grad is non-volatile we\n-  // accumulate in-place. We should reconsider this and perhaps add the\n-  // gradients out-of-place.\n-\n   auto& grad = variable.grad();\n   if (!grad.defined()) {\n-    grad = apply_fn<Clone>()(new_grad);\n-  } else if (grad.is_volatile()) {\n+    variable.grad() = new_grad.clone();\n+  } else if (!BackpropMode::is_enabled()) {", "path": "torch/csrc/autograd/functions/accumulate_grad.cpp", "position": null, "original_position": 21, "commit_id": "5aa6a4195c92aa7a2c416cbdff72ae50e94d4e03", "original_commit_id": "aca0b327182511a74a0ff1ef2deff0656935b1d4", "user": {"login": "colesbury", "id": 655866, "node_id": "MDQ6VXNlcjY1NTg2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/655866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colesbury", "html_url": "https://github.com/colesbury", "followers_url": "https://api.github.com/users/colesbury/followers", "following_url": "https://api.github.com/users/colesbury/following{/other_user}", "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions", "organizations_url": "https://api.github.com/users/colesbury/orgs", "repos_url": "https://api.github.com/users/colesbury/repos", "events_url": "https://api.github.com/users/colesbury/events{/privacy}", "received_events_url": "https://api.github.com/users/colesbury/received_events", "type": "User", "site_admin": false}, "body": "`is_enabled() == False` overrides any `requires_grad` attributes on variables. It will not modify the history (`grad_fn`) of `.grad`, but will increment the version counter.\r\n\r\nThis is roughly equivalent to:\r\n\r\n```\r\nx = torch.autograd.Variable(torch.randn(3), requires_grad=True)\r\ny = x * 2\r\nwith torch.no_grad():\r\n  y += tensor\r\n```\r\n\r\nIn the near future, I think we should disabled history entirely on `.grad`, since that's been a source of memory leaks and `torch.autograd.grad` is a better alternative.", "created_at": "2017-12-13T22:20:32Z", "updated_at": "2018-11-23T15:37:21Z", "html_url": "https://github.com/pytorch/pytorch/pull/3970#discussion_r156802952", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/3970", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/156802952"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/3970#discussion_r156802952"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/3970"}}, "body_html": "<p><code>is_enabled() == False</code> overrides any <code>requires_grad</code> attributes on variables. It will not modify the history (<code>grad_fn</code>) of <code>.grad</code>, but will increment the version counter.</p>\n<p>This is roughly equivalent to:</p>\n<pre><code>x = torch.autograd.Variable(torch.randn(3), requires_grad=True)\ny = x * 2\nwith torch.no_grad():\n  y += tensor\n</code></pre>\n<p>In the near future, I think we should disabled history entirely on <code>.grad</code>, since that's been a source of memory leaks and <code>torch.autograd.grad</code> is a better alternative.</p>", "body_text": "is_enabled() == False overrides any requires_grad attributes on variables. It will not modify the history (grad_fn) of .grad, but will increment the version counter.\nThis is roughly equivalent to:\nx = torch.autograd.Variable(torch.randn(3), requires_grad=True)\ny = x * 2\nwith torch.no_grad():\n  y += tensor\n\nIn the near future, I think we should disabled history entirely on .grad, since that's been a source of memory leaks and torch.autograd.grad is a better alternative.", "in_reply_to_id": 154735629}