{"url": "https://api.github.com/repos/pytorch/pytorch/issues/113", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/113/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/113/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/113/events", "html_url": "https://github.com/pytorch/pytorch/pull/113", "id": 181917792, "node_id": "MDExOlB1bGxSZXF1ZXN0ODg1OTgwNjg=", "number": 113, "title": "Improvements in torch and torch.nn", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-10-09T22:58:10Z", "updated_at": "2016-10-11T05:05:11Z", "closed_at": "2016-10-11T05:05:11Z", "author_association": "MEMBER", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/113", "html_url": "https://github.com/pytorch/pytorch/pull/113", "diff_url": "https://github.com/pytorch/pytorch/pull/113.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/113.patch"}, "body_html": "<ul>\n<li>FullConv -&gt; ConvTranspose</li>\n<li>ConvTranspose and MaxUnpooling support an additional <code>output_size</code> argument to their call operators</li>\n</ul>\n<div class=\"highlight highlight-source-python\"><pre>unpool(<span class=\"pl-c1\">input</span>, indices, <span class=\"pl-v\">output_size</span><span class=\"pl-k\">=</span>(<span class=\"pl-c1\">100</span>, <span class=\"pl-c1\">100</span>))\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> or</span>\nunpool(<span class=\"pl-c1\">input</span>, indices, <span class=\"pl-v\">output_size</span><span class=\"pl-k\">=</span>original_input.size())</pre></div>\n<ul>\n<li>torch.cat was simplified. New signature is just <code>torch.cat(sequence tensors[, int dimension])</code>. Also, I've removed the method version, which was incorrect (concatenated all given tensors in <code>self</code>).</li>\n<li>Cuda OOM errors used to trigger an invalid argument error message in the tensor constructor, now they are correctly propagated.</li>\n</ul>\n<p><strong>Do not merge. This PR is only for review and test purposes.</strong></p>", "body_text": "FullConv -> ConvTranspose\nConvTranspose and MaxUnpooling support an additional output_size argument to their call operators\n\nunpool(input, indices, output_size=(100, 100))\n# or\nunpool(input, indices, output_size=original_input.size())\n\ntorch.cat was simplified. New signature is just torch.cat(sequence tensors[, int dimension]). Also, I've removed the method version, which was incorrect (concatenated all given tensors in self).\nCuda OOM errors used to trigger an invalid argument error message in the tensor constructor, now they are correctly propagated.\n\nDo not merge. This PR is only for review and test purposes.", "body": "- FullConv -> ConvTranspose\n- ConvTranspose and MaxUnpooling support an additional `output_size` argument to their call operators\n\n``` python\nunpool(input, indices, output_size=(100, 100))\n# or\nunpool(input, indices, output_size=original_input.size())\n```\n- torch.cat was simplified. New signature is just `torch.cat(sequence tensors[, int dimension])`. Also, I've removed the method version, which was incorrect (concatenated all given tensors in `self`).\n- Cuda OOM errors used to trigger an invalid argument error message in the tensor constructor, now they are correctly propagated.\n\n**Do not merge. This PR is only for review and test purposes.**\n"}