{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/290670152", "html_url": "https://github.com/pytorch/pytorch/issues/1150#issuecomment-290670152", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/1150", "id": 290670152, "node_id": "MDEyOklzc3VlQ29tbWVudDI5MDY3MDE1Mg==", "user": {"login": "nicklhy", "id": 1146226, "node_id": "MDQ6VXNlcjExNDYyMjY=", "avatar_url": "https://avatars0.githubusercontent.com/u/1146226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nicklhy", "html_url": "https://github.com/nicklhy", "followers_url": "https://api.github.com/users/nicklhy/followers", "following_url": "https://api.github.com/users/nicklhy/following{/other_user}", "gists_url": "https://api.github.com/users/nicklhy/gists{/gist_id}", "starred_url": "https://api.github.com/users/nicklhy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nicklhy/subscriptions", "organizations_url": "https://api.github.com/users/nicklhy/orgs", "repos_url": "https://api.github.com/users/nicklhy/repos", "events_url": "https://api.github.com/users/nicklhy/events{/privacy}", "received_events_url": "https://api.github.com/users/nicklhy/received_events", "type": "User", "site_admin": false}, "created_at": "2017-03-31T09:52:43Z", "updated_at": "2017-03-31T09:52:43Z", "author_association": "NONE", "body_html": "<p>Thank you <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=6359743\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/albanD\">@albanD</a> .<br>\nThe current implementation works exactly as the doc but I am just wondering the reason behind that.<br>\nBecause of this design, a simple and clean multi-gpu code like <code>nn.DataParallel(resnet, device_ids=[1, 2, 3]).cuda()</code> could crash when executing the forward function(as discussed <a href=\"https://discuss.pytorch.org/t/tensors-are-on-different-gpus/1450\" rel=\"nofollow\">here</a>). In order to solve this problem, I have to change every xx.cuda() to xx.cuda(device=gpus[0]) in the training function like below (which looks rather ugly).</p>\n<pre><code># net = torch.nn.DataParallel(net, device_ids=gpus).cuda()\nnet = torch.nn.DataParallel(net, device_ids=gpus).cuda(device_id=gpus[0])\n# ...\n# loss_criterion = torch.nn.CrossEntropyLoss().cuda()\nloss_criterion = torch.nn.CrossEntropyLoss().cuda(device_id=gpus[0])\n# ...\n# input = input.cuda()\ninput = input.cuda(device=gpus[0])\n# target = target.cuda()\ntarget = target.cuda(device=gpus[0])\n</code></pre>", "body_text": "Thank you @albanD .\nThe current implementation works exactly as the doc but I am just wondering the reason behind that.\nBecause of this design, a simple and clean multi-gpu code like nn.DataParallel(resnet, device_ids=[1, 2, 3]).cuda() could crash when executing the forward function(as discussed here). In order to solve this problem, I have to change every xx.cuda() to xx.cuda(device=gpus[0]) in the training function like below (which looks rather ugly).\n# net = torch.nn.DataParallel(net, device_ids=gpus).cuda()\nnet = torch.nn.DataParallel(net, device_ids=gpus).cuda(device_id=gpus[0])\n# ...\n# loss_criterion = torch.nn.CrossEntropyLoss().cuda()\nloss_criterion = torch.nn.CrossEntropyLoss().cuda(device_id=gpus[0])\n# ...\n# input = input.cuda()\ninput = input.cuda(device=gpus[0])\n# target = target.cuda()\ntarget = target.cuda(device=gpus[0])", "body": "Thank you @albanD .\r\nThe current implementation works exactly as the doc but I am just wondering the reason behind that.\r\nBecause of this design, a simple and clean multi-gpu code like `nn.DataParallel(resnet, device_ids=[1, 2, 3]).cuda()` could crash when executing the forward function(as discussed [here](https://discuss.pytorch.org/t/tensors-are-on-different-gpus/1450)). In order to solve this problem, I have to change every xx.cuda() to xx.cuda(device=gpus[0]) in the training function like below (which looks rather ugly).\r\n\r\n```\r\n# net = torch.nn.DataParallel(net, device_ids=gpus).cuda()\r\nnet = torch.nn.DataParallel(net, device_ids=gpus).cuda(device_id=gpus[0])\r\n# ...\r\n# loss_criterion = torch.nn.CrossEntropyLoss().cuda()\r\nloss_criterion = torch.nn.CrossEntropyLoss().cuda(device_id=gpus[0])\r\n# ...\r\n# input = input.cuda()\r\ninput = input.cuda(device=gpus[0])\r\n# target = target.cuda()\r\ntarget = target.cuda(device=gpus[0])\r\n```\r\n"}