{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/155051559", "pull_request_review_id": 81306386, "id": 155051559, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTA1MTU1OQ==", "diff_hunk": "@@ -337,18 +347,30 @@ class DataLoader(object):\n             will be smaller. (default: False)\n         timeout (numeric, optional): if positive, the timeout value for collecting a batch\n             from workers. Should always be non-negative. (default: 0)\n+        worker_init_fn (callable, optional): If not None, this will be called on each\n+            worker subprocess with the worker id as input, after seeding and before data\n+            loading. (default: None)\n+\n+    .. note:: By default, each worker will have its PyTorch seed set to a long generated\n+              by main process using its RNG. You may use `torch.initial_seed()` to access\n+              this value in :attr:`worker_init_fn`, which can be used to set other seeds\n+              (e.g. NumPy) before data loading.\n+\n+    .. warning:: If ``spawn'' start method is used, :attr:`worker_init_fn` cannot be a lambda", "path": "torch/utils/data/dataloader.py", "position": null, "original_position": 86, "commit_id": "6228322172cc8bf51f1ccf1369e20c1e489bca06", "original_commit_id": "a677690c83b9ba0f545445fcbef2bcf3bbb462d2", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "The problem is not only with lambdas but with non-picklable functions in general (e.g. local function declared with `def` won't work either). I'd specifically mention that they have to be picklable.", "created_at": "2017-12-05T19:27:20Z", "updated_at": "2018-11-23T15:37:07Z", "html_url": "https://github.com/pytorch/pytorch/pull/4018#discussion_r155051559", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4018", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/155051559"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/4018#discussion_r155051559"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4018"}}, "body_html": "<p>The problem is not only with lambdas but with non-picklable functions in general (e.g. local function declared with <code>def</code> won't work either). I'd specifically mention that they have to be picklable.</p>", "body_text": "The problem is not only with lambdas but with non-picklable functions in general (e.g. local function declared with def won't work either). I'd specifically mention that they have to be picklable.", "in_reply_to_id": 155012704}