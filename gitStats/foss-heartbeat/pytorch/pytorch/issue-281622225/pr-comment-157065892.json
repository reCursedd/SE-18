{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/157065892", "pull_request_review_id": 83649985, "id": 157065892, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NzA2NTg5Mg==", "diff_hunk": "@@ -372,3 +381,71 @@ def forward_extended(self, *input):\n \n     def backward_extended(self, *grad_output):\n         raise NotImplementedError\n+\n+\n+def symbolic_override(symbolic_fn):\n+    \"\"\"\n+    Decorator to override ONNX export of the a given Python function with\n+    specified subgraph.\n+\n+    Effectively allows to attach symbolic() implementation to an arbitrary\n+    python function. Requirements to the decorated function:\n+     - being non-member function\n+     - positional inputs are Variables/Tensors or (nested) lists or tuples of\n+       them (similar requirement to NestedIOFunction)\n+     - outputs are similarly Variables/Tensors or (nested) lists or tuples of\n+       them\n+     - keyword arguments are of non-tensor type\n+     - note, that function does NOT have to be autograd.Function\n+\n+    Example usage:\n+\n+    ```\n+    def symb(g, x, y):\n+        return g.op('Sum', x, y[0], y[1])\n+\n+    @symbolic_override(symb)\n+    def foo(x, y):\n+        return x + y[0] + y[1]\n+    ```\n+    \"\"\"\n+\n+    def wrapper_maker(fn):\n+\n+        def wrapper(*args, **kwargs):\n+            output = fn(*args, **kwargs)\n+            flat_args = tuple(_iter_variables(args))\n+            if not any(map(_C._jit_is_tracing, flat_args)):", "path": "torch/autograd/function.py", "position": null, "original_position": 98, "commit_id": "40309481d832c37b8e3afe14677603f408e842f2", "original_commit_id": "f7b50a881138b5d079eaf3391237137ba0734aeb", "user": {"login": "dzhulgakov", "id": 17890620, "node_id": "MDQ6VXNlcjE3ODkwNjIw", "avatar_url": "https://avatars2.githubusercontent.com/u/17890620?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dzhulgakov", "html_url": "https://github.com/dzhulgakov", "followers_url": "https://api.github.com/users/dzhulgakov/followers", "following_url": "https://api.github.com/users/dzhulgakov/following{/other_user}", "gists_url": "https://api.github.com/users/dzhulgakov/gists{/gist_id}", "starred_url": "https://api.github.com/users/dzhulgakov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dzhulgakov/subscriptions", "organizations_url": "https://api.github.com/users/dzhulgakov/orgs", "repos_url": "https://api.github.com/users/dzhulgakov/repos", "events_url": "https://api.github.com/users/dzhulgakov/events{/privacy}", "received_events_url": "https://api.github.com/users/dzhulgakov/received_events", "type": "User", "site_admin": false}, "body": "Is it in general true that all variables would be traced if tracing is on? Or is it possible that only a subset would be?", "created_at": "2017-12-14T21:25:31Z", "updated_at": "2018-11-23T15:37:23Z", "html_url": "https://github.com/pytorch/pytorch/pull/4143#discussion_r157065892", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4143", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/157065892"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/4143#discussion_r157065892"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4143"}}, "body_html": "<p>Is it in general true that all variables would be traced if tracing is on? Or is it possible that only a subset would be?</p>", "body_text": "Is it in general true that all variables would be traced if tracing is on? Or is it possible that only a subset would be?", "in_reply_to_id": 156673108}