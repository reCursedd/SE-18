{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/205303595", "pull_request_review_id": 140548069, "id": 205303595, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTMwMzU5NQ==", "diff_hunk": "@@ -123,48 +138,37 @@ struct ExecutionPlan {\n   }\n \n private:\n-  // note: should be inplace to avoid allocations, but we have to switch from\n-  // a list of tensor to a list of ivalues\n-  std::vector<IValue> unwrapVariables(variable_tensor_list && list) const {\n-    return fmap(list, [](const Variable& v) -> IValue {\n-      return v.defined() ? autograd::as_variable_ref(v).detach() : at::Tensor();\n-    });\n-  }\n-  // note: should be inplace to avoid allocations, but we have to switch from\n-  // a list of tensor to a list of ivalues\n-  variable_tensor_list wrapTensors(tensor_list && list) const {\n-    for(auto & v : list) {\n-      v = autograd::make_variable(v, /*requires_grad=*/false);\n+  void detachVariables(Stack & stack) const {\n+    for (IValue & v : stack) {\n+      if (!v.isTensor()) continue;\n+      auto t = std::move(v).toTensor();\n+      v = IValue{t.defined() ? autograd::as_variable_ref(t).detach() : std::move(t)};\n     }\n-    return variable_tensor_list(std::move(list));\n   }\n   // Capture (save) inputs that would be required to subsequently run backwards\n-  void captureInputs(ExecutionPlanAutogradFunction & grad_fn, variable_tensor_list & inputs) const {\n-    for(auto offset : grad.df_input_captured_inputs) {\n-      grad_fn.captures.emplace_back(autograd::as_variable_ref(inputs[offset]), false);\n+  void captureInputs(ExecutionPlanAutogradFunction & grad_fn, Stack & inputs) const {\n+    for (size_t offset : grad.df_input_captured_inputs) {\n+      grad_fn.capture(inputs[offset]);\n     }\n   }\n-  void captureOutputs(ExecutionPlanAutogradFunction & grad_fn, variable_tensor_list & outputs) const {\n-    for(auto offset : grad.df_input_captured_outputs) {\n-      grad_fn.captures.emplace_back(autograd::as_variable_ref(outputs[offset]), true);\n+  void captureOutputs(ExecutionPlanAutogradFunction & grad_fn, Stack & outputs) const {\n+    for (size_t offset : grad.df_input_captured_outputs) {\n+      grad_fn.capture(outputs[offset]);\n     }\n   }\n \n-  variable_tensor_list runWithGrad(variable_tensor_list&& inputs) const {\n+  void runWithGrad(Stack & stack) const {\n     auto grad_fn = std::make_shared<ExecutionPlanAutogradFunction>(grad_executor,\n       grad.df_input_captured_inputs.size() + grad.df_input_captured_outputs.size());\n-    // hook up the outputs of df to the gradient functions of the inputs that require\n-    // gradients\n+    // hook up the outputs of df to the gradient functions of the inputs that require gradients\n     for(auto idx : grad.df_output_vjps) {\n-      auto & v = autograd::as_variable_ref(inputs[idx]);\n+      auto v = Variable(stack[idx].toTensor());\n       grad_fn->add_next_edge(v.gradient_edge());\n     }\n-    captureInputs(*grad_fn, inputs);\n+    captureInputs(*grad_fn, stack);\n \n-    auto stack = unwrapVariables(std::move(inputs));\n+    detachVariables(stack);", "path": "torch/csrc/jit/graph_executor.cpp", "position": null, "original_position": 160, "commit_id": "f2c0a2264f634b32b00238c07539d08fcfbcc775", "original_commit_id": "67b6a517c4ec45c6f23ede4d14cc3895f3a63f0d", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Cool, I'll limit those functions to only operate on a subset of the stack.", "created_at": "2018-07-26T00:51:40Z", "updated_at": "2018-11-23T15:48:10Z", "html_url": "https://github.com/pytorch/pytorch/pull/9763#discussion_r205303595", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/9763", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/205303595"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/9763#discussion_r205303595"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/9763"}}, "body_html": "<p>Cool, I'll limit those functions to only operate on a subset of the stack.</p>", "body_text": "Cool, I'll limit those functions to only operate on a subset of the stack.", "in_reply_to_id": 205290144}