{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/205303504", "pull_request_review_id": 140547986, "id": 205303504, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTMwMzUwNA==", "diff_hunk": "@@ -32,34 +34,38 @@ struct TensorInfoPOD {\n                        // for tensor 0, the offset is always 0\n };\n \n-static_assert(sizeof(TensorInfoPOD) == sizeof(int64_t),\n-  \"TensorInfoPOD must be 64-bit struct for ArgumentSpec encoding to work\");\n+static_assert(sizeof(ArgumentInfoPOD) == sizeof(int64_t),\n+  \"ArgumentInfoPOD must be 64-bit struct for ArgumentSpec encoding to work\");\n \n-struct TensorInfo;\n+struct ArgumentInfo;\n \n struct ArgumentSpec {\n-  // note: tensors must always be variables\n-  ArgumentSpec(bool with_grad, const variable_tensor_list & tensors)\n-  :  hash_code(0), ntensors(tensors.size()) {\n-    int all_dims = 0;\n-    for(size_t i = 0; i < ntensors; i++) {\n-      all_dims += tensors[i].defined() ? tensors[i].ndimension() : 0;\n+  ArgumentSpec(bool with_grad, const Stack & inputs)\n+  :  hash_code(0), ninputs(inputs.size()) {\n+    int32_t all_dims = 0;\n+    const int32_t num_inputs = inputs.size();\n+    for (int32_t i = 0; i < num_inputs; i++) {\n+      if (!inputs[i].isTensor()) continue;\n+      auto tensor = inputs[i].toTensor();\n+      all_dims += tensor.defined() ? tensor.ndimension() : 0;\n     }\n     // allocate enough room for all TensorPODs and dimensions\n-    data.resize(ntensors + all_dims*2);\n+    data.resize(ninputs + all_dims*2);\n \n     // and reinterpret our data array as these structs\n-    TensorInfoPOD * pods = reinterpret_cast<TensorInfoPOD*>(data.data());\n+    ArgumentInfoPOD * pods = reinterpret_cast<ArgumentInfoPOD*>(data.data());\n     int64_t * next_dim = sizes_strides();\n-    int total_dims = 0;\n-    for(size_t i = 0; i < ntensors; i++) {\n-      const auto & t = tensors[i];\n+    int32_t total_dims = 0;\n+    for(int32_t i = 0; i < num_inputs; i++) {\n       auto & pod = pods[i];\n+      pod.kind = static_cast<uint32_t>(inputs[i].kind());\n+      if (!inputs[i].isTensor()) continue;\n+      const auto & t = inputs[i].toTensor();", "path": "torch/csrc/jit/argument_spec.h", "position": null, "original_position": 73, "commit_id": "f2c0a2264f634b32b00238c07539d08fcfbcc775", "original_commit_id": "67b6a517c4ec45c6f23ede4d14cc3895f3a63f0d", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Yep, good point", "created_at": "2018-07-26T00:51:03Z", "updated_at": "2018-11-23T15:48:10Z", "html_url": "https://github.com/pytorch/pytorch/pull/9763#discussion_r205303504", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/9763", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/205303504"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/9763#discussion_r205303504"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/9763"}}, "body_html": "<p>Yep, good point</p>", "body_text": "Yep, good point", "in_reply_to_id": 205287723}