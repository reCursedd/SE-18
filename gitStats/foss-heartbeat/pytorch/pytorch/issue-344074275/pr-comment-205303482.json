{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/205303482", "pull_request_review_id": 140547968, "id": 205303482, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTMwMzQ4Mg==", "diff_hunk": "@@ -215,7 +219,7 @@ struct GraphExecutorImpl {\n   : GraphExecutorImpl(graph, optimize, isDifferentiable(*graph)) {}\n \n   // entry point where execution begins\n-  variable_tensor_list run(variable_tensor_list inputs) {\n+  void run(Stack & inputs) {", "path": "torch/csrc/jit/graph_executor.cpp", "position": null, "original_position": 193, "commit_id": "f2c0a2264f634b32b00238c07539d08fcfbcc775", "original_commit_id": "67b6a517c4ec45c6f23ede4d14cc3895f3a63f0d", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "I'm pretty sure that the executor would just completely ignore all extra stack contents, but I can explicitly pop the appropriate number of inputs into a new stack (this will be less efficient though). I've been recently wondering why do we call this thing a stack. Do we ever have any situations where an op is called, but it shouldn't consume all values on the stack (i.e. does it ever contain certain `IValue`s for longer than a single op call)?", "created_at": "2018-07-26T00:50:53Z", "updated_at": "2018-11-23T15:48:10Z", "html_url": "https://github.com/pytorch/pytorch/pull/9763#discussion_r205303482", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/9763", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/205303482"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/9763#discussion_r205303482"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/9763"}}, "body_html": "<p>I'm pretty sure that the executor would just completely ignore all extra stack contents, but I can explicitly pop the appropriate number of inputs into a new stack (this will be less efficient though). I've been recently wondering why do we call this thing a stack. Do we ever have any situations where an op is called, but it shouldn't consume all values on the stack (i.e. does it ever contain certain <code>IValue</code>s for longer than a single op call)?</p>", "body_text": "I'm pretty sure that the executor would just completely ignore all extra stack contents, but I can explicitly pop the appropriate number of inputs into a new stack (this will be less efficient though). I've been recently wondering why do we call this thing a stack. Do we ever have any situations where an op is called, but it shouldn't consume all values on the stack (i.e. does it ever contain certain IValues for longer than a single op call)?", "in_reply_to_id": 205289785}