{"url": "https://api.github.com/repos/pytorch/pytorch/issues/4392", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/4392/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/4392/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/4392/events", "html_url": "https://github.com/pytorch/pytorch/issues/4392", "id": 284994686, "node_id": "MDU6SXNzdWUyODQ5OTQ2ODY=", "number": 4392, "title": "Cache CuDNN benchmark selection, turn it on by default, use it across PyTorch runs", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 806617721, "node_id": "MDU6TGFiZWw4MDY2MTc3MjE=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/cudnn", "name": "cudnn", "color": "fbca04", "default": false}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2017-12-28T21:39:31Z", "updated_at": "2018-01-16T17:25:46Z", "closed_at": null, "author_association": "CONTRIBUTOR", "body_html": "<p>CuDNN benchmark mode can have some beefy speed increases for our cuDNN users, but we don't turn it on by default because the benchmarking process takes a long time. One possibility to alleviate this so that we can turn it on by default is to cache the benchmark selection (keyed on PyTorch version, cuDNN version, device ID, and all of the input parameters) in, say, <code>$HOME/.pytorch</code>, and then reuse benchmark information on subsequent runs.</p>\n<p>The primary hazard is the introduction of state, so it's very important to not accidentally state-dependence (which will lead to hard to debug performance regressions and problems.)</p>\n<p>Related: <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"273460558\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/3667\" data-hovercard-type=\"issue\" data-hovercard-url=\"/pytorch/pytorch/issues/3667/hovercard\" href=\"https://github.com/pytorch/pytorch/issues/3667\">#3667</a></p>", "body_text": "CuDNN benchmark mode can have some beefy speed increases for our cuDNN users, but we don't turn it on by default because the benchmarking process takes a long time. One possibility to alleviate this so that we can turn it on by default is to cache the benchmark selection (keyed on PyTorch version, cuDNN version, device ID, and all of the input parameters) in, say, $HOME/.pytorch, and then reuse benchmark information on subsequent runs.\nThe primary hazard is the introduction of state, so it's very important to not accidentally state-dependence (which will lead to hard to debug performance regressions and problems.)\nRelated: #3667", "body": "CuDNN benchmark mode can have some beefy speed increases for our cuDNN users, but we don't turn it on by default because the benchmarking process takes a long time. One possibility to alleviate this so that we can turn it on by default is to cache the benchmark selection (keyed on PyTorch version, cuDNN version, device ID, and all of the input parameters) in, say, `$HOME/.pytorch`, and then reuse benchmark information on subsequent runs.\r\n\r\nThe primary hazard is the introduction of state, so it's very important to not accidentally state-dependence (which will lead to hard to debug performance regressions and problems.)\r\n\r\nRelated: https://github.com/pytorch/pytorch/issues/3667"}