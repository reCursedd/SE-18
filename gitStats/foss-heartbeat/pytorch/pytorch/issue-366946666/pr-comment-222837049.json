{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/222837049", "pull_request_review_id": 161822828, "id": 222837049, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyMjgzNzA0OQ==", "diff_hunk": "@@ -5,17 +5,103 @@\n \n namespace ONNX_NAMESPACE {\n \n-static const char* dummy_test_only_ver1_doc = R\"DOC(\n-A dummy op for verifying the build setup works, don't use me.\n-)DOC\";\n+ONNX_PYTORCH_OPERATOR_SET_SCHEMA(\n+    SparseLengthsSumFused8BitRowwise,\n+    1,\n+    OpSchema()\n+        .SetDoc(\"Mirror Caffe2 SparseLengthsSumFused8BitRowwise operator\")\n+        .Input(0, \"DATA\", \"data tensor\", \"T1\")\n+        .Input(1, \"INDICES\", \"indices tensor\", \"T2\")\n+        .Input(2, \"LENGTHS\", \"lengths tensor\", \"T2\")\n+        .Output(0, \"output\", \"Output tensor\", \"T2\")\n+        .TypeConstraint(\n+            \"T1\",\n+            {\"tensor(uin8)\"},\n+            \"Constrain input data to uint8 tensors.\")\n+        .TypeConstraint(\n+            \"T2\",\n+            {\"tensor(int8)\",\n+             \"tensor(int16)\",\n+             \"tensor(int32)\",\n+             \"tensor(int64)\",\n+             \"tensor(uint8)\",\n+             \"tensor(uint16)\",\n+             \"tensor(uint32)\",\n+             \"tensor(uint64)\"},\n+            \"Constrain index and length to integral tensors.\"));\n+\n+ONNX_PYTORCH_OPERATOR_SET_SCHEMA(\n+    SparseLengthsSum,\n+    1,\n+    OpSchema()\n+        .SetDoc(\"Mirror Caffe2 SparseLengthsSum operator\")\n+        .Input(0, \"DATA\", \"data tensor\", \"T1\")\n+        .Input(1, \"INDICES\", \"indices tensor\", \"T2\")\n+        .Input(2, \"LENGTHS\", \"lengths tensor\", \"T2\")\n+        .Output(0, \"output\", \"Output tensor\", \"T1\")\n+        .TypeConstraint(\n+            \"T1\",\n+            {\"tensor(float16)\", \"tensor(float)\", \"tensor(double)\"},\n+            \"Constrain input and output types to float tensors.\")\n+        .TypeConstraint(\n+            \"T2\",\n+            {\"tensor(int8)\",\n+             \"tensor(int16)\",\n+             \"tensor(int32)\",\n+             \"tensor(int64)\",\n+             \"tensor(uint8)\",\n+             \"tensor(uint16)\",\n+             \"tensor(uint32)\",\n+             \"tensor(uint64)\"},\n+            \"Constrain index and length to integral tensors.\"));\n+\n+ONNX_PYTORCH_OPERATOR_SET_SCHEMA(\n+    DotProduct,\n+    1,\n+    OpSchema()\n+        .SetDoc(\"Mirror Caffe2 DotProduct operator\")\n+        .Input(0, \"X\", \"Input 1 tensor\", \"T\")\n+        .Input(1, \"Y\", \"Input 2 tensor\", \"T\")\n+        .Output(0, \"Z\", \"Output tensor\", \"T\")\n+        .TypeConstraint(\n+            \"T\",\n+            {\"tensor(float16)\", \"tensor(float)\", \"tensor(double)\"},\n+            \"Constrain input and output types to float tensors.\"));\n+\n+ONNX_PYTORCH_OPERATOR_SET_SCHEMA(\n+    FCTransposed,\n+    1,\n+    OpSchema()\n+        .SetDoc(\"Mirror Caffe2 FCTransposed operator\")\n+        .Input(0, \"X\", \"Input tensor\", \"T\")\n+        .Input(1, \"W\", \"Weight tensor\", \"T\")\n+        .Input(2, \"B\", \"Bias tensor\", \"T\")\n+        .Output(0, \"Z\", \"Output tensor\", \"T\")\n+        .TypeConstraint(\n+            \"T\",\n+            {\"tensor(float16)\", \"tensor(float)\", \"tensor(double)\"},\n+            \"Constrain input and output types to float tensors.\"));\n+\n+ONNX_PYTORCH_OPERATOR_SET_SCHEMA(\n+    BatchMatMul,", "path": "caffe2/onnx/torch_ops/defs.cc", "position": 85, "original_position": 85, "commit_id": "9f3c7256ccbe7ce524dacd94e5edbcc16d45de76", "original_commit_id": "df8f4bb719a59f4c67dbbffc6db34503258c3207", "user": {"login": "yinghai", "id": 1100089, "node_id": "MDQ6VXNlcjExMDAwODk=", "avatar_url": "https://avatars1.githubusercontent.com/u/1100089?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yinghai", "html_url": "https://github.com/yinghai", "followers_url": "https://api.github.com/users/yinghai/followers", "following_url": "https://api.github.com/users/yinghai/following{/other_user}", "gists_url": "https://api.github.com/users/yinghai/gists{/gist_id}", "starred_url": "https://api.github.com/users/yinghai/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yinghai/subscriptions", "organizations_url": "https://api.github.com/users/yinghai/orgs", "repos_url": "https://api.github.com/users/yinghai/repos", "events_url": "https://api.github.com/users/yinghai/events{/privacy}", "received_events_url": "https://api.github.com/users/yinghai/received_events", "type": "User", "site_admin": false}, "body": "Could we keep it as BatchMatMul, as Glow is implementing BatchMatMul and right now, for these ops I would like a 1-1 mapping between Glow and C2 to help with the debug. We can further reduce it into other primitives once we have a baseline. ", "created_at": "2018-10-04T21:44:31Z", "updated_at": "2018-11-23T15:52:24Z", "html_url": "https://github.com/pytorch/pytorch/pull/12338#discussion_r222837049", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/12338", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/222837049"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/12338#discussion_r222837049"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/12338"}}, "body_html": "<p>Could we keep it as BatchMatMul, as Glow is implementing BatchMatMul and right now, for these ops I would like a 1-1 mapping between Glow and C2 to help with the debug. We can further reduce it into other primitives once we have a baseline.</p>", "body_text": "Could we keep it as BatchMatMul, as Glow is implementing BatchMatMul and right now, for these ops I would like a 1-1 mapping between Glow and C2 to help with the debug. We can further reduce it into other primitives once we have a baseline.", "in_reply_to_id": 222809549}