{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/162162151", "pull_request_review_id": 89571559, "id": 162162151, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MjE2MjE1MQ==", "diff_hunk": "@@ -72,23 +73,38 @@ struct GraphTask {\n   // Notified when a task finishes executing.  Check outstanding_tasks to see\n   // if all tasks are done.\n   std::condition_variable not_done;\n-  const Engine::pre_callback_map& pre_callbacks;\n-  const Engine::post_callback_map& post_callbacks;\n   std::unordered_map<Function*, InputBuffer> not_ready;\n   std::unordered_map<Function*, int> dependencies;\n \n+  struct ExecInfo {\n+    struct Capture {\n+      Capture(int input_idx, int output_idx) : input_idx(input_idx), output_idx(output_idx) {}\n+      int input_idx; // within Function inputs\n+      int output_idx; // within the output vector of a GraphTask\n+    };\n+\n+    bool needed;\n+    std::unique_ptr<std::vector<Capture>> captures;\n+  };\n+  // Exec info has a bit complicated semantics. If it's empty, it means the task is\n+  // run in a \"default\" mode, which means that all next_functions we encounter should\n+  // get executed. If it's not empty, only functions that have an entry and this entry\n+  // has needed == True should be executed.\n+  std::unordered_map<Function*, ExecInfo> exec_info;\n+  std::vector<Variable> captured_vars;\n+\n+  void init_to_execute(const std::shared_ptr<Function>& graph_root, const function_list& captures);", "path": "torch/csrc/autograd/engine.cpp", "position": null, "original_position": 34, "commit_id": "f38d6a066f6f6ba1e21497df4f994b97bb052cb2", "original_commit_id": "5c81e3e03d169b1a45582e7fd035e40e18d08e1b", "user": {"login": "colesbury", "id": 655866, "node_id": "MDQ6VXNlcjY1NTg2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/655866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colesbury", "html_url": "https://github.com/colesbury", "followers_url": "https://api.github.com/users/colesbury/followers", "following_url": "https://api.github.com/users/colesbury/following{/other_user}", "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions", "organizations_url": "https://api.github.com/users/colesbury/orgs", "repos_url": "https://api.github.com/users/colesbury/repos", "events_url": "https://api.github.com/users/colesbury/events{/privacy}", "received_events_url": "https://api.github.com/users/colesbury/received_events", "type": "User", "site_admin": false}, "body": "Not sure where else we're passing `std::shared_ptr<Function>` as arguments without taking ownership. Herb Sutter's [recommendation](https://herbsutter.com/2013/06/05/gotw-91-solution-smart-pointer-parameters/) is:\r\n\r\n1) Pass `std::shared_ptr<Function>` when taking ownership\r\n2) Pass `Function&` when the argument cannot be null\r\n3) Pass `Function*` when it may be null\r\n\r\nOur current code that take `std::shared_ptr<Function>` generally takes ownership.", "created_at": "2018-01-17T19:56:40Z", "updated_at": "2018-11-23T15:38:16Z", "html_url": "https://github.com/pytorch/pytorch/pull/4690#discussion_r162162151", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4690", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/162162151"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/4690#discussion_r162162151"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4690"}}, "body_html": "<p>Not sure where else we're passing <code>std::shared_ptr&lt;Function&gt;</code> as arguments without taking ownership. Herb Sutter's <a href=\"https://herbsutter.com/2013/06/05/gotw-91-solution-smart-pointer-parameters/\" rel=\"nofollow\">recommendation</a> is:</p>\n<ol>\n<li>Pass <code>std::shared_ptr&lt;Function&gt;</code> when taking ownership</li>\n<li>Pass <code>Function&amp;</code> when the argument cannot be null</li>\n<li>Pass <code>Function*</code> when it may be null</li>\n</ol>\n<p>Our current code that take <code>std::shared_ptr&lt;Function&gt;</code> generally takes ownership.</p>", "body_text": "Not sure where else we're passing std::shared_ptr<Function> as arguments without taking ownership. Herb Sutter's recommendation is:\n\nPass std::shared_ptr<Function> when taking ownership\nPass Function& when the argument cannot be null\nPass Function* when it may be null\n\nOur current code that take std::shared_ptr<Function> generally takes ownership.", "in_reply_to_id": 162119749}