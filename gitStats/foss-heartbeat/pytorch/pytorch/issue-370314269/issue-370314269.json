{"url": "https://api.github.com/repos/pytorch/pytorch/issues/12670", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/12670/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/12670/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/12670/events", "html_url": "https://github.com/pytorch/pytorch/issues/12670", "id": 370314269, "node_id": "MDU6SXNzdWUzNzAzMTQyNjk=", "number": 12670, "title": "Unexpected behaviour of CrossEntropy Loss function", "user": {"login": "jiacheng-xu", "id": 11880376, "node_id": "MDQ6VXNlcjExODgwMzc2", "avatar_url": "https://avatars2.githubusercontent.com/u/11880376?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jiacheng-xu", "html_url": "https://github.com/jiacheng-xu", "followers_url": "https://api.github.com/users/jiacheng-xu/followers", "following_url": "https://api.github.com/users/jiacheng-xu/following{/other_user}", "gists_url": "https://api.github.com/users/jiacheng-xu/gists{/gist_id}", "starred_url": "https://api.github.com/users/jiacheng-xu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jiacheng-xu/subscriptions", "organizations_url": "https://api.github.com/users/jiacheng-xu/orgs", "repos_url": "https://api.github.com/users/jiacheng-xu/repos", "events_url": "https://api.github.com/users/jiacheng-xu/events{/privacy}", "received_events_url": "https://api.github.com/users/jiacheng-xu/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-10-15T19:41:45Z", "updated_at": "2018-10-16T20:59:58Z", "closed_at": null, "author_association": "NONE", "body_html": "<h2><g-emoji class=\"g-emoji\" alias=\"bug\" fallback-src=\"https://assets-cdn.github.com/images/icons/emoji/unicode/1f41b.png\">\ud83d\udc1b</g-emoji> Bug</h2>\n\n<p>The ignore_index option in the <a href=\"https://pytorch.org/docs/stable/nn.html?highlight=crossen#torch.nn.CrossEntropyLoss\" rel=\"nofollow\">CrossEntropyLoss</a> doesn't work as expected.</p>\n<h2>To Reproduce</h2>\n<p>Steps to reproduce the behavior: Run the code:</p>\n<pre><code>import torch\nIGNORE_IDX=  -1\nprint(\"PyTorch version: {}\".format(torch.__version__))\nxe = torch.nn.CrossEntropyLoss(ignore_index=IGNORE_IDX, reduction='none')\ninput = torch.randn(3, 5, requires_grad=True)\nprint(\"Input: {}\".format(input))\n\n#### test 1:\ntarget = torch.empty(3, dtype=torch.long).random_(5)\ntarget[2] = -4      # should be an error\nprint(\"Target: {}\".format(target))\nloss = xe(input, target)\nprint(\"Loss before reduction: {}\".format(loss))\noutput=torch.mean(loss)\nprint(\"Loss after reduction: {}\".format(output))\noutput.backward()\nprint('-'*20)\n\n#### test 2:\ntarget = torch.empty(3, dtype=torch.long).random_(5)\ntarget[2] = IGNORE_IDX      # should be an expected case\nprint(\"Target: {}\".format(target))\nloss = xe(input, target)\nprint(\"Loss before reduction: {}\".format(loss))\noutput=torch.mean(loss)\nprint(\"Loss after reduction: {}\".format(output))\noutput.backward()\n\n### test 3: run test 2 again\n#### test 2:\ntarget = torch.empty(3, dtype=torch.long).random_(5)\ntarget[2] = IGNORE_IDX      # should be an expected case\nprint(\"Target: {}\".format(target))\nloss = xe(input, target)\nprint(\"Loss before reduction: {}\".format(loss))\noutput=torch.mean(loss)\nprint(\"Loss after reduction: {}\".format(output))\noutput.backward()\n</code></pre>\n<p>Output:</p>\n<pre><code>PyTorch version: 0.4.1\nInput: tensor([[ 0.1701,  0.5413,  0.0602, -0.5931,  0.7988],\n        [ 1.3246,  1.7712,  0.3580, -0.7260, -1.5769],\n        [-0.7042, -0.6937, -0.3258, -0.2008,  0.5201]], requires_grad=True)\nTarget: tensor([ 1,  1, -4])\nLoss before reduction: tensor([                         1.3669,                          0.6934,\n        -4374419384465317223727104.0000], grad_fn=&lt;NllLossBackward&gt;)\nLoss after reduction: -1.4581397467833764e+24\n--------------------\nTarget: tensor([ 2,  3, -1])\nLoss before reduction: tensor([1.8480, 3.1906, 0.0625], grad_fn=&lt;NllLossBackward&gt;)\nLoss after reduction: 1.7003979682922363\nTarget: tensor([ 0,  4, -1])\nLoss before reduction: tensor([                         1.7381,                          4.0416,\n        -4409735675994434160295936.0000], grad_fn=&lt;NllLossBackward&gt;)\nLoss after reduction: -1.4699119400365407e+24\n\nProcess finished with exit code 0\n\n</code></pre>\n\n<h2>Expected behavior</h2>\n\n<p>For the first case: It should throw and error because the target index should range from [0,class]. But it doesn't.<br>\nFor the second case: The value of the corresponding index should be consistently 0 or (very small number?). But it seems not numerically stable at all. If you have difficulty to reproduce the output, just run the sript for two or three times.</p>\n<p>If i need to manually mask out those invalid bit, the ignore_index option is just confusing and should be removed. I thought the loss i got should just be the average or sum of those valid bits.</p>\n<h2>Environment</h2>\n<p>Please copy and paste the output from our<br>\n<a href=\"https://raw.githubusercontent.com/pytorch/pytorch/master/torch/utils/collect_env.py\" rel=\"nofollow\">environment collection script</a><br>\n(or fill out the checklist below manually).</p>\n<p>You can get the script and run it with:</p>\n<pre><code>Collecting environment information...\nPyTorch version: 0.4.1\nIs debug build: No\nCUDA used to build PyTorch: 9.0.176\n\nOS: Ubuntu 16.04.4 LTS\nGCC version: (Ubuntu 5.4.0-6ubuntu1~16.04.9) 5.4.0 20160609\nCMake version: version 3.5.1\n\nPython version: 3.6\nIs CUDA available: Yes\nCUDA runtime version: 9.0.176\nGPU models and configuration: \nGPU 0: GeForce GTX 1080 Ti\nGPU 1: GeForce GTX 1080 Ti\nGPU 2: TITAN Xp\n\nNvidia driver version: 384.111\ncuDNN version: Probably one of the following:\n/usr/lib/x86_64-linux-gnu/libcudnn.so.6.0.21\n/usr/lib/x86_64-linux-gnu/libcudnn.so.7.0.5\n/usr/lib/x86_64-linux-gnu/libcudnn_static_v6.a\n/usr/lib/x86_64-linux-gnu/libcudnn_static_v7.a\n/usr/local/cuda-8.0/lib64/libcudnn.so\n/usr/local/cuda-8.0/lib64/libcudnn.so.6\n/usr/local/cuda-8.0/lib64/libcudnn.so.6.0.21\n/usr/local/cuda-8.0/lib64/libcudnn.so.7\n/usr/local/cuda-8.0/lib64/libcudnn.so.7.0.5\n/usr/local/cuda-8.0/lib64/libcudnn.so.7.1.1\n/usr/local/cuda-8.0/lib64/libcudnn_static.a\n/usr/local/cuda-9.0/lib64/libcudnn.so\n/usr/local/cuda-9.0/lib64/libcudnn.so.6\n/usr/local/cuda-9.0/lib64/libcudnn.so.6.0.21\n/usr/local/cuda-9.0/lib64/libcudnn.so.7\n/usr/local/cuda-9.0/lib64/libcudnn.so.7.0.5\n/usr/local/cuda-9.0/lib64/libcudnn.so.7.1.1\n/usr/local/cuda-9.0/lib64/libcudnn_static.a\n/usr/local/cuda-9.1/lib64/libcudnn.so\n/usr/local/cuda-9.1/lib64/libcudnn.so.6\n/usr/local/cuda-9.1/lib64/libcudnn.so.6.0.21\n/usr/local/cuda-9.1/lib64/libcudnn.so.7\n/usr/local/cuda-9.1/lib64/libcudnn.so.7.0.5\n/usr/local/cuda-9.1/lib64/libcudnn.so.7.1.1\n/usr/local/cuda-9.1/lib64/libcudnn_static.a\n\nVersions of relevant libraries:\n[pip] Could not collect\n[conda] cuda90                    1.0                  h6433d27_0    pytorch\n[conda] pytorch                   0.4.1           py36_cuda9.0.176_cudnn7.1.2_1    pytorch\n[conda] torch                     0.4.1                     &lt;pip&gt;\n[conda] torchfile                 0.1.0                     &lt;pip&gt;\n[conda] torchvision               0.2.1                    py36_1    pytorch\n\n</code></pre>\n<h2>Additional context</h2>\n", "body_text": "\ud83d\udc1b Bug\n\nThe ignore_index option in the CrossEntropyLoss doesn't work as expected.\nTo Reproduce\nSteps to reproduce the behavior: Run the code:\nimport torch\nIGNORE_IDX=  -1\nprint(\"PyTorch version: {}\".format(torch.__version__))\nxe = torch.nn.CrossEntropyLoss(ignore_index=IGNORE_IDX, reduction='none')\ninput = torch.randn(3, 5, requires_grad=True)\nprint(\"Input: {}\".format(input))\n\n#### test 1:\ntarget = torch.empty(3, dtype=torch.long).random_(5)\ntarget[2] = -4      # should be an error\nprint(\"Target: {}\".format(target))\nloss = xe(input, target)\nprint(\"Loss before reduction: {}\".format(loss))\noutput=torch.mean(loss)\nprint(\"Loss after reduction: {}\".format(output))\noutput.backward()\nprint('-'*20)\n\n#### test 2:\ntarget = torch.empty(3, dtype=torch.long).random_(5)\ntarget[2] = IGNORE_IDX      # should be an expected case\nprint(\"Target: {}\".format(target))\nloss = xe(input, target)\nprint(\"Loss before reduction: {}\".format(loss))\noutput=torch.mean(loss)\nprint(\"Loss after reduction: {}\".format(output))\noutput.backward()\n\n### test 3: run test 2 again\n#### test 2:\ntarget = torch.empty(3, dtype=torch.long).random_(5)\ntarget[2] = IGNORE_IDX      # should be an expected case\nprint(\"Target: {}\".format(target))\nloss = xe(input, target)\nprint(\"Loss before reduction: {}\".format(loss))\noutput=torch.mean(loss)\nprint(\"Loss after reduction: {}\".format(output))\noutput.backward()\n\nOutput:\nPyTorch version: 0.4.1\nInput: tensor([[ 0.1701,  0.5413,  0.0602, -0.5931,  0.7988],\n        [ 1.3246,  1.7712,  0.3580, -0.7260, -1.5769],\n        [-0.7042, -0.6937, -0.3258, -0.2008,  0.5201]], requires_grad=True)\nTarget: tensor([ 1,  1, -4])\nLoss before reduction: tensor([                         1.3669,                          0.6934,\n        -4374419384465317223727104.0000], grad_fn=<NllLossBackward>)\nLoss after reduction: -1.4581397467833764e+24\n--------------------\nTarget: tensor([ 2,  3, -1])\nLoss before reduction: tensor([1.8480, 3.1906, 0.0625], grad_fn=<NllLossBackward>)\nLoss after reduction: 1.7003979682922363\nTarget: tensor([ 0,  4, -1])\nLoss before reduction: tensor([                         1.7381,                          4.0416,\n        -4409735675994434160295936.0000], grad_fn=<NllLossBackward>)\nLoss after reduction: -1.4699119400365407e+24\n\nProcess finished with exit code 0\n\n\n\nExpected behavior\n\nFor the first case: It should throw and error because the target index should range from [0,class]. But it doesn't.\nFor the second case: The value of the corresponding index should be consistently 0 or (very small number?). But it seems not numerically stable at all. If you have difficulty to reproduce the output, just run the sript for two or three times.\nIf i need to manually mask out those invalid bit, the ignore_index option is just confusing and should be removed. I thought the loss i got should just be the average or sum of those valid bits.\nEnvironment\nPlease copy and paste the output from our\nenvironment collection script\n(or fill out the checklist below manually).\nYou can get the script and run it with:\nCollecting environment information...\nPyTorch version: 0.4.1\nIs debug build: No\nCUDA used to build PyTorch: 9.0.176\n\nOS: Ubuntu 16.04.4 LTS\nGCC version: (Ubuntu 5.4.0-6ubuntu1~16.04.9) 5.4.0 20160609\nCMake version: version 3.5.1\n\nPython version: 3.6\nIs CUDA available: Yes\nCUDA runtime version: 9.0.176\nGPU models and configuration: \nGPU 0: GeForce GTX 1080 Ti\nGPU 1: GeForce GTX 1080 Ti\nGPU 2: TITAN Xp\n\nNvidia driver version: 384.111\ncuDNN version: Probably one of the following:\n/usr/lib/x86_64-linux-gnu/libcudnn.so.6.0.21\n/usr/lib/x86_64-linux-gnu/libcudnn.so.7.0.5\n/usr/lib/x86_64-linux-gnu/libcudnn_static_v6.a\n/usr/lib/x86_64-linux-gnu/libcudnn_static_v7.a\n/usr/local/cuda-8.0/lib64/libcudnn.so\n/usr/local/cuda-8.0/lib64/libcudnn.so.6\n/usr/local/cuda-8.0/lib64/libcudnn.so.6.0.21\n/usr/local/cuda-8.0/lib64/libcudnn.so.7\n/usr/local/cuda-8.0/lib64/libcudnn.so.7.0.5\n/usr/local/cuda-8.0/lib64/libcudnn.so.7.1.1\n/usr/local/cuda-8.0/lib64/libcudnn_static.a\n/usr/local/cuda-9.0/lib64/libcudnn.so\n/usr/local/cuda-9.0/lib64/libcudnn.so.6\n/usr/local/cuda-9.0/lib64/libcudnn.so.6.0.21\n/usr/local/cuda-9.0/lib64/libcudnn.so.7\n/usr/local/cuda-9.0/lib64/libcudnn.so.7.0.5\n/usr/local/cuda-9.0/lib64/libcudnn.so.7.1.1\n/usr/local/cuda-9.0/lib64/libcudnn_static.a\n/usr/local/cuda-9.1/lib64/libcudnn.so\n/usr/local/cuda-9.1/lib64/libcudnn.so.6\n/usr/local/cuda-9.1/lib64/libcudnn.so.6.0.21\n/usr/local/cuda-9.1/lib64/libcudnn.so.7\n/usr/local/cuda-9.1/lib64/libcudnn.so.7.0.5\n/usr/local/cuda-9.1/lib64/libcudnn.so.7.1.1\n/usr/local/cuda-9.1/lib64/libcudnn_static.a\n\nVersions of relevant libraries:\n[pip] Could not collect\n[conda] cuda90                    1.0                  h6433d27_0    pytorch\n[conda] pytorch                   0.4.1           py36_cuda9.0.176_cudnn7.1.2_1    pytorch\n[conda] torch                     0.4.1                     <pip>\n[conda] torchfile                 0.1.0                     <pip>\n[conda] torchvision               0.2.1                    py36_1    pytorch\n\n\nAdditional context", "body": "## \ud83d\udc1b Bug\r\n\r\n<!-- A clear and concise description of what the bug is. -->\r\nThe ignore_index option in the [CrossEntropyLoss](https://pytorch.org/docs/stable/nn.html?highlight=crossen#torch.nn.CrossEntropyLoss) doesn't work as expected.\r\n## To Reproduce\r\n\r\nSteps to reproduce the behavior: Run the code:\r\n```\r\nimport torch\r\nIGNORE_IDX=  -1\r\nprint(\"PyTorch version: {}\".format(torch.__version__))\r\nxe = torch.nn.CrossEntropyLoss(ignore_index=IGNORE_IDX, reduction='none')\r\ninput = torch.randn(3, 5, requires_grad=True)\r\nprint(\"Input: {}\".format(input))\r\n\r\n#### test 1:\r\ntarget = torch.empty(3, dtype=torch.long).random_(5)\r\ntarget[2] = -4      # should be an error\r\nprint(\"Target: {}\".format(target))\r\nloss = xe(input, target)\r\nprint(\"Loss before reduction: {}\".format(loss))\r\noutput=torch.mean(loss)\r\nprint(\"Loss after reduction: {}\".format(output))\r\noutput.backward()\r\nprint('-'*20)\r\n\r\n#### test 2:\r\ntarget = torch.empty(3, dtype=torch.long).random_(5)\r\ntarget[2] = IGNORE_IDX      # should be an expected case\r\nprint(\"Target: {}\".format(target))\r\nloss = xe(input, target)\r\nprint(\"Loss before reduction: {}\".format(loss))\r\noutput=torch.mean(loss)\r\nprint(\"Loss after reduction: {}\".format(output))\r\noutput.backward()\r\n\r\n### test 3: run test 2 again\r\n#### test 2:\r\ntarget = torch.empty(3, dtype=torch.long).random_(5)\r\ntarget[2] = IGNORE_IDX      # should be an expected case\r\nprint(\"Target: {}\".format(target))\r\nloss = xe(input, target)\r\nprint(\"Loss before reduction: {}\".format(loss))\r\noutput=torch.mean(loss)\r\nprint(\"Loss after reduction: {}\".format(output))\r\noutput.backward()\r\n```\r\nOutput:\r\n```\r\nPyTorch version: 0.4.1\r\nInput: tensor([[ 0.1701,  0.5413,  0.0602, -0.5931,  0.7988],\r\n        [ 1.3246,  1.7712,  0.3580, -0.7260, -1.5769],\r\n        [-0.7042, -0.6937, -0.3258, -0.2008,  0.5201]], requires_grad=True)\r\nTarget: tensor([ 1,  1, -4])\r\nLoss before reduction: tensor([                         1.3669,                          0.6934,\r\n        -4374419384465317223727104.0000], grad_fn=<NllLossBackward>)\r\nLoss after reduction: -1.4581397467833764e+24\r\n--------------------\r\nTarget: tensor([ 2,  3, -1])\r\nLoss before reduction: tensor([1.8480, 3.1906, 0.0625], grad_fn=<NllLossBackward>)\r\nLoss after reduction: 1.7003979682922363\r\nTarget: tensor([ 0,  4, -1])\r\nLoss before reduction: tensor([                         1.7381,                          4.0416,\r\n        -4409735675994434160295936.0000], grad_fn=<NllLossBackward>)\r\nLoss after reduction: -1.4699119400365407e+24\r\n\r\nProcess finished with exit code 0\r\n\r\n```\r\n\r\n<!-- If you have a code sample, error messages, stack traces, please provide it here as well -->\r\n\r\n## Expected behavior\r\n\r\n<!-- A clear and concise description of what you expected to happen. -->\r\nFor the first case: It should throw and error because the target index should range from [0,class]. But it doesn't.\r\nFor the second case: The value of the corresponding index should be consistently 0 or (very small number?). But it seems not numerically stable at all. If you have difficulty to reproduce the output, just run the sript for two or three times. \r\n\r\nIf i need to manually mask out those invalid bit, the ignore_index option is just confusing and should be removed. I thought the loss i got should just be the average or sum of those valid bits.\r\n## Environment\r\n\r\nPlease copy and paste the output from our\r\n[environment collection script](https://raw.githubusercontent.com/pytorch/pytorch/master/torch/utils/collect_env.py)\r\n(or fill out the checklist below manually).\r\n\r\nYou can get the script and run it with:\r\n```\r\nCollecting environment information...\r\nPyTorch version: 0.4.1\r\nIs debug build: No\r\nCUDA used to build PyTorch: 9.0.176\r\n\r\nOS: Ubuntu 16.04.4 LTS\r\nGCC version: (Ubuntu 5.4.0-6ubuntu1~16.04.9) 5.4.0 20160609\r\nCMake version: version 3.5.1\r\n\r\nPython version: 3.6\r\nIs CUDA available: Yes\r\nCUDA runtime version: 9.0.176\r\nGPU models and configuration: \r\nGPU 0: GeForce GTX 1080 Ti\r\nGPU 1: GeForce GTX 1080 Ti\r\nGPU 2: TITAN Xp\r\n\r\nNvidia driver version: 384.111\r\ncuDNN version: Probably one of the following:\r\n/usr/lib/x86_64-linux-gnu/libcudnn.so.6.0.21\r\n/usr/lib/x86_64-linux-gnu/libcudnn.so.7.0.5\r\n/usr/lib/x86_64-linux-gnu/libcudnn_static_v6.a\r\n/usr/lib/x86_64-linux-gnu/libcudnn_static_v7.a\r\n/usr/local/cuda-8.0/lib64/libcudnn.so\r\n/usr/local/cuda-8.0/lib64/libcudnn.so.6\r\n/usr/local/cuda-8.0/lib64/libcudnn.so.6.0.21\r\n/usr/local/cuda-8.0/lib64/libcudnn.so.7\r\n/usr/local/cuda-8.0/lib64/libcudnn.so.7.0.5\r\n/usr/local/cuda-8.0/lib64/libcudnn.so.7.1.1\r\n/usr/local/cuda-8.0/lib64/libcudnn_static.a\r\n/usr/local/cuda-9.0/lib64/libcudnn.so\r\n/usr/local/cuda-9.0/lib64/libcudnn.so.6\r\n/usr/local/cuda-9.0/lib64/libcudnn.so.6.0.21\r\n/usr/local/cuda-9.0/lib64/libcudnn.so.7\r\n/usr/local/cuda-9.0/lib64/libcudnn.so.7.0.5\r\n/usr/local/cuda-9.0/lib64/libcudnn.so.7.1.1\r\n/usr/local/cuda-9.0/lib64/libcudnn_static.a\r\n/usr/local/cuda-9.1/lib64/libcudnn.so\r\n/usr/local/cuda-9.1/lib64/libcudnn.so.6\r\n/usr/local/cuda-9.1/lib64/libcudnn.so.6.0.21\r\n/usr/local/cuda-9.1/lib64/libcudnn.so.7\r\n/usr/local/cuda-9.1/lib64/libcudnn.so.7.0.5\r\n/usr/local/cuda-9.1/lib64/libcudnn.so.7.1.1\r\n/usr/local/cuda-9.1/lib64/libcudnn_static.a\r\n\r\nVersions of relevant libraries:\r\n[pip] Could not collect\r\n[conda] cuda90                    1.0                  h6433d27_0    pytorch\r\n[conda] pytorch                   0.4.1           py36_cuda9.0.176_cudnn7.1.2_1    pytorch\r\n[conda] torch                     0.4.1                     <pip>\r\n[conda] torchfile                 0.1.0                     <pip>\r\n[conda] torchvision               0.2.1                    py36_1    pytorch\r\n\r\n```\r\n## Additional context\r\n\r\n<!-- Add any other context about the problem here. -->\r\n"}