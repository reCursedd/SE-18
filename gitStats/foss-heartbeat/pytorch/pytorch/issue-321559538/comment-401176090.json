{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/401176090", "html_url": "https://github.com/pytorch/pytorch/issues/7420#issuecomment-401176090", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/7420", "id": 401176090, "node_id": "MDEyOklzc3VlQ29tbWVudDQwMTE3NjA5MA==", "user": {"login": "hartb", "id": 18429659, "node_id": "MDQ6VXNlcjE4NDI5NjU5", "avatar_url": "https://avatars1.githubusercontent.com/u/18429659?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hartb", "html_url": "https://github.com/hartb", "followers_url": "https://api.github.com/users/hartb/followers", "following_url": "https://api.github.com/users/hartb/following{/other_user}", "gists_url": "https://api.github.com/users/hartb/gists{/gist_id}", "starred_url": "https://api.github.com/users/hartb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hartb/subscriptions", "organizations_url": "https://api.github.com/users/hartb/orgs", "repos_url": "https://api.github.com/users/hartb/repos", "events_url": "https://api.github.com/users/hartb/events{/privacy}", "received_events_url": "https://api.github.com/users/hartb/received_events", "type": "User", "site_admin": false}, "created_at": "2018-06-28T21:16:51Z", "updated_at": "2018-06-28T21:16:51Z", "author_association": "CONTRIBUTOR", "body_html": "<p>I'm looking more at <code>test_variable_sequence_cuda</code>. It fails consistently in the environment listed just above--always with:</p>\n<p><code>AssertionError: tensor(1.00000e-05 * 3.0518, dtype=torch.float16, device='cuda:0') not less than or equal to 1e-05</code></p>\n<p>The test fails only for float16.  In the failing case, the mismatch is in a single member of the tensor:</p>\n<pre><code>$ diff x_leaf.grad grad_x \n4c4\n&lt;          [-0.0182,  0.0000,  0.0499],\n---\n&gt;          [-0.0183,  0.0000,  0.0499],\n</code></pre>\n<p>And the difference is always <code>3.0518e-05</code> (which happens == <code>2**-16</code>).</p>\n<p>I notice the assert here is coded as:</p>\n<p><code>self.assertEqual(x_leaf.grad, grad_x)</code></p>\n<p>Which demands a precision of 1e-05.  But several of the other <code>assertEqual()</code> in this file were adjusted (by: <a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/pytorch/pytorch/commit/1c01eabd3cc8402e6de815245774278af3ad0c7f/hovercard\" href=\"https://github.com/pytorch/pytorch/commit/1c01eabd3cc8402e6de815245774278af3ad0c7f\"><tt>1c01eab</tt></a>) to relax the precision to <code>1e-02</code> for float16, including one just below in this same test:</p>\n<pre><code>dtype2prec = {torch.float: 1e-5,\n              torch.double: 1e-5,\n              torch.half: 1e-2}\n...\n            self.assertEqual(p1.grad, p2.grad, dtype2prec[dtype])\n</code></pre>\n<p>Is this maybe a case of the test tolerance being too tight?  Or should we really expect the first comparison to fall within <code>1e-05</code>, even for float16?</p>", "body_text": "I'm looking more at test_variable_sequence_cuda. It fails consistently in the environment listed just above--always with:\nAssertionError: tensor(1.00000e-05 * 3.0518, dtype=torch.float16, device='cuda:0') not less than or equal to 1e-05\nThe test fails only for float16.  In the failing case, the mismatch is in a single member of the tensor:\n$ diff x_leaf.grad grad_x \n4c4\n<          [-0.0182,  0.0000,  0.0499],\n---\n>          [-0.0183,  0.0000,  0.0499],\n\nAnd the difference is always 3.0518e-05 (which happens == 2**-16).\nI notice the assert here is coded as:\nself.assertEqual(x_leaf.grad, grad_x)\nWhich demands a precision of 1e-05.  But several of the other assertEqual() in this file were adjusted (by: 1c01eab) to relax the precision to 1e-02 for float16, including one just below in this same test:\ndtype2prec = {torch.float: 1e-5,\n              torch.double: 1e-5,\n              torch.half: 1e-2}\n...\n            self.assertEqual(p1.grad, p2.grad, dtype2prec[dtype])\n\nIs this maybe a case of the test tolerance being too tight?  Or should we really expect the first comparison to fall within 1e-05, even for float16?", "body": "I'm looking more at `test_variable_sequence_cuda`. It fails consistently in the environment listed just above--always with:\r\n\r\n`AssertionError: tensor(1.00000e-05 *\r\n       3.0518, dtype=torch.float16, device='cuda:0') not less than or equal to 1e-05`\r\n\r\n\r\nThe test fails only for float16.  In the failing case, the mismatch is in a single member of the tensor:\r\n\r\n```\r\n$ diff x_leaf.grad grad_x \r\n4c4\r\n<          [-0.0182,  0.0000,  0.0499],\r\n---\r\n>          [-0.0183,  0.0000,  0.0499],\r\n```\r\n\r\nAnd the difference is always `3.0518e-05` (which happens == `2**-16`).\r\n\r\nI notice the assert here is coded as:\r\n\r\n`self.assertEqual(x_leaf.grad, grad_x)`\r\n\r\nWhich demands a precision of 1e-05.  But several of the other `assertEqual()` in this file were adjusted (by: https://github.com/pytorch/pytorch/commit/1c01eabd3cc8402e6de815245774278af3ad0c7f) to relax the precision to `1e-02` for float16, including one just below in this same test:\r\n\r\n```\r\ndtype2prec = {torch.float: 1e-5,\r\n              torch.double: 1e-5,\r\n              torch.half: 1e-2}\r\n...\r\n            self.assertEqual(p1.grad, p2.grad, dtype2prec[dtype])\r\n```\r\n\r\nIs this maybe a case of the test tolerance being too tight?  Or should we really expect the first comparison to fall within `1e-05`, even for float16?\r\n"}