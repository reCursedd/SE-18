{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/145750839", "pull_request_review_id": 70591066, "id": 145750839, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0NTc1MDgzOQ==", "diff_hunk": "@@ -127,19 +134,32 @@ def _unflatten_tensors(flat, tensors):\n \n \n def _take_tensors(tensors, size_limit):\n-    \"\"\"Groups tensors into lists of up to size_limit bytes\"\"\"\n+    \"\"\"Groups tensors into chunks. This generator yeilds a chunks at each call,\n+    containing tensors up to certain byte limit in total size.\n+\n+    Args:\n+        tensors (list): The list of tensors to be separated into chunks.\n+        size_limit (int): The limit of each chunk in bytes.\n+    \"\"\"\n     buf = []\n-    size = 0\n+    dense_size = 0\n     last_type = type(tensors[0]) if len(tensors) > 0 else None\n+    last_is_sparse = False\n     for tensor in tensors:\n         t = type(tensor)\n-        param_size = tensor.numel() * tensor.element_size()\n-        if t is not last_type or (size + param_size > size_limit and size > 0):\n+        is_sparse = tensor.is_sparse\n+        if not is_sparse:\n+            param_size = tensor.numel() * tensor.element_size()\n+        if last_is_sparse or \\\n+            t is not last_type or \\\n+            (not is_sparse and dense_size + param_size > size_limit and dense_size > 0):\n             yield buf\n             last_type = t\n-            size = 0\n+            dense_size = 0\n             buf = []\n         buf.append(tensor)\n-        size += param_size\n+        last_is_sparse = is_sparse\n+        if not is_sparse:\n+            dense_size += param_size", "path": "torch/_utils.py", "position": null, "original_position": 66, "commit_id": "2dc9a550198bb9f07e51d3ad5d996aa2ee8f60f9", "original_commit_id": "e323933c5f24a6c53ed68f474c436f84fa37d257", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Wouldn't be enough to just do this at the top of the loop:\r\n```python\r\nif tensor.is_sparse:\r\n    yield tensor\r\n    continue\r\n```\r\nSo if you see a sparse tensor you just return it, and don't try to break dense groups into smaller subgroups ", "created_at": "2017-10-19T16:19:01Z", "updated_at": "2018-11-23T15:35:30Z", "html_url": "https://github.com/pytorch/pytorch/pull/3178#discussion_r145750839", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/3178", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/145750839"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/3178#discussion_r145750839"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/3178"}}, "body_html": "<p>Wouldn't be enough to just do this at the top of the loop:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">if</span> tensor.is_sparse:\n    <span class=\"pl-k\">yield</span> tensor\n    <span class=\"pl-k\">continue</span></pre></div>\n<p>So if you see a sparse tensor you just return it, and don't try to break dense groups into smaller subgroups</p>", "body_text": "Wouldn't be enough to just do this at the top of the loop:\nif tensor.is_sparse:\n    yield tensor\n    continue\nSo if you see a sparse tensor you just return it, and don't try to break dense groups into smaller subgroups"}