{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/337941923", "html_url": "https://github.com/pytorch/pytorch/pull/3178#issuecomment-337941923", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/3178", "id": 337941923, "node_id": "MDEyOklzc3VlQ29tbWVudDMzNzk0MTkyMw==", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "created_at": "2017-10-19T15:19:56Z", "updated_at": "2017-10-19T15:19:56Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Aha, got it. Yeah, that will probably catch it. But it's often good to have a simpler test too, something like:</p>\n<pre><code>    @unittest.skipIf(torch.cuda.device_count() &lt; 2, \"multi-GPU not supported\")\n    def test_tensor_device(self):\n        self.assertEqual(torch.cuda.FloatTensor(1).get_device(), 0)\n        self.assertEqual(torch.cuda.FloatTensor(1, device=1).get_device(), 1)\n        with torch.cuda.device(1):\n            self.assertEqual(torch.cuda.FloatTensor(1).get_device(), 1)\n            self.assertEqual(torch.cuda.FloatTensor(1, device=0).get_device(), 0)\n            self.assertEqual(torch.cuda.FloatTensor(1, device=None).get_device(), 1)\n</code></pre>", "body_text": "Aha, got it. Yeah, that will probably catch it. But it's often good to have a simpler test too, something like:\n    @unittest.skipIf(torch.cuda.device_count() < 2, \"multi-GPU not supported\")\n    def test_tensor_device(self):\n        self.assertEqual(torch.cuda.FloatTensor(1).get_device(), 0)\n        self.assertEqual(torch.cuda.FloatTensor(1, device=1).get_device(), 1)\n        with torch.cuda.device(1):\n            self.assertEqual(torch.cuda.FloatTensor(1).get_device(), 1)\n            self.assertEqual(torch.cuda.FloatTensor(1, device=0).get_device(), 0)\n            self.assertEqual(torch.cuda.FloatTensor(1, device=None).get_device(), 1)", "body": "Aha, got it. Yeah, that will probably catch it. But it's often good to have a simpler test too, something like:\r\n\r\n```\r\n    @unittest.skipIf(torch.cuda.device_count() < 2, \"multi-GPU not supported\")\r\n    def test_tensor_device(self):\r\n        self.assertEqual(torch.cuda.FloatTensor(1).get_device(), 0)\r\n        self.assertEqual(torch.cuda.FloatTensor(1, device=1).get_device(), 1)\r\n        with torch.cuda.device(1):\r\n            self.assertEqual(torch.cuda.FloatTensor(1).get_device(), 1)\r\n            self.assertEqual(torch.cuda.FloatTensor(1, device=0).get_device(), 0)\r\n            self.assertEqual(torch.cuda.FloatTensor(1, device=None).get_device(), 1)\r\n```"}