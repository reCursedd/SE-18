{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/392214722", "html_url": "https://github.com/pytorch/pytorch/issues/7786#issuecomment-392214722", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/7786", "id": 392214722, "node_id": "MDEyOklzc3VlQ29tbWVudDM5MjIxNDcyMg==", "user": {"login": "Mercurial1101", "id": 8343010, "node_id": "MDQ6VXNlcjgzNDMwMTA=", "avatar_url": "https://avatars3.githubusercontent.com/u/8343010?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mercurial1101", "html_url": "https://github.com/Mercurial1101", "followers_url": "https://api.github.com/users/Mercurial1101/followers", "following_url": "https://api.github.com/users/Mercurial1101/following{/other_user}", "gists_url": "https://api.github.com/users/Mercurial1101/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mercurial1101/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mercurial1101/subscriptions", "organizations_url": "https://api.github.com/users/Mercurial1101/orgs", "repos_url": "https://api.github.com/users/Mercurial1101/repos", "events_url": "https://api.github.com/users/Mercurial1101/events{/privacy}", "received_events_url": "https://api.github.com/users/Mercurial1101/received_events", "type": "User", "site_admin": false}, "created_at": "2018-05-25T23:42:53Z", "updated_at": "2018-05-25T23:42:53Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=8789455\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/fKunstner\">@fKunstner</a> I have tried your code and also run with my own examples. It seems that in your implementation, good fellow's algorithm runs even slower than the naive implementation when the dimension of layer becomes large. It is quite weird. Could you comment on it?</p>", "body_text": "@fKunstner I have tried your code and also run with my own examples. It seems that in your implementation, good fellow's algorithm runs even slower than the naive implementation when the dimension of layer becomes large. It is quite weird. Could you comment on it?", "body": "@fKunstner I have tried your code and also run with my own examples. It seems that in your implementation, good fellow's algorithm runs even slower than the naive implementation when the dimension of layer becomes large. It is quite weird. Could you comment on it?"}