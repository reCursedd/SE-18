{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/178357303", "pull_request_review_id": 108411077, "id": 178357303, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3ODM1NzMwMw==", "diff_hunk": "@@ -52,63 +52,60 @@ bool isBroadcasting(Node* node) {\n   return broadcasting.count(node->kind());\n }\n \n-// First iterate over the 'from' tensor sizes. Ignore all leading and trailing\n-// dimensions that are simply one, since they can be trivially broadcasted.\n-// When iterating over the dimension sizes (with reduced 'from' tensor),\n-// starting at the trailing dimension, the dimension sizes must either be equal,\n-// or one of them does not exist. If a broadcast candidate is not found at the\n-// trailing dimension, search at the leading dimension. If one is found here,\n-// return the `axis` argument to be emitted to ONNX on the broadcasting operator\n+// This boils down to\n+//\n+//     Treating leading and trailing `1`s in `from` as wildcards, is\n+//     `from` a substring of `to`, and if so starting at which index?\n+//\n+// To answer it we do a naive, intentionally n-squared substring\n+// search, tweaked to have the correct wildcard behavior.", "path": "torch/csrc/jit/passes/onnx/peephole.cpp", "position": 17, "original_position": 17, "commit_id": "1960b5fd36a8e2093ac60789aac85ab6b8f7b56e", "original_commit_id": "2046b50db4b24add79ecf655b1a83cbb62e4cd1d", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "Can you explain in this comment why greedy match doesn't work, with an example?", "created_at": "2018-03-30T19:21:09Z", "updated_at": "2018-11-23T15:41:23Z", "html_url": "https://github.com/pytorch/pytorch/pull/6120#discussion_r178357303", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/6120", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/178357303"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/6120#discussion_r178357303"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/6120"}}, "body_html": "<p>Can you explain in this comment why greedy match doesn't work, with an example?</p>", "body_text": "Can you explain in this comment why greedy match doesn't work, with an example?"}