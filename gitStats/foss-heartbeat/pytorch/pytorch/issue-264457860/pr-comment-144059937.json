{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/144059937", "pull_request_review_id": 68663451, "id": 144059937, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0NDA1OTkzNw==", "diff_hunk": "@@ -17,8 +17,21 @@ class Addmm(InplaceFunction):\n \n     @staticmethod\n     def symbolic(g, add_matrix, matrix1, matrix2, beta=1, alpha=1, inplace=False):\n-        # TODO: test if broadcasting occurred\n-        return g.op(\"Gemm\", matrix1, matrix2, add_matrix, beta_f=beta, alpha_f=alpha, broadcast_i=True)\n+        assert matrix1.hasType() and matrix2.hasType() and add_matrix.hasType()\n+        sizes1 = matrix1.type().sizes()\n+        sizes2 = matrix2.type().sizes()\n+        sizes_add = add_matrix.type().sizes()\n+        broadcast = False\n+        assert len(sizes1) + len(sizes2) - 2 >= len(sizes_add)\n+        if (len(sizes1) + len(sizes2) - 2 > len(sizes_add)):\n+            broadcast = True\n+        else:\n+            sizes12 = sizes1[:-1] + sizes2[1:]", "path": "torch/autograd/_functions/blas.py", "position": null, "original_position": 15, "commit_id": "2634c37a93916cd875040a7478ed7f2073795fb4", "original_commit_id": "cf2ace1e78d76b37cd90690a28546546cd0d66d1", "user": {"login": "houseroad", "id": 30275821, "node_id": "MDQ6VXNlcjMwMjc1ODIx", "avatar_url": "https://avatars0.githubusercontent.com/u/30275821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/houseroad", "html_url": "https://github.com/houseroad", "followers_url": "https://api.github.com/users/houseroad/followers", "following_url": "https://api.github.com/users/houseroad/following{/other_user}", "gists_url": "https://api.github.com/users/houseroad/gists{/gist_id}", "starred_url": "https://api.github.com/users/houseroad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/houseroad/subscriptions", "organizations_url": "https://api.github.com/users/houseroad/orgs", "repos_url": "https://api.github.com/users/houseroad/repos", "events_url": "https://api.github.com/users/houseroad/events{/privacy}", "received_events_url": "https://api.github.com/users/houseroad/received_events", "type": "User", "site_admin": false}, "body": "Okay, let me check with Junjie. The description of broadcasting in GEMM's doc is a little bit vague. It should be good, if we explicitly say what we support in ONNX, which we don't.\r\n\r\nIf we try to export some GEMM operator which is not directly supported by ONNX, probably we have to either raise the exception or change the shape by ourselves in the exporter.", "created_at": "2017-10-11T16:10:41Z", "updated_at": "2018-11-23T15:35:14Z", "html_url": "https://github.com/pytorch/pytorch/pull/3063#discussion_r144059937", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/3063", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/144059937"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/3063#discussion_r144059937"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/3063"}}, "body_html": "<p>Okay, let me check with Junjie. The description of broadcasting in GEMM's doc is a little bit vague. It should be good, if we explicitly say what we support in ONNX, which we don't.</p>\n<p>If we try to export some GEMM operator which is not directly supported by ONNX, probably we have to either raise the exception or change the shape by ourselves in the exporter.</p>", "body_text": "Okay, let me check with Junjie. The description of broadcasting in GEMM's doc is a little bit vague. It should be good, if we explicitly say what we support in ONNX, which we don't.\nIf we try to export some GEMM operator which is not directly supported by ONNX, probably we have to either raise the exception or change the shape by ourselves in the exporter.", "in_reply_to_id": 144048856}