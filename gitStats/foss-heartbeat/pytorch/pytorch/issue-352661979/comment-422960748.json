{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/422960748", "html_url": "https://github.com/pytorch/pytorch/issues/10742#issuecomment-422960748", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/10742", "id": 422960748, "node_id": "MDEyOklzc3VlQ29tbWVudDQyMjk2MDc0OA==", "user": {"login": "sytrus-in-github", "id": 12224616, "node_id": "MDQ6VXNlcjEyMjI0NjE2", "avatar_url": "https://avatars0.githubusercontent.com/u/12224616?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sytrus-in-github", "html_url": "https://github.com/sytrus-in-github", "followers_url": "https://api.github.com/users/sytrus-in-github/followers", "following_url": "https://api.github.com/users/sytrus-in-github/following{/other_user}", "gists_url": "https://api.github.com/users/sytrus-in-github/gists{/gist_id}", "starred_url": "https://api.github.com/users/sytrus-in-github/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sytrus-in-github/subscriptions", "organizations_url": "https://api.github.com/users/sytrus-in-github/orgs", "repos_url": "https://api.github.com/users/sytrus-in-github/repos", "events_url": "https://api.github.com/users/sytrus-in-github/events{/privacy}", "received_events_url": "https://api.github.com/users/sytrus-in-github/received_events", "type": "User", "site_admin": false}, "created_at": "2018-09-19T21:13:58Z", "updated_at": "2018-09-19T21:13:58Z", "author_association": "CONTRIBUTOR", "body_html": "<p>If we want to align with NumPy semantics, since <a href=\"https://docs.scipy.org/doc/numpy/reference/generated/numpy.iinfo.html\" rel=\"nofollow\"><code>numpy.iinfo</code></a> provides only <code>min</code>, <code>max</code>, <code>bits</code> properties, which are all covered by <a href=\"https://docs.scipy.org/doc/numpy/reference/generated/numpy.finfo.html\" rel=\"nofollow\"><code>numpy.finfo</code></a>, we could have sth like:</p>\n<ul>\n<li><code>torch.dtype_info(dtype=torch.get_defaut_dtype())</code> that just returns <code>min</code>, <code>max</code>, <code>bits</code> for all integral and floating point dtype.</li>\n<li><code>torch.iinfo(dtype)</code> mimics <a href=\"https://docs.scipy.org/doc/numpy/reference/generated/numpy.iinfo.html\" rel=\"nofollow\"><code>numpy.iinfo</code></a> and raise error for floating dtypes.</li>\n<li><code>torch.finfo(dtype=torch.get_defaut_dtype())</code> mimics <a href=\"https://docs.scipy.org/doc/numpy/reference/generated/numpy.finfo.html\" rel=\"nofollow\"><code>numpy.finfo</code></a> (except we might not need <code>machar</code>) and raise error for integral dtypes.</li>\n</ul>\n<p>As for <code>torch.dtype</code> attributes, why no add directly the available dtype information directly as properties? Sth like <code>torch.double.eps</code> and <code>torch.short.max</code> will be fine but e.g. <code>torch.long.eps</code> will raise an error since it is not available.</p>\n<p>What do you think?</p>", "body_text": "If we want to align with NumPy semantics, since numpy.iinfo provides only min, max, bits properties, which are all covered by numpy.finfo, we could have sth like:\n\ntorch.dtype_info(dtype=torch.get_defaut_dtype()) that just returns min, max, bits for all integral and floating point dtype.\ntorch.iinfo(dtype) mimics numpy.iinfo and raise error for floating dtypes.\ntorch.finfo(dtype=torch.get_defaut_dtype()) mimics numpy.finfo (except we might not need machar) and raise error for integral dtypes.\n\nAs for torch.dtype attributes, why no add directly the available dtype information directly as properties? Sth like torch.double.eps and torch.short.max will be fine but e.g. torch.long.eps will raise an error since it is not available.\nWhat do you think?", "body": "If we want to align with NumPy semantics, since [`numpy.iinfo`](https://docs.scipy.org/doc/numpy/reference/generated/numpy.iinfo.html) provides only `min`, `max`, `bits` properties, which are all covered by [`numpy.finfo`](https://docs.scipy.org/doc/numpy/reference/generated/numpy.finfo.html), we could have sth like:\r\n\r\n- `torch.dtype_info(dtype=torch.get_defaut_dtype())` that just returns `min`, `max`, `bits` for all integral and floating point dtype.\r\n- `torch.iinfo(dtype)` mimics [`numpy.iinfo`](https://docs.scipy.org/doc/numpy/reference/generated/numpy.iinfo.html) and raise error for floating dtypes.\r\n- `torch.finfo(dtype=torch.get_defaut_dtype())` mimics [`numpy.finfo`](https://docs.scipy.org/doc/numpy/reference/generated/numpy.finfo.html) (except we might not need `machar`) and raise error for integral dtypes.\r\n\r\nAs for `torch.dtype` attributes, why no add directly the available dtype information directly as properties? Sth like `torch.double.eps` and `torch.short.max` will be fine but e.g. `torch.long.eps` will raise an error since it is not available.\r\n\r\nWhat do you think? "}