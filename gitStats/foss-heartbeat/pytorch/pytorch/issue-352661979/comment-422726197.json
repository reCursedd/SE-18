{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/422726197", "html_url": "https://github.com/pytorch/pytorch/issues/10742#issuecomment-422726197", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/10742", "id": 422726197, "node_id": "MDEyOklzc3VlQ29tbWVudDQyMjcyNjE5Nw==", "user": {"login": "sytrus-in-github", "id": 12224616, "node_id": "MDQ6VXNlcjEyMjI0NjE2", "avatar_url": "https://avatars0.githubusercontent.com/u/12224616?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sytrus-in-github", "html_url": "https://github.com/sytrus-in-github", "followers_url": "https://api.github.com/users/sytrus-in-github/followers", "following_url": "https://api.github.com/users/sytrus-in-github/following{/other_user}", "gists_url": "https://api.github.com/users/sytrus-in-github/gists{/gist_id}", "starred_url": "https://api.github.com/users/sytrus-in-github/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sytrus-in-github/subscriptions", "organizations_url": "https://api.github.com/users/sytrus-in-github/orgs", "repos_url": "https://api.github.com/users/sytrus-in-github/repos", "events_url": "https://api.github.com/users/sytrus-in-github/events{/privacy}", "received_events_url": "https://api.github.com/users/sytrus-in-github/received_events", "type": "User", "site_admin": false}, "created_at": "2018-09-19T09:27:51Z", "updated_at": "2018-09-19T09:27:51Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=6969686\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/benoitsteiner\">@benoitsteiner</a> Thanks for working on this! I also use <code>maxexp</code> and <code>minexp</code>. I guess it would be consistent to use the <code>numpy.finfo</code> as a reference.</p>\n<p>Also, in this case, what will happen if I call it with some integer type e.g. <code>torch.int.finfo</code>? In numpy there is also a <code>numpy.iinfo</code> function to get dtype info for integer types. Maybe we could merge this 2 and instead write sth like <code>dtypeinfo = x.dtype.info</code> but then <code>dtypeinfo</code> will be different for int and float types.</p>", "body_text": "@benoitsteiner Thanks for working on this! I also use maxexp and minexp. I guess it would be consistent to use the numpy.finfo as a reference.\nAlso, in this case, what will happen if I call it with some integer type e.g. torch.int.finfo? In numpy there is also a numpy.iinfo function to get dtype info for integer types. Maybe we could merge this 2 and instead write sth like dtypeinfo = x.dtype.info but then dtypeinfo will be different for int and float types.", "body": "@benoitsteiner Thanks for working on this! I also use `maxexp` and `minexp`. I guess it would be consistent to use the `numpy.finfo` as a reference.\r\n\r\nAlso, in this case, what will happen if I call it with some integer type e.g. `torch.int.finfo`? In numpy there is also a `numpy.iinfo` function to get dtype info for integer types. Maybe we could merge this 2 and instead write sth like `dtypeinfo = x.dtype.info` but then `dtypeinfo` will be different for int and float types."}