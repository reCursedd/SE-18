{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/185822816", "pull_request_review_id": 117290079, "id": 185822816, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NTgyMjgxNg==", "diff_hunk": "@@ -436,10 +443,45 @@ Tensor & transpose_(Tensor & self, int64_t dim0, int64_t dim1) {\n   return self.as_strided_(sizes, strides);\n }\n \n-Tensor & t_(Tensor & self) {\n-  if (self.ndimension() != 2) {\n-    AT_ERROR(\"t_() expects a 2D tensor, but self is \", self.ndimension());\n+Tensor transpose(const Tensor & self, int64_t dim0, int64_t dim1) {\n+  auto ndims = self.dim();\n+  dim0 = maybe_wrap_dim(dim0, ndims);\n+  dim1 = maybe_wrap_dim(dim1, ndims);\n+  if (dim0 == dim1) {\n+    return self;\n   }\n+\n+  if (self.is_sparse()) {\n+    Tensor self_clone = self.clone();  // yes, this is what THS does\n+    return sparse_transpose_(self_clone, dim0, dim1);\n+  }\n+\n+  std::vector<int64_t> strides(self.strides());\n+  std::vector<int64_t> sizes(self.sizes());\n+  std::swap(strides[dim0], strides[dim1]);\n+  std::swap(sizes[dim0], sizes[dim1]);\n+  return self.as_strided(sizes, strides);\n+}\n+\n+static void check_t(const Tensor& self, const char *fn) {\n+  if (self.is_sparse()) {\n+    int64_t nDimI = self._dimI();\n+    int64_t nDimV = self._dimV();\n+    if (!(nDimI == 2 && nDimV == 0)) {\n+      AT_ERROR(fn, \" expects a 2D sparse tensor, but self is \", nDimI, \"D indices and \", nDimV, \"D values\");\n+    }\n+  } else if (self.ndimension() != 2) {", "path": "aten/src/ATen/native/TensorShape.cpp", "position": null, "original_position": 82, "commit_id": "0c4e768ae388bf16cdaf96bdd095aa7477082568", "original_commit_id": "c927a779158ab6f370c00146403821ddd75c86d4", "user": {"login": "zou3519", "id": 5652049, "node_id": "MDQ6VXNlcjU2NTIwNDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/5652049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zou3519", "html_url": "https://github.com/zou3519", "followers_url": "https://api.github.com/users/zou3519/followers", "following_url": "https://api.github.com/users/zou3519/following{/other_user}", "gists_url": "https://api.github.com/users/zou3519/gists{/gist_id}", "starred_url": "https://api.github.com/users/zou3519/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zou3519/subscriptions", "organizations_url": "https://api.github.com/users/zou3519/orgs", "repos_url": "https://api.github.com/users/zou3519/repos", "events_url": "https://api.github.com/users/zou3519/events{/privacy}", "received_events_url": "https://api.github.com/users/zou3519/received_events", "type": "User", "site_admin": false}, "body": "nit: `self.dim()` instead of `self.ndimension()`", "created_at": "2018-05-03T14:42:43Z", "updated_at": "2018-11-23T15:43:34Z", "html_url": "https://github.com/pytorch/pytorch/pull/7200#discussion_r185822816", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/7200", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/185822816"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/7200#discussion_r185822816"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/7200"}}, "body_html": "<p>nit: <code>self.dim()</code> instead of <code>self.ndimension()</code></p>", "body_text": "nit: self.dim() instead of self.ndimension()"}