{"url": "https://api.github.com/repos/pytorch/pytorch/issues/12011", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/12011/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/12011/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/12011/events", "html_url": "https://github.com/pytorch/pytorch/pull/12011", "id": 363180840, "node_id": "MDExOlB1bGxSZXF1ZXN0MjE3NjgzMTM4", "number": 12011, "title": "Handle an edge case of destructing dataloader iterator", "user": {"login": "JackWindows", "id": 1560135, "node_id": "MDQ6VXNlcjE1NjAxMzU=", "avatar_url": "https://avatars3.githubusercontent.com/u/1560135?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JackWindows", "html_url": "https://github.com/JackWindows", "followers_url": "https://api.github.com/users/JackWindows/followers", "following_url": "https://api.github.com/users/JackWindows/following{/other_user}", "gists_url": "https://api.github.com/users/JackWindows/gists{/gist_id}", "starred_url": "https://api.github.com/users/JackWindows/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JackWindows/subscriptions", "organizations_url": "https://api.github.com/users/JackWindows/orgs", "repos_url": "https://api.github.com/users/JackWindows/repos", "events_url": "https://api.github.com/users/JackWindows/events{/privacy}", "received_events_url": "https://api.github.com/users/JackWindows/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": {"login": "SsnL", "id": 5674597, "node_id": "MDQ6VXNlcjU2NzQ1OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5674597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SsnL", "html_url": "https://github.com/SsnL", "followers_url": "https://api.github.com/users/SsnL/followers", "following_url": "https://api.github.com/users/SsnL/following{/other_user}", "gists_url": "https://api.github.com/users/SsnL/gists{/gist_id}", "starred_url": "https://api.github.com/users/SsnL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SsnL/subscriptions", "organizations_url": "https://api.github.com/users/SsnL/orgs", "repos_url": "https://api.github.com/users/SsnL/repos", "events_url": "https://api.github.com/users/SsnL/events{/privacy}", "received_events_url": "https://api.github.com/users/SsnL/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "SsnL", "id": 5674597, "node_id": "MDQ6VXNlcjU2NzQ1OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5674597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SsnL", "html_url": "https://github.com/SsnL", "followers_url": "https://api.github.com/users/SsnL/followers", "following_url": "https://api.github.com/users/SsnL/following{/other_user}", "gists_url": "https://api.github.com/users/SsnL/gists{/gist_id}", "starred_url": "https://api.github.com/users/SsnL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SsnL/subscriptions", "organizations_url": "https://api.github.com/users/SsnL/orgs", "repos_url": "https://api.github.com/users/SsnL/repos", "events_url": "https://api.github.com/users/SsnL/events{/privacy}", "received_events_url": "https://api.github.com/users/SsnL/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 8, "created_at": "2018-09-24T14:49:46Z", "updated_at": "2018-11-23T15:52:59Z", "closed_at": null, "author_association": "NONE", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/12011", "html_url": "https://github.com/pytorch/pytorch/pull/12011", "diff_url": "https://github.com/pytorch/pytorch/pull/12011.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/12011.patch"}, "body_html": "<p>If a dataloader iterator is destructed before all samples are drained, a worker process could terminate<br>\nbefore the main process gets destructed, so we need a timeout check when receiving result from worker.<br>\nI have encountered a few times the whole training stuck and the GDB trace back shows the main process is stuck at the <code>r = in_queue.get()</code> line in <code>_pin_memory_loop()</code>.</p>", "body_text": "If a dataloader iterator is destructed before all samples are drained, a worker process could terminate\nbefore the main process gets destructed, so we need a timeout check when receiving result from worker.\nI have encountered a few times the whole training stuck and the GDB trace back shows the main process is stuck at the r = in_queue.get() line in _pin_memory_loop().", "body": "If a dataloader iterator is destructed before all samples are drained, a worker process could terminate\r\nbefore the main process gets destructed, so we need a timeout check when receiving result from worker.\r\nI have encountered a few times the whole training stuck and the GDB trace back shows the main process is stuck at the `r = in_queue.get()` line in `_pin_memory_loop()`."}