{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/378572400", "html_url": "https://github.com/pytorch/pytorch/pull/6234#issuecomment-378572400", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/6234", "id": 378572400, "node_id": "MDEyOklzc3VlQ29tbWVudDM3ODU3MjQwMA==", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "created_at": "2018-04-04T11:47:24Z", "updated_at": "2018-04-04T11:47:24Z", "author_association": "MEMBER", "body_html": "<p>Thanks for the PR <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1892175\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/zeryx\">@zeryx</a>! That's certainly one way to serialize PyTorch models, and we considered it when we were writing our serialization code. While your replies to points made by <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1310570\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/soumith\">@soumith</a> make sense, and this might be useful in <em>some</em> use cases, I don't think we're ready to commit to this particular file format just yet. Once something enters the core library it's very hard to remove it later, and I think this problem deserves some extra care. I think for now it's much better to push everyone towards using ONNX for serialization, as that will come with a number of extra benefits like better portability.</p>\n<p>Please feel free to include this serialization method as part of the package you created, or a new one. It might be valuable to some people! I just don't think it's what we want to be part of the core library just yet.</p>", "body_text": "Thanks for the PR @zeryx! That's certainly one way to serialize PyTorch models, and we considered it when we were writing our serialization code. While your replies to points made by @soumith make sense, and this might be useful in some use cases, I don't think we're ready to commit to this particular file format just yet. Once something enters the core library it's very hard to remove it later, and I think this problem deserves some extra care. I think for now it's much better to push everyone towards using ONNX for serialization, as that will come with a number of extra benefits like better portability.\nPlease feel free to include this serialization method as part of the package you created, or a new one. It might be valuable to some people! I just don't think it's what we want to be part of the core library just yet.", "body": "Thanks for the PR @zeryx! That's certainly one way to serialize PyTorch models, and we considered it when we were writing our serialization code. While your replies to points made by @soumith make sense, and this might be useful in *some* use cases, I don't think we're ready to commit to this particular file format just yet. Once something enters the core library it's very hard to remove it later, and I think this problem deserves some extra care. I think for now it's much better to push everyone towards using ONNX for serialization, as that will come with a number of extra benefits like better portability.\r\n\r\nPlease feel free to include this serialization method as part of the package you created, or a new one. It might be valuable to some people! I just don't think it's what we want to be part of the core library just yet."}