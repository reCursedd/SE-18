{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/202433576", "pull_request_review_id": 137133564, "id": 202433576, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMjQzMzU3Ng==", "diff_hunk": "@@ -198,6 +200,46 @@ struct Tensor : public detail::TensorBase {\n   auto m(F func, Args&&... params) const -> decltype(func(*this, std::forward<Args>(params)...)) {\n     return func(*this, std::forward<Args>(params)...);\n   }\n+\n+  friend struct WeakTensor;\n+};\n+\n+struct WeakTensor : public detail::WeakTensorBase {\n+  using WeakTensorBase = detail::WeakTensorBase;\n+  WeakTensor() : WeakTensorBase() {}\n+  WeakTensor(TensorImpl * self, bool retain) : WeakTensorBase(self, retain) {}\n+  WeakTensor(const WeakTensor & rhs) = default;\n+  WeakTensor(WeakTensor && rhs) noexcept = default;\n+  WeakTensor(const Tensor& t) : WeakTensorBase(t.pImpl, true) {}\n+\n+  // reimplemented from TensorBase so the return type is Tensor rather than TensorBase\n+  WeakTensor & operator=(WeakTensor && rhs) & {\n+    rhs.swap(*this);\n+    return *this;\n+  }\n+  WeakTensor & operator=(WeakTensor const & rhs) & {\n+    //Tensor ctor retains original rhs.pImpl\n+    //then rhs.pImpl is swapped with this->pImpl\n+    //finally Tensor dtor releases rhs.pImpl, which was originally this->pImpl\n+    WeakTensor(rhs).swap(*this);\n+    return *this;\n+  }\n+\n+  WeakTensor & operator=(const Tensor& t) {\n+    WeakTensor(t.pImpl, true).swap(*this);\n+    return *this;\n+  }\n+\n+  // non-retaining\n+  TensorImpl * unsafeGetTensorImpl() const {\n+    return pImpl;\n+  }\n+\n+  // XXX: this can return undefined tensors\n+  // Ideally it would be at::optional<Tensor>, but MSVC is too cool for that\n+  Tensor lock() {", "path": "aten/src/ATen/templates/Tensor.h", "position": null, "original_position": 57, "commit_id": "76be0f21821be91b7e717715314b4eba472d4c57", "original_commit_id": "376333e2e4ea11009768b7d5026b132ec8a146c5", "user": {"login": "colesbury", "id": 655866, "node_id": "MDQ6VXNlcjY1NTg2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/655866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colesbury", "html_url": "https://github.com/colesbury", "followers_url": "https://api.github.com/users/colesbury/followers", "following_url": "https://api.github.com/users/colesbury/following{/other_user}", "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions", "organizations_url": "https://api.github.com/users/colesbury/orgs", "repos_url": "https://api.github.com/users/colesbury/repos", "events_url": "https://api.github.com/users/colesbury/events{/privacy}", "received_events_url": "https://api.github.com/users/colesbury/received_events", "type": "User", "site_admin": false}, "body": "This should be `const`, right?\r\n\r\nhttps://en.cppreference.com/w/cpp/memory/weak_ptr/lock", "created_at": "2018-07-13T18:17:16Z", "updated_at": "2018-11-23T15:47:22Z", "html_url": "https://github.com/pytorch/pytorch/pull/9363#discussion_r202433576", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/9363", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/202433576"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/9363#discussion_r202433576"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/9363"}}, "body_html": "<p>This should be <code>const</code>, right?</p>\n<p><a href=\"https://en.cppreference.com/w/cpp/memory/weak_ptr/lock\" rel=\"nofollow\">https://en.cppreference.com/w/cpp/memory/weak_ptr/lock</a></p>", "body_text": "This should be const, right?\nhttps://en.cppreference.com/w/cpp/memory/weak_ptr/lock"}