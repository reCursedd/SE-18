{"url": "https://api.github.com/repos/pytorch/pytorch/issues/9505", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/9505/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/9505/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/9505/events", "html_url": "https://github.com/pytorch/pytorch/pull/9505", "id": 342035335, "node_id": "MDExOlB1bGxSZXF1ZXN0MjAyMDMxMjAx", "number": 9505, "title": "Prepare to stop using attributes in the JIT", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-07-17T18:33:50Z", "updated_at": "2018-11-23T15:47:40Z", "closed_at": "2018-07-20T17:57:21Z", "author_association": "MEMBER", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/9505", "html_url": "https://github.com/pytorch/pytorch/pull/9505", "diff_url": "https://github.com/pytorch/pytorch/pull/9505.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/9505.patch"}, "body_html": "<p>This PR adds machinery to cache the schema in an IR node, and allows lookups of (possibly) constant inputs by their names (instead of position). The new methods are:</p>\n<ul>\n<li><code>at::optional&lt;T&gt; get&lt;T&gt;(Symbol name)</code> - if the argument called name is a constant, then casts it to type <code>T</code> and returns it. If it's not constant returns <code>nullopt</code>. Raises an error if there's no argument with that name.</li>\n<li><code>at::optional&lt;IValue&gt; get&lt;T&gt;(Symbol name)</code> - like above, but packs the result in an IValue</li>\n<li><code>Value* getValue(Symbol name)</code> - retrieves a <code>Value*</code> for an argument (no need to know its position).</li>\n</ul>\n<p>All above functions currently inspect the attributes as well, but that's only so that I could start using them in other places in the JIT without disrupting our current functionality. I wanted this diff to be a preparation that doesn't change the semantics too much, and so both the tracer and script create nodes with attributes. The next PR will put that to a stop, and hopefully the changes we need to make to other components will be simpler thanks to what I did here.</p>\n<p>One more thing I'd like to do before actually stopping creating the non-attributed nodes is to have a convenient way of creating a schema programmatically, matching nodes against it, and creating them without having to pack inputs into flat argument lists (which is quite error prone).</p>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=370202\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/zdevito\">@zdevito</a></p>", "body_text": "This PR adds machinery to cache the schema in an IR node, and allows lookups of (possibly) constant inputs by their names (instead of position). The new methods are:\n\nat::optional<T> get<T>(Symbol name) - if the argument called name is a constant, then casts it to type T and returns it. If it's not constant returns nullopt. Raises an error if there's no argument with that name.\nat::optional<IValue> get<T>(Symbol name) - like above, but packs the result in an IValue\nValue* getValue(Symbol name) - retrieves a Value* for an argument (no need to know its position).\n\nAll above functions currently inspect the attributes as well, but that's only so that I could start using them in other places in the JIT without disrupting our current functionality. I wanted this diff to be a preparation that doesn't change the semantics too much, and so both the tracer and script create nodes with attributes. The next PR will put that to a stop, and hopefully the changes we need to make to other components will be simpler thanks to what I did here.\nOne more thing I'd like to do before actually stopping creating the non-attributed nodes is to have a convenient way of creating a schema programmatically, matching nodes against it, and creating them without having to pack inputs into flat argument lists (which is quite error prone).\n@zdevito", "body": "This PR adds machinery to cache the schema in an IR node, and allows lookups of (possibly) constant inputs by their names (instead of position). The new methods are:\r\n\r\n- `at::optional<T> get<T>(Symbol name)` - if the argument called name is a constant, then casts it to type `T` and returns it. If it's not constant returns `nullopt`. Raises an error if there's no argument with that name.\r\n- `at::optional<IValue> get<T>(Symbol name)` - like above, but packs the result in an IValue\r\n- `Value* getValue(Symbol name)` - retrieves a `Value*` for an argument (no need to know its position).\r\n\r\nAll above functions currently inspect the attributes as well, but that's only so that I could start using them in other places in the JIT without disrupting our current functionality. I wanted this diff to be a preparation that doesn't change the semantics too much, and so both the tracer and script create nodes with attributes. The next PR will put that to a stop, and hopefully the changes we need to make to other components will be simpler thanks to what I did here.\r\n\r\nOne more thing I'd like to do before actually stopping creating the non-attributed nodes is to have a convenient way of creating a schema programmatically, matching nodes against it, and creating them without having to pack inputs into flat argument lists (which is quite error prone).\r\n\r\n@zdevito "}