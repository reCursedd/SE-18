{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/203545312", "pull_request_review_id": 138457982, "id": 203545312, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzU0NTMxMg==", "diff_hunk": "@@ -190,6 +191,15 @@ std::string valueName(Value * n) {\n   return \"n\" + std::to_string(n->unique());\n }\n \n+std::string valueNameOrConstant(Value * n) {", "path": "torch/csrc/jit/fusion_compiler.cpp", "position": null, "original_position": 24, "commit_id": "a10111f28411fe70c16b7e33b2828e2e231c7dd2", "original_commit_id": "98b5d6b036427bbc58d8311faf2419b31faad0f1", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Hmmm yeah I think I went a bit too far here. I wanted to avoid a situation where this:\r\n```\r\n%1 = prim::Constant[value={0}]()\r\n%2 = aten::add(%1, %0)\r\n```\r\ncauses the `FusionGroup` to get `%1` as an input, when we could simply inline it into the kernel. This wasn't a problem previously, because we used to put constants in the `other` attribute. On the other hand this will probably trigger an error if the constant is not a scalar, so I need to fix this.", "created_at": "2018-07-18T22:05:53Z", "updated_at": "2018-11-23T15:47:40Z", "html_url": "https://github.com/pytorch/pytorch/pull/9505#discussion_r203545312", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/9505", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/203545312"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/9505#discussion_r203545312"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/9505"}}, "body_html": "<p>Hmmm yeah I think I went a bit too far here. I wanted to avoid a situation where this:</p>\n<pre><code>%1 = prim::Constant[value={0}]()\n%2 = aten::add(%1, %0)\n</code></pre>\n<p>causes the <code>FusionGroup</code> to get <code>%1</code> as an input, when we could simply inline it into the kernel. This wasn't a problem previously, because we used to put constants in the <code>other</code> attribute. On the other hand this will probably trigger an error if the constant is not a scalar, so I need to fix this.</p>", "body_text": "Hmmm yeah I think I went a bit too far here. I wanted to avoid a situation where this:\n%1 = prim::Constant[value={0}]()\n%2 = aten::add(%1, %0)\n\ncauses the FusionGroup to get %1 as an input, when we could simply inline it into the kernel. This wasn't a problem previously, because we used to put constants in the other attribute. On the other hand this will probably trigger an error if the constant is not a scalar, so I need to fix this.", "in_reply_to_id": 203255052}