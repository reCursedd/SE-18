{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/205254910", "pull_request_review_id": 140490756, "id": 205254910, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTI1NDkxMA==", "diff_hunk": "@@ -0,0 +1,129 @@\n+#pragma once\n+\n+#include <ATen/Scalar.h>\n+\n+#include <ATen/Allocator.h>\n+#include <ATen/ScalarType.h>\n+#include <ATen/ScalarTypeUtils.h>\n+#include <TH/THTypeConversion.hpp>\n+#include <atomic>\n+\n+// Note [Weak references for intrusive refcounting]\n+// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+// Here's the scheme:\n+//\n+//  - refcount == number of strong references to the object\n+//    weakcount == number of weak references to the object,\n+//      plus one more if refcount > 0\n+//\n+//  - THStorageImpl stays live as long as there are any strong\n+//    or weak pointers to it (weakcount > 0, since strong\n+//    references count as a +1 to weakcount)\n+//\n+//  - finalizers are called and data_ptr is deallocated when refcount == 0\n+//\n+//  - Once refcount == 0, it can never again be > 0 (the transition\n+//    from > 0 to == 0 is monotonic)\n+//\n+//  - When you access THStorageImpl via a weak pointer, you must\n+//    atomically increment the use count, if it is greater than 0.\n+//    If it is not, you must report that the storage is dead.\n+//\n+\n+struct THFinalizer {\n+  virtual void operator()() = 0;\n+  virtual ~THFinalizer() {};\n+};\n+\n+namespace at {\n+\n+struct Type;\n+\n+\n+// OPtions: Use retainable\n+// Use strorage ptr == unique ptr <custom destructor calls release on storage>\n+//  - custom destructor will just decrease refcount\n+// Could rename this to StorageImplImpl and then create StorageImpl that maintains StorageImplImpl and decrease refcount\n+\n+\n+// StorageImpl/StorageImplImpl thing\n+// Inherit from retainable\n+// StorageImpl has deleter, ; assignment and move deleted, pretty much like StorageImpl and THStorageImpl before\n+// - - don't have to deleted unique ptr - will use intrusive and retainable\n+\n+\n+// Details:\n+// Forward the constructor just like before\n+// Deconstructor just calls free on StorageImpl\n+// Create a StorageImpl free function\n+\n+struct StorageImpl {\n+\n+  StorageImpl() = delete;\n+  virtual ~StorageImpl() {};\n+  StorageImpl(at::ScalarType, ptrdiff_t, at::DataPtr, at::Allocator*, char);\n+  StorageImpl(at::ScalarType, ptrdiff_t, at::Allocator*, char);\n+  at::ScalarType scalar_type;\n+  at::DataPtr data_ptr;\n+  ptrdiff_t size;\n+  std::atomic<int> refcount;\n+  std::atomic<int> weakcount;\n+  char flag;\n+  at::Allocator* allocator;\n+  std::unique_ptr<THFinalizer> finalizer;\n+  StorageImpl(StorageImpl&) = delete;\n+  StorageImpl(const StorageImpl&) = delete;\n+  StorageImpl(StorageImpl&&) = delete;\n+  StorageImpl(const StorageImpl&&) = delete;\n+\n+  template <typename T>\n+  inline T* data() const {\n+    auto scalar_type_T = at::CTypeToScalarType<th::from_type<T>>::to();\n+    if (scalar_type != scalar_type_T) {\n+      AT_ERROR(\n+          \"Attempt to access StorageImpl having data type \",\n+          at::toString(scalar_type),\n+          \" as data type \",\n+          at::toString(scalar_type_T));\n+    }\n+    return unsafe_data<T>();\n+  }\n+\n+  template <typename T>\n+  inline T* unsafe_data() const {\n+    return static_cast<T*>(this->data_ptr.get());\n+  }\n+  static const char REFCOUNTED = 1;", "path": "aten/src/ATen/StorageImpl.h", "position": null, "original_position": 96, "commit_id": "49a54a1620c5046ea3c1b3025214ca9c21385a37", "original_commit_id": "aa42020b145ba81eedf5e82a75ead6c838ef5070", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "We don't want REFCOUNTED at all. Storages are always refcounted, period. If you're going to refactor the constants, might as well get rid of them ;)", "created_at": "2018-07-25T20:40:34Z", "updated_at": "2018-11-23T15:48:07Z", "html_url": "https://github.com/pytorch/pytorch/pull/9772#discussion_r205254910", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/9772", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/205254910"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/9772#discussion_r205254910"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/9772"}}, "body_html": "<p>We don't want REFCOUNTED at all. Storages are always refcounted, period. If you're going to refactor the constants, might as well get rid of them ;)</p>", "body_text": "We don't want REFCOUNTED at all. Storages are always refcounted, period. If you're going to refactor the constants, might as well get rid of them ;)"}