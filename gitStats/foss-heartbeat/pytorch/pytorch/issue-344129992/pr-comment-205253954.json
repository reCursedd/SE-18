{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/205253954", "pull_request_review_id": 140489519, "id": 205253954, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTI1Mzk1NA==", "diff_hunk": "@@ -1,53 +1,44 @@\n #pragma once\n \n-#include \"ATen/Scalar.h\"\n-#include <TH/THStorageFunctions.hpp>\n+#include <ATen/StorageImpl.h>\n \n namespace at {\n \n-struct Type;\n+// OPtions: Use retainable\n+// Use strorage ptr == unique ptr <custom destructor calls release on storage>\n+//  - custom destructor will just decrease refcount\n+// Could rename this to StorageImplImpl and then create StorageImpl that maintains StorageImplImpl and decrease refcount\n \n-struct Storage {\n-  static const char RESIZABLE = 2;\n-\n-  Storage() {}\n-  Storage(THStorage* storage)\n-      : storage(storage) {}\n-  Storage(const Storage& other) = delete;\n-  virtual ~Storage() {\n-    THStorage_free(storage);\n-  }\n-  void operator=(const Storage&) = delete;\n \n-  virtual size_t elementSize() const = 0;\n-  size_t size() const {\n-    return storage->size;\n-  };\n-  void* data() {\n-    return storage->data_ptr.get();\n-  };\n-  const void* data() const {\n-    return storage->data_ptr.get();\n+// StorageImpl/StorageImplImpl thing\n+// Inherit from retainable\n+// StorageImpl has deleter, ; assignment and move deleted, pretty much like StorageImpl and THStorageImpl before\n+// - - don't have to deleted unique ptr - will use intrusive and retainable\n+\n+\n+// Details:\n+// Forward the constructor just like before\n+// Deconstructor just calls free on StorageImpl\n+// Create a StorageImpl free function\n+\n+struct Storage {\n+  Storage() : storage_impl_(nullptr){};\n+  Storage(StorageImpl* storage_impl) {\n+    storage_impl_ = storage_impl;\n+    if (storage_impl_)\n+      storage_impl_->retain();\n   };\n+  ~Storage();\n+  Storage(Storage&) = delete;", "path": "aten/src/ATen/Storage.h", "position": null, "original_position": 55, "commit_id": "49a54a1620c5046ea3c1b3025214ca9c21385a37", "original_commit_id": "aa42020b145ba81eedf5e82a75ead6c838ef5070", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "Worth a note that this is \"temporary\", in the sense that there are reasonable implementations of the copy/move constructors/assignment, we just didn't bother putting them in this PR.", "created_at": "2018-07-25T20:37:13Z", "updated_at": "2018-11-23T15:48:07Z", "html_url": "https://github.com/pytorch/pytorch/pull/9772#discussion_r205253954", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/9772", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/205253954"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/9772#discussion_r205253954"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/9772"}}, "body_html": "<p>Worth a note that this is \"temporary\", in the sense that there are reasonable implementations of the copy/move constructors/assignment, we just didn't bother putting them in this PR.</p>", "body_text": "Worth a note that this is \"temporary\", in the sense that there are reasonable implementations of the copy/move constructors/assignment, we just didn't bother putting them in this PR."}