{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/355962561", "html_url": "https://github.com/pytorch/pytorch/issues/4523#issuecomment-355962561", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/4523", "id": 355962561, "node_id": "MDEyOklzc3VlQ29tbWVudDM1NTk2MjU2MQ==", "user": {"login": "albanD", "id": 6359743, "node_id": "MDQ6VXNlcjYzNTk3NDM=", "avatar_url": "https://avatars3.githubusercontent.com/u/6359743?v=4", "gravatar_id": "", "url": "https://api.github.com/users/albanD", "html_url": "https://github.com/albanD", "followers_url": "https://api.github.com/users/albanD/followers", "following_url": "https://api.github.com/users/albanD/following{/other_user}", "gists_url": "https://api.github.com/users/albanD/gists{/gist_id}", "starred_url": "https://api.github.com/users/albanD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/albanD/subscriptions", "organizations_url": "https://api.github.com/users/albanD/orgs", "repos_url": "https://api.github.com/users/albanD/repos", "events_url": "https://api.github.com/users/albanD/events{/privacy}", "received_events_url": "https://api.github.com/users/albanD/received_events", "type": "User", "site_admin": false}, "created_at": "2018-01-08T13:12:23Z", "updated_at": "2018-01-08T13:12:23Z", "author_association": "COLLABORATOR", "body_html": "<p>Hi,</p>\n<p>Using master, the following script runs forever on my machine. Does it crashes for you?</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> numpy <span class=\"pl-k\">as</span> np\n<span class=\"pl-k\">import</span> scipy.sparse <span class=\"pl-k\">as</span> sp\n<span class=\"pl-k\">import</span> torch\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">sparse_mx_to_torch_sparse_tensor</span>(<span class=\"pl-smi\">sparse_mx</span>):\n    sparse_mx <span class=\"pl-k\">=</span> sparse_mx.tocoo().astype(np.float32)\n    indices <span class=\"pl-k\">=</span> torch.from_numpy(np.vstack((sparse_mx.row, sparse_mx.col)))\n    indices <span class=\"pl-k\">=</span> indices.long()\n    values <span class=\"pl-k\">=</span> torch.from_numpy(sparse_mx.data)\n    shape <span class=\"pl-k\">=</span> torch.Size(sparse_mx.shape)\n    <span class=\"pl-k\">return</span> torch.sparse.FloatTensor(indices, values, shape)\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">test</span>():\n    a <span class=\"pl-k\">=</span> np.random.randn(<span class=\"pl-c1\">4</span>, <span class=\"pl-c1\">4</span>)\n    maska <span class=\"pl-k\">=</span> a <span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">0.0</span>\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> print(\"maska\", maska)</span>\n    np.putmask(a, maska <span class=\"pl-k\">==</span> <span class=\"pl-c1\">False</span>, <span class=\"pl-c1\">0.0</span>)\n    a <span class=\"pl-k\">=</span> sp.coo_matrix(a)\n    b <span class=\"pl-k\">=</span> np.random.randn(<span class=\"pl-c1\">4</span>, <span class=\"pl-c1\">4</span>)\n    maskb <span class=\"pl-k\">=</span> b <span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">0.0</span>\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> print(\"maskb\", maskb)</span>\n    np.putmask(b, maskb <span class=\"pl-k\">==</span> <span class=\"pl-c1\">False</span>, <span class=\"pl-c1\">0.0</span>)\n    b <span class=\"pl-k\">=</span> sp.coo_matrix(b)\n    c <span class=\"pl-k\">=</span> a.multiply(b)\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> print(\"c\", c)</span>\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> print(\"c.data\", c.data)</span>\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> If c is empty, sparse_mx_to_torch_sparse_tensor crashes</span>\n    <span class=\"pl-k\">if</span> c.nnz <span class=\"pl-k\">==</span> <span class=\"pl-c1\">0</span>:\n        <span class=\"pl-k\">return</span>\n    c <span class=\"pl-k\">=</span> sparse_mx_to_torch_sparse_tensor(c)\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> print(\"c.t()\", c.t())</span>\n    a <span class=\"pl-k\">=</span> sparse_mx_to_torch_sparse_tensor(a)\n    b <span class=\"pl-k\">=</span> sparse_mx_to_torch_sparse_tensor(b)\n    e <span class=\"pl-k\">=</span> torch.FloatTensor(np.random.randint(<span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">3</span>, [<span class=\"pl-c1\">4</span>, <span class=\"pl-c1\">4</span>]).astype(np.float))\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> print(\"e\", e)</span>\n    first <span class=\"pl-k\">=</span> torch.smm(c<span class=\"pl-k\">-</span>b, e).to_dense()\n    second <span class=\"pl-k\">=</span> torch.mm(c.to_dense()<span class=\"pl-k\">-</span>b.to_dense(), e)\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> print(\"torch.mm(c, b)\", )</span>\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> print(\"torch.mm(c_dense, b_dense)\", )</span>\n    diff <span class=\"pl-k\">=</span> (first<span class=\"pl-k\">-</span>second).abs().sum()\n    <span class=\"pl-k\">if</span> diff <span class=\"pl-k\">&gt;=</span> <span class=\"pl-c1\">1e-3</span>:\n        <span class=\"pl-c1\">print</span>(first)\n        <span class=\"pl-c1\">print</span>(second)\n        <span class=\"pl-k\">raise</span> <span class=\"pl-c1\">RuntimeError</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>failed<span class=\"pl-pds\">\"</span></span>)\n<span class=\"pl-k\">while</span> <span class=\"pl-c1\">True</span>:\n    test()</pre></div>", "body_text": "Hi,\nUsing master, the following script runs forever on my machine. Does it crashes for you?\nimport numpy as np\nimport scipy.sparse as sp\nimport torch\n\ndef sparse_mx_to_torch_sparse_tensor(sparse_mx):\n    sparse_mx = sparse_mx.tocoo().astype(np.float32)\n    indices = torch.from_numpy(np.vstack((sparse_mx.row, sparse_mx.col)))\n    indices = indices.long()\n    values = torch.from_numpy(sparse_mx.data)\n    shape = torch.Size(sparse_mx.shape)\n    return torch.sparse.FloatTensor(indices, values, shape)\n\ndef test():\n    a = np.random.randn(4, 4)\n    maska = a > 0.0\n    # print(\"maska\", maska)\n    np.putmask(a, maska == False, 0.0)\n    a = sp.coo_matrix(a)\n    b = np.random.randn(4, 4)\n    maskb = b > 0.0\n    # print(\"maskb\", maskb)\n    np.putmask(b, maskb == False, 0.0)\n    b = sp.coo_matrix(b)\n    c = a.multiply(b)\n    # print(\"c\", c)\n    # print(\"c.data\", c.data)\n    # If c is empty, sparse_mx_to_torch_sparse_tensor crashes\n    if c.nnz == 0:\n        return\n    c = sparse_mx_to_torch_sparse_tensor(c)\n    # print(\"c.t()\", c.t())\n    a = sparse_mx_to_torch_sparse_tensor(a)\n    b = sparse_mx_to_torch_sparse_tensor(b)\n    e = torch.FloatTensor(np.random.randint(0, 3, [4, 4]).astype(np.float))\n    # print(\"e\", e)\n    first = torch.smm(c-b, e).to_dense()\n    second = torch.mm(c.to_dense()-b.to_dense(), e)\n    # print(\"torch.mm(c, b)\", )\n    # print(\"torch.mm(c_dense, b_dense)\", )\n    diff = (first-second).abs().sum()\n    if diff >= 1e-3:\n        print(first)\n        print(second)\n        raise RuntimeError(\"failed\")\nwhile True:\n    test()", "body": "Hi,\r\n\r\nUsing master, the following script runs forever on my machine. Does it crashes for you?\r\n```python\r\nimport numpy as np\r\nimport scipy.sparse as sp\r\nimport torch\r\n\r\ndef sparse_mx_to_torch_sparse_tensor(sparse_mx):\r\n    sparse_mx = sparse_mx.tocoo().astype(np.float32)\r\n    indices = torch.from_numpy(np.vstack((sparse_mx.row, sparse_mx.col)))\r\n    indices = indices.long()\r\n    values = torch.from_numpy(sparse_mx.data)\r\n    shape = torch.Size(sparse_mx.shape)\r\n    return torch.sparse.FloatTensor(indices, values, shape)\r\n\r\ndef test():\r\n    a = np.random.randn(4, 4)\r\n    maska = a > 0.0\r\n    # print(\"maska\", maska)\r\n    np.putmask(a, maska == False, 0.0)\r\n    a = sp.coo_matrix(a)\r\n    b = np.random.randn(4, 4)\r\n    maskb = b > 0.0\r\n    # print(\"maskb\", maskb)\r\n    np.putmask(b, maskb == False, 0.0)\r\n    b = sp.coo_matrix(b)\r\n    c = a.multiply(b)\r\n    # print(\"c\", c)\r\n    # print(\"c.data\", c.data)\r\n    # If c is empty, sparse_mx_to_torch_sparse_tensor crashes\r\n    if c.nnz == 0:\r\n        return\r\n    c = sparse_mx_to_torch_sparse_tensor(c)\r\n    # print(\"c.t()\", c.t())\r\n    a = sparse_mx_to_torch_sparse_tensor(a)\r\n    b = sparse_mx_to_torch_sparse_tensor(b)\r\n    e = torch.FloatTensor(np.random.randint(0, 3, [4, 4]).astype(np.float))\r\n    # print(\"e\", e)\r\n    first = torch.smm(c-b, e).to_dense()\r\n    second = torch.mm(c.to_dense()-b.to_dense(), e)\r\n    # print(\"torch.mm(c, b)\", )\r\n    # print(\"torch.mm(c_dense, b_dense)\", )\r\n    diff = (first-second).abs().sum()\r\n    if diff >= 1e-3:\r\n        print(first)\r\n        print(second)\r\n        raise RuntimeError(\"failed\")\r\nwhile True:\r\n    test()\r\n```"}