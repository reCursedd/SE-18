{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/355956926", "html_url": "https://github.com/pytorch/pytorch/issues/4523#issuecomment-355956926", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/4523", "id": 355956926, "node_id": "MDEyOklzc3VlQ29tbWVudDM1NTk1NjkyNg==", "user": {"login": "klyao", "id": 9946494, "node_id": "MDQ6VXNlcjk5NDY0OTQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/9946494?v=4", "gravatar_id": "", "url": "https://api.github.com/users/klyao", "html_url": "https://github.com/klyao", "followers_url": "https://api.github.com/users/klyao/followers", "following_url": "https://api.github.com/users/klyao/following{/other_user}", "gists_url": "https://api.github.com/users/klyao/gists{/gist_id}", "starred_url": "https://api.github.com/users/klyao/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/klyao/subscriptions", "organizations_url": "https://api.github.com/users/klyao/orgs", "repos_url": "https://api.github.com/users/klyao/repos", "events_url": "https://api.github.com/users/klyao/events{/privacy}", "received_events_url": "https://api.github.com/users/klyao/received_events", "type": "User", "site_admin": false}, "created_at": "2018-01-08T12:44:21Z", "updated_at": "2018-01-08T12:52:15Z", "author_association": "NONE", "body_html": "<p>I'm afraid not, bro. I just tested it on numpy several times and got no problem...  And you can see that in pytorch, the difference of the results (that I provided above) of the two operation is a little big while the matrix are only 4*4!</p>\n<pre><code>def test_np():\n    a = np.random.randn(4, 4)\n    maska = a &gt; 0.0\n    # print(\"maska\", maska)\n    np.putmask(a, maska == False, 0.0)\n    a = sp.coo_matrix(a)\n\n    b = np.random.randn(4, 4)\n    maskb = b &gt; 0.0\n    # print(\"maskb\", maskb)\n    np.putmask(b, maskb == False, 0.0)\n    b = sp.coo_matrix(b)\n\n    c = a.multiply(b)\n    print(\"c\", c)\n    print(\"c.data\", c.data)\n\n    e = np.random.randint(0, 3, [4, 4]).astype(np.float)\n    print(\"e\", e)\n\n    print(\"(c - b) * e\\n\", (c - b) * e)\n    print(\"(c.to_dense() - b.to_dense()) * e\\n\", (c.todense() - b.todense()) * e)\n</code></pre>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=10772830\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/elanmart\">@elanmart</a></p>", "body_text": "I'm afraid not, bro. I just tested it on numpy several times and got no problem...  And you can see that in pytorch, the difference of the results (that I provided above) of the two operation is a little big while the matrix are only 4*4!\ndef test_np():\n    a = np.random.randn(4, 4)\n    maska = a > 0.0\n    # print(\"maska\", maska)\n    np.putmask(a, maska == False, 0.0)\n    a = sp.coo_matrix(a)\n\n    b = np.random.randn(4, 4)\n    maskb = b > 0.0\n    # print(\"maskb\", maskb)\n    np.putmask(b, maskb == False, 0.0)\n    b = sp.coo_matrix(b)\n\n    c = a.multiply(b)\n    print(\"c\", c)\n    print(\"c.data\", c.data)\n\n    e = np.random.randint(0, 3, [4, 4]).astype(np.float)\n    print(\"e\", e)\n\n    print(\"(c - b) * e\\n\", (c - b) * e)\n    print(\"(c.to_dense() - b.to_dense()) * e\\n\", (c.todense() - b.todense()) * e)\n\n@elanmart", "body": "I'm afraid not, bro. I just tested it on numpy several times and got no problem...  And you can see that in pytorch, the difference of the results (that I provided above) of the two operation is a little big while the matrix are only 4*4!\r\n```\r\ndef test_np():\r\n    a = np.random.randn(4, 4)\r\n    maska = a > 0.0\r\n    # print(\"maska\", maska)\r\n    np.putmask(a, maska == False, 0.0)\r\n    a = sp.coo_matrix(a)\r\n\r\n    b = np.random.randn(4, 4)\r\n    maskb = b > 0.0\r\n    # print(\"maskb\", maskb)\r\n    np.putmask(b, maskb == False, 0.0)\r\n    b = sp.coo_matrix(b)\r\n\r\n    c = a.multiply(b)\r\n    print(\"c\", c)\r\n    print(\"c.data\", c.data)\r\n\r\n    e = np.random.randint(0, 3, [4, 4]).astype(np.float)\r\n    print(\"e\", e)\r\n\r\n    print(\"(c - b) * e\\n\", (c - b) * e)\r\n    print(\"(c.to_dense() - b.to_dense()) * e\\n\", (c.todense() - b.todense()) * e)\r\n```\r\n@elanmart\r\n  "}