{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/355891367", "html_url": "https://github.com/pytorch/pytorch/issues/4523#issuecomment-355891367", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/4523", "id": 355891367, "node_id": "MDEyOklzc3VlQ29tbWVudDM1NTg5MTM2Nw==", "user": {"login": "klyao", "id": 9946494, "node_id": "MDQ6VXNlcjk5NDY0OTQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/9946494?v=4", "gravatar_id": "", "url": "https://api.github.com/users/klyao", "html_url": "https://github.com/klyao", "followers_url": "https://api.github.com/users/klyao/followers", "following_url": "https://api.github.com/users/klyao/following{/other_user}", "gists_url": "https://api.github.com/users/klyao/gists{/gist_id}", "starred_url": "https://api.github.com/users/klyao/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/klyao/subscriptions", "organizations_url": "https://api.github.com/users/klyao/orgs", "repos_url": "https://api.github.com/users/klyao/repos", "events_url": "https://api.github.com/users/klyao/events{/privacy}", "received_events_url": "https://api.github.com/users/klyao/received_events", "type": "User", "site_admin": false}, "created_at": "2018-01-08T06:26:16Z", "updated_at": "2018-01-08T12:20:58Z", "author_association": "NONE", "body_html": "<p>sparse_mx_to_torch_sparse_tensor() is just a func that transform sp.coo_matrix() to torch.sparse.FloatTensor.</p>\n<pre><code>def sparse_mx_to_torch_sparse_tensor(sparse_mx):\n    sparse_mx = sparse_mx.tocoo().astype(np.float32)\n    indices = torch.from_numpy(np.vstack((sparse_mx.row, sparse_mx.col))).long()\n    values = torch.from_numpy(sparse_mx.data)\n    shape = torch.Size(sparse_mx.shape)\n    return torch.sparse.FloatTensor(indices, values, shape)\n</code></pre>", "body_text": "sparse_mx_to_torch_sparse_tensor() is just a func that transform sp.coo_matrix() to torch.sparse.FloatTensor.\ndef sparse_mx_to_torch_sparse_tensor(sparse_mx):\n    sparse_mx = sparse_mx.tocoo().astype(np.float32)\n    indices = torch.from_numpy(np.vstack((sparse_mx.row, sparse_mx.col))).long()\n    values = torch.from_numpy(sparse_mx.data)\n    shape = torch.Size(sparse_mx.shape)\n    return torch.sparse.FloatTensor(indices, values, shape)", "body": "sparse_mx_to_torch_sparse_tensor() is just a func that transform sp.coo_matrix() to torch.sparse.FloatTensor.\r\n```\r\ndef sparse_mx_to_torch_sparse_tensor(sparse_mx):\r\n    sparse_mx = sparse_mx.tocoo().astype(np.float32)\r\n    indices = torch.from_numpy(np.vstack((sparse_mx.row, sparse_mx.col))).long()\r\n    values = torch.from_numpy(sparse_mx.data)\r\n    shape = torch.Size(sparse_mx.shape)\r\n    return torch.sparse.FloatTensor(indices, values, shape)\r\n```"}