{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/404998963", "html_url": "https://github.com/pytorch/pytorch/pull/9435#issuecomment-404998963", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/9435", "id": 404998963, "node_id": "MDEyOklzc3VlQ29tbWVudDQwNDk5ODk2Mw==", "user": {"login": "mruberry", "id": 38511765, "node_id": "MDQ6VXNlcjM4NTExNzY1", "avatar_url": "https://avatars3.githubusercontent.com/u/38511765?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mruberry", "html_url": "https://github.com/mruberry", "followers_url": "https://api.github.com/users/mruberry/followers", "following_url": "https://api.github.com/users/mruberry/following{/other_user}", "gists_url": "https://api.github.com/users/mruberry/gists{/gist_id}", "starred_url": "https://api.github.com/users/mruberry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mruberry/subscriptions", "organizations_url": "https://api.github.com/users/mruberry/orgs", "repos_url": "https://api.github.com/users/mruberry/repos", "events_url": "https://api.github.com/users/mruberry/events{/privacy}", "received_events_url": "https://api.github.com/users/mruberry/received_events", "type": "User", "site_admin": false}, "created_at": "2018-07-14T04:56:32Z", "updated_at": "2018-07-14T04:56:32Z", "author_association": "CONTRIBUTOR", "body_html": "<p>REMINDER: DO NOT MERGE THIS (YET).</p>\n<p>Thanks for the review <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=13564\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ezyang\">@ezyang</a>. I like your thinking and will scrub the qualifiers to a reasonable level. I can probably find a convenient way to lock the AT_CUDNN_CHECK macro up, too ;)</p>\n<p>As for the globalCUDAContext() verbosity I also would like to do something about that. Instead of doing it in this PR, however, can we briefly delay a plan there? I suspect we can significantly refactor THCState into ATen now (well, after your allocator PR and this PR are in), and seeing how that works will likely give us a better idea of how we want to expose these CUDA calls.</p>", "body_text": "REMINDER: DO NOT MERGE THIS (YET).\nThanks for the review @ezyang. I like your thinking and will scrub the qualifiers to a reasonable level. I can probably find a convenient way to lock the AT_CUDNN_CHECK macro up, too ;)\nAs for the globalCUDAContext() verbosity I also would like to do something about that. Instead of doing it in this PR, however, can we briefly delay a plan there? I suspect we can significantly refactor THCState into ATen now (well, after your allocator PR and this PR are in), and seeing how that works will likely give us a better idea of how we want to expose these CUDA calls.", "body": "REMINDER: DO NOT MERGE THIS (YET).\r\n\r\nThanks for the review @ezyang. I like your thinking and will scrub the qualifiers to a reasonable level. I can probably find a convenient way to lock the AT_CUDNN_CHECK macro up, too ;)\r\n\r\nAs for the globalCUDAContext() verbosity I also would like to do something about that. Instead of doing it in this PR, however, can we briefly delay a plan there? I suspect we can significantly refactor THCState into ATen now (well, after your allocator PR and this PR are in), and seeing how that works will likely give us a better idea of how we want to expose these CUDA calls.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"}