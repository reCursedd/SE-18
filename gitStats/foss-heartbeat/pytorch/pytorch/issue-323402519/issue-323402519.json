{"url": "https://api.github.com/repos/pytorch/pytorch/issues/7597", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/7597/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/7597/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/7597/events", "html_url": "https://github.com/pytorch/pytorch/pull/7597", "id": 323402519, "node_id": "MDExOlB1bGxSZXF1ZXN0MTg4MjcwNzIz", "number": 7597, "title": "[C++ API] Implement builder style construction", "user": {"login": "goldsborough", "id": 6429851, "node_id": "MDQ6VXNlcjY0Mjk4NTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/6429851?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goldsborough", "html_url": "https://github.com/goldsborough", "followers_url": "https://api.github.com/users/goldsborough/followers", "following_url": "https://api.github.com/users/goldsborough/following{/other_user}", "gists_url": "https://api.github.com/users/goldsborough/gists{/gist_id}", "starred_url": "https://api.github.com/users/goldsborough/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goldsborough/subscriptions", "organizations_url": "https://api.github.com/users/goldsborough/orgs", "repos_url": "https://api.github.com/users/goldsborough/repos", "events_url": "https://api.github.com/users/goldsborough/events{/privacy}", "received_events_url": "https://api.github.com/users/goldsborough/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-05-15T22:14:54Z", "updated_at": "2018-11-23T15:44:11Z", "closed_at": "2018-05-17T21:10:16Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/7597", "html_url": "https://github.com/pytorch/pytorch/pull/7597", "diff_url": "https://github.com/pytorch/pytorch/pull/7597.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/7597.patch"}, "body_html": "<p>This PR implements our discussed \"builder\" style construction mechanism, where the class is fused with the builder itself. It is similar to the <code>KWARGS</code> mechanism in autogradpp, with some differences.</p>\n<p>Largely, this PR:</p>\n<ol>\n<li>Creates a macro <code>TORCH_PARAMETER</code> (name up for discussion, maybe <code>TORCH_PROPERTY</code>?) used to give modules parameters/properties. It is written in a way so that it requires only 2 arguments instead of 5, like <code>AUTOGRAD_KWARG</code> did</li>\n<li>Rewrites core modules to follow a construction mechanism where\n<ol>\n<li>Required arguments go to the constructor,</li>\n<li>Optional arguments are passed via setters/getters,</li>\n<li>Variable construction and other heavy lifting is moved to a <code>reset()</code> function</li>\n<li><code>reset()</code> is called inside <code>build()</code>, which finalizes construction, and <code>clone()</code></li>\n</ol>\n</li>\n<li>Does some heavy refactoring of the Convolution and RNN modules to better use polymorphism, e.g.:\n<ol>\n<li>In <code>Conv</code>, the call to <code>at::conv&lt;dimension&gt;d(...)</code> is now left to a virtual function, implemented in <code>Conv1d</code>, <code>Conv2d</code> and <code>Conv3d</code></li>\n<li>Large rewrite of rnn classes to also move their autograd implementations to virtual methods, and in general to avoid the use of the RNN mode beyond CuDNN. The RNN mode should not replace inheritance and polymorphism!!!</li>\n</ol>\n</li>\n</ol>\n<p>Recommended review order:</p>\n<ol>\n<li><code>include/torch/nn/module.h</code></li>\n<li><code>include/torch/nn/modules/*.h</code> and <code>src/nn/modules/*.cpp</code></li>\n<li>tests</li>\n</ol>\n<p>CC <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=13564\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ezyang\">@ezyang</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=3605224\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ebetica\">@ebetica</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=4583066\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/apaszke\">@apaszke</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=88510\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/jgehring\">@jgehring</a></p>", "body_text": "This PR implements our discussed \"builder\" style construction mechanism, where the class is fused with the builder itself. It is similar to the KWARGS mechanism in autogradpp, with some differences.\nLargely, this PR:\n\nCreates a macro TORCH_PARAMETER (name up for discussion, maybe TORCH_PROPERTY?) used to give modules parameters/properties. It is written in a way so that it requires only 2 arguments instead of 5, like AUTOGRAD_KWARG did\nRewrites core modules to follow a construction mechanism where\n\nRequired arguments go to the constructor,\nOptional arguments are passed via setters/getters,\nVariable construction and other heavy lifting is moved to a reset() function\nreset() is called inside build(), which finalizes construction, and clone()\n\n\nDoes some heavy refactoring of the Convolution and RNN modules to better use polymorphism, e.g.:\n\nIn Conv, the call to at::conv<dimension>d(...) is now left to a virtual function, implemented in Conv1d, Conv2d and Conv3d\nLarge rewrite of rnn classes to also move their autograd implementations to virtual methods, and in general to avoid the use of the RNN mode beyond CuDNN. The RNN mode should not replace inheritance and polymorphism!!!\n\n\n\nRecommended review order:\n\ninclude/torch/nn/module.h\ninclude/torch/nn/modules/*.h and src/nn/modules/*.cpp\ntests\n\nCC @ezyang @ebetica @apaszke @jgehring", "body": "This PR implements our discussed \"builder\" style construction mechanism, where the class is fused with the builder itself. It is similar to the `KWARGS` mechanism in autogradpp, with some differences.\r\n\r\nLargely, this PR:\r\n\r\n1. Creates a macro `TORCH_PARAMETER` (name up for discussion, maybe `TORCH_PROPERTY`?) used to give modules parameters/properties. It is written in a way so that it requires only 2 arguments instead of 5, like `AUTOGRAD_KWARG` did\r\n2. Rewrites core modules to follow a construction mechanism where\r\n    1. Required arguments go to the constructor,\r\n    2. Optional arguments are passed via setters/getters,\r\n    3. Variable construction and other heavy lifting is moved to a `reset()` function\r\n    4. `reset()` is called inside `build()`, which finalizes construction, and `clone()`\r\n3. Does some heavy refactoring of the Convolution and RNN modules to better use polymorphism, e.g.:\r\n    1. In `Conv`, the call to `at::conv<dimension>d(...)` is now left to a virtual function, implemented in `Conv1d`, `Conv2d` and `Conv3d`\r\n    1. Large rewrite of rnn classes to also move their autograd implementations to virtual methods, and in general to avoid the use of the RNN mode beyond CuDNN. The RNN mode should not replace inheritance and polymorphism!!!\r\n\r\nRecommended review order:\r\n1. `include/torch/nn/module.h`\r\n2. `include/torch/nn/modules/*.h` and `src/nn/modules/*.cpp`\r\n3. tests\r\n\r\nCC @ezyang @ebetica @apaszke @jgehring "}