{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/188585328", "pull_request_review_id": 120591327, "id": 188585328, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4ODU4NTMyOA==", "diff_hunk": "@@ -1,121 +1,113 @@\n #pragma once\n \n-#include <torch/detail.h>\n #include <torch/nn/module.h>\n \n #include <torch/csrc/autograd/variable.h>\n \n #include <ATen/Error.h>\n+#include <ATen/optional.h>\n \n #include <cstdint>\n+#include <functional>\n #include <memory>\n #include <vector>\n \n+namespace torch { namespace nn {\n+class Dropout;\n+}} // namespace torch::nn\n+\n namespace torch { namespace nn {\n template <typename Derived>\n class RNNBase : public CloneableModule<Derived> {\n  public:\n-  // These must line up with the CUDNN mode codes\n-  enum RNNMode { RNN_RELU = 0, RNN_TANH = 1, LSTM = 2, GRU = 3 };\n+  // These must line up with the CUDNN mode codes:\n+  // https://docs.nvidia.com/deeplearning/sdk/cudnn-developer-guide/index.html#cudnnRNNMode_t\n+  enum class CuDNNMode { RNN_RELU, RNN_TANH, LSTM, GRU };", "path": "torch/csrc/api/include/torch/nn/modules/rnn.h", "position": null, "original_position": 28, "commit_id": "994d74d21af6b1a2712a58c7ca15146c0166f1d3", "original_commit_id": "0028a7088f029ea74c4f8a96426a921bd926ea53", "user": {"login": "jgehring", "id": 88510, "node_id": "MDQ6VXNlcjg4NTEw", "avatar_url": "https://avatars1.githubusercontent.com/u/88510?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgehring", "html_url": "https://github.com/jgehring", "followers_url": "https://api.github.com/users/jgehring/followers", "following_url": "https://api.github.com/users/jgehring/following{/other_user}", "gists_url": "https://api.github.com/users/jgehring/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgehring/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgehring/subscriptions", "organizations_url": "https://api.github.com/users/jgehring/orgs", "repos_url": "https://api.github.com/users/jgehring/repos", "events_url": "https://api.github.com/users/jgehring/events{/privacy}", "received_events_url": "https://api.github.com/users/jgehring/received_events", "type": "User", "site_admin": false}, "body": "Yes, but it does look a bit weird to state that the enum must line up with something and then not specifying the actual values. Explicit enum values would also protect against detrimental future modifications.", "created_at": "2018-05-16T11:06:41Z", "updated_at": "2018-11-23T15:44:08Z", "html_url": "https://github.com/pytorch/pytorch/pull/7597#discussion_r188585328", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/7597", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/188585328"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/7597#discussion_r188585328"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/7597"}}, "body_html": "<p>Yes, but it does look a bit weird to state that the enum must line up with something and then not specifying the actual values. Explicit enum values would also protect against detrimental future modifications.</p>", "body_text": "Yes, but it does look a bit weird to state that the enum must line up with something and then not specifying the actual values. Explicit enum values would also protect against detrimental future modifications.", "in_reply_to_id": 188459414}