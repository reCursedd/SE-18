{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/188463619", "pull_request_review_id": 120447481, "id": 188463619, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4ODQ2MzYxOQ==", "diff_hunk": "@@ -113,25 +113,39 @@ class CloneableModule : public Module {\n  public:\n   using Module::Module;\n \n-  // should it also detach the gradients, like a deepcopy? Or maybe let's just\n-  // give clone() a boolean for this?\n-  std::unique_ptr<Module> clone() const override {\n-    auto ptr = std::unique_ptr<Module>(\n-        new Derived(*static_cast<const Derived*>(this)));\n+  virtual void reset() = 0;\n+\n+  std::shared_ptr<Derived> build() {\n+    auto module = std::make_shared<Derived>(static_cast<Derived&&>(*this));\n+    module->reset();\n+    return std::move(module);\n+  }\n+\n+  std::shared_ptr<Module> clone() const override {\n+    auto ptr = std::make_shared<Derived>(*static_cast<const Derived*>(this));\n+    ptr->parameters_.clear();\n+    ptr->reset();\n     for (auto& parameter : ptr->parameters_) {\n-      parameter.second = this->parameters_.at(parameter.first).clone();\n+      parameter.second.data().copy_(\n+          this->parameters_.at(parameter.first).data());\n     }\n     for (auto& child : ptr->children_) {\n       child.second = this->children_.at(child.first)->clone();\n     }\n     return ptr;\n   }\n };\n-\n-template <class Module>\n-std::shared_ptr<typename std::decay<Module>::type> make(Module&& module) {\n-  auto ptr = std::make_shared<typename std::decay<Module>::type>(\n-      std::forward<Module>(module));\n-  return ptr;\n-}\n }} // namespace torch::nn\n+\n+#define TORCH_PARAMETER(T, name)             \\\n+ public:                                     \\\n+  auto name(T new_##name)->decltype(*this) { \\\n+    this->name##_ = std::move(new_##name);   \\\n+    return *this;                            \\\n+  }                                          \\\n+  const T& name() const noexcept {           \\\n+    return this->name##_;                    \\\n+  }                                          \\\n+                                             \\\n+ protected:                                  \\", "path": "torch/csrc/api/include/torch/nn/module.h", "position": null, "original_position": 60, "commit_id": "994d74d21af6b1a2712a58c7ca15146c0166f1d3", "original_commit_id": "0028a7088f029ea74c4f8a96426a921bd926ea53", "user": {"login": "ebetica", "id": 3605224, "node_id": "MDQ6VXNlcjM2MDUyMjQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/3605224?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebetica", "html_url": "https://github.com/ebetica", "followers_url": "https://api.github.com/users/ebetica/followers", "following_url": "https://api.github.com/users/ebetica/following{/other_user}", "gists_url": "https://api.github.com/users/ebetica/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebetica/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebetica/subscriptions", "organizations_url": "https://api.github.com/users/ebetica/orgs", "repos_url": "https://api.github.com/users/ebetica/repos", "events_url": "https://api.github.com/users/ebetica/events{/privacy}", "received_events_url": "https://api.github.com/users/ebetica/received_events", "type": "User", "site_admin": false}, "body": "Wouldn't this randomly change the permissions of the following functions? I think I'd rather just having not do that, it's okay if we leak a few private implementations.", "created_at": "2018-05-15T23:14:02Z", "updated_at": "2018-11-23T15:44:07Z", "html_url": "https://github.com/pytorch/pytorch/pull/7597#discussion_r188463619", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/7597", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/188463619"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/7597#discussion_r188463619"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/7597"}}, "body_html": "<p>Wouldn't this randomly change the permissions of the following functions? I think I'd rather just having not do that, it's okay if we leak a few private implementations.</p>", "body_text": "Wouldn't this randomly change the permissions of the following functions? I think I'd rather just having not do that, it's okay if we leak a few private implementations."}