{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/188723224", "pull_request_review_id": 120759867, "id": 188723224, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4ODcyMzIyNA==", "diff_hunk": "@@ -113,25 +113,39 @@ class CloneableModule : public Module {\n  public:\n   using Module::Module;\n \n-  // should it also detach the gradients, like a deepcopy? Or maybe let's just\n-  // give clone() a boolean for this?\n-  std::unique_ptr<Module> clone() const override {\n-    auto ptr = std::unique_ptr<Module>(\n-        new Derived(*static_cast<const Derived*>(this)));\n+  virtual void reset() = 0;\n+\n+  std::shared_ptr<Derived> build() {\n+    auto module = std::make_shared<Derived>(static_cast<Derived&&>(*this));\n+    module->reset();\n+    return std::move(module);", "path": "torch/csrc/api/include/torch/nn/module.h", "position": null, "original_position": 23, "commit_id": "994d74d21af6b1a2712a58c7ca15146c0166f1d3", "original_commit_id": "0028a7088f029ea74c4f8a96426a921bd926ea53", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "@apaszke The idiom here is mostly to support this syntax (which is not exactly idiomatic C++, but I see why they want it):\r\n\r\n```\r\nstd::shared_ptr<RNN> mod = RNN().layers(2).bidirectional(true).make();\r\n```\r\n\r\nIdiomatic C++ is to use `std::make_shared` to create a shared pointer to a module, e.g., as in\r\n\r\n```\r\nstd::shared_ptr<RNN> mod = std::make_shared<RNN>(2, true);\r\n```\r\n\r\nbut now you don't have a good time to stick on the keyword arguments; if you do it post-facto you need to \"initialize\" the parameters with an explicit call:\r\n\r\n```\r\n// This particular syntax needs enable_shared_from_this\r\nstd::shared_ptr<RNN> mod = std::make_shared<RNN>()->layers(2)->bidirectional(true)->init();\r\n```\r\n\r\nor fix the implementation of RNN to lazily initialize the parameters upon its first invocation of forward.\r\n\r\nI have argued in the past that it's not a big deal to have to write this extra bit of code, but besides being unidiomatic I do not see too many downsides of the idiom advocated here.", "created_at": "2018-05-16T18:15:33Z", "updated_at": "2018-11-23T15:44:10Z", "html_url": "https://github.com/pytorch/pytorch/pull/7597#discussion_r188723224", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/7597", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/188723224"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/7597#discussion_r188723224"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/7597"}}, "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=4583066\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/apaszke\">@apaszke</a> The idiom here is mostly to support this syntax (which is not exactly idiomatic C++, but I see why they want it):</p>\n<pre><code>std::shared_ptr&lt;RNN&gt; mod = RNN().layers(2).bidirectional(true).make();\n</code></pre>\n<p>Idiomatic C++ is to use <code>std::make_shared</code> to create a shared pointer to a module, e.g., as in</p>\n<pre><code>std::shared_ptr&lt;RNN&gt; mod = std::make_shared&lt;RNN&gt;(2, true);\n</code></pre>\n<p>but now you don't have a good time to stick on the keyword arguments; if you do it post-facto you need to \"initialize\" the parameters with an explicit call:</p>\n<pre><code>// This particular syntax needs enable_shared_from_this\nstd::shared_ptr&lt;RNN&gt; mod = std::make_shared&lt;RNN&gt;()-&gt;layers(2)-&gt;bidirectional(true)-&gt;init();\n</code></pre>\n<p>or fix the implementation of RNN to lazily initialize the parameters upon its first invocation of forward.</p>\n<p>I have argued in the past that it's not a big deal to have to write this extra bit of code, but besides being unidiomatic I do not see too many downsides of the idiom advocated here.</p>", "body_text": "@apaszke The idiom here is mostly to support this syntax (which is not exactly idiomatic C++, but I see why they want it):\nstd::shared_ptr<RNN> mod = RNN().layers(2).bidirectional(true).make();\n\nIdiomatic C++ is to use std::make_shared to create a shared pointer to a module, e.g., as in\nstd::shared_ptr<RNN> mod = std::make_shared<RNN>(2, true);\n\nbut now you don't have a good time to stick on the keyword arguments; if you do it post-facto you need to \"initialize\" the parameters with an explicit call:\n// This particular syntax needs enable_shared_from_this\nstd::shared_ptr<RNN> mod = std::make_shared<RNN>()->layers(2)->bidirectional(true)->init();\n\nor fix the implementation of RNN to lazily initialize the parameters upon its first invocation of forward.\nI have argued in the past that it's not a big deal to have to write this extra bit of code, but besides being unidiomatic I do not see too many downsides of the idiom advocated here.", "in_reply_to_id": 188580227}