{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/188580737", "pull_request_review_id": 120585234, "id": 188580737, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4ODU4MDczNw==", "diff_hunk": "@@ -113,25 +113,39 @@ class CloneableModule : public Module {\n  public:\n   using Module::Module;\n \n-  // should it also detach the gradients, like a deepcopy? Or maybe let's just\n-  // give clone() a boolean for this?\n-  std::unique_ptr<Module> clone() const override {\n-    auto ptr = std::unique_ptr<Module>(\n-        new Derived(*static_cast<const Derived*>(this)));\n+  virtual void reset() = 0;\n+\n+  std::shared_ptr<Derived> build() {\n+    auto module = std::make_shared<Derived>(static_cast<Derived&&>(*this));\n+    module->reset();\n+    return std::move(module);\n+  }\n+\n+  std::shared_ptr<Module> clone() const override {\n+    auto ptr = std::make_shared<Derived>(*static_cast<const Derived*>(this));\n+    ptr->parameters_.clear();\n+    ptr->reset();\n     for (auto& parameter : ptr->parameters_) {\n-      parameter.second = this->parameters_.at(parameter.first).clone();\n+      parameter.second.data().copy_(\n+          this->parameters_.at(parameter.first).data());\n     }\n     for (auto& child : ptr->children_) {\n       child.second = this->children_.at(child.first)->clone();\n     }\n     return ptr;\n   }\n };\n-\n-template <class Module>\n-std::shared_ptr<typename std::decay<Module>::type> make(Module&& module) {\n-  auto ptr = std::make_shared<typename std::decay<Module>::type>(\n-      std::forward<Module>(module));\n-  return ptr;\n-}\n }} // namespace torch::nn\n+\n+#define TORCH_PARAMETER(T, name)             \\\n+ public:                                     \\\n+  auto name(T new_##name)->decltype(*this) { \\\n+    this->name##_ = std::move(new_##name);   \\\n+    return *this;                            \\\n+  }                                          \\\n+  const T& name() const noexcept {           \\\n+    return this->name##_;                    \\\n+  }                                          \\\n+                                             \\\n+ protected:                                  \\", "path": "torch/csrc/api/include/torch/nn/module.h", "position": null, "original_position": 60, "commit_id": "994d74d21af6b1a2712a58c7ca15146c0166f1d3", "original_commit_id": "0028a7088f029ea74c4f8a96426a921bd926ea53", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "I think we shouldn't change visibility inside this macro at all. This will enforce using getters/setters on people, and it might turn out to be quite annoying. Can't we just declare the member and have another macro for setting getters or setters (so they can be possibly used in sections of different visibility, which is controlled by the user)?", "created_at": "2018-05-16T10:47:47Z", "updated_at": "2018-11-23T15:44:08Z", "html_url": "https://github.com/pytorch/pytorch/pull/7597#discussion_r188580737", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/7597", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/188580737"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/7597#discussion_r188580737"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/7597"}}, "body_html": "<p>I think we shouldn't change visibility inside this macro at all. This will enforce using getters/setters on people, and it might turn out to be quite annoying. Can't we just declare the member and have another macro for setting getters or setters (so they can be possibly used in sections of different visibility, which is controlled by the user)?</p>", "body_text": "I think we shouldn't change visibility inside this macro at all. This will enforce using getters/setters on people, and it might turn out to be quite annoying. Can't we just declare the member and have another macro for setting getters or setters (so they can be possibly used in sections of different visibility, which is controlled by the user)?", "in_reply_to_id": 188463619}