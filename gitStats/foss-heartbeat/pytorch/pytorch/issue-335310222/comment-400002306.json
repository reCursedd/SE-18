{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/400002306", "html_url": "https://github.com/pytorch/pytorch/pull/8845#issuecomment-400002306", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/8845", "id": 400002306, "node_id": "MDEyOklzc3VlQ29tbWVudDQwMDAwMjMwNg==", "user": {"login": "kimdwkimdw", "id": 386070, "node_id": "MDQ6VXNlcjM4NjA3MA==", "avatar_url": "https://avatars3.githubusercontent.com/u/386070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kimdwkimdw", "html_url": "https://github.com/kimdwkimdw", "followers_url": "https://api.github.com/users/kimdwkimdw/followers", "following_url": "https://api.github.com/users/kimdwkimdw/following{/other_user}", "gists_url": "https://api.github.com/users/kimdwkimdw/gists{/gist_id}", "starred_url": "https://api.github.com/users/kimdwkimdw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kimdwkimdw/subscriptions", "organizations_url": "https://api.github.com/users/kimdwkimdw/orgs", "repos_url": "https://api.github.com/users/kimdwkimdw/repos", "events_url": "https://api.github.com/users/kimdwkimdw/events{/privacy}", "received_events_url": "https://api.github.com/users/kimdwkimdw/received_events", "type": "User", "site_admin": false}, "created_at": "2018-06-25T15:55:04Z", "updated_at": "2018-06-25T15:57:49Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=5652049\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/zou3519\">@zou3519</a> , Thank you for comment!</p>\n<p>First, here is my concept of gist,<br>\n<a href=\"https://gist.github.com/kimdwkimdw/50c18b5cf72c69c2d01bb4146c8a2b5c\">https://gist.github.com/kimdwkimdw/50c18b5cf72c69c2d01bb4146c8a2b5c</a></p>\n<p>From 0.4.0, all methods in torch_functions goes to <code>_C._VariableFunctions</code> class.<br>\nWith <a href=\"https://docs.python.org/3/c-api/module.html#c.PyModule_AddObject\" rel=\"nofollow\">PyModule_AddObject</a>, all methods are instance methods. Thats why we need below lines.</p>\n<pre><code># torch/__init__.py\nfor name in dir(_C._VariableFunctions):\n    globals()[name] = getattr(_C._VariableFunctions, name)\n</code></pre>\n<p>The shorthand of above is that all methods are not imported with pythonic way.</p>\n<p>I want to import all methods via below code.</p>\n<pre><code># torch/__init__.py\nfrom torch._C import *\n</code></pre>\n<p><a href=\"https://docs.python.org/3/c-api/structures.html#METH_STATIC\" rel=\"nofollow\">https://docs.python.org/3/c-api/structures.html#METH_STATIC</a><br>\nWith <code>METH_STATIC</code>, C Extension will generate kind of static methods. However, we don't need <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=3434126\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/staticmethod\">@staticmethod</a> (<a href=\"https://docs.python.org/3/library/functions.html#staticmethod\" rel=\"nofollow\">https://docs.python.org/3/library/functions.html#staticmethod</a>) for method forwarding. We just only need <code>module methods</code>.</p>\n<p>When we import module methods like below,</p>\n<pre><code># torch/__init__.py\nfrom torch._C import *\n</code></pre>\n<p>IDE will run <code>__init__.py</code> internally, and generate stub files following <a href=\"https://www.python.org/dev/peps/pep-0484/#stub-files\" rel=\"nofollow\">PEP-0484</a></p>\n<p>There is an important sentence.</p>\n<pre><code>Modules and variables imported into the stub are not considered exported from the stub unless the import uses the import ... as ... form or the equivalent from ... import ... as ... form.\n...\n..\n..\nStub files may be incomplete. To make type checkers aware of this, the file can contain the following code:  def __getattr__(name) -&gt; Any: .\n</code></pre>\n<p>I read all codes related in pytorch-0.3.0, pytorch-0.4.0, pytorch-master.<br>\nI think that this solution is not the best solution, but it is working and helpful for now.</p>", "body_text": "@zou3519 , Thank you for comment!\nFirst, here is my concept of gist,\nhttps://gist.github.com/kimdwkimdw/50c18b5cf72c69c2d01bb4146c8a2b5c\nFrom 0.4.0, all methods in torch_functions goes to _C._VariableFunctions class.\nWith PyModule_AddObject, all methods are instance methods. Thats why we need below lines.\n# torch/__init__.py\nfor name in dir(_C._VariableFunctions):\n    globals()[name] = getattr(_C._VariableFunctions, name)\n\nThe shorthand of above is that all methods are not imported with pythonic way.\nI want to import all methods via below code.\n# torch/__init__.py\nfrom torch._C import *\n\nhttps://docs.python.org/3/c-api/structures.html#METH_STATIC\nWith METH_STATIC, C Extension will generate kind of static methods. However, we don't need @staticmethod (https://docs.python.org/3/library/functions.html#staticmethod) for method forwarding. We just only need module methods.\nWhen we import module methods like below,\n# torch/__init__.py\nfrom torch._C import *\n\nIDE will run __init__.py internally, and generate stub files following PEP-0484\nThere is an important sentence.\nModules and variables imported into the stub are not considered exported from the stub unless the import uses the import ... as ... form or the equivalent from ... import ... as ... form.\n...\n..\n..\nStub files may be incomplete. To make type checkers aware of this, the file can contain the following code:  def __getattr__(name) -> Any: .\n\nI read all codes related in pytorch-0.3.0, pytorch-0.4.0, pytorch-master.\nI think that this solution is not the best solution, but it is working and helpful for now.", "body": "@zou3519 , Thank you for comment!\r\n\r\nFirst, here is my concept of gist, \r\nhttps://gist.github.com/kimdwkimdw/50c18b5cf72c69c2d01bb4146c8a2b5c\r\n\r\nFrom 0.4.0, all methods in torch_functions goes to `_C._VariableFunctions` class.\r\nWith [PyModule_AddObject](https://docs.python.org/3/c-api/module.html#c.PyModule_AddObject), all methods are instance methods. Thats why we need below lines.\r\n\r\n```\r\n# torch/__init__.py\r\nfor name in dir(_C._VariableFunctions):\r\n    globals()[name] = getattr(_C._VariableFunctions, name)\r\n```\r\n\r\nThe shorthand of above is that all methods are not imported with pythonic way.\r\n\r\nI want to import all methods via below code.\r\n```\r\n# torch/__init__.py\r\nfrom torch._C import *\r\n```\r\n\r\nhttps://docs.python.org/3/c-api/structures.html#METH_STATIC\r\nWith `METH_STATIC`, C Extension will generate kind of static methods. However, we don't need @staticmethod (https://docs.python.org/3/library/functions.html#staticmethod) for method forwarding. We just only need `module methods`.\r\n\r\nWhen we import module methods like below,\r\n```\r\n# torch/__init__.py\r\nfrom torch._C import *\r\n```\r\nIDE will run `__init__.py` internally, and generate stub files following [PEP-0484](https://www.python.org/dev/peps/pep-0484/#stub-files)\r\n\r\nThere is an important sentence.\r\n```\r\nModules and variables imported into the stub are not considered exported from the stub unless the import uses the import ... as ... form or the equivalent from ... import ... as ... form.\r\n...\r\n..\r\n..\r\nStub files may be incomplete. To make type checkers aware of this, the file can contain the following code:  def __getattr__(name) -> Any: .\r\n```\r\n\r\nI read all codes related in pytorch-0.3.0, pytorch-0.4.0, pytorch-master.\r\nI think that this solution is not the best solution, but it is working and helpful for now."}