{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/427471177", "html_url": "https://github.com/pytorch/pytorch/issues/12373#issuecomment-427471177", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/12373", "id": 427471177, "node_id": "MDEyOklzc3VlQ29tbWVudDQyNzQ3MTE3Nw==", "user": {"login": "samedii", "id": 1872050, "node_id": "MDQ6VXNlcjE4NzIwNTA=", "avatar_url": "https://avatars0.githubusercontent.com/u/1872050?v=4", "gravatar_id": "", "url": "https://api.github.com/users/samedii", "html_url": "https://github.com/samedii", "followers_url": "https://api.github.com/users/samedii/followers", "following_url": "https://api.github.com/users/samedii/following{/other_user}", "gists_url": "https://api.github.com/users/samedii/gists{/gist_id}", "starred_url": "https://api.github.com/users/samedii/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/samedii/subscriptions", "organizations_url": "https://api.github.com/users/samedii/orgs", "repos_url": "https://api.github.com/users/samedii/repos", "events_url": "https://api.github.com/users/samedii/events{/privacy}", "received_events_url": "https://api.github.com/users/samedii/received_events", "type": "User", "site_admin": false}, "created_at": "2018-10-05T19:15:05Z", "updated_at": "2018-10-05T20:42:48Z", "author_association": "NONE", "body_html": "<p>I only get this error if the parameters are tensors. It does not appear if I get the number from the tensor first. I thought this might be helpful in debugging</p>\n<pre><code># incorrect results\nalpha = torch.tensor([0.8453])\nbeta = torch.tensor([2.3126])\nprob = torch.distributions.beta.Beta(\n    alpha,\n    beta\n).rsample((100,))\nprint(prob)\n\n# correct results\nalpha = torch.tensor([0.8453])\nbeta = torch.tensor([2.3126])\nprob = torch.distributions.beta.Beta(\n    alpha.item(),\n    beta.item()\n).rsample((100,))\nprint(prob)\n</code></pre>\n<p>Note however that Dirichlet gives correct results with tensors</p>\n<pre><code>alpha_beta = torch.tensor([0.8452719449996948, 2.312640905380249])\nsamples = torch.distributions.Dirichlet(alpha_beta).rsample((10000,))[:, 0]\nplt.hist(samples.detach().numpy(), bins=100)\nplt.show()\n</code></pre>\n<p>The error seems to be in Dirichlet when inputting a 2d-tensor with only one row:</p>\n<pre><code>import matplotlib.pyplot as plt\n\nprob = torch.distributions.Dirichlet(torch.tensor([[2.3126, 0.8453], [1, 1]])).rsample((10,))\nprint(prob)\n\nprob = torch.distributions.Dirichlet(torch.tensor([[2.3126, 0.8453], [1, 1]])).rsample((10000,))\nplt.hist(prob[:, 0, 1].detach().numpy(), bins=100)\nplt.show()\n\n# this gives incorrect results\nprob = torch.distributions.Dirichlet(torch.tensor([[2.3126, 0.8453]])).rsample((10,))\nprint(prob)\n</code></pre>\n<p>I narrowed it down to this function misbehaving and cloning concentration before sending it to torch._standard_gamma solves the issue:</p>\n<pre><code>def _dirichlet_sample_nograd(concentration):\n    concentration = concentration.clone() # this solves the issue\n    probs = torch._standard_gamma(concentration)\n    probs /= probs.sum(-1, True)\n    return clamp_probs(probs)\n</code></pre>\n<p>Adding a PR with this but there is likely a better solution for someone to find</p>", "body_text": "I only get this error if the parameters are tensors. It does not appear if I get the number from the tensor first. I thought this might be helpful in debugging\n# incorrect results\nalpha = torch.tensor([0.8453])\nbeta = torch.tensor([2.3126])\nprob = torch.distributions.beta.Beta(\n    alpha,\n    beta\n).rsample((100,))\nprint(prob)\n\n# correct results\nalpha = torch.tensor([0.8453])\nbeta = torch.tensor([2.3126])\nprob = torch.distributions.beta.Beta(\n    alpha.item(),\n    beta.item()\n).rsample((100,))\nprint(prob)\n\nNote however that Dirichlet gives correct results with tensors\nalpha_beta = torch.tensor([0.8452719449996948, 2.312640905380249])\nsamples = torch.distributions.Dirichlet(alpha_beta).rsample((10000,))[:, 0]\nplt.hist(samples.detach().numpy(), bins=100)\nplt.show()\n\nThe error seems to be in Dirichlet when inputting a 2d-tensor with only one row:\nimport matplotlib.pyplot as plt\n\nprob = torch.distributions.Dirichlet(torch.tensor([[2.3126, 0.8453], [1, 1]])).rsample((10,))\nprint(prob)\n\nprob = torch.distributions.Dirichlet(torch.tensor([[2.3126, 0.8453], [1, 1]])).rsample((10000,))\nplt.hist(prob[:, 0, 1].detach().numpy(), bins=100)\nplt.show()\n\n# this gives incorrect results\nprob = torch.distributions.Dirichlet(torch.tensor([[2.3126, 0.8453]])).rsample((10,))\nprint(prob)\n\nI narrowed it down to this function misbehaving and cloning concentration before sending it to torch._standard_gamma solves the issue:\ndef _dirichlet_sample_nograd(concentration):\n    concentration = concentration.clone() # this solves the issue\n    probs = torch._standard_gamma(concentration)\n    probs /= probs.sum(-1, True)\n    return clamp_probs(probs)\n\nAdding a PR with this but there is likely a better solution for someone to find", "body": "I only get this error if the parameters are tensors. It does not appear if I get the number from the tensor first. I thought this might be helpful in debugging\r\n\r\n```\r\n# incorrect results\r\nalpha = torch.tensor([0.8453])\r\nbeta = torch.tensor([2.3126])\r\nprob = torch.distributions.beta.Beta(\r\n    alpha,\r\n    beta\r\n).rsample((100,))\r\nprint(prob)\r\n\r\n# correct results\r\nalpha = torch.tensor([0.8453])\r\nbeta = torch.tensor([2.3126])\r\nprob = torch.distributions.beta.Beta(\r\n    alpha.item(),\r\n    beta.item()\r\n).rsample((100,))\r\nprint(prob)\r\n```\r\n\r\nNote however that Dirichlet gives correct results with tensors\r\n```\r\nalpha_beta = torch.tensor([0.8452719449996948, 2.312640905380249])\r\nsamples = torch.distributions.Dirichlet(alpha_beta).rsample((10000,))[:, 0]\r\nplt.hist(samples.detach().numpy(), bins=100)\r\nplt.show()\r\n```\r\n\r\nThe error seems to be in Dirichlet when inputting a 2d-tensor with only one row:\r\n```\r\nimport matplotlib.pyplot as plt\r\n\r\nprob = torch.distributions.Dirichlet(torch.tensor([[2.3126, 0.8453], [1, 1]])).rsample((10,))\r\nprint(prob)\r\n\r\nprob = torch.distributions.Dirichlet(torch.tensor([[2.3126, 0.8453], [1, 1]])).rsample((10000,))\r\nplt.hist(prob[:, 0, 1].detach().numpy(), bins=100)\r\nplt.show()\r\n\r\n# this gives incorrect results\r\nprob = torch.distributions.Dirichlet(torch.tensor([[2.3126, 0.8453]])).rsample((10,))\r\nprint(prob)\r\n```\r\n\r\nI narrowed it down to this function misbehaving and cloning concentration before sending it to torch._standard_gamma solves the issue:\r\n```\r\ndef _dirichlet_sample_nograd(concentration):\r\n    concentration = concentration.clone() # this solves the issue\r\n    probs = torch._standard_gamma(concentration)\r\n    probs /= probs.sum(-1, True)\r\n    return clamp_probs(probs)\r\n```\r\n\r\nAdding a PR with this but there is likely a better solution for someone to find"}