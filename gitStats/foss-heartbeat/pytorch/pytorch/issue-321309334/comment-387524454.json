{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/387524454", "html_url": "https://github.com/pytorch/pytorch/issues/7386#issuecomment-387524454", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/7386", "id": 387524454, "node_id": "MDEyOklzc3VlQ29tbWVudDM4NzUyNDQ1NA==", "user": {"login": "cbcase", "id": 238403, "node_id": "MDQ6VXNlcjIzODQwMw==", "avatar_url": "https://avatars1.githubusercontent.com/u/238403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cbcase", "html_url": "https://github.com/cbcase", "followers_url": "https://api.github.com/users/cbcase/followers", "following_url": "https://api.github.com/users/cbcase/following{/other_user}", "gists_url": "https://api.github.com/users/cbcase/gists{/gist_id}", "starred_url": "https://api.github.com/users/cbcase/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cbcase/subscriptions", "organizations_url": "https://api.github.com/users/cbcase/orgs", "repos_url": "https://api.github.com/users/cbcase/repos", "events_url": "https://api.github.com/users/cbcase/events{/privacy}", "received_events_url": "https://api.github.com/users/cbcase/received_events", "type": "User", "site_admin": false}, "created_at": "2018-05-08T20:01:04Z", "updated_at": "2018-05-08T20:01:04Z", "author_association": "NONE", "body_html": "<p>Hah, that's pretty great :).</p>\n<p>My interest is in caching casted or otherwise-manipulated versions of model weights -- and using the <code>._version</code> attribute to know when to invalidate the cache. Since the in-place update is (in general) outside my control -- mostly it's inside the <code>optim</code> classes -- I won't be able to use this trick.</p>\n<p>I think for now I'll need to force the user to explicitly tell me when an optimizer update happens to mark cached weights as dirty. (I can  imagine doing something w/ hooks, too, but that feels...very fragile.)</p>\n<p>Anyway, seeing as the tensor version isn't actually a part of the API, can't complain. Though if you guys consider ever making it so, I think this is pretty surprising behavior :)</p>", "body_text": "Hah, that's pretty great :).\nMy interest is in caching casted or otherwise-manipulated versions of model weights -- and using the ._version attribute to know when to invalidate the cache. Since the in-place update is (in general) outside my control -- mostly it's inside the optim classes -- I won't be able to use this trick.\nI think for now I'll need to force the user to explicitly tell me when an optimizer update happens to mark cached weights as dirty. (I can  imagine doing something w/ hooks, too, but that feels...very fragile.)\nAnyway, seeing as the tensor version isn't actually a part of the API, can't complain. Though if you guys consider ever making it so, I think this is pretty surprising behavior :)", "body": "Hah, that's pretty great :).\r\n\r\nMy interest is in caching casted or otherwise-manipulated versions of model weights -- and using the `._version` attribute to know when to invalidate the cache. Since the in-place update is (in general) outside my control -- mostly it's inside the `optim` classes -- I won't be able to use this trick.\r\n\r\nI think for now I'll need to force the user to explicitly tell me when an optimizer update happens to mark cached weights as dirty. (I can  imagine doing something w/ hooks, too, but that feels...very fragile.)\r\n\r\nAnyway, seeing as the tensor version isn't actually a part of the API, can't complain. Though if you guys consider ever making it so, I think this is pretty surprising behavior :)"}