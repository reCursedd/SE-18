{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/176793330", "pull_request_review_id": 106565011, "id": 176793330, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3Njc5MzMzMA==", "diff_hunk": "@@ -1727,6 +1726,93 @@ def test_LayerNorm_general_cuda(self):\n         self._test_LayerNorm_general(torch.cuda.FloatTensor)\n         self._test_LayerNorm_cuda_half()\n \n+    def _test_GroupNorm_general(self, type):\n+        good_shape_g = {\n+            (1, 2, 3, 4): 2,\n+            (2, 3, 10): 3,\n+            (3, 1, 1, 1, 2): 1,\n+            (2, 6, 4, 2, 2): 3,\n+        }\n+        for shape, g in good_shape_g.items():\n+            x = type(*shape).uniform_(0, 10)\n+            b = shape[0]\n+            c = shape[1]\n+\n+            # test that GN normalizes to mean 0 and stddev 1\n+            gn = nn.GroupNorm(g, c, eps=0).type(type)\n+            gn.weight.data.fill_(1)\n+            gn.bias.data.fill_(0)\n+            output = gn(x)\n+            out_reshaped = output.view(b, g, -1)\n+            mean = out_reshaped.mean(-1)\n+            var = out_reshaped.var(-1, unbiased=False)\n+            self.assertAlmostEqual(torch.abs(mean).mean(), 0, delta=1e-5)\n+            self.assertAlmostEqual(torch.abs(var).mean(), 1, delta=1e-5)\n+\n+            # test that GN applies weight and bias correctly\n+            scale = type(c).uniform_(0.2, 2)\n+            bias = type(c).uniform_(0.2, 2)\n+            gn.weight.data.copy_(scale)\n+            gn.bias.data.copy_(bias)\n+            output = gn(x)\n+            out_reshaped = output.view(b, c, -1)\n+            out_normed = (out_reshaped - bias.view(c, 1)) / scale.view(c, 1)\n+            out_normed_reshaped = out_normed.view(b, g, -1)\n+            mean = out_normed_reshaped.mean(-1)\n+            var = out_normed_reshaped.var(-1, unbiased=False)\n+            self.assertAlmostEqual(torch.abs(mean).mean(), 0, delta=1e-5)\n+            self.assertAlmostEqual(torch.abs(var).mean(), 1, delta=1e-5)", "path": "test/test_nn.py", "position": 58, "original_position": 58, "commit_id": "49bfa99ca67b4b4b94a00d7132d61ff045a67411", "original_commit_id": "6136ae977f22269fa80f8c5b08e9df02c8733053", "user": {"login": "SsnL", "id": 5674597, "node_id": "MDQ6VXNlcjU2NzQ1OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5674597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SsnL", "html_url": "https://github.com/SsnL", "followers_url": "https://api.github.com/users/SsnL/followers", "following_url": "https://api.github.com/users/SsnL/following{/other_user}", "gists_url": "https://api.github.com/users/SsnL/gists{/gist_id}", "starred_url": "https://api.github.com/users/SsnL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SsnL/subscriptions", "organizations_url": "https://api.github.com/users/SsnL/orgs", "repos_url": "https://api.github.com/users/SsnL/repos", "events_url": "https://api.github.com/users/SsnL/events{/privacy}", "received_events_url": "https://api.github.com/users/SsnL/received_events", "type": "User", "site_admin": false}, "body": "tests that the data has unit var and 0 mean after undoing the affine transform", "created_at": "2018-03-23T16:35:43Z", "updated_at": "2018-11-23T15:41:04Z", "html_url": "https://github.com/pytorch/pytorch/pull/5968#discussion_r176793330", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/5968", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/176793330"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/5968#discussion_r176793330"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/5968"}}, "body_html": "<p>tests that the data has unit var and 0 mean after undoing the affine transform</p>", "body_text": "tests that the data has unit var and 0 mean after undoing the affine transform"}