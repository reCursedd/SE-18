{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/176794244", "pull_request_review_id": 106566030, "id": 176794244, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3Njc5NDI0NA==", "diff_hunk": "@@ -1308,6 +1318,73 @@ def layer_norm(input, normalized_shape, running_mean, running_var,\n         return out\n \n \n+def group_norm(input, num_groups, running_mean=None, running_var=None,\n+               weight=None, bias=None, use_input_stats=True,\n+               momentum=0.1, eps=1e-5):\n+    r\"\"\"Applies Group Normalization for last certain number of dimensions.\n+\n+    See :class:`~torch.nn.GroupNorm` for details.\n+    \"\"\"\n+    if not use_input_stats and (running_mean is None or running_var is None):\n+        raise ValueError('Expected running_mean and running_var to be not None when use_input_stats=False')\n+\n+    input_shape = input.size()\n+    b = input_shape[0]\n+    c = input_shape[1]\n+    g = num_groups\n+\n+    if c % num_groups != 0:\n+        raise ValueError('Expected number of channels in input to be divisible '\n+                         'by num_groups, but got {} input and num_groups={}'\n+                         .format(input_shape, num_groups))\n+\n+    if weight is not None and (weight.dim() != 1 or weight.numel() != c):\n+        raise ValueError('Expected weight to be a vector of size equal to the '\n+                         'number of channels in input, but got {} weight and {} '\n+                         'input'.format(weight.size(), input_shape))\n+\n+    if bias is not None and (bias.dim() != 1 or bias.numel() != c):\n+        raise ValueError('Expected bias to be a vector of size equal to the '\n+                         'number of channels in input, but got {} bias and {} '\n+                         'input'.format(bias.size(), input_shape))\n+\n+    # Repeat stored stats if necessary\n+    if running_mean is not None:\n+        running_mean_orig = running_mean\n+        running_mean = running_mean_orig.repeat(b)\n+    if running_var is not None:\n+        running_var_orig = running_var\n+        running_var = running_var_orig.repeat(b)\n+\n+    # Apply group norm\n+    input_reshaped = input.contiguous().view(1, b * g, -1)\n+", "path": "torch/nn/functional.py", "position": null, "original_position": 90, "commit_id": "49bfa99ca67b4b4b94a00d7132d61ff045a67411", "original_commit_id": "6136ae977f22269fa80f8c5b08e9df02c8733053", "user": {"login": "SsnL", "id": 5674597, "node_id": "MDQ6VXNlcjU2NzQ1OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5674597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SsnL", "html_url": "https://github.com/SsnL", "followers_url": "https://api.github.com/users/SsnL/followers", "following_url": "https://api.github.com/users/SsnL/following{/other_user}", "gists_url": "https://api.github.com/users/SsnL/gists{/gist_id}", "starred_url": "https://api.github.com/users/SsnL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SsnL/subscriptions", "organizations_url": "https://api.github.com/users/SsnL/orgs", "repos_url": "https://api.github.com/users/SsnL/repos", "events_url": "https://api.github.com/users/SsnL/events{/privacy}", "received_events_url": "https://api.github.com/users/SsnL/received_events", "type": "User", "site_admin": false}, "body": "Basically we make BN kernels to normalize the `[c // g, *]` part of `[b, g, c // g, *]`", "created_at": "2018-03-23T16:38:35Z", "updated_at": "2018-11-23T15:41:04Z", "html_url": "https://github.com/pytorch/pytorch/pull/5968#discussion_r176794244", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/5968", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/176794244"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/5968#discussion_r176794244"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/5968"}}, "body_html": "<p>Basically we make BN kernels to normalize the <code>[c // g, *]</code> part of <code>[b, g, c // g, *]</code></p>", "body_text": "Basically we make BN kernels to normalize the [c // g, *] part of [b, g, c // g, *]"}