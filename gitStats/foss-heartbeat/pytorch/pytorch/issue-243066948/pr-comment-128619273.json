{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/128619273", "pull_request_review_id": 51315083, "id": 128619273, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyODYxOTI3Mw==", "diff_hunk": "@@ -571,6 +571,37 @@ def batch_norm(input, running_mean, running_var, weight=None, bias=None,\n     return f(input, weight, bias)\n \n \n+def relation(input, g, f=None, embedding=None, max_pairwise=None):\n+    # Batch size, number of objects, feature size\n+    b, o, c = input.size()\n+    # Construct pairwise indices\n+    i = Variable(torch.arange(0, o).type_as(input.data).long().repeat(o))\n+    j = Variable(torch.arange(0, o).type_as(input.data).long().repeat(o, 1).t().contiguous().view(-1))\n+    # Create pairwise matrix\n+    pairs = torch.cat((torch.index_select(input, 1, i), torch.index_select(input, 1, j)), 2)", "path": "torch/nn/functional.py", "position": null, "original_position": 11, "commit_id": "7cf22b41375b4718d992162a54994fe7484e6889", "original_commit_id": "ced6a643f605e48eed60996fbe8bdbf7abeda017", "user": {"login": "adamlerer", "id": 5702157, "node_id": "MDQ6VXNlcjU3MDIxNTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5702157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adamlerer", "html_url": "https://github.com/adamlerer", "followers_url": "https://api.github.com/users/adamlerer/followers", "following_url": "https://api.github.com/users/adamlerer/following{/other_user}", "gists_url": "https://api.github.com/users/adamlerer/gists{/gist_id}", "starred_url": "https://api.github.com/users/adamlerer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adamlerer/subscriptions", "organizations_url": "https://api.github.com/users/adamlerer/orgs", "repos_url": "https://api.github.com/users/adamlerer/repos", "events_url": "https://api.github.com/users/adamlerer/events{/privacy}", "received_events_url": "https://api.github.com/users/adamlerer/received_events", "type": "User", "site_admin": false}, "body": "To avoid allocating new tensors `i` and `j`, I think you can directly write:\r\n```\r\npairs = torch.cat((input.unsqueeze(1).expand(b, o, o, c).view(b, o*o, c),\r\n                   input.unsqueeze(2).expand(b, o, o, c).view(b, o*o, c), 2)\r\n```", "created_at": "2017-07-20T20:13:36Z", "updated_at": "2018-11-23T15:34:11Z", "html_url": "https://github.com/pytorch/pytorch/pull/2105#discussion_r128619273", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/2105", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/128619273"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/2105#discussion_r128619273"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/2105"}}, "body_html": "<p>To avoid allocating new tensors <code>i</code> and <code>j</code>, I think you can directly write:</p>\n<pre><code>pairs = torch.cat((input.unsqueeze(1).expand(b, o, o, c).view(b, o*o, c),\n                   input.unsqueeze(2).expand(b, o, o, c).view(b, o*o, c), 2)\n</code></pre>", "body_text": "To avoid allocating new tensors i and j, I think you can directly write:\npairs = torch.cat((input.unsqueeze(1).expand(b, o, o, c).view(b, o*o, c),\n                   input.unsqueeze(2).expand(b, o, o, c).view(b, o*o, c), 2)"}