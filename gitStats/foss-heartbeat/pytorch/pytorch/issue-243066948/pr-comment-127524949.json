{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/127524949", "pull_request_review_id": 50124500, "id": 127524949, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzUyNDk0OQ==", "diff_hunk": "@@ -0,0 +1,47 @@\n+import torch\n+from .module import Module\n+from torch.autograd import Variable\n+\n+\n+class Relation(Module):\n+  def __init__(self, f, g):\n+    r\"\"\"Applies a relation network to the incoming data: :math:`y = f\\left(\\sum_{i,j} g(x_i, x_j)\\right)`\n+\n+    Args:\n+        f: function/network applied to the sum of the pairs of objects applied to g\n+        g: function/network applied to the pairs of objects x\n+\n+    Shape:\n+        - Input: :math:`(N, in\\_objects, in\\_features)`\n+        - Output: :math:`(N, out\\_features)`\n+\n+    Examples::\n+\n+        >>> g = nn.Linear(60, 20)  # 60 is 2 * 30 (double the feature size per object)\n+        >>> f = nn.Linear(20, 10)\n+        >>> m = nn.Relation(f, g)\n+        >>> input = autograd.Variable(torch.randn(32, 5, 30))\n+        >>> output = m(input)\n+    \"\"\"\n+    super(Relation, self).__init__()\n+    self.f = f\n+    self.g = g\n+\n+  def forward(self, x):\n+    # Batch size, number of objects, feature size\n+    b, o, c = x.size()\n+    # Construct pairwise indices\n+    i = Variable(torch.arange(0, o).long().repeat(o))\n+    j = Variable(torch.arange(0, o).long().repeat(o, 1).t().contiguous().view(-1))\n+    # Create pairwise matrix\n+    x = torch.cat((torch.index_select(x, 1, i), torch.index_select(x, 1, j)), 2)\n+    # Pack into batches and pass through g\n+    x = self.g(x.view(b * o ** 2, 2 * c))", "path": "torch/nn/modules/relation.py", "position": null, "original_position": 39, "commit_id": "7cf22b41375b4718d992162a54994fe7484e6889", "original_commit_id": "27a447ce99711a469f842a02c107e49e4102c03d", "user": {"login": "imisra", "id": 3059768, "node_id": "MDQ6VXNlcjMwNTk3Njg=", "avatar_url": "https://avatars0.githubusercontent.com/u/3059768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/imisra", "html_url": "https://github.com/imisra", "followers_url": "https://api.github.com/users/imisra/followers", "following_url": "https://api.github.com/users/imisra/following{/other_user}", "gists_url": "https://api.github.com/users/imisra/gists{/gist_id}", "starred_url": "https://api.github.com/users/imisra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/imisra/subscriptions", "organizations_url": "https://api.github.com/users/imisra/orgs", "repos_url": "https://api.github.com/users/imisra/repos", "events_url": "https://api.github.com/users/imisra/events{/privacy}", "received_events_url": "https://api.github.com/users/imisra/received_events", "type": "User", "site_admin": false}, "body": "@soumith : For higher resolution inputs (either spatial dimensions or channels), things go OOM quickly. One option is to specify a max_batch_size for the class (independent of the training process). The RN class can then accumulate the outputs of the `g` module by only sending max_batch_size number of pairs through `g`.", "created_at": "2017-07-14T18:50:13Z", "updated_at": "2018-11-23T15:34:06Z", "html_url": "https://github.com/pytorch/pytorch/pull/2105#discussion_r127524949", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/2105", "author_association": "NONE", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/127524949"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/2105#discussion_r127524949"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/2105"}}, "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1310570\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/soumith\">@soumith</a> : For higher resolution inputs (either spatial dimensions or channels), things go OOM quickly. One option is to specify a max_batch_size for the class (independent of the training process). The RN class can then accumulate the outputs of the <code>g</code> module by only sending max_batch_size number of pairs through <code>g</code>.</p>", "body_text": "@soumith : For higher resolution inputs (either spatial dimensions or channels), things go OOM quickly. One option is to specify a max_batch_size for the class (independent of the training process). The RN class can then accumulate the outputs of the g module by only sending max_batch_size number of pairs through g.", "in_reply_to_id": 127514041}