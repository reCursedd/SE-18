{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/218636312", "pull_request_review_id": 156619236, "id": 218636312, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxODYzNjMxMg==", "diff_hunk": "@@ -43,6 +43,205 @@ Tensor & rrelu_(Tensor & self, Scalar lower, Scalar upper, bool training, Genera\n   return at::rrelu_with_noise_(self, self.type().tensor(), lower, upper, training, generator);\n }\n \n+// -----------------------------------\n+// prelu forward\n+// -----------------------------------\n+template <typename scalar_t>\n+void prelu_cpu_kernel(\n+  Tensor& result,\n+  const Tensor& input,\n+  const Tensor& weight,\n+  int64_t input_dim0_size,\n+  int64_t channel_size,\n+  int64_t input_stride0,\n+  int64_t input_stride1) {\n+\n+  int64_t i, j, k;\n+  auto result_data = result.data<scalar_t>();\n+  auto input_data = input.data<scalar_t>();\n+  auto weight_data = weight.data<scalar_t>();\n+\n+  // multiply values at each channel with weight[channel_index]\n+  #pragma omp parallel for private(i,j,k) if (input.numel() > 10000)\n+  for (i = 0; i < input_dim0_size; i++) {\n+    for (j = 0; j < channel_size; j++) {\n+      for (k = 0; k < input_stride1; k++) {\n+        int64_t pos = i * input_stride0 + j * input_stride1 + k;\n+        result_data[pos] = (input_data[pos] > 0) ? input_data[pos] : weight_data[j] * input_data[pos];\n+      }\n+    }\n+  }\n+}\n+\n+Tensor prelu_cpu(const Tensor& self, const Tensor& weight_) {\n+  auto input = self.contiguous();\n+  auto weight = weight_.contiguous();\n+\n+  AT_CHECK(input.is_contiguous());\n+  AT_CHECK(weight.is_contiguous());\n+\n+  int64_t weight_num = weight.numel();\n+  Tensor result = at::empty_like(input);\n+  auto strides = input.strides();\n+\n+  // case1: shared weight for all channels\n+  if (weight_num == 1) {\n+    AT_DISPATCH_FLOATING_TYPES(input.type(), \"prelu_cpu\", [&] {\n+      auto weight_data_val = weight.data<scalar_t>()[0];\n+      at::CPU_tensor_apply2<scalar_t, scalar_t>(\n+        input,\n+        result,\n+        [&](\n+          scalar_t& input_val,\n+          scalar_t& result_val) {\n+            result_val = (input_val > 0) ? input_val : weight_data_val * input_val;\n+      });\n+    });\n+  }\n+  else { // case2: multiple weights, one for each channel\n+    int64_t input_ndim = input.dim();\n+    AT_CHECK(input_ndim > 0, \"Not allow zero-dim input tensor.\");\n+\n+    int64_t channel_size = 1; // channel_size default to 1\n+    int64_t input_dim0_size = 1, input_stride0 = 1, input_stride1 = 1;\n+\n+    if (input_ndim > 1) {\n+      channel_size = input.size(1); // channel is the 2nd dim of input\n+      input_dim0_size = input.size(0);\n+      input_stride0 = strides[0];\n+      input_stride1 = strides[1];\n+    }\n+    AT_CHECK(channel_size == weight_num,\n+      \"Mismatch of parameter numbers and input channel size. Found parameter numbers = %d, and channel size = %d.\",\n+      weight_num, channel_size);\n+\n+    AT_DISPATCH_FLOATING_TYPES(input.type(), \"prelu_cpu\", [&] {\n+      prelu_cpu_kernel<scalar_t>(\n+        result,\n+        input,\n+        weight,\n+        input_dim0_size,\n+        channel_size,\n+        input_stride0,\n+        input_stride1);\n+    });\n+  }\n+  return result;\n+}\n+\n+// -----------------------------------\n+// prelu backward\n+// -----------------------------------\n+template <typename scalar_t>\n+void prelu_cpu_backward_kernel(\n+  const Tensor& input,\n+  const Tensor& weight,\n+  const Tensor& grad_out,\n+  Tensor& input_grad,\n+  Tensor& weight_grad_collector,\n+  int64_t input_dim0_size,\n+  int64_t channel_size,\n+  int64_t input_stride0,\n+  int64_t input_stride1) {\n+\n+  int64_t i, j, k;\n+  auto input_data = input.data<scalar_t>();\n+  auto weight_data = weight.data<scalar_t>();\n+  auto grad_out_data = grad_out.data<scalar_t>();\n+  auto input_grad_data = input_grad.data<scalar_t>();\n+  auto weight_grad_collector_data = weight_grad_collector.data<scalar_t>();\n+\n+  #pragma omp parallel for private(i, j, k) if (input.numel() > 10000)\n+  for (i = 0; i < input_dim0_size; i++) {\n+    for (j = 0; j < channel_size; j++) {\n+      for (k = 0; k < input_stride1; k++) {\n+        int64_t pos = i * input_stride0 + j * input_stride1 + k;\n+        input_grad_data[pos] = (input_data[pos] > 0) ? grad_out_data[pos] : weight_data[j] * grad_out_data[pos];\n+        weight_grad_collector_data[pos] = (input_data[pos] > 0) ? scalar_t(0) : input_data[pos] * grad_out_data[pos];\n+      }\n+    }\n+  }\n+}\n+\n+std::tuple<Tensor, Tensor> prelu_backward_cpu(const Tensor& grad_out_, const Tensor& self, const Tensor& weight_) {\n+  auto input = self.contiguous();\n+  auto grad_out = grad_out_.contiguous();\n+  auto weight = weight_.contiguous();\n+\n+  AT_CHECK(input.is_contiguous());\n+  AT_CHECK(grad_out.is_contiguous());\n+  AT_CHECK(weight.is_contiguous());\n+\n+  int64_t weight_num = weight.numel();\n+  auto strides = input.strides();\n+  auto dims = input.dim();\n+\n+  Tensor input_grad = at::empty_like(input);\n+  Tensor weight_grad = at::empty_like(weight);\n+  Tensor weight_grad_collector = at::empty_like(input);\n+\n+  // case1: shared parameter for all channels\n+  if (weight_num == 1) {", "path": "aten/src/ATen/native/Activation.cpp", "position": 208, "original_position": 142, "commit_id": "b4b5ae0ce41bd2cf83d23c5fea005ee05f92bc1e", "original_commit_id": "b9909afa90444c1634d1d12d74fa93ec5f912ff8", "user": {"login": "weiyangfb", "id": 38509346, "node_id": "MDQ6VXNlcjM4NTA5MzQ2", "avatar_url": "https://avatars1.githubusercontent.com/u/38509346?v=4", "gravatar_id": "", "url": "https://api.github.com/users/weiyangfb", "html_url": "https://github.com/weiyangfb", "followers_url": "https://api.github.com/users/weiyangfb/followers", "following_url": "https://api.github.com/users/weiyangfb/following{/other_user}", "gists_url": "https://api.github.com/users/weiyangfb/gists{/gist_id}", "starred_url": "https://api.github.com/users/weiyangfb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/weiyangfb/subscriptions", "organizations_url": "https://api.github.com/users/weiyangfb/orgs", "repos_url": "https://api.github.com/users/weiyangfb/repos", "events_url": "https://api.github.com/users/weiyangfb/events{/privacy}", "received_events_url": "https://api.github.com/users/weiyangfb/received_events", "type": "User", "site_admin": false}, "body": "CPU backward should also be similar to previous implementation:\r\nhttps://github.com/pytorch/pytorch/blob/3da8d71d7de6f2eb3c9bbe395e38dc2fdf2784b0/aten/src/THNN/generic/PReLU.c#L71-L81\r\n\r\nand \r\nhttps://github.com/pytorch/pytorch/blob/3da8d71d7de6f2eb3c9bbe395e38dc2fdf2784b0/aten/src/THNN/generic/PReLU.c#L146-L156", "created_at": "2018-09-19T00:30:31Z", "updated_at": "2018-11-23T15:51:39Z", "html_url": "https://github.com/pytorch/pytorch/pull/11758#discussion_r218636312", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/11758", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/218636312"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/11758#discussion_r218636312"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/11758"}}, "body_html": "<p>CPU backward should also be similar to previous implementation:<br>\n<div class=\"border rounded-1 my-2\">\n  <div class=\"f6 px-3 py-2 lh-condensed border-bottom bg-gray-light\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/pytorch/pytorch/blob/3da8d71d7de6f2eb3c9bbe395e38dc2fdf2784b0/aten/src/THNN/generic/PReLU.c#L71-L81\">pytorch/aten/src/THNN/generic/PReLU.c</a>\n    </p>\n    <p class=\"mb-0 text-gray-light\">\n        Lines 71 to 81\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/pytorch/pytorch/commit/3da8d71d7de6f2eb3c9bbe395e38dc2fdf2784b0\">3da8d71</a>\n    </p>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L71\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"71\"></td>\n          <td id=\"LC71\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-k\">if</span> (nOutputPlane == <span class=\"pl-c1\">1</span>) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L72\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"72\"></td>\n          <td id=\"LC72\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> { </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L73\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"73\"></td>\n          <td id=\"LC73\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   <span class=\"pl-c1\">scalar_t</span> w = weight-&gt;<span class=\"pl-smi\">data</span>&lt;<span class=\"pl-c1\">scalar_t</span>&gt;()[<span class=\"pl-c1\">0</span>]; </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L74\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"74\"></td>\n          <td id=\"LC74\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   <span class=\"pl-c1\">TH_TENSOR_APPLY3</span>(<span class=\"pl-c1\">scalar_t</span>, gradInput, <span class=\"pl-c1\">scalar_t</span>, gradOutput, <span class=\"pl-c1\">scalar_t</span>, input, </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L75\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"75\"></td>\n          <td id=\"LC75\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">      <span class=\"pl-k\">if</span> ((*input_data) &gt; <span class=\"pl-c1\">0</span>) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L76\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"76\"></td>\n          <td id=\"LC76\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">        *gradInput_data = *gradOutput_data; </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L77\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"77\"></td>\n          <td id=\"LC77\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">      <span class=\"pl-k\">else</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L78\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"78\"></td>\n          <td id=\"LC78\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">        *gradInput_data = w * (*gradOutput_data); </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L79\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"79\"></td>\n          <td id=\"LC79\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   ); </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L80\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"80\"></td>\n          <td id=\"LC80\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   <span class=\"pl-k\">return</span>; </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L81\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"81\"></td>\n          <td id=\"LC81\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> } </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n</p>\n<p>and<br>\n<div class=\"border rounded-1 my-2\">\n  <div class=\"f6 px-3 py-2 lh-condensed border-bottom bg-gray-light\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/pytorch/pytorch/blob/3da8d71d7de6f2eb3c9bbe395e38dc2fdf2784b0/aten/src/THNN/generic/PReLU.c#L146-L156\">pytorch/aten/src/THNN/generic/PReLU.c</a>\n    </p>\n    <p class=\"mb-0 text-gray-light\">\n        Lines 146 to 156\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/pytorch/pytorch/commit/3da8d71d7de6f2eb3c9bbe395e38dc2fdf2784b0\">3da8d71</a>\n    </p>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L146\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"146\"></td>\n          <td id=\"LC146\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-k\">if</span> (nOutputPlane == <span class=\"pl-c1\">1</span>) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L147\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"147\"></td>\n          <td id=\"LC147\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> { </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L148\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"148\"></td>\n          <td id=\"LC148\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   <span class=\"pl-c1\">scalar_t</span> *gradWeight_data = gradWeight-&gt;<span class=\"pl-smi\">data</span>&lt;<span class=\"pl-c1\">scalar_t</span>&gt;(); </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L149\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"149\"></td>\n          <td id=\"LC149\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   <span class=\"pl-c1\">scalar_t</span> sum = <span class=\"pl-c1\">0</span>; </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L150\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"150\"></td>\n          <td id=\"LC150\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   <span class=\"pl-c1\">TH_TENSOR_APPLY2</span>(<span class=\"pl-c1\">scalar_t</span>, input, <span class=\"pl-c1\">scalar_t</span>, gradOutput, </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L151\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"151\"></td>\n          <td id=\"LC151\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     <span class=\"pl-k\">if</span> ((*input_data) &lt;= <span class=\"pl-c1\">0</span>) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L152\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"152\"></td>\n          <td id=\"LC152\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">       sum += (*input_data) * (*gradOutput_data); </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L153\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"153\"></td>\n          <td id=\"LC153\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   ); </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L154\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"154\"></td>\n          <td id=\"LC154\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   gradWeight_data[<span class=\"pl-c1\">0</span>] += scale * sum; </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L155\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"155\"></td>\n          <td id=\"LC155\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   <span class=\"pl-k\">return</span>; </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L156\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"156\"></td>\n          <td id=\"LC156\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> } </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n</p>", "body_text": "CPU backward should also be similar to previous implementation:\n\n  \n    \n      pytorch/aten/src/THNN/generic/PReLU.c\n    \n    \n        Lines 71 to 81\n      in\n      3da8d71\n    \n    \n    \n    \n\n        \n          \n           if (nOutputPlane == 1) \n        \n\n        \n          \n           { \n        \n\n        \n          \n             scalar_t w = weight->data<scalar_t>()[0]; \n        \n\n        \n          \n             TH_TENSOR_APPLY3(scalar_t, gradInput, scalar_t, gradOutput, scalar_t, input, \n        \n\n        \n          \n                if ((*input_data) > 0) \n        \n\n        \n          \n                  *gradInput_data = *gradOutput_data; \n        \n\n        \n          \n                else \n        \n\n        \n          \n                  *gradInput_data = w * (*gradOutput_data); \n        \n\n        \n          \n             ); \n        \n\n        \n          \n             return; \n        \n\n        \n          \n           } \n        \n    \n  \n\n\nand\n\n  \n    \n      pytorch/aten/src/THNN/generic/PReLU.c\n    \n    \n        Lines 146 to 156\n      in\n      3da8d71\n    \n    \n    \n    \n\n        \n          \n           if (nOutputPlane == 1) \n        \n\n        \n          \n           { \n        \n\n        \n          \n             scalar_t *gradWeight_data = gradWeight->data<scalar_t>(); \n        \n\n        \n          \n             scalar_t sum = 0; \n        \n\n        \n          \n             TH_TENSOR_APPLY2(scalar_t, input, scalar_t, gradOutput, \n        \n\n        \n          \n               if ((*input_data) <= 0) \n        \n\n        \n          \n                 sum += (*input_data) * (*gradOutput_data); \n        \n\n        \n          \n             ); \n        \n\n        \n          \n             gradWeight_data[0] += scale * sum; \n        \n\n        \n          \n             return; \n        \n\n        \n          \n           }"}