{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/218964078", "pull_request_review_id": 157021841, "id": 218964078, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxODk2NDA3OA==", "diff_hunk": "@@ -43,6 +44,218 @@ Tensor & rrelu_(Tensor & self, Scalar lower, Scalar upper, bool training, Genera\n   return at::rrelu_with_noise_(self, self.type().tensor(), lower, upper, training, generator);\n }\n \n+// -----------------------------------\n+// prelu forward\n+// -----------------------------------\n+template <typename scalar_t>\n+void inline prelu_cpu_kernel_multi_weights(\n+  Tensor& result,\n+  const Tensor& input,\n+  const Tensor& weight,\n+  int64_t input_stride0,\n+  int64_t input_stride1) {\n+\n+  int64_t i;\n+  int64_t input_numel = input.numel();\n+  auto result_data = result.data<scalar_t>();\n+  auto input_data = input.data<scalar_t>();\n+  auto weight_data = weight.data<scalar_t>();\n+\n+  // multiply values at each channel with weight[channel]\n+  #pragma omp parallel for private(i) if (input_numel > 1000)\n+  for (i = 0; i < input_numel; i++) {\n+    int64_t channel = (i % input_stride0) / input_stride1;", "path": "aten/src/ATen/native/Activation.cpp", "position": null, "original_position": 32, "commit_id": "b4b5ae0ce41bd2cf83d23c5fea005ee05f92bc1e", "original_commit_id": "da2fbf4b263c9dd3dc9418d583ebaf219da901c8", "user": {"login": "SsnL", "id": 5674597, "node_id": "MDQ6VXNlcjU2NzQ1OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5674597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SsnL", "html_url": "https://github.com/SsnL", "followers_url": "https://api.github.com/users/SsnL/followers", "following_url": "https://api.github.com/users/SsnL/following{/other_user}", "gists_url": "https://api.github.com/users/SsnL/gists{/gist_id}", "starred_url": "https://api.github.com/users/SsnL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SsnL/subscriptions", "organizations_url": "https://api.github.com/users/SsnL/orgs", "repos_url": "https://api.github.com/users/SsnL/repos", "events_url": "https://api.github.com/users/SsnL/events{/privacy}", "received_events_url": "https://api.github.com/users/SsnL/received_events", "type": "User", "site_admin": false}, "body": "This isn't similar to the original implementation at all. Indeed as @resistor said, modulo and division are expensive. It is possible that the original simple strategy of parallelizing over batch dim is better.", "created_at": "2018-09-19T21:06:57Z", "updated_at": "2018-11-23T15:51:43Z", "html_url": "https://github.com/pytorch/pytorch/pull/11758#discussion_r218964078", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/11758", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/218964078"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/11758#discussion_r218964078"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/11758"}}, "body_html": "<p>This isn't similar to the original implementation at all. Indeed as <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=9796\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/resistor\">@resistor</a> said, modulo and division are expensive. It is possible that the original simple strategy of parallelizing over batch dim is better.</p>", "body_text": "This isn't similar to the original implementation at all. Indeed as @resistor said, modulo and division are expensive. It is possible that the original simple strategy of parallelizing over batch dim is better."}