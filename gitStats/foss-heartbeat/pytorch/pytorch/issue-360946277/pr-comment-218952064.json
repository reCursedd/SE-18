{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/218952064", "pull_request_review_id": 157007063, "id": 218952064, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxODk1MjA2NA==", "diff_hunk": "@@ -43,6 +44,218 @@ Tensor & rrelu_(Tensor & self, Scalar lower, Scalar upper, bool training, Genera\n   return at::rrelu_with_noise_(self, self.type().tensor(), lower, upper, training, generator);\n }\n \n+// -----------------------------------\n+// prelu forward\n+// -----------------------------------\n+template <typename scalar_t>\n+void inline prelu_cpu_kernel_multi_weights(\n+  Tensor& result,\n+  const Tensor& input,\n+  const Tensor& weight,\n+  int64_t input_stride0,\n+  int64_t input_stride1) {\n+\n+  int64_t i;\n+  int64_t input_numel = input.numel();\n+  auto result_data = result.data<scalar_t>();\n+  auto input_data = input.data<scalar_t>();\n+  auto weight_data = weight.data<scalar_t>();\n+\n+  // multiply values at each channel with weight[channel]\n+  #pragma omp parallel for private(i) if (input_numel > 1000)\n+  for (i = 0; i < input_numel; i++) {\n+    int64_t channel = (i % input_stride0) / input_stride1;\n+    scalar_t input_data_val = input_data[i];\n+    result_data[i] = (input_data_val > 0) ? input_data_val : weight_data[channel] * input_data_val;\n+  }\n+}\n+\n+template <typename scalar_t>\n+void inline prelu_cpu_kernel_share_weights(\n+  Tensor& result,\n+  const Tensor& input,\n+  const Tensor& weight) {\n+\n+  int64_t i;\n+  int64_t input_numel = input.numel();\n+  auto result_data = result.data<scalar_t>();\n+  auto input_data = input.data<scalar_t>();\n+  auto weight_val = weight.data<scalar_t>()[0];\n+\n+  #pragma omp parallel for private(i) if (input_numel > 1000)\n+  for (i = 0; i < input_numel; i++) {\n+    scalar_t input_data_val = input_data[i];\n+    result_data[i] = (input_data_val > 0) ? input_data_val : weight_val * input_data_val;\n+  }\n+}\n+\n+Tensor prelu_cpu(const Tensor& self, const Tensor& weight_) {\n+  auto input = self.contiguous();\n+  auto weight = weight_.contiguous();\n+\n+  AT_CHECK(input.is_contiguous());\n+  AT_CHECK(weight.is_contiguous());\n+\n+  int64_t weight_num = weight.numel();\n+  Tensor result = at::empty_like(input);\n+  auto strides = input.strides();\n+\n+  // case1: shared weight for all channels\n+  if (weight_num == 1) {\n+    AT_DISPATCH_FLOATING_TYPES(input.type(), \"prelu_cpu\", [&] {\n+      prelu_cpu_kernel_share_weights<scalar_t>(result, input, weight);\n+    });\n+  }\n+  else { // case2: multiple weights, one for each channel\n+    int64_t input_ndim = input.dim();\n+    AT_CHECK(input_ndim > 0, \"Not allow zero-dim input tensor.\");\n+\n+    int64_t channel_size = 1; // channel_size default to 1\n+    int64_t input_dim0_size = 1, input_stride0 = 1, input_stride1 = 1;\n+\n+    if (input_ndim > 1) {\n+      channel_size = input.size(1); // channel is the 2nd dim of input\n+      input_dim0_size = input.size(0);\n+      input_stride0 = strides[0];\n+      input_stride1 = strides[1];\n+    }\n+    AT_CHECK(channel_size == weight_num,\n+      \"Mismatch of parameter numbers and input channel size. Found parameter numbers = %d, and channel size = %d.\",\n+      weight_num, channel_size);\n+\n+    AT_DISPATCH_FLOATING_TYPES(input.type(), \"prelu_cpu\", [&] {\n+      prelu_cpu_kernel_multi_weights<scalar_t>(\n+        result,\n+        input,\n+        weight,\n+        input_stride0,\n+        input_stride1);\n+    });\n+  }\n+  return result;\n+}\n+\n+// -----------------------------------\n+// prelu backward\n+// -----------------------------------\n+template <typename scalar_t>\n+void inline prelu_cpu_backward_kernel_multi_weights(\n+  const Tensor& input,\n+  const Tensor& weight,\n+  const Tensor& grad_out,\n+  Tensor& input_grad,\n+  Tensor& weight_grad_collector,\n+  int64_t input_stride0,\n+  int64_t input_stride1) {\n+\n+  int64_t i;\n+  int64_t input_numel = input.numel();\n+  auto input_data = input.data<scalar_t>();\n+  auto weight_data = weight.data<scalar_t>();\n+  auto grad_out_data = grad_out.data<scalar_t>();\n+  auto input_grad_data = input_grad.data<scalar_t>();\n+  auto weight_grad_collector_data = weight_grad_collector.data<scalar_t>();\n+\n+  #pragma omp parallel for private(i) if (input_numel > 1000)\n+  for (i = 0; i < input_numel; i++) {\n+    int64_t channel = (i % input_stride0) / input_stride1;\n+    scalar_t input_data_val = input_data[i];\n+    scalar_t grad_out_data_val = grad_out_data[i];\n+    input_grad_data[i] = (input_data_val > 0) ? grad_out_data_val : weight_data[channel] * grad_out_data_val;\n+    weight_grad_collector_data[i] = (input_data_val > 0) ? scalar_t(0) : input_data_val * grad_out_data_val;\n+  }\n+}\n+\n+template <typename scalar_t>\n+void inline prelu_cpu_backward_kernel_share_weights(\n+  const Tensor& input,\n+  const Tensor& weight,\n+  const Tensor& grad_out,\n+  Tensor& input_grad,\n+  Tensor& weight_grad) {\n+\n+  int64_t i;\n+  int64_t input_numel = input.numel();\n+  scalar_t sum = 0;\n+  auto input_data = input.data<scalar_t>();\n+  auto weight_val = weight.data<scalar_t>()[0];\n+  auto grad_out_data = grad_out.data<scalar_t>();\n+  auto input_grad_data = input_grad.data<scalar_t>();\n+  auto weight_grad_data = weight_grad.data<scalar_t>();\n+\n+  #pragma omp parallel for private(i) reduction(+:sum) if (input_numel > 1000)\n+  for (i = 0; i < input_numel; i++) {\n+    scalar_t input_data_val = input_data[i];\n+    scalar_t grad_out_data_val = grad_out_data[i];\n+    input_grad_data[i] = (input_data_val > 0) ? grad_out_data_val : weight_val * grad_out_data_val;\n+    sum += (input_data_val > 0) ? scalar_t(0) : input_data_val * grad_out_data_val;\n+  }\n+  weight_grad_data[0] = sum;\n+}\n+\n+std::tuple<Tensor, Tensor> prelu_backward_cpu(const Tensor& grad_out_, const Tensor& self, const Tensor& weight_) {\n+  auto input = self.contiguous();\n+  auto grad_out = grad_out_.contiguous();\n+  auto weight = weight_.contiguous();\n+\n+  AT_CHECK(input.is_contiguous());\n+  AT_CHECK(grad_out.is_contiguous());\n+  AT_CHECK(weight.is_contiguous());\n+\n+  int64_t weight_num = weight.numel();\n+  auto strides = input.strides();\n+  auto dims = input.dim();\n+\n+  Tensor input_grad = at::empty_like(input);\n+  Tensor weight_grad = at::empty_like(weight);\n+  Tensor weight_grad_collector = at::empty_like(input);\n+\n+  // case1: shared parameter for all channels\n+  if (weight_num == 1) {\n+    AT_DISPATCH_FLOATING_TYPES(input.type(), \"prelu_backward_cpu\", [&] {\n+      prelu_cpu_backward_kernel_share_weights<scalar_t>(input, weight, grad_out, input_grad, weight_grad);\n+    });\n+  }\n+  else { // case2: multiple parameters, one for each channel\n+    int64_t input_ndim = input.dim();\n+    AT_CHECK(input_ndim > 0, \"Not allow zero-dim input tensor.\");\n+\n+    int64_t channel_size = 1; // channel_size default to 1\n+    int64_t input_dim0_size = 1, input_stride0 = 1, input_stride1 = 1;\n+\n+    if (input_ndim > 1) {\n+      channel_size = input.size(1); // channel is the 2nd dim of input\n+      input_dim0_size = input.size(0);\n+      input_stride0 = strides[0];\n+      input_stride1 = strides[1];\n+    }\n+    AT_CHECK(channel_size == weight_num,\n+      \"Mismatch of parameter numbers and input channel size. Found parameter numbers = %d, and channel size = %d.\",\n+      weight_num, channel_size);\n+\n+    AT_DISPATCH_FLOATING_TYPES(input.type(), \"prelu_backward_cpu\", [&] {\n+      prelu_cpu_backward_kernel_multi_weights<scalar_t>(\n+        input,\n+        weight,\n+        grad_out,\n+        input_grad,\n+        weight_grad_collector,\n+        input_stride0,\n+        input_stride1);\n+    });\n+    // update weight_grad", "path": "aten/src/ATen/native/Activation.cpp", "position": null, "original_position": 211, "commit_id": "b4b5ae0ce41bd2cf83d23c5fea005ee05f92bc1e", "original_commit_id": "da2fbf4b263c9dd3dc9418d583ebaf219da901c8", "user": {"login": "weiyangfb", "id": 38509346, "node_id": "MDQ6VXNlcjM4NTA5MzQ2", "avatar_url": "https://avatars1.githubusercontent.com/u/38509346?v=4", "gravatar_id": "", "url": "https://api.github.com/users/weiyangfb", "html_url": "https://github.com/weiyangfb", "followers_url": "https://api.github.com/users/weiyangfb/followers", "following_url": "https://api.github.com/users/weiyangfb/following{/other_user}", "gists_url": "https://api.github.com/users/weiyangfb/gists{/gist_id}", "starred_url": "https://api.github.com/users/weiyangfb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/weiyangfb/subscriptions", "organizations_url": "https://api.github.com/users/weiyangfb/orgs", "repos_url": "https://api.github.com/users/weiyangfb/repos", "events_url": "https://api.github.com/users/weiyangfb/events{/privacy}", "received_events_url": "https://api.github.com/users/weiyangfb/received_events", "type": "User", "site_admin": false}, "body": "is there a better way to do the reduction on weight_grad? @SsnL ", "created_at": "2018-09-19T20:27:37Z", "updated_at": "2018-11-23T15:51:42Z", "html_url": "https://github.com/pytorch/pytorch/pull/11758#discussion_r218952064", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/11758", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/218952064"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/11758#discussion_r218952064"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/11758"}}, "body_html": "<p>is there a better way to do the reduction on weight_grad? <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=5674597\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/SsnL\">@SsnL</a></p>", "body_text": "is there a better way to do the reduction on weight_grad? @SsnL"}