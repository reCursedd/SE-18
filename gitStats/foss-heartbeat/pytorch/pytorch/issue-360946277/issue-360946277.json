{"url": "https://api.github.com/repos/pytorch/pytorch/issues/11758", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/11758/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/11758/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/11758/events", "html_url": "https://github.com/pytorch/pytorch/pull/11758", "id": 360946277, "node_id": "MDExOlB1bGxSZXF1ZXN0MjE2MDQwNjY0", "number": 11758, "title": "migrate PReLU to ATen", "user": {"login": "weiyangfb", "id": 38509346, "node_id": "MDQ6VXNlcjM4NTA5MzQ2", "avatar_url": "https://avatars1.githubusercontent.com/u/38509346?v=4", "gravatar_id": "", "url": "https://api.github.com/users/weiyangfb", "html_url": "https://github.com/weiyangfb", "followers_url": "https://api.github.com/users/weiyangfb/followers", "following_url": "https://api.github.com/users/weiyangfb/following{/other_user}", "gists_url": "https://api.github.com/users/weiyangfb/gists{/gist_id}", "starred_url": "https://api.github.com/users/weiyangfb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/weiyangfb/subscriptions", "organizations_url": "https://api.github.com/users/weiyangfb/orgs", "repos_url": "https://api.github.com/users/weiyangfb/repos", "events_url": "https://api.github.com/users/weiyangfb/events{/privacy}", "received_events_url": "https://api.github.com/users/weiyangfb/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 19, "created_at": "2018-09-17T16:25:20Z", "updated_at": "2018-11-23T15:51:48Z", "closed_at": "2018-09-21T23:27:15Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/11758", "html_url": "https://github.com/pytorch/pytorch/pull/11758", "diff_url": "https://github.com/pytorch/pytorch/pull/11758.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/11758.patch"}, "body_html": "<ul>\n<li><span class=\"issue-keyword tooltipped tooltipped-se\" aria-label=\"This pull request closes issue #10723.\">fixes</span> <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"352444814\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/10723\" data-hovercard-type=\"issue\" data-hovercard-url=\"/pytorch/pytorch/issues/10723/hovercard\" href=\"https://github.com/pytorch/pytorch/issues/10723\">#10723</a></li>\n<li>migrate PReLU to ATen and deprecate legacy PReLU</li>\n<li>performance:</li>\n</ul>\n<p>CPU with weight.numel() = 1</p>\n<pre><code># === previous ===\n&gt;&gt;&gt; m = nn.PReLU()\n&gt;&gt;&gt; x = torch.randn(100, 100, 100, requires_grad=True)\n&gt;&gt;&gt; %timeit -r 100 y = m(x)\n1000 loops, best of 100: 1.5 ms per loop\n\n&gt;&gt;&gt; y = m(x).sum()\n&gt;&gt;&gt; %timeit -r 100 y.backward(retain_graph=True)\n10 loops, best of 100: 14.9 ms per loop\n\n# === current ====\n&gt;&gt;&gt; m = nn.PReLU()\n&gt;&gt;&gt; x = torch.randn(100, 100, 100, requires_grad=True)\n&gt;&gt;&gt; %timeit -r 100 y = m(x)\n1000 loops, best of 100: 179 \u00b5s per loop\n\n&gt;&gt;&gt; y = m(x).sum()\n&gt;&gt;&gt; %timeit -r 100 y.backward(retain_graph=True)\n100 loops, best of 100: 378 \u00b5s per loop\n</code></pre>\n<p>CPU with weight.numel() = channels</p>\n<pre><code># === previous ===\n&gt;&gt;&gt; m = nn.PReLU(100)\n&gt;&gt;&gt; x = torch.randn(100, 100, 100, requires_grad=True)\n&gt;&gt;&gt; %timeit -r 100 y = m(x)\n1000 loops, best of 100: 351 \u00b5s per loop\n\n&gt;&gt;&gt; y = m(x).sum()\n&gt;&gt;&gt; %timeit -r 100 y.backward(retain_graph=True)\n10 loops, best of 100: 7.14 ms per loop\n\n# === current ====\n&gt;&gt;&gt; m = nn.PReLU(100)\n&gt;&gt;&gt; x = torch.randn(100, 100, 100, requires_grad=True)\n&gt;&gt;&gt; %timeit -r 100 y = m(x)\n1000 loops, best of 100: 260 \u00b5s per loop\n\n&gt;&gt;&gt; y = m(x).sum()\n&gt;&gt;&gt; %timeit -r 100 y.backward(retain_graph=True)\n100 loops, best of 100: 854 \u00b5s per loop\n</code></pre>\n<p>CUDA with weight.numel() = 1</p>\n<pre><code># === previous ===\n&gt;&gt;&gt; m = nn.PReLU().cuda()\n&gt;&gt;&gt; x = torch.randn(100, 100, 100, requires_grad=True).cuda()\n&gt;&gt;&gt; %timeit -r 100 torch.cuda.synchronize(); y = m(x); torch.cuda.synchronize();\n10000 loops, best of 100: 97.2 \u00b5s per loop\n\n&gt;&gt;&gt; y = m(x).sum()\n&gt;&gt;&gt; %timeit -r 100 torch.cuda.synchronize(); y.backward(retain_graph=True); torch.cuda.synchronize();\n1000 loops, best of 100: 1.3 ms per loop\n\n# === current ====\n&gt;&gt;&gt; m = nn.PReLU().cuda()\n&gt;&gt;&gt; x = torch.randn(100, 100, 100, requires_grad=True).cuda()\n&gt;&gt;&gt; %timeit -r 100 torch.cuda.synchronize(); y = m(x); torch.cuda.synchronize();\n10000 loops, best of 100: 78.9 \u00b5s per loop\n\n&gt;&gt;&gt; y = m(x).sum()\n&gt;&gt;&gt; %timeit -r 100 torch.cuda.synchronize(); y.backward(retain_graph=True); torch.cuda.synchronize();\n1000 loops, best of 100: 1.27 ms per loop\n</code></pre>\n<p>CUDA with weight.numel() = channel</p>\n<pre><code># === previous ===\n&gt;&gt;&gt; m = nn.PReLU(100).cuda()\n&gt;&gt;&gt; x = torch.randn(100, 100, 100, requires_grad=True).cuda()\n&gt;&gt;&gt; %timeit -r 100 torch.cuda.synchronize(); y = m(x); torch.cuda.synchronize();\n10000 loops, best of 100: 101 \u00b5s per loop\n\n&gt;&gt;&gt; y = m(x).sum()\n&gt;&gt;&gt; %timeit -r 100 torch.cuda.synchronize(); y.backward(retain_graph=True); torch.cuda.synchronize();\n1000 loops, best of 100: 1.67 ms per loop\n\n# === current ====\n&gt;&gt;&gt; m = nn.PReLU(100).cuda()\n&gt;&gt;&gt; x = torch.randn(100, 100, 100, requires_grad=True).cuda()\n&gt;&gt;&gt; %timeit -r 100 torch.cuda.synchronize(); y = m(x); torch.cuda.synchronize();\n10000 loops, best of 100: 76.9 \u00b5s per loop\n\n&gt;&gt;&gt; y = m(x).sum()\n&gt;&gt;&gt; %timeit -r 100 torch.cuda.synchronize(); y.backward(retain_graph=True); torch.cuda.synchronize();\n1000 loops, best of 100: 1.12 ms per loop\n</code></pre>\n<p>Updated runtimes after removing DEBUG flag when building PyTorch..</p>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=13564\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ezyang\">@ezyang</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=5674597\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/SsnL\">@SsnL</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=5652049\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/zou3519\">@zou3519</a>  <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1310570\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/soumith\">@soumith</a></p>", "body_text": "fixes #10723\nmigrate PReLU to ATen and deprecate legacy PReLU\nperformance:\n\nCPU with weight.numel() = 1\n# === previous ===\n>>> m = nn.PReLU()\n>>> x = torch.randn(100, 100, 100, requires_grad=True)\n>>> %timeit -r 100 y = m(x)\n1000 loops, best of 100: 1.5 ms per loop\n\n>>> y = m(x).sum()\n>>> %timeit -r 100 y.backward(retain_graph=True)\n10 loops, best of 100: 14.9 ms per loop\n\n# === current ====\n>>> m = nn.PReLU()\n>>> x = torch.randn(100, 100, 100, requires_grad=True)\n>>> %timeit -r 100 y = m(x)\n1000 loops, best of 100: 179 \u00b5s per loop\n\n>>> y = m(x).sum()\n>>> %timeit -r 100 y.backward(retain_graph=True)\n100 loops, best of 100: 378 \u00b5s per loop\n\nCPU with weight.numel() = channels\n# === previous ===\n>>> m = nn.PReLU(100)\n>>> x = torch.randn(100, 100, 100, requires_grad=True)\n>>> %timeit -r 100 y = m(x)\n1000 loops, best of 100: 351 \u00b5s per loop\n\n>>> y = m(x).sum()\n>>> %timeit -r 100 y.backward(retain_graph=True)\n10 loops, best of 100: 7.14 ms per loop\n\n# === current ====\n>>> m = nn.PReLU(100)\n>>> x = torch.randn(100, 100, 100, requires_grad=True)\n>>> %timeit -r 100 y = m(x)\n1000 loops, best of 100: 260 \u00b5s per loop\n\n>>> y = m(x).sum()\n>>> %timeit -r 100 y.backward(retain_graph=True)\n100 loops, best of 100: 854 \u00b5s per loop\n\nCUDA with weight.numel() = 1\n# === previous ===\n>>> m = nn.PReLU().cuda()\n>>> x = torch.randn(100, 100, 100, requires_grad=True).cuda()\n>>> %timeit -r 100 torch.cuda.synchronize(); y = m(x); torch.cuda.synchronize();\n10000 loops, best of 100: 97.2 \u00b5s per loop\n\n>>> y = m(x).sum()\n>>> %timeit -r 100 torch.cuda.synchronize(); y.backward(retain_graph=True); torch.cuda.synchronize();\n1000 loops, best of 100: 1.3 ms per loop\n\n# === current ====\n>>> m = nn.PReLU().cuda()\n>>> x = torch.randn(100, 100, 100, requires_grad=True).cuda()\n>>> %timeit -r 100 torch.cuda.synchronize(); y = m(x); torch.cuda.synchronize();\n10000 loops, best of 100: 78.9 \u00b5s per loop\n\n>>> y = m(x).sum()\n>>> %timeit -r 100 torch.cuda.synchronize(); y.backward(retain_graph=True); torch.cuda.synchronize();\n1000 loops, best of 100: 1.27 ms per loop\n\nCUDA with weight.numel() = channel\n# === previous ===\n>>> m = nn.PReLU(100).cuda()\n>>> x = torch.randn(100, 100, 100, requires_grad=True).cuda()\n>>> %timeit -r 100 torch.cuda.synchronize(); y = m(x); torch.cuda.synchronize();\n10000 loops, best of 100: 101 \u00b5s per loop\n\n>>> y = m(x).sum()\n>>> %timeit -r 100 torch.cuda.synchronize(); y.backward(retain_graph=True); torch.cuda.synchronize();\n1000 loops, best of 100: 1.67 ms per loop\n\n# === current ====\n>>> m = nn.PReLU(100).cuda()\n>>> x = torch.randn(100, 100, 100, requires_grad=True).cuda()\n>>> %timeit -r 100 torch.cuda.synchronize(); y = m(x); torch.cuda.synchronize();\n10000 loops, best of 100: 76.9 \u00b5s per loop\n\n>>> y = m(x).sum()\n>>> %timeit -r 100 torch.cuda.synchronize(); y.backward(retain_graph=True); torch.cuda.synchronize();\n1000 loops, best of 100: 1.12 ms per loop\n\nUpdated runtimes after removing DEBUG flag when building PyTorch..\n@ezyang @SsnL @zou3519  @soumith", "body": "- fixes https://github.com/pytorch/pytorch/issues/10723\r\n- migrate PReLU to ATen and deprecate legacy PReLU\r\n- performance:\r\n\r\nCPU with weight.numel() = 1\r\n```\r\n# === previous ===\r\n>>> m = nn.PReLU()\r\n>>> x = torch.randn(100, 100, 100, requires_grad=True)\r\n>>> %timeit -r 100 y = m(x)\r\n1000 loops, best of 100: 1.5 ms per loop\r\n\r\n>>> y = m(x).sum()\r\n>>> %timeit -r 100 y.backward(retain_graph=True)\r\n10 loops, best of 100: 14.9 ms per loop\r\n\r\n# === current ====\r\n>>> m = nn.PReLU()\r\n>>> x = torch.randn(100, 100, 100, requires_grad=True)\r\n>>> %timeit -r 100 y = m(x)\r\n1000 loops, best of 100: 179 \u00b5s per loop\r\n\r\n>>> y = m(x).sum()\r\n>>> %timeit -r 100 y.backward(retain_graph=True)\r\n100 loops, best of 100: 378 \u00b5s per loop\r\n```\r\n\r\nCPU with weight.numel() = channels\r\n```\r\n# === previous ===\r\n>>> m = nn.PReLU(100)\r\n>>> x = torch.randn(100, 100, 100, requires_grad=True)\r\n>>> %timeit -r 100 y = m(x)\r\n1000 loops, best of 100: 351 \u00b5s per loop\r\n\r\n>>> y = m(x).sum()\r\n>>> %timeit -r 100 y.backward(retain_graph=True)\r\n10 loops, best of 100: 7.14 ms per loop\r\n\r\n# === current ====\r\n>>> m = nn.PReLU(100)\r\n>>> x = torch.randn(100, 100, 100, requires_grad=True)\r\n>>> %timeit -r 100 y = m(x)\r\n1000 loops, best of 100: 260 \u00b5s per loop\r\n\r\n>>> y = m(x).sum()\r\n>>> %timeit -r 100 y.backward(retain_graph=True)\r\n100 loops, best of 100: 854 \u00b5s per loop\r\n```\r\n\r\nCUDA with weight.numel() = 1\r\n```\r\n# === previous ===\r\n>>> m = nn.PReLU().cuda()\r\n>>> x = torch.randn(100, 100, 100, requires_grad=True).cuda()\r\n>>> %timeit -r 100 torch.cuda.synchronize(); y = m(x); torch.cuda.synchronize();\r\n10000 loops, best of 100: 97.2 \u00b5s per loop\r\n\r\n>>> y = m(x).sum()\r\n>>> %timeit -r 100 torch.cuda.synchronize(); y.backward(retain_graph=True); torch.cuda.synchronize();\r\n1000 loops, best of 100: 1.3 ms per loop\r\n\r\n# === current ====\r\n>>> m = nn.PReLU().cuda()\r\n>>> x = torch.randn(100, 100, 100, requires_grad=True).cuda()\r\n>>> %timeit -r 100 torch.cuda.synchronize(); y = m(x); torch.cuda.synchronize();\r\n10000 loops, best of 100: 78.9 \u00b5s per loop\r\n\r\n>>> y = m(x).sum()\r\n>>> %timeit -r 100 torch.cuda.synchronize(); y.backward(retain_graph=True); torch.cuda.synchronize();\r\n1000 loops, best of 100: 1.27 ms per loop\r\n```\r\n\r\nCUDA with weight.numel() = channel\r\n```\r\n# === previous ===\r\n>>> m = nn.PReLU(100).cuda()\r\n>>> x = torch.randn(100, 100, 100, requires_grad=True).cuda()\r\n>>> %timeit -r 100 torch.cuda.synchronize(); y = m(x); torch.cuda.synchronize();\r\n10000 loops, best of 100: 101 \u00b5s per loop\r\n\r\n>>> y = m(x).sum()\r\n>>> %timeit -r 100 torch.cuda.synchronize(); y.backward(retain_graph=True); torch.cuda.synchronize();\r\n1000 loops, best of 100: 1.67 ms per loop\r\n\r\n# === current ====\r\n>>> m = nn.PReLU(100).cuda()\r\n>>> x = torch.randn(100, 100, 100, requires_grad=True).cuda()\r\n>>> %timeit -r 100 torch.cuda.synchronize(); y = m(x); torch.cuda.synchronize();\r\n10000 loops, best of 100: 76.9 \u00b5s per loop\r\n\r\n>>> y = m(x).sum()\r\n>>> %timeit -r 100 torch.cuda.synchronize(); y.backward(retain_graph=True); torch.cuda.synchronize();\r\n1000 loops, best of 100: 1.12 ms per loop\r\n```\r\n\r\nUpdated runtimes after removing DEBUG flag when building PyTorch..\r\n\r\n@ezyang @SsnL @zou3519  @soumith "}