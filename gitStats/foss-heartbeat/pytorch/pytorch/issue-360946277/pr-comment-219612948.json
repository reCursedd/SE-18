{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/219612948", "pull_request_review_id": 157840378, "id": 219612948, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxOTYxMjk0OA==", "diff_hunk": "@@ -43,6 +43,205 @@ Tensor & rrelu_(Tensor & self, Scalar lower, Scalar upper, bool training, Genera\n   return at::rrelu_with_noise_(self, self.type().tensor(), lower, upper, training, generator);\n }\n \n+// -----------------------------------\n+// prelu forward\n+// -----------------------------------\n+template <typename scalar_t>\n+void prelu_cpu_kernel(\n+  Tensor& result,\n+  const Tensor& input,\n+  const Tensor& weight,\n+  int64_t input_dim0_size,\n+  int64_t channel_size,\n+  int64_t input_stride0,\n+  int64_t input_stride1) {\n+\n+  int64_t i, j, k;\n+  auto result_data = result.data<scalar_t>();\n+  auto input_data = input.data<scalar_t>();\n+  auto weight_data = weight.data<scalar_t>();\n+\n+  // multiply values at each channel with weight[channel_index]\n+  #pragma omp parallel for private(i,j,k) if (input.numel() > 10000)\n+  for (i = 0; i < input_dim0_size; i++) {\n+    for (j = 0; j < channel_size; j++) {\n+      for (k = 0; k < input_stride1; k++) {\n+        int64_t pos = i * input_stride0 + j * input_stride1 + k;\n+        result_data[pos] = (input_data[pos] > 0) ? input_data[pos] : weight_data[j] * input_data[pos];\n+      }\n+    }\n+  }\n+}\n+\n+Tensor prelu_cpu(const Tensor& self, const Tensor& weight_) {\n+  auto input = self.contiguous();\n+  auto weight = weight_.contiguous();\n+\n+  AT_CHECK(input.is_contiguous());\n+  AT_CHECK(weight.is_contiguous());\n+\n+  int64_t weight_num = weight.numel();\n+  Tensor result = at::empty_like(input);\n+  auto strides = input.strides();\n+\n+  // case1: shared weight for all channels\n+  if (weight_num == 1) {", "path": "aten/src/ATen/native/Activation.cpp", "position": 81, "original_position": 46, "commit_id": "b4b5ae0ce41bd2cf83d23c5fea005ee05f92bc1e", "original_commit_id": "b9909afa90444c1634d1d12d74fa93ec5f912ff8", "user": {"login": "weiyangfb", "id": 38509346, "node_id": "MDQ6VXNlcjM4NTA5MzQ2", "avatar_url": "https://avatars1.githubusercontent.com/u/38509346?v=4", "gravatar_id": "", "url": "https://api.github.com/users/weiyangfb", "html_url": "https://github.com/weiyangfb", "followers_url": "https://api.github.com/users/weiyangfb/followers", "following_url": "https://api.github.com/users/weiyangfb/following{/other_user}", "gists_url": "https://api.github.com/users/weiyangfb/gists{/gist_id}", "starred_url": "https://api.github.com/users/weiyangfb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/weiyangfb/subscriptions", "organizations_url": "https://api.github.com/users/weiyangfb/orgs", "repos_url": "https://api.github.com/users/weiyangfb/repos", "events_url": "https://api.github.com/users/weiyangfb/events{/privacy}", "received_events_url": "https://api.github.com/users/weiyangfb/received_events", "type": "User", "site_admin": false}, "body": "this is fixed by parallelizing the kernel", "created_at": "2018-09-21T20:05:12Z", "updated_at": "2018-11-23T15:51:48Z", "html_url": "https://github.com/pytorch/pytorch/pull/11758#discussion_r219612948", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/11758", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/219612948"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/11758#discussion_r219612948"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/11758"}}, "body_html": "<p>this is fixed by parallelizing the kernel</p>", "body_text": "this is fixed by parallelizing the kernel", "in_reply_to_id": 218635933}