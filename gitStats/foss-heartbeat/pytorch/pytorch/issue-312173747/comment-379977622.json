{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/379977622", "html_url": "https://github.com/pytorch/pytorch/pull/6378#issuecomment-379977622", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/6378", "id": 379977622, "node_id": "MDEyOklzc3VlQ29tbWVudDM3OTk3NzYyMg==", "user": {"login": "bddppq", "id": 9300575, "node_id": "MDQ6VXNlcjkzMDA1NzU=", "avatar_url": "https://avatars2.githubusercontent.com/u/9300575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bddppq", "html_url": "https://github.com/bddppq", "followers_url": "https://api.github.com/users/bddppq/followers", "following_url": "https://api.github.com/users/bddppq/following{/other_user}", "gists_url": "https://api.github.com/users/bddppq/gists{/gist_id}", "starred_url": "https://api.github.com/users/bddppq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bddppq/subscriptions", "organizations_url": "https://api.github.com/users/bddppq/orgs", "repos_url": "https://api.github.com/users/bddppq/repos", "events_url": "https://api.github.com/users/bddppq/events{/privacy}", "received_events_url": "https://api.github.com/users/bddppq/received_events", "type": "User", "site_admin": false}, "created_at": "2018-04-10T05:23:41Z", "updated_at": "2018-04-10T05:23:41Z", "author_association": "MEMBER", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1100089\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/yinghai\">@yinghai</a> changing <code>'lib'</code> to <code>str('lib')</code> should solve the issue. this is because after adding<code>from __future__ import unicode_literals</code> the string literal <code>'lib'</code> becomes an unicode string, while distutils still tries to assert it is of <code>str</code> type.</p>", "body_text": "@yinghai changing 'lib' to str('lib') should solve the issue. this is because after addingfrom __future__ import unicode_literals the string literal 'lib' becomes an unicode string, while distutils still tries to assert it is of str type.", "body": "@yinghai changing `'lib'` to `str('lib')` should solve the issue. this is because after adding`from __future__ import unicode_literals` the string literal `'lib'` becomes an unicode string, while distutils still tries to assert it is of `str` type."}