{"url": "https://api.github.com/repos/pytorch/pytorch/issues/8439", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/8439/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/8439/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/8439/events", "html_url": "https://github.com/pytorch/pytorch/issues/8439", "id": 332123748, "node_id": "MDU6SXNzdWUzMzIxMjM3NDg=", "number": 8439, "title": "[JIT] ONNX InstanceNormalization symbolic interferes with regular tracing", "user": {"login": "jamesr66a", "id": 4685384, "node_id": "MDQ6VXNlcjQ2ODUzODQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/4685384?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamesr66a", "html_url": "https://github.com/jamesr66a", "followers_url": "https://api.github.com/users/jamesr66a/followers", "following_url": "https://api.github.com/users/jamesr66a/following{/other_user}", "gists_url": "https://api.github.com/users/jamesr66a/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamesr66a/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamesr66a/subscriptions", "organizations_url": "https://api.github.com/users/jamesr66a/orgs", "repos_url": "https://api.github.com/users/jamesr66a/repos", "events_url": "https://api.github.com/users/jamesr66a/events{/privacy}", "received_events_url": "https://api.github.com/users/jamesr66a/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 679953983, "node_id": "MDU6TGFiZWw2Nzk5NTM5ODM=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/jit", "name": "jit", "color": "c5def5", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-06-13T19:03:45Z", "updated_at": "2018-09-13T19:27:45Z", "closed_at": "2018-09-13T19:27:45Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Example:</p>\n<pre><code>import torch\n\nclass ConvLayer(torch.nn.Module):\n    def __init__(self, in_channels, out_channels, kernel_size, stride):\n        super(ConvLayer, self).__init__()\n        reflection_padding = kernel_size // 2\n        self.reflection_pad = torch.nn.ReflectionPad2d(reflection_padding)\n        self.conv2d = torch.nn.Conv2d(in_channels, out_channels, kernel_size, stride)\n\n    def forward(self, x):\n        out = self.reflection_pad(x)\n        out = self.conv2d(out)\n        return out\n\nclass TransformerNet(torch.nn.Module):\n    def __init__(self):\n        super(TransformerNet, self).__init__()\n        # Initial convolution layers\n        self.conv1 = ConvLayer(3, 32, kernel_size=9, stride=1)\n        self.in1 = torch.nn.InstanceNorm2d(32, affine=True)\n\n    def forward(self, x):\n        return self.in1(self.conv1(x))\n\nx = torch.rand(5, 3, 224, 224)\ntn = TransformerNet()\ntraced = torch.jit.trace(x)(tn)\nprint(traced.__getattr__('forward').graph)\ntraced(x)\n</code></pre>\n<p>Output:</p>\n<pre><code>graph(%0 : Float(5, 3, 224, 224)\n      %1 : Float(32, 3, 9, 9)\n      %2 : Float(32)\n      %3 : Float(32)\n      %4 : Float(32)) {\n  %6 : Float(5, 3, 232, 232) = aten::reflection_pad2d[padding=[4, 4, 4, 4]](%0)\n  %12 : Float(5, 32, 224, 224) = aten::_convolution[stride=[1, 1], padding=[0, 0], dilation=[1, 1], transposed=0, output_padding=[0, 0], groups=1, benchmark=0, deterministic=0, cudnn_enabled=1](%6, %1, %2)\n  %51 : Dynamic = onnx::Constant[value=&lt;Tensor&gt;]()\n  %52 : Dynamic = onnx::Constant[value=&lt;Tensor&gt;]()\n  %53 : Float(5, 32, 224, 224) = onnx::InstanceNormalization[epsilon=1e-05](%12, %51, %52)\n  return (%53);\n}\n\nTraceback (most recent call last):\n  File \"instance.py\", line 29, in &lt;module&gt;\n    traced(x)\n  File \"/Users/jamesreed/onnx-fairseq/pytorch/torch/nn/modules/module.py\", line 468, in __call__\n    result = self.forward(*input, **kwargs)\n  File \"/Users/jamesreed/onnx-fairseq/pytorch/torch/jit/__init__.py\", line 690, in forward\n    return self._get_method('forward')(*args, **kwargs)\nRuntimeError: torch/csrc/jit/generated/aten_dispatch.cpp:13384: getDescriptor: Assertion `n-&gt;kind().is_aten()` failed: onnx::Constant is not an ATen op\n</code></pre>\n<p><code>torch.onnx.symbolic_override*</code> decorators kick in unconditionally when tracing, whether we're calling them in an ONNX export context or not. This breaks JIT tracing for e.g. the super-resolution example</p>", "body_text": "Example:\nimport torch\n\nclass ConvLayer(torch.nn.Module):\n    def __init__(self, in_channels, out_channels, kernel_size, stride):\n        super(ConvLayer, self).__init__()\n        reflection_padding = kernel_size // 2\n        self.reflection_pad = torch.nn.ReflectionPad2d(reflection_padding)\n        self.conv2d = torch.nn.Conv2d(in_channels, out_channels, kernel_size, stride)\n\n    def forward(self, x):\n        out = self.reflection_pad(x)\n        out = self.conv2d(out)\n        return out\n\nclass TransformerNet(torch.nn.Module):\n    def __init__(self):\n        super(TransformerNet, self).__init__()\n        # Initial convolution layers\n        self.conv1 = ConvLayer(3, 32, kernel_size=9, stride=1)\n        self.in1 = torch.nn.InstanceNorm2d(32, affine=True)\n\n    def forward(self, x):\n        return self.in1(self.conv1(x))\n\nx = torch.rand(5, 3, 224, 224)\ntn = TransformerNet()\ntraced = torch.jit.trace(x)(tn)\nprint(traced.__getattr__('forward').graph)\ntraced(x)\n\nOutput:\ngraph(%0 : Float(5, 3, 224, 224)\n      %1 : Float(32, 3, 9, 9)\n      %2 : Float(32)\n      %3 : Float(32)\n      %4 : Float(32)) {\n  %6 : Float(5, 3, 232, 232) = aten::reflection_pad2d[padding=[4, 4, 4, 4]](%0)\n  %12 : Float(5, 32, 224, 224) = aten::_convolution[stride=[1, 1], padding=[0, 0], dilation=[1, 1], transposed=0, output_padding=[0, 0], groups=1, benchmark=0, deterministic=0, cudnn_enabled=1](%6, %1, %2)\n  %51 : Dynamic = onnx::Constant[value=<Tensor>]()\n  %52 : Dynamic = onnx::Constant[value=<Tensor>]()\n  %53 : Float(5, 32, 224, 224) = onnx::InstanceNormalization[epsilon=1e-05](%12, %51, %52)\n  return (%53);\n}\n\nTraceback (most recent call last):\n  File \"instance.py\", line 29, in <module>\n    traced(x)\n  File \"/Users/jamesreed/onnx-fairseq/pytorch/torch/nn/modules/module.py\", line 468, in __call__\n    result = self.forward(*input, **kwargs)\n  File \"/Users/jamesreed/onnx-fairseq/pytorch/torch/jit/__init__.py\", line 690, in forward\n    return self._get_method('forward')(*args, **kwargs)\nRuntimeError: torch/csrc/jit/generated/aten_dispatch.cpp:13384: getDescriptor: Assertion `n->kind().is_aten()` failed: onnx::Constant is not an ATen op\n\ntorch.onnx.symbolic_override* decorators kick in unconditionally when tracing, whether we're calling them in an ONNX export context or not. This breaks JIT tracing for e.g. the super-resolution example", "body": "Example:\r\n\r\n```\r\nimport torch\r\n\r\nclass ConvLayer(torch.nn.Module):\r\n    def __init__(self, in_channels, out_channels, kernel_size, stride):\r\n        super(ConvLayer, self).__init__()\r\n        reflection_padding = kernel_size // 2\r\n        self.reflection_pad = torch.nn.ReflectionPad2d(reflection_padding)\r\n        self.conv2d = torch.nn.Conv2d(in_channels, out_channels, kernel_size, stride)\r\n\r\n    def forward(self, x):\r\n        out = self.reflection_pad(x)\r\n        out = self.conv2d(out)\r\n        return out\r\n\r\nclass TransformerNet(torch.nn.Module):\r\n    def __init__(self):\r\n        super(TransformerNet, self).__init__()\r\n        # Initial convolution layers\r\n        self.conv1 = ConvLayer(3, 32, kernel_size=9, stride=1)\r\n        self.in1 = torch.nn.InstanceNorm2d(32, affine=True)\r\n\r\n    def forward(self, x):\r\n        return self.in1(self.conv1(x))\r\n\r\nx = torch.rand(5, 3, 224, 224)\r\ntn = TransformerNet()\r\ntraced = torch.jit.trace(x)(tn)\r\nprint(traced.__getattr__('forward').graph)\r\ntraced(x)\r\n```\r\n\r\nOutput:\r\n\r\n```\r\ngraph(%0 : Float(5, 3, 224, 224)\r\n      %1 : Float(32, 3, 9, 9)\r\n      %2 : Float(32)\r\n      %3 : Float(32)\r\n      %4 : Float(32)) {\r\n  %6 : Float(5, 3, 232, 232) = aten::reflection_pad2d[padding=[4, 4, 4, 4]](%0)\r\n  %12 : Float(5, 32, 224, 224) = aten::_convolution[stride=[1, 1], padding=[0, 0], dilation=[1, 1], transposed=0, output_padding=[0, 0], groups=1, benchmark=0, deterministic=0, cudnn_enabled=1](%6, %1, %2)\r\n  %51 : Dynamic = onnx::Constant[value=<Tensor>]()\r\n  %52 : Dynamic = onnx::Constant[value=<Tensor>]()\r\n  %53 : Float(5, 32, 224, 224) = onnx::InstanceNormalization[epsilon=1e-05](%12, %51, %52)\r\n  return (%53);\r\n}\r\n\r\nTraceback (most recent call last):\r\n  File \"instance.py\", line 29, in <module>\r\n    traced(x)\r\n  File \"/Users/jamesreed/onnx-fairseq/pytorch/torch/nn/modules/module.py\", line 468, in __call__\r\n    result = self.forward(*input, **kwargs)\r\n  File \"/Users/jamesreed/onnx-fairseq/pytorch/torch/jit/__init__.py\", line 690, in forward\r\n    return self._get_method('forward')(*args, **kwargs)\r\nRuntimeError: torch/csrc/jit/generated/aten_dispatch.cpp:13384: getDescriptor: Assertion `n->kind().is_aten()` failed: onnx::Constant is not an ATen op\r\n```\r\n\r\n`torch.onnx.symbolic_override*` decorators kick in unconditionally when tracing, whether we're calling them in an ONNX export context or not. This breaks JIT tracing for e.g. the super-resolution example"}