{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/402244131", "html_url": "https://github.com/pytorch/pytorch/issues/9120#issuecomment-402244131", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/9120", "id": 402244131, "node_id": "MDEyOklzc3VlQ29tbWVudDQwMjI0NDEzMQ==", "user": {"login": "pjh5", "id": 6456020, "node_id": "MDQ6VXNlcjY0NTYwMjA=", "avatar_url": "https://avatars1.githubusercontent.com/u/6456020?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pjh5", "html_url": "https://github.com/pjh5", "followers_url": "https://api.github.com/users/pjh5/followers", "following_url": "https://api.github.com/users/pjh5/following{/other_user}", "gists_url": "https://api.github.com/users/pjh5/gists{/gist_id}", "starred_url": "https://api.github.com/users/pjh5/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pjh5/subscriptions", "organizations_url": "https://api.github.com/users/pjh5/orgs", "repos_url": "https://api.github.com/users/pjh5/repos", "events_url": "https://api.github.com/users/pjh5/events{/privacy}", "received_events_url": "https://api.github.com/users/pjh5/received_events", "type": "User", "site_admin": false}, "created_at": "2018-07-03T18:02:15Z", "updated_at": "2018-07-03T18:02:15Z", "author_association": "CONTRIBUTOR", "body_html": "<p>I can't repro this on conda 4.5.4, so upgrading might fix this.</p>\n<p>Can you try specifying the python version when you create the conda environment? For example:<br>\n<code>conda create -n pytorch python=3</code> and then trying to install?</p>\n<p>Running <code>conda create -n pytorch python=3</code> will populate the conda environment with the barebones Python packages (including Python and setuptools) needed for a functional Python installation.</p>\n<p>Running <code>conda create -n pytorch anaconda</code> installs lots and lots of packages, which all have dependencies with one another that make can it hard to install another package (e.g. pytorch) with its own dependencies on top of that.</p>\n<p>Running <code>conda create -n pytorch</code> without specifying \"anaconda\" nor \"python=#\" will install no packages, not even Python itself. It will install Python and other required python packages only when you install your first package in it. This means that if you create an env like this and do not install anything into it, then you will essentially still be in your root env, even after a <code>source activate pytorch</code>.</p>", "body_text": "I can't repro this on conda 4.5.4, so upgrading might fix this.\nCan you try specifying the python version when you create the conda environment? For example:\nconda create -n pytorch python=3 and then trying to install?\nRunning conda create -n pytorch python=3 will populate the conda environment with the barebones Python packages (including Python and setuptools) needed for a functional Python installation.\nRunning conda create -n pytorch anaconda installs lots and lots of packages, which all have dependencies with one another that make can it hard to install another package (e.g. pytorch) with its own dependencies on top of that.\nRunning conda create -n pytorch without specifying \"anaconda\" nor \"python=#\" will install no packages, not even Python itself. It will install Python and other required python packages only when you install your first package in it. This means that if you create an env like this and do not install anything into it, then you will essentially still be in your root env, even after a source activate pytorch.", "body": "I can't repro this on conda 4.5.4, so upgrading might fix this.\r\n\r\nCan you try specifying the python version when you create the conda environment? For example:\r\n```conda create -n pytorch python=3``` and then trying to install?\r\n\r\nRunning ```conda create -n pytorch python=3``` will populate the conda environment with the barebones Python packages (including Python and setuptools) needed for a functional Python installation. \r\n\r\nRunning ```conda create -n pytorch anaconda``` installs lots and lots of packages, which all have dependencies with one another that make can it hard to install another package (e.g. pytorch) with its own dependencies on top of that.\r\n\r\nRunning ```conda create -n pytorch``` without specifying \"anaconda\" nor \"python=#\" will install no packages, not even Python itself. It will install Python and other required python packages only when you install your first package in it. This means that if you create an env like this and do not install anything into it, then you will essentially still be in your root env, even after a ```source activate pytorch```."}