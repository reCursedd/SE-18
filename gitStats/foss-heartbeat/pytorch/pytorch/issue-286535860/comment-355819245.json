{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/355819245", "html_url": "https://github.com/pytorch/pytorch/issues/4514#issuecomment-355819245", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/4514", "id": 355819245, "node_id": "MDEyOklzc3VlQ29tbWVudDM1NTgxOTI0NQ==", "user": {"login": "soumith", "id": 1310570, "node_id": "MDQ6VXNlcjEzMTA1NzA=", "avatar_url": "https://avatars0.githubusercontent.com/u/1310570?v=4", "gravatar_id": "", "url": "https://api.github.com/users/soumith", "html_url": "https://github.com/soumith", "followers_url": "https://api.github.com/users/soumith/followers", "following_url": "https://api.github.com/users/soumith/following{/other_user}", "gists_url": "https://api.github.com/users/soumith/gists{/gist_id}", "starred_url": "https://api.github.com/users/soumith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/soumith/subscriptions", "organizations_url": "https://api.github.com/users/soumith/orgs", "repos_url": "https://api.github.com/users/soumith/repos", "events_url": "https://api.github.com/users/soumith/events{/privacy}", "received_events_url": "https://api.github.com/users/soumith/received_events", "type": "User", "site_admin": false}, "created_at": "2018-01-07T12:23:46Z", "updated_at": "2018-01-07T12:23:46Z", "author_association": "MEMBER", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=22359268\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/bamtercelboo\">@bamtercelboo</a> i checked the CUDA kernel for max_norm based Embedding. It has no AtomicAdd operations and should be fully deterministic. What is likely happening is that for some reason when <code>max_norm=False</code>, by chance cudnn must be picking it's deterministic algorithms. This can happen because of subtle reasons (maybe if max_norm=False the input to Conv2d backward somewhere is non-contiguous or something...).</p>\n<p>We will likely not take any action on this issue.<br>\nIf you want to retain cudnn's determinism, we introduced a flag:</p>\n<pre><code>torch.backends.cudnn.deterministic = True\n</code></pre>\n<p>which makes sure CuDNN always picks up deterministic algorithm (but it will be slower).</p>", "body_text": "@bamtercelboo i checked the CUDA kernel for max_norm based Embedding. It has no AtomicAdd operations and should be fully deterministic. What is likely happening is that for some reason when max_norm=False, by chance cudnn must be picking it's deterministic algorithms. This can happen because of subtle reasons (maybe if max_norm=False the input to Conv2d backward somewhere is non-contiguous or something...).\nWe will likely not take any action on this issue.\nIf you want to retain cudnn's determinism, we introduced a flag:\ntorch.backends.cudnn.deterministic = True\n\nwhich makes sure CuDNN always picks up deterministic algorithm (but it will be slower).", "body": "@bamtercelboo i checked the CUDA kernel for max_norm based Embedding. It has no AtomicAdd operations and should be fully deterministic. What is likely happening is that for some reason when `max_norm=False`, by chance cudnn must be picking it's deterministic algorithms. This can happen because of subtle reasons (maybe if max_norm=False the input to Conv2d backward somewhere is non-contiguous or something...).\r\n\r\nWe will likely not take any action on this issue.\r\nIf you want to retain cudnn's determinism, we introduced a flag:\r\n\r\n```\r\ntorch.backends.cudnn.deterministic = True\r\n```\r\nwhich makes sure CuDNN always picks up deterministic algorithm (but it will be slower)."}