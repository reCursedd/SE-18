{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/212810813", "pull_request_review_id": 149522668, "id": 212810813, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMjgxMDgxMw==", "diff_hunk": "@@ -0,0 +1,75 @@\n+#include \"ATen/ATen.h\"\n+#include \"ATen/TensorUtils.h\"\n+#include \"ATen/NativeFunctions.h\"\n+\n+#include <cstring>\n+#include <memory>\n+#include <sstream>\n+#include <vector>\n+\n+#ifdef _OPENMP\n+#include <omp.h>\n+#endif\n+\n+\n+namespace at { \n+namespace native {\n+\n+// Staying faithful to the Python for now for clarity, look for optimizations later\n+// (eg single return statement for RVO)\n+Tensor norm_except_dim(const Tensor & v, int64_t pow, int64_t dim)\n+{\n+  // I assume tensor.contiguous(), view(), norm(), etc. here will dispatch through VariableType.\n+  if(dim == -1)\n+    return v.norm(pow);\n+  else if(dim == 0)\n+  {\n+    std::vector<int64_t> output_size(v.dim(), 1);\n+    output_size[0] = v.size(0);\n+    return v.contiguous().view({v.size(0), -1}).norm(pow, 1).view(output_size);", "path": "aten/src/ATen/native/WeightNorm.cpp", "position": null, "original_position": 29, "commit_id": "a8e98ce8c02e0469fb907621eaa61b0a9486d68e", "original_commit_id": "59f140757461de2d65e7263bbc9f3961aecfb8e5", "user": {"login": "mcarilli", "id": 7799218, "node_id": "MDQ6VXNlcjc3OTkyMTg=", "avatar_url": "https://avatars0.githubusercontent.com/u/7799218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarilli", "html_url": "https://github.com/mcarilli", "followers_url": "https://api.github.com/users/mcarilli/followers", "following_url": "https://api.github.com/users/mcarilli/following{/other_user}", "gists_url": "https://api.github.com/users/mcarilli/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarilli/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarilli/subscriptions", "organizations_url": "https://api.github.com/users/mcarilli/orgs", "repos_url": "https://api.github.com/users/mcarilli/repos", "events_url": "https://api.github.com/users/mcarilli/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarilli/received_events", "type": "User", "site_admin": false}, "body": "The subsequent norm op involves (at least) 3 tensor-size passes to/from global memory for a non-persistent implementation (2 reads and a write), so it's worth making v C-style contiguous for coalesced memory accesses during the norm.  Unfortunately reshape() is not strict enough to guarantee C-style contiguity in all cases:\r\n```\r\n>>> a = torch.Tensor([[1,2],[3,4]])\r\n>>> a.t().reshape(a.size(0), -1).stride()\r\n(1, 2)\r\n>>> a.t().contiguous().view(a.size(0), -1).stride()\r\n(2, 1)\r\n```", "created_at": "2018-08-25T22:50:09Z", "updated_at": "2018-11-23T15:50:01Z", "html_url": "https://github.com/pytorch/pytorch/pull/10842#discussion_r212810813", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/10842", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/212810813"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/10842#discussion_r212810813"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/10842"}}, "body_html": "<p>The subsequent norm op involves (at least) 3 tensor-size passes to/from global memory for a non-persistent implementation (2 reads and a write), so it's worth making v C-style contiguous for coalesced memory accesses during the norm.  Unfortunately reshape() is not strict enough to guarantee C-style contiguity in all cases:</p>\n<pre><code>&gt;&gt;&gt; a = torch.Tensor([[1,2],[3,4]])\n&gt;&gt;&gt; a.t().reshape(a.size(0), -1).stride()\n(1, 2)\n&gt;&gt;&gt; a.t().contiguous().view(a.size(0), -1).stride()\n(2, 1)\n</code></pre>", "body_text": "The subsequent norm op involves (at least) 3 tensor-size passes to/from global memory for a non-persistent implementation (2 reads and a write), so it's worth making v C-style contiguous for coalesced memory accesses during the norm.  Unfortunately reshape() is not strict enough to guarantee C-style contiguity in all cases:\n>>> a = torch.Tensor([[1,2],[3,4]])\n>>> a.t().reshape(a.size(0), -1).stride()\n(1, 2)\n>>> a.t().contiguous().view(a.size(0), -1).stride()\n(2, 1)", "in_reply_to_id": 212545769}