{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/144694877", "pull_request_review_id": 69392912, "id": 144694877, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0NDY5NDg3Nw==", "diff_hunk": "@@ -203,16 +203,39 @@ def persistent_id(obj):\n def load(f, map_location=None, pickle_module=pickle):\n     \"\"\"Loads an object saved with :func:`torch.save` from a file.\n \n-    torch.load can dynamically remap storages to be loaded on a different device\n-    using the map_location argument. If it's a callable, it will be called with\n-    two arguments: storage and location tag. It's expected to either return a\n-    storage that's been moved to a different location, or None (and the location\n-    will be resolved using the default method). If this argument is a dict it's\n-    expected to be a mapping from location tags used in a file, to location\n-    tags of the current system.\n-\n-    By default the location tags are 'cpu' for host tensors and 'cuda:device_id'\n-    (e.g. 'cuda:2') for cuda tensors. User extensions can register their own\n+    torch.load uses python's normal unpickling facilities but treats storages,\n+    which underlie tensors, specially.  Storages are first deserialized on the\n+    cpu.  Then, by default, torch.load tries to move the storage to the device\n+    it was saved from, raising an exception if this fails because the device\n+    does not exist.  If you serialize a cuda tensor with torch.save, when you\n+    deserialize it with torch.load, it will be created on the device it was\n+    originally on from a storage that has been moved there.\n+\n+    But torch.load can also dynamically remap tensors to be loaded on a\n+    different device using the map_location argument.  To understand how this\n+    works, we have to understand how torch.load knows what device to try to\n+    move each storage to.  It knows this because torch.save saves a location\n+    tag with each storage that says what device it was on.  The builtin\n+    location tags are 'cpu' for host tensors and 'cuda:device_id'\n+    (e.g. 'cuda:2') for cuda tensors.", "path": "torch/serialization.py", "position": null, "original_position": 28, "commit_id": "d8292ee1f90e6e48a0fa00035aae533d28b888c7", "original_commit_id": "c51906a6c58d87a1c55c2fe590e4af1098f87f82", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "I don't feel that this blogpost-like style is good for the docs. Let's try to keep them brief. Second sentence doesn't add any meaning. Just say sth like \"torch.load can also dynamically remap tensors to a different device, using the map_location argument. Each serialized storage has a device tag associated with it, which uniquely identifies the device it was on. The builtin location tags are ...\"", "created_at": "2017-10-14T14:10:53Z", "updated_at": "2018-11-23T15:35:17Z", "html_url": "https://github.com/pytorch/pytorch/pull/3118#discussion_r144694877", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/3118", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/144694877"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/3118#discussion_r144694877"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/3118"}}, "body_html": "<p>I don't feel that this blogpost-like style is good for the docs. Let's try to keep them brief. Second sentence doesn't add any meaning. Just say sth like \"torch.load can also dynamically remap tensors to a different device, using the map_location argument. Each serialized storage has a device tag associated with it, which uniquely identifies the device it was on. The builtin location tags are ...\"</p>", "body_text": "I don't feel that this blogpost-like style is good for the docs. Let's try to keep them brief. Second sentence doesn't add any meaning. Just say sth like \"torch.load can also dynamically remap tensors to a different device, using the map_location argument. Each serialized storage has a device tag associated with it, which uniquely identifies the device it was on. The builtin location tags are ...\""}