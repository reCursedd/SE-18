{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/368626492", "html_url": "https://github.com/pytorch/pytorch/pull/5376#issuecomment-368626492", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/5376", "id": 368626492, "node_id": "MDEyOklzc3VlQ29tbWVudDM2ODYyNjQ5Mg==", "user": {"login": "lemairecarl", "id": 13444373, "node_id": "MDQ6VXNlcjEzNDQ0Mzcz", "avatar_url": "https://avatars3.githubusercontent.com/u/13444373?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lemairecarl", "html_url": "https://github.com/lemairecarl", "followers_url": "https://api.github.com/users/lemairecarl/followers", "following_url": "https://api.github.com/users/lemairecarl/following{/other_user}", "gists_url": "https://api.github.com/users/lemairecarl/gists{/gist_id}", "starred_url": "https://api.github.com/users/lemairecarl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lemairecarl/subscriptions", "organizations_url": "https://api.github.com/users/lemairecarl/orgs", "repos_url": "https://api.github.com/users/lemairecarl/repos", "events_url": "https://api.github.com/users/lemairecarl/events{/privacy}", "received_events_url": "https://api.github.com/users/lemairecarl/received_events", "type": "User", "site_admin": false}, "created_at": "2018-02-26T19:47:45Z", "updated_at": "2018-02-26T19:47:45Z", "author_association": "CONTRIBUTOR", "body_html": "<ol>\n<li>\n<p>You didn't mention exactly that. Do you mean we'll have something like <code>torch._C._cuda_getDeviceProperties(device)</code> and no method added to <code>torch.cuda</code>?</p>\n</li>\n<li>\n<p>I still can't get to return the <code>CudaDeviceProperties</code> other than by using pybind's <code>m.def(...)</code>. Here's what I've got:</p>\n<div class=\"highlight highlight-source-c\"><pre>PyObject * <span class=\"pl-en\">THCPModule_getDeviceProperties_wrap</span>(PyObject *self, PyObject *arg)\n{\n  ...\n\n  std::unique_ptr&lt;cudaDeviceProp&gt; <span class=\"pl-c1\">prop</span>(new cudaDeviceProp);\n  <span class=\"pl-c1\">THCudaCheck</span>(<span class=\"pl-c1\">cudaGetDeviceProperties</span>(prop.<span class=\"pl-c1\">get</span>(), device));\n\n  py::object pybind_object = <span class=\"pl-c1\">py::cast</span>(prop);\n  <span class=\"pl-k\">return</span> pybind_object.<span class=\"pl-c1\">ptr</span>();  <span class=\"pl-c\"><span class=\"pl-c\">//</span> get the PyObject *</span>\n  END_HANDLE_TH_ERRORS\n}</pre></div>\n<p>which won't compile for unclear reasons:</p>\n<pre><code>...pybind11/cast.h:1614:66: error: cannot bind \u2018const std::unique_ptr&lt;cudaDeviceProp&gt;\u2019 lvalue to \u2018std::unique_ptr&lt;cudaDeviceProp&gt;&amp;&amp;\u2019\n return reinterpret_steal&lt;object&gt;(detail::make_caster&lt;T&gt;::cast(value, policy, parent));\n</code></pre>\n</li>\n</ol>", "body_text": "You didn't mention exactly that. Do you mean we'll have something like torch._C._cuda_getDeviceProperties(device) and no method added to torch.cuda?\n\n\nI still can't get to return the CudaDeviceProperties other than by using pybind's m.def(...). Here's what I've got:\nPyObject * THCPModule_getDeviceProperties_wrap(PyObject *self, PyObject *arg)\n{\n  ...\n\n  std::unique_ptr<cudaDeviceProp> prop(new cudaDeviceProp);\n  THCudaCheck(cudaGetDeviceProperties(prop.get(), device));\n\n  py::object pybind_object = py::cast(prop);\n  return pybind_object.ptr();  // get the PyObject *\n  END_HANDLE_TH_ERRORS\n}\nwhich won't compile for unclear reasons:\n...pybind11/cast.h:1614:66: error: cannot bind \u2018const std::unique_ptr<cudaDeviceProp>\u2019 lvalue to \u2018std::unique_ptr<cudaDeviceProp>&&\u2019\n return reinterpret_steal<object>(detail::make_caster<T>::cast(value, policy, parent));", "body": "1. You didn't mention exactly that. Do you mean we'll have something like `torch._C._cuda_getDeviceProperties(device)` and no method added to `torch.cuda`?\r\n\r\n2. I still can't get to return the `CudaDeviceProperties` other than by using pybind's `m.def(...)`. Here's what I've got:\r\n    ```c\r\n    PyObject * THCPModule_getDeviceProperties_wrap(PyObject *self, PyObject *arg)\r\n    {\r\n      ...\r\n\r\n      std::unique_ptr<cudaDeviceProp> prop(new cudaDeviceProp);\r\n      THCudaCheck(cudaGetDeviceProperties(prop.get(), device));\r\n  \r\n      py::object pybind_object = py::cast(prop);\r\n      return pybind_object.ptr();  // get the PyObject *\r\n      END_HANDLE_TH_ERRORS\r\n    }\r\n    ```\r\n\r\n    which won't compile for unclear reasons:\r\n    ```\r\n    ...pybind11/cast.h:1614:66: error: cannot bind \u2018const std::unique_ptr<cudaDeviceProp>\u2019 lvalue to \u2018std::unique_ptr<cudaDeviceProp>&&\u2019\r\n     return reinterpret_steal<object>(detail::make_caster<T>::cast(value, policy, parent));\r\n    ```\r\n"}