{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/171039825", "pull_request_review_id": 99822903, "id": 171039825, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MTAzOTgyNQ==", "diff_hunk": "@@ -382,7 +383,28 @@ PyObject * THCPModule_initExtension(PyObject *self)\n   if (!THCPModule_initCuda(torch_module)) {\n     return NULL;\n   }\n-  Py_RETURN_NONE;\n+\n+  // Add class and method to torch.cuda\n+  auto m = py::handle(torch_module).cast<py::module>();\n+  py::class_<cudaDeviceProp>(m,\"_CudaDeviceProperties\")\n+    .def_readonly(\"name\", &cudaDeviceProp::name)\n+    .def_readonly(\"major\", &cudaDeviceProp::major)\n+    .def_readonly(\"minor\", &cudaDeviceProp::minor)\n+    .def_readonly(\"is_multi_gpu_board\", &cudaDeviceProp::isMultiGpuBoard)\n+    .def_readonly(\"is_integrated\", &cudaDeviceProp::integrated)\n+    .def_readonly(\"multi_processor_count\", &cudaDeviceProp::multiProcessorCount)\n+    .def_readonly(\"total_memory\", &cudaDeviceProp::totalGlobalMem)\n+    .def(\"__repr__\", [](const cudaDeviceProp &prop) {\n+      char repr[256];\n+      snprintf(repr, 256, \"_CudaDeviceProperties(name=\\\"%s\\\", major=%d, minor=%d, total_memory=%dMB, multi_processor_count=%d)\",", "path": "torch/csrc/cuda/Module.cpp", "position": null, "original_position": 26, "commit_id": "5d70e344ac0ea7eb543b08f9d56885a92f5ebc92", "original_commit_id": "b33381aa3ad7c40d80900e81cfc0d1cb7334d588", "user": {"login": "lemairecarl", "id": 13444373, "node_id": "MDQ6VXNlcjEzNDQ0Mzcz", "avatar_url": "https://avatars3.githubusercontent.com/u/13444373?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lemairecarl", "html_url": "https://github.com/lemairecarl", "followers_url": "https://api.github.com/users/lemairecarl/followers", "following_url": "https://api.github.com/users/lemairecarl/following{/other_user}", "gists_url": "https://api.github.com/users/lemairecarl/gists{/gist_id}", "starred_url": "https://api.github.com/users/lemairecarl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lemairecarl/subscriptions", "organizations_url": "https://api.github.com/users/lemairecarl/orgs", "repos_url": "https://api.github.com/users/lemairecarl/repos", "events_url": "https://api.github.com/users/lemairecarl/events{/privacy}", "received_events_url": "https://api.github.com/users/lemairecarl/received_events", "type": "User", "site_admin": false}, "body": "ok, wasn't sure if we wanted to include `stringstream` only for that. will change it.\r\n\r\nah, I wish C++ had `\"{}\".format()`... I prefer keeping the format and the data apart!", "created_at": "2018-02-27T19:30:24Z", "updated_at": "2018-11-23T15:40:04Z", "html_url": "https://github.com/pytorch/pytorch/pull/5376#discussion_r171039825", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/5376", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/171039825"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/5376#discussion_r171039825"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/5376"}}, "body_html": "<p>ok, wasn't sure if we wanted to include <code>stringstream</code> only for that. will change it.</p>\n<p>ah, I wish C++ had <code>\"{}\".format()</code>... I prefer keeping the format and the data apart!</p>", "body_text": "ok, wasn't sure if we wanted to include stringstream only for that. will change it.\nah, I wish C++ had \"{}\".format()... I prefer keeping the format and the data apart!", "in_reply_to_id": 171037500}