{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/368312662", "html_url": "https://github.com/pytorch/pytorch/pull/5376#issuecomment-368312662", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/5376", "id": 368312662, "node_id": "MDEyOklzc3VlQ29tbWVudDM2ODMxMjY2Mg==", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "created_at": "2018-02-25T14:16:03Z", "updated_at": "2018-02-25T14:16:03Z", "author_association": "MEMBER", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=13444373\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/lemairecarl\">@lemairecarl</a> I think the simplest way would be to use <code>pybind</code> to define a Python class for <code>cudaDeviceProp</code>, and then expose the fields as members. You can grep for <code>py::class_</code> to see example bindings we already have in our sources, and <code>pybind</code> has a fairly good manual in case you need to use anything more complicated.</p>", "body_text": "@lemairecarl I think the simplest way would be to use pybind to define a Python class for cudaDeviceProp, and then expose the fields as members. You can grep for py::class_ to see example bindings we already have in our sources, and pybind has a fairly good manual in case you need to use anything more complicated.", "body": "@lemairecarl I think the simplest way would be to use `pybind` to define a Python class for `cudaDeviceProp`, and then expose the fields as members. You can grep for `py::class_` to see example bindings we already have in our sources, and `pybind` has a fairly good manual in case you need to use anything more complicated."}