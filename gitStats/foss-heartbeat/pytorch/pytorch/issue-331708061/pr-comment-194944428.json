{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/194944428", "pull_request_review_id": 128213070, "id": 194944428, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDk0NDQyOA==", "diff_hunk": "@@ -0,0 +1,98 @@\n+#pragma once\n+\n+/**\n+ * To register your own tensor types, do in a header file:\n+ *   C10_DECLARE_TENSOR_TYPE(MY_TENSOR)\n+ * and in one (!) cpp file:\n+ *   C10_DEFINE_TENSOR_TYPE(MY_TENSOR)\n+ * Both must be in the same namespace.\n+ */\n+\n+#include \"caffe2/core/dispatch/TensorTypeId.h\"\n+#include \"caffe2/core/common.h\"\n+#include <atomic>\n+#include \"flat_hash_map/flat_hash_map.h\"\n+\n+namespace c10 {\n+\n+class TensorTypeIdCreator final {\n+public:\n+  TensorTypeIdCreator();\n+\n+  TensorTypeId create();\n+\n+  static constexpr TensorTypeId undefined() noexcept {\n+    return TensorTypeId(0);\n+  }\n+\n+private:\n+  std::atomic<details::_tensorTypeId_underlyingType> last_id_;\n+\n+  static constexpr TensorTypeId max_id_ = TensorTypeId(std::numeric_limits<details::_tensorTypeId_underlyingType>::max());\n+\n+    DISABLE_COPY_AND_ASSIGN(TensorTypeIdCreator);\n+};\n+\n+class TensorTypeIdRegistry final {\n+public:\n+  TensorTypeIdRegistry();\n+\n+  void registerId(TensorTypeId id);\n+  void deregisterId(TensorTypeId id);\n+\n+private:\n+  ska::flat_hash_set<TensorTypeId> registeredTypeIds_;\n+  std::mutex mutex_;\n+\n+  DISABLE_COPY_AND_ASSIGN(TensorTypeIdRegistry);\n+};\n+\n+class TensorTypeIds final {\n+public:\n+  static TensorTypeIds& singleton();\n+\n+  TensorTypeId createAndRegister();\n+  void deregister(TensorTypeId id);\n+\n+  static constexpr TensorTypeId undefined() noexcept;\n+\n+private:\n+  TensorTypeIds();\n+\n+  TensorTypeIdCreator creator_;\n+  TensorTypeIdRegistry registry_;\n+\n+    DISABLE_COPY_AND_ASSIGN(TensorTypeIds);\n+};\n+\n+inline constexpr TensorTypeId TensorTypeIds::undefined() noexcept {\n+  return TensorTypeIdCreator::undefined();\n+}\n+\n+class TensorTypeIdRegistrar final {\n+public:\n+  TensorTypeIdRegistrar();\n+  ~TensorTypeIdRegistrar();\n+\n+  TensorTypeId id() const noexcept;\n+\n+private:\n+  TensorTypeId id_;\n+\n+    DISABLE_COPY_AND_ASSIGN(TensorTypeIdRegistrar);\n+};\n+\n+inline TensorTypeId TensorTypeIdRegistrar::id() const noexcept {\n+  return id_;\n+}\n+\n+}  // namespace c10\n+\n+#define C10_DECLARE_TENSOR_TYPE(TensorName)                                      \\\n+  TensorTypeId TensorName();                                                     \\", "path": "caffe2/core/dispatch/TensorTypeIdRegistration.h", "position": 92, "original_position": 92, "commit_id": "e98041959adca7661a009c729d6a1699a81b19aa", "original_commit_id": "e412d966fa9b56ac481082cad9619b4528e30c2b", "user": {"login": "dzhulgakov", "id": 17890620, "node_id": "MDQ6VXNlcjE3ODkwNjIw", "avatar_url": "https://avatars2.githubusercontent.com/u/17890620?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dzhulgakov", "html_url": "https://github.com/dzhulgakov", "followers_url": "https://api.github.com/users/dzhulgakov/followers", "following_url": "https://api.github.com/users/dzhulgakov/following{/other_user}", "gists_url": "https://api.github.com/users/dzhulgakov/gists{/gist_id}", "starred_url": "https://api.github.com/users/dzhulgakov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dzhulgakov/subscriptions", "organizations_url": "https://api.github.com/users/dzhulgakov/orgs", "repos_url": "https://api.github.com/users/dzhulgakov/repos", "events_url": "https://api.github.com/users/dzhulgakov/events{/privacy}", "received_events_url": "https://api.github.com/users/dzhulgakov/received_events", "type": "User", "site_admin": false}, "body": "shouldn't it have some standard prefix?", "created_at": "2018-06-13T02:55:59Z", "updated_at": "2018-11-23T15:45:25Z", "html_url": "https://github.com/pytorch/pytorch/pull/8389#discussion_r194944428", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/8389", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/194944428"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/8389#discussion_r194944428"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/8389"}}, "body_html": "<p>shouldn't it have some standard prefix?</p>", "body_text": "shouldn't it have some standard prefix?"}