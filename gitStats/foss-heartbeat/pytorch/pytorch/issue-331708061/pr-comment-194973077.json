{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/194973077", "pull_request_review_id": 128246425, "id": 194973077, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDk3MzA3Nw==", "diff_hunk": "@@ -0,0 +1,32 @@\n+#pragma once\n+\n+#include \"caffe2/utils/IdWrapper.h\"\n+#include <string>\n+#include <iostream>\n+#include <mutex>\n+#include <unordered_set>\n+\n+namespace c10 {\n+\n+namespace details {\n+  using _tensorTypeId_underlyingType = uint8_t;", "path": "caffe2/core/dispatch/TensorTypeId.h", "position": 12, "original_position": 12, "commit_id": "e98041959adca7661a009c729d6a1699a81b19aa", "original_commit_id": "e412d966fa9b56ac481082cad9619b4528e30c2b", "user": {"login": "Yangqing", "id": 551151, "node_id": "MDQ6VXNlcjU1MTE1MQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/551151?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Yangqing", "html_url": "https://github.com/Yangqing", "followers_url": "https://api.github.com/users/Yangqing/followers", "following_url": "https://api.github.com/users/Yangqing/following{/other_user}", "gists_url": "https://api.github.com/users/Yangqing/gists{/gist_id}", "starred_url": "https://api.github.com/users/Yangqing/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Yangqing/subscriptions", "organizations_url": "https://api.github.com/users/Yangqing/orgs", "repos_url": "https://api.github.com/users/Yangqing/repos", "events_url": "https://api.github.com/users/Yangqing/events{/privacy}", "received_events_url": "https://api.github.com/users/Yangqing/received_events", "type": "User", "site_admin": false}, "body": "Just double checking, is it intended to capture just the device (aka, CPU, CUDA, ...), or device AND data type (aka, mapping the tuple (CPU, float) to a type id)?\r\n\r\nIf it is just device types, I agree with Dima that it should probably be an enum. The reason is that, we are going to be doing runtime registration with potentially an unset order, and as a result, since we need to do serialization, it is possible that people compare apples with oranges, for example comparing a DeviceType Enum with a dynamically allocated tensor type id.\r\n\r\nFor reading purposes, this is how Caffe2 defines devices with a protobuf enum and map them to names (for debugging purposes):\r\n\r\nhttps://github.com/pytorch/pytorch/blob/e5b997223ccbc50373e3c53f6bfe58fe9d4efc06/caffe2/utils/proto_utils.cc#L55-L81\r\nhttps://github.com/pytorch/pytorch/blob/e5b997223ccbc50373e3c53f6bfe58fe9d4efc06/caffe2/proto/caffe2.proto#L113-L124\r\n\r\nthis is how onnx defines device types with an enum and a map with names:\r\nhttps://github.com/pytorch/pytorch/blob/a2a28c0ef1d9a433972fe72fa5b0b9b850ccfcaf/caffe2/onnx/device.cc#L7-L10\r\n\r\nand this is how torch uses enum:\r\nhttps://github.com/pytorch/pytorch/blob/749d51414af11da48bdb195375f702822450aded/torch/csrc/utils/device.h#L7\r\n\r\nNote that the enum value assignment and the actual implementation can be separate: for example you can have a CUDA enum value defined but you do not have to have cuda built in.\r\n", "created_at": "2018-06-13T06:55:26Z", "updated_at": "2018-11-23T15:45:25Z", "html_url": "https://github.com/pytorch/pytorch/pull/8389#discussion_r194973077", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/8389", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/194973077"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/8389#discussion_r194973077"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/8389"}}, "body_html": "<p>Just double checking, is it intended to capture just the device (aka, CPU, CUDA, ...), or device AND data type (aka, mapping the tuple (CPU, float) to a type id)?</p>\n<p>If it is just device types, I agree with Dima that it should probably be an enum. The reason is that, we are going to be doing runtime registration with potentially an unset order, and as a result, since we need to do serialization, it is possible that people compare apples with oranges, for example comparing a DeviceType Enum with a dynamically allocated tensor type id.</p>\n<p>For reading purposes, this is how Caffe2 defines devices with a protobuf enum and map them to names (for debugging purposes):</p>\n<p><div class=\"border rounded-1 my-2\">\n  <div class=\"f6 px-3 py-2 lh-condensed border-bottom bg-gray-light\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/pytorch/pytorch/blob/e5b997223ccbc50373e3c53f6bfe58fe9d4efc06/caffe2/utils/proto_utils.cc#L55-L81\">pytorch/caffe2/utils/proto_utils.cc</a>\n    </p>\n    <p class=\"mb-0 text-gray-light\">\n        Lines 55 to 81\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/pytorch/pytorch/commit/e5b997223ccbc50373e3c53f6bfe58fe9d4efc06\">e5b9972</a>\n    </p>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L55\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"55\"></td>\n          <td id=\"LC55\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> std::string <span class=\"pl-en\">DeviceTypeName</span>(<span class=\"pl-k\">const</span> <span class=\"pl-c1\">int32_t</span>&amp; d) { </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L56\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"56\"></td>\n          <td id=\"LC56\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   <span class=\"pl-k\">switch</span> (d) { </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L57\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"57\"></td>\n          <td id=\"LC57\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     <span class=\"pl-k\">case</span> CPU: </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L58\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"58\"></td>\n          <td id=\"LC58\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">       <span class=\"pl-k\">return</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>CPU<span class=\"pl-pds\">\"</span></span>; </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L59\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"59\"></td>\n          <td id=\"LC59\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     <span class=\"pl-k\">case</span> CUDA: </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L60\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"60\"></td>\n          <td id=\"LC60\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">       <span class=\"pl-k\">return</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>CUDA<span class=\"pl-pds\">\"</span></span>; </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L61\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"61\"></td>\n          <td id=\"LC61\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     <span class=\"pl-k\">case</span> OPENGL: </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L62\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"62\"></td>\n          <td id=\"LC62\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">       <span class=\"pl-k\">return</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>OPENGL<span class=\"pl-pds\">\"</span></span>; </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L63\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"63\"></td>\n          <td id=\"LC63\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     <span class=\"pl-k\">case</span> OPENCL: </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L64\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"64\"></td>\n          <td id=\"LC64\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">       <span class=\"pl-k\">return</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>OPENCL<span class=\"pl-pds\">\"</span></span>; </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L65\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"65\"></td>\n          <td id=\"LC65\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     <span class=\"pl-k\">case</span> MKLDNN: </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L66\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"66\"></td>\n          <td id=\"LC66\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">       <span class=\"pl-k\">return</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>MKLDNN<span class=\"pl-pds\">\"</span></span>; </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L67\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"67\"></td>\n          <td id=\"LC67\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     <span class=\"pl-k\">case</span> IDEEP: </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L68\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"68\"></td>\n          <td id=\"LC68\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">       <span class=\"pl-k\">return</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>IDEEP<span class=\"pl-pds\">\"</span></span>; </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L69\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"69\"></td>\n          <td id=\"LC69\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     <span class=\"pl-k\">case</span> HIP: </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L70\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"70\"></td>\n          <td id=\"LC70\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">       <span class=\"pl-k\">return</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>HIP<span class=\"pl-pds\">\"</span></span>; </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L71\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"71\"></td>\n          <td id=\"LC71\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     <span class=\"pl-k\">default</span>: </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L72\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"72\"></td>\n          <td id=\"LC72\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">       <span class=\"pl-c1\">CAFFE_THROW</span>( </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L73\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"73\"></td>\n          <td id=\"LC73\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">           <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Unknown device: <span class=\"pl-pds\">\"</span></span>, </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L74\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"74\"></td>\n          <td id=\"LC74\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">           d, </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L75\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"75\"></td>\n          <td id=\"LC75\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">           <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>. If you have recently updated the caffe2.proto file to add a new <span class=\"pl-pds\">\"</span></span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L76\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"76\"></td>\n          <td id=\"LC76\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">           <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>device type, did you forget to update the DeviceTypeName() <span class=\"pl-pds\">\"</span></span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L77\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"77\"></td>\n          <td id=\"LC77\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">           <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>function to reflect such recent changes?<span class=\"pl-pds\">\"</span></span>); </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L78\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"78\"></td>\n          <td id=\"LC78\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">       <span class=\"pl-c\"><span class=\"pl-c\">//</span> The below code won't run but is needed to suppress some compiler</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L79\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"79\"></td>\n          <td id=\"LC79\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">       <span class=\"pl-c\"><span class=\"pl-c\">//</span> warnings.</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L80\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"80\"></td>\n          <td id=\"LC80\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">       <span class=\"pl-k\">return</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"pl-pds\">\"</span></span>; </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L81\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"81\"></td>\n          <td id=\"LC81\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   } </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n<br>\n<div class=\"border rounded-1 my-2\">\n  <div class=\"f6 px-3 py-2 lh-condensed border-bottom bg-gray-light\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/pytorch/pytorch/blob/e5b997223ccbc50373e3c53f6bfe58fe9d4efc06/caffe2/proto/caffe2.proto#L113-L124\">pytorch/caffe2/proto/caffe2.proto</a>\n    </p>\n    <p class=\"mb-0 text-gray-light\">\n        Lines 113 to 124\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/pytorch/pytorch/commit/e5b997223ccbc50373e3c53f6bfe58fe9d4efc06\">e5b9972</a>\n    </p>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L113\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"113\"></td>\n          <td id=\"LC113\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-k\">enum</span> <span class=\"pl-en\">DeviceType</span> { </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L114\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"114\"></td>\n          <td id=\"LC114\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   <span class=\"pl-c1\">CPU</span> = <span class=\"pl-c1\">0</span>;                    <span class=\"pl-c\">// In default, we will use CPU.</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L115\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"115\"></td>\n          <td id=\"LC115\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   <span class=\"pl-c1\">CUDA</span> = <span class=\"pl-c1\">1</span>;                   <span class=\"pl-c\">// CUDA.</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L116\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"116\"></td>\n          <td id=\"LC116\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   <span class=\"pl-c1\">MKLDNN</span> = <span class=\"pl-c1\">2</span>;                 <span class=\"pl-c\">// Reserved for explicit MKLDNN</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L117\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"117\"></td>\n          <td id=\"LC117\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   <span class=\"pl-c1\">OPENGL</span> = <span class=\"pl-c1\">3</span>;                 <span class=\"pl-c\">// OpenGL</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L118\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"118\"></td>\n          <td id=\"LC118\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   <span class=\"pl-c1\">OPENCL</span> = <span class=\"pl-c1\">4</span>;                 <span class=\"pl-c\">// OpenCL</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L119\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"119\"></td>\n          <td id=\"LC119\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   <span class=\"pl-c1\">IDEEP</span> = <span class=\"pl-c1\">5</span>;                  <span class=\"pl-c\">// IDEEP.</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L120\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"120\"></td>\n          <td id=\"LC120\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   <span class=\"pl-c1\">HIP</span> = <span class=\"pl-c1\">6</span>;                    <span class=\"pl-c\">// AMD HIP</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L121\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"121\"></td>\n          <td id=\"LC121\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   <span class=\"pl-c\">// Change the following number if you add more devices in the code.</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L122\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"122\"></td>\n          <td id=\"LC122\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   <span class=\"pl-c1\">COMPILE_TIME_MAX_DEVICE_TYPES</span> = <span class=\"pl-c1\">7</span>; </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L123\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"123\"></td>\n          <td id=\"LC123\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   <span class=\"pl-c1\">ONLY_FOR_TEST</span> = <span class=\"pl-c1\">20901701</span>;   <span class=\"pl-c\">// This device type is only for test.</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L124\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"124\"></td>\n          <td id=\"LC124\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> } </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n</p>\n<p>this is how onnx defines device types with an enum and a map with names:<br>\n<div class=\"border rounded-1 my-2\">\n  <div class=\"f6 px-3 py-2 lh-condensed border-bottom bg-gray-light\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/pytorch/pytorch/blob/a2a28c0ef1d9a433972fe72fa5b0b9b850ccfcaf/caffe2/onnx/device.cc#L7-L10\">pytorch/caffe2/onnx/device.cc</a>\n    </p>\n    <p class=\"mb-0 text-gray-light\">\n        Lines 7 to 10\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/pytorch/pytorch/commit/a2a28c0ef1d9a433972fe72fa5b0b9b850ccfcaf\">a2a28c0</a>\n    </p>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L7\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"7\"></td>\n          <td id=\"LC7\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-k\">static</span> <span class=\"pl-k\">const</span> std::unordered_map&lt;std::string, DeviceType&gt; <span class=\"pl-c1\">kDeviceMap</span> = { </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L8\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"8\"></td>\n          <td id=\"LC8\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   {<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>CPU<span class=\"pl-pds\">\"</span></span>, DeviceType::CPU}, </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L9\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"9\"></td>\n          <td id=\"LC9\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   {<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>CUDA<span class=\"pl-pds\">\"</span></span>, DeviceType::CUDA} </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L10\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"10\"></td>\n          <td id=\"LC10\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> }; </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n</p>\n<p>and this is how torch uses enum:<br>\n<div class=\"border rounded-1 my-2\">\n  <div class=\"f6 px-3 py-2 lh-condensed border-bottom bg-gray-light\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/pytorch/pytorch/blob/749d51414af11da48bdb195375f702822450aded/torch/csrc/utils/device.h#L7\">pytorch/torch/csrc/utils/device.h</a>\n    </p>\n    <p class=\"mb-0 text-gray-light\">\n         Line 7\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/pytorch/pytorch/commit/749d51414af11da48bdb195375f702822450aded\">749d514</a>\n    </p>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L7\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"7\"></td>\n          <td id=\"LC7\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-k\">enum</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">DeviceType</span> {CPU=<span class=\"pl-c1\">0</span>, CUDA=<span class=\"pl-c1\">1</span>}; </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n</p>\n<p>Note that the enum value assignment and the actual implementation can be separate: for example you can have a CUDA enum value defined but you do not have to have cuda built in.</p>", "body_text": "Just double checking, is it intended to capture just the device (aka, CPU, CUDA, ...), or device AND data type (aka, mapping the tuple (CPU, float) to a type id)?\nIf it is just device types, I agree with Dima that it should probably be an enum. The reason is that, we are going to be doing runtime registration with potentially an unset order, and as a result, since we need to do serialization, it is possible that people compare apples with oranges, for example comparing a DeviceType Enum with a dynamically allocated tensor type id.\nFor reading purposes, this is how Caffe2 defines devices with a protobuf enum and map them to names (for debugging purposes):\n\n  \n    \n      pytorch/caffe2/utils/proto_utils.cc\n    \n    \n        Lines 55 to 81\n      in\n      e5b9972\n    \n    \n    \n    \n\n        \n          \n           std::string DeviceTypeName(const int32_t& d) { \n        \n\n        \n          \n             switch (d) { \n        \n\n        \n          \n               case CPU: \n        \n\n        \n          \n                 return \"CPU\"; \n        \n\n        \n          \n               case CUDA: \n        \n\n        \n          \n                 return \"CUDA\"; \n        \n\n        \n          \n               case OPENGL: \n        \n\n        \n          \n                 return \"OPENGL\"; \n        \n\n        \n          \n               case OPENCL: \n        \n\n        \n          \n                 return \"OPENCL\"; \n        \n\n        \n          \n               case MKLDNN: \n        \n\n        \n          \n                 return \"MKLDNN\"; \n        \n\n        \n          \n               case IDEEP: \n        \n\n        \n          \n                 return \"IDEEP\"; \n        \n\n        \n          \n               case HIP: \n        \n\n        \n          \n                 return \"HIP\"; \n        \n\n        \n          \n               default: \n        \n\n        \n          \n                 CAFFE_THROW( \n        \n\n        \n          \n                     \"Unknown device: \", \n        \n\n        \n          \n                     d, \n        \n\n        \n          \n                     \". If you have recently updated the caffe2.proto file to add a new \" \n        \n\n        \n          \n                     \"device type, did you forget to update the DeviceTypeName() \" \n        \n\n        \n          \n                     \"function to reflect such recent changes?\"); \n        \n\n        \n          \n                 // The below code won't run but is needed to suppress some compiler \n        \n\n        \n          \n                 // warnings. \n        \n\n        \n          \n                 return \"\"; \n        \n\n        \n          \n             } \n        \n    \n  \n\n\n\n  \n    \n      pytorch/caffe2/proto/caffe2.proto\n    \n    \n        Lines 113 to 124\n      in\n      e5b9972\n    \n    \n    \n    \n\n        \n          \n           enum DeviceType { \n        \n\n        \n          \n             CPU = 0;                    // In default, we will use CPU. \n        \n\n        \n          \n             CUDA = 1;                   // CUDA. \n        \n\n        \n          \n             MKLDNN = 2;                 // Reserved for explicit MKLDNN \n        \n\n        \n          \n             OPENGL = 3;                 // OpenGL \n        \n\n        \n          \n             OPENCL = 4;                 // OpenCL \n        \n\n        \n          \n             IDEEP = 5;                  // IDEEP. \n        \n\n        \n          \n             HIP = 6;                    // AMD HIP \n        \n\n        \n          \n             // Change the following number if you add more devices in the code. \n        \n\n        \n          \n             COMPILE_TIME_MAX_DEVICE_TYPES = 7; \n        \n\n        \n          \n             ONLY_FOR_TEST = 20901701;   // This device type is only for test. \n        \n\n        \n          \n           } \n        \n    \n  \n\n\nthis is how onnx defines device types with an enum and a map with names:\n\n  \n    \n      pytorch/caffe2/onnx/device.cc\n    \n    \n        Lines 7 to 10\n      in\n      a2a28c0\n    \n    \n    \n    \n\n        \n          \n           static const std::unordered_map<std::string, DeviceType> kDeviceMap = { \n        \n\n        \n          \n             {\"CPU\", DeviceType::CPU}, \n        \n\n        \n          \n             {\"CUDA\", DeviceType::CUDA} \n        \n\n        \n          \n           }; \n        \n    \n  \n\n\nand this is how torch uses enum:\n\n  \n    \n      pytorch/torch/csrc/utils/device.h\n    \n    \n         Line 7\n      in\n      749d514\n    \n    \n    \n    \n\n        \n          \n           enum class DeviceType {CPU=0, CUDA=1}; \n        \n    \n  \n\n\nNote that the enum value assignment and the actual implementation can be separate: for example you can have a CUDA enum value defined but you do not have to have cuda built in.", "in_reply_to_id": 194944376}