{"url": "https://api.github.com/repos/pytorch/pytorch/issues/14231", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/14231/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/14231/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/14231/events", "html_url": "https://github.com/pytorch/pytorch/issues/14231", "id": 382774972, "node_id": "MDU6SXNzdWUzODI3NzQ5NzI=", "number": 14231, "title": "`index_select` on flat tensor faster than integer array indexing, even including reshaping", "user": {"login": "gngdb", "id": 1110259, "node_id": "MDQ6VXNlcjExMTAyNTk=", "avatar_url": "https://avatars1.githubusercontent.com/u/1110259?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gngdb", "html_url": "https://github.com/gngdb", "followers_url": "https://api.github.com/users/gngdb/followers", "following_url": "https://api.github.com/users/gngdb/following{/other_user}", "gists_url": "https://api.github.com/users/gngdb/gists{/gist_id}", "starred_url": "https://api.github.com/users/gngdb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gngdb/subscriptions", "organizations_url": "https://api.github.com/users/gngdb/orgs", "repos_url": "https://api.github.com/users/gngdb/repos", "events_url": "https://api.github.com/users/gngdb/events{/privacy}", "received_events_url": "https://api.github.com/users/gngdb/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-11-20T17:35:05Z", "updated_at": "2018-11-20T19:33:46Z", "closed_at": null, "author_association": "CONTRIBUTOR", "body_html": "<h2><g-emoji class=\"g-emoji\" alias=\"bug\" fallback-src=\"https://assets-cdn.github.com/images/icons/emoji/unicode/1f41b.png\">\ud83d\udc1b</g-emoji> Bug</h2>\n<p>Integer array indexing appears to be slower than applying <code>index_select</code> to the flattened tensor, using flattened indexes, and then reshaping to the expected output size.</p>\n<h2>To Reproduce</h2>\n<p>Reproduced in this gist: <a href=\"https://gist.github.com/gngdb/3d4f5aa27ee5199b0d4b997ffe21a6b4\">https://gist.github.com/gngdb/3d4f5aa27ee5199b0d4b997ffe21a6b4</a></p>\n<h2>Expected behavior</h2>\n<p>If this is a faster way to implement integer array indexing, it should be the default. It might not be though, there are other uses for integer array indexing where this speed difference might not hold.</p>\n<h2>Environment</h2>\n<p>PyTorch version: 0.4.1.post2<br>\nIs debug build: No<br>\nCUDA used to build PyTorch: 9.0.176</p>\n<p>OS: Scientific Linux release 7.5 (Nitrogen)<br>\nGCC version: (GCC) 4.8.5 20150623 (Red Hat 4.8.5-28)<br>\nCMake version: version 2.8.12.2</p>\n<p>Python version: 3.6<br>\nIs CUDA available: Yes<br>\nCUDA runtime version: 8.0.44<br>\nGPU models and configuration:<br>\nGPU 0: TITAN X (Pascal)<br>\nGPU 1: TITAN X (Pascal)<br>\nGPU 2: TITAN X (Pascal)<br>\nGPU 3: TITAN X (Pascal)</p>\n<p>Nvidia driver version: 390.87<br>\ncuDNN version: Could not collect</p>\n<p>Versions of relevant libraries:<br>\n[pip] numpy (1.15.2)<br>\n[pip] torch (0.4.1.post2)<br>\n[pip] torchvision (0.2.1)<br>\n[conda] pytorch                   0.4.1           py36_py35_py27__9.0.176_7.1.2_2    pytorch<br>\n[conda] torchvision               0.2.1                    py36_1    pytorch</p>", "body_text": "\ud83d\udc1b Bug\nInteger array indexing appears to be slower than applying index_select to the flattened tensor, using flattened indexes, and then reshaping to the expected output size.\nTo Reproduce\nReproduced in this gist: https://gist.github.com/gngdb/3d4f5aa27ee5199b0d4b997ffe21a6b4\nExpected behavior\nIf this is a faster way to implement integer array indexing, it should be the default. It might not be though, there are other uses for integer array indexing where this speed difference might not hold.\nEnvironment\nPyTorch version: 0.4.1.post2\nIs debug build: No\nCUDA used to build PyTorch: 9.0.176\nOS: Scientific Linux release 7.5 (Nitrogen)\nGCC version: (GCC) 4.8.5 20150623 (Red Hat 4.8.5-28)\nCMake version: version 2.8.12.2\nPython version: 3.6\nIs CUDA available: Yes\nCUDA runtime version: 8.0.44\nGPU models and configuration:\nGPU 0: TITAN X (Pascal)\nGPU 1: TITAN X (Pascal)\nGPU 2: TITAN X (Pascal)\nGPU 3: TITAN X (Pascal)\nNvidia driver version: 390.87\ncuDNN version: Could not collect\nVersions of relevant libraries:\n[pip] numpy (1.15.2)\n[pip] torch (0.4.1.post2)\n[pip] torchvision (0.2.1)\n[conda] pytorch                   0.4.1           py36_py35_py27__9.0.176_7.1.2_2    pytorch\n[conda] torchvision               0.2.1                    py36_1    pytorch", "body": "## \ud83d\udc1b Bug\r\n\r\nInteger array indexing appears to be slower than applying `index_select` to the flattened tensor, using flattened indexes, and then reshaping to the expected output size.\r\n\r\n## To Reproduce\r\n\r\nReproduced in this gist: https://gist.github.com/gngdb/3d4f5aa27ee5199b0d4b997ffe21a6b4\r\n\r\n## Expected behavior\r\n\r\nIf this is a faster way to implement integer array indexing, it should be the default. It might not be though, there are other uses for integer array indexing where this speed difference might not hold.\r\n\r\n## Environment\r\n\r\nPyTorch version: 0.4.1.post2\r\nIs debug build: No\r\nCUDA used to build PyTorch: 9.0.176\r\n\r\nOS: Scientific Linux release 7.5 (Nitrogen)\r\nGCC version: (GCC) 4.8.5 20150623 (Red Hat 4.8.5-28)\r\nCMake version: version 2.8.12.2\r\n\r\nPython version: 3.6\r\nIs CUDA available: Yes\r\nCUDA runtime version: 8.0.44\r\nGPU models and configuration: \r\nGPU 0: TITAN X (Pascal)\r\nGPU 1: TITAN X (Pascal)\r\nGPU 2: TITAN X (Pascal)\r\nGPU 3: TITAN X (Pascal)\r\n\r\nNvidia driver version: 390.87\r\ncuDNN version: Could not collect\r\n\r\nVersions of relevant libraries:\r\n[pip] numpy (1.15.2)\r\n[pip] torch (0.4.1.post2)\r\n[pip] torchvision (0.2.1)\r\n[conda] pytorch                   0.4.1           py36_py35_py27__9.0.176_7.1.2_2    pytorch\r\n[conda] torchvision               0.2.1                    py36_1    pytorch"}