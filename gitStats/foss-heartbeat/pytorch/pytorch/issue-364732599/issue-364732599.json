{"url": "https://api.github.com/repos/pytorch/pytorch/issues/12156", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/12156/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/12156/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/12156/events", "html_url": "https://github.com/pytorch/pytorch/issues/12156", "id": 364732599, "node_id": "MDU6SXNzdWUzNjQ3MzI1OTk=", "number": 12156, "title": "Unmatched behavior of numpy and pytorch on indexing with a list of bool value.", "user": {"login": "ruotianluo", "id": 16023153, "node_id": "MDQ6VXNlcjE2MDIzMTUz", "avatar_url": "https://avatars2.githubusercontent.com/u/16023153?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ruotianluo", "html_url": "https://github.com/ruotianluo", "followers_url": "https://api.github.com/users/ruotianluo/followers", "following_url": "https://api.github.com/users/ruotianluo/following{/other_user}", "gists_url": "https://api.github.com/users/ruotianluo/gists{/gist_id}", "starred_url": "https://api.github.com/users/ruotianluo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ruotianluo/subscriptions", "organizations_url": "https://api.github.com/users/ruotianluo/orgs", "repos_url": "https://api.github.com/users/ruotianluo/repos", "events_url": "https://api.github.com/users/ruotianluo/events{/privacy}", "received_events_url": "https://api.github.com/users/ruotianluo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-09-28T03:57:09Z", "updated_at": "2018-10-01T17:35:16Z", "closed_at": "2018-10-01T17:35:15Z", "author_association": "CONTRIBUTOR", "body_html": "<h2><g-emoji class=\"g-emoji\" alias=\"bug\" fallback-src=\"https://assets-cdn.github.com/images/icons/emoji/unicode/1f41b.png\">\ud83d\udc1b</g-emoji> Bug</h2>\n<p>Unmatched behavior of numpy and pytorch on indexing with a list of bool value.</p>\n<h2>To Reproduce</h2>\n<pre><code>import torch\nx = torch.randn(3,4)\nprint(x[[True,False,True]])\nprint(x.numpy()[[True, False, True]])\n</code></pre>\n<p>With output</p>\n<pre><code>&gt;&gt;&gt; import torch\n&gt;&gt;&gt; x = torch.randn(3,4)\n&gt;&gt;&gt; x[[True,False,True]]\ntensor([[ 0.9176,  0.6378,  1.1367, -1.3373],\n        [ 0.4389,  0.2105, -0.7689, -0.5038],\n        [ 0.9176,  0.6378,  1.1367, -1.3373]])\n&gt;&gt;&gt; x.numpy()[[True, False, True]]\narray([[ 0.43885437,  0.21049356, -0.76887   , -0.5038339 ],\n       [-0.7998242 ,  0.7215161 ,  0.5523575 , -1.6851963 ]],\n      dtype=float32)\n</code></pre>\n<h2>Expected behavior</h2>\n<p>pytorch should behave the same as tensor.</p>\n<p>In fact, indexing with byte tensor works:<br>\n<code>x[torch.Tensor([True,False,True]).byte()]</code> works</p>\n<h2>Environment</h2>\n<p>Collecting environment information...<br>\nPyTorch version: 1.0.0a0+7df6650<br>\nIs debug build: No<br>\nCUDA used to build PyTorch: 9.0.176</p>\n<p>OS: Ubuntu 16.04.3 LTS<br>\nGCC version: (Ubuntu 5.4.0-6ubuntu1~16.04.5) 5.4.0 20160609<br>\nCMake version: version 3.12.0</p>\n<p>Python version: 3.6<br>\nIs CUDA available: Yes<br>\nCUDA runtime version: 9.0.176<br>\nGPU models and configuration:<br>\nGPU 0: Tesla K40c<br>\nGPU 1: Tesla K40c</p>\n<p>Nvidia driver version: 390.25<br>\ncuDNN version: Probably one of the following:<br>\n/usr/lib/x86_64-linux-gnu/libcudnn.so.7.0.5<br>\n/usr/lib/x86_64-linux-gnu/libcudnn_static_v7.a</p>\n<p>Versions of relevant libraries:<br>\n[pip] numpy (1.15.0)<br>\n[pip] numpydoc (0.7.0)<br>\n[pip] torch (1.0.0a0+7df6650)<br>\n[pip] torchtext (0.2.1)<br>\n[pip] torchvision (0.2.1)<br>\n[conda] magma-cuda90              2.3.0                         1    pytorch<br>\n[conda] torch                     0.5.0a0+6f6a1f2           <br>\n[conda] torch                     0.5.0a0+c425d03           <br>\n[conda] torch                     0.5.0a0+d2f98fc           <br>\n[conda] torch                     0.5.0a0+2f311be           <br>\n[conda] torch                     1.0.0a0+7df6650           <br>\n[conda] torchtext                 0.2.1                     <br>\n[conda] torchvision               0.2.1                     </p>", "body_text": "\ud83d\udc1b Bug\nUnmatched behavior of numpy and pytorch on indexing with a list of bool value.\nTo Reproduce\nimport torch\nx = torch.randn(3,4)\nprint(x[[True,False,True]])\nprint(x.numpy()[[True, False, True]])\n\nWith output\n>>> import torch\n>>> x = torch.randn(3,4)\n>>> x[[True,False,True]]\ntensor([[ 0.9176,  0.6378,  1.1367, -1.3373],\n        [ 0.4389,  0.2105, -0.7689, -0.5038],\n        [ 0.9176,  0.6378,  1.1367, -1.3373]])\n>>> x.numpy()[[True, False, True]]\narray([[ 0.43885437,  0.21049356, -0.76887   , -0.5038339 ],\n       [-0.7998242 ,  0.7215161 ,  0.5523575 , -1.6851963 ]],\n      dtype=float32)\n\nExpected behavior\npytorch should behave the same as tensor.\nIn fact, indexing with byte tensor works:\nx[torch.Tensor([True,False,True]).byte()] works\nEnvironment\nCollecting environment information...\nPyTorch version: 1.0.0a0+7df6650\nIs debug build: No\nCUDA used to build PyTorch: 9.0.176\nOS: Ubuntu 16.04.3 LTS\nGCC version: (Ubuntu 5.4.0-6ubuntu1~16.04.5) 5.4.0 20160609\nCMake version: version 3.12.0\nPython version: 3.6\nIs CUDA available: Yes\nCUDA runtime version: 9.0.176\nGPU models and configuration:\nGPU 0: Tesla K40c\nGPU 1: Tesla K40c\nNvidia driver version: 390.25\ncuDNN version: Probably one of the following:\n/usr/lib/x86_64-linux-gnu/libcudnn.so.7.0.5\n/usr/lib/x86_64-linux-gnu/libcudnn_static_v7.a\nVersions of relevant libraries:\n[pip] numpy (1.15.0)\n[pip] numpydoc (0.7.0)\n[pip] torch (1.0.0a0+7df6650)\n[pip] torchtext (0.2.1)\n[pip] torchvision (0.2.1)\n[conda] magma-cuda90              2.3.0                         1    pytorch\n[conda] torch                     0.5.0a0+6f6a1f2           \n[conda] torch                     0.5.0a0+c425d03           \n[conda] torch                     0.5.0a0+d2f98fc           \n[conda] torch                     0.5.0a0+2f311be           \n[conda] torch                     1.0.0a0+7df6650           \n[conda] torchtext                 0.2.1                     \n[conda] torchvision               0.2.1", "body": "## \ud83d\udc1b Bug\r\n\r\nUnmatched behavior of numpy and pytorch on indexing with a list of bool value.\r\n\r\n## To Reproduce\r\n\r\n```\r\nimport torch\r\nx = torch.randn(3,4)\r\nprint(x[[True,False,True]])\r\nprint(x.numpy()[[True, False, True]])\r\n```\r\n\r\nWith output\r\n\r\n```\r\n>>> import torch\r\n>>> x = torch.randn(3,4)\r\n>>> x[[True,False,True]]\r\ntensor([[ 0.9176,  0.6378,  1.1367, -1.3373],\r\n        [ 0.4389,  0.2105, -0.7689, -0.5038],\r\n        [ 0.9176,  0.6378,  1.1367, -1.3373]])\r\n>>> x.numpy()[[True, False, True]]\r\narray([[ 0.43885437,  0.21049356, -0.76887   , -0.5038339 ],\r\n       [-0.7998242 ,  0.7215161 ,  0.5523575 , -1.6851963 ]],\r\n      dtype=float32)\r\n```\r\n\r\n## Expected behavior\r\n\r\npytorch should behave the same as tensor.\r\n\r\nIn fact, indexing with byte tensor works:\r\n`x[torch.Tensor([True,False,True]).byte()]` works\r\n\r\n## Environment\r\nCollecting environment information...\r\nPyTorch version: 1.0.0a0+7df6650\r\nIs debug build: No\r\nCUDA used to build PyTorch: 9.0.176\r\n\r\nOS: Ubuntu 16.04.3 LTS\r\nGCC version: (Ubuntu 5.4.0-6ubuntu1~16.04.5) 5.4.0 20160609\r\nCMake version: version 3.12.0\r\n\r\nPython version: 3.6\r\nIs CUDA available: Yes\r\nCUDA runtime version: 9.0.176\r\nGPU models and configuration:\r\nGPU 0: Tesla K40c\r\nGPU 1: Tesla K40c\r\n\r\nNvidia driver version: 390.25\r\ncuDNN version: Probably one of the following:\r\n/usr/lib/x86_64-linux-gnu/libcudnn.so.7.0.5\r\n/usr/lib/x86_64-linux-gnu/libcudnn_static_v7.a\r\n\r\nVersions of relevant libraries:\r\n[pip] numpy (1.15.0)\r\n[pip] numpydoc (0.7.0)\r\n[pip] torch (1.0.0a0+7df6650)\r\n[pip] torchtext (0.2.1)\r\n[pip] torchvision (0.2.1)\r\n[conda] magma-cuda90              2.3.0                         1    pytorch\r\n[conda] torch                     0.5.0a0+6f6a1f2           <pip>\r\n[conda] torch                     0.5.0a0+c425d03           <pip>\r\n[conda] torch                     0.5.0a0+d2f98fc           <pip>\r\n[conda] torch                     0.5.0a0+2f311be           <pip>\r\n[conda] torch                     1.0.0a0+7df6650           <pip>\r\n[conda] torchtext                 0.2.1                     <pip>\r\n[conda] torchvision               0.2.1                     <pip>\r\n"}