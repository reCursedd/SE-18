{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/83688523", "pull_request_review_id": 4515832, "id": 83688523, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgzNjg4NTIz", "diff_hunk": "@@ -0,0 +1,242 @@\n+import math\n+import torch\n+from torch.autograd import Variable\n+\n+from ..module import Module\n+\n+class RNN(Module):\n+    \"\"\"An Elman RNN cell with tanh linearity.\n+    ```\n+    h' = tanh(w_ih * x + b_ih  +  w_hh * h + b_hh)\n+    ```\n+\n+    Args:\n+        input_size: The number of expected features in the input x\n+        hidden_size: The number of features in the hidden state h\n+        bias: If False, then the layer does not use bias weights b_ih and b_hh (default=True).\n+    Input: input, h\n+        input: A (batch x input_size) tensor containing input features\n+        hidden: A (batch x hidden_size) tensor containing the initial hidden state for each element in the batch.\n+    Output: h'\n+        h': A (batch x hidden_size) tensor containing the next hidden state for each element in the batch\n+    Members:\n+        weight_ih: the learnable input-hidden weights, of shape (input_size x hidden_size)\n+        weight_hh: the learnable hidden-hidden weights, of shape (hidden_size x hidden_size)\n+        bias_ih: the learnable input-hidden bias, of shape (hidden_size)\n+        bias_hh: the learnable hidden-hidden bias, of shape (hidden_size)\n+    Examples:\n+        >>> rnn = nn.rnn.cell.RNN(10, 20)\n+        >>> input = Variable(torch.randn(6, 3, 10))\n+        >>> hx = Variable(torch.randn(3, 20))\n+        >>> output = []\n+        >>> for i in range(6):\n+        ...     output[i] = hx = rnn(input, hx)\n+    \"\"\"\n+\n+    def __init__(self, input_size, hidden_size, bias=True):\n+        self.input_size = input_size\n+        self.hidden_size = hidden_size\n+        self.bias = bias\n+\n+        super(RNN, self).__init__(\n+            weight_ih = torch.Tensor(hidden_size, input_size),\n+            weight_hh = torch.Tensor(hidden_size, hidden_size),\n+            bias_ih = torch.Tensor(hidden_size) if bias else None,\n+            bias_hh = torch.Tensor(hidden_size) if bias else None,\n+        )\n+\n+        self.reset_parameters()\n+\n+    def reset_parameters(self):\n+        stdv = 1.0 / math.sqrt(self.hidden_size)\n+        for weight in self.parameters():\n+            weight.data.uniform_(-stdv, stdv)\n+\n+", "path": "torch/nn/modules/rnn/cell.py", "position": null, "original_position": 55, "commit_id": "b5d13296c65e4b3cd5aa9715cf58df0fc043454e", "original_commit_id": "ccb1f401ff482f1fb25251272656149899758d4a", "user": {"login": "adamlerer", "id": 5702157, "node_id": "MDQ6VXNlcjU3MDIxNTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5702157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adamlerer", "html_url": "https://github.com/adamlerer", "followers_url": "https://api.github.com/users/adamlerer/followers", "following_url": "https://api.github.com/users/adamlerer/following{/other_user}", "gists_url": "https://api.github.com/users/adamlerer/gists{/gist_id}", "starred_url": "https://api.github.com/users/adamlerer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adamlerer/subscriptions", "organizations_url": "https://api.github.com/users/adamlerer/orgs", "repos_url": "https://api.github.com/users/adamlerer/repos", "events_url": "https://api.github.com/users/adamlerer/events{/privacy}", "received_events_url": "https://api.github.com/users/adamlerer/received_events", "type": "User", "site_admin": false}, "body": "pardon?\n", "created_at": "2016-10-17T17:04:45Z", "updated_at": "2018-11-23T15:31:42Z", "html_url": "https://github.com/pytorch/pytorch/pull/129#discussion_r83688523", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/129", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/83688523"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/129#discussion_r83688523"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/129"}}, "body_html": "<p>pardon?</p>", "body_text": "pardon?", "in_reply_to_id": 83600849}