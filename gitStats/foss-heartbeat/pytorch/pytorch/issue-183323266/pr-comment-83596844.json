{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/83596844", "pull_request_review_id": 4426897, "id": 83596844, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgzNTk2ODQ0", "diff_hunk": "@@ -43,3 +45,89 @@ def __init__(self, inplace=False):\n         super(InplaceFunction, self).__init__()\n         self.inplace = inplace\n \n+def _nested_map(condition, fn):\n+    def _map(obj):\n+        if condition(obj):\n+            return fn(obj)\n+        elif obj is None:\n+            return None\n+        elif isinstance(obj, (list, tuple)):\n+            return type(obj)(_map(x) for x in obj)\n+        else:\n+            raise ValueError(\"NestedIOFunction doesn't know how to process \"\n+                \"an input object of type \" + torch.typename(obj))\n+    return _map\n+\n+def _iter_filter(condition):\n+    def _iter(obj):\n+        if condition(obj):\n+            yield obj\n+        elif obj is None:\n+            return\n+        elif isinstance(obj, (list, tuple)):\n+            for o in obj:\n+                for var in _iter(o):\n+                    yield var\n+        else:\n+            raise ValueError(\"NestedIOFunction doesn't know how to process \"\n+                \"an input object of type \" + torch.typename(obj))\n+    return _iter\n+\n+\n+_iter_variables = _iter_filter(lambda o: isinstance(o, torch.autograd.Variable))\n+_iter_tensors = _iter_filter(torch.is_tensor)\n+_iter_None_tensors = _iter_filter(lambda o: o is None or torch.is_tensor(o))\n+_map_variable_tensor = _nested_map(lambda o: isinstance(o, torch.autograd.Variable), lambda o: o.data)\n+_map_tensor_type = _nested_map(lambda o: torch.is_tensor(o), lambda o: o.type())\n+\n+def _map_tensor_fromiter(itr):\n+     return _nested_map(lambda o: torch.is_tensor(o), lambda o: itr.next())\n+def _map_variable_fromiter(itr):\n+     return _nested_map(lambda o: isinstance(o, torch.autograd.Variable), lambda o: itr.next())\n+\n+class NestedIOFunction(Function):\n+\n+    def _do_forward(self, *input):\n+        self._nested_input = input\n+        flat_input = tuple(_iter_variables(input))\n+        flat_output = super(NestedIOFunction, self)._do_forward(*flat_input)\n+        nested_output = self._nested_output\n+        nested_variables = _map_tensor_fromiter(iter(flat_output))(self._nested_output)\n+        return nested_variables\n+\n+    def backward(self, *gradients):\n+        nested_gradients = _map_tensor_fromiter(iter(gradients))(self._nested_output)\n+        del self._nested_output\n+        result = self.backward_extended(*nested_gradients)\n+        return tuple(_iter_None_tensors(result))\n+\n+    __call__ = _do_forward\n+\n+    def forward(self, *args):\n+        nested_tensors = _map_variable_tensor(self._nested_input)\n+        result = self.forward_extended(*nested_tensors)\n+        del self._nested_input\n+        self._nested_output = result\n+        return tuple(_iter_tensors(result))\n+\n+    def save_for_backward(self, *args):\n+        self.to_save = tuple(_iter_tensors(args))\n+        self._to_save_nested = args\n+\n+    @property\n+    def saved_tensors(self):\n+        flat_tensors = super(NestedIOFunction, self).saved_tensors\n+        return _map_tensor_fromiter(iter(flat_tensors))(self._to_save_nested)\n+\n+    def mark_dirty(self, *args, **kwargs):\n+        self.dirty_tensors = tuple(_iter_tensors((args, kwargs)))\n+\n+    def mark_non_differentiable(self, *args, **kwargs):\n+        self.non_differentiable = tuple(_iter_tensors((args, kwargs)))\n+\n+    def forward_extended(self, *input):\n+        raise NotImplementedError\n+\n+    def backward_extended(self, *grad_output):\n+        raise NotImplementedError\n+        raise NotImplementedError", "path": "torch/autograd/function.py", "position": null, "original_position": 98, "commit_id": "b5d13296c65e4b3cd5aa9715cf58df0fc043454e", "original_commit_id": "ccb1f401ff482f1fb25251272656149899758d4a", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Remove this line.\n", "created_at": "2016-10-17T08:33:10Z", "updated_at": "2018-11-23T15:31:40Z", "html_url": "https://github.com/pytorch/pytorch/pull/129#discussion_r83596844", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/129", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/83596844"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/129#discussion_r83596844"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/129"}}, "body_html": "<p>Remove this line.</p>", "body_text": "Remove this line."}