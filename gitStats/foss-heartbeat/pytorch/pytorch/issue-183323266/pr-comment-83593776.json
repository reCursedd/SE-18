{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/83593776", "pull_request_review_id": 4426897, "id": 83593776, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgzNTkzNzc2", "diff_hunk": "@@ -2,16 +2,25 @@\n import torch\n import random\n import unittest\n+import contextlib\n from copy import deepcopy\n from itertools import repeat\n \n import torch.nn as nn\n import torch.nn.parallel as dp\n from torch.autograd import Variable\n from common_nn import NNTestCase, ModuleTest, CriterionTest, TestBase, \\\n-    module_tests, criterion_tests, TEST_CUDA, PRECISION\n+    module_tests, criterion_tests, TEST_CUDA, TEST_CUDNN, PRECISION\n from common import freeze_rng_state\n \n+@contextlib.contextmanager", "path": "test/test_nn.py", "position": null, "original_position": 16, "commit_id": "b5d13296c65e4b3cd5aa9715cf58df0fc043454e", "original_commit_id": "ccb1f401ff482f1fb25251272656149899758d4a", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Can you change this to:\n\n``` python\nfrom functools import wraps\n\ndef default_tensor_type(type):\n    type_str = torch.typename(type)\n    def decorator(fn):\n        @wraps(fn)\n        def wrapper(*args, **kwargs):\n            old_type = torch.typename(torch.Tensor())\n            torch.set_default_tensor_type(type_str)\n            try:\n                return fn(*args, **kwargs)\n            finally:\n                torch.set_default_tensor_type(old_type)\n        return wrapper\n    return decorator\n```\n\nand later user this as a decorator for tests (`@default_tensor_type(torch.FloatTensor)`).\n", "created_at": "2016-10-17T08:12:41Z", "updated_at": "2018-11-23T15:31:39Z", "html_url": "https://github.com/pytorch/pytorch/pull/129#discussion_r83593776", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/129", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/83593776"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/129#discussion_r83593776"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/129"}}, "body_html": "<p>Can you change this to:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">from</span> functools <span class=\"pl-k\">import</span> wraps\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">default_tensor_type</span>(<span class=\"pl-smi\">type</span>):\n    type_str <span class=\"pl-k\">=</span> torch.typename(<span class=\"pl-c1\">type</span>)\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">decorator</span>(<span class=\"pl-smi\">fn</span>):\n        <span class=\"pl-en\">@wraps</span>(fn)\n        <span class=\"pl-k\">def</span> <span class=\"pl-en\">wrapper</span>(<span class=\"pl-k\">*</span><span class=\"pl-smi\">args</span>, <span class=\"pl-k\">**</span><span class=\"pl-smi\">kwargs</span>):\n            old_type <span class=\"pl-k\">=</span> torch.typename(torch.Tensor())\n            torch.set_default_tensor_type(type_str)\n            <span class=\"pl-k\">try</span>:\n                <span class=\"pl-k\">return</span> fn(<span class=\"pl-k\">*</span>args, <span class=\"pl-k\">**</span>kwargs)\n            <span class=\"pl-k\">finally</span>:\n                torch.set_default_tensor_type(old_type)\n        <span class=\"pl-k\">return</span> wrapper\n    <span class=\"pl-k\">return</span> decorator</pre></div>\n<p>and later user this as a decorator for tests (<code>@default_tensor_type(torch.FloatTensor)</code>).</p>", "body_text": "Can you change this to:\nfrom functools import wraps\n\ndef default_tensor_type(type):\n    type_str = torch.typename(type)\n    def decorator(fn):\n        @wraps(fn)\n        def wrapper(*args, **kwargs):\n            old_type = torch.typename(torch.Tensor())\n            torch.set_default_tensor_type(type_str)\n            try:\n                return fn(*args, **kwargs)\n            finally:\n                torch.set_default_tensor_type(old_type)\n        return wrapper\n    return decorator\nand later user this as a decorator for tests (@default_tensor_type(torch.FloatTensor))."}