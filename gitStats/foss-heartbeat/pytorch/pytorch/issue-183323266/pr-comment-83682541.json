{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/83682541", "pull_request_review_id": 4510003, "id": 83682541, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgzNjgyNTQx", "diff_hunk": "@@ -109,6 +117,35 @@ def set(self, tensor):\n     def as_tuple(self):\n         return (self._type, tuple(self._size), tuple(self._stride))\n \n+\n+class TensorDescriptorArray(object):\n+    def __init__(self, N):\n+        self.ptrs = (ctypes.c_void_p * N)()\n+        for i in range(N):\n+            ptr = ctypes.byref(self.ptrs, i * ctypes.sizeof(ctypes.c_void_p))", "path": "torch/backends/cudnn/__init__.py", "position": 31, "original_position": 31, "commit_id": "b5d13296c65e4b3cd5aa9715cf58df0fc043454e", "original_commit_id": "ccb1f401ff482f1fb25251272656149899758d4a", "user": {"login": "adamlerer", "id": 5702157, "node_id": "MDQ6VXNlcjU3MDIxNTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5702157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adamlerer", "html_url": "https://github.com/adamlerer", "followers_url": "https://api.github.com/users/adamlerer/followers", "following_url": "https://api.github.com/users/adamlerer/following{/other_user}", "gists_url": "https://api.github.com/users/adamlerer/gists{/gist_id}", "starred_url": "https://api.github.com/users/adamlerer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adamlerer/subscriptions", "organizations_url": "https://api.github.com/users/adamlerer/orgs", "repos_url": "https://api.github.com/users/adamlerer/repos", "events_url": "https://api.github.com/users/adamlerer/events{/privacy}", "received_events_url": "https://api.github.com/users/adamlerer/received_events", "type": "User", "site_admin": false}, "body": "self.ptrs is a void\\* array; this is (I think) the only way to index it\n\n```\n>>> ptrs = (ctypes.c_void_p * 5)()\n>>> print(ptrs)\n<__main__.c_void_p_Array_5 at 0x7f81b339c050>\n>>> print(ptrs[2])\nNone\n>>> print(ctypes.byref(ptrs[2]))\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n<ipython-input-21-4784fde3d3e8> in <module>()\n>>> ctypes.byref(ptrs)\n<cparam 'P' (0x10cfd10)>\n>>> ctypes.byref(ptrs, 4)\n<cparam 'P' (0x10cfd14)>\n```\n", "created_at": "2016-10-17T16:33:28Z", "updated_at": "2018-11-23T15:31:42Z", "html_url": "https://github.com/pytorch/pytorch/pull/129#discussion_r83682541", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/129", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/83682541"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/129#discussion_r83682541"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/129"}}, "body_html": "<p>self.ptrs is a void* array; this is (I think) the only way to index it</p>\n<pre><code>&gt;&gt;&gt; ptrs = (ctypes.c_void_p * 5)()\n&gt;&gt;&gt; print(ptrs)\n&lt;__main__.c_void_p_Array_5 at 0x7f81b339c050&gt;\n&gt;&gt;&gt; print(ptrs[2])\nNone\n&gt;&gt;&gt; print(ctypes.byref(ptrs[2]))\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n&lt;ipython-input-21-4784fde3d3e8&gt; in &lt;module&gt;()\n&gt;&gt;&gt; ctypes.byref(ptrs)\n&lt;cparam 'P' (0x10cfd10)&gt;\n&gt;&gt;&gt; ctypes.byref(ptrs, 4)\n&lt;cparam 'P' (0x10cfd14)&gt;\n</code></pre>", "body_text": "self.ptrs is a void* array; this is (I think) the only way to index it\n>>> ptrs = (ctypes.c_void_p * 5)()\n>>> print(ptrs)\n<__main__.c_void_p_Array_5 at 0x7f81b339c050>\n>>> print(ptrs[2])\nNone\n>>> print(ctypes.byref(ptrs[2]))\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n<ipython-input-21-4784fde3d3e8> in <module>()\n>>> ctypes.byref(ptrs)\n<cparam 'P' (0x10cfd10)>\n>>> ctypes.byref(ptrs, 4)\n<cparam 'P' (0x10cfd14)>", "in_reply_to_id": 83597475}