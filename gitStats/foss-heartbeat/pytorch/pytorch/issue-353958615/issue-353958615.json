{"url": "https://api.github.com/repos/pytorch/pytorch/issues/10872", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/10872/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/10872/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/10872/events", "html_url": "https://github.com/pytorch/pytorch/pull/10872", "id": 353958615, "node_id": "MDExOlB1bGxSZXF1ZXN0MjEwODcwODg2", "number": 10872, "title": "[JIT] Store schema in serialized modules and check arguments in function call", "user": {"login": "goldsborough", "id": 6429851, "node_id": "MDQ6VXNlcjY0Mjk4NTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/6429851?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goldsborough", "html_url": "https://github.com/goldsborough", "followers_url": "https://api.github.com/users/goldsborough/followers", "following_url": "https://api.github.com/users/goldsborough/following{/other_user}", "gists_url": "https://api.github.com/users/goldsborough/gists{/gist_id}", "starred_url": "https://api.github.com/users/goldsborough/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goldsborough/subscriptions", "organizations_url": "https://api.github.com/users/goldsborough/orgs", "repos_url": "https://api.github.com/users/goldsborough/repos", "events_url": "https://api.github.com/users/goldsborough/events{/privacy}", "received_events_url": "https://api.github.com/users/goldsborough/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 679953983, "node_id": "MDU6TGFiZWw2Nzk5NTM5ODM=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/jit", "name": "jit", "color": "c5def5", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-08-24T23:35:56Z", "updated_at": "2018-11-23T15:50:15Z", "closed_at": "2018-08-29T03:12:48Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/10872", "html_url": "https://github.com/pytorch/pytorch/pull/10872", "diff_url": "https://github.com/pytorch/pytorch/pull/10872.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/10872.patch"}, "body_html": "<p>This PR adds argument checking for script method invocation from C++. For this I had to:</p>\n<ol>\n<li>The schema of a method is currently not serialized in script modules, so we now store the function schema in the <code>doc_string</code> field of the ONNX proto. Upon loading of a serialized script module, we parse the schema into the structured C++ form and assign it to the loaded method,</li>\n<li>Inside <code>Method::operator()</code>, we now verify the number and types of arguments.</li>\n</ol>\n<p>CC <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=8813817\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/li-roy\">@li-roy</a></p>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=370202\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/zdevito\">@zdevito</a></p>", "body_text": "This PR adds argument checking for script method invocation from C++. For this I had to:\n\nThe schema of a method is currently not serialized in script modules, so we now store the function schema in the doc_string field of the ONNX proto. Upon loading of a serialized script module, we parse the schema into the structured C++ form and assign it to the loaded method,\nInside Method::operator(), we now verify the number and types of arguments.\n\nCC @li-roy\n@zdevito", "body": "This PR adds argument checking for script method invocation from C++. For this I had to:\r\n1. The schema of a method is currently not serialized in script modules, so we now store the function schema in the `doc_string` field of the ONNX proto. Upon loading of a serialized script module, we parse the schema into the structured C++ form and assign it to the loaded method,\r\n2. Inside `Method::operator()`, we now verify the number and types of arguments.\r\n\r\nCC @li-roy \r\n\r\n@zdevito "}