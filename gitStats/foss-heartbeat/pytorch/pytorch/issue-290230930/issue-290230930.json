{"url": "https://api.github.com/repos/pytorch/pytorch/issues/4764", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/4764/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/4764/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/4764/events", "html_url": "https://github.com/pytorch/pytorch/issues/4764", "id": 290230930, "node_id": "MDU6SXNzdWUyOTAyMzA5MzA=", "number": 4764, "title": "[feature request] Introduce torch.BoolTensor that convert nicely to numpy.bool array", "user": {"login": "vadimkantorov", "id": 1041752, "node_id": "MDQ6VXNlcjEwNDE3NTI=", "avatar_url": "https://avatars0.githubusercontent.com/u/1041752?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vadimkantorov", "html_url": "https://github.com/vadimkantorov", "followers_url": "https://api.github.com/users/vadimkantorov/followers", "following_url": "https://api.github.com/users/vadimkantorov/following{/other_user}", "gists_url": "https://api.github.com/users/vadimkantorov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vadimkantorov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vadimkantorov/subscriptions", "organizations_url": "https://api.github.com/users/vadimkantorov/orgs", "repos_url": "https://api.github.com/users/vadimkantorov/repos", "events_url": "https://api.github.com/users/vadimkantorov/events{/privacy}", "received_events_url": "https://api.github.com/users/vadimkantorov/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-01-20T23:04:40Z", "updated_at": "2018-05-05T15:28:09Z", "closed_at": null, "author_association": "NONE", "body_html": "<p>I was surprised to find out it doesn't fall with an exception, but unfortunately the shapes are inconsistent.</p>\n<div class=\"highlight highlight-source-python\"><pre>a <span class=\"pl-k\">=</span> np.zeros((<span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">4</span>, <span class=\"pl-c1\">3</span>))\nb <span class=\"pl-k\">=</span> np.ones((<span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">4</span>), <span class=\"pl-v\">dtype</span> <span class=\"pl-k\">=</span> np.bool)\nc <span class=\"pl-k\">=</span> torch.ones((<span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">4</span>)).eq(<span class=\"pl-c1\">1</span>)\n\n<span class=\"pl-c1\">print</span>(a[b].shape)\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> (8, 3)</span>\n\n<span class=\"pl-c1\">print</span>(a[c].shape)\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> (2, 4, 4, 3)</span></pre></div>\n<p>Is seems because PyTorch doesn't surface BoolTensor, and casts ByteTensor to <code>np.uint8</code>. Workaround:</p>\n<div class=\"highlight highlight-source-python\"><pre>a[c.numpy().astype(np.bool)]</pre></div>", "body_text": "I was surprised to find out it doesn't fall with an exception, but unfortunately the shapes are inconsistent.\na = np.zeros((2, 4, 3))\nb = np.ones((2, 4), dtype = np.bool)\nc = torch.ones((2, 4)).eq(1)\n\nprint(a[b].shape)\n# (8, 3)\n\nprint(a[c].shape)\n# (2, 4, 4, 3)\nIs seems because PyTorch doesn't surface BoolTensor, and casts ByteTensor to np.uint8. Workaround:\na[c.numpy().astype(np.bool)]", "body": "I was surprised to find out it doesn't fall with an exception, but unfortunately the shapes are inconsistent.\r\n\r\n```python\r\na = np.zeros((2, 4, 3))\r\nb = np.ones((2, 4), dtype = np.bool)\r\nc = torch.ones((2, 4)).eq(1)\r\n\r\nprint(a[b].shape)\r\n# (8, 3)\r\n\r\nprint(a[c].shape)\r\n# (2, 4, 4, 3)\r\n```\r\n\r\nIs seems because PyTorch doesn't surface BoolTensor, and casts ByteTensor to `np.uint8`. Workaround:\r\n\r\n```python\r\na[c.numpy().astype(np.bool)]\r\n```"}