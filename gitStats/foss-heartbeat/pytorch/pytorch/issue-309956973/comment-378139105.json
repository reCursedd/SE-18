{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/378139105", "html_url": "https://github.com/pytorch/pytorch/issues/6124#issuecomment-378139105", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/6124", "id": 378139105, "node_id": "MDEyOklzc3VlQ29tbWVudDM3ODEzOTEwNQ==", "user": {"login": "YuesongNan", "id": 16803868, "node_id": "MDQ6VXNlcjE2ODAzODY4", "avatar_url": "https://avatars0.githubusercontent.com/u/16803868?v=4", "gravatar_id": "", "url": "https://api.github.com/users/YuesongNan", "html_url": "https://github.com/YuesongNan", "followers_url": "https://api.github.com/users/YuesongNan/followers", "following_url": "https://api.github.com/users/YuesongNan/following{/other_user}", "gists_url": "https://api.github.com/users/YuesongNan/gists{/gist_id}", "starred_url": "https://api.github.com/users/YuesongNan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/YuesongNan/subscriptions", "organizations_url": "https://api.github.com/users/YuesongNan/orgs", "repos_url": "https://api.github.com/users/YuesongNan/repos", "events_url": "https://api.github.com/users/YuesongNan/events{/privacy}", "received_events_url": "https://api.github.com/users/YuesongNan/received_events", "type": "User", "site_admin": false}, "created_at": "2018-04-03T06:11:45Z", "updated_at": "2018-04-03T06:12:21Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=5674597\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/SsnL\">@SsnL</a> Thank you for your attention and I am glad to hear that this feature will be incorporated in the future. By the way, I have some small suggestions for convolution implementation.</p>\n<ol>\n<li>in <code>torch.nn.functional</code> there is the implementation of <code>conv2d</code>which actually a correlation. It is fine to use correlation instead of convolution in deep learning setting, but for scientific computing, it makes confusion for new comers. I was thinking if it was possible for implement another true convolution with just flip the kernel.</li>\n<li>Still in scientific computing setting, I was thinking if was possible to provide convolution with cuda implementation for util function as well. This implementation will avoid transforming 2d <code>torch.Tensor</code> type to <code>Variable</code> type with 4d structure ([input, output, image_size, image_size]).</li>\n</ol>\n<p>Thank you again for your help. Above suggestions are just for you as reference.</p>", "body_text": "@SsnL Thank you for your attention and I am glad to hear that this feature will be incorporated in the future. By the way, I have some small suggestions for convolution implementation.\n\nin torch.nn.functional there is the implementation of conv2dwhich actually a correlation. It is fine to use correlation instead of convolution in deep learning setting, but for scientific computing, it makes confusion for new comers. I was thinking if it was possible for implement another true convolution with just flip the kernel.\nStill in scientific computing setting, I was thinking if was possible to provide convolution with cuda implementation for util function as well. This implementation will avoid transforming 2d torch.Tensor type to Variable type with 4d structure ([input, output, image_size, image_size]).\n\nThank you again for your help. Above suggestions are just for you as reference.", "body": "@SsnL Thank you for your attention and I am glad to hear that this feature will be incorporated in the future. By the way, I have some small suggestions for convolution implementation. \r\n1. in `torch.nn.functional` there is the implementation of `conv2d`which actually a correlation. It is fine to use correlation instead of convolution in deep learning setting, but for scientific computing, it makes confusion for new comers. I was thinking if it was possible for implement another true convolution with just flip the kernel. \r\n2. Still in scientific computing setting, I was thinking if was possible to provide convolution with cuda implementation for util function as well. This implementation will avoid transforming 2d `torch.Tensor` type to `Variable` type with 4d structure ([input, output, image_size, image_size]). \r\n\r\nThank you again for your help. Above suggestions are just for you as reference. "}