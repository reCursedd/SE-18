{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/428198785", "html_url": "https://github.com/pytorch/pytorch/issues/3917#issuecomment-428198785", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/3917", "id": 428198785, "node_id": "MDEyOklzc3VlQ29tbWVudDQyODE5ODc4NQ==", "user": {"login": "younghe", "id": 9523176, "node_id": "MDQ6VXNlcjk1MjMxNzY=", "avatar_url": "https://avatars3.githubusercontent.com/u/9523176?v=4", "gravatar_id": "", "url": "https://api.github.com/users/younghe", "html_url": "https://github.com/younghe", "followers_url": "https://api.github.com/users/younghe/followers", "following_url": "https://api.github.com/users/younghe/following{/other_user}", "gists_url": "https://api.github.com/users/younghe/gists{/gist_id}", "starred_url": "https://api.github.com/users/younghe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/younghe/subscriptions", "organizations_url": "https://api.github.com/users/younghe/orgs", "repos_url": "https://api.github.com/users/younghe/repos", "events_url": "https://api.github.com/users/younghe/events{/privacy}", "received_events_url": "https://api.github.com/users/younghe/received_events", "type": "User", "site_admin": false}, "created_at": "2018-10-09T13:48:20Z", "updated_at": "2018-10-09T13:48:20Z", "author_association": "NONE", "body_html": "<p>This is my test code:<br>\n`<br>\ndef validate(val_loader, model, criterion):<br>\nbatch_time = AverageMeter()<br>\nlosses = AverageMeter()<br>\ntop1 = AverageMeter()<br>\ntop5 = AverageMeter()</p>\n<pre><code>### Switch to evaluate mode\nmodel.eval()\n\nend = time.time()\ninitial = False\nfor i, (input, target) in enumerate(val_loader):\n    target = target.cuda(async=True)\n    input_var = torch.autograd.Variable(input, volatile=True)\n    target_var = torch.autograd.Variable(target, volatile=True)\n\n    ### Compute output\n    output = model(input_var)\n    loss = criterion(output, target_var)\n\n    ### Measure accuracy and record loss\n    #prec1, prec5 = accuracy(output.data, target, topk=(1, 5))\n    prec1 = accuracy(output.data, target, topk=(1))\n    losses.update(loss.data[0], input.size(0))\n    top1.update(prec1[0], input.size(0))\n    #top5.update(prec5[0], input.size(0))\n\n    ### Measure elapsed time\n    batch_time.update(time.time() - end)\n    end = time.time()\n    \n    if i % args.print_freq == 0:\n        print('Test: [{0}/{1}]\\t'\n              'Time {batch_time.val:.3f} ({batch_time.avg:.3f})\\t'\n              'Loss {loss.val:.4f} ({loss.avg:.4f})\\t'\n              'Prec@1 {top1.val:.3f} ({top1.avg:.3f})\\t'\n              'Prec@5 {top5.val:.3f} ({top5.avg:.3f})'.format(\n                  i, len(val_loader), batch_time=batch_time, loss=losses,\n                  top1=top1, top5=top5))\n    \n    if not initial:\n        initial = True\n        batch_time = AverageMeter()\n        print(\"Initial finished......\")\n        total_start = time.time()\n\ntotal_time = time.time() - total_start\nprint(\"total time: %.5f\"%total_time)\nprint(' * Prec@1 {top1.avg:.3f} Prec@5 {top5.avg:.3f}'\n      .format(top1=top1, top5=top5))\n\nreturn 100. - top1.avg, 100. - top5.avg`\n</code></pre>", "body_text": "This is my test code:\n`\ndef validate(val_loader, model, criterion):\nbatch_time = AverageMeter()\nlosses = AverageMeter()\ntop1 = AverageMeter()\ntop5 = AverageMeter()\n### Switch to evaluate mode\nmodel.eval()\n\nend = time.time()\ninitial = False\nfor i, (input, target) in enumerate(val_loader):\n    target = target.cuda(async=True)\n    input_var = torch.autograd.Variable(input, volatile=True)\n    target_var = torch.autograd.Variable(target, volatile=True)\n\n    ### Compute output\n    output = model(input_var)\n    loss = criterion(output, target_var)\n\n    ### Measure accuracy and record loss\n    #prec1, prec5 = accuracy(output.data, target, topk=(1, 5))\n    prec1 = accuracy(output.data, target, topk=(1))\n    losses.update(loss.data[0], input.size(0))\n    top1.update(prec1[0], input.size(0))\n    #top5.update(prec5[0], input.size(0))\n\n    ### Measure elapsed time\n    batch_time.update(time.time() - end)\n    end = time.time()\n    \n    if i % args.print_freq == 0:\n        print('Test: [{0}/{1}]\\t'\n              'Time {batch_time.val:.3f} ({batch_time.avg:.3f})\\t'\n              'Loss {loss.val:.4f} ({loss.avg:.4f})\\t'\n              'Prec@1 {top1.val:.3f} ({top1.avg:.3f})\\t'\n              'Prec@5 {top5.val:.3f} ({top5.avg:.3f})'.format(\n                  i, len(val_loader), batch_time=batch_time, loss=losses,\n                  top1=top1, top5=top5))\n    \n    if not initial:\n        initial = True\n        batch_time = AverageMeter()\n        print(\"Initial finished......\")\n        total_start = time.time()\n\ntotal_time = time.time() - total_start\nprint(\"total time: %.5f\"%total_time)\nprint(' * Prec@1 {top1.avg:.3f} Prec@5 {top5.avg:.3f}'\n      .format(top1=top1, top5=top5))\n\nreturn 100. - top1.avg, 100. - top5.avg`", "body": "This is my test code: \r\n`\r\ndef validate(val_loader, model, criterion):\r\n    batch_time = AverageMeter()\r\n    losses = AverageMeter()\r\n    top1 = AverageMeter()\r\n    top5 = AverageMeter()\r\n\r\n    ### Switch to evaluate mode\r\n    model.eval()\r\n\r\n    end = time.time()\r\n    initial = False\r\n    for i, (input, target) in enumerate(val_loader):\r\n        target = target.cuda(async=True)\r\n        input_var = torch.autograd.Variable(input, volatile=True)\r\n        target_var = torch.autograd.Variable(target, volatile=True)\r\n\r\n        ### Compute output\r\n        output = model(input_var)\r\n        loss = criterion(output, target_var)\r\n\r\n        ### Measure accuracy and record loss\r\n        #prec1, prec5 = accuracy(output.data, target, topk=(1, 5))\r\n        prec1 = accuracy(output.data, target, topk=(1))\r\n        losses.update(loss.data[0], input.size(0))\r\n        top1.update(prec1[0], input.size(0))\r\n        #top5.update(prec5[0], input.size(0))\r\n\r\n        ### Measure elapsed time\r\n        batch_time.update(time.time() - end)\r\n        end = time.time()\r\n        \r\n        if i % args.print_freq == 0:\r\n            print('Test: [{0}/{1}]\\t'\r\n                  'Time {batch_time.val:.3f} ({batch_time.avg:.3f})\\t'\r\n                  'Loss {loss.val:.4f} ({loss.avg:.4f})\\t'\r\n                  'Prec@1 {top1.val:.3f} ({top1.avg:.3f})\\t'\r\n                  'Prec@5 {top5.val:.3f} ({top5.avg:.3f})'.format(\r\n                      i, len(val_loader), batch_time=batch_time, loss=losses,\r\n                      top1=top1, top5=top5))\r\n        \r\n        if not initial:\r\n            initial = True\r\n            batch_time = AverageMeter()\r\n            print(\"Initial finished......\")\r\n            total_start = time.time()\r\n\r\n    total_time = time.time() - total_start\r\n    print(\"total time: %.5f\"%total_time)\r\n    print(' * Prec@1 {top1.avg:.3f} Prec@5 {top5.avg:.3f}'\r\n          .format(top1=top1, top5=top5))\r\n\r\n    return 100. - top1.avg, 100. - top5.avg`"}