{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/270808953", "html_url": "https://github.com/pytorch/pytorch/issues/410#issuecomment-270808953", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/410", "id": 270808953, "node_id": "MDEyOklzc3VlQ29tbWVudDI3MDgwODk1Mw==", "user": {"login": "jekbradbury", "id": 11729078, "node_id": "MDQ6VXNlcjExNzI5MDc4", "avatar_url": "https://avatars2.githubusercontent.com/u/11729078?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jekbradbury", "html_url": "https://github.com/jekbradbury", "followers_url": "https://api.github.com/users/jekbradbury/followers", "following_url": "https://api.github.com/users/jekbradbury/following{/other_user}", "gists_url": "https://api.github.com/users/jekbradbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/jekbradbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jekbradbury/subscriptions", "organizations_url": "https://api.github.com/users/jekbradbury/orgs", "repos_url": "https://api.github.com/users/jekbradbury/repos", "events_url": "https://api.github.com/users/jekbradbury/events{/privacy}", "received_events_url": "https://api.github.com/users/jekbradbury/received_events", "type": "User", "site_admin": false}, "created_at": "2017-01-06T01:39:19Z", "updated_at": "2017-01-06T01:39:19Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Hmm, that would be make things much more complicated. The NLP models I work with pass a lot of state around (between encoder and decoder, between timesteps, etc) and I'd have to add a lot of wrapper classes, some of which belong intermediate in the hierarchy between two <code>Module</code>s (which I think wouldn't work). Is there a reason why state_dict isn't the best choice for serialization?<br>\n(apologies that, on both of these points, I'm pretty much on autopilot from chainer, where I can throw any old object into an attribute, and where the serialization is restricted to the parameter tensors themselves and not the model construction)</p>", "body_text": "Hmm, that would be make things much more complicated. The NLP models I work with pass a lot of state around (between encoder and decoder, between timesteps, etc) and I'd have to add a lot of wrapper classes, some of which belong intermediate in the hierarchy between two Modules (which I think wouldn't work). Is there a reason why state_dict isn't the best choice for serialization?\n(apologies that, on both of these points, I'm pretty much on autopilot from chainer, where I can throw any old object into an attribute, and where the serialization is restricted to the parameter tensors themselves and not the model construction)", "body": "Hmm, that would be make things much more complicated. The NLP models I work with pass a lot of state around (between encoder and decoder, between timesteps, etc) and I'd have to add a lot of wrapper classes, some of which belong intermediate in the hierarchy between two `Module`s (which I think wouldn't work). Is there a reason why state_dict isn't the best choice for serialization?\r\n(apologies that, on both of these points, I'm pretty much on autopilot from chainer, where I can throw any old object into an attribute, and where the serialization is restricted to the parameter tensors themselves and not the model construction)"}