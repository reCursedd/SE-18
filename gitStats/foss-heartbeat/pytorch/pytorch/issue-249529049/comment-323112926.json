{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/323112926", "html_url": "https://github.com/pytorch/pytorch/issues/2383#issuecomment-323112926", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/2383", "id": 323112926, "node_id": "MDEyOklzc3VlQ29tbWVudDMyMzExMjkyNg==", "user": {"login": "colesbury", "id": 655866, "node_id": "MDQ6VXNlcjY1NTg2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/655866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colesbury", "html_url": "https://github.com/colesbury", "followers_url": "https://api.github.com/users/colesbury/followers", "following_url": "https://api.github.com/users/colesbury/following{/other_user}", "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions", "organizations_url": "https://api.github.com/users/colesbury/orgs", "repos_url": "https://api.github.com/users/colesbury/repos", "events_url": "https://api.github.com/users/colesbury/events{/privacy}", "received_events_url": "https://api.github.com/users/colesbury/received_events", "type": "User", "site_admin": false}, "created_at": "2017-08-17T15:45:44Z", "updated_at": "2017-08-17T15:45:44Z", "author_association": "MEMBER", "body_html": "<p>The memory usage is because CUDA is initialized on device 0 (the current device) even when the LSTM is moved to device 2. The cause is in <code>RNNBase.flatten_parameters()</code>:</p>\n<p><div class=\"border rounded-1 my-2\">\n  <div class=\"f6 px-3 py-2 lh-condensed border-bottom bg-gray-light\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/pytorch/pytorch/blob/6648677acf1b653a2c80ee790dd85dc29664f6b0/torch/nn/modules/rnn.py#L78\">pytorch/torch/nn/modules/rnn.py</a>\n    </p>\n    <p class=\"mb-0 text-gray-light\">\n         Line 78\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/pytorch/pytorch/commit/6648677acf1b653a2c80ee790dd85dc29664f6b0\">6648677</a>\n    </p>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L78\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"78\"></td>\n          <td id=\"LC78\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> handle <span class=\"pl-k\">=</span> cudnn.get_handle() </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n</p>\n<p><code>cudnn.get_handle()</code> gets the handle for the <strong>current</strong> device. We should probably switch the current device to the target (e.g. the device of <code>any_param</code>). This current behavior seems potentially buggy because we're using the cuDNN handle for device 0 to initialize descriptors used on device 2.</p>", "body_text": "The memory usage is because CUDA is initialized on device 0 (the current device) even when the LSTM is moved to device 2. The cause is in RNNBase.flatten_parameters():\n\n  \n    \n      pytorch/torch/nn/modules/rnn.py\n    \n    \n         Line 78\n      in\n      6648677\n    \n    \n    \n    \n\n        \n          \n           handle = cudnn.get_handle() \n        \n    \n  \n\n\ncudnn.get_handle() gets the handle for the current device. We should probably switch the current device to the target (e.g. the device of any_param). This current behavior seems potentially buggy because we're using the cuDNN handle for device 0 to initialize descriptors used on device 2.", "body": "The memory usage is because CUDA is initialized on device 0 (the current device) even when the LSTM is moved to device 2. The cause is in `RNNBase.flatten_parameters()`:\r\n\r\nhttps://github.com/pytorch/pytorch/blob/6648677acf1b653a2c80ee790dd85dc29664f6b0/torch/nn/modules/rnn.py#L78\r\n\r\n`cudnn.get_handle()` gets the handle for the **current** device. We should probably switch the current device to the target (e.g. the device of `any_param`). This current behavior seems potentially buggy because we're using the cuDNN handle for device 0 to initialize descriptors used on device 2."}