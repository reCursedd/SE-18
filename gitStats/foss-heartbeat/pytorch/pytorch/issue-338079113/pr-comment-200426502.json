{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/200426502", "pull_request_review_id": 134741888, "id": 200426502, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDQyNjUwMg==", "diff_hunk": "@@ -191,7 +191,7 @@ TEST_CASE(\"module/clone\") {\n         buffer = register_buffer(\"buf\", torch::ones({2, 2}));\n       }\n \n-      Linear l1, l2, l3;\n+      Linear l1{nullptr}, l2{nullptr}, l3{nullptr};", "path": "test/cpp/api/module.cpp", "position": 5, "original_position": 5, "commit_id": "2dbedced3f4ce09c3bcec2de3b3c1215915976a8", "original_commit_id": "074f9298bdb83d62d0f48639a07748c719170e07", "user": {"login": "goldsborough", "id": 6429851, "node_id": "MDQ6VXNlcjY0Mjk4NTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/6429851?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goldsborough", "html_url": "https://github.com/goldsborough", "followers_url": "https://api.github.com/users/goldsborough/followers", "following_url": "https://api.github.com/users/goldsborough/following{/other_user}", "gists_url": "https://api.github.com/users/goldsborough/gists{/gist_id}", "starred_url": "https://api.github.com/users/goldsborough/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goldsborough/subscriptions", "organizations_url": "https://api.github.com/users/goldsborough/orgs", "repos_url": "https://api.github.com/users/goldsborough/repos", "events_url": "https://api.github.com/users/goldsborough/events{/privacy}", "received_events_url": "https://api.github.com/users/goldsborough/received_events", "type": "User", "site_admin": false}, "body": "So the problem is: `Linear` is like `std::shared_ptr<LinearImpl>`, and we need an empty state for `Linear` (e.g. when you only initialize the module inside `reset()`). I feel like it will be more intuitive to users if `MyModule m;`, where `MyModule` has a default constructor, constructs the `MyModule` with a filled, default constructed value, instead of the usual semantics of `shared_ptr<LinearImpl>`, which would create `MyModule` in the empty state. However, to still allow empty-state construction, I added a constructor that takes `nullptr_t` such that `Linear(nullptr)`. constructs the empty-state `LinearImpl` holder. Does this make sense? Is it intuitive? What do you think?", "created_at": "2018-07-05T17:13:54Z", "updated_at": "2018-11-23T15:46:48Z", "html_url": "https://github.com/pytorch/pytorch/pull/9151#discussion_r200426502", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/9151", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/200426502"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/9151#discussion_r200426502"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/9151"}}, "body_html": "<p>So the problem is: <code>Linear</code> is like <code>std::shared_ptr&lt;LinearImpl&gt;</code>, and we need an empty state for <code>Linear</code> (e.g. when you only initialize the module inside <code>reset()</code>). I feel like it will be more intuitive to users if <code>MyModule m;</code>, where <code>MyModule</code> has a default constructor, constructs the <code>MyModule</code> with a filled, default constructed value, instead of the usual semantics of <code>shared_ptr&lt;LinearImpl&gt;</code>, which would create <code>MyModule</code> in the empty state. However, to still allow empty-state construction, I added a constructor that takes <code>nullptr_t</code> such that <code>Linear(nullptr)</code>. constructs the empty-state <code>LinearImpl</code> holder. Does this make sense? Is it intuitive? What do you think?</p>", "body_text": "So the problem is: Linear is like std::shared_ptr<LinearImpl>, and we need an empty state for Linear (e.g. when you only initialize the module inside reset()). I feel like it will be more intuitive to users if MyModule m;, where MyModule has a default constructor, constructs the MyModule with a filled, default constructed value, instead of the usual semantics of shared_ptr<LinearImpl>, which would create MyModule in the empty state. However, to still allow empty-state construction, I added a constructor that takes nullptr_t such that Linear(nullptr). constructs the empty-state LinearImpl holder. Does this make sense? Is it intuitive? What do you think?", "in_reply_to_id": 199993926}