{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/200725135", "pull_request_review_id": 135101739, "id": 200725135, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDcyNTEzNQ==", "diff_hunk": "@@ -191,7 +191,7 @@ TEST_CASE(\"module/clone\") {\n         buffer = register_buffer(\"buf\", torch::ones({2, 2}));\n       }\n \n-      Linear l1, l2, l3;\n+      Linear l1{nullptr}, l2{nullptr}, l3{nullptr};", "path": "test/cpp/api/module.cpp", "position": 5, "original_position": 5, "commit_id": "2dbedced3f4ce09c3bcec2de3b3c1215915976a8", "original_commit_id": "074f9298bdb83d62d0f48639a07748c719170e07", "user": {"login": "goldsborough", "id": 6429851, "node_id": "MDQ6VXNlcjY0Mjk4NTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/6429851?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goldsborough", "html_url": "https://github.com/goldsborough", "followers_url": "https://api.github.com/users/goldsborough/followers", "following_url": "https://api.github.com/users/goldsborough/following{/other_user}", "gists_url": "https://api.github.com/users/goldsborough/gists{/gist_id}", "starred_url": "https://api.github.com/users/goldsborough/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goldsborough/subscriptions", "organizations_url": "https://api.github.com/users/goldsborough/orgs", "repos_url": "https://api.github.com/users/goldsborough/repos", "events_url": "https://api.github.com/users/goldsborough/events{/privacy}", "received_events_url": "https://api.github.com/users/goldsborough/received_events", "type": "User", "site_admin": false}, "body": "You're not defaulting `Linear`, you're defaulting the `shared_ptr<LinearImpl>` to the empty state. It's just like how `at::Tensor()` creates an undefined tensor. The alternative is to disallow an empty state. That becomes annoying in two cases:\r\n1. Late initialization, e.g. the fact that many of our modules do most of their initialization work inside `reset()`\r\n2. Containers, imagine someone wants to store `std::vector<Linear>`.\r\n\r\nI feel like people would work around this by storing `std::shared_ptr<Linear>`, but that would defeat the purpose of our whole pImpl machinery. What do you think?", "created_at": "2018-07-06T17:46:02Z", "updated_at": "2018-11-23T15:46:53Z", "html_url": "https://github.com/pytorch/pytorch/pull/9151#discussion_r200725135", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/9151", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/200725135"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/9151#discussion_r200725135"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/9151"}}, "body_html": "<p>You're not defaulting <code>Linear</code>, you're defaulting the <code>shared_ptr&lt;LinearImpl&gt;</code> to the empty state. It's just like how <code>at::Tensor()</code> creates an undefined tensor. The alternative is to disallow an empty state. That becomes annoying in two cases:</p>\n<ol>\n<li>Late initialization, e.g. the fact that many of our modules do most of their initialization work inside <code>reset()</code></li>\n<li>Containers, imagine someone wants to store <code>std::vector&lt;Linear&gt;</code>.</li>\n</ol>\n<p>I feel like people would work around this by storing <code>std::shared_ptr&lt;Linear&gt;</code>, but that would defeat the purpose of our whole pImpl machinery. What do you think?</p>", "body_text": "You're not defaulting Linear, you're defaulting the shared_ptr<LinearImpl> to the empty state. It's just like how at::Tensor() creates an undefined tensor. The alternative is to disallow an empty state. That becomes annoying in two cases:\n\nLate initialization, e.g. the fact that many of our modules do most of their initialization work inside reset()\nContainers, imagine someone wants to store std::vector<Linear>.\n\nI feel like people would work around this by storing std::shared_ptr<Linear>, but that would defeat the purpose of our whole pImpl machinery. What do you think?", "in_reply_to_id": 199993926}