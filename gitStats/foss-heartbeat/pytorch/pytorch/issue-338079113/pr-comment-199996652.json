{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/199996652", "pull_request_review_id": 134223724, "id": 199996652, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTk5NjY1Mg==", "diff_hunk": "@@ -33,24 +32,16 @@ class ModuleHolder : torch::detail::ModuleHolderIndicator {\n  public:\n   using ContainedType = Contained;\n \n-  /// Constructs the `ModuleHolder` with an empty contained value.\n-  ModuleHolder() = default;\n-\n-  /// Single argument constructor of the underlying type.\n-  /// Example: `Linear(4)` or `Linear(LinearOptions(4))`.\n-  template <typename T>\n-  explicit ModuleHolder(T&& t)\n-      : impl_(std::make_shared<Contained>(std::forward<T>(t))) {}\n-\n-  /// Multi-argument constructor. This constructor is special in that the\n-  /// expectation is that the constructor of the contained type takes an object\n-  /// that can be constructed with the given arguments. For our modules, this is\n-  /// always the `Options` struct. For this reason, the arguments are forwarded\n-  /// inside braces, as to construct the constructor argument.\n-  /// Example: `Linear(3, 4)`, equivalent to `Linear(LinearOptions(3, 4))`.\n-  template <typename T, typename... Ts>\n-  explicit ModuleHolder(T&& t, Ts&&... ts)\n-      : impl_(new Contained({std::forward<T>(t), std::forward<Ts>(ts)...})) {}\n+  /// Constructs the `ModuleHolder` with an empty contained value. Access to\n+  /// the underlying module is not permitted and will throw an exception, until\n+  /// a value is assigned.\n+  explicit ModuleHolder(std::nullptr_t) : impl_(nullptr) {}\n+\n+  /// Constructs the `ModuleHolder` with a contained module, forwarding all\n+  /// arguments to its constructor.\n+  template <typename... Ts>\n+  explicit ModuleHolder(Ts&&... ts)", "path": "torch/csrc/api/include/torch/nn/pimpl.h", "position": 49, "original_position": 40, "commit_id": "2dbedced3f4ce09c3bcec2de3b3c1215915976a8", "original_commit_id": "074f9298bdb83d62d0f48639a07748c719170e07", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "Oh yay, no more funny overload.", "created_at": "2018-07-04T02:47:53Z", "updated_at": "2018-11-23T15:46:45Z", "html_url": "https://github.com/pytorch/pytorch/pull/9151#discussion_r199996652", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/9151", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/199996652"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/9151#discussion_r199996652"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/9151"}}, "body_html": "<p>Oh yay, no more funny overload.</p>", "body_text": "Oh yay, no more funny overload."}