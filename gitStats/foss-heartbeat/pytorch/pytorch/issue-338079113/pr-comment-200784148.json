{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/200784148", "pull_request_review_id": 135172980, "id": 200784148, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDc4NDE0OA==", "diff_hunk": "@@ -315,6 +322,16 @@ template <typename ModuleType>\n AnyModule::AnyModule(const ModuleHolder<ModuleType>& module_holder)\n     : AnyModule(module_holder.get()) {}\n \n+inline AnyModule::AnyModule(const AnyModule& other)\n+    : content_(other.content_ ? other.content_->clone() : nullptr) {}", "path": "torch/csrc/api/include/torch/nn/modules/any.h", "position": null, "original_position": 48, "commit_id": "2dbedced3f4ce09c3bcec2de3b3c1215915976a8", "original_commit_id": "074f9298bdb83d62d0f48639a07748c719170e07", "user": {"login": "goldsborough", "id": 6429851, "node_id": "MDQ6VXNlcjY0Mjk4NTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/6429851?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goldsborough", "html_url": "https://github.com/goldsborough", "followers_url": "https://api.github.com/users/goldsborough/followers", "following_url": "https://api.github.com/users/goldsborough/following{/other_user}", "gists_url": "https://api.github.com/users/goldsborough/gists{/gist_id}", "starred_url": "https://api.github.com/users/goldsborough/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goldsborough/subscriptions", "organizations_url": "https://api.github.com/users/goldsborough/orgs", "repos_url": "https://api.github.com/users/goldsborough/repos", "events_url": "https://api.github.com/users/goldsborough/events{/privacy}", "received_events_url": "https://api.github.com/users/goldsborough/received_events", "type": "User", "site_admin": false}, "body": "I see what you mean, but I didn't add `AnyModule::clone()`, so it can't be called or anything. You'd have to access the contained module, and clone it. If someone asks for it, I could add `AnyModule::clone()` which would then do a deep-copy. That would be consistent with everything else, e.g. `Tensor::clone()` does a deep copy and `Tensor`'s copy constructor does a shallow copy. At the moment, there's not yet a need for `AnyModule::clone()`.", "created_at": "2018-07-06T22:24:08Z", "updated_at": "2018-11-23T15:46:56Z", "html_url": "https://github.com/pytorch/pytorch/pull/9151#discussion_r200784148", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/9151", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/200784148"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/9151#discussion_r200784148"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/9151"}}, "body_html": "<p>I see what you mean, but I didn't add <code>AnyModule::clone()</code>, so it can't be called or anything. You'd have to access the contained module, and clone it. If someone asks for it, I could add <code>AnyModule::clone()</code> which would then do a deep-copy. That would be consistent with everything else, e.g. <code>Tensor::clone()</code> does a deep copy and <code>Tensor</code>'s copy constructor does a shallow copy. At the moment, there's not yet a need for <code>AnyModule::clone()</code>.</p>", "body_text": "I see what you mean, but I didn't add AnyModule::clone(), so it can't be called or anything. You'd have to access the contained module, and clone it. If someone asks for it, I could add AnyModule::clone() which would then do a deep-copy. That would be consistent with everything else, e.g. Tensor::clone() does a deep copy and Tensor's copy constructor does a shallow copy. At the moment, there's not yet a need for AnyModule::clone().", "in_reply_to_id": 199996852}