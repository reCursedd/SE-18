{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/428250088", "html_url": "https://github.com/pytorch/pytorch/pull/12473#issuecomment-428250088", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/12473", "id": 428250088, "node_id": "MDEyOklzc3VlQ29tbWVudDQyODI1MDA4OA==", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "created_at": "2018-10-09T16:00:15Z", "updated_at": "2018-10-09T16:00:15Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Two reasons:</p>\n<ol>\n<li>\n<p>Mutating tensor options often leads to situations where you have to write <code>TensorOptions(options).dtype(kInt)</code>, because you have a const reference to (or you don't want to modify) options. An immutable style API doesn't have this problem: it's always valid to call options.dtype(kInt)</p>\n</li>\n<li>\n<p>Returning a mutable reference lead to an interesting bug, where someone expected const reference to temporary lifetime extension but didn't get it. It looked like this:</p>\n</li>\n</ol>\n<pre><code>const auto&amp; x = y.options().layout(kSparse);\n// ... use of x ...\n</code></pre>\n<p>At first glance, the code looks transparently wrong: you're taking a const reference to a temporary, of course the reference is invalid if you try to use it later. But const references to temporaries have their lifetime extended. So why is this code wrong?</p>\n<p>The answer was simple: we weren't actually taking const reference to a temporary. layout is a function of the method chaining style, which means its signature is TensorOptions&amp; TensorOptions::layout(Layout)... notice that this return is NOT a value, it's a mutable reference. And now C++ happily casts the mutable reference into a const reference without promoting lifetime, and then you are a sad panda.</p>\n<p>How to avoid this problem? Just don't return mutable references.</p>", "body_text": "Two reasons:\n\n\nMutating tensor options often leads to situations where you have to write TensorOptions(options).dtype(kInt), because you have a const reference to (or you don't want to modify) options. An immutable style API doesn't have this problem: it's always valid to call options.dtype(kInt)\n\n\nReturning a mutable reference lead to an interesting bug, where someone expected const reference to temporary lifetime extension but didn't get it. It looked like this:\n\n\nconst auto& x = y.options().layout(kSparse);\n// ... use of x ...\n\nAt first glance, the code looks transparently wrong: you're taking a const reference to a temporary, of course the reference is invalid if you try to use it later. But const references to temporaries have their lifetime extended. So why is this code wrong?\nThe answer was simple: we weren't actually taking const reference to a temporary. layout is a function of the method chaining style, which means its signature is TensorOptions& TensorOptions::layout(Layout)... notice that this return is NOT a value, it's a mutable reference. And now C++ happily casts the mutable reference into a const reference without promoting lifetime, and then you are a sad panda.\nHow to avoid this problem? Just don't return mutable references.", "body": "Two reasons:\r\n\r\n1. Mutating tensor options often leads to situations where you have to write `TensorOptions(options).dtype(kInt)`, because you have a const reference to (or you don't want to modify) options. An immutable style API doesn't have this problem: it's always valid to call options.dtype(kInt)\r\n\r\n2. Returning a mutable reference lead to an interesting bug, where someone expected const reference to temporary lifetime extension but didn't get it. It looked like this:\r\n\r\n```\r\nconst auto& x = y.options().layout(kSparse);\r\n// ... use of x ...\r\n```\r\n\r\nAt first glance, the code looks transparently wrong: you're taking a const reference to a temporary, of course the reference is invalid if you try to use it later. But const references to temporaries have their lifetime extended. So why is this code wrong?\r\n\r\nThe answer was simple: we weren't actually taking const reference to a temporary. layout is a function of the method chaining style, which means its signature is TensorOptions& TensorOptions::layout(Layout)... notice that this return is NOT a value, it's a mutable reference. And now C++ happily casts the mutable reference into a const reference without promoting lifetime, and then you are a sad panda.\r\n\r\nHow to avoid this problem? Just don't return mutable references."}