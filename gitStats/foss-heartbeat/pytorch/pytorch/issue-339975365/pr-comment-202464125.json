{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/202464125", "pull_request_review_id": 137179084, "id": 202464125, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMjQ2NDEyNQ==", "diff_hunk": "@@ -2,6 +2,47 @@\n \n namespace caffe2 {\n \n+OpSchema::Cost CostInferenceForSparseLengths(\n+    const OperatorDef& def,\n+    const vector<TensorShape>& inputs,\n+    bool use_weight) {\n+  int min_num_of_inputs = 3 + use_weight;\n+  CAFFE_ENFORCE_GE(\n+      inputs.size(),\n+      min_num_of_inputs,\n+      def.type() + \" requires at least \" +\n+          caffe2::to_string(min_num_of_inputs));\n+\n+  const TensorShape data = inputs[0];\n+  const TensorShape indices = inputs[1 + use_weight];\n+  const TensorShape lengths = inputs[2 + use_weight];\n+\n+  OpSchema::Cost c;\n+  CAFFE_ENFORCE_GT(data.dims_size(), 0, \"data requires at least 1 dimension\");\n+  uint64_t N = data.dims(0);\n+  if (N == 0) {\n+    return c;\n+  }\n+  uint64_t D = nElemFromDim(data) / N;\n+  CAFFE_ENFORCE_GT(\n+      lengths.dims_size(), 0, \"lengths requires at least 1 dimension\");\n+  uint64_t M = lengths.dims(0);\n+  uint64_t indices_size = nElemFromDim(indices);\n+\n+  c.flops = indices_size * D;\n+  c.bytes_read = indices_size *\n+          (D * sizeof(data.data_type()) + sizeof(indices.data_type())) +\n+      M * sizeof(lengths.data_type());\n+  c.params_bytes = N * D * sizeof(data.data_type());", "path": "caffe2/operators/segment_reduction_op.cc", "position": 35, "original_position": 35, "commit_id": "76dedb0b170cfecbbb6de2092da1f9a485a2c3f0", "original_commit_id": "1a3f6a2e249e53e811d5b289d3e4647392883d75", "user": {"login": "salexspb", "id": 20307328, "node_id": "MDQ6VXNlcjIwMzA3MzI4", "avatar_url": "https://avatars2.githubusercontent.com/u/20307328?v=4", "gravatar_id": "", "url": "https://api.github.com/users/salexspb", "html_url": "https://github.com/salexspb", "followers_url": "https://api.github.com/users/salexspb/followers", "following_url": "https://api.github.com/users/salexspb/following{/other_user}", "gists_url": "https://api.github.com/users/salexspb/gists{/gist_id}", "starred_url": "https://api.github.com/users/salexspb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/salexspb/subscriptions", "organizations_url": "https://api.github.com/users/salexspb/orgs", "repos_url": "https://api.github.com/users/salexspb/repos", "events_url": "https://api.github.com/users/salexspb/events{/privacy}", "received_events_url": "https://api.github.com/users/salexspb/received_events", "type": "User", "site_admin": false}, "body": "@jspark1105 , so for dense param_total == param_read. How about interpreting param_bytes as param_read? Given that we didn't have coverage for sparse before :) ", "created_at": "2018-07-13T20:27:37Z", "updated_at": "2018-11-23T15:47:23Z", "html_url": "https://github.com/pytorch/pytorch/pull/9314#discussion_r202464125", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/9314", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/202464125"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/9314#discussion_r202464125"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/9314"}}, "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=5545022\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/jspark1105\">@jspark1105</a> , so for dense param_total == param_read. How about interpreting param_bytes as param_read? Given that we didn't have coverage for sparse before :)</p>", "body_text": "@jspark1105 , so for dense param_total == param_read. How about interpreting param_bytes as param_read? Given that we didn't have coverage for sparse before :)", "in_reply_to_id": 202218195}