{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/340222751", "html_url": "https://github.com/pytorch/pytorch/issues/3126#issuecomment-340222751", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/3126", "id": 340222751, "node_id": "MDEyOklzc3VlQ29tbWVudDM0MDIyMjc1MQ==", "user": {"login": "hma02", "id": 12686013, "node_id": "MDQ6VXNlcjEyNjg2MDEz", "avatar_url": "https://avatars3.githubusercontent.com/u/12686013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hma02", "html_url": "https://github.com/hma02", "followers_url": "https://api.github.com/users/hma02/followers", "following_url": "https://api.github.com/users/hma02/following{/other_user}", "gists_url": "https://api.github.com/users/hma02/gists{/gist_id}", "starred_url": "https://api.github.com/users/hma02/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hma02/subscriptions", "organizations_url": "https://api.github.com/users/hma02/orgs", "repos_url": "https://api.github.com/users/hma02/repos", "events_url": "https://api.github.com/users/hma02/events{/privacy}", "received_events_url": "https://api.github.com/users/hma02/received_events", "type": "User", "site_admin": false}, "created_at": "2017-10-28T22:02:33Z", "updated_at": "2017-10-28T22:33:22Z", "author_association": "NONE", "body_html": "<p>For those academic cluster users who don't have sudo access to <code>/usr/</code>, and therefore have to customize their cudnn installs other than existing old cudnn installed in /usr/local/cuda by their admins, there is an issue:</p>\n<p>This file <code>torch/csrc/cudnn/cudnn-wrapper.h</code> ignores whatever <code>CUDNN_INCLUDE_DIR</code> detected in setup.py and still search <code>cudnn.h</code> in random places and ends up importing a wrong <code>cudnn.h</code> file and giving this error:</p>\n<div class=\"highlight highlight-source-shell\"><pre>torch/csrc/cudnn/Conv.cpp:187:90: error: \u2018CUDNN_DETERMINISTIC\u2019 was not declared <span class=\"pl-k\">in</span> this scope\n......\n......\ntorch/csrc/cudnn/Conv.cpp:448:96: error: \u2018struct cudnnConvolutionBwdFilterAlgoPerf_t\u2019 has no member named \u2018determinism\u2019\n/home/hma02/pytorch/torch/csrc/cudnn/cudnn-wrapper.h:9:198: note: <span class=\"pl-c\"><span class=\"pl-c\">#</span>pragma message: CuDNN v5 found, but need at least CuDNN v6. You can get the latest version of CuDNN from https://developer.nvidia.com/cudnn or disable CuDNN with NO_CUDNN=1</span>\n v<span class=\"pl-s\"><span class=\"pl-pds\">\"</span> STRING(CUDNN_MAJOR) <span class=\"pl-pds\">\"</span></span> found, but need at least CuDNN v6. You can get the latest version of CuDNN from https://developer.nvidia.com/cudnn or disable CuDNN with NO_CUDNN=1<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>)</span></pre></div>\n<p>even though config files reporting found cudnn here:</p>\n<div class=\"highlight highlight-source-shell\"><pre>-- Building with NumPy bindings\n-- Detected cuDNN at /home/hma02/cudnn_v7_ppc64le/lib/, /home/hma02/mahe6562/cudnn_v7_ppc64le/include\n-- Detected CUDA at /usr/local/cuda \n-- Building NCCL library\n-- Building with distributed package\n-- Not using NNPACK</pre></div>\n<p>Therefore one has to manually change <code>torch/csrc/cudnn/cudnn-wrapper.h</code> to</p>\n<div class=\"highlight highlight-source-c\"><pre>#<span class=\"pl-k\">pragma</span> once\n\n#<span class=\"pl-k\">include</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/home/hma02/cudnn_v7_ppc64le/include/cudnn.h<span class=\"pl-pds\">\"</span></span>\n\n#<span class=\"pl-k\">define</span> <span class=\"pl-en\">STRINGIFY</span>(<span class=\"pl-v\">x</span>) #x\n#<span class=\"pl-k\">define</span> <span class=\"pl-en\">STRING</span>(<span class=\"pl-v\">x</span>) STRINGIFY(x)\n\n#<span class=\"pl-k\">if</span> CUDNN_MAJOR &lt; 6\n#<span class=\"pl-k\">pragma</span> message (\"CuDNN v\" STRING(CUDNN_MAJOR) \" found, but need at least CuDNN v6. You can get the latest version of CuDNN from https:<span class=\"pl-c\"><span class=\"pl-c\">//</span>developer.nvidia.com/cudnn or disable CuDNN with NO_CUDNN=1\")</span>\n#<span class=\"pl-k\">error</span> \"CuDNN version not supported\"\n#<span class=\"pl-k\">endif</span>\n\n#<span class=\"pl-k\">undef</span> STRINGIFY\n#<span class=\"pl-k\">undef</span> STRING</pre></div>\n<p>and possibly makes it working.</p>\n<p>Just wondering if there's an easier way of doing this.</p>", "body_text": "For those academic cluster users who don't have sudo access to /usr/, and therefore have to customize their cudnn installs other than existing old cudnn installed in /usr/local/cuda by their admins, there is an issue:\nThis file torch/csrc/cudnn/cudnn-wrapper.h ignores whatever CUDNN_INCLUDE_DIR detected in setup.py and still search cudnn.h in random places and ends up importing a wrong cudnn.h file and giving this error:\ntorch/csrc/cudnn/Conv.cpp:187:90: error: \u2018CUDNN_DETERMINISTIC\u2019 was not declared in this scope\n......\n......\ntorch/csrc/cudnn/Conv.cpp:448:96: error: \u2018struct cudnnConvolutionBwdFilterAlgoPerf_t\u2019 has no member named \u2018determinism\u2019\n/home/hma02/pytorch/torch/csrc/cudnn/cudnn-wrapper.h:9:198: note: #pragma message: CuDNN v5 found, but need at least CuDNN v6. You can get the latest version of CuDNN from https://developer.nvidia.com/cudnn or disable CuDNN with NO_CUDNN=1\n v\" STRING(CUDNN_MAJOR) \" found, but need at least CuDNN v6. You can get the latest version of CuDNN from https://developer.nvidia.com/cudnn or disable CuDNN with NO_CUDNN=1\")\neven though config files reporting found cudnn here:\n-- Building with NumPy bindings\n-- Detected cuDNN at /home/hma02/cudnn_v7_ppc64le/lib/, /home/hma02/mahe6562/cudnn_v7_ppc64le/include\n-- Detected CUDA at /usr/local/cuda \n-- Building NCCL library\n-- Building with distributed package\n-- Not using NNPACK\nTherefore one has to manually change torch/csrc/cudnn/cudnn-wrapper.h to\n#pragma once\n\n#include \"/home/hma02/cudnn_v7_ppc64le/include/cudnn.h\"\n\n#define STRINGIFY(x) #x\n#define STRING(x) STRINGIFY(x)\n\n#if CUDNN_MAJOR < 6\n#pragma message (\"CuDNN v\" STRING(CUDNN_MAJOR) \" found, but need at least CuDNN v6. You can get the latest version of CuDNN from https://developer.nvidia.com/cudnn or disable CuDNN with NO_CUDNN=1\")\n#error \"CuDNN version not supported\"\n#endif\n\n#undef STRINGIFY\n#undef STRING\nand possibly makes it working.\nJust wondering if there's an easier way of doing this.", "body": "For those academic cluster users who don't have sudo access to `/usr/`, and therefore have to customize their cudnn installs other than existing old cudnn installed in /usr/local/cuda by their admins, there is an issue:\r\n\r\nThis file `torch/csrc/cudnn/cudnn-wrapper.h` ignores whatever `CUDNN_INCLUDE_DIR` detected in setup.py and still search `cudnn.h` in random places and ends up importing a wrong `cudnn.h` file and giving this error:\r\n\r\n```bash\r\ntorch/csrc/cudnn/Conv.cpp:187:90: error: \u2018CUDNN_DETERMINISTIC\u2019 was not declared in this scope\r\n......\r\n......\r\ntorch/csrc/cudnn/Conv.cpp:448:96: error: \u2018struct cudnnConvolutionBwdFilterAlgoPerf_t\u2019 has no member named \u2018determinism\u2019\r\n/home/hma02/pytorch/torch/csrc/cudnn/cudnn-wrapper.h:9:198: note: #pragma message: CuDNN v5 found, but need at least CuDNN v6. You can get the latest version of CuDNN from https://developer.nvidia.com/cudnn or disable CuDNN with NO_CUDNN=1\r\n v\" STRING(CUDNN_MAJOR) \" found, but need at least CuDNN v6. You can get the latest version of CuDNN from https://developer.nvidia.com/cudnn or disable CuDNN with NO_CUDNN=1\")\r\n```\r\n\r\neven though config files reporting found cudnn here:\r\n\r\n```bash\r\n-- Building with NumPy bindings\r\n-- Detected cuDNN at /home/hma02/cudnn_v7_ppc64le/lib/, /home/hma02/mahe6562/cudnn_v7_ppc64le/include\r\n-- Detected CUDA at /usr/local/cuda \r\n-- Building NCCL library\r\n-- Building with distributed package\r\n-- Not using NNPACK\r\n```\r\n\r\nTherefore one has to manually change `torch/csrc/cudnn/cudnn-wrapper.h` to\r\n\r\n```c\r\n#pragma once\r\n\r\n#include \"/home/hma02/cudnn_v7_ppc64le/include/cudnn.h\"\r\n\r\n#define STRINGIFY(x) #x\r\n#define STRING(x) STRINGIFY(x)\r\n\r\n#if CUDNN_MAJOR < 6\r\n#pragma message (\"CuDNN v\" STRING(CUDNN_MAJOR) \" found, but need at least CuDNN v6. You can get the latest version of CuDNN from https://developer.nvidia.com/cudnn or disable CuDNN with NO_CUDNN=1\")\r\n#error \"CuDNN version not supported\"\r\n#endif\r\n\r\n#undef STRINGIFY\r\n#undef STRING\r\n```\r\n\r\nand possibly makes it working.\r\n\r\nJust wondering if there's an easier way of doing this."}