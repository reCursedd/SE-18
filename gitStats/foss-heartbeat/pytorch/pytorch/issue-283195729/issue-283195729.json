{"url": "https://api.github.com/repos/pytorch/pytorch/issues/4247", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/4247/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/4247/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/4247/events", "html_url": "https://github.com/pytorch/pytorch/issues/4247", "id": 283195729, "node_id": "MDU6SXNzdWUyODMxOTU3Mjk=", "number": 4247, "title": "Feature request: sparse matrix max(axis)", "user": {"login": "davidbau", "id": 3458792, "node_id": "MDQ6VXNlcjM0NTg3OTI=", "avatar_url": "https://avatars0.githubusercontent.com/u/3458792?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidbau", "html_url": "https://github.com/davidbau", "followers_url": "https://api.github.com/users/davidbau/followers", "following_url": "https://api.github.com/users/davidbau/following{/other_user}", "gists_url": "https://api.github.com/users/davidbau/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidbau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidbau/subscriptions", "organizations_url": "https://api.github.com/users/davidbau/orgs", "repos_url": "https://api.github.com/users/davidbau/repos", "events_url": "https://api.github.com/users/davidbau/events{/privacy}", "received_events_url": "https://api.github.com/users/davidbau/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 679954154, "node_id": "MDU6TGFiZWw2Nzk5NTQxNTQ=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/sparse", "name": "sparse", "color": "bfd4f2", "default": false}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-12-19T11:31:20Z", "updated_at": "2018-09-12T21:14:54Z", "closed_at": null, "author_association": "NONE", "body_html": "<p>The current sparse support is pretty nice!  However, there are some important of collation operations that can not be efficiently be composed out of matmul or operations on _values().  One that is in the way of my current work is axis-wise max.  Ideally:</p>\n<pre><code>vec = sparsemat.max(axis=None, zero=0)\n</code></pre>\n<p>Where an optional zero argument could be used to specify the interpretation of unstored matrix entries.  (E.g., could pass -Infinity if that is the intent.)  In my application, I am using a sparse matrix to store only the significant log probabilities in a grid, and max() with a -Infinity default is the key operation needed to implement a stable row-wise logsumexp().)</p>\n<p>For reference: scipy.sparse's inclusion of max is here, although they miss the need for a zero override.<br>\n<a href=\"https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.coo_matrix.max.html#scipy.sparse.csr_matrix.max\" rel=\"nofollow\">https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.coo_matrix.max.html#scipy.sparse.csr_matrix.max</a></p>", "body_text": "The current sparse support is pretty nice!  However, there are some important of collation operations that can not be efficiently be composed out of matmul or operations on _values().  One that is in the way of my current work is axis-wise max.  Ideally:\nvec = sparsemat.max(axis=None, zero=0)\n\nWhere an optional zero argument could be used to specify the interpretation of unstored matrix entries.  (E.g., could pass -Infinity if that is the intent.)  In my application, I am using a sparse matrix to store only the significant log probabilities in a grid, and max() with a -Infinity default is the key operation needed to implement a stable row-wise logsumexp().)\nFor reference: scipy.sparse's inclusion of max is here, although they miss the need for a zero override.\nhttps://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.coo_matrix.max.html#scipy.sparse.csr_matrix.max", "body": "The current sparse support is pretty nice!  However, there are some important of collation operations that can not be efficiently be composed out of matmul or operations on _values().  One that is in the way of my current work is axis-wise max.  Ideally:\r\n\r\n```\r\nvec = sparsemat.max(axis=None, zero=0)\r\n```\r\n\r\nWhere an optional zero argument could be used to specify the interpretation of unstored matrix entries.  (E.g., could pass -Infinity if that is the intent.)  In my application, I am using a sparse matrix to store only the significant log probabilities in a grid, and max() with a -Infinity default is the key operation needed to implement a stable row-wise logsumexp().)\r\n\r\nFor reference: scipy.sparse's inclusion of max is here, although they miss the need for a zero override.\r\nhttps://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.coo_matrix.max.html#scipy.sparse.csr_matrix.max"}