{"url": "https://api.github.com/repos/pytorch/pytorch/issues/10561", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/10561/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/10561/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/10561/events", "html_url": "https://github.com/pytorch/pytorch/pull/10561", "id": 350999329, "node_id": "MDExOlB1bGxSZXF1ZXN0MjA4NzA1ODYy", "number": 10561, "title": "[JIT] Separates CPU and CUDA fusers", "user": {"login": "mruberry", "id": 38511765, "node_id": "MDQ6VXNlcjM4NTExNzY1", "avatar_url": "https://avatars3.githubusercontent.com/u/38511765?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mruberry", "html_url": "https://github.com/mruberry", "followers_url": "https://api.github.com/users/mruberry/followers", "following_url": "https://api.github.com/users/mruberry/following{/other_user}", "gists_url": "https://api.github.com/users/mruberry/gists{/gist_id}", "starred_url": "https://api.github.com/users/mruberry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mruberry/subscriptions", "organizations_url": "https://api.github.com/users/mruberry/orgs", "repos_url": "https://api.github.com/users/mruberry/repos", "events_url": "https://api.github.com/users/mruberry/events{/privacy}", "received_events_url": "https://api.github.com/users/mruberry/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-08-15T23:11:11Z", "updated_at": "2018-11-23T15:49:33Z", "closed_at": "2018-08-16T22:14:46Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/10561", "html_url": "https://github.com/pytorch/pytorch/pull/10561", "diff_url": "https://github.com/pytorch/pytorch/pull/10561.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/10561.patch"}, "body_html": "<p>This PR separates the CPU and CUDA fusion passes and compilers, created a new fusers subdirectory to store the logic for each. The passes were updated to only operate on CPU or CUDA nodes, and the compilers have checks to ensure they're dealing with the correct type. More precisely:</p>\n<p>-Creates a new \"fusers\" directory<br>\n-The graph_fuser pass now calls a cpu fusion pass if we can compile on the cpu<br>\n-The graph_fuser pass also calls a cuda fusion pass if we're using cuda, not ROCm, and not Windows<br>\n-The cuda fuser is only built if using cuda, not ROCm, and not Windows<br>\n-The passes now operate only on nodes of their respective types<br>\n-The fusers now operate only on nodes of their respective types<br>\n-Both fusers have some clean-up refactoring, mostly spinning classes off into their own headers</p>\n<p>There is no end-user functionality change with this PR, but it sets the stage for further fusion enhancements.</p>\n<p>Note: this PR was spun out of <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"350884678\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/10544\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/pytorch/pytorch/pull/10544/hovercard\" href=\"https://github.com/pytorch/pytorch/pull/10544\">#10544</a>, since it contains additional improvements. Originally it was to diagnose a cpu-only trusty failure in the latter (hence the name \"cuda_fuser_trusty\"). Thanks to <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=13564\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ezyang\">@ezyang</a> for being incredibly helpful in diagnosing that issue. Closing <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"350884678\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/10544\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/pytorch/pytorch/pull/10544/hovercard\" href=\"https://github.com/pytorch/pytorch/pull/10544\">#10544</a> in favor of this branch.</p>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=22205833\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/csarofeen\">@csarofeen</a> also contributed to this PR, as can be seen in the history of <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"350884678\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/10544\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/pytorch/pytorch/pull/10544/hovercard\" href=\"https://github.com/pytorch/pytorch/pull/10544\">#10544</a>, which I plundered.</p>", "body_text": "This PR separates the CPU and CUDA fusion passes and compilers, created a new fusers subdirectory to store the logic for each. The passes were updated to only operate on CPU or CUDA nodes, and the compilers have checks to ensure they're dealing with the correct type. More precisely:\n-Creates a new \"fusers\" directory\n-The graph_fuser pass now calls a cpu fusion pass if we can compile on the cpu\n-The graph_fuser pass also calls a cuda fusion pass if we're using cuda, not ROCm, and not Windows\n-The cuda fuser is only built if using cuda, not ROCm, and not Windows\n-The passes now operate only on nodes of their respective types\n-The fusers now operate only on nodes of their respective types\n-Both fusers have some clean-up refactoring, mostly spinning classes off into their own headers\nThere is no end-user functionality change with this PR, but it sets the stage for further fusion enhancements.\nNote: this PR was spun out of #10544, since it contains additional improvements. Originally it was to diagnose a cpu-only trusty failure in the latter (hence the name \"cuda_fuser_trusty\"). Thanks to @ezyang for being incredibly helpful in diagnosing that issue. Closing #10544 in favor of this branch.\n@csarofeen also contributed to this PR, as can be seen in the history of #10544, which I plundered.", "body": "This PR separates the CPU and CUDA fusion passes and compilers, created a new fusers subdirectory to store the logic for each. The passes were updated to only operate on CPU or CUDA nodes, and the compilers have checks to ensure they're dealing with the correct type. More precisely:\r\n\r\n-Creates a new \"fusers\" directory\r\n-The graph_fuser pass now calls a cpu fusion pass if we can compile on the cpu\r\n-The graph_fuser pass also calls a cuda fusion pass if we're using cuda, not ROCm, and not Windows\r\n-The cuda fuser is only built if using cuda, not ROCm, and not Windows\r\n-The passes now operate only on nodes of their respective types\r\n-The fusers now operate only on nodes of their respective types\r\n-Both fusers have some clean-up refactoring, mostly spinning classes off into their own headers\r\n\r\nThere is no end-user functionality change with this PR, but it sets the stage for further fusion enhancements.\r\n\r\nNote: this PR was spun out of #10544, since it contains additional improvements. Originally it was to diagnose a cpu-only trusty failure in the latter (hence the name \"cuda_fuser_trusty\"). Thanks to @ezyang for being incredibly helpful in diagnosing that issue. Closing #10544 in favor of this branch.\r\n\r\n@csarofeen also contributed to this PR, as can be seen in the history of #10544, which I plundered."}