{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/216873844", "pull_request_review_id": 154457339, "id": 216873844, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNjg3Mzg0NA==", "diff_hunk": "@@ -531,13 +531,252 @@ Python-defined Constants\n Debugging\n ~~~~~~~~~\n \n-Print things\n+Interpreting Graphs\n+    TorchScript uses a static single assignment (SSA) intermediate representation\n+    (IR) to represent computation. The instructions in this format consist of\n+    ATen operators and other primitive operators, including control flow\n+    operators for loops and conditionals. As an example::\n \n-Use ``USE_PYTHON=0`` to debug in normal python mode\n+        @torch.jit.script\n+        def foo(len):\n+          # type: (int) -> torch.Tensor\n+          rv = torch.zeros(3, 4)\n+          for i in range(len):\n+            if i < 10:\n+                rv = rv - 1.0\n+            else:\n+                rv = rv + 1.0\n+          return rv\n+\n+        print(foo.graph)\n+\n+    A ``ScriptModule`` with a single ``forward`` method will have an attribute\n+    ``graph``, which you can use to inspect the IR representing the computation.\n+    If the ScriptModule has more than one method, you will need to access\n+    ``.graph`` on the method itself and not the module. We can inspect the\n+    graph of a method named ``bar`` on a ScriptModule by accessing ``.bar.graph``.\n+\n+    The example script above produces the graph::\n+\n+        graph(%len : int) {\n+          %13 : float = prim::Constant[value=1]()\n+          %10 : int = prim::Constant[value=10]()\n+          %2 : int = prim::Constant[value=4]()\n+          %1 : int = prim::Constant[value=3]()\n+          %3 : int[] = prim::ListConstruct(%1, %2)\n+          %4 : int = prim::Constant[value=6]()\n+          %5 : int = prim::Constant[value=0]()\n+          %6 : int[] = prim::Constant[value=[0, -1]]()\n+          %rv.1 : Dynamic = aten::zeros(%3, %4, %5, %6)\n+          %8 : int = prim::Constant[value=1]()\n+          %rv : Dynamic = prim::Loop(%len, %8, %rv.1)\n+            block0(%i : int, %12 : Dynamic) {\n+              %11 : int = aten::lt(%i, %10)\n+              %rv.4 : Dynamic = prim::If(%11)\n+                block0() {\n+                  %14 : int = prim::Constant[value=1]()\n+                  %rv.2 : Dynamic = aten::sub(%12, %13, %14)\n+                  -> (%rv.2)\n+                }\n+                block1() {\n+                  %16 : int = prim::Constant[value=1]()\n+                  %rv.3 : Dynamic = aten::add(%12, %13, %16)\n+                  -> (%rv.3)\n+                }\n+              %19 : int = prim::Constant[value=1]()\n+              -> (%19, %rv.4)\n+            }\n+          return (%rv);\n+        }\n+\n+    Take the instruction ``%rv.1 : Dynamic = aten::zeros(%3, %4, %5, %6)`` for\n+    example. ``%rv.1 : Dynamic`` means we assign the output to a (unique)\n+    value named ``rv.1``, and that value is of ``Dynamic`` type, i.e. we do\n+    not know its concrete shape. ``aten::zeros`` is the operator (equivalent\n+    to ``torch.zeros``) and the input list ``(%3, %4, %5, %6)`` specifies which\n+    values in scope should be passed as inputs. The schema for built-in functions\n+    like ``aten::zeros`` can be found at `Builtin Functions`_.\n+\n+    Notice that operators can also have associated ``blocks``, namely the\n+    ``prim::Loop`` and ``prim::If`` operators. In the graph print-out, these\n+    operators are formatted to reflect their equivalent source code forms\n+    to facilitate easy debugging.\n+\n+    Graphs can be inspected as shown to confirm that the computation described\n+    by a ``ScriptModule`` is correct, in both automated and manual fashion, as\n+    described below.", "path": "docs/source/jit.rst", "position": 114, "original_position": 79, "commit_id": "29e8cf0aa61dffa88f49bd06d662521eedb951f2", "original_commit_id": "46d9797b3dab7a644228c1715f01ff579799e1e9", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Keep in mind that research to production crowd is not the only user group that will be interested in this functionality. Even if they know how to use the graph-based APIs, this doesn't imply that they know what SSA is, and how to understand those dumps.", "created_at": "2018-09-12T01:35:52Z", "updated_at": "2018-11-23T15:51:07Z", "html_url": "https://github.com/pytorch/pytorch/pull/11540#discussion_r216873844", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/11540", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/216873844"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/11540#discussion_r216873844"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/11540"}}, "body_html": "<p>Keep in mind that research to production crowd is not the only user group that will be interested in this functionality. Even if they know how to use the graph-based APIs, this doesn't imply that they know what SSA is, and how to understand those dumps.</p>", "body_text": "Keep in mind that research to production crowd is not the only user group that will be interested in this functionality. Even if they know how to use the graph-based APIs, this doesn't imply that they know what SSA is, and how to understand those dumps.", "in_reply_to_id": 216822809}