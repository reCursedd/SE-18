{"url": "https://api.github.com/repos/pytorch/pytorch/issues/4938", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/4938/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/4938/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/4938/events", "html_url": "https://github.com/pytorch/pytorch/issues/4938", "id": 292866708, "node_id": "MDU6SXNzdWUyOTI4NjY3MDg=", "number": 4938, "title": "`F.mse_loss` has strange broadcasting semantics", "user": {"login": "zou3519", "id": 5652049, "node_id": "MDQ6VXNlcjU2NTIwNDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/5652049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zou3519", "html_url": "https://github.com/zou3519", "followers_url": "https://api.github.com/users/zou3519/followers", "following_url": "https://api.github.com/users/zou3519/following{/other_user}", "gists_url": "https://api.github.com/users/zou3519/gists{/gist_id}", "starred_url": "https://api.github.com/users/zou3519/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zou3519/subscriptions", "organizations_url": "https://api.github.com/users/zou3519/orgs", "repos_url": "https://api.github.com/users/zou3519/repos", "events_url": "https://api.github.com/users/zou3519/events{/privacy}", "received_events_url": "https://api.github.com/users/zou3519/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-01-30T17:18:56Z", "updated_at": "2018-02-07T03:12:12Z", "closed_at": "2018-02-07T03:12:12Z", "author_association": "CONTRIBUTOR", "body_html": "<pre><code>import torch\nimport torch.nn.functional as F\nfrom torch.autograd import Variable\n\noutput = Variable(torch.Tensor([1, 2]), requires_grad=True)\ntarget = Variable(torch.Tensor([0, 1]))\n\ntrain_loss1 = F.mse_loss(output.view(2, 1), target.view(2, 1, 1, 1), True)  # returns 1\ntrain_loss2 = ((output.view(2, 1) - target.view(2, 1, 1, 1))**2).mean()  # returns 1.5\n</code></pre>\n<p>I expect one of the following two things:</p>\n<ol>\n<li>If <code>mse_loss</code> doesn't support broadcasting then it should throw an error.</li>\n<li>If <code>mse_loss</code> supports broadcasting, then it should return 1.5 to be consistent.</li>\n</ol>", "body_text": "import torch\nimport torch.nn.functional as F\nfrom torch.autograd import Variable\n\noutput = Variable(torch.Tensor([1, 2]), requires_grad=True)\ntarget = Variable(torch.Tensor([0, 1]))\n\ntrain_loss1 = F.mse_loss(output.view(2, 1), target.view(2, 1, 1, 1), True)  # returns 1\ntrain_loss2 = ((output.view(2, 1) - target.view(2, 1, 1, 1))**2).mean()  # returns 1.5\n\nI expect one of the following two things:\n\nIf mse_loss doesn't support broadcasting then it should throw an error.\nIf mse_loss supports broadcasting, then it should return 1.5 to be consistent.", "body": "```\r\nimport torch\r\nimport torch.nn.functional as F\r\nfrom torch.autograd import Variable\r\n\r\noutput = Variable(torch.Tensor([1, 2]), requires_grad=True)\r\ntarget = Variable(torch.Tensor([0, 1]))\r\n\r\ntrain_loss1 = F.mse_loss(output.view(2, 1), target.view(2, 1, 1, 1), True)  # returns 1\r\ntrain_loss2 = ((output.view(2, 1) - target.view(2, 1, 1, 1))**2).mean()  # returns 1.5\r\n```\r\n\r\nI expect one of the following two things:\r\n1) If `mse_loss` doesn't support broadcasting then it should throw an error.\r\n2) If `mse_loss` supports broadcasting, then it should return 1.5 to be consistent."}