{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/155167675", "pull_request_review_id": 81440236, "id": 155167675, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTE2NzY3NQ==", "diff_hunk": "@@ -626,15 +627,21 @@ static const std::string so_template = \"/tmp/pytorch_fuserXXXXXX.so\";\n static const std::string cpp_template = \"/tmp/pytorch_fuserXXXXXX.cpp\";\n \n static const std::string compile_string =\n-  \"\\\"${cxx}\\\" -O3 -g -march=native -std=c++11 -fPIC -shared \\\"${cpp_file}\\\" -o \\\"${so_file}\\\"\";\n+  \"\\\"${cxx}\\\" -O3 -g -march=native -std=c++11 -fPIC ${fopenmp} -shared \\\"${cpp_file}\\\" -o \\\"${so_file}\\\"\";\n \n static void runCompiler(FusionCompilerConfig & config, const std::string & cpp_file, const std::string & so_file) {\n   TemplateEnv env;\n   env.s(\"cxx\", config.cxx);\n+  env.s(\"fopenmp\", config.openmp ? \"-fopenmp\" : \"\");\n   env.s(\"cpp_file\",cpp_file);\n   env.s(\"so_file\",so_file);\n   std::string result = format(compile_string,env);\n   int r = system(result.c_str());\n+  if(config.openmp && r != 0) {\n+    std::cerr << \"warning: pytorch jit fuser failed to compile with openmp, trying without it...\\n\";\n+    config.openmp = false; // disable for future compiles", "path": "torch/csrc/jit/fusion_compiler.cpp", "position": 28, "original_position": 28, "commit_id": "c3a478a5fb87c272e9ada39ee18e369896f082ab", "original_commit_id": "c3a478a5fb87c272e9ada39ee18e369896f082ab", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "I'd say that choosing to modify the config from inside `runCompiler` feels dirty to me. It would be nicer to do a test run when the config is actually created (assuming we don't create them unnecessarily), or make it off by default, and add a method that may enable it.", "created_at": "2017-12-06T08:07:10Z", "updated_at": "2018-11-23T15:37:08Z", "html_url": "https://github.com/pytorch/pytorch/pull/4042#discussion_r155167675", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4042", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/155167675"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/4042#discussion_r155167675"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4042"}}, "body_html": "<p>I'd say that choosing to modify the config from inside <code>runCompiler</code> feels dirty to me. It would be nicer to do a test run when the config is actually created (assuming we don't create them unnecessarily), or make it off by default, and add a method that may enable it.</p>", "body_text": "I'd say that choosing to modify the config from inside runCompiler feels dirty to me. It would be nicer to do a test run when the config is actually created (assuming we don't create them unnecessarily), or make it off by default, and add a method that may enable it."}