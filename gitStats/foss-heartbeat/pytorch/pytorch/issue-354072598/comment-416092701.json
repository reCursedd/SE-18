{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/416092701", "html_url": "https://github.com/pytorch/pytorch/issues/10882#issuecomment-416092701", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/10882", "id": 416092701, "node_id": "MDEyOklzc3VlQ29tbWVudDQxNjA5MjcwMQ==", "user": {"login": "ArmenAg", "id": 4429794, "node_id": "MDQ6VXNlcjQ0Mjk3OTQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/4429794?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ArmenAg", "html_url": "https://github.com/ArmenAg", "followers_url": "https://api.github.com/users/ArmenAg/followers", "following_url": "https://api.github.com/users/ArmenAg/following{/other_user}", "gists_url": "https://api.github.com/users/ArmenAg/gists{/gist_id}", "starred_url": "https://api.github.com/users/ArmenAg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ArmenAg/subscriptions", "organizations_url": "https://api.github.com/users/ArmenAg/orgs", "repos_url": "https://api.github.com/users/ArmenAg/repos", "events_url": "https://api.github.com/users/ArmenAg/events{/privacy}", "received_events_url": "https://api.github.com/users/ArmenAg/received_events", "type": "User", "site_admin": false}, "created_at": "2018-08-27T01:54:05Z", "updated_at": "2018-08-27T01:54:05Z", "author_association": "CONTRIBUTOR", "body_html": "<p>It also looks like expand is now in the ONNX operator list. Could we implement expand as?</p>\n<pre><code>def expand(g, self, size, implicit):\n    if _is_value(size):\n        shape = size\n    else:\n        if self.isTensor():\n            self_sizes = self.type().sizes()\n            if self_sizes and len(size) == 2 and self_sizes[0] == size[0]:\n                return g.op(\"Flatten\", self, axis_i=1)\n        shape = g.op(\"Constant\", value_t=torch.LongTensor(size))\n    return g.op(\"Expand\", self, shape)\n</code></pre>", "body_text": "It also looks like expand is now in the ONNX operator list. Could we implement expand as?\ndef expand(g, self, size, implicit):\n    if _is_value(size):\n        shape = size\n    else:\n        if self.isTensor():\n            self_sizes = self.type().sizes()\n            if self_sizes and len(size) == 2 and self_sizes[0] == size[0]:\n                return g.op(\"Flatten\", self, axis_i=1)\n        shape = g.op(\"Constant\", value_t=torch.LongTensor(size))\n    return g.op(\"Expand\", self, shape)", "body": "It also looks like expand is now in the ONNX operator list. Could we implement expand as?\r\n```\r\ndef expand(g, self, size, implicit):\r\n    if _is_value(size):\r\n        shape = size\r\n    else:\r\n        if self.isTensor():\r\n            self_sizes = self.type().sizes()\r\n            if self_sizes and len(size) == 2 and self_sizes[0] == size[0]:\r\n                return g.op(\"Flatten\", self, axis_i=1)\r\n        shape = g.op(\"Constant\", value_t=torch.LongTensor(size))\r\n    return g.op(\"Expand\", self, shape)\r\n```\r\n"}