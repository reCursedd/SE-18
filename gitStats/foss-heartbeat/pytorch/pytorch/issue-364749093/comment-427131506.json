{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/427131506", "html_url": "https://github.com/pytorch/pytorch/issues/12160#issuecomment-427131506", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/12160", "id": 427131506, "node_id": "MDEyOklzc3VlQ29tbWVudDQyNzEzMTUwNg==", "user": {"login": "chrelli", "id": 18282643, "node_id": "MDQ6VXNlcjE4MjgyNjQz", "avatar_url": "https://avatars2.githubusercontent.com/u/18282643?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chrelli", "html_url": "https://github.com/chrelli", "followers_url": "https://api.github.com/users/chrelli/followers", "following_url": "https://api.github.com/users/chrelli/following{/other_user}", "gists_url": "https://api.github.com/users/chrelli/gists{/gist_id}", "starred_url": "https://api.github.com/users/chrelli/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chrelli/subscriptions", "organizations_url": "https://api.github.com/users/chrelli/orgs", "repos_url": "https://api.github.com/users/chrelli/repos", "events_url": "https://api.github.com/users/chrelli/events{/privacy}", "received_events_url": "https://api.github.com/users/chrelli/received_events", "type": "User", "site_admin": false}, "created_at": "2018-10-04T18:56:03Z", "updated_at": "2018-10-04T18:56:03Z", "author_association": "NONE", "body_html": "<p>Sure, that would work. But something like this might save some memory, since we wouldn't have to make a huge tensor full of indices. It's an in-place, though, so maybe not totally pytorchnic:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">batch_diagonal</span>(<span class=\"pl-smi\">input</span>):\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> idea from here: https://discuss.pytorch.org/t/batch-of-diagonal-matrix/13560</span>\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> batches a stack of vectors (batch x N) -&gt; a stack of diagonal matrices (batch x N x N) </span>\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> works in  2D -&gt; 3D, should also work in higher dimensions</span>\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> make a zero matrix, which duplicates the last dim of input</span>\n    dims <span class=\"pl-k\">=</span> [<span class=\"pl-c1\">input</span>.size(i) <span class=\"pl-k\">for</span> i <span class=\"pl-k\">in</span> torch.arange(<span class=\"pl-c1\">input</span>.dim())]\n    dims.append(dims[<span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>])\n    output <span class=\"pl-k\">=</span> torch.zeros(dims)\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> stride across the first dimensions, add one to get the diagonal of the last dimension</span>\n    strides <span class=\"pl-k\">=</span> [output.stride(i) <span class=\"pl-k\">for</span> i <span class=\"pl-k\">in</span> torch.arange(<span class=\"pl-c1\">input</span>.dim() <span class=\"pl-k\">-</span> <span class=\"pl-c1\">1</span> )]\n    strides.append(output.size(<span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>) <span class=\"pl-k\">+</span> <span class=\"pl-c1\">1</span>)\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> stride and copy the imput to the diagonal </span>\n    output.as_strided(<span class=\"pl-c1\">input</span>.size(), strides ).copy_(<span class=\"pl-c1\">input</span>)\n    <span class=\"pl-k\">return</span> output    </pre></div>", "body_text": "Sure, that would work. But something like this might save some memory, since we wouldn't have to make a huge tensor full of indices. It's an in-place, though, so maybe not totally pytorchnic:\ndef batch_diagonal(input):\n    # idea from here: https://discuss.pytorch.org/t/batch-of-diagonal-matrix/13560\n    # batches a stack of vectors (batch x N) -> a stack of diagonal matrices (batch x N x N) \n    # works in  2D -> 3D, should also work in higher dimensions\n    # make a zero matrix, which duplicates the last dim of input\n    dims = [input.size(i) for i in torch.arange(input.dim())]\n    dims.append(dims[-1])\n    output = torch.zeros(dims)\n    # stride across the first dimensions, add one to get the diagonal of the last dimension\n    strides = [output.stride(i) for i in torch.arange(input.dim() - 1 )]\n    strides.append(output.size(-1) + 1)\n    # stride and copy the imput to the diagonal \n    output.as_strided(input.size(), strides ).copy_(input)\n    return output", "body": "Sure, that would work. But something like this might save some memory, since we wouldn't have to make a huge tensor full of indices. It's an in-place, though, so maybe not totally pytorchnic:\r\n\r\n```python\r\ndef batch_diagonal(input):\r\n    # idea from here: https://discuss.pytorch.org/t/batch-of-diagonal-matrix/13560\r\n    # batches a stack of vectors (batch x N) -> a stack of diagonal matrices (batch x N x N) \r\n    # works in  2D -> 3D, should also work in higher dimensions\r\n    # make a zero matrix, which duplicates the last dim of input\r\n    dims = [input.size(i) for i in torch.arange(input.dim())]\r\n    dims.append(dims[-1])\r\n    output = torch.zeros(dims)\r\n    # stride across the first dimensions, add one to get the diagonal of the last dimension\r\n    strides = [output.stride(i) for i in torch.arange(input.dim() - 1 )]\r\n    strides.append(output.size(-1) + 1)\r\n    # stride and copy the imput to the diagonal \r\n    output.as_strided(input.size(), strides ).copy_(input)\r\n    return output    \r\n```\r\n"}