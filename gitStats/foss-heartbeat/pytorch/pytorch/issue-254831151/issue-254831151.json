{"url": "https://api.github.com/repos/pytorch/pytorch/issues/2601", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/2601/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/2601/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/2601/events", "html_url": "https://github.com/pytorch/pytorch/issues/2601", "id": 254831151, "node_id": "MDU6SXNzdWUyNTQ4MzExNTE=", "number": 2601, "title": "Variable hook remains after `Variable.clone()`", "user": {"login": "yuandong-tian", "id": 2973937, "node_id": "MDQ6VXNlcjI5NzM5Mzc=", "avatar_url": "https://avatars3.githubusercontent.com/u/2973937?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yuandong-tian", "html_url": "https://github.com/yuandong-tian", "followers_url": "https://api.github.com/users/yuandong-tian/followers", "following_url": "https://api.github.com/users/yuandong-tian/following{/other_user}", "gists_url": "https://api.github.com/users/yuandong-tian/gists{/gist_id}", "starred_url": "https://api.github.com/users/yuandong-tian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yuandong-tian/subscriptions", "organizations_url": "https://api.github.com/users/yuandong-tian/orgs", "repos_url": "https://api.github.com/users/yuandong-tian/repos", "events_url": "https://api.github.com/users/yuandong-tian/events{/privacy}", "received_events_url": "https://api.github.com/users/yuandong-tian/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-09-02T19:25:23Z", "updated_at": "2017-09-08T03:29:02Z", "closed_at": "2017-09-03T16:14:07Z", "author_association": "NONE", "body_html": "<p>Here is one example.</p>\n<pre><code>import torch.nn as nn\nimport torch\nfrom torch.autograd import Variable\n\na = Variable(torch.FloatTensor(2, 2), requires_grad=True)\nb = Variable(torch.FloatTensor(2, 2), requires_grad=True)\nc = Variable(torch.FloatTensor(2, 2), requires_grad=True)\n\nd = a * b\ne = a.clone() * c\n\ndef hw_hook(s, grad):\n      print(s)\n\na.register_hook(lambda grad: hw_hook(\"a1\", grad))\n\nd.backward(Variable(torch.FloatTensor(2, 2).fill_(1.0)))\ne.backward(Variable(torch.FloatTensor(2, 2).fill_(1.0)))\n</code></pre>\n<p>It outputs two <code>a1</code> rather than one <code>a1</code>.</p>", "body_text": "Here is one example.\nimport torch.nn as nn\nimport torch\nfrom torch.autograd import Variable\n\na = Variable(torch.FloatTensor(2, 2), requires_grad=True)\nb = Variable(torch.FloatTensor(2, 2), requires_grad=True)\nc = Variable(torch.FloatTensor(2, 2), requires_grad=True)\n\nd = a * b\ne = a.clone() * c\n\ndef hw_hook(s, grad):\n      print(s)\n\na.register_hook(lambda grad: hw_hook(\"a1\", grad))\n\nd.backward(Variable(torch.FloatTensor(2, 2).fill_(1.0)))\ne.backward(Variable(torch.FloatTensor(2, 2).fill_(1.0)))\n\nIt outputs two a1 rather than one a1.", "body": "Here is one example. \r\n\r\n```\r\nimport torch.nn as nn\r\nimport torch\r\nfrom torch.autograd import Variable\r\n\r\na = Variable(torch.FloatTensor(2, 2), requires_grad=True)\r\nb = Variable(torch.FloatTensor(2, 2), requires_grad=True)\r\nc = Variable(torch.FloatTensor(2, 2), requires_grad=True)\r\n\r\nd = a * b\r\ne = a.clone() * c\r\n\r\ndef hw_hook(s, grad):\r\n      print(s)\r\n\r\na.register_hook(lambda grad: hw_hook(\"a1\", grad))\r\n\r\nd.backward(Variable(torch.FloatTensor(2, 2).fill_(1.0)))\r\ne.backward(Variable(torch.FloatTensor(2, 2).fill_(1.0)))\r\n```\r\n\r\nIt outputs two `a1` rather than one `a1`. "}