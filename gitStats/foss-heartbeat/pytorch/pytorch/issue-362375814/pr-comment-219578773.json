{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/219578773", "pull_request_review_id": 157796347, "id": 219578773, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxOTU3ODc3Mw==", "diff_hunk": "@@ -0,0 +1,59 @@\n+#pragma once\n+\n+#include <ATen/native/cpu/Loops.h>\n+#include <ATen/Parallel.h>\n+\n+#include <sstream>\n+\n+namespace at { namespace native { namespace {\n+\n+using namespace vec256;\n+\n+// reduction that is contiguous over the input in dim 0\n+template <typename traits>\n+static inline bool is_contiguous_reduction(const int64_t* strides) {\n+  return strides[0] == 0 &&\n+         strides[1] == sizeof(typename traits::arg2_t);\n+}\n+\n+// reduction that is contiguous over the input in dim 1\n+template <typename traits>\n+static inline bool is_outer_reduction(const int64_t* strides) {\n+  return strides[0] == 0 &&\n+         strides[2] == sizeof(typename traits::result_type) &&\n+         strides[3] == sizeof(typename traits::arg2_t);\n+}\n+\n+template <typename func_t, typename vec_func_t>\n+void binary_kernel_reduce_vec(TensorIterator& iter, func_t op, vec_func_t vop, int ident=0) {", "path": "aten/src/ATen/native/cpu/Reduce.h", "position": null, "original_position": 28, "commit_id": "85757031de20ad93e21ea7bf68d7c39e9698899d", "original_commit_id": "aeb0b9dd17ddef7b46d0ace6bcd42be2cbedbc0d", "user": {"login": "fmassa", "id": 9110200, "node_id": "MDQ6VXNlcjkxMTAyMDA=", "avatar_url": "https://avatars2.githubusercontent.com/u/9110200?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fmassa", "html_url": "https://github.com/fmassa", "followers_url": "https://api.github.com/users/fmassa/followers", "following_url": "https://api.github.com/users/fmassa/following{/other_user}", "gists_url": "https://api.github.com/users/fmassa/gists{/gist_id}", "starred_url": "https://api.github.com/users/fmassa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fmassa/subscriptions", "organizations_url": "https://api.github.com/users/fmassa/orgs", "repos_url": "https://api.github.com/users/fmassa/repos", "events_url": "https://api.github.com/users/fmassa/events{/privacy}", "received_events_url": "https://api.github.com/users/fmassa/received_events", "type": "User", "site_admin": false}, "body": "question: if we want to apply `TensorIterator` to `min`/`max` reduction, shouldn't we use `ident=-inf / +inf`?\r\nIn this case, would it be better to make `ident` of float type to support inf?", "created_at": "2018-09-21T17:53:37Z", "updated_at": "2018-11-23T15:51:47Z", "html_url": "https://github.com/pytorch/pytorch/pull/11908#discussion_r219578773", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/11908", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/219578773"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/11908#discussion_r219578773"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/11908"}}, "body_html": "<p>question: if we want to apply <code>TensorIterator</code> to <code>min</code>/<code>max</code> reduction, shouldn't we use <code>ident=-inf / +inf</code>?<br>\nIn this case, would it be better to make <code>ident</code> of float type to support inf?</p>", "body_text": "question: if we want to apply TensorIterator to min/max reduction, shouldn't we use ident=-inf / +inf?\nIn this case, would it be better to make ident of float type to support inf?"}