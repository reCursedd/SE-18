{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/220682389", "pull_request_review_id": 159147157, "id": 220682389, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyMDY4MjM4OQ==", "diff_hunk": "@@ -107,6 +107,15 @@ __device__ __forceinline__ T WARP_SHFL_DOWN(T value, unsigned int delta, int wid\n     return __shfl_down(value, delta, width);\n #endif\n }\n+template <>\n+__device__ __forceinline__ at::Half WARP_SHFL_DOWN(at::Half value, unsigned int delta, int width, unsigned int mask)", "path": "aten/src/THC/THCDeviceUtils.cuh", "position": null, "original_position": 5, "commit_id": "85757031de20ad93e21ea7bf68d7c39e9698899d", "original_commit_id": "aeb0b9dd17ddef7b46d0ace6bcd42be2cbedbc0d", "user": {"login": "colesbury", "id": 655866, "node_id": "MDQ6VXNlcjY1NTg2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/655866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colesbury", "html_url": "https://github.com/colesbury", "followers_url": "https://api.github.com/users/colesbury/followers", "following_url": "https://api.github.com/users/colesbury/following{/other_user}", "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions", "organizations_url": "https://api.github.com/users/colesbury/orgs", "repos_url": "https://api.github.com/users/colesbury/repos", "events_url": "https://api.github.com/users/colesbury/events{/privacy}", "received_events_url": "https://api.github.com/users/colesbury/received_events", "type": "User", "site_admin": false}, "body": "I'll change it to use float32 for intermediate values, but I don't really see how that's going to help. The output is still float16 so you still have overflow issues. You can see this in master with:\r\n\r\n```\r\nx = torch.ones(65520, device='cuda', dtype=torch.float16)\r\nx.sum()\r\n```\r\n\r\n```\r\ntensor(inf, device='cuda:0', dtype=torch.float16)\r\n```", "created_at": "2018-09-26T18:51:59Z", "updated_at": "2018-11-23T15:52:03Z", "html_url": "https://github.com/pytorch/pytorch/pull/11908#discussion_r220682389", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/11908", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/220682389"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/11908#discussion_r220682389"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/11908"}}, "body_html": "<p>I'll change it to use float32 for intermediate values, but I don't really see how that's going to help. The output is still float16 so you still have overflow issues. You can see this in master with:</p>\n<pre><code>x = torch.ones(65520, device='cuda', dtype=torch.float16)\nx.sum()\n</code></pre>\n<pre><code>tensor(inf, device='cuda:0', dtype=torch.float16)\n</code></pre>", "body_text": "I'll change it to use float32 for intermediate values, but I don't really see how that's going to help. The output is still float16 so you still have overflow issues. You can see this in master with:\nx = torch.ones(65520, device='cuda', dtype=torch.float16)\nx.sum()\n\ntensor(inf, device='cuda:0', dtype=torch.float16)", "in_reply_to_id": 219660664}