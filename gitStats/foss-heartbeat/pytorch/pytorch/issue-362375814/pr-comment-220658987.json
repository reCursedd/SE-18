{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/220658987", "pull_request_review_id": 159118255, "id": 220658987, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyMDY1ODk4Nw==", "diff_hunk": "@@ -107,6 +107,15 @@ __device__ __forceinline__ T WARP_SHFL_DOWN(T value, unsigned int delta, int wid\n     return __shfl_down(value, delta, width);\n #endif\n }\n+template <>\n+__device__ __forceinline__ at::Half WARP_SHFL_DOWN(at::Half value, unsigned int delta, int width, unsigned int mask)", "path": "aten/src/THC/THCDeviceUtils.cuh", "position": null, "original_position": 5, "commit_id": "85757031de20ad93e21ea7bf68d7c39e9698899d", "original_commit_id": "aeb0b9dd17ddef7b46d0ace6bcd42be2cbedbc0d", "user": {"login": "ngimel", "id": 15841449, "node_id": "MDQ6VXNlcjE1ODQxNDQ5", "avatar_url": "https://avatars3.githubusercontent.com/u/15841449?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ngimel", "html_url": "https://github.com/ngimel", "followers_url": "https://api.github.com/users/ngimel/followers", "following_url": "https://api.github.com/users/ngimel/following{/other_user}", "gists_url": "https://api.github.com/users/ngimel/gists{/gist_id}", "starred_url": "https://api.github.com/users/ngimel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ngimel/subscriptions", "organizations_url": "https://api.github.com/users/ngimel/orgs", "repos_url": "https://api.github.com/users/ngimel/repos", "events_url": "https://api.github.com/users/ngimel/events{/privacy}", "received_events_url": "https://api.github.com/users/ngimel/received_events", "type": "User", "site_admin": false}, "body": "But `warp_reduce` is called on the argument of type `arg_t` and `arg_t` is https://github.com/pytorch/pytorch/pull/11908/files#diff-662693ef7b7f32fa32d7179b6614fc16R199 (should be no narrower than fp32). I'm (we're) very suspect of any operations directly on halfs, it's precision/overflow/underflow risk. With current reduction ops we made sure that it never happens (all data is converted on read), and it would be great if it did not creep back in. ", "created_at": "2018-09-26T17:42:49Z", "updated_at": "2018-11-23T15:52:02Z", "html_url": "https://github.com/pytorch/pytorch/pull/11908#discussion_r220658987", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/11908", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/220658987"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/11908#discussion_r220658987"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/11908"}}, "body_html": "<p>But <code>warp_reduce</code> is called on the argument of type <code>arg_t</code> and <code>arg_t</code> is <a href=\"https://github.com/pytorch/pytorch/pull/11908/files#diff-662693ef7b7f32fa32d7179b6614fc16R199\">https://github.com/pytorch/pytorch/pull/11908/files#diff-662693ef7b7f32fa32d7179b6614fc16R199</a> (should be no narrower than fp32). I'm (we're) very suspect of any operations directly on halfs, it's precision/overflow/underflow risk. With current reduction ops we made sure that it never happens (all data is converted on read), and it would be great if it did not creep back in.</p>", "body_text": "But warp_reduce is called on the argument of type arg_t and arg_t is https://github.com/pytorch/pytorch/pull/11908/files#diff-662693ef7b7f32fa32d7179b6614fc16R199 (should be no narrower than fp32). I'm (we're) very suspect of any operations directly on halfs, it's precision/overflow/underflow risk. With current reduction ops we made sure that it never happens (all data is converted on read), and it would be great if it did not creep back in.", "in_reply_to_id": 219660664}