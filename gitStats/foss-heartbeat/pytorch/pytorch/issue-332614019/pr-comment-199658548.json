{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/199658548", "pull_request_review_id": 133820311, "id": 199658548, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTY1ODU0OA==", "diff_hunk": "@@ -109,13 +109,23 @@ class IDEEPFallbackOp final : public IDEEPOperator {\n           \"output type who needs copying.\");\n       const auto& src = local_output_blobs_[i]->template Get<TensorCPU>();\n \n+      auto src_dims = src.dims();\n+      if (src.ndim() == 0) {\n+        VLOG(1) << \"Copy output: index \" << i << \" skipped.\";\n+        Blob* dst = OperatorBase::OutputBlob(i);\n+        dst->Reset(new Tensor<CPUContext>());", "path": "caffe2/ideep/operators/operator_fallback_ideep.h", "position": null, "original_position": 8, "commit_id": "f9660c2af8f05713753754edcfa785ad187367bb", "original_commit_id": "6482ff4eaff14d8cc8d845eb824a6a9b185715bc", "user": {"login": "jgong5", "id": 8359223, "node_id": "MDQ6VXNlcjgzNTkyMjM=", "avatar_url": "https://avatars3.githubusercontent.com/u/8359223?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgong5", "html_url": "https://github.com/jgong5", "followers_url": "https://api.github.com/users/jgong5/followers", "following_url": "https://api.github.com/users/jgong5/following{/other_user}", "gists_url": "https://api.github.com/users/jgong5/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgong5/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgong5/subscriptions", "organizations_url": "https://api.github.com/users/jgong5/orgs", "repos_url": "https://api.github.com/users/jgong5/repos", "events_url": "https://api.github.com/users/jgong5/events{/privacy}", "received_events_url": "https://api.github.com/users/jgong5/received_events", "type": "User", "site_admin": false}, "body": "@yinghai Thanks for raising this concern. Yes, this is still a workaround assuming the following op can only accept CPU tensors since IDEEP tensor doesn't support 0-dim. We are working on a complete solution to support 0-dim tensors and then such a workaround is not needed any longer.", "created_at": "2018-07-03T00:54:02Z", "updated_at": "2018-11-23T15:46:41Z", "html_url": "https://github.com/pytorch/pytorch/pull/8541#discussion_r199658548", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/8541", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/199658548"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/8541#discussion_r199658548"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/8541"}}, "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1100089\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/yinghai\">@yinghai</a> Thanks for raising this concern. Yes, this is still a workaround assuming the following op can only accept CPU tensors since IDEEP tensor doesn't support 0-dim. We are working on a complete solution to support 0-dim tensors and then such a workaround is not needed any longer.</p>", "body_text": "@yinghai Thanks for raising this concern. Yes, this is still a workaround assuming the following op can only accept CPU tensors since IDEEP tensor doesn't support 0-dim. We are working on a complete solution to support 0-dim tensors and then such a workaround is not needed any longer.", "in_reply_to_id": 199589048}