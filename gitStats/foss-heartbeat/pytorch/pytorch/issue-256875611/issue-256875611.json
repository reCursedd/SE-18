{"url": "https://api.github.com/repos/pytorch/pytorch/issues/2699", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/2699/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/2699/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/2699/events", "html_url": "https://github.com/pytorch/pytorch/issues/2699", "id": 256875611, "node_id": "MDU6SXNzdWUyNTY4NzU2MTE=", "number": 2699, "title": "distributed broadcast (gloo backend) does not work for any tensor type other than Float and Double", "user": {"login": "ngimel", "id": 15841449, "node_id": "MDQ6VXNlcjE1ODQxNDQ5", "avatar_url": "https://avatars3.githubusercontent.com/u/15841449?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ngimel", "html_url": "https://github.com/ngimel", "followers_url": "https://api.github.com/users/ngimel/followers", "following_url": "https://api.github.com/users/ngimel/following{/other_user}", "gists_url": "https://api.github.com/users/ngimel/gists{/gist_id}", "starred_url": "https://api.github.com/users/ngimel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ngimel/subscriptions", "organizations_url": "https://api.github.com/users/ngimel/orgs", "repos_url": "https://api.github.com/users/ngimel/repos", "events_url": "https://api.github.com/users/ngimel/events{/privacy}", "received_events_url": "https://api.github.com/users/ngimel/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2017-09-11T23:54:51Z", "updated_at": "2018-04-20T15:51:58Z", "closed_at": "2018-04-20T15:51:58Z", "author_association": "CONTRIBUTOR", "body_html": "<p>The following snippet</p>\n<pre><code>import torch\nimport torch.distributed as dist\n\nworld_size=2\ndist_url = 'tcp://224.66.41.62:23456'\ndist_backend = 'gloo'\ntorch.cuda.synchronize()\nprint(\"initialized dist backend\")\ndist.init_process_group(backend=dist_backend, init_method=dist_url, world_size=world_size)\nten = torch.FloatTensor(4) \nif dist.get_rank() == 0:\n    ten.fill_(1)\nfor fn in [\"float\", \"double\", \"byte\", \"half\", \"char\", \"short\", \"int\", \"long\"]:\n   ten = getattr(ten, fn)()   \n   try: \n       dist.broadcast(ten,0)\n   except:\n       print(\"could not broadcast \",fn,\" tensor\")\nprint(\"Trying cuda\")\nten = ten.cuda()\nfor fn in [\"float\", \"double\", \"byte\", \"half\", \"char\", \"short\", \"int\", \"long\"]:\n   ten = getattr(ten, fn)()   \n   try: \n       dist.broadcast(ten,0)\n   except:\n       print(\"could not broadcast\",fn,\" tensor\")\n</code></pre>\n<p>launched with</p>\n<pre><code>CUDA_VISIBLE_DEVICES=0 python testbcast.py &amp;\nCUDA_VISIBLE_DEVICES=1 python testbcast.py &amp;\n</code></pre>\n<p>shows that the only types that don't error out are FloatTensor, DoubleTensor, CudaFloatTensor and CudaDoubleTensor.</p>", "body_text": "The following snippet\nimport torch\nimport torch.distributed as dist\n\nworld_size=2\ndist_url = 'tcp://224.66.41.62:23456'\ndist_backend = 'gloo'\ntorch.cuda.synchronize()\nprint(\"initialized dist backend\")\ndist.init_process_group(backend=dist_backend, init_method=dist_url, world_size=world_size)\nten = torch.FloatTensor(4) \nif dist.get_rank() == 0:\n    ten.fill_(1)\nfor fn in [\"float\", \"double\", \"byte\", \"half\", \"char\", \"short\", \"int\", \"long\"]:\n   ten = getattr(ten, fn)()   \n   try: \n       dist.broadcast(ten,0)\n   except:\n       print(\"could not broadcast \",fn,\" tensor\")\nprint(\"Trying cuda\")\nten = ten.cuda()\nfor fn in [\"float\", \"double\", \"byte\", \"half\", \"char\", \"short\", \"int\", \"long\"]:\n   ten = getattr(ten, fn)()   \n   try: \n       dist.broadcast(ten,0)\n   except:\n       print(\"could not broadcast\",fn,\" tensor\")\n\nlaunched with\nCUDA_VISIBLE_DEVICES=0 python testbcast.py &\nCUDA_VISIBLE_DEVICES=1 python testbcast.py &\n\nshows that the only types that don't error out are FloatTensor, DoubleTensor, CudaFloatTensor and CudaDoubleTensor.", "body": "The following snippet \r\n```\r\nimport torch\r\nimport torch.distributed as dist\r\n\r\nworld_size=2\r\ndist_url = 'tcp://224.66.41.62:23456'\r\ndist_backend = 'gloo'\r\ntorch.cuda.synchronize()\r\nprint(\"initialized dist backend\")\r\ndist.init_process_group(backend=dist_backend, init_method=dist_url, world_size=world_size)\r\nten = torch.FloatTensor(4) \r\nif dist.get_rank() == 0:\r\n    ten.fill_(1)\r\nfor fn in [\"float\", \"double\", \"byte\", \"half\", \"char\", \"short\", \"int\", \"long\"]:\r\n   ten = getattr(ten, fn)()   \r\n   try: \r\n       dist.broadcast(ten,0)\r\n   except:\r\n       print(\"could not broadcast \",fn,\" tensor\")\r\nprint(\"Trying cuda\")\r\nten = ten.cuda()\r\nfor fn in [\"float\", \"double\", \"byte\", \"half\", \"char\", \"short\", \"int\", \"long\"]:\r\n   ten = getattr(ten, fn)()   \r\n   try: \r\n       dist.broadcast(ten,0)\r\n   except:\r\n       print(\"could not broadcast\",fn,\" tensor\")\r\n```\r\nlaunched with \r\n```\r\nCUDA_VISIBLE_DEVICES=0 python testbcast.py &\r\nCUDA_VISIBLE_DEVICES=1 python testbcast.py &\r\n```\r\nshows that the only types that don't error out are FloatTensor, DoubleTensor, CudaFloatTensor and CudaDoubleTensor. \r\n"}