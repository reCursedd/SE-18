{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/204116495", "pull_request_review_id": 139146224, "id": 204116495, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDExNjQ5NQ==", "diff_hunk": "@@ -0,0 +1,83 @@\n+import torch\n+import torch.nn.functional as F\n+from torch.distributions import constraints\n+from torch.distributions.distribution import Distribution\n+from torch.distributions.utils import broadcast_all, probs_to_logits, lazy_property, logits_to_probs\n+\n+\n+class NegativeBinomial(Distribution):\n+    r\"\"\"\n+    Creates a Negative Binomial distribution, i.e. distribution\n+    of the number of independent identical Bernoulli trials\n+    needed before `total_count` failures are achieved. The probability\n+    of success of each Bernoulli trial is `probs`.\n+\n+    Args:\n+        total_count (float or Tensor): non-negative number of negative Bernoulli\n+            trials to stop, although the distribution is still valid for real\n+            valued count\n+        probs (Tensor): Event probabilities of success in the half open interval [0, 1)\n+        logits (Tensor): Event log-odds for probabilities of success\n+    \"\"\"\n+    arg_constraints = {'total_count': constraints.greater_than_eq(0),\n+                       'probs': constraints.half_open_interval(0., 1.)}\n+    support = constraints.nonnegative_integer\n+\n+    def __init__(self, total_count, probs=None, logits=None, validate_args=None):\n+        if (probs is None) == (logits is None):\n+            raise ValueError(\"Either `probs` or `logits` must be specified, but not both.\")\n+        if probs is not None:\n+            self.total_count, self.probs, = broadcast_all(total_count, probs)\n+            self.total_count = self.total_count.type_as(self.probs)\n+        else:\n+            self.total_count, self.logits, = broadcast_all(total_count, logits)\n+            self.total_count = self.total_count.type_as(self.logits)\n+\n+        self._param = self.probs if probs is not None else self.logits\n+        batch_shape = self._param.size()\n+        super(NegativeBinomial, self).__init__(batch_shape, validate_args=validate_args)\n+\n+    def _new(self, *args, **kwargs):\n+        return self._param.new(*args, **kwargs)\n+\n+    @property\n+    def mean(self):\n+        return self.total_count * torch.exp(self.logits)\n+\n+    @property\n+    def variance(self):\n+        return self.mean / torch.sigmoid(-self.logits)\n+\n+    @lazy_property\n+    def logits(self):\n+        return probs_to_logits(self.probs, is_binary=True)\n+\n+    @lazy_property\n+    def probs(self):\n+        return logits_to_probs(self.logits, is_binary=True)\n+\n+    @property\n+    def param_shape(self):\n+        return self._param.size()\n+\n+    @lazy_property\n+    def _gamma(self):\n+        return torch.distributions.Gamma(concentration=self.total_count,\n+                                         rate=(1. - self.probs) / self.probs)", "path": "torch/distributions/negative_binomial.py", "position": null, "original_position": 66, "commit_id": "77785d7475f34184746e37a5a1431548727c5b64", "original_commit_id": "fadc41657b78ef095652da8d187e2315ec4b395d", "user": {"login": "fritzo", "id": 648532, "node_id": "MDQ6VXNlcjY0ODUzMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/648532?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fritzo", "html_url": "https://github.com/fritzo", "followers_url": "https://api.github.com/users/fritzo/followers", "following_url": "https://api.github.com/users/fritzo/following{/other_user}", "gists_url": "https://api.github.com/users/fritzo/gists{/gist_id}", "starred_url": "https://api.github.com/users/fritzo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fritzo/subscriptions", "organizations_url": "https://api.github.com/users/fritzo/orgs", "repos_url": "https://api.github.com/users/fritzo/repos", "events_url": "https://api.github.com/users/fritzo/events{/privacy}", "received_events_url": "https://api.github.com/users/fritzo/received_events", "type": "User", "site_admin": false}, "body": "Can you avoid the divide-by-zero error by either using `self.logits.exp()` here or using `torch.distributions.utils.clamp_probs()` (which is used internally by `probs_to_logits()` to compute `self.logits`)?", "created_at": "2018-07-20T17:32:09Z", "updated_at": "2018-11-23T15:47:47Z", "html_url": "https://github.com/pytorch/pytorch/pull/9345#discussion_r204116495", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/9345", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/204116495"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/9345#discussion_r204116495"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/9345"}}, "body_html": "<p>Can you avoid the divide-by-zero error by either using <code>self.logits.exp()</code> here or using <code>torch.distributions.utils.clamp_probs()</code> (which is used internally by <code>probs_to_logits()</code> to compute <code>self.logits</code>)?</p>", "body_text": "Can you avoid the divide-by-zero error by either using self.logits.exp() here or using torch.distributions.utils.clamp_probs() (which is used internally by probs_to_logits() to compute self.logits)?"}