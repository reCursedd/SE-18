{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/202191957", "pull_request_review_id": 136844729, "id": 202191957, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMjE5MTk1Nw==", "diff_hunk": "@@ -0,0 +1,83 @@\n+from numbers import Number\n+import torch\n+import torch.nn.functional as F\n+from torch.distributions import constraints\n+from torch.distributions.distribution import Distribution\n+from torch.distributions.utils import broadcast_all, probs_to_logits, lazy_property, logits_to_probs\n+\n+\n+class NegativeBinomial(Distribution):\n+    r\"\"\"\n+        Creates a Negative Binomial distribution parameterized by\n+        a Bernoulli trial with probability `probs` of success that\n+        occur until we observe `total_count` number of failures.\n+\n+    Args:\n+        total_count (int or Tensor): number of negative Bernoulli trials to stop\n+        probs (Tensor): Event probabilities of success\n+        logits (Tensor): Event log-odds for probabilities of success\n+    \"\"\"\n+\n+    arg_constraints = {'total_count': constraints.nonnegative_integer,\n+                       'probs': constraints.unit_interval}\n+    support = constraints.nonnegative_integer\n+\n+    def __init__(self, total_count=1, probs=None, logits=None, validate_args=None):\n+        if (probs is None) == (logits is None):\n+            raise ValueError(\"Either `probs` or `logits` must be specified, but not both.\")\n+        if probs is not None:\n+            self.total_count, self.probs, = broadcast_all(total_count, probs)\n+            self.total_count = self.total_count.type_as(self.logits)", "path": "torch/distributions/negative_binomial.py", "position": null, "original_position": 30, "commit_id": "77785d7475f34184746e37a5a1431548727c5b64", "original_commit_id": "7bd376671b0f4f78f69045db376dd5f49eb36349", "user": {"login": "fritzo", "id": 648532, "node_id": "MDQ6VXNlcjY0ODUzMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/648532?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fritzo", "html_url": "https://github.com/fritzo", "followers_url": "https://api.github.com/users/fritzo/followers", "following_url": "https://api.github.com/users/fritzo/following{/other_user}", "gists_url": "https://api.github.com/users/fritzo/gists{/gist_id}", "starred_url": "https://api.github.com/users/fritzo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fritzo/subscriptions", "organizations_url": "https://api.github.com/users/fritzo/orgs", "repos_url": "https://api.github.com/users/fritzo/repos", "events_url": "https://api.github.com/users/fritzo/events{/privacy}", "received_events_url": "https://api.github.com/users/fritzo/received_events", "type": "User", "site_admin": false}, "body": "Use `.type_as(self.probs)` here to avoid eager computation of `logits`", "created_at": "2018-07-12T21:57:11Z", "updated_at": "2018-11-23T15:47:15Z", "html_url": "https://github.com/pytorch/pytorch/pull/9345#discussion_r202191957", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/9345", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/202191957"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/9345#discussion_r202191957"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/9345"}}, "body_html": "<p>Use <code>.type_as(self.probs)</code> here to avoid eager computation of <code>logits</code></p>", "body_text": "Use .type_as(self.probs) here to avoid eager computation of logits"}