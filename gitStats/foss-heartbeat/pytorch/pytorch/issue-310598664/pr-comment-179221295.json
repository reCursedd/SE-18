{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/179221295", "pull_request_review_id": 109424685, "id": 179221295, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTIyMTI5NQ==", "diff_hunk": "@@ -287,9 +287,97 @@ void removeNopPacking(std::shared_ptr<Graph>& graph) {\n \n     n->removeAllInputs();\n     it.destroyCurrent();\n+\n+    if (input->outputs()[0]->uses().size() == 0) {\n+      input->destroy();\n+    }\n+  }\n+}\n+\n+void fixDefaultRNNState(std::shared_ptr<Graph>& graph, Node * n, int input_index) {\n+  auto initial_state = n->inputs()[input_index];\n+  if (initial_state->node()->kind() == onnx::Constant ||\n+      (initial_state->node()->kind() == onnx::Slice &&\n+       initial_state->node()->inputs()[0]->node()->kind() == onnx::Constant)) {\n+    Node * shape_of_input = graph->create(onnx::Shape, 1);\n+    shape_of_input->insertBefore(n);\n+    shape_of_input->addInput(n->inputs()[0]);\n+\n+    Node * gather_indices = graph->create(onnx::Constant, 1);\n+    gather_indices->insertBefore(n);\n+    gather_indices->t_(attr::value, at::Scalar(1).toTensor());\n+\n+    Node * batch_size = graph->create(onnx::Gather, 1);\n+    batch_size->insertBefore(n);\n+    batch_size->addInput(shape_of_input->outputs()[0]);\n+    batch_size->addInput(gather_indices->outputs()[0]);\n+\n+    Node * unsqueezed_batch_size = graph->create(onnx::Unsqueeze, 1);\n+    unsqueezed_batch_size->insertBefore(n);\n+    unsqueezed_batch_size->addInput(batch_size->outputs()[0]);\n+    unsqueezed_batch_size->is_(attr::axes, {0});\n+\n+    Node * hidden_size = graph->create(onnx::Constant, 1);\n+    hidden_size->insertBefore(n);\n+    hidden_size->t_(attr::value, at::Scalar(n->i(attr::hidden_size)).toTensor());\n+\n+    Node * unsqueezed_hidden_size = graph->create(onnx::Unsqueeze, 1);\n+    unsqueezed_hidden_size->insertBefore(n);\n+    unsqueezed_hidden_size->addInput(hidden_size->outputs()[0]);\n+    unsqueezed_hidden_size->is_(attr::axes, {0});\n+\n+    Node * num_directions = graph->create(onnx::Constant, 1);\n+    num_directions->insertBefore(n);\n+    num_directions->t_(attr::value, at::Scalar(n->hasAttribute(attr::direction) && n->s(attr::direction) == \"bidirectional\" ? 2 : 1).toTensor());\n+\n+    Node * unsqueezed_num_directions = graph->create(onnx::Unsqueeze, 1);\n+    unsqueezed_num_directions->insertBefore(n);\n+    unsqueezed_num_directions->addInput(num_directions->outputs()[0]);\n+    unsqueezed_num_directions->is_(attr::axes, {0});\n+\n+    Node * concated_dims = graph->create(onnx::Concat, 1);\n+    concated_dims->insertBefore(n);\n+    concated_dims->i_(attr::axis, 0);\n+    concated_dims->addInput(unsqueezed_num_directions->outputs()[0]);\n+    concated_dims->addInput(unsqueezed_batch_size->outputs()[0]);\n+    concated_dims->addInput(unsqueezed_hidden_size->outputs()[0]);\n+\n+    Node * constant_fill = graph->create(onnx::ConstantFill, 1);\n+    constant_fill->insertBefore(n);\n+    constant_fill->i_(attr::input_as_shape, 1);\n+    constant_fill->addInput(concated_dims->outputs()[0]);\n+\n+    n->replaceInput(input_index, constant_fill->outputs()[0]);\n+  }\n+}\n+\n+void fixDefaultRnnHiddenState(std::shared_ptr<Graph>& graph) {\n+  for (auto it = graph->nodes().begin(); it != graph->nodes().end(); ++it) {\n+    auto* n = *it;\n+\n+    if (!isRNN(n)) {\n+      continue;\n+    }\n+    if (n->inputs().size() < 6) {", "path": "torch/csrc/jit/passes/onnx/peephole.cpp", "position": null, "original_position": 75, "commit_id": "5d5c4d6dc0c0098120d7bb49e4924c7e60fb3463", "original_commit_id": "404d98ae4476f93d5f012e720f29abc65ce9622e", "user": {"login": "anderspapitto", "id": 1388690, "node_id": "MDQ6VXNlcjEzODg2OTA=", "avatar_url": "https://avatars3.githubusercontent.com/u/1388690?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anderspapitto", "html_url": "https://github.com/anderspapitto", "followers_url": "https://api.github.com/users/anderspapitto/followers", "following_url": "https://api.github.com/users/anderspapitto/following{/other_user}", "gists_url": "https://api.github.com/users/anderspapitto/gists{/gist_id}", "starred_url": "https://api.github.com/users/anderspapitto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anderspapitto/subscriptions", "organizations_url": "https://api.github.com/users/anderspapitto/orgs", "repos_url": "https://api.github.com/users/anderspapitto/repos", "events_url": "https://api.github.com/users/anderspapitto/events{/privacy}", "received_events_url": "https://api.github.com/users/anderspapitto/received_events", "type": "User", "site_admin": false}, "body": "++ will add comment", "created_at": "2018-04-04T17:26:58Z", "updated_at": "2018-11-23T15:41:43Z", "html_url": "https://github.com/pytorch/pytorch/pull/6199#discussion_r179221295", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/6199", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/179221295"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/6199#discussion_r179221295"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/6199"}}, "body_html": "<p>++ will add comment</p>", "body_text": "++ will add comment", "in_reply_to_id": 179071378}