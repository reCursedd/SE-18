{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/440410777", "html_url": "https://github.com/pytorch/pytorch/pull/14142#issuecomment-440410777", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/14142", "id": 440410777, "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MDQxMDc3Nw==", "user": {"login": "teng-li", "id": 8120856, "node_id": "MDQ6VXNlcjgxMjA4NTY=", "avatar_url": "https://avatars2.githubusercontent.com/u/8120856?v=4", "gravatar_id": "", "url": "https://api.github.com/users/teng-li", "html_url": "https://github.com/teng-li", "followers_url": "https://api.github.com/users/teng-li/followers", "following_url": "https://api.github.com/users/teng-li/following{/other_user}", "gists_url": "https://api.github.com/users/teng-li/gists{/gist_id}", "starred_url": "https://api.github.com/users/teng-li/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/teng-li/subscriptions", "organizations_url": "https://api.github.com/users/teng-li/orgs", "repos_url": "https://api.github.com/users/teng-li/repos", "events_url": "https://api.github.com/users/teng-li/events{/privacy}", "received_events_url": "https://api.github.com/users/teng-li/received_events", "type": "User", "site_admin": false}, "created_at": "2018-11-20T20:01:31Z", "updated_at": "2018-11-20T20:03:52Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=9845\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/pietern\">@pietern</a> I disagree, all NCCL/cuda ops are async by nature. Barriers are meant to be used with collectives. By just making a CPU code sync point without considering the collective makes no sense. Think about it as (not exactly the case but close enough), all of your work happens on a different thread, and you would like your barrier sync point to be on your work thread. This is exactly the same behavior for MPI backend as well. I would like to keep the current implementation.</p>\n<p>Additionally, test_distributed won't even be able to pass with your proposed approach.</p>", "body_text": "@pietern I disagree, all NCCL/cuda ops are async by nature. Barriers are meant to be used with collectives. By just making a CPU code sync point without considering the collective makes no sense. Think about it as (not exactly the case but close enough), all of your work happens on a different thread, and you would like your barrier sync point to be on your work thread. This is exactly the same behavior for MPI backend as well. I would like to keep the current implementation.\nAdditionally, test_distributed won't even be able to pass with your proposed approach.", "body": "@pietern I disagree, all NCCL/cuda ops are async by nature. Barriers are meant to be used with collectives. By just making a CPU code sync point without considering the collective makes no sense. Think about it as (not exactly the case but close enough), all of your work happens on a different thread, and you would like your barrier sync point to be on your work thread. This is exactly the same behavior for MPI backend as well. I would like to keep the current implementation.\r\n\r\nAdditionally, test_distributed won't even be able to pass with your proposed approach."}