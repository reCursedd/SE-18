{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/412151957", "html_url": "https://github.com/pytorch/pytorch/issues/10393#issuecomment-412151957", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/10393", "id": 412151957, "node_id": "MDEyOklzc3VlQ29tbWVudDQxMjE1MTk1Nw==", "user": {"login": "ArmenAg", "id": 4429794, "node_id": "MDQ6VXNlcjQ0Mjk3OTQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/4429794?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ArmenAg", "html_url": "https://github.com/ArmenAg", "followers_url": "https://api.github.com/users/ArmenAg/followers", "following_url": "https://api.github.com/users/ArmenAg/following{/other_user}", "gists_url": "https://api.github.com/users/ArmenAg/gists{/gist_id}", "starred_url": "https://api.github.com/users/ArmenAg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ArmenAg/subscriptions", "organizations_url": "https://api.github.com/users/ArmenAg/orgs", "repos_url": "https://api.github.com/users/ArmenAg/repos", "events_url": "https://api.github.com/users/ArmenAg/events{/privacy}", "received_events_url": "https://api.github.com/users/ArmenAg/received_events", "type": "User", "site_admin": false}, "created_at": "2018-08-10T17:31:28Z", "updated_at": "2018-08-10T17:31:28Z", "author_association": "CONTRIBUTOR", "body_html": "<p>I don't think this is an issue. datasets.CIFAR10 loads up the data into a numpy array (<a href=\"https://github.com/pytorch/vision/blob/master/torchvision/datasets/cifar.py#L95\">https://github.com/pytorch/vision/blob/master/torchvision/datasets/cifar.py#L95</a>). The default collate functionality for collating numpy arrays is simply to use torch.from_numpy() which preserves type (as it should).</p>\n<pre><code>\nif elem_type.__name__ == 'ndarray':\n            # array of string classes and object\n            if re.search('[SaUO]', elem.dtype.str) is not None:\n                raise TypeError(error_msg.format(elem.dtype))\n\n            return torch.stack([torch.from_numpy(b) for b in batch], 0)\n</code></pre>", "body_text": "I don't think this is an issue. datasets.CIFAR10 loads up the data into a numpy array (https://github.com/pytorch/vision/blob/master/torchvision/datasets/cifar.py#L95). The default collate functionality for collating numpy arrays is simply to use torch.from_numpy() which preserves type (as it should).\n\nif elem_type.__name__ == 'ndarray':\n            # array of string classes and object\n            if re.search('[SaUO]', elem.dtype.str) is not None:\n                raise TypeError(error_msg.format(elem.dtype))\n\n            return torch.stack([torch.from_numpy(b) for b in batch], 0)", "body": "I don't think this is an issue. datasets.CIFAR10 loads up the data into a numpy array (https://github.com/pytorch/vision/blob/master/torchvision/datasets/cifar.py#L95). The default collate functionality for collating numpy arrays is simply to use torch.from_numpy() which preserves type (as it should).\r\n```\r\n\r\nif elem_type.__name__ == 'ndarray':\r\n            # array of string classes and object\r\n            if re.search('[SaUO]', elem.dtype.str) is not None:\r\n                raise TypeError(error_msg.format(elem.dtype))\r\n\r\n            return torch.stack([torch.from_numpy(b) for b in batch], 0)\r\n```\r\n\r\n"}