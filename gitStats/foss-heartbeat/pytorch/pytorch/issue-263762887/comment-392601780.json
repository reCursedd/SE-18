{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/392601780", "html_url": "https://github.com/pytorch/pytorch/issues/3025#issuecomment-392601780", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/3025", "id": 392601780, "node_id": "MDEyOklzc3VlQ29tbWVudDM5MjYwMTc4MA==", "user": {"login": "fmassa", "id": 9110200, "node_id": "MDQ6VXNlcjkxMTAyMDA=", "avatar_url": "https://avatars2.githubusercontent.com/u/9110200?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fmassa", "html_url": "https://github.com/fmassa", "followers_url": "https://api.github.com/users/fmassa/followers", "following_url": "https://api.github.com/users/fmassa/following{/other_user}", "gists_url": "https://api.github.com/users/fmassa/gists{/gist_id}", "starred_url": "https://api.github.com/users/fmassa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fmassa/subscriptions", "organizations_url": "https://api.github.com/users/fmassa/orgs", "repos_url": "https://api.github.com/users/fmassa/repos", "events_url": "https://api.github.com/users/fmassa/events{/privacy}", "received_events_url": "https://api.github.com/users/fmassa/received_events", "type": "User", "site_admin": false}, "created_at": "2018-05-28T20:52:58Z", "updated_at": "2018-05-28T20:52:58Z", "author_association": "MEMBER", "body_html": "<p>Sure! Also, instead of implementing <code>in1d</code>, I think we should implement the more general <code>isin</code>, as recommended by <a href=\"https://docs.scipy.org/doc/numpy/reference/generated/numpy.in1d.html\" rel=\"nofollow\">the numpy documentation</a><br>\nHere is a slightly more runtime efficient (but memory-hungry and suboptimal) implementation (requires PyTorch compiled from master):</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">isin</span>(<span class=\"pl-smi\">ar1</span>, <span class=\"pl-smi\">ar2</span>):\n    <span class=\"pl-k\">return</span> (ar1[<span class=\"pl-c1\">...</span>, <span class=\"pl-c1\">None</span>] <span class=\"pl-k\">==</span> ar2).any(<span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>)</pre></div>", "body_text": "Sure! Also, instead of implementing in1d, I think we should implement the more general isin, as recommended by the numpy documentation\nHere is a slightly more runtime efficient (but memory-hungry and suboptimal) implementation (requires PyTorch compiled from master):\ndef isin(ar1, ar2):\n    return (ar1[..., None] == ar2).any(-1)", "body": "Sure! Also, instead of implementing `in1d`, I think we should implement the more general `isin`, as recommended by [the numpy documentation](https://docs.scipy.org/doc/numpy/reference/generated/numpy.in1d.html)\r\nHere is a slightly more runtime efficient (but memory-hungry and suboptimal) implementation (requires PyTorch compiled from master):\r\n```python\r\ndef isin(ar1, ar2):\r\n    return (ar1[..., None] == ar2).any(-1)\r\n```"}