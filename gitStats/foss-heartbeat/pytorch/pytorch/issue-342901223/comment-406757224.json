{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/406757224", "html_url": "https://github.com/pytorch/pytorch/pull/9608#issuecomment-406757224", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/9608", "id": 406757224, "node_id": "MDEyOklzc3VlQ29tbWVudDQwNjc1NzIyNA==", "user": {"login": "colesbury", "id": 655866, "node_id": "MDQ6VXNlcjY1NTg2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/655866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colesbury", "html_url": "https://github.com/colesbury", "followers_url": "https://api.github.com/users/colesbury/followers", "following_url": "https://api.github.com/users/colesbury/following{/other_user}", "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions", "organizations_url": "https://api.github.com/users/colesbury/orgs", "repos_url": "https://api.github.com/users/colesbury/repos", "events_url": "https://api.github.com/users/colesbury/events{/privacy}", "received_events_url": "https://api.github.com/users/colesbury/received_events", "type": "User", "site_admin": false}, "created_at": "2018-07-21T00:34:21Z", "updated_at": "2018-07-21T00:34:21Z", "author_association": "MEMBER", "body_html": "<p>It doesn't work well with tagged enums like in <code>Scalar.h</code>. The current code doesn't issue a warning for very subtle reasons. Slight changes to the code (like moving a method inline) will break the build.</p>\n<p>It also fails with things like <div class=\"border rounded-1 my-2\">\n  <div class=\"f6 px-3 py-2 lh-condensed border-bottom bg-gray-light\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/pytorch/pytorch/blob/5e84403d5fc92ad2ed594b86a436c571dac55d30/aten/src/THCUNN/generic/BatchNormalization.cu#L28\">pytorch/aten/src/THCUNN/generic/BatchNormalization.cu</a>\n    </p>\n    <p class=\"mb-0 text-gray-light\">\n         Line 28\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/pytorch/pytorch/commit/5e84403d5fc92ad2ed594b86a436c571dac55d30\">5e84403</a>\n    </p>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L28\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"28\"></td>\n          <td id=\"LC28\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> size[Dim - <span class=\"pl-c1\">1</span>] *= t-&gt;<span class=\"pl-c1\">size</span>(i); </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n</p>\n<p>I'm not sure what <code>(void)x</code> has to do with <code>-Wmaybe-uninitialized</code>. <code>maybe-uninitialized</code> doesn't check for unused variables.</p>\n<p>The heuristics used depend on compiler version. For example, locally with GCC 4.8.1 I see warnings about that BatchNormalization line, but later versions of GCC are slightly smarter. The reverse is often true too.</p>\n<p>We work really hard to avoid flakiness in unit tests. We should take the same approach when dealing with compiler warnings, particularly when they are treated as errors.</p>\n<p>The <code>-Wuninitialized</code> warning is <strong>much</strong> better. We have that on and should keep that on.</p>", "body_text": "It doesn't work well with tagged enums like in Scalar.h. The current code doesn't issue a warning for very subtle reasons. Slight changes to the code (like moving a method inline) will break the build.\nIt also fails with things like \n  \n    \n      pytorch/aten/src/THCUNN/generic/BatchNormalization.cu\n    \n    \n         Line 28\n      in\n      5e84403\n    \n    \n    \n    \n\n        \n          \n           size[Dim - 1] *= t->size(i); \n        \n    \n  \n\n\nI'm not sure what (void)x has to do with -Wmaybe-uninitialized. maybe-uninitialized doesn't check for unused variables.\nThe heuristics used depend on compiler version. For example, locally with GCC 4.8.1 I see warnings about that BatchNormalization line, but later versions of GCC are slightly smarter. The reverse is often true too.\nWe work really hard to avoid flakiness in unit tests. We should take the same approach when dealing with compiler warnings, particularly when they are treated as errors.\nThe -Wuninitialized warning is much better. We have that on and should keep that on.", "body": "It doesn't work well with tagged enums like in `Scalar.h`. The current code doesn't issue a warning for very subtle reasons. Slight changes to the code (like moving a method inline) will break the build.\r\n\r\nIt also fails with things like https://github.com/pytorch/pytorch/blob/5e84403d5fc92ad2ed594b86a436c571dac55d30/aten/src/THCUNN/generic/BatchNormalization.cu#L28\r\n\r\nI'm not sure what `(void)x` has to do with `-Wmaybe-uninitialized`. `maybe-uninitialized` doesn't check for unused variables.\r\n\r\nThe heuristics used depend on compiler version. For example, locally with GCC 4.8.1 I see warnings about that BatchNormalization line, but later versions of GCC are slightly smarter. The reverse is often true too.\r\n\r\nWe work really hard to avoid flakiness in unit tests. We should take the same approach when dealing with compiler warnings, particularly when they are treated as errors.\r\n\r\nThe `-Wuninitialized` warning is **much** better. We have that on and should keep that on. "}