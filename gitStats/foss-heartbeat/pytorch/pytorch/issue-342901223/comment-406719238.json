{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/406719238", "html_url": "https://github.com/pytorch/pytorch/pull/9608#issuecomment-406719238", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/9608", "id": 406719238, "node_id": "MDEyOklzc3VlQ29tbWVudDQwNjcxOTIzOA==", "user": {"login": "goldsborough", "id": 6429851, "node_id": "MDQ6VXNlcjY0Mjk4NTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/6429851?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goldsborough", "html_url": "https://github.com/goldsborough", "followers_url": "https://api.github.com/users/goldsborough/followers", "following_url": "https://api.github.com/users/goldsborough/following{/other_user}", "gists_url": "https://api.github.com/users/goldsborough/gists{/gist_id}", "starred_url": "https://api.github.com/users/goldsborough/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goldsborough/subscriptions", "organizations_url": "https://api.github.com/users/goldsborough/orgs", "repos_url": "https://api.github.com/users/goldsborough/repos", "events_url": "https://api.github.com/users/goldsborough/events{/privacy}", "received_events_url": "https://api.github.com/users/goldsborough/received_events", "type": "User", "site_admin": false}, "created_at": "2018-07-20T20:33:24Z", "updated_at": "2018-07-20T20:33:24Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=655866\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/colesbury\">@colesbury</a> do you have examples of the flakiness? I quenched this warning in all of ATen/PyTorch a couple months ago and only had to add <code>(void)x</code> to a few places. The primary issue was when code was <code>#ifdef</code>-ed out. I think quenching the edge cases with <code>(void)x</code> would be fine. I remember places in the autograd where integers were not initialized to zero (usually member variables) and we're just kind of lucky they always ended up being zero</p>\n<p>I personally think keeping warnings on in all CI is better because otherwise they'll just stay silent until someone builds with a particular configuration (e.g. on the FAIR cluster or on macOs) on their local machine, and then we'll have to fix the warning spew on those configurations anyway</p>", "body_text": "@colesbury do you have examples of the flakiness? I quenched this warning in all of ATen/PyTorch a couple months ago and only had to add (void)x to a few places. The primary issue was when code was #ifdef-ed out. I think quenching the edge cases with (void)x would be fine. I remember places in the autograd where integers were not initialized to zero (usually member variables) and we're just kind of lucky they always ended up being zero\nI personally think keeping warnings on in all CI is better because otherwise they'll just stay silent until someone builds with a particular configuration (e.g. on the FAIR cluster or on macOs) on their local machine, and then we'll have to fix the warning spew on those configurations anyway", "body": "@colesbury do you have examples of the flakiness? I quenched this warning in all of ATen/PyTorch a couple months ago and only had to add `(void)x` to a few places. The primary issue was when code was `#ifdef`-ed out. I think quenching the edge cases with `(void)x` would be fine. I remember places in the autograd where integers were not initialized to zero (usually member variables) and we're just kind of lucky they always ended up being zero\r\n\r\nI personally think keeping warnings on in all CI is better because otherwise they'll just stay silent until someone builds with a particular configuration (e.g. on the FAIR cluster or on macOs) on their local machine, and then we'll have to fix the warning spew on those configurations anyway"}