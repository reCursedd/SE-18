{"url": "https://api.github.com/repos/pytorch/pytorch/issues/9026", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/9026/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/9026/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/9026/events", "html_url": "https://github.com/pytorch/pytorch/issues/9026", "id": 336966002, "node_id": "MDU6SXNzdWUzMzY5NjYwMDI=", "number": 9026, "title": "(CAFFE_ENFORCE_EQ_WITH_CALLER tensor.h) caffe2 C++ windows10  runtime error! ", "user": {"login": "ibrahimsoliman", "id": 18678158, "node_id": "MDQ6VXNlcjE4Njc4MTU4", "avatar_url": "https://avatars3.githubusercontent.com/u/18678158?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibrahimsoliman", "html_url": "https://github.com/ibrahimsoliman", "followers_url": "https://api.github.com/users/ibrahimsoliman/followers", "following_url": "https://api.github.com/users/ibrahimsoliman/following{/other_user}", "gists_url": "https://api.github.com/users/ibrahimsoliman/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibrahimsoliman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibrahimsoliman/subscriptions", "organizations_url": "https://api.github.com/users/ibrahimsoliman/orgs", "repos_url": "https://api.github.com/users/ibrahimsoliman/repos", "events_url": "https://api.github.com/users/ibrahimsoliman/events{/privacy}", "received_events_url": "https://api.github.com/users/ibrahimsoliman/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 890282107, "node_id": "MDU6TGFiZWw4OTAyODIxMDc=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/caffe2", "name": "caffe2", "color": "210aa8", "default": false}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-06-29T11:36:05Z", "updated_at": "2018-07-03T19:16:03Z", "closed_at": null, "author_association": "NONE", "body_html": "<h2>Issue description</h2>\n<p>I have successfully build and install caffe2 on windows 10 and while i am testing my below code in visual studio 2017, i got an run-time error when Creating a tensor (TensorCPU), and filling its contents with the given values from my script.<br>\nI have compiled and test this code on ubuntu and it is function in a good way..</p>\n<h2>Code example</h2>\n<p><code></code>#include <br>\n#include &lt;caffe2/core/init.h&gt;<br>\n#include &lt;caffe2/core/net.h&gt;<br>\n#include &lt;caffe2/utils/proto_utils.h&gt;<br>\n#include <br>\n#include <br>\n#include <br>\n#include &lt;opencv2/highgui/highgui.hpp&gt;<br>\n#include &lt;opencv2/imgproc/imgproc.hpp&gt;<br>\n#include \"classes.h\"<br>\nCAFFE2_DEFINE_string(init_net, \"C:\\Users\\HIMA\\source\\repos\\ConsoleApplication1\\model\\init_net.pb\", \"init net\");<br>\nCAFFE2_DEFINE_string(predict_net, \"C:\\Users\\HIMA\\source\\repos\\ConsoleApplication1\\model\\predict_net.pb\", \"predict net\");<br>\nCAFFE2_DEFINE_string(file, \"C:\\Users\\HIMA\\source\\repos\\ConsoleApplication1\\image\\lemon.jpg\", \"list of images separated by comma\");<br>\nCAFFE2_DEFINE_int(size, 224, \"image size in pixel\");<br>\nnamespace caffe2 {<br>\ncv::Mat preprocess(const std::string&amp; image_file, int* min_size, int* max_size, bool use_crop, float&amp; scale) {<br>\ncv::Mat image = cv::imread(image_file);<br>\ncv::Size dst_size;<br>\nif (min_size != nullptr) {<br>\ndst_size.width = std::max(*min_size * image.cols / image.rows, *min_size);<br>\ndst_size.height = std::max(*min_size * image.rows / image.cols, *min_size);<br>\n}<br>\nelse if (max_size != nullptr) {<br>\nif (image.cols &gt; *max_size &amp;&amp; image.rows &gt; *max_size) {<br>\ndst_size.width = std::min(*max_size * image.cols / image.rows, *max_size);<br>\ndst_size.height = std::min(*max_size * image.rows / image.cols, *max_size);<br>\n}<br>\nelse {<br>\ndst_size.width = image.cols;<br>\ndst_size.height = image.rows;<br>\n}<br>\n}<br>\nelse {<br>\nCAFFE_ENFORCE(false);<br>\n}<br>\nscale = static_cast(image.cols) / dst_size.width;</p>\n<pre><code>\tcv::resize(image, image, dst_size);\n\tif (use_crop) {\n\t\tint size = std::min(image.cols, image.rows);\n\t\tcv::Rect crop((image.cols - size) / 2, (image.rows - size) / 2, size, size);\n\t\timage = image(crop);\n\t}\n\timage.convertTo(image, CV_32FC3, 1.0, -128);\n\treturn image;\n}\n\n\nvoid run() {\n\tstd::cout &lt;&lt; std::endl &lt;&lt; \"==&gt; using CPU\" &lt;&lt; std::endl;\n\tDeviceOption device_option;\n\tstd::shared_ptr&lt;CPUContext&gt; ctx_cpu;\n\tdevice_option.set_device_type(CPU);\n\tctx_cpu.reset(new CPUContext(device_option));\n\tstd::cout &lt;&lt; std::endl &lt;&lt; \"==&gt; using CPU\" &lt;&lt; std::endl;\n\n\n\tstd::cout &lt;&lt; \"==&gt; init network\" &lt;&lt; std::endl;\n\tNetDef init_net, predict_net;\n\tCAFFE_ENFORCE(ReadProtoFromFile(FLAGS_init_net, &amp;init_net));\n\tCAFFE_ENFORCE(ReadProtoFromFile(FLAGS_predict_net, &amp;predict_net));\n\tWorkspace workspace(\"default\");\n\tCAFFE_ENFORCE(workspace.RunNetOnce(init_net));\n\n\n\t// https://stackoverflow.com/questions/1894886/parsing-a-comma-delimited-stdstring/10861816\n\tstd::cout &lt;&lt; \"==&gt; parse image list\" &lt;&lt; std::endl;\n\tstd::stringstream ss(FLAGS_file);\n\tstd::vector&lt;std::string&gt; image_list;\n\twhile (ss.good()) {\n\t\tstd::string substr;\n\t\tstd::getline(ss, substr, ',');\n\t\timage_list.push_back(substr);\n\t}\n\tsize_t batch_size = image_list.size();\n\tCAFFE_ENFORCE(true);\n\n\tstd::cout &lt;&lt; \"==&gt; prepare batch \";\n\tconst size_t channel(3);\n\tstd::vector&lt;float&gt; data_batch;\n\tstd::vector&lt;float&gt; info_batch;\n\tfor (const std::string&amp; image_file : image_list) {\n\t\t// load image\n\t\tbool use_crop = true;\n\t\tfloat scale;\n\t\tcv::Mat image;\n\t\timage = preprocess(image_file, &amp;FLAGS_size, nullptr, /* use_crop */  true, scale);\n\t\tinfo_batch.push_back(image.rows);\n\t\tinfo_batch.push_back(image.cols);\n\t\tinfo_batch.push_back(scale);\n\n\t\t// convert NHWC to NCHW\n\t\tstd::vector&lt;cv::Mat&gt; channels(channel);\n\t\tcv::split(image, channels);\n\t\tstd::vector&lt;float&gt; data;\n\t\tfor (cv::Mat &amp;c : channels) {\n\t\t\tdata.insert(data.end(), (float *)c.datastart, (float *)c.dataend);\n\t\t}\n\t\tdata_batch.insert(data_batch.end(), data.begin(), data.end());\n\t}\n\n\tstd::clock_t start;\n\tdouble duration;\n\tstart = std::clock();\n\n\tsize_t height = info_batch[0];\n\tsize_t width = info_batch[1];\n\tstd::cout &lt;&lt; \"(\" &lt;&lt; batch_size &lt;&lt; \" x \" &lt;&lt; channel &lt;&lt; \" x \" &lt;&lt; height &lt;&lt; \" x \" &lt;&lt; width &lt;&lt; \")\" &lt;&lt; std::endl;\n\tstd::vector&lt;TIndex&gt; dims(( batch_size, channel, height, width ));\n\t**_TensorCPU tensor(dims, data_batch, nullptr);  // here is the function that call tensor.h_**\n\tTensorCPU im_info(std::vector&lt;TIndex&gt;(batch_size, 3), info_batch, nullptr);\n\n\n\tstd::cout &lt;&lt; \"==&gt; feedforward\" &lt;&lt; std::endl;\n\n\tworkspace.CreateBlob(\"0\")-&gt;GetMutable&lt;TensorCPU&gt;()-&gt;CopyFrom(tensor);\n\n\tCAFFE_ENFORCE(workspace.RunNetOnce(predict_net));\n\n\n\tauto&amp;output = workspace.GetBlob(\"442\")-&gt;Get&lt;TensorCPU&gt;();\n\n\tstd::cout &lt;&lt; \"==&gt; retrieve results\" &lt;&lt; std::endl;\n\tfor (size_t i = 0; i &lt; batch_size; i++) {\n\t\tconst auto&amp;prob = output.data&lt;float&gt;() + i * classes.size();\n\t\tstd::vector&lt;float&gt; pred(prob, prob + classes.size());\n\t\tauto it = std::max_element(std::begin(pred), std::end(pred));\n\t\tauto maxValue = *it;\n\t\tauto maxIndex = std::distance(std::begin(pred), it);\n\t\tstd::string image_file = image_list[i].substr(image_list[i].find_last_of('/') + 1);\n\t\tstd::cout &lt;&lt; \"P( \" &lt;&lt; classes[maxIndex] &lt;&lt; \" | \" &lt;&lt; image_file\n\t\t\t&lt;&lt; \" ) = \" &lt;&lt; maxValue &lt;&lt; std::endl;\n\t}\n\tduration = (std::clock() - start) / (double)CLOCKS_PER_SEC;\n\tstd::cout &lt;&lt; \"printf: \" &lt;&lt; duration &lt;&lt; '\\n';\n}\n</code></pre>\n<p>}<br>\nint main(int argc, char **argv) {<br>\ncaffe2::GlobalInit(&amp;argc, &amp;argv);<br>\ncaffe2::run();<br>\nreturn 0;<br>\n}<br>\n<code></code></p>\n<p>The error happen in this line below on tensor.h<br>\n<code>CAFFE_ENFORCE_EQ_WITH_CALLER(values.size(), size_);</code></p>\n<h2>System Info</h2>\n<p>Unhandled exception at 0x00007FFED188F218 in ConsoleApplication1.exe: Microsoft C++ exception: caffe2::EnforceNotMet at memory location 0x000000C439AFE870.</p>\n<ul>\n<li>Caffe2</li>\n<li>install from Source</li>\n<li>Build as release from visual studio</li>\n<li>OS: Windows 10</li>\n</ul>", "body_text": "Issue description\nI have successfully build and install caffe2 on windows 10 and while i am testing my below code in visual studio 2017, i got an run-time error when Creating a tensor (TensorCPU), and filling its contents with the given values from my script.\nI have compiled and test this code on ubuntu and it is function in a good way..\nCode example\n#include \n#include <caffe2/core/init.h>\n#include <caffe2/core/net.h>\n#include <caffe2/utils/proto_utils.h>\n#include \n#include \n#include \n#include <opencv2/highgui/highgui.hpp>\n#include <opencv2/imgproc/imgproc.hpp>\n#include \"classes.h\"\nCAFFE2_DEFINE_string(init_net, \"C:\\Users\\HIMA\\source\\repos\\ConsoleApplication1\\model\\init_net.pb\", \"init net\");\nCAFFE2_DEFINE_string(predict_net, \"C:\\Users\\HIMA\\source\\repos\\ConsoleApplication1\\model\\predict_net.pb\", \"predict net\");\nCAFFE2_DEFINE_string(file, \"C:\\Users\\HIMA\\source\\repos\\ConsoleApplication1\\image\\lemon.jpg\", \"list of images separated by comma\");\nCAFFE2_DEFINE_int(size, 224, \"image size in pixel\");\nnamespace caffe2 {\ncv::Mat preprocess(const std::string& image_file, int* min_size, int* max_size, bool use_crop, float& scale) {\ncv::Mat image = cv::imread(image_file);\ncv::Size dst_size;\nif (min_size != nullptr) {\ndst_size.width = std::max(*min_size * image.cols / image.rows, *min_size);\ndst_size.height = std::max(*min_size * image.rows / image.cols, *min_size);\n}\nelse if (max_size != nullptr) {\nif (image.cols > *max_size && image.rows > *max_size) {\ndst_size.width = std::min(*max_size * image.cols / image.rows, *max_size);\ndst_size.height = std::min(*max_size * image.rows / image.cols, *max_size);\n}\nelse {\ndst_size.width = image.cols;\ndst_size.height = image.rows;\n}\n}\nelse {\nCAFFE_ENFORCE(false);\n}\nscale = static_cast(image.cols) / dst_size.width;\n\tcv::resize(image, image, dst_size);\n\tif (use_crop) {\n\t\tint size = std::min(image.cols, image.rows);\n\t\tcv::Rect crop((image.cols - size) / 2, (image.rows - size) / 2, size, size);\n\t\timage = image(crop);\n\t}\n\timage.convertTo(image, CV_32FC3, 1.0, -128);\n\treturn image;\n}\n\n\nvoid run() {\n\tstd::cout << std::endl << \"==> using CPU\" << std::endl;\n\tDeviceOption device_option;\n\tstd::shared_ptr<CPUContext> ctx_cpu;\n\tdevice_option.set_device_type(CPU);\n\tctx_cpu.reset(new CPUContext(device_option));\n\tstd::cout << std::endl << \"==> using CPU\" << std::endl;\n\n\n\tstd::cout << \"==> init network\" << std::endl;\n\tNetDef init_net, predict_net;\n\tCAFFE_ENFORCE(ReadProtoFromFile(FLAGS_init_net, &init_net));\n\tCAFFE_ENFORCE(ReadProtoFromFile(FLAGS_predict_net, &predict_net));\n\tWorkspace workspace(\"default\");\n\tCAFFE_ENFORCE(workspace.RunNetOnce(init_net));\n\n\n\t// https://stackoverflow.com/questions/1894886/parsing-a-comma-delimited-stdstring/10861816\n\tstd::cout << \"==> parse image list\" << std::endl;\n\tstd::stringstream ss(FLAGS_file);\n\tstd::vector<std::string> image_list;\n\twhile (ss.good()) {\n\t\tstd::string substr;\n\t\tstd::getline(ss, substr, ',');\n\t\timage_list.push_back(substr);\n\t}\n\tsize_t batch_size = image_list.size();\n\tCAFFE_ENFORCE(true);\n\n\tstd::cout << \"==> prepare batch \";\n\tconst size_t channel(3);\n\tstd::vector<float> data_batch;\n\tstd::vector<float> info_batch;\n\tfor (const std::string& image_file : image_list) {\n\t\t// load image\n\t\tbool use_crop = true;\n\t\tfloat scale;\n\t\tcv::Mat image;\n\t\timage = preprocess(image_file, &FLAGS_size, nullptr, /* use_crop */  true, scale);\n\t\tinfo_batch.push_back(image.rows);\n\t\tinfo_batch.push_back(image.cols);\n\t\tinfo_batch.push_back(scale);\n\n\t\t// convert NHWC to NCHW\n\t\tstd::vector<cv::Mat> channels(channel);\n\t\tcv::split(image, channels);\n\t\tstd::vector<float> data;\n\t\tfor (cv::Mat &c : channels) {\n\t\t\tdata.insert(data.end(), (float *)c.datastart, (float *)c.dataend);\n\t\t}\n\t\tdata_batch.insert(data_batch.end(), data.begin(), data.end());\n\t}\n\n\tstd::clock_t start;\n\tdouble duration;\n\tstart = std::clock();\n\n\tsize_t height = info_batch[0];\n\tsize_t width = info_batch[1];\n\tstd::cout << \"(\" << batch_size << \" x \" << channel << \" x \" << height << \" x \" << width << \")\" << std::endl;\n\tstd::vector<TIndex> dims(( batch_size, channel, height, width ));\n\t**_TensorCPU tensor(dims, data_batch, nullptr);  // here is the function that call tensor.h_**\n\tTensorCPU im_info(std::vector<TIndex>(batch_size, 3), info_batch, nullptr);\n\n\n\tstd::cout << \"==> feedforward\" << std::endl;\n\n\tworkspace.CreateBlob(\"0\")->GetMutable<TensorCPU>()->CopyFrom(tensor);\n\n\tCAFFE_ENFORCE(workspace.RunNetOnce(predict_net));\n\n\n\tauto&output = workspace.GetBlob(\"442\")->Get<TensorCPU>();\n\n\tstd::cout << \"==> retrieve results\" << std::endl;\n\tfor (size_t i = 0; i < batch_size; i++) {\n\t\tconst auto&prob = output.data<float>() + i * classes.size();\n\t\tstd::vector<float> pred(prob, prob + classes.size());\n\t\tauto it = std::max_element(std::begin(pred), std::end(pred));\n\t\tauto maxValue = *it;\n\t\tauto maxIndex = std::distance(std::begin(pred), it);\n\t\tstd::string image_file = image_list[i].substr(image_list[i].find_last_of('/') + 1);\n\t\tstd::cout << \"P( \" << classes[maxIndex] << \" | \" << image_file\n\t\t\t<< \" ) = \" << maxValue << std::endl;\n\t}\n\tduration = (std::clock() - start) / (double)CLOCKS_PER_SEC;\n\tstd::cout << \"printf: \" << duration << '\\n';\n}\n\n}\nint main(int argc, char **argv) {\ncaffe2::GlobalInit(&argc, &argv);\ncaffe2::run();\nreturn 0;\n}\n\nThe error happen in this line below on tensor.h\nCAFFE_ENFORCE_EQ_WITH_CALLER(values.size(), size_);\nSystem Info\nUnhandled exception at 0x00007FFED188F218 in ConsoleApplication1.exe: Microsoft C++ exception: caffe2::EnforceNotMet at memory location 0x000000C439AFE870.\n\nCaffe2\ninstall from Source\nBuild as release from visual studio\nOS: Windows 10", "body": "## Issue description\r\n\r\nI have successfully build and install caffe2 on windows 10 and while i am testing my below code in visual studio 2017, i got an run-time error when Creating a tensor (TensorCPU), and filling its contents with the given values from my script.\r\nI have compiled and test this code on ubuntu and it is function in a good way..\r\n\r\n## Code example\r\n`\r\n`#include <tuple>\r\n#include <caffe2/core/init.h>\r\n#include <caffe2/core/net.h>\r\n#include <caffe2/utils/proto_utils.h>\r\n#include <iostream>\r\n#include <cstdio>\r\n#include <ctime>\r\n#include <opencv2/highgui/highgui.hpp>\r\n#include <opencv2/imgproc/imgproc.hpp>\r\n#include \"classes.h\"\r\nCAFFE2_DEFINE_string(init_net, \"C:\\\\Users\\\\HIMA\\\\source\\\\repos\\\\ConsoleApplication1\\\\model\\\\init_net.pb\", \"init net\");\r\nCAFFE2_DEFINE_string(predict_net, \"C:\\\\Users\\\\HIMA\\\\source\\\\repos\\\\ConsoleApplication1\\\\model\\\\predict_net.pb\", \"predict net\");\r\nCAFFE2_DEFINE_string(file, \"C:\\\\Users\\\\HIMA\\\\source\\\\repos\\\\ConsoleApplication1\\\\image\\\\lemon.jpg\", \"list of images separated by comma\");\r\nCAFFE2_DEFINE_int(size, 224, \"image size in pixel\");\r\nnamespace caffe2 {\r\n\tcv::Mat preprocess(const std::string& image_file, int* min_size, int* max_size, bool use_crop, float& scale) {\r\n\t\tcv::Mat image = cv::imread(image_file);\r\n\t\tcv::Size dst_size;\r\n\t\tif (min_size != nullptr) {\r\n\t\t\tdst_size.width = std::max(*min_size * image.cols / image.rows, *min_size);\r\n\t\t\tdst_size.height = std::max(*min_size * image.rows / image.cols, *min_size);\r\n\t\t}\r\n\t\telse if (max_size != nullptr) {\r\n\t\t\tif (image.cols > *max_size && image.rows > *max_size) {\r\n\t\t\t\tdst_size.width = std::min(*max_size * image.cols / image.rows, *max_size);\r\n\t\t\t\tdst_size.height = std::min(*max_size * image.rows / image.cols, *max_size);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tdst_size.width = image.cols;\r\n\t\t\t\tdst_size.height = image.rows;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tCAFFE_ENFORCE(false);\r\n\t\t}\r\n\t\tscale = static_cast<float>(image.cols) / dst_size.width;\r\n\r\n\t\tcv::resize(image, image, dst_size);\r\n\t\tif (use_crop) {\r\n\t\t\tint size = std::min(image.cols, image.rows);\r\n\t\t\tcv::Rect crop((image.cols - size) / 2, (image.rows - size) / 2, size, size);\r\n\t\t\timage = image(crop);\r\n\t\t}\r\n\t\timage.convertTo(image, CV_32FC3, 1.0, -128);\r\n\t\treturn image;\r\n\t}\r\n\r\n\r\n\tvoid run() {\r\n\t\tstd::cout << std::endl << \"==> using CPU\" << std::endl;\r\n\t\tDeviceOption device_option;\r\n\t\tstd::shared_ptr<CPUContext> ctx_cpu;\r\n\t\tdevice_option.set_device_type(CPU);\r\n\t\tctx_cpu.reset(new CPUContext(device_option));\r\n\t\tstd::cout << std::endl << \"==> using CPU\" << std::endl;\r\n\r\n\r\n\t\tstd::cout << \"==> init network\" << std::endl;\r\n\t\tNetDef init_net, predict_net;\r\n\t\tCAFFE_ENFORCE(ReadProtoFromFile(FLAGS_init_net, &init_net));\r\n\t\tCAFFE_ENFORCE(ReadProtoFromFile(FLAGS_predict_net, &predict_net));\r\n\t\tWorkspace workspace(\"default\");\r\n\t\tCAFFE_ENFORCE(workspace.RunNetOnce(init_net));\r\n\r\n\r\n\t\t// https://stackoverflow.com/questions/1894886/parsing-a-comma-delimited-stdstring/10861816\r\n\t\tstd::cout << \"==> parse image list\" << std::endl;\r\n\t\tstd::stringstream ss(FLAGS_file);\r\n\t\tstd::vector<std::string> image_list;\r\n\t\twhile (ss.good()) {\r\n\t\t\tstd::string substr;\r\n\t\t\tstd::getline(ss, substr, ',');\r\n\t\t\timage_list.push_back(substr);\r\n\t\t}\r\n\t\tsize_t batch_size = image_list.size();\r\n\t\tCAFFE_ENFORCE(true);\r\n\r\n\t\tstd::cout << \"==> prepare batch \";\r\n\t\tconst size_t channel(3);\r\n\t\tstd::vector<float> data_batch;\r\n\t\tstd::vector<float> info_batch;\r\n\t\tfor (const std::string& image_file : image_list) {\r\n\t\t\t// load image\r\n\t\t\tbool use_crop = true;\r\n\t\t\tfloat scale;\r\n\t\t\tcv::Mat image;\r\n\t\t\timage = preprocess(image_file, &FLAGS_size, nullptr, /* use_crop */  true, scale);\r\n\t\t\tinfo_batch.push_back(image.rows);\r\n\t\t\tinfo_batch.push_back(image.cols);\r\n\t\t\tinfo_batch.push_back(scale);\r\n\r\n\t\t\t// convert NHWC to NCHW\r\n\t\t\tstd::vector<cv::Mat> channels(channel);\r\n\t\t\tcv::split(image, channels);\r\n\t\t\tstd::vector<float> data;\r\n\t\t\tfor (cv::Mat &c : channels) {\r\n\t\t\t\tdata.insert(data.end(), (float *)c.datastart, (float *)c.dataend);\r\n\t\t\t}\r\n\t\t\tdata_batch.insert(data_batch.end(), data.begin(), data.end());\r\n\t\t}\r\n\r\n\t\tstd::clock_t start;\r\n\t\tdouble duration;\r\n\t\tstart = std::clock();\r\n\r\n\t\tsize_t height = info_batch[0];\r\n\t\tsize_t width = info_batch[1];\r\n\t\tstd::cout << \"(\" << batch_size << \" x \" << channel << \" x \" << height << \" x \" << width << \")\" << std::endl;\r\n\t\tstd::vector<TIndex> dims(( batch_size, channel, height, width ));\r\n\t\t**_TensorCPU tensor(dims, data_batch, nullptr);  // here is the function that call tensor.h_**\r\n\t\tTensorCPU im_info(std::vector<TIndex>(batch_size, 3), info_batch, nullptr);\r\n\r\n\r\n\t\tstd::cout << \"==> feedforward\" << std::endl;\r\n\r\n\t\tworkspace.CreateBlob(\"0\")->GetMutable<TensorCPU>()->CopyFrom(tensor);\r\n\r\n\t\tCAFFE_ENFORCE(workspace.RunNetOnce(predict_net));\r\n\r\n\r\n\t\tauto&output = workspace.GetBlob(\"442\")->Get<TensorCPU>();\r\n\r\n\t\tstd::cout << \"==> retrieve results\" << std::endl;\r\n\t\tfor (size_t i = 0; i < batch_size; i++) {\r\n\t\t\tconst auto&prob = output.data<float>() + i * classes.size();\r\n\t\t\tstd::vector<float> pred(prob, prob + classes.size());\r\n\t\t\tauto it = std::max_element(std::begin(pred), std::end(pred));\r\n\t\t\tauto maxValue = *it;\r\n\t\t\tauto maxIndex = std::distance(std::begin(pred), it);\r\n\t\t\tstd::string image_file = image_list[i].substr(image_list[i].find_last_of('/') + 1);\r\n\t\t\tstd::cout << \"P( \" << classes[maxIndex] << \" | \" << image_file\r\n\t\t\t\t<< \" ) = \" << maxValue << std::endl;\r\n\t\t}\r\n\t\tduration = (std::clock() - start) / (double)CLOCKS_PER_SEC;\r\n\t\tstd::cout << \"printf: \" << duration << '\\n';\r\n\t}\r\n\r\n}\r\nint main(int argc, char **argv) {\r\n\tcaffe2::GlobalInit(&argc, &argv);\r\n\tcaffe2::run();\r\n\treturn 0;\r\n}\r\n`\r\n`\r\n\r\nThe error happen in this line below on tensor.h\r\n`CAFFE_ENFORCE_EQ_WITH_CALLER(values.size(), size_);`\r\n\r\n\r\n## System Info\r\nUnhandled exception at 0x00007FFED188F218 in ConsoleApplication1.exe: Microsoft C++ exception: caffe2::EnforceNotMet at memory location 0x000000C439AFE870.\r\n\r\n\r\n- Caffe2\r\n- install from Source\r\n- Build as release from visual studio \r\n- OS: Windows 10\r\n"}