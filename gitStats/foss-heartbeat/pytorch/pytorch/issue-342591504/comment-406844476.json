{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/406844476", "html_url": "https://github.com/pytorch/pytorch/pull/9584#issuecomment-406844476", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/9584", "id": 406844476, "node_id": "MDEyOklzc3VlQ29tbWVudDQwNjg0NDQ3Ng==", "user": {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, "created_at": "2018-07-22T06:28:34Z", "updated_at": "2018-07-22T06:28:34Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Rebase notes:</p>\n<ul>\n<li>\n<p>Non mechanical changes were required in shape_analysis.cpp to get everything working again. I enabled shape_analysis to work \"ByRunningIt\" when an input is constant in addition to other scenarios, which works around a lot of the corner cases for attributes. I also implemented gatherTensor even for flattened varargs because the logic was clearer than handling cat specifically (still would be good to just get rid of varargs and have actual lists)</p>\n</li>\n<li>\n<p>ir.cpp also saw some changes to hook the <code>get</code> infrastructure up to the new way of representing constants.  One change: I removed all the default-value logic here. Nodes are never missing default values when they exist in a graph. The compiler processes the schema and always inserts the defaults. So it was possible to remove than handling and then simply the way the functions work. Further simplification was possible because IValue already handles the templated conversions.</p>\n</li>\n<li>\n<p>In the process I discovered that <code>input(size_t)</code> and <code>input(Symbol name)</code> cause ambiguity problems. This only appeared once the Symbol version got marked const, but I believe was lurking there subtly the whole time. I rename the Symbol version to <code>namedInput</code> for now. Maybe we can sort something out here.</p>\n</li>\n</ul>", "body_text": "Rebase notes:\n\n\nNon mechanical changes were required in shape_analysis.cpp to get everything working again. I enabled shape_analysis to work \"ByRunningIt\" when an input is constant in addition to other scenarios, which works around a lot of the corner cases for attributes. I also implemented gatherTensor even for flattened varargs because the logic was clearer than handling cat specifically (still would be good to just get rid of varargs and have actual lists)\n\n\nir.cpp also saw some changes to hook the get infrastructure up to the new way of representing constants.  One change: I removed all the default-value logic here. Nodes are never missing default values when they exist in a graph. The compiler processes the schema and always inserts the defaults. So it was possible to remove than handling and then simply the way the functions work. Further simplification was possible because IValue already handles the templated conversions.\n\n\nIn the process I discovered that input(size_t) and input(Symbol name) cause ambiguity problems. This only appeared once the Symbol version got marked const, but I believe was lurking there subtly the whole time. I rename the Symbol version to namedInput for now. Maybe we can sort something out here.", "body": "Rebase notes:\r\n\r\n* Non mechanical changes were required in shape_analysis.cpp to get everything working again. I enabled shape_analysis to work \"ByRunningIt\" when an input is constant in addition to other scenarios, which works around a lot of the corner cases for attributes. I also implemented gatherTensor even for flattened varargs because the logic was clearer than handling cat specifically (still would be good to just get rid of varargs and have actual lists)\r\n\r\n* ir.cpp also saw some changes to hook the `get` infrastructure up to the new way of representing constants.  One change: I removed all the default-value logic here. Nodes are never missing default values when they exist in a graph. The compiler processes the schema and always inserts the defaults. So it was possible to remove than handling and then simply the way the functions work. Further simplification was possible because IValue already handles the templated conversions.\r\n\r\n* In the process I discovered that `input(size_t)` and `input(Symbol name)` cause ambiguity problems. This only appeared once the Symbol version got marked const, but I believe was lurking there subtly the whole time. I rename the Symbol version to `namedInput` for now. Maybe we can sort something out here. "}