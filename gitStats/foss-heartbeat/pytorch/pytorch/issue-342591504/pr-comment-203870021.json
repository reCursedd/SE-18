{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/203870021", "pull_request_review_id": 138839907, "id": 203870021, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzg3MDAyMQ==", "diff_hunk": "@@ -132,20 +133,37 @@ void repeatBody(Block *body, int64_t times) {\n   EliminateDeadCode(body, false);\n }\n \n+//TODO(zach): we need to replace these with a generic facility for resolving overloads\n+// currently we cant us SymbolicVariable because it assumes we are computing on tensors\n+// once we have something like emitBuiltinCall usable outside of the compiler,\n+// we can replace these with symbolic variable\n+Value* intMath(Symbol sym, Value* a, Value* b) {\n+  auto& g = *a->owningGraph();\n+  return g.insertNode(g.create(aten::div, {a, b}))\n+      ->output()\n+      ->setType(IntType::get());\n+}\n+Value* intMath(Symbol sym, Value* a, int64_t b) {\n+  return intMath(sym, a, createConstant(*a->owningGraph(), b));\n+}\n+\n // Replaces the builtin loop counter with a \"mutable\" variable outside of the loop.\n void replaceLoopCounter(Node *loop) {\n   Graph *graph = loop->owningGraph();\n   Block *body = loop->blocks().at(0);\n-  Node *init_counter_node = graph->createConstant(at::CPU(at::kLong).scalarTensor(0))\n-                                 ->insertBefore(loop);\n-  loop->insertInput(2, init_counter_node->output());\n+  Value* init_counter;\n+  {\n+    WithInsertPoint guard(loop);", "path": "torch/csrc/jit/passes/loop_unrolling.cpp", "position": null, "original_position": 35, "commit_id": "6a9e59de5c6c7e7821e48863cd70d8fee3fc1870", "original_commit_id": "d185b8f5c2bc76ff588b66d28a20e268cf4e91f5", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Do we really need the extra point? The insert point guard below will simply override this one. Also, maybe we should consider an optional arg to `createConstant` which would provide the insert point to avoid code like this", "created_at": "2018-07-19T21:00:31Z", "updated_at": "2018-11-23T15:47:45Z", "html_url": "https://github.com/pytorch/pytorch/pull/9584#discussion_r203870021", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/9584", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/203870021"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/9584#discussion_r203870021"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/9584"}}, "body_html": "<p>Do we really need the extra point? The insert point guard below will simply override this one. Also, maybe we should consider an optional arg to <code>createConstant</code> which would provide the insert point to avoid code like this</p>", "body_text": "Do we really need the extra point? The insert point guard below will simply override this one. Also, maybe we should consider an optional arg to createConstant which would provide the insert point to avoid code like this"}