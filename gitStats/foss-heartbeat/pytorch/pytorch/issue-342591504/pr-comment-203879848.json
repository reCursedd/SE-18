{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/203879848", "pull_request_review_id": 138839907, "id": 203879848, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzg3OTg0OA==", "diff_hunk": "@@ -42,21 +42,37 @@ static inline IValue pop(Stack & stack) {\n   return r;\n }\n \n+// variadic pop:\n+// int64_t a; at::Tensor b;\n+// pop(stack, a, b);\n+// equivalent to:\n+// b = pop(stack).toTensor();\n+// a = pop(stack).toInt();\n+template<typename... Types>\n+static inline void pop(Stack& stack, Types&... args) {\n+  size_t i = 0;\n+  constexpr size_t N = sizeof...(args);\n+  int result[N] = {\n+    (args = std::move(peek(stack,i++, N)).template to<Types>(),0)...\n+  };\n+  (void) result;\n+  drop(stack, N);\n+}\n+template<typename... Types>\n+static inline void push(Stack& stack, Types... args) {\n+  constexpr size_t N = sizeof...(args);\n+  int result[N] = {\n+    (stack.push_back(std::forward<Types>(args)), 0)...\n+  };", "path": "torch/csrc/jit/stack.h", "position": 33, "original_position": 25, "commit_id": "6a9e59de5c6c7e7821e48863cd70d8fee3fc1870", "original_commit_id": "d185b8f5c2bc76ff588b66d28a20e268cf4e91f5", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "lol is that the only way to write side-effectful operations using argument packs in C++? I guess you could probably expand it to a list of comma separated expressions ending with `0` that you assign to this variable (removes the need for an array)", "created_at": "2018-07-19T21:34:01Z", "updated_at": "2018-11-23T15:47:45Z", "html_url": "https://github.com/pytorch/pytorch/pull/9584#discussion_r203879848", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/9584", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/203879848"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/9584#discussion_r203879848"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/9584"}}, "body_html": "<p>lol is that the only way to write side-effectful operations using argument packs in C++? I guess you could probably expand it to a list of comma separated expressions ending with <code>0</code> that you assign to this variable (removes the need for an array)</p>", "body_text": "lol is that the only way to write side-effectful operations using argument packs in C++? I guess you could probably expand it to a list of comma separated expressions ending with 0 that you assign to this variable (removes the need for an array)"}