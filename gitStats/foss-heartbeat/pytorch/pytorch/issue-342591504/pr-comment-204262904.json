{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/204262904", "pull_request_review_id": 139308537, "id": 204262904, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDI2MjkwNA==", "diff_hunk": "@@ -34,47 +35,66 @@ int64_t wrapDim(int64_t dim, at::IntList sizes) {\n   return dim;\n }\n \n-at::Tensor representativeTensor(const TensorType * type) {\n-  auto backend = type->device() == -1 ? at::kCPU : at::kCUDA;\n-  at::DeviceGuard device_guard(type->device());\n-  auto & attype = at::getType(backend, type->scalarType());\n-  return attype.tensor(type->sizes(), type->strides()).zero_();\n+IValue representativeValue(Value* v) {\n+  TypePtr type_ = v->type();\n+  // if the value is actually constant, just use it!\n+  if(auto iv = toIValue(v)) {\n+    return *iv;\n+  }\n+  if (TensorType* type = type_->cast<TensorType>()) {\n+    auto backend = type->device() == -1 ? at::kCPU : at::kCUDA;\n+    at::DeviceGuard device_guard(type->device());\n+    auto& attype = at::getType(backend, type->scalarType());\n+    return attype.tensor(type->sizes(), type->strides()).zero_();\n+  } else if (type_->isSubtypeOf(*FloatType::get())) {\n+    return 0.f;\n+  }\n+  // we should not get here because isValidArgumentForRunning should have\n+  // prevented it\n+  std::stringstream ss;\n+  ss << \"unable to create representative value for: \" << type_->str()\n+     << \". File a bug report.\";\n+  throw std::runtime_error(ss.str());\n }\n \n void PropagateShapeOnBlock(Block * block, bool insert_expands=true);\n \n+// for each node in the schema with type Tensor, extract the TensorType\n+// returns at::nullopt if any Tensor in the schema does not have a known shape\n+// ignores non-tensor in the list of inputs\n at::optional<std::vector<TensorType*>> gatherTensorTypes(Node *node) {\n   std::vector<TensorType*> tensor_types;\n-  tensor_types.reserve(node->inputs().size());\n-  // TODO (apaszke): Remove once we stop using attributes\n-  // XXX: we also make the exception for cat, because we need shape prop to work for it\n-  // (we have tests). We'll have to remove the special case once we stop flattening lists into inputs.\n-  if (node->hasAttributes() || node->kind() == aten::cat) {\n-    std::vector<Value*> inputs = node->inputs();\n-    if (node->kind() == aten::cat && inputs.back()->type()->isSubtypeOf(*IntType::get())) {\n-      inputs.pop_back();\n-    }\n-    for (Value *v : inputs) {\n-      TensorType* type = v->type()->cast<TensorType>();\n-      if(!type) return at::nullopt;\n-      tensor_types.push_back(type);\n-    }\n-  } else {\n-    auto & schema = node->schema();\n-    auto & args = schema.arguments;\n-    // XXX: This gets triggered for nodes that have Tensor[] as arguments.\n-    // Those are currently very annoying to handle, because the lists are simply\n-    // inlined into the node inputs, so we bail out from shape propagation for now.\n-    if (schema.is_vararg || args.size() != node->inputs().size()) {\n-      return at::nullopt;\n+\n+  auto & schema = node->schema();\n+  auto & args = schema.arguments;\n+  // can't handle varargs primitives because we don't know what should be a Tensor\n+  if (schema.is_vararg) {", "path": "torch/csrc/jit/passes/shape_analysis.cpp", "position": 84, "original_position": 84, "commit_id": "6a9e59de5c6c7e7821e48863cd70d8fee3fc1870", "original_commit_id": "63bc34a152d3d9259c71b5c2318e335b2f6c25db", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "We currently use `vararg` schemas only for `prim::` ops, right?", "created_at": "2018-07-23T01:00:42Z", "updated_at": "2018-11-23T15:47:51Z", "html_url": "https://github.com/pytorch/pytorch/pull/9584#discussion_r204262904", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/9584", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/204262904"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/9584#discussion_r204262904"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/9584"}}, "body_html": "<p>We currently use <code>vararg</code> schemas only for <code>prim::</code> ops, right?</p>", "body_text": "We currently use vararg schemas only for prim:: ops, right?"}