{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/204262446", "pull_request_review_id": 139308537, "id": 204262446, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDI2MjQ0Ng==", "diff_hunk": "@@ -103,65 +96,70 @@ struct SchemaParser {\n     parseType(arg);\n     args.push_back(std::move(arg));\n   }\n-  at::Tensor parseSingleConstant(TypeKind kind) {\n+  IValue parseSingleConstant(TypeKind kind) {\n     switch(L.cur().kind) {\n       case TK_TRUE:\n         L.next();\n-        return one();\n+        return true;\n       case TK_FALSE:\n         L.next();\n-        return zero();\n-      case TK_FLOAT:\n-        L.next();\n-        return as_tensor(static_cast<int64_t>(at::kFloat));\n+        return false;\n       case TK_IDENT: {\n         auto tok = L.next();\n         auto text = tok.text();\n-        if(\"cpu\" == text) {\n-          return as_tensor(static_cast<int64_t>(at::Device::Type::CPU));\n+        if(\"float\" == text) {\n+          return static_cast<int64_t>(at::kFloat);\n+        } else if(\"cpu\" == text) {\n+          return static_cast<int64_t>(at::Device::Type::CPU);\n         } else if(\"strided\" == text) {\n-          return as_tensor(static_cast<int64_t>(at::kStrided));\n+          return static_cast<int64_t>(at::kStrided);\n         } else if(\"ElementwiseMean\" == text) {\n-          return as_tensor(static_cast<int64_t>(Reduction::ElementwiseMean));\n+          return static_cast<int64_t>(Reduction::ElementwiseMean);", "path": "torch/csrc/jit/operator.cpp", "position": 74, "original_position": 65, "commit_id": "6a9e59de5c6c7e7821e48863cd70d8fee3fc1870", "original_commit_id": "63bc34a152d3d9259c71b5c2318e335b2f6c25db", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "We should really have a common place with all conversions of those weird types into interpreter types like we used to have `tensor_as` and `as_tensor`", "created_at": "2018-07-23T00:52:36Z", "updated_at": "2018-11-23T15:47:51Z", "html_url": "https://github.com/pytorch/pytorch/pull/9584#discussion_r204262446", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/9584", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/204262446"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/9584#discussion_r204262446"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/9584"}}, "body_html": "<p>We should really have a common place with all conversions of those weird types into interpreter types like we used to have <code>tensor_as</code> and <code>as_tensor</code></p>", "body_text": "We should really have a common place with all conversions of those weird types into interpreter types like we used to have tensor_as and as_tensor"}