{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/204216908", "pull_request_review_id": 139264517, "id": 204216908, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDIxNjkwOA==", "diff_hunk": "@@ -24,18 +25,77 @@ using ValueTable = std::unordered_map<std::string, SugaredValuePtr>;\n using AttributeMap = std::unordered_map<std::string, Const>;\n using ListAttributeMap = std::unordered_map<std::string, std::vector<Const>>;\n \n-// what type will this have in the interpreter, ignoring extra static information\n-// in particular Tensor(2x3) -> Dynamic, and Tuple(Tensor(2x3),...) -> Tuple(Dynamic,...)\n-static TypePtr interpreterType(const TypePtr& type) {\n-  if(TupleType* t = type->cast<TupleType>()) {\n-    return std::make_shared<TupleType>(fmap(t->elements(), interpreterType));\n-  } else if(type->kind() == TypeKind::TensorType) {\n-    return DynamicType::get();\n-  } else {\n-    return type;\n+struct NoneValue : SugaredValue {\n+  NoneValue() {}\n+  virtual std::string kind() const override {\n+    return \"None\";\n+  }\n+};\n+\n+struct PrintValue : public SugaredValue {\n+  std::string kind() const override {\n+    return \"print\";\n+  }\n+  std::shared_ptr<SugaredValue> call(\n+    SourceRange loc,\n+    Method & m,\n+    at::ArrayRef<NamedValue> inputs,\n+    at::ArrayRef<NamedValue> attributes,\n+    size_t n_binders) override {\n+      auto& g = *m.graph();\n+      if (!attributes.empty())\n+        throw ErrorReport(loc) << \"print doesn't accept any keyword arguments\";\n+      auto values = toValues(inputs);\n+      ensureTensors(loc, values);", "path": "torch/csrc/jit/script/compiler.cpp", "position": 44, "original_position": 42, "commit_id": "6a9e59de5c6c7e7821e48863cd70d8fee3fc1870", "original_commit_id": "433dcdcd6fa0527c1a5009a7bc73c9962b57fc32", "user": {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, "body": "It should, but it is not implemented that way now. Ill add it to the follow up task list.", "created_at": "2018-07-21T17:47:50Z", "updated_at": "2018-11-23T15:47:49Z", "html_url": "https://github.com/pytorch/pytorch/pull/9584#discussion_r204216908", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/9584", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/204216908"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/9584#discussion_r204216908"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/9584"}}, "body_html": "<p>It should, but it is not implemented that way now. Ill add it to the follow up task list.</p>", "body_text": "It should, but it is not implemented that way now. Ill add it to the follow up task list.", "in_reply_to_id": 204066528}