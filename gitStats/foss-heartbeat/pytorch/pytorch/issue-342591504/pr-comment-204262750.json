{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/204262750", "pull_request_review_id": 139308537, "id": 204262750, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDI2Mjc1MA==", "diff_hunk": "@@ -34,47 +35,66 @@ int64_t wrapDim(int64_t dim, at::IntList sizes) {\n   return dim;\n }\n \n-at::Tensor representativeTensor(const TensorType * type) {\n-  auto backend = type->device() == -1 ? at::kCPU : at::kCUDA;\n-  at::DeviceGuard device_guard(type->device());\n-  auto & attype = at::getType(backend, type->scalarType());\n-  return attype.tensor(type->sizes(), type->strides()).zero_();\n+IValue representativeValue(Value* v) {\n+  TypePtr type_ = v->type();\n+  // if the value is actually constant, just use it!\n+  if(auto iv = toIValue(v)) {\n+    return *iv;\n+  }\n+  if (TensorType* type = type_->cast<TensorType>()) {\n+    auto backend = type->device() == -1 ? at::kCPU : at::kCUDA;\n+    at::DeviceGuard device_guard(type->device());\n+    auto& attype = at::getType(backend, type->scalarType());\n+    return attype.tensor(type->sizes(), type->strides()).zero_();\n+  } else if (type_->isSubtypeOf(*FloatType::get())) {\n+    return 0.f;\n+  }\n+  // we should not get here because isValidArgumentForRunning should have\n+  // prevented it\n+  std::stringstream ss;", "path": "torch/csrc/jit/passes/shape_analysis.cpp", "position": 45, "original_position": 45, "commit_id": "6a9e59de5c6c7e7821e48863cd70d8fee3fc1870", "original_commit_id": "63bc34a152d3d9259c71b5c2318e335b2f6c25db", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "nit: `ostringstream`. Also, aren't we supposed to use `AT_ERROR` in those cases? It lets you do build up the string as part of the macro", "created_at": "2018-07-23T00:58:14Z", "updated_at": "2018-11-23T15:47:51Z", "html_url": "https://github.com/pytorch/pytorch/pull/9584#discussion_r204262750", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/9584", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/204262750"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/9584#discussion_r204262750"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/9584"}}, "body_html": "<p>nit: <code>ostringstream</code>. Also, aren't we supposed to use <code>AT_ERROR</code> in those cases? It lets you do build up the string as part of the macro</p>", "body_text": "nit: ostringstream. Also, aren't we supposed to use AT_ERROR in those cases? It lets you do build up the string as part of the macro"}