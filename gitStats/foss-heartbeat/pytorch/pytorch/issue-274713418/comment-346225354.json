{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/346225354", "html_url": "https://github.com/pytorch/pytorch/issues/3749#issuecomment-346225354", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/3749", "id": 346225354, "node_id": "MDEyOklzc3VlQ29tbWVudDM0NjIyNTM1NA==", "user": {"login": "zhuwenxi", "id": 4969797, "node_id": "MDQ6VXNlcjQ5Njk3OTc=", "avatar_url": "https://avatars0.githubusercontent.com/u/4969797?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhuwenxi", "html_url": "https://github.com/zhuwenxi", "followers_url": "https://api.github.com/users/zhuwenxi/followers", "following_url": "https://api.github.com/users/zhuwenxi/following{/other_user}", "gists_url": "https://api.github.com/users/zhuwenxi/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhuwenxi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhuwenxi/subscriptions", "organizations_url": "https://api.github.com/users/zhuwenxi/orgs", "repos_url": "https://api.github.com/users/zhuwenxi/repos", "events_url": "https://api.github.com/users/zhuwenxi/events{/privacy}", "received_events_url": "https://api.github.com/users/zhuwenxi/received_events", "type": "User", "site_admin": false}, "created_at": "2017-11-22T02:34:11Z", "updated_at": "2017-11-22T02:47:46Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=4583066\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/apaszke\">@apaszke</a>, it is also notable that, although autograd profilier works perfectly with existing primitives (conv, relu, bn...) implemented in PyTorch code, it possibly may not work quite properly with user customized primitives in real-world models, unless they manually add autograd profiler code there, right?<br>\nOur layer-by-layer profiler could be a supplement to that, because we use runtime replacement to Python functions rather than modifying the native code, so the tool could always intercept models' forward/backward function and provide performance result. This is at least a fallback to autograd profilier,  I think.</p>", "body_text": "@apaszke, it is also notable that, although autograd profilier works perfectly with existing primitives (conv, relu, bn...) implemented in PyTorch code, it possibly may not work quite properly with user customized primitives in real-world models, unless they manually add autograd profiler code there, right?\nOur layer-by-layer profiler could be a supplement to that, because we use runtime replacement to Python functions rather than modifying the native code, so the tool could always intercept models' forward/backward function and provide performance result. This is at least a fallback to autograd profilier,  I think.", "body": "@apaszke, it is also notable that, although autograd profilier works perfectly with existing primitives (conv, relu, bn...) implemented in PyTorch code, it possibly may not work quite properly with user customized primitives in real-world models, unless they manually add autograd profiler code there, right?\r\nOur layer-by-layer profiler could be a supplement to that, because we use runtime replacement to Python functions rather than modifying the native code, so the tool could always intercept models' forward/backward function and provide performance result. This is at least a fallback to autograd profilier,  I think."}