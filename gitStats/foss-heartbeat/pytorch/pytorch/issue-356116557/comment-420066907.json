{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/420066907", "html_url": "https://github.com/pytorch/pytorch/issues/11157#issuecomment-420066907", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/11157", "id": 420066907, "node_id": "MDEyOklzc3VlQ29tbWVudDQyMDA2NjkwNw==", "user": {"login": "fritzo", "id": 648532, "node_id": "MDQ6VXNlcjY0ODUzMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/648532?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fritzo", "html_url": "https://github.com/fritzo", "followers_url": "https://api.github.com/users/fritzo/followers", "following_url": "https://api.github.com/users/fritzo/following{/other_user}", "gists_url": "https://api.github.com/users/fritzo/gists{/gist_id}", "starred_url": "https://api.github.com/users/fritzo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fritzo/subscriptions", "organizations_url": "https://api.github.com/users/fritzo/orgs", "repos_url": "https://api.github.com/users/fritzo/repos", "events_url": "https://api.github.com/users/fritzo/events{/privacy}", "received_events_url": "https://api.github.com/users/fritzo/received_events", "type": "User", "site_admin": false}, "created_at": "2018-09-10T21:26:51Z", "updated_at": "2018-09-10T21:26:51Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=4583066\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/apaszke\">@apaszke</a> Thanks, I tried to naively apply your suggestion in <code>torch/csrc/jit/tracer.cpp</code></p>\n<div class=\"highlight highlight-source-diff\"><pre><span class=\"pl-md\"><span class=\"pl-md\">-</span>void addInputs(Node *n, const char * name, const std::string&amp; value)         { detail::badArgType(); }</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>void addInputs(Node *n, const char * name, const std::string&amp; value) { detail::genericAddInput(n, value); }</span></pre></div>\n<p>but I'm seeing errors</p>\n<pre><code>torch/jit/__init__.py:508: in trace\n    _check_trace([example_inputs], func, executor_options, module, check_tolerance)\ntorch/jit/__init__.py:410: in _check_trace\n    traced_outs = run_mod_and_filter_tensor_outputs(module, inputs, 'trace')\ntorch/jit/__init__.py:379: in run_mod_and_filter_tensor_outputs\n    ' with test inputs.\\nException:\\n' + indent(str(e)))\n...\n            if n_mod.kind() == n_check.kind() and n_mod.kind() == 'prim::Constant':\n&gt;               if n_mod.kindOf('value') != 't' or n_check.kindOf('value') != 't':\nE               RuntimeError: required keyword attribute 'value' is undefined.\ntorch/jit/__init__.py:347: RuntimeError\n</code></pre>\n<p>Can you give any hints how to fix this, or should I let you guys handle this <g-emoji class=\"g-emoji\" alias=\"smile\" fallback-src=\"https://assets-cdn.github.com/images/icons/emoji/unicode/1f604.png\">\ud83d\ude04</g-emoji></p>", "body_text": "@apaszke Thanks, I tried to naively apply your suggestion in torch/csrc/jit/tracer.cpp\n-void addInputs(Node *n, const char * name, const std::string& value)         { detail::badArgType(); }\n+void addInputs(Node *n, const char * name, const std::string& value) { detail::genericAddInput(n, value); }\nbut I'm seeing errors\ntorch/jit/__init__.py:508: in trace\n    _check_trace([example_inputs], func, executor_options, module, check_tolerance)\ntorch/jit/__init__.py:410: in _check_trace\n    traced_outs = run_mod_and_filter_tensor_outputs(module, inputs, 'trace')\ntorch/jit/__init__.py:379: in run_mod_and_filter_tensor_outputs\n    ' with test inputs.\\nException:\\n' + indent(str(e)))\n...\n            if n_mod.kind() == n_check.kind() and n_mod.kind() == 'prim::Constant':\n>               if n_mod.kindOf('value') != 't' or n_check.kindOf('value') != 't':\nE               RuntimeError: required keyword attribute 'value' is undefined.\ntorch/jit/__init__.py:347: RuntimeError\n\nCan you give any hints how to fix this, or should I let you guys handle this \ud83d\ude04", "body": "@apaszke Thanks, I tried to naively apply your suggestion in `torch/csrc/jit/tracer.cpp`\r\n```diff\r\n-void addInputs(Node *n, const char * name, const std::string& value)         { detail::badArgType(); }\r\n+void addInputs(Node *n, const char * name, const std::string& value) { detail::genericAddInput(n, value); }\r\n```\r\nbut I'm seeing errors\r\n```\r\ntorch/jit/__init__.py:508: in trace\r\n    _check_trace([example_inputs], func, executor_options, module, check_tolerance)\r\ntorch/jit/__init__.py:410: in _check_trace\r\n    traced_outs = run_mod_and_filter_tensor_outputs(module, inputs, 'trace')\r\ntorch/jit/__init__.py:379: in run_mod_and_filter_tensor_outputs\r\n    ' with test inputs.\\nException:\\n' + indent(str(e)))\r\n...\r\n            if n_mod.kind() == n_check.kind() and n_mod.kind() == 'prim::Constant':\r\n>               if n_mod.kindOf('value') != 't' or n_check.kindOf('value') != 't':\r\nE               RuntimeError: required keyword attribute 'value' is undefined.\r\ntorch/jit/__init__.py:347: RuntimeError\r\n```\r\nCan you give any hints how to fix this, or should I let you guys handle this :smile:"}