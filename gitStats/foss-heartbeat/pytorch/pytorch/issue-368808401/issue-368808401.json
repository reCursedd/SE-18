{"url": "https://api.github.com/repos/pytorch/pytorch/issues/12544", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/12544/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/12544/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/12544/events", "html_url": "https://github.com/pytorch/pytorch/pull/12544", "id": 368808401, "node_id": "MDExOlB1bGxSZXF1ZXN0MjIxODk5MjA1", "number": 12544, "title": "Relax the locking of running_mutex_ in async_scheduling net", "user": {"login": "yinghai", "id": 1100089, "node_id": "MDQ6VXNlcjExMDAwODk=", "avatar_url": "https://avatars1.githubusercontent.com/u/1100089?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yinghai", "html_url": "https://github.com/yinghai", "followers_url": "https://api.github.com/users/yinghai/followers", "following_url": "https://api.github.com/users/yinghai/following{/other_user}", "gists_url": "https://api.github.com/users/yinghai/gists{/gist_id}", "starred_url": "https://api.github.com/users/yinghai/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yinghai/subscriptions", "organizations_url": "https://api.github.com/users/yinghai/orgs", "repos_url": "https://api.github.com/users/yinghai/repos", "events_url": "https://api.github.com/users/yinghai/events{/privacy}", "received_events_url": "https://api.github.com/users/yinghai/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-10-10T19:04:16Z", "updated_at": "2018-10-11T23:02:20Z", "closed_at": "2018-10-11T23:02:20Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/12544", "html_url": "https://github.com/pytorch/pytorch/pull/12544", "diff_url": "https://github.com/pytorch/pytorch/pull/12544.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/12544.patch"}, "body_html": "<p>Summary: <code>running_mutex_</code> inside async_scheduling net is used to guard access to the <code>running_</code> variable. So we don't need to acquire that lock when we are actually running the net. This will help us prevent potential double locking situation when we decide to run the root nodes inline.</p>\n<p>Differential Revision: D10304745</p>", "body_text": "Summary: running_mutex_ inside async_scheduling net is used to guard access to the running_ variable. So we don't need to acquire that lock when we are actually running the net. This will help us prevent potential double locking situation when we decide to run the root nodes inline.\nDifferential Revision: D10304745", "body": "Summary: `running_mutex_` inside async_scheduling net is used to guard access to the `running_` variable. So we don't need to acquire that lock when we are actually running the net. This will help us prevent potential double locking situation when we decide to run the root nodes inline.\n\nDifferential Revision: D10304745\n"}