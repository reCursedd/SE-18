{"url": "https://api.github.com/repos/pytorch/pytorch/issues/14242", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/14242/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/14242/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/14242/events", "html_url": "https://github.com/pytorch/pytorch/issues/14242", "id": 382833163, "node_id": "MDU6SXNzdWUzODI4MzMxNjM=", "number": 14242, "title": "Creating Python tensors from the C library", "user": {"login": "alhparsa", "id": 25049952, "node_id": "MDQ6VXNlcjI1MDQ5OTUy", "avatar_url": "https://avatars2.githubusercontent.com/u/25049952?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alhparsa", "html_url": "https://github.com/alhparsa", "followers_url": "https://api.github.com/users/alhparsa/followers", "following_url": "https://api.github.com/users/alhparsa/following{/other_user}", "gists_url": "https://api.github.com/users/alhparsa/gists{/gist_id}", "starred_url": "https://api.github.com/users/alhparsa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alhparsa/subscriptions", "organizations_url": "https://api.github.com/users/alhparsa/orgs", "repos_url": "https://api.github.com/users/alhparsa/repos", "events_url": "https://api.github.com/users/alhparsa/events{/privacy}", "received_events_url": "https://api.github.com/users/alhparsa/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-11-20T20:21:05Z", "updated_at": "2018-11-20T20:29:48Z", "closed_at": null, "author_association": "NONE", "body_html": "<h2><g-emoji class=\"g-emoji\" alias=\"question\" fallback-src=\"https://assets-cdn.github.com/images/icons/emoji/unicode/2753.png\">\u2753</g-emoji> Questions and Help</h2>\n<p>Hi there,</p>\n<p>I've been trying to generate tensors by following the <a href=\"https://pytorch.org/tutorials/advanced/cpp_extension.html\" rel=\"nofollow\">c-extension tutorial</a> but I haven't been successful yet. The main problem is that I can successfully generate a module for Python but the module generated is not an instance of <code>torch.tensor</code>, even though it is a subclass of <code>at::Tensor</code>in C++. My question is how can I inherit all the properties/methods of <code>at::Tensor</code> using <code>PYBIND11</code> and the class still would be an instance of <code>torch.tensor</code> in Python?</p>\n<p>Here is a sample extension I've written:</p>\n<pre><code>#include&lt;torch/extension.h&gt;\nstruct PlusIsMinusTensor : at::Tensor{\n    PlusIsMinusTensor(at::Tensor inp_tensor) : at::Tensor(inp_tensor){};\n    at::Tensor adder_(at::Tensor other) {\n        return PlusIsMinusTensor::sub(other);\n    }\n        at::Tensor abs__(){\n        return PlusIsMinusTensor::abs();\n    }\n};\n\n\nPYBIND11_MODULE(TORCH_EXTENSION_NAME, m) {\n    py::class_&lt;PlusIsMinusTensor&gt;(m, \"PlusIsMinusTensor\")\n    .def(py::init&lt;at::Tensor&gt;())\n    .def(\"__add__\", &amp;PlusIsMinusTensor::adder_);\n}\n</code></pre>\n<p>I have tried the following for <code>PYBIND</code> but still no success:</p>\n<pre><code>PYBIND11_MODULE(TORCH_EXTENSION_NAME, m) {\n    py::class_&lt;PlusIsMinusTensor, at::Tensor&gt;(m, \"PlusIsMinusTensor\")\n    .def(py::init&lt;at::Tensor&gt;())\n    .def(\"__add__\", &amp;PlusIsMinusTensor::adder_);\n}\n</code></pre>\n<p>Any help would be greatly appreciated!</p>", "body_text": "\u2753 Questions and Help\nHi there,\nI've been trying to generate tensors by following the c-extension tutorial but I haven't been successful yet. The main problem is that I can successfully generate a module for Python but the module generated is not an instance of torch.tensor, even though it is a subclass of at::Tensorin C++. My question is how can I inherit all the properties/methods of at::Tensor using PYBIND11 and the class still would be an instance of torch.tensor in Python?\nHere is a sample extension I've written:\n#include<torch/extension.h>\nstruct PlusIsMinusTensor : at::Tensor{\n    PlusIsMinusTensor(at::Tensor inp_tensor) : at::Tensor(inp_tensor){};\n    at::Tensor adder_(at::Tensor other) {\n        return PlusIsMinusTensor::sub(other);\n    }\n        at::Tensor abs__(){\n        return PlusIsMinusTensor::abs();\n    }\n};\n\n\nPYBIND11_MODULE(TORCH_EXTENSION_NAME, m) {\n    py::class_<PlusIsMinusTensor>(m, \"PlusIsMinusTensor\")\n    .def(py::init<at::Tensor>())\n    .def(\"__add__\", &PlusIsMinusTensor::adder_);\n}\n\nI have tried the following for PYBIND but still no success:\nPYBIND11_MODULE(TORCH_EXTENSION_NAME, m) {\n    py::class_<PlusIsMinusTensor, at::Tensor>(m, \"PlusIsMinusTensor\")\n    .def(py::init<at::Tensor>())\n    .def(\"__add__\", &PlusIsMinusTensor::adder_);\n}\n\nAny help would be greatly appreciated!", "body": "## \u2753 Questions and Help\r\n\r\nHi there,\r\n\r\nI've been trying to generate tensors by following the [c-extension tutorial](https://pytorch.org/tutorials/advanced/cpp_extension.html) but I haven't been successful yet. The main problem is that I can successfully generate a module for Python but the module generated is not an instance of `torch.tensor`, even though it is a subclass of `at::Tensor`in C++. My question is how can I inherit all the properties/methods of `at::Tensor` using `PYBIND11` and the class still would be an instance of `torch.tensor` in Python?\r\n\r\nHere is a sample extension I've written:\r\n```\r\n#include<torch/extension.h>\r\nstruct PlusIsMinusTensor : at::Tensor{\r\n    PlusIsMinusTensor(at::Tensor inp_tensor) : at::Tensor(inp_tensor){};\r\n    at::Tensor adder_(at::Tensor other) {\r\n        return PlusIsMinusTensor::sub(other);\r\n    }\r\n        at::Tensor abs__(){\r\n        return PlusIsMinusTensor::abs();\r\n    }\r\n};\r\n\r\n\r\nPYBIND11_MODULE(TORCH_EXTENSION_NAME, m) {\r\n    py::class_<PlusIsMinusTensor>(m, \"PlusIsMinusTensor\")\r\n    .def(py::init<at::Tensor>())\r\n    .def(\"__add__\", &PlusIsMinusTensor::adder_);\r\n}\r\n```\r\n\r\nI have tried the following for `PYBIND` but still no success:\r\n```\r\nPYBIND11_MODULE(TORCH_EXTENSION_NAME, m) {\r\n    py::class_<PlusIsMinusTensor, at::Tensor>(m, \"PlusIsMinusTensor\")\r\n    .def(py::init<at::Tensor>())\r\n    .def(\"__add__\", &PlusIsMinusTensor::adder_);\r\n}\r\n```\r\n\r\nAny help would be greatly appreciated! \r\n"}