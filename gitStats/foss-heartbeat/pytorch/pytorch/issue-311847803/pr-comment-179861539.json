{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/179861539", "pull_request_review_id": 110191196, "id": 179861539, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTg2MTUzOQ==", "diff_hunk": "@@ -1219,13 +1219,15 @@ void addGlobalMethods(py::module& m) {\n \n         // Parse protobuffers to NetDefs\n         std::vector<std::unique_ptr<caffe2::NetDef>> nets;", "path": "caffe2/python/pybind_state.cc", "position": 3, "original_position": 3, "commit_id": "d6eb5729b9fda03962796a12d14e09d7bc74c013", "original_commit_id": "d6eb5729b9fda03962796a12d14e09d7bc74c013", "user": {"login": "Swetko", "id": 11769173, "node_id": "MDQ6VXNlcjExNzY5MTcz", "avatar_url": "https://avatars3.githubusercontent.com/u/11769173?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Swetko", "html_url": "https://github.com/Swetko", "followers_url": "https://api.github.com/users/Swetko/followers", "following_url": "https://api.github.com/users/Swetko/following{/other_user}", "gists_url": "https://api.github.com/users/Swetko/gists{/gist_id}", "starred_url": "https://api.github.com/users/Swetko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Swetko/subscriptions", "organizations_url": "https://api.github.com/users/Swetko/orgs", "repos_url": "https://api.github.com/users/Swetko/repos", "events_url": "https://api.github.com/users/Swetko/events{/privacy}", "received_events_url": "https://api.github.com/users/Swetko/received_events", "type": "User", "site_admin": false}, "body": "This will segfault. When you push/emplace_back elements to the std::vector, it dynamically reallocates its memory when its current capacity fills, meaning any pointers to its old content are invalidated. A way to solve this problem is to preallocate:\r\n\r\nstd::vector<caffe2::NetDef> nets(net_protos.size());\r\n\r\nBu then we have to iterate with a counter variable like:\r\n\r\nfor( size_t i=0; i < net_protos.size(); i++)\r\n  {\r\n  nets[i].ParseXXX()\r\n  nets_ptr.push_back(&net[i])\r\n  }\r\n\r\nOr alternatively reserve the capacity \r\n\r\nstd::vector<caffe2::NetDef> nets;\r\nnets.reserve(net_protos.size());\r\n\r\nBut this is hacky and bug prone to anyone looking at the function later. Relying on that behavior seems not the most elegant solution to me. \r\n", "created_at": "2018-04-06T20:00:20Z", "updated_at": "2018-11-23T15:41:56Z", "html_url": "https://github.com/pytorch/pytorch/pull/6335#discussion_r179861539", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/6335", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/179861539"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/6335#discussion_r179861539"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/6335"}}, "body_html": "<p>This will segfault. When you push/emplace_back elements to the std::vector, it dynamically reallocates its memory when its current capacity fills, meaning any pointers to its old content are invalidated. A way to solve this problem is to preallocate:</p>\n<p>std::vectorcaffe2::NetDef nets(net_protos.size());</p>\n<p>Bu then we have to iterate with a counter variable like:</p>\n<p>for( size_t i=0; i &lt; net_protos.size(); i++)<br>\n{<br>\nnets[i].ParseXXX()<br>\nnets_ptr.push_back(&amp;net[i])<br>\n}</p>\n<p>Or alternatively reserve the capacity</p>\n<p>std::vectorcaffe2::NetDef nets;<br>\nnets.reserve(net_protos.size());</p>\n<p>But this is hacky and bug prone to anyone looking at the function later. Relying on that behavior seems not the most elegant solution to me.</p>", "body_text": "This will segfault. When you push/emplace_back elements to the std::vector, it dynamically reallocates its memory when its current capacity fills, meaning any pointers to its old content are invalidated. A way to solve this problem is to preallocate:\nstd::vectorcaffe2::NetDef nets(net_protos.size());\nBu then we have to iterate with a counter variable like:\nfor( size_t i=0; i < net_protos.size(); i++)\n{\nnets[i].ParseXXX()\nnets_ptr.push_back(&net[i])\n}\nOr alternatively reserve the capacity\nstd::vectorcaffe2::NetDef nets;\nnets.reserve(net_protos.size());\nBut this is hacky and bug prone to anyone looking at the function later. Relying on that behavior seems not the most elegant solution to me.", "in_reply_to_id": 179662182}