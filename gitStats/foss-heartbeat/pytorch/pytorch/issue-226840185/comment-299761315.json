{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/299761315", "html_url": "https://github.com/pytorch/pytorch/issues/1501#issuecomment-299761315", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/1501", "id": 299761315, "node_id": "MDEyOklzc3VlQ29tbWVudDI5OTc2MTMxNQ==", "user": {"login": "ht93", "id": 8718759, "node_id": "MDQ6VXNlcjg3MTg3NTk=", "avatar_url": "https://avatars1.githubusercontent.com/u/8718759?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ht93", "html_url": "https://github.com/ht93", "followers_url": "https://api.github.com/users/ht93/followers", "following_url": "https://api.github.com/users/ht93/following{/other_user}", "gists_url": "https://api.github.com/users/ht93/gists{/gist_id}", "starred_url": "https://api.github.com/users/ht93/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ht93/subscriptions", "organizations_url": "https://api.github.com/users/ht93/orgs", "repos_url": "https://api.github.com/users/ht93/repos", "events_url": "https://api.github.com/users/ht93/events{/privacy}", "received_events_url": "https://api.github.com/users/ht93/received_events", "type": "User", "site_admin": false}, "created_at": "2017-05-08T02:57:03Z", "updated_at": "2017-05-08T03:06:18Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=4583066\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/apaszke\">@apaszke</a> Thanks for the advise.<br>\nI found two ways to implement this from the tutorial, not sure which one is better since I am not very cleaer about whether the backward and gradient updating would work fine with this two implementation.<br>\nShall I use it like <a href=\"http://pytorch.org/tutorials/beginner/pytorch_with_examples.html#pytorch-custom-nn-modules\" rel=\"nofollow\">http://pytorch.org/tutorials/beginner/pytorch_with_examples.html#pytorch-custom-nn-modules</a> :</p>\n<pre><code>class Upsampling1D(torch.nn.Module):\n    def __init__(self, scale_factor):\n        super(Upsampling1D, self).__init__()\n        self.upsampling2D = nn.UpsamplingNearest2d(scale_factor=scale_factor)\n\n    def forward(self, x):\n        x = torch.unsqueeze(x,3)\n        x = self.upsampling2D(x)\n        x = x[:,:,:,0]\n        return x\n</code></pre>\n<p>or implement it inside my Net() class like <a href=\"http://pytorch.org/tutorials/beginner/blitz/neural_networks_tutorial.html#define-the-network\" rel=\"nofollow\">http://pytorch.org/tutorials/beginner/blitz/neural_networks_tutorial.html#define-the-network</a>:</p>\n<pre><code>class Net(nn.Module)\n    #some __init__ and forward function here\n\n    def unsampling1D(self, x, scale_factor):\n        x = torch.unsqueeze(x,3)\n        upsampling2D = nn.UpsamplingNearest2d(scale_factor=scale_factor)\n        x = upsampling2D(x)\n        x = x[:,:,:,0]\n        return x\n</code></pre>", "body_text": "@apaszke Thanks for the advise.\nI found two ways to implement this from the tutorial, not sure which one is better since I am not very cleaer about whether the backward and gradient updating would work fine with this two implementation.\nShall I use it like http://pytorch.org/tutorials/beginner/pytorch_with_examples.html#pytorch-custom-nn-modules :\nclass Upsampling1D(torch.nn.Module):\n    def __init__(self, scale_factor):\n        super(Upsampling1D, self).__init__()\n        self.upsampling2D = nn.UpsamplingNearest2d(scale_factor=scale_factor)\n\n    def forward(self, x):\n        x = torch.unsqueeze(x,3)\n        x = self.upsampling2D(x)\n        x = x[:,:,:,0]\n        return x\n\nor implement it inside my Net() class like http://pytorch.org/tutorials/beginner/blitz/neural_networks_tutorial.html#define-the-network:\nclass Net(nn.Module)\n    #some __init__ and forward function here\n\n    def unsampling1D(self, x, scale_factor):\n        x = torch.unsqueeze(x,3)\n        upsampling2D = nn.UpsamplingNearest2d(scale_factor=scale_factor)\n        x = upsampling2D(x)\n        x = x[:,:,:,0]\n        return x", "body": "@apaszke Thanks for the advise.\r\nI found two ways to implement this from the tutorial, not sure which one is better since I am not very cleaer about whether the backward and gradient updating would work fine with this two implementation. \r\nShall I use it like http://pytorch.org/tutorials/beginner/pytorch_with_examples.html#pytorch-custom-nn-modules :\r\n```\r\nclass Upsampling1D(torch.nn.Module):\r\n    def __init__(self, scale_factor):\r\n        super(Upsampling1D, self).__init__()\r\n        self.upsampling2D = nn.UpsamplingNearest2d(scale_factor=scale_factor)\r\n\r\n    def forward(self, x):\r\n        x = torch.unsqueeze(x,3)\r\n        x = self.upsampling2D(x)\r\n        x = x[:,:,:,0]\r\n        return x\r\n```\r\nor implement it inside my Net() class like http://pytorch.org/tutorials/beginner/blitz/neural_networks_tutorial.html#define-the-network: \r\n```\r\nclass Net(nn.Module)\r\n    #some __init__ and forward function here\r\n\r\n    def unsampling1D(self, x, scale_factor):\r\n        x = torch.unsqueeze(x,3)\r\n        upsampling2D = nn.UpsamplingNearest2d(scale_factor=scale_factor)\r\n        x = upsampling2D(x)\r\n        x = x[:,:,:,0]\r\n        return x\r\n```"}