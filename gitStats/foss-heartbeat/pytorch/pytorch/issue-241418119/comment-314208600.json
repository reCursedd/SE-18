{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/314208600", "html_url": "https://github.com/pytorch/pytorch/pull/2016#issuecomment-314208600", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/2016", "id": 314208600, "node_id": "MDEyOklzc3VlQ29tbWVudDMxNDIwODYwMA==", "user": {"login": "thomasjpfan", "id": 5402633, "node_id": "MDQ6VXNlcjU0MDI2MzM=", "avatar_url": "https://avatars2.githubusercontent.com/u/5402633?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thomasjpfan", "html_url": "https://github.com/thomasjpfan", "followers_url": "https://api.github.com/users/thomasjpfan/followers", "following_url": "https://api.github.com/users/thomasjpfan/following{/other_user}", "gists_url": "https://api.github.com/users/thomasjpfan/gists{/gist_id}", "starred_url": "https://api.github.com/users/thomasjpfan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thomasjpfan/subscriptions", "organizations_url": "https://api.github.com/users/thomasjpfan/orgs", "repos_url": "https://api.github.com/users/thomasjpfan/repos", "events_url": "https://api.github.com/users/thomasjpfan/events{/privacy}", "received_events_url": "https://api.github.com/users/thomasjpfan/received_events", "type": "User", "site_admin": false}, "created_at": "2017-07-10T19:24:20Z", "updated_at": "2017-07-10T19:24:20Z", "author_association": "NONE", "body_html": "<p><code>_LRScheduler</code> interface seems to imply that <code>step</code> is called at the end of each epoch. The cyclical learning rate policy updates the learning rate after every batch. If <code>CyclicLR</code> were to subclass <code>_LRSchleduler</code> it would have to raise an exception for calling <code>step</code> and ask the user to call <code>batch_step</code> instead. Basically it comes down to a design decision.</p>", "body_text": "_LRScheduler interface seems to imply that step is called at the end of each epoch. The cyclical learning rate policy updates the learning rate after every batch. If CyclicLR were to subclass _LRSchleduler it would have to raise an exception for calling step and ask the user to call batch_step instead. Basically it comes down to a design decision.", "body": "`_LRScheduler` interface seems to imply that `step` is called at the end of each epoch. The cyclical learning rate policy updates the learning rate after every batch. If `CyclicLR` were to subclass `_LRSchleduler` it would have to raise an exception for calling `step` and ask the user to call `batch_step` instead. Basically it comes down to a design decision."}