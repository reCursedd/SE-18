{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/409774987", "html_url": "https://github.com/pytorch/pytorch/pull/2016#issuecomment-409774987", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/2016", "id": 409774987, "node_id": "MDEyOklzc3VlQ29tbWVudDQwOTc3NDk4Nw==", "user": {"login": "sethah", "id": 7275795, "node_id": "MDQ6VXNlcjcyNzU3OTU=", "avatar_url": "https://avatars2.githubusercontent.com/u/7275795?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sethah", "html_url": "https://github.com/sethah", "followers_url": "https://api.github.com/users/sethah/followers", "following_url": "https://api.github.com/users/sethah/following{/other_user}", "gists_url": "https://api.github.com/users/sethah/gists{/gist_id}", "starred_url": "https://api.github.com/users/sethah/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sethah/subscriptions", "organizations_url": "https://api.github.com/users/sethah/orgs", "repos_url": "https://api.github.com/users/sethah/repos", "events_url": "https://api.github.com/users/sethah/events{/privacy}", "received_events_url": "https://api.github.com/users/sethah/received_events", "type": "User", "site_admin": false}, "created_at": "2018-08-02T01:23:11Z", "updated_at": "2018-08-02T01:23:11Z", "author_association": "CONTRIBUTOR", "body_html": "<p>In general I don't see why <code>step</code> has to correspond to anything specific at all. In any case, the scheduler progresses the learning rate according to some shape, which is just a function of how many times <code>step()</code> has been called. If I wanted to use the <code>ExponentialLR</code> scheduler to decay the learning rate every batch instead of every epoch, then I could simply call <code>step()</code> after each batch.</p>\n<p>The scheduler implementations define the shape, the users define the semantics of step. There was never any real need to link <code>step</code> and <code>epoch</code> in the first place, AFAICT. Am I missing something? In that case, we could just use <code>step</code> to mean progress the learning rate, and cyclical learning rates could be implemented by calling step after every batch. The idea that the <code>step</code> functions need to correspond to either batch or epoch or anything else seems misguided, especially since the user is free to call either method whenever they see fit.</p>", "body_text": "In general I don't see why step has to correspond to anything specific at all. In any case, the scheduler progresses the learning rate according to some shape, which is just a function of how many times step() has been called. If I wanted to use the ExponentialLR scheduler to decay the learning rate every batch instead of every epoch, then I could simply call step() after each batch.\nThe scheduler implementations define the shape, the users define the semantics of step. There was never any real need to link step and epoch in the first place, AFAICT. Am I missing something? In that case, we could just use step to mean progress the learning rate, and cyclical learning rates could be implemented by calling step after every batch. The idea that the step functions need to correspond to either batch or epoch or anything else seems misguided, especially since the user is free to call either method whenever they see fit.", "body": "In general I don't see why `step` has to correspond to anything specific at all. In any case, the scheduler progresses the learning rate according to some shape, which is just a function of how many times `step()` has been called. If I wanted to use the `ExponentialLR` scheduler to decay the learning rate every batch instead of every epoch, then I could simply call `step()` after each batch.\r\n\r\nThe scheduler implementations define the shape, the users define the semantics of step. There was never any real need to link `step` and `epoch` in the first place, AFAICT. Am I missing something? In that case, we could just use `step` to mean progress the learning rate, and cyclical learning rates could be implemented by calling step after every batch. The idea that the `step` functions need to correspond to either batch or epoch or anything else seems misguided, especially since the user is free to call either method whenever they see fit. "}