{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/397852234", "html_url": "https://github.com/pytorch/pytorch/pull/2016#issuecomment-397852234", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/2016", "id": 397852234, "node_id": "MDEyOklzc3VlQ29tbWVudDM5Nzg1MjIzNA==", "user": {"login": "Randl", "id": 3028543, "node_id": "MDQ6VXNlcjMwMjg1NDM=", "avatar_url": "https://avatars0.githubusercontent.com/u/3028543?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Randl", "html_url": "https://github.com/Randl", "followers_url": "https://api.github.com/users/Randl/followers", "following_url": "https://api.github.com/users/Randl/following{/other_user}", "gists_url": "https://api.github.com/users/Randl/gists{/gist_id}", "starred_url": "https://api.github.com/users/Randl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Randl/subscriptions", "organizations_url": "https://api.github.com/users/Randl/orgs", "repos_url": "https://api.github.com/users/Randl/repos", "events_url": "https://api.github.com/users/Randl/events{/privacy}", "received_events_url": "https://api.github.com/users/Randl/received_events", "type": "User", "site_admin": false}, "created_at": "2018-06-17T03:31:52Z", "updated_at": "2018-06-17T03:31:52Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=5402633\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/thomasjpfan\">@thomasjpfan</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=4583066\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/apaszke\">@apaszke</a> What if we add <code>batch_step</code> to <code>_LRScheduler</code>? It would add some complexity, but at least it will be uniform along different schedulers. The code of form</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">for</span> epoch <span class=\"pl-k\">in</span> epochs:\n    scheduler.step()\n    <span class=\"pl-c1\">...</span>\n    <span class=\"pl-k\">for</span> batch <span class=\"pl-k\">in</span> batches:\n        scheduler.batch_step()\n        <span class=\"pl-c1\">...</span></pre></div>\n<p>would work for all schedulers then.</p>", "body_text": "@thomasjpfan @apaszke What if we add batch_step to _LRScheduler? It would add some complexity, but at least it will be uniform along different schedulers. The code of form\nfor epoch in epochs:\n    scheduler.step()\n    ...\n    for batch in batches:\n        scheduler.batch_step()\n        ...\nwould work for all schedulers then.", "body": "@thomasjpfan @apaszke What if we add `batch_step` to `_LRScheduler`? It would add some complexity, but at least it will be uniform along different schedulers. The code of form\r\n```python3\r\nfor epoch in epochs:\r\n    scheduler.step()\r\n    ...\r\n    for batch in batches:\r\n        scheduler.batch_step()\r\n        ...\r\n```\r\nwould work for all schedulers then. \r\n "}