{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/143591853", "pull_request_review_id": 68124738, "id": 143591853, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0MzU5MTg1Mw==", "diff_hunk": "@@ -0,0 +1,346 @@\n+#include \"nccl.h\"\n+#include \"torch/csrc/THP.h\"\n+#include \"torch/csrc/Types.h\"\n+#include \"torch/csrc/DynamicTypes.h\"\n+#include \"torch/csrc/cuda/THCP.h\"\n+\n+#include <nccl.h>\n+#include <sstream>\n+#include <unordered_map>\n+\n+static inline void CHECK(ncclResult_t status)\n+{\n+  if (status != ncclSuccess) {\n+    std::stringstream err;\n+    err << \"NCCL Error \" << status << \": \" << ncclGetErrorString(status);\n+    throw std::runtime_error(err.str());\n+  }\n+}\n+\n+struct NcclCommList {\n+  std::unique_ptr<ncclComm_t[]> comms;\n+  int ndevices;\n+  NcclCommList(const std::vector<int>& devices)\n+    : comms(new ncclComm_t[devices.size()]), ndevices(devices.size()) {\n+    CHECK(ncclCommInitAll(comms.get(), devices.size(), devices.data()));\n+  }\n+  NcclCommList(NcclCommList&& foo) = default;\n+  ~NcclCommList() {\n+    if (comms) {\n+      for (int i = 0; i < ndevices; i++) {\n+\tncclCommDestroy(comms[i]);\n+      }\n+    }\n+  }\n+};\n+\n+// accesses to this object have to be guarded by THC's CudaFreeMutex\n+std::unordered_map<std::string, NcclCommList > _communicators;\n+\n+static ncclComm_t* _get_communicator(std::vector<at::Tensor>& inputs) {\n+  int ndevices = inputs.size();\n+  std::stringstream hash_stream;\n+  std::vector<int> devs;\n+  for (int i = 0; i < ndevices; i++) {\n+    int dev = inputs[i].get_device();\n+    hash_stream <<  dev << \",\";\n+    devs.push_back(dev);\n+  }\n+  std::string hash = hash_stream.str();\n+  auto it = _communicators.find(hash);\n+  if (it == _communicators.end()) {\n+    return _communicators.emplace_hint(it, hash, devs)->second.comms.get();\n+  } else {\n+    return it->second.comms.get();\n+  }\n+}\n+\n+static void _check_inputs(std::vector<at::Tensor> &inputs, std::vector<at::Tensor> &outputs, int input_multiplier, int output_multiplier) {\n+  // len(inputs) == len(outputs)\n+  size_t len = inputs.size();\n+\n+  if (len <= 0) {\n+    throw std::runtime_error(\"input sequence can't be empty\");\n+  }\n+\n+  if (len != outputs.size()) {\n+    std::stringstream err;\n+    err << \"inputs and outputs sequences have to be of the same length, but got input of length \" << len << \" and output of length \" << outputs.size();\n+    throw std::runtime_error(err.str());\n+  }\n+\n+  std::unordered_set<int> devices;\n+  devices.reserve(len);\n+  int64_t numel = inputs[0].numel();\n+  auto type = inputs[0].type().ID();\n+\n+  for (size_t i = 0; i < len; i++) {\n+    auto input = inputs[i];\n+    auto output = outputs[i];\n+\n+    if (!(input.type().isCuda() && !input.type().isSparse()\n+\t  && output.type().isCuda()  && !output.type().isSparse())) {\n+      throw std::runtime_error(\"input and output elements have to be cuda dense Tensors\");\n+    }\n+\n+    if (type != input.type().ID() || type != output.type().ID()) {\n+      throw std::runtime_error(\"all inputs and outputs must be of the same Tensor type\");\n+    }\n+\n+    if (!input.is_contiguous() || !output.is_contiguous()) {\n+      throw std::runtime_error(\"all inputs and outputs have to be contiguous\");\n+    }\n+\n+    auto input_device = input.get_device();\n+    // inputs must be on unique devices\n+    if (devices.find(input_device) != devices.end()) {", "path": "torch/csrc/cuda/nccl.cpp", "position": 96, "original_position": 96, "commit_id": "a531a9ae90ee16ad5784cff1d0faa7278c0c2be5", "original_commit_id": "d5a12ad46caf2e8883bd368346eccbe1040d44bf", "user": {"login": "ngimel", "id": 15841449, "node_id": "MDQ6VXNlcjE1ODQxNDQ5", "avatar_url": "https://avatars3.githubusercontent.com/u/15841449?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ngimel", "html_url": "https://github.com/ngimel", "followers_url": "https://api.github.com/users/ngimel/followers", "following_url": "https://api.github.com/users/ngimel/following{/other_user}", "gists_url": "https://api.github.com/users/ngimel/gists{/gist_id}", "starred_url": "https://api.github.com/users/ngimel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ngimel/subscriptions", "organizations_url": "https://api.github.com/users/ngimel/orgs", "repos_url": "https://api.github.com/users/ngimel/repos", "events_url": "https://api.github.com/users/ngimel/events{/privacy}", "received_events_url": "https://api.github.com/users/ngimel/received_events", "type": "User", "site_admin": false}, "body": "Why not check return value of .insert()? https://stackoverflow.com/a/41152203", "created_at": "2017-10-09T22:29:10Z", "updated_at": "2018-11-23T15:35:11Z", "html_url": "https://github.com/pytorch/pytorch/pull/3028#discussion_r143591853", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/3028", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/143591853"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/3028#discussion_r143591853"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/3028"}}, "body_html": "<p>Why not check return value of .insert()? <a href=\"https://stackoverflow.com/a/41152203\" rel=\"nofollow\">https://stackoverflow.com/a/41152203</a></p>", "body_text": "Why not check return value of .insert()? https://stackoverflow.com/a/41152203"}