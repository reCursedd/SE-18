{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/143576201", "pull_request_review_id": 68106258, "id": 143576201, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0MzU3NjIwMQ==", "diff_hunk": "@@ -0,0 +1,172 @@\n+#include \"nccl.h\"\n+#include \"torch/csrc/THP.h\"\n+#include \"torch/csrc/Types.h\"\n+#include \"torch/csrc/DynamicTypes.h\"\n+#include \"torch/csrc/cuda/THCP.h\"\n+\n+#include <nccl.h>\n+#include <sstream>\n+#include <unordered_map>\n+\n+static inline void CHECK(ncclResult_t status)\n+{\n+  if (status != ncclSuccess) {\n+    std::stringstream err;\n+    err << \"NCCL Error \" << status << \": \" << ncclGetErrorString(status);\n+    throw std::runtime_error(err.str());\n+  }\n+}\n+\n+struct NcclCommList {\n+  std::unique_ptr<ncclComm_t[]> comms;\n+  int ndevices;\n+  NcclCommList(const std::vector<int>& devices)\n+    : comms(new ncclComm_t[devices.size()]), ndevices(devices.size()) {\n+    CHECK(ncclCommInitAll(comms.get(), devices.size(), devices.data()));\n+  }\n+  NcclCommList(NcclCommList&& foo) = default;\n+  ~NcclCommList() {\n+    if (comms) {\n+      for (int i = 0; i < ndevices; i++) {\n+\tncclCommDestroy(comms[i]);", "path": "torch/csrc/cuda/nccl.cpp", "position": 31, "original_position": 31, "commit_id": "a531a9ae90ee16ad5784cff1d0faa7278c0c2be5", "original_commit_id": "fdc843c2c4cdec72dded5e2421dd7725705403d9", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Considering that you have to call this per-elemt I doubt this calls `free` on the memory you allocated for the handles. You should still free it", "created_at": "2017-10-09T21:02:15Z", "updated_at": "2018-11-23T15:35:11Z", "html_url": "https://github.com/pytorch/pytorch/pull/3028#discussion_r143576201", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/3028", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/143576201"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/3028#discussion_r143576201"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/3028"}}, "body_html": "<p>Considering that you have to call this per-elemt I doubt this calls <code>free</code> on the memory you allocated for the handles. You should still free it</p>", "body_text": "Considering that you have to call this per-elemt I doubt this calls free on the memory you allocated for the handles. You should still free it"}