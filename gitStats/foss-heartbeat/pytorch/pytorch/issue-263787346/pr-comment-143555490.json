{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/143555490", "pull_request_review_id": 68078269, "id": 143555490, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0MzU1NTQ5MA==", "diff_hunk": "@@ -0,0 +1,175 @@\n+#include \"nccl.h\"\n+#include \"torch/csrc/THP.h\"\n+#include \"torch/csrc/Types.h\"\n+#include \"torch/csrc/DynamicTypes.h\"\n+#include \"torch/csrc/cuda/THCP.h\"\n+\n+#include <nccl.h>\n+#include <sstream>\n+#include <unordered_map>\n+\n+static inline void CHECK(ncclResult_t status)\n+{\n+  if (status != ncclSuccess) {\n+    std::stringstream err;\n+    err << \"NCCL Error \" << status << \": \" << ncclGetErrorString(status);\n+    throw std::runtime_error(err.str());\n+  }\n+}\n+\n+// TODO: make this thread_local + add mutexes\n+std::unordered_map<std::string, ncclComm_t*> _communicators;\n+\n+PyObject * THCPModule_nccl_destroy(PyObject *args) {\n+  for(auto it: _communicators) {\n+    ncclCommDestroy(*(it.second));\n+  }\n+  Py_RETURN_NONE;\n+}\n+\n+static ncclComm_t* _get_communicator(std::vector<at::Tensor>& inputs, int ndevices) {\n+  std::stringstream hash;\n+  std::vector<int> devs;\n+  for (int i = 0; i < ndevices; i++) {\n+    int dev = inputs[i].get_device();\n+    hash <<  dev << \",\";\n+    devs.push_back(dev);\n+  }\n+  if (_communicators.find(hash.str()) == _communicators.end()) {\n+    ncclComm_t *comms = (ncclComm_t*) malloc(sizeof(ncclComm_t) * ndevices);", "path": "torch/csrc/cuda/nccl.cpp", "position": null, "original_position": 39, "commit_id": "a531a9ae90ee16ad5784cff1d0faa7278c0c2be5", "original_commit_id": "a9ca631b923a583690c1d938f403fa720622a700", "user": {"login": "colesbury", "id": 655866, "node_id": "MDQ6VXNlcjY1NTg2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/655866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colesbury", "html_url": "https://github.com/colesbury", "followers_url": "https://api.github.com/users/colesbury/followers", "following_url": "https://api.github.com/users/colesbury/following{/other_user}", "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions", "organizations_url": "https://api.github.com/users/colesbury/orgs", "repos_url": "https://api.github.com/users/colesbury/repos", "events_url": "https://api.github.com/users/colesbury/events{/privacy}", "received_events_url": "https://api.github.com/users/colesbury/received_events", "type": "User", "site_admin": false}, "body": "That free is on an individual `ncclComm_t`, not the array of communicators. As paszke wrote above, you should use C++ for the memory management. Something like:\r\n\r\n```c++\r\nstruct NcclCommList {\r\n  std::unique_ptr<ncclComm_t[]> comms;\r\n  NcclCommList(IntList devices) \r\n     : comms(new ncclComm_t[devices.size()]) {\r\n        // call ncclCommInitAll\r\n   }\r\n  ~NcclCommList() {\r\n       // ncclCommDestroy each ncclComm_t\r\n  }\r\n};\r\n```\r\n\r\nThe value type in the map would then be `NcclCommList`.", "created_at": "2017-10-09T19:21:44Z", "updated_at": "2018-11-23T15:35:11Z", "html_url": "https://github.com/pytorch/pytorch/pull/3028#discussion_r143555490", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/3028", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/143555490"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/3028#discussion_r143555490"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/3028"}}, "body_html": "<p>That free is on an individual <code>ncclComm_t</code>, not the array of communicators. As paszke wrote above, you should use C++ for the memory management. Something like:</p>\n<div class=\"highlight highlight-source-c++\"><pre><span class=\"pl-k\">struct</span> <span class=\"pl-en\">NcclCommList</span> {\n  std::unique_ptr&lt;ncclComm_t[]&gt; comms;\n  <span class=\"pl-en\">NcclCommList</span>(IntList devices) \n     : comms(<span class=\"pl-k\">new</span> ncclComm_t[devices.size()]) {\n        <span class=\"pl-c\"><span class=\"pl-c\">//</span> call ncclCommInitAll</span>\n   }\n  <span class=\"pl-en\">~NcclCommList</span>() {\n       <span class=\"pl-c\"><span class=\"pl-c\">//</span> ncclCommDestroy each ncclComm_t</span>\n  }\n};</pre></div>\n<p>The value type in the map would then be <code>NcclCommList</code>.</p>", "body_text": "That free is on an individual ncclComm_t, not the array of communicators. As paszke wrote above, you should use C++ for the memory management. Something like:\nstruct NcclCommList {\n  std::unique_ptr<ncclComm_t[]> comms;\n  NcclCommList(IntList devices) \n     : comms(new ncclComm_t[devices.size()]) {\n        // call ncclCommInitAll\n   }\n  ~NcclCommList() {\n       // ncclCommDestroy each ncclComm_t\n  }\n};\nThe value type in the map would then be NcclCommList.", "in_reply_to_id": 143525916}