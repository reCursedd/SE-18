{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/143561265", "pull_request_review_id": 68089656, "id": 143561265, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0MzU2MTI2NQ==", "diff_hunk": "@@ -0,0 +1,175 @@\n+#include \"nccl.h\"\n+#include \"torch/csrc/THP.h\"\n+#include \"torch/csrc/Types.h\"\n+#include \"torch/csrc/DynamicTypes.h\"\n+#include \"torch/csrc/cuda/THCP.h\"\n+\n+#include <nccl.h>\n+#include <sstream>\n+#include <unordered_map>\n+\n+static inline void CHECK(ncclResult_t status)\n+{\n+  if (status != ncclSuccess) {\n+    std::stringstream err;\n+    err << \"NCCL Error \" << status << \": \" << ncclGetErrorString(status);\n+    throw std::runtime_error(err.str());\n+  }\n+}\n+\n+// TODO: make this thread_local + add mutexes\n+std::unordered_map<std::string, ncclComm_t*> _communicators;\n+\n+PyObject * THCPModule_nccl_destroy(PyObject *args) {\n+  for(auto it: _communicators) {\n+    ncclCommDestroy(*(it.second));\n+  }\n+  Py_RETURN_NONE;\n+}\n+\n+static ncclComm_t* _get_communicator(std::vector<at::Tensor>& inputs, int ndevices) {\n+  std::stringstream hash;\n+  std::vector<int> devs;\n+  for (int i = 0; i < ndevices; i++) {\n+    int dev = inputs[i].get_device();\n+    hash <<  dev << \",\";\n+    devs.push_back(dev);\n+  }\n+  if (_communicators.find(hash.str()) == _communicators.end()) {\n+    ncclComm_t *comms = (ncclComm_t*) malloc(sizeof(ncclComm_t) * ndevices);", "path": "torch/csrc/cuda/nccl.cpp", "position": null, "original_position": 39, "commit_id": "a531a9ae90ee16ad5784cff1d0faa7278c0c2be5", "original_commit_id": "a9ca631b923a583690c1d938f403fa720622a700", "user": {"login": "fmassa", "id": 9110200, "node_id": "MDQ6VXNlcjkxMTAyMDA=", "avatar_url": "https://avatars2.githubusercontent.com/u/9110200?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fmassa", "html_url": "https://github.com/fmassa", "followers_url": "https://api.github.com/users/fmassa/followers", "following_url": "https://api.github.com/users/fmassa/following{/other_user}", "gists_url": "https://api.github.com/users/fmassa/gists{/gist_id}", "starred_url": "https://api.github.com/users/fmassa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fmassa/subscriptions", "organizations_url": "https://api.github.com/users/fmassa/orgs", "repos_url": "https://api.github.com/users/fmassa/repos", "events_url": "https://api.github.com/users/fmassa/events{/privacy}", "received_events_url": "https://api.github.com/users/fmassa/received_events", "type": "User", "site_admin": false}, "body": "I think we should try to avoid variable length arrays (present in `new ncclComm_t[devices.size()]`), as [it might not be supported on MSVC](https://stackoverflow.com/questions/5246900/enabling-vlasvariable-length-arrays-in-ms-visual-c).", "created_at": "2017-10-09T19:49:32Z", "updated_at": "2018-11-23T15:35:11Z", "html_url": "https://github.com/pytorch/pytorch/pull/3028#discussion_r143561265", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/3028", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/143561265"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/3028#discussion_r143561265"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/3028"}}, "body_html": "<p>I think we should try to avoid variable length arrays (present in <code>new ncclComm_t[devices.size()]</code>), as <a href=\"https://stackoverflow.com/questions/5246900/enabling-vlasvariable-length-arrays-in-ms-visual-c\" rel=\"nofollow\">it might not be supported on MSVC</a>.</p>", "body_text": "I think we should try to avoid variable length arrays (present in new ncclComm_t[devices.size()]), as it might not be supported on MSVC.", "in_reply_to_id": 143525916}