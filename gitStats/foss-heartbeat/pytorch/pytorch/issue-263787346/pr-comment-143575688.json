{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/143575688", "pull_request_review_id": 68106258, "id": 143575688, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0MzU3NTY4OA==", "diff_hunk": "@@ -0,0 +1,172 @@\n+#include \"nccl.h\"\n+#include \"torch/csrc/THP.h\"\n+#include \"torch/csrc/Types.h\"\n+#include \"torch/csrc/DynamicTypes.h\"\n+#include \"torch/csrc/cuda/THCP.h\"\n+\n+#include <nccl.h>\n+#include <sstream>\n+#include <unordered_map>\n+\n+static inline void CHECK(ncclResult_t status)\n+{\n+  if (status != ncclSuccess) {\n+    std::stringstream err;\n+    err << \"NCCL Error \" << status << \": \" << ncclGetErrorString(status);\n+    throw std::runtime_error(err.str());\n+  }\n+}\n+\n+struct NcclCommList {\n+  std::unique_ptr<ncclComm_t[]> comms;\n+  int ndevices;\n+  NcclCommList(const std::vector<int>& devices)\n+    : comms(new ncclComm_t[devices.size()]), ndevices(devices.size()) {\n+    CHECK(ncclCommInitAll(comms.get(), devices.size(), devices.data()));\n+  }\n+  NcclCommList(NcclCommList&& foo) = default;\n+  ~NcclCommList() {\n+    if (comms) {\n+      for (int i = 0; i < ndevices; i++) {\n+\tncclCommDestroy(comms[i]);\n+      }\n+    }\n+  }\n+};\n+\n+// accesses to this object have to be guarded by THC's CudaFreeMutex\n+std::unordered_map<std::string, NcclCommList > _communicators;\n+\n+static ncclComm_t* _get_communicator(std::vector<at::Tensor>& inputs) {\n+  int ndevices = inputs.size();\n+  std::stringstream hash;\n+  std::vector<int> devs;\n+  for (int i = 0; i < ndevices; i++) {\n+    int dev = inputs[i].get_device();\n+    hash <<  dev << \",\";\n+    devs.push_back(dev);\n+  }\n+  if (_communicators.find(hash.str()) == _communicators.end()) {\n+    _communicators.emplace(hash.str(), devs);\n+  }\n+  return _communicators.at(hash.str()).comms.get();", "path": "torch/csrc/cuda/nccl.cpp", "position": null, "original_position": 52, "commit_id": "a531a9ae90ee16ad5784cff1d0faa7278c0c2be5", "original_commit_id": "fdc843c2c4cdec72dded5e2421dd7725705403d9", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Please use the idiom I mentioned, or at least use a vector of ints as a key. This hashing logic is super inefficient - you convert ints to strings, and you make a few copies of the internal buffer of a string stream.", "created_at": "2017-10-09T20:59:46Z", "updated_at": "2018-11-23T15:35:11Z", "html_url": "https://github.com/pytorch/pytorch/pull/3028#discussion_r143575688", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/3028", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/143575688"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/3028#discussion_r143575688"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/3028"}}, "body_html": "<p>Please use the idiom I mentioned, or at least use a vector of ints as a key. This hashing logic is super inefficient - you convert ints to strings, and you make a few copies of the internal buffer of a string stream.</p>", "body_text": "Please use the idiom I mentioned, or at least use a vector of ints as a key. This hashing logic is super inefficient - you convert ints to strings, and you make a few copies of the internal buffer of a string stream."}