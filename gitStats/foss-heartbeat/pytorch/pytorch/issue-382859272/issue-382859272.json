{"url": "https://api.github.com/repos/pytorch/pytorch/issues/14246", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/14246/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/14246/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/14246/events", "html_url": "https://github.com/pytorch/pytorch/pull/14246", "id": 382859272, "node_id": "MDExOlB1bGxSZXF1ZXN0MjMyNDY3OTAz", "number": 14246, "title": "Delete legacy THCStream (long live THCStream).", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 679953983, "node_id": "MDU6TGFiZWw2Nzk5NTM5ODM=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/jit", "name": "jit", "color": "c5def5", "default": false}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-11-20T21:40:54Z", "updated_at": "2018-11-23T21:40:28Z", "closed_at": null, "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/14246", "html_url": "https://github.com/pytorch/pytorch/pull/14246", "diff_url": "https://github.com/pytorch/pytorch/pull/14246.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/14246.patch"}, "body_html": "<p>Stack:<br>\n\u00a0\u00a0\u00a0\u00a0<g-emoji class=\"g-emoji\" alias=\"white_circle\" fallback-src=\"https://assets-cdn.github.com/images/icons/emoji/unicode/26aa.png\">\u26aa\ufe0f</g-emoji>\u00a0 <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"382264547\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/14191\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/pytorch/pytorch/pull/14191/hovercard\" href=\"https://github.com/pytorch/pytorch/pull/14191\">#14191</a> Add hash functions for Stream, CUDAStream; fix Device hash function\u00a0\u00a0<a href=\"https://our.internmc.facebook.com/intern/diff/D13119624/\" rel=\"nofollow\"><g-emoji class=\"g-emoji\" alias=\"yellow_heart\" fallback-src=\"https://assets-cdn.github.com/images/icons/emoji/unicode/1f49b.png\">\ud83d\udc9b</g-emoji></a><br>\n\u00a0\u00a0\u00a0\u00a0<g-emoji class=\"g-emoji\" alias=\"black_circle\" fallback-src=\"https://assets-cdn.github.com/images/icons/emoji/unicode/26ab.png\">\u26ab\ufe0f</g-emoji>\u00a0 <strong><a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"382859272\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/14246\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/pytorch/pytorch/pull/14246/hovercard\" href=\"https://github.com/pytorch/pytorch/pull/14246\">#14246</a> Delete legacy THCStream (long live THCStream).</strong>\u00a0\u00a0<a href=\"https://our.internmc.facebook.com/intern/diff/D13121531/\" rel=\"nofollow\"><g-emoji class=\"g-emoji\" alias=\"yellow_heart\" fallback-src=\"https://assets-cdn.github.com/images/icons/emoji/unicode/1f49b.png\">\ud83d\udc9b</g-emoji></a><br>\n\u00a0\u00a0\u00a0\u00a0<g-emoji class=\"g-emoji\" alias=\"white_circle\" fallback-src=\"https://assets-cdn.github.com/images/icons/emoji/unicode/26aa.png\">\u26aa\ufe0f</g-emoji>\u00a0 <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"382859312\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/14247\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/pytorch/pytorch/pull/14247/hovercard\" href=\"https://github.com/pytorch/pytorch/pull/14247\">#14247</a> Clean up house on CUDAStream\u00a0\u00a0<a href=\"https://our.internmc.facebook.com/intern/diff/D13141949/\" rel=\"nofollow\"><g-emoji class=\"g-emoji\" alias=\"yellow_heart\" fallback-src=\"https://assets-cdn.github.com/images/icons/emoji/unicode/1f49b.png\">\ud83d\udc9b</g-emoji></a></p>\n<p>This commit systematically eliminates THCStream entirely from THC, replacing it<br>\nwith at::cuda::CUDAStream.  In places where the previous pointer type showed up<br>\nin a public API signature, those functions are now only available to C++<br>\nclients.  (It would not be too difficult to make a C-compatible version of<br>\nCUDAStream, as it's really just a simple struct, but we leave this for<br>\nfuture work.)</p>\n<p>All functions in THC that referred to THCStream were expunged in favor of their<br>\nmodern counterparts.</p>\n<p>One annoyance was that I didn't feel like redoing how the torch.cuda.Stream<br>\nbinding code worked, but I really wanted to get rid of the stored THCStream*<br>\npointer.  So I repurposed the bit-packing code I implemented for Stream hashing,<br>\nand used that to (reversibly) store streams in a uint64_t cdata field.  A perhaps<br>\nmore future proof solution would be to get rid of cdata entirely, and store the<br>\ndevice and stream ID directly.</p>\n<p>Billing of changes:</p>\n<ul>\n<li>All CUDAStream_ pointer API functions are now hidden and anonymously<br>\nnamespaced (instead of being in the impl namespace).  All use sites<br>\nrewritten to use the modern C++ API.  Since CUDAStreamInternals is no<br>\nlonger part of the public API, the CUDAStreamInternals constructor and<br>\ninternals() method have been removed, and replaced with anonymous<br>\nfunctions in the C++ file.</li>\n<li>device_index() returns DeviceIndex rather than int64_t now</li>\n<li>Stream and CUDAStream now have pack/unpack methods.  (CUDAStream checks<br>\nthat the unpacked bit-pattern is for a CUDA device.)</li>\n<li>THCStream.h header is removed entirely</li>\n<li>Most THCStream handling functions in THC API are removed</li>\n</ul>\n<p>Differential Revision: <a href=\"https://our.internmc.facebook.com/intern/diff/D13121531/\" rel=\"nofollow\">D13121531</a></p>", "body_text": "Stack:\n\u00a0\u00a0\u00a0\u00a0\u26aa\ufe0f\u00a0 #14191 Add hash functions for Stream, CUDAStream; fix Device hash function\u00a0\u00a0\ud83d\udc9b\n\u00a0\u00a0\u00a0\u00a0\u26ab\ufe0f\u00a0 #14246 Delete legacy THCStream (long live THCStream).\u00a0\u00a0\ud83d\udc9b\n\u00a0\u00a0\u00a0\u00a0\u26aa\ufe0f\u00a0 #14247 Clean up house on CUDAStream\u00a0\u00a0\ud83d\udc9b\nThis commit systematically eliminates THCStream entirely from THC, replacing it\nwith at::cuda::CUDAStream.  In places where the previous pointer type showed up\nin a public API signature, those functions are now only available to C++\nclients.  (It would not be too difficult to make a C-compatible version of\nCUDAStream, as it's really just a simple struct, but we leave this for\nfuture work.)\nAll functions in THC that referred to THCStream were expunged in favor of their\nmodern counterparts.\nOne annoyance was that I didn't feel like redoing how the torch.cuda.Stream\nbinding code worked, but I really wanted to get rid of the stored THCStream*\npointer.  So I repurposed the bit-packing code I implemented for Stream hashing,\nand used that to (reversibly) store streams in a uint64_t cdata field.  A perhaps\nmore future proof solution would be to get rid of cdata entirely, and store the\ndevice and stream ID directly.\nBilling of changes:\n\nAll CUDAStream_ pointer API functions are now hidden and anonymously\nnamespaced (instead of being in the impl namespace).  All use sites\nrewritten to use the modern C++ API.  Since CUDAStreamInternals is no\nlonger part of the public API, the CUDAStreamInternals constructor and\ninternals() method have been removed, and replaced with anonymous\nfunctions in the C++ file.\ndevice_index() returns DeviceIndex rather than int64_t now\nStream and CUDAStream now have pack/unpack methods.  (CUDAStream checks\nthat the unpacked bit-pattern is for a CUDA device.)\nTHCStream.h header is removed entirely\nMost THCStream handling functions in THC API are removed\n\nDifferential Revision: D13121531", "body": "Stack:\n&nbsp;&nbsp;&nbsp;&nbsp;:white_circle:&nbsp; #14191 Add hash functions for Stream, CUDAStream; fix Device hash function&nbsp;&nbsp;[:yellow_heart:](https://our.internmc.facebook.com/intern/diff/D13119624/)\n&nbsp;&nbsp;&nbsp;&nbsp;:black_circle:&nbsp; **#14246 Delete legacy THCStream (long live THCStream).**&nbsp;&nbsp;[:yellow_heart:](https://our.internmc.facebook.com/intern/diff/D13121531/)\n&nbsp;&nbsp;&nbsp;&nbsp;:white_circle:&nbsp; #14247 Clean up house on CUDAStream&nbsp;&nbsp;[:yellow_heart:](https://our.internmc.facebook.com/intern/diff/D13141949/)\n\nThis commit systematically eliminates THCStream entirely from THC, replacing it\nwith at::cuda::CUDAStream.  In places where the previous pointer type showed up\nin a public API signature, those functions are now only available to C++\nclients.  (It would not be too difficult to make a C-compatible version of\nCUDAStream, as it's really just a simple struct, but we leave this for\nfuture work.)\n\nAll functions in THC that referred to THCStream were expunged in favor of their\nmodern counterparts.\n\nOne annoyance was that I didn't feel like redoing how the torch.cuda.Stream\nbinding code worked, but I really wanted to get rid of the stored THCStream*\npointer.  So I repurposed the bit-packing code I implemented for Stream hashing,\nand used that to (reversibly) store streams in a uint64_t cdata field.  A perhaps\nmore future proof solution would be to get rid of cdata entirely, and store the\ndevice and stream ID directly.\n\nBilling of changes:\n- All CUDAStream_ pointer API functions are now hidden and anonymously\n  namespaced (instead of being in the impl namespace).  All use sites\n  rewritten to use the modern C++ API.  Since CUDAStreamInternals is no\n  longer part of the public API, the CUDAStreamInternals constructor and\n  internals() method have been removed, and replaced with anonymous\n  functions in the C++ file.\n- device_index() returns DeviceIndex rather than int64_t now\n- Stream and CUDAStream now have pack/unpack methods.  (CUDAStream checks\n  that the unpacked bit-pattern is for a CUDA device.)\n- THCStream.h header is removed entirely\n- Most THCStream handling functions in THC API are removed\n\nDifferential Revision: [D13121531](https://our.internmc.facebook.com/intern/diff/D13121531/)"}