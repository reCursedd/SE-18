{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/188649241", "pull_request_review_id": 120669925, "id": 188649241, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4ODY0OTI0MQ==", "diff_hunk": "@@ -303,6 +316,7 @@ struct Function : std::enable_shared_from_this<Function> {\n   // Since `Function`s are neither copyable nor moveable, we can have const\n   // fields.\n   const uint64_t sequence_nr_;\n+  const int backwards_priority_;", "path": "torch/csrc/autograd/function.h", "position": null, "original_position": 43, "commit_id": "9bab040e8db2be667200865e12261831b81b286f", "original_commit_id": "0145925cdd7e7db5b77739a0efc67a0e3d7ef540", "user": {"login": "mruberry", "id": 38511765, "node_id": "MDQ6VXNlcjM4NTExNzY1", "avatar_url": "https://avatars3.githubusercontent.com/u/38511765?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mruberry", "html_url": "https://github.com/mruberry", "followers_url": "https://api.github.com/users/mruberry/followers", "following_url": "https://api.github.com/users/mruberry/following{/other_user}", "gists_url": "https://api.github.com/users/mruberry/gists{/gist_id}", "starred_url": "https://api.github.com/users/mruberry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mruberry/subscriptions", "organizations_url": "https://api.github.com/users/mruberry/orgs", "repos_url": "https://api.github.com/users/mruberry/repos", "events_url": "https://api.github.com/users/mruberry/events{/privacy}", "received_events_url": "https://api.github.com/users/mruberry/received_events", "type": "User", "site_admin": false}, "body": "My original hack was actually to assign UINT_MAX to the sequence_nr to test the behavior, but I think this fix has comparable complexity and preserves the sequence_nr, and the sequence_nr is well-defined and may be independently useful later.\r\n\r\nEven if we clobber the sequence_nr we still need a constructor to set it properly, so we only save the backwards_priority_ declaration, its getter, and the logic in the priority queue that checks it. This is only one check and one integer of savings at the cost of hacking up sequence_nr. \r\n\r\nYour call but I think the complexity is comparable and I like not hacking sequence_nr. Once you let me know which way you want to go I'll have the updated PR shortly.\r\n\r\n", "created_at": "2018-05-16T14:35:57Z", "updated_at": "2018-11-23T15:44:08Z", "html_url": "https://github.com/pytorch/pytorch/pull/7604#discussion_r188649241", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/7604", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/188649241"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/7604#discussion_r188649241"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/7604"}}, "body_html": "<p>My original hack was actually to assign UINT_MAX to the sequence_nr to test the behavior, but I think this fix has comparable complexity and preserves the sequence_nr, and the sequence_nr is well-defined and may be independently useful later.</p>\n<p>Even if we clobber the sequence_nr we still need a constructor to set it properly, so we only save the backwards_priority_ declaration, its getter, and the logic in the priority queue that checks it. This is only one check and one integer of savings at the cost of hacking up sequence_nr.</p>\n<p>Your call but I think the complexity is comparable and I like not hacking sequence_nr. Once you let me know which way you want to go I'll have the updated PR shortly.</p>", "body_text": "My original hack was actually to assign UINT_MAX to the sequence_nr to test the behavior, but I think this fix has comparable complexity and preserves the sequence_nr, and the sequence_nr is well-defined and may be independently useful later.\nEven if we clobber the sequence_nr we still need a constructor to set it properly, so we only save the backwards_priority_ declaration, its getter, and the logic in the priority queue that checks it. This is only one check and one integer of savings at the cost of hacking up sequence_nr.\nYour call but I think the complexity is comparable and I like not hacking sequence_nr. Once you let me know which way you want to go I'll have the updated PR shortly.", "in_reply_to_id": 188537507}