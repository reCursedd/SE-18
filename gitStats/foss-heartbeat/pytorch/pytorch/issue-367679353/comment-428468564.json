{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/428468564", "html_url": "https://github.com/pytorch/pytorch/issues/12449#issuecomment-428468564", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/12449", "id": 428468564, "node_id": "MDEyOklzc3VlQ29tbWVudDQyODQ2ODU2NA==", "user": {"login": "jinfagang", "id": 21303438, "node_id": "MDQ6VXNlcjIxMzAzNDM4", "avatar_url": "https://avatars3.githubusercontent.com/u/21303438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jinfagang", "html_url": "https://github.com/jinfagang", "followers_url": "https://api.github.com/users/jinfagang/followers", "following_url": "https://api.github.com/users/jinfagang/following{/other_user}", "gists_url": "https://api.github.com/users/jinfagang/gists{/gist_id}", "starred_url": "https://api.github.com/users/jinfagang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jinfagang/subscriptions", "organizations_url": "https://api.github.com/users/jinfagang/orgs", "repos_url": "https://api.github.com/users/jinfagang/repos", "events_url": "https://api.github.com/users/jinfagang/events{/privacy}", "received_events_url": "https://api.github.com/users/jinfagang/received_events", "type": "User", "site_admin": false}, "created_at": "2018-10-10T07:34:05Z", "updated_at": "2018-10-10T07:34:05Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=6429851\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/goldsborough\">@goldsborough</a> I am just runing this inside build folder as suggested as docs, I can see any difference between these two. <strong>But it's works and cmake config done.</strong></p>\n<p>However after make, some new error got:</p>\n<pre><code>\u279c  build make\nScanning dependencies of target example-app\n[ 50%] Building CXX object CMakeFiles/example-app.dir/example-app.cpp.o\n[100%] Linking CXX executable example-app\nld: warning: ignoring file /Volumes/xs/tmp/libtorch_learn/libtorch/lib/libtorch.so, file was built for unsupported file format ( 0x7F 0x45 0x4C 0x46 0x02 0x01 0x01 0x03 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 ) which is not the architecture being linked (x86_64): /Volumes/xs/tmp/libtorch_learn/libtorch/lib/libtorch.so\nld: warning: ignoring file /Volumes/xs/tmp/libtorch_learn/libtorch/lib/libcaffe2.so, file was built for unsupported file format ( 0x7F 0x45 0x4C 0x46 0x02 0x01 0x01 0x03 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 ) which is not the architecture being linked (x86_64): /Volumes/xs/tmp/libtorch_learn/libtorch/lib/libcaffe2.so\nld: warning: ignoring file /Volumes/xs/tmp/libtorch_learn/libtorch/lib/libc10.so, file was built for unsupported file format ( 0x7F 0x45 0x4C 0x46 0x02 0x01 0x01 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 ) which is not the architecture being linked (x86_64): /Volumes/xs/tmp/libtorch_learn/libtorch/lib/libc10.so\nUndefined symbols for architecture x86_64:\n  \"at::CPUTensorId()\", referenced from:\n      at::tensorTypeIdToBackend(at::TensorTypeId) in example-app.cpp.o\n  \"at::CUDATensorId()\", referenced from:\n      at::tensorTypeIdToBackend(at::TensorTypeId) in example-app.cpp.o\n  \"at::SparseCPUTensorId()\", referenced from:\n      at::tensorTypeIdToBackend(at::TensorTypeId) in example-app.cpp.o\n  \"at::UndefinedTensorId()\", referenced from:\n      at::tensorTypeIdToBackend(at::TensorTypeId) in example-app.cpp.o\n  \"at::SparseCUDATensorId()\", referenced from:\n      at::tensorTypeIdToBackend(at::TensorTypeId) in example-app.cpp.o\n  \"at::UndefinedTensorImpl::_singleton\", referenced from:\n      at::UndefinedTensorImpl::singleton() in example-app.cpp.o\n  \"at::getDefaultTensorOptions()\", referenced from:\n      at::TensorOptions::requires_grad() const in example-app.cpp.o\n      at::TensorOptions::device() const in example-app.cpp.o\n  \"at::globalLegacyTypeDispatch()\", referenced from:\n      at::TensorImpl::type() const in example-app.cpp.o\n  \"at::Error::Error(at::SourceLocation, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;)\", referenced from:\n      torch::autograd::make_variable(at::Tensor, bool) in example-app.cpp.o\n      torch::jit::Block::appendNode(torch::jit::Node*) in example-app.cpp.o\n      torch::jit::Node::inBlockList() const in example-app.cpp.o\n      torch::jit::Node::insertBefore(torch::jit::Node*) in example-app.cpp.o\n      torch::jit::Node::insertAfter(torch::jit::Node*) in example-app.cpp.o\n      at::DeviceGuard::set_index(int) in example-app.cpp.o\n      at::tensorTypeIdToBackend(at::TensorTypeId) in example-app.cpp.o\n      ...\n  \"at::print(std::__1::basic_ostream&lt;char, std::__1::char_traits&lt;char&gt; &gt;&amp;, at::Tensor const&amp;, long long)\", referenced from:\n      at::operator&lt;&lt;(std::__1::basic_ostream&lt;char, std::__1::char_traits&lt;char&gt; &gt;&amp;, at::Tensor const&amp;) in example-app.cpp.o\n  \"at::detail::getVariableHooks()\", referenced from:\n      at::LegacyTypeDispatch::getTypeRaw(at::Backend, at::ScalarType, bool) in example-app.cpp.o\n  \"at::detail::DynamicCUDAInterface::get_device\", referenced from:\n      at::DeviceGuard::set_index(int) in example-app.cpp.o\n  \"at::detail::DynamicCUDAInterface::set_device\", referenced from:\n      at::DeviceGuard::set_index(int) in example-app.cpp.o\n  \"at::detail::DynamicCUDAInterface::unchecked_set_device\", referenced from:\n      at::DeviceGuard::~DeviceGuard() in example-app.cpp.o\n  \"at::native::rand(at::ArrayRef&lt;long long&gt;, at::TensorOptions const&amp;)\", referenced from:\n      at::rand(at::ArrayRef&lt;long long&gt;, at::TensorOptions const&amp;) in example-app.cpp.o\n  \"at::operator&lt;&lt;(std::__1::basic_ostream&lt;char, std::__1::char_traits&lt;char&gt; &gt;&amp;, at::TensorTypeId)\", referenced from:\n      std::__1::basic_ostream&lt;char, std::__1::char_traits&lt;char&gt; &gt;&amp; at::detail::_str&lt;at::TensorTypeId&gt;(std::__1::basic_ostream&lt;char, std::__1::char_traits&lt;char&gt; &gt;&amp;, at::TensorTypeId const&amp;) in example-app.cpp.o\n  \"torch::jit::DynamicType::get()\", referenced from:\n      torch::jit::Value::Value(torch::jit::Node*, unsigned long) in example-app.cpp.o\n  \"torch::jit::tracer::getTracingState()\", referenced from:\n      torch::rand(at::ArrayRef&lt;long long&gt;, at::TensorOptions const&amp;) in example-app.cpp.o\n      torch::jit::tracer::isTracing() in example-app.cpp.o\n  \"torch::jit::tracer::setTracingState(std::__1::shared_ptr&lt;torch::jit::tracer::TracingState&gt;)\", referenced from:\n      torch::rand(at::ArrayRef&lt;long long&gt;, at::TensorOptions const&amp;) in example-app.cpp.o\n  \"torch::jit::tracer::recordSourceLocation(torch::jit::Node*)\", referenced from:\n      torch::rand(at::ArrayRef&lt;long long&gt;, at::TensorOptions const&amp;) in example-app.cpp.o\n  \"torch::jit::tracer::addInputs(torch::jit::Node*, char const*, at::ArrayRef&lt;long long&gt;)\", referenced from:\n      torch::rand(at::ArrayRef&lt;long long&gt;, at::TensorOptions const&amp;) in example-app.cpp.o\n  \"torch::jit::tracer::addInputs(torch::jit::Node*, char const*, at::TensorOptions const&amp;)\", referenced from:\n      torch::rand(at::ArrayRef&lt;long long&gt;, at::TensorOptions const&amp;) in example-app.cpp.o\n  \"torch::jit::tracer::addOutput(torch::jit::Node*, at::Tensor const&amp;)\", referenced from:\n      torch::rand(at::ArrayRef&lt;long long&gt;, at::TensorOptions const&amp;) in example-app.cpp.o\n  \"torch::autograd::Variable::Impl::Impl(at::Tensor, bool, torch::autograd::Edge)\", referenced from:\n      c10::intrusive_ptr&lt;torch::autograd::Variable::Impl, c10::detail::intrusive_target_default_null_type&lt;torch::autograd::Variable::Impl&gt; &gt; c10::intrusive_ptr&lt;torch::autograd::Variable::Impl, c10::detail::intrusive_target_default_null_type&lt;torch::autograd::Variable::Impl&gt; &gt;::make&lt;at::Tensor&amp;, bool&amp;&gt;(at::Tensor&amp;&amp;&amp;, bool&amp;&amp;&amp;) in example-app.cpp.o\nld: symbol(s) not found for architecture x86_64\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\nmake[2]: *** [example-app] Error 1\nmake[1]: *** [CMakeFiles/example-app.dir/all] Error 2\nmake: *** [all] Error 2\n</code></pre>\n<p>Is that not support for macos? But I just download the macos version .so library.</p>", "body_text": "@goldsborough I am just runing this inside build folder as suggested as docs, I can see any difference between these two. But it's works and cmake config done.\nHowever after make, some new error got:\n\u279c  build make\nScanning dependencies of target example-app\n[ 50%] Building CXX object CMakeFiles/example-app.dir/example-app.cpp.o\n[100%] Linking CXX executable example-app\nld: warning: ignoring file /Volumes/xs/tmp/libtorch_learn/libtorch/lib/libtorch.so, file was built for unsupported file format ( 0x7F 0x45 0x4C 0x46 0x02 0x01 0x01 0x03 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 ) which is not the architecture being linked (x86_64): /Volumes/xs/tmp/libtorch_learn/libtorch/lib/libtorch.so\nld: warning: ignoring file /Volumes/xs/tmp/libtorch_learn/libtorch/lib/libcaffe2.so, file was built for unsupported file format ( 0x7F 0x45 0x4C 0x46 0x02 0x01 0x01 0x03 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 ) which is not the architecture being linked (x86_64): /Volumes/xs/tmp/libtorch_learn/libtorch/lib/libcaffe2.so\nld: warning: ignoring file /Volumes/xs/tmp/libtorch_learn/libtorch/lib/libc10.so, file was built for unsupported file format ( 0x7F 0x45 0x4C 0x46 0x02 0x01 0x01 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 ) which is not the architecture being linked (x86_64): /Volumes/xs/tmp/libtorch_learn/libtorch/lib/libc10.so\nUndefined symbols for architecture x86_64:\n  \"at::CPUTensorId()\", referenced from:\n      at::tensorTypeIdToBackend(at::TensorTypeId) in example-app.cpp.o\n  \"at::CUDATensorId()\", referenced from:\n      at::tensorTypeIdToBackend(at::TensorTypeId) in example-app.cpp.o\n  \"at::SparseCPUTensorId()\", referenced from:\n      at::tensorTypeIdToBackend(at::TensorTypeId) in example-app.cpp.o\n  \"at::UndefinedTensorId()\", referenced from:\n      at::tensorTypeIdToBackend(at::TensorTypeId) in example-app.cpp.o\n  \"at::SparseCUDATensorId()\", referenced from:\n      at::tensorTypeIdToBackend(at::TensorTypeId) in example-app.cpp.o\n  \"at::UndefinedTensorImpl::_singleton\", referenced from:\n      at::UndefinedTensorImpl::singleton() in example-app.cpp.o\n  \"at::getDefaultTensorOptions()\", referenced from:\n      at::TensorOptions::requires_grad() const in example-app.cpp.o\n      at::TensorOptions::device() const in example-app.cpp.o\n  \"at::globalLegacyTypeDispatch()\", referenced from:\n      at::TensorImpl::type() const in example-app.cpp.o\n  \"at::Error::Error(at::SourceLocation, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)\", referenced from:\n      torch::autograd::make_variable(at::Tensor, bool) in example-app.cpp.o\n      torch::jit::Block::appendNode(torch::jit::Node*) in example-app.cpp.o\n      torch::jit::Node::inBlockList() const in example-app.cpp.o\n      torch::jit::Node::insertBefore(torch::jit::Node*) in example-app.cpp.o\n      torch::jit::Node::insertAfter(torch::jit::Node*) in example-app.cpp.o\n      at::DeviceGuard::set_index(int) in example-app.cpp.o\n      at::tensorTypeIdToBackend(at::TensorTypeId) in example-app.cpp.o\n      ...\n  \"at::print(std::__1::basic_ostream<char, std::__1::char_traits<char> >&, at::Tensor const&, long long)\", referenced from:\n      at::operator<<(std::__1::basic_ostream<char, std::__1::char_traits<char> >&, at::Tensor const&) in example-app.cpp.o\n  \"at::detail::getVariableHooks()\", referenced from:\n      at::LegacyTypeDispatch::getTypeRaw(at::Backend, at::ScalarType, bool) in example-app.cpp.o\n  \"at::detail::DynamicCUDAInterface::get_device\", referenced from:\n      at::DeviceGuard::set_index(int) in example-app.cpp.o\n  \"at::detail::DynamicCUDAInterface::set_device\", referenced from:\n      at::DeviceGuard::set_index(int) in example-app.cpp.o\n  \"at::detail::DynamicCUDAInterface::unchecked_set_device\", referenced from:\n      at::DeviceGuard::~DeviceGuard() in example-app.cpp.o\n  \"at::native::rand(at::ArrayRef<long long>, at::TensorOptions const&)\", referenced from:\n      at::rand(at::ArrayRef<long long>, at::TensorOptions const&) in example-app.cpp.o\n  \"at::operator<<(std::__1::basic_ostream<char, std::__1::char_traits<char> >&, at::TensorTypeId)\", referenced from:\n      std::__1::basic_ostream<char, std::__1::char_traits<char> >& at::detail::_str<at::TensorTypeId>(std::__1::basic_ostream<char, std::__1::char_traits<char> >&, at::TensorTypeId const&) in example-app.cpp.o\n  \"torch::jit::DynamicType::get()\", referenced from:\n      torch::jit::Value::Value(torch::jit::Node*, unsigned long) in example-app.cpp.o\n  \"torch::jit::tracer::getTracingState()\", referenced from:\n      torch::rand(at::ArrayRef<long long>, at::TensorOptions const&) in example-app.cpp.o\n      torch::jit::tracer::isTracing() in example-app.cpp.o\n  \"torch::jit::tracer::setTracingState(std::__1::shared_ptr<torch::jit::tracer::TracingState>)\", referenced from:\n      torch::rand(at::ArrayRef<long long>, at::TensorOptions const&) in example-app.cpp.o\n  \"torch::jit::tracer::recordSourceLocation(torch::jit::Node*)\", referenced from:\n      torch::rand(at::ArrayRef<long long>, at::TensorOptions const&) in example-app.cpp.o\n  \"torch::jit::tracer::addInputs(torch::jit::Node*, char const*, at::ArrayRef<long long>)\", referenced from:\n      torch::rand(at::ArrayRef<long long>, at::TensorOptions const&) in example-app.cpp.o\n  \"torch::jit::tracer::addInputs(torch::jit::Node*, char const*, at::TensorOptions const&)\", referenced from:\n      torch::rand(at::ArrayRef<long long>, at::TensorOptions const&) in example-app.cpp.o\n  \"torch::jit::tracer::addOutput(torch::jit::Node*, at::Tensor const&)\", referenced from:\n      torch::rand(at::ArrayRef<long long>, at::TensorOptions const&) in example-app.cpp.o\n  \"torch::autograd::Variable::Impl::Impl(at::Tensor, bool, torch::autograd::Edge)\", referenced from:\n      c10::intrusive_ptr<torch::autograd::Variable::Impl, c10::detail::intrusive_target_default_null_type<torch::autograd::Variable::Impl> > c10::intrusive_ptr<torch::autograd::Variable::Impl, c10::detail::intrusive_target_default_null_type<torch::autograd::Variable::Impl> >::make<at::Tensor&, bool&>(at::Tensor&&&, bool&&&) in example-app.cpp.o\nld: symbol(s) not found for architecture x86_64\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\nmake[2]: *** [example-app] Error 1\nmake[1]: *** [CMakeFiles/example-app.dir/all] Error 2\nmake: *** [all] Error 2\n\nIs that not support for macos? But I just download the macos version .so library.", "body": "@goldsborough I am just runing this inside build folder as suggested as docs, I can see any difference between these two. **But it's works and cmake config done.**\r\n\r\nHowever after make, some new error got:\r\n\r\n```\r\n\u279c  build make\r\nScanning dependencies of target example-app\r\n[ 50%] Building CXX object CMakeFiles/example-app.dir/example-app.cpp.o\r\n[100%] Linking CXX executable example-app\r\nld: warning: ignoring file /Volumes/xs/tmp/libtorch_learn/libtorch/lib/libtorch.so, file was built for unsupported file format ( 0x7F 0x45 0x4C 0x46 0x02 0x01 0x01 0x03 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 ) which is not the architecture being linked (x86_64): /Volumes/xs/tmp/libtorch_learn/libtorch/lib/libtorch.so\r\nld: warning: ignoring file /Volumes/xs/tmp/libtorch_learn/libtorch/lib/libcaffe2.so, file was built for unsupported file format ( 0x7F 0x45 0x4C 0x46 0x02 0x01 0x01 0x03 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 ) which is not the architecture being linked (x86_64): /Volumes/xs/tmp/libtorch_learn/libtorch/lib/libcaffe2.so\r\nld: warning: ignoring file /Volumes/xs/tmp/libtorch_learn/libtorch/lib/libc10.so, file was built for unsupported file format ( 0x7F 0x45 0x4C 0x46 0x02 0x01 0x01 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 ) which is not the architecture being linked (x86_64): /Volumes/xs/tmp/libtorch_learn/libtorch/lib/libc10.so\r\nUndefined symbols for architecture x86_64:\r\n  \"at::CPUTensorId()\", referenced from:\r\n      at::tensorTypeIdToBackend(at::TensorTypeId) in example-app.cpp.o\r\n  \"at::CUDATensorId()\", referenced from:\r\n      at::tensorTypeIdToBackend(at::TensorTypeId) in example-app.cpp.o\r\n  \"at::SparseCPUTensorId()\", referenced from:\r\n      at::tensorTypeIdToBackend(at::TensorTypeId) in example-app.cpp.o\r\n  \"at::UndefinedTensorId()\", referenced from:\r\n      at::tensorTypeIdToBackend(at::TensorTypeId) in example-app.cpp.o\r\n  \"at::SparseCUDATensorId()\", referenced from:\r\n      at::tensorTypeIdToBackend(at::TensorTypeId) in example-app.cpp.o\r\n  \"at::UndefinedTensorImpl::_singleton\", referenced from:\r\n      at::UndefinedTensorImpl::singleton() in example-app.cpp.o\r\n  \"at::getDefaultTensorOptions()\", referenced from:\r\n      at::TensorOptions::requires_grad() const in example-app.cpp.o\r\n      at::TensorOptions::device() const in example-app.cpp.o\r\n  \"at::globalLegacyTypeDispatch()\", referenced from:\r\n      at::TensorImpl::type() const in example-app.cpp.o\r\n  \"at::Error::Error(at::SourceLocation, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)\", referenced from:\r\n      torch::autograd::make_variable(at::Tensor, bool) in example-app.cpp.o\r\n      torch::jit::Block::appendNode(torch::jit::Node*) in example-app.cpp.o\r\n      torch::jit::Node::inBlockList() const in example-app.cpp.o\r\n      torch::jit::Node::insertBefore(torch::jit::Node*) in example-app.cpp.o\r\n      torch::jit::Node::insertAfter(torch::jit::Node*) in example-app.cpp.o\r\n      at::DeviceGuard::set_index(int) in example-app.cpp.o\r\n      at::tensorTypeIdToBackend(at::TensorTypeId) in example-app.cpp.o\r\n      ...\r\n  \"at::print(std::__1::basic_ostream<char, std::__1::char_traits<char> >&, at::Tensor const&, long long)\", referenced from:\r\n      at::operator<<(std::__1::basic_ostream<char, std::__1::char_traits<char> >&, at::Tensor const&) in example-app.cpp.o\r\n  \"at::detail::getVariableHooks()\", referenced from:\r\n      at::LegacyTypeDispatch::getTypeRaw(at::Backend, at::ScalarType, bool) in example-app.cpp.o\r\n  \"at::detail::DynamicCUDAInterface::get_device\", referenced from:\r\n      at::DeviceGuard::set_index(int) in example-app.cpp.o\r\n  \"at::detail::DynamicCUDAInterface::set_device\", referenced from:\r\n      at::DeviceGuard::set_index(int) in example-app.cpp.o\r\n  \"at::detail::DynamicCUDAInterface::unchecked_set_device\", referenced from:\r\n      at::DeviceGuard::~DeviceGuard() in example-app.cpp.o\r\n  \"at::native::rand(at::ArrayRef<long long>, at::TensorOptions const&)\", referenced from:\r\n      at::rand(at::ArrayRef<long long>, at::TensorOptions const&) in example-app.cpp.o\r\n  \"at::operator<<(std::__1::basic_ostream<char, std::__1::char_traits<char> >&, at::TensorTypeId)\", referenced from:\r\n      std::__1::basic_ostream<char, std::__1::char_traits<char> >& at::detail::_str<at::TensorTypeId>(std::__1::basic_ostream<char, std::__1::char_traits<char> >&, at::TensorTypeId const&) in example-app.cpp.o\r\n  \"torch::jit::DynamicType::get()\", referenced from:\r\n      torch::jit::Value::Value(torch::jit::Node*, unsigned long) in example-app.cpp.o\r\n  \"torch::jit::tracer::getTracingState()\", referenced from:\r\n      torch::rand(at::ArrayRef<long long>, at::TensorOptions const&) in example-app.cpp.o\r\n      torch::jit::tracer::isTracing() in example-app.cpp.o\r\n  \"torch::jit::tracer::setTracingState(std::__1::shared_ptr<torch::jit::tracer::TracingState>)\", referenced from:\r\n      torch::rand(at::ArrayRef<long long>, at::TensorOptions const&) in example-app.cpp.o\r\n  \"torch::jit::tracer::recordSourceLocation(torch::jit::Node*)\", referenced from:\r\n      torch::rand(at::ArrayRef<long long>, at::TensorOptions const&) in example-app.cpp.o\r\n  \"torch::jit::tracer::addInputs(torch::jit::Node*, char const*, at::ArrayRef<long long>)\", referenced from:\r\n      torch::rand(at::ArrayRef<long long>, at::TensorOptions const&) in example-app.cpp.o\r\n  \"torch::jit::tracer::addInputs(torch::jit::Node*, char const*, at::TensorOptions const&)\", referenced from:\r\n      torch::rand(at::ArrayRef<long long>, at::TensorOptions const&) in example-app.cpp.o\r\n  \"torch::jit::tracer::addOutput(torch::jit::Node*, at::Tensor const&)\", referenced from:\r\n      torch::rand(at::ArrayRef<long long>, at::TensorOptions const&) in example-app.cpp.o\r\n  \"torch::autograd::Variable::Impl::Impl(at::Tensor, bool, torch::autograd::Edge)\", referenced from:\r\n      c10::intrusive_ptr<torch::autograd::Variable::Impl, c10::detail::intrusive_target_default_null_type<torch::autograd::Variable::Impl> > c10::intrusive_ptr<torch::autograd::Variable::Impl, c10::detail::intrusive_target_default_null_type<torch::autograd::Variable::Impl> >::make<at::Tensor&, bool&>(at::Tensor&&&, bool&&&) in example-app.cpp.o\r\nld: symbol(s) not found for architecture x86_64\r\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\r\nmake[2]: *** [example-app] Error 1\r\nmake[1]: *** [CMakeFiles/example-app.dir/all] Error 2\r\nmake: *** [all] Error 2\r\n```\r\n\r\nIs that not support for macos? But I just download the macos version .so library."}