{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/195272480", "pull_request_review_id": 128606437, "id": 195272480, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTI3MjQ4MA==", "diff_hunk": "@@ -0,0 +1,149 @@\n+#ifndef CAFFE2_OPERATORS_REDUCE_OPS_H_\n+#define CAFFE2_OPERATORS_REDUCE_OPS_H_\n+\n+#include <algorithm>\n+#include <functional>\n+#include <vector>\n+\n+#include \"caffe2/core/context.h\"\n+#include \"caffe2/core/operator.h\"\n+#include \"caffe2/core/types.h\"\n+#include \"caffe2/utils/math.h\"\n+\n+namespace caffe2 {\n+\n+template <typename InputTypes, class Context, class Expander>\n+class ExpandOp final : public Operator<Context> {\n+ public:\n+  USE_OPERATOR_CONTEXT_FUNCTIONS;\n+\n+  ExpandOp(const OperatorDef& operator_def, Workspace* ws)\n+      : Operator<Context>(operator_def, ws) {}\n+\n+  bool RunOnDevice() override {\n+    return DispatchHelper<InputTypes>::call(this, Input(0));\n+  }\n+ template <typename T>\n+  bool DoRunWithType() {\n+    const auto& X = Input(0);\n+    const auto& Y_shape_tensor = Input(1);\n+\tstd::vector<int> shape_dims(Y_shape_tensor.size());\n+\tcontext_.template Copy<int, Context, CPUContext>(Y_shape_tensor.size(), Y_shape_tensor.template data<int>(), shape_dims.data());\n+    const int* Y_shape = Y_shape_tensor.template data<int>();\n+    auto* Y = Output(0);\n+\n+\tconst int ndim = shape_dims.size();\n+    const std::vector<int> X_dims(X.dims().cbegin(), X.dims().cend());\n+    std::vector<int> Y_dims;\n+    Y_dims.reserve(std::max(ndim, X.ndim()));\n+    // ndim, X.ndim() might equal to 0\n+    std::cout << \"loginfoo \" << ndim << \" \" << X.ndim() << std::endl;\n+    for (int i = ndim - 1, j = X.ndim() - 1; i >= 0 || j >= 0; i--, j--) {\n+      const int shape_x = (j >= 0 ? X_dims[j] : 1);\n+      const int shape_y = (i >= 0 ? shape_dims[i] : 1);\n+      CAFFE_ENFORCE(\n+          shape_x == 1 || shape_y == 1 || shape_x == shape_y,\n+          \"Dimensions format invalid.\");\n+      Y_dims.push_back(std::max(shape_x, shape_y));\n+    }\n+    std::reverse(Y_dims.begin(), Y_dims.end());\n+    Y->Resize(Y_dims);\n+    return expander_.template Forward<T>(\n+        X.ndim(),\n+        X_dims,\n+        Y_dims.size(),\n+        Y_dims,\n+        X.template data<T>(),\n+        Y->template mutable_data<T>(),\n+        &context_);\n+  }\n+\n+ private:\n+  Expander expander_{};\n+};\n+\n+template <typename InputTypes, class Context, class Expander>\n+class ExpandGradientOp final : public Operator<Context> {\n+ public:\n+  USE_OPERATOR_CONTEXT_FUNCTIONS;\n+\n+  ExpandGradientOp(const OperatorDef& operator_def, Workspace* ws)\n+      : Operator<Context>(operator_def, ws) {}\n+\n+  bool RunOnDevice() override {\n+    return DispatchHelper<InputTypes>::call(this, Input(0));\n+  }\n+\n+  template <typename T>\n+  bool DoRunWithType() {\n+    const auto& dY = Input(0);\n+    const auto& X = Input(1);\n+    const auto& Y = Input(2);\n+    auto* dX = Output(0);\n+    const int ndim = Y.ndim();\n+    const std::vector<int> dX_dims(X.dims().cbegin(), X.dims().cend());\n+    const std::vector<int> dY_dims(Y.dims().cbegin(), Y.dims().cend());\n+    dX->ResizeLike(X);\n+    std::vector<int> axes;\n+    const int offset = ndim - X.ndim();\n+    for (int i = 0; i < ndim; i++) {\n+      if (i < offset || dX_dims[i - offset] == 1) {\n+        axes.push_back(i);\n+      }\n+    }\n+    return expander_.template Backward<T>(\n+        dY_dims,\n+        axes,\n+        dY.template data<T>(),\n+        dX->template mutable_data<T>(),\n+        &context_);\n+  }\n+\n+ private:\n+  const Expander expander_{};\n+};\n+\n+template <class Context>\n+struct Expander {\n+  template <typename T>\n+  bool Forward(\n+      const int& X_ndims,\n+      const std::vector<int>& X_dims,\n+      const int& Y_ndims,", "path": "caffe2/operators/expand_op.h", "position": null, "original_position": 112, "commit_id": "da691c3616829781c2d7d017cdfb1f468f5c55b9", "original_commit_id": "f7e3c112b9c77889378f26b1812505c7e262f9a1", "user": {"login": "BIT-silence", "id": 3357667, "node_id": "MDQ6VXNlcjMzNTc2Njc=", "avatar_url": "https://avatars0.githubusercontent.com/u/3357667?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BIT-silence", "html_url": "https://github.com/BIT-silence", "followers_url": "https://api.github.com/users/BIT-silence/followers", "following_url": "https://api.github.com/users/BIT-silence/following{/other_user}", "gists_url": "https://api.github.com/users/BIT-silence/gists{/gist_id}", "starred_url": "https://api.github.com/users/BIT-silence/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BIT-silence/subscriptions", "organizations_url": "https://api.github.com/users/BIT-silence/orgs", "repos_url": "https://api.github.com/users/BIT-silence/repos", "events_url": "https://api.github.com/users/BIT-silence/events{/privacy}", "received_events_url": "https://api.github.com/users/BIT-silence/received_events", "type": "User", "site_admin": false}, "body": "const int Y_ndims is fine. For built-in types without template, there is no need to pass by reference.", "created_at": "2018-06-14T00:15:24Z", "updated_at": "2018-11-23T15:45:29Z", "html_url": "https://github.com/pytorch/pytorch/pull/8263#discussion_r195272480", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/8263", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/195272480"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/8263#discussion_r195272480"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/8263"}}, "body_html": "<p>const int Y_ndims is fine. For built-in types without template, there is no need to pass by reference.</p>", "body_text": "const int Y_ndims is fine. For built-in types without template, there is no need to pass by reference."}