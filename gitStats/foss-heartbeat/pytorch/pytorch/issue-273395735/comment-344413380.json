{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/344413380", "html_url": "https://github.com/pytorch/pytorch/issues/3665#issuecomment-344413380", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/3665", "id": 344413380, "node_id": "MDEyOklzc3VlQ29tbWVudDM0NDQxMzM4MA==", "user": {"login": "SsnL", "id": 5674597, "node_id": "MDQ6VXNlcjU2NzQ1OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5674597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SsnL", "html_url": "https://github.com/SsnL", "followers_url": "https://api.github.com/users/SsnL/followers", "following_url": "https://api.github.com/users/SsnL/following{/other_user}", "gists_url": "https://api.github.com/users/SsnL/gists{/gist_id}", "starred_url": "https://api.github.com/users/SsnL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SsnL/subscriptions", "organizations_url": "https://api.github.com/users/SsnL/orgs", "repos_url": "https://api.github.com/users/SsnL/repos", "events_url": "https://api.github.com/users/SsnL/events{/privacy}", "received_events_url": "https://api.github.com/users/SsnL/received_events", "type": "User", "site_admin": false}, "created_at": "2017-11-14T21:59:59Z", "updated_at": "2017-11-14T22:02:14Z", "author_association": "CONTRIBUTOR", "body_html": "<pre><code>import torch\nimport torch.autograd as autograd\nimport torch.nn as nn\nimport torch.nn.functional as F\nimport torch.optim as optim\n\ntorch.manual_seed(1)\n#torch.backends.cudnn.enabled = False\nnet = nn.RNN(3, 3).cuda()\ninputs = autograd.Variable(torch.randn(5, 1, 3)).cuda()\n\nimport os, gc\npid = os.getpid()\nprev_mem=0\n\nfor it in range(60000):\n    net.zero_grad()\n    out, hidden = net(inputs.detach())\n    l = out.sum() - hidden.sum()\n    l.backward()\n    if it % 100 == 0:\n        cur_mem = (int(open('/proc/%s/statm'%pid, 'r').read().split()[1])+0.0)/256\n        add_mem = cur_mem - prev_mem\n        prev_mem = cur_mem\n        print(\"     train iterations: %s, added mem: %sM\"%(it, add_mem))\n</code></pre>\n<p>constant amount of memory leak no matter the network size.</p>\n<p>CPU: not leaking<br>\nCUDA w/o cuDNN: not leaking<br>\nCUDA w/ cuDNN: leaking</p>\n<p>retain_graph=True: not changing anything</p>", "body_text": "import torch\nimport torch.autograd as autograd\nimport torch.nn as nn\nimport torch.nn.functional as F\nimport torch.optim as optim\n\ntorch.manual_seed(1)\n#torch.backends.cudnn.enabled = False\nnet = nn.RNN(3, 3).cuda()\ninputs = autograd.Variable(torch.randn(5, 1, 3)).cuda()\n\nimport os, gc\npid = os.getpid()\nprev_mem=0\n\nfor it in range(60000):\n    net.zero_grad()\n    out, hidden = net(inputs.detach())\n    l = out.sum() - hidden.sum()\n    l.backward()\n    if it % 100 == 0:\n        cur_mem = (int(open('/proc/%s/statm'%pid, 'r').read().split()[1])+0.0)/256\n        add_mem = cur_mem - prev_mem\n        prev_mem = cur_mem\n        print(\"     train iterations: %s, added mem: %sM\"%(it, add_mem))\n\nconstant amount of memory leak no matter the network size.\nCPU: not leaking\nCUDA w/o cuDNN: not leaking\nCUDA w/ cuDNN: leaking\nretain_graph=True: not changing anything", "body": "```\r\nimport torch\r\nimport torch.autograd as autograd\r\nimport torch.nn as nn\r\nimport torch.nn.functional as F\r\nimport torch.optim as optim\r\n\r\ntorch.manual_seed(1)\r\n#torch.backends.cudnn.enabled = False\r\nnet = nn.RNN(3, 3).cuda()\r\ninputs = autograd.Variable(torch.randn(5, 1, 3)).cuda()\r\n\r\nimport os, gc\r\npid = os.getpid()\r\nprev_mem=0\r\n\r\nfor it in range(60000):\r\n    net.zero_grad()\r\n    out, hidden = net(inputs.detach())\r\n    l = out.sum() - hidden.sum()\r\n    l.backward()\r\n    if it % 100 == 0:\r\n        cur_mem = (int(open('/proc/%s/statm'%pid, 'r').read().split()[1])+0.0)/256\r\n        add_mem = cur_mem - prev_mem\r\n        prev_mem = cur_mem\r\n        print(\"     train iterations: %s, added mem: %sM\"%(it, add_mem))\r\n```\r\n\r\nconstant amount of memory leak no matter the network size.\r\n\r\nCPU: not leaking\r\nCUDA w/o cuDNN: not leaking\r\nCUDA w/ cuDNN: leaking\r\n\r\nretain_graph=True: not changing anything"}