{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/354856127", "html_url": "https://github.com/pytorch/pytorch/issues/4422#issuecomment-354856127", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/4422", "id": 354856127, "node_id": "MDEyOklzc3VlQ29tbWVudDM1NDg1NjEyNw==", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "created_at": "2018-01-02T19:36:53Z", "updated_at": "2018-01-02T19:36:53Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Never mind, it's pretty easy to repro:</p>\n<pre><code>    def test_batchnorm_double_backward(self):\n        bn = nn.BatchNorm1d(5).cuda()\n        v = Variable(torch.randn(5, 5), requires_grad=True).cuda()\n        output = bn(v)\n        grad, = torch.autograd.grad(outputs=output.sum(), inputs=v, create_graph=True, retain_graph=True, only_inputs=True)\n        grad.sum().backward()\n</code></pre>", "body_text": "Never mind, it's pretty easy to repro:\n    def test_batchnorm_double_backward(self):\n        bn = nn.BatchNorm1d(5).cuda()\n        v = Variable(torch.randn(5, 5), requires_grad=True).cuda()\n        output = bn(v)\n        grad, = torch.autograd.grad(outputs=output.sum(), inputs=v, create_graph=True, retain_graph=True, only_inputs=True)\n        grad.sum().backward()", "body": "Never mind, it's pretty easy to repro:\r\n\r\n```\r\n    def test_batchnorm_double_backward(self):\r\n        bn = nn.BatchNorm1d(5).cuda()\r\n        v = Variable(torch.randn(5, 5), requires_grad=True).cuda()\r\n        output = bn(v)\r\n        grad, = torch.autograd.grad(outputs=output.sum(), inputs=v, create_graph=True, retain_graph=True, only_inputs=True)\r\n        grad.sum().backward()\r\n```"}