{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/354868242", "html_url": "https://github.com/pytorch/pytorch/issues/4422#issuecomment-354868242", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/4422", "id": 354868242, "node_id": "MDEyOklzc3VlQ29tbWVudDM1NDg2ODI0Mg==", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "created_at": "2018-01-02T20:32:45Z", "updated_at": "2018-01-02T20:32:45Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Root causes:</p>\n<ul>\n<li>I did a hack to work around lack of ability to return non-requires grad outputs from ATen functions, but apparently this hack doesn't work. We need a way of returning variables from an ATen function such that they unconditionally don't require grad. <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=655866\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/colesbury\">@colesbury</a> suggested that we add a new special form to <code>derivatives.yaml</code> to trigger this but I am actually not too sure we can actually make this work. In any case, <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=655866\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/colesbury\">@colesbury</a> has some PRs in progress on this code so I won't be able to fix this today.</li>\n<li>Why didn't I catch the hack failure? We are apparently not running any NewModuleTests double-backwards with CUDA. Oops. I'm going to try to fix this today.</li>\n</ul>\n<p>To work around the problem:</p>\n<ul>\n<li>Turn off cuDNN with <code>torch.backends.cudnn.enabled = False</code>, OR</li>\n<li>Revert to PyTorch <a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/pytorch/pytorch/commit/d7e6ede78465ceddf574840eb844f08a9e870557/hovercard\" href=\"https://github.com/pytorch/pytorch/commit/d7e6ede78465ceddf574840eb844f08a9e870557\"><tt>d7e6ede</tt></a> or earlier</li>\n</ul>", "body_text": "Root causes:\n\nI did a hack to work around lack of ability to return non-requires grad outputs from ATen functions, but apparently this hack doesn't work. We need a way of returning variables from an ATen function such that they unconditionally don't require grad. @colesbury suggested that we add a new special form to derivatives.yaml to trigger this but I am actually not too sure we can actually make this work. In any case, @colesbury has some PRs in progress on this code so I won't be able to fix this today.\nWhy didn't I catch the hack failure? We are apparently not running any NewModuleTests double-backwards with CUDA. Oops. I'm going to try to fix this today.\n\nTo work around the problem:\n\nTurn off cuDNN with torch.backends.cudnn.enabled = False, OR\nRevert to PyTorch d7e6ede or earlier", "body": "Root causes:\r\n\r\n- I did a hack to work around lack of ability to return non-requires grad outputs from ATen functions, but apparently this hack doesn't work. We need a way of returning variables from an ATen function such that they unconditionally don't require grad. @colesbury suggested that we add a new special form to `derivatives.yaml` to trigger this but I am actually not too sure we can actually make this work. In any case, @colesbury has some PRs in progress on this code so I won't be able to fix this today.\r\n- Why didn't I catch the hack failure? We are apparently not running any NewModuleTests double-backwards with CUDA. Oops. I'm going to try to fix this today.\r\n\r\nTo work around the problem:\r\n- Turn off cuDNN with `torch.backends.cudnn.enabled = False`, OR\r\n- Revert to PyTorch d7e6ede78465ceddf574840eb844f08a9e870557 or earlier"}