{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/404682244", "html_url": "https://github.com/pytorch/pytorch/pull/9318#issuecomment-404682244", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/9318", "id": 404682244, "node_id": "MDEyOklzc3VlQ29tbWVudDQwNDY4MjI0NA==", "user": {"login": "mruberry", "id": 38511765, "node_id": "MDQ6VXNlcjM4NTExNzY1", "avatar_url": "https://avatars3.githubusercontent.com/u/38511765?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mruberry", "html_url": "https://github.com/mruberry", "followers_url": "https://api.github.com/users/mruberry/followers", "following_url": "https://api.github.com/users/mruberry/following{/other_user}", "gists_url": "https://api.github.com/users/mruberry/gists{/gist_id}", "starred_url": "https://api.github.com/users/mruberry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mruberry/subscriptions", "organizations_url": "https://api.github.com/users/mruberry/orgs", "repos_url": "https://api.github.com/users/mruberry/repos", "events_url": "https://api.github.com/users/mruberry/events{/privacy}", "received_events_url": "https://api.github.com/users/mruberry/received_events", "type": "User", "site_admin": false}, "created_at": "2018-07-12T23:33:54Z", "updated_at": "2018-07-12T23:33:54Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=655866\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/colesbury\">@colesbury</a> and I reviewed offline and developed an alternative plan to what this PR proposed. Instead of porting THCNumerics, we will:</p>\n<ul>\n<li>Use at::Half for implicit conversions and \"catch-all\" versions of functions like pow (vs powf) where possible.</li>\n<li>Create CUDANumerics for when this is not possible (min() and max(), for example).</li>\n<li>Align THCNumerics with the intended \"catch-all\" behavior.</li>\n<li>Remove the unused CUDA_HALF_INSTRUCTIONS from THCNumerics.</li>\n<li>Document the preferred pattern of using at::Half and CUDANumerics (only when necessary), effectively deprecating THCNumerics.</li>\n<li>Refactor the handling of halfs in TH* to respect these updates and the desire to use at::Half going forward.</li>\n</ul>\n<p>This should clarify the best practice for developers and remove some legacy code.</p>", "body_text": "@colesbury and I reviewed offline and developed an alternative plan to what this PR proposed. Instead of porting THCNumerics, we will:\n\nUse at::Half for implicit conversions and \"catch-all\" versions of functions like pow (vs powf) where possible.\nCreate CUDANumerics for when this is not possible (min() and max(), for example).\nAlign THCNumerics with the intended \"catch-all\" behavior.\nRemove the unused CUDA_HALF_INSTRUCTIONS from THCNumerics.\nDocument the preferred pattern of using at::Half and CUDANumerics (only when necessary), effectively deprecating THCNumerics.\nRefactor the handling of halfs in TH* to respect these updates and the desire to use at::Half going forward.\n\nThis should clarify the best practice for developers and remove some legacy code.", "body": "@colesbury and I reviewed offline and developed an alternative plan to what this PR proposed. Instead of porting THCNumerics, we will:\r\n\r\n- Use at::Half for implicit conversions and \"catch-all\" versions of functions like pow (vs powf) where possible.\r\n- Create CUDANumerics for when this is not possible (min() and max(), for example).\r\n- Align THCNumerics with the intended \"catch-all\" behavior.\r\n- Remove the unused CUDA_HALF_INSTRUCTIONS from THCNumerics.\r\n- Document the preferred pattern of using at::Half and CUDANumerics (only when necessary), effectively deprecating THCNumerics.\r\n- Refactor the handling of halfs in TH* to respect these updates and the desire to use at::Half going forward.\r\n\r\nThis should clarify the best practice for developers and remove some legacy code. "}