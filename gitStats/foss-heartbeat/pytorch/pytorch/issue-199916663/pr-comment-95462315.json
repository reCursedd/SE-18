{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/95462315", "pull_request_review_id": 16015976, "id": 95462315, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk1NDYyMzE1", "diff_hunk": "@@ -363,17 +430,143 @@ def batch_norm(input, running_mean, running_var, weight=None, bias=None,\n     return weight and state(input, weight, bias) or state(input)\n \n \n+# loss\n+\n def nll_loss(input, target, weight=None, size_average=True):\n+    r\"\"\"The negative log likelihood loss. It is useful to train a classication\n+    problem with n classes\n+\n+    If provided, the optional argument `weights` should be a 1D Tensor\n+    assigning weight to each of the classes.\n+    This is particularly useful when you have an unbalanced training set.\n+\n+    The input given through a forward call is expected to contain\n+    log-probabilities of each class: input has to be a 2D Tensor of size\n+    `(minibatch, n)`\n+\n+    Obtaining log-probabilities in a neural network is easily achieved by\n+    calling `los_softmax` on input. You may use `cross_entropy` function\n+    instead which applies `log_softmax` internally.\n+\n+    The target that this loss expects is a class index\n+    `(0 to N-1, where N = number of classes)`\n+\n+    The loss can be described as::\n+\n+        loss(x, class) = -x[class]\n+\n+    or in the case of the weights argument it is specified as follows::\n+\n+        loss(x, class) = -weights[class] * x[class]\n+\n+    Args:\n+        input: :math:`(N, C)` where `C = number of classes`\n+        target: :math:`(N)` where each value is `0 <= targets[i] <= C-1`\n+        weight (Tensor, optional): a manual rescaling weight given to each\n+                class. If given, has to be a Tensor of size \"nclasses\"\n+        size_average (bool, optional): By default, the losses are averaged\n+                over observations for each minibatch. However, if the field\n+                sizeAverage is set to False, the losses are instead summed\n+                for each minibatch.\n+\n+    Attributes:\n+        weight: the class-weights given as input to the constructor\n+\n+    Examples::\n+\n+        >>> # input is of size nBatch x nClasses = 3 x 5\n+        >>> input = autograd.Variable(torch.randn(3, 5))\n+        >>> # each element in target has to have 0 <= value < nclasses\n+        >>> target = autograd.Variable(torch.LongTensor([1, 0, 4]))\n+        >>> output = F.nll_loss(F.log_softmax(input), target)\n+        >>> output.backward()\n+    \"\"\"\n     return _functions.thnn.NLLLoss(size_average, weight=weight)(input, target)\n \n \n+def kl_div(input, target, size_average=True):\n+    r\"\"\"The `Kullback-Leibler divergence`_ Loss\n+\n+    KL divergence is a useful distance measure for continuous distributions \n+    and is often useful when performing direct regression over the space of\n+    (discretely sampled) continuous output distributions.\n+\n+    As with `nll_loss`, the `input` given is expected to contain \n+    *log-probabilities*, however unlike `class_nll_loss`, `input` is not \n+    restricted to a 2D Tensor, because the criterion is applied element-wise.\n+\n+    This criterion expects a `target` `Tensor` of the same size as the \n+    `input` `Tensor`.\n+\n+    The loss can be described as:\n+    :math:`loss(x, target) = 1/n \\sum(target_i * (log(target_i) - x_i))`\n+\n+    By default, the losses are averaged for each minibatch over observations \n+    **as well as** over dimensions. However, if the field \n+    `sizeAverage` is set to `False`, the losses are instead summed.\n+\n+    .. _Kullback-Leibler divergence:\n+        https://en.wikipedia.org/wiki/Kullback-Leibler_divergence", "path": "torch/nn/functional.py", "position": null, "original_position": 172, "commit_id": "51c41742ff93db3a66a6a6fef6dd354d1221c2bb", "original_commit_id": "908b05293dac0ec04eb13c09780275ecdbd7e97d", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Can you add the descriptions for arguments?", "created_at": "2017-01-10T21:34:17Z", "updated_at": "2018-11-23T15:32:12Z", "html_url": "https://github.com/pytorch/pytorch/pull/429#discussion_r95462315", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/429", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/95462315"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/429#discussion_r95462315"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/429"}}, "body_html": "<p>Can you add the descriptions for arguments?</p>", "body_text": "Can you add the descriptions for arguments?"}