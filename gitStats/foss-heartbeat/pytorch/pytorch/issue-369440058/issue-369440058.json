{"url": "https://api.github.com/repos/pytorch/pytorch/issues/12602", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/12602/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/12602/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/12602/events", "html_url": "https://github.com/pytorch/pytorch/issues/12602", "id": 369440058, "node_id": "MDU6SXNzdWUzNjk0NDAwNTg=", "number": 12602, "title": "((libtorch))Undefined symbols for architecture x86_64:   \"at::CPUTensorId()\", referenced from:       at::tensorTypeIdToBackend(at::TensorTypeId) in main.cpp", "user": {"login": "davidxiaozhi", "id": 6194818, "node_id": "MDQ6VXNlcjYxOTQ4MTg=", "avatar_url": "https://avatars0.githubusercontent.com/u/6194818?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidxiaozhi", "html_url": "https://github.com/davidxiaozhi", "followers_url": "https://api.github.com/users/davidxiaozhi/followers", "following_url": "https://api.github.com/users/davidxiaozhi/following{/other_user}", "gists_url": "https://api.github.com/users/davidxiaozhi/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidxiaozhi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidxiaozhi/subscriptions", "organizations_url": "https://api.github.com/users/davidxiaozhi/orgs", "repos_url": "https://api.github.com/users/davidxiaozhi/repos", "events_url": "https://api.github.com/users/davidxiaozhi/events{/privacy}", "received_events_url": "https://api.github.com/users/davidxiaozhi/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 778855555, "node_id": "MDU6TGFiZWw3Nzg4NTU1NTU=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/build", "name": "build", "color": "bfdadc", "default": false}, {"id": 917150434, "node_id": "MDU6TGFiZWw5MTcxNTA0MzQ=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/cpp", "name": "cpp", "color": "000000", "default": false}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-10-12T07:57:06Z", "updated_at": "2018-10-15T17:30:41Z", "closed_at": null, "author_association": "NONE", "body_html": "<h2><g-emoji class=\"g-emoji\" alias=\"bug\" fallback-src=\"https://assets-cdn.github.com/images/icons/emoji/unicode/1f41b.png\">\ud83d\udc1b</g-emoji> Bug</h2>\n<pre><code>#include &lt;torch/script.h&gt; // One-stop header.\n\n#include &lt;iostream&gt;\n#include &lt;memory&gt;\n#include &lt;vector&gt;\n\nint main(int argc, const char *argv[]) {\n    if (argc != 2) {\n        std::cerr &lt;&lt; \"usage: example-app &lt;path-to-exported-script-module&gt;\\n\";\n        return -1;\n    }\n\n    // Deserialize the ScriptModule from a file using torch::jit::load().\n    std::shared_ptr&lt;torch::jit::script::Module&gt; module = torch::jit::load(argv[1]);\n\n    assert(module != nullptr);\n    std::cout &lt;&lt; \"ok\\n\";\n    std::cout &lt;&lt; \"Hello, World pyTorch !\" &lt;&lt; std::endl;\n\n    // Create a vector of inputs.\n    std::vector&lt;torch::jit::IValue&gt; inputs;\n    inputs.push_back(torch::ones({1, 3, 224, 224}));\n\n    // Execute the model and turn its output into a tensor.\n    //auto output = module-&gt;forward(inputs).toTensor();\n\n    //std::cout &lt;&lt; output.slice(/*dim=*/1, /*start=*/0, /*end=*/5) &lt;&lt; '\\n';\n}\n</code></pre>\n<ol>\n<li>If I open the comment on this line of code <code>std::vector&lt;torch::jit::IValue&gt; inputs; inputs.push_back(torch::ones({1, 3, 224, 224}));</code>  ,when  i  excute  the  make to compile  the demo of pytorch  it  will  output  the message .</li>\n</ol>\n<pre><code>Undefined symbols for architecture x86_64:\n  \"at::CPUTensorId()\", referenced from:\n      at::tensorTypeIdToBackend(at::TensorTypeId) in main.cpp.o\n  \"at::CUDATensorId()\", referenced from:\n      at::tensorTypeIdToBackend(at::TensorTypeId) in main.cpp.o\n  \"at::SparseCPUTensorId()\", referenced from:\n      at::tensorTypeIdToBackend(at::TensorTypeId) in main.cpp.o\n  \"at::UndefinedTensorId()\", referenced from:\n      at::tensorTypeIdToBackend(at::TensorTypeId) in main.cpp.o\n  \"at::SparseCUDATensorId()\", referenced from:\n      at::tensorTypeIdToBackend(at::TensorTypeId) in main.cpp.o\n  \"at::UndefinedTensorImpl::_singleton\", referenced from:\n      at::UndefinedTensorImpl::singleton() in main.cpp.o\n  \"at::getDefaultTensorOptions()\", referenced from:\n      at::TensorOptions::requires_grad() const in main.cpp.o\n      at::TensorOptions::device() const in main.cpp.o\n  \"at::globalLegacyTypeDispatch()\", referenced from:\n      at::TensorImpl::type() const in main.cpp.o\n  \"at::Error::Error(at::SourceLocation, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;)\", referenced from:\n      torch::autograd::make_variable(at::Tensor, bool) in main.cpp.o\n      torch::jit::Block::appendNode(torch::jit::Node*) in main.cpp.o\n      torch::jit::Node::inBlockList() const in main.cpp.o\n      torch::jit::Node::insertBefore(torch::jit::Node*) in main.cpp.o\n      torch::jit::Node::insertAfter(torch::jit::Node*) in main.cpp.o\n      at::DeviceGuard::set_index(int) in main.cpp.o\n      at::tensorTypeIdToBackend(at::TensorTypeId) in main.cpp.o\n      ...\n  \"at::detail::getVariableHooks()\", referenced from:\n      at::LegacyTypeDispatch::getTypeRaw(at::Backend, at::ScalarType, bool) in main.cpp.o\n  \"at::detail::DynamicCUDAInterface::get_device\", referenced from:\n      at::DeviceGuard::set_index(int) in main.cpp.o\n  \"at::detail::DynamicCUDAInterface::set_device\", referenced from:\n      at::DeviceGuard::set_index(int) in main.cpp.o\n  \"at::detail::DynamicCUDAInterface::unchecked_set_device\", referenced from:\n      at::DeviceGuard::~DeviceGuard() in main.cpp.o\n  \"at::native::ones(at::ArrayRef&lt;long long&gt;, at::TensorOptions const&amp;)\", referenced from:\n      at::ones(at::ArrayRef&lt;long long&gt;, at::TensorOptions const&amp;) in main.cpp.o\n  \"at::operator&lt;&lt;(std::__1::basic_ostream&lt;char, std::__1::char_traits&lt;char&gt; &gt;&amp;, at::TensorTypeId)\", referenced from:\n      std::__1::basic_ostream&lt;char, std::__1::char_traits&lt;char&gt; &gt;&amp; at::detail::_str&lt;at::TensorTypeId&gt;(std::__1::basic_ostream&lt;char, std::__1::char_traits&lt;char&gt; &gt;&amp;, at::TensorTypeId const&amp;) in main.cpp.o\nld: symbol(s) not found for architecture x86_64\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\nmake[2]: *** [bin/main] Error 1\nmake[1]: *** [bin/CMakeFiles/main.dir/all] Error 2\nmake: *** [all] Error 2\n\n</code></pre>", "body_text": "\ud83d\udc1b Bug\n#include <torch/script.h> // One-stop header.\n\n#include <iostream>\n#include <memory>\n#include <vector>\n\nint main(int argc, const char *argv[]) {\n    if (argc != 2) {\n        std::cerr << \"usage: example-app <path-to-exported-script-module>\\n\";\n        return -1;\n    }\n\n    // Deserialize the ScriptModule from a file using torch::jit::load().\n    std::shared_ptr<torch::jit::script::Module> module = torch::jit::load(argv[1]);\n\n    assert(module != nullptr);\n    std::cout << \"ok\\n\";\n    std::cout << \"Hello, World pyTorch !\" << std::endl;\n\n    // Create a vector of inputs.\n    std::vector<torch::jit::IValue> inputs;\n    inputs.push_back(torch::ones({1, 3, 224, 224}));\n\n    // Execute the model and turn its output into a tensor.\n    //auto output = module->forward(inputs).toTensor();\n\n    //std::cout << output.slice(/*dim=*/1, /*start=*/0, /*end=*/5) << '\\n';\n}\n\n\nIf I open the comment on this line of code std::vector<torch::jit::IValue> inputs; inputs.push_back(torch::ones({1, 3, 224, 224}));  ,when  i  excute  the  make to compile  the demo of pytorch  it  will  output  the message .\n\nUndefined symbols for architecture x86_64:\n  \"at::CPUTensorId()\", referenced from:\n      at::tensorTypeIdToBackend(at::TensorTypeId) in main.cpp.o\n  \"at::CUDATensorId()\", referenced from:\n      at::tensorTypeIdToBackend(at::TensorTypeId) in main.cpp.o\n  \"at::SparseCPUTensorId()\", referenced from:\n      at::tensorTypeIdToBackend(at::TensorTypeId) in main.cpp.o\n  \"at::UndefinedTensorId()\", referenced from:\n      at::tensorTypeIdToBackend(at::TensorTypeId) in main.cpp.o\n  \"at::SparseCUDATensorId()\", referenced from:\n      at::tensorTypeIdToBackend(at::TensorTypeId) in main.cpp.o\n  \"at::UndefinedTensorImpl::_singleton\", referenced from:\n      at::UndefinedTensorImpl::singleton() in main.cpp.o\n  \"at::getDefaultTensorOptions()\", referenced from:\n      at::TensorOptions::requires_grad() const in main.cpp.o\n      at::TensorOptions::device() const in main.cpp.o\n  \"at::globalLegacyTypeDispatch()\", referenced from:\n      at::TensorImpl::type() const in main.cpp.o\n  \"at::Error::Error(at::SourceLocation, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)\", referenced from:\n      torch::autograd::make_variable(at::Tensor, bool) in main.cpp.o\n      torch::jit::Block::appendNode(torch::jit::Node*) in main.cpp.o\n      torch::jit::Node::inBlockList() const in main.cpp.o\n      torch::jit::Node::insertBefore(torch::jit::Node*) in main.cpp.o\n      torch::jit::Node::insertAfter(torch::jit::Node*) in main.cpp.o\n      at::DeviceGuard::set_index(int) in main.cpp.o\n      at::tensorTypeIdToBackend(at::TensorTypeId) in main.cpp.o\n      ...\n  \"at::detail::getVariableHooks()\", referenced from:\n      at::LegacyTypeDispatch::getTypeRaw(at::Backend, at::ScalarType, bool) in main.cpp.o\n  \"at::detail::DynamicCUDAInterface::get_device\", referenced from:\n      at::DeviceGuard::set_index(int) in main.cpp.o\n  \"at::detail::DynamicCUDAInterface::set_device\", referenced from:\n      at::DeviceGuard::set_index(int) in main.cpp.o\n  \"at::detail::DynamicCUDAInterface::unchecked_set_device\", referenced from:\n      at::DeviceGuard::~DeviceGuard() in main.cpp.o\n  \"at::native::ones(at::ArrayRef<long long>, at::TensorOptions const&)\", referenced from:\n      at::ones(at::ArrayRef<long long>, at::TensorOptions const&) in main.cpp.o\n  \"at::operator<<(std::__1::basic_ostream<char, std::__1::char_traits<char> >&, at::TensorTypeId)\", referenced from:\n      std::__1::basic_ostream<char, std::__1::char_traits<char> >& at::detail::_str<at::TensorTypeId>(std::__1::basic_ostream<char, std::__1::char_traits<char> >&, at::TensorTypeId const&) in main.cpp.o\nld: symbol(s) not found for architecture x86_64\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\nmake[2]: *** [bin/main] Error 1\nmake[1]: *** [bin/CMakeFiles/main.dir/all] Error 2\nmake: *** [all] Error 2", "body": "## \ud83d\udc1b Bug\r\n\r\n```\r\n#include <torch/script.h> // One-stop header.\r\n\r\n#include <iostream>\r\n#include <memory>\r\n#include <vector>\r\n\r\nint main(int argc, const char *argv[]) {\r\n    if (argc != 2) {\r\n        std::cerr << \"usage: example-app <path-to-exported-script-module>\\n\";\r\n        return -1;\r\n    }\r\n\r\n    // Deserialize the ScriptModule from a file using torch::jit::load().\r\n    std::shared_ptr<torch::jit::script::Module> module = torch::jit::load(argv[1]);\r\n\r\n    assert(module != nullptr);\r\n    std::cout << \"ok\\n\";\r\n    std::cout << \"Hello, World pyTorch !\" << std::endl;\r\n\r\n    // Create a vector of inputs.\r\n    std::vector<torch::jit::IValue> inputs;\r\n    inputs.push_back(torch::ones({1, 3, 224, 224}));\r\n\r\n    // Execute the model and turn its output into a tensor.\r\n    //auto output = module->forward(inputs).toTensor();\r\n\r\n    //std::cout << output.slice(/*dim=*/1, /*start=*/0, /*end=*/5) << '\\n';\r\n}\r\n```\r\n\r\n\r\n1.  If I open the comment on this line of code `std::vector<torch::jit::IValue> inputs;\r\n    inputs.push_back(torch::ones({1, 3, 224, 224}));`  ,when  i  excute  the  make to compile  the demo of pytorch  it  will  output  the message .\r\n\r\n```\r\nUndefined symbols for architecture x86_64:\r\n  \"at::CPUTensorId()\", referenced from:\r\n      at::tensorTypeIdToBackend(at::TensorTypeId) in main.cpp.o\r\n  \"at::CUDATensorId()\", referenced from:\r\n      at::tensorTypeIdToBackend(at::TensorTypeId) in main.cpp.o\r\n  \"at::SparseCPUTensorId()\", referenced from:\r\n      at::tensorTypeIdToBackend(at::TensorTypeId) in main.cpp.o\r\n  \"at::UndefinedTensorId()\", referenced from:\r\n      at::tensorTypeIdToBackend(at::TensorTypeId) in main.cpp.o\r\n  \"at::SparseCUDATensorId()\", referenced from:\r\n      at::tensorTypeIdToBackend(at::TensorTypeId) in main.cpp.o\r\n  \"at::UndefinedTensorImpl::_singleton\", referenced from:\r\n      at::UndefinedTensorImpl::singleton() in main.cpp.o\r\n  \"at::getDefaultTensorOptions()\", referenced from:\r\n      at::TensorOptions::requires_grad() const in main.cpp.o\r\n      at::TensorOptions::device() const in main.cpp.o\r\n  \"at::globalLegacyTypeDispatch()\", referenced from:\r\n      at::TensorImpl::type() const in main.cpp.o\r\n  \"at::Error::Error(at::SourceLocation, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)\", referenced from:\r\n      torch::autograd::make_variable(at::Tensor, bool) in main.cpp.o\r\n      torch::jit::Block::appendNode(torch::jit::Node*) in main.cpp.o\r\n      torch::jit::Node::inBlockList() const in main.cpp.o\r\n      torch::jit::Node::insertBefore(torch::jit::Node*) in main.cpp.o\r\n      torch::jit::Node::insertAfter(torch::jit::Node*) in main.cpp.o\r\n      at::DeviceGuard::set_index(int) in main.cpp.o\r\n      at::tensorTypeIdToBackend(at::TensorTypeId) in main.cpp.o\r\n      ...\r\n  \"at::detail::getVariableHooks()\", referenced from:\r\n      at::LegacyTypeDispatch::getTypeRaw(at::Backend, at::ScalarType, bool) in main.cpp.o\r\n  \"at::detail::DynamicCUDAInterface::get_device\", referenced from:\r\n      at::DeviceGuard::set_index(int) in main.cpp.o\r\n  \"at::detail::DynamicCUDAInterface::set_device\", referenced from:\r\n      at::DeviceGuard::set_index(int) in main.cpp.o\r\n  \"at::detail::DynamicCUDAInterface::unchecked_set_device\", referenced from:\r\n      at::DeviceGuard::~DeviceGuard() in main.cpp.o\r\n  \"at::native::ones(at::ArrayRef<long long>, at::TensorOptions const&)\", referenced from:\r\n      at::ones(at::ArrayRef<long long>, at::TensorOptions const&) in main.cpp.o\r\n  \"at::operator<<(std::__1::basic_ostream<char, std::__1::char_traits<char> >&, at::TensorTypeId)\", referenced from:\r\n      std::__1::basic_ostream<char, std::__1::char_traits<char> >& at::detail::_str<at::TensorTypeId>(std::__1::basic_ostream<char, std::__1::char_traits<char> >&, at::TensorTypeId const&) in main.cpp.o\r\nld: symbol(s) not found for architecture x86_64\r\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\r\nmake[2]: *** [bin/main] Error 1\r\nmake[1]: *** [bin/CMakeFiles/main.dir/all] Error 2\r\nmake: *** [all] Error 2\r\n\r\n```"}