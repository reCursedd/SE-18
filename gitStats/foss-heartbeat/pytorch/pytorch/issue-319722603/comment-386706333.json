{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/386706333", "html_url": "https://github.com/pytorch/pytorch/pull/7204#issuecomment-386706333", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/7204", "id": 386706333, "node_id": "MDEyOklzc3VlQ29tbWVudDM4NjcwNjMzMw==", "user": {"login": "zou3519", "id": 5652049, "node_id": "MDQ6VXNlcjU2NTIwNDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/5652049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zou3519", "html_url": "https://github.com/zou3519", "followers_url": "https://api.github.com/users/zou3519/followers", "following_url": "https://api.github.com/users/zou3519/following{/other_user}", "gists_url": "https://api.github.com/users/zou3519/gists{/gist_id}", "starred_url": "https://api.github.com/users/zou3519/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zou3519/subscriptions", "organizations_url": "https://api.github.com/users/zou3519/orgs", "repos_url": "https://api.github.com/users/zou3519/repos", "events_url": "https://api.github.com/users/zou3519/events{/privacy}", "received_events_url": "https://api.github.com/users/zou3519/received_events", "type": "User", "site_admin": false}, "created_at": "2018-05-04T19:20:30Z", "updated_at": "2018-05-04T19:21:52Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=655866\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/colesbury\">@colesbury</a> I made the changes that we discussed. We were missing one case in the discussion: let's say we have <code>tensor</code>, <code>process 0</code> and <code>process 1</code>.</p>\n<p>If <code>process 0</code> sends <code>storage</code> to <code>process1</code>, and then <code>process 1</code> sends <code>storage</code> to <code>process 0</code>, <code>process 1</code> needs a mechanism to get the metadata (handle, allocation block size, etc) of <code>storage</code> so that it can reduce the storage.</p>\n<p>I created a class to handle all of the CUDA caching, and have another cache (in addition to the storage cache and the base allocations cache) that maps a storage's data pointer to its cached storageref (which has metadata attached).</p>", "body_text": "@colesbury I made the changes that we discussed. We were missing one case in the discussion: let's say we have tensor, process 0 and process 1.\nIf process 0 sends storage to process1, and then process 1 sends storage to process 0, process 1 needs a mechanism to get the metadata (handle, allocation block size, etc) of storage so that it can reduce the storage.\nI created a class to handle all of the CUDA caching, and have another cache (in addition to the storage cache and the base allocations cache) that maps a storage's data pointer to its cached storageref (which has metadata attached).", "body": "@colesbury I made the changes that we discussed. We were missing one case in the discussion: let's say we have `tensor`, `process 0` and `process 1`.\r\n\r\nIf `process 0` sends `storage` to `process1`, and then `process 1` sends `storage` to `process 0`, `process 1` needs a mechanism to get the metadata (handle, allocation block size, etc) of `storage` so that it can reduce the storage. \r\n\r\nI created a class to handle all of the CUDA caching, and have another cache (in addition to the storage cache and the base allocations cache) that maps a storage's data pointer to its cached storageref (which has metadata attached)."}