{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/7204", "id": 185569220, "node_id": "MDExOlB1bGxSZXF1ZXN0MTg1NTY5MjIw", "html_url": "https://github.com/pytorch/pytorch/pull/7204", "diff_url": "https://github.com/pytorch/pytorch/pull/7204.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/7204.patch", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/7204", "number": 7204, "state": "open", "locked": false, "title": "Support passing the same CUDA tensor between multiple processes", "user": {"login": "zou3519", "id": 5652049, "node_id": "MDQ6VXNlcjU2NTIwNDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/5652049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zou3519", "html_url": "https://github.com/zou3519", "followers_url": "https://api.github.com/users/zou3519/followers", "following_url": "https://api.github.com/users/zou3519/following{/other_user}", "gists_url": "https://api.github.com/users/zou3519/gists{/gist_id}", "starred_url": "https://api.github.com/users/zou3519/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zou3519/subscriptions", "organizations_url": "https://api.github.com/users/zou3519/orgs", "repos_url": "https://api.github.com/users/zou3519/repos", "events_url": "https://api.github.com/users/zou3519/events{/privacy}", "received_events_url": "https://api.github.com/users/zou3519/received_events", "type": "User", "site_admin": false}, "body": "Fixes #7096.\r\n\r\nThis PR is an update to #7146\r\n\r\n# Problem\r\nRight now, if one attempts to share a CUDA tensor and get it from a\r\nqueue from the same process it was saved in, a crash can occur.\r\n\r\nHere is some example code to demonstrate this:\r\n\r\n```\r\nimport torch\r\nimport torch.multiprocessing as mp\r\nimport numpy.random as npr\r\n\r\nmp.set_start_method('spawn')\r\n\r\nq = mp.Queue()\r\nx = torch.randn(1000).cuda()\r\ntensor = torch.ones(10).cuda()\r\n\r\nq.put(tensor)\r\nout = q.get()\r\nprint(out)\r\n```\r\n\r\nOne of two behaviors can occur:\r\n- Crashing with an error that some \"CUDA arguments are incorrect\"\r\n- The `out` tensor is valid but contains incorrect data (zeros instead\r\nof ones).\r\n\r\nOn master the first behavior occurs but I've noticed the second behavior\r\nhappen on previous commits.\r\n\r\nThis occurs because caching of the shared storages happens differently\r\ndepending on the process. Call the process where `tensor` is created\r\nthe \"originating process\". When a process grabs a tensor from the queue\r\n`q`, there are two cases:\r\n1) The process is the \"originating process\". The cached storage is\r\nsometimes the desired storage.\r\n2) The process is not the \"originating process\". The cached storage (if\r\nit has been cached) is a storage that points to the base of the\r\nallocation. One needs to add the offset to this storage to retrieve the\r\ndesired storage.\r\n\r\nCase (2) is OK, but the code doesn't handle case (1) right now (the\r\nrebuilding_storage_cuda code attempts to add the offset to whatever is\r\ncached, leading to an incorrect storage pointer).\r\n\r\n# Solution: New CUDA storage caching strategy\r\n\r\nAfter discussion with @colesbury \r\n\r\nAll CUDA storages are cached into the new 'cuda_cache' that has two \r\n(well, actually three) components: a 'real cache' and a 'base cache'. \r\nAll CPU storages are cached into the original 'shared_cache'.\r\n\r\nCall a \"CUDA storage that processes wish to share\" a \"real storage\".\r\n\"real storages\" are the storages that other processes want to and\r\neventually will receive.\r\n\r\nCall a \"CUDA storage that points to the base of an allocation block\" a\r\n\"base storage\". These are obtained by opening CUDA handles to the\r\nbase of an allocation block, where multiple \"real storages\" may live.\r\nThose \"real storages\" can be obtained by adding an offset to \"base storage\"\r\n\r\n\"base storages\" are cached into the \"base cache\" and \"real storages\" are\r\ncached into the \"real cache\"\r\n\r\nWhen a process shares a cuda storage:\r\n- If the cuda storage is from opening a received handle, find the handle\r\n  in the metadata cache and send the returned metadata.\r\n- If the cuda storage is from allocating storage, get the handle, build\r\n  the metadata, and send it.\r\n\r\nWhen a process receives a cuda storage:\r\n- Check the caches:\r\n  - Check the \"real cache\" for the real storage.\r\n  - If it's not there, look in the \"base cache\".\r\n  - If the storage exists in the \"base cache\", recreate the real storage by\r\n    add it to the \"base storage\"\r\n- If it's not in the caches, recreate the real and base storages and cache\r\n  both.\r\n- In addition, if this process received a handle that it has opened\r\n  (either now or in the past), we cache the storage's metadata in the\r\n  metadata cache. This is so that the process can access the handle\r\n  to send to other processes.\r\n  A process that didn't open a handle (the process that allocated the storage)\r\n  doesn't cache the metadata.\r\n\r\n\"base storages\" are uniquely identified by their CUDA handle.\r\n\"real storages\" are uniquely identified by (handle, offset).", "created_at": "2018-05-02T21:42:47Z", "updated_at": "2018-11-23T15:44:01Z", "closed_at": null, "merged_at": null, "merge_commit_sha": "48ed23e28e1b8b6be1f9a78f48654f25c7e6e6cc", "assignee": null, "assignees": [], "requested_reviewers": [{"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, {"login": "soumith", "id": 1310570, "node_id": "MDQ6VXNlcjEzMTA1NzA=", "avatar_url": "https://avatars0.githubusercontent.com/u/1310570?v=4", "gravatar_id": "", "url": "https://api.github.com/users/soumith", "html_url": "https://github.com/soumith", "followers_url": "https://api.github.com/users/soumith/followers", "following_url": "https://api.github.com/users/soumith/following{/other_user}", "gists_url": "https://api.github.com/users/soumith/gists{/gist_id}", "starred_url": "https://api.github.com/users/soumith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/soumith/subscriptions", "organizations_url": "https://api.github.com/users/soumith/orgs", "repos_url": "https://api.github.com/users/soumith/repos", "events_url": "https://api.github.com/users/soumith/events{/privacy}", "received_events_url": "https://api.github.com/users/soumith/received_events", "type": "User", "site_admin": false}, {"login": "gchanan", "id": 3768583, "node_id": "MDQ6VXNlcjM3Njg1ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3768583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gchanan", "html_url": "https://github.com/gchanan", "followers_url": "https://api.github.com/users/gchanan/followers", "following_url": "https://api.github.com/users/gchanan/following{/other_user}", "gists_url": "https://api.github.com/users/gchanan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gchanan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gchanan/subscriptions", "organizations_url": "https://api.github.com/users/gchanan/orgs", "repos_url": "https://api.github.com/users/gchanan/repos", "events_url": "https://api.github.com/users/gchanan/events{/privacy}", "received_events_url": "https://api.github.com/users/gchanan/received_events", "type": "User", "site_admin": false}], "requested_teams": [], "labels": [], "milestone": null, "commits_url": "https://api.github.com/repos/pytorch/pytorch/pulls/7204/commits", "review_comments_url": "https://api.github.com/repos/pytorch/pytorch/pulls/7204/comments", "review_comment_url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments{/number}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/7204/comments", "statuses_url": "https://api.github.com/repos/pytorch/pytorch/statuses/bb9d7b36ff4bd90e197fb645de2cd1393ca6654b", "head": {"label": "zou3519:fix-cuda-sharing2", "ref": "fix-cuda-sharing2", "sha": "bb9d7b36ff4bd90e197fb645de2cd1393ca6654b", "user": {"login": "zou3519", "id": 5652049, "node_id": "MDQ6VXNlcjU2NTIwNDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/5652049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zou3519", "html_url": "https://github.com/zou3519", "followers_url": "https://api.github.com/users/zou3519/followers", "following_url": "https://api.github.com/users/zou3519/following{/other_user}", "gists_url": "https://api.github.com/users/zou3519/gists{/gist_id}", "starred_url": "https://api.github.com/users/zou3519/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zou3519/subscriptions", "organizations_url": "https://api.github.com/users/zou3519/orgs", "repos_url": "https://api.github.com/users/zou3519/repos", "events_url": "https://api.github.com/users/zou3519/events{/privacy}", "received_events_url": "https://api.github.com/users/zou3519/received_events", "type": "User", "site_admin": false}, "repo": {"id": 103550456, "node_id": "MDEwOlJlcG9zaXRvcnkxMDM1NTA0NTY=", "name": "pytorch", "full_name": "zou3519/pytorch", "private": false, "owner": {"login": "zou3519", "id": 5652049, "node_id": "MDQ6VXNlcjU2NTIwNDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/5652049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zou3519", "html_url": "https://github.com/zou3519", "followers_url": "https://api.github.com/users/zou3519/followers", "following_url": "https://api.github.com/users/zou3519/following{/other_user}", "gists_url": "https://api.github.com/users/zou3519/gists{/gist_id}", "starred_url": "https://api.github.com/users/zou3519/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zou3519/subscriptions", "organizations_url": "https://api.github.com/users/zou3519/orgs", "repos_url": "https://api.github.com/users/zou3519/repos", "events_url": "https://api.github.com/users/zou3519/events{/privacy}", "received_events_url": "https://api.github.com/users/zou3519/received_events", "type": "User", "site_admin": false}, "html_url": "https://github.com/zou3519/pytorch", "description": "Tensors and Dynamic neural networks in Python  with strong GPU acceleration", "fork": true, "url": "https://api.github.com/repos/zou3519/pytorch", "forks_url": "https://api.github.com/repos/zou3519/pytorch/forks", "keys_url": "https://api.github.com/repos/zou3519/pytorch/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/zou3519/pytorch/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/zou3519/pytorch/teams", "hooks_url": "https://api.github.com/repos/zou3519/pytorch/hooks", "issue_events_url": "https://api.github.com/repos/zou3519/pytorch/issues/events{/number}", "events_url": "https://api.github.com/repos/zou3519/pytorch/events", "assignees_url": "https://api.github.com/repos/zou3519/pytorch/assignees{/user}", "branches_url": "https://api.github.com/repos/zou3519/pytorch/branches{/branch}", "tags_url": "https://api.github.com/repos/zou3519/pytorch/tags", "blobs_url": "https://api.github.com/repos/zou3519/pytorch/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/zou3519/pytorch/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/zou3519/pytorch/git/refs{/sha}", "trees_url": "https://api.github.com/repos/zou3519/pytorch/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/zou3519/pytorch/statuses/{sha}", "languages_url": "https://api.github.com/repos/zou3519/pytorch/languages", "stargazers_url": "https://api.github.com/repos/zou3519/pytorch/stargazers", "contributors_url": "https://api.github.com/repos/zou3519/pytorch/contributors", "subscribers_url": "https://api.github.com/repos/zou3519/pytorch/subscribers", "subscription_url": "https://api.github.com/repos/zou3519/pytorch/subscription", "commits_url": "https://api.github.com/repos/zou3519/pytorch/commits{/sha}", "git_commits_url": "https://api.github.com/repos/zou3519/pytorch/git/commits{/sha}", "comments_url": "https://api.github.com/repos/zou3519/pytorch/comments{/number}", "issue_comment_url": "https://api.github.com/repos/zou3519/pytorch/issues/comments{/number}", "contents_url": "https://api.github.com/repos/zou3519/pytorch/contents/{+path}", "compare_url": "https://api.github.com/repos/zou3519/pytorch/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/zou3519/pytorch/merges", "archive_url": "https://api.github.com/repos/zou3519/pytorch/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/zou3519/pytorch/downloads", "issues_url": "https://api.github.com/repos/zou3519/pytorch/issues{/number}", "pulls_url": "https://api.github.com/repos/zou3519/pytorch/pulls{/number}", "milestones_url": "https://api.github.com/repos/zou3519/pytorch/milestones{/number}", "notifications_url": "https://api.github.com/repos/zou3519/pytorch/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/zou3519/pytorch/labels{/name}", "releases_url": "https://api.github.com/repos/zou3519/pytorch/releases{/id}", "deployments_url": "https://api.github.com/repos/zou3519/pytorch/deployments", "created_at": "2017-09-14T15:36:38Z", "updated_at": "2018-11-14T15:29:03Z", "pushed_at": "2018-11-21T19:36:59Z", "git_url": "git://github.com/zou3519/pytorch.git", "ssh_url": "git@github.com:zou3519/pytorch.git", "clone_url": "https://github.com/zou3519/pytorch.git", "svn_url": "https://github.com/zou3519/pytorch", "homepage": "http://pytorch.org", "size": 123188, "stargazers_count": 0, "watchers_count": 0, "language": "C++", "has_issues": false, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 0, "mirror_url": null, "archived": false, "open_issues_count": 0, "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "forks": 0, "open_issues": 0, "watchers": 0, "default_branch": "master"}}, "base": {"label": "pytorch:master", "ref": "master", "sha": "ed111619da10a976e06dfe04ac7dbe3fc3c25ebc", "user": {"login": "pytorch", "id": 21003710, "node_id": "MDEyOk9yZ2FuaXphdGlvbjIxMDAzNzEw", "avatar_url": "https://avatars3.githubusercontent.com/u/21003710?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pytorch", "html_url": "https://github.com/pytorch", "followers_url": "https://api.github.com/users/pytorch/followers", "following_url": "https://api.github.com/users/pytorch/following{/other_user}", "gists_url": "https://api.github.com/users/pytorch/gists{/gist_id}", "starred_url": "https://api.github.com/users/pytorch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pytorch/subscriptions", "organizations_url": "https://api.github.com/users/pytorch/orgs", "repos_url": "https://api.github.com/users/pytorch/repos", "events_url": "https://api.github.com/users/pytorch/events{/privacy}", "received_events_url": "https://api.github.com/users/pytorch/received_events", "type": "Organization", "site_admin": false}, "repo": {"id": 65600975, "node_id": "MDEwOlJlcG9zaXRvcnk2NTYwMDk3NQ==", "name": "pytorch", "full_name": "pytorch/pytorch", "private": false, "owner": {"login": "pytorch", "id": 21003710, "node_id": "MDEyOk9yZ2FuaXphdGlvbjIxMDAzNzEw", "avatar_url": "https://avatars3.githubusercontent.com/u/21003710?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pytorch", "html_url": "https://github.com/pytorch", "followers_url": "https://api.github.com/users/pytorch/followers", "following_url": "https://api.github.com/users/pytorch/following{/other_user}", "gists_url": "https://api.github.com/users/pytorch/gists{/gist_id}", "starred_url": "https://api.github.com/users/pytorch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pytorch/subscriptions", "organizations_url": "https://api.github.com/users/pytorch/orgs", "repos_url": "https://api.github.com/users/pytorch/repos", "events_url": "https://api.github.com/users/pytorch/events{/privacy}", "received_events_url": "https://api.github.com/users/pytorch/received_events", "type": "Organization", "site_admin": false}, "html_url": "https://github.com/pytorch/pytorch", "description": "Tensors and Dynamic neural networks in Python  with strong GPU acceleration", "fork": false, "url": "https://api.github.com/repos/pytorch/pytorch", "forks_url": "https://api.github.com/repos/pytorch/pytorch/forks", "keys_url": "https://api.github.com/repos/pytorch/pytorch/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/pytorch/pytorch/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/pytorch/pytorch/teams", "hooks_url": "https://api.github.com/repos/pytorch/pytorch/hooks", "issue_events_url": "https://api.github.com/repos/pytorch/pytorch/issues/events{/number}", "events_url": "https://api.github.com/repos/pytorch/pytorch/events", "assignees_url": "https://api.github.com/repos/pytorch/pytorch/assignees{/user}", "branches_url": "https://api.github.com/repos/pytorch/pytorch/branches{/branch}", "tags_url": "https://api.github.com/repos/pytorch/pytorch/tags", "blobs_url": "https://api.github.com/repos/pytorch/pytorch/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/pytorch/pytorch/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/pytorch/pytorch/git/refs{/sha}", "trees_url": "https://api.github.com/repos/pytorch/pytorch/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/pytorch/pytorch/statuses/{sha}", "languages_url": "https://api.github.com/repos/pytorch/pytorch/languages", "stargazers_url": "https://api.github.com/repos/pytorch/pytorch/stargazers", "contributors_url": "https://api.github.com/repos/pytorch/pytorch/contributors", "subscribers_url": "https://api.github.com/repos/pytorch/pytorch/subscribers", "subscription_url": "https://api.github.com/repos/pytorch/pytorch/subscription", "commits_url": "https://api.github.com/repos/pytorch/pytorch/commits{/sha}", "git_commits_url": "https://api.github.com/repos/pytorch/pytorch/git/commits{/sha}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/comments{/number}", "issue_comment_url": "https://api.github.com/repos/pytorch/pytorch/issues/comments{/number}", "contents_url": "https://api.github.com/repos/pytorch/pytorch/contents/{+path}", "compare_url": "https://api.github.com/repos/pytorch/pytorch/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/pytorch/pytorch/merges", "archive_url": "https://api.github.com/repos/pytorch/pytorch/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/pytorch/pytorch/downloads", "issues_url": "https://api.github.com/repos/pytorch/pytorch/issues{/number}", "pulls_url": "https://api.github.com/repos/pytorch/pytorch/pulls{/number}", "milestones_url": "https://api.github.com/repos/pytorch/pytorch/milestones{/number}", "notifications_url": "https://api.github.com/repos/pytorch/pytorch/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/pytorch/pytorch/labels{/name}", "releases_url": "https://api.github.com/repos/pytorch/pytorch/releases{/id}", "deployments_url": "https://api.github.com/repos/pytorch/pytorch/deployments", "created_at": "2016-08-13T05:26:41Z", "updated_at": "2018-11-24T05:35:41Z", "pushed_at": "2018-11-24T05:34:07Z", "git_url": "git://github.com/pytorch/pytorch.git", "ssh_url": "git@github.com:pytorch/pytorch.git", "clone_url": "https://github.com/pytorch/pytorch.git", "svn_url": "https://github.com/pytorch/pytorch", "homepage": "http://pytorch.org", "size": 89651, "stargazers_count": 21577, "watchers_count": 21577, "language": "C++", "has_issues": true, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 5149, "mirror_url": null, "archived": false, "open_issues_count": 2193, "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "forks": 5149, "open_issues": 2193, "watchers": 21577, "default_branch": "master"}}, "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/7204"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/7204"}, "issue": {"href": "https://api.github.com/repos/pytorch/pytorch/issues/7204"}, "comments": {"href": "https://api.github.com/repos/pytorch/pytorch/issues/7204/comments"}, "review_comments": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/7204/comments"}, "review_comment": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments{/number}"}, "commits": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/7204/commits"}, "statuses": {"href": "https://api.github.com/repos/pytorch/pytorch/statuses/bb9d7b36ff4bd90e197fb645de2cd1393ca6654b"}}, "author_association": "CONTRIBUTOR", "body_html": "<p><span class=\"issue-keyword tooltipped tooltipped-se\" aria-label=\"This pull request closes issue #7096.\">Fixes</span> <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"318928255\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/7096\" data-hovercard-type=\"issue\" data-hovercard-url=\"/pytorch/pytorch/issues/7096/hovercard\" href=\"https://github.com/pytorch/pytorch/issues/7096\">#7096</a>.</p>\n<p>This PR is an update to <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"319295871\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/7146\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/pytorch/pytorch/pull/7146/hovercard\" href=\"https://github.com/pytorch/pytorch/pull/7146\">#7146</a></p>\n<h1>Problem</h1>\n<p>Right now, if one attempts to share a CUDA tensor and get it from a<br>\nqueue from the same process it was saved in, a crash can occur.</p>\n<p>Here is some example code to demonstrate this:</p>\n<pre><code>import torch\nimport torch.multiprocessing as mp\nimport numpy.random as npr\n\nmp.set_start_method('spawn')\n\nq = mp.Queue()\nx = torch.randn(1000).cuda()\ntensor = torch.ones(10).cuda()\n\nq.put(tensor)\nout = q.get()\nprint(out)\n</code></pre>\n<p>One of two behaviors can occur:</p>\n<ul>\n<li>Crashing with an error that some \"CUDA arguments are incorrect\"</li>\n<li>The <code>out</code> tensor is valid but contains incorrect data (zeros instead<br>\nof ones).</li>\n</ul>\n<p>On master the first behavior occurs but I've noticed the second behavior<br>\nhappen on previous commits.</p>\n<p>This occurs because caching of the shared storages happens differently<br>\ndepending on the process. Call the process where <code>tensor</code> is created<br>\nthe \"originating process\". When a process grabs a tensor from the queue<br>\n<code>q</code>, there are two cases:</p>\n<ol>\n<li>The process is the \"originating process\". The cached storage is<br>\nsometimes the desired storage.</li>\n<li>The process is not the \"originating process\". The cached storage (if<br>\nit has been cached) is a storage that points to the base of the<br>\nallocation. One needs to add the offset to this storage to retrieve the<br>\ndesired storage.</li>\n</ol>\n<p>Case (2) is OK, but the code doesn't handle case (1) right now (the<br>\nrebuilding_storage_cuda code attempts to add the offset to whatever is<br>\ncached, leading to an incorrect storage pointer).</p>\n<h1>Solution: New CUDA storage caching strategy</h1>\n<p>After discussion with <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=655866\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/colesbury\">@colesbury</a></p>\n<p>All CUDA storages are cached into the new 'cuda_cache' that has two<br>\n(well, actually three) components: a 'real cache' and a 'base cache'.<br>\nAll CPU storages are cached into the original 'shared_cache'.</p>\n<p>Call a \"CUDA storage that processes wish to share\" a \"real storage\".<br>\n\"real storages\" are the storages that other processes want to and<br>\neventually will receive.</p>\n<p>Call a \"CUDA storage that points to the base of an allocation block\" a<br>\n\"base storage\". These are obtained by opening CUDA handles to the<br>\nbase of an allocation block, where multiple \"real storages\" may live.<br>\nThose \"real storages\" can be obtained by adding an offset to \"base storage\"</p>\n<p>\"base storages\" are cached into the \"base cache\" and \"real storages\" are<br>\ncached into the \"real cache\"</p>\n<p>When a process shares a cuda storage:</p>\n<ul>\n<li>If the cuda storage is from opening a received handle, find the handle<br>\nin the metadata cache and send the returned metadata.</li>\n<li>If the cuda storage is from allocating storage, get the handle, build<br>\nthe metadata, and send it.</li>\n</ul>\n<p>When a process receives a cuda storage:</p>\n<ul>\n<li>Check the caches:\n<ul>\n<li>Check the \"real cache\" for the real storage.</li>\n<li>If it's not there, look in the \"base cache\".</li>\n<li>If the storage exists in the \"base cache\", recreate the real storage by<br>\nadd it to the \"base storage\"</li>\n</ul>\n</li>\n<li>If it's not in the caches, recreate the real and base storages and cache<br>\nboth.</li>\n<li>In addition, if this process received a handle that it has opened<br>\n(either now or in the past), we cache the storage's metadata in the<br>\nmetadata cache. This is so that the process can access the handle<br>\nto send to other processes.<br>\nA process that didn't open a handle (the process that allocated the storage)<br>\ndoesn't cache the metadata.</li>\n</ul>\n<p>\"base storages\" are uniquely identified by their CUDA handle.<br>\n\"real storages\" are uniquely identified by (handle, offset).</p>", "body_text": "Fixes #7096.\nThis PR is an update to #7146\nProblem\nRight now, if one attempts to share a CUDA tensor and get it from a\nqueue from the same process it was saved in, a crash can occur.\nHere is some example code to demonstrate this:\nimport torch\nimport torch.multiprocessing as mp\nimport numpy.random as npr\n\nmp.set_start_method('spawn')\n\nq = mp.Queue()\nx = torch.randn(1000).cuda()\ntensor = torch.ones(10).cuda()\n\nq.put(tensor)\nout = q.get()\nprint(out)\n\nOne of two behaviors can occur:\n\nCrashing with an error that some \"CUDA arguments are incorrect\"\nThe out tensor is valid but contains incorrect data (zeros instead\nof ones).\n\nOn master the first behavior occurs but I've noticed the second behavior\nhappen on previous commits.\nThis occurs because caching of the shared storages happens differently\ndepending on the process. Call the process where tensor is created\nthe \"originating process\". When a process grabs a tensor from the queue\nq, there are two cases:\n\nThe process is the \"originating process\". The cached storage is\nsometimes the desired storage.\nThe process is not the \"originating process\". The cached storage (if\nit has been cached) is a storage that points to the base of the\nallocation. One needs to add the offset to this storage to retrieve the\ndesired storage.\n\nCase (2) is OK, but the code doesn't handle case (1) right now (the\nrebuilding_storage_cuda code attempts to add the offset to whatever is\ncached, leading to an incorrect storage pointer).\nSolution: New CUDA storage caching strategy\nAfter discussion with @colesbury\nAll CUDA storages are cached into the new 'cuda_cache' that has two\n(well, actually three) components: a 'real cache' and a 'base cache'.\nAll CPU storages are cached into the original 'shared_cache'.\nCall a \"CUDA storage that processes wish to share\" a \"real storage\".\n\"real storages\" are the storages that other processes want to and\neventually will receive.\nCall a \"CUDA storage that points to the base of an allocation block\" a\n\"base storage\". These are obtained by opening CUDA handles to the\nbase of an allocation block, where multiple \"real storages\" may live.\nThose \"real storages\" can be obtained by adding an offset to \"base storage\"\n\"base storages\" are cached into the \"base cache\" and \"real storages\" are\ncached into the \"real cache\"\nWhen a process shares a cuda storage:\n\nIf the cuda storage is from opening a received handle, find the handle\nin the metadata cache and send the returned metadata.\nIf the cuda storage is from allocating storage, get the handle, build\nthe metadata, and send it.\n\nWhen a process receives a cuda storage:\n\nCheck the caches:\n\nCheck the \"real cache\" for the real storage.\nIf it's not there, look in the \"base cache\".\nIf the storage exists in the \"base cache\", recreate the real storage by\nadd it to the \"base storage\"\n\n\nIf it's not in the caches, recreate the real and base storages and cache\nboth.\nIn addition, if this process received a handle that it has opened\n(either now or in the past), we cache the storage's metadata in the\nmetadata cache. This is so that the process can access the handle\nto send to other processes.\nA process that didn't open a handle (the process that allocated the storage)\ndoesn't cache the metadata.\n\n\"base storages\" are uniquely identified by their CUDA handle.\n\"real storages\" are uniquely identified by (handle, offset).", "merged": false, "mergeable": null, "rebaseable": null, "mergeable_state": "unknown", "merged_by": null, "comments": 4, "review_comments": 10, "maintainer_can_modify": true, "commits": 4, "additions": 237, "deletions": 13, "changed_files": 3}