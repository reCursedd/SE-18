{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/194819100", "pull_request_review_id": 128059905, "id": 194819100, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDgxOTEwMA==", "diff_hunk": "@@ -148,29 +148,47 @@ const std::exception& ProcessGroupNCCL::WorkNCCL::exception() const {\n       \"isCompleted() and wait() will either succeed or throw\");\n }\n \n+std::unordered_set<ssize_t> ProcessGroupNCCL::processGroups_;\n+ssize_t ProcessGroupNCCL::processGroupCounter_ = -1;\n+\n ProcessGroupNCCL::ProcessGroupNCCL(\n     const std::shared_ptr<Store>& store,\n     int rank,\n     int size)\n     : ProcessGroup(rank, size), store_(store) {\n-  C10D_CUDA_CHECK(cudaGetDeviceCount(&numGPUs_));\n-  thcState_ = ::at::globalContext().lazyInitCUDA();\n+  // C10D_CUDA_CHECK(cudaGetDeviceCount(&numGPUs_));\n+  thcState_ = ::at::globalContext().getTHCState();\n+  if (!thcState_) {\n+    thcState_ = ::at::globalContext().lazyInitCUDA();\n+  }\n+  // Generate the Process Group ID for current PG, this needs to be identical\n+  // for all processes\n+  std::unique_lock<std::mutex>(pgTrackingLock_);\n+  while (true) {\n+    ++processGroupCounter_;\n+    if (processGroups_.count(processGroupCounter_) == 0) {\n+      processGroups_.insert(processGroupCounter_);\n+      processGroupId_ = std::to_string(processGroupCounter_);\n+      return;\n+    }\n+  }\n }\n \n-ProcessGroupNCCL::~ProcessGroupNCCL() {}\n+ProcessGroupNCCL::~ProcessGroupNCCL() {\n+  std::unique_lock<std::mutex>(pgTrackingLock_);\n+  processGroups_.erase(std::stoull(processGroupId_));\n+}\n \n-void ProcessGroupNCCL::broadcastUniqueNCCLId(\n-    const std::string& devicesKey,\n-    ncclUniqueId* ncclId) {\n+void ProcessGroupNCCL::broadcastUniqueNCCLId(ncclUniqueId* ncclId) {\n   // Rank 0 writes to the store as bcast\n   if (rank_ == 0) {\n     auto ncclIdVal = std::vector<uint8_t>(\n         reinterpret_cast<uint8_t*>(ncclId),\n         reinterpret_cast<uint8_t*>(ncclId) + NCCL_UNIQUE_ID_BYTES);\n-    store_->set(devicesKey, ncclIdVal);\n+    store_->set(processGroupId_, ncclIdVal);", "path": "torch/lib/c10d/ProcessGroupNCCL.cpp", "position": null, "original_position": 57, "commit_id": "ac86a8bfe0f243c213b1717abe3e96d5f9682f48", "original_commit_id": "5b7e4ae524d06af4a114b2d57771028167049cb1", "user": {"login": "pietern", "id": 9845, "node_id": "MDQ6VXNlcjk4NDU=", "avatar_url": "https://avatars3.githubusercontent.com/u/9845?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietern", "html_url": "https://github.com/pietern", "followers_url": "https://api.github.com/users/pietern/followers", "following_url": "https://api.github.com/users/pietern/following{/other_user}", "gists_url": "https://api.github.com/users/pietern/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietern/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietern/subscriptions", "organizations_url": "https://api.github.com/users/pietern/orgs", "repos_url": "https://api.github.com/users/pietern/repos", "events_url": "https://api.github.com/users/pietern/events{/privacy}", "received_events_url": "https://api.github.com/users/pietern/received_events", "type": "User", "site_admin": false}, "body": "The process group ID is unique per process group. If this function gets called more than once, the processes with rank != 0 will see the old `ncclIdVal`. If we have one NCCL communicator per process group per device list, we have to scope the keys in the store as such, to prevent races. The key should consist of both the process group ID and the devices key.", "created_at": "2018-06-12T17:10:30Z", "updated_at": "2018-11-23T15:45:22Z", "html_url": "https://github.com/pytorch/pytorch/pull/8357#discussion_r194819100", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/8357", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/194819100"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/8357#discussion_r194819100"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/8357"}}, "body_html": "<p>The process group ID is unique per process group. If this function gets called more than once, the processes with rank != 0 will see the old <code>ncclIdVal</code>. If we have one NCCL communicator per process group per device list, we have to scope the keys in the store as such, to prevent races. The key should consist of both the process group ID and the devices key.</p>", "body_text": "The process group ID is unique per process group. If this function gets called more than once, the processes with rank != 0 will see the old ncclIdVal. If we have one NCCL communicator per process group per device list, we have to scope the keys in the store as such, to prevent races. The key should consist of both the process group ID and the devices key."}