{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/196135447", "pull_request_review_id": 129631831, "id": 196135447, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NjEzNTQ0Nw==", "diff_hunk": "@@ -148,37 +148,67 @@ const std::exception& ProcessGroupNCCL::WorkNCCL::exception() const {\n       \"isCompleted() and wait() will either succeed or throw\");\n }\n \n+std::unordered_map<ssize_t, ssize_t> ProcessGroupNCCL::pgUniqueNCCLIDCnt_;\n+ssize_t ProcessGroupNCCL::processGroupCounter_ = -1;\n+std::mutex ProcessGroupNCCL::pgTrackingLock_;\n+\n ProcessGroupNCCL::ProcessGroupNCCL(\n     const std::shared_ptr<Store>& store,\n     int rank,\n     int size)\n     : ProcessGroup(rank, size), store_(store) {\n-  C10D_CUDA_CHECK(cudaGetDeviceCount(&numGPUs_));\n   thcState_ = ::at::globalContext().lazyInitCUDA();\n+  // Generate the Process Group ID for current PG, this needs to be identical\n+  // for all processes\n+  std::unique_lock<std::mutex> lock(pgTrackingLock_);\n+  while (true) {\n+    ++processGroupCounter_;\n+    if (pgUniqueNCCLIDCnt_.find(processGroupCounter_) ==\n+        pgUniqueNCCLIDCnt_.end()) {\n+      pgUniqueNCCLIDCnt_[processGroupCounter_] = -1;\n+      processGroupID_ = std::to_string(processGroupCounter_);\n+      return;\n+    }\n+  }", "path": "torch/lib/c10d/ProcessGroupNCCL.cpp", "position": null, "original_position": 26, "commit_id": "ac86a8bfe0f243c213b1717abe3e96d5f9682f48", "original_commit_id": "592ce2613a85be21277ad488008e8265a6525462", "user": {"login": "pietern", "id": 9845, "node_id": "MDQ6VXNlcjk4NDU=", "avatar_url": "https://avatars3.githubusercontent.com/u/9845?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietern", "html_url": "https://github.com/pietern", "followers_url": "https://api.github.com/users/pietern/followers", "following_url": "https://api.github.com/users/pietern/following{/other_user}", "gists_url": "https://api.github.com/users/pietern/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietern/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietern/subscriptions", "organizations_url": "https://api.github.com/users/pietern/orgs", "repos_url": "https://api.github.com/users/pietern/repos", "events_url": "https://api.github.com/users/pietern/events{/privacy}", "received_events_url": "https://api.github.com/users/pietern/received_events", "type": "User", "site_admin": false}, "body": "I made a comment about this in an earlier revision; if you already hold the lock, why do you need the loop? If you just increment the process group counter that should never conflict with anything else. Even better, it could be an atomic int and you don't even need the lock. Then with that value you set the map entry to -1 (where you do need the lock of course) and are done, without needing the while loop.", "created_at": "2018-06-18T16:06:14Z", "updated_at": "2018-11-23T15:45:42Z", "html_url": "https://github.com/pytorch/pytorch/pull/8357#discussion_r196135447", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/8357", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/196135447"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/8357#discussion_r196135447"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/8357"}}, "body_html": "<p>I made a comment about this in an earlier revision; if you already hold the lock, why do you need the loop? If you just increment the process group counter that should never conflict with anything else. Even better, it could be an atomic int and you don't even need the lock. Then with that value you set the map entry to -1 (where you do need the lock of course) and are done, without needing the while loop.</p>", "body_text": "I made a comment about this in an earlier revision; if you already hold the lock, why do you need the loop? If you just increment the process group counter that should never conflict with anything else. Even better, it could be an atomic int and you don't even need the lock. Then with that value you set the map entry to -1 (where you do need the lock of course) and are done, without needing the while loop."}