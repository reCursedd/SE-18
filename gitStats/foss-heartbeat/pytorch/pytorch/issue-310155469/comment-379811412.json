{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/379811412", "html_url": "https://github.com/pytorch/pytorch/pull/6152#issuecomment-379811412", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/6152", "id": 379811412, "node_id": "MDEyOklzc3VlQ29tbWVudDM3OTgxMTQxMg==", "user": {"login": "t-vi", "id": 20787943, "node_id": "MDQ6VXNlcjIwNzg3OTQz", "avatar_url": "https://avatars2.githubusercontent.com/u/20787943?v=4", "gravatar_id": "", "url": "https://api.github.com/users/t-vi", "html_url": "https://github.com/t-vi", "followers_url": "https://api.github.com/users/t-vi/followers", "following_url": "https://api.github.com/users/t-vi/following{/other_user}", "gists_url": "https://api.github.com/users/t-vi/gists{/gist_id}", "starred_url": "https://api.github.com/users/t-vi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/t-vi/subscriptions", "organizations_url": "https://api.github.com/users/t-vi/orgs", "repos_url": "https://api.github.com/users/t-vi/repos", "events_url": "https://api.github.com/users/t-vi/events{/privacy}", "received_events_url": "https://api.github.com/users/t-vi/received_events", "type": "User", "site_admin": false}, "created_at": "2018-04-09T16:25:49Z", "updated_at": "2018-04-09T16:25:49Z", "author_association": "CONTRIBUTOR", "body_html": "<div class=\"email-fragment\">Thank you both for your input!\nSo to have a plan:\n1) Use fixed order of reduction.\n2) Check whether permute and reshape works: how? a) Permute and use compute_stride or b) avoid permuting and mimic compute_stride\n3) Either a) rename reduce function to indicate associatative and commutative requirement or b) include force_reshape template option.\n\nWhile we are at it: 4) a) keep backwards on a case by case basis (sum_backward has different inputs than prod_backward), b) split IntList vs. int64_t for jit dispatch to automatically have backwards for multi-dim c) have a grand reduce_multi_backward template.\n\nI'm leaning towards 1), 2a), 3b), 4a) for this PR and revisit 4 when implementing a few more ops, but I'll gladly follow your advice.\n\nBest regards\n\nThomas</div>", "body_text": "Thank you both for your input!\nSo to have a plan:\n1) Use fixed order of reduction.\n2) Check whether permute and reshape works: how? a) Permute and use compute_stride or b) avoid permuting and mimic compute_stride\n3) Either a) rename reduce function to indicate associatative and commutative requirement or b) include force_reshape template option.\n\nWhile we are at it: 4) a) keep backwards on a case by case basis (sum_backward has different inputs than prod_backward), b) split IntList vs. int64_t for jit dispatch to automatically have backwards for multi-dim c) have a grand reduce_multi_backward template.\n\nI'm leaning towards 1), 2a), 3b), 4a) for this PR and revisit 4 when implementing a few more ops, but I'll gladly follow your advice.\n\nBest regards\n\nThomas", "body": "Thank you both for your input!\nSo to have a plan:\n1) Use fixed order of reduction.\n2) Check whether permute and reshape works: how? a) Permute and use compute_stride or b) avoid permuting and mimic compute_stride\n3) Either a) rename reduce function to indicate associatative and commutative requirement or b) include force_reshape template option.\n\nWhile we are at it: 4) a) keep backwards on a case by case basis (sum_backward has different inputs than prod_backward), b) split IntList vs. int64_t for jit dispatch to automatically have backwards for multi-dim c) have a grand reduce_multi_backward template.\n\nI'm leaning towards 1), 2a), 3b), 4a) for this PR and revisit 4 when implementing a few more ops, but I'll gladly follow your advice.\n\nBest regards\n\nThomas \n"}