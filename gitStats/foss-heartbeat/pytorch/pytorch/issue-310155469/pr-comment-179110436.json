{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/179110436", "pull_request_review_id": 109290331, "id": 179110436, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTExMDQzNg==", "diff_hunk": "@@ -611,13 +611,10 @@\n     CPU: _sum_cpu\n     CUDA: _sum_cuda\n \n-- func: sum(Tensor self, int64_t dim, bool keepdim=False) -> Tensor\n+- func: sum(Tensor self, IntList[1] dim, bool keepdim=False) -> Tensor", "path": "aten/src/ATen/native/native_functions.yaml", "position": null, "original_position": 5, "commit_id": "3b631f02f2d88b09e83d700f3c33cc2e3ad01e63", "original_commit_id": "d32ca285576fe1ed0691e270e03cb7bb175d3b9b", "user": {"login": "t-vi", "id": 20787943, "node_id": "MDQ6VXNlcjIwNzg3OTQz", "avatar_url": "https://avatars2.githubusercontent.com/u/20787943?v=4", "gravatar_id": "", "url": "https://api.github.com/users/t-vi", "html_url": "https://github.com/t-vi", "followers_url": "https://api.github.com/users/t-vi/followers", "following_url": "https://api.github.com/users/t-vi/following{/other_user}", "gists_url": "https://api.github.com/users/t-vi/gists{/gist_id}", "starred_url": "https://api.github.com/users/t-vi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/t-vi/subscriptions", "organizations_url": "https://api.github.com/users/t-vi/orgs", "repos_url": "https://api.github.com/users/t-vi/repos", "events_url": "https://api.github.com/users/t-vi/events{/privacy}", "received_events_url": "https://api.github.com/users/t-vi/received_events", "type": "User", "site_admin": false}, "body": "`\u00ccntlist[1]` means that if you pass an Integer, it will be converted to a 1-vector containing that integer (prominently used for convs).\r\n\r\nThe issue here is (briefly touched in the initial comments) that the JIT does not allow overloading of the form that one function takes an int and another an IntList. Thus, I used this to reroute the one-dimensional sum.\r\n\r\nThe alternative would be to change `gen_jit_dispatch.py` to consider the two signatures to be distinct. Currently I get exceptions in emit_decl_variant - the assertion at the bottom of that function if I have both `func: sum(Tensor self, int64_t dim, bool keepdim=False) -> Tensor` and\r\n`func: sum(Tensor self, IntList[1] dim, bool keepdim=False) -> Tensor`.\r\n", "created_at": "2018-04-04T11:44:25Z", "updated_at": "2018-11-23T15:41:39Z", "html_url": "https://github.com/pytorch/pytorch/pull/6152#discussion_r179110436", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/6152", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/179110436"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/6152#discussion_r179110436"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/6152"}}, "body_html": "<p><code>\u00ccntlist[1]</code> means that if you pass an Integer, it will be converted to a 1-vector containing that integer (prominently used for convs).</p>\n<p>The issue here is (briefly touched in the initial comments) that the JIT does not allow overloading of the form that one function takes an int and another an IntList. Thus, I used this to reroute the one-dimensional sum.</p>\n<p>The alternative would be to change <code>gen_jit_dispatch.py</code> to consider the two signatures to be distinct. Currently I get exceptions in emit_decl_variant - the assertion at the bottom of that function if I have both <code>func: sum(Tensor self, int64_t dim, bool keepdim=False) -&gt; Tensor</code> and<br>\n<code>func: sum(Tensor self, IntList[1] dim, bool keepdim=False) -&gt; Tensor</code>.</p>", "body_text": "\u00ccntlist[1] means that if you pass an Integer, it will be converted to a 1-vector containing that integer (prominently used for convs).\nThe issue here is (briefly touched in the initial comments) that the JIT does not allow overloading of the form that one function takes an int and another an IntList. Thus, I used this to reroute the one-dimensional sum.\nThe alternative would be to change gen_jit_dispatch.py to consider the two signatures to be distinct. Currently I get exceptions in emit_decl_variant - the assertion at the bottom of that function if I have both func: sum(Tensor self, int64_t dim, bool keepdim=False) -> Tensor and\nfunc: sum(Tensor self, IntList[1] dim, bool keepdim=False) -> Tensor.", "in_reply_to_id": 179106756}