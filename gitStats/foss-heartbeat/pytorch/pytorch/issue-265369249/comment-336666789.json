{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/336666789", "html_url": "https://github.com/pytorch/pytorch/issues/3111#issuecomment-336666789", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/3111", "id": 336666789, "node_id": "MDEyOklzc3VlQ29tbWVudDMzNjY2Njc4OQ==", "user": {"login": "acrosson", "id": 4795661, "node_id": "MDQ6VXNlcjQ3OTU2NjE=", "avatar_url": "https://avatars0.githubusercontent.com/u/4795661?v=4", "gravatar_id": "", "url": "https://api.github.com/users/acrosson", "html_url": "https://github.com/acrosson", "followers_url": "https://api.github.com/users/acrosson/followers", "following_url": "https://api.github.com/users/acrosson/following{/other_user}", "gists_url": "https://api.github.com/users/acrosson/gists{/gist_id}", "starred_url": "https://api.github.com/users/acrosson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/acrosson/subscriptions", "organizations_url": "https://api.github.com/users/acrosson/orgs", "repos_url": "https://api.github.com/users/acrosson/repos", "events_url": "https://api.github.com/users/acrosson/events{/privacy}", "received_events_url": "https://api.github.com/users/acrosson/received_events", "type": "User", "site_admin": false}, "created_at": "2017-10-14T20:54:20Z", "updated_at": "2017-10-14T20:54:20Z", "author_association": "NONE", "body_html": "<p>I have a few models that are being ran, one of which is a modified version of ResNet from pytorch code base <a href=\"https://github.com/pytorch/vision/blob/master/torchvision/models/resnet.py\">https://github.com/pytorch/vision/blob/master/torchvision/models/resnet.py</a> ...</p>\n<p>I run the flask app with threaded=True</p>\n<pre><code>import jsonpickle\nimport numpy as np\nimport cv2\nimport json\n\nfrom flask import Flask, request, Response\nfrom model import Model\n\napp = Flask(__name__)\nm = Model()\n\n@app.route('/api/detect', methods=['POST'])\ndef detect():\n    r = request\n    rgb_im_len = int(r.headers.get('rgb_im_len'))\n    # convert string of image data to uint8\n    nparr = np.fromstring(r.data[:rgb_im_len], np.uint8)\n    im = cv2.imdecode(nparr, cv2.IMREAD_COLOR) # decode image\n\n    output = m.detect(im)\n    response = {'output': output}\n    response_pickled = jsonpickle.encode(response)\n    return Response(response=response_pickled, status=200, mimetype=\"application/json\")\n\n\n# start flask app\napp.run(host=\"0.0.0.0\", port=5000, threaded=True)\n</code></pre>", "body_text": "I have a few models that are being ran, one of which is a modified version of ResNet from pytorch code base https://github.com/pytorch/vision/blob/master/torchvision/models/resnet.py ...\nI run the flask app with threaded=True\nimport jsonpickle\nimport numpy as np\nimport cv2\nimport json\n\nfrom flask import Flask, request, Response\nfrom model import Model\n\napp = Flask(__name__)\nm = Model()\n\n@app.route('/api/detect', methods=['POST'])\ndef detect():\n    r = request\n    rgb_im_len = int(r.headers.get('rgb_im_len'))\n    # convert string of image data to uint8\n    nparr = np.fromstring(r.data[:rgb_im_len], np.uint8)\n    im = cv2.imdecode(nparr, cv2.IMREAD_COLOR) # decode image\n\n    output = m.detect(im)\n    response = {'output': output}\n    response_pickled = jsonpickle.encode(response)\n    return Response(response=response_pickled, status=200, mimetype=\"application/json\")\n\n\n# start flask app\napp.run(host=\"0.0.0.0\", port=5000, threaded=True)", "body": "I have a few models that are being ran, one of which is a modified version of ResNet from pytorch code base https://github.com/pytorch/vision/blob/master/torchvision/models/resnet.py ... \r\n\r\nI run the flask app with threaded=True\r\n```\r\nimport jsonpickle\r\nimport numpy as np\r\nimport cv2\r\nimport json\r\n\r\nfrom flask import Flask, request, Response\r\nfrom model import Model\r\n\r\napp = Flask(__name__)\r\nm = Model()\r\n\r\n@app.route('/api/detect', methods=['POST'])\r\ndef detect():\r\n    r = request\r\n    rgb_im_len = int(r.headers.get('rgb_im_len'))\r\n    # convert string of image data to uint8\r\n    nparr = np.fromstring(r.data[:rgb_im_len], np.uint8)\r\n    im = cv2.imdecode(nparr, cv2.IMREAD_COLOR) # decode image\r\n\r\n    output = m.detect(im)\r\n    response = {'output': output}\r\n    response_pickled = jsonpickle.encode(response)\r\n    return Response(response=response_pickled, status=200, mimetype=\"application/json\")\r\n\r\n\r\n# start flask app\r\napp.run(host=\"0.0.0.0\", port=5000, threaded=True)\r\n```"}