{"url": "https://api.github.com/repos/pytorch/pytorch/issues/8621", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/8621/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/8621/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/8621/events", "html_url": "https://github.com/pytorch/pytorch/issues/8621", "id": 333440035, "node_id": "MDU6SXNzdWUzMzM0NDAwMzU=", "number": 8621, "title": "[feature request] No grad decorator", "user": {"login": "pimdh", "id": 459819, "node_id": "MDQ6VXNlcjQ1OTgxOQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/459819?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pimdh", "html_url": "https://github.com/pimdh", "followers_url": "https://api.github.com/users/pimdh/followers", "following_url": "https://api.github.com/users/pimdh/following{/other_user}", "gists_url": "https://api.github.com/users/pimdh/gists{/gist_id}", "starred_url": "https://api.github.com/users/pimdh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pimdh/subscriptions", "organizations_url": "https://api.github.com/users/pimdh/orgs", "repos_url": "https://api.github.com/users/pimdh/repos", "events_url": "https://api.github.com/users/pimdh/events{/privacy}", "received_events_url": "https://api.github.com/users/pimdh/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-06-18T21:23:32Z", "updated_at": "2018-06-18T21:31:50Z", "closed_at": "2018-06-18T21:31:50Z", "author_association": "NONE", "body_html": "<p>It would be nice if the context managers that enable/disable autograd could be used a decorator. This would allow one to write code like:</p>\n<pre><code>@torch.no_grad()\ndef test(args):\n    pass\n</code></pre>\n<p>In Python 3, this can be trivially implemented with a <a href=\"https://docs.python.org/3/library/contextlib.html#contextlib.ContextDecorator\" rel=\"nofollow\">ContextDecorator</a>, but for Python 2 a solutions should be easy too.</p>\n<p>As a workaround I currently use a wrapper in Python 3:</p>\n<pre><code>@contextmanager\ndef no_grad():\n    with torch.no_grad():\n        yield\n</code></pre>\n<p>which works since <code>contextmanager</code> implements <code>ContextDecorator</code>,</p>", "body_text": "It would be nice if the context managers that enable/disable autograd could be used a decorator. This would allow one to write code like:\n@torch.no_grad()\ndef test(args):\n    pass\n\nIn Python 3, this can be trivially implemented with a ContextDecorator, but for Python 2 a solutions should be easy too.\nAs a workaround I currently use a wrapper in Python 3:\n@contextmanager\ndef no_grad():\n    with torch.no_grad():\n        yield\n\nwhich works since contextmanager implements ContextDecorator,", "body": "It would be nice if the context managers that enable/disable autograd could be used a decorator. This would allow one to write code like:\r\n```\r\n@torch.no_grad()\r\ndef test(args):\r\n    pass\r\n```\r\nIn Python 3, this can be trivially implemented with a [ContextDecorator](https://docs.python.org/3/library/contextlib.html#contextlib.ContextDecorator), but for Python 2 a solutions should be easy too.\r\n\r\nAs a workaround I currently use a wrapper in Python 3:\r\n```\r\n@contextmanager\r\ndef no_grad():\r\n    with torch.no_grad():\r\n        yield\r\n```\r\nwhich works since `contextmanager` implements `ContextDecorator`,"}