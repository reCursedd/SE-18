{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/430106411", "html_url": "https://github.com/pytorch/pytorch/pull/12170#issuecomment-430106411", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/12170", "id": 430106411, "node_id": "MDEyOklzc3VlQ29tbWVudDQzMDEwNjQxMQ==", "user": {"login": "gujinghui", "id": 31264804, "node_id": "MDQ6VXNlcjMxMjY0ODA0", "avatar_url": "https://avatars2.githubusercontent.com/u/31264804?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gujinghui", "html_url": "https://github.com/gujinghui", "followers_url": "https://api.github.com/users/gujinghui/followers", "following_url": "https://api.github.com/users/gujinghui/following{/other_user}", "gists_url": "https://api.github.com/users/gujinghui/gists{/gist_id}", "starred_url": "https://api.github.com/users/gujinghui/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gujinghui/subscriptions", "organizations_url": "https://api.github.com/users/gujinghui/orgs", "repos_url": "https://api.github.com/users/gujinghui/repos", "events_url": "https://api.github.com/users/gujinghui/events{/privacy}", "received_events_url": "https://api.github.com/users/gujinghui/received_events", "type": "User", "site_admin": false}, "created_at": "2018-10-16T05:32:58Z", "updated_at": "2018-10-16T05:38:29Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=79994\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/orionr\">@orionr</a><br>\nUnderstood your concern.<br>\nBut the USE_MKL has been used in mkl-dnn, as well, which should introduce some conflictions.</p>\n<p>And USE_MKLDNN/USE_MKL is defined by user to try to enable MKLDNN/MKL.<br>\nBut, sometimes we cannot find MKLDNN/MKL.<br>\nIn order to avoid fusion, new macros are needed here.</p>\n<p>How about use below macros in both cmake and C code, instead?<br>\nCAFFE2_USE_MKL  --&gt; MKL_FOUND<br>\nCAFFE2_USE_MKLDNN --&gt; MKLDNN_FOUND</p>\n<p>Then, in caffe2/core/macros.h.in, we have below lines.<br>\n#cmakedefine MKL_FOUND<br>\n#cmakedefine MKLDNN_FOUND</p>\n<p>And in C code, the code looks like below.<br>\n#ifdef MKLDNN_FOUND<br>\n......<br>\n#endif</p>", "body_text": "@orionr\nUnderstood your concern.\nBut the USE_MKL has been used in mkl-dnn, as well, which should introduce some conflictions.\nAnd USE_MKLDNN/USE_MKL is defined by user to try to enable MKLDNN/MKL.\nBut, sometimes we cannot find MKLDNN/MKL.\nIn order to avoid fusion, new macros are needed here.\nHow about use below macros in both cmake and C code, instead?\nCAFFE2_USE_MKL  --> MKL_FOUND\nCAFFE2_USE_MKLDNN --> MKLDNN_FOUND\nThen, in caffe2/core/macros.h.in, we have below lines.\n#cmakedefine MKL_FOUND\n#cmakedefine MKLDNN_FOUND\nAnd in C code, the code looks like below.\n#ifdef MKLDNN_FOUND\n......\n#endif", "body": "@orionr \r\nUnderstood your concern.\r\nBut the USE_MKL has been used in mkl-dnn, as well, which should introduce some conflictions.\r\n\r\nAnd USE_MKLDNN/USE_MKL is defined by user to try to enable MKLDNN/MKL.\r\nBut, sometimes we cannot find MKLDNN/MKL.\r\nIn order to avoid fusion, new macros are needed here.\r\n\r\nHow about use below macros in both cmake and C code, instead?\r\nCAFFE2_USE_MKL  --> MKL_FOUND\r\nCAFFE2_USE_MKLDNN --> MKLDNN_FOUND\r\n\r\nThen, in caffe2/core/macros.h.in, we have below lines.\r\n#cmakedefine MKL_FOUND\r\n#cmakedefine MKLDNN_FOUND\r\n\r\nAnd in C code, the code looks like below.\r\n#ifdef MKLDNN_FOUND\r\n......\r\n#endif"}