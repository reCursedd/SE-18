{"url": "https://api.github.com/repos/pytorch/pytorch/issues/1339", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/1339/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/1339/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/1339/events", "html_url": "https://github.com/pytorch/pytorch/issues/1339", "id": 223628197, "node_id": "MDU6SXNzdWUyMjM2MjgxOTc=", "number": 1339, "title": "Backprop through argmax", "user": {"login": "johnwlambert", "id": 16724970, "node_id": "MDQ6VXNlcjE2NzI0OTcw", "avatar_url": "https://avatars2.githubusercontent.com/u/16724970?v=4", "gravatar_id": "", "url": "https://api.github.com/users/johnwlambert", "html_url": "https://github.com/johnwlambert", "followers_url": "https://api.github.com/users/johnwlambert/followers", "following_url": "https://api.github.com/users/johnwlambert/following{/other_user}", "gists_url": "https://api.github.com/users/johnwlambert/gists{/gist_id}", "starred_url": "https://api.github.com/users/johnwlambert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/johnwlambert/subscriptions", "organizations_url": "https://api.github.com/users/johnwlambert/orgs", "repos_url": "https://api.github.com/users/johnwlambert/repos", "events_url": "https://api.github.com/users/johnwlambert/events{/privacy}", "received_events_url": "https://api.github.com/users/johnwlambert/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-04-23T11:03:16Z", "updated_at": "2017-04-24T08:31:27Z", "closed_at": "2017-04-24T08:31:27Z", "author_association": "NONE", "body_html": "<p>Hi, I need to pass input through one nn.Module, then argmax the output, and then pass that output to a second nn.Module. I want to backprop through the argmax back to the weights of the first module.<br>\n<code>y_p = torch.max(y_p, 1)[1]</code></p>\n<p>That's impossible right now, though, it seems.  When I loop through the gradient of the weights of my first module (with the following code):<br>\n`\tfirst_model.zero_grad()<br>\nsecond_model.zero_grad()</p>\n<pre><code>loss.backward() # retain_variables=True\n\nfor param in second_model.parameters():\n\tprint( 'data: ', param.data  )\n\tprint( 'grad data: ', param.grad.data )\n\nfor param in first_model.parameters():\n\tprint( 'data: ', param.data  )\n\tprint( 'grad data: ', param.grad.data )`\n</code></pre>\n<p>I get the following error, stating that those gradients can no longer be viewed/exist:</p>\n<blockquote>\n<p>AttributeError: \"'NoneType' object has no attribute 'data'\"<br>\n/scail/scratch/group/vision/johnwl/PytorchTensorToVar_Backprop_SanityCheck.py(109)()<br>\n-&gt; main()</p>\n</blockquote>", "body_text": "Hi, I need to pass input through one nn.Module, then argmax the output, and then pass that output to a second nn.Module. I want to backprop through the argmax back to the weights of the first module.\ny_p = torch.max(y_p, 1)[1]\nThat's impossible right now, though, it seems.  When I loop through the gradient of the weights of my first module (with the following code):\n`\tfirst_model.zero_grad()\nsecond_model.zero_grad()\nloss.backward() # retain_variables=True\n\nfor param in second_model.parameters():\n\tprint( 'data: ', param.data  )\n\tprint( 'grad data: ', param.grad.data )\n\nfor param in first_model.parameters():\n\tprint( 'data: ', param.data  )\n\tprint( 'grad data: ', param.grad.data )`\n\nI get the following error, stating that those gradients can no longer be viewed/exist:\n\nAttributeError: \"'NoneType' object has no attribute 'data'\"\n/scail/scratch/group/vision/johnwl/PytorchTensorToVar_Backprop_SanityCheck.py(109)()\n-> main()", "body": "Hi, I need to pass input through one nn.Module, then argmax the output, and then pass that output to a second nn.Module. I want to backprop through the argmax back to the weights of the first module. \r\n`y_p = torch.max(y_p, 1)[1]`\r\n\r\nThat's impossible right now, though, it seems.  When I loop through the gradient of the weights of my first module (with the following code):\r\n`\tfirst_model.zero_grad()\r\n\tsecond_model.zero_grad()\r\n\r\n\tloss.backward() # retain_variables=True\r\n\r\n\tfor param in second_model.parameters():\r\n\t\tprint( 'data: ', param.data  )\r\n\t\tprint( 'grad data: ', param.grad.data )\r\n\r\n\tfor param in first_model.parameters():\r\n\t\tprint( 'data: ', param.data  )\r\n\t\tprint( 'grad data: ', param.grad.data )`\r\nI get the following error, stating that those gradients can no longer be viewed/exist:\r\n\r\n> AttributeError: \"'NoneType' object has no attribute 'data'\"\r\n> /scail/scratch/group/vision/johnwl/PytorchTensorToVar_Backprop_SanityCheck.py(109)<module>()\r\n-> main()\r\n\r\n"}