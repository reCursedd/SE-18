{"url": "https://api.github.com/repos/pytorch/pytorch/issues/14298", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/14298/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/14298/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/14298/events", "html_url": "https://github.com/pytorch/pytorch/pull/14298", "id": 383323734, "node_id": "MDExOlB1bGxSZXF1ZXN0MjMyODIwNDc3", "number": 14298, "title": "[c10d] Make ProcessGroup::Work::wait() throw", "user": {"login": "pietern", "id": 9845, "node_id": "MDQ6VXNlcjk4NDU=", "avatar_url": "https://avatars3.githubusercontent.com/u/9845?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietern", "html_url": "https://github.com/pietern", "followers_url": "https://api.github.com/users/pietern/followers", "following_url": "https://api.github.com/users/pietern/following{/other_user}", "gists_url": "https://api.github.com/users/pietern/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietern/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietern/subscriptions", "organizations_url": "https://api.github.com/users/pietern/orgs", "repos_url": "https://api.github.com/users/pietern/repos", "events_url": "https://api.github.com/users/pietern/events{/privacy}", "received_events_url": "https://api.github.com/users/pietern/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-11-21T23:12:24Z", "updated_at": "2018-11-22T00:33:05Z", "closed_at": null, "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/14298", "html_url": "https://github.com/pytorch/pytorch/pull/14298", "diff_url": "https://github.com/pytorch/pytorch/pull/14298.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/14298.patch"}, "body_html": "<p>Stack:<br>\n\u00a0\u00a0\u00a0\u00a0<g-emoji class=\"g-emoji\" alias=\"white_circle\" fallback-src=\"https://assets-cdn.github.com/images/icons/emoji/unicode/26aa.png\">\u26aa\ufe0f</g-emoji>\u00a0 <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"383323520\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/14294\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/pytorch/pytorch/pull/14294/hovercard\" href=\"https://github.com/pytorch/pytorch/pull/14294\">#14294</a> [c10d] Use new style barrier support in c10d/gloo\u00a0\u00a0<a href=\"https://our.internmc.facebook.com/intern/diff/D13111509/\" rel=\"nofollow\"><g-emoji class=\"g-emoji\" alias=\"yellow_heart\" fallback-src=\"https://assets-cdn.github.com/images/icons/emoji/unicode/1f49b.png\">\ud83d\udc9b</g-emoji></a><br>\n\u00a0\u00a0\u00a0\u00a0<g-emoji class=\"g-emoji\" alias=\"white_circle\" fallback-src=\"https://assets-cdn.github.com/images/icons/emoji/unicode/26aa.png\">\u26aa\ufe0f</g-emoji>\u00a0 <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"383323561\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/14295\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/pytorch/pytorch/pull/14295/hovercard\" href=\"https://github.com/pytorch/pytorch/pull/14295\">#14295</a> [c10d] Remove algorithm caching in ProcessGroupGloo\u00a0\u00a0<a href=\"https://our.internmc.facebook.com/intern/diff/D13111781/\" rel=\"nofollow\"><g-emoji class=\"g-emoji\" alias=\"yellow_heart\" fallback-src=\"https://assets-cdn.github.com/images/icons/emoji/unicode/1f49b.png\">\ud83d\udc9b</g-emoji></a><br>\n\u00a0\u00a0\u00a0\u00a0<g-emoji class=\"g-emoji\" alias=\"white_circle\" fallback-src=\"https://assets-cdn.github.com/images/icons/emoji/unicode/26aa.png\">\u26aa\ufe0f</g-emoji>\u00a0 <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"383323605\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/14296\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/pytorch/pytorch/pull/14296/hovercard\" href=\"https://github.com/pytorch/pytorch/pull/14296\">#14296</a> [c10d][easy] Refer to all work with ProcessGroup prefix\u00a0\u00a0<a href=\"https://our.internmc.facebook.com/intern/diff/D13128977/\" rel=\"nofollow\"><g-emoji class=\"g-emoji\" alias=\"yellow_heart\" fallback-src=\"https://assets-cdn.github.com/images/icons/emoji/unicode/1f49b.png\">\ud83d\udc9b</g-emoji></a><br>\n\u00a0\u00a0\u00a0\u00a0<g-emoji class=\"g-emoji\" alias=\"white_circle\" fallback-src=\"https://assets-cdn.github.com/images/icons/emoji/unicode/26aa.png\">\u26aa\ufe0f</g-emoji>\u00a0 <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"383323669\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/14297\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/pytorch/pytorch/pull/14297/hovercard\" href=\"https://github.com/pytorch/pytorch/pull/14297\">#14297</a> [c10d] Add option structs and timeout field\u00a0\u00a0<a href=\"https://our.internmc.facebook.com/intern/diff/D13158474/\" rel=\"nofollow\"><g-emoji class=\"g-emoji\" alias=\"yellow_heart\" fallback-src=\"https://assets-cdn.github.com/images/icons/emoji/unicode/1f49b.png\">\ud83d\udc9b</g-emoji></a><br>\n\u00a0\u00a0\u00a0\u00a0<g-emoji class=\"g-emoji\" alias=\"black_circle\" fallback-src=\"https://assets-cdn.github.com/images/icons/emoji/unicode/26ab.png\">\u26ab\ufe0f</g-emoji>\u00a0 <strong><a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"383323734\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/14298\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/pytorch/pytorch/pull/14298/hovercard\" href=\"https://github.com/pytorch/pytorch/pull/14298\">#14298</a> [c10d] Make ProcessGroup::Work::wait() throw</strong>\u00a0\u00a0<a href=\"https://our.internmc.facebook.com/intern/diff/D13158475/\" rel=\"nofollow\"><g-emoji class=\"g-emoji\" alias=\"yellow_heart\" fallback-src=\"https://assets-cdn.github.com/images/icons/emoji/unicode/1f49b.png\">\ud83d\udc9b</g-emoji></a></p>\n<p>This is a breaking API change for users of the C++ c10d API. The work<br>\nobject defined wait() to return a boolean. If the work completed<br>\nsuccessfully it would return true, if it didn't it would return false.<br>\nIt was then up to the user to call the exception() function to figure<br>\nout what went wrong. This has proven suboptimal as it allows users to<br>\nforget about failure handling and errors may be ignored.</p>\n<p>The work class is semantically very similar to std::future, where a<br>\ncall to get() may throw if the underlying std::promise has set an<br>\nexception. This commit changes the semantic of the work class to be<br>\nsimilar to this and turns wait() into a void function that throws if<br>\nthe work completes with an exception.</p>\n<p>The exception() function can still be used to retrieve the exception<br>\nif isSuccess() returns false, but now returns an std::exception_ptr<br>\ninstead of a reference to a std::exception.</p>\n<p>Differential Revision: <a href=\"https://our.internmc.facebook.com/intern/diff/D13158475/\" rel=\"nofollow\">D13158475</a></p>", "body_text": "Stack:\n\u00a0\u00a0\u00a0\u00a0\u26aa\ufe0f\u00a0 #14294 [c10d] Use new style barrier support in c10d/gloo\u00a0\u00a0\ud83d\udc9b\n\u00a0\u00a0\u00a0\u00a0\u26aa\ufe0f\u00a0 #14295 [c10d] Remove algorithm caching in ProcessGroupGloo\u00a0\u00a0\ud83d\udc9b\n\u00a0\u00a0\u00a0\u00a0\u26aa\ufe0f\u00a0 #14296 [c10d][easy] Refer to all work with ProcessGroup prefix\u00a0\u00a0\ud83d\udc9b\n\u00a0\u00a0\u00a0\u00a0\u26aa\ufe0f\u00a0 #14297 [c10d] Add option structs and timeout field\u00a0\u00a0\ud83d\udc9b\n\u00a0\u00a0\u00a0\u00a0\u26ab\ufe0f\u00a0 #14298 [c10d] Make ProcessGroup::Work::wait() throw\u00a0\u00a0\ud83d\udc9b\nThis is a breaking API change for users of the C++ c10d API. The work\nobject defined wait() to return a boolean. If the work completed\nsuccessfully it would return true, if it didn't it would return false.\nIt was then up to the user to call the exception() function to figure\nout what went wrong. This has proven suboptimal as it allows users to\nforget about failure handling and errors may be ignored.\nThe work class is semantically very similar to std::future, where a\ncall to get() may throw if the underlying std::promise has set an\nexception. This commit changes the semantic of the work class to be\nsimilar to this and turns wait() into a void function that throws if\nthe work completes with an exception.\nThe exception() function can still be used to retrieve the exception\nif isSuccess() returns false, but now returns an std::exception_ptr\ninstead of a reference to a std::exception.\nDifferential Revision: D13158475", "body": "Stack:\n&nbsp;&nbsp;&nbsp;&nbsp;:white_circle:&nbsp; #14294 [c10d] Use new style barrier support in c10d/gloo&nbsp;&nbsp;[:yellow_heart:](https://our.internmc.facebook.com/intern/diff/D13111509/)\n&nbsp;&nbsp;&nbsp;&nbsp;:white_circle:&nbsp; #14295 [c10d] Remove algorithm caching in ProcessGroupGloo&nbsp;&nbsp;[:yellow_heart:](https://our.internmc.facebook.com/intern/diff/D13111781/)\n&nbsp;&nbsp;&nbsp;&nbsp;:white_circle:&nbsp; #14296 [c10d][easy] Refer to all work with ProcessGroup prefix&nbsp;&nbsp;[:yellow_heart:](https://our.internmc.facebook.com/intern/diff/D13128977/)\n&nbsp;&nbsp;&nbsp;&nbsp;:white_circle:&nbsp; #14297 [c10d] Add option structs and timeout field&nbsp;&nbsp;[:yellow_heart:](https://our.internmc.facebook.com/intern/diff/D13158474/)\n&nbsp;&nbsp;&nbsp;&nbsp;:black_circle:&nbsp; **#14298 [c10d] Make ProcessGroup::Work::wait() throw**&nbsp;&nbsp;[:yellow_heart:](https://our.internmc.facebook.com/intern/diff/D13158475/)\n\nThis is a breaking API change for users of the C++ c10d API. The work\nobject defined wait() to return a boolean. If the work completed\nsuccessfully it would return true, if it didn't it would return false.\nIt was then up to the user to call the exception() function to figure\nout what went wrong. This has proven suboptimal as it allows users to\nforget about failure handling and errors may be ignored.\n\nThe work class is semantically very similar to std::future, where a\ncall to get() may throw if the underlying std::promise has set an\nexception. This commit changes the semantic of the work class to be\nsimilar to this and turns wait() into a void function that throws if\nthe work completes with an exception.\n\nThe exception() function can still be used to retrieve the exception\nif isSuccess() returns false, but now returns an std::exception_ptr\ninstead of a reference to a std::exception.\n\nDifferential Revision: [D13158475](https://our.internmc.facebook.com/intern/diff/D13158475/)"}