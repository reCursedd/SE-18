{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/184906532", "pull_request_review_id": 116191093, "id": 184906532, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NDkwNjUzMg==", "diff_hunk": "@@ -461,20 +461,119 @@ def load(name,\n                 extra_cflags=['-O2'],\n                 verbose=True)\n     '''\n+    return _jit_compile(\n+        name,\n+        [sources] if isinstance(sources, str) else sources,\n+        extra_cflags,\n+        extra_cuda_cflags,\n+        extra_ldflags,\n+        extra_include_paths,\n+        build_directory or _get_build_directory(name, verbose),\n+        verbose)\n+\n+\n+def load_inline(name,\n+                cpp_sources,\n+                cuda_sources=None,\n+                functions=None,\n+                extra_cflags=None,\n+                extra_cuda_cflags=None,\n+                extra_ldflags=None,\n+                extra_include_paths=None,\n+                build_directory=None,\n+                verbose=False):\n+    '''\n+    Loads a PyTorch C++ extension just-in-time (JIT) from string sources.\n \n-    verify_ninja_availability()\n-\n-    # Allows sources to be a single path or a list of paths.\n-    if isinstance(sources, str):\n-        sources = [sources]\n-\n-    if build_directory is None:\n-        build_directory = _get_build_directory(name, verbose)\n+    This function behaves exactly like :func:`load`, but takes its sources as\n+    strings rather than filenames. These strings are stored to files in the\n+    build directory, after which the behavior of :func:`load_inline` is\n+    identical to :func:`load`. Strings passed in ``cpp_sources`` (a string or\n+    list of strings) are stored with a ``.cpp`` extension, and the string or list\n+    of strings passed in ``cuda_sources`` are stored with a ``.cu`` extension.\n \n+    Example:\n+        >>> from torch.utils.cpp_extension import load_inline\n+        >>> source = \\'\\'\\'\n+        at::Tensor sin_add(at::Tensor x, at::Tensor y) {\n+          return x.sin() + y.sin();\n+        }\n+        \\'\\'\\'\n+        >>> module = load_inline(name='inline_extension',\n+                                 cpp_sources=[source],\n+                                 functions=['sin_add'])\n+    '''\n+    build_directory = build_directory or _get_build_directory(name, verbose)", "path": "torch/utils/cpp_extension.py", "position": 54, "original_position": 54, "commit_id": "6a5cda0edd38b23627b86930ca7bf7632a87b69b", "original_commit_id": "6a5cda0edd38b23627b86930ca7bf7632a87b69b", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "An especially poignant case is if the automatically generated pybind11 code isn't quite working.", "created_at": "2018-04-30T02:59:31Z", "updated_at": "2018-11-23T15:43:24Z", "html_url": "https://github.com/pytorch/pytorch/pull/7059#discussion_r184906532", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/7059", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/184906532"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/7059#discussion_r184906532"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/7059"}}, "body_html": "<p>An especially poignant case is if the automatically generated pybind11 code isn't quite working.</p>", "body_text": "An especially poignant case is if the automatically generated pybind11 code isn't quite working.", "in_reply_to_id": 184906498}