{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/184912341", "pull_request_review_id": 116198029, "id": 184912341, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NDkxMjM0MQ==", "diff_hunk": "@@ -106,6 +106,111 @@ def test_optional(self):\n         has_value = cpp_extension.function_taking_optional(None)\n         self.assertFalse(has_value)\n \n+    def test_inline_jit_compile_extension_with_functions_as_list(self):\n+        cpp_source = '''\n+        at::Tensor tanh_add(at::Tensor x, at::Tensor y) {\n+          return x.tanh() + y.tanh();\n+        }\n+        '''\n+\n+        module = torch.utils.cpp_extension.load_inline(\n+            name='inline_jit_extension_with_functions_list',\n+            cpp_sources=cpp_source,\n+            functions='tanh_add',\n+            verbose=True)\n+\n+        self.assertEqual(module.tanh_add.__doc__.split('\\n')[2], 'tanh_add')\n+\n+        x = torch.randn(4, 4)\n+        y = torch.randn(4, 4)\n+\n+        z = module.tanh_add(x, y)\n+        self.assertEqual(z, x.tanh() + y.tanh())\n+\n+    def test_inline_jit_compile_extension_with_functions_as_dict(self):\n+        cpp_source = '''\n+        at::Tensor tanh_add(at::Tensor x, at::Tensor y) {\n+          return x.tanh() + y.tanh();\n+        }\n+        '''\n+\n+        module = torch.utils.cpp_extension.load_inline(\n+            name='inline_jit_extension_with_functions_dict',\n+            cpp_sources=cpp_source,\n+            functions={'tanh_add': 'Tanh and then sum :D'},\n+            verbose=True)\n+\n+        self.assertEqual(\n+            module.tanh_add.__doc__.split('\\n')[2], 'Tanh and then sum :D')\n+\n+    def test_inline_jit_compile_extension_multiple_sources_and_no_functions(self):\n+        cpp_source1 = '''\n+        at::Tensor sin_add(at::Tensor x, at::Tensor y) {\n+          return x.sin() + y.sin();\n+        }\n+        '''\n+\n+        cpp_source2 = '''\n+        #include <torch/torch.h>\n+        at::Tensor sin_add(at::Tensor x, at::Tensor y);\n+        PYBIND11_MODULE(TORCH_EXTENSION_NAME, m) {\n+          m.def(\"sin_add\", &sin_add, \"sin(x) + sin(y)\");", "path": "test/test_cpp_extensions.py", "position": 74, "original_position": 74, "commit_id": "6a5cda0edd38b23627b86930ca7bf7632a87b69b", "original_commit_id": "6a5cda0edd38b23627b86930ca7bf7632a87b69b", "user": {"login": "goldsborough", "id": 6429851, "node_id": "MDQ6VXNlcjY0Mjk4NTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/6429851?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goldsborough", "html_url": "https://github.com/goldsborough", "followers_url": "https://api.github.com/users/goldsborough/followers", "following_url": "https://api.github.com/users/goldsborough/following{/other_user}", "gists_url": "https://api.github.com/users/goldsborough/gists{/gist_id}", "starred_url": "https://api.github.com/users/goldsborough/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goldsborough/subscriptions", "organizations_url": "https://api.github.com/users/goldsborough/orgs", "repos_url": "https://api.github.com/users/goldsborough/repos", "events_url": "https://api.github.com/users/goldsborough/events{/privacy}", "received_events_url": "https://api.github.com/users/goldsborough/received_events", "type": "User", "site_admin": false}, "body": "Zach and I consciously decided to expose pybind11 instead of some kind of custom `TORCH_EXTENSION` so that users could answer all their questions about bindings by looking at pybind11 docs instead of having to ask us. This makes it clear that we are not doing anything magic here, it's just pybind11. \r\n\r\nYour concerns are very valid but I feel like they would affect 1 out of 1,000,000 users and make the experience less pleasant for the other 999,999? For example, the extension tests, which we point to as examples of using the extension API, also have examples of binding in structs. This is even more advanced usage of pybind11, which we would have to wrap somehow, or disallow.", "created_at": "2018-04-30T05:12:01Z", "updated_at": "2018-11-23T15:43:24Z", "html_url": "https://github.com/pytorch/pytorch/pull/7059#discussion_r184912341", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/7059", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/184912341"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/7059#discussion_r184912341"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/7059"}}, "body_html": "<p>Zach and I consciously decided to expose pybind11 instead of some kind of custom <code>TORCH_EXTENSION</code> so that users could answer all their questions about bindings by looking at pybind11 docs instead of having to ask us. This makes it clear that we are not doing anything magic here, it's just pybind11.</p>\n<p>Your concerns are very valid but I feel like they would affect 1 out of 1,000,000 users and make the experience less pleasant for the other 999,999? For example, the extension tests, which we point to as examples of using the extension API, also have examples of binding in structs. This is even more advanced usage of pybind11, which we would have to wrap somehow, or disallow.</p>", "body_text": "Zach and I consciously decided to expose pybind11 instead of some kind of custom TORCH_EXTENSION so that users could answer all their questions about bindings by looking at pybind11 docs instead of having to ask us. This makes it clear that we are not doing anything magic here, it's just pybind11.\nYour concerns are very valid but I feel like they would affect 1 out of 1,000,000 users and make the experience less pleasant for the other 999,999? For example, the extension tests, which we point to as examples of using the extension API, also have examples of binding in structs. This is even more advanced usage of pybind11, which we would have to wrap somehow, or disallow.", "in_reply_to_id": 184906404}