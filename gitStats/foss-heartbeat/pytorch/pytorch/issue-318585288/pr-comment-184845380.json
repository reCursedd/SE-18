{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/184845380", "pull_request_review_id": 116127172, "id": 184845380, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NDg0NTM4MA==", "diff_hunk": "@@ -461,20 +461,95 @@ def load(name,\n                 extra_cflags=['-O2'],\n                 verbose=True)\n     '''\n+    return _jit_compile(\n+        name,\n+        [sources] if isinstance(sources, str) else sources,\n+        extra_cflags,\n+        extra_cuda_cflags,\n+        extra_ldflags,\n+        extra_include_paths,\n+        build_directory or _get_build_directory(name, verbose),\n+        verbose)\n+\n+\n+def load_inline(name,\n+                cpp_sources,\n+                cuda_sources=None,\n+                extra_cflags=None,\n+                extra_cuda_cflags=None,\n+                extra_ldflags=None,\n+                extra_include_paths=None,\n+                build_directory=None,\n+                verbose=False):\n+    '''\n+    Loads a PyTorch C++ extension just-in-time (JIT) from string sources.\n \n-    verify_ninja_availability()\n-\n-    # Allows sources to be a single path or a list of paths.\n-    if isinstance(sources, str):\n-        sources = [sources]\n+    This function behaves exactly like :func:`load`, but takes its sources as\n+    strings rather than filenames. These strings are stored to files in the\n+    build directory, after which the behavior of :func:`load_inline` is\n+    identical to :func:`load`. Strings passed in ``cpp_sources`` (a string or\n+    list of strings) are stored with a `.cpp` extension, and the string or list\n+    of strings passed in ``cuda_sources`` are stored with a ``.cu`` extension.\n \n-    if build_directory is None:\n-        build_directory = _get_build_directory(name, verbose)\n+    Example:\n+        >>> from torch.utils.cpp_extension import load_inline\n+        >>> source = \\'\\'\\'\n+        #include <torch/torch.h>", "path": "torch/utils/cpp_extension.py", "position": null, "original_position": 44, "commit_id": "6a5cda0edd38b23627b86930ca7bf7632a87b69b", "original_commit_id": "ce8080af299376b0b37c1331a8fdc0ee789e356b", "user": {"login": "fmassa", "id": 9110200, "node_id": "MDQ6VXNlcjkxMTAyMDA=", "avatar_url": "https://avatars2.githubusercontent.com/u/9110200?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fmassa", "html_url": "https://github.com/fmassa", "followers_url": "https://api.github.com/users/fmassa/followers", "following_url": "https://api.github.com/users/fmassa/following{/other_user}", "gists_url": "https://api.github.com/users/fmassa/gists{/gist_id}", "starred_url": "https://api.github.com/users/fmassa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fmassa/subscriptions", "organizations_url": "https://api.github.com/users/fmassa/orgs", "repos_url": "https://api.github.com/users/fmassa/repos", "events_url": "https://api.github.com/users/fmassa/events{/privacy}", "received_events_url": "https://api.github.com/users/fmassa/received_events", "type": "User", "site_admin": false}, "body": "Maybe we could append this by default in the string passed to the user?", "created_at": "2018-04-28T08:29:37Z", "updated_at": "2018-11-23T15:43:23Z", "html_url": "https://github.com/pytorch/pytorch/pull/7059#discussion_r184845380", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/7059", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/184845380"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/7059#discussion_r184845380"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/7059"}}, "body_html": "<p>Maybe we could append this by default in the string passed to the user?</p>", "body_text": "Maybe we could append this by default in the string passed to the user?"}