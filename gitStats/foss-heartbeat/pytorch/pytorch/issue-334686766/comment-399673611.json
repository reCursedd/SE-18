{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/399673611", "html_url": "https://github.com/pytorch/pytorch/issues/8771#issuecomment-399673611", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/8771", "id": 399673611, "node_id": "MDEyOklzc3VlQ29tbWVudDM5OTY3MzYxMQ==", "user": {"login": "fmassa", "id": 9110200, "node_id": "MDQ6VXNlcjkxMTAyMDA=", "avatar_url": "https://avatars2.githubusercontent.com/u/9110200?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fmassa", "html_url": "https://github.com/fmassa", "followers_url": "https://api.github.com/users/fmassa/followers", "following_url": "https://api.github.com/users/fmassa/following{/other_user}", "gists_url": "https://api.github.com/users/fmassa/gists{/gist_id}", "starred_url": "https://api.github.com/users/fmassa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fmassa/subscriptions", "organizations_url": "https://api.github.com/users/fmassa/orgs", "repos_url": "https://api.github.com/users/fmassa/repos", "events_url": "https://api.github.com/users/fmassa/events{/privacy}", "received_events_url": "https://api.github.com/users/fmassa/received_events", "type": "User", "site_admin": false}, "created_at": "2018-06-23T12:23:22Z", "updated_at": "2018-06-23T12:23:22Z", "author_association": "MEMBER", "body_html": "<p>While discussing in <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"335047472\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/8814\" data-hovercard-type=\"issue\" data-hovercard-url=\"/pytorch/pytorch/issues/8814/hovercard\" href=\"https://github.com/pytorch/pytorch/issues/8814\">#8814</a> about not supporting deprecated functions, I thought about this issue.</p>\n<p>We now have two ways of constructing tensors with <code>torch.zeros</code>, <code>torch.rand</code> etc: by either passing a tuple with the sizes (as in numpy, <code>torch.zeros((2, 3))</code>) or by passing the varargs (<code>torch.zeros(2, 3)</code>).</p>\n<p>I am personally used to passing the varargs (less things to type), but we before only had the <code>out</code> keyword argument, and it was rarely used. But now we have <code>dtype</code> / <code>device</code> etc and they are very handy and are going to be present a lot in the code.</p>\n<p>My question is: are we considering the <code>varargs</code> constructor deprecated in favor of the tuple construct? In this case, we might want to not support the varargs.</p>\n<blockquote>\n<p>There should be one-- and preferably only one --obvious way to do it.<br>\nThe Zen of Python</p>\n</blockquote>\n<p>cc <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=4583066\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/apaszke\">@apaszke</a></p>", "body_text": "While discussing in #8814 about not supporting deprecated functions, I thought about this issue.\nWe now have two ways of constructing tensors with torch.zeros, torch.rand etc: by either passing a tuple with the sizes (as in numpy, torch.zeros((2, 3))) or by passing the varargs (torch.zeros(2, 3)).\nI am personally used to passing the varargs (less things to type), but we before only had the out keyword argument, and it was rarely used. But now we have dtype / device etc and they are very handy and are going to be present a lot in the code.\nMy question is: are we considering the varargs constructor deprecated in favor of the tuple construct? In this case, we might want to not support the varargs.\n\nThere should be one-- and preferably only one --obvious way to do it.\nThe Zen of Python\n\ncc @apaszke", "body": "While discussing in https://github.com/pytorch/pytorch/issues/8814 about not supporting deprecated functions, I thought about this issue.\r\n\r\nWe now have two ways of constructing tensors with `torch.zeros`, `torch.rand` etc: by either passing a tuple with the sizes (as in numpy, `torch.zeros((2, 3))`) or by passing the varargs (`torch.zeros(2, 3)`).\r\n\r\nI am personally used to passing the varargs (less things to type), but we before only had the `out` keyword argument, and it was rarely used. But now we have `dtype` / `device` etc and they are very handy and are going to be present a lot in the code.\r\n\r\nMy question is: are we considering the `varargs` constructor deprecated in favor of the tuple construct? In this case, we might want to not support the varargs.\r\n\r\n> There should be one-- and preferably only one --obvious way to do it.\r\n> The Zen of Python\r\n\r\ncc @apaszke "}