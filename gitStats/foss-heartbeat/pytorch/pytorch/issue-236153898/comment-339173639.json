{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/339173639", "html_url": "https://github.com/pytorch/pytorch/issues/1810#issuecomment-339173639", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/1810", "id": 339173639, "node_id": "MDEyOklzc3VlQ29tbWVudDMzOTE3MzYzOQ==", "user": {"login": "0wu", "id": 13663916, "node_id": "MDQ6VXNlcjEzNjYzOTE2", "avatar_url": "https://avatars2.githubusercontent.com/u/13663916?v=4", "gravatar_id": "", "url": "https://api.github.com/users/0wu", "html_url": "https://github.com/0wu", "followers_url": "https://api.github.com/users/0wu/followers", "following_url": "https://api.github.com/users/0wu/following{/other_user}", "gists_url": "https://api.github.com/users/0wu/gists{/gist_id}", "starred_url": "https://api.github.com/users/0wu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/0wu/subscriptions", "organizations_url": "https://api.github.com/users/0wu/orgs", "repos_url": "https://api.github.com/users/0wu/repos", "events_url": "https://api.github.com/users/0wu/events{/privacy}", "received_events_url": "https://api.github.com/users/0wu/received_events", "type": "User", "site_admin": false}, "created_at": "2017-10-25T00:12:02Z", "updated_at": "2017-10-25T00:13:32Z", "author_association": "NONE", "body_html": "<p>Wouldn't it be beneficial to propagate NaNs to help discover problems in code? For example DivisionByZero and Overflows. Also, nans warn deep-net trainers that their learning rate might be too large causing overflows. Having function min/max filtering out NaNs hides the problem which can be misleading.</p>\n<p>We can certainly make a flag to decide if we want to include nans, (like how Matlab did it <a href=\"https://www.mathworks.com/help/matlab/ref/min.html#inputarg_nanflag\" rel=\"nofollow\">https://www.mathworks.com/help/matlab/ref/min.html#inputarg_nanflag</a>)</p>", "body_text": "Wouldn't it be beneficial to propagate NaNs to help discover problems in code? For example DivisionByZero and Overflows. Also, nans warn deep-net trainers that their learning rate might be too large causing overflows. Having function min/max filtering out NaNs hides the problem which can be misleading.\nWe can certainly make a flag to decide if we want to include nans, (like how Matlab did it https://www.mathworks.com/help/matlab/ref/min.html#inputarg_nanflag)", "body": "Wouldn't it be beneficial to propagate NaNs to help discover problems in code? For example DivisionByZero and Overflows. Also, nans warn deep-net trainers that their learning rate might be too large causing overflows. Having function min/max filtering out NaNs hides the problem which can be misleading.\r\n\r\nWe can certainly make a flag to decide if we want to include nans, (like how Matlab did it https://www.mathworks.com/help/matlab/ref/min.html#inputarg_nanflag)\r\n\r\n"}