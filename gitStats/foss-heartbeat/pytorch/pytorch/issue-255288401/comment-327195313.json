{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/327195313", "html_url": "https://github.com/pytorch/pytorch/issues/2628#issuecomment-327195313", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/2628", "id": 327195313, "node_id": "MDEyOklzc3VlQ29tbWVudDMyNzE5NTMxMw==", "user": {"login": "fmassa", "id": 9110200, "node_id": "MDQ6VXNlcjkxMTAyMDA=", "avatar_url": "https://avatars2.githubusercontent.com/u/9110200?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fmassa", "html_url": "https://github.com/fmassa", "followers_url": "https://api.github.com/users/fmassa/followers", "following_url": "https://api.github.com/users/fmassa/following{/other_user}", "gists_url": "https://api.github.com/users/fmassa/gists{/gist_id}", "starred_url": "https://api.github.com/users/fmassa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fmassa/subscriptions", "organizations_url": "https://api.github.com/users/fmassa/orgs", "repos_url": "https://api.github.com/users/fmassa/repos", "events_url": "https://api.github.com/users/fmassa/events{/privacy}", "received_events_url": "https://api.github.com/users/fmassa/received_events", "type": "User", "site_admin": false}, "created_at": "2017-09-05T14:35:23Z", "updated_at": "2017-09-05T14:35:23Z", "author_association": "MEMBER", "body_html": "<p>I think it should be fine because the output of <code>Linear</code> is 2d, while <code>Conv1d</code> is 3d, so those cases are currently handled in both <a href=\"https://github.com/pytorch/pytorch/blob/master/torch/csrc/cudnn/BatchNorm.cpp#L68-L75\"><code>cudnn</code></a> as well as in THNN (because it always take the 2nd dimension for the channel normalization) I think? The fix from <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"199613446\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/423\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/pytorch/pytorch/pull/423/hovercard\" href=\"https://github.com/pytorch/pytorch/pull/423\">#423</a> to handle <code>Conv1d</code> didn't add anything special to the backends, just an assertion on the dimension.</p>", "body_text": "I think it should be fine because the output of Linear is 2d, while Conv1d is 3d, so those cases are currently handled in both cudnn as well as in THNN (because it always take the 2nd dimension for the channel normalization) I think? The fix from #423 to handle Conv1d didn't add anything special to the backends, just an assertion on the dimension.", "body": "I think it should be fine because the output of `Linear` is 2d, while `Conv1d` is 3d, so those cases are currently handled in both [`cudnn`](https://github.com/pytorch/pytorch/blob/master/torch/csrc/cudnn/BatchNorm.cpp#L68-L75) as well as in THNN (because it always take the 2nd dimension for the channel normalization) I think? The fix from https://github.com/pytorch/pytorch/pull/423 to handle `Conv1d` didn't add anything special to the backends, just an assertion on the dimension."}