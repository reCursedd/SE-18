{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/409040618", "html_url": "https://github.com/pytorch/pytorch/issues/9674#issuecomment-409040618", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/9674", "id": 409040618, "node_id": "MDEyOklzc3VlQ29tbWVudDQwOTA0MDYxOA==", "user": {"login": "li-roy", "id": 8813817, "node_id": "MDQ6VXNlcjg4MTM4MTc=", "avatar_url": "https://avatars0.githubusercontent.com/u/8813817?v=4", "gravatar_id": "", "url": "https://api.github.com/users/li-roy", "html_url": "https://github.com/li-roy", "followers_url": "https://api.github.com/users/li-roy/followers", "following_url": "https://api.github.com/users/li-roy/following{/other_user}", "gists_url": "https://api.github.com/users/li-roy/gists{/gist_id}", "starred_url": "https://api.github.com/users/li-roy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/li-roy/subscriptions", "organizations_url": "https://api.github.com/users/li-roy/orgs", "repos_url": "https://api.github.com/users/li-roy/repos", "events_url": "https://api.github.com/users/li-roy/events{/privacy}", "received_events_url": "https://api.github.com/users/li-roy/received_events", "type": "User", "site_admin": false}, "created_at": "2018-07-30T23:06:01Z", "updated_at": "2018-07-30T23:06:01Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=5545022\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/jspark1105\">@jspark1105</a> We don't have any good documentation, but our implementation of sparse tensor allows values to be a tensor, rather than just a numerical value. For example, a (2, 3, 4, 5) sparse tensor with 2 sparse dims and 2 dense dims treats indices the exact same as a (2, 3) sparse tensor. The only difference is that each of the values will be a (4, 5) tensor rather than a scalar.</p>\n<p>Our tensor representation also allows multiple values to correspond to the same location. When a tensor is coalesced, we guarantee that the indices will be sorted, and that there will be no duplicate indices.</p>", "body_text": "@jspark1105 We don't have any good documentation, but our implementation of sparse tensor allows values to be a tensor, rather than just a numerical value. For example, a (2, 3, 4, 5) sparse tensor with 2 sparse dims and 2 dense dims treats indices the exact same as a (2, 3) sparse tensor. The only difference is that each of the values will be a (4, 5) tensor rather than a scalar.\nOur tensor representation also allows multiple values to correspond to the same location. When a tensor is coalesced, we guarantee that the indices will be sorted, and that there will be no duplicate indices.", "body": "@jspark1105 We don't have any good documentation, but our implementation of sparse tensor allows values to be a tensor, rather than just a numerical value. For example, a (2, 3, 4, 5) sparse tensor with 2 sparse dims and 2 dense dims treats indices the exact same as a (2, 3) sparse tensor. The only difference is that each of the values will be a (4, 5) tensor rather than a scalar.\r\n\r\nOur tensor representation also allows multiple values to correspond to the same location. When a tensor is coalesced, we guarantee that the indices will be sorted, and that there will be no duplicate indices."}