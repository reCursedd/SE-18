{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/407232533", "html_url": "https://github.com/pytorch/pytorch/issues/9674#issuecomment-407232533", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/9674", "id": 407232533, "node_id": "MDEyOklzc3VlQ29tbWVudDQwNzIzMjUzMw==", "user": {"login": "weiyangfb", "id": 38509346, "node_id": "MDQ6VXNlcjM4NTA5MzQ2", "avatar_url": "https://avatars1.githubusercontent.com/u/38509346?v=4", "gravatar_id": "", "url": "https://api.github.com/users/weiyangfb", "html_url": "https://github.com/weiyangfb", "followers_url": "https://api.github.com/users/weiyangfb/followers", "following_url": "https://api.github.com/users/weiyangfb/following{/other_user}", "gists_url": "https://api.github.com/users/weiyangfb/gists{/gist_id}", "starred_url": "https://api.github.com/users/weiyangfb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/weiyangfb/subscriptions", "organizations_url": "https://api.github.com/users/weiyangfb/orgs", "repos_url": "https://api.github.com/users/weiyangfb/repos", "events_url": "https://api.github.com/users/weiyangfb/events{/privacy}", "received_events_url": "https://api.github.com/users/weiyangfb/received_events", "type": "User", "site_admin": false}, "created_at": "2018-07-23T23:30:49Z", "updated_at": "2018-07-23T23:32:58Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=5674597\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/SsnL\">@SsnL</a> For <code>add(Sparse, Sparse)</code>, I guess we can hide the internal representation from the user. But yes, users have to be more careful while working on <code>_values</code> directly.</p>\n<p>So I recalled some of the previous discussion with <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=8813817\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/li-roy\">@li-roy</a>. With the <code>Constant</code> representation, it might be confused since <code>nnz</code> is actually <code>nnc</code>, and zeros in sparse tensor will take place in <code>_values</code>. But I think it is fine since we already allow zeros to appear in <code>_values</code> when users create sparse tensors?</p>\n<p>EDIT: For <code>add(Sparse, Sparse)</code>, users have to understand the underlying representation, but we can implement it for the users.</p>", "body_text": "@SsnL For add(Sparse, Sparse), I guess we can hide the internal representation from the user. But yes, users have to be more careful while working on _values directly.\nSo I recalled some of the previous discussion with @li-roy. With the Constant representation, it might be confused since nnz is actually nnc, and zeros in sparse tensor will take place in _values. But I think it is fine since we already allow zeros to appear in _values when users create sparse tensors?\nEDIT: For add(Sparse, Sparse), users have to understand the underlying representation, but we can implement it for the users.", "body": "@SsnL For `add(Sparse, Sparse)`, I guess we can hide the internal representation from the user. But yes, users have to be more careful while working on `_values` directly. \r\n\r\nSo I recalled some of the previous discussion with @li-roy. With the `Constant` representation, it might be confused since `nnz` is actually `nnc`, and zeros in sparse tensor will take place in `_values`. But I think it is fine since we already allow zeros to appear in `_values` when users create sparse tensors?\r\n\r\nEDIT: For `add(Sparse, Sparse)`, users have to understand the underlying representation, but we can implement it for the users."}