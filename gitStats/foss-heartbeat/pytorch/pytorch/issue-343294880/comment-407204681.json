{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/407204681", "html_url": "https://github.com/pytorch/pytorch/issues/9674#issuecomment-407204681", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/9674", "id": 407204681, "node_id": "MDEyOklzc3VlQ29tbWVudDQwNzIwNDY4MQ==", "user": {"login": "SsnL", "id": 5674597, "node_id": "MDQ6VXNlcjU2NzQ1OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5674597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SsnL", "html_url": "https://github.com/SsnL", "followers_url": "https://api.github.com/users/SsnL/followers", "following_url": "https://api.github.com/users/SsnL/following{/other_user}", "gists_url": "https://api.github.com/users/SsnL/gists{/gist_id}", "starred_url": "https://api.github.com/users/SsnL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SsnL/subscriptions", "organizations_url": "https://api.github.com/users/SsnL/orgs", "repos_url": "https://api.github.com/users/SsnL/repos", "events_url": "https://api.github.com/users/SsnL/events{/privacy}", "received_events_url": "https://api.github.com/users/SsnL/received_events", "type": "User", "site_admin": false}, "created_at": "2018-07-23T21:19:30Z", "updated_at": "2018-07-23T21:19:30Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=38509346\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/weiyangfb\">@weiyangfb</a> :) To avoid calling specific ops on the scalar (and if we want to be even crazier), we can even do this: augment the <code>_values</code> tensor to add an extra slice in dim0 so its shape becomes <code>(nnz + 1, ....)</code> with the first slice being the \"constant\" values. Then the whatever pointwise function calls can be done on this entire tensor. And we can give people <code>_values[1:]</code> when they require values.</p>\n<p>So a sparse tensor of shape <code>[3 x 2 x 2]</code> with</p>\n<pre><code>nnz = 2\nindices [2 x 2]: [[0, 1], [2, 0]]\nvalues [2+1 x 2]: [[-1, 0] /* constants */, [0.1, 0.2], [0.2, 0.3]]\n</code></pre>\n<p>means a dense tensor of</p>\n<pre><code>[\n  [[ -1,   0]\n   [0.1, 0.2]],\n  [[ -1,   0]\n   [ -1,   0]],\n  [[0.2, 0.3]\n   [ -1,   0]],\n]\n</code></pre>", "body_text": "@weiyangfb :) To avoid calling specific ops on the scalar (and if we want to be even crazier), we can even do this: augment the _values tensor to add an extra slice in dim0 so its shape becomes (nnz + 1, ....) with the first slice being the \"constant\" values. Then the whatever pointwise function calls can be done on this entire tensor. And we can give people _values[1:] when they require values.\nSo a sparse tensor of shape [3 x 2 x 2] with\nnnz = 2\nindices [2 x 2]: [[0, 1], [2, 0]]\nvalues [2+1 x 2]: [[-1, 0] /* constants */, [0.1, 0.2], [0.2, 0.3]]\n\nmeans a dense tensor of\n[\n  [[ -1,   0]\n   [0.1, 0.2]],\n  [[ -1,   0]\n   [ -1,   0]],\n  [[0.2, 0.3]\n   [ -1,   0]],\n]", "body": "@weiyangfb :) To avoid calling specific ops on the scalar (and if we want to be even crazier), we can even do this: augment the `_values` tensor to add an extra slice in dim0 so its shape becomes `(nnz + 1, ....)` with the first slice being the \"constant\" values. Then the whatever pointwise function calls can be done on this entire tensor. And we can give people `_values[1:]` when they require values.\r\n\r\nSo a sparse tensor of shape `[3 x 2 x 2]` with \r\n```\r\nnnz = 2\r\nindices [2 x 2]: [[0, 1], [2, 0]]\r\nvalues [2+1 x 2]: [[-1, 0] /* constants */, [0.1, 0.2], [0.2, 0.3]]\r\n```\r\nmeans a dense tensor of\r\n```\r\n[\r\n  [[ -1,   0]\r\n   [0.1, 0.2]],\r\n  [[ -1,   0]\r\n   [ -1,   0]],\r\n  [[0.2, 0.3]\r\n   [ -1,   0]],\r\n]\r\n```"}