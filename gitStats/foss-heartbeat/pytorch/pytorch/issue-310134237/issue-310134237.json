{"url": "https://api.github.com/repos/pytorch/pytorch/issues/6145", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/6145/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/6145/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/6145/events", "html_url": "https://github.com/pytorch/pytorch/pull/6145", "id": 310134237, "node_id": "MDExOlB1bGxSZXF1ZXN0MTc4NjA5NTAy", "number": 6145, "title": "Introduce torch.layout and split layout from dtypes.", "user": {"login": "gchanan", "id": 3768583, "node_id": "MDQ6VXNlcjM3Njg1ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3768583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gchanan", "html_url": "https://github.com/gchanan", "followers_url": "https://api.github.com/users/gchanan/followers", "following_url": "https://api.github.com/users/gchanan/following{/other_user}", "gists_url": "https://api.github.com/users/gchanan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gchanan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gchanan/subscriptions", "organizations_url": "https://api.github.com/users/gchanan/orgs", "repos_url": "https://api.github.com/users/gchanan/repos", "events_url": "https://api.github.com/users/gchanan/events{/privacy}", "received_events_url": "https://api.github.com/users/gchanan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-03-30T18:21:30Z", "updated_at": "2018-11-23T15:41:29Z", "closed_at": "2018-04-02T18:07:50Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/6145", "html_url": "https://github.com/pytorch/pytorch/pull/6145", "diff_url": "https://github.com/pytorch/pytorch/pull/6145.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/6145.patch"}, "body_html": "<p>Tensors (and tensor types) now have a 'layout' attribute that returns either 'torch.strided' or 'torch.sparse_coo'.</p>\n<p>Previously, dtypes were 1-to-1 with ATen types/PyTensorTypes; the impetus behind this decision was to make things easy in the common case (i.e. specifying a type in a factory function).  But this doesn't really follow for sparity, which isn't a common case.</p>\n<p>It also doesn't properly represent the concept or a dtype, which in numpy are proper scalar types (i.e. roughly the type returned from indexing the last dimension of an n-d array).  But this should be the same whether or not the tensor is represented via strides, sparsity, etc.</p>\n<p>This is accomplished by:</p>\n<ol>\n<li>having the dtype of tensor return the (device-type, scalar-type) combination, i.e. torch.cuda.float32, so both torch.cuda.FloatTensor and torch.cuda.sparse.FloatTensor have the same dtype</li>\n<li>Adding a 'layout' parameter to python functions that previously just took a dtype, where the combination of (dtype, layout) maps to an ATen type that is used for dispatch.</li>\n</ol>\n<p>There is, I think, further discussion warranted on whether we should split out cuda or not from dtypes.</p>", "body_text": "Tensors (and tensor types) now have a 'layout' attribute that returns either 'torch.strided' or 'torch.sparse_coo'.\nPreviously, dtypes were 1-to-1 with ATen types/PyTensorTypes; the impetus behind this decision was to make things easy in the common case (i.e. specifying a type in a factory function).  But this doesn't really follow for sparity, which isn't a common case.\nIt also doesn't properly represent the concept or a dtype, which in numpy are proper scalar types (i.e. roughly the type returned from indexing the last dimension of an n-d array).  But this should be the same whether or not the tensor is represented via strides, sparsity, etc.\nThis is accomplished by:\n\nhaving the dtype of tensor return the (device-type, scalar-type) combination, i.e. torch.cuda.float32, so both torch.cuda.FloatTensor and torch.cuda.sparse.FloatTensor have the same dtype\nAdding a 'layout' parameter to python functions that previously just took a dtype, where the combination of (dtype, layout) maps to an ATen type that is used for dispatch.\n\nThere is, I think, further discussion warranted on whether we should split out cuda or not from dtypes.", "body": "Tensors (and tensor types) now have a 'layout' attribute that returns either 'torch.strided' or 'torch.sparse_coo'.\r\n\r\nPreviously, dtypes were 1-to-1 with ATen types/PyTensorTypes; the impetus behind this decision was to make things easy in the common case (i.e. specifying a type in a factory function).  But this doesn't really follow for sparity, which isn't a common case.\r\n\r\nIt also doesn't properly represent the concept or a dtype, which in numpy are proper scalar types (i.e. roughly the type returned from indexing the last dimension of an n-d array).  But this should be the same whether or not the tensor is represented via strides, sparsity, etc.\r\n\r\nThis is accomplished by:\r\n1) having the dtype of tensor return the (device-type, scalar-type) combination, i.e. torch.cuda.float32, so both torch.cuda.FloatTensor and torch.cuda.sparse.FloatTensor have the same dtype\r\n2) Adding a 'layout' parameter to python functions that previously just took a dtype, where the combination of (dtype, layout) maps to an ATen type that is used for dispatch.\r\n\r\nThere is, I think, further discussion warranted on whether we should split out cuda or not from dtypes."}