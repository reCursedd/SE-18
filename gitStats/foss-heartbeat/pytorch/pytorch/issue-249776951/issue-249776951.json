{"url": "https://api.github.com/repos/pytorch/pytorch/issues/2391", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/2391/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/2391/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/2391/events", "html_url": "https://github.com/pytorch/pytorch/issues/2391", "id": 249776951, "node_id": "MDU6SXNzdWUyNDk3NzY5NTE=", "number": 2391, "title": "reductions across dimension for half tensors don't accumulate in fp32", "user": {"login": "ngimel", "id": 15841449, "node_id": "MDQ6VXNlcjE1ODQxNDQ5", "avatar_url": "https://avatars3.githubusercontent.com/u/15841449?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ngimel", "html_url": "https://github.com/ngimel", "followers_url": "https://api.github.com/users/ngimel/followers", "following_url": "https://api.github.com/users/ngimel/following{/other_user}", "gists_url": "https://api.github.com/users/ngimel/gists{/gist_id}", "starred_url": "https://api.github.com/users/ngimel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ngimel/subscriptions", "organizations_url": "https://api.github.com/users/ngimel/orgs", "repos_url": "https://api.github.com/users/ngimel/repos", "events_url": "https://api.github.com/users/ngimel/events{/privacy}", "received_events_url": "https://api.github.com/users/ngimel/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-08-12T00:41:03Z", "updated_at": "2017-08-15T07:02:53Z", "closed_at": "2017-08-15T07:02:53Z", "author_association": "CONTRIBUTOR", "body_html": "<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> torch\na<span class=\"pl-k\">=</span>torch.zeros(<span class=\"pl-c1\">8</span>).cuda().half()\na<span class=\"pl-k\">=</span>a.view([<span class=\"pl-c1\">2</span>,<span class=\"pl-c1\">4</span>])\na[<span class=\"pl-c1\">0</span>].fill_(<span class=\"pl-c1\">32000</span>)\na[<span class=\"pl-c1\">1</span>].fill_(<span class=\"pl-k\">-</span><span class=\"pl-c1\">32000</span>)\na<span class=\"pl-k\">=</span>a.view([<span class=\"pl-c1\">8</span>])\nb<span class=\"pl-k\">=</span>a.sum()\n<span class=\"pl-c1\">print</span>(b) <span class=\"pl-c\"><span class=\"pl-c\">#</span> calls kernelReduceAll with proper fp32 accumulation, outputs 0</span>\nb<span class=\"pl-k\">=</span>a.sum(<span class=\"pl-c1\">0</span>)\n<span class=\"pl-c1\">print</span>(b) <span class=\"pl-c\"><span class=\"pl-c\">#</span> calls kernelReduceContigDim, all intermediate reductions are truncated to fp16, overflows and outputs inf</span></pre></div>", "body_text": "import torch\na=torch.zeros(8).cuda().half()\na=a.view([2,4])\na[0].fill_(32000)\na[1].fill_(-32000)\na=a.view([8])\nb=a.sum()\nprint(b) # calls kernelReduceAll with proper fp32 accumulation, outputs 0\nb=a.sum(0)\nprint(b) # calls kernelReduceContigDim, all intermediate reductions are truncated to fp16, overflows and outputs inf", "body": "```.py\r\nimport torch\r\na=torch.zeros(8).cuda().half()\r\na=a.view([2,4])\r\na[0].fill_(32000)\r\na[1].fill_(-32000)\r\na=a.view([8])\r\nb=a.sum()\r\nprint(b) # calls kernelReduceAll with proper fp32 accumulation, outputs 0\r\nb=a.sum(0)\r\nprint(b) # calls kernelReduceContigDim, all intermediate reductions are truncated to fp16, overflows and outputs inf\r\n```"}