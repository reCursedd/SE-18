{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/290941702", "html_url": "https://github.com/pytorch/pytorch/issues/1164#issuecomment-290941702", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/1164", "id": 290941702, "node_id": "MDEyOklzc3VlQ29tbWVudDI5MDk0MTcwMg==", "user": {"login": "bunelr", "id": 3354626, "node_id": "MDQ6VXNlcjMzNTQ2MjY=", "avatar_url": "https://avatars1.githubusercontent.com/u/3354626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bunelr", "html_url": "https://github.com/bunelr", "followers_url": "https://api.github.com/users/bunelr/followers", "following_url": "https://api.github.com/users/bunelr/following{/other_user}", "gists_url": "https://api.github.com/users/bunelr/gists{/gist_id}", "starred_url": "https://api.github.com/users/bunelr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bunelr/subscriptions", "organizations_url": "https://api.github.com/users/bunelr/orgs", "repos_url": "https://api.github.com/users/bunelr/repos", "events_url": "https://api.github.com/users/bunelr/events{/privacy}", "received_events_url": "https://api.github.com/users/bunelr/received_events", "type": "User", "site_admin": false}, "created_at": "2017-04-01T19:26:49Z", "updated_at": "2017-04-01T19:26:49Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Identified the problem, it's lying <a href=\"https://github.com/pytorch/pytorch/blob/master/torch/lib/TH/generic/THTensorMath.c#L726\">here</a></p>\n<p>To compute the remainder like this, you would want to have the floor of the result of the division between <code>*t_data</code> and <code>value</code>. However, C integer division works on a \"truncation towards zero basis\".<br>\nWhat this means is that the the current implementation is going to be incorrect when:</p>\n<ul>\n<li><code>*t_data</code> and <code>value</code> are of a different sign</li>\n<li>the result of their division is not an integer.</li>\n</ul>\n<p>I'm looking at what is the cleanest way to fix this without adding unnecessary computation.</p>", "body_text": "Identified the problem, it's lying here\nTo compute the remainder like this, you would want to have the floor of the result of the division between *t_data and value. However, C integer division works on a \"truncation towards zero basis\".\nWhat this means is that the the current implementation is going to be incorrect when:\n\n*t_data and value are of a different sign\nthe result of their division is not an integer.\n\nI'm looking at what is the cleanest way to fix this without adding unnecessary computation.", "body": "Identified the problem, it's lying [here](https://github.com/pytorch/pytorch/blob/master/torch/lib/TH/generic/THTensorMath.c#L726)\r\n\r\nTo compute the remainder like this, you would want to have the floor of the result of the division between `*t_data` and `value`. However, C integer division works on a \"truncation towards zero basis\".\r\nWhat this means is that the the current implementation is going to be incorrect when:\r\n- `*t_data` and `value` are of a different sign\r\n- the result of their division is not an integer.\r\n\r\nI'm looking at what is the cleanest way to fix this without adding unnecessary computation."}