{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/163950831", "pull_request_review_id": 91641044, "id": 163950831, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2Mzk1MDgzMQ==", "diff_hunk": "@@ -34,38 +45,227 @@ static std::vector<Value*> gradientForNode(Node* node, ArrayRef<Value*> grad_val\n   return fmap(sym_grads, [](const SymbolicVariable &v) { return v.value(); });\n }\n \n-void differentiate(std::shared_ptr<Graph>& graph) {\n-  JIT_ASSERT(graph->stage() == 0);\n-  graph->advanceStage();\n+static value_map addReverseInline(Graph& graph, Gradient& grad_desc) {\n+  JIT_ASSERT(graph.stage() == 0);\n+  graph.advanceStage();\n+\n+  value_map grad_map; // x -> dx mapping\n+  const auto get_grad = [&](Value* v) { return grad_map.at(v); };\n \n-  std::unordered_map<Value*, Value*> grad_map; // x -> dx mapping\n-  const auto get_grad = [&](Value* v) { return grad_map[v]; };\n-  for (auto output : graph->outputs())\n-    grad_map[output] = graph->addInput()->setType(output->typeOption());\n+  auto outputs = graph.outputs();\n+  for (std::size_t i = 0, num_outputs = outputs.size(); i < num_outputs; ++i) {\n+    Value * output = outputs[i];\n+    Value * output_grad = graph.addInput()->setType(output->typeOption());\n+    if (grad_map.count(output) > 0) {\n+      // Append to the end of the graph\n+      grad_map[output] = addAndPutAfter(grad_map[output], output_grad, *graph.rbegin());\n+    } else {\n+      grad_map[output] = output_grad;\n+    }\n+    grad_desc.df_input_vjps.push_back(i);\n+  }\n \n-  for (auto it = graph->rbegin(), end = graph->rend(); it != end; ++it) {\n+  for (auto it = graph.rbegin(), end = graph.rend(); it != end; ++it) {\n     Node *node = *it;\n     auto inputs = node->inputs();\n     value_list grad_inputs = gradientForNode(node, fmap(node->outputs(), get_grad));\n     JIT_ASSERT(grad_inputs.size() == node->inputs().size());\n     for (std::size_t i = 0, num_inputs = grad_inputs.size(); i < num_inputs; ++i) {\n       if (Value * prev_grad = grad_map[inputs[i]]) {\n-        Node *new_grad_node = graph->create(kadd, {prev_grad, grad_inputs[i]})\n-                                   ->t_(kalpha, at::Scalar(1).toTensor());\n-        new_grad_node->insertAfter(grad_inputs[i]->node());\n-        Value *new_grad = new_grad_node->output();\n-        new_grad->setType(prev_grad->typeOption());\n+        Value * new_grad = addAndPutAfter(prev_grad, grad_inputs[i], grad_inputs[i]->node());\n         grad_map[inputs[i]] = new_grad;\n       } else {\n         grad_map[inputs[i]] = grad_inputs[i];\n       }\n     }\n   }\n \n-  for (auto input : graph->inputs()) {\n+  auto inputs = graph.inputs();\n+  for (std::size_t i = 0, num_inputs = inputs.size(); i < num_inputs; ++i) {\n+    Value * input = inputs[i];\n     if (input->stage() > 0) break;\n-    graph->registerOutput(grad_map.at(input));\n+    graph.registerOutput(grad_map.at(input));\n+    grad_desc.df_output_vjps.push_back(i);\n+  }\n+\n+  return grad_map;\n+}\n+\n+static std::shared_ptr<Graph> splitOffStage(\n+        Graph& graph,\n+        std::size_t stage,\n+        ArrayRef<Value*> inputs,\n+        ArrayRef<Value*> outputs) {\n+  auto graph_clone = std::make_shared<Graph>();\n+\n+  value_map val_map; // values in graph -> values in graph_clone\n+  const auto lookup_val = [&](Value *v) { return val_map.at(v); };\n+\n+  for (Value *input : inputs)\n+    val_map[input] = graph_clone->addInput()->setType(input->typeOption());\n+\n+  for (Node *node : graph.nodes()) {\n+    if (node->stage() != stage) continue;\n+    Node *node_clone = graph_clone->createClone(node, lookup_val);\n+    for (std::size_t i = 0, num_outputs = node_clone->outputs().size(); i < num_outputs; ++i)\n+      val_map[node->outputs()[i]] = node_clone->outputs()[i];\n+    graph_clone->appendNode(node_clone);\n   }\n+\n+  for (Value *output : outputs) {\n+    JIT_ASSERT(output->stage() == stage);\n+    graph_clone->registerOutput(val_map.at(output));\n+  }\n+\n+  return graph_clone;\n+}\n+\n+void lambdaLiftReverse(Graph& graph, value_map& grad_map, Gradient& grad_desc) {\n+  static const auto is_stage_0 = [](Value *v) { return v->stage() == 0; };\n+  static const auto is_stage_1 = [](Value *v) { return v->stage() == 1; };\n+  // NOTE: in the comments inside this function first stage is stage 0\n+  JIT_ASSERT(graph.stage() == 1);\n+\n+  // --------------------------------------------------------------------------\n+  // 1. Find values of stage 0 that need to be captured.\n+  // --------------------------------------------------------------------------\n+  // First, we need to find all values that are produced in the first stage,\n+  // and used in the second one. They will need to be added as inputs of the reverse\n+  // graph, and some of them may also need to be appended as outputs of the primal graph.\n+  value_set reverse_captures_set;\n+  value_list reverse_captures; // Invariant: topo sorted\n+  auto check_uses = [&](Value *v) {\n+    for (auto use : v->uses()) {\n+      if (use.user->stage() != 1) continue;\n+      if (/* bool unseen = */ reverse_captures_set.emplace(v).second) {\n+        reverse_captures.push_back(v);\n+      }\n+    }\n+  };\n+  for (Value * input : graph.inputs()) {\n+    if (input->stage() != 0) break;\n+    check_uses(input);\n+  }\n+  for (Node * node : graph.nodes()) {\n+    if (node->stage() != 0) break;\n+    for (Value * output : node->outputs())\n+      check_uses(output);\n+  }\n+\n+  // --------------------------------------------------------------------------\n+  // 2. Prepare input/outputs lists for both graphs.\n+  // --------------------------------------------------------------------------\n+  // It's simple to construct primal_inputs/reverse_outputs,\n+  // but primal_outputs/reverse_inputs are much more subtle.\n+  // Here's a summary of how they are supposed to look like:\n+  //\n+  // Primal outputs:\n+  //   [original outputs], [temporaries]\n+  //\n+  // Reverse inputs:\n+  //   [captured outputs#], [temporaries], [captured inputs],\n+  //   [output vjps (aka grad_outputs)], [temporary vjps]\n+  //\n+  // # this is an arbitrary **deduplicated** subset of original outputs,\n+  //   that maintains the original ordering.\n+\n+  // -- Simple cases -----------------------------------------------------------\n+  value_list primal_inputs   = filter(graph.inputs(),  is_stage_0);\n+  value_list reverse_outputs = filter(graph.outputs(), is_stage_1);\n+\n+  // -- Construct primal_outputs, df_input_captures, f_real_outputs ----\n+  value_list primal_outputs  = filter(graph.outputs(), is_stage_0);\n+  grad_desc.f_real_outputs = primal_outputs.size();\n+\n+  std::unordered_map<Value*, std::size_t> orig_primal_outputs_idx;\n+  std::unordered_map<Value*, std::size_t> orig_primal_inputs_idx;\n+  // NOTE: we use emplace to avoid replacing an existing index if an output is repeated\n+  for (std::size_t i = 0, num_outputs = primal_outputs.size(); i < num_outputs; ++i)\n+    orig_primal_outputs_idx.emplace(primal_outputs[i], i);\n+  for (std::size_t i = 0, num_inputs = primal_inputs.size(); i < num_inputs; ++i)\n+    orig_primal_inputs_idx[primal_inputs[i]] = i;\n+\n+  for (Value * capture_val : reverse_captures) { // NB: reverse_captures are already deduplicated\n+    // If it's already an output we don't have to add anything,\n+    // but register the fact that it needs to be captured.\n+    if (orig_primal_outputs_idx.count(capture_val) > 0) {\n+      grad_desc.df_input_captures.emplace_back(Capture::Kind::Output,\n+                                               orig_primal_outputs_idx[capture_val]);\n+    // If it's an input, we could add it as an output but in fact it's\n+    // more efficient to use a special kind of capture.\n+    } else if (orig_primal_inputs_idx.count(capture_val) > 0) {\n+      grad_desc.df_input_captures.emplace_back(Capture::Kind::Input,\n+                                               orig_primal_inputs_idx.at(capture_val));\n+    // Otherwise it's just a regular intermediate value that we need to add as an output\n+    } else {\n+      primal_outputs.emplace_back(capture_val);\n+      grad_desc.df_input_captures.emplace_back(Capture::Kind::Output,\n+                                               primal_outputs.size() - 1);\n+    }\n+  }\n+\n+  // -- Add VJPs for temporaries, adjust df_input_vjps -------------------------\n+  // NB [possible optimization]: use the newly added vjp input as soon as the first\n+  // vjp for that value is generated, to reduce the lifespan of this input\n+  // (currently we add it to the final vjp after all adds).\n+  JIT_ASSERT(graph.stage() == 1); // We will be adding inputs to stage 1\n+  for (std::size_t i = grad_desc.f_real_outputs; i < primal_outputs.size(); ++i) {\n+    Value * tmp = primal_outputs.at(i);\n+    Value * tmp_vjp_in = graph.addInput()->setType(tmp->typeOption());\n+    if (grad_map.count(tmp) == 0) continue; // This gradient wasn't even used.\n+    Value * tmp_vjp_prev = grad_map.at(tmp);\n+    // This is quite weird because we can't first make a sum and then replace all uses,", "path": "torch/csrc/jit/autodiff.cpp", "position": null, "original_position": 208, "commit_id": "a41b11143e2fad09918cf66d0a60216e9ab83f5a", "original_commit_id": "92ae73f02b10180b6d52538f1409be67cb6cb0a4", "user": {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, "body": "replace all uses [otherwise we'd replace the sum we are currently trying to add]", "created_at": "2018-01-25T19:54:34Z", "updated_at": "2018-11-23T15:38:36Z", "html_url": "https://github.com/pytorch/pytorch/pull/4759#discussion_r163950831", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4759", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/163950831"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/4759#discussion_r163950831"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4759"}}, "body_html": "<p>replace all uses [otherwise we'd replace the sum we are currently trying to add]</p>", "body_text": "replace all uses [otherwise we'd replace the sum we are currently trying to add]"}