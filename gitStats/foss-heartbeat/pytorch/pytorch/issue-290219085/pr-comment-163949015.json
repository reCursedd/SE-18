{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/163949015", "pull_request_review_id": 91641044, "id": 163949015, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2Mzk0OTAxNQ==", "diff_hunk": "@@ -34,38 +45,227 @@ static std::vector<Value*> gradientForNode(Node* node, ArrayRef<Value*> grad_val\n   return fmap(sym_grads, [](const SymbolicVariable &v) { return v.value(); });\n }\n \n-void differentiate(std::shared_ptr<Graph>& graph) {\n-  JIT_ASSERT(graph->stage() == 0);\n-  graph->advanceStage();\n+static value_map addReverseInline(Graph& graph, Gradient& grad_desc) {\n+  JIT_ASSERT(graph.stage() == 0);\n+  graph.advanceStage();\n+\n+  value_map grad_map; // x -> dx mapping\n+  const auto get_grad = [&](Value* v) { return grad_map.at(v); };\n \n-  std::unordered_map<Value*, Value*> grad_map; // x -> dx mapping\n-  const auto get_grad = [&](Value* v) { return grad_map[v]; };\n-  for (auto output : graph->outputs())\n-    grad_map[output] = graph->addInput()->setType(output->typeOption());\n+  auto outputs = graph.outputs();\n+  for (std::size_t i = 0, num_outputs = outputs.size(); i < num_outputs; ++i) {\n+    Value * output = outputs[i];\n+    Value * output_grad = graph.addInput()->setType(output->typeOption());\n+    if (grad_map.count(output) > 0) {\n+      // Append to the end of the graph\n+      grad_map[output] = addAndPutAfter(grad_map[output], output_grad, *graph.rbegin());\n+    } else {\n+      grad_map[output] = output_grad;\n+    }\n+    grad_desc.df_input_vjps.push_back(i);\n+  }\n \n-  for (auto it = graph->rbegin(), end = graph->rend(); it != end; ++it) {\n+  for (auto it = graph.rbegin(), end = graph.rend(); it != end; ++it) {\n     Node *node = *it;\n     auto inputs = node->inputs();\n     value_list grad_inputs = gradientForNode(node, fmap(node->outputs(), get_grad));\n     JIT_ASSERT(grad_inputs.size() == node->inputs().size());\n     for (std::size_t i = 0, num_inputs = grad_inputs.size(); i < num_inputs; ++i) {\n       if (Value * prev_grad = grad_map[inputs[i]]) {\n-        Node *new_grad_node = graph->create(kadd, {prev_grad, grad_inputs[i]})\n-                                   ->t_(kalpha, at::Scalar(1).toTensor());\n-        new_grad_node->insertAfter(grad_inputs[i]->node());\n-        Value *new_grad = new_grad_node->output();\n-        new_grad->setType(prev_grad->typeOption());\n+        Value * new_grad = addAndPutAfter(prev_grad, grad_inputs[i], grad_inputs[i]->node());\n         grad_map[inputs[i]] = new_grad;\n       } else {\n         grad_map[inputs[i]] = grad_inputs[i];\n       }\n     }\n   }\n \n-  for (auto input : graph->inputs()) {\n+  auto inputs = graph.inputs();\n+  for (std::size_t i = 0, num_inputs = inputs.size(); i < num_inputs; ++i) {\n+    Value * input = inputs[i];\n     if (input->stage() > 0) break;\n-    graph->registerOutput(grad_map.at(input));\n+    graph.registerOutput(grad_map.at(input));\n+    grad_desc.df_output_vjps.push_back(i);\n+  }\n+\n+  return grad_map;\n+}\n+\n+static std::shared_ptr<Graph> splitOffStage(\n+        Graph& graph,\n+        std::size_t stage,\n+        ArrayRef<Value*> inputs,\n+        ArrayRef<Value*> outputs) {\n+  auto graph_clone = std::make_shared<Graph>();\n+\n+  value_map val_map; // values in graph -> values in graph_clone\n+  const auto lookup_val = [&](Value *v) { return val_map.at(v); };\n+\n+  for (Value *input : inputs)\n+    val_map[input] = graph_clone->addInput()->setType(input->typeOption());\n+\n+  for (Node *node : graph.nodes()) {\n+    if (node->stage() != stage) continue;\n+    Node *node_clone = graph_clone->createClone(node, lookup_val);\n+    for (std::size_t i = 0, num_outputs = node_clone->outputs().size(); i < num_outputs; ++i)\n+      val_map[node->outputs()[i]] = node_clone->outputs()[i];\n+    graph_clone->appendNode(node_clone);\n   }\n+\n+  for (Value *output : outputs) {\n+    JIT_ASSERT(output->stage() == stage);\n+    graph_clone->registerOutput(val_map.at(output));\n+  }\n+\n+  return graph_clone;\n+}\n+\n+void lambdaLiftReverse(Graph& graph, value_map& grad_map, Gradient& grad_desc) {\n+  static const auto is_stage_0 = [](Value *v) { return v->stage() == 0; };\n+  static const auto is_stage_1 = [](Value *v) { return v->stage() == 1; };\n+  // NOTE: in the comments inside this function first stage is stage 0\n+  JIT_ASSERT(graph.stage() == 1);\n+\n+  // --------------------------------------------------------------------------\n+  // 1. Find values of stage 0 that need to be captured.\n+  // --------------------------------------------------------------------------\n+  // First, we need to find all values that are produced in the first stage,\n+  // and used in the second one. They will need to be added as inputs of the reverse\n+  // graph, and some of them may also need to be appended as outputs of the primal graph.\n+  value_set reverse_captures_set;\n+  value_list reverse_captures; // Invariant: topo sorted", "path": "torch/csrc/jit/autodiff.cpp", "position": 150, "original_position": 127, "commit_id": "a41b11143e2fad09918cf66d0a60216e9ab83f5a", "original_commit_id": "92ae73f02b10180b6d52538f1409be67cb6cb0a4", "user": {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, "body": "nit: it sounds like this list is in _reverse_ order even though it is for the reverse/backward/gradient pass. Maybe `gradient_captures` to avoid the ambiguity.", "created_at": "2018-01-25T19:47:35Z", "updated_at": "2018-11-23T15:38:36Z", "html_url": "https://github.com/pytorch/pytorch/pull/4759#discussion_r163949015", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4759", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/163949015"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/4759#discussion_r163949015"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4759"}}, "body_html": "<p>nit: it sounds like this list is in <em>reverse</em> order even though it is for the reverse/backward/gradient pass. Maybe <code>gradient_captures</code> to avoid the ambiguity.</p>", "body_text": "nit: it sounds like this list is in reverse order even though it is for the reverse/backward/gradient pass. Maybe gradient_captures to avoid the ambiguity."}