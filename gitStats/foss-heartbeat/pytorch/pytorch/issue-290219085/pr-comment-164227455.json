{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/164227455", "pull_request_review_id": 91975745, "id": 164227455, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NDIyNzQ1NQ==", "diff_hunk": "@@ -34,38 +45,233 @@ static std::vector<Value*> gradientForNode(Node* node, ArrayRef<Value*> grad_val\n   return fmap(sym_grads, [](const SymbolicVariable &v) { return v.value(); });\n }\n \n-void differentiate(std::shared_ptr<Graph>& graph) {\n-  JIT_ASSERT(graph->stage() == 0);\n-  graph->advanceStage();\n+// Before:\n+//   - graph has only stage 0\n+//   - grad_desc doesn't have any fields initialized\n+// After:\n+//   - graph has stage 0 and stage 1 that computes its vjp\n+//   - grad_desc has df_input_vjps and df_output_vjps set\n+//     (but df_input_vjps will be modified later as well)\n+static value_map addReverseInline(Graph& graph, Gradient& grad_desc) {\n+  JIT_ASSERT(graph.stage() == 0);\n+  graph.advanceStage();\n+\n+  value_map grad_map; // x -> dx mapping\n+  const auto get_grad = [&](Value* v) { return grad_map.at(v); };\n+  const auto set_grad = [&](Value *x, Value *dx) {\n+    if (Value * prev_grad = grad_map[x]) {\n+      Value * new_grad = addAndPutAfter(prev_grad, dx, dx->node());\n+      grad_map[x] = new_grad;\n+    } else {\n+      grad_map[x] = dx;\n+    }\n+  };\n \n-  std::unordered_map<Value*, Value*> grad_map; // x -> dx mapping\n-  const auto get_grad = [&](Value* v) { return grad_map[v]; };\n-  for (auto output : graph->outputs())\n-    grad_map[output] = graph->addInput()->setType(output->typeOption());\n+  auto outputs = graph.outputs();\n+  for (std::size_t i = 0, num_outputs = outputs.size(); i < num_outputs; ++i) {\n+    Value * output = outputs[i];\n+    Value * output_grad = graph.addInput()->setType(output->typeOption());\n+    set_grad(output, output_grad);\n+    grad_desc.df_input_vjps.push_back(i);\n+  }\n \n-  for (auto it = graph->rbegin(), end = graph->rend(); it != end; ++it) {\n+  for (auto it = graph.rbegin(), end = graph.rend(); it != end; ++it) {\n     Node *node = *it;\n     auto inputs = node->inputs();\n     value_list grad_inputs = gradientForNode(node, fmap(node->outputs(), get_grad));\n     JIT_ASSERT(grad_inputs.size() == node->inputs().size());\n     for (std::size_t i = 0, num_inputs = grad_inputs.size(); i < num_inputs; ++i) {\n-      if (Value * prev_grad = grad_map[inputs[i]]) {\n-        Node *new_grad_node = graph->create(kadd, {prev_grad, grad_inputs[i]})\n-                                   ->t_(kalpha, at::Scalar(1).toTensor());\n-        new_grad_node->insertAfter(grad_inputs[i]->node());\n-        Value *new_grad = new_grad_node->output();\n-        new_grad->setType(prev_grad->typeOption());\n-        grad_map[inputs[i]] = new_grad;\n-      } else {\n-        grad_map[inputs[i]] = grad_inputs[i];\n-      }\n+      set_grad(inputs[i], grad_inputs[i]);\n     }\n   }\n \n-  for (auto input : graph->inputs()) {\n+  auto inputs = graph.inputs();\n+  for (std::size_t i = 0, num_inputs = inputs.size(); i < num_inputs; ++i) {\n+    Value * input = inputs[i];\n     if (input->stage() > 0) break;\n-    graph->registerOutput(grad_map.at(input));\n+    graph.registerOutput(get_grad(input));\n+    grad_desc.df_output_vjps.push_back(i);\n+  }\n+\n+  return grad_map;\n+}\n+\n+// This function will take the graph and return a new one that:\n+//   - contains all nodes of graph that have given stage\n+//   - there will be an input corresponding to each input of the inputs array\n+//   - values corresponding to outputs will be returned from the new graph\n+// It requires that values contained in inputs are sufficient to be able to\n+// compute all values in a given stage. An exception will be thrown if this is\n+// not the case.", "path": "torch/csrc/jit/autodiff.cpp", "position": 101, "original_position": 101, "commit_id": "a41b11143e2fad09918cf66d0a60216e9ab83f5a", "original_commit_id": "a41b11143e2fad09918cf66d0a60216e9ab83f5a", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "You also require outputs to be computed by the stage, right?", "created_at": "2018-01-26T21:33:43Z", "updated_at": "2018-11-23T15:38:38Z", "html_url": "https://github.com/pytorch/pytorch/pull/4759#discussion_r164227455", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4759", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/164227455"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/4759#discussion_r164227455"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4759"}}, "body_html": "<p>You also require outputs to be computed by the stage, right?</p>", "body_text": "You also require outputs to be computed by the stage, right?"}