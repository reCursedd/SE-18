{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/437447800", "html_url": "https://github.com/pytorch/pytorch/pull/12766#issuecomment-437447800", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/12766", "id": 437447800, "node_id": "MDEyOklzc3VlQ29tbWVudDQzNzQ0NzgwMA==", "user": {"login": "goldsborough", "id": 6429851, "node_id": "MDQ6VXNlcjY0Mjk4NTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/6429851?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goldsborough", "html_url": "https://github.com/goldsborough", "followers_url": "https://api.github.com/users/goldsborough/followers", "following_url": "https://api.github.com/users/goldsborough/following{/other_user}", "gists_url": "https://api.github.com/users/goldsborough/gists{/gist_id}", "starred_url": "https://api.github.com/users/goldsborough/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goldsborough/subscriptions", "organizations_url": "https://api.github.com/users/goldsborough/orgs", "repos_url": "https://api.github.com/users/goldsborough/repos", "events_url": "https://api.github.com/users/goldsborough/events{/privacy}", "received_events_url": "https://api.github.com/users/goldsborough/received_events", "type": "User", "site_admin": false}, "created_at": "2018-11-09T18:16:59Z", "updated_at": "2018-11-09T18:16:59Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=16640218\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/alsrgv\">@alsrgv</a> I think the tricky thing is that we don't actually have a release of the C++ API yet, so there is no version guarding we could do. We're also a bit concerned about the idea that Horovod is supposed to work with PyTorch of \"today\". If I understand correctly, you are guaranteeing that Horovod works with PyTorch master? But then, isn't any project's master branch supposed to be the land of bold, unconstrained breaking changes? I don't think we can ever guarantee any stability for the C++ API on master, because that's fundamentally really not what master is intended for.</p>\n<p>We discussed adding the horovod build to our CI, but we don't like the idea of particularly favoring one partner repository to run in our CI. If other folks see that we added some kind of higher-class support for one project, I don't see it taking long until lots of other projects expect us to run their build in our CI and ensure backwards compatibility and that will just slow us down a whole deal.</p>\n<p>I still think you should just pin PyTorch to some particular nightly and have users depend on that version. I feel like depending on released (or in this case at least fixed) versions of projects is a well established practice of ensuring stability, and depending on master is always dangerous and comes with responsibility for the dependee to keep up to date with the changes of upstream.</p>", "body_text": "@alsrgv I think the tricky thing is that we don't actually have a release of the C++ API yet, so there is no version guarding we could do. We're also a bit concerned about the idea that Horovod is supposed to work with PyTorch of \"today\". If I understand correctly, you are guaranteeing that Horovod works with PyTorch master? But then, isn't any project's master branch supposed to be the land of bold, unconstrained breaking changes? I don't think we can ever guarantee any stability for the C++ API on master, because that's fundamentally really not what master is intended for.\nWe discussed adding the horovod build to our CI, but we don't like the idea of particularly favoring one partner repository to run in our CI. If other folks see that we added some kind of higher-class support for one project, I don't see it taking long until lots of other projects expect us to run their build in our CI and ensure backwards compatibility and that will just slow us down a whole deal.\nI still think you should just pin PyTorch to some particular nightly and have users depend on that version. I feel like depending on released (or in this case at least fixed) versions of projects is a well established practice of ensuring stability, and depending on master is always dangerous and comes with responsibility for the dependee to keep up to date with the changes of upstream.", "body": "@alsrgv I think the tricky thing is that we don't actually have a release of the C++ API yet, so there is no version guarding we could do. We're also a bit concerned about the idea that Horovod is supposed to work with PyTorch of \"today\". If I understand correctly, you are guaranteeing that Horovod works with PyTorch master? But then, isn't any project's master branch supposed to be the land of bold, unconstrained breaking changes? I don't think we can ever guarantee any stability for the C++ API on master, because that's fundamentally really not what master is intended for.\r\n\r\nWe discussed adding the horovod build to our CI, but we don't like the idea of particularly favoring one partner repository to run in our CI. If other folks see that we added some kind of higher-class support for one project, I don't see it taking long until lots of other projects expect us to run their build in our CI and ensure backwards compatibility and that will just slow us down a whole deal.\r\n\r\nI still think you should just pin PyTorch to some particular nightly and have users depend on that version. I feel like depending on released (or in this case at least fixed) versions of projects is a well established practice of ensuring stability, and depending on master is always dangerous and comes with responsibility for the dependee to keep up to date with the changes of upstream."}