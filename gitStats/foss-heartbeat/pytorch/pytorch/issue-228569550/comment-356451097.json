{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/356451097", "html_url": "https://github.com/pytorch/pytorch/issues/1552#issuecomment-356451097", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/1552", "id": 356451097, "node_id": "MDEyOklzc3VlQ29tbWVudDM1NjQ1MTA5Nw==", "user": {"login": "davidbau", "id": 3458792, "node_id": "MDQ6VXNlcjM0NTg3OTI=", "avatar_url": "https://avatars0.githubusercontent.com/u/3458792?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidbau", "html_url": "https://github.com/davidbau", "followers_url": "https://api.github.com/users/davidbau/followers", "following_url": "https://api.github.com/users/davidbau/following{/other_user}", "gists_url": "https://api.github.com/users/davidbau/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidbau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidbau/subscriptions", "organizations_url": "https://api.github.com/users/davidbau/orgs", "repos_url": "https://api.github.com/users/davidbau/repos", "events_url": "https://api.github.com/users/davidbau/events{/privacy}", "received_events_url": "https://api.github.com/users/davidbau/received_events", "type": "User", "site_admin": false}, "created_at": "2018-01-09T23:43:55Z", "updated_at": "2018-01-09T23:46:29Z", "author_association": "NONE", "body_html": "<p>+1.  (Just spent a couple days working around the lack of interpolation in pytorch.)  There are several forms of interpolation that might be implemented, and they are all useful in different situations.  Here is a list of what's in numpy/scipy. The first three have been useful to me; it would be super-nice to have GPU versions of them.</p>\n<p><a href=\"https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.interp.html\" rel=\"nofollow\">numpy.interp</a> - 1d interpolation - nice for representing custom functions (e.g., probability densities) built from data.<br>\n<a href=\"https://docs.scipy.org/doc/scipy-0.15.1/reference/generated/scipy.ndimage.interpolation.zoom.html\" rel=\"nofollow\">scipy.ndimage.zoom</a> - similar to torch.nn.UpSampling, except it supports non-integer zoom ratio.  Handy for the common case of scaling an image.<br>\n<a href=\"https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.RectBivariateSpline.html\" rel=\"nofollow\">scipy.interpolate.RectBivariateSpline</a>/<a href=\"https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.RegularGridInterpolator.html\" rel=\"nofollow\">RegularGridInterpolator</a> - allows generalized and irregular grid points, instead of assuming uniform edge-to-edge zooming.  Useful when being careful but while the data is still at grid points.<br>\n<a href=\"https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.griddata.html\" rel=\"nofollow\">scipy.interpolate.griddata</a> etc - totally generic N-D interpolation by tessellating the space with simplexes.  I haven't had an occasion to need this.</p>", "body_text": "+1.  (Just spent a couple days working around the lack of interpolation in pytorch.)  There are several forms of interpolation that might be implemented, and they are all useful in different situations.  Here is a list of what's in numpy/scipy. The first three have been useful to me; it would be super-nice to have GPU versions of them.\nnumpy.interp - 1d interpolation - nice for representing custom functions (e.g., probability densities) built from data.\nscipy.ndimage.zoom - similar to torch.nn.UpSampling, except it supports non-integer zoom ratio.  Handy for the common case of scaling an image.\nscipy.interpolate.RectBivariateSpline/RegularGridInterpolator - allows generalized and irregular grid points, instead of assuming uniform edge-to-edge zooming.  Useful when being careful but while the data is still at grid points.\nscipy.interpolate.griddata etc - totally generic N-D interpolation by tessellating the space with simplexes.  I haven't had an occasion to need this.", "body": "+1.  (Just spent a couple days working around the lack of interpolation in pytorch.)  There are several forms of interpolation that might be implemented, and they are all useful in different situations.  Here is a list of what's in numpy/scipy. The first three have been useful to me; it would be super-nice to have GPU versions of them.\r\n\r\n[numpy.interp](https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.interp.html) - 1d interpolation - nice for representing custom functions (e.g., probability densities) built from data.\r\n[scipy.ndimage.zoom](https://docs.scipy.org/doc/scipy-0.15.1/reference/generated/scipy.ndimage.interpolation.zoom.html) - similar to torch.nn.UpSampling, except it supports non-integer zoom ratio.  Handy for the common case of scaling an image.\r\n[scipy.interpolate.RectBivariateSpline](https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.RectBivariateSpline.html)/[RegularGridInterpolator](https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.RegularGridInterpolator.html) - allows generalized and irregular grid points, instead of assuming uniform edge-to-edge zooming.  Useful when being careful but while the data is still at grid points.\r\n[scipy.interpolate.griddata](https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.griddata.html) etc - totally generic N-D interpolation by tessellating the space with simplexes.  I haven't had an occasion to need this.\r\n\r\n\r\n  "}