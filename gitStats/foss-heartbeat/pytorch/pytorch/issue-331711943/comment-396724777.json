{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/396724777", "html_url": "https://github.com/pytorch/pytorch/pull/8390#issuecomment-396724777", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/8390", "id": 396724777, "node_id": "MDEyOklzc3VlQ29tbWVudDM5NjcyNDc3Nw==", "user": {"login": "emilmelnikov", "id": 1649961, "node_id": "MDQ6VXNlcjE2NDk5NjE=", "avatar_url": "https://avatars1.githubusercontent.com/u/1649961?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emilmelnikov", "html_url": "https://github.com/emilmelnikov", "followers_url": "https://api.github.com/users/emilmelnikov/followers", "following_url": "https://api.github.com/users/emilmelnikov/following{/other_user}", "gists_url": "https://api.github.com/users/emilmelnikov/gists{/gist_id}", "starred_url": "https://api.github.com/users/emilmelnikov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emilmelnikov/subscriptions", "organizations_url": "https://api.github.com/users/emilmelnikov/orgs", "repos_url": "https://api.github.com/users/emilmelnikov/repos", "events_url": "https://api.github.com/users/emilmelnikov/events{/privacy}", "received_events_url": "https://api.github.com/users/emilmelnikov/received_events", "type": "User", "site_admin": false}, "created_at": "2018-06-12T20:36:06Z", "updated_at": "2018-06-12T20:36:06Z", "author_association": "NONE", "body_html": "<p>Just obtaining all arguments from <code>__init__</code> is trivial with metaclasses:</p>\n<pre><code>class ModuleMeta(type):\n    def __call__(self, *args, **kwargs):\n        obj = super(ModuleMeta, self).__call__(*args, **kwargs)\n        obj._arguments = (args, kwargs)\n        return obj\n</code></pre>\n<p>However, how to handle <code>Sequential</code>, where arguments are modules themselves, and other non-trivial cases?</p>\n<p>For modules that act as containers the ideal solution would be to somehow extract all arguments from the modules inside that container, and create a tree-like dict structure. I guess this even could be saved as JSON as a NN definition.</p>", "body_text": "Just obtaining all arguments from __init__ is trivial with metaclasses:\nclass ModuleMeta(type):\n    def __call__(self, *args, **kwargs):\n        obj = super(ModuleMeta, self).__call__(*args, **kwargs)\n        obj._arguments = (args, kwargs)\n        return obj\n\nHowever, how to handle Sequential, where arguments are modules themselves, and other non-trivial cases?\nFor modules that act as containers the ideal solution would be to somehow extract all arguments from the modules inside that container, and create a tree-like dict structure. I guess this even could be saved as JSON as a NN definition.", "body": "Just obtaining all arguments from `__init__` is trivial with metaclasses:\r\n\r\n```\r\nclass ModuleMeta(type):\r\n    def __call__(self, *args, **kwargs):\r\n        obj = super(ModuleMeta, self).__call__(*args, **kwargs)\r\n        obj._arguments = (args, kwargs)\r\n        return obj\r\n```\r\n\r\nHowever, how to handle `Sequential`, where arguments are modules themselves, and other non-trivial cases?\r\n\r\nFor modules that act as containers the ideal solution would be to somehow extract all arguments from the modules inside that container, and create a tree-like dict structure. I guess this even could be saved as JSON as a NN definition."}