{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/400663324", "html_url": "https://github.com/pytorch/pytorch/pull/8390#issuecomment-400663324", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/8390", "id": 400663324, "node_id": "MDEyOklzc3VlQ29tbWVudDQwMDY2MzMyNA==", "user": {"login": "emilmelnikov", "id": 1649961, "node_id": "MDQ6VXNlcjE2NDk5NjE=", "avatar_url": "https://avatars1.githubusercontent.com/u/1649961?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emilmelnikov", "html_url": "https://github.com/emilmelnikov", "followers_url": "https://api.github.com/users/emilmelnikov/followers", "following_url": "https://api.github.com/users/emilmelnikov/following{/other_user}", "gists_url": "https://api.github.com/users/emilmelnikov/gists{/gist_id}", "starred_url": "https://api.github.com/users/emilmelnikov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emilmelnikov/subscriptions", "organizations_url": "https://api.github.com/users/emilmelnikov/orgs", "repos_url": "https://api.github.com/users/emilmelnikov/repos", "events_url": "https://api.github.com/users/emilmelnikov/events{/privacy}", "received_events_url": "https://api.github.com/users/emilmelnikov/received_events", "type": "User", "site_admin": false}, "created_at": "2018-06-27T13:01:46Z", "updated_at": "2018-06-27T15:17:31Z", "author_association": "NONE", "body_html": "<p>The metaclass <code>torch.nn._ModuleMeta</code> saves positional and keyword arguments to the instance's attributes <code>_args</code> and <code>_kwargs</code>. However, there are some issues:</p>\n<ol>\n<li>\n<p>We need to \"normalize\" incoming args (replace positional with keyword args whenever possible), because <code>new_module</code> accepts keyword args, and we need to merge old and new args. Currently, the quick-and-dirty implementation uses <code>inspect.getargspec</code> to do this. Unfortunately, the better solution with <code>inspect.Signature</code> is unavailable in Python 2.</p>\n</li>\n<li>\n<p><code>_ModuleMeta</code> conflicts with the jit-related <code>ScriptMeta</code> metaclass. The latter has been made a subclass of the former, but this change is a potentially breaking one.</p>\n</li>\n<li>\n<p>It's not clear how to clone container modules (e.g. <code>Sequential</code>). For now, these modules have their own metaclass that disables argument saving.</p>\n</li>\n</ol>", "body_text": "The metaclass torch.nn._ModuleMeta saves positional and keyword arguments to the instance's attributes _args and _kwargs. However, there are some issues:\n\n\nWe need to \"normalize\" incoming args (replace positional with keyword args whenever possible), because new_module accepts keyword args, and we need to merge old and new args. Currently, the quick-and-dirty implementation uses inspect.getargspec to do this. Unfortunately, the better solution with inspect.Signature is unavailable in Python 2.\n\n\n_ModuleMeta conflicts with the jit-related ScriptMeta metaclass. The latter has been made a subclass of the former, but this change is a potentially breaking one.\n\n\nIt's not clear how to clone container modules (e.g. Sequential). For now, these modules have their own metaclass that disables argument saving.", "body": "The metaclass `torch.nn._ModuleMeta` saves positional and keyword arguments to the instance's attributes `_args` and `_kwargs`. However, there are some issues:\r\n\r\n1. We need to \"normalize\" incoming args (replace positional with keyword args whenever possible), because `new_module` accepts keyword args, and we need to merge old and new args. Currently, the quick-and-dirty implementation uses `inspect.getargspec` to do this. Unfortunately, the better solution with `inspect.Signature` is unavailable in Python 2.\r\n\r\n2. `_ModuleMeta` conflicts with the jit-related `ScriptMeta` metaclass. The latter has been made a subclass of the former, but this change is a potentially breaking one.\r\n\r\n3. It's not clear how to clone container modules (e.g. `Sequential`). For now, these modules have their own metaclass that disables argument saving."}