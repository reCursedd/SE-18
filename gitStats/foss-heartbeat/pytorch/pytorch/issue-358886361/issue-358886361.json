{"url": "https://api.github.com/repos/pytorch/pytorch/issues/11510", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/11510/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/11510/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/11510/events", "html_url": "https://github.com/pytorch/pytorch/pull/11510", "id": 358886361, "node_id": "MDExOlB1bGxSZXF1ZXN0MjE0NTExODkx", "number": 11510, "title": "Unify C++ API with C++ extensions", "user": {"login": "goldsborough", "id": 6429851, "node_id": "MDQ6VXNlcjY0Mjk4NTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/6429851?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goldsborough", "html_url": "https://github.com/goldsborough", "followers_url": "https://api.github.com/users/goldsborough/followers", "following_url": "https://api.github.com/users/goldsborough/following{/other_user}", "gists_url": "https://api.github.com/users/goldsborough/gists{/gist_id}", "starred_url": "https://api.github.com/users/goldsborough/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goldsborough/subscriptions", "organizations_url": "https://api.github.com/users/goldsborough/orgs", "repos_url": "https://api.github.com/users/goldsborough/repos", "events_url": "https://api.github.com/users/goldsborough/events{/privacy}", "received_events_url": "https://api.github.com/users/goldsborough/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-09-11T04:55:27Z", "updated_at": "2018-11-23T15:51:23Z", "closed_at": "2018-09-24T21:45:58Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/11510", "html_url": "https://github.com/pytorch/pytorch/pull/11510", "diff_url": "https://github.com/pytorch/pytorch/pull/11510.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/11510.patch"}, "body_html": "<p>Currently the C++ API and C++ extensions are effectively two different, entirely orthogonal code paths. This PR unifies the C++ API with the C++ extension API by adding an element of Python binding support to the C++ API. This means the <code>torch/torch.h</code> included by C++ extensions, which currently routes to <code>torch/csrc/torch.h</code>, can now be rerouted to <code>torch/csrc/api/include/torch/torch.h</code> -- i.e. the main C++ API header. This header then includes Python binding support conditioned on a define (<code>TORCH_WITH_PYTHON_BINDINGS</code>), <em>which is only passed when building a C++ extension</em>.</p>\n<p>Currently stacked on top of <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"358846486\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/11498\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/pytorch/pytorch/pull/11498/hovercard\" href=\"https://github.com/pytorch/pytorch/pull/11498\">#11498</a></p>\n<p>Why is this useful?</p>\n<ol>\n<li>One less codepath. In particular, there has been trouble again and again due to the two <code>torch/torch.h</code> header files and ambiguity when both ended up in the include path. This is now fixed.</li>\n<li>I have found that it is quite common to want to bind a C++ API module back into Python. This could be for simple experimentation, or to have your training loop in Python but your models in C++. This PR makes this easier by adding pybind11 support to the C++ API.</li>\n<li>The C++ extension API simply becomes richer by gaining access to the C++ API headers.</li>\n</ol>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1310570\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/soumith\">@soumith</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=13564\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ezyang\">@ezyang</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=4583066\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/apaszke\">@apaszke</a></p>", "body_text": "Currently the C++ API and C++ extensions are effectively two different, entirely orthogonal code paths. This PR unifies the C++ API with the C++ extension API by adding an element of Python binding support to the C++ API. This means the torch/torch.h included by C++ extensions, which currently routes to torch/csrc/torch.h, can now be rerouted to torch/csrc/api/include/torch/torch.h -- i.e. the main C++ API header. This header then includes Python binding support conditioned on a define (TORCH_WITH_PYTHON_BINDINGS), which is only passed when building a C++ extension.\nCurrently stacked on top of #11498\nWhy is this useful?\n\nOne less codepath. In particular, there has been trouble again and again due to the two torch/torch.h header files and ambiguity when both ended up in the include path. This is now fixed.\nI have found that it is quite common to want to bind a C++ API module back into Python. This could be for simple experimentation, or to have your training loop in Python but your models in C++. This PR makes this easier by adding pybind11 support to the C++ API.\nThe C++ extension API simply becomes richer by gaining access to the C++ API headers.\n\n@soumith @ezyang @apaszke", "body": "Currently the C++ API and C++ extensions are effectively two different, entirely orthogonal code paths. This PR unifies the C++ API with the C++ extension API by adding an element of Python binding support to the C++ API. This means the `torch/torch.h` included by C++ extensions, which currently routes to `torch/csrc/torch.h`, can now be rerouted to `torch/csrc/api/include/torch/torch.h` -- i.e. the main C++ API header. This header then includes Python binding support conditioned on a define (`TORCH_WITH_PYTHON_BINDINGS`), *which is only passed when building a C++ extension*.\r\n\r\nCurrently stacked on top of https://github.com/pytorch/pytorch/pull/11498\r\n\r\nWhy is this useful?\r\n\r\n1. One less codepath. In particular, there has been trouble again and again due to the two `torch/torch.h` header files and ambiguity when both ended up in the include path. This is now fixed.\r\n2. I have found that it is quite common to want to bind a C++ API module back into Python. This could be for simple experimentation, or to have your training loop in Python but your models in C++. This PR makes this easier by adding pybind11 support to the C++ API.\r\n3. The C++ extension API simply becomes richer by gaining access to the C++ API headers.\r\n\r\n@soumith @ezyang @apaszke "}