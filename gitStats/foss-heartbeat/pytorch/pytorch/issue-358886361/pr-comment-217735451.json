{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/217735451", "pull_request_review_id": 155524933, "id": 217735451, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNzczNTQ1MQ==", "diff_hunk": "@@ -148,6 +148,7 @@ class BuildExtension(build_ext):\n     def build_extensions(self):\n         self._check_abi()\n         for extension in self.extensions:\n+            self._add_compile_flag(extension, '-DTORCH_WITH_PYTHON_BINDINGS')", "path": "torch/utils/cpp_extension.py", "position": null, "original_position": 4, "commit_id": "ddce1a9f2f34515cda0c366d8d279abafaa18e90", "original_commit_id": "0718236f3c2e2ab1cd5632daea5bff7017d1dac0", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "I'm not a big fan of macros in this style, because they are \"infectious\": if I write a header that includes `torch.h` and I build my code with `-DTORCH_WITH_PYTHON_BINDINGS`, *everyone* downstream must also specify this macro.\r\n\r\nI agree that having two header files named `torch/torch.h` is suboptimal, and agree it should be fixed. What I don't understand is why `torch/torch.h` has to either be Python-enabled or not, depending on context. Wouldn't it make more sense for there to be a Torch-with-Python header?", "created_at": "2018-09-14T14:38:30Z", "updated_at": "2018-11-23T15:51:23Z", "html_url": "https://github.com/pytorch/pytorch/pull/11510#discussion_r217735451", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/11510", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/217735451"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/11510#discussion_r217735451"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/11510"}}, "body_html": "<p>I'm not a big fan of macros in this style, because they are \"infectious\": if I write a header that includes <code>torch.h</code> and I build my code with <code>-DTORCH_WITH_PYTHON_BINDINGS</code>, <em>everyone</em> downstream must also specify this macro.</p>\n<p>I agree that having two header files named <code>torch/torch.h</code> is suboptimal, and agree it should be fixed. What I don't understand is why <code>torch/torch.h</code> has to either be Python-enabled or not, depending on context. Wouldn't it make more sense for there to be a Torch-with-Python header?</p>", "body_text": "I'm not a big fan of macros in this style, because they are \"infectious\": if I write a header that includes torch.h and I build my code with -DTORCH_WITH_PYTHON_BINDINGS, everyone downstream must also specify this macro.\nI agree that having two header files named torch/torch.h is suboptimal, and agree it should be fixed. What I don't understand is why torch/torch.h has to either be Python-enabled or not, depending on context. Wouldn't it make more sense for there to be a Torch-with-Python header?"}