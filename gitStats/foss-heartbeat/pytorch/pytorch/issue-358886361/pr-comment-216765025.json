{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/216765025", "pull_request_review_id": 154325435, "id": 216765025, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNjc2NTAyNQ==", "diff_hunk": "@@ -0,0 +1,106 @@\n+#pragma once\n+\n+#include <Python.h>\n+\n+#include <pybind11/pybind11.h>\n+#include <torch/csrc/utils/pybind.h>\n+#include <torch/csrc/variable_tensor_functions.h>\n+\n+#include <iterator>\n+#include <string>\n+#include <unordered_map>\n+#include <utility>\n+#include <vector>\n+\n+namespace torch {\n+namespace python {\n+namespace detail {\n+template <typename Cursor>\n+std::vector<Tensor> cursor_to_vector(const Cursor& cursor) {\n+  std::vector<Tensor> vector;\n+  vector.reserve(cursor.size());\n+  cursor.map(\n+      std::back_inserter(vector), [](const Tensor& tensor) { return tensor; });\n+  return vector;\n+}\n+\n+template <typename Cursor>\n+std::unordered_map<std::string, Tensor> cursor_to_map(const Cursor& cursor) {\n+  std::unordered_map<std::string, Tensor> map;\n+  map.reserve(cursor.size());\n+  cursor.map_items(\n+      std::inserter(map, map.end()),\n+      [](const std::string& key, const Tensor& tensor) {\n+        return std::make_pair(key, tensor);\n+      });\n+  return map;\n+}\n+} // namespace detail\n+\n+/// Adds method bindings for a pybind11 `class_` that binds an `nn::Module`\n+/// subclass.\n+///\n+/// Say you have a pybind11 class object created with `py::class_<Net>(m,\n+/// \"Net\")`. This function will add all the necessary `.def()` calls to bind the\n+/// `nn::Module` base class' methods, such as `train()`, `eval()` etc. into\n+/// Python. The exact list of supported methods and their Python signatures are:\n+/// - `train()`\n+/// - `eval()`\n+/// - `is_training() -> bool`\n+/// - `zero_grad()`\n+/// - `cuda()`\n+/// - `cpu()`\n+/// - `parameters() -> List<Tensor>`\n+/// - `named_parameters() -> Dict<String, Tensor>`\n+/// - `buffers() -> List<Tensor>`\n+/// - `named_buffers() -> Dict<String, Tensor>`\n+template <typename M, typename... Extra>\n+py::class_<M, Extra...> add_module_bindings(py::class_<M, Extra...> module) {\n+  return module.def(\"train\", [](M& module) { module.train(); })\n+      .def(\"eval\", [](M& module) { module.eval(); })\n+      .def(\"is_training\", [](M& module) { return module.is_training(); })\n+      .def(\"zero_grad\", [](M& module) { module.zero_grad(); })\n+      .def(\"cuda\", [](M& module) { module.to(torch::kCUDA); })\n+      .def(\"cpu\", [](M& module) { module.to(torch::kCPU); })", "path": "torch/csrc/api/include/torch/python.h", "position": null, "original_position": 64, "commit_id": "ddce1a9f2f34515cda0c366d8d279abafaa18e90", "original_commit_id": "76f9bf807f28e98b7af478f8a403afb63c491f80", "user": {"login": "goldsborough", "id": 6429851, "node_id": "MDQ6VXNlcjY0Mjk4NTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/6429851?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goldsborough", "html_url": "https://github.com/goldsborough", "followers_url": "https://api.github.com/users/goldsborough/followers", "following_url": "https://api.github.com/users/goldsborough/following{/other_user}", "gists_url": "https://api.github.com/users/goldsborough/gists{/gist_id}", "starred_url": "https://api.github.com/users/goldsborough/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goldsborough/subscriptions", "organizations_url": "https://api.github.com/users/goldsborough/orgs", "repos_url": "https://api.github.com/users/goldsborough/repos", "events_url": "https://api.github.com/users/goldsborough/events{/privacy}", "received_events_url": "https://api.github.com/users/goldsborough/received_events", "type": "User", "site_admin": false}, "body": "I have to check if a `torch.device` will convert into the right thing on Python side, otherwise yes good idea", "created_at": "2018-09-11T18:03:41Z", "updated_at": "2018-11-23T15:51:00Z", "html_url": "https://github.com/pytorch/pytorch/pull/11510#discussion_r216765025", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/11510", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/216765025"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/11510#discussion_r216765025"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/11510"}}, "body_html": "<p>I have to check if a <code>torch.device</code> will convert into the right thing on Python side, otherwise yes good idea</p>", "body_text": "I have to check if a torch.device will convert into the right thing on Python side, otherwise yes good idea", "in_reply_to_id": 216570557}