{"url": "https://api.github.com/repos/pytorch/pytorch/issues/8549", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/8549/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/8549/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/8549/events", "html_url": "https://github.com/pytorch/pytorch/issues/8549", "id": 332718606, "node_id": "MDU6SXNzdWUzMzI3MTg2MDY=", "number": 8549, "title": "[PyTorch] Output information about memory usage on OOM error", "user": {"login": "gothos-folly", "id": 15216633, "node_id": "MDQ6VXNlcjE1MjE2NjMz", "avatar_url": "https://avatars0.githubusercontent.com/u/15216633?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gothos-folly", "html_url": "https://github.com/gothos-folly", "followers_url": "https://api.github.com/users/gothos-folly/followers", "following_url": "https://api.github.com/users/gothos-folly/following{/other_user}", "gists_url": "https://api.github.com/users/gothos-folly/gists{/gist_id}", "starred_url": "https://api.github.com/users/gothos-folly/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gothos-folly/subscriptions", "organizations_url": "https://api.github.com/users/gothos-folly/orgs", "repos_url": "https://api.github.com/users/gothos-folly/repos", "events_url": "https://api.github.com/users/gothos-folly/events{/privacy}", "received_events_url": "https://api.github.com/users/gothos-folly/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 443483881, "node_id": "MDU6TGFiZWw0NDM0ODM4ODE=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/todo", "name": "todo", "color": "c2e0c6", "default": false}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-06-15T10:09:33Z", "updated_at": "2018-06-18T17:37:29Z", "closed_at": null, "author_association": "NONE", "body_html": "<p>Currently when PyTorch encounters a cuda out-of-memory error it only prints a fixed error message and a stack trace. <strong>It'd be nice if it also printed the size of the attempted allocation and a list of all existing allocations.</strong></p>\n<p>Currently I'm using a <a href=\"https://gist.github.com/gothos-folly/123b70f0cf992828f0d084673bf07d0d\">helper function</a> that enumerates tensor objects, but that has limitations compared to a built-in solution:</p>\n<ul>\n<li>It doesn't show temporary allocations</li>\n<li>It doesn't know the size of the attempted allocation</li>\n<li>By the time the exception is printed the activations are already out of scope and freed. This can be worked around with narrowly scoped try-except blocks, but that's pretty annoying.</li>\n</ul>", "body_text": "Currently when PyTorch encounters a cuda out-of-memory error it only prints a fixed error message and a stack trace. It'd be nice if it also printed the size of the attempted allocation and a list of all existing allocations.\nCurrently I'm using a helper function that enumerates tensor objects, but that has limitations compared to a built-in solution:\n\nIt doesn't show temporary allocations\nIt doesn't know the size of the attempted allocation\nBy the time the exception is printed the activations are already out of scope and freed. This can be worked around with narrowly scoped try-except blocks, but that's pretty annoying.", "body": "Currently when PyTorch encounters a cuda out-of-memory error it only prints a fixed error message and a stack trace. **It'd be nice if it also printed the size of the attempted allocation and a list of all existing allocations.**\r\n\r\nCurrently I'm using a [helper function](https://gist.github.com/gothos-folly/123b70f0cf992828f0d084673bf07d0d) that enumerates tensor objects, but that has limitations compared to a built-in solution:\r\n\r\n* It doesn't show temporary allocations\r\n* It doesn't know the size of the attempted allocation\r\n* By the time the exception is printed the activations are already out of scope and freed. This can be worked around with narrowly scoped try-except blocks, but that's pretty annoying."}