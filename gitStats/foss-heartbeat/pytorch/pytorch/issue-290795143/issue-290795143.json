{"url": "https://api.github.com/repos/pytorch/pytorch/issues/4800", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/4800/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/4800/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/4800/events", "html_url": "https://github.com/pytorch/pytorch/issues/4800", "id": 290795143, "node_id": "MDU6SXNzdWUyOTA3OTUxNDM=", "number": 4800, "title": "Improving tensor dataset class", "user": {"login": "antspy", "id": 625297, "node_id": "MDQ6VXNlcjYyNTI5Nw==", "avatar_url": "https://avatars3.githubusercontent.com/u/625297?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antspy", "html_url": "https://github.com/antspy", "followers_url": "https://api.github.com/users/antspy/followers", "following_url": "https://api.github.com/users/antspy/following{/other_user}", "gists_url": "https://api.github.com/users/antspy/gists{/gist_id}", "starred_url": "https://api.github.com/users/antspy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antspy/subscriptions", "organizations_url": "https://api.github.com/users/antspy/orgs", "repos_url": "https://api.github.com/users/antspy/repos", "events_url": "https://api.github.com/users/antspy/events{/privacy}", "received_events_url": "https://api.github.com/users/antspy/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-01-23T11:04:04Z", "updated_at": "2018-01-23T11:04:04Z", "closed_at": null, "author_association": "NONE", "body_html": "<p>Hi,</p>\n<p>I would like to improve torch.utils.data.TensorDataset by adding the possibility of custom transforms (just like torchvision.ImageFolder) and the possibility of not having a target tensor.</p>\n<p>I have implemented the following changes:</p>\n<pre><code>class TensorsDataset(torch.utils.data.Dataset):\n\n    '''\n    A simple loading dataset - loads the tensor that are passed in input. This is the same as\n    torch.utils.data.TensorDataset except that you can add transformations to your data and target tensor.\n    Target tensor can also be None, in which case it is not returned.\n    '''\n\n    def __init__(self, data_tensor, target_tensor=None, transforms=None, target_transforms=None):\n        if target_tensor is not None:\n            assert data_tensor.size(0) == target_tensor.size(0)\n        self.data_tensor = data_tensor\n        self.target_tensor = target_tensor\n\n        if transforms is None:\n            transforms = []\n        if target_transforms is None:\n            target_transforms = []\n\n        if not isinstance(transforms, list):\n            transforms = [transforms]\n        if not isinstance(target_transforms, list):\n            target_transforms = [target_transforms]\n\n        self.transforms = transforms\n        self.target_transforms = target_transforms\n\n    def __getitem__(self, index):\n\n        data_tensor = self.data_tensor[index]\n        for transform in self.transforms:\n            data_tensor = transform(data_tensor)\n\n        if self.target_tensor is None:\n            return data_tensor\n\n        target_tensor = self.target_tensor[index]\n        for transform in self.target_transforms:\n            target_tensor = transform(target_tensor)\n\n        return data_tensor, target_tensor\n\n    def __len__(self):\n        return self.data_tensor.size(0)\n</code></pre>", "body_text": "Hi,\nI would like to improve torch.utils.data.TensorDataset by adding the possibility of custom transforms (just like torchvision.ImageFolder) and the possibility of not having a target tensor.\nI have implemented the following changes:\nclass TensorsDataset(torch.utils.data.Dataset):\n\n    '''\n    A simple loading dataset - loads the tensor that are passed in input. This is the same as\n    torch.utils.data.TensorDataset except that you can add transformations to your data and target tensor.\n    Target tensor can also be None, in which case it is not returned.\n    '''\n\n    def __init__(self, data_tensor, target_tensor=None, transforms=None, target_transforms=None):\n        if target_tensor is not None:\n            assert data_tensor.size(0) == target_tensor.size(0)\n        self.data_tensor = data_tensor\n        self.target_tensor = target_tensor\n\n        if transforms is None:\n            transforms = []\n        if target_transforms is None:\n            target_transforms = []\n\n        if not isinstance(transforms, list):\n            transforms = [transforms]\n        if not isinstance(target_transforms, list):\n            target_transforms = [target_transforms]\n\n        self.transforms = transforms\n        self.target_transforms = target_transforms\n\n    def __getitem__(self, index):\n\n        data_tensor = self.data_tensor[index]\n        for transform in self.transforms:\n            data_tensor = transform(data_tensor)\n\n        if self.target_tensor is None:\n            return data_tensor\n\n        target_tensor = self.target_tensor[index]\n        for transform in self.target_transforms:\n            target_tensor = transform(target_tensor)\n\n        return data_tensor, target_tensor\n\n    def __len__(self):\n        return self.data_tensor.size(0)", "body": "Hi, \r\n\r\nI would like to improve torch.utils.data.TensorDataset by adding the possibility of custom transforms (just like torchvision.ImageFolder) and the possibility of not having a target tensor. \r\n\r\nI have implemented the following changes:\r\n\r\n```\r\nclass TensorsDataset(torch.utils.data.Dataset):\r\n\r\n    '''\r\n    A simple loading dataset - loads the tensor that are passed in input. This is the same as\r\n    torch.utils.data.TensorDataset except that you can add transformations to your data and target tensor.\r\n    Target tensor can also be None, in which case it is not returned.\r\n    '''\r\n\r\n    def __init__(self, data_tensor, target_tensor=None, transforms=None, target_transforms=None):\r\n        if target_tensor is not None:\r\n            assert data_tensor.size(0) == target_tensor.size(0)\r\n        self.data_tensor = data_tensor\r\n        self.target_tensor = target_tensor\r\n\r\n        if transforms is None:\r\n            transforms = []\r\n        if target_transforms is None:\r\n            target_transforms = []\r\n\r\n        if not isinstance(transforms, list):\r\n            transforms = [transforms]\r\n        if not isinstance(target_transforms, list):\r\n            target_transforms = [target_transforms]\r\n\r\n        self.transforms = transforms\r\n        self.target_transforms = target_transforms\r\n\r\n    def __getitem__(self, index):\r\n\r\n        data_tensor = self.data_tensor[index]\r\n        for transform in self.transforms:\r\n            data_tensor = transform(data_tensor)\r\n\r\n        if self.target_tensor is None:\r\n            return data_tensor\r\n\r\n        target_tensor = self.target_tensor[index]\r\n        for transform in self.target_transforms:\r\n            target_tensor = transform(target_tensor)\r\n\r\n        return data_tensor, target_tensor\r\n\r\n    def __len__(self):\r\n        return self.data_tensor.size(0)\r\n```"}