{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/181902270", "pull_request_review_id": 112609133, "id": 181902270, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MTkwMjI3MA==", "diff_hunk": "@@ -80,11 +80,84 @@ TensorProto CreateOnnxShapeTensor(const std::vector<int64_t>& shape) {\n   tensor.set_data_type(TensorProto::INT64);\n   tensor.add_dims(shape.size());\n   tensor.mutable_raw_data()->assign(\n-      reinterpret_cast<const char*>(shape.data()), sizeof(int64_t) * shape.size());\n+      reinterpret_cast<const char*>(shape.data()),\n+      sizeof(int64_t) * shape.size());\n   return tensor;\n }\n+\n+std::string SsaName(const std::string& n, int version) {\n+  return MakeString(n, \"_\", version);\n+}\n } // namespace\n \n+std::pair<\n+    std::unordered_map<std::string, std::string>,\n+    std::unordered_map<std::string, std::string>>\n+SsaRewrite(caffe2::NetDef* init_net, caffe2::NetDef* pred_net) {\n+  std::unordered_map<std::string, std::string> input_mapping;\n+  std::unordered_map<std::string, std::string> output_mapping;\n+  std::unordered_map<std::string, int> blob_versions;\n+\n+#define REWRITE_EXTERNAL_IO(net, name)                 \\\n+  for (auto& name : *net->mutable_external_##name()) { \\\n+    auto version = blob_versions.at(name);             \\\n+    auto new_##name = SsaName(name, version);          \\\n+    name##_mapping.emplace(new_##name, name);          \\\n+    name = new_##name;                                 \\\n+  }\n+\n+  if (init_net) {\n+    for (auto& op : *init_net->mutable_op()) {\n+      CAFFE_ENFORCE_EQ(op.type().find(\"GivenTensor\"), 0);", "path": "caffe2/onnx/onnx_exporter.cc", "position": 40, "original_position": 40, "commit_id": "37f51b1c2db5a64ad2288b68df15e5e88596d4ed", "original_commit_id": "908dfb114d6d7d3b75aee28b105f09f76c142809", "user": {"login": "houseroad", "id": 30275821, "node_id": "MDQ6VXNlcjMwMjc1ODIx", "avatar_url": "https://avatars0.githubusercontent.com/u/30275821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/houseroad", "html_url": "https://github.com/houseroad", "followers_url": "https://api.github.com/users/houseroad/followers", "following_url": "https://api.github.com/users/houseroad/following{/other_user}", "gists_url": "https://api.github.com/users/houseroad/gists{/gist_id}", "starred_url": "https://api.github.com/users/houseroad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/houseroad/subscriptions", "organizations_url": "https://api.github.com/users/houseroad/orgs", "repos_url": "https://api.github.com/users/houseroad/repos", "events_url": "https://api.github.com/users/houseroad/events{/privacy}", "received_events_url": "https://api.github.com/users/houseroad/received_events", "type": "User", "site_admin": false}, "body": "We probably should also handle ConstantFill operaotrs.", "created_at": "2018-04-16T22:17:46Z", "updated_at": "2018-11-23T15:42:33Z", "html_url": "https://github.com/pytorch/pytorch/pull/6531#discussion_r181902270", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/6531", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/181902270"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/6531#discussion_r181902270"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/6531"}}, "body_html": "<p>We probably should also handle ConstantFill operaotrs.</p>", "body_text": "We probably should also handle ConstantFill operaotrs."}