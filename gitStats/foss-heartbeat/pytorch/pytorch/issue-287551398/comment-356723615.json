{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/356723615", "html_url": "https://github.com/pytorch/pytorch/issues/4584#issuecomment-356723615", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/4584", "id": 356723615, "node_id": "MDEyOklzc3VlQ29tbWVudDM1NjcyMzYxNQ==", "user": {"login": "linkerzhang", "id": 5194557, "node_id": "MDQ6VXNlcjUxOTQ1NTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5194557?v=4", "gravatar_id": "", "url": "https://api.github.com/users/linkerzhang", "html_url": "https://github.com/linkerzhang", "followers_url": "https://api.github.com/users/linkerzhang/followers", "following_url": "https://api.github.com/users/linkerzhang/following{/other_user}", "gists_url": "https://api.github.com/users/linkerzhang/gists{/gist_id}", "starred_url": "https://api.github.com/users/linkerzhang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/linkerzhang/subscriptions", "organizations_url": "https://api.github.com/users/linkerzhang/orgs", "repos_url": "https://api.github.com/users/linkerzhang/repos", "events_url": "https://api.github.com/users/linkerzhang/events{/privacy}", "received_events_url": "https://api.github.com/users/linkerzhang/received_events", "type": "User", "site_admin": false}, "created_at": "2018-01-10T20:17:21Z", "updated_at": "2018-01-10T20:27:13Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=13564\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ezyang\">@ezyang</a> do you mean information below?</p>\n<pre><code>graph(%0 : Float(1, 3, 256, 256)\n      %1 : Float(64, 3, 7, 7)\n      %2 : Float(64)\n      %3 : Float(64)\n      %4 : Float(64)\n      %5 : Float(128, 64, 3, 3)\n      %6 : Float(128)\n      %7 : Float(128)\n      %8 : Float(128)\n      %9 : Float(256, 128, 3, 3)\n      %10 : Float(256)\n      %11 : Float(256)\n      %12 : Float(256)\n      %13 : Float(256, 256, 3, 3)\n      %14 : Float(256)\n      %15 : Float(256)\n      %16 : Float(256)\n      %17 : Float(256, 256, 3, 3)\n      %18 : Float(256)\n      %19 : Float(256)\n      %20 : Float(256)\n      %21 : Float(256, 256, 3, 3)\n      %22 : Float(256)\n      %23 : Float(256)\n      %24 : Float(256)\n      %25 : Float(256, 256, 3, 3)\n      %26 : Float(256)\n      %27 : Float(256)\n      %28 : Float(256)\n      %29 : Float(256, 256, 3, 3)\n      %30 : Float(256)\n      %31 : Float(256)\n      %32 : Float(256)\n      %33 : Float(256, 256, 3, 3)\n      %34 : Float(256)\n      %35 : Float(256)\n      %36 : Float(256)\n      %37 : Float(256, 256, 3, 3)\n      %38 : Float(256)\n      %39 : Float(256)\n      %40 : Float(256)\n      %41 : Float(256, 256, 3, 3)\n      %42 : Float(256)\n      %43 : Float(256)\n      %44 : Float(256)\n      %45 : Float(256, 256, 3, 3)\n      %46 : Float(256)\n      %47 : Float(256)\n      %48 : Float(256)\n      %49 : Float(256, 256, 3, 3)\n      %50 : Float(256)\n      %51 : Float(256)\n      %52 : Float(256)\n      %53 : Float(256, 256, 3, 3)\n      %54 : Float(256)\n      %55 : Float(256)\n      %56 : Float(256)\n      %57 : Float(256, 256, 3, 3)\n      %58 : Float(256)\n      %59 : Float(256)\n      %60 : Float(256)\n      %61 : Float(256, 256, 3, 3)\n      %62 : Float(256)\n      %63 : Float(256)\n      %64 : Float(256)\n      %65 : Float(256, 256, 3, 3)\n      %66 : Float(256)\n      %67 : Float(256)\n      %68 : Float(256)\n      %69 : Float(256, 256, 3, 3)\n      %70 : Float(256)\n      %71 : Float(256)\n      %72 : Float(256)\n      %73 : Float(256, 256, 3, 3)\n      %74 : Float(256)\n      %75 : Float(256)\n      %76 : Float(256)\n      %77 : Float(256, 256, 3, 3)\n      %78 : Float(256)\n      %79 : Float(256)\n      %80 : Float(256)\n      %81 : Float(256, 256, 3, 3)\n      %82 : Float(256)\n      %83 : Float(256)\n      %84 : Float(256)\n      %85 : Float(256, 128, 3, 3)\n      %86 : Float(128)\n      %87 : Float(128)\n      %88 : Float(128)\n      %89 : Float(128, 64, 3, 3)\n      %90 : Float(64)\n      %91 : Float(64)\n      %92 : Float(64)\n      %93 : Float(3, 64, 7, 7)\n      %94 : Float(3)) {\n  %95 : Float(1, 3, 262, 262) = Pad[mode=reflect, pads=[0, 0, 3, 3, 0, 0, 3, 3]](%0), scope: ResnetGenerator/Sequential[model]/ReflectionPad2d[0]\n  %96 : Float(1, 64, 256, 256) = Conv[dilations=[1, 1], group=1, kernel_shape=[7, 7], pads=[0, 0, 0, 0], strides=[1, 1]](%95, %1, %2), scope: ResnetGenerator/Sequential[model]/Conv2d[1]\n  %97 : Float(1, 64, 256, 256) = Reshape[shape=[1, 64, 256, 256]](%96), scope: ResnetGenerator/Sequential[model]/InstanceNorm2d[2]\n  %98 : Float(64) = Constant[value=&lt;Tensor&gt;](), scope: ResnetGenerator/Sequential[model]/InstanceNorm2d[2]\n  %99 : Float(64) = Constant[value=&lt;Tensor&gt;](), scope: ResnetGenerator/Sequential[model]/InstanceNorm2d[2]\n  %100 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/InstanceNorm2d[2]\n  %101 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/InstanceNorm2d[2]\n  %102 : Float(1, 64, 256, 256), %103 : Float(64), %104 : Float(64), %batch_norm_dead_output-105 : UNKNOWN_TYPE, %batch_norm_dead_output-106 : UNKNOWN_TYPE = BatchNormalization[consumed_inputs=[0, 0, 0, 1, 1], epsilon=1e-05, is_test=0, momentum=0.9](%97, %100, %101, %98, %99), scope: ResnetGenerator/Sequential[model]/InstanceNorm2d[2]\n  %107 : Float(1, 64, 256, 256) = Reshape[shape=[1, 64, 256, 256]](%102), scope: ResnetGenerator/Sequential[model]/InstanceNorm2d[2]\n  %108 : Float(1, 64, 256, 256) = Relu(%107), scope: ResnetGenerator/Sequential[model]/ReLU[3]\n  %109 : Float(1, 128, 128, 128) = Conv[dilations=[1, 1], group=1, kernel_shape=[3, 3], pads=[1, 1, 1, 1], strides=[2, 2]](%108, %5, %6), scope: ResnetGenerator/Sequential[model]/Conv2d[4]\n  %110 : Float(1, 128, 128, 128) = Reshape[shape=[1, 128, 128, 128]](%109), scope: ResnetGenerator/Sequential[model]/InstanceNorm2d[5]\n  %111 : Float(128) = Constant[value=&lt;Tensor&gt;](), scope: ResnetGenerator/Sequential[model]/InstanceNorm2d[5]\n  %112 : Float(128) = Constant[value=&lt;Tensor&gt;](), scope: ResnetGenerator/Sequential[model]/InstanceNorm2d[5]\n  %113 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/InstanceNorm2d[5]\n  %114 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/InstanceNorm2d[5]\n  %115 : Float(1, 128, 128, 128), %116 : Float(128), %117 : Float(128), %batch_norm_dead_output-118 : UNKNOWN_TYPE, %batch_norm_dead_output-119 : UNKNOWN_TYPE = BatchNormalization[consumed_inputs=[0, 0, 0, 1, 1], epsilon=1e-05, is_test=0, momentum=0.9](%110, %113, %114, %111, %112), scope: ResnetGenerator/Sequential[model]/InstanceNorm2d[5]\n  %120 : Float(1, 128, 128, 128) = Reshape[shape=[1, 128, 128, 128]](%115), scope: ResnetGenerator/Sequential[model]/InstanceNorm2d[5]\n  %121 : Float(1, 128, 128, 128) = Relu(%120), scope: ResnetGenerator/Sequential[model]/ReLU[6]\n  %122 : Float(1, 256, 64, 64) = Conv[dilations=[1, 1], group=1, kernel_shape=[3, 3], pads=[1, 1, 1, 1], strides=[2, 2]](%121, %9, %10), scope: ResnetGenerator/Sequential[model]/Conv2d[7]\n  %123 : Float(1, 256, 64, 64) = Reshape[shape=[1, 256, 64, 64]](%122), scope: ResnetGenerator/Sequential[model]/InstanceNorm2d[8]\n  %124 : Float(256) = Constant[value=&lt;Tensor&gt;](), scope: ResnetGenerator/Sequential[model]/InstanceNorm2d[8]\n  %125 : Float(256) = Constant[value=&lt;Tensor&gt;](), scope: ResnetGenerator/Sequential[model]/InstanceNorm2d[8]\n  %126 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/InstanceNorm2d[8]\n  %127 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/InstanceNorm2d[8]\n  %128 : Float(1, 256, 64, 64), %129 : Float(256), %130 : Float(256), %batch_norm_dead_output-131 : UNKNOWN_TYPE, %batch_norm_dead_output-132 : UNKNOWN_TYPE = BatchNormalization[consumed_inputs=[0, 0, 0, 1, 1], epsilon=1e-05, is_test=0, momentum=0.9](%123, %126, %127, %124, %125), scope: ResnetGenerator/Sequential[model]/InstanceNorm2d[8]\n  %133 : Float(1, 256, 64, 64) = Reshape[shape=[1, 256, 64, 64]](%128), scope: ResnetGenerator/Sequential[model]/InstanceNorm2d[8]\n  %134 : Float(1, 256, 64, 64) = Relu(%133), scope: ResnetGenerator/Sequential[model]/ReLU[9]\n  %135 : Float(1, 256, 66, 66) = Pad[mode=reflect, pads=[0, 0, 1, 1, 0, 0, 1, 1]](%134), scope: ResnetGenerator/Sequential[model]/ResnetBlock[10]/Sequential[conv_block]/ReflectionPad2d[0]\n  %136 : Float(1, 256, 64, 64) = Conv[dilations=[1, 1], group=1, kernel_shape=[3, 3], pads=[0, 0, 0, 0], strides=[1, 1]](%135, %13, %14), scope: ResnetGenerator/Sequential[model]/ResnetBlock[10]/Sequential[conv_block]/Conv2d[1]\n  %137 : Float(1, 256, 64, 64) = Reshape[shape=[1, 256, 64, 64]](%136), scope: ResnetGenerator/Sequential[model]/ResnetBlock[10]/Sequential[conv_block]/InstanceNorm2d[2]\n  %138 : Float(256) = Constant[value=&lt;Tensor&gt;](), scope: ResnetGenerator/Sequential[model]/ResnetBlock[10]/Sequential[conv_block]/InstanceNorm2d[2]\n  %139 : Float(256) = Constant[value=&lt;Tensor&gt;](), scope: ResnetGenerator/Sequential[model]/ResnetBlock[10]/Sequential[conv_block]/InstanceNorm2d[2]\n  %140 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/ResnetBlock[10]/Sequential[conv_block]/InstanceNorm2d[2]\n  %141 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/ResnetBlock[10]/Sequential[conv_block]/InstanceNorm2d[2]\n  %142 : Float(1, 256, 64, 64), %143 : Float(256), %144 : Float(256), %batch_norm_dead_output-145 : UNKNOWN_TYPE, %batch_norm_dead_output-146 : UNKNOWN_TYPE = BatchNormalization[consumed_inputs=[0, 0, 0, 1, 1], epsilon=1e-05, is_test=0, momentum=0.9](%137, %140, %141, %138, %139), scope: ResnetGenerator/Sequential[model]/ResnetBlock[10]/Sequential[conv_block]/InstanceNorm2d[2]\n  %147 : Float(1, 256, 64, 64) = Reshape[shape=[1, 256, 64, 64]](%142), scope: ResnetGenerator/Sequential[model]/ResnetBlock[10]/Sequential[conv_block]/InstanceNorm2d[2]\n  %148 : Float(1, 256, 64, 64) = Relu(%147), scope: ResnetGenerator/Sequential[model]/ResnetBlock[10]/Sequential[conv_block]/ReLU[3]\n  %149 : Float(1, 256, 66, 66) = Pad[mode=reflect, pads=[0, 0, 1, 1, 0, 0, 1, 1]](%148), scope: ResnetGenerator/Sequential[model]/ResnetBlock[10]/Sequential[conv_block]/ReflectionPad2d[4]\n  %150 : Float(1, 256, 64, 64) = Conv[dilations=[1, 1], group=1, kernel_shape=[3, 3], pads=[0, 0, 0, 0], strides=[1, 1]](%149, %17, %18), scope: ResnetGenerator/Sequential[model]/ResnetBlock[10]/Sequential[conv_block]/Conv2d[5]\n  %151 : Float(1, 256, 64, 64) = Reshape[shape=[1, 256, 64, 64]](%150), scope: ResnetGenerator/Sequential[model]/ResnetBlock[10]/Sequential[conv_block]/InstanceNorm2d[6]\n  %152 : Float(256) = Constant[value=&lt;Tensor&gt;](), scope: ResnetGenerator/Sequential[model]/ResnetBlock[10]/Sequential[conv_block]/InstanceNorm2d[6]\n  %153 : Float(256) = Constant[value=&lt;Tensor&gt;](), scope: ResnetGenerator/Sequential[model]/ResnetBlock[10]/Sequential[conv_block]/InstanceNorm2d[6]\n  %154 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/ResnetBlock[10]/Sequential[conv_block]/InstanceNorm2d[6]\n  %155 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/ResnetBlock[10]/Sequential[conv_block]/InstanceNorm2d[6]\n  %156 : Float(1, 256, 64, 64), %157 : Float(256), %158 : Float(256), %batch_norm_dead_output-159 : UNKNOWN_TYPE, %batch_norm_dead_output-160 : UNKNOWN_TYPE = BatchNormalization[consumed_inputs=[0, 0, 0, 1, 1], epsilon=1e-05, is_test=0, momentum=0.9](%151, %154, %155, %152, %153), scope: ResnetGenerator/Sequential[model]/ResnetBlock[10]/Sequential[conv_block]/InstanceNorm2d[6]\n  %161 : Float(1, 256, 64, 64) = Reshape[shape=[1, 256, 64, 64]](%156), scope: ResnetGenerator/Sequential[model]/ResnetBlock[10]/Sequential[conv_block]/InstanceNorm2d[6]\n  %162 : Float(1, 256, 64, 64) = Add(%134, %161), scope: ResnetGenerator/Sequential[model]/ResnetBlock[10]\n  %163 : Float(1, 256, 66, 66) = Pad[mode=reflect, pads=[0, 0, 1, 1, 0, 0, 1, 1]](%162), scope: ResnetGenerator/Sequential[model]/ResnetBlock[11]/Sequential[conv_block]/ReflectionPad2d[0]\n  %164 : Float(1, 256, 64, 64) = Conv[dilations=[1, 1], group=1, kernel_shape=[3, 3], pads=[0, 0, 0, 0], strides=[1, 1]](%163, %21, %22), scope: ResnetGenerator/Sequential[model]/ResnetBlock[11]/Sequential[conv_block]/Conv2d[1]\n  %165 : Float(1, 256, 64, 64) = Reshape[shape=[1, 256, 64, 64]](%164), scope: ResnetGenerator/Sequential[model]/ResnetBlock[11]/Sequential[conv_block]/InstanceNorm2d[2]\n  %166 : Float(256) = Constant[value=&lt;Tensor&gt;](), scope: ResnetGenerator/Sequential[model]/ResnetBlock[11]/Sequential[conv_block]/InstanceNorm2d[2]\n  %167 : Float(256) = Constant[value=&lt;Tensor&gt;](), scope: ResnetGenerator/Sequential[model]/ResnetBlock[11]/Sequential[conv_block]/InstanceNorm2d[2]\n  %168 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/ResnetBlock[11]/Sequential[conv_block]/InstanceNorm2d[2]\n  %169 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/ResnetBlock[11]/Sequential[conv_block]/InstanceNorm2d[2]\n  %170 : Float(1, 256, 64, 64), %171 : Float(256), %172 : Float(256), %batch_norm_dead_output-173 : UNKNOWN_TYPE, %batch_norm_dead_output-174 : UNKNOWN_TYPE = BatchNormalization[consumed_inputs=[0, 0, 0, 1, 1], epsilon=1e-05, is_test=0, momentum=0.9](%165, %168, %169, %166, %167), scope: ResnetGenerator/Sequential[model]/ResnetBlock[11]/Sequential[conv_block]/InstanceNorm2d[2]\n  %175 : Float(1, 256, 64, 64) = Reshape[shape=[1, 256, 64, 64]](%170), scope: ResnetGenerator/Sequential[model]/ResnetBlock[11]/Sequential[conv_block]/InstanceNorm2d[2]\n  %176 : Float(1, 256, 64, 64) = Relu(%175), scope: ResnetGenerator/Sequential[model]/ResnetBlock[11]/Sequential[conv_block]/ReLU[3]\n  %177 : Float(1, 256, 66, 66) = Pad[mode=reflect, pads=[0, 0, 1, 1, 0, 0, 1, 1]](%176), scope: ResnetGenerator/Sequential[model]/ResnetBlock[11]/Sequential[conv_block]/ReflectionPad2d[4]\n  %178 : Float(1, 256, 64, 64) = Conv[dilations=[1, 1], group=1, kernel_shape=[3, 3], pads=[0, 0, 0, 0], strides=[1, 1]](%177, %25, %26), scope: ResnetGenerator/Sequential[model]/ResnetBlock[11]/Sequential[conv_block]/Conv2d[5]\n  %179 : Float(1, 256, 64, 64) = Reshape[shape=[1, 256, 64, 64]](%178), scope: ResnetGenerator/Sequential[model]/ResnetBlock[11]/Sequential[conv_block]/InstanceNorm2d[6]\n  %180 : Float(256) = Constant[value=&lt;Tensor&gt;](), scope: ResnetGenerator/Sequential[model]/ResnetBlock[11]/Sequential[conv_block]/InstanceNorm2d[6]\n  %181 : Float(256) = Constant[value=&lt;Tensor&gt;](), scope: ResnetGenerator/Sequential[model]/ResnetBlock[11]/Sequential[conv_block]/InstanceNorm2d[6]\n  %182 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/ResnetBlock[11]/Sequential[conv_block]/InstanceNorm2d[6]\n  %183 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/ResnetBlock[11]/Sequential[conv_block]/InstanceNorm2d[6]\n  %184 : Float(1, 256, 64, 64), %185 : Float(256), %186 : Float(256), %batch_norm_dead_output-187 : UNKNOWN_TYPE, %batch_norm_dead_output-188 : UNKNOWN_TYPE = BatchNormalization[consumed_inputs=[0, 0, 0, 1, 1], epsilon=1e-05, is_test=0, momentum=0.9](%179, %182, %183, %180, %181), scope: ResnetGenerator/Sequential[model]/ResnetBlock[11]/Sequential[conv_block]/InstanceNorm2d[6]\n  %189 : Float(1, 256, 64, 64) = Reshape[shape=[1, 256, 64, 64]](%184), scope: ResnetGenerator/Sequential[model]/ResnetBlock[11]/Sequential[conv_block]/InstanceNorm2d[6]\n  %190 : Float(1, 256, 64, 64) = Add(%162, %189), scope: ResnetGenerator/Sequential[model]/ResnetBlock[11]\n  %191 : Float(1, 256, 66, 66) = Pad[mode=reflect, pads=[0, 0, 1, 1, 0, 0, 1, 1]](%190), scope: ResnetGenerator/Sequential[model]/ResnetBlock[12]/Sequential[conv_block]/ReflectionPad2d[0]\n  %192 : Float(1, 256, 64, 64) = Conv[dilations=[1, 1], group=1, kernel_shape=[3, 3], pads=[0, 0, 0, 0], strides=[1, 1]](%191, %29, %30), scope: ResnetGenerator/Sequential[model]/ResnetBlock[12]/Sequential[conv_block]/Conv2d[1]\n  %193 : Float(1, 256, 64, 64) = Reshape[shape=[1, 256, 64, 64]](%192), scope: ResnetGenerator/Sequential[model]/ResnetBlock[12]/Sequential[conv_block]/InstanceNorm2d[2]\n  %194 : Float(256) = Constant[value=&lt;Tensor&gt;](), scope: ResnetGenerator/Sequential[model]/ResnetBlock[12]/Sequential[conv_block]/InstanceNorm2d[2]\n  %195 : Float(256) = Constant[value=&lt;Tensor&gt;](), scope: ResnetGenerator/Sequential[model]/ResnetBlock[12]/Sequential[conv_block]/InstanceNorm2d[2]\n  %196 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/ResnetBlock[12]/Sequential[conv_block]/InstanceNorm2d[2]\n  %197 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/ResnetBlock[12]/Sequential[conv_block]/InstanceNorm2d[2]\n  %198 : Float(1, 256, 64, 64), %199 : Float(256), %200 : Float(256), %batch_norm_dead_output-201 : UNKNOWN_TYPE, %batch_norm_dead_output-202 : UNKNOWN_TYPE = BatchNormalization[consumed_inputs=[0, 0, 0, 1, 1], epsilon=1e-05, is_test=0, momentum=0.9](%193, %196, %197, %194, %195), scope: ResnetGenerator/Sequential[model]/ResnetBlock[12]/Sequential[conv_block]/InstanceNorm2d[2]\n  %203 : Float(1, 256, 64, 64) = Reshape[shape=[1, 256, 64, 64]](%198), scope: ResnetGenerator/Sequential[model]/ResnetBlock[12]/Sequential[conv_block]/InstanceNorm2d[2]\n  %204 : Float(1, 256, 64, 64) = Relu(%203), scope: ResnetGenerator/Sequential[model]/ResnetBlock[12]/Sequential[conv_block]/ReLU[3]\n  %205 : Float(1, 256, 66, 66) = Pad[mode=reflect, pads=[0, 0, 1, 1, 0, 0, 1, 1]](%204), scope: ResnetGenerator/Sequential[model]/ResnetBlock[12]/Sequential[conv_block]/ReflectionPad2d[4]\n  %206 : Float(1, 256, 64, 64) = Conv[dilations=[1, 1], group=1, kernel_shape=[3, 3], pads=[0, 0, 0, 0], strides=[1, 1]](%205, %33, %34), scope: ResnetGenerator/Sequential[model]/ResnetBlock[12]/Sequential[conv_block]/Conv2d[5]\n  %207 : Float(1, 256, 64, 64) = Reshape[shape=[1, 256, 64, 64]](%206), scope: ResnetGenerator/Sequential[model]/ResnetBlock[12]/Sequential[conv_block]/InstanceNorm2d[6]\n  %208 : Float(256) = Constant[value=&lt;Tensor&gt;](), scope: ResnetGenerator/Sequential[model]/ResnetBlock[12]/Sequential[conv_block]/InstanceNorm2d[6]\n  %209 : Float(256) = Constant[value=&lt;Tensor&gt;](), scope: ResnetGenerator/Sequential[model]/ResnetBlock[12]/Sequential[conv_block]/InstanceNorm2d[6]\n  %210 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/ResnetBlock[12]/Sequential[conv_block]/InstanceNorm2d[6]\n  %211 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/ResnetBlock[12]/Sequential[conv_block]/InstanceNorm2d[6]\n  %212 : Float(1, 256, 64, 64), %213 : Float(256), %214 : Float(256), %batch_norm_dead_output-215 : UNKNOWN_TYPE, %batch_norm_dead_output-216 : UNKNOWN_TYPE = BatchNormalization[consumed_inputs=[0, 0, 0, 1, 1], epsilon=1e-05, is_test=0, momentum=0.9](%207, %210, %211, %208, %209), scope: ResnetGenerator/Sequential[model]/ResnetBlock[12]/Sequential[conv_block]/InstanceNorm2d[6]\n  %217 : Float(1, 256, 64, 64) = Reshape[shape=[1, 256, 64, 64]](%212), scope: ResnetGenerator/Sequential[model]/ResnetBlock[12]/Sequential[conv_block]/InstanceNorm2d[6]\n  %218 : Float(1, 256, 64, 64) = Add(%190, %217), scope: ResnetGenerator/Sequential[model]/ResnetBlock[12]\n  %219 : Float(1, 256, 66, 66) = Pad[mode=reflect, pads=[0, 0, 1, 1, 0, 0, 1, 1]](%218), scope: ResnetGenerator/Sequential[model]/ResnetBlock[13]/Sequential[conv_block]/ReflectionPad2d[0]\n  %220 : Float(1, 256, 64, 64) = Conv[dilations=[1, 1], group=1, kernel_shape=[3, 3], pads=[0, 0, 0, 0], strides=[1, 1]](%219, %37, %38), scope: ResnetGenerator/Sequential[model]/ResnetBlock[13]/Sequential[conv_block]/Conv2d[1]\n  %221 : Float(1, 256, 64, 64) = Reshape[shape=[1, 256, 64, 64]](%220), scope: ResnetGenerator/Sequential[model]/ResnetBlock[13]/Sequential[conv_block]/InstanceNorm2d[2]\n  %222 : Float(256) = Constant[value=&lt;Tensor&gt;](), scope: ResnetGenerator/Sequential[model]/ResnetBlock[13]/Sequential[conv_block]/InstanceNorm2d[2]\n  %223 : Float(256) = Constant[value=&lt;Tensor&gt;](), scope: ResnetGenerator/Sequential[model]/ResnetBlock[13]/Sequential[conv_block]/InstanceNorm2d[2]\n  %224 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/ResnetBlock[13]/Sequential[conv_block]/InstanceNorm2d[2]\n  %225 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/ResnetBlock[13]/Sequential[conv_block]/InstanceNorm2d[2]\n  %226 : Float(1, 256, 64, 64), %227 : Float(256), %228 : Float(256), %batch_norm_dead_output-229 : UNKNOWN_TYPE, %batch_norm_dead_output-230 : UNKNOWN_TYPE = BatchNormalization[consumed_inputs=[0, 0, 0, 1, 1], epsilon=1e-05, is_test=0, momentum=0.9](%221, %224, %225, %222, %223), scope: ResnetGenerator/Sequential[model]/ResnetBlock[13]/Sequential[conv_block]/InstanceNorm2d[2]\n  %231 : Float(1, 256, 64, 64) = Reshape[shape=[1, 256, 64, 64]](%226), scope: ResnetGenerator/Sequential[model]/ResnetBlock[13]/Sequential[conv_block]/InstanceNorm2d[2]\n  %232 : Float(1, 256, 64, 64) = Relu(%231), scope: ResnetGenerator/Sequential[model]/ResnetBlock[13]/Sequential[conv_block]/ReLU[3]\n  %233 : Float(1, 256, 66, 66) = Pad[mode=reflect, pads=[0, 0, 1, 1, 0, 0, 1, 1]](%232), scope: ResnetGenerator/Sequential[model]/ResnetBlock[13]/Sequential[conv_block]/ReflectionPad2d[4]\n  %234 : Float(1, 256, 64, 64) = Conv[dilations=[1, 1], group=1, kernel_shape=[3, 3], pads=[0, 0, 0, 0], strides=[1, 1]](%233, %41, %42), scope: ResnetGenerator/Sequential[model]/ResnetBlock[13]/Sequential[conv_block]/Conv2d[5]\n  %235 : Float(1, 256, 64, 64) = Reshape[shape=[1, 256, 64, 64]](%234), scope: ResnetGenerator/Sequential[model]/ResnetBlock[13]/Sequential[conv_block]/InstanceNorm2d[6]\n  %236 : Float(256) = Constant[value=&lt;Tensor&gt;](), scope: ResnetGenerator/Sequential[model]/ResnetBlock[13]/Sequential[conv_block]/InstanceNorm2d[6]\n  %237 : Float(256) = Constant[value=&lt;Tensor&gt;](), scope: ResnetGenerator/Sequential[model]/ResnetBlock[13]/Sequential[conv_block]/InstanceNorm2d[6]\n  %238 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/ResnetBlock[13]/Sequential[conv_block]/InstanceNorm2d[6]\n  %239 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/ResnetBlock[13]/Sequential[conv_block]/InstanceNorm2d[6]\n  %240 : Float(1, 256, 64, 64), %241 : Float(256), %242 : Float(256), %batch_norm_dead_output-243 : UNKNOWN_TYPE, %batch_norm_dead_output-244 : UNKNOWN_TYPE = BatchNormalization[consumed_inputs=[0, 0, 0, 1, 1], epsilon=1e-05, is_test=0, momentum=0.9](%235, %238, %239, %236, %237), scope: ResnetGenerator/Sequential[model]/ResnetBlock[13]/Sequential[conv_block]/InstanceNorm2d[6]\n  %245 : Float(1, 256, 64, 64) = Reshape[shape=[1, 256, 64, 64]](%240), scope: ResnetGenerator/Sequential[model]/ResnetBlock[13]/Sequential[conv_block]/InstanceNorm2d[6]\n  %246 : Float(1, 256, 64, 64) = Add(%218, %245), scope: ResnetGenerator/Sequential[model]/ResnetBlock[13]\n  %247 : Float(1, 256, 66, 66) = Pad[mode=reflect, pads=[0, 0, 1, 1, 0, 0, 1, 1]](%246), scope: ResnetGenerator/Sequential[model]/ResnetBlock[14]/Sequential[conv_block]/ReflectionPad2d[0]\n  %248 : Float(1, 256, 64, 64) = Conv[dilations=[1, 1], group=1, kernel_shape=[3, 3], pads=[0, 0, 0, 0], strides=[1, 1]](%247, %45, %46), scope: ResnetGenerator/Sequential[model]/ResnetBlock[14]/Sequential[conv_block]/Conv2d[1]\n  %249 : Float(1, 256, 64, 64) = Reshape[shape=[1, 256, 64, 64]](%248), scope: ResnetGenerator/Sequential[model]/ResnetBlock[14]/Sequential[conv_block]/InstanceNorm2d[2]\n  %250 : Float(256) = Constant[value=&lt;Tensor&gt;](), scope: ResnetGenerator/Sequential[model]/ResnetBlock[14]/Sequential[conv_block]/InstanceNorm2d[2]\n  %251 : Float(256) = Constant[value=&lt;Tensor&gt;](), scope: ResnetGenerator/Sequential[model]/ResnetBlock[14]/Sequential[conv_block]/InstanceNorm2d[2]\n  %252 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/ResnetBlock[14]/Sequential[conv_block]/InstanceNorm2d[2]\n  %253 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/ResnetBlock[14]/Sequential[conv_block]/InstanceNorm2d[2]\n  %254 : Float(1, 256, 64, 64), %255 : Float(256), %256 : Float(256), %batch_norm_dead_output-257 : UNKNOWN_TYPE, %batch_norm_dead_output-258 : UNKNOWN_TYPE = BatchNormalization[consumed_inputs=[0, 0, 0, 1, 1], epsilon=1e-05, is_test=0, momentum=0.9](%249, %252, %253, %250, %251), scope: ResnetGenerator/Sequential[model]/ResnetBlock[14]/Sequential[conv_block]/InstanceNorm2d[2]\n  %259 : Float(1, 256, 64, 64) = Reshape[shape=[1, 256, 64, 64]](%254), scope: ResnetGenerator/Sequential[model]/ResnetBlock[14]/Sequential[conv_block]/InstanceNorm2d[2]\n  %260 : Float(1, 256, 64, 64) = Relu(%259), scope: ResnetGenerator/Sequential[model]/ResnetBlock[14]/Sequential[conv_block]/ReLU[3]\n  %261 : Float(1, 256, 66, 66) = Pad[mode=reflect, pads=[0, 0, 1, 1, 0, 0, 1, 1]](%260), scope: ResnetGenerator/Sequential[model]/ResnetBlock[14]/Sequential[conv_block]/ReflectionPad2d[4]\n  %262 : Float(1, 256, 64, 64) = Conv[dilations=[1, 1], group=1, kernel_shape=[3, 3], pads=[0, 0, 0, 0], strides=[1, 1]](%261, %49, %50), scope: ResnetGenerator/Sequential[model]/ResnetBlock[14]/Sequential[conv_block]/Conv2d[5]\n  %263 : Float(1, 256, 64, 64) = Reshape[shape=[1, 256, 64, 64]](%262), scope: ResnetGenerator/Sequential[model]/ResnetBlock[14]/Sequential[conv_block]/InstanceNorm2d[6]\n  %264 : Float(256) = Constant[value=&lt;Tensor&gt;](), scope: ResnetGenerator/Sequential[model]/ResnetBlock[14]/Sequential[conv_block]/InstanceNorm2d[6]\n  %265 : Float(256) = Constant[value=&lt;Tensor&gt;](), scope: ResnetGenerator/Sequential[model]/ResnetBlock[14]/Sequential[conv_block]/InstanceNorm2d[6]\n  %266 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/ResnetBlock[14]/Sequential[conv_block]/InstanceNorm2d[6]\n  %267 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/ResnetBlock[14]/Sequential[conv_block]/InstanceNorm2d[6]\n  %268 : Float(1, 256, 64, 64), %269 : Float(256), %270 : Float(256), %batch_norm_dead_output-271 : UNKNOWN_TYPE, %batch_norm_dead_output-272 : UNKNOWN_TYPE = BatchNormalization[consumed_inputs=[0, 0, 0, 1, 1], epsilon=1e-05, is_test=0, momentum=0.9](%263, %266, %267, %264, %265), scope: ResnetGenerator/Sequential[model]/ResnetBlock[14]/Sequential[conv_block]/InstanceNorm2d[6]\n  %273 : Float(1, 256, 64, 64) = Reshape[shape=[1, 256, 64, 64]](%268), scope: ResnetGenerator/Sequential[model]/ResnetBlock[14]/Sequential[conv_block]/InstanceNorm2d[6]\n  %274 : Float(1, 256, 64, 64) = Add(%246, %273), scope: ResnetGenerator/Sequential[model]/ResnetBlock[14]\n  %275 : Float(1, 256, 66, 66) = Pad[mode=reflect, pads=[0, 0, 1, 1, 0, 0, 1, 1]](%274), scope: ResnetGenerator/Sequential[model]/ResnetBlock[15]/Sequential[conv_block]/ReflectionPad2d[0]\n  %276 : Float(1, 256, 64, 64) = Conv[dilations=[1, 1], group=1, kernel_shape=[3, 3], pads=[0, 0, 0, 0], strides=[1, 1]](%275, %53, %54), scope: ResnetGenerator/Sequential[model]/ResnetBlock[15]/Sequential[conv_block]/Conv2d[1]\n  %277 : Float(1, 256, 64, 64) = Reshape[shape=[1, 256, 64, 64]](%276), scope: ResnetGenerator/Sequential[model]/ResnetBlock[15]/Sequential[conv_block]/InstanceNorm2d[2]\n  %278 : Float(256) = Constant[value=&lt;Tensor&gt;](), scope: ResnetGenerator/Sequential[model]/ResnetBlock[15]/Sequential[conv_block]/InstanceNorm2d[2]\n  %279 : Float(256) = Constant[value=&lt;Tensor&gt;](), scope: ResnetGenerator/Sequential[model]/ResnetBlock[15]/Sequential[conv_block]/InstanceNorm2d[2]\n  %280 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/ResnetBlock[15]/Sequential[conv_block]/InstanceNorm2d[2]\n  %281 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/ResnetBlock[15]/Sequential[conv_block]/InstanceNorm2d[2]\n  %282 : Float(1, 256, 64, 64), %283 : Float(256), %284 : Float(256), %batch_norm_dead_output-285 : UNKNOWN_TYPE, %batch_norm_dead_output-286 : UNKNOWN_TYPE = BatchNormalization[consumed_inputs=[0, 0, 0, 1, 1], epsilon=1e-05, is_test=0, momentum=0.9](%277, %280, %281, %278, %279), scope: ResnetGenerator/Sequential[model]/ResnetBlock[15]/Sequential[conv_block]/InstanceNorm2d[2]\n  %287 : Float(1, 256, 64, 64) = Reshape[shape=[1, 256, 64, 64]](%282), scope: ResnetGenerator/Sequential[model]/ResnetBlock[15]/Sequential[conv_block]/InstanceNorm2d[2]\n  %288 : Float(1, 256, 64, 64) = Relu(%287), scope: ResnetGenerator/Sequential[model]/ResnetBlock[15]/Sequential[conv_block]/ReLU[3]\n  %289 : Float(1, 256, 66, 66) = Pad[mode=reflect, pads=[0, 0, 1, 1, 0, 0, 1, 1]](%288), scope: ResnetGenerator/Sequential[model]/ResnetBlock[15]/Sequential[conv_block]/ReflectionPad2d[4]\n  %290 : Float(1, 256, 64, 64) = Conv[dilations=[1, 1], group=1, kernel_shape=[3, 3], pads=[0, 0, 0, 0], strides=[1, 1]](%289, %57, %58), scope: ResnetGenerator/Sequential[model]/ResnetBlock[15]/Sequential[conv_block]/Conv2d[5]\n  %291 : Float(1, 256, 64, 64) = Reshape[shape=[1, 256, 64, 64]](%290), scope: ResnetGenerator/Sequential[model]/ResnetBlock[15]/Sequential[conv_block]/InstanceNorm2d[6]\n  %292 : Float(256) = Constant[value=&lt;Tensor&gt;](), scope: ResnetGenerator/Sequential[model]/ResnetBlock[15]/Sequential[conv_block]/InstanceNorm2d[6]\n  %293 : Float(256) = Constant[value=&lt;Tensor&gt;](), scope: ResnetGenerator/Sequential[model]/ResnetBlock[15]/Sequential[conv_block]/InstanceNorm2d[6]\n  %294 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/ResnetBlock[15]/Sequential[conv_block]/InstanceNorm2d[6]\n  %295 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/ResnetBlock[15]/Sequential[conv_block]/InstanceNorm2d[6]\n  %296 : Float(1, 256, 64, 64), %297 : Float(256), %298 : Float(256), %batch_norm_dead_output-299 : UNKNOWN_TYPE, %batch_norm_dead_output-300 : UNKNOWN_TYPE = BatchNormalization[consumed_inputs=[0, 0, 0, 1, 1], epsilon=1e-05, is_test=0, momentum=0.9](%291, %294, %295, %292, %293), scope: ResnetGenerator/Sequential[model]/ResnetBlock[15]/Sequential[conv_block]/InstanceNorm2d[6]\n  %301 : Float(1, 256, 64, 64) = Reshape[shape=[1, 256, 64, 64]](%296), scope: ResnetGenerator/Sequential[model]/ResnetBlock[15]/Sequential[conv_block]/InstanceNorm2d[6]\n  %302 : Float(1, 256, 64, 64) = Add(%274, %301), scope: ResnetGenerator/Sequential[model]/ResnetBlock[15]\n  %303 : Float(1, 256, 66, 66) = Pad[mode=reflect, pads=[0, 0, 1, 1, 0, 0, 1, 1]](%302), scope: ResnetGenerator/Sequential[model]/ResnetBlock[16]/Sequential[conv_block]/ReflectionPad2d[0]\n  %304 : Float(1, 256, 64, 64) = Conv[dilations=[1, 1], group=1, kernel_shape=[3, 3], pads=[0, 0, 0, 0], strides=[1, 1]](%303, %61, %62), scope: ResnetGenerator/Sequential[model]/ResnetBlock[16]/Sequential[conv_block]/Conv2d[1]\n  %305 : Float(1, 256, 64, 64) = Reshape[shape=[1, 256, 64, 64]](%304), scope: ResnetGenerator/Sequential[model]/ResnetBlock[16]/Sequential[conv_block]/InstanceNorm2d[2]\n  %306 : Float(256) = Constant[value=&lt;Tensor&gt;](), scope: ResnetGenerator/Sequential[model]/ResnetBlock[16]/Sequential[conv_block]/InstanceNorm2d[2]\n  %307 : Float(256) = Constant[value=&lt;Tensor&gt;](), scope: ResnetGenerator/Sequential[model]/ResnetBlock[16]/Sequential[conv_block]/InstanceNorm2d[2]\n  %308 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/ResnetBlock[16]/Sequential[conv_block]/InstanceNorm2d[2]\n  %309 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/ResnetBlock[16]/Sequential[conv_block]/InstanceNorm2d[2]\n  %310 : Float(1, 256, 64, 64), %311 : Float(256), %312 : Float(256), %batch_norm_dead_output-313 : UNKNOWN_TYPE, %batch_norm_dead_output-314 : UNKNOWN_TYPE = BatchNormalization[consumed_inputs=[0, 0, 0, 1, 1], epsilon=1e-05, is_test=0, momentum=0.9](%305, %308, %309, %306, %307), scope: ResnetGenerator/Sequential[model]/ResnetBlock[16]/Sequential[conv_block]/InstanceNorm2d[2]\n  %315 : Float(1, 256, 64, 64) = Reshape[shape=[1, 256, 64, 64]](%310), scope: ResnetGenerator/Sequential[model]/ResnetBlock[16]/Sequential[conv_block]/InstanceNorm2d[2]\n  %316 : Float(1, 256, 64, 64) = Relu(%315), scope: ResnetGenerator/Sequential[model]/ResnetBlock[16]/Sequential[conv_block]/ReLU[3]\n  %317 : Float(1, 256, 66, 66) = Pad[mode=reflect, pads=[0, 0, 1, 1, 0, 0, 1, 1]](%316), scope: ResnetGenerator/Sequential[model]/ResnetBlock[16]/Sequential[conv_block]/ReflectionPad2d[4]\n  %318 : Float(1, 256, 64, 64) = Conv[dilations=[1, 1], group=1, kernel_shape=[3, 3], pads=[0, 0, 0, 0], strides=[1, 1]](%317, %65, %66), scope: ResnetGenerator/Sequential[model]/ResnetBlock[16]/Sequential[conv_block]/Conv2d[5]\n  %319 : Float(1, 256, 64, 64) = Reshape[shape=[1, 256, 64, 64]](%318), scope: ResnetGenerator/Sequential[model]/ResnetBlock[16]/Sequential[conv_block]/InstanceNorm2d[6]\n  %320 : Float(256) = Constant[value=&lt;Tensor&gt;](), scope: ResnetGenerator/Sequential[model]/ResnetBlock[16]/Sequential[conv_block]/InstanceNorm2d[6]\n  %321 : Float(256) = Constant[value=&lt;Tensor&gt;](), scope: ResnetGenerator/Sequential[model]/ResnetBlock[16]/Sequential[conv_block]/InstanceNorm2d[6]\n  %322 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/ResnetBlock[16]/Sequential[conv_block]/InstanceNorm2d[6]\n  %323 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/ResnetBlock[16]/Sequential[conv_block]/InstanceNorm2d[6]\n  %324 : Float(1, 256, 64, 64), %325 : Float(256), %326 : Float(256), %batch_norm_dead_output-327 : UNKNOWN_TYPE, %batch_norm_dead_output-328 : UNKNOWN_TYPE = BatchNormalization[consumed_inputs=[0, 0, 0, 1, 1], epsilon=1e-05, is_test=0, momentum=0.9](%319, %322, %323, %320, %321), scope: ResnetGenerator/Sequential[model]/ResnetBlock[16]/Sequential[conv_block]/InstanceNorm2d[6]\n  %329 : Float(1, 256, 64, 64) = Reshape[shape=[1, 256, 64, 64]](%324), scope: ResnetGenerator/Sequential[model]/ResnetBlock[16]/Sequential[conv_block]/InstanceNorm2d[6]\n  %330 : Float(1, 256, 64, 64) = Add(%302, %329), scope: ResnetGenerator/Sequential[model]/ResnetBlock[16]\n  %331 : Float(1, 256, 66, 66) = Pad[mode=reflect, pads=[0, 0, 1, 1, 0, 0, 1, 1]](%330), scope: ResnetGenerator/Sequential[model]/ResnetBlock[17]/Sequential[conv_block]/ReflectionPad2d[0]\n  %332 : Float(1, 256, 64, 64) = Conv[dilations=[1, 1], group=1, kernel_shape=[3, 3], pads=[0, 0, 0, 0], strides=[1, 1]](%331, %69, %70), scope: ResnetGenerator/Sequential[model]/ResnetBlock[17]/Sequential[conv_block]/Conv2d[1]\n  %333 : Float(1, 256, 64, 64) = Reshape[shape=[1, 256, 64, 64]](%332), scope: ResnetGenerator/Sequential[model]/ResnetBlock[17]/Sequential[conv_block]/InstanceNorm2d[2]\n  %334 : Float(256) = Constant[value=&lt;Tensor&gt;](), scope: ResnetGenerator/Sequential[model]/ResnetBlock[17]/Sequential[conv_block]/InstanceNorm2d[2]\n  %335 : Float(256) = Constant[value=&lt;Tensor&gt;](), scope: ResnetGenerator/Sequential[model]/ResnetBlock[17]/Sequential[conv_block]/InstanceNorm2d[2]\n  %336 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/ResnetBlock[17]/Sequential[conv_block]/InstanceNorm2d[2]\n  %337 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/ResnetBlock[17]/Sequential[conv_block]/InstanceNorm2d[2]\n  %338 : Float(1, 256, 64, 64), %339 : Float(256), %340 : Float(256), %batch_norm_dead_output-341 : UNKNOWN_TYPE, %batch_norm_dead_output-342 : UNKNOWN_TYPE = BatchNormalization[consumed_inputs=[0, 0, 0, 1, 1], epsilon=1e-05, is_test=0, momentum=0.9](%333, %336, %337, %334, %335), scope: ResnetGenerator/Sequential[model]/ResnetBlock[17]/Sequential[conv_block]/InstanceNorm2d[2]\n  %343 : Float(1, 256, 64, 64) = Reshape[shape=[1, 256, 64, 64]](%338), scope: ResnetGenerator/Sequential[model]/ResnetBlock[17]/Sequential[conv_block]/InstanceNorm2d[2]\n  %344 : Float(1, 256, 64, 64) = Relu(%343), scope: ResnetGenerator/Sequential[model]/ResnetBlock[17]/Sequential[conv_block]/ReLU[3]\n  %345 : Float(1, 256, 66, 66) = Pad[mode=reflect, pads=[0, 0, 1, 1, 0, 0, 1, 1]](%344), scope: ResnetGenerator/Sequential[model]/ResnetBlock[17]/Sequential[conv_block]/ReflectionPad2d[4]\n  %346 : Float(1, 256, 64, 64) = Conv[dilations=[1, 1], group=1, kernel_shape=[3, 3], pads=[0, 0, 0, 0], strides=[1, 1]](%345, %73, %74), scope: ResnetGenerator/Sequential[model]/ResnetBlock[17]/Sequential[conv_block]/Conv2d[5]\n  %347 : Float(1, 256, 64, 64) = Reshape[shape=[1, 256, 64, 64]](%346), scope: ResnetGenerator/Sequential[model]/ResnetBlock[17]/Sequential[conv_block]/InstanceNorm2d[6]\n  %348 : Float(256) = Constant[value=&lt;Tensor&gt;](), scope: ResnetGenerator/Sequential[model]/ResnetBlock[17]/Sequential[conv_block]/InstanceNorm2d[6]\n  %349 : Float(256) = Constant[value=&lt;Tensor&gt;](), scope: ResnetGenerator/Sequential[model]/ResnetBlock[17]/Sequential[conv_block]/InstanceNorm2d[6]\n  %350 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/ResnetBlock[17]/Sequential[conv_block]/InstanceNorm2d[6]\n  %351 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/ResnetBlock[17]/Sequential[conv_block]/InstanceNorm2d[6]\n  %352 : Float(1, 256, 64, 64), %353 : Float(256), %354 : Float(256), %batch_norm_dead_output-355 : UNKNOWN_TYPE, %batch_norm_dead_output-356 : UNKNOWN_TYPE = BatchNormalization[consumed_inputs=[0, 0, 0, 1, 1], epsilon=1e-05, is_test=0, momentum=0.9](%347, %350, %351, %348, %349), scope: ResnetGenerator/Sequential[model]/ResnetBlock[17]/Sequential[conv_block]/InstanceNorm2d[6]\n  %357 : Float(1, 256, 64, 64) = Reshape[shape=[1, 256, 64, 64]](%352), scope: ResnetGenerator/Sequential[model]/ResnetBlock[17]/Sequential[conv_block]/InstanceNorm2d[6]\n  %358 : Float(1, 256, 64, 64) = Add(%330, %357), scope: ResnetGenerator/Sequential[model]/ResnetBlock[17]\n  %359 : Float(1, 256, 66, 66) = Pad[mode=reflect, pads=[0, 0, 1, 1, 0, 0, 1, 1]](%358), scope: ResnetGenerator/Sequential[model]/ResnetBlock[18]/Sequential[conv_block]/ReflectionPad2d[0]\n  %360 : Float(1, 256, 64, 64) = Conv[dilations=[1, 1], group=1, kernel_shape=[3, 3], pads=[0, 0, 0, 0], strides=[1, 1]](%359, %77, %78), scope: ResnetGenerator/Sequential[model]/ResnetBlock[18]/Sequential[conv_block]/Conv2d[1]\n  %361 : Float(1, 256, 64, 64) = Reshape[shape=[1, 256, 64, 64]](%360), scope: ResnetGenerator/Sequential[model]/ResnetBlock[18]/Sequential[conv_block]/InstanceNorm2d[2]\n  %362 : Float(256) = Constant[value=&lt;Tensor&gt;](), scope: ResnetGenerator/Sequential[model]/ResnetBlock[18]/Sequential[conv_block]/InstanceNorm2d[2]\n  %363 : Float(256) = Constant[value=&lt;Tensor&gt;](), scope: ResnetGenerator/Sequential[model]/ResnetBlock[18]/Sequential[conv_block]/InstanceNorm2d[2]\n  %364 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/ResnetBlock[18]/Sequential[conv_block]/InstanceNorm2d[2]\n  %365 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/ResnetBlock[18]/Sequential[conv_block]/InstanceNorm2d[2]\n  %366 : Float(1, 256, 64, 64), %367 : Float(256), %368 : Float(256), %batch_norm_dead_output-369 : UNKNOWN_TYPE, %batch_norm_dead_output-370 : UNKNOWN_TYPE = BatchNormalization[consumed_inputs=[0, 0, 0, 1, 1], epsilon=1e-05, is_test=0, momentum=0.9](%361, %364, %365, %362, %363), scope: ResnetGenerator/Sequential[model]/ResnetBlock[18]/Sequential[conv_block]/InstanceNorm2d[2]\n  %371 : Float(1, 256, 64, 64) = Reshape[shape=[1, 256, 64, 64]](%366), scope: ResnetGenerator/Sequential[model]/ResnetBlock[18]/Sequential[conv_block]/InstanceNorm2d[2]\n  %372 : Float(1, 256, 64, 64) = Relu(%371), scope: ResnetGenerator/Sequential[model]/ResnetBlock[18]/Sequential[conv_block]/ReLU[3]\n  %373 : Float(1, 256, 66, 66) = Pad[mode=reflect, pads=[0, 0, 1, 1, 0, 0, 1, 1]](%372), scope: ResnetGenerator/Sequential[model]/ResnetBlock[18]/Sequential[conv_block]/ReflectionPad2d[4]\n  %374 : Float(1, 256, 64, 64) = Conv[dilations=[1, 1], group=1, kernel_shape=[3, 3], pads=[0, 0, 0, 0], strides=[1, 1]](%373, %81, %82), scope: ResnetGenerator/Sequential[model]/ResnetBlock[18]/Sequential[conv_block]/Conv2d[5]\n  %375 : Float(1, 256, 64, 64) = Reshape[shape=[1, 256, 64, 64]](%374), scope: ResnetGenerator/Sequential[model]/ResnetBlock[18]/Sequential[conv_block]/InstanceNorm2d[6]\n  %376 : Float(256) = Constant[value=&lt;Tensor&gt;](), scope: ResnetGenerator/Sequential[model]/ResnetBlock[18]/Sequential[conv_block]/InstanceNorm2d[6]\n  %377 : Float(256) = Constant[value=&lt;Tensor&gt;](), scope: ResnetGenerator/Sequential[model]/ResnetBlock[18]/Sequential[conv_block]/InstanceNorm2d[6]\n  %378 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/ResnetBlock[18]/Sequential[conv_block]/InstanceNorm2d[6]\n  %379 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/ResnetBlock[18]/Sequential[conv_block]/InstanceNorm2d[6]\n  %380 : Float(1, 256, 64, 64), %381 : Float(256), %382 : Float(256), %batch_norm_dead_output-383 : UNKNOWN_TYPE, %batch_norm_dead_output-384 : UNKNOWN_TYPE = BatchNormalization[consumed_inputs=[0, 0, 0, 1, 1], epsilon=1e-05, is_test=0, momentum=0.9](%375, %378, %379, %376, %377), scope: ResnetGenerator/Sequential[model]/ResnetBlock[18]/Sequential[conv_block]/InstanceNorm2d[6]\n  %385 : Float(1, 256, 64, 64) = Reshape[shape=[1, 256, 64, 64]](%380), scope: ResnetGenerator/Sequential[model]/ResnetBlock[18]/Sequential[conv_block]/InstanceNorm2d[6]\n  %386 : Float(1, 256, 64, 64) = Add(%358, %385), scope: ResnetGenerator/Sequential[model]/ResnetBlock[18]\n  %387 : Float(1, 128, 128, 128) = _convolution[stride=[2, 2], padding=[1, 1], dilation=[1, 1], transposed=1, output_padding=[1, 1], groups=1, benchmark=0, deterministic=0, cudnn_enabled=1](%386, %85, %86), scope: ResnetGenerator/Sequential[model]/ConvTranspose2d[19]\n  %388 : Float(1, 128, 128, 128) = Reshape[shape=[1, 128, 128, 128]](%387), scope: ResnetGenerator/Sequential[model]/InstanceNorm2d[20]\n  %389 : Float(128) = Constant[value=&lt;Tensor&gt;](), scope: ResnetGenerator/Sequential[model]/InstanceNorm2d[20]\n  %390 : Float(128) = Constant[value=&lt;Tensor&gt;](), scope: ResnetGenerator/Sequential[model]/InstanceNorm2d[20]\n  %391 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/InstanceNorm2d[20]\n  %392 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/InstanceNorm2d[20]\n  %393 : Float(1, 128, 128, 128), %394 : Float(128), %395 : Float(128), %batch_norm_dead_output-396 : UNKNOWN_TYPE, %batch_norm_dead_output-397 : UNKNOWN_TYPE = BatchNormalization[consumed_inputs=[0, 0, 0, 1, 1], epsilon=1e-05, is_test=0, momentum=0.9](%388, %391, %392, %389, %390), scope: ResnetGenerator/Sequential[model]/InstanceNorm2d[20]\n  %398 : Float(1, 128, 128, 128) = Reshape[shape=[1, 128, 128, 128]](%393), scope: ResnetGenerator/Sequential[model]/InstanceNorm2d[20]\n  %399 : Float(1, 128, 128, 128) = Relu(%398), scope: ResnetGenerator/Sequential[model]/ReLU[21]\n  %400 : Float(1, 64, 256, 256) = _convolution[stride=[2, 2], padding=[1, 1], dilation=[1, 1], transposed=1, output_padding=[1, 1], groups=1, benchmark=0, deterministic=0, cudnn_enabled=1](%399, %89, %90), scope: ResnetGenerator/Sequential[model]/ConvTranspose2d[22]\n  %401 : Float(1, 64, 256, 256) = Reshape[shape=[1, 64, 256, 256]](%400), scope: ResnetGenerator/Sequential[model]/InstanceNorm2d[23]\n  %402 : Float(64) = Constant[value=&lt;Tensor&gt;](), scope: ResnetGenerator/Sequential[model]/InstanceNorm2d[23]\n  %403 : Float(64) = Constant[value=&lt;Tensor&gt;](), scope: ResnetGenerator/Sequential[model]/InstanceNorm2d[23]\n  %404 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/InstanceNorm2d[23]\n  %405 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/InstanceNorm2d[23]\n  %406 : Float(1, 64, 256, 256), %407 : Float(64), %408 : Float(64), %batch_norm_dead_output-409 : UNKNOWN_TYPE, %batch_norm_dead_output-410 : UNKNOWN_TYPE = BatchNormalization[consumed_inputs=[0, 0, 0, 1, 1], epsilon=1e-05, is_test=0, momentum=0.9](%401, %404, %405, %402, %403), scope: ResnetGenerator/Sequential[model]/InstanceNorm2d[23]\n  %411 : Float(1, 64, 256, 256) = Reshape[shape=[1, 64, 256, 256]](%406), scope: ResnetGenerator/Sequential[model]/InstanceNorm2d[23]\n  %412 : Float(1, 64, 256, 256) = Relu(%411), scope: ResnetGenerator/Sequential[model]/ReLU[24]\n  %413 : Float(1, 64, 262, 262) = Pad[mode=reflect, pads=[0, 0, 3, 3, 0, 0, 3, 3]](%412), scope: ResnetGenerator/Sequential[model]/ReflectionPad2d[25]\n  %414 : Float(1, 3, 256, 256) = Conv[dilations=[1, 1], group=1, kernel_shape=[7, 7], pads=[0, 0, 0, 0], strides=[1, 1]](%413, %93, %94), scope: ResnetGenerator/Sequential[model]/Conv2d[26]\n  %415 : Float(1, 3, 256, 256) = Tanh(%414), scope: ResnetGenerator/Sequential[model]/Tanh[27]\n  return (%415);\n}\n</code></pre>", "body_text": "@ezyang do you mean information below?\ngraph(%0 : Float(1, 3, 256, 256)\n      %1 : Float(64, 3, 7, 7)\n      %2 : Float(64)\n      %3 : Float(64)\n      %4 : Float(64)\n      %5 : Float(128, 64, 3, 3)\n      %6 : Float(128)\n      %7 : Float(128)\n      %8 : Float(128)\n      %9 : Float(256, 128, 3, 3)\n      %10 : Float(256)\n      %11 : Float(256)\n      %12 : Float(256)\n      %13 : Float(256, 256, 3, 3)\n      %14 : Float(256)\n      %15 : Float(256)\n      %16 : Float(256)\n      %17 : Float(256, 256, 3, 3)\n      %18 : Float(256)\n      %19 : Float(256)\n      %20 : Float(256)\n      %21 : Float(256, 256, 3, 3)\n      %22 : Float(256)\n      %23 : Float(256)\n      %24 : Float(256)\n      %25 : Float(256, 256, 3, 3)\n      %26 : Float(256)\n      %27 : Float(256)\n      %28 : Float(256)\n      %29 : Float(256, 256, 3, 3)\n      %30 : Float(256)\n      %31 : Float(256)\n      %32 : Float(256)\n      %33 : Float(256, 256, 3, 3)\n      %34 : Float(256)\n      %35 : Float(256)\n      %36 : Float(256)\n      %37 : Float(256, 256, 3, 3)\n      %38 : Float(256)\n      %39 : Float(256)\n      %40 : Float(256)\n      %41 : Float(256, 256, 3, 3)\n      %42 : Float(256)\n      %43 : Float(256)\n      %44 : Float(256)\n      %45 : Float(256, 256, 3, 3)\n      %46 : Float(256)\n      %47 : Float(256)\n      %48 : Float(256)\n      %49 : Float(256, 256, 3, 3)\n      %50 : Float(256)\n      %51 : Float(256)\n      %52 : Float(256)\n      %53 : Float(256, 256, 3, 3)\n      %54 : Float(256)\n      %55 : Float(256)\n      %56 : Float(256)\n      %57 : Float(256, 256, 3, 3)\n      %58 : Float(256)\n      %59 : Float(256)\n      %60 : Float(256)\n      %61 : Float(256, 256, 3, 3)\n      %62 : Float(256)\n      %63 : Float(256)\n      %64 : Float(256)\n      %65 : Float(256, 256, 3, 3)\n      %66 : Float(256)\n      %67 : Float(256)\n      %68 : Float(256)\n      %69 : Float(256, 256, 3, 3)\n      %70 : Float(256)\n      %71 : Float(256)\n      %72 : Float(256)\n      %73 : Float(256, 256, 3, 3)\n      %74 : Float(256)\n      %75 : Float(256)\n      %76 : Float(256)\n      %77 : Float(256, 256, 3, 3)\n      %78 : Float(256)\n      %79 : Float(256)\n      %80 : Float(256)\n      %81 : Float(256, 256, 3, 3)\n      %82 : Float(256)\n      %83 : Float(256)\n      %84 : Float(256)\n      %85 : Float(256, 128, 3, 3)\n      %86 : Float(128)\n      %87 : Float(128)\n      %88 : Float(128)\n      %89 : Float(128, 64, 3, 3)\n      %90 : Float(64)\n      %91 : Float(64)\n      %92 : Float(64)\n      %93 : Float(3, 64, 7, 7)\n      %94 : Float(3)) {\n  %95 : Float(1, 3, 262, 262) = Pad[mode=reflect, pads=[0, 0, 3, 3, 0, 0, 3, 3]](%0), scope: ResnetGenerator/Sequential[model]/ReflectionPad2d[0]\n  %96 : Float(1, 64, 256, 256) = Conv[dilations=[1, 1], group=1, kernel_shape=[7, 7], pads=[0, 0, 0, 0], strides=[1, 1]](%95, %1, %2), scope: ResnetGenerator/Sequential[model]/Conv2d[1]\n  %97 : Float(1, 64, 256, 256) = Reshape[shape=[1, 64, 256, 256]](%96), scope: ResnetGenerator/Sequential[model]/InstanceNorm2d[2]\n  %98 : Float(64) = Constant[value=<Tensor>](), scope: ResnetGenerator/Sequential[model]/InstanceNorm2d[2]\n  %99 : Float(64) = Constant[value=<Tensor>](), scope: ResnetGenerator/Sequential[model]/InstanceNorm2d[2]\n  %100 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/InstanceNorm2d[2]\n  %101 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/InstanceNorm2d[2]\n  %102 : Float(1, 64, 256, 256), %103 : Float(64), %104 : Float(64), %batch_norm_dead_output-105 : UNKNOWN_TYPE, %batch_norm_dead_output-106 : UNKNOWN_TYPE = BatchNormalization[consumed_inputs=[0, 0, 0, 1, 1], epsilon=1e-05, is_test=0, momentum=0.9](%97, %100, %101, %98, %99), scope: ResnetGenerator/Sequential[model]/InstanceNorm2d[2]\n  %107 : Float(1, 64, 256, 256) = Reshape[shape=[1, 64, 256, 256]](%102), scope: ResnetGenerator/Sequential[model]/InstanceNorm2d[2]\n  %108 : Float(1, 64, 256, 256) = Relu(%107), scope: ResnetGenerator/Sequential[model]/ReLU[3]\n  %109 : Float(1, 128, 128, 128) = Conv[dilations=[1, 1], group=1, kernel_shape=[3, 3], pads=[1, 1, 1, 1], strides=[2, 2]](%108, %5, %6), scope: ResnetGenerator/Sequential[model]/Conv2d[4]\n  %110 : Float(1, 128, 128, 128) = Reshape[shape=[1, 128, 128, 128]](%109), scope: ResnetGenerator/Sequential[model]/InstanceNorm2d[5]\n  %111 : Float(128) = Constant[value=<Tensor>](), scope: ResnetGenerator/Sequential[model]/InstanceNorm2d[5]\n  %112 : Float(128) = Constant[value=<Tensor>](), scope: ResnetGenerator/Sequential[model]/InstanceNorm2d[5]\n  %113 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/InstanceNorm2d[5]\n  %114 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/InstanceNorm2d[5]\n  %115 : Float(1, 128, 128, 128), %116 : Float(128), %117 : Float(128), %batch_norm_dead_output-118 : UNKNOWN_TYPE, %batch_norm_dead_output-119 : UNKNOWN_TYPE = BatchNormalization[consumed_inputs=[0, 0, 0, 1, 1], epsilon=1e-05, is_test=0, momentum=0.9](%110, %113, %114, %111, %112), scope: ResnetGenerator/Sequential[model]/InstanceNorm2d[5]\n  %120 : Float(1, 128, 128, 128) = Reshape[shape=[1, 128, 128, 128]](%115), scope: ResnetGenerator/Sequential[model]/InstanceNorm2d[5]\n  %121 : Float(1, 128, 128, 128) = Relu(%120), scope: ResnetGenerator/Sequential[model]/ReLU[6]\n  %122 : Float(1, 256, 64, 64) = Conv[dilations=[1, 1], group=1, kernel_shape=[3, 3], pads=[1, 1, 1, 1], strides=[2, 2]](%121, %9, %10), scope: ResnetGenerator/Sequential[model]/Conv2d[7]\n  %123 : Float(1, 256, 64, 64) = Reshape[shape=[1, 256, 64, 64]](%122), scope: ResnetGenerator/Sequential[model]/InstanceNorm2d[8]\n  %124 : Float(256) = Constant[value=<Tensor>](), scope: ResnetGenerator/Sequential[model]/InstanceNorm2d[8]\n  %125 : Float(256) = Constant[value=<Tensor>](), scope: ResnetGenerator/Sequential[model]/InstanceNorm2d[8]\n  %126 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/InstanceNorm2d[8]\n  %127 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/InstanceNorm2d[8]\n  %128 : Float(1, 256, 64, 64), %129 : Float(256), %130 : Float(256), %batch_norm_dead_output-131 : UNKNOWN_TYPE, %batch_norm_dead_output-132 : UNKNOWN_TYPE = BatchNormalization[consumed_inputs=[0, 0, 0, 1, 1], epsilon=1e-05, is_test=0, momentum=0.9](%123, %126, %127, %124, %125), scope: ResnetGenerator/Sequential[model]/InstanceNorm2d[8]\n  %133 : Float(1, 256, 64, 64) = Reshape[shape=[1, 256, 64, 64]](%128), scope: ResnetGenerator/Sequential[model]/InstanceNorm2d[8]\n  %134 : Float(1, 256, 64, 64) = Relu(%133), scope: ResnetGenerator/Sequential[model]/ReLU[9]\n  %135 : Float(1, 256, 66, 66) = Pad[mode=reflect, pads=[0, 0, 1, 1, 0, 0, 1, 1]](%134), scope: ResnetGenerator/Sequential[model]/ResnetBlock[10]/Sequential[conv_block]/ReflectionPad2d[0]\n  %136 : Float(1, 256, 64, 64) = Conv[dilations=[1, 1], group=1, kernel_shape=[3, 3], pads=[0, 0, 0, 0], strides=[1, 1]](%135, %13, %14), scope: ResnetGenerator/Sequential[model]/ResnetBlock[10]/Sequential[conv_block]/Conv2d[1]\n  %137 : Float(1, 256, 64, 64) = Reshape[shape=[1, 256, 64, 64]](%136), scope: ResnetGenerator/Sequential[model]/ResnetBlock[10]/Sequential[conv_block]/InstanceNorm2d[2]\n  %138 : Float(256) = Constant[value=<Tensor>](), scope: ResnetGenerator/Sequential[model]/ResnetBlock[10]/Sequential[conv_block]/InstanceNorm2d[2]\n  %139 : Float(256) = Constant[value=<Tensor>](), scope: ResnetGenerator/Sequential[model]/ResnetBlock[10]/Sequential[conv_block]/InstanceNorm2d[2]\n  %140 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/ResnetBlock[10]/Sequential[conv_block]/InstanceNorm2d[2]\n  %141 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/ResnetBlock[10]/Sequential[conv_block]/InstanceNorm2d[2]\n  %142 : Float(1, 256, 64, 64), %143 : Float(256), %144 : Float(256), %batch_norm_dead_output-145 : UNKNOWN_TYPE, %batch_norm_dead_output-146 : UNKNOWN_TYPE = BatchNormalization[consumed_inputs=[0, 0, 0, 1, 1], epsilon=1e-05, is_test=0, momentum=0.9](%137, %140, %141, %138, %139), scope: ResnetGenerator/Sequential[model]/ResnetBlock[10]/Sequential[conv_block]/InstanceNorm2d[2]\n  %147 : Float(1, 256, 64, 64) = Reshape[shape=[1, 256, 64, 64]](%142), scope: ResnetGenerator/Sequential[model]/ResnetBlock[10]/Sequential[conv_block]/InstanceNorm2d[2]\n  %148 : Float(1, 256, 64, 64) = Relu(%147), scope: ResnetGenerator/Sequential[model]/ResnetBlock[10]/Sequential[conv_block]/ReLU[3]\n  %149 : Float(1, 256, 66, 66) = Pad[mode=reflect, pads=[0, 0, 1, 1, 0, 0, 1, 1]](%148), scope: ResnetGenerator/Sequential[model]/ResnetBlock[10]/Sequential[conv_block]/ReflectionPad2d[4]\n  %150 : Float(1, 256, 64, 64) = Conv[dilations=[1, 1], group=1, kernel_shape=[3, 3], pads=[0, 0, 0, 0], strides=[1, 1]](%149, %17, %18), scope: ResnetGenerator/Sequential[model]/ResnetBlock[10]/Sequential[conv_block]/Conv2d[5]\n  %151 : Float(1, 256, 64, 64) = Reshape[shape=[1, 256, 64, 64]](%150), scope: ResnetGenerator/Sequential[model]/ResnetBlock[10]/Sequential[conv_block]/InstanceNorm2d[6]\n  %152 : Float(256) = Constant[value=<Tensor>](), scope: ResnetGenerator/Sequential[model]/ResnetBlock[10]/Sequential[conv_block]/InstanceNorm2d[6]\n  %153 : Float(256) = Constant[value=<Tensor>](), scope: ResnetGenerator/Sequential[model]/ResnetBlock[10]/Sequential[conv_block]/InstanceNorm2d[6]\n  %154 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/ResnetBlock[10]/Sequential[conv_block]/InstanceNorm2d[6]\n  %155 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/ResnetBlock[10]/Sequential[conv_block]/InstanceNorm2d[6]\n  %156 : Float(1, 256, 64, 64), %157 : Float(256), %158 : Float(256), %batch_norm_dead_output-159 : UNKNOWN_TYPE, %batch_norm_dead_output-160 : UNKNOWN_TYPE = BatchNormalization[consumed_inputs=[0, 0, 0, 1, 1], epsilon=1e-05, is_test=0, momentum=0.9](%151, %154, %155, %152, %153), scope: ResnetGenerator/Sequential[model]/ResnetBlock[10]/Sequential[conv_block]/InstanceNorm2d[6]\n  %161 : Float(1, 256, 64, 64) = Reshape[shape=[1, 256, 64, 64]](%156), scope: ResnetGenerator/Sequential[model]/ResnetBlock[10]/Sequential[conv_block]/InstanceNorm2d[6]\n  %162 : Float(1, 256, 64, 64) = Add(%134, %161), scope: ResnetGenerator/Sequential[model]/ResnetBlock[10]\n  %163 : Float(1, 256, 66, 66) = Pad[mode=reflect, pads=[0, 0, 1, 1, 0, 0, 1, 1]](%162), scope: ResnetGenerator/Sequential[model]/ResnetBlock[11]/Sequential[conv_block]/ReflectionPad2d[0]\n  %164 : Float(1, 256, 64, 64) = Conv[dilations=[1, 1], group=1, kernel_shape=[3, 3], pads=[0, 0, 0, 0], strides=[1, 1]](%163, %21, %22), scope: ResnetGenerator/Sequential[model]/ResnetBlock[11]/Sequential[conv_block]/Conv2d[1]\n  %165 : Float(1, 256, 64, 64) = Reshape[shape=[1, 256, 64, 64]](%164), scope: ResnetGenerator/Sequential[model]/ResnetBlock[11]/Sequential[conv_block]/InstanceNorm2d[2]\n  %166 : Float(256) = Constant[value=<Tensor>](), scope: ResnetGenerator/Sequential[model]/ResnetBlock[11]/Sequential[conv_block]/InstanceNorm2d[2]\n  %167 : Float(256) = Constant[value=<Tensor>](), scope: ResnetGenerator/Sequential[model]/ResnetBlock[11]/Sequential[conv_block]/InstanceNorm2d[2]\n  %168 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/ResnetBlock[11]/Sequential[conv_block]/InstanceNorm2d[2]\n  %169 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/ResnetBlock[11]/Sequential[conv_block]/InstanceNorm2d[2]\n  %170 : Float(1, 256, 64, 64), %171 : Float(256), %172 : Float(256), %batch_norm_dead_output-173 : UNKNOWN_TYPE, %batch_norm_dead_output-174 : UNKNOWN_TYPE = BatchNormalization[consumed_inputs=[0, 0, 0, 1, 1], epsilon=1e-05, is_test=0, momentum=0.9](%165, %168, %169, %166, %167), scope: ResnetGenerator/Sequential[model]/ResnetBlock[11]/Sequential[conv_block]/InstanceNorm2d[2]\n  %175 : Float(1, 256, 64, 64) = Reshape[shape=[1, 256, 64, 64]](%170), scope: ResnetGenerator/Sequential[model]/ResnetBlock[11]/Sequential[conv_block]/InstanceNorm2d[2]\n  %176 : Float(1, 256, 64, 64) = Relu(%175), scope: ResnetGenerator/Sequential[model]/ResnetBlock[11]/Sequential[conv_block]/ReLU[3]\n  %177 : Float(1, 256, 66, 66) = Pad[mode=reflect, pads=[0, 0, 1, 1, 0, 0, 1, 1]](%176), scope: ResnetGenerator/Sequential[model]/ResnetBlock[11]/Sequential[conv_block]/ReflectionPad2d[4]\n  %178 : Float(1, 256, 64, 64) = Conv[dilations=[1, 1], group=1, kernel_shape=[3, 3], pads=[0, 0, 0, 0], strides=[1, 1]](%177, %25, %26), scope: ResnetGenerator/Sequential[model]/ResnetBlock[11]/Sequential[conv_block]/Conv2d[5]\n  %179 : Float(1, 256, 64, 64) = Reshape[shape=[1, 256, 64, 64]](%178), scope: ResnetGenerator/Sequential[model]/ResnetBlock[11]/Sequential[conv_block]/InstanceNorm2d[6]\n  %180 : Float(256) = Constant[value=<Tensor>](), scope: ResnetGenerator/Sequential[model]/ResnetBlock[11]/Sequential[conv_block]/InstanceNorm2d[6]\n  %181 : Float(256) = Constant[value=<Tensor>](), scope: ResnetGenerator/Sequential[model]/ResnetBlock[11]/Sequential[conv_block]/InstanceNorm2d[6]\n  %182 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/ResnetBlock[11]/Sequential[conv_block]/InstanceNorm2d[6]\n  %183 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/ResnetBlock[11]/Sequential[conv_block]/InstanceNorm2d[6]\n  %184 : Float(1, 256, 64, 64), %185 : Float(256), %186 : Float(256), %batch_norm_dead_output-187 : UNKNOWN_TYPE, %batch_norm_dead_output-188 : UNKNOWN_TYPE = BatchNormalization[consumed_inputs=[0, 0, 0, 1, 1], epsilon=1e-05, is_test=0, momentum=0.9](%179, %182, %183, %180, %181), scope: ResnetGenerator/Sequential[model]/ResnetBlock[11]/Sequential[conv_block]/InstanceNorm2d[6]\n  %189 : Float(1, 256, 64, 64) = Reshape[shape=[1, 256, 64, 64]](%184), scope: ResnetGenerator/Sequential[model]/ResnetBlock[11]/Sequential[conv_block]/InstanceNorm2d[6]\n  %190 : Float(1, 256, 64, 64) = Add(%162, %189), scope: ResnetGenerator/Sequential[model]/ResnetBlock[11]\n  %191 : Float(1, 256, 66, 66) = Pad[mode=reflect, pads=[0, 0, 1, 1, 0, 0, 1, 1]](%190), scope: ResnetGenerator/Sequential[model]/ResnetBlock[12]/Sequential[conv_block]/ReflectionPad2d[0]\n  %192 : Float(1, 256, 64, 64) = Conv[dilations=[1, 1], group=1, kernel_shape=[3, 3], pads=[0, 0, 0, 0], strides=[1, 1]](%191, %29, %30), scope: ResnetGenerator/Sequential[model]/ResnetBlock[12]/Sequential[conv_block]/Conv2d[1]\n  %193 : Float(1, 256, 64, 64) = Reshape[shape=[1, 256, 64, 64]](%192), scope: ResnetGenerator/Sequential[model]/ResnetBlock[12]/Sequential[conv_block]/InstanceNorm2d[2]\n  %194 : Float(256) = Constant[value=<Tensor>](), scope: ResnetGenerator/Sequential[model]/ResnetBlock[12]/Sequential[conv_block]/InstanceNorm2d[2]\n  %195 : Float(256) = Constant[value=<Tensor>](), scope: ResnetGenerator/Sequential[model]/ResnetBlock[12]/Sequential[conv_block]/InstanceNorm2d[2]\n  %196 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/ResnetBlock[12]/Sequential[conv_block]/InstanceNorm2d[2]\n  %197 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/ResnetBlock[12]/Sequential[conv_block]/InstanceNorm2d[2]\n  %198 : Float(1, 256, 64, 64), %199 : Float(256), %200 : Float(256), %batch_norm_dead_output-201 : UNKNOWN_TYPE, %batch_norm_dead_output-202 : UNKNOWN_TYPE = BatchNormalization[consumed_inputs=[0, 0, 0, 1, 1], epsilon=1e-05, is_test=0, momentum=0.9](%193, %196, %197, %194, %195), scope: ResnetGenerator/Sequential[model]/ResnetBlock[12]/Sequential[conv_block]/InstanceNorm2d[2]\n  %203 : Float(1, 256, 64, 64) = Reshape[shape=[1, 256, 64, 64]](%198), scope: ResnetGenerator/Sequential[model]/ResnetBlock[12]/Sequential[conv_block]/InstanceNorm2d[2]\n  %204 : Float(1, 256, 64, 64) = Relu(%203), scope: ResnetGenerator/Sequential[model]/ResnetBlock[12]/Sequential[conv_block]/ReLU[3]\n  %205 : Float(1, 256, 66, 66) = Pad[mode=reflect, pads=[0, 0, 1, 1, 0, 0, 1, 1]](%204), scope: ResnetGenerator/Sequential[model]/ResnetBlock[12]/Sequential[conv_block]/ReflectionPad2d[4]\n  %206 : Float(1, 256, 64, 64) = Conv[dilations=[1, 1], group=1, kernel_shape=[3, 3], pads=[0, 0, 0, 0], strides=[1, 1]](%205, %33, %34), scope: ResnetGenerator/Sequential[model]/ResnetBlock[12]/Sequential[conv_block]/Conv2d[5]\n  %207 : Float(1, 256, 64, 64) = Reshape[shape=[1, 256, 64, 64]](%206), scope: ResnetGenerator/Sequential[model]/ResnetBlock[12]/Sequential[conv_block]/InstanceNorm2d[6]\n  %208 : Float(256) = Constant[value=<Tensor>](), scope: ResnetGenerator/Sequential[model]/ResnetBlock[12]/Sequential[conv_block]/InstanceNorm2d[6]\n  %209 : Float(256) = Constant[value=<Tensor>](), scope: ResnetGenerator/Sequential[model]/ResnetBlock[12]/Sequential[conv_block]/InstanceNorm2d[6]\n  %210 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/ResnetBlock[12]/Sequential[conv_block]/InstanceNorm2d[6]\n  %211 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/ResnetBlock[12]/Sequential[conv_block]/InstanceNorm2d[6]\n  %212 : Float(1, 256, 64, 64), %213 : Float(256), %214 : Float(256), %batch_norm_dead_output-215 : UNKNOWN_TYPE, %batch_norm_dead_output-216 : UNKNOWN_TYPE = BatchNormalization[consumed_inputs=[0, 0, 0, 1, 1], epsilon=1e-05, is_test=0, momentum=0.9](%207, %210, %211, %208, %209), scope: ResnetGenerator/Sequential[model]/ResnetBlock[12]/Sequential[conv_block]/InstanceNorm2d[6]\n  %217 : Float(1, 256, 64, 64) = Reshape[shape=[1, 256, 64, 64]](%212), scope: ResnetGenerator/Sequential[model]/ResnetBlock[12]/Sequential[conv_block]/InstanceNorm2d[6]\n  %218 : Float(1, 256, 64, 64) = Add(%190, %217), scope: ResnetGenerator/Sequential[model]/ResnetBlock[12]\n  %219 : Float(1, 256, 66, 66) = Pad[mode=reflect, pads=[0, 0, 1, 1, 0, 0, 1, 1]](%218), scope: ResnetGenerator/Sequential[model]/ResnetBlock[13]/Sequential[conv_block]/ReflectionPad2d[0]\n  %220 : Float(1, 256, 64, 64) = Conv[dilations=[1, 1], group=1, kernel_shape=[3, 3], pads=[0, 0, 0, 0], strides=[1, 1]](%219, %37, %38), scope: ResnetGenerator/Sequential[model]/ResnetBlock[13]/Sequential[conv_block]/Conv2d[1]\n  %221 : Float(1, 256, 64, 64) = Reshape[shape=[1, 256, 64, 64]](%220), scope: ResnetGenerator/Sequential[model]/ResnetBlock[13]/Sequential[conv_block]/InstanceNorm2d[2]\n  %222 : Float(256) = Constant[value=<Tensor>](), scope: ResnetGenerator/Sequential[model]/ResnetBlock[13]/Sequential[conv_block]/InstanceNorm2d[2]\n  %223 : Float(256) = Constant[value=<Tensor>](), scope: ResnetGenerator/Sequential[model]/ResnetBlock[13]/Sequential[conv_block]/InstanceNorm2d[2]\n  %224 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/ResnetBlock[13]/Sequential[conv_block]/InstanceNorm2d[2]\n  %225 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/ResnetBlock[13]/Sequential[conv_block]/InstanceNorm2d[2]\n  %226 : Float(1, 256, 64, 64), %227 : Float(256), %228 : Float(256), %batch_norm_dead_output-229 : UNKNOWN_TYPE, %batch_norm_dead_output-230 : UNKNOWN_TYPE = BatchNormalization[consumed_inputs=[0, 0, 0, 1, 1], epsilon=1e-05, is_test=0, momentum=0.9](%221, %224, %225, %222, %223), scope: ResnetGenerator/Sequential[model]/ResnetBlock[13]/Sequential[conv_block]/InstanceNorm2d[2]\n  %231 : Float(1, 256, 64, 64) = Reshape[shape=[1, 256, 64, 64]](%226), scope: ResnetGenerator/Sequential[model]/ResnetBlock[13]/Sequential[conv_block]/InstanceNorm2d[2]\n  %232 : Float(1, 256, 64, 64) = Relu(%231), scope: ResnetGenerator/Sequential[model]/ResnetBlock[13]/Sequential[conv_block]/ReLU[3]\n  %233 : Float(1, 256, 66, 66) = Pad[mode=reflect, pads=[0, 0, 1, 1, 0, 0, 1, 1]](%232), scope: ResnetGenerator/Sequential[model]/ResnetBlock[13]/Sequential[conv_block]/ReflectionPad2d[4]\n  %234 : Float(1, 256, 64, 64) = Conv[dilations=[1, 1], group=1, kernel_shape=[3, 3], pads=[0, 0, 0, 0], strides=[1, 1]](%233, %41, %42), scope: ResnetGenerator/Sequential[model]/ResnetBlock[13]/Sequential[conv_block]/Conv2d[5]\n  %235 : Float(1, 256, 64, 64) = Reshape[shape=[1, 256, 64, 64]](%234), scope: ResnetGenerator/Sequential[model]/ResnetBlock[13]/Sequential[conv_block]/InstanceNorm2d[6]\n  %236 : Float(256) = Constant[value=<Tensor>](), scope: ResnetGenerator/Sequential[model]/ResnetBlock[13]/Sequential[conv_block]/InstanceNorm2d[6]\n  %237 : Float(256) = Constant[value=<Tensor>](), scope: ResnetGenerator/Sequential[model]/ResnetBlock[13]/Sequential[conv_block]/InstanceNorm2d[6]\n  %238 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/ResnetBlock[13]/Sequential[conv_block]/InstanceNorm2d[6]\n  %239 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/ResnetBlock[13]/Sequential[conv_block]/InstanceNorm2d[6]\n  %240 : Float(1, 256, 64, 64), %241 : Float(256), %242 : Float(256), %batch_norm_dead_output-243 : UNKNOWN_TYPE, %batch_norm_dead_output-244 : UNKNOWN_TYPE = BatchNormalization[consumed_inputs=[0, 0, 0, 1, 1], epsilon=1e-05, is_test=0, momentum=0.9](%235, %238, %239, %236, %237), scope: ResnetGenerator/Sequential[model]/ResnetBlock[13]/Sequential[conv_block]/InstanceNorm2d[6]\n  %245 : Float(1, 256, 64, 64) = Reshape[shape=[1, 256, 64, 64]](%240), scope: ResnetGenerator/Sequential[model]/ResnetBlock[13]/Sequential[conv_block]/InstanceNorm2d[6]\n  %246 : Float(1, 256, 64, 64) = Add(%218, %245), scope: ResnetGenerator/Sequential[model]/ResnetBlock[13]\n  %247 : Float(1, 256, 66, 66) = Pad[mode=reflect, pads=[0, 0, 1, 1, 0, 0, 1, 1]](%246), scope: ResnetGenerator/Sequential[model]/ResnetBlock[14]/Sequential[conv_block]/ReflectionPad2d[0]\n  %248 : Float(1, 256, 64, 64) = Conv[dilations=[1, 1], group=1, kernel_shape=[3, 3], pads=[0, 0, 0, 0], strides=[1, 1]](%247, %45, %46), scope: ResnetGenerator/Sequential[model]/ResnetBlock[14]/Sequential[conv_block]/Conv2d[1]\n  %249 : Float(1, 256, 64, 64) = Reshape[shape=[1, 256, 64, 64]](%248), scope: ResnetGenerator/Sequential[model]/ResnetBlock[14]/Sequential[conv_block]/InstanceNorm2d[2]\n  %250 : Float(256) = Constant[value=<Tensor>](), scope: ResnetGenerator/Sequential[model]/ResnetBlock[14]/Sequential[conv_block]/InstanceNorm2d[2]\n  %251 : Float(256) = Constant[value=<Tensor>](), scope: ResnetGenerator/Sequential[model]/ResnetBlock[14]/Sequential[conv_block]/InstanceNorm2d[2]\n  %252 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/ResnetBlock[14]/Sequential[conv_block]/InstanceNorm2d[2]\n  %253 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/ResnetBlock[14]/Sequential[conv_block]/InstanceNorm2d[2]\n  %254 : Float(1, 256, 64, 64), %255 : Float(256), %256 : Float(256), %batch_norm_dead_output-257 : UNKNOWN_TYPE, %batch_norm_dead_output-258 : UNKNOWN_TYPE = BatchNormalization[consumed_inputs=[0, 0, 0, 1, 1], epsilon=1e-05, is_test=0, momentum=0.9](%249, %252, %253, %250, %251), scope: ResnetGenerator/Sequential[model]/ResnetBlock[14]/Sequential[conv_block]/InstanceNorm2d[2]\n  %259 : Float(1, 256, 64, 64) = Reshape[shape=[1, 256, 64, 64]](%254), scope: ResnetGenerator/Sequential[model]/ResnetBlock[14]/Sequential[conv_block]/InstanceNorm2d[2]\n  %260 : Float(1, 256, 64, 64) = Relu(%259), scope: ResnetGenerator/Sequential[model]/ResnetBlock[14]/Sequential[conv_block]/ReLU[3]\n  %261 : Float(1, 256, 66, 66) = Pad[mode=reflect, pads=[0, 0, 1, 1, 0, 0, 1, 1]](%260), scope: ResnetGenerator/Sequential[model]/ResnetBlock[14]/Sequential[conv_block]/ReflectionPad2d[4]\n  %262 : Float(1, 256, 64, 64) = Conv[dilations=[1, 1], group=1, kernel_shape=[3, 3], pads=[0, 0, 0, 0], strides=[1, 1]](%261, %49, %50), scope: ResnetGenerator/Sequential[model]/ResnetBlock[14]/Sequential[conv_block]/Conv2d[5]\n  %263 : Float(1, 256, 64, 64) = Reshape[shape=[1, 256, 64, 64]](%262), scope: ResnetGenerator/Sequential[model]/ResnetBlock[14]/Sequential[conv_block]/InstanceNorm2d[6]\n  %264 : Float(256) = Constant[value=<Tensor>](), scope: ResnetGenerator/Sequential[model]/ResnetBlock[14]/Sequential[conv_block]/InstanceNorm2d[6]\n  %265 : Float(256) = Constant[value=<Tensor>](), scope: ResnetGenerator/Sequential[model]/ResnetBlock[14]/Sequential[conv_block]/InstanceNorm2d[6]\n  %266 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/ResnetBlock[14]/Sequential[conv_block]/InstanceNorm2d[6]\n  %267 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/ResnetBlock[14]/Sequential[conv_block]/InstanceNorm2d[6]\n  %268 : Float(1, 256, 64, 64), %269 : Float(256), %270 : Float(256), %batch_norm_dead_output-271 : UNKNOWN_TYPE, %batch_norm_dead_output-272 : UNKNOWN_TYPE = BatchNormalization[consumed_inputs=[0, 0, 0, 1, 1], epsilon=1e-05, is_test=0, momentum=0.9](%263, %266, %267, %264, %265), scope: ResnetGenerator/Sequential[model]/ResnetBlock[14]/Sequential[conv_block]/InstanceNorm2d[6]\n  %273 : Float(1, 256, 64, 64) = Reshape[shape=[1, 256, 64, 64]](%268), scope: ResnetGenerator/Sequential[model]/ResnetBlock[14]/Sequential[conv_block]/InstanceNorm2d[6]\n  %274 : Float(1, 256, 64, 64) = Add(%246, %273), scope: ResnetGenerator/Sequential[model]/ResnetBlock[14]\n  %275 : Float(1, 256, 66, 66) = Pad[mode=reflect, pads=[0, 0, 1, 1, 0, 0, 1, 1]](%274), scope: ResnetGenerator/Sequential[model]/ResnetBlock[15]/Sequential[conv_block]/ReflectionPad2d[0]\n  %276 : Float(1, 256, 64, 64) = Conv[dilations=[1, 1], group=1, kernel_shape=[3, 3], pads=[0, 0, 0, 0], strides=[1, 1]](%275, %53, %54), scope: ResnetGenerator/Sequential[model]/ResnetBlock[15]/Sequential[conv_block]/Conv2d[1]\n  %277 : Float(1, 256, 64, 64) = Reshape[shape=[1, 256, 64, 64]](%276), scope: ResnetGenerator/Sequential[model]/ResnetBlock[15]/Sequential[conv_block]/InstanceNorm2d[2]\n  %278 : Float(256) = Constant[value=<Tensor>](), scope: ResnetGenerator/Sequential[model]/ResnetBlock[15]/Sequential[conv_block]/InstanceNorm2d[2]\n  %279 : Float(256) = Constant[value=<Tensor>](), scope: ResnetGenerator/Sequential[model]/ResnetBlock[15]/Sequential[conv_block]/InstanceNorm2d[2]\n  %280 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/ResnetBlock[15]/Sequential[conv_block]/InstanceNorm2d[2]\n  %281 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/ResnetBlock[15]/Sequential[conv_block]/InstanceNorm2d[2]\n  %282 : Float(1, 256, 64, 64), %283 : Float(256), %284 : Float(256), %batch_norm_dead_output-285 : UNKNOWN_TYPE, %batch_norm_dead_output-286 : UNKNOWN_TYPE = BatchNormalization[consumed_inputs=[0, 0, 0, 1, 1], epsilon=1e-05, is_test=0, momentum=0.9](%277, %280, %281, %278, %279), scope: ResnetGenerator/Sequential[model]/ResnetBlock[15]/Sequential[conv_block]/InstanceNorm2d[2]\n  %287 : Float(1, 256, 64, 64) = Reshape[shape=[1, 256, 64, 64]](%282), scope: ResnetGenerator/Sequential[model]/ResnetBlock[15]/Sequential[conv_block]/InstanceNorm2d[2]\n  %288 : Float(1, 256, 64, 64) = Relu(%287), scope: ResnetGenerator/Sequential[model]/ResnetBlock[15]/Sequential[conv_block]/ReLU[3]\n  %289 : Float(1, 256, 66, 66) = Pad[mode=reflect, pads=[0, 0, 1, 1, 0, 0, 1, 1]](%288), scope: ResnetGenerator/Sequential[model]/ResnetBlock[15]/Sequential[conv_block]/ReflectionPad2d[4]\n  %290 : Float(1, 256, 64, 64) = Conv[dilations=[1, 1], group=1, kernel_shape=[3, 3], pads=[0, 0, 0, 0], strides=[1, 1]](%289, %57, %58), scope: ResnetGenerator/Sequential[model]/ResnetBlock[15]/Sequential[conv_block]/Conv2d[5]\n  %291 : Float(1, 256, 64, 64) = Reshape[shape=[1, 256, 64, 64]](%290), scope: ResnetGenerator/Sequential[model]/ResnetBlock[15]/Sequential[conv_block]/InstanceNorm2d[6]\n  %292 : Float(256) = Constant[value=<Tensor>](), scope: ResnetGenerator/Sequential[model]/ResnetBlock[15]/Sequential[conv_block]/InstanceNorm2d[6]\n  %293 : Float(256) = Constant[value=<Tensor>](), scope: ResnetGenerator/Sequential[model]/ResnetBlock[15]/Sequential[conv_block]/InstanceNorm2d[6]\n  %294 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/ResnetBlock[15]/Sequential[conv_block]/InstanceNorm2d[6]\n  %295 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/ResnetBlock[15]/Sequential[conv_block]/InstanceNorm2d[6]\n  %296 : Float(1, 256, 64, 64), %297 : Float(256), %298 : Float(256), %batch_norm_dead_output-299 : UNKNOWN_TYPE, %batch_norm_dead_output-300 : UNKNOWN_TYPE = BatchNormalization[consumed_inputs=[0, 0, 0, 1, 1], epsilon=1e-05, is_test=0, momentum=0.9](%291, %294, %295, %292, %293), scope: ResnetGenerator/Sequential[model]/ResnetBlock[15]/Sequential[conv_block]/InstanceNorm2d[6]\n  %301 : Float(1, 256, 64, 64) = Reshape[shape=[1, 256, 64, 64]](%296), scope: ResnetGenerator/Sequential[model]/ResnetBlock[15]/Sequential[conv_block]/InstanceNorm2d[6]\n  %302 : Float(1, 256, 64, 64) = Add(%274, %301), scope: ResnetGenerator/Sequential[model]/ResnetBlock[15]\n  %303 : Float(1, 256, 66, 66) = Pad[mode=reflect, pads=[0, 0, 1, 1, 0, 0, 1, 1]](%302), scope: ResnetGenerator/Sequential[model]/ResnetBlock[16]/Sequential[conv_block]/ReflectionPad2d[0]\n  %304 : Float(1, 256, 64, 64) = Conv[dilations=[1, 1], group=1, kernel_shape=[3, 3], pads=[0, 0, 0, 0], strides=[1, 1]](%303, %61, %62), scope: ResnetGenerator/Sequential[model]/ResnetBlock[16]/Sequential[conv_block]/Conv2d[1]\n  %305 : Float(1, 256, 64, 64) = Reshape[shape=[1, 256, 64, 64]](%304), scope: ResnetGenerator/Sequential[model]/ResnetBlock[16]/Sequential[conv_block]/InstanceNorm2d[2]\n  %306 : Float(256) = Constant[value=<Tensor>](), scope: ResnetGenerator/Sequential[model]/ResnetBlock[16]/Sequential[conv_block]/InstanceNorm2d[2]\n  %307 : Float(256) = Constant[value=<Tensor>](), scope: ResnetGenerator/Sequential[model]/ResnetBlock[16]/Sequential[conv_block]/InstanceNorm2d[2]\n  %308 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/ResnetBlock[16]/Sequential[conv_block]/InstanceNorm2d[2]\n  %309 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/ResnetBlock[16]/Sequential[conv_block]/InstanceNorm2d[2]\n  %310 : Float(1, 256, 64, 64), %311 : Float(256), %312 : Float(256), %batch_norm_dead_output-313 : UNKNOWN_TYPE, %batch_norm_dead_output-314 : UNKNOWN_TYPE = BatchNormalization[consumed_inputs=[0, 0, 0, 1, 1], epsilon=1e-05, is_test=0, momentum=0.9](%305, %308, %309, %306, %307), scope: ResnetGenerator/Sequential[model]/ResnetBlock[16]/Sequential[conv_block]/InstanceNorm2d[2]\n  %315 : Float(1, 256, 64, 64) = Reshape[shape=[1, 256, 64, 64]](%310), scope: ResnetGenerator/Sequential[model]/ResnetBlock[16]/Sequential[conv_block]/InstanceNorm2d[2]\n  %316 : Float(1, 256, 64, 64) = Relu(%315), scope: ResnetGenerator/Sequential[model]/ResnetBlock[16]/Sequential[conv_block]/ReLU[3]\n  %317 : Float(1, 256, 66, 66) = Pad[mode=reflect, pads=[0, 0, 1, 1, 0, 0, 1, 1]](%316), scope: ResnetGenerator/Sequential[model]/ResnetBlock[16]/Sequential[conv_block]/ReflectionPad2d[4]\n  %318 : Float(1, 256, 64, 64) = Conv[dilations=[1, 1], group=1, kernel_shape=[3, 3], pads=[0, 0, 0, 0], strides=[1, 1]](%317, %65, %66), scope: ResnetGenerator/Sequential[model]/ResnetBlock[16]/Sequential[conv_block]/Conv2d[5]\n  %319 : Float(1, 256, 64, 64) = Reshape[shape=[1, 256, 64, 64]](%318), scope: ResnetGenerator/Sequential[model]/ResnetBlock[16]/Sequential[conv_block]/InstanceNorm2d[6]\n  %320 : Float(256) = Constant[value=<Tensor>](), scope: ResnetGenerator/Sequential[model]/ResnetBlock[16]/Sequential[conv_block]/InstanceNorm2d[6]\n  %321 : Float(256) = Constant[value=<Tensor>](), scope: ResnetGenerator/Sequential[model]/ResnetBlock[16]/Sequential[conv_block]/InstanceNorm2d[6]\n  %322 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/ResnetBlock[16]/Sequential[conv_block]/InstanceNorm2d[6]\n  %323 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/ResnetBlock[16]/Sequential[conv_block]/InstanceNorm2d[6]\n  %324 : Float(1, 256, 64, 64), %325 : Float(256), %326 : Float(256), %batch_norm_dead_output-327 : UNKNOWN_TYPE, %batch_norm_dead_output-328 : UNKNOWN_TYPE = BatchNormalization[consumed_inputs=[0, 0, 0, 1, 1], epsilon=1e-05, is_test=0, momentum=0.9](%319, %322, %323, %320, %321), scope: ResnetGenerator/Sequential[model]/ResnetBlock[16]/Sequential[conv_block]/InstanceNorm2d[6]\n  %329 : Float(1, 256, 64, 64) = Reshape[shape=[1, 256, 64, 64]](%324), scope: ResnetGenerator/Sequential[model]/ResnetBlock[16]/Sequential[conv_block]/InstanceNorm2d[6]\n  %330 : Float(1, 256, 64, 64) = Add(%302, %329), scope: ResnetGenerator/Sequential[model]/ResnetBlock[16]\n  %331 : Float(1, 256, 66, 66) = Pad[mode=reflect, pads=[0, 0, 1, 1, 0, 0, 1, 1]](%330), scope: ResnetGenerator/Sequential[model]/ResnetBlock[17]/Sequential[conv_block]/ReflectionPad2d[0]\n  %332 : Float(1, 256, 64, 64) = Conv[dilations=[1, 1], group=1, kernel_shape=[3, 3], pads=[0, 0, 0, 0], strides=[1, 1]](%331, %69, %70), scope: ResnetGenerator/Sequential[model]/ResnetBlock[17]/Sequential[conv_block]/Conv2d[1]\n  %333 : Float(1, 256, 64, 64) = Reshape[shape=[1, 256, 64, 64]](%332), scope: ResnetGenerator/Sequential[model]/ResnetBlock[17]/Sequential[conv_block]/InstanceNorm2d[2]\n  %334 : Float(256) = Constant[value=<Tensor>](), scope: ResnetGenerator/Sequential[model]/ResnetBlock[17]/Sequential[conv_block]/InstanceNorm2d[2]\n  %335 : Float(256) = Constant[value=<Tensor>](), scope: ResnetGenerator/Sequential[model]/ResnetBlock[17]/Sequential[conv_block]/InstanceNorm2d[2]\n  %336 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/ResnetBlock[17]/Sequential[conv_block]/InstanceNorm2d[2]\n  %337 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/ResnetBlock[17]/Sequential[conv_block]/InstanceNorm2d[2]\n  %338 : Float(1, 256, 64, 64), %339 : Float(256), %340 : Float(256), %batch_norm_dead_output-341 : UNKNOWN_TYPE, %batch_norm_dead_output-342 : UNKNOWN_TYPE = BatchNormalization[consumed_inputs=[0, 0, 0, 1, 1], epsilon=1e-05, is_test=0, momentum=0.9](%333, %336, %337, %334, %335), scope: ResnetGenerator/Sequential[model]/ResnetBlock[17]/Sequential[conv_block]/InstanceNorm2d[2]\n  %343 : Float(1, 256, 64, 64) = Reshape[shape=[1, 256, 64, 64]](%338), scope: ResnetGenerator/Sequential[model]/ResnetBlock[17]/Sequential[conv_block]/InstanceNorm2d[2]\n  %344 : Float(1, 256, 64, 64) = Relu(%343), scope: ResnetGenerator/Sequential[model]/ResnetBlock[17]/Sequential[conv_block]/ReLU[3]\n  %345 : Float(1, 256, 66, 66) = Pad[mode=reflect, pads=[0, 0, 1, 1, 0, 0, 1, 1]](%344), scope: ResnetGenerator/Sequential[model]/ResnetBlock[17]/Sequential[conv_block]/ReflectionPad2d[4]\n  %346 : Float(1, 256, 64, 64) = Conv[dilations=[1, 1], group=1, kernel_shape=[3, 3], pads=[0, 0, 0, 0], strides=[1, 1]](%345, %73, %74), scope: ResnetGenerator/Sequential[model]/ResnetBlock[17]/Sequential[conv_block]/Conv2d[5]\n  %347 : Float(1, 256, 64, 64) = Reshape[shape=[1, 256, 64, 64]](%346), scope: ResnetGenerator/Sequential[model]/ResnetBlock[17]/Sequential[conv_block]/InstanceNorm2d[6]\n  %348 : Float(256) = Constant[value=<Tensor>](), scope: ResnetGenerator/Sequential[model]/ResnetBlock[17]/Sequential[conv_block]/InstanceNorm2d[6]\n  %349 : Float(256) = Constant[value=<Tensor>](), scope: ResnetGenerator/Sequential[model]/ResnetBlock[17]/Sequential[conv_block]/InstanceNorm2d[6]\n  %350 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/ResnetBlock[17]/Sequential[conv_block]/InstanceNorm2d[6]\n  %351 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/ResnetBlock[17]/Sequential[conv_block]/InstanceNorm2d[6]\n  %352 : Float(1, 256, 64, 64), %353 : Float(256), %354 : Float(256), %batch_norm_dead_output-355 : UNKNOWN_TYPE, %batch_norm_dead_output-356 : UNKNOWN_TYPE = BatchNormalization[consumed_inputs=[0, 0, 0, 1, 1], epsilon=1e-05, is_test=0, momentum=0.9](%347, %350, %351, %348, %349), scope: ResnetGenerator/Sequential[model]/ResnetBlock[17]/Sequential[conv_block]/InstanceNorm2d[6]\n  %357 : Float(1, 256, 64, 64) = Reshape[shape=[1, 256, 64, 64]](%352), scope: ResnetGenerator/Sequential[model]/ResnetBlock[17]/Sequential[conv_block]/InstanceNorm2d[6]\n  %358 : Float(1, 256, 64, 64) = Add(%330, %357), scope: ResnetGenerator/Sequential[model]/ResnetBlock[17]\n  %359 : Float(1, 256, 66, 66) = Pad[mode=reflect, pads=[0, 0, 1, 1, 0, 0, 1, 1]](%358), scope: ResnetGenerator/Sequential[model]/ResnetBlock[18]/Sequential[conv_block]/ReflectionPad2d[0]\n  %360 : Float(1, 256, 64, 64) = Conv[dilations=[1, 1], group=1, kernel_shape=[3, 3], pads=[0, 0, 0, 0], strides=[1, 1]](%359, %77, %78), scope: ResnetGenerator/Sequential[model]/ResnetBlock[18]/Sequential[conv_block]/Conv2d[1]\n  %361 : Float(1, 256, 64, 64) = Reshape[shape=[1, 256, 64, 64]](%360), scope: ResnetGenerator/Sequential[model]/ResnetBlock[18]/Sequential[conv_block]/InstanceNorm2d[2]\n  %362 : Float(256) = Constant[value=<Tensor>](), scope: ResnetGenerator/Sequential[model]/ResnetBlock[18]/Sequential[conv_block]/InstanceNorm2d[2]\n  %363 : Float(256) = Constant[value=<Tensor>](), scope: ResnetGenerator/Sequential[model]/ResnetBlock[18]/Sequential[conv_block]/InstanceNorm2d[2]\n  %364 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/ResnetBlock[18]/Sequential[conv_block]/InstanceNorm2d[2]\n  %365 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/ResnetBlock[18]/Sequential[conv_block]/InstanceNorm2d[2]\n  %366 : Float(1, 256, 64, 64), %367 : Float(256), %368 : Float(256), %batch_norm_dead_output-369 : UNKNOWN_TYPE, %batch_norm_dead_output-370 : UNKNOWN_TYPE = BatchNormalization[consumed_inputs=[0, 0, 0, 1, 1], epsilon=1e-05, is_test=0, momentum=0.9](%361, %364, %365, %362, %363), scope: ResnetGenerator/Sequential[model]/ResnetBlock[18]/Sequential[conv_block]/InstanceNorm2d[2]\n  %371 : Float(1, 256, 64, 64) = Reshape[shape=[1, 256, 64, 64]](%366), scope: ResnetGenerator/Sequential[model]/ResnetBlock[18]/Sequential[conv_block]/InstanceNorm2d[2]\n  %372 : Float(1, 256, 64, 64) = Relu(%371), scope: ResnetGenerator/Sequential[model]/ResnetBlock[18]/Sequential[conv_block]/ReLU[3]\n  %373 : Float(1, 256, 66, 66) = Pad[mode=reflect, pads=[0, 0, 1, 1, 0, 0, 1, 1]](%372), scope: ResnetGenerator/Sequential[model]/ResnetBlock[18]/Sequential[conv_block]/ReflectionPad2d[4]\n  %374 : Float(1, 256, 64, 64) = Conv[dilations=[1, 1], group=1, kernel_shape=[3, 3], pads=[0, 0, 0, 0], strides=[1, 1]](%373, %81, %82), scope: ResnetGenerator/Sequential[model]/ResnetBlock[18]/Sequential[conv_block]/Conv2d[5]\n  %375 : Float(1, 256, 64, 64) = Reshape[shape=[1, 256, 64, 64]](%374), scope: ResnetGenerator/Sequential[model]/ResnetBlock[18]/Sequential[conv_block]/InstanceNorm2d[6]\n  %376 : Float(256) = Constant[value=<Tensor>](), scope: ResnetGenerator/Sequential[model]/ResnetBlock[18]/Sequential[conv_block]/InstanceNorm2d[6]\n  %377 : Float(256) = Constant[value=<Tensor>](), scope: ResnetGenerator/Sequential[model]/ResnetBlock[18]/Sequential[conv_block]/InstanceNorm2d[6]\n  %378 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/ResnetBlock[18]/Sequential[conv_block]/InstanceNorm2d[6]\n  %379 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/ResnetBlock[18]/Sequential[conv_block]/InstanceNorm2d[6]\n  %380 : Float(1, 256, 64, 64), %381 : Float(256), %382 : Float(256), %batch_norm_dead_output-383 : UNKNOWN_TYPE, %batch_norm_dead_output-384 : UNKNOWN_TYPE = BatchNormalization[consumed_inputs=[0, 0, 0, 1, 1], epsilon=1e-05, is_test=0, momentum=0.9](%375, %378, %379, %376, %377), scope: ResnetGenerator/Sequential[model]/ResnetBlock[18]/Sequential[conv_block]/InstanceNorm2d[6]\n  %385 : Float(1, 256, 64, 64) = Reshape[shape=[1, 256, 64, 64]](%380), scope: ResnetGenerator/Sequential[model]/ResnetBlock[18]/Sequential[conv_block]/InstanceNorm2d[6]\n  %386 : Float(1, 256, 64, 64) = Add(%358, %385), scope: ResnetGenerator/Sequential[model]/ResnetBlock[18]\n  %387 : Float(1, 128, 128, 128) = _convolution[stride=[2, 2], padding=[1, 1], dilation=[1, 1], transposed=1, output_padding=[1, 1], groups=1, benchmark=0, deterministic=0, cudnn_enabled=1](%386, %85, %86), scope: ResnetGenerator/Sequential[model]/ConvTranspose2d[19]\n  %388 : Float(1, 128, 128, 128) = Reshape[shape=[1, 128, 128, 128]](%387), scope: ResnetGenerator/Sequential[model]/InstanceNorm2d[20]\n  %389 : Float(128) = Constant[value=<Tensor>](), scope: ResnetGenerator/Sequential[model]/InstanceNorm2d[20]\n  %390 : Float(128) = Constant[value=<Tensor>](), scope: ResnetGenerator/Sequential[model]/InstanceNorm2d[20]\n  %391 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/InstanceNorm2d[20]\n  %392 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/InstanceNorm2d[20]\n  %393 : Float(1, 128, 128, 128), %394 : Float(128), %395 : Float(128), %batch_norm_dead_output-396 : UNKNOWN_TYPE, %batch_norm_dead_output-397 : UNKNOWN_TYPE = BatchNormalization[consumed_inputs=[0, 0, 0, 1, 1], epsilon=1e-05, is_test=0, momentum=0.9](%388, %391, %392, %389, %390), scope: ResnetGenerator/Sequential[model]/InstanceNorm2d[20]\n  %398 : Float(1, 128, 128, 128) = Reshape[shape=[1, 128, 128, 128]](%393), scope: ResnetGenerator/Sequential[model]/InstanceNorm2d[20]\n  %399 : Float(1, 128, 128, 128) = Relu(%398), scope: ResnetGenerator/Sequential[model]/ReLU[21]\n  %400 : Float(1, 64, 256, 256) = _convolution[stride=[2, 2], padding=[1, 1], dilation=[1, 1], transposed=1, output_padding=[1, 1], groups=1, benchmark=0, deterministic=0, cudnn_enabled=1](%399, %89, %90), scope: ResnetGenerator/Sequential[model]/ConvTranspose2d[22]\n  %401 : Float(1, 64, 256, 256) = Reshape[shape=[1, 64, 256, 256]](%400), scope: ResnetGenerator/Sequential[model]/InstanceNorm2d[23]\n  %402 : Float(64) = Constant[value=<Tensor>](), scope: ResnetGenerator/Sequential[model]/InstanceNorm2d[23]\n  %403 : Float(64) = Constant[value=<Tensor>](), scope: ResnetGenerator/Sequential[model]/InstanceNorm2d[23]\n  %404 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/InstanceNorm2d[23]\n  %405 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/InstanceNorm2d[23]\n  %406 : Float(1, 64, 256, 256), %407 : Float(64), %408 : Float(64), %batch_norm_dead_output-409 : UNKNOWN_TYPE, %batch_norm_dead_output-410 : UNKNOWN_TYPE = BatchNormalization[consumed_inputs=[0, 0, 0, 1, 1], epsilon=1e-05, is_test=0, momentum=0.9](%401, %404, %405, %402, %403), scope: ResnetGenerator/Sequential[model]/InstanceNorm2d[23]\n  %411 : Float(1, 64, 256, 256) = Reshape[shape=[1, 64, 256, 256]](%406), scope: ResnetGenerator/Sequential[model]/InstanceNorm2d[23]\n  %412 : Float(1, 64, 256, 256) = Relu(%411), scope: ResnetGenerator/Sequential[model]/ReLU[24]\n  %413 : Float(1, 64, 262, 262) = Pad[mode=reflect, pads=[0, 0, 3, 3, 0, 0, 3, 3]](%412), scope: ResnetGenerator/Sequential[model]/ReflectionPad2d[25]\n  %414 : Float(1, 3, 256, 256) = Conv[dilations=[1, 1], group=1, kernel_shape=[7, 7], pads=[0, 0, 0, 0], strides=[1, 1]](%413, %93, %94), scope: ResnetGenerator/Sequential[model]/Conv2d[26]\n  %415 : Float(1, 3, 256, 256) = Tanh(%414), scope: ResnetGenerator/Sequential[model]/Tanh[27]\n  return (%415);\n}", "body": "@ezyang do you mean information below?\r\n\r\n```\r\ngraph(%0 : Float(1, 3, 256, 256)\r\n      %1 : Float(64, 3, 7, 7)\r\n      %2 : Float(64)\r\n      %3 : Float(64)\r\n      %4 : Float(64)\r\n      %5 : Float(128, 64, 3, 3)\r\n      %6 : Float(128)\r\n      %7 : Float(128)\r\n      %8 : Float(128)\r\n      %9 : Float(256, 128, 3, 3)\r\n      %10 : Float(256)\r\n      %11 : Float(256)\r\n      %12 : Float(256)\r\n      %13 : Float(256, 256, 3, 3)\r\n      %14 : Float(256)\r\n      %15 : Float(256)\r\n      %16 : Float(256)\r\n      %17 : Float(256, 256, 3, 3)\r\n      %18 : Float(256)\r\n      %19 : Float(256)\r\n      %20 : Float(256)\r\n      %21 : Float(256, 256, 3, 3)\r\n      %22 : Float(256)\r\n      %23 : Float(256)\r\n      %24 : Float(256)\r\n      %25 : Float(256, 256, 3, 3)\r\n      %26 : Float(256)\r\n      %27 : Float(256)\r\n      %28 : Float(256)\r\n      %29 : Float(256, 256, 3, 3)\r\n      %30 : Float(256)\r\n      %31 : Float(256)\r\n      %32 : Float(256)\r\n      %33 : Float(256, 256, 3, 3)\r\n      %34 : Float(256)\r\n      %35 : Float(256)\r\n      %36 : Float(256)\r\n      %37 : Float(256, 256, 3, 3)\r\n      %38 : Float(256)\r\n      %39 : Float(256)\r\n      %40 : Float(256)\r\n      %41 : Float(256, 256, 3, 3)\r\n      %42 : Float(256)\r\n      %43 : Float(256)\r\n      %44 : Float(256)\r\n      %45 : Float(256, 256, 3, 3)\r\n      %46 : Float(256)\r\n      %47 : Float(256)\r\n      %48 : Float(256)\r\n      %49 : Float(256, 256, 3, 3)\r\n      %50 : Float(256)\r\n      %51 : Float(256)\r\n      %52 : Float(256)\r\n      %53 : Float(256, 256, 3, 3)\r\n      %54 : Float(256)\r\n      %55 : Float(256)\r\n      %56 : Float(256)\r\n      %57 : Float(256, 256, 3, 3)\r\n      %58 : Float(256)\r\n      %59 : Float(256)\r\n      %60 : Float(256)\r\n      %61 : Float(256, 256, 3, 3)\r\n      %62 : Float(256)\r\n      %63 : Float(256)\r\n      %64 : Float(256)\r\n      %65 : Float(256, 256, 3, 3)\r\n      %66 : Float(256)\r\n      %67 : Float(256)\r\n      %68 : Float(256)\r\n      %69 : Float(256, 256, 3, 3)\r\n      %70 : Float(256)\r\n      %71 : Float(256)\r\n      %72 : Float(256)\r\n      %73 : Float(256, 256, 3, 3)\r\n      %74 : Float(256)\r\n      %75 : Float(256)\r\n      %76 : Float(256)\r\n      %77 : Float(256, 256, 3, 3)\r\n      %78 : Float(256)\r\n      %79 : Float(256)\r\n      %80 : Float(256)\r\n      %81 : Float(256, 256, 3, 3)\r\n      %82 : Float(256)\r\n      %83 : Float(256)\r\n      %84 : Float(256)\r\n      %85 : Float(256, 128, 3, 3)\r\n      %86 : Float(128)\r\n      %87 : Float(128)\r\n      %88 : Float(128)\r\n      %89 : Float(128, 64, 3, 3)\r\n      %90 : Float(64)\r\n      %91 : Float(64)\r\n      %92 : Float(64)\r\n      %93 : Float(3, 64, 7, 7)\r\n      %94 : Float(3)) {\r\n  %95 : Float(1, 3, 262, 262) = Pad[mode=reflect, pads=[0, 0, 3, 3, 0, 0, 3, 3]](%0), scope: ResnetGenerator/Sequential[model]/ReflectionPad2d[0]\r\n  %96 : Float(1, 64, 256, 256) = Conv[dilations=[1, 1], group=1, kernel_shape=[7, 7], pads=[0, 0, 0, 0], strides=[1, 1]](%95, %1, %2), scope: ResnetGenerator/Sequential[model]/Conv2d[1]\r\n  %97 : Float(1, 64, 256, 256) = Reshape[shape=[1, 64, 256, 256]](%96), scope: ResnetGenerator/Sequential[model]/InstanceNorm2d[2]\r\n  %98 : Float(64) = Constant[value=<Tensor>](), scope: ResnetGenerator/Sequential[model]/InstanceNorm2d[2]\r\n  %99 : Float(64) = Constant[value=<Tensor>](), scope: ResnetGenerator/Sequential[model]/InstanceNorm2d[2]\r\n  %100 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/InstanceNorm2d[2]\r\n  %101 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/InstanceNorm2d[2]\r\n  %102 : Float(1, 64, 256, 256), %103 : Float(64), %104 : Float(64), %batch_norm_dead_output-105 : UNKNOWN_TYPE, %batch_norm_dead_output-106 : UNKNOWN_TYPE = BatchNormalization[consumed_inputs=[0, 0, 0, 1, 1], epsilon=1e-05, is_test=0, momentum=0.9](%97, %100, %101, %98, %99), scope: ResnetGenerator/Sequential[model]/InstanceNorm2d[2]\r\n  %107 : Float(1, 64, 256, 256) = Reshape[shape=[1, 64, 256, 256]](%102), scope: ResnetGenerator/Sequential[model]/InstanceNorm2d[2]\r\n  %108 : Float(1, 64, 256, 256) = Relu(%107), scope: ResnetGenerator/Sequential[model]/ReLU[3]\r\n  %109 : Float(1, 128, 128, 128) = Conv[dilations=[1, 1], group=1, kernel_shape=[3, 3], pads=[1, 1, 1, 1], strides=[2, 2]](%108, %5, %6), scope: ResnetGenerator/Sequential[model]/Conv2d[4]\r\n  %110 : Float(1, 128, 128, 128) = Reshape[shape=[1, 128, 128, 128]](%109), scope: ResnetGenerator/Sequential[model]/InstanceNorm2d[5]\r\n  %111 : Float(128) = Constant[value=<Tensor>](), scope: ResnetGenerator/Sequential[model]/InstanceNorm2d[5]\r\n  %112 : Float(128) = Constant[value=<Tensor>](), scope: ResnetGenerator/Sequential[model]/InstanceNorm2d[5]\r\n  %113 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/InstanceNorm2d[5]\r\n  %114 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/InstanceNorm2d[5]\r\n  %115 : Float(1, 128, 128, 128), %116 : Float(128), %117 : Float(128), %batch_norm_dead_output-118 : UNKNOWN_TYPE, %batch_norm_dead_output-119 : UNKNOWN_TYPE = BatchNormalization[consumed_inputs=[0, 0, 0, 1, 1], epsilon=1e-05, is_test=0, momentum=0.9](%110, %113, %114, %111, %112), scope: ResnetGenerator/Sequential[model]/InstanceNorm2d[5]\r\n  %120 : Float(1, 128, 128, 128) = Reshape[shape=[1, 128, 128, 128]](%115), scope: ResnetGenerator/Sequential[model]/InstanceNorm2d[5]\r\n  %121 : Float(1, 128, 128, 128) = Relu(%120), scope: ResnetGenerator/Sequential[model]/ReLU[6]\r\n  %122 : Float(1, 256, 64, 64) = Conv[dilations=[1, 1], group=1, kernel_shape=[3, 3], pads=[1, 1, 1, 1], strides=[2, 2]](%121, %9, %10), scope: ResnetGenerator/Sequential[model]/Conv2d[7]\r\n  %123 : Float(1, 256, 64, 64) = Reshape[shape=[1, 256, 64, 64]](%122), scope: ResnetGenerator/Sequential[model]/InstanceNorm2d[8]\r\n  %124 : Float(256) = Constant[value=<Tensor>](), scope: ResnetGenerator/Sequential[model]/InstanceNorm2d[8]\r\n  %125 : Float(256) = Constant[value=<Tensor>](), scope: ResnetGenerator/Sequential[model]/InstanceNorm2d[8]\r\n  %126 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/InstanceNorm2d[8]\r\n  %127 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/InstanceNorm2d[8]\r\n  %128 : Float(1, 256, 64, 64), %129 : Float(256), %130 : Float(256), %batch_norm_dead_output-131 : UNKNOWN_TYPE, %batch_norm_dead_output-132 : UNKNOWN_TYPE = BatchNormalization[consumed_inputs=[0, 0, 0, 1, 1], epsilon=1e-05, is_test=0, momentum=0.9](%123, %126, %127, %124, %125), scope: ResnetGenerator/Sequential[model]/InstanceNorm2d[8]\r\n  %133 : Float(1, 256, 64, 64) = Reshape[shape=[1, 256, 64, 64]](%128), scope: ResnetGenerator/Sequential[model]/InstanceNorm2d[8]\r\n  %134 : Float(1, 256, 64, 64) = Relu(%133), scope: ResnetGenerator/Sequential[model]/ReLU[9]\r\n  %135 : Float(1, 256, 66, 66) = Pad[mode=reflect, pads=[0, 0, 1, 1, 0, 0, 1, 1]](%134), scope: ResnetGenerator/Sequential[model]/ResnetBlock[10]/Sequential[conv_block]/ReflectionPad2d[0]\r\n  %136 : Float(1, 256, 64, 64) = Conv[dilations=[1, 1], group=1, kernel_shape=[3, 3], pads=[0, 0, 0, 0], strides=[1, 1]](%135, %13, %14), scope: ResnetGenerator/Sequential[model]/ResnetBlock[10]/Sequential[conv_block]/Conv2d[1]\r\n  %137 : Float(1, 256, 64, 64) = Reshape[shape=[1, 256, 64, 64]](%136), scope: ResnetGenerator/Sequential[model]/ResnetBlock[10]/Sequential[conv_block]/InstanceNorm2d[2]\r\n  %138 : Float(256) = Constant[value=<Tensor>](), scope: ResnetGenerator/Sequential[model]/ResnetBlock[10]/Sequential[conv_block]/InstanceNorm2d[2]\r\n  %139 : Float(256) = Constant[value=<Tensor>](), scope: ResnetGenerator/Sequential[model]/ResnetBlock[10]/Sequential[conv_block]/InstanceNorm2d[2]\r\n  %140 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/ResnetBlock[10]/Sequential[conv_block]/InstanceNorm2d[2]\r\n  %141 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/ResnetBlock[10]/Sequential[conv_block]/InstanceNorm2d[2]\r\n  %142 : Float(1, 256, 64, 64), %143 : Float(256), %144 : Float(256), %batch_norm_dead_output-145 : UNKNOWN_TYPE, %batch_norm_dead_output-146 : UNKNOWN_TYPE = BatchNormalization[consumed_inputs=[0, 0, 0, 1, 1], epsilon=1e-05, is_test=0, momentum=0.9](%137, %140, %141, %138, %139), scope: ResnetGenerator/Sequential[model]/ResnetBlock[10]/Sequential[conv_block]/InstanceNorm2d[2]\r\n  %147 : Float(1, 256, 64, 64) = Reshape[shape=[1, 256, 64, 64]](%142), scope: ResnetGenerator/Sequential[model]/ResnetBlock[10]/Sequential[conv_block]/InstanceNorm2d[2]\r\n  %148 : Float(1, 256, 64, 64) = Relu(%147), scope: ResnetGenerator/Sequential[model]/ResnetBlock[10]/Sequential[conv_block]/ReLU[3]\r\n  %149 : Float(1, 256, 66, 66) = Pad[mode=reflect, pads=[0, 0, 1, 1, 0, 0, 1, 1]](%148), scope: ResnetGenerator/Sequential[model]/ResnetBlock[10]/Sequential[conv_block]/ReflectionPad2d[4]\r\n  %150 : Float(1, 256, 64, 64) = Conv[dilations=[1, 1], group=1, kernel_shape=[3, 3], pads=[0, 0, 0, 0], strides=[1, 1]](%149, %17, %18), scope: ResnetGenerator/Sequential[model]/ResnetBlock[10]/Sequential[conv_block]/Conv2d[5]\r\n  %151 : Float(1, 256, 64, 64) = Reshape[shape=[1, 256, 64, 64]](%150), scope: ResnetGenerator/Sequential[model]/ResnetBlock[10]/Sequential[conv_block]/InstanceNorm2d[6]\r\n  %152 : Float(256) = Constant[value=<Tensor>](), scope: ResnetGenerator/Sequential[model]/ResnetBlock[10]/Sequential[conv_block]/InstanceNorm2d[6]\r\n  %153 : Float(256) = Constant[value=<Tensor>](), scope: ResnetGenerator/Sequential[model]/ResnetBlock[10]/Sequential[conv_block]/InstanceNorm2d[6]\r\n  %154 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/ResnetBlock[10]/Sequential[conv_block]/InstanceNorm2d[6]\r\n  %155 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/ResnetBlock[10]/Sequential[conv_block]/InstanceNorm2d[6]\r\n  %156 : Float(1, 256, 64, 64), %157 : Float(256), %158 : Float(256), %batch_norm_dead_output-159 : UNKNOWN_TYPE, %batch_norm_dead_output-160 : UNKNOWN_TYPE = BatchNormalization[consumed_inputs=[0, 0, 0, 1, 1], epsilon=1e-05, is_test=0, momentum=0.9](%151, %154, %155, %152, %153), scope: ResnetGenerator/Sequential[model]/ResnetBlock[10]/Sequential[conv_block]/InstanceNorm2d[6]\r\n  %161 : Float(1, 256, 64, 64) = Reshape[shape=[1, 256, 64, 64]](%156), scope: ResnetGenerator/Sequential[model]/ResnetBlock[10]/Sequential[conv_block]/InstanceNorm2d[6]\r\n  %162 : Float(1, 256, 64, 64) = Add(%134, %161), scope: ResnetGenerator/Sequential[model]/ResnetBlock[10]\r\n  %163 : Float(1, 256, 66, 66) = Pad[mode=reflect, pads=[0, 0, 1, 1, 0, 0, 1, 1]](%162), scope: ResnetGenerator/Sequential[model]/ResnetBlock[11]/Sequential[conv_block]/ReflectionPad2d[0]\r\n  %164 : Float(1, 256, 64, 64) = Conv[dilations=[1, 1], group=1, kernel_shape=[3, 3], pads=[0, 0, 0, 0], strides=[1, 1]](%163, %21, %22), scope: ResnetGenerator/Sequential[model]/ResnetBlock[11]/Sequential[conv_block]/Conv2d[1]\r\n  %165 : Float(1, 256, 64, 64) = Reshape[shape=[1, 256, 64, 64]](%164), scope: ResnetGenerator/Sequential[model]/ResnetBlock[11]/Sequential[conv_block]/InstanceNorm2d[2]\r\n  %166 : Float(256) = Constant[value=<Tensor>](), scope: ResnetGenerator/Sequential[model]/ResnetBlock[11]/Sequential[conv_block]/InstanceNorm2d[2]\r\n  %167 : Float(256) = Constant[value=<Tensor>](), scope: ResnetGenerator/Sequential[model]/ResnetBlock[11]/Sequential[conv_block]/InstanceNorm2d[2]\r\n  %168 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/ResnetBlock[11]/Sequential[conv_block]/InstanceNorm2d[2]\r\n  %169 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/ResnetBlock[11]/Sequential[conv_block]/InstanceNorm2d[2]\r\n  %170 : Float(1, 256, 64, 64), %171 : Float(256), %172 : Float(256), %batch_norm_dead_output-173 : UNKNOWN_TYPE, %batch_norm_dead_output-174 : UNKNOWN_TYPE = BatchNormalization[consumed_inputs=[0, 0, 0, 1, 1], epsilon=1e-05, is_test=0, momentum=0.9](%165, %168, %169, %166, %167), scope: ResnetGenerator/Sequential[model]/ResnetBlock[11]/Sequential[conv_block]/InstanceNorm2d[2]\r\n  %175 : Float(1, 256, 64, 64) = Reshape[shape=[1, 256, 64, 64]](%170), scope: ResnetGenerator/Sequential[model]/ResnetBlock[11]/Sequential[conv_block]/InstanceNorm2d[2]\r\n  %176 : Float(1, 256, 64, 64) = Relu(%175), scope: ResnetGenerator/Sequential[model]/ResnetBlock[11]/Sequential[conv_block]/ReLU[3]\r\n  %177 : Float(1, 256, 66, 66) = Pad[mode=reflect, pads=[0, 0, 1, 1, 0, 0, 1, 1]](%176), scope: ResnetGenerator/Sequential[model]/ResnetBlock[11]/Sequential[conv_block]/ReflectionPad2d[4]\r\n  %178 : Float(1, 256, 64, 64) = Conv[dilations=[1, 1], group=1, kernel_shape=[3, 3], pads=[0, 0, 0, 0], strides=[1, 1]](%177, %25, %26), scope: ResnetGenerator/Sequential[model]/ResnetBlock[11]/Sequential[conv_block]/Conv2d[5]\r\n  %179 : Float(1, 256, 64, 64) = Reshape[shape=[1, 256, 64, 64]](%178), scope: ResnetGenerator/Sequential[model]/ResnetBlock[11]/Sequential[conv_block]/InstanceNorm2d[6]\r\n  %180 : Float(256) = Constant[value=<Tensor>](), scope: ResnetGenerator/Sequential[model]/ResnetBlock[11]/Sequential[conv_block]/InstanceNorm2d[6]\r\n  %181 : Float(256) = Constant[value=<Tensor>](), scope: ResnetGenerator/Sequential[model]/ResnetBlock[11]/Sequential[conv_block]/InstanceNorm2d[6]\r\n  %182 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/ResnetBlock[11]/Sequential[conv_block]/InstanceNorm2d[6]\r\n  %183 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/ResnetBlock[11]/Sequential[conv_block]/InstanceNorm2d[6]\r\n  %184 : Float(1, 256, 64, 64), %185 : Float(256), %186 : Float(256), %batch_norm_dead_output-187 : UNKNOWN_TYPE, %batch_norm_dead_output-188 : UNKNOWN_TYPE = BatchNormalization[consumed_inputs=[0, 0, 0, 1, 1], epsilon=1e-05, is_test=0, momentum=0.9](%179, %182, %183, %180, %181), scope: ResnetGenerator/Sequential[model]/ResnetBlock[11]/Sequential[conv_block]/InstanceNorm2d[6]\r\n  %189 : Float(1, 256, 64, 64) = Reshape[shape=[1, 256, 64, 64]](%184), scope: ResnetGenerator/Sequential[model]/ResnetBlock[11]/Sequential[conv_block]/InstanceNorm2d[6]\r\n  %190 : Float(1, 256, 64, 64) = Add(%162, %189), scope: ResnetGenerator/Sequential[model]/ResnetBlock[11]\r\n  %191 : Float(1, 256, 66, 66) = Pad[mode=reflect, pads=[0, 0, 1, 1, 0, 0, 1, 1]](%190), scope: ResnetGenerator/Sequential[model]/ResnetBlock[12]/Sequential[conv_block]/ReflectionPad2d[0]\r\n  %192 : Float(1, 256, 64, 64) = Conv[dilations=[1, 1], group=1, kernel_shape=[3, 3], pads=[0, 0, 0, 0], strides=[1, 1]](%191, %29, %30), scope: ResnetGenerator/Sequential[model]/ResnetBlock[12]/Sequential[conv_block]/Conv2d[1]\r\n  %193 : Float(1, 256, 64, 64) = Reshape[shape=[1, 256, 64, 64]](%192), scope: ResnetGenerator/Sequential[model]/ResnetBlock[12]/Sequential[conv_block]/InstanceNorm2d[2]\r\n  %194 : Float(256) = Constant[value=<Tensor>](), scope: ResnetGenerator/Sequential[model]/ResnetBlock[12]/Sequential[conv_block]/InstanceNorm2d[2]\r\n  %195 : Float(256) = Constant[value=<Tensor>](), scope: ResnetGenerator/Sequential[model]/ResnetBlock[12]/Sequential[conv_block]/InstanceNorm2d[2]\r\n  %196 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/ResnetBlock[12]/Sequential[conv_block]/InstanceNorm2d[2]\r\n  %197 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/ResnetBlock[12]/Sequential[conv_block]/InstanceNorm2d[2]\r\n  %198 : Float(1, 256, 64, 64), %199 : Float(256), %200 : Float(256), %batch_norm_dead_output-201 : UNKNOWN_TYPE, %batch_norm_dead_output-202 : UNKNOWN_TYPE = BatchNormalization[consumed_inputs=[0, 0, 0, 1, 1], epsilon=1e-05, is_test=0, momentum=0.9](%193, %196, %197, %194, %195), scope: ResnetGenerator/Sequential[model]/ResnetBlock[12]/Sequential[conv_block]/InstanceNorm2d[2]\r\n  %203 : Float(1, 256, 64, 64) = Reshape[shape=[1, 256, 64, 64]](%198), scope: ResnetGenerator/Sequential[model]/ResnetBlock[12]/Sequential[conv_block]/InstanceNorm2d[2]\r\n  %204 : Float(1, 256, 64, 64) = Relu(%203), scope: ResnetGenerator/Sequential[model]/ResnetBlock[12]/Sequential[conv_block]/ReLU[3]\r\n  %205 : Float(1, 256, 66, 66) = Pad[mode=reflect, pads=[0, 0, 1, 1, 0, 0, 1, 1]](%204), scope: ResnetGenerator/Sequential[model]/ResnetBlock[12]/Sequential[conv_block]/ReflectionPad2d[4]\r\n  %206 : Float(1, 256, 64, 64) = Conv[dilations=[1, 1], group=1, kernel_shape=[3, 3], pads=[0, 0, 0, 0], strides=[1, 1]](%205, %33, %34), scope: ResnetGenerator/Sequential[model]/ResnetBlock[12]/Sequential[conv_block]/Conv2d[5]\r\n  %207 : Float(1, 256, 64, 64) = Reshape[shape=[1, 256, 64, 64]](%206), scope: ResnetGenerator/Sequential[model]/ResnetBlock[12]/Sequential[conv_block]/InstanceNorm2d[6]\r\n  %208 : Float(256) = Constant[value=<Tensor>](), scope: ResnetGenerator/Sequential[model]/ResnetBlock[12]/Sequential[conv_block]/InstanceNorm2d[6]\r\n  %209 : Float(256) = Constant[value=<Tensor>](), scope: ResnetGenerator/Sequential[model]/ResnetBlock[12]/Sequential[conv_block]/InstanceNorm2d[6]\r\n  %210 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/ResnetBlock[12]/Sequential[conv_block]/InstanceNorm2d[6]\r\n  %211 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/ResnetBlock[12]/Sequential[conv_block]/InstanceNorm2d[6]\r\n  %212 : Float(1, 256, 64, 64), %213 : Float(256), %214 : Float(256), %batch_norm_dead_output-215 : UNKNOWN_TYPE, %batch_norm_dead_output-216 : UNKNOWN_TYPE = BatchNormalization[consumed_inputs=[0, 0, 0, 1, 1], epsilon=1e-05, is_test=0, momentum=0.9](%207, %210, %211, %208, %209), scope: ResnetGenerator/Sequential[model]/ResnetBlock[12]/Sequential[conv_block]/InstanceNorm2d[6]\r\n  %217 : Float(1, 256, 64, 64) = Reshape[shape=[1, 256, 64, 64]](%212), scope: ResnetGenerator/Sequential[model]/ResnetBlock[12]/Sequential[conv_block]/InstanceNorm2d[6]\r\n  %218 : Float(1, 256, 64, 64) = Add(%190, %217), scope: ResnetGenerator/Sequential[model]/ResnetBlock[12]\r\n  %219 : Float(1, 256, 66, 66) = Pad[mode=reflect, pads=[0, 0, 1, 1, 0, 0, 1, 1]](%218), scope: ResnetGenerator/Sequential[model]/ResnetBlock[13]/Sequential[conv_block]/ReflectionPad2d[0]\r\n  %220 : Float(1, 256, 64, 64) = Conv[dilations=[1, 1], group=1, kernel_shape=[3, 3], pads=[0, 0, 0, 0], strides=[1, 1]](%219, %37, %38), scope: ResnetGenerator/Sequential[model]/ResnetBlock[13]/Sequential[conv_block]/Conv2d[1]\r\n  %221 : Float(1, 256, 64, 64) = Reshape[shape=[1, 256, 64, 64]](%220), scope: ResnetGenerator/Sequential[model]/ResnetBlock[13]/Sequential[conv_block]/InstanceNorm2d[2]\r\n  %222 : Float(256) = Constant[value=<Tensor>](), scope: ResnetGenerator/Sequential[model]/ResnetBlock[13]/Sequential[conv_block]/InstanceNorm2d[2]\r\n  %223 : Float(256) = Constant[value=<Tensor>](), scope: ResnetGenerator/Sequential[model]/ResnetBlock[13]/Sequential[conv_block]/InstanceNorm2d[2]\r\n  %224 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/ResnetBlock[13]/Sequential[conv_block]/InstanceNorm2d[2]\r\n  %225 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/ResnetBlock[13]/Sequential[conv_block]/InstanceNorm2d[2]\r\n  %226 : Float(1, 256, 64, 64), %227 : Float(256), %228 : Float(256), %batch_norm_dead_output-229 : UNKNOWN_TYPE, %batch_norm_dead_output-230 : UNKNOWN_TYPE = BatchNormalization[consumed_inputs=[0, 0, 0, 1, 1], epsilon=1e-05, is_test=0, momentum=0.9](%221, %224, %225, %222, %223), scope: ResnetGenerator/Sequential[model]/ResnetBlock[13]/Sequential[conv_block]/InstanceNorm2d[2]\r\n  %231 : Float(1, 256, 64, 64) = Reshape[shape=[1, 256, 64, 64]](%226), scope: ResnetGenerator/Sequential[model]/ResnetBlock[13]/Sequential[conv_block]/InstanceNorm2d[2]\r\n  %232 : Float(1, 256, 64, 64) = Relu(%231), scope: ResnetGenerator/Sequential[model]/ResnetBlock[13]/Sequential[conv_block]/ReLU[3]\r\n  %233 : Float(1, 256, 66, 66) = Pad[mode=reflect, pads=[0, 0, 1, 1, 0, 0, 1, 1]](%232), scope: ResnetGenerator/Sequential[model]/ResnetBlock[13]/Sequential[conv_block]/ReflectionPad2d[4]\r\n  %234 : Float(1, 256, 64, 64) = Conv[dilations=[1, 1], group=1, kernel_shape=[3, 3], pads=[0, 0, 0, 0], strides=[1, 1]](%233, %41, %42), scope: ResnetGenerator/Sequential[model]/ResnetBlock[13]/Sequential[conv_block]/Conv2d[5]\r\n  %235 : Float(1, 256, 64, 64) = Reshape[shape=[1, 256, 64, 64]](%234), scope: ResnetGenerator/Sequential[model]/ResnetBlock[13]/Sequential[conv_block]/InstanceNorm2d[6]\r\n  %236 : Float(256) = Constant[value=<Tensor>](), scope: ResnetGenerator/Sequential[model]/ResnetBlock[13]/Sequential[conv_block]/InstanceNorm2d[6]\r\n  %237 : Float(256) = Constant[value=<Tensor>](), scope: ResnetGenerator/Sequential[model]/ResnetBlock[13]/Sequential[conv_block]/InstanceNorm2d[6]\r\n  %238 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/ResnetBlock[13]/Sequential[conv_block]/InstanceNorm2d[6]\r\n  %239 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/ResnetBlock[13]/Sequential[conv_block]/InstanceNorm2d[6]\r\n  %240 : Float(1, 256, 64, 64), %241 : Float(256), %242 : Float(256), %batch_norm_dead_output-243 : UNKNOWN_TYPE, %batch_norm_dead_output-244 : UNKNOWN_TYPE = BatchNormalization[consumed_inputs=[0, 0, 0, 1, 1], epsilon=1e-05, is_test=0, momentum=0.9](%235, %238, %239, %236, %237), scope: ResnetGenerator/Sequential[model]/ResnetBlock[13]/Sequential[conv_block]/InstanceNorm2d[6]\r\n  %245 : Float(1, 256, 64, 64) = Reshape[shape=[1, 256, 64, 64]](%240), scope: ResnetGenerator/Sequential[model]/ResnetBlock[13]/Sequential[conv_block]/InstanceNorm2d[6]\r\n  %246 : Float(1, 256, 64, 64) = Add(%218, %245), scope: ResnetGenerator/Sequential[model]/ResnetBlock[13]\r\n  %247 : Float(1, 256, 66, 66) = Pad[mode=reflect, pads=[0, 0, 1, 1, 0, 0, 1, 1]](%246), scope: ResnetGenerator/Sequential[model]/ResnetBlock[14]/Sequential[conv_block]/ReflectionPad2d[0]\r\n  %248 : Float(1, 256, 64, 64) = Conv[dilations=[1, 1], group=1, kernel_shape=[3, 3], pads=[0, 0, 0, 0], strides=[1, 1]](%247, %45, %46), scope: ResnetGenerator/Sequential[model]/ResnetBlock[14]/Sequential[conv_block]/Conv2d[1]\r\n  %249 : Float(1, 256, 64, 64) = Reshape[shape=[1, 256, 64, 64]](%248), scope: ResnetGenerator/Sequential[model]/ResnetBlock[14]/Sequential[conv_block]/InstanceNorm2d[2]\r\n  %250 : Float(256) = Constant[value=<Tensor>](), scope: ResnetGenerator/Sequential[model]/ResnetBlock[14]/Sequential[conv_block]/InstanceNorm2d[2]\r\n  %251 : Float(256) = Constant[value=<Tensor>](), scope: ResnetGenerator/Sequential[model]/ResnetBlock[14]/Sequential[conv_block]/InstanceNorm2d[2]\r\n  %252 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/ResnetBlock[14]/Sequential[conv_block]/InstanceNorm2d[2]\r\n  %253 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/ResnetBlock[14]/Sequential[conv_block]/InstanceNorm2d[2]\r\n  %254 : Float(1, 256, 64, 64), %255 : Float(256), %256 : Float(256), %batch_norm_dead_output-257 : UNKNOWN_TYPE, %batch_norm_dead_output-258 : UNKNOWN_TYPE = BatchNormalization[consumed_inputs=[0, 0, 0, 1, 1], epsilon=1e-05, is_test=0, momentum=0.9](%249, %252, %253, %250, %251), scope: ResnetGenerator/Sequential[model]/ResnetBlock[14]/Sequential[conv_block]/InstanceNorm2d[2]\r\n  %259 : Float(1, 256, 64, 64) = Reshape[shape=[1, 256, 64, 64]](%254), scope: ResnetGenerator/Sequential[model]/ResnetBlock[14]/Sequential[conv_block]/InstanceNorm2d[2]\r\n  %260 : Float(1, 256, 64, 64) = Relu(%259), scope: ResnetGenerator/Sequential[model]/ResnetBlock[14]/Sequential[conv_block]/ReLU[3]\r\n  %261 : Float(1, 256, 66, 66) = Pad[mode=reflect, pads=[0, 0, 1, 1, 0, 0, 1, 1]](%260), scope: ResnetGenerator/Sequential[model]/ResnetBlock[14]/Sequential[conv_block]/ReflectionPad2d[4]\r\n  %262 : Float(1, 256, 64, 64) = Conv[dilations=[1, 1], group=1, kernel_shape=[3, 3], pads=[0, 0, 0, 0], strides=[1, 1]](%261, %49, %50), scope: ResnetGenerator/Sequential[model]/ResnetBlock[14]/Sequential[conv_block]/Conv2d[5]\r\n  %263 : Float(1, 256, 64, 64) = Reshape[shape=[1, 256, 64, 64]](%262), scope: ResnetGenerator/Sequential[model]/ResnetBlock[14]/Sequential[conv_block]/InstanceNorm2d[6]\r\n  %264 : Float(256) = Constant[value=<Tensor>](), scope: ResnetGenerator/Sequential[model]/ResnetBlock[14]/Sequential[conv_block]/InstanceNorm2d[6]\r\n  %265 : Float(256) = Constant[value=<Tensor>](), scope: ResnetGenerator/Sequential[model]/ResnetBlock[14]/Sequential[conv_block]/InstanceNorm2d[6]\r\n  %266 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/ResnetBlock[14]/Sequential[conv_block]/InstanceNorm2d[6]\r\n  %267 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/ResnetBlock[14]/Sequential[conv_block]/InstanceNorm2d[6]\r\n  %268 : Float(1, 256, 64, 64), %269 : Float(256), %270 : Float(256), %batch_norm_dead_output-271 : UNKNOWN_TYPE, %batch_norm_dead_output-272 : UNKNOWN_TYPE = BatchNormalization[consumed_inputs=[0, 0, 0, 1, 1], epsilon=1e-05, is_test=0, momentum=0.9](%263, %266, %267, %264, %265), scope: ResnetGenerator/Sequential[model]/ResnetBlock[14]/Sequential[conv_block]/InstanceNorm2d[6]\r\n  %273 : Float(1, 256, 64, 64) = Reshape[shape=[1, 256, 64, 64]](%268), scope: ResnetGenerator/Sequential[model]/ResnetBlock[14]/Sequential[conv_block]/InstanceNorm2d[6]\r\n  %274 : Float(1, 256, 64, 64) = Add(%246, %273), scope: ResnetGenerator/Sequential[model]/ResnetBlock[14]\r\n  %275 : Float(1, 256, 66, 66) = Pad[mode=reflect, pads=[0, 0, 1, 1, 0, 0, 1, 1]](%274), scope: ResnetGenerator/Sequential[model]/ResnetBlock[15]/Sequential[conv_block]/ReflectionPad2d[0]\r\n  %276 : Float(1, 256, 64, 64) = Conv[dilations=[1, 1], group=1, kernel_shape=[3, 3], pads=[0, 0, 0, 0], strides=[1, 1]](%275, %53, %54), scope: ResnetGenerator/Sequential[model]/ResnetBlock[15]/Sequential[conv_block]/Conv2d[1]\r\n  %277 : Float(1, 256, 64, 64) = Reshape[shape=[1, 256, 64, 64]](%276), scope: ResnetGenerator/Sequential[model]/ResnetBlock[15]/Sequential[conv_block]/InstanceNorm2d[2]\r\n  %278 : Float(256) = Constant[value=<Tensor>](), scope: ResnetGenerator/Sequential[model]/ResnetBlock[15]/Sequential[conv_block]/InstanceNorm2d[2]\r\n  %279 : Float(256) = Constant[value=<Tensor>](), scope: ResnetGenerator/Sequential[model]/ResnetBlock[15]/Sequential[conv_block]/InstanceNorm2d[2]\r\n  %280 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/ResnetBlock[15]/Sequential[conv_block]/InstanceNorm2d[2]\r\n  %281 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/ResnetBlock[15]/Sequential[conv_block]/InstanceNorm2d[2]\r\n  %282 : Float(1, 256, 64, 64), %283 : Float(256), %284 : Float(256), %batch_norm_dead_output-285 : UNKNOWN_TYPE, %batch_norm_dead_output-286 : UNKNOWN_TYPE = BatchNormalization[consumed_inputs=[0, 0, 0, 1, 1], epsilon=1e-05, is_test=0, momentum=0.9](%277, %280, %281, %278, %279), scope: ResnetGenerator/Sequential[model]/ResnetBlock[15]/Sequential[conv_block]/InstanceNorm2d[2]\r\n  %287 : Float(1, 256, 64, 64) = Reshape[shape=[1, 256, 64, 64]](%282), scope: ResnetGenerator/Sequential[model]/ResnetBlock[15]/Sequential[conv_block]/InstanceNorm2d[2]\r\n  %288 : Float(1, 256, 64, 64) = Relu(%287), scope: ResnetGenerator/Sequential[model]/ResnetBlock[15]/Sequential[conv_block]/ReLU[3]\r\n  %289 : Float(1, 256, 66, 66) = Pad[mode=reflect, pads=[0, 0, 1, 1, 0, 0, 1, 1]](%288), scope: ResnetGenerator/Sequential[model]/ResnetBlock[15]/Sequential[conv_block]/ReflectionPad2d[4]\r\n  %290 : Float(1, 256, 64, 64) = Conv[dilations=[1, 1], group=1, kernel_shape=[3, 3], pads=[0, 0, 0, 0], strides=[1, 1]](%289, %57, %58), scope: ResnetGenerator/Sequential[model]/ResnetBlock[15]/Sequential[conv_block]/Conv2d[5]\r\n  %291 : Float(1, 256, 64, 64) = Reshape[shape=[1, 256, 64, 64]](%290), scope: ResnetGenerator/Sequential[model]/ResnetBlock[15]/Sequential[conv_block]/InstanceNorm2d[6]\r\n  %292 : Float(256) = Constant[value=<Tensor>](), scope: ResnetGenerator/Sequential[model]/ResnetBlock[15]/Sequential[conv_block]/InstanceNorm2d[6]\r\n  %293 : Float(256) = Constant[value=<Tensor>](), scope: ResnetGenerator/Sequential[model]/ResnetBlock[15]/Sequential[conv_block]/InstanceNorm2d[6]\r\n  %294 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/ResnetBlock[15]/Sequential[conv_block]/InstanceNorm2d[6]\r\n  %295 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/ResnetBlock[15]/Sequential[conv_block]/InstanceNorm2d[6]\r\n  %296 : Float(1, 256, 64, 64), %297 : Float(256), %298 : Float(256), %batch_norm_dead_output-299 : UNKNOWN_TYPE, %batch_norm_dead_output-300 : UNKNOWN_TYPE = BatchNormalization[consumed_inputs=[0, 0, 0, 1, 1], epsilon=1e-05, is_test=0, momentum=0.9](%291, %294, %295, %292, %293), scope: ResnetGenerator/Sequential[model]/ResnetBlock[15]/Sequential[conv_block]/InstanceNorm2d[6]\r\n  %301 : Float(1, 256, 64, 64) = Reshape[shape=[1, 256, 64, 64]](%296), scope: ResnetGenerator/Sequential[model]/ResnetBlock[15]/Sequential[conv_block]/InstanceNorm2d[6]\r\n  %302 : Float(1, 256, 64, 64) = Add(%274, %301), scope: ResnetGenerator/Sequential[model]/ResnetBlock[15]\r\n  %303 : Float(1, 256, 66, 66) = Pad[mode=reflect, pads=[0, 0, 1, 1, 0, 0, 1, 1]](%302), scope: ResnetGenerator/Sequential[model]/ResnetBlock[16]/Sequential[conv_block]/ReflectionPad2d[0]\r\n  %304 : Float(1, 256, 64, 64) = Conv[dilations=[1, 1], group=1, kernel_shape=[3, 3], pads=[0, 0, 0, 0], strides=[1, 1]](%303, %61, %62), scope: ResnetGenerator/Sequential[model]/ResnetBlock[16]/Sequential[conv_block]/Conv2d[1]\r\n  %305 : Float(1, 256, 64, 64) = Reshape[shape=[1, 256, 64, 64]](%304), scope: ResnetGenerator/Sequential[model]/ResnetBlock[16]/Sequential[conv_block]/InstanceNorm2d[2]\r\n  %306 : Float(256) = Constant[value=<Tensor>](), scope: ResnetGenerator/Sequential[model]/ResnetBlock[16]/Sequential[conv_block]/InstanceNorm2d[2]\r\n  %307 : Float(256) = Constant[value=<Tensor>](), scope: ResnetGenerator/Sequential[model]/ResnetBlock[16]/Sequential[conv_block]/InstanceNorm2d[2]\r\n  %308 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/ResnetBlock[16]/Sequential[conv_block]/InstanceNorm2d[2]\r\n  %309 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/ResnetBlock[16]/Sequential[conv_block]/InstanceNorm2d[2]\r\n  %310 : Float(1, 256, 64, 64), %311 : Float(256), %312 : Float(256), %batch_norm_dead_output-313 : UNKNOWN_TYPE, %batch_norm_dead_output-314 : UNKNOWN_TYPE = BatchNormalization[consumed_inputs=[0, 0, 0, 1, 1], epsilon=1e-05, is_test=0, momentum=0.9](%305, %308, %309, %306, %307), scope: ResnetGenerator/Sequential[model]/ResnetBlock[16]/Sequential[conv_block]/InstanceNorm2d[2]\r\n  %315 : Float(1, 256, 64, 64) = Reshape[shape=[1, 256, 64, 64]](%310), scope: ResnetGenerator/Sequential[model]/ResnetBlock[16]/Sequential[conv_block]/InstanceNorm2d[2]\r\n  %316 : Float(1, 256, 64, 64) = Relu(%315), scope: ResnetGenerator/Sequential[model]/ResnetBlock[16]/Sequential[conv_block]/ReLU[3]\r\n  %317 : Float(1, 256, 66, 66) = Pad[mode=reflect, pads=[0, 0, 1, 1, 0, 0, 1, 1]](%316), scope: ResnetGenerator/Sequential[model]/ResnetBlock[16]/Sequential[conv_block]/ReflectionPad2d[4]\r\n  %318 : Float(1, 256, 64, 64) = Conv[dilations=[1, 1], group=1, kernel_shape=[3, 3], pads=[0, 0, 0, 0], strides=[1, 1]](%317, %65, %66), scope: ResnetGenerator/Sequential[model]/ResnetBlock[16]/Sequential[conv_block]/Conv2d[5]\r\n  %319 : Float(1, 256, 64, 64) = Reshape[shape=[1, 256, 64, 64]](%318), scope: ResnetGenerator/Sequential[model]/ResnetBlock[16]/Sequential[conv_block]/InstanceNorm2d[6]\r\n  %320 : Float(256) = Constant[value=<Tensor>](), scope: ResnetGenerator/Sequential[model]/ResnetBlock[16]/Sequential[conv_block]/InstanceNorm2d[6]\r\n  %321 : Float(256) = Constant[value=<Tensor>](), scope: ResnetGenerator/Sequential[model]/ResnetBlock[16]/Sequential[conv_block]/InstanceNorm2d[6]\r\n  %322 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/ResnetBlock[16]/Sequential[conv_block]/InstanceNorm2d[6]\r\n  %323 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/ResnetBlock[16]/Sequential[conv_block]/InstanceNorm2d[6]\r\n  %324 : Float(1, 256, 64, 64), %325 : Float(256), %326 : Float(256), %batch_norm_dead_output-327 : UNKNOWN_TYPE, %batch_norm_dead_output-328 : UNKNOWN_TYPE = BatchNormalization[consumed_inputs=[0, 0, 0, 1, 1], epsilon=1e-05, is_test=0, momentum=0.9](%319, %322, %323, %320, %321), scope: ResnetGenerator/Sequential[model]/ResnetBlock[16]/Sequential[conv_block]/InstanceNorm2d[6]\r\n  %329 : Float(1, 256, 64, 64) = Reshape[shape=[1, 256, 64, 64]](%324), scope: ResnetGenerator/Sequential[model]/ResnetBlock[16]/Sequential[conv_block]/InstanceNorm2d[6]\r\n  %330 : Float(1, 256, 64, 64) = Add(%302, %329), scope: ResnetGenerator/Sequential[model]/ResnetBlock[16]\r\n  %331 : Float(1, 256, 66, 66) = Pad[mode=reflect, pads=[0, 0, 1, 1, 0, 0, 1, 1]](%330), scope: ResnetGenerator/Sequential[model]/ResnetBlock[17]/Sequential[conv_block]/ReflectionPad2d[0]\r\n  %332 : Float(1, 256, 64, 64) = Conv[dilations=[1, 1], group=1, kernel_shape=[3, 3], pads=[0, 0, 0, 0], strides=[1, 1]](%331, %69, %70), scope: ResnetGenerator/Sequential[model]/ResnetBlock[17]/Sequential[conv_block]/Conv2d[1]\r\n  %333 : Float(1, 256, 64, 64) = Reshape[shape=[1, 256, 64, 64]](%332), scope: ResnetGenerator/Sequential[model]/ResnetBlock[17]/Sequential[conv_block]/InstanceNorm2d[2]\r\n  %334 : Float(256) = Constant[value=<Tensor>](), scope: ResnetGenerator/Sequential[model]/ResnetBlock[17]/Sequential[conv_block]/InstanceNorm2d[2]\r\n  %335 : Float(256) = Constant[value=<Tensor>](), scope: ResnetGenerator/Sequential[model]/ResnetBlock[17]/Sequential[conv_block]/InstanceNorm2d[2]\r\n  %336 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/ResnetBlock[17]/Sequential[conv_block]/InstanceNorm2d[2]\r\n  %337 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/ResnetBlock[17]/Sequential[conv_block]/InstanceNorm2d[2]\r\n  %338 : Float(1, 256, 64, 64), %339 : Float(256), %340 : Float(256), %batch_norm_dead_output-341 : UNKNOWN_TYPE, %batch_norm_dead_output-342 : UNKNOWN_TYPE = BatchNormalization[consumed_inputs=[0, 0, 0, 1, 1], epsilon=1e-05, is_test=0, momentum=0.9](%333, %336, %337, %334, %335), scope: ResnetGenerator/Sequential[model]/ResnetBlock[17]/Sequential[conv_block]/InstanceNorm2d[2]\r\n  %343 : Float(1, 256, 64, 64) = Reshape[shape=[1, 256, 64, 64]](%338), scope: ResnetGenerator/Sequential[model]/ResnetBlock[17]/Sequential[conv_block]/InstanceNorm2d[2]\r\n  %344 : Float(1, 256, 64, 64) = Relu(%343), scope: ResnetGenerator/Sequential[model]/ResnetBlock[17]/Sequential[conv_block]/ReLU[3]\r\n  %345 : Float(1, 256, 66, 66) = Pad[mode=reflect, pads=[0, 0, 1, 1, 0, 0, 1, 1]](%344), scope: ResnetGenerator/Sequential[model]/ResnetBlock[17]/Sequential[conv_block]/ReflectionPad2d[4]\r\n  %346 : Float(1, 256, 64, 64) = Conv[dilations=[1, 1], group=1, kernel_shape=[3, 3], pads=[0, 0, 0, 0], strides=[1, 1]](%345, %73, %74), scope: ResnetGenerator/Sequential[model]/ResnetBlock[17]/Sequential[conv_block]/Conv2d[5]\r\n  %347 : Float(1, 256, 64, 64) = Reshape[shape=[1, 256, 64, 64]](%346), scope: ResnetGenerator/Sequential[model]/ResnetBlock[17]/Sequential[conv_block]/InstanceNorm2d[6]\r\n  %348 : Float(256) = Constant[value=<Tensor>](), scope: ResnetGenerator/Sequential[model]/ResnetBlock[17]/Sequential[conv_block]/InstanceNorm2d[6]\r\n  %349 : Float(256) = Constant[value=<Tensor>](), scope: ResnetGenerator/Sequential[model]/ResnetBlock[17]/Sequential[conv_block]/InstanceNorm2d[6]\r\n  %350 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/ResnetBlock[17]/Sequential[conv_block]/InstanceNorm2d[6]\r\n  %351 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/ResnetBlock[17]/Sequential[conv_block]/InstanceNorm2d[6]\r\n  %352 : Float(1, 256, 64, 64), %353 : Float(256), %354 : Float(256), %batch_norm_dead_output-355 : UNKNOWN_TYPE, %batch_norm_dead_output-356 : UNKNOWN_TYPE = BatchNormalization[consumed_inputs=[0, 0, 0, 1, 1], epsilon=1e-05, is_test=0, momentum=0.9](%347, %350, %351, %348, %349), scope: ResnetGenerator/Sequential[model]/ResnetBlock[17]/Sequential[conv_block]/InstanceNorm2d[6]\r\n  %357 : Float(1, 256, 64, 64) = Reshape[shape=[1, 256, 64, 64]](%352), scope: ResnetGenerator/Sequential[model]/ResnetBlock[17]/Sequential[conv_block]/InstanceNorm2d[6]\r\n  %358 : Float(1, 256, 64, 64) = Add(%330, %357), scope: ResnetGenerator/Sequential[model]/ResnetBlock[17]\r\n  %359 : Float(1, 256, 66, 66) = Pad[mode=reflect, pads=[0, 0, 1, 1, 0, 0, 1, 1]](%358), scope: ResnetGenerator/Sequential[model]/ResnetBlock[18]/Sequential[conv_block]/ReflectionPad2d[0]\r\n  %360 : Float(1, 256, 64, 64) = Conv[dilations=[1, 1], group=1, kernel_shape=[3, 3], pads=[0, 0, 0, 0], strides=[1, 1]](%359, %77, %78), scope: ResnetGenerator/Sequential[model]/ResnetBlock[18]/Sequential[conv_block]/Conv2d[1]\r\n  %361 : Float(1, 256, 64, 64) = Reshape[shape=[1, 256, 64, 64]](%360), scope: ResnetGenerator/Sequential[model]/ResnetBlock[18]/Sequential[conv_block]/InstanceNorm2d[2]\r\n  %362 : Float(256) = Constant[value=<Tensor>](), scope: ResnetGenerator/Sequential[model]/ResnetBlock[18]/Sequential[conv_block]/InstanceNorm2d[2]\r\n  %363 : Float(256) = Constant[value=<Tensor>](), scope: ResnetGenerator/Sequential[model]/ResnetBlock[18]/Sequential[conv_block]/InstanceNorm2d[2]\r\n  %364 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/ResnetBlock[18]/Sequential[conv_block]/InstanceNorm2d[2]\r\n  %365 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/ResnetBlock[18]/Sequential[conv_block]/InstanceNorm2d[2]\r\n  %366 : Float(1, 256, 64, 64), %367 : Float(256), %368 : Float(256), %batch_norm_dead_output-369 : UNKNOWN_TYPE, %batch_norm_dead_output-370 : UNKNOWN_TYPE = BatchNormalization[consumed_inputs=[0, 0, 0, 1, 1], epsilon=1e-05, is_test=0, momentum=0.9](%361, %364, %365, %362, %363), scope: ResnetGenerator/Sequential[model]/ResnetBlock[18]/Sequential[conv_block]/InstanceNorm2d[2]\r\n  %371 : Float(1, 256, 64, 64) = Reshape[shape=[1, 256, 64, 64]](%366), scope: ResnetGenerator/Sequential[model]/ResnetBlock[18]/Sequential[conv_block]/InstanceNorm2d[2]\r\n  %372 : Float(1, 256, 64, 64) = Relu(%371), scope: ResnetGenerator/Sequential[model]/ResnetBlock[18]/Sequential[conv_block]/ReLU[3]\r\n  %373 : Float(1, 256, 66, 66) = Pad[mode=reflect, pads=[0, 0, 1, 1, 0, 0, 1, 1]](%372), scope: ResnetGenerator/Sequential[model]/ResnetBlock[18]/Sequential[conv_block]/ReflectionPad2d[4]\r\n  %374 : Float(1, 256, 64, 64) = Conv[dilations=[1, 1], group=1, kernel_shape=[3, 3], pads=[0, 0, 0, 0], strides=[1, 1]](%373, %81, %82), scope: ResnetGenerator/Sequential[model]/ResnetBlock[18]/Sequential[conv_block]/Conv2d[5]\r\n  %375 : Float(1, 256, 64, 64) = Reshape[shape=[1, 256, 64, 64]](%374), scope: ResnetGenerator/Sequential[model]/ResnetBlock[18]/Sequential[conv_block]/InstanceNorm2d[6]\r\n  %376 : Float(256) = Constant[value=<Tensor>](), scope: ResnetGenerator/Sequential[model]/ResnetBlock[18]/Sequential[conv_block]/InstanceNorm2d[6]\r\n  %377 : Float(256) = Constant[value=<Tensor>](), scope: ResnetGenerator/Sequential[model]/ResnetBlock[18]/Sequential[conv_block]/InstanceNorm2d[6]\r\n  %378 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/ResnetBlock[18]/Sequential[conv_block]/InstanceNorm2d[6]\r\n  %379 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/ResnetBlock[18]/Sequential[conv_block]/InstanceNorm2d[6]\r\n  %380 : Float(1, 256, 64, 64), %381 : Float(256), %382 : Float(256), %batch_norm_dead_output-383 : UNKNOWN_TYPE, %batch_norm_dead_output-384 : UNKNOWN_TYPE = BatchNormalization[consumed_inputs=[0, 0, 0, 1, 1], epsilon=1e-05, is_test=0, momentum=0.9](%375, %378, %379, %376, %377), scope: ResnetGenerator/Sequential[model]/ResnetBlock[18]/Sequential[conv_block]/InstanceNorm2d[6]\r\n  %385 : Float(1, 256, 64, 64) = Reshape[shape=[1, 256, 64, 64]](%380), scope: ResnetGenerator/Sequential[model]/ResnetBlock[18]/Sequential[conv_block]/InstanceNorm2d[6]\r\n  %386 : Float(1, 256, 64, 64) = Add(%358, %385), scope: ResnetGenerator/Sequential[model]/ResnetBlock[18]\r\n  %387 : Float(1, 128, 128, 128) = _convolution[stride=[2, 2], padding=[1, 1], dilation=[1, 1], transposed=1, output_padding=[1, 1], groups=1, benchmark=0, deterministic=0, cudnn_enabled=1](%386, %85, %86), scope: ResnetGenerator/Sequential[model]/ConvTranspose2d[19]\r\n  %388 : Float(1, 128, 128, 128) = Reshape[shape=[1, 128, 128, 128]](%387), scope: ResnetGenerator/Sequential[model]/InstanceNorm2d[20]\r\n  %389 : Float(128) = Constant[value=<Tensor>](), scope: ResnetGenerator/Sequential[model]/InstanceNorm2d[20]\r\n  %390 : Float(128) = Constant[value=<Tensor>](), scope: ResnetGenerator/Sequential[model]/InstanceNorm2d[20]\r\n  %391 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/InstanceNorm2d[20]\r\n  %392 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/InstanceNorm2d[20]\r\n  %393 : Float(1, 128, 128, 128), %394 : Float(128), %395 : Float(128), %batch_norm_dead_output-396 : UNKNOWN_TYPE, %batch_norm_dead_output-397 : UNKNOWN_TYPE = BatchNormalization[consumed_inputs=[0, 0, 0, 1, 1], epsilon=1e-05, is_test=0, momentum=0.9](%388, %391, %392, %389, %390), scope: ResnetGenerator/Sequential[model]/InstanceNorm2d[20]\r\n  %398 : Float(1, 128, 128, 128) = Reshape[shape=[1, 128, 128, 128]](%393), scope: ResnetGenerator/Sequential[model]/InstanceNorm2d[20]\r\n  %399 : Float(1, 128, 128, 128) = Relu(%398), scope: ResnetGenerator/Sequential[model]/ReLU[21]\r\n  %400 : Float(1, 64, 256, 256) = _convolution[stride=[2, 2], padding=[1, 1], dilation=[1, 1], transposed=1, output_padding=[1, 1], groups=1, benchmark=0, deterministic=0, cudnn_enabled=1](%399, %89, %90), scope: ResnetGenerator/Sequential[model]/ConvTranspose2d[22]\r\n  %401 : Float(1, 64, 256, 256) = Reshape[shape=[1, 64, 256, 256]](%400), scope: ResnetGenerator/Sequential[model]/InstanceNorm2d[23]\r\n  %402 : Float(64) = Constant[value=<Tensor>](), scope: ResnetGenerator/Sequential[model]/InstanceNorm2d[23]\r\n  %403 : Float(64) = Constant[value=<Tensor>](), scope: ResnetGenerator/Sequential[model]/InstanceNorm2d[23]\r\n  %404 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/InstanceNorm2d[23]\r\n  %405 : UNKNOWN_TYPE = Undefined(), scope: ResnetGenerator/Sequential[model]/InstanceNorm2d[23]\r\n  %406 : Float(1, 64, 256, 256), %407 : Float(64), %408 : Float(64), %batch_norm_dead_output-409 : UNKNOWN_TYPE, %batch_norm_dead_output-410 : UNKNOWN_TYPE = BatchNormalization[consumed_inputs=[0, 0, 0, 1, 1], epsilon=1e-05, is_test=0, momentum=0.9](%401, %404, %405, %402, %403), scope: ResnetGenerator/Sequential[model]/InstanceNorm2d[23]\r\n  %411 : Float(1, 64, 256, 256) = Reshape[shape=[1, 64, 256, 256]](%406), scope: ResnetGenerator/Sequential[model]/InstanceNorm2d[23]\r\n  %412 : Float(1, 64, 256, 256) = Relu(%411), scope: ResnetGenerator/Sequential[model]/ReLU[24]\r\n  %413 : Float(1, 64, 262, 262) = Pad[mode=reflect, pads=[0, 0, 3, 3, 0, 0, 3, 3]](%412), scope: ResnetGenerator/Sequential[model]/ReflectionPad2d[25]\r\n  %414 : Float(1, 3, 256, 256) = Conv[dilations=[1, 1], group=1, kernel_shape=[7, 7], pads=[0, 0, 0, 0], strides=[1, 1]](%413, %93, %94), scope: ResnetGenerator/Sequential[model]/Conv2d[26]\r\n  %415 : Float(1, 3, 256, 256) = Tanh(%414), scope: ResnetGenerator/Sequential[model]/Tanh[27]\r\n  return (%415);\r\n}\r\n```"}