{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/352104985", "html_url": "https://github.com/pytorch/pytorch/pull/3837#issuecomment-352104985", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/3837", "id": 352104985, "node_id": "MDEyOklzc3VlQ29tbWVudDM1MjEwNDk4NQ==", "user": {"login": "flennerhag", "id": 19593480, "node_id": "MDQ6VXNlcjE5NTkzNDgw", "avatar_url": "https://avatars0.githubusercontent.com/u/19593480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flennerhag", "html_url": "https://github.com/flennerhag", "followers_url": "https://api.github.com/users/flennerhag/followers", "following_url": "https://api.github.com/users/flennerhag/following{/other_user}", "gists_url": "https://api.github.com/users/flennerhag/gists{/gist_id}", "starred_url": "https://api.github.com/users/flennerhag/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flennerhag/subscriptions", "organizations_url": "https://api.github.com/users/flennerhag/orgs", "repos_url": "https://api.github.com/users/flennerhag/repos", "events_url": "https://api.github.com/users/flennerhag/events{/privacy}", "received_events_url": "https://api.github.com/users/flennerhag/received_events", "type": "User", "site_admin": false}, "created_at": "2017-12-15T20:33:22Z", "updated_at": "2017-12-15T20:33:22Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=11662379\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ptrblck\">@ptrblck</a> great initiative, I've been using my own wrapper for a while. Would be nice to have it in the code base.</p>\n<p>You could simplify the code quite a bit though by using plain python operations instead of invoking torch overheads, e.g. something like</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">split</span>(<span class=\"pl-smi\">tensor</span>, <span class=\"pl-smi\">sizes</span>, <span class=\"pl-smi\">dim</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">0</span>):\n    <span class=\"pl-k\">if</span> dim <span class=\"pl-k\">&lt;</span> <span class=\"pl-c1\">0</span>:\n        dim <span class=\"pl-k\">+=</span> tensor.dim()\n\n    <span class=\"pl-k\">if</span> <span class=\"pl-c1\">isinstance</span>(sizes, <span class=\"pl-c1\">int</span>):\n        <span class=\"pl-c\"><span class=\"pl-c\">#</span> original code ...</span>\n        <span class=\"pl-k\">return</span> chunks\n\n    <span class=\"pl-k\">if</span> tensor.size(dim) <span class=\"pl-k\">!=</span> <span class=\"pl-c1\">sum</span>(sizes):\n        <span class=\"pl-k\">raise</span> <span class=\"pl-c1\">ValueError</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Sizes do not match tensor size in dim<span class=\"pl-pds\">\"</span></span>)\n\n    nsizes <span class=\"pl-k\">=</span> <span class=\"pl-c1\">len</span>(sizes)\n    sizes <span class=\"pl-k\">=</span> [<span class=\"pl-c1\">0</span>] <span class=\"pl-k\">+</span> sizes\n    <span class=\"pl-k\">return</span> <span class=\"pl-c1\">tuple</span>(tensor.narrow(dim, sizes[i], sizes[i <span class=\"pl-k\">+</span> <span class=\"pl-c1\">1</span>])\n                 <span class=\"pl-k\">for</span> i <span class=\"pl-k\">in</span> <span class=\"pl-c1\">range</span>(nsizes))</pre></div>\n<p>Should be slightly faster too.</p>", "body_text": "@ptrblck great initiative, I've been using my own wrapper for a while. Would be nice to have it in the code base.\nYou could simplify the code quite a bit though by using plain python operations instead of invoking torch overheads, e.g. something like\ndef split(tensor, sizes, dim=0):\n    if dim < 0:\n        dim += tensor.dim()\n\n    if isinstance(sizes, int):\n        # original code ...\n        return chunks\n\n    if tensor.size(dim) != sum(sizes):\n        raise ValueError(\"Sizes do not match tensor size in dim\")\n\n    nsizes = len(sizes)\n    sizes = [0] + sizes\n    return tuple(tensor.narrow(dim, sizes[i], sizes[i + 1])\n                 for i in range(nsizes))\nShould be slightly faster too.", "body": "@ptrblck great initiative, I've been using my own wrapper for a while. Would be nice to have it in the code base. \r\n\r\nYou could simplify the code quite a bit though by using plain python operations instead of invoking torch overheads, e.g. something like\r\n\r\n```python\r\ndef split(tensor, sizes, dim=0):\r\n    if dim < 0:\r\n        dim += tensor.dim()\r\n\r\n    if isinstance(sizes, int):\r\n        # original code ...\r\n        return chunks\r\n\r\n    if tensor.size(dim) != sum(sizes):\r\n        raise ValueError(\"Sizes do not match tensor size in dim\")\r\n\r\n    nsizes = len(sizes)\r\n    sizes = [0] + sizes\r\n    return tuple(tensor.narrow(dim, sizes[i], sizes[i + 1])\r\n                 for i in range(nsizes))\r\n```\r\n\r\nShould be slightly faster too."}