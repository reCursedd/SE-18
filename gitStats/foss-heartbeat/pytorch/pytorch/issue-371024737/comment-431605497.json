{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/431605497", "html_url": "https://github.com/pytorch/pytorch/pull/12762#issuecomment-431605497", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/12762", "id": 431605497, "node_id": "MDEyOklzc3VlQ29tbWVudDQzMTYwNTQ5Nw==", "user": {"login": "x1angli", "id": 8603485, "node_id": "MDQ6VXNlcjg2MDM0ODU=", "avatar_url": "https://avatars0.githubusercontent.com/u/8603485?v=4", "gravatar_id": "", "url": "https://api.github.com/users/x1angli", "html_url": "https://github.com/x1angli", "followers_url": "https://api.github.com/users/x1angli/followers", "following_url": "https://api.github.com/users/x1angli/following{/other_user}", "gists_url": "https://api.github.com/users/x1angli/gists{/gist_id}", "starred_url": "https://api.github.com/users/x1angli/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/x1angli/subscriptions", "organizations_url": "https://api.github.com/users/x1angli/orgs", "repos_url": "https://api.github.com/users/x1angli/repos", "events_url": "https://api.github.com/users/x1angli/events{/privacy}", "received_events_url": "https://api.github.com/users/x1angli/received_events", "type": "User", "site_admin": false}, "created_at": "2018-10-20T18:10:03Z", "updated_at": "2018-10-20T18:11:57Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Oh yeah , it's definitely more elegant to use MyPy to generate a hint <code>.pyi</code> file as described in <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"368392754\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/12500\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/pytorch/pytorch/pull/12500/hovercard\" href=\"https://github.com/pytorch/pytorch/pull/12500\">#12500</a>. I was not aware of that.....</p>\n<p>BTW,  since we want to stick with the rule that \"all strings in <code>__all__</code> must be explicitly defined in the same <code>__init__.py</code> file\", it might be better to remove other redundant elements in the <code>__all__</code> array, such as  <code>'chunk', 'split', 'stack', 'matmul', 'no_grad', 'enable_grad'</code>.</p>\n<p>Moreover, we might want to consider removing all <code>__all__</code>s altogether.</p>\n<blockquote>\n<p>Generally avoid defining <code>__all__</code>, since it's mostly redundant as stubs mostly have public functionality.</p>\n</blockquote>\n<p>as described in  <a href=\"https://github.com/python/mypy/wiki/Creating-Stubs-For-Python-Modules\">mypy doc</a></p>", "body_text": "Oh yeah , it's definitely more elegant to use MyPy to generate a hint .pyi file as described in #12500. I was not aware of that.....\nBTW,  since we want to stick with the rule that \"all strings in __all__ must be explicitly defined in the same __init__.py file\", it might be better to remove other redundant elements in the __all__ array, such as  'chunk', 'split', 'stack', 'matmul', 'no_grad', 'enable_grad'.\nMoreover, we might want to consider removing all __all__s altogether.\n\nGenerally avoid defining __all__, since it's mostly redundant as stubs mostly have public functionality.\n\nas described in  mypy doc", "body": "Oh yeah , it's definitely more elegant to use MyPy to generate a hint `.pyi` file as described in #12500. I was not aware of that.....\r\n\r\nBTW,  since we want to stick with the rule that \"all strings in `__all__` must be explicitly defined in the same `__init__.py` file\", it might be better to remove other redundant elements in the `__all__` array, such as  `'chunk', 'split', 'stack', 'matmul', 'no_grad', 'enable_grad'`.\r\n\r\nMoreover, we might want to consider removing all `__all__`s altogether.\r\n\r\n>  Generally avoid defining `__all__`, since it's mostly redundant as stubs mostly have public functionality.\r\n\r\nas described in  [mypy doc](https://github.com/python/mypy/wiki/Creating-Stubs-For-Python-Modules)"}