{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/294799483", "html_url": "https://github.com/pytorch/pytorch/pull/1243#issuecomment-294799483", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/1243", "id": 294799483, "node_id": "MDEyOklzc3VlQ29tbWVudDI5NDc5OTQ4Mw==", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "created_at": "2017-04-18T11:40:42Z", "updated_at": "2017-04-18T11:40:42Z", "author_association": "MEMBER", "body_html": "<p>Do you know where do the threads stop? It's probably because <code>python_error</code>'s destructor acquires the GIL, but I can't really think of any way to make it deadlock right now. Maybe we acquire <code>backward_task.mutex</code> and the GIL in different orders.</p>", "body_text": "Do you know where do the threads stop? It's probably because python_error's destructor acquires the GIL, but I can't really think of any way to make it deadlock right now. Maybe we acquire backward_task.mutex and the GIL in different orders.", "body": "Do you know where do the threads stop? It's probably because `python_error`'s destructor acquires the GIL, but I can't really think of any way to make it deadlock right now. Maybe we acquire `backward_task.mutex` and the GIL in different orders."}