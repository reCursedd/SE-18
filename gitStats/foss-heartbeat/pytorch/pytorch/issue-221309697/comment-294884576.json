{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/294884576", "html_url": "https://github.com/pytorch/pytorch/pull/1243#issuecomment-294884576", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/1243", "id": 294884576, "node_id": "MDEyOklzc3VlQ29tbWVudDI5NDg4NDU3Ng==", "user": {"login": "tylergenter", "id": 4969356, "node_id": "MDQ6VXNlcjQ5NjkzNTY=", "avatar_url": "https://avatars0.githubusercontent.com/u/4969356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tylergenter", "html_url": "https://github.com/tylergenter", "followers_url": "https://api.github.com/users/tylergenter/followers", "following_url": "https://api.github.com/users/tylergenter/following{/other_user}", "gists_url": "https://api.github.com/users/tylergenter/gists{/gist_id}", "starred_url": "https://api.github.com/users/tylergenter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tylergenter/subscriptions", "organizations_url": "https://api.github.com/users/tylergenter/orgs", "repos_url": "https://api.github.com/users/tylergenter/repos", "events_url": "https://api.github.com/users/tylergenter/events{/privacy}", "received_events_url": "https://api.github.com/users/tylergenter/received_events", "type": "User", "site_admin": false}, "created_at": "2017-04-18T15:37:24Z", "updated_at": "2017-04-18T15:37:24Z", "author_association": "NONE", "body_html": "<p>The main thread returns to the Python interpreter, but it acts really weird. Basically I have to kill the process. The worker thread waits in ReadyQueue::pop_back, looks like it's waiting for the queue to not be empty.</p>\n<p>What is happening is that when Engine::thread_on_exception gets called in the worker thread, the exception in python_error looks normal. More specifically, e-&gt;type-&gt;ob_refcount == 31, and e-&gt;value-&gt;ob_refcount == e-&gt;traceback-&gt;ob_refcount = 1. When we get to Engine::backward in the main thread (line 339), e-&gt;type-&gt;ob_refcount == 30, and e-&gt;value-&gt;ob_refcount == e-&gt;traceback-&gt;ob_refcount = 0. By the time we get to python_error::restore (via THPEngine_run_backward), e-&gt;type-&gt;ob_refcount == 29, and e-&gt;value-&gt;ob_refcount == e-&gt;traceback-&gt;ob_refcount = -1. So it appears as if the python_error destructor is getting called twice before python_error::restore, when it shouldn't be called at all.</p>", "body_text": "The main thread returns to the Python interpreter, but it acts really weird. Basically I have to kill the process. The worker thread waits in ReadyQueue::pop_back, looks like it's waiting for the queue to not be empty.\nWhat is happening is that when Engine::thread_on_exception gets called in the worker thread, the exception in python_error looks normal. More specifically, e->type->ob_refcount == 31, and e->value->ob_refcount == e->traceback->ob_refcount = 1. When we get to Engine::backward in the main thread (line 339), e->type->ob_refcount == 30, and e->value->ob_refcount == e->traceback->ob_refcount = 0. By the time we get to python_error::restore (via THPEngine_run_backward), e->type->ob_refcount == 29, and e->value->ob_refcount == e->traceback->ob_refcount = -1. So it appears as if the python_error destructor is getting called twice before python_error::restore, when it shouldn't be called at all.", "body": "The main thread returns to the Python interpreter, but it acts really weird. Basically I have to kill the process. The worker thread waits in ReadyQueue::pop_back, looks like it's waiting for the queue to not be empty.\r\n\r\nWhat is happening is that when Engine::thread_on_exception gets called in the worker thread, the exception in python_error looks normal. More specifically, e->type->ob_refcount == 31, and e->value->ob_refcount == e->traceback->ob_refcount = 1. When we get to Engine::backward in the main thread (line 339), e->type->ob_refcount == 30, and e->value->ob_refcount == e->traceback->ob_refcount = 0. By the time we get to python_error::restore (via THPEngine_run_backward), e->type->ob_refcount == 29, and e->value->ob_refcount == e->traceback->ob_refcount = -1. So it appears as if the python_error destructor is getting called twice before python_error::restore, when it shouldn't be called at all."}