{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/160987296", "pull_request_review_id": 88200820, "id": 160987296, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MDk4NzI5Ng==", "diff_hunk": "@@ -90,9 +139,32 @@ struct Function : std::enable_shared_from_this<Function> {\n   };\n \n   // Computes is_executable and next_functions from a list of input variables\n-  static FunctionFlags flags(const variable_list& inputs);\n-  static FunctionFlags flags(const std::initializer_list<Variable>& inputs);\n-  static FunctionFlags flags(at::TensorList inputs);\n+  // (but which are tensors, because this is what happens in the autogenerated\n+  // code)\n+  template<typename... Args> inline static FunctionFlags tensor_flags(Args... args) {\n+    FunctionFlags f;\n+    f.is_executable = false;\n+    f.next_functions.resize(countTensors(args...));\n+    if (!GradMode::is_enabled()) {\n+      // TODO: avoid allocating next_functions entirely if grad_mode is disabled\n+      return f;\n+    }\n+    set_tensor_function_flags(f, 0, args...);\n+    return f;\n+  }\n+\n+  // Computes is_executable and next_functions from a list of input variables\n+  template<typename... Args> inline static FunctionFlags flags(Args... args) {\n+    FunctionFlags f;\n+    f.is_executable = false;\n+    f.next_functions.resize(countVariables(args...));\n+    if (!GradMode::is_enabled()) {\n+      // TODO: avoid allocating next_functions entirely if grad_mode is disabled", "path": "torch/csrc/autograd/function.h", "position": null, "original_position": 93, "commit_id": "01b2c65b11dc030567189a4af5aaa151d1004ecf", "original_commit_id": "36381d5d099598c52145ad5526087aa75e795a56", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "I could have said the same thing for the original code. Since such a thing was not done, I assumed that there was some reason why it wasn't as simple as that.", "created_at": "2018-01-11T15:37:46Z", "updated_at": "2018-11-23T15:38:03Z", "html_url": "https://github.com/pytorch/pytorch/pull/4593#discussion_r160987296", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4593", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/160987296"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/4593#discussion_r160987296"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4593"}}, "body_html": "<p>I could have said the same thing for the original code. Since such a thing was not done, I assumed that there was some reason why it wasn't as simple as that.</p>", "body_text": "I could have said the same thing for the original code. Since such a thing was not done, I assumed that there was some reason why it wasn't as simple as that.", "in_reply_to_id": 160889291}