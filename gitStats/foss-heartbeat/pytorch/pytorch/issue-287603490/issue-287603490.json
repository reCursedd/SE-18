{"url": "https://api.github.com/repos/pytorch/pytorch/issues/4593", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/4593/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/4593/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/4593/events", "html_url": "https://github.com/pytorch/pytorch/pull/4593", "id": 287603490, "node_id": "MDExOlB1bGxSZXF1ZXN0MTYyMjQ5ODU5", "number": 4593, "title": "Use variadic templates more uniformly in generated code.", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-01-10T22:44:35Z", "updated_at": "2018-11-23T15:38:15Z", "closed_at": "2018-01-19T20:54:15Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/4593", "html_url": "https://github.com/pytorch/pytorch/pull/4593", "diff_url": "https://github.com/pytorch/pytorch/pull/4593.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/4593.patch"}, "body_html": "<p>Suppose you are given a list of arguments, each of which may be Tensor or<br>\nTensorList.  How can you write a function that can treat these arguments<br>\nuniformly as a list of tensors, while avoiding allocation of an intermediate<br>\nvector?  Answer: variadic templates.</p>\n<p>This PR changes:</p>\n<ul>\n<li>compute_requires_grad</li>\n<li>compute_next_functions</li>\n<li>flatten</li>\n</ul>\n<p>To be implemented via variadic templates, bringing them in line with isTracing.<br>\nWe also write utility functions countTensors and countVariables to easily<br>\ncount how many tensors the flattened representation has.</p>\n<p>Everything is inline because I didn't want to think too hard about how to<br>\navoid duplicate symbols.</p>\n<p>One thing to be careful about: we cannot write a function with overloads for<br>\nboth Tensor and Variable, because both ArrayRef and Tensor have<br>\nimplicit conversions from Variable, making such an overload ambiguous.<br>\nThis is why there is a bit of duplication.  I am open to any suggestions for<br>\nhow to reduce this duplication.</p>\n<p>Signed-off-by: Edward Z. Yang <a href=\"mailto:ezyang@fb.com\">ezyang@fb.com</a></p>", "body_text": "Suppose you are given a list of arguments, each of which may be Tensor or\nTensorList.  How can you write a function that can treat these arguments\nuniformly as a list of tensors, while avoiding allocation of an intermediate\nvector?  Answer: variadic templates.\nThis PR changes:\n\ncompute_requires_grad\ncompute_next_functions\nflatten\n\nTo be implemented via variadic templates, bringing them in line with isTracing.\nWe also write utility functions countTensors and countVariables to easily\ncount how many tensors the flattened representation has.\nEverything is inline because I didn't want to think too hard about how to\navoid duplicate symbols.\nOne thing to be careful about: we cannot write a function with overloads for\nboth Tensor and Variable, because both ArrayRef and Tensor have\nimplicit conversions from Variable, making such an overload ambiguous.\nThis is why there is a bit of duplication.  I am open to any suggestions for\nhow to reduce this duplication.\nSigned-off-by: Edward Z. Yang ezyang@fb.com", "body": "Suppose you are given a list of arguments, each of which may be Tensor or\r\nTensorList.  How can you write a function that can treat these arguments\r\nuniformly as a list of tensors, while avoiding allocation of an intermediate\r\nvector?  Answer: variadic templates.\r\n\r\nThis PR changes:\r\n\r\n  - compute_requires_grad\r\n  - compute_next_functions\r\n  - flatten\r\n\r\nTo be implemented via variadic templates, bringing them in line with isTracing.\r\nWe also write utility functions countTensors and countVariables to easily\r\ncount how many tensors the flattened representation has.\r\n\r\nEverything is inline because I didn't want to think too hard about how to\r\navoid duplicate symbols.\r\n\r\nOne thing to be careful about: we cannot write a function with overloads for\r\nboth Tensor and Variable, because both ArrayRef<Variable> and Tensor have\r\nimplicit conversions from Variable, making such an overload ambiguous.\r\nThis is why there is a bit of duplication.  I am open to any suggestions for\r\nhow to reduce this duplication.\r\n\r\nSigned-off-by: Edward Z. Yang <ezyang@fb.com>"}