{"url": "https://api.github.com/repos/pytorch/pytorch/issues/10248", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/10248/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/10248/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/10248/events", "html_url": "https://github.com/pytorch/pytorch/issues/10248", "id": 347766399, "node_id": "MDU6SXNzdWUzNDc3NjYzOTk=", "number": 10248, "title": "torch.mean produces wrong computation result on Windows", "user": {"login": "bowen-xiao96", "id": 39450130, "node_id": "MDQ6VXNlcjM5NDUwMTMw", "avatar_url": "https://avatars2.githubusercontent.com/u/39450130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bowen-xiao96", "html_url": "https://github.com/bowen-xiao96", "followers_url": "https://api.github.com/users/bowen-xiao96/followers", "following_url": "https://api.github.com/users/bowen-xiao96/following{/other_user}", "gists_url": "https://api.github.com/users/bowen-xiao96/gists{/gist_id}", "starred_url": "https://api.github.com/users/bowen-xiao96/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bowen-xiao96/subscriptions", "organizations_url": "https://api.github.com/users/bowen-xiao96/orgs", "repos_url": "https://api.github.com/users/bowen-xiao96/repos", "events_url": "https://api.github.com/users/bowen-xiao96/events{/privacy}", "received_events_url": "https://api.github.com/users/bowen-xiao96/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 443484135, "node_id": "MDU6TGFiZWw0NDM0ODQxMzU=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/high%20priority", "name": "high priority", "color": "F22613", "default": false}, {"id": 790080431, "node_id": "MDU6TGFiZWw3OTAwODA0MzE=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/windows", "name": "windows", "color": "fcff6b", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "soumith", "id": 1310570, "node_id": "MDQ6VXNlcjEzMTA1NzA=", "avatar_url": "https://avatars0.githubusercontent.com/u/1310570?v=4", "gravatar_id": "", "url": "https://api.github.com/users/soumith", "html_url": "https://github.com/soumith", "followers_url": "https://api.github.com/users/soumith/followers", "following_url": "https://api.github.com/users/soumith/following{/other_user}", "gists_url": "https://api.github.com/users/soumith/gists{/gist_id}", "starred_url": "https://api.github.com/users/soumith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/soumith/subscriptions", "organizations_url": "https://api.github.com/users/soumith/orgs", "repos_url": "https://api.github.com/users/soumith/repos", "events_url": "https://api.github.com/users/soumith/events{/privacy}", "received_events_url": "https://api.github.com/users/soumith/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "soumith", "id": 1310570, "node_id": "MDQ6VXNlcjEzMTA1NzA=", "avatar_url": "https://avatars0.githubusercontent.com/u/1310570?v=4", "gravatar_id": "", "url": "https://api.github.com/users/soumith", "html_url": "https://github.com/soumith", "followers_url": "https://api.github.com/users/soumith/followers", "following_url": "https://api.github.com/users/soumith/following{/other_user}", "gists_url": "https://api.github.com/users/soumith/gists{/gist_id}", "starred_url": "https://api.github.com/users/soumith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/soumith/subscriptions", "organizations_url": "https://api.github.com/users/soumith/orgs", "repos_url": "https://api.github.com/users/soumith/repos", "events_url": "https://api.github.com/users/soumith/events{/privacy}", "received_events_url": "https://api.github.com/users/soumith/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 7, "created_at": "2018-08-06T03:26:37Z", "updated_at": "2018-08-07T02:40:15Z", "closed_at": "2018-08-06T21:12:13Z", "author_association": "NONE", "body_html": "<h2>Issue description</h2>\n<p>PyTorch 0.4.0 torch.mean produces wrong result</p>\n<h2>Code example</h2>\n<p>This happens when trying to calculate the mean pixel value of CIFAR10 dataset.<br>\nFollowing is the code:</p>\n<pre><code>import os, sys\nimport numpy as np\n\nimport torch\n\nfrom torchvision.datasets import CIFAR10\nfrom torch.utils.data import DataLoader\nfrom torchvision import transforms\n\ncifar10_dir = 'cifar'\ndataset = CIFAR10(\n    cifar10_dir,\n    train=True,\n    transform=transforms.ToTensor()\n)\n\ndataloader = DataLoader(\n    dataset,\n    batch_size=256,\n    shuffle=False,\n    num_workers=0,\n    pin_memory=False,\n    drop_last=False\n)\n\n# calculate mean and std of cifar10 training set\ndata = list()\nfor x, _ in dataloader:\n    # x: torch tensor\n    # n x c x h x w\n    data.append(x)\n\ndata = torch.cat(data, dim=0)\nprint(data.size())\n\ndata = torch.transpose(data, 0, 1).contiguous()\ndata = data.view(data.size(0), -1)\nprint(data.size())\nmean = torch.mean(data, dim=1)\n\nprint(mean)\n</code></pre>\n<p>It produces <code>tensor([ 0.3277,  0.3277,  0.3277])</code></p>\n<p>If we replace the last few lines with numpy calculation</p>\n<pre><code>data = data.numpy()\nprint(data.shape)\n\ndata = np.transpose(data, (1, 0, 2, 3))\ndata = np.reshape(data, (data.shape[0], -1))\nprint(data.shape)\nmean = np.mean(data, axis=1)\n\nprint(mean)\n</code></pre>\n<p>The result is <code>[0.49139968 0.48215827 0.44653124]</code>, which is correct, while the computation results of standard deviation (torch.std and np.std) are the same</p>\n<h2>System Info</h2>\n<p>PyTorch version: 0.4.0<br>\nIs debug build: No<br>\nCUDA used to build PyTorch: None</p>\n<p>OS: Microsoft Windows 10 Enterprise 2016 LTSB<br>\nGCC version: (GCC) 6.4.0<br>\nCMake version: version 3.6.2</p>\n<p>Python version: 3.6<br>\nIs CUDA available: No<br>\nCUDA runtime version: No CUDA<br>\nGPU models and configuration: No CUDA<br>\nNvidia driver version: No CUDA<br>\ncuDNN version: No CUDA</p>\n<p>Versions of relevant libraries:<br>\n[pip] numpy (1.14.3)<br>\n[pip] numpydoc (0.8.0)<br>\n[pip] torch (0.4.0)<br>\n[pip] torchfile (0.1.0)<br>\n[pip] torchnet (0.0.2)<br>\n[pip] torchvision (0.2.1)<br>\n[conda] pytorch-cpu               0.4.0           py36_cpuhe774522_1    pytorch<br>\n[conda] torchfile                 0.1.0                     <br>\n[conda] torchnet                  0.0.2                     <br>\n[conda] torchvision               0.2.1                     </p>", "body_text": "Issue description\nPyTorch 0.4.0 torch.mean produces wrong result\nCode example\nThis happens when trying to calculate the mean pixel value of CIFAR10 dataset.\nFollowing is the code:\nimport os, sys\nimport numpy as np\n\nimport torch\n\nfrom torchvision.datasets import CIFAR10\nfrom torch.utils.data import DataLoader\nfrom torchvision import transforms\n\ncifar10_dir = 'cifar'\ndataset = CIFAR10(\n    cifar10_dir,\n    train=True,\n    transform=transforms.ToTensor()\n)\n\ndataloader = DataLoader(\n    dataset,\n    batch_size=256,\n    shuffle=False,\n    num_workers=0,\n    pin_memory=False,\n    drop_last=False\n)\n\n# calculate mean and std of cifar10 training set\ndata = list()\nfor x, _ in dataloader:\n    # x: torch tensor\n    # n x c x h x w\n    data.append(x)\n\ndata = torch.cat(data, dim=0)\nprint(data.size())\n\ndata = torch.transpose(data, 0, 1).contiguous()\ndata = data.view(data.size(0), -1)\nprint(data.size())\nmean = torch.mean(data, dim=1)\n\nprint(mean)\n\nIt produces tensor([ 0.3277,  0.3277,  0.3277])\nIf we replace the last few lines with numpy calculation\ndata = data.numpy()\nprint(data.shape)\n\ndata = np.transpose(data, (1, 0, 2, 3))\ndata = np.reshape(data, (data.shape[0], -1))\nprint(data.shape)\nmean = np.mean(data, axis=1)\n\nprint(mean)\n\nThe result is [0.49139968 0.48215827 0.44653124], which is correct, while the computation results of standard deviation (torch.std and np.std) are the same\nSystem Info\nPyTorch version: 0.4.0\nIs debug build: No\nCUDA used to build PyTorch: None\nOS: Microsoft Windows 10 Enterprise 2016 LTSB\nGCC version: (GCC) 6.4.0\nCMake version: version 3.6.2\nPython version: 3.6\nIs CUDA available: No\nCUDA runtime version: No CUDA\nGPU models and configuration: No CUDA\nNvidia driver version: No CUDA\ncuDNN version: No CUDA\nVersions of relevant libraries:\n[pip] numpy (1.14.3)\n[pip] numpydoc (0.8.0)\n[pip] torch (0.4.0)\n[pip] torchfile (0.1.0)\n[pip] torchnet (0.0.2)\n[pip] torchvision (0.2.1)\n[conda] pytorch-cpu               0.4.0           py36_cpuhe774522_1    pytorch\n[conda] torchfile                 0.1.0                     \n[conda] torchnet                  0.0.2                     \n[conda] torchvision               0.2.1", "body": "## Issue description\r\n\r\nPyTorch 0.4.0 torch.mean produces wrong result\r\n\r\n## Code example\r\n\r\nThis happens when trying to calculate the mean pixel value of CIFAR10 dataset.\r\nFollowing is the code:\r\n```\r\nimport os, sys\r\nimport numpy as np\r\n\r\nimport torch\r\n\r\nfrom torchvision.datasets import CIFAR10\r\nfrom torch.utils.data import DataLoader\r\nfrom torchvision import transforms\r\n\r\ncifar10_dir = 'cifar'\r\ndataset = CIFAR10(\r\n    cifar10_dir,\r\n    train=True,\r\n    transform=transforms.ToTensor()\r\n)\r\n\r\ndataloader = DataLoader(\r\n    dataset,\r\n    batch_size=256,\r\n    shuffle=False,\r\n    num_workers=0,\r\n    pin_memory=False,\r\n    drop_last=False\r\n)\r\n\r\n# calculate mean and std of cifar10 training set\r\ndata = list()\r\nfor x, _ in dataloader:\r\n    # x: torch tensor\r\n    # n x c x h x w\r\n    data.append(x)\r\n\r\ndata = torch.cat(data, dim=0)\r\nprint(data.size())\r\n\r\ndata = torch.transpose(data, 0, 1).contiguous()\r\ndata = data.view(data.size(0), -1)\r\nprint(data.size())\r\nmean = torch.mean(data, dim=1)\r\n\r\nprint(mean)\r\n```\r\nIt produces `tensor([ 0.3277,  0.3277,  0.3277])`\r\n\r\nIf we replace the last few lines with numpy calculation\r\n\r\n```\r\ndata = data.numpy()\r\nprint(data.shape)\r\n\r\ndata = np.transpose(data, (1, 0, 2, 3))\r\ndata = np.reshape(data, (data.shape[0], -1))\r\nprint(data.shape)\r\nmean = np.mean(data, axis=1)\r\n\r\nprint(mean)\r\n```\r\n\r\nThe result is `[0.49139968 0.48215827 0.44653124]`, which is correct, while the computation results of standard deviation (torch.std and np.std) are the same\r\n## System Info\r\nPyTorch version: 0.4.0\r\nIs debug build: No\r\nCUDA used to build PyTorch: None\r\n\r\nOS: Microsoft Windows 10 Enterprise 2016 LTSB\r\nGCC version: (GCC) 6.4.0\r\nCMake version: version 3.6.2\r\n\r\nPython version: 3.6\r\nIs CUDA available: No\r\nCUDA runtime version: No CUDA\r\nGPU models and configuration: No CUDA\r\nNvidia driver version: No CUDA\r\ncuDNN version: No CUDA\r\n\r\nVersions of relevant libraries:\r\n[pip] numpy (1.14.3)\r\n[pip] numpydoc (0.8.0)\r\n[pip] torch (0.4.0)\r\n[pip] torchfile (0.1.0)\r\n[pip] torchnet (0.0.2)\r\n[pip] torchvision (0.2.1)\r\n[conda] pytorch-cpu               0.4.0           py36_cpuhe774522_1    pytorch\r\n[conda] torchfile                 0.1.0                     <pip>\r\n[conda] torchnet                  0.0.2                     <pip>\r\n[conda] torchvision               0.2.1                     <pip>"}