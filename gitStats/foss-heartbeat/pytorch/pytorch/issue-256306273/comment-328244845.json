{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/328244845", "html_url": "https://github.com/pytorch/pytorch/issues/2674#issuecomment-328244845", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/2674", "id": 328244845, "node_id": "MDEyOklzc3VlQ29tbWVudDMyODI0NDg0NQ==", "user": {"login": "ilkarman", "id": 20063954, "node_id": "MDQ6VXNlcjIwMDYzOTU0", "avatar_url": "https://avatars2.githubusercontent.com/u/20063954?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ilkarman", "html_url": "https://github.com/ilkarman", "followers_url": "https://api.github.com/users/ilkarman/followers", "following_url": "https://api.github.com/users/ilkarman/following{/other_user}", "gists_url": "https://api.github.com/users/ilkarman/gists{/gist_id}", "starred_url": "https://api.github.com/users/ilkarman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ilkarman/subscriptions", "organizations_url": "https://api.github.com/users/ilkarman/orgs", "repos_url": "https://api.github.com/users/ilkarman/repos", "events_url": "https://api.github.com/users/ilkarman/events{/privacy}", "received_events_url": "https://api.github.com/users/ilkarman/received_events", "type": "User", "site_admin": false}, "created_at": "2017-09-09T01:11:05Z", "updated_at": "2017-09-09T01:11:05Z", "author_association": "NONE", "body_html": "<p>I think batch_first should be set to True to match the input format, like <a href=\"https://github.com/ilkarman/DeepLearningFrameworks/blob/lstm/LSTM_PyTorch_IMDB.ipynb\">here</a>:</p>\n<pre><code>class SymbolModule(nn.Module):\n    def __init__(self):\n        super(SymbolModule, self).__init__()\n        \n        self.embedding = nn.Embedding(num_embeddings=MAXFEATURES,\n                                      embedding_dim=EMBEDSIZE)\n        # If batch-first then input and output \n        # provided as (batch, seq, features)\n        self.gru = nn.GRU(input_size=EMBEDSIZE, \n                          hidden_size=NUMHIDDEN, \n                          num_layers=1,\n                          batch_first=True,\n                          bidirectional=False)   \n        self.l_out = nn.Linear(in_features=NUMHIDDEN*1,\n                               out_features=2)\n\n    def forward(self, x):\n        x = self.embedding(x)\n        h0 = Variable(torch.zeros(1, BATCHSIZE, NUMHIDDEN)).cuda()\n        x, h = self.gru(x, h0)\n        # just get the last hidden state\n        x = x[:,-1,:].squeeze()\n        x = self.l_out(x)\n        return x\n</code></pre>", "body_text": "I think batch_first should be set to True to match the input format, like here:\nclass SymbolModule(nn.Module):\n    def __init__(self):\n        super(SymbolModule, self).__init__()\n        \n        self.embedding = nn.Embedding(num_embeddings=MAXFEATURES,\n                                      embedding_dim=EMBEDSIZE)\n        # If batch-first then input and output \n        # provided as (batch, seq, features)\n        self.gru = nn.GRU(input_size=EMBEDSIZE, \n                          hidden_size=NUMHIDDEN, \n                          num_layers=1,\n                          batch_first=True,\n                          bidirectional=False)   \n        self.l_out = nn.Linear(in_features=NUMHIDDEN*1,\n                               out_features=2)\n\n    def forward(self, x):\n        x = self.embedding(x)\n        h0 = Variable(torch.zeros(1, BATCHSIZE, NUMHIDDEN)).cuda()\n        x, h = self.gru(x, h0)\n        # just get the last hidden state\n        x = x[:,-1,:].squeeze()\n        x = self.l_out(x)\n        return x", "body": "I think batch_first should be set to True to match the input format, like [here](https://github.com/ilkarman/DeepLearningFrameworks/blob/lstm/LSTM_PyTorch_IMDB.ipynb):\r\n\r\n```\r\nclass SymbolModule(nn.Module):\r\n    def __init__(self):\r\n        super(SymbolModule, self).__init__()\r\n        \r\n        self.embedding = nn.Embedding(num_embeddings=MAXFEATURES,\r\n                                      embedding_dim=EMBEDSIZE)\r\n        # If batch-first then input and output \r\n        # provided as (batch, seq, features)\r\n        self.gru = nn.GRU(input_size=EMBEDSIZE, \r\n                          hidden_size=NUMHIDDEN, \r\n                          num_layers=1,\r\n                          batch_first=True,\r\n                          bidirectional=False)   \r\n        self.l_out = nn.Linear(in_features=NUMHIDDEN*1,\r\n                               out_features=2)\r\n\r\n    def forward(self, x):\r\n        x = self.embedding(x)\r\n        h0 = Variable(torch.zeros(1, BATCHSIZE, NUMHIDDEN)).cuda()\r\n        x, h = self.gru(x, h0)\r\n        # just get the last hidden state\r\n        x = x[:,-1,:].squeeze()\r\n        x = self.l_out(x)\r\n        return x\r\n```"}