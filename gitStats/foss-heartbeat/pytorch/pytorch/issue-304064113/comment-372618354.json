{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/372618354", "html_url": "https://github.com/pytorch/pytorch/issues/5687#issuecomment-372618354", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/5687", "id": 372618354, "node_id": "MDEyOklzc3VlQ29tbWVudDM3MjYxODM1NA==", "user": {"login": "sonack", "id": 12935189, "node_id": "MDQ6VXNlcjEyOTM1MTg5", "avatar_url": "https://avatars1.githubusercontent.com/u/12935189?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sonack", "html_url": "https://github.com/sonack", "followers_url": "https://api.github.com/users/sonack/followers", "following_url": "https://api.github.com/users/sonack/following{/other_user}", "gists_url": "https://api.github.com/users/sonack/gists{/gist_id}", "starred_url": "https://api.github.com/users/sonack/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sonack/subscriptions", "organizations_url": "https://api.github.com/users/sonack/orgs", "repos_url": "https://api.github.com/users/sonack/repos", "events_url": "https://api.github.com/users/sonack/events{/privacy}", "received_events_url": "https://api.github.com/users/sonack/received_events", "type": "User", "site_admin": false}, "created_at": "2018-03-13T10:28:15Z", "updated_at": "2018-03-13T10:28:15Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1041752\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/vadimkantorov\">@vadimkantorov</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1310570\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/soumith\">@soumith</a>  hi, i am still confused about the in-place operations, Could you please explain why <code>out+=residual </code>  is a in-place operation to me? i thought in python language view <code>out</code> is just ref to another variable which is sum of the previous out and the residual, the correspoding objects still exist in memory, which grad_fn record the backward order, then why it can't be backproped when using in-place in out\u2019s last ReLU? i think the inplace relu only destroy its input , replaced with its output, but  i didn\u2018t use the input to relu(i.e. the conv output) directly into another branch.so i am really confused, could you please give me some idea about it, thank you all.</p>", "body_text": "@vadimkantorov @soumith  hi, i am still confused about the in-place operations, Could you please explain why out+=residual   is a in-place operation to me? i thought in python language view out is just ref to another variable which is sum of the previous out and the residual, the correspoding objects still exist in memory, which grad_fn record the backward order, then why it can't be backproped when using in-place in out\u2019s last ReLU? i think the inplace relu only destroy its input , replaced with its output, but  i didn\u2018t use the input to relu(i.e. the conv output) directly into another branch.so i am really confused, could you please give me some idea about it, thank you all.", "body": "@vadimkantorov @soumith  hi, i am still confused about the in-place operations, Could you please explain why `out+=residual `  is a in-place operation to me? i thought in python language view `out` is just ref to another variable which is sum of the previous out and the residual, the correspoding objects still exist in memory, which grad_fn record the backward order, then why it can't be backproped when using in-place in out\u2019s last ReLU? i think the inplace relu only destroy its input , replaced with its output, but  i didn\u2018t use the input to relu(i.e. the conv output) directly into another branch.so i am really confused, could you please give me some idea about it, thank you all."}