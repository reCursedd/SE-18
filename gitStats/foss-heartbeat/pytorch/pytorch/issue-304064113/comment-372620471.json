{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/372620471", "html_url": "https://github.com/pytorch/pytorch/issues/5687#issuecomment-372620471", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/5687", "id": 372620471, "node_id": "MDEyOklzc3VlQ29tbWVudDM3MjYyMDQ3MQ==", "user": {"login": "fmassa", "id": 9110200, "node_id": "MDQ6VXNlcjkxMTAyMDA=", "avatar_url": "https://avatars2.githubusercontent.com/u/9110200?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fmassa", "html_url": "https://github.com/fmassa", "followers_url": "https://api.github.com/users/fmassa/followers", "following_url": "https://api.github.com/users/fmassa/following{/other_user}", "gists_url": "https://api.github.com/users/fmassa/gists{/gist_id}", "starred_url": "https://api.github.com/users/fmassa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fmassa/subscriptions", "organizations_url": "https://api.github.com/users/fmassa/orgs", "repos_url": "https://api.github.com/users/fmassa/repos", "events_url": "https://api.github.com/users/fmassa/events{/privacy}", "received_events_url": "https://api.github.com/users/fmassa/received_events", "type": "User", "site_admin": false}, "created_at": "2018-03-13T10:36:06Z", "updated_at": "2018-03-13T10:36:06Z", "author_association": "MEMBER", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=12935189\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/sonack\">@sonack</a> it's an in-place operation because <code>+=</code> is the in-place add.<br>\nYou avoid the in-place by doing</p>\n<div class=\"highlight highlight-source-python\"><pre>out <span class=\"pl-k\">=</span> out <span class=\"pl-k\">+</span> residual</pre></div>\n<p>You can verify that with other data structures as well:</p>\n<div class=\"highlight highlight-source-python\"><pre>a <span class=\"pl-k\">=</span> []\nb <span class=\"pl-k\">=</span> a  <span class=\"pl-c\"><span class=\"pl-c\">#</span> b is the same as a</span>\na <span class=\"pl-k\">+=</span> [<span class=\"pl-c1\">5</span>]\n<span class=\"pl-c1\">print</span>(b)  <span class=\"pl-c\"><span class=\"pl-c\">#</span> prints [5]</span>\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> now</span>\na <span class=\"pl-k\">=</span> []\nb <span class=\"pl-k\">=</span> a  <span class=\"pl-c\"><span class=\"pl-c\">#</span> b is the same as a</span>\na <span class=\"pl-k\">=</span> a <span class=\"pl-k\">+</span> [<span class=\"pl-c1\">5</span>]\n<span class=\"pl-c1\">print</span>(b)  <span class=\"pl-c\"><span class=\"pl-c\">#</span> prints []</span></pre></div>", "body_text": "@sonack it's an in-place operation because += is the in-place add.\nYou avoid the in-place by doing\nout = out + residual\nYou can verify that with other data structures as well:\na = []\nb = a  # b is the same as a\na += [5]\nprint(b)  # prints [5]\n\n# now\na = []\nb = a  # b is the same as a\na = a + [5]\nprint(b)  # prints []", "body": "@sonack it's an in-place operation because `+=` is the in-place add.\r\nYou avoid the in-place by doing\r\n```python\r\nout = out + residual\r\n```\r\nYou can verify that with other data structures as well:\r\n```python\r\na = []\r\nb = a  # b is the same as a\r\na += [5]\r\nprint(b)  # prints [5]\r\n\r\n# now\r\na = []\r\nb = a  # b is the same as a\r\na = a + [5]\r\nprint(b)  # prints []\r\n```"}