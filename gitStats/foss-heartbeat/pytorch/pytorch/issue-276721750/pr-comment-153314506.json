{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/153314506", "pull_request_review_id": 79302258, "id": 153314506, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MzMxNDUwNg==", "diff_hunk": "@@ -193,6 +362,55 @@ struct CodeImpl {\n   std::vector<bool> bool_data;\n };\n \n+\n+struct Registers {\n+  Registers(size_t size)\n+  : registers(size) {}\n+  Registers(const Registers & rhs)\n+  : registers(rhs.registers) {\n+    for(auto & r : registers) {\n+      if(isValid(r))\n+        r->retain();\n+    }\n+  }\n+  ~Registers() {\n+    for(auto & r : registers) {\n+      if(isValid(r))\n+        r->release();\n+    }\n+  }\n+  at::RefCounted*& operator[](size_t i) {\n+    return registers[i];\n+  }\n+  //guarenteed to be non-null\n+  at::RefCounted* release(size_t i) {\n+    auto & v = registers[i];\n+    if(isValid(v)) {\n+      v->release();\n+      v = nullptr;\n+    }\n+    return v;\n+  }\n+  void save(size_t i, const at::Tensor & t) {\n+    registers[i] = at::Tensor(t).detach();\n+  }\n+  at::Tensor load(size_t i, bool andFree) {\n+    auto & v = registers[i];\n+    if(andFree) {\n+      auto r = at::Tensor(static_cast<at::TensorImpl*>(v), false);", "path": "torch/csrc/jit/interpreter.cpp", "position": null, "original_position": 299, "commit_id": "9ed71c792b2ea33bbc30a18bd9b0bc7cc7ea5c84", "original_commit_id": "1c5a385c904352750860eb388e46801d8de5d803", "user": {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, "body": "per pybind11:\r\n\r\n```\r\nat::Tensor(static_cast<at::TensorImpl*>(v), false) <-- reinterpret_steal\r\nat::Tensor(static_cast<at::TensorImpl*>(v), true) <-- reinterpret_borrow\r\n```\r\n\r\nPybind11's terminology however, is confusing, so I am going to change the names and just be more explicit.\r\n", "created_at": "2017-11-27T20:33:10Z", "updated_at": "2018-11-23T15:36:53Z", "html_url": "https://github.com/pytorch/pytorch/pull/3866#discussion_r153314506", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/3866", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/153314506"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/3866#discussion_r153314506"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/3866"}}, "body_html": "<p>per pybind11:</p>\n<pre><code>at::Tensor(static_cast&lt;at::TensorImpl*&gt;(v), false) &lt;-- reinterpret_steal\nat::Tensor(static_cast&lt;at::TensorImpl*&gt;(v), true) &lt;-- reinterpret_borrow\n</code></pre>\n<p>Pybind11's terminology however, is confusing, so I am going to change the names and just be more explicit.</p>", "body_text": "per pybind11:\nat::Tensor(static_cast<at::TensorImpl*>(v), false) <-- reinterpret_steal\nat::Tensor(static_cast<at::TensorImpl*>(v), true) <-- reinterpret_borrow\n\nPybind11's terminology however, is confusing, so I am going to change the names and just be more explicit.", "in_reply_to_id": 153162278}