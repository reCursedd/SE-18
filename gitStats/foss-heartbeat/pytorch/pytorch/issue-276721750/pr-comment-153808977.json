{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/153808977", "pull_request_review_id": 79871875, "id": 153808977, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MzgwODk3Nw==", "diff_hunk": "@@ -20,19 +20,53 @@ using operator_constructor = std::function<TensorOp(jit::Node*)>;\n \n namespace {\n \n-void pack_list(std::vector<Tensor> & outputs, Tensor v) { outputs.push_back(v); }\n-void pack_list(std::vector<Tensor> & outputs, Scalar v) { outputs.push_back(v.toTensor()); }\n-void pack_list(std::vector<Tensor> & outputs, const std::vector<Tensor> & t) {\n-  outputs.insert(outputs.end(), t.begin(), t.end());\n+// a temporary Tensor that does not alter the refcount of impl on\n+// acquisition or release, avoids any refcounting in dispatch functions\n+struct TensorTemporary : public at::Tensor {\n+  explicit TensorTemporary(at::RefCounted * impl)\n+  : at::Tensor(static_cast<at::TensorImpl*>(impl), false /* do not retain*/) {}\n+  ~TensorTemporary() {\n+    detach(); // reset\n+  }\n+};\n+\n+// same thing but creates a tensor list, only used rarely (e.g. for cat)\n+struct TensorTemporaryList {\n+  explicit TensorTemporaryList(const refcounted_list & ts) {\n+    tensors.reserve(ts.size());\n+    for(auto & t : ts) {\n+      tensors.push_back(at::Tensor(static_cast<at::TensorImpl*>(t), false /*do not retain*/));\n+    }\n+  }\n+  operator TensorList() const {\n+    return tensors;\n+  }\n+  ~TensorTemporaryList() {\n+    for(auto & t : tensors) {\n+      t.detach();\n+    }\n+  }\n+private:\n+  std::vector<at::Tensor> tensors;\n+};\n+\n+using refcounted_list = std::vector<at::RefCounted*>;\n+void pack_list(refcounted_list & outputs, Tensor v) { outputs.push_back(v.detach()); }", "path": "tools/jit/templates/aten_dispatch.cpp", "position": null, "original_position": 39, "commit_id": "9ed71c792b2ea33bbc30a18bd9b0bc7cc7ea5c84", "original_commit_id": "1c5a385c904352750860eb388e46801d8de5d803", "user": {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, "body": "They are never temporaries and the class TensorTemporaries is implemented such that if you tried, it would copy the reference into a non-temporary tensor first.", "created_at": "2017-11-29T14:53:00Z", "updated_at": "2018-11-23T15:36:56Z", "html_url": "https://github.com/pytorch/pytorch/pull/3866#discussion_r153808977", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/3866", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/153808977"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/3866#discussion_r153808977"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/3866"}}, "body_html": "<p>They are never temporaries and the class TensorTemporaries is implemented such that if you tried, it would copy the reference into a non-temporary tensor first.</p>", "body_text": "They are never temporaries and the class TensorTemporaries is implemented such that if you tried, it would copy the reference into a non-temporary tensor first.", "in_reply_to_id": 153152751}