{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/153159390", "pull_request_review_id": 79115948, "id": 153159390, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MzE1OTM5MA==", "diff_hunk": "@@ -1,42 +1,208 @@\n+#include \"Python.h\"\n #include \"interpreter.h\"\n #include \"torch/csrc/jit/ir.h\"\n #include \"torch/csrc/autograd/profiler.h\"\n #include \"torch/csrc/jit/generated/aten_dispatch.h\"\n+#include \"Python.h\"\n+#include \"pybind11/pybind11.h\"\n+#include \"torch/csrc/utils/auto_gil.h\"\n+#include \"torch/csrc/autograd/variable.h\"\n+#include \"torch/csrc/autograd/python_variable.h\"\n+#include \"torch/csrc/autograd/python_engine.h\"\n+#include \"torch/csrc/autograd/functions/special.h\"\n #ifdef WITH_CUDA\n #include \"torch/csrc/jit/fusion_compiler.h\"\n #endif\n \n+namespace py = pybind11;\n+\n namespace torch { namespace jit {\n \n+struct DummyFunction : autograd::Function {\n+  DummyFunction() {\n+    num_inputs = 0;\n+    is_executable = true;\n+  }\n+  virtual autograd::variable_list apply(const autograd::variable_list& inputs) override {\n+    throw std::logic_error(\"DummyFunction::apply() called, but it should be blocked by a callback returning false\");\n+  }\n+};\n+\n+struct Handle : at::RefCounted {\n+  std::shared_ptr<DummyFunction> forward_inputs;\n+  autograd::function_list forward_outputs;\n+};\n+\n+at::Tensor unsafeTensorBorrow(at::RefCounted * rc) {\n+  return at::Tensor(static_cast<at::TensorImpl*>(rc), true);\n+}\n+\n+struct HandleBuilder {\n+  HandleBuilder(bool requires_handle) {\n+    if(requires_handle) {\n+      handle = new Handle();\n+      handle->forward_inputs = std::make_shared<DummyFunction>();\n+    }\n+  }\n+  autograd::Variable addInput(at::RefCounted* input, const VariableFlags & flags_) {\n+    if(handle && flags_.requires_grad) {\n+      autograd::VarFlags flags = {flags_.requires_grad, flags_.is_volatile};\n+      return autograd::make_variable(\n+        unsafeTensorBorrow(input),\n+        flags,\n+        handle->forward_inputs->num_inputs++,\n+        handle->forward_inputs);\n+    } else {\n+      autograd::VarFlags flags = {false, false};\n+      return autograd::make_variable(unsafeTensorBorrow(input), flags);\n+    }\n+  }\n+  at::RefCounted* addOutput(const autograd::Variable & output) {\n+    if(handle) {\n+      handle->forward_outputs.emplace_back(output.grad_fn(),output.output_nr());\n+    }\n+    at::Tensor tensor = output.data();\n+    return tensor.detach();\n+  }\n+  void writeTo(refcounted_list & outputs) {\n+    // note: no if(handle) guard\n+    // because an unused handle is still produced as an output\n+    outputs.push_back(handle);\n+  }\n+private:\n+  Handle* handle = nullptr;\n+};\n+\n+bool hasHandleOutput(Node * n) {\n+  if(n->outputs().size() == 0)\n+    return false;\n+  auto & last = n->outputs().back();\n+  return last->isHandle() && last->uses().size() > 0; // don't bother creating a handle if it is never used\n+}\n+\n+Operation createPythonCallback(PythonOp* op) {\n+  py::object func = py::handle(op->pyobj.get()).attr(\"apply\");\n+  bool has_handle = hasHandleOutput(op);\n+  return [=](const refcounted_list & inputs, refcounted_list & outputs) {\n+    AutoGIL gil;\n+    py::tuple py_inputs(op->cconv.size());\n+    size_t i = 0;\n+    size_t next_scalar = 0;\n+    size_t next_tensor = 0;\n+    HandleBuilder builder(has_handle);\n+    for(auto arg_type : op->cconv) {\n+      if(arg_type == 's') {\n+        py_inputs[i] = py::reinterpret_borrow<py::object>(op->scalar_args[next_scalar++].get());\n+      } else if(arg_type == 't') {\n+        py_inputs[i] = THPVariable_Wrap(\n+          builder.addInput(inputs.at(next_tensor), op->var_flags.at(next_tensor)));\n+        next_tensor++;\n+      }\n+      i++;\n+    }\n+    py::object py_outputs(func(*py_inputs));\n+\n+    auto addOutput = [&](py::handle entry) {\n+      if(!THPVariable_Check(entry.ptr())) {\n+        throw std::runtime_error(\"Function.apply returned a non-Variable output\");\n+      }\n+      THPVariable *var = (THPVariable*) entry.ptr();\n+      outputs.push_back(builder.addOutput(var->cdata));\n+    };\n+    if(!PyTuple_Check(py_outputs.ptr())) {\n+      addOutput(py_outputs);\n+    } else {\n+      for(py::handle entry : py::tuple(py_outputs)) {\n+        addOutput(entry);\n+      }\n+    }\n+    builder.writeTo(outputs);\n+  };\n+}\n+\n+Operation createCppCallback(CppOp* op) {\n+  std::shared_ptr<autograd::Function> func = op->fn;\n+  bool has_handle = hasHandleOutput(op);\n+  return [=](const refcounted_list & inputs, refcounted_list & outputs) {\n+    HandleBuilder builder(has_handle);\n+    autograd::variable_list v_inputs;\n+    for(size_t i = 0; i < inputs.size(); i++) {\n+      v_inputs.push_back(builder.addInput(inputs[i], op->var_flags[i]));\n+    }\n+    autograd::variable_list v_outputs = func->apply(v_inputs);\n+    for(auto & output : v_outputs) {\n+      outputs.push_back(builder.addOutput(output));\n+    }\n+    builder.writeTo(outputs);\n+  };\n+}\n+\n+Operation createEvalCallback(CppOp * op) {\n+  bool has_handle_output = hasHandleOutput(op);\n+  return [=](const refcounted_list & inputs,\n+             refcounted_list & outputs) {\n+    Handle * handle_in = dynamic_cast<Handle*>(inputs.back());\n+    JIT_ASSERT(handle_in);\n+    HandleBuilder builder(has_handle_output);\n+    auto& engine = autograd::python::PythonEngine::getDefaultEngine();\n+    autograd::variable_list v_inputs;\n+    for(size_t i = 0; i < inputs.size() - 1; i++) {\n+      v_inputs.push_back(builder.addInput(inputs[i], op->var_flags[i]));\n+    }\n+    autograd::Engine::pre_callback_map callbacks;\n+    callbacks.emplace(handle_in->forward_inputs.get(), [&](autograd::Function * _unused, autograd::variable_list & values) -> bool {\n+      for(auto & v : values) {\n+        outputs.push_back(builder.addOutput(v));\n+      }\n+      return false; // stop output and do not run DummyFunction\n+    });\n+    // node handle_in->use_count() == 1 means that we are guarenteed that we have the only\n+    // only copy of the backward pass, but it is not clear that it is safe even in that case", "path": "torch/csrc/jit/interpreter.cpp", "position": null, "original_position": 160, "commit_id": "9ed71c792b2ea33bbc30a18bd9b0bc7cc7ea5c84", "original_commit_id": "1c5a385c904352750860eb388e46801d8de5d803", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "\"it is not clear that it is safe even in that case\" - can you make this more specific? I also can't see how `use_count() == 1` implies that we have \"the only copy of backward pass\" (especially that I don't know what a copy of backward pass is).", "created_at": "2017-11-27T10:37:50Z", "updated_at": "2018-11-23T15:36:50Z", "html_url": "https://github.com/pytorch/pytorch/pull/3866#discussion_r153159390", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/3866", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/153159390"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/3866#discussion_r153159390"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/3866"}}, "body_html": "<p>\"it is not clear that it is safe even in that case\" - can you make this more specific? I also can't see how <code>use_count() == 1</code> implies that we have \"the only copy of backward pass\" (especially that I don't know what a copy of backward pass is).</p>", "body_text": "\"it is not clear that it is safe even in that case\" - can you make this more specific? I also can't see how use_count() == 1 implies that we have \"the only copy of backward pass\" (especially that I don't know what a copy of backward pass is)."}