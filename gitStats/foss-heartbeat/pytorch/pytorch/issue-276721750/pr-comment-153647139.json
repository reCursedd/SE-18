{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/153647139", "pull_request_review_id": 79682748, "id": 153647139, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MzY0NzEzOQ==", "diff_hunk": "@@ -204,24 +448,35 @@ struct InterpreterStateImpl {\n   void runOneStage(\n     const std::vector<at::Tensor> & inputs,\n     std::vector<at::Tensor> & outputs) {\n-      //std::cout << \"running stage: \" << current_stage << \" of \" << function->stages.size() << \"\\n\";\n+      // std::cout << \"running stage: \" << current_stage << \" of \" << function->stages.size() << \"\\n\";\n       JIT_ASSERT(current_stage < function->stages.size());\n       auto & stage = function->stages[current_stage++];\n       JIT_ASSERT((int)inputs.size() == stage.inputs.size);\n       for(int i = 0; i < stage.inputs.size; i++) {\n         int reg = get(stage.inputs,i);\n         if(reg >= 0) { // otherwise this input is dead, and we do not store it to avoid holding the reference\n-          registers[reg] = inputs[i];\n+          registers.takeOwnership(reg, toRetainableShare(inputs[i]));\n         }\n-        //std::cout << \"registers[\" << reg << \"] = inputs[\" << i << \"](\" << inputs[i].defined() << \")\\n\";\n+        // std::cout << \"registers[\" << reg << \"] = inputs[\" << i << \"](\" << registers[reg] << \")\\n\";\n       }\n       for(auto & inst : stage.instructions) {\n-        loadTensorsFromRegisters(inst.inputs, input_buffer);\n+        auto & inputs = inst.inputs.values;\n+        for(int i = 0; i < inputs.size; i++) {\n+          int reg = get(inputs,i);\n+          input_buffer.push_back(registers[reg]);", "path": "torch/csrc/jit/interpreter.cpp", "position": 358, "original_position": 358, "commit_id": "9ed71c792b2ea33bbc30a18bd9b0bc7cc7ea5c84", "original_commit_id": "0354127c52b21be07d61d7441a8babcc1c35d529", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "So this effectively creates a temporary, because it only copies pointers to retainables, correct?", "created_at": "2017-11-28T22:48:29Z", "updated_at": "2018-11-23T15:36:55Z", "html_url": "https://github.com/pytorch/pytorch/pull/3866#discussion_r153647139", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/3866", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/153647139"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/3866#discussion_r153647139"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/3866"}}, "body_html": "<p>So this effectively creates a temporary, because it only copies pointers to retainables, correct?</p>", "body_text": "So this effectively creates a temporary, because it only copies pointers to retainables, correct?"}