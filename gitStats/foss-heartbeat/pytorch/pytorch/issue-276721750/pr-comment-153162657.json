{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/153162657", "pull_request_review_id": 79115948, "id": 153162657, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MzE2MjY1Nw==", "diff_hunk": "@@ -204,24 +422,35 @@ struct InterpreterStateImpl {\n   void runOneStage(\n     const std::vector<at::Tensor> & inputs,\n     std::vector<at::Tensor> & outputs) {\n-      //std::cout << \"running stage: \" << current_stage << \" of \" << function->stages.size() << \"\\n\";\n+      // std::cout << \"running stage: \" << current_stage << \" of \" << function->stages.size() << \"\\n\";\n       JIT_ASSERT(current_stage < function->stages.size());\n       auto & stage = function->stages[current_stage++];\n       JIT_ASSERT((int)inputs.size() == stage.inputs.size);\n       for(int i = 0; i < stage.inputs.size; i++) {\n         int reg = get(stage.inputs,i);\n         if(reg >= 0) { // otherwise this input is dead, and we do not store it to avoid holding the reference\n-          registers[reg] = inputs[i];\n+          registers.save(reg, inputs[i]);\n         }\n-        //std::cout << \"registers[\" << reg << \"] = inputs[\" << i << \"](\" << inputs[i].defined() << \")\\n\";\n+        //std::cout << \"registers[\" << reg << \"] = inputs[\" << i << \"](\" << registers[reg] << \")\\n\";\n       }\n       for(auto & inst : stage.instructions) {\n-        loadTensorsFromRegisters(inst.inputs, input_buffer);\n+        auto & inputs = inst.inputs.values;\n+        for(int i = 0; i < inputs.size; i++) {\n+          int reg = get(inputs,i);\n+          input_buffer.push_back(registers[reg]);\n+          //std::cout << \"inputs[\" << i << \"] = registers[\" << reg << \"](\" << registers[reg] << \")\\n\";\n+        }\n         inst.callback(input_buffer, output_buffer);\n         for(int i = 0; i < inst.outputs.size; i++) {\n           int reg = get(inst.outputs,i);\n-          registers[reg] = std::move(output_buffer[i]);\n-          //std::cout << \"registers[\" << reg << \"] = outputs[\" << i << \"](\" << output_buffer[i].defined() << \")\\n\";\n+          registers[reg] = output_buffer[i];", "path": "torch/csrc/jit/interpreter.cpp", "position": null, "original_position": 347, "commit_id": "9ed71c792b2ea33bbc30a18bd9b0bc7cc7ea5c84", "original_commit_id": "1c5a385c904352750860eb388e46801d8de5d803", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Can't you use `.save` here to steal the references?\r\n\r\n---\r\n\r\nNow it seems to me that this line is leaking (since `refcounted_list` doesn't do refcounting, and you don't steal the references, `output_buffer` won't `decref` the things it holds).", "created_at": "2017-11-27T10:50:43Z", "updated_at": "2018-11-23T15:36:50Z", "html_url": "https://github.com/pytorch/pytorch/pull/3866#discussion_r153162657", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/3866", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/153162657"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/3866#discussion_r153162657"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/3866"}}, "body_html": "<p>Can't you use <code>.save</code> here to steal the references?</p>\n<hr>\n<p>Now it seems to me that this line is leaking (since <code>refcounted_list</code> doesn't do refcounting, and you don't steal the references, <code>output_buffer</code> won't <code>decref</code> the things it holds).</p>", "body_text": "Can't you use .save here to steal the references?\n\nNow it seems to me that this line is leaking (since refcounted_list doesn't do refcounting, and you don't steal the references, output_buffer won't decref the things it holds)."}