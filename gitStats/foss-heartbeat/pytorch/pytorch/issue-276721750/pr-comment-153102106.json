{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/153102106", "pull_request_review_id": 79059036, "id": 153102106, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MzEwMjEwNg==", "diff_hunk": "@@ -20,19 +20,53 @@ using operator_constructor = std::function<TensorOp(jit::Node*)>;\n \n namespace {\n \n-void pack_list(std::vector<Tensor> & outputs, Tensor v) { outputs.push_back(v); }\n-void pack_list(std::vector<Tensor> & outputs, Scalar v) { outputs.push_back(v.toTensor()); }\n-void pack_list(std::vector<Tensor> & outputs, const std::vector<Tensor> & t) {\n-  outputs.insert(outputs.end(), t.begin(), t.end());\n+// a temporary Tensor that does not alter the refcount of impl on\n+// acquisition or release, avoids any refcounting in dispatch functions\n+struct TensorTemporary : public at::Tensor {\n+  explicit TensorTemporary(at::RefCounted * impl)\n+  : at::Tensor(static_cast<at::TensorImpl*>(impl), false /* do not retain*/) {}\n+  ~TensorTemporary() {\n+    detach(); // reset\n+  }\n+};\n+\n+// same thing but creates a tensor list, only used rarely (e.g. for cat)\n+struct TensorTemporaryList {", "path": "tools/jit/templates/aten_dispatch.cpp", "position": null, "original_position": 19, "commit_id": "9ed71c792b2ea33bbc30a18bd9b0bc7cc7ea5c84", "original_commit_id": "1c5a385c904352750860eb388e46801d8de5d803", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "I had to do some mental work to convince myself this was safe, it might be worth writing down: the key is that a `TensorTemporaryList` only exposes a `TensorList`, not its underlying `std::vector<at::Tensor>`. This ArrayRef has the desired semantics: if you get out an `at::Tensor` from it, the refcount is bumped; if you take a reference, it is only guaranteed to stay live as long as the ArrayRef is live, which is exactly the guarantee you need to use this safely.", "created_at": "2017-11-27T03:50:28Z", "updated_at": "2018-11-23T15:36:49Z", "html_url": "https://github.com/pytorch/pytorch/pull/3866#discussion_r153102106", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/3866", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/153102106"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/3866#discussion_r153102106"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/3866"}}, "body_html": "<p>I had to do some mental work to convince myself this was safe, it might be worth writing down: the key is that a <code>TensorTemporaryList</code> only exposes a <code>TensorList</code>, not its underlying <code>std::vector&lt;at::Tensor&gt;</code>. This ArrayRef has the desired semantics: if you get out an <code>at::Tensor</code> from it, the refcount is bumped; if you take a reference, it is only guaranteed to stay live as long as the ArrayRef is live, which is exactly the guarantee you need to use this safely.</p>", "body_text": "I had to do some mental work to convince myself this was safe, it might be worth writing down: the key is that a TensorTemporaryList only exposes a TensorList, not its underlying std::vector<at::Tensor>. This ArrayRef has the desired semantics: if you get out an at::Tensor from it, the refcount is bumped; if you take a reference, it is only guaranteed to stay live as long as the ArrayRef is live, which is exactly the guarantee you need to use this safely."}