{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/414693092", "html_url": "https://github.com/pytorch/pytorch/pull/2896#issuecomment-414693092", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/2896", "id": 414693092, "node_id": "MDEyOklzc3VlQ29tbWVudDQxNDY5MzA5Mg==", "user": {"login": "MicaelCarvalho", "id": 17184992, "node_id": "MDQ6VXNlcjE3MTg0OTky", "avatar_url": "https://avatars3.githubusercontent.com/u/17184992?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MicaelCarvalho", "html_url": "https://github.com/MicaelCarvalho", "followers_url": "https://api.github.com/users/MicaelCarvalho/followers", "following_url": "https://api.github.com/users/MicaelCarvalho/following{/other_user}", "gists_url": "https://api.github.com/users/MicaelCarvalho/gists{/gist_id}", "starred_url": "https://api.github.com/users/MicaelCarvalho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MicaelCarvalho/subscriptions", "organizations_url": "https://api.github.com/users/MicaelCarvalho/orgs", "repos_url": "https://api.github.com/users/MicaelCarvalho/repos", "events_url": "https://api.github.com/users/MicaelCarvalho/events{/privacy}", "received_events_url": "https://api.github.com/users/MicaelCarvalho/received_events", "type": "User", "site_admin": false}, "created_at": "2018-08-21T14:25:44Z", "updated_at": "2018-08-21T14:25:44Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Sorry, I got caught up in some projects and did not follow up on this PR. It no longer applies to the current build of PyTorch.</p>\n<p>However, it's worth mentioning that the problem of returning random-like indices was not addressed. The following code exemplifies the behavior:</p>\n<pre><code>import torch\nweights = torch.Tensor([1, 10, 3, 0])\ntorch.multinomial(weights, 4, replacement=False)\n</code></pre>\n<p>Outputs:</p>\n<pre><code>&gt;&gt;&gt; torch.multinomial(weights, 4, replacement=False)\ntensor([2, 1, 0, 1])\n&gt;&gt;&gt; torch.multinomial(weights, 4, replacement=False)\ntensor([1, 2, 0, 1])\n&gt;&gt;&gt; torch.multinomial(weights, 4, replacement=False)\ntensor([0, 1, 2, 0])\n&gt;&gt;&gt; torch.multinomial(weights, 4, replacement=False)\ntensor([1, 2, 0, 1])\n&gt;&gt;&gt; torch.multinomial(weights, 4, replacement=False)\ntensor([1, 0, 2, 2])\n</code></pre>\n<p>With replacement=False, the function should not repeat positions, even if the remaining ones have probability of 0. This is the same issue I tried to correct with my initial PR.</p>\n<p>In my opinion, the <code>torch.multinomial</code> function should behave like <code>numpy.random.choice</code> with <code>p=weights</code> when <code>replacement=False</code> (but accepting probs of 0), and like <code>numpy.random.multinomial</code> when <code>replacement=True</code>.</p>\n<p>Am I wrong to understand it this way?<br>\nWould love to see your opinions on this.</p>", "body_text": "Sorry, I got caught up in some projects and did not follow up on this PR. It no longer applies to the current build of PyTorch.\nHowever, it's worth mentioning that the problem of returning random-like indices was not addressed. The following code exemplifies the behavior:\nimport torch\nweights = torch.Tensor([1, 10, 3, 0])\ntorch.multinomial(weights, 4, replacement=False)\n\nOutputs:\n>>> torch.multinomial(weights, 4, replacement=False)\ntensor([2, 1, 0, 1])\n>>> torch.multinomial(weights, 4, replacement=False)\ntensor([1, 2, 0, 1])\n>>> torch.multinomial(weights, 4, replacement=False)\ntensor([0, 1, 2, 0])\n>>> torch.multinomial(weights, 4, replacement=False)\ntensor([1, 2, 0, 1])\n>>> torch.multinomial(weights, 4, replacement=False)\ntensor([1, 0, 2, 2])\n\nWith replacement=False, the function should not repeat positions, even if the remaining ones have probability of 0. This is the same issue I tried to correct with my initial PR.\nIn my opinion, the torch.multinomial function should behave like numpy.random.choice with p=weights when replacement=False (but accepting probs of 0), and like numpy.random.multinomial when replacement=True.\nAm I wrong to understand it this way?\nWould love to see your opinions on this.", "body": "Sorry, I got caught up in some projects and did not follow up on this PR. It no longer applies to the current build of PyTorch.\r\n\r\nHowever, it's worth mentioning that the problem of returning random-like indices was not addressed. The following code exemplifies the behavior:\r\n```\r\nimport torch\r\nweights = torch.Tensor([1, 10, 3, 0])\r\ntorch.multinomial(weights, 4, replacement=False)\r\n```\r\n\r\nOutputs:\r\n```\r\n>>> torch.multinomial(weights, 4, replacement=False)\r\ntensor([2, 1, 0, 1])\r\n>>> torch.multinomial(weights, 4, replacement=False)\r\ntensor([1, 2, 0, 1])\r\n>>> torch.multinomial(weights, 4, replacement=False)\r\ntensor([0, 1, 2, 0])\r\n>>> torch.multinomial(weights, 4, replacement=False)\r\ntensor([1, 2, 0, 1])\r\n>>> torch.multinomial(weights, 4, replacement=False)\r\ntensor([1, 0, 2, 2])\r\n```\r\n\r\nWith replacement=False, the function should not repeat positions, even if the remaining ones have probability of 0. This is the same issue I tried to correct with my initial PR.\r\n\r\nIn my opinion, the `torch.multinomial` function should behave like `numpy.random.choice` with `p=weights` when `replacement=False` (but accepting probs of 0), and like `numpy.random.multinomial` when `replacement=True`.\r\n\r\nAm I wrong to understand it this way?\r\nWould love to see your opinions on this."}