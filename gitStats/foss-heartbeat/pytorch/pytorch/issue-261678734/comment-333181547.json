{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/333181547", "html_url": "https://github.com/pytorch/pytorch/pull/2896#issuecomment-333181547", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/2896", "id": 333181547, "node_id": "MDEyOklzc3VlQ29tbWVudDMzMzE4MTU0Nw==", "user": {"login": "MicaelCarvalho", "id": 17184992, "node_id": "MDQ6VXNlcjE3MTg0OTky", "avatar_url": "https://avatars3.githubusercontent.com/u/17184992?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MicaelCarvalho", "html_url": "https://github.com/MicaelCarvalho", "followers_url": "https://api.github.com/users/MicaelCarvalho/followers", "following_url": "https://api.github.com/users/MicaelCarvalho/following{/other_user}", "gists_url": "https://api.github.com/users/MicaelCarvalho/gists{/gist_id}", "starred_url": "https://api.github.com/users/MicaelCarvalho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MicaelCarvalho/subscriptions", "organizations_url": "https://api.github.com/users/MicaelCarvalho/orgs", "repos_url": "https://api.github.com/users/MicaelCarvalho/repos", "events_url": "https://api.github.com/users/MicaelCarvalho/events{/privacy}", "received_events_url": "https://api.github.com/users/MicaelCarvalho/received_events", "type": "User", "site_admin": false}, "created_at": "2017-09-29T17:01:04Z", "updated_at": "2017-09-29T17:01:04Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=4529377\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/killeent\">@killeent</a> no, I don't see any reason to allow negative values as probability. The examples I gave are just to show that this problem wasn't addressed, while on the current implementation it <em>kinda</em> works (because of <a href=\"https://github.com/pytorch/pytorch/blob/d7ee3e0bd0b6084eb151b332b8be4641d7da2826/torch/lib/TH/generic/THTensorRandom.c#L294\">line 294</a>, I suppose).</p>\n<p>Maybe for the current implementation there are some corner cases for negative values that are not dealt with, and I can do further analysis if the problem is pertinent (IMHO it is not). A question I would raise is: should negative probabilities be allowed (and I don't think they should), isn't 0 supposed to have priority over them?</p>", "body_text": "@killeent no, I don't see any reason to allow negative values as probability. The examples I gave are just to show that this problem wasn't addressed, while on the current implementation it kinda works (because of line 294, I suppose).\nMaybe for the current implementation there are some corner cases for negative values that are not dealt with, and I can do further analysis if the problem is pertinent (IMHO it is not). A question I would raise is: should negative probabilities be allowed (and I don't think they should), isn't 0 supposed to have priority over them?", "body": "@killeent no, I don't see any reason to allow negative values as probability. The examples I gave are just to show that this problem wasn't addressed, while on the current implementation it _kinda_ works (because of [line 294](https://github.com/pytorch/pytorch/blob/d7ee3e0bd0b6084eb151b332b8be4641d7da2826/torch/lib/TH/generic/THTensorRandom.c#L294), I suppose).\r\n\r\nMaybe for the current implementation there are some corner cases for negative values that are not dealt with, and I can do further analysis if the problem is pertinent (IMHO it is not). A question I would raise is: should negative probabilities be allowed (and I don't think they should), isn't 0 supposed to have priority over them?"}