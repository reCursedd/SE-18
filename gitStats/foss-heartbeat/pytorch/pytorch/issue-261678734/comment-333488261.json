{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/333488261", "html_url": "https://github.com/pytorch/pytorch/pull/2896#issuecomment-333488261", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/2896", "id": 333488261, "node_id": "MDEyOklzc3VlQ29tbWVudDMzMzQ4ODI2MQ==", "user": {"login": "MicaelCarvalho", "id": 17184992, "node_id": "MDQ6VXNlcjE3MTg0OTky", "avatar_url": "https://avatars3.githubusercontent.com/u/17184992?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MicaelCarvalho", "html_url": "https://github.com/MicaelCarvalho", "followers_url": "https://api.github.com/users/MicaelCarvalho/followers", "following_url": "https://api.github.com/users/MicaelCarvalho/following{/other_user}", "gists_url": "https://api.github.com/users/MicaelCarvalho/gists{/gist_id}", "starred_url": "https://api.github.com/users/MicaelCarvalho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MicaelCarvalho/subscriptions", "organizations_url": "https://api.github.com/users/MicaelCarvalho/orgs", "repos_url": "https://api.github.com/users/MicaelCarvalho/repos", "events_url": "https://api.github.com/users/MicaelCarvalho/events{/privacy}", "received_events_url": "https://api.github.com/users/MicaelCarvalho/received_events", "type": "User", "site_admin": false}, "created_at": "2017-10-02T09:45:48Z", "updated_at": "2017-10-02T09:45:48Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=4583066\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/apaszke\">@apaszke</a> unfortunately in this situation raising an exception is not possible. Suppose that for each sample in your batch you're trying to retrieve the closest matches, without always taking the closest one, but rather taking the similarity as probabilities of selecting them (i.e. a stochastic approach).</p>\n<p>For this situation, you will have a probability matrix that might look like this:</p>\n<pre><code>2, 1, 0, 3\n3, 5, 1, 2\n6, 0, 0, 0\n0, 0, 2, 3\n</code></pre>\n<p>(oversimplified example, of course)</p>\n<p>In this case, we cannot raise an exception, because each line has a different number of \"valid\" probabilities. The second line can pick 4 elements, but the third can only pick one.</p>\n<p>Trimming the matrix before calling <code>multinomial</code> is not an option, because we would cut out 3 valid samples from line two that had potential to be selected. The only solution I see to allow this kind of approach is to have <code>multinomial</code> return something to indicate that no sample could be drawn.</p>\n<p>Being able to pass a vector/matrix of probabilities that has a 0 inside to <code>multinomial</code> seems to be a valid assumption, but in the current implementation it is does not work...</p>\n<p>On a side note: I have not yet had the time to look into THC, I hope to be able to do it this week.</p>", "body_text": "@apaszke unfortunately in this situation raising an exception is not possible. Suppose that for each sample in your batch you're trying to retrieve the closest matches, without always taking the closest one, but rather taking the similarity as probabilities of selecting them (i.e. a stochastic approach).\nFor this situation, you will have a probability matrix that might look like this:\n2, 1, 0, 3\n3, 5, 1, 2\n6, 0, 0, 0\n0, 0, 2, 3\n\n(oversimplified example, of course)\nIn this case, we cannot raise an exception, because each line has a different number of \"valid\" probabilities. The second line can pick 4 elements, but the third can only pick one.\nTrimming the matrix before calling multinomial is not an option, because we would cut out 3 valid samples from line two that had potential to be selected. The only solution I see to allow this kind of approach is to have multinomial return something to indicate that no sample could be drawn.\nBeing able to pass a vector/matrix of probabilities that has a 0 inside to multinomial seems to be a valid assumption, but in the current implementation it is does not work...\nOn a side note: I have not yet had the time to look into THC, I hope to be able to do it this week.", "body": "@apaszke unfortunately in this situation raising an exception is not possible. Suppose that for each sample in your batch you're trying to retrieve the closest matches, without always taking the closest one, but rather taking the similarity as probabilities of selecting them (i.e. a stochastic approach).\r\n\r\nFor this situation, you will have a probability matrix that might look like this:\r\n```\r\n2, 1, 0, 3\r\n3, 5, 1, 2\r\n6, 0, 0, 0\r\n0, 0, 2, 3\r\n```\r\n(oversimplified example, of course)\r\n\r\nIn this case, we cannot raise an exception, because each line has a different number of \"valid\" probabilities. The second line can pick 4 elements, but the third can only pick one.\r\n\r\nTrimming the matrix before calling `multinomial` is not an option, because we would cut out 3 valid samples from line two that had potential to be selected. The only solution I see to allow this kind of approach is to have `multinomial` return something to indicate that no sample could be drawn.\r\n\r\nBeing able to pass a vector/matrix of probabilities that has a 0 inside to `multinomial` seems to be a valid assumption, but in the current implementation it is does not work...\r\n\r\nOn a side note: I have not yet had the time to look into THC, I hope to be able to do it this week."}