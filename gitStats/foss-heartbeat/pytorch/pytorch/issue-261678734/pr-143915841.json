{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/2896", "id": 143915841, "node_id": "MDExOlB1bGxSZXF1ZXN0MTQzOTE1ODQx", "html_url": "https://github.com/pytorch/pytorch/pull/2896", "diff_url": "https://github.com/pytorch/pytorch/pull/2896.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/2896.patch", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/2896", "number": 2896, "state": "open", "locked": false, "title": "Fix multinomial sampling with total/partial probabilities = 0", "user": {"login": "MicaelCarvalho", "id": 17184992, "node_id": "MDQ6VXNlcjE3MTg0OTky", "avatar_url": "https://avatars3.githubusercontent.com/u/17184992?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MicaelCarvalho", "html_url": "https://github.com/MicaelCarvalho", "followers_url": "https://api.github.com/users/MicaelCarvalho/followers", "following_url": "https://api.github.com/users/MicaelCarvalho/following{/other_user}", "gists_url": "https://api.github.com/users/MicaelCarvalho/gists{/gist_id}", "starred_url": "https://api.github.com/users/MicaelCarvalho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MicaelCarvalho/subscriptions", "organizations_url": "https://api.github.com/users/MicaelCarvalho/orgs", "repos_url": "https://api.github.com/users/MicaelCarvalho/repos", "events_url": "https://api.github.com/users/MicaelCarvalho/events{/privacy}", "received_events_url": "https://api.github.com/users/MicaelCarvalho/received_events", "type": "User", "site_admin": false}, "body": "_This PR probably needs to be discussed. I'm going to present the problem, what changes with the PR and the possible concerns with respect to these changes._\r\n\r\n---\r\n\r\n## The problem\r\n\r\nFirst known report on Slack's channel `beginner` on 27 sept, by myself.\r\n\r\nThe function `multinomial` assumes non-negativity and non-zero sum for the input, however, it does not treat elements with value = zero, and returns random-like indices instead. Example:\r\n\r\n```\r\nimport torch\r\nweights = torch.Tensor([0, 10, 3, 0])\r\ntorch.multinomial(weights, 4, replacement=False)\r\n# > 1, 2, 0, 0\r\nweights = torch.Tensor([1, 10, 3, 0])\r\ntorch.multinomial(weights, 4, replacement=False)\r\n# > 1, 0, 2, 1\r\n```\r\n\r\nBasically, in the first example it runs out of 'positive' probabilities and starts outputting 0 (always). But on the second example it outputs 1 when it doesn't have any probs left. The biggest problem is that there is no reason for it to output 1, and it is not always 1 (sometimes 0, never 2).\r\n\r\nTaking a closer look on the code, I realized the function was designed to work with **non-zero values**, and not non-zero sum, it presents erratic behavior when there are zeros inside the matrix. This seems to be an undesirable behavior, since the caller would have to manually check every probability, and it is not that uncommon to find situations in which we have a weight matrix with zeros inside and we still want to sample from it.\r\n\r\n## What changed\r\n\r\nTwo constraints were removed from the `multinomial` function:\r\n  1. Number of samples must be inferior or equal to the number of categories\r\n  2. Sum of values must be positive\r\n\r\nValues are sampled in the same was as before, except when there is no values left to be sampled. In the latter case, the sampled position is `-1`, and the examples given before output the following now:\r\n\r\n```\r\nimport torch\r\nweights = torch.Tensor([0, 10, 3, 0])\r\ntorch.multinomial(weights, 4, replacement=False)\r\n# > 1, 2, -1, -1\r\nweights = torch.Tensor([1, 10, 3, 0])\r\ntorch.multinomial(weights, 4, replacement=False)\r\n# > 1, 2, 0, -1 # or \"1, 0, 2, -1\", etc. Still a weighted random on the probs\r\n```\r\n\r\nWith the difference that zero-sum probabilities are accepted, and the number of samples can be bigger than the number of categories:\r\n\r\n```\r\nimport torch\r\nweights = torch.Tensor([0, 0, 0, 0])\r\ntorch.multinomial(weights, 4, replacement=False) # zero sum\r\n# > -1, -1, -1, -1\r\nweights = torch.Tensor([1, 10, 3, 0])\r\ntorch.multinomial(weights, 6, replacement=False) # 6 samples\r\n# > 2, 1, 0, -1, -1, -1\r\n```\r\n\r\n## What did not change\r\n\r\nValues are still supposed to be non-negative. Passing negative values for the probabilities will affect the behavior of the function:\r\n\r\n```\r\nimport torch\r\nweights = torch.Tensor([0, 0, 6, -5])\r\ntorch.multinomial(weights, 4, replacement=False) # negative value inside\r\n# > 2, -1, -1, -1 # positive value outweighs negative value, but things are weird in the probability vector inside the function\r\nweights = torch.Tensor([1, 4, 1, -5])\r\ntorch.multinomial(weights, 4, replacement=False) # negative value inside\r\n# > 0, -1, -1, -1 # positive value outweighs negative value and allow for only 1 sample to be drawn, weird things in prob vector as well\r\nweights = torch.Tensor([0, 0, 1, -5])\r\ntorch.multinomial(weights, 4, replacement=False) # negative value inside\r\n# > -1, -1, -1, -1 # Sum is negative, it will skip sampling\r\n```\r\n\r\n## What should be debated about these changes\r\n\r\nThe behavior of the function changed: it used to output \"random\" (not really, but well...) indexes when the vector reached probability 0 because of some zero-valued item inside of it ; now it outputs -1 for every sample not drawn. The previous behavior allowed for anyone to use the output of the `multinomial` function to index a matrix, later erasing invalid elements -- _the problem is that these invalid elements were not easily identifiable_.\r\n\r\nWith the proposed changes, the user would have to replace the -1 indexes with a valid index before using the output of `multinomial` to index a vector/matrix. The benefit of this approach is that it would easy to identify any invalid elements (i.e. prob = 0) to remove them from the samples.", "created_at": "2017-09-29T15:26:39Z", "updated_at": "2018-08-21T16:01:32Z", "closed_at": null, "merged_at": null, "merge_commit_sha": "cf5f3c1b392acb7ccbfa8b17c94fd3b5306a2d0b", "assignee": null, "assignees": [], "requested_reviewers": [], "requested_teams": [], "labels": [{"id": 545367190, "node_id": "MDU6TGFiZWw1NDUzNjcxOTA=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/awaiting%20response", "name": "awaiting response", "color": "5319e7", "default": false}], "milestone": null, "commits_url": "https://api.github.com/repos/pytorch/pytorch/pulls/2896/commits", "review_comments_url": "https://api.github.com/repos/pytorch/pytorch/pulls/2896/comments", "review_comment_url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments{/number}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/2896/comments", "statuses_url": "https://api.github.com/repos/pytorch/pytorch/statuses/9702131d5d023b796ef85345a89d72ae978772da", "head": {"label": "MicaelCarvalho:master", "ref": "master", "sha": "9702131d5d023b796ef85345a89d72ae978772da", "user": {"login": "MicaelCarvalho", "id": 17184992, "node_id": "MDQ6VXNlcjE3MTg0OTky", "avatar_url": "https://avatars3.githubusercontent.com/u/17184992?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MicaelCarvalho", "html_url": "https://github.com/MicaelCarvalho", "followers_url": "https://api.github.com/users/MicaelCarvalho/followers", "following_url": "https://api.github.com/users/MicaelCarvalho/following{/other_user}", "gists_url": "https://api.github.com/users/MicaelCarvalho/gists{/gist_id}", "starred_url": "https://api.github.com/users/MicaelCarvalho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MicaelCarvalho/subscriptions", "organizations_url": "https://api.github.com/users/MicaelCarvalho/orgs", "repos_url": "https://api.github.com/users/MicaelCarvalho/repos", "events_url": "https://api.github.com/users/MicaelCarvalho/events{/privacy}", "received_events_url": "https://api.github.com/users/MicaelCarvalho/received_events", "type": "User", "site_admin": false}, "repo": {"id": 105159539, "node_id": "MDEwOlJlcG9zaXRvcnkxMDUxNTk1Mzk=", "name": "pytorch", "full_name": "MicaelCarvalho/pytorch", "private": false, "owner": {"login": "MicaelCarvalho", "id": 17184992, "node_id": "MDQ6VXNlcjE3MTg0OTky", "avatar_url": "https://avatars3.githubusercontent.com/u/17184992?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MicaelCarvalho", "html_url": "https://github.com/MicaelCarvalho", "followers_url": "https://api.github.com/users/MicaelCarvalho/followers", "following_url": "https://api.github.com/users/MicaelCarvalho/following{/other_user}", "gists_url": "https://api.github.com/users/MicaelCarvalho/gists{/gist_id}", "starred_url": "https://api.github.com/users/MicaelCarvalho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MicaelCarvalho/subscriptions", "organizations_url": "https://api.github.com/users/MicaelCarvalho/orgs", "repos_url": "https://api.github.com/users/MicaelCarvalho/repos", "events_url": "https://api.github.com/users/MicaelCarvalho/events{/privacy}", "received_events_url": "https://api.github.com/users/MicaelCarvalho/received_events", "type": "User", "site_admin": false}, "html_url": "https://github.com/MicaelCarvalho/pytorch", "description": "Tensors and Dynamic neural networks in Python  with strong GPU acceleration", "fork": true, "url": "https://api.github.com/repos/MicaelCarvalho/pytorch", "forks_url": "https://api.github.com/repos/MicaelCarvalho/pytorch/forks", "keys_url": "https://api.github.com/repos/MicaelCarvalho/pytorch/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/MicaelCarvalho/pytorch/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/MicaelCarvalho/pytorch/teams", "hooks_url": "https://api.github.com/repos/MicaelCarvalho/pytorch/hooks", "issue_events_url": "https://api.github.com/repos/MicaelCarvalho/pytorch/issues/events{/number}", "events_url": "https://api.github.com/repos/MicaelCarvalho/pytorch/events", "assignees_url": "https://api.github.com/repos/MicaelCarvalho/pytorch/assignees{/user}", "branches_url": "https://api.github.com/repos/MicaelCarvalho/pytorch/branches{/branch}", "tags_url": "https://api.github.com/repos/MicaelCarvalho/pytorch/tags", "blobs_url": "https://api.github.com/repos/MicaelCarvalho/pytorch/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/MicaelCarvalho/pytorch/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/MicaelCarvalho/pytorch/git/refs{/sha}", "trees_url": "https://api.github.com/repos/MicaelCarvalho/pytorch/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/MicaelCarvalho/pytorch/statuses/{sha}", "languages_url": "https://api.github.com/repos/MicaelCarvalho/pytorch/languages", "stargazers_url": "https://api.github.com/repos/MicaelCarvalho/pytorch/stargazers", "contributors_url": "https://api.github.com/repos/MicaelCarvalho/pytorch/contributors", "subscribers_url": "https://api.github.com/repos/MicaelCarvalho/pytorch/subscribers", "subscription_url": "https://api.github.com/repos/MicaelCarvalho/pytorch/subscription", "commits_url": "https://api.github.com/repos/MicaelCarvalho/pytorch/commits{/sha}", "git_commits_url": "https://api.github.com/repos/MicaelCarvalho/pytorch/git/commits{/sha}", "comments_url": "https://api.github.com/repos/MicaelCarvalho/pytorch/comments{/number}", "issue_comment_url": "https://api.github.com/repos/MicaelCarvalho/pytorch/issues/comments{/number}", "contents_url": "https://api.github.com/repos/MicaelCarvalho/pytorch/contents/{+path}", "compare_url": "https://api.github.com/repos/MicaelCarvalho/pytorch/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/MicaelCarvalho/pytorch/merges", "archive_url": "https://api.github.com/repos/MicaelCarvalho/pytorch/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/MicaelCarvalho/pytorch/downloads", "issues_url": "https://api.github.com/repos/MicaelCarvalho/pytorch/issues{/number}", "pulls_url": "https://api.github.com/repos/MicaelCarvalho/pytorch/pulls{/number}", "milestones_url": "https://api.github.com/repos/MicaelCarvalho/pytorch/milestones{/number}", "notifications_url": "https://api.github.com/repos/MicaelCarvalho/pytorch/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/MicaelCarvalho/pytorch/labels{/name}", "releases_url": "https://api.github.com/repos/MicaelCarvalho/pytorch/releases{/id}", "deployments_url": "https://api.github.com/repos/MicaelCarvalho/pytorch/deployments", "created_at": "2017-09-28T14:36:03Z", "updated_at": "2017-09-28T14:36:08Z", "pushed_at": "2017-09-29T14:37:21Z", "git_url": "git://github.com/MicaelCarvalho/pytorch.git", "ssh_url": "git@github.com:MicaelCarvalho/pytorch.git", "clone_url": "https://github.com/MicaelCarvalho/pytorch.git", "svn_url": "https://github.com/MicaelCarvalho/pytorch", "homepage": "http://pytorch.org", "size": 15614, "stargazers_count": 0, "watchers_count": 0, "language": "Python", "has_issues": false, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 0, "mirror_url": null, "archived": false, "open_issues_count": 0, "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "forks": 0, "open_issues": 0, "watchers": 0, "default_branch": "master"}}, "base": {"label": "pytorch:master", "ref": "master", "sha": "f9d002d9f7c5f9ec1a5f097887b9120a4b0160f1", "user": {"login": "pytorch", "id": 21003710, "node_id": "MDEyOk9yZ2FuaXphdGlvbjIxMDAzNzEw", "avatar_url": "https://avatars3.githubusercontent.com/u/21003710?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pytorch", "html_url": "https://github.com/pytorch", "followers_url": "https://api.github.com/users/pytorch/followers", "following_url": "https://api.github.com/users/pytorch/following{/other_user}", "gists_url": "https://api.github.com/users/pytorch/gists{/gist_id}", "starred_url": "https://api.github.com/users/pytorch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pytorch/subscriptions", "organizations_url": "https://api.github.com/users/pytorch/orgs", "repos_url": "https://api.github.com/users/pytorch/repos", "events_url": "https://api.github.com/users/pytorch/events{/privacy}", "received_events_url": "https://api.github.com/users/pytorch/received_events", "type": "Organization", "site_admin": false}, "repo": {"id": 65600975, "node_id": "MDEwOlJlcG9zaXRvcnk2NTYwMDk3NQ==", "name": "pytorch", "full_name": "pytorch/pytorch", "private": false, "owner": {"login": "pytorch", "id": 21003710, "node_id": "MDEyOk9yZ2FuaXphdGlvbjIxMDAzNzEw", "avatar_url": "https://avatars3.githubusercontent.com/u/21003710?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pytorch", "html_url": "https://github.com/pytorch", "followers_url": "https://api.github.com/users/pytorch/followers", "following_url": "https://api.github.com/users/pytorch/following{/other_user}", "gists_url": "https://api.github.com/users/pytorch/gists{/gist_id}", "starred_url": "https://api.github.com/users/pytorch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pytorch/subscriptions", "organizations_url": "https://api.github.com/users/pytorch/orgs", "repos_url": "https://api.github.com/users/pytorch/repos", "events_url": "https://api.github.com/users/pytorch/events{/privacy}", "received_events_url": "https://api.github.com/users/pytorch/received_events", "type": "Organization", "site_admin": false}, "html_url": "https://github.com/pytorch/pytorch", "description": "Tensors and Dynamic neural networks in Python  with strong GPU acceleration", "fork": false, "url": "https://api.github.com/repos/pytorch/pytorch", "forks_url": "https://api.github.com/repos/pytorch/pytorch/forks", "keys_url": "https://api.github.com/repos/pytorch/pytorch/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/pytorch/pytorch/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/pytorch/pytorch/teams", "hooks_url": "https://api.github.com/repos/pytorch/pytorch/hooks", "issue_events_url": "https://api.github.com/repos/pytorch/pytorch/issues/events{/number}", "events_url": "https://api.github.com/repos/pytorch/pytorch/events", "assignees_url": "https://api.github.com/repos/pytorch/pytorch/assignees{/user}", "branches_url": "https://api.github.com/repos/pytorch/pytorch/branches{/branch}", "tags_url": "https://api.github.com/repos/pytorch/pytorch/tags", "blobs_url": "https://api.github.com/repos/pytorch/pytorch/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/pytorch/pytorch/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/pytorch/pytorch/git/refs{/sha}", "trees_url": "https://api.github.com/repos/pytorch/pytorch/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/pytorch/pytorch/statuses/{sha}", "languages_url": "https://api.github.com/repos/pytorch/pytorch/languages", "stargazers_url": "https://api.github.com/repos/pytorch/pytorch/stargazers", "contributors_url": "https://api.github.com/repos/pytorch/pytorch/contributors", "subscribers_url": "https://api.github.com/repos/pytorch/pytorch/subscribers", "subscription_url": "https://api.github.com/repos/pytorch/pytorch/subscription", "commits_url": "https://api.github.com/repos/pytorch/pytorch/commits{/sha}", "git_commits_url": "https://api.github.com/repos/pytorch/pytorch/git/commits{/sha}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/comments{/number}", "issue_comment_url": "https://api.github.com/repos/pytorch/pytorch/issues/comments{/number}", "contents_url": "https://api.github.com/repos/pytorch/pytorch/contents/{+path}", "compare_url": "https://api.github.com/repos/pytorch/pytorch/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/pytorch/pytorch/merges", "archive_url": "https://api.github.com/repos/pytorch/pytorch/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/pytorch/pytorch/downloads", "issues_url": "https://api.github.com/repos/pytorch/pytorch/issues{/number}", "pulls_url": "https://api.github.com/repos/pytorch/pytorch/pulls{/number}", "milestones_url": "https://api.github.com/repos/pytorch/pytorch/milestones{/number}", "notifications_url": "https://api.github.com/repos/pytorch/pytorch/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/pytorch/pytorch/labels{/name}", "releases_url": "https://api.github.com/repos/pytorch/pytorch/releases{/id}", "deployments_url": "https://api.github.com/repos/pytorch/pytorch/deployments", "created_at": "2016-08-13T05:26:41Z", "updated_at": "2018-11-24T14:27:35Z", "pushed_at": "2018-11-24T12:42:01Z", "git_url": "git://github.com/pytorch/pytorch.git", "ssh_url": "git@github.com:pytorch/pytorch.git", "clone_url": "https://github.com/pytorch/pytorch.git", "svn_url": "https://github.com/pytorch/pytorch", "homepage": "http://pytorch.org", "size": 89656, "stargazers_count": 21591, "watchers_count": 21591, "language": "C++", "has_issues": true, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 5154, "mirror_url": null, "archived": false, "open_issues_count": 2196, "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "forks": 5154, "open_issues": 2196, "watchers": 21591, "default_branch": "master"}}, "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/2896"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/2896"}, "issue": {"href": "https://api.github.com/repos/pytorch/pytorch/issues/2896"}, "comments": {"href": "https://api.github.com/repos/pytorch/pytorch/issues/2896/comments"}, "review_comments": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/2896/comments"}, "review_comment": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments{/number}"}, "commits": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/2896/commits"}, "statuses": {"href": "https://api.github.com/repos/pytorch/pytorch/statuses/9702131d5d023b796ef85345a89d72ae978772da"}}, "author_association": "CONTRIBUTOR", "body_html": "<p><em>This PR probably needs to be discussed. I'm going to present the problem, what changes with the PR and the possible concerns with respect to these changes.</em></p>\n<hr>\n<h2>The problem</h2>\n<p>First known report on Slack's channel <code>beginner</code> on 27 sept, by myself.</p>\n<p>The function <code>multinomial</code> assumes non-negativity and non-zero sum for the input, however, it does not treat elements with value = zero, and returns random-like indices instead. Example:</p>\n<pre><code>import torch\nweights = torch.Tensor([0, 10, 3, 0])\ntorch.multinomial(weights, 4, replacement=False)\n# &gt; 1, 2, 0, 0\nweights = torch.Tensor([1, 10, 3, 0])\ntorch.multinomial(weights, 4, replacement=False)\n# &gt; 1, 0, 2, 1\n</code></pre>\n<p>Basically, in the first example it runs out of 'positive' probabilities and starts outputting 0 (always). But on the second example it outputs 1 when it doesn't have any probs left. The biggest problem is that there is no reason for it to output 1, and it is not always 1 (sometimes 0, never 2).</p>\n<p>Taking a closer look on the code, I realized the function was designed to work with <strong>non-zero values</strong>, and not non-zero sum, it presents erratic behavior when there are zeros inside the matrix. This seems to be an undesirable behavior, since the caller would have to manually check every probability, and it is not that uncommon to find situations in which we have a weight matrix with zeros inside and we still want to sample from it.</p>\n<h2>What changed</h2>\n<p>Two constraints were removed from the <code>multinomial</code> function:</p>\n<ol>\n<li>Number of samples must be inferior or equal to the number of categories</li>\n<li>Sum of values must be positive</li>\n</ol>\n<p>Values are sampled in the same was as before, except when there is no values left to be sampled. In the latter case, the sampled position is <code>-1</code>, and the examples given before output the following now:</p>\n<pre><code>import torch\nweights = torch.Tensor([0, 10, 3, 0])\ntorch.multinomial(weights, 4, replacement=False)\n# &gt; 1, 2, -1, -1\nweights = torch.Tensor([1, 10, 3, 0])\ntorch.multinomial(weights, 4, replacement=False)\n# &gt; 1, 2, 0, -1 # or \"1, 0, 2, -1\", etc. Still a weighted random on the probs\n</code></pre>\n<p>With the difference that zero-sum probabilities are accepted, and the number of samples can be bigger than the number of categories:</p>\n<pre><code>import torch\nweights = torch.Tensor([0, 0, 0, 0])\ntorch.multinomial(weights, 4, replacement=False) # zero sum\n# &gt; -1, -1, -1, -1\nweights = torch.Tensor([1, 10, 3, 0])\ntorch.multinomial(weights, 6, replacement=False) # 6 samples\n# &gt; 2, 1, 0, -1, -1, -1\n</code></pre>\n<h2>What did not change</h2>\n<p>Values are still supposed to be non-negative. Passing negative values for the probabilities will affect the behavior of the function:</p>\n<pre><code>import torch\nweights = torch.Tensor([0, 0, 6, -5])\ntorch.multinomial(weights, 4, replacement=False) # negative value inside\n# &gt; 2, -1, -1, -1 # positive value outweighs negative value, but things are weird in the probability vector inside the function\nweights = torch.Tensor([1, 4, 1, -5])\ntorch.multinomial(weights, 4, replacement=False) # negative value inside\n# &gt; 0, -1, -1, -1 # positive value outweighs negative value and allow for only 1 sample to be drawn, weird things in prob vector as well\nweights = torch.Tensor([0, 0, 1, -5])\ntorch.multinomial(weights, 4, replacement=False) # negative value inside\n# &gt; -1, -1, -1, -1 # Sum is negative, it will skip sampling\n</code></pre>\n<h2>What should be debated about these changes</h2>\n<p>The behavior of the function changed: it used to output \"random\" (not really, but well...) indexes when the vector reached probability 0 because of some zero-valued item inside of it ; now it outputs -1 for every sample not drawn. The previous behavior allowed for anyone to use the output of the <code>multinomial</code> function to index a matrix, later erasing invalid elements -- <em>the problem is that these invalid elements were not easily identifiable</em>.</p>\n<p>With the proposed changes, the user would have to replace the -1 indexes with a valid index before using the output of <code>multinomial</code> to index a vector/matrix. The benefit of this approach is that it would easy to identify any invalid elements (i.e. prob = 0) to remove them from the samples.</p>", "body_text": "This PR probably needs to be discussed. I'm going to present the problem, what changes with the PR and the possible concerns with respect to these changes.\n\nThe problem\nFirst known report on Slack's channel beginner on 27 sept, by myself.\nThe function multinomial assumes non-negativity and non-zero sum for the input, however, it does not treat elements with value = zero, and returns random-like indices instead. Example:\nimport torch\nweights = torch.Tensor([0, 10, 3, 0])\ntorch.multinomial(weights, 4, replacement=False)\n# > 1, 2, 0, 0\nweights = torch.Tensor([1, 10, 3, 0])\ntorch.multinomial(weights, 4, replacement=False)\n# > 1, 0, 2, 1\n\nBasically, in the first example it runs out of 'positive' probabilities and starts outputting 0 (always). But on the second example it outputs 1 when it doesn't have any probs left. The biggest problem is that there is no reason for it to output 1, and it is not always 1 (sometimes 0, never 2).\nTaking a closer look on the code, I realized the function was designed to work with non-zero values, and not non-zero sum, it presents erratic behavior when there are zeros inside the matrix. This seems to be an undesirable behavior, since the caller would have to manually check every probability, and it is not that uncommon to find situations in which we have a weight matrix with zeros inside and we still want to sample from it.\nWhat changed\nTwo constraints were removed from the multinomial function:\n\nNumber of samples must be inferior or equal to the number of categories\nSum of values must be positive\n\nValues are sampled in the same was as before, except when there is no values left to be sampled. In the latter case, the sampled position is -1, and the examples given before output the following now:\nimport torch\nweights = torch.Tensor([0, 10, 3, 0])\ntorch.multinomial(weights, 4, replacement=False)\n# > 1, 2, -1, -1\nweights = torch.Tensor([1, 10, 3, 0])\ntorch.multinomial(weights, 4, replacement=False)\n# > 1, 2, 0, -1 # or \"1, 0, 2, -1\", etc. Still a weighted random on the probs\n\nWith the difference that zero-sum probabilities are accepted, and the number of samples can be bigger than the number of categories:\nimport torch\nweights = torch.Tensor([0, 0, 0, 0])\ntorch.multinomial(weights, 4, replacement=False) # zero sum\n# > -1, -1, -1, -1\nweights = torch.Tensor([1, 10, 3, 0])\ntorch.multinomial(weights, 6, replacement=False) # 6 samples\n# > 2, 1, 0, -1, -1, -1\n\nWhat did not change\nValues are still supposed to be non-negative. Passing negative values for the probabilities will affect the behavior of the function:\nimport torch\nweights = torch.Tensor([0, 0, 6, -5])\ntorch.multinomial(weights, 4, replacement=False) # negative value inside\n# > 2, -1, -1, -1 # positive value outweighs negative value, but things are weird in the probability vector inside the function\nweights = torch.Tensor([1, 4, 1, -5])\ntorch.multinomial(weights, 4, replacement=False) # negative value inside\n# > 0, -1, -1, -1 # positive value outweighs negative value and allow for only 1 sample to be drawn, weird things in prob vector as well\nweights = torch.Tensor([0, 0, 1, -5])\ntorch.multinomial(weights, 4, replacement=False) # negative value inside\n# > -1, -1, -1, -1 # Sum is negative, it will skip sampling\n\nWhat should be debated about these changes\nThe behavior of the function changed: it used to output \"random\" (not really, but well...) indexes when the vector reached probability 0 because of some zero-valued item inside of it ; now it outputs -1 for every sample not drawn. The previous behavior allowed for anyone to use the output of the multinomial function to index a matrix, later erasing invalid elements -- the problem is that these invalid elements were not easily identifiable.\nWith the proposed changes, the user would have to replace the -1 indexes with a valid index before using the output of multinomial to index a vector/matrix. The benefit of this approach is that it would easy to identify any invalid elements (i.e. prob = 0) to remove them from the samples.", "merged": false, "mergeable": false, "rebaseable": false, "mergeable_state": "dirty", "merged_by": null, "comments": 12, "review_comments": 0, "maintainer_can_modify": true, "commits": 1, "additions": 64, "deletions": 71, "changed_files": 1}