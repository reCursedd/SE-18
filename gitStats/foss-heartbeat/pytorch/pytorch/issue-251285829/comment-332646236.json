{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/332646236", "html_url": "https://github.com/pytorch/pytorch/issues/2483#issuecomment-332646236", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/2483", "id": 332646236, "node_id": "MDEyOklzc3VlQ29tbWVudDMzMjY0NjIzNg==", "user": {"login": "lantiga", "id": 191033, "node_id": "MDQ6VXNlcjE5MTAzMw==", "avatar_url": "https://avatars2.githubusercontent.com/u/191033?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lantiga", "html_url": "https://github.com/lantiga", "followers_url": "https://api.github.com/users/lantiga/followers", "following_url": "https://api.github.com/users/lantiga/following{/other_user}", "gists_url": "https://api.github.com/users/lantiga/gists{/gist_id}", "starred_url": "https://api.github.com/users/lantiga/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lantiga/subscriptions", "organizations_url": "https://api.github.com/users/lantiga/orgs", "repos_url": "https://api.github.com/users/lantiga/repos", "events_url": "https://api.github.com/users/lantiga/events{/privacy}", "received_events_url": "https://api.github.com/users/lantiga/received_events", "type": "User", "site_admin": false}, "created_at": "2017-09-27T20:32:02Z", "updated_at": "2017-09-27T20:34:02Z", "author_association": "COLLABORATOR", "body_html": "<p>I'm looking at this. What attributes do we want to retain in the documentation?<br>\nCorrect me if I'm wrong, but some of them are there for backward compatibility: <code>num_inputs</code>, <code>num_outputs</code>, <code>needs_input_grad</code> (it's now in ctx).</p>\n<p><code>requires_grad</code> is still good. Should we also add <code>dirty_tensors</code>, <code>shared_pairs</code> and <code>non_differentiable</code>, that are set by the <code>make_...</code> functions?</p>\n<p>It looks to me like <code>dirty_tensors</code>, <code>shared_pairs</code> and <code>non_differentiable</code> are not really subclass business, but rather autograd's, so they may not be worth documenting.</p>", "body_text": "I'm looking at this. What attributes do we want to retain in the documentation?\nCorrect me if I'm wrong, but some of them are there for backward compatibility: num_inputs, num_outputs, needs_input_grad (it's now in ctx).\nrequires_grad is still good. Should we also add dirty_tensors, shared_pairs and non_differentiable, that are set by the make_... functions?\nIt looks to me like dirty_tensors, shared_pairs and non_differentiable are not really subclass business, but rather autograd's, so they may not be worth documenting.", "body": "I'm looking at this. What attributes do we want to retain in the documentation?\r\nCorrect me if I'm wrong, but some of them are there for backward compatibility: `num_inputs`, `num_outputs`, `needs_input_grad` (it's now in ctx).\r\n\r\n`requires_grad` is still good. Should we also add `dirty_tensors`, `shared_pairs` and `non_differentiable`, that are set by the `make_...` functions?\r\n\r\nIt looks to me like `dirty_tensors`, `shared_pairs` and `non_differentiable` are not really subclass business, but rather autograd's, so they may not be worth documenting."}