{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/234275100", "pull_request_review_id": 175886882, "id": 234275100, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzNDI3NTEwMA==", "diff_hunk": "@@ -33,4 +33,20 @@ static inline void flip_check_errors(int64_t total_dims, int64_t flip_dims_size,\n     \", but unique flip dims size=\", flip_dims_v.size());\n }\n \n+static inline Tensor roll_common(const Tensor& self, IntList shifts, IntList dims) {\n+  if (dims.size() == 0 && shifts.size() == 1) {\n+    auto flattened = self.contiguous().view(self.numel());\n+    return roll(flattened, shifts[0], 0).view(self.sizes());\n+  }\n+  AT_CHECK(\n+    shifts.size() == dims.size(),\n+    \"shifts and dimensions must align. shifts: \", shifts.size(), \", dims:\", dims.size()\n+  );\n+  AT_CHECK(dims.size() > 1, \"this code should only be reached for handling multi-dim rolling\" );\n+  auto tail_shifts = shifts.slice(1);\n+  auto tail_dims = dims.slice(1);\n+  auto first_dim_rolled = roll(self, shifts[0], dims[0]);\n+  return roll(first_dim_rolled, tail_shifts, tail_dims);", "path": "aten/src/ATen/native/TensorTransformations.h", "position": null, "original_position": 17, "commit_id": "9f0df0489248d4e9128b7b512c8b5b71b28e8651", "original_commit_id": "d13b17bf8f8d349b57882de8213e350a22a5fec2", "user": {"login": "gchanan", "id": 3768583, "node_id": "MDQ6VXNlcjM3Njg1ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3768583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gchanan", "html_url": "https://github.com/gchanan", "followers_url": "https://api.github.com/users/gchanan/followers", "following_url": "https://api.github.com/users/gchanan/following{/other_user}", "gists_url": "https://api.github.com/users/gchanan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gchanan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gchanan/subscriptions", "organizations_url": "https://api.github.com/users/gchanan/orgs", "repos_url": "https://api.github.com/users/gchanan/repos", "events_url": "https://api.github.com/users/gchanan/events{/privacy}", "received_events_url": "https://api.github.com/users/gchanan/received_events", "type": "User", "site_admin": false}, "body": "nit: it's better if you explicitly call this at::roll to be clear you want to re-dispatch, not call a native function; (actually, this is slow because you have to redispatch every time when you know the type of the tensor after the first time...if you wanted to optimize, you could pass a function pointer...).", "created_at": "2018-11-16T16:53:11Z", "updated_at": "2018-11-23T15:55:01Z", "html_url": "https://github.com/pytorch/pytorch/pull/13874#discussion_r234275100", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/13874", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/234275100"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/13874#discussion_r234275100"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/13874"}}, "body_html": "<p>nit: it's better if you explicitly call this at::roll to be clear you want to re-dispatch, not call a native function; (actually, this is slow because you have to redispatch every time when you know the type of the tensor after the first time...if you wanted to optimize, you could pass a function pointer...).</p>", "body_text": "nit: it's better if you explicitly call this at::roll to be clear you want to re-dispatch, not call a native function; (actually, this is slow because you have to redispatch every time when you know the type of the tensor after the first time...if you wanted to optimize, you could pass a function pointer...)."}