{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/343731734", "html_url": "https://github.com/pytorch/pytorch/issues/3653#issuecomment-343731734", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/3653", "id": 343731734, "node_id": "MDEyOklzc3VlQ29tbWVudDM0MzczMTczNA==", "user": {"login": "vadimkantorov", "id": 1041752, "node_id": "MDQ6VXNlcjEwNDE3NTI=", "avatar_url": "https://avatars0.githubusercontent.com/u/1041752?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vadimkantorov", "html_url": "https://github.com/vadimkantorov", "followers_url": "https://api.github.com/users/vadimkantorov/followers", "following_url": "https://api.github.com/users/vadimkantorov/following{/other_user}", "gists_url": "https://api.github.com/users/vadimkantorov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vadimkantorov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vadimkantorov/subscriptions", "organizations_url": "https://api.github.com/users/vadimkantorov/orgs", "repos_url": "https://api.github.com/users/vadimkantorov/repos", "events_url": "https://api.github.com/users/vadimkantorov/events{/privacy}", "received_events_url": "https://api.github.com/users/vadimkantorov/received_events", "type": "User", "site_admin": false}, "created_at": "2017-11-12T11:53:06Z", "updated_at": "2017-11-12T15:52:01Z", "author_association": "NONE", "body_html": "<p>Yep, you got me right :)</p>\n<p>By \"works but doesn't fit some interfaces\" I meant that <code>bmm</code> interface accepts <code>BxPxQ</code> and <code>BxQxR</code>, so if I'm implementing a generalized version that flattens some first dimensions, then the inputs must already be properly transposed by caller. And then there's this problem that we can't flatten first dimensions of non-contiguous tensors. In other words, extending a function like <code>bmm</code> requires first a call to transpose and then view, so the last line can't be used without having to change the <code>bmm</code>'s contract.</p>", "body_text": "Yep, you got me right :)\nBy \"works but doesn't fit some interfaces\" I meant that bmm interface accepts BxPxQ and BxQxR, so if I'm implementing a generalized version that flattens some first dimensions, then the inputs must already be properly transposed by caller. And then there's this problem that we can't flatten first dimensions of non-contiguous tensors. In other words, extending a function like bmm requires first a call to transpose and then view, so the last line can't be used without having to change the bmm's contract.", "body": "Yep, you got me right :)\r\n\r\nBy \"works but doesn't fit some interfaces\" I meant that `bmm` interface accepts `BxPxQ` and `BxQxR`, so if I'm implementing a generalized version that flattens some first dimensions, then the inputs must already be properly transposed by caller. And then there's this problem that we can't flatten first dimensions of non-contiguous tensors. In other words, extending a function like `bmm` requires first a call to transpose and then view, so the last line can't be used without having to change the `bmm`'s contract."}