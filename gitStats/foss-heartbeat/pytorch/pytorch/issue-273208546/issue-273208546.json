{"url": "https://api.github.com/repos/pytorch/pytorch/issues/3653", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/3653/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/3653/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/3653/events", "html_url": "https://github.com/pytorch/pytorch/issues/3653", "id": 273208546, "node_id": "MDU6SXNzdWUyNzMyMDg1NDY=", "number": 3653, "title": "Support view() on batch dimensions for non-contiguous tensors?", "user": {"login": "vadimkantorov", "id": 1041752, "node_id": "MDQ6VXNlcjEwNDE3NTI=", "avatar_url": "https://avatars0.githubusercontent.com/u/1041752?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vadimkantorov", "html_url": "https://github.com/vadimkantorov", "followers_url": "https://api.github.com/users/vadimkantorov/followers", "following_url": "https://api.github.com/users/vadimkantorov/following{/other_user}", "gists_url": "https://api.github.com/users/vadimkantorov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vadimkantorov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vadimkantorov/subscriptions", "organizations_url": "https://api.github.com/users/vadimkantorov/orgs", "repos_url": "https://api.github.com/users/vadimkantorov/repos", "events_url": "https://api.github.com/users/vadimkantorov/events{/privacy}", "received_events_url": "https://api.github.com/users/vadimkantorov/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 424131849, "node_id": "MDU6TGFiZWw0MjQxMzE4NDk=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true}, {"id": 443484050, "node_id": "MDU6TGFiZWw0NDM0ODQwNTA=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/medium%20priority", "name": "medium priority", "color": "fbca04", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "SsnL", "id": 5674597, "node_id": "MDQ6VXNlcjU2NzQ1OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5674597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SsnL", "html_url": "https://github.com/SsnL", "followers_url": "https://api.github.com/users/SsnL/followers", "following_url": "https://api.github.com/users/SsnL/following{/other_user}", "gists_url": "https://api.github.com/users/SsnL/gists{/gist_id}", "starred_url": "https://api.github.com/users/SsnL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SsnL/subscriptions", "organizations_url": "https://api.github.com/users/SsnL/orgs", "repos_url": "https://api.github.com/users/SsnL/repos", "events_url": "https://api.github.com/users/SsnL/events{/privacy}", "received_events_url": "https://api.github.com/users/SsnL/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "SsnL", "id": 5674597, "node_id": "MDQ6VXNlcjU2NzQ1OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5674597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SsnL", "html_url": "https://github.com/SsnL", "followers_url": "https://api.github.com/users/SsnL/followers", "following_url": "https://api.github.com/users/SsnL/following{/other_user}", "gists_url": "https://api.github.com/users/SsnL/gists{/gist_id}", "starred_url": "https://api.github.com/users/SsnL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SsnL/subscriptions", "organizations_url": "https://api.github.com/users/SsnL/orgs", "repos_url": "https://api.github.com/users/SsnL/repos", "events_url": "https://api.github.com/users/SsnL/events{/privacy}", "received_events_url": "https://api.github.com/users/SsnL/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 8, "created_at": "2017-11-12T07:16:31Z", "updated_at": "2017-12-18T07:08:32Z", "closed_at": "2017-12-18T07:08:32Z", "author_association": "NONE", "body_html": "<div class=\"highlight highlight-source-python\"><pre>a <span class=\"pl-k\">=</span> torch.Tensor(<span class=\"pl-c1\">16</span>, <span class=\"pl-c1\">8</span>, <span class=\"pl-c1\">32</span>, <span class=\"pl-c1\">64</span>)\na.view(<span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">32</span>, <span class=\"pl-c1\">64</span>)                   <span class=\"pl-c\"><span class=\"pl-c\">#</span> works</span>\na.transpose(<span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>, <span class=\"pl-k\">-</span><span class=\"pl-c1\">2</span>).view(<span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">64</span>, <span class=\"pl-c1\">32</span>) <span class=\"pl-c\"><span class=\"pl-c\">#</span> doesn't</span>\na.view(<span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">32</span>, <span class=\"pl-c1\">64</span>).transpose(<span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>, <span class=\"pl-k\">-</span><span class=\"pl-c1\">2</span>) <span class=\"pl-c\"><span class=\"pl-c\">#</span> works but doesn't fit some interfaces, i.e. sometimes we want to do view as the last operation</span></pre></div>\n<p>Such view's are needed to implement 4D+ <code>bmm</code> that can treat all dimensions except last two as batch dimensions (similarly to Linear module's behavior). Unless I move transpose inside the <code>bmm</code> func (which would not match the existing interface but well), an extra <code>contiguous</code> call is needed.</p>\n<p>Does it make sense to support such <code>view</code> call? On one hand it breaks invariant that <code>view</code> always returns a contiguous tensor, on the other side the situation for several batch dimensions may be common.</p>\n<p>Earlier discussed in <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"208217310\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/764\" data-hovercard-type=\"issue\" data-hovercard-url=\"/pytorch/pytorch/issues/764/hovercard\" href=\"https://github.com/pytorch/pytorch/issues/764\">#764</a></p>", "body_text": "a = torch.Tensor(16, 8, 32, 64)\na.view(-1, 32, 64)                   # works\na.transpose(-1, -2).view(-1, 64, 32) # doesn't\na.view(-1, 32, 64).transpose(-1, -2) # works but doesn't fit some interfaces, i.e. sometimes we want to do view as the last operation\nSuch view's are needed to implement 4D+ bmm that can treat all dimensions except last two as batch dimensions (similarly to Linear module's behavior). Unless I move transpose inside the bmm func (which would not match the existing interface but well), an extra contiguous call is needed.\nDoes it make sense to support such view call? On one hand it breaks invariant that view always returns a contiguous tensor, on the other side the situation for several batch dimensions may be common.\nEarlier discussed in #764", "body": "```python\r\na = torch.Tensor(16, 8, 32, 64)\r\na.view(-1, 32, 64)                   # works\r\na.transpose(-1, -2).view(-1, 64, 32) # doesn't\r\na.view(-1, 32, 64).transpose(-1, -2) # works but doesn't fit some interfaces, i.e. sometimes we want to do view as the last operation\r\n```\r\n\r\nSuch view's are needed to implement 4D+ `bmm` that can treat all dimensions except last two as batch dimensions (similarly to Linear module's behavior). Unless I move transpose inside the `bmm` func (which would not match the existing interface but well), an extra `contiguous` call is needed.\r\n\r\nDoes it make sense to support such `view` call? On one hand it breaks invariant that `view` always returns a contiguous tensor, on the other side the situation for several batch dimensions may be common.\r\n\r\nEarlier discussed in https://github.com/pytorch/pytorch/issues/764"}