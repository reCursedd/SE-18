{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/234793488", "pull_request_review_id": 176512475, "id": 234793488, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzNDc5MzQ4OA==", "diff_hunk": "@@ -186,7 +187,7 @@ def gen_py_nn_functions(out, declarations, template_path):\n \n     def should_bind(declaration):\n         return (should_generate_python_binding(declaration) and\n-                declaration['mode'] == 'NN')\n+                (declaration['mode'] == 'NN' or declaration.get('python_module') == 'nn'))", "path": "tools/autograd/gen_python_functions.py", "position": 13, "original_position": 13, "commit_id": "57b912caf3ad9b3737cefe7e6ef718a7859b5338", "original_commit_id": "57b912caf3ad9b3737cefe7e6ef718a7859b5338", "user": {"login": "gchanan", "id": 3768583, "node_id": "MDQ6VXNlcjM3Njg1ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3768583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gchanan", "html_url": "https://github.com/gchanan", "followers_url": "https://api.github.com/users/gchanan/followers", "following_url": "https://api.github.com/users/gchanan/following{/other_user}", "gists_url": "https://api.github.com/users/gchanan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gchanan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gchanan/subscriptions", "organizations_url": "https://api.github.com/users/gchanan/orgs", "repos_url": "https://api.github.com/users/gchanan/repos", "events_url": "https://api.github.com/users/gchanan/events{/privacy}", "received_events_url": "https://api.github.com/users/gchanan/received_events", "type": "User", "site_admin": false}, "body": "Good question; the plan is subject to change but roughly:\r\n1) Implement native_wrappers for all nn.yaml functions\r\n2) Make actual nn.yaml functions (i.e. not the native wrappers) an \"implementation\" detail in that they don't end up in Declarations.yaml, then we don't need declaration['mode'] at all -- everything will be native.  We may still have something similar for differentiating 'TH' vs 'NN' implementation details, but that shouldn't leak anywhere.", "created_at": "2018-11-19T21:46:42Z", "updated_at": "2018-11-23T15:55:10Z", "html_url": "https://github.com/pytorch/pytorch/pull/14126#discussion_r234793488", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/14126", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/234793488"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/14126#discussion_r234793488"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/14126"}}, "body_html": "<p>Good question; the plan is subject to change but roughly:</p>\n<ol>\n<li>Implement native_wrappers for all nn.yaml functions</li>\n<li>Make actual nn.yaml functions (i.e. not the native wrappers) an \"implementation\" detail in that they don't end up in Declarations.yaml, then we don't need declaration['mode'] at all -- everything will be native.  We may still have something similar for differentiating 'TH' vs 'NN' implementation details, but that shouldn't leak anywhere.</li>\n</ol>", "body_text": "Good question; the plan is subject to change but roughly:\n\nImplement native_wrappers for all nn.yaml functions\nMake actual nn.yaml functions (i.e. not the native wrappers) an \"implementation\" detail in that they don't end up in Declarations.yaml, then we don't need declaration['mode'] at all -- everything will be native.  We may still have something similar for differentiating 'TH' vs 'NN' implementation details, but that shouldn't leak anywhere.", "in_reply_to_id": 234789994}