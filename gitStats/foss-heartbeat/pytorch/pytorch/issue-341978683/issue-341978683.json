{"url": "https://api.github.com/repos/pytorch/pytorch/issues/9499", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/9499/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/9499/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/9499/events", "html_url": "https://github.com/pytorch/pytorch/issues/9499", "id": 341978683, "node_id": "MDU6SXNzdWUzNDE5Nzg2ODM=", "number": 9499, "title": "Move ConstantPadNd into ATen", "user": {"login": "SsnL", "id": 5674597, "node_id": "MDQ6VXNlcjU2NzQ1OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5674597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SsnL", "html_url": "https://github.com/SsnL", "followers_url": "https://api.github.com/users/SsnL/followers", "following_url": "https://api.github.com/users/SsnL/following{/other_user}", "gists_url": "https://api.github.com/users/SsnL/gists{/gist_id}", "starred_url": "https://api.github.com/users/SsnL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SsnL/subscriptions", "organizations_url": "https://api.github.com/users/SsnL/orgs", "repos_url": "https://api.github.com/users/SsnL/repos", "events_url": "https://api.github.com/users/SsnL/events{/privacy}", "received_events_url": "https://api.github.com/users/SsnL/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 622622153, "node_id": "MDU6TGFiZWw2MjI2MjIxNTM=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/newcomer", "name": "newcomer", "color": "0052cc", "default": false}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2018-07-17T15:47:49Z", "updated_at": "2018-08-30T02:33:59Z", "closed_at": null, "author_association": "CONTRIBUTOR", "body_html": "<p><code>ConstantPadNd</code> is currently implemented in Python at <a href=\"https://github.com/pytorch/pytorch/blob/master/torch/nn/_functions/padding.py\">torch/nn/_functions/padding.py</a>. We'd like it to be implemented as a native function in ATen. Note that you will need to update <code>pad(..)</code> in <code>nn/functional.py</code> after porting.</p>\n<p>Reading material:</p>\n<ol>\n<li>How to add a native function: <a href=\"https://github.com/pytorch/pytorch/tree/master/aten/src/ATen/native/\">https://github.com/pytorch/pytorch/tree/master/aten/src/ATen/native/</a></li>\n<li>Derivatives are added in <code>tools/autograd/derivatives.yaml</code></li>\n</ol>\n<p>Tips:<br>\nThere is no context object in native functions; instead, if something needs to be reused in <code>backward</code>,</p>\n<ul>\n<li>if it is an input argument or output of <code>forward</code>, you can use it directly in <code>tools/autograd/derivatives.yaml</code>.</li>\n<li>otherwise, make it an output of the <code>forward</code></li>\n</ul>", "body_text": "ConstantPadNd is currently implemented in Python at torch/nn/_functions/padding.py. We'd like it to be implemented as a native function in ATen. Note that you will need to update pad(..) in nn/functional.py after porting.\nReading material:\n\nHow to add a native function: https://github.com/pytorch/pytorch/tree/master/aten/src/ATen/native/\nDerivatives are added in tools/autograd/derivatives.yaml\n\nTips:\nThere is no context object in native functions; instead, if something needs to be reused in backward,\n\nif it is an input argument or output of forward, you can use it directly in tools/autograd/derivatives.yaml.\notherwise, make it an output of the forward", "body": "`ConstantPadNd` is currently implemented in Python at [torch/nn/_functions/padding.py](https://github.com/pytorch/pytorch/blob/master/torch/nn/_functions/padding.py). We'd like it to be implemented as a native function in ATen. Note that you will need to update `pad(..)` in `nn/functional.py` after porting.\r\n\r\nReading material:\r\n\r\n1. How to add a native function: https://github.com/pytorch/pytorch/tree/master/aten/src/ATen/native/\r\n2. Derivatives are added in `tools/autograd/derivatives.yaml`\r\n\r\nTips:\r\n  There is no context object in native functions; instead, if something needs to be reused in `backward`, \r\n  + if it is an input argument or output of `forward`, you can use it directly in `tools/autograd/derivatives.yaml`.\r\n  + otherwise, make it an output of the `forward`\r\n"}