{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/181867130", "pull_request_review_id": 112566821, "id": 181867130, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MTg2NzEzMA==", "diff_hunk": "@@ -0,0 +1,55 @@\n+.. currentmodule:: torch\n+\n+.. _device-doc:\n+\n+torch.device\n+===================================\n+\n+A :class:`torch.device` is an object representing the device on which a :class:`torch.Tensor` is\n+or will be allocated.\n+\n+The :class:`torch.device` contains a device type ('cpu' or 'cuda') and optional device ordinal for the\n+device type.  If the device ordinal is not present, this represents the current device for the device type;\n+e.g. a :class:`torch.Tensor` constructed with device 'cuda' is equivalent to 'cuda:X' where X is the result of\n+:func:`torch.cuda.get_device()`.\n+\n+A :class:`torch.device` can be constructed via a string, a string and device ordinal, or a device ordinal.\n+\n+\n+Via a string:\n+::\n+\n+    >>> torch.device('cuda:0')\n+    device(device_type='cuda', device_index=0)\n+\n+    >>> torch.device('cpu')\n+    device(device_type='cpu')\n+\n+    >>> torch.device('cuda')  # current cuda device\n+    device(device_type='cuda')\n+\n+\n+Via a string and device ordinal:\n+\n+::\n+\n+    >>> torch.device('cuda', 0)\n+    device(device_type='cuda', device_index=0)\n+\n+    >>> torch.device('cpu', 0)\n+    device(device_type='cpu', device_index=0)\n+\n+Via a device ordinal (device ordinals by themselves are treated as cuda devices).\n+\n+::\n+\n+  >>> torch.device(1)\n+  device(device_type='cuda', device_index=1)\n+\n+.. note::\n+   Methods which take a device will generally accept a (properly formatted) string\n+   or integer device ordinal, e.g. the following are all equivalent:\n+\n+   >>> torch.randn((2,3), device=1)", "path": "docs/source/device.rst", "position": null, "original_position": 53, "commit_id": "4d0edb2b079e34c3b4c55e968c63bc53a4760b92", "original_commit_id": "63da2f87667c3b3a25029b1d342ce7fff4b80773", "user": {"login": "gchanan", "id": 3768583, "node_id": "MDQ6VXNlcjM3Njg1ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3768583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gchanan", "html_url": "https://github.com/gchanan", "followers_url": "https://api.github.com/users/gchanan/followers", "following_url": "https://api.github.com/users/gchanan/following{/other_user}", "gists_url": "https://api.github.com/users/gchanan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gchanan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gchanan/subscriptions", "organizations_url": "https://api.github.com/users/gchanan/orgs", "repos_url": "https://api.github.com/users/gchanan/repos", "events_url": "https://api.github.com/users/gchanan/events{/privacy}", "received_events_url": "https://api.github.com/users/gchanan/received_events", "type": "User", "site_admin": false}, "body": "The only issue there is it's kind of necessary for supporting legacy code, i.e. if you take a device parameter, it's safest to just wrap it in a `torch.device` and go from there.  So perhaps instead of interspersing the device ordinal examples with the others, we should move the device ordinal section to a separate legacy section (which can be linked from the migration guide).", "created_at": "2018-04-16T20:02:36Z", "updated_at": "2018-11-23T15:42:32Z", "html_url": "https://github.com/pytorch/pytorch/pull/6633#discussion_r181867130", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/6633", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/181867130"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/6633#discussion_r181867130"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/6633"}}, "body_html": "<p>The only issue there is it's kind of necessary for supporting legacy code, i.e. if you take a device parameter, it's safest to just wrap it in a <code>torch.device</code> and go from there.  So perhaps instead of interspersing the device ordinal examples with the others, we should move the device ordinal section to a separate legacy section (which can be linked from the migration guide).</p>", "body_text": "The only issue there is it's kind of necessary for supporting legacy code, i.e. if you take a device parameter, it's safest to just wrap it in a torch.device and go from there.  So perhaps instead of interspersing the device ordinal examples with the others, we should move the device ordinal section to a separate legacy section (which can be linked from the migration guide).", "in_reply_to_id": 181853006}