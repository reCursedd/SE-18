{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/182103543", "pull_request_review_id": 112848725, "id": 182103543, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjEwMzU0Mw==", "diff_hunk": "@@ -0,0 +1,56 @@\n+.. currentmodule:: torch\n+\n+.. _device-doc:\n+\n+torch.device\n+===================================\n+\n+A :class:`torch.device` is an object representing the device on which a :class:`torch.Tensor` is\n+or will be allocated.\n+\n+The :class:`torch.device` contains a device type (``'cpu'`` or ``'cuda'``) and optional device ordinal for the\n+device type.  If the device ordinal is not present, this represents the current device for the device type;\n+e.g. a :class:`torch.Tensor` constructed with device ``'cuda'`` is equivalent to ``'cuda:X'`` where X is the result of\n+:func:`torch.cuda.current_device()`.\n+\n+A :class:`torch.Tensor`'s device can be accessed via the :attr:`Tensor.device` property.\n+\n+A :class:`torch.device` can be constructed via a string or via a string and device ordinal\n+\n+Via a string:\n+::\n+\n+    >>> torch.device('cuda:0')\n+    device(type='cuda', index=0)\n+\n+    >>> torch.device('cpu')\n+    device(type='cpu')\n+\n+    >>> torch.device('cuda')  # current cuda device\n+    device(type='cuda')\n+\n+Via a string and device ordinal:\n+\n+::\n+\n+    >>> torch.device('cuda', 0)\n+    device(type='cuda', index=0)\n+\n+    >>> torch.device('cpu', 0)\n+    device(type='cpu', index=0)\n+\n+.. note::\n+   For legacy reasons, a device can be constructed via a single device ordinal, which is treated", "path": "docs/source/device.rst", "position": 43, "original_position": 43, "commit_id": "4d0edb2b079e34c3b4c55e968c63bc53a4760b92", "original_commit_id": "4d0edb2b079e34c3b4c55e968c63bc53a4760b92", "user": {"login": "gchanan", "id": 3768583, "node_id": "MDQ6VXNlcjM3Njg1ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3768583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gchanan", "html_url": "https://github.com/gchanan", "followers_url": "https://api.github.com/users/gchanan/followers", "following_url": "https://api.github.com/users/gchanan/following{/other_user}", "gists_url": "https://api.github.com/users/gchanan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gchanan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gchanan/subscriptions", "organizations_url": "https://api.github.com/users/gchanan/orgs", "repos_url": "https://api.github.com/users/gchanan/repos", "events_url": "https://api.github.com/users/gchanan/events{/privacy}", "received_events_url": "https://api.github.com/users/gchanan/received_events", "type": "User", "site_admin": false}, "body": "Let's refer to it as \"legacy\" for now and deprecate if we need to in the next release.", "created_at": "2018-04-17T14:56:29Z", "updated_at": "2018-11-23T15:42:36Z", "html_url": "https://github.com/pytorch/pytorch/pull/6633#discussion_r182103543", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/6633", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/182103543"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/6633#discussion_r182103543"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/6633"}}, "body_html": "<p>Let's refer to it as \"legacy\" for now and deprecate if we need to in the next release.</p>", "body_text": "Let's refer to it as \"legacy\" for now and deprecate if we need to in the next release.", "in_reply_to_id": 182052728}