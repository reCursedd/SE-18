{"url": "https://api.github.com/repos/pytorch/pytorch/issues/1256", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/1256/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/1256/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/1256/events", "html_url": "https://github.com/pytorch/pytorch/issues/1256", "id": 221692474, "node_id": "MDU6SXNzdWUyMjE2OTI0NzQ=", "number": 1256, "title": "Error adding tensor and scalar tensor", "user": {"login": "outlace", "id": 3196399, "node_id": "MDQ6VXNlcjMxOTYzOTk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3196399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/outlace", "html_url": "https://github.com/outlace", "followers_url": "https://api.github.com/users/outlace/followers", "following_url": "https://api.github.com/users/outlace/following{/other_user}", "gists_url": "https://api.github.com/users/outlace/gists{/gist_id}", "starred_url": "https://api.github.com/users/outlace/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/outlace/subscriptions", "organizations_url": "https://api.github.com/users/outlace/orgs", "repos_url": "https://api.github.com/users/outlace/repos", "events_url": "https://api.github.com/users/outlace/events{/privacy}", "received_events_url": "https://api.github.com/users/outlace/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-04-13T21:53:27Z", "updated_at": "2017-04-13T22:38:13Z", "closed_at": "2017-04-13T22:38:13Z", "author_association": "NONE", "body_html": "<p>In numpy I can do something like this:<br>\nIN:     x = np.array([[1,2,3,4]])<br>\nIN:     y = np.array([[1]])<br>\nIN:     x + y<br>\nOUT: array([[2, 3, 4, 5]])</p>\n<p>In PyTorch I try doing something similar using torch.add and it complains the tensors are of inconsistent size. It would be nice if it could just infer that a 1x1 Tensor should be treated as a scalar and added to each element in the (non-scalar) Tensor.</p>", "body_text": "In numpy I can do something like this:\nIN:     x = np.array([[1,2,3,4]])\nIN:     y = np.array([[1]])\nIN:     x + y\nOUT: array([[2, 3, 4, 5]])\nIn PyTorch I try doing something similar using torch.add and it complains the tensors are of inconsistent size. It would be nice if it could just infer that a 1x1 Tensor should be treated as a scalar and added to each element in the (non-scalar) Tensor.", "body": "In numpy I can do something like this:\r\nIN:     x = np.array([[1,2,3,4]]) \r\nIN:     y = np.array([[1]])\r\nIN:     x + y\r\nOUT: array([[2, 3, 4, 5]])\r\n\r\nIn PyTorch I try doing something similar using torch.add and it complains the tensors are of inconsistent size. It would be nice if it could just infer that a 1x1 Tensor should be treated as a scalar and added to each element in the (non-scalar) Tensor."}