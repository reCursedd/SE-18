{"url": "https://api.github.com/repos/pytorch/pytorch/issues/11612", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/11612/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/11612/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/11612/events", "html_url": "https://github.com/pytorch/pytorch/issues/11612", "id": 359695769, "node_id": "MDU6SXNzdWUzNTk2OTU3Njk=", "number": 11612, "title": "[feature request] Triangular Matrix Representation", "user": {"login": "benvcutilli", "id": 23709161, "node_id": "MDQ6VXNlcjIzNzA5MTYx", "avatar_url": "https://avatars1.githubusercontent.com/u/23709161?v=4", "gravatar_id": "", "url": "https://api.github.com/users/benvcutilli", "html_url": "https://github.com/benvcutilli", "followers_url": "https://api.github.com/users/benvcutilli/followers", "following_url": "https://api.github.com/users/benvcutilli/following{/other_user}", "gists_url": "https://api.github.com/users/benvcutilli/gists{/gist_id}", "starred_url": "https://api.github.com/users/benvcutilli/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/benvcutilli/subscriptions", "organizations_url": "https://api.github.com/users/benvcutilli/orgs", "repos_url": "https://api.github.com/users/benvcutilli/repos", "events_url": "https://api.github.com/users/benvcutilli/events{/privacy}", "received_events_url": "https://api.github.com/users/benvcutilli/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-09-13T00:08:09Z", "updated_at": "2018-09-25T20:05:37Z", "closed_at": null, "author_association": "NONE", "body_html": "<p>I tried searching the documentation, but besides sparse matrices (which in most cases would use <em>more</em> space than a dense matrix), I didn't see any tensor types that would take advantage of the ability to save space with the knowledge that the tensor is triangular. This would also save time when performing <code>matmul()</code>, I'd imagine. For example, my use case is a symmetric matrix (a modification of the distance matrix (<a href=\"https://en.wikipedia.org/wiki/Distance_matrix\" rel=\"nofollow\">https://en.wikipedia.org/wiki/Distance_matrix</a>), and I only need the upper half without the diagonal, so performing operations on the other elements would be worthless, and saving them would be a waste of space.</p>\n<p>Can such a type be implemented? Apologies if I missed something and it already exists.</p>", "body_text": "I tried searching the documentation, but besides sparse matrices (which in most cases would use more space than a dense matrix), I didn't see any tensor types that would take advantage of the ability to save space with the knowledge that the tensor is triangular. This would also save time when performing matmul(), I'd imagine. For example, my use case is a symmetric matrix (a modification of the distance matrix (https://en.wikipedia.org/wiki/Distance_matrix), and I only need the upper half without the diagonal, so performing operations on the other elements would be worthless, and saving them would be a waste of space.\nCan such a type be implemented? Apologies if I missed something and it already exists.", "body": "I tried searching the documentation, but besides sparse matrices (which in most cases would use _more_ space than a dense matrix), I didn't see any tensor types that would take advantage of the ability to save space with the knowledge that the tensor is triangular. This would also save time when performing `matmul()`, I'd imagine. For example, my use case is a symmetric matrix (a modification of the distance matrix (https://en.wikipedia.org/wiki/Distance_matrix), and I only need the upper half without the diagonal, so performing operations on the other elements would be worthless, and saving them would be a waste of space.\r\n\r\nCan such a type be implemented? Apologies if I missed something and it already exists."}