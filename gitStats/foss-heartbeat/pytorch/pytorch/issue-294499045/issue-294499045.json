{"url": "https://api.github.com/repos/pytorch/pytorch/issues/5055", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/5055/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/5055/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/5055/events", "html_url": "https://github.com/pytorch/pytorch/issues/5055", "id": 294499045, "node_id": "MDU6SXNzdWUyOTQ0OTkwNDU=", "number": 5055, "title": "[ppc64le] test failure in test_jit.TestJit.test_cpp", "user": {"login": "avmgithub", "id": 9083746, "node_id": "MDQ6VXNlcjkwODM3NDY=", "avatar_url": "https://avatars1.githubusercontent.com/u/9083746?v=4", "gravatar_id": "", "url": "https://api.github.com/users/avmgithub", "html_url": "https://github.com/avmgithub", "followers_url": "https://api.github.com/users/avmgithub/followers", "following_url": "https://api.github.com/users/avmgithub/following{/other_user}", "gists_url": "https://api.github.com/users/avmgithub/gists{/gist_id}", "starred_url": "https://api.github.com/users/avmgithub/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/avmgithub/subscriptions", "organizations_url": "https://api.github.com/users/avmgithub/orgs", "repos_url": "https://api.github.com/users/avmgithub/repos", "events_url": "https://api.github.com/users/avmgithub/events{/privacy}", "received_events_url": "https://api.github.com/users/avmgithub/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-02-05T18:41:01Z", "updated_at": "2018-02-08T05:49:16Z", "closed_at": "2018-02-08T05:49:16Z", "author_association": "CONTRIBUTOR", "body_html": "<p>There was a recent code drop for [JIT] add create_autodiff_subgraphs (<a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"291031537\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/4822\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/pytorch/pytorch/pull/4822/hovercard\" href=\"https://github.com/pytorch/pytorch/pull/4822\">#4822</a>) commit <a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/pytorch/pytorch/commit/0ae54980796be7d8e94fb9f3cf9d172e7eb8c268/hovercard\" href=\"https://github.com/pytorch/pytorch/commit/0ae54980796be7d8e94fb9f3cf9d172e7eb8c268\"><tt>0ae5498</tt></a>    that is failing in ppc64le.<br>\nthe failure seems to be that the expected output is different from what ppc64le is producing</p>\n<p>here is the output of the failure.</p>\n<pre><code>$ python -m unittest -q test_jit.TestJit.test_cpp\n\nFAIL: test_cpp (test_jit.TestJit)\n\nTraceback (most recent call last):\n  File \"/home/freddie/builder/jenkins/pytorch/pytorch/test/test_jit.py\", line 88                                                   3, in test_cpp\n    self.assertExpected(torch._C._jit_run_cpp_tests())\n  File \"/home/freddie/builder/jenkins/pytorch/pytorch/test/common.py\", line 376,                                                    in assertExpected\n    self.assertMultiLineEqual(expected, s)\nAssertionError: 'test[1351 chars] mm(%1, %4)\\n  %6 : UNKNOWN_TYPE = mm(%0, %3)\\[                                                   2452 chars]\\n\\n' != 'test[1351 chars] mm(%0, %3)\\n  %6 : UNKNOWN_TYPE = mm(%1, %                                                   4)\\[2452 chars]\\n\\n'\n  testBlocks\n  graph(%a : UNKNOWN_TYPE\n        %b : UNKNOWN_TYPE\n        %c : UNKNOWN_TYPE) {\n    %2 : UNKNOWN_TYPE = add[alpha={1}](%a, %b)\n    %4 : UNKNOWN_TYPE = If(%c)\n      block0() {\n        %5 : UNKNOWN_TYPE = add[alpha={1}](%2, %2)\n        -&gt; (%5)\n      }\n      block1() {\n        %6 : UNKNOWN_TYPE = add[alpha={1}](%b, %2)\n        %7 : UNKNOWN_TYPE = add[alpha={1}](%6, %2)\n        -&gt; (%7)\n      }\n    %8 : UNKNOWN_TYPE = add[alpha={1}](%4, %2)\n    return (%8);\n  }\n\n  graph(%a : UNKNOWN_TYPE\n        %b : UNKNOWN_TYPE\n        %c : UNKNOWN_TYPE) {\n    %2 : UNKNOWN_TYPE = add[alpha={1}](%a, %b)\n    %4 : UNKNOWN_TYPE = If(%c)\n      block0() {\n        %6 : UNKNOWN_TYPE = add[alpha={1}](%b, %2)\n        %7 : UNKNOWN_TYPE = add[alpha={1}](%6, %2)\n        -&gt; (%7)\n      }\n    %8 : UNKNOWN_TYPE = add[alpha={1}](%4, %2)\n    return (%8);\n  }\n\n  graph(%a : UNKNOWN_TYPE\n        %b : UNKNOWN_TYPE\n        %c : UNKNOWN_TYPE) {\n    %3 : UNKNOWN_TYPE = add[alpha={1}](%a, %b)\n    %4 : UNKNOWN_TYPE = If(%c)\n      block0() {\n        %5 : UNKNOWN_TYPE = add[alpha={1}](%b, %3)\n        %6 : UNKNOWN_TYPE = add[alpha={1}](%5, %3)\n        -&gt; (%6)\n      }\n    %7 : UNKNOWN_TYPE = add[alpha={1}](%4, %3)\n    return (%7);\n  }\n\n  testCreateAutodiffSubgraphs\n  graph(%0 : UNKNOWN_TYPE\n        %1 : UNKNOWN_TYPE\n        %2 : UNKNOWN_TYPE\n        %3 : UNKNOWN_TYPE\n        %4 : UNKNOWN_TYPE) {\n-   %5 : UNKNOWN_TYPE = mm(%1, %4)\n-   %6 : UNKNOWN_TYPE = mm(%0, %3)\n?    ^\n+   %5 : UNKNOWN_TYPE = mm(%0, %3)\n?    ^\n+   %6 : UNKNOWN_TYPE = mm(%1, %4)\n-   %7 : UNKNOWN_TYPE = add[alpha={1}](%6, %5)\n?                                        ----\n+   %7 : UNKNOWN_TYPE = add[alpha={1}](%5, %6)\n?                                       ++++\n    %8 : UNKNOWN_TYPE, %9 : UNKNOWN_TYPE, %10 : UNKNOWN_TYPE, %11 : UNKNOWN_TYPE                                                    = chunk[chunks=4, dim=1](%7)\n    %12 : UNKNOWN_TYPE = sigmoid(%8)\n    %13 : UNKNOWN_TYPE = sigmoid(%11)\n    %14 : UNKNOWN_TYPE = tanh(%10)\n    %15 : UNKNOWN_TYPE = sigmoid(%9)\n-   %21 : UNKNOWN_TYPE = GraphExecutor_0(%12, %14, %15, %2)\n?                                                ---------\n+   %21 : UNKNOWN_TYPE = GraphExecutor_0(%15, %2, %12, %14)\n?                                          ++++  +++++\n    %19 : UNKNOWN_TYPE = tanh(%21)\n    %20 : UNKNOWN_TYPE = mul(%13, %19)\n    return (%20, %21);\n  }\n  with GraphExecutor_0 = graph(%1 : UNKNOWN_TYPE\n        %2 : UNKNOWN_TYPE\n        %4 : UNKNOWN_TYPE\n        %5 : UNKNOWN_TYPE) {\n    %0 : UNKNOWN_TYPE = mul(%1, %2)\n    %3 : UNKNOWN_TYPE = mul(%4, %5)\n-   %6 : UNKNOWN_TYPE = add[alpha={1}](%3, %0)\n?                                        ----\n+   %6 : UNKNOWN_TYPE = add[alpha={1}](%0, %3)\n?                                       ++++\n    return (%6);\n  }\n\n  testDifferentiate\n  graph(%0 : Float(2, 3, 4)\n        %1 : Float(2, 3, 4)) {\n    %2 : Float(2, 3, 4) = mul(%0, %1)\n    %3 : Float(2, 3, 4) = mul(%2, %0)\n    %4 : Float(2, 3, 4) = add[alpha={1}](%3, %1)\n    return (%4, %2);\n  }\n  graph(%0 : Float(2, 3, 4)\n        %1 : Float(2, 3, 4)\n        %2 : Float(2, 3, 4)\n        %3 : Float(2, 3, 4)\n        %4 : Float(2, 3, 4)) {\n    %5 : UNKNOWN_TYPE = Constant[value=&lt;Tensor&gt;, is_zero=1]()\n    %6 : UNKNOWN_TYPE = ReplaceIfUndef(%0, %5)\n    %7 : UNKNOWN_TYPE = Constant[value=&lt;Tensor&gt;, is_zero=1]()\n    %8 : UNKNOWN_TYPE = ReplaceIfUndef(%1, %7)\n    %9 : UNKNOWN_TYPE = mul(%6, %2)\n    %10 : UNKNOWN_TYPE = add[alpha={1}](%8, %9)\n    %11 : UNKNOWN_TYPE = mul(%6, %4)\n    %12 : UNKNOWN_TYPE = mul(%10, %3)\n    %13 : UNKNOWN_TYPE = mul(%10, %2)\n    %14 : UNKNOWN_TYPE = add[alpha={1}](%11, %12)\n    %15 : UNKNOWN_TYPE = add[alpha={1}](%6, %13)\n    return (%14, %15);\n  }\n\n  testDifferentiateWithRequiresGrad\n  graph(%0 : Float(2, 3, 4)\n        %1 : Float(2, 3, 4)) {\n    %2 : Float(2, 3, 4) = mul(%1, %1)\n    %3 : Float(2, 3, 4) = add[alpha={1}](%2, %1)\n    %4 : Float(2, 3, 4) = add[alpha={1}](%3, %0)\n    %5 : Float(2, 3, 4) = mul(%4, %0)\n    %6 : Float(2, 3, 4) = add[alpha={1}](%5, %1)\n    return (%3, %6, %4);\n  }\n  graph(%0 : Float(2, 3, 4)\n        %1 : Float(2, 3, 4)\n        %2 : Float(2, 3, 4)\n        %3 : Float(2, 3, 4)) {\n    %4 : UNKNOWN_TYPE = Constant[value=&lt;Tensor&gt;, is_zero=1]()\n    %5 : UNKNOWN_TYPE = ReplaceIfUndef(%0, %4)\n    %6 : UNKNOWN_TYPE = Constant[value=&lt;Tensor&gt;, is_zero=1]()\n    %7 : UNKNOWN_TYPE = ReplaceIfUndef(%1, %6)\n    %8 : UNKNOWN_TYPE = mul(%5, %2)\n    %9 : UNKNOWN_TYPE = add[alpha={1}](%7, %8)\n    %10 : UNKNOWN_TYPE = mul(%5, %3)\n    %11 : UNKNOWN_TYPE = add[alpha={1}](%10, %9)\n    return (%11);\n  }\n\n\n\n----------------------------------------------------------------------\nRan 1 test in 3.943s\n\nFAILED (failures=1)\n</code></pre>", "body_text": "There was a recent code drop for [JIT] add create_autodiff_subgraphs (#4822) commit 0ae5498    that is failing in ppc64le.\nthe failure seems to be that the expected output is different from what ppc64le is producing\nhere is the output of the failure.\n$ python -m unittest -q test_jit.TestJit.test_cpp\n\nFAIL: test_cpp (test_jit.TestJit)\n\nTraceback (most recent call last):\n  File \"/home/freddie/builder/jenkins/pytorch/pytorch/test/test_jit.py\", line 88                                                   3, in test_cpp\n    self.assertExpected(torch._C._jit_run_cpp_tests())\n  File \"/home/freddie/builder/jenkins/pytorch/pytorch/test/common.py\", line 376,                                                    in assertExpected\n    self.assertMultiLineEqual(expected, s)\nAssertionError: 'test[1351 chars] mm(%1, %4)\\n  %6 : UNKNOWN_TYPE = mm(%0, %3)\\[                                                   2452 chars]\\n\\n' != 'test[1351 chars] mm(%0, %3)\\n  %6 : UNKNOWN_TYPE = mm(%1, %                                                   4)\\[2452 chars]\\n\\n'\n  testBlocks\n  graph(%a : UNKNOWN_TYPE\n        %b : UNKNOWN_TYPE\n        %c : UNKNOWN_TYPE) {\n    %2 : UNKNOWN_TYPE = add[alpha={1}](%a, %b)\n    %4 : UNKNOWN_TYPE = If(%c)\n      block0() {\n        %5 : UNKNOWN_TYPE = add[alpha={1}](%2, %2)\n        -> (%5)\n      }\n      block1() {\n        %6 : UNKNOWN_TYPE = add[alpha={1}](%b, %2)\n        %7 : UNKNOWN_TYPE = add[alpha={1}](%6, %2)\n        -> (%7)\n      }\n    %8 : UNKNOWN_TYPE = add[alpha={1}](%4, %2)\n    return (%8);\n  }\n\n  graph(%a : UNKNOWN_TYPE\n        %b : UNKNOWN_TYPE\n        %c : UNKNOWN_TYPE) {\n    %2 : UNKNOWN_TYPE = add[alpha={1}](%a, %b)\n    %4 : UNKNOWN_TYPE = If(%c)\n      block0() {\n        %6 : UNKNOWN_TYPE = add[alpha={1}](%b, %2)\n        %7 : UNKNOWN_TYPE = add[alpha={1}](%6, %2)\n        -> (%7)\n      }\n    %8 : UNKNOWN_TYPE = add[alpha={1}](%4, %2)\n    return (%8);\n  }\n\n  graph(%a : UNKNOWN_TYPE\n        %b : UNKNOWN_TYPE\n        %c : UNKNOWN_TYPE) {\n    %3 : UNKNOWN_TYPE = add[alpha={1}](%a, %b)\n    %4 : UNKNOWN_TYPE = If(%c)\n      block0() {\n        %5 : UNKNOWN_TYPE = add[alpha={1}](%b, %3)\n        %6 : UNKNOWN_TYPE = add[alpha={1}](%5, %3)\n        -> (%6)\n      }\n    %7 : UNKNOWN_TYPE = add[alpha={1}](%4, %3)\n    return (%7);\n  }\n\n  testCreateAutodiffSubgraphs\n  graph(%0 : UNKNOWN_TYPE\n        %1 : UNKNOWN_TYPE\n        %2 : UNKNOWN_TYPE\n        %3 : UNKNOWN_TYPE\n        %4 : UNKNOWN_TYPE) {\n-   %5 : UNKNOWN_TYPE = mm(%1, %4)\n-   %6 : UNKNOWN_TYPE = mm(%0, %3)\n?    ^\n+   %5 : UNKNOWN_TYPE = mm(%0, %3)\n?    ^\n+   %6 : UNKNOWN_TYPE = mm(%1, %4)\n-   %7 : UNKNOWN_TYPE = add[alpha={1}](%6, %5)\n?                                        ----\n+   %7 : UNKNOWN_TYPE = add[alpha={1}](%5, %6)\n?                                       ++++\n    %8 : UNKNOWN_TYPE, %9 : UNKNOWN_TYPE, %10 : UNKNOWN_TYPE, %11 : UNKNOWN_TYPE                                                    = chunk[chunks=4, dim=1](%7)\n    %12 : UNKNOWN_TYPE = sigmoid(%8)\n    %13 : UNKNOWN_TYPE = sigmoid(%11)\n    %14 : UNKNOWN_TYPE = tanh(%10)\n    %15 : UNKNOWN_TYPE = sigmoid(%9)\n-   %21 : UNKNOWN_TYPE = GraphExecutor_0(%12, %14, %15, %2)\n?                                                ---------\n+   %21 : UNKNOWN_TYPE = GraphExecutor_0(%15, %2, %12, %14)\n?                                          ++++  +++++\n    %19 : UNKNOWN_TYPE = tanh(%21)\n    %20 : UNKNOWN_TYPE = mul(%13, %19)\n    return (%20, %21);\n  }\n  with GraphExecutor_0 = graph(%1 : UNKNOWN_TYPE\n        %2 : UNKNOWN_TYPE\n        %4 : UNKNOWN_TYPE\n        %5 : UNKNOWN_TYPE) {\n    %0 : UNKNOWN_TYPE = mul(%1, %2)\n    %3 : UNKNOWN_TYPE = mul(%4, %5)\n-   %6 : UNKNOWN_TYPE = add[alpha={1}](%3, %0)\n?                                        ----\n+   %6 : UNKNOWN_TYPE = add[alpha={1}](%0, %3)\n?                                       ++++\n    return (%6);\n  }\n\n  testDifferentiate\n  graph(%0 : Float(2, 3, 4)\n        %1 : Float(2, 3, 4)) {\n    %2 : Float(2, 3, 4) = mul(%0, %1)\n    %3 : Float(2, 3, 4) = mul(%2, %0)\n    %4 : Float(2, 3, 4) = add[alpha={1}](%3, %1)\n    return (%4, %2);\n  }\n  graph(%0 : Float(2, 3, 4)\n        %1 : Float(2, 3, 4)\n        %2 : Float(2, 3, 4)\n        %3 : Float(2, 3, 4)\n        %4 : Float(2, 3, 4)) {\n    %5 : UNKNOWN_TYPE = Constant[value=<Tensor>, is_zero=1]()\n    %6 : UNKNOWN_TYPE = ReplaceIfUndef(%0, %5)\n    %7 : UNKNOWN_TYPE = Constant[value=<Tensor>, is_zero=1]()\n    %8 : UNKNOWN_TYPE = ReplaceIfUndef(%1, %7)\n    %9 : UNKNOWN_TYPE = mul(%6, %2)\n    %10 : UNKNOWN_TYPE = add[alpha={1}](%8, %9)\n    %11 : UNKNOWN_TYPE = mul(%6, %4)\n    %12 : UNKNOWN_TYPE = mul(%10, %3)\n    %13 : UNKNOWN_TYPE = mul(%10, %2)\n    %14 : UNKNOWN_TYPE = add[alpha={1}](%11, %12)\n    %15 : UNKNOWN_TYPE = add[alpha={1}](%6, %13)\n    return (%14, %15);\n  }\n\n  testDifferentiateWithRequiresGrad\n  graph(%0 : Float(2, 3, 4)\n        %1 : Float(2, 3, 4)) {\n    %2 : Float(2, 3, 4) = mul(%1, %1)\n    %3 : Float(2, 3, 4) = add[alpha={1}](%2, %1)\n    %4 : Float(2, 3, 4) = add[alpha={1}](%3, %0)\n    %5 : Float(2, 3, 4) = mul(%4, %0)\n    %6 : Float(2, 3, 4) = add[alpha={1}](%5, %1)\n    return (%3, %6, %4);\n  }\n  graph(%0 : Float(2, 3, 4)\n        %1 : Float(2, 3, 4)\n        %2 : Float(2, 3, 4)\n        %3 : Float(2, 3, 4)) {\n    %4 : UNKNOWN_TYPE = Constant[value=<Tensor>, is_zero=1]()\n    %5 : UNKNOWN_TYPE = ReplaceIfUndef(%0, %4)\n    %6 : UNKNOWN_TYPE = Constant[value=<Tensor>, is_zero=1]()\n    %7 : UNKNOWN_TYPE = ReplaceIfUndef(%1, %6)\n    %8 : UNKNOWN_TYPE = mul(%5, %2)\n    %9 : UNKNOWN_TYPE = add[alpha={1}](%7, %8)\n    %10 : UNKNOWN_TYPE = mul(%5, %3)\n    %11 : UNKNOWN_TYPE = add[alpha={1}](%10, %9)\n    return (%11);\n  }\n\n\n\n----------------------------------------------------------------------\nRan 1 test in 3.943s\n\nFAILED (failures=1)", "body": "There was a recent code drop for [JIT] add create_autodiff_subgraphs (#4822) commit 0ae54980796be7d8e94fb9f3cf9d172e7eb8c268    that is failing in ppc64le.   \r\nthe failure seems to be that the expected output is different from what ppc64le is producing\r\n\r\nhere is the output of the failure.\r\n\r\n```\r\n$ python -m unittest -q test_jit.TestJit.test_cpp\r\n\r\nFAIL: test_cpp (test_jit.TestJit)\r\n\r\nTraceback (most recent call last):\r\n  File \"/home/freddie/builder/jenkins/pytorch/pytorch/test/test_jit.py\", line 88                                                   3, in test_cpp\r\n    self.assertExpected(torch._C._jit_run_cpp_tests())\r\n  File \"/home/freddie/builder/jenkins/pytorch/pytorch/test/common.py\", line 376,                                                    in assertExpected\r\n    self.assertMultiLineEqual(expected, s)\r\nAssertionError: 'test[1351 chars] mm(%1, %4)\\n  %6 : UNKNOWN_TYPE = mm(%0, %3)\\[                                                   2452 chars]\\n\\n' != 'test[1351 chars] mm(%0, %3)\\n  %6 : UNKNOWN_TYPE = mm(%1, %                                                   4)\\[2452 chars]\\n\\n'\r\n  testBlocks\r\n  graph(%a : UNKNOWN_TYPE\r\n        %b : UNKNOWN_TYPE\r\n        %c : UNKNOWN_TYPE) {\r\n    %2 : UNKNOWN_TYPE = add[alpha={1}](%a, %b)\r\n    %4 : UNKNOWN_TYPE = If(%c)\r\n      block0() {\r\n        %5 : UNKNOWN_TYPE = add[alpha={1}](%2, %2)\r\n        -> (%5)\r\n      }\r\n      block1() {\r\n        %6 : UNKNOWN_TYPE = add[alpha={1}](%b, %2)\r\n        %7 : UNKNOWN_TYPE = add[alpha={1}](%6, %2)\r\n        -> (%7)\r\n      }\r\n    %8 : UNKNOWN_TYPE = add[alpha={1}](%4, %2)\r\n    return (%8);\r\n  }\r\n\r\n  graph(%a : UNKNOWN_TYPE\r\n        %b : UNKNOWN_TYPE\r\n        %c : UNKNOWN_TYPE) {\r\n    %2 : UNKNOWN_TYPE = add[alpha={1}](%a, %b)\r\n    %4 : UNKNOWN_TYPE = If(%c)\r\n      block0() {\r\n        %6 : UNKNOWN_TYPE = add[alpha={1}](%b, %2)\r\n        %7 : UNKNOWN_TYPE = add[alpha={1}](%6, %2)\r\n        -> (%7)\r\n      }\r\n    %8 : UNKNOWN_TYPE = add[alpha={1}](%4, %2)\r\n    return (%8);\r\n  }\r\n\r\n  graph(%a : UNKNOWN_TYPE\r\n        %b : UNKNOWN_TYPE\r\n        %c : UNKNOWN_TYPE) {\r\n    %3 : UNKNOWN_TYPE = add[alpha={1}](%a, %b)\r\n    %4 : UNKNOWN_TYPE = If(%c)\r\n      block0() {\r\n        %5 : UNKNOWN_TYPE = add[alpha={1}](%b, %3)\r\n        %6 : UNKNOWN_TYPE = add[alpha={1}](%5, %3)\r\n        -> (%6)\r\n      }\r\n    %7 : UNKNOWN_TYPE = add[alpha={1}](%4, %3)\r\n    return (%7);\r\n  }\r\n\r\n  testCreateAutodiffSubgraphs\r\n  graph(%0 : UNKNOWN_TYPE\r\n        %1 : UNKNOWN_TYPE\r\n        %2 : UNKNOWN_TYPE\r\n        %3 : UNKNOWN_TYPE\r\n        %4 : UNKNOWN_TYPE) {\r\n-   %5 : UNKNOWN_TYPE = mm(%1, %4)\r\n-   %6 : UNKNOWN_TYPE = mm(%0, %3)\r\n?    ^\r\n+   %5 : UNKNOWN_TYPE = mm(%0, %3)\r\n?    ^\r\n+   %6 : UNKNOWN_TYPE = mm(%1, %4)\r\n-   %7 : UNKNOWN_TYPE = add[alpha={1}](%6, %5)\r\n?                                        ----\r\n+   %7 : UNKNOWN_TYPE = add[alpha={1}](%5, %6)\r\n?                                       ++++\r\n    %8 : UNKNOWN_TYPE, %9 : UNKNOWN_TYPE, %10 : UNKNOWN_TYPE, %11 : UNKNOWN_TYPE                                                    = chunk[chunks=4, dim=1](%7)\r\n    %12 : UNKNOWN_TYPE = sigmoid(%8)\r\n    %13 : UNKNOWN_TYPE = sigmoid(%11)\r\n    %14 : UNKNOWN_TYPE = tanh(%10)\r\n    %15 : UNKNOWN_TYPE = sigmoid(%9)\r\n-   %21 : UNKNOWN_TYPE = GraphExecutor_0(%12, %14, %15, %2)\r\n?                                                ---------\r\n+   %21 : UNKNOWN_TYPE = GraphExecutor_0(%15, %2, %12, %14)\r\n?                                          ++++  +++++\r\n    %19 : UNKNOWN_TYPE = tanh(%21)\r\n    %20 : UNKNOWN_TYPE = mul(%13, %19)\r\n    return (%20, %21);\r\n  }\r\n  with GraphExecutor_0 = graph(%1 : UNKNOWN_TYPE\r\n        %2 : UNKNOWN_TYPE\r\n        %4 : UNKNOWN_TYPE\r\n        %5 : UNKNOWN_TYPE) {\r\n    %0 : UNKNOWN_TYPE = mul(%1, %2)\r\n    %3 : UNKNOWN_TYPE = mul(%4, %5)\r\n-   %6 : UNKNOWN_TYPE = add[alpha={1}](%3, %0)\r\n?                                        ----\r\n+   %6 : UNKNOWN_TYPE = add[alpha={1}](%0, %3)\r\n?                                       ++++\r\n    return (%6);\r\n  }\r\n\r\n  testDifferentiate\r\n  graph(%0 : Float(2, 3, 4)\r\n        %1 : Float(2, 3, 4)) {\r\n    %2 : Float(2, 3, 4) = mul(%0, %1)\r\n    %3 : Float(2, 3, 4) = mul(%2, %0)\r\n    %4 : Float(2, 3, 4) = add[alpha={1}](%3, %1)\r\n    return (%4, %2);\r\n  }\r\n  graph(%0 : Float(2, 3, 4)\r\n        %1 : Float(2, 3, 4)\r\n        %2 : Float(2, 3, 4)\r\n        %3 : Float(2, 3, 4)\r\n        %4 : Float(2, 3, 4)) {\r\n    %5 : UNKNOWN_TYPE = Constant[value=<Tensor>, is_zero=1]()\r\n    %6 : UNKNOWN_TYPE = ReplaceIfUndef(%0, %5)\r\n    %7 : UNKNOWN_TYPE = Constant[value=<Tensor>, is_zero=1]()\r\n    %8 : UNKNOWN_TYPE = ReplaceIfUndef(%1, %7)\r\n    %9 : UNKNOWN_TYPE = mul(%6, %2)\r\n    %10 : UNKNOWN_TYPE = add[alpha={1}](%8, %9)\r\n    %11 : UNKNOWN_TYPE = mul(%6, %4)\r\n    %12 : UNKNOWN_TYPE = mul(%10, %3)\r\n    %13 : UNKNOWN_TYPE = mul(%10, %2)\r\n    %14 : UNKNOWN_TYPE = add[alpha={1}](%11, %12)\r\n    %15 : UNKNOWN_TYPE = add[alpha={1}](%6, %13)\r\n    return (%14, %15);\r\n  }\r\n\r\n  testDifferentiateWithRequiresGrad\r\n  graph(%0 : Float(2, 3, 4)\r\n        %1 : Float(2, 3, 4)) {\r\n    %2 : Float(2, 3, 4) = mul(%1, %1)\r\n    %3 : Float(2, 3, 4) = add[alpha={1}](%2, %1)\r\n    %4 : Float(2, 3, 4) = add[alpha={1}](%3, %0)\r\n    %5 : Float(2, 3, 4) = mul(%4, %0)\r\n    %6 : Float(2, 3, 4) = add[alpha={1}](%5, %1)\r\n    return (%3, %6, %4);\r\n  }\r\n  graph(%0 : Float(2, 3, 4)\r\n        %1 : Float(2, 3, 4)\r\n        %2 : Float(2, 3, 4)\r\n        %3 : Float(2, 3, 4)) {\r\n    %4 : UNKNOWN_TYPE = Constant[value=<Tensor>, is_zero=1]()\r\n    %5 : UNKNOWN_TYPE = ReplaceIfUndef(%0, %4)\r\n    %6 : UNKNOWN_TYPE = Constant[value=<Tensor>, is_zero=1]()\r\n    %7 : UNKNOWN_TYPE = ReplaceIfUndef(%1, %6)\r\n    %8 : UNKNOWN_TYPE = mul(%5, %2)\r\n    %9 : UNKNOWN_TYPE = add[alpha={1}](%7, %8)\r\n    %10 : UNKNOWN_TYPE = mul(%5, %3)\r\n    %11 : UNKNOWN_TYPE = add[alpha={1}](%10, %9)\r\n    return (%11);\r\n  }\r\n\r\n\r\n\r\n----------------------------------------------------------------------\r\nRan 1 test in 3.943s\r\n\r\nFAILED (failures=1)\r\n```"}