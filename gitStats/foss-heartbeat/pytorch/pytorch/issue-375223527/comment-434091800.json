{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/434091800", "html_url": "https://github.com/pytorch/pytorch/pull/13269#issuecomment-434091800", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/13269", "id": 434091800, "node_id": "MDEyOklzc3VlQ29tbWVudDQzNDA5MTgwMA==", "user": {"login": "zou3519", "id": 5652049, "node_id": "MDQ6VXNlcjU2NTIwNDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/5652049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zou3519", "html_url": "https://github.com/zou3519", "followers_url": "https://api.github.com/users/zou3519/followers", "following_url": "https://api.github.com/users/zou3519/following{/other_user}", "gists_url": "https://api.github.com/users/zou3519/gists{/gist_id}", "starred_url": "https://api.github.com/users/zou3519/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zou3519/subscriptions", "organizations_url": "https://api.github.com/users/zou3519/orgs", "repos_url": "https://api.github.com/users/zou3519/repos", "events_url": "https://api.github.com/users/zou3519/events{/privacy}", "received_events_url": "https://api.github.com/users/zou3519/received_events", "type": "User", "site_admin": false}, "created_at": "2018-10-29T21:42:45Z", "updated_at": "2018-10-29T21:45:07Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=655866\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/colesbury\">@colesbury</a> if reshape allocates memory, it calls self.clone(). Clone does have a device guard attached, so that is not a problem (reshape does not need the device guard).</p>\n<pre><code>Tensor reshape(const Tensor&amp; self, IntList proposed_shape) {\n  if (self.type().is_sparse()) {\n    AT_ERROR(\"reshape is not implemented for sparse tensors\");\n  }\n  auto shape = infer_size(proposed_shape, self.numel());\n  if (auto stride = THTensor_compute_stride(self.sizes(), self.strides(), shape)) {\n    return self.as_strided(shape, *stride);\n  }\n  return at::_unsafe_view(self.clone(), shape);\n}\n</code></pre>\n<p>Edit: actually, maybe it could go the as_strided route, but that would also have a device guard until I kill the as_strided resizing behavior in <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"374549939\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/13185\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/pytorch/pytorch/pull/13185/hovercard\" href=\"https://github.com/pytorch/pytorch/pull/13185\">#13185</a></p>", "body_text": "@colesbury if reshape allocates memory, it calls self.clone(). Clone does have a device guard attached, so that is not a problem (reshape does not need the device guard).\nTensor reshape(const Tensor& self, IntList proposed_shape) {\n  if (self.type().is_sparse()) {\n    AT_ERROR(\"reshape is not implemented for sparse tensors\");\n  }\n  auto shape = infer_size(proposed_shape, self.numel());\n  if (auto stride = THTensor_compute_stride(self.sizes(), self.strides(), shape)) {\n    return self.as_strided(shape, *stride);\n  }\n  return at::_unsafe_view(self.clone(), shape);\n}\n\nEdit: actually, maybe it could go the as_strided route, but that would also have a device guard until I kill the as_strided resizing behavior in #13185", "body": "@colesbury if reshape allocates memory, it calls self.clone(). Clone does have a device guard attached, so that is not a problem (reshape does not need the device guard).\r\n```\r\nTensor reshape(const Tensor& self, IntList proposed_shape) {\r\n  if (self.type().is_sparse()) {\r\n    AT_ERROR(\"reshape is not implemented for sparse tensors\");\r\n  }\r\n  auto shape = infer_size(proposed_shape, self.numel());\r\n  if (auto stride = THTensor_compute_stride(self.sizes(), self.strides(), shape)) {\r\n    return self.as_strided(shape, *stride);\r\n  }\r\n  return at::_unsafe_view(self.clone(), shape);\r\n}\r\n```\r\nEdit: actually, maybe it could go the as_strided route, but that would also have a device guard until I kill the as_strided resizing behavior in #13185"}