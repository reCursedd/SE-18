{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/428838460", "html_url": "https://github.com/pytorch/pytorch/pull/12500#issuecomment-428838460", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/12500", "id": 428838460, "node_id": "MDEyOklzc3VlQ29tbWVudDQyODgzODQ2MA==", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "created_at": "2018-10-11T06:38:26Z", "updated_at": "2018-10-11T06:38:26Z", "author_association": "CONTRIBUTOR", "body_html": "<p>OK, so I briefly skimmed the generation code, and I think the best thing we can do to make this presentable is to do some Declarations.yaml cleanup, which should simplify a bit of the hacking around you had to do here. <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"368970882\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/12562\" data-hovercard-type=\"issue\" data-hovercard-url=\"/pytorch/pytorch/issues/12562/hovercard\" href=\"https://github.com/pytorch/pytorch/issues/12562\">#12562</a> records some overall directions we want to take here, but probably the most important prereqs for this patch are:</p>\n<ul>\n<li>Centralizing TensorOptions to kwargs transformation</li>\n<li>Fix some types (e.g., <code>Generator *</code> and <code>std::vector&lt;Tensor&gt;</code>) to no longer be directly C++ types</li>\n<li>Rename <code>dynamic_type</code> to <code>type</code> (after having eliminated what we previously called <code>type</code>)</li>\n<li>Eliminate all mentions of <code>Type</code> from Declarations.yaml</li>\n<li>Centralized logic for determining if a method is inplace or not</li>\n<li>Change <code>method_of</code> to something simpler like <code>function</code> and/or <code>method</code>. Then don't have to use the \"does it have a self argument\" heuristic.</li>\n</ul>", "body_text": "OK, so I briefly skimmed the generation code, and I think the best thing we can do to make this presentable is to do some Declarations.yaml cleanup, which should simplify a bit of the hacking around you had to do here. #12562 records some overall directions we want to take here, but probably the most important prereqs for this patch are:\n\nCentralizing TensorOptions to kwargs transformation\nFix some types (e.g., Generator * and std::vector<Tensor>) to no longer be directly C++ types\nRename dynamic_type to type (after having eliminated what we previously called type)\nEliminate all mentions of Type from Declarations.yaml\nCentralized logic for determining if a method is inplace or not\nChange method_of to something simpler like function and/or method. Then don't have to use the \"does it have a self argument\" heuristic.", "body": "OK, so I briefly skimmed the generation code, and I think the best thing we can do to make this presentable is to do some Declarations.yaml cleanup, which should simplify a bit of the hacking around you had to do here. #12562 records some overall directions we want to take here, but probably the most important prereqs for this patch are:\r\n\r\n- Centralizing TensorOptions to kwargs transformation\r\n- Fix some types (e.g., `Generator *` and `std::vector<Tensor>`) to no longer be directly C++ types\r\n- Rename `dynamic_type` to `type` (after having eliminated what we previously called `type`)\r\n- Eliminate all mentions of `Type` from Declarations.yaml\r\n- Centralized logic for determining if a method is inplace or not\r\n- Change `method_of` to something simpler like `function` and/or `method`. Then don't have to use the \"does it have a self argument\" heuristic."}