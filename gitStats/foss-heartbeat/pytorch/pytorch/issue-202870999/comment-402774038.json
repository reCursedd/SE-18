{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/402774038", "html_url": "https://github.com/pytorch/pytorch/issues/571#issuecomment-402774038", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/571", "id": 402774038, "node_id": "MDEyOklzc3VlQ29tbWVudDQwMjc3NDAzOA==", "user": {"login": "XuefeiW", "id": 15201418, "node_id": "MDQ6VXNlcjE1MjAxNDE4", "avatar_url": "https://avatars1.githubusercontent.com/u/15201418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/XuefeiW", "html_url": "https://github.com/XuefeiW", "followers_url": "https://api.github.com/users/XuefeiW/followers", "following_url": "https://api.github.com/users/XuefeiW/following{/other_user}", "gists_url": "https://api.github.com/users/XuefeiW/gists{/gist_id}", "starred_url": "https://api.github.com/users/XuefeiW/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/XuefeiW/subscriptions", "organizations_url": "https://api.github.com/users/XuefeiW/orgs", "repos_url": "https://api.github.com/users/XuefeiW/repos", "events_url": "https://api.github.com/users/XuefeiW/events{/privacy}", "received_events_url": "https://api.github.com/users/XuefeiW/received_events", "type": "User", "site_admin": false}, "created_at": "2018-07-05T16:09:07Z", "updated_at": "2018-07-05T16:21:25Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=9110200\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/fmassa\">@fmassa</a> numpy will always return an empty array, so it's relatively easy to tell something is wrong. Also in numpy you cannot assign any value to this returned array.</p>\n<p>But in PyTorch, if the index of first dimension is out of boundary, you will get a empty tensor; if the index of first dimension is within range, but from the second dimension out of range, a tensor with one value will be returned. if the original intention is fetching one value then it's very difficult to find this error when debugging. Also you can assign tensor to this value and use it later:<br>\nb = torch.Tensor(3,4,5)<br>\nprint b[3:4]<br>\nprint b[1:2,4:5]<br>\nb[1:2,4:5] = 3<br>\nprint b[1:2,4:5]</p>", "body_text": "@fmassa numpy will always return an empty array, so it's relatively easy to tell something is wrong. Also in numpy you cannot assign any value to this returned array.\nBut in PyTorch, if the index of first dimension is out of boundary, you will get a empty tensor; if the index of first dimension is within range, but from the second dimension out of range, a tensor with one value will be returned. if the original intention is fetching one value then it's very difficult to find this error when debugging. Also you can assign tensor to this value and use it later:\nb = torch.Tensor(3,4,5)\nprint b[3:4]\nprint b[1:2,4:5]\nb[1:2,4:5] = 3\nprint b[1:2,4:5]", "body": "@fmassa numpy will always return an empty array, so it's relatively easy to tell something is wrong. Also in numpy you cannot assign any value to this returned array.\r\n\r\nBut in PyTorch, if the index of first dimension is out of boundary, you will get a empty tensor; if the index of first dimension is within range, but from the second dimension out of range, a tensor with one value will be returned. if the original intention is fetching one value then it's very difficult to find this error when debugging. Also you can assign tensor to this value and use it later:\r\nb = torch.Tensor(3,4,5)\r\nprint b[3:4]\r\nprint b[1:2,4:5]\r\nb[1:2,4:5] = 3\r\nprint b[1:2,4:5]\r\n"}