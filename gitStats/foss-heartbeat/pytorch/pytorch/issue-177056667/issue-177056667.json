{"url": "https://api.github.com/repos/pytorch/pytorch/issues/30", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/30/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/30/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/30/events", "html_url": "https://github.com/pytorch/pytorch/issues/30", "id": 177056667, "node_id": "MDU6SXNzdWUxNzcwNTY2Njc=", "number": 30, "title": "save/load CUDA tensor always puts it on device 0", "user": {"login": "adamlerer", "id": 5702157, "node_id": "MDQ6VXNlcjU3MDIxNTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5702157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adamlerer", "html_url": "https://github.com/adamlerer", "followers_url": "https://api.github.com/users/adamlerer/followers", "following_url": "https://api.github.com/users/adamlerer/following{/other_user}", "gists_url": "https://api.github.com/users/adamlerer/gists{/gist_id}", "starred_url": "https://api.github.com/users/adamlerer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adamlerer/subscriptions", "organizations_url": "https://api.github.com/users/adamlerer/orgs", "repos_url": "https://api.github.com/users/adamlerer/repos", "events_url": "https://api.github.com/users/adamlerer/events{/privacy}", "received_events_url": "https://api.github.com/users/adamlerer/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 443484050, "node_id": "MDU6TGFiZWw0NDM0ODQwNTA=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/medium%20priority", "name": "medium priority", "color": "fbca04", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-09-15T00:21:13Z", "updated_at": "2016-10-05T01:26:32Z", "closed_at": "2016-10-05T01:26:32Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Always deserializing onto device 0 is dangerous, because often device 0 doesn't have enough memory.</p>\n<p>This requires some heuristics to get right (e.g. what if you deserialize onto a machine with different # of GPUS?) You can look at what we did in cunn. I think this is low-pri.</p>\n<pre><code>In [127]: with open('checkpoint4.pt', 'wb') as f:\n     ...:     pickle.dump(torch.FloatTensor(10).cuda(3), f)\n     ...:\n\nIn [128]: with open('checkpoint4.pt', 'rb') as f:\n     ...:     obj = pickle.load(f)\n     ...:\n\nIn [130]: obj.getDevice()\nOut[130]: 0\n</code></pre>", "body_text": "Always deserializing onto device 0 is dangerous, because often device 0 doesn't have enough memory.\nThis requires some heuristics to get right (e.g. what if you deserialize onto a machine with different # of GPUS?) You can look at what we did in cunn. I think this is low-pri.\nIn [127]: with open('checkpoint4.pt', 'wb') as f:\n     ...:     pickle.dump(torch.FloatTensor(10).cuda(3), f)\n     ...:\n\nIn [128]: with open('checkpoint4.pt', 'rb') as f:\n     ...:     obj = pickle.load(f)\n     ...:\n\nIn [130]: obj.getDevice()\nOut[130]: 0", "body": "Always deserializing onto device 0 is dangerous, because often device 0 doesn't have enough memory.\n\nThis requires some heuristics to get right (e.g. what if you deserialize onto a machine with different # of GPUS?) You can look at what we did in cunn. I think this is low-pri.\n\n```\nIn [127]: with open('checkpoint4.pt', 'wb') as f:\n     ...:     pickle.dump(torch.FloatTensor(10).cuda(3), f)\n     ...:\n\nIn [128]: with open('checkpoint4.pt', 'rb') as f:\n     ...:     obj = pickle.load(f)\n     ...:\n\nIn [130]: obj.getDevice()\nOut[130]: 0\n```\n"}