{"url": "https://api.github.com/repos/pytorch/pytorch/issues/10456", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/10456/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/10456/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/10456/events", "html_url": "https://github.com/pytorch/pytorch/issues/10456", "id": 350042418, "node_id": "MDU6SXNzdWUzNTAwNDI0MTg=", "number": 10456, "title": "[jit] FusedConcat can crash the fusion compiler", "user": {"login": "zou3519", "id": 5652049, "node_id": "MDQ6VXNlcjU2NTIwNDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/5652049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zou3519", "html_url": "https://github.com/zou3519", "followers_url": "https://api.github.com/users/zou3519/followers", "following_url": "https://api.github.com/users/zou3519/following{/other_user}", "gists_url": "https://api.github.com/users/zou3519/gists{/gist_id}", "starred_url": "https://api.github.com/users/zou3519/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zou3519/subscriptions", "organizations_url": "https://api.github.com/users/zou3519/orgs", "repos_url": "https://api.github.com/users/zou3519/repos", "events_url": "https://api.github.com/users/zou3519/events{/privacy}", "received_events_url": "https://api.github.com/users/zou3519/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 679953983, "node_id": "MDU6TGFiZWw2Nzk5NTM5ODM=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/jit", "name": "jit", "color": "c5def5", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "zou3519", "id": 5652049, "node_id": "MDQ6VXNlcjU2NTIwNDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/5652049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zou3519", "html_url": "https://github.com/zou3519", "followers_url": "https://api.github.com/users/zou3519/followers", "following_url": "https://api.github.com/users/zou3519/following{/other_user}", "gists_url": "https://api.github.com/users/zou3519/gists{/gist_id}", "starred_url": "https://api.github.com/users/zou3519/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zou3519/subscriptions", "organizations_url": "https://api.github.com/users/zou3519/orgs", "repos_url": "https://api.github.com/users/zou3519/repos", "events_url": "https://api.github.com/users/zou3519/events{/privacy}", "received_events_url": "https://api.github.com/users/zou3519/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "zou3519", "id": 5652049, "node_id": "MDQ6VXNlcjU2NTIwNDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/5652049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zou3519", "html_url": "https://github.com/zou3519", "followers_url": "https://api.github.com/users/zou3519/followers", "following_url": "https://api.github.com/users/zou3519/following{/other_user}", "gists_url": "https://api.github.com/users/zou3519/gists{/gist_id}", "starred_url": "https://api.github.com/users/zou3519/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zou3519/subscriptions", "organizations_url": "https://api.github.com/users/zou3519/orgs", "repos_url": "https://api.github.com/users/zou3519/repos", "events_url": "https://api.github.com/users/zou3519/events{/privacy}", "received_events_url": "https://api.github.com/users/zou3519/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 0, "created_at": "2018-08-13T14:00:08Z", "updated_at": "2018-08-14T04:10:20Z", "closed_at": "2018-08-14T04:10:20Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Repro: the following code</p>\n<pre><code>import torch\n@torch.jit.script\ndef fn(x, y, z):\n    x1 = x + y \n    y1 = x - y\n    w = torch.cat([x1, y1])\n    return w + z\n\nx = torch.randn(2, 2, dtype=torch.float, device='cpu')\ny = torch.randn(2, 2, dtype=torch.float, device='cpu')\nz = torch.randn(4, 2, dtype=torch.float, device='cpu')\nfn(x, y, z)\nfn.graph_for(x, y, z)\n</code></pre>\n<p>produces the following optimized graph:</p>\n<pre><code>(gdb) cout *graph\ngraph(%x : Float(2, 2)\n      %y : Float(2, 2)\n      %z : Float(4, 2)) {\n  %3 : int = prim::Constant[value=1]()\n  %y1 : Float(2, 2) = aten::sub(%x, %y, %3)\n  %8 : int = prim::Constant[value=0]()\n  %14 : Float(4, 2) = prim::FusionGroup_0[device=-1](%z, %y1, %x, %y)\n  return (%14);\n}\nwith prim::FusionGroup_0 = graph(%1 : Float(4, 2)\n      %5 : Float(2, 2)\n      %7 : Float(2, 2)\n      %8 : Float(2, 2)) {\n  %11 : int = prim::Constant[value=1]()\n  %9 : int = prim::Constant[value=1]()\n  %x1 : Float(2, 2) = aten::add(%7, %8, %9)\n  %w : Float(4, 2) = prim::FusedConcat[dim=0](%x1, %5)\n  %2 : int = prim::Constant[value=1]()\n  %3 : Float(4, 2) = aten::add(%w, %1, %2)\n  return (%3);\n}\n</code></pre>\n<p>The graph fuser ends up producing a graph with a prim::FusedConcat node as well as the \"w + z\" node at the end that <em>uses</em> the output of the prim::FusedConcat node, which is a violation of the invariant that the output of a prim::FusedConcat node may not be used inside a fusion group.</p>", "body_text": "Repro: the following code\nimport torch\n@torch.jit.script\ndef fn(x, y, z):\n    x1 = x + y \n    y1 = x - y\n    w = torch.cat([x1, y1])\n    return w + z\n\nx = torch.randn(2, 2, dtype=torch.float, device='cpu')\ny = torch.randn(2, 2, dtype=torch.float, device='cpu')\nz = torch.randn(4, 2, dtype=torch.float, device='cpu')\nfn(x, y, z)\nfn.graph_for(x, y, z)\n\nproduces the following optimized graph:\n(gdb) cout *graph\ngraph(%x : Float(2, 2)\n      %y : Float(2, 2)\n      %z : Float(4, 2)) {\n  %3 : int = prim::Constant[value=1]()\n  %y1 : Float(2, 2) = aten::sub(%x, %y, %3)\n  %8 : int = prim::Constant[value=0]()\n  %14 : Float(4, 2) = prim::FusionGroup_0[device=-1](%z, %y1, %x, %y)\n  return (%14);\n}\nwith prim::FusionGroup_0 = graph(%1 : Float(4, 2)\n      %5 : Float(2, 2)\n      %7 : Float(2, 2)\n      %8 : Float(2, 2)) {\n  %11 : int = prim::Constant[value=1]()\n  %9 : int = prim::Constant[value=1]()\n  %x1 : Float(2, 2) = aten::add(%7, %8, %9)\n  %w : Float(4, 2) = prim::FusedConcat[dim=0](%x1, %5)\n  %2 : int = prim::Constant[value=1]()\n  %3 : Float(4, 2) = aten::add(%w, %1, %2)\n  return (%3);\n}\n\nThe graph fuser ends up producing a graph with a prim::FusedConcat node as well as the \"w + z\" node at the end that uses the output of the prim::FusedConcat node, which is a violation of the invariant that the output of a prim::FusedConcat node may not be used inside a fusion group.", "body": "Repro: the following code\r\n```\r\nimport torch\r\n@torch.jit.script\r\ndef fn(x, y, z):\r\n    x1 = x + y \r\n    y1 = x - y\r\n    w = torch.cat([x1, y1])\r\n    return w + z\r\n\r\nx = torch.randn(2, 2, dtype=torch.float, device='cpu')\r\ny = torch.randn(2, 2, dtype=torch.float, device='cpu')\r\nz = torch.randn(4, 2, dtype=torch.float, device='cpu')\r\nfn(x, y, z)\r\nfn.graph_for(x, y, z)\r\n```\r\nproduces the following optimized graph:\r\n```\r\n(gdb) cout *graph\r\ngraph(%x : Float(2, 2)\r\n      %y : Float(2, 2)\r\n      %z : Float(4, 2)) {\r\n  %3 : int = prim::Constant[value=1]()\r\n  %y1 : Float(2, 2) = aten::sub(%x, %y, %3)\r\n  %8 : int = prim::Constant[value=0]()\r\n  %14 : Float(4, 2) = prim::FusionGroup_0[device=-1](%z, %y1, %x, %y)\r\n  return (%14);\r\n}\r\nwith prim::FusionGroup_0 = graph(%1 : Float(4, 2)\r\n      %5 : Float(2, 2)\r\n      %7 : Float(2, 2)\r\n      %8 : Float(2, 2)) {\r\n  %11 : int = prim::Constant[value=1]()\r\n  %9 : int = prim::Constant[value=1]()\r\n  %x1 : Float(2, 2) = aten::add(%7, %8, %9)\r\n  %w : Float(4, 2) = prim::FusedConcat[dim=0](%x1, %5)\r\n  %2 : int = prim::Constant[value=1]()\r\n  %3 : Float(4, 2) = aten::add(%w, %1, %2)\r\n  return (%3);\r\n}\r\n```\r\n\r\nThe graph fuser ends up producing a graph with a prim::FusedConcat node as well as the \"w + z\" node at the end that _uses_ the output of the prim::FusedConcat node, which is a violation of the invariant that the output of a prim::FusedConcat node may not be used inside a fusion group.\r\n"}