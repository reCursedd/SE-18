{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/430204410", "html_url": "https://github.com/pytorch/pytorch/issues/10114#issuecomment-430204410", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/10114", "id": 430204410, "node_id": "MDEyOklzc3VlQ29tbWVudDQzMDIwNDQxMA==", "user": {"login": "goldsborough", "id": 6429851, "node_id": "MDQ6VXNlcjY0Mjk4NTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/6429851?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goldsborough", "html_url": "https://github.com/goldsborough", "followers_url": "https://api.github.com/users/goldsborough/followers", "following_url": "https://api.github.com/users/goldsborough/following{/other_user}", "gists_url": "https://api.github.com/users/goldsborough/gists{/gist_id}", "starred_url": "https://api.github.com/users/goldsborough/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goldsborough/subscriptions", "organizations_url": "https://api.github.com/users/goldsborough/orgs", "repos_url": "https://api.github.com/users/goldsborough/repos", "events_url": "https://api.github.com/users/goldsborough/events{/privacy}", "received_events_url": "https://api.github.com/users/goldsborough/received_events", "type": "User", "site_admin": false}, "created_at": "2018-10-16T11:38:33Z", "updated_at": "2018-10-16T11:38:33Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Blindly accepting <code>c++</code> would be incorrect, since <code>c++</code> is clang on macOS. The idea behind defaulting to c++, and then checking for <code>gcc</code>, is that in most cases <code>c++</code> is a symlink to <code>gcc</code>, therefore <code>c++ --version</code> would usually print gcc's version output and thus also include <code>gcc</code> somewhere inside. Unfortunately this varies wildly from platform to platform :/</p>\n<p>For example, my <code>c++ --version</code> prints:</p>\n<div class=\"highlight highlight-source-shell\"><pre>c++ (GCC) 4.8.5 20150623 (Red Hat 4.8.5-28)\nCopyright (C) 2015 Free Software Foundation, Inc.\nThis is free software<span class=\"pl-k\">;</span> see the <span class=\"pl-c1\">source</span> <span class=\"pl-k\">for</span> copying conditions.  There is NO\nwarranty<span class=\"pl-k\">;</span> not even <span class=\"pl-k\">for</span> MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</pre></div>", "body_text": "Blindly accepting c++ would be incorrect, since c++ is clang on macOS. The idea behind defaulting to c++, and then checking for gcc, is that in most cases c++ is a symlink to gcc, therefore c++ --version would usually print gcc's version output and thus also include gcc somewhere inside. Unfortunately this varies wildly from platform to platform :/\nFor example, my c++ --version prints:\nc++ (GCC) 4.8.5 20150623 (Red Hat 4.8.5-28)\nCopyright (C) 2015 Free Software Foundation, Inc.\nThis is free software; see the source for copying conditions.  There is NO\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.", "body": "Blindly accepting `c++` would be incorrect, since `c++` is clang on macOS. The idea behind defaulting to c++, and then checking for `gcc`, is that in most cases `c++` is a symlink to `gcc`, therefore `c++ --version` would usually print gcc's version output and thus also include `gcc` somewhere inside. Unfortunately this varies wildly from platform to platform :/ \r\n\r\nFor example, my `c++ --version` prints:\r\n\r\n```sh\r\nc++ (GCC) 4.8.5 20150623 (Red Hat 4.8.5-28)\r\nCopyright (C) 2015 Free Software Foundation, Inc.\r\nThis is free software; see the source for copying conditions.  There is NO\r\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\r\n```"}