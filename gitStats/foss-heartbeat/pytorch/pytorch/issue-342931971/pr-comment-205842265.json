{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/205842265", "pull_request_review_id": 141197689, "id": 205842265, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTg0MjI2NQ==", "diff_hunk": "@@ -23,170 +24,184 @@\n #include <vector>\n \n namespace at {\n-  /// ArrayRef - Represent a constant reference to an array (0 or more elements\n-  /// consecutively in memory), i.e. a start pointer and a length.  It allows\n-  /// various APIs to take consecutive elements easily and conveniently.\n-  ///\n-  /// This class does not own the underlying data, it is expected to be used in\n-  /// situations where the data resides in some other buffer, whose lifetime\n-  /// extends past that of the ArrayRef. For this reason, it is not in general\n-  /// safe to store an ArrayRef.\n-  ///\n-  /// This is intended to be trivially copyable, so it should be passed by\n-  /// value.\n-  template<typename T>\n-  class ArrayRef {\n-  public:\n-    typedef const T *iterator;\n-    typedef const T *const_iterator;\n-    typedef size_t size_type;\n-\n-    typedef std::reverse_iterator<iterator> reverse_iterator;\n-\n-  private:\n-    /// The start of the array, in an external buffer.\n-    const T *Data;\n-\n-    /// The number of elements.\n-    size_type Length;\n-\n-  public:\n-    /// @name Constructors\n-    /// @{\n-\n-    /// Construct an empty ArrayRef.\n-    /*implicit*/ ArrayRef() : Data(nullptr), Length(0) {}\n \n-    /// Construct an ArrayRef from a single element.\n-    /*implicit*/ ArrayRef(const T &OneElt)\n-      : Data(&OneElt), Length(1) {}\n-\n-    /// Construct an ArrayRef from a pointer and length.\n-    /*implicit*/ ArrayRef(const T *data, size_t length)\n-      : Data(data), Length(length) {}\n-\n-    /// Construct an ArrayRef from a range.\n-    ArrayRef(const T *begin, const T *end)\n+/// ArrayRef - Represent a constant reference to an array (0 or more elements\n+/// consecutively in memory), i.e. a start pointer and a length.  It allows\n+/// various APIs to take consecutive elements easily and conveniently.\n+///\n+/// This class does not own the underlying data, it is expected to be used in\n+/// situations where the data resides in some other buffer, whose lifetime\n+/// extends past that of the ArrayRef. For this reason, it is not in general\n+/// safe to store an ArrayRef.\n+///\n+/// This is intended to be trivially copyable, so it should be passed by\n+/// value.\n+template <typename T>\n+class ArrayRef final {\n+ public:\n+  using iterator = const T*;\n+  using const_iterator = const T*;\n+  using size_type = size_t;\n+\n+  using reverse_iterator = std::reverse_iterator<iterator>;\n+\n+ private:\n+  /// The start of the array, in an external buffer.\n+  const T* Data;\n+\n+  /// The number of elements.\n+  size_type Length;\n+\n+ public:\n+  /// @name Constructors\n+  /// @{\n+\n+  /// Construct an empty ArrayRef.\n+  // TODO Make this explicit\n+  constexpr ArrayRef() : Data(nullptr), Length(0) {}\n+\n+  /// Construct an ArrayRef from a single element.\n+  constexpr ArrayRef(const T& OneElt) : Data(&OneElt), Length(1) {}\n+\n+  /// Construct an ArrayRef from a pointer and length.\n+  constexpr ArrayRef(const T* data_, size_t length)\n+      : Data(data_), Length(length) {}\n+\n+  /// Construct an ArrayRef from a range.\n+  constexpr ArrayRef(const T* begin, const T* end)\n       : Data(begin), Length(end - begin) {}\n \n-    /// Construct an ArrayRef from a SmallVector. This is templated in order to\n-    /// avoid instantiating SmallVectorTemplateCommon<T> whenever we\n-    /// copy-construct an ArrayRef.\n-    template<typename U>\n-    /*implicit*/ ArrayRef(const SmallVectorTemplateCommon<T, U> &Vec)\n-      : Data(Vec.data()), Length(Vec.size()) {\n-    }\n-\n-    /// Construct an ArrayRef from a std::vector.\n-    template<typename A>\n-    /*implicit*/ ArrayRef(const std::vector<T, A> &Vec)\n+  /// Construct an ArrayRef from a SmallVector. This is templated in order to\n+  /// avoid instantiating SmallVectorTemplateCommon<T> whenever we\n+  /// copy-construct an ArrayRef.\n+  template <typename U>\n+  /*implicit*/ ArrayRef(const SmallVectorTemplateCommon<T, U>& Vec)\n+      : Data(Vec.data()), Length(Vec.size()) {}\n+\n+  /// Construct an ArrayRef from a std::vector.\n+  template <typename A>\n+  /*implicit*/ ArrayRef(const std::vector<T, A>& Vec)\n       : Data(Vec.data()), Length(Vec.size()) {}\n \n-    /// Construct an ArrayRef from a std::array\n-    template <size_t N>\n-    /*implicit*/ constexpr ArrayRef(const std::array<T, N> &Arr)\n-        : Data(Arr.data()), Length(N) {}\n-\n-    /// Construct an ArrayRef from a C array.\n-    template <size_t N>\n-    /*implicit*/ constexpr ArrayRef(const T (&Arr)[N]) : Data(Arr), Length(N) {}\n-\n-    /// Construct an ArrayRef from a std::initializer_list.\n-    /*implicit*/ ArrayRef(const std::initializer_list<T> &Vec)\n-    : Data(Vec.begin() == Vec.end() ? (T*)nullptr : Vec.begin()),\n-      Length(Vec.size()) {}\n-\n-    /// @}\n-    /// @name Simple Operations\n-    /// @{\n-\n-    const_iterator begin() const { return Data; }\n-    const_iterator end() const { return Data + Length; }\n-\n-    reverse_iterator rbegin() const { return reverse_iterator(end()); }\n-    reverse_iterator rend() const { return reverse_iterator(begin()); }\n-\n-    /// empty - Check if the array is empty.\n-    bool empty() const { return Length == 0; }\n-\n-    const T *data() const { return Data; }\n-\n-    /// size - Get the array size.\n-    size_t size() const { return Length; }\n-\n-    /// front - Get the first element.\n-    const T &front() const {\n-      AT_CHECK(!empty(), \"ArrayRef: attempted to access front() of empty list\");\n-      return Data[0];\n-    }\n-\n-    /// back - Get the last element.\n-    const T &back() const {\n-      AT_CHECK(!empty(), \"ArrayRef: attempted to access back() of empty list\");\n-      return Data[Length-1];\n-    }\n-\n-    /// equals - Check for element-wise equality.\n-    bool equals(ArrayRef RHS) const {\n-      if (Length != RHS.Length)\n-        return false;\n-      return std::equal(begin(), end(), RHS.begin());\n-    }\n-\n-    /// slice(n, m) - Chop off the first N elements of the array, and keep M\n-    /// elements in the array.\n-    ArrayRef<T> slice(size_t N, size_t M) const {\n-      AT_CHECK(N+M <= size(), \"ArrayRef: invalid slice, \", N, \" + \", M, \" is not <= \", size());\n-      return ArrayRef<T>(data()+N, M);\n-    }\n-\n-    /// slice(n) - Chop off the first N elements of the array.\n-    ArrayRef<T> slice(size_t N) const { return slice(N, size() - N); }\n-\n-    /// @}\n-    /// @name Operator Overloads\n-    /// @{\n-    const T &operator[](size_t Index) const {\n-      return Data[Index];\n-    }\n-\n-    /// Vector compatibility\n-    const T &at(size_t Index) const {\n-      AT_CHECK(Index < Length, \"ArrayRef: invalid index \", Index, \" for length \", Length);\n-      return Data[Index];\n-    }\n-\n-    /// Disallow accidental assignment from a temporary.\n-    ///\n-    /// The declaration here is extra complicated so that \"arrayRef = {}\"\n-    /// continues to select the move assignment operator.\n-    template <typename U>\n-    typename std::enable_if<std::is_same<U, T>::value, ArrayRef<T>>::type &\n-    operator=(U &&Temporary) = delete;\n-\n-    /// Disallow accidental assignment from a temporary.\n-    ///\n-    /// The declaration here is extra complicated so that \"arrayRef = {}\"\n-    /// continues to select the move assignment operator.\n-    template <typename U>\n-    typename std::enable_if<std::is_same<U, T>::value, ArrayRef<T>>::type &\n-    operator=(std::initializer_list<U>) = delete;\n-\n-    /// @}\n-    /// @name Expensive Operations\n-    /// @{\n-    std::vector<T> vec() const {\n-      return std::vector<T>(Data, Data+Length);\n-    }\n-\n-    /// @}\n-    /// @name Conversion operators\n-    /// @{\n-    operator std::vector<T>() const {\n-      return std::vector<T>(Data, Data+Length);\n-    }\n-\n-    /// @}\n-  };\n-\n-} // end namespace at\n+  /// Construct an ArrayRef from a std::array\n+  template <size_t N>\n+  /*implicit*/ constexpr ArrayRef(const std::array<T, N>& Arr)\n+      : Data(Arr.data()), Length(N) {}\n+\n+  /// Construct an ArrayRef from a C array.\n+  template <size_t N>\n+  /*implicit*/ constexpr ArrayRef(const T (&Arr)[N]) : Data(Arr), Length(N) {}\n+\n+  /// Construct an ArrayRef from a std::initializer_list.\n+  /*implicit*/ constexpr ArrayRef(const std::initializer_list<T>& Vec)\n+      : Data(Vec.begin() == Vec.end() ? static_cast<T*>(nullptr) : Vec.begin()),\n+        Length(Vec.size()) {}\n+\n+  /// @}\n+  /// @name Simple Operations\n+  /// @{\n+\n+  constexpr iterator begin() const {\n+    return Data;\n+  }\n+  constexpr iterator end() const {\n+    return Data + Length;\n+  }\n+\n+  constexpr reverse_iterator rbegin() const {\n+    return reverse_iterator(end());\n+  }\n+  constexpr reverse_iterator rend() const {\n+    return reverse_iterator(begin());\n+  }\n+\n+  /// empty - Check if the array is empty.\n+  constexpr bool empty() const {\n+    return Length == 0;\n+  }\n+\n+  constexpr const T* data() const {\n+    return Data;\n+  }\n+\n+  /// size - Get the array size.\n+  constexpr size_t size() const {\n+    return Length;\n+  }\n+\n+  /// front - Get the first element.\n+  C10_CPP14_CONSTEXPR const T& front() const {\n+    AT_CHECK(!empty(), \"Empty list!\");\n+    return Data[0];\n+  }\n+\n+  /// back - Get the last element.\n+  C10_CPP14_CONSTEXPR const T& back() const {\n+    AT_CHECK(!empty(), \"Empty list!\");\n+    return Data[Length - 1];\n+  }\n+\n+  /// equals - Check for element-wise equality.\n+  constexpr bool equals(ArrayRef RHS) const {\n+    return Length == RHS.Length && std::equal(begin(), end(), RHS.begin());\n+  }\n+\n+  /// slice(n, m) - Chop off the first N elements of the array, and keep M\n+  /// elements in the array.\n+  C10_CPP14_CONSTEXPR ArrayRef<T> slice(size_t N, size_t M) const {\n+    AT_CHECK(N + M <= size(), \"N = \", N, \"; M = \", M, \"; size = \", size());", "path": "aten/src/ATen/ArrayRef.h", "position": null, "original_position": 299, "commit_id": "dc0eb6f288921536b906e8847196bc7bc51e8a4c", "original_commit_id": "25293b38823e1827a0133e94c5f9cf19dc0fa511", "user": {"login": "smessmer", "id": 2373925, "node_id": "MDQ6VXNlcjIzNzM5MjU=", "avatar_url": "https://avatars3.githubusercontent.com/u/2373925?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smessmer", "html_url": "https://github.com/smessmer", "followers_url": "https://api.github.com/users/smessmer/followers", "following_url": "https://api.github.com/users/smessmer/following{/other_user}", "gists_url": "https://api.github.com/users/smessmer/gists{/gist_id}", "starred_url": "https://api.github.com/users/smessmer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smessmer/subscriptions", "organizations_url": "https://api.github.com/users/smessmer/orgs", "repos_url": "https://api.github.com/users/smessmer/repos", "events_url": "https://api.github.com/users/smessmer/events{/privacy}", "received_events_url": "https://api.github.com/users/smessmer/received_events", "type": "User", "site_admin": false}, "body": "fixed. tbh, I have no idea why and how this was changed.", "created_at": "2018-07-27T17:16:41Z", "updated_at": "2018-11-23T15:48:19Z", "html_url": "https://github.com/pytorch/pytorch/pull/9610#discussion_r205842265", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/9610", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/205842265"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/9610#discussion_r205842265"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/9610"}}, "body_html": "<p>fixed. tbh, I have no idea why and how this was changed.</p>", "body_text": "fixed. tbh, I have no idea why and how this was changed.", "in_reply_to_id": 205667702}