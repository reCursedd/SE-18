{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/407125128", "html_url": "https://github.com/pytorch/pytorch/pull/9610#issuecomment-407125128", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/9610", "id": 407125128, "node_id": "MDEyOklzc3VlQ29tbWVudDQwNzEyNTEyOA==", "user": {"login": "smessmer", "id": 2373925, "node_id": "MDQ6VXNlcjIzNzM5MjU=", "avatar_url": "https://avatars3.githubusercontent.com/u/2373925?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smessmer", "html_url": "https://github.com/smessmer", "followers_url": "https://api.github.com/users/smessmer/followers", "following_url": "https://api.github.com/users/smessmer/following{/other_user}", "gists_url": "https://api.github.com/users/smessmer/gists{/gist_id}", "starred_url": "https://api.github.com/users/smessmer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smessmer/subscriptions", "organizations_url": "https://api.github.com/users/smessmer/orgs", "repos_url": "https://api.github.com/users/smessmer/repos", "events_url": "https://api.github.com/users/smessmer/events{/privacy}", "received_events_url": "https://api.github.com/users/smessmer/received_events", "type": "User", "site_admin": false}, "created_at": "2018-07-23T16:49:23Z", "updated_at": "2018-07-23T16:50:38Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Sorry, I probably formulated that a bit misleadingly. It doesn't improve perf for existing use cases, but it allows ArrayRef to be used in constexpr environments in future (for example for c10).</p>\n<p>Constexpr per se doesn't improve perf. Some expressions can be evaluated at compile time and some cannot. For expressions that can be evaluated at compile time, many compilers will do so, even if you don't add the \"constexpr\" keyword. What the \"constexpr\" keyword does is it asserts that the expression can be evaluated at compile time. So it makes sure that the stuff you want to be run at compile time actually can be done so. And it needs to be added to functions or methods if you want to call them from a constexpr environment (i.e. from another function or method that is constexpr).</p>", "body_text": "Sorry, I probably formulated that a bit misleadingly. It doesn't improve perf for existing use cases, but it allows ArrayRef to be used in constexpr environments in future (for example for c10).\nConstexpr per se doesn't improve perf. Some expressions can be evaluated at compile time and some cannot. For expressions that can be evaluated at compile time, many compilers will do so, even if you don't add the \"constexpr\" keyword. What the \"constexpr\" keyword does is it asserts that the expression can be evaluated at compile time. So it makes sure that the stuff you want to be run at compile time actually can be done so. And it needs to be added to functions or methods if you want to call them from a constexpr environment (i.e. from another function or method that is constexpr).", "body": "Sorry, I probably formulated that a bit misleadingly. It doesn't improve perf for existing use cases, but it allows ArrayRef to be used in constexpr environments in future (for example for c10).\r\n\r\nConstexpr per se doesn't improve perf. Some expressions can be evaluated at compile time and some cannot. For expressions that can be evaluated at compile time, many compilers will do so, even if you don't add the \"constexpr\" keyword. What the \"constexpr\" keyword does is it asserts that the expression can be evaluated at compile time. So it makes sure that the stuff you want to be run at compile time actually can be done so. And it needs to be added to functions or methods if you want to call them from a constexpr environment (i.e. from another function or method that is constexpr)."}