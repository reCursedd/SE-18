{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/205841562", "pull_request_review_id": 141196857, "id": 205841562, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTg0MTU2Mg==", "diff_hunk": "@@ -23,170 +24,184 @@\n #include <vector>\n \n namespace at {\n-  /// ArrayRef - Represent a constant reference to an array (0 or more elements\n-  /// consecutively in memory), i.e. a start pointer and a length.  It allows\n-  /// various APIs to take consecutive elements easily and conveniently.\n-  ///\n-  /// This class does not own the underlying data, it is expected to be used in\n-  /// situations where the data resides in some other buffer, whose lifetime\n-  /// extends past that of the ArrayRef. For this reason, it is not in general\n-  /// safe to store an ArrayRef.\n-  ///\n-  /// This is intended to be trivially copyable, so it should be passed by\n-  /// value.\n-  template<typename T>\n-  class ArrayRef {\n-  public:\n-    typedef const T *iterator;\n-    typedef const T *const_iterator;\n-    typedef size_t size_type;\n-\n-    typedef std::reverse_iterator<iterator> reverse_iterator;\n-\n-  private:\n-    /// The start of the array, in an external buffer.\n-    const T *Data;\n-\n-    /// The number of elements.\n-    size_type Length;\n-\n-  public:\n-    /// @name Constructors\n-    /// @{\n-\n-    /// Construct an empty ArrayRef.\n-    /*implicit*/ ArrayRef() : Data(nullptr), Length(0) {}\n \n-    /// Construct an ArrayRef from a single element.\n-    /*implicit*/ ArrayRef(const T &OneElt)\n-      : Data(&OneElt), Length(1) {}\n-\n-    /// Construct an ArrayRef from a pointer and length.\n-    /*implicit*/ ArrayRef(const T *data, size_t length)\n-      : Data(data), Length(length) {}\n-\n-    /// Construct an ArrayRef from a range.\n-    ArrayRef(const T *begin, const T *end)\n+/// ArrayRef - Represent a constant reference to an array (0 or more elements\n+/// consecutively in memory), i.e. a start pointer and a length.  It allows\n+/// various APIs to take consecutive elements easily and conveniently.\n+///\n+/// This class does not own the underlying data, it is expected to be used in\n+/// situations where the data resides in some other buffer, whose lifetime\n+/// extends past that of the ArrayRef. For this reason, it is not in general\n+/// safe to store an ArrayRef.\n+///\n+/// This is intended to be trivially copyable, so it should be passed by\n+/// value.\n+template <typename T>\n+class ArrayRef final {\n+ public:\n+  using iterator = const T*;\n+  using const_iterator = const T*;\n+  using size_type = size_t;\n+\n+  using reverse_iterator = std::reverse_iterator<iterator>;\n+\n+ private:\n+  /// The start of the array, in an external buffer.\n+  const T* Data;\n+\n+  /// The number of elements.\n+  size_type Length;\n+\n+ public:\n+  /// @name Constructors\n+  /// @{\n+\n+  /// Construct an empty ArrayRef.\n+  // TODO Make this explicit\n+  constexpr ArrayRef() : Data(nullptr), Length(0) {}", "path": "aten/src/ATen/ArrayRef.h", "position": null, "original_position": 89, "commit_id": "dc0eb6f288921536b906e8847196bc7bc51e8a4c", "original_commit_id": "25293b38823e1827a0133e94c5f9cf19dc0fa511", "user": {"login": "smessmer", "id": 2373925, "node_id": "MDQ6VXNlcjIzNzM5MjU=", "avatar_url": "https://avatars3.githubusercontent.com/u/2373925?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smessmer", "html_url": "https://github.com/smessmer", "followers_url": "https://api.github.com/users/smessmer/followers", "following_url": "https://api.github.com/users/smessmer/following{/other_user}", "gists_url": "https://api.github.com/users/smessmer/gists{/gist_id}", "starred_url": "https://api.github.com/users/smessmer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smessmer/subscriptions", "organizations_url": "https://api.github.com/users/smessmer/orgs", "repos_url": "https://api.github.com/users/smessmer/repos", "events_url": "https://api.github.com/users/smessmer/events{/privacy}", "received_events_url": "https://api.github.com/users/smessmer/received_events", "type": "User", "site_admin": false}, "body": "About the `implicit` comments, explicit/implicit only matters for one-argument constructors. I could leave the `implicit` comment at the `OneElt` constructor, but that's actually the one with the TODO to make explicit, that's why I removed the comment. The other one-argument constructors still have the `implicit` comment.", "created_at": "2018-07-27T17:14:30Z", "updated_at": "2018-11-23T15:48:19Z", "html_url": "https://github.com/pytorch/pytorch/pull/9610#discussion_r205841562", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/9610", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/205841562"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/9610#discussion_r205841562"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/9610"}}, "body_html": "<p>About the <code>implicit</code> comments, explicit/implicit only matters for one-argument constructors. I could leave the <code>implicit</code> comment at the <code>OneElt</code> constructor, but that's actually the one with the TODO to make explicit, that's why I removed the comment. The other one-argument constructors still have the <code>implicit</code> comment.</p>", "body_text": "About the implicit comments, explicit/implicit only matters for one-argument constructors. I could leave the implicit comment at the OneElt constructor, but that's actually the one with the TODO to make explicit, that's why I removed the comment. The other one-argument constructors still have the implicit comment.", "in_reply_to_id": 205667367}