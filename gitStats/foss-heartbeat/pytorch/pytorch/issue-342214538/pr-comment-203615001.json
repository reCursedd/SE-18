{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/203615001", "pull_request_review_id": 138537924, "id": 203615001, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzYxNTAwMQ==", "diff_hunk": "@@ -1,23 +1,219 @@\n #include \"channel_shuffle_op.h\"\n \n+#include <array>\n+#include <string>\n+#include <vector>\n+\n+#ifdef CAFFE2_USE_MKL\n+#include <mkl.h>\n+#endif // CAFFE2_USE_MKL\n+\n+#include \"caffe2/utils/eigen_utils.h\"\n+#include \"caffe2/utils/math.h\"\n+\n namespace caffe2 {\n \n-class GetChannelShuffleGradient : public GradientMakerBase {\n-  using GradientMakerBase::GradientMakerBase;\n-  vector<OperatorDef> GetGradientDefs() override {\n-    return SingleGradientDef(\n-        def_.type() + \"Gradient\",\n-        \"\",\n-        vector<string>{GO(0)},\n-        vector<string>{GI(0)});\n+namespace {\n+\n+template <typename T>\n+void RunChannelShuffleNCHW(\n+    const int N,\n+    const int G,\n+    const int K,\n+    const int HxW,\n+    const T* X,\n+    T* Y) {\n+  const int stride = G * K * HxW;\n+  for (int i = 0; i < N; ++i) {\n+    if (G < K) {\n+      EigenMatrixMap<T> Y_mat(Y, G * HxW, K);\n+      for (int j = 0; j < G; ++j) {\n+        Y_mat.block(j * HxW, 0, HxW, K) =\n+            ConstEigenMatrixMap<T>(X + j * K * HxW, HxW, K);\n+      }\n+    } else {\n+      ConstEigenMatrixMap<T> X_mat(X, K * HxW, G);\n+      for (int j = 0; j < K; ++j) {\n+        EigenMatrixMap<float>(Y + j * G * HxW, HxW, G) =\n+            X_mat.block(j * HxW, 0, HxW, G);\n+      }\n+    }\n+    X += stride;\n+    Y += stride;\n   }\n-};\n+}\n+\n+template <typename T>\n+void RunChannelShuffleNHWC(\n+    const int N,\n+    const int G,\n+    const int K,\n+    const int HxW,\n+    const T* X,\n+    T* Y,\n+    CPUContext* context) {\n+  const std::array<int, 2> dims = {G, K};\n+  const std::array<int, 2> axes = {1, 0};\n+  const int M = N * HxW;\n+  const int C = G * K;\n+  for (int i = 0; i < M; ++i) {\n+    math::Transpose<T, CPUContext>(2, dims.data(), axes.data(), X, Y, context);\n+    X += C;\n+    Y += C;\n+  }\n+}\n+\n+#ifdef CAFFE2_USE_ACCELERATE\n+\n+template <>\n+void RunChannelShuffleNCHW<float>(\n+    const int N,\n+    const int G,\n+    const int K,\n+    const int HxW,\n+    const float* X,\n+    float* Y) {\n+  const int stride = G * K * HxW;\n+  for (int i = 0; i < N; ++i) {\n+    if (G < K) {\n+      for (int j = 0; j < G; ++j) {\n+        vDSP_mmov(X + j * K * HxW, Y + j * HxW, HxW, K, HxW, G * HxW);\n+      }\n+    } else {\n+      for (int j = 0; j < K; ++j) {\n+        vDSP_mmov(X + j * HxW, Y + j * G * HxW, HxW, G, k * HxW, HxW);", "path": "caffe2/operators/channel_shuffle_op.cc", "position": null, "original_position": 93, "commit_id": "ea995d973413f4ef0ee9226c998d2e9dc0728eb4", "original_commit_id": "b27c8dfeeb86264b3d9253cb3071e9d94f191253", "user": {"login": "houseroad", "id": 30275821, "node_id": "MDQ6VXNlcjMwMjc1ODIx", "avatar_url": "https://avatars0.githubusercontent.com/u/30275821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/houseroad", "html_url": "https://github.com/houseroad", "followers_url": "https://api.github.com/users/houseroad/followers", "following_url": "https://api.github.com/users/houseroad/following{/other_user}", "gists_url": "https://api.github.com/users/houseroad/gists{/gist_id}", "starred_url": "https://api.github.com/users/houseroad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/houseroad/subscriptions", "organizations_url": "https://api.github.com/users/houseroad/orgs", "repos_url": "https://api.github.com/users/houseroad/repos", "events_url": "https://api.github.com/users/houseroad/events{/privacy}", "received_events_url": "https://api.github.com/users/houseroad/received_events", "type": "User", "site_admin": false}, "body": "typo: k ==> K", "created_at": "2018-07-19T06:35:49Z", "updated_at": "2018-11-23T15:47:40Z", "html_url": "https://github.com/pytorch/pytorch/pull/9525#discussion_r203615001", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/9525", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/203615001"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/9525#discussion_r203615001"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/9525"}}, "body_html": "<p>typo: k ==&gt; K</p>", "body_text": "typo: k ==> K"}