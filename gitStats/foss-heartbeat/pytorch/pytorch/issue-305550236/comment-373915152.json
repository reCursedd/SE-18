{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/373915152", "html_url": "https://github.com/pytorch/pytorch/issues/5810#issuecomment-373915152", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/5810", "id": 373915152, "node_id": "MDEyOklzc3VlQ29tbWVudDM3MzkxNTE1Mg==", "user": {"login": "niwtr", "id": 10781892, "node_id": "MDQ6VXNlcjEwNzgxODky", "avatar_url": "https://avatars3.githubusercontent.com/u/10781892?v=4", "gravatar_id": "", "url": "https://api.github.com/users/niwtr", "html_url": "https://github.com/niwtr", "followers_url": "https://api.github.com/users/niwtr/followers", "following_url": "https://api.github.com/users/niwtr/following{/other_user}", "gists_url": "https://api.github.com/users/niwtr/gists{/gist_id}", "starred_url": "https://api.github.com/users/niwtr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/niwtr/subscriptions", "organizations_url": "https://api.github.com/users/niwtr/orgs", "repos_url": "https://api.github.com/users/niwtr/repos", "events_url": "https://api.github.com/users/niwtr/events{/privacy}", "received_events_url": "https://api.github.com/users/niwtr/received_events", "type": "User", "site_admin": false}, "created_at": "2018-03-17T12:05:25Z", "updated_at": "2018-03-17T12:05:25Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=648532\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/fritzo\">@fritzo</a> I do not quite understand, could you elaborate on it? Thanks!<br>\nMy ultimate goal is to get a batch of multinomial samples that was drawn from a batch of probabilities, and the <code>total_count</code> of them are different. Say:<br>\n<code>P</code> is a 2D tensor of shape [32, 128] with batch size 32 and probability size 128.<br>\n<code>D</code> is a 1D tensor of shape [32] and each element denotes the <code>total_count</code> of that experiment of sampling.<br>\nUsing current <code>torch.distributions.multinomial.Multinomial</code> I could implement this by:</p>\n<pre><code>samples = []\nfor i in xrange(P.shape[0]):\n    m = Multinomial(D[i].tolist(), P[i])\n    samples.append(m.sample().unsqueeze(0))\nsamples = torch.cat(samples, 0)\n</code></pre>\n<p>But this is quite slow that becomes the bottleneck of speed (because of the FOR loop, I bet). I'm looking for a elegant solution that eliminates the FOR loop.<br>\nThanks again for your advice.</p>", "body_text": "@fritzo I do not quite understand, could you elaborate on it? Thanks!\nMy ultimate goal is to get a batch of multinomial samples that was drawn from a batch of probabilities, and the total_count of them are different. Say:\nP is a 2D tensor of shape [32, 128] with batch size 32 and probability size 128.\nD is a 1D tensor of shape [32] and each element denotes the total_count of that experiment of sampling.\nUsing current torch.distributions.multinomial.Multinomial I could implement this by:\nsamples = []\nfor i in xrange(P.shape[0]):\n    m = Multinomial(D[i].tolist(), P[i])\n    samples.append(m.sample().unsqueeze(0))\nsamples = torch.cat(samples, 0)\n\nBut this is quite slow that becomes the bottleneck of speed (because of the FOR loop, I bet). I'm looking for a elegant solution that eliminates the FOR loop.\nThanks again for your advice.", "body": "@fritzo I do not quite understand, could you elaborate on it? Thanks!\r\nMy ultimate goal is to get a batch of multinomial samples that was drawn from a batch of probabilities, and the `total_count` of them are different. Say:\r\n`P` is a 2D tensor of shape [32, 128] with batch size 32 and probability size 128.\r\n`D` is a 1D tensor of shape [32] and each element denotes the `total_count` of that experiment of sampling. \r\nUsing current `torch.distributions.multinomial.Multinomial` I could implement this by: \r\n```\r\nsamples = []\r\nfor i in xrange(P.shape[0]):\r\n    m = Multinomial(D[i].tolist(), P[i])\r\n    samples.append(m.sample().unsqueeze(0))\r\nsamples = torch.cat(samples, 0)\r\n```\r\nBut this is quite slow that becomes the bottleneck of speed (because of the FOR loop, I bet). I'm looking for a elegant solution that eliminates the FOR loop. \r\nThanks again for your advice. "}