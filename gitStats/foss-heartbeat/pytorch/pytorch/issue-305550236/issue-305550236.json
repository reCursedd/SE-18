{"url": "https://api.github.com/repos/pytorch/pytorch/issues/5810", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/5810/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/5810/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/5810/events", "html_url": "https://github.com/pytorch/pytorch/issues/5810", "id": 305550236, "node_id": "MDU6SXNzdWUzMDU1NTAyMzY=", "number": 5810, "title": "[feature request] numpy-alike distribution sampling", "user": {"login": "niwtr", "id": 10781892, "node_id": "MDQ6VXNlcjEwNzgxODky", "avatar_url": "https://avatars3.githubusercontent.com/u/10781892?v=4", "gravatar_id": "", "url": "https://api.github.com/users/niwtr", "html_url": "https://github.com/niwtr", "followers_url": "https://api.github.com/users/niwtr/followers", "following_url": "https://api.github.com/users/niwtr/following{/other_user}", "gists_url": "https://api.github.com/users/niwtr/gists{/gist_id}", "starred_url": "https://api.github.com/users/niwtr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/niwtr/subscriptions", "organizations_url": "https://api.github.com/users/niwtr/orgs", "repos_url": "https://api.github.com/users/niwtr/repos", "events_url": "https://api.github.com/users/niwtr/events{/privacy}", "received_events_url": "https://api.github.com/users/niwtr/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2018-03-15T13:22:18Z", "updated_at": "2018-03-20T11:32:05Z", "closed_at": "2018-03-20T11:32:05Z", "author_association": "NONE", "body_html": "<p>I'm working on a model that does M-step sampling from multinomial distribution. In numpy we use<br>\n<code>numpy.random.multinomial(n, pvals, size=None)</code> whose 1st param is experiment time and 2nd param is probability distribution, which means if we'd like to sample M times it would create an array which sums up to M, for example, sample 20 times on a dice:</p>\n<pre><code>&gt;&gt;&gt;np.random.multinomial(20, [1/6.]*6, size=1)\narray([[4, 1, 7, 5, 2, 1]])\n</code></pre>\n<p>This can be seen as a histogram on 20 samples.<br>\nWhile using pytorch we seems not to have this feature.  <code>torch.multinomial()</code> only samples one at a time so we have to write FOR loop manually.<br>\nThis feature's important to me, I don't know it would help anyone else or not.</p>", "body_text": "I'm working on a model that does M-step sampling from multinomial distribution. In numpy we use\nnumpy.random.multinomial(n, pvals, size=None) whose 1st param is experiment time and 2nd param is probability distribution, which means if we'd like to sample M times it would create an array which sums up to M, for example, sample 20 times on a dice:\n>>>np.random.multinomial(20, [1/6.]*6, size=1)\narray([[4, 1, 7, 5, 2, 1]])\n\nThis can be seen as a histogram on 20 samples.\nWhile using pytorch we seems not to have this feature.  torch.multinomial() only samples one at a time so we have to write FOR loop manually.\nThis feature's important to me, I don't know it would help anyone else or not.", "body": "I'm working on a model that does M-step sampling from multinomial distribution. In numpy we use \r\n`numpy.random.multinomial(n, pvals, size=None)` whose 1st param is experiment time and 2nd param is probability distribution, which means if we'd like to sample M times it would create an array which sums up to M, for example, sample 20 times on a dice:\r\n```\r\n>>>np.random.multinomial(20, [1/6.]*6, size=1)\r\narray([[4, 1, 7, 5, 2, 1]])\r\n```\r\nThis can be seen as a histogram on 20 samples.\r\nWhile using pytorch we seems not to have this feature.  `torch.multinomial()` only samples one at a time so we have to write FOR loop manually. \r\nThis feature's important to me, I don't know it would help anyone else or not. "}