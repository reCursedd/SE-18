{"url": "https://api.github.com/repos/pytorch/pytorch/issues/13093", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/13093/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/13093/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/13093/events", "html_url": "https://github.com/pytorch/pytorch/pull/13093", "id": 373721523, "node_id": "MDExOlB1bGxSZXF1ZXN0MjI1NTg1NTY2", "number": 13093, "title": "Bind inplace and _out variants into JIT", "user": {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 679953983, "node_id": "MDU6TGFiZWw2Nzk5NTM5ODM=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/jit", "name": "jit", "color": "c5def5", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "suo", "id": 1617424, "node_id": "MDQ6VXNlcjE2MTc0MjQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/1617424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/suo", "html_url": "https://github.com/suo", "followers_url": "https://api.github.com/users/suo/followers", "following_url": "https://api.github.com/users/suo/following{/other_user}", "gists_url": "https://api.github.com/users/suo/gists{/gist_id}", "starred_url": "https://api.github.com/users/suo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/suo/subscriptions", "organizations_url": "https://api.github.com/users/suo/orgs", "repos_url": "https://api.github.com/users/suo/repos", "events_url": "https://api.github.com/users/suo/events{/privacy}", "received_events_url": "https://api.github.com/users/suo/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "suo", "id": 1617424, "node_id": "MDQ6VXNlcjE2MTc0MjQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/1617424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/suo", "html_url": "https://github.com/suo", "followers_url": "https://api.github.com/users/suo/followers", "following_url": "https://api.github.com/users/suo/following{/other_user}", "gists_url": "https://api.github.com/users/suo/gists{/gist_id}", "starred_url": "https://api.github.com/users/suo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/suo/subscriptions", "organizations_url": "https://api.github.com/users/suo/orgs", "repos_url": "https://api.github.com/users/suo/repos", "events_url": "https://api.github.com/users/suo/events{/privacy}", "received_events_url": "https://api.github.com/users/suo/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2018-10-24T23:58:04Z", "updated_at": "2018-11-23T15:53:38Z", "closed_at": "2018-10-26T17:38:43Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/13093", "html_url": "https://github.com/pytorch/pytorch/pull/13093", "diff_url": "https://github.com/pytorch/pytorch/pull/13093.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/13093.patch"}, "body_html": "<p>This commit is a minimial initial pass at adding inplace and _out variants to the JIT.<br>\nIt changes gen_jit_dispatch.py to add bindings for these operators, and it also<br>\nsupplements the FunctionSchema with alias information for these operators and for<br>\nviewing operators.</p>\n<p>Tests are very minimal and will need to be improved in future commits.</p>\n<p>Notes:</p>\n<ul>\n<li>Custom operator tests needed to be changed since _out variants add overloads, which<br>\nthe custom operator pipeline does not handle when called from python. This commit<br>\nregisters special test ops in the _test namespace for this purpose.</li>\n<li>Extends the schema parser to parse alias annotations more robustly.</li>\n<li>Extends FunctionSchema with <code>writes()</code> a set of alias set names that the op will write to,<br>\nand <code>annotatedType()</code> which will return AnnotatedType objects which contain the alias_set<br>\ninformation that was parsed from the schema.</li>\n<li>Disables all optimizations in graph executor when a mutable operator is found. This<br>\nis something that will be improved in the future but is necessary for correctness now.</li>\n<li>Adds annotate_ops to gen_jit_dispatch which adds aliasing information to all of the<br>\naten ops.</li>\n<li>Adds AnnotatedType to the type hierarchy which is used to mark List and Tensor types<br>\nwith their alias_set. These types only appear in schema when you call annotatedType<br>\nand are erased from types in normal use.</li>\n<li>Extends jit::Type with .containedTypes() and .withContained(new_types). The first returns all types contained<br>\nwithin the type (e.g. T for T[], or {T,L} for a tuple (T, L)). The second constructs a new<br>\nversion of the same type, replacing the contained types with new_types. This simplifies<br>\na lot of logic for recursively cleaning up types.</li>\n<li>Refactor List[T] into a common part that is shared with Annotated[T] and can be shared<br>\nwith Optional[T] and Future[T] when they are merged.</li>\n</ul>", "body_text": "This commit is a minimial initial pass at adding inplace and _out variants to the JIT.\nIt changes gen_jit_dispatch.py to add bindings for these operators, and it also\nsupplements the FunctionSchema with alias information for these operators and for\nviewing operators.\nTests are very minimal and will need to be improved in future commits.\nNotes:\n\nCustom operator tests needed to be changed since _out variants add overloads, which\nthe custom operator pipeline does not handle when called from python. This commit\nregisters special test ops in the _test namespace for this purpose.\nExtends the schema parser to parse alias annotations more robustly.\nExtends FunctionSchema with writes() a set of alias set names that the op will write to,\nand annotatedType() which will return AnnotatedType objects which contain the alias_set\ninformation that was parsed from the schema.\nDisables all optimizations in graph executor when a mutable operator is found. This\nis something that will be improved in the future but is necessary for correctness now.\nAdds annotate_ops to gen_jit_dispatch which adds aliasing information to all of the\naten ops.\nAdds AnnotatedType to the type hierarchy which is used to mark List and Tensor types\nwith their alias_set. These types only appear in schema when you call annotatedType\nand are erased from types in normal use.\nExtends jit::Type with .containedTypes() and .withContained(new_types). The first returns all types contained\nwithin the type (e.g. T for T[], or {T,L} for a tuple (T, L)). The second constructs a new\nversion of the same type, replacing the contained types with new_types. This simplifies\na lot of logic for recursively cleaning up types.\nRefactor List[T] into a common part that is shared with Annotated[T] and can be shared\nwith Optional[T] and Future[T] when they are merged.", "body": "This commit is a minimial initial pass at adding inplace and _out variants to the JIT.\r\nIt changes gen_jit_dispatch.py to add bindings for these operators, and it also\r\nsupplements the FunctionSchema with alias information for these operators and for\r\nviewing operators.\r\n\r\nTests are very minimal and will need to be improved in future commits.\r\n\r\nNotes:\r\n\r\n* Custom operator tests needed to be changed since _out variants add overloads, which\r\n  the custom operator pipeline does not handle when called from python. This commit\r\n  registers special test ops in the _test namespace for this purpose.\r\n* Extends the schema parser to parse alias annotations more robustly.\r\n* Extends FunctionSchema with `writes()` a set of alias set names that the op will write to,\r\n  and `annotatedType()` which will return AnnotatedType objects which contain the alias_set\r\n  information that was parsed from the schema.\r\n* Disables all optimizations in graph executor when a mutable operator is found. This\r\n  is something that will be improved in the future but is necessary for correctness now.\r\n* Adds annotate_ops to gen_jit_dispatch which adds aliasing information to all of the\r\n  aten ops.\r\n* Adds AnnotatedType to the type hierarchy which is used to mark List and Tensor types\r\n  with their alias_set. These types only appear in schema when you call annotatedType\r\n  and are erased from types in normal use.\r\n* Extends jit::Type with .containedTypes() and .withContained(new_types). The first returns all types contained\r\n  within the type (e.g. T for T[], or {T,L} for a tuple (T, L)). The second constructs a new\r\n  version of the same type, replacing the contained types with new_types. This simplifies\r\n  a lot of logic for recursively cleaning up types.\r\n* Refactor List[T] into a common part that is shared with Annotated[T] and can be shared\r\n  with Optional[T] and Future[T] when they are merged.\r\n\r\n"}