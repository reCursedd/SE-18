{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/228027071", "pull_request_review_id": 168179761, "id": 228027071, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyODAyNzA3MQ==", "diff_hunk": "@@ -733,21 +775,43 @@ struct VarType : public Type {\n   std::string name_;\n };\n \n+// used in FunctionSchema to keep track of alias information\n+// value->type() should never contain this kind of type.\n+struct AnnotatedType;", "path": "torch/csrc/jit/type.h", "position": null, "original_position": 148, "commit_id": "b225c0b6d11439034a75afb5e5d6f554ad5cd27f", "original_commit_id": "3bba18a86ec94135c88c7bdfdb0d8f7f46cb0ec6", "user": {"login": "suo", "id": 1617424, "node_id": "MDQ6VXNlcjE2MTc0MjQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/1617424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/suo", "html_url": "https://github.com/suo", "followers_url": "https://api.github.com/users/suo/followers", "following_url": "https://api.github.com/users/suo/following{/other_user}", "gists_url": "https://api.github.com/users/suo/gists{/gist_id}", "starred_url": "https://api.github.com/users/suo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/suo/subscriptions", "organizations_url": "https://api.github.com/users/suo/orgs", "repos_url": "https://api.github.com/users/suo/repos", "events_url": "https://api.github.com/users/suo/events{/privacy}", "received_events_url": "https://api.github.com/users/suo/received_events", "type": "User", "site_admin": false}, "body": "I remember we discussed this briefly, but is this really necessary? It seems weird to have a special type that only the schema knows about just to carry a small piece of aliasing information. If no value can ever take on this type, I don't think it's that useful to put it in the type hierarchy. It also leads to the confusing `type()` and `annotatedType()` interface for `FunctionSchema`.\r\n\r\nMaybe it would be simpler to store aliasing information in `FunctionSchema` itself, similar to what we're doing for writes. \r\n\r\n", "created_at": "2018-10-25T03:49:36Z", "updated_at": "2018-11-23T15:53:33Z", "html_url": "https://github.com/pytorch/pytorch/pull/13093#discussion_r228027071", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/13093", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/228027071"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/13093#discussion_r228027071"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/13093"}}, "body_html": "<p>I remember we discussed this briefly, but is this really necessary? It seems weird to have a special type that only the schema knows about just to carry a small piece of aliasing information. If no value can ever take on this type, I don't think it's that useful to put it in the type hierarchy. It also leads to the confusing <code>type()</code> and <code>annotatedType()</code> interface for <code>FunctionSchema</code>.</p>\n<p>Maybe it would be simpler to store aliasing information in <code>FunctionSchema</code> itself, similar to what we're doing for writes.</p>", "body_text": "I remember we discussed this briefly, but is this really necessary? It seems weird to have a special type that only the schema knows about just to carry a small piece of aliasing information. If no value can ever take on this type, I don't think it's that useful to put it in the type hierarchy. It also leads to the confusing type() and annotatedType() interface for FunctionSchema.\nMaybe it would be simpler to store aliasing information in FunctionSchema itself, similar to what we're doing for writes."}