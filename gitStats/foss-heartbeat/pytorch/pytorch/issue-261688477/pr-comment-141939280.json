{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/141939280", "pull_request_review_id": 66237614, "id": 141939280, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0MTkzOTI4MA==", "diff_hunk": "@@ -4,27 +4,67 @@\n #include \"Exceptions.h\"\n \n #include <cudnn.h>\n+#include <ATen/ATen.h>\n \n namespace torch { namespace cudnn {\n \n+inline int dataSize(cudnnDataType_t dataType)\n+{\n+  switch (dataType) {\n+    case CUDNN_DATA_HALF: return 2;\n+    case CUDNN_DATA_FLOAT: return 4;\n+    default: return 8;\n+  }\n+}\n+\n+inline cudnnDataType_t getDataType(const at::Tensor& t) {\n+  auto scalar_type = t.type().scalarType();\n+  if (scalar_type == at::kFloat) {\n+    return CUDNN_DATA_FLOAT;\n+  } else if (scalar_type == at::kHalf) {\n+    return CUDNN_DATA_HALF;\n+  } else if (scalar_type == at::kDouble) {\n+    return CUDNN_DATA_DOUBLE;\n+  }\n+  throw std::runtime_error(\"TensorDescriptor only supports double, float and half tensors\");\n+}\n+\n struct TensorDescriptor\n {\n   cudnnTensorDescriptor_t desc;\n+\n   TensorDescriptor() : desc(NULL) {\n     CHECK(cudnnCreateTensorDescriptor(&desc));\n   }\n-  TensorDescriptor(const TensorDescriptor&) = delete;\n-  TensorDescriptor(TensorDescriptor&& ref)\n-  {\n-    desc = ref.desc;\n-    ref.desc = NULL;\n+  /* implicit */ TensorDescriptor(const at::Tensor& t, int pad = 0) : desc(NULL) {\n+    CHECK(cudnnCreateTensorDescriptor(&desc));\n+    set(t, pad);\n   }\n+  TensorDescriptor(const TensorDescriptor&) = delete;\n+  TensorDescriptor(TensorDescriptor&& ref) { desc = ref.desc; ref.desc = NULL; }\n   ~TensorDescriptor() {\n     cudnnDestroyTensorDescriptor(desc);\n   }\n   void set(cudnnDataType_t dataType, int dim, int* size, int* stride) {\n     CHECK(cudnnSetTensorNdDescriptor(desc, dataType, dim, size, stride));\n   }\n+  void set(const at::Tensor &t, int pad = 0) {\n+    int dim = t.ndimension();\n+    if (dim > 10 || pad > 10)", "path": "torch/csrc/cudnn/Descriptors.h", "position": null, "original_position": 55, "commit_id": "6657ded3d4074d2f3eae42ded7a9f1fe7449445b", "original_commit_id": "b0d24c38406051aeff095ecba20b5d06455dba32", "user": {"login": "ngimel", "id": 15841449, "node_id": "MDQ6VXNlcjE1ODQxNDQ5", "avatar_url": "https://avatars3.githubusercontent.com/u/15841449?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ngimel", "html_url": "https://github.com/ngimel", "followers_url": "https://api.github.com/users/ngimel/followers", "following_url": "https://api.github.com/users/ngimel/following{/other_user}", "gists_url": "https://api.github.com/users/ngimel/gists{/gist_id}", "starred_url": "https://api.github.com/users/ngimel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ngimel/subscriptions", "organizations_url": "https://api.github.com/users/ngimel/orgs", "repos_url": "https://api.github.com/users/ngimel/repos", "events_url": "https://api.github.com/users/ngimel/events{/privacy}", "received_events_url": "https://api.github.com/users/ngimel/received_events", "type": "User", "site_admin": false}, "body": "CUDNN_DIM_MAX is 8, defined in cudnn.h. Better to use it rather than string literal. ", "created_at": "2017-09-29T18:43:05Z", "updated_at": "2018-11-23T15:34:53Z", "html_url": "https://github.com/pytorch/pytorch/pull/2899#discussion_r141939280", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/2899", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/141939280"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/2899#discussion_r141939280"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/2899"}}, "body_html": "<p>CUDNN_DIM_MAX is 8, defined in cudnn.h. Better to use it rather than string literal.</p>", "body_text": "CUDNN_DIM_MAX is 8, defined in cudnn.h. Better to use it rather than string literal."}