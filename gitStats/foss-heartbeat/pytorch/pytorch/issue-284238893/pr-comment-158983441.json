{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/158983441", "pull_request_review_id": 85865626, "id": 158983441, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODk4MzQ0MQ==", "diff_hunk": "@@ -42,5 +42,22 @@ auto dispatch_floating_types(const Type& the_type, const char *name, Args&&... a\n     }\n }\n \n+#define DISPATCH_ALL_FLOATING_TYPES(TYPE, NAME, F...)                             \\\n+  [&]() {                                                                         \\\n+    const Type& the_type = TYPE;                                                  \\", "path": "aten/src/ATen/Dispatch.h", "position": 6, "original_position": 6, "commit_id": "8dab6c62f8e579ea93f407aeeafc57bedfb0ca37", "original_commit_id": "68e748279abc32d650a527282223faf2b703e3f5", "user": {"login": "colesbury", "id": 655866, "node_id": "MDQ6VXNlcjY1NTg2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/655866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colesbury", "html_url": "https://github.com/colesbury", "followers_url": "https://api.github.com/users/colesbury/followers", "following_url": "https://api.github.com/users/colesbury/following{/other_user}", "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions", "organizations_url": "https://api.github.com/users/colesbury/orgs", "repos_url": "https://api.github.com/users/colesbury/repos", "events_url": "https://api.github.com/users/colesbury/events{/privacy}", "received_events_url": "https://api.github.com/users/colesbury/received_events", "type": "User", "site_admin": false}, "body": "This ensures that if you do something like `DISPATCH_ALL_FLOATING_TYPES(self, ...)` instead of `DISPATCH_ALL_FLOATING_TYPES(self.type(), ...)` you'll get a meaningful compile error early on.\r\n\r\nI'm not too worried about another variable in-scope. It can be shadowed in `F` without generating compile warnings.", "created_at": "2017-12-28T18:42:26Z", "updated_at": "2018-11-23T15:37:41Z", "html_url": "https://github.com/pytorch/pytorch/pull/4322#discussion_r158983441", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4322", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/158983441"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/4322#discussion_r158983441"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4322"}}, "body_html": "<p>This ensures that if you do something like <code>DISPATCH_ALL_FLOATING_TYPES(self, ...)</code> instead of <code>DISPATCH_ALL_FLOATING_TYPES(self.type(), ...)</code> you'll get a meaningful compile error early on.</p>\n<p>I'm not too worried about another variable in-scope. It can be shadowed in <code>F</code> without generating compile warnings.</p>", "body_text": "This ensures that if you do something like DISPATCH_ALL_FLOATING_TYPES(self, ...) instead of DISPATCH_ALL_FLOATING_TYPES(self.type(), ...) you'll get a meaningful compile error early on.\nI'm not too worried about another variable in-scope. It can be shadowed in F without generating compile warnings.", "in_reply_to_id": 158874669}