{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/158558475", "pull_request_review_id": 85396303, "id": 158558475, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODU1ODQ3NQ==", "diff_hunk": "@@ -42,5 +42,22 @@ auto dispatch_floating_types(const Type& the_type, const char *name, Args&&... a\n     }\n }\n \n+#define DISPATCH_ALL_FLOATING_TYPES(TYPE, NAME, F...)                            \\\n+  [&]() {                                                                         \\", "path": "aten/src/ATen/Dispatch.h", "position": null, "original_position": 5, "commit_id": "8dab6c62f8e579ea93f407aeeafc57bedfb0ca37", "original_commit_id": "ce025518fdbbabc7074e4038d7a6e3e75cd626d9", "user": {"login": "gchanan", "id": 3768583, "node_id": "MDQ6VXNlcjM3Njg1ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3768583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gchanan", "html_url": "https://github.com/gchanan", "followers_url": "https://api.github.com/users/gchanan/followers", "following_url": "https://api.github.com/users/gchanan/following{/other_user}", "gists_url": "https://api.github.com/users/gchanan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gchanan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gchanan/subscriptions", "organizations_url": "https://api.github.com/users/gchanan/orgs", "repos_url": "https://api.github.com/users/gchanan/repos", "events_url": "https://api.github.com/users/gchanan/events{/privacy}", "received_events_url": "https://api.github.com/users/gchanan/received_events", "type": "User", "site_admin": false}, "body": "I'm not the biggest fan of this style if we don't have C++14, because it has some downsides that are eliminated with the existing template style at the cost of ~2-3 lines of code:\r\n\r\n1) I don't think you can capture things as r-value references this way in C++11 (you can in C++14), meaning (among other things) you can't capture unique_ptrs.\r\n2) \"scalar\" is magical (I need to know the definition, not just that it dispatches to my templatized function) and might shadow your own definition in non-obvious ways.  If we had C++14  we could use a templatized lambda and avoid the problem.", "created_at": "2017-12-22T21:10:34Z", "updated_at": "2018-11-23T15:37:38Z", "html_url": "https://github.com/pytorch/pytorch/pull/4322#discussion_r158558475", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4322", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/158558475"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/4322#discussion_r158558475"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4322"}}, "body_html": "<p>I'm not the biggest fan of this style if we don't have C++14, because it has some downsides that are eliminated with the existing template style at the cost of ~2-3 lines of code:</p>\n<ol>\n<li>I don't think you can capture things as r-value references this way in C++11 (you can in C++14), meaning (among other things) you can't capture unique_ptrs.</li>\n<li>\"scalar\" is magical (I need to know the definition, not just that it dispatches to my templatized function) and might shadow your own definition in non-obvious ways.  If we had C++14  we could use a templatized lambda and avoid the problem.</li>\n</ol>", "body_text": "I'm not the biggest fan of this style if we don't have C++14, because it has some downsides that are eliminated with the existing template style at the cost of ~2-3 lines of code:\n\nI don't think you can capture things as r-value references this way in C++11 (you can in C++14), meaning (among other things) you can't capture unique_ptrs.\n\"scalar\" is magical (I need to know the definition, not just that it dispatches to my templatized function) and might shadow your own definition in non-obvious ways.  If we had C++14  we could use a templatized lambda and avoid the problem."}