{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/440854967", "html_url": "https://github.com/pytorch/pytorch/pull/14271#issuecomment-440854967", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/14271", "id": 440854967, "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MDg1NDk2Nw==", "user": {"login": "teng-li", "id": 8120856, "node_id": "MDQ6VXNlcjgxMjA4NTY=", "avatar_url": "https://avatars2.githubusercontent.com/u/8120856?v=4", "gravatar_id": "", "url": "https://api.github.com/users/teng-li", "html_url": "https://github.com/teng-li", "followers_url": "https://api.github.com/users/teng-li/followers", "following_url": "https://api.github.com/users/teng-li/following{/other_user}", "gists_url": "https://api.github.com/users/teng-li/gists{/gist_id}", "starred_url": "https://api.github.com/users/teng-li/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/teng-li/subscriptions", "organizations_url": "https://api.github.com/users/teng-li/orgs", "repos_url": "https://api.github.com/users/teng-li/repos", "events_url": "https://api.github.com/users/teng-li/events{/privacy}", "received_events_url": "https://api.github.com/users/teng-li/received_events", "type": "User", "site_admin": false}, "created_at": "2018-11-21T23:59:08Z", "updated_at": "2018-11-21T23:59:08Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=9845\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/pietern\">@pietern</a>  I thought through this again. The easiest and most feasible change would be to use cudaDeviceSynchronize(), since what we essentially want is: (1) to make the default stream wait for all nccl streams, and for the majority of the cases, we only have a single default stream, this would be the same as callingcudaDeviceSynchronize(), and this is also a good thing since it provides a stronger guarantee that all previous cuda calls, in case they are in other streams (if any), can be finished before barrier as well, which is what we really want.</p>", "body_text": "@pietern  I thought through this again. The easiest and most feasible change would be to use cudaDeviceSynchronize(), since what we essentially want is: (1) to make the default stream wait for all nccl streams, and for the majority of the cases, we only have a single default stream, this would be the same as callingcudaDeviceSynchronize(), and this is also a good thing since it provides a stronger guarantee that all previous cuda calls, in case they are in other streams (if any), can be finished before barrier as well, which is what we really want.", "body": "@pietern  I thought through this again. The easiest and most feasible change would be to use cudaDeviceSynchronize(), since what we essentially want is: (1) to make the default stream wait for all nccl streams, and for the majority of the cases, we only have a single default stream, this would be the same as callingcudaDeviceSynchronize(), and this is also a good thing since it provides a stronger guarantee that all previous cuda calls, in case they are in other streams (if any), can be finished before barrier as well, which is what we really want. "}