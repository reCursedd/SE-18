{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/161194438", "pull_request_review_id": 88443552, "id": 161194438, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MTE5NDQzOA==", "diff_hunk": "@@ -1870,78 +1867,44 @@ void THTensor_(min)(THTensor *values_, THLongTensor *indices_, THTensor *t, int\n   }\n }\n \n-\n-void THTensor_(sum)(THTensor *r_, THTensor *t, int dimension, int keepdim)\n-{\n-  THLongStorage *dim;\n-\n-  THArgCheck(dimension >= 0 && dimension < THTensor_(nDimension)(t), 2, \"dimension %d out of range\",\n-      dimension + TH_INDEX_BASE);\n-\n-  dim = THTensor_(newSizeOf)(t);\n-  THLongStorage_set(dim, dimension, 1);\n-  THTensor_(resize)(r_, dim, NULL);\n-  THLongStorage_free(dim);\n-\n-  // two implementations optimized for data locality\n-  if (t->stride[dimension] == 1) {\n-    TH_TENSOR_DIM_APPLY2(real, t, real, r_, dimension,\n-                         accreal sum = 0;\n-                         int64_t i;\n-                         for(i = 0; i < t_size; i++)\n-                           sum += t_data[i*t_stride];\n-                         *r__data = (real)sum;);\n-  } else {\n-    THTensor_(zero)(r_);\n-    THTensor *temp_ = THTensor_(newWithTensor)(r_);\n-    // r_.expand_as(t)\n-    temp_->size[dimension] = t->size[dimension];\n-    temp_->stride[dimension] = 0;\n-\n-    TH_TENSOR_APPLY2(real, temp_, real, t, *temp__data = *temp__data + *t_data;);\n-    THTensor_(free)(temp_);\n-  }\n-\n-  if (!keepdim) {\n-    THTensor_(squeeze1d)(r_, r_, dimension);\n-  }\n-}\n-\n-void THTensor_(prod)(THTensor *r_, THTensor *t, int dimension, int keepdim)\n-{\n-  THLongStorage *dim;\n-\n-  THArgCheck(dimension >= 0 && dimension < THTensor_(nDimension)(t), 2, \"dimension %d out of range\",\n-      dimension + TH_INDEX_BASE);\n-\n-  dim = THTensor_(newSizeOf)(t);\n-  THLongStorage_set(dim, dimension, 1);\n-  THTensor_(resize)(r_, dim, NULL);\n-  THLongStorage_free(dim);\n-\n-  // two implementations optimized for data locality\n-  if (t->stride[dimension] == 1) {\n-    TH_TENSOR_DIM_APPLY2(real, t, real, r_, dimension,\n-                         accreal prod = 1;\n-                         int64_t i;\n-                         for(i = 0; i < t_size; i++)\n-                           prod *= t_data[i*t_stride];\n-                         *r__data = (real)prod;);\n-  } else {\n-    THTensor_(fill)(r_, 1);\n-    THTensor *temp_ = THTensor_(newWithTensor)(r_);\n-    // r_.expand_as(t)\n-    temp_->size[dimension] = t->size[dimension];\n-    temp_->stride[dimension] = 0;\n-\n-    TH_TENSOR_APPLY2(real, temp_, real, t, *temp__data = *temp__data * *t_data;);\n-    THTensor_(free)(temp_);\n-  }\n-\n-  if (!keepdim) {\n-    THTensor_(squeeze1d)(r_, r_, dimension);\n-  }\n-}\n+#define TENSOR_IMPLEMENT_ACC(NAME, ACC_OP, INIT_VALUE)                                   \\", "path": "aten/src/TH/generic/THTensorMath.c", "position": null, "original_position": 105, "commit_id": "410f1539a67949710b82abe3257cadd5fbae4db9", "original_commit_id": "9b312f4d6d1925c299bbe13ed3511fb4b4a26227", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Can you add a comment that `ACC_OP` needs to be commutative?", "created_at": "2018-01-12T11:02:03Z", "updated_at": "2018-11-23T15:38:04Z", "html_url": "https://github.com/pytorch/pytorch/pull/4627#discussion_r161194438", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4627", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/161194438"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/4627#discussion_r161194438"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4627"}}, "body_html": "<p>Can you add a comment that <code>ACC_OP</code> needs to be commutative?</p>", "body_text": "Can you add a comment that ACC_OP needs to be commutative?"}