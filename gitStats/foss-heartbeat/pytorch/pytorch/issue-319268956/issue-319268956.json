{"url": "https://api.github.com/repos/pytorch/pytorch/issues/7142", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/7142/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/7142/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/7142/events", "html_url": "https://github.com/pytorch/pytorch/issues/7142", "id": 319268956, "node_id": "MDU6SXNzdWUzMTkyNjg5NTY=", "number": 7142, "title": "Location Attention Memory Growth", "user": {"login": "PetrochukM", "id": 7424737, "node_id": "MDQ6VXNlcjc0MjQ3Mzc=", "avatar_url": "https://avatars2.githubusercontent.com/u/7424737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PetrochukM", "html_url": "https://github.com/PetrochukM", "followers_url": "https://api.github.com/users/PetrochukM/followers", "following_url": "https://api.github.com/users/PetrochukM/following{/other_user}", "gists_url": "https://api.github.com/users/PetrochukM/gists{/gist_id}", "starred_url": "https://api.github.com/users/PetrochukM/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PetrochukM/subscriptions", "organizations_url": "https://api.github.com/users/PetrochukM/orgs", "repos_url": "https://api.github.com/users/PetrochukM/repos", "events_url": "https://api.github.com/users/PetrochukM/events{/privacy}", "received_events_url": "https://api.github.com/users/PetrochukM/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2018-05-01T17:41:12Z", "updated_at": "2018-05-02T15:47:21Z", "closed_at": "2018-05-02T15:47:21Z", "author_association": "NONE", "body_html": "<h2>Issue description</h2>\n<p>A simple sample of Location Attention uses gigabytes of memory after 1000 iterations to store backward information. Using a similar attention model for audio generation, where 10 seconds of audio is approximately 800 iterations.</p>\n<p>My investigation has led me to find that adding detach stems the problem; therefore, the memory consumed is due to gradient data. It is not clear to me how an alignment of size [64, 128] grows to 11 gigabytes of memory. An LSTM, a much more complicated unit, does not use this much memory after so many iterations.</p>\n<p>Posted a sister thread here: <a href=\"https://discuss.pytorch.org/t/location-model-memory-growth/17304\" rel=\"nofollow\">https://discuss.pytorch.org/t/location-model-memory-growth/17304</a></p>\n<h2>Code example</h2>\n<pre><code>import os\n\nfrom torch import nn\n\nimport torch\n\n\nclass LocationAttention(nn.Module):\n    \"\"\" Simple mock of a location sensative alignment similar to this paper:\n    https://arxiv.org/pdf/1506.07503.pdf\n    \"\"\"\n\n    def __init__(self, hidden_size):\n        super().__init__()\n        self.project_alignment = nn.Linear(1, hidden_size)\n        self.score = nn.Linear(hidden_size, 1)\n        self.softmax = nn.Softmax(dim=1)\n\n    def forward(self, last_alignment):\n        last_alignment = last_alignment.unsqueeze(2)\n        last_alignment = self.project_alignment(last_alignment)\n        score = self.score(last_alignment)\n        score = score.squeeze(2)\n        last_alignment = self.softmax(score)\n        # last_alignment = last_alignment.detach()\n        return last_alignment\n\n\n# Parameters\nbatch_size = 64\nnum_tokens = 150\nnum_iter = 3000\nhidden_size = 128\n\n# Instantiate\nattention = LocationAttention(hidden_size=hidden_size)\nattention.cuda()\n\n# Run\nlast_alignment = torch.FloatTensor(batch_size, num_tokens).zero_().cuda()\nfor i in range(num_iter):  # WARNING: Uses 11 gig of memory in 1600 iterations\n    last_alignment = attention(last_alignment)\n    if i % 100 == 0:\n        print('Frame: %d' % (i,))\n        os.system('nvidia-smi')\n</code></pre>\n<h2>System Info</h2>\n<p>PyTorch version: 0.4.0<br>\nIs debug build: No<br>\nCUDA used to build PyTorch: 9.0.176</p>\n<p>OS: Ubuntu 16.04.4 LTS<br>\nGCC version: (Ubuntu 5.4.0-6ubuntu1~16.04.9) 5.4.0 20160609<br>\nCMake version: version 3.5.1</p>\n<p>Python version: 3.6<br>\nIs CUDA available: Yes<br>\nCUDA runtime version: 9.0.176<br>\nGPU models and configuration: GPU 0: GeForce GTX 1080 Ti<br>\nNvidia driver version: 390.30<br>\ncuDNN version: Probably one of the following:<br>\n/usr/lib/x86_64-linux-gnu/libcudnn.so.6.0.21<br>\n/usr/lib/x86_64-linux-gnu/libcudnn.so.7.0.5<br>\n/usr/local/lib/python2.7/dist-packages/torch/lib/libcudnn-7a90c013.so.7.0.5<br>\n/usr/local/lib/python3.5/dist-packages/torch/lib/libcudnn-3f9a723f.so.6.0.21</p>", "body_text": "Issue description\nA simple sample of Location Attention uses gigabytes of memory after 1000 iterations to store backward information. Using a similar attention model for audio generation, where 10 seconds of audio is approximately 800 iterations.\nMy investigation has led me to find that adding detach stems the problem; therefore, the memory consumed is due to gradient data. It is not clear to me how an alignment of size [64, 128] grows to 11 gigabytes of memory. An LSTM, a much more complicated unit, does not use this much memory after so many iterations.\nPosted a sister thread here: https://discuss.pytorch.org/t/location-model-memory-growth/17304\nCode example\nimport os\n\nfrom torch import nn\n\nimport torch\n\n\nclass LocationAttention(nn.Module):\n    \"\"\" Simple mock of a location sensative alignment similar to this paper:\n    https://arxiv.org/pdf/1506.07503.pdf\n    \"\"\"\n\n    def __init__(self, hidden_size):\n        super().__init__()\n        self.project_alignment = nn.Linear(1, hidden_size)\n        self.score = nn.Linear(hidden_size, 1)\n        self.softmax = nn.Softmax(dim=1)\n\n    def forward(self, last_alignment):\n        last_alignment = last_alignment.unsqueeze(2)\n        last_alignment = self.project_alignment(last_alignment)\n        score = self.score(last_alignment)\n        score = score.squeeze(2)\n        last_alignment = self.softmax(score)\n        # last_alignment = last_alignment.detach()\n        return last_alignment\n\n\n# Parameters\nbatch_size = 64\nnum_tokens = 150\nnum_iter = 3000\nhidden_size = 128\n\n# Instantiate\nattention = LocationAttention(hidden_size=hidden_size)\nattention.cuda()\n\n# Run\nlast_alignment = torch.FloatTensor(batch_size, num_tokens).zero_().cuda()\nfor i in range(num_iter):  # WARNING: Uses 11 gig of memory in 1600 iterations\n    last_alignment = attention(last_alignment)\n    if i % 100 == 0:\n        print('Frame: %d' % (i,))\n        os.system('nvidia-smi')\n\nSystem Info\nPyTorch version: 0.4.0\nIs debug build: No\nCUDA used to build PyTorch: 9.0.176\nOS: Ubuntu 16.04.4 LTS\nGCC version: (Ubuntu 5.4.0-6ubuntu1~16.04.9) 5.4.0 20160609\nCMake version: version 3.5.1\nPython version: 3.6\nIs CUDA available: Yes\nCUDA runtime version: 9.0.176\nGPU models and configuration: GPU 0: GeForce GTX 1080 Ti\nNvidia driver version: 390.30\ncuDNN version: Probably one of the following:\n/usr/lib/x86_64-linux-gnu/libcudnn.so.6.0.21\n/usr/lib/x86_64-linux-gnu/libcudnn.so.7.0.5\n/usr/local/lib/python2.7/dist-packages/torch/lib/libcudnn-7a90c013.so.7.0.5\n/usr/local/lib/python3.5/dist-packages/torch/lib/libcudnn-3f9a723f.so.6.0.21", "body": "## Issue description\r\n\r\nA simple sample of Location Attention uses gigabytes of memory after 1000 iterations to store backward information. Using a similar attention model for audio generation, where 10 seconds of audio is approximately 800 iterations.\r\n\r\nMy investigation has led me to find that adding detach stems the problem; therefore, the memory consumed is due to gradient data. It is not clear to me how an alignment of size [64, 128] grows to 11 gigabytes of memory. An LSTM, a much more complicated unit, does not use this much memory after so many iterations.\r\n\r\nPosted a sister thread here: https://discuss.pytorch.org/t/location-model-memory-growth/17304 \r\n\r\n## Code example\r\n\r\n```\r\nimport os\r\n\r\nfrom torch import nn\r\n\r\nimport torch\r\n\r\n\r\nclass LocationAttention(nn.Module):\r\n    \"\"\" Simple mock of a location sensative alignment similar to this paper:\r\n    https://arxiv.org/pdf/1506.07503.pdf\r\n    \"\"\"\r\n\r\n    def __init__(self, hidden_size):\r\n        super().__init__()\r\n        self.project_alignment = nn.Linear(1, hidden_size)\r\n        self.score = nn.Linear(hidden_size, 1)\r\n        self.softmax = nn.Softmax(dim=1)\r\n\r\n    def forward(self, last_alignment):\r\n        last_alignment = last_alignment.unsqueeze(2)\r\n        last_alignment = self.project_alignment(last_alignment)\r\n        score = self.score(last_alignment)\r\n        score = score.squeeze(2)\r\n        last_alignment = self.softmax(score)\r\n        # last_alignment = last_alignment.detach()\r\n        return last_alignment\r\n\r\n\r\n# Parameters\r\nbatch_size = 64\r\nnum_tokens = 150\r\nnum_iter = 3000\r\nhidden_size = 128\r\n\r\n# Instantiate\r\nattention = LocationAttention(hidden_size=hidden_size)\r\nattention.cuda()\r\n\r\n# Run\r\nlast_alignment = torch.FloatTensor(batch_size, num_tokens).zero_().cuda()\r\nfor i in range(num_iter):  # WARNING: Uses 11 gig of memory in 1600 iterations\r\n    last_alignment = attention(last_alignment)\r\n    if i % 100 == 0:\r\n        print('Frame: %d' % (i,))\r\n        os.system('nvidia-smi')\r\n```\r\n\r\n## System Info\r\n\r\nPyTorch version: 0.4.0\r\nIs debug build: No\r\nCUDA used to build PyTorch: 9.0.176\r\n\r\nOS: Ubuntu 16.04.4 LTS\r\nGCC version: (Ubuntu 5.4.0-6ubuntu1~16.04.9) 5.4.0 20160609\r\nCMake version: version 3.5.1\r\n\r\nPython version: 3.6\r\nIs CUDA available: Yes\r\nCUDA runtime version: 9.0.176\r\nGPU models and configuration: GPU 0: GeForce GTX 1080 Ti\r\nNvidia driver version: 390.30\r\ncuDNN version: Probably one of the following:\r\n/usr/lib/x86_64-linux-gnu/libcudnn.so.6.0.21\r\n/usr/lib/x86_64-linux-gnu/libcudnn.so.7.0.5\r\n/usr/local/lib/python2.7/dist-packages/torch/lib/libcudnn-7a90c013.so.7.0.5\r\n/usr/local/lib/python3.5/dist-packages/torch/lib/libcudnn-3f9a723f.so.6.0.21"}