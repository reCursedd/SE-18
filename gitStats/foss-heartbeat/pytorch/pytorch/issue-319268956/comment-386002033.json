{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/386002033", "html_url": "https://github.com/pytorch/pytorch/issues/7142#issuecomment-386002033", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/7142", "id": 386002033, "node_id": "MDEyOklzc3VlQ29tbWVudDM4NjAwMjAzMw==", "user": {"login": "PetrochukM", "id": 7424737, "node_id": "MDQ6VXNlcjc0MjQ3Mzc=", "avatar_url": "https://avatars2.githubusercontent.com/u/7424737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PetrochukM", "html_url": "https://github.com/PetrochukM", "followers_url": "https://api.github.com/users/PetrochukM/followers", "following_url": "https://api.github.com/users/PetrochukM/following{/other_user}", "gists_url": "https://api.github.com/users/PetrochukM/gists{/gist_id}", "starred_url": "https://api.github.com/users/PetrochukM/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PetrochukM/subscriptions", "organizations_url": "https://api.github.com/users/PetrochukM/orgs", "repos_url": "https://api.github.com/users/PetrochukM/repos", "events_url": "https://api.github.com/users/PetrochukM/events{/privacy}", "received_events_url": "https://api.github.com/users/PetrochukM/received_events", "type": "User", "site_admin": false}, "created_at": "2018-05-02T14:42:50Z", "updated_at": "2018-05-02T14:48:13Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=4583066\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/apaszke\">@apaszke</a> The paper clearly states that they use one GPU for this experiment. I checked this as well. I am GChating with the authors to ensure I do not miss any details!</p>\n<p>Where can I learn more about gradient checkpointing? What are other tricks? It's imperative for me to get this working. How do I tune PyTorch to be more memory efficient?</p>\n<p>Tricks I know of:</p>\n<ul>\n<li>Truncated Backprop (They are not doing that, I asked)</li>\n<li><code>gc.collect()</code>, PyTorch forms found that inserting garbage collect can help</li>\n<li>Freeing memory with <code>del</code></li>\n</ul>\n<p>I understand, thanks for looking into this briefly.</p>", "body_text": "@apaszke The paper clearly states that they use one GPU for this experiment. I checked this as well. I am GChating with the authors to ensure I do not miss any details!\nWhere can I learn more about gradient checkpointing? What are other tricks? It's imperative for me to get this working. How do I tune PyTorch to be more memory efficient?\nTricks I know of:\n\nTruncated Backprop (They are not doing that, I asked)\ngc.collect(), PyTorch forms found that inserting garbage collect can help\nFreeing memory with del\n\nI understand, thanks for looking into this briefly.", "body": "@apaszke The paper clearly states that they use one GPU for this experiment. I checked this as well. I am GChating with the authors to ensure I do not miss any details!\r\n\r\nWhere can I learn more about gradient checkpointing? What are other tricks? It's imperative for me to get this working. How do I tune PyTorch to be more memory efficient? \r\n\r\nTricks I know of:\r\n\r\n- Truncated Backprop (They are not doing that, I asked)\r\n- ``gc.collect()``, PyTorch forms found that inserting garbage collect can help\r\n- Freeing memory with ``del``\r\n\r\nI understand, thanks for looking into this briefly."}