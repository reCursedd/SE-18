{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/371175720", "html_url": "https://github.com/pytorch/pytorch/pull/5466#issuecomment-371175720", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/5466", "id": 371175720, "node_id": "MDEyOklzc3VlQ29tbWVudDM3MTE3NTcyMA==", "user": {"login": "zou3519", "id": 5652049, "node_id": "MDQ6VXNlcjU2NTIwNDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/5652049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zou3519", "html_url": "https://github.com/zou3519", "followers_url": "https://api.github.com/users/zou3519/followers", "following_url": "https://api.github.com/users/zou3519/following{/other_user}", "gists_url": "https://api.github.com/users/zou3519/gists{/gist_id}", "starred_url": "https://api.github.com/users/zou3519/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zou3519/subscriptions", "organizations_url": "https://api.github.com/users/zou3519/orgs", "repos_url": "https://api.github.com/users/zou3519/repos", "events_url": "https://api.github.com/users/zou3519/events{/privacy}", "received_events_url": "https://api.github.com/users/zou3519/received_events", "type": "User", "site_admin": false}, "created_at": "2018-03-07T15:29:46Z", "updated_at": "2018-03-07T15:29:46Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=4583066\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/apaszke\">@apaszke</a> It turns out that <code>PyBuffer_FromReadWriteMemory</code> returns a \"legacy\" PyBuffer (not to be confused with <code>Py_buffer</code> so one cannot create a memory view from it. Readinto/write works on the created PyBuffer, but this behavior is undocumented (unless it is implicitly assumed by the docs that a PyBuffer represents a bytes-like object...)</p>", "body_text": "@apaszke It turns out that PyBuffer_FromReadWriteMemory returns a \"legacy\" PyBuffer (not to be confused with Py_buffer so one cannot create a memory view from it. Readinto/write works on the created PyBuffer, but this behavior is undocumented (unless it is implicitly assumed by the docs that a PyBuffer represents a bytes-like object...)", "body": "@apaszke It turns out that `PyBuffer_FromReadWriteMemory` returns a \"legacy\" PyBuffer (not to be confused with `Py_buffer` so one cannot create a memory view from it. Readinto/write works on the created PyBuffer, but this behavior is undocumented (unless it is implicitly assumed by the docs that a PyBuffer represents a bytes-like object...)"}