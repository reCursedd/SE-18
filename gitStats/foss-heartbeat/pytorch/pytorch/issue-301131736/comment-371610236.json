{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/371610236", "html_url": "https://github.com/pytorch/pytorch/pull/5466#issuecomment-371610236", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/5466", "id": 371610236, "node_id": "MDEyOklzc3VlQ29tbWVudDM3MTYxMDIzNg==", "user": {"login": "zou3519", "id": 5652049, "node_id": "MDQ6VXNlcjU2NTIwNDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/5652049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zou3519", "html_url": "https://github.com/zou3519", "followers_url": "https://api.github.com/users/zou3519/followers", "following_url": "https://api.github.com/users/zou3519/following{/other_user}", "gists_url": "https://api.github.com/users/zou3519/gists{/gist_id}", "starred_url": "https://api.github.com/users/zou3519/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zou3519/subscriptions", "organizations_url": "https://api.github.com/users/zou3519/orgs", "repos_url": "https://api.github.com/users/zou3519/repos", "events_url": "https://api.github.com/users/zou3519/events{/privacy}", "received_events_url": "https://api.github.com/users/zou3519/received_events", "type": "User", "site_admin": false}, "created_at": "2018-03-08T20:14:51Z", "updated_at": "2018-03-08T20:15:15Z", "author_association": "CONTRIBUTOR", "body_html": "<p>I read the docs more carefully, and it is assumed that legacy PyBuffers act as strings:</p>\n<p>'A \u201cbuffer object\u201d is defined in the bufferobject.h header (included by Python.h). These objects look very similar to string objects at the Python programming level: they support slicing, indexing, concatenation, and some other standard string operations. However, their data can come from one of two sources: from a block of memory, or from another object which exports the buffer interface.'</p>\n<p>The current solution, calling readinto/write directly on a PyBuffer in Python 2, should be fine then.</p>", "body_text": "I read the docs more carefully, and it is assumed that legacy PyBuffers act as strings:\n'A \u201cbuffer object\u201d is defined in the bufferobject.h header (included by Python.h). These objects look very similar to string objects at the Python programming level: they support slicing, indexing, concatenation, and some other standard string operations. However, their data can come from one of two sources: from a block of memory, or from another object which exports the buffer interface.'\nThe current solution, calling readinto/write directly on a PyBuffer in Python 2, should be fine then.", "body": "I read the docs more carefully, and it is assumed that legacy PyBuffers act as strings:\r\n\r\n'A \u201cbuffer object\u201d is defined in the bufferobject.h header (included by Python.h). These objects look very similar to string objects at the Python programming level: they support slicing, indexing, concatenation, and some other standard string operations. However, their data can come from one of two sources: from a block of memory, or from another object which exports the buffer interface.'\r\n\r\nThe current solution, calling readinto/write directly on a PyBuffer in Python 2, should be fine then."}