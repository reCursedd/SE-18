{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/171594811", "pull_request_review_id": 100474774, "id": 171594811, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MTU5NDgxMQ==", "diff_hunk": "@@ -4777,23 +4844,92 @@ def import_module(name, filename):\n                     self.assertEquals(len(w), 1)\n                     self.assertTrue(w[0].category, 'SourceChangeWarning')\n \n+    def test_serialization_container(self):\n+        self._test_serialization_container(lambda: tempfile.NamedTemporaryFile())\n+\n+    # TODO(rzou): test_serialization_container breaks if called multiple times.\n+    # The following test won't fail if called by itself.\n+    @unittest.skipIf(not PY3, 'This test is broken on Python 2')\n+    def test_serialization_container_filelike(self):\n+        self._test_serialization_container(lambda: BytesIOContext())\n+\n     def test_serialization_map_location(self):\n         test_file_path = download_file('https://download.pytorch.org/test_data/gpu_tensors.pt')\n \n         def map_location(storage, loc):\n             return storage\n \n-        tensor = torch.load(test_file_path, map_location=map_location)\n-        self.assertIsInstance(tensor, torch.FloatTensor)\n-        self.assertEqual(tensor, torch.FloatTensor([[1.0, 2.0], [3.0, 4.0]]))\n+        def load_bytes():\n+            with open(test_file_path, 'rb') as f:\n+                data = io.BytesIO(f.read())\n+            return data\n+\n+        fileobject_lambdas = [lambda: test_file_path, load_bytes]\n+        map_locations = [map_location, {'cuda:0': 'cpu'}, 'cpu']\n+\n+        for fileobject_lambda in fileobject_lambdas:\n+            for map_location in map_locations:\n+                tensor = torch.load(fileobject_lambda(), map_location=map_location)\n+                self.assertIsInstance(tensor, torch.FloatTensor)\n+                self.assertEqual(tensor, torch.FloatTensor([[1.0, 2.0], [3.0, 4.0]]))\n+\n+    def test_serialization_api_guarantees(self):\n+        filemock = FilelikeMock(b'', has_readinto=False)\n+        tensor = torch.randn(3, 5)\n+        torch.save(tensor, filemock)\n+        expected = set(['write', 'flush'])\n+        self.assertTrue(len(filemock.calls.difference(expected)) is 0)\n+\n+        # Reset between save and load\n+        filemock.seek(0)\n+        filemock.calls.clear()\n+\n+        _ = torch.load(filemock)\n+        expected = set(['read', 'readline', 'seek', 'tell'])\n+        self.assertTrue(len(filemock.calls.difference(expected)) is 0)\n+\n+    def _test_load_filelike(self, tensor, mock, desc):\n+        with tempfile.TemporaryFile() as f:\n+            torch.save(tensor, f)", "path": "test/test_torch.py", "position": null, "original_position": 225, "commit_id": "bdaf61fb52ecadc1e0f83be28ea738ad2635257d", "original_commit_id": "60bacbd693ff6e6a8e1318a8e48cb7f77bbf07f4", "user": {"login": "zou3519", "id": 5652049, "node_id": "MDQ6VXNlcjU2NTIwNDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/5652049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zou3519", "html_url": "https://github.com/zou3519", "followers_url": "https://api.github.com/users/zou3519/followers", "following_url": "https://api.github.com/users/zou3519/following{/other_user}", "gists_url": "https://api.github.com/users/zou3519/gists{/gist_id}", "starred_url": "https://api.github.com/users/zou3519/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zou3519/subscriptions", "organizations_url": "https://api.github.com/users/zou3519/orgs", "repos_url": "https://api.github.com/users/zou3519/repos", "events_url": "https://api.github.com/users/zou3519/events{/privacy}", "received_events_url": "https://api.github.com/users/zou3519/received_events", "type": "User", "site_admin": false}, "body": "Good point", "created_at": "2018-03-01T15:30:58Z", "updated_at": "2018-11-23T15:40:12Z", "html_url": "https://github.com/pytorch/pytorch/pull/5466#discussion_r171594811", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/5466", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/171594811"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/5466#discussion_r171594811"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/5466"}}, "body_html": "<p>Good point</p>", "body_text": "Good point", "in_reply_to_id": 171541937}