{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/412578637", "html_url": "https://github.com/pytorch/pytorch/issues/10158#issuecomment-412578637", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/10158", "id": 412578637, "node_id": "MDEyOklzc3VlQ29tbWVudDQxMjU3ODYzNw==", "user": {"login": "ailzhang", "id": 5248122, "node_id": "MDQ6VXNlcjUyNDgxMjI=", "avatar_url": "https://avatars2.githubusercontent.com/u/5248122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ailzhang", "html_url": "https://github.com/ailzhang", "followers_url": "https://api.github.com/users/ailzhang/followers", "following_url": "https://api.github.com/users/ailzhang/following{/other_user}", "gists_url": "https://api.github.com/users/ailzhang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ailzhang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ailzhang/subscriptions", "organizations_url": "https://api.github.com/users/ailzhang/orgs", "repos_url": "https://api.github.com/users/ailzhang/repos", "events_url": "https://api.github.com/users/ailzhang/events{/privacy}", "received_events_url": "https://api.github.com/users/ailzhang/received_events", "type": "User", "site_admin": false}, "created_at": "2018-08-13T16:26:21Z", "updated_at": "2018-08-13T16:26:21Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Hi <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=15847067\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/mjc14\">@mjc14</a> , here is my experiment script. I will get back to you with the openmpi compile guideline shortly.</p>\n<pre><code>import torch.distributed as dist\nimport torch\n\ndef debug_fun():\n    torch.cuda.set_device(dist.get_rank())\n    torch.manual_seed(dist.get_rank())\n    device = \"cuda:{}\".format(dist.get_rank())\n    # device = \"cpu\"\n    param = torch.FloatTensor(1,1).to(device)\n\n    param.uniform_()\n    print(\"Rank {}, before sync: {} at {}\".format(dist.get_rank(),param.cpu().data.numpy(), param.device))\n    print(param.data)\n    torch.cuda.synchronize()\n    dist.all_reduce(param.data)\n    print(\"Rank {}, after sync : {} at {}\".format(dist.get_rank(),param.cpu().data.numpy(), param.device))\n\n\nif __name__ == '__main__':\n    dist.init_process_group(\"mpi\")\n    debug_fun()\n</code></pre>", "body_text": "Hi @mjc14 , here is my experiment script. I will get back to you with the openmpi compile guideline shortly.\nimport torch.distributed as dist\nimport torch\n\ndef debug_fun():\n    torch.cuda.set_device(dist.get_rank())\n    torch.manual_seed(dist.get_rank())\n    device = \"cuda:{}\".format(dist.get_rank())\n    # device = \"cpu\"\n    param = torch.FloatTensor(1,1).to(device)\n\n    param.uniform_()\n    print(\"Rank {}, before sync: {} at {}\".format(dist.get_rank(),param.cpu().data.numpy(), param.device))\n    print(param.data)\n    torch.cuda.synchronize()\n    dist.all_reduce(param.data)\n    print(\"Rank {}, after sync : {} at {}\".format(dist.get_rank(),param.cpu().data.numpy(), param.device))\n\n\nif __name__ == '__main__':\n    dist.init_process_group(\"mpi\")\n    debug_fun()", "body": "Hi @mjc14 , here is my experiment script. I will get back to you with the openmpi compile guideline shortly. \r\n\r\n```\r\nimport torch.distributed as dist\r\nimport torch\r\n\r\ndef debug_fun():\r\n    torch.cuda.set_device(dist.get_rank())\r\n    torch.manual_seed(dist.get_rank())\r\n    device = \"cuda:{}\".format(dist.get_rank())\r\n    # device = \"cpu\"\r\n    param = torch.FloatTensor(1,1).to(device)\r\n\r\n    param.uniform_()\r\n    print(\"Rank {}, before sync: {} at {}\".format(dist.get_rank(),param.cpu().data.numpy(), param.device))\r\n    print(param.data)\r\n    torch.cuda.synchronize()\r\n    dist.all_reduce(param.data)\r\n    print(\"Rank {}, after sync : {} at {}\".format(dist.get_rank(),param.cpu().data.numpy(), param.device))\r\n\r\n\r\nif __name__ == '__main__':\r\n    dist.init_process_group(\"mpi\")\r\n    debug_fun()\r\n```"}