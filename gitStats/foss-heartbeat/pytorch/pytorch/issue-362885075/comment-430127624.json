{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/430127624", "html_url": "https://github.com/pytorch/pytorch/issues/11982#issuecomment-430127624", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/11982", "id": 430127624, "node_id": "MDEyOklzc3VlQ29tbWVudDQzMDEyNzYyNA==", "user": {"login": "pjh5", "id": 6456020, "node_id": "MDQ6VXNlcjY0NTYwMjA=", "avatar_url": "https://avatars1.githubusercontent.com/u/6456020?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pjh5", "html_url": "https://github.com/pjh5", "followers_url": "https://api.github.com/users/pjh5/followers", "following_url": "https://api.github.com/users/pjh5/following{/other_user}", "gists_url": "https://api.github.com/users/pjh5/gists{/gist_id}", "starred_url": "https://api.github.com/users/pjh5/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pjh5/subscriptions", "organizations_url": "https://api.github.com/users/pjh5/orgs", "repos_url": "https://api.github.com/users/pjh5/repos", "events_url": "https://api.github.com/users/pjh5/events{/privacy}", "received_events_url": "https://api.github.com/users/pjh5/received_events", "type": "User", "site_admin": false}, "created_at": "2018-10-16T07:16:13Z", "updated_at": "2018-10-16T07:34:19Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Right now the wheels are built with the pytorch/builder repo, which contains Dockerfiles and bash scripts that call setup.py and then do some linking and path munging. It comes down to setting a few environment variables in a Docker <a href=\"https://github.com/pytorch/builder/blob/master/cron/build_docker.sh#L142\">https://github.com/pytorch/builder/blob/master/cron/build_docker.sh#L142</a> (DESIRED_PYTHON and DESIRED_CUDA and DEBUG are all that should matter) and then calling <a href=\"https://github.com/pytorch/builder/blob/master/manywheel/build.sh\">https://github.com/pytorch/builder/blob/master/manywheel/build.sh</a> (or build_cpu.sh). The docker can be pulled from soumith/manylinux-cuda80 or cuda90 or cuda92 (cpus are built on cuda80). You should be able to produce a debug wheel with this in the exact same conditions, except perhaps for differences in nvidia-docker versions or CUDA drivers.</p>", "body_text": "Right now the wheels are built with the pytorch/builder repo, which contains Dockerfiles and bash scripts that call setup.py and then do some linking and path munging. It comes down to setting a few environment variables in a Docker https://github.com/pytorch/builder/blob/master/cron/build_docker.sh#L142 (DESIRED_PYTHON and DESIRED_CUDA and DEBUG are all that should matter) and then calling https://github.com/pytorch/builder/blob/master/manywheel/build.sh (or build_cpu.sh). The docker can be pulled from soumith/manylinux-cuda80 or cuda90 or cuda92 (cpus are built on cuda80). You should be able to produce a debug wheel with this in the exact same conditions, except perhaps for differences in nvidia-docker versions or CUDA drivers.", "body": "Right now the wheels are built with the pytorch/builder repo, which contains Dockerfiles and bash scripts that call setup.py and then do some linking and path munging. It comes down to setting a few environment variables in a Docker https://github.com/pytorch/builder/blob/master/cron/build_docker.sh#L142 (DESIRED_PYTHON and DESIRED_CUDA and DEBUG are all that should matter) and then calling https://github.com/pytorch/builder/blob/master/manywheel/build.sh (or build_cpu.sh). The docker can be pulled from soumith/manylinux-cuda80 or cuda90 or cuda92 (cpus are built on cuda80). You should be able to produce a debug wheel with this in the exact same conditions, except perhaps for differences in nvidia-docker versions or CUDA drivers."}