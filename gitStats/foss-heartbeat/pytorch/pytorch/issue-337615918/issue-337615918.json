{"url": "https://api.github.com/repos/pytorch/pytorch/issues/9107", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/9107/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/9107/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/9107/events", "html_url": "https://github.com/pytorch/pytorch/pull/9107", "id": 337615918, "node_id": "MDExOlB1bGxSZXF1ZXN0MTk4NzUzODgw", "number": 9107, "title": "Unify THStorage and THCStorage structs. (#9087)", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-07-02T18:17:35Z", "updated_at": "2018-07-03T00:10:55Z", "closed_at": "2018-07-03T00:10:55Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/9107", "html_url": "https://github.com/pytorch/pytorch/pull/9107", "diff_url": "https://github.com/pytorch/pytorch/pull/9107.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/9107.patch"}, "body_html": "<p>Summary:<br>\nSome details about how this was done:</p>\n<ul>\n<li>\n<p>For now, the allocators for CPU and CUDA are different (unifying<br>\nthe allocators is a bigger change to make, I'll contribute this in<br>\na later patch).  To smooth this over, the allocator field now<br>\nstores a void* instead of THAllocator* or THCDeviceAllocator*; to<br>\nmake this clear the field is renamed to allocatorVoidPtr.</p>\n</li>\n<li>\n<p>Some THStorage functions which were generated per-scalar are now<br>\ngeneralized, and thus moved out of the generic/ library.  This way<br>\nthey can be called directly from a non-code-generated at::Storage</p>\n</li>\n<li>\n<p>THCState is moved into a C++ header.  This is actually not really<br>\nrelated to this particular diff, but I'll need it soon to replace<br>\nTHAllocator/THCDeviceAllocator with at::Allocator (C++, so I can't<br>\nmention it in a C header file.)</p>\n</li>\n<li>\n<p>THPPointer needs to be adjusted, since there is no more type refinement<br>\nbetween THStorage/THCStorage for it to template match over.  This<br>\nis a little tricky, because I can't refer to THCStorage_free unless<br>\nwe actually compile with CUDA.  So there's two copies of the function<br>\nnow: one for the CPU build, one for the CUDA build.  If we ever split<br>\nCUDA/non-CUDA Python builds, you will have to indirect this through some<br>\ndynamic dispatch.</p>\n</li>\n</ul>\n<p>I want to soon replace the THCDeviceAllocator pointers in<br>\nTHCState with at::Allocator, but I can't reference a C++ namespaced type<br>\nfrom C code, so THCState needs to move.</p>\n<p>Signed-off-by: Edward Z. Yang <a href=\"mailto:ezyang@fb.com\">ezyang@fb.com</a><br>\n<span class=\"issue-keyword tooltipped tooltipped-se\" aria-label=\"This pull request closes pull request #9087.\">Closes</span> <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"337343084\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/9087\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/pytorch/pytorch/pull/9087/hovercard\" href=\"https://github.com/pytorch/pytorch/pull/9087\">#9087</a></p>\n<p>Differential Revision: D8712072</p>", "body_text": "Summary:\nSome details about how this was done:\n\n\nFor now, the allocators for CPU and CUDA are different (unifying\nthe allocators is a bigger change to make, I'll contribute this in\na later patch).  To smooth this over, the allocator field now\nstores a void* instead of THAllocator* or THCDeviceAllocator*; to\nmake this clear the field is renamed to allocatorVoidPtr.\n\n\nSome THStorage functions which were generated per-scalar are now\ngeneralized, and thus moved out of the generic/ library.  This way\nthey can be called directly from a non-code-generated at::Storage\n\n\nTHCState is moved into a C++ header.  This is actually not really\nrelated to this particular diff, but I'll need it soon to replace\nTHAllocator/THCDeviceAllocator with at::Allocator (C++, so I can't\nmention it in a C header file.)\n\n\nTHPPointer needs to be adjusted, since there is no more type refinement\nbetween THStorage/THCStorage for it to template match over.  This\nis a little tricky, because I can't refer to THCStorage_free unless\nwe actually compile with CUDA.  So there's two copies of the function\nnow: one for the CPU build, one for the CUDA build.  If we ever split\nCUDA/non-CUDA Python builds, you will have to indirect this through some\ndynamic dispatch.\n\n\nI want to soon replace the THCDeviceAllocator pointers in\nTHCState with at::Allocator, but I can't reference a C++ namespaced type\nfrom C code, so THCState needs to move.\nSigned-off-by: Edward Z. Yang ezyang@fb.com\nCloses #9087\nDifferential Revision: D8712072", "body": "Summary:\nSome details about how this was done:\n\n- For now, the allocators for CPU and CUDA are different (unifying\n  the allocators is a bigger change to make, I'll contribute this in\n  a later patch).  To smooth this over, the allocator field now\n  stores a void* instead of THAllocator* or THCDeviceAllocator*; to\n  make this clear the field is renamed to allocatorVoidPtr.\n\n- Some THStorage functions which were generated per-scalar are now\n  generalized, and thus moved out of the generic/ library.  This way\n  they can be called directly from a non-code-generated at::Storage\n\n- THCState is moved into a C++ header.  This is actually not really\n  related to this particular diff, but I'll need it soon to replace\n  THAllocator/THCDeviceAllocator with at::Allocator (C++, so I can't\n  mention it in a C header file.)\n\n- THPPointer needs to be adjusted, since there is no more type refinement\n  between THStorage/THCStorage for it to template match over.  This\n  is a little tricky, because I can't refer to THCStorage_free unless\n  we actually compile with CUDA.  So there's two copies of the function\n  now: one for the CPU build, one for the CUDA build.  If we ever split\n  CUDA/non-CUDA Python builds, you will have to indirect this through some\n  dynamic dispatch.\n\nI want to soon replace the THCDeviceAllocator pointers in\nTHCState with at::Allocator, but I can't reference a C++ namespaced type\nfrom C code, so THCState needs to move.\n\nSigned-off-by: Edward Z. Yang <ezyang@fb.com>\nCloses https://github.com/pytorch/pytorch/pull/9087\n\nDifferential Revision: D8712072\n"}