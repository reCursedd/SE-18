{"url": "https://api.github.com/repos/pytorch/pytorch/issues/12535", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/12535/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/12535/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/12535/events", "html_url": "https://github.com/pytorch/pytorch/issues/12535", "id": 368722612, "node_id": "MDU6SXNzdWUzNjg3MjI2MTI=", "number": 12535, "title": "[CMake] Linking against Intel OpenMP", "user": {"login": "mratsim", "id": 22738317, "node_id": "MDQ6VXNlcjIyNzM4MzE3", "avatar_url": "https://avatars3.githubusercontent.com/u/22738317?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mratsim", "html_url": "https://github.com/mratsim", "followers_url": "https://api.github.com/users/mratsim/followers", "following_url": "https://api.github.com/users/mratsim/following{/other_user}", "gists_url": "https://api.github.com/users/mratsim/gists{/gist_id}", "starred_url": "https://api.github.com/users/mratsim/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mratsim/subscriptions", "organizations_url": "https://api.github.com/users/mratsim/orgs", "repos_url": "https://api.github.com/users/mratsim/repos", "events_url": "https://api.github.com/users/mratsim/events{/privacy}", "received_events_url": "https://api.github.com/users/mratsim/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": {"login": "yinghai", "id": 1100089, "node_id": "MDQ6VXNlcjExMDAwODk=", "avatar_url": "https://avatars1.githubusercontent.com/u/1100089?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yinghai", "html_url": "https://github.com/yinghai", "followers_url": "https://api.github.com/users/yinghai/followers", "following_url": "https://api.github.com/users/yinghai/following{/other_user}", "gists_url": "https://api.github.com/users/yinghai/gists{/gist_id}", "starred_url": "https://api.github.com/users/yinghai/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yinghai/subscriptions", "organizations_url": "https://api.github.com/users/yinghai/orgs", "repos_url": "https://api.github.com/users/yinghai/repos", "events_url": "https://api.github.com/users/yinghai/events{/privacy}", "received_events_url": "https://api.github.com/users/yinghai/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "yinghai", "id": 1100089, "node_id": "MDQ6VXNlcjExMDAwODk=", "avatar_url": "https://avatars1.githubusercontent.com/u/1100089?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yinghai", "html_url": "https://github.com/yinghai", "followers_url": "https://api.github.com/users/yinghai/followers", "following_url": "https://api.github.com/users/yinghai/following{/other_user}", "gists_url": "https://api.github.com/users/yinghai/gists{/gist_id}", "starred_url": "https://api.github.com/users/yinghai/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yinghai/subscriptions", "organizations_url": "https://api.github.com/users/yinghai/orgs", "repos_url": "https://api.github.com/users/yinghai/repos", "events_url": "https://api.github.com/users/yinghai/events{/privacy}", "received_events_url": "https://api.github.com/users/yinghai/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2018-10-10T15:26:46Z", "updated_at": "2018-10-10T18:51:22Z", "closed_at": null, "author_association": "CONTRIBUTOR", "body_html": "<p>Checking the current CMAKE files, it seems like PyTorch will always use the compile OpenMP libraries due to <code>-fopenmp</code> in:</p>\n<p><div class=\"border rounded-1 my-2\">\n  <div class=\"f6 px-3 py-2 lh-condensed border-bottom bg-gray-light\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/pytorch/pytorch/blob/033e95765c19e208a0ac04376ae7cacb62940e9a/torch/CMakeLists.txt#L314-L321\">pytorch/torch/CMakeLists.txt</a>\n    </p>\n    <p class=\"mb-0 text-gray-light\">\n        Lines 314 to 321\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/pytorch/pytorch/commit/033e95765c19e208a0ac04376ae7cacb62940e9a\">033e957</a>\n    </p>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L314\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"314\"></td>\n          <td id=\"LC314\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-c1\">find_package</span>(OpenMP) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L315\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"315\"></td>\n          <td id=\"LC315\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-k\">if</span>(OPENMP_FOUND) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L316\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"316\"></td>\n          <td id=\"LC316\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   <span class=\"pl-k\">if</span> (VERBOSE) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L317\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"317\"></td>\n          <td id=\"LC317\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     <span class=\"pl-c1\">message</span>(STATUS <span class=\"pl-s\">\"Compiling with OpenMP\"</span>) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L318\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"318\"></td>\n          <td id=\"LC318\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   <span class=\"pl-k\">endif</span>() </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L319\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"319\"></td>\n          <td id=\"LC319\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   <span class=\"pl-c1\">target_compile_options</span>(torch <span class=\"pl-k\">INTERFACE</span> -fopenmp) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L320\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"320\"></td>\n          <td id=\"LC320\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   <span class=\"pl-c1\">target_link_libraries</span>(torch -fopenmp) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L321\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"321\"></td>\n          <td id=\"LC321\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-k\">endif</span>() </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n</p>\n<p>MKL-DNN readme advises to not mix the OpenMP libraries, and to not use <code>-fopenmp</code> when using Intel-OpenMP as it would link against both intel and the compiler OpenMP: <a href=\"https://github.com/intel/mkl-dnn/blob/17c33b596670123f8cf74afbdcc722b7ec1e01a2/README.md#intel-mkl-dnn-with-openmp\">https://github.com/intel/mkl-dnn/blob/17c33b596670123f8cf74afbdcc722b7ec1e01a2/README.md#intel-mkl-dnn-with-openmp</a></p>\n<blockquote>\n<p>Intel MKL-DNN library built with binary dependency will link against Intel OpenMP runtime included with Intel MKL small libraries package. Intel OpenMP runtime is binary compatible with GNU OpenMP and CLANG OpenMP runtimes and is recommended for the best performance results. Here are example linklines for GNU C++ compiler and Intel C++ compiler.</p>\n<p><code>g++ -std=c++11 -I${MKLDNNROOT}/include -L${MKLDNNROOT}/lib simple_net.cpp -lmkldnn -lmklml_intel -liomp5</code><br>\n<code>icpc -std=c++11 -qopenmp -I${MKLDNNROOT}/include -L${MKLDNNROOT}/lib simple_net.cpp -lmkldnn -lmklml_intel</code></p>\n<p>Using GNU compiler with -fopenmp and -liomp5 options will link the application with both Intel and GNU OpenMP runtime libraries. This will lead to undefined behavior of the application.</p>\n</blockquote>\n<p>Also the MKL cmake seems to link against both gnu and intel threads?</p>\n<p><div class=\"border rounded-1 my-2\">\n  <div class=\"f6 px-3 py-2 lh-condensed border-bottom bg-gray-light\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/pytorch/pytorch/blob/033e95765c19e208a0ac04376ae7cacb62940e9a/cmake/Modules/FindMKL.cmake#L55-L66\">pytorch/cmake/Modules/FindMKL.cmake</a>\n    </p>\n    <p class=\"mb-0 text-gray-light\">\n        Lines 55 to 66\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/pytorch/pytorch/commit/033e95765c19e208a0ac04376ae7cacb62940e9a\">033e957</a>\n    </p>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L55\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"55\"></td>\n          <td id=\"LC55\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-k\">IF</span>(CMAKE_COMPILER_IS_GNUCC) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L56\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"56\"></td>\n          <td id=\"LC56\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   <span class=\"pl-c1\">SET</span>(mklthreads <span class=\"pl-s\">\"mkl_gnu_thread\"</span> <span class=\"pl-s\">\"mkl_intel_thread\"</span>) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L57\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"57\"></td>\n          <td id=\"LC57\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   <span class=\"pl-c1\">SET</span>(mklifaces  <span class=\"pl-s\">\"intel\"</span> <span class=\"pl-s\">\"gf\"</span>) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L58\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"58\"></td>\n          <td id=\"LC58\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   <span class=\"pl-c1\">SET</span>(mklrtls <span class=\"pl-s\">\"gomp\"</span> <span class=\"pl-s\">\"iomp5\"</span>) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L59\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"59\"></td>\n          <td id=\"LC59\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-k\">ELSE</span>(CMAKE_COMPILER_IS_GNUCC) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L60\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"60\"></td>\n          <td id=\"LC60\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   <span class=\"pl-c1\">SET</span>(mklthreads <span class=\"pl-s\">\"mkl_intel_thread\"</span>) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L61\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"61\"></td>\n          <td id=\"LC61\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   <span class=\"pl-c1\">SET</span>(mklifaces  <span class=\"pl-s\">\"intel\"</span>) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L62\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"62\"></td>\n          <td id=\"LC62\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   <span class=\"pl-c1\">SET</span>(mklrtls <span class=\"pl-s\">\"iomp5\"</span> <span class=\"pl-s\">\"guide\"</span>) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L63\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"63\"></td>\n          <td id=\"LC63\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   <span class=\"pl-k\">IF</span> (MSVC) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L64\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"64\"></td>\n          <td id=\"LC64\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     <span class=\"pl-c1\">SET</span>(mklrtls <span class=\"pl-s\">\"libiomp5md\"</span>) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L65\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"65\"></td>\n          <td id=\"LC65\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   <span class=\"pl-k\">ENDIF</span> (MSVC) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L66\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"66\"></td>\n          <td id=\"LC66\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-k\">ENDIF</span> (CMAKE_COMPILER_IS_GNUCC) </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n</p>", "body_text": "Checking the current CMAKE files, it seems like PyTorch will always use the compile OpenMP libraries due to -fopenmp in:\n\n  \n    \n      pytorch/torch/CMakeLists.txt\n    \n    \n        Lines 314 to 321\n      in\n      033e957\n    \n    \n    \n    \n\n        \n          \n           find_package(OpenMP) \n        \n\n        \n          \n           if(OPENMP_FOUND) \n        \n\n        \n          \n             if (VERBOSE) \n        \n\n        \n          \n               message(STATUS \"Compiling with OpenMP\") \n        \n\n        \n          \n             endif() \n        \n\n        \n          \n             target_compile_options(torch INTERFACE -fopenmp) \n        \n\n        \n          \n             target_link_libraries(torch -fopenmp) \n        \n\n        \n          \n           endif() \n        \n    \n  \n\n\nMKL-DNN readme advises to not mix the OpenMP libraries, and to not use -fopenmp when using Intel-OpenMP as it would link against both intel and the compiler OpenMP: https://github.com/intel/mkl-dnn/blob/17c33b596670123f8cf74afbdcc722b7ec1e01a2/README.md#intel-mkl-dnn-with-openmp\n\nIntel MKL-DNN library built with binary dependency will link against Intel OpenMP runtime included with Intel MKL small libraries package. Intel OpenMP runtime is binary compatible with GNU OpenMP and CLANG OpenMP runtimes and is recommended for the best performance results. Here are example linklines for GNU C++ compiler and Intel C++ compiler.\ng++ -std=c++11 -I${MKLDNNROOT}/include -L${MKLDNNROOT}/lib simple_net.cpp -lmkldnn -lmklml_intel -liomp5\nicpc -std=c++11 -qopenmp -I${MKLDNNROOT}/include -L${MKLDNNROOT}/lib simple_net.cpp -lmkldnn -lmklml_intel\nUsing GNU compiler with -fopenmp and -liomp5 options will link the application with both Intel and GNU OpenMP runtime libraries. This will lead to undefined behavior of the application.\n\nAlso the MKL cmake seems to link against both gnu and intel threads?\n\n  \n    \n      pytorch/cmake/Modules/FindMKL.cmake\n    \n    \n        Lines 55 to 66\n      in\n      033e957\n    \n    \n    \n    \n\n        \n          \n           IF(CMAKE_COMPILER_IS_GNUCC) \n        \n\n        \n          \n             SET(mklthreads \"mkl_gnu_thread\" \"mkl_intel_thread\") \n        \n\n        \n          \n             SET(mklifaces  \"intel\" \"gf\") \n        \n\n        \n          \n             SET(mklrtls \"gomp\" \"iomp5\") \n        \n\n        \n          \n           ELSE(CMAKE_COMPILER_IS_GNUCC) \n        \n\n        \n          \n             SET(mklthreads \"mkl_intel_thread\") \n        \n\n        \n          \n             SET(mklifaces  \"intel\") \n        \n\n        \n          \n             SET(mklrtls \"iomp5\" \"guide\") \n        \n\n        \n          \n             IF (MSVC) \n        \n\n        \n          \n               SET(mklrtls \"libiomp5md\") \n        \n\n        \n          \n             ENDIF (MSVC) \n        \n\n        \n          \n           ENDIF (CMAKE_COMPILER_IS_GNUCC)", "body": "Checking the current CMAKE files, it seems like PyTorch will always use the compile OpenMP libraries due to `-fopenmp` in:\r\n\r\nhttps://github.com/pytorch/pytorch/blob/033e95765c19e208a0ac04376ae7cacb62940e9a/torch/CMakeLists.txt#L314-L321\r\n\r\nMKL-DNN readme advises to not mix the OpenMP libraries, and to not use `-fopenmp` when using Intel-OpenMP as it would link against both intel and the compiler OpenMP: https://github.com/intel/mkl-dnn/blob/17c33b596670123f8cf74afbdcc722b7ec1e01a2/README.md#intel-mkl-dnn-with-openmp\r\n\r\n> Intel MKL-DNN library built with binary dependency will link against Intel OpenMP runtime included with Intel MKL small libraries package. Intel OpenMP runtime is binary compatible with GNU OpenMP and CLANG OpenMP runtimes and is recommended for the best performance results. Here are example linklines for GNU C++ compiler and Intel C++ compiler.\r\n>\r\n>\t`g++ -std=c++11 -I${MKLDNNROOT}/include -L${MKLDNNROOT}/lib simple_net.cpp -lmkldnn -lmklml_intel -liomp5`\r\n>\t`icpc -std=c++11 -qopenmp -I${MKLDNNROOT}/include -L${MKLDNNROOT}/lib simple_net.cpp -lmkldnn -lmklml_intel`\r\n>\r\n> Using GNU compiler with -fopenmp and -liomp5 options will link the application with both Intel and GNU OpenMP runtime libraries. This will lead to undefined behavior of the application.\r\n\r\n\r\nAlso the MKL cmake seems to link against both gnu and intel threads?\r\n\r\nhttps://github.com/pytorch/pytorch/blob/033e95765c19e208a0ac04376ae7cacb62940e9a/cmake/Modules/FindMKL.cmake#L55-L66"}