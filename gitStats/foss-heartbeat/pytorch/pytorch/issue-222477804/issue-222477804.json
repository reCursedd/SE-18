{"url": "https://api.github.com/repos/pytorch/pytorch/issues/1280", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/1280/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/1280/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/1280/events", "html_url": "https://github.com/pytorch/pytorch/issues/1280", "id": 222477804, "node_id": "MDU6SXNzdWUyMjI0Nzc4MDQ=", "number": 1280, "title": "Multi-GPU forward pass fails if first GPU id is not 0", "user": {"login": "achaiah", "id": 3967183, "node_id": "MDQ6VXNlcjM5NjcxODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3967183?v=4", "gravatar_id": "", "url": "https://api.github.com/users/achaiah", "html_url": "https://github.com/achaiah", "followers_url": "https://api.github.com/users/achaiah/followers", "following_url": "https://api.github.com/users/achaiah/following{/other_user}", "gists_url": "https://api.github.com/users/achaiah/gists{/gist_id}", "starred_url": "https://api.github.com/users/achaiah/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/achaiah/subscriptions", "organizations_url": "https://api.github.com/users/achaiah/orgs", "repos_url": "https://api.github.com/users/achaiah/repos", "events_url": "https://api.github.com/users/achaiah/events{/privacy}", "received_events_url": "https://api.github.com/users/achaiah/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 22, "created_at": "2017-04-18T16:44:39Z", "updated_at": "2018-04-05T19:46:52Z", "closed_at": "2017-04-19T16:49:05Z", "author_association": "NONE", "body_html": "<p>I can specify multiple GPU IDs and train a network using them just fine. However, when it comes time to run a validation dataset through the trained network, pytorch throws an error when using a list of GPU IDs unless the GPU ID list starts with id 0.</p>\n<p>Here's a sample function that will cause an error:</p>\n<pre><code>def visualize_model(model=None, num_images=5, use_gpu=False, gpu_ids=[0]):\n    print(\"Using GPU: \" + str(gpu_ids[0]))\n    for i, data in enumerate(dset_loaders['val']):\n        inputs, labels = data\n        if use_gpu:\n            inputs, labels = Variable(inputs.cuda(device=gpu_ids[0])), Variable(labels.cuda(device=gpu_ids[0]))\n        else:\n            inputs, labels = Variable(inputs), Variable(labels)\n\n        outputs = model(inputs)      # ERROR HERE!\n        _, preds = torch.max(outputs.data, 1)\n\n        plt.figure()\n        imshow(inputs.cpu().data[0])\n        plt.title('pred: {}'.format(dset_classes[labels.data[0]]))\n        plt.show()\n\n        if i == num_images - 1:\n            break\n</code></pre>\n<p>If I train the network using <code>gpu_ids = [0,1,2]</code> the function above executes with no problem.  However, if I train the network using <code>gpu_ids = [1,2,3]</code> it will throw an error.</p>", "body_text": "I can specify multiple GPU IDs and train a network using them just fine. However, when it comes time to run a validation dataset through the trained network, pytorch throws an error when using a list of GPU IDs unless the GPU ID list starts with id 0.\nHere's a sample function that will cause an error:\ndef visualize_model(model=None, num_images=5, use_gpu=False, gpu_ids=[0]):\n    print(\"Using GPU: \" + str(gpu_ids[0]))\n    for i, data in enumerate(dset_loaders['val']):\n        inputs, labels = data\n        if use_gpu:\n            inputs, labels = Variable(inputs.cuda(device=gpu_ids[0])), Variable(labels.cuda(device=gpu_ids[0]))\n        else:\n            inputs, labels = Variable(inputs), Variable(labels)\n\n        outputs = model(inputs)      # ERROR HERE!\n        _, preds = torch.max(outputs.data, 1)\n\n        plt.figure()\n        imshow(inputs.cpu().data[0])\n        plt.title('pred: {}'.format(dset_classes[labels.data[0]]))\n        plt.show()\n\n        if i == num_images - 1:\n            break\n\nIf I train the network using gpu_ids = [0,1,2] the function above executes with no problem.  However, if I train the network using gpu_ids = [1,2,3] it will throw an error.", "body": "I can specify multiple GPU IDs and train a network using them just fine. However, when it comes time to run a validation dataset through the trained network, pytorch throws an error when using a list of GPU IDs unless the GPU ID list starts with id 0.\r\n\r\nHere's a sample function that will cause an error:\r\n\r\n```\r\ndef visualize_model(model=None, num_images=5, use_gpu=False, gpu_ids=[0]):\r\n    print(\"Using GPU: \" + str(gpu_ids[0]))\r\n    for i, data in enumerate(dset_loaders['val']):\r\n        inputs, labels = data\r\n        if use_gpu:\r\n            inputs, labels = Variable(inputs.cuda(device=gpu_ids[0])), Variable(labels.cuda(device=gpu_ids[0]))\r\n        else:\r\n            inputs, labels = Variable(inputs), Variable(labels)\r\n\r\n        outputs = model(inputs)      # ERROR HERE!\r\n        _, preds = torch.max(outputs.data, 1)\r\n\r\n        plt.figure()\r\n        imshow(inputs.cpu().data[0])\r\n        plt.title('pred: {}'.format(dset_classes[labels.data[0]]))\r\n        plt.show()\r\n\r\n        if i == num_images - 1:\r\n            break\r\n ```\r\n\r\nIf I train the network using `gpu_ids = [0,1,2]` the function above executes with no problem.  However, if I train the network using `gpu_ids = [1,2,3]` it will throw an error."}