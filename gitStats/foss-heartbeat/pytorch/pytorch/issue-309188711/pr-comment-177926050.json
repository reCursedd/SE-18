{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/177926050", "pull_request_review_id": 107893414, "id": 177926050, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NzkyNjA1MA==", "diff_hunk": "@@ -135,128 +135,138 @@ THSTensor *THSTensor_(new)(void)\n /* Pointer-copy init */\n THSTensor *THSTensor_(newWithTensor)(THLongTensor *indices, THTensor *values)\n {\n-  return THSTensor_(newWithTensorAndSize)(indices, values, NULL);\n+  // If sizes are not given, it is inferred as max index of each dim.\n+  int64_t nDimI = THLongTensor_size(indices, 0);\n+  int64_t nDimV = THTensor_(nDimension)(values) - 1;\n+\n+  THSTensor *self = THSTensor_(new)();\n+\n+  THLongTensor *ignore = THLongTensor_new();\n+  THLongTensor *computed_indices_sizes = THLongTensor_new();\n+  THLongTensor *computed_sizes = THLongTensor_newWithSize1d(nDimI + nDimV);\n+  THLongTensor_max(computed_indices_sizes, ignore, indices, 1, 1);\n+  THLongTensor_add(computed_indices_sizes, computed_indices_sizes, 1);\n+  for (int d = 0; d < nDimI; d++) {\n+      THTensor_fastSet1d(computed_sizes, d, THTensor_fastGet1d(computed_indices_sizes, d));\n+  }\n+  for (int d = 0; d < nDimV; d++) {\n+      THTensor_fastSet1d(computed_sizes, nDimI + d, THTensor_(size)(values, d + 1));\n+  }\n+  THSTensor_(rawResize)(self, nDimI, nDimV, THLongTensor_data(computed_sizes));\n+  THLongTensor_free(computed_indices_sizes);\n+  THLongTensor_free(computed_sizes);\n+  THLongTensor_free(ignore);\n+\n+  // NB: by default, we do NOT clone indices/values into the sparse tensor.\n+  // Efficient API by default!\n+  THSTensor_(_move)(self, THLongTensor_newWithTensor(indices), THTensor_(newWithTensor)(values));", "path": "aten/src/THS/generic/THSTensor.cpp", "position": null, "original_position": 29, "commit_id": "b7fb49ab274f516e06afb0eb02ddec40aae59253", "original_commit_id": "ba729e6ef443e55120c553ab93cf88987725e23a", "user": {"login": "SsnL", "id": 5674597, "node_id": "MDQ6VXNlcjU2NzQ1OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5674597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SsnL", "html_url": "https://github.com/SsnL", "followers_url": "https://api.github.com/users/SsnL/followers", "following_url": "https://api.github.com/users/SsnL/following{/other_user}", "gists_url": "https://api.github.com/users/SsnL/gists{/gist_id}", "starred_url": "https://api.github.com/users/SsnL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SsnL/subscriptions", "organizations_url": "https://api.github.com/users/SsnL/orgs", "repos_url": "https://api.github.com/users/SsnL/repos", "events_url": "https://api.github.com/users/SsnL/events{/privacy}", "received_events_url": "https://api.github.com/users/SsnL/received_events", "type": "User", "site_admin": false}, "body": "A local helper function would be great :)", "created_at": "2018-03-29T00:24:40Z", "updated_at": "2018-11-23T15:41:16Z", "html_url": "https://github.com/pytorch/pytorch/pull/6058#discussion_r177926050", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/6058", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/177926050"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/6058#discussion_r177926050"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/6058"}}, "body_html": "<p>A local helper function would be great :)</p>", "body_text": "A local helper function would be great :)", "in_reply_to_id": 177915456}