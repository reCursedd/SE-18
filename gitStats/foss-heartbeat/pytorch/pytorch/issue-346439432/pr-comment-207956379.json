{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/207956379", "pull_request_review_id": 143672043, "id": 207956379, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzk1NjM3OQ==", "diff_hunk": "@@ -674,25 +674,40 @@ Caffe2Ops Caffe2Backend::CreateGemm(\n \n   auto trans_a = onnx_node->attributes.get<int64_t>(\"transA\", 0L);\n   auto trans_b = onnx_node->attributes.get<int64_t>(\"transB\", 0L);\n-  auto broadcast = onnx_node->attributes.get<int64_t>(\"broadcast\", 0L);\n+  // Support broadcast by default when opset_version > 6.\n+  auto broadcast =\n+    onnx_node->attributes.get<int64_t>(\"broadcast\",\n+                                       (ctx.opset_version() > 6) ? 1L : 0L);\n \n   bool use_fc = false;\n-  if ((!trans_a) && trans_b) {\n-    if (broadcast) {\n-      use_fc = true;\n-    } else {\n-      const auto input_c_vi_iter = ctx.value_infos().find(node.input(2));\n-      if (input_c_vi_iter != ctx.value_infos().end() &&\n-          input_c_vi_iter->second.type().tensor_type().shape().dim_size() ==\n-              1) {\n-        use_fc = true;\n+  if (!trans_a && broadcast) {\n+    // If we have broadcast and the input_c's dim matching the FC requirement,\n+    // we could convert this onnx op to caffe2 FC op.\n+    const auto input_c_vi_iter = ctx.value_infos().find(node.input(2));\n+    const auto input_b_vi_iter = ctx.value_infos().find(node.input(1));\n+    if (input_c_vi_iter != ctx.value_infos().end() &&\n+        input_c_vi_iter->second.type().tensor_type().has_shape() &&\n+        input_b_vi_iter != ctx.value_infos().end() &&\n+        input_b_vi_iter->second.type().tensor_type().has_shape()) {\n+      const auto input_c_shape = input_c_vi_iter->second.type().tensor_type().shape();\n+      const auto input_b_shape = input_b_vi_iter->second.type().tensor_type().shape();\n+      int input_b_last_dim_index = (trans_b) ? 0 : 1;\n+      if (input_c_shape.dim_size()==1 && input_c_shape.dim(0).has_dim_value() &&\n+          input_b_shape.dim_size()==2 && input_b_shape.dim(input_b_last_dim_index).has_dim_value()) {\n+        if (input_c_shape.dim(0).dim_value()==input_b_shape.dim(input_b_last_dim_index).dim_value()) {", "path": "caffe2/onnx/backend.cc", "position": null, "original_position": 34, "commit_id": "912e3b5d70711a4fcdd8716893239deee8de93c3", "original_commit_id": "05c571fcd0aef9c63b071ce6a1b213e243acf495", "user": {"login": "JerryShih", "id": 5842681, "node_id": "MDQ6VXNlcjU4NDI2ODE=", "avatar_url": "https://avatars3.githubusercontent.com/u/5842681?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JerryShih", "html_url": "https://github.com/JerryShih", "followers_url": "https://api.github.com/users/JerryShih/followers", "following_url": "https://api.github.com/users/JerryShih/following{/other_user}", "gists_url": "https://api.github.com/users/JerryShih/gists{/gist_id}", "starred_url": "https://api.github.com/users/JerryShih/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JerryShih/subscriptions", "organizations_url": "https://api.github.com/users/JerryShih/orgs", "repos_url": "https://api.github.com/users/JerryShih/repos", "events_url": "https://api.github.com/users/JerryShih/events{/privacy}", "received_events_url": "https://api.github.com/users/JerryShih/received_events", "type": "User", "site_admin": false}, "body": "I still can't catch the idea. If there is no shape info, we can't make sure the input c fit the FC op's requirement(just like the scalar c case in previous comment). In this case, I think we should just use \"MatMul+add\". \r\nWhat did I miss?\r\n\r\n@bddppq @houseroad ", "created_at": "2018-08-06T16:40:31Z", "updated_at": "2018-11-23T15:48:49Z", "html_url": "https://github.com/pytorch/pytorch/pull/10108#discussion_r207956379", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/10108", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/207956379"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/10108#discussion_r207956379"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/10108"}}, "body_html": "<p>I still can't catch the idea. If there is no shape info, we can't make sure the input c fit the FC op's requirement(just like the scalar c case in previous comment). In this case, I think we should just use \"MatMul+add\".<br>\nWhat did I miss?</p>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=9300575\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/bddppq\">@bddppq</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=30275821\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/houseroad\">@houseroad</a></p>", "body_text": "I still can't catch the idea. If there is no shape info, we can't make sure the input c fit the FC op's requirement(just like the scalar c case in previous comment). In this case, I think we should just use \"MatMul+add\".\nWhat did I miss?\n@bddppq @houseroad", "in_reply_to_id": 207768393}