{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/207918009", "pull_request_review_id": 143625180, "id": 207918009, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzkxODAwOQ==", "diff_hunk": "@@ -220,32 +314,69 @@ def test_gemm_conversion(self):\n             op_names.append(op.type)\n         self.assertEqual(op_names, ['Scale', 'Scale', 'MatMul', 'Add'])\n \n-        # with shape info (that indicates C is 1D), gemm will be\n-        # converted to FC\n-        _, op_strs = backend.convert_node(node_def.SerializeToString(\n-        ), [make_tensor_value_info(\"C\", onnx.TensorProto.FLOAT, (1,)).SerializeToString()])\n+        # opset7\n+        # with B's and C's shape info, gemm will be\n+        # converted to FC/FCTransposed\n+        _, op_strs = backend.convert_node(node_def_transpose_b.SerializeToString(\n+        ), [make_tensor_value_info(\"B\", onnx.TensorProto.FLOAT, (3,2)).SerializeToString(),\n+            make_tensor_value_info(\"C\", onnx.TensorProto.FLOAT, (3,)).SerializeToString()],\n+        7)\n         op_names = []\n         for s in op_strs:\n             op = caffe2_pb2.OperatorDef()\n             op.ParseFromString(s)\n             op_names.append(op.type)\n         self.assertEqual(op_names, ['Scale', 'Scale', 'FC'])\n \n-        # or with broadcast, gemm will be converted to fc\n-        node_def = make_node(\n-            'Gemm',\n-            ['A', 'B', 'C'],\n-            [\"Y\"],\n-            transB=True,\n-            broadcast=1)\n+        _, op_strs = backend.convert_node(node_def.SerializeToString(\n+        ), [make_tensor_value_info(\"B\", onnx.TensorProto.FLOAT, (2,3)).SerializeToString(),\n+            make_tensor_value_info(\"C\", onnx.TensorProto.FLOAT, (3,)).SerializeToString()],\n+        7)\n+        op_names = []\n+        for s in op_strs:\n+            op = caffe2_pb2.OperatorDef()\n+            op.ParseFromString(s)\n+            op_names.append(op.type)\n+        self.assertEqual(op_names, ['Scale', 'Scale', 'FCTransposed'])\n \n-        _, op_strs = backend.convert_node(node_def.SerializeToString())\n+        # opset6 without broadcast\n+        # even though with B's and C's shape info, gemm will be\n+        # will be converted to matmul + add\n+        _, op_strs = backend.convert_node(node_def.SerializeToString(\n+        ), [make_tensor_value_info(\"B\", onnx.TensorProto.FLOAT, (3,2)).SerializeToString(),\n+            make_tensor_value_info(\"C\", onnx.TensorProto.FLOAT, (3,)).SerializeToString()],", "path": "caffe2/python/onnx/tests/c2_ref_test.py", "position": null, "original_position": 195, "commit_id": "912e3b5d70711a4fcdd8716893239deee8de93c3", "original_commit_id": "05c571fcd0aef9c63b071ce6a1b213e243acf495", "user": {"login": "JerryShih", "id": 5842681, "node_id": "MDQ6VXNlcjU4NDI2ODE=", "avatar_url": "https://avatars3.githubusercontent.com/u/5842681?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JerryShih", "html_url": "https://github.com/JerryShih", "followers_url": "https://api.github.com/users/JerryShih/followers", "following_url": "https://api.github.com/users/JerryShih/following{/other_user}", "gists_url": "https://api.github.com/users/JerryShih/gists{/gist_id}", "starred_url": "https://api.github.com/users/JerryShih/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JerryShih/subscriptions", "organizations_url": "https://api.github.com/users/JerryShih/orgs", "repos_url": "https://api.github.com/users/JerryShih/repos", "events_url": "https://api.github.com/users/JerryShih/events{/privacy}", "received_events_url": "https://api.github.com/users/JerryShih/received_events", "type": "User", "site_admin": false}, "body": "checked.", "created_at": "2018-08-06T14:46:31Z", "updated_at": "2018-11-23T15:48:48Z", "html_url": "https://github.com/pytorch/pytorch/pull/10108#discussion_r207918009", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/10108", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/207918009"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/10108#discussion_r207918009"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/10108"}}, "body_html": "<p>checked.</p>", "body_text": "checked.", "in_reply_to_id": 207768457}