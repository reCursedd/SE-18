{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/207770771", "pull_request_review_id": 143448467, "id": 207770771, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzc3MDc3MQ==", "diff_hunk": "@@ -674,25 +674,40 @@ Caffe2Ops Caffe2Backend::CreateGemm(\n \n   auto trans_a = onnx_node->attributes.get<int64_t>(\"transA\", 0L);\n   auto trans_b = onnx_node->attributes.get<int64_t>(\"transB\", 0L);\n-  auto broadcast = onnx_node->attributes.get<int64_t>(\"broadcast\", 0L);\n+  // Support broadcast by default when opset_version > 6.\n+  auto broadcast =\n+    onnx_node->attributes.get<int64_t>(\"broadcast\",\n+                                       (ctx.opset_version() > 6) ? 1L : 0L);\n \n   bool use_fc = false;\n-  if ((!trans_a) && trans_b) {\n-    if (broadcast) {\n-      use_fc = true;\n-    } else {\n-      const auto input_c_vi_iter = ctx.value_infos().find(node.input(2));\n-      if (input_c_vi_iter != ctx.value_infos().end() &&\n-          input_c_vi_iter->second.type().tensor_type().shape().dim_size() ==\n-              1) {\n-        use_fc = true;\n+  if (!trans_a && broadcast) {\n+    // If we have broadcast and the input_c's dim matching the FC requirement,\n+    // we could convert this onnx op to caffe2 FC op.\n+    const auto input_c_vi_iter = ctx.value_infos().find(node.input(2));\n+    const auto input_b_vi_iter = ctx.value_infos().find(node.input(1));\n+    if (input_c_vi_iter != ctx.value_infos().end() &&\n+        input_c_vi_iter->second.type().tensor_type().has_shape() &&\n+        input_b_vi_iter != ctx.value_infos().end() &&\n+        input_b_vi_iter->second.type().tensor_type().has_shape()) {\n+      const auto input_c_shape = input_c_vi_iter->second.type().tensor_type().shape();\n+      const auto input_b_shape = input_b_vi_iter->second.type().tensor_type().shape();\n+      int input_b_last_dim_index = (trans_b) ? 0 : 1;\n+      if (input_c_shape.dim_size()==1 && input_c_shape.dim(0).has_dim_value() &&\n+          input_b_shape.dim_size()==2 && input_b_shape.dim(input_b_last_dim_index).has_dim_value()) {\n+        if (input_c_shape.dim(0).dim_value()==input_b_shape.dim(input_b_last_dim_index).dim_value()) {", "path": "caffe2/onnx/backend.cc", "position": null, "original_position": 34, "commit_id": "912e3b5d70711a4fcdd8716893239deee8de93c3", "original_commit_id": "05c571fcd0aef9c63b071ce6a1b213e243acf495", "user": {"login": "bddppq", "id": 9300575, "node_id": "MDQ6VXNlcjkzMDA1NzU=", "avatar_url": "https://avatars2.githubusercontent.com/u/9300575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bddppq", "html_url": "https://github.com/bddppq", "followers_url": "https://api.github.com/users/bddppq/followers", "following_url": "https://api.github.com/users/bddppq/following{/other_user}", "gists_url": "https://api.github.com/users/bddppq/gists{/gist_id}", "starred_url": "https://api.github.com/users/bddppq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bddppq/subscriptions", "organizations_url": "https://api.github.com/users/bddppq/orgs", "repos_url": "https://api.github.com/users/bddppq/repos", "events_url": "https://api.github.com/users/bddppq/events{/privacy}", "received_events_url": "https://api.github.com/users/bddppq/received_events", "type": "User", "site_admin": false}, "body": "IMO the guideline is:\r\n1. when the shape information are available, do strict checking (and raise error if we found they are invalid)\r\n2. otherwise assume the model is valid and leverage it to assume certain shapes.", "created_at": "2018-08-06T04:19:35Z", "updated_at": "2018-11-23T15:48:48Z", "html_url": "https://github.com/pytorch/pytorch/pull/10108#discussion_r207770771", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/10108", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/207770771"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/10108#discussion_r207770771"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/10108"}}, "body_html": "<p>IMO the guideline is:</p>\n<ol>\n<li>when the shape information are available, do strict checking (and raise error if we found they are invalid)</li>\n<li>otherwise assume the model is valid and leverage it to assume certain shapes.</li>\n</ol>", "body_text": "IMO the guideline is:\n\nwhen the shape information are available, do strict checking (and raise error if we found they are invalid)\notherwise assume the model is valid and leverage it to assume certain shapes.", "in_reply_to_id": 207768393}