{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/207954103", "pull_request_review_id": 143669180, "id": 207954103, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzk1NDEwMw==", "diff_hunk": "@@ -674,25 +674,40 @@ Caffe2Ops Caffe2Backend::CreateGemm(\n \n   auto trans_a = onnx_node->attributes.get<int64_t>(\"transA\", 0L);\n   auto trans_b = onnx_node->attributes.get<int64_t>(\"transB\", 0L);\n-  auto broadcast = onnx_node->attributes.get<int64_t>(\"broadcast\", 0L);\n+  // Support broadcast by default when opset_version > 6.\n+  auto broadcast =\n+    onnx_node->attributes.get<int64_t>(\"broadcast\",\n+                                       (ctx.opset_version() > 6) ? 1L : 0L);\n \n   bool use_fc = false;\n-  if ((!trans_a) && trans_b) {\n-    if (broadcast) {\n-      use_fc = true;\n-    } else {\n-      const auto input_c_vi_iter = ctx.value_infos().find(node.input(2));\n-      if (input_c_vi_iter != ctx.value_infos().end() &&\n-          input_c_vi_iter->second.type().tensor_type().shape().dim_size() ==\n-              1) {\n-        use_fc = true;\n+  if (!trans_a && broadcast) {\n+    // If we have broadcast and the input_c's dim matching the FC requirement,\n+    // we could convert this onnx op to caffe2 FC op.\n+    const auto input_c_vi_iter = ctx.value_infos().find(node.input(2));\n+    const auto input_b_vi_iter = ctx.value_infos().find(node.input(1));\n+    if (input_c_vi_iter != ctx.value_infos().end() &&\n+        input_c_vi_iter->second.type().tensor_type().has_shape() &&\n+        input_b_vi_iter != ctx.value_infos().end() &&", "path": "caffe2/onnx/backend.cc", "position": null, "original_position": 27, "commit_id": "912e3b5d70711a4fcdd8716893239deee8de93c3", "original_commit_id": "05c571fcd0aef9c63b071ce6a1b213e243acf495", "user": {"login": "JerryShih", "id": 5842681, "node_id": "MDQ6VXNlcjU4NDI2ODE=", "avatar_url": "https://avatars3.githubusercontent.com/u/5842681?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JerryShih", "html_url": "https://github.com/JerryShih", "followers_url": "https://api.github.com/users/JerryShih/followers", "following_url": "https://api.github.com/users/JerryShih/following{/other_user}", "gists_url": "https://api.github.com/users/JerryShih/gists{/gist_id}", "starred_url": "https://api.github.com/users/JerryShih/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JerryShih/subscriptions", "organizations_url": "https://api.github.com/users/JerryShih/orgs", "repos_url": "https://api.github.com/users/JerryShih/repos", "events_url": "https://api.github.com/users/JerryShih/events{/privacy}", "received_events_url": "https://api.github.com/users/JerryShih/received_events", "type": "User", "site_admin": false}, "body": "How about these two case if c is a scalar?\r\na)\r\n\r\n        A = np.random.randn(1, 3).astype(np.float32)\r\n        B = np.random.randn(3, 1).astype(np.float32)\r\n        C = np.random.randn(1).astype(np.float32)\r\n        node_def = make_node(\r\n            'Gemm',\r\n            ['A', 'B', 'C'],\r\n            [\"Y\"])\r\n        output = c2.run_node(node_def, [A, B, C])\r\n        np.testing.assert_almost_equal(output[\"Y\"], np.dot(A, B) + C)\r\n\r\nb)\r\n\r\n        A = np.random.randn(3, 2).astype(np.float32)\r\n        B = np.random.randn(2, 4).astype(np.float32)\r\n        C = np.random.randn(1).astype(np.float32)\r\n        node_def = make_node(\r\n            'Gemm',\r\n            ['A', 'B', 'C'],\r\n            [\"Y\"])\r\n        output = c2.run_node(node_def, [A, B, C])\r\n        np.testing.assert_almost_equal(output[\"Y\"], np.dot(A, B) + C)\r\n\r\nThe a) and b) could both use \"MatMul+add\".\r\nThe a) can use FC, but b) can't.\r\nIf there is no B's shape information, we can't recognize which case we have now.\r\n\r\n@bddppq @houseroad ", "created_at": "2018-08-06T16:32:02Z", "updated_at": "2018-11-23T15:48:49Z", "html_url": "https://github.com/pytorch/pytorch/pull/10108#discussion_r207954103", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/10108", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/207954103"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/10108#discussion_r207954103"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/10108"}}, "body_html": "<p>How about these two case if c is a scalar?<br>\na)</p>\n<pre><code>    A = np.random.randn(1, 3).astype(np.float32)\n    B = np.random.randn(3, 1).astype(np.float32)\n    C = np.random.randn(1).astype(np.float32)\n    node_def = make_node(\n        'Gemm',\n        ['A', 'B', 'C'],\n        [\"Y\"])\n    output = c2.run_node(node_def, [A, B, C])\n    np.testing.assert_almost_equal(output[\"Y\"], np.dot(A, B) + C)\n</code></pre>\n<p>b)</p>\n<pre><code>    A = np.random.randn(3, 2).astype(np.float32)\n    B = np.random.randn(2, 4).astype(np.float32)\n    C = np.random.randn(1).astype(np.float32)\n    node_def = make_node(\n        'Gemm',\n        ['A', 'B', 'C'],\n        [\"Y\"])\n    output = c2.run_node(node_def, [A, B, C])\n    np.testing.assert_almost_equal(output[\"Y\"], np.dot(A, B) + C)\n</code></pre>\n<p>The a) and b) could both use \"MatMul+add\".<br>\nThe a) can use FC, but b) can't.<br>\nIf there is no B's shape information, we can't recognize which case we have now.</p>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=9300575\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/bddppq\">@bddppq</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=30275821\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/houseroad\">@houseroad</a></p>", "body_text": "How about these two case if c is a scalar?\na)\n    A = np.random.randn(1, 3).astype(np.float32)\n    B = np.random.randn(3, 1).astype(np.float32)\n    C = np.random.randn(1).astype(np.float32)\n    node_def = make_node(\n        'Gemm',\n        ['A', 'B', 'C'],\n        [\"Y\"])\n    output = c2.run_node(node_def, [A, B, C])\n    np.testing.assert_almost_equal(output[\"Y\"], np.dot(A, B) + C)\n\nb)\n    A = np.random.randn(3, 2).astype(np.float32)\n    B = np.random.randn(2, 4).astype(np.float32)\n    C = np.random.randn(1).astype(np.float32)\n    node_def = make_node(\n        'Gemm',\n        ['A', 'B', 'C'],\n        [\"Y\"])\n    output = c2.run_node(node_def, [A, B, C])\n    np.testing.assert_almost_equal(output[\"Y\"], np.dot(A, B) + C)\n\nThe a) and b) could both use \"MatMul+add\".\nThe a) can use FC, but b) can't.\nIf there is no B's shape information, we can't recognize which case we have now.\n@bddppq @houseroad", "in_reply_to_id": 207768438}