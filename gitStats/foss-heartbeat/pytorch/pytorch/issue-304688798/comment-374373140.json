{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/374373140", "html_url": "https://github.com/pytorch/pytorch/issues/5735#issuecomment-374373140", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/5735", "id": 374373140, "node_id": "MDEyOklzc3VlQ29tbWVudDM3NDM3MzE0MA==", "user": {"login": "inoryy", "id": 195271, "node_id": "MDQ6VXNlcjE5NTI3MQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/195271?v=4", "gravatar_id": "", "url": "https://api.github.com/users/inoryy", "html_url": "https://github.com/inoryy", "followers_url": "https://api.github.com/users/inoryy/followers", "following_url": "https://api.github.com/users/inoryy/following{/other_user}", "gists_url": "https://api.github.com/users/inoryy/gists{/gist_id}", "starred_url": "https://api.github.com/users/inoryy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/inoryy/subscriptions", "organizations_url": "https://api.github.com/users/inoryy/orgs", "repos_url": "https://api.github.com/users/inoryy/repos", "events_url": "https://api.github.com/users/inoryy/events{/privacy}", "received_events_url": "https://api.github.com/users/inoryy/received_events", "type": "User", "site_admin": false}, "created_at": "2018-03-19T20:56:14Z", "updated_at": "2018-03-19T20:56:14Z", "author_association": "NONE", "body_html": "<p>ok, that solves that but now it seems you're targeting some specific <code>gcc</code> version as the one working previously (<code>4.8.5</code>) fails with <code>error: unrecognized command line option \u2018-flifetime-dse=1</code>, which seems to be <code>gcc 6+</code> feature. However, compiling it under <code>gcc 6.4.0</code> crashes with some cryptic message:</p>\n<pre lang=\"[\" data-meta=\"54%] Building NVCC (Device) object src/ATen/CMakeFiles/ATen.dir/native/cuda/ATen_generated_Unique.cu.o\"><code>&lt;..&gt;/pytorch/aten/src/ATen/native/cuda/Embedding.cu(36): warning: function \"__any\"\n/usr/local/cuda/include/device_atomic_functions.h(180): here was declared deprecated (\"__any() is deprecated in favor of __any_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to suppress this warning).\")\n\n/usr/include/c++/6/tuple: In instantiation of \u2018static constexpr bool std::_TC&lt;&lt;anonymous&gt;, _Elements&gt;::_MoveConstructibleTuple() [with _UElements = {std::tuple&lt;at::Tensor&amp;, at::Tensor&amp;, at::Tensor&amp;&gt;}; bool &lt;anonymous&gt; = true; _Elements = {at::Tensor&amp;, at::Tensor&amp;, at::Tensor&amp;}]\u2019:\n/usr/include/c++/6/tuple:626:248:   required by substitution of \u2018template&lt;class ... _UElements, typename std::enable_if&lt;(((std::_TC&lt;(sizeof... (_UElements) == 1), at::Tensor&amp;, at::Tensor&amp;, at::Tensor&amp;&gt;::_NotSameTuple&lt;_UElements ...&gt;() &amp;&amp; std::_TC&lt;(1ul == sizeof... (_UElements)), at::Tensor&amp;, at::Tensor&amp;, at::Tensor&amp;&gt;::_MoveConstructibleTuple&lt;_UElements ...&gt;()) &amp;&amp; std::_TC&lt;(1ul == sizeof... (_UElements)), at::Tensor&amp;, at::Tensor&amp;, at::Tensor&amp;&gt;::_ImplicitlyMoveConvertibleTuple&lt;_UElements ...&gt;()) &amp;&amp; (3ul &gt;= 1)), bool&gt;::type &lt;anonymous&gt; &gt; constexpr std::tuple&lt; &lt;template-parameter-1-1&gt; &gt;::tuple(_UElements&amp;&amp; ...) [with _UElements = {std::tuple&lt;at::Tensor&amp;, at::Tensor&amp;, at::Tensor&amp;&gt;}; typename std::enable_if&lt;(((std::_TC&lt;(sizeof... (_UElements) == 1), at::Tensor&amp;, at::Tensor&amp;, at::Tensor&amp;&gt;::_NotSameTuple&lt;_UElements ...&gt;() &amp;&amp; std::_TC&lt;(1ul == sizeof... (_UElements)), at::Tensor&amp;, at::Tensor&amp;, at::Tensor&amp;&gt;::_MoveConstructibleTuple&lt;_UElements ...&gt;()) &amp;&amp; std::_TC&lt;(1ul == sizeof... (_UElements)), at::Tensor&amp;, at::Tensor&amp;, at::Tensor&amp;&gt;::_ImplicitlyMoveConvertibleTuple&lt;_UElements ...&gt;()) &amp;&amp; (3ul &gt;= 1)), bool&gt;::type &lt;anonymous&gt; = &lt;missing&gt;]\u2019\n&lt;..&gt;/pytorch/torch/lib/build/aten/src/ATen/ATen/Functions.h:1626:61:   required from here\n/usr/include/c++/6/tuple:483:67: error: mismatched argument pack lengths while expanding \u2018std::is_constructible&lt;_Elements, _UElements&amp;&amp;&gt;\u2019\n       return __and_&lt;is_constructible&lt;_Elements, _UElements&amp;&amp;&gt;...&gt;::value;\n</code></pre>", "body_text": "ok, that solves that but now it seems you're targeting some specific gcc version as the one working previously (4.8.5) fails with error: unrecognized command line option \u2018-flifetime-dse=1, which seems to be gcc 6+ feature. However, compiling it under gcc 6.4.0 crashes with some cryptic message:\n<..>/pytorch/aten/src/ATen/native/cuda/Embedding.cu(36): warning: function \"__any\"\n/usr/local/cuda/include/device_atomic_functions.h(180): here was declared deprecated (\"__any() is deprecated in favor of __any_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to suppress this warning).\")\n\n/usr/include/c++/6/tuple: In instantiation of \u2018static constexpr bool std::_TC<<anonymous>, _Elements>::_MoveConstructibleTuple() [with _UElements = {std::tuple<at::Tensor&, at::Tensor&, at::Tensor&>}; bool <anonymous> = true; _Elements = {at::Tensor&, at::Tensor&, at::Tensor&}]\u2019:\n/usr/include/c++/6/tuple:626:248:   required by substitution of \u2018template<class ... _UElements, typename std::enable_if<(((std::_TC<(sizeof... (_UElements) == 1), at::Tensor&, at::Tensor&, at::Tensor&>::_NotSameTuple<_UElements ...>() && std::_TC<(1ul == sizeof... (_UElements)), at::Tensor&, at::Tensor&, at::Tensor&>::_MoveConstructibleTuple<_UElements ...>()) && std::_TC<(1ul == sizeof... (_UElements)), at::Tensor&, at::Tensor&, at::Tensor&>::_ImplicitlyMoveConvertibleTuple<_UElements ...>()) && (3ul >= 1)), bool>::type <anonymous> > constexpr std::tuple< <template-parameter-1-1> >::tuple(_UElements&& ...) [with _UElements = {std::tuple<at::Tensor&, at::Tensor&, at::Tensor&>}; typename std::enable_if<(((std::_TC<(sizeof... (_UElements) == 1), at::Tensor&, at::Tensor&, at::Tensor&>::_NotSameTuple<_UElements ...>() && std::_TC<(1ul == sizeof... (_UElements)), at::Tensor&, at::Tensor&, at::Tensor&>::_MoveConstructibleTuple<_UElements ...>()) && std::_TC<(1ul == sizeof... (_UElements)), at::Tensor&, at::Tensor&, at::Tensor&>::_ImplicitlyMoveConvertibleTuple<_UElements ...>()) && (3ul >= 1)), bool>::type <anonymous> = <missing>]\u2019\n<..>/pytorch/torch/lib/build/aten/src/ATen/ATen/Functions.h:1626:61:   required from here\n/usr/include/c++/6/tuple:483:67: error: mismatched argument pack lengths while expanding \u2018std::is_constructible<_Elements, _UElements&&>\u2019\n       return __and_<is_constructible<_Elements, _UElements&&>...>::value;", "body": "ok, that solves that but now it seems you're targeting some specific `gcc` version as the one working previously (`4.8.5`) fails with `error: unrecognized command line option \u2018-flifetime-dse=1`, which seems to be `gcc 6+` feature. However, compiling it under `gcc 6.4.0` crashes with some cryptic message:\r\n\r\n```[ 54%] Building NVCC (Device) object src/ATen/CMakeFiles/ATen.dir/native/cuda/ATen_generated_Unique.cu.o\r\n<..>/pytorch/aten/src/ATen/native/cuda/Embedding.cu(36): warning: function \"__any\"\r\n/usr/local/cuda/include/device_atomic_functions.h(180): here was declared deprecated (\"__any() is deprecated in favor of __any_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to suppress this warning).\")\r\n\r\n/usr/include/c++/6/tuple: In instantiation of \u2018static constexpr bool std::_TC<<anonymous>, _Elements>::_MoveConstructibleTuple() [with _UElements = {std::tuple<at::Tensor&, at::Tensor&, at::Tensor&>}; bool <anonymous> = true; _Elements = {at::Tensor&, at::Tensor&, at::Tensor&}]\u2019:\r\n/usr/include/c++/6/tuple:626:248:   required by substitution of \u2018template<class ... _UElements, typename std::enable_if<(((std::_TC<(sizeof... (_UElements) == 1), at::Tensor&, at::Tensor&, at::Tensor&>::_NotSameTuple<_UElements ...>() && std::_TC<(1ul == sizeof... (_UElements)), at::Tensor&, at::Tensor&, at::Tensor&>::_MoveConstructibleTuple<_UElements ...>()) && std::_TC<(1ul == sizeof... (_UElements)), at::Tensor&, at::Tensor&, at::Tensor&>::_ImplicitlyMoveConvertibleTuple<_UElements ...>()) && (3ul >= 1)), bool>::type <anonymous> > constexpr std::tuple< <template-parameter-1-1> >::tuple(_UElements&& ...) [with _UElements = {std::tuple<at::Tensor&, at::Tensor&, at::Tensor&>}; typename std::enable_if<(((std::_TC<(sizeof... (_UElements) == 1), at::Tensor&, at::Tensor&, at::Tensor&>::_NotSameTuple<_UElements ...>() && std::_TC<(1ul == sizeof... (_UElements)), at::Tensor&, at::Tensor&, at::Tensor&>::_MoveConstructibleTuple<_UElements ...>()) && std::_TC<(1ul == sizeof... (_UElements)), at::Tensor&, at::Tensor&, at::Tensor&>::_ImplicitlyMoveConvertibleTuple<_UElements ...>()) && (3ul >= 1)), bool>::type <anonymous> = <missing>]\u2019\r\n<..>/pytorch/torch/lib/build/aten/src/ATen/ATen/Functions.h:1626:61:   required from here\r\n/usr/include/c++/6/tuple:483:67: error: mismatched argument pack lengths while expanding \u2018std::is_constructible<_Elements, _UElements&&>\u2019\r\n       return __and_<is_constructible<_Elements, _UElements&&>...>::value;\r\n```"}