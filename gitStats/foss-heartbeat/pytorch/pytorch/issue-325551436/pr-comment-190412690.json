{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/190412690", "pull_request_review_id": 122782320, "id": 190412690, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MDQxMjY5MA==", "diff_hunk": "@@ -0,0 +1,281 @@\n+#include \"ProcessGroupMPI.hpp\"\n+\n+#include <iostream>\n+#include <map>\n+#include \"mpi-ext.h\" // Needed for CUDA-sware check\n+\n+namespace c10d {\n+\n+#define MPI_CHECK(cmd)                                                   \\\n+  do {                                                                   \\\n+    int mpiStatus = cmd;                                                 \\\n+    if (mpiStatus != MPI_SUCCESS) {                                      \\\n+      std::string err = \"MPI error in: \" + std::string(__FILE__) + \":\" + \\\n+          std::to_string(__LINE__) +                                     \\\n+          \", with error code: \" + std::to_string(mpiStatus);             \\\n+      std::cerr << err << std::endl;                                     \\\n+      throw std::runtime_error(err);                                     \\\n+    }                                                                    \\\n+  } while (0)\n+\n+namespace {\n+\n+// Op mapping\n+std::map<ReduceOp, MPI_Op> mpiOp = {\n+    {ReduceOp::MIN, MPI_MIN},\n+    {ReduceOp::MAX, MPI_MAX},\n+    {ReduceOp::SUM, MPI_SUM},\n+    {ReduceOp::PRODUCT, MPI_PROD},\n+};\n+// Type mapping\n+std::map<at::ScalarType, MPI_Datatype> mpiDatatype = {\n+    {at::kByte, MPI_UNSIGNED_CHAR},\n+    {at::kChar, MPI_CHAR},\n+    {at::kDouble, MPI_DOUBLE},\n+    {at::kFloat, MPI_FLOAT},\n+    {at::kInt, MPI_INT},\n+    {at::kLong, MPI_LONG},\n+    {at::kShort, MPI_SHORT},\n+};\n+\n+// Checking CUDA-aware MPI support\n+bool cudaAwareMpiCheck() {\n+// Run time check\n+#if defined(MPIX_CUDA_AWARE_SUPPORT)\n+  if (MPIX_Query_cuda_support() == 1) {\n+    return true;\n+  } else {\n+    return false;\n+  }\n+#else // !defined(MPIX_CUDA_AWARE_SUPPORT)\n+  return false;\n+#endif // MPIX_CUDA_AWARE_SUPPORT\n+}\n+\n+void mpiExit() {\n+  MPI_CHECK(MPI_Finalize());\n+}\n+\n+} // namespace\n+\n+// ProcessGroupMPI::WorkMPI\n+ProcessGroupMPI::WorkMPI::WorkMPI() : completed_(false) {}\n+\n+ProcessGroupMPI::WorkMPI::~WorkMPI() {}\n+\n+bool ProcessGroupMPI::WorkMPI::isCompleted() const {\n+  return completed_;\n+}\n+\n+bool ProcessGroupMPI::WorkMPI::isSuccess() const {\n+  return !workException_;\n+}\n+\n+bool ProcessGroupMPI::WorkMPI::wait() {\n+  std::unique_lock<std::mutex> lock(workMutex_);\n+  while (!completed_) {\n+    workCV_.wait(lock);\n+  }\n+  return isSuccess();\n+}\n+\n+void ProcessGroupMPI::WorkMPI::finish() {\n+  {\n+    std::unique_lock<std::mutex> lock(workMutex_);\n+    completed_ = true;\n+  }\n+  workCV_.notify_all();\n+}\n+\n+void ProcessGroupMPI::WorkMPI::finishWithException(\n+    std::exception_ptr caughtWorkException) {\n+  {\n+    std::unique_lock<std::mutex> lock(workMutex_);\n+    completed_ = true;\n+    workException_ = caughtWorkException;\n+  }\n+  workCV_.notify_all();\n+}\n+\n+const std::exception& ProcessGroupMPI::WorkMPI::exception() const {\n+  try {\n+    std::rethrow_exception(workException_);\n+  } catch (const std::exception& e) {\n+    return e;\n+  }\n+}\n+\n+// ProcessGroupMPI", "path": "torch/lib/c10d/ProcessGroupMPI.cpp", "position": null, "original_position": 108, "commit_id": "3bee9f02c78e069a41c05cea172eca6cc772af55", "original_commit_id": "0f2296bb5ca6191632e76fda2b5c21b86de87a43", "user": {"login": "pietern", "id": 9845, "node_id": "MDQ6VXNlcjk4NDU=", "avatar_url": "https://avatars3.githubusercontent.com/u/9845?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietern", "html_url": "https://github.com/pietern", "followers_url": "https://api.github.com/users/pietern/followers", "following_url": "https://api.github.com/users/pietern/following{/other_user}", "gists_url": "https://api.github.com/users/pietern/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietern/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietern/subscriptions", "organizations_url": "https://api.github.com/users/pietern/orgs", "repos_url": "https://api.github.com/users/pietern/repos", "events_url": "https://api.github.com/users/pietern/events{/privacy}", "received_events_url": "https://api.github.com/users/pietern/received_events", "type": "User", "site_admin": false}, "body": "Can go?", "created_at": "2018-05-23T22:01:02Z", "updated_at": "2018-11-23T15:44:35Z", "html_url": "https://github.com/pytorch/pytorch/pull/7783#discussion_r190412690", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/7783", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/190412690"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/7783#discussion_r190412690"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/7783"}}, "body_html": "<p>Can go?</p>", "body_text": "Can go?"}