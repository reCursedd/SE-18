{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/190734165", "pull_request_review_id": 123156518, "id": 190734165, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MDczNDE2NQ==", "diff_hunk": "@@ -0,0 +1,143 @@\n+#pragma once\n+\n+#include \"ProcessGroup.hpp\"\n+#include \"Types.hpp\"\n+#include \"Utils.hpp\"\n+\n+#include <mpi.h>\n+\n+#include <condition_variable>\n+#include <deque>\n+#include <exception>\n+#include <memory>\n+#include <mutex>\n+#include <thread>\n+#include <vector>\n+\n+namespace c10d {\n+\n+// WorkEntry is the state associated with a single MPI run instance.\n+// It include the source Tensor list and destination Tensor list, as well as\n+// The actual run function that will operate either on src or dst or both.\n+struct WorkEntry {\n+  explicit WorkEntry(\n+      std::vector<at::Tensor>* src,\n+      std::vector<at::Tensor>* dst,\n+      std::function<void(std::unique_ptr<WorkEntry>&)> run)\n+      : src(src), dst(dst), run(run) {}\n+\n+  // Not copyable\n+  WorkEntry(const WorkEntry&) = delete;\n+  // Not copy assignable\n+  WorkEntry& operator=(const WorkEntry&) = delete;\n+\n+  // For input and output tensors (in-place), we will always use src\n+  std::vector<at::Tensor>* src;\n+  std::vector<at::Tensor>* dst;\n+  std::function<void(std::unique_ptr<WorkEntry>&)> run;\n+};", "path": "torch/lib/c10d/ProcessGroupMPI.hpp", "position": 38, "original_position": 38, "commit_id": "3bee9f02c78e069a41c05cea172eca6cc772af55", "original_commit_id": "0f2296bb5ca6191632e76fda2b5c21b86de87a43", "user": {"login": "teng-li", "id": 8120856, "node_id": "MDQ6VXNlcjgxMjA4NTY=", "avatar_url": "https://avatars2.githubusercontent.com/u/8120856?v=4", "gravatar_id": "", "url": "https://api.github.com/users/teng-li", "html_url": "https://github.com/teng-li", "followers_url": "https://api.github.com/users/teng-li/followers", "following_url": "https://api.github.com/users/teng-li/following{/other_user}", "gists_url": "https://api.github.com/users/teng-li/gists{/gist_id}", "starred_url": "https://api.github.com/users/teng-li/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/teng-li/subscriptions", "organizations_url": "https://api.github.com/users/teng-li/orgs", "repos_url": "https://api.github.com/users/teng-li/repos", "events_url": "https://api.github.com/users/teng-li/events{/privacy}", "received_events_url": "https://api.github.com/users/teng-li/received_events", "type": "User", "site_admin": false}, "body": "I think ProcessGroupMPI::WorkEntry sounds more natural than making a new namespace for each backend ", "created_at": "2018-05-24T21:19:21Z", "updated_at": "2018-11-23T15:44:37Z", "html_url": "https://github.com/pytorch/pytorch/pull/7783#discussion_r190734165", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/7783", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/190734165"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/7783#discussion_r190734165"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/7783"}}, "body_html": "<p>I think ProcessGroupMPI::WorkEntry sounds more natural than making a new namespace for each backend</p>", "body_text": "I think ProcessGroupMPI::WorkEntry sounds more natural than making a new namespace for each backend", "in_reply_to_id": 190414484}