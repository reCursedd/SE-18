{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/190359265", "pull_request_review_id": 122718144, "id": 190359265, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MDM1OTI2NQ==", "diff_hunk": "@@ -0,0 +1,295 @@\n+#include \"ProcessGroupMPI.hpp\"\n+\n+#include <map>\n+#include <iostream>\n+\n+namespace c10d {\n+\n+#define MPI_CHECK(cmd) do {                                \\\n+  int mpiStatus = cmd;                                     \\\n+  if (mpiStatus != MPI_SUCCESS) {                          \\\n+    std::string err = \"MPI error in: \" +                   \\\n+                      std::string(__FILE__) + \":\" +        \\\n+                      std::to_string(__LINE__) +           \\\n+                      \", with error code: \" +              \\\n+                      std::to_string(mpiStatus);           \\\n+    std::cerr << err << std::endl;                         \\\n+    throw std::runtime_error(err);                         \\\n+  }                                                        \\\n+} while (0)\n+\n+namespace {\n+\n+// Op mapping\n+std::map<ReduceOp, MPI_Op> mpiOp = {\n+  {ReduceOp::MIN, MPI_MIN},\n+  {ReduceOp::MAX, MPI_MAX},\n+  {ReduceOp::SUM, MPI_SUM},\n+  {ReduceOp::PRODUCT, MPI_PROD},\n+};\n+// Type mapping\n+std::map<at::ScalarType, MPI_Datatype> mpiDatatype = {\n+  {at::kByte, MPI_UNSIGNED_CHAR},\n+  {at::kChar, MPI_CHAR},\n+  {at::kDouble, MPI_DOUBLE},\n+  {at::kFloat, MPI_FLOAT},\n+  {at::kInt, MPI_INT},\n+  {at::kLong, MPI_LONG},\n+  {at::kShort, MPI_SHORT},\n+};\n+\n+// Checking CUDA-aware MPI support\n+bool cudaAwareMpiCheck() {\n+#if defined(MPIX_CUDA_AWARE_SUPPORT) && MPIX_CUDA_AWARE_SUPPORT\n+// Compile time check\n+#elif defined(MPIX_CUDA_AWARE_SUPPORT) && !MPIX_CUDA_AWARE_SUPPORT\n+  return false;\n+#else\n+  return false;\n+#endif /* MPIX_CUDA_AWARE_SUPPORT */\n+\n+// Run time check\n+#if defined(MPIX_CUDA_AWARE_SUPPORT)\n+  if (MPIX_Query_cuda_support() == 1) {\n+    return true;\n+  } else {\n+    return false;\n+  }\n+#else /* !defined(MPIX_CUDA_AWARE_SUPPORT) */\n+  return false;\n+#endif /* MPIX_CUDA_AWARE_SUPPORT */\n+}\n+\n+} // namespace\n+\n+\n+// ProcessGroupMPI::WorkMPI\n+ProcessGroupMPI::WorkMPI::WorkMPI() : completed_(false) {}\n+\n+ProcessGroupMPI::WorkMPI::~WorkMPI() {}\n+\n+bool ProcessGroupMPI::WorkMPI::isCompleted() const {\n+  return completed_;\n+}\n+\n+bool ProcessGroupMPI::WorkMPI::isSuccess() const {\n+  return !ex_;\n+}\n+\n+bool ProcessGroupMPI::WorkMPI::wait() {\n+  std::unique_lock<std::mutex> lock(workMutex_);\n+  while (!completed_) {\n+    workCV_.wait(lock);\n+  }\n+  return isSuccess();\n+}\n+\n+void ProcessGroupMPI::WorkMPI::finish() {\n+  {\n+    std::unique_lock<std::mutex> lock(workMutex_);\n+    completed_ = true;\n+  }\n+  workCV_.notify_all();\n+}\n+\n+void ProcessGroupMPI::WorkMPI::finishWithException(\n+    const std::exception& ex) {\n+  {\n+    std::unique_lock<std::mutex> lock(workMutex_);\n+    completed_ = true;\n+    ex_ = std::unique_ptr<std::exception>(new std::exception(ex));", "path": "torch/lib/c10d/ProcessGroupMPI.cpp", "position": null, "original_position": 100, "commit_id": "3bee9f02c78e069a41c05cea172eca6cc772af55", "original_commit_id": "91cdd104e7bac5e6ab545f85d72bae30b778e81e", "user": {"login": "teng-li", "id": 8120856, "node_id": "MDQ6VXNlcjgxMjA4NTY=", "avatar_url": "https://avatars2.githubusercontent.com/u/8120856?v=4", "gravatar_id": "", "url": "https://api.github.com/users/teng-li", "html_url": "https://github.com/teng-li", "followers_url": "https://api.github.com/users/teng-li/followers", "following_url": "https://api.github.com/users/teng-li/following{/other_user}", "gists_url": "https://api.github.com/users/teng-li/gists{/gist_id}", "starred_url": "https://api.github.com/users/teng-li/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/teng-li/subscriptions", "organizations_url": "https://api.github.com/users/teng-li/orgs", "repos_url": "https://api.github.com/users/teng-li/repos", "events_url": "https://api.github.com/users/teng-li/events{/privacy}", "received_events_url": "https://api.github.com/users/teng-li/received_events", "type": "User", "site_admin": false}, "body": "changed", "created_at": "2018-05-23T18:45:17Z", "updated_at": "2018-11-23T15:44:35Z", "html_url": "https://github.com/pytorch/pytorch/pull/7783#discussion_r190359265", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/7783", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/190359265"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/7783#discussion_r190359265"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/7783"}}, "body_html": "<p>changed</p>", "body_text": "changed", "in_reply_to_id": 190198602}