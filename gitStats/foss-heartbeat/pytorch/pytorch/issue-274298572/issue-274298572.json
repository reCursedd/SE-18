{"url": "https://api.github.com/repos/pytorch/pytorch/issues/3721", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/3721/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/3721/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/3721/events", "html_url": "https://github.com/pytorch/pytorch/issues/3721", "id": 274298572, "node_id": "MDU6SXNzdWUyNzQyOTg1NzI=", "number": 3721, "title": "Should ATen elementSizeInBytes return an int64_t?", "user": {"login": "gchanan", "id": 3768583, "node_id": "MDQ6VXNlcjM3Njg1ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3768583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gchanan", "html_url": "https://github.com/gchanan", "followers_url": "https://api.github.com/users/gchanan/followers", "following_url": "https://api.github.com/users/gchanan/following{/other_user}", "gists_url": "https://api.github.com/users/gchanan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gchanan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gchanan/subscriptions", "organizations_url": "https://api.github.com/users/gchanan/orgs", "repos_url": "https://api.github.com/users/gchanan/repos", "events_url": "https://api.github.com/users/gchanan/events{/privacy}", "received_events_url": "https://api.github.com/users/gchanan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-11-15T20:45:53Z", "updated_at": "2017-11-16T05:21:34Z", "closed_at": null, "author_association": "CONTRIBUTOR", "body_html": "<p>Currently it returns a size_t (the return type of sizeof), but this isn't really a first class ATen type, i.e. it is never exposed in Declarations.yaml.</p>\n<p>Background: I tried to implement this as a native function but the jit generated uncompilable code:<br>\n<code>torch/csrc/jit/generated/aten_dispatch.cpp:601:59: error: conversion from \u2018std::size_t {aka long unsigned int}\u2019 to \u2018at::Scalar\u2019 is ambiguous pack_list(outputs, at::elementSizeInBytes(inputs[0]));</code></p>\n<p>Maybe better to just check that sizeof doesn't return something over the int64_t numeric limit and throw an exception if it does?</p>\n<p>CC <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=370202\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/zdevito\">@zdevito</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=13564\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ezyang\">@ezyang</a></p>", "body_text": "Currently it returns a size_t (the return type of sizeof), but this isn't really a first class ATen type, i.e. it is never exposed in Declarations.yaml.\nBackground: I tried to implement this as a native function but the jit generated uncompilable code:\ntorch/csrc/jit/generated/aten_dispatch.cpp:601:59: error: conversion from \u2018std::size_t {aka long unsigned int}\u2019 to \u2018at::Scalar\u2019 is ambiguous pack_list(outputs, at::elementSizeInBytes(inputs[0]));\nMaybe better to just check that sizeof doesn't return something over the int64_t numeric limit and throw an exception if it does?\nCC @zdevito @ezyang", "body": "Currently it returns a size_t (the return type of sizeof), but this isn't really a first class ATen type, i.e. it is never exposed in Declarations.yaml.\r\n\r\nBackground: I tried to implement this as a native function but the jit generated uncompilable code:\r\n`\r\ntorch/csrc/jit/generated/aten_dispatch.cpp:601:59: error: conversion from \u2018std::size_t {aka long unsigned int}\u2019 to \u2018at::Scalar\u2019 is ambiguous\r\n       pack_list(outputs, at::elementSizeInBytes(inputs[0]));\r\n`\r\n\r\nMaybe better to just check that sizeof doesn't return something over the int64_t numeric limit and throw an exception if it does?\r\n\r\nCC @zdevito @ezyang "}