{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/360078540", "html_url": "https://github.com/pytorch/pytorch/issues/4801#issuecomment-360078540", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/4801", "id": 360078540, "node_id": "MDEyOklzc3VlQ29tbWVudDM2MDA3ODU0MA==", "user": {"login": "bheinzerling", "id": 4348795, "node_id": "MDQ6VXNlcjQzNDg3OTU=", "avatar_url": "https://avatars1.githubusercontent.com/u/4348795?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bheinzerling", "html_url": "https://github.com/bheinzerling", "followers_url": "https://api.github.com/users/bheinzerling/followers", "following_url": "https://api.github.com/users/bheinzerling/following{/other_user}", "gists_url": "https://api.github.com/users/bheinzerling/gists{/gist_id}", "starred_url": "https://api.github.com/users/bheinzerling/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bheinzerling/subscriptions", "organizations_url": "https://api.github.com/users/bheinzerling/orgs", "repos_url": "https://api.github.com/users/bheinzerling/repos", "events_url": "https://api.github.com/users/bheinzerling/events{/privacy}", "received_events_url": "https://api.github.com/users/bheinzerling/received_events", "type": "User", "site_admin": false}, "created_at": "2018-01-24T09:54:55Z", "updated_at": "2018-01-24T09:54:55Z", "author_association": "CONTRIBUTOR", "body_html": "<p>I have a helper function for this in my Python utils, but native support would be great:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">from</span> torch <span class=\"pl-k\">import</span> nn, Tensor\n\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">emb_layer</span>(<span class=\"pl-smi\">keyed_vectors</span>, <span class=\"pl-smi\">trainable</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">False</span>):\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"\"\"</span>Create an Embedding layer from the supplied gensim keyed_vectors.<span class=\"pl-pds\">\"\"\"</span></span>\n    emb_weights <span class=\"pl-k\">=</span> Tensor(keyed_vectors.syn0)\n    emb <span class=\"pl-k\">=</span> nn.Embedding(<span class=\"pl-k\">*</span>emb_weights.shape)\n    emb.weight <span class=\"pl-k\">=</span> nn.Parameter(emb_weights)\n    emb.weight.requires_grad <span class=\"pl-k\">=</span> trainable\n    <span class=\"pl-k\">return</span> emb</pre></div>", "body_text": "I have a helper function for this in my Python utils, but native support would be great:\nfrom torch import nn, Tensor\n\n\ndef emb_layer(keyed_vectors, trainable=False):\n    \"\"\"Create an Embedding layer from the supplied gensim keyed_vectors.\"\"\"\n    emb_weights = Tensor(keyed_vectors.syn0)\n    emb = nn.Embedding(*emb_weights.shape)\n    emb.weight = nn.Parameter(emb_weights)\n    emb.weight.requires_grad = trainable\n    return emb", "body": "I have a helper function for this in my Python utils, but native support would be great:\r\n\r\n```Python\r\nfrom torch import nn, Tensor\r\n\r\n\r\ndef emb_layer(keyed_vectors, trainable=False):\r\n    \"\"\"Create an Embedding layer from the supplied gensim keyed_vectors.\"\"\"\r\n    emb_weights = Tensor(keyed_vectors.syn0)\r\n    emb = nn.Embedding(*emb_weights.shape)\r\n    emb.weight = nn.Parameter(emb_weights)\r\n    emb.weight.requires_grad = trainable\r\n    return emb\r\n```"}