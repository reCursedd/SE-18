{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/376430341", "html_url": "https://github.com/pytorch/pytorch/issues/1708#issuecomment-376430341", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/1708", "id": 376430341, "node_id": "MDEyOklzc3VlQ29tbWVudDM3NjQzMDM0MQ==", "user": {"login": "SeungjunNah", "id": 8789158, "node_id": "MDQ6VXNlcjg3ODkxNTg=", "avatar_url": "https://avatars2.githubusercontent.com/u/8789158?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SeungjunNah", "html_url": "https://github.com/SeungjunNah", "followers_url": "https://api.github.com/users/SeungjunNah/followers", "following_url": "https://api.github.com/users/SeungjunNah/following{/other_user}", "gists_url": "https://api.github.com/users/SeungjunNah/gists{/gist_id}", "starred_url": "https://api.github.com/users/SeungjunNah/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SeungjunNah/subscriptions", "organizations_url": "https://api.github.com/users/SeungjunNah/orgs", "repos_url": "https://api.github.com/users/SeungjunNah/repos", "events_url": "https://api.github.com/users/SeungjunNah/events{/privacy}", "received_events_url": "https://api.github.com/users/SeungjunNah/received_events", "type": "User", "site_admin": false}, "created_at": "2018-03-27T07:51:10Z", "updated_at": "2018-03-27T07:56:49Z", "author_association": "NONE", "body_html": "<p>Hi,</p>\n<p>Currently, pytorch is using thnn implementation of depthwise convolution, <a href=\"https://github.com/pytorch/pytorch/blob/master/aten/src/ATen/native/Convolution.cpp#L350\">thnn_conv_depthwise2d</a>, instead of cudnn.</p>\n<p>According to recent <a href=\"http://docs.nvidia.com/deeplearning/sdk/cudnn-release-notes/rel_711.html#rel_711\" rel=\"nofollow\">cudnn 7.1.1 release notes</a>, it seems like cudnn has implemented group convolution for groupCount&gt;1 for all forward &amp; backward algorithms.<br>\nAlso, current <a href=\"http://docs.nvidia.com/deeplearning/sdk/cudnn-developer-guide/index.html#cudnnConvolutionForward\" rel=\"nofollow\">cudnn api reference</a> says the winograd algorithm supports group count greater than 0.</p>\n<p>Are there any plans to switch group convolution backend from thnn to cudnn?</p>", "body_text": "Hi,\nCurrently, pytorch is using thnn implementation of depthwise convolution, thnn_conv_depthwise2d, instead of cudnn.\nAccording to recent cudnn 7.1.1 release notes, it seems like cudnn has implemented group convolution for groupCount>1 for all forward & backward algorithms.\nAlso, current cudnn api reference says the winograd algorithm supports group count greater than 0.\nAre there any plans to switch group convolution backend from thnn to cudnn?", "body": "Hi,\r\n\r\nCurrently, pytorch is using thnn implementation of depthwise convolution, [thnn_conv_depthwise2d](https://github.com/pytorch/pytorch/blob/master/aten/src/ATen/native/Convolution.cpp#L350), instead of cudnn.\r\n\r\nAccording to recent [cudnn 7.1.1 release notes](http://docs.nvidia.com/deeplearning/sdk/cudnn-release-notes/rel_711.html#rel_711), it seems like cudnn has implemented group convolution for groupCount>1 for all forward & backward algorithms.\r\nAlso, current [cudnn api reference](http://docs.nvidia.com/deeplearning/sdk/cudnn-developer-guide/index.html#cudnnConvolutionForward) says the winograd algorithm supports group count greater than 0.\r\n\r\nAre there any plans to switch group convolution backend from thnn to cudnn?"}