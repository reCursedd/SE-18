{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/114063650", "pull_request_review_id": 35506362, "id": 114063650, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNDA2MzY1MA==", "diff_hunk": "@@ -0,0 +1,105 @@\n+#pragma once\n+\n+#include <Python.h>\n+#include \"convolution.h\"\n+#include \"torch/csrc/autograd/python_cpp_function_attr.h\"\n+\n+\n+namespace torch { namespace autograd {\n+\n+namespace attributes {\n+\n+template<class T>\n+PyObject* conv_stride(THPCppFunction* self, PyObject* hook)", "path": "torch/csrc/autograd/functions/convolution_attr.h", "position": null, "original_position": 13, "commit_id": "7b64a8a1260e8885bdb749fa1b5421a3cf4268be", "original_commit_id": "a9a35ffa14de9138106bb48a9561b0f7ab83ac81", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "I agree. I'd be the best to implement a number of helper templates/macros and use these to implement attributes for all new functions in a few lines. See e.g. [some helpers from `python_function.cpp`](https://github.com/pytorch/pytorch/blob/master/torch/csrc/autograd/python_function.cpp#L715-L748). It should be possible to implement similar ones for each type (e.g. getIntMember, getBoolMember, etc.).", "created_at": "2017-04-29T23:28:03Z", "updated_at": "2018-11-23T15:33:17Z", "html_url": "https://github.com/pytorch/pytorch/pull/1405#discussion_r114063650", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/1405", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/114063650"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/1405#discussion_r114063650"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/1405"}}, "body_html": "<p>I agree. I'd be the best to implement a number of helper templates/macros and use these to implement attributes for all new functions in a few lines. See e.g. <a href=\"https://github.com/pytorch/pytorch/blob/master/torch/csrc/autograd/python_function.cpp#L715-L748\">some helpers from <code>python_function.cpp</code></a>. It should be possible to implement similar ones for each type (e.g. getIntMember, getBoolMember, etc.).</p>", "body_text": "I agree. I'd be the best to implement a number of helper templates/macros and use these to implement attributes for all new functions in a few lines. See e.g. some helpers from python_function.cpp. It should be possible to implement similar ones for each type (e.g. getIntMember, getBoolMember, etc.).", "in_reply_to_id": 114058549}