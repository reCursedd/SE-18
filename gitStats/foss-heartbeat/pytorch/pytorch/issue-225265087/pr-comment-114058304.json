{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/114058304", "pull_request_review_id": 35501255, "id": 114058304, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNDA1ODMwNA==", "diff_hunk": "@@ -88,67 +89,17 @@ void THPCppFunction_dealloc(PyObject* self)\n   Py_TYPE(self)->tp_free(self);\n }\n \n-PyObject* THPCppFunction_register_hook_dict(PyObject* self, PyObject* _var)\n-{\n-  if (!THPVariable_Check(_var)) {\n-    return PyErr_Format(PyExc_TypeError, \"_register_hook_dict expected a variable\");\n-  }\n-  auto var = (THPVariable*)_var;\n-  auto& fn = *((THPCppFunction*)self)->cdata;\n-  fn.pre_hooks.push_back(std::make_shared<PyFunctionPreHook>(\n-      var->backward_hooks, var->cdata->output_nr));\n-  Py_RETURN_NONE;\n-}\n-\n-PyObject* THPCppFunction_register_hook(PyObject* self, PyObject* hook)\n-{\n-  auto& fn = *((THPCppFunction*)self)->cdata;\n-  return registerFunctionHook(fn, hook);\n-}\n-\n-PyObject* THPCppFunction_next_functions(THPCppFunction* self, PyObject* hook)\n-{\n-  auto& next_functions = self->cdata->next_functions;\n-  auto num_next = next_functions.size();\n-  THPObjectPtr py_functions = PyTuple_New(num_next);\n-  if (!py_functions) return NULL;\n-  for (size_t i = 0; i < num_next; ++i) {\n-    auto& c_tuple = next_functions[i];\n-    THPObjectPtr tuple = PyTuple_New(2);\n-    if (!tuple) return NULL;\n-    PyObject *py_fn = functionToPyObject(c_tuple.first);\n-    if (!py_fn) return NULL;\n-    PyTuple_SET_ITEM(tuple.get(), 0, py_fn);\n-    PyObject *py_idx = PyLong_FromLong(c_tuple.second);\n-    if (!py_idx) return NULL;\n-    PyTuple_SET_ITEM(tuple.get(), 1, py_idx);\n-    PyTuple_SET_ITEM(py_functions.get(), i, tuple.release());\n-  }\n-  return py_functions.release();\n-}\n-\n-\n } // namespace\n \n-static struct PyMethodDef THPCppFunction_methods[] = {\n-  {(char*)\"_register_hook_dict\", (PyCFunction)THPCppFunction_register_hook_dict, METH_O, NULL},\n-  {(char*)\"register_hook\", (PyCFunction)THPCppFunction_register_hook, METH_O, NULL},\n-  {NULL}\n-};\n-\n-static struct PyGetSetDef THPCppFunction_properties[] = {\n-  {(char*)\"next_functions\", (getter)THPCppFunction_next_functions, NULL, NULL, NULL},\n-  {NULL}\n-};\n-\n-PyTypeObject* _initFunctionPyTypeObject(PyTypeObject& type, const char* name)\n+PyTypeObject* _initFunctionPyTypeObject(PyTypeObject& type, const char* name,\n+  PyGetSetDef* function_properties, PyMethodDef* function_methods)\n {\n   type.tp_flags = Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC;\n   type.tp_name = name;\n   type.tp_basicsize = sizeof(THPCppFunction);\n   type.tp_call = THPCppFunction_call;\n-  type.tp_methods = THPCppFunction_methods;\n-  type.tp_getset = THPCppFunction_properties;\n+  type.tp_methods = function_methods ? function_methods : attributes::default_methods;", "path": "torch/csrc/autograd/python_cpp_function.cpp", "position": null, "original_position": 73, "commit_id": "7b64a8a1260e8885bdb749fa1b5421a3cf4268be", "original_commit_id": "a9a35ffa14de9138106bb48a9561b0f7ab83ac81", "user": {"login": "albanD", "id": 6359743, "node_id": "MDQ6VXNlcjYzNTk3NDM=", "avatar_url": "https://avatars3.githubusercontent.com/u/6359743?v=4", "gravatar_id": "", "url": "https://api.github.com/users/albanD", "html_url": "https://github.com/albanD", "followers_url": "https://api.github.com/users/albanD/followers", "following_url": "https://api.github.com/users/albanD/following{/other_user}", "gists_url": "https://api.github.com/users/albanD/gists{/gist_id}", "starred_url": "https://api.github.com/users/albanD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/albanD/subscriptions", "organizations_url": "https://api.github.com/users/albanD/orgs", "repos_url": "https://api.github.com/users/albanD/repos", "events_url": "https://api.github.com/users/albanD/events{/privacy}", "received_events_url": "https://api.github.com/users/albanD/received_events", "type": "User", "site_admin": false}, "body": "Would it be possible here to add the default methods even when function_methods is provided? That would allow to change the common methods without modifying every function attribute and reduce the chances of forgetting one of the default one?\r\n(same for the properties below)", "created_at": "2017-04-29T17:48:45Z", "updated_at": "2018-11-23T15:33:17Z", "html_url": "https://github.com/pytorch/pytorch/pull/1405#discussion_r114058304", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/1405", "author_association": "COLLABORATOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/114058304"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/1405#discussion_r114058304"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/1405"}}, "body_html": "<p>Would it be possible here to add the default methods even when function_methods is provided? That would allow to change the common methods without modifying every function attribute and reduce the chances of forgetting one of the default one?<br>\n(same for the properties below)</p>", "body_text": "Would it be possible here to add the default methods even when function_methods is provided? That would allow to change the common methods without modifying every function attribute and reduce the chances of forgetting one of the default one?\n(same for the properties below)"}