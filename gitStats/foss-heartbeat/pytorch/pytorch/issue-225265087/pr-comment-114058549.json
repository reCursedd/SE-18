{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/114058549", "pull_request_review_id": 35501255, "id": 114058549, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNDA1ODU0OQ==", "diff_hunk": "@@ -0,0 +1,105 @@\n+#pragma once\n+\n+#include <Python.h>\n+#include \"convolution.h\"\n+#include \"torch/csrc/autograd/python_cpp_function_attr.h\"\n+\n+\n+namespace torch { namespace autograd {\n+\n+namespace attributes {\n+\n+template<class T>\n+PyObject* conv_stride(THPCppFunction* self, PyObject* hook)", "path": "torch/csrc/autograd/functions/convolution_attr.h", "position": null, "original_position": 13, "commit_id": "7b64a8a1260e8885bdb749fa1b5421a3cf4268be", "original_commit_id": "a9a35ffa14de9138106bb48a9561b0f7ab83ac81", "user": {"login": "albanD", "id": 6359743, "node_id": "MDQ6VXNlcjYzNTk3NDM=", "avatar_url": "https://avatars3.githubusercontent.com/u/6359743?v=4", "gravatar_id": "", "url": "https://api.github.com/users/albanD", "html_url": "https://github.com/albanD", "followers_url": "https://api.github.com/users/albanD/followers", "following_url": "https://api.github.com/users/albanD/following{/other_user}", "gists_url": "https://api.github.com/users/albanD/gists{/gist_id}", "starred_url": "https://api.github.com/users/albanD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/albanD/subscriptions", "organizations_url": "https://api.github.com/users/albanD/orgs", "repos_url": "https://api.github.com/users/albanD/repos", "events_url": "https://api.github.com/users/albanD/events{/privacy}", "received_events_url": "https://api.github.com/users/albanD/received_events", "type": "User", "site_admin": false}, "body": "I am not sure what are the guidelines for cpp code but these getter functions look quite similar.\r\nCould we do a macro (or the correct cpp way to do this) like `IMPLEMENT_GET_VECTOR(conv_stride, ConvForward, stride)` or `IMPLEMENT_GET_NUMBER(conv_groups, ConvForward, groups)` that could be reused for all functions?", "created_at": "2017-04-29T18:01:45Z", "updated_at": "2018-11-23T15:33:17Z", "html_url": "https://github.com/pytorch/pytorch/pull/1405#discussion_r114058549", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/1405", "author_association": "COLLABORATOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/114058549"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/1405#discussion_r114058549"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/1405"}}, "body_html": "<p>I am not sure what are the guidelines for cpp code but these getter functions look quite similar.<br>\nCould we do a macro (or the correct cpp way to do this) like <code>IMPLEMENT_GET_VECTOR(conv_stride, ConvForward, stride)</code> or <code>IMPLEMENT_GET_NUMBER(conv_groups, ConvForward, groups)</code> that could be reused for all functions?</p>", "body_text": "I am not sure what are the guidelines for cpp code but these getter functions look quite similar.\nCould we do a macro (or the correct cpp way to do this) like IMPLEMENT_GET_VECTOR(conv_stride, ConvForward, stride) or IMPLEMENT_GET_NUMBER(conv_groups, ConvForward, groups) that could be reused for all functions?"}