{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/110474661", "pull_request_review_id": 31644119, "id": 110474661, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMDQ3NDY2MQ==", "diff_hunk": "@@ -2,16 +2,33 @@\n #define THCS_GENERIC_FILE \"generic/THCSTensorMath.cu\"\n #else\n \n+#include \"THCThrustAllocator.cuh\"\n+#include <thrust/device_ptr.h>\n+#include <thrust/sequence.h>\n+\n #define ROW_PTR2(t, r) (THCTensor_(data)(THCState *state, t) + (r) * (t)->stride[0])\n #define COL_PTR2(t, c) (THCTensor_(data)(THCState *state, t) + (c) * (t)->stride[1])\n \n-THCudaLongTensor *THCSTensor_(toCSR)(THCState *state, long const *indices, long dim, long nnz) {\n-  THError(\"WARNING: Sparse Cuda Tensor op toCSR is not implemented\");\n-  // TODO hook up with cusparse\n-  return NULL;\n+#define I_INFO(tensor) getTensorInfo<THCIndexTensor, unsigned long>(state, tensor)\n+#define V_INFO(tensor) getTensorInfo<THCTensor, unsigned long>(state, tensor)\n+\n+THCudaIntTensor *THCSTensor_(toCSR)(THCState *state, THCIndexTensor *rowIndices, long dim, long nnz) {", "path": "torch/lib/THCS/generic/THCSTensorMath.cu", "position": 18, "original_position": 18, "commit_id": "f4105bcbb3dc4ebc23f20112949a0de79e24d978", "original_commit_id": "179b2dafe865e7cbdd79b18f58143e8ca5d4782d", "user": {"login": "martinraison", "id": 2560662, "node_id": "MDQ6VXNlcjI1NjA2NjI=", "avatar_url": "https://avatars3.githubusercontent.com/u/2560662?v=4", "gravatar_id": "", "url": "https://api.github.com/users/martinraison", "html_url": "https://github.com/martinraison", "followers_url": "https://api.github.com/users/martinraison/followers", "following_url": "https://api.github.com/users/martinraison/following{/other_user}", "gists_url": "https://api.github.com/users/martinraison/gists{/gist_id}", "starred_url": "https://api.github.com/users/martinraison/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/martinraison/subscriptions", "organizations_url": "https://api.github.com/users/martinraison/orgs", "repos_url": "https://api.github.com/users/martinraison/repos", "events_url": "https://api.github.com/users/martinraison/events{/privacy}", "received_events_url": "https://api.github.com/users/martinraison/received_events", "type": "User", "site_admin": false}, "body": "I think it was like that in THS so I did the same here. What would be the naming convention for a non-generic method?\r\n\r\nIt is `rowIndices` because it specifically invokes the `coo2csr` function, which expects row indices in COO format and outputs row indices in CSR format. Those formats only make sense for matrices.", "created_at": "2017-04-07T20:19:35Z", "updated_at": "2018-11-23T15:33:04Z", "html_url": "https://github.com/pytorch/pytorch/pull/1147#discussion_r110474661", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/1147", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/110474661"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/1147#discussion_r110474661"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/1147"}}, "body_html": "<p>I think it was like that in THS so I did the same here. What would be the naming convention for a non-generic method?</p>\n<p>It is <code>rowIndices</code> because it specifically invokes the <code>coo2csr</code> function, which expects row indices in COO format and outputs row indices in CSR format. Those formats only make sense for matrices.</p>", "body_text": "I think it was like that in THS so I did the same here. What would be the naming convention for a non-generic method?\nIt is rowIndices because it specifically invokes the coo2csr function, which expects row indices in COO format and outputs row indices in CSR format. Those formats only make sense for matrices.", "in_reply_to_id": 109747451}