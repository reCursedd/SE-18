{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/109172288", "pull_request_review_id": 30253008, "id": 109172288, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwOTE3MjI4OA==", "diff_hunk": "@@ -90,20 +97,34 @@ static void THCSTensor_(rawResize)(THCState *state, THCSTensor *self, int nDimI,\n   self->contiguous = 0;\n }\n \n-THCSTensor *THCSTensor_(set)(THCState *state, THCSTensor *self, THCIndexTensor *indices, THCTensor *values) {\n-  THArgCheck(THCIndexTensor_(nDimension)(state, indices) == 2, 2,\n-      \"indices must be nDim x nnz\");\n-  THArgCheck(THCIndexTensor_(size)(state, indices, 1) == THCTensor_(size)(state, values, 0), 2,\n-      \"indices and values must have same nnz\");\n+// directly assign without cloning or retaining (internal method)\n+THCSTensor* THCSTensor_(move)(THCState *state, THCSTensor *self, THCIndexTensor *indices, THCTensor *values) {\n+  int empty = THCTensor_(nDimension)(state, values) == 0;\n+  if (!empty) {\n+    THArgCheck(THCIndexTensor_(nDimension)(state, indices) == 2, 2,\n+        \"indices must be nDim x nnz\");\n+    THArgCheck(THCIndexTensor_(size)(state, indices, 1) == THCTensor_(size)(state, values, 0), 2,\n+        \"indices and values must have same nnz\");\n+    THArgCheck(THCIndexTensor_(size)(state, indices, 0) == self->nDimensionI, 2,\n+        \"indices has incorrect first dimension, expected %d, got %d\", self->nDimensionI, THCIndexTensor_(size)(state, indices, 0));\n+    THArgCheck(THCTensor_(nDimension)(state, values) == self->nDimensionV + 1, 3,\n+        \"values has incorrect number of dimensions, expected %d, got %d\", self->nDimensionV + 1, THCTensor_(nDimension)(state, values));\n+  }", "path": "torch/lib/THCS/generic/THCSTensor.c", "position": null, "original_position": 63, "commit_id": "f4105bcbb3dc4ebc23f20112949a0de79e24d978", "original_commit_id": "8e4660ac5145c4a48e35620f8810fa8863cb7b50", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Shouldn't there be an `else` case that checks that `indices` are empty too?", "created_at": "2017-03-31T14:28:17Z", "updated_at": "2018-11-23T15:32:56Z", "html_url": "https://github.com/pytorch/pytorch/pull/1147#discussion_r109172288", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/1147", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/109172288"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/1147#discussion_r109172288"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/1147"}}, "body_html": "<p>Shouldn't there be an <code>else</code> case that checks that <code>indices</code> are empty too?</p>", "body_text": "Shouldn't there be an else case that checks that indices are empty too?"}