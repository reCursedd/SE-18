{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/109355050", "pull_request_review_id": 30446003, "id": 109355050, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwOTM1NTA1MA==", "diff_hunk": "@@ -5,227 +5,249 @@\n import random\n import unittest\n from common import TestCase, run_tests\n+from common_nn import TEST_CUDA\n from numbers import Number\n \n-SparseTensor = sparse.DoubleTensor\n+# triplet := (index type, value type, sparse type)\n+cpu_triplet = (\n+    torch.LongTensor,\n+    torch.DoubleTensor,\n+    torch.sparse.DoubleTensor)\n+type_triplets = [cpu_triplet]\n+if TEST_CUDA:\n+    cuda_triplet = (\n+        torch.cuda.LongTensor,\n+        torch.cuda.DoubleTensor,\n+        torch.cuda.sparse.DoubleTensor)\n+    type_triplets.append(cuda_triplet)\n \n \n class TestSparse(TestCase):\n \n     @staticmethod\n-    def _gen_sparse(d, nnz, with_size):\n+    def _gen_sparse(d, nnz, with_size, is_cuda=False):  # FIXME remove default is_cuda value to ensure coverage\n         if isinstance(with_size, Number):\n             v = torch.randn(nnz)\n             i = (torch.rand(d, nnz) * with_size).type(torch.LongTensor)\n-            x = SparseTensor(i, v)\n+            x = torch.sparse.DoubleTensor(i, v)\n         else:\n             v_size = [nnz] + list(with_size[d:])\n             v = torch.randn(*v_size)\n             i = torch.rand(d, nnz) * \\\n                 torch.Tensor(with_size[:d]).repeat(nnz, 1).transpose(0, 1)\n             i = i.type(torch.LongTensor)\n-            x = SparseTensor(i, v, torch.Size(with_size))\n+            x = torch.sparse.DoubleTensor(i, v, torch.Size(with_size))\n \n-        return x, i, v\n+        if is_cuda:\n+            return x.cuda(), i.cuda(), v.cuda()\n+        else:\n+            return x, i, v\n \n     def test_basic(self):\n-        x, i, v = self._gen_sparse(3, 10, 100)\n-\n-        self.assertEqual(i, x.indices())\n-        self.assertEqual(v, x.values())\n-\n-        x, i, v = self._gen_sparse(3, 10, [100, 100, 100])\n-        self.assertEqual(i, x.indices())\n-        self.assertEqual(v, x.values())\n-        self.assertEqual(x.ndimension(), 3)\n-        self.assertEqual(x.nnz(), 10)\n-        for i in range(3):\n-            self.assertEqual(x.size(i), 100)\n-\n-        # Make sure we can access empty indices / values\n-        x = SparseTensor()\n-        self.assertEqual(x.indices().numel(), 0)\n-        self.assertEqual(x.values().numel(), 0)\n+        for is_cuda in [False, True] if TEST_CUDA else [False]:", "path": "test/test_sparse.py", "position": null, "original_position": 65, "commit_id": "f4105bcbb3dc4ebc23f20112949a0de79e24d978", "original_commit_id": "8e4660ac5145c4a48e35620f8810fa8863cb7b50", "user": {"login": "martinraison", "id": 2560662, "node_id": "MDQ6VXNlcjI1NjA2NjI=", "avatar_url": "https://avatars3.githubusercontent.com/u/2560662?v=4", "gravatar_id": "", "url": "https://api.github.com/users/martinraison", "html_url": "https://github.com/martinraison", "followers_url": "https://api.github.com/users/martinraison/followers", "following_url": "https://api.github.com/users/martinraison/following{/other_user}", "gists_url": "https://api.github.com/users/martinraison/gists{/gist_id}", "starred_url": "https://api.github.com/users/martinraison/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/martinraison/subscriptions", "organizations_url": "https://api.github.com/users/martinraison/orgs", "repos_url": "https://api.github.com/users/martinraison/repos", "events_url": "https://api.github.com/users/martinraison/events{/privacy}", "received_events_url": "https://api.github.com/users/martinraison/received_events", "type": "User", "site_admin": false}, "body": "\ud83d\udc4d ", "created_at": "2017-04-03T07:40:12Z", "updated_at": "2018-11-23T15:32:58Z", "html_url": "https://github.com/pytorch/pytorch/pull/1147#discussion_r109355050", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/1147", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/109355050"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/1147#discussion_r109355050"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/1147"}}, "body_html": "<p><g-emoji class=\"g-emoji\" alias=\"+1\" fallback-src=\"https://assets-cdn.github.com/images/icons/emoji/unicode/1f44d.png\">\ud83d\udc4d</g-emoji></p>", "body_text": "\ud83d\udc4d", "in_reply_to_id": 109167927}