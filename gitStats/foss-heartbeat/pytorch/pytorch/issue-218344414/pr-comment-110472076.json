{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/110472076", "pull_request_review_id": 31644119, "id": 110472076, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMDQ3MjA3Ng==", "diff_hunk": "@@ -70,7 +77,7 @@ static void THCSTensor_(rawInit)(THCState *state, THCSTensor *self)\n   self->refcount = 1;\n }\n \n-static void THCSTensor_(rawResize)(THCState *state, THCSTensor *self, int nDimI, int nDimV, long *size) {\n+void THCSTensor_(rawResize)(THCState *state, THCSTensor *self, int nDimI, int nDimV, long *size) {\n   // Only resize valid sizes into tensor.\n   self->size = THRealloc(self->size, sizeof(long)*(nDimI + nDimV));\n ", "path": "torch/lib/THCS/generic/THCSTensor.c", "position": 44, "original_position": 41, "commit_id": "f4105bcbb3dc4ebc23f20112949a0de79e24d978", "original_commit_id": "179b2dafe865e7cbdd79b18f58143e8ca5d4782d", "user": {"login": "martinraison", "id": 2560662, "node_id": "MDQ6VXNlcjI1NjA2NjI=", "avatar_url": "https://avatars3.githubusercontent.com/u/2560662?v=4", "gravatar_id": "", "url": "https://api.github.com/users/martinraison", "html_url": "https://github.com/martinraison", "followers_url": "https://api.github.com/users/martinraison/followers", "following_url": "https://api.github.com/users/martinraison/following{/other_user}", "gists_url": "https://api.github.com/users/martinraison/gists{/gist_id}", "starred_url": "https://api.github.com/users/martinraison/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/martinraison/subscriptions", "organizations_url": "https://api.github.com/users/martinraison/orgs", "repos_url": "https://api.github.com/users/martinraison/repos", "events_url": "https://api.github.com/users/martinraison/events{/privacy}", "received_events_url": "https://api.github.com/users/martinraison/received_events", "type": "User", "site_admin": false}, "body": "I was wondering that as well. Currently `rawResize` is called from `newWithSize{1,2,3,4}d`, and the size array always has length 4, with the unused dimensions set to -1. Those get skipped. It leaks into user space which is not good. I'll remove this skipping logic and change `newWithSize{1,2,3,4}d` instead so that they don't pass in unused dimensions.", "created_at": "2017-04-07T20:04:49Z", "updated_at": "2018-11-23T15:33:04Z", "html_url": "https://github.com/pytorch/pytorch/pull/1147#discussion_r110472076", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/1147", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/110472076"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/1147#discussion_r110472076"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/1147"}}, "body_html": "<p>I was wondering that as well. Currently <code>rawResize</code> is called from <code>newWithSize{1,2,3,4}d</code>, and the size array always has length 4, with the unused dimensions set to -1. Those get skipped. It leaks into user space which is not good. I'll remove this skipping logic and change <code>newWithSize{1,2,3,4}d</code> instead so that they don't pass in unused dimensions.</p>", "body_text": "I was wondering that as well. Currently rawResize is called from newWithSize{1,2,3,4}d, and the size array always has length 4, with the unused dimensions set to -1. Those get skipped. It leaks into user space which is not good. I'll remove this skipping logic and change newWithSize{1,2,3,4}d instead so that they don't pass in unused dimensions.", "in_reply_to_id": 109713905}