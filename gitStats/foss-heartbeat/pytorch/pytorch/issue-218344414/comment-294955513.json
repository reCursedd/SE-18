{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/294955513", "html_url": "https://github.com/pytorch/pytorch/pull/1147#issuecomment-294955513", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/1147", "id": 294955513, "node_id": "MDEyOklzc3VlQ29tbWVudDI5NDk1NTUxMw==", "user": {"login": "adamlerer", "id": 5702157, "node_id": "MDQ6VXNlcjU3MDIxNTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5702157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adamlerer", "html_url": "https://github.com/adamlerer", "followers_url": "https://api.github.com/users/adamlerer/followers", "following_url": "https://api.github.com/users/adamlerer/following{/other_user}", "gists_url": "https://api.github.com/users/adamlerer/gists{/gist_id}", "starred_url": "https://api.github.com/users/adamlerer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adamlerer/subscriptions", "organizations_url": "https://api.github.com/users/adamlerer/orgs", "repos_url": "https://api.github.com/users/adamlerer/repos", "events_url": "https://api.github.com/users/adamlerer/events{/privacy}", "received_events_url": "https://api.github.com/users/adamlerer/received_events", "type": "User", "site_admin": false}, "created_at": "2017-04-18T19:33:55Z", "updated_at": "2017-04-18T19:33:55Z", "author_association": "CONTRIBUTOR", "body_html": "<p>The <code>reorder</code> function does a sort on indices followed by segmented reduction by index. I'm not sure what you mean by sorting vs. reordering.</p>\n<p>My thought is that <code>reorder</code> should have no user-visible functional implications, i.e. the coalesced tensor version should be logically equivalent to the uncoalesced one. However, <code>reorder</code> should be exposed to the user because it may be necessary for efficiency (it's currently called <code>contiguous()</code> but should be called something different like <code>coalesce_()</code>).</p>", "body_text": "The reorder function does a sort on indices followed by segmented reduction by index. I'm not sure what you mean by sorting vs. reordering.\nMy thought is that reorder should have no user-visible functional implications, i.e. the coalesced tensor version should be logically equivalent to the uncoalesced one. However, reorder should be exposed to the user because it may be necessary for efficiency (it's currently called contiguous() but should be called something different like coalesce_()).", "body": "The `reorder` function does a sort on indices followed by segmented reduction by index. I'm not sure what you mean by sorting vs. reordering.\r\n\r\nMy thought is that `reorder` should have no user-visible functional implications, i.e. the coalesced tensor version should be logically equivalent to the uncoalesced one. However, `reorder` should be exposed to the user because it may be necessary for efficiency (it's currently called `contiguous()` but should be called something different like `coalesce_()`).  "}