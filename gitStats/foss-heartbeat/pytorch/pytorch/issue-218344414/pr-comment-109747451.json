{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/109747451", "pull_request_review_id": 30671730, "id": 109747451, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwOTc0NzQ1MQ==", "diff_hunk": "@@ -2,16 +2,33 @@\n #define THCS_GENERIC_FILE \"generic/THCSTensorMath.cu\"\n #else\n \n+#include \"THCThrustAllocator.cuh\"\n+#include <thrust/device_ptr.h>\n+#include <thrust/sequence.h>\n+\n #define ROW_PTR2(t, r) (THCTensor_(data)(THCState *state, t) + (r) * (t)->stride[0])\n #define COL_PTR2(t, c) (THCTensor_(data)(THCState *state, t) + (c) * (t)->stride[1])\n \n-THCudaLongTensor *THCSTensor_(toCSR)(THCState *state, long const *indices, long dim, long nnz) {\n-  THError(\"WARNING: Sparse Cuda Tensor op toCSR is not implemented\");\n-  // TODO hook up with cusparse\n-  return NULL;\n+#define I_INFO(tensor) getTensorInfo<THCIndexTensor, unsigned long>(state, tensor)\n+#define V_INFO(tensor) getTensorInfo<THCTensor, unsigned long>(state, tensor)\n+\n+THCudaIntTensor *THCSTensor_(toCSR)(THCState *state, THCIndexTensor *rowIndices, long dim, long nnz) {", "path": "torch/lib/THCS/generic/THCSTensorMath.cu", "position": 18, "original_position": 18, "commit_id": "f4105bcbb3dc4ebc23f20112949a0de79e24d978", "original_commit_id": "179b2dafe865e7cbdd79b18f58143e8ca5d4782d", "user": {"login": "adamlerer", "id": 5702157, "node_id": "MDQ6VXNlcjU3MDIxNTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5702157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adamlerer", "html_url": "https://github.com/adamlerer", "followers_url": "https://api.github.com/users/adamlerer/followers", "following_url": "https://api.github.com/users/adamlerer/following{/other_user}", "gists_url": "https://api.github.com/users/adamlerer/gists{/gist_id}", "starred_url": "https://api.github.com/users/adamlerer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adamlerer/subscriptions", "organizations_url": "https://api.github.com/users/adamlerer/orgs", "repos_url": "https://api.github.com/users/adamlerer/repos", "events_url": "https://api.github.com/users/adamlerer/events{/privacy}", "received_events_url": "https://api.github.com/users/adamlerer/received_events", "type": "User", "site_admin": false}, "body": "Why is this generic? Are you thinking of making THCIndexTensor generic in the future?\r\n\r\nAlso, why is this called `rowIndices`? Would it still work on general indices?", "created_at": "2017-04-04T18:50:27Z", "updated_at": "2018-11-23T15:33:00Z", "html_url": "https://github.com/pytorch/pytorch/pull/1147#discussion_r109747451", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/1147", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/109747451"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/1147#discussion_r109747451"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/1147"}}, "body_html": "<p>Why is this generic? Are you thinking of making THCIndexTensor generic in the future?</p>\n<p>Also, why is this called <code>rowIndices</code>? Would it still work on general indices?</p>", "body_text": "Why is this generic? Are you thinking of making THCIndexTensor generic in the future?\nAlso, why is this called rowIndices? Would it still work on general indices?"}