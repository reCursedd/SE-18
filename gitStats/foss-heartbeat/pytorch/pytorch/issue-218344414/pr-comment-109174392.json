{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/109174392", "pull_request_review_id": 30253008, "id": 109174392, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwOTE3NDM5Mg==", "diff_hunk": "@@ -14,68 +30,178 @@ THCTensor *THCSTensor_(toDense)(THCState *state, THCSTensor *self) {\n   other = THCTensor_(newWithSize)(state, storage, NULL);\n   THCTensor_(zero)(state, other);\n \n-  // Some necessary dimensions and sizes\n   const ptrdiff_t nnz = THCSTensor_(nnz)(state, self);\n+  if (nnz == 0) {\n+    THLongStorage_free(storage);\n+    return other;\n+  }\n+\n+  // TODO more benchmarking\n   const dim3 block = getApplyBlock();\n   dim3 grid;\n-  THArgCheck(getApplyGrid(state, nnz, grid), 1, CUTORCH_DIM_WARNING);\n+  if (self->nDimensionV == 0) {\n+    THArgCheck(getApplyGrid(state, nnz, grid), 1, CUTORCH_DIM_WARNING);\n \n-  TensorInfo<real, unsigned long> otherInfo =\n-    getTensorInfo<THCTensor, unsigned long>(state, other);\n-  TensorInfo<long, unsigned long> indicesInfo =\n-    getTensorInfo<THCudaLongTensor, unsigned long>(state, self->indices);\n-  TensorInfo<real, unsigned long> valuesInfo =\n-    getTensorInfo<THCTensor, unsigned long>(state, self->values);\n+    THCSTensor_spcKernelScalar<TensorAddOp<real>, unsigned long, real>\n+      <<<grid, block, 0, THCState_getCurrentStream(state)>>>(\n+          TensorAddOp<real>(),\n+          V_INFO(other), I_INFO(self->indices), V_INFO(self->values),\n+          (unsigned long)(nnz));\n+  } else {\n+    THArgCheck(getApplyGrid(state, nnz * block.x, grid), 1, CUTORCH_DIM_WARNING);\n \n-  THCSTensor_toDenseKernel<unsigned long, real>\n-    <<<grid, block, 0, THCState_getCurrentStream(state)>>>(\n-        otherInfo, indicesInfo, valuesInfo, (unsigned long)(nnz));\n+    THCSTensor_spcKernel<TensorAddOp<real>, unsigned long, real>\n+      <<<grid, block, 0, THCState_getCurrentStream(state)>>>(\n+          TensorAddOp<real>(),\n+          V_INFO(other), I_INFO(self->indices), V_INFO(self->values),\n+          (unsigned long)(nnz));\n+  }\n \n   THCudaCheck(cudaGetLastError());\n   THLongStorage_free(storage);", "path": "torch/lib/THCS/generic/THCSTensor.cu", "position": null, "original_position": 69, "commit_id": "f4105bcbb3dc4ebc23f20112949a0de79e24d978", "original_commit_id": "8e4660ac5145c4a48e35620f8810fa8863cb7b50", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "It'd be better to free it as soon as it's no longer necessary.", "created_at": "2017-03-31T14:38:02Z", "updated_at": "2018-11-23T15:32:56Z", "html_url": "https://github.com/pytorch/pytorch/pull/1147#discussion_r109174392", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/1147", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/109174392"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/1147#discussion_r109174392"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/1147"}}, "body_html": "<p>It'd be better to free it as soon as it's no longer necessary.</p>", "body_text": "It'd be better to free it as soon as it's no longer necessary."}