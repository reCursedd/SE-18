{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/294205252", "html_url": "https://github.com/pytorch/pytorch/pull/1147#issuecomment-294205252", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/1147", "id": 294205252, "node_id": "MDEyOklzc3VlQ29tbWVudDI5NDIwNTI1Mg==", "user": {"login": "ngimel", "id": 15841449, "node_id": "MDQ6VXNlcjE1ODQxNDQ5", "avatar_url": "https://avatars3.githubusercontent.com/u/15841449?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ngimel", "html_url": "https://github.com/ngimel", "followers_url": "https://api.github.com/users/ngimel/followers", "following_url": "https://api.github.com/users/ngimel/following{/other_user}", "gists_url": "https://api.github.com/users/ngimel/gists{/gist_id}", "starred_url": "https://api.github.com/users/ngimel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ngimel/subscriptions", "organizations_url": "https://api.github.com/users/ngimel/orgs", "repos_url": "https://api.github.com/users/ngimel/repos", "events_url": "https://api.github.com/users/ngimel/events{/privacy}", "received_events_url": "https://api.github.com/users/ngimel/received_events", "type": "User", "site_admin": false}, "created_at": "2017-04-14T18:10:11Z", "updated_at": "2017-04-14T18:10:11Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=5702157\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/adamlerer\">@adamlerer</a>, a note about cudnn being non-deterministic</p>\n<ol>\n<li>All convolution routines have deterministic variants (unfortunately, some of them are so slow they can not be used in production).</li>\n<li>Maxpooling used to be non-deterministic if kernel is bigger than stride, but starting from cudnn v6 there's an option of using deterministic maxpooling (and cudnn maxpooling is not used in pytorch anyway).<br>\nSo I agree, for LookupTable, like in cudnn, there should be an option \"deterministic and (possibly) slow\" and \"nondeterministic and fast\"<br>\nHow did you benchmark autograd overhead on nn.Embedding? 1ms seems like a lot.</li>\n</ol>", "body_text": "@adamlerer, a note about cudnn being non-deterministic\n\nAll convolution routines have deterministic variants (unfortunately, some of them are so slow they can not be used in production).\nMaxpooling used to be non-deterministic if kernel is bigger than stride, but starting from cudnn v6 there's an option of using deterministic maxpooling (and cudnn maxpooling is not used in pytorch anyway).\nSo I agree, for LookupTable, like in cudnn, there should be an option \"deterministic and (possibly) slow\" and \"nondeterministic and fast\"\nHow did you benchmark autograd overhead on nn.Embedding? 1ms seems like a lot.", "body": "@adamlerer, a note about cudnn being non-deterministic\r\n1) All convolution routines have deterministic variants (unfortunately, some of them are so slow they can not be used in production).\r\n2) Maxpooling used to be non-deterministic if kernel is bigger than stride, but starting from cudnn v6 there's an option of using deterministic maxpooling (and cudnn maxpooling is not used in pytorch anyway). \r\nSo I agree, for LookupTable, like in cudnn, there should be an option \"deterministic and (possibly) slow\" and \"nondeterministic and fast\"\r\nHow did you benchmark autograd overhead on nn.Embedding? 1ms seems like a lot. "}