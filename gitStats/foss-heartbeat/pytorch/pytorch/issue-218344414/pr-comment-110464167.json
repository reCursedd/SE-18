{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/110464167", "pull_request_review_id": 31644119, "id": 110464167, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMDQ2NDE2Nw==", "diff_hunk": "@@ -259,61 +324,124 @@ def test_shape(di, dj, dk):\n             alpha = random.random()\n             beta = random.random()\n \n-            expected = torch.addmm(alpha, t.to_dense(), beta, x.to_dense(), y)\n             res = torch.saddmm(alpha, t, beta, x, y)\n+            expected = torch.addmm(alpha, t.to_dense(), beta, x.to_dense(), y)\n             self.assertEqual(res.to_dense(), expected)\n \n-            expected = torch.addmm(t.to_dense(), x.to_dense(), y)\n             res = torch.saddmm(t, x, y)\n+            expected = torch.addmm(t.to_dense(), x.to_dense(), y)\n             self.assertEqual(res.to_dense(), expected)\n \n-            expected = torch.mm(x.to_dense(), y)\n             res = torch.smm(x, y)\n+            expected = torch.mm(x.to_dense(), y)\n             self.assertEqual(res.to_dense(), expected)\n \n         test_shape(7, 5, 3)\n         test_shape(1000, 100, 100)\n         test_shape(3000, 64, 300)\n \n-    def _test_spadd_shape(self, shape_i, shape_v=None):\n+    def _test_dsmm(self, is_cuda):\n+        def test_shape(di, dj, dk):\n+            x = self._gen_sparse(2, 20, [di, dj], is_cuda)[0]\n+            y = torch.randn(dj, dk)\n+            if is_cuda:\n+                y = y.cuda()\n+\n+            res = torch.dsmm(x, y)", "path": "test/test_sparse.py", "position": 361, "original_position": 361, "commit_id": "f4105bcbb3dc4ebc23f20112949a0de79e24d978", "original_commit_id": "179b2dafe865e7cbdd79b18f58143e8ca5d4782d", "user": {"login": "martinraison", "id": 2560662, "node_id": "MDQ6VXNlcjI1NjA2NjI=", "avatar_url": "https://avatars3.githubusercontent.com/u/2560662?v=4", "gravatar_id": "", "url": "https://api.github.com/users/martinraison", "html_url": "https://github.com/martinraison", "followers_url": "https://api.github.com/users/martinraison/followers", "following_url": "https://api.github.com/users/martinraison/following{/other_user}", "gists_url": "https://api.github.com/users/martinraison/gists{/gist_id}", "starred_url": "https://api.github.com/users/martinraison/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/martinraison/subscriptions", "organizations_url": "https://api.github.com/users/martinraison/orgs", "repos_url": "https://api.github.com/users/martinraison/repos", "events_url": "https://api.github.com/users/martinraison/events{/privacy}", "received_events_url": "https://api.github.com/users/martinraison/received_events", "type": "User", "site_admin": false}, "body": "Here `d` actually refers to the result. When I started working on this the existing method was `smm` (sparse x dense with sparse result), so I made `dsmm` (sparse x dense with dense result) and `hsmm` (sparse x dense with hybrid result). If we want to be more explicit we could call them `ssdmm`, `dsdmm` and `hsdmm`.", "created_at": "2017-04-07T19:25:56Z", "updated_at": "2018-11-23T15:33:04Z", "html_url": "https://github.com/pytorch/pytorch/pull/1147#discussion_r110464167", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/1147", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/110464167"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/1147#discussion_r110464167"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/1147"}}, "body_html": "<p>Here <code>d</code> actually refers to the result. When I started working on this the existing method was <code>smm</code> (sparse x dense with sparse result), so I made <code>dsmm</code> (sparse x dense with dense result) and <code>hsmm</code> (sparse x dense with hybrid result). If we want to be more explicit we could call them <code>ssdmm</code>, <code>dsdmm</code> and <code>hsdmm</code>.</p>", "body_text": "Here d actually refers to the result. When I started working on this the existing method was smm (sparse x dense with sparse result), so I made dsmm (sparse x dense with dense result) and hsmm (sparse x dense with hybrid result). If we want to be more explicit we could call them ssdmm, dsdmm and hsdmm.", "in_reply_to_id": 109561589}