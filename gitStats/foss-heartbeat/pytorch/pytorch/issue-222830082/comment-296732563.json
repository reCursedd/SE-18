{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/296732563", "html_url": "https://github.com/pytorch/pytorch/pull/1302#issuecomment-296732563", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/1302", "id": 296732563, "node_id": "MDEyOklzc3VlQ29tbWVudDI5NjczMjU2Mw==", "user": {"login": "adamlerer", "id": 5702157, "node_id": "MDQ6VXNlcjU3MDIxNTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5702157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adamlerer", "html_url": "https://github.com/adamlerer", "followers_url": "https://api.github.com/users/adamlerer/followers", "following_url": "https://api.github.com/users/adamlerer/following{/other_user}", "gists_url": "https://api.github.com/users/adamlerer/gists{/gist_id}", "starred_url": "https://api.github.com/users/adamlerer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adamlerer/subscriptions", "organizations_url": "https://api.github.com/users/adamlerer/orgs", "repos_url": "https://api.github.com/users/adamlerer/repos", "events_url": "https://api.github.com/users/adamlerer/events{/privacy}", "received_events_url": "https://api.github.com/users/adamlerer/received_events", "type": "User", "site_admin": false}, "created_at": "2017-04-24T16:33:53Z", "updated_at": "2017-04-24T16:33:53Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Note to self: in the torch tests, <code>self.assertEqual</code> calls <code>x.coalesce()</code> on sparse tensors before comparison. But if <code>coalesce</code> is broken (e.g. to always return an empty tensor) these tests will pass.<br>\nIf it's fast enough, I want to write a simple Python coalesce, and then replace <code>x.coalesce()</code> with <code>checkedCoalesce(x)</code>, which runs the Python and torch versions and asserts they're equal.</p>", "body_text": "Note to self: in the torch tests, self.assertEqual calls x.coalesce() on sparse tensors before comparison. But if coalesce is broken (e.g. to always return an empty tensor) these tests will pass.\nIf it's fast enough, I want to write a simple Python coalesce, and then replace x.coalesce() with checkedCoalesce(x), which runs the Python and torch versions and asserts they're equal.", "body": "Note to self: in the torch tests, `self.assertEqual` calls `x.coalesce()` on sparse tensors before comparison. But if `coalesce` is broken (e.g. to always return an empty tensor) these tests will pass. \r\nIf it's fast enough, I want to write a simple Python coalesce, and then replace `x.coalesce()` with `checkedCoalesce(x)`, which runs the Python and torch versions and asserts they're equal."}