{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/196928448", "pull_request_review_id": 130571833, "id": 196928448, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NjkyODQ0OA==", "diff_hunk": "@@ -416,27 +419,65 @@ def f(x, y):\n \n         ge = self.checkTrace(f, (x, y))\n \n+    @staticmethod\n+    def fn_test_relu(x, y):\n+        return F.relu(x + .5 * y)\n+\n     @unittest.skipIf(IS_WINDOWS, \"NYI: fuser support for Windows\")\n     @unittest.skipIf(not RUN_CUDA, \"fuser requires CUDA\")\n     def test_relu(self):\n-        def f(x, y):\n-            return F.relu(x + .5 * y)\n-\n         x = torch.randn(4, 4, dtype=torch.float, device='cuda')\n         y = torch.randn(4, 4, dtype=torch.float, device='cuda')\n \n-        ge = self.checkTrace(f, (x, y))\n+        ge = self.checkTrace(self.fn_test_relu, (x, y))\n+\n+    @staticmethod\n+    def fn_test_exp(x, y):\n+        return (x + .5 * y).exp()\n \n     @unittest.skipIf(IS_WINDOWS, \"NYI: fuser support for Windows\")\n     @unittest.skipIf(not RUN_CUDA, \"fuser requires CUDA\")\n     def test_exp(self):\n-        def f(x, y):\n-            return (x + .5 * y).exp()\n-\n         x = torch.randn(4, 4, dtype=torch.float, device='cuda')\n         y = torch.randn(4, 4, dtype=torch.float, device='cuda')\n \n-        ge = self.checkTrace(f, (x, y))\n+        ge = self.checkTrace(self.fn_test_exp, (x, y))\n+\n+    @unittest.skipIf(IS_WINDOWS, \"NYI: fuser support for Windows\")\n+    @unittest.skipIf(not RUN_CUDA, \"fuser requires CUDA\")\n+    @unittest.skipIf(not RUN_CUDA_HALF, \"no half support\")\n+    def test_cuda_half(self):\n+        x = torch.randn(4, 4, dtype=torch.half, device='cuda')\n+        y = torch.randn(4, 4, dtype=torch.half, device='cuda')\n+\n+        funcs = [\n+            self.fn_test_comparison_gt_lt,\n+            self.fn_test_relu,\n+            self.fn_test_exp\n+        ]\n+\n+        # Note: Non fused inputs must be float to prevent loss of precision\n+        inputs = (x.float(), y.float())\n+        fusion_inputs = (x, y)\n+        for fn in funcs:\n+            local_inputs = [t.clone().requires_grad_() for t in inputs]\n+            local_fusion_inputs = [t.clone().requires_grad_() for t in fusion_inputs]\n+\n+            # Verifies outputs\n+            fusion = torch.jit.trace(*local_fusion_inputs, optimize=True)(fn)\n+            outputs = fn(*local_inputs)\n+            fusion_outputs = fusion(*local_fusion_inputs)\n+            outputs_half = [t.half() for t in outputs]\n+            self.assertEqual(outputs_half, fusion_outputs)", "path": "test/test_jit.py", "position": 115, "original_position": 115, "commit_id": "e854f3b794be068c2f1eaba6980641e9c5b9308b", "original_commit_id": "fa1bd53a4a635dfd10a13bac1844bd46c95fb872", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Ohhh ok. Yes, I fully understand why are we running the unfused thing in float, I just searched for more `half()` calls, but missed the `dtype` part which was too far up for me to see from here. Never mind the comment. LGTM!", "created_at": "2018-06-20T20:18:24Z", "updated_at": "2018-11-23T15:45:56Z", "html_url": "https://github.com/pytorch/pytorch/pull/8679#discussion_r196928448", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/8679", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/196928448"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/8679#discussion_r196928448"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/8679"}}, "body_html": "<p>Ohhh ok. Yes, I fully understand why are we running the unfused thing in float, I just searched for more <code>half()</code> calls, but missed the <code>dtype</code> part which was too far up for me to see from here. Never mind the comment. LGTM!</p>", "body_text": "Ohhh ok. Yes, I fully understand why are we running the unfused thing in float, I just searched for more half() calls, but missed the dtype part which was too far up for me to see from here. Never mind the comment. LGTM!", "in_reply_to_id": 196926025}