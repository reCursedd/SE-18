{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/196922487", "pull_request_review_id": 130564490, "id": 196922487, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NjkyMjQ4Nw==", "diff_hunk": "@@ -121,6 +122,44 @@ void ${kernelName}(IndexType totalElements, void ** args) {\n }\n )\");\n \n+// This snippet enables half support in the jit. Following the pattern for\n+// reductions, fp16 input data is immediately upconverted to float\n+// with __half2float(). All mathematical operations are done on float\n+// values, and if needed the intermediate float representation is \n+// converted to half with __float2half() when writing to a half tensor.\n+constexpr auto half_support_literal  = R\"(    \n+#define __HALF_TO_US(var) *(reinterpret_cast<unsigned short *>(&(var)))\n+#define __HALF_TO_CUS(var) *(reinterpret_cast<const unsigned short *>(&(var)))\n+#if defined(__cplusplus)\n+  struct __align__(2) __half {\n+    __host__ __device__ __half() { }\n+\n+  protected:\n+    unsigned short __x;\n+  };\n+\n+  /* All intrinsic functions are only available to nvcc compilers */\n+  #if defined(__CUDACC__)\n+    /* Definitions of intrinsics */\n+    __device__ __half __float2half(const float f) {\n+      __half val;\n+      asm(\"{  cvt.rn.f16.f32 %0, %1;}\\n\" : \"=h\"(__HALF_TO_US(val)) : \"f\"(f));", "path": "torch/csrc/jit/fusion_compiler.cpp", "position": 43, "original_position": 43, "commit_id": "e854f3b794be068c2f1eaba6980641e9c5b9308b", "original_commit_id": "fa1bd53a4a635dfd10a13bac1844bd46c95fb872", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "Oh man! Is this actually stable, as in, CUDA 10 isn't going to change this out from under us?", "created_at": "2018-06-20T19:57:44Z", "updated_at": "2018-11-23T15:45:55Z", "html_url": "https://github.com/pytorch/pytorch/pull/8679#discussion_r196922487", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/8679", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/196922487"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/8679#discussion_r196922487"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/8679"}}, "body_html": "<p>Oh man! Is this actually stable, as in, CUDA 10 isn't going to change this out from under us?</p>", "body_text": "Oh man! Is this actually stable, as in, CUDA 10 isn't going to change this out from under us?"}