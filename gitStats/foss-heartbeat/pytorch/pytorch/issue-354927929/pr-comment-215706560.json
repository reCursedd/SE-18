{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/215706560", "pull_request_review_id": 153028164, "id": 215706560, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNTcwNjU2MA==", "diff_hunk": "@@ -166,51 +211,206 @@ struct Vec256 {\n   Vec256<T> rsqrt() const {\n     return map([](T x) { return 1 / std::sqrt(x); });\n   }\n+#define DEFINE_COMP(binary_pred)                                              \\\n+  Vec256<T> operator binary_pred(const Vec256<T> &other) const {              \\\n+    Vec256<T> vec;                                                            \\\n+    for (int64_t i = 0; i != size; i++) {                                     \\\n+      if (values[i] binary_pred other.values[i]) {                            \\\n+        std::memset(static_cast<void*>(vec.values + i), 0xFF, sizeof(T));     \\\n+      } else {                                                                \\\n+        std::memset(static_cast<void*>(vec.values + i), 0, sizeof(T));        \\\n+      }                                                                       \\\n+    }                                                                         \\\n+    return vec;                                                               \\\n+  }\n+  DEFINE_COMP(==)\n+  DEFINE_COMP(!=)\n+  DEFINE_COMP(>=)\n+  DEFINE_COMP(<=)\n+  DEFINE_COMP(>)\n+  DEFINE_COMP(<)\n+#undef DEFINE_COMP\n };\n \n-template <class T> Vec256<T> operator+(const Vec256<T> &a, const Vec256<T> &b) {\n+template <class T> Vec256<T> inline operator+(const Vec256<T> &a, const Vec256<T> &b) {\n   Vec256<T> c = Vec256<T>();\n   for (int i = 0; i != Vec256<T>::size; i++) {\n     c[i] = a[i] + b[i];\n   }\n   return c;\n }\n \n-template <class T> Vec256<T> operator-(const Vec256<T> &a, const Vec256<T> &b) {\n+template <class T> Vec256<T> inline operator-(const Vec256<T> &a, const Vec256<T> &b) {\n   Vec256<T> c = Vec256<T>();\n   for (int i = 0; i != Vec256<T>::size; i++) {\n     c[i] = a[i] - b[i];\n   }\n   return c;\n }\n \n-template <class T> Vec256<T> operator*(const Vec256<T> &a, const Vec256<T> &b) {\n+template <class T> Vec256<T> inline operator*(const Vec256<T> &a, const Vec256<T> &b) {\n   Vec256<T> c = Vec256<T>();\n   for (int i = 0; i != Vec256<T>::size; i++) {\n     c[i] = a[i] * b[i];\n   }\n   return c;\n }\n \n-template <class T> Vec256<T> operator/(const Vec256<T> &a, const Vec256<T> &b) __ubsan_ignore_float_divide_by_zero__ {\n+template <class T> Vec256<T> inline operator/(const Vec256<T> &a, const Vec256<T> &b) __ubsan_ignore_float_divide_by_zero__ {\n   Vec256<T> c = Vec256<T>();\n   for (int i = 0; i != Vec256<T>::size; i++) {\n     c[i] = a[i] / b[i];\n   }\n   return c;\n }\n \n-template <class T> Vec256<T> max(const Vec256<T> &a, const Vec256<T> &b) {\n+template <class T> Vec256<T> inline max(const Vec256<T> &a, const Vec256<T> &b) {\n   Vec256<T> c = Vec256<T>();\n   for (int i = 0; i != Vec256<T>::size; i++) {\n     c[i] = std::max(a[i], b[i]);\n   }\n   return c;\n }\n \n+template <class T> Vec256<T> inline min(const Vec256<T> &a, const Vec256<T> &b) {\n+  Vec256<T> c = Vec256<T>();\n+  for (int i = 0; i != Vec256<T>::size; i++) {\n+    c[i] = std::min(a[i], b[i]);\n+  }\n+  return c;\n+}\n+\n+#define DEFINE_LOGICAL_OP(op)                                               \\\n+template <class T>                                                          \\\n+Vec256<T> inline operator op(const Vec256<T> &a, const Vec256<T> &b) {      \\\n+  using iT = int_same_size_t<T>;                                            \\\n+  iT buffer[Vec256<T>::size];                                               \\\n+  for (int64_t i = 0; i != Vec256<T>::size; i++) {                          \\\n+    auto a_val = a[i];                                                      \\\n+    auto b_val = b[i];                                                      \\\n+    iT *i_a_ptr = reinterpret_cast<iT*>(&a_val);                            \\\n+    iT *i_b_ptr = reinterpret_cast<iT*>(&b_val);                            \\\n+    buffer[i] = *i_a_ptr op *i_b_ptr;                                       \\\n+  }                                                                         \\\n+  return Vec256<T>::loadu(buffer);                                          \\\n+}\n+DEFINE_LOGICAL_OP(&)", "path": "aten/src/ATen/cpu/vec256/vec256_base.h", "position": null, "original_position": 172, "commit_id": "78a5398f873de8d9c2a46ea7cb3a9eff1613fae6", "original_commit_id": "a0b3dad8a060ca2e8944f94ce635cf144b9a98b2", "user": {"login": "colesbury", "id": 655866, "node_id": "MDQ6VXNlcjY1NTg2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/655866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colesbury", "html_url": "https://github.com/colesbury", "followers_url": "https://api.github.com/users/colesbury/followers", "following_url": "https://api.github.com/users/colesbury/following{/other_user}", "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions", "organizations_url": "https://api.github.com/users/colesbury/orgs", "repos_url": "https://api.github.com/users/colesbury/repos", "events_url": "https://api.github.com/users/colesbury/events{/privacy}", "received_events_url": "https://api.github.com/users/colesbury/received_events", "type": "User", "site_admin": false}, "body": "This is misnamed. These are bitwise ops, not logical ops. The logical ops are `&&`, `||`, and `!`", "created_at": "2018-09-06T17:11:33Z", "updated_at": "2018-11-23T15:50:40Z", "html_url": "https://github.com/pytorch/pytorch/pull/10980#discussion_r215706560", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/10980", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/215706560"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/10980#discussion_r215706560"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/10980"}}, "body_html": "<p>This is misnamed. These are bitwise ops, not logical ops. The logical ops are <code>&amp;&amp;</code>, <code>||</code>, and <code>!</code></p>", "body_text": "This is misnamed. These are bitwise ops, not logical ops. The logical ops are &&, ||, and !"}