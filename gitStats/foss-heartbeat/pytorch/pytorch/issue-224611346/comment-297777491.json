{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/297777491", "html_url": "https://github.com/pytorch/pytorch/issues/1369#issuecomment-297777491", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/1369", "id": 297777491, "node_id": "MDEyOklzc3VlQ29tbWVudDI5Nzc3NzQ5MQ==", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "created_at": "2017-04-27T17:04:56Z", "updated_at": "2017-04-27T17:04:56Z", "author_association": "MEMBER", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=2560662\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/martinraison\">@martinraison</a> ah I must have misunderstood something, in fact that seems like a nice solution. I think a mix of 2. and 3. would be the ok - implement all methods that retain sparsity (e.g. <code>sqrt_()</code>, but not <code>add_</code>), and use lifting in situations like the one in Adagrad.</p>\n<p>I'm also curious how much having uncoalesced tensors wins us <g-emoji class=\"g-emoji\" alias=\"confused\" fallback-src=\"https://assets-cdn.github.com/images/icons/emoji/unicode/1f615.png\">\ud83d\ude15</g-emoji></p>", "body_text": "@martinraison ah I must have misunderstood something, in fact that seems like a nice solution. I think a mix of 2. and 3. would be the ok - implement all methods that retain sparsity (e.g. sqrt_(), but not add_), and use lifting in situations like the one in Adagrad.\nI'm also curious how much having uncoalesced tensors wins us \ud83d\ude15", "body": "@martinraison ah I must have misunderstood something, in fact that seems like a nice solution. I think a mix of 2. and 3. would be the ok - implement all methods that retain sparsity (e.g. `sqrt_()`, but not `add_`), and use lifting in situations like the one in Adagrad. \r\n\r\nI'm also curious how much having uncoalesced tensors wins us \ud83d\ude15 "}