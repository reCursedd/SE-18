{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/298669086", "html_url": "https://github.com/pytorch/pytorch/issues/1369#issuecomment-298669086", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/1369", "id": 298669086, "node_id": "MDEyOklzc3VlQ29tbWVudDI5ODY2OTA4Ng==", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "created_at": "2017-05-02T15:25:45Z", "updated_at": "2017-05-02T15:43:14Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Funnily enough, the current behavior of sparse_mask is documented in the test suite (in the hard-coded input/output test cases), which I noticed when I \"fixed\" this bug. Which lead to a second problem: the output of sparse_mask isn't really well defined if we internally coalesce the indices before doing the mask, because usually sparse_mask is intended to be used in conjunction with <code>s.indices()</code>, which would still be in uncoalesced form.</p>\n<p>It seems to me a better solution is assert as a precondition that the input to sparse_mask must be coalesced, and raise an error if it is not.</p>\n<p>EDIT: But this doesn't work either, because <code>is_coalesced</code> is not a very accurate indicator of coalescedness:</p>\n<pre><code>&gt;&gt;&gt; x = torch.sparse.FloatTensor(i,v)\n&gt;&gt;&gt; x\nFloatTensor with indices:\n\n 3  5\n[torch.LongTensor of size 1x2]\nand values:\n\n 0\n 2\n[torch.FloatTensor of size 2]\n\n&gt;&gt;&gt; x.is_coalesced()\nFalse\n\n&gt;&gt;&gt; y = x.coalesce()\n&gt;&gt;&gt; y.indices().fill_(0)\n\n 0  0\n[torch.LongTensor of size 1x2]\n\n&gt;&gt;&gt; y.is_coalesced()\nTrue\n&gt;&gt;&gt; y\nFloatTensor with indices:\n\n 0  0\n[torch.LongTensor of size 1x2]\nand values:\n\n 0\n 2\n[torch.FloatTensor of size 2]\n</code></pre>", "body_text": "Funnily enough, the current behavior of sparse_mask is documented in the test suite (in the hard-coded input/output test cases), which I noticed when I \"fixed\" this bug. Which lead to a second problem: the output of sparse_mask isn't really well defined if we internally coalesce the indices before doing the mask, because usually sparse_mask is intended to be used in conjunction with s.indices(), which would still be in uncoalesced form.\nIt seems to me a better solution is assert as a precondition that the input to sparse_mask must be coalesced, and raise an error if it is not.\nEDIT: But this doesn't work either, because is_coalesced is not a very accurate indicator of coalescedness:\n>>> x = torch.sparse.FloatTensor(i,v)\n>>> x\nFloatTensor with indices:\n\n 3  5\n[torch.LongTensor of size 1x2]\nand values:\n\n 0\n 2\n[torch.FloatTensor of size 2]\n\n>>> x.is_coalesced()\nFalse\n\n>>> y = x.coalesce()\n>>> y.indices().fill_(0)\n\n 0  0\n[torch.LongTensor of size 1x2]\n\n>>> y.is_coalesced()\nTrue\n>>> y\nFloatTensor with indices:\n\n 0  0\n[torch.LongTensor of size 1x2]\nand values:\n\n 0\n 2\n[torch.FloatTensor of size 2]", "body": "Funnily enough, the current behavior of sparse_mask is documented in the test suite (in the hard-coded input/output test cases), which I noticed when I \"fixed\" this bug. Which lead to a second problem: the output of sparse_mask isn't really well defined if we internally coalesce the indices before doing the mask, because usually sparse_mask is intended to be used in conjunction with `s.indices()`, which would still be in uncoalesced form.\r\n\r\nIt seems to me a better solution is assert as a precondition that the input to sparse_mask must be coalesced, and raise an error if it is not.\r\n\r\nEDIT: But this doesn't work either, because `is_coalesced` is not a very accurate indicator of coalescedness:\r\n\r\n```\r\n>>> x = torch.sparse.FloatTensor(i,v)\r\n>>> x\r\nFloatTensor with indices:\r\n\r\n 3  5\r\n[torch.LongTensor of size 1x2]\r\nand values:\r\n\r\n 0\r\n 2\r\n[torch.FloatTensor of size 2]\r\n\r\n>>> x.is_coalesced()\r\nFalse\r\n\r\n>>> y = x.coalesce()\r\n>>> y.indices().fill_(0)\r\n\r\n 0  0\r\n[torch.LongTensor of size 1x2]\r\n\r\n>>> y.is_coalesced()\r\nTrue\r\n>>> y\r\nFloatTensor with indices:\r\n\r\n 0  0\r\n[torch.LongTensor of size 1x2]\r\nand values:\r\n\r\n 0\r\n 2\r\n[torch.FloatTensor of size 2]\r\n```"}