{"url": "https://api.github.com/repos/pytorch/pytorch/issues/6305", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/6305/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/6305/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/6305/events", "html_url": "https://github.com/pytorch/pytorch/issues/6305", "id": 311501800, "node_id": "MDU6SXNzdWUzMTE1MDE4MDA=", "number": 6305, "title": "[feature request] normest : matrix 2-norm estimation", "user": {"login": "kose-y", "id": 8198142, "node_id": "MDQ6VXNlcjgxOTgxNDI=", "avatar_url": "https://avatars0.githubusercontent.com/u/8198142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kose-y", "html_url": "https://github.com/kose-y", "followers_url": "https://api.github.com/users/kose-y/followers", "following_url": "https://api.github.com/users/kose-y/following{/other_user}", "gists_url": "https://api.github.com/users/kose-y/gists{/gist_id}", "starred_url": "https://api.github.com/users/kose-y/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kose-y/subscriptions", "organizations_url": "https://api.github.com/users/kose-y/orgs", "repos_url": "https://api.github.com/users/kose-y/repos", "events_url": "https://api.github.com/users/kose-y/events{/privacy}", "received_events_url": "https://api.github.com/users/kose-y/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 443483881, "node_id": "MDU6TGFiZWw0NDM0ODM4ODE=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/todo", "name": "todo", "color": "c2e0c6", "default": false}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-04-05T07:34:32Z", "updated_at": "2018-05-14T19:45:00Z", "closed_at": null, "author_association": "NONE", "body_html": "<p>I think it would be great to have a method to estimate a <a href=\"https://en.wikipedia.org/wiki/Matrix_norm\" rel=\"nofollow\">matrix norm</a>.<br>\nThis method is useful for iterative optimization algorithms, as region of parameters for theoretically guaranteed convergence is often defined in terms of 2-norm of the data matrix.</p>\n<p>The following are relevant implementations.</p>\n<p>numpy.linalg.norm:<br>\n<a href=\"https://docs.scipy.org/doc/numpy/reference/generated/numpy.linalg.norm.html\" rel=\"nofollow\">https://docs.scipy.org/doc/numpy/reference/generated/numpy.linalg.norm.html</a><br>\n: frobenius, nuclear, l-infinity norm, l0, l1, l2, \"-1\"-norm, \"-2\"-norm (-1, -2-norms are not mathematical norms)</p>\n<p>scipy.linalg.norm:<br>\n<a href=\"https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.norm.html\" rel=\"nofollow\">https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.norm.html</a></p>\n<p>MATLAB:<br>\n<a href=\"https://mathworks.com/help/matlab/ref/normest.html\" rel=\"nofollow\">https://mathworks.com/help/matlab/ref/normest.html</a><br>\n: this one estimates matrix 2-norm.</p>", "body_text": "I think it would be great to have a method to estimate a matrix norm.\nThis method is useful for iterative optimization algorithms, as region of parameters for theoretically guaranteed convergence is often defined in terms of 2-norm of the data matrix.\nThe following are relevant implementations.\nnumpy.linalg.norm:\nhttps://docs.scipy.org/doc/numpy/reference/generated/numpy.linalg.norm.html\n: frobenius, nuclear, l-infinity norm, l0, l1, l2, \"-1\"-norm, \"-2\"-norm (-1, -2-norms are not mathematical norms)\nscipy.linalg.norm:\nhttps://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.norm.html\nMATLAB:\nhttps://mathworks.com/help/matlab/ref/normest.html\n: this one estimates matrix 2-norm.", "body": "I think it would be great to have a method to estimate a [matrix norm](https://en.wikipedia.org/wiki/Matrix_norm\r\n). \r\nThis method is useful for iterative optimization algorithms, as region of parameters for theoretically guaranteed convergence is often defined in terms of 2-norm of the data matrix. \r\n\r\nThe following are relevant implementations.\r\n\r\nnumpy.linalg.norm: \r\nhttps://docs.scipy.org/doc/numpy/reference/generated/numpy.linalg.norm.html\r\n: frobenius, nuclear, l-infinity norm, l0, l1, l2, \"-1\"-norm, \"-2\"-norm (-1, -2-norms are not mathematical norms)\r\n\r\nscipy.linalg.norm:\r\nhttps://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.norm.html\r\n\r\nMATLAB:\r\nhttps://mathworks.com/help/matlab/ref/normest.html\r\n: this one estimates matrix 2-norm. "}