{"url": "https://api.github.com/repos/pytorch/pytorch/issues/1869", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/1869/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/1869/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/1869/events", "html_url": "https://github.com/pytorch/pytorch/pull/1869", "id": 237645412, "node_id": "MDExOlB1bGxSZXF1ZXN0MTI2ODQ2Mjc5", "number": 1869, "title": "Support out-of-place broadcast type definitions.", "user": {"login": "gchanan", "id": 3768583, "node_id": "MDQ6VXNlcjM3Njg1ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3768583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gchanan", "html_url": "https://github.com/gchanan", "followers_url": "https://api.github.com/users/gchanan/followers", "following_url": "https://api.github.com/users/gchanan/following{/other_user}", "gists_url": "https://api.github.com/users/gchanan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gchanan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gchanan/subscriptions", "organizations_url": "https://api.github.com/users/gchanan/orgs", "repos_url": "https://api.github.com/users/gchanan/repos", "events_url": "https://api.github.com/users/gchanan/events{/privacy}", "received_events_url": "https://api.github.com/users/gchanan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-06-21T19:50:45Z", "updated_at": "2017-06-22T16:50:24Z", "closed_at": "2017-06-22T16:50:20Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/1869", "html_url": "https://github.com/pytorch/pytorch/pull/1869", "diff_url": "https://github.com/pytorch/pytorch/pull/1869.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/1869.patch"}, "body_html": "<p>This means you can specify the types of the arguments to be expanded in a \"broadcast:\" definition, for cases where the types aren't THTensor.  We previously only allowed this for in-place functions, but we are now allowing for out-of-place functions.  Note we could detect types in the Broadcast plugin itself, but then we'd have to add parameter checking.  Right now the Broadcast Plugin is simple and the definitions are self contained.</p>\n<p>This functionality isn't currently exposed, but:</p>\n<ol>\n<li>It simplifies the existing implementation [since we don't actually need THTensor_(expand2), THTensor_(expand3) in TH], because we can rely on templates rather than explicit macro expansions on types</li>\n<li>It would be needed to support broadcasting with masked_select; not supporting that currently is arbitrary (there is no numpy equivalent, although you can use numpy advanced indexing for the same functionality), although I suspect not implementing it makes the autograd definition more complicated than necessary.  We may also need it for future function definitions.</li>\n</ol>", "body_text": "This means you can specify the types of the arguments to be expanded in a \"broadcast:\" definition, for cases where the types aren't THTensor.  We previously only allowed this for in-place functions, but we are now allowing for out-of-place functions.  Note we could detect types in the Broadcast plugin itself, but then we'd have to add parameter checking.  Right now the Broadcast Plugin is simple and the definitions are self contained.\nThis functionality isn't currently exposed, but:\n\nIt simplifies the existing implementation [since we don't actually need THTensor_(expand2), THTensor_(expand3) in TH], because we can rely on templates rather than explicit macro expansions on types\nIt would be needed to support broadcasting with masked_select; not supporting that currently is arbitrary (there is no numpy equivalent, although you can use numpy advanced indexing for the same functionality), although I suspect not implementing it makes the autograd definition more complicated than necessary.  We may also need it for future function definitions.", "body": "This means you can specify the types of the arguments to be expanded in a \"broadcast:\" definition, for cases where the types aren't THTensor.  We previously only allowed this for in-place functions, but we are now allowing for out-of-place functions.  Note we could detect types in the Broadcast plugin itself, but then we'd have to add parameter checking.  Right now the Broadcast Plugin is simple and the definitions are self contained.\r\n\r\nThis functionality isn't currently exposed, but:\r\n1) It simplifies the existing implementation [since we don't actually need THTensor_(expand2), THTensor_(expand3) in TH], because we can rely on templates rather than explicit macro expansions on types\r\n2) It would be needed to support broadcasting with masked_select; not supporting that currently is arbitrary (there is no numpy equivalent, although you can use numpy advanced indexing for the same functionality), although I suspect not implementing it makes the autograd definition more complicated than necessary.  We may also need it for future function definitions."}