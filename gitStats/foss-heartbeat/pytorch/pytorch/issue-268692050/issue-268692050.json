{"url": "https://api.github.com/repos/pytorch/pytorch/issues/3303", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/3303/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/3303/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/3303/events", "html_url": "https://github.com/pytorch/pytorch/issues/3303", "id": 268692050, "node_id": "MDU6SXNzdWUyNjg2OTIwNTA=", "number": 3303, "title": "mv doesn't propagate gradients to matrix term", "user": {"login": "zkolter", "id": 2465474, "node_id": "MDQ6VXNlcjI0NjU0NzQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/2465474?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zkolter", "html_url": "https://github.com/zkolter", "followers_url": "https://api.github.com/users/zkolter/followers", "following_url": "https://api.github.com/users/zkolter/following{/other_user}", "gists_url": "https://api.github.com/users/zkolter/gists{/gist_id}", "starred_url": "https://api.github.com/users/zkolter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zkolter/subscriptions", "organizations_url": "https://api.github.com/users/zkolter/orgs", "repos_url": "https://api.github.com/users/zkolter/repos", "events_url": "https://api.github.com/users/zkolter/events{/privacy}", "received_events_url": "https://api.github.com/users/zkolter/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 424131847, "node_id": "MDU6TGFiZWw0MjQxMzE4NDc=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/bug", "name": "bug", "color": "b60205", "default": true}, {"id": 443484135, "node_id": "MDU6TGFiZWw0NDM0ODQxMzU=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/high%20priority", "name": "high priority", "color": "F22613", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-10-26T09:38:12Z", "updated_at": "2017-10-30T20:00:23Z", "closed_at": "2017-10-30T20:00:23Z", "author_association": "CONTRIBUTOR", "body_html": "<p>It seems like autodiff of matrix terms of .mv() doesn't behave as I'd expect.</p>\n<div class=\"highlight highlight-source-python\"><pre>A <span class=\"pl-k\">=</span> Variable(torch.randn(<span class=\"pl-c1\">3</span>,<span class=\"pl-c1\">2</span>), <span class=\"pl-v\">requires_grad</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>)\nx <span class=\"pl-k\">=</span> Variable(torch.rand(<span class=\"pl-c1\">2</span>), <span class=\"pl-v\">requires_grad</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>)\n(A.mv(x)).sum().backward()\n<span class=\"pl-c1\">print</span>(A.grad)\n<span class=\"pl-c1\">print</span>(x.grad)\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> Variable containing:</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span>  0  0</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span>  0  0</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span>  0  0</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> [torch.FloatTensor of size 3x2]</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> Variable containing:</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> -0.6709</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span>  0.9995</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> [torch.FloatTensor of size 2]</span></pre></div>\n<p>But if we use .mm(), things work fine:</p>\n<div class=\"highlight highlight-source-python\"><pre>A <span class=\"pl-k\">=</span> Variable(torch.randn(<span class=\"pl-c1\">3</span>,<span class=\"pl-c1\">2</span>), <span class=\"pl-v\">requires_grad</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>)\nx <span class=\"pl-k\">=</span> Variable(torch.rand(<span class=\"pl-c1\">2</span>), <span class=\"pl-v\">requires_grad</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>)\n(A.mm(x[:,<span class=\"pl-c1\">None</span>])).sum().backward()\n<span class=\"pl-c1\">print</span>(A.grad)\n<span class=\"pl-c1\">print</span>(x.grad)\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> Variable containing:</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span>  0.7123  0.2487</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span>  0.7123  0.2487</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span>  0.7123  0.2487</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> [torch.FloatTensor of size 3x2]</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> Variable containing:</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> -0.6709</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span>  0.9995</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> [torch.FloatTensor of size 2]</span></pre></div>", "body_text": "It seems like autodiff of matrix terms of .mv() doesn't behave as I'd expect.\nA = Variable(torch.randn(3,2), requires_grad=True)\nx = Variable(torch.rand(2), requires_grad=True)\n(A.mv(x)).sum().backward()\nprint(A.grad)\nprint(x.grad)\n\n# Variable containing:\n#  0  0\n#  0  0\n#  0  0\n# [torch.FloatTensor of size 3x2]\n# Variable containing:\n# -0.6709\n#  0.9995\n# [torch.FloatTensor of size 2]\nBut if we use .mm(), things work fine:\nA = Variable(torch.randn(3,2), requires_grad=True)\nx = Variable(torch.rand(2), requires_grad=True)\n(A.mm(x[:,None])).sum().backward()\nprint(A.grad)\nprint(x.grad)\n\n# Variable containing:\n#  0.7123  0.2487\n#  0.7123  0.2487\n#  0.7123  0.2487\n# [torch.FloatTensor of size 3x2]\n# Variable containing:\n# -0.6709\n#  0.9995\n# [torch.FloatTensor of size 2]", "body": "It seems like autodiff of matrix terms of .mv() doesn't behave as I'd expect.\r\n\r\n```python\r\nA = Variable(torch.randn(3,2), requires_grad=True)\r\nx = Variable(torch.rand(2), requires_grad=True)\r\n(A.mv(x)).sum().backward()\r\nprint(A.grad)\r\nprint(x.grad)\r\n\r\n# Variable containing:\r\n#  0  0\r\n#  0  0\r\n#  0  0\r\n# [torch.FloatTensor of size 3x2]\r\n# Variable containing:\r\n# -0.6709\r\n#  0.9995\r\n# [torch.FloatTensor of size 2]\r\n```\r\n\r\nBut if we use .mm(), things work fine:\r\n```python\r\nA = Variable(torch.randn(3,2), requires_grad=True)\r\nx = Variable(torch.rand(2), requires_grad=True)\r\n(A.mm(x[:,None])).sum().backward()\r\nprint(A.grad)\r\nprint(x.grad)\r\n\r\n# Variable containing:\r\n#  0.7123  0.2487\r\n#  0.7123  0.2487\r\n#  0.7123  0.2487\r\n# [torch.FloatTensor of size 3x2]\r\n# Variable containing:\r\n# -0.6709\r\n#  0.9995\r\n# [torch.FloatTensor of size 2]"}