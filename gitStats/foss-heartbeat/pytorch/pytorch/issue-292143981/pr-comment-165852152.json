{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/165852152", "pull_request_review_id": 93852858, "id": 165852152, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NTg1MjE1Mg==", "diff_hunk": "@@ -0,0 +1,135 @@\n+import torch\n+from .Module import Module\n+from torch.legacy.nn.View import View\n+import numpy\n+\n+\n+class PixelShuffle(Module):\n+    def __init__(self, upscaleFactor):\n+        super(PixelShuffle, self).__init__()\n+        self.upscaleFactor = upscaleFactor\n+        self.upscaleFactorSquared = self.upscaleFactor * self.upscaleFactor\n+        self._intermediateShape = None\n+        self._outShape = None\n+        self._shuffleOut = None\n+\n+    def updateOutput(self, input):\n+\n+        if hasattr(self, '_intermediateShape') is False:\n+            self._intermediateShape = None\n+        if hasattr(self, '_outShape') is False:\n+            self._outShape = None\n+        if hasattr(self, '_shuffleOut') is False:\n+            self._shuffleOut = None\n+\n+        if self._intermediateShape is None:\n+            self._intermediateShape = torch.Tensor(6, 0)\n+        if self._outShape is None:\n+            self._outShape = torch.Tensor()\n+        if self._shuffleOut is None:\n+            self._shuffleOut = input.new()\n+\n+        batched = False\n+        batchSize = 1\n+        inputStartIdx = 0\n+        outShapeIdx = 0\n+\n+        if len(input.size()) == 4:\n+            batched = True\n+            batchSize = input.size(0)\n+            inputStartIdx = 1\n+            outShapeIdx = 1\n+            self._outShape = torch.Tensor([0, 0, 0, 0])\n+            self._outShape[0] = batchSize\n+\n+        else:\n+            self._outShape = torch.Tensor([0, 0, 0])\n+\n+        channels = input.size(inputStartIdx) / self.upscaleFactorSquared\n+        inHeight = input.size(inputStartIdx + 1)\n+        inWidth = input.size(inputStartIdx + 2)\n+\n+        (self._intermediateShape)[0] = batchSize\n+        (self._intermediateShape)[1] = channels\n+        (self._intermediateShape)[2] = self.upscaleFactor\n+        (self._intermediateShape)[3] = self.upscaleFactor\n+        (self._intermediateShape)[4] = inHeight\n+        (self._intermediateShape)[5] = inWidth\n+\n+        self._outShape[outShapeIdx] = channels\n+        self._outShape[outShapeIdx + 1] = inHeight * self.upscaleFactor\n+        self._outShape[outShapeIdx + 2] = inWidth * self.upscaleFactor\n+\n+        tmp = None\n+        tmp = self._intermediateShape.type(torch.IntTensor)\n+        tmp = torch.Size((tmp[0], tmp[1], tmp[2], tmp[3], tmp[4], tmp[5]))\n+        inputView = input.view(tmp)\n+\n+        self._shuffleOut.resize_(inputView.size(0), inputView.size(1),\n+                                 inputView.size(4), inputView.size(2),\n+                                 inputView.size(5), inputView.size(3))\n+        self._shuffleOut.copy_(inputView.permute(0, 1, 4, 2, 5, 3))\n+\n+        tmp = None\n+        if len(input.size()) == 4:\n+            tmp = self._outShape.type(torch.IntTensor)\n+            tmp = torch.Size((tmp[0], tmp[1], tmp[2], tmp[3]))\n+        else:\n+            tmp = self._outShape.type(torch.IntTensor)\n+            tmp = torch.Size((tmp[0], tmp[1], tmp[2]))\n+        self.output = self._shuffleOut.view(tmp)\n+\n+        print(\"the r factor is : \", self.upscaleFactor)\n+        print(\"the input is: \", input.size())\n+        print(\"input type: \", input.type())\n+        print(\"the output is: \", self.output.size())\n+        print(\"output type: \", self.output.type())", "path": "torch/legacy/nn/PixelShuffle.py", "position": null, "original_position": 86, "commit_id": "5fa63a4ae1731568445fb6391466b92bb4bcab3a", "original_commit_id": "b28358b0109d3c7733aabd272ab9108d63b60e95", "user": {"login": "ak096", "id": 837627, "node_id": "MDQ6VXNlcjgzNzYyNw==", "avatar_url": "https://avatars2.githubusercontent.com/u/837627?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ak096", "html_url": "https://github.com/ak096", "followers_url": "https://api.github.com/users/ak096/followers", "following_url": "https://api.github.com/users/ak096/following{/other_user}", "gists_url": "https://api.github.com/users/ak096/gists{/gist_id}", "starred_url": "https://api.github.com/users/ak096/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ak096/subscriptions", "organizations_url": "https://api.github.com/users/ak096/orgs", "repos_url": "https://api.github.com/users/ak096/repos", "events_url": "https://api.github.com/users/ak096/events{/privacy}", "received_events_url": "https://api.github.com/users/ak096/received_events", "type": "User", "site_admin": false}, "body": "Done", "created_at": "2018-02-04T17:56:11Z", "updated_at": "2018-11-23T15:39:06Z", "html_url": "https://github.com/pytorch/pytorch/pull/4897#discussion_r165852152", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4897", "author_association": "NONE", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/165852152"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/4897#discussion_r165852152"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4897"}}, "body_html": "<p>Done</p>", "body_text": "Done", "in_reply_to_id": 164285209}