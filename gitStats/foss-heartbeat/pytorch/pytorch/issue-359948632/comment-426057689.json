{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/426057689", "html_url": "https://github.com/pytorch/pytorch/pull/11641#issuecomment-426057689", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/11641", "id": 426057689, "node_id": "MDEyOklzc3VlQ29tbWVudDQyNjA1NzY4OQ==", "user": {"login": "Roger-luo", "id": 8445510, "node_id": "MDQ6VXNlcjg0NDU1MTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/8445510?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Roger-luo", "html_url": "https://github.com/Roger-luo", "followers_url": "https://api.github.com/users/Roger-luo/followers", "following_url": "https://api.github.com/users/Roger-luo/following{/other_user}", "gists_url": "https://api.github.com/users/Roger-luo/gists{/gist_id}", "starred_url": "https://api.github.com/users/Roger-luo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Roger-luo/subscriptions", "organizations_url": "https://api.github.com/users/Roger-luo/orgs", "repos_url": "https://api.github.com/users/Roger-luo/repos", "events_url": "https://api.github.com/users/Roger-luo/events{/privacy}", "received_events_url": "https://api.github.com/users/Roger-luo/received_events", "type": "User", "site_admin": false}, "created_at": "2018-10-01T20:49:11Z", "updated_at": "2018-10-01T20:49:11Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Okay... this is related to different gcc versions, MWE:</p>\n<div class=\"highlight highlight-source-c++\"><pre>#<span class=\"pl-k\">include</span> <span class=\"pl-s\"><span class=\"pl-pds\">&lt;</span>iostream<span class=\"pl-pds\">&gt;</span></span>\n#<span class=\"pl-k\">include</span> <span class=\"pl-s\"><span class=\"pl-pds\">&lt;</span>complex<span class=\"pl-pds\">&gt;</span></span>\n\n<span class=\"pl-k\">template </span>&lt;<span class=\"pl-k\">class</span> <span class=\"pl-en\">T</span>&gt;\n<span class=\"pl-k\">struct</span> <span class=\"pl-en\">Vec256</span> {\n<span class=\"pl-k\">public:</span>\n T values[<span class=\"pl-c1\">32</span> / <span class=\"pl-k\">sizeof</span>(T)] = {<span class=\"pl-c1\">0</span>};\n  <span class=\"pl-k\">static</span> <span class=\"pl-k\">constexpr</span> <span class=\"pl-k\">int</span> size = <span class=\"pl-c1\">32</span> / <span class=\"pl-k\">sizeof</span>(T);\n  <span class=\"pl-en\">Vec256</span>() {}\n  <span class=\"pl-en\">Vec256</span>(T val) {\n    <span class=\"pl-k\">for</span> (<span class=\"pl-k\">int</span> i = <span class=\"pl-c1\">0</span>; i != size; i++) {\n      values[i] = val;\n    }\n  }\n};\n\n<span class=\"pl-k\">int</span> <span class=\"pl-en\">main</span>() {\n  Vec256&lt;std::complex&lt;<span class=\"pl-k\">double</span>&gt;&gt; <span class=\"pl-c1\">r</span>(<span class=\"pl-c1\">1</span>);\n  std::cout &lt;&lt; r.<span class=\"pl-smi\">values</span>[<span class=\"pl-c1\">1</span>] &lt;&lt; std::endl;\n  <span class=\"pl-k\">return</span> <span class=\"pl-c1\">0</span>;\n}</pre></div>\n<p>This works fine with <code>clang</code> and later version of <code>g++</code>, but won't built with <code>g++</code> 4.8. specialize the <code>class</code> manually for complex will work.</p>", "body_text": "Okay... this is related to different gcc versions, MWE:\n#include <iostream>\n#include <complex>\n\ntemplate <class T>\nstruct Vec256 {\npublic:\n T values[32 / sizeof(T)] = {0};\n  static constexpr int size = 32 / sizeof(T);\n  Vec256() {}\n  Vec256(T val) {\n    for (int i = 0; i != size; i++) {\n      values[i] = val;\n    }\n  }\n};\n\nint main() {\n  Vec256<std::complex<double>> r(1);\n  std::cout << r.values[1] << std::endl;\n  return 0;\n}\nThis works fine with clang and later version of g++, but won't built with g++ 4.8. specialize the class manually for complex will work.", "body": "Okay... this is related to different gcc versions, MWE:\r\n\r\n```c++\r\n#include <iostream>\r\n#include <complex>\r\n\r\ntemplate <class T>\r\nstruct Vec256 {\r\npublic:\r\n T values[32 / sizeof(T)] = {0};\r\n  static constexpr int size = 32 / sizeof(T);\r\n  Vec256() {}\r\n  Vec256(T val) {\r\n    for (int i = 0; i != size; i++) {\r\n      values[i] = val;\r\n    }\r\n  }\r\n};\r\n\r\nint main() {\r\n  Vec256<std::complex<double>> r(1);\r\n  std::cout << r.values[1] << std::endl;\r\n  return 0;\r\n}\r\n```\r\n\r\nThis works fine with `clang` and later version of `g++`, but won't built with `g++` 4.8. specialize the `class` manually for complex will work."}