{"url": "https://api.github.com/repos/pytorch/pytorch/issues/2733", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/2733/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/2733/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/2733/events", "html_url": "https://github.com/pytorch/pytorch/issues/2733", "id": 257682709, "node_id": "MDU6SXNzdWUyNTc2ODI3MDk=", "number": 2733, "title": "Pytorch in multi-cpu cluster", "user": {"login": "marcsv87", "id": 9281922, "node_id": "MDQ6VXNlcjkyODE5MjI=", "avatar_url": "https://avatars1.githubusercontent.com/u/9281922?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcsv87", "html_url": "https://github.com/marcsv87", "followers_url": "https://api.github.com/users/marcsv87/followers", "following_url": "https://api.github.com/users/marcsv87/following{/other_user}", "gists_url": "https://api.github.com/users/marcsv87/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcsv87/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcsv87/subscriptions", "organizations_url": "https://api.github.com/users/marcsv87/orgs", "repos_url": "https://api.github.com/users/marcsv87/repos", "events_url": "https://api.github.com/users/marcsv87/events{/privacy}", "received_events_url": "https://api.github.com/users/marcsv87/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-09-14T11:16:43Z", "updated_at": "2017-09-20T08:33:37Z", "closed_at": null, "author_association": "NONE", "body_html": "<p>Hi,<br>\nI would like to use the distributed module to train a convolution net in a CPU cluster. Investigating your code, the function torch.cuda.device_count() is called in several places, and is used to populate the device_ids list. Since I don't have any GPU devices in my cluster, the method device_count() will always return 0 and any subsequent attempt to access device_ids[0] will result in an index exception.<br>\nTaking a naive path and changing device_count so that it always returns the number of nodes I intend to use then I get a different error:</p>\n<p>if not all(input.is_cuda for input in inputs):<br>\nraise TypeError('Broadcast function not implemented for CPU tensors')</p>\n<p>So I would like to ask you whether you have any plans to implement the distributed module to train networks in a multi-cpu cluster.</p>\n<p>Many thanks</p>", "body_text": "Hi,\nI would like to use the distributed module to train a convolution net in a CPU cluster. Investigating your code, the function torch.cuda.device_count() is called in several places, and is used to populate the device_ids list. Since I don't have any GPU devices in my cluster, the method device_count() will always return 0 and any subsequent attempt to access device_ids[0] will result in an index exception.\nTaking a naive path and changing device_count so that it always returns the number of nodes I intend to use then I get a different error:\nif not all(input.is_cuda for input in inputs):\nraise TypeError('Broadcast function not implemented for CPU tensors')\nSo I would like to ask you whether you have any plans to implement the distributed module to train networks in a multi-cpu cluster.\nMany thanks", "body": "Hi, \r\nI would like to use the distributed module to train a convolution net in a CPU cluster. Investigating your code, the function torch.cuda.device_count() is called in several places, and is used to populate the device_ids list. Since I don't have any GPU devices in my cluster, the method device_count() will always return 0 and any subsequent attempt to access device_ids[0] will result in an index exception.\r\nTaking a naive path and changing device_count so that it always returns the number of nodes I intend to use then I get a different error: \r\n\r\nif not all(input.is_cuda for input in inputs):\r\n   raise TypeError('Broadcast function not implemented for CPU tensors')\r\n\r\nSo I would like to ask you whether you have any plans to implement the distributed module to train networks in a multi-cpu cluster.\r\n\r\nMany thanks"}