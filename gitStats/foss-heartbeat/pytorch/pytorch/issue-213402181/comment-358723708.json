{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/358723708", "html_url": "https://github.com/pytorch/pytorch/issues/974#issuecomment-358723708", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/974", "id": 358723708, "node_id": "MDEyOklzc3VlQ29tbWVudDM1ODcyMzcwOA==", "user": {"login": "sharma409", "id": 3169386, "node_id": "MDQ6VXNlcjMxNjkzODY=", "avatar_url": "https://avatars1.githubusercontent.com/u/3169386?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sharma409", "html_url": "https://github.com/sharma409", "followers_url": "https://api.github.com/users/sharma409/followers", "following_url": "https://api.github.com/users/sharma409/following{/other_user}", "gists_url": "https://api.github.com/users/sharma409/gists{/gist_id}", "starred_url": "https://api.github.com/users/sharma409/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sharma409/subscriptions", "organizations_url": "https://api.github.com/users/sharma409/orgs", "repos_url": "https://api.github.com/users/sharma409/repos", "events_url": "https://api.github.com/users/sharma409/events{/privacy}", "received_events_url": "https://api.github.com/users/sharma409/received_events", "type": "User", "site_admin": false}, "created_at": "2018-01-18T17:39:22Z", "updated_at": "2018-01-18T17:39:22Z", "author_association": "NONE", "body_html": "<p>Why do you discourage sharing modules between containers? Perhaps you can explicitly give a view into the container rather than return a new container if you want to preserve this.</p>\n<p>Though there are typically workarounds, splicing can be useful, for example in a project I'm working on that builds on recent work progressively growing nerual networks and slowly adding to the number of layers being trained. The growth of an encoder-decoder architecture, for example, is inherently middle-out, so lends itself to splicing. One can be clever with indexing and make it work, but splicing seems more natural for this problem.</p>", "body_text": "Why do you discourage sharing modules between containers? Perhaps you can explicitly give a view into the container rather than return a new container if you want to preserve this.\nThough there are typically workarounds, splicing can be useful, for example in a project I'm working on that builds on recent work progressively growing nerual networks and slowly adding to the number of layers being trained. The growth of an encoder-decoder architecture, for example, is inherently middle-out, so lends itself to splicing. One can be clever with indexing and make it work, but splicing seems more natural for this problem.", "body": "Why do you discourage sharing modules between containers? Perhaps you can explicitly give a view into the container rather than return a new container if you want to preserve this.\r\n\r\nThough there are typically workarounds, splicing can be useful, for example in a project I'm working on that builds on recent work progressively growing nerual networks and slowly adding to the number of layers being trained. The growth of an encoder-decoder architecture, for example, is inherently middle-out, so lends itself to splicing. One can be clever with indexing and make it work, but splicing seems more natural for this problem."}