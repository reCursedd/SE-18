{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/285749644", "html_url": "https://github.com/pytorch/pytorch/issues/974#issuecomment-285749644", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/974", "id": 285749644, "node_id": "MDEyOklzc3VlQ29tbWVudDI4NTc0OTY0NA==", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "created_at": "2017-03-10T18:39:18Z", "updated_at": "2017-03-10T18:39:18Z", "author_association": "MEMBER", "body_html": "<p>After giving it a thought, I concluded that there's no good way to solve this.<br>\nReturning another <code>nn.ModuleList</code> doesn't feel right, because we discourage sharing modules between containers.<br>\nReturning a Python list seems bug prone, because someone might do sth like below, and the modules wouldn't get registered, even though it looks as if they should:</p>\n<div class=\"highlight highlight-source-python\"><pre>l <span class=\"pl-k\">=</span> nn.ModuleList([<span class=\"pl-c1\">...</span>])\n<span class=\"pl-k\">class</span> <span class=\"pl-en\">MyModule</span>(<span class=\"pl-e\">nn</span>.<span class=\"pl-e\">Module</span>):\n    <span class=\"pl-k\">def</span> <span class=\"pl-c1\">__init__</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>):\n        <span class=\"pl-c1\">self</span>.submodule <span class=\"pl-k\">=</span> l[<span class=\"pl-c1\">1</span>:]</pre></div>", "body_text": "After giving it a thought, I concluded that there's no good way to solve this.\nReturning another nn.ModuleList doesn't feel right, because we discourage sharing modules between containers.\nReturning a Python list seems bug prone, because someone might do sth like below, and the modules wouldn't get registered, even though it looks as if they should:\nl = nn.ModuleList([...])\nclass MyModule(nn.Module):\n    def __init__(self):\n        self.submodule = l[1:]", "body": "After giving it a thought, I concluded that there's no good way to solve this.\r\nReturning another `nn.ModuleList` doesn't feel right, because we discourage sharing modules between containers.\r\nReturning a Python list seems bug prone, because someone might do sth like below, and the modules wouldn't get registered, even though it looks as if they should:\r\n```python\r\nl = nn.ModuleList([...])\r\nclass MyModule(nn.Module):\r\n    def __init__(self):\r\n        self.submodule = l[1:]\r\n```"}