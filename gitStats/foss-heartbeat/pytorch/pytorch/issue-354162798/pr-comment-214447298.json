{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/214447298", "pull_request_review_id": 151514983, "id": 214447298, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNDQ0NzI5OA==", "diff_hunk": "@@ -328,81 +345,108 @@ def tmp(t):\n     ('kthvalue', small_3d_unique, lambda t: [3],),\n     ('kthvalue', small_3d_unique, lambda t: [3, 1], 'dim'),\n     ('kthvalue', small_3d_unique, lambda t: [3, -1], 'neg_dim'),\n-    ('lerp', small_3d, lambda t: [small_3d(t), 0.3],),\n-    ('max', small_3d_unique, lambda t: [],),\n-    ('max', small_3d_unique, lambda t: [1], 'dim'),\n-    ('max', small_3d_unique, lambda t: [-1], 'neg_dim'),\n+    ('lerp', small_3d, lambda t: [small_3d(t), 0.3], '', types, False, \"skipIfRocm:HalfTensor\"),\n+    ('max', small_3d_unique, lambda t: [], '', types, False, \"skipIfRocm:HalfTensor\"),\n+    ('max', small_3d_unique, lambda t: [1], 'dim', types, False,\n+        \"skipIfRocm:ByteTensor,CharTensor,DoubleTensor,FloatTensor,HalfTensor,IntTensor,LongTensor,ShortTensor\"),", "path": "test/test_cuda.py", "position": null, "original_position": 148, "commit_id": "734d988cefccfc4d2ad2443782cc3d07f61c82ea", "original_commit_id": "2fb92ad5f2e07334080b85e29cda7a99d24e11be", "user": {"login": "jithunnair-amd", "id": 37884920, "node_id": "MDQ6VXNlcjM3ODg0OTIw", "avatar_url": "https://avatars1.githubusercontent.com/u/37884920?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jithunnair-amd", "html_url": "https://github.com/jithunnair-amd", "followers_url": "https://api.github.com/users/jithunnair-amd/followers", "following_url": "https://api.github.com/users/jithunnair-amd/following{/other_user}", "gists_url": "https://api.github.com/users/jithunnair-amd/gists{/gist_id}", "starred_url": "https://api.github.com/users/jithunnair-amd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jithunnair-amd/subscriptions", "organizations_url": "https://api.github.com/users/jithunnair-amd/orgs", "repos_url": "https://api.github.com/users/jithunnair-amd/repos", "events_url": "https://api.github.com/users/jithunnair-amd/events{/privacy}", "received_events_url": "https://api.github.com/users/jithunnair-amd/received_events", "type": "User", "site_admin": false}, "body": "Agreed. This made sense when we started on this effort because we didn't want to unnecessarily disable all datatypes for a test if some of them worked. However, now that we're done with that effort, we can simply replace all examples like the above with `skipIfRocm`", "created_at": "2018-08-31T18:58:43Z", "updated_at": "2018-11-23T15:50:29Z", "html_url": "https://github.com/pytorch/pytorch/pull/10893#discussion_r214447298", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/10893", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/214447298"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/10893#discussion_r214447298"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/10893"}}, "body_html": "<p>Agreed. This made sense when we started on this effort because we didn't want to unnecessarily disable all datatypes for a test if some of them worked. However, now that we're done with that effort, we can simply replace all examples like the above with <code>skipIfRocm</code></p>", "body_text": "Agreed. This made sense when we started on this effort because we didn't want to unnecessarily disable all datatypes for a test if some of them worked. However, now that we're done with that effort, we can simply replace all examples like the above with skipIfRocm", "in_reply_to_id": 214420705}