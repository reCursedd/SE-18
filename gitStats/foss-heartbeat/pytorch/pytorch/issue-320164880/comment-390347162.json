{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/390347162", "html_url": "https://github.com/pytorch/pytorch/issues/7277#issuecomment-390347162", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/7277", "id": 390347162, "node_id": "MDEyOklzc3VlQ29tbWVudDM5MDM0NzE2Mg==", "user": {"login": "gchanan", "id": 3768583, "node_id": "MDQ6VXNlcjM3Njg1ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3768583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gchanan", "html_url": "https://github.com/gchanan", "followers_url": "https://api.github.com/users/gchanan/followers", "following_url": "https://api.github.com/users/gchanan/following{/other_user}", "gists_url": "https://api.github.com/users/gchanan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gchanan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gchanan/subscriptions", "organizations_url": "https://api.github.com/users/gchanan/orgs", "repos_url": "https://api.github.com/users/gchanan/repos", "events_url": "https://api.github.com/users/gchanan/events{/privacy}", "received_events_url": "https://api.github.com/users/gchanan/received_events", "type": "User", "site_admin": false}, "created_at": "2018-05-18T22:17:50Z", "updated_at": "2018-05-18T22:19:22Z", "author_association": "CONTRIBUTOR", "body_html": "<p>As to the issue <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=9110200\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/fmassa\">@fmassa</a> and <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=4583066\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/apaszke\">@apaszke</a> are discussing about whether the device should be inferred for <code>torch.tensor</code>...I think I agree with <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=4583066\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/apaszke\">@apaszke</a> that either choice is confusing :), but I think inferring the device is probably the least surprising.</p>\n<p>Also, since we now do device inference (as noted above, the issues reported have been fixed), if the input is a tensor, <code>torch.tensor</code> behaves identically to <code>Tensor.new_tensor</code> (<code>torch.tensor</code> supports non-tensor inputs as well).  This is pretty strange, so maybe we should just get rid of <code>Tensor.new_tensor</code>.</p>\n<blockquote>\n<p>In reality, you probably just should never use torch.tensor, because you rarely want to enforce the copy, even if the data is perfectly valid. Maybe let's see what <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=3768583\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/gchanan\">@gchanan</a> thinks?</p>\n</blockquote>\n<p>Somewhat interestingly, <code>numpy.array</code> has a <code>copy</code> parameter (default True), so you can avoid the copy, although in most cases it just seems easier to call <code>numpy.as_array</code> (except it lacks some parameters).  Maybe we should add that parameter, because what we have now is subtle (i.e. people will just call <code>torch.tensor</code> because the name makes more sense, and it's not obvious unless you look at the docs that what you want is <code>torch.as_tensor</code>).</p>\n<p>I'm not a huge fan of the numpy APIs here, but I think keeping the torch APIs as close to the numpy ones has more value than writing new APIs.</p>", "body_text": "As to the issue @fmassa and @apaszke are discussing about whether the device should be inferred for torch.tensor...I think I agree with @apaszke that either choice is confusing :), but I think inferring the device is probably the least surprising.\nAlso, since we now do device inference (as noted above, the issues reported have been fixed), if the input is a tensor, torch.tensor behaves identically to Tensor.new_tensor (torch.tensor supports non-tensor inputs as well).  This is pretty strange, so maybe we should just get rid of Tensor.new_tensor.\n\nIn reality, you probably just should never use torch.tensor, because you rarely want to enforce the copy, even if the data is perfectly valid. Maybe let's see what @gchanan thinks?\n\nSomewhat interestingly, numpy.array has a copy parameter (default True), so you can avoid the copy, although in most cases it just seems easier to call numpy.as_array (except it lacks some parameters).  Maybe we should add that parameter, because what we have now is subtle (i.e. people will just call torch.tensor because the name makes more sense, and it's not obvious unless you look at the docs that what you want is torch.as_tensor).\nI'm not a huge fan of the numpy APIs here, but I think keeping the torch APIs as close to the numpy ones has more value than writing new APIs.", "body": "As to the issue @fmassa and @apaszke are discussing about whether the device should be inferred for `torch.tensor`...I think I agree with @apaszke that either choice is confusing :), but I think inferring the device is probably the least surprising.\r\n\r\nAlso, since we now do device inference (as noted above, the issues reported have been fixed), if the input is a tensor, `torch.tensor` behaves identically to `Tensor.new_tensor` (`torch.tensor` supports non-tensor inputs as well).  This is pretty strange, so maybe we should just get rid of `Tensor.new_tensor`.\r\n\r\n> In reality, you probably just should never use torch.tensor, because you rarely want to enforce the copy, even if the data is perfectly valid. Maybe let's see what @gchanan thinks?\r\n\r\nSomewhat interestingly, `numpy.array` has a `copy` parameter (default True), so you can avoid the copy, although in most cases it just seems easier to call `numpy.as_array` (except it lacks some parameters).  Maybe we should add that parameter, because what we have now is subtle (i.e. people will just call `torch.tensor` because the name makes more sense, and it's not obvious unless you look at the docs that what you want is `torch.as_tensor`).\r\n\r\nI'm not a huge fan of the numpy APIs here, but I think keeping the torch APIs as close to the numpy ones has more value than writing new APIs."}