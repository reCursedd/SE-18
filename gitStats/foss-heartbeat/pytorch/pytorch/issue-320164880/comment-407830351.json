{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/407830351", "html_url": "https://github.com/pytorch/pytorch/issues/7277#issuecomment-407830351", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/7277", "id": 407830351, "node_id": "MDEyOklzc3VlQ29tbWVudDQwNzgzMDM1MQ==", "user": {"login": "Balandat", "id": 1605878, "node_id": "MDQ6VXNlcjE2MDU4Nzg=", "avatar_url": "https://avatars2.githubusercontent.com/u/1605878?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Balandat", "html_url": "https://github.com/Balandat", "followers_url": "https://api.github.com/users/Balandat/followers", "following_url": "https://api.github.com/users/Balandat/following{/other_user}", "gists_url": "https://api.github.com/users/Balandat/gists{/gist_id}", "starred_url": "https://api.github.com/users/Balandat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Balandat/subscriptions", "organizations_url": "https://api.github.com/users/Balandat/orgs", "repos_url": "https://api.github.com/users/Balandat/repos", "events_url": "https://api.github.com/users/Balandat/events{/privacy}", "received_events_url": "https://api.github.com/users/Balandat/received_events", "type": "User", "site_admin": false}, "created_at": "2018-07-25T17:18:16Z", "updated_at": "2018-07-25T17:18:16Z", "author_association": "NONE", "body_html": "<p>This happens even when using a pure python list literal:</p>\n<pre><code>import torch\n\nv1 = torch.randn(5).cuda()\nv2 = torch.tensor([1.], device=v1.device)\nv3 = torch.Tensor([1.], device=v1.device)\n\nfor v in (v1, v2, v3):\n    print(v.device)\n\ncuda:0\ncuda:0\ncpu\n</code></pre>", "body_text": "This happens even when using a pure python list literal:\nimport torch\n\nv1 = torch.randn(5).cuda()\nv2 = torch.tensor([1.], device=v1.device)\nv3 = torch.Tensor([1.], device=v1.device)\n\nfor v in (v1, v2, v3):\n    print(v.device)\n\ncuda:0\ncuda:0\ncpu", "body": "This happens even when using a pure python list literal:\r\n\r\n```\r\nimport torch\r\n\r\nv1 = torch.randn(5).cuda()\r\nv2 = torch.tensor([1.], device=v1.device)\r\nv3 = torch.Tensor([1.], device=v1.device)\r\n\r\nfor v in (v1, v2, v3):\r\n    print(v.device)\r\n\r\ncuda:0\r\ncuda:0\r\ncpu\r\n```\r\n"}