{"url": "https://api.github.com/repos/pytorch/pytorch/issues/5049", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/5049/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/5049/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/5049/events", "html_url": "https://github.com/pytorch/pytorch/issues/5049", "id": 294456687, "node_id": "MDU6SXNzdWUyOTQ0NTY2ODc=", "number": 5049, "title": "[feature request] torch.cuda.FloatTensor().resize_as_ to accept a torch.FloatTensor()", "user": {"login": "vadimkantorov", "id": 1041752, "node_id": "MDQ6VXNlcjEwNDE3NTI=", "avatar_url": "https://avatars0.githubusercontent.com/u/1041752?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vadimkantorov", "html_url": "https://github.com/vadimkantorov", "followers_url": "https://api.github.com/users/vadimkantorov/followers", "following_url": "https://api.github.com/users/vadimkantorov/following{/other_user}", "gists_url": "https://api.github.com/users/vadimkantorov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vadimkantorov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vadimkantorov/subscriptions", "organizations_url": "https://api.github.com/users/vadimkantorov/orgs", "repos_url": "https://api.github.com/users/vadimkantorov/repos", "events_url": "https://api.github.com/users/vadimkantorov/events{/privacy}", "received_events_url": "https://api.github.com/users/vadimkantorov/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-02-05T16:30:44Z", "updated_at": "2018-09-13T22:53:08Z", "closed_at": "2018-09-13T22:53:08Z", "author_association": "NONE", "body_html": "<p>Custom weight loading logic often involves copying weights from CPU tensors to GPU tensors in the net parameters. It would be nicer if <code>resize_as_</code> version worked as well.</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> torch\n\nm <span class=\"pl-k\">=</span> torch.nn.Module()\nm.p <span class=\"pl-k\">=</span> torch.nn.Parameter()\nm.cuda()\nstate_dict <span class=\"pl-k\">=</span> m.state_dict()\nloaded <span class=\"pl-k\">=</span> torch.FloatTensor(<span class=\"pl-c1\">4</span>, <span class=\"pl-c1\">4</span>)\n\nstate_dict[<span class=\"pl-s\"><span class=\"pl-pds\">'</span>p<span class=\"pl-pds\">'</span></span>].resize_(loaded.size()).copy_(loaded) <span class=\"pl-c\"><span class=\"pl-c\">#</span> works</span>\n\nstate_dict[<span class=\"pl-s\"><span class=\"pl-pds\">'</span>p<span class=\"pl-pds\">'</span></span>].resize_as_(loaded).copy_(loaded) <span class=\"pl-c\"><span class=\"pl-c\">#</span> fails</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> TypeError: resize_as_ received an invalid combination of arguments - got (torch.FloatTensor), but expected (torch.cuda.FloatTensor the_template)</span></pre></div>", "body_text": "Custom weight loading logic often involves copying weights from CPU tensors to GPU tensors in the net parameters. It would be nicer if resize_as_ version worked as well.\nimport torch\n\nm = torch.nn.Module()\nm.p = torch.nn.Parameter()\nm.cuda()\nstate_dict = m.state_dict()\nloaded = torch.FloatTensor(4, 4)\n\nstate_dict['p'].resize_(loaded.size()).copy_(loaded) # works\n\nstate_dict['p'].resize_as_(loaded).copy_(loaded) # fails\n# TypeError: resize_as_ received an invalid combination of arguments - got (torch.FloatTensor), but expected (torch.cuda.FloatTensor the_template)", "body": "Custom weight loading logic often involves copying weights from CPU tensors to GPU tensors in the net parameters. It would be nicer if `resize_as_` version worked as well.\r\n\r\n```python\r\nimport torch\r\n\r\nm = torch.nn.Module()\r\nm.p = torch.nn.Parameter()\r\nm.cuda()\r\nstate_dict = m.state_dict()\r\nloaded = torch.FloatTensor(4, 4)\r\n\r\nstate_dict['p'].resize_(loaded.size()).copy_(loaded) # works\r\n\r\nstate_dict['p'].resize_as_(loaded).copy_(loaded) # fails\r\n# TypeError: resize_as_ received an invalid combination of arguments - got (torch.FloatTensor), but expected (torch.cuda.FloatTensor the_template)\r\n```"}