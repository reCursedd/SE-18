{"url": "https://api.github.com/repos/pytorch/pytorch/issues/7532", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/7532/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/7532/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/7532/events", "html_url": "https://github.com/pytorch/pytorch/issues/7532", "id": 322574614, "node_id": "MDU6SXNzdWUzMjI1NzQ2MTQ=", "number": 7532, "title": "torch.distributions.uniform.Uniform.cdf() can return negative values or values above one", "user": {"login": "andreh7", "id": 2156379, "node_id": "MDQ6VXNlcjIxNTYzNzk=", "avatar_url": "https://avatars0.githubusercontent.com/u/2156379?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andreh7", "html_url": "https://github.com/andreh7", "followers_url": "https://api.github.com/users/andreh7/followers", "following_url": "https://api.github.com/users/andreh7/following{/other_user}", "gists_url": "https://api.github.com/users/andreh7/gists{/gist_id}", "starred_url": "https://api.github.com/users/andreh7/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andreh7/subscriptions", "organizations_url": "https://api.github.com/users/andreh7/orgs", "repos_url": "https://api.github.com/users/andreh7/repos", "events_url": "https://api.github.com/users/andreh7/events{/privacy}", "received_events_url": "https://api.github.com/users/andreh7/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-05-13T08:25:02Z", "updated_at": "2018-05-14T19:36:01Z", "closed_at": "2018-05-14T19:36:01Z", "author_association": "CONTRIBUTOR", "body_html": "<h2>Issue description</h2>\n<p><code>torch.distributions.uniform.Uniform.cdf()</code> can return negative values or values above one because it does not do a range check like <code>log_prob()</code> in the same class does.</p>\n<p>Relevant code in <code>cdf()</code>:</p>\n<p><div class=\"border rounded-1 my-2\">\n  <div class=\"f6 px-3 py-2 lh-condensed border-bottom bg-gray-light\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/pytorch/pytorch/blob/825c3ca2d6deb505b39b6b988d28f28a7bd15f4d/torch/distributions/uniform.py#L70-L74\">pytorch/torch/distributions/uniform.py</a>\n    </p>\n    <p class=\"mb-0 text-gray-light\">\n        Lines 70 to 74\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/pytorch/pytorch/commit/825c3ca2d6deb505b39b6b988d28f28a7bd15f4d\">825c3ca</a>\n    </p>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L70\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"70\"></td>\n          <td id=\"LC70\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-k\">def</span> <span class=\"pl-en\">cdf</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>, <span class=\"pl-smi\">value</span>): </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L71\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"71\"></td>\n          <td id=\"LC71\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     <span class=\"pl-k\">if</span> <span class=\"pl-c1\">self</span>._validate_args: </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L72\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"72\"></td>\n          <td id=\"LC72\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">         <span class=\"pl-c1\">self</span>._validate_sample(value) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L73\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"73\"></td>\n          <td id=\"LC73\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     result <span class=\"pl-k\">=</span> (value <span class=\"pl-k\">-</span> <span class=\"pl-c1\">self</span>.low) <span class=\"pl-k\">/</span> (<span class=\"pl-c1\">self</span>.high <span class=\"pl-k\">-</span> <span class=\"pl-c1\">self</span>.low) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L74\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"74\"></td>\n          <td id=\"LC74\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     <span class=\"pl-k\">return</span> result </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n</p>\n<p>Range checking in <code>log_prob()</code>:</p>\n<p><div class=\"border rounded-1 my-2\">\n  <div class=\"f6 px-3 py-2 lh-condensed border-bottom bg-gray-light\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/pytorch/pytorch/blob/825c3ca2d6deb505b39b6b988d28f28a7bd15f4d/torch/distributions/uniform.py#L63-L68\">pytorch/torch/distributions/uniform.py</a>\n    </p>\n    <p class=\"mb-0 text-gray-light\">\n        Lines 63 to 68\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/pytorch/pytorch/commit/825c3ca2d6deb505b39b6b988d28f28a7bd15f4d\">825c3ca</a>\n    </p>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L63\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"63\"></td>\n          <td id=\"LC63\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-k\">def</span> <span class=\"pl-en\">log_prob</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>, <span class=\"pl-smi\">value</span>): </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L64\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"64\"></td>\n          <td id=\"LC64\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     <span class=\"pl-k\">if</span> <span class=\"pl-c1\">self</span>._validate_args: </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L65\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"65\"></td>\n          <td id=\"LC65\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">         <span class=\"pl-c1\">self</span>._validate_sample(value) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L66\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"66\"></td>\n          <td id=\"LC66\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     lb <span class=\"pl-k\">=</span> value.ge(<span class=\"pl-c1\">self</span>.low).type_as(<span class=\"pl-c1\">self</span>.low) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L67\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"67\"></td>\n          <td id=\"LC67\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     ub <span class=\"pl-k\">=</span> value.lt(<span class=\"pl-c1\">self</span>.high).type_as(<span class=\"pl-c1\">self</span>.low) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L68\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"68\"></td>\n          <td id=\"LC68\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     <span class=\"pl-k\">return</span> torch.log(lb.mul(ub)) <span class=\"pl-k\">-</span> torch.log(<span class=\"pl-c1\">self</span>.high <span class=\"pl-k\">-</span> <span class=\"pl-c1\">self</span>.low) </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n</p>\n<p>I can provide a pull request based on the range checking as done in the <code>log_prob()</code> method of the same class (although <code>log_prob()</code> throws an exception with scalar arguments because of these range checks while <code>cdf()</code> accepts scalar arguments).</p>\n<h2>Code example</h2>\n<pre><code>import torch\nfrom torch.distributions.uniform import Uniform\nuniform = Uniform(1,2)\nprint uniform.cdf(0), uniform.cdf(5)\n</code></pre>\n<p>will give</p>\n<pre><code>tensor(-1.) tensor(4.)\n</code></pre>\n<h2>System Info</h2>\n<pre><code>Collecting environment information...\nPyTorch version: 0.4.0\nIs debug build: No\nCUDA used to build PyTorch: Could not collect\n\nOS: Mac OSX 10.13.4\nGCC version: Could not collect\nCMake version: version 3.11.0\n\nPython version: 2.7\nIs CUDA available: No\nCUDA runtime version: 9.1.128\nGPU models and configuration: Could not collect\nNvidia driver version: Could not collect\ncuDNN version: Could not collect\n\nVersions of relevant libraries:\n[pip] numpy (1.14.2)\n[pip] root-numpy (4.4.0)\n[pip] torch (0.4.0)\n[pip] torchvision (0.2.1)\n[conda] Could not collect\n\n</code></pre>", "body_text": "Issue description\ntorch.distributions.uniform.Uniform.cdf() can return negative values or values above one because it does not do a range check like log_prob() in the same class does.\nRelevant code in cdf():\n\n  \n    \n      pytorch/torch/distributions/uniform.py\n    \n    \n        Lines 70 to 74\n      in\n      825c3ca\n    \n    \n    \n    \n\n        \n          \n           def cdf(self, value): \n        \n\n        \n          \n               if self._validate_args: \n        \n\n        \n          \n                   self._validate_sample(value) \n        \n\n        \n          \n               result = (value - self.low) / (self.high - self.low) \n        \n\n        \n          \n               return result \n        \n    \n  \n\n\nRange checking in log_prob():\n\n  \n    \n      pytorch/torch/distributions/uniform.py\n    \n    \n        Lines 63 to 68\n      in\n      825c3ca\n    \n    \n    \n    \n\n        \n          \n           def log_prob(self, value): \n        \n\n        \n          \n               if self._validate_args: \n        \n\n        \n          \n                   self._validate_sample(value) \n        \n\n        \n          \n               lb = value.ge(self.low).type_as(self.low) \n        \n\n        \n          \n               ub = value.lt(self.high).type_as(self.low) \n        \n\n        \n          \n               return torch.log(lb.mul(ub)) - torch.log(self.high - self.low) \n        \n    \n  \n\n\nI can provide a pull request based on the range checking as done in the log_prob() method of the same class (although log_prob() throws an exception with scalar arguments because of these range checks while cdf() accepts scalar arguments).\nCode example\nimport torch\nfrom torch.distributions.uniform import Uniform\nuniform = Uniform(1,2)\nprint uniform.cdf(0), uniform.cdf(5)\n\nwill give\ntensor(-1.) tensor(4.)\n\nSystem Info\nCollecting environment information...\nPyTorch version: 0.4.0\nIs debug build: No\nCUDA used to build PyTorch: Could not collect\n\nOS: Mac OSX 10.13.4\nGCC version: Could not collect\nCMake version: version 3.11.0\n\nPython version: 2.7\nIs CUDA available: No\nCUDA runtime version: 9.1.128\nGPU models and configuration: Could not collect\nNvidia driver version: Could not collect\ncuDNN version: Could not collect\n\nVersions of relevant libraries:\n[pip] numpy (1.14.2)\n[pip] root-numpy (4.4.0)\n[pip] torch (0.4.0)\n[pip] torchvision (0.2.1)\n[conda] Could not collect", "body": "## Issue description\r\n\r\n`torch.distributions.uniform.Uniform.cdf()` can return negative values or values above one because it does not do a range check like `log_prob()` in the same class does.\r\n\r\nRelevant code in `cdf()`:\r\n\r\nhttps://github.com/pytorch/pytorch/blob/825c3ca2d6deb505b39b6b988d28f28a7bd15f4d/torch/distributions/uniform.py#L70-L74\r\n\r\nRange checking in `log_prob()`:\r\n\r\nhttps://github.com/pytorch/pytorch/blob/825c3ca2d6deb505b39b6b988d28f28a7bd15f4d/torch/distributions/uniform.py#L63-L68\r\n\r\nI can provide a pull request based on the range checking as done in the `log_prob()` method of the same class (although `log_prob()` throws an exception with scalar arguments because of these range checks while `cdf()` accepts scalar arguments).\r\n\r\n## Code example\r\n\r\n```\r\nimport torch\r\nfrom torch.distributions.uniform import Uniform\r\nuniform = Uniform(1,2)\r\nprint uniform.cdf(0), uniform.cdf(5)\r\n```\r\nwill give\r\n\r\n```\r\ntensor(-1.) tensor(4.)\r\n```\r\n\r\n## System Info\r\n```\r\nCollecting environment information...\r\nPyTorch version: 0.4.0\r\nIs debug build: No\r\nCUDA used to build PyTorch: Could not collect\r\n\r\nOS: Mac OSX 10.13.4\r\nGCC version: Could not collect\r\nCMake version: version 3.11.0\r\n\r\nPython version: 2.7\r\nIs CUDA available: No\r\nCUDA runtime version: 9.1.128\r\nGPU models and configuration: Could not collect\r\nNvidia driver version: Could not collect\r\ncuDNN version: Could not collect\r\n\r\nVersions of relevant libraries:\r\n[pip] numpy (1.14.2)\r\n[pip] root-numpy (4.4.0)\r\n[pip] torch (0.4.0)\r\n[pip] torchvision (0.2.1)\r\n[conda] Could not collect\r\n\r\n```"}