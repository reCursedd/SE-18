{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/175765288", "pull_request_review_id": 105347091, "id": 175765288, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTc2NTI4OA==", "diff_hunk": "@@ -148,6 +149,15 @@ def TypedDict(name, attrs, total=True):  # type: ignore\n     ${initializer}\n }\"\"\")\n \n+UNIFY_ACTUAL = CodeTemplate(\"\"\"\\\n+${actual}.type() != (**new_type) ? (**new_type).copy(${actual}) : ${actual}\\\n+\"\"\")\n+UNIFY_TYPES = CodeTemplate(\"\"\"\\\n+    if (auto new_type = unifyTypes(${to_unify_actuals})) {\n+        return (*new_type)->${api_name}(${unified_actuals});", "path": "aten/src/ATen/function_wrapper.py", "position": 17, "original_position": 17, "commit_id": "5163c7781bcf0893776eb97f7c851040228c101c", "original_commit_id": "24b7c7dfbedfeb2d8cf3e57fc6945c15c9479a55", "user": {"login": "gchanan", "id": 3768583, "node_id": "MDQ6VXNlcjM3Njg1ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3768583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gchanan", "html_url": "https://github.com/gchanan", "followers_url": "https://api.github.com/users/gchanan/followers", "following_url": "https://api.github.com/users/gchanan/following{/other_user}", "gists_url": "https://api.github.com/users/gchanan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gchanan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gchanan/subscriptions", "organizations_url": "https://api.github.com/users/gchanan/orgs", "repos_url": "https://api.github.com/users/gchanan/repos", "events_url": "https://api.github.com/users/gchanan/events{/privacy}", "received_events_url": "https://api.github.com/users/gchanan/received_events", "type": "User", "site_admin": false}, "body": "BTW I'm happy to get this in (as is) before we figure this out completely -- it would be nice if we could fit broadcasting into this story as well.  For one this would allow us to remove the \"s_\" magic for derivatives.yaml -- how when I write the derivative for a built-in function `foo` it's actually for `s_foo`, but when I write the derivative for a native function `bar` it's for `bar`, not `s_bar`.  But I don't know how to push the broadcasting into method/functional for native functions.", "created_at": "2018-03-20T13:34:44Z", "updated_at": "2018-11-23T15:40:58Z", "html_url": "https://github.com/pytorch/pytorch/pull/5864#discussion_r175765288", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/5864", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/175765288"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/5864#discussion_r175765288"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/5864"}}, "body_html": "<p>BTW I'm happy to get this in (as is) before we figure this out completely -- it would be nice if we could fit broadcasting into this story as well.  For one this would allow us to remove the \"s_\" magic for derivatives.yaml -- how when I write the derivative for a built-in function <code>foo</code> it's actually for <code>s_foo</code>, but when I write the derivative for a native function <code>bar</code> it's for <code>bar</code>, not <code>s_bar</code>.  But I don't know how to push the broadcasting into method/functional for native functions.</p>", "body_text": "BTW I'm happy to get this in (as is) before we figure this out completely -- it would be nice if we could fit broadcasting into this story as well.  For one this would allow us to remove the \"s_\" magic for derivatives.yaml -- how when I write the derivative for a built-in function foo it's actually for s_foo, but when I write the derivative for a native function bar it's for bar, not s_bar.  But I don't know how to push the broadcasting into method/functional for native functions.", "in_reply_to_id": 175515586}