{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/176139293", "pull_request_review_id": 105790159, "id": 176139293, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NjEzOTI5Mw==", "diff_hunk": "@@ -148,6 +149,15 @@ def TypedDict(name, attrs, total=True):  # type: ignore\n     ${initializer}\n }\"\"\")\n \n+UNIFY_ACTUAL = CodeTemplate(\"\"\"\\\n+${actual}.type() != (**new_type) ? (**new_type).copy(${actual}) : ${actual}\\\n+\"\"\")\n+UNIFY_TYPES = CodeTemplate(\"\"\"\\\n+    if (auto new_type = unifyTypes(${to_unify_actuals})) {\n+        return (*new_type)->${api_name}(${unified_actuals});", "path": "aten/src/ATen/function_wrapper.py", "position": 17, "original_position": 17, "commit_id": "5163c7781bcf0893776eb97f7c851040228c101c", "original_commit_id": "24b7c7dfbedfeb2d8cf3e57fc6945c15c9479a55", "user": {"login": "gchanan", "id": 3768583, "node_id": "MDQ6VXNlcjM3Njg1ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3768583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gchanan", "html_url": "https://github.com/gchanan", "followers_url": "https://api.github.com/users/gchanan/followers", "following_url": "https://api.github.com/users/gchanan/following{/other_user}", "gists_url": "https://api.github.com/users/gchanan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gchanan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gchanan/subscriptions", "organizations_url": "https://api.github.com/users/gchanan/orgs", "repos_url": "https://api.github.com/users/gchanan/repos", "events_url": "https://api.github.com/users/gchanan/events{/privacy}", "received_events_url": "https://api.github.com/users/gchanan/received_events", "type": "User", "site_admin": false}, "body": "By functional + method API I mean instead of putting the unifyTypes code in Type.cpp, you put it in Functions.cpp (if there's a function) and TensorMethods.h (if there's a method).\r\n\r\nSo, e.g. at::mul(Tensor self, Tensor other) is going to be something like:\r\n`\r\nreturn infer_type(self).mul(self, other);\r\n`\r\nand it becomes something like:\r\n`\r\nnew_type = ...\r\nreturn new_type.mul(self.toType(new_type), other.toType(new_type)\r\n`\r\n\r\nsimilarly for methods:\r\n`\r\nreturn self.type().mul(self, other)\r\n`\r\nbecomes something similar to the above.  As I mentioned above, this won't work if you call the Type method directly, but that shouldn't really be viewed as an API, but an implementation detail.", "created_at": "2018-03-21T16:03:29Z", "updated_at": "2018-11-23T15:41:00Z", "html_url": "https://github.com/pytorch/pytorch/pull/5864#discussion_r176139293", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/5864", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/176139293"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/5864#discussion_r176139293"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/5864"}}, "body_html": "<p>By functional + method API I mean instead of putting the unifyTypes code in Type.cpp, you put it in Functions.cpp (if there's a function) and TensorMethods.h (if there's a method).</p>\n<p>So, e.g. at::mul(Tensor self, Tensor other) is going to be something like:<br>\n<code>return infer_type(self).mul(self, other);</code><br>\nand it becomes something like:<br>\n<code>new_type = ... return new_type.mul(self.toType(new_type), other.toType(new_type)</code></p>\n<p>similarly for methods:<br>\n<code>return self.type().mul(self, other)</code><br>\nbecomes something similar to the above.  As I mentioned above, this won't work if you call the Type method directly, but that shouldn't really be viewed as an API, but an implementation detail.</p>", "body_text": "By functional + method API I mean instead of putting the unifyTypes code in Type.cpp, you put it in Functions.cpp (if there's a function) and TensorMethods.h (if there's a method).\nSo, e.g. at::mul(Tensor self, Tensor other) is going to be something like:\nreturn infer_type(self).mul(self, other);\nand it becomes something like:\nnew_type = ... return new_type.mul(self.toType(new_type), other.toType(new_type)\nsimilarly for methods:\nreturn self.type().mul(self, other)\nbecomes something similar to the above.  As I mentioned above, this won't work if you call the Type method directly, but that shouldn't really be viewed as an API, but an implementation detail.", "in_reply_to_id": 175515586}