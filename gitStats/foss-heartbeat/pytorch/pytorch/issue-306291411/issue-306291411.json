{"url": "https://api.github.com/repos/pytorch/pytorch/issues/5864", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/5864/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/5864/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/5864/events", "html_url": "https://github.com/pytorch/pytorch/pull/5864", "id": 306291411, "node_id": "MDExOlB1bGxSZXF1ZXN0MTc1Nzc3Nzg0", "number": 5864, "title": "Fix binary operations with scalars", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2018-03-18T22:36:40Z", "updated_at": "2018-11-23T15:41:12Z", "closed_at": "2018-04-24T18:54:25Z", "author_association": "MEMBER", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/5864", "html_url": "https://github.com/pytorch/pytorch/pull/5864", "diff_url": "https://github.com/pytorch/pytorch/pull/5864.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/5864.patch"}, "body_html": "<p>A new version of <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"303623607\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/5647\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/pytorch/pytorch/pull/5647/hovercard\" href=\"https://github.com/pytorch/pytorch/pull/5647\">#5647</a>. Here's an example auto-generated function that uses the new path:</p>\n<div class=\"highlight highlight-source-c++\"><pre>Tensor <span class=\"pl-en\">Type::add</span>(<span class=\"pl-k\">const</span> Tensor &amp; self, <span class=\"pl-k\">const</span> Tensor &amp; other, Scalar alpha) <span class=\"pl-k\">const</span> {                                                                              \n    <span class=\"pl-k\">if</span> (<span class=\"pl-k\">auto</span> new_type = <span class=\"pl-c1\">unifyTypes</span>(self, other)) {                                                                                                             \n        <span class=\"pl-k\">return</span> (*new_type)-&gt;<span class=\"pl-c1\">add</span>(self.<span class=\"pl-c1\">type</span>() != (**new_type) ? (**new_type).<span class=\"pl-c1\">copy</span>(self) : self, other.<span class=\"pl-c1\">type</span>() != (**new_type) ? (**new_type).<span class=\"pl-c1\">copy</span>(other) : other);\n    }                                                                                                                                                          \n                                                                                                                                                               \n    Tensor b_self, b_other;                                                                                                                                    \n    <span class=\"pl-c1\">std::tie</span>(b_self, b_other) = <span class=\"pl-c1\">expand_outplace</span>(self, other, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>add<span class=\"pl-pds\">\"</span></span>);                                                                                           \n    <span class=\"pl-k\">return</span> <span class=\"pl-c1\">s_add</span>(b_self, b_other, alpha);                                                                                                                      \n}                                                                                                                                                              </pre></div>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=3768583\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/gchanan\">@gchanan</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=655866\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/colesbury\">@colesbury</a> do you also want me to include the changes to binding code for Python operators from the previous PR (i.e. use C++ operators to dispatch them)?</p>", "body_text": "A new version of #5647. Here's an example auto-generated function that uses the new path:\nTensor Type::add(const Tensor & self, const Tensor & other, Scalar alpha) const {                                                                              \n    if (auto new_type = unifyTypes(self, other)) {                                                                                                             \n        return (*new_type)->add(self.type() != (**new_type) ? (**new_type).copy(self) : self, other.type() != (**new_type) ? (**new_type).copy(other) : other);\n    }                                                                                                                                                          \n                                                                                                                                                               \n    Tensor b_self, b_other;                                                                                                                                    \n    std::tie(b_self, b_other) = expand_outplace(self, other, \"add\");                                                                                           \n    return s_add(b_self, b_other, alpha);                                                                                                                      \n}                                                                                                                                                              \n@gchanan @colesbury do you also want me to include the changes to binding code for Python operators from the previous PR (i.e. use C++ operators to dispatch them)?", "body": "A new version of #5647. Here's an example auto-generated function that uses the new path:\r\n```cpp\r\nTensor Type::add(const Tensor & self, const Tensor & other, Scalar alpha) const {                                                                              \r\n    if (auto new_type = unifyTypes(self, other)) {                                                                                                             \r\n        return (*new_type)->add(self.type() != (**new_type) ? (**new_type).copy(self) : self, other.type() != (**new_type) ? (**new_type).copy(other) : other);\r\n    }                                                                                                                                                          \r\n                                                                                                                                                               \r\n    Tensor b_self, b_other;                                                                                                                                    \r\n    std::tie(b_self, b_other) = expand_outplace(self, other, \"add\");                                                                                           \r\n    return s_add(b_self, b_other, alpha);                                                                                                                      \r\n}                                                                                                                                                              \r\n```\r\n\r\n@gchanan @colesbury do you also want me to include the changes to binding code for Python operators from the previous PR (i.e. use C++ operators to dispatch them)?"}