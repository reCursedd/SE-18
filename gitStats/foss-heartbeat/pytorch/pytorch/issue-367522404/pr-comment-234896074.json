{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/234896074", "pull_request_review_id": 176617477, "id": 234896074, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzNDg5NjA3NA==", "diff_hunk": "@@ -799,4 +799,294 @@ Tensor sspaddmm(const Tensor& self, const Tensor& mat1, const Tensor& mat2,\n   return result;\n }\n \n+// --------------------------------------------------------------------\n+// sparse.sum()\n+//\n+// This implementation calls coalesce() to do the sum reduction on\n+// sparse dims. Ideally in the future there should be unified reduction function\n+// for ops like sum, max, and min.\n+// --------------------------------------------------------------------\n+Tensor _sparse_sum(const SparseTensor& input) {\n+  return input.coalesce().values().sum();\n+}\n+\n+Tensor _sparse_sum(const SparseTensor& input, ScalarType dtype) {\n+  // don't have to do a conversion to the correct dtype first\n+  // just need to setup the accumulator correctly\n+  return input.coalesce().values().sum(dtype);\n+}\n+\n+Tensor _sparse_sum(const SparseTensor& input, IntList dims_to_sum) {\n+  return at::_sparse_sum(input, dims_to_sum, false);\n+}\n+\n+Tensor _sparse_sum(const SparseTensor& input, IntList dims_to_sum, ScalarType dtype) {\n+  return at::_sparse_sum(input.to(dtype), dims_to_sum, false);\n+}\n+\n+Tensor _sparse_sum(const SparseTensor& input, IntList dims_to_sum, bool keepdim, ScalarType dtype) {\n+  return at::_sparse_sum(input.to(dtype), dims_to_sum, keepdim);\n+}\n+\n+Tensor _sparse_sum(const SparseTensor& input, IntList dims_to_sum, bool keepdim) {\n+  AT_CHECK(input.is_coalesced(), \"sparse_sum: sparse_sum doesn't support uncoalesced SparseTensor\");\n+\n+  const int64_t input_dim = input.dim();\n+  auto dims_to_sum_b = dim_list_to_bitset(dims_to_sum, input_dim);\n+  auto dims_to_sum_v = dims_to_sum.vec();\n+  maybe_wrap_dims(dims_to_sum_v, input_dim);\n+\n+  LongTensor indices = input._indices();\n+  Tensor values = input._values();\n+  IntList sizes = input.sizes();\n+  const int64_t sparse_dim = input.sparse_dim();\n+  const int64_t dense_dim = input.dense_dim();\n+\n+  auto dims_to_keep_v = std::vector<int64_t>();\n+  auto dense_dims_to_sum_v = std::vector<int64_t>();\n+  for (int64_t d = 0; d < input_dim; d++) {\n+    if (dims_to_sum_b[d]) {\n+      if (d >= sparse_dim) dense_dims_to_sum_v.emplace_back(d + 1 - sparse_dim);\n+    }\n+    else {\n+      dims_to_keep_v.emplace_back(d);\n+    }\n+  }\n+  const int64_t sparse_dims_to_sum_size = dims_to_sum_v.size() - dense_dims_to_sum_v.size();\n+  const bool sum_all_sparse_dim = (sparse_dim == sparse_dims_to_sum_size);\n+  const bool sum_dense_dim = (dense_dims_to_sum_v.size() > 0);\n+\n+  // new values\n+  Tensor new_values;\n+  if (sum_dense_dim) {\n+    new_values = values.sum(dense_dims_to_sum_v);\n+    if (keepdim) {\n+      auto new_values_size = values.sizes().vec();\n+      for (auto d : dense_dims_to_sum_v) new_values_size[d] = 1;\n+      new_values = new_values.view(new_values_size);\n+    }\n+  }\n+  else {\n+    new_values = values.clone();\n+  }\n+\n+  if (sum_all_sparse_dim) {\n+    // return a dense tensor if sum over all sparse dims\n+    new_values = new_values.sum(0);\n+    if (keepdim) {\n+      for (int64_t i = 0; i < sparse_dim; i++) {\n+        new_values = new_values.unsqueeze(0);\n+      }\n+    }\n+    return new_values;\n+  }\n+  else {\n+    // new indices\n+    LongTensor new_indices;\n+    if (sparse_dims_to_sum_size == 0) {\n+      new_indices = indices.clone();\n+    }\n+    else {\n+      if (keepdim) {\n+        new_indices = at::zeros_like(indices);\n+        if (!sum_all_sparse_dim) {\n+          for (int64_t d = 0; d < sparse_dim; d++) {\n+            if (!dims_to_sum_b[d]) new_indices[d].copy_(indices[d]);", "path": "aten/src/ATen/native/sparse/SparseTensorMath.cpp", "position": null, "original_position": 111, "commit_id": "f3db2514189f34fbdf9ea48fbebeacd8fa711b7c", "original_commit_id": "cf0b6dd308faac8f66f5a8ace4fec04b9bee6bc6", "user": {"login": "soumith", "id": 1310570, "node_id": "MDQ6VXNlcjEzMTA1NzA=", "avatar_url": "https://avatars0.githubusercontent.com/u/1310570?v=4", "gravatar_id": "", "url": "https://api.github.com/users/soumith", "html_url": "https://github.com/soumith", "followers_url": "https://api.github.com/users/soumith/followers", "following_url": "https://api.github.com/users/soumith/following{/other_user}", "gists_url": "https://api.github.com/users/soumith/gists{/gist_id}", "starred_url": "https://api.github.com/users/soumith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/soumith/subscriptions", "organizations_url": "https://api.github.com/users/soumith/orgs", "repos_url": "https://api.github.com/users/soumith/repos", "events_url": "https://api.github.com/users/soumith/events{/privacy}", "received_events_url": "https://api.github.com/users/soumith/received_events", "type": "User", "site_admin": false}, "body": "keepdim on a sparse dim seems weird. Does this mean that we'll have `0` indices for sparse dims that asked to be summed up? What does that even mean? does it mean user has to call `coalesce()` for final result?", "created_at": "2018-11-20T07:45:01Z", "updated_at": "2018-11-23T15:55:13Z", "html_url": "https://github.com/pytorch/pytorch/pull/12430#discussion_r234896074", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/12430", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/234896074"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/12430#discussion_r234896074"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/12430"}}, "body_html": "<p>keepdim on a sparse dim seems weird. Does this mean that we'll have <code>0</code> indices for sparse dims that asked to be summed up? What does that even mean? does it mean user has to call <code>coalesce()</code> for final result?</p>", "body_text": "keepdim on a sparse dim seems weird. Does this mean that we'll have 0 indices for sparse dims that asked to be summed up? What does that even mean? does it mean user has to call coalesce() for final result?"}