{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/428657790", "html_url": "https://github.com/pytorch/pytorch/pull/12430#issuecomment-428657790", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/12430", "id": 428657790, "node_id": "MDEyOklzc3VlQ29tbWVudDQyODY1Nzc5MA==", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "created_at": "2018-10-10T17:22:32Z", "updated_at": "2018-10-10T17:22:32Z", "author_association": "MEMBER", "body_html": "<p>I see the use case, but I don't feel like adding a <code>sparse_X</code> for every single operation we have is a good solution. The right way to do it would be to simply have some kind of a specialized masked tensor type, which also holds on to a mask specifying which entries are valid (where mask can be represented in a sparse way ofc). That's what <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=11088808\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/AntoinePrv\">@AntoinePrv</a> originally proposed, and is very reasonable.</p>", "body_text": "I see the use case, but I don't feel like adding a sparse_X for every single operation we have is a good solution. The right way to do it would be to simply have some kind of a specialized masked tensor type, which also holds on to a mask specifying which entries are valid (where mask can be represented in a sparse way ofc). That's what @AntoinePrv originally proposed, and is very reasonable.", "body": "I see the use case, but I don't feel like adding a `sparse_X` for every single operation we have is a good solution. The right way to do it would be to simply have some kind of a specialized masked tensor type, which also holds on to a mask specifying which entries are valid (where mask can be represented in a sparse way ofc). That's what @AntoinePrv originally proposed, and is very reasonable."}