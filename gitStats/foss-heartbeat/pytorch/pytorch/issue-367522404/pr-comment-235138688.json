{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/235138688", "pull_request_review_id": 176936556, "id": 235138688, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzNTEzODY4OA==", "diff_hunk": "@@ -799,4 +799,294 @@ Tensor sspaddmm(const Tensor& self, const Tensor& mat1, const Tensor& mat2,\n   return result;\n }\n \n+// --------------------------------------------------------------------\n+// sparse.sum()\n+//\n+// This implementation calls coalesce() to do the sum reduction on\n+// sparse dims. Ideally in the future there should be unified reduction function\n+// for ops like sum, max, and min.\n+// --------------------------------------------------------------------\n+Tensor _sparse_sum(const SparseTensor& input) {\n+  return input.coalesce().values().sum();\n+}\n+\n+Tensor _sparse_sum(const SparseTensor& input, ScalarType dtype) {\n+  // don't have to do a conversion to the correct dtype first\n+  // just need to setup the accumulator correctly\n+  return input.coalesce().values().sum(dtype);\n+}\n+\n+Tensor _sparse_sum(const SparseTensor& input, IntList dims_to_sum) {\n+  return at::_sparse_sum(input, dims_to_sum, false);\n+}\n+\n+Tensor _sparse_sum(const SparseTensor& input, IntList dims_to_sum, ScalarType dtype) {\n+  return at::_sparse_sum(input.to(dtype), dims_to_sum, false);\n+}\n+\n+Tensor _sparse_sum(const SparseTensor& input, IntList dims_to_sum, bool keepdim, ScalarType dtype) {\n+  return at::_sparse_sum(input.to(dtype), dims_to_sum, keepdim);\n+}\n+\n+Tensor _sparse_sum(const SparseTensor& input, IntList dims_to_sum, bool keepdim) {\n+  AT_CHECK(input.is_coalesced(), \"sparse_sum: sparse_sum doesn't support uncoalesced SparseTensor\");", "path": "aten/src/ATen/native/sparse/SparseTensorMath.cpp", "position": null, "original_position": 49, "commit_id": "f3db2514189f34fbdf9ea48fbebeacd8fa711b7c", "original_commit_id": "cf0b6dd308faac8f66f5a8ace4fec04b9bee6bc6", "user": {"login": "weiyangfb", "id": 38509346, "node_id": "MDQ6VXNlcjM4NTA5MzQ2", "avatar_url": "https://avatars1.githubusercontent.com/u/38509346?v=4", "gravatar_id": "", "url": "https://api.github.com/users/weiyangfb", "html_url": "https://github.com/weiyangfb", "followers_url": "https://api.github.com/users/weiyangfb/followers", "following_url": "https://api.github.com/users/weiyangfb/following{/other_user}", "gists_url": "https://api.github.com/users/weiyangfb/gists{/gist_id}", "starred_url": "https://api.github.com/users/weiyangfb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/weiyangfb/subscriptions", "organizations_url": "https://api.github.com/users/weiyangfb/orgs", "repos_url": "https://api.github.com/users/weiyangfb/repos", "events_url": "https://api.github.com/users/weiyangfb/events{/privacy}", "received_events_url": "https://api.github.com/users/weiyangfb/received_events", "type": "User", "site_admin": false}, "body": "~it is because we don't have a backward for `coalesce` yet~ actually, the kernel should be able to support non-coalesce case right now, I will remove this check", "created_at": "2018-11-20T19:26:23Z", "updated_at": "2018-11-23T15:55:15Z", "html_url": "https://github.com/pytorch/pytorch/pull/12430#discussion_r235138688", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/12430", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/235138688"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/12430#discussion_r235138688"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/12430"}}, "body_html": "<p><del>it is because we don't have a backward for <code>coalesce</code> yet</del> actually, the kernel should be able to support non-coalesce case right now, I will remove this check</p>", "body_text": "it is because we don't have a backward for coalesce yet actually, the kernel should be able to support non-coalesce case right now, I will remove this check", "in_reply_to_id": 234887022}