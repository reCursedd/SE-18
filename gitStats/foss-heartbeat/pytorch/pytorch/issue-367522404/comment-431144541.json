{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/431144541", "html_url": "https://github.com/pytorch/pytorch/pull/12430#issuecomment-431144541", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/12430", "id": 431144541, "node_id": "MDEyOklzc3VlQ29tbWVudDQzMTE0NDU0MQ==", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "created_at": "2018-10-18T20:07:21Z", "updated_at": "2018-10-18T20:07:28Z", "author_association": "MEMBER", "body_html": "<p>It is the same argument <em>short term</em>. After this discussion I'm ok with having a <code>torch.sparse</code> namespace, but in general I still think we might want to invest in having a new type in the future (or make this behavior the default).</p>", "body_text": "It is the same argument short term. After this discussion I'm ok with having a torch.sparse namespace, but in general I still think we might want to invest in having a new type in the future (or make this behavior the default).", "body": "It is the same argument *short term*. After this discussion I'm ok with having a `torch.sparse` namespace, but in general I still think we might want to invest in having a new type in the future (or make this behavior the default)."}