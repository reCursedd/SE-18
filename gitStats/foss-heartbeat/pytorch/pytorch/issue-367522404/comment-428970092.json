{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/428970092", "html_url": "https://github.com/pytorch/pytorch/pull/12430#issuecomment-428970092", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/12430", "id": 428970092, "node_id": "MDEyOklzc3VlQ29tbWVudDQyODk3MDA5Mg==", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "created_at": "2018-10-11T14:10:15Z", "updated_at": "2018-10-11T14:10:15Z", "author_association": "MEMBER", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=38509346\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/weiyangfb\">@weiyangfb</a> adding a <code>sparse</code> flag to <em>every single operation we have</em> is having a tail wag the dog.</p>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=13564\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ezyang\">@ezyang</a> why is that not a sum? I don't understand. If the sparsity pattern encodes the \"valid entries\" on which you want to do the compute, then it's exactly the sum. In this case you shouldn't think of it as a tensor with zeros defined everywhere, but as some sentinel values that always act as neutral elements of every operation. I don't know if I'm proposing a backend, because backend is heavily overloaded in our vocabulary. What I want is just a tensor-like object that overloads operations <em>which we already have</em>.</p>\n<p>Of course the new type would be some kind of a wrapper around other tensor operations, and in case it can't be expressed using regular tensor math, they can always desugar to more specialized implementations to the backend (think sth like <code>sparse_sum</code>, except that would be an internal function). However none of this should be of concern to the user. Otherwise, we'll end up with a 100000 variations of every function for every weird quirk that people want, and both maintenance and discoverability will be a problem.</p>", "body_text": "@weiyangfb adding a sparse flag to every single operation we have is having a tail wag the dog.\n@ezyang why is that not a sum? I don't understand. If the sparsity pattern encodes the \"valid entries\" on which you want to do the compute, then it's exactly the sum. In this case you shouldn't think of it as a tensor with zeros defined everywhere, but as some sentinel values that always act as neutral elements of every operation. I don't know if I'm proposing a backend, because backend is heavily overloaded in our vocabulary. What I want is just a tensor-like object that overloads operations which we already have.\nOf course the new type would be some kind of a wrapper around other tensor operations, and in case it can't be expressed using regular tensor math, they can always desugar to more specialized implementations to the backend (think sth like sparse_sum, except that would be an internal function). However none of this should be of concern to the user. Otherwise, we'll end up with a 100000 variations of every function for every weird quirk that people want, and both maintenance and discoverability will be a problem.", "body": "@weiyangfb adding a `sparse` flag to *every single operation we have* is having a tail wag the dog.\r\n\r\n@ezyang why is that not a sum? I don't understand. If the sparsity pattern encodes the \"valid entries\" on which you want to do the compute, then it's exactly the sum. In this case you shouldn't think of it as a tensor with zeros defined everywhere, but as some sentinel values that always act as neutral elements of every operation. I don't know if I'm proposing a backend, because backend is heavily overloaded in our vocabulary. What I want is just a tensor-like object that overloads operations *which we already have*.\r\n\r\nOf course the new type would be some kind of a wrapper around other tensor operations, and in case it can't be expressed using regular tensor math, they can always desugar to more specialized implementations to the backend (think sth like `sparse_sum`, except that would be an internal function). However none of this should be of concern to the user. Otherwise, we'll end up with a 100000 variations of every function for every weird quirk that people want, and both maintenance and discoverability will be a problem."}