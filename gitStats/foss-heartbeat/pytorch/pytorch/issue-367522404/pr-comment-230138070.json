{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/230138070", "pull_request_review_id": 170807487, "id": 230138070, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMDEzODA3MA==", "diff_hunk": "@@ -799,4 +800,241 @@ Tensor sspaddmm(const Tensor& self, const Tensor& mat1, const Tensor& mat2,\n   return result;\n }\n \n+// --------------------------------------------------------------------\n+// sparse.sum()\n+// --------------------------------------------------------------------\n+Tensor _sparse_sum(const SparseTensor& input) {\n+  return input.values().sum();\n+}\n+\n+Tensor _sparse_sum(const SparseTensor& input, ScalarType dtype) {\n+  return at::_sparse_sum(input.to(dtype));\n+}\n+\n+Tensor _sparse_sum(const SparseTensor& input, IntList dims_to_sum) {\n+  return at::_sparse_sum(input, dims_to_sum, false);\n+}\n+\n+Tensor _sparse_sum(const SparseTensor& input, IntList dims_to_sum, ScalarType dtype) {\n+  return at::_sparse_sum(input.to(dtype), dims_to_sum, false);\n+}\n+\n+Tensor _sparse_sum(const SparseTensor& input, IntList dims_to_sum, bool keepdim) {\n+\n+  AT_CHECK(input.is_coalesced(), \"To support autograd, input SparseTensor has to be coalesced.\");\n+\n+  const int64_t input_dim = input.dim();\n+  dim_list_to_bitset(dims_to_sum, input_dim);", "path": "aten/src/ATen/native/sparse/SparseTensorMath.cpp", "position": null, "original_position": 36, "commit_id": "f3db2514189f34fbdf9ea48fbebeacd8fa711b7c", "original_commit_id": "8399bdf6b12eb79a790ffcd3f35c8a47252662dc", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "Euh, doesn't `dim_list_to_bitset` return a bitset? Shouldn't you use it, instead of computing it again?", "created_at": "2018-11-01T17:58:49Z", "updated_at": "2018-11-23T15:54:01Z", "html_url": "https://github.com/pytorch/pytorch/pull/12430#discussion_r230138070", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/12430", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/230138070"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/12430#discussion_r230138070"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/12430"}}, "body_html": "<p>Euh, doesn't <code>dim_list_to_bitset</code> return a bitset? Shouldn't you use it, instead of computing it again?</p>", "body_text": "Euh, doesn't dim_list_to_bitset return a bitset? Shouldn't you use it, instead of computing it again?"}