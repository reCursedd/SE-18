{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/234886689", "pull_request_review_id": 176617477, "id": 234886689, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzNDg4NjY4OQ==", "diff_hunk": "@@ -799,4 +799,294 @@ Tensor sspaddmm(const Tensor& self, const Tensor& mat1, const Tensor& mat2,\n   return result;\n }\n \n+// --------------------------------------------------------------------\n+// sparse.sum()\n+//\n+// This implementation calls coalesce() to do the sum reduction on\n+// sparse dims. Ideally in the future there should be unified reduction function\n+// for ops like sum, max, and min.\n+// --------------------------------------------------------------------\n+Tensor _sparse_sum(const SparseTensor& input) {\n+  return input.coalesce().values().sum();", "path": "aten/src/ATen/native/sparse/SparseTensorMath.cpp", "position": 27, "original_position": 27, "commit_id": "f3db2514189f34fbdf9ea48fbebeacd8fa711b7c", "original_commit_id": "cf0b6dd308faac8f66f5a8ace4fec04b9bee6bc6", "user": {"login": "soumith", "id": 1310570, "node_id": "MDQ6VXNlcjEzMTA1NzA=", "avatar_url": "https://avatars0.githubusercontent.com/u/1310570?v=4", "gravatar_id": "", "url": "https://api.github.com/users/soumith", "html_url": "https://github.com/soumith", "followers_url": "https://api.github.com/users/soumith/followers", "following_url": "https://api.github.com/users/soumith/following{/other_user}", "gists_url": "https://api.github.com/users/soumith/gists{/gist_id}", "starred_url": "https://api.github.com/users/soumith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/soumith/subscriptions", "organizations_url": "https://api.github.com/users/soumith/orgs", "repos_url": "https://api.github.com/users/soumith/repos", "events_url": "https://api.github.com/users/soumith/events{/privacy}", "received_events_url": "https://api.github.com/users/soumith/received_events", "type": "User", "site_admin": false}, "body": "this returns a scalar that just sums over ALL dimensions.\r\nThe promise that you wrote in the documentation is that you'll sum over all nnz dimensions in such a case and return a Tensor, so I expect the result to not be a single scalar number, but a Tensor with num dimensions = nnz dims. So whatever you are doing looks wrong.", "created_at": "2018-11-20T06:55:36Z", "updated_at": "2018-11-23T15:55:13Z", "html_url": "https://github.com/pytorch/pytorch/pull/12430#discussion_r234886689", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/12430", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/234886689"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/12430#discussion_r234886689"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/12430"}}, "body_html": "<p>this returns a scalar that just sums over ALL dimensions.<br>\nThe promise that you wrote in the documentation is that you'll sum over all nnz dimensions in such a case and return a Tensor, so I expect the result to not be a single scalar number, but a Tensor with num dimensions = nnz dims. So whatever you are doing looks wrong.</p>", "body_text": "this returns a scalar that just sums over ALL dimensions.\nThe promise that you wrote in the documentation is that you'll sum over all nnz dimensions in such a case and return a Tensor, so I expect the result to not be a single scalar number, but a Tensor with num dimensions = nnz dims. So whatever you are doing looks wrong."}