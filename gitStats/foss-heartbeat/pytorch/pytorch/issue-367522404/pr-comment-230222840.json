{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/230222840", "pull_request_review_id": 170913225, "id": 230222840, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMDIyMjg0MA==", "diff_hunk": "@@ -799,4 +800,241 @@ Tensor sspaddmm(const Tensor& self, const Tensor& mat1, const Tensor& mat2,\n   return result;\n }\n \n+// --------------------------------------------------------------------\n+// sparse.sum()\n+// --------------------------------------------------------------------\n+Tensor _sparse_sum(const SparseTensor& input) {\n+  return input.values().sum();\n+}\n+\n+Tensor _sparse_sum(const SparseTensor& input, ScalarType dtype) {\n+  return at::_sparse_sum(input.to(dtype));\n+}\n+\n+Tensor _sparse_sum(const SparseTensor& input, IntList dims_to_sum) {\n+  return at::_sparse_sum(input, dims_to_sum, false);\n+}\n+\n+Tensor _sparse_sum(const SparseTensor& input, IntList dims_to_sum, ScalarType dtype) {\n+  return at::_sparse_sum(input.to(dtype), dims_to_sum, false);\n+}\n+\n+Tensor _sparse_sum(const SparseTensor& input, IntList dims_to_sum, bool keepdim) {\n+\n+  AT_CHECK(input.is_coalesced(), \"To support autograd, input SparseTensor has to be coalesced.\");\n+\n+  const int64_t input_dim = input.dim();\n+  dim_list_to_bitset(dims_to_sum, input_dim);\n+  auto dims_to_sum_v = dims_to_sum.vec();\n+  maybe_wrap_dims(dims_to_sum_v, input_dim);\n+\n+  std::bitset<64> dims_to_sum_b;\n+  for (auto d : dims_to_sum_v) {\n+    dims_to_sum_b[d] = true;\n+  }\n+\n+  LongTensor indices = input._indices();\n+  Tensor values = input._values();\n+  IntList sizes = input.sizes();\n+  const int64_t sparse_dim = input.sparse_dim();\n+  const int64_t dense_dim = input.dense_dim();\n+\n+  int64_t sparse_dims_to_sum_size = 0;\n+  auto dims_to_keep_v = std::vector<int64_t>();\n+  Tensor sparse_dims_to_keep_t = at::zeros({sparse_dim}, indices.options().dtype(at::kByte));\n+  auto dense_dims_to_sum_v = std::vector<int64_t>();\n+  for (int64_t d = 0; d < input_dim; d++) {\n+    if (dims_to_sum_b[d]) {\n+      if (d < sparse_dim) sparse_dims_to_sum_size ++;\n+      else dense_dims_to_sum_v.emplace_back(d + 1 - sparse_dim);\n+    }\n+    else {\n+      dims_to_keep_v.emplace_back(d);\n+      if (d < sparse_dim) sparse_dims_to_keep_t[d].fill_(1);\n+    }\n+  }\n+\n+  const bool sum_all_sparse_dim = (sparse_dim == sparse_dims_to_sum_size);\n+\n+  // new indices\n+  LongTensor new_indices;\n+  if (keepdim) {\n+    new_indices = indices.clone();\n+    if (sparse_dims_to_sum_size > 0) {\n+      for (auto d : dims_to_sum_v) {\n+        if (d < sparse_dim) new_indices[d].fill_(0);\n+      }\n+    }\n+  }\n+  else {\n+    if (sum_all_sparse_dim) {\n+      new_indices = at::zeros({1, input._nnz()}, indices.options());\n+    }\n+    else if (sparse_dims_to_sum_size > 0) {\n+      new_indices = indices.index_select(0, at::arange(sparse_dim, indices.options()).masked_select(sparse_dims_to_keep_t));", "path": "aten/src/ATen/native/sparse/SparseTensorMath.cpp", "position": null, "original_position": 83, "commit_id": "f3db2514189f34fbdf9ea48fbebeacd8fa711b7c", "original_commit_id": "8399bdf6b12eb79a790ffcd3f35c8a47252662dc", "user": {"login": "weiyangfb", "id": 38509346, "node_id": "MDQ6VXNlcjM4NTA5MzQ2", "avatar_url": "https://avatars1.githubusercontent.com/u/38509346?v=4", "gravatar_id": "", "url": "https://api.github.com/users/weiyangfb", "html_url": "https://github.com/weiyangfb", "followers_url": "https://api.github.com/users/weiyangfb/followers", "following_url": "https://api.github.com/users/weiyangfb/following{/other_user}", "gists_url": "https://api.github.com/users/weiyangfb/gists{/gist_id}", "starred_url": "https://api.github.com/users/weiyangfb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/weiyangfb/subscriptions", "organizations_url": "https://api.github.com/users/weiyangfb/orgs", "repos_url": "https://api.github.com/users/weiyangfb/repos", "events_url": "https://api.github.com/users/weiyangfb/events{/privacy}", "received_events_url": "https://api.github.com/users/weiyangfb/received_events", "type": "User", "site_admin": false}, "body": "when I revisit this line of code, I realized it is very hard to read. I should've splited it into two lines:\r\n```\r\nauto sparse_dims_to_keep = at::arange(sparse_dim, indices.options()).masked_select(sparse_dims_to_keep_t)\r\nnew_indices = indices.index_select(0, sparse_dims_to_keep);\r\n```\r\n\r\nIn python, it is:\r\n```\r\nnew_I = I.index_select(0, torch.tensor(sparse_dims_to_keep))\r\n```\r\n\r\nBut when I moved it into ATen, I will need to use a vector sparse_dims_to_keep_v to store the dims, convert vector to a tensor, and convert tensor to cuda depends on whether or not input. I think this impl is correct though\r\n", "created_at": "2018-11-01T22:40:00Z", "updated_at": "2018-11-23T15:54:07Z", "html_url": "https://github.com/pytorch/pytorch/pull/12430#discussion_r230222840", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/12430", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/230222840"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/12430#discussion_r230222840"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/12430"}}, "body_html": "<p>when I revisit this line of code, I realized it is very hard to read. I should've splited it into two lines:</p>\n<pre><code>auto sparse_dims_to_keep = at::arange(sparse_dim, indices.options()).masked_select(sparse_dims_to_keep_t)\nnew_indices = indices.index_select(0, sparse_dims_to_keep);\n</code></pre>\n<p>In python, it is:</p>\n<pre><code>new_I = I.index_select(0, torch.tensor(sparse_dims_to_keep))\n</code></pre>\n<p>But when I moved it into ATen, I will need to use a vector sparse_dims_to_keep_v to store the dims, convert vector to a tensor, and convert tensor to cuda depends on whether or not input. I think this impl is correct though</p>", "body_text": "when I revisit this line of code, I realized it is very hard to read. I should've splited it into two lines:\nauto sparse_dims_to_keep = at::arange(sparse_dim, indices.options()).masked_select(sparse_dims_to_keep_t)\nnew_indices = indices.index_select(0, sparse_dims_to_keep);\n\nIn python, it is:\nnew_I = I.index_select(0, torch.tensor(sparse_dims_to_keep))\n\nBut when I moved it into ATen, I will need to use a vector sparse_dims_to_keep_v to store the dims, convert vector to a tensor, and convert tensor to cuda depends on whether or not input. I think this impl is correct though", "in_reply_to_id": 230146018}