{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/377538147", "html_url": "https://github.com/pytorch/pytorch/pull/6121#issuecomment-377538147", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/6121", "id": 377538147, "node_id": "MDEyOklzc3VlQ29tbWVudDM3NzUzODE0Nw==", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "created_at": "2018-03-30T14:39:37Z", "updated_at": "2018-03-30T14:39:37Z", "author_association": "CONTRIBUTOR", "body_html": "<p>The root cause of the problem is our implementation of <code>FindNNPACK</code>:</p>\n<pre><code>find_library(NNPACK_LIBRARY nnpack\n    PATHS ${NNPACK_ROOT_DIR}\n    PATH_SUFFIXES lib lib64)\n\nfind_library(CPUINFO_LIBRARY cpuinfo\n    PATHS ${NNPACK_ROOT_DIR}\n    PATH_SUFFIXES lib lib64)\n\nfind_library(PTHREADPOOL_LIBRARY pthreadpool\n    PATHS ${NNPACK_ROOT_DIR}\n    PATH_SUFFIXES lib lib64)\n\n# ... later ...\n\nif (NNPACK_FOUND)\n  target_link_libraries(ATen ${NNPACK_LIBRARIES})\nendif(NNPACK_FOUND)\n</code></pre>\n<p>This means that when nnpack is enabled, we statically link in the cpuinfo that is installed alongside NNPACK.  But then, we turn around and unconditionally link it again:</p>\n<pre><code># ---[ Configure cpuinfo\nIF(NOT TARGET cpuinfo)\n  SET(CPUINFO_BUILD_TOOLS OFF CACHE BOOL \"\")\n  SET(CPUINFO_BUILD_UNIT_TESTS OFF CACHE BOOL \"\")\n  SET(CPUINFO_BUILD_MOCK_TESTS OFF CACHE BOOL \"\")\n  SET(CPUINFO_BUILD_BENCHMARKS OFF CACHE BOOL \"\")\n  ADD_SUBDIRECTORY(\"cpu/cpuinfo\")\nENDIF()\nTARGET_LINK_LIBRARIES(ATen cpuinfo)\n</code></pre>\n<p>So nnpack shows up twice in the library list for ATen, and obviously that is not going to work.</p>", "body_text": "The root cause of the problem is our implementation of FindNNPACK:\nfind_library(NNPACK_LIBRARY nnpack\n    PATHS ${NNPACK_ROOT_DIR}\n    PATH_SUFFIXES lib lib64)\n\nfind_library(CPUINFO_LIBRARY cpuinfo\n    PATHS ${NNPACK_ROOT_DIR}\n    PATH_SUFFIXES lib lib64)\n\nfind_library(PTHREADPOOL_LIBRARY pthreadpool\n    PATHS ${NNPACK_ROOT_DIR}\n    PATH_SUFFIXES lib lib64)\n\n# ... later ...\n\nif (NNPACK_FOUND)\n  target_link_libraries(ATen ${NNPACK_LIBRARIES})\nendif(NNPACK_FOUND)\n\nThis means that when nnpack is enabled, we statically link in the cpuinfo that is installed alongside NNPACK.  But then, we turn around and unconditionally link it again:\n# ---[ Configure cpuinfo\nIF(NOT TARGET cpuinfo)\n  SET(CPUINFO_BUILD_TOOLS OFF CACHE BOOL \"\")\n  SET(CPUINFO_BUILD_UNIT_TESTS OFF CACHE BOOL \"\")\n  SET(CPUINFO_BUILD_MOCK_TESTS OFF CACHE BOOL \"\")\n  SET(CPUINFO_BUILD_BENCHMARKS OFF CACHE BOOL \"\")\n  ADD_SUBDIRECTORY(\"cpu/cpuinfo\")\nENDIF()\nTARGET_LINK_LIBRARIES(ATen cpuinfo)\n\nSo nnpack shows up twice in the library list for ATen, and obviously that is not going to work.", "body": "The root cause of the problem is our implementation of `FindNNPACK`:\r\n\r\n```\r\nfind_library(NNPACK_LIBRARY nnpack\r\n    PATHS ${NNPACK_ROOT_DIR}\r\n    PATH_SUFFIXES lib lib64)\r\n\r\nfind_library(CPUINFO_LIBRARY cpuinfo\r\n    PATHS ${NNPACK_ROOT_DIR}\r\n    PATH_SUFFIXES lib lib64)\r\n\r\nfind_library(PTHREADPOOL_LIBRARY pthreadpool\r\n    PATHS ${NNPACK_ROOT_DIR}\r\n    PATH_SUFFIXES lib lib64)\r\n\r\n# ... later ...\r\n\r\nif (NNPACK_FOUND)\r\n  target_link_libraries(ATen ${NNPACK_LIBRARIES})\r\nendif(NNPACK_FOUND)\r\n```\r\n\r\nThis means that when nnpack is enabled, we statically link in the cpuinfo that is installed alongside NNPACK.  But then, we turn around and unconditionally link it again:\r\n\r\n```\r\n# ---[ Configure cpuinfo\r\nIF(NOT TARGET cpuinfo)\r\n  SET(CPUINFO_BUILD_TOOLS OFF CACHE BOOL \"\")\r\n  SET(CPUINFO_BUILD_UNIT_TESTS OFF CACHE BOOL \"\")\r\n  SET(CPUINFO_BUILD_MOCK_TESTS OFF CACHE BOOL \"\")\r\n  SET(CPUINFO_BUILD_BENCHMARKS OFF CACHE BOOL \"\")\r\n  ADD_SUBDIRECTORY(\"cpu/cpuinfo\")\r\nENDIF()\r\nTARGET_LINK_LIBRARIES(ATen cpuinfo)\r\n```\r\n\r\nSo nnpack shows up twice in the library list for ATen, and obviously that is not going to work."}