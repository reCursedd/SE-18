{"url": "https://api.github.com/repos/pytorch/pytorch/issues/11176", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/11176/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/11176/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/11176/events", "html_url": "https://github.com/pytorch/pytorch/issues/11176", "id": 356227317, "node_id": "MDU6SXNzdWUzNTYyMjczMTc=", "number": 11176, "title": "Scalar parameter backward returns empty tensor size", "user": {"login": "dizcza", "id": 7688337, "node_id": "MDQ6VXNlcjc2ODgzMzc=", "avatar_url": "https://avatars1.githubusercontent.com/u/7688337?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dizcza", "html_url": "https://github.com/dizcza", "followers_url": "https://api.github.com/users/dizcza/followers", "following_url": "https://api.github.com/users/dizcza/following{/other_user}", "gists_url": "https://api.github.com/users/dizcza/gists{/gist_id}", "starred_url": "https://api.github.com/users/dizcza/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dizcza/subscriptions", "organizations_url": "https://api.github.com/users/dizcza/orgs", "repos_url": "https://api.github.com/users/dizcza/repos", "events_url": "https://api.github.com/users/dizcza/events{/privacy}", "received_events_url": "https://api.github.com/users/dizcza/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-09-01T19:35:27Z", "updated_at": "2018-09-01T19:53:15Z", "closed_at": "2018-09-01T19:53:15Z", "author_association": "NONE", "body_html": "<h2>Issue description</h2>\n<p>I was going to implement some sophisticated loss function with a single scalar parameter. An <a href=\"https://discuss.pytorch.org/t/is-scale-layer-available-in-pytorch/7954/6?u=dizcza\" rel=\"nofollow\">example</a> that worked well in pytorch v0.3.X now crashes because scalar tensors have empty size since v0.4.0.</p>\n<h2>Code example</h2>\n<pre><code>class ScaleFunc(torch.autograd.Function):\n\n    @staticmethod\n    def forward(ctx, input, scale):\n        ctx.save_for_backward(input, scale)\n        return input * scale\n\n    @staticmethod\n    def backward(ctx, grad_output):\n        input, scale = ctx.saved_variables\n        return grad_output * scale, torch.mean(grad_output * input)\n\nclass ScaleLayer(nn.Module):\n\n    def __init__(self, init_value=1e-3):\n        super().__init__()\n        self.scale = nn.Parameter(torch.FloatTensor(1).fill_(init_value))\n\n    def forward(self, input):\n        return ScaleFunc.apply(input, self.scale)\n\nscale_layer = ScaleLayer()\nx = torch.randn(3,7)\ny = scale_layer(x).mean()\ny.backward()\n</code></pre>\n<pre><code>Traceback (most recent call last):\n  File \"/home/dizcza/anaconda3/envs/embsdr_cpu/lib/python3.6/site-packages/IPython/core/interactiveshell.py\", line 2961, in run_code\n    exec(code_obj, self.user_global_ns, self.user_ns)\n  File \"&lt;ipython-input-85-ab75bb780f4c&gt;\", line 1, in &lt;module&gt;\n    y.backward()\n  File \"/home/dizcza/anaconda3/envs/embsdr_cpu/lib/python3.6/site-packages/torch/tensor.py\", line 93, in backward\n    torch.autograd.backward(self, gradient, retain_graph, create_graph)\n  File \"/home/dizcza/anaconda3/envs/embsdr_cpu/lib/python3.6/site-packages/torch/autograd/__init__.py\", line 90, in backward\n    allow_unreachable=True)  # allow_unreachable flag\nRuntimeError: Function ScaleFuncBackward returned an invalid gradient at index 1 - expected shape [1] but got []\n</code></pre>\n<ul>\n<li>How you installed PyTorch: <code>conda install pytorch-cpu torchvision-cpu -c pytorch</code></li>\n<li>PyTorch version: 0.4.1</li>\n<li>Python version: 3.6.6</li>\n</ul>", "body_text": "Issue description\nI was going to implement some sophisticated loss function with a single scalar parameter. An example that worked well in pytorch v0.3.X now crashes because scalar tensors have empty size since v0.4.0.\nCode example\nclass ScaleFunc(torch.autograd.Function):\n\n    @staticmethod\n    def forward(ctx, input, scale):\n        ctx.save_for_backward(input, scale)\n        return input * scale\n\n    @staticmethod\n    def backward(ctx, grad_output):\n        input, scale = ctx.saved_variables\n        return grad_output * scale, torch.mean(grad_output * input)\n\nclass ScaleLayer(nn.Module):\n\n    def __init__(self, init_value=1e-3):\n        super().__init__()\n        self.scale = nn.Parameter(torch.FloatTensor(1).fill_(init_value))\n\n    def forward(self, input):\n        return ScaleFunc.apply(input, self.scale)\n\nscale_layer = ScaleLayer()\nx = torch.randn(3,7)\ny = scale_layer(x).mean()\ny.backward()\n\nTraceback (most recent call last):\n  File \"/home/dizcza/anaconda3/envs/embsdr_cpu/lib/python3.6/site-packages/IPython/core/interactiveshell.py\", line 2961, in run_code\n    exec(code_obj, self.user_global_ns, self.user_ns)\n  File \"<ipython-input-85-ab75bb780f4c>\", line 1, in <module>\n    y.backward()\n  File \"/home/dizcza/anaconda3/envs/embsdr_cpu/lib/python3.6/site-packages/torch/tensor.py\", line 93, in backward\n    torch.autograd.backward(self, gradient, retain_graph, create_graph)\n  File \"/home/dizcza/anaconda3/envs/embsdr_cpu/lib/python3.6/site-packages/torch/autograd/__init__.py\", line 90, in backward\n    allow_unreachable=True)  # allow_unreachable flag\nRuntimeError: Function ScaleFuncBackward returned an invalid gradient at index 1 - expected shape [1] but got []\n\n\nHow you installed PyTorch: conda install pytorch-cpu torchvision-cpu -c pytorch\nPyTorch version: 0.4.1\nPython version: 3.6.6", "body": "## Issue description\r\nI was going to implement some sophisticated loss function with a single scalar parameter. An [example](https://discuss.pytorch.org/t/is-scale-layer-available-in-pytorch/7954/6?u=dizcza) that worked well in pytorch v0.3.X now crashes because scalar tensors have empty size since v0.4.0.\r\n\r\n## Code example\r\n```\r\nclass ScaleFunc(torch.autograd.Function):\r\n\r\n    @staticmethod\r\n    def forward(ctx, input, scale):\r\n        ctx.save_for_backward(input, scale)\r\n        return input * scale\r\n\r\n    @staticmethod\r\n    def backward(ctx, grad_output):\r\n        input, scale = ctx.saved_variables\r\n        return grad_output * scale, torch.mean(grad_output * input)\r\n\r\nclass ScaleLayer(nn.Module):\r\n\r\n    def __init__(self, init_value=1e-3):\r\n        super().__init__()\r\n        self.scale = nn.Parameter(torch.FloatTensor(1).fill_(init_value))\r\n\r\n    def forward(self, input):\r\n        return ScaleFunc.apply(input, self.scale)\r\n\r\nscale_layer = ScaleLayer()\r\nx = torch.randn(3,7)\r\ny = scale_layer(x).mean()\r\ny.backward()\r\n```\r\n```\r\nTraceback (most recent call last):\r\n  File \"/home/dizcza/anaconda3/envs/embsdr_cpu/lib/python3.6/site-packages/IPython/core/interactiveshell.py\", line 2961, in run_code\r\n    exec(code_obj, self.user_global_ns, self.user_ns)\r\n  File \"<ipython-input-85-ab75bb780f4c>\", line 1, in <module>\r\n    y.backward()\r\n  File \"/home/dizcza/anaconda3/envs/embsdr_cpu/lib/python3.6/site-packages/torch/tensor.py\", line 93, in backward\r\n    torch.autograd.backward(self, gradient, retain_graph, create_graph)\r\n  File \"/home/dizcza/anaconda3/envs/embsdr_cpu/lib/python3.6/site-packages/torch/autograd/__init__.py\", line 90, in backward\r\n    allow_unreachable=True)  # allow_unreachable flag\r\nRuntimeError: Function ScaleFuncBackward returned an invalid gradient at index 1 - expected shape [1] but got []\r\n```\r\n\r\n- How you installed PyTorch: `conda install pytorch-cpu torchvision-cpu -c pytorch`\r\n- PyTorch version: 0.4.1\r\n- Python version: 3.6.6"}