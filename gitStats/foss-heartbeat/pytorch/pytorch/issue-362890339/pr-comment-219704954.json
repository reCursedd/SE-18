{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/219704954", "pull_request_review_id": 157945308, "id": 219704954, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxOTcwNDk1NA==", "diff_hunk": "@@ -441,4 +441,52 @@ def __array_wrap__(self, array):\n             array = array.astype('uint8')\n         return torch.from_numpy(array)\n \n+    @property\n+    def __cuda_array_interface__(self):\n+        \"\"\"Array view description for cuda tensors.\n+\n+        See:\n+        https://numba.pydata.org/numba-doc/latest/cuda/cuda_array_interface.html\n+        \"\"\"\n+\n+        # raise AttributeError for unsupported tensors, so that\n+        # hasattr(cpu_tensor, \"__cuda_array_interface__\") is False.\n+        if not self.device.type == \"cuda\":\n+            raise AttributeError(\n+                \"Not on cuda device, use Tensor.cuda() first: %r\" %\n+                self.device\n+            )\n+\n+        if self.is_sparse:\n+            raise AttributeError(\n+                \"Can't convert sparse tensor, use Tensor.to_dense() \"\n+                \"to convert to a dense tensor first.\"\n+            )\n+\n+        # RuntimeError, matching tensor.__array__() behavior.\n+        if self.requires_grad:\n+            raise RuntimeError(\n+                \"Can't get __cuda_array_interface__ on Variable that requires grad. \"\n+                \"Use var.detach().__cuda_array_interface__ instead.\"\n+            )\n+\n+        typestr = {", "path": "torch/tensor.py", "position": 49, "original_position": 33, "commit_id": "2f79b64368e4d93d217385d8109c5b94753d6641", "original_commit_id": "e7c7a45c620cd3d8f76e3f3906e557d7737d0c12", "user": {"login": "asford", "id": 282792, "node_id": "MDQ6VXNlcjI4Mjc5Mg==", "avatar_url": "https://avatars1.githubusercontent.com/u/282792?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asford", "html_url": "https://github.com/asford", "followers_url": "https://api.github.com/users/asford/followers", "following_url": "https://api.github.com/users/asford/following{/other_user}", "gists_url": "https://api.github.com/users/asford/gists{/gist_id}", "starred_url": "https://api.github.com/users/asford/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asford/subscriptions", "organizations_url": "https://api.github.com/users/asford/orgs", "repos_url": "https://api.github.com/users/asford/repos", "events_url": "https://api.github.com/users/asford/events{/privacy}", "received_events_url": "https://api.github.com/users/asford/received_events", "type": "User", "site_admin": false}, "body": "This is currently working because numba assumes the native byte order of the device if it isn't specified, though I agree that this (may) a bug in my implementation.\r\n\r\nI'm not super familiar with the `pytorch` internals and don't have access to a big-endian system, so please feel free to correct me, but I believe:\r\n\r\n* `pytorch` currently does not support non-native byte orders when [converting from numpy](https://github.com/asford/pytorch/blob/e7c7a45c620cd3d8f76e3f3906e557d7737d0c12/torch/csrc/utils/tensor_numpy.cpp#L124-L128).\r\n* `pytorch` does not have a way of programmatically accessing the byteorder of tensor structures, which are all represented in native ordering.\r\n* Numba converts dtype representations via [`numpy.dtype`](https://github.com/numba/numba/blob/master/numba/cuda/api.py#L194-L204), which will use the host-endianness if explicitly native (\"=\") or not specified (as in this implementation).\r\n* Cuda devices are little-endian, as are `x86` and `ppc64le` deployments.\r\n\r\nI think the options are:\r\n\r\n1. Specify all little-endian via \"<\".\r\n2. Specify 'native' byte ordering via \"=\", which will currently break if there was some form of `ppc64`/`cuda` cross deployment but _might_ more accurately reflect the semantics of the underlying buffer.\r\n\r\nI will update this to return \"<\", unless there's a missed assumption above.\r\n", "created_at": "2018-09-23T17:06:27Z", "updated_at": "2018-11-23T15:51:49Z", "html_url": "https://github.com/pytorch/pytorch/pull/11984#discussion_r219704954", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/11984", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/219704954"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/11984#discussion_r219704954"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/11984"}}, "body_html": "<p>This is currently working because numba assumes the native byte order of the device if it isn't specified, though I agree that this (may) a bug in my implementation.</p>\n<p>I'm not super familiar with the <code>pytorch</code> internals and don't have access to a big-endian system, so please feel free to correct me, but I believe:</p>\n<ul>\n<li><code>pytorch</code> currently does not support non-native byte orders when <a href=\"https://github.com/asford/pytorch/blob/e7c7a45c620cd3d8f76e3f3906e557d7737d0c12/torch/csrc/utils/tensor_numpy.cpp#L124-L128\">converting from numpy</a>.</li>\n<li><code>pytorch</code> does not have a way of programmatically accessing the byteorder of tensor structures, which are all represented in native ordering.</li>\n<li>Numba converts dtype representations via <a href=\"https://github.com/numba/numba/blob/master/numba/cuda/api.py#L194-L204\"><code>numpy.dtype</code></a>, which will use the host-endianness if explicitly native (\"=\") or not specified (as in this implementation).</li>\n<li>Cuda devices are little-endian, as are <code>x86</code> and <code>ppc64le</code> deployments.</li>\n</ul>\n<p>I think the options are:</p>\n<ol>\n<li>Specify all little-endian via \"&lt;\".</li>\n<li>Specify 'native' byte ordering via \"=\", which will currently break if there was some form of <code>ppc64</code>/<code>cuda</code> cross deployment but <em>might</em> more accurately reflect the semantics of the underlying buffer.</li>\n</ol>\n<p>I will update this to return \"&lt;\", unless there's a missed assumption above.</p>", "body_text": "This is currently working because numba assumes the native byte order of the device if it isn't specified, though I agree that this (may) a bug in my implementation.\nI'm not super familiar with the pytorch internals and don't have access to a big-endian system, so please feel free to correct me, but I believe:\n\npytorch currently does not support non-native byte orders when converting from numpy.\npytorch does not have a way of programmatically accessing the byteorder of tensor structures, which are all represented in native ordering.\nNumba converts dtype representations via numpy.dtype, which will use the host-endianness if explicitly native (\"=\") or not specified (as in this implementation).\nCuda devices are little-endian, as are x86 and ppc64le deployments.\n\nI think the options are:\n\nSpecify all little-endian via \"<\".\nSpecify 'native' byte ordering via \"=\", which will currently break if there was some form of ppc64/cuda cross deployment but might more accurately reflect the semantics of the underlying buffer.\n\nI will update this to return \"<\", unless there's a missed assumption above.", "in_reply_to_id": 219686117}