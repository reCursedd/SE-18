{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/219706228", "pull_request_review_id": 157946634, "id": 219706228, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxOTcwNjIyOA==", "diff_hunk": "@@ -441,4 +441,52 @@ def __array_wrap__(self, array):\n             array = array.astype('uint8')\n         return torch.from_numpy(array)\n \n+    @property\n+    def __cuda_array_interface__(self):\n+        \"\"\"Array view description for cuda tensors.\n+\n+        See:\n+        https://numba.pydata.org/numba-doc/latest/cuda/cuda_array_interface.html\n+        \"\"\"\n+\n+        # raise AttributeError for unsupported tensors, so that\n+        # hasattr(cpu_tensor, \"__cuda_array_interface__\") is False.\n+        if not self.device.type == \"cuda\":\n+            raise AttributeError(\n+                \"Not on cuda device, use Tensor.cuda() first: %r\" %", "path": "torch/tensor.py", "position": null, "original_position": 16, "commit_id": "2f79b64368e4d93d217385d8109c5b94753d6641", "original_commit_id": "e7c7a45c620cd3d8f76e3f3906e557d7737d0c12", "user": {"login": "asford", "id": 282792, "node_id": "MDQ6VXNlcjI4Mjc5Mg==", "avatar_url": "https://avatars1.githubusercontent.com/u/282792?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asford", "html_url": "https://github.com/asford", "followers_url": "https://api.github.com/users/asford/followers", "following_url": "https://api.github.com/users/asford/following{/other_user}", "gists_url": "https://api.github.com/users/asford/gists{/gist_id}", "starred_url": "https://api.github.com/users/asford/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asford/subscriptions", "organizations_url": "https://api.github.com/users/asford/orgs", "repos_url": "https://api.github.com/users/asford/repos", "events_url": "https://api.github.com/users/asford/events{/privacy}", "received_events_url": "https://api.github.com/users/asford/received_events", "type": "User", "site_admin": false}, "body": "\ud83e\udd14 I chose this phrasing to roughly match the wording of `Tensor.__array__()`, which raises with the message:\r\n\r\n`RuntimeError: can't convert CUDA tensor to numpy. Use tensor.cpu() to copy tensor to host memory first.`\r\n\r\nI've found that a cpu-tensor-provided-to-cuda-operation (or the inverse) is one of the more common bug types when working with torch, as folks (a) may be coming from libraries which implicitly copy cross device and/or (b) may not fully implement the \"allocate on device of your input tensor\" design pattern. \r\n\r\nThe current behavior of numba is to perform implicit cross-device copies when provided a numpy array and the difference in behavior when moving from `ndarray` to `tensor` may be the first pain point a end-user experiences. For these folks having a explicit callout to `tensor.cuda()` to perform the cross-device copy seems useful. \r\n\r\nMore sophisticated users will likely have a deeper understanding of the memory-management semantics of the library, and understand that wantonly running cross-devices transfers isn't a great idea. I think exact exception message will matter less; they'll recognize the cross-device mismatch and begin determining how the issue arose upstream of the call point.\r\n\r\nWould you be open to just clarifying the wording to more explicitly matching the `__array__` message?\r\n\r\n```\r\n\"Can't get __cuda_array_interface__ for non-CUDA tensor type: {tensor.type()}\"\r\n\"If CUDA data is required use tensor.cuda() to copy tensor to device memory. \"\r\n```\r\n\r\nI'm open to alternatives, but I'm not sure what a better phrasing for the exception message would be.", "created_at": "2018-09-23T17:54:33Z", "updated_at": "2018-11-23T15:51:49Z", "html_url": "https://github.com/pytorch/pytorch/pull/11984#discussion_r219706228", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/11984", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/219706228"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/11984#discussion_r219706228"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/11984"}}, "body_html": "<p><g-emoji class=\"g-emoji\" alias=\"thinking\" fallback-src=\"https://assets-cdn.github.com/images/icons/emoji/unicode/1f914.png\">\ud83e\udd14</g-emoji> I chose this phrasing to roughly match the wording of <code>Tensor.__array__()</code>, which raises with the message:</p>\n<p><code>RuntimeError: can't convert CUDA tensor to numpy. Use tensor.cpu() to copy tensor to host memory first.</code></p>\n<p>I've found that a cpu-tensor-provided-to-cuda-operation (or the inverse) is one of the more common bug types when working with torch, as folks (a) may be coming from libraries which implicitly copy cross device and/or (b) may not fully implement the \"allocate on device of your input tensor\" design pattern.</p>\n<p>The current behavior of numba is to perform implicit cross-device copies when provided a numpy array and the difference in behavior when moving from <code>ndarray</code> to <code>tensor</code> may be the first pain point a end-user experiences. For these folks having a explicit callout to <code>tensor.cuda()</code> to perform the cross-device copy seems useful.</p>\n<p>More sophisticated users will likely have a deeper understanding of the memory-management semantics of the library, and understand that wantonly running cross-devices transfers isn't a great idea. I think exact exception message will matter less; they'll recognize the cross-device mismatch and begin determining how the issue arose upstream of the call point.</p>\n<p>Would you be open to just clarifying the wording to more explicitly matching the <code>__array__</code> message?</p>\n<pre><code>\"Can't get __cuda_array_interface__ for non-CUDA tensor type: {tensor.type()}\"\n\"If CUDA data is required use tensor.cuda() to copy tensor to device memory. \"\n</code></pre>\n<p>I'm open to alternatives, but I'm not sure what a better phrasing for the exception message would be.</p>", "body_text": "\ud83e\udd14 I chose this phrasing to roughly match the wording of Tensor.__array__(), which raises with the message:\nRuntimeError: can't convert CUDA tensor to numpy. Use tensor.cpu() to copy tensor to host memory first.\nI've found that a cpu-tensor-provided-to-cuda-operation (or the inverse) is one of the more common bug types when working with torch, as folks (a) may be coming from libraries which implicitly copy cross device and/or (b) may not fully implement the \"allocate on device of your input tensor\" design pattern.\nThe current behavior of numba is to perform implicit cross-device copies when provided a numpy array and the difference in behavior when moving from ndarray to tensor may be the first pain point a end-user experiences. For these folks having a explicit callout to tensor.cuda() to perform the cross-device copy seems useful.\nMore sophisticated users will likely have a deeper understanding of the memory-management semantics of the library, and understand that wantonly running cross-devices transfers isn't a great idea. I think exact exception message will matter less; they'll recognize the cross-device mismatch and begin determining how the issue arose upstream of the call point.\nWould you be open to just clarifying the wording to more explicitly matching the __array__ message?\n\"Can't get __cuda_array_interface__ for non-CUDA tensor type: {tensor.type()}\"\n\"If CUDA data is required use tensor.cuda() to copy tensor to device memory. \"\n\nI'm open to alternatives, but I'm not sure what a better phrasing for the exception message would be.", "in_reply_to_id": 219686352}