{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/368219225", "html_url": "https://github.com/pytorch/pytorch/pull/5370#issuecomment-368219225", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/5370", "id": 368219225, "node_id": "MDEyOklzc3VlQ29tbWVudDM2ODIxOTIyNQ==", "user": {"login": "kevinzakka", "id": 10518920, "node_id": "MDQ6VXNlcjEwNTE4OTIw", "avatar_url": "https://avatars1.githubusercontent.com/u/10518920?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kevinzakka", "html_url": "https://github.com/kevinzakka", "followers_url": "https://api.github.com/users/kevinzakka/followers", "following_url": "https://api.github.com/users/kevinzakka/following{/other_user}", "gists_url": "https://api.github.com/users/kevinzakka/gists{/gist_id}", "starred_url": "https://api.github.com/users/kevinzakka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kevinzakka/subscriptions", "organizations_url": "https://api.github.com/users/kevinzakka/orgs", "repos_url": "https://api.github.com/users/kevinzakka/repos", "events_url": "https://api.github.com/users/kevinzakka/events{/privacy}", "received_events_url": "https://api.github.com/users/kevinzakka/received_events", "type": "User", "site_admin": false}, "created_at": "2018-02-24T10:42:17Z", "updated_at": "2018-02-24T10:47:27Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=4583066\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/apaszke\">@apaszke</a> in <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"299819431\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/5382\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/pytorch/pytorch/pull/5382/hovercard\" href=\"https://github.com/pytorch/pytorch/pull/5382\">#5382</a> I've added the following options to the user:</p>\n<ul>\n<li>use a string to initialize weights and biases. This can't be parametrized but you would use this for initializations like <code>orthogonal</code>, <code>zeros</code>, <code>ones</code>, <code>kaiming_X</code> (assuming ReLU activation) and <code>xavier_X</code> (assuming a general-purpose good init for any activation).</li>\n<li>use a function provided in <code>init.py</code> which you can parametrize directly to your liking. This would be used for random inits like <code>uniform</code> and <code>normal</code>, for <code>xavier_X</code> which you want to explicitly tailor to your activation using the <code>calculate_gain()</code> method, and <code>kaiming_X</code> for which you want to control the parameter <code>a</code> of the <code>leaky_relu</code>.</li>\n</ul>\n<p>Here's an example:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-c\"><span class=\"pl-c\">#</span> use a string</span>\nx <span class=\"pl-k\">=</span> nn.Linear(<span class=\"pl-c1\">784</span>, <span class=\"pl-c1\">512</span>, <span class=\"pl-v\">weight_init</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>xavier_uniform<span class=\"pl-pds\">'</span></span>, <span class=\"pl-v\">bias_init</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>zeros<span class=\"pl-pds\">'</span></span>)\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> use a function</span>\nx <span class=\"pl-k\">=</span> nn.Linear(<span class=\"pl-c1\">784</span>, <span class=\"pl-c1\">512</span>, <span class=\"pl-v\">weight_init</span><span class=\"pl-k\">=</span>init.uniform(<span class=\"pl-k\">-</span><span class=\"pl-c1\">5</span>, <span class=\"pl-c1\">5</span>))\nx <span class=\"pl-k\">=</span> nn.Linear(<span class=\"pl-c1\">784</span>, <span class=\"pl-c1\">512</span>, <span class=\"pl-v\">weight_init</span><span class=\"pl-k\">=</span>init.xavier_uniform(<span class=\"pl-v\">gain</span><span class=\"pl-k\">=</span>init.calculate_gain(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>tanh<span class=\"pl-pds\">'</span></span>)))</pre></div>", "body_text": "@apaszke in #5382 I've added the following options to the user:\n\nuse a string to initialize weights and biases. This can't be parametrized but you would use this for initializations like orthogonal, zeros, ones, kaiming_X (assuming ReLU activation) and xavier_X (assuming a general-purpose good init for any activation).\nuse a function provided in init.py which you can parametrize directly to your liking. This would be used for random inits like uniform and normal, for xavier_X which you want to explicitly tailor to your activation using the calculate_gain() method, and kaiming_X for which you want to control the parameter a of the leaky_relu.\n\nHere's an example:\n# use a string\nx = nn.Linear(784, 512, weight_init='xavier_uniform', bias_init='zeros')\n\n# use a function\nx = nn.Linear(784, 512, weight_init=init.uniform(-5, 5))\nx = nn.Linear(784, 512, weight_init=init.xavier_uniform(gain=init.calculate_gain('tanh')))", "body": "@apaszke in #5382 I've added the following options to the user:\r\n\r\n- use a string to initialize weights and biases. This can't be parametrized but you would use this for initializations like `orthogonal`, `zeros`, `ones`, `kaiming_X` (assuming ReLU activation) and `xavier_X` (assuming a general-purpose good init for any activation).\r\n- use a function provided in `init.py` which you can parametrize directly to your liking. This would be used for random inits like `uniform` and `normal`, for `xavier_X` which you want to explicitly tailor to your activation using the `calculate_gain()` method, and `kaiming_X` for which you want to control the parameter `a` of the `leaky_relu`.\r\n\r\nHere's an example:\r\n\r\n```python\r\n# use a string\r\nx = nn.Linear(784, 512, weight_init='xavier_uniform', bias_init='zeros')\r\n\r\n# use a function\r\nx = nn.Linear(784, 512, weight_init=init.uniform(-5, 5))\r\nx = nn.Linear(784, 512, weight_init=init.xavier_uniform(gain=init.calculate_gain('tanh')))\r\n```"}