{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/368220405", "html_url": "https://github.com/pytorch/pytorch/pull/5370#issuecomment-368220405", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/5370", "id": 368220405, "node_id": "MDEyOklzc3VlQ29tbWVudDM2ODIyMDQwNQ==", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "created_at": "2018-02-24T11:04:29Z", "updated_at": "2018-02-24T11:04:54Z", "author_association": "MEMBER", "body_html": "<p>The problem is that this approach is incompatible with the signature of <code>nn.init</code> methods. For example, here's the definition of <code>uniform</code>:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">uniform</span>(<span class=\"pl-smi\">tensor</span>, <span class=\"pl-smi\">a</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">0</span>, <span class=\"pl-smi\">b</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">1</span>):</pre></div>\n<p>Your approach implies that doing <code>nn.uniform(-5, 5)</code> would return a function that would await a tensor argument, and fill it according to the policy, but this is not the case. The only reasonable short alternative would be to use <code>partial(init.uniform, a=-5, b=5)</code>, but that's a just ugly... Life would be easier if Python supported currying, but no luck here</p>", "body_text": "The problem is that this approach is incompatible with the signature of nn.init methods. For example, here's the definition of uniform:\ndef uniform(tensor, a=0, b=1):\nYour approach implies that doing nn.uniform(-5, 5) would return a function that would await a tensor argument, and fill it according to the policy, but this is not the case. The only reasonable short alternative would be to use partial(init.uniform, a=-5, b=5), but that's a just ugly... Life would be easier if Python supported currying, but no luck here", "body": "The problem is that this approach is incompatible with the signature of `nn.init` methods. For example, here's the definition of `uniform`:\r\n```python\r\ndef uniform(tensor, a=0, b=1):\r\n```\r\nYour approach implies that doing `nn.uniform(-5, 5)` would return a function that would await a tensor argument, and fill it according to the policy, but this is not the case. The only reasonable short alternative would be to use `partial(init.uniform, a=-5, b=5)`, but that's a just ugly... Life would be easier if Python supported currying, but no luck here"}