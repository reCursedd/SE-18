{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/368220932", "html_url": "https://github.com/pytorch/pytorch/pull/5370#issuecomment-368220932", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/5370", "id": 368220932, "node_id": "MDEyOklzc3VlQ29tbWVudDM2ODIyMDkzMg==", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "created_at": "2018-02-24T11:11:59Z", "updated_at": "2018-02-24T11:16:57Z", "author_association": "MEMBER", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=10518920\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/kevinzakka\">@kevinzakka</a> the problem with this approach is that it's not backwards compatible. We could support both the functional way, and the curried way be implementing a class with <code>__new__</code>. It would work like this:</p>\n<ul>\n<li>In <code>__new__</code>, check if you got the tensor. If yes, this is a old-style version, and we should just run the function (can be implemented as <code>cls(**non_tensor_args)(tensor_arg)</code>).</li>\n<li>Otherwise call<code>__init__</code> and save the specified arguments</li>\n<li>In <code>__call__</code> accept only a single tensor, and apply the arguments cached in <code>__init__</code></li>\n</ul>", "body_text": "@kevinzakka the problem with this approach is that it's not backwards compatible. We could support both the functional way, and the curried way be implementing a class with __new__. It would work like this:\n\nIn __new__, check if you got the tensor. If yes, this is a old-style version, and we should just run the function (can be implemented as cls(**non_tensor_args)(tensor_arg)).\nOtherwise call__init__ and save the specified arguments\nIn __call__ accept only a single tensor, and apply the arguments cached in __init__", "body": "@kevinzakka the problem with this approach is that it's not backwards compatible. We could support both the functional way, and the curried way be implementing a class with `__new__`. It would work like this:\r\n- In `__new__`, check if you got the tensor. If yes, this is a old-style version, and we should just run the function (can be implemented as `cls(**non_tensor_args)(tensor_arg)`).\r\n- Otherwise call`__init__` and save the specified arguments\r\n- In `__call__` accept only a single tensor, and apply the arguments cached in `__init__`"}