{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/368214190", "html_url": "https://github.com/pytorch/pytorch/pull/5370#issuecomment-368214190", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/5370", "id": 368214190, "node_id": "MDEyOklzc3VlQ29tbWVudDM2ODIxNDE5MA==", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "created_at": "2018-02-24T09:17:15Z", "updated_at": "2018-02-24T11:15:03Z", "author_association": "MEMBER", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1310570\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/soumith\">@soumith</a> I'm just saying that it's often not quite as easy as dropping in a string, as some functions might take extra parameters (e.g. the following non-linearity, bounds of the uniform distribution). I can't see a huge usability difference between adding it to the constructor, or adding</p>\n<div class=\"highlight highlight-source-python\"><pre>nn.init.uniform(<span class=\"pl-c1\">self</span>.linear.weight, <span class=\"pl-v\">a</span><span class=\"pl-k\">=</span><span class=\"pl-k\">-</span><span class=\"pl-c1\">0.5</span>, <span class=\"pl-v\">b</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">0.5</span>)</pre></div>\n<p>the line below (with this approach having an extra benefit that you have more control over init).</p>", "body_text": "@soumith I'm just saying that it's often not quite as easy as dropping in a string, as some functions might take extra parameters (e.g. the following non-linearity, bounds of the uniform distribution). I can't see a huge usability difference between adding it to the constructor, or adding\nnn.init.uniform(self.linear.weight, a=-0.5, b=0.5)\nthe line below (with this approach having an extra benefit that you have more control over init).", "body": "@soumith I'm just saying that it's often not quite as easy as dropping in a string, as some functions might take extra parameters (e.g. the following non-linearity, bounds of the uniform distribution). I can't see a huge usability difference between adding it to the constructor, or adding\r\n```python\r\nnn.init.uniform(self.linear.weight, a=-0.5, b=0.5)\r\n```\r\nthe line below (with this approach having an extra benefit that you have more control over init)."}