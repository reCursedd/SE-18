{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/393320459", "html_url": "https://github.com/pytorch/pytorch/pull/7873#issuecomment-393320459", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/7873", "id": 393320459, "node_id": "MDEyOklzc3VlQ29tbWVudDM5MzMyMDQ1OQ==", "user": {"login": "weiyangfb", "id": 38509346, "node_id": "MDQ6VXNlcjM4NTA5MzQ2", "avatar_url": "https://avatars1.githubusercontent.com/u/38509346?v=4", "gravatar_id": "", "url": "https://api.github.com/users/weiyangfb", "html_url": "https://github.com/weiyangfb", "followers_url": "https://api.github.com/users/weiyangfb/followers", "following_url": "https://api.github.com/users/weiyangfb/following{/other_user}", "gists_url": "https://api.github.com/users/weiyangfb/gists{/gist_id}", "starred_url": "https://api.github.com/users/weiyangfb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/weiyangfb/subscriptions", "organizations_url": "https://api.github.com/users/weiyangfb/orgs", "repos_url": "https://api.github.com/users/weiyangfb/repos", "events_url": "https://api.github.com/users/weiyangfb/events{/privacy}", "received_events_url": "https://api.github.com/users/weiyangfb/received_events", "type": "User", "site_admin": false}, "created_at": "2018-05-30T21:10:19Z", "updated_at": "2018-05-30T21:10:19Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=9110200\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/fmassa\">@fmassa</a> You are completely right! I translated your code and had it tested out. Now the performance in CPU is similar, where on GPU my current implementation is slightly faster.</p>\n<pre><code>data = torch.arange(1000000).view(1000,1000)\n%timeit flip_meshgrid(data, (0,1))\n--------------------------------------------\n</code></pre>\n<p>100 loops, best of 3: 10.8 ms per loop</p>\n<pre><code>data = torch.arange(1000000).view(1000,1000)\n%timeit data.flip(0,1)\n--------------------------------------------\n</code></pre>\n<p>100 loops, best of 3: 11 ms per loop</p>\n<pre><code>data_cuda = torch.arange(1000000, device=torch.device('cuda')).view(1000,1000)\n%timeit flip_meshgrid(data_cuda, (0,1))\n--------------------------------------------\n</code></pre>\n<p>1000 loops, best of 3: 1.72 ms per loop</p>\n<pre><code>data_cuda = torch.arange(1000000, device=torch.device('cuda')).view(1000,1000)\n%timeit data_cuda.flip(0,1)\n--------------------------------------------\n</code></pre>\n<p>1000 loops, best of 3: 637 \u00b5s per loop</p>", "body_text": "@fmassa You are completely right! I translated your code and had it tested out. Now the performance in CPU is similar, where on GPU my current implementation is slightly faster.\ndata = torch.arange(1000000).view(1000,1000)\n%timeit flip_meshgrid(data, (0,1))\n--------------------------------------------\n\n100 loops, best of 3: 10.8 ms per loop\ndata = torch.arange(1000000).view(1000,1000)\n%timeit data.flip(0,1)\n--------------------------------------------\n\n100 loops, best of 3: 11 ms per loop\ndata_cuda = torch.arange(1000000, device=torch.device('cuda')).view(1000,1000)\n%timeit flip_meshgrid(data_cuda, (0,1))\n--------------------------------------------\n\n1000 loops, best of 3: 1.72 ms per loop\ndata_cuda = torch.arange(1000000, device=torch.device('cuda')).view(1000,1000)\n%timeit data_cuda.flip(0,1)\n--------------------------------------------\n\n1000 loops, best of 3: 637 \u00b5s per loop", "body": "@fmassa You are completely right! I translated your code and had it tested out. Now the performance in CPU is similar, where on GPU my current implementation is slightly faster.\r\n\r\n```\r\ndata = torch.arange(1000000).view(1000,1000)\r\n%timeit flip_meshgrid(data, (0,1))\r\n--------------------------------------------\r\n```\r\n100 loops, best of 3: 10.8 ms per loop\r\n\r\n```\r\ndata = torch.arange(1000000).view(1000,1000)\r\n%timeit data.flip(0,1)\r\n--------------------------------------------\r\n```\r\n100 loops, best of 3: 11 ms per loop\r\n\r\n```\r\ndata_cuda = torch.arange(1000000, device=torch.device('cuda')).view(1000,1000)\r\n%timeit flip_meshgrid(data_cuda, (0,1))\r\n--------------------------------------------\r\n```\r\n1000 loops, best of 3: 1.72 ms per loop\r\n\r\n```\r\ndata_cuda = torch.arange(1000000, device=torch.device('cuda')).view(1000,1000)\r\n%timeit data_cuda.flip(0,1)\r\n--------------------------------------------\r\n```\r\n1000 loops, best of 3: 637 \u00b5s per loop"}