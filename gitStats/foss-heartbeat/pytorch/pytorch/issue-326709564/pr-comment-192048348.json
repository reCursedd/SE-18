{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/192048348", "pull_request_review_id": 124742415, "id": 192048348, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MjA0ODM0OA==", "diff_hunk": "@@ -0,0 +1,25 @@\n+#include \"TensorTransformations.h\"\n+\n+#include \"ATen/NativeFunctions.h\"\n+\n+namespace at {\n+namespace native {\n+\n+Tensor flip_cpu(const Tensor& self, IntList dims) {\n+  const int64_t total_dims = self.dim(), flip_dims_size = dims.size();\n+  check_errors(total_dims, flip_dims_size, dims);\n+\n+  auto indices = std::vector<at::Tensor>(flip_dims_size);\n+  for (int64_t i = 0; i < flip_dims_size; i++) {\n+    indices[i] = at::arange(self.type().toScalarType(at::ScalarType::Long), self.size(i) - 1, -1, -1);\n+  }\n+  // creates a meshgrid\n+  for (int64_t i = 0; i < flip_dims_size; i++) {\n+    auto temp = std::vector<int64_t>(flip_dims_size, 1);\n+    temp[i] = indices[i].size(0);\n+    indices[i] = indices[i].view(IntList(temp));\n+  }\n+  return self.index(TensorList(indices));", "path": "aten/src/ATen/native/TensorTransformations.cpp", "position": null, "original_position": 22, "commit_id": "0709c30284942f0169b9b17ddd5c4e309fd8e1c1", "original_commit_id": "2173b886878ad9f8b1df34e6755791b6fa4276eb", "user": {"login": "fmassa", "id": 9110200, "node_id": "MDQ6VXNlcjkxMTAyMDA=", "avatar_url": "https://avatars2.githubusercontent.com/u/9110200?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fmassa", "html_url": "https://github.com/fmassa", "followers_url": "https://api.github.com/users/fmassa/followers", "following_url": "https://api.github.com/users/fmassa/following{/other_user}", "gists_url": "https://api.github.com/users/fmassa/gists{/gist_id}", "starred_url": "https://api.github.com/users/fmassa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fmassa/subscriptions", "organizations_url": "https://api.github.com/users/fmassa/orgs", "repos_url": "https://api.github.com/users/fmassa/repos", "events_url": "https://api.github.com/users/fmassa/events{/privacy}", "received_events_url": "https://api.github.com/users/fmassa/received_events", "type": "User", "site_admin": false}, "body": "note that you need to permute the dimensions if they are not consecutive.\r\nSo for example, if you have\r\n```python\r\na = torch.arange(2 * 3 * 4).reshape(2, 3, 4)\r\nb = a.flip(0, 2)\r\n```\r\nthis implementation will need to transpose the returned results because the advanced indexing puts all non-consecutive indices in the beginning of the tensor.\r\n```python\r\nb.shape # should be 2, 4, 3\r\nresult = b.permute(0, 2, 1)  # this is missing from the code!\r\n```", "created_at": "2018-05-31T09:59:35Z", "updated_at": "2018-11-23T15:44:46Z", "html_url": "https://github.com/pytorch/pytorch/pull/7873#discussion_r192048348", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/7873", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/192048348"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/7873#discussion_r192048348"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/7873"}}, "body_html": "<p>note that you need to permute the dimensions if they are not consecutive.<br>\nSo for example, if you have</p>\n<div class=\"highlight highlight-source-python\"><pre>a <span class=\"pl-k\">=</span> torch.arange(<span class=\"pl-c1\">2</span> <span class=\"pl-k\">*</span> <span class=\"pl-c1\">3</span> <span class=\"pl-k\">*</span> <span class=\"pl-c1\">4</span>).reshape(<span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">3</span>, <span class=\"pl-c1\">4</span>)\nb <span class=\"pl-k\">=</span> a.flip(<span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">2</span>)</pre></div>\n<p>this implementation will need to transpose the returned results because the advanced indexing puts all non-consecutive indices in the beginning of the tensor.</p>\n<div class=\"highlight highlight-source-python\"><pre>b.shape <span class=\"pl-c\"><span class=\"pl-c\">#</span> should be 2, 4, 3</span>\nresult <span class=\"pl-k\">=</span> b.permute(<span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">1</span>)  <span class=\"pl-c\"><span class=\"pl-c\">#</span> this is missing from the code!</span></pre></div>", "body_text": "note that you need to permute the dimensions if they are not consecutive.\nSo for example, if you have\na = torch.arange(2 * 3 * 4).reshape(2, 3, 4)\nb = a.flip(0, 2)\nthis implementation will need to transpose the returned results because the advanced indexing puts all non-consecutive indices in the beginning of the tensor.\nb.shape # should be 2, 4, 3\nresult = b.permute(0, 2, 1)  # this is missing from the code!"}