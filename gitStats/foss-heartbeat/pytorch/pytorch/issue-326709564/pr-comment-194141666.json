{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/194141666", "pull_request_review_id": 127265520, "id": 194141666, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDE0MTY2Ng==", "diff_hunk": "@@ -0,0 +1,25 @@\n+#include \"TensorTransformations.h\"\n+\n+#include \"ATen/NativeFunctions.h\"\n+\n+namespace at {\n+namespace native {\n+\n+Tensor flip_cpu(const Tensor& self, IntList dims) {\n+  const int64_t total_dims = self.dim(), flip_dims_size = dims.size();\n+  check_errors(total_dims, flip_dims_size, dims);\n+\n+  auto indices = std::vector<at::Tensor>(flip_dims_size);\n+  for (int64_t i = 0; i < flip_dims_size; i++) {\n+    indices[i] = at::arange(self.type().toScalarType(at::ScalarType::Long), self.size(i) - 1, -1, -1);\n+  }\n+  // creates a meshgrid\n+  for (int64_t i = 0; i < flip_dims_size; i++) {\n+    auto temp = std::vector<int64_t>(flip_dims_size, 1);\n+    temp[i] = indices[i].size(0);\n+    indices[i] = indices[i].view(IntList(temp));\n+  }\n+  return self.index(TensorList(indices));", "path": "aten/src/ATen/native/TensorTransformations.cpp", "position": null, "original_position": 22, "commit_id": "0709c30284942f0169b9b17ddd5c4e309fd8e1c1", "original_commit_id": "2173b886878ad9f8b1df34e6755791b6fa4276eb", "user": {"login": "fmassa", "id": 9110200, "node_id": "MDQ6VXNlcjkxMTAyMDA=", "avatar_url": "https://avatars2.githubusercontent.com/u/9110200?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fmassa", "html_url": "https://github.com/fmassa", "followers_url": "https://api.github.com/users/fmassa/followers", "following_url": "https://api.github.com/users/fmassa/following{/other_user}", "gists_url": "https://api.github.com/users/fmassa/gists{/gist_id}", "starred_url": "https://api.github.com/users/fmassa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fmassa/subscriptions", "organizations_url": "https://api.github.com/users/fmassa/orgs", "repos_url": "https://api.github.com/users/fmassa/repos", "events_url": "https://api.github.com/users/fmassa/events{/privacy}", "received_events_url": "https://api.github.com/users/fmassa/received_events", "type": "User", "site_admin": false}, "body": "For the `slice(i)`, I believe all you need to do is to replace all the `slices` with undefined tensors, as that's what's used in the ATen backend to represent full slices I believe.\r\n\r\nSo I'd say you'd need to have a `std::vector<Tensor>` with `tensor.dim()` number of elements, where all the dimensions that are `slice` are left as undefined tensors.", "created_at": "2018-06-08T18:16:52Z", "updated_at": "2018-11-23T15:45:16Z", "html_url": "https://github.com/pytorch/pytorch/pull/7873#discussion_r194141666", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/7873", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/194141666"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/7873#discussion_r194141666"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/7873"}}, "body_html": "<p>For the <code>slice(i)</code>, I believe all you need to do is to replace all the <code>slices</code> with undefined tensors, as that's what's used in the ATen backend to represent full slices I believe.</p>\n<p>So I'd say you'd need to have a <code>std::vector&lt;Tensor&gt;</code> with <code>tensor.dim()</code> number of elements, where all the dimensions that are <code>slice</code> are left as undefined tensors.</p>", "body_text": "For the slice(i), I believe all you need to do is to replace all the slices with undefined tensors, as that's what's used in the ATen backend to represent full slices I believe.\nSo I'd say you'd need to have a std::vector<Tensor> with tensor.dim() number of elements, where all the dimensions that are slice are left as undefined tensors.", "in_reply_to_id": 192048348}