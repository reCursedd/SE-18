{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/195610058", "pull_request_review_id": 129015103, "id": 195610058, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTYxMDA1OA==", "diff_hunk": "@@ -0,0 +1,121 @@\n+#include \"ATen/native/TensorTransformations.h\"\n+\n+#include \"ATen/cuda/detail/IndexUtils.cuh\"\n+#include \"ATen/NativeFunctions.h\"\n+#include \"ATen/cuda/CUDATensorMethods.cuh\"\n+#include \"ATen/cuda/CUDATypeConversion.cuh\"\n+\n+namespace at {\n+namespace native {\n+\n+#define AT_APPLY_THREADS_PER_BLOCK 32 * 16\n+#define AT_APPLY_BLOCKS_PER_SM 4\n+\n+template <typename scalar_t, typename IndexType>\n+#if __CUDA_ARCH__ >= 350\n+__launch_bounds__(AT_APPLY_THREADS_PER_BLOCK, AT_APPLY_BLOCKS_PER_SM)\n+#endif\n+__global__ void\n+kernel_pointwise_flip_apply2(const cuda::detail::TensorInfo<scalar_t, IndexType> in_tensor_info,\n+                          cuda::detail::TensorInfo<scalar_t, IndexType> out_tensor_info,\n+                          IndexType N,\n+                          int flip_dim,\n+                          int64_t total_dims) {\n+  for (IndexType linear_index = blockIdx.x * blockDim.x + threadIdx.x; linear_index < N; linear_index += gridDim.x * blockDim.x) {\n+    int64_t cur_indices = linear_index, rem = 0, dst_offset = 0;", "path": "aten/src/ATen/native/cuda/TensorTransformations.cu", "position": null, "original_position": 25, "commit_id": "0709c30284942f0169b9b17ddd5c4e309fd8e1c1", "original_commit_id": "a35d2adc1a2a62fc9b88954de4df6f12b9bd5e13", "user": {"login": "weiyangfb", "id": 38509346, "node_id": "MDQ6VXNlcjM4NTA5MzQ2", "avatar_url": "https://avatars1.githubusercontent.com/u/38509346?v=4", "gravatar_id": "", "url": "https://api.github.com/users/weiyangfb", "html_url": "https://github.com/weiyangfb", "followers_url": "https://api.github.com/users/weiyangfb/followers", "following_url": "https://api.github.com/users/weiyangfb/following{/other_user}", "gists_url": "https://api.github.com/users/weiyangfb/gists{/gist_id}", "starred_url": "https://api.github.com/users/weiyangfb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/weiyangfb/subscriptions", "organizations_url": "https://api.github.com/users/weiyangfb/orgs", "repos_url": "https://api.github.com/users/weiyangfb/repos", "events_url": "https://api.github.com/users/weiyangfb/events{/privacy}", "received_events_url": "https://api.github.com/users/weiyangfb/received_events", "type": "User", "site_admin": false}, "body": "You are right! `int64_t` does hurt the performance. For case:\r\n\r\n```\r\ndata_cuda = torch.arange(1000000, device=cuda).view(1000,1000)\r\n%timeit data_cuda.flip(0)\r\n```\r\n\r\nResults look like these:\r\n\r\n\u00a0 | time\r\n-- | --\r\nhardcode int64_t | 178 \u00b5s\r\nhardcode int32_t | 116 \u00b5s\r\ntemplating int64_t | 139 \u00b5s\r\ntemplating int32_t | 102 \u00b5s\r\n\r\nMaybe templating int64_t is the way to go?", "created_at": "2018-06-15T00:42:50Z", "updated_at": "2018-11-23T15:45:36Z", "html_url": "https://github.com/pytorch/pytorch/pull/7873#discussion_r195610058", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/7873", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/195610058"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/7873#discussion_r195610058"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/7873"}}, "body_html": "<p>You are right! <code>int64_t</code> does hurt the performance. For case:</p>\n<pre><code>data_cuda = torch.arange(1000000, device=cuda).view(1000,1000)\n%timeit data_cuda.flip(0)\n</code></pre>\n<p>Results look like these:</p>\n<table>\n<thead>\n<tr>\n<th>\u00a0</th>\n<th>time</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>hardcode int64_t</td>\n<td>178 \u00b5s</td>\n</tr>\n<tr>\n<td>hardcode int32_t</td>\n<td>116 \u00b5s</td>\n</tr>\n<tr>\n<td>templating int64_t</td>\n<td>139 \u00b5s</td>\n</tr>\n<tr>\n<td>templating int32_t</td>\n<td>102 \u00b5s</td>\n</tr>\n</tbody>\n</table>\n<p>Maybe templating int64_t is the way to go?</p>", "body_text": "You are right! int64_t does hurt the performance. For case:\ndata_cuda = torch.arange(1000000, device=cuda).view(1000,1000)\n%timeit data_cuda.flip(0)\n\nResults look like these:\n\n\n\n\u00a0\ntime\n\n\n\n\nhardcode int64_t\n178 \u00b5s\n\n\nhardcode int32_t\n116 \u00b5s\n\n\ntemplating int64_t\n139 \u00b5s\n\n\ntemplating int32_t\n102 \u00b5s\n\n\n\nMaybe templating int64_t is the way to go?", "in_reply_to_id": 195557001}