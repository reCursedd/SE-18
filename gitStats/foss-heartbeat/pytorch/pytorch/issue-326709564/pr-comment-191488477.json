{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/191488477", "pull_request_review_id": 124068472, "id": 191488477, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTQ4ODQ3Nw==", "diff_hunk": "@@ -0,0 +1,156 @@\n+#include \"ATen/NativeFunctions.h\"\n+#include \"ATen/ATen.h\"\n+#include <algorithm>\n+#include <sstream>\n+\n+#include \"ATen/cuda/CUDATensorMethods.cuh\"\n+#include \"ATen/cuda/CUDATypeConversion.cuh\"\n+\n+\n+namespace at {\n+namespace native {\n+\n+// Map the index of an element in tensor from 1D to nD\n+__device__ __forceinline__\n+void linear_index_to_indices(int64_t linear_index, int64_t* strides, int64_t total_dims, int64_t* indices) {\n+  int64_t res = linear_index;\n+  for (int64_t i = 0; i < total_dims; i++) {\n+    int64_t indices_i = linear_index * total_dims + i;\n+    indices[indices_i] = res / strides[i];\n+    res = res % strides[i];\n+  }\n+}\n+\n+/*\n+Map the index of an element in tensor from nD to 1D. A tensor is originally in nD shape, and 1D is the unfolded version of it (a vector).\n+Example: given a 3D tensor\n+[\n+  [ [1, 2], [3, 4] ],\n+  [ [5, 6], [7, 8] ],\n+  [ [9, 10], [11, 12] ],\n+]\n+Here element 3 has nD index (indice) = (0, 1, 0), and stride = (4, 2, 1). To map nD to 1D, we can use formula: sum(indice[i] * stride[i]). For instance, in the example above, 0 * 4 + 1 * 2 + 0 * 1 = 2, and so the oneD index = 2.\n+*/\n+__device__ __forceinline__\n+int64_t indices_to_linear_index(int64_t* indices, int64_t total_dims, int64_t* strides, int64_t src_linear_index) {\n+  int64_t dest_linear_index = 0;\n+  for (int64_t i = 0; i < total_dims; i++) {\n+    int64_t indices_i = src_linear_index * total_dims + i;\n+    dest_linear_index += indices[indices_i] * strides[i];\n+  }\n+  return dest_linear_index;\n+}\n+\n+template <typename scalar_t>\n+__global__\n+void flip_cuda_kernel(scalar_t* in_t, scalar_t* out_t, int64_t N, int64_t* dims, int64_t* indices,\n+  int64_t flip_dims_size, int64_t* strides, int64_t* strides_contiguous, int64_t* shape, int64_t total_dims) {\n+\n+  int64_t linear_index = blockIdx.x * blockDim.x + threadIdx.x;\n+  if (linear_index >= N) {\n+    return;\n+  }\n+\n+  linear_index_to_indices(linear_index, strides_contiguous, total_dims, indices);\n+\n+  // Flip nD index along each desired dimension\n+  for (int64_t i = 0 ; i < flip_dims_size; i++) {\n+    int64_t dim = dims[i];\n+    int64_t indices_dim = linear_index * total_dims + dim;\n+    indices[indices_dim] = shape[dim] - 1 - indices[indices_dim];\n+  }\n+  int64_t dest_linear_index = indices_to_linear_index(indices, total_dims, strides, linear_index);\n+  out_t[linear_index] = in_t[dest_linear_index];\n+}\n+\n+// Flip tensor given a list of dims\n+Tensor flip_cuda(const Tensor& self, IntList dims) {\n+  auto in_t = self;\n+  int64_t flip_dims_size = dims.size(), total_dims = in_t.dim(), N = in_t.numel();\n+\n+  // check if number of axis in dim is valid\n+  if (flip_dims_size == 0) {\n+    std::stringstream ss;\n+    ss << \"expected input tensor dims not empty, \"\n+       << \"but got tensor dims size=\" << flip_dims_size;\n+    throw std::runtime_error(ss.str());\n+  }\n+\n+  // check duplicates in dims\n+  auto flip_dims_v = std::vector<int64_t>(dims);\n+  flip_dims_v.erase(std::unique(flip_dims_v.begin(), flip_dims_v.end()), flip_dims_v.end());\n+  if ((int64_t)flip_dims_v.size() < flip_dims_size) {\n+    std::stringstream ss;\n+    ss << \"dims has duplicates, \"", "path": "aten/src/ATen/native/cuda/TensorTransformations.cu", "position": null, "original_position": 84, "commit_id": "0709c30284942f0169b9b17ddd5c4e309fd8e1c1", "original_commit_id": "d44a3ba5fefcf037355236cc9064e42585912c79", "user": {"login": "goldsborough", "id": 6429851, "node_id": "MDQ6VXNlcjY0Mjk4NTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/6429851?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goldsborough", "html_url": "https://github.com/goldsborough", "followers_url": "https://api.github.com/users/goldsborough/followers", "following_url": "https://api.github.com/users/goldsborough/following{/other_user}", "gists_url": "https://api.github.com/users/goldsborough/gists{/gist_id}", "starred_url": "https://api.github.com/users/goldsborough/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goldsborough/subscriptions", "organizations_url": "https://api.github.com/users/goldsborough/orgs", "repos_url": "https://api.github.com/users/goldsborough/repos", "events_url": "https://api.github.com/users/goldsborough/events{/privacy}", "received_events_url": "https://api.github.com/users/goldsborough/received_events", "type": "User", "site_admin": false}, "body": "`AT_CHECK` and probably shouldn't copy pasta", "created_at": "2018-05-29T16:25:30Z", "updated_at": "2018-11-23T15:44:41Z", "html_url": "https://github.com/pytorch/pytorch/pull/7873#discussion_r191488477", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/7873", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/191488477"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/7873#discussion_r191488477"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/7873"}}, "body_html": "<p><code>AT_CHECK</code> and probably shouldn't copy pasta</p>", "body_text": "AT_CHECK and probably shouldn't copy pasta"}