{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/194139905", "pull_request_review_id": 127263378, "id": 194139905, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDEzOTkwNQ==", "diff_hunk": "@@ -0,0 +1,25 @@\n+#include \"TensorTransformations.h\"\n+\n+#include \"ATen/NativeFunctions.h\"\n+\n+namespace at {\n+namespace native {\n+\n+Tensor flip_cpu(const Tensor& self, IntList dims) {\n+  const int64_t total_dims = self.dim(), flip_dims_size = dims.size();\n+  check_errors(total_dims, flip_dims_size, dims);\n+\n+  auto indices = std::vector<at::Tensor>(flip_dims_size);\n+  for (int64_t i = 0; i < flip_dims_size; i++) {\n+    indices[i] = at::arange(self.type().toScalarType(at::ScalarType::Long), self.size(i) - 1, -1, -1);\n+  }\n+  // creates a meshgrid\n+  for (int64_t i = 0; i < flip_dims_size; i++) {\n+    auto temp = std::vector<int64_t>(flip_dims_size, 1);\n+    temp[i] = indices[i].size(0);\n+    indices[i] = indices[i].view(IntList(temp));\n+  }\n+  return self.index(TensorList(indices));", "path": "aten/src/ATen/native/TensorTransformations.cpp", "position": null, "original_position": 22, "commit_id": "0709c30284942f0169b9b17ddd5c4e309fd8e1c1", "original_commit_id": "2173b886878ad9f8b1df34e6755791b6fa4276eb", "user": {"login": "fmassa", "id": 9110200, "node_id": "MDQ6VXNlcjkxMTAyMDA=", "avatar_url": "https://avatars2.githubusercontent.com/u/9110200?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fmassa", "html_url": "https://github.com/fmassa", "followers_url": "https://api.github.com/users/fmassa/followers", "following_url": "https://api.github.com/users/fmassa/following{/other_user}", "gists_url": "https://api.github.com/users/fmassa/gists{/gist_id}", "starred_url": "https://api.github.com/users/fmassa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fmassa/subscriptions", "organizations_url": "https://api.github.com/users/fmassa/orgs", "repos_url": "https://api.github.com/users/fmassa/repos", "events_url": "https://api.github.com/users/fmassa/events{/privacy}", "received_events_url": "https://api.github.com/users/fmassa/received_events", "type": "User", "site_admin": false}, "body": "To get the final permutation order, all you need to do is to sort the indices after permutation.\r\nsay we select on dims 1 and 3, of a 5d tensor the end result of the flip will have the following order of dimensions\r\n```python\r\nflip_dims = [1, 3, 0, 2, 4, 5]\r\n```\r\nwhere `1, 3` comes first because of advanced indexing on non-consecutive dimensions, and then comes the other dimensions.\r\nSo this is obtained by something like\r\n```python\r\ndims + [i for i in range(tensor.dim()) if i not in dims]\r\n```\r\n\r\nOnce you have this tensor containing the order of the dimensions, all you need to do is to get the indices after sorting:\r\n```python\r\n_, permutation = flip_dims.sort(0)\r\n```\r\n\r\nNote that those steps are only necessary if the dimensions in dim are non-consecutive, i.e., if\r\n```python\r\ntorch.all(tensor(dims[1:] - dims[:-1]) < 2)\r\n```\r\n(or something like that, the condition can be found in [here](https://github.com/pytorch/pytorch/blob/master/aten/src/ATen/native/Indexing.cpp#L89)).", "created_at": "2018-06-08T18:10:16Z", "updated_at": "2018-11-23T15:45:16Z", "html_url": "https://github.com/pytorch/pytorch/pull/7873#discussion_r194139905", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/7873", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/194139905"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/7873#discussion_r194139905"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/7873"}}, "body_html": "<p>To get the final permutation order, all you need to do is to sort the indices after permutation.<br>\nsay we select on dims 1 and 3, of a 5d tensor the end result of the flip will have the following order of dimensions</p>\n<div class=\"highlight highlight-source-python\"><pre>flip_dims <span class=\"pl-k\">=</span> [<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">3</span>, <span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">4</span>, <span class=\"pl-c1\">5</span>]</pre></div>\n<p>where <code>1, 3</code> comes first because of advanced indexing on non-consecutive dimensions, and then comes the other dimensions.<br>\nSo this is obtained by something like</p>\n<div class=\"highlight highlight-source-python\"><pre>dims <span class=\"pl-k\">+</span> [i <span class=\"pl-k\">for</span> i <span class=\"pl-k\">in</span> <span class=\"pl-c1\">range</span>(tensor.dim()) <span class=\"pl-k\">if</span> i <span class=\"pl-k\">not</span> <span class=\"pl-k\">in</span> dims]</pre></div>\n<p>Once you have this tensor containing the order of the dimensions, all you need to do is to get the indices after sorting:</p>\n<div class=\"highlight highlight-source-python\"><pre>_, permutation <span class=\"pl-k\">=</span> flip_dims.sort(<span class=\"pl-c1\">0</span>)</pre></div>\n<p>Note that those steps are only necessary if the dimensions in dim are non-consecutive, i.e., if</p>\n<div class=\"highlight highlight-source-python\"><pre>torch.all(tensor(dims[<span class=\"pl-c1\">1</span>:] <span class=\"pl-k\">-</span> dims[:<span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>]) <span class=\"pl-k\">&lt;</span> <span class=\"pl-c1\">2</span>)</pre></div>\n<p>(or something like that, the condition can be found in <a href=\"https://github.com/pytorch/pytorch/blob/master/aten/src/ATen/native/Indexing.cpp#L89\">here</a>).</p>", "body_text": "To get the final permutation order, all you need to do is to sort the indices after permutation.\nsay we select on dims 1 and 3, of a 5d tensor the end result of the flip will have the following order of dimensions\nflip_dims = [1, 3, 0, 2, 4, 5]\nwhere 1, 3 comes first because of advanced indexing on non-consecutive dimensions, and then comes the other dimensions.\nSo this is obtained by something like\ndims + [i for i in range(tensor.dim()) if i not in dims]\nOnce you have this tensor containing the order of the dimensions, all you need to do is to get the indices after sorting:\n_, permutation = flip_dims.sort(0)\nNote that those steps are only necessary if the dimensions in dim are non-consecutive, i.e., if\ntorch.all(tensor(dims[1:] - dims[:-1]) < 2)\n(or something like that, the condition can be found in here).", "in_reply_to_id": 192048348}