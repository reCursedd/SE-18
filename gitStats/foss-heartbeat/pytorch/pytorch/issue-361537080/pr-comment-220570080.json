{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/220570080", "pull_request_review_id": 159005966, "id": 220570080, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyMDU3MDA4MA==", "diff_hunk": "@@ -1,290 +1,322 @@\n-#define CATCH_CONFIG_MAIN\n-#include \"catch_utils.hpp\"\n+#include \"gtest/gtest.h\"\n \n #include \"ATen/ATen.h\"\n #include \"ATen/core/Reduction.h\"\n \n+/*\n // for TH compat test only...\n struct THFloatTensor;\n extern \"C\" THFloatTensor * THFloatTensor_newWithSize2d(size_t a, size_t b);\n extern \"C\" void THFloatTensor_fill(THFloatTensor *, float v);\n-\n+*/\n #include <iostream>\n #include <chrono>\n #include <string.h>\n #include <sstream>\n #include \"test_seed.h\"\n \n-using namespace at;\n-\n-using Catch::Matchers::StartsWith;\n-\n-static void test(Type & type) {\n-  CATCH_SECTION( \"resize\" ) {\n-    auto a = at::empty({0}, type.options());\n-    a.resize_({3,4});\n-    CATCH_REQUIRE(a.numel() == 12);\n-    a.resize_({5, 7});\n-    CATCH_REQUIRE(a.numel() == 35);\n-\n+#define ASSERT_EQ_RESOLVED(X, Y) \\\n+  {                              \\\n+    bool isEQ = X == Y;          \\\n+    ASSERT_TRUE(isEQ);           \\\n   }\n \n-  CATCH_SECTION( \"ones and dot\" ) {\n-    Tensor b0 = ones({1, 1}, type);\n-    CATCH_REQUIRE(2 == (b0+b0).sum().item<double>());\n+using namespace at;\n+\n+void TestResize(Type& type) {\n+  auto a = at::empty({0}, type.options());\n+  a.resize_({3, 4});\n+  ASSERT_EQ_RESOLVED(a.numel(), 12);\n+  a.resize_({5, 7});\n+  ASSERT_EQ_RESOLVED(a.numel(), 35);\n+}\n \n-    Tensor b1 = ones({1, 2}, type);\n-    CATCH_REQUIRE(4 == (b1+b1).sum().item<double>());\n+void TestOnesAndDot(Type& type) {\n+  Tensor b0 = ones({1, 1}, type);\n+  ASSERT_EQ_RESOLVED((b0 + b0).sum().item<double>(), 2);\n \n-    Tensor b = ones({3, 4}, type);\n-    CATCH_REQUIRE(24 == (b+b).sum().item<double>());\n-    CATCH_REQUIRE(12 == b.numel());\n-    CATCH_REQUIRE(b.view(-1).dot(b.view(-1)).item<double>() == 12);\n-  }\n+  Tensor b1 = ones({1, 2}, type);\n+  ASSERT_EQ_RESOLVED((b1 + b1).sum().item<double>(), 4);\n \n-  CATCH_SECTION( \"rand\" ) {\n-    for(auto i = 0; i < 10; i++) {\n-      Tensor a = rand({3,4}, type.toScalarType(i % 2 == 0 ? kFloat : kDouble));\n-    }\n-  }\n+  Tensor b = ones({3, 4}, type);\n+  ASSERT_EQ_RESOLVED((b + b).sum().item<double>(), 24);\n+  ASSERT_EQ_RESOLVED(b.numel(), 12);\n+  ASSERT_EQ_RESOLVED(b.view(-1).dot(b.view(-1)).item<double>(), 12);\n+}\n \n-  CATCH_SECTION( \"sort\" ) {\n-    Tensor b = rand({3, 4}, type);\n+void TestSort(Type& type) {\n+  Tensor b = rand({3, 4}, type);\n \n-    auto z = b.sort(1);\n-    auto z_sorted = std::get<0>(z);\n+  auto z = b.sort(1);\n+  auto z_sorted = std::get<0>(z);\n \n-    CATCH_REQUIRE(z_sorted[0][0].item<float>() < z_sorted[0][1].item<float>());\n-  }\n+  bool isLT = z_sorted[0][0].item<float>() < z_sorted[0][1].item<float>();\n+  ASSERT_TRUE(isLT);\n+}\n \n-  if(type.backend() != Backend::CUDA)\n-  CATCH_SECTION( \"randperm\" ) {\n+void TestRandperm(Type& type) {\n+  if (type.backend() != Backend::CUDA) {\n     Tensor b = randperm(15, type);\n     Tensor rv, ri;\n     std::tie(rv, ri) = sort(b, 0);\n-    CATCH_REQUIRE(rv[0].item<float>() <= rv[1].item<float>());\n-  }\n-\n-  CATCH_SECTION( \"context\" ) {\n-    std::stringstream ss;\n-    ss << \"context: \" << std::hex << (int64_t)&globalContext() << std::endl;\n+    bool isLE = (rv[0].item<float>() <= rv[1].item<float>());\n+    ASSERT_TRUE(isLE);\n   }\n+}\n \n-  CATCH_SECTION( \"add\" ) {\n-    Tensor a = rand({3, 4}, type);\n-    Tensor b = rand({3, 4}, type);\n-    Tensor c = add(a, add(a, b));\n-    //TODO:0-dim Tensor d(3.f);\n-    Scalar d = 3.f;\n-    CATCH_REQUIRE( add(c, d).allclose(a + a + b + d) );\n-  }\n+void SendContext() {\n+  std::stringstream ss;\n+  ss << \"context: \" << std::hex << (int64_t)&globalContext() << std::endl;\n+}", "path": "aten/src/ATen/test/basic.cpp", "position": null, "original_position": 122, "commit_id": "8a23c377aced4387451eff3650cba800836704a5", "original_commit_id": "ca6292b9e02e2fcc771535950ad4c7e185610319", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "???", "created_at": "2018-09-26T13:49:45Z", "updated_at": "2018-11-23T15:52:01Z", "html_url": "https://github.com/pytorch/pytorch/pull/11846#discussion_r220570080", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/11846", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/220570080"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/11846#discussion_r220570080"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/11846"}}, "body_html": "<p>???</p>", "body_text": "???"}