{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/186574043", "pull_request_review_id": 118180178, "id": 186574043, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NjU3NDA0Mw==", "diff_hunk": "@@ -0,0 +1,88 @@\n+#include \"caffe2/opt/fuse_conv_relu.h\"\n+\n+namespace caffe2 {\n+namespace opt {\n+\n+using namespace nom;\n+\n+void FuseConvRelu(\n+    repr::NNModule* nn,\n+    std::function<bool(const repr::Conv& conv)> should_fuse,\n+    std::function<void(repr::Conv* conv)> postprocess) {\n+  for (auto node_pair : repr::nn::dataIterator<repr::Conv>(nn->dataFlow)) {\n+    repr::NNGraph::NodeRef conv_node;\n+    repr::Conv* conv;\n+    std::tie(conv, conv_node) = node_pair;\n+\n+    // Check topological feasibility\n+    auto conv_outputs = repr::nn::getOutputs(conv_node);\n+    if (conv_outputs.size() != 1) {\n+      continue;\n+    }\n+    auto conv_output = conv_outputs.front();\n+\n+    auto consumers = repr::nn::getConsumers(conv_output);\n+    if (consumers.size() != 1) {\n+      continue;\n+    }\n+    if (!repr::nn::is<repr::Relu>(consumers.front())) {\n+      continue;\n+    }\n+    auto relu_node = consumers.front();\n+\n+    auto relu_outputs = repr::nn::getOutputs(relu_node);\n+    if (relu_outputs.size() != 1) {\n+      continue;\n+    }\n+\n+    // Check feasibility with application specific logic\n+    if (!should_fuse(*conv)) {\n+      continue;\n+    }\n+\n+    // Ready to fuse\n+    auto relu_output = relu_outputs.front();\n+    auto output_tensor = repr::nn::get<repr::Tensor>(relu_output);\n+    auto output_node = relu_output;\n+    auto input_tensor =\n+        repr::nn::get<repr::Tensor>(repr::nn::getInputs(conv_node).front());\n+\n+    // Conv cannot be in-place\n+    if (output_tensor->getName() != input_tensor->getName()) {\n+      nn->dataFlow.replaceNode(conv_output, relu_output);\n+      nn->dataFlow.deleteNode(relu_node);\n+      nn->dataFlow.deleteNode(conv_output);\n+    } else {\n+      nn->dataFlow.replaceNode(relu_output, conv_output);\n+      output_tensor = repr::nn::get<repr::Tensor>(conv_output);\n+      output_node = conv_output;\n+      nn->dataFlow.deleteNode(relu_node);\n+      nn->dataFlow.deleteNode(relu_output);\n+    }\n+\n+    // We may have accidentally made the next op in-place\n+    // In future iterations of transformations this won't be an issue,\n+    // but current caffe2 predictor usage requires things like\n+    // external_input and output to be unchanged.\n+    bool rectify_inplace = false;\n+    for (auto& consumer : repr::nn::getConsumers(output_node)) {\n+      for (auto& consumer_output : repr::nn::getOutputs(consumer)) {\n+        auto co_name = repr::nn::get<repr::Tensor>(consumer_output)->getName();\n+        if (co_name == output_tensor->getName()) {\n+          rectify_inplace = true;\n+        }\n+      }\n+    }\n+    if (rectify_inplace) {\n+      auto new_output = nn->dataFlow.createNode(\n+          make_unique<repr::Tensor>(output_tensor->getName() + \"_fusion_fix\"));\n+      nn->dataFlow.replaceNode(output_node, new_output);\n+    }\n+\n+    // Application specific logic for postprocessing the conv node\n+    postprocess(conv);", "path": "caffe2/opt/fuse_conv_relu.cc", "position": null, "original_position": 83, "commit_id": "a64df3167260758a015d0817ad3a00f9b3116d76", "original_commit_id": "88025983cc088e6853b448a5840319e7607ebbd8", "user": {"login": "yinghai", "id": 1100089, "node_id": "MDQ6VXNlcjExMDAwODk=", "avatar_url": "https://avatars1.githubusercontent.com/u/1100089?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yinghai", "html_url": "https://github.com/yinghai", "followers_url": "https://api.github.com/users/yinghai/followers", "following_url": "https://api.github.com/users/yinghai/following{/other_user}", "gists_url": "https://api.github.com/users/yinghai/gists{/gist_id}", "starred_url": "https://api.github.com/users/yinghai/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yinghai/subscriptions", "organizations_url": "https://api.github.com/users/yinghai/orgs", "repos_url": "https://api.github.com/users/yinghai/repos", "events_url": "https://api.github.com/users/yinghai/events{/privacy}", "received_events_url": "https://api.github.com/users/yinghai/received_events", "type": "User", "site_admin": false}, "body": "Hmm, if user want to replace the old conv node, they can just modify them inplace, right? ", "created_at": "2018-05-07T22:52:38Z", "updated_at": "2018-11-23T15:43:40Z", "html_url": "https://github.com/pytorch/pytorch/pull/7355#discussion_r186574043", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/7355", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/186574043"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/7355#discussion_r186574043"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/7355"}}, "body_html": "<p>Hmm, if user want to replace the old conv node, they can just modify them inplace, right?</p>", "body_text": "Hmm, if user want to replace the old conv node, they can just modify them inplace, right?", "in_reply_to_id": 186571108}