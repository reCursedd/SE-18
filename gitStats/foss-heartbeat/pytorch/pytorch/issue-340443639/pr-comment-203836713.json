{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/203836713", "pull_request_review_id": 138808176, "id": 203836713, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzgzNjcxMw==", "diff_hunk": "@@ -0,0 +1,48 @@\n+#pragma once\n+\n+#include \"caffe2/core/operator.h\"\n+#include \"caffe2/core/dispatch/Dispatcher.h\"\n+\n+namespace caffe2 {\n+\n+/**\n+ * To make a c10 operator \"C10Add\" callable from caffe2 as \"C2MyAddOpName\", just write\n+ *\n+ *     REGISTER_C10_OPERATOR_FOR_CAFFE2_DISPATCH(C10Add, C2MyAddOpName)\n+ *\n+ * Note: This wrapper currently only supports C10 ops that have exactly one output and take that\n+ *       in the last parameter as \"Tensor* output\".\n+ * TODO: Figure out a better way to handle output parameters\n+ */\n+\n+template<class OpSchemaDef, class Context>\n+class C10OperatorWrapper final : public Operator<Context> {\n+    using Schema = c10::OpSchema<OpSchemaDef>;\n+public:\n+    C10OperatorWrapper(const OperatorDef& operator_def, Workspace* ws)\n+            : Operator<Context>(operator_def, ws) {}\n+\n+    USE_OPERATOR_CONTEXT_FUNCTIONS;\n+\n+    bool RunOnDevice() override {\n+        RunOnDevice_(c10::guts::make_index_sequence<Schema::signature::num_args - 1>());\n+        return true;\n+    }\n+\n+private:\n+    template<size_t... InputIndex>\n+    void RunOnDevice_(c10::guts::index_sequence<InputIndex...>) {\n+        c10::Dispatcher<OpSchemaDef>::call(Input(InputIndex)..., Output(0));", "path": "caffe2/core/operator_c10wrapper.h", "position": null, "original_position": 35, "commit_id": "eaaad211701c11bca3df3b0010a5213504d26114", "original_commit_id": "b34956d7491f956c248c14c40125b7d5fda15510", "user": {"login": "smessmer", "id": 2373925, "node_id": "MDQ6VXNlcjIzNzM5MjU=", "avatar_url": "https://avatars3.githubusercontent.com/u/2373925?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smessmer", "html_url": "https://github.com/smessmer", "followers_url": "https://api.github.com/users/smessmer/followers", "following_url": "https://api.github.com/users/smessmer/following{/other_user}", "gists_url": "https://api.github.com/users/smessmer/gists{/gist_id}", "starred_url": "https://api.github.com/users/smessmer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smessmer/subscriptions", "organizations_url": "https://api.github.com/users/smessmer/orgs", "repos_url": "https://api.github.com/users/smessmer/repos", "events_url": "https://api.github.com/users/smessmer/events{/privacy}", "received_events_url": "https://api.github.com/users/smessmer/received_events", "type": "User", "site_admin": false}, "body": "I added a comment as discussed offline", "created_at": "2018-07-19T18:57:28Z", "updated_at": "2018-11-23T15:47:43Z", "html_url": "https://github.com/pytorch/pytorch/pull/9369#discussion_r203836713", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/9369", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/203836713"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/9369#discussion_r203836713"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/9369"}}, "body_html": "<p>I added a comment as discussed offline</p>", "body_text": "I added a comment as discussed offline", "in_reply_to_id": 201901931}