{"url": "https://api.github.com/repos/pytorch/pytorch/issues/14268", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/14268/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/14268/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/14268/events", "html_url": "https://github.com/pytorch/pytorch/pull/14268", "id": 383005163, "node_id": "MDExOlB1bGxSZXF1ZXN0MjMyNTc1MDc0", "number": 14268, "title": "Change Tensor::CopyFrom to a simple double dispatch", "user": {"login": "dzhulgakov", "id": 17890620, "node_id": "MDQ6VXNlcjE3ODkwNjIw", "avatar_url": "https://avatars2.githubusercontent.com/u/17890620?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dzhulgakov", "html_url": "https://github.com/dzhulgakov", "followers_url": "https://api.github.com/users/dzhulgakov/followers", "following_url": "https://api.github.com/users/dzhulgakov/following{/other_user}", "gists_url": "https://api.github.com/users/dzhulgakov/gists{/gist_id}", "starred_url": "https://api.github.com/users/dzhulgakov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dzhulgakov/subscriptions", "organizations_url": "https://api.github.com/users/dzhulgakov/orgs", "repos_url": "https://api.github.com/users/dzhulgakov/repos", "events_url": "https://api.github.com/users/dzhulgakov/events{/privacy}", "received_events_url": "https://api.github.com/users/dzhulgakov/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-11-21T08:26:15Z", "updated_at": "2018-11-21T08:26:16Z", "closed_at": null, "author_association": "MEMBER", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/14268", "html_url": "https://github.com/pytorch/pytorch/pull/14268", "diff_url": "https://github.com/pytorch/pytorch/pull/14268.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/14268.patch"}, "body_html": "<p>Summary:<br>\nRemoves the need for Context in Tensor by doing simple dispatch for CopyBytes. It'd eventually be subsumed by Roy Li's changes of proper copy_ op, but before that is done, let's get a clear logic of how copies are implemented and clean up some craft in CopyFrom implementation.</p>\n<p>Note, that with these changes, one can probably can get rid of Context::CopyFromCPU/CopyToCPU, but it's a matter for follow up diffs.</p>\n<p>This diff doesn't change the API of Tensor yet, but relies on the fact that passing <code>Context</code> to CopyFrom makes copy async if the device is CUDA and doesn't have any effect otherwise (that's how Context methods are implemented).</p>\n<p>This doesn't change semantics of copy async implementation - as before it blindly calls cudaMemcpyAsync which probably means that it can be misused if invoked separately outside of operator body. I'll leave it for the follow up copy_ unification.</p>\n<p>For Extend() we always do async copy - it makes sense as it's an in-place device-device operation and only any further op would be observable.</p>\n<p>Note: there are now three ways of invoking copy in C2 code - templated CopyBytes, virtual CopyFromCPU/etc, and double-dispatch free method here. Hopefully we can get rid of the second one.</p>\n<p>Also, please advise whether it's c10-worthy :)</p>\n<p>Differential Revision: D13117987</p>", "body_text": "Summary:\nRemoves the need for Context in Tensor by doing simple dispatch for CopyBytes. It'd eventually be subsumed by Roy Li's changes of proper copy_ op, but before that is done, let's get a clear logic of how copies are implemented and clean up some craft in CopyFrom implementation.\nNote, that with these changes, one can probably can get rid of Context::CopyFromCPU/CopyToCPU, but it's a matter for follow up diffs.\nThis diff doesn't change the API of Tensor yet, but relies on the fact that passing Context to CopyFrom makes copy async if the device is CUDA and doesn't have any effect otherwise (that's how Context methods are implemented).\nThis doesn't change semantics of copy async implementation - as before it blindly calls cudaMemcpyAsync which probably means that it can be misused if invoked separately outside of operator body. I'll leave it for the follow up copy_ unification.\nFor Extend() we always do async copy - it makes sense as it's an in-place device-device operation and only any further op would be observable.\nNote: there are now three ways of invoking copy in C2 code - templated CopyBytes, virtual CopyFromCPU/etc, and double-dispatch free method here. Hopefully we can get rid of the second one.\nAlso, please advise whether it's c10-worthy :)\nDifferential Revision: D13117987", "body": "Summary:\nRemoves the need for Context in Tensor by doing simple dispatch for CopyBytes. It'd eventually be subsumed by Roy Li's changes of proper copy_ op, but before that is done, let's get a clear logic of how copies are implemented and clean up some craft in CopyFrom implementation.\n\nNote, that with these changes, one can probably can get rid of Context::CopyFromCPU/CopyToCPU, but it's a matter for follow up diffs.\n\nThis diff doesn't change the API of Tensor yet, but relies on the fact that passing `Context` to CopyFrom makes copy async if the device is CUDA and doesn't have any effect otherwise (that's how Context methods are implemented).\n\nThis doesn't change semantics of copy async implementation - as before it blindly calls cudaMemcpyAsync which probably means that it can be misused if invoked separately outside of operator body. I'll leave it for the follow up copy_ unification.\n\nFor Extend() we always do async copy - it makes sense as it's an in-place device-device operation and only any further op would be observable.\n\nNote: there are now three ways of invoking copy in C2 code - templated CopyBytes, virtual CopyFromCPU/etc, and double-dispatch free method here. Hopefully we can get rid of the second one.\n\nAlso, please advise whether it's c10-worthy :)\n\nDifferential Revision: D13117987\n"}