{"url": "https://api.github.com/repos/pytorch/pytorch/issues/2840", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/2840/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/2840/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/2840/events", "html_url": "https://github.com/pytorch/pytorch/issues/2840", "id": 259972511, "node_id": "MDU6SXNzdWUyNTk5NzI1MTE=", "number": 2840, "title": "Dylib incompatibility (segfault) with pyjulia import", "user": {"login": "jekbradbury", "id": 11729078, "node_id": "MDQ6VXNlcjExNzI5MDc4", "avatar_url": "https://avatars2.githubusercontent.com/u/11729078?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jekbradbury", "html_url": "https://github.com/jekbradbury", "followers_url": "https://api.github.com/users/jekbradbury/followers", "following_url": "https://api.github.com/users/jekbradbury/following{/other_user}", "gists_url": "https://api.github.com/users/jekbradbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/jekbradbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jekbradbury/subscriptions", "organizations_url": "https://api.github.com/users/jekbradbury/orgs", "repos_url": "https://api.github.com/users/jekbradbury/repos", "events_url": "https://api.github.com/users/jekbradbury/events{/privacy}", "received_events_url": "https://api.github.com/users/jekbradbury/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2017-09-23T01:22:15Z", "updated_at": "2017-12-04T19:42:37Z", "closed_at": "2017-12-04T19:42:36Z", "author_association": "CONTRIBUTOR", "body_html": "<p>(Cross-reference to pyjulia issue with a little more info filed <a href=\"https://github.com/JuliaPy/pyjulia/issues/125\" data-hovercard-type=\"issue\" data-hovercard-url=\"/JuliaPy/pyjulia/issues/125/hovercard\">here</a>; it's never clear which side issues like this actually belong on)<br>\nI'm using <a href=\"github.com/JuliaPy/pyjulia\">pyjulia</a> to call a Julia library from Python, and while all of that works fine on its own, there's an import incompatibility with PyTorch.<br>\nImporting in one order (<code>import julia; j = julia.Julia(); import torch</code>) gives the same static TLS error we've <a href=\"https://github.com/pytorch/pytorch/issues/2083\" data-hovercard-type=\"issue\" data-hovercard-url=\"/pytorch/pytorch/issues/2083/hovercard\">seen before</a>, but while that can usually be fixed by switching the import order, here the other order (<code>import torch; import julia; j = julia.Julia()</code>) causes a segfault during the libjulia dylib loading in <code>julia.Julia()</code>.</p>\n<p>My PyTorch version is 0.2.0_4, while the top of the GDB traceback for the segfault is:</p>\n<pre><code>#0  0x00007fffd1966577 in void std::__once_call_impl&lt;std::_Bind_simple&lt;void (*())()&gt; &gt;() ()\n   from /home/james.bradbury/miniconda3/lib/python3.6/site-packages/torch/lib/libTHC.so.1\n#1  0x00007ffff76c2a80 in pthread_once ()\n    at ../nptl/sysdeps/unix/sysv/linux/x86_64/pthread_once.S:103\n#2  0x00007fffbcb585b9 in llvm::ManagedStaticBase::RegisterManagedStatic(void* (*)(), void (*)(void*)) const () from /home/james.bradbury/julia/usr/bin/../lib/libLLVM-3.9.so\n#3  0x00007fffbcb33ebe in llvm::cl::OptionCategory::registerCategory() ()\n   from /home/james.bradbury/julia/usr/bin/../lib/libLLVM-3.9.so\n#4  0x00007fffbcb3ca42 in __static_initialization_and_destruction_0(int, int) [clone .constprop.319]\n    () from /home/james.bradbury/julia/usr/bin/../lib/libLLVM-3.9.so\n#5  0x00007ffff7dea2da in call_init (l=&lt;optimized out&gt;, argc=argc@entry=1, \n    argv=argv@entry=0x7fffffffd618, env=env@entry=0x740b50) at dl-init.c:78\n#6  0x00007ffff7dea3c3 in call_init (env=&lt;optimized out&gt;, argv=&lt;optimized out&gt;, \n    argc=&lt;optimized out&gt;, l=&lt;optimized out&gt;) at dl-init.c:36\n#7  _dl_init (main_map=main_map@entry=0x1228140, argc=1, argv=0x7fffffffd618, env=0x740b50)\n    at dl-init.c:126\n#8  0x00007ffff7deee00 in dl_open_worker (a=a@entry=0x7fffffffc1f8) at dl-open.c:577\n#9  0x00007ffff7dea194 in _dl_catch_error (objname=objname@entry=0x7fffffffc1e8, \n    errstring=errstring@entry=0x7fffffffc1f0, mallocedp=mallocedp@entry=0x7fffffffc1e0, \n    operate=operate@entry=0x7ffff7deeb30 &lt;dl_open_worker&gt;, args=args@entry=0x7fffffffc1f8)\n    at dl-error.c:187\n#10 0x00007ffff7dee54b in _dl_open (\n    file=0x7fffbecc1d10 \"/home/james.bradbury/julia/usr/bin/../lib/libjulia.so.0.6\", \n    mode=-2147483390, caller_dlopen=&lt;optimized out&gt;, nsid=-2, argc=1, argv=0x7fffffffd618, \n    env=0x740b50) at dl-open.c:661\n#11 0x00007ffff74b202b in dlopen_doit (a=a@entry=0x7fffffffc410) at dlopen.c:66\n#12 0x00007ffff7dea194 in _dl_catch_error (objname=0x622560, errstring=0x622568, \n    mallocedp=0x622558, operate=0x7ffff74b1fd0 &lt;dlopen_doit&gt;, args=0x7fffffffc410) at dl-error.c:187\n#13 0x00007ffff74b262d in _dlerror_run (operate=operate@entry=0x7ffff74b1fd0 &lt;dlopen_doit&gt;, \n---Type &lt;return&gt; to continue, or q &lt;return&gt; to quit---\n    args=args@entry=0x7fffffffc410) at dlerror.c:163\n#14 0x00007ffff74b20c1 in __dlopen (file=&lt;optimized out&gt;, mode=&lt;optimized out&gt;) at dlopen.c:87\n#15 0x00007ffff5b94354 in py_dl_open (self=&lt;optimized out&gt;, args=&lt;optimized out&gt;)\n    at /home/ilan/minonda/conda-bld/python_1490230359189/work/Python-3.6.1/Modules/_ctypes/callproc.c:1328\n#16 0x00007ffff7995ef9 in _PyCFunction_FastCallDict (func_obj=0x7ffff646b900, args=0x7ffff644ec10, \n    nargs=&lt;optimized out&gt;, kwargs=0x0) at Objects/methodobject.c:234\n</code></pre>", "body_text": "(Cross-reference to pyjulia issue with a little more info filed here; it's never clear which side issues like this actually belong on)\nI'm using pyjulia to call a Julia library from Python, and while all of that works fine on its own, there's an import incompatibility with PyTorch.\nImporting in one order (import julia; j = julia.Julia(); import torch) gives the same static TLS error we've seen before, but while that can usually be fixed by switching the import order, here the other order (import torch; import julia; j = julia.Julia()) causes a segfault during the libjulia dylib loading in julia.Julia().\nMy PyTorch version is 0.2.0_4, while the top of the GDB traceback for the segfault is:\n#0  0x00007fffd1966577 in void std::__once_call_impl<std::_Bind_simple<void (*())()> >() ()\n   from /home/james.bradbury/miniconda3/lib/python3.6/site-packages/torch/lib/libTHC.so.1\n#1  0x00007ffff76c2a80 in pthread_once ()\n    at ../nptl/sysdeps/unix/sysv/linux/x86_64/pthread_once.S:103\n#2  0x00007fffbcb585b9 in llvm::ManagedStaticBase::RegisterManagedStatic(void* (*)(), void (*)(void*)) const () from /home/james.bradbury/julia/usr/bin/../lib/libLLVM-3.9.so\n#3  0x00007fffbcb33ebe in llvm::cl::OptionCategory::registerCategory() ()\n   from /home/james.bradbury/julia/usr/bin/../lib/libLLVM-3.9.so\n#4  0x00007fffbcb3ca42 in __static_initialization_and_destruction_0(int, int) [clone .constprop.319]\n    () from /home/james.bradbury/julia/usr/bin/../lib/libLLVM-3.9.so\n#5  0x00007ffff7dea2da in call_init (l=<optimized out>, argc=argc@entry=1, \n    argv=argv@entry=0x7fffffffd618, env=env@entry=0x740b50) at dl-init.c:78\n#6  0x00007ffff7dea3c3 in call_init (env=<optimized out>, argv=<optimized out>, \n    argc=<optimized out>, l=<optimized out>) at dl-init.c:36\n#7  _dl_init (main_map=main_map@entry=0x1228140, argc=1, argv=0x7fffffffd618, env=0x740b50)\n    at dl-init.c:126\n#8  0x00007ffff7deee00 in dl_open_worker (a=a@entry=0x7fffffffc1f8) at dl-open.c:577\n#9  0x00007ffff7dea194 in _dl_catch_error (objname=objname@entry=0x7fffffffc1e8, \n    errstring=errstring@entry=0x7fffffffc1f0, mallocedp=mallocedp@entry=0x7fffffffc1e0, \n    operate=operate@entry=0x7ffff7deeb30 <dl_open_worker>, args=args@entry=0x7fffffffc1f8)\n    at dl-error.c:187\n#10 0x00007ffff7dee54b in _dl_open (\n    file=0x7fffbecc1d10 \"/home/james.bradbury/julia/usr/bin/../lib/libjulia.so.0.6\", \n    mode=-2147483390, caller_dlopen=<optimized out>, nsid=-2, argc=1, argv=0x7fffffffd618, \n    env=0x740b50) at dl-open.c:661\n#11 0x00007ffff74b202b in dlopen_doit (a=a@entry=0x7fffffffc410) at dlopen.c:66\n#12 0x00007ffff7dea194 in _dl_catch_error (objname=0x622560, errstring=0x622568, \n    mallocedp=0x622558, operate=0x7ffff74b1fd0 <dlopen_doit>, args=0x7fffffffc410) at dl-error.c:187\n#13 0x00007ffff74b262d in _dlerror_run (operate=operate@entry=0x7ffff74b1fd0 <dlopen_doit>, \n---Type <return> to continue, or q <return> to quit---\n    args=args@entry=0x7fffffffc410) at dlerror.c:163\n#14 0x00007ffff74b20c1 in __dlopen (file=<optimized out>, mode=<optimized out>) at dlopen.c:87\n#15 0x00007ffff5b94354 in py_dl_open (self=<optimized out>, args=<optimized out>)\n    at /home/ilan/minonda/conda-bld/python_1490230359189/work/Python-3.6.1/Modules/_ctypes/callproc.c:1328\n#16 0x00007ffff7995ef9 in _PyCFunction_FastCallDict (func_obj=0x7ffff646b900, args=0x7ffff644ec10, \n    nargs=<optimized out>, kwargs=0x0) at Objects/methodobject.c:234", "body": "(Cross-reference to pyjulia issue with a little more info filed [here](https://github.com/JuliaPy/pyjulia/issues/125); it's never clear which side issues like this actually belong on)\r\nI'm using [pyjulia](github.com/JuliaPy/pyjulia) to call a Julia library from Python, and while all of that works fine on its own, there's an import incompatibility with PyTorch.\r\nImporting in one order (`import julia; j = julia.Julia(); import torch`) gives the same static TLS error we've [seen before](https://github.com/pytorch/pytorch/issues/2083), but while that can usually be fixed by switching the import order, here the other order (`import torch; import julia; j = julia.Julia()`) causes a segfault during the libjulia dylib loading in `julia.Julia()`.\r\n\r\nMy PyTorch version is 0.2.0_4, while the top of the GDB traceback for the segfault is:\r\n```\r\n#0  0x00007fffd1966577 in void std::__once_call_impl<std::_Bind_simple<void (*())()> >() ()\r\n   from /home/james.bradbury/miniconda3/lib/python3.6/site-packages/torch/lib/libTHC.so.1\r\n#1  0x00007ffff76c2a80 in pthread_once ()\r\n    at ../nptl/sysdeps/unix/sysv/linux/x86_64/pthread_once.S:103\r\n#2  0x00007fffbcb585b9 in llvm::ManagedStaticBase::RegisterManagedStatic(void* (*)(), void (*)(void*)) const () from /home/james.bradbury/julia/usr/bin/../lib/libLLVM-3.9.so\r\n#3  0x00007fffbcb33ebe in llvm::cl::OptionCategory::registerCategory() ()\r\n   from /home/james.bradbury/julia/usr/bin/../lib/libLLVM-3.9.so\r\n#4  0x00007fffbcb3ca42 in __static_initialization_and_destruction_0(int, int) [clone .constprop.319]\r\n    () from /home/james.bradbury/julia/usr/bin/../lib/libLLVM-3.9.so\r\n#5  0x00007ffff7dea2da in call_init (l=<optimized out>, argc=argc@entry=1, \r\n    argv=argv@entry=0x7fffffffd618, env=env@entry=0x740b50) at dl-init.c:78\r\n#6  0x00007ffff7dea3c3 in call_init (env=<optimized out>, argv=<optimized out>, \r\n    argc=<optimized out>, l=<optimized out>) at dl-init.c:36\r\n#7  _dl_init (main_map=main_map@entry=0x1228140, argc=1, argv=0x7fffffffd618, env=0x740b50)\r\n    at dl-init.c:126\r\n#8  0x00007ffff7deee00 in dl_open_worker (a=a@entry=0x7fffffffc1f8) at dl-open.c:577\r\n#9  0x00007ffff7dea194 in _dl_catch_error (objname=objname@entry=0x7fffffffc1e8, \r\n    errstring=errstring@entry=0x7fffffffc1f0, mallocedp=mallocedp@entry=0x7fffffffc1e0, \r\n    operate=operate@entry=0x7ffff7deeb30 <dl_open_worker>, args=args@entry=0x7fffffffc1f8)\r\n    at dl-error.c:187\r\n#10 0x00007ffff7dee54b in _dl_open (\r\n    file=0x7fffbecc1d10 \"/home/james.bradbury/julia/usr/bin/../lib/libjulia.so.0.6\", \r\n    mode=-2147483390, caller_dlopen=<optimized out>, nsid=-2, argc=1, argv=0x7fffffffd618, \r\n    env=0x740b50) at dl-open.c:661\r\n#11 0x00007ffff74b202b in dlopen_doit (a=a@entry=0x7fffffffc410) at dlopen.c:66\r\n#12 0x00007ffff7dea194 in _dl_catch_error (objname=0x622560, errstring=0x622568, \r\n    mallocedp=0x622558, operate=0x7ffff74b1fd0 <dlopen_doit>, args=0x7fffffffc410) at dl-error.c:187\r\n#13 0x00007ffff74b262d in _dlerror_run (operate=operate@entry=0x7ffff74b1fd0 <dlopen_doit>, \r\n---Type <return> to continue, or q <return> to quit---\r\n    args=args@entry=0x7fffffffc410) at dlerror.c:163\r\n#14 0x00007ffff74b20c1 in __dlopen (file=<optimized out>, mode=<optimized out>) at dlopen.c:87\r\n#15 0x00007ffff5b94354 in py_dl_open (self=<optimized out>, args=<optimized out>)\r\n    at /home/ilan/minonda/conda-bld/python_1490230359189/work/Python-3.6.1/Modules/_ctypes/callproc.c:1328\r\n#16 0x00007ffff7995ef9 in _PyCFunction_FastCallDict (func_obj=0x7ffff646b900, args=0x7ffff644ec10, \r\n    nargs=<optimized out>, kwargs=0x0) at Objects/methodobject.c:234\r\n```"}