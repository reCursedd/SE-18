{"url": "https://api.github.com/repos/pytorch/pytorch/issues/4132", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/4132/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/4132/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/4132/events", "html_url": "https://github.com/pytorch/pytorch/issues/4132", "id": 281454880, "node_id": "MDU6SXNzdWUyODE0NTQ4ODA=", "number": 4132, "title": "x.grad should be 0 but get NaN after x/0", "user": {"login": "DIYer22", "id": 10448025, "node_id": "MDQ6VXNlcjEwNDQ4MDI1", "avatar_url": "https://avatars3.githubusercontent.com/u/10448025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DIYer22", "html_url": "https://github.com/DIYer22", "followers_url": "https://api.github.com/users/DIYer22/followers", "following_url": "https://api.github.com/users/DIYer22/following{/other_user}", "gists_url": "https://api.github.com/users/DIYer22/gists{/gist_id}", "starred_url": "https://api.github.com/users/DIYer22/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DIYer22/subscriptions", "organizations_url": "https://api.github.com/users/DIYer22/orgs", "repos_url": "https://api.github.com/users/DIYer22/repos", "events_url": "https://api.github.com/users/DIYer22/events{/privacy}", "received_events_url": "https://api.github.com/users/DIYer22/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2017-12-12T16:44:52Z", "updated_at": "2018-01-18T08:13:15Z", "closed_at": null, "author_association": "NONE", "body_html": "<h1>x.grad should be 0 but get NaN after x/0</h1>\n<h3>Reproduction BUG code</h3>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> torch\n<span class=\"pl-k\">from</span> torch.autograd <span class=\"pl-k\">import</span> Variable\n\nx <span class=\"pl-k\">=</span> Variable(torch.FloatTensor([<span class=\"pl-c1\">1</span>.,<span class=\"pl-c1\">1</span>]), <span class=\"pl-v\">requires_grad</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>)\ndiv <span class=\"pl-k\">=</span> Variable(torch.FloatTensor([<span class=\"pl-c1\">0</span>.,<span class=\"pl-c1\">1</span>]))\n\ny <span class=\"pl-k\">=</span> x<span class=\"pl-k\">/</span>div <span class=\"pl-c\"><span class=\"pl-c\">#</span> =&gt; y is [inf, 1]</span>\n\nzero_mask <span class=\"pl-k\">=</span> (div<span class=\"pl-k\">==</span><span class=\"pl-c1\">0</span>) <span class=\"pl-c\"><span class=\"pl-c\">#</span> =&gt; zero_mask is [1, 0]</span>\ny[zero_mask] <span class=\"pl-k\">=</span> <span class=\"pl-c1\">0</span>  <span class=\"pl-c\"><span class=\"pl-c\">#</span> =&gt; y is [0, 1]</span>\n\nloss <span class=\"pl-k\">=</span> y.sum()\nloss.backward()\n<span class=\"pl-c1\">print</span>(x.grad) <span class=\"pl-c\"><span class=\"pl-c\">#</span> grad is [nan, 1], but expected [0, 1]</span></pre></div>\n<p>Computational graph of loss not include <code>x[0]</code><br>\nSo, gradient of <code>x[0]</code> should be 0, but get <code>NaN</code></p>\n<h3>more simple reproduction</h3>\n<div class=\"highlight highlight-source-python\"><pre>x <span class=\"pl-k\">=</span> Variable(torch.FloatTensor([<span class=\"pl-c1\">1</span>.,<span class=\"pl-c1\">1</span>]), <span class=\"pl-v\">requires_grad</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>)\ndiv <span class=\"pl-k\">=</span> Variable(torch.FloatTensor([<span class=\"pl-c1\">0</span>.,<span class=\"pl-c1\">1</span>]))\n\ny <span class=\"pl-k\">=</span> x<span class=\"pl-k\">/</span>div <span class=\"pl-c\"><span class=\"pl-c\">#</span> =&gt; y is [inf, 1]</span>\n\nmask <span class=\"pl-k\">=</span> (div<span class=\"pl-k\">!=</span><span class=\"pl-c1\">0</span>) <span class=\"pl-c\"><span class=\"pl-c\">#</span> =&gt; mask is [0, 1]</span>\nloss <span class=\"pl-k\">=</span> y[mask]\n\nloss.backward()\n<span class=\"pl-c1\">print</span>(x.grad) <span class=\"pl-c\"><span class=\"pl-c\">#</span> grad is [nan, 1], but expected [0, 1]</span></pre></div>\n<h3>Versions:</h3>\n<ul>\n<li>Python: 2.7</li>\n<li>pyTorch: 0.3.0.post4</li>\n</ul>", "body_text": "x.grad should be 0 but get NaN after x/0\nReproduction BUG code\nimport torch\nfrom torch.autograd import Variable\n\nx = Variable(torch.FloatTensor([1.,1]), requires_grad=True)\ndiv = Variable(torch.FloatTensor([0.,1]))\n\ny = x/div # => y is [inf, 1]\n\nzero_mask = (div==0) # => zero_mask is [1, 0]\ny[zero_mask] = 0  # => y is [0, 1]\n\nloss = y.sum()\nloss.backward()\nprint(x.grad) # grad is [nan, 1], but expected [0, 1]\nComputational graph of loss not include x[0]\nSo, gradient of x[0] should be 0, but get NaN\nmore simple reproduction\nx = Variable(torch.FloatTensor([1.,1]), requires_grad=True)\ndiv = Variable(torch.FloatTensor([0.,1]))\n\ny = x/div # => y is [inf, 1]\n\nmask = (div!=0) # => mask is [0, 1]\nloss = y[mask]\n\nloss.backward()\nprint(x.grad) # grad is [nan, 1], but expected [0, 1]\nVersions:\n\nPython: 2.7\npyTorch: 0.3.0.post4", "body": "# x.grad should be 0 but get NaN after x/0\r\n\r\n\r\n### Reproduction BUG code\r\n```python\r\nimport torch\r\nfrom torch.autograd import Variable\r\n\r\nx = Variable(torch.FloatTensor([1.,1]), requires_grad=True)\r\ndiv = Variable(torch.FloatTensor([0.,1]))\r\n\r\ny = x/div # => y is [inf, 1]\r\n\r\nzero_mask = (div==0) # => zero_mask is [1, 0]\r\ny[zero_mask] = 0  # => y is [0, 1]\r\n\r\nloss = y.sum()\r\nloss.backward()\r\nprint(x.grad) # grad is [nan, 1], but expected [0, 1]\r\n```\r\n\r\nComputational graph of loss not include `x[0]`\r\nSo, gradient of `x[0]` should be 0, but get `NaN` \r\n\r\n### more simple reproduction\r\n```python\r\nx = Variable(torch.FloatTensor([1.,1]), requires_grad=True)\r\ndiv = Variable(torch.FloatTensor([0.,1]))\r\n\r\ny = x/div # => y is [inf, 1]\r\n\r\nmask = (div!=0) # => mask is [0, 1]\r\nloss = y[mask]\r\n\r\nloss.backward()\r\nprint(x.grad) # grad is [nan, 1], but expected [0, 1]\r\n```\r\n\r\n### Versions:\r\n * Python: 2.7\r\n * pyTorch: 0.3.0.post4"}