{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/358276578", "html_url": "https://github.com/pytorch/pytorch/issues/4132#issuecomment-358276578", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/4132", "id": 358276578, "node_id": "MDEyOklzc3VlQ29tbWVudDM1ODI3NjU3OA==", "user": {"login": "yawudede", "id": 35065151, "node_id": "MDQ6VXNlcjM1MDY1MTUx", "avatar_url": "https://avatars3.githubusercontent.com/u/35065151?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yawudede", "html_url": "https://github.com/yawudede", "followers_url": "https://api.github.com/users/yawudede/followers", "following_url": "https://api.github.com/users/yawudede/following{/other_user}", "gists_url": "https://api.github.com/users/yawudede/gists{/gist_id}", "starred_url": "https://api.github.com/users/yawudede/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yawudede/subscriptions", "organizations_url": "https://api.github.com/users/yawudede/orgs", "repos_url": "https://api.github.com/users/yawudede/repos", "events_url": "https://api.github.com/users/yawudede/events{/privacy}", "received_events_url": "https://api.github.com/users/yawudede/received_events", "type": "User", "site_admin": false}, "created_at": "2018-01-17T11:27:11Z", "updated_at": "2018-01-18T08:13:15Z", "author_association": "NONE", "body_html": "<p>my solution beyond the owner's advice</p>\n<pre><code>import torch\nfrom torch.autograd import Variable\nx = Variable(torch.FloatTensor([1.,1]), requires_grad=True)\ndiv = Variable(torch.FloatTensor([0.,1]))\nnumerator=Variable(torch.FloatTensor([0.,1]))\none_mask = (div!=0) # =&gt; one_mask is [0, 1]\nnumerator[one_mask]=x[one_mask] /div[one_mask] \ny=(numerator)\nzero_mask = (div==0) # =&gt; zero_mask is [1, 0]\ny[zero_mask] = 0  # =&gt; y is [0, 1]\nprint(y.data)\nloss = y.sum()\nloss.backward()\nprint(x.grad) # grad is [0, 1], as expected [0, 1] #\u6253\u5370\u68af\u5ea6 dy/dx`\n</code></pre>", "body_text": "my solution beyond the owner's advice\nimport torch\nfrom torch.autograd import Variable\nx = Variable(torch.FloatTensor([1.,1]), requires_grad=True)\ndiv = Variable(torch.FloatTensor([0.,1]))\nnumerator=Variable(torch.FloatTensor([0.,1]))\none_mask = (div!=0) # => one_mask is [0, 1]\nnumerator[one_mask]=x[one_mask] /div[one_mask] \ny=(numerator)\nzero_mask = (div==0) # => zero_mask is [1, 0]\ny[zero_mask] = 0  # => y is [0, 1]\nprint(y.data)\nloss = y.sum()\nloss.backward()\nprint(x.grad) # grad is [0, 1], as expected [0, 1] #\u6253\u5370\u68af\u5ea6 dy/dx`", "body": "my solution beyond the owner's advice\r\n\r\n```\r\nimport torch\r\nfrom torch.autograd import Variable\r\nx = Variable(torch.FloatTensor([1.,1]), requires_grad=True)\r\ndiv = Variable(torch.FloatTensor([0.,1]))\r\nnumerator=Variable(torch.FloatTensor([0.,1]))\r\none_mask = (div!=0) # => one_mask is [0, 1]\r\nnumerator[one_mask]=x[one_mask] /div[one_mask] \r\ny=(numerator)\r\nzero_mask = (div==0) # => zero_mask is [1, 0]\r\ny[zero_mask] = 0  # => y is [0, 1]\r\nprint(y.data)\r\nloss = y.sum()\r\nloss.backward()\r\nprint(x.grad) # grad is [0, 1], as expected [0, 1] #\u6253\u5370\u68af\u5ea6 dy/dx`\r\n```"}