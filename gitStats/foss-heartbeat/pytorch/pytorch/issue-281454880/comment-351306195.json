{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/351306195", "html_url": "https://github.com/pytorch/pytorch/issues/4132#issuecomment-351306195", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/4132", "id": 351306195, "node_id": "MDEyOklzc3VlQ29tbWVudDM1MTMwNjE5NQ==", "user": {"login": "DIYer22", "id": 10448025, "node_id": "MDQ6VXNlcjEwNDQ4MDI1", "avatar_url": "https://avatars3.githubusercontent.com/u/10448025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DIYer22", "html_url": "https://github.com/DIYer22", "followers_url": "https://api.github.com/users/DIYer22/followers", "following_url": "https://api.github.com/users/DIYer22/following{/other_user}", "gists_url": "https://api.github.com/users/DIYer22/gists{/gist_id}", "starred_url": "https://api.github.com/users/DIYer22/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DIYer22/subscriptions", "organizations_url": "https://api.github.com/users/DIYer22/orgs", "repos_url": "https://api.github.com/users/DIYer22/repos", "events_url": "https://api.github.com/users/DIYer22/events{/privacy}", "received_events_url": "https://api.github.com/users/DIYer22/received_events", "type": "User", "site_admin": false}, "created_at": "2017-12-13T07:26:08Z", "updated_at": "2017-12-13T07:26:08Z", "author_association": "NONE", "body_html": "<h2>Key to avoid <code>nan</code></h2>\n<p>Your code should't generat any <code>inf</code> in forward, which often produce by <code>torch.log(0)</code> and <code>x/[0, ]</code><br>\nThat means <code>0</code> should be filtered before do  <code>torch.log(x)</code> and <code>x/div</code></p>\n<h2>My example</h2>\n<h3>Variables</h3>\n<div class=\"highlight highlight-source-python\"><pre>\u2514\u2500 <span class=\"pl-k\">/</span>: <span class=\"pl-c1\">4</span>\n    \u251c\u2500\u2500 gtind: torch.Size([<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">300</span>, <span class=\"pl-c1\">400</span>]) torch.cuda.FloatTensor\n    \u251c\u2500\u2500 edge: torch.Size([<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">300</span>, <span class=\"pl-c1\">400</span>]) torch.cuda.ByteTensor\n    \u251c\u2500\u2500 probnb: torch.Size([<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">8</span>, <span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">300</span>, <span class=\"pl-c1\">400</span>]) torch.cuda.FloatTensor\n    \u2514\u2500\u2500 gtdf: torch.Size([<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">8</span>, <span class=\"pl-c1\">300</span>, <span class=\"pl-c1\">400</span>]) torch.cuda.FloatTensor\nth <span class=\"pl-k\">=</span> torch\ntots <span class=\"pl-k\">=</span> <span class=\"pl-k\">lambda</span> <span class=\"pl-smi\">x</span>:x.data</pre></div>\n<h3>code(before)</h3>\n<div class=\"highlight highlight-source-python\"><pre>    otherSideEdgeLossMap <span class=\"pl-k\">=</span> <span class=\"pl-k\">-</span>th.log(((probnb<span class=\"pl-k\">*</span>gtind).sum(<span class=\"pl-k\">-</span><span class=\"pl-c1\">3</span>)<span class=\"pl-k\">*</span>gtdf).sum(<span class=\"pl-k\">-</span><span class=\"pl-c1\">3</span>)<span class=\"pl-k\">/</span>gtdf.sum(<span class=\"pl-k\">-</span><span class=\"pl-c1\">3</span>))\n    otherSideEdgeLossMap[<span class=\"pl-k\">~</span>tots(edge)] <span class=\"pl-k\">=</span> <span class=\"pl-c1\">0</span></pre></div>\n<h3>code(after)</h3>\n<div class=\"highlight highlight-source-python\"><pre>    numerator <span class=\"pl-k\">=</span> ((probnb<span class=\"pl-k\">*</span>gtind).sum(<span class=\"pl-k\">-</span><span class=\"pl-c1\">3</span>)<span class=\"pl-k\">*</span>gtdf).sum(<span class=\"pl-k\">-</span><span class=\"pl-c1\">3</span>)\n    numerator[tots(edge)] <span class=\"pl-k\">/=</span> gtdf.sum(<span class=\"pl-k\">-</span><span class=\"pl-c1\">3</span>)[tots(edge)]\n    numerator[tots(edge)] <span class=\"pl-k\">=</span> <span class=\"pl-k\">-</span>th.log(numerator[tots(edge)])\n    otherSideEdgeLossMap <span class=\"pl-k\">=</span> (numerator)\n    otherSideEdgeLossMap[<span class=\"pl-k\">~</span>tots(edge)] <span class=\"pl-k\">=</span> <span class=\"pl-c1\">0</span></pre></div>\n<p>Both <code>code(before)</code>  and <code>code(after)</code> has total same <code> otherSideEdgeLossMap</code>.<br>\nAfter <code>otherSideEdgeLossMap[edge].mean().backward()</code>.<br>\nthe simple one  <code>code(before)</code>'s grad has lots of  <code>nan</code></p>\n<p>After many trys, <code>code(after)</code>  could get the right grad !!</p>\n<p>In my opinion,It's a BUG, because  index operation should totally isolate the gradient of tensors which are not be indexed!</p>", "body_text": "Key to avoid nan\nYour code should't generat any inf in forward, which often produce by torch.log(0) and x/[0, ]\nThat means 0 should be filtered before do  torch.log(x) and x/div\nMy example\nVariables\n\u2514\u2500 /: 4\n    \u251c\u2500\u2500 gtind: torch.Size([1, 2, 300, 400]) torch.cuda.FloatTensor\n    \u251c\u2500\u2500 edge: torch.Size([1, 300, 400]) torch.cuda.ByteTensor\n    \u251c\u2500\u2500 probnb: torch.Size([1, 8, 2, 300, 400]) torch.cuda.FloatTensor\n    \u2514\u2500\u2500 gtdf: torch.Size([1, 8, 300, 400]) torch.cuda.FloatTensor\nth = torch\ntots = lambda x:x.data\ncode(before)\n    otherSideEdgeLossMap = -th.log(((probnb*gtind).sum(-3)*gtdf).sum(-3)/gtdf.sum(-3))\n    otherSideEdgeLossMap[~tots(edge)] = 0\ncode(after)\n    numerator = ((probnb*gtind).sum(-3)*gtdf).sum(-3)\n    numerator[tots(edge)] /= gtdf.sum(-3)[tots(edge)]\n    numerator[tots(edge)] = -th.log(numerator[tots(edge)])\n    otherSideEdgeLossMap = (numerator)\n    otherSideEdgeLossMap[~tots(edge)] = 0\nBoth code(before)  and code(after) has total same  otherSideEdgeLossMap.\nAfter otherSideEdgeLossMap[edge].mean().backward().\nthe simple one  code(before)'s grad has lots of  nan\nAfter many trys, code(after)  could get the right grad !!\nIn my opinion,It's a BUG, because  index operation should totally isolate the gradient of tensors which are not be indexed!", "body": "\r\n## Key to avoid `nan`\r\nYour code should't generat any `inf` in forward, which often produce by `torch.log(0)` and `x/[0, ]`\r\nThat means `0` should be filtered before do  `torch.log(x)` and `x/div` \r\n\r\n## My example\r\n### Variables\r\n```python\r\n\u2514\u2500 /: 4\r\n    \u251c\u2500\u2500 gtind: torch.Size([1, 2, 300, 400]) torch.cuda.FloatTensor\r\n    \u251c\u2500\u2500 edge: torch.Size([1, 300, 400]) torch.cuda.ByteTensor\r\n    \u251c\u2500\u2500 probnb: torch.Size([1, 8, 2, 300, 400]) torch.cuda.FloatTensor\r\n    \u2514\u2500\u2500 gtdf: torch.Size([1, 8, 300, 400]) torch.cuda.FloatTensor\r\nth = torch\r\ntots = lambda x:x.data\r\n```\r\n### code(before) \r\n```python\r\n    otherSideEdgeLossMap = -th.log(((probnb*gtind).sum(-3)*gtdf).sum(-3)/gtdf.sum(-3))\r\n    otherSideEdgeLossMap[~tots(edge)] = 0\r\n```\r\n### code(after) \r\n```python\r\n    numerator = ((probnb*gtind).sum(-3)*gtdf).sum(-3)\r\n    numerator[tots(edge)] /= gtdf.sum(-3)[tots(edge)]\r\n    numerator[tots(edge)] = -th.log(numerator[tots(edge)])\r\n    otherSideEdgeLossMap = (numerator)\r\n    otherSideEdgeLossMap[~tots(edge)] = 0\r\n```\r\n\r\nBoth `code(before)`  and `code(after)` has total same ` otherSideEdgeLossMap`.\r\nAfter `otherSideEdgeLossMap[edge].mean().backward()`.\r\nthe simple one  `code(before)`'s grad has lots of  `nan`\r\n\r\nAfter many trys, `code(after)`  could get the right grad !!\r\n\r\n\r\nIn my opinion,It's a BUG, because  index operation should totally isolate the gradient of tensors which are not be indexed!"}