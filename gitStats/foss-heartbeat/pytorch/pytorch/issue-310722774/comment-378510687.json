{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/378510687", "html_url": "https://github.com/pytorch/pytorch/pull/6223#issuecomment-378510687", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/6223", "id": 378510687, "node_id": "MDEyOklzc3VlQ29tbWVudDM3ODUxMDY4Nw==", "user": {"login": "dzhulgakov", "id": 17890620, "node_id": "MDQ6VXNlcjE3ODkwNjIw", "avatar_url": "https://avatars2.githubusercontent.com/u/17890620?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dzhulgakov", "html_url": "https://github.com/dzhulgakov", "followers_url": "https://api.github.com/users/dzhulgakov/followers", "following_url": "https://api.github.com/users/dzhulgakov/following{/other_user}", "gists_url": "https://api.github.com/users/dzhulgakov/gists{/gist_id}", "starred_url": "https://api.github.com/users/dzhulgakov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dzhulgakov/subscriptions", "organizations_url": "https://api.github.com/users/dzhulgakov/orgs", "repos_url": "https://api.github.com/users/dzhulgakov/repos", "events_url": "https://api.github.com/users/dzhulgakov/events{/privacy}", "received_events_url": "https://api.github.com/users/dzhulgakov/received_events", "type": "User", "site_admin": false}, "created_at": "2018-04-04T07:43:58Z", "updated_at": "2018-04-04T07:43:58Z", "author_association": "MEMBER", "body_html": "<p>I think the concern here is that so many expect files spam the viewer with results. I guess it's a valid concern and it can be mitigated with two fixes:</p>\n<ol>\n<li>mark expect files as binary (<a href=\"https://stackoverflow.com/questions/11162267/how-do-i-make-git-treat-a-file-as-binary\" rel=\"nofollow\">https://stackoverflow.com/questions/11162267/how-do-i-make-git-treat-a-file-as-binary</a> ). It's both make them not render in the UI (desired in this case as it's mostly a smoke test) and will also avoid annoying merge conflicts in some cases</li>\n<li>separate files in a different folder. I'd encourage to put files under <code>test/</code> but they don't have to be in the root folder. How about we put it under <code>test/onnx</code> or something? It feel quite reasonable to me - as we add more tests we should probably do the same to others too. If importing <code>test/common.py</code> is an issue - can't we just put it under <code>test/util</code> or something like that?</li>\n</ol>\n<p>As Junjie pointed out we should definitely run this tests as part of regular CI for PyTorch. I hope everybody agrees with that.</p>", "body_text": "I think the concern here is that so many expect files spam the viewer with results. I guess it's a valid concern and it can be mitigated with two fixes:\n\nmark expect files as binary (https://stackoverflow.com/questions/11162267/how-do-i-make-git-treat-a-file-as-binary ). It's both make them not render in the UI (desired in this case as it's mostly a smoke test) and will also avoid annoying merge conflicts in some cases\nseparate files in a different folder. I'd encourage to put files under test/ but they don't have to be in the root folder. How about we put it under test/onnx or something? It feel quite reasonable to me - as we add more tests we should probably do the same to others too. If importing test/common.py is an issue - can't we just put it under test/util or something like that?\n\nAs Junjie pointed out we should definitely run this tests as part of regular CI for PyTorch. I hope everybody agrees with that.", "body": "I think the concern here is that so many expect files spam the viewer with results. I guess it's a valid concern and it can be mitigated with two fixes:\r\n1) mark expect files as binary (https://stackoverflow.com/questions/11162267/how-do-i-make-git-treat-a-file-as-binary ). It's both make them not render in the UI (desired in this case as it's mostly a smoke test) and will also avoid annoying merge conflicts in some cases \r\n2) separate files in a different folder. I'd encourage to put files under `test/` but they don't have to be in the root folder. How about we put it under `test/onnx` or something? It feel quite reasonable to me - as we add more tests we should probably do the same to others too. If importing `test/common.py` is an issue - can't we just put it under `test/util` or something like that?\r\n\r\nAs Junjie pointed out we should definitely run this tests as part of regular CI for PyTorch. I hope everybody agrees with that."}