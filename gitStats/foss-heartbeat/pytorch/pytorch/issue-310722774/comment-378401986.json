{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/378401986", "html_url": "https://github.com/pytorch/pytorch/pull/6223#issuecomment-378401986", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/6223", "id": 378401986, "node_id": "MDEyOklzc3VlQ29tbWVudDM3ODQwMTk4Ng==", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "created_at": "2018-04-03T21:15:55Z", "updated_at": "2018-04-03T21:15:55Z", "author_association": "MEMBER", "body_html": "<p>So the reason why I asked for this is also motivated by what <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=13564\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ezyang\">@ezyang</a> mentioned. Right now the ONNX code is fairly decoupled with the framework code. When I get an email notifying me about a new PR, and see that it only touches <code>torch/onnx</code>, then I'm pretty sure that I can delete it right away because it's some ONNX-internal change. This is the primary reason why I'd like the ONNX tests to still be slightly separate from the core framework functionality.</p>\n<p>Additionally, they're a ton of code and expects, and are maintained by a different set of people, so that's another argument for keeping it clearly separated.</p>\n<p>I don't think the CI is a big issue. The tests used to be in an entirely separate repo and it worked just fine, so why would it break now?</p>\n<p>Code sharing with <code>common.py</code> isn't too bad. We've had similar issues with ATen and still could work around it. Python has <code>importlib</code> that lets you import code in directories that are normally unreachable by <code>import</code> statements.</p>", "body_text": "So the reason why I asked for this is also motivated by what @ezyang mentioned. Right now the ONNX code is fairly decoupled with the framework code. When I get an email notifying me about a new PR, and see that it only touches torch/onnx, then I'm pretty sure that I can delete it right away because it's some ONNX-internal change. This is the primary reason why I'd like the ONNX tests to still be slightly separate from the core framework functionality.\nAdditionally, they're a ton of code and expects, and are maintained by a different set of people, so that's another argument for keeping it clearly separated.\nI don't think the CI is a big issue. The tests used to be in an entirely separate repo and it worked just fine, so why would it break now?\nCode sharing with common.py isn't too bad. We've had similar issues with ATen and still could work around it. Python has importlib that lets you import code in directories that are normally unreachable by import statements.", "body": "So the reason why I asked for this is also motivated by what @ezyang mentioned. Right now the ONNX code is fairly decoupled with the framework code. When I get an email notifying me about a new PR, and see that it only touches `torch/onnx`, then I'm pretty sure that I can delete it right away because it's some ONNX-internal change. This is the primary reason why I'd like the ONNX tests to still be slightly separate from the core framework functionality.\r\n\r\nAdditionally, they're a ton of code and expects, and are maintained by a different set of people, so that's another argument for keeping it clearly separated.\r\n\r\nI don't think the CI is a big issue. The tests used to be in an entirely separate repo and it worked just fine, so why would it break now?\r\n\r\nCode sharing with `common.py` isn't too bad. We've had similar issues with ATen and still could work around it. Python has `importlib` that lets you import code in directories that are normally unreachable by `import` statements."}