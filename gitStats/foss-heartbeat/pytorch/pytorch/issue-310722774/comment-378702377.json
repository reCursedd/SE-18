{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/378702377", "html_url": "https://github.com/pytorch/pytorch/pull/6223#issuecomment-378702377", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/6223", "id": 378702377, "node_id": "MDEyOklzc3VlQ29tbWVudDM3ODcwMjM3Nw==", "user": {"login": "dzhulgakov", "id": 17890620, "node_id": "MDQ6VXNlcjE3ODkwNjIw", "avatar_url": "https://avatars2.githubusercontent.com/u/17890620?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dzhulgakov", "html_url": "https://github.com/dzhulgakov", "followers_url": "https://api.github.com/users/dzhulgakov/followers", "following_url": "https://api.github.com/users/dzhulgakov/following{/other_user}", "gists_url": "https://api.github.com/users/dzhulgakov/gists{/gist_id}", "starred_url": "https://api.github.com/users/dzhulgakov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dzhulgakov/subscriptions", "organizations_url": "https://api.github.com/users/dzhulgakov/orgs", "repos_url": "https://api.github.com/users/dzhulgakov/repos", "events_url": "https://api.github.com/users/dzhulgakov/events{/privacy}", "received_events_url": "https://api.github.com/users/dzhulgakov/received_events", "type": "User", "site_admin": false}, "created_at": "2018-04-04T18:38:00Z", "updated_at": "2018-04-04T18:38:00Z", "author_association": "MEMBER", "body_html": "<ol>\n<li>Ok, I was just throwing the idea - I haven't actually worked with binary files much</li>\n<li>No proposal yet that I know off - let's discuss it separately.</li>\n</ol>\n<p>I want to ask a bit about \"When I get an email notifying me about a new PR, and see that it only touches torch/onnx, then I'm pretty sure that I can delete it right away because it's some ONNX-internal change. This is the primary reason why I'd like the ONNX tests to still be slightly separate from the core framework functionality.\"</p>\n<p>Doesn't it apply only to code, not the tests? If something triggers changes in expect files - I'd say the author needs to take a look at it regardless of which part she was changing. It's actually a pain point right now with onnx-fb-universe repo: even with cosmetic changes to trace format output the authors usually don't change the expect files in that repo and it requires somebody else to go and fix up / regenerate.</p>\n<p>Thus I see value in <code>test/onnx</code> only from pure code organization purposes, not really any anticipated workflow changes. Does it make sense?</p>", "body_text": "Ok, I was just throwing the idea - I haven't actually worked with binary files much\nNo proposal yet that I know off - let's discuss it separately.\n\nI want to ask a bit about \"When I get an email notifying me about a new PR, and see that it only touches torch/onnx, then I'm pretty sure that I can delete it right away because it's some ONNX-internal change. This is the primary reason why I'd like the ONNX tests to still be slightly separate from the core framework functionality.\"\nDoesn't it apply only to code, not the tests? If something triggers changes in expect files - I'd say the author needs to take a look at it regardless of which part she was changing. It's actually a pain point right now with onnx-fb-universe repo: even with cosmetic changes to trace format output the authors usually don't change the expect files in that repo and it requires somebody else to go and fix up / regenerate.\nThus I see value in test/onnx only from pure code organization purposes, not really any anticipated workflow changes. Does it make sense?", "body": "1. Ok, I was just throwing the idea - I haven't actually worked with binary files much\r\n2. No proposal yet that I know off - let's discuss it separately.\r\n\r\nI want to ask a bit about \"When I get an email notifying me about a new PR, and see that it only touches torch/onnx, then I'm pretty sure that I can delete it right away because it's some ONNX-internal change. This is the primary reason why I'd like the ONNX tests to still be slightly separate from the core framework functionality.\"\r\n\r\nDoesn't it apply only to code, not the tests? If something triggers changes in expect files - I'd say the author needs to take a look at it regardless of which part she was changing. It's actually a pain point right now with onnx-fb-universe repo: even with cosmetic changes to trace format output the authors usually don't change the expect files in that repo and it requires somebody else to go and fix up / regenerate.\r\n\r\nThus I see value in `test/onnx` only from pure code organization purposes, not really any anticipated workflow changes. Does it make sense?"}