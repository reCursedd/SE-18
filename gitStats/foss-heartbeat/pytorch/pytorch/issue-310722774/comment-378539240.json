{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/378539240", "html_url": "https://github.com/pytorch/pytorch/pull/6223#issuecomment-378539240", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/6223", "id": 378539240, "node_id": "MDEyOklzc3VlQ29tbWVudDM3ODUzOTI0MA==", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "created_at": "2018-04-04T09:30:09Z", "updated_at": "2018-04-04T09:31:14Z", "author_association": "MEMBER", "body_html": "<ol>\n<li>I don't see what's the point of having binary expects. They will tell you that <em>something</em> has changed, but you really won't have any ideas what was it. If we're going the smoke test path, then let's do it the smoke test way without leaving any unnecessary artifacts. An extra reason to avoid binary files is that <code>git</code> is terrible at handling them (for a good reason). If we really want to go with keeping the expects that tell you there was a change without telling you what it is, then let's store hashes as expects.</li>\n<li><code>test/onnx</code> sounds reasonable, but it's still a bit dirty I think. Do we have a plan for the desired test directory structure after the repo merge? It would be worth discussing</li>\n<li>I never said ONNX tests shouldn't run on PyTorch PRs, and I think that removing this support would be a huge step back.</li>\n</ol>", "body_text": "I don't see what's the point of having binary expects. They will tell you that something has changed, but you really won't have any ideas what was it. If we're going the smoke test path, then let's do it the smoke test way without leaving any unnecessary artifacts. An extra reason to avoid binary files is that git is terrible at handling them (for a good reason). If we really want to go with keeping the expects that tell you there was a change without telling you what it is, then let's store hashes as expects.\ntest/onnx sounds reasonable, but it's still a bit dirty I think. Do we have a plan for the desired test directory structure after the repo merge? It would be worth discussing\nI never said ONNX tests shouldn't run on PyTorch PRs, and I think that removing this support would be a huge step back.", "body": "1. I don't see what's the point of having binary expects. They will tell you that *something* has changed, but you really won't have any ideas what was it. If we're going the smoke test path, then let's do it the smoke test way without leaving any unnecessary artifacts. An extra reason to avoid binary files is that `git` is terrible at handling them (for a good reason). If we really want to go with keeping the expects that tell you there was a change without telling you what it is, then let's store hashes as expects.\r\n2. `test/onnx` sounds reasonable, but it's still a bit dirty I think. Do we have a plan for the desired test directory structure after the repo merge? It would be worth discussing\r\n3. I never said ONNX tests shouldn't run on PyTorch PRs, and I think that removing this support would be a huge step back."}