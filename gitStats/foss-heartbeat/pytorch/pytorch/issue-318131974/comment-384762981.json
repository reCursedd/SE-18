{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/384762981", "html_url": "https://github.com/pytorch/pytorch/issues/7002#issuecomment-384762981", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/7002", "id": 384762981, "node_id": "MDEyOklzc3VlQ29tbWVudDM4NDc2Mjk4MQ==", "user": {"login": "zou3519", "id": 5652049, "node_id": "MDQ6VXNlcjU2NTIwNDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/5652049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zou3519", "html_url": "https://github.com/zou3519", "followers_url": "https://api.github.com/users/zou3519/followers", "following_url": "https://api.github.com/users/zou3519/following{/other_user}", "gists_url": "https://api.github.com/users/zou3519/gists{/gist_id}", "starred_url": "https://api.github.com/users/zou3519/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zou3519/subscriptions", "organizations_url": "https://api.github.com/users/zou3519/orgs", "repos_url": "https://api.github.com/users/zou3519/repos", "events_url": "https://api.github.com/users/zou3519/events{/privacy}", "received_events_url": "https://api.github.com/users/zou3519/received_events", "type": "User", "site_admin": false}, "created_at": "2018-04-26T19:30:59Z", "updated_at": "2018-04-26T19:31:19Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Our users might rely on the edge case that the gradient does not exist. At any rate, you can define a custom autograd function in Python that has its own forward and backward. The forward can use clamp, while the backward should look something like:</p>\n<pre><code>grad_output * (input &gt;= min).type_as(grad_output) * (input &lt;= max).type_as(grad_output)\n</code></pre>\n<p>and then use it in place of <code>clamp</code>.</p>", "body_text": "Our users might rely on the edge case that the gradient does not exist. At any rate, you can define a custom autograd function in Python that has its own forward and backward. The forward can use clamp, while the backward should look something like:\ngrad_output * (input >= min).type_as(grad_output) * (input <= max).type_as(grad_output)\n\nand then use it in place of clamp.", "body": "Our users might rely on the edge case that the gradient does not exist. At any rate, you can define a custom autograd function in Python that has its own forward and backward. The forward can use clamp, while the backward should look something like:\r\n\r\n```\r\ngrad_output * (input >= min).type_as(grad_output) * (input <= max).type_as(grad_output)\r\n```\r\n\r\nand then use it in place of `clamp`."}