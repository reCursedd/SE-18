{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/234415643", "pull_request_review_id": 176061353, "id": 234415643, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzNDQxNTY0Mw==", "diff_hunk": "@@ -0,0 +1,105 @@\n+#pragma once\n+\n+#include <assert.h>\n+#include <stdint.h>\n+#include <stdexcept>\n+#include <string>\n+#include <utility>\n+\n+#include <c10/macros/Macros.h>\n+#include <c10/core/ScalarType.h>\n+#include <c10/Half.h>\n+\n+namespace at {\n+class Tensor;\n+}\n+\n+namespace c10 {\n+\n+class C10_API Scalar {", "path": "c10/core/Scalar.h", "position": 19, "original_position": 19, "commit_id": "71eeab644d0e7509ed409f31683ec3dfadf57e3a", "original_commit_id": "f264d6fbb034f8e0112d3337deeb7538c67788c5", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "Yes. Maybe something like:\r\n\r\nScalar represents a 0-dimensional tensor which contains a single element. Unlike a tensor, numeric literals (in C++) are implicitly convertible to Scalar (which is why, for example, we provide both `add(Tensor)` and `add(Scalar)` overloads for many operations). It may also be used in circumstances where you statically know a tensor is 0-dim and single size, but don't know it's type.", "created_at": "2018-11-17T17:36:52Z", "updated_at": "2018-11-23T15:55:07Z", "html_url": "https://github.com/pytorch/pytorch/pull/14022#discussion_r234415643", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/14022", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/234415643"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/14022#discussion_r234415643"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/14022"}}, "body_html": "<p>Yes. Maybe something like:</p>\n<p>Scalar represents a 0-dimensional tensor which contains a single element. Unlike a tensor, numeric literals (in C++) are implicitly convertible to Scalar (which is why, for example, we provide both <code>add(Tensor)</code> and <code>add(Scalar)</code> overloads for many operations). It may also be used in circumstances where you statically know a tensor is 0-dim and single size, but don't know it's type.</p>", "body_text": "Yes. Maybe something like:\nScalar represents a 0-dimensional tensor which contains a single element. Unlike a tensor, numeric literals (in C++) are implicitly convertible to Scalar (which is why, for example, we provide both add(Tensor) and add(Scalar) overloads for many operations). It may also be used in circumstances where you statically know a tensor is 0-dim and single size, but don't know it's type.", "in_reply_to_id": 234109778}