{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/403274220", "html_url": "https://github.com/pytorch/pytorch/pull/9237#issuecomment-403274220", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/9237", "id": 403274220, "node_id": "MDEyOklzc3VlQ29tbWVudDQwMzI3NDIyMA==", "user": {"login": "floatn", "id": 907510, "node_id": "MDQ6VXNlcjkwNzUxMA==", "avatar_url": "https://avatars2.githubusercontent.com/u/907510?v=4", "gravatar_id": "", "url": "https://api.github.com/users/floatn", "html_url": "https://github.com/floatn", "followers_url": "https://api.github.com/users/floatn/followers", "following_url": "https://api.github.com/users/floatn/following{/other_user}", "gists_url": "https://api.github.com/users/floatn/gists{/gist_id}", "starred_url": "https://api.github.com/users/floatn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/floatn/subscriptions", "organizations_url": "https://api.github.com/users/floatn/orgs", "repos_url": "https://api.github.com/users/floatn/repos", "events_url": "https://api.github.com/users/floatn/events{/privacy}", "received_events_url": "https://api.github.com/users/floatn/received_events", "type": "User", "site_admin": false}, "created_at": "2018-07-08T09:16:02Z", "updated_at": "2018-07-08T09:42:46Z", "author_association": "NONE", "body_html": "<p>Here's actually a slightly deep problem.<br>\nPython recommends an int or a slice object as an argument for <strong>getitem</strong> method. <a href=\"url\"></a><a href=\"https://docs.python.org/3/reference/datamodel.html#object.__getitem\" rel=\"nofollow\">https://docs.python.org/3/reference/datamodel.html#object.__getitem</a>__<br>\n<a href=\"url\">https://docs.python.org/3.4/glossary.html#term-slice</a><br>\nA torch.tensor is not an int object but it can be a slice object. To be a slice object it has to have <strong>getitem</strong> and <strong>len</strong> methods.<br>\nHere, tn2 is a tensor which is a slice object:</p>\n<blockquote>\n<p>---tn2 = torch.tensor([1, 2])<br>\n---tn2.__getitem__(0)<br>\ntensor(1)<br>\n---tn2.__len__()<br>\n2</p>\n</blockquote>\n<p>Here, tn1 is a tensor which is, kind of, not a slice object, and PyTorch (not Pandas) try to use it as an argument for <strong>getitem</strong>:</p>\n<blockquote>\n<p>---tn2 = torch.tensor([1, 2])<br>\n---tn1 = tn2[0]<br>\n---tn1<br>\ntensor(1)<br>\n---tn1.__getitem__(0)<br>\ntensor(1)<br>\n---tn1.__len__()<br>\nTraceback (most recent call last):<br>\nFile \"\", line 1, in <br>\nFile \"/usr/lib/python3.6/site-packages/torch/tensor.py\", line 349, in __len__<br>\nraise TypeError(\"len() of a 0-d tensor\")<br>\nTypeError: len() of a 0-d tensor</p>\n</blockquote>\n<p>Error output for a '0-d tensor' (a common case for an index) makes this class's instances unfavorable as a <strong>getitem</strong> argument.<br>\nMaybe this requires fixing of the torch.tensor class?</p>", "body_text": "Here's actually a slightly deep problem.\nPython recommends an int or a slice object as an argument for getitem method. https://docs.python.org/3/reference/datamodel.html#object.__getitem__\nhttps://docs.python.org/3.4/glossary.html#term-slice\nA torch.tensor is not an int object but it can be a slice object. To be a slice object it has to have getitem and len methods.\nHere, tn2 is a tensor which is a slice object:\n\n---tn2 = torch.tensor([1, 2])\n---tn2.__getitem__(0)\ntensor(1)\n---tn2.__len__()\n2\n\nHere, tn1 is a tensor which is, kind of, not a slice object, and PyTorch (not Pandas) try to use it as an argument for getitem:\n\n---tn2 = torch.tensor([1, 2])\n---tn1 = tn2[0]\n---tn1\ntensor(1)\n---tn1.__getitem__(0)\ntensor(1)\n---tn1.__len__()\nTraceback (most recent call last):\nFile \"\", line 1, in \nFile \"/usr/lib/python3.6/site-packages/torch/tensor.py\", line 349, in __len__\nraise TypeError(\"len() of a 0-d tensor\")\nTypeError: len() of a 0-d tensor\n\nError output for a '0-d tensor' (a common case for an index) makes this class's instances unfavorable as a getitem argument.\nMaybe this requires fixing of the torch.tensor class?", "body": "Here's actually a slightly deep problem.\r\nPython recommends an int or a slice object as an argument for __getitem__ method. [](url)https://docs.python.org/3/reference/datamodel.html#object.__getitem__\r\n[https://docs.python.org/3.4/glossary.html#term-slice](url)\r\nA torch.tensor is not an int object but it can be a slice object. To be a slice object it has to have __getitem__ and __len__ methods.\r\nHere, tn2 is a tensor which is a slice object:\r\n> ---tn2 = torch.tensor([1, 2])\r\n> ---tn2.\\_\\_getitem__(0)\r\n>tensor(1)\r\n> ---tn2.\\_\\_len__()\r\n>2 \r\n \r\nHere, tn1 is a tensor which is, kind of, not a slice object, and PyTorch (not Pandas) try to use it as an argument for __getitem__:\r\n> ---tn2 = torch.tensor([1, 2])\r\n> ---tn1 = tn2[0]\r\n> ---tn1\r\ntensor(1)\r\n> ---tn1.\\_\\_getitem__(0)\r\ntensor(1)\r\n> ---tn1.\\_\\_len__()\r\n>Traceback (most recent call last):\r\n > File \"<stdin>\", line 1, in <module>\r\n > File \"/usr/lib/python3.6/site-packages/torch/tensor.py\", line 349, in \\_\\_len__\r\n  >  raise TypeError(\"len() of a 0-d tensor\")\r\n>TypeError: len() of a 0-d tensor\r\n\r\nError output for a '0-d tensor' (a common case for an index) makes this class's instances unfavorable as a __getitem__ argument.\r\nMaybe this requires fixing of the torch.tensor class?"}