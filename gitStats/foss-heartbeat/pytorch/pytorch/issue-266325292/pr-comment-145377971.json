{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/145377971", "pull_request_review_id": 70167383, "id": 145377971, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0NTM3Nzk3MQ==", "diff_hunk": "@@ -1361,100 +1351,60 @@ def backward(self, grad_output):\n         y.sum().backward()\n         self.assertEqual(x.grad.data, x.data.clone().fill_(1))\n \n-    def test_reinforce_check(self):\n-        x = Variable(torch.randn(5, 5), requires_grad=True)\n+    def test_reinforce_bernoulli(self):\n+        p = Variable(torch.Tensor([0.7, 0.2, 0.4]), requires_grad=True)\n+        s, logpmf = torch.reinforce.bernoulli(p)\n+        self.assertEqual(s.size(), logpmf.size())\n \n-        # these should be ok\n-        y = torch.normal(x)\n-        y.reinforce(torch.randn(5, 5))\n-        y = torch.normal(x)\n-        y.reinforce(2)\n-\n-        # can't call reinforce on non-stochastic variables\n-        self.assertRaises(RuntimeError, lambda: x.reinforce(2))\n-\n-        # can't call reinforce twice\n-        y = torch.normal(x)\n-        y.reinforce(2)\n-        self.assertRaises(RuntimeError, lambda: y.reinforce(2))\n-\n-        # check type of reward\n-        y = torch.normal(x)\n-        self.assertRaises(TypeError, lambda: y.reinforce(torch.randn(5, 5).long()))\n-\n-        # check size of reward\n-        y = torch.normal(x)\n-        self.assertRaises(ValueError, lambda: y.reinforce(torch.randn(4, 5)))\n-\n-    def test_stochastic(self):\n-        x = Variable(torch.rand(2, 10), requires_grad=True)\n-        stddevs = Variable(torch.rand(2, 10) * 5, requires_grad=True)\n-        y = (x * 2).clamp(0, 1)\n-        y = y / y.sum(1, True).expand_as(y)\n-        samples_multi = y.multinomial(5)\n-        samples_multi_flat = y[0].multinomial(5)\n-        samples_bernoulli = y.bernoulli()\n-        samples_norm = torch.normal(y)\n-        samples_norm_std = torch.normal(y, stddevs)\n-        z = samples_multi * 2 + 4\n-        z = z + samples_multi_flat.unsqueeze(0).expand_as(samples_multi)\n-        z = torch.cat([z, z], 1)\n-        z = z.double()\n-        z = z + samples_bernoulli + samples_norm + samples_norm_std\n-        last_sample = torch.normal(z, 4)\n-        z = last_sample + 2\n-        self.assertFalse(z.requires_grad)\n+        self.assertEqual(logpmf.data[0], math.log(0.7 if s.data[0] == 1 else 0.3))", "path": "test/test_autograd.py", "position": 68, "original_position": 68, "commit_id": "62f13a8139a6c201c87bfa0d86dad66d2da9886e", "original_commit_id": "62f13a8139a6c201c87bfa0d86dad66d2da9886e", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "maybe just write it out as\r\n```python\r\nfor val, logp, p  in zip(s.data, logpmf.data, p.data):\r\n    self.assertEqual(logp, math.log(p if val else 1-p))\r\n```", "created_at": "2017-10-18T10:46:13Z", "updated_at": "2018-11-23T15:35:23Z", "html_url": "https://github.com/pytorch/pytorch/pull/3157#discussion_r145377971", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/3157", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/145377971"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/3157#discussion_r145377971"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/3157"}}, "body_html": "<p>maybe just write it out as</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">for</span> val, logp, p  <span class=\"pl-k\">in</span> <span class=\"pl-c1\">zip</span>(s.data, logpmf.data, p.data):\n    <span class=\"pl-c1\">self</span>.assertEqual(logp, math.log(p <span class=\"pl-k\">if</span> val <span class=\"pl-k\">else</span> <span class=\"pl-c1\">1</span><span class=\"pl-k\">-</span>p))</pre></div>", "body_text": "maybe just write it out as\nfor val, logp, p  in zip(s.data, logpmf.data, p.data):\n    self.assertEqual(logp, math.log(p if val else 1-p))"}