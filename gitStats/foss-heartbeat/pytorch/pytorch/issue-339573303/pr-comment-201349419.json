{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/201349419", "pull_request_review_id": 135832346, "id": 201349419, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTM0OTQxOQ==", "diff_hunk": "@@ -3,14 +3,127 @@\n #include <memory>\n #include <stddef.h>\n \n-#include \"ATen/Retainable.h\"\n+#include <ATen/Error.h>\n+#include <ATen/Retainable.h>\n \n namespace at {\n \n+// Note [Separated Allocator and Deleter]\n+// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+// Why are Allocator and Deleter put in separate classes?  The key is that\n+// an allocator may allocate a distinct context for every deleter.  This is\n+// especially important upon reallocation: if we do not allocate a new\n+// context, the contexts of the new and old data can clobber each other.\n+// Imagine the following sequence of events:\n+//\n+//  1. Storage has some data and a BoundAllocatorDeleter associated with it.\n+//     The context in this case is an owning reference to \"IOBuf\", an\n+//     enclosing struct for the data.\n+//\n+//  2. A resize occurs on storage.  We call BoundAllocatorDeleter to\n+//     allocate some new memory to store the resized data.  To allocate\n+//     this new memory, we must allocate a new IOBuf.  But how can\n+//     we update the context to replace the old reference with\n+//     the new one?  Disaster!\n+//\n+// Previously, this case was worked around by directly supporting realloc()\n+// in the deleter.  But this is bad for different reasons (it assumes the\n+// allocator knows how to copy data; not a safe assumption, since allocators\n+// don't know what data is actually contained within them.)\n+\n+struct Deleter {\n+  virtual ~Deleter() {}\n+  virtual void deallocate(void* ctx, void* ptr) const = 0;\n+};\n+\n+// WARNING: BoundDeleter may LEAK ctx_ if you never actually call it on\n+// the pointer it's supposed to delete; e.g., ctx_'s lifetime may be the", "path": "aten/src/ATen/Allocator.h", "position": null, "original_position": 39, "commit_id": "82d33a23e34e8469313d1631b7321f5d6689e33c", "original_commit_id": "bacf81e562e26a31cbbb5e8f45624d0ab3adbd48", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "Here's the rewrite:\r\n\r\n```\r\n// WARNING: A common pattern when writing BoundDeleter is to set things\r\n// up so that the lifetime of ctx_ is the same as pointer.  In this case,\r\n// you will LEAK ctx_ if you never actually call it on the pointer it's\r\n// supposed to delete.  Use the deleter that comes with a pointer to\r\n// deallocate it; don't do it some out-of-band way!\r\n```", "created_at": "2018-07-10T13:50:07Z", "updated_at": "2018-11-23T15:47:04Z", "html_url": "https://github.com/pytorch/pytorch/pull/9278#discussion_r201349419", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/9278", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/201349419"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/9278#discussion_r201349419"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/9278"}}, "body_html": "<p>Here's the rewrite:</p>\n<pre><code>// WARNING: A common pattern when writing BoundDeleter is to set things\n// up so that the lifetime of ctx_ is the same as pointer.  In this case,\n// you will LEAK ctx_ if you never actually call it on the pointer it's\n// supposed to delete.  Use the deleter that comes with a pointer to\n// deallocate it; don't do it some out-of-band way!\n</code></pre>", "body_text": "Here's the rewrite:\n// WARNING: A common pattern when writing BoundDeleter is to set things\n// up so that the lifetime of ctx_ is the same as pointer.  In this case,\n// you will LEAK ctx_ if you never actually call it on the pointer it's\n// supposed to delete.  Use the deleter that comes with a pointer to\n// deallocate it; don't do it some out-of-band way!", "in_reply_to_id": 201171310}