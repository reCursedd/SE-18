{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/201168722", "pull_request_review_id": 135617792, "id": 201168722, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTE2ODcyMg==", "diff_hunk": "@@ -3,14 +3,127 @@\n #include <memory>\n #include <stddef.h>\n \n-#include \"ATen/Retainable.h\"\n+#include <ATen/Error.h>\n+#include <ATen/Retainable.h>\n \n namespace at {\n \n+// Note [Separated Allocator and Deleter]\n+// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+// Why are Allocator and Deleter put in separate classes?  The key is that\n+// an allocator may allocate a distinct context for every deleter.  This is\n+// especially important upon reallocation: if we do not allocate a new\n+// context, the contexts of the new and old data can clobber each other.\n+// Imagine the following sequence of events:\n+//\n+//  1. Storage has some data and a BoundAllocatorDeleter associated with it.\n+//     The context in this case is an owning reference to \"IOBuf\", an\n+//     enclosing struct for the data.\n+//\n+//  2. A resize occurs on storage.  We call BoundAllocatorDeleter to", "path": "aten/src/ATen/Allocator.h", "position": null, "original_position": 22, "commit_id": "82d33a23e34e8469313d1631b7321f5d6689e33c", "original_commit_id": "bacf81e562e26a31cbbb5e8f45624d0ab3adbd48", "user": {"login": "gchanan", "id": 3768583, "node_id": "MDQ6VXNlcjM3Njg1ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3768583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gchanan", "html_url": "https://github.com/gchanan", "followers_url": "https://api.github.com/users/gchanan/followers", "following_url": "https://api.github.com/users/gchanan/following{/other_user}", "gists_url": "https://api.github.com/users/gchanan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gchanan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gchanan/subscriptions", "organizations_url": "https://api.github.com/users/gchanan/orgs", "repos_url": "https://api.github.com/users/gchanan/repos", "events_url": "https://api.github.com/users/gchanan/events{/privacy}", "received_events_url": "https://api.github.com/users/gchanan/received_events", "type": "User", "site_admin": false}, "body": "Maybe I'm confused by the name here -- but why is BoundAllocatorDeleter allocating memory?  I assume it deletes a bound allocator, and thus shouldn't be allocating, but maybe I'm parsing this incorrectly.", "created_at": "2018-07-09T22:37:30Z", "updated_at": "2018-11-23T15:47:02Z", "html_url": "https://github.com/pytorch/pytorch/pull/9278#discussion_r201168722", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/9278", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/201168722"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/9278#discussion_r201168722"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/9278"}}, "body_html": "<p>Maybe I'm confused by the name here -- but why is BoundAllocatorDeleter allocating memory?  I assume it deletes a bound allocator, and thus shouldn't be allocating, but maybe I'm parsing this incorrectly.</p>", "body_text": "Maybe I'm confused by the name here -- but why is BoundAllocatorDeleter allocating memory?  I assume it deletes a bound allocator, and thus shouldn't be allocating, but maybe I'm parsing this incorrectly."}