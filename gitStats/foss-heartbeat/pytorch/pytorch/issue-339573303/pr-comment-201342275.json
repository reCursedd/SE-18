{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/201342275", "pull_request_review_id": 135823473, "id": 201342275, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTM0MjI3NQ==", "diff_hunk": "@@ -3,14 +3,127 @@\n #include <memory>\n #include <stddef.h>\n \n-#include \"ATen/Retainable.h\"\n+#include <ATen/Error.h>\n+#include <ATen/Retainable.h>\n \n namespace at {\n \n+// Note [Separated Allocator and Deleter]\n+// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+// Why are Allocator and Deleter put in separate classes?  The key is that\n+// an allocator may allocate a distinct context for every deleter.  This is\n+// especially important upon reallocation: if we do not allocate a new\n+// context, the contexts of the new and old data can clobber each other.\n+// Imagine the following sequence of events:\n+//\n+//  1. Storage has some data and a BoundAllocatorDeleter associated with it.\n+//     The context in this case is an owning reference to \"IOBuf\", an\n+//     enclosing struct for the data.\n+//\n+//  2. A resize occurs on storage.  We call BoundAllocatorDeleter to", "path": "aten/src/ATen/Allocator.h", "position": null, "original_position": 22, "commit_id": "82d33a23e34e8469313d1631b7321f5d6689e33c", "original_commit_id": "bacf81e562e26a31cbbb5e8f45624d0ab3adbd48", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "Yeah, the name is confusing. BoundAllocatorDeleter looks like this:\r\n\r\n```\r\nstruct BoundAllocatorDeleter {\r\n  void* ctx_;\r\n  Allocator* allocator_;\r\n  Deleter* deleter_;\r\n}\r\n```\r\n\r\nPretty similar to what THAllocator is, if Allocator is a `void*(size_t)` funptr and Deleter is a `void(void*)`, just with realloc dropped. I'll put this in.", "created_at": "2018-07-10T13:30:47Z", "updated_at": "2018-11-23T15:47:04Z", "html_url": "https://github.com/pytorch/pytorch/pull/9278#discussion_r201342275", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/9278", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/201342275"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/9278#discussion_r201342275"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/9278"}}, "body_html": "<p>Yeah, the name is confusing. BoundAllocatorDeleter looks like this:</p>\n<pre><code>struct BoundAllocatorDeleter {\n  void* ctx_;\n  Allocator* allocator_;\n  Deleter* deleter_;\n}\n</code></pre>\n<p>Pretty similar to what THAllocator is, if Allocator is a <code>void*(size_t)</code> funptr and Deleter is a <code>void(void*)</code>, just with realloc dropped. I'll put this in.</p>", "body_text": "Yeah, the name is confusing. BoundAllocatorDeleter looks like this:\nstruct BoundAllocatorDeleter {\n  void* ctx_;\n  Allocator* allocator_;\n  Deleter* deleter_;\n}\n\nPretty similar to what THAllocator is, if Allocator is a void*(size_t) funptr and Deleter is a void(void*), just with realloc dropped. I'll put this in.", "in_reply_to_id": 201168722}