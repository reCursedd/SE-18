{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/201348484", "pull_request_review_id": 135831291, "id": 201348484, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTM0ODQ4NA==", "diff_hunk": "@@ -3,14 +3,127 @@\n #include <memory>\n #include <stddef.h>\n \n-#include \"ATen/Retainable.h\"\n+#include <ATen/Error.h>\n+#include <ATen/Retainable.h>\n \n namespace at {\n \n+// Note [Separated Allocator and Deleter]\n+// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+// Why are Allocator and Deleter put in separate classes?  The key is that\n+// an allocator may allocate a distinct context for every deleter.  This is", "path": "aten/src/ATen/Allocator.h", "position": null, "original_position": 13, "commit_id": "82d33a23e34e8469313d1631b7321f5d6689e33c", "original_commit_id": "bacf81e562e26a31cbbb5e8f45624d0ab3adbd48", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "Here's how I rewrote the comment:\r\n\r\n```\r\n// Note [Separated Allocator and Deleter]\r\n// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n// A Deleter knows how to delete a void* pointer, freeing it back to the\r\n// system.  Every storage needs a deleter, so that we know how to free\r\n// the memory.\r\n//\r\n// An Allocator, given a size, knows how to allocate memory of that size.\r\n// Generally, you don't care too much about how a given piece of memory\r\n// is allocated, but if you need to *reallocate* some memory, it's good\r\n// to know how to reallocate something \"in the same way\", and that means\r\n// you have to know what the allocator is.\r\n//\r\n// Below, Allocator and Deleter are split into two separate classes.  You\r\n// might wonder, why is that?  In the common case, an allocator is in\r\n// one-to-one correspondence with a deleter, in the same way malloc() is\r\n// paired with free().\r\n//\r\n// However, there is a major exception to this case: when we write\r\n// Allocators/Deleters for \"externally\" managed memory.  In this case,\r\n// we may need an extra, externally provided pointer to some enclosing\r\n// struct if we want to free this memory, and this pointer is *different* for\r\n// every allocated void* pointer.\r\n//\r\n// To see what can go wrong, let's suppose that we had put Allocator and Deleter\r\n// together with the context, in a single \"Allocator\" class:\r\n//\r\n//    struct Allocator {\r\n//        void* ctx_;\r\n//        Allocator* allocator_;\r\n//        Deleter* deleter_;\r\n//    }\r\n//\r\n// Here, ctx_ stores the pointer to the enclosing struct.  Imagine the following\r\n// sequence of events:\r\n//\r\n//  1. Storage has some data and a Allocator associated with it.\r\n//     The context in the Allocator is an owning reference to \"IOBuf\", an\r\n//     enclosing struct for the data; the function to free an IOBuf\r\n//     is freeIOBuf(IOBuf*), NOT freeIOBuf(void*).\r\n//\r\n//  2. A resize occurs on storage.  We call Allocator to\r\n//     allocate some new memory to store the resized data.  To allocate\r\n//     this new memory, we must allocate a new IOBuf.  Now we have a\r\n//     problem: the classic API for an allocator is void*(void* ctx, size_t size).\r\n//     Where are we going to put the freshly allocated IOBuf?  We can't write it\r\n//     into the context directly, because that will clobber the old\r\n//     IOBuf (which we need to keep live until we copy the data out.)\r\n//\r\n// Instead, the allocator should *return* a new context for the deleter,\r\n// and this is what we have done below.  (We have further simplified matters\r\n// by saying that an allocator never has a context; we haven't seen any cases\r\n// where this is necessary, but it is a possible future extension).\r\n//\r\n// By the way, previously, this case was worked around by directly supporting\r\n// realloc() in the deleter.  But this is bad for different reasons (it assumes\r\n// the allocator knows how to copy data; not a safe assumption, since allocators\r\n// don't know what data is actually contained within them.)\r\n```", "created_at": "2018-07-10T13:47:58Z", "updated_at": "2018-11-23T15:47:04Z", "html_url": "https://github.com/pytorch/pytorch/pull/9278#discussion_r201348484", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/9278", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/201348484"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/9278#discussion_r201348484"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/9278"}}, "body_html": "<p>Here's how I rewrote the comment:</p>\n<pre><code>// Note [Separated Allocator and Deleter]\n// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n// A Deleter knows how to delete a void* pointer, freeing it back to the\n// system.  Every storage needs a deleter, so that we know how to free\n// the memory.\n//\n// An Allocator, given a size, knows how to allocate memory of that size.\n// Generally, you don't care too much about how a given piece of memory\n// is allocated, but if you need to *reallocate* some memory, it's good\n// to know how to reallocate something \"in the same way\", and that means\n// you have to know what the allocator is.\n//\n// Below, Allocator and Deleter are split into two separate classes.  You\n// might wonder, why is that?  In the common case, an allocator is in\n// one-to-one correspondence with a deleter, in the same way malloc() is\n// paired with free().\n//\n// However, there is a major exception to this case: when we write\n// Allocators/Deleters for \"externally\" managed memory.  In this case,\n// we may need an extra, externally provided pointer to some enclosing\n// struct if we want to free this memory, and this pointer is *different* for\n// every allocated void* pointer.\n//\n// To see what can go wrong, let's suppose that we had put Allocator and Deleter\n// together with the context, in a single \"Allocator\" class:\n//\n//    struct Allocator {\n//        void* ctx_;\n//        Allocator* allocator_;\n//        Deleter* deleter_;\n//    }\n//\n// Here, ctx_ stores the pointer to the enclosing struct.  Imagine the following\n// sequence of events:\n//\n//  1. Storage has some data and a Allocator associated with it.\n//     The context in the Allocator is an owning reference to \"IOBuf\", an\n//     enclosing struct for the data; the function to free an IOBuf\n//     is freeIOBuf(IOBuf*), NOT freeIOBuf(void*).\n//\n//  2. A resize occurs on storage.  We call Allocator to\n//     allocate some new memory to store the resized data.  To allocate\n//     this new memory, we must allocate a new IOBuf.  Now we have a\n//     problem: the classic API for an allocator is void*(void* ctx, size_t size).\n//     Where are we going to put the freshly allocated IOBuf?  We can't write it\n//     into the context directly, because that will clobber the old\n//     IOBuf (which we need to keep live until we copy the data out.)\n//\n// Instead, the allocator should *return* a new context for the deleter,\n// and this is what we have done below.  (We have further simplified matters\n// by saying that an allocator never has a context; we haven't seen any cases\n// where this is necessary, but it is a possible future extension).\n//\n// By the way, previously, this case was worked around by directly supporting\n// realloc() in the deleter.  But this is bad for different reasons (it assumes\n// the allocator knows how to copy data; not a safe assumption, since allocators\n// don't know what data is actually contained within them.)\n</code></pre>", "body_text": "Here's how I rewrote the comment:\n// Note [Separated Allocator and Deleter]\n// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n// A Deleter knows how to delete a void* pointer, freeing it back to the\n// system.  Every storage needs a deleter, so that we know how to free\n// the memory.\n//\n// An Allocator, given a size, knows how to allocate memory of that size.\n// Generally, you don't care too much about how a given piece of memory\n// is allocated, but if you need to *reallocate* some memory, it's good\n// to know how to reallocate something \"in the same way\", and that means\n// you have to know what the allocator is.\n//\n// Below, Allocator and Deleter are split into two separate classes.  You\n// might wonder, why is that?  In the common case, an allocator is in\n// one-to-one correspondence with a deleter, in the same way malloc() is\n// paired with free().\n//\n// However, there is a major exception to this case: when we write\n// Allocators/Deleters for \"externally\" managed memory.  In this case,\n// we may need an extra, externally provided pointer to some enclosing\n// struct if we want to free this memory, and this pointer is *different* for\n// every allocated void* pointer.\n//\n// To see what can go wrong, let's suppose that we had put Allocator and Deleter\n// together with the context, in a single \"Allocator\" class:\n//\n//    struct Allocator {\n//        void* ctx_;\n//        Allocator* allocator_;\n//        Deleter* deleter_;\n//    }\n//\n// Here, ctx_ stores the pointer to the enclosing struct.  Imagine the following\n// sequence of events:\n//\n//  1. Storage has some data and a Allocator associated with it.\n//     The context in the Allocator is an owning reference to \"IOBuf\", an\n//     enclosing struct for the data; the function to free an IOBuf\n//     is freeIOBuf(IOBuf*), NOT freeIOBuf(void*).\n//\n//  2. A resize occurs on storage.  We call Allocator to\n//     allocate some new memory to store the resized data.  To allocate\n//     this new memory, we must allocate a new IOBuf.  Now we have a\n//     problem: the classic API for an allocator is void*(void* ctx, size_t size).\n//     Where are we going to put the freshly allocated IOBuf?  We can't write it\n//     into the context directly, because that will clobber the old\n//     IOBuf (which we need to keep live until we copy the data out.)\n//\n// Instead, the allocator should *return* a new context for the deleter,\n// and this is what we have done below.  (We have further simplified matters\n// by saying that an allocator never has a context; we haven't seen any cases\n// where this is necessary, but it is a possible future extension).\n//\n// By the way, previously, this case was worked around by directly supporting\n// realloc() in the deleter.  But this is bad for different reasons (it assumes\n// the allocator knows how to copy data; not a safe assumption, since allocators\n// don't know what data is actually contained within them.)", "in_reply_to_id": 201168974}