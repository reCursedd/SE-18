{"url": "https://api.github.com/repos/pytorch/pytorch/issues/9413", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/9413/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/9413/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/9413/events", "html_url": "https://github.com/pytorch/pytorch/issues/9413", "id": 340856273, "node_id": "MDU6SXNzdWUzNDA4NTYyNzM=", "number": 9413, "title": "[feature request] add `torch.find` to find the indices of values", "user": {"login": "zasdfgbnm", "id": 1032377, "node_id": "MDQ6VXNlcjEwMzIzNzc=", "avatar_url": "https://avatars2.githubusercontent.com/u/1032377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zasdfgbnm", "html_url": "https://github.com/zasdfgbnm", "followers_url": "https://api.github.com/users/zasdfgbnm/followers", "following_url": "https://api.github.com/users/zasdfgbnm/following{/other_user}", "gists_url": "https://api.github.com/users/zasdfgbnm/gists{/gist_id}", "starred_url": "https://api.github.com/users/zasdfgbnm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zasdfgbnm/subscriptions", "organizations_url": "https://api.github.com/users/zasdfgbnm/orgs", "repos_url": "https://api.github.com/users/zasdfgbnm/repos", "events_url": "https://api.github.com/users/zasdfgbnm/events{/privacy}", "received_events_url": "https://api.github.com/users/zasdfgbnm/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2018-07-13T02:07:20Z", "updated_at": "2018-07-19T06:18:26Z", "closed_at": null, "author_association": "CONTRIBUTOR", "body_html": "<p>I'm suggesting to add the following operator to pytorch:</p>\n<div class=\"highlight highlight-source-python\"><pre>result <span class=\"pl-k\">=</span> torch.find(tensor, from_)</pre></div>\n<p>This operator outputs a long tensor of the same shape as the argument <code>tensor</code>, where the <code>result[i,j,..]</code> is the first index at vector <code>from_</code> whose value is the same as <code>tensor[i,j,..]</code>.</p>\n<p>For example:</p>\n<div class=\"highlight highlight-source-python\"><pre>a <span class=\"pl-k\">=</span> torch.tensor([<span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">10</span>, <span class=\"pl-c1\">20</span>, <span class=\"pl-c1\">30</span>])\nb <span class=\"pl-k\">=</span> torch.tensor([[ <span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">30</span>, <span class=\"pl-c1\">5</span>],\n                  [<span class=\"pl-c1\">20</span>,  <span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">0</span>]])\ntorch.find(b, a)</pre></div>\n<p>should give</p>\n<div class=\"highlight highlight-source-python\"><pre>tensor([[ <span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">3</span>,<span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>],\n        [ <span class=\"pl-c1\">2</span>,<span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">0</span>]])</pre></div>\n<p>If the pytorch team can confirm that this feature is helpful to add to pytorch, I will do the job of implementing it in ATen.</p>", "body_text": "I'm suggesting to add the following operator to pytorch:\nresult = torch.find(tensor, from_)\nThis operator outputs a long tensor of the same shape as the argument tensor, where the result[i,j,..] is the first index at vector from_ whose value is the same as tensor[i,j,..].\nFor example:\na = torch.tensor([0, 10, 20, 30])\nb = torch.tensor([[ 0, 30, 5],\n                  [20,  1, 0]])\ntorch.find(b, a)\nshould give\ntensor([[ 0, 3,-1],\n        [ 2,-1, 0]])\nIf the pytorch team can confirm that this feature is helpful to add to pytorch, I will do the job of implementing it in ATen.", "body": "I'm suggesting to add the following operator to pytorch:\r\n```python\r\nresult = torch.find(tensor, from_)\r\n```\r\nThis operator outputs a long tensor of the same shape as the argument `tensor`, where the `result[i,j,..]` is the first index at vector `from_` whose value is the same as `tensor[i,j,..]`.\r\n\r\nFor example:\r\n```python\r\na = torch.tensor([0, 10, 20, 30])\r\nb = torch.tensor([[ 0, 30, 5],\r\n                  [20,  1, 0]])\r\ntorch.find(b, a)\r\n```\r\nshould give\r\n```python\r\ntensor([[ 0, 3,-1],\r\n        [ 2,-1, 0]])\r\n```\r\nIf the pytorch team can confirm that this feature is helpful to add to pytorch, I will do the job of implementing it in ATen."}