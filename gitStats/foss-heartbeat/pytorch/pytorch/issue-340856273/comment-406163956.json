{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/406163956", "html_url": "https://github.com/pytorch/pytorch/issues/9413#issuecomment-406163956", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/9413", "id": 406163956, "node_id": "MDEyOklzc3VlQ29tbWVudDQwNjE2Mzk1Ng==", "user": {"login": "zasdfgbnm", "id": 1032377, "node_id": "MDQ6VXNlcjEwMzIzNzc=", "avatar_url": "https://avatars2.githubusercontent.com/u/1032377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zasdfgbnm", "html_url": "https://github.com/zasdfgbnm", "followers_url": "https://api.github.com/users/zasdfgbnm/followers", "following_url": "https://api.github.com/users/zasdfgbnm/following{/other_user}", "gists_url": "https://api.github.com/users/zasdfgbnm/gists{/gist_id}", "starred_url": "https://api.github.com/users/zasdfgbnm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zasdfgbnm/subscriptions", "organizations_url": "https://api.github.com/users/zasdfgbnm/orgs", "repos_url": "https://api.github.com/users/zasdfgbnm/repos", "events_url": "https://api.github.com/users/zasdfgbnm/events{/privacy}", "received_events_url": "https://api.github.com/users/zasdfgbnm/received_events", "type": "User", "site_admin": false}, "created_at": "2018-07-19T06:00:22Z", "updated_at": "2018-07-19T06:00:22Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=9110200\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/fmassa\">@fmassa</a></p>\n<p>Not really, for example:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> torch\ntensor <span class=\"pl-k\">=</span> torch.randint(<span class=\"pl-c1\">10</span>,[<span class=\"pl-c1\">3</span>,<span class=\"pl-c1\">4</span>,<span class=\"pl-c1\">5</span>], <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>torch.long)\nvalues <span class=\"pl-k\">=</span> torch.arange(<span class=\"pl-c1\">10</span>, <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>torch.long)\nresult <span class=\"pl-k\">=</span> torch.nonzero(tensor[<span class=\"pl-c1\">...</span>, <span class=\"pl-c1\">None</span>] <span class=\"pl-k\">==</span> values)\n<span class=\"pl-c1\">print</span>(result.shape)</pre></div>\n<p>gives</p>\n<pre><code>torch.Size([60, 4])\n</code></pre>\n<p>But what I want is</p>\n<pre><code>torch.Size([3, 4, 5])\n</code></pre>", "body_text": "@fmassa\nNot really, for example:\nimport torch\ntensor = torch.randint(10,[3,4,5], dtype=torch.long)\nvalues = torch.arange(10, dtype=torch.long)\nresult = torch.nonzero(tensor[..., None] == values)\nprint(result.shape)\ngives\ntorch.Size([60, 4])\n\nBut what I want is\ntorch.Size([3, 4, 5])", "body": "@fmassa \r\n\r\nNot really, for example:\r\n```python\r\nimport torch\r\ntensor = torch.randint(10,[3,4,5], dtype=torch.long)\r\nvalues = torch.arange(10, dtype=torch.long)\r\nresult = torch.nonzero(tensor[..., None] == values)\r\nprint(result.shape)\r\n```\r\ngives\r\n```\r\ntorch.Size([60, 4])\r\n```\r\nBut what I want is\r\n```\r\ntorch.Size([3, 4, 5])\r\n```"}