{"url": "https://api.github.com/repos/pytorch/pytorch/issues/5629", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/5629/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/5629/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/5629/events", "html_url": "https://github.com/pytorch/pytorch/pull/5629", "id": 303346827, "node_id": "MDExOlB1bGxSZXF1ZXN0MTczNjM4NTkw", "number": 5629, "title": "Traceable dispatch for cast methods", "user": {"login": "jamesr66a", "id": 4685384, "node_id": "MDQ6VXNlcjQ2ODUzODQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/4685384?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamesr66a", "html_url": "https://github.com/jamesr66a", "followers_url": "https://api.github.com/users/jamesr66a/followers", "following_url": "https://api.github.com/users/jamesr66a/following{/other_user}", "gists_url": "https://api.github.com/users/jamesr66a/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamesr66a/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamesr66a/subscriptions", "organizations_url": "https://api.github.com/users/jamesr66a/orgs", "repos_url": "https://api.github.com/users/jamesr66a/repos", "events_url": "https://api.github.com/users/jamesr66a/events{/privacy}", "received_events_url": "https://api.github.com/users/jamesr66a/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-03-08T03:48:28Z", "updated_at": "2018-11-23T15:40:37Z", "closed_at": "2018-03-12T23:01:15Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/5629", "html_url": "https://github.com/pytorch/pytorch/pull/5629", "diff_url": "https://github.com/pytorch/pytorch/pull/5629.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/5629.patch"}, "body_html": "<p>Previously, methods like <code>int()</code> and <code>long()</code> would fail tracing because they eventually dispatch down to <code>toType</code>, which takes a <code>Type</code> as a parameter. We don't (currently) support tracing ops with Type inputs[0], so this PR adds specializations for the ATen scalar types and dispatches to those directly. These specialized ops can be traced into the IR without needing a Type argument.</p>\n<p>A more long-term solution would be to add support for <code>Type</code>s in the IR.</p>\n<p>[0] <a href=\"https://github.com/pytorch/pytorch/blob/master/tools/autograd/gen_variable_type.py#L319\">https://github.com/pytorch/pytorch/blob/master/tools/autograd/gen_variable_type.py#L319</a></p>\n<p><a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"301958663\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/5536\" data-hovercard-type=\"issue\" data-hovercard-url=\"/pytorch/pytorch/issues/5536/hovercard\" href=\"https://github.com/pytorch/pytorch/issues/5536\">#5536</a></p>", "body_text": "Previously, methods like int() and long() would fail tracing because they eventually dispatch down to toType, which takes a Type as a parameter. We don't (currently) support tracing ops with Type inputs[0], so this PR adds specializations for the ATen scalar types and dispatches to those directly. These specialized ops can be traced into the IR without needing a Type argument.\nA more long-term solution would be to add support for Types in the IR.\n[0] https://github.com/pytorch/pytorch/blob/master/tools/autograd/gen_variable_type.py#L319\n#5536", "body": "Previously, methods like `int()` and `long()` would fail tracing because they eventually dispatch down to `toType`, which takes a `Type` as a parameter. We don't (currently) support tracing ops with Type inputs[0], so this PR adds specializations for the ATen scalar types and dispatches to those directly. These specialized ops can be traced into the IR without needing a Type argument.\r\n\r\nA more long-term solution would be to add support for `Type`s in the IR.\r\n\r\n\r\n[0] https://github.com/pytorch/pytorch/blob/master/tools/autograd/gen_variable_type.py#L319\r\n\r\nhttps://github.com/pytorch/pytorch/issues/5536"}