{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/159938279", "pull_request_review_id": 86972557, "id": 159938279, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1OTkzODI3OQ==", "diff_hunk": "@@ -247,10 +237,10 @@\n - name: gather(Tensor self, int64_t dim, Tensor index)\n   self: grad.type().zeros(self.sizes()).scatter_add_(dim, index, grad)\n \n-- name: ge(Tensor self, Scalar other)\n+- name: ge_(Tensor self, Scalar other)", "path": "tools/autograd/derivatives.yaml", "position": 52, "original_position": 52, "commit_id": "e135e7863dad9e6c6fc43085459880f5ad3d0126", "original_commit_id": "202fd3eb9a2f59e7d1460f03beb5e8026164210d", "user": {"login": "gchanan", "id": 3768583, "node_id": "MDQ6VXNlcjM3Njg1ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3768583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gchanan", "html_url": "https://github.com/gchanan", "followers_url": "https://api.github.com/users/gchanan/followers", "following_url": "https://api.github.com/users/gchanan/following{/other_user}", "gists_url": "https://api.github.com/users/gchanan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gchanan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gchanan/subscriptions", "organizations_url": "https://api.github.com/users/gchanan/orgs", "repos_url": "https://api.github.com/users/gchanan/repos", "events_url": "https://api.github.com/users/gchanan/events{/privacy}", "received_events_url": "https://api.github.com/users/gchanan/received_events", "type": "User", "site_admin": false}, "body": "I like the changes to how we bind things, but this changes so quickly that I feel like we need a TLDR at the top that explains (and is updated with every commit):\r\n\r\n1) What functions gets bound (it's IMO okay to limit the scope to native functions; if people want to bind something else they are on their own).  I think the answer now is _everything_ (whether it's listed or not)?\r\n\r\n2) How function name resolution is done, e.g. inplace name vs not and 'out' vs not (you can leave out function argument resolution, which can be handled by the larger comment block that no one will read :P).  Like, definitions for out-of-place names applies to inplace names (but the inplace names can be further specialized); the reverse doesn't happen (so you can have backwards definitions only for inplace), we don't bind out variants currently.\r\n  ", "created_at": "2018-01-05T17:43:52Z", "updated_at": "2018-11-23T15:37:51Z", "html_url": "https://github.com/pytorch/pytorch/pull/4487#discussion_r159938279", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4487", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/159938279"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/4487#discussion_r159938279"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4487"}}, "body_html": "<p>I like the changes to how we bind things, but this changes so quickly that I feel like we need a TLDR at the top that explains (and is updated with every commit):</p>\n<ol>\n<li>\n<p>What functions gets bound (it's IMO okay to limit the scope to native functions; if people want to bind something else they are on their own).  I think the answer now is <em>everything</em> (whether it's listed or not)?</p>\n</li>\n<li>\n<p>How function name resolution is done, e.g. inplace name vs not and 'out' vs not (you can leave out function argument resolution, which can be handled by the larger comment block that no one will read :P).  Like, definitions for out-of-place names applies to inplace names (but the inplace names can be further specialized); the reverse doesn't happen (so you can have backwards definitions only for inplace), we don't bind out variants currently.</p>\n</li>\n</ol>", "body_text": "I like the changes to how we bind things, but this changes so quickly that I feel like we need a TLDR at the top that explains (and is updated with every commit):\n\n\nWhat functions gets bound (it's IMO okay to limit the scope to native functions; if people want to bind something else they are on their own).  I think the answer now is everything (whether it's listed or not)?\n\n\nHow function name resolution is done, e.g. inplace name vs not and 'out' vs not (you can leave out function argument resolution, which can be handled by the larger comment block that no one will read :P).  Like, definitions for out-of-place names applies to inplace names (but the inplace names can be further specialized); the reverse doesn't happen (so you can have backwards definitions only for inplace), we don't bind out variants currently."}