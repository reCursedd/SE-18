{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/159897560", "pull_request_review_id": 86926482, "id": 159897560, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1OTg5NzU2MA==", "diff_hunk": "@@ -311,30 +302,33 @@ static void rebase_history(Variable& var, std::shared_ptr<Function> grad_fn, int\n \n // var must be the only differentiable output of the function. Use the ArrayRef\n // overload for functions with multiple differentiable outputs.\n-static void set_history(Variable& var, std::shared_ptr<Function> grad_fn, int output_nr=0) {\n+static void set_history(Tensor& t, std::shared_ptr<Function> grad_fn, int output_nr=0) {\n+  auto& var = static_cast<Variable&>(t);\n   if (grad_fn) {\n     grad_fn->num_inputs = 1;\n     var.get()->output_nr = output_nr;\n     var.get()->_grad_fn = std::move(grad_fn);\n   }\n }\n \n-static void set_history(at::ArrayRef<Variable> vl, std::shared_ptr<Function> grad_fn) {\n+static void set_history(at::ArrayRef<Tensor> tl, std::shared_ptr<Function> grad_fn) {\n   if (grad_fn) {\n-    grad_fn->num_inputs = vl.size();\n+    grad_fn->num_inputs = tl.size();\n     int64_t output_nr = 0;\n-    for (auto& var : vl) {\n-      if (!var.defined()) continue;\n+    for (auto& t : tl) {\n+      if (!t.defined()) continue;\n       // TODO: combine this with the Variable construction\n+      auto& var = static_cast<const Variable&>(t);\n       var.get()->output_nr = output_nr;\n       var.get()->_grad_fn = grad_fn;\n       output_nr++;\n     }\n   }\n }\n \n-static variable_list flatten(const TensorList& tensors) {\n-  return cast_tensor_list(tensors);\n+static at::ArrayRef<Variable> flatten(TensorList tensors) {", "path": "tools/autograd/templates/VariableType.cpp", "position": 125, "original_position": 125, "commit_id": "e135e7863dad9e6c6fc43085459880f5ad3d0126", "original_commit_id": "202fd3eb9a2f59e7d1460f03beb5e8026164210d", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "Oh yeah, I remember; the output is live only as long as the input is live, and that's a nontrivial invariant to remember especially since it would only apply to this argument.", "created_at": "2018-01-05T15:08:01Z", "updated_at": "2018-11-23T15:37:50Z", "html_url": "https://github.com/pytorch/pytorch/pull/4487#discussion_r159897560", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4487", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/159897560"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/4487#discussion_r159897560"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4487"}}, "body_html": "<p>Oh yeah, I remember; the output is live only as long as the input is live, and that's a nontrivial invariant to remember especially since it would only apply to this argument.</p>", "body_text": "Oh yeah, I remember; the output is live only as long as the input is live, and that's a nontrivial invariant to remember especially since it would only apply to this argument.", "in_reply_to_id": 159887656}