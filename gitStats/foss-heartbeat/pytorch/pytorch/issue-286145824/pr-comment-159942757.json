{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/159942757", "pull_request_review_id": 86972557, "id": 159942757, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1OTk0Mjc1Nw==", "diff_hunk": "@@ -418,380 +319,184 @@ def emit_record_trace(env, declaration):\n         local['trace_name'] = declaration['api_name']\n         if local['trace_name'].endswith('_'):\n             local['trace_name'] = local['trace_name'][:-1]\n+        local['trace_outputs'] = get_trace_outputs(declaration)\n \n         combined = nested_dict(local, nested_dict(env, declaration))\n         return RECORD_TRACE.substitute(combined)\n \n-    def emit_check_no_requires_grad(tensor_args, args_with_derivatives):\n-        \"\"\"Checks that arguments without derivatives don't require grad\"\"\"\n-        body = []\n-        for arg in tensor_args:\n-            name = arg['name']\n-            if name in args_with_derivatives:\n-                continue\n-            if name == 'output':\n-                # Double-backwards definitions sometimes take in 'input' and\n-                # 'output', but only define the derivative for input.\n-                continue\n-            if arg['dynamic_type'] in {'IndexTensor', 'BoolTensor'}:\n-                continue\n-            body.append('check_no_requires_grad({}, \"{}\");'.format(name, name))\n-        return body\n-\n-    def emit_body_via_type(declaration):\n-        env = {}\n-        body = []\n-\n-        combined = nested_dict(env, declaration)\n-        arguments = declaration['arguments']\n-\n-        tensor_args = [arg for arg in arguments if arg['simple_type'] in {'Tensor', 'TensorList'}]\n-        env['tensor_args'] = [arg['name'] for arg in tensor_args]\n-\n-        if declaration['inplace']:\n-            env['return_value'] = 'self'\n-            env['trace_outputs'] = '{ self }'\n-        elif declaration['return_type'] == 'std::vector<Tensor>':\n-            env['return_value'] = 'ret'\n-            env['trace_outputs'] = 'cast_tensor_list(ret)'\n-        else:\n-            env['return_value'] = '{}(std::move(ret))'.format(declaration['return_type'])\n-            env['trace_outputs'] = get_trace_outputs(declaration)\n-\n-        if declaration['name'] in DONT_RECORD_TRACE:\n-            env['record_trace'] = ''\n+    def declare_return_values():", "path": "tools/autograd/gen_variable_type.py", "position": null, "original_position": 604, "commit_id": "e135e7863dad9e6c6fc43085459880f5ad3d0126", "original_commit_id": "202fd3eb9a2f59e7d1460f03beb5e8026164210d", "user": {"login": "gchanan", "id": 3768583, "node_id": "MDQ6VXNlcjM3Njg1ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3768583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gchanan", "html_url": "https://github.com/gchanan", "followers_url": "https://api.github.com/users/gchanan/followers", "following_url": "https://api.github.com/users/gchanan/following{/other_user}", "gists_url": "https://api.github.com/users/gchanan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gchanan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gchanan/subscriptions", "organizations_url": "https://api.github.com/users/gchanan/orgs", "repos_url": "https://api.github.com/users/gchanan/repos", "events_url": "https://api.github.com/users/gchanan/events{/privacy}", "received_events_url": "https://api.github.com/users/gchanan/received_events", "type": "User", "site_admin": false}, "body": "nit: I feel like \"values\" isn't the right name here, maybe \"objects\"?  When I think of return values I think of e.g. \"5\" which you don't declare.", "created_at": "2018-01-05T18:05:47Z", "updated_at": "2018-11-23T15:37:51Z", "html_url": "https://github.com/pytorch/pytorch/pull/4487#discussion_r159942757", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4487", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/159942757"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/4487#discussion_r159942757"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4487"}}, "body_html": "<p>nit: I feel like \"values\" isn't the right name here, maybe \"objects\"?  When I think of return values I think of e.g. \"5\" which you don't declare.</p>", "body_text": "nit: I feel like \"values\" isn't the right name here, maybe \"objects\"?  When I think of return values I think of e.g. \"5\" which you don't declare."}