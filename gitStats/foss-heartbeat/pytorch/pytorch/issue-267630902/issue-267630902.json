{"url": "https://api.github.com/repos/pytorch/pytorch/issues/3232", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/3232/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/3232/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/3232/events", "html_url": "https://github.com/pytorch/pytorch/issues/3232", "id": 267630902, "node_id": "MDU6SXNzdWUyNjc2MzA5MDI=", "number": 3232, "title": "nn.Module.register_buffer() broken", "user": {"login": "loudinthecloud", "id": 3178431, "node_id": "MDQ6VXNlcjMxNzg0MzE=", "avatar_url": "https://avatars1.githubusercontent.com/u/3178431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/loudinthecloud", "html_url": "https://github.com/loudinthecloud", "followers_url": "https://api.github.com/users/loudinthecloud/followers", "following_url": "https://api.github.com/users/loudinthecloud/following{/other_user}", "gists_url": "https://api.github.com/users/loudinthecloud/gists{/gist_id}", "starred_url": "https://api.github.com/users/loudinthecloud/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/loudinthecloud/subscriptions", "organizations_url": "https://api.github.com/users/loudinthecloud/orgs", "repos_url": "https://api.github.com/users/loudinthecloud/repos", "events_url": "https://api.github.com/users/loudinthecloud/events{/privacy}", "received_events_url": "https://api.github.com/users/loudinthecloud/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-10-23T11:21:29Z", "updated_at": "2017-10-24T06:18:43Z", "closed_at": "2017-10-23T17:59:42Z", "author_association": "NONE", "body_html": "<p>The following script fails to register a buffer -</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> torch\n<span class=\"pl-k\">from</span> torch <span class=\"pl-k\">import</span> nn\n<span class=\"pl-k\">from</span> torch.autograd <span class=\"pl-k\">import</span> Variable\n\n<span class=\"pl-k\">class</span> <span class=\"pl-en\">Model</span>(<span class=\"pl-e\">nn</span>.<span class=\"pl-e\">Module</span>):\n    <span class=\"pl-k\">def</span> <span class=\"pl-c1\">__init__</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>):\n        <span class=\"pl-c1\">super</span>(Model, <span class=\"pl-c1\">self</span>).<span class=\"pl-c1\">__init__</span>()\n        <span class=\"pl-c1\">self</span>.blah <span class=\"pl-k\">=</span> Variable(torch.Tensor(<span class=\"pl-c1\">10</span>, <span class=\"pl-c1\">10</span>))\n        <span class=\"pl-c1\">print</span>(<span class=\"pl-c1\">self</span>._buffers)\n        <span class=\"pl-c1\">self</span>.register_buffer(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>blah<span class=\"pl-pds\">'</span></span>, <span class=\"pl-c1\">self</span>.blah.data)\n\nnet <span class=\"pl-k\">=</span> Model()</pre></div>\n<p>This is the output:</p>\n<pre><code>OrderedDict()\n---------------------------------------------------------------------------\nKeyError                                  Traceback (most recent call last)\n&lt;ipython-input-175-a6c6e417abc2&gt; in &lt;module&gt;()\n     10         self.register_buffer('blah', self.blah)\n     11 \n---&gt; 12 net = Model()\n\n&lt;ipython-input-175-a6c6e417abc2&gt; in __init__(self)\n      8         self.blah = Variable(torch.Tensor(10, 10))\n      9         print(self._buffers)\n---&gt; 10         self.register_buffer('blah', self.blah)\n     11 \n     12 net = Model()\n\ntorch/nn/modules/module.py in register_buffer(self, name, tensor)\n     78         \"\"\"\n     79         if hasattr(self, name) and name not in self._buffers:\n---&gt; 80             raise KeyError(\"attribute '{}' already exists\".format(name))\n     81 \n     82         self._buffers[name] = tensor\n\nKeyError: \"attribute 'blah' already exists\"\n</code></pre>", "body_text": "The following script fails to register a buffer -\nimport torch\nfrom torch import nn\nfrom torch.autograd import Variable\n\nclass Model(nn.Module):\n    def __init__(self):\n        super(Model, self).__init__()\n        self.blah = Variable(torch.Tensor(10, 10))\n        print(self._buffers)\n        self.register_buffer('blah', self.blah.data)\n\nnet = Model()\nThis is the output:\nOrderedDict()\n---------------------------------------------------------------------------\nKeyError                                  Traceback (most recent call last)\n<ipython-input-175-a6c6e417abc2> in <module>()\n     10         self.register_buffer('blah', self.blah)\n     11 \n---> 12 net = Model()\n\n<ipython-input-175-a6c6e417abc2> in __init__(self)\n      8         self.blah = Variable(torch.Tensor(10, 10))\n      9         print(self._buffers)\n---> 10         self.register_buffer('blah', self.blah)\n     11 \n     12 net = Model()\n\ntorch/nn/modules/module.py in register_buffer(self, name, tensor)\n     78         \"\"\"\n     79         if hasattr(self, name) and name not in self._buffers:\n---> 80             raise KeyError(\"attribute '{}' already exists\".format(name))\n     81 \n     82         self._buffers[name] = tensor\n\nKeyError: \"attribute 'blah' already exists\"", "body": "The following script fails to register a buffer -\r\n\r\n```python\r\nimport torch\r\nfrom torch import nn\r\nfrom torch.autograd import Variable\r\n\r\nclass Model(nn.Module):\r\n    def __init__(self):\r\n        super(Model, self).__init__()\r\n        self.blah = Variable(torch.Tensor(10, 10))\r\n        print(self._buffers)\r\n        self.register_buffer('blah', self.blah.data)\r\n\r\nnet = Model()\r\n```\r\n\r\nThis is the output:\r\n```\r\nOrderedDict()\r\n---------------------------------------------------------------------------\r\nKeyError                                  Traceback (most recent call last)\r\n<ipython-input-175-a6c6e417abc2> in <module>()\r\n     10         self.register_buffer('blah', self.blah)\r\n     11 \r\n---> 12 net = Model()\r\n\r\n<ipython-input-175-a6c6e417abc2> in __init__(self)\r\n      8         self.blah = Variable(torch.Tensor(10, 10))\r\n      9         print(self._buffers)\r\n---> 10         self.register_buffer('blah', self.blah)\r\n     11 \r\n     12 net = Model()\r\n\r\ntorch/nn/modules/module.py in register_buffer(self, name, tensor)\r\n     78         \"\"\"\r\n     79         if hasattr(self, name) and name not in self._buffers:\r\n---> 80             raise KeyError(\"attribute '{}' already exists\".format(name))\r\n     81 \r\n     82         self._buffers[name] = tensor\r\n\r\nKeyError: \"attribute 'blah' already exists\"\r\n```"}