{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/402056588", "html_url": "https://github.com/pytorch/pytorch/pull/9102#issuecomment-402056588", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/9102", "id": 402056588, "node_id": "MDEyOklzc3VlQ29tbWVudDQwMjA1NjU4OA==", "user": {"login": "karol-arndt", "id": 15629271, "node_id": "MDQ6VXNlcjE1NjI5Mjcx", "avatar_url": "https://avatars2.githubusercontent.com/u/15629271?v=4", "gravatar_id": "", "url": "https://api.github.com/users/karol-arndt", "html_url": "https://github.com/karol-arndt", "followers_url": "https://api.github.com/users/karol-arndt/followers", "following_url": "https://api.github.com/users/karol-arndt/following{/other_user}", "gists_url": "https://api.github.com/users/karol-arndt/gists{/gist_id}", "starred_url": "https://api.github.com/users/karol-arndt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/karol-arndt/subscriptions", "organizations_url": "https://api.github.com/users/karol-arndt/orgs", "repos_url": "https://api.github.com/users/karol-arndt/repos", "events_url": "https://api.github.com/users/karol-arndt/events{/privacy}", "received_events_url": "https://api.github.com/users/karol-arndt/received_events", "type": "User", "site_admin": false}, "created_at": "2018-07-03T08:30:08Z", "updated_at": "2018-07-03T08:30:08Z", "author_association": "NONE", "body_html": "<p>Well, this indeed sounds like a natural and intuitive extension of the current <code>inverse</code> method, and wouldn't cause any extra clutter in the Python interface. It's also how the API of <em>another popular tensor library</em> works.<br>\nOn the other hand, currently most - if not all - functions that operate on batch data have a name prefixed with a b (<code>bmm</code>, <code>btrifact</code>, <code>btrisolve</code>...), and extending <code>inverse</code> to work both with batches and single n-by-n matrices would break that convention.<br>\nOverall, it's hard to say which is preferable; perhaps some feedback from the code owners could help to solve this problem.</p>", "body_text": "Well, this indeed sounds like a natural and intuitive extension of the current inverse method, and wouldn't cause any extra clutter in the Python interface. It's also how the API of another popular tensor library works.\nOn the other hand, currently most - if not all - functions that operate on batch data have a name prefixed with a b (bmm, btrifact, btrisolve...), and extending inverse to work both with batches and single n-by-n matrices would break that convention.\nOverall, it's hard to say which is preferable; perhaps some feedback from the code owners could help to solve this problem.", "body": "Well, this indeed sounds like a natural and intuitive extension of the current `inverse` method, and wouldn't cause any extra clutter in the Python interface. It's also how the API of _another popular tensor library_ works.\r\nOn the other hand, currently most - if not all - functions that operate on batch data have a name prefixed with a b (`bmm`, `btrifact`, `btrisolve`...), and extending `inverse` to work both with batches and single n-by-n matrices would break that convention.\r\nOverall, it's hard to say which is preferable; perhaps some feedback from the code owners could help to solve this problem."}