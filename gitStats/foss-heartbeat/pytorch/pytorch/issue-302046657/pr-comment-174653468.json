{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/174653468", "pull_request_review_id": 104048714, "id": 174653468, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NDY1MzQ2OA==", "diff_hunk": "@@ -0,0 +1,64 @@\n+from torch.distributions import constraints\n+from torch.distributions.normal import Normal\n+from torch.distributions.transformed_distribution import TransformedDistribution\n+from torch.distributions.transforms import ComposeTransform, ExpTransform, StickBreakingTransform\n+from torch.distributions.utils import _sum_rightmost\n+\n+\n+class LogisticNormal(TransformedDistribution):\n+    r\"\"\"\n+    Creates a logistic-normal distribution parameterized by\n+    `mean` and `std` where::\n+\n+        X ~ LogisticNormal(loc, scale)\n+        Y = log(X / (1 - X)) ~ Normal(loc, scale)\n+\n+    Example::\n+\n+        >>> m = LogisticNormal(torch.Tensor([0.0]), torch.Tensor([1.0]))\n+        >>> m.sample()  # logistic-normal distributed with mean=0 and stddev=1\n+         0.4655\n+         0.5345\n+        [torch.FloatTensor of size (2,)]\n+\n+    Args:\n+        loc (float or Tensor): mean\n+        scale (float or Tensor): standard deviation\n+    \"\"\"\n+    params = {'loc': constraints.real, 'scale': constraints.positive}\n+    support = constraints.simplex\n+    has_rsample = True\n+\n+    def __init__(self, loc, scale):\n+        super(LogisticNormal, self).__init__(\n+            Normal(loc, scale), StickBreakingTransform())\n+        # Adjust event shape since StickBreakingTransform adds 1 dimension\n+        self._event_shape = self._event_shape.__class__([\n+            s + 1 for s in self._event_shape\n+        ])\n+\n+    def log_prob(self, value):", "path": "torch/distributions/logistic_normal.py", "position": null, "original_position": 40, "commit_id": "10377b822c64e8fc42893656f98451efaccc6559", "original_commit_id": "10e96245623f5f3ae6a5563f745a87e1ec6eeeee", "user": {"login": "fritzo", "id": 648532, "node_id": "MDQ6VXNlcjY0ODUzMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/648532?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fritzo", "html_url": "https://github.com/fritzo", "followers_url": "https://api.github.com/users/fritzo/followers", "following_url": "https://api.github.com/users/fritzo/following{/other_user}", "gists_url": "https://api.github.com/users/fritzo/gists{/gist_id}", "starred_url": "https://api.github.com/users/fritzo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fritzo/subscriptions", "organizations_url": "https://api.github.com/users/fritzo/orgs", "repos_url": "https://api.github.com/users/fritzo/repos", "events_url": "https://api.github.com/users/fritzo/events{/privacy}", "received_events_url": "https://api.github.com/users/fritzo/received_events", "type": "User", "site_admin": false}, "body": "I'm inclined to fix `TransformedDistribution.log_prob()` rather than duplicate most of its logic here. Does the following fix work for you?\r\n```diff\r\n  class TransformedDistribution(Distribution):\r\n      ...\r\n      def log_prob(self, value):\r\n          \"\"\"\r\n          Scores the sample by inverting the transform(s) and computing the score\r\n          using the score of the base distribution and the log abs det jacobian.\r\n          \"\"\"\r\n-         self.base_dist._validate_log_prob_arg(value)\r\n+         self._validate_log_prob_arg(value)\r\n          event_dim = len(self.event_shape)\r\n          log_prob = 0.0\r\n          y = value\r\n          for transform in reversed(self.transforms):\r\n              x = transform.inv(y)\r\n              log_prob -= _sum_rightmost(transform.log_abs_det_jacobian(x, y),\r\n                                         event_dim - transform.event_dim)\r\n              y = x\r\n          log_prob += _sum_rightmost(self.base_dist.log_prob(y),\r\n                                     event_dim - len(self.base_dist.event_shape))\r\n          return log_prob\r\n```\r\nIf so then you should be able to delete this method here.", "created_at": "2018-03-15T01:05:08Z", "updated_at": "2018-11-23T15:40:45Z", "html_url": "https://github.com/pytorch/pytorch/pull/5547#discussion_r174653468", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/5547", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/174653468"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/5547#discussion_r174653468"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/5547"}}, "body_html": "<p>I'm inclined to fix <code>TransformedDistribution.log_prob()</code> rather than duplicate most of its logic here. Does the following fix work for you?</p>\n<div class=\"highlight highlight-source-diff\"><pre>  class TransformedDistribution(Distribution):\n      ...\n      def log_prob(self, value):\n          \"\"\"\n          Scores the sample by inverting the transform(s) and computing the score\n          using the score of the base distribution and the log abs det jacobian.\n          \"\"\"\n<span class=\"pl-md\"><span class=\"pl-md\">-</span>         self.base_dist._validate_log_prob_arg(value)</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>         self._validate_log_prob_arg(value)</span>\n          event_dim = len(self.event_shape)\n          log_prob = 0.0\n          y = value\n          for transform in reversed(self.transforms):\n              x = transform.inv(y)\n              log_prob -= _sum_rightmost(transform.log_abs_det_jacobian(x, y),\n                                         event_dim - transform.event_dim)\n              y = x\n          log_prob += _sum_rightmost(self.base_dist.log_prob(y),\n                                     event_dim - len(self.base_dist.event_shape))\n          return log_prob</pre></div>\n<p>If so then you should be able to delete this method here.</p>", "body_text": "I'm inclined to fix TransformedDistribution.log_prob() rather than duplicate most of its logic here. Does the following fix work for you?\n  class TransformedDistribution(Distribution):\n      ...\n      def log_prob(self, value):\n          \"\"\"\n          Scores the sample by inverting the transform(s) and computing the score\n          using the score of the base distribution and the log abs det jacobian.\n          \"\"\"\n-         self.base_dist._validate_log_prob_arg(value)\n+         self._validate_log_prob_arg(value)\n          event_dim = len(self.event_shape)\n          log_prob = 0.0\n          y = value\n          for transform in reversed(self.transforms):\n              x = transform.inv(y)\n              log_prob -= _sum_rightmost(transform.log_abs_det_jacobian(x, y),\n                                         event_dim - transform.event_dim)\n              y = x\n          log_prob += _sum_rightmost(self.base_dist.log_prob(y),\n                                     event_dim - len(self.base_dist.event_shape))\n          return log_prob\nIf so then you should be able to delete this method here."}