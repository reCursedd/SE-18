{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/174852664", "pull_request_review_id": 104286479, "id": 174852664, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NDg1MjY2NA==", "diff_hunk": "@@ -434,21 +434,24 @@ def __eq__(self, other):\n         return isinstance(other, StickBreakingTransform)\n \n     def _call(self, x):\n-        shape = x.shape[:-1] + (1 + x.shape[-1],)\n-        one = x.new([1]).expand(x.shape[:-1] + (1,))\n-        numer = sigmoid(x)\n-        denom = (1 - numer).cumprod(-1)\n-        probs = torch.cat([numer, one], -1) * torch.cat([one, denom], -1)\n-        return probs\n+        offset = (x.shape[-1] + 1) - x.new([1]).expand(x.shape).cumsum(-1)\n+        z = sigmoid(x - offset.log())\n+        z_cumprod = (1 - z).cumprod(-1)\n+        y = pad(z, (0, 1), value=1) * pad(z_cumprod, (1, 0), value=1)\n+        return y\n \n     def _inverse(self, y):\n-        pmf = y\n-        cmf = pmf.cumsum(-1)\n-        sf = 1 - cmf\n-        units = y[..., :-1] / sf[..., :-1]\n-        return units.log()\n+        shape = y.shape[:-1] + (y.shape[-1] - 1,)\n+        offset = (shape[-1] + 1) - y.new([1]).expand(shape).cumsum(-1)\n+        sf = (1 - y.cumsum(-1))[..., :-1]\n+        x = y[..., :-1].log() - sf.log() + offset.log()\n+        return x\n \n-    # TODO implement .log_abs_det_jacobian()\n+    def log_abs_det_jacobian(self, x, y):", "path": "torch/distributions/transforms.py", "position": 38, "original_position": 38, "commit_id": "10377b822c64e8fc42893656f98451efaccc6559", "original_commit_id": "10e96245623f5f3ae6a5563f745a87e1ec6eeeee", "user": {"login": "alshedivat", "id": 2126561, "node_id": "MDQ6VXNlcjIxMjY1NjE=", "avatar_url": "https://avatars3.githubusercontent.com/u/2126561?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alshedivat", "html_url": "https://github.com/alshedivat", "followers_url": "https://api.github.com/users/alshedivat/followers", "following_url": "https://api.github.com/users/alshedivat/following{/other_user}", "gists_url": "https://api.github.com/users/alshedivat/gists{/gist_id}", "starred_url": "https://api.github.com/users/alshedivat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alshedivat/subscriptions", "organizations_url": "https://api.github.com/users/alshedivat/orgs", "repos_url": "https://api.github.com/users/alshedivat/repos", "events_url": "https://api.github.com/users/alshedivat/events{/privacy}", "received_events_url": "https://api.github.com/users/alshedivat/received_events", "type": "User", "site_admin": false}, "body": "My implementation is based on [Stan's reference manual](https://github.com/stan-dev/stan/releases/) (Section 35.6, pp. 408-410).\r\n\r\nYes, I noticed that `log_abs_det_jacobian` is tested only for univariate cases. Not sure if there is a way to have a generic set of tests for multivariate `log_abs_det_jacobian`. An indirect way would be to test `log_prob` of a distribution that uses this transform against an existing implementation. Unfortunately, `scipy.stats` doesn't have logistic-normal distribution.", "created_at": "2018-03-15T16:46:35Z", "updated_at": "2018-11-23T15:40:47Z", "html_url": "https://github.com/pytorch/pytorch/pull/5547#discussion_r174852664", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/5547", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/174852664"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/5547#discussion_r174852664"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/5547"}}, "body_html": "<p>My implementation is based on <a href=\"https://github.com/stan-dev/stan/releases/\">Stan's reference manual</a> (Section 35.6, pp. 408-410).</p>\n<p>Yes, I noticed that <code>log_abs_det_jacobian</code> is tested only for univariate cases. Not sure if there is a way to have a generic set of tests for multivariate <code>log_abs_det_jacobian</code>. An indirect way would be to test <code>log_prob</code> of a distribution that uses this transform against an existing implementation. Unfortunately, <code>scipy.stats</code> doesn't have logistic-normal distribution.</p>", "body_text": "My implementation is based on Stan's reference manual (Section 35.6, pp. 408-410).\nYes, I noticed that log_abs_det_jacobian is tested only for univariate cases. Not sure if there is a way to have a generic set of tests for multivariate log_abs_det_jacobian. An indirect way would be to test log_prob of a distribution that uses this transform against an existing implementation. Unfortunately, scipy.stats doesn't have logistic-normal distribution.", "in_reply_to_id": 174654931}