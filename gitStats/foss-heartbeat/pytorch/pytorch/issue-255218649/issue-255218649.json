{"url": "https://api.github.com/repos/pytorch/pytorch/issues/2625", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/2625/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/2625/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/2625/events", "html_url": "https://github.com/pytorch/pytorch/issues/2625", "id": 255218649, "node_id": "MDU6SXNzdWUyNTUyMTg2NDk=", "number": 2625, "title": "GridSampler border assumptions ", "user": {"login": "y0ast", "id": 485778, "node_id": "MDQ6VXNlcjQ4NTc3OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/485778?v=4", "gravatar_id": "", "url": "https://api.github.com/users/y0ast", "html_url": "https://github.com/y0ast", "followers_url": "https://api.github.com/users/y0ast/followers", "following_url": "https://api.github.com/users/y0ast/following{/other_user}", "gists_url": "https://api.github.com/users/y0ast/gists{/gist_id}", "starred_url": "https://api.github.com/users/y0ast/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/y0ast/subscriptions", "organizations_url": "https://api.github.com/users/y0ast/orgs", "repos_url": "https://api.github.com/users/y0ast/repos", "events_url": "https://api.github.com/users/y0ast/events{/privacy}", "received_events_url": "https://api.github.com/users/y0ast/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 742585577, "node_id": "MDU6TGFiZWw3NDI1ODU1Nzc=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/0.3", "name": "0.3", "color": "d1c41b", "default": false}, {"id": 424131849, "node_id": "MDU6TGFiZWw0MjQxMzE4NDk=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true}, {"id": 443483881, "node_id": "MDU6TGFiZWw0NDM0ODM4ODE=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/todo", "name": "todo", "color": "c2e0c6", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "alykhantejani", "id": 687194, "node_id": "MDQ6VXNlcjY4NzE5NA==", "avatar_url": "https://avatars1.githubusercontent.com/u/687194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alykhantejani", "html_url": "https://github.com/alykhantejani", "followers_url": "https://api.github.com/users/alykhantejani/followers", "following_url": "https://api.github.com/users/alykhantejani/following{/other_user}", "gists_url": "https://api.github.com/users/alykhantejani/gists{/gist_id}", "starred_url": "https://api.github.com/users/alykhantejani/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alykhantejani/subscriptions", "organizations_url": "https://api.github.com/users/alykhantejani/orgs", "repos_url": "https://api.github.com/users/alykhantejani/repos", "events_url": "https://api.github.com/users/alykhantejani/events{/privacy}", "received_events_url": "https://api.github.com/users/alykhantejani/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "alykhantejani", "id": 687194, "node_id": "MDQ6VXNlcjY4NzE5NA==", "avatar_url": "https://avatars1.githubusercontent.com/u/687194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alykhantejani", "html_url": "https://github.com/alykhantejani", "followers_url": "https://api.github.com/users/alykhantejani/followers", "following_url": "https://api.github.com/users/alykhantejani/following{/other_user}", "gists_url": "https://api.github.com/users/alykhantejani/gists{/gist_id}", "starred_url": "https://api.github.com/users/alykhantejani/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alykhantejani/subscriptions", "organizations_url": "https://api.github.com/users/alykhantejani/orgs", "repos_url": "https://api.github.com/users/alykhantejani/repos", "events_url": "https://api.github.com/users/alykhantejani/events{/privacy}", "received_events_url": "https://api.github.com/users/alykhantejani/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/pytorch/pytorch/milestones/3", "html_url": "https://github.com/pytorch/pytorch/milestone/3", "labels_url": "https://api.github.com/repos/pytorch/pytorch/milestones/3/labels", "id": 3085371, "node_id": "MDk6TWlsZXN0b25lMzA4NTM3MQ==", "number": 3, "title": "0.3", "description": "", "creator": {"login": "soumith", "id": 1310570, "node_id": "MDQ6VXNlcjEzMTA1NzA=", "avatar_url": "https://avatars0.githubusercontent.com/u/1310570?v=4", "gravatar_id": "", "url": "https://api.github.com/users/soumith", "html_url": "https://github.com/soumith", "followers_url": "https://api.github.com/users/soumith/followers", "following_url": "https://api.github.com/users/soumith/following{/other_user}", "gists_url": "https://api.github.com/users/soumith/gists{/gist_id}", "starred_url": "https://api.github.com/users/soumith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/soumith/subscriptions", "organizations_url": "https://api.github.com/users/soumith/orgs", "repos_url": "https://api.github.com/users/soumith/repos", "events_url": "https://api.github.com/users/soumith/events{/privacy}", "received_events_url": "https://api.github.com/users/soumith/received_events", "type": "User", "site_admin": false}, "open_issues": 2, "closed_issues": 17, "state": "closed", "created_at": "2018-02-03T02:53:12Z", "updated_at": "2018-08-06T21:16:05Z", "due_on": "2017-12-01T08:00:00Z", "closed_at": "2018-08-06T21:16:05Z"}, "comments": 8, "created_at": "2017-09-05T09:43:01Z", "updated_at": "2018-02-03T02:53:50Z", "closed_at": "2017-11-12T23:48:25Z", "author_association": "CONTRIBUTOR", "body_html": "<p><code>torch.nn.functional.GridSampler</code> makes the assumption that when a grid point is out of the original input frame then the sampled pixel value should be zero:</p>\n<p>From <code>torch/lib/THNN/generic/SpatialGridSamplerBilinear.c</code>:</p>\n<pre><code>#define SAFE_GET(input, x, y, n, c, H, W) x &gt;= 0 &amp;&amp; x &lt; W &amp;&amp; y &gt;=0 \\\n    &amp;&amp; y &lt; H ? THTensor_fastGet4d(input, n, c, y, x) : 0\n</code></pre>\n<p>I saw that cudnn and <a href=\"https://github.com/qassemoquab/stnbhwd/blob/master/BilinearSamplerBHWD.cu\">another cuda implementation</a> do the same.</p>\n<p>In our research we have found that using the border value works much better. So the safe_get would implement something like <code>x = min(W, max(x, 0))</code> and <code>y = min(H, max(y, 0))</code>, instead of just returning zero.</p>\n<p>We could simulate that behavior with the current implementation by manually clamping the grid before passing it to the sampler, however this leads to incorrect bilinear interpolation weights. Instead of correctly weighting a pixel by its true distance (even if it's outside the frame), it would weigh it by the distance to the border.</p>\n<p>I was considering creating a PR and adding this to the above mentioned C code, however in that case the C implementation would deviate from cudnn, which is probably not ideal. So I am putting it up for discussion first.</p>\n<p>EDIT: <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=9110200\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/fmassa\">@fmassa</a> pointed out that the Tensorflow implementation does use my proposed border behavior: <a href=\"https://github.com/tensorflow/models/blob/master/transformer/spatial_transformer.py#L89\">https://github.com/tensorflow/models/blob/master/transformer/spatial_transformer.py#L89</a></p>", "body_text": "torch.nn.functional.GridSampler makes the assumption that when a grid point is out of the original input frame then the sampled pixel value should be zero:\nFrom torch/lib/THNN/generic/SpatialGridSamplerBilinear.c:\n#define SAFE_GET(input, x, y, n, c, H, W) x >= 0 && x < W && y >=0 \\\n    && y < H ? THTensor_fastGet4d(input, n, c, y, x) : 0\n\nI saw that cudnn and another cuda implementation do the same.\nIn our research we have found that using the border value works much better. So the safe_get would implement something like x = min(W, max(x, 0)) and y = min(H, max(y, 0)), instead of just returning zero.\nWe could simulate that behavior with the current implementation by manually clamping the grid before passing it to the sampler, however this leads to incorrect bilinear interpolation weights. Instead of correctly weighting a pixel by its true distance (even if it's outside the frame), it would weigh it by the distance to the border.\nI was considering creating a PR and adding this to the above mentioned C code, however in that case the C implementation would deviate from cudnn, which is probably not ideal. So I am putting it up for discussion first.\nEDIT: @fmassa pointed out that the Tensorflow implementation does use my proposed border behavior: https://github.com/tensorflow/models/blob/master/transformer/spatial_transformer.py#L89", "body": "`torch.nn.functional.GridSampler` makes the assumption that when a grid point is out of the original input frame then the sampled pixel value should be zero:\r\n\r\nFrom `torch/lib/THNN/generic/SpatialGridSamplerBilinear.c`:\r\n```\r\n#define SAFE_GET(input, x, y, n, c, H, W) x >= 0 && x < W && y >=0 \\\r\n    && y < H ? THTensor_fastGet4d(input, n, c, y, x) : 0\r\n```\r\n\r\nI saw that cudnn and [another cuda implementation](https://github.com/qassemoquab/stnbhwd/blob/master/BilinearSamplerBHWD.cu) do the same.\r\n\r\nIn our research we have found that using the border value works much better. So the safe_get would implement something like `x = min(W, max(x, 0))` and `y = min(H, max(y, 0))`, instead of just returning zero.\r\n\r\nWe could simulate that behavior with the current implementation by manually clamping the grid before passing it to the sampler, however this leads to incorrect bilinear interpolation weights. Instead of correctly weighting a pixel by its true distance (even if it's outside the frame), it would weigh it by the distance to the border.\r\n\r\nI was considering creating a PR and adding this to the above mentioned C code, however in that case the C implementation would deviate from cudnn, which is probably not ideal. So I am putting it up for discussion first. \r\n\r\nEDIT: @fmassa pointed out that the Tensorflow implementation does use my proposed border behavior: https://github.com/tensorflow/models/blob/master/transformer/spatial_transformer.py#L89"}