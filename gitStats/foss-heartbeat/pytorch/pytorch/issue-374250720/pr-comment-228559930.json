{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/228559930", "pull_request_review_id": 168865456, "id": 228559930, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyODU1OTkzMA==", "diff_hunk": "@@ -690,3 +691,109 @@ def random_fullrank_matrix_distinct_singular_value(l, *batches):\n             s = torch.arange(1., l + 1).mul_(1.0 / (l + 1))\n             all_matrices.append(u.mm(torch.diag(s)).mm(v.t()))\n         return torch.stack(all_matrices).reshape(*(batches + (l, l)))\n+\n+\n+def test_dtypes(self, dtypes, layout, device):\n+    for dtype in dtypes:\n+        if dtype != torch.float16:\n+            out = torch.zeros((2, 3), dtype=dtype, layout=layout, device=device)\n+            self.assertIs(dtype, out.dtype)\n+            self.assertIs(layout, out.layout)\n+            self.assertEqual(device, out.device)\n+\n+\n+def test_empty_full(self, dtypes, layout, device):\n+    shape = torch.Size([2, 3])\n+\n+    def check_value(tensor, dtype, layout, device, value, requires_grad):\n+        self.assertEqual(shape, tensor.shape)\n+        self.assertIs(dtype, tensor.dtype)\n+        self.assertIs(layout, tensor.layout)\n+        self.assertEqual(tensor.requires_grad, requires_grad)\n+        if tensor.is_cuda and device is not None:\n+            self.assertEqual(device, tensor.device)\n+        if value is not None:\n+            fill = tensor.new(shape).fill_(value)\n+            self.assertEqual(tensor, fill)\n+\n+    def get_int64_dtype(dtype):\n+        module = '.'.join(str(dtype).split('.')[1:-1])\n+        if not module:\n+            return torch.int64\n+        return operator.attrgetter(module)(torch).int64\n+\n+    default_dtype = torch.get_default_dtype()\n+    check_value(torch.empty(shape), default_dtype, torch.strided, -1, None, False)\n+    check_value(torch.full(shape, -5), default_dtype, torch.strided, -1, None, False)\n+    for dtype in dtypes:\n+        for rg in {dtype.is_floating_point, False}:\n+            int64_dtype = get_int64_dtype(dtype)\n+            v = torch.empty(shape, dtype=dtype, device=device, layout=layout, requires_grad=rg)\n+            check_value(v, dtype, layout, device, None, rg)\n+            out = v.new()\n+            check_value(torch.empty(shape, out=out, device=device, layout=layout, requires_grad=rg),\n+                        dtype, layout, device, None, rg)\n+            check_value(v.new_empty(shape), dtype, layout, device, None, False)\n+            check_value(v.new_empty(shape, dtype=int64_dtype, device=device, requires_grad=False),\n+                        int64_dtype, layout, device, None, False)\n+            check_value(torch.empty_like(v), dtype, layout, device, None, False)\n+            check_value(torch.empty_like(v, dtype=int64_dtype, layout=layout, device=device, requires_grad=False),\n+                        int64_dtype, layout, device, None, False)\n+\n+            if dtype is not torch.float16 and layout != torch.sparse_coo:\n+                fv = 3\n+                v = torch.full(shape, fv, dtype=dtype, layout=layout, device=device, requires_grad=rg)\n+                check_value(v, dtype, layout, device, fv, rg)\n+                check_value(v.new_full(shape, fv + 1), dtype, layout, device, fv + 1, False)\n+                out = v.new()\n+                check_value(torch.full(shape, fv + 2, out=out, device=device, layout=layout, requires_grad=rg),\n+                            dtype, layout, device, fv + 2, rg)\n+                check_value(v.new_full(shape, fv + 3, dtype=int64_dtype, device=device, requires_grad=False),\n+                            int64_dtype, layout, device, fv + 3, False)\n+                check_value(torch.full_like(v, fv + 4), dtype, layout, device, fv + 4, False)\n+                check_value(torch.full_like(v, fv + 5,\n+                                            dtype=int64_dtype, layout=layout, device=device, requires_grad=False),\n+                            int64_dtype, layout, device, fv + 5, False)\n+\n+\n+THESE_TAKE_WAY_TOO_LONG = {\n+    'test_Conv3d_groups',\n+    'test_conv_double_backward_groups',\n+    'test_Conv3d_dilated',\n+    'test_Conv3d_stride_padding',\n+    'test_Conv3d_dilated_strided',\n+    'test_Conv3d',\n+    'test_Conv2d_dilated',\n+    'test_ConvTranspose3d_dilated',\n+    'test_ConvTranspose2d_dilated',\n+    'test_snli',\n+    'test_Conv2d',\n+    'test_Conv2d_padding',\n+    'test_ConvTranspose2d_no_bias',\n+    'test_ConvTranspose2d',\n+    'test_ConvTranspose3d',\n+    'test_Conv2d_no_bias',\n+    'test_matmul_4d_4d',\n+    'test_multinomial_invalid_probs',\n+    'test_cuda_not_built',", "path": "test/common_utils.py", "position": null, "original_position": 96, "commit_id": "49ac1200b177e7720ead74f580de08ee7636a3d2", "original_commit_id": "24aec5c2d54c15f90db1af2ecd70454cd6826e5b", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "Most of these exclusions make sense, but this one is pretty weird.", "created_at": "2018-10-26T14:59:34Z", "updated_at": "2018-11-23T15:53:41Z", "html_url": "https://github.com/pytorch/pytorch/pull/13160#discussion_r228559930", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/13160", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/228559930"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/13160#discussion_r228559930"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/13160"}}, "body_html": "<p>Most of these exclusions make sense, but this one is pretty weird.</p>", "body_text": "Most of these exclusions make sense, but this one is pretty weird."}