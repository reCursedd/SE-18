{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/199570344", "pull_request_review_id": 133715602, "id": 199570344, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTU3MDM0NA==", "diff_hunk": "@@ -142,28 +135,34 @@ THStorage* THStorage_(newWithDataAndAllocator)(real* data, ptrdiff_t size,\n                                                THAllocator* allocator,\n                                                void* allocatorContext) {\n   THStorage *storage = static_cast<THStorage*>(THAlloc(sizeof(THStorage)));\n+  storage->backend = at::kCPU;\n   storage->scalar_type = at::CTypeToScalarType<th::from_type<real>>::to();\n   storage->data_ptr = data;\n   storage->size = size;\n   storage->refcount = 1;\n   storage->flag = TH_STORAGE_REFCOUNTED | TH_STORAGE_RESIZABLE | TH_STORAGE_FREEMEM;\n-  storage->allocator = allocator;\n+  storage->allocatorVoidPtr = allocator;\n   storage->allocatorContext = allocatorContext;\n+  storage->device = 0;\n   return storage;\n }\n \n void THStorage_(resize)(THStorage *storage, ptrdiff_t size)\n {\n+  AT_ASSERT(storage->backend == at::kCPU);", "path": "aten/src/TH/generic/THStorage.cpp", "position": 53, "original_position": 53, "commit_id": "79142a0ec0a31353b7bfb07863ae1b6fda24c39c", "original_commit_id": "79142a0ec0a31353b7bfb07863ae1b6fda24c39c", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "Yeah, I guess the criterion I applied here was just, if I was doing a cast on the `void* allocatorVoidPtr`, do an assert first.", "created_at": "2018-07-02T17:36:32Z", "updated_at": "2018-11-23T15:46:40Z", "html_url": "https://github.com/pytorch/pytorch/pull/9087#discussion_r199570344", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/9087", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/199570344"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/9087#discussion_r199570344"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/9087"}}, "body_html": "<p>Yeah, I guess the criterion I applied here was just, if I was doing a cast on the <code>void* allocatorVoidPtr</code>, do an assert first.</p>", "body_text": "Yeah, I guess the criterion I applied here was just, if I was doing a cast on the void* allocatorVoidPtr, do an assert first.", "in_reply_to_id": 199534893}