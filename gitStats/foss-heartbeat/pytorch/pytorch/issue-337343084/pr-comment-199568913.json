{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/199568913", "pull_request_review_id": 133713822, "id": 199568913, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTU2ODkxMw==", "diff_hunk": "@@ -65,3 +67,30 @@ THLongStorage *THLongStorage_newInferSize(THLongStorage *size, ptrdiff_t nElemen\n   }\n   return copy;\n }\n+\n+THStorage* THStorage_new(at::ScalarType scalar_type)\n+{\n+  return THStorage_newWithSize(scalar_type, 0);\n+}\n+\n+THStorage* THStorage_newWithSize(at::ScalarType scalar_type, ptrdiff_t size)\n+{\n+  return THStorage_newWithAllocator(scalar_type, size, &THDefaultAllocator, NULL);\n+}\n+\n+THStorage* THStorage_newWithAllocator(at::ScalarType scalar_type, ptrdiff_t size,\n+                                      THAllocator *allocator,\n+                                      void *allocatorContext)\n+{\n+  THStorage *storage = static_cast<THStorage*>(THAlloc(sizeof(THStorage)));\n+  storage->backend = at::kCPU;\n+  storage->scalar_type = scalar_type;\n+  storage->data_ptr = allocator->malloc(allocatorContext, at::elementSize(scalar_type)*size);\n+  storage->size = size;\n+  new (&storage->refcount) std::atomic<int>(1);\n+  storage->flag = TH_STORAGE_REFCOUNTED | TH_STORAGE_RESIZABLE | TH_STORAGE_FREEMEM;\n+  storage->allocatorVoidPtr = allocator;\n+  storage->allocatorContext = allocatorContext;\n+  storage->device = 0;  // device is not meaningful on CPU", "path": "aten/src/TH/THStorage.cpp", "position": 46, "original_position": 46, "commit_id": "79142a0ec0a31353b7bfb07863ae1b6fda24c39c", "original_commit_id": "79142a0ec0a31353b7bfb07863ae1b6fda24c39c", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "This was just lining the logic up with THCStorage. My preferred order of operations is to get THStorage and THCStorage the same struct, and as much shared logic as possible, and then swap device for something more modern.", "created_at": "2018-07-02T17:30:24Z", "updated_at": "2018-11-23T15:46:40Z", "html_url": "https://github.com/pytorch/pytorch/pull/9087#discussion_r199568913", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/9087", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/199568913"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/9087#discussion_r199568913"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/9087"}}, "body_html": "<p>This was just lining the logic up with THCStorage. My preferred order of operations is to get THStorage and THCStorage the same struct, and as much shared logic as possible, and then swap device for something more modern.</p>", "body_text": "This was just lining the logic up with THCStorage. My preferred order of operations is to get THStorage and THCStorage the same struct, and as much shared logic as possible, and then swap device for something more modern.", "in_reply_to_id": 199530089}