{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/199530089", "pull_request_review_id": 133664854, "id": 199530089, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTUzMDA4OQ==", "diff_hunk": "@@ -65,3 +67,30 @@ THLongStorage *THLongStorage_newInferSize(THLongStorage *size, ptrdiff_t nElemen\n   }\n   return copy;\n }\n+\n+THStorage* THStorage_new(at::ScalarType scalar_type)\n+{\n+  return THStorage_newWithSize(scalar_type, 0);\n+}\n+\n+THStorage* THStorage_newWithSize(at::ScalarType scalar_type, ptrdiff_t size)\n+{\n+  return THStorage_newWithAllocator(scalar_type, size, &THDefaultAllocator, NULL);\n+}\n+\n+THStorage* THStorage_newWithAllocator(at::ScalarType scalar_type, ptrdiff_t size,\n+                                      THAllocator *allocator,\n+                                      void *allocatorContext)\n+{\n+  THStorage *storage = static_cast<THStorage*>(THAlloc(sizeof(THStorage)));\n+  storage->backend = at::kCPU;\n+  storage->scalar_type = scalar_type;\n+  storage->data_ptr = allocator->malloc(allocatorContext, at::elementSize(scalar_type)*size);\n+  storage->size = size;\n+  new (&storage->refcount) std::atomic<int>(1);\n+  storage->flag = TH_STORAGE_REFCOUNTED | TH_STORAGE_RESIZABLE | TH_STORAGE_FREEMEM;\n+  storage->allocatorVoidPtr = allocator;\n+  storage->allocatorContext = allocatorContext;\n+  storage->device = 0;  // device is not meaningful on CPU", "path": "aten/src/TH/THStorage.cpp", "position": 46, "original_position": 46, "commit_id": "79142a0ec0a31353b7bfb07863ae1b6fda24c39c", "original_commit_id": "79142a0ec0a31353b7bfb07863ae1b6fda24c39c", "user": {"login": "gchanan", "id": 3768583, "node_id": "MDQ6VXNlcjM3Njg1ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3768583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gchanan", "html_url": "https://github.com/gchanan", "followers_url": "https://api.github.com/users/gchanan/followers", "following_url": "https://api.github.com/users/gchanan/following{/other_user}", "gists_url": "https://api.github.com/users/gchanan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gchanan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gchanan/subscriptions", "organizations_url": "https://api.github.com/users/gchanan/orgs", "repos_url": "https://api.github.com/users/gchanan/repos", "events_url": "https://api.github.com/users/gchanan/events{/privacy}", "received_events_url": "https://api.github.com/users/gchanan/received_events", "type": "User", "site_admin": false}, "body": "why are we using ordinals for devices again -- that has been a source of a lot of bugs.  How difficult is it to use one of the device types we have floating around?", "created_at": "2018-07-02T15:11:02Z", "updated_at": "2018-11-23T15:46:39Z", "html_url": "https://github.com/pytorch/pytorch/pull/9087#discussion_r199530089", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/9087", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/199530089"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/9087#discussion_r199530089"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/9087"}}, "body_html": "<p>why are we using ordinals for devices again -- that has been a source of a lot of bugs.  How difficult is it to use one of the device types we have floating around?</p>", "body_text": "why are we using ordinals for devices again -- that has been a source of a lot of bugs.  How difficult is it to use one of the device types we have floating around?"}