{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/199573982", "pull_request_review_id": 133720133, "id": 199573982, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTU3Mzk4Mg==", "diff_hunk": "@@ -18,8 +18,22 @@\n #define THC_GENERIC_FILE \"torch/csrc/generic/Storage.cpp\"\n #include <THC/THCGenerateAllTypes.h>\n \n+#ifndef USE_CUDA\n+#error \"Compiling torch/csrc/cuda/Storage.cpp without USE_CUDA\"\n+#endif\n+\n+// NB: When !USE_CUDA, the implementation of this lives\n+// in torch/csrc/Storage.cpp.\n+// If you ever divest libtorch of USE_CUDA, you'll have to virtualize\n+// the CUDA call.\n template<>\n-void THPPointer<THCStorage>::free() {\n-  if (ptr)\n-    THCStorage_free(LIBRARY_STATE ptr);\n+void THPPointer<THStorage>::free() {\n+  if (ptr) {\n+    if (ptr->backend == at::kCPU) {", "path": "torch/csrc/cuda/Storage.cpp", "position": 18, "original_position": 18, "commit_id": "79142a0ec0a31353b7bfb07863ae1b6fda24c39c", "original_commit_id": "79142a0ec0a31353b7bfb07863ae1b6fda24c39c", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "Well, the key is where the code lives. If the free function is in TH/THC, we don't have `USE_CUDA` macro (because we have done it the \"clean\" way inside ATen, with a separate library for CUDA/non-CUDA, no preprocessor macros). Inside `torch/csrc`, we haven't done it \"cleanly\" yet, so you can ifdef it.", "created_at": "2018-07-02T17:50:48Z", "updated_at": "2018-11-23T15:46:40Z", "html_url": "https://github.com/pytorch/pytorch/pull/9087#discussion_r199573982", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/9087", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/199573982"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/9087#discussion_r199573982"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/9087"}}, "body_html": "<p>Well, the key is where the code lives. If the free function is in TH/THC, we don't have <code>USE_CUDA</code> macro (because we have done it the \"clean\" way inside ATen, with a separate library for CUDA/non-CUDA, no preprocessor macros). Inside <code>torch/csrc</code>, we haven't done it \"cleanly\" yet, so you can ifdef it.</p>", "body_text": "Well, the key is where the code lives. If the free function is in TH/THC, we don't have USE_CUDA macro (because we have done it the \"clean\" way inside ATen, with a separate library for CUDA/non-CUDA, no preprocessor macros). Inside torch/csrc, we haven't done it \"cleanly\" yet, so you can ifdef it.", "in_reply_to_id": 199533178}