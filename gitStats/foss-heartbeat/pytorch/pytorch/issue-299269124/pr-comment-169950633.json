{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/169950633", "pull_request_review_id": 98558442, "id": 169950633, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2OTk1MDYzMw==", "diff_hunk": "@@ -0,0 +1,109 @@\n+import subprocess\n+import os\n+import socket\n+from argparse import ArgumentParser, REMAINDER\n+\n+import torch\n+\n+def parse_args():\n+    \"\"\"\n+    Helper function parsing the command line options\n+    @retval ArgumentParser\n+    \"\"\"\n+    parser = ArgumentParser(description=\"PyTorch Exec is a helper utiliy that \"\n+            \"spawns up multiple distributed training processes. The utility \"\n+            \"can be used in single-node distributed training that each \"\n+            \"distributed process will be operating on a single GPU. (for \"\n+            \"well-improved performance reasons). \"\n+            \"In this case, this utilily will launch a given number of \"\n+            \"processes per node (nproc_per_node) , while this number needs to \"\n+            \"be smaller than the number of GPUs (n_gpus) on the current system,\"\n+            \" and each process will be operating on a single GPU from GPU 0 to \"\n+            \"GPU nproc_per_node - 1. \"\n+\n+            \"This utility can be further used for multi-node \"\n+            \"distributed training by spawning up multiple processes per node \"\n+            \"for well-improved distributed performance as well. This will \"\n+            \"especially be benefitial for systems with multiple Infiniband \"\n+            \"interfaces since all of them can be utilized for aggregated \"\n+            \"communication bandwidth. Please note that this utilty and \"\n+            \"multi-process/node distributed single node or multi-node \"\n+            \"training currently only supports the NCCL distributed backend. \"\n+            \"This utilty helper will require that training script is able to \"\n+            \"parse --device=X as an argument since it will be injected by this \"\n+            \"utility. \"", "path": "tools/distributed/pytorch_dist_exec.py", "position": null, "original_position": 34, "commit_id": "03b219badb2cbdbe3bbfb6df7dddaf3d70f1088e", "original_commit_id": "82a4e859be4ced77f0a08cd86ecbdbe9967bc355", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Why can't we set `CUDA_VISIBLE_DEVICES`? This is usually what you want, because it will also ensure that the processes won't ever share a GPU, no matter what your training script does", "created_at": "2018-02-22T13:14:57Z", "updated_at": "2018-11-23T15:39:50Z", "html_url": "https://github.com/pytorch/pytorch/pull/5348#discussion_r169950633", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/5348", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/169950633"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/5348#discussion_r169950633"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/5348"}}, "body_html": "<p>Why can't we set <code>CUDA_VISIBLE_DEVICES</code>? This is usually what you want, because it will also ensure that the processes won't ever share a GPU, no matter what your training script does</p>", "body_text": "Why can't we set CUDA_VISIBLE_DEVICES? This is usually what you want, because it will also ensure that the processes won't ever share a GPU, no matter what your training script does"}