{"url": "https://api.github.com/repos/pytorch/pytorch/issues/10943", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/10943/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/10943/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/10943/events", "html_url": "https://github.com/pytorch/pytorch/issues/10943", "id": 354692072, "node_id": "MDU6SXNzdWUzNTQ2OTIwNzI=", "number": 10943, "title": "`Normal` distribution: Gaussian policy with zero gradient of mean head", "user": {"login": "zuoxingdong", "id": 18168681, "node_id": "MDQ6VXNlcjE4MTY4Njgx", "avatar_url": "https://avatars0.githubusercontent.com/u/18168681?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zuoxingdong", "html_url": "https://github.com/zuoxingdong", "followers_url": "https://api.github.com/users/zuoxingdong/followers", "following_url": "https://api.github.com/users/zuoxingdong/following{/other_user}", "gists_url": "https://api.github.com/users/zuoxingdong/gists{/gist_id}", "starred_url": "https://api.github.com/users/zuoxingdong/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zuoxingdong/subscriptions", "organizations_url": "https://api.github.com/users/zuoxingdong/orgs", "repos_url": "https://api.github.com/users/zuoxingdong/repos", "events_url": "https://api.github.com/users/zuoxingdong/events{/privacy}", "received_events_url": "https://api.github.com/users/zuoxingdong/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-08-28T11:40:26Z", "updated_at": "2018-08-30T19:24:00Z", "closed_at": "2018-08-30T19:24:00Z", "author_association": "CONTRIBUTOR", "body_html": "<p>I am implementing policy gradient for continuous control by using Gaussian policy. However, it seems backpropagation through log-probability of <code>Normal</code> will lead to zero gradient of the mean head. This will result in that the policy is unable to learn anything. Here is a sample code to explain the scenario</p>\n<pre><code>import torch.nn as nn\nfrom torch.distributions import Normal\n\n\nmean_head = nn.Linear(3, 1)\nlogvar_head = nn.Linear(3, 1)\n\nx = torch.randn(1, 3)\n\nmean = mean_head(x)\nlogvar = logvar_head(x)\nstd = torch.exp(0.5*logvar)\n\nd = Normal(mean, std)\na = d.rsample()\nlogprob = d.log_prob(a)\n\nL = -logprob\n\nmean_head.zero_grad()\nlogvar_head.zero_grad()\n\nL.backward()\n\nprint('loss: ', L)\nprint('mean: ', mean)\nprint('std: ', std)\nprint('action:', a)\nprint('')\nprint('mean grad: ', mean_head.weight.grad)\nprint('std grad: ', logvar_head.weight.grad)\n</code></pre>\n<p>it gives</p>\n<pre><code>loss:  tensor([[4.1969]], grad_fn=&lt;NegBackward&gt;)\nmean:  tensor([[0.1695]], grad_fn=&lt;ThAddmmBackward&gt;)\nstd:  tensor([[1.0948]], grad_fn=&lt;ExpBackward&gt;)\naction: tensor([[2.9337]], grad_fn=&lt;ThAddBackward&gt;)\n\nmean grad:  tensor([[0., 0., 0.]])\nstd grad:  tensor([[ 0.3316, -0.8036, -0.0475]])\n</code></pre>", "body_text": "I am implementing policy gradient for continuous control by using Gaussian policy. However, it seems backpropagation through log-probability of Normal will lead to zero gradient of the mean head. This will result in that the policy is unable to learn anything. Here is a sample code to explain the scenario\nimport torch.nn as nn\nfrom torch.distributions import Normal\n\n\nmean_head = nn.Linear(3, 1)\nlogvar_head = nn.Linear(3, 1)\n\nx = torch.randn(1, 3)\n\nmean = mean_head(x)\nlogvar = logvar_head(x)\nstd = torch.exp(0.5*logvar)\n\nd = Normal(mean, std)\na = d.rsample()\nlogprob = d.log_prob(a)\n\nL = -logprob\n\nmean_head.zero_grad()\nlogvar_head.zero_grad()\n\nL.backward()\n\nprint('loss: ', L)\nprint('mean: ', mean)\nprint('std: ', std)\nprint('action:', a)\nprint('')\nprint('mean grad: ', mean_head.weight.grad)\nprint('std grad: ', logvar_head.weight.grad)\n\nit gives\nloss:  tensor([[4.1969]], grad_fn=<NegBackward>)\nmean:  tensor([[0.1695]], grad_fn=<ThAddmmBackward>)\nstd:  tensor([[1.0948]], grad_fn=<ExpBackward>)\naction: tensor([[2.9337]], grad_fn=<ThAddBackward>)\n\nmean grad:  tensor([[0., 0., 0.]])\nstd grad:  tensor([[ 0.3316, -0.8036, -0.0475]])", "body": "I am implementing policy gradient for continuous control by using Gaussian policy. However, it seems backpropagation through log-probability of `Normal` will lead to zero gradient of the mean head. This will result in that the policy is unable to learn anything. Here is a sample code to explain the scenario\r\n\r\n```\r\nimport torch.nn as nn\r\nfrom torch.distributions import Normal\r\n\r\n\r\nmean_head = nn.Linear(3, 1)\r\nlogvar_head = nn.Linear(3, 1)\r\n\r\nx = torch.randn(1, 3)\r\n\r\nmean = mean_head(x)\r\nlogvar = logvar_head(x)\r\nstd = torch.exp(0.5*logvar)\r\n\r\nd = Normal(mean, std)\r\na = d.rsample()\r\nlogprob = d.log_prob(a)\r\n\r\nL = -logprob\r\n\r\nmean_head.zero_grad()\r\nlogvar_head.zero_grad()\r\n\r\nL.backward()\r\n\r\nprint('loss: ', L)\r\nprint('mean: ', mean)\r\nprint('std: ', std)\r\nprint('action:', a)\r\nprint('')\r\nprint('mean grad: ', mean_head.weight.grad)\r\nprint('std grad: ', logvar_head.weight.grad)\r\n```\r\nit gives\r\n```\r\nloss:  tensor([[4.1969]], grad_fn=<NegBackward>)\r\nmean:  tensor([[0.1695]], grad_fn=<ThAddmmBackward>)\r\nstd:  tensor([[1.0948]], grad_fn=<ExpBackward>)\r\naction: tensor([[2.9337]], grad_fn=<ThAddBackward>)\r\n\r\nmean grad:  tensor([[0., 0., 0.]])\r\nstd grad:  tensor([[ 0.3316, -0.8036, -0.0475]])\r\n```"}