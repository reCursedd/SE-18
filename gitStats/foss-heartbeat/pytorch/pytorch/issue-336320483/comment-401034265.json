{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/401034265", "html_url": "https://github.com/pytorch/pytorch/pull/8945#issuecomment-401034265", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/8945", "id": 401034265, "node_id": "MDEyOklzc3VlQ29tbWVudDQwMTAzNDI2NQ==", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "created_at": "2018-06-28T13:27:58Z", "updated_at": "2018-06-28T13:27:58Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1041752\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/vadimkantorov\">@vadimkantorov</a> Unfortunately not. This might be a good addition (and pretty easy to add), if there are other cases where we might need it. Maybe we should generalize this into some sort of arbitrary equality test against a floating point number? (CC <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=655866\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/colesbury\">@colesbury</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1716488\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/cpuhrsch\">@cpuhrsch</a> for more opinions).</p>\n<p>I do have a question beyond what this patch does: when the exponent is close to zero (but not exactly zero), what happens to the gradients? Is it numerically stable? If it's not, it would be nice (though not strictly necessary) to fix that too.</p>", "body_text": "@vadimkantorov Unfortunately not. This might be a good addition (and pretty easy to add), if there are other cases where we might need it. Maybe we should generalize this into some sort of arbitrary equality test against a floating point number? (CC @colesbury @cpuhrsch for more opinions).\nI do have a question beyond what this patch does: when the exponent is close to zero (but not exactly zero), what happens to the gradients? Is it numerically stable? If it's not, it would be nice (though not strictly necessary) to fix that too.", "body": "@vadimkantorov Unfortunately not. This might be a good addition (and pretty easy to add), if there are other cases where we might need it. Maybe we should generalize this into some sort of arbitrary equality test against a floating point number? (CC @colesbury @cpuhrsch for more opinions).\r\n\r\nI do have a question beyond what this patch does: when the exponent is close to zero (but not exactly zero), what happens to the gradients? Is it numerically stable? If it's not, it would be nice (though not strictly necessary) to fix that too."}