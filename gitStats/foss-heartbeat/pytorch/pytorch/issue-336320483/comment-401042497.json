{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/401042497", "html_url": "https://github.com/pytorch/pytorch/pull/8945#issuecomment-401042497", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/8945", "id": 401042497, "node_id": "MDEyOklzc3VlQ29tbWVudDQwMTA0MjQ5Nw==", "user": {"login": "vadimkantorov", "id": 1041752, "node_id": "MDQ6VXNlcjEwNDE3NTI=", "avatar_url": "https://avatars0.githubusercontent.com/u/1041752?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vadimkantorov", "html_url": "https://github.com/vadimkantorov", "followers_url": "https://api.github.com/users/vadimkantorov/followers", "following_url": "https://api.github.com/users/vadimkantorov/following{/other_user}", "gists_url": "https://api.github.com/users/vadimkantorov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vadimkantorov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vadimkantorov/subscriptions", "organizations_url": "https://api.github.com/users/vadimkantorov/orgs", "repos_url": "https://api.github.com/users/vadimkantorov/repos", "events_url": "https://api.github.com/users/vadimkantorov/events{/privacy}", "received_events_url": "https://api.github.com/users/vadimkantorov/received_events", "type": "User", "site_admin": false}, "created_at": "2018-06-28T13:52:55Z", "updated_at": "2018-06-28T13:54:07Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=13564\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ezyang\">@ezyang</a> Thinking more about it, merging a comparison binary op and <code>torch.where</code> goes along the op fusion line (maybe it's a good case for the automatic fuser?). Comparison + torch.where is a frequent use-case I guess, but surfacing all comparison ops through <code>where</code> may bring unjustified api complexity.</p>\n<p>The zero special case here would work because of a lucky coincidence: <code>exponent</code> needs to be compared to zero.</p>", "body_text": "@ezyang Thinking more about it, merging a comparison binary op and torch.where goes along the op fusion line (maybe it's a good case for the automatic fuser?). Comparison + torch.where is a frequent use-case I guess, but surfacing all comparison ops through where may bring unjustified api complexity.\nThe zero special case here would work because of a lucky coincidence: exponent needs to be compared to zero.", "body": "@ezyang Thinking more about it, merging a comparison binary op and `torch.where` goes along the op fusion line (maybe it's a good case for the automatic fuser?). Comparison + torch.where is a frequent use-case I guess, but surfacing all comparison ops through `where` may bring unjustified api complexity.\r\n\r\nThe zero special case here would work because of a lucky coincidence: `exponent` needs to be compared to zero."}