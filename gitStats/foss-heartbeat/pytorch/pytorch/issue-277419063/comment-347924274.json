{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/347924274", "html_url": "https://github.com/pytorch/pytorch/issues/3924#issuecomment-347924274", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/3924", "id": 347924274, "node_id": "MDEyOklzc3VlQ29tbWVudDM0NzkyNDI3NA==", "user": {"login": "zou3519", "id": 5652049, "node_id": "MDQ6VXNlcjU2NTIwNDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/5652049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zou3519", "html_url": "https://github.com/zou3519", "followers_url": "https://api.github.com/users/zou3519/followers", "following_url": "https://api.github.com/users/zou3519/following{/other_user}", "gists_url": "https://api.github.com/users/zou3519/gists{/gist_id}", "starred_url": "https://api.github.com/users/zou3519/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zou3519/subscriptions", "organizations_url": "https://api.github.com/users/zou3519/orgs", "repos_url": "https://api.github.com/users/zou3519/repos", "events_url": "https://api.github.com/users/zou3519/events{/privacy}", "received_events_url": "https://api.github.com/users/zou3519/received_events", "type": "User", "site_admin": false}, "created_at": "2017-11-29T16:54:43Z", "updated_at": "2017-11-29T16:54:52Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Most of the other loss functions act in this way as well (ie, [<code>kldivloss</code>])(<a href=\"http://pytorch.org/docs/master/nn.html?highlight=kldivloss#torch.nn.KLDivLoss\" rel=\"nofollow\">http://pytorch.org/docs/master/nn.html?highlight=kldivloss#torch.nn.KLDivLoss</a>). I don't have a good reason for why it's implemented like this other than this behavior was taken from lua torch.</p>\n<p>You can use <code>reduce=False</code> in your loss, sum the losses, and divide by the batch size to achieve the behavior you're looking for.</p>", "body_text": "Most of the other loss functions act in this way as well (ie, [kldivloss])(http://pytorch.org/docs/master/nn.html?highlight=kldivloss#torch.nn.KLDivLoss). I don't have a good reason for why it's implemented like this other than this behavior was taken from lua torch.\nYou can use reduce=False in your loss, sum the losses, and divide by the batch size to achieve the behavior you're looking for.", "body": "Most of the other loss functions act in this way as well (ie, [`kldivloss`])(http://pytorch.org/docs/master/nn.html?highlight=kldivloss#torch.nn.KLDivLoss). I don't have a good reason for why it's implemented like this other than this behavior was taken from lua torch.\r\n\r\nYou can use `reduce=False` in your loss, sum the losses, and divide by the batch size to achieve the behavior you're looking for."}