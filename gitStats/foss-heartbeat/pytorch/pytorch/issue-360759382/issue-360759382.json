{"url": "https://api.github.com/repos/pytorch/pytorch/issues/11747", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/11747/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/11747/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/11747/events", "html_url": "https://github.com/pytorch/pytorch/issues/11747", "id": 360759382, "node_id": "MDU6SXNzdWUzNjA3NTkzODI=", "number": 11747, "title": "[distributions]: Creating `Categorical` is 100x slower than `Normal`", "user": {"login": "zuoxingdong", "id": 18168681, "node_id": "MDQ6VXNlcjE4MTY4Njgx", "avatar_url": "https://avatars0.githubusercontent.com/u/18168681?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zuoxingdong", "html_url": "https://github.com/zuoxingdong", "followers_url": "https://api.github.com/users/zuoxingdong/followers", "following_url": "https://api.github.com/users/zuoxingdong/following{/other_user}", "gists_url": "https://api.github.com/users/zuoxingdong/gists{/gist_id}", "starred_url": "https://api.github.com/users/zuoxingdong/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zuoxingdong/subscriptions", "organizations_url": "https://api.github.com/users/zuoxingdong/orgs", "repos_url": "https://api.github.com/users/zuoxingdong/repos", "events_url": "https://api.github.com/users/zuoxingdong/events{/privacy}", "received_events_url": "https://api.github.com/users/zuoxingdong/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-09-17T08:03:21Z", "updated_at": "2018-09-17T08:05:08Z", "closed_at": null, "author_association": "CONTRIBUTOR", "body_html": "<p>In RL, we often need to create a distribution over actions at each time step during rollout by using the policy network to select actions. It seems now creating <code>Categorical</code> distribution is much slower than <code>Normal</code> distribution during rollout.</p>\n<h2>Toy code:</h2>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">from</span> time <span class=\"pl-k\">import</span> time\n<span class=\"pl-k\">import</span> torch\n<span class=\"pl-k\">import</span> torch.nn.functional <span class=\"pl-k\">as</span> F\n<span class=\"pl-k\">from</span> torch.distributions <span class=\"pl-k\">import</span> Categorical, Normal\n\n\nt <span class=\"pl-k\">=</span> time()\n<span class=\"pl-k\">for</span> _ <span class=\"pl-k\">in</span> <span class=\"pl-c1\">range</span>(<span class=\"pl-c1\">100</span>):\n    probs <span class=\"pl-k\">=</span> F.softmax(torch.randn(<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">32</span>), <span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>)\n    dist <span class=\"pl-k\">=</span> Categorical(probs)\nt1 <span class=\"pl-k\">=</span> time() <span class=\"pl-k\">-</span> t\n<span class=\"pl-c1\">print</span>(t1)\n\nt <span class=\"pl-k\">=</span> time()\n<span class=\"pl-k\">for</span> _ <span class=\"pl-k\">in</span> <span class=\"pl-c1\">range</span>(<span class=\"pl-c1\">100</span>):\n    mu <span class=\"pl-k\">=</span> torch.randn(<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">32</span>)\n    std <span class=\"pl-k\">=</span> torch.randn(<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">32</span>)\n    dist <span class=\"pl-k\">=</span> Normal(mu, std)\nt2 <span class=\"pl-k\">=</span> time() <span class=\"pl-k\">-</span> t\n<span class=\"pl-c1\">print</span>(t2)\n\n<span class=\"pl-c1\">print</span>(t1<span class=\"pl-k\">/</span>t2)</pre></div>\n<p>gives</p>\n<pre><code>0.5241701602935791\n0.002852201461791992\n183.77739697400318\n</code></pre>\n<p>which almost 180x slower for <code>Categorical</code>.</p>\n<p>By tracing back to the code, it turns out the slow part is contributed by <a href=\"https://github.com/pytorch/pytorch/blob/master/torch/distributions/categorical.py#L50\">this line</a>, another toy code to show this</p>\n<div class=\"highlight highlight-source-python\"><pre>t <span class=\"pl-k\">=</span> time()\n<span class=\"pl-k\">for</span> _ <span class=\"pl-k\">in</span> <span class=\"pl-c1\">range</span>(<span class=\"pl-c1\">100</span>):\n    p <span class=\"pl-k\">=</span> F.softmax(torch.randn(<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">32</span>), <span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>)\n    p <span class=\"pl-k\">=</span> p<span class=\"pl-k\">/</span>p.sum(<span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>, <span class=\"pl-v\">keepdim</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>)\n<span class=\"pl-c1\">print</span>(time() <span class=\"pl-k\">-</span> t)</pre></div>\n<p>gives</p>\n<pre><code>0.4742550849914551\n</code></pre>\n<h2>System Info</h2>\n<p>PyTorch: 0.4.1</p>", "body_text": "In RL, we often need to create a distribution over actions at each time step during rollout by using the policy network to select actions. It seems now creating Categorical distribution is much slower than Normal distribution during rollout.\nToy code:\nfrom time import time\nimport torch\nimport torch.nn.functional as F\nfrom torch.distributions import Categorical, Normal\n\n\nt = time()\nfor _ in range(100):\n    probs = F.softmax(torch.randn(1, 32), -1)\n    dist = Categorical(probs)\nt1 = time() - t\nprint(t1)\n\nt = time()\nfor _ in range(100):\n    mu = torch.randn(1, 32)\n    std = torch.randn(1, 32)\n    dist = Normal(mu, std)\nt2 = time() - t\nprint(t2)\n\nprint(t1/t2)\ngives\n0.5241701602935791\n0.002852201461791992\n183.77739697400318\n\nwhich almost 180x slower for Categorical.\nBy tracing back to the code, it turns out the slow part is contributed by this line, another toy code to show this\nt = time()\nfor _ in range(100):\n    p = F.softmax(torch.randn(1, 32), -1)\n    p = p/p.sum(-1, keepdim=True)\nprint(time() - t)\ngives\n0.4742550849914551\n\nSystem Info\nPyTorch: 0.4.1", "body": "In RL, we often need to create a distribution over actions at each time step during rollout by using the policy network to select actions. It seems now creating `Categorical` distribution is much slower than `Normal` distribution during rollout. \r\n\r\n## Toy code:\r\n\r\n```python\r\nfrom time import time\r\nimport torch\r\nimport torch.nn.functional as F\r\nfrom torch.distributions import Categorical, Normal\r\n\r\n\r\nt = time()\r\nfor _ in range(100):\r\n    probs = F.softmax(torch.randn(1, 32), -1)\r\n    dist = Categorical(probs)\r\nt1 = time() - t\r\nprint(t1)\r\n\r\nt = time()\r\nfor _ in range(100):\r\n    mu = torch.randn(1, 32)\r\n    std = torch.randn(1, 32)\r\n    dist = Normal(mu, std)\r\nt2 = time() - t\r\nprint(t2)\r\n\r\nprint(t1/t2)\r\n```\r\ngives \r\n```\r\n0.5241701602935791\r\n0.002852201461791992\r\n183.77739697400318\r\n```\r\nwhich almost 180x slower for `Categorical`. \r\n\r\nBy tracing back to the code, it turns out the slow part is contributed by [this line](https://github.com/pytorch/pytorch/blob/master/torch/distributions/categorical.py#L50), another toy code to show this\r\n\r\n```python\r\nt = time()\r\nfor _ in range(100):\r\n    p = F.softmax(torch.randn(1, 32), -1)\r\n    p = p/p.sum(-1, keepdim=True)\r\nprint(time() - t)\r\n```\r\ngives\r\n```\r\n0.4742550849914551\r\n```\r\n\r\n## System Info\r\n\r\nPyTorch: 0.4.1"}