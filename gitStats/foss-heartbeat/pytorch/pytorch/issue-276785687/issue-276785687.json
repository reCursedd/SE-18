{"url": "https://api.github.com/repos/pytorch/pytorch/issues/3879", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/3879/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/3879/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/3879/events", "html_url": "https://github.com/pytorch/pytorch/issues/3879", "id": 276785687, "node_id": "MDU6SXNzdWUyNzY3ODU2ODc=", "number": 3879, "title": "Setting the weight argument in nn.Loss functions, suggestions for a better error message", "user": {"login": "imwillhang", "id": 7892184, "node_id": "MDQ6VXNlcjc4OTIxODQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/7892184?v=4", "gravatar_id": "", "url": "https://api.github.com/users/imwillhang", "html_url": "https://github.com/imwillhang", "followers_url": "https://api.github.com/users/imwillhang/followers", "following_url": "https://api.github.com/users/imwillhang/following{/other_user}", "gists_url": "https://api.github.com/users/imwillhang/gists{/gist_id}", "starred_url": "https://api.github.com/users/imwillhang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/imwillhang/subscriptions", "organizations_url": "https://api.github.com/users/imwillhang/orgs", "repos_url": "https://api.github.com/users/imwillhang/repos", "events_url": "https://api.github.com/users/imwillhang/events{/privacy}", "received_events_url": "https://api.github.com/users/imwillhang/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2017-11-25T23:28:45Z", "updated_at": "2018-04-27T06:57:20Z", "closed_at": "2017-11-30T20:51:25Z", "author_association": "NONE", "body_html": "<p>I spent 20 minutes banging my head against this until I figured it out. When the <em>weight</em> Tensor argument in nn.Loss is NOT .cuda() when the Variables going into the function are .cuda(), PyTorch will raise an uninformative error message.</p>\n<p>Perhaps the error message could check if the arguments going into the Loss definition are .cuda() and inform the user to set all arguments to .cuda() or not .cuda() depending on the inputs into the instance of the loss function?</p>", "body_text": "I spent 20 minutes banging my head against this until I figured it out. When the weight Tensor argument in nn.Loss is NOT .cuda() when the Variables going into the function are .cuda(), PyTorch will raise an uninformative error message.\nPerhaps the error message could check if the arguments going into the Loss definition are .cuda() and inform the user to set all arguments to .cuda() or not .cuda() depending on the inputs into the instance of the loss function?", "body": "I spent 20 minutes banging my head against this until I figured it out. When the _weight_ Tensor argument in nn.Loss is NOT .cuda() when the Variables going into the function are .cuda(), PyTorch will raise an uninformative error message. \r\n\r\nPerhaps the error message could check if the arguments going into the Loss definition are .cuda() and inform the user to set all arguments to .cuda() or not .cuda() depending on the inputs into the instance of the loss function?"}