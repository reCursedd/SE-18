{"url": "https://api.github.com/repos/pytorch/pytorch/issues/4250", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/4250/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/4250/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/4250/events", "html_url": "https://github.com/pytorch/pytorch/issues/4250", "id": 283286693, "node_id": "MDU6SXNzdWUyODMyODY2OTM=", "number": 4250, "title": "JIT tracer cannot handle inplace updates", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 679953983, "node_id": "MDU6TGFiZWw2Nzk5NTM5ODM=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/jit", "name": "jit", "color": "c5def5", "default": false}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-12-19T16:15:03Z", "updated_at": "2018-07-10T18:18:56Z", "closed_at": null, "author_association": "CONTRIBUTOR", "body_html": "<p>Here is a pretty common idiom:</p>\n<pre><code>    def test_inplace_copy(self):\n        x = Variable(torch.randn(4, 4), requires_grad=True)\n        def f(x):\n            out = Variable(torch.zeros(x.size()))\n            out.copy_(x)\n            return out\n        trace, z = torch.jit.trace(f, (x, ), nderivs=0)\n        torch._C._jit_pass_lint(trace)\n        torch._C._jit_pass_dce(trace)\n        self.assertExpectedTrace(trace)\n</code></pre>\n<p>The tracer fails with an assertion failure when you do this.  Matters get worse when you take a view on out, and do a copy.  Essentially, there is a giant missing feature, which is when you do an inplace update, the tracer needs to compute a function of the original two inputs and trace the result accordingly.</p>\n<p>It is important for us to support tracing this correctly because this idiom is used a lot for backwards; e.g., <code>as_strided</code>'s backward works this way.</p>\n<p>CC <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=4583066\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/apaszke\">@apaszke</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=370202\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/zdevito\">@zdevito</a></p>", "body_text": "Here is a pretty common idiom:\n    def test_inplace_copy(self):\n        x = Variable(torch.randn(4, 4), requires_grad=True)\n        def f(x):\n            out = Variable(torch.zeros(x.size()))\n            out.copy_(x)\n            return out\n        trace, z = torch.jit.trace(f, (x, ), nderivs=0)\n        torch._C._jit_pass_lint(trace)\n        torch._C._jit_pass_dce(trace)\n        self.assertExpectedTrace(trace)\n\nThe tracer fails with an assertion failure when you do this.  Matters get worse when you take a view on out, and do a copy.  Essentially, there is a giant missing feature, which is when you do an inplace update, the tracer needs to compute a function of the original two inputs and trace the result accordingly.\nIt is important for us to support tracing this correctly because this idiom is used a lot for backwards; e.g., as_strided's backward works this way.\nCC @apaszke @zdevito", "body": "Here is a pretty common idiom:\r\n\r\n```\r\n    def test_inplace_copy(self):\r\n        x = Variable(torch.randn(4, 4), requires_grad=True)\r\n        def f(x):\r\n            out = Variable(torch.zeros(x.size()))\r\n            out.copy_(x)\r\n            return out\r\n        trace, z = torch.jit.trace(f, (x, ), nderivs=0)\r\n        torch._C._jit_pass_lint(trace)\r\n        torch._C._jit_pass_dce(trace)\r\n        self.assertExpectedTrace(trace)\r\n```\r\n\r\nThe tracer fails with an assertion failure when you do this.  Matters get worse when you take a view on out, and do a copy.  Essentially, there is a giant missing feature, which is when you do an inplace update, the tracer needs to compute a function of the original two inputs and trace the result accordingly.\r\n\r\nIt is important for us to support tracing this correctly because this idiom is used a lot for backwards; e.g., `as_strided`'s backward works this way.\r\n\r\nCC @apaszke @zdevito "}