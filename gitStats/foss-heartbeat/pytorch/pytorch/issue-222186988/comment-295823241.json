{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/295823241", "html_url": "https://github.com/pytorch/pytorch/issues/1274#issuecomment-295823241", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/1274", "id": 295823241, "node_id": "MDEyOklzc3VlQ29tbWVudDI5NTgyMzI0MQ==", "user": {"login": "kdexd", "id": 10494087, "node_id": "MDQ6VXNlcjEwNDk0MDg3", "avatar_url": "https://avatars1.githubusercontent.com/u/10494087?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kdexd", "html_url": "https://github.com/kdexd", "followers_url": "https://api.github.com/users/kdexd/followers", "following_url": "https://api.github.com/users/kdexd/following{/other_user}", "gists_url": "https://api.github.com/users/kdexd/gists{/gist_id}", "starred_url": "https://api.github.com/users/kdexd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kdexd/subscriptions", "organizations_url": "https://api.github.com/users/kdexd/orgs", "repos_url": "https://api.github.com/users/kdexd/repos", "events_url": "https://api.github.com/users/kdexd/events{/privacy}", "received_events_url": "https://api.github.com/users/kdexd/received_events", "type": "User", "site_admin": false}, "created_at": "2017-04-20T17:21:11Z", "updated_at": "2017-04-20T17:21:11Z", "author_association": "NONE", "body_html": "<p>This might be helpful, following the example from their docs:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> np.int16(<span class=\"pl-c1\">32000</span>) <span class=\"pl-k\">*</span> np.int16(<span class=\"pl-c1\">3</span>)\n   <span class=\"pl-c1\">30464</span>\n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> old_settings <span class=\"pl-k\">=</span> np.seterr(<span class=\"pl-v\">all</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>warn<span class=\"pl-pds\">'</span></span>, <span class=\"pl-v\">over</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>raise<span class=\"pl-pds\">'</span></span>)\n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> np.int16(<span class=\"pl-c1\">32000</span>) <span class=\"pl-k\">*</span> np.int16(<span class=\"pl-c1\">3</span>)\n Traceback (most recent call last):\n   File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>&lt;stdin&gt;<span class=\"pl-pds\">\"</span></span>, line <span class=\"pl-c1\">1</span>, <span class=\"pl-k\">in</span> <span class=\"pl-k\">&lt;</span>module<span class=\"pl-k\">&gt;</span>\n <span class=\"pl-c1\">FloatingPointError</span>: overflow encountered <span class=\"pl-k\">in</span> short_scalars</pre></div>\n<p>Such error raising might be helpful for pytorch when a user is playing with quantization / deep compression. This is one thing I can think of.</p>", "body_text": "This might be helpful, following the example from their docs:\n>>> np.int16(32000) * np.int16(3)\n   30464\n>>> old_settings = np.seterr(all='warn', over='raise')\n>>> np.int16(32000) * np.int16(3)\n Traceback (most recent call last):\n   File \"<stdin>\", line 1, in <module>\n FloatingPointError: overflow encountered in short_scalars\nSuch error raising might be helpful for pytorch when a user is playing with quantization / deep compression. This is one thing I can think of.", "body": "This might be helpful, following the example from their docs:\r\n```python\r\n>>> np.int16(32000) * np.int16(3)\r\n   30464\r\n>>> old_settings = np.seterr(all='warn', over='raise')\r\n>>> np.int16(32000) * np.int16(3)\r\n Traceback (most recent call last):\r\n   File \"<stdin>\", line 1, in <module>\r\n FloatingPointError: overflow encountered in short_scalars\r\n```\r\nSuch error raising might be helpful for pytorch when a user is playing with quantization / deep compression. This is one thing I can think of."}