{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/425770094", "html_url": "https://github.com/pytorch/pytorch/issues/3472#issuecomment-425770094", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/3472", "id": 425770094, "node_id": "MDEyOklzc3VlQ29tbWVudDQyNTc3MDA5NA==", "user": {"login": "weiyangfb", "id": 38509346, "node_id": "MDQ6VXNlcjM4NTA5MzQ2", "avatar_url": "https://avatars1.githubusercontent.com/u/38509346?v=4", "gravatar_id": "", "url": "https://api.github.com/users/weiyangfb", "html_url": "https://github.com/weiyangfb", "followers_url": "https://api.github.com/users/weiyangfb/followers", "following_url": "https://api.github.com/users/weiyangfb/following{/other_user}", "gists_url": "https://api.github.com/users/weiyangfb/gists{/gist_id}", "starred_url": "https://api.github.com/users/weiyangfb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/weiyangfb/subscriptions", "organizations_url": "https://api.github.com/users/weiyangfb/orgs", "repos_url": "https://api.github.com/users/weiyangfb/repos", "events_url": "https://api.github.com/users/weiyangfb/events{/privacy}", "received_events_url": "https://api.github.com/users/weiyangfb/received_events", "type": "User", "site_admin": false}, "created_at": "2018-10-01T01:46:16Z", "updated_at": "2018-10-01T01:46:16Z", "author_association": "CONTRIBUTOR", "body_html": "<p>I think right now <code>mm(S, D) -&gt; D</code> is parallelize at CPU: <div class=\"border rounded-1 my-2\">\n  <div class=\"f6 px-3 py-2 lh-condensed border-bottom bg-gray-light\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/pytorch/pytorch/blob/c3817e85fabd59cb40a2c5b0a5c0ab5b5da3a01c/aten/src/ATen/native/sparse/SparseTensorMath.cpp#L492-L508\">pytorch/aten/src/ATen/native/sparse/SparseTensorMath.cpp</a>\n    </p>\n    <p class=\"mb-0 text-gray-light\">\n        Lines 492 to 508\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/pytorch/pytorch/commit/c3817e85fabd59cb40a2c5b0a5c0ab5b5da3a01c\">c3817e8</a>\n    </p>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L492\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"492\"></td>\n          <td id=\"LC492\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> #<span class=\"pl-k\">pragma</span> omp parallel for private(h, i) schedule(static) if (nnz &gt; 10000) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L493\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"493\"></td>\n          <td id=\"LC493\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   <span class=\"pl-k\">for</span> (h = <span class=\"pl-c1\">0</span>; h &lt; dim_i; h++) { </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L494\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"494\"></td>\n          <td id=\"LC494\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     <span class=\"pl-c1\">int64_t</span> i_start = csr_accessor[h]; </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L495\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"495\"></td>\n          <td id=\"LC495\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     <span class=\"pl-c1\">int64_t</span> i_end = csr_accessor[h+<span class=\"pl-c1\">1</span>]; </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L496\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"496\"></td>\n          <td id=\"LC496\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     <span class=\"pl-k\">for</span> (i = i_start; i &lt; i_end; i++) { </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L497\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"497\"></td>\n          <td id=\"LC497\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">       <span class=\"pl-c1\">scalar_t</span> val = values_accessor[i]; </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L498\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"498\"></td>\n          <td id=\"LC498\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">       <span class=\"pl-c1\">int64_t</span> col = indices_accessor[<span class=\"pl-c1\">1</span>][i]; </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L499\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"499\"></td>\n          <td id=\"LC499\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">       <span class=\"pl-k\">if</span> (col &gt;= <span class=\"pl-c1\">0</span> &amp;&amp; col &lt; dim_j) { </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L500\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"500\"></td>\n          <td id=\"LC500\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">         THBlas_axpy&lt;<span class=\"pl-c1\">scalar_t</span>&gt;(dim_k, </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L501\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"501\"></td>\n          <td id=\"LC501\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">             cast_alpha * val, </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L502\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"502\"></td>\n          <td id=\"LC502\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">             dense_ptr + col * dense_stride0, dense_stride1, </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L503\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"503\"></td>\n          <td id=\"LC503\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">             r_ptr + h * r_stride0, r_stride1); </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L504\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"504\"></td>\n          <td id=\"LC504\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">       } <span class=\"pl-k\">else</span> { </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L505\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"505\"></td>\n          <td id=\"LC505\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">         <span class=\"pl-c1\">AT_ERROR</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>addmm: index out of bound: <span class=\"pl-pds\">\"</span></span>, col, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span> not between 1 and <span class=\"pl-pds\">\"</span></span>, dim_j); </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L506\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"506\"></td>\n          <td id=\"LC506\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">       } </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L507\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"507\"></td>\n          <td id=\"LC507\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     } </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L508\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"508\"></td>\n          <td id=\"LC508\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   } </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n</p>\n<p>I am closing this right now, please feel free to open a new issue if needed</p>", "body_text": "I think right now mm(S, D) -> D is parallelize at CPU: \n  \n    \n      pytorch/aten/src/ATen/native/sparse/SparseTensorMath.cpp\n    \n    \n        Lines 492 to 508\n      in\n      c3817e8\n    \n    \n    \n    \n\n        \n          \n           #pragma omp parallel for private(h, i) schedule(static) if (nnz > 10000) \n        \n\n        \n          \n             for (h = 0; h < dim_i; h++) { \n        \n\n        \n          \n               int64_t i_start = csr_accessor[h]; \n        \n\n        \n          \n               int64_t i_end = csr_accessor[h+1]; \n        \n\n        \n          \n               for (i = i_start; i < i_end; i++) { \n        \n\n        \n          \n                 scalar_t val = values_accessor[i]; \n        \n\n        \n          \n                 int64_t col = indices_accessor[1][i]; \n        \n\n        \n          \n                 if (col >= 0 && col < dim_j) { \n        \n\n        \n          \n                   THBlas_axpy<scalar_t>(dim_k, \n        \n\n        \n          \n                       cast_alpha * val, \n        \n\n        \n          \n                       dense_ptr + col * dense_stride0, dense_stride1, \n        \n\n        \n          \n                       r_ptr + h * r_stride0, r_stride1); \n        \n\n        \n          \n                 } else { \n        \n\n        \n          \n                   AT_ERROR(\"addmm: index out of bound: \", col, \" not between 1 and \", dim_j); \n        \n\n        \n          \n                 } \n        \n\n        \n          \n               } \n        \n\n        \n          \n             } \n        \n    \n  \n\n\nI am closing this right now, please feel free to open a new issue if needed", "body": "I think right now `mm(S, D) -> D` is parallelize at CPU: https://github.com/pytorch/pytorch/blob/c3817e85fabd59cb40a2c5b0a5c0ab5b5da3a01c/aten/src/ATen/native/sparse/SparseTensorMath.cpp#L492-L508\r\n\r\nI am closing this right now, please feel free to open a new issue if needed"}