{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/151530461", "pull_request_review_id": 77254802, "id": 151530461, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MTUzMDQ2MQ==", "diff_hunk": "@@ -0,0 +1,219 @@\n+// Indexing tensors by by tensors\n+//\n+// This corresponds to \"advanced indexing\" in NumPy. The two operations are:\n+//\n+//  index(Tensor self, indices) -> Tensor\n+//  index_put_(Tensor self, indices, value)\n+//\n+// The index is a TensorList containg kLong or kByte tensors or nulls. Byte\n+// tensors (boolean masks) are expanded to long tensors via nonzero(). Null\n+// tensors signify that the dimension is not indexed.\n+//\n+// All indexes are broadcast together and iterated as *one*. From NumPy:\n+//\n+// result[i_1, ..., i_M] == x[ind_1[i_1, ..., i_M], ind_2[i_1, ..., i_M],\n+//                           ..., ind_N[i_1, ..., i_M]]\n+//\n+// Note 1: ByteTensors expand to index as many dimensions as there are in the\n+// mask.\n+//\n+// Note 2: The behavior is more complicated when the index tensors are not all\n+// adjacent (e.g. x[[0, 1], :, [2, 3]]). In this case, self and the index\n+// tensors are transposed to the front: x.transpose(1, 2)[[0, 1], [2, 3]]\n+\n+\n+#include \"ATen/ATen.h\"\n+#include \"ATen/NativeFunctions.h\"\n+#include \"ATen/ExpandUtils.h\"\n+\n+#include <algorithm>\n+#include <functional>\n+#include <numeric>\n+#include <vector>\n+\n+namespace at { namespace native {\n+\n+static bool isByteTensor(const Tensor & t) {\n+  return t.defined() && t.type().scalarType() == kByte;", "path": "aten/src/ATen/native/Indexing.cpp", "position": null, "original_position": 37, "commit_id": "3c591710eb478eb94498f6333c8a1428a1557933", "original_commit_id": "0c0dc790c67cecccff28cbe732f763fe9e886fd5", "user": {"login": "colesbury", "id": 655866, "node_id": "MDQ6VXNlcjY1NTg2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/655866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colesbury", "html_url": "https://github.com/colesbury", "followers_url": "https://api.github.com/users/colesbury/followers", "following_url": "https://api.github.com/users/colesbury/following{/other_user}", "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions", "organizations_url": "https://api.github.com/users/colesbury/orgs", "repos_url": "https://api.github.com/users/colesbury/repos", "events_url": "https://api.github.com/users/colesbury/events{/privacy}", "received_events_url": "https://api.github.com/users/colesbury/received_events", "type": "User", "site_admin": false}, "body": "Oh, good point. I think that will work now with Greg's `UndefinedType` change.", "created_at": "2017-11-16T20:37:51Z", "updated_at": "2018-11-23T15:36:36Z", "html_url": "https://github.com/pytorch/pytorch/pull/3725#discussion_r151530461", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/3725", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/151530461"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/3725#discussion_r151530461"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/3725"}}, "body_html": "<p>Oh, good point. I think that will work now with Greg's <code>UndefinedType</code> change.</p>", "body_text": "Oh, good point. I think that will work now with Greg's UndefinedType change.", "in_reply_to_id": 151471619}