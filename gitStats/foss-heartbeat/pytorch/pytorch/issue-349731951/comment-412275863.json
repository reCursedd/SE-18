{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/412275863", "html_url": "https://github.com/pytorch/pytorch/issues/10433#issuecomment-412275863", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/10433", "id": 412275863, "node_id": "MDEyOklzc3VlQ29tbWVudDQxMjI3NTg2Mw==", "user": {"login": "lantiga", "id": 191033, "node_id": "MDQ6VXNlcjE5MTAzMw==", "avatar_url": "https://avatars2.githubusercontent.com/u/191033?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lantiga", "html_url": "https://github.com/lantiga", "followers_url": "https://api.github.com/users/lantiga/followers", "following_url": "https://api.github.com/users/lantiga/following{/other_user}", "gists_url": "https://api.github.com/users/lantiga/gists{/gist_id}", "starred_url": "https://api.github.com/users/lantiga/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lantiga/subscriptions", "organizations_url": "https://api.github.com/users/lantiga/orgs", "repos_url": "https://api.github.com/users/lantiga/repos", "events_url": "https://api.github.com/users/lantiga/events{/privacy}", "received_events_url": "https://api.github.com/users/lantiga/received_events", "type": "User", "site_admin": false}, "created_at": "2018-08-11T13:41:46Z", "updated_at": "2018-08-11T13:41:46Z", "author_association": "COLLABORATOR", "body_html": "<p>Basically, <code>ExecutionPlanAutogradFunction</code> is set as <code>grad_fn</code> in <code>ExecutionPlan::runWithGrad</code> <div class=\"border rounded-1 my-2\">\n  <div class=\"f6 px-3 py-2 lh-condensed border-bottom bg-gray-light\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/pytorch/pytorch/blob/29406a2c4c36d3c155abed16cf75f26af44426d4/torch/csrc/jit/graph_executor.cpp#L173-L175\">pytorch/torch/csrc/jit/graph_executor.cpp</a>\n    </p>\n    <p class=\"mb-0 text-gray-light\">\n        Lines 173 to 175\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/pytorch/pytorch/commit/29406a2c4c36d3c155abed16cf75f26af44426d4\">29406a2</a>\n    </p>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L173\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"173\"></td>\n          <td id=\"LC173\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-k\">void</span> <span class=\"pl-en\">runWithGrad</span>(Stack &amp; stack) <span class=\"pl-k\">const</span> { </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L174\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"174\"></td>\n          <td id=\"LC174\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   <span class=\"pl-k\">auto</span> grad_fn = std::make_shared&lt;ExecutionPlanAutogradFunction&gt;(grad_executor, </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L175\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"175\"></td>\n          <td id=\"LC175\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     grad.<span class=\"pl-smi\">df_input_captured_inputs</span>.<span class=\"pl-c1\">size</span>() + grad.<span class=\"pl-smi\">df_input_captured_outputs</span>.<span class=\"pl-c1\">size</span>()); </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n</p>\n<p>However, <code>ExecutionPlanAutogradFunction</code> is never registered through <code>registerCppFunction</code>, which triggers the exception in <code>functionToPyObject</code> <div class=\"border rounded-1 my-2\">\n  <div class=\"f6 px-3 py-2 lh-condensed border-bottom bg-gray-light\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/pytorch/pytorch/blob/86eeeab7587ec5ae4f77c57daf681eef26ed5209/torch/csrc/autograd/python_cpp_function.cpp#L203-L207\">pytorch/torch/csrc/autograd/python_cpp_function.cpp</a>\n    </p>\n    <p class=\"mb-0 text-gray-light\">\n        Lines 203 to 207\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/pytorch/pytorch/commit/86eeeab7587ec5ae4f77c57daf681eef26ed5209\">86eeeab</a>\n    </p>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L203\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"203\"></td>\n          <td id=\"LC203\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-k\">auto</span> it = cpp_function_types.<span class=\"pl-c1\">find</span>(<span class=\"pl-c1\">std::type_index</span>(<span class=\"pl-c1\">typeid</span>(fn))); </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L204\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"204\"></td>\n          <td id=\"LC204\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-k\">if</span> (it == cpp_function_types.<span class=\"pl-c1\">end</span>()) { </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L205\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"205\"></td>\n          <td id=\"LC205\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   <span class=\"pl-k\">return</span> <span class=\"pl-c1\">PyErr_Format</span>(PyExc_TypeError, </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L206\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"206\"></td>\n          <td id=\"LC206\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">       <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Don't know how to create Python object for %s<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-c1\">typeid</span>(fn).<span class=\"pl-c1\">name</span>()); </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L207\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"207\"></td>\n          <td id=\"LC207\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> } </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n</p>\n<p>The question is, should it be registered, or should we instead treat this case specially in <code>THPVariable_get_grad_fn</code>? <div class=\"border rounded-1 my-2\">\n  <div class=\"f6 px-3 py-2 lh-condensed border-bottom bg-gray-light\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/pytorch/pytorch/blob/aa7af94656a9361224e6d24f9ca922bf5b3f5a67/torch/csrc/autograd/python_variable.cpp#L171-L180\">pytorch/torch/csrc/autograd/python_variable.cpp</a>\n    </p>\n    <p class=\"mb-0 text-gray-light\">\n        Lines 171 to 180\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/pytorch/pytorch/commit/aa7af94656a9361224e6d24f9ca922bf5b3f5a67\">aa7af94</a>\n    </p>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L171\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"171\"></td>\n          <td id=\"LC171\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> PyObject *<span class=\"pl-en\">THPVariable_get_grad_fn</span>(THPVariable *self) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L172\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"172\"></td>\n          <td id=\"LC172\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> { </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L173\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"173\"></td>\n          <td id=\"LC173\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   HANDLE_TH_ERRORS </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L174\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"174\"></td>\n          <td id=\"LC174\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   <span class=\"pl-k\">auto</span>&amp; var = self-&gt;<span class=\"pl-smi\">cdata</span>; </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L175\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"175\"></td>\n          <td id=\"LC175\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   <span class=\"pl-k\">if</span> (!var.<span class=\"pl-c1\">grad_fn</span>()) { </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L176\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"176\"></td>\n          <td id=\"LC176\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     Py_RETURN_NONE; </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L177\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"177\"></td>\n          <td id=\"LC177\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   } </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L178\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"178\"></td>\n          <td id=\"LC178\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   <span class=\"pl-k\">return</span> <span class=\"pl-c1\">functionToPyObject</span>(var.<span class=\"pl-c1\">grad_fn</span>()); </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L179\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"179\"></td>\n          <td id=\"LC179\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   END_HANDLE_TH_ERRORS </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L180\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"180\"></td>\n          <td id=\"LC180\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> } </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n</p>", "body_text": "Basically, ExecutionPlanAutogradFunction is set as grad_fn in ExecutionPlan::runWithGrad \n  \n    \n      pytorch/torch/csrc/jit/graph_executor.cpp\n    \n    \n        Lines 173 to 175\n      in\n      29406a2\n    \n    \n    \n    \n\n        \n          \n           void runWithGrad(Stack & stack) const { \n        \n\n        \n          \n             auto grad_fn = std::make_shared<ExecutionPlanAutogradFunction>(grad_executor, \n        \n\n        \n          \n               grad.df_input_captured_inputs.size() + grad.df_input_captured_outputs.size()); \n        \n    \n  \n\n\nHowever, ExecutionPlanAutogradFunction is never registered through registerCppFunction, which triggers the exception in functionToPyObject \n  \n    \n      pytorch/torch/csrc/autograd/python_cpp_function.cpp\n    \n    \n        Lines 203 to 207\n      in\n      86eeeab\n    \n    \n    \n    \n\n        \n          \n           auto it = cpp_function_types.find(std::type_index(typeid(fn))); \n        \n\n        \n          \n           if (it == cpp_function_types.end()) { \n        \n\n        \n          \n             return PyErr_Format(PyExc_TypeError, \n        \n\n        \n          \n                 \"Don't know how to create Python object for %s\", typeid(fn).name()); \n        \n\n        \n          \n           } \n        \n    \n  \n\n\nThe question is, should it be registered, or should we instead treat this case specially in THPVariable_get_grad_fn? \n  \n    \n      pytorch/torch/csrc/autograd/python_variable.cpp\n    \n    \n        Lines 171 to 180\n      in\n      aa7af94\n    \n    \n    \n    \n\n        \n          \n           PyObject *THPVariable_get_grad_fn(THPVariable *self) \n        \n\n        \n          \n           { \n        \n\n        \n          \n             HANDLE_TH_ERRORS \n        \n\n        \n          \n             auto& var = self->cdata; \n        \n\n        \n          \n             if (!var.grad_fn()) { \n        \n\n        \n          \n               Py_RETURN_NONE; \n        \n\n        \n          \n             } \n        \n\n        \n          \n             return functionToPyObject(var.grad_fn()); \n        \n\n        \n          \n             END_HANDLE_TH_ERRORS \n        \n\n        \n          \n           }", "body": "Basically, `ExecutionPlanAutogradFunction` is set as `grad_fn` in `ExecutionPlan::runWithGrad` https://github.com/pytorch/pytorch/blob/29406a2c4c36d3c155abed16cf75f26af44426d4/torch/csrc/jit/graph_executor.cpp#L173-L175\r\n\r\nHowever, `ExecutionPlanAutogradFunction` is never registered through `registerCppFunction`, which triggers the exception in `functionToPyObject` https://github.com/pytorch/pytorch/blob/86eeeab7587ec5ae4f77c57daf681eef26ed5209/torch/csrc/autograd/python_cpp_function.cpp#L203-L207\r\n\r\nThe question is, should it be registered, or should we instead treat this case specially in `THPVariable_get_grad_fn`? https://github.com/pytorch/pytorch/blob/aa7af94656a9361224e6d24f9ca922bf5b3f5a67/torch/csrc/autograd/python_variable.cpp#L171-L180"}