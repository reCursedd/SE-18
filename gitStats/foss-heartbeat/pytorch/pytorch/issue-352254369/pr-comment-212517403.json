{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/212517403", "pull_request_review_id": 149169387, "id": 212517403, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMjUxNzQwMw==", "diff_hunk": "@@ -89,6 +91,34 @@ IntList TensorImpl::strides() const {\n   return strides_;\n }\n \n+int64_t TensorImpl::numel() const {\n+#ifdef DEBUG\n+  int64_t n = 1;\n+  for (auto s : sizes()) {\n+    n *= s;\n+  }\n+  AT_ASSERT(n == numel_);", "path": "aten/src/ATen/TensorImpl.cpp", "position": null, "original_position": 19, "commit_id": "350e8dfd283f6c22b243e00ab1c5f8bd3a9ce173", "original_commit_id": "67d21a933ccc199363ea9c1a96f0301367c991c2", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "This code is a bit copy-pasted, with `refresh_numel`. Another way to restructure this code is as follows: create a non-mutating function `compute_numel` which computes the numel directly from sizes. Implement `refresh_numel` as `numel_ = compute_numel()`. Now your ASSERT can be `AT_ASSERT(compute_numel() == numel_)`\r\n\r\nAnd you should do this for `is_contiguous()` too.", "created_at": "2018-08-24T04:13:00Z", "updated_at": "2018-11-23T15:49:52Z", "html_url": "https://github.com/pytorch/pytorch/pull/10696#discussion_r212517403", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/10696", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/212517403"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/10696#discussion_r212517403"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/10696"}}, "body_html": "<p>This code is a bit copy-pasted, with <code>refresh_numel</code>. Another way to restructure this code is as follows: create a non-mutating function <code>compute_numel</code> which computes the numel directly from sizes. Implement <code>refresh_numel</code> as <code>numel_ = compute_numel()</code>. Now your ASSERT can be <code>AT_ASSERT(compute_numel() == numel_)</code></p>\n<p>And you should do this for <code>is_contiguous()</code> too.</p>", "body_text": "This code is a bit copy-pasted, with refresh_numel. Another way to restructure this code is as follows: create a non-mutating function compute_numel which computes the numel directly from sizes. Implement refresh_numel as numel_ = compute_numel(). Now your ASSERT can be AT_ASSERT(compute_numel() == numel_)\nAnd you should do this for is_contiguous() too."}