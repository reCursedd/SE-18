{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/212517105", "pull_request_review_id": 149169047, "id": 212517105, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMjUxNzEwNQ==", "diff_hunk": "@@ -121,26 +116,81 @@ struct AT_API TensorImpl : public Retainable {\n \n   // represents that numel() == 0.\n   inline bool is_empty() const {\n-    for (int64_t i = 0; i < dim(); ++i) {\n-      if (sizes()[i] == 0) {\n-        return true;\n-      }\n-    }\n-    return false;\n+    return numel() == 0;\n+  }\n+\n+  virtual void resize_dim(int64_t ndim) {\n+    // NB: This is *truly* a resize; calling code (e.g., squeeze)\n+    // assumes that old values are preserved\n+    sizes_.resize(ndim);\n+    strides_.resize(ndim);\n+    refresh_numel();\n+    refresh_contiguous();\n+  }\n+\n+  virtual void set_size(int64_t dim, int64_t new_size) {\n+    sizes_[dim] = new_size;\n+    refresh_numel();\n+    refresh_contiguous();\n+  }\n+\n+  virtual void set_stride(int64_t dim, int64_t new_stride) {\n+    strides_[dim] = new_stride;\n+    refresh_numel();\n+    refresh_contiguous();\n+  }\n+\n+  virtual void set_storage_offset(int64_t storage_offset) {\n+    storage_offset_ = storage_offset;\n+    refresh_numel();\n+    refresh_contiguous();\n+  }\n+\n+  // WARNING: This function does not check if the requested\n+  // sizes/strides are in bounds for the storage is allocated;\n+  // this is the responsibility of the caller\n+  void set_sizes_and_strides(at::IntList new_size, at::IntList new_stride) {\n+    AT_CHECK(\n+        new_size.size() == new_stride.size(),\n+        \"dimensionality of sizes (\",\n+        new_size.size(),\n+        \") must match dimensionality of strides (\",\n+        new_stride.size(),\n+        \")\");\n+    sizes_ = new_size.vec();\n+    strides_ = new_stride.vec();\n+    refresh_numel();\n+    refresh_contiguous();\n   }\n \n   virtual int64_t size(int64_t d) const;\n   virtual int64_t stride(int64_t d) const;\n \n-protected:\n+ private:\n+  int64_t storage_offset_;\n+  std::vector<int64_t> sizes_;\n+  std::vector<int64_t> strides_;\n+\n+  bool is_contiguous_;\n+  int64_t numel_;\n+\n+ protected:\n+  void refresh_numel() {\n+    int64_t n = 1;\n+    for (auto s : sizes()) {", "path": "aten/src/ATen/TensorImpl.h", "position": null, "original_position": 108, "commit_id": "350e8dfd283f6c22b243e00ab1c5f8bd3a9ce173", "original_commit_id": "67d21a933ccc199363ea9c1a96f0301367c991c2", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "This is very finely balanced. If you devirtualize this into `auto s : sizes_`, sparse tensor will stop working, because `sizes_` here is not the same sizes as `SparseTensorImpl::size_`. Eliminating the redundant `sizes_` in SparseTensorImpl seems like it's a pretty important follow-up task.", "created_at": "2018-08-24T04:10:01Z", "updated_at": "2018-11-23T15:49:52Z", "html_url": "https://github.com/pytorch/pytorch/pull/10696#discussion_r212517105", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/10696", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/212517105"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/10696#discussion_r212517105"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/10696"}}, "body_html": "<p>This is very finely balanced. If you devirtualize this into <code>auto s : sizes_</code>, sparse tensor will stop working, because <code>sizes_</code> here is not the same sizes as <code>SparseTensorImpl::size_</code>. Eliminating the redundant <code>sizes_</code> in SparseTensorImpl seems like it's a pretty important follow-up task.</p>", "body_text": "This is very finely balanced. If you devirtualize this into auto s : sizes_, sparse tensor will stop working, because sizes_ here is not the same sizes as SparseTensorImpl::size_. Eliminating the redundant sizes_ in SparseTensorImpl seems like it's a pretty important follow-up task."}