{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/180803947", "pull_request_review_id": 111200066, "id": 180803947, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MDgwMzk0Nw==", "diff_hunk": "@@ -195,73 +221,98 @@ struct Environment {\n   ValueTable value_table;\n };\n \n-Node* emitBuiltinCall(\n+Const getAttributeValue(Expr value_expr) {\n+  switch (value_expr.kind()) {\n+    case TK_CONST: {\n+      return Const(value_expr);\n+    } break;\n+    case TK_TRUE: {\n+      return Const::create(value_expr.range(), \"1\");\n+    } break;\n+    case TK_FALSE: {\n+      return Const::create(value_expr.range(), \"0\");\n+    } break;\n+    default:\n+      throw ErrorReport(value_expr) << \"attributes must be constants, or a list of constants\";\n+      break;\n+  }\n+}\n+\n+std::shared_ptr<SugaredValue> packOutputs(at::ArrayRef<Value*> values) {\n+  if(values.size() == 1) {\n+    return std::make_shared<SimpleValue>(values[0]);\n+  }\n+  auto svalues = fmap(values, [](Value* v) -> std::shared_ptr<SugaredValue> {\n+    return std::make_shared<SimpleValue>(v);\n+  });\n+  return std::make_shared<TupleValue>(std::move(svalues));\n+}\n+\n+std::shared_ptr<SugaredValue> emitBuiltinCall(\n   const SourceRange& loc,\n   Method& method,\n   const std::string & name,\n   at::ArrayRef<Value*> inputs,\n   List<Attribute> attributes,\n-  CallsiteDescriptor cd) {\n+  bool required) {\n+\n   NodeKind kind(Symbol::aten(name)); // TODO: this is a guess; could it be jit?\n   auto graph = method.graph();\n-  auto n = graph->insertNode(graph->create(kind, inputs, cd.n_outputs))\n+  auto n = graph->insertNode(graph->create(kind, inputs, 0))\n                 ->setSourceLocation(std::make_shared<SourceRange>(loc));\n \n   for (const auto& attr : attributes) {\n     const auto& name = Symbol::attr(attr.name().name());\n     const Expr& value_expr = attr.value();\n-    switch (value_expr.kind()) {\n-      case TK_CONST: {\n-        Const value {value_expr};\n-        if (value.isFloatingPoint()) {\n-          n->f_(name, value.asFloatingPoint());\n-        } else {\n-          n->i_(name, value.asIntegral());\n-        }\n-      } break;\n-      case TK_LIST_LITERAL: {\n-        List<Const> value_list {ListLiteral(value_expr).inputs()};\n-        std::vector<Const> values;\n-        for (Const number : value_list)\n-          values.push_back(std::move(number));\n-        bool is_float = std::any_of(values.begin(), values.end(),\n-                                    [](const Const& c) { return c.isFloatingPoint(); });\n-        if (is_float) {\n-          n->fs_(name, fmap(values, [](const Const& c) { return c.asFloatingPoint(); }));\n-        } else {\n-          n->is_(name, fmap(values, [](const Const& c) { return c.asIntegral(); }));\n-        }\n-      } break;\n-    default:\n-        throw ErrorReport(attr) << \"Unexpected kind of attribute value: \" << value_expr.kind();\n-        break;\n+    if(value_expr.kind() == TK_LIST_LITERAL) {\n+      auto value_list = ListLiteral(value_expr).inputs();\n+      std::vector<Const> values;\n+      for (Expr value : value_list)\n+        values.push_back(getAttributeValue(value));", "path": "torch/csrc/jit/script/compiler.cpp", "position": null, "original_position": 132, "commit_id": "ca6e043cf9a5d6baa53815864b848deef5a0211f", "original_commit_id": "11c8a6a0223a393485a3832531a44467fc42d8a5", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Isn\u2019t this fmap?", "created_at": "2018-04-11T15:46:46Z", "updated_at": "2018-11-23T15:42:15Z", "html_url": "https://github.com/pytorch/pytorch/pull/6492#discussion_r180803947", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/6492", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/180803947"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/6492#discussion_r180803947"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/6492"}}, "body_html": "<p>Isn\u2019t this fmap?</p>", "body_text": "Isn\u2019t this fmap?"}