{"url": "https://api.github.com/repos/pytorch/pytorch/issues/6492", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/6492/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/6492/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/6492/events", "html_url": "https://github.com/pytorch/pytorch/pull/6492", "id": 313134235, "node_id": "MDExOlB1bGxSZXF1ZXN0MTgwNzYyMjQx", "number": 6492, "title": "[jit][script] Check that each builtin returns the right number of values.", "user": {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-04-11T00:33:19Z", "updated_at": "2018-11-23T15:42:18Z", "closed_at": "2018-04-12T17:32:50Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/6492", "html_url": "https://github.com/pytorch/pytorch/pull/6492", "diff_url": "https://github.com/pytorch/pytorch/pull/6492.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/6492.patch"}, "body_html": "<p>This commit improves our handling of operators that return multiple values.<br>\nBuiltins are now checked so that they return the right number of values,<br>\nand support for TupleValue is extended to all things that can return<br>\nmultiple values.</p>\n<p>This resolves issues where the compiler accepted things like:</p>\n<p>a, b = c + c</p>\n<p>This would cause the interpreter to crash. Now each operator knows<br>\nhow many results it will produce and can check it against the number<br>\nof requested inputs.</p>\n<p>Notes:</p>\n<ul>\n<li>Allow True/False literals in constant expressions</li>\n<li>make handling of keyword constants more consistent to support True/False</li>\n<li>make parsing constants match the way we construct constants from python</li>\n<li>improve the error messages when accessing bad graph attributes.</li>\n<li>switch findTensorOp to return an optional.</li>\n<li>check that attribute types are correct in findTensorOp</li>\n<li>Check the correct number of outputs for builtins</li>\n</ul>\n<p>This also changes emitExpr to return a single SugaredValue</p>\n<p>Rather than possibly returning multiple values, emitExpr now<br>\nalways returns a single value, which <em>might</em> be a tuple. This approach<br>\nmore closely follows python making the code easier to follow.</p>\n<p>Checks for returning the right number of values are now located in<br>\nthe assignment operator, and occur when unpacking the tuple.</p>\n<p>We still pass <code>n_binders</code> to function calls so that calls into python<br>\nknow how many values they should return.</p>", "body_text": "This commit improves our handling of operators that return multiple values.\nBuiltins are now checked so that they return the right number of values,\nand support for TupleValue is extended to all things that can return\nmultiple values.\nThis resolves issues where the compiler accepted things like:\na, b = c + c\nThis would cause the interpreter to crash. Now each operator knows\nhow many results it will produce and can check it against the number\nof requested inputs.\nNotes:\n\nAllow True/False literals in constant expressions\nmake handling of keyword constants more consistent to support True/False\nmake parsing constants match the way we construct constants from python\nimprove the error messages when accessing bad graph attributes.\nswitch findTensorOp to return an optional.\ncheck that attribute types are correct in findTensorOp\nCheck the correct number of outputs for builtins\n\nThis also changes emitExpr to return a single SugaredValue\nRather than possibly returning multiple values, emitExpr now\nalways returns a single value, which might be a tuple. This approach\nmore closely follows python making the code easier to follow.\nChecks for returning the right number of values are now located in\nthe assignment operator, and occur when unpacking the tuple.\nWe still pass n_binders to function calls so that calls into python\nknow how many values they should return.", "body": "This commit improves our handling of operators that return multiple values.\r\nBuiltins are now checked so that they return the right number of values,\r\nand support for TupleValue is extended to all things that can return\r\nmultiple values.\r\n\r\nThis resolves issues where the compiler accepted things like:\r\n\r\n  a, b = c + c\r\n\r\nThis would cause the interpreter to crash. Now each operator knows\r\nhow many results it will produce and can check it against the number\r\nof requested inputs.\r\n\r\nNotes:\r\n* Allow True/False literals in constant expressions\r\n* make handling of keyword constants more consistent to support True/False\r\n* make parsing constants match the way we construct constants from python\r\n* improve the error messages when accessing bad graph attributes.\r\n* switch findTensorOp to return an optional.\r\n* check that attribute types are correct in findTensorOp\r\n* Check the correct number of outputs for builtins\r\n\r\nThis also changes emitExpr to return a single SugaredValue\r\n\r\nRather than possibly returning multiple values, emitExpr now\r\nalways returns a single value, which _might_ be a tuple. This approach\r\nmore closely follows python making the code easier to follow.\r\n\r\nChecks for returning the right number of values are now located in\r\nthe assignment operator, and occur when unpacking the tuple.\r\n\r\nWe still pass `n_binders` to function calls so that calls into python\r\nknow how many values they should return.\r\n\r\n"}