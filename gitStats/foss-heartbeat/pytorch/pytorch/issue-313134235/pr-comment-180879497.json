{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/180879497", "pull_request_review_id": 111380553, "id": 180879497, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MDg3OTQ5Nw==", "diff_hunk": "@@ -650,40 +692,57 @@ struct to_ir {\n       Ident lhs = Var(stmt.lhs()[0]).name();\n       Expr expr = BinOp::create(stmt.range(), stmt.reduction(),\n                                 Var::create(lhs.range(), lhs), stmt.rhs());\n-      outputs = emitExpr(expr, {1, false});\n-    } else {\n-      CallsiteDescriptor cd{stmt.lhs().size(), starred_unpack || stmt.lhs().size() == 1};\n-      outputs =\n-          emitExpr(stmt.rhs(), cd);\n+      environment_stack->setVar(lhs.range(), lhs.name(), emitExpr(expr));\n+      return;\n     }\n-    if (stmt.lhs().size() == 1 && outputs.size() != 1) {\n-      // Pack up a tuple sugared value\n-      SugaredValuePtr tup = std::make_shared<TupleValue>(createSugaredValuesFromValues(outputs));\n-      if (stmt.lhs()[0].kind() != TK_VAR) {\n-        throw ErrorReport(stmt.lhs()[0]) << \"Cannot pack a tuple into a non-variable.\";\n-      }\n-      environment_stack->setSugaredVar(Var(stmt.lhs()[0]).name().name(), tup);\n-    } else {\n-      int i = 0;\n-      for (auto assignee : stmt.lhs()) {\n-        if (assignee.kind() == TK_VAR) {\n-          environment_stack->setVar(Var(assignee).name().name(), outputs.at(i));\n-          i++;\n-        } else if (assignee.kind() == TK_STARRED) {\n-          auto var = Starred(assignee).expr();\n-          if (var.kind() != TK_VAR) {\n-            throw ErrorReport(var) << \"Cannot pack a tuple into a non-variable.\";\n-          }\n-          std::vector<Value*> starred_slice(\n-              outputs.begin() + i, outputs.begin() + i + (starred_unpack ? 1 : 0));\n-          SugaredValuePtr tup = std::make_shared<TupleValue>(createSugaredValuesFromValues(starred_slice));\n-          environment_stack->setSugaredVar(\n-              Var(Starred(assignee).expr()).name().name(), tup);\n-          i += starred_unpack ? 1 : 0;\n+    // how many non-starred things are on the lhs?\n+    // a = ... (1)\n+    // b, *c = ... (1)\n+    // a, b = ... (2)\n+    size_t n_binders = stmt.lhs().size();\n+    if(starred_unpack)\n+      n_binders--;\n+\n+    auto output = emitSugaredExpr(stmt.rhs(), n_binders);", "path": "torch/csrc/jit/script/compiler.cpp", "position": 437, "original_position": 437, "commit_id": "ca6e043cf9a5d6baa53815864b848deef5a0211f", "original_commit_id": "11c8a6a0223a393485a3832531a44467fc42d8a5", "user": {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, "body": "For almost all expressions, they already know how many values they will produce and they can ignore `n_binders`. The compiler will check how many things get returned regardless of what `n_binders` is. Python function calls, however, use `n_binders` to determine how many values they should return. I will add a comment.", "created_at": "2018-04-11T19:59:13Z", "updated_at": "2018-11-23T15:42:16Z", "html_url": "https://github.com/pytorch/pytorch/pull/6492#discussion_r180879497", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/6492", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/180879497"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/6492#discussion_r180879497"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/6492"}}, "body_html": "<p>For almost all expressions, they already know how many values they will produce and they can ignore <code>n_binders</code>. The compiler will check how many things get returned regardless of what <code>n_binders</code> is. Python function calls, however, use <code>n_binders</code> to determine how many values they should return. I will add a comment.</p>", "body_text": "For almost all expressions, they already know how many values they will produce and they can ignore n_binders. The compiler will check how many things get returned regardless of what n_binders is. Python function calls, however, use n_binders to determine how many values they should return. I will add a comment.", "in_reply_to_id": 180805122}