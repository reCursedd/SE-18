{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/389400056", "html_url": "https://github.com/pytorch/pytorch/issues/7577#issuecomment-389400056", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/7577", "id": 389400056, "node_id": "MDEyOklzc3VlQ29tbWVudDM4OTQwMDA1Ng==", "user": {"login": "qlwang25", "id": 38132016, "node_id": "MDQ6VXNlcjM4MTMyMDE2", "avatar_url": "https://avatars2.githubusercontent.com/u/38132016?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qlwang25", "html_url": "https://github.com/qlwang25", "followers_url": "https://api.github.com/users/qlwang25/followers", "following_url": "https://api.github.com/users/qlwang25/following{/other_user}", "gists_url": "https://api.github.com/users/qlwang25/gists{/gist_id}", "starred_url": "https://api.github.com/users/qlwang25/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qlwang25/subscriptions", "organizations_url": "https://api.github.com/users/qlwang25/orgs", "repos_url": "https://api.github.com/users/qlwang25/repos", "events_url": "https://api.github.com/users/qlwang25/events{/privacy}", "received_events_url": "https://api.github.com/users/qlwang25/received_events", "type": "User", "site_admin": false}, "created_at": "2018-05-16T05:36:04Z", "updated_at": "2018-05-16T05:36:54Z", "author_association": "NONE", "body_html": "<p>thanks   <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=5652049\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/zou3519\">@zou3519</a>  very much!!!<br>\nI know it .<br>\ninput shape should be (B, C, L), mean and var shape be (C, )<br>\nso can write this code:</p>\n<pre><code>&gt;&gt;&gt; a = torch.randn(3, 4, 5)\n&gt;&gt;&gt; b = a.view(4, -1)\n&gt;&gt;&gt; m = torch.mean(b, 1)\n&gt;&gt;&gt; m.size()\ntorch.Size([4])\n&gt;&gt;&gt; v = torch.var(b, 1)\n&gt;&gt;&gt; v.size()\ntorch.Size([4])\n&gt;&gt;&gt; torch.nn.functional.batch_norm(a, m, v)\ntensor([[[ 1.5409, -1.6599,  0.0881,  1.4276, -0.3137],\n         [ 1.2909, -0.6643, -0.3365,  0.3201, -0.4026],\n         [-0.0069, -0.5163, -0.2968, -0.2134,  0.2119],\n         [ 0.6451,  0.3104,  2.0196,  0.6562,  0.4894]],\n\n        [[ 1.4737, -1.4932, -2.3282,  2.1031, -2.6306],\n         [-0.1235,  0.9820,  0.2509, -0.2644, -0.0787],\n         [ 0.0843,  1.5311, -0.1000, -0.9176,  1.2075],\n         [ 0.1302, -0.5708, -0.1808,  1.4909,  1.9037]],\n\n        [[ 0.9402, -1.5737, -0.0843, -2.9246,  0.4191],\n         [ 0.1586, -1.0722, -0.0854, -1.7268, -0.8788],\n         [-1.3462,  0.4903, -0.9022, -0.1871,  0.6783],\n         [ 0.9612, -0.0691, -0.1111, -2.7907,  0.5322]]])\n\n</code></pre>", "body_text": "thanks   @zou3519  very much!!!\nI know it .\ninput shape should be (B, C, L), mean and var shape be (C, )\nso can write this code:\n>>> a = torch.randn(3, 4, 5)\n>>> b = a.view(4, -1)\n>>> m = torch.mean(b, 1)\n>>> m.size()\ntorch.Size([4])\n>>> v = torch.var(b, 1)\n>>> v.size()\ntorch.Size([4])\n>>> torch.nn.functional.batch_norm(a, m, v)\ntensor([[[ 1.5409, -1.6599,  0.0881,  1.4276, -0.3137],\n         [ 1.2909, -0.6643, -0.3365,  0.3201, -0.4026],\n         [-0.0069, -0.5163, -0.2968, -0.2134,  0.2119],\n         [ 0.6451,  0.3104,  2.0196,  0.6562,  0.4894]],\n\n        [[ 1.4737, -1.4932, -2.3282,  2.1031, -2.6306],\n         [-0.1235,  0.9820,  0.2509, -0.2644, -0.0787],\n         [ 0.0843,  1.5311, -0.1000, -0.9176,  1.2075],\n         [ 0.1302, -0.5708, -0.1808,  1.4909,  1.9037]],\n\n        [[ 0.9402, -1.5737, -0.0843, -2.9246,  0.4191],\n         [ 0.1586, -1.0722, -0.0854, -1.7268, -0.8788],\n         [-1.3462,  0.4903, -0.9022, -0.1871,  0.6783],\n         [ 0.9612, -0.0691, -0.1111, -2.7907,  0.5322]]])", "body": "thanks   @zou3519  very much!!!\r\nI know it .\r\ninput shape should be (B, C, L), mean and var shape be (C, )\r\nso can write this code:\r\n```\r\n>>> a = torch.randn(3, 4, 5)\r\n>>> b = a.view(4, -1)\r\n>>> m = torch.mean(b, 1)\r\n>>> m.size()\r\ntorch.Size([4])\r\n>>> v = torch.var(b, 1)\r\n>>> v.size()\r\ntorch.Size([4])\r\n>>> torch.nn.functional.batch_norm(a, m, v)\r\ntensor([[[ 1.5409, -1.6599,  0.0881,  1.4276, -0.3137],\r\n         [ 1.2909, -0.6643, -0.3365,  0.3201, -0.4026],\r\n         [-0.0069, -0.5163, -0.2968, -0.2134,  0.2119],\r\n         [ 0.6451,  0.3104,  2.0196,  0.6562,  0.4894]],\r\n\r\n        [[ 1.4737, -1.4932, -2.3282,  2.1031, -2.6306],\r\n         [-0.1235,  0.9820,  0.2509, -0.2644, -0.0787],\r\n         [ 0.0843,  1.5311, -0.1000, -0.9176,  1.2075],\r\n         [ 0.1302, -0.5708, -0.1808,  1.4909,  1.9037]],\r\n\r\n        [[ 0.9402, -1.5737, -0.0843, -2.9246,  0.4191],\r\n         [ 0.1586, -1.0722, -0.0854, -1.7268, -0.8788],\r\n         [-1.3462,  0.4903, -0.9022, -0.1871,  0.6783],\r\n         [ 0.9612, -0.0691, -0.1111, -2.7907,  0.5322]]])\r\n\r\n```"}