{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/116704492", "pull_request_review_id": 38344636, "id": 116704492, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNjcwNDQ5Mg==", "diff_hunk": "@@ -140,11 +179,48 @@ struct algorithm_search<cudnnConvolutionBwdDataAlgo_t> {\n     return bwd_data_algos;\n   }\n \n-  static cudnnConvolutionBwdDataAlgoPerf_t findAlgorithm(cudnnHandle_t handle, const Convolution& conv) {\n+  static cudnnConvolutionBwdDataAlgoPerf_t findAlgorithm(THCState* state,cudnnHandle_t handle, const Convolution& conv,\n+\t\t\t\t\t\t\t  void* in, void* out, void* wght) {\n     int algoCount;\n+    cudnnStatus_t err;\n     cudnnConvolutionBwdDataAlgoPerf_t perfResults;\n-    CHECK(cudnnFindConvolutionBackwardDataAlgorithm(handle, conv.wdesc.desc,\n-        conv.odesc.desc, conv.cdesc.desc, conv.idesc.desc, 1, &algoCount, &perfResults));\n+    cudnnConvolutionBwdDataAlgo_t algo[] = {\n+         CUDNN_CONVOLUTION_BWD_DATA_ALGO_0,\n+         CUDNN_CONVOLUTION_BWD_DATA_ALGO_1,\n+         CUDNN_CONVOLUTION_BWD_DATA_ALGO_FFT,\n+         CUDNN_CONVOLUTION_BWD_DATA_ALGO_FFT_TILING,\n+         CUDNN_CONVOLUTION_BWD_DATA_ALGO_WINOGRAD,\n+         CUDNN_CONVOLUTION_BWD_DATA_ALGO_WINOGRAD_NONFUSED\n+    };\n+    size_t max_ws_size = 0;\n+    void *data = NULL; // workspace", "path": "torch/csrc/cudnn/Conv.cpp", "position": null, "original_position": 75, "commit_id": "559060ebbdf2c9604582df1059fa22fab56e197f", "original_commit_id": "5e489571bb9f76a1cda145e33ee8992238accfe2", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "I'd use a `unique_ptr` with `[](void *data) { THCudaFree(state, data); }` as deleter. This would simplify the code a lot.", "created_at": "2017-05-16T10:12:18Z", "updated_at": "2018-11-23T15:33:27Z", "html_url": "https://github.com/pytorch/pytorch/pull/1561#discussion_r116704492", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/1561", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/116704492"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/1561#discussion_r116704492"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/1561"}}, "body_html": "<p>I'd use a <code>unique_ptr</code> with <code>[](void *data) { THCudaFree(state, data); }</code> as deleter. This would simplify the code a lot.</p>", "body_text": "I'd use a unique_ptr with [](void *data) { THCudaFree(state, data); } as deleter. This would simplify the code a lot."}