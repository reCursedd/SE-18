{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/247439276", "html_url": "https://github.com/pytorch/pytorch/issues/29#issuecomment-247439276", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/29", "id": 247439276, "node_id": "MDEyOklzc3VlQ29tbWVudDI0NzQzOTI3Ng==", "user": {"login": "adamlerer", "id": 5702157, "node_id": "MDQ6VXNlcjU3MDIxNTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5702157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adamlerer", "html_url": "https://github.com/adamlerer", "followers_url": "https://api.github.com/users/adamlerer/followers", "following_url": "https://api.github.com/users/adamlerer/following{/other_user}", "gists_url": "https://api.github.com/users/adamlerer/gists{/gist_id}", "starred_url": "https://api.github.com/users/adamlerer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adamlerer/subscriptions", "organizations_url": "https://api.github.com/users/adamlerer/orgs", "repos_url": "https://api.github.com/users/adamlerer/repos", "events_url": "https://api.github.com/users/adamlerer/events{/privacy}", "received_events_url": "https://api.github.com/users/adamlerer/received_events", "type": "User", "site_admin": false}, "created_at": "2016-09-15T20:10:25Z", "updated_at": "2016-09-15T20:10:25Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Yes, but isn't composability nice? I might want to write</p>\n<pre><code>nn.Sequential([M, M])\n</code></pre>\n<p>and hope that torch can take care of it.</p>\n<p>(substitute Sequential with arbitrary container/network with<br>\ninterchangeable submodules)</p>\n<p>On Thu, Sep 15, 2016 at 2:52 PM, Sam Gross <a href=\"mailto:notifications@github.com\">notifications@github.com</a> wrote:</p>\n<blockquote>\n<p>I think you would push up all the shared modules into a single parent. In<br>\ngeneral, modules (chains) in Chainers do a lot more than a container in<br>\n(Lua) Torch.</p>\n<p>Here's how I would write it:</p>\n<p>class MyModule(Container):<br>\ndef <strong>init(self):<br>\nparent(Container, self).__init</strong>(<br>\nA=A,<br>\nB=B,<br>\nC=C,<br>\n)<br>\ndef forward(self, x):<br>\nx = A(x)<br>\nx = B(x)<br>\nx = A(x)<br>\nx = C(x)</p>\n<p>\u2014<br>\nYou are receiving this because you authored the thread.<br>\nReply to this email directly, view it on GitHub<br>\n<a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"177056361\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/29\" data-hovercard-type=\"issue\" data-hovercard-url=\"/pytorch/pytorch/issues/29/hovercard?comment_id=247417592&amp;comment_type=issue_comment\" href=\"https://github.com/pytorch/pytorch/issues/29#issuecomment-247417592\">#29 (comment)</a>, or mute<br>\nthe thread<br>\n<a href=\"https://github.com/notifications/unsubscribe-auth/AFcCDbt3C0Gou2k_Rn_OptFJrywNL4WPks5qqZPdgaJpZM4J9YXB\">https://github.com/notifications/unsubscribe-auth/AFcCDbt3C0Gou2k_Rn_OptFJrywNL4WPks5qqZPdgaJpZM4J9YXB</a><br>\n.</p>\n</blockquote>", "body_text": "Yes, but isn't composability nice? I might want to write\nnn.Sequential([M, M])\n\nand hope that torch can take care of it.\n(substitute Sequential with arbitrary container/network with\ninterchangeable submodules)\nOn Thu, Sep 15, 2016 at 2:52 PM, Sam Gross notifications@github.com wrote:\n\nI think you would push up all the shared modules into a single parent. In\ngeneral, modules (chains) in Chainers do a lot more than a container in\n(Lua) Torch.\nHere's how I would write it:\nclass MyModule(Container):\ndef init(self):\nparent(Container, self).__init(\nA=A,\nB=B,\nC=C,\n)\ndef forward(self, x):\nx = A(x)\nx = B(x)\nx = A(x)\nx = C(x)\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\n#29 (comment), or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AFcCDbt3C0Gou2k_Rn_OptFJrywNL4WPks5qqZPdgaJpZM4J9YXB\n.", "body": "Yes, but isn't composability nice? I might want to write\n\n```\nnn.Sequential([M, M])\n```\n\nand hope that torch can take care of it.\n\n(substitute Sequential with arbitrary container/network with\ninterchangeable submodules)\n\nOn Thu, Sep 15, 2016 at 2:52 PM, Sam Gross notifications@github.com wrote:\n\n> I think you would push up all the shared modules into a single parent. In\n> general, modules (chains) in Chainers do a lot more than a container in\n> (Lua) Torch.\n> \n> Here's how I would write it:\n> \n> class MyModule(Container):\n>   def **init(self):\n>      parent(Container, self).__init**(\n>         A=A,\n>         B=B,\n>         C=C,\n>      )\n>   def forward(self, x):\n>      x = A(x)\n>      x = B(x)\n>      x = A(x)\n>      x = C(x)\n> \n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> https://github.com/pytorch/pytorch/issues/29#issuecomment-247417592, or mute\n> the thread\n> https://github.com/notifications/unsubscribe-auth/AFcCDbt3C0Gou2k_Rn_OptFJrywNL4WPks5qqZPdgaJpZM4J9YXB\n> .\n"}