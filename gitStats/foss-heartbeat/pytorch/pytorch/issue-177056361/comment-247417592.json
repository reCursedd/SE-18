{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/247417592", "html_url": "https://github.com/pytorch/pytorch/issues/29#issuecomment-247417592", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/29", "id": 247417592, "node_id": "MDEyOklzc3VlQ29tbWVudDI0NzQxNzU5Mg==", "user": {"login": "colesbury", "id": 655866, "node_id": "MDQ6VXNlcjY1NTg2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/655866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colesbury", "html_url": "https://github.com/colesbury", "followers_url": "https://api.github.com/users/colesbury/followers", "following_url": "https://api.github.com/users/colesbury/following{/other_user}", "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions", "organizations_url": "https://api.github.com/users/colesbury/orgs", "repos_url": "https://api.github.com/users/colesbury/repos", "events_url": "https://api.github.com/users/colesbury/events{/privacy}", "received_events_url": "https://api.github.com/users/colesbury/received_events", "type": "User", "site_admin": false}, "created_at": "2016-09-15T18:52:12Z", "updated_at": "2016-09-15T18:52:28Z", "author_association": "MEMBER", "body_html": "<p>I think you would push up all the shared modules into a single parent. In general, modules (chains) in Chainers do a lot more than a container in (Lua) Torch.</p>\n<p>Here's how I would write it:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">class</span> <span class=\"pl-en\">MyModule</span>(<span class=\"pl-e\">Container</span>):\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">__init</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>):\n     parent(Container, <span class=\"pl-c1\">self</span>).<span class=\"pl-c1\">__init__</span>(\n        <span class=\"pl-v\">A</span><span class=\"pl-k\">=</span>A,\n        <span class=\"pl-v\">B</span><span class=\"pl-k\">=</span>B,\n        <span class=\"pl-v\">C</span><span class=\"pl-k\">=</span>C,\n     )\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">forward</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>, <span class=\"pl-smi\">x</span>):\n     x <span class=\"pl-k\">=</span> A(x)\n     x <span class=\"pl-k\">=</span> B(x)\n     x <span class=\"pl-k\">=</span> A(x)\n     x <span class=\"pl-k\">=</span> C(x)\n     <span class=\"pl-k\">return</span> x</pre></div>", "body_text": "I think you would push up all the shared modules into a single parent. In general, modules (chains) in Chainers do a lot more than a container in (Lua) Torch.\nHere's how I would write it:\nclass MyModule(Container):\n  def __init(self):\n     parent(Container, self).__init__(\n        A=A,\n        B=B,\n        C=C,\n     )\n  def forward(self, x):\n     x = A(x)\n     x = B(x)\n     x = A(x)\n     x = C(x)\n     return x", "body": "I think you would push up all the shared modules into a single parent. In general, modules (chains) in Chainers do a lot more than a container in (Lua) Torch.\n\nHere's how I would write it:\n\n``` python\nclass MyModule(Container):\n  def __init(self):\n     parent(Container, self).__init__(\n        A=A,\n        B=B,\n        C=C,\n     )\n  def forward(self, x):\n     x = A(x)\n     x = B(x)\n     x = A(x)\n     x = C(x)\n     return x\n```\n"}