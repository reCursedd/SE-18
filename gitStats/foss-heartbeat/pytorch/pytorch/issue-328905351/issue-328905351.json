{"url": "https://api.github.com/repos/pytorch/pytorch/issues/8104", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/8104/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/8104/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/8104/events", "html_url": "https://github.com/pytorch/pytorch/issues/8104", "id": 328905351, "node_id": "MDU6SXNzdWUzMjg5MDUzNTE=", "number": 8104, "title": "load_state_dict unexpectedly does not load Tensor to buffers that currently have None value", "user": {"login": "pimdh", "id": 459819, "node_id": "MDQ6VXNlcjQ1OTgxOQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/459819?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pimdh", "html_url": "https://github.com/pimdh", "followers_url": "https://api.github.com/users/pimdh/followers", "following_url": "https://api.github.com/users/pimdh/following{/other_user}", "gists_url": "https://api.github.com/users/pimdh/gists{/gist_id}", "starred_url": "https://api.github.com/users/pimdh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pimdh/subscriptions", "organizations_url": "https://api.github.com/users/pimdh/orgs", "repos_url": "https://api.github.com/users/pimdh/repos", "events_url": "https://api.github.com/users/pimdh/events{/privacy}", "received_events_url": "https://api.github.com/users/pimdh/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 443483881, "node_id": "MDU6TGFiZWw0NDM0ODM4ODE=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/todo", "name": "todo", "color": "c2e0c6", "default": false}], "state": "open", "locked": false, "assignee": {"login": "SsnL", "id": 5674597, "node_id": "MDQ6VXNlcjU2NzQ1OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5674597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SsnL", "html_url": "https://github.com/SsnL", "followers_url": "https://api.github.com/users/SsnL/followers", "following_url": "https://api.github.com/users/SsnL/following{/other_user}", "gists_url": "https://api.github.com/users/SsnL/gists{/gist_id}", "starred_url": "https://api.github.com/users/SsnL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SsnL/subscriptions", "organizations_url": "https://api.github.com/users/SsnL/orgs", "repos_url": "https://api.github.com/users/SsnL/repos", "events_url": "https://api.github.com/users/SsnL/events{/privacy}", "received_events_url": "https://api.github.com/users/SsnL/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "SsnL", "id": 5674597, "node_id": "MDQ6VXNlcjU2NzQ1OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5674597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SsnL", "html_url": "https://github.com/SsnL", "followers_url": "https://api.github.com/users/SsnL/followers", "following_url": "https://api.github.com/users/SsnL/following{/other_user}", "gists_url": "https://api.github.com/users/SsnL/gists{/gist_id}", "starred_url": "https://api.github.com/users/SsnL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SsnL/subscriptions", "organizations_url": "https://api.github.com/users/SsnL/orgs", "repos_url": "https://api.github.com/users/SsnL/repos", "events_url": "https://api.github.com/users/SsnL/events{/privacy}", "received_events_url": "https://api.github.com/users/SsnL/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 3, "created_at": "2018-06-04T04:35:01Z", "updated_at": "2018-06-12T18:44:56Z", "closed_at": null, "author_association": "NONE", "body_html": "<h2>Issue description</h2>\n<p>I have some model variations that learn a certain value, while others keep this value fixed. For this purpose I'd like to have a None-able buffer that stores the fixed value and have this value included in the state dict for serialization. The  <a href=\"https://github.com/pytorch/pytorch/blob/master/torch/nn/modules/module.py#L626\"><code>_load_from_state_dict</code> function</a> in the Module class however doesn't overwrite buffers and parameters that currently have the None value. I didn't expect this, leading to a bug in my code.</p>\n<p>Although this was unexpected behaviour for me, I understand that this could be desired. In that case perhaps it can be included in the docs.</p>\n<h2>Code example</h2>\n<pre><code>import torch\nimport torch.nn as nn\n\n\nclass X(nn.Module):\n    def __init__(self, buf):\n        super().__init__()\n        self.register_buffer('buffer', buf)\n\n\nx = X(torch.tensor(1.))\nstate = x.state_dict()\n\ny = X(torch.tensor(2.))\ny.load_state_dict(state)  # Works fine\n\nz = X(None)\nz.load_state_dict(state)\n\n# Raises:\n# RuntimeError: Error(s) in loading state_dict for X:\n# \tUnexpected key(s) in state_dict: \"buffer\".\n</code></pre>\n<h2>System Info</h2>\n<pre><code>PyTorch version: 0.4.0\nIs debug build: No\nCUDA used to build PyTorch: 9.1.85\n\nOS: Ubuntu 18.04 LTS\nGCC version: (Ubuntu 7.3.0-16ubuntu3) 7.3.0\nCMake version: version 3.10.2\n\nPython version: 3.6\nIs CUDA available: Yes\nCUDA runtime version: Could not collect\nGPU models and configuration: GPU 0: GeForce GTX 1080 Ti\nNvidia driver version: 390.48\ncuDNN version: Probably one of the following:\n/usr/lib/x86_64-linux-gnu/libcudnn.so.7.1.3\n\nVersions of relevant libraries:\n[pip] numpy (1.14.3)\n[pip] torch (0.4.0)\n[pip] torchvision (0.2.1)\n[conda] Could not collect\n</code></pre>", "body_text": "Issue description\nI have some model variations that learn a certain value, while others keep this value fixed. For this purpose I'd like to have a None-able buffer that stores the fixed value and have this value included in the state dict for serialization. The  _load_from_state_dict function in the Module class however doesn't overwrite buffers and parameters that currently have the None value. I didn't expect this, leading to a bug in my code.\nAlthough this was unexpected behaviour for me, I understand that this could be desired. In that case perhaps it can be included in the docs.\nCode example\nimport torch\nimport torch.nn as nn\n\n\nclass X(nn.Module):\n    def __init__(self, buf):\n        super().__init__()\n        self.register_buffer('buffer', buf)\n\n\nx = X(torch.tensor(1.))\nstate = x.state_dict()\n\ny = X(torch.tensor(2.))\ny.load_state_dict(state)  # Works fine\n\nz = X(None)\nz.load_state_dict(state)\n\n# Raises:\n# RuntimeError: Error(s) in loading state_dict for X:\n# \tUnexpected key(s) in state_dict: \"buffer\".\n\nSystem Info\nPyTorch version: 0.4.0\nIs debug build: No\nCUDA used to build PyTorch: 9.1.85\n\nOS: Ubuntu 18.04 LTS\nGCC version: (Ubuntu 7.3.0-16ubuntu3) 7.3.0\nCMake version: version 3.10.2\n\nPython version: 3.6\nIs CUDA available: Yes\nCUDA runtime version: Could not collect\nGPU models and configuration: GPU 0: GeForce GTX 1080 Ti\nNvidia driver version: 390.48\ncuDNN version: Probably one of the following:\n/usr/lib/x86_64-linux-gnu/libcudnn.so.7.1.3\n\nVersions of relevant libraries:\n[pip] numpy (1.14.3)\n[pip] torch (0.4.0)\n[pip] torchvision (0.2.1)\n[conda] Could not collect", "body": "## Issue description\r\n\r\nI have some model variations that learn a certain value, while others keep this value fixed. For this purpose I'd like to have a None-able buffer that stores the fixed value and have this value included in the state dict for serialization. The  [`_load_from_state_dict` function](https://github.com/pytorch/pytorch/blob/master/torch/nn/modules/module.py#L626) in the Module class however doesn't overwrite buffers and parameters that currently have the None value. I didn't expect this, leading to a bug in my code.\r\n\r\nAlthough this was unexpected behaviour for me, I understand that this could be desired. In that case perhaps it can be included in the docs.\r\n\r\n## Code example\r\n```\r\nimport torch\r\nimport torch.nn as nn\r\n\r\n\r\nclass X(nn.Module):\r\n    def __init__(self, buf):\r\n        super().__init__()\r\n        self.register_buffer('buffer', buf)\r\n\r\n\r\nx = X(torch.tensor(1.))\r\nstate = x.state_dict()\r\n\r\ny = X(torch.tensor(2.))\r\ny.load_state_dict(state)  # Works fine\r\n\r\nz = X(None)\r\nz.load_state_dict(state)\r\n\r\n# Raises:\r\n# RuntimeError: Error(s) in loading state_dict for X:\r\n# \tUnexpected key(s) in state_dict: \"buffer\".\r\n```\r\n## System Info\r\n```\r\nPyTorch version: 0.4.0\r\nIs debug build: No\r\nCUDA used to build PyTorch: 9.1.85\r\n\r\nOS: Ubuntu 18.04 LTS\r\nGCC version: (Ubuntu 7.3.0-16ubuntu3) 7.3.0\r\nCMake version: version 3.10.2\r\n\r\nPython version: 3.6\r\nIs CUDA available: Yes\r\nCUDA runtime version: Could not collect\r\nGPU models and configuration: GPU 0: GeForce GTX 1080 Ti\r\nNvidia driver version: 390.48\r\ncuDNN version: Probably one of the following:\r\n/usr/lib/x86_64-linux-gnu/libcudnn.so.7.1.3\r\n\r\nVersions of relevant libraries:\r\n[pip] numpy (1.14.3)\r\n[pip] torch (0.4.0)\r\n[pip] torchvision (0.2.1)\r\n[conda] Could not collect\r\n```\r\n"}