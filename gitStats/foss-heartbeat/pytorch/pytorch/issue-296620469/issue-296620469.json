{"url": "https://api.github.com/repos/pytorch/pytorch/issues/5207", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/5207/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/5207/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/5207/events", "html_url": "https://github.com/pytorch/pytorch/pull/5207", "id": 296620469, "node_id": "MDExOlB1bGxSZXF1ZXN0MTY4NzU4ODk4", "number": 5207, "title": "CUDA support for C++ extensions with setuptools", "user": {"login": "goldsborough", "id": 6429851, "node_id": "MDQ6VXNlcjY0Mjk4NTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/6429851?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goldsborough", "html_url": "https://github.com/goldsborough", "followers_url": "https://api.github.com/users/goldsborough/followers", "following_url": "https://api.github.com/users/goldsborough/following{/other_user}", "gists_url": "https://api.github.com/users/goldsborough/gists{/gist_id}", "starred_url": "https://api.github.com/users/goldsborough/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goldsborough/subscriptions", "organizations_url": "https://api.github.com/users/goldsborough/orgs", "repos_url": "https://api.github.com/users/goldsborough/repos", "events_url": "https://api.github.com/users/goldsborough/events{/privacy}", "received_events_url": "https://api.github.com/users/goldsborough/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-02-13T05:42:43Z", "updated_at": "2018-11-23T15:39:33Z", "closed_at": "2018-02-13T23:02:51Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/5207", "html_url": "https://github.com/pytorch/pytorch/pull/5207", "diff_url": "https://github.com/pytorch/pytorch/pull/5207.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/5207.patch"}, "body_html": "<p>This PR adds support for convenient CUDA integration in our C++ extension mechanism. This mainly involved figuring out how to get setuptools to use nvcc for CUDA files and the regular C++ compiler for C++ files. I've added a mixed C++/CUDA test case which works great.</p>\n<p>I've also added a <code>CUDAExtension</code> and <code>CppExtension</code> function that constructs a <code>setuptools.Extension</code> with \"usually the right\" arguments, which reduces the required boilerplate to write an extension even more. Especially for CUDA, where <code>library_dir</code> (<code>CUDA_HOME/lib64</code>) and <code>libraries</code> (<code>cudart</code>) have to be specified as well.</p>\n<p>Next step is to enable this with our \"JIT\" mechanism.</p>\n<p>NOTE: I've had to write a small <code>find_cuda_home</code> function to find the CUDA install directory. This logic is kind of a duplicate of <code>tools/setup_helpers/cuda.py</code>, but that's not available in the shipped PyTorch distribution. The function is also fairly short. Let me know if it's fine to duplicate this logic.</p>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=370202\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/zdevito\">@zdevito</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=4583066\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/apaszke\">@apaszke</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=13564\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ezyang\">@ezyang</a></p>", "body_text": "This PR adds support for convenient CUDA integration in our C++ extension mechanism. This mainly involved figuring out how to get setuptools to use nvcc for CUDA files and the regular C++ compiler for C++ files. I've added a mixed C++/CUDA test case which works great.\nI've also added a CUDAExtension and CppExtension function that constructs a setuptools.Extension with \"usually the right\" arguments, which reduces the required boilerplate to write an extension even more. Especially for CUDA, where library_dir (CUDA_HOME/lib64) and libraries (cudart) have to be specified as well.\nNext step is to enable this with our \"JIT\" mechanism.\nNOTE: I've had to write a small find_cuda_home function to find the CUDA install directory. This logic is kind of a duplicate of tools/setup_helpers/cuda.py, but that's not available in the shipped PyTorch distribution. The function is also fairly short. Let me know if it's fine to duplicate this logic.\n@zdevito @apaszke @ezyang", "body": "This PR adds support for convenient CUDA integration in our C++ extension mechanism. This mainly involved figuring out how to get setuptools to use nvcc for CUDA files and the regular C++ compiler for C++ files. I've added a mixed C++/CUDA test case which works great.\r\n\r\nI've also added a `CUDAExtension` and `CppExtension` function that constructs a `setuptools.Extension` with \"usually the right\" arguments, which reduces the required boilerplate to write an extension even more. Especially for CUDA, where `library_dir` (`CUDA_HOME/lib64`) and `libraries` (`cudart`) have to be specified as well.\r\n\r\nNext step is to enable this with our \"JIT\" mechanism.\r\n\r\nNOTE: I've had to write a small `find_cuda_home` function to find the CUDA install directory. This logic is kind of a duplicate of `tools/setup_helpers/cuda.py`, but that's not available in the shipped PyTorch distribution. The function is also fairly short. Let me know if it's fine to duplicate this logic.\r\n\r\n@zdevito @apaszke @ezyang "}