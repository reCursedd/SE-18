{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/373773252", "html_url": "https://github.com/pytorch/pytorch/pull/5837#issuecomment-373773252", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/5837", "id": 373773252, "node_id": "MDEyOklzc3VlQ29tbWVudDM3Mzc3MzI1Mg==", "user": {"login": "gchanan", "id": 3768583, "node_id": "MDQ6VXNlcjM3Njg1ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3768583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gchanan", "html_url": "https://github.com/gchanan", "followers_url": "https://api.github.com/users/gchanan/followers", "following_url": "https://api.github.com/users/gchanan/following{/other_user}", "gists_url": "https://api.github.com/users/gchanan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gchanan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gchanan/subscriptions", "organizations_url": "https://api.github.com/users/gchanan/orgs", "repos_url": "https://api.github.com/users/gchanan/repos", "events_url": "https://api.github.com/users/gchanan/events{/privacy}", "received_events_url": "https://api.github.com/users/gchanan/received_events", "type": "User", "site_admin": false}, "created_at": "2018-03-16T16:43:05Z", "updated_at": "2018-03-16T16:43:05Z", "author_association": "CONTRIBUTOR", "body_html": "<p>I don't really understand the description:</p>\n<blockquote>\n<p>Un-intuitively, torch.cat([empty, notempty], dim=1) and torch.cat([notempty, empty], dim=1) behave differently because we don't support empty tensors very well.</p>\n</blockquote>\n<p>What does very well mean?  Examples?  What does numpy do?</p>\n<blockquote>\n<p>I think a better fix would be to ensure that empty tensors are broadcastable to arbitrary dimensions, but we don't support arbitrary empty dimensions.</p>\n</blockquote>\n<p>I'd disagree unless there is a compelling reason.  One of the nice things about the new empty-shape regime (i.e. {0} instead of {}) is that empty tensors follow the normal broadcasting rules; we had to have ugly special casing in the previous (TH-based) broadcasting code and I'd rather not go back to that if we can avoid it.</p>", "body_text": "I don't really understand the description:\n\nUn-intuitively, torch.cat([empty, notempty], dim=1) and torch.cat([notempty, empty], dim=1) behave differently because we don't support empty tensors very well.\n\nWhat does very well mean?  Examples?  What does numpy do?\n\nI think a better fix would be to ensure that empty tensors are broadcastable to arbitrary dimensions, but we don't support arbitrary empty dimensions.\n\nI'd disagree unless there is a compelling reason.  One of the nice things about the new empty-shape regime (i.e. {0} instead of {}) is that empty tensors follow the normal broadcasting rules; we had to have ugly special casing in the previous (TH-based) broadcasting code and I'd rather not go back to that if we can avoid it.", "body": "I don't really understand the description:\r\n\r\n> Un-intuitively, torch.cat([empty, notempty], dim=1) and torch.cat([notempty, empty], dim=1) behave differently because we don't support empty tensors very well.\r\n\r\nWhat does very well mean?  Examples?  What does numpy do?\r\n\r\n> I think a better fix would be to ensure that empty tensors are broadcastable to arbitrary dimensions, but we don't support arbitrary empty dimensions.\r\n\r\nI'd disagree unless there is a compelling reason.  One of the nice things about the new empty-shape regime (i.e. {0} instead of {}) is that empty tensors follow the normal broadcasting rules; we had to have ugly special casing in the previous (TH-based) broadcasting code and I'd rather not go back to that if we can avoid it."}