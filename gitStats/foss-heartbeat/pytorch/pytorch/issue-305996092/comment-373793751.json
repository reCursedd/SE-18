{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/373793751", "html_url": "https://github.com/pytorch/pytorch/pull/5837#issuecomment-373793751", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/5837", "id": 373793751, "node_id": "MDEyOklzc3VlQ29tbWVudDM3Mzc5Mzc1MQ==", "user": {"login": "gchanan", "id": 3768583, "node_id": "MDQ6VXNlcjM3Njg1ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3768583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gchanan", "html_url": "https://github.com/gchanan", "followers_url": "https://api.github.com/users/gchanan/followers", "following_url": "https://api.github.com/users/gchanan/following{/other_user}", "gists_url": "https://api.github.com/users/gchanan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gchanan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gchanan/subscriptions", "organizations_url": "https://api.github.com/users/gchanan/orgs", "repos_url": "https://api.github.com/users/gchanan/repos", "events_url": "https://api.github.com/users/gchanan/events{/privacy}", "received_events_url": "https://api.github.com/users/gchanan/received_events", "type": "User", "site_admin": false}, "created_at": "2018-03-16T17:51:27Z", "updated_at": "2018-03-16T17:51:27Z", "author_association": "CONTRIBUTOR", "body_html": "<p>re: dropping support it's a good question.  I don't think complicating the general code is right; the issue is that you can't create arbitrary-dimensioned empty tensors to match the normal concatenate rules (it would be good if you can verify this works in numpy, you only showed examples that don't work).</p>\n<p>So, I'd suggest seeing how hard it would be to implement this only in empty (i.e. don't change how wrap dim / broadcasting works in general) with // FIXMEs that this is only for backwards compatibility and should go away when we have support for arbitrary sized empty tensors.</p>", "body_text": "re: dropping support it's a good question.  I don't think complicating the general code is right; the issue is that you can't create arbitrary-dimensioned empty tensors to match the normal concatenate rules (it would be good if you can verify this works in numpy, you only showed examples that don't work).\nSo, I'd suggest seeing how hard it would be to implement this only in empty (i.e. don't change how wrap dim / broadcasting works in general) with // FIXMEs that this is only for backwards compatibility and should go away when we have support for arbitrary sized empty tensors.", "body": "re: dropping support it's a good question.  I don't think complicating the general code is right; the issue is that you can't create arbitrary-dimensioned empty tensors to match the normal concatenate rules (it would be good if you can verify this works in numpy, you only showed examples that don't work).\r\n\r\nSo, I'd suggest seeing how hard it would be to implement this only in empty (i.e. don't change how wrap dim / broadcasting works in general) with // FIXMEs that this is only for backwards compatibility and should go away when we have support for arbitrary sized empty tensors."}