{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/413082717", "html_url": "https://github.com/pytorch/pytorch/pull/10487#issuecomment-413082717", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/10487", "id": 413082717, "node_id": "MDEyOklzc3VlQ29tbWVudDQxMzA4MjcxNw==", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "created_at": "2018-08-15T03:22:05Z", "updated_at": "2018-08-15T03:22:05Z", "author_association": "CONTRIBUTOR", "body_html": "<p>So, I finally got a chance to look at where you are getting the <code>shared_ptr</code> from, and this seems a bit goofy:</p>\n<pre><code>    std::shared_ptr&lt;void&gt; retval(malloc(size), free);\n    if (!std::fread(retval.get(), size, 1, fp)) {\n      wrapPErrorAndThrow(\"Failed to read data from record\");\n    }\n    cursor += size;\n    seekToNextAlignmentBoundary();\n    return std::tuple&lt;std::shared_ptr&lt;void&gt;, size_t&gt;(retval, size);\n</code></pre>\n<p>Why don't you directly return a <code>DataPtr</code> here, and then you don't have to do any of this faffing about, you can just gift it directly to the Storage.</p>", "body_text": "So, I finally got a chance to look at where you are getting the shared_ptr from, and this seems a bit goofy:\n    std::shared_ptr<void> retval(malloc(size), free);\n    if (!std::fread(retval.get(), size, 1, fp)) {\n      wrapPErrorAndThrow(\"Failed to read data from record\");\n    }\n    cursor += size;\n    seekToNextAlignmentBoundary();\n    return std::tuple<std::shared_ptr<void>, size_t>(retval, size);\n\nWhy don't you directly return a DataPtr here, and then you don't have to do any of this faffing about, you can just gift it directly to the Storage.", "body": "So, I finally got a chance to look at where you are getting the `shared_ptr` from, and this seems a bit goofy:\r\n\r\n```\r\n    std::shared_ptr<void> retval(malloc(size), free);\r\n    if (!std::fread(retval.get(), size, 1, fp)) {\r\n      wrapPErrorAndThrow(\"Failed to read data from record\");\r\n    }\r\n    cursor += size;\r\n    seekToNextAlignmentBoundary();\r\n    return std::tuple<std::shared_ptr<void>, size_t>(retval, size);\r\n```\r\n\r\nWhy don't you directly return a `DataPtr` here, and then you don't have to do any of this faffing about, you can just gift it directly to the Storage."}