{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/370890305", "html_url": "https://github.com/pytorch/pytorch/pull/5581#issuecomment-370890305", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/5581", "id": 370890305, "node_id": "MDEyOklzc3VlQ29tbWVudDM3MDg5MDMwNQ==", "user": {"login": "goldsborough", "id": 6429851, "node_id": "MDQ6VXNlcjY0Mjk4NTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/6429851?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goldsborough", "html_url": "https://github.com/goldsborough", "followers_url": "https://api.github.com/users/goldsborough/followers", "following_url": "https://api.github.com/users/goldsborough/following{/other_user}", "gists_url": "https://api.github.com/users/goldsborough/gists{/gist_id}", "starred_url": "https://api.github.com/users/goldsborough/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goldsborough/subscriptions", "organizations_url": "https://api.github.com/users/goldsborough/orgs", "repos_url": "https://api.github.com/users/goldsborough/repos", "events_url": "https://api.github.com/users/goldsborough/events{/privacy}", "received_events_url": "https://api.github.com/users/goldsborough/received_events", "type": "User", "site_admin": false}, "created_at": "2018-03-06T19:00:44Z", "updated_at": "2018-03-06T19:00:44Z", "author_association": "CONTRIBUTOR", "body_html": "<p>I see your point. At the same time, right now if you create a new <code>at::Tensor</code> inside C++, users might be confused as to why there's no way to make them work with the autograd. I ran into this issue with <a href=\"https://github.com/pytorch/pytorch/blob/master/test/cpp_extensions/extension.cpp#L9\">https://github.com/pytorch/pytorch/blob/master/test/cpp_extensions/extension.cpp#L9</a> myself, where I had a tensor stored inside a class and then wanted to backwards through it.</p>\n<p>I don't think there's a way to restrict users from creating \"raw tensors\" right now, anyone could allocate a new tensor -- do we want to just say it's unsupported?</p>\n<p>I imagine the safest thing to do would be to add a runtime check to see if the variable actually is a variable and if not, use <code>make_variable()</code> or throw an exception (likely the latter is better). But that's also expensive.</p>\n<p>I'm not opposed to the idea that all tensors have to be passed in externally (although it does mean C++ extensions would have to be pure/functional and thus the idea of binding classes goes away, e.g. for <code>MatrixMultiplier</code> in the tests), but that still wouldn't be safe as it stands because there's nothing to prevent users from using <code>Tensor</code>.</p>", "body_text": "I see your point. At the same time, right now if you create a new at::Tensor inside C++, users might be confused as to why there's no way to make them work with the autograd. I ran into this issue with https://github.com/pytorch/pytorch/blob/master/test/cpp_extensions/extension.cpp#L9 myself, where I had a tensor stored inside a class and then wanted to backwards through it.\nI don't think there's a way to restrict users from creating \"raw tensors\" right now, anyone could allocate a new tensor -- do we want to just say it's unsupported?\nI imagine the safest thing to do would be to add a runtime check to see if the variable actually is a variable and if not, use make_variable() or throw an exception (likely the latter is better). But that's also expensive.\nI'm not opposed to the idea that all tensors have to be passed in externally (although it does mean C++ extensions would have to be pure/functional and thus the idea of binding classes goes away, e.g. for MatrixMultiplier in the tests), but that still wouldn't be safe as it stands because there's nothing to prevent users from using Tensor.", "body": "I see your point. At the same time, right now if you create a new `at::Tensor` inside C++, users might be confused as to why there's no way to make them work with the autograd. I ran into this issue with https://github.com/pytorch/pytorch/blob/master/test/cpp_extensions/extension.cpp#L9 myself, where I had a tensor stored inside a class and then wanted to backwards through it.\r\n\r\nI don't think there's a way to restrict users from creating \"raw tensors\" right now, anyone could allocate a new tensor -- do we want to just say it's unsupported?\r\n\r\nI imagine the safest thing to do would be to add a runtime check to see if the variable actually is a variable and if not, use `make_variable()` or throw an exception (likely the latter is better). But that's also expensive.\r\n\r\nI'm not opposed to the idea that all tensors have to be passed in externally (although it does mean C++ extensions would have to be pure/functional and thus the idea of binding classes goes away, e.g. for `MatrixMultiplier` in the tests), but that still wouldn't be safe as it stands because there's nothing to prevent users from using `Tensor`."}