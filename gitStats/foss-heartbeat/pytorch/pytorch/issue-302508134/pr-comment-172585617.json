{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/172585617", "pull_request_review_id": 101627306, "id": 172585617, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MjU4NTYxNw==", "diff_hunk": "@@ -1,33 +1,44 @@\n #pragma once\n \n #include <Python.h>\n+\n #include <ATen/ATen.h>\n #include <pybind11/pybind11.h>\n #include <pybind11/stl.h>\n \n #include \"torch/csrc/DynamicTypes.h\"\n #include \"torch/csrc/autograd/python_variable.h\"\n \n+#include <stdexcept>\n+\n namespace py = pybind11;\n \n namespace pybind11 { namespace detail {\n \n-// handle Tensor <-> at::Tensor conversions\n-// Python Variables are unpacked into Tensors\n-template <> struct type_caster<at::Tensor> {\n-public:\n+// torch.autograd.Variable <-> at::Tensor conversions (without unwrapping)\n+template <>\n+struct type_caster<at::Tensor> {\n+ public:\n   PYBIND11_TYPE_CASTER(at::Tensor, _(\"at::Tensor\"));\n \n   bool load(handle src, bool) {\n     PyObject* obj = src.ptr();\n     if (THPVariable_Check(obj)) {\n-      value = ((THPVariable*)obj)->cdata.data();\n+      value = reinterpret_cast<THPVariable*>(obj)->cdata;", "path": "torch/csrc/utils/pybind.h", "position": 32, "original_position": 32, "commit_id": "e219d18478d5e87a7ca12ce5ebce5bf959659ca7", "original_commit_id": "05e36ffa2aa382004f47b3fa53df8711b683d565", "user": {"login": "goldsborough", "id": 6429851, "node_id": "MDQ6VXNlcjY0Mjk4NTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/6429851?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goldsborough", "html_url": "https://github.com/goldsborough", "followers_url": "https://api.github.com/users/goldsborough/followers", "following_url": "https://api.github.com/users/goldsborough/following{/other_user}", "gists_url": "https://api.github.com/users/goldsborough/gists{/gist_id}", "starred_url": "https://api.github.com/users/goldsborough/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goldsborough/subscriptions", "organizations_url": "https://api.github.com/users/goldsborough/orgs", "repos_url": "https://api.github.com/users/goldsborough/repos", "events_url": "https://api.github.com/users/goldsborough/events{/privacy}", "received_events_url": "https://api.github.com/users/goldsborough/received_events", "type": "User", "site_admin": false}, "body": "Note: I put a `throw runtime_error()` here to catch all visits of this code and fixed the places that reached it (while running all tests)", "created_at": "2018-03-06T16:54:43Z", "updated_at": "2018-11-23T15:40:24Z", "html_url": "https://github.com/pytorch/pytorch/pull/5581#discussion_r172585617", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/5581", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/172585617"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/5581#discussion_r172585617"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/5581"}}, "body_html": "<p>Note: I put a <code>throw runtime_error()</code> here to catch all visits of this code and fixed the places that reached it (while running all tests)</p>", "body_text": "Note: I put a throw runtime_error() here to catch all visits of this code and fixed the places that reached it (while running all tests)", "in_reply_to_id": 172530286}