{"url": "https://api.github.com/repos/pytorch/pytorch/issues/11991", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/11991/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/11991/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/11991/events", "html_url": "https://github.com/pytorch/pytorch/issues/11991", "id": 362943645, "node_id": "MDU6SXNzdWUzNjI5NDM2NDU=", "number": 11991, "title": "[PyTorch] InstanceNorm1d does not work to 2D tensor as we expect.", "user": {"login": "crcrpar", "id": 16191443, "node_id": "MDQ6VXNlcjE2MTkxNDQz", "avatar_url": "https://avatars2.githubusercontent.com/u/16191443?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crcrpar", "html_url": "https://github.com/crcrpar", "followers_url": "https://api.github.com/users/crcrpar/followers", "following_url": "https://api.github.com/users/crcrpar/following{/other_user}", "gists_url": "https://api.github.com/users/crcrpar/gists{/gist_id}", "starred_url": "https://api.github.com/users/crcrpar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crcrpar/subscriptions", "organizations_url": "https://api.github.com/users/crcrpar/orgs", "repos_url": "https://api.github.com/users/crcrpar/repos", "events_url": "https://api.github.com/users/crcrpar/events{/privacy}", "received_events_url": "https://api.github.com/users/crcrpar/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": {"login": "soumith", "id": 1310570, "node_id": "MDQ6VXNlcjEzMTA1NzA=", "avatar_url": "https://avatars0.githubusercontent.com/u/1310570?v=4", "gravatar_id": "", "url": "https://api.github.com/users/soumith", "html_url": "https://github.com/soumith", "followers_url": "https://api.github.com/users/soumith/followers", "following_url": "https://api.github.com/users/soumith/following{/other_user}", "gists_url": "https://api.github.com/users/soumith/gists{/gist_id}", "starred_url": "https://api.github.com/users/soumith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/soumith/subscriptions", "organizations_url": "https://api.github.com/users/soumith/orgs", "repos_url": "https://api.github.com/users/soumith/repos", "events_url": "https://api.github.com/users/soumith/events{/privacy}", "received_events_url": "https://api.github.com/users/soumith/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "soumith", "id": 1310570, "node_id": "MDQ6VXNlcjEzMTA1NzA=", "avatar_url": "https://avatars0.githubusercontent.com/u/1310570?v=4", "gravatar_id": "", "url": "https://api.github.com/users/soumith", "html_url": "https://github.com/soumith", "followers_url": "https://api.github.com/users/soumith/followers", "following_url": "https://api.github.com/users/soumith/following{/other_user}", "gists_url": "https://api.github.com/users/soumith/gists{/gist_id}", "starred_url": "https://api.github.com/users/soumith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/soumith/subscriptions", "organizations_url": "https://api.github.com/users/soumith/orgs", "repos_url": "https://api.github.com/users/soumith/repos", "events_url": "https://api.github.com/users/soumith/events{/privacy}", "received_events_url": "https://api.github.com/users/soumith/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 0, "created_at": "2018-09-23T13:42:24Z", "updated_at": "2018-09-24T17:33:14Z", "closed_at": null, "author_association": "CONTRIBUTOR", "body_html": "<p>This issue is related to <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"344154162\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/9776\" data-hovercard-type=\"issue\" data-hovercard-url=\"/pytorch/pytorch/issues/9776/hovercard\" href=\"https://github.com/pytorch/pytorch/issues/9776\">#9776</a> and <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"345138909\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/9924\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/pytorch/pytorch/pull/9924/hovercard\" href=\"https://github.com/pytorch/pytorch/pull/9924\">#9924</a>.</p>\n<h2>Issue description</h2>\n<p>When applying <code>InstanceNorm1d</code> to 2D tensor, all the outputs are 0.<br>\nThis is because the variance corresponding to the input is always 0.<br>\nAlso, I think there are no appropriate tests for 2D tensor.<br>\n<div class=\"border rounded-1 my-2\">\n  <div class=\"f6 px-3 py-2 lh-condensed border-bottom bg-gray-light\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/pytorch/pytorch/blob/76ab26cc3eff1d7ba822d8db93723f5c9598eead/test/test_nn.py#L2299-L2316\">pytorch/test/test_nn.py</a>\n    </p>\n    <p class=\"mb-0 text-gray-light\">\n        Lines 2299 to 2316\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/pytorch/pytorch/commit/76ab26cc3eff1d7ba822d8db93723f5c9598eead\">76ab26c</a>\n    </p>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L2299\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"2299\"></td>\n          <td id=\"LC2299\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-k\">def</span> <span class=\"pl-en\">test_InstanceNorm1d_general</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>): </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L2300\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"2300\"></td>\n          <td id=\"LC2300\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     b <span class=\"pl-k\">=</span> random.randint(<span class=\"pl-c1\">3</span>, <span class=\"pl-c1\">5</span>) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L2301\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"2301\"></td>\n          <td id=\"LC2301\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     c <span class=\"pl-k\">=</span> random.randint(<span class=\"pl-c1\">3</span>, <span class=\"pl-c1\">5</span>) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L2302\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"2302\"></td>\n          <td id=\"LC2302\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     d <span class=\"pl-k\">=</span> random.randint(<span class=\"pl-c1\">8</span>, <span class=\"pl-c1\">10</span>) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L2303\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"2303\"></td>\n          <td id=\"LC2303\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">  </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L2304\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"2304\"></td>\n          <td id=\"LC2304\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     <span class=\"pl-c1\">input</span> <span class=\"pl-k\">=</span> torch.rand(b, c, d) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L2305\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"2305\"></td>\n          <td id=\"LC2305\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     <span class=\"pl-c1\">self</span>._test_InstanceNorm_general(nn.InstanceNorm1d, <span class=\"pl-c1\">input</span>, <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>torch.float) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L2306\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"2306\"></td>\n          <td id=\"LC2306\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">  </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L2307\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"2307\"></td>\n          <td id=\"LC2307\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-en\">@unittest.skipIf</span>(<span class=\"pl-k\">not</span> <span class=\"pl-c1\">TEST_CUDA</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>CUDA unavailable<span class=\"pl-pds\">\"</span></span>) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L2308\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"2308\"></td>\n          <td id=\"LC2308\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-en\">@skipIfRocm</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L2309\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"2309\"></td>\n          <td id=\"LC2309\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-k\">def</span> <span class=\"pl-en\">test_InstanceNorm1d_general_cuda</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>): </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L2310\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"2310\"></td>\n          <td id=\"LC2310\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     b <span class=\"pl-k\">=</span> random.randint(<span class=\"pl-c1\">3</span>, <span class=\"pl-c1\">5</span>) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L2311\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"2311\"></td>\n          <td id=\"LC2311\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     c <span class=\"pl-k\">=</span> random.randint(<span class=\"pl-c1\">3</span>, <span class=\"pl-c1\">5</span>) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L2312\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"2312\"></td>\n          <td id=\"LC2312\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     d <span class=\"pl-k\">=</span> random.randint(<span class=\"pl-c1\">8</span>, <span class=\"pl-c1\">10</span>) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L2313\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"2313\"></td>\n          <td id=\"LC2313\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">  </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L2314\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"2314\"></td>\n          <td id=\"LC2314\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     <span class=\"pl-c1\">input</span> <span class=\"pl-k\">=</span> torch.rand(b, c, d) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L2315\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"2315\"></td>\n          <td id=\"LC2315\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     <span class=\"pl-c1\">self</span>._test_InstanceNorm_general(nn.InstanceNorm1d, <span class=\"pl-c1\">input</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>cuda<span class=\"pl-pds\">\"</span></span>, torch.float) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L2316\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"2316\"></td>\n          <td id=\"LC2316\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     <span class=\"pl-c1\">self</span>._test_InstanceNorm_cuda_half(nn.InstanceNorm1d, <span class=\"pl-c1\">input</span>) </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n</p>\n<p>I think there is no way to avoid this error.</p>\n<h2>Code example</h2>\n<p>Please try to provide a minimal example to repro the bug.<br>\nError messages and stack traces are also helpful.</p>\n<pre><code>In [1]: import torch, torch.nn as nn\n\nIn [2]: x = torch.randn(10, 3)\n\nIn [3]: in1d = nn.InstanceNorm1d(3)\n\nIn [4]: y = in1d(x)\n\nIn [5]: y\nOut[5]:\ntensor([[0., 0., 0.],\n        [0., 0., 0.],\n        [0., 0., 0.],\n        [0., 0., 0.],\n        [0., 0., 0.],\n        [0., 0., 0.],\n        [0., 0., 0.],\n        [0., 0., 0.],\n        [0., 0., 0.],\n        [0., 0., 0.]])\n\nIn [6]: in1d = nn.InstanceNorm1d(3, affine=True, track_running_stats=True)\n\nIn [7]: y = in1d(x)\n\nIn [8]: in1d.bias\nOut[8]:\nParameter containing:\ntensor([0., 0., 0.], requires_grad=True)\n\nIn [9]: in1d.weight\nOut[9]:\nParameter containing:\ntensor([0.1409, 0.7195, 0.9171], requires_grad=True)\n\nIn [10]: in1d.running_mean\nOut[10]: tensor([-0.0082,  0.0239,  0.0048])\n\nIn [11]: in1d.running_var\nOut[11]: tensor([nan, nan, nan])\n</code></pre>\n<h2>System Info</h2>\n<div class=\"highlight highlight-source-shell\"><pre>miniconda3-latest \u276f python collect_env.py\nCollecting environment information...\nPyTorch version: 1.0.0.dev20180921\nIs debug build: No\nCUDA used to build PyTorch: 9.0.176\n\nOS: Ubuntu 16.04.3 LTS\nGCC version: (Ubuntu 5.4.0-6ubuntu1~16.04.10) 5.4.0 20160609\nCMake version: version 3.5.1\n\nPython version: 3.6\nIs CUDA available: Yes\nCUDA runtime version: 9.0.176\nGPU models and configuration: GPU 0: GeForce GTX 1080 Ti\nNvidia driver version: 384.130\ncuDNN version: Probably one of the following:\n/usr/local/cuda-9.0/targets/x86_64-linux/lib/libcudnn.so\n/usr/local/cuda-9.0/targets/x86_64-linux/lib/libcudnn.so.7\n/usr/local/cuda-9.0/targets/x86_64-linux/lib/libcudnn.so.7.1.3\n/usr/local/cuda-9.0/targets/x86_64-linux/lib/libcudnn_static.a\n/usr/local/lib/libcudnn.so.7.0.5\n/usr/local/lib/libcudnn_static.a\n\nVersions of relevant libraries:\n[pip] numpy (1.14.3)\n[pip] numpydoc (0.8.0)\n[pip] torch (1.0.0.dev20180921)\n[conda] pytorch-nightly           1.0.0.dev20180921 py3.6_cuda9.0.176_cudnn7.1.2_0    pytorch</pre></div>", "body_text": "This issue is related to #9776 and #9924.\nIssue description\nWhen applying InstanceNorm1d to 2D tensor, all the outputs are 0.\nThis is because the variance corresponding to the input is always 0.\nAlso, I think there are no appropriate tests for 2D tensor.\n\n  \n    \n      pytorch/test/test_nn.py\n    \n    \n        Lines 2299 to 2316\n      in\n      76ab26c\n    \n    \n    \n    \n\n        \n          \n           def test_InstanceNorm1d_general(self): \n        \n\n        \n          \n               b = random.randint(3, 5) \n        \n\n        \n          \n               c = random.randint(3, 5) \n        \n\n        \n          \n               d = random.randint(8, 10) \n        \n\n        \n          \n            \n        \n\n        \n          \n               input = torch.rand(b, c, d) \n        \n\n        \n          \n               self._test_InstanceNorm_general(nn.InstanceNorm1d, input, dtype=torch.float) \n        \n\n        \n          \n            \n        \n\n        \n          \n           @unittest.skipIf(not TEST_CUDA, \"CUDA unavailable\") \n        \n\n        \n          \n           @skipIfRocm \n        \n\n        \n          \n           def test_InstanceNorm1d_general_cuda(self): \n        \n\n        \n          \n               b = random.randint(3, 5) \n        \n\n        \n          \n               c = random.randint(3, 5) \n        \n\n        \n          \n               d = random.randint(8, 10) \n        \n\n        \n          \n            \n        \n\n        \n          \n               input = torch.rand(b, c, d) \n        \n\n        \n          \n               self._test_InstanceNorm_general(nn.InstanceNorm1d, input, \"cuda\", torch.float) \n        \n\n        \n          \n               self._test_InstanceNorm_cuda_half(nn.InstanceNorm1d, input) \n        \n    \n  \n\n\nI think there is no way to avoid this error.\nCode example\nPlease try to provide a minimal example to repro the bug.\nError messages and stack traces are also helpful.\nIn [1]: import torch, torch.nn as nn\n\nIn [2]: x = torch.randn(10, 3)\n\nIn [3]: in1d = nn.InstanceNorm1d(3)\n\nIn [4]: y = in1d(x)\n\nIn [5]: y\nOut[5]:\ntensor([[0., 0., 0.],\n        [0., 0., 0.],\n        [0., 0., 0.],\n        [0., 0., 0.],\n        [0., 0., 0.],\n        [0., 0., 0.],\n        [0., 0., 0.],\n        [0., 0., 0.],\n        [0., 0., 0.],\n        [0., 0., 0.]])\n\nIn [6]: in1d = nn.InstanceNorm1d(3, affine=True, track_running_stats=True)\n\nIn [7]: y = in1d(x)\n\nIn [8]: in1d.bias\nOut[8]:\nParameter containing:\ntensor([0., 0., 0.], requires_grad=True)\n\nIn [9]: in1d.weight\nOut[9]:\nParameter containing:\ntensor([0.1409, 0.7195, 0.9171], requires_grad=True)\n\nIn [10]: in1d.running_mean\nOut[10]: tensor([-0.0082,  0.0239,  0.0048])\n\nIn [11]: in1d.running_var\nOut[11]: tensor([nan, nan, nan])\n\nSystem Info\nminiconda3-latest \u276f python collect_env.py\nCollecting environment information...\nPyTorch version: 1.0.0.dev20180921\nIs debug build: No\nCUDA used to build PyTorch: 9.0.176\n\nOS: Ubuntu 16.04.3 LTS\nGCC version: (Ubuntu 5.4.0-6ubuntu1~16.04.10) 5.4.0 20160609\nCMake version: version 3.5.1\n\nPython version: 3.6\nIs CUDA available: Yes\nCUDA runtime version: 9.0.176\nGPU models and configuration: GPU 0: GeForce GTX 1080 Ti\nNvidia driver version: 384.130\ncuDNN version: Probably one of the following:\n/usr/local/cuda-9.0/targets/x86_64-linux/lib/libcudnn.so\n/usr/local/cuda-9.0/targets/x86_64-linux/lib/libcudnn.so.7\n/usr/local/cuda-9.0/targets/x86_64-linux/lib/libcudnn.so.7.1.3\n/usr/local/cuda-9.0/targets/x86_64-linux/lib/libcudnn_static.a\n/usr/local/lib/libcudnn.so.7.0.5\n/usr/local/lib/libcudnn_static.a\n\nVersions of relevant libraries:\n[pip] numpy (1.14.3)\n[pip] numpydoc (0.8.0)\n[pip] torch (1.0.0.dev20180921)\n[conda] pytorch-nightly           1.0.0.dev20180921 py3.6_cuda9.0.176_cudnn7.1.2_0    pytorch", "body": "This issue is related to #9776 and #9924.\r\n\r\n## Issue description\r\nWhen applying `InstanceNorm1d` to 2D tensor, all the outputs are 0.\r\nThis is because the variance corresponding to the input is always 0.\r\nAlso, I think there are no appropriate tests for 2D tensor.\r\nhttps://github.com/pytorch/pytorch/blob/76ab26cc3eff1d7ba822d8db93723f5c9598eead/test/test_nn.py#L2299-L2316\r\n\r\nI think there is no way to avoid this error.\r\n\r\n## Code example\r\nPlease try to provide a minimal example to repro the bug.\r\nError messages and stack traces are also helpful.\r\n\r\n```\r\nIn [1]: import torch, torch.nn as nn\r\n\r\nIn [2]: x = torch.randn(10, 3)\r\n\r\nIn [3]: in1d = nn.InstanceNorm1d(3)\r\n\r\nIn [4]: y = in1d(x)\r\n\r\nIn [5]: y\r\nOut[5]:\r\ntensor([[0., 0., 0.],\r\n        [0., 0., 0.],\r\n        [0., 0., 0.],\r\n        [0., 0., 0.],\r\n        [0., 0., 0.],\r\n        [0., 0., 0.],\r\n        [0., 0., 0.],\r\n        [0., 0., 0.],\r\n        [0., 0., 0.],\r\n        [0., 0., 0.]])\r\n\r\nIn [6]: in1d = nn.InstanceNorm1d(3, affine=True, track_running_stats=True)\r\n\r\nIn [7]: y = in1d(x)\r\n\r\nIn [8]: in1d.bias\r\nOut[8]:\r\nParameter containing:\r\ntensor([0., 0., 0.], requires_grad=True)\r\n\r\nIn [9]: in1d.weight\r\nOut[9]:\r\nParameter containing:\r\ntensor([0.1409, 0.7195, 0.9171], requires_grad=True)\r\n\r\nIn [10]: in1d.running_mean\r\nOut[10]: tensor([-0.0082,  0.0239,  0.0048])\r\n\r\nIn [11]: in1d.running_var\r\nOut[11]: tensor([nan, nan, nan])\r\n```\r\n\r\n## System Info\r\n```shell\r\nminiconda3-latest \u276f python collect_env.py\r\nCollecting environment information...\r\nPyTorch version: 1.0.0.dev20180921\r\nIs debug build: No\r\nCUDA used to build PyTorch: 9.0.176\r\n\r\nOS: Ubuntu 16.04.3 LTS\r\nGCC version: (Ubuntu 5.4.0-6ubuntu1~16.04.10) 5.4.0 20160609\r\nCMake version: version 3.5.1\r\n\r\nPython version: 3.6\r\nIs CUDA available: Yes\r\nCUDA runtime version: 9.0.176\r\nGPU models and configuration: GPU 0: GeForce GTX 1080 Ti\r\nNvidia driver version: 384.130\r\ncuDNN version: Probably one of the following:\r\n/usr/local/cuda-9.0/targets/x86_64-linux/lib/libcudnn.so\r\n/usr/local/cuda-9.0/targets/x86_64-linux/lib/libcudnn.so.7\r\n/usr/local/cuda-9.0/targets/x86_64-linux/lib/libcudnn.so.7.1.3\r\n/usr/local/cuda-9.0/targets/x86_64-linux/lib/libcudnn_static.a\r\n/usr/local/lib/libcudnn.so.7.0.5\r\n/usr/local/lib/libcudnn_static.a\r\n\r\nVersions of relevant libraries:\r\n[pip] numpy (1.14.3)\r\n[pip] numpydoc (0.8.0)\r\n[pip] torch (1.0.0.dev20180921)\r\n[conda] pytorch-nightly           1.0.0.dev20180921 py3.6_cuda9.0.176_cudnn7.1.2_0    pytorch\r\n```"}