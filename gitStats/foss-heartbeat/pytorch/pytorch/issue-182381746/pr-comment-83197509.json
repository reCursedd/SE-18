{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/83197509", "pull_request_review_id": 4054638, "id": 83197509, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgzMTk3NTA5", "diff_hunk": "@@ -0,0 +1,186 @@\n+#ifndef THS_GENERIC_FILE\n+#define THS_GENERIC_FILE \"generic/THSTensorMath.c\"\n+#else\n+\n+#define ROW_PTR2(t, r) (THTensor_(data)(t) + (r) * (t)->stride[0])\n+#define COL_PTR2(t, c) (THTensor_(data)(t) + (c) * (t)->stride[1])\n+\n+THLongTensor *THSTensor_(toCSR)(long const *indices, long dim, long nnz) {\n+  long h, i, hp0, hp1;\n+  THLongTensor *csr = THLongTensor_newWithSize1d(dim + 1);\n+  THLongTensor_zero(csr);\n+\n+  // Convert the sparse matrix to CSR format\n+#pragma omp parallel for private(i, h, hp0, hp1) schedule(static) if (nnz > 10000)\n+  for (i=0; i<nnz; i++) {\n+    hp0 = indices[i];\n+    hp1 = (i+1 == nnz) ?  dim : indices[i+1];\n+    if (hp0 != hp1) for (h = hp0; h < hp1; h++) {\n+      THTensor_fastSet1d(csr, h+1, i+1);\n+    }\n+  }\n+  return csr;\n+}\n+\n+void THSTensor_(spmm)(THTensor *r_, THSTensor *sparse, THTensor *dense) {\n+  long h, i;\n+  long dim_i, dim_j, dim_k; // ixj * jxk = ixk\n+  long nnz;\n+  THLongTensor *csr, *indices;\n+  THTensor *values;\n+\n+  if( (sparse->nDimension != 2) || (dense->nDimension != 2))\n+    THError(\"matrices expected, got %dD, %dD tensors\",\n+        sparse->nDimension, dense->nDimension);\n+\n+  THSTensor_(contiguous)(sparse);\n+\n+  dim_i = THSTensor_(size)(sparse, 0);\n+  dim_j = THSTensor_(size)(sparse, 1);\n+  dim_k = THTensor_(size)(dense, 1);\n+\n+  nnz = THSTensor_(nnz)(sparse);\n+  indices = THSTensor_(indices)(sparse);\n+  values = THSTensor_(values)(sparse);\n+\n+  csr = THSTensor_(toCSR)(THLongTensor_data(indices), dim_i, nnz);\n+\n+  // r_ = sparse * dense\n+  THTensor_(resize2d)(r_, dim_i, dim_k);\n+  THTensor_(zero)(r_);\n+#pragma omp parallel for private(h, i) schedule(static) if (nnz > 10000)\n+  for (h = 0; h < dim_i; h++) {\n+    long i_start = THTensor_fastGet1d(csr, h);\n+    long i_end = THTensor_fastGet1d(csr, h+1);\n+    for (i = i_start; i < i_end; i++) {\n+      real val = THTensor_fastGet1d(values, i);\n+      long col = THTensor_fastGet2d(indices, 1, i);\n+      if (col >= 0 && col < dim_j) {\n+        THBlas_(axpy)(dim_k,\n+            val,\n+            ROW_PTR2(dense, col), dense->stride[1],\n+            ROW_PTR2(r_, h), r_->stride[1]);\n+      } else {\n+        THError(\"index out of bound. spmm: %d not between 1 and %d\",\n+            col, dim_j);\n+      }\n+    }\n+  }\n+\n+  THFree(csr);\n+  THFree(indices);\n+  THFree(values);\n+}\n+\n+void THSTensor_(sspmm)(THSTensor *r_, THSTensor *sparse, THTensor *dense) {\n+  long h, i, p;\n+  long dim_i, dim_j, dim_k; // ixj * jxk = ixk\n+  long nnz;\n+  THLongTensor *csr, *indices, *newi;\n+  THTensor *values, *newv;\n+\n+  if( (sparse->nDimension != 2) || (dense->nDimension != 2))\n+    THError(\"matrices expected, got %dD, %dD tensors\",\n+        sparse->nDimension, dense->nDimension);\n+\n+  THSTensor_(contiguous)(sparse);\n+\n+  dim_i = THSTensor_(size)(sparse, 0);\n+  dim_j = THSTensor_(size)(sparse, 1);\n+  dim_k = THTensor_(size)(dense, 1);\n+\n+  nnz = THSTensor_(nnz)(sparse);\n+  indices = THSTensor_(indices)(sparse);\n+  values = THSTensor_(values)(sparse);\n+\n+  csr = THSTensor_(toCSR)(THLongTensor_data(indices), dim_i, nnz);\n+\n+  newi = THLongTensor_newWithSize2d(2, nnz * dim_k);\n+  newv = THTensor_(newWithSize1d)(nnz * dim_k);\n+  THTensor_(zero)(newv);\n+\n+  // sparse = sparse * dense\n+  p = 0;\n+\n+  for (h = 0; h < dim_i; h++) {\n+    long i_start = THTensor_fastGet1d(csr, h);\n+    long i_end = THTensor_fastGet1d(csr, h+1);\n+    for (i = i_start; i < i_end; i++) {\n+      real val = THTensor_fastGet1d(values, i);\n+      long col = THTensor_fastGet2d(indices, 1, i);\n+      if (col >= 0 && col < dim_j) {\n+        THBlas_(axpy)(dim_k,\n+            val,\n+            ROW_PTR2(dense, col), dense->stride[1],\n+            ROW_PTR2(newv, p), 1);\n+      } else {\n+        THError(\"index out of bound. sspmm: %d not between 1 and %d\",\n+            col, dim_j);\n+      }\n+    }\n+    // Fill up the indices with the right values\n+    if (i_start != i_end) {\n+      for (i = 0; i < dim_k; i++) {\n+        THTensor_fastSet2d(newi, 0, p + i, h);\n+        THTensor_fastSet2d(newi, 1, p + i, i);\n+      }\n+      p += dim_k;\n+    }\n+  }\n+\n+\n+  THSTensor_(resize2d)(r_, dim_i, dim_k);\n+  // to avoid a clone\n+  r_->indices = newi;\n+  r_->values = newv;\n+  r_->nnz = p;\n+  THSTensor_(contiguous)(r_);\n+\n+  THFree(csr);\n+  THFree(indices);\n+  THFree(values);\n+}\n+\n+void THSTensor_(spcadd)(THTensor *r_, THTensor *dense, real value, THSTensor *sparse) {\n+  long k;\n+  THLongTensor  *indices = THSTensor_(indices)(sparse);\n+  THTensor      *values = THSTensor_(values)(sparse);\n+  THLongStorage *storage = THSTensor_(newSizeOf)(sparse);\n+  long          *sizes = storage->data;\n+\n+  THTensor_(resizeAs)(r_, dense);\n+  THSTensor_(contiguous)(sparse);\n+\n+  if (r_ == dense) {\n+#pragma omp parallel for private(k)\n+    for (k = 0; k < sparse->nnz; k++) {\n+      long index = 0;\n+      long i2 = r_->storageOffset;\n+      for (long d = 0; d < sparse->nDimension; d++) {\n+        index = index + THTensor_fastGet2d(indices, d, k);\n+        i2 += r_->stride[d] * THTensor_fastGet2d(indices, d, k);\n+      }\n+      r_->storage->data[i2]  += THTensor_fastGet1d(values, k);", "path": "torch/lib/THS/generic/THSTensorMath.c", "position": null, "original_position": 163, "commit_id": "05d8afd3c83435103c9fc38b3be0351dc7165175", "original_commit_id": "df67fd34b7b54a997e3522d196a084d0f4136019", "user": {"login": "fmassa", "id": 9110200, "node_id": "MDQ6VXNlcjkxMTAyMDA=", "avatar_url": "https://avatars2.githubusercontent.com/u/9110200?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fmassa", "html_url": "https://github.com/fmassa", "followers_url": "https://api.github.com/users/fmassa/followers", "following_url": "https://api.github.com/users/fmassa/following{/other_user}", "gists_url": "https://api.github.com/users/fmassa/gists{/gist_id}", "starred_url": "https://api.github.com/users/fmassa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fmassa/subscriptions", "organizations_url": "https://api.github.com/users/fmassa/orgs", "repos_url": "https://api.github.com/users/fmassa/repos", "events_url": "https://api.github.com/users/fmassa/events{/privacy}", "received_events_url": "https://api.github.com/users/fmassa/received_events", "type": "User", "site_admin": false}, "body": "The `value` argument from the constructor seems not to be used here\n", "created_at": "2016-10-13T11:45:23Z", "updated_at": "2018-11-23T15:31:38Z", "html_url": "https://github.com/pytorch/pytorch/pull/116#discussion_r83197509", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/116", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/83197509"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/116#discussion_r83197509"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/116"}}, "body_html": "<p>The <code>value</code> argument from the constructor seems not to be used here</p>", "body_text": "The value argument from the constructor seems not to be used here"}