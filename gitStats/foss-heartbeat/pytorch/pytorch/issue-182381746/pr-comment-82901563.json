{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/82901563", "pull_request_review_id": 3774200, "id": 82901563, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgyOTAxNTYz", "diff_hunk": "@@ -0,0 +1,256 @@\n+#ifndef THS_GENERIC_FILE\n+#define THS_GENERIC_FILE \"generic/THSTensor.c\"\n+#else\n+\n+/**** access methods ****/\n+int THSTensor_(nDimension)(const THSTensor *self)\n+{\n+  return self->nDimension;\n+}\n+\n+long THSTensor_(size)(const THSTensor *self, int dim)\n+{\n+  THArgCheck((dim >= 0) && (dim < self->nDimension), 1, \"dimension %d out of range of %dD tensor\",\n+      dim+1, THSTensor_(nDimension)(self));\n+  return self->size[dim];\n+}\n+\n+long THSTensor_(nnz)(const THSTensor *self) {\n+  return self->nnz;\n+}\n+\n+THLongStorage *THSTensor_(newSizeOf)(THSTensor *self)\n+{\n+  THLongStorage *size = THLongStorage_newWithSize(self->nDimension);\n+  THLongStorage_rawCopy(size, self->size);\n+  return size;\n+}\n+\n+/*** TODO: watch out for memory leaks ***/\n+THLongTensor *THSTensor_(indicies)(const THSTensor *self) {\n+  return THLongTensor_newNarrow(self->indicies, 1, 0, self->nnz);\n+}\n+\n+THTensor *THSTensor_(values)(const THSTensor *self) {\n+  return THTensor_(newNarrow)(self->values, 0, 0, self->nnz);\n+}\n+\n+THSTensor *THSTensor_(set)(THSTensor *self, THLongTensor *indicies, THTensor *values) {\n+  THArgCheck(THLongTensor_nDimension(indicies) == 2, 1,\n+      \"indicies must be nDim x nnz\");\n+  THArgCheck(THTensor_(nDimension)(values) == 1, 2, \"values must nnz vector\");\n+  THArgCheck(THLongTensor_size(indicies, 1) == THTensor_(size)(values, 0), 1,\n+      \"indicies and values must have same nnz\");\n+  THFree(self->indicies);\n+  THFree(self->values);\n+  self->indicies = THLongTensor_newClone(indicies);\n+  self->values = THTensor_(newClone)(values);\n+  self->nnz = THTensor_(size)(values, 0);\n+}\n+\n+int THSTensor_(isContiguous)(const THSTensor *self) {\n+  return self->contiguous;\n+}\n+\n+\n+void THSTensor_(reorder)(THSTensor *self) {\n+  /* TODO: We do an insertion sort here, should change to quicksort or shellsort\n+   */\n+  if (self->nnz < 2) return;\n+  long d, i, j, p, cmp, ndim, indskip, tmplong;\n+  real tmpreal;\n+  THLongTensor *indicies_ = self->indicies;\n+  THTensor *values_ = self->values;\n+  long *indicies = THLongTensor_data(indicies_);\n+  real *values = THTensor_(data)(values_);\n+  indskip = THLongTensor_size(indicies_, 1); // To index indicies\n+  ndim = THSTensor_(nDimension)(self);\n+\n+#define IND(i, d) indicies[d * indskip + i]\n+  for (i = 1; i < self->nnz; i++) {\n+    for (j = i-1; j >= 0; j--) {\n+      cmp = 0;\n+      for (d = 0; d < ndim; d++) {\n+        if (IND(j+1, d) < IND(j, d))\n+          cmp = 1;\n+        if (IND(j+1, d) != IND(j, d)) break;\n+      }\n+      if (cmp) {\n+        tmpreal = values[j+1]; values[j+1] = values[j]; values[j] = tmpreal;\n+        for (d = 0; d < ndim; d++) {\n+          tmplong = IND(j+1, d); IND(j+1, d) = IND(j, d); IND(j, d) = tmplong;\n+        }\n+      } else break;\n+    }\n+  }\n+\n+  i = 0;\n+  for (j = 1; j < self->nnz; j++) {\n+    cmp = 1;\n+    for (d = 0; d < ndim; d++)\n+      if (IND(i, d) != IND(j, d)) {\n+        cmp = 0;\n+        break;\n+      }\n+    if (cmp) values[i] += values[j];\n+    else {\n+      values[++i] = values[j];\n+      for (d = 0; d < ndim; d++) IND(i, d) = IND(j, d);\n+    }\n+  }\n+  self->nnz = i + 1;\n+#undef IND\n+}\n+\n+void THSTensor_(contiguous)(THSTensor *self) {\n+  if (self->contiguous) return;\n+  THSTensor_(reorder)(self);\n+  self->contiguous = 1;\n+}\n+\n+/**** creation methods ****/\n+\n+static void THSTensor_(rawInit)(THSTensor *self)\n+{\n+  self->size = NULL;\n+  self->indicies = NULL;\n+  self->values = NULL;\n+  self->nDimension = 0;\n+  self->contiguous = 0;\n+  self->nnz = 0;\n+  // self->flag = TH_TENSOR_REFCOUNTED;\n+}\n+\n+static void THSTensor_(rawResize)(THSTensor *self, int nDim, long *size) {\n+  // Only resize valid sizes into tensor.\n+  self->size = THRealloc(self->size, sizeof(long)*nDim);\n+\n+  long d, nDim_ = 0;\n+  for (d = 0; d < nDim; d++)\n+    if (size[d] > 0)\n+      self->size[nDim_++] = size[d];\n+  self->nDimension = nDim_;\n+}\n+\n+\n+/* Empty init */\n+THSTensor *THSTensor_(new)(void)\n+{\n+  THSTensor *self = THAlloc(sizeof(THSTensor));\n+  THSTensor_(rawInit)(self);\n+  return self;\n+}\n+\n+/* Pointer-copy init */\n+THSTensor *THSTensor_(newWithTensor)(THLongTensor *indicies, THTensor *values)\n+{\n+  return THSTensor_(newWithTensorAndSize)(indicies, values, NULL);\n+}\n+\n+THSTensor *THSTensor_(newWithTensorAndSize)(THLongTensor *indicies, THTensor *values, THLongTensor *sizes)\n+{  // If sizes are not given, it is inferred as max index of each dim.\n+  long nDim;\n+  THLongTensor *ignore;\n+\n+  THSTensor *self = THAlloc(sizeof(THSTensor));\n+  THSTensor_(rawInit)(self);\n+  THSTensor_(set)(self, indicies, values);\n+\n+  nDim = THLongTensor_size(indicies, 0);\n+  if (!sizes) {\n+    ignore = THLongTensor_new();\n+    sizes = THLongTensor_new();\n+    THLongTensor_max(sizes, ignore, indicies, 0);\n+    THFree(sizes);\n+    THFree(ignore);\n+  }\n+\n+  THSTensor_(rawResize)(self, nDim, THLongTensor_data(sizes));\n+  return self;\n+}\n+\n+THSTensor *THSTensor_(newWithSize)(THLongStorage *size)\n+{\n+  THSTensor *self = THAlloc(sizeof(THSTensor));\n+  THSTensor_(rawInit)(self);\n+  THSTensor_(rawResize)(self, size->size, size->data);\n+}\n+\n+THSTensor *THSTensor_(newWithSize1d)(long size0)\n+{\n+  return THSTensor_(newWithSize4d)(size0, -1, -1, -1);\n+}\n+\n+THSTensor *THSTensor_(newWithSize2d)(long size0, long size1)\n+{\n+  return THSTensor_(newWithSize4d)(size0, size1, -1, -1);\n+}\n+\n+THSTensor *THSTensor_(newWithSize3d)(long size0, long size1, long size2)\n+{\n+  return THSTensor_(newWithSize4d)(size0, size1, size2, -1);\n+}\n+\n+THSTensor *THSTensor_(newWithSize4d)(long size0, long size1, long size2, long size3)\n+{\n+  long size[4] = {size0, size1, size2, size3};\n+\n+  THSTensor *self = THAlloc(sizeof(THSTensor));\n+  THSTensor_(rawInit)(self);\n+  THSTensor_(rawResize)(self, 4, size);\n+\n+  return self;\n+}\n+\n+THTensor *THSTensor_(toDense)(THSTensor *self) {\n+  int d, k, index;\n+  long nnz, ndim, indskip;\n+  long *sizes;\n+  THLongStorage *storage;\n+\n+  THTensor *other_, *values_;\n+  real *other, *values;\n+  THLongTensor *indicies_;\n+  long *indicies;\n+\n+  // set up the new tensor\n+  storage = THSTensor_(newSizeOf)(self);\n+  other_ = THTensor_(newWithSize)(storage, NULL);\n+  THTensor_(zero)(other_);\n+  other = THTensor_(data)(other_);\n+\n+  // Some necessary dimensions and sizes\n+  nnz = THSTensor_(nnz)(self);\n+  ndim = THSTensor_(nDimension)(self);\n+  sizes = storage->data;\n+\n+  // These should be contiguous...\n+  values_ = THSTensor_(values)(self);\n+  indicies_ = self->indicies;\n+  values = THTensor_(data)(values_);\n+  indicies = THLongTensor_data(indicies_);\n+  indskip = THLongTensor_size(indicies_, 1); // To index indicies\n+\n+  #pragma omp parallel for private(k, index)", "path": "torch/lib/THS/generic/THSTensor.c", "position": null, "original_position": 234, "commit_id": "05d8afd3c83435103c9fc38b3be0351dc7165175", "original_commit_id": "247bd001d5f4b25bd9ac607f4f15c762bc68b86a", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "We should probably benchmark if using omp in here is really beneficial\n", "created_at": "2016-10-11T22:19:13Z", "updated_at": "2018-11-23T15:31:37Z", "html_url": "https://github.com/pytorch/pytorch/pull/116#discussion_r82901563", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/116", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/82901563"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/116#discussion_r82901563"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/116"}}, "body_html": "<p>We should probably benchmark if using omp in here is really beneficial</p>", "body_text": "We should probably benchmark if using omp in here is really beneficial"}