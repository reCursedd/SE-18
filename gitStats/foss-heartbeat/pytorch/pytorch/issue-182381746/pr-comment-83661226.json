{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/83661226", "pull_request_review_id": 4489741, "id": 83661226, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgzNjYxMjI2", "diff_hunk": "@@ -0,0 +1,173 @@\n+#ifndef THS_GENERIC_FILE\n+#define THS_GENERIC_FILE \"generic/THSTensorMath.c\"\n+#else\n+\n+#define ROW_PTR2(t, r) (THTensor_(data)(t) + (r) * (t)->stride[0])\n+#define COL_PTR2(t, c) (THTensor_(data)(t) + (c) * (t)->stride[1])\n+\n+THLongTensor *THSTensor_(toCSR)(long const *indices, long dim, long nnz) {\n+  long h, i, hp0, hp1;\n+  THLongTensor *csr = THLongTensor_newWithSize1d(dim + 1);\n+  THLongTensor_zero(csr);\n+\n+  // Convert the sparse matrix to CSR format\n+#pragma omp parallel for private(i, h, hp0, hp1) schedule(static) if (nnz > 10000)\n+  for (i=0; i<nnz; i++) {\n+    hp0 = indices[i];\n+    hp1 = (i+1 == nnz) ?  dim : indices[i+1];\n+    if (hp0 != hp1) for (h = hp0; h < hp1; h++) {\n+      THTensor_fastSet1d(csr, h+1, i+1);\n+    }\n+  }\n+  return csr;\n+}\n+\n+void THSTensor_(spmm)(THTensor *r_, THSTensor *sparse, THTensor *dense) {\n+  long h, i;\n+  long dim_i, dim_j, dim_k; // ixj * jxk = ixk\n+  long nnz;\n+  THLongTensor *csr, *indices;\n+  THTensor *values;\n+\n+  if( (sparse->nDimension != 2) || (dense->nDimension != 2))\n+    THError(\"matrices expected, got %dD, %dD tensors\",\n+        sparse->nDimension, dense->nDimension);\n+\n+  THSTensor_(contiguous)(sparse);\n+\n+  dim_i = THSTensor_(size)(sparse, 0);\n+  dim_j = THSTensor_(size)(sparse, 1);\n+  dim_k = THTensor_(size)(dense, 1);\n+\n+  nnz     = THSTensor_(nnz)(sparse);\n+  indices = THSTensor_(indices)(sparse);\n+  values  = THSTensor_(values)(sparse);\n+\n+  csr = THSTensor_(toCSR)(THLongTensor_data(indices), dim_i, nnz);\n+\n+  // r_ = sparse * dense\n+  THTensor_(resize2d)(r_, dim_i, dim_k);\n+  THTensor_(zero)(r_);\n+#pragma omp parallel for private(h, i) schedule(static) if (nnz > 10000)\n+  for (h = 0; h < dim_i; h++) {\n+    long i_start = THTensor_fastGet1d(csr, h);\n+    long i_end = THTensor_fastGet1d(csr, h+1);\n+    for (i = i_start; i < i_end; i++) {\n+      real val = THTensor_fastGet1d(values, i);\n+      long col = THTensor_fastGet2d(indices, 1, i);\n+      if (col >= 0 && col < dim_j) {\n+        THBlas_(axpy)(dim_k,\n+            val,\n+            ROW_PTR2(dense, col), dense->stride[1],\n+            ROW_PTR2(r_, h), r_->stride[1]);\n+      } else {\n+        THError(\"index out of bound. spmm: %d not between 1 and %d\",\n+            col, dim_j);\n+      }\n+    }\n+  }\n+\n+  THFree(csr);\n+  THFree(indices);\n+  THFree(values);\n+}\n+\n+void THSTensor_(sspmm)(THSTensor *r_, THSTensor *sparse, THTensor *dense) {", "path": "torch/lib/THS/generic/THSTensorMath.c", "position": null, "original_position": 75, "commit_id": "05d8afd3c83435103c9fc38b3be0351dc7165175", "original_commit_id": "15a6b76bbb9c1331f3fc9e339474616e56b08544", "user": {"login": "ebetica", "id": 3605224, "node_id": "MDQ6VXNlcjM2MDUyMjQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/3605224?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebetica", "html_url": "https://github.com/ebetica", "followers_url": "https://api.github.com/users/ebetica/followers", "following_url": "https://api.github.com/users/ebetica/following{/other_user}", "gists_url": "https://api.github.com/users/ebetica/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebetica/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebetica/subscriptions", "organizations_url": "https://api.github.com/users/ebetica/orgs", "repos_url": "https://api.github.com/users/ebetica/repos", "events_url": "https://api.github.com/users/ebetica/events{/privacy}", "received_events_url": "https://api.github.com/users/ebetica/received_events", "type": "User", "site_admin": false}, "body": "This is exposed as sparse.sspmm (vs sparse.spmm, 2 s's). Soumith wanted this to simplify the LookupTable / Embedding functionality - the backwards is a sparse = dense \\* sparse operation.\n", "created_at": "2016-10-17T14:54:57Z", "updated_at": "2018-11-23T15:31:41Z", "html_url": "https://github.com/pytorch/pytorch/pull/116#discussion_r83661226", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/116", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/83661226"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/116#discussion_r83661226"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/116"}}, "body_html": "<p>This is exposed as sparse.sspmm (vs sparse.spmm, 2 s's). Soumith wanted this to simplify the LookupTable / Embedding functionality - the backwards is a sparse = dense * sparse operation.</p>", "body_text": "This is exposed as sparse.sspmm (vs sparse.spmm, 2 s's). Soumith wanted this to simplify the LookupTable / Embedding functionality - the backwards is a sparse = dense * sparse operation.", "in_reply_to_id": 83629264}