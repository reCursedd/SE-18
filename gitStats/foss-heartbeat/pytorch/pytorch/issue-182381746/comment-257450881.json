{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/257450881", "html_url": "https://github.com/pytorch/pytorch/pull/116#issuecomment-257450881", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/116", "id": 257450881, "node_id": "MDEyOklzc3VlQ29tbWVudDI1NzQ1MDg4MQ==", "user": {"login": "ebetica", "id": 3605224, "node_id": "MDQ6VXNlcjM2MDUyMjQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/3605224?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebetica", "html_url": "https://github.com/ebetica", "followers_url": "https://api.github.com/users/ebetica/followers", "following_url": "https://api.github.com/users/ebetica/following{/other_user}", "gists_url": "https://api.github.com/users/ebetica/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebetica/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebetica/subscriptions", "organizations_url": "https://api.github.com/users/ebetica/orgs", "repos_url": "https://api.github.com/users/ebetica/repos", "events_url": "https://api.github.com/users/ebetica/events{/privacy}", "received_events_url": "https://api.github.com/users/ebetica/received_events", "type": "User", "site_admin": false}, "created_at": "2016-10-31T23:35:43Z", "updated_at": "2016-10-31T23:35:43Z", "author_association": "CONTRIBUTOR", "body_html": "<p>I've been trying to get Embedding to work with sparse tensors. I'm running into the issue that we need to smoothly integrate <code>torch.add_(THTensor, THSTensor)</code> into a single API. The least messy way to go about this is to combine <code>torch/csrc</code> and <code>torch/csrc/sparse</code> into a single monolithic source. For example, the cwrap for <code>add_</code> would then look something like:</p>\n<pre><code>[[\n  name: add_\n  return: argument 0\n  options:\n    - cname: add\n      arguments:\n        - THTensor* self\n        - THTensor* self\n        - real value\n    - cname: cadd\n      arguments:\n        - THTensor* self\n        - THTensor* self\n        - arg: real value\n          default: AS_REAL(1)\n        - THTensor* other\n    - cname: spcadd\n      library: THS\n      arguments:\n        - THTensor* self\n        - THTensor* self\n        - arg: real value\n          default: AS_REAL(1)\n        - THSTensor* other\n]]\n</code></pre>\n<p>Does it seem like a good idea to integrate THP and THSP into one?</p>", "body_text": "I've been trying to get Embedding to work with sparse tensors. I'm running into the issue that we need to smoothly integrate torch.add_(THTensor, THSTensor) into a single API. The least messy way to go about this is to combine torch/csrc and torch/csrc/sparse into a single monolithic source. For example, the cwrap for add_ would then look something like:\n[[\n  name: add_\n  return: argument 0\n  options:\n    - cname: add\n      arguments:\n        - THTensor* self\n        - THTensor* self\n        - real value\n    - cname: cadd\n      arguments:\n        - THTensor* self\n        - THTensor* self\n        - arg: real value\n          default: AS_REAL(1)\n        - THTensor* other\n    - cname: spcadd\n      library: THS\n      arguments:\n        - THTensor* self\n        - THTensor* self\n        - arg: real value\n          default: AS_REAL(1)\n        - THSTensor* other\n]]\n\nDoes it seem like a good idea to integrate THP and THSP into one?", "body": "I've been trying to get Embedding to work with sparse tensors. I'm running into the issue that we need to smoothly integrate `torch.add_(THTensor, THSTensor)` into a single API. The least messy way to go about this is to combine `torch/csrc` and `torch/csrc/sparse` into a single monolithic source. For example, the cwrap for `add_` would then look something like:\n\n```\n[[\n  name: add_\n  return: argument 0\n  options:\n    - cname: add\n      arguments:\n        - THTensor* self\n        - THTensor* self\n        - real value\n    - cname: cadd\n      arguments:\n        - THTensor* self\n        - THTensor* self\n        - arg: real value\n          default: AS_REAL(1)\n        - THTensor* other\n    - cname: spcadd\n      library: THS\n      arguments:\n        - THTensor* self\n        - THTensor* self\n        - arg: real value\n          default: AS_REAL(1)\n        - THSTensor* other\n]]\n```\n\nDoes it seem like a good idea to integrate THP and THSP into one?\n"}