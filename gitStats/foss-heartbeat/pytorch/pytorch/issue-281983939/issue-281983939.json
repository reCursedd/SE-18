{"url": "https://api.github.com/repos/pytorch/pytorch/issues/4167", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/4167/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/4167/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/4167/events", "html_url": "https://github.com/pytorch/pytorch/pull/4167", "id": 281983939, "node_id": "MDExOlB1bGxSZXF1ZXN0MTU4MjcwMTY3", "number": 4167, "title": "Fix memory leak in JIT", "user": {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-12-14T05:12:57Z", "updated_at": "2017-12-14T08:07:10Z", "closed_at": "2017-12-14T08:07:10Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/4167", "html_url": "https://github.com/pytorch/pytorch/pull/4167", "diff_url": "https://github.com/pytorch/pytorch/pull/4167.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/4167.patch"}, "body_html": "<p>THPVariable_Wrap creates a new PyObject with refcount 1.<br>\npy::reinterpret_borrowpy::object() would then bump it to 2,<br>\ncausing it to leak.</p>\n<p>Pybind11 reinterprets are poorly named:</p>\n<p>py::reinterpret_borrowpy::object(x) means to retain the PyObject on creation and release on delete.</p>\n<p>py::reinterpret_borrowpy::object(x) means to do nothing to the the PyObject on creation and release on delete.</p>\n<p>To me 'borrow' implies to do nothing on creation and do nothing on delete, but no reinterpret call actually does that.</p>", "body_text": "THPVariable_Wrap creates a new PyObject with refcount 1.\npy::reinterpret_borrowpy::object() would then bump it to 2,\ncausing it to leak.\nPybind11 reinterprets are poorly named:\npy::reinterpret_borrowpy::object(x) means to retain the PyObject on creation and release on delete.\npy::reinterpret_borrowpy::object(x) means to do nothing to the the PyObject on creation and release on delete.\nTo me 'borrow' implies to do nothing on creation and do nothing on delete, but no reinterpret call actually does that.", "body": "THPVariable_Wrap creates a new PyObject with refcount 1.\r\npy::reinterpret_borrow<py::object>() would then bump it to 2,\r\ncausing it to leak.\r\n\r\nPybind11 reinterprets are poorly named:\r\n\r\npy::reinterpret_borrow<py::object>(x) means to retain the PyObject on creation and release on delete.\r\n\r\npy::reinterpret_borrow<py::object>(x) means to do nothing to the the PyObject on creation and release on delete.\r\n\r\nTo me 'borrow' implies to do nothing on creation and do nothing on delete, but no reinterpret call actually does that."}