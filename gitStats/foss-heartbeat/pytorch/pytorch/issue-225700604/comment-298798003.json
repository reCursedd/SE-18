{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/298798003", "html_url": "https://github.com/pytorch/pytorch/issues/1433#issuecomment-298798003", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/1433", "id": 298798003, "node_id": "MDEyOklzc3VlQ29tbWVudDI5ODc5ODAwMw==", "user": {"login": "gchanan", "id": 3768583, "node_id": "MDQ6VXNlcjM3Njg1ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3768583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gchanan", "html_url": "https://github.com/gchanan", "followers_url": "https://api.github.com/users/gchanan/followers", "following_url": "https://api.github.com/users/gchanan/following{/other_user}", "gists_url": "https://api.github.com/users/gchanan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gchanan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gchanan/subscriptions", "organizations_url": "https://api.github.com/users/gchanan/orgs", "repos_url": "https://api.github.com/users/gchanan/repos", "events_url": "https://api.github.com/users/gchanan/events{/privacy}", "received_events_url": "https://api.github.com/users/gchanan/received_events", "type": "User", "site_admin": false}, "created_at": "2017-05-03T00:31:12Z", "updated_at": "2017-05-03T00:31:12Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Numpy has both \"Scalars\" and 0-dimensional arrays, although Scalar may just be a wrapper over a 0-dimensional array.</p>\n<pre><code>&gt;&gt;&gt; x=np.sum(np.random.randn(1),0)\n&gt;&gt;&gt; type(x)\nnumpy.float64\n&gt;&gt;&gt; x.shape\n()\n&gt;&gt;&gt; y=np.squeeze(np.random.randn(1), 0)\n&gt;&gt;&gt; type(y)\nnumpy.ndarray\n&gt;&gt;&gt; y.shape\n()\n</code></pre>\n<p>I haven't looked into this closely, it may just be a convenience type, i.e. users expects sum() to return a Scalar but squeeze to return a Tensor.</p>", "body_text": "Numpy has both \"Scalars\" and 0-dimensional arrays, although Scalar may just be a wrapper over a 0-dimensional array.\n>>> x=np.sum(np.random.randn(1),0)\n>>> type(x)\nnumpy.float64\n>>> x.shape\n()\n>>> y=np.squeeze(np.random.randn(1), 0)\n>>> type(y)\nnumpy.ndarray\n>>> y.shape\n()\n\nI haven't looked into this closely, it may just be a convenience type, i.e. users expects sum() to return a Scalar but squeeze to return a Tensor.", "body": "Numpy has both \"Scalars\" and 0-dimensional arrays, although Scalar may just be a wrapper over a 0-dimensional array.\r\n\r\n```\r\n>>> x=np.sum(np.random.randn(1),0)\r\n>>> type(x)\r\nnumpy.float64\r\n>>> x.shape\r\n()\r\n>>> y=np.squeeze(np.random.randn(1), 0)\r\n>>> type(y)\r\nnumpy.ndarray\r\n>>> y.shape\r\n()\r\n```\r\n\r\nI haven't looked into this closely, it may just be a convenience type, i.e. users expects sum() to return a Scalar but squeeze to return a Tensor."}