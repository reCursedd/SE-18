{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/330333600", "html_url": "https://github.com/pytorch/pytorch/issues/1433#issuecomment-330333600", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/1433", "id": 330333600, "node_id": "MDEyOklzc3VlQ29tbWVudDMzMDMzMzYwMA==", "user": {"login": "gchanan", "id": 3768583, "node_id": "MDQ6VXNlcjM3Njg1ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3768583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gchanan", "html_url": "https://github.com/gchanan", "followers_url": "https://api.github.com/users/gchanan/followers", "following_url": "https://api.github.com/users/gchanan/following{/other_user}", "gists_url": "https://api.github.com/users/gchanan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gchanan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gchanan/subscriptions", "organizations_url": "https://api.github.com/users/gchanan/orgs", "repos_url": "https://api.github.com/users/gchanan/repos", "events_url": "https://api.github.com/users/gchanan/events{/privacy}", "received_events_url": "https://api.github.com/users/gchanan/received_events", "type": "User", "site_admin": false}, "created_at": "2017-09-18T19:40:10Z", "updated_at": "2017-09-18T19:40:10Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=4273204\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/zym1010\">@zym1010</a> that's what the stackoverflow link you provided implies.  I read through some old numpy discussion threads and it's still a bit unclear to me; talks a lot about legacy from <code>Numeric</code> that isn't really relevant to us.  One thing I like about only providing 0-dim tensors is that we can add (immutable) scalars later if there is a compelling reason as long as they are duck-typed correctly and we avoid excessive type checking.  If we jump to providing (immutable) scalars and they aren't useful we have to support both.</p>", "body_text": "@zym1010 that's what the stackoverflow link you provided implies.  I read through some old numpy discussion threads and it's still a bit unclear to me; talks a lot about legacy from Numeric that isn't really relevant to us.  One thing I like about only providing 0-dim tensors is that we can add (immutable) scalars later if there is a compelling reason as long as they are duck-typed correctly and we avoid excessive type checking.  If we jump to providing (immutable) scalars and they aren't useful we have to support both.", "body": "@zym1010 that's what the stackoverflow link you provided implies.  I read through some old numpy discussion threads and it's still a bit unclear to me; talks a lot about legacy from `Numeric` that isn't really relevant to us.  One thing I like about only providing 0-dim tensors is that we can add (immutable) scalars later if there is a compelling reason as long as they are duck-typed correctly and we avoid excessive type checking.  If we jump to providing (immutable) scalars and they aren't useful we have to support both."}