{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/330271380", "html_url": "https://github.com/pytorch/pytorch/issues/1433#issuecomment-330271380", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/1433", "id": 330271380, "node_id": "MDEyOklzc3VlQ29tbWVudDMzMDI3MTM4MA==", "user": {"login": "gchanan", "id": 3768583, "node_id": "MDQ6VXNlcjM3Njg1ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3768583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gchanan", "html_url": "https://github.com/gchanan", "followers_url": "https://api.github.com/users/gchanan/followers", "following_url": "https://api.github.com/users/gchanan/following{/other_user}", "gists_url": "https://api.github.com/users/gchanan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gchanan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gchanan/subscriptions", "organizations_url": "https://api.github.com/users/gchanan/orgs", "repos_url": "https://api.github.com/users/gchanan/repos", "events_url": "https://api.github.com/users/gchanan/events{/privacy}", "received_events_url": "https://api.github.com/users/gchanan/received_events", "type": "User", "site_admin": false}, "created_at": "2017-09-18T16:05:01Z", "updated_at": "2017-09-18T16:05:01Z", "author_association": "CONTRIBUTOR", "body_html": "<p>After some further discussion, I'd propose the following change:</p>\n<p>Instead of introducing torch.*Scalar, we introduce a data-only factory like <code>np.array(...)</code> so that the specification of a python number is unambiguous: it represents the data, so creates a Scalar.  For convenience, this factory will also take a <code>dtype</code> (and <code>device</code>).  Let's call this <code>torch.tensor</code> (I'm open to different names) Examples:</p>\n<pre><code> # create a 0-dim tensor of default type with data \"5\"\ntorch.tensor(5)\n\n# create a 0-dim tensor of type torch.DoubleTensor with data \"1.5\"\ntorch.tensor(1.5, dtype=torch.double)\n\n #create a 2x2 torch.cuda.LongTensor on device 1 with data from [0,3] increasing.\ntorch.tensor([[0, 1], [2,3]], dtype=torch.cuda.long, device=1)\n</code></pre>", "body_text": "After some further discussion, I'd propose the following change:\nInstead of introducing torch.*Scalar, we introduce a data-only factory like np.array(...) so that the specification of a python number is unambiguous: it represents the data, so creates a Scalar.  For convenience, this factory will also take a dtype (and device).  Let's call this torch.tensor (I'm open to different names) Examples:\n # create a 0-dim tensor of default type with data \"5\"\ntorch.tensor(5)\n\n# create a 0-dim tensor of type torch.DoubleTensor with data \"1.5\"\ntorch.tensor(1.5, dtype=torch.double)\n\n #create a 2x2 torch.cuda.LongTensor on device 1 with data from [0,3] increasing.\ntorch.tensor([[0, 1], [2,3]], dtype=torch.cuda.long, device=1)", "body": "After some further discussion, I'd propose the following change:\r\n\r\nInstead of introducing torch.*Scalar, we introduce a data-only factory like `np.array(...)` so that the specification of a python number is unambiguous: it represents the data, so creates a Scalar.  For convenience, this factory will also take a `dtype` (and `device`).  Let's call this `torch.tensor` (I'm open to different names) Examples:\r\n\r\n```\r\n # create a 0-dim tensor of default type with data \"5\"\r\ntorch.tensor(5)\r\n\r\n# create a 0-dim tensor of type torch.DoubleTensor with data \"1.5\"\r\ntorch.tensor(1.5, dtype=torch.double)\r\n\r\n #create a 2x2 torch.cuda.LongTensor on device 1 with data from [0,3] increasing.\r\ntorch.tensor([[0, 1], [2,3]], dtype=torch.cuda.long, device=1)\r\n```"}