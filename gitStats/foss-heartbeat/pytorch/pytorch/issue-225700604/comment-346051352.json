{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/346051352", "html_url": "https://github.com/pytorch/pytorch/issues/1433#issuecomment-346051352", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/1433", "id": 346051352, "node_id": "MDEyOklzc3VlQ29tbWVudDM0NjA1MTM1Mg==", "user": {"login": "obust", "id": 9247804, "node_id": "MDQ6VXNlcjkyNDc4MDQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/9247804?v=4", "gravatar_id": "", "url": "https://api.github.com/users/obust", "html_url": "https://github.com/obust", "followers_url": "https://api.github.com/users/obust/followers", "following_url": "https://api.github.com/users/obust/following{/other_user}", "gists_url": "https://api.github.com/users/obust/gists{/gist_id}", "starred_url": "https://api.github.com/users/obust/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/obust/subscriptions", "organizations_url": "https://api.github.com/users/obust/orgs", "repos_url": "https://api.github.com/users/obust/repos", "events_url": "https://api.github.com/users/obust/events{/privacy}", "received_events_url": "https://api.github.com/users/obust/received_events", "type": "User", "site_admin": false}, "created_at": "2017-11-21T14:56:05Z", "updated_at": "2017-11-21T14:56:05Z", "author_association": "NONE", "body_html": "<p>I think it would make sense to have <code>torch.Tensor</code> as the tensor factory.<br>\nToday it is an alias to the <code>torch.FloatTensor</code> but it doesn't have to be.<br>\nIt can very well be :</p>\n<pre><code>Tensor(1) # 0-dimensional FloatTensor\nTensor([1, 1]) # 1-dimensional FloatTensor\nTensor([1, 1], dtype=torch.double) # 1-dimensional DoubleTensor\n</code></pre>\n<p>This way the instanciation API remains class-based, and you can specialize the data type with a <code>dtype</code> argument. I am pretty sure this is possible using python metaclass. <a href=\"https://stackoverflow.com/a/23377870/4577665\" rel=\"nofollow\">https://stackoverflow.com/a/23377870/4577665</a></p>", "body_text": "I think it would make sense to have torch.Tensor as the tensor factory.\nToday it is an alias to the torch.FloatTensor but it doesn't have to be.\nIt can very well be :\nTensor(1) # 0-dimensional FloatTensor\nTensor([1, 1]) # 1-dimensional FloatTensor\nTensor([1, 1], dtype=torch.double) # 1-dimensional DoubleTensor\n\nThis way the instanciation API remains class-based, and you can specialize the data type with a dtype argument. I am pretty sure this is possible using python metaclass. https://stackoverflow.com/a/23377870/4577665", "body": "I think it would make sense to have `torch.Tensor` as the tensor factory.\r\nToday it is an alias to the `torch.FloatTensor` but it doesn't have to be.\r\nIt can very well be :\r\n\r\n```\r\nTensor(1) # 0-dimensional FloatTensor\r\nTensor([1, 1]) # 1-dimensional FloatTensor\r\nTensor([1, 1], dtype=torch.double) # 1-dimensional DoubleTensor\r\n```\r\nThis way the instanciation API remains class-based, and you can specialize the data type with a `dtype` argument. I am pretty sure this is possible using python metaclass. https://stackoverflow.com/a/23377870/4577665"}