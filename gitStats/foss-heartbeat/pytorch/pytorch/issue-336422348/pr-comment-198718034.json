{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/198718034", "pull_request_review_id": 132698498, "id": 198718034, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5ODcxODAzNA==", "diff_hunk": "@@ -376,49 +378,86 @@ def ref(A, B):\n \n         A = np.random.rand(n, m, k, t).astype(np.float32) + bias\n         B = np.random.rand(n, m, k, t).astype(np.float32) + bias\n-        self._run_single_test(op, ref, A, B, test_grad, gc, dc)\n+        self._run_single_test(op, ref, A, B, True, test_grad, gc, dc)\n \n         A = np.random.rand(1).astype(np.float32) + bias\n         B = np.random.rand(n, m, k, t).astype(np.float32) + bias\n-        self._run_single_test(op, ref, A, B, test_grad, gc, dc)\n+        self._run_single_test(op, ref, A, B, True, test_grad, gc, dc)\n \n         A = np.random.rand(k, t).astype(np.float32) + bias\n         B = np.random.rand(n, m, k, t).astype(np.float32) + bias\n-        self._run_single_test(op, ref, A, B, test_grad, gc, dc)\n+        self._run_single_test(op, ref, A, B, True, test_grad, gc, dc)\n \n         A = np.random.rand(n, m, 1, 1).astype(np.float32) + bias\n         B = np.random.rand(n, m, k, t).astype(np.float32) + bias\n-        self._run_single_test(op, ref, A, B, test_grad, gc, dc)\n+        self._run_single_test(op, ref, A, B, True, test_grad, gc, dc)\n \n         A = np.random.rand(m, 1, t).astype(np.float32) + bias\n         B = np.random.rand(n, m, k, t).astype(np.float32) + bias\n-        self._run_single_test(op, ref, A, B, test_grad, gc, dc)\n+        self._run_single_test(op, ref, A, B, True, test_grad, gc, dc)\n \n         A = np.random.rand(1, m, 1, t).astype(np.float32) + bias\n         B = np.random.rand(n, 1, k, 1).astype(np.float32) + bias\n-        self._run_single_test(op, ref, A, B, test_grad, gc, dc)\n+        self._run_single_test(op, ref, A, B, True, test_grad, gc, dc)\n+\n+    def _test_binary_op_in_place(\n+            self, op_name, np_ref, n, m, bias, test_grad, in_place_2nd, gc, dc):\n+        def ref(A, B):\n+            return [np_ref(A, B)]\n+\n+        op = core.CreateOperator(\n+            op_name,\n+            [\"A\", \"B\"],\n+            [\"A\"],\n+        )\n+        A = np.random.rand(n, m).astype(np.float32) + bias\n+        B = np.random.rand(m).astype(np.float32) + bias\n+\n+        self._run_single_test(op, ref, A, B, False, test_grad, gc, dc)\n+        A = np.random.rand(n, m).astype(np.float32) + bias\n+        B = np.random.rand(n, 1).astype(np.float32) + bias\n+        self._run_single_test(op, ref, A, B, False, test_grad, gc, dc)\n+\n+        if in_place_2nd:\n+            op = core.CreateOperator(\n+                op_name,\n+                [\"A\", \"B\"],\n+                [\"B\"],\n+            )\n+            A = np.random.rand(m).astype(np.float32) + bias\n+            B = np.random.rand(n, m).astype(np.float32) + bias\n+            self._run_single_test(op, ref, A, B, False, test_grad, gc, dc)\n+            A = np.random.rand(n, 1).astype(np.float32) + bias\n+            B = np.random.rand(n, m).astype(np.float32) + bias\n+            self._run_single_test(op, ref, A, B, False, test_grad, gc, dc)\n \n     @given(n=st.integers(0, 5), m=st.integers(0, 5), k=st.integers(0, 5),\n            t=st.integers(0, 5), **hu.gcs)\n     def test_add(self, n, m, k, t, gc, dc):\n         self._test_binary_op(\"Add\", np.add, n, m, k, t, -0.5, True, gc, dc)\n+        self._test_binary_op_in_place(\n+            \"Add\", np.add, n, m, -0.5, True, True, gc, dc)\n \n     @given(n=st.integers(0, 5), m=st.integers(0, 5), k=st.integers(0, 5),\n            t=st.integers(0, 5), **hu.gcs)\n     def test_sub(self, n, m, k, t, gc, dc):\n         self._test_binary_op(\"Sub\", np.subtract, n, m,\n                              k, t, -0.5, True, gc, dc)\n+        self._test_binary_op_in_place(\n+            \"Sub\", np.subtract, n, m,  -0.5, True, True, gc, dc)\n \n     @given(n=st.integers(0, 5), m=st.integers(0, 5), k=st.integers(0, 5),\n-           t=st.integers(0, 5), **hu.gcs)\n+           t=st.integers(0, 5), **hu.gcs_cpu_only)", "path": "caffe2/python/operator_test/elementwise_ops_test.py", "position": null, "original_position": 120, "commit_id": "ba5f57145c0619d88419e2e13198d862c94e304b", "original_commit_id": "01e3894e31067a55464b5a53c310a053a3b2c943", "user": {"login": "houseroad", "id": 30275821, "node_id": "MDQ6VXNlcjMwMjc1ODIx", "avatar_url": "https://avatars0.githubusercontent.com/u/30275821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/houseroad", "html_url": "https://github.com/houseroad", "followers_url": "https://api.github.com/users/houseroad/followers", "following_url": "https://api.github.com/users/houseroad/following{/other_user}", "gists_url": "https://api.github.com/users/houseroad/gists{/gist_id}", "starred_url": "https://api.github.com/users/houseroad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/houseroad/subscriptions", "organizations_url": "https://api.github.com/users/houseroad/orgs", "repos_url": "https://api.github.com/users/houseroad/repos", "events_url": "https://api.github.com/users/houseroad/events{/privacy}", "received_events_url": "https://api.github.com/users/houseroad/received_events", "type": "User", "site_admin": false}, "body": "Something is wrong with GPU's `Mul` implementation?", "created_at": "2018-06-28T06:16:38Z", "updated_at": "2018-11-23T15:46:30Z", "html_url": "https://github.com/pytorch/pytorch/pull/8973#discussion_r198718034", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/8973", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/198718034"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/8973#discussion_r198718034"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/8973"}}, "body_html": "<p>Something is wrong with GPU's <code>Mul</code> implementation?</p>", "body_text": "Something is wrong with GPU's Mul implementation?"}