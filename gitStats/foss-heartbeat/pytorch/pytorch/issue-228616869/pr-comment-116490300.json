{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/116490300", "pull_request_review_id": 38115221, "id": 116490300, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNjQ5MDMwMA==", "diff_hunk": "@@ -345,41 +345,14 @@ def __ge__(self, other):\n         return self.ge(other)\n \n     # TODO: add native add or and xor in the libs\n-    def __and__(self, other):\n-        if (type(self).__name__ != 'ByteTensor' or\n-                type(other).__name__ != 'ByteTensor'):\n-            raise RuntimeError('logical operations are supported on ByteTensors only')\n-        return (self + other).eq(2)\n-\n-    def __or__(self, other):\n-        if (type(self).__name__ != 'ByteTensor' or\n-                type(other).__name__ != 'ByteTensor'):\n-            raise RuntimeError('logical operations are supported on ByteTensors only')\n-        return (self + other).gt(0)\n-\n-    def __xor__(self, other):\n-        if (type(self).__name__ != 'ByteTensor' or\n-                type(other).__name__ != 'ByteTensor'):\n-            raise RuntimeError('logical operations are supported on ByteTensors only')\n-        return (self + other).eq(1)\n-\n     def __iand__(self, other):\n-        if (type(self).__name__ != 'ByteTensor' or\n-                type(other).__name__ != 'ByteTensor'):\n-            raise RuntimeError('logical operations are supported on ByteTensors only')\n-        return self.mul_(other)\n+        return self & other\n \n     def __ior__(self, other):\n-        if (type(self).__name__ != 'ByteTensor' or\n-                type(other).__name__ != 'ByteTensor'):\n-            raise RuntimeError('logical operations are supported on ByteTensors only')\n-        return self.copy_((self + other).gt(0))\n+        return self | other\n \n     def __ixor__(self, other):\n-        if (type(self).__name__ != 'ByteTensor' or\n-                type(other).__name__ != 'ByteTensor'):\n-            raise RuntimeError('logical operations are supported on ByteTensors only')\n-        return self.copy_((self + other).eq(1))\n+        return self ^ other", "path": "torch/tensor.py", "position": null, "original_position": 41, "commit_id": "1549ccdcdf8981e280bf477c96006479599fde07", "original_commit_id": "183ee10f768fe4a48a5e7b9576254c671ec6ce38", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "That's not right, it won't modify `self`, even though it's what the user expects. The best way to solve this would be to duplicate each of the cwrap declarations you wrote, prepend `i` in `name` (`__or__` -> `__ior__`), and change the first argument in every option from\r\n```\r\n        - arg: THTensor* result\r\n          output: True\r\n```\r\nto\r\n```\r\n        - THTensor* self\r\n```\r\nso you get two lines that look the same. This means that instead of allocating a new tensor for output, `self` will be both an input and output.", "created_at": "2017-05-15T13:30:51Z", "updated_at": "2018-11-23T15:33:27Z", "html_url": "https://github.com/pytorch/pytorch/pull/1556#discussion_r116490300", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/1556", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/116490300"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/1556#discussion_r116490300"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/1556"}}, "body_html": "<p>That's not right, it won't modify <code>self</code>, even though it's what the user expects. The best way to solve this would be to duplicate each of the cwrap declarations you wrote, prepend <code>i</code> in <code>name</code> (<code>__or__</code> -&gt; <code>__ior__</code>), and change the first argument in every option from</p>\n<pre><code>        - arg: THTensor* result\n          output: True\n</code></pre>\n<p>to</p>\n<pre><code>        - THTensor* self\n</code></pre>\n<p>so you get two lines that look the same. This means that instead of allocating a new tensor for output, <code>self</code> will be both an input and output.</p>", "body_text": "That's not right, it won't modify self, even though it's what the user expects. The best way to solve this would be to duplicate each of the cwrap declarations you wrote, prepend i in name (__or__ -> __ior__), and change the first argument in every option from\n        - arg: THTensor* result\n          output: True\n\nto\n        - THTensor* self\n\nso you get two lines that look the same. This means that instead of allocating a new tensor for output, self will be both an input and output."}