{"url": "https://api.github.com/repos/pytorch/pytorch/issues/1622", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/1622/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/1622/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/1622/events", "html_url": "https://github.com/pytorch/pytorch/issues/1622", "id": 230709741, "node_id": "MDU6SXNzdWUyMzA3MDk3NDE=", "number": 1622, "title": "Segfault when using torch.autograd.grad", "user": {"login": "philipjackson", "id": 26219665, "node_id": "MDQ6VXNlcjI2MjE5NjY1", "avatar_url": "https://avatars2.githubusercontent.com/u/26219665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philipjackson", "html_url": "https://github.com/philipjackson", "followers_url": "https://api.github.com/users/philipjackson/followers", "following_url": "https://api.github.com/users/philipjackson/following{/other_user}", "gists_url": "https://api.github.com/users/philipjackson/gists{/gist_id}", "starred_url": "https://api.github.com/users/philipjackson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philipjackson/subscriptions", "organizations_url": "https://api.github.com/users/philipjackson/orgs", "repos_url": "https://api.github.com/users/philipjackson/repos", "events_url": "https://api.github.com/users/philipjackson/events{/privacy}", "received_events_url": "https://api.github.com/users/philipjackson/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 424131847, "node_id": "MDU6TGFiZWw0MjQxMzE4NDc=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/bug", "name": "bug", "color": "b60205", "default": true}, {"id": 443484135, "node_id": "MDU6TGFiZWw0NDM0ODQxMzU=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/high%20priority", "name": "high priority", "color": "F22613", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/pytorch/pytorch/milestones/2", "html_url": "https://github.com/pytorch/pytorch/milestone/2", "labels_url": "https://api.github.com/repos/pytorch/pytorch/milestones/2/labels", "id": 2536200, "node_id": "MDk6TWlsZXN0b25lMjUzNjIwMA==", "number": 2, "title": "v0.2", "description": "", "creator": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "open_issues": 2, "closed_issues": 34, "state": "closed", "created_at": "2017-05-22T18:19:28Z", "updated_at": "2018-08-06T21:16:06Z", "due_on": "2017-06-04T07:00:00Z", "closed_at": "2018-08-06T21:16:06Z"}, "comments": 0, "created_at": "2017-05-23T13:38:24Z", "updated_at": "2017-05-24T21:13:09Z", "closed_at": "2017-05-24T21:13:09Z", "author_association": "NONE", "body_html": "<p>I've been trying to implement Improved Wasserstein GANs, which requires <code>torch.autograd.grad</code> from the bleeding-edge repo, but I've been getting segfaults. Here's a minimum working example:</p>\n<pre><code>import torch\nfrom torch.autograd import Variable\n\nx = Variable(torch.ones(1))\ny = x**2\ngrad = torch.autograd.grad(x,y)\n</code></pre>\n<p>Obviously this is a nonsense thing to do but it shouldn't segfault, and I presume it's related to my issues (which are definitely <code>torch.autograd.grad</code> related). I'm on the HEAD commit (45524e), I'm running in a conda env having followed the install from source instructions, and I'm using Fedora 25.</p>\n<p>Here is the output when I run valgrind:</p>\n<pre><code>valgrind --track-origins=yes -- ipython segfault.py\n\n...\n\n==28387== Conditional jump or move depends on uninitialised value(s)\n==28387==    at 0x4ED16DC: PyObject_Free (obmalloc.c:1013)\n==28387==    by 0x4EE51EC: tupledealloc (tupleobject.c:222)\n==28387==    by 0x4E9C0CA: code_dealloc (codeobject.c:348)\n==28387==    by 0x4F4D33C: load_source_module (import.c:1122)\n==28387==    by 0x4F4E0D0: import_submodule (import.c:2725)\n==28387==    by 0x4F4E60B: ensure_fromlist (import.c:2631)\n==28387==    by 0x4F4EAF3: import_module_level (import.c:2293)\n==28387==    by 0x4F4EAF3: PyImport_ImportModuleLevel (import.c:2312)\n==28387==    by 0x4F2E2CE: builtin___import__ (bltinmodule.c:49)\n==28387==    by 0x4E83E92: PyObject_Call (abstract.c:2547)\n==28387==    by 0x4F2E7B2: PyEval_CallObjectWithKeywords (ceval.c:4221)\n==28387==    by 0x4F33445: PyEval_EvalFrameEx (ceval.c:2624)\n==28387==    by 0x4F38C3D: PyEval_EvalCodeEx (ceval.c:3584)\n==28387==  Uninitialised value was created by a heap allocation\n==28387==    at 0x4C2DB9D: malloc (vg_replace_malloc.c:299)\n==28387==    by 0x4F4D120: load_source_module (import.c:1086)\n==28387==    by 0x4F4E0D0: import_submodule (import.c:2725)\n==28387==    by 0x4F4E60B: ensure_fromlist (import.c:2631)\n==28387==    by 0x4F4EAF3: import_module_level (import.c:2293)\n==28387==    by 0x4F4EAF3: PyImport_ImportModuleLevel (import.c:2312)\n==28387==    by 0x4F2E2CE: builtin___import__ (bltinmodule.c:49)\n==28387==    by 0x4E83E92: PyObject_Call (abstract.c:2547)\n==28387==    by 0x4F2E7B2: PyEval_CallObjectWithKeywords (ceval.c:4221)\n==28387==    by 0x4F33445: PyEval_EvalFrameEx (ceval.c:2624)\n==28387==    by 0x4F38C3D: PyEval_EvalCodeEx (ceval.c:3584)\n==28387==    by 0x4F38D51: PyEval_EvalCode (ceval.c:669)\n==28387==    by 0x4F4ABD1: PyImport_ExecCodeModuleEx (import.c:731)\n==28387== \n==28387== Conditional jump or move depends on uninitialised value(s)\n==28387==    at 0x3674D08F: __intel_sse2_strrchr (in /home/phil/anaconda2/envs/pytorch/lib/libiomp5.so)\n==28387==    by 0x366EB411: _INTERNAL_45_______src_thirdparty_tbb_omp_dynamic_link_cpp_7b148ce4::__kmp::init_dl_data() (in /home/phil/anaconda2/envs/pytorch/lib/libiomp5.so)\n==28387==    by 0x366EB366: __sti__$E (in /home/phil/anaconda2/envs/pytorch/lib/libiomp5.so)\n==28387==    by 0x3675DF25: ??? (in /home/phil/anaconda2/envs/pytorch/lib/libiomp5.so)\n==28387==    by 0x3665D48A: ??? (in /home/phil/anaconda2/envs/pytorch/lib/libiomp5.so)\n==28387==    by 0x2: ???\n==28387==    by 0x40109F9: call_init.part.0 (in /usr/lib64/ld-2.24.so)\n==28387==    by 0x4010B4A: _dl_init (in /usr/lib64/ld-2.24.so)\n==28387==    by 0x4015AA5: dl_open_worker (in /usr/lib64/ld-2.24.so)\n==28387==    by 0x40108E3: _dl_catch_error (in /usr/lib64/ld-2.24.so)\n==28387==    by 0x4015078: _dl_open (in /usr/lib64/ld-2.24.so)\n==28387==    by 0x5454F08: dlopen_doit (in /usr/lib64/libdl-2.24.so)\n==28387== \n==28387== Invalid read of size 4\n==28387==    at 0x4ED16D3: PyObject_Free (obmalloc.c:1013)\n==28387==    by 0x2B22D32E: THPPointer&lt;_object&gt;::free() (object_ptr.cpp:8)\n==28387==    by 0x2B1D9DAF: THPPointer&lt;_object&gt;::~THPPointer() (object_ptr.h:12)\n==28387==    by 0x2B1D9AA1: THPUtils_unpackString(_object*) (python_strings.h:32)\n==28387==    by 0x2B1D8836: THPModule_addDocStr(_object*, _object*) (Module.cpp:443)\n==28387==    by 0x4F371E4: call_function (ceval.c:4352)\n==28387==    by 0x4F371E4: PyEval_EvalFrameEx (ceval.c:2989)\n==28387==    by 0x4F38C3D: PyEval_EvalCodeEx (ceval.c:3584)\n==28387==    by 0x4F38D51: PyEval_EvalCode (ceval.c:669)\n==28387==    by 0x4F4ABD1: PyImport_ExecCodeModuleEx (import.c:731)\n==28387==    by 0x4F4D31D: load_source_module (import.c:1121)\n==28387==    by 0x4F4E0D0: import_submodule (import.c:2725)\n==28387==    by 0x4F4E60B: ensure_fromlist (import.c:2631)\n==28387==  Address 0x5f2d020 is 6,144 bytes inside a block of size 6,453 free'd\n==28387==    at 0x4C2FC47: realloc (vg_replace_malloc.c:785)\n==28387==    by 0x4EDBBB6: _PyString_Resize (stringobject.c:3909)\n==28387==    by 0x4EFD593: PyUnicodeUCS4_EncodeUTF8 (unicodeobject.c:2238)\n==28387==    by 0x2B1D99AD: THPUtils_unpackString(_object*) (python_strings.h:27)\n==28387==    by 0x2B1D8836: THPModule_addDocStr(_object*, _object*) (Module.cpp:443)\n==28387==    by 0x4F371E4: call_function (ceval.c:4352)\n==28387==    by 0x4F371E4: PyEval_EvalFrameEx (ceval.c:2989)\n==28387==    by 0x4F38C3D: PyEval_EvalCodeEx (ceval.c:3584)\n==28387==    by 0x4F38D51: PyEval_EvalCode (ceval.c:669)\n==28387==    by 0x4F4ABD1: PyImport_ExecCodeModuleEx (import.c:731)\n==28387==    by 0x4F4D31D: load_source_module (import.c:1121)\n==28387==    by 0x4F4E0D0: import_submodule (import.c:2725)\n==28387==    by 0x4F4E60B: ensure_fromlist (import.c:2631)\n==28387==  Block was alloc'd at\n==28387==    at 0x4C2DB9D: malloc (vg_replace_malloc.c:299)\n==28387==    by 0x4ED9A79: PyString_FromStringAndSize (stringobject.c:88)\n==28387==    by 0x4EFD5BD: PyUnicodeUCS4_EncodeUTF8 (unicodeobject.c:2181)\n==28387==    by 0x2B1D99AD: THPUtils_unpackString(_object*) (python_strings.h:27)\n==28387==    by 0x2B1D8836: THPModule_addDocStr(_object*, _object*) (Module.cpp:443)\n==28387==    by 0x4F371E4: call_function (ceval.c:4352)\n==28387==    by 0x4F371E4: PyEval_EvalFrameEx (ceval.c:2989)\n==28387==    by 0x4F38C3D: PyEval_EvalCodeEx (ceval.c:3584)\n==28387==    by 0x4F38D51: PyEval_EvalCode (ceval.c:669)\n==28387==    by 0x4F4ABD1: PyImport_ExecCodeModuleEx (import.c:731)\n==28387==    by 0x4F4D31D: load_source_module (import.c:1121)\n==28387==    by 0x4F4E0D0: import_submodule (import.c:2725)\n==28387==    by 0x4F4E60B: ensure_fromlist (import.c:2631)\n==28387== \n==28387== Syscall param sched_setaffinity(mask) points to unaddressable byte(s)\n==28387==    at 0x5C65BF9: syscall (in /usr/lib64/libc-2.24.so)\n==28387==    by 0x366F7028: __kmp_affinity_determine_capable (in /home/phil/anaconda2/envs/pytorch/lib/libiomp5.so)\n==28387==    by 0x366D7A24: __kmp_env_initialize(char const*) (in /home/phil/anaconda2/envs/pytorch/lib/libiomp5.so)\n==28387==    by 0x366C3E06: _INTERNAL_23_______src_kmp_runtime_c_680c9f7a::__kmp_do_serial_initialize() (in /home/phil/anaconda2/envs/pytorch/lib/libiomp5.so)\n==28387==    by 0x366B8F84: __kmp_get_global_thread_id_reg (in /home/phil/anaconda2/envs/pytorch/lib/libiomp5.so)\n==28387==    by 0x366AF846: GOMP_parallel_start@@VERSION (in /home/phil/anaconda2/envs/pytorch/lib/libiomp5.so)\n==28387==    by 0x2C9FCF50: THFloatTensor_fill (THTensorMath.c:102)\n==28387==    by 0x2CA2E3A8: THFloatTensor_ones (THTensorMath.c:1862)\n==28387==    by 0x2B404FF3: THPFloatTensor_stateless_ones(_object*, _object*, _object*) (TensorMethods.cpp:369)\n==28387==    by 0x4E83E92: PyObject_Call (abstract.c:2547)\n==28387==    by 0x2B21FCC0: THPUtils_dispatchStateless(_object*, char const*, _object*, _object*) (utils.cpp:154)\n==28387==    by 0x2B1D4F70: THPModule_ones(_object*, _object*, _object*) (Module.cpp:282)\n==28387==  Address 0x0 is not stack'd, malloc'd or (recently) free'd\n==28387== \n==28387== Invalid read of size 8\n==28387==    at 0x2B23C8F0: __gnu_cxx::__normal_iterator&lt;std::pair&lt;std::shared_ptr&lt;torch::autograd::Function&gt;, int&gt;*, std::vector&lt;std::pair&lt;std::shared_ptr&lt;torch::autograd::Function&gt;, int&gt;, std::allocator&lt;std::pair&lt;std::shared_ptr&lt;torch::autograd::Function&gt;, int&gt; &gt; &gt; &gt;::__normal_iterator(std::pair&lt;std::shared_ptr&lt;torch::autograd::Function&gt;, int&gt;* const&amp;) (stl_iterator.h:726)\n==28387==    by 0x2B23AB54: std::vector&lt;std::pair&lt;std::shared_ptr&lt;torch::autograd::Function&gt;, int&gt;, std::allocator&lt;std::pair&lt;std::shared_ptr&lt;torch::autograd::Function&gt;, int&gt; &gt; &gt;::begin() (stl_vector.h:539)\n==28387==    by 0x2B26944B: compute_partial_exec_callbacks(std::vector&lt;std::pair&lt;std::shared_ptr&lt;torch::autograd::Function&gt;, int&gt;, std::allocator&lt;std::pair&lt;std::shared_ptr&lt;torch::autograd::Function&gt;, int&gt; &gt; &gt; const&amp;, CallbackContext const&amp;, std::unordered_map&lt;torch::autograd::Function*, std::function&lt;bool (torch::autograd::Function*, std::vector&lt;std::shared_ptr&lt;torch::autograd::Variable&gt;, std::allocator&lt;std::shared_ptr&lt;torch::autograd::Variable&gt; &gt; &gt;&amp;)&gt;, std::hash&lt;torch::autograd::Function*&gt;, std::equal_to&lt;torch::autograd::Function*&gt;, std::allocator&lt;std::pair&lt;torch::autograd::Function* const, std::function&lt;bool (torch::autograd::Function*, std::vector&lt;std::shared_ptr&lt;torch::autograd::Variable&gt;, std::allocator&lt;std::shared_ptr&lt;torch::autograd::Variable&gt; &gt; &gt;&amp;)&gt; &gt; &gt; &gt;&amp;) (python_engine.cpp:72)\n==28387==    by 0x2B26A456: THPEngine_run_backward(THPEngine*, _object*, _object*) (python_engine.cpp:195)\n==28387==    by 0x4F371E4: call_function (ceval.c:4352)\n==28387==    by 0x4F371E4: PyEval_EvalFrameEx (ceval.c:2989)\n==28387==    by 0x4F38C3D: PyEval_EvalCodeEx (ceval.c:3584)\n==28387==    by 0x4F381F6: fast_function (ceval.c:4447)\n==28387==    by 0x4F381F6: call_function (ceval.c:4372)\n==28387==    by 0x4F381F6: PyEval_EvalFrameEx (ceval.c:2989)\n==28387==    by 0x4F38C3D: PyEval_EvalCodeEx (ceval.c:3584)\n==28387==    by 0x4F38D51: PyEval_EvalCode (ceval.c:669)\n==28387==    by 0x4F37807: exec_statement (ceval.c:5050)\n==28387==    by 0x4F37807: PyEval_EvalFrameEx (ceval.c:2106)\n==28387==    by 0x4F38C3D: PyEval_EvalCodeEx (ceval.c:3584)\n==28387==    by 0x4F381F6: fast_function (ceval.c:4447)\n==28387==    by 0x4F381F6: call_function (ceval.c:4372)\n==28387==    by 0x4F381F6: PyEval_EvalFrameEx (ceval.c:2989)\n==28387==  Address 0x10 is not stack'd, malloc'd or (recently) free'd\n==28387== \n==28387== \n==28387== Process terminating with default action of signal 11 (SIGSEGV): dumping core\n==28387==  Access not within mapped region at address 0x10\n==28387==    at 0x2B23C8F0: __gnu_cxx::__normal_iterator&lt;std::pair&lt;std::shared_ptr&lt;torch::autograd::Function&gt;, int&gt;*, std::vector&lt;std::pair&lt;std::shared_ptr&lt;torch::autograd::Function&gt;, int&gt;, std::allocator&lt;std::pair&lt;std::shared_ptr&lt;torch::autograd::Function&gt;, int&gt; &gt; &gt; &gt;::__normal_iterator(std::pair&lt;std::shared_ptr&lt;torch::autograd::Function&gt;, int&gt;* const&amp;) (stl_iterator.h:726)\n==28387==    by 0x2B23AB54: std::vector&lt;std::pair&lt;std::shared_ptr&lt;torch::autograd::Function&gt;, int&gt;, std::allocator&lt;std::pair&lt;std::shared_ptr&lt;torch::autograd::Function&gt;, int&gt; &gt; &gt;::begin() (stl_vector.h:539)\n==28387==    by 0x2B26944B: compute_partial_exec_callbacks(std::vector&lt;std::pair&lt;std::shared_ptr&lt;torch::autograd::Function&gt;, int&gt;, std::allocator&lt;std::pair&lt;std::shared_ptr&lt;torch::autograd::Function&gt;, int&gt; &gt; &gt; const&amp;, CallbackContext const&amp;, std::unordered_map&lt;torch::autograd::Function*, std::function&lt;bool (torch::autograd::Function*, std::vector&lt;std::shared_ptr&lt;torch::autograd::Variable&gt;, std::allocator&lt;std::shared_ptr&lt;torch::autograd::Variable&gt; &gt; &gt;&amp;)&gt;, std::hash&lt;torch::autograd::Function*&gt;, std::equal_to&lt;torch::autograd::Function*&gt;, std::allocator&lt;std::pair&lt;torch::autograd::Function* const, std::function&lt;bool (torch::autograd::Function*, std::vector&lt;std::shared_ptr&lt;torch::autograd::Variable&gt;, std::allocator&lt;std::shared_ptr&lt;torch::autograd::Variable&gt; &gt; &gt;&amp;)&gt; &gt; &gt; &gt;&amp;) (python_engine.cpp:72)\n==28387==    by 0x2B26A456: THPEngine_run_backward(THPEngine*, _object*, _object*) (python_engine.cpp:195)\n==28387==    by 0x4F371E4: call_function (ceval.c:4352)\n==28387==    by 0x4F371E4: PyEval_EvalFrameEx (ceval.c:2989)\n==28387==    by 0x4F38C3D: PyEval_EvalCodeEx (ceval.c:3584)\n==28387==    by 0x4F381F6: fast_function (ceval.c:4447)\n==28387==    by 0x4F381F6: call_function (ceval.c:4372)\n==28387==    by 0x4F381F6: PyEval_EvalFrameEx (ceval.c:2989)\n==28387==    by 0x4F38C3D: PyEval_EvalCodeEx (ceval.c:3584)\n==28387==    by 0x4F38D51: PyEval_EvalCode (ceval.c:669)\n==28387==    by 0x4F37807: exec_statement (ceval.c:5050)\n==28387==    by 0x4F37807: PyEval_EvalFrameEx (ceval.c:2106)\n==28387==    by 0x4F38C3D: PyEval_EvalCodeEx (ceval.c:3584)\n==28387==    by 0x4F381F6: fast_function (ceval.c:4447)\n==28387==    by 0x4F381F6: call_function (ceval.c:4372)\n==28387==    by 0x4F381F6: PyEval_EvalFrameEx (ceval.c:2989)\n==28387==  If you believe this happened as a result of a stack\n==28387==  overflow in your program's main thread (unlikely but\n==28387==  possible), you can try to increase the size of the\n==28387==  main thread stack using the --main-stacksize= flag.\n==28387==  The main thread stack size used in this run was 8388608.\n==28387== \n==28387== HEAP SUMMARY:\n==28387==     in use at exit: 21,966,492 bytes in 66,340 blocks\n==28387==   total heap usage: 281,301 allocs, 214,961 frees, 163,888,150 bytes allocated\n==28387== \n==28387== LEAK SUMMARY:\n==28387==    definitely lost: 0 bytes in 0 blocks\n==28387==    indirectly lost: 0 bytes in 0 blocks\n==28387==      possibly lost: 409,732 bytes in 477 blocks\n==28387==    still reachable: 21,556,760 bytes in 65,863 blocks\n==28387==                       of which reachable via heuristic:\n==28387==                         stdstring          : 134,540 bytes in 362 blocks\n==28387==                         length64           : 599,664 bytes in 192 blocks\n==28387==         suppressed: 0 bytes in 0 blocks\n==28387== Rerun with --leak-check=full to see details of leaked memory\n==28387== \n==28387== For counts of detected and suppressed errors, rerun with: -v\n==28387== ERROR SUMMARY: 3644 errors from 125 contexts (suppressed: 0 from 0)\nSegmentation fault (core dumped)\n</code></pre>\n<p>Any ideas?</p>", "body_text": "I've been trying to implement Improved Wasserstein GANs, which requires torch.autograd.grad from the bleeding-edge repo, but I've been getting segfaults. Here's a minimum working example:\nimport torch\nfrom torch.autograd import Variable\n\nx = Variable(torch.ones(1))\ny = x**2\ngrad = torch.autograd.grad(x,y)\n\nObviously this is a nonsense thing to do but it shouldn't segfault, and I presume it's related to my issues (which are definitely torch.autograd.grad related). I'm on the HEAD commit (45524e), I'm running in a conda env having followed the install from source instructions, and I'm using Fedora 25.\nHere is the output when I run valgrind:\nvalgrind --track-origins=yes -- ipython segfault.py\n\n...\n\n==28387== Conditional jump or move depends on uninitialised value(s)\n==28387==    at 0x4ED16DC: PyObject_Free (obmalloc.c:1013)\n==28387==    by 0x4EE51EC: tupledealloc (tupleobject.c:222)\n==28387==    by 0x4E9C0CA: code_dealloc (codeobject.c:348)\n==28387==    by 0x4F4D33C: load_source_module (import.c:1122)\n==28387==    by 0x4F4E0D0: import_submodule (import.c:2725)\n==28387==    by 0x4F4E60B: ensure_fromlist (import.c:2631)\n==28387==    by 0x4F4EAF3: import_module_level (import.c:2293)\n==28387==    by 0x4F4EAF3: PyImport_ImportModuleLevel (import.c:2312)\n==28387==    by 0x4F2E2CE: builtin___import__ (bltinmodule.c:49)\n==28387==    by 0x4E83E92: PyObject_Call (abstract.c:2547)\n==28387==    by 0x4F2E7B2: PyEval_CallObjectWithKeywords (ceval.c:4221)\n==28387==    by 0x4F33445: PyEval_EvalFrameEx (ceval.c:2624)\n==28387==    by 0x4F38C3D: PyEval_EvalCodeEx (ceval.c:3584)\n==28387==  Uninitialised value was created by a heap allocation\n==28387==    at 0x4C2DB9D: malloc (vg_replace_malloc.c:299)\n==28387==    by 0x4F4D120: load_source_module (import.c:1086)\n==28387==    by 0x4F4E0D0: import_submodule (import.c:2725)\n==28387==    by 0x4F4E60B: ensure_fromlist (import.c:2631)\n==28387==    by 0x4F4EAF3: import_module_level (import.c:2293)\n==28387==    by 0x4F4EAF3: PyImport_ImportModuleLevel (import.c:2312)\n==28387==    by 0x4F2E2CE: builtin___import__ (bltinmodule.c:49)\n==28387==    by 0x4E83E92: PyObject_Call (abstract.c:2547)\n==28387==    by 0x4F2E7B2: PyEval_CallObjectWithKeywords (ceval.c:4221)\n==28387==    by 0x4F33445: PyEval_EvalFrameEx (ceval.c:2624)\n==28387==    by 0x4F38C3D: PyEval_EvalCodeEx (ceval.c:3584)\n==28387==    by 0x4F38D51: PyEval_EvalCode (ceval.c:669)\n==28387==    by 0x4F4ABD1: PyImport_ExecCodeModuleEx (import.c:731)\n==28387== \n==28387== Conditional jump or move depends on uninitialised value(s)\n==28387==    at 0x3674D08F: __intel_sse2_strrchr (in /home/phil/anaconda2/envs/pytorch/lib/libiomp5.so)\n==28387==    by 0x366EB411: _INTERNAL_45_______src_thirdparty_tbb_omp_dynamic_link_cpp_7b148ce4::__kmp::init_dl_data() (in /home/phil/anaconda2/envs/pytorch/lib/libiomp5.so)\n==28387==    by 0x366EB366: __sti__$E (in /home/phil/anaconda2/envs/pytorch/lib/libiomp5.so)\n==28387==    by 0x3675DF25: ??? (in /home/phil/anaconda2/envs/pytorch/lib/libiomp5.so)\n==28387==    by 0x3665D48A: ??? (in /home/phil/anaconda2/envs/pytorch/lib/libiomp5.so)\n==28387==    by 0x2: ???\n==28387==    by 0x40109F9: call_init.part.0 (in /usr/lib64/ld-2.24.so)\n==28387==    by 0x4010B4A: _dl_init (in /usr/lib64/ld-2.24.so)\n==28387==    by 0x4015AA5: dl_open_worker (in /usr/lib64/ld-2.24.so)\n==28387==    by 0x40108E3: _dl_catch_error (in /usr/lib64/ld-2.24.so)\n==28387==    by 0x4015078: _dl_open (in /usr/lib64/ld-2.24.so)\n==28387==    by 0x5454F08: dlopen_doit (in /usr/lib64/libdl-2.24.so)\n==28387== \n==28387== Invalid read of size 4\n==28387==    at 0x4ED16D3: PyObject_Free (obmalloc.c:1013)\n==28387==    by 0x2B22D32E: THPPointer<_object>::free() (object_ptr.cpp:8)\n==28387==    by 0x2B1D9DAF: THPPointer<_object>::~THPPointer() (object_ptr.h:12)\n==28387==    by 0x2B1D9AA1: THPUtils_unpackString(_object*) (python_strings.h:32)\n==28387==    by 0x2B1D8836: THPModule_addDocStr(_object*, _object*) (Module.cpp:443)\n==28387==    by 0x4F371E4: call_function (ceval.c:4352)\n==28387==    by 0x4F371E4: PyEval_EvalFrameEx (ceval.c:2989)\n==28387==    by 0x4F38C3D: PyEval_EvalCodeEx (ceval.c:3584)\n==28387==    by 0x4F38D51: PyEval_EvalCode (ceval.c:669)\n==28387==    by 0x4F4ABD1: PyImport_ExecCodeModuleEx (import.c:731)\n==28387==    by 0x4F4D31D: load_source_module (import.c:1121)\n==28387==    by 0x4F4E0D0: import_submodule (import.c:2725)\n==28387==    by 0x4F4E60B: ensure_fromlist (import.c:2631)\n==28387==  Address 0x5f2d020 is 6,144 bytes inside a block of size 6,453 free'd\n==28387==    at 0x4C2FC47: realloc (vg_replace_malloc.c:785)\n==28387==    by 0x4EDBBB6: _PyString_Resize (stringobject.c:3909)\n==28387==    by 0x4EFD593: PyUnicodeUCS4_EncodeUTF8 (unicodeobject.c:2238)\n==28387==    by 0x2B1D99AD: THPUtils_unpackString(_object*) (python_strings.h:27)\n==28387==    by 0x2B1D8836: THPModule_addDocStr(_object*, _object*) (Module.cpp:443)\n==28387==    by 0x4F371E4: call_function (ceval.c:4352)\n==28387==    by 0x4F371E4: PyEval_EvalFrameEx (ceval.c:2989)\n==28387==    by 0x4F38C3D: PyEval_EvalCodeEx (ceval.c:3584)\n==28387==    by 0x4F38D51: PyEval_EvalCode (ceval.c:669)\n==28387==    by 0x4F4ABD1: PyImport_ExecCodeModuleEx (import.c:731)\n==28387==    by 0x4F4D31D: load_source_module (import.c:1121)\n==28387==    by 0x4F4E0D0: import_submodule (import.c:2725)\n==28387==    by 0x4F4E60B: ensure_fromlist (import.c:2631)\n==28387==  Block was alloc'd at\n==28387==    at 0x4C2DB9D: malloc (vg_replace_malloc.c:299)\n==28387==    by 0x4ED9A79: PyString_FromStringAndSize (stringobject.c:88)\n==28387==    by 0x4EFD5BD: PyUnicodeUCS4_EncodeUTF8 (unicodeobject.c:2181)\n==28387==    by 0x2B1D99AD: THPUtils_unpackString(_object*) (python_strings.h:27)\n==28387==    by 0x2B1D8836: THPModule_addDocStr(_object*, _object*) (Module.cpp:443)\n==28387==    by 0x4F371E4: call_function (ceval.c:4352)\n==28387==    by 0x4F371E4: PyEval_EvalFrameEx (ceval.c:2989)\n==28387==    by 0x4F38C3D: PyEval_EvalCodeEx (ceval.c:3584)\n==28387==    by 0x4F38D51: PyEval_EvalCode (ceval.c:669)\n==28387==    by 0x4F4ABD1: PyImport_ExecCodeModuleEx (import.c:731)\n==28387==    by 0x4F4D31D: load_source_module (import.c:1121)\n==28387==    by 0x4F4E0D0: import_submodule (import.c:2725)\n==28387==    by 0x4F4E60B: ensure_fromlist (import.c:2631)\n==28387== \n==28387== Syscall param sched_setaffinity(mask) points to unaddressable byte(s)\n==28387==    at 0x5C65BF9: syscall (in /usr/lib64/libc-2.24.so)\n==28387==    by 0x366F7028: __kmp_affinity_determine_capable (in /home/phil/anaconda2/envs/pytorch/lib/libiomp5.so)\n==28387==    by 0x366D7A24: __kmp_env_initialize(char const*) (in /home/phil/anaconda2/envs/pytorch/lib/libiomp5.so)\n==28387==    by 0x366C3E06: _INTERNAL_23_______src_kmp_runtime_c_680c9f7a::__kmp_do_serial_initialize() (in /home/phil/anaconda2/envs/pytorch/lib/libiomp5.so)\n==28387==    by 0x366B8F84: __kmp_get_global_thread_id_reg (in /home/phil/anaconda2/envs/pytorch/lib/libiomp5.so)\n==28387==    by 0x366AF846: GOMP_parallel_start@@VERSION (in /home/phil/anaconda2/envs/pytorch/lib/libiomp5.so)\n==28387==    by 0x2C9FCF50: THFloatTensor_fill (THTensorMath.c:102)\n==28387==    by 0x2CA2E3A8: THFloatTensor_ones (THTensorMath.c:1862)\n==28387==    by 0x2B404FF3: THPFloatTensor_stateless_ones(_object*, _object*, _object*) (TensorMethods.cpp:369)\n==28387==    by 0x4E83E92: PyObject_Call (abstract.c:2547)\n==28387==    by 0x2B21FCC0: THPUtils_dispatchStateless(_object*, char const*, _object*, _object*) (utils.cpp:154)\n==28387==    by 0x2B1D4F70: THPModule_ones(_object*, _object*, _object*) (Module.cpp:282)\n==28387==  Address 0x0 is not stack'd, malloc'd or (recently) free'd\n==28387== \n==28387== Invalid read of size 8\n==28387==    at 0x2B23C8F0: __gnu_cxx::__normal_iterator<std::pair<std::shared_ptr<torch::autograd::Function>, int>*, std::vector<std::pair<std::shared_ptr<torch::autograd::Function>, int>, std::allocator<std::pair<std::shared_ptr<torch::autograd::Function>, int> > > >::__normal_iterator(std::pair<std::shared_ptr<torch::autograd::Function>, int>* const&) (stl_iterator.h:726)\n==28387==    by 0x2B23AB54: std::vector<std::pair<std::shared_ptr<torch::autograd::Function>, int>, std::allocator<std::pair<std::shared_ptr<torch::autograd::Function>, int> > >::begin() (stl_vector.h:539)\n==28387==    by 0x2B26944B: compute_partial_exec_callbacks(std::vector<std::pair<std::shared_ptr<torch::autograd::Function>, int>, std::allocator<std::pair<std::shared_ptr<torch::autograd::Function>, int> > > const&, CallbackContext const&, std::unordered_map<torch::autograd::Function*, std::function<bool (torch::autograd::Function*, std::vector<std::shared_ptr<torch::autograd::Variable>, std::allocator<std::shared_ptr<torch::autograd::Variable> > >&)>, std::hash<torch::autograd::Function*>, std::equal_to<torch::autograd::Function*>, std::allocator<std::pair<torch::autograd::Function* const, std::function<bool (torch::autograd::Function*, std::vector<std::shared_ptr<torch::autograd::Variable>, std::allocator<std::shared_ptr<torch::autograd::Variable> > >&)> > > >&) (python_engine.cpp:72)\n==28387==    by 0x2B26A456: THPEngine_run_backward(THPEngine*, _object*, _object*) (python_engine.cpp:195)\n==28387==    by 0x4F371E4: call_function (ceval.c:4352)\n==28387==    by 0x4F371E4: PyEval_EvalFrameEx (ceval.c:2989)\n==28387==    by 0x4F38C3D: PyEval_EvalCodeEx (ceval.c:3584)\n==28387==    by 0x4F381F6: fast_function (ceval.c:4447)\n==28387==    by 0x4F381F6: call_function (ceval.c:4372)\n==28387==    by 0x4F381F6: PyEval_EvalFrameEx (ceval.c:2989)\n==28387==    by 0x4F38C3D: PyEval_EvalCodeEx (ceval.c:3584)\n==28387==    by 0x4F38D51: PyEval_EvalCode (ceval.c:669)\n==28387==    by 0x4F37807: exec_statement (ceval.c:5050)\n==28387==    by 0x4F37807: PyEval_EvalFrameEx (ceval.c:2106)\n==28387==    by 0x4F38C3D: PyEval_EvalCodeEx (ceval.c:3584)\n==28387==    by 0x4F381F6: fast_function (ceval.c:4447)\n==28387==    by 0x4F381F6: call_function (ceval.c:4372)\n==28387==    by 0x4F381F6: PyEval_EvalFrameEx (ceval.c:2989)\n==28387==  Address 0x10 is not stack'd, malloc'd or (recently) free'd\n==28387== \n==28387== \n==28387== Process terminating with default action of signal 11 (SIGSEGV): dumping core\n==28387==  Access not within mapped region at address 0x10\n==28387==    at 0x2B23C8F0: __gnu_cxx::__normal_iterator<std::pair<std::shared_ptr<torch::autograd::Function>, int>*, std::vector<std::pair<std::shared_ptr<torch::autograd::Function>, int>, std::allocator<std::pair<std::shared_ptr<torch::autograd::Function>, int> > > >::__normal_iterator(std::pair<std::shared_ptr<torch::autograd::Function>, int>* const&) (stl_iterator.h:726)\n==28387==    by 0x2B23AB54: std::vector<std::pair<std::shared_ptr<torch::autograd::Function>, int>, std::allocator<std::pair<std::shared_ptr<torch::autograd::Function>, int> > >::begin() (stl_vector.h:539)\n==28387==    by 0x2B26944B: compute_partial_exec_callbacks(std::vector<std::pair<std::shared_ptr<torch::autograd::Function>, int>, std::allocator<std::pair<std::shared_ptr<torch::autograd::Function>, int> > > const&, CallbackContext const&, std::unordered_map<torch::autograd::Function*, std::function<bool (torch::autograd::Function*, std::vector<std::shared_ptr<torch::autograd::Variable>, std::allocator<std::shared_ptr<torch::autograd::Variable> > >&)>, std::hash<torch::autograd::Function*>, std::equal_to<torch::autograd::Function*>, std::allocator<std::pair<torch::autograd::Function* const, std::function<bool (torch::autograd::Function*, std::vector<std::shared_ptr<torch::autograd::Variable>, std::allocator<std::shared_ptr<torch::autograd::Variable> > >&)> > > >&) (python_engine.cpp:72)\n==28387==    by 0x2B26A456: THPEngine_run_backward(THPEngine*, _object*, _object*) (python_engine.cpp:195)\n==28387==    by 0x4F371E4: call_function (ceval.c:4352)\n==28387==    by 0x4F371E4: PyEval_EvalFrameEx (ceval.c:2989)\n==28387==    by 0x4F38C3D: PyEval_EvalCodeEx (ceval.c:3584)\n==28387==    by 0x4F381F6: fast_function (ceval.c:4447)\n==28387==    by 0x4F381F6: call_function (ceval.c:4372)\n==28387==    by 0x4F381F6: PyEval_EvalFrameEx (ceval.c:2989)\n==28387==    by 0x4F38C3D: PyEval_EvalCodeEx (ceval.c:3584)\n==28387==    by 0x4F38D51: PyEval_EvalCode (ceval.c:669)\n==28387==    by 0x4F37807: exec_statement (ceval.c:5050)\n==28387==    by 0x4F37807: PyEval_EvalFrameEx (ceval.c:2106)\n==28387==    by 0x4F38C3D: PyEval_EvalCodeEx (ceval.c:3584)\n==28387==    by 0x4F381F6: fast_function (ceval.c:4447)\n==28387==    by 0x4F381F6: call_function (ceval.c:4372)\n==28387==    by 0x4F381F6: PyEval_EvalFrameEx (ceval.c:2989)\n==28387==  If you believe this happened as a result of a stack\n==28387==  overflow in your program's main thread (unlikely but\n==28387==  possible), you can try to increase the size of the\n==28387==  main thread stack using the --main-stacksize= flag.\n==28387==  The main thread stack size used in this run was 8388608.\n==28387== \n==28387== HEAP SUMMARY:\n==28387==     in use at exit: 21,966,492 bytes in 66,340 blocks\n==28387==   total heap usage: 281,301 allocs, 214,961 frees, 163,888,150 bytes allocated\n==28387== \n==28387== LEAK SUMMARY:\n==28387==    definitely lost: 0 bytes in 0 blocks\n==28387==    indirectly lost: 0 bytes in 0 blocks\n==28387==      possibly lost: 409,732 bytes in 477 blocks\n==28387==    still reachable: 21,556,760 bytes in 65,863 blocks\n==28387==                       of which reachable via heuristic:\n==28387==                         stdstring          : 134,540 bytes in 362 blocks\n==28387==                         length64           : 599,664 bytes in 192 blocks\n==28387==         suppressed: 0 bytes in 0 blocks\n==28387== Rerun with --leak-check=full to see details of leaked memory\n==28387== \n==28387== For counts of detected and suppressed errors, rerun with: -v\n==28387== ERROR SUMMARY: 3644 errors from 125 contexts (suppressed: 0 from 0)\nSegmentation fault (core dumped)\n\nAny ideas?", "body": "I've been trying to implement Improved Wasserstein GANs, which requires `torch.autograd.grad` from the bleeding-edge repo, but I've been getting segfaults. Here's a minimum working example:\r\n\r\n```\r\nimport torch\r\nfrom torch.autograd import Variable\r\n\r\nx = Variable(torch.ones(1))\r\ny = x**2\r\ngrad = torch.autograd.grad(x,y)\r\n```\r\n\r\nObviously this is a nonsense thing to do but it shouldn't segfault, and I presume it's related to my issues (which are definitely `torch.autograd.grad` related). I'm on the HEAD commit (45524e), I'm running in a conda env having followed the install from source instructions, and I'm using Fedora 25.\r\n\r\nHere is the output when I run valgrind:\r\n\r\n```\r\nvalgrind --track-origins=yes -- ipython segfault.py\r\n\r\n...\r\n\r\n==28387== Conditional jump or move depends on uninitialised value(s)\r\n==28387==    at 0x4ED16DC: PyObject_Free (obmalloc.c:1013)\r\n==28387==    by 0x4EE51EC: tupledealloc (tupleobject.c:222)\r\n==28387==    by 0x4E9C0CA: code_dealloc (codeobject.c:348)\r\n==28387==    by 0x4F4D33C: load_source_module (import.c:1122)\r\n==28387==    by 0x4F4E0D0: import_submodule (import.c:2725)\r\n==28387==    by 0x4F4E60B: ensure_fromlist (import.c:2631)\r\n==28387==    by 0x4F4EAF3: import_module_level (import.c:2293)\r\n==28387==    by 0x4F4EAF3: PyImport_ImportModuleLevel (import.c:2312)\r\n==28387==    by 0x4F2E2CE: builtin___import__ (bltinmodule.c:49)\r\n==28387==    by 0x4E83E92: PyObject_Call (abstract.c:2547)\r\n==28387==    by 0x4F2E7B2: PyEval_CallObjectWithKeywords (ceval.c:4221)\r\n==28387==    by 0x4F33445: PyEval_EvalFrameEx (ceval.c:2624)\r\n==28387==    by 0x4F38C3D: PyEval_EvalCodeEx (ceval.c:3584)\r\n==28387==  Uninitialised value was created by a heap allocation\r\n==28387==    at 0x4C2DB9D: malloc (vg_replace_malloc.c:299)\r\n==28387==    by 0x4F4D120: load_source_module (import.c:1086)\r\n==28387==    by 0x4F4E0D0: import_submodule (import.c:2725)\r\n==28387==    by 0x4F4E60B: ensure_fromlist (import.c:2631)\r\n==28387==    by 0x4F4EAF3: import_module_level (import.c:2293)\r\n==28387==    by 0x4F4EAF3: PyImport_ImportModuleLevel (import.c:2312)\r\n==28387==    by 0x4F2E2CE: builtin___import__ (bltinmodule.c:49)\r\n==28387==    by 0x4E83E92: PyObject_Call (abstract.c:2547)\r\n==28387==    by 0x4F2E7B2: PyEval_CallObjectWithKeywords (ceval.c:4221)\r\n==28387==    by 0x4F33445: PyEval_EvalFrameEx (ceval.c:2624)\r\n==28387==    by 0x4F38C3D: PyEval_EvalCodeEx (ceval.c:3584)\r\n==28387==    by 0x4F38D51: PyEval_EvalCode (ceval.c:669)\r\n==28387==    by 0x4F4ABD1: PyImport_ExecCodeModuleEx (import.c:731)\r\n==28387== \r\n==28387== Conditional jump or move depends on uninitialised value(s)\r\n==28387==    at 0x3674D08F: __intel_sse2_strrchr (in /home/phil/anaconda2/envs/pytorch/lib/libiomp5.so)\r\n==28387==    by 0x366EB411: _INTERNAL_45_______src_thirdparty_tbb_omp_dynamic_link_cpp_7b148ce4::__kmp::init_dl_data() (in /home/phil/anaconda2/envs/pytorch/lib/libiomp5.so)\r\n==28387==    by 0x366EB366: __sti__$E (in /home/phil/anaconda2/envs/pytorch/lib/libiomp5.so)\r\n==28387==    by 0x3675DF25: ??? (in /home/phil/anaconda2/envs/pytorch/lib/libiomp5.so)\r\n==28387==    by 0x3665D48A: ??? (in /home/phil/anaconda2/envs/pytorch/lib/libiomp5.so)\r\n==28387==    by 0x2: ???\r\n==28387==    by 0x40109F9: call_init.part.0 (in /usr/lib64/ld-2.24.so)\r\n==28387==    by 0x4010B4A: _dl_init (in /usr/lib64/ld-2.24.so)\r\n==28387==    by 0x4015AA5: dl_open_worker (in /usr/lib64/ld-2.24.so)\r\n==28387==    by 0x40108E3: _dl_catch_error (in /usr/lib64/ld-2.24.so)\r\n==28387==    by 0x4015078: _dl_open (in /usr/lib64/ld-2.24.so)\r\n==28387==    by 0x5454F08: dlopen_doit (in /usr/lib64/libdl-2.24.so)\r\n==28387== \r\n==28387== Invalid read of size 4\r\n==28387==    at 0x4ED16D3: PyObject_Free (obmalloc.c:1013)\r\n==28387==    by 0x2B22D32E: THPPointer<_object>::free() (object_ptr.cpp:8)\r\n==28387==    by 0x2B1D9DAF: THPPointer<_object>::~THPPointer() (object_ptr.h:12)\r\n==28387==    by 0x2B1D9AA1: THPUtils_unpackString(_object*) (python_strings.h:32)\r\n==28387==    by 0x2B1D8836: THPModule_addDocStr(_object*, _object*) (Module.cpp:443)\r\n==28387==    by 0x4F371E4: call_function (ceval.c:4352)\r\n==28387==    by 0x4F371E4: PyEval_EvalFrameEx (ceval.c:2989)\r\n==28387==    by 0x4F38C3D: PyEval_EvalCodeEx (ceval.c:3584)\r\n==28387==    by 0x4F38D51: PyEval_EvalCode (ceval.c:669)\r\n==28387==    by 0x4F4ABD1: PyImport_ExecCodeModuleEx (import.c:731)\r\n==28387==    by 0x4F4D31D: load_source_module (import.c:1121)\r\n==28387==    by 0x4F4E0D0: import_submodule (import.c:2725)\r\n==28387==    by 0x4F4E60B: ensure_fromlist (import.c:2631)\r\n==28387==  Address 0x5f2d020 is 6,144 bytes inside a block of size 6,453 free'd\r\n==28387==    at 0x4C2FC47: realloc (vg_replace_malloc.c:785)\r\n==28387==    by 0x4EDBBB6: _PyString_Resize (stringobject.c:3909)\r\n==28387==    by 0x4EFD593: PyUnicodeUCS4_EncodeUTF8 (unicodeobject.c:2238)\r\n==28387==    by 0x2B1D99AD: THPUtils_unpackString(_object*) (python_strings.h:27)\r\n==28387==    by 0x2B1D8836: THPModule_addDocStr(_object*, _object*) (Module.cpp:443)\r\n==28387==    by 0x4F371E4: call_function (ceval.c:4352)\r\n==28387==    by 0x4F371E4: PyEval_EvalFrameEx (ceval.c:2989)\r\n==28387==    by 0x4F38C3D: PyEval_EvalCodeEx (ceval.c:3584)\r\n==28387==    by 0x4F38D51: PyEval_EvalCode (ceval.c:669)\r\n==28387==    by 0x4F4ABD1: PyImport_ExecCodeModuleEx (import.c:731)\r\n==28387==    by 0x4F4D31D: load_source_module (import.c:1121)\r\n==28387==    by 0x4F4E0D0: import_submodule (import.c:2725)\r\n==28387==    by 0x4F4E60B: ensure_fromlist (import.c:2631)\r\n==28387==  Block was alloc'd at\r\n==28387==    at 0x4C2DB9D: malloc (vg_replace_malloc.c:299)\r\n==28387==    by 0x4ED9A79: PyString_FromStringAndSize (stringobject.c:88)\r\n==28387==    by 0x4EFD5BD: PyUnicodeUCS4_EncodeUTF8 (unicodeobject.c:2181)\r\n==28387==    by 0x2B1D99AD: THPUtils_unpackString(_object*) (python_strings.h:27)\r\n==28387==    by 0x2B1D8836: THPModule_addDocStr(_object*, _object*) (Module.cpp:443)\r\n==28387==    by 0x4F371E4: call_function (ceval.c:4352)\r\n==28387==    by 0x4F371E4: PyEval_EvalFrameEx (ceval.c:2989)\r\n==28387==    by 0x4F38C3D: PyEval_EvalCodeEx (ceval.c:3584)\r\n==28387==    by 0x4F38D51: PyEval_EvalCode (ceval.c:669)\r\n==28387==    by 0x4F4ABD1: PyImport_ExecCodeModuleEx (import.c:731)\r\n==28387==    by 0x4F4D31D: load_source_module (import.c:1121)\r\n==28387==    by 0x4F4E0D0: import_submodule (import.c:2725)\r\n==28387==    by 0x4F4E60B: ensure_fromlist (import.c:2631)\r\n==28387== \r\n==28387== Syscall param sched_setaffinity(mask) points to unaddressable byte(s)\r\n==28387==    at 0x5C65BF9: syscall (in /usr/lib64/libc-2.24.so)\r\n==28387==    by 0x366F7028: __kmp_affinity_determine_capable (in /home/phil/anaconda2/envs/pytorch/lib/libiomp5.so)\r\n==28387==    by 0x366D7A24: __kmp_env_initialize(char const*) (in /home/phil/anaconda2/envs/pytorch/lib/libiomp5.so)\r\n==28387==    by 0x366C3E06: _INTERNAL_23_______src_kmp_runtime_c_680c9f7a::__kmp_do_serial_initialize() (in /home/phil/anaconda2/envs/pytorch/lib/libiomp5.so)\r\n==28387==    by 0x366B8F84: __kmp_get_global_thread_id_reg (in /home/phil/anaconda2/envs/pytorch/lib/libiomp5.so)\r\n==28387==    by 0x366AF846: GOMP_parallel_start@@VERSION (in /home/phil/anaconda2/envs/pytorch/lib/libiomp5.so)\r\n==28387==    by 0x2C9FCF50: THFloatTensor_fill (THTensorMath.c:102)\r\n==28387==    by 0x2CA2E3A8: THFloatTensor_ones (THTensorMath.c:1862)\r\n==28387==    by 0x2B404FF3: THPFloatTensor_stateless_ones(_object*, _object*, _object*) (TensorMethods.cpp:369)\r\n==28387==    by 0x4E83E92: PyObject_Call (abstract.c:2547)\r\n==28387==    by 0x2B21FCC0: THPUtils_dispatchStateless(_object*, char const*, _object*, _object*) (utils.cpp:154)\r\n==28387==    by 0x2B1D4F70: THPModule_ones(_object*, _object*, _object*) (Module.cpp:282)\r\n==28387==  Address 0x0 is not stack'd, malloc'd or (recently) free'd\r\n==28387== \r\n==28387== Invalid read of size 8\r\n==28387==    at 0x2B23C8F0: __gnu_cxx::__normal_iterator<std::pair<std::shared_ptr<torch::autograd::Function>, int>*, std::vector<std::pair<std::shared_ptr<torch::autograd::Function>, int>, std::allocator<std::pair<std::shared_ptr<torch::autograd::Function>, int> > > >::__normal_iterator(std::pair<std::shared_ptr<torch::autograd::Function>, int>* const&) (stl_iterator.h:726)\r\n==28387==    by 0x2B23AB54: std::vector<std::pair<std::shared_ptr<torch::autograd::Function>, int>, std::allocator<std::pair<std::shared_ptr<torch::autograd::Function>, int> > >::begin() (stl_vector.h:539)\r\n==28387==    by 0x2B26944B: compute_partial_exec_callbacks(std::vector<std::pair<std::shared_ptr<torch::autograd::Function>, int>, std::allocator<std::pair<std::shared_ptr<torch::autograd::Function>, int> > > const&, CallbackContext const&, std::unordered_map<torch::autograd::Function*, std::function<bool (torch::autograd::Function*, std::vector<std::shared_ptr<torch::autograd::Variable>, std::allocator<std::shared_ptr<torch::autograd::Variable> > >&)>, std::hash<torch::autograd::Function*>, std::equal_to<torch::autograd::Function*>, std::allocator<std::pair<torch::autograd::Function* const, std::function<bool (torch::autograd::Function*, std::vector<std::shared_ptr<torch::autograd::Variable>, std::allocator<std::shared_ptr<torch::autograd::Variable> > >&)> > > >&) (python_engine.cpp:72)\r\n==28387==    by 0x2B26A456: THPEngine_run_backward(THPEngine*, _object*, _object*) (python_engine.cpp:195)\r\n==28387==    by 0x4F371E4: call_function (ceval.c:4352)\r\n==28387==    by 0x4F371E4: PyEval_EvalFrameEx (ceval.c:2989)\r\n==28387==    by 0x4F38C3D: PyEval_EvalCodeEx (ceval.c:3584)\r\n==28387==    by 0x4F381F6: fast_function (ceval.c:4447)\r\n==28387==    by 0x4F381F6: call_function (ceval.c:4372)\r\n==28387==    by 0x4F381F6: PyEval_EvalFrameEx (ceval.c:2989)\r\n==28387==    by 0x4F38C3D: PyEval_EvalCodeEx (ceval.c:3584)\r\n==28387==    by 0x4F38D51: PyEval_EvalCode (ceval.c:669)\r\n==28387==    by 0x4F37807: exec_statement (ceval.c:5050)\r\n==28387==    by 0x4F37807: PyEval_EvalFrameEx (ceval.c:2106)\r\n==28387==    by 0x4F38C3D: PyEval_EvalCodeEx (ceval.c:3584)\r\n==28387==    by 0x4F381F6: fast_function (ceval.c:4447)\r\n==28387==    by 0x4F381F6: call_function (ceval.c:4372)\r\n==28387==    by 0x4F381F6: PyEval_EvalFrameEx (ceval.c:2989)\r\n==28387==  Address 0x10 is not stack'd, malloc'd or (recently) free'd\r\n==28387== \r\n==28387== \r\n==28387== Process terminating with default action of signal 11 (SIGSEGV): dumping core\r\n==28387==  Access not within mapped region at address 0x10\r\n==28387==    at 0x2B23C8F0: __gnu_cxx::__normal_iterator<std::pair<std::shared_ptr<torch::autograd::Function>, int>*, std::vector<std::pair<std::shared_ptr<torch::autograd::Function>, int>, std::allocator<std::pair<std::shared_ptr<torch::autograd::Function>, int> > > >::__normal_iterator(std::pair<std::shared_ptr<torch::autograd::Function>, int>* const&) (stl_iterator.h:726)\r\n==28387==    by 0x2B23AB54: std::vector<std::pair<std::shared_ptr<torch::autograd::Function>, int>, std::allocator<std::pair<std::shared_ptr<torch::autograd::Function>, int> > >::begin() (stl_vector.h:539)\r\n==28387==    by 0x2B26944B: compute_partial_exec_callbacks(std::vector<std::pair<std::shared_ptr<torch::autograd::Function>, int>, std::allocator<std::pair<std::shared_ptr<torch::autograd::Function>, int> > > const&, CallbackContext const&, std::unordered_map<torch::autograd::Function*, std::function<bool (torch::autograd::Function*, std::vector<std::shared_ptr<torch::autograd::Variable>, std::allocator<std::shared_ptr<torch::autograd::Variable> > >&)>, std::hash<torch::autograd::Function*>, std::equal_to<torch::autograd::Function*>, std::allocator<std::pair<torch::autograd::Function* const, std::function<bool (torch::autograd::Function*, std::vector<std::shared_ptr<torch::autograd::Variable>, std::allocator<std::shared_ptr<torch::autograd::Variable> > >&)> > > >&) (python_engine.cpp:72)\r\n==28387==    by 0x2B26A456: THPEngine_run_backward(THPEngine*, _object*, _object*) (python_engine.cpp:195)\r\n==28387==    by 0x4F371E4: call_function (ceval.c:4352)\r\n==28387==    by 0x4F371E4: PyEval_EvalFrameEx (ceval.c:2989)\r\n==28387==    by 0x4F38C3D: PyEval_EvalCodeEx (ceval.c:3584)\r\n==28387==    by 0x4F381F6: fast_function (ceval.c:4447)\r\n==28387==    by 0x4F381F6: call_function (ceval.c:4372)\r\n==28387==    by 0x4F381F6: PyEval_EvalFrameEx (ceval.c:2989)\r\n==28387==    by 0x4F38C3D: PyEval_EvalCodeEx (ceval.c:3584)\r\n==28387==    by 0x4F38D51: PyEval_EvalCode (ceval.c:669)\r\n==28387==    by 0x4F37807: exec_statement (ceval.c:5050)\r\n==28387==    by 0x4F37807: PyEval_EvalFrameEx (ceval.c:2106)\r\n==28387==    by 0x4F38C3D: PyEval_EvalCodeEx (ceval.c:3584)\r\n==28387==    by 0x4F381F6: fast_function (ceval.c:4447)\r\n==28387==    by 0x4F381F6: call_function (ceval.c:4372)\r\n==28387==    by 0x4F381F6: PyEval_EvalFrameEx (ceval.c:2989)\r\n==28387==  If you believe this happened as a result of a stack\r\n==28387==  overflow in your program's main thread (unlikely but\r\n==28387==  possible), you can try to increase the size of the\r\n==28387==  main thread stack using the --main-stacksize= flag.\r\n==28387==  The main thread stack size used in this run was 8388608.\r\n==28387== \r\n==28387== HEAP SUMMARY:\r\n==28387==     in use at exit: 21,966,492 bytes in 66,340 blocks\r\n==28387==   total heap usage: 281,301 allocs, 214,961 frees, 163,888,150 bytes allocated\r\n==28387== \r\n==28387== LEAK SUMMARY:\r\n==28387==    definitely lost: 0 bytes in 0 blocks\r\n==28387==    indirectly lost: 0 bytes in 0 blocks\r\n==28387==      possibly lost: 409,732 bytes in 477 blocks\r\n==28387==    still reachable: 21,556,760 bytes in 65,863 blocks\r\n==28387==                       of which reachable via heuristic:\r\n==28387==                         stdstring          : 134,540 bytes in 362 blocks\r\n==28387==                         length64           : 599,664 bytes in 192 blocks\r\n==28387==         suppressed: 0 bytes in 0 blocks\r\n==28387== Rerun with --leak-check=full to see details of leaked memory\r\n==28387== \r\n==28387== For counts of detected and suppressed errors, rerun with: -v\r\n==28387== ERROR SUMMARY: 3644 errors from 125 contexts (suppressed: 0 from 0)\r\nSegmentation fault (core dumped)\r\n```\r\n\r\nAny ideas?"}