{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/283552512", "html_url": "https://github.com/pytorch/pytorch/issues/891#issuecomment-283552512", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/891", "id": 283552512, "node_id": "MDEyOklzc3VlQ29tbWVudDI4MzU1MjUxMg==", "user": {"login": "soumith", "id": 1310570, "node_id": "MDQ6VXNlcjEzMTA1NzA=", "avatar_url": "https://avatars0.githubusercontent.com/u/1310570?v=4", "gravatar_id": "", "url": "https://api.github.com/users/soumith", "html_url": "https://github.com/soumith", "followers_url": "https://api.github.com/users/soumith/followers", "following_url": "https://api.github.com/users/soumith/following{/other_user}", "gists_url": "https://api.github.com/users/soumith/gists{/gist_id}", "starred_url": "https://api.github.com/users/soumith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/soumith/subscriptions", "organizations_url": "https://api.github.com/users/soumith/orgs", "repos_url": "https://api.github.com/users/soumith/repos", "events_url": "https://api.github.com/users/soumith/events{/privacy}", "received_events_url": "https://api.github.com/users/soumith/received_events", "type": "User", "site_admin": false}, "created_at": "2017-03-02T04:23:30Z", "updated_at": "2017-03-02T04:23:30Z", "author_association": "MEMBER", "body_html": "<p>We already have a <code>ShortTensor</code> type available in pytorch. We have to enable conversion in the relevant <code>from_numpy</code> function here: <div class=\"border rounded-1 my-2\">\n  <div class=\"f6 px-3 py-2 lh-condensed border-bottom bg-gray-light\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/pytorch/pytorch/blob/fc6fcf23f7917a3e7d0326ca74d24f34ad92a4a3/torch/csrc/Module.cpp#L127-L152\">pytorch/torch/csrc/Module.cpp</a>\n    </p>\n    <p class=\"mb-0 text-gray-light\">\n        Lines 127 to 152\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/pytorch/pytorch/commit/fc6fcf23f7917a3e7d0326ca74d24f34ad92a4a3\">fc6fcf2</a>\n    </p>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L127\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"127\"></td>\n          <td id=\"LC127\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> PyObject * <span class=\"pl-en\">THPModule_fromNumpy</span>(PyObject *_unused, PyObject *array) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L128\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"128\"></td>\n          <td id=\"LC128\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> { </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L129\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"129\"></td>\n          <td id=\"LC129\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> #<span class=\"pl-k\">ifndef</span> WITH_NUMPY </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L130\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"130\"></td>\n          <td id=\"LC130\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   <span class=\"pl-c1\">THPUtils_setError</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>torch was compiled without numpy support<span class=\"pl-pds\">\"</span></span>); </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L131\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"131\"></td>\n          <td id=\"LC131\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   <span class=\"pl-k\">return</span> <span class=\"pl-c1\">NULL</span>; </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L132\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"132\"></td>\n          <td id=\"LC132\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> #<span class=\"pl-k\">else</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L133\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"133\"></td>\n          <td id=\"LC133\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   <span class=\"pl-c1\">THPUtils_assert</span>(<span class=\"pl-c1\">PyArray_Check</span>(array), <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>from_numpy expects an np.ndarray <span class=\"pl-pds\">\"</span></span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L134\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"134\"></td>\n          <td id=\"LC134\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">       <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>but got %s<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-c1\">THPUtils_typename</span>(array)); </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L135\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"135\"></td>\n          <td id=\"LC135\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   <span class=\"pl-k\">int</span> type = <span class=\"pl-c1\">PyArray_TYPE</span>((PyArrayObject*)array); </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L136\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"136\"></td>\n          <td id=\"LC136\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   <span class=\"pl-k\">if</span> (type == NPY_DOUBLE) { </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L137\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"137\"></td>\n          <td id=\"LC137\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     <span class=\"pl-k\">return</span> <span class=\"pl-c1\">PyObject_CallFunctionObjArgs</span>(THPDoubleTensorClass, array, <span class=\"pl-c1\">NULL</span>); </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L138\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"138\"></td>\n          <td id=\"LC138\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   } <span class=\"pl-k\">else</span> <span class=\"pl-k\">if</span> (type == NPY_FLOAT) { </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L139\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"139\"></td>\n          <td id=\"LC139\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     <span class=\"pl-k\">return</span> <span class=\"pl-c1\">PyObject_CallFunctionObjArgs</span>(THPFloatTensorClass, array, <span class=\"pl-c1\">NULL</span>); </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L140\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"140\"></td>\n          <td id=\"LC140\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   } <span class=\"pl-k\">else</span> <span class=\"pl-k\">if</span> (type == NPY_INT64) { </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L141\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"141\"></td>\n          <td id=\"LC141\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     <span class=\"pl-k\">return</span> <span class=\"pl-c1\">PyObject_CallFunctionObjArgs</span>(THPLongTensorClass, array, <span class=\"pl-c1\">NULL</span>); </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L142\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"142\"></td>\n          <td id=\"LC142\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   } <span class=\"pl-k\">else</span> <span class=\"pl-k\">if</span> (type == NPY_INT32) { </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L143\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"143\"></td>\n          <td id=\"LC143\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     <span class=\"pl-k\">return</span> <span class=\"pl-c1\">PyObject_CallFunctionObjArgs</span>(THPIntTensorClass, array, <span class=\"pl-c1\">NULL</span>); </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L144\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"144\"></td>\n          <td id=\"LC144\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   } <span class=\"pl-k\">else</span> <span class=\"pl-k\">if</span> (type == NPY_UINT8) { </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L145\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"145\"></td>\n          <td id=\"LC145\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     <span class=\"pl-k\">return</span> <span class=\"pl-c1\">PyObject_CallFunctionObjArgs</span>(THPByteTensorClass, array, <span class=\"pl-c1\">NULL</span>); </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L146\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"146\"></td>\n          <td id=\"LC146\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   } </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L147\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"147\"></td>\n          <td id=\"LC147\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   <span class=\"pl-c1\">THPUtils_setError</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>can't convert a given np.ndarray to a tensor - it has an <span class=\"pl-pds\">\"</span></span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L148\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"148\"></td>\n          <td id=\"LC148\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">       <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>invalid type. The only supported types are: double, float, int64, <span class=\"pl-pds\">\"</span></span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L149\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"149\"></td>\n          <td id=\"LC149\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">       <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>int32, and uint8.<span class=\"pl-pds\">\"</span></span>); </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L150\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"150\"></td>\n          <td id=\"LC150\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   <span class=\"pl-k\">return</span> <span class=\"pl-c1\">NULL</span>; </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L151\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"151\"></td>\n          <td id=\"LC151\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> #<span class=\"pl-k\">endif</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L152\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"152\"></td>\n          <td id=\"LC152\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> } </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n</p>", "body_text": "We already have a ShortTensor type available in pytorch. We have to enable conversion in the relevant from_numpy function here: \n  \n    \n      pytorch/torch/csrc/Module.cpp\n    \n    \n        Lines 127 to 152\n      in\n      fc6fcf2\n    \n    \n    \n    \n\n        \n          \n           PyObject * THPModule_fromNumpy(PyObject *_unused, PyObject *array) \n        \n\n        \n          \n           { \n        \n\n        \n          \n           #ifndef WITH_NUMPY \n        \n\n        \n          \n             THPUtils_setError(\"torch was compiled without numpy support\"); \n        \n\n        \n          \n             return NULL; \n        \n\n        \n          \n           #else \n        \n\n        \n          \n             THPUtils_assert(PyArray_Check(array), \"from_numpy expects an np.ndarray \" \n        \n\n        \n          \n                 \"but got %s\", THPUtils_typename(array)); \n        \n\n        \n          \n             int type = PyArray_TYPE((PyArrayObject*)array); \n        \n\n        \n          \n             if (type == NPY_DOUBLE) { \n        \n\n        \n          \n               return PyObject_CallFunctionObjArgs(THPDoubleTensorClass, array, NULL); \n        \n\n        \n          \n             } else if (type == NPY_FLOAT) { \n        \n\n        \n          \n               return PyObject_CallFunctionObjArgs(THPFloatTensorClass, array, NULL); \n        \n\n        \n          \n             } else if (type == NPY_INT64) { \n        \n\n        \n          \n               return PyObject_CallFunctionObjArgs(THPLongTensorClass, array, NULL); \n        \n\n        \n          \n             } else if (type == NPY_INT32) { \n        \n\n        \n          \n               return PyObject_CallFunctionObjArgs(THPIntTensorClass, array, NULL); \n        \n\n        \n          \n             } else if (type == NPY_UINT8) { \n        \n\n        \n          \n               return PyObject_CallFunctionObjArgs(THPByteTensorClass, array, NULL); \n        \n\n        \n          \n             } \n        \n\n        \n          \n             THPUtils_setError(\"can't convert a given np.ndarray to a tensor - it has an \" \n        \n\n        \n          \n                 \"invalid type. The only supported types are: double, float, int64, \" \n        \n\n        \n          \n                 \"int32, and uint8.\"); \n        \n\n        \n          \n             return NULL; \n        \n\n        \n          \n           #endif \n        \n\n        \n          \n           }", "body": "We already have a `ShortTensor` type available in pytorch. We have to enable conversion in the relevant `from_numpy` function here: https://github.com/pytorch/pytorch/blob/fc6fcf23f7917a3e7d0326ca74d24f34ad92a4a3/torch/csrc/Module.cpp#L127-L152\r\n"}