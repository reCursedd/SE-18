{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/186883204", "pull_request_review_id": 118552405, "id": 186883204, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4Njg4MzIwNA==", "diff_hunk": "@@ -89,11 +89,18 @@ def TypedDict(name, attrs, total=True):  # type: ignore\n # the superclass.  But it doesn't seem to be harmful.\n TYPE_DERIVED_DEFINITION_NATIVE = CodeTemplate(\"\"\"\\\n ${return_type} ${Type}::${api_name}(${type_method_formals}) const {\n-    ${return_call} at::native::${native_type_method_dispatch}(${actuals});\n+    const auto& self_ty = *this;\n+    (void)self_ty;", "path": "aten/src/ATen/function_wrapper.py", "position": 6, "original_position": 6, "commit_id": "eb6abd0bc078c77e3ea4f1e8909d2ed494d365b3", "original_commit_id": "241f08d67e60910713b5c77eb16f6dac726cece2", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "This is a heinous hack to make `_cudnn_init_dropout_state` work:\r\n\r\n```\r\n- func: _cudnn_init_dropout_state(Type self_ty, double dropout, bool train, int64_t dropout_seed) -> Tensor\r\n  variants: function\r\n  dispatch:\r\n    CUDA: _cudnn_init_dropout_state\r\n```\r\n\r\nIt is the sole native function which dispatches based on a Type argument rather than a Tensor argument.  The codegen seems to know how to do the dispatch on `self_ty` (yay), but then it gets stuck when making the call to `_cudnn_init_dropout_state` because it needs to refer to the `Type` that we dynamically dispatched on, but it's not in scope.  Thus the `self_ty` binding.  I'm all ears for better ways to implement it.\r\n", "created_at": "2018-05-08T22:12:21Z", "updated_at": "2018-11-23T15:43:44Z", "html_url": "https://github.com/pytorch/pytorch/pull/7275#discussion_r186883204", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/7275", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/186883204"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/7275#discussion_r186883204"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/7275"}}, "body_html": "<p>This is a heinous hack to make <code>_cudnn_init_dropout_state</code> work:</p>\n<pre><code>- func: _cudnn_init_dropout_state(Type self_ty, double dropout, bool train, int64_t dropout_seed) -&gt; Tensor\n  variants: function\n  dispatch:\n    CUDA: _cudnn_init_dropout_state\n</code></pre>\n<p>It is the sole native function which dispatches based on a Type argument rather than a Tensor argument.  The codegen seems to know how to do the dispatch on <code>self_ty</code> (yay), but then it gets stuck when making the call to <code>_cudnn_init_dropout_state</code> because it needs to refer to the <code>Type</code> that we dynamically dispatched on, but it's not in scope.  Thus the <code>self_ty</code> binding.  I'm all ears for better ways to implement it.</p>", "body_text": "This is a heinous hack to make _cudnn_init_dropout_state work:\n- func: _cudnn_init_dropout_state(Type self_ty, double dropout, bool train, int64_t dropout_seed) -> Tensor\n  variants: function\n  dispatch:\n    CUDA: _cudnn_init_dropout_state\n\nIt is the sole native function which dispatches based on a Type argument rather than a Tensor argument.  The codegen seems to know how to do the dispatch on self_ty (yay), but then it gets stuck when making the call to _cudnn_init_dropout_state because it needs to refer to the Type that we dynamically dispatched on, but it's not in scope.  Thus the self_ty binding.  I'm all ears for better ways to implement it.", "in_reply_to_id": 186786299}