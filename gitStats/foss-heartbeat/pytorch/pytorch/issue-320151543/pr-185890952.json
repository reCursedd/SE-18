{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/7275", "id": 185890952, "node_id": "MDExOlB1bGxSZXF1ZXN0MTg1ODkwOTUy", "html_url": "https://github.com/pytorch/pytorch/pull/7275", "diff_url": "https://github.com/pytorch/pytorch/pull/7275.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/7275.patch", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/7275", "number": 7275, "state": "closed", "locked": false, "title": "Split libATen.so into libATen_cpu.so and libATen_cuda.so ", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "Stacked on top of https://github.com/pytorch/pytorch/pull/7197\r\n\r\nPreviously, ATen could be built with either CPU-only support, or\r\nCPU/CUDA support, but only via a compile-time flag, requiring\r\ntwo separate builds.  This means that if you have a program which\r\nindirectly uses a CPU-only build of ATen, and a CPU/CUDA-build of\r\nATen, you're gonna have a bad time.  And you might want a CPU-only\r\nbuild of ATen, because it is 15M (versus the 300M of a CUDA build).\r\n\r\nThis commit splits libATen.so into two libraries, CPU/CUDA, so\r\nthat it's not necessary to do a full rebuild to get CPU-only\r\nsupport; instead, if you link against libATen_cpu.so only, you\r\nare CPU-only; if you additionally link/dlopen libATen_cuda.so,\r\nthis enables CUDA support.  This brings ATen's dynamic library\r\nstructure more similar to Caffe2's.\r\n\r\nThe general principle for how this works is that we introduce\r\na *hooks* interface, which introduces a dynamic dispatch indirection\r\nbetween a call site and implementation site of CUDA functionality,\r\nmediated by a static initialization registry.  This means that we can continue\r\nto, for example, lazily initialize CUDA from Context (a core, CPU class) without\r\nhaving a direct dependency on the CUDA bits.  Instead, we look up\r\nin the registry if, e.g., CUDA hooks have been loaded (this loading\r\nprocess happens at static initialization time), and if they\r\nhave been we dynamic dispatch to this class.  We similarly use\r\nthe hooks interface to handle Variable registration.\r\n\r\nWe introduce a new invariant: if the backend of a type has not\r\nbeen initialized (e.g., it's library has not been dlopened; for\r\nCUDA, this also includes CUDA initialization), then the Type\r\npointers in the context registry are NULL.  If you access the\r\nregistry directly you must maintain this invariant.\r\n\r\nWe also preserve libATen.so, which is an empty stub library that\r\ndepends on libATen_cpu.so and libATen_cuda.so, depending on\r\nthe setting of USE_CUDA.\r\n\r\nThere are a few potholes along the way.  I document them here:\r\n\r\n- Previously, PyTorch maintained a separate registry for variable\r\n  types, because no provision for them was made in the Context's\r\n  type_registry.  Now that we have the hooks mechanism, we can easily\r\n  have PyTorch register variables in the main registry.  The code\r\n  has been refactored accordingly.\r\n\r\n- There is a subtle ordering issue between Variable and CUDA.\r\n  We permit libATen_cuda.so and PyTorch to be loaded in either\r\n  order (in practice, CUDA is always loaded \"after\" PyTorch, because\r\n  it is lazily initialized.)  This means that, when CUDA types are\r\n  loaded, we must subsequently also initialize their Variable equivalents.\r\n  Appropriate hooks were added to VariableHooks to make this possible;\r\n  similarly, getVariableHooks() is not referentially transparent, and\r\n  will change behavior after Variables are loaded.  (This is different\r\n  to CUDAHooks, which is \"burned in\" after you try to initialize CUDA.)\r\n\r\n- The cmake is adjusted to separate dependencies into either CPU\r\n  or CUDA dependencies.  The generator scripts are adjusted to either\r\n  generate a file as a CUDA (cuda_file_manager) or CPU file (file_manager).\r\n\r\n- I changed all native functions which were CUDA-only (the cudnn functions)\r\n  to have dispatches for CUDA only (making it permissible to not specify\r\n  all dispatch options.)  This uncovered a bug in how we were handling\r\n  native functions which dispatch on a Type argument; I introduced a new\r\n  self_ty keyword to handle this case.  I'm not 100% happy about it\r\n  but it fixed my problem.\r\n\r\n  This also exposed the fact that set_history incompletely handles\r\n  heterogenous return tuples combining Tensor and TensorList.  I\r\n  swapped this codegen to use flatten() (at the possible cost of\r\n  a slight perf regression, since we're allocating another vector now\r\n  in this code path).\r\n\r\n- thc_state is no longer a public member of Context; use getTHCState() instead\r\n\r\n- This PR comes with Registry from Caffe2, for handling static initialization.\r\n", "created_at": "2018-05-04T04:33:49Z", "updated_at": "2018-11-23T15:43:55Z", "closed_at": "2018-05-10T17:28:34Z", "merged_at": "2018-05-10T17:28:34Z", "merge_commit_sha": "64834f6fb8055cf2d633353992288a8823b915ed", "assignee": null, "assignees": [], "requested_reviewers": [{"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, {"login": "Yangqing", "id": 551151, "node_id": "MDQ6VXNlcjU1MTE1MQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/551151?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Yangqing", "html_url": "https://github.com/Yangqing", "followers_url": "https://api.github.com/users/Yangqing/followers", "following_url": "https://api.github.com/users/Yangqing/following{/other_user}", "gists_url": "https://api.github.com/users/Yangqing/gists{/gist_id}", "starred_url": "https://api.github.com/users/Yangqing/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Yangqing/subscriptions", "organizations_url": "https://api.github.com/users/Yangqing/orgs", "repos_url": "https://api.github.com/users/Yangqing/repos", "events_url": "https://api.github.com/users/Yangqing/events{/privacy}", "received_events_url": "https://api.github.com/users/Yangqing/received_events", "type": "User", "site_admin": false}, {"login": "colesbury", "id": 655866, "node_id": "MDQ6VXNlcjY1NTg2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/655866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colesbury", "html_url": "https://github.com/colesbury", "followers_url": "https://api.github.com/users/colesbury/followers", "following_url": "https://api.github.com/users/colesbury/following{/other_user}", "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions", "organizations_url": "https://api.github.com/users/colesbury/orgs", "repos_url": "https://api.github.com/users/colesbury/repos", "events_url": "https://api.github.com/users/colesbury/events{/privacy}", "received_events_url": "https://api.github.com/users/colesbury/received_events", "type": "User", "site_admin": false}, {"login": "soumith", "id": 1310570, "node_id": "MDQ6VXNlcjEzMTA1NzA=", "avatar_url": "https://avatars0.githubusercontent.com/u/1310570?v=4", "gravatar_id": "", "url": "https://api.github.com/users/soumith", "html_url": "https://github.com/soumith", "followers_url": "https://api.github.com/users/soumith/followers", "following_url": "https://api.github.com/users/soumith/following{/other_user}", "gists_url": "https://api.github.com/users/soumith/gists{/gist_id}", "starred_url": "https://api.github.com/users/soumith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/soumith/subscriptions", "organizations_url": "https://api.github.com/users/soumith/orgs", "repos_url": "https://api.github.com/users/soumith/repos", "events_url": "https://api.github.com/users/soumith/events{/privacy}", "received_events_url": "https://api.github.com/users/soumith/received_events", "type": "User", "site_admin": false}, {"login": "ebetica", "id": 3605224, "node_id": "MDQ6VXNlcjM2MDUyMjQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/3605224?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebetica", "html_url": "https://github.com/ebetica", "followers_url": "https://api.github.com/users/ebetica/followers", "following_url": "https://api.github.com/users/ebetica/following{/other_user}", "gists_url": "https://api.github.com/users/ebetica/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebetica/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebetica/subscriptions", "organizations_url": "https://api.github.com/users/ebetica/orgs", "repos_url": "https://api.github.com/users/ebetica/repos", "events_url": "https://api.github.com/users/ebetica/events{/privacy}", "received_events_url": "https://api.github.com/users/ebetica/received_events", "type": "User", "site_admin": false}, {"login": "gchanan", "id": 3768583, "node_id": "MDQ6VXNlcjM3Njg1ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3768583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gchanan", "html_url": "https://github.com/gchanan", "followers_url": "https://api.github.com/users/gchanan/followers", "following_url": "https://api.github.com/users/gchanan/following{/other_user}", "gists_url": "https://api.github.com/users/gchanan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gchanan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gchanan/subscriptions", "organizations_url": "https://api.github.com/users/gchanan/orgs", "repos_url": "https://api.github.com/users/gchanan/repos", "events_url": "https://api.github.com/users/gchanan/events{/privacy}", "received_events_url": "https://api.github.com/users/gchanan/received_events", "type": "User", "site_admin": false}, {"login": "goldsborough", "id": 6429851, "node_id": "MDQ6VXNlcjY0Mjk4NTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/6429851?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goldsborough", "html_url": "https://github.com/goldsborough", "followers_url": "https://api.github.com/users/goldsborough/followers", "following_url": "https://api.github.com/users/goldsborough/following{/other_user}", "gists_url": "https://api.github.com/users/goldsborough/gists{/gist_id}", "starred_url": "https://api.github.com/users/goldsborough/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goldsborough/subscriptions", "organizations_url": "https://api.github.com/users/goldsborough/orgs", "repos_url": "https://api.github.com/users/goldsborough/repos", "events_url": "https://api.github.com/users/goldsborough/events{/privacy}", "received_events_url": "https://api.github.com/users/goldsborough/received_events", "type": "User", "site_admin": false}], "requested_teams": [], "labels": [], "milestone": null, "commits_url": "https://api.github.com/repos/pytorch/pytorch/pulls/7275/commits", "review_comments_url": "https://api.github.com/repos/pytorch/pytorch/pulls/7275/comments", "review_comment_url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments{/number}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/7275/comments", "statuses_url": "https://api.github.com/repos/pytorch/pytorch/statuses/eb6abd0bc078c77e3ea4f1e8909d2ed494d365b3", "head": {"label": "ezyang:pr/cpu-gpu-split", "ref": "pr/cpu-gpu-split", "sha": "eb6abd0bc078c77e3ea4f1e8909d2ed494d365b3", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "repo": {"id": 101798885, "node_id": "MDEwOlJlcG9zaXRvcnkxMDE3OTg4ODU=", "name": "pytorch", "full_name": "ezyang/pytorch", "private": false, "owner": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "html_url": "https://github.com/ezyang/pytorch", "description": "Tensors and Dynamic neural networks in Python  with strong GPU acceleration", "fork": true, "url": "https://api.github.com/repos/ezyang/pytorch", "forks_url": "https://api.github.com/repos/ezyang/pytorch/forks", "keys_url": "https://api.github.com/repos/ezyang/pytorch/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/ezyang/pytorch/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/ezyang/pytorch/teams", "hooks_url": "https://api.github.com/repos/ezyang/pytorch/hooks", "issue_events_url": "https://api.github.com/repos/ezyang/pytorch/issues/events{/number}", "events_url": "https://api.github.com/repos/ezyang/pytorch/events", "assignees_url": "https://api.github.com/repos/ezyang/pytorch/assignees{/user}", "branches_url": "https://api.github.com/repos/ezyang/pytorch/branches{/branch}", "tags_url": "https://api.github.com/repos/ezyang/pytorch/tags", "blobs_url": "https://api.github.com/repos/ezyang/pytorch/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/ezyang/pytorch/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/ezyang/pytorch/git/refs{/sha}", "trees_url": "https://api.github.com/repos/ezyang/pytorch/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/ezyang/pytorch/statuses/{sha}", "languages_url": "https://api.github.com/repos/ezyang/pytorch/languages", "stargazers_url": "https://api.github.com/repos/ezyang/pytorch/stargazers", "contributors_url": "https://api.github.com/repos/ezyang/pytorch/contributors", "subscribers_url": "https://api.github.com/repos/ezyang/pytorch/subscribers", "subscription_url": "https://api.github.com/repos/ezyang/pytorch/subscription", "commits_url": "https://api.github.com/repos/ezyang/pytorch/commits{/sha}", "git_commits_url": "https://api.github.com/repos/ezyang/pytorch/git/commits{/sha}", "comments_url": "https://api.github.com/repos/ezyang/pytorch/comments{/number}", "issue_comment_url": "https://api.github.com/repos/ezyang/pytorch/issues/comments{/number}", "contents_url": "https://api.github.com/repos/ezyang/pytorch/contents/{+path}", "compare_url": "https://api.github.com/repos/ezyang/pytorch/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/ezyang/pytorch/merges", "archive_url": "https://api.github.com/repos/ezyang/pytorch/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/ezyang/pytorch/downloads", "issues_url": "https://api.github.com/repos/ezyang/pytorch/issues{/number}", "pulls_url": "https://api.github.com/repos/ezyang/pytorch/pulls{/number}", "milestones_url": "https://api.github.com/repos/ezyang/pytorch/milestones{/number}", "notifications_url": "https://api.github.com/repos/ezyang/pytorch/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/ezyang/pytorch/labels{/name}", "releases_url": "https://api.github.com/repos/ezyang/pytorch/releases{/id}", "deployments_url": "https://api.github.com/repos/ezyang/pytorch/deployments", "created_at": "2017-08-29T19:28:39Z", "updated_at": "2018-10-29T15:06:40Z", "pushed_at": "2018-11-21T22:30:09Z", "git_url": "git://github.com/ezyang/pytorch.git", "ssh_url": "git@github.com:ezyang/pytorch.git", "clone_url": "https://github.com/ezyang/pytorch.git", "svn_url": "https://github.com/ezyang/pytorch", "homepage": "http://pytorch.org", "size": 88254, "stargazers_count": 1, "watchers_count": 1, "language": "C++", "has_issues": false, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 0, "mirror_url": null, "archived": false, "open_issues_count": 2, "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "forks": 0, "open_issues": 2, "watchers": 1, "default_branch": "master"}}, "base": {"label": "pytorch:master", "ref": "master", "sha": "5c2015d133d1a6c54b4daba35e54fd0c84806463", "user": {"login": "pytorch", "id": 21003710, "node_id": "MDEyOk9yZ2FuaXphdGlvbjIxMDAzNzEw", "avatar_url": "https://avatars3.githubusercontent.com/u/21003710?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pytorch", "html_url": "https://github.com/pytorch", "followers_url": "https://api.github.com/users/pytorch/followers", "following_url": "https://api.github.com/users/pytorch/following{/other_user}", "gists_url": "https://api.github.com/users/pytorch/gists{/gist_id}", "starred_url": "https://api.github.com/users/pytorch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pytorch/subscriptions", "organizations_url": "https://api.github.com/users/pytorch/orgs", "repos_url": "https://api.github.com/users/pytorch/repos", "events_url": "https://api.github.com/users/pytorch/events{/privacy}", "received_events_url": "https://api.github.com/users/pytorch/received_events", "type": "Organization", "site_admin": false}, "repo": {"id": 65600975, "node_id": "MDEwOlJlcG9zaXRvcnk2NTYwMDk3NQ==", "name": "pytorch", "full_name": "pytorch/pytorch", "private": false, "owner": {"login": "pytorch", "id": 21003710, "node_id": "MDEyOk9yZ2FuaXphdGlvbjIxMDAzNzEw", "avatar_url": "https://avatars3.githubusercontent.com/u/21003710?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pytorch", "html_url": "https://github.com/pytorch", "followers_url": "https://api.github.com/users/pytorch/followers", "following_url": "https://api.github.com/users/pytorch/following{/other_user}", "gists_url": "https://api.github.com/users/pytorch/gists{/gist_id}", "starred_url": "https://api.github.com/users/pytorch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pytorch/subscriptions", "organizations_url": "https://api.github.com/users/pytorch/orgs", "repos_url": "https://api.github.com/users/pytorch/repos", "events_url": "https://api.github.com/users/pytorch/events{/privacy}", "received_events_url": "https://api.github.com/users/pytorch/received_events", "type": "Organization", "site_admin": false}, "html_url": "https://github.com/pytorch/pytorch", "description": "Tensors and Dynamic neural networks in Python  with strong GPU acceleration", "fork": false, "url": "https://api.github.com/repos/pytorch/pytorch", "forks_url": "https://api.github.com/repos/pytorch/pytorch/forks", "keys_url": "https://api.github.com/repos/pytorch/pytorch/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/pytorch/pytorch/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/pytorch/pytorch/teams", "hooks_url": "https://api.github.com/repos/pytorch/pytorch/hooks", "issue_events_url": "https://api.github.com/repos/pytorch/pytorch/issues/events{/number}", "events_url": "https://api.github.com/repos/pytorch/pytorch/events", "assignees_url": "https://api.github.com/repos/pytorch/pytorch/assignees{/user}", "branches_url": "https://api.github.com/repos/pytorch/pytorch/branches{/branch}", "tags_url": "https://api.github.com/repos/pytorch/pytorch/tags", "blobs_url": "https://api.github.com/repos/pytorch/pytorch/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/pytorch/pytorch/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/pytorch/pytorch/git/refs{/sha}", "trees_url": "https://api.github.com/repos/pytorch/pytorch/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/pytorch/pytorch/statuses/{sha}", "languages_url": "https://api.github.com/repos/pytorch/pytorch/languages", "stargazers_url": "https://api.github.com/repos/pytorch/pytorch/stargazers", "contributors_url": "https://api.github.com/repos/pytorch/pytorch/contributors", "subscribers_url": "https://api.github.com/repos/pytorch/pytorch/subscribers", "subscription_url": "https://api.github.com/repos/pytorch/pytorch/subscription", "commits_url": "https://api.github.com/repos/pytorch/pytorch/commits{/sha}", "git_commits_url": "https://api.github.com/repos/pytorch/pytorch/git/commits{/sha}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/comments{/number}", "issue_comment_url": "https://api.github.com/repos/pytorch/pytorch/issues/comments{/number}", "contents_url": "https://api.github.com/repos/pytorch/pytorch/contents/{+path}", "compare_url": "https://api.github.com/repos/pytorch/pytorch/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/pytorch/pytorch/merges", "archive_url": "https://api.github.com/repos/pytorch/pytorch/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/pytorch/pytorch/downloads", "issues_url": "https://api.github.com/repos/pytorch/pytorch/issues{/number}", "pulls_url": "https://api.github.com/repos/pytorch/pytorch/pulls{/number}", "milestones_url": "https://api.github.com/repos/pytorch/pytorch/milestones{/number}", "notifications_url": "https://api.github.com/repos/pytorch/pytorch/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/pytorch/pytorch/labels{/name}", "releases_url": "https://api.github.com/repos/pytorch/pytorch/releases{/id}", "deployments_url": "https://api.github.com/repos/pytorch/pytorch/deployments", "created_at": "2016-08-13T05:26:41Z", "updated_at": "2018-11-24T05:35:41Z", "pushed_at": "2018-11-24T05:34:07Z", "git_url": "git://github.com/pytorch/pytorch.git", "ssh_url": "git@github.com:pytorch/pytorch.git", "clone_url": "https://github.com/pytorch/pytorch.git", "svn_url": "https://github.com/pytorch/pytorch", "homepage": "http://pytorch.org", "size": 89651, "stargazers_count": 21577, "watchers_count": 21577, "language": "C++", "has_issues": true, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 5149, "mirror_url": null, "archived": false, "open_issues_count": 2193, "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "forks": 5149, "open_issues": 2193, "watchers": 21577, "default_branch": "master"}}, "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/7275"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/7275"}, "issue": {"href": "https://api.github.com/repos/pytorch/pytorch/issues/7275"}, "comments": {"href": "https://api.github.com/repos/pytorch/pytorch/issues/7275/comments"}, "review_comments": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/7275/comments"}, "review_comment": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments{/number}"}, "commits": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/7275/commits"}, "statuses": {"href": "https://api.github.com/repos/pytorch/pytorch/statuses/eb6abd0bc078c77e3ea4f1e8909d2ed494d365b3"}}, "author_association": "CONTRIBUTOR", "body_html": "<p>Stacked on top of <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"319675901\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/7197\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/pytorch/pytorch/pull/7197/hovercard\" href=\"https://github.com/pytorch/pytorch/pull/7197\">#7197</a></p>\n<p>Previously, ATen could be built with either CPU-only support, or<br>\nCPU/CUDA support, but only via a compile-time flag, requiring<br>\ntwo separate builds.  This means that if you have a program which<br>\nindirectly uses a CPU-only build of ATen, and a CPU/CUDA-build of<br>\nATen, you're gonna have a bad time.  And you might want a CPU-only<br>\nbuild of ATen, because it is 15M (versus the 300M of a CUDA build).</p>\n<p>This commit splits libATen.so into two libraries, CPU/CUDA, so<br>\nthat it's not necessary to do a full rebuild to get CPU-only<br>\nsupport; instead, if you link against libATen_cpu.so only, you<br>\nare CPU-only; if you additionally link/dlopen libATen_cuda.so,<br>\nthis enables CUDA support.  This brings ATen's dynamic library<br>\nstructure more similar to Caffe2's.</p>\n<p>The general principle for how this works is that we introduce<br>\na <em>hooks</em> interface, which introduces a dynamic dispatch indirection<br>\nbetween a call site and implementation site of CUDA functionality,<br>\nmediated by a static initialization registry.  This means that we can continue<br>\nto, for example, lazily initialize CUDA from Context (a core, CPU class) without<br>\nhaving a direct dependency on the CUDA bits.  Instead, we look up<br>\nin the registry if, e.g., CUDA hooks have been loaded (this loading<br>\nprocess happens at static initialization time), and if they<br>\nhave been we dynamic dispatch to this class.  We similarly use<br>\nthe hooks interface to handle Variable registration.</p>\n<p>We introduce a new invariant: if the backend of a type has not<br>\nbeen initialized (e.g., it's library has not been dlopened; for<br>\nCUDA, this also includes CUDA initialization), then the Type<br>\npointers in the context registry are NULL.  If you access the<br>\nregistry directly you must maintain this invariant.</p>\n<p>We also preserve libATen.so, which is an empty stub library that<br>\ndepends on libATen_cpu.so and libATen_cuda.so, depending on<br>\nthe setting of USE_CUDA.</p>\n<p>There are a few potholes along the way.  I document them here:</p>\n<ul>\n<li>\n<p>Previously, PyTorch maintained a separate registry for variable<br>\ntypes, because no provision for them was made in the Context's<br>\ntype_registry.  Now that we have the hooks mechanism, we can easily<br>\nhave PyTorch register variables in the main registry.  The code<br>\nhas been refactored accordingly.</p>\n</li>\n<li>\n<p>There is a subtle ordering issue between Variable and CUDA.<br>\nWe permit libATen_cuda.so and PyTorch to be loaded in either<br>\norder (in practice, CUDA is always loaded \"after\" PyTorch, because<br>\nit is lazily initialized.)  This means that, when CUDA types are<br>\nloaded, we must subsequently also initialize their Variable equivalents.<br>\nAppropriate hooks were added to VariableHooks to make this possible;<br>\nsimilarly, getVariableHooks() is not referentially transparent, and<br>\nwill change behavior after Variables are loaded.  (This is different<br>\nto CUDAHooks, which is \"burned in\" after you try to initialize CUDA.)</p>\n</li>\n<li>\n<p>The cmake is adjusted to separate dependencies into either CPU<br>\nor CUDA dependencies.  The generator scripts are adjusted to either<br>\ngenerate a file as a CUDA (cuda_file_manager) or CPU file (file_manager).</p>\n</li>\n<li>\n<p>I changed all native functions which were CUDA-only (the cudnn functions)<br>\nto have dispatches for CUDA only (making it permissible to not specify<br>\nall dispatch options.)  This uncovered a bug in how we were handling<br>\nnative functions which dispatch on a Type argument; I introduced a new<br>\nself_ty keyword to handle this case.  I'm not 100% happy about it<br>\nbut it fixed my problem.</p>\n<p>This also exposed the fact that set_history incompletely handles<br>\nheterogenous return tuples combining Tensor and TensorList.  I<br>\nswapped this codegen to use flatten() (at the possible cost of<br>\na slight perf regression, since we're allocating another vector now<br>\nin this code path).</p>\n</li>\n<li>\n<p>thc_state is no longer a public member of Context; use getTHCState() instead</p>\n</li>\n<li>\n<p>This PR comes with Registry from Caffe2, for handling static initialization.</p>\n</li>\n</ul>", "body_text": "Stacked on top of #7197\nPreviously, ATen could be built with either CPU-only support, or\nCPU/CUDA support, but only via a compile-time flag, requiring\ntwo separate builds.  This means that if you have a program which\nindirectly uses a CPU-only build of ATen, and a CPU/CUDA-build of\nATen, you're gonna have a bad time.  And you might want a CPU-only\nbuild of ATen, because it is 15M (versus the 300M of a CUDA build).\nThis commit splits libATen.so into two libraries, CPU/CUDA, so\nthat it's not necessary to do a full rebuild to get CPU-only\nsupport; instead, if you link against libATen_cpu.so only, you\nare CPU-only; if you additionally link/dlopen libATen_cuda.so,\nthis enables CUDA support.  This brings ATen's dynamic library\nstructure more similar to Caffe2's.\nThe general principle for how this works is that we introduce\na hooks interface, which introduces a dynamic dispatch indirection\nbetween a call site and implementation site of CUDA functionality,\nmediated by a static initialization registry.  This means that we can continue\nto, for example, lazily initialize CUDA from Context (a core, CPU class) without\nhaving a direct dependency on the CUDA bits.  Instead, we look up\nin the registry if, e.g., CUDA hooks have been loaded (this loading\nprocess happens at static initialization time), and if they\nhave been we dynamic dispatch to this class.  We similarly use\nthe hooks interface to handle Variable registration.\nWe introduce a new invariant: if the backend of a type has not\nbeen initialized (e.g., it's library has not been dlopened; for\nCUDA, this also includes CUDA initialization), then the Type\npointers in the context registry are NULL.  If you access the\nregistry directly you must maintain this invariant.\nWe also preserve libATen.so, which is an empty stub library that\ndepends on libATen_cpu.so and libATen_cuda.so, depending on\nthe setting of USE_CUDA.\nThere are a few potholes along the way.  I document them here:\n\n\nPreviously, PyTorch maintained a separate registry for variable\ntypes, because no provision for them was made in the Context's\ntype_registry.  Now that we have the hooks mechanism, we can easily\nhave PyTorch register variables in the main registry.  The code\nhas been refactored accordingly.\n\n\nThere is a subtle ordering issue between Variable and CUDA.\nWe permit libATen_cuda.so and PyTorch to be loaded in either\norder (in practice, CUDA is always loaded \"after\" PyTorch, because\nit is lazily initialized.)  This means that, when CUDA types are\nloaded, we must subsequently also initialize their Variable equivalents.\nAppropriate hooks were added to VariableHooks to make this possible;\nsimilarly, getVariableHooks() is not referentially transparent, and\nwill change behavior after Variables are loaded.  (This is different\nto CUDAHooks, which is \"burned in\" after you try to initialize CUDA.)\n\n\nThe cmake is adjusted to separate dependencies into either CPU\nor CUDA dependencies.  The generator scripts are adjusted to either\ngenerate a file as a CUDA (cuda_file_manager) or CPU file (file_manager).\n\n\nI changed all native functions which were CUDA-only (the cudnn functions)\nto have dispatches for CUDA only (making it permissible to not specify\nall dispatch options.)  This uncovered a bug in how we were handling\nnative functions which dispatch on a Type argument; I introduced a new\nself_ty keyword to handle this case.  I'm not 100% happy about it\nbut it fixed my problem.\nThis also exposed the fact that set_history incompletely handles\nheterogenous return tuples combining Tensor and TensorList.  I\nswapped this codegen to use flatten() (at the possible cost of\na slight perf regression, since we're allocating another vector now\nin this code path).\n\n\nthc_state is no longer a public member of Context; use getTHCState() instead\n\n\nThis PR comes with Registry from Caffe2, for handling static initialization.", "merged": true, "mergeable": null, "rebaseable": null, "mergeable_state": "unknown", "merged_by": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "comments": 8, "review_comments": 39, "maintainer_can_modify": false, "commits": 3, "additions": 1634, "deletions": 805, "changed_files": 88}