{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/186883934", "pull_request_review_id": 118553306, "id": 186883934, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4Njg4MzkzNA==", "diff_hunk": "@@ -465,10 +465,8 @@ def get_return_value():\n     def emit_history():\n         fn = 'rebase' if modifies_arguments and not is_view else 'set'\n         output_names = [r['name'] for r in differentiable_outputs]\n-        if len(output_names) == 1:\n-            outs = output_names[0]\n-        else:\n-            outs = CodeTemplate(\"{ ${outs} }\").substitute(outs=output_names)\n+        # TODO: flatten allocates a std::vector, which could be expensive\n+        outs = CodeTemplate(\"flatten( ${outs} )\").substitute(outs=output_names)", "path": "tools/autograd/gen_variable_type.py", "position": 9, "original_position": 9, "commit_id": "eb6abd0bc078c77e3ea4f1e8909d2ed494d365b3", "original_commit_id": "241f08d67e60910713b5c77eb16f6dac726cece2", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "Previously, `_cudnn_rnn_backward`, which returns a heterogenous tuple of `(Tensor, Tensor, TensorList)`, did not have a `dispatch` and did not have an entry in `derivatives.yaml`, so IF you attempt to double-backwards through cuDNN RNN it would have attempted to take the derivative of all the internal calls in `_cudnn_rnn_backward` (including, e.g., `data_ptr`) which obviously isn't going to work.  Since I changed `_cudnn_rnn_backward` to be dispatched and only available on CUDA, this flipped the codepath to now treat the insides of `_cudnn_rnn_backward` as nondifferentiable and set history. And *that* triggered the fact that history setting on the return types didn't work with heterogenous tuples.  Thus the change here.", "created_at": "2018-05-08T22:16:22Z", "updated_at": "2018-11-23T15:43:44Z", "html_url": "https://github.com/pytorch/pytorch/pull/7275#discussion_r186883934", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/7275", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/186883934"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/7275#discussion_r186883934"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/7275"}}, "body_html": "<p>Previously, <code>_cudnn_rnn_backward</code>, which returns a heterogenous tuple of <code>(Tensor, Tensor, TensorList)</code>, did not have a <code>dispatch</code> and did not have an entry in <code>derivatives.yaml</code>, so IF you attempt to double-backwards through cuDNN RNN it would have attempted to take the derivative of all the internal calls in <code>_cudnn_rnn_backward</code> (including, e.g., <code>data_ptr</code>) which obviously isn't going to work.  Since I changed <code>_cudnn_rnn_backward</code> to be dispatched and only available on CUDA, this flipped the codepath to now treat the insides of <code>_cudnn_rnn_backward</code> as nondifferentiable and set history. And <em>that</em> triggered the fact that history setting on the return types didn't work with heterogenous tuples.  Thus the change here.</p>", "body_text": "Previously, _cudnn_rnn_backward, which returns a heterogenous tuple of (Tensor, Tensor, TensorList), did not have a dispatch and did not have an entry in derivatives.yaml, so IF you attempt to double-backwards through cuDNN RNN it would have attempted to take the derivative of all the internal calls in _cudnn_rnn_backward (including, e.g., data_ptr) which obviously isn't going to work.  Since I changed _cudnn_rnn_backward to be dispatched and only available on CUDA, this flipped the codepath to now treat the insides of _cudnn_rnn_backward as nondifferentiable and set history. And that triggered the fact that history setting on the return types didn't work with heterogenous tuples.  Thus the change here.", "in_reply_to_id": 186788508}