{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/187399313", "pull_request_review_id": 119173141, "id": 187399313, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NzM5OTMxMw==", "diff_hunk": "@@ -124,7 +122,16 @@ def check_all_files_written(self):\n \n NATIVE_FUNCTIONS_H = CodeTemplate.from_file(TEMPLATE_PATH + \"/NativeFunctions.h\")\n \n+TYPE_REGISTER = CodeTemplate(\"\"\"\\\n+context->type_registry[static_cast<int>(IsVariable::NotVariable)]\n+                      [static_cast<int>(Backend::${backend})]\n+                      [static_cast<int>(ScalarType::${scalar_type})]\n+                      .reset(new ${type_name}(context));\n+detail::getVariableHooks().registerVariableTypeFor(context, Backend::${backend}, ScalarType::${scalar_type});", "path": "aten/src/ATen/gen.py", "position": 31, "original_position": 31, "commit_id": "eb6abd0bc078c77e3ea4f1e8909d2ed494d365b3", "original_commit_id": "eb6abd0bc078c77e3ea4f1e8909d2ed494d365b3", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "Nope, either order works. If ATen is loaded first, then libtorch reads out the types which are registered in ATen and initializes based on it. If libtorch is loaded first, ATen has a hook call in its initializers that gives libtorch an opportunity to add variable types.", "created_at": "2018-05-10T17:25:52Z", "updated_at": "2018-11-23T15:43:54Z", "html_url": "https://github.com/pytorch/pytorch/pull/7275#discussion_r187399313", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/7275", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/187399313"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/7275#discussion_r187399313"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/7275"}}, "body_html": "<p>Nope, either order works. If ATen is loaded first, then libtorch reads out the types which are registered in ATen and initializes based on it. If libtorch is loaded first, ATen has a hook call in its initializers that gives libtorch an opportunity to add variable types.</p>", "body_text": "Nope, either order works. If ATen is loaded first, then libtorch reads out the types which are registered in ATen and initializes based on it. If libtorch is loaded first, ATen has a hook call in its initializers that gives libtorch an opportunity to add variable types.", "in_reply_to_id": 187396160}