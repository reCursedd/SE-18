{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/226732887", "pull_request_review_id": 166633505, "id": 226732887, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNjczMjg4Nw==", "diff_hunk": "@@ -75,7 +75,9 @@ SparseTensor new_sparse(const TensorOptions& options) {\n /*** Helper methods ***/\n \n /* Pointer-copy init */\n-SparseTensor new_with_tensor_sparse(const LongTensor& indices, const Tensor& values_) {\n+SparseTensor new_with_tensor_sparse(const LongTensor& indices_, const Tensor& values__) {", "path": "aten/src/ATen/native/sparse/SparseTensor.cpp", "position": null, "original_position": 5, "commit_id": "d71b737a70a235086231de461f832ea8f3ee9aa1", "original_commit_id": "fb8052cb6d51caf7aea1a984be6329f9c1d23951", "user": {"login": "weiyangfb", "id": 38509346, "node_id": "MDQ6VXNlcjM4NTA5MzQ2", "avatar_url": "https://avatars1.githubusercontent.com/u/38509346?v=4", "gravatar_id": "", "url": "https://api.github.com/users/weiyangfb", "html_url": "https://github.com/weiyangfb", "followers_url": "https://api.github.com/users/weiyangfb/followers", "following_url": "https://api.github.com/users/weiyangfb/following{/other_user}", "gists_url": "https://api.github.com/users/weiyangfb/gists{/gist_id}", "starred_url": "https://api.github.com/users/weiyangfb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/weiyangfb/subscriptions", "organizations_url": "https://api.github.com/users/weiyangfb/orgs", "repos_url": "https://api.github.com/users/weiyangfb/repos", "events_url": "https://api.github.com/users/weiyangfb/events{/privacy}", "received_events_url": "https://api.github.com/users/weiyangfb/received_events", "type": "User", "site_admin": false}, "body": "I finally see what you mean, since people can always make indices non-contiguous after ctor, hence every time a method takes in a SparseTensor and requires contiguity should always check that explicitly or have a kernel handle it. It is pointless to assure that inside the constructor. Overall user should always think of SparseTensor as a collection of indices and values, within which contiguous and coalesce are not guaranteed.", "created_at": "2018-10-19T17:58:28Z", "updated_at": "2018-11-23T15:53:18Z", "html_url": "https://github.com/pytorch/pytorch/pull/12800#discussion_r226732887", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/12800", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/226732887"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/12800#discussion_r226732887"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/12800"}}, "body_html": "<p>I finally see what you mean, since people can always make indices non-contiguous after ctor, hence every time a method takes in a SparseTensor and requires contiguity should always check that explicitly or have a kernel handle it. It is pointless to assure that inside the constructor. Overall user should always think of SparseTensor as a collection of indices and values, within which contiguous and coalesce are not guaranteed.</p>", "body_text": "I finally see what you mean, since people can always make indices non-contiguous after ctor, hence every time a method takes in a SparseTensor and requires contiguity should always check that explicitly or have a kernel handle it. It is pointless to assure that inside the constructor. Overall user should always think of SparseTensor as a collection of indices and values, within which contiguous and coalesce are not guaranteed.", "in_reply_to_id": 226172127}