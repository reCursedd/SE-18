{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/228361427", "pull_request_review_id": 168618927, "id": 228361427, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyODM2MTQyNw==", "diff_hunk": "@@ -0,0 +1,187 @@\n+#include \"torch/csrc/jit/fuser/cuda/fused_kernel.h\"\n+\n+#include \"ATen/cuda/CUDAContext.h\"\n+#include \"THC/THC.h\"\n+#include \"torch/csrc/cuda/cuda_check.h\"\n+#include \"torch/csrc/jit/resource_guard.h\"\n+\n+// Note: unclear why this forward declaration is necessary\n+#include \"THC/THCTensorRandom.h\"\n+#include \"THC/THCGenerator.hpp\"\n+THCGenerator* THCRandom_getGenerator(THCState* state);\n+\n+#include \"nvrtc.h\"\n+#include \"cuda.h\"\n+#include \"cuda_runtime.h\"\n+\n+#include <stdexcept>\n+#include <sstream>\n+#include <tuple>\n+#include <vector>\n+#include <algorithm>\n+#include <cmath>\n+\n+namespace torch { namespace jit { namespace fuser { namespace cuda {\n+\n+void checkCUDAVersion(\n+  const cudaDeviceProp& prop) {\n+  if ((prop.major >= 6 && CUDA_VERSION < 8000) ||\n+      (prop.major >= 7 && CUDA_VERSION < 9000)) {\n+    std::stringstream err_string;\n+    err_string << \"In CUDAFusedKernel, PyTorch compiled with insufficient CUDA version: \"\n+         << CUDA_VERSION << \" for the current GPU device \" << prop.name\n+         << \" with device capability \" << prop.major << \".\" << prop.minor;\n+    throw std::runtime_error(err_string.str());\n+  }\n+}\n+\n+static void getMajorMinor(const cudaDeviceProp& prop, int& major, int& minor) {\n+  int nvrtc_major, nvrtc_minor;\n+  TORCH_NVRTC_CHECK(nvrtcVersion(&nvrtc_major, &nvrtc_minor));\n+\n+  // Short-circuits if NVRTC version too low\n+  JIT_ASSERT(nvrtc_major >= 6);\n+\n+  // Major and minor is determined by device properties and \n+  // possibly \"downcompiled\" to a lower (compatible) compute architecture\n+  // based on the NVRTC version\n+  major = prop.major;\n+  minor = prop.minor;\n+  if (nvrtc_major <= 7 && prop.major > 5) { // 7 supports 2-5.x\n+    major = 5;\n+    if (prop.major == 5) minor = prop.minor;\n+    else minor = 0;\n+  } else if (nvrtc_major <= 8 && prop.major > 6) { // 8 supports 2-6.x\n+    major = 6;\n+    if (prop.major == 6) minor = prop.minor;\n+    else minor = 0;\n+  } else if (nvrtc_major <= 9 && prop.major >= 7) { // 9 supports 3-7.2\n+    major = 7;\n+    if (prop.major == 7 && prop.minor <= 2) minor = prop.minor;\n+    else minor = 0;\n+  } else if (nvrtc_major <= 10 && prop.major >= 7) { // 10 supports 3-7.5\n+    major = 7;\n+    if (prop.major == 7 && prop.minor <= 5) minor = prop.minor;\n+    else minor = 0;\n+  }\n+}\n+\n+// Compiles the specified kernel and stores the metadata required to run it\n+FusedKernelCUDA::FusedKernelCUDA(\n+  const int _device\n+, const std::string& _name\n+, const std::string& _code\n+, const std::vector<TensorDesc> _input_desc\n+, const std::vector<TensorDesc> _output_desc\n+, const std::vector<PartitionDesc> _chunk_desc\n+, const std::vector<PartitionDesc> _concat_desc\n+, const bool _has_random)\n+: FusedKernel{_name, _code, _input_desc, _output_desc, _chunk_desc, _concat_desc, _has_random} \n+, device_{_device} {\n+  // Initializes driver's API context (if necessary)\n+  CUcontext pctx = 0;\n+  TORCH_CU_CHECK(cuCtxGetCurrent(&pctx));\n+  if (!pctx) {\n+     std::unique_lock<std::mutex> cudaFreeMutexLock(\n+     *(THCCachingAllocator_getCudaFreeMutex()));\n+     cudaFree(0);\n+  }\n+\n+  // Note: hacked at::DeviceGuard since at::DeviceGuard was failing to work\n+  // properly in some scenarios\n+  int prior_device;\n+  cudaGetDevice(&prior_device);\n+  cudaSetDevice(device_);\n+  \n+  // Acquires device and NVRTC properties (for compile arch and occupancy calculations)\n+  TORCH_CUDA_CHECK(cudaGetDeviceProperties(&prop_, device_)); \n+  int major, minor;\n+  getMajorMinor(prop_, major, minor);\n+\n+  // Creates the NVRTC program\n+  nvrtcProgram program;\n+  TORCH_NVRTC_CHECK(nvrtcCreateProgram(\n+    &program\n+  , code_.c_str()\n+  , nullptr\n+  , 0\n+  , nullptr\n+  , nullptr));\n+  \n+  const std::string compute = \"--gpu-architecture=compute_\" + std::to_string(major) + std::to_string(minor);\n+  const std::vector<const char *> args = {\"--std=c++11\", compute.c_str(), \"-default-device\"};\n+  const auto result = nvrtcCompileProgram(program, args.size(), args.data());\n+  if (result == NVRTC_ERROR_COMPILATION) {\n+    size_t logsize;\n+    nvrtcGetProgramLogSize(program, &logsize);\n+    std::vector<char> log(logsize);\n+    nvrtcGetProgramLog(program, log.data());\n+    std::stringstream cu;\n+    cu << log.data();\n+    throw std::runtime_error(cu.str());\n+  }\n+  ResourceGuard holdProgram([&] {\n+    TORCH_NVRTC_CHECK(nvrtcDestroyProgram(&program));\n+  });\n+  TORCH_NVRTC_CHECK(result);\n+  size_t ptx_size;\n+  TORCH_NVRTC_CHECK(nvrtcGetPTXSize(program, &ptx_size));\n+  ptx_.resize(ptx_size);\n+  TORCH_NVRTC_CHECK(nvrtcGetPTX(program, ptx_.data()));\n+\n+  TORCH_CU_CHECK(cuModuleLoadData(&module_, ptx_.data()));\n+  TORCH_CU_CHECK(cuModuleGetFunction(&function_, module_, name_.c_str()));\n+\n+  // Computes max blocks\n+  TORCH_CU_CHECK(cuOccupancyMaxActiveBlocksPerMultiprocessor(\n+    &maxBlocks_, function_, 128, 0));\n+  maxBlocks_ *= prop_.multiProcessorCount;\n+\n+  // Resets device (end of hacked at::DeviceGuard)\n+  cudaSetDevice(prior_device);\n+}\n+\n+static int ceilDiv(const int a, const int b) {\n+  return (a + b - 1) / b;\n+}\n+\n+void FusedKernelCUDA::launch_raw(\n+  const uint32_t numel\n+, std::vector<void*>& arguments) const {\n+  at::DeviceGuard{device_};\n+  // Hacked at::DeviceGuard (see note above)\n+  int prior_device;\n+  cudaGetDevice(&prior_device);\n+  cudaSetDevice(device_);\n+\n+  const auto nBlocks = std::min(maxBlocks_, ceilDiv(numel, kBlockSize));\n+\n+  // Adds random state to arguments if necessary\n+  // Note: offset defined here so its lifetime extends to the launch\n+  uint64_t offset;\n+  if (has_random_) {\n+    const auto rand_offset = 4 * (std::ceil(numel / (4.0 * kBlockSize * nBlocks)) + 1);", "path": "torch/csrc/jit/fuser/cuda/fused_kernel.cpp", "position": 159, "original_position": 163, "commit_id": "445f1d937372bebb3a4f7717b5d4de33c77401e6", "original_commit_id": "6306899e8e7f860283c325d1cde260fb59b369de", "user": {"login": "mruberry", "id": 38511765, "node_id": "MDQ6VXNlcjM4NTExNzY1", "avatar_url": "https://avatars3.githubusercontent.com/u/38511765?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mruberry", "html_url": "https://github.com/mruberry", "followers_url": "https://api.github.com/users/mruberry/followers", "following_url": "https://api.github.com/users/mruberry/following{/other_user}", "gists_url": "https://api.github.com/users/mruberry/gists{/gist_id}", "starred_url": "https://api.github.com/users/mruberry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mruberry/subscriptions", "organizations_url": "https://api.github.com/users/mruberry/orgs", "repos_url": "https://api.github.com/users/mruberry/repos", "events_url": "https://api.github.com/users/mruberry/events{/privacy}", "received_events_url": "https://api.github.com/users/mruberry/received_events", "type": "User", "site_admin": false}, "body": "You are correct this is historic and I hadn't considered its correctness. May not be necessary. ", "created_at": "2018-10-25T22:55:44Z", "updated_at": "2018-11-23T15:53:38Z", "html_url": "https://github.com/pytorch/pytorch/pull/13108#discussion_r228361427", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/13108", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/228361427"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/13108#discussion_r228361427"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/13108"}}, "body_html": "<p>You are correct this is historic and I hadn't considered its correctness. May not be necessary.</p>", "body_text": "You are correct this is historic and I hadn't considered its correctness. May not be necessary.", "in_reply_to_id": 228359514}