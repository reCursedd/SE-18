{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/228358884", "pull_request_review_id": 168615854, "id": 228358884, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyODM1ODg4NA==", "diff_hunk": "@@ -0,0 +1,60 @@\n+#pragma once\n+#include \"torch/csrc/jit/fuser/config.h\"\n+#if USE_CUDA_FUSER || USE_CPU_FUSER\n+\n+#include \"ATen/ATen.h\"\n+#include \"torch/csrc/WindowsTorchApiMacro.h\"\n+#include \"torch/csrc/utils/functional.h\" // fmap\n+#include \"torch/csrc/utils/hash.h\"\n+#include \"torch/csrc/jit/fuser/tensor_desc.h\"\n+\n+#include <vector>\n+#include <cstdint>\n+\n+namespace torch { namespace jit { namespace fuser {\n+\n+// Describes the (runtime) arguments to a kernel.\n+// ArgSpecs are also used as keys to lookup instantiated kernels, so\n+//  they are hashable.\n+// Note: the device to run on is included in the arg spec because kernels\n+//  are compiled per-device.\n+struct TORCH_API ArgSpec {\n+  ArgSpec(\n+    at::TensorList inputs\n+  , const int _device)\n+  : descs_{fmap<TensorDesc>(inputs)}\n+  , hash_code_{torch::get_hash(_device, inputs.size(), descs_)} \n+  , device_{_device}\n+  { }\n+\n+  // (Common) hash function\n+  static size_t hash(const ArgSpec& spec) { return spec.hash_code_; }\n+\n+  // Comparators\n+  bool operator==(const ArgSpec& other) const {\n+    return (\n+       hash_code_ == other.hash_code_ \n+    && descs_ == other.descs_", "path": "torch/csrc/jit/fuser/arg_spec.h", "position": null, "original_position": 37, "commit_id": "445f1d937372bebb3a4f7717b5d4de33c77401e6", "original_commit_id": "6306899e8e7f860283c325d1cde260fb59b369de", "user": {"login": "ngimel", "id": 15841449, "node_id": "MDQ6VXNlcjE1ODQxNDQ5", "avatar_url": "https://avatars3.githubusercontent.com/u/15841449?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ngimel", "html_url": "https://github.com/ngimel", "followers_url": "https://api.github.com/users/ngimel/followers", "following_url": "https://api.github.com/users/ngimel/following{/other_user}", "gists_url": "https://api.github.com/users/ngimel/gists{/gist_id}", "starred_url": "https://api.github.com/users/ngimel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ngimel/subscriptions", "organizations_url": "https://api.github.com/users/ngimel/orgs", "repos_url": "https://api.github.com/users/ngimel/repos", "events_url": "https://api.github.com/users/ngimel/events{/privacy}", "received_events_url": "https://api.github.com/users/ngimel/received_events", "type": "User", "site_admin": false}, "body": "hash_code_ already hashes descs_ and device_?", "created_at": "2018-10-25T22:42:45Z", "updated_at": "2018-11-23T15:53:38Z", "html_url": "https://github.com/pytorch/pytorch/pull/13108#discussion_r228358884", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/13108", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/228358884"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/13108#discussion_r228358884"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/13108"}}, "body_html": "<p>hash_code_ already hashes descs_ and device_?</p>", "body_text": "hash_code_ already hashes descs_ and device_?"}