{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/228362398", "pull_request_review_id": 168620089, "id": 228362398, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyODM2MjM5OA==", "diff_hunk": "@@ -0,0 +1,187 @@\n+#include \"torch/csrc/jit/fuser/cuda/fused_kernel.h\"\n+\n+#include \"ATen/cuda/CUDAContext.h\"\n+#include \"THC/THC.h\"\n+#include \"torch/csrc/cuda/cuda_check.h\"\n+#include \"torch/csrc/jit/resource_guard.h\"\n+\n+// Note: unclear why this forward declaration is necessary\n+#include \"THC/THCTensorRandom.h\"\n+#include \"THC/THCGenerator.hpp\"\n+THCGenerator* THCRandom_getGenerator(THCState* state);\n+\n+#include \"nvrtc.h\"\n+#include \"cuda.h\"\n+#include \"cuda_runtime.h\"\n+\n+#include <stdexcept>\n+#include <sstream>\n+#include <tuple>\n+#include <vector>\n+#include <algorithm>\n+#include <cmath>\n+\n+namespace torch { namespace jit { namespace fuser { namespace cuda {\n+\n+void checkCUDAVersion(\n+  const cudaDeviceProp& prop) {\n+  if ((prop.major >= 6 && CUDA_VERSION < 8000) ||\n+      (prop.major >= 7 && CUDA_VERSION < 9000)) {\n+    std::stringstream err_string;\n+    err_string << \"In CUDAFusedKernel, PyTorch compiled with insufficient CUDA version: \"\n+         << CUDA_VERSION << \" for the current GPU device \" << prop.name\n+         << \" with device capability \" << prop.major << \".\" << prop.minor;\n+    throw std::runtime_error(err_string.str());\n+  }\n+}\n+\n+static void getMajorMinor(const cudaDeviceProp& prop, int& major, int& minor) {\n+  int nvrtc_major, nvrtc_minor;\n+  TORCH_NVRTC_CHECK(nvrtcVersion(&nvrtc_major, &nvrtc_minor));\n+\n+  // Short-circuits if NVRTC version too low\n+  JIT_ASSERT(nvrtc_major >= 6);\n+\n+  // Major and minor is determined by device properties and \n+  // possibly \"downcompiled\" to a lower (compatible) compute architecture\n+  // based on the NVRTC version\n+  major = prop.major;\n+  minor = prop.minor;\n+  if (nvrtc_major <= 7 && prop.major > 5) { // 7 supports 2-5.x\n+    major = 5;\n+    if (prop.major == 5) minor = prop.minor;", "path": "torch/csrc/jit/fuser/cuda/fused_kernel.cpp", "position": null, "original_position": 52, "commit_id": "445f1d937372bebb3a4f7717b5d4de33c77401e6", "original_commit_id": "6306899e8e7f860283c325d1cde260fb59b369de", "user": {"login": "mruberry", "id": 38511765, "node_id": "MDQ6VXNlcjM4NTExNzY1", "avatar_url": "https://avatars3.githubusercontent.com/u/38511765?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mruberry", "html_url": "https://github.com/mruberry", "followers_url": "https://api.github.com/users/mruberry/followers", "following_url": "https://api.github.com/users/mruberry/following{/other_user}", "gists_url": "https://api.github.com/users/mruberry/gists{/gist_id}", "starred_url": "https://api.github.com/users/mruberry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mruberry/subscriptions", "organizations_url": "https://api.github.com/users/mruberry/orgs", "repos_url": "https://api.github.com/users/mruberry/repos", "events_url": "https://api.github.com/users/mruberry/events{/privacy}", "received_events_url": "https://api.github.com/users/mruberry/received_events", "type": "User", "site_admin": false}, "body": "Same as above. Good catch.", "created_at": "2018-10-25T23:00:22Z", "updated_at": "2018-11-23T15:53:39Z", "html_url": "https://github.com/pytorch/pytorch/pull/13108#discussion_r228362398", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/13108", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/228362398"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/13108#discussion_r228362398"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/13108"}}, "body_html": "<p>Same as above. Good catch.</p>", "body_text": "Same as above. Good catch.", "in_reply_to_id": 228359115}