{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/433134075", "html_url": "https://github.com/pytorch/pytorch/pull/13108#issuecomment-433134075", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/13108", "id": 433134075, "node_id": "MDEyOklzc3VlQ29tbWVudDQzMzEzNDA3NQ==", "user": {"login": "mruberry", "id": 38511765, "node_id": "MDQ6VXNlcjM4NTExNzY1", "avatar_url": "https://avatars3.githubusercontent.com/u/38511765?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mruberry", "html_url": "https://github.com/mruberry", "followers_url": "https://api.github.com/users/mruberry/followers", "following_url": "https://api.github.com/users/mruberry/following{/other_user}", "gists_url": "https://api.github.com/users/mruberry/gists{/gist_id}", "starred_url": "https://api.github.com/users/mruberry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mruberry/subscriptions", "organizations_url": "https://api.github.com/users/mruberry/orgs", "repos_url": "https://api.github.com/users/mruberry/repos", "events_url": "https://api.github.com/users/mruberry/events{/privacy}", "received_events_url": "https://api.github.com/users/mruberry/received_events", "type": "User", "site_admin": false}, "created_at": "2018-10-25T17:16:49Z", "updated_at": "2018-10-25T19:31:13Z", "author_association": "CONTRIBUTOR", "body_html": "<p><strong>Code guide.</strong></p>\n<p>Per <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=4583066\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/apaszke\">@apaszke</a>'s suggestion.</p>\n<p>Interface.h/cpp - Front-end interface. Includes methods for registering and running fusions, querying whether the fusers are available, and debug functions.</p>\n<p>Compiler.h/cpp - Owns upfront and runtime compilation. Upfront compilation creates the Fusion Specifications and performs upfront shape inference (identifying input broadcast groups and input chunks). Runtime compilation invokes code generation and device-specific compilation.</p>\n<p>Codegen.h/cpp - Owns codegen and the generation of partition descriptions. In the follow-up PR that extends the fusion logic it's likely that partition descriptions won't be generated here, and these files will be exclusively about generating the appropriate code string for compilation.</p>\n<p>Executor.h/cpp - Owns actually running the requested fusions. Performs shape inference, expands types as necessary, determines the device to run, acquires a compiled kernel or requests compilation, and launches the kernel. Most of this code is shape inference and setting up arguments to the kernel. The actual kernel launch is handled by device-specific code.</p>\n<p>Fallback.h/cpp - Owns the fallback logic, which just registers FusedConcat and requests the interpreter run \"fusions\" where we don't have a Map Size or where the fusion is on a device we can't fuse on.</p>\n<p>Kernel_Spec.h - The abstract device-independent specification of the kernel. Contains the actual graph, fallback code, a thread-safe cache for actual kernels performing the requested operation, and metadata from the upfront compilation used later during runtime shape inference.</p>\n<p>Kernel_Cache.h/cpp - Thread-safe cache for the Kernel Specifications.</p>\n<p>Fused_Kernel.h - Contains all the information needed to compile and run the associated kernel. Specialized by the devices to add device-specific compilation and launch logic. This common ancestor only contains const data.</p>\n<p>Tensor_Desc, Tensor_Info, Partition_Desc, Arg_Spec - mostly as before</p>\n<p>CPU/<br>\nfused_kernel.h/cpp - Device-specific compilation and launch logic.<br>\ndynamic_library.h, resource_strings.h, temp_file.h as before</p>\n<p>CUDA/<br>\nfused_kernel.h/cpp - Device-specific compilation and launch logic (+ new NVRTC version logic)<br>\nresource_strings.h as before</p>", "body_text": "Code guide.\nPer @apaszke's suggestion.\nInterface.h/cpp - Front-end interface. Includes methods for registering and running fusions, querying whether the fusers are available, and debug functions.\nCompiler.h/cpp - Owns upfront and runtime compilation. Upfront compilation creates the Fusion Specifications and performs upfront shape inference (identifying input broadcast groups and input chunks). Runtime compilation invokes code generation and device-specific compilation.\nCodegen.h/cpp - Owns codegen and the generation of partition descriptions. In the follow-up PR that extends the fusion logic it's likely that partition descriptions won't be generated here, and these files will be exclusively about generating the appropriate code string for compilation.\nExecutor.h/cpp - Owns actually running the requested fusions. Performs shape inference, expands types as necessary, determines the device to run, acquires a compiled kernel or requests compilation, and launches the kernel. Most of this code is shape inference and setting up arguments to the kernel. The actual kernel launch is handled by device-specific code.\nFallback.h/cpp - Owns the fallback logic, which just registers FusedConcat and requests the interpreter run \"fusions\" where we don't have a Map Size or where the fusion is on a device we can't fuse on.\nKernel_Spec.h - The abstract device-independent specification of the kernel. Contains the actual graph, fallback code, a thread-safe cache for actual kernels performing the requested operation, and metadata from the upfront compilation used later during runtime shape inference.\nKernel_Cache.h/cpp - Thread-safe cache for the Kernel Specifications.\nFused_Kernel.h - Contains all the information needed to compile and run the associated kernel. Specialized by the devices to add device-specific compilation and launch logic. This common ancestor only contains const data.\nTensor_Desc, Tensor_Info, Partition_Desc, Arg_Spec - mostly as before\nCPU/\nfused_kernel.h/cpp - Device-specific compilation and launch logic.\ndynamic_library.h, resource_strings.h, temp_file.h as before\nCUDA/\nfused_kernel.h/cpp - Device-specific compilation and launch logic (+ new NVRTC version logic)\nresource_strings.h as before", "body": "**Code guide.**\r\n\r\nPer @apaszke's suggestion.\r\n\r\nInterface.h/cpp - Front-end interface. Includes methods for registering and running fusions, querying whether the fusers are available, and debug functions.\r\n\r\nCompiler.h/cpp - Owns upfront and runtime compilation. Upfront compilation creates the Fusion Specifications and performs upfront shape inference (identifying input broadcast groups and input chunks). Runtime compilation invokes code generation and device-specific compilation.\r\n\r\nCodegen.h/cpp - Owns codegen and the generation of partition descriptions. In the follow-up PR that extends the fusion logic it's likely that partition descriptions won't be generated here, and these files will be exclusively about generating the appropriate code string for compilation.\r\n\r\nExecutor.h/cpp - Owns actually running the requested fusions. Performs shape inference, expands types as necessary, determines the device to run, acquires a compiled kernel or requests compilation, and launches the kernel. Most of this code is shape inference and setting up arguments to the kernel. The actual kernel launch is handled by device-specific code.\r\n\r\nFallback.h/cpp - Owns the fallback logic, which just registers FusedConcat and requests the interpreter run \"fusions\" where we don't have a Map Size or where the fusion is on a device we can't fuse on.\r\n\r\nKernel_Spec.h - The abstract device-independent specification of the kernel. Contains the actual graph, fallback code, a thread-safe cache for actual kernels performing the requested operation, and metadata from the upfront compilation used later during runtime shape inference.\r\n\r\nKernel_Cache.h/cpp - Thread-safe cache for the Kernel Specifications.\r\n\r\nFused_Kernel.h - Contains all the information needed to compile and run the associated kernel. Specialized by the devices to add device-specific compilation and launch logic. This common ancestor only contains const data.\r\n\r\nTensor_Desc, Tensor_Info, Partition_Desc, Arg_Spec - mostly as before\r\n\r\nCPU/\r\nfused_kernel.h/cpp - Device-specific compilation and launch logic.\r\ndynamic_library.h, resource_strings.h, temp_file.h as before\r\n\r\nCUDA/\r\nfused_kernel.h/cpp - Device-specific compilation and launch logic (+ new NVRTC version logic)\r\nresource_strings.h as before"}