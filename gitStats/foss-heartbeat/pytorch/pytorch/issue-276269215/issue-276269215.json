{"url": "https://api.github.com/repos/pytorch/pytorch/issues/3848", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/3848/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/3848/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/3848/events", "html_url": "https://github.com/pytorch/pytorch/issues/3848", "id": 276269215, "node_id": "MDU6SXNzdWUyNzYyNjkyMTU=", "number": 3848, "title": "Plan for supporting cudnn.is_acceptable in ATen", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 806617721, "node_id": "MDU6TGFiZWw4MDY2MTc3MjE=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/cudnn", "name": "cudnn", "color": "fbca04", "default": false}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2017-11-23T05:27:14Z", "updated_at": "2018-01-16T17:27:38Z", "closed_at": null, "author_association": "CONTRIBUTOR", "body_html": "<p>Things we need to continue to support:</p>\n<ol>\n<li><code>torch.backends.cudnn.enabled</code>. This is the current method for enabling/disabling cudnn globally, but obviously ATen doesn't have access to Python global variables.  Perhaps the right thing to do is put a flag tracking CuDNN being enabled or disabled in the Context (which is our existing global state sin bin) which we can check, and then somehow monkeypatch the Python module to intercept when this variable is set. But this is a bit annoying to do because we have to do something like <a href=\"https://stackoverflow.com/questions/2447353/getattr-on-a-module\" rel=\"nofollow\">https://stackoverflow.com/questions/2447353/getattr-on-a-module</a></li>\n<li>Emitting a warning when you try to use a CuDNN enabled function, but PyTorch was not built without CuDNN support. I guess we can just print something to std::cerr? I feel dirty doing this. But it seems most expedient.</li>\n</ol>", "body_text": "Things we need to continue to support:\n\ntorch.backends.cudnn.enabled. This is the current method for enabling/disabling cudnn globally, but obviously ATen doesn't have access to Python global variables.  Perhaps the right thing to do is put a flag tracking CuDNN being enabled or disabled in the Context (which is our existing global state sin bin) which we can check, and then somehow monkeypatch the Python module to intercept when this variable is set. But this is a bit annoying to do because we have to do something like https://stackoverflow.com/questions/2447353/getattr-on-a-module\nEmitting a warning when you try to use a CuDNN enabled function, but PyTorch was not built without CuDNN support. I guess we can just print something to std::cerr? I feel dirty doing this. But it seems most expedient.", "body": "Things we need to continue to support:\r\n\r\n1. `torch.backends.cudnn.enabled`. This is the current method for enabling/disabling cudnn globally, but obviously ATen doesn't have access to Python global variables.  Perhaps the right thing to do is put a flag tracking CuDNN being enabled or disabled in the Context (which is our existing global state sin bin) which we can check, and then somehow monkeypatch the Python module to intercept when this variable is set. But this is a bit annoying to do because we have to do something like https://stackoverflow.com/questions/2447353/getattr-on-a-module\r\n2. Emitting a warning when you try to use a CuDNN enabled function, but PyTorch was not built without CuDNN support. I guess we can just print something to std::cerr? I feel dirty doing this. But it seems most expedient."}