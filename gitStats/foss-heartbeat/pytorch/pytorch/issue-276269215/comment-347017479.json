{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/347017479", "html_url": "https://github.com/pytorch/pytorch/issues/3848#issuecomment-347017479", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/3848", "id": 347017479, "node_id": "MDEyOklzc3VlQ29tbWVudDM0NzAxNzQ3OQ==", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "created_at": "2017-11-26T15:45:38Z", "updated_at": "2017-11-26T15:45:38Z", "author_association": "CONTRIBUTOR", "body_html": "<blockquote>\n<p>What situations are you referring to in (2)? If you use conv2d without cuDNN, that should just use the fastest available method. (e.g. cuDNN, NNPACK, whatever AMD provides, etc.) If you use something that's explicitly cuDNN (e.g. cudnn_conv2d), then that should be an error if cuDNN isn't supported. We don't currently warn if in conv2d if there's no cuDNN support.</p>\n<p>Callbacks are annoying and complicate the code. If we really want to warn that there isn't cuDNN support, do it when we initialize CUDA (but I don't think it's worth it)</p>\n</blockquote>\n<p>Today, if you use <code>conv2d</code> with CUDA and without cuDNN, you get a warning telling you that cuDNN is not used. This seems like a relatively useful warning that helps people know if they've messed up their install. It's fine for us to decide that callbacks are too annoying for us to support this; I just want to explicitly acknowledge it.</p>", "body_text": "What situations are you referring to in (2)? If you use conv2d without cuDNN, that should just use the fastest available method. (e.g. cuDNN, NNPACK, whatever AMD provides, etc.) If you use something that's explicitly cuDNN (e.g. cudnn_conv2d), then that should be an error if cuDNN isn't supported. We don't currently warn if in conv2d if there's no cuDNN support.\nCallbacks are annoying and complicate the code. If we really want to warn that there isn't cuDNN support, do it when we initialize CUDA (but I don't think it's worth it)\n\nToday, if you use conv2d with CUDA and without cuDNN, you get a warning telling you that cuDNN is not used. This seems like a relatively useful warning that helps people know if they've messed up their install. It's fine for us to decide that callbacks are too annoying for us to support this; I just want to explicitly acknowledge it.", "body": "> What situations are you referring to in (2)? If you use conv2d without cuDNN, that should just use the fastest available method. (e.g. cuDNN, NNPACK, whatever AMD provides, etc.) If you use something that's explicitly cuDNN (e.g. cudnn_conv2d), then that should be an error if cuDNN isn't supported. We don't currently warn if in conv2d if there's no cuDNN support.\r\n>\r\n> Callbacks are annoying and complicate the code. If we really want to warn that there isn't cuDNN support, do it when we initialize CUDA (but I don't think it's worth it)\r\n\r\nToday, if you use `conv2d` with CUDA and without cuDNN, you get a warning telling you that cuDNN is not used. This seems like a relatively useful warning that helps people know if they've messed up their install. It's fine for us to decide that callbacks are too annoying for us to support this; I just want to explicitly acknowledge it."}