{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/93125281", "pull_request_review_id": 13647054, "id": 93125281, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkzMTI1Mjgx", "diff_hunk": "@@ -1,37 +1,69 @@\n-from sys import platform as _platform\n-from multiprocessing import *\n+import sys as _sys\n+import multiprocessing as _mp\n \n \n-if _platform == 'darwin':\n-    _sharing_strategy = 'file_system'\n-    _all_sharing_strategies = {'file_system'}\n-else:\n-    _sharing_strategy = 'file_descriptor'\n-    _all_sharing_strategies = {'file_descriptor', 'file_system'}\n+class _TorchContext(object):\n+    def __init__(self, ctx=None, sharing_strategy=None):\n+        if ctx is None:\n+            ctx = _mp\n+        if sharing_strategy is None:\n+            if _sys.platform == 'darwin':\n+                sharing_strategy = 'file_system'\n+            else:\n+                sharing_strategy = 'file_descriptor'\n+        if sharing_strategy not in self.get_all_sharing_strategies():\n+            raise ValueError(\"invalid sharing_strategy '{}'\".format(sharing_strategy))\n+        self._ctx = ctx\n+        self._sharing_strategy = sharing_strategy\n \n+    def get_sharing_strategy(self):\n+        return self._sharing_strategy\n \n-def set_sharing_strategy(new_strategy):\n-    global _sharing_strategy\n-    assert new_strategy in _all_sharing_strategies\n-    _sharing_strategy = new_strategy\n+    @staticmethod\n+    def get_all_sharing_strategies():\n+        if _sys.platform == 'darwin':\n+            return {'file_system'}\n+        else:\n+            return {'file_descriptor', 'file_system'}\n \n+    def get_context(self, method=None, sharing_strategy=None):\n+        ctx = self._ctx\n+        if method is not None:\n+            ctx = self._ctx.get_context(method)\n+        return _TorchContext(ctx, sharing_strategy)\n \n-def get_sharing_strategy():\n-    return _sharing_strategy\n+    def Queue(self, context=None, reducers=None):\n+        from .queue import Queue, FdQueue\n+        if context is None:\n+            context = self\n+        if self._sharing_strategy == 'file_descriptor':\n+            return FdQueue(context, reducers)\n+        elif self._sharing_strategy == 'file_system':\n+            return Queue(context, reducers)\n \n-def get_all_sharing_strategies():\n-    return _all_sharing_strategies\n+    def Pool(self, *args, **kwargs):\n+        from .pool import Pool\n+        if _sys.version_info[0] == 3:\n+            kwargs.setdefault('context', self)\n+        return Pool(*args, **kwargs)\n \n+    def __getattr__(self, name):\n+        return getattr(self._ctx, name)\n \n-def Queue(*args, **kwargs):\n-    from .queue import Queue, FdQueue\n-    if _sharing_strategy == 'file_descriptor':\n-        return FdQueue(*args, **kwargs)\n-    elif _sharing_strategy == 'file_system':\n-        return Queue(*args, **kwargs)\n+    def __dir__(self):\n+        entries = dir(self._ctx)\n+        entries += ['get_sharing_strategy', 'get_all_sharing_strategies']\n+        if 'get_context' not in entries:\n+            entries += ['get_context']\n+        return entries\n \n \n-from .pool import Pool\n+_default_context = _TorchContext()\n+\n+for key in dir(_default_context):\n+    if key[0] != '_':\n+        globals()[key] = getattr(_default_context, key)", "path": "torch/multiprocessing/__init__.py", "position": null, "original_position": 88, "commit_id": "f2c88c328ee29fb70123b30a2c637434382624c9", "original_commit_id": "b68fb32c7ac329099908924703d9d4cdfdbbb68a", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "It might be better to cache globals in a local variable", "created_at": "2016-12-19T21:39:48Z", "updated_at": "2018-11-23T15:31:59Z", "html_url": "https://github.com/pytorch/pytorch/pull/203#discussion_r93125281", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/203", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/93125281"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/203#discussion_r93125281"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/203"}}, "body_html": "<p>It might be better to cache globals in a local variable</p>", "body_text": "It might be better to cache globals in a local variable"}