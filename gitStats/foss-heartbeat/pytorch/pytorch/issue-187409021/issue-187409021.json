{"url": "https://api.github.com/repos/pytorch/pytorch/issues/203", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/203/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/203/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/203/events", "html_url": "https://github.com/pytorch/pytorch/pull/203", "id": 187409021, "node_id": "MDExOlB1bGxSZXF1ZXN0OTIzOTQ1MTM=", "number": 203, "title": "Support CUDA IPC in Python 3", "user": {"login": "colesbury", "id": 655866, "node_id": "MDQ6VXNlcjY1NTg2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/655866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colesbury", "html_url": "https://github.com/colesbury", "followers_url": "https://api.github.com/users/colesbury/followers", "following_url": "https://api.github.com/users/colesbury/following{/other_user}", "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions", "organizations_url": "https://api.github.com/users/colesbury/orgs", "repos_url": "https://api.github.com/users/colesbury/repos", "events_url": "https://api.github.com/users/colesbury/events{/privacy}", "received_events_url": "https://api.github.com/users/colesbury/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-11-04T18:40:43Z", "updated_at": "2018-11-23T15:31:59Z", "closed_at": "2016-12-20T01:42:53Z", "author_association": "MEMBER", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/203", "html_url": "https://github.com/pytorch/pytorch/pull/203", "diff_url": "https://github.com/pytorch/pytorch/pull/203.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/203.patch"}, "body_html": "<p>CUDA IPC only works with Python 3 using the \"spawn\" start method. You can select the start method using the get_context method:</p>\n<div class=\"highlight highlight-source-python\"><pre> <span class=\"pl-k\">import</span> torch.multiprocessing <span class=\"pl-k\">as</span> mp\n ctx <span class=\"pl-k\">=</span> mp.get_context(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>spawn<span class=\"pl-pds\">'</span></span>)\n queue <span class=\"pl-k\">=</span> ctx.Queue()\n event <span class=\"pl-k\">=</span> ctx.Event()</pre></div>\n<p>To work better with multiprocessing contexts (which were introduced in Python 3), I've changed the way you switch the \"sharing strategy\". To use a non-default sharing strategy you get a new context:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> torch.multiprocessing <span class=\"pl-k\">as</span> mp\nctx <span class=\"pl-k\">=</span> mp.get_context(<span class=\"pl-v\">sharing_strategy</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>file_system<span class=\"pl-pds\">\"</span></span>)</pre></div>\n<p>(This works in both Python 2 and Python 3)</p>", "body_text": "CUDA IPC only works with Python 3 using the \"spawn\" start method. You can select the start method using the get_context method:\n import torch.multiprocessing as mp\n ctx = mp.get_context('spawn')\n queue = ctx.Queue()\n event = ctx.Event()\nTo work better with multiprocessing contexts (which were introduced in Python 3), I've changed the way you switch the \"sharing strategy\". To use a non-default sharing strategy you get a new context:\nimport torch.multiprocessing as mp\nctx = mp.get_context(sharing_strategy=\"file_system\")\n(This works in both Python 2 and Python 3)", "body": "CUDA IPC only works with Python 3 using the \"spawn\" start method. You can select the start method using the get_context method:\r\n\r\n```python\r\n import torch.multiprocessing as mp\r\n ctx = mp.get_context('spawn')\r\n queue = ctx.Queue()\r\n event = ctx.Event()\r\n```\r\n\r\nTo work better with multiprocessing contexts (which were introduced in Python 3), I've changed the way you switch the \"sharing strategy\". To use a non-default sharing strategy you get a new context:\r\n\r\n```python\r\nimport torch.multiprocessing as mp\r\nctx = mp.get_context(sharing_strategy=\"file_system\")\r\n```\r\n\r\n(This works in both Python 2 and Python 3)"}