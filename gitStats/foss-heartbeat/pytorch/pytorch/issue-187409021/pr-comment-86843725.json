{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/86843725", "pull_request_review_id": 7481373, "id": 86843725, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg2ODQzNzI1", "diff_hunk": "@@ -1,8 +1,14 @@\n-from sys import platform as _platform\n-from multiprocessing import *\n-\n+import sys as _sys\n+import multiprocessing as _mp\n+if _sys.version_info[0] == 3:\n+    _ctx = _mp.get_context('forkserver')", "path": "torch/multiprocessing/__init__.py", "position": null, "original_position": 7, "commit_id": "f2c88c328ee29fb70123b30a2c637434382624c9", "original_commit_id": "782b98406e53e23328102307e4f8a0271d9f5231", "user": {"login": "colesbury", "id": 655866, "node_id": "MDQ6VXNlcjY1NTg2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/655866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colesbury", "html_url": "https://github.com/colesbury", "followers_url": "https://api.github.com/users/colesbury/followers", "following_url": "https://api.github.com/users/colesbury/following{/other_user}", "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions", "organizations_url": "https://api.github.com/users/colesbury/orgs", "repos_url": "https://api.github.com/users/colesbury/repos", "events_url": "https://api.github.com/users/colesbury/events{/privacy}", "received_events_url": "https://api.github.com/users/colesbury/received_events", "type": "User", "site_admin": false}, "body": "So I found out there are two ways (in Python 3) to change the start methods.\n1. `multiprocessing.set_start_method`: this sets the default for the multiprocessing.XXX objects and can only be called once.\n2. `multiprocessing.get_context(start_method)`: this takes a start method (\"fork server\", \"spawn\", \"fork\") and returns an object that exposes the same API as the multiprocessing module. This lets you use multiple contexts in the same program. If we use forkserver, we still need to call this early on to make sure the forkserver is created before CUDA is initialized.\n\nThis is all a little awkward because we want torch.multiprocessing to expose the same API as multiprocessing but with a different default context.\n", "created_at": "2016-11-07T19:02:25Z", "updated_at": "2018-11-23T15:31:54Z", "html_url": "https://github.com/pytorch/pytorch/pull/203#discussion_r86843725", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/203", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/86843725"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/203#discussion_r86843725"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/203"}}, "body_html": "<p>So I found out there are two ways (in Python 3) to change the start methods.</p>\n<ol>\n<li><code>multiprocessing.set_start_method</code>: this sets the default for the multiprocessing.XXX objects and can only be called once.</li>\n<li><code>multiprocessing.get_context(start_method)</code>: this takes a start method (\"fork server\", \"spawn\", \"fork\") and returns an object that exposes the same API as the multiprocessing module. This lets you use multiple contexts in the same program. If we use forkserver, we still need to call this early on to make sure the forkserver is created before CUDA is initialized.</li>\n</ol>\n<p>This is all a little awkward because we want torch.multiprocessing to expose the same API as multiprocessing but with a different default context.</p>", "body_text": "So I found out there are two ways (in Python 3) to change the start methods.\n\nmultiprocessing.set_start_method: this sets the default for the multiprocessing.XXX objects and can only be called once.\nmultiprocessing.get_context(start_method): this takes a start method (\"fork server\", \"spawn\", \"fork\") and returns an object that exposes the same API as the multiprocessing module. This lets you use multiple contexts in the same program. If we use forkserver, we still need to call this early on to make sure the forkserver is created before CUDA is initialized.\n\nThis is all a little awkward because we want torch.multiprocessing to expose the same API as multiprocessing but with a different default context.", "in_reply_to_id": 86693838}