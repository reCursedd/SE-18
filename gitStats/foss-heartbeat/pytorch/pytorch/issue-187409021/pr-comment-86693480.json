{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/86693480", "pull_request_review_id": 7338159, "id": 86693480, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg2NjkzNDgw", "diff_hunk": "@@ -430,6 +516,114 @@ PyObject * THPStorage_(_sharedFd)(THPStorage *self)\n }\n #endif\n \n+static THStorage * THPStorage_(_newTHView)(THStorage *base, ptrdiff_t offset, size_t size)\n+{\n+  void *data = (char*)base->data + offset;\n+  THStoragePtr view = THStorage_(newWithData)(LIBRARY_STATE (real*)data, size);\n+  view->flag = TH_STORAGE_REFCOUNTED | TH_STORAGE_VIEW;\n+  view->view = base;\n+  THStorage_(retain)(LIBRARY_STATE base);\n+  return view.release();\n+}\n+\n+#ifdef THC_GENERIC_FILE\n+#include <cuda_runtime.h>\n+#include <cuda.h>\n+static THStorage * THPStorage_(_newShared_cuda)(PyObject *args)\n+{\n+  THPUtils_assert(PyTuple_Size(args) == 5, \"tuple of 5 items expected\");\n+  PyObject *_device = PyTuple_GetItem(args, 0);\n+  PyObject *_handle = PyTuple_GetItem(args, 1);\n+  PyObject *_size = PyTuple_GetItem(args, 2);\n+  PyObject *_offset = PyTuple_GetItem(args, 3);\n+  PyObject *_view_size = PyTuple_GetItem(args, 4);\n+  if (!THPUtils_checkLong(_device) && THPUtils_checkLong(_size)\n+      && (_handle == Py_None || PyBytes_Check(_handle))\n+      && THPUtils_checkLong(_offset) && THPUtils_checkLong(_view_size)) {\n+    THPUtils_invalidArguments(args, \"_new_shared in CUDA mode\", 1,\n+        \"device (int), handle (string/bytes), and storage size (int), offset (int), view size (int)\");\n+    return NULL;\n+  }\n+\n+  size_t storage_size = (size_t)THPUtils_unpackLong(_size);\n+  ptrdiff_t offset = (ptrdiff_t)THPUtils_unpackLong(_offset);\n+  size_t view_size =  (size_t)THPUtils_unpackLong(_view_size);\n+  if (PyErr_Occurred()) {\n+    return NULL;\n+  }\n+\n+  //THCPAutoGPU((int)THPUtils_unpackLong(_device));\n+\n+  char *buffer;\n+  Py_ssize_t handle_size;\n+  if (PyBytes_AsStringAndSize(_handle, &buffer, &handle_size) == -1) {\n+    return NULL;\n+  }\n+  THPUtils_assert(handle_size == CUDA_IPC_HANDLE_SIZE, \"incorrect handle size\");\n+  cudaIpcMemHandle_t handle = *(cudaIpcMemHandle_t*)buffer;\n+\n+  void *devPtr = NULL;\n+  THCudaCheck(cudaIpcOpenMemHandle(&devPtr, handle, cudaIpcMemLazyEnablePeerAccess));\n+\n+  THStoragePtr base = THStorage_(newWithDataAndAllocator)(\n+      LIBRARY_STATE (real*)devPtr, storage_size, &THCIpcAllocator, NULL);\n+  base->flag = TH_STORAGE_REFCOUNTED | TH_STORAGE_FREEMEM;\n+\n+  if (offset != 0 || view_size != storage_size) {\n+    THStoragePtr view = THPStorage_(_newTHView)(base.get(), offset, view_size);\n+    return view.release();\n+  }\n+\n+  return base.release();\n+}\n+#endif\n+\n+PyObject * THPStorage_(_newShared)(THPStorage *self, PyObject *args)\n+{\n+  HANDLE_TH_ERRORS\n+  if (PyTuple_Size(args) != 2 || !PyTuple_Check(PyTuple_GET_ITEM(args, 0))) {\n+    THPUtils_invalidArguments(args, \"_new_shared\", 2, \"tuple\", \"type\");", "path": "torch/csrc/generic/StorageMethods.cpp", "position": null, "original_position": 292, "commit_id": "f2c88c328ee29fb70123b30a2c637434382624c9", "original_commit_id": "782b98406e53e23328102307e4f8a0271d9f5231", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "This line means that you function has two options, not that it accepts two arguments.\n", "created_at": "2016-11-06T19:07:25Z", "updated_at": "2018-11-23T15:31:53Z", "html_url": "https://github.com/pytorch/pytorch/pull/203#discussion_r86693480", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/203", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/86693480"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/203#discussion_r86693480"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/203"}}, "body_html": "<p>This line means that you function has two options, not that it accepts two arguments.</p>", "body_text": "This line means that you function has two options, not that it accepts two arguments."}