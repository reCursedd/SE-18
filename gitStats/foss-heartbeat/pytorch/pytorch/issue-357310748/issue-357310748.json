{"url": "https://api.github.com/repos/pytorch/pytorch/issues/11274", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/11274/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/11274/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/11274/events", "html_url": "https://github.com/pytorch/pytorch/pull/11274", "id": 357310748, "node_id": "MDExOlB1bGxSZXF1ZXN0MjEzMzU3NDI1", "number": 11274, "title": "Move the type registry out of Context, into LegacyTypeDispatch.", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-09-05T16:34:59Z", "updated_at": "2018-11-23T15:50:45Z", "closed_at": "2018-09-08T17:11:33Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/11274", "html_url": "https://github.com/pytorch/pytorch/pull/11274", "diff_url": "https://github.com/pytorch/pytorch/pull/11274.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/11274.patch"}, "body_html": "<p>Stack:<br>\n\u00a0\u00a0\u00a0\u00a0<g-emoji class=\"g-emoji\" alias=\"black_circle\" fallback-src=\"https://assets-cdn.github.com/images/icons/emoji/unicode/26ab.png\">\u26ab\ufe0f</g-emoji>\u00a0 <strong><a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"357310748\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/11274\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/pytorch/pytorch/pull/11274/hovercard\" href=\"https://github.com/pytorch/pytorch/pull/11274\">#11274</a> Move the type registry out of Context, into LegacyTypeDispatch.</strong>\u00a0\u00a0<a href=\"https://our.internmc.facebook.com/intern/diff/D9657449/\" rel=\"nofollow\"><g-emoji class=\"g-emoji\" alias=\"green_heart\" fallback-src=\"https://assets-cdn.github.com/images/icons/emoji/unicode/1f49a.png\">\ud83d\udc9a</g-emoji></a><br>\n\u00a0\u00a0\u00a0\u00a0<g-emoji class=\"g-emoji\" alias=\"white_circle\" fallback-src=\"https://assets-cdn.github.com/images/icons/emoji/unicode/26aa.png\">\u26aa\ufe0f</g-emoji>\u00a0 <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"357708597\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/11331\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/pytorch/pytorch/pull/11331/hovercard\" href=\"https://github.com/pytorch/pytorch/pull/11331\">#11331</a> Improve LegacyTypeDispatch to handle initialization correctly.\u00a0\u00a0<a href=\"https://our.internmc.facebook.com/intern/diff/D9666612/\" rel=\"nofollow\"><g-emoji class=\"g-emoji\" alias=\"green_heart\" fallback-src=\"https://assets-cdn.github.com/images/icons/emoji/unicode/1f49a.png\">\ud83d\udc9a</g-emoji></a></p>\n<p>We don't want to put all of Context into ATen/core, but one<br>\nparticular part cannot be avoided: the type registry, because<br>\nimplementations of TensorMethods will need to get a Type,<br>\nand then do a virtual call on it.</p>\n<p>I needed to do a little bit of (temporary) footwork to get this<br>\nin without also moving Type, because unique_ptr expects<br>\nto be able to see the destructor of Type (but it's forward declared<br>\nright now).  So instead I put the destructor as an explicit functor.  We<br>\ncan get rid of this once Type actually moves in ATen/core</p>\n<p>Differential Revision: <a href=\"https://our.internmc.facebook.com/intern/diff/D9657449/\" rel=\"nofollow\">D9657449</a></p>", "body_text": "Stack:\n\u00a0\u00a0\u00a0\u00a0\u26ab\ufe0f\u00a0 #11274 Move the type registry out of Context, into LegacyTypeDispatch.\u00a0\u00a0\ud83d\udc9a\n\u00a0\u00a0\u00a0\u00a0\u26aa\ufe0f\u00a0 #11331 Improve LegacyTypeDispatch to handle initialization correctly.\u00a0\u00a0\ud83d\udc9a\nWe don't want to put all of Context into ATen/core, but one\nparticular part cannot be avoided: the type registry, because\nimplementations of TensorMethods will need to get a Type,\nand then do a virtual call on it.\nI needed to do a little bit of (temporary) footwork to get this\nin without also moving Type, because unique_ptr expects\nto be able to see the destructor of Type (but it's forward declared\nright now).  So instead I put the destructor as an explicit functor.  We\ncan get rid of this once Type actually moves in ATen/core\nDifferential Revision: D9657449", "body": "Stack:\n&nbsp;&nbsp;&nbsp;&nbsp;:black_circle:&nbsp; **#11274 Move the type registry out of Context, into LegacyTypeDispatch.**&nbsp;&nbsp;[:green_heart:](https://our.internmc.facebook.com/intern/diff/D9657449/)\n&nbsp;&nbsp;&nbsp;&nbsp;:white_circle:&nbsp; #11331 Improve LegacyTypeDispatch to handle initialization correctly.&nbsp;&nbsp;[:green_heart:](https://our.internmc.facebook.com/intern/diff/D9666612/)\n\nWe don't want to put all of Context into ATen/core, but one\nparticular part cannot be avoided: the type registry, because\nimplementations of TensorMethods will need to get a Type,\nand then do a virtual call on it.\n\nI needed to do a little bit of (temporary) footwork to get this\nin without also moving Type, because unique_ptr<Type> expects\nto be able to see the destructor of Type (but it's forward declared\nright now).  So instead I put the destructor as an explicit functor.  We\ncan get rid of this once Type actually moves in ATen/core\n\nDifferential Revision: [D9657449](https://our.internmc.facebook.com/intern/diff/D9657449/)"}