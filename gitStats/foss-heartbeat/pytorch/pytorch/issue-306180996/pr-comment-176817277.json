{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/176817277", "pull_request_review_id": 106593356, "id": 176817277, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NjgxNzI3Nw==", "diff_hunk": "@@ -0,0 +1,271 @@\n+#include \"ATen/ATen.h\"\n+#include \"ATen/NativeFunctions.h\"\n+#include \"ATen/native/SpectralOpsUtils.h\"\n+#include \"ATen/Config.h\"\n+\n+#if !AT_MKL_ENABLED()\n+\n+namespace at { namespace native {\n+\n+Tensor _fft_mkl(const Tensor& input, int64_t signal_ndim,\n+                bool complex_input, bool complex_output,\n+                bool inverse, IntList checked_signal_sizes,\n+                bool normalized, bool onesided,\n+                IntList output_sizes) {\n+  throw std::runtime_error(\"fft: ATen not compiled with mkl support\");\n+}\n+\n+}}\n+\n+#else // AT_MKL_ENABLED\n+\n+#include \"ATen/ATen.h\"\n+#include \"ATen/Config.h\"\n+#include \"ATen/Dispatch.h\"\n+#include \"ATen/NativeFunctions.h\"\n+\n+#include <algorithm>\n+#include <vector>\n+#include <numeric>\n+#include <cmath>\n+\n+#include <mkl_dfti.h>\n+#include <ATen/mkl/Exceptions.h>\n+#include <ATen/mkl/Descriptors.h>\n+#include <ATen/mkl/Limits.h>\n+\n+#ifdef _OPENMP\n+#include <omp.h>\n+#endif\n+\n+namespace at { namespace native {\n+\n+template <typename scalar_t>\n+static inline void _fft_fill_with_hermitian_symmetry_slice(Tensor& output,\n+                       int64_t signal_ndim, int64_t size_last_dim,\n+                       int64_t start_last_dim_idx, int64_t i, int64_t num) {\n+  scalar_t *data = output.data<scalar_t>();\n+  std::vector<int64_t> slice_indices(signal_ndim);  // up to before last signal dim\n+  int64_t remainder = i;\n+  int64_t dim_size, dim_idx;\n+  // set last signal dim values\n+  int64_t from_slice_offset = 0;\n+  for (int64_t d = signal_ndim - 1; d >= 0; d--) {\n+    dim_size = output.size(d);\n+    dim_idx = remainder % dim_size;\n+    remainder = remainder / dim_size;\n+    slice_indices[d] = dim_idx;\n+    if (d == 0) {\n+      from_slice_offset += dim_idx * output.stride(d);\n+    } else if (dim_idx != 0) {\n+      from_slice_offset += (dim_size - dim_idx) * output.stride(d);\n+    }\n+  }\n+  scalar_t *to_data = data + i * size_last_dim * 2;\n+  scalar_t *from_data = data + from_slice_offset;\n+  int64_t from_idx, to_idx;\n+  while (num > 0) {\n+    for (int64_t j = start_last_dim_idx; j < size_last_dim; j++) {\n+      to_idx = j * 2;\n+      from_idx = (size_last_dim - j) * 2;\n+      to_data[to_idx] = from_data[from_idx];\n+      to_data[to_idx + 1] = -from_data[from_idx + 1];\n+    }\n+    to_data += size_last_dim * 2;\n+    for (int64_t d = signal_ndim - 1; d >= 0; d--) {\n+      slice_indices[d] = (slice_indices[d] + 1) % output.size(d);\n+      if (d > 0) {\n+        // this is tricky", "path": "aten/src/ATen/native/mkl/SpectralOps.cpp", "position": null, "original_position": 78, "commit_id": "0f0d59ae356362438b95c5bccb195be5e283c849", "original_commit_id": "1e3e1fdf253de18864657ebecdf9065ce2f465e1", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "When things are tricky, it's always helpful to have examples!", "created_at": "2018-03-23T17:55:39Z", "updated_at": "2018-11-23T15:41:05Z", "html_url": "https://github.com/pytorch/pytorch/pull/5856#discussion_r176817277", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/5856", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/176817277"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/5856#discussion_r176817277"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/5856"}}, "body_html": "<p>When things are tricky, it's always helpful to have examples!</p>", "body_text": "When things are tricky, it's always helpful to have examples!"}