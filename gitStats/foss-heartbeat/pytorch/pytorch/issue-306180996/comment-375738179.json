{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/375738179", "html_url": "https://github.com/pytorch/pytorch/pull/5856#issuecomment-375738179", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/5856", "id": 375738179, "node_id": "MDEyOklzc3VlQ29tbWVudDM3NTczODE3OQ==", "user": {"login": "SsnL", "id": 5674597, "node_id": "MDQ6VXNlcjU2NzQ1OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5674597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SsnL", "html_url": "https://github.com/SsnL", "followers_url": "https://api.github.com/users/SsnL/followers", "following_url": "https://api.github.com/users/SsnL/following{/other_user}", "gists_url": "https://api.github.com/users/SsnL/gists{/gist_id}", "starred_url": "https://api.github.com/users/SsnL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SsnL/subscriptions", "organizations_url": "https://api.github.com/users/SsnL/orgs", "repos_url": "https://api.github.com/users/SsnL/repos", "events_url": "https://api.github.com/users/SsnL/events{/privacy}", "received_events_url": "https://api.github.com/users/SsnL/received_events", "type": "User", "site_admin": false}, "created_at": "2018-03-23T17:16:26Z", "updated_at": "2018-03-23T17:16:26Z", "author_association": "CONTRIBUTOR", "body_html": "<div class=\"email-fragment\">Cufft uses long long int. I don\u2019t think int64_t is equivalent with long\nlong int. Maybe I\u2019m wrong?</div>\n<span class=\"email-hidden-toggle\"><a href=\"#\">\u2026</a></span><div class=\"email-hidden-reply\">\n<div class=\"email-quoted-reply\">On Fri, Mar 23, 2018 at 13:15 Edward Z. Yang ***@***.***&gt; wrote:\n ***@***.**** commented on this pull request.\n ------------------------------\n\n In aten/src/ATen/native/cuda/SpectralOps.cu\n &lt;<a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"306180996\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/5856\" href=\"https://github.com/pytorch/pytorch/pull/5856#discussion_r176804980\">#5856 (comment)</a>&gt;:\n\n &gt; +                  IntList output_sizes) {\n +  Tensor input = self;\n +\n +  bool is_half = input.type().scalarType() == ScalarType::Half;\n +\n +  // cuFFT requires input and output data pointers to complex type aligned\n +  // our allocated output tensor is always 256 bytes aligned so it is fine, but\n +  // we need to check input tensor to make sure that it is not unaligned, e.g.\n +  // from a slicing.\n +  auto complex_size_bytes = 2 * input.type().elementSizeInBytes();\n +  if (reinterpret_cast&lt;std::uintptr_t&gt;(input.data_ptr()) % complex_size_bytes != 0) {\n +    input = self.clone();\n +  }\n +\n +  // check input batch size\n +  long long int batch = input.size(0);\n\n int64_t seems more idiomatic here\n\n \u2014\n You are receiving this because you authored the thread.\n Reply to this email directly, view it on GitHub\n &lt;<a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"306180996\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/5856\" href=\"https://github.com/pytorch/pytorch/pull/5856#pullrequestreview-106578975\">#5856 (review)</a>&gt;,\n or mute the thread\n &lt;<a href=\"https://github.com/notifications/unsubscribe-auth/AFaWZTvUdTicBUWsRk9_cjBfG2ft50Haks5thS2XgaJpZM4Su66h\">https://github.com/notifications/unsubscribe-auth/AFaWZTvUdTicBUWsRk9_cjBfG2ft50Haks5thS2XgaJpZM4Su66h</a>&gt;\n .\n</div>\n<div class=\"email-fragment\"></div>\n</div>", "body_text": "Cufft uses long long int. I don\u2019t think int64_t is equivalent with long\nlong int. Maybe I\u2019m wrong?\n\u2026\nOn Fri, Mar 23, 2018 at 13:15 Edward Z. Yang ***@***.***> wrote:\n ***@***.**** commented on this pull request.\n ------------------------------\n\n In aten/src/ATen/native/cuda/SpectralOps.cu\n <#5856 (comment)>:\n\n > +                  IntList output_sizes) {\n +  Tensor input = self;\n +\n +  bool is_half = input.type().scalarType() == ScalarType::Half;\n +\n +  // cuFFT requires input and output data pointers to complex type aligned\n +  // our allocated output tensor is always 256 bytes aligned so it is fine, but\n +  // we need to check input tensor to make sure that it is not unaligned, e.g.\n +  // from a slicing.\n +  auto complex_size_bytes = 2 * input.type().elementSizeInBytes();\n +  if (reinterpret_cast<std::uintptr_t>(input.data_ptr()) % complex_size_bytes != 0) {\n +    input = self.clone();\n +  }\n +\n +  // check input batch size\n +  long long int batch = input.size(0);\n\n int64_t seems more idiomatic here\n\n \u2014\n You are receiving this because you authored the thread.\n Reply to this email directly, view it on GitHub\n <#5856 (review)>,\n or mute the thread\n <https://github.com/notifications/unsubscribe-auth/AFaWZTvUdTicBUWsRk9_cjBfG2ft50Haks5thS2XgaJpZM4Su66h>\n .", "body": "Cufft uses long long int. I don\u2019t think int64_t is equivalent with long\nlong int. Maybe I\u2019m wrong?\n\nOn Fri, Mar 23, 2018 at 13:15 Edward Z. Yang <notifications@github.com>\nwrote:\n\n> *@ezyang* commented on this pull request.\n> ------------------------------\n>\n> In aten/src/ATen/native/cuda/SpectralOps.cu\n> <https://github.com/pytorch/pytorch/pull/5856#discussion_r176804980>:\n>\n> > +                  IntList output_sizes) {\n> +  Tensor input = self;\n> +\n> +  bool is_half = input.type().scalarType() == ScalarType::Half;\n> +\n> +  // cuFFT requires input and output data pointers to complex type aligned\n> +  // our allocated output tensor is always 256 bytes aligned so it is fine, but\n> +  // we need to check input tensor to make sure that it is not unaligned, e.g.\n> +  // from a slicing.\n> +  auto complex_size_bytes = 2 * input.type().elementSizeInBytes();\n> +  if (reinterpret_cast<std::uintptr_t>(input.data_ptr()) % complex_size_bytes != 0) {\n> +    input = self.clone();\n> +  }\n> +\n> +  // check input batch size\n> +  long long int batch = input.size(0);\n>\n> int64_t seems more idiomatic here\n>\n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/pytorch/pytorch/pull/5856#pullrequestreview-106578975>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AFaWZTvUdTicBUWsRk9_cjBfG2ft50Haks5thS2XgaJpZM4Su66h>\n> .\n>\n"}