{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/176789290", "pull_request_review_id": 106560564, "id": 176789290, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3Njc4OTI5MA==", "diff_hunk": "@@ -3071,11 +3071,99 @@ def test_det_logdet_slogdet(self):\n         self._test_det_logdet_slogdet(self, lambda x: x)\n \n     @staticmethod\n-    def _test_stft(self, conv_fn):\n+    def _test_fft_ifft_rfft_irfft(self, build_fn):\n+        # the conv_fn to convert tensors can be slow in cuda tests, so we use\n+        # a build_fn: sizes => tensor\n+        def _test_complex(sizes, signal_ndim, prepro_fn=lambda x: x):\n+            x = prepro_fn(build_fn(*sizes))\n+            for normalized in (True, False):\n+                res = x.fft(signal_ndim, normalized=normalized)\n+                rec = res.ifft(signal_ndim, normalized=normalized)\n+                self.assertEqual(x, rec, 1e-8, 'fft and ifft')\n+\n+        def _test_real(sizes, signal_ndim, prepro_fn=lambda x: x):\n+            x = prepro_fn(build_fn(*sizes))\n+            signal_numel = 1\n+            if x.dim() == signal_ndim:\n+                start_dim = 0\n+            else:\n+                start_dim = 1\n+            signal_sizes = x.size()[start_dim:start_dim + signal_ndim]\n+            for normalized, onesided in product((True, False), repeat=2):\n+                res = x.rfft(signal_ndim, normalized=normalized, onesided=onesided)\n+                if not onesided:  # check Hermitian symmetry\n+                    def test_one_sample(res, test_num=10):\n+                        idxs_per_dim = [torch.LongTensor(test_num).random_(s).tolist() for s in signal_sizes]\n+                        for idx in zip(*idxs_per_dim):\n+                            reflected_idx = tuple((s - i) % s for i, s in zip(idx, res.size()))\n+                            idx_val = res.__getitem__(idx)\n+                            reflected_val = res.__getitem__(reflected_idx)\n+                            self.assertEqual(idx_val[0], reflected_val[0], 'rfft hermitian symmetry on real part')\n+                            self.assertEqual(idx_val[1], -reflected_val[1], 'rfft hermitian symmetry on imaginary part')\n+                    if len(sizes) == signal_ndim:\n+                        test_one_sample(res)\n+                    else:\n+                        nb = res.size(0)\n+                        test_idxs = torch.LongTensor(min(nb, 4)).random_(nb)\n+                        for test_idx in test_idxs.tolist():\n+                            test_one_sample(res[test_idx])\n+                    # compare with C2C\n+                    xc = torch.stack([x, torch.zeros_like(x)], -1)", "path": "test/test_torch.py", "position": 53, "original_position": 53, "commit_id": "0f0d59ae356362438b95c5bccb195be5e283c849", "original_commit_id": "1e3e1fdf253de18864657ebecdf9065ce2f465e1", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "Good, thanks.", "created_at": "2018-03-23T16:23:12Z", "updated_at": "2018-11-23T15:41:03Z", "html_url": "https://github.com/pytorch/pytorch/pull/5856#discussion_r176789290", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/5856", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/176789290"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/5856#discussion_r176789290"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/5856"}}, "body_html": "<p>Good, thanks.</p>", "body_text": "Good, thanks."}