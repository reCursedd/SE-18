{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/406679446", "html_url": "https://github.com/pytorch/pytorch/issues/9468#issuecomment-406679446", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/9468", "id": 406679446, "node_id": "MDEyOklzc3VlQ29tbWVudDQwNjY3OTQ0Ng==", "user": {"login": "t-vi", "id": 20787943, "node_id": "MDQ6VXNlcjIwNzg3OTQz", "avatar_url": "https://avatars2.githubusercontent.com/u/20787943?v=4", "gravatar_id": "", "url": "https://api.github.com/users/t-vi", "html_url": "https://github.com/t-vi", "followers_url": "https://api.github.com/users/t-vi/followers", "following_url": "https://api.github.com/users/t-vi/following{/other_user}", "gists_url": "https://api.github.com/users/t-vi/gists{/gist_id}", "starred_url": "https://api.github.com/users/t-vi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/t-vi/subscriptions", "organizations_url": "https://api.github.com/users/t-vi/orgs", "repos_url": "https://api.github.com/users/t-vi/repos", "events_url": "https://api.github.com/users/t-vi/events{/privacy}", "received_events_url": "https://api.github.com/users/t-vi/received_events", "type": "User", "site_admin": false}, "created_at": "2018-07-20T17:57:04Z", "updated_at": "2018-07-20T17:57:04Z", "author_association": "CONTRIBUTOR", "body_html": "<p>The problem is that the left operand is the default operand to execute the <code>__mul__</code>.<br>\nThe numpy scalar's <code>__mul__</code> will then call the tensor's <code>__array__</code> and that fails (and there isn't a way out).<br>\nThe solution seems to be to set a high <code>__array_priority__</code>, then the scalar (and an array) will call the Tensor's <code>__rmul__</code> instead.<br>\nStandard numpy scalars have a strongly negative priority, standard ndarrays have one of 0.<br>\nSo in case 2:</p>\n<pre><code>tensor.__array_priority__ = 1000\nprint (scalar * tensor)\n</code></pre>\n<p>works!</p>\n<p>I'm happy to send a PR.</p>", "body_text": "The problem is that the left operand is the default operand to execute the __mul__.\nThe numpy scalar's __mul__ will then call the tensor's __array__ and that fails (and there isn't a way out).\nThe solution seems to be to set a high __array_priority__, then the scalar (and an array) will call the Tensor's __rmul__ instead.\nStandard numpy scalars have a strongly negative priority, standard ndarrays have one of 0.\nSo in case 2:\ntensor.__array_priority__ = 1000\nprint (scalar * tensor)\n\nworks!\nI'm happy to send a PR.", "body": "The problem is that the left operand is the default operand to execute the `__mul__`.\r\nThe numpy scalar's `__mul__` will then call the tensor's `__array__` and that fails (and there isn't a way out).\r\nThe solution seems to be to set a high `__array_priority__`, then the scalar (and an array) will call the Tensor's `__rmul__` instead.\r\nStandard numpy scalars have a strongly negative priority, standard ndarrays have one of 0.\r\nSo in case 2:\r\n```\r\ntensor.__array_priority__ = 1000\r\nprint (scalar * tensor)\r\n```\r\nworks!\r\n\r\nI'm happy to send a PR.\r\n"}