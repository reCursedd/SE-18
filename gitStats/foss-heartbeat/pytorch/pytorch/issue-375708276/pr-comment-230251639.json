{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/230251639", "pull_request_review_id": 170947811, "id": 230251639, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMDI1MTYzOQ==", "diff_hunk": "@@ -6,42 +6,55 @@\n #include <ATen/detail/CUDAHooksInterface.h>\n #include <c10/util/Exception.h>\n #include \"c10/util/Optional.h\"\n+#include <c10/detail/DeviceGuardImplInterface.h>\n \n #include <cstddef>\n \n namespace at {\n /// RAII guard that sets a certain default device in its constructor, and\n-/// changes it back to the device that was originally active upon destruction.\n+/// changes it back to the device (for that device type) that was originally\n+/// active upon destruction.\n ///\n-/// The device is always reset to the one that was active at the time of\n-/// construction of the guard. Even if you `set_device` after construction, the\n-/// destructor will still reset the device to the one that was active at\n-/// construction time.\n-struct DeviceGuard {\n-  /// Default constructor, does nothing.\n-  DeviceGuard() = default;\n-\n+/// If the device is changed via this guard to a different one than the\n+/// active one at construction time, this guard will reset it to the one\n+/// that was active at the time of construction of the guard.  WARNING: if\n+/// you change the current device out-of-band, e.g., by directly calling\n+/// cudaSetDevice(), DeviceGuard is NOT guaranteed to reset it upon\n+/// exiting this scope.  The contract required by DeviceGuard is that inner code\n+/// leaves the device in the same state that DeviceGuard set it.  In DEBUG mode,\n+/// we check for this invariant.\n+///\n+/// If a DeviceGuard is constructed without specifying a device type (this\n+/// can occur if you, e.g., pass a nullopt to the constructor), it behaves as if\n+/// it were a no-op \"CPU\" guard; e.g., current_device() reports that the current\n+/// device is kCPU.  This is different from passing Device(kCUDA, -1), which\n+/// says to use the current CUDA device; in this case, we will correctly query\n+/// what the current CUDA device is, but won't change it.\n+class DeviceGuard {\n+public:\n   /// Set the current device to the passed Device.\n   explicit DeviceGuard(Device device) {\n-    set_device(device);\n+    init_device(device);\n   }\n \n-  explicit DeviceGuard(c10::optional<Device> device_opt) {\n+  /// Set the current device to the passed Device, if not nullopt;\n+  /// otherwise do nothing.\n+  explicit DeviceGuard(optional<Device> device_opt) {", "path": "aten/src/ATen/DeviceGuard.h", "position": null, "original_position": 48, "commit_id": "a8e5332de1ad3210b489c0d15b9f62a4097fe8b3", "original_commit_id": "609380985edf2468f10981574f93095161d39583", "user": {"login": "gchanan", "id": 3768583, "node_id": "MDQ6VXNlcjM3Njg1ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3768583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gchanan", "html_url": "https://github.com/gchanan", "followers_url": "https://api.github.com/users/gchanan/followers", "following_url": "https://api.github.com/users/gchanan/following{/other_user}", "gists_url": "https://api.github.com/users/gchanan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gchanan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gchanan/subscriptions", "organizations_url": "https://api.github.com/users/gchanan/orgs", "repos_url": "https://api.github.com/users/gchanan/repos", "events_url": "https://api.github.com/users/gchanan/events{/privacy}", "received_events_url": "https://api.github.com/users/gchanan/received_events", "type": "User", "site_admin": false}, "body": "optional<Device> comes up naturally -- for example it's how we parse Devices from the python arg parser, when passing in None is valid.  It's way nicer to operate directly on that than to write the expressions above.", "created_at": "2018-11-02T01:55:25Z", "updated_at": "2018-11-23T15:54:07Z", "html_url": "https://github.com/pytorch/pytorch/pull/13342#discussion_r230251639", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/13342", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/230251639"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/13342#discussion_r230251639"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/13342"}}, "body_html": "<p>optional comes up naturally -- for example it's how we parse Devices from the python arg parser, when passing in None is valid.  It's way nicer to operate directly on that than to write the expressions above.</p>", "body_text": "optional comes up naturally -- for example it's how we parse Devices from the python arg parser, when passing in None is valid.  It's way nicer to operate directly on that than to write the expressions above.", "in_reply_to_id": 230205302}