{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/231015210", "pull_request_review_id": 171883706, "id": 231015210, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMTAxNTIxMA==", "diff_hunk": "@@ -6,131 +6,180 @@\n #include <ATen/detail/CUDAHooksInterface.h>\n #include <c10/util/Exception.h>\n #include \"c10/util/Optional.h\"\n+#include <c10/detail/DeviceGuardImplInterface.h>\n \n #include <cstddef>\n \n namespace at {\n+\n /// RAII guard that sets a certain default device in its constructor, and\n-/// changes it back to the device that was originally active upon destruction.\n+/// changes it back to the device (for that device type) that was originally\n+/// active upon destruction.\n ///\n-/// The device is always reset to the one that was active at the time of\n-/// construction of the guard. Even if you `set_device` after construction, the\n-/// destructor will still reset the device to the one that was active at\n-/// construction time.\n-struct DeviceGuard {\n-  /// Default constructor, does nothing.\n-  DeviceGuard() = default;\n-\n+/// If a DeviceGuard is constructed without specifying a device type (this can\n+/// occur if you, e.g., pass a nullopt to the constructor), it behaves as if it\n+/// were a no-op \"CPU\" guard; e.g., current_device() reports that the current\n+/// device is kCPU.  This is different from passing Device(kCUDA, -1), which\n+/// says to use the current CUDA device; in this case, we will correctly query\n+/// what the current CUDA device is, won't change it, but WILL reset it\n+/// at the end of DeviceGuard.\n+class DeviceGuard {\n+public:\n   /// Set the current device to the passed Device.\n   explicit DeviceGuard(Device device) {\n-    set_device(device);\n+    init_device(device);\n   }\n \n-  explicit DeviceGuard(c10::optional<Device> device_opt) {\n+  /// Set the current device to the passed Device, if not nullopt;\n+  /// otherwise do nothing.\n+  explicit DeviceGuard(optional<Device> device_opt) {\n     if (device_opt.has_value()) {\n-      set_device(device_opt.value());\n+      init_device(device_opt.value());\n     }\n   }\n \n   /// Sets the current device to the device on which the given tensor is located.\n   explicit DeviceGuard(const Tensor& tensor) {\n-    set_device_from(tensor);\n+    init_device_from(tensor);\n   }\n \n   /// Sets the current device to the device on which the first tensor in the list is\n   /// located. If the list is empty, does nothing.\n   explicit DeviceGuard(const TensorList& tensors) {\n     if (!tensors.empty()) {\n-      set_device_from(tensors.front());\n+      init_device_from(tensors.front());\n     }\n   }\n \n+  /// A constructor for testing; permits explicitly passing in the\n+  /// DeviceGuardImpl.\n+  explicit DeviceGuard(Device device, const detail::DeviceGuardImplInterface* impl) {\n+    init_device(device, impl);\n+  }\n+\n   /// Copy is disallowed.\n   DeviceGuard(const DeviceGuard&) = delete;\n   DeviceGuard& operator=(const DeviceGuard&) = delete;\n \n-  /// Move-constructs this `DeviceGuard` from another `DeviceGuard`. The\n-  /// moved-from `DeviceGuard` is modified such that its destruction has no\n-  /// effect (does not reset the device).\n+  /// Move-constructs this `DeviceGuard` from another `DeviceGuard`.", "path": "aten/src/ATen/DeviceGuard.h", "position": null, "original_position": 76, "commit_id": "a8e5332de1ad3210b489c0d15b9f62a4097fe8b3", "original_commit_id": "a17b2ff1c5b440e20e06e6d2e43a6e8f215c8483", "user": {"login": "dzhulgakov", "id": 17890620, "node_id": "MDQ6VXNlcjE3ODkwNjIw", "avatar_url": "https://avatars2.githubusercontent.com/u/17890620?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dzhulgakov", "html_url": "https://github.com/dzhulgakov", "followers_url": "https://api.github.com/users/dzhulgakov/followers", "following_url": "https://api.github.com/users/dzhulgakov/following{/other_user}", "gists_url": "https://api.github.com/users/dzhulgakov/gists{/gist_id}", "starred_url": "https://api.github.com/users/dzhulgakov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dzhulgakov/subscriptions", "organizations_url": "https://api.github.com/users/dzhulgakov/orgs", "repos_url": "https://api.github.com/users/dzhulgakov/repos", "events_url": "https://api.github.com/users/dzhulgakov/events{/privacy}", "received_events_url": "https://api.github.com/users/dzhulgakov/received_events", "type": "User", "site_admin": false}, "body": "Haha, \"diffusing\" - too much Phabricator (should it be \"diphphusing?\")\r\n\r\nInteresting, took me a while to understand that code :)\r\n\r\nWould `optional::emplace` work? It doesn't require move constructor it seems: https://godbolt.org/z/PYP18V", "created_at": "2018-11-06T07:06:36Z", "updated_at": "2018-11-23T15:54:22Z", "html_url": "https://github.com/pytorch/pytorch/pull/13342#discussion_r231015210", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/13342", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/231015210"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/13342#discussion_r231015210"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/13342"}}, "body_html": "<p>Haha, \"diffusing\" - too much Phabricator (should it be \"diphphusing?\")</p>\n<p>Interesting, took me a while to understand that code :)</p>\n<p>Would <code>optional::emplace</code> work? It doesn't require move constructor it seems: <a href=\"https://godbolt.org/z/PYP18V\" rel=\"nofollow\">https://godbolt.org/z/PYP18V</a></p>", "body_text": "Haha, \"diffusing\" - too much Phabricator (should it be \"diphphusing?\")\nInteresting, took me a while to understand that code :)\nWould optional::emplace work? It doesn't require move constructor it seems: https://godbolt.org/z/PYP18V", "in_reply_to_id": 230913352}