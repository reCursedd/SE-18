{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/230206020", "pull_request_review_id": 170891387, "id": 230206020, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMDIwNjAyMA==", "diff_hunk": "@@ -53,84 +66,91 @@ struct DeviceGuard {\n   /// moved-from `DeviceGuard` is modified such that its destruction has no\n   /// effect (does not reset the device).\n   DeviceGuard(DeviceGuard&& other) noexcept {\n+    // Reuse move assignment implementation\n     *this = std::move(other);\n   }\n \n   /// Move-assigns this `DeviceGuard` from another `DeviceGuard`. The\n   /// moved-from `DeviceGuard` is modified such that its destruction has no\n   /// effect (does not reset the device).\n   DeviceGuard& operator=(DeviceGuard&& other) noexcept {\n-    this->original_index_ = other.original_index_;\n-    this->last_index_ = other.last_index_;\n-    // Set other's original index to the unspecified/default state, so that it\n-    // doesn't also reset the device in its constructor.\n-    other.original_index_ = -1;\n+    // We cannot use the default move assignment here.  Quoth the standard:\n+    //\n+    //    constexpr optional( optional&& other )\n+    //\n+    //    If other contains a value, then depending on whether *this contains a\n+    //    value, the contained value is either direct-initialized or assigned from\n+    //    *other (2) or std::move(*other) (3). Note that a moved-from optional\n+    //    still contains a value.\n+    //\n+    // Swapping works fine though.\n+    std::swap(this->impl_, other.impl_);\n+    std::swap(this->original_device_, other.original_device_);\n+    std::swap(this->current_device_, other.current_device_);", "path": "aten/src/ATen/DeviceGuard.h", "position": null, "original_position": 99, "commit_id": "a8e5332de1ad3210b489c0d15b9f62a4097fe8b3", "original_commit_id": "609380985edf2468f10981574f93095161d39583", "user": {"login": "smessmer", "id": 2373925, "node_id": "MDQ6VXNlcjIzNzM5MjU=", "avatar_url": "https://avatars3.githubusercontent.com/u/2373925?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smessmer", "html_url": "https://github.com/smessmer", "followers_url": "https://api.github.com/users/smessmer/followers", "following_url": "https://api.github.com/users/smessmer/following{/other_user}", "gists_url": "https://api.github.com/users/smessmer/gists{/gist_id}", "starred_url": "https://api.github.com/users/smessmer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smessmer/subscriptions", "organizations_url": "https://api.github.com/users/smessmer/orgs", "repos_url": "https://api.github.com/users/smessmer/repos", "events_url": "https://api.github.com/users/smessmer/events{/privacy}", "received_events_url": "https://api.github.com/users/smessmer/received_events", "type": "User", "site_admin": false}, "body": "If `other` continues to live on after the move assignment, this can cause weird behavior. In RAII classes, move assignment and construction should always make sure to set `other` to a clearly defined `uninitialized` state.", "created_at": "2018-11-01T21:29:31Z", "updated_at": "2018-11-23T15:54:06Z", "html_url": "https://github.com/pytorch/pytorch/pull/13342#discussion_r230206020", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/13342", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/230206020"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/13342#discussion_r230206020"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/13342"}}, "body_html": "<p>If <code>other</code> continues to live on after the move assignment, this can cause weird behavior. In RAII classes, move assignment and construction should always make sure to set <code>other</code> to a clearly defined <code>uninitialized</code> state.</p>", "body_text": "If other continues to live on after the move assignment, this can cause weird behavior. In RAII classes, move assignment and construction should always make sure to set other to a clearly defined uninitialized state."}