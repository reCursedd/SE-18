{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/231191840", "pull_request_review_id": 172106437, "id": 231191840, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMTE5MTg0MA==", "diff_hunk": "@@ -6,131 +6,180 @@\n #include <ATen/detail/CUDAHooksInterface.h>\n #include <c10/util/Exception.h>\n #include \"c10/util/Optional.h\"\n+#include <c10/detail/DeviceGuardImplInterface.h>\n \n #include <cstddef>\n \n namespace at {\n+\n /// RAII guard that sets a certain default device in its constructor, and\n-/// changes it back to the device that was originally active upon destruction.\n+/// changes it back to the device (for that device type) that was originally\n+/// active upon destruction.\n ///\n-/// The device is always reset to the one that was active at the time of\n-/// construction of the guard. Even if you `set_device` after construction, the\n-/// destructor will still reset the device to the one that was active at\n-/// construction time.\n-struct DeviceGuard {\n-  /// Default constructor, does nothing.\n-  DeviceGuard() = default;\n-\n+/// If a DeviceGuard is constructed without specifying a device type (this can\n+/// occur if you, e.g., pass a nullopt to the constructor), it behaves as if it\n+/// were a no-op \"CPU\" guard; e.g., current_device() reports that the current\n+/// device is kCPU.  This is different from passing Device(kCUDA, -1), which\n+/// says to use the current CUDA device; in this case, we will correctly query\n+/// what the current CUDA device is, won't change it, but WILL reset it\n+/// at the end of DeviceGuard.\n+class DeviceGuard {\n+public:\n   /// Set the current device to the passed Device.\n   explicit DeviceGuard(Device device) {\n-    set_device(device);\n+    init_device(device);\n   }\n \n-  explicit DeviceGuard(c10::optional<Device> device_opt) {\n+  /// Set the current device to the passed Device, if not nullopt;\n+  /// otherwise do nothing.\n+  explicit DeviceGuard(optional<Device> device_opt) {\n     if (device_opt.has_value()) {\n-      set_device(device_opt.value());\n+      init_device(device_opt.value());\n     }\n   }\n \n   /// Sets the current device to the device on which the given tensor is located.\n   explicit DeviceGuard(const Tensor& tensor) {\n-    set_device_from(tensor);\n+    init_device_from(tensor);\n   }\n \n   /// Sets the current device to the device on which the first tensor in the list is\n   /// located. If the list is empty, does nothing.\n   explicit DeviceGuard(const TensorList& tensors) {\n     if (!tensors.empty()) {\n-      set_device_from(tensors.front());\n+      init_device_from(tensors.front());\n     }\n   }\n \n+  /// A constructor for testing; permits explicitly passing in the\n+  /// DeviceGuardImpl.\n+  explicit DeviceGuard(Device device, const detail::DeviceGuardImplInterface* impl) {\n+    init_device(device, impl);\n+  }\n+\n   /// Copy is disallowed.\n   DeviceGuard(const DeviceGuard&) = delete;\n   DeviceGuard& operator=(const DeviceGuard&) = delete;\n \n-  /// Move-constructs this `DeviceGuard` from another `DeviceGuard`. The\n-  /// moved-from `DeviceGuard` is modified such that its destruction has no\n-  /// effect (does not reset the device).\n+  /// Move-constructs this `DeviceGuard` from another `DeviceGuard`.", "path": "aten/src/ATen/DeviceGuard.h", "position": null, "original_position": 76, "commit_id": "a8e5332de1ad3210b489c0d15b9f62a4097fe8b3", "original_commit_id": "a17b2ff1c5b440e20e06e6d2e43a6e8f215c8483", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "OK, so there's another use of the move constructor which is harder to remove in C++11. It looks like this:\r\n\r\n```\r\n  at::cuda::CUDAGuard createStreamGuard() {\r\n    at::cuda::CUDAGuard guard;\r\n    for (const auto& stream : streams_) {\r\n      guard.set_stream(stream);\r\n    }\r\n    return guard;\r\n  }\r\n```\r\n\r\nNRVO will often eliminate the move constructor call here, but it is not mandatory (even in C++17) and so we are required to show that there is a move constructor.", "created_at": "2018-11-06T16:23:34Z", "updated_at": "2018-11-23T15:54:23Z", "html_url": "https://github.com/pytorch/pytorch/pull/13342#discussion_r231191840", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/13342", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/231191840"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/13342#discussion_r231191840"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/13342"}}, "body_html": "<p>OK, so there's another use of the move constructor which is harder to remove in C++11. It looks like this:</p>\n<pre><code>  at::cuda::CUDAGuard createStreamGuard() {\n    at::cuda::CUDAGuard guard;\n    for (const auto&amp; stream : streams_) {\n      guard.set_stream(stream);\n    }\n    return guard;\n  }\n</code></pre>\n<p>NRVO will often eliminate the move constructor call here, but it is not mandatory (even in C++17) and so we are required to show that there is a move constructor.</p>", "body_text": "OK, so there's another use of the move constructor which is harder to remove in C++11. It looks like this:\n  at::cuda::CUDAGuard createStreamGuard() {\n    at::cuda::CUDAGuard guard;\n    for (const auto& stream : streams_) {\n      guard.set_stream(stream);\n    }\n    return guard;\n  }\n\nNRVO will often eliminate the move constructor call here, but it is not mandatory (even in C++17) and so we are required to show that there is a move constructor.", "in_reply_to_id": 230913352}