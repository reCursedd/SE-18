{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/230511686", "pull_request_review_id": 171275776, "id": 230511686, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMDUxMTY4Ng==", "diff_hunk": "@@ -0,0 +1,137 @@\n+#pragma once\n+\n+namespace c10 {\n+namespace detail {\n+\n+/**\n+ * InlineDeviceGuard is a helper class for implementing device type\n+ * specialized DeviceGuards, e.g., CUDAGuard.  The key idea is that\n+ * it is templated over DeviceGuardImpl, allowing it to devirtualize\n+ * all calls.  The intention is that InlineDeviceGuard<CUDAGuardImpl>\n+ * should be *as* efficient as straight line code that calls\n+ * cudaGetDevice-cudaSetDevice.  InlineDeviceGuard can only be used\n+ * from code that links against the relevant backend library, e.g.,\n+ * CUDA library.\n+ *\n+ * Users of InlineDeviceGuard may also find that the interface is also\n+ * more expressive.  This is because DeviceGuard cannot handle\n+ * set_device() in a reasonable way (consider what happens if you\n+ * set_device for CUDA, and then set_device for HIP!)  Because\n+ * InlineDeviceGuard is specialized for a specific device type,\n+ * it doesn't have to worry about this API situation.  (In principle,\n+ * you might find a use for this interface even without devirtualization;\n+ * but a better solution in such cases is to move your code into a compilation\n+ * unit that links against, e.g., CUDA).\n+ *\n+ * This code assumes that there are no non-bracketed calls to the underlying\n+ * setDevice() within the body of the guard.\n+ */\n+template <typename T>\n+class InlineDeviceGuard {\n+public:\n+  /// Default constructor, reads the current device so that\n+  /// we may reset the device to the current device on destruction.\n+  explicit InlineDeviceGuard() {\n+    initialize();\n+  }\n+\n+  /// Set the current device to the passed Device.\n+  explicit InlineDeviceGuard(Device device) {\n+    set_device(device); // In Optimizer We Trust", "path": "c10/detail/InlineDeviceGuard.h", "position": null, "original_position": 40, "commit_id": "a8e5332de1ad3210b489c0d15b9f62a4097fe8b3", "original_commit_id": "b737de021ff5c174cfdf4cb8a8f7a8b8b50bd095", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "Thanks. I got this (and others) after writing a full set of tests for the DeviceGuard :)", "created_at": "2018-11-02T21:19:54Z", "updated_at": "2018-11-23T15:54:13Z", "html_url": "https://github.com/pytorch/pytorch/pull/13342#discussion_r230511686", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/13342", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/230511686"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/13342#discussion_r230511686"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/13342"}}, "body_html": "<p>Thanks. I got this (and others) after writing a full set of tests for the DeviceGuard :)</p>", "body_text": "Thanks. I got this (and others) after writing a full set of tests for the DeviceGuard :)", "in_reply_to_id": 230491859}