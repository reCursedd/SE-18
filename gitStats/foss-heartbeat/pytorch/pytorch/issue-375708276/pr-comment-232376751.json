{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/232376751", "pull_request_review_id": 173569479, "id": 232376751, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMjM3Njc1MQ==", "diff_hunk": "@@ -0,0 +1,180 @@\n+#pragma once\n+\n+#include <c10/detail/InlineDeviceGuard.h>\n+\n+namespace c10 {\n+namespace detail {\n+\n+/**\n+ * A StreamGuard is an RAII class that changes the current device\n+ * to the device corresponding to some stream, and changes the\n+ * default stream on that device to be this stream.\n+ *\n+ * InlineStreamGuard is a helper class for implementing StreamGuards.\n+ * See InlineDeviceGuard for guidance on how to use this class.\n+ */\n+template <typename T>\n+class InlineStreamGuard : private InlineDeviceGuard<T> {\n+public:\n+  /// No default constructor, see Note [Omitted default constructor from RAII]\n+  explicit InlineStreamGuard() = delete;\n+\n+  /// Set the current device to the device associated with the passed stream,\n+  /// and set the current stream on that device to the passed stream.\n+  explicit InlineStreamGuard(Stream stream)\n+    : InlineDeviceGuard<T>(stream.device())\n+    , original_stream_(this->impl_.exchangeStream(stream))\n+    , current_stream_(stream)\n+    {}\n+\n+  /// This constructor exists purely for testing\n+  template <typename U=T, typename=typename std::enable_if<std::is_same<U, VirtualGuardImpl>::value>::type>\n+  explicit InlineStreamGuard(Stream stream, const DeviceGuardImplInterface* impl)\n+    : InlineDeviceGuard<T>(stream.device(), impl ? impl : getDeviceGuardImpl(stream.device_type()))\n+    , original_stream_(this->impl_.exchangeStream(stream))\n+    , current_stream_(stream)\n+    {}\n+\n+  /// Copy is disallowed\n+  InlineStreamGuard(const InlineStreamGuard<T>&) = delete;\n+  InlineStreamGuard<T>& operator=(const InlineStreamGuard<T>&) = delete;\n+\n+  /// Move is disallowed, as StreamGuard does not have an uninitialized state,\n+  /// which is required for moves on types with nontrivial destructors.\n+  InlineStreamGuard(InlineStreamGuard<T>&& other) = delete;\n+  InlineStreamGuard& operator=(InlineStreamGuard<T>&& other) = delete;\n+\n+  ~InlineStreamGuard() {\n+    this->impl_.exchangeStream(original_stream_);\n+  }\n+\n+  /// Resets the currently set stream to the original stream and\n+  /// the currently set device to the original device.  Then,\n+  /// set the current device to the device associated with the passed stream,\n+  /// and set the current stream on that device to the passed stream.\n+  ///\n+  /// NOTE: this implementation may skip some stream/device setting if\n+  /// it can prove that it is unnecessary.\n+  ///\n+  /// WARNING: reset_stream does NOT preserve previously set streams on\n+  /// different devices.  If you need to set streams on multiple devices\n+  /// on CUDA, use CUDAMultiStreamGuard instead.\n+  void reset_stream(Stream stream) {\n+    // TODO: make a version that takes an impl argument.  Unfortunately,\n+    // that will require SFINAE because impl is only valid for the\n+    // VirtualGuardImpl specialization.\n+    if (stream.device() == this->original_device()) {", "path": "c10/detail/InlineStreamGuard.h", "position": null, "original_position": 66, "commit_id": "a8e5332de1ad3210b489c0d15b9f62a4097fe8b3", "original_commit_id": "29f12d9a4d4005aef81151ff4caf1478519824cd", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "This line is the bug.", "created_at": "2018-11-09T20:00:50Z", "updated_at": "2018-11-23T15:54:36Z", "html_url": "https://github.com/pytorch/pytorch/pull/13342#discussion_r232376751", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/13342", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/232376751"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/13342#discussion_r232376751"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/13342"}}, "body_html": "<p>This line is the bug.</p>", "body_text": "This line is the bug."}