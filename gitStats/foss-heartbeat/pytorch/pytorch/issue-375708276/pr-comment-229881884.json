{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/229881884", "pull_request_review_id": 170489734, "id": 229881884, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyOTg4MTg4NA==", "diff_hunk": "@@ -0,0 +1,110 @@\n+#pragma once\n+\n+#include <c10/Device.h>\n+#include <c10/DeviceType.h>\n+#include <c10/Stream.h>\n+\n+// Just for C10_ANONYMOUS_VARIABLE\n+#include <c10/util/Registry.h>\n+\n+#include <atomic>\n+\n+namespace c10 {\n+namespace detail {\n+\n+/**\n+ * DeviceGuardImplInterface represents the virtual interface which provides\n+ * functionality to provide an RAII class for device and stream switching,\n+ * via DeviceGuard.  Every distinct device type, e.g., CUDA and HIP, is\n+ * expected to implement and register an implementation of this interface.\n+ * All classes which inherit from DeviceGuardImplInterface should be declared\n+ * 'final'.\n+ *\n+ * This class exists because we provide a unified interface for performing\n+ * device guards via DeviceGuard, but we cannot assume that we have actually\n+ * compiled against the, e.g., CUDA library, which actually implements\n+ * this guard functionality.  In this case, a dynamic dispatch is required\n+ * to cross the library boundary.\n+ *\n+ * If possible, you should directly use implementations of this interface;\n+ * those uses will be devirtualized.\n+ */\n+struct C10_API DeviceGuardImplInterface {\n+  /**\n+   * Return the type of device managed by this guard implementation.\n+   */\n+  virtual DeviceType type() const = 0;\n+\n+  /**\n+   * Set the current device to Device, and return the previous Device.\n+   */\n+  virtual Device exchangeDevice(Device) const = 0;\n+\n+  /**\n+   * Get the current device.\n+   */\n+  virtual Device getDevice() const = 0;\n+\n+  /**\n+   * Set the current device to Device.\n+   */\n+  virtual void setDevice(Device) const = 0;\n+\n+  /**\n+   * Set the current device to Device, without checking for errors\n+   * (so, e.g., this can be called from a destructor).\n+   */\n+  virtual void uncheckedSetDevice(Device) const noexcept = 0;\n+\n+  /**\n+   * Set a stream to be the thread local current stream for its device.\n+   * Return the previous stream for that device. You are NOT required\n+   * to set the current device to match the device of this stream.\n+   */\n+  virtual Stream exchangeStream(Stream) const noexcept = 0;\n+\n+  /**\n+   * Intended use of this class is to leak the DeviceGuardImpl at program end.\n+   * So you better not call the destructor, buster!\n+   */\n+  virtual ~DeviceGuardImplInterface() {}\n+};\n+\n+// The registry is NON-owning.  Each stored pointer is std::atomic so", "path": "c10/detail/DeviceGuardImplInterface.h", "position": 90, "original_position": 73, "commit_id": "a8e5332de1ad3210b489c0d15b9f62a4097fe8b3", "original_commit_id": "5d83889e42c467ac606edd58c46ef8a7be96878b", "user": {"login": "dzhulgakov", "id": 17890620, "node_id": "MDQ6VXNlcjE3ODkwNjIw", "avatar_url": "https://avatars2.githubusercontent.com/u/17890620?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dzhulgakov", "html_url": "https://github.com/dzhulgakov", "followers_url": "https://api.github.com/users/dzhulgakov/followers", "following_url": "https://api.github.com/users/dzhulgakov/following{/other_user}", "gists_url": "https://api.github.com/users/dzhulgakov/gists{/gist_id}", "starred_url": "https://api.github.com/users/dzhulgakov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dzhulgakov/subscriptions", "organizations_url": "https://api.github.com/users/dzhulgakov/orgs", "repos_url": "https://api.github.com/users/dzhulgakov/repos", "events_url": "https://api.github.com/users/dzhulgakov/events{/privacy}", "received_events_url": "https://api.github.com/users/dzhulgakov/received_events", "type": "User", "site_admin": false}, "body": "just go with unsync implementation - it's an extremely common pattern and it works just fine. If you dlopen() in parallel to running - it's your problem :)", "created_at": "2018-10-31T21:57:14Z", "updated_at": "2018-11-23T15:53:57Z", "html_url": "https://github.com/pytorch/pytorch/pull/13342#discussion_r229881884", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/13342", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/229881884"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/13342#discussion_r229881884"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/13342"}}, "body_html": "<p>just go with unsync implementation - it's an extremely common pattern and it works just fine. If you dlopen() in parallel to running - it's your problem :)</p>", "body_text": "just go with unsync implementation - it's an extremely common pattern and it works just fine. If you dlopen() in parallel to running - it's your problem :)"}