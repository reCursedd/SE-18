{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/230208234", "pull_request_review_id": 170895072, "id": 230208234, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMDIwODIzNA==", "diff_hunk": "@@ -6,42 +6,55 @@\n #include <ATen/detail/CUDAHooksInterface.h>\n #include <c10/util/Exception.h>\n #include \"c10/util/Optional.h\"\n+#include <c10/detail/DeviceGuardImplInterface.h>\n \n #include <cstddef>\n \n namespace at {\n /// RAII guard that sets a certain default device in its constructor, and\n-/// changes it back to the device that was originally active upon destruction.\n+/// changes it back to the device (for that device type) that was originally\n+/// active upon destruction.\n ///\n-/// The device is always reset to the one that was active at the time of\n-/// construction of the guard. Even if you `set_device` after construction, the\n-/// destructor will still reset the device to the one that was active at\n-/// construction time.\n-struct DeviceGuard {\n-  /// Default constructor, does nothing.\n-  DeviceGuard() = default;\n-\n+/// If the device is changed via this guard to a different one than the\n+/// active one at construction time, this guard will reset it to the one\n+/// that was active at the time of construction of the guard.  WARNING: if\n+/// you change the current device out-of-band, e.g., by directly calling\n+/// cudaSetDevice(), DeviceGuard is NOT guaranteed to reset it upon\n+/// exiting this scope.  The contract required by DeviceGuard is that inner code\n+/// leaves the device in the same state that DeviceGuard set it.  In DEBUG mode,\n+/// we check for this invariant.\n+///\n+/// If a DeviceGuard is constructed without specifying a device type (this\n+/// can occur if you, e.g., pass a nullopt to the constructor), it behaves as if\n+/// it were a no-op \"CPU\" guard; e.g., current_device() reports that the current\n+/// device is kCPU.  This is different from passing Device(kCUDA, -1), which\n+/// says to use the current CUDA device; in this case, we will correctly query\n+/// what the current CUDA device is, but won't change it.\n+class DeviceGuard {\n+public:\n   /// Set the current device to the passed Device.\n   explicit DeviceGuard(Device device) {\n-    set_device(device);\n+    init_device(device);\n   }\n \n-  explicit DeviceGuard(c10::optional<Device> device_opt) {\n+  /// Set the current device to the passed Device, if not nullopt;\n+  /// otherwise do nothing.\n+  explicit DeviceGuard(optional<Device> device_opt) {", "path": "aten/src/ATen/DeviceGuard.h", "position": null, "original_position": 48, "commit_id": "a8e5332de1ad3210b489c0d15b9f62a4097fe8b3", "original_commit_id": "609380985edf2468f10981574f93095161d39583", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "It seems to be pretty convenient. Here's the problem: you want to stack allocate. Let's say you don't have this constructor. You write this:\r\n\r\n```\r\nif (device_opt.has_value()) {\r\n  DeviceGuard guard(device_opt.value());\r\n  // Wait uh....\r\n}\r\nthe_actual_compute();\r\n```\r\n\r\nThe DeviceGuard needs to be promoted to the top level somehow. You used to be able to do this with `set_device`, but on DeviceGuard `set_device` is hugely problematic for other reasons.\r\n\r\nI suppose you could write it like this using the move constructor.\r\n\r\n```\r\nDeviceGuard guard;\r\nif (device_opt.has_value()) {\r\n  guard = DeviceGuard(device_opt.value());\r\n}\r\n```\r\n\r\n...actually, I think this is totally broken right now, in the current implementation.", "created_at": "2018-11-01T21:37:37Z", "updated_at": "2018-11-23T15:54:06Z", "html_url": "https://github.com/pytorch/pytorch/pull/13342#discussion_r230208234", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/13342", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/230208234"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/13342#discussion_r230208234"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/13342"}}, "body_html": "<p>It seems to be pretty convenient. Here's the problem: you want to stack allocate. Let's say you don't have this constructor. You write this:</p>\n<pre><code>if (device_opt.has_value()) {\n  DeviceGuard guard(device_opt.value());\n  // Wait uh....\n}\nthe_actual_compute();\n</code></pre>\n<p>The DeviceGuard needs to be promoted to the top level somehow. You used to be able to do this with <code>set_device</code>, but on DeviceGuard <code>set_device</code> is hugely problematic for other reasons.</p>\n<p>I suppose you could write it like this using the move constructor.</p>\n<pre><code>DeviceGuard guard;\nif (device_opt.has_value()) {\n  guard = DeviceGuard(device_opt.value());\n}\n</code></pre>\n<p>...actually, I think this is totally broken right now, in the current implementation.</p>", "body_text": "It seems to be pretty convenient. Here's the problem: you want to stack allocate. Let's say you don't have this constructor. You write this:\nif (device_opt.has_value()) {\n  DeviceGuard guard(device_opt.value());\n  // Wait uh....\n}\nthe_actual_compute();\n\nThe DeviceGuard needs to be promoted to the top level somehow. You used to be able to do this with set_device, but on DeviceGuard set_device is hugely problematic for other reasons.\nI suppose you could write it like this using the move constructor.\nDeviceGuard guard;\nif (device_opt.has_value()) {\n  guard = DeviceGuard(device_opt.value());\n}\n\n...actually, I think this is totally broken right now, in the current implementation.", "in_reply_to_id": 230205302}