{"url": "https://api.github.com/repos/pytorch/pytorch/issues/2887", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/2887/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/2887/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/2887/events", "html_url": "https://github.com/pytorch/pytorch/pull/2887", "id": 261355216, "node_id": "MDExOlB1bGxSZXF1ZXN0MTQzNjc1OTI4", "number": 2887, "title": "Cleanup for 'prob_dist' in multinomial function (fixes #1584)", "user": {"login": "MicaelCarvalho", "id": 17184992, "node_id": "MDQ6VXNlcjE3MTg0OTky", "avatar_url": "https://avatars3.githubusercontent.com/u/17184992?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MicaelCarvalho", "html_url": "https://github.com/MicaelCarvalho", "followers_url": "https://api.github.com/users/MicaelCarvalho/followers", "following_url": "https://api.github.com/users/MicaelCarvalho/following{/other_user}", "gists_url": "https://api.github.com/users/MicaelCarvalho/gists{/gist_id}", "starred_url": "https://api.github.com/users/MicaelCarvalho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MicaelCarvalho/subscriptions", "organizations_url": "https://api.github.com/users/MicaelCarvalho/orgs", "repos_url": "https://api.github.com/users/MicaelCarvalho/repos", "events_url": "https://api.github.com/users/MicaelCarvalho/events{/privacy}", "received_events_url": "https://api.github.com/users/MicaelCarvalho/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-09-28T15:10:57Z", "updated_at": "2017-09-28T16:07:18Z", "closed_at": "2017-09-28T16:07:07Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/2887", "html_url": "https://github.com/pytorch/pytorch/pull/2887", "diff_url": "https://github.com/pytorch/pytorch/pull/2887.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/2887.patch"}, "body_html": "<p>The multinomial function is not correctly cleaning up the resize applied on prob_dist. This problem occurs in three different situations, and can be reproduced with the following code:</p>\n<pre><code>import torch\nweights = torch.Tensor([0, 10, 3, 0])\nprint(weights) #\u00a0[torch.FloatTensor of size 4]\ntorch.multinomial(weights, 5)\nprint(weights) # [torch.FloatTensor of size 1x4]\n\nweights = torch.Tensor([0, 10, 3, 0])\nprint(weights) # [torch.FloatTensor of size 4]\ntorch.multinomial(weights, 0)\nprint(weights) # [torch.FloatTensor of size 1x4]\n\nweights = torch.Tensor([0, 0, 0, 0])\nprint(weights) # [torch.FloatTensor of size 4]\ntorch.multinomial(weights, 2)\nprint(weights) # [torch.FloatTensor of size 1x4]\n</code></pre>\n<p>This PR fixes the problem for all three cases.</p>", "body_text": "The multinomial function is not correctly cleaning up the resize applied on prob_dist. This problem occurs in three different situations, and can be reproduced with the following code:\nimport torch\nweights = torch.Tensor([0, 10, 3, 0])\nprint(weights) #\u00a0[torch.FloatTensor of size 4]\ntorch.multinomial(weights, 5)\nprint(weights) # [torch.FloatTensor of size 1x4]\n\nweights = torch.Tensor([0, 10, 3, 0])\nprint(weights) # [torch.FloatTensor of size 4]\ntorch.multinomial(weights, 0)\nprint(weights) # [torch.FloatTensor of size 1x4]\n\nweights = torch.Tensor([0, 0, 0, 0])\nprint(weights) # [torch.FloatTensor of size 4]\ntorch.multinomial(weights, 2)\nprint(weights) # [torch.FloatTensor of size 1x4]\n\nThis PR fixes the problem for all three cases.", "body": "The multinomial function is not correctly cleaning up the resize applied on prob_dist. This problem occurs in three different situations, and can be reproduced with the following code:\r\n```\r\nimport torch\r\nweights = torch.Tensor([0, 10, 3, 0])\r\nprint(weights) #\u00a0[torch.FloatTensor of size 4]\r\ntorch.multinomial(weights, 5)\r\nprint(weights) # [torch.FloatTensor of size 1x4]\r\n\r\nweights = torch.Tensor([0, 10, 3, 0])\r\nprint(weights) # [torch.FloatTensor of size 4]\r\ntorch.multinomial(weights, 0)\r\nprint(weights) # [torch.FloatTensor of size 1x4]\r\n\r\nweights = torch.Tensor([0, 0, 0, 0])\r\nprint(weights) # [torch.FloatTensor of size 4]\r\ntorch.multinomial(weights, 2)\r\nprint(weights) # [torch.FloatTensor of size 1x4]\r\n```\r\n\r\nThis PR fixes the problem for all three cases."}