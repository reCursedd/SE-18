{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/382647437", "html_url": "https://github.com/pytorch/pytorch/issues/3982#issuecomment-382647437", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/3982", "id": 382647437, "node_id": "MDEyOklzc3VlQ29tbWVudDM4MjY0NzQzNw==", "user": {"login": "ghrua", "id": 16100433, "node_id": "MDQ6VXNlcjE2MTAwNDMz", "avatar_url": "https://avatars3.githubusercontent.com/u/16100433?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ghrua", "html_url": "https://github.com/ghrua", "followers_url": "https://api.github.com/users/ghrua/followers", "following_url": "https://api.github.com/users/ghrua/following{/other_user}", "gists_url": "https://api.github.com/users/ghrua/gists{/gist_id}", "starred_url": "https://api.github.com/users/ghrua/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ghrua/subscriptions", "organizations_url": "https://api.github.com/users/ghrua/orgs", "repos_url": "https://api.github.com/users/ghrua/repos", "events_url": "https://api.github.com/users/ghrua/events{/privacy}", "received_events_url": "https://api.github.com/users/ghrua/received_events", "type": "User", "site_admin": false}, "created_at": "2018-04-19T08:04:57Z", "updated_at": "2018-04-19T08:05:42Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=26163807\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/RohitKeshari\">@RohitKeshari</a> If you want to get get the top k elements sorted by its index, you could do this:</p>\n<pre><code>In [1]: import torch\nIn [2]: x = torch.rand(3, 5)\nIn [3]: val, idx = torch.topk(x, k=3, dim=-1, largest=False) # k smallest elements\nIn [4]: sorted_idx, new_idx = torch.sort(idx, dim=-1)\nIn [5]: val = torch.gather(val, dim=-1, index=new_idx)\nIn [6]: x\nOut[6]:\n\n 0.1868  0.7928  0.5790  0.4628  0.2190\n 0.1212  0.9903  0.4272  0.1662  0.8974\n 0.1360  0.2362  0.5849  0.5407  0.6900\n[torch.FloatTensor of size 3x5]\n\nIn [7]: val\nOut[7]:\n\n 0.1868  0.4628  0.2190\n 0.1212  0.4272  0.1662\n 0.1360  0.2362  0.5407\n[torch.FloatTensor of size 3x3]\n\nIn [8]: sorted_idx\nOut[8]:\n\n 0  3  4\n 0  2  3\n 0  1  3\n[torch.LongTensor of size 3x3]\n\n</code></pre>", "body_text": "@RohitKeshari If you want to get get the top k elements sorted by its index, you could do this:\nIn [1]: import torch\nIn [2]: x = torch.rand(3, 5)\nIn [3]: val, idx = torch.topk(x, k=3, dim=-1, largest=False) # k smallest elements\nIn [4]: sorted_idx, new_idx = torch.sort(idx, dim=-1)\nIn [5]: val = torch.gather(val, dim=-1, index=new_idx)\nIn [6]: x\nOut[6]:\n\n 0.1868  0.7928  0.5790  0.4628  0.2190\n 0.1212  0.9903  0.4272  0.1662  0.8974\n 0.1360  0.2362  0.5849  0.5407  0.6900\n[torch.FloatTensor of size 3x5]\n\nIn [7]: val\nOut[7]:\n\n 0.1868  0.4628  0.2190\n 0.1212  0.4272  0.1662\n 0.1360  0.2362  0.5407\n[torch.FloatTensor of size 3x3]\n\nIn [8]: sorted_idx\nOut[8]:\n\n 0  3  4\n 0  2  3\n 0  1  3\n[torch.LongTensor of size 3x3]", "body": "@RohitKeshari If you want to get get the top k elements sorted by its index, you could do this:\r\n\r\n```\r\nIn [1]: import torch\r\nIn [2]: x = torch.rand(3, 5)\r\nIn [3]: val, idx = torch.topk(x, k=3, dim=-1, largest=False) # k smallest elements\r\nIn [4]: sorted_idx, new_idx = torch.sort(idx, dim=-1)\r\nIn [5]: val = torch.gather(val, dim=-1, index=new_idx)\r\nIn [6]: x\r\nOut[6]:\r\n\r\n 0.1868  0.7928  0.5790  0.4628  0.2190\r\n 0.1212  0.9903  0.4272  0.1662  0.8974\r\n 0.1360  0.2362  0.5849  0.5407  0.6900\r\n[torch.FloatTensor of size 3x5]\r\n\r\nIn [7]: val\r\nOut[7]:\r\n\r\n 0.1868  0.4628  0.2190\r\n 0.1212  0.4272  0.1662\r\n 0.1360  0.2362  0.5407\r\n[torch.FloatTensor of size 3x3]\r\n\r\nIn [8]: sorted_idx\r\nOut[8]:\r\n\r\n 0  3  4\r\n 0  2  3\r\n 0  1  3\r\n[torch.LongTensor of size 3x3]\r\n\r\n```"}