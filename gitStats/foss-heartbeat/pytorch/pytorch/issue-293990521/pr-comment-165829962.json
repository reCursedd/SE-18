{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/165829962", "pull_request_review_id": 93831744, "id": 165829962, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NTgyOTk2Mg==", "diff_hunk": "@@ -39,79 +43,50 @@ struct edge_hasher {\n   }\n };\n \n-// TODO: separate is_executable and next_functions\n-// State used to create \"backward\" functions\n-struct FunctionFlags {\n-  // Roughly speaking, is_executable corresponds to requires_grad.\n-  // It's true if any input requires grad and gradient calculation is enabled.\n-  // See http://pytorch.org/docs/notes/autograd.html for more details.\n-  bool is_executable = false;\n-  // What functions take the output of this function as input.\n-  // There is one function per output of this function.\n-  function_list next_functions;\n-};\n-\n namespace detail {\n-\n-// Why can't we just combine the set_variable and set_tensor variants\n-// into one set of overloads?  The problem is Variable is convertible\n-// to both Tensor and ArrayRef<Variable>, making the overload ambiguous.\n-\n-// Invariant: this function unconditionally calls f.next_functions.emplace_back\n-inline void set_function_flags(FunctionFlags& f, const Variable& var) {\n-  if (!var.defined()) {\n-    f.next_functions.emplace_back();\n-    return;\n-  }\n-  f.is_executable |= var.requires_grad();\n-  if (var.grad_fn()) {\n-    f.next_functions.emplace_back(var.grad_fn(), var.output_nr());\n-  } else if (var.requires_grad()) {\n-    f.next_functions.emplace_back(var.grad_accumulator(), 0);\n-  } else {\n-    f.next_functions.emplace_back();\n+inline edge_type make_edge(const Variable &variable) {\n+  if (variable.defined()) {\n+    if (variable.grad_fn() != nullptr) {\n+      return {variable.grad_fn(), variable.output_nr()};\n+    } else if (variable.requires_grad()) {\n+      return {variable.grad_accumulator(), 0};\n+    }\n   }\n+  return {nullptr, 0};\n }\n \n-struct SetFunctionFlags : IterArgs<SetFunctionFlags> {\n-  FunctionFlags& out;\n-  SetFunctionFlags(FunctionFlags& out) : out(out) {}\n-  using IterArgs<SetFunctionFlags>::operator();\n-  void operator()(const Variable& v) { set_function_flags(out, v); }\n-};\n-\n-struct SetTensorFunctionFlags : IterArgs<SetTensorFunctionFlags> {\n-  FunctionFlags& out;\n-  SetTensorFunctionFlags(FunctionFlags& out) : out(out) {}\n-  using IterArgs<SetTensorFunctionFlags>::operator();\n-  void operator()(const Tensor& t) {\n-    set_function_flags(out, static_cast<const Variable&>(t));\n+struct MakeNextFunctionList : IterArgs<MakeNextFunctionList> {\n+  function_list next_functions;\n+  using IterArgs<MakeNextFunctionList>::operator();\n+  void operator()(const Variable& variable) {\n+    next_functions.push_back(make_edge(variable));\n   }\n };\n+} // namespace detail\n \n+// Returns true if any of the variables in the list require a gradient.\n+inline bool any_variable_requires_grad(const variable_list& variables) {\n+  return std::any_of(\n+      variables.begin(), variables.end(), [](const Variable& variable) {\n+        return variable.requires_grad();\n+      });\n+}\n \n-} // namespace detail\n+template <typename... Variables>\n+function_list get_next_functions(Variables&&... variables) {\n+  if (!GradMode::is_enabled()) return {};\n+  detail::MakeNextFunctionList make;\n+  make.apply(std::forward<Variables>(variables)...);\n+  return std::move(make.next_functions);", "path": "torch/csrc/autograd/function.h", "position": 109, "original_position": 109, "commit_id": "e4aeb31decc4c3f77f519318e16e08f86a717fb3", "original_commit_id": "e4aeb31decc4c3f77f519318e16e08f86a717fb3", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Won\u2019t the move prevent RVO?", "created_at": "2018-02-04T00:47:26Z", "updated_at": "2018-11-23T15:39:05Z", "html_url": "https://github.com/pytorch/pytorch/pull/5018#discussion_r165829962", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/5018", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/165829962"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/5018#discussion_r165829962"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/5018"}}, "body_html": "<p>Won\u2019t the move prevent RVO?</p>", "body_text": "Won\u2019t the move prevent RVO?"}