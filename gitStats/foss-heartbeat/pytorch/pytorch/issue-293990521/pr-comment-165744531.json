{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/165744531", "pull_request_review_id": 93738667, "id": 165744531, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NTc0NDUzMQ==", "diff_hunk": "@@ -39,79 +40,42 @@ struct edge_hasher {\n   }\n };\n \n-// TODO: separate is_executable and next_functions\n-// State used to create \"backward\" functions\n-struct FunctionFlags {\n-  // Roughly speaking, is_executable corresponds to requires_grad.\n-  // It's true if any input requires grad and gradient calculation is enabled.\n-  // See http://pytorch.org/docs/notes/autograd.html for more details.\n-  bool is_executable = false;\n-  // What functions take the output of this function as input.\n-  // There is one function per output of this function.\n-  function_list next_functions;\n-};\n-\n namespace detail {\n-\n-// Why can't we just combine the set_variable and set_tensor variants\n-// into one set of overloads?  The problem is Variable is convertible\n-// to both Tensor and ArrayRef<Variable>, making the overload ambiguous.\n-\n-// Invariant: this function unconditionally calls f.next_functions.emplace_back\n-inline void set_function_flags(FunctionFlags& f, const Variable& var) {\n-  if (!var.defined()) {\n-    f.next_functions.emplace_back();\n-    return;\n-  }\n-  f.is_executable |= var.requires_grad();\n-  if (var.grad_fn()) {\n-    f.next_functions.emplace_back(var.grad_fn(), var.output_nr());\n-  } else if (var.requires_grad()) {\n-    f.next_functions.emplace_back(var.grad_accumulator(), 0);\n-  } else {\n-    f.next_functions.emplace_back();\n+inline edge_type make_edge(const Variable &variable) {\n+  if (variable.defined()) {\n+    if (variable.grad_fn() != nullptr) {\n+      return {variable.grad_fn(), variable.output_nr()};\n+    } else if (variable.requires_grad()) {\n+      return {variable.grad_accumulator(), 0};\n+    }\n   }\n+  return {};", "path": "torch/csrc/autograd/function.h", "position": null, "original_position": 51, "commit_id": "e4aeb31decc4c3f77f519318e16e08f86a717fb3", "original_commit_id": "80b62747b9c001f291ea017d232977e1cf8777cf", "user": {"login": "goldsborough", "id": 6429851, "node_id": "MDQ6VXNlcjY0Mjk4NTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/6429851?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goldsborough", "html_url": "https://github.com/goldsborough", "followers_url": "https://api.github.com/users/goldsborough/followers", "following_url": "https://api.github.com/users/goldsborough/following{/other_user}", "gists_url": "https://api.github.com/users/goldsborough/gists{/gist_id}", "starred_url": "https://api.github.com/users/goldsborough/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goldsborough/subscriptions", "organizations_url": "https://api.github.com/users/goldsborough/orgs", "repos_url": "https://api.github.com/users/goldsborough/repos", "events_url": "https://api.github.com/users/goldsborough/events{/privacy}", "received_events_url": "https://api.github.com/users/goldsborough/received_events", "type": "User", "site_admin": false}, "body": "Looking at [cppreference.com](http://en.cppreference.com/w/cpp/utility/pair/pair), it says the default constructor will value-initialize its members, so yes.", "created_at": "2018-02-02T19:57:20Z", "updated_at": "2018-11-23T15:39:02Z", "html_url": "https://github.com/pytorch/pytorch/pull/5018#discussion_r165744531", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/5018", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/165744531"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/5018#discussion_r165744531"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/5018"}}, "body_html": "<p>Looking at <a href=\"http://en.cppreference.com/w/cpp/utility/pair/pair\" rel=\"nofollow\">cppreference.com</a>, it says the default constructor will value-initialize its members, so yes.</p>", "body_text": "Looking at cppreference.com, it says the default constructor will value-initialize its members, so yes.", "in_reply_to_id": 165739608}