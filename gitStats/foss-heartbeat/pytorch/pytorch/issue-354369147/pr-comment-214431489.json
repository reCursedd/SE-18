{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/214431489", "pull_request_review_id": 151495041, "id": 214431489, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNDQzMTQ4OQ==", "diff_hunk": "@@ -5263,8 +5263,7 @@ def test_affine_grid(self):\n             self.assertEqual(out_cpu, out_cuda)\n             self.assertEqual(input_cpu.grad, input_gpu.grad)\n \n-    @unittest.skipIf((not TEST_NUMPY) or (not TEST_SCIPY) or (scipy.__version__ < '1.0.0'),\n-                     \"Scipy v1.0 and/or numpy not found\")\n+    @unittest.skipIf((not TEST_NUMPY) or (not TEST_SCIPY), \"Scipy and/or numpy not found\")", "path": "test/test_nn.py", "position": null, "original_position": 6, "commit_id": "90d765c296bbdf3480b57e102cb4a6780ae4783b", "original_commit_id": "0db8b11a7791d5c6e0efd99535d6b852cca32bff", "user": {"login": "weiyangfb", "id": 38509346, "node_id": "MDQ6VXNlcjM4NTA5MzQ2", "avatar_url": "https://avatars1.githubusercontent.com/u/38509346?v=4", "gravatar_id": "", "url": "https://api.github.com/users/weiyangfb", "html_url": "https://github.com/weiyangfb", "followers_url": "https://api.github.com/users/weiyangfb/followers", "following_url": "https://api.github.com/users/weiyangfb/following{/other_user}", "gists_url": "https://api.github.com/users/weiyangfb/gists{/gist_id}", "starred_url": "https://api.github.com/users/weiyangfb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/weiyangfb/subscriptions", "organizations_url": "https://api.github.com/users/weiyangfb/orgs", "repos_url": "https://api.github.com/users/weiyangfb/repos", "events_url": "https://api.github.com/users/weiyangfb/events{/privacy}", "received_events_url": "https://api.github.com/users/weiyangfb/received_events", "type": "User", "site_admin": false}, "body": "oh, I see what you meant. Yeah, I agree decorator will look much nicer here and no compromise on efficiency. I meant a decorator like [this](https://github.com/pytorch/pytorch/blob/b14f2e899c92f541644e393b2513aa60aeb9196f/test/common.py#L111-L120) that run the function first and error out will be slow", "created_at": "2018-08-31T17:57:00Z", "updated_at": "2018-11-23T15:50:27Z", "html_url": "https://github.com/pytorch/pytorch/pull/10903#discussion_r214431489", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/10903", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/214431489"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/10903#discussion_r214431489"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/10903"}}, "body_html": "<p>oh, I see what you meant. Yeah, I agree decorator will look much nicer here and no compromise on efficiency. I meant a decorator like <a href=\"https://github.com/pytorch/pytorch/blob/b14f2e899c92f541644e393b2513aa60aeb9196f/test/common.py#L111-L120\">this</a> that run the function first and error out will be slow</p>", "body_text": "oh, I see what you meant. Yeah, I agree decorator will look much nicer here and no compromise on efficiency. I meant a decorator like this that run the function first and error out will be slow", "in_reply_to_id": 213032338}