{"url": "https://api.github.com/repos/pytorch/pytorch/issues/8284", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/8284/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/8284/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/8284/events", "html_url": "https://github.com/pytorch/pytorch/issues/8284", "id": 330708106, "node_id": "MDU6SXNzdWUzMzA3MDgxMDY=", "number": 8284, "title": "Error in variance/stdv calculations", "user": {"login": "gpleiss", "id": 824157, "node_id": "MDQ6VXNlcjgyNDE1Nw==", "avatar_url": "https://avatars0.githubusercontent.com/u/824157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gpleiss", "html_url": "https://github.com/gpleiss", "followers_url": "https://api.github.com/users/gpleiss/followers", "following_url": "https://api.github.com/users/gpleiss/following{/other_user}", "gists_url": "https://api.github.com/users/gpleiss/gists{/gist_id}", "starred_url": "https://api.github.com/users/gpleiss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gpleiss/subscriptions", "organizations_url": "https://api.github.com/users/gpleiss/orgs", "repos_url": "https://api.github.com/users/gpleiss/repos", "events_url": "https://api.github.com/users/gpleiss/events{/privacy}", "received_events_url": "https://api.github.com/users/gpleiss/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-06-08T15:40:00Z", "updated_at": "2018-06-08T16:02:44Z", "closed_at": "2018-06-08T16:02:44Z", "author_association": "NONE", "body_html": "<p>Variance and standard deviation calculations appear to be incorrect, and disagree with numpy var/stdv calculations.</p>\n<h3>Example</h3>\n<div class=\"highlight highlight-source-python\"><pre>vec <span class=\"pl-k\">=</span> torch.Tensor([<span class=\"pl-c1\">3</span>, <span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">2</span>])  <span class=\"pl-c\"><span class=\"pl-c\">#</span> Variance should be 1.25</span>\n<span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Torch:<span class=\"pl-pds\">'</span></span>, vec.var().item())  <span class=\"pl-c\"><span class=\"pl-c\">#</span> 1.6667</span>\n<span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Numpy:<span class=\"pl-pds\">'</span></span> vec.numpy().var())  <span class=\"pl-c\"><span class=\"pl-c\">#</span> 1.25 - the correct answer</span></pre></div>\n<p>This error similarly exists for standard deviation calculations. I have reproduced this error on mac and windows.</p>\n<h3>What's going on</h3>\n<p>My hypothesis is that the normalization constant is off by 1. For example, computing</p>\n<div class=\"highlight highlight-source-python\"><pre>vec.var().mul(vec.numel() <span class=\"pl-k\">-</span> <span class=\"pl-c1\">1</span>).div(vec.numel()).item()  <span class=\"pl-c\"><span class=\"pl-c\">#</span> 1.25</span></pre></div>\n<p>gives the correct answer.</p>\n<p>Because it's off by one, it doesn't make much of a difference for very big tensors.</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-c1\">print</span>(vec.repeat(<span class=\"pl-c1\">100000</span>).var().item())  <span class=\"pl-c\"><span class=\"pl-c\">#</span> 1.25000</span></pre></div>", "body_text": "Variance and standard deviation calculations appear to be incorrect, and disagree with numpy var/stdv calculations.\nExample\nvec = torch.Tensor([3, 0, 1, 2])  # Variance should be 1.25\nprint('Torch:', vec.var().item())  # 1.6667\nprint('Numpy:' vec.numpy().var())  # 1.25 - the correct answer\nThis error similarly exists for standard deviation calculations. I have reproduced this error on mac and windows.\nWhat's going on\nMy hypothesis is that the normalization constant is off by 1. For example, computing\nvec.var().mul(vec.numel() - 1).div(vec.numel()).item()  # 1.25\ngives the correct answer.\nBecause it's off by one, it doesn't make much of a difference for very big tensors.\nprint(vec.repeat(100000).var().item())  # 1.25000", "body": "Variance and standard deviation calculations appear to be incorrect, and disagree with numpy var/stdv calculations.\r\n\r\n### Example\r\n\r\n```python\r\nvec = torch.Tensor([3, 0, 1, 2])  # Variance should be 1.25\r\nprint('Torch:', vec.var().item())  # 1.6667\r\nprint('Numpy:' vec.numpy().var())  # 1.25 - the correct answer\r\n```\r\n\r\nThis error similarly exists for standard deviation calculations. I have reproduced this error on mac and windows.\r\n\r\n### What's going on\r\n\r\nMy hypothesis is that the normalization constant is off by 1. For example, computing\r\n```python\r\nvec.var().mul(vec.numel() - 1).div(vec.numel()).item()  # 1.25\r\n```\r\ngives the correct answer.\r\n\r\nBecause it's off by one, it doesn't make much of a difference for very big tensors.\r\n\r\n```python\r\nprint(vec.repeat(100000).var().item())  # 1.25000\r\n```"}