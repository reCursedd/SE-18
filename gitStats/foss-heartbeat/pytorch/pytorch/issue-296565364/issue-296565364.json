{"url": "https://api.github.com/repos/pytorch/pytorch/issues/5201", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/5201/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/5201/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/5201/events", "html_url": "https://github.com/pytorch/pytorch/issues/5201", "id": 296565364, "node_id": "MDU6SXNzdWUyOTY1NjUzNjQ=", "number": 5201, "title": "[feature request] torch.where to support Tensors and python scalars", "user": {"login": "vadimkantorov", "id": 1041752, "node_id": "MDQ6VXNlcjEwNDE3NTI=", "avatar_url": "https://avatars0.githubusercontent.com/u/1041752?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vadimkantorov", "html_url": "https://github.com/vadimkantorov", "followers_url": "https://api.github.com/users/vadimkantorov/followers", "following_url": "https://api.github.com/users/vadimkantorov/following{/other_user}", "gists_url": "https://api.github.com/users/vadimkantorov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vadimkantorov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vadimkantorov/subscriptions", "organizations_url": "https://api.github.com/users/vadimkantorov/orgs", "repos_url": "https://api.github.com/users/vadimkantorov/repos", "events_url": "https://api.github.com/users/vadimkantorov/events{/privacy}", "received_events_url": "https://api.github.com/users/vadimkantorov/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-02-12T23:46:32Z", "updated_at": "2018-04-12T11:52:49Z", "closed_at": "2018-02-13T00:03:46Z", "author_association": "NONE", "body_html": "<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> torch\na <span class=\"pl-k\">=</span> torch.Tensor([<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">3</span>, <span class=\"pl-c1\">0</span>])\n\ntorch.where(a <span class=\"pl-k\">&gt;=</span> <span class=\"pl-c1\">2</span>, a, <span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>)\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> TypeError: descriptor 'where' requires a 'torch._C._VariableBase' object but received a 'torch.FloatTensor'</span>\n\ntorch.where(torch.autograd.Variable(a <span class=\"pl-k\">&gt;=</span> <span class=\"pl-c1\">2</span>), torch.autograd.Variable(a), <span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>)\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> TypeError: where(): argument 'other' (position 2) must be Variable, not int</span>\n\ntorch.where(torch.autograd.Variable(a <span class=\"pl-k\">&gt;=</span> <span class=\"pl-c1\">2</span>), torch.autograd.Variable(a), torch.autograd.Variable(torch.Tensor([<span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>])))\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> works: Variable containing:</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span>-1</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> 2</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> 3</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span>-1</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span>[torch.FloatTensor of size (4,)]</span></pre></div>\n<p>This is convenient for readable threshold expressions (even when the right function exists in functional, sometimes <code>torch.where</code> is more readable). In addition <code>functional.threshold</code> is not implemented for <code>cuda.LongTensor</code> while <code>torch.where</code> works.</p>\n<p>This is on master.</p>", "body_text": "import torch\na = torch.Tensor([1, 2, 3, 0])\n\ntorch.where(a >= 2, a, -1)\n# TypeError: descriptor 'where' requires a 'torch._C._VariableBase' object but received a 'torch.FloatTensor'\n\ntorch.where(torch.autograd.Variable(a >= 2), torch.autograd.Variable(a), -1)\n# TypeError: where(): argument 'other' (position 2) must be Variable, not int\n\ntorch.where(torch.autograd.Variable(a >= 2), torch.autograd.Variable(a), torch.autograd.Variable(torch.Tensor([-1])))\n# works: Variable containing:\n#-1\n# 2\n# 3\n#-1\n#[torch.FloatTensor of size (4,)]\nThis is convenient for readable threshold expressions (even when the right function exists in functional, sometimes torch.where is more readable). In addition functional.threshold is not implemented for cuda.LongTensor while torch.where works.\nThis is on master.", "body": "```python\r\nimport torch\r\na = torch.Tensor([1, 2, 3, 0])\r\n\r\ntorch.where(a >= 2, a, -1)\r\n# TypeError: descriptor 'where' requires a 'torch._C._VariableBase' object but received a 'torch.FloatTensor'\r\n\r\ntorch.where(torch.autograd.Variable(a >= 2), torch.autograd.Variable(a), -1)\r\n# TypeError: where(): argument 'other' (position 2) must be Variable, not int\r\n\r\ntorch.where(torch.autograd.Variable(a >= 2), torch.autograd.Variable(a), torch.autograd.Variable(torch.Tensor([-1])))\r\n# works: Variable containing:\r\n#-1\r\n# 2\r\n# 3\r\n#-1\r\n#[torch.FloatTensor of size (4,)]\r\n```\r\n\r\nThis is convenient for readable threshold expressions (even when the right function exists in functional, sometimes `torch.where` is more readable). In addition `functional.threshold` is not implemented for `cuda.LongTensor` while `torch.where` works.\r\n\r\nThis is on master."}