{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/171562220", "pull_request_review_id": 100433945, "id": 171562220, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MTU2MjIyMA==", "diff_hunk": "@@ -700,13 +734,82 @@ def test_all_gather_multigpu(self):\n         self._test_all_gather_multigpu_helper(group, group_id, rank,\n                                               rankToGPUMapping)\n \n+    # END TO END TEST FOR DISTRIBUTEDDATAPARALLEL\n+    def _test_DDP_helper(self, model, input_var, target, loss):\n+        model.train()\n+        output = model(input_var)\n+        l = loss(output, target)\n+        l.backward()\n+\n+    @unittest.skipIf(BACKEND != 'nccl' and BACKEND != 'gloo',\n+                     \"Only Nccl & Gloo backend support DistributedDataParallel\")\n+    @skip_if_no_cuda_distributed\n+    @skip_if_no_multigpu\n+    def test_DistributedDataParallel(self):\n+        # Run a simple end to end DDP model, use result of single node model\n+        # as baseline\n+        group, group_id, rank = self._init_global_test()\n+        rankToGPUMapping = self._init_multigpu_helper()\n+\n+        class Net(nn.Module):\n+            def __init__(self):\n+                super(Net, self).__init__()\n+                self.features = nn.Linear(2, 4, bias=False)\n+\n+            def forward(self, x):\n+                x = self.features(x)\n+                return x\n+\n+        # cpu training setup\n+        model = Net()\n+        model_cpu = copy.deepcopy(model)\n+\n+        # single gpu training setup\n+        model_gpu = copy.deepcopy(model)\n+        gpu_subset = list(rankToGPUMapping[rank])\n+        model_gpu.cuda(gpu_subset[0])\n+\n+        # DDP training setup\n+        model_DDP = copy.deepcopy(model)\n+        model_DDP.cuda(gpu_subset[0])\n+        model_DDP = nn.parallel.DistributedDataParallel(model_DDP, device_ids=gpu_subset)\n+\n+        # batch_size for DDP should be divisible by #GPU per node.\n+        batch_size = len(gpu_subset) * int(WORLD_SIZE)\n+        input_cpu = torch.randn(batch_size, 1, 2)\n+        target = torch.randn(batch_size, 1, 4)\n+        loss = nn.MSELoss()\n+\n+        # cpu training\n+        self._test_DDP_helper(model_cpu,\n+                              Variable(input_cpu, requires_grad=True),\n+                              Variable(target),\n+                              loss)\n+\n+        # single gpu training\n+        self._test_DDP_helper(model_gpu,\n+                              Variable(input_cpu.cuda(gpu_subset[0]), requires_grad=True),\n+                              Variable(target.cuda(gpu_subset[0], non_blocking=True)),\n+                              loss)\n+\n+        # DDP training, DDP scatters subsets of input_cpu to nodes/GPUs\n+        self._test_DDP_helper(model_DDP,\n+                              Variable(input_cpu, requires_grad=True),\n+                              Variable(target.cuda(gpu_subset[0], non_blocking=True)),\n+                              loss)\n+\n+        self.assertEqual(model_cpu.features.weight.grad, model_gpu.features.weight.grad)", "path": "test/test_distributed.py", "position": null, "original_position": 249, "commit_id": "faf76399a94b5799ccbae85ef202ed3cd35d7c3c", "original_commit_id": "184e8ec65572fec42f296affb4ecadcb800887fa", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Why would we want this? It's a test for DDP, not a CPU vs CUDA test for regular models. I'd propose that we remove the `model_cpu` entirely and only focus on CUDA vs DDP", "created_at": "2018-03-01T13:47:57Z", "updated_at": "2018-11-23T15:40:12Z", "html_url": "https://github.com/pytorch/pytorch/pull/5182#discussion_r171562220", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/5182", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/171562220"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/5182#discussion_r171562220"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/5182"}}, "body_html": "<p>Why would we want this? It's a test for DDP, not a CPU vs CUDA test for regular models. I'd propose that we remove the <code>model_cpu</code> entirely and only focus on CUDA vs DDP</p>", "body_text": "Why would we want this? It's a test for DDP, not a CPU vs CUDA test for regular models. I'd propose that we remove the model_cpu entirely and only focus on CUDA vs DDP"}