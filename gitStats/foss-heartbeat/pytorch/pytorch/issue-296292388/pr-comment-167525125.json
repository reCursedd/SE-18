{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/167525125", "pull_request_review_id": 95754039, "id": 167525125, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NzUyNTEyNQ==", "diff_hunk": "@@ -700,6 +702,46 @@ def test_all_gather_multigpu(self):\n         self._test_all_gather_multigpu_helper(group, group_id, rank,\n                                               rankToGPUMapping)\n \n+    # END TO END TEST FOR DISTRIBUTEDDATAPARALLEL\n+    def _test_DDP_helper(self, model, input_var, target, loss, optimizer):\n+        model.train()\n+        output = model(input_var)\n+        l = loss(output, target)\n+        l.backward()\n+        optimizer.step()\n+        return model\n+\n+    @unittest.skipIf(BACKEND != 'nccl' and BACKEND != 'gloo',\n+                     \"Only Nccl & Gloo backend support DistributedDataParallel\")\n+    def test_DistributedDataParallel(self):\n+        group, group_id, rank = self._init_global_test()\n+        os.environ['NCCL_MAX_NRINGS'] = '1'\n+\n+        class Net(nn.Module):\n+            def __init__(self):\n+                super(Net, self).__init__()\n+                self.features = nn.Linear(2, 4, bias=False)\n+\n+            def forward(self, x):\n+                x = self.features(x)\n+                return x\n+\n+        model = Net()\n+        model.cuda()\n+\n+        nGPUs = torch.cuda.device_count()\n+        input_var = Variable(torch.randn(nGPUs, 1, 2), requires_grad=True).cuda()\n+        target = Variable(torch.randn(nGPUs, 1, 4)).cuda()", "path": "test/test_distributed.py", "position": null, "original_position": 43, "commit_id": "faf76399a94b5799ccbae85ef202ed3cd35d7c3c", "original_commit_id": "edd720737da867dcd37609f433ee76d4f8562269", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Put `.cuda()` inside `Variable` (call it on a tensor). Otherwise this Var won't be a leaf and won't get gradient", "created_at": "2018-02-12T11:14:59Z", "updated_at": "2018-11-23T15:39:28Z", "html_url": "https://github.com/pytorch/pytorch/pull/5182#discussion_r167525125", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/5182", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/167525125"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/5182#discussion_r167525125"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/5182"}}, "body_html": "<p>Put <code>.cuda()</code> inside <code>Variable</code> (call it on a tensor). Otherwise this Var won't be a leaf and won't get gradient</p>", "body_text": "Put .cuda() inside Variable (call it on a tensor). Otherwise this Var won't be a leaf and won't get gradient"}