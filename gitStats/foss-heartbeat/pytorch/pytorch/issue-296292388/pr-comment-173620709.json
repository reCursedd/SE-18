{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/173620709", "pull_request_review_id": 102849477, "id": 173620709, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MzYyMDcwOQ==", "diff_hunk": "@@ -700,13 +747,89 @@ def test_all_gather_multigpu(self):\n         self._test_all_gather_multigpu_helper(group, group_id, rank,\n                                               rankToGPUMapping)\n \n+    # END TO END TEST FOR DISTRIBUTEDDATAPARALLEL\n+    def _test_DDP_helper(self, model, input_var, target, loss):\n+        model.train()\n+        output = model(input_var)\n+        l = loss(output, target)\n+        l.backward()\n+\n+    @unittest.skipIf(BACKEND != 'nccl' and BACKEND != 'gloo',\n+                     \"Only Nccl & Gloo backend support DistributedDataParallel\")\n+    @skip_if_no_cuda_distributed\n+    @skip_if_no_multigpu\n+    def test_DistributedDataParallel(self):\n+        # Run a simple end to end DDP model, use result of single node model\n+        # as baseline\n+        group, group_id, rank = self._init_global_test()\n+        rankToGPUMapping = self._init_multigpu_helper()\n+\n+        class Net(nn.Module):\n+            def __init__(self):\n+                super(Net, self).__init__()\n+                self.fc1 = nn.Linear(2, 10, bias=False)\n+                self.fc2 = nn.Linear(10, 50, bias=False)\n+                self.fc3 = nn.Linear(50, 4, bias=False)\n+                self.relu = nn.ReLU()\n+\n+            def forward(self, x):\n+                x = self.relu(self.fc1(x))\n+                x = self.relu(self.fc2(x))\n+                x = self.fc3(x)\n+                return F.softmax(x, dim=1)\n+\n+        # cpu training setup\n+        model = Net()\n+\n+        # single gpu training setup\n+        model_gpu = copy.deepcopy(model)\n+        gpu_subset = list(rankToGPUMapping[rank])\n+        model_gpu.cuda(gpu_subset[0])\n+\n+        # DDP training setup\n+        model_DDP = copy.deepcopy(model)\n+        model_DDP.cuda(gpu_subset[0])\n+        model_DDP = nn.parallel.DistributedDataParallel(model_DDP, device_ids=gpu_subset)\n+        optimizer = optim.SGD(model_DDP.parameters(), lr=1e-2)\n+        optimizer.zero_grad()\n+\n+        # batch_size for DDP should be divisible by #GPU per node.\n+        batch_size = len(gpu_subset) * int(WORLD_SIZE)\n+        input_cpu = torch.randn(batch_size, 2)\n+        target = torch.randn(batch_size, 4)\n+        loss = nn.MSELoss()\n+\n+        # single gpu training\n+        self._test_DDP_helper(model_gpu,\n+                              input_cpu.cuda(gpu_subset[0]),\n+                              target.cuda(gpu_subset[0]),\n+                              loss)\n+\n+        # DDP training, DDP scatters subsets of input_cpu to nodes/GPUs\n+        self._test_DDP_helper(model_DDP,\n+                              input_cpu[rank * len(gpu_subset):(rank + 1) * len(gpu_subset)],\n+                              target[rank * len(gpu_subset):(rank + 1) * len(gpu_subset)].cuda(gpu_subset[0]),\n+                              loss)\n+\n+        for layer_gpu, layer_DDP in zip(model_gpu.modules(), model_DDP.module.modules()):\n+            if isinstance(layer_gpu, nn.Linear):\n+                self.assertEqual(layer_gpu.weight.grad, layer_DDP.weight.grad)\n+\n+        # Run SGD and second iteration to shake out errors\n+        optimizer.step()\n+        self._test_DDP_helper(model_DDP,\n+                              input_cpu,\n+                              target.cuda(gpu_subset[0]),\n+                              loss)\n+", "path": "test/test_distributed.py", "position": 279, "original_position": 279, "commit_id": "faf76399a94b5799ccbae85ef202ed3cd35d7c3c", "original_commit_id": "faf76399a94b5799ccbae85ef202ed3cd35d7c3c", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "We're not checking that the grads match after the second iteration \ud83d\ude15 That's important", "created_at": "2018-03-10T12:16:34Z", "updated_at": "2018-11-23T15:40:34Z", "html_url": "https://github.com/pytorch/pytorch/pull/5182#discussion_r173620709", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/5182", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/173620709"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/5182#discussion_r173620709"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/5182"}}, "body_html": "<p>We're not checking that the grads match after the second iteration <g-emoji class=\"g-emoji\" alias=\"confused\" fallback-src=\"https://assets-cdn.github.com/images/icons/emoji/unicode/1f615.png\">\ud83d\ude15</g-emoji> That's important</p>", "body_text": "We're not checking that the grads match after the second iteration \ud83d\ude15 That's important"}