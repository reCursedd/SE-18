{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/298773632", "html_url": "https://github.com/pytorch/pytorch/issues/1407#issuecomment-298773632", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/1407", "id": 298773632, "node_id": "MDEyOklzc3VlQ29tbWVudDI5ODc3MzYzMg==", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "created_at": "2017-05-02T21:58:08Z", "updated_at": "2017-05-02T21:58:08Z", "author_association": "MEMBER", "body_html": "<p>A simple hack that would allow you to get what you want:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">cell</span>(<span class=\"pl-smi\">input</span>, <span class=\"pl-smi\">hidden</span>, <span class=\"pl-smi\">_weight</span>):\n    weight <span class=\"pl-k\">=</span> _weight.view(_weight.size()) <span class=\"pl-c\"><span class=\"pl-c\">#</span> or any cheap op in here (just to create a graph node)</span>\n    weight.register_hook(<span class=\"pl-k\">lambda</span> <span class=\"pl-smi\">grad</span>: <span class=\"pl-c1\">print</span>(grad)) <span class=\"pl-c\"><span class=\"pl-c\">#</span> this will be called only for a single time step</span>\n    <span class=\"pl-k\">return</span> weight.mm(<span class=\"pl-c1\">input</span>) <span class=\"pl-k\">+</span> weight.mm(hidden) <span class=\"pl-c\"><span class=\"pl-c\">#</span> your code goes here</span></pre></div>\n<p>You could also use <code>torch.autograd.grad</code>, but it would be slow to compute the backward <code>num_timesteps</code> times. I'm not sure how could we add support for such things in autograd - backend treats a Variable as a single value used to compute the output, and I think what you want to compute isn't well defined mathematically (it's not <code>dL/dW</code>).</p>", "body_text": "A simple hack that would allow you to get what you want:\ndef cell(input, hidden, _weight):\n    weight = _weight.view(_weight.size()) # or any cheap op in here (just to create a graph node)\n    weight.register_hook(lambda grad: print(grad)) # this will be called only for a single time step\n    return weight.mm(input) + weight.mm(hidden) # your code goes here\nYou could also use torch.autograd.grad, but it would be slow to compute the backward num_timesteps times. I'm not sure how could we add support for such things in autograd - backend treats a Variable as a single value used to compute the output, and I think what you want to compute isn't well defined mathematically (it's not dL/dW).", "body": "A simple hack that would allow you to get what you want:\r\n```python\r\ndef cell(input, hidden, _weight):\r\n    weight = _weight.view(_weight.size()) # or any cheap op in here (just to create a graph node)\r\n    weight.register_hook(lambda grad: print(grad)) # this will be called only for a single time step\r\n    return weight.mm(input) + weight.mm(hidden) # your code goes here\r\n```\r\n\r\nYou could also use `torch.autograd.grad`, but it would be slow to compute the backward `num_timesteps` times. I'm not sure how could we add support for such things in autograd - backend treats a Variable as a single value used to compute the output, and I think what you want to compute isn't well defined mathematically (it's not `dL/dW`)."}