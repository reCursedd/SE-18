{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/132820363", "pull_request_review_id": 55946133, "id": 132820363, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMjgyMDM2Mw==", "diff_hunk": "@@ -102,3 +102,44 @@ def backward(ctx, grad_output, grad_LU=None):\n         grad_b, _ = torch.gesv(grad_output, a.t())\n         grad_a = -torch.mm(grad_b, X.t())\n         return grad_b, grad_a\n+\n+class Potrf(Function):\n+    \"\"\"\n+    cf. Iain Murray (2016); arXiv 1602.07527\n+    \"\"\"\n+\n+    @staticmethod\n+    def forward(ctx, a, upper=True):\n+        ctx.upper = upper\n+        fact = torch.potrf(a, upper)\n+        ctx.save_for_backward(fact)\n+        return fact\n+\n+    @staticmethod\n+    def Phi(A):\n+        \"\"\"\n+        Return lower triangle of A and halve the diagonal.\n+        \"\"\"\n+        B = A.tril()\n+        for i in range(B.size(0)):\n+            B[i, i] = B[i, i] * 0.5\n+        return B\n+\n+    @staticmethod\n+    def backward(ctx, grad_output):\n+        L, = ctx.saved_variables\n+\n+        if ctx.upper:\n+            L = L.t()\n+            grad_output = grad_output.t()\n+\n+        # make sure not to double-count variation, since\n+        # only half of output matrix is unique\n+        Lbar = grad_output.tril()\n+\n+        P = Potrf.Phi(torch.mm(L.t(), Lbar))\n+        S = torch.gesv(P + P.t(), L.t())[0]\n+        S = torch.gesv(S.t(), L.t())[0]", "path": "torch/autograd/_functions/linalg.py", "position": null, "original_position": 41, "commit_id": "160059ffaca10d45457d65028f5f626efb5f9fbc", "original_commit_id": "75aaab6716e412e963aa29e73ff3addf2c8e321a", "user": {"login": "pavanky", "id": 364829, "node_id": "MDQ6VXNlcjM2NDgyOQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/364829?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pavanky", "html_url": "https://github.com/pavanky", "followers_url": "https://api.github.com/users/pavanky/followers", "following_url": "https://api.github.com/users/pavanky/following{/other_user}", "gists_url": "https://api.github.com/users/pavanky/gists{/gist_id}", "starred_url": "https://api.github.com/users/pavanky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pavanky/subscriptions", "organizations_url": "https://api.github.com/users/pavanky/orgs", "repos_url": "https://api.github.com/users/pavanky/repos", "events_url": "https://api.github.com/users/pavanky/events{/privacy}", "received_events_url": "https://api.github.com/users/pavanky/received_events", "type": "User", "site_admin": false}, "body": "Wouldn't it be more efficient to use btriact on `L.t()` and call `btrisolve` twice instead of gesv. ?\r\nhttp://pytorch.org/docs/master/torch.html#torch.btrisolve ", "created_at": "2017-08-12T15:31:28Z", "updated_at": "2018-11-23T15:34:20Z", "html_url": "https://github.com/pytorch/pytorch/pull/2386#discussion_r132820363", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/2386", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/132820363"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/2386#discussion_r132820363"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/2386"}}, "body_html": "<p>Wouldn't it be more efficient to use btriact on <code>L.t()</code> and call <code>btrisolve</code> twice instead of gesv. ?<br>\n<a href=\"http://pytorch.org/docs/master/torch.html#torch.btrisolve\" rel=\"nofollow\">http://pytorch.org/docs/master/torch.html#torch.btrisolve</a></p>", "body_text": "Wouldn't it be more efficient to use btriact on L.t() and call btrisolve twice instead of gesv. ?\nhttp://pytorch.org/docs/master/torch.html#torch.btrisolve"}