{"url": "https://api.github.com/repos/pytorch/pytorch/issues/9756", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/9756/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/9756/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/9756/events", "html_url": "https://github.com/pytorch/pytorch/issues/9756", "id": 344016023, "node_id": "MDU6SXNzdWUzNDQwMTYwMjM=", "number": 9756, "title": "torch.bincount errors on empty input", "user": {"login": "davidbau", "id": 3458792, "node_id": "MDQ6VXNlcjM0NTg3OTI=", "avatar_url": "https://avatars0.githubusercontent.com/u/3458792?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidbau", "html_url": "https://github.com/davidbau", "followers_url": "https://api.github.com/users/davidbau/followers", "following_url": "https://api.github.com/users/davidbau/following{/other_user}", "gists_url": "https://api.github.com/users/davidbau/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidbau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidbau/subscriptions", "organizations_url": "https://api.github.com/users/davidbau/orgs", "repos_url": "https://api.github.com/users/davidbau/repos", "events_url": "https://api.github.com/users/davidbau/events{/privacy}", "received_events_url": "https://api.github.com/users/davidbau/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-07-24T12:30:51Z", "updated_at": "2018-08-09T19:42:06Z", "closed_at": "2018-08-09T19:42:06Z", "author_association": "NONE", "body_html": "<h2>Issue description</h2>\n<p><code>torch.bincount</code> gives an error when given an empty tensor, rather than just returning zero counts like <code>numpy.bincount</code>.  Trips up edge cases when counting filtered data.</p>\n<h2>Code example</h2>\n<pre><code>&gt;&gt;&gt; import torch, numpy\n&gt;&gt;&gt; numpy.bincount([1]), numpy.bincount([]), numpy.bincount([], minlength=10)\n(array([0, 1]), array([], dtype=int64), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]))\n\n&gt;&gt;&gt; torch.bincount(torch.LongTensor([]))\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nRuntimeError: bincount only supports 1-d non-negative integral inputs.\n\n&gt;&gt;&gt; torch.bincount(torch.LongTensor([]), minlength=10)\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nRuntimeError: bincount only supports 1-d non-negative integral inputs.\n</code></pre>", "body_text": "Issue description\ntorch.bincount gives an error when given an empty tensor, rather than just returning zero counts like numpy.bincount.  Trips up edge cases when counting filtered data.\nCode example\n>>> import torch, numpy\n>>> numpy.bincount([1]), numpy.bincount([]), numpy.bincount([], minlength=10)\n(array([0, 1]), array([], dtype=int64), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]))\n\n>>> torch.bincount(torch.LongTensor([]))\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nRuntimeError: bincount only supports 1-d non-negative integral inputs.\n\n>>> torch.bincount(torch.LongTensor([]), minlength=10)\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nRuntimeError: bincount only supports 1-d non-negative integral inputs.", "body": "## Issue description\r\n\r\n`torch.bincount` gives an error when given an empty tensor, rather than just returning zero counts like `numpy.bincount`.  Trips up edge cases when counting filtered data.\r\n\r\n## Code example\r\n\r\n```\r\n>>> import torch, numpy\r\n>>> numpy.bincount([1]), numpy.bincount([]), numpy.bincount([], minlength=10)\r\n(array([0, 1]), array([], dtype=int64), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]))\r\n\r\n>>> torch.bincount(torch.LongTensor([]))\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\nRuntimeError: bincount only supports 1-d non-negative integral inputs.\r\n\r\n>>> torch.bincount(torch.LongTensor([]), minlength=10)\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\nRuntimeError: bincount only supports 1-d non-negative integral inputs.\r\n```\r\n"}