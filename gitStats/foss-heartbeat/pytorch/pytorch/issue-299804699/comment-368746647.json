{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/368746647", "html_url": "https://github.com/pytorch/pytorch/issues/5381#issuecomment-368746647", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/5381", "id": 368746647, "node_id": "MDEyOklzc3VlQ29tbWVudDM2ODc0NjY0Nw==", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "created_at": "2018-02-27T04:49:53Z", "updated_at": "2018-02-27T04:50:08Z", "author_association": "CONTRIBUTOR", "body_html": "<p>A few thoughts, then.</p>\n<ul>\n<li>By the same reasoning, <code>ByteTensor</code> is also confusing to users (because it's <code>uint8</code>) and we're going to deprecate this name, right? ;) (BTW, I use ByteTensor all the time without any confusion because all I really need is some opaque blob of data whose size is counted in bytes, because I'm passing it on to cuDNN or something; in this case the signedness of the bytes themselves doesn't matter because I'm never going to interpret the bytes as numbers.)</li>\n<li>Can we make a use of <code>torch.byte</code> raise an error explaining why we don't want to let you use it, and how to use the one you actually want?</li>\n<li>What are the semantics of arithmetic operations on <code>BoolTensor</code>? The most natural mathematical interpretation is that boolean tensors are tensors of integers modulo two. But representing this with bytes is actively harmful for implementing these semantics correctly. So I really don't like calling it a <code>BoolTensor</code> unless we also work to make the ops correct (or exclude them.)</li>\n</ul>", "body_text": "A few thoughts, then.\n\nBy the same reasoning, ByteTensor is also confusing to users (because it's uint8) and we're going to deprecate this name, right? ;) (BTW, I use ByteTensor all the time without any confusion because all I really need is some opaque blob of data whose size is counted in bytes, because I'm passing it on to cuDNN or something; in this case the signedness of the bytes themselves doesn't matter because I'm never going to interpret the bytes as numbers.)\nCan we make a use of torch.byte raise an error explaining why we don't want to let you use it, and how to use the one you actually want?\nWhat are the semantics of arithmetic operations on BoolTensor? The most natural mathematical interpretation is that boolean tensors are tensors of integers modulo two. But representing this with bytes is actively harmful for implementing these semantics correctly. So I really don't like calling it a BoolTensor unless we also work to make the ops correct (or exclude them.)", "body": "A few thoughts, then.\r\n\r\n- By the same reasoning, `ByteTensor` is also confusing to users (because it's `uint8`) and we're going to deprecate this name, right? ;) (BTW, I use ByteTensor all the time without any confusion because all I really need is some opaque blob of data whose size is counted in bytes, because I'm passing it on to cuDNN or something; in this case the signedness of the bytes themselves doesn't matter because I'm never going to interpret the bytes as numbers.)\r\n- Can we make a use of `torch.byte` raise an error explaining why we don't want to let you use it, and how to use the one you actually want?\r\n- What are the semantics of arithmetic operations on `BoolTensor`? The most natural mathematical interpretation is that boolean tensors are tensors of integers modulo two. But representing this with bytes is actively harmful for implementing these semantics correctly. So I really don't like calling it a `BoolTensor` unless we also work to make the ops correct (or exclude them.)"}