{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/210697723", "pull_request_review_id": 146967608, "id": 210697723, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMDY5NzcyMw==", "diff_hunk": "@@ -141,33 +186,51 @@ struct GraphFuser {\n   }\n \n   bool hasSupportedType(Node* node) {\n-    return areTensorsOfSameShape(node->inputs()) &&\n-           haveSupportedType(node->inputs()) &&\n+    return haveSupportedShape(node->inputs()) &&\n+           haveSupportedType(node->inputs(), /*allow_constant_numbers*/true) &&\n            haveSupportedType(node->outputs());\n   }\n \n-  bool haveSupportedType(at::ArrayRef<Value*> list) {\n+  bool haveSupportedType(at::ArrayRef<Value*> list, bool allow_constant_numbers=false) {\n     for (Value *v : list) {\n-      if (!hasSupportedType(v)) return false;\n+      if (!hasSupportedType(v, allow_constant_numbers)) return false;\n     }\n     return true;\n   }\n \n+  bool haveSupportedShape(at::ArrayRef<Value*> list) {\n+    std::vector<Value*> tensor_values;\n+    tensor_values.reserve(list.size());\n+    for (Value * v : list) {\n+      if (v->type()->cast<TensorType>()) {\n+        tensor_values.push_back(v);\n+        continue;\n+      }\n+      // XXX: For now, we support fusing tensor-scalar ops if the scalars\n+      // are constant. They are directly inlined into the kernel body\n+      if (v->type()->isSubtypeOf(NumberType::get()) &&\n+          v->node()->kind() != prim::Constant) {\n+        return false;\n+      }\n+    }", "path": "torch/csrc/jit/passes/graph_fuser.cpp", "position": null, "original_position": 120, "commit_id": "9d943a667a4296b2611f4322b2cb59054d040f5e", "original_commit_id": "0616b4a620fc969117d8b7b4c2bc40f1ec7b6bce", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "I don't really like this function, because we end up with the hacky checks we had previously. If we want to handle tensor-scalar ops, this function should explicitly look for them using `->matches()`, and have a fallback that expect all-tensor inputs for all other pointwise ops. It would be much clearer too. You can leave the code in `hasSupportedType(Node*)` as it was, and put the `matches` checks before to shortcut the scalar cases. This way we wouldn't need \"allow constant numbers\" either - you could just slice out the tensor inputs.", "created_at": "2018-08-16T18:30:46Z", "updated_at": "2018-11-23T15:49:32Z", "html_url": "https://github.com/pytorch/pytorch/pull/10511#discussion_r210697723", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/10511", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/210697723"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/10511#discussion_r210697723"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/10511"}}, "body_html": "<p>I don't really like this function, because we end up with the hacky checks we had previously. If we want to handle tensor-scalar ops, this function should explicitly look for them using <code>-&gt;matches()</code>, and have a fallback that expect all-tensor inputs for all other pointwise ops. It would be much clearer too. You can leave the code in <code>hasSupportedType(Node*)</code> as it was, and put the <code>matches</code> checks before to shortcut the scalar cases. This way we wouldn't need \"allow constant numbers\" either - you could just slice out the tensor inputs.</p>", "body_text": "I don't really like this function, because we end up with the hacky checks we had previously. If we want to handle tensor-scalar ops, this function should explicitly look for them using ->matches(), and have a fallback that expect all-tensor inputs for all other pointwise ops. It would be much clearer too. You can leave the code in hasSupportedType(Node*) as it was, and put the matches checks before to shortcut the scalar cases. This way we wouldn't need \"allow constant numbers\" either - you could just slice out the tensor inputs."}