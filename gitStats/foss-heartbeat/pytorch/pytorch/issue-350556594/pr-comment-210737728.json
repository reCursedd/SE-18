{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/210737728", "pull_request_review_id": 147018966, "id": 210737728, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMDczNzcyOA==", "diff_hunk": "@@ -249,18 +312,48 @@ struct GraphFuser {\n     return isFusableOnlyAsExitNode(node);\n   }\n \n+  bool compatibleDevices(Node * consumer, Value * producer) {\n+    auto consumer_device = getDevice(consumer);\n+    auto producer_device = getDevice(producer->node());\n+\n+    if (consumer_device.type() == DeviceType::Unknown ||\n+        producer_device.type() == DeviceType::Unknown) {\n+      return false;\n+    }\n+\n+    if (consumer_device.type() == DeviceType::CPU ||\n+        producer_device.type() == DeviceType::CPU) {\n+      if (!sharedFusionCompiler().canCompileOnCPU()) {\n+        return false;\n+      }", "path": "torch/csrc/jit/passes/graph_fuser.cpp", "position": null, "original_position": 168, "commit_id": "9d943a667a4296b2611f4322b2cb59054d040f5e", "original_commit_id": "0616b4a620fc969117d8b7b4c2bc40f1ec7b6bce", "user": {"login": "zou3519", "id": 5652049, "node_id": "MDQ6VXNlcjU2NTIwNDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/5652049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zou3519", "html_url": "https://github.com/zou3519", "followers_url": "https://api.github.com/users/zou3519/followers", "following_url": "https://api.github.com/users/zou3519/following{/other_user}", "gists_url": "https://api.github.com/users/zou3519/gists{/gist_id}", "starred_url": "https://api.github.com/users/zou3519/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zou3519/subscriptions", "organizations_url": "https://api.github.com/users/zou3519/orgs", "repos_url": "https://api.github.com/users/zou3519/repos", "events_url": "https://api.github.com/users/zou3519/events{/privacy}", "received_events_url": "https://api.github.com/users/zou3519/received_events", "type": "User", "site_admin": false}, "body": "Consider the case where consumer_device.Type() == DeviceType::CPU and producer_device.type() == CUDA:\r\n\r\nIf I changed\r\n```\r\nif (consumer_device.type() == DeviceType::CPU ||\r\n      producer_device.type() == DeviceType::CPU) {\r\n      if (!sharedFusionCompiler().canCompileOnCPU()) {\r\n        return false;\r\n      }\r\n}\r\n```\r\nto \r\n```\r\nif (consumer_device.type() == DeviceType::CPU ||\r\n      producer_device.type() == DeviceType::CPU) {\r\n    return sharedFusionCompiler.canCompileOnCPU()\r\n}\r\n```\r\nand `sharedFusionCompiler.canCompileOnCPU()` is true, then `compatibleDevices(...)` would return true. However, consumer_device is different from producer_device, so we should not be returning true here\r\n", "created_at": "2018-08-16T20:51:46Z", "updated_at": "2018-11-23T15:49:33Z", "html_url": "https://github.com/pytorch/pytorch/pull/10511#discussion_r210737728", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/10511", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/210737728"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/10511#discussion_r210737728"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/10511"}}, "body_html": "<p>Consider the case where consumer_device.Type() == DeviceType::CPU and producer_device.type() == CUDA:</p>\n<p>If I changed</p>\n<pre><code>if (consumer_device.type() == DeviceType::CPU ||\n      producer_device.type() == DeviceType::CPU) {\n      if (!sharedFusionCompiler().canCompileOnCPU()) {\n        return false;\n      }\n}\n</code></pre>\n<p>to</p>\n<pre><code>if (consumer_device.type() == DeviceType::CPU ||\n      producer_device.type() == DeviceType::CPU) {\n    return sharedFusionCompiler.canCompileOnCPU()\n}\n</code></pre>\n<p>and <code>sharedFusionCompiler.canCompileOnCPU()</code> is true, then <code>compatibleDevices(...)</code> would return true. However, consumer_device is different from producer_device, so we should not be returning true here</p>", "body_text": "Consider the case where consumer_device.Type() == DeviceType::CPU and producer_device.type() == CUDA:\nIf I changed\nif (consumer_device.type() == DeviceType::CPU ||\n      producer_device.type() == DeviceType::CPU) {\n      if (!sharedFusionCompiler().canCompileOnCPU()) {\n        return false;\n      }\n}\n\nto\nif (consumer_device.type() == DeviceType::CPU ||\n      producer_device.type() == DeviceType::CPU) {\n    return sharedFusionCompiler.canCompileOnCPU()\n}\n\nand sharedFusionCompiler.canCompileOnCPU() is true, then compatibleDevices(...) would return true. However, consumer_device is different from producer_device, so we should not be returning true here", "in_reply_to_id": 210698586}