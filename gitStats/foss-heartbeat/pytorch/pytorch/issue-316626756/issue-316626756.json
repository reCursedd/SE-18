{"url": "https://api.github.com/repos/pytorch/pytorch/issues/6850", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/6850/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/6850/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/6850/events", "html_url": "https://github.com/pytorch/pytorch/issues/6850", "id": 316626756, "node_id": "MDU6SXNzdWUzMTY2MjY3NTY=", "number": 6850, "title": "[feature request] More `index_*_` functionality and/or lambda functionality", "user": {"login": "meder411", "id": 6818607, "node_id": "MDQ6VXNlcjY4MTg2MDc=", "avatar_url": "https://avatars0.githubusercontent.com/u/6818607?v=4", "gravatar_id": "", "url": "https://api.github.com/users/meder411", "html_url": "https://github.com/meder411", "followers_url": "https://api.github.com/users/meder411/followers", "following_url": "https://api.github.com/users/meder411/following{/other_user}", "gists_url": "https://api.github.com/users/meder411/gists{/gist_id}", "starred_url": "https://api.github.com/users/meder411/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/meder411/subscriptions", "organizations_url": "https://api.github.com/users/meder411/orgs", "repos_url": "https://api.github.com/users/meder411/repos", "events_url": "https://api.github.com/users/meder411/events{/privacy}", "received_events_url": "https://api.github.com/users/meder411/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 443483881, "node_id": "MDU6TGFiZWw0NDM0ODM4ODE=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/todo", "name": "todo", "color": "c2e0c6", "default": false}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2018-04-23T00:21:20Z", "updated_at": "2018-05-14T19:52:47Z", "closed_at": null, "author_association": "NONE", "body_html": "<p>Could additional index-based functions be added to the tensor library? Specifically I am thinking of an <code>index_mean_</code> and <code>index_max_</code> or <code>index_min_</code>? In the first case, all that I foresee being required is an extra counter per index. In the latter, it's just a matter or replacing element-wise addition with an element-wise binary comparator. Even better would be an <code>index_lambda_</code> function in which a user can implement their own index-wise operation.</p>\n<p>If I could find the source code, I'd take a stab at a PR, but I am not sure where to find these implementations (all I found was aten/Tensor.h), nor am I CUDA proficient if they are implemented in that way. Hence, I'm making a feature request and am hoping someone can take the ball and run with it.</p>", "body_text": "Could additional index-based functions be added to the tensor library? Specifically I am thinking of an index_mean_ and index_max_ or index_min_? In the first case, all that I foresee being required is an extra counter per index. In the latter, it's just a matter or replacing element-wise addition with an element-wise binary comparator. Even better would be an index_lambda_ function in which a user can implement their own index-wise operation.\nIf I could find the source code, I'd take a stab at a PR, but I am not sure where to find these implementations (all I found was aten/Tensor.h), nor am I CUDA proficient if they are implemented in that way. Hence, I'm making a feature request and am hoping someone can take the ball and run with it.", "body": "Could additional index-based functions be added to the tensor library? Specifically I am thinking of an `index_mean_` and `index_max_` or `index_min_`? In the first case, all that I foresee being required is an extra counter per index. In the latter, it's just a matter or replacing element-wise addition with an element-wise binary comparator. Even better would be an `index_lambda_` function in which a user can implement their own index-wise operation.\r\n\r\nIf I could find the source code, I'd take a stab at a PR, but I am not sure where to find these implementations (all I found was aten/Tensor.h), nor am I CUDA proficient if they are implemented in that way. Hence, I'm making a feature request and am hoping someone can take the ball and run with it."}