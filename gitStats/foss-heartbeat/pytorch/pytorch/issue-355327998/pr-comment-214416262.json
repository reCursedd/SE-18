{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/214416262", "pull_request_review_id": 151476060, "id": 214416262, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNDQxNjI2Mg==", "diff_hunk": "@@ -131,7 +131,7 @@ Tensor eye(int64_t n, const TensorOptions& options) {\n }\n \n Tensor eye(int64_t n, int64_t m, const TensorOptions& options) {\n-  auto tensor = options.type().tensor({});\n+  auto tensor = at::getType(options).tensor({});", "path": "aten/src/ATen/native/TensorFactories.cpp", "position": null, "original_position": 56, "commit_id": "8b6eb46fc6d3ae497bf823541066765a017b6055", "original_commit_id": "7394abf2f6fb6e992460dd61fc67e86085a3c092", "user": {"login": "goldsborough", "id": 6429851, "node_id": "MDQ6VXNlcjY0Mjk4NTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/6429851?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goldsborough", "html_url": "https://github.com/goldsborough", "followers_url": "https://api.github.com/users/goldsborough/followers", "following_url": "https://api.github.com/users/goldsborough/following{/other_user}", "gists_url": "https://api.github.com/users/goldsborough/gists{/gist_id}", "starred_url": "https://api.github.com/users/goldsborough/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goldsborough/subscriptions", "organizations_url": "https://api.github.com/users/goldsborough/orgs", "repos_url": "https://api.github.com/users/goldsborough/repos", "events_url": "https://api.github.com/users/goldsborough/events{/privacy}", "received_events_url": "https://api.github.com/users/goldsborough/received_events", "type": "User", "site_admin": false}, "body": "`at::tensor({}, options)` would work, but a `DeviceGuard` will have been set for all of these methods in e.g. `at::eye`, so `at::tensor` would set yet another DeviceGuard. That should technically never be a problem, but conceptually at this point a `DeviceGuard` has been set, so we can just go straight to allocating a raw tensor (which may also save some microseconds to avoid the duplicate `DeviceGuard` construction). `native::empty` sounds good to me!", "created_at": "2018-08-31T17:00:04Z", "updated_at": "2018-11-23T15:50:26Z", "html_url": "https://github.com/pytorch/pytorch/pull/11023#discussion_r214416262", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/11023", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/214416262"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/11023#discussion_r214416262"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/11023"}}, "body_html": "<p><code>at::tensor({}, options)</code> would work, but a <code>DeviceGuard</code> will have been set for all of these methods in e.g. <code>at::eye</code>, so <code>at::tensor</code> would set yet another DeviceGuard. That should technically never be a problem, but conceptually at this point a <code>DeviceGuard</code> has been set, so we can just go straight to allocating a raw tensor (which may also save some microseconds to avoid the duplicate <code>DeviceGuard</code> construction). <code>native::empty</code> sounds good to me!</p>", "body_text": "at::tensor({}, options) would work, but a DeviceGuard will have been set for all of these methods in e.g. at::eye, so at::tensor would set yet another DeviceGuard. That should technically never be a problem, but conceptually at this point a DeviceGuard has been set, so we can just go straight to allocating a raw tensor (which may also save some microseconds to avoid the duplicate DeviceGuard construction). native::empty sounds good to me!", "in_reply_to_id": 213831311}