{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/213831311", "pull_request_review_id": 150750499, "id": 213831311, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMzgzMTMxMQ==", "diff_hunk": "@@ -131,7 +131,7 @@ Tensor eye(int64_t n, const TensorOptions& options) {\n }\n \n Tensor eye(int64_t n, int64_t m, const TensorOptions& options) {\n-  auto tensor = options.type().tensor({});\n+  auto tensor = at::getType(options).tensor({});", "path": "aten/src/ATen/native/TensorFactories.cpp", "position": null, "original_position": 56, "commit_id": "8b6eb46fc6d3ae497bf823541066765a017b6055", "original_commit_id": "7394abf2f6fb6e992460dd61fc67e86085a3c092", "user": {"login": "goldsborough", "id": 6429851, "node_id": "MDQ6VXNlcjY0Mjk4NTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/6429851?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goldsborough", "html_url": "https://github.com/goldsborough", "followers_url": "https://api.github.com/users/goldsborough/followers", "following_url": "https://api.github.com/users/goldsborough/following{/other_user}", "gists_url": "https://api.github.com/users/goldsborough/gists{/gist_id}", "starred_url": "https://api.github.com/users/goldsborough/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goldsborough/subscriptions", "organizations_url": "https://api.github.com/users/goldsborough/orgs", "repos_url": "https://api.github.com/users/goldsborough/repos", "events_url": "https://api.github.com/users/goldsborough/events{/privacy}", "received_events_url": "https://api.github.com/users/goldsborough/received_events", "type": "User", "site_admin": false}, "body": "I'd maybe create a utility/detail function at the top of this file called `raw_tensor` that takes an options and an `IntList` for the size and wraps this -- it's a bit repetitive right now. Maybe with a comment stating that `type().tensor()` is the lowest level interface that allocates a tensor without a device specified.", "created_at": "2018-08-29T20:55:57Z", "updated_at": "2018-11-23T15:50:17Z", "html_url": "https://github.com/pytorch/pytorch/pull/11023#discussion_r213831311", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/11023", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/213831311"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/11023#discussion_r213831311"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/11023"}}, "body_html": "<p>I'd maybe create a utility/detail function at the top of this file called <code>raw_tensor</code> that takes an options and an <code>IntList</code> for the size and wraps this -- it's a bit repetitive right now. Maybe with a comment stating that <code>type().tensor()</code> is the lowest level interface that allocates a tensor without a device specified.</p>", "body_text": "I'd maybe create a utility/detail function at the top of this file called raw_tensor that takes an options and an IntList for the size and wraps this -- it's a bit repetitive right now. Maybe with a comment stating that type().tensor() is the lowest level interface that allocates a tensor without a device specified."}