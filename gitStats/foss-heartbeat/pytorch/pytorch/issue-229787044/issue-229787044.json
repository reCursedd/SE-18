{"url": "https://api.github.com/repos/pytorch/pytorch/issues/1588", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/1588/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/1588/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/1588/events", "html_url": "https://github.com/pytorch/pytorch/pull/1588", "id": 229787044, "node_id": "MDExOlB1bGxSZXF1ZXN0MTIxMzY0ODgx", "number": 1588, "title": "Advanced Indexing Part 1 -- Purely Integer Array Indexing", "user": {"login": "killeent", "id": 4529377, "node_id": "MDQ6VXNlcjQ1MjkzNzc=", "avatar_url": "https://avatars1.githubusercontent.com/u/4529377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/killeent", "html_url": "https://github.com/killeent", "followers_url": "https://api.github.com/users/killeent/followers", "following_url": "https://api.github.com/users/killeent/following{/other_user}", "gists_url": "https://api.github.com/users/killeent/gists{/gist_id}", "starred_url": "https://api.github.com/users/killeent/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/killeent/subscriptions", "organizations_url": "https://api.github.com/users/killeent/orgs", "repos_url": "https://api.github.com/users/killeent/repos", "events_url": "https://api.github.com/users/killeent/events{/privacy}", "received_events_url": "https://api.github.com/users/killeent/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2017-05-18T19:57:22Z", "updated_at": "2018-11-23T15:33:58Z", "closed_at": "2017-06-22T21:23:51Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/1588", "html_url": "https://github.com/pytorch/pytorch/pull/1588", "diff_url": "https://github.com/pytorch/pytorch/pull/1588.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/1588.patch"}, "body_html": "<p>This PR implements \"Purely Integer Array\" advanced indexing semantics in PyTorch, from NumPy, as documented here: <a href=\"https://docs.scipy.org/doc/numpy/reference/arrays.indexing.html#purely-integer-array-indexing\" rel=\"nofollow\">https://docs.scipy.org/doc/numpy/reference/arrays.indexing.html#purely-integer-array-indexing</a>. It should work with gets/sets and autograd, and allows for LongTensor indexers as well.</p>\n<pre><code> x = torch.arange(0, 25).view(5, 5)\n\n  0   1   2   3   4\n  5   6   7   8   9\n 10  11  12  13  14\n 15  16  17  18  19\n 20  21  22  23  24\n[torch.FloatTensor of size 5x5]\n\nx[[0,4,3], [1,3,0]]\n\n  1\n 23\n 15\n[torch.FloatTensor of size 3]\n</code></pre>\n<p>Begins to address <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"216603212\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/1080\" data-hovercard-type=\"issue\" data-hovercard-url=\"/pytorch/pytorch/issues/1080/hovercard\" href=\"https://github.com/pytorch/pytorch/issues/1080\">#1080</a>.</p>", "body_text": "This PR implements \"Purely Integer Array\" advanced indexing semantics in PyTorch, from NumPy, as documented here: https://docs.scipy.org/doc/numpy/reference/arrays.indexing.html#purely-integer-array-indexing. It should work with gets/sets and autograd, and allows for LongTensor indexers as well.\n x = torch.arange(0, 25).view(5, 5)\n\n  0   1   2   3   4\n  5   6   7   8   9\n 10  11  12  13  14\n 15  16  17  18  19\n 20  21  22  23  24\n[torch.FloatTensor of size 5x5]\n\nx[[0,4,3], [1,3,0]]\n\n  1\n 23\n 15\n[torch.FloatTensor of size 3]\n\nBegins to address #1080.", "body": "This PR implements \"Purely Integer Array\" advanced indexing semantics in PyTorch, from NumPy, as documented here: https://docs.scipy.org/doc/numpy/reference/arrays.indexing.html#purely-integer-array-indexing. It should work with gets/sets and autograd, and allows for LongTensor indexers as well.\r\n\r\n```\r\n x = torch.arange(0, 25).view(5, 5)\r\n\r\n  0   1   2   3   4\r\n  5   6   7   8   9\r\n 10  11  12  13  14\r\n 15  16  17  18  19\r\n 20  21  22  23  24\r\n[torch.FloatTensor of size 5x5]\r\n\r\nx[[0,4,3], [1,3,0]]\r\n\r\n  1\r\n 23\r\n 15\r\n[torch.FloatTensor of size 3]\r\n```\r\n\r\nBegins to address #1080."}