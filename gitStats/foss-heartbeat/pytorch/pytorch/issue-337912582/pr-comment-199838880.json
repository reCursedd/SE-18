{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/199838880", "pull_request_review_id": 134036898, "id": 199838880, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTgzODg4MA==", "diff_hunk": "@@ -96,3 +96,145 @@ THStorage* THStorage_newWithAllocator(at::ScalarType scalar_type, ptrdiff_t size\n   storage->device = INT_MIN;  // device is not meaningful on CPU\n   return storage;\n }\n+\n+ptrdiff_t THStorage_size(const THStorage *self)\n+{\n+  return self->size;\n+}\n+\n+size_t THStorage_elementSize(const THStorage *self)\n+{\n+  return at::elementSize(self->scalar_type);\n+}\n+\n+THStorage* THStorage_newWithMapping(at::ScalarType scalar_type, const char *filename, ptrdiff_t size, int flags)\n+{\n+  THMapAllocatorContext *ctx = THMapAllocatorContext_new(filename, flags);\n+\n+  THStorage *storage = THStorage_newWithAllocator(scalar_type, size,\n+                                                  &THMapAllocator,\n+                                                  ctx);\n+\n+  if(size <= 0)\n+    storage->size = THMapAllocatorContext_size(ctx)/THStorage_elementSize(storage);\n+\n+  THStorage_clearFlag(storage, TH_STORAGE_RESIZABLE);\n+\n+  return storage;\n+}\n+\n+void THStorage_setFlag(THStorage *storage, const char flag)\n+{\n+  storage->flag |= flag;\n+}\n+\n+void THStorage_clearFlag(THStorage *storage, const char flag)\n+{\n+  storage->flag &= ~flag;\n+}\n+\n+void THStorage_retain(THStorage *storage)\n+{\n+  if(storage && (storage->flag & TH_STORAGE_REFCOUNTED))\n+    ++storage->refcount;", "path": "aten/src/TH/THStorage.cpp", "position": 44, "original_position": 44, "commit_id": "9be7cc7c5a1c490a5547c81b56c70c172bf2d55d", "original_commit_id": "9be7cc7c5a1c490a5547c81b56c70c172bf2d55d", "user": {"login": "gchanan", "id": 3768583, "node_id": "MDQ6VXNlcjM3Njg1ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3768583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gchanan", "html_url": "https://github.com/gchanan", "followers_url": "https://api.github.com/users/gchanan/followers", "following_url": "https://api.github.com/users/gchanan/following{/other_user}", "gists_url": "https://api.github.com/users/gchanan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gchanan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gchanan/subscriptions", "organizations_url": "https://api.github.com/users/gchanan/orgs", "repos_url": "https://api.github.com/users/gchanan/repos", "events_url": "https://api.github.com/users/gchanan/events{/privacy}", "received_events_url": "https://api.github.com/users/gchanan/received_events", "type": "User", "site_admin": false}, "body": "nit: when I've done these moves, I've added braces in this situation to match the way most of our ATen/pytorch C++ code is written.", "created_at": "2018-07-03T14:56:45Z", "updated_at": "2018-11-23T15:46:42Z", "html_url": "https://github.com/pytorch/pytorch/pull/9135#discussion_r199838880", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/9135", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/199838880"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/9135#discussion_r199838880"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/9135"}}, "body_html": "<p>nit: when I've done these moves, I've added braces in this situation to match the way most of our ATen/pytorch C++ code is written.</p>", "body_text": "nit: when I've done these moves, I've added braces in this situation to match the way most of our ATen/pytorch C++ code is written."}