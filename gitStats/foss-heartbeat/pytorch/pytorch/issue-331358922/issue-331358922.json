{"url": "https://api.github.com/repos/pytorch/pytorch/issues/8349", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/8349/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/8349/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/8349/events", "html_url": "https://github.com/pytorch/pytorch/pull/8349", "id": 331358922, "node_id": "MDExOlB1bGxSZXF1ZXN0MTk0MTEwMjEx", "number": 8349, "title": "Allow TypeMeta hold non-default-constructible types", "user": {"login": "dzhulgakov", "id": 17890620, "node_id": "MDQ6VXNlcjE3ODkwNjIw", "avatar_url": "https://avatars2.githubusercontent.com/u/17890620?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dzhulgakov", "html_url": "https://github.com/dzhulgakov", "followers_url": "https://api.github.com/users/dzhulgakov/followers", "following_url": "https://api.github.com/users/dzhulgakov/following{/other_user}", "gists_url": "https://api.github.com/users/dzhulgakov/gists{/gist_id}", "starred_url": "https://api.github.com/users/dzhulgakov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dzhulgakov/subscriptions", "organizations_url": "https://api.github.com/users/dzhulgakov/orgs", "repos_url": "https://api.github.com/users/dzhulgakov/repos", "events_url": "https://api.github.com/users/dzhulgakov/events{/privacy}", "received_events_url": "https://api.github.com/users/dzhulgakov/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 890282107, "node_id": "MDU6TGFiZWw4OTAyODIxMDc=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/caffe2", "name": "caffe2", "color": "210aa8", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-06-11T21:36:02Z", "updated_at": "2018-08-09T20:23:40Z", "closed_at": "2018-06-11T22:53:07Z", "author_association": "MEMBER", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/8349", "html_url": "https://github.com/pytorch/pytorch/pull/8349", "diff_url": "https://github.com/pytorch/pytorch/pull/8349.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/8349.patch"}, "body_html": "<p>Necessary for Tensor detemplatization (D8121878) - now tensor won't have default constructor (as we don't know the device).</p>\n<p>Thus this diff makes TypeMeta be constructible with non-default-constructible types in which case ctor() is non-null but always throws.</p>\n<p>It's dangerous however as we won't catch potential type errors at compile time. Luckily - the only place where ctor() is used is in Blob and Tensor which have templated wrappers there (GetMutable and mutable_data respectively). We can just enforce the necessary type requirements there explicitly as a static_assert.</p>\n<p>It also changes the failure behavior to be throw() instead of abort(). Aborting the process is not cool for the library :)</p>", "body_text": "Necessary for Tensor detemplatization (D8121878) - now tensor won't have default constructor (as we don't know the device).\nThus this diff makes TypeMeta be constructible with non-default-constructible types in which case ctor() is non-null but always throws.\nIt's dangerous however as we won't catch potential type errors at compile time. Luckily - the only place where ctor() is used is in Blob and Tensor which have templated wrappers there (GetMutable and mutable_data respectively). We can just enforce the necessary type requirements there explicitly as a static_assert.\nIt also changes the failure behavior to be throw() instead of abort(). Aborting the process is not cool for the library :)", "body": "Necessary for Tensor detemplatization (D8121878) - now tensor won't have default constructor (as we don't know the device).\r\n\r\nThus this diff makes TypeMeta be constructible with non-default-constructible types in which case ctor() is non-null but always throws.\r\n\r\nIt's dangerous however as we won't catch potential type errors at compile time. Luckily - the only place where ctor() is used is in Blob and Tensor which have templated wrappers there (GetMutable and mutable_data respectively). We can just enforce the necessary type requirements there explicitly as a static_assert.\r\n\r\nIt also changes the failure behavior to be throw() instead of abort(). Aborting the process is not cool for the library :)\r\n\r\n"}