{"url": "https://api.github.com/repos/pytorch/pytorch/issues/5900", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/5900/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/5900/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/5900/events", "html_url": "https://github.com/pytorch/pytorch/issues/5900", "id": 306816656, "node_id": "MDU6SXNzdWUzMDY4MTY2NTY=", "number": 5900, "title": "Build Fails on Gentoo with CUDA 9.1, GCC 6.4, Python 3.5", "user": {"login": "jdbrody", "id": 12812813, "node_id": "MDQ6VXNlcjEyODEyODEz", "avatar_url": "https://avatars2.githubusercontent.com/u/12812813?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jdbrody", "html_url": "https://github.com/jdbrody", "followers_url": "https://api.github.com/users/jdbrody/followers", "following_url": "https://api.github.com/users/jdbrody/following{/other_user}", "gists_url": "https://api.github.com/users/jdbrody/gists{/gist_id}", "starred_url": "https://api.github.com/users/jdbrody/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jdbrody/subscriptions", "organizations_url": "https://api.github.com/users/jdbrody/orgs", "repos_url": "https://api.github.com/users/jdbrody/repos", "events_url": "https://api.github.com/users/jdbrody/events{/privacy}", "received_events_url": "https://api.github.com/users/jdbrody/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2018-03-20T10:58:04Z", "updated_at": "2018-05-07T19:56:08Z", "closed_at": null, "author_association": "NONE", "body_html": "<p>Hello,<br>\nI have been unable to compile the source on my gentoo box.  Here are the error messages I'm currently getting:</p>\n<p>17%] Building NVCC (Device) object src/ATen/CMakeFiles/ATen.dir/native/cuda/ATen_generated_TensorFactories.cu.o<br>\n/tmp/pytorch/aten/src/ATen/native/cuda/Embedding.cu(36): warning: function \"__any\"<br>\n/opt/cuda/include/device_atomic_functions.h(180): here was declared deprecated (\"__any() is deprecated in favor of __any_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to suppress this warning).\")</p>\n<p>/usr/lib/gcc/x86_64-pc-linux-gnu/6.4.0/include/g++-v6/tuple: In instantiation of \u2018static constexpr bool std::_TC&lt;, _Elements&gt;::_MoveConstructibleTuple() [with _UElements = {std::tuple&lt;at::Tensor&amp;, at::Tensor&amp;, at::Tensor&amp;&gt;}; bool  = true; _Elements = {at::Tensor&amp;, at::Tensor&amp;, at::Tensor&amp;}]\u2019:<br>\n/usr/lib/gcc/x86_64-pc-linux-gnu/6.4.0/include/g++-v6/tuple:626:248:   required by substitution of \u2018template&lt;class ... _UElements, typename std::enable_if&lt;(((std::_TC&lt;(sizeof... (_UElements) == 1), at::Tensor&amp;, at::Tensor&amp;, at::Tensor&amp;&gt;::_NotSameTuple&lt;_UElements ...&gt;() &amp;&amp; std::_TC&lt;(1ul == sizeof... (_UElements)), at::Tensor&amp;, at::Tensor&amp;, at::Tensor&amp;&gt;::_MoveConstructibleTuple&lt;_UElements ...&gt;()) &amp;&amp; std::_TC&lt;(1ul == sizeof... (_UElements)), at::Tensor&amp;, at::Tensor&amp;, at::Tensor&amp;&gt;::_ImplicitlyMoveConvertibleTuple&lt;_UElements ...&gt;()) &amp;&amp; (3ul &gt;= 1)), bool&gt;::type  &gt; constexpr std::tuple&lt;  &gt;::tuple(_UElements&amp;&amp; ...) [with _UElements = {std::tuple&lt;at::Tensor&amp;, at::Tensor&amp;, at::Tensor&amp;&gt;}; typename std::enable_if&lt;(((std::_TC&lt;(sizeof... (_UElements) == 1), at::Tensor&amp;, at::Tensor&amp;, at::Tensor&amp;&gt;::_NotSameTuple&lt;_UElements ...&gt;() &amp;&amp; std::_TC&lt;(1ul == sizeof... (_UElements)), at::Tensor&amp;, at::Tensor&amp;, at::Tensor&amp;&gt;::_MoveConstructibleTuple&lt;_UElements ...&gt;()) &amp;&amp; std::_TC&lt;(1ul == sizeof... (_UElements)), at::Tensor&amp;, at::Tensor&amp;, at::Tensor&amp;&gt;::_ImplicitlyMoveConvertibleTuple&lt;_UElements ...&gt;()) &amp;&amp; (3ul &gt;= 1)), bool&gt;::type  = ]\u2019<br>\n/tmp/pytorch/torch/lib/build/aten/src/ATen/ATen/Functions.h:1626:61:   required from here<br>\n/usr/lib/gcc/x86_64-pc-linux-gnu/6.4.0/include/g++-v6/tuple:483:67: error: mismatched argument pack lengths while expanding \u2018std::is_constructible&lt;_Elements, _UElements&amp;&amp;&gt;\u2019<br>\nreturn _<em>and</em>&lt;is_constructible&lt;_Elements, _UElements&amp;&amp;&gt;...&gt;::value;</p>\n<pre><code>                                                               ^~~~~\n</code></pre>\n<p>/usr/lib/gcc/x86_64-pc-linux-gnu/6.4.0/include/g++-v6/tuple:484:1: error: body of constexpr function \u2018static constexpr bool std::_TC&lt;, _Elements&gt;::_MoveConstructibleTuple() [with _UElements = {std::tuple&lt;at::Tensor&amp;, at::Tensor&amp;, at::Tensor&amp;&gt;}; bool  = true; _Elements = {at::Tensor&amp;, at::Tensor&amp;, at::Tensor&amp;}]\u2019 not a return-statement<br>\n}<br>\n^<br>\n/usr/lib/gcc/x86_64-pc-linux-gnu/6.4.0/include/g++-v6/tuple: In instantiation of \u2018static constexpr bool std::_TC&lt;, _Elements&gt;::_ImplicitlyMoveConvertibleTuple() [with _UElements = {std::tuple&lt;at::Tensor&amp;, at::Tensor&amp;, at::Tensor&amp;&gt;}; bool  = true; _Elements = {at::Tensor&amp;, at::Tensor&amp;, at::Tensor&amp;}]\u2019:<br>\n/usr/lib/gcc/x86_64-pc-linux-gnu/6.4.0/include/g++-v6/tuple:626:362:   required by substitution of \u2018template&lt;class ... _UElements, typename std::enable_if&lt;(((std::_TC&lt;(sizeof... (_UElements) == 1), at::Tensor&amp;, at::Tensor&amp;, at::Tensor&amp;&gt;::_NotSameTuple&lt;_UElements ...&gt;() &amp;&amp; std::_TC&lt;(1ul == sizeof... (_UElements)), at::Tensor&amp;, at::Tensor&amp;, at::Tensor&amp;&gt;::_MoveConstructibleTuple&lt;_UElements ...&gt;()) &amp;&amp; std::_TC&lt;(1ul == sizeof... (_UElements)), at::Tensor&amp;, at::Tensor&amp;, at::Tensor&amp;&gt;::_ImplicitlyMoveConvertibleTuple&lt;_UElements ...&gt;()) &amp;&amp; (3ul &gt;= 1)), bool&gt;::type  &gt; constexpr std::tuple&lt;  &gt;::tuple(_UElements&amp;&amp; ...) [with _UElements = {std::tuple&lt;at::Tensor&amp;, at::Tensor&amp;, at::Tensor&amp;&gt;}; typename std::enable_if&lt;(((std::_TC&lt;(sizeof... (_UElements) == 1), at::Tensor&amp;, at::Tensor&amp;, at::Tensor&amp;&gt;::_NotSameTuple&lt;_UElements ...&gt;() &amp;&amp; std::_TC&lt;(1ul == sizeof... (_UElements)), at::Tensor&amp;, at::Tensor&amp;, at::Tensor&amp;&gt;::_MoveConstructibleTuple&lt;_UElements ...&gt;()) &amp;&amp; std::_TC&lt;(1ul == sizeof... (_UElements)), at::Tensor&amp;, at::Tensor&amp;, at::Tensor&amp;&gt;::_ImplicitlyMoveConvertibleTuple&lt;_UElements ...&gt;()) &amp;&amp; (3ul &gt;= 1)), bool&gt;::type  = ]\u2019<br>\n/tmp/pytorch/torch/lib/build/aten/src/ATen/ATen/Functions.h:1626:61:   required from here<br>\n/usr/lib/gcc/x86_64-pc-linux-gnu/6.4.0/include/g++-v6/tuple:489:65: error: mismatched argument pack lengths while expanding \u2018std::is_convertible&lt;_UElements&amp;&amp;, _Elements&gt;\u2019<br>\nreturn _<em>and</em>&lt;is_convertible&lt;_UElements&amp;&amp;, _Elements&gt;...&gt;::value;<br>\n^~~~~<br>\n/usr/lib/gcc/x86_64-pc-linux-gnu/6.4.0/include/g++-v6/tuple:490:1: error: body of constexpr function \u2018static constexpr bool std::_TC&lt;, _Elements&gt;::_ImplicitlyMoveConvertibleTuple() [with _UElements = {std::tuple&lt;at::Tensor&amp;, at::Tensor&amp;, at::Tensor&amp;&gt;}; bool  = true; _Elements = {at::Tensor&amp;, at::Tensor&amp;, at::Tensor&amp;}]\u2019 not a return-statement<br>\n}</p>\n<p>and then several more pages of this.  Any ideas?  Please let me know if there's particular information that I'm omitting that would be helpful.</p>", "body_text": "Hello,\nI have been unable to compile the source on my gentoo box.  Here are the error messages I'm currently getting:\n17%] Building NVCC (Device) object src/ATen/CMakeFiles/ATen.dir/native/cuda/ATen_generated_TensorFactories.cu.o\n/tmp/pytorch/aten/src/ATen/native/cuda/Embedding.cu(36): warning: function \"__any\"\n/opt/cuda/include/device_atomic_functions.h(180): here was declared deprecated (\"__any() is deprecated in favor of __any_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to suppress this warning).\")\n/usr/lib/gcc/x86_64-pc-linux-gnu/6.4.0/include/g++-v6/tuple: In instantiation of \u2018static constexpr bool std::_TC<, _Elements>::_MoveConstructibleTuple() [with _UElements = {std::tuple<at::Tensor&, at::Tensor&, at::Tensor&>}; bool  = true; _Elements = {at::Tensor&, at::Tensor&, at::Tensor&}]\u2019:\n/usr/lib/gcc/x86_64-pc-linux-gnu/6.4.0/include/g++-v6/tuple:626:248:   required by substitution of \u2018template<class ... _UElements, typename std::enable_if<(((std::_TC<(sizeof... (_UElements) == 1), at::Tensor&, at::Tensor&, at::Tensor&>::_NotSameTuple<_UElements ...>() && std::_TC<(1ul == sizeof... (_UElements)), at::Tensor&, at::Tensor&, at::Tensor&>::_MoveConstructibleTuple<_UElements ...>()) && std::_TC<(1ul == sizeof... (_UElements)), at::Tensor&, at::Tensor&, at::Tensor&>::_ImplicitlyMoveConvertibleTuple<_UElements ...>()) && (3ul >= 1)), bool>::type  > constexpr std::tuple<  >::tuple(_UElements&& ...) [with _UElements = {std::tuple<at::Tensor&, at::Tensor&, at::Tensor&>}; typename std::enable_if<(((std::_TC<(sizeof... (_UElements) == 1), at::Tensor&, at::Tensor&, at::Tensor&>::_NotSameTuple<_UElements ...>() && std::_TC<(1ul == sizeof... (_UElements)), at::Tensor&, at::Tensor&, at::Tensor&>::_MoveConstructibleTuple<_UElements ...>()) && std::_TC<(1ul == sizeof... (_UElements)), at::Tensor&, at::Tensor&, at::Tensor&>::_ImplicitlyMoveConvertibleTuple<_UElements ...>()) && (3ul >= 1)), bool>::type  = ]\u2019\n/tmp/pytorch/torch/lib/build/aten/src/ATen/ATen/Functions.h:1626:61:   required from here\n/usr/lib/gcc/x86_64-pc-linux-gnu/6.4.0/include/g++-v6/tuple:483:67: error: mismatched argument pack lengths while expanding \u2018std::is_constructible<_Elements, _UElements&&>\u2019\nreturn _and<is_constructible<_Elements, _UElements&&>...>::value;\n                                                               ^~~~~\n\n/usr/lib/gcc/x86_64-pc-linux-gnu/6.4.0/include/g++-v6/tuple:484:1: error: body of constexpr function \u2018static constexpr bool std::_TC<, _Elements>::_MoveConstructibleTuple() [with _UElements = {std::tuple<at::Tensor&, at::Tensor&, at::Tensor&>}; bool  = true; _Elements = {at::Tensor&, at::Tensor&, at::Tensor&}]\u2019 not a return-statement\n}\n^\n/usr/lib/gcc/x86_64-pc-linux-gnu/6.4.0/include/g++-v6/tuple: In instantiation of \u2018static constexpr bool std::_TC<, _Elements>::_ImplicitlyMoveConvertibleTuple() [with _UElements = {std::tuple<at::Tensor&, at::Tensor&, at::Tensor&>}; bool  = true; _Elements = {at::Tensor&, at::Tensor&, at::Tensor&}]\u2019:\n/usr/lib/gcc/x86_64-pc-linux-gnu/6.4.0/include/g++-v6/tuple:626:362:   required by substitution of \u2018template<class ... _UElements, typename std::enable_if<(((std::_TC<(sizeof... (_UElements) == 1), at::Tensor&, at::Tensor&, at::Tensor&>::_NotSameTuple<_UElements ...>() && std::_TC<(1ul == sizeof... (_UElements)), at::Tensor&, at::Tensor&, at::Tensor&>::_MoveConstructibleTuple<_UElements ...>()) && std::_TC<(1ul == sizeof... (_UElements)), at::Tensor&, at::Tensor&, at::Tensor&>::_ImplicitlyMoveConvertibleTuple<_UElements ...>()) && (3ul >= 1)), bool>::type  > constexpr std::tuple<  >::tuple(_UElements&& ...) [with _UElements = {std::tuple<at::Tensor&, at::Tensor&, at::Tensor&>}; typename std::enable_if<(((std::_TC<(sizeof... (_UElements) == 1), at::Tensor&, at::Tensor&, at::Tensor&>::_NotSameTuple<_UElements ...>() && std::_TC<(1ul == sizeof... (_UElements)), at::Tensor&, at::Tensor&, at::Tensor&>::_MoveConstructibleTuple<_UElements ...>()) && std::_TC<(1ul == sizeof... (_UElements)), at::Tensor&, at::Tensor&, at::Tensor&>::_ImplicitlyMoveConvertibleTuple<_UElements ...>()) && (3ul >= 1)), bool>::type  = ]\u2019\n/tmp/pytorch/torch/lib/build/aten/src/ATen/ATen/Functions.h:1626:61:   required from here\n/usr/lib/gcc/x86_64-pc-linux-gnu/6.4.0/include/g++-v6/tuple:489:65: error: mismatched argument pack lengths while expanding \u2018std::is_convertible<_UElements&&, _Elements>\u2019\nreturn _and<is_convertible<_UElements&&, _Elements>...>::value;\n^~~~~\n/usr/lib/gcc/x86_64-pc-linux-gnu/6.4.0/include/g++-v6/tuple:490:1: error: body of constexpr function \u2018static constexpr bool std::_TC<, _Elements>::_ImplicitlyMoveConvertibleTuple() [with _UElements = {std::tuple<at::Tensor&, at::Tensor&, at::Tensor&>}; bool  = true; _Elements = {at::Tensor&, at::Tensor&, at::Tensor&}]\u2019 not a return-statement\n}\nand then several more pages of this.  Any ideas?  Please let me know if there's particular information that I'm omitting that would be helpful.", "body": "Hello,\r\nI have been unable to compile the source on my gentoo box.  Here are the error messages I'm currently getting:\r\n\r\n17%] Building NVCC (Device) object src/ATen/CMakeFiles/ATen.dir/native/cuda/ATen_generated_TensorFactories.cu.o\r\n/tmp/pytorch/aten/src/ATen/native/cuda/Embedding.cu(36): warning: function \"__any\"\r\n/opt/cuda/include/device_atomic_functions.h(180): here was declared deprecated (\"__any() is deprecated in favor of __any_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to suppress this warning).\")\r\n\r\n/usr/lib/gcc/x86_64-pc-linux-gnu/6.4.0/include/g++-v6/tuple: In instantiation of \u2018static constexpr bool std::_TC<<anonymous>, _Elements>::_MoveConstructibleTuple() [with _UElements = {std::tuple<at::Tensor&, at::Tensor&, at::Tensor&>}; bool <anonymous> = true; _Elements = {at::Tensor&, at::Tensor&, at::Tensor&}]\u2019:\r\n/usr/lib/gcc/x86_64-pc-linux-gnu/6.4.0/include/g++-v6/tuple:626:248:   required by substitution of \u2018template<class ... _UElements, typename std::enable_if<(((std::_TC<(sizeof... (_UElements) == 1), at::Tensor&, at::Tensor&, at::Tensor&>::_NotSameTuple<_UElements ...>() && std::_TC<(1ul == sizeof... (_UElements)), at::Tensor&, at::Tensor&, at::Tensor&>::_MoveConstructibleTuple<_UElements ...>()) && std::_TC<(1ul == sizeof... (_UElements)), at::Tensor&, at::Tensor&, at::Tensor&>::_ImplicitlyMoveConvertibleTuple<_UElements ...>()) && (3ul >= 1)), bool>::type <anonymous> > constexpr std::tuple< <template-parameter-1-1> >::tuple(_UElements&& ...) [with _UElements = {std::tuple<at::Tensor&, at::Tensor&, at::Tensor&>}; typename std::enable_if<(((std::_TC<(sizeof... (_UElements) == 1), at::Tensor&, at::Tensor&, at::Tensor&>::_NotSameTuple<_UElements ...>() && std::_TC<(1ul == sizeof... (_UElements)), at::Tensor&, at::Tensor&, at::Tensor&>::_MoveConstructibleTuple<_UElements ...>()) && std::_TC<(1ul == sizeof... (_UElements)), at::Tensor&, at::Tensor&, at::Tensor&>::_ImplicitlyMoveConvertibleTuple<_UElements ...>()) && (3ul >= 1)), bool>::type <anonymous> = <missing>]\u2019\r\n/tmp/pytorch/torch/lib/build/aten/src/ATen/ATen/Functions.h:1626:61:   required from here\r\n/usr/lib/gcc/x86_64-pc-linux-gnu/6.4.0/include/g++-v6/tuple:483:67: error: mismatched argument pack lengths while expanding \u2018std::is_constructible<_Elements, _UElements&&>\u2019\r\n       return __and_<is_constructible<_Elements, _UElements&&>...>::value;\r\n\r\n                                                                   ^~~~~\r\n/usr/lib/gcc/x86_64-pc-linux-gnu/6.4.0/include/g++-v6/tuple:484:1: error: body of constexpr function \u2018static constexpr bool std::_TC<<anonymous>, _Elements>::_MoveConstructibleTuple() [with _UElements = {std::tuple<at::Tensor&, at::Tensor&, at::Tensor&>}; bool <anonymous> = true; _Elements = {at::Tensor&, at::Tensor&, at::Tensor&}]\u2019 not a return-statement\r\n     }\r\n ^\r\n/usr/lib/gcc/x86_64-pc-linux-gnu/6.4.0/include/g++-v6/tuple: In instantiation of \u2018static constexpr bool std::_TC<<anonymous>, _Elements>::_ImplicitlyMoveConvertibleTuple() [with _UElements = {std::tuple<at::Tensor&, at::Tensor&, at::Tensor&>}; bool <anonymous> = true; _Elements = {at::Tensor&, at::Tensor&, at::Tensor&}]\u2019:\r\n/usr/lib/gcc/x86_64-pc-linux-gnu/6.4.0/include/g++-v6/tuple:626:362:   required by substitution of \u2018template<class ... _UElements, typename std::enable_if<(((std::_TC<(sizeof... (_UElements) == 1), at::Tensor&, at::Tensor&, at::Tensor&>::_NotSameTuple<_UElements ...>() && std::_TC<(1ul == sizeof... (_UElements)), at::Tensor&, at::Tensor&, at::Tensor&>::_MoveConstructibleTuple<_UElements ...>()) && std::_TC<(1ul == sizeof... (_UElements)), at::Tensor&, at::Tensor&, at::Tensor&>::_ImplicitlyMoveConvertibleTuple<_UElements ...>()) && (3ul >= 1)), bool>::type <anonymous> > constexpr std::tuple< <template-parameter-1-1> >::tuple(_UElements&& ...) [with _UElements = {std::tuple<at::Tensor&, at::Tensor&, at::Tensor&>}; typename std::enable_if<(((std::_TC<(sizeof... (_UElements) == 1), at::Tensor&, at::Tensor&, at::Tensor&>::_NotSameTuple<_UElements ...>() && std::_TC<(1ul == sizeof... (_UElements)), at::Tensor&, at::Tensor&, at::Tensor&>::_MoveConstructibleTuple<_UElements ...>()) && std::_TC<(1ul == sizeof... (_UElements)), at::Tensor&, at::Tensor&, at::Tensor&>::_ImplicitlyMoveConvertibleTuple<_UElements ...>()) && (3ul >= 1)), bool>::type <anonymous> = <missing>]\u2019\r\n/tmp/pytorch/torch/lib/build/aten/src/ATen/ATen/Functions.h:1626:61:   required from here\r\n/usr/lib/gcc/x86_64-pc-linux-gnu/6.4.0/include/g++-v6/tuple:489:65: error: mismatched argument pack lengths while expanding \u2018std::is_convertible<_UElements&&, _Elements>\u2019\r\n       return __and_<is_convertible<_UElements&&, _Elements>...>::value;\r\n                                                                 ^~~~~\r\n/usr/lib/gcc/x86_64-pc-linux-gnu/6.4.0/include/g++-v6/tuple:490:1: error: body of constexpr function \u2018static constexpr bool std::_TC<<anonymous>, _Elements>::_ImplicitlyMoveConvertibleTuple() [with _UElements = {std::tuple<at::Tensor&, at::Tensor&, at::Tensor&>}; bool <anonymous> = true; _Elements = {at::Tensor&, at::Tensor&, at::Tensor&}]\u2019 not a return-statement\r\n     }\r\n\r\n\r\nand then several more pages of this.  Any ideas?  Please let me know if there's particular information that I'm omitting that would be helpful."}