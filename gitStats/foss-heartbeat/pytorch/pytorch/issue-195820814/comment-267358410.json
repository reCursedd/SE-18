{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/267358410", "html_url": "https://github.com/pytorch/pytorch/issues/312#issuecomment-267358410", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/312", "id": 267358410, "node_id": "MDEyOklzc3VlQ29tbWVudDI2NzM1ODQxMA==", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "created_at": "2016-12-15T15:37:56Z", "updated_at": "2016-12-15T15:37:56Z", "author_association": "MEMBER", "body_html": "<p>It has to be the grad_output that's given to the Embedding's backward. This snippet doesn't leak:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> torch                                                   \n<span class=\"pl-k\">from</span> torch <span class=\"pl-k\">import</span> nn                                           \n<span class=\"pl-k\">from</span> torch.autograd <span class=\"pl-k\">import</span> Variable                            \n                                                               \nn_words <span class=\"pl-k\">=</span> <span class=\"pl-c1\">1000</span>                                                 \ndim <span class=\"pl-k\">=</span> <span class=\"pl-c1\">128</span>                                                      \nemb <span class=\"pl-k\">=</span> nn.Embedding(<span class=\"pl-c1\">1000</span>, <span class=\"pl-c1\">128</span>).cuda()                           \n                                                               \nx <span class=\"pl-k\">=</span> Variable(torch.LongTensor(<span class=\"pl-c1\">100</span>).random_(n_words)).cuda()    \ngo <span class=\"pl-k\">=</span> torch.ones(<span class=\"pl-c1\">100</span>, <span class=\"pl-c1\">128</span>).cuda()                               \n                                                               \n<span class=\"pl-k\">while</span> <span class=\"pl-c1\">True</span>:                                                    \n    emb(x).backward(go)                                        </pre></div>", "body_text": "It has to be the grad_output that's given to the Embedding's backward. This snippet doesn't leak:\nimport torch                                                   \nfrom torch import nn                                           \nfrom torch.autograd import Variable                            \n                                                               \nn_words = 1000                                                 \ndim = 128                                                      \nemb = nn.Embedding(1000, 128).cuda()                           \n                                                               \nx = Variable(torch.LongTensor(100).random_(n_words)).cuda()    \ngo = torch.ones(100, 128).cuda()                               \n                                                               \nwhile True:                                                    \n    emb(x).backward(go)", "body": "It has to be the grad_output that's given to the Embedding's backward. This snippet doesn't leak:\r\n```python\r\nimport torch                                                   \r\nfrom torch import nn                                           \r\nfrom torch.autograd import Variable                            \r\n                                                               \r\nn_words = 1000                                                 \r\ndim = 128                                                      \r\nemb = nn.Embedding(1000, 128).cuda()                           \r\n                                                               \r\nx = Variable(torch.LongTensor(100).random_(n_words)).cuda()    \r\ngo = torch.ones(100, 128).cuda()                               \r\n                                                               \r\nwhile True:                                                    \r\n    emb(x).backward(go)                                        \r\n```"}