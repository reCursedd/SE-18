{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/205296149", "pull_request_review_id": 140536916, "id": 205296149, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTI5NjE0OQ==", "diff_hunk": "@@ -280,42 +279,31 @@ std::string encodeRHS(Node * n) {\n     {aten::remainder, \"remainderf(${0}, ${1})\"},\n     {aten::pow, \"powf(${0}, ${1})\"},\n \n-    //alpha\n-    {aten::add, \"${0} + ${alpha}*${1}\"},\n-    {aten::sub, \"(${0} - ${alpha}*${1})\"},\n-\n-    // special\n-    {aten::lerp, \"${0} + ${weight}*(${1} - ${0})\"},\n-    {aten::clamp, \"min(max(${0},${min}),${max})\"},\n+    // binary with alpha\n+    {aten::add, \"${0} + ${2}*${1}\"},\n+    {aten::sub, \"(${0} - ${2}*${1})\"},\n \n     // simple derivatives\n     {aten::_sigmoid_backward, \"${0} * ${1} * (1.f - ${1})\"},\n     {aten::_tanh_backward,    \"${0} * (1.f - ${1} * ${1})\"},\n   };\n \n+  if (n->kind() == prim::Constant) {\n+    JIT_ASSERT(n->output()->type()->isSubtypeOf(*NumberType::get()));\n+    if (n->kindOf(attr::value) == AttributeKind::f) {\n+      return scalarValue(n->f(attr::value));\n+    } else {\n+      JIT_ASSERT(n->kindOf(attr::value) == AttributeKind::i);\n+      return scalarValue(n->i(attr::value));\n+    }\n+  }\n \n   TemplateEnv env;\n   size_t i = 0;\n   for(auto in : n->inputs()) {\n     env.s(std::to_string(i++), valueName(in));\n   }\n-  // TODO (apaszke): remove once we get rid of attributes\n-  // ops like div have a / b or a / 2 with the constant having the attribute other\n-  // so we add other as an input if it is present\n-  // 'pow' is the same but uses exponent as the attribute, so we handle that here as well\n-  if(n->hasAttribute(attr::other) || n->hasAttribute(attr::exponent)) {\n-    env.s(std::to_string(i), scalarValue(n->t(attr::other)));\n-  }\n-  // we also add any other scalar tensors to the env for special ops\n-  for(auto a : n->attributeNames()) {\n-    if(n->kindOf(a) == AttributeKind::t) {\n-      auto v = n->t(a);\n-      if(v.dim() == 0) {\n-        JIT_ASSERT(a.is_attr());\n-        env.s(a.toUnqualString(), scalarValue(v));\n-      }\n-    }\n-  }\n+", "path": "torch/csrc/jit/fusion_compiler.cpp", "position": 84, "original_position": 76, "commit_id": "1f52f39901e6d1f1d0d263b5025388a55194ecc6", "original_commit_id": "9ee72f1547825a8e27d9ca8a7f00ce31e9741aae", "user": {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, "body": "hurray!", "created_at": "2018-07-25T23:55:40Z", "updated_at": "2018-11-23T15:48:10Z", "html_url": "https://github.com/pytorch/pytorch/pull/9807#discussion_r205296149", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/9807", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/205296149"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/9807#discussion_r205296149"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/9807"}}, "body_html": "<p>hurray!</p>", "body_text": "hurray!"}