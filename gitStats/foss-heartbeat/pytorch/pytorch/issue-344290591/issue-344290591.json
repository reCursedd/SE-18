{"url": "https://api.github.com/repos/pytorch/pytorch/issues/9807", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/9807/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/9807/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/9807/events", "html_url": "https://github.com/pytorch/pytorch/pull/9807", "id": 344290591, "node_id": "MDExOlB1bGxSZXF1ZXN0MjAzNzE5ODg2", "number": 9807, "title": "Unify IR operator representation (stop using attributes in the JIT)", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 679953983, "node_id": "MDU6TGFiZWw2Nzk5NTM5ODM=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/jit", "name": "jit", "color": "c5def5", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-07-25T04:43:22Z", "updated_at": "2018-11-23T15:48:18Z", "closed_at": "2018-07-27T05:14:14Z", "author_association": "MEMBER", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/9807", "html_url": "https://github.com/pytorch/pytorch/pull/9807", "diff_url": "https://github.com/pytorch/pytorch/pull/9807.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/9807.patch"}, "body_html": "<p>Based on top of <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"344074275\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/9763\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/pytorch/pytorch/pull/9763/hovercard\" href=\"https://github.com/pytorch/pytorch/pull/9763\">#9763</a> (first 3 commits belong to that PR). The first commits from this PR are \"Stop using attributes ...\"</p>\n<p>I tried to separate the changes into fairly meaningful commits. I can't split them up into smaller PRs, because everything starts working and all tests pass only after the whole sequence, but hopefully this will make reviewing somewhat easier.</p>\n<p>Known issues/regressions/future tasks:</p>\n<ul>\n<li><code>aten::lerp</code> and <code>aten::clamp</code> are no longer fusable</li>\n<li><code>CreateAutodiffSubgraphs</code> needs a rewrite\n<ul>\n<li>It is much more strict now, and will miss a lot of opportunities, especially when viewing ops are involved. Our previous approach was \"ignore the assumption on shape availability in gradient formulas to determine differentiability, and hope that shape prop will be robust enough to actually deliver them before we differentiate\", which obviously doesn't scale well to more complex cases. We should either work on reducing the size dependency of grad formulas (feasible e.g. for <code>view</code>/<code>reshape</code>, unfeasible for <code>squeeze</code>/<code>unsqueeze</code>), or make <code>CreateAutodiffSubgraphs</code> integrate some kind of \"I could integrate this node into an AD subgraph, but will I be able to infer the shape of its input\" reasoning (kind of like a limited shape prop, that doesn't infer anything, and only tells if it <em>could</em> infer something).</li>\n<li>It sometimes creates constant-only (or constants + one node) graphs, which is useless</li>\n</ul>\n</li>\n<li>Broken <code>aten::add</code> in auto-batching, because it gained a non-tensor input. I changed the test for pointwise operations to use <code>aten::mul</code> instead, but I needed to disable the LSTM cell test. I'm not sure how scalar constants should be implemented in this case, because I don't fully understand our format. cc: <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=36351432\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ChunliF\">@ChunliF</a></li>\n<li>Graph import does some hacks to recover type of constants. This code should be removed once we'll gain the ability to export the IR along with value types.</li>\n<li>There's still a fair amount of dead code that can be removed. I didn't want to make this diff any bigger, and removing it is an easy task.</li>\n<li>Graph fuser could be improved to use signature matching (possibly using <code>OperatorSet</code>) instead of basing on node kinds.</li>\n<li>Manual constant propagation for the <code>ListConstruct</code> node in <code>torch/onnx/utils.py</code> should be replaced with a proper constant propagation pass (or we should ensure that the one we have handles at least this case before we remove this code).</li>\n</ul>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=370202\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/zdevito\">@zdevito</a></p>", "body_text": "Based on top of #9763 (first 3 commits belong to that PR). The first commits from this PR are \"Stop using attributes ...\"\nI tried to separate the changes into fairly meaningful commits. I can't split them up into smaller PRs, because everything starts working and all tests pass only after the whole sequence, but hopefully this will make reviewing somewhat easier.\nKnown issues/regressions/future tasks:\n\naten::lerp and aten::clamp are no longer fusable\nCreateAutodiffSubgraphs needs a rewrite\n\nIt is much more strict now, and will miss a lot of opportunities, especially when viewing ops are involved. Our previous approach was \"ignore the assumption on shape availability in gradient formulas to determine differentiability, and hope that shape prop will be robust enough to actually deliver them before we differentiate\", which obviously doesn't scale well to more complex cases. We should either work on reducing the size dependency of grad formulas (feasible e.g. for view/reshape, unfeasible for squeeze/unsqueeze), or make CreateAutodiffSubgraphs integrate some kind of \"I could integrate this node into an AD subgraph, but will I be able to infer the shape of its input\" reasoning (kind of like a limited shape prop, that doesn't infer anything, and only tells if it could infer something).\nIt sometimes creates constant-only (or constants + one node) graphs, which is useless\n\n\nBroken aten::add in auto-batching, because it gained a non-tensor input. I changed the test for pointwise operations to use aten::mul instead, but I needed to disable the LSTM cell test. I'm not sure how scalar constants should be implemented in this case, because I don't fully understand our format. cc: @ChunliF\nGraph import does some hacks to recover type of constants. This code should be removed once we'll gain the ability to export the IR along with value types.\nThere's still a fair amount of dead code that can be removed. I didn't want to make this diff any bigger, and removing it is an easy task.\nGraph fuser could be improved to use signature matching (possibly using OperatorSet) instead of basing on node kinds.\nManual constant propagation for the ListConstruct node in torch/onnx/utils.py should be replaced with a proper constant propagation pass (or we should ensure that the one we have handles at least this case before we remove this code).\n\n@zdevito", "body": "Based on top of #9763 (first 3 commits belong to that PR). The first commits from this PR are \"Stop using attributes ...\"\r\n\r\nI tried to separate the changes into fairly meaningful commits. I can't split them up into smaller PRs, because everything starts working and all tests pass only after the whole sequence, but hopefully this will make reviewing somewhat easier.\r\n\r\nKnown issues/regressions/future tasks:\r\n- `aten::lerp` and `aten::clamp` are no longer fusable\r\n- `CreateAutodiffSubgraphs` needs a rewrite\r\n  - It is much more strict now, and will miss a lot of opportunities, especially when viewing ops are involved. Our previous approach was \"ignore the assumption on shape availability in gradient formulas to determine differentiability, and hope that shape prop will be robust enough to actually deliver them before we differentiate\", which obviously doesn't scale well to more complex cases. We should either work on reducing the size dependency of grad formulas (feasible e.g. for `view`/`reshape`, unfeasible for `squeeze`/`unsqueeze`), or make `CreateAutodiffSubgraphs` integrate some kind of \"I could integrate this node into an AD subgraph, but will I be able to infer the shape of its input\" reasoning (kind of like a limited shape prop, that doesn't infer anything, and only tells if it *could* infer something).\r\n  - It sometimes creates constant-only (or constants + one node) graphs, which is useless\r\n- Broken `aten::add` in auto-batching, because it gained a non-tensor input. I changed the test for pointwise operations to use `aten::mul` instead, but I needed to disable the LSTM cell test. I'm not sure how scalar constants should be implemented in this case, because I don't fully understand our format. cc: @ChunliF \r\n- Graph import does some hacks to recover type of constants. This code should be removed once we'll gain the ability to export the IR along with value types.\r\n- There's still a fair amount of dead code that can be removed. I didn't want to make this diff any bigger, and removing it is an easy task.\r\n- Graph fuser could be improved to use signature matching (possibly using `OperatorSet`) instead of basing on node kinds.\r\n- Manual constant propagation for the `ListConstruct` node in `torch/onnx/utils.py` should be replaced with a proper constant propagation pass (or we should ensure that the one we have handles at least this case before we remove this code).\r\n\r\n@zdevito"}