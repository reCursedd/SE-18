{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/205296120", "pull_request_review_id": 140536916, "id": 205296120, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTI5NjEyMA==", "diff_hunk": "@@ -280,42 +279,31 @@ std::string encodeRHS(Node * n) {\n     {aten::remainder, \"remainderf(${0}, ${1})\"},\n     {aten::pow, \"powf(${0}, ${1})\"},\n \n-    //alpha\n-    {aten::add, \"${0} + ${alpha}*${1}\"},\n-    {aten::sub, \"(${0} - ${alpha}*${1})\"},\n-\n-    // special\n-    {aten::lerp, \"${0} + ${weight}*(${1} - ${0})\"},\n-    {aten::clamp, \"min(max(${0},${min}),${max})\"},\n+    // binary with alpha\n+    {aten::add, \"${0} + ${2}*${1}\"},\n+    {aten::sub, \"(${0} - ${2}*${1})\"},\n \n     // simple derivatives\n     {aten::_sigmoid_backward, \"${0} * ${1} * (1.f - ${1})\"},\n     {aten::_tanh_backward,    \"${0} * (1.f - ${1} * ${1})\"},\n   };\n \n+  if (n->kind() == prim::Constant) {\n+    JIT_ASSERT(n->output()->type()->isSubtypeOf(*NumberType::get()));", "path": "torch/csrc/jit/fusion_compiler.cpp", "position": null, "original_position": 45, "commit_id": "1f52f39901e6d1f1d0d263b5025388a55194ecc6", "original_commit_id": "9ee72f1547825a8e27d9ca8a7f00ce31e9741aae", "user": {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, "body": "It is safer to use `toIValue(n->output())` since it correctly encapsulates the rules for extracting constant values from constant nodes and will work for all types of constant nodes.", "created_at": "2018-07-25T23:55:26Z", "updated_at": "2018-11-23T15:48:10Z", "html_url": "https://github.com/pytorch/pytorch/pull/9807#discussion_r205296120", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/9807", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/205296120"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/9807#discussion_r205296120"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/9807"}}, "body_html": "<p>It is safer to use <code>toIValue(n-&gt;output())</code> since it correctly encapsulates the rules for extracting constant values from constant nodes and will work for all types of constant nodes.</p>", "body_text": "It is safer to use toIValue(n->output()) since it correctly encapsulates the rules for extracting constant values from constant nodes and will work for all types of constant nodes."}