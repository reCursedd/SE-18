{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/205456834", "pull_request_review_id": 140728498, "id": 205456834, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTQ1NjgzNA==", "diff_hunk": "@@ -387,55 +381,22 @@ def emit_record_trace(env):\n         if not should_trace(declaration):\n             return ('', '')\n \n-        # Note [clang-802.0.42 tuple overload bug]\n-        # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n-        # Originally, my plan for emit_$ecord_trace was to keep it as\n-        # simple as possible, if at the expense of some somewhat ugly\n-        # overloads.  So this meant we had a 'recordTrace' function\n-        # with overloads like this:\n-        #\n-        #   recordTrace(..., const Variable& out)\n-        #   recordTrace(..., const std::tuple<Variable, Variable>& out)\n-        #\n-        # Unfortunately, this triggers a bug in clang-802.0.42\n-        # (widely used in macOS Sierra 10.12.6) wherein a Variable is\n-        # implicitly convertible into a std::tuple<Variable, Variable>;\n-        # a minimal repro can be seen below here:\n-        #\n-        #   #include <tuple>\n-        #   struct T {};\n-        #   void f(const std::tuple<T, T>&) {}\n-        #   void g(T& x) { f(x); }\n-        #\n-        # To work around this bug, the code generator is a bit more\n-        # complicated, and is taught how to handle this situation.\n-\n         local = {}\n \n-        tensor_args = [arg for arg in declaration['arguments'] if arg['simple_type'] in {'Tensor', 'TensorList'}]\n-        local['tensor_args'] = [arg['name'] for arg in tensor_args]\n-        if any(arg['simple_type'] == 'TensorList' for arg in tensor_args):\n-            # Allocate a temporary vector with flatten and pass it in\n-            local['trace_inputs'] = CodeTemplate(\"flatten_tensor_args( $tensor_args )\").substitute(local)\n-        else:\n-            local['trace_inputs'] = CodeTemplate(\"{ ${tensor_args} }\").substitute(local)\n-\n-        local['record_attributes'] = []\n-        for arg in declaration['arguments']:\n-            if arg['simple_type'] in {'Tensor', 'TensorList'}:\n-                continue\n-            attr_name = RENAME_ATTRIBUTES.get((declaration['name'], arg['name']), arg['name'])\n-            local['record_attributes'].append(RECORD_ATTRIBUTE.substitute(attr_name=attr_name, name=arg['name']))\n-\n-        local['record_positional_attributes'] = []\n-        for i, arg in enumerate(declaration['arguments']):\n+        def prepare_arg(arg):\n             if arg['simple_type'] == 'Tensor':\n-                continue\n-            if arg['simple_type'] == 'TensorList':\n-                local['record_positional_attributes'] = POSITIONAL_ATTR_NYI\n-                break\n-            local['record_positional_attributes'].append(\n-                RECORD_POSITIONAL_ATTRIBUTE.substitute(name=arg['name'], i=i))\n+                return 'trace_inputs.push_back({});'.format(arg['name'])\n+            elif arg['simple_type'] == 'TensorList':\n+                return 'trace_inputs.insert(trace_inputs.end(), {n}.begin(), {n}.end());'.format(n=arg['name'])\n+            elif arg['simple_type'] == 'IntList':\n+                return 'trace_inputs.push_back(make_variable(getIntListTensor(\"{n}\", {n}), false));'.format(\n+                    n=arg['name'])\n+            elif arg['simple_type'] in {'bool', 'double', 'int64_t', 'Scalar'}:\n+                return 'trace_inputs.push_back(make_variable(jit::as_tensor({}), false));'.format(arg['name'])", "path": "tools/autograd/gen_variable_type.py", "position": null, "original_position": 76, "commit_id": "1f52f39901e6d1f1d0d263b5025388a55194ecc6", "original_commit_id": "9ee72f1547825a8e27d9ca8a7f00ce31e9741aae", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Looks like it's dead (it was used to stop emitting attributes before we merged the thread-local tracer). Will remove.", "created_at": "2018-07-26T13:33:17Z", "updated_at": "2018-11-23T15:48:12Z", "html_url": "https://github.com/pytorch/pytorch/pull/9807#discussion_r205456834", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/9807", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/205456834"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/9807#discussion_r205456834"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/9807"}}, "body_html": "<p>Looks like it's dead (it was used to stop emitting attributes before we merged the thread-local tracer). Will remove.</p>", "body_text": "Looks like it's dead (it was used to stop emitting attributes before we merged the thread-local tracer). Will remove.", "in_reply_to_id": 205293662}