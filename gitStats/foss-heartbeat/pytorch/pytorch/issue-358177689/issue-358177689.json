{"url": "https://api.github.com/repos/pytorch/pytorch/issues/11394", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/11394/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/11394/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/11394/events", "html_url": "https://github.com/pytorch/pytorch/pull/11394", "id": 358177689, "node_id": "MDExOlB1bGxSZXF1ZXN0MjE0MDEzNzU1", "number": 11394, "title": "Cleanup byte swapping utilities to generate optimal code on the platforms we care about.", "user": {"login": "resistor", "id": 9796, "node_id": "MDQ6VXNlcjk3OTY=", "avatar_url": "https://avatars0.githubusercontent.com/u/9796?v=4", "gravatar_id": "", "url": "https://api.github.com/users/resistor", "html_url": "https://github.com/resistor", "followers_url": "https://api.github.com/users/resistor/followers", "following_url": "https://api.github.com/users/resistor/following{/other_user}", "gists_url": "https://api.github.com/users/resistor/gists{/gist_id}", "starred_url": "https://api.github.com/users/resistor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/resistor/subscriptions", "organizations_url": "https://api.github.com/users/resistor/orgs", "repos_url": "https://api.github.com/users/resistor/repos", "events_url": "https://api.github.com/users/resistor/events{/privacy}", "received_events_url": "https://api.github.com/users/resistor/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-09-07T19:03:27Z", "updated_at": "2018-09-10T22:41:38Z", "closed_at": "2018-09-10T22:41:38Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/11394", "html_url": "https://github.com/pytorch/pytorch/pull/11394", "diff_url": "https://github.com/pytorch/pytorch/pull/11394.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/11394.patch"}, "body_html": "<p>While the use of memcpy as part of the byte swapping sequence looks funky, all major<br>\ncompilers recognize and optimize this pattern reliably, resulting in essentially<br>\noptimal code generation.</p>\n<p>For example, decodeUInt32LE goes from this on iOS arm64:</p>\n<blockquote>\n<pre><code>    ldrb    w8, [x0, #3]\n    ldrb    w9, [x0, #2]\n    bfi     w8, w9, #8, #8\n    ldrb    w9, [x0, #1]\n    bfi     w8, w9, #16, #8\n    ldrb            w9, [x0]\n    bfi     w8, w9, #24, #8\n    mov      x0, x8\n    ret\n</code></pre>\n</blockquote>\n<p>To this:</p>\n<blockquote>\n<pre><code>    ldr             w8, [x0]\n    rev     w0, w8\n    ret\n</code></pre>\n</blockquote>", "body_text": "While the use of memcpy as part of the byte swapping sequence looks funky, all major\ncompilers recognize and optimize this pattern reliably, resulting in essentially\noptimal code generation.\nFor example, decodeUInt32LE goes from this on iOS arm64:\n\n    ldrb    w8, [x0, #3]\n    ldrb    w9, [x0, #2]\n    bfi     w8, w9, #8, #8\n    ldrb    w9, [x0, #1]\n    bfi     w8, w9, #16, #8\n    ldrb            w9, [x0]\n    bfi     w8, w9, #24, #8\n    mov      x0, x8\n    ret\n\n\nTo this:\n\n    ldr             w8, [x0]\n    rev     w0, w8\n    ret", "body": "While the use of memcpy as part of the byte swapping sequence looks funky, all major\r\ncompilers recognize and optimize this pattern reliably, resulting in essentially\r\noptimal code generation.\r\n\r\nFor example, decodeUInt32LE goes from this on iOS arm64:\r\n>         ldrb    w8, [x0, #3]\r\n>         ldrb    w9, [x0, #2]\r\n>         bfi     w8, w9, #8, #8\r\n>         ldrb    w9, [x0, #1]\r\n>         bfi     w8, w9, #16, #8\r\n>         ldrb            w9, [x0]\r\n>         bfi     w8, w9, #24, #8\r\n>         mov      x0, x8\r\n>         ret\r\n\r\nTo this:\r\n>         ldr             w8, [x0]\r\n>         rev     w0, w8\r\n>         ret\r\n\r\n"}