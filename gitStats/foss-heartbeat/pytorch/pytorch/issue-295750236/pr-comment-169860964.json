{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/169860964", "pull_request_review_id": 98453150, "id": 169860964, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2OTg2MDk2NA==", "diff_hunk": "@@ -54,37 +55,71 @@ void THNN_(MultiMarginCriterion_updateOutput)(\n     int nframe = input->size[0];\n     THArgCheck((target->nDimension == 1) && (target->size[0] == nframe), 3,\n                \"inconsistent target size\");\n-    THCTensor *output_ = THCTensor_(newWithSize1d)(state, input->size[0]);  // tmp outupt buffer\n     dim3 blocks(input->size[0]);\n     dim3 threads(MULTIMARGIN_THREADS);\n-    if (p == 1)\n+\n+    if (!reduce)\n     {\n-      cunn_MultiMarginCriterion_updateOutput_kernel<1, real, accreal> <<<blocks,threads, 0, THCState_getCurrentStream(state)>>>(\n-        THCTensor_(data)(state, output_),\n-        THCTensor_(data)(state, input),\n-        THCIndexTensor_(data)(state, target),\n-        weights ? THCTensor_(data)(state, weights) : NULL,\n-        nframe, input->size[1],\n-        sizeAverage,\n-        margin\n-      );\n+      THCTensor_(resize1d)(state, output, input->size[0]);\n+      if (p == 1)\n+      {\n+        cunn_MultiMarginCriterion_updateOutput_kernel<1, real, accreal> <<<blocks,threads, 0, THCState_getCurrentStream(state)>>>(\n+          THCTensor_(data)(state, output),\n+          THCTensor_(data)(state, input),\n+          THCIndexTensor_(data)(state, target),\n+          weights ? THCTensor_(data)(state, weights) : NULL,\n+          nframe, input->size[1],\n+          false,\n+          margin\n+        );\n+      }\n+      else if (p == 2)\n+      {\n+        cunn_MultiMarginCriterion_updateOutput_kernel<2, real, accreal> <<<blocks,threads, 0, THCState_getCurrentStream(state)>>>(\n+          THCTensor_(data)(state, output),\n+          THCTensor_(data)(state, input),\n+          THCIndexTensor_(data)(state, target),\n+          weights ? THCTensor_(data)(state, weights) : NULL,\n+          input->size[0], input->size[1],", "path": "aten/src/THCUNN/generic/MultiMarginCriterion.cu", "position": null, "original_position": 62, "commit_id": "c6b323d2569e8b07f62a3aced32881c4c636d42f", "original_commit_id": "a83021661289221b832a6e19ba377d52e8264045", "user": {"login": "SsnL", "id": 5674597, "node_id": "MDQ6VXNlcjU2NzQ1OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5674597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SsnL", "html_url": "https://github.com/SsnL", "followers_url": "https://api.github.com/users/SsnL/followers", "following_url": "https://api.github.com/users/SsnL/following{/other_user}", "gists_url": "https://api.github.com/users/SsnL/gists{/gist_id}", "starred_url": "https://api.github.com/users/SsnL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SsnL/subscriptions", "organizations_url": "https://api.github.com/users/SsnL/orgs", "repos_url": "https://api.github.com/users/SsnL/repos", "events_url": "https://api.github.com/users/SsnL/events{/privacy}", "received_events_url": "https://api.github.com/users/SsnL/received_events", "type": "User", "site_admin": false}, "body": "nit: `nframe` instead of `input->size[0]`", "created_at": "2018-02-22T05:56:43Z", "updated_at": "2018-11-23T15:39:48Z", "html_url": "https://github.com/pytorch/pytorch/pull/5150#discussion_r169860964", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/5150", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/169860964"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/5150#discussion_r169860964"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/5150"}}, "body_html": "<p>nit: <code>nframe</code> instead of <code>input-&gt;size[0]</code></p>", "body_text": "nit: nframe instead of input->size[0]"}