{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/150113141", "pull_request_review_id": 75617673, "id": 150113141, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MDExMzE0MQ==", "diff_hunk": "@@ -106,13 +105,36 @@ def compile(arg=None, **kwargs):\n     function must declare *all* Variable inputs in its arguments.\n \n         >>> @jit.compile\n-        >>> def f(x);\n+        >>> def f(x):\n         >>>     return x * 2\n     \"\"\"\n     def _compile(arg):\n         if inspect.isclass(arg):\n-            if issubclass(arg, _CompiledMixin):\n-                raise TypeError(\"Cannot compile a model class that already is compiled\")\n+            class CompiledModuleMeta(type):\n+                def __call__(cls, *args, **kwargs):\n+                    # NOTE: this is called whenever an instance of this class is created\n+                    # The super call below will call __new__ and __init__, and we will\n+                    # patch things later.\n+                    try:\n+                        obj = super(CompiledModuleMeta, cls).__call__(*args, **kwargs)\n+                    except TypeError as e:\n+                        # If this fails here, the user probably didn't use this as a class decorator\n+                        if \"super\" in str(e):\n+                            raise_from(TypeError(\"torch.jit.compile must be used as a class decorator; \"\n+                                                \"using it on an already defined class is not valid.\"\n+                                                \"\\n\\nOriginal error: {}\".format(str(e))), e)\n+                        else:\n+                            raise\n+\n+                    meth = obj.forward", "path": "torch/jit/__init__.py", "position": null, "original_position": 45, "commit_id": "f98292f85b7bceddb52a7e160cb94a9aef261cd2", "original_commit_id": "66aa44d2b1851587309961284cf2e5feaa37fed5", "user": {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, "body": "used?", "created_at": "2017-11-09T23:02:16Z", "updated_at": "2018-11-23T15:36:19Z", "html_url": "https://github.com/pytorch/pytorch/pull/3597#discussion_r150113141", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/3597", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/150113141"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/3597#discussion_r150113141"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/3597"}}, "body_html": "<p>used?</p>", "body_text": "used?"}