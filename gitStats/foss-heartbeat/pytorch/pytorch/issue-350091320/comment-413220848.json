{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/413220848", "html_url": "https://github.com/pytorch/pytorch/pull/10467#issuecomment-413220848", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/10467", "id": 413220848, "node_id": "MDEyOklzc3VlQ29tbWVudDQxMzIyMDg0OA==", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "created_at": "2018-08-15T14:46:34Z", "updated_at": "2018-08-15T14:46:34Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=17890620\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/dzhulgakov\">@dzhulgakov</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=4958441\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/jerryzh168\">@jerryzh168</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=79994\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/orionr\">@orionr</a> I plan on working around this. However, I want to point out that there is one good reason to merge this PR earlier rather than later: <code>operator&lt;&lt;</code>. As typeid.h is written today, if you are in a namespace which has an <code>operator&lt;&lt;</code> overload defined in it (e.g., <code>at</code> namespace), you cannot print TypeIdentifier using <code>s &lt;&lt; x</code>; it will complain that no overload is eligible. This is because the non-top-level <code>operator&lt;&lt;</code> overload will take precedence over the global overload (which is in Caffe2) and prevent C++ from finding the global overloads.</p>\n<p>An alternative is to fix this in Caffe2 by moving all of Caffe2's <code>operator&lt;&lt;</code> overload definitions into the caffe2 namespace. I'll probably submit a patch to do this.</p>", "body_text": "@dzhulgakov @jerryzh168 @orionr I plan on working around this. However, I want to point out that there is one good reason to merge this PR earlier rather than later: operator<<. As typeid.h is written today, if you are in a namespace which has an operator<< overload defined in it (e.g., at namespace), you cannot print TypeIdentifier using s << x; it will complain that no overload is eligible. This is because the non-top-level operator<< overload will take precedence over the global overload (which is in Caffe2) and prevent C++ from finding the global overloads.\nAn alternative is to fix this in Caffe2 by moving all of Caffe2's operator<< overload definitions into the caffe2 namespace. I'll probably submit a patch to do this.", "body": "@dzhulgakov @jerryzh168 @orionr I plan on working around this. However, I want to point out that there is one good reason to merge this PR earlier rather than later: `operator<<`. As typeid.h is written today, if you are in a namespace which has an `operator<<` overload defined in it (e.g., `at` namespace), you cannot print TypeIdentifier using `s << x`; it will complain that no overload is eligible. This is because the non-top-level `operator<<` overload will take precedence over the global overload (which is in Caffe2) and prevent C++ from finding the global overloads.\r\n\r\nAn alternative is to fix this in Caffe2 by moving all of Caffe2's `operator<<` overload definitions into the caffe2 namespace. I'll probably submit a patch to do this."}