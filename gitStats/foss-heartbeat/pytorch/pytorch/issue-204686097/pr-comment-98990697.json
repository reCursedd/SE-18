{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/98990697", "pull_request_review_id": 19650803, "id": 98990697, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk4OTkwNjk3", "diff_hunk": "@@ -0,0 +1,454 @@\n+#ifndef THS_GENERIC_FILE\n+#define THS_GENERIC_FILE \"tensors/generic/THSTensor.cpp\"\n+#else\n+\n+template<>\n+THSTensor<real>::THSTensor():\n+  tensor(THSTensor_(new)())\n+  {};\n+\n+template<>\n+THSTensor<real>::THSTensor(THSRealTensor *wrapped):\n+  tensor(wrapped)\n+  {};\n+\n+template<>\n+THSTensor<real>::~THSTensor() {\n+  if (tensor)\n+    THSTensor_(free)(tensor);\n+}\n+\n+template<>\n+auto THSTensor<real>::clone() const -> THSTensor* {\n+  return new THSTensor(THSTensor_(newClone)(tensor));\n+}\n+\n+template<>\n+auto THSTensor<real>::clone_shallow() -> THSTensor* {\n+  THSTensor_(retain)(tensor);\n+  return new THSTensor(tensor);\n+}\n+\n+template<>\n+int THSTensor<real>::nDim() const {\n+  return tensor->nDimension;\n+}\n+\n+template<>\n+auto THSTensor<real>::sizes() const -> long_range {\n+  return std::vector<long>(tensor->size, tensor->size + tensor->nDimension);\n+}\n+\n+template<>\n+const long* THSTensor<real>::rawSizes() const {\n+  return tensor->size;\n+}\n+\n+template<>\n+auto THSTensor<real>::strides() const -> long_range {\n+  throw std::runtime_error(\"THSTensor::strides() not supported\");\n+}\n+\n+template<>\n+const long* THSTensor<real>::rawStrides() const {\n+  throw std::runtime_error(\"THSTensor::rawStrides() not supported\");\n+}\n+\n+template<>\n+std::size_t THSTensor<real>::storageOffset() const {\n+  throw std::runtime_error(\"THSTensor::storageOffset() not supported\");\n+}\n+\n+template<>\n+std::size_t THSTensor<real>::elementSize() const {\n+  return sizeof(real);\n+}\n+\n+template<>\n+long long THSTensor<real>::numel() const {\n+  throw std::runtime_error(\"THSTensor::>::() not supported\");\n+}\n+\n+template<>\n+bool THSTensor<real>::isContiguous() const {\n+  throw std::runtime_error(\"THSTensor::isContiguous() not supported\");\n+}\n+\n+template<>\n+void* THSTensor<real>::data() {\n+  throw std::runtime_error(\"THSTensor::>::() not supported\");\n+}\n+\n+template<>\n+const void* THSTensor<real>::data() const {\n+  throw std::runtime_error(\"THSTensor::real() not supported\");\n+}\n+\n+template<>\n+void* THSTensor<real>::cdata() {\n+  throw std::runtime_error(\"THSTensor::>::() not supported\");\n+}\n+\n+template<>\n+const void* THSTensor<real>::cdata() const {\n+  throw std::runtime_error(\"THSTensor::real() not supported\");\n+}\n+\n+template<>\n+auto THSTensor<real>::resize(const std::initializer_list<long> &new_size) -> THSTensor& {\n+  throw std::runtime_error(\"THSTensor::resize() not supported\");\n+}\n+\n+template<>\n+auto THSTensor<real>::resize(const std::vector<long> &new_size) -> THSTensor& {\n+  throw std::runtime_error(\"THSTensor::resize() not supported\");\n+}\n+\n+template<>\n+auto THSTensor<real>::resize(THLongStorage *size, THLongStorage *stride) -> THSTensor& {\n+  throw std::runtime_error(\"THSTensor::resize() not supported\");\n+}\n+\n+template<>\n+auto THSTensor<real>::resizeAs(const Tensor& src) -> THSTensor& {\n+  throw std::runtime_error(\"THSTensor::resizeAs() not supported\");\n+}\n+\n+template<>\n+template<typename iterator>\n+auto THSTensor<real>::resize(const iterator& begin, const iterator& end) -> THSTensor& {\n+  throw std::runtime_error(\"THSTensor::resize() not supported\");\n+}\n+\n+template<>\n+auto THSTensor<real>::set(const Tensor& src) -> THSTensor& {\n+  throw std::runtime_error(\"THSTensor::set() not supported\");\n+}\n+\n+template<>\n+auto THSTensor<real>::setStorage(const Storage& storage,\n+                                 ptrdiff_t storageOffset,\n+                                 THLongStorage *size,\n+                                 THLongStorage *stride) -> THSTensor& {\n+  throw std::runtime_error(\"THSTensor:: THSTensor() not supported\");}\n+\n+\n+template<>\n+auto THSTensor<real>::narrow(const Tensor& src,\n+                            int dimension,\n+                            long firstIndex,\n+                            long size) -> THSTensor& {\n+  throw std::runtime_error(\"THSTensor::&() not supported\");}\n+\n+\n+template<>\n+auto THSTensor<real>::select(const Tensor& src, int dimension,\n+                             long sliceIndex) -> THSTensor& {\n+  throw std::runtime_error(\"THSTensor::&() not supported\");}\n+\n+\n+template<>\n+auto THSTensor<real>::transpose(const Tensor& src, int dimension1,\n+                                int dimension2) -> THSTensor& {\n+  throw std::runtime_error(\"THSTensor::&() not supported\");}\n+\n+\n+template<>\n+auto THSTensor<real>::unfold(const Tensor& src, int dimension,\n+                             long size, long step) ->THSTensor& {\n+  throw std::runtime_error(\"THSTensor::)() not supported\");}", "path": "torch/lib/THPP/tensors/generic/THSTensor.cpp", "position": null, "original_position": 159, "commit_id": "cba2a7b7405ebb8b1b721e148f9deb6e02b1a858", "original_commit_id": "2af5b92b1ff6f6a779738bce66f81c9cdb23ffb2", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": ":)()", "created_at": "2017-02-01T20:46:50Z", "updated_at": "2018-11-23T15:32:21Z", "html_url": "https://github.com/pytorch/pytorch/pull/667#discussion_r98990697", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/667", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/98990697"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/667#discussion_r98990697"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/667"}}, "body_html": "<p>:)()</p>", "body_text": ":)()"}