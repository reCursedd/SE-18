{"url": "https://api.github.com/repos/pytorch/pytorch/issues/9592", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/9592/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/9592/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/9592/events", "html_url": "https://github.com/pytorch/pytorch/issues/9592", "id": 342836679, "node_id": "MDU6SXNzdWUzNDI4MzY2Nzk=", "number": 9592, "title": "nn.Conv* incostintent error depending on stride", "user": {"login": "maxme1", "id": 13220317, "node_id": "MDQ6VXNlcjEzMjIwMzE3", "avatar_url": "https://avatars1.githubusercontent.com/u/13220317?v=4", "gravatar_id": "", "url": "https://api.github.com/users/maxme1", "html_url": "https://github.com/maxme1", "followers_url": "https://api.github.com/users/maxme1/followers", "following_url": "https://api.github.com/users/maxme1/following{/other_user}", "gists_url": "https://api.github.com/users/maxme1/gists{/gist_id}", "starred_url": "https://api.github.com/users/maxme1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/maxme1/subscriptions", "organizations_url": "https://api.github.com/users/maxme1/orgs", "repos_url": "https://api.github.com/users/maxme1/repos", "events_url": "https://api.github.com/users/maxme1/events{/privacy}", "received_events_url": "https://api.github.com/users/maxme1/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-07-19T18:17:41Z", "updated_at": "2018-07-19T18:17:41Z", "closed_at": null, "author_association": "NONE", "body_html": "<h2>Issue description</h2>\n<p>Convolutions do not raise an exception for too small input shape if <code>stride &gt; 1</code>.</p>\n<h2>Code example</h2>\n<p>Suppose we have a following convolution:</p>\n<div class=\"highlight highlight-source-python\"><pre>conv <span class=\"pl-k\">=</span> torch.nn.Conv2d(<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>, <span class=\"pl-v\">kernel_size</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">3</span>, <span class=\"pl-v\">dilation</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">2</span>, <span class=\"pl-v\">stride</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">1</span>)\ntensor <span class=\"pl-k\">=</span> torch.empty(<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">4</span>, <span class=\"pl-c1\">4</span>)\nconv(tensor).shape</pre></div>\n<p>This code raises a <code>RuntimeError: Given input size per channel: (4 x 4). Calculated output size per channel: (0 x 0)</code>. Which is quite expected.</p>\n<p>Now change the <code>stride</code> to 2:</p>\n<div class=\"highlight highlight-source-python\"><pre>conv <span class=\"pl-k\">=</span> torch.nn.Conv2d(<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>, <span class=\"pl-v\">kernel_size</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">3</span>, <span class=\"pl-v\">dilation</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">2</span>, <span class=\"pl-v\">stride</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">2</span>)\ntensor <span class=\"pl-k\">=</span> torch.empty(<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">4</span>, <span class=\"pl-c1\">4</span>)\nconv(tensor).shape</pre></div>\n<p>Which gives <code>torch.Size([1, 1, 1, 1])</code>. Is this expected behavior?</p>\n<p>I guess this is because in the formula for the output shape there is a division by the stride and the check is performed before taking the <code>floor</code> operation.</p>\n<h2>System Info</h2>\n<ul>\n<li>How you installed PyTorch: conda</li>\n<li>OS: Linux</li>\n<li>PyTorch version: 0.4</li>\n<li>Python version: 3.6</li>\n</ul>\n<p>The code was run on CPU.</p>", "body_text": "Issue description\nConvolutions do not raise an exception for too small input shape if stride > 1.\nCode example\nSuppose we have a following convolution:\nconv = torch.nn.Conv2d(1, 1, kernel_size=3, dilation=2, stride=1)\ntensor = torch.empty(1, 1, 4, 4)\nconv(tensor).shape\nThis code raises a RuntimeError: Given input size per channel: (4 x 4). Calculated output size per channel: (0 x 0). Which is quite expected.\nNow change the stride to 2:\nconv = torch.nn.Conv2d(1, 1, kernel_size=3, dilation=2, stride=2)\ntensor = torch.empty(1, 1, 4, 4)\nconv(tensor).shape\nWhich gives torch.Size([1, 1, 1, 1]). Is this expected behavior?\nI guess this is because in the formula for the output shape there is a division by the stride and the check is performed before taking the floor operation.\nSystem Info\n\nHow you installed PyTorch: conda\nOS: Linux\nPyTorch version: 0.4\nPython version: 3.6\n\nThe code was run on CPU.", "body": "## Issue description\r\n\r\nConvolutions do not raise an exception for too small input shape if `stride > 1`.\r\n\r\n## Code example\r\n\r\nSuppose we have a following convolution:\r\n```python\r\nconv = torch.nn.Conv2d(1, 1, kernel_size=3, dilation=2, stride=1)\r\ntensor = torch.empty(1, 1, 4, 4)\r\nconv(tensor).shape\r\n```\r\nThis code raises a `RuntimeError: Given input size per channel: (4 x 4). Calculated output size per channel: (0 x 0)`. Which is quite expected.\r\n\r\nNow change the `stride` to 2:\r\n```python\r\nconv = torch.nn.Conv2d(1, 1, kernel_size=3, dilation=2, stride=2)\r\ntensor = torch.empty(1, 1, 4, 4)\r\nconv(tensor).shape\r\n```\r\nWhich gives `torch.Size([1, 1, 1, 1])`. Is this expected behavior? \r\n\r\nI guess this is because in the formula for the output shape there is a division by the stride and the check is performed before taking the `floor` operation.\r\n\r\n## System Info\r\n- How you installed PyTorch: conda\r\n- OS: Linux\r\n- PyTorch version: 0.4\r\n- Python version: 3.6\r\n\r\nThe code was run on CPU."}