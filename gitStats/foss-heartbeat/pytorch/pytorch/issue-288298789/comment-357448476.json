{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/357448476", "html_url": "https://github.com/pytorch/pytorch/issues/4649#issuecomment-357448476", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/4649", "id": 357448476, "node_id": "MDEyOklzc3VlQ29tbWVudDM1NzQ0ODQ3Ng==", "user": {"login": "benvcutilli", "id": 23709161, "node_id": "MDQ6VXNlcjIzNzA5MTYx", "avatar_url": "https://avatars1.githubusercontent.com/u/23709161?v=4", "gravatar_id": "", "url": "https://api.github.com/users/benvcutilli", "html_url": "https://github.com/benvcutilli", "followers_url": "https://api.github.com/users/benvcutilli/followers", "following_url": "https://api.github.com/users/benvcutilli/following{/other_user}", "gists_url": "https://api.github.com/users/benvcutilli/gists{/gist_id}", "starred_url": "https://api.github.com/users/benvcutilli/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/benvcutilli/subscriptions", "organizations_url": "https://api.github.com/users/benvcutilli/orgs", "repos_url": "https://api.github.com/users/benvcutilli/repos", "events_url": "https://api.github.com/users/benvcutilli/events{/privacy}", "received_events_url": "https://api.github.com/users/benvcutilli/received_events", "type": "User", "site_admin": false}, "created_at": "2018-01-13T16:41:28Z", "updated_at": "2018-01-13T16:42:16Z", "author_association": "NONE", "body_html": "<p>Well I mean I can try, but I would rather see a change where Variables sliced from others keep the gradients for each of the slice's elements, even if it is sliced before the backwards. Intuitively this makes sense; slicing alone doesn't change the equation that you are differentiating, so the gradient wouldn't change, and in normal Python, when slicing a list of objects, you end up with not just the objects but all their fields too. Further, there'd be little memory increase (unless for some reason the overhead is a lot larger than I'd think it would be) as you'd just point back to the respective slice in the <code>.grad</code> field of <code>superVariable</code>.</p>\n<p>So I guess consider this as a feature request. There may have already been a discussion on this and a subsequent hard decision, but if not, that's my recommendation.</p>", "body_text": "Well I mean I can try, but I would rather see a change where Variables sliced from others keep the gradients for each of the slice's elements, even if it is sliced before the backwards. Intuitively this makes sense; slicing alone doesn't change the equation that you are differentiating, so the gradient wouldn't change, and in normal Python, when slicing a list of objects, you end up with not just the objects but all their fields too. Further, there'd be little memory increase (unless for some reason the overhead is a lot larger than I'd think it would be) as you'd just point back to the respective slice in the .grad field of superVariable.\nSo I guess consider this as a feature request. There may have already been a discussion on this and a subsequent hard decision, but if not, that's my recommendation.", "body": "Well I mean I can try, but I would rather see a change where Variables sliced from others keep the gradients for each of the slice's elements, even if it is sliced before the backwards. Intuitively this makes sense; slicing alone doesn't change the equation that you are differentiating, so the gradient wouldn't change, and in normal Python, when slicing a list of objects, you end up with not just the objects but all their fields too. Further, there'd be little memory increase (unless for some reason the overhead is a lot larger than I'd think it would be) as you'd just point back to the respective slice in the `.grad` field of `superVariable`.\r\n\r\nSo I guess consider this as a feature request. There may have already been a discussion on this and a subsequent hard decision, but if not, that's my recommendation."}