{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/299956331", "html_url": "https://github.com/pytorch/pytorch/issues/1512#issuecomment-299956331", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/1512", "id": 299956331, "node_id": "MDEyOklzc3VlQ29tbWVudDI5OTk1NjMzMQ==", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "created_at": "2017-05-08T18:48:45Z", "updated_at": "2017-05-08T18:49:44Z", "author_association": "MEMBER", "body_html": "<p>I don't think it's a good idea to add that to the default collate_fn. It sounds like an application specific thing. My solution would look like below. Seems quite simple and non-hacky (I wouldn't consider function composition monkey-patching):</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">from</span> torch.utils.data.dataloader <span class=\"pl-k\">import</span> default_collate\n\n<span class=\"pl-k\">class</span> <span class=\"pl-en\">BBoxList</span>(<span class=\"pl-c1\">list</span>): <span class=\"pl-k\">pass</span>\n\n<span class=\"pl-k\">class</span> <span class=\"pl-en\">MyDataset</span>(<span class=\"pl-e\">Dataset</span>):\n    <span class=\"pl-k\">def</span> <span class=\"pl-c1\">__getitem__</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>, <span class=\"pl-smi\">i</span>):\n        <span class=\"pl-k\">return</span> <span class=\"pl-c1\">self</span>._load_sample(i), BBoxList([<span class=\"pl-c1\">self</span>._load_bbox(i)])\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">collate_fn</span>(<span class=\"pl-smi\">batch</span>):\n    <span class=\"pl-k\">if</span> <span class=\"pl-c1\">isinstance</span>(batch, BBoxList):\n        <span class=\"pl-k\">return</span> batch\n    <span class=\"pl-k\">return</span> default_collate(batch)\n\ndataloader <span class=\"pl-k\">=</span> torch.utils.data.DataLoader(<span class=\"pl-c1\">...</span>, <span class=\"pl-v\">collate_fn</span><span class=\"pl-k\">=</span>collate_fn)</pre></div>", "body_text": "I don't think it's a good idea to add that to the default collate_fn. It sounds like an application specific thing. My solution would look like below. Seems quite simple and non-hacky (I wouldn't consider function composition monkey-patching):\nfrom torch.utils.data.dataloader import default_collate\n\nclass BBoxList(list): pass\n\nclass MyDataset(Dataset):\n    def __getitem__(self, i):\n        return self._load_sample(i), BBoxList([self._load_bbox(i)])\n\ndef collate_fn(batch):\n    if isinstance(batch, BBoxList):\n        return batch\n    return default_collate(batch)\n\ndataloader = torch.utils.data.DataLoader(..., collate_fn=collate_fn)", "body": "I don't think it's a good idea to add that to the default collate_fn. It sounds like an application specific thing. My solution would look like below. Seems quite simple and non-hacky (I wouldn't consider function composition monkey-patching):\r\n```python\r\nfrom torch.utils.data.dataloader import default_collate\r\n\r\nclass BBoxList(list): pass\r\n\r\nclass MyDataset(Dataset):\r\n    def __getitem__(self, i):\r\n        return self._load_sample(i), BBoxList([self._load_bbox(i)])\r\n\r\ndef collate_fn(batch):\r\n    if isinstance(batch, BBoxList):\r\n        return batch\r\n    return default_collate(batch)\r\n\r\ndataloader = torch.utils.data.DataLoader(..., collate_fn=collate_fn)\r\n```"}