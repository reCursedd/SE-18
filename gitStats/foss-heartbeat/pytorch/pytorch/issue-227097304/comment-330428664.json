{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/330428664", "html_url": "https://github.com/pytorch/pytorch/issues/1512#issuecomment-330428664", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/1512", "id": 330428664, "node_id": "MDEyOklzc3VlQ29tbWVudDMzMDQyODY2NA==", "user": {"login": "mnicnc404", "id": 2225912, "node_id": "MDQ6VXNlcjIyMjU5MTI=", "avatar_url": "https://avatars3.githubusercontent.com/u/2225912?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mnicnc404", "html_url": "https://github.com/mnicnc404", "followers_url": "https://api.github.com/users/mnicnc404/followers", "following_url": "https://api.github.com/users/mnicnc404/following{/other_user}", "gists_url": "https://api.github.com/users/mnicnc404/gists{/gist_id}", "starred_url": "https://api.github.com/users/mnicnc404/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mnicnc404/subscriptions", "organizations_url": "https://api.github.com/users/mnicnc404/orgs", "repos_url": "https://api.github.com/users/mnicnc404/repos", "events_url": "https://api.github.com/users/mnicnc404/events{/privacy}", "received_events_url": "https://api.github.com/users/mnicnc404/received_events", "type": "User", "site_admin": false}, "created_at": "2017-09-19T04:50:29Z", "updated_at": "2017-09-19T05:03:47Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Please correct me if I get it wrong, but <code>isinstance(batch, BBoxList)</code> would never be evoked since <code>batch</code> is a list. <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=4583066\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/apaszke\">@apaszke</a></p>\n<p>An alternative way which might be not so efficient (following the settings from <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1041752\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/vadimkantorov\">@vadimkantorov</a>):</p>\n<pre><code>import torch\nfrom torch.utils.data import DataLoader\n# No need to define a new class\n# Suppose you know the order of your customized Dataset\n\ndef collate_fn(batch):\n    # Note that batch is a list \n    batch = list(map(list, zip(*batch)))  # transpose list of list\n    out = None\n    # You should know that batch[0] is a fixed-size tensor since you're using your customized Dataset\n    # reshape batch[0] as (N, H, W)\n    # batch[1] contains tensors of different sizes; just let it be a list.\n    # If your num_workers in DataLoader is bigger than 0\n    #     numel = sum([x.numel() for x in batch[0]])\n    #     storage = batch[0][0].storage()._new_shared(numel)\n    #     out = batch[0][0].new(storage)\n    batch[0] = torch.stack(batch[0], 0, out=out)\n    return batch\n\nloader = DataLoader(dataset = [(torch.zeros(2, 2), torch.zeros(i, 4)) for i in range(3, 5)], batch_size = 2, collate_fn = collate_fn)\n# no need to wrap torch.zeros(i, 4) with list()\n\nfor batch in loader:\n    print(batch)\n    print('tensor size: ', batch[0].size())\n    print('bbox length: ', len(batch[1]))\n    print('first bbox size: ', batch[1][0].size())\n    print('second bbox size: ', batch[1][1].size())\n</code></pre>\n<p>On my machine (pytorch v0.2.0), this prints:</p>\n<pre><code>[\n(0 ,.,.) =\n  0  0\n  0  0\n\n(1 ,.,.) =\n  0  0\n  0  0\n[torch.FloatTensor of size 2x2x2]\n, [\n 0  0  0  0\n 0  0  0  0\n 0  0  0  0\n[torch.FloatTensor of size 3x4]\n,\n 0  0  0  0\n 0  0  0  0\n 0  0  0  0\n 0  0  0  0\n[torch.FloatTensor of size 4x4]\n]]\ntensor size:  torch.Size([2, 2, 2])\nbbox length:  2\nfirst bbox size:  torch.Size([3, 4])\nsecond bbox size:  torch.Size([4, 4])\n</code></pre>\n<p>I think this is what <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1041752\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/vadimkantorov\">@vadimkantorov</a> want (at least the output is).</p>", "body_text": "Please correct me if I get it wrong, but isinstance(batch, BBoxList) would never be evoked since batch is a list. @apaszke\nAn alternative way which might be not so efficient (following the settings from @vadimkantorov):\nimport torch\nfrom torch.utils.data import DataLoader\n# No need to define a new class\n# Suppose you know the order of your customized Dataset\n\ndef collate_fn(batch):\n    # Note that batch is a list \n    batch = list(map(list, zip(*batch)))  # transpose list of list\n    out = None\n    # You should know that batch[0] is a fixed-size tensor since you're using your customized Dataset\n    # reshape batch[0] as (N, H, W)\n    # batch[1] contains tensors of different sizes; just let it be a list.\n    # If your num_workers in DataLoader is bigger than 0\n    #     numel = sum([x.numel() for x in batch[0]])\n    #     storage = batch[0][0].storage()._new_shared(numel)\n    #     out = batch[0][0].new(storage)\n    batch[0] = torch.stack(batch[0], 0, out=out)\n    return batch\n\nloader = DataLoader(dataset = [(torch.zeros(2, 2), torch.zeros(i, 4)) for i in range(3, 5)], batch_size = 2, collate_fn = collate_fn)\n# no need to wrap torch.zeros(i, 4) with list()\n\nfor batch in loader:\n    print(batch)\n    print('tensor size: ', batch[0].size())\n    print('bbox length: ', len(batch[1]))\n    print('first bbox size: ', batch[1][0].size())\n    print('second bbox size: ', batch[1][1].size())\n\nOn my machine (pytorch v0.2.0), this prints:\n[\n(0 ,.,.) =\n  0  0\n  0  0\n\n(1 ,.,.) =\n  0  0\n  0  0\n[torch.FloatTensor of size 2x2x2]\n, [\n 0  0  0  0\n 0  0  0  0\n 0  0  0  0\n[torch.FloatTensor of size 3x4]\n,\n 0  0  0  0\n 0  0  0  0\n 0  0  0  0\n 0  0  0  0\n[torch.FloatTensor of size 4x4]\n]]\ntensor size:  torch.Size([2, 2, 2])\nbbox length:  2\nfirst bbox size:  torch.Size([3, 4])\nsecond bbox size:  torch.Size([4, 4])\n\nI think this is what @vadimkantorov want (at least the output is).", "body": "Please correct me if I get it wrong, but `isinstance(batch, BBoxList)` would never be evoked since `batch` is a list. @apaszke \r\n\r\nAn alternative way which might be not so efficient (following the settings from @vadimkantorov):\r\n```\r\nimport torch\r\nfrom torch.utils.data import DataLoader\r\n# No need to define a new class\r\n# Suppose you know the order of your customized Dataset\r\n\r\ndef collate_fn(batch):\r\n    # Note that batch is a list \r\n    batch = list(map(list, zip(*batch)))  # transpose list of list\r\n    out = None\r\n    # You should know that batch[0] is a fixed-size tensor since you're using your customized Dataset\r\n    # reshape batch[0] as (N, H, W)\r\n    # batch[1] contains tensors of different sizes; just let it be a list.\r\n    # If your num_workers in DataLoader is bigger than 0\r\n    #     numel = sum([x.numel() for x in batch[0]])\r\n    #     storage = batch[0][0].storage()._new_shared(numel)\r\n    #     out = batch[0][0].new(storage)\r\n    batch[0] = torch.stack(batch[0], 0, out=out)\r\n    return batch\r\n\r\nloader = DataLoader(dataset = [(torch.zeros(2, 2), torch.zeros(i, 4)) for i in range(3, 5)], batch_size = 2, collate_fn = collate_fn)\r\n# no need to wrap torch.zeros(i, 4) with list()\r\n\r\nfor batch in loader:\r\n    print(batch)\r\n    print('tensor size: ', batch[0].size())\r\n    print('bbox length: ', len(batch[1]))\r\n    print('first bbox size: ', batch[1][0].size())\r\n    print('second bbox size: ', batch[1][1].size())\r\n```\r\n\r\nOn my machine (pytorch v0.2.0), this prints:\r\n```\r\n[\r\n(0 ,.,.) =\r\n  0  0\r\n  0  0\r\n\r\n(1 ,.,.) =\r\n  0  0\r\n  0  0\r\n[torch.FloatTensor of size 2x2x2]\r\n, [\r\n 0  0  0  0\r\n 0  0  0  0\r\n 0  0  0  0\r\n[torch.FloatTensor of size 3x4]\r\n,\r\n 0  0  0  0\r\n 0  0  0  0\r\n 0  0  0  0\r\n 0  0  0  0\r\n[torch.FloatTensor of size 4x4]\r\n]]\r\ntensor size:  torch.Size([2, 2, 2])\r\nbbox length:  2\r\nfirst bbox size:  torch.Size([3, 4])\r\nsecond bbox size:  torch.Size([4, 4])\r\n```\r\nI think this is what @vadimkantorov want (at least the output is)."}