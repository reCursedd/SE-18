{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/208372259", "pull_request_review_id": 144168490, "id": 208372259, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODM3MjI1OQ==", "diff_hunk": "@@ -217,25 +217,24 @@ void load(Archive& archive, torch::Tensor& tensor) {\n   archive(CEREAL_NVP(backendId), CEREAL_NVP(sizes));\n \n   at::Backend backend = ::torch::detail::backendFromId(backendId);\n-  if (!tensor.defined() || tensor.data().type().scalarType() != type) {\n+  if (!tensor.defined() || tensor.dtype() != type) {\n     tensor = torch::empty({}, torch::getType(backend, type));\n   }\n   tensor.data().resize_(sizes);\n \n   if (tensor.type().is_cuda()) {\n     // should actually use cudamemcpy probably\n-    auto cputensor = torch::empty(sizes, tensor.data().type().scalarType());\n+    auto cputensor = torch::empty(sizes, tensor.dtype());\n     agimpl::loadBinary(\n         archive,\n         cputensor.data_ptr(),\n         cputensor.numel() * cputensor.type().elementSizeInBytes());\n-    tensor.data().copy_(cputensor.data());\n+    tensor.copy_(cputensor);", "path": "torch/csrc/api/include/torch/serialization.h", "position": null, "original_position": 28, "commit_id": "2bbaa7f25cd02b031f84e695eb9d1332ce925581", "original_commit_id": "b937924396165469d720f2bc0dc609821efe26db", "user": {"login": "goldsborough", "id": 6429851, "node_id": "MDQ6VXNlcjY0Mjk4NTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/6429851?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goldsborough", "html_url": "https://github.com/goldsborough", "followers_url": "https://api.github.com/users/goldsborough/followers", "following_url": "https://api.github.com/users/goldsborough/following{/other_user}", "gists_url": "https://api.github.com/users/goldsborough/gists{/gist_id}", "starred_url": "https://api.github.com/users/goldsborough/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goldsborough/subscriptions", "organizations_url": "https://api.github.com/users/goldsborough/orgs", "repos_url": "https://api.github.com/users/goldsborough/repos", "events_url": "https://api.github.com/users/goldsborough/events{/privacy}", "received_events_url": "https://api.github.com/users/goldsborough/received_events", "type": "User", "site_admin": false}, "body": "Ok interesting. I figured the `NoGradGuard` would make sure autograd history is not recorded. But it doesn't hurt to copy the `data()`, so I'll change it", "created_at": "2018-08-07T20:22:08Z", "updated_at": "2018-11-23T15:48:56Z", "html_url": "https://github.com/pytorch/pytorch/pull/9837#discussion_r208372259", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/9837", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/208372259"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/9837#discussion_r208372259"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/9837"}}, "body_html": "<p>Ok interesting. I figured the <code>NoGradGuard</code> would make sure autograd history is not recorded. But it doesn't hurt to copy the <code>data()</code>, so I'll change it</p>", "body_text": "Ok interesting. I figured the NoGradGuard would make sure autograd history is not recorded. But it doesn't hurt to copy the data(), so I'll change it", "in_reply_to_id": 208353595}