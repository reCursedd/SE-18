{"url": "https://api.github.com/repos/pytorch/pytorch/issues/9837", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/9837/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/9837/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/9837/events", "html_url": "https://github.com/pytorch/pytorch/pull/9837", "id": 344575849, "node_id": "MDExOlB1bGxSZXF1ZXN0MjAzOTM4ODg4", "number": 9837, "title": "[C++ API] A few additions", "user": {"login": "ebetica", "id": 3605224, "node_id": "MDQ6VXNlcjM2MDUyMjQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/3605224?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebetica", "html_url": "https://github.com/ebetica", "followers_url": "https://api.github.com/users/ebetica/followers", "following_url": "https://api.github.com/users/ebetica/following{/other_user}", "gists_url": "https://api.github.com/users/ebetica/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebetica/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebetica/subscriptions", "organizations_url": "https://api.github.com/users/ebetica/orgs", "repos_url": "https://api.github.com/users/ebetica/repos", "events_url": "https://api.github.com/users/ebetica/events{/privacy}", "received_events_url": "https://api.github.com/users/ebetica/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 559719279, "node_id": "MDU6TGFiZWw1NTk3MTkyNzk=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/ready%20for%20review", "name": "ready for review", "color": "b60205", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-07-25T19:27:42Z", "updated_at": "2018-11-23T15:48:56Z", "closed_at": "2018-08-13T17:26:24Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/9837", "html_url": "https://github.com/pytorch/pytorch/pull/9837", "diff_url": "https://github.com/pytorch/pytorch/pull/9837.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/9837.patch"}, "body_html": "<p>This PR provides 4 fixes / features:</p>\n<ol>\n<li>torch::nn::Cloneable inherits virtually from torch::nn::Module. We want to pass around a module with new functions, and the best way to do this is to do a diamond inheritance pattern, i.e.</li>\n</ol>\n<div class=\"highlight highlight-source-c++\"><pre><span class=\"pl-k\">struct</span> <span class=\"pl-en\">MySuperModuleImpl</span> : <span class=\"pl-k\">virtual</span> public torch::nn::Module { \n  <span class=\"pl-k\">virtual</span> <span class=\"pl-k\">void</span> <span class=\"pl-en\">myFunction</span>() = 0;\n}<span class=\"pl-ii\"></span>\n\n<span class=\"pl-k\">struct</span> <span class=\"pl-en\">MySuperModule</span> : <span class=\"pl-k\">public</span> <span class=\"pl-en\">torch</span>::nn::Cloneable&lt;MySuperModule&gt;, MySuperModuleImple {};\n\n<span class=\"pl-k\">struct</span> <span class=\"pl-en\">MyModule</span> : <span class=\"pl-k\">public</span> <span class=\"pl-en\">MySuperModule</span>&lt;MyModule&gt; {\n  <span class=\"pl-k\">void</span> <span class=\"pl-en\">myFunction</span>() <span class=\"pl-k\">override</span>; \n};</pre></div>\n<p>This way, we can simply pass around MySuperModuleImpl around instead of torch::nn::Module.</p>\n<ol start=\"2\">\n<li>Optimizer options are public now, since there's no way to decay the LR or modify it during training otherwise</li>\n<li>Serialization functions creates autograd history and calls copy_! Bad!</li>\n<li>Optimizers did not create buffers after add_parameters was called.</li>\n</ol>", "body_text": "This PR provides 4 fixes / features:\n\ntorch::nn::Cloneable inherits virtually from torch::nn::Module. We want to pass around a module with new functions, and the best way to do this is to do a diamond inheritance pattern, i.e.\n\nstruct MySuperModuleImpl : virtual public torch::nn::Module { \n  virtual void myFunction() = 0;\n}\n\nstruct MySuperModule : public torch::nn::Cloneable<MySuperModule>, MySuperModuleImple {};\n\nstruct MyModule : public MySuperModule<MyModule> {\n  void myFunction() override; \n};\nThis way, we can simply pass around MySuperModuleImpl around instead of torch::nn::Module.\n\nOptimizer options are public now, since there's no way to decay the LR or modify it during training otherwise\nSerialization functions creates autograd history and calls copy_! Bad!\nOptimizers did not create buffers after add_parameters was called.", "body": "This PR provides 4 fixes / features:\r\n\r\n1. torch::nn::Cloneable inherits virtually from torch::nn::Module. We want to pass around a module with new functions, and the best way to do this is to do a diamond inheritance pattern, i.e.\r\n\r\n```c++\r\nstruct MySuperModuleImpl : virtual public torch::nn::Module { \r\n  virtual void myFunction() = 0;\r\n}\r\n\r\nstruct MySuperModule : public torch::nn::Cloneable<MySuperModule>, MySuperModuleImple {};\r\n\r\nstruct MyModule : public MySuperModule<MyModule> {\r\n  void myFunction() override; \r\n};\r\n```\r\n\r\nThis way, we can simply pass around MySuperModuleImpl around instead of torch::nn::Module.\r\n\r\n2. Optimizer options are public now, since there's no way to decay the LR or modify it during training otherwise\r\n3. Serialization functions creates autograd history and calls copy_! Bad!\r\n4. Optimizers did not create buffers after add_parameters was called."}