{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/421449447", "html_url": "https://github.com/pytorch/pytorch/issues/11340#issuecomment-421449447", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/11340", "id": 421449447, "node_id": "MDEyOklzc3VlQ29tbWVudDQyMTQ0OTQ0Nw==", "user": {"login": "syed-ahmed", "id": 8906225, "node_id": "MDQ6VXNlcjg5MDYyMjU=", "avatar_url": "https://avatars1.githubusercontent.com/u/8906225?v=4", "gravatar_id": "", "url": "https://api.github.com/users/syed-ahmed", "html_url": "https://github.com/syed-ahmed", "followers_url": "https://api.github.com/users/syed-ahmed/followers", "following_url": "https://api.github.com/users/syed-ahmed/following{/other_user}", "gists_url": "https://api.github.com/users/syed-ahmed/gists{/gist_id}", "starred_url": "https://api.github.com/users/syed-ahmed/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/syed-ahmed/subscriptions", "organizations_url": "https://api.github.com/users/syed-ahmed/orgs", "repos_url": "https://api.github.com/users/syed-ahmed/repos", "events_url": "https://api.github.com/users/syed-ahmed/events{/privacy}", "received_events_url": "https://api.github.com/users/syed-ahmed/received_events", "type": "User", "site_admin": false}, "created_at": "2018-09-14T18:42:50Z", "updated_at": "2018-09-14T18:42:50Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Thanks for the feedback!</p>\n<p>Yes, I do plan to adjust the CPU situation. How I'm looking at it is, the current notion of <code>Generator</code> is confusing in the framework. That is, generator is referred to as the <strong>state</strong> of a generator in pytorch, whereas I would refer a generator to be the <strong>engine</strong> used to generate pseduo random numbers. Since there is this confusion, you will see that the <code>THCState</code> has <code>THCRNGState</code>, whereas the CPU doesn't have any notion of RNGState but a <code>THGenerator</code>. In other words, <code>THCRNGState</code> and <code>THGenerator</code> are really the same - a container for the states of the generator. The only difference is <code>THCRNGState</code> has one state container (<code>THCGenerator</code>) per device. Hence, if we are to make a unified state container for both CPU and GPU, we can have the same struct, but the CPU side will only have one container. That is my rationale behind consolidating those structs.</p>\n<p>The proposed CUDARNGState lacks the states for Runtian's Philox generator (<code>uint4 counter; uint4 output; uint2 key; unsigned int STATE;</code>) as I'm still deciding if it's really needed/how to expose them. Otherwise, we don't need the gen_states, since I'm making the <code>deafult_generator</code> for the CUDA to use Runtian's Philox implementation from <code>fusion_compiler</code> whereas the CPU side currently uses custom Mersenne Twister implementation. My proposal for the <code>default_generator</code> on the CPU side is to use the <code>std::mersenne_twister_engine</code> and get rid of the custom implementation we have in <code>THRandom.cpp</code> unless there is a good reason why we needed the custom implementation (I'm assuming we needed those because of C FFI reasons and now we can fallback to using <code>std</code> because of ATen).</p>", "body_text": "Thanks for the feedback!\nYes, I do plan to adjust the CPU situation. How I'm looking at it is, the current notion of Generator is confusing in the framework. That is, generator is referred to as the state of a generator in pytorch, whereas I would refer a generator to be the engine used to generate pseduo random numbers. Since there is this confusion, you will see that the THCState has THCRNGState, whereas the CPU doesn't have any notion of RNGState but a THGenerator. In other words, THCRNGState and THGenerator are really the same - a container for the states of the generator. The only difference is THCRNGState has one state container (THCGenerator) per device. Hence, if we are to make a unified state container for both CPU and GPU, we can have the same struct, but the CPU side will only have one container. That is my rationale behind consolidating those structs.\nThe proposed CUDARNGState lacks the states for Runtian's Philox generator (uint4 counter; uint4 output; uint2 key; unsigned int STATE;) as I'm still deciding if it's really needed/how to expose them. Otherwise, we don't need the gen_states, since I'm making the deafult_generator for the CUDA to use Runtian's Philox implementation from fusion_compiler whereas the CPU side currently uses custom Mersenne Twister implementation. My proposal for the default_generator on the CPU side is to use the std::mersenne_twister_engine and get rid of the custom implementation we have in THRandom.cpp unless there is a good reason why we needed the custom implementation (I'm assuming we needed those because of C FFI reasons and now we can fallback to using std because of ATen).", "body": "Thanks for the feedback! \r\n\r\nYes, I do plan to adjust the CPU situation. How I'm looking at it is, the current notion of `Generator` is confusing in the framework. That is, generator is referred to as the **state** of a generator in pytorch, whereas I would refer a generator to be the **engine** used to generate pseduo random numbers. Since there is this confusion, you will see that the `THCState` has `THCRNGState`, whereas the CPU doesn't have any notion of RNGState but a `THGenerator`. In other words, `THCRNGState` and `THGenerator` are really the same - a container for the states of the generator. The only difference is `THCRNGState` has one state container (`THCGenerator`) per device. Hence, if we are to make a unified state container for both CPU and GPU, we can have the same struct, but the CPU side will only have one container. That is my rationale behind consolidating those structs. \r\n\r\nThe proposed CUDARNGState lacks the states for Runtian's Philox generator (`uint4 counter; uint4 output; uint2 key; unsigned int STATE;`) as I'm still deciding if it's really needed/how to expose them. Otherwise, we don't need the gen_states, since I'm making the `deafult_generator` for the CUDA to use Runtian's Philox implementation from `fusion_compiler` whereas the CPU side currently uses custom Mersenne Twister implementation. My proposal for the `default_generator` on the CPU side is to use the `std::mersenne_twister_engine` and get rid of the custom implementation we have in `THRandom.cpp` unless there is a good reason why we needed the custom implementation (I'm assuming we needed those because of C FFI reasons and now we can fallback to using `std` because of ATen)."}