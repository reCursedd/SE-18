{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/422201011", "html_url": "https://github.com/pytorch/pytorch/issues/11340#issuecomment-422201011", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/11340", "id": 422201011, "node_id": "MDEyOklzc3VlQ29tbWVudDQyMjIwMTAxMQ==", "user": {"login": "syed-ahmed", "id": 8906225, "node_id": "MDQ6VXNlcjg5MDYyMjU=", "avatar_url": "https://avatars1.githubusercontent.com/u/8906225?v=4", "gravatar_id": "", "url": "https://api.github.com/users/syed-ahmed", "html_url": "https://github.com/syed-ahmed", "followers_url": "https://api.github.com/users/syed-ahmed/followers", "following_url": "https://api.github.com/users/syed-ahmed/following{/other_user}", "gists_url": "https://api.github.com/users/syed-ahmed/gists{/gist_id}", "starred_url": "https://api.github.com/users/syed-ahmed/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/syed-ahmed/subscriptions", "organizations_url": "https://api.github.com/users/syed-ahmed/orgs", "repos_url": "https://api.github.com/users/syed-ahmed/repos", "events_url": "https://api.github.com/users/syed-ahmed/events{/privacy}", "received_events_url": "https://api.github.com/users/syed-ahmed/received_events", "type": "User", "site_admin": false}, "created_at": "2018-09-17T23:11:40Z", "updated_at": "2018-09-17T23:45:07Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=4583066\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/apaszke\">@apaszke</a> Thanks for the comments. Could you please elaborate a little bit on what you mean by preserving same sequences across GPU architectures? I am a bit confused.</p>\n<p>Also, does anyone know what should be the resolution for this comment in <code>THRandom.cpp</code>? That is, I could either use the 64 bit <code>std:mt19937_64</code> or the <code>32 bit std::mt19937</code>. It is also to be noted that in the fusion compiler we are seeding the 32 bit philox generator with 64 bit seed.</p>\n<pre><code>// TODO: this only returns 32-bits of randomness but as a uint64_t. This is\n// weird and should be fixed. We should also fix the state to be uint32_t\n// instead of uint64_t. (Or switch to a 64-bit random number generator).\n</code></pre>", "body_text": "@apaszke Thanks for the comments. Could you please elaborate a little bit on what you mean by preserving same sequences across GPU architectures? I am a bit confused.\nAlso, does anyone know what should be the resolution for this comment in THRandom.cpp? That is, I could either use the 64 bit std:mt19937_64 or the 32 bit std::mt19937. It is also to be noted that in the fusion compiler we are seeding the 32 bit philox generator with 64 bit seed.\n// TODO: this only returns 32-bits of randomness but as a uint64_t. This is\n// weird and should be fixed. We should also fix the state to be uint32_t\n// instead of uint64_t. (Or switch to a 64-bit random number generator).", "body": "@apaszke Thanks for the comments. Could you please elaborate a little bit on what you mean by preserving same sequences across GPU architectures? I am a bit confused.\r\n\r\nAlso, does anyone know what should be the resolution for this comment in `THRandom.cpp`? That is, I could either use the 64 bit `std:mt19937_64` or the `32 bit std::mt19937`. It is also to be noted that in the fusion compiler we are seeding the 32 bit philox generator with 64 bit seed.\r\n\r\n```\r\n// TODO: this only returns 32-bits of randomness but as a uint64_t. This is\r\n// weird and should be fixed. We should also fix the state to be uint32_t\r\n// instead of uint64_t. (Or switch to a 64-bit random number generator).\r\n```"}