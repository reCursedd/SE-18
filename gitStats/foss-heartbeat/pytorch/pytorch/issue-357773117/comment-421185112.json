{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/421185112", "html_url": "https://github.com/pytorch/pytorch/issues/11340#issuecomment-421185112", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/11340", "id": 421185112, "node_id": "MDEyOklzc3VlQ29tbWVudDQyMTE4NTExMg==", "user": {"login": "syed-ahmed", "id": 8906225, "node_id": "MDQ6VXNlcjg5MDYyMjU=", "avatar_url": "https://avatars1.githubusercontent.com/u/8906225?v=4", "gravatar_id": "", "url": "https://api.github.com/users/syed-ahmed", "html_url": "https://github.com/syed-ahmed", "followers_url": "https://api.github.com/users/syed-ahmed/followers", "following_url": "https://api.github.com/users/syed-ahmed/following{/other_user}", "gists_url": "https://api.github.com/users/syed-ahmed/gists{/gist_id}", "starred_url": "https://api.github.com/users/syed-ahmed/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/syed-ahmed/subscriptions", "organizations_url": "https://api.github.com/users/syed-ahmed/orgs", "repos_url": "https://api.github.com/users/syed-ahmed/repos", "events_url": "https://api.github.com/users/syed-ahmed/events{/privacy}", "received_events_url": "https://api.github.com/users/syed-ahmed/received_events", "type": "User", "site_admin": false}, "created_at": "2018-09-13T23:36:38Z", "updated_at": "2018-09-13T23:43:43Z", "author_association": "CONTRIBUTOR", "body_html": "<p>I'll be able to share a more up to date diff tomorrow but here's a gist of what's coming:</p>\n<ol>\n<li>I'm modifying the <code>GeneratorDerived</code> template to have a <code>RNGState</code> struct definition. (The struct definition will replace <code>THGenerator</code> as well, but for now I'm focusing on the cuda part and just passing <code>'th_generator': 'CUDARNGState* generator',</code> from <code>gen.py</code> for the <code>CUDAGenerator</code>.</li>\n</ol>\n<pre><code>#pragma once\n\n// ${generated_comment}\n\n#include &lt;$header&gt;\n\n#include \"ATen/core/Generator.h\"\n\nstruct ${name}RNGState {$name}RNGState;\n\nnamespace at {\n\nclass Context;\nstruct ${name}Generator : public Generator {\n  ${name}Generator(Context * context);\n  virtual ~${name}Generator();\n\n  virtual ${name}Generator&amp; copy(const Generator&amp; from) override;\n  virtual ${name}Generator&amp; free() override;\n\n  virtual uint64_t seed() override;\n  virtual uint64_t seedAll() override;\n  virtual uint64_t initialSeed() override;\n  virtual ${name}Generator&amp; manualSeed(uint64_t seed) override;\n  virtual ${name}Generator&amp; manualSeedAll(uint64_t seed) override;\n  virtual void * unsafeGetTH() override;\n\n//TODO(zach): figure out friends later\npublic:\n  Context * context;\n  ${th_generator}\n};\n</code></pre>\n<ol start=\"2\">\n<li>The CUDARNGState is then being defined in <code>CUDAGenerator.cpp</code> and looks like this. Note: I might change this slightly to have Philox related state variables. Also might add getters and setters through <code>CUDAContext</code> for the RNGState:</li>\n</ol>\n<pre><code>struct CUDARNGState {\n  std::mutex mutex; /* mutex for using this generator */\n  int initf;\n  uint64_t initial_seed;\n  std::atomic&lt;int64_t&gt; philox_seed_offset;\n  int64_t device = -1;\n};\n</code></pre>\n<ol start=\"3\">\n<li>The rest of the PR then modifies the <code>CUDAGenerator.cpp</code> to port the <code>THCRandom_*</code> related code, initializing the device states only once (like it's done in <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=38511765\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/mruberry\">@mruberry</a> 's Port Stream PR), and adding Runtian's Philox Generator (from fusion_compiler) as the default generator for CUDA in a <code>Random.h</code> module (like how the mersenne twister is the default for <code>TH_random</code>.  Note: this PR also aims to remove curand usages. Hence, there will be implementations of <code>rand_uniform, rand_normal, rand_lognormal, rand_poisson</code> in the Random.h module.</li>\n</ol>\n<p>Another additional proposal for the CPU side I had was to use std::random with the mersenne_twister_engine from std, but I haven't got to that part. Also, I did notice how the python bindings for random in the CPU side are more aligned with the <code>CPUGenerator</code> vs how the bindings for CUDA is more aligned with <code>THCRandom_*</code>. So I do plan to change those as well so that the bindings call functions from <code>CUDAGenerator</code>. Please let me know how this sounds.</p>", "body_text": "I'll be able to share a more up to date diff tomorrow but here's a gist of what's coming:\n\nI'm modifying the GeneratorDerived template to have a RNGState struct definition. (The struct definition will replace THGenerator as well, but for now I'm focusing on the cuda part and just passing 'th_generator': 'CUDARNGState* generator', from gen.py for the CUDAGenerator.\n\n#pragma once\n\n// ${generated_comment}\n\n#include <$header>\n\n#include \"ATen/core/Generator.h\"\n\nstruct ${name}RNGState {$name}RNGState;\n\nnamespace at {\n\nclass Context;\nstruct ${name}Generator : public Generator {\n  ${name}Generator(Context * context);\n  virtual ~${name}Generator();\n\n  virtual ${name}Generator& copy(const Generator& from) override;\n  virtual ${name}Generator& free() override;\n\n  virtual uint64_t seed() override;\n  virtual uint64_t seedAll() override;\n  virtual uint64_t initialSeed() override;\n  virtual ${name}Generator& manualSeed(uint64_t seed) override;\n  virtual ${name}Generator& manualSeedAll(uint64_t seed) override;\n  virtual void * unsafeGetTH() override;\n\n//TODO(zach): figure out friends later\npublic:\n  Context * context;\n  ${th_generator}\n};\n\n\nThe CUDARNGState is then being defined in CUDAGenerator.cpp and looks like this. Note: I might change this slightly to have Philox related state variables. Also might add getters and setters through CUDAContext for the RNGState:\n\nstruct CUDARNGState {\n  std::mutex mutex; /* mutex for using this generator */\n  int initf;\n  uint64_t initial_seed;\n  std::atomic<int64_t> philox_seed_offset;\n  int64_t device = -1;\n};\n\n\nThe rest of the PR then modifies the CUDAGenerator.cpp to port the THCRandom_* related code, initializing the device states only once (like it's done in @mruberry 's Port Stream PR), and adding Runtian's Philox Generator (from fusion_compiler) as the default generator for CUDA in a Random.h module (like how the mersenne twister is the default for TH_random.  Note: this PR also aims to remove curand usages. Hence, there will be implementations of rand_uniform, rand_normal, rand_lognormal, rand_poisson in the Random.h module.\n\nAnother additional proposal for the CPU side I had was to use std::random with the mersenne_twister_engine from std, but I haven't got to that part. Also, I did notice how the python bindings for random in the CPU side are more aligned with the CPUGenerator vs how the bindings for CUDA is more aligned with THCRandom_*. So I do plan to change those as well so that the bindings call functions from CUDAGenerator. Please let me know how this sounds.", "body": "I'll be able to share a more up to date diff tomorrow but here's a gist of what's coming:\r\n\r\n1. I'm modifying the `GeneratorDerived` template to have a `RNGState` struct definition. (The struct definition will replace `THGenerator` as well, but for now I'm focusing on the cuda part and just passing `'th_generator': 'CUDARNGState* generator',` from `gen.py` for the `CUDAGenerator`.\r\n```\r\n#pragma once\r\n\r\n// ${generated_comment}\r\n\r\n#include <$header>\r\n\r\n#include \"ATen/core/Generator.h\"\r\n\r\nstruct ${name}RNGState {$name}RNGState;\r\n\r\nnamespace at {\r\n\r\nclass Context;\r\nstruct ${name}Generator : public Generator {\r\n  ${name}Generator(Context * context);\r\n  virtual ~${name}Generator();\r\n\r\n  virtual ${name}Generator& copy(const Generator& from) override;\r\n  virtual ${name}Generator& free() override;\r\n\r\n  virtual uint64_t seed() override;\r\n  virtual uint64_t seedAll() override;\r\n  virtual uint64_t initialSeed() override;\r\n  virtual ${name}Generator& manualSeed(uint64_t seed) override;\r\n  virtual ${name}Generator& manualSeedAll(uint64_t seed) override;\r\n  virtual void * unsafeGetTH() override;\r\n\r\n//TODO(zach): figure out friends later\r\npublic:\r\n  Context * context;\r\n  ${th_generator}\r\n};\r\n```\r\n2. The CUDARNGState is then being defined in `CUDAGenerator.cpp` and looks like this. Note: I might change this slightly to have Philox related state variables. Also might add getters and setters through `CUDAContext` for the RNGState:\r\n```\r\nstruct CUDARNGState {\r\n  std::mutex mutex; /* mutex for using this generator */\r\n  int initf;\r\n  uint64_t initial_seed;\r\n  std::atomic<int64_t> philox_seed_offset;\r\n  int64_t device = -1;\r\n};\r\n```\r\n3. The rest of the PR then modifies the `CUDAGenerator.cpp` to port the `THCRandom_*` related code, initializing the device states only once (like it's done in @mruberry 's Port Stream PR), and adding Runtian's Philox Generator (from fusion_compiler) as the default generator for CUDA in a `Random.h` module (like how the mersenne twister is the default for `TH_random`.  Note: this PR also aims to remove curand usages. Hence, there will be implementations of `rand_uniform, rand_normal, rand_lognormal, rand_poisson` in the Random.h module.\r\n\r\nAnother additional proposal for the CPU side I had was to use std::random with the mersenne_twister_engine from std, but I haven't got to that part. Also, I did notice how the python bindings for random in the CPU side are more aligned with the `CPUGenerator` vs how the bindings for CUDA is more aligned with `THCRandom_*`. So I do plan to change those as well so that the bindings call functions from `CUDAGenerator`. Please let me know how this sounds."}