{"url": "https://api.github.com/repos/pytorch/pytorch/issues/8019", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/8019/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/8019/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/8019/events", "html_url": "https://github.com/pytorch/pytorch/issues/8019", "id": 328360079, "node_id": "MDU6SXNzdWUzMjgzNjAwNzk=", "number": 8019, "title": "Inconsistent behavior of F.conv2d(...,padding) and F.pad", "user": {"login": "codinfox", "id": 2647449, "node_id": "MDQ6VXNlcjI2NDc0NDk=", "avatar_url": "https://avatars0.githubusercontent.com/u/2647449?v=4", "gravatar_id": "", "url": "https://api.github.com/users/codinfox", "html_url": "https://github.com/codinfox", "followers_url": "https://api.github.com/users/codinfox/followers", "following_url": "https://api.github.com/users/codinfox/following{/other_user}", "gists_url": "https://api.github.com/users/codinfox/gists{/gist_id}", "starred_url": "https://api.github.com/users/codinfox/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/codinfox/subscriptions", "organizations_url": "https://api.github.com/users/codinfox/orgs", "repos_url": "https://api.github.com/users/codinfox/repos", "events_url": "https://api.github.com/users/codinfox/events{/privacy}", "received_events_url": "https://api.github.com/users/codinfox/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-06-01T02:36:49Z", "updated_at": "2018-06-04T21:43:57Z", "closed_at": "2018-06-04T16:02:48Z", "author_association": "NONE", "body_html": "<h2>Issue description</h2>\n<p>I am getting different results from <code>F.conv2d(feat, kern, padding=(1,1))</code> and <code>F.pad(feat, (1,1,1,1)); F.conv2d(feat, kern)</code>.</p>\n<p>What's more interesting is in the example I provided below, although both arguments for <code>F.conv2d</code> are non-negative, I still get some negative numbers as results.</p>\n<h2>Code example</h2>\n<p>Download the data from here: <a href=\"https://drive.google.com/open?id=1Drgz7bTjLhPtpscvZK2daRx8Adqo5-b9\" rel=\"nofollow\">https://drive.google.com/open?id=1Drgz7bTjLhPtpscvZK2daRx8Adqo5-b9</a></p>\n<div class=\"highlight highlight-source-python\"><pre>In [<span class=\"pl-c1\">2</span>]: params <span class=\"pl-k\">=</span> torch.load(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>params.pt<span class=\"pl-pds\">'</span></span>)\n\nIn [<span class=\"pl-c1\">3</span>]: <span class=\"pl-k\">import</span> torch.nn.functional <span class=\"pl-k\">as</span> F\n\nIn [<span class=\"pl-c1\">4</span>]: a <span class=\"pl-k\">=</span> F.conv2d(params[<span class=\"pl-s\"><span class=\"pl-pds\">'</span>feat<span class=\"pl-pds\">'</span></span>], params[<span class=\"pl-s\"><span class=\"pl-pds\">'</span>kern<span class=\"pl-pds\">'</span></span>], <span class=\"pl-v\">padding</span><span class=\"pl-k\">=</span>(<span class=\"pl-c1\">1</span>,<span class=\"pl-c1\">1</span>))\n\nIn [<span class=\"pl-c1\">5</span>]: b <span class=\"pl-k\">=</span> F.pad(params[<span class=\"pl-s\"><span class=\"pl-pds\">'</span>feat<span class=\"pl-pds\">'</span></span>], (<span class=\"pl-c1\">1</span>,<span class=\"pl-c1\">1</span>,<span class=\"pl-c1\">1</span>,<span class=\"pl-c1\">1</span>))\n\nIn [<span class=\"pl-c1\">6</span>]: b <span class=\"pl-k\">=</span> F.conv2d(b, params[<span class=\"pl-s\"><span class=\"pl-pds\">'</span>kern<span class=\"pl-pds\">'</span></span>])\n\nIn [<span class=\"pl-c1\">7</span>]: (a <span class=\"pl-k\">!=</span> b).sum()\nOut[<span class=\"pl-c1\">7</span>]: tensor(<span class=\"pl-c1\">1.0868e+05</span>, <span class=\"pl-v\">device</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>cuda:0<span class=\"pl-pds\">'</span></span>)\n\nIn [<span class=\"pl-c1\">8</span>]: (a <span class=\"pl-k\">&lt;</span> <span class=\"pl-c1\">0</span>).sum()\nOut[<span class=\"pl-c1\">8</span>]: tensor(<span class=\"pl-c1\">2531</span>, <span class=\"pl-v\">device</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>cuda:0<span class=\"pl-pds\">'</span></span>)\n\nIn [<span class=\"pl-c1\">9</span>]: (b <span class=\"pl-k\">&lt;</span> <span class=\"pl-c1\">0</span>).sum()\nOut[<span class=\"pl-c1\">9</span>]: tensor(<span class=\"pl-c1\">0</span>, <span class=\"pl-v\">device</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>cuda:0<span class=\"pl-pds\">'</span></span>)\n\nIn [<span class=\"pl-c1\">10</span>]: (params[<span class=\"pl-s\"><span class=\"pl-pds\">'</span>kern<span class=\"pl-pds\">'</span></span>] <span class=\"pl-k\">&lt;</span> <span class=\"pl-c1\">0</span>).sum()\nOut[<span class=\"pl-c1\">10</span>]: tensor(<span class=\"pl-c1\">0</span>, <span class=\"pl-v\">device</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>cuda:0<span class=\"pl-pds\">'</span></span>)\n\nIn [<span class=\"pl-c1\">11</span>]: (params[<span class=\"pl-s\"><span class=\"pl-pds\">'</span>feat<span class=\"pl-pds\">'</span></span>] <span class=\"pl-k\">&lt;</span> <span class=\"pl-c1\">0</span>).sum()\nOut[<span class=\"pl-c1\">11</span>]: tensor(<span class=\"pl-c1\">0</span>, <span class=\"pl-v\">device</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>cuda:0<span class=\"pl-pds\">'</span></span>)\n\nIn [<span class=\"pl-c1\">12</span>]: a.shape\nOut[<span class=\"pl-c1\">12</span>]: torch.Size([<span class=\"pl-c1\">16</span>, <span class=\"pl-c1\">512</span>, <span class=\"pl-c1\">4</span>, <span class=\"pl-c1\">4</span>])\n\nIn [<span class=\"pl-c1\">13</span>]: b.shape\nOut[<span class=\"pl-c1\">13</span>]: torch.Size([<span class=\"pl-c1\">16</span>, <span class=\"pl-c1\">512</span>, <span class=\"pl-c1\">4</span>, <span class=\"pl-c1\">4</span>])</pre></div>\n<h2>System Info</h2>\n<p>Collecting environment information...<br>\nPyTorch version: 0.4.0<br>\nIs debug build: No<br>\nCUDA used to build PyTorch: 8.0.61</p>\n<p>OS: Ubuntu 14.04.5 LTS<br>\nGCC version: (Ubuntu 4.8.5-4ubuntu8~14.04.2) 4.8.5<br>\nCMake version: version 3.2.2</p>\n<p>Python version: 3.5<br>\nIs CUDA available: Yes<br>\nCUDA runtime version: 8.0.61<br>\nGPU models and configuration: GPU 0: GeForce GTX 1080<br>\nNvidia driver version: 384.111<br>\ncuDNN version: Probably one of the following:<br>\n/usr/lib/x86_64-linux-gnu/libcudnn.so.7.0.5<br>\n/usr/local/cuda-8.0/lib64/libcudnn.so<br>\n/usr/local/cuda-8.0/lib64/libcudnn.so.5<br>\n/usr/local/cuda-8.0/lib64/libcudnn.so.5.1.10<br>\n/usr/local/cuda-8.0/lib64/libcudnn.so.7<br>\n/usr/local/cuda-8.0/lib64/libcudnn.so.7.0.5<br>\n/usr/local/cuda-8.0/lib64/libcudnn_static.a</p>\n<p>Versions of relevant libraries:<br>\n[pip] numpy (1.13.3)<br>\n[pip] numpydoc (0.7.0)<br>\n[pip] torch (0.4.0)<br>\n[pip] torchvision (0.2.0)<br>\n[conda] pytorch 0.4.0 py35_cuda8.0.61_cudnn7.1.2_1 pytorch<br>\n[conda] torchvision 0.2.0 py35_0</p>", "body_text": "Issue description\nI am getting different results from F.conv2d(feat, kern, padding=(1,1)) and F.pad(feat, (1,1,1,1)); F.conv2d(feat, kern).\nWhat's more interesting is in the example I provided below, although both arguments for F.conv2d are non-negative, I still get some negative numbers as results.\nCode example\nDownload the data from here: https://drive.google.com/open?id=1Drgz7bTjLhPtpscvZK2daRx8Adqo5-b9\nIn [2]: params = torch.load('params.pt')\n\nIn [3]: import torch.nn.functional as F\n\nIn [4]: a = F.conv2d(params['feat'], params['kern'], padding=(1,1))\n\nIn [5]: b = F.pad(params['feat'], (1,1,1,1))\n\nIn [6]: b = F.conv2d(b, params['kern'])\n\nIn [7]: (a != b).sum()\nOut[7]: tensor(1.0868e+05, device='cuda:0')\n\nIn [8]: (a < 0).sum()\nOut[8]: tensor(2531, device='cuda:0')\n\nIn [9]: (b < 0).sum()\nOut[9]: tensor(0, device='cuda:0')\n\nIn [10]: (params['kern'] < 0).sum()\nOut[10]: tensor(0, device='cuda:0')\n\nIn [11]: (params['feat'] < 0).sum()\nOut[11]: tensor(0, device='cuda:0')\n\nIn [12]: a.shape\nOut[12]: torch.Size([16, 512, 4, 4])\n\nIn [13]: b.shape\nOut[13]: torch.Size([16, 512, 4, 4])\nSystem Info\nCollecting environment information...\nPyTorch version: 0.4.0\nIs debug build: No\nCUDA used to build PyTorch: 8.0.61\nOS: Ubuntu 14.04.5 LTS\nGCC version: (Ubuntu 4.8.5-4ubuntu8~14.04.2) 4.8.5\nCMake version: version 3.2.2\nPython version: 3.5\nIs CUDA available: Yes\nCUDA runtime version: 8.0.61\nGPU models and configuration: GPU 0: GeForce GTX 1080\nNvidia driver version: 384.111\ncuDNN version: Probably one of the following:\n/usr/lib/x86_64-linux-gnu/libcudnn.so.7.0.5\n/usr/local/cuda-8.0/lib64/libcudnn.so\n/usr/local/cuda-8.0/lib64/libcudnn.so.5\n/usr/local/cuda-8.0/lib64/libcudnn.so.5.1.10\n/usr/local/cuda-8.0/lib64/libcudnn.so.7\n/usr/local/cuda-8.0/lib64/libcudnn.so.7.0.5\n/usr/local/cuda-8.0/lib64/libcudnn_static.a\nVersions of relevant libraries:\n[pip] numpy (1.13.3)\n[pip] numpydoc (0.7.0)\n[pip] torch (0.4.0)\n[pip] torchvision (0.2.0)\n[conda] pytorch 0.4.0 py35_cuda8.0.61_cudnn7.1.2_1 pytorch\n[conda] torchvision 0.2.0 py35_0", "body": "## Issue description\r\n\r\nI am getting different results from `F.conv2d(feat, kern, padding=(1,1))` and `F.pad(feat, (1,1,1,1)); F.conv2d(feat, kern)`.\r\n\r\nWhat's more interesting is in the example I provided below, although both arguments for `F.conv2d` are non-negative, I still get some negative numbers as results.\r\n\r\n## Code example\r\nDownload the data from here: https://drive.google.com/open?id=1Drgz7bTjLhPtpscvZK2daRx8Adqo5-b9\r\n\r\n```python\r\nIn [2]: params = torch.load('params.pt')\r\n\r\nIn [3]: import torch.nn.functional as F\r\n\r\nIn [4]: a = F.conv2d(params['feat'], params['kern'], padding=(1,1))\r\n\r\nIn [5]: b = F.pad(params['feat'], (1,1,1,1))\r\n\r\nIn [6]: b = F.conv2d(b, params['kern'])\r\n\r\nIn [7]: (a != b).sum()\r\nOut[7]: tensor(1.0868e+05, device='cuda:0')\r\n\r\nIn [8]: (a < 0).sum()\r\nOut[8]: tensor(2531, device='cuda:0')\r\n\r\nIn [9]: (b < 0).sum()\r\nOut[9]: tensor(0, device='cuda:0')\r\n\r\nIn [10]: (params['kern'] < 0).sum()\r\nOut[10]: tensor(0, device='cuda:0')\r\n\r\nIn [11]: (params['feat'] < 0).sum()\r\nOut[11]: tensor(0, device='cuda:0')\r\n\r\nIn [12]: a.shape\r\nOut[12]: torch.Size([16, 512, 4, 4])\r\n\r\nIn [13]: b.shape\r\nOut[13]: torch.Size([16, 512, 4, 4])\r\n```\r\n\r\n## System Info\r\nCollecting environment information...\r\nPyTorch version: 0.4.0\r\nIs debug build: No\r\nCUDA used to build PyTorch: 8.0.61\r\n\r\nOS: Ubuntu 14.04.5 LTS\r\nGCC version: (Ubuntu 4.8.5-4ubuntu8~14.04.2) 4.8.5\r\nCMake version: version 3.2.2\r\n\r\nPython version: 3.5\r\nIs CUDA available: Yes\r\nCUDA runtime version: 8.0.61\r\nGPU models and configuration: GPU 0: GeForce GTX 1080\r\nNvidia driver version: 384.111\r\ncuDNN version: Probably one of the following:\r\n/usr/lib/x86_64-linux-gnu/libcudnn.so.7.0.5\r\n/usr/local/cuda-8.0/lib64/libcudnn.so\r\n/usr/local/cuda-8.0/lib64/libcudnn.so.5\r\n/usr/local/cuda-8.0/lib64/libcudnn.so.5.1.10\r\n/usr/local/cuda-8.0/lib64/libcudnn.so.7\r\n/usr/local/cuda-8.0/lib64/libcudnn.so.7.0.5\r\n/usr/local/cuda-8.0/lib64/libcudnn_static.a\r\n\r\nVersions of relevant libraries:\r\n[pip] numpy (1.13.3)\r\n[pip] numpydoc (0.7.0)\r\n[pip] torch (0.4.0)\r\n[pip] torchvision (0.2.0)\r\n[conda] pytorch 0.4.0 py35_cuda8.0.61_cudnn7.1.2_1 pytorch\r\n[conda] torchvision 0.2.0 py35_0\r\n\r\n"}