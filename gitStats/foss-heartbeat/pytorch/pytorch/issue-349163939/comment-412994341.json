{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/412994341", "html_url": "https://github.com/pytorch/pytorch/pull/10378#issuecomment-412994341", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/10378", "id": 412994341, "node_id": "MDEyOklzc3VlQ29tbWVudDQxMjk5NDM0MQ==", "user": {"login": "zasdfgbnm", "id": 1032377, "node_id": "MDQ6VXNlcjEwMzIzNzc=", "avatar_url": "https://avatars2.githubusercontent.com/u/1032377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zasdfgbnm", "html_url": "https://github.com/zasdfgbnm", "followers_url": "https://api.github.com/users/zasdfgbnm/followers", "following_url": "https://api.github.com/users/zasdfgbnm/following{/other_user}", "gists_url": "https://api.github.com/users/zasdfgbnm/gists{/gist_id}", "starred_url": "https://api.github.com/users/zasdfgbnm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zasdfgbnm/subscriptions", "organizations_url": "https://api.github.com/users/zasdfgbnm/orgs", "repos_url": "https://api.github.com/users/zasdfgbnm/repos", "events_url": "https://api.github.com/users/zasdfgbnm/events{/privacy}", "received_events_url": "https://api.github.com/users/zasdfgbnm/received_events", "type": "User", "site_admin": false}, "created_at": "2018-08-14T19:51:05Z", "updated_at": "2018-08-14T19:51:58Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1310570\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/soumith\">@soumith</a> My application was simple, so I just replace advanced indexing with <code>masked_select</code> and the performance improved. I was using advanced indexing, because the syntax looks neater than <code>masked_select</code> and I was assuming the performance should be comparable.</p>\n<p>And yes, I do think the hacking I'm making in this PR is ugly, but I do think we need some mechanism to handle special cases for better performance. Maybe something like:</p>\n<div class=\"highlight highlight-source-c++\"><pre><span class=\"pl-k\">if</span> (indices.size() == <span class=\"pl-c1\">1</span> &amp;&amp; indices[<span class=\"pl-c1\">0</span>].type().scalarType() == <span class=\"pl-c1\">kByte</span>) {\n  <span class=\"pl-k\">return</span> self.<span class=\"pl-c1\">masked_select</span>(indices[<span class=\"pl-c1\">0</span>]);\n}</pre></div>", "body_text": "@soumith My application was simple, so I just replace advanced indexing with masked_select and the performance improved. I was using advanced indexing, because the syntax looks neater than masked_select and I was assuming the performance should be comparable.\nAnd yes, I do think the hacking I'm making in this PR is ugly, but I do think we need some mechanism to handle special cases for better performance. Maybe something like:\nif (indices.size() == 1 && indices[0].type().scalarType() == kByte) {\n  return self.masked_select(indices[0]);\n}", "body": "@soumith My application was simple, so I just replace advanced indexing with `masked_select` and the performance improved. I was using advanced indexing, because the syntax looks neater than `masked_select` and I was assuming the performance should be comparable.\r\n\r\nAnd yes, I do think the hacking I'm making in this PR is ugly, but I do think we need some mechanism to handle special cases for better performance. Maybe something like:\r\n\r\n```C++\r\nif (indices.size() == 1 && indices[0].type().scalarType() == kByte) {\r\n  return self.masked_select(indices[0]);\r\n}\r\n```"}