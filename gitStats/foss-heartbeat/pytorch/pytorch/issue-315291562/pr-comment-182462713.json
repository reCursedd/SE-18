{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/182462713", "pull_request_review_id": 113261347, "id": 182462713, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjQ2MjcxMw==", "diff_hunk": "@@ -0,0 +1,77 @@\n+// Returns the frequency of elements of input non-negative integer tensor.\n+\n+#include \"ATen/ATen.h\"\n+#include \"ATen/Dispatch.h\"\n+\n+#include <tuple>\n+\n+namespace at { namespace native {\n+\n+#define AT_DISPATCH_BINCOUNT_INT_CASE(scalar, type)                \\\n+  case scalar: {                                                   \\\n+    return _bincount_cpu_template<type>(self, weights, minlength); \\\n+  }\n+\n+namespace {\n+template <typename integral_t>\n+Tensor _bincount_cpu_template(\n+    const Tensor& self,\n+    const Tensor& weights = {},\n+    int64_t minlength = 0) {\n+  if (minlength < 0) {\n+    throw std::domain_error(\"minlength should be >= 0\");\n+  }\n+  if (self.dim() != 1 || !isIntegralType(self.type().scalarType()) ||\n+      *self.min().data<integral_t>() < 0) {\n+    throw std::domain_error(\n+        \"bincount only supports 1-d non-negative integral inputs.\");\n+  }\n+\n+  bool isWeights = weights.defined();\n+  if (isWeights && weights.numel() != self.numel()) {\n+    throw std::runtime_error(\"input and weights should have the same length\");\n+  }\n+\n+  Tensor output;\n+  int64_t nbins = static_cast<int64_t>(*self.max().data<integral_t>()) + 1L;\n+  nbins = std::max(nbins, minlength); // at least minlength # of bins\n+\n+  integral_t* self_p = self.contiguous().data<integral_t>();\n+  if (isWeights) {\n+    output = zeros(CPU(kDouble), {nbins});", "path": "aten/src/ATen/native/Bincount.cpp", "position": null, "original_position": 41, "commit_id": "398cfbc3a790dda0aa46e99b66d0d82b4095a7b1", "original_commit_id": "002f411b3eaa11952b3930234713ee7110a6887f", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "I think this one should match the weights. It will be quite important in the CUDA case, because double precision math is quite slow", "created_at": "2018-04-18T15:08:19Z", "updated_at": "2018-11-23T15:42:44Z", "html_url": "https://github.com/pytorch/pytorch/pull/6688#discussion_r182462713", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/6688", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/182462713"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/6688#discussion_r182462713"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/6688"}}, "body_html": "<p>I think this one should match the weights. It will be quite important in the CUDA case, because double precision math is quite slow</p>", "body_text": "I think this one should match the weights. It will be quite important in the CUDA case, because double precision math is quite slow"}