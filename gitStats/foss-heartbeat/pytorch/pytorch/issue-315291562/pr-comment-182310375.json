{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/182310375", "pull_request_review_id": 113078481, "id": 182310375, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjMxMDM3NQ==", "diff_hunk": "@@ -465,3 +466,64 @@ def argmin(input, dim=None, keepdim=False):\n     if dim is None:\n         return torch._argmin(input.contiguous().view(-1), dim=0, keepdim=False)\n     return torch._argmin(input, dim, keepdim)\n+\n+\n+def bincount(input, weights=None, minlength=0):\n+    \"\"\"Count the frequency of each value in an array of non-negative ints.\n+\n+    The number of bins (size 1) is one larger than the largest value in\n+    ``input``. If ``minlength`` is specified, the number of bins is at least\n+    ``minlength``. If ``n`` is the value at position ``i``,\n+    ``out[n] += weights[i]`` if ``weights`` is specified else ``out[n] += 1``.\n+\n+    Arguments:\n+        input (Tensor): 1-d int tensor\n+        weights (Tensor): optional, weight for each value in the input tensor.\n+            Should be of same size as input tensor.\n+        minlength (int): optional, min number of bins in the output tensor.\n+            Should be non-negative.\n+\n+    Example::\n+\n+        >>> input = torch.randint(0, 8, (5,), dtype=torch.int64)\n+        >>> weights = torch.randint(10, (5,), dtype=torch.float32) / 10\n+        >>> input, weights\n+        (\n+         4\n+         4\n+         6\n+         7\n+         2\n+        [torch.LongTensor of size (5,)]\n+        ,\n+         0.5000\n+         0.6000\n+         0.0000\n+         0.4000\n+         0.9000\n+        [torch.FloatTensor of size (5,)]\n+        )\n+\n+        >>> torch.bincount(input)\n+         0\n+         0\n+         1\n+         0\n+         2\n+         0\n+         1\n+         1\n+        [torch.LongTensor of size (8,)]\n+\n+        >>> torch.bincount(input, weights)\n+         0.0000\n+         0.0000\n+         0.9000\n+         0.0000\n+         1.1000\n+         0.0000\n+         0.0000\n+         0.4000\n+        [torch.DoubleTensor of size (8,)]\n+    \"\"\"\n+    return torch._bincount(input, weights, minlength)", "path": "torch/functional.py", "position": null, "original_position": 72, "commit_id": "398cfbc3a790dda0aa46e99b66d0d82b4095a7b1", "original_commit_id": "002f411b3eaa11952b3930234713ee7110a6887f", "user": {"login": "chintak", "id": 3398558, "node_id": "MDQ6VXNlcjMzOTg1NTg=", "avatar_url": "https://avatars2.githubusercontent.com/u/3398558?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chintak", "html_url": "https://github.com/chintak", "followers_url": "https://api.github.com/users/chintak/followers", "following_url": "https://api.github.com/users/chintak/following{/other_user}", "gists_url": "https://api.github.com/users/chintak/gists{/gist_id}", "starred_url": "https://api.github.com/users/chintak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chintak/subscriptions", "organizations_url": "https://api.github.com/users/chintak/orgs", "repos_url": "https://api.github.com/users/chintak/repos", "events_url": "https://api.github.com/users/chintak/events{/privacy}", "received_events_url": "https://api.github.com/users/chintak/received_events", "type": "User", "site_admin": false}, "body": "I wasn't sure how to add optional arguments. This is a workaround. I want to be able to call `torch.bincount(t)`. If I do not add this (and just use `bincount` in ATen), I get ``RuntimeError: Tensor with type Variable expected but got undefined for argument #1``. \r\nDeclaration in ``native_functions.yml``:\r\n```\r\nfunc: _bincount(Tensor self, Tensor? weights={}, int64_t minlength=0) -> Tensor\r\n```\r\n\r\nAny ideas?", "created_at": "2018-04-18T05:09:47Z", "updated_at": "2018-11-23T15:42:40Z", "html_url": "https://github.com/pytorch/pytorch/pull/6688#discussion_r182310375", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/6688", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/182310375"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/6688#discussion_r182310375"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/6688"}}, "body_html": "<p>I wasn't sure how to add optional arguments. This is a workaround. I want to be able to call <code>torch.bincount(t)</code>. If I do not add this (and just use <code>bincount</code> in ATen), I get <code>RuntimeError: Tensor with type Variable expected but got undefined for argument #1</code>.<br>\nDeclaration in <code>native_functions.yml</code>:</p>\n<pre><code>func: _bincount(Tensor self, Tensor? weights={}, int64_t minlength=0) -&gt; Tensor\n</code></pre>\n<p>Any ideas?</p>", "body_text": "I wasn't sure how to add optional arguments. This is a workaround. I want to be able to call torch.bincount(t). If I do not add this (and just use bincount in ATen), I get RuntimeError: Tensor with type Variable expected but got undefined for argument #1.\nDeclaration in native_functions.yml:\nfunc: _bincount(Tensor self, Tensor? weights={}, int64_t minlength=0) -> Tensor\n\nAny ideas?", "in_reply_to_id": 182304190}