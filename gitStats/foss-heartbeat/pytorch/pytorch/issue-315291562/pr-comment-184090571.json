{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/184090571", "pull_request_review_id": 115214644, "id": 184090571, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NDA5MDU3MQ==", "diff_hunk": "@@ -0,0 +1,64 @@\n+// Returns the frequency of elements of input non-negative integer tensor.\n+\n+#include \"ATen/ATen.h\"\n+#include \"ATen/Dispatch.h\"\n+\n+#include <tuple>\n+\n+namespace at { namespace native {\n+\n+///////////////// bincount /////////////////\n+namespace {\n+template <typename integral_t, typename T>\n+Tensor _bincount_cpu_template(\n+    const Tensor& self,\n+    const Tensor& weights,\n+    int64_t minlength) {\n+  if (minlength < 0) {\n+    throw std::domain_error(\"minlength should be >= 0\");\n+  }\n+  if (self.dim() != 1 || self.numel() == 0 ||\n+      !isIntegralType(self.type().scalarType()) ||\n+      *self.min().data<integral_t>() < 0) {\n+    throw std::domain_error(\n+        \"bincount only supports 1-d non-negative integral inputs.\");\n+  }\n+\n+  bool has_weights = weights.defined();\n+  if (has_weights && weights.numel() != self.numel()) {\n+    throw std::runtime_error(\"input and weights should have the same length\");\n+  }\n+\n+  Tensor output;\n+  int64_t nbins = static_cast<int64_t>(*self.max().data<integral_t>()) + 1L;\n+  nbins = std::max(nbins, minlength); // at least minlength # of bins\n+\n+  integral_t* self_p = self.contiguous().data<integral_t>();\n+  if (has_weights) {\n+    output = zeros(weights.type(), {nbins});\n+    T* output_p = output.data<T>();\n+    const T* weights_p = weights.contiguous().data<T>();\n+    for (uint64_t i = 0; i < self.numel(); i++) {\n+      output_p[self_p[i]] += weights_p[i];\n+    }\n+  } else {\n+    output = zeros(CPU(kLong), {nbins});\n+    int64_t* output_p = output.data<int64_t>();\n+    for (uint64_t i = 0; i < self.numel(); i++) {\n+      output_p[self_p[i]] += 1L;\n+    }\n+  }\n+  return output;\n+}\n+} // namespace\n+\n+Tensor\n+_bincount_cpu(const Tensor& self, const Tensor& weights, int64_t minlength) {\n+  return AT_DISPATCH_INTEGRAL_TYPES(self.type(), \"bincount\", [&] {\n+    if (weights.type().scalarType() == ScalarType::Float)", "path": "aten/src/ATen/native/SummaryOps.cpp", "position": null, "original_position": 58, "commit_id": "398cfbc3a790dda0aa46e99b66d0d82b4095a7b1", "original_commit_id": "187817d02e6f172149d9a443d1d1a085fe08749f", "user": {"login": "zou3519", "id": 5652049, "node_id": "MDQ6VXNlcjU2NTIwNDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/5652049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zou3519", "html_url": "https://github.com/zou3519", "followers_url": "https://api.github.com/users/zou3519/followers", "following_url": "https://api.github.com/users/zou3519/following{/other_user}", "gists_url": "https://api.github.com/users/zou3519/gists{/gist_id}", "starred_url": "https://api.github.com/users/zou3519/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zou3519/subscriptions", "organizations_url": "https://api.github.com/users/zou3519/orgs", "repos_url": "https://api.github.com/users/zou3519/repos", "events_url": "https://api.github.com/users/zou3519/events{/privacy}", "received_events_url": "https://api.github.com/users/zou3519/received_events", "type": "User", "site_admin": false}, "body": "Shouldn't the output tensor of bincount have the same type of weights, if weights is specified?\r\n\r\ni.e. if weights are specified as an Int tensor, then the output tensor should be that as well. ", "created_at": "2018-04-25T14:54:06Z", "updated_at": "2018-11-23T15:43:09Z", "html_url": "https://github.com/pytorch/pytorch/pull/6688#discussion_r184090571", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/6688", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/184090571"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/6688#discussion_r184090571"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/6688"}}, "body_html": "<p>Shouldn't the output tensor of bincount have the same type of weights, if weights is specified?</p>\n<p>i.e. if weights are specified as an Int tensor, then the output tensor should be that as well.</p>", "body_text": "Shouldn't the output tensor of bincount have the same type of weights, if weights is specified?\ni.e. if weights are specified as an Int tensor, then the output tensor should be that as well.", "in_reply_to_id": 182525275}