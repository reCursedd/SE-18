{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/205606677", "pull_request_review_id": 140913907, "id": 205606677, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTYwNjY3Nw==", "diff_hunk": "@@ -597,6 +597,42 @@ def parse_kwargs(desc):\n             [ 0.,  0.,  0.]])\n \"\"\")\n \n+add_docstr(torch.bincount,\n+           r\"\"\"\n+bincount(self, weights=None, minlength=0) -> Tensor\n+\n+Count the frequency of each value in an array of non-negative ints.\n+\n+The number of bins (size 1) is one larger than the largest value in\n+:attr:`input`. If :attr:`minlength` is specified, the number of bins is at least\n+:attr:`minlength`. If ``n`` is the value at position ``i``,\n+:math:`out[n] += weights[i]` if :attr:`weights` is specified else\n+:math:`out[n] += 1`.\n+\n+Arguments:\n+    input (Tensor): 1-d int tensor\n+    weights (Tensor): optional, weight for each value in the input tensor.\n+        Should be of same size as input tensor.\n+    minlength (int): optional, min number of bins. Should be non-negative.\n+\n+Shape:\n+    output (Tensor): ``Size([max(input) + 1])``\n+\n+Example::\n+\n+    >>> input = torch.randint(0, 8, (5,), dtype=torch.int64)\n+    >>> weights = torch.linspace(0, 1, steps=5)\n+    >>> input, weights\n+    (tensor([4, 3, 6, 3, 4]),\n+     tensor([ 0.0000,  0.2500,  0.5000,  0.7500,  1.0000])\n+\n+    >>> torch.bincount(input)\n+    tensor([0, 0, 0, 2, 2, 0, 1])\n+\n+    >>> input.bincount(weights)", "path": "torch/_torch_docs.py", "position": 36, "original_position": 36, "commit_id": "398cfbc3a790dda0aa46e99b66d0d82b4095a7b1", "original_commit_id": "398cfbc3a790dda0aa46e99b66d0d82b4095a7b1", "user": {"login": "chintak", "id": 3398558, "node_id": "MDQ6VXNlcjMzOTg1NTg=", "avatar_url": "https://avatars2.githubusercontent.com/u/3398558?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chintak", "html_url": "https://github.com/chintak", "followers_url": "https://api.github.com/users/chintak/followers", "following_url": "https://api.github.com/users/chintak/following{/other_user}", "gists_url": "https://api.github.com/users/chintak/gists{/gist_id}", "starred_url": "https://api.github.com/users/chintak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chintak/subscriptions", "organizations_url": "https://api.github.com/users/chintak/orgs", "repos_url": "https://api.github.com/users/chintak/repos", "events_url": "https://api.github.com/users/chintak/events{/privacy}", "received_events_url": "https://api.github.com/users/chintak/received_events", "type": "User", "site_admin": false}, "body": "No. It is similar to defining a method in a class. You'd define the method:\r\n```python\r\nclass Abc:\r\n  def cmethod(self, ...):\r\n      pass\r\n```\r\nAnd you'd call the `cmethod` as: \r\n```python\r\ncls = Abc()\r\ncls.cmethod()  # and not, cls.cmethod(cls) \r\n```\r\nHere, `bincount` is a method for the `Tensor` class and `input` is a `Tensor` instance.", "created_at": "2018-07-26T21:21:35Z", "updated_at": "2018-11-23T15:48:16Z", "html_url": "https://github.com/pytorch/pytorch/pull/6688#discussion_r205606677", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/6688", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/205606677"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/6688#discussion_r205606677"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/6688"}}, "body_html": "<p>No. It is similar to defining a method in a class. You'd define the method:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">class</span> <span class=\"pl-en\">Abc</span>:\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">cmethod</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>, ...):\n      <span class=\"pl-k\">pass</span></pre></div>\n<p>And you'd call the <code>cmethod</code> as:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-c1\">cls</span> <span class=\"pl-k\">=</span> Abc()\n<span class=\"pl-c1\">cls</span>.cmethod()  <span class=\"pl-c\"><span class=\"pl-c\">#</span> and not, cls.cmethod(cls) </span></pre></div>\n<p>Here, <code>bincount</code> is a method for the <code>Tensor</code> class and <code>input</code> is a <code>Tensor</code> instance.</p>", "body_text": "No. It is similar to defining a method in a class. You'd define the method:\nclass Abc:\n  def cmethod(self, ...):\n      pass\nAnd you'd call the cmethod as:\ncls = Abc()\ncls.cmethod()  # and not, cls.cmethod(cls) \nHere, bincount is a method for the Tensor class and input is a Tensor instance.", "in_reply_to_id": 205573133}