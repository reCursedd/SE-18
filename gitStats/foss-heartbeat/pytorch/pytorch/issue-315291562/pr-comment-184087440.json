{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/184087440", "pull_request_review_id": 115210800, "id": 184087440, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NDA4NzQ0MA==", "diff_hunk": "@@ -6546,6 +6546,35 @@ def test_unique_cuda(self):\n             lambda: torch.unique(torch.cuda.FloatTensor([0., 1.])),\n         )\n \n+    def test_bincount_cpu(self):\n+        long_t = torch.int64\n+        # test weights\n+        byte_counts = torch.bincount(\n+            torch.tensor([0, 1, 1, 1, 4], dtype=torch.uint8),\n+            torch.tensor([.1, .2, .3, .4, .5]))\n+        self.assertEqual(torch.tensor([0.1, 0.9, 0, 0, 0.5]), byte_counts)\n+        # test tensor method without weights\n+        long_counts = torch.tensor([0, 3, 2, 1, 3]).bincount()\n+        self.assertEqual(torch.tensor([1, 1, 1, 2], dtype=long_t), long_counts)\n+        # test minlength functionality\n+        int_counts = torch.bincount(torch.tensor([1, 1, 1, 1]), minlength=5)\n+        self.assertEqual(torch.tensor([0, 4, 0, 0, 0], dtype=long_t), int_counts)\n+\n+        # negative input throws\n+        with self.assertRaises(RuntimeError):", "path": "test/test_torch.py", "position": null, "original_position": 19, "commit_id": "398cfbc3a790dda0aa46e99b66d0d82b4095a7b1", "original_commit_id": "c70f8328a9868a616dbe939a7635a9dd0ae465b4", "user": {"login": "zou3519", "id": 5652049, "node_id": "MDQ6VXNlcjU2NTIwNDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/5652049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zou3519", "html_url": "https://github.com/zou3519", "followers_url": "https://api.github.com/users/zou3519/followers", "following_url": "https://api.github.com/users/zou3519/following{/other_user}", "gists_url": "https://api.github.com/users/zou3519/gists{/gist_id}", "starred_url": "https://api.github.com/users/zou3519/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zou3519/subscriptions", "organizations_url": "https://api.github.com/users/zou3519/orgs", "repos_url": "https://api.github.com/users/zou3519/repos", "events_url": "https://api.github.com/users/zou3519/events{/privacy}", "received_events_url": "https://api.github.com/users/zou3519/received_events", "type": "User", "site_admin": false}, "body": "nit: It would be nice to test the error messages to make sure they return what we want. You can use `self.assertRaisesRegex` for that", "created_at": "2018-04-25T14:46:18Z", "updated_at": "2018-11-23T15:43:09Z", "html_url": "https://github.com/pytorch/pytorch/pull/6688#discussion_r184087440", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/6688", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/184087440"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/6688#discussion_r184087440"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/6688"}}, "body_html": "<p>nit: It would be nice to test the error messages to make sure they return what we want. You can use <code>self.assertRaisesRegex</code> for that</p>", "body_text": "nit: It would be nice to test the error messages to make sure they return what we want. You can use self.assertRaisesRegex for that"}