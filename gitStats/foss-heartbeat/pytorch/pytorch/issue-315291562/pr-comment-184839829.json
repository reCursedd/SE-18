{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/184839829", "pull_request_review_id": 116121251, "id": 184839829, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NDgzOTgyOQ==", "diff_hunk": "@@ -0,0 +1,62 @@\n+// Returns the frequency of elements of input non-negative integer tensor.\n+\n+#include \"ATen/ATen.h\"\n+#include \"ATen/Dispatch.h\"\n+\n+#include <tuple>\n+\n+namespace at { namespace native {\n+\n+///////////////// bincount /////////////////\n+namespace {\n+template <typename weights_t, typename integral_t>\n+Tensor _bincount_cpu_template(\n+    const Tensor& self,\n+    const Tensor& weights,\n+    int64_t minlength) {\n+  if (minlength < 0) {\n+    AT_ERROR(\"minlength should be >= 0\");\n+  }\n+  if (self.dim() != 1 || self.numel() == 0 ||\n+      *self.min().data<integral_t>() < 0) {\n+    AT_ERROR(\"bincount only supports 1-d non-negative integral inputs.\");\n+  }\n+\n+  bool has_weights = weights.defined();\n+  if (has_weights && weights.numel() != self.numel()) {\n+    AT_ERROR(\"input and weights should have the same length\");\n+  }\n+\n+  Tensor output;\n+  int64_t nbins = static_cast<int64_t>(*self.max().data<integral_t>()) + 1L;\n+  nbins = std::max(nbins, minlength); // at least minlength # of bins\n+\n+  integral_t* self_p = self.contiguous().data<integral_t>();\n+  if (has_weights) {\n+    output = zeros(weights.type(), {nbins});", "path": "aten/src/ATen/native/SummaryOps.cpp", "position": null, "original_position": 36, "commit_id": "398cfbc3a790dda0aa46e99b66d0d82b4095a7b1", "original_commit_id": "7401dd556829cc1701884d2de95ed5aa77749456", "user": {"login": "chintak", "id": 3398558, "node_id": "MDQ6VXNlcjMzOTg1NTg=", "avatar_url": "https://avatars2.githubusercontent.com/u/3398558?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chintak", "html_url": "https://github.com/chintak", "followers_url": "https://api.github.com/users/chintak/followers", "following_url": "https://api.github.com/users/chintak/following{/other_user}", "gists_url": "https://api.github.com/users/chintak/gists{/gist_id}", "starred_url": "https://api.github.com/users/chintak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chintak/subscriptions", "organizations_url": "https://api.github.com/users/chintak/orgs", "repos_url": "https://api.github.com/users/chintak/repos", "events_url": "https://api.github.com/users/chintak/events{/privacy}", "received_events_url": "https://api.github.com/users/chintak/received_events", "type": "User", "site_admin": false}, "body": "@zou3519 ", "created_at": "2018-04-28T04:37:09Z", "updated_at": "2018-11-23T15:43:22Z", "html_url": "https://github.com/pytorch/pytorch/pull/6688#discussion_r184839829", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/6688", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/184839829"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/6688#discussion_r184839829"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/6688"}}, "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=5652049\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/zou3519\">@zou3519</a></p>", "body_text": "@zou3519"}