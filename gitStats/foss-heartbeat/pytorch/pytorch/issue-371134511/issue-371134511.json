{"url": "https://api.github.com/repos/pytorch/pytorch/issues/12769", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/12769/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/12769/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/12769/events", "html_url": "https://github.com/pytorch/pytorch/issues/12769", "id": 371134511, "node_id": "MDU6SXNzdWUzNzExMzQ1MTE=", "number": 12769, "title": "JIT: elementwise 'and' is treated as an op on booleans", "user": {"login": "pfrendl", "id": 6968154, "node_id": "MDQ6VXNlcjY5NjgxNTQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/6968154?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pfrendl", "html_url": "https://github.com/pfrendl", "followers_url": "https://api.github.com/users/pfrendl/followers", "following_url": "https://api.github.com/users/pfrendl/following{/other_user}", "gists_url": "https://api.github.com/users/pfrendl/gists{/gist_id}", "starred_url": "https://api.github.com/users/pfrendl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pfrendl/subscriptions", "organizations_url": "https://api.github.com/users/pfrendl/orgs", "repos_url": "https://api.github.com/users/pfrendl/repos", "events_url": "https://api.github.com/users/pfrendl/events{/privacy}", "received_events_url": "https://api.github.com/users/pfrendl/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 424131847, "node_id": "MDU6TGFiZWw0MjQxMzE4NDc=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/bug", "name": "bug", "color": "b60205", "default": true}, {"id": 679953983, "node_id": "MDU6TGFiZWw2Nzk5NTM5ODM=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/jit", "name": "jit", "color": "c5def5", "default": false}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-10-17T15:24:49Z", "updated_at": "2018-10-17T18:45:34Z", "closed_at": null, "author_association": "NONE", "body_html": "<h2><g-emoji class=\"g-emoji\" alias=\"bug\" fallback-src=\"https://assets-cdn.github.com/images/icons/emoji/unicode/1f41b.png\">\ud83d\udc1b</g-emoji> Bug</h2>\n<p>The JIT script compiler does not support the <code>&amp;</code> operator, so <code>a &amp; b</code> fails.</p>\n<p>In torch/jit/frontend.py, the following definition exists:<br>\nboolop_map = {<br>\nast.And: 'and',<br>\nast.Or: 'or',<br>\n}</p>\n<p>I tried <code>a and b</code>, but this makes the compiler fail, maybe because it can't differentiate tensors from boolean variables at compile time?</p>\n<h2>To Reproduce</h2>\n<p>Minimal failing example with error messages attached:</p>\n<pre><code>import torch\n\n\n'''\ntorch.jit.frontend.NotSupportedError: unsupported binary operator: BitAnd\n@torch.jit.script\ndef fun1(a, b):\n\treturn a &amp; b# RuntimeError: expected a boolean expression for condition but found Tensor, to use a tensor in a boolean expression, explicitly cast it with `bool()`\n         ~~~ &lt;--- HERE\n'''\n@torch.jit.script\ndef fun1(a, b):\n\treturn a &amp; b\n\n\n'''\nRuntimeError: \nexpected a boolean expression for condition but found Tensor, to use a tensor in a boolean expression, explicitly cast it with `bool()`:\n@torch.jit.script\ndef fun2(a, b):\n\treturn a and b\n        ~ &lt;--- HERE\n'''\n@torch.jit.script\ndef fun2(a, b):\n\treturn a and b\n\n\nif __name__ == '__main__':\n\ta = torch.ByteTensor([0])\n\tb = torch.ByteTensor([1])\n\tfun1(a, b)\n\tfun2(a, b)\n</code></pre>\n\n<h2>Expected behavior</h2>\n<p>I should be able to apply the bitwise and binary operation to two ByteTensors (in case their shapes are compatible).</p>\n<h2>Environment</h2>\n<ul>\n<li>PyTorch Version (e.g., 1.0): 1.0.0.dev20181015</li>\n<li>OS (e.g., Linux): Ubuntu 16.04</li>\n<li>How you installed PyTorch (<code>conda</code>, <code>pip</code>, source): pip3</li>\n<li>Python version: 3.5.2</li>\n<li>CUDA/cuDNN version: 9.2/7104</li>\n<li>GPU models and configuration: GTX 1080 Ti x 2</li>\n</ul>", "body_text": "\ud83d\udc1b Bug\nThe JIT script compiler does not support the & operator, so a & b fails.\nIn torch/jit/frontend.py, the following definition exists:\nboolop_map = {\nast.And: 'and',\nast.Or: 'or',\n}\nI tried a and b, but this makes the compiler fail, maybe because it can't differentiate tensors from boolean variables at compile time?\nTo Reproduce\nMinimal failing example with error messages attached:\nimport torch\n\n\n'''\ntorch.jit.frontend.NotSupportedError: unsupported binary operator: BitAnd\n@torch.jit.script\ndef fun1(a, b):\n\treturn a & b# RuntimeError: expected a boolean expression for condition but found Tensor, to use a tensor in a boolean expression, explicitly cast it with `bool()`\n         ~~~ <--- HERE\n'''\n@torch.jit.script\ndef fun1(a, b):\n\treturn a & b\n\n\n'''\nRuntimeError: \nexpected a boolean expression for condition but found Tensor, to use a tensor in a boolean expression, explicitly cast it with `bool()`:\n@torch.jit.script\ndef fun2(a, b):\n\treturn a and b\n        ~ <--- HERE\n'''\n@torch.jit.script\ndef fun2(a, b):\n\treturn a and b\n\n\nif __name__ == '__main__':\n\ta = torch.ByteTensor([0])\n\tb = torch.ByteTensor([1])\n\tfun1(a, b)\n\tfun2(a, b)\n\n\nExpected behavior\nI should be able to apply the bitwise and binary operation to two ByteTensors (in case their shapes are compatible).\nEnvironment\n\nPyTorch Version (e.g., 1.0): 1.0.0.dev20181015\nOS (e.g., Linux): Ubuntu 16.04\nHow you installed PyTorch (conda, pip, source): pip3\nPython version: 3.5.2\nCUDA/cuDNN version: 9.2/7104\nGPU models and configuration: GTX 1080 Ti x 2", "body": "## \ud83d\udc1b Bug\r\n\r\nThe JIT script compiler does not support the `&` operator, so `a & b` fails. \r\n\r\nIn torch/jit/frontend.py, the following definition exists:\r\n boolop_map = {\r\n        ast.And: 'and',\r\n        ast.Or: 'or',\r\n    }\r\n\r\nI tried `a and b`, but this makes the compiler fail, maybe because it can't differentiate tensors from boolean variables at compile time?\r\n\r\n## To Reproduce\r\n\r\nMinimal failing example with error messages attached:\r\n\r\n```\r\nimport torch\r\n\r\n\r\n'''\r\ntorch.jit.frontend.NotSupportedError: unsupported binary operator: BitAnd\r\n@torch.jit.script\r\ndef fun1(a, b):\r\n\treturn a & b# RuntimeError: expected a boolean expression for condition but found Tensor, to use a tensor in a boolean expression, explicitly cast it with `bool()`\r\n         ~~~ <--- HERE\r\n'''\r\n@torch.jit.script\r\ndef fun1(a, b):\r\n\treturn a & b\r\n\r\n\r\n'''\r\nRuntimeError: \r\nexpected a boolean expression for condition but found Tensor, to use a tensor in a boolean expression, explicitly cast it with `bool()`:\r\n@torch.jit.script\r\ndef fun2(a, b):\r\n\treturn a and b\r\n        ~ <--- HERE\r\n'''\r\n@torch.jit.script\r\ndef fun2(a, b):\r\n\treturn a and b\r\n\r\n\r\nif __name__ == '__main__':\r\n\ta = torch.ByteTensor([0])\r\n\tb = torch.ByteTensor([1])\r\n\tfun1(a, b)\r\n\tfun2(a, b)\r\n```\r\n\r\n\r\n<!-- If you have a code sample, error messages, stack traces, please provide it here as well -->\r\n\r\n## Expected behavior\r\n\r\nI should be able to apply the bitwise and binary operation to two ByteTensors (in case their shapes are compatible).\r\n\r\n## Environment\r\n\r\n - PyTorch Version (e.g., 1.0): 1.0.0.dev20181015\r\n - OS (e.g., Linux): Ubuntu 16.04\r\n - How you installed PyTorch (`conda`, `pip`, source): pip3\r\n - Python version: 3.5.2\r\n - CUDA/cuDNN version: 9.2/7104\r\n - GPU models and configuration: GTX 1080 Ti x 2\r\n"}