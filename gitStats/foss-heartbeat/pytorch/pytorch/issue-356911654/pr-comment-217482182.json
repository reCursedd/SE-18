{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/217482182", "pull_request_review_id": 155205249, "id": 217482182, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNzQ4MjE4Mg==", "diff_hunk": "@@ -252,16 +252,19 @@ SparseTensor& copy_sparse_(SparseTensor& self, const SparseTensor& src) {\n   return self;\n }\n \n+// NOTE: `coalesce` should never be an in-place operation.\n SparseTensor coalesce_sparse_cpu(const SparseTensor& self) {\n   AT_ASSERT(self.defined());\n   AT_ASSERT(!self.is_variable());\n   AT_ASSERT(self.is_sparse());\n \n   if (self._nnz() < 2) {\n-    _get_sparse_impl(self)->set_coalesced(true);\n+    SparseTensor dst = self.clone();", "path": "aten/src/ATen/native/sparse/SparseTensor.cpp", "position": null, "original_position": 12, "commit_id": "fe5f89cb53fc2103dccc63221dc8ff32fe986fb1", "original_commit_id": "3e84558090d5aa34fcc7b649450c2e6828df0e62", "user": {"login": "gchanan", "id": 3768583, "node_id": "MDQ6VXNlcjM3Njg1ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3768583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gchanan", "html_url": "https://github.com/gchanan", "followers_url": "https://api.github.com/users/gchanan/followers", "following_url": "https://api.github.com/users/gchanan/following{/other_user}", "gists_url": "https://api.github.com/users/gchanan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gchanan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gchanan/subscriptions", "organizations_url": "https://api.github.com/users/gchanan/orgs", "repos_url": "https://api.github.com/users/gchanan/repos", "events_url": "https://api.github.com/users/gchanan/events{/privacy}", "received_events_url": "https://api.github.com/users/gchanan/received_events", "type": "User", "site_admin": false}, "body": "The weirdness here is that coalesce is a not-always-accurate cache, i.e. if you create a new sparse tensor with nnz < 2, it will report is_coalesced as False.  We don't want to change the data structure out from under someone if they do all out-of-place-ops, e.g.:\r\n```\r\nx = # create sparse tensor\r\nassertFalse(x.is_coalesced)\r\ny = x.coalesce()\r\nassertFalse(x.is_coalesced)\r\n```\r\n\r\nSo, I think the right thing to do here, is move the `is_coalesced` case up and don't clone in that case; then, the other cases should clone and not change the underlying data structure.", "created_at": "2018-09-13T18:07:52Z", "updated_at": "2018-11-23T15:51:17Z", "html_url": "https://github.com/pytorch/pytorch/pull/11228#discussion_r217482182", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/11228", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/217482182"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/11228#discussion_r217482182"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/11228"}}, "body_html": "<p>The weirdness here is that coalesce is a not-always-accurate cache, i.e. if you create a new sparse tensor with nnz &lt; 2, it will report is_coalesced as False.  We don't want to change the data structure out from under someone if they do all out-of-place-ops, e.g.:</p>\n<pre><code>x = # create sparse tensor\nassertFalse(x.is_coalesced)\ny = x.coalesce()\nassertFalse(x.is_coalesced)\n</code></pre>\n<p>So, I think the right thing to do here, is move the <code>is_coalesced</code> case up and don't clone in that case; then, the other cases should clone and not change the underlying data structure.</p>", "body_text": "The weirdness here is that coalesce is a not-always-accurate cache, i.e. if you create a new sparse tensor with nnz < 2, it will report is_coalesced as False.  We don't want to change the data structure out from under someone if they do all out-of-place-ops, e.g.:\nx = # create sparse tensor\nassertFalse(x.is_coalesced)\ny = x.coalesce()\nassertFalse(x.is_coalesced)\n\nSo, I think the right thing to do here, is move the is_coalesced case up and don't clone in that case; then, the other cases should clone and not change the underlying data structure.", "in_reply_to_id": 217234590}