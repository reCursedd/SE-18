{"url": "https://api.github.com/repos/pytorch/pytorch/issues/4437", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/4437/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/4437/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/4437/events", "html_url": "https://github.com/pytorch/pytorch/pull/4437", "id": 285474226, "node_id": "MDExOlB1bGxSZXF1ZXN0MTYwNzU4MTIy", "number": 4437, "title": "Fix python gc race condition with THPVariable_traverse", "user": {"login": "zou3519", "id": 5652049, "node_id": "MDQ6VXNlcjU2NTIwNDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/5652049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zou3519", "html_url": "https://github.com/zou3519", "followers_url": "https://api.github.com/users/zou3519/followers", "following_url": "https://api.github.com/users/zou3519/following{/other_user}", "gists_url": "https://api.github.com/users/zou3519/gists{/gist_id}", "starred_url": "https://api.github.com/users/zou3519/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zou3519/subscriptions", "organizations_url": "https://api.github.com/users/zou3519/orgs", "repos_url": "https://api.github.com/users/zou3519/repos", "events_url": "https://api.github.com/users/zou3519/events{/privacy}", "received_events_url": "https://api.github.com/users/zou3519/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 825466279, "node_id": "MDU6TGFiZWw4MjU0NjYyNzk=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/0.3.1", "name": "0.3.1", "color": "aefcae", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-01-02T16:30:10Z", "updated_at": "2018-02-04T21:50:54Z", "closed_at": "2018-01-02T18:57:22Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/4437", "html_url": "https://github.com/pytorch/pytorch/pull/4437", "diff_url": "https://github.com/pytorch/pytorch/pull/4437.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/4437.patch"}, "body_html": "<p><span class=\"issue-keyword tooltipped tooltipped-se\" aria-label=\"This pull request closes issue #3883.\">Fixes</span> <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"276836083\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/3883\" data-hovercard-type=\"issue\" data-hovercard-url=\"/pytorch/pytorch/issues/3883/hovercard\" href=\"https://github.com/pytorch/pytorch/issues/3883\">#3883</a>: asserts being triggered in DataParallel for long training regiments like imagenet.</p>\n<p>The bug is that a python Function in the computation graph gets garbage collected due to a C++ shared pointer to the C++ Function it wraps changing <code>use_count()</code> from 1 to more than 1 during python garbage collection. This happens because the \"python state\" of Variable changes: the <code>THPVariable_traverse</code> method indicates that when the shared pointer's <code>use_count()</code> is 1, the python Variable holds a python reference to the python Function, but not when <code>use_count() &gt; 1</code>. See this <a href=\"https://gist.github.com/zou3519/7ac92b84dd7d206dcc6eae55fee8372c\">gist</a> for a more detailed exploration of the diagnosis.</p>\n<p>The bug could be fixed by treating the shared pointer (a Variable's <code>grad_fn</code>) as part of the python state and intelligently grabbing the GIL when necessary. The downside to this approach is the complexity and potential overhead.</p>\n<p>Alternatively, after talking with <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=655866\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/colesbury\">@colesbury</a>, we think it might be better to remove the checking of the shared pointer's <code>use_count()</code> in <code>THPVariable_traverse</code>. This effectively disables reference cycle garbage collection for python Functions.</p>", "body_text": "Fixes #3883: asserts being triggered in DataParallel for long training regiments like imagenet.\nThe bug is that a python Function in the computation graph gets garbage collected due to a C++ shared pointer to the C++ Function it wraps changing use_count() from 1 to more than 1 during python garbage collection. This happens because the \"python state\" of Variable changes: the THPVariable_traverse method indicates that when the shared pointer's use_count() is 1, the python Variable holds a python reference to the python Function, but not when use_count() > 1. See this gist for a more detailed exploration of the diagnosis.\nThe bug could be fixed by treating the shared pointer (a Variable's grad_fn) as part of the python state and intelligently grabbing the GIL when necessary. The downside to this approach is the complexity and potential overhead.\nAlternatively, after talking with @colesbury, we think it might be better to remove the checking of the shared pointer's use_count() in THPVariable_traverse. This effectively disables reference cycle garbage collection for python Functions.", "body": "Fixes #3883: asserts being triggered in DataParallel for long training regiments like imagenet.\r\n\r\nThe bug is that a python Function in the computation graph gets garbage collected due to a C++ shared pointer to the C++ Function it wraps changing `use_count()` from 1 to more than 1 during python garbage collection. This happens because the \"python state\" of Variable changes: the `THPVariable_traverse` method indicates that when the shared pointer's `use_count()` is 1, the python Variable holds a python reference to the python Function, but not when `use_count() > 1`. See this [gist](https://gist.github.com/zou3519/7ac92b84dd7d206dcc6eae55fee8372c) for a more detailed exploration of the diagnosis. \r\n\r\nThe bug could be fixed by treating the shared pointer (a Variable's `grad_fn`) as part of the python state and intelligently grabbing the GIL when necessary. The downside to this approach is the complexity and potential overhead.\r\n\r\nAlternatively, after talking with @colesbury, we think it might be better to remove the checking of the shared pointer's `use_count()` in `THPVariable_traverse`. This effectively disables reference cycle garbage collection for python Functions."}