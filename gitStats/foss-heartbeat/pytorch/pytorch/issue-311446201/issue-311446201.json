{"url": "https://api.github.com/repos/pytorch/pytorch/issues/6297", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/6297/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/6297/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/6297/events", "html_url": "https://github.com/pytorch/pytorch/pull/6297", "id": 311446201, "node_id": "MDExOlB1bGxSZXF1ZXN0MTc5NTUzOTk1", "number": 6297, "title": "[JIT] Hacky: Staged symbolics for RNN nodes", "user": {"login": "jamesr66a", "id": 4685384, "node_id": "MDQ6VXNlcjQ2ODUzODQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/4685384?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamesr66a", "html_url": "https://github.com/jamesr66a", "followers_url": "https://api.github.com/users/jamesr66a/followers", "following_url": "https://api.github.com/users/jamesr66a/following{/other_user}", "gists_url": "https://api.github.com/users/jamesr66a/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamesr66a/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamesr66a/subscriptions", "organizations_url": "https://api.github.com/users/jamesr66a/orgs", "repos_url": "https://api.github.com/users/jamesr66a/repos", "events_url": "https://api.github.com/users/jamesr66a/events{/privacy}", "received_events_url": "https://api.github.com/users/jamesr66a/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "jamesr66a", "id": 4685384, "node_id": "MDQ6VXNlcjQ2ODUzODQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/4685384?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamesr66a", "html_url": "https://github.com/jamesr66a", "followers_url": "https://api.github.com/users/jamesr66a/followers", "following_url": "https://api.github.com/users/jamesr66a/following{/other_user}", "gists_url": "https://api.github.com/users/jamesr66a/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamesr66a/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamesr66a/subscriptions", "organizations_url": "https://api.github.com/users/jamesr66a/orgs", "repos_url": "https://api.github.com/users/jamesr66a/repos", "events_url": "https://api.github.com/users/jamesr66a/events{/privacy}", "received_events_url": "https://api.github.com/users/jamesr66a/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "jamesr66a", "id": 4685384, "node_id": "MDQ6VXNlcjQ2ODUzODQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/4685384?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamesr66a", "html_url": "https://github.com/jamesr66a", "followers_url": "https://api.github.com/users/jamesr66a/followers", "following_url": "https://api.github.com/users/jamesr66a/following{/other_user}", "gists_url": "https://api.github.com/users/jamesr66a/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamesr66a/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamesr66a/subscriptions", "organizations_url": "https://api.github.com/users/jamesr66a/orgs", "repos_url": "https://api.github.com/users/jamesr66a/repos", "events_url": "https://api.github.com/users/jamesr66a/events{/privacy}", "received_events_url": "https://api.github.com/users/jamesr66a/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 6, "created_at": "2018-04-05T01:44:52Z", "updated_at": "2018-11-23T15:42:19Z", "closed_at": "2018-04-12T23:29:26Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/6297", "html_url": "https://github.com/pytorch/pytorch/pull/6297", "diff_url": "https://github.com/pytorch/pytorch/pull/6297.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/6297.patch"}, "body_html": "<p>Stacked on top of <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"311045634\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/6256\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/pytorch/pytorch/pull/6256/hovercard\" href=\"https://github.com/pytorch/pytorch/pull/6256\">#6256</a></p>\n<p>Similarly to that PR, this PR makes it so that RNN nodes (e.g. LSTM) lower into a PythonOp with an associated <code>symbolic</code> attribute containing the ONNX symbolic for later export.</p>\n<p>This PR brings up a few issues:</p>\n<ul>\n<li>The RNN functions take in and return (nested) tuples and lists of Tensors. In order to actually run the Python implementation given the flattened argument list presented by the JIT, I have to wrap the RNN functions in another function that rematerializes those Python data structures. This is hacky but it works</li>\n<li>Eventually we're probably going to want to convert the RNN modules into <code>ScriptModule</code>s so that we can optimize them with the rest of the graph.</li>\n</ul>", "body_text": "Stacked on top of #6256\nSimilarly to that PR, this PR makes it so that RNN nodes (e.g. LSTM) lower into a PythonOp with an associated symbolic attribute containing the ONNX symbolic for later export.\nThis PR brings up a few issues:\n\nThe RNN functions take in and return (nested) tuples and lists of Tensors. In order to actually run the Python implementation given the flattened argument list presented by the JIT, I have to wrap the RNN functions in another function that rematerializes those Python data structures. This is hacky but it works\nEventually we're probably going to want to convert the RNN modules into ScriptModules so that we can optimize them with the rest of the graph.", "body": "Stacked on top of https://github.com/pytorch/pytorch/pull/6256\r\n\r\nSimilarly to that PR, this PR makes it so that RNN nodes (e.g. LSTM) lower into a PythonOp with an associated `symbolic` attribute containing the ONNX symbolic for later export.\r\n\r\nThis PR brings up a few issues: \r\n\r\n* The RNN functions take in and return (nested) tuples and lists of Tensors. In order to actually run the Python implementation given the flattened argument list presented by the JIT, I have to wrap the RNN functions in another function that rematerializes those Python data structures. This is hacky but it works\r\n* Eventually we're probably going to want to convert the RNN modules into `ScriptModule`s so that we can optimize them with the rest of the graph."}