{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/223440532", "pull_request_review_id": 162568071, "id": 223440532, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyMzQ0MDUzMg==", "diff_hunk": "@@ -363,6 +346,37 @@ Resolver pythonResolver(ResolutionCallback rcb) {\n   };\n }\n \n+FunctionSchema getSchemaWithDefaults(\n+    std::unordered_map<std::string, py::object>& default_args,\n+    FunctionSchema& schema) {\n+  std::vector<Argument> new_args;\n+  for (auto& arg : schema.arguments) {\n+    auto it = default_args.find(arg.name);\n+    if (it != default_args.end()) {\n+      IValue value = *constantToIValue(it->second);", "path": "torch/csrc/jit/script/init.cpp", "position": null, "original_position": 56, "commit_id": "ad0fd0df8b73298b60bec38f6b30986e498494a2", "original_commit_id": "7bd9670ecc38c2793959ad0d426f15d5b3bbac6b", "user": {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, "body": "There is no need for `constantToIValue`, we already have `inline IValue toIValue(py::handle obj, const TypePtr& type);` which is the correct call for this purpose. Most importantly, this pathway ensure that the returned `IValue` is in fact the right `type`. The refactored `constantToIValue` does not ensure that so this code can cause the program to throw an exception.", "created_at": "2018-10-08T17:23:49Z", "updated_at": "2018-11-23T15:52:35Z", "html_url": "https://github.com/pytorch/pytorch/pull/12345#discussion_r223440532", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/12345", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/223440532"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/12345#discussion_r223440532"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/12345"}}, "body_html": "<p>There is no need for <code>constantToIValue</code>, we already have <code>inline IValue toIValue(py::handle obj, const TypePtr&amp; type);</code> which is the correct call for this purpose. Most importantly, this pathway ensure that the returned <code>IValue</code> is in fact the right <code>type</code>. The refactored <code>constantToIValue</code> does not ensure that so this code can cause the program to throw an exception.</p>", "body_text": "There is no need for constantToIValue, we already have inline IValue toIValue(py::handle obj, const TypePtr& type); which is the correct call for this purpose. Most importantly, this pathway ensure that the returned IValue is in fact the right type. The refactored constantToIValue does not ensure that so this code can cause the program to throw an exception."}