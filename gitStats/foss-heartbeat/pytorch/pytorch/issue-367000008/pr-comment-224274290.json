{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/224274290", "pull_request_review_id": 163598478, "id": 224274290, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNDI3NDI5MA==", "diff_hunk": "@@ -1982,6 +1982,69 @@ def python_op_name_test(y):\n         self.assertExpected(loop_use_test.graph.pretty_print(), \"loop_use_test\")\n         self.assertExpected(python_op_name_test.graph.pretty_print(), \"python_op_name_test\")\n \n+    def test_function_default_values(self):\n+        outer_var = torch.tensor(20)\n+        outer_var2 = torch.tensor(30)\n+        a = torch.tensor(0.5)\n+        b = torch.tensor(10)\n+\n+        @torch.jit.script\n+        def simple_fn(x, a=a, b=b, c=outer_var + outer_var2):\n+            return x + a + b + c\n+\n+        self.assertExpectedGraph(simple_fn.graph, \"simple\")\n+        self.assertEqual(\n+            simple_fn(torch.ones(1)),\n+            torch.ones(1) + 0.5 + 10 + (20 + 30))\n+        self.assertEqual(\n+            simple_fn(torch.ones(1), torch.tensor(1), torch.tensor(3), torch.tensor(4)),\n+            torch.ones(1) + 1 + 3 + 4)\n+\n+        outer_c = torch.tensor(9)\n+        outer_flag = torch.tensor(False)\n+\n+        @torch.jit.script\n+        def bool_fn(x, a=outer_c, flag=outer_flag):\n+            if bool(flag):\n+                result = x\n+            else:\n+                result = x + a\n+            return result\n+\n+        self.assertExpectedGraph(bool_fn.graph, \"bool\")\n+        self.assertEqual(bool_fn(torch.ones(1)), torch.ones(1) + 9)\n+        self.assertEqual(\n+            bool_fn(torch.ones(1), torch.tensor(1), torch.tensor(True)),\n+            torch.ones(1))\n+\n+        if not PY2:", "path": "test/test_jit.py", "position": null, "original_position": 39, "commit_id": "ad0fd0df8b73298b60bec38f6b30986e498494a2", "original_commit_id": "7b4e17c5be855ab44d6ec5e76796e6d2df71718b", "user": {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, "body": "This doesn't work. Parsing of the file is not guarded by an if statement.\r\nUse python 2 style type comments like seen in other examples:\r\n```\r\ndef hints(x, a=0.5, b=10):  # noqa: E999\r\n    # type: (Tensor, float, int) -> Tensor\r\n    return x + a + b\r\n```", "created_at": "2018-10-10T23:35:05Z", "updated_at": "2018-11-23T15:52:51Z", "html_url": "https://github.com/pytorch/pytorch/pull/12345#discussion_r224274290", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/12345", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/224274290"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/12345#discussion_r224274290"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/12345"}}, "body_html": "<p>This doesn't work. Parsing of the file is not guarded by an if statement.<br>\nUse python 2 style type comments like seen in other examples:</p>\n<pre><code>def hints(x, a=0.5, b=10):  # noqa: E999\n    # type: (Tensor, float, int) -&gt; Tensor\n    return x + a + b\n</code></pre>", "body_text": "This doesn't work. Parsing of the file is not guarded by an if statement.\nUse python 2 style type comments like seen in other examples:\ndef hints(x, a=0.5, b=10):  # noqa: E999\n    # type: (Tensor, float, int) -> Tensor\n    return x + a + b"}