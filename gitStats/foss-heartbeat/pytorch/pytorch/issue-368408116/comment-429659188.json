{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/429659188", "html_url": "https://github.com/pytorch/pytorch/pull/12502#issuecomment-429659188", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/12502", "id": 429659188, "node_id": "MDEyOklzc3VlQ29tbWVudDQyOTY1OTE4OA==", "user": {"login": "SsnL", "id": 5674597, "node_id": "MDQ6VXNlcjU2NzQ1OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5674597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SsnL", "html_url": "https://github.com/SsnL", "followers_url": "https://api.github.com/users/SsnL/followers", "following_url": "https://api.github.com/users/SsnL/following{/other_user}", "gists_url": "https://api.github.com/users/SsnL/gists{/gist_id}", "starred_url": "https://api.github.com/users/SsnL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SsnL/subscriptions", "organizations_url": "https://api.github.com/users/SsnL/orgs", "repos_url": "https://api.github.com/users/SsnL/repos", "events_url": "https://api.github.com/users/SsnL/events{/privacy}", "received_events_url": "https://api.github.com/users/SsnL/received_events", "type": "User", "site_admin": false}, "created_at": "2018-10-14T20:22:31Z", "updated_at": "2018-10-14T20:25:40Z", "author_association": "CONTRIBUTOR", "body_html": "<blockquote>\n<p>we're pushing this \"should you differentiate\" decision back to the data part (to the fact how Variables are wired)</p>\n</blockquote>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=4583066\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/apaszke\">@apaszke</a> I don't think so. I believe we are exactly making this code block non-differentiable, i.e., we are making view relations constructed in this <code>no_grad</code> block not tracking history. This is exactly what we do for the other relations in <code>compute_requires_grad</code>: i.e., if <code>compute_requires_grad</code> is <code>false</code>, we do not construct backward graph, save variables. Similarly, here, if we don't need grad, we do not construct the backward relation between <code>view</code> and <code>base</code>.</p>\n<p>edit: <del>If you want to, I can update this patch to using output of <code>compute_requires_grad</code> instead for better clarity.</del> Ah no this doesn't work as it would not track view relation if base doesn't require grad, but view is special cased in this scenario.</p>", "body_text": "we're pushing this \"should you differentiate\" decision back to the data part (to the fact how Variables are wired)\n\n@apaszke I don't think so. I believe we are exactly making this code block non-differentiable, i.e., we are making view relations constructed in this no_grad block not tracking history. This is exactly what we do for the other relations in compute_requires_grad: i.e., if compute_requires_grad is false, we do not construct backward graph, save variables. Similarly, here, if we don't need grad, we do not construct the backward relation between view and base.\nedit: If you want to, I can update this patch to using output of compute_requires_grad instead for better clarity. Ah no this doesn't work as it would not track view relation if base doesn't require grad, but view is special cased in this scenario.", "body": "> we're pushing this \"should you differentiate\" decision back to the data part (to the fact how Variables are wired)\r\n\r\n@apaszke I don't think so. I believe we are exactly making this code block non-differentiable, i.e., we are making view relations constructed in this `no_grad` block not tracking history. This is exactly what we do for the other relations in `compute_requires_grad`: i.e., if `compute_requires_grad` is `false`, we do not construct backward graph, save variables. Similarly, here, if we don't need grad, we do not construct the backward relation between `view` and `base`. \r\n\r\nedit: <del>If you want to, I can update this patch to using output of `compute_requires_grad` instead for better clarity.</del> Ah no this doesn't work as it would not track view relation if base doesn't require grad, but view is special cased in this scenario."}