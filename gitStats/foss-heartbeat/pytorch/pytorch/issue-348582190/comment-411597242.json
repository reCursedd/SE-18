{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/411597242", "html_url": "https://github.com/pytorch/pytorch/pull/10343#issuecomment-411597242", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/10343", "id": 411597242, "node_id": "MDEyOklzc3VlQ29tbWVudDQxMTU5NzI0Mg==", "user": {"login": "mingfeima", "id": 20233731, "node_id": "MDQ6VXNlcjIwMjMzNzMx", "avatar_url": "https://avatars0.githubusercontent.com/u/20233731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mingfeima", "html_url": "https://github.com/mingfeima", "followers_url": "https://api.github.com/users/mingfeima/followers", "following_url": "https://api.github.com/users/mingfeima/following{/other_user}", "gists_url": "https://api.github.com/users/mingfeima/gists{/gist_id}", "starred_url": "https://api.github.com/users/mingfeima/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mingfeima/subscriptions", "organizations_url": "https://api.github.com/users/mingfeima/orgs", "repos_url": "https://api.github.com/users/mingfeima/repos", "events_url": "https://api.github.com/users/mingfeima/events{/privacy}", "received_events_url": "https://api.github.com/users/mingfeima/received_events", "type": "User", "site_admin": false}, "created_at": "2018-08-09T00:26:33Z", "updated_at": "2018-08-09T00:46:06Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=5674597\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/SsnL\">@SsnL</a> sure, i wrote a small benchmark for max, the piece of code reduces from <code>49ms</code> to <code>3.5ms</code> on Xeon Skylake 8180.</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> torch\n<span class=\"pl-k\">from</span> time <span class=\"pl-k\">import</span> time\n\nN <span class=\"pl-k\">=</span> <span class=\"pl-c1\">2000</span>\nT <span class=\"pl-k\">=</span> <span class=\"pl-c1\">35820</span>\nwarmups <span class=\"pl-k\">=</span> <span class=\"pl-c1\">100</span>\ncount <span class=\"pl-k\">=</span> <span class=\"pl-c1\">200</span>\n\na <span class=\"pl-k\">=</span> torch.randn(N, T)\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">test_max</span>():\n    <span class=\"pl-k\">for</span> i <span class=\"pl-k\">in</span> <span class=\"pl-c1\">range</span>(warmups):\n        b, _ <span class=\"pl-k\">=</span> a.max(<span class=\"pl-v\">dim</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">1</span>)\n    tstart <span class=\"pl-k\">=</span> time()\n    <span class=\"pl-k\">for</span> i <span class=\"pl-k\">in</span> <span class=\"pl-c1\">range</span>(count):\n        b, _ <span class=\"pl-k\">=</span> a.max(<span class=\"pl-v\">dim</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">1</span>)\n    tend <span class=\"pl-k\">=</span> time()\n    <span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>max reduction : <span class=\"pl-c1\">%f</span> ms<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">%</span> ((tend<span class=\"pl-k\">-</span>tstart)<span class=\"pl-k\">/</span>count<span class=\"pl-k\">*</span><span class=\"pl-c1\">1000</span>))\n\ntest_max()</pre></div>\n<p>I brought this up because i have been optimizing <a href=\"https://github.com/OpenNMT/OpenNMT-py\">OpenNMT-py</a>, <code>max</code> is used at <a href=\"https://github.com/OpenNMT/OpenNMT-py/blob/master/onmt/utils/loss.py#L159\">loss</a> calculation. With <code>max</code> being paralleled, the total time reduced roughly by 8%.</p>", "body_text": "@SsnL sure, i wrote a small benchmark for max, the piece of code reduces from 49ms to 3.5ms on Xeon Skylake 8180.\nimport torch\nfrom time import time\n\nN = 2000\nT = 35820\nwarmups = 100\ncount = 200\n\na = torch.randn(N, T)\n\ndef test_max():\n    for i in range(warmups):\n        b, _ = a.max(dim=1)\n    tstart = time()\n    for i in range(count):\n        b, _ = a.max(dim=1)\n    tend = time()\n    print(\"max reduction : %f ms\" % ((tend-tstart)/count*1000))\n\ntest_max()\nI brought this up because i have been optimizing OpenNMT-py, max is used at loss calculation. With max being paralleled, the total time reduced roughly by 8%.", "body": "@SsnL sure, i wrote a small benchmark for max, the piece of code reduces from `49ms` to `3.5ms` on Xeon Skylake 8180.\r\n\r\n```python\r\nimport torch\r\nfrom time import time\r\n\r\nN = 2000\r\nT = 35820\r\nwarmups = 100\r\ncount = 200\r\n\r\na = torch.randn(N, T)\r\n\r\ndef test_max():\r\n    for i in range(warmups):\r\n        b, _ = a.max(dim=1)\r\n    tstart = time()\r\n    for i in range(count):\r\n        b, _ = a.max(dim=1)\r\n    tend = time()\r\n    print(\"max reduction : %f ms\" % ((tend-tstart)/count*1000))\r\n\r\ntest_max()\r\n```\r\n\r\nI brought this up because i have been optimizing [OpenNMT-py](https://github.com/OpenNMT/OpenNMT-py), `max` is used at [loss](https://github.com/OpenNMT/OpenNMT-py/blob/master/onmt/utils/loss.py#L159) calculation. With `max` being paralleled, the total time reduced roughly by 8%."}