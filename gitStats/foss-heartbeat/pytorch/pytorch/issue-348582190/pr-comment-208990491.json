{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/208990491", "pull_request_review_id": 144916111, "id": 208990491, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODk5MDQ5MQ==", "diff_hunk": "@@ -0,0 +1,106 @@\n+#include \"ATen/native/cpu/TensorCompareKernel.h\"\n+\n+#include <numeric>\n+#include <iterator>\n+#include <algorithm>\n+\n+#include \"ATen/Dispatch.h\"\n+#include \"ATen/Parallel.h\"\n+#include \"ATen/optional.h\"\n+\n+namespace at { namespace native { namespace {\n+\n+template <typename scalar_t>\n+bool _isnan(scalar_t val) {\n+  return false;\n+}\n+\n+template <>\n+bool _isnan(float val) {\n+  return std::isnan(val);", "path": "aten/src/ATen/native/cpu/TensorCompareKernel.cpp", "position": 20, "original_position": 20, "commit_id": "8078cb7b6aac2a9bdf38540a7e5312193deaf80c", "original_commit_id": "66119f3f686dfc8e1dd648829dac1002a183af1b", "user": {"login": "colesbury", "id": 655866, "node_id": "MDQ6VXNlcjY1NTg2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/655866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colesbury", "html_url": "https://github.com/colesbury", "followers_url": "https://api.github.com/users/colesbury/followers", "following_url": "https://api.github.com/users/colesbury/following{/other_user}", "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions", "organizations_url": "https://api.github.com/users/colesbury/orgs", "repos_url": "https://api.github.com/users/colesbury/repos", "events_url": "https://api.github.com/users/colesbury/events{/privacy}", "received_events_url": "https://api.github.com/users/colesbury/received_events", "type": "User", "site_admin": false}, "body": "Can you just use `std::nan()` directly? It works on integer types and GCC and clang optimize it to `false`/`0` on integers at `-O1` or higher.", "created_at": "2018-08-09T16:11:09Z", "updated_at": "2018-11-23T15:49:01Z", "html_url": "https://github.com/pytorch/pytorch/pull/10343#discussion_r208990491", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/10343", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/208990491"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/10343#discussion_r208990491"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/10343"}}, "body_html": "<p>Can you just use <code>std::nan()</code> directly? It works on integer types and GCC and clang optimize it to <code>false</code>/<code>0</code> on integers at <code>-O1</code> or higher.</p>", "body_text": "Can you just use std::nan() directly? It works on integer types and GCC and clang optimize it to false/0 on integers at -O1 or higher."}