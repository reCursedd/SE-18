{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/434845652", "html_url": "https://github.com/pytorch/pytorch/pull/13336#issuecomment-434845652", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/13336", "id": 434845652, "node_id": "MDEyOklzc3VlQ29tbWVudDQzNDg0NTY1Mg==", "user": {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, "created_at": "2018-10-31T20:59:41Z", "updated_at": "2018-10-31T20:59:41Z", "author_association": "CONTRIBUTOR", "body_html": "<p><code>is</code> has a bunch of undefined semantics in Python.  We should not try too hard to match the exact behavior of the CPython implementation, because it can cause us to need to support its quirks indefinitely. I think for our current data types this behavior should be simple and within spec:</p>\n<ol>\n<li>If it is a reference type (i.e. is_intrusive_ptr), then <code>is</code> is True when the pointed-to object is the same.</li>\n<li>None is None, False is False, and True is True are all true (I think the last two cases are technically unneeded as far as spec goes).</li>\n<li>False for all other comparisons.</li>\n</ol>", "body_text": "is has a bunch of undefined semantics in Python.  We should not try too hard to match the exact behavior of the CPython implementation, because it can cause us to need to support its quirks indefinitely. I think for our current data types this behavior should be simple and within spec:\n\nIf it is a reference type (i.e. is_intrusive_ptr), then is is True when the pointed-to object is the same.\nNone is None, False is False, and True is True are all true (I think the last two cases are technically unneeded as far as spec goes).\nFalse for all other comparisons.", "body": "`is` has a bunch of undefined semantics in Python.  We should not try too hard to match the exact behavior of the CPython implementation, because it can cause us to need to support its quirks indefinitely. I think for our current data types this behavior should be simple and within spec:\r\n\r\n1. If it is a reference type (i.e. is_intrusive_ptr), then `is` is True when the pointed-to object is the same.\r\n2. None is None, False is False, and True is True are all true (I think the last two cases are technically unneeded as far as spec goes).\r\n3. False for all other comparisons."}