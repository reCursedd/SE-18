{"url": "https://api.github.com/repos/pytorch/pytorch/issues/4417", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/4417/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/4417/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/4417/events", "html_url": "https://github.com/pytorch/pytorch/issues/4417", "id": 285264193, "node_id": "MDU6SXNzdWUyODUyNjQxOTM=", "number": 4417, "title": "Strange behavior of comparison operations", "user": {"login": "amrit110", "id": 8986523, "node_id": "MDQ6VXNlcjg5ODY1MjM=", "avatar_url": "https://avatars3.githubusercontent.com/u/8986523?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amrit110", "html_url": "https://github.com/amrit110", "followers_url": "https://api.github.com/users/amrit110/followers", "following_url": "https://api.github.com/users/amrit110/following{/other_user}", "gists_url": "https://api.github.com/users/amrit110/gists{/gist_id}", "starred_url": "https://api.github.com/users/amrit110/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amrit110/subscriptions", "organizations_url": "https://api.github.com/users/amrit110/orgs", "repos_url": "https://api.github.com/users/amrit110/repos", "events_url": "https://api.github.com/users/amrit110/events{/privacy}", "received_events_url": "https://api.github.com/users/amrit110/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-12-31T15:52:45Z", "updated_at": "2018-01-04T15:32:04Z", "closed_at": "2017-12-31T17:38:44Z", "author_association": "NONE", "body_html": "<p>I get a strange behavior of using comparison operations in combination with indexing elements from a tensor, either directly or using <code>torch.index_select</code>. Ideally the below snippet should gather values below <code>0.8</code> but for <code>length = 4100</code> and above it fails. Here I use <code>torch.lt</code> but it happens for <code>torch.gt</code> if I switch the order of comparison.</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-s\"><span class=\"pl-pds\">\"\"\"</span>Test.<span class=\"pl-pds\">\"\"\"</span></span>\n\n<span class=\"pl-k\">import</span> torch\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">test</span>():\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"\"\"</span>Test.<span class=\"pl-pds\">\"\"\"</span></span>\n    <span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Testing!<span class=\"pl-pds\">\"</span></span>)\n    length <span class=\"pl-k\">=</span> <span class=\"pl-c1\">4100</span>\n    threshold <span class=\"pl-k\">=</span> <span class=\"pl-c1\">0.8</span>\n    error <span class=\"pl-k\">=</span> <span class=\"pl-c1\">False</span>\n    <span class=\"pl-k\">for</span> i <span class=\"pl-k\">in</span> <span class=\"pl-c1\">range</span>(<span class=\"pl-c1\">100</span>):\n        indices <span class=\"pl-k\">=</span> torch.linspace(<span class=\"pl-c1\">0</span>, length <span class=\"pl-k\">-</span> <span class=\"pl-c1\">1</span>, length).long()\n        <span class=\"pl-c\"><span class=\"pl-c\">#</span> tensor of unitary dimension with uniform random numbers in the range [0, 1)</span>\n        test_tensor <span class=\"pl-k\">=</span> torch.rand(length)\n        select <span class=\"pl-k\">=</span> test_tensor.lt(threshold)\n        scores <span class=\"pl-k\">=</span> test_tensor.index_select(<span class=\"pl-c1\">0</span>, indices[select])\n        <span class=\"pl-k\">if</span> scores.max() <span class=\"pl-k\">&gt;</span> threshold:\n            error <span class=\"pl-k\">=</span> <span class=\"pl-c1\">True</span>\n            <span class=\"pl-c1\">print</span>(i)\n            <span class=\"pl-c1\">print</span>(scores.max())\n            <span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Something wrong!<span class=\"pl-pds\">\"</span></span>)\n    <span class=\"pl-k\">if</span> <span class=\"pl-k\">not</span> error:\n        <span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Ran with expected output!<span class=\"pl-pds\">\"</span></span>)\n\n<span class=\"pl-k\">if</span> <span class=\"pl-c1\">__name__</span> <span class=\"pl-k\">==</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>__main__<span class=\"pl-pds\">'</span></span>:\n    test()</pre></div>", "body_text": "I get a strange behavior of using comparison operations in combination with indexing elements from a tensor, either directly or using torch.index_select. Ideally the below snippet should gather values below 0.8 but for length = 4100 and above it fails. Here I use torch.lt but it happens for torch.gt if I switch the order of comparison.\n\"\"\"Test.\"\"\"\n\nimport torch\n\ndef test():\n    \"\"\"Test.\"\"\"\n    print(\"Testing!\")\n    length = 4100\n    threshold = 0.8\n    error = False\n    for i in range(100):\n        indices = torch.linspace(0, length - 1, length).long()\n        # tensor of unitary dimension with uniform random numbers in the range [0, 1)\n        test_tensor = torch.rand(length)\n        select = test_tensor.lt(threshold)\n        scores = test_tensor.index_select(0, indices[select])\n        if scores.max() > threshold:\n            error = True\n            print(i)\n            print(scores.max())\n            print(\"Something wrong!\")\n    if not error:\n        print(\"Ran with expected output!\")\n\nif __name__ == '__main__':\n    test()", "body": "I get a strange behavior of using comparison operations in combination with indexing elements from a tensor, either directly or using ``torch.index_select``. Ideally the below snippet should gather values below ``0.8`` but for ``length = 4100`` and above it fails. Here I use ``torch.lt`` but it happens for ``torch.gt`` if I switch the order of comparison. \r\n\r\n```python\r\n\"\"\"Test.\"\"\"\r\n\r\nimport torch\r\n\r\ndef test():\r\n    \"\"\"Test.\"\"\"\r\n    print(\"Testing!\")\r\n    length = 4100\r\n    threshold = 0.8\r\n    error = False\r\n    for i in range(100):\r\n        indices = torch.linspace(0, length - 1, length).long()\r\n        # tensor of unitary dimension with uniform random numbers in the range [0, 1)\r\n        test_tensor = torch.rand(length)\r\n        select = test_tensor.lt(threshold)\r\n        scores = test_tensor.index_select(0, indices[select])\r\n        if scores.max() > threshold:\r\n            error = True\r\n            print(i)\r\n            print(scores.max())\r\n            print(\"Something wrong!\")\r\n    if not error:\r\n        print(\"Ran with expected output!\")\r\n\r\nif __name__ == '__main__':\r\n    test()\r\n```"}