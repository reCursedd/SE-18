{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/212784209", "pull_request_review_id": 149495589, "id": 212784209, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMjc4NDIwOQ==", "diff_hunk": "@@ -261,49 +318,128 @@ void PropagateShapeOnNode(Node * node, bool insert_expands) {\n     default:\n       break; // fall-through\n   }\n-  if (node->matches(\"aten::cat(Tensor[] tensors, int dim) -> Tensor\", /*with_const=*/attr::dim)) {\n-    auto list_node = node->namedInput(attr::tensors)->node();\n-    JIT_ASSERT(list_node->kind() == prim::ListConstruct);\n-    auto tensors = list_node->inputs();\n-    if (tensors.size() > 0) {\n-      auto input_types = fmap(tensors, [](Value *v) { return v->type()->cast<TensorType>(); });\n-      if (std::all_of(input_types.begin(), input_types.end(),\n-          [](const TensorTypePtr& tp) { return tp != nullptr; })) {\n-        std::vector<int64_t> sizes = input_types[0]->sizes();\n-        const int64_t dim = wrapDim(node->get<int64_t>(attr::dim).value(), sizes);\n-        const int64_t ndim = sizes.size();\n-\n-        if (dim < 0 || dim >= ndim)\n-          goto cat_fail;\n-\n-        sizes[dim] = 0;\n-        for (auto & tp : input_types) {\n-          auto & tp_sizes = tp->sizes();\n-          if (sizes.size() != tp_sizes.size())\n-            goto cat_fail;\n-          for (int64_t i = 0; i < ndim; ++i) {\n-            if (sizes[i] != tp_sizes[i] && i != dim) {\n-              goto cat_fail;\n-            }\n-          }\n-          sizes[dim] += tp_sizes[dim];\n+  if (node->matches(\"aten::cat(Tensor[] tensors, int dim) -> Tensor\")) {\n+    return PropagateCatShape(node);\n+  }\n+\n+  if (auto maybe_complete_types = gatherTensorTypes<CompleteTensorType>(node)) {\n+    if (PropagateCompleteShapeOnNode(node, insert_expands, std::move(*maybe_complete_types))) {\n+      return;\n+    }\n+  }\n+\n+  if (auto maybe_tensor_types = gatherTensorTypes<TensorType>(node)) {\n+    if (PropagateTensorShapeOnNode(node, insert_expands, std::move(*maybe_tensor_types))) {\n+      return;\n+    }\n+  }\n+\n+  if (canPropagateShapeByRunningIt(node))", "path": "torch/csrc/jit/passes/shape_analysis.cpp", "position": null, "original_position": 222, "commit_id": "acc2435ce6aed9b51258e32ff56124a11eaacd82", "original_commit_id": "f5efae2e2321a0b7c8dc55819302853040da5cb3", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Sure.", "created_at": "2018-08-25T01:54:43Z", "updated_at": "2018-11-23T15:50:01Z", "html_url": "https://github.com/pytorch/pytorch/pull/10844#discussion_r212784209", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/10844", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/212784209"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/10844#discussion_r212784209"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/10844"}}, "body_html": "<p>Sure.</p>", "body_text": "Sure.", "in_reply_to_id": 212783667}