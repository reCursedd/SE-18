{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/212666703", "pull_request_review_id": 149351230, "id": 212666703, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMjY2NjcwMw==", "diff_hunk": "@@ -272,15 +261,7 @@ struct GraphFuser {\n     // allUsersAreThisConsumerOrOccurAfterIt would still be satisfied. However, I don't expect this\n     // to be necessary any time soon, and so we're simply assuming that we don't have to deal with that.\n     if (tensors_node->output()->uses().size() > 1) return false;\n-    auto tensors = tensors_node->inputs();\n-\n-    // Our fusion code assumes that all inputs have the same shapes, so we need to check this too.\n-    auto expected = tensors.at(0)->type()->cast<TensorType>();\n-    if (!expected) return false;\n-    return std::all_of(tensors.begin(), tensors.end(), [&expected](Value *v) {\n-        auto actual = v->type()->cast<TensorType>();\n-        return actual && actual->sizes() == expected->sizes();\n-    });", "path": "torch/csrc/jit/passes/graph_fuser.cpp", "position": 38, "original_position": 38, "commit_id": "acc2435ce6aed9b51258e32ff56124a11eaacd82", "original_commit_id": "5c300b6e70abb13121d37deac2f2bb9563d92a7b", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "Err, not quite, right? As in, the old code would simply choose not to consider an operator as part of the fusion group, if it didn't fulfill the necessary conditions for it to be eligible to be in the fusion group.\r\n\r\nI can certainly believe in practice that the maximalist fusion always works. But for example, our test suite doesn't have that many \"real world\" programs in it, does it?", "created_at": "2018-08-24T15:29:26Z", "updated_at": "2018-11-23T15:49:55Z", "html_url": "https://github.com/pytorch/pytorch/pull/10844#discussion_r212666703", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/10844", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/212666703"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/10844#discussion_r212666703"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/10844"}}, "body_html": "<p>Err, not quite, right? As in, the old code would simply choose not to consider an operator as part of the fusion group, if it didn't fulfill the necessary conditions for it to be eligible to be in the fusion group.</p>\n<p>I can certainly believe in practice that the maximalist fusion always works. But for example, our test suite doesn't have that many \"real world\" programs in it, does it?</p>", "body_text": "Err, not quite, right? As in, the old code would simply choose not to consider an operator as part of the fusion group, if it didn't fulfill the necessary conditions for it to be eligible to be in the fusion group.\nI can certainly believe in practice that the maximalist fusion always works. But for example, our test suite doesn't have that many \"real world\" programs in it, does it?", "in_reply_to_id": 212663899}