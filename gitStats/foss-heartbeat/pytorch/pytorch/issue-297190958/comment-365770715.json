{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/365770715", "html_url": "https://github.com/pytorch/pytorch/issues/5239#issuecomment-365770715", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/5239", "id": 365770715, "node_id": "MDEyOklzc3VlQ29tbWVudDM2NTc3MDcxNQ==", "user": {"login": "SsnL", "id": 5674597, "node_id": "MDQ6VXNlcjU2NzQ1OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5674597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SsnL", "html_url": "https://github.com/SsnL", "followers_url": "https://api.github.com/users/SsnL/followers", "following_url": "https://api.github.com/users/SsnL/following{/other_user}", "gists_url": "https://api.github.com/users/SsnL/gists{/gist_id}", "starred_url": "https://api.github.com/users/SsnL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SsnL/subscriptions", "organizations_url": "https://api.github.com/users/SsnL/orgs", "repos_url": "https://api.github.com/users/SsnL/repos", "events_url": "https://api.github.com/users/SsnL/events{/privacy}", "received_events_url": "https://api.github.com/users/SsnL/received_events", "type": "User", "site_admin": false}, "created_at": "2018-02-14T22:47:29Z", "updated_at": "2018-02-14T22:47:29Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Well the reason is CPU (and non-cudnn GPU) RNNs are implemented entirely using autograd, all operations of which supports double backward. If you really want to use the non-cudnn GPU RNN, just set <code>torch.backends.cudnn.enabled=False</code>. Then you should be able to do the same thing on GPU. That said, TBH, I don't even know if gradient penalty with recurrent discriminator would help.</p>", "body_text": "Well the reason is CPU (and non-cudnn GPU) RNNs are implemented entirely using autograd, all operations of which supports double backward. If you really want to use the non-cudnn GPU RNN, just set torch.backends.cudnn.enabled=False. Then you should be able to do the same thing on GPU. That said, TBH, I don't even know if gradient penalty with recurrent discriminator would help.", "body": "Well the reason is CPU (and non-cudnn GPU) RNNs are implemented entirely using autograd, all operations of which supports double backward. If you really want to use the non-cudnn GPU RNN, just set `torch.backends.cudnn.enabled=False`. Then you should be able to do the same thing on GPU. That said, TBH, I don't even know if gradient penalty with recurrent discriminator would help."}