{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/194597945", "pull_request_review_id": 127799782, "id": 194597945, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDU5Nzk0NQ==", "diff_hunk": "@@ -352,25 +379,39 @@ class TypeMeta {\n // and as a result, we define these two macros slightly differently.\n \n #ifdef _MSC_VER\n-#define CAFFE_KNOWN_TYPE(T)                              \\\n-  template <>                                            \\\n-  CAFFE2_EXPORT CaffeTypeId TypeMeta::Id<T>() {          \\\n-    static bool type_id_bit[1];                          \\\n-    static TypeNameRegisterer<T> registerer(             \\\n-        reinterpret_cast<CaffeTypeId>(type_id_bit), #T); \\\n-    return reinterpret_cast<CaffeTypeId>(type_id_bit);   \\\n+#define C10_KNOWN_TYPE(T)                                                     \\\n+  template <>                                                                 \\\n+  CAFFE2_EXPORT TypeId TypeMeta::Id<T>() {                                    \\\n+    static bool type_id_bit[1];                                               \\\n+    static const TypeId type_id(reinterpret_cast<intptr_t>(type_id_bit));     \\\n+    static TypeNameRegisterer<T> registerer(                                  \\\n+        type_id, #T);                                                         \\\n+    return type_id;                                                           \\\n   }\n #else // _MSC_VER\n-#define CAFFE_KNOWN_TYPE(T)                              \\\n-  template <>                                            \\\n-  CaffeTypeId TypeMeta::Id<T>() {                        \\\n-    static bool type_id_bit[1];                          \\\n-    static TypeNameRegisterer<T> registerer(             \\\n-        reinterpret_cast<CaffeTypeId>(type_id_bit), #T); \\\n-    return reinterpret_cast<CaffeTypeId>(type_id_bit);   \\\n+#define C10_KNOWN_TYPE(T)                                                     \\\n+  template <>                                                                 \\\n+  TypeId TypeMeta::Id<T>() {                                                  \\\n+      static bool type_id_bit[1];                                             \\\n+    static const TypeId type_id(reinterpret_cast<intptr_t>(type_id_bit));     \\\n+    static TypeNameRegisterer<T> registerer(                                  \\\n+        type_id, #T);                                                         \\\n+    return type_id;                                                           \\\n   }\n #endif\n \n-} // namespace caffe2\n+}\n+\n+// Define adapters for legacy code\n+namespace caffe2 {\n+using CaffeTypeId = c10::TypeId;\n+using TypeMeta = c10::TypeMeta;\n+\n+// Needs to be called from ::caffe2 namespace\n+#define CAFFE_KNOWN_TYPE(T)                              \\\n+  } namespace c10 {                                      \\", "path": "caffe2/core/typeid.h", "position": null, "original_position": 364, "commit_id": "d979b9eac0ccd6c0de98cf43cb43548f9bfc887f", "original_commit_id": "44dc787c3385c486b87d7fb960efecea24b133dd", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "There's a difference: in the old implementation, the specialization would just fail if you put it in the wrong namespace. In this version, specialization will still succeed, and you'll just have everything after `CAFFE_KNOWN_TYPE` put in the wrong namespace. This will be **very confusing** for the first person to trip up on this. If you can somehow assert that you were previously in the caffe2 namespace I will feel much better about this.", "created_at": "2018-06-12T02:11:15Z", "updated_at": "2018-11-23T15:45:21Z", "html_url": "https://github.com/pytorch/pytorch/pull/8350#discussion_r194597945", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/8350", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/194597945"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/8350#discussion_r194597945"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/8350"}}, "body_html": "<p>There's a difference: in the old implementation, the specialization would just fail if you put it in the wrong namespace. In this version, specialization will still succeed, and you'll just have everything after <code>CAFFE_KNOWN_TYPE</code> put in the wrong namespace. This will be <strong>very confusing</strong> for the first person to trip up on this. If you can somehow assert that you were previously in the caffe2 namespace I will feel much better about this.</p>", "body_text": "There's a difference: in the old implementation, the specialization would just fail if you put it in the wrong namespace. In this version, specialization will still succeed, and you'll just have everything after CAFFE_KNOWN_TYPE put in the wrong namespace. This will be very confusing for the first person to trip up on this. If you can somehow assert that you were previously in the caffe2 namespace I will feel much better about this.", "in_reply_to_id": 194586976}