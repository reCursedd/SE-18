{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/194566693", "pull_request_review_id": 127764276, "id": 194566693, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDU2NjY5Mw==", "diff_hunk": "@@ -87,97 +122,82 @@ struct TypeNameRegisterer {\n  */\n class TypeMeta {\n  public:\n-  typedef void (*PlacementNew)(void*, size_t);\n-  typedef void (*TypedCopy)(const void*, void*, size_t);\n-  typedef void (*TypedDestructor)(void*, size_t);\n+  using PlacementNew = void (void*, size_t);\n+  using TypedCopy = void (const void*, void*, size_t);\n+  using TypedDestructor = void (void*, size_t);\n   /** Create a dummy TypeMeta object. To create a TypeMeta object for a specific\n    * type, use TypeMeta::Make<T>().\n    */\n-  TypeMeta()\n+  TypeMeta() noexcept\n       : id_(0), itemsize_(0), ctor_(nullptr), copy_(nullptr), dtor_(nullptr) {}\n \n   /**\n    * Copy constructor.\n    */\n-  TypeMeta(const TypeMeta& src)\n-      : id_(src.id_),\n-        itemsize_(src.itemsize_),\n-        ctor_(src.ctor_),\n-        copy_(src.copy_),\n-        dtor_(src.dtor_) {}\n+  TypeMeta(const TypeMeta& src) noexcept = default;\n+\n   /**\n    * Assignment operator.\n    */\n-  TypeMeta& operator=(const TypeMeta& src) {\n-    if (this == &src)\n-      return *this;\n-    id_ = src.id_;\n-    itemsize_ = src.itemsize_;\n-    ctor_ = src.ctor_;\n-    copy_ = src.copy_;\n-    dtor_ = src.dtor_;\n-    return *this;\n-  }\n+  TypeMeta& operator=(const TypeMeta& src) noexcept = default;\n+\n+  TypeMeta(TypeMeta &&rhs) noexcept = default;\n \n  private:\n   // TypeMeta can only be created by Make, making sure that we do not\n   // create incorrectly mixed up TypeMeta objects.\n   TypeMeta(\n-      CaffeTypeId i,\n+      TypeId i,\n       size_t s,\n-      PlacementNew ctor,\n-      TypedCopy copy,\n-      TypedDestructor dtor)\n-      : id_(i), itemsize_(s), ctor_(ctor), copy_(copy), dtor_(dtor) {}\n+      PlacementNew* ctor__,", "path": "caffe2/core/typeid.h", "position": null, "original_position": 165, "commit_id": "d979b9eac0ccd6c0de98cf43cb43548f9bfc887f", "original_commit_id": "0f9ba8e29be16ec32f47a6bd9382a9d72517f181", "user": {"login": "Yangqing", "id": 551151, "node_id": "MDQ6VXNlcjU1MTE1MQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/551151?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Yangqing", "html_url": "https://github.com/Yangqing", "followers_url": "https://api.github.com/users/Yangqing/followers", "following_url": "https://api.github.com/users/Yangqing/following{/other_user}", "gists_url": "https://api.github.com/users/Yangqing/gists{/gist_id}", "starred_url": "https://api.github.com/users/Yangqing/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Yangqing/subscriptions", "organizations_url": "https://api.github.com/users/Yangqing/orgs", "repos_url": "https://api.github.com/users/Yangqing/repos", "events_url": "https://api.github.com/users/Yangqing/events{/privacy}", "received_events_url": "https://api.github.com/users/Yangqing/received_events", "type": "User", "site_admin": false}, "body": "Actually, I am not sure about the naming convention here, since __ are mostly only used in macros:\r\n\r\nhttps://our.internmc.facebook.com/intern/biggrep/?corpus=fbcode&filename=.*.cpp&case=false&view=default&extre=&s=[a-zA-Z]__&engine=re2&context=false&filter[uninteresting]=false&filter[intern]=false&filter[test]=false&grep_regex=", "created_at": "2018-06-11T22:25:27Z", "updated_at": "2018-11-23T15:45:20Z", "html_url": "https://github.com/pytorch/pytorch/pull/8350#discussion_r194566693", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/8350", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/194566693"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/8350#discussion_r194566693"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/8350"}}, "body_html": "<p>Actually, I am not sure about the naming convention here, since __ are mostly only used in macros:</p>\n<p><a href=\"https://our.internmc.facebook.com/intern/biggrep/?corpus=fbcode&amp;filename=.*.cpp&amp;case=false&amp;view=default&amp;extre=&amp;s=%5Ba-zA-Z%5D__&amp;engine=re2&amp;context=false&amp;filter%5Buninteresting%5D=false&amp;filter%5Bintern%5D=false&amp;filter%5Btest%5D=false&amp;grep_regex=\" rel=\"nofollow\">https://our.internmc.facebook.com/intern/biggrep/?corpus=fbcode&amp;filename=.*.cpp&amp;case=false&amp;view=default&amp;extre=&amp;s=[a-zA-Z]__&amp;engine=re2&amp;context=false&amp;filter[uninteresting]=false&amp;filter[intern]=false&amp;filter[test]=false&amp;grep_regex=</a></p>", "body_text": "Actually, I am not sure about the naming convention here, since __ are mostly only used in macros:\nhttps://our.internmc.facebook.com/intern/biggrep/?corpus=fbcode&filename=.*.cpp&case=false&view=default&extre=&s=[a-zA-Z]__&engine=re2&context=false&filter[uninteresting]=false&filter[intern]=false&filter[test]=false&grep_regex="}