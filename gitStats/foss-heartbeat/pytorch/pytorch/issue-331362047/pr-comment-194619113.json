{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/194619113", "pull_request_review_id": 127823400, "id": 194619113, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDYxOTExMw==", "diff_hunk": "@@ -352,25 +379,39 @@ class TypeMeta {\n // and as a result, we define these two macros slightly differently.\n \n #ifdef _MSC_VER\n-#define CAFFE_KNOWN_TYPE(T)                              \\\n-  template <>                                            \\\n-  CAFFE2_EXPORT CaffeTypeId TypeMeta::Id<T>() {          \\\n-    static bool type_id_bit[1];                          \\\n-    static TypeNameRegisterer<T> registerer(             \\\n-        reinterpret_cast<CaffeTypeId>(type_id_bit), #T); \\\n-    return reinterpret_cast<CaffeTypeId>(type_id_bit);   \\\n+#define C10_KNOWN_TYPE(T)                                                     \\\n+  template <>                                                                 \\\n+  CAFFE2_EXPORT TypeId TypeMeta::Id<T>() {                                    \\\n+    static bool type_id_bit[1];                                               \\\n+    static const TypeId type_id(reinterpret_cast<intptr_t>(type_id_bit));     \\\n+    static TypeNameRegisterer<T> registerer(                                  \\\n+        type_id, #T);                                                         \\\n+    return type_id;                                                           \\\n   }\n #else // _MSC_VER\n-#define CAFFE_KNOWN_TYPE(T)                              \\\n-  template <>                                            \\\n-  CaffeTypeId TypeMeta::Id<T>() {                        \\\n-    static bool type_id_bit[1];                          \\\n-    static TypeNameRegisterer<T> registerer(             \\\n-        reinterpret_cast<CaffeTypeId>(type_id_bit), #T); \\\n-    return reinterpret_cast<CaffeTypeId>(type_id_bit);   \\\n+#define C10_KNOWN_TYPE(T)                                                     \\\n+  template <>                                                                 \\\n+  TypeId TypeMeta::Id<T>() {                                                  \\\n+      static bool type_id_bit[1];                                             \\\n+    static const TypeId type_id(reinterpret_cast<intptr_t>(type_id_bit));     \\\n+    static TypeNameRegisterer<T> registerer(                                  \\\n+        type_id, #T);                                                         \\\n+    return type_id;                                                           \\\n   }\n #endif\n \n-} // namespace caffe2\n+}\n+\n+// Define adapters for legacy code\n+namespace caffe2 {\n+using CaffeTypeId = c10::TypeId;\n+using TypeMeta = c10::TypeMeta;\n+\n+// Needs to be called from ::caffe2 namespace\n+#define CAFFE_KNOWN_TYPE(T)                              \\\n+  } namespace c10 {                                      \\", "path": "caffe2/core/typeid.h", "position": null, "original_position": 364, "commit_id": "d979b9eac0ccd6c0de98cf43cb43548f9bfc887f", "original_commit_id": "44dc787c3385c486b87d7fb960efecea24b133dd", "user": {"login": "Yangqing", "id": 551151, "node_id": "MDQ6VXNlcjU1MTE1MQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/551151?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Yangqing", "html_url": "https://github.com/Yangqing", "followers_url": "https://api.github.com/users/Yangqing/followers", "following_url": "https://api.github.com/users/Yangqing/following{/other_user}", "gists_url": "https://api.github.com/users/Yangqing/gists{/gist_id}", "starred_url": "https://api.github.com/users/Yangqing/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Yangqing/subscriptions", "organizations_url": "https://api.github.com/users/Yangqing/orgs", "repos_url": "https://api.github.com/users/Yangqing/repos", "events_url": "https://api.github.com/users/Yangqing/events{/privacy}", "received_events_url": "https://api.github.com/users/Yangqing/received_events", "type": "User", "site_admin": false}, "body": "OK, after reading the code and comments I do have a strong preference to keep the choice of not manipulating namespaces, for the technical reason that - like @ezyang said - it is **very confusing** to users if things go wrong and it is very error prone. Let's make sure that we are not manipulating namespaces.", "created_at": "2018-06-12T05:35:48Z", "updated_at": "2018-11-23T15:45:22Z", "html_url": "https://github.com/pytorch/pytorch/pull/8350#discussion_r194619113", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/8350", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/194619113"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/8350#discussion_r194619113"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/8350"}}, "body_html": "<p>OK, after reading the code and comments I do have a strong preference to keep the choice of not manipulating namespaces, for the technical reason that - like <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=13564\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ezyang\">@ezyang</a> said - it is <strong>very confusing</strong> to users if things go wrong and it is very error prone. Let's make sure that we are not manipulating namespaces.</p>", "body_text": "OK, after reading the code and comments I do have a strong preference to keep the choice of not manipulating namespaces, for the technical reason that - like @ezyang said - it is very confusing to users if things go wrong and it is very error prone. Let's make sure that we are not manipulating namespaces.", "in_reply_to_id": 194586976}