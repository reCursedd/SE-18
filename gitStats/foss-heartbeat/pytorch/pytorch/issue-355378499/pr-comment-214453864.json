{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/214453864", "pull_request_review_id": 151523117, "id": 214453864, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNDQ1Mzg2NA==", "diff_hunk": "@@ -321,45 +321,70 @@ class WeightedSumOp : public Operator<Context> {\n   USE_OPERATOR_CONTEXT_FUNCTIONS;\n   USE_SIMPLE_CTOR_DTOR(WeightedSumOp);\n \n-  template <typename DstType>\n+  bool RunOnDevice() override;\n+\n+  template <typename T>\n   bool DoRunWithType() {\n-    CAFFE_ENFORCE_EQ(InputSize() % 2, 0);\n-    auto& X0 = Input(0);\n-    auto& weight0 = Input(1);\n+    const int input_size = InputSize();\n+    CAFFE_ENFORCE_EQ(input_size % 2, 0);\n+    const auto& X0 = Input(0);\n+    const auto& weight0 = Input(1);\n     CAFFE_ENFORCE_GT(X0.size(), 0);\n     CAFFE_ENFORCE_EQ(weight0.size(), 1);\n-    int size = X0.size();\n-    auto* output = Output(0);\n-    output->ResizeLike(X0);\n-    math::Scale<float, DstType, Context>(\n+    const int size = X0.size();\n+    auto* Y = Output(0);\n+    if (Y != &X0) {\n+      Y->ResizeLike(X0);\n+    }\n+    T* Y_data = Y->template mutable_data<T>();\n+    if (input_size == 2) {\n+      math::Scale<float, T>(\n+          size,\n+          weight0.template data<float>(),\n+          X0.template data<T>(),\n+          Y_data,\n+          &context_);\n+      return true;\n+    }\n+    const auto& X1 = Input(2);\n+    CAFFE_ENFORCE_NE(\n+        &X1,\n+        Y,\n+        \"Input #2 is the same as output. If you want to do in-place updates, \"\n+        \"put the output as input #0.\");\n+    const auto& weight1 = Input(3);\n+    CAFFE_ENFORCE_EQ(X1.size(), size);\n+    CAFFE_ENFORCE_EQ(weight1.size(), 1);\n+    if (Y != &X0) {\n+      context_.template CopySameDevice<T>(size, X0.template data<T>(), Y_data);\n+    }\n+    math::Axpby<float, T, Context>(\n         size,\n+        weight1.template data<float>(),\n+        X1.template data<T>(),\n         weight0.template data<float>(),\n-        X0.template data<DstType>(),\n-        output->template mutable_data<DstType>(),\n+        Y_data,\n         &context_);\n-    for (int i = 2; i < InputSize(); i += 2) {\n-      auto& X = Input(i);\n+    for (int i = 4; i < input_size; i += 2) {\n+      const auto& Xi = Input(i);", "path": "caffe2/operators/utility_ops.h", "position": 61, "original_position": 61, "commit_id": "c34a6472050cfcbbbf58b94dc8fa6305feee825a", "original_commit_id": "495264017a26064efaa100ceb0be90f47bc52672", "user": {"login": "houseroad", "id": 30275821, "node_id": "MDQ6VXNlcjMwMjc1ODIx", "avatar_url": "https://avatars0.githubusercontent.com/u/30275821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/houseroad", "html_url": "https://github.com/houseroad", "followers_url": "https://api.github.com/users/houseroad/followers", "following_url": "https://api.github.com/users/houseroad/following{/other_user}", "gists_url": "https://api.github.com/users/houseroad/gists{/gist_id}", "starred_url": "https://api.github.com/users/houseroad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/houseroad/subscriptions", "organizations_url": "https://api.github.com/users/houseroad/orgs", "repos_url": "https://api.github.com/users/houseroad/repos", "events_url": "https://api.github.com/users/houseroad/events{/privacy}", "received_events_url": "https://api.github.com/users/houseroad/received_events", "type": "User", "site_admin": false}, "body": "good name :-)", "created_at": "2018-08-31T19:27:20Z", "updated_at": "2018-11-23T15:50:29Z", "html_url": "https://github.com/pytorch/pytorch/pull/11049#discussion_r214453864", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/11049", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/214453864"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/11049#discussion_r214453864"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/11049"}}, "body_html": "<p>good name :-)</p>", "body_text": "good name :-)"}