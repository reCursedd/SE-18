{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/159179142", "pull_request_review_id": 86085970, "id": 159179142, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1OTE3OTE0Mg==", "diff_hunk": "@@ -26,7 +26,8 @@ class PackedSequence(PackedSequence_):\n         batch_sizes (list[int]): list of integers holding information about\n             the batch size at each sequence step\n     \"\"\"\n-    pass\n+    def cuda(self):\n+        return type(self)(self.data.cuda(), self.batch_sizes)", "path": "torch/nn/utils/rnn.py", "position": null, "original_position": 6, "commit_id": "a54c1343383a3dc068c690db33d5a8a5fce14292", "original_commit_id": "598eab0c3babf484ae7332462b5160588acb8ee6", "user": {"login": "jusjusjus", "id": 6298900, "node_id": "MDQ6VXNlcjYyOTg5MDA=", "avatar_url": "https://avatars0.githubusercontent.com/u/6298900?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jusjusjus", "html_url": "https://github.com/jusjusjus", "followers_url": "https://api.github.com/users/jusjusjus/followers", "following_url": "https://api.github.com/users/jusjusjus/following{/other_user}", "gists_url": "https://api.github.com/users/jusjusjus/gists{/gist_id}", "starred_url": "https://api.github.com/users/jusjusjus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jusjusjus/subscriptions", "organizations_url": "https://api.github.com/users/jusjusjus/orgs", "repos_url": "https://api.github.com/users/jusjusjus/repos", "events_url": "https://api.github.com/users/jusjusjus/events{/privacy}", "received_events_url": "https://api.github.com/users/jusjusjus/received_events", "type": "User", "site_admin": false}, "body": "Good one, I didn't think of the cuda args.  I really like the syntax, however:\r\n```\r\nimport time\r\nnum = 10**7\r\n\r\nclass foo:\r\n    bar = 5\r\n\r\nf = foo()\r\n\r\nt0 = time.time()\r\n[f.bar  for _ in range(num)]\r\nprint('f.bar :', (time.time()-t0)/num)\r\n\r\nt0 = time.time()\r\n[getattr(f, 'bar') for _ in range(num)]\r\nprint('getattr(f,\"bar\") :', (time.time()-t0)/num)\r\n\r\n> f.bar : 5.444774627685547e-08\r\n> getattr(f,\"bar\") : 1.235971450805664e-07\r\n```\r\nQuestions:\r\n(1) Do you think someone will want to call this more than once per batch?\r\n(2) Also what do you think of a generalization `_gen_cast_of(attr, name)`?", "created_at": "2018-01-02T06:54:32Z", "updated_at": "2018-11-23T15:37:45Z", "html_url": "https://github.com/pytorch/pytorch/pull/4430#discussion_r159179142", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4430", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/159179142"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/4430#discussion_r159179142"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4430"}}, "body_html": "<p>Good one, I didn't think of the cuda args.  I really like the syntax, however:</p>\n<pre><code>import time\nnum = 10**7\n\nclass foo:\n    bar = 5\n\nf = foo()\n\nt0 = time.time()\n[f.bar  for _ in range(num)]\nprint('f.bar :', (time.time()-t0)/num)\n\nt0 = time.time()\n[getattr(f, 'bar') for _ in range(num)]\nprint('getattr(f,\"bar\") :', (time.time()-t0)/num)\n\n&gt; f.bar : 5.444774627685547e-08\n&gt; getattr(f,\"bar\") : 1.235971450805664e-07\n</code></pre>\n<p>Questions:<br>\n(1) Do you think someone will want to call this more than once per batch?<br>\n(2) Also what do you think of a generalization <code>_gen_cast_of(attr, name)</code>?</p>", "body_text": "Good one, I didn't think of the cuda args.  I really like the syntax, however:\nimport time\nnum = 10**7\n\nclass foo:\n    bar = 5\n\nf = foo()\n\nt0 = time.time()\n[f.bar  for _ in range(num)]\nprint('f.bar :', (time.time()-t0)/num)\n\nt0 = time.time()\n[getattr(f, 'bar') for _ in range(num)]\nprint('getattr(f,\"bar\") :', (time.time()-t0)/num)\n\n> f.bar : 5.444774627685547e-08\n> getattr(f,\"bar\") : 1.235971450805664e-07\n\nQuestions:\n(1) Do you think someone will want to call this more than once per batch?\n(2) Also what do you think of a generalization _gen_cast_of(attr, name)?", "in_reply_to_id": 159164155}