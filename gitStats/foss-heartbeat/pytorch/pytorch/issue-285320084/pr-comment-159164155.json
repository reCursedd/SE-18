{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/159164155", "pull_request_review_id": 86069772, "id": 159164155, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1OTE2NDE1NQ==", "diff_hunk": "@@ -26,7 +26,8 @@ class PackedSequence(PackedSequence_):\n         batch_sizes (list[int]): list of integers holding information about\n             the batch size at each sequence step\n     \"\"\"\n-    pass\n+    def cuda(self):\n+        return type(self)(self.data.cuda(), self.batch_sizes)", "path": "torch/nn/utils/rnn.py", "position": null, "original_position": 6, "commit_id": "a54c1343383a3dc068c690db33d5a8a5fce14292", "original_commit_id": "598eab0c3babf484ae7332462b5160588acb8ee6", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Can you add `cpu`, `float`, `double` and `half` too? Might be a good idea to implement them like this:\r\n\r\n```python\r\ndef _make_cast(name):\r\n  def fn(self, *args, **kwargs):\r\n    return type(self)(getattr(self.data, name)(*args, **kwargs), self.batch_sizes)\r\n  return fn\r\n\r\ncuda = _make_cast('cuda')\r\ncpu = _make_cast('cpu')\r\n```", "created_at": "2018-01-01T21:34:32Z", "updated_at": "2018-11-23T15:37:44Z", "html_url": "https://github.com/pytorch/pytorch/pull/4430#discussion_r159164155", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4430", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/159164155"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/4430#discussion_r159164155"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4430"}}, "body_html": "<p>Can you add <code>cpu</code>, <code>float</code>, <code>double</code> and <code>half</code> too? Might be a good idea to implement them like this:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">_make_cast</span>(<span class=\"pl-smi\">name</span>):\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">fn</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>, <span class=\"pl-k\">*</span><span class=\"pl-smi\">args</span>, <span class=\"pl-k\">**</span><span class=\"pl-smi\">kwargs</span>):\n    <span class=\"pl-k\">return</span> <span class=\"pl-c1\">type</span>(<span class=\"pl-c1\">self</span>)(<span class=\"pl-c1\">getattr</span>(<span class=\"pl-c1\">self</span>.data, name)(<span class=\"pl-k\">*</span>args, <span class=\"pl-k\">**</span>kwargs), <span class=\"pl-c1\">self</span>.batch_sizes)\n  <span class=\"pl-k\">return</span> fn\n\ncuda <span class=\"pl-k\">=</span> _make_cast(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>cuda<span class=\"pl-pds\">'</span></span>)\ncpu <span class=\"pl-k\">=</span> _make_cast(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>cpu<span class=\"pl-pds\">'</span></span>)</pre></div>", "body_text": "Can you add cpu, float, double and half too? Might be a good idea to implement them like this:\ndef _make_cast(name):\n  def fn(self, *args, **kwargs):\n    return type(self)(getattr(self.data, name)(*args, **kwargs), self.batch_sizes)\n  return fn\n\ncuda = _make_cast('cuda')\ncpu = _make_cast('cpu')"}