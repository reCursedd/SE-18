{"url": "https://api.github.com/repos/pytorch/pytorch/issues/5248", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/5248/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/5248/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/5248/events", "html_url": "https://github.com/pytorch/pytorch/issues/5248", "id": 297262618, "node_id": "MDU6SXNzdWUyOTcyNjI2MTg=", "number": 5248, "title": "Pytorch inconsistent behavior for boundary checks", "user": {"login": "lazypanda1", "id": 35884075, "node_id": "MDQ6VXNlcjM1ODg0MDc1", "avatar_url": "https://avatars0.githubusercontent.com/u/35884075?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lazypanda1", "html_url": "https://github.com/lazypanda1", "followers_url": "https://api.github.com/users/lazypanda1/followers", "following_url": "https://api.github.com/users/lazypanda1/following{/other_user}", "gists_url": "https://api.github.com/users/lazypanda1/gists{/gist_id}", "starred_url": "https://api.github.com/users/lazypanda1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lazypanda1/subscriptions", "organizations_url": "https://api.github.com/users/lazypanda1/orgs", "repos_url": "https://api.github.com/users/lazypanda1/repos", "events_url": "https://api.github.com/users/lazypanda1/events{/privacy}", "received_events_url": "https://api.github.com/users/lazypanda1/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 819357941, "node_id": "MDU6TGFiZWw4MTkzNTc5NDE=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/distributions", "name": "distributions", "color": "39d651", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2018-02-14T22:07:02Z", "updated_at": "2018-03-15T22:11:20Z", "closed_at": "2018-03-15T22:11:20Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Hi,</p>\n<p>I observe inconsistent behavior when running the Bernoulli distribution with invalid values (code snippets below). When I run it with input that is outside the expected range (<code>2.0</code> in this case) the <code>sample</code> function fails as expected, with this message:</p>\n<div class=\"highlight highlight-source-shell\"><pre>python /home/torchtest.py\nTraceback (most recent call last):\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/home/torchtest.py<span class=\"pl-pds\">\"</span></span>, line 9, <span class=\"pl-k\">in</span> <span class=\"pl-k\">&lt;</span>module<span class=\"pl-k\">&gt;</span>\n    <span class=\"pl-en\">print(b.sample</span>())\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/home/pytorch/torch/distributions/bernoulli.py<span class=\"pl-pds\">\"</span></span>, line 75, <span class=\"pl-k\">in</span> sample\n    <span class=\"pl-k\">return</span> torch.bernoulli(self.probs.expand(shape))\nRuntimeError: invalid argument 1: must be <span class=\"pl-k\">&gt;</span>= 0 and <span class=\"pl-k\">&lt;</span>= 1 at /home/pytorch/aten/src/TH/THRandom.cpp:343</pre></div>\n<p>Code:</p>\n<div class=\"highlight highlight-source-python\"><pre>p <span class=\"pl-k\">=</span> torch.Tensor([<span class=\"pl-c1\">2.0</span>])\nb <span class=\"pl-k\">=</span> torch.distributions.Bernoulli(p)\n<span class=\"pl-c1\">print</span>(b.sample())</pre></div>\n<p>but the <code>log_prob</code> function does not fail and returns the following:</p>\n<div class=\"highlight highlight-source-shell\"><pre>-15.9424\n[torch.FloatTensor of size 1]</pre></div>\n<p>Code:</p>\n<div class=\"highlight highlight-source-python\"><pre>p <span class=\"pl-k\">=</span> torch.Tensor([<span class=\"pl-c1\">2.0</span>])\nb <span class=\"pl-k\">=</span> torch.distributions.Bernoulli(p)\n<span class=\"pl-c1\">print</span>(b.log_prob((torch.Tensor([<span class=\"pl-c1\">0</span>]))))</pre></div>\n<p>Is this expected? Shouldn't both functions (<code>sample</code> and <code>log_prob</code>) fail with the same error?</p>", "body_text": "Hi,\nI observe inconsistent behavior when running the Bernoulli distribution with invalid values (code snippets below). When I run it with input that is outside the expected range (2.0 in this case) the sample function fails as expected, with this message:\npython /home/torchtest.py\nTraceback (most recent call last):\n  File \"/home/torchtest.py\", line 9, in <module>\n    print(b.sample())\n  File \"/home/pytorch/torch/distributions/bernoulli.py\", line 75, in sample\n    return torch.bernoulli(self.probs.expand(shape))\nRuntimeError: invalid argument 1: must be >= 0 and <= 1 at /home/pytorch/aten/src/TH/THRandom.cpp:343\nCode:\np = torch.Tensor([2.0])\nb = torch.distributions.Bernoulli(p)\nprint(b.sample())\nbut the log_prob function does not fail and returns the following:\n-15.9424\n[torch.FloatTensor of size 1]\nCode:\np = torch.Tensor([2.0])\nb = torch.distributions.Bernoulli(p)\nprint(b.log_prob((torch.Tensor([0]))))\nIs this expected? Shouldn't both functions (sample and log_prob) fail with the same error?", "body": "Hi,\r\n\r\nI observe inconsistent behavior when running the Bernoulli distribution with invalid values (code snippets below). When I run it with input that is outside the expected range (`2.0` in this case) the `sample` function fails as expected, with this message:\r\n\r\n```bash\r\npython /home/torchtest.py\r\nTraceback (most recent call last):\r\n  File \"/home/torchtest.py\", line 9, in <module>\r\n    print(b.sample())\r\n  File \"/home/pytorch/torch/distributions/bernoulli.py\", line 75, in sample\r\n    return torch.bernoulli(self.probs.expand(shape))\r\nRuntimeError: invalid argument 1: must be >= 0 and <= 1 at /home/pytorch/aten/src/TH/THRandom.cpp:343\r\n```\r\n\r\nCode:\r\n```Python\r\np = torch.Tensor([2.0])\r\nb = torch.distributions.Bernoulli(p)\r\nprint(b.sample())\r\n```\r\n\r\nbut the `log_prob` function does not fail and returns the following:\r\n```bash\r\n-15.9424\r\n[torch.FloatTensor of size 1]\r\n```\r\n\r\nCode:\r\n```Python\r\np = torch.Tensor([2.0])\r\nb = torch.distributions.Bernoulli(p)\r\nprint(b.log_prob((torch.Tensor([0]))))\r\n```\r\nIs this expected? Shouldn't both functions (`sample` and `log_prob`) fail with the same error?\r\n\r\n\r\n"}