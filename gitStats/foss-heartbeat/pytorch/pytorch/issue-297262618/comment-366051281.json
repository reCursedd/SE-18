{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/366051281", "html_url": "https://github.com/pytorch/pytorch/issues/5248#issuecomment-366051281", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/5248", "id": 366051281, "node_id": "MDEyOklzc3VlQ29tbWVudDM2NjA1MTI4MQ==", "user": {"login": "fritzo", "id": 648532, "node_id": "MDQ6VXNlcjY0ODUzMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/648532?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fritzo", "html_url": "https://github.com/fritzo", "followers_url": "https://api.github.com/users/fritzo/followers", "following_url": "https://api.github.com/users/fritzo/following{/other_user}", "gists_url": "https://api.github.com/users/fritzo/gists{/gist_id}", "starred_url": "https://api.github.com/users/fritzo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fritzo/subscriptions", "organizations_url": "https://api.github.com/users/fritzo/orgs", "repos_url": "https://api.github.com/users/fritzo/repos", "events_url": "https://api.github.com/users/fritzo/events{/privacy}", "received_events_url": "https://api.github.com/users/fritzo/received_events", "type": "User", "site_admin": false}, "created_at": "2018-02-15T20:27:31Z", "updated_at": "2018-02-15T20:27:31Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=35884075\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/lazypanda1\">@lazypanda1</a> Sure, I think an argument <code>validate_args=False</code> make sense. You can even add a generic test to tests/test_distributions.py</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">class</span> <span class=\"pl-en\">TestValidation</span>(<span class=\"pl-e\">TestCase</span>):\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">test_valid</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>):\n        <span class=\"pl-k\">for</span> Dist, params <span class=\"pl-k\">in</span> <span class=\"pl-c1\">EXAMPLES</span>:\n            <span class=\"pl-k\">for</span> i, param <span class=\"pl-k\">in</span> <span class=\"pl-c1\">enumerate</span>(params):\n                Dist(<span class=\"pl-v\">validate_args</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>, <span class=\"pl-k\">**</span>param)  <span class=\"pl-c\"><span class=\"pl-c\">#</span> should not error</span>\n\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">test_invalid</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>):\n        <span class=\"pl-c\"><span class=\"pl-c\">#</span> this requires actual bad examples</span></pre></div>\n<p>This will ensure that all distributions take a <code>validate_args</code> argument. We may also want to add a <code>validate_args</code> argument to <code>Transform</code>s in a later PR.</p>", "body_text": "@lazypanda1 Sure, I think an argument validate_args=False make sense. You can even add a generic test to tests/test_distributions.py\nclass TestValidation(TestCase):\n    def test_valid(self):\n        for Dist, params in EXAMPLES:\n            for i, param in enumerate(params):\n                Dist(validate_args=True, **param)  # should not error\n\n    def test_invalid(self):\n        # this requires actual bad examples\nThis will ensure that all distributions take a validate_args argument. We may also want to add a validate_args argument to Transforms in a later PR.", "body": "@lazypanda1 Sure, I think an argument `validate_args=False` make sense. You can even add a generic test to tests/test_distributions.py\r\n```py\r\nclass TestValidation(TestCase):\r\n    def test_valid(self):\r\n        for Dist, params in EXAMPLES:\r\n            for i, param in enumerate(params):\r\n                Dist(validate_args=True, **param)  # should not error\r\n\r\n    def test_invalid(self):\r\n        # this requires actual bad examples\r\n```\r\nThis will ensure that all distributions take a `validate_args` argument. We may also want to add a `validate_args` argument to `Transform`s in a later PR."}