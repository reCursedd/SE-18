{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/191694089", "pull_request_review_id": 124309256, "id": 191694089, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTY5NDA4OQ==", "diff_hunk": "@@ -91,6 +95,27 @@ struct AlgorithmEntry {\n   std::vector<at::Tensor> dst;\n   std::function<void()> run;\n \n+  // For CUDA tensors, the following happens:\n+  //\n+  // - Input tensor A is copied to persistent tensor B on stream S1\n+  //   (the async stream associated with the device that stores A).\n+  // - Event E1 records stream S1 so that the copy can be synchronized.\n+  // - On a worker thread, stream S2 waits for event E1, executes the\n+  //   CUDA-aware Gloo algorithm, and then records event E2.\n+  //\n+  // This approach means the caller of the process group function can\n+  // retain asynchrony (no need for synchronizing its CUDA streams).\n+  // Once the wait() function on the associated work object returns\n+  // true, the caller can launch new CUDA kernels and they will be\n+  // correctly sequenced.\n+  //\n+  // To do so, we need to hold on to a stream and an event per tensor.\n+  // The stream is passed down to the Gloo algorithm. The event is\n+  // used to record completion of the memory copy of the input tensor.\n+  //\n+  std::vector<CUDAStream> streams;\n+  std::vector<CUDAEvent> startEvents;", "path": "torch/lib/c10d/ProcessGroupGloo.hpp", "position": null, "original_position": 39, "commit_id": "b7e7f6c93df088eafff4c0a99ce4476519a4f489", "original_commit_id": "a80e2d722e069400db1ee6b405f5c4eda23871a4", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Are those events/streams E1/S1 or E2/S2 from the description above?", "created_at": "2018-05-30T09:08:20Z", "updated_at": "2018-11-23T15:44:42Z", "html_url": "https://github.com/pytorch/pytorch/pull/7694#discussion_r191694089", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/7694", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/191694089"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/7694#discussion_r191694089"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/7694"}}, "body_html": "<p>Are those events/streams E1/S1 or E2/S2 from the description above?</p>", "body_text": "Are those events/streams E1/S1 or E2/S2 from the description above?"}