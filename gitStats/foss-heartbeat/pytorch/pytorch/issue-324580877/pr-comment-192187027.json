{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/192187027", "pull_request_review_id": 124914394, "id": 192187027, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MjE4NzAyNw==", "diff_hunk": "@@ -43,8 +43,21 @@ class ProcessGroup {\n     // If false, the exception function can be called to get details.\n     virtual bool isSuccess() const = 0;\n \n+    // Ensures that operations on the output tensors that are invoked\n+    // after this function returns are correctly sequenced after the\n+    // asynchronous completion of this work.\n+    virtual void synchronize() = 0;", "path": "torch/lib/c10d/ProcessGroup.hpp", "position": null, "original_position": 7, "commit_id": "b7e7f6c93df088eafff4c0a99ce4476519a4f489", "original_commit_id": "a80e2d722e069400db1ee6b405f5c4eda23871a4", "user": {"login": "pietern", "id": 9845, "node_id": "MDQ6VXNlcjk4NDU=", "avatar_url": "https://avatars3.githubusercontent.com/u/9845?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietern", "html_url": "https://github.com/pietern", "followers_url": "https://api.github.com/users/pietern/followers", "following_url": "https://api.github.com/users/pietern/following{/other_user}", "gists_url": "https://api.github.com/users/pietern/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietern/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietern/subscriptions", "organizations_url": "https://api.github.com/users/pietern/orgs", "repos_url": "https://api.github.com/users/pietern/repos", "events_url": "https://api.github.com/users/pietern/events{/privacy}", "received_events_url": "https://api.github.com/users/pietern/received_events", "type": "User", "site_admin": false}, "body": "Added:\r\n\r\n```\r\n+    // For CUDA tensors, it inserts stream synchronization such that\r\n+    // the streams of the caller wait for completion of the\r\n+    // asynchronous operations on the destination tensors.\r\n+    //\r\n+    // For CPU tensors, it is currently a nop.\r\n+    //\r\n+    // This function should only be used if the caller polls for\r\n+    // completion through the `isCompleted` function, it has returned\r\n+    // true, and the `isSuccess` function also has returned true.\r\n+    //\r\n```", "created_at": "2018-05-31T18:03:25Z", "updated_at": "2018-11-23T15:44:47Z", "html_url": "https://github.com/pytorch/pytorch/pull/7694#discussion_r192187027", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/7694", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/192187027"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/7694#discussion_r192187027"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/7694"}}, "body_html": "<p>Added:</p>\n<pre><code>+    // For CUDA tensors, it inserts stream synchronization such that\n+    // the streams of the caller wait for completion of the\n+    // asynchronous operations on the destination tensors.\n+    //\n+    // For CPU tensors, it is currently a nop.\n+    //\n+    // This function should only be used if the caller polls for\n+    // completion through the `isCompleted` function, it has returned\n+    // true, and the `isSuccess` function also has returned true.\n+    //\n</code></pre>", "body_text": "Added:\n+    // For CUDA tensors, it inserts stream synchronization such that\n+    // the streams of the caller wait for completion of the\n+    // asynchronous operations on the destination tensors.\n+    //\n+    // For CPU tensors, it is currently a nop.\n+    //\n+    // This function should only be used if the caller polls for\n+    // completion through the `isCompleted` function, it has returned\n+    // true, and the `isSuccess` function also has returned true.\n+    //", "in_reply_to_id": 191691989}