{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/213895486", "pull_request_review_id": 150827840, "id": 213895486, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMzg5NTQ4Ng==", "diff_hunk": "@@ -0,0 +1,313 @@\n+#include \"torch/csrc/jit/passes/annotate_effects.h\"\n+\n+#include <set>\n+#include \"torch/csrc/jit/passes/dead_code_elimination.h\"\n+\n+namespace torch {\n+namespace jit {\n+namespace {\n+\n+/**\n+ * AnnotateEffects\n+ *\n+ * This pass annotates effectful operations (such as ones that mutate existing\n+ * values) to prevent subsequent passes from re-ordering ops in a way that\n+ * changes the meaning of the program.\n+ *\n+ * It does this by threading a \"world token\" value through nodes that use\n+ * mutable values. This models effects explicitly in the IR and forces all\n+ * annotated nodes to be linearized during optimization.\n+ *\n+ * For mutating operators: the world token is threaded directly through the node\n+ * For purely functional operators: their node will be \"fenced\" by two\n+ *   `prim::MemoryFence` nodes that take world tokens as their input.\n+ *\n+ * Graphs have special EntryWorld and ExitWorld nodes that provide end-points\n+ * for the world token. They are similar to graph inputs/outputs in that they\n+ * are not in the node list and only accessible via special methods.\n+ *\n+ * When inlined, graphs will manifest the EntryWorld/ExitWorld nodes explicitly\n+ * so that they can act as endpoints where the callee \"world thread\" can be\n+ * joined to the caller world thread.\n+ */\n+class AnnotateEffectsImpl {\n+ public:\n+  void annotateEffects(Graph* g) {\n+    // Generate the first world token\n+    auto curToken = g->entryWorld()->addOutput()->setType(WorldType::get());\n+    auto lastToken = visitBlock(g->block(), curToken);\n+\n+    g->exitWorld()->addInput(lastToken);\n+    g->exitWorld()->addOutput()->setType(WorldType::get());\n+  }\n+\n+ private:\n+  Value* visitBlock(Block* block, Value* curToken) {\n+    for (auto* node : block->nodes()) {\n+      // Handle inlined functions. Inlined functions expose their Entry and\n+      // Exit tokens as regular nodes. These exposed nodes provide fixed points\n+      // to thread the current world token through.\n+      //\n+      // We can ignore all nodes in between the entry and exit tokens, since\n+      // tokens have already been threaded through then.\n+      bool skip = false;\n+      if (node->kind() == prim::EntryWorld) {\n+        curToken = visitEntryWorld(node, curToken);\n+        // Skip until we see the corresponding ExitWorld node.\n+        skip = true;\n+        continue;\n+      }\n+\n+      if (node->kind() == prim::ExitWorld) {\n+        curToken = visitExitWorld(node, curToken);\n+        // Resume threading the token normally.\n+        skip = false;\n+        continue;\n+      }\n+\n+      if (skip) {\n+        continue;\n+      }\n+\n+      curToken = visitNode(node, curToken);\n+    }\n+    return curToken;\n+  }\n+\n+  // Special handling for inlined functions.\n+  // Replace the inlined function's inital entry token with the outer function's\n+  // current token.\n+  Value* visitEntryWorld(Node* node, Value* curToken) {\n+    JIT_ASSERT(node->kind() == prim::EntryWorld);\n+    if (node->outputs().empty()) {\n+      return curToken;\n+    }\n+    auto inlinedEntryToken = node->output();\n+    inlinedEntryToken->replaceAllUsesWith(curToken);\n+    return curToken;\n+  }\n+\n+  // Returns the inlined function's last world token directly\n+  Value* visitExitWorld(Node* node, Value* curToken) {\n+    JIT_ASSERT(node->kind() == prim::ExitWorld);\n+    if (node->outputs().empty()) {\n+      return curToken;\n+    }\n+    auto lastReturnedToken = node->input();\n+    auto inlinedExitToken = node->output();\n+    // There shouldn't be any uses of the exit token, so DCE should correctly\n+    // clean it up.\n+    JIT_ASSERT(inlinedExitToken->uses().empty());\n+    return lastReturnedToken;\n+  }\n+\n+  // General node annotation. If a node uses a mutable variable (or mutates a\n+  // previously constant variable), annotate it\n+  //\n+  // Returns the last world token emitted for subsequent annotations to use.\n+  Value* visitNode(Node* node, Value* curToken) {\n+    // Avoid annotating memory fences. This avoids an infinite loop as we add\n+    // fences and continue to iterate through nodes.\n+    if (node->kind() == prim::MemoryFence) {\n+      // Return this memory fence's world token\n+      return node->outputs().at(0);\n+    }\n+\n+    // Handle inlined functions. Inlined functions will expose their Entry and\n+    // Exit tokens as regular nodes. These exposed nodes provide fixed points\n+    // to thread the current world token through.\n+    if (node->kind() == prim::EntryWorld) {", "path": "torch/csrc/jit/passes/annotate_effects.cpp", "position": null, "original_position": 119, "commit_id": "fbcf02446753bff536faca7fa093af5f88fc621c", "original_commit_id": "b7e5c8b0d3954e3d2e0c21c7f89ad022007c237a", "user": {"login": "suo", "id": 1617424, "node_id": "MDQ6VXNlcjE2MTc0MjQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/1617424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/suo", "html_url": "https://github.com/suo", "followers_url": "https://api.github.com/users/suo/followers", "following_url": "https://api.github.com/users/suo/following{/other_user}", "gists_url": "https://api.github.com/users/suo/gists{/gist_id}", "starred_url": "https://api.github.com/users/suo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/suo/subscriptions", "organizations_url": "https://api.github.com/users/suo/orgs", "repos_url": "https://api.github.com/users/suo/repos", "events_url": "https://api.github.com/users/suo/events{/privacy}", "received_events_url": "https://api.github.com/users/suo/received_events", "type": "User", "site_admin": false}, "body": "this is unnecessary, removing", "created_at": "2018-08-30T03:40:23Z", "updated_at": "2018-11-23T15:50:19Z", "html_url": "https://github.com/pytorch/pytorch/pull/10700#discussion_r213895486", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/10700", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/213895486"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/10700#discussion_r213895486"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/10700"}}, "body_html": "<p>this is unnecessary, removing</p>", "body_text": "this is unnecessary, removing"}