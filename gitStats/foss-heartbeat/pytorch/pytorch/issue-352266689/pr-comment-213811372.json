{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/213811372", "pull_request_review_id": 150702987, "id": 213811372, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMzgxMTM3Mg==", "diff_hunk": "@@ -0,0 +1,313 @@\n+#include \"torch/csrc/jit/passes/annotate_effects.h\"\n+\n+#include <set>\n+#include \"torch/csrc/jit/passes/dead_code_elimination.h\"\n+\n+namespace torch {\n+namespace jit {\n+namespace {\n+\n+/**\n+ * AnnotateEffects\n+ *\n+ * This pass annotates effectful operations (such as ones that mutate existing\n+ * values) to prevent subsequent passes from re-ordering ops in a way that\n+ * changes the meaning of the program.\n+ *\n+ * It does this by threading a \"world token\" value through nodes that use\n+ * mutable values. This models effects explicitly in the IR and forces all\n+ * annotated nodes to be linearized during optimization.\n+ *\n+ * For mutating operators: the world token is threaded directly through the node\n+ * For purely functional operators: their node will be \"fenced\" by two\n+ *   `prim::MemoryFence` nodes that take world tokens as their input.\n+ *\n+ * Graphs have special EntryWorld and ExitWorld nodes that provide end-points\n+ * for the world token. They are similar to graph inputs/outputs in that they\n+ * are not in the node list and only accessible via special methods.\n+ *\n+ * When inlined, graphs will manifest the EntryWorld/ExitWorld nodes explicitly\n+ * so that they can act as endpoints where the callee \"world thread\" can be\n+ * joined to the caller world thread.\n+ */\n+class AnnotateEffectsImpl {\n+ public:\n+  void annotateEffects(Graph* g) {\n+    // Generate the first world token\n+    auto curToken = g->entryWorld()->addOutput()->setType(WorldType::get());\n+    auto lastToken = visitBlock(g->block(), curToken);\n+\n+    g->exitWorld()->addInput(lastToken);\n+    g->exitWorld()->addOutput()->setType(WorldType::get());\n+  }\n+\n+ private:\n+  Value* visitBlock(Block* block, Value* curToken) {\n+    for (auto* node : block->nodes()) {\n+      // Handle inlined functions. Inlined functions expose their Entry and\n+      // Exit tokens as regular nodes. These exposed nodes provide fixed points\n+      // to thread the current world token through.\n+      //\n+      // We can ignore all nodes in between the entry and exit tokens, since\n+      // tokens have already been threaded through then.\n+      bool skip = false;\n+      if (node->kind() == prim::EntryWorld) {", "path": "torch/csrc/jit/passes/annotate_effects.cpp", "position": null, "original_position": 54, "commit_id": "fbcf02446753bff536faca7fa093af5f88fc621c", "original_commit_id": "a7826866cb6198f2ba2c1b45d4c2dee7d38a2948", "user": {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, "body": "We shouln't pun prim::EntryWorld to mean both the special node _and_ a node that appears in the graph. It confuse the linter.I'd just rather this be named prim::LoadWorld, and the thing that ends an inline function be called prim::StoreWorld.", "created_at": "2018-08-29T19:49:44Z", "updated_at": "2018-11-23T15:50:16Z", "html_url": "https://github.com/pytorch/pytorch/pull/10700#discussion_r213811372", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/10700", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/213811372"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/10700#discussion_r213811372"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/10700"}}, "body_html": "<p>We shouln't pun prim::EntryWorld to mean both the special node <em>and</em> a node that appears in the graph. It confuse the linter.I'd just rather this be named prim::LoadWorld, and the thing that ends an inline function be called prim::StoreWorld.</p>", "body_text": "We shouln't pun prim::EntryWorld to mean both the special node and a node that appears in the graph. It confuse the linter.I'd just rather this be named prim::LoadWorld, and the thing that ends an inline function be called prim::StoreWorld."}