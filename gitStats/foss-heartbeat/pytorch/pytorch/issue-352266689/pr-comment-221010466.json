{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/221010466", "pull_request_review_id": 159556551, "id": 221010466, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyMTAxMDQ2Ng==", "diff_hunk": "@@ -636,35 +638,42 @@ at::optional<MatchedSchema> tryMatchSchema(\n     return MatchedSchema {std::move(positional_inputs), std::move(return_types) };\n }\n \n-\n-static Value* tryEmitBuiltin(\n-  const std::shared_ptr<Operator>& op,\n-  std::stringstream& failure_messages,\n-  const SourceRange& loc,\n-  Graph& graph,\n-  Symbol name,\n-  at::ArrayRef<NamedValue> inputs,\n-  at::ArrayRef<NamedValue> attributes,\n-  bool convert_tensors_to_nums) {\n-\n-  auto matched_schema = tryMatchSchema(op->schema(), loc, graph, inputs, attributes,\n-    failure_messages, convert_tensors_to_nums);\n-  if(!matched_schema)\n-    return nullptr;\n-  // we successfully matched this schema, construct the node\n-\n-  auto n = graph.insertNode(graph.create(name, matched_schema->inputs, 0))\n-                ->setSourceLocation(std::make_shared<SourceRange>(loc));\n-\n-  for(auto & ret : matched_schema->return_types) {\n-    n->addOutput()->setType(ret);\n-  }\n-\n-  // assert that we did indeed create an op that has implementation\n-  // otherwise schema and dispatch are not in sync\n-  getOperation(n);\n-\n-  return packOutputs(graph, n->outputs());\n+// Match against a potentially mutable schema.\n+//\n+// We need to treat mutable schemas differently because the IR explicitly\n+// expresses effects by including a world token in mutable ops. Users do not\n+// know about the world token, so we need to generate a dummy one and add\n+// it to the inputs for schema matching.\n+//\n+// Example:\n+//   append(int[] list, int el)\n+// becomes\n+//   append(World w, int[] list, int el)\n+//\n+// NOTE: The dummy world token has no meaning; the AnnotateEffects pass is\n+// necessary to enforce linearization on effectful ops.\n+at::optional<MatchedSchema> tryMatchSchema(\n+    const FunctionSchema& schema,\n+    const SourceRange& loc,\n+    Graph& graph,\n+    at::ArrayRef<NamedValue> inputs,\n+    at::ArrayRef<NamedValue> attributes,\n+    std::ostream& failure_messages,\n+    bool convert_tensors_to_nums) {\n+  std::vector<NamedValue> modifiedInputs(inputs.begin(), inputs.end());", "path": "torch/csrc/jit/script/compiler.cpp", "position": null, "original_position": 79, "commit_id": "fbcf02446753bff536faca7fa093af5f88fc621c", "original_commit_id": "044fe33dd98e2393d065fd57b3e959e5713a8f24", "user": {"login": "suo", "id": 1617424, "node_id": "MDQ6VXNlcjE2MTc0MjQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/1617424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/suo", "html_url": "https://github.com/suo", "followers_url": "https://api.github.com/users/suo/followers", "following_url": "https://api.github.com/users/suo/following{/other_user}", "gists_url": "https://api.github.com/users/suo/gists{/gist_id}", "starred_url": "https://api.github.com/users/suo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/suo/subscriptions", "organizations_url": "https://api.github.com/users/suo/orgs", "repos_url": "https://api.github.com/users/suo/repos", "events_url": "https://api.github.com/users/suo/events{/privacy}", "received_events_url": "https://api.github.com/users/suo/received_events", "type": "User", "site_admin": false}, "body": "oops, this function used to be more complicated I think. Will remove", "created_at": "2018-09-27T17:27:35Z", "updated_at": "2018-11-23T15:52:06Z", "html_url": "https://github.com/pytorch/pytorch/pull/10700#discussion_r221010466", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/10700", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/221010466"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/10700#discussion_r221010466"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/10700"}}, "body_html": "<p>oops, this function used to be more complicated I think. Will remove</p>", "body_text": "oops, this function used to be more complicated I think. Will remove", "in_reply_to_id": 220794620}