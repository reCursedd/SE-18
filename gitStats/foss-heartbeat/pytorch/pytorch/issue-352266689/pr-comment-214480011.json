{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/214480011", "pull_request_review_id": 151554552, "id": 214480011, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNDQ4MDAxMQ==", "diff_hunk": "@@ -1699,23 +1741,41 @@ std::shared_ptr<SugaredValue> SimpleValue::attr(SourceRange loc, Method & m, con\n       Symbol::aten(field), NamedValue(loc, \"self\", value));\n }\n \n-std::vector<Value*> inlineCallTo(Graph& g, Graph& callee, ArrayRef<Value*> inputs) {\n+std::vector<Value*> inlineCallTo(Graph& g, Graph& originalCallee, ArrayRef<Value*> inputs) {\n+  auto callee = originalCallee.copy();\n   std::unordered_map<Value*, Value*> value_map;\n   auto value_map_func = [&](Value* v) { return value_map.at(v); };\n-  JIT_ASSERT(callee.inputs().size() == inputs.size());\n+  JIT_ASSERT(callee->inputs().size() == inputs.size());\n   for (size_t i = 0; i < inputs.size(); ++i) {\n-    value_map[callee.inputs()[i]] = inputs[i];\n+    value_map[callee->inputs()[i]] = inputs[i];\n   }\n-  for (auto* node : callee.nodes()) {\n+\n+  // Inlined graphs need to expose their EntryWorld and ExitWorld nodes, so that\n+  // the caller graph's world token can be threaded through the callee graph.\n+  //\n+  // The actual joining of the world token \"threads\" will be done in the\n+  // AnnotateEffects pass.\n+  //\n+  // TODO(suo): a cleaner way to handle this might be to have inlined graphs\n+  // be a special prim::Inlined node, so that we can clone the entire block's\n+  // metadata and don't need to expose EntryWorld and ExitWorld like this.\n+  auto* storeWorld = g.insertNode(g.create(prim::StoreWorld));", "path": "torch/csrc/jit/script/compiler.cpp", "position": null, "original_position": 216, "commit_id": "fbcf02446753bff536faca7fa093af5f88fc621c", "original_commit_id": "b70f4850b995748f66bffc238ef3c8de8bfa643e", "user": {"login": "suo", "id": 1617424, "node_id": "MDQ6VXNlcjE2MTc0MjQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/1617424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/suo", "html_url": "https://github.com/suo", "followers_url": "https://api.github.com/users/suo/followers", "following_url": "https://api.github.com/users/suo/following{/other_user}", "gists_url": "https://api.github.com/users/suo/gists{/gist_id}", "starred_url": "https://api.github.com/users/suo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/suo/subscriptions", "organizations_url": "https://api.github.com/users/suo/orgs", "repos_url": "https://api.github.com/users/suo/repos", "events_url": "https://api.github.com/users/suo/events{/privacy}", "received_events_url": "https://api.github.com/users/suo/received_events", "type": "User", "site_admin": false}, "body": "I'm a little confused by the terms: right now, graphs start with a `prim::Store` (converted from a `prim::Param`) and end with a `prim::Load` (converted from `prim::Return`), so I was just following that convention. Should I change that too? (I agree that your suggested meaning makes more sense to me)", "created_at": "2018-08-31T21:32:24Z", "updated_at": "2018-11-23T15:50:30Z", "html_url": "https://github.com/pytorch/pytorch/pull/10700#discussion_r214480011", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/10700", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/214480011"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/10700#discussion_r214480011"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/10700"}}, "body_html": "<p>I'm a little confused by the terms: right now, graphs start with a <code>prim::Store</code> (converted from a <code>prim::Param</code>) and end with a <code>prim::Load</code> (converted from <code>prim::Return</code>), so I was just following that convention. Should I change that too? (I agree that your suggested meaning makes more sense to me)</p>", "body_text": "I'm a little confused by the terms: right now, graphs start with a prim::Store (converted from a prim::Param) and end with a prim::Load (converted from prim::Return), so I was just following that convention. Should I change that too? (I agree that your suggested meaning makes more sense to me)", "in_reply_to_id": 214476217}