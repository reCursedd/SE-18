{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/221011184", "pull_request_review_id": 159557487, "id": 221011184, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyMTAxMTE4NA==", "diff_hunk": "@@ -4,19 +4,19 @@ graph(%x.1_data : Dynamic\n       %y_data : Dynamic\n       %y_mask : Dynamic\n       %y_dims : Dynamic) {\n-  %6 : int = prim::Constant[value=10]()\n-  %7 : int = prim::Constant[value=1]()\n-  %x : Dynamic, %21 : Dynamic, %22 : Dynamic = prim::Loop(%6, %7, %x.1_data, %x.1_mask, %x.1_dims)\n-    block0(%loop_num : int, %5_data : Dynamic, %5_mask : Dynamic, %5_dims : Dynamic) {\n-      %13 : int = prim::Constant[value=1]()\n-      %14 : Long() = prim::NumToTensor(%13)\n-      %alpha : float = prim::TensorToNum(%14)\n-      %data.1 : Dynamic = aten::add(%5_data, %y_data, %alpha)\n-      %mask : Dynamic = aten::mul(%5_mask, %y_mask)\n-      %dims : Dynamic = aten::__or__(%5_dims, %y_dims)\n-      %19 : int = prim::Constant[value=1]()\n-      %data : Dynamic = aten::where(%mask, %data.1, %5_data)\n-      -> (%19, %data, %mask, %dims)\n+  %7 : int = prim::Constant[value=10]()", "path": "test/expect/TestBatched.test_for.expect", "position": null, "original_position": 17, "commit_id": "fbcf02446753bff536faca7fa093af5f88fc621c", "original_commit_id": "044fe33dd98e2393d065fd57b3e959e5713a8f24", "user": {"login": "suo", "id": 1617424, "node_id": "MDQ6VXNlcjE2MTc0MjQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/1617424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/suo", "html_url": "https://github.com/suo", "followers_url": "https://api.github.com/users/suo/followers", "following_url": "https://api.github.com/users/suo/following{/other_user}", "gists_url": "https://api.github.com/users/suo/gists{/gist_id}", "starred_url": "https://api.github.com/users/suo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/suo/subscriptions", "organizations_url": "https://api.github.com/users/suo/orgs", "repos_url": "https://api.github.com/users/suo/repos", "events_url": "https://api.github.com/users/suo/events{/privacy}", "received_events_url": "https://api.github.com/users/suo/received_events", "type": "User", "site_admin": false}, "body": "It's the effect of having a `entryWorld` value in every graph. In order to fix it, we'd need to distinguish \"control\" values and put their unique ids in a different namespace. I don't think it's worth the extra bookkeeping.", "created_at": "2018-09-27T17:29:50Z", "updated_at": "2018-11-23T15:52:06Z", "html_url": "https://github.com/pytorch/pytorch/pull/10700#discussion_r221011184", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/10700", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/221011184"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/10700#discussion_r221011184"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/10700"}}, "body_html": "<p>It's the effect of having a <code>entryWorld</code> value in every graph. In order to fix it, we'd need to distinguish \"control\" values and put their unique ids in a different namespace. I don't think it's worth the extra bookkeeping.</p>", "body_text": "It's the effect of having a entryWorld value in every graph. In order to fix it, we'd need to distinguish \"control\" values and put their unique ids in a different namespace. I don't think it's worth the extra bookkeeping.", "in_reply_to_id": 220793102}