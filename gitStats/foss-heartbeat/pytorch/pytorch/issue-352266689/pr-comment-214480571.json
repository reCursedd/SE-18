{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/214480571", "pull_request_review_id": 151555171, "id": 214480571, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNDQ4MDU3MQ==", "diff_hunk": "@@ -56,6 +56,13 @@ namespace torch { namespace jit {\n   _(prim, FusedConcat)             \\\n   _(prim, FusedChunk)              \\\n   _(prim, NoneGenerator)           \\\n+  _(prim, MemoryFence)             \\\n+  _(prim, EntryWorld)              \\\n+  _(prim, ExitWorld)               \\\n+  _(prim, LoadWorld)               \\\n+  _(prim, StoreWorld)              \\\n+  _(prim, DummyWorld)              \\", "path": "torch/csrc/jit/interned_strings.h", "position": 7, "original_position": 9, "commit_id": "fbcf02446753bff536faca7fa093af5f88fc621c", "original_commit_id": "b70f4850b995748f66bffc238ef3c8de8bfa643e", "user": {"login": "suo", "id": 1617424, "node_id": "MDQ6VXNlcjE2MTc0MjQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/1617424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/suo", "html_url": "https://github.com/suo", "followers_url": "https://api.github.com/users/suo/followers", "following_url": "https://api.github.com/users/suo/following{/other_user}", "gists_url": "https://api.github.com/users/suo/gists{/gist_id}", "starred_url": "https://api.github.com/users/suo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/suo/subscriptions", "organizations_url": "https://api.github.com/users/suo/orgs", "repos_url": "https://api.github.com/users/suo/repos", "events_url": "https://api.github.com/users/suo/events{/privacy}", "received_events_url": "https://api.github.com/users/suo/received_events", "type": "User", "site_admin": false}, "body": "Hm, the main reason for having `DummyWorld` is that the program will fault at runtime if that instruction is every executed by the interpreter, whereas every program *should* start with a `LoadWorld` instruction to set up the world token. This has the effect of forcing pass writers to deal with any `DummyWorld`s they are emitting.\r\n\r\nIs there a better way to distinguish these two use-cases with a single op?", "created_at": "2018-08-31T21:35:34Z", "updated_at": "2018-11-23T15:50:31Z", "html_url": "https://github.com/pytorch/pytorch/pull/10700#discussion_r214480571", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/10700", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/214480571"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/10700#discussion_r214480571"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/10700"}}, "body_html": "<p>Hm, the main reason for having <code>DummyWorld</code> is that the program will fault at runtime if that instruction is every executed by the interpreter, whereas every program <em>should</em> start with a <code>LoadWorld</code> instruction to set up the world token. This has the effect of forcing pass writers to deal with any <code>DummyWorld</code>s they are emitting.</p>\n<p>Is there a better way to distinguish these two use-cases with a single op?</p>", "body_text": "Hm, the main reason for having DummyWorld is that the program will fault at runtime if that instruction is every executed by the interpreter, whereas every program should start with a LoadWorld instruction to set up the world token. This has the effect of forcing pass writers to deal with any DummyWorlds they are emitting.\nIs there a better way to distinguish these two use-cases with a single op?", "in_reply_to_id": 214476427}