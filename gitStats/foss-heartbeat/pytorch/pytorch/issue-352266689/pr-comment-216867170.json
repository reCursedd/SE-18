{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/216867170", "pull_request_review_id": 154449498, "id": 216867170, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNjg2NzE3MA==", "diff_hunk": "@@ -1699,23 +1741,41 @@ std::shared_ptr<SugaredValue> SimpleValue::attr(SourceRange loc, Method & m, con\n       Symbol::aten(field), NamedValue(loc, \"self\", value));\n }\n \n-std::vector<Value*> inlineCallTo(Graph& g, Graph& callee, ArrayRef<Value*> inputs) {\n+std::vector<Value*> inlineCallTo(Graph& g, Graph& originalCallee, ArrayRef<Value*> inputs) {\n+  auto callee = originalCallee.copy();\n   std::unordered_map<Value*, Value*> value_map;\n   auto value_map_func = [&](Value* v) { return value_map.at(v); };\n-  JIT_ASSERT(callee.inputs().size() == inputs.size());\n+  JIT_ASSERT(callee->inputs().size() == inputs.size());\n   for (size_t i = 0; i < inputs.size(); ++i) {\n-    value_map[callee.inputs()[i]] = inputs[i];\n+    value_map[callee->inputs()[i]] = inputs[i];\n   }\n-  for (auto* node : callee.nodes()) {\n+\n+  // Inlined graphs need to expose their EntryWorld and ExitWorld nodes, so that\n+  // the caller graph's world token can be threaded through the callee graph.\n+  //\n+  // The actual joining of the world token \"threads\" will be done in the\n+  // AnnotateEffects pass.\n+  //\n+  // TODO(suo): a cleaner way to handle this might be to have inlined graphs\n+  // be a special prim::Inlined node, so that we can clone the entire block's\n+  // metadata and don't need to expose EntryWorld and ExitWorld like this.\n+  auto* storeWorld = g.insertNode(g.create(prim::StoreWorld));", "path": "torch/csrc/jit/script/compiler.cpp", "position": null, "original_position": 216, "commit_id": "fbcf02446753bff536faca7fa093af5f88fc621c", "original_commit_id": "b70f4850b995748f66bffc238ef3c8de8bfa643e", "user": {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, "body": "Yeah, those instructions are flipped as well.", "created_at": "2018-09-12T00:43:16Z", "updated_at": "2018-11-23T15:51:06Z", "html_url": "https://github.com/pytorch/pytorch/pull/10700#discussion_r216867170", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/10700", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/216867170"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/10700#discussion_r216867170"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/10700"}}, "body_html": "<p>Yeah, those instructions are flipped as well.</p>", "body_text": "Yeah, those instructions are flipped as well.", "in_reply_to_id": 214476217}