{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/212051484", "pull_request_review_id": 148582031, "id": 212051484, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMjA1MTQ4NA==", "diff_hunk": "@@ -486,19 +517,26 @@ at::optional<std::vector<Value*>> tryMatchSchema(\n     return matched_inputs;\n }\n \n-\n static Value* tryEmitBuiltin(\n-  const std::shared_ptr<Operator>& op,\n-  std::stringstream& failure_messages,\n-  const SourceRange& loc,\n-  Graph& graph,\n-  Symbol name,\n-  at::ArrayRef<NamedValue> inputs,\n-  at::ArrayRef<NamedValue> attributes) {\n+    const std::shared_ptr<Operator>& op,", "path": "torch/csrc/jit/script/compiler.cpp", "position": null, "original_position": 57, "commit_id": "fbcf02446753bff536faca7fa093af5f88fc621c", "original_commit_id": "3ab89f73ed99cbea775ac32ed1e502b081356cc5", "user": {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, "body": "tryEmitBuiltin is used by `graph->insert` when inserting nodes as well. So this modification will let _any_ pass put a node in by making up a world token. This is unsafe since passes that happen after the compiler are not going to call annotate effects. Furthermore, it _prevents_ those passes from actually passing a valid world token when creating an op. We should probably distinguish between calls within compiler.cpp which do implicitly insert the world token and calls from graph->insert which should not.", "created_at": "2018-08-22T18:03:01Z", "updated_at": "2018-11-23T15:49:45Z", "html_url": "https://github.com/pytorch/pytorch/pull/10700#discussion_r212051484", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/10700", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/212051484"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/10700#discussion_r212051484"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/10700"}}, "body_html": "<p>tryEmitBuiltin is used by <code>graph-&gt;insert</code> when inserting nodes as well. So this modification will let <em>any</em> pass put a node in by making up a world token. This is unsafe since passes that happen after the compiler are not going to call annotate effects. Furthermore, it <em>prevents</em> those passes from actually passing a valid world token when creating an op. We should probably distinguish between calls within compiler.cpp which do implicitly insert the world token and calls from graph-&gt;insert which should not.</p>", "body_text": "tryEmitBuiltin is used by graph->insert when inserting nodes as well. So this modification will let any pass put a node in by making up a world token. This is unsafe since passes that happen after the compiler are not going to call annotate effects. Furthermore, it prevents those passes from actually passing a valid world token when creating an op. We should probably distinguish between calls within compiler.cpp which do implicitly insert the world token and calls from graph->insert which should not."}