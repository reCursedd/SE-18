{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/213819534", "pull_request_review_id": 150702987, "id": 213819534, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMzgxOTUzNA==", "diff_hunk": "@@ -535,6 +536,44 @@ Value* tryCreateList(\n   return graph.insertNode(graph.createList(elem_type, list_ctor))->output();\n }\n \n+// Match against a potentially mutable schema.\n+//\n+// We need to treat mutable schemas differently because the IR explicitly\n+// expresses effects by including a world token in mutable ops. Users do not\n+// know about the world token, so we need to generate a dummy one and add\n+// it to the inputs for schema matching.\n+//\n+// Example:\n+//   append(int[] list, int el)\n+// becomes\n+//   append(World w, int[] list, int el)\n+//\n+// NOTE: The dummy world token has no meaning; the AnnotateEffects pass is\n+// necessary to enforce linearization on effectful ops.\n+at::optional<std::vector<Value*>> tryMatchMutableSchema(\n+    const FunctionSchema& schema,\n+    const SourceRange& loc,\n+    Graph& graph,\n+    at::ArrayRef<NamedValue> inputs,\n+    at::ArrayRef<NamedValue> attributes,\n+    std::ostream& failure_messages,\n+    bool convert_tensors_to_nums) {\n+  std::vector<NamedValue> modifiedInputs(inputs.begin(), inputs.end());\n+  if (schema.is_mutable) {\n+    // Add a dummy world token to be matched against\n+    const auto worldToken = graph.insertConstant(World());", "path": "torch/csrc/jit/script/compiler.cpp", "position": null, "original_position": 36, "commit_id": "fbcf02446753bff536faca7fa093af5f88fc621c", "original_commit_id": "a7826866cb6198f2ba2c1b45d4c2dee7d38a2948", "user": {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, "body": "A `prim::Constant` world and `prim::EntryWorld` would have the same behavior the in annotate effects pass. If we just inserted a node `prim::LoadCurrentWorld` in both cases you can unify the concept.", "created_at": "2018-08-29T20:17:39Z", "updated_at": "2018-11-23T15:50:16Z", "html_url": "https://github.com/pytorch/pytorch/pull/10700#discussion_r213819534", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/10700", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/213819534"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/10700#discussion_r213819534"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/10700"}}, "body_html": "<p>A <code>prim::Constant</code> world and <code>prim::EntryWorld</code> would have the same behavior the in annotate effects pass. If we just inserted a node <code>prim::LoadCurrentWorld</code> in both cases you can unify the concept.</p>", "body_text": "A prim::Constant world and prim::EntryWorld would have the same behavior the in annotate effects pass. If we just inserted a node prim::LoadCurrentWorld in both cases you can unify the concept."}