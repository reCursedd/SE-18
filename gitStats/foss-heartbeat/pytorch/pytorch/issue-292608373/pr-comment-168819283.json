{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/168819283", "pull_request_review_id": 97254570, "id": 168819283, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2ODgxOTI4Mw==", "diff_hunk": "@@ -69,6 +72,142 @@ def __repr__(self):\n             + ', k=' + str(self.k) + ')'\n \n \n+class LayerNorm(Module):\n+    r\"\"\"Applies Layer Normalization over a mini-batch of inputs as described in\n+    the paper `Layer Normalization`_ .\n+\n+    .. math::\n+        y = \\frac{x - mean[x]}{ \\sqrt{Var[x]} + \\epsilon} * gamma + beta\n+\n+    The mean and standard-deviation are calculated separately over the last\n+    certain number dimensions with shape specified by :attr:`normalized_shape`.\n+    Gamma and beta are learnable parameters of :attr:`normalized_shape` if\n+    :attr:`elementwise_affine` is ``True``.\n+\n+    .. note::\n+        Unlike Batch Normalization and Instance Normalization, which applies\n+        scalar scale and bias for each entire channel/plane with the\n+        :attr:`affine` option, Layer Normalization applies per-element scale and\n+        bias with :attr:`elementwise_affine`.\n+\n+    By default, this layer uses statistics computed from input data in both\n+    training and evaluation modes.\n+\n+    If :attr:`track_running_stats` is set to ``True``, during training this\n+    layer keeps running estimates of its computed mean and variance, which are\n+    then used for normalization during evaluation. The running estimates are\n+    kept with a default :attr:`momentum` of 0.1.\n+\n+    .. note::\n+        This :attr:`momentum` argument is different from one used in optimizer\n+        classes and the conventional notion of momentum. Mathematically, the\n+        update rule for running statistics here is\n+        :math:`\\hat{x}_\\text{new} = (1 - \\text{momentum}) \\times \\hat{x}_\\text{new} + \\text{momemtum} \\times x_t`,\n+        where :math:`\\hat{x}` is the estimated statistic and :math:`x_t` is the\n+        new observed value.\n+\n+    Args:\n+        normalized_shape (list or torch.Size): input shape from an expected input of size\n+            `[* x normalized_shape[0] x normalized_shape[1] x ... x normalized_shape[-1]]`", "path": "torch/nn/modules/normalization.py", "position": 65, "original_position": 48, "commit_id": "b1359c8212165027bb3a1fbf500a1328ef7e0f39", "original_commit_id": "1d41417a3f5de5880ab4edb3023c254d56829e9f", "user": {"login": "zou3519", "id": 5652049, "node_id": "MDQ6VXNlcjU2NTIwNDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/5652049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zou3519", "html_url": "https://github.com/zou3519", "followers_url": "https://api.github.com/users/zou3519/followers", "following_url": "https://api.github.com/users/zou3519/following{/other_user}", "gists_url": "https://api.github.com/users/zou3519/gists{/gist_id}", "starred_url": "https://api.github.com/users/zou3519/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zou3519/subscriptions", "organizations_url": "https://api.github.com/users/zou3519/orgs", "repos_url": "https://api.github.com/users/zou3519/repos", "events_url": "https://api.github.com/users/zou3519/events{/privacy}", "received_events_url": "https://api.github.com/users/zou3519/received_events", "type": "User", "site_admin": false}, "body": "Nit: you can add a comment saying that * represents any number of dimensions (though we do have it elsewhere in our docs)", "created_at": "2018-02-16T17:24:01Z", "updated_at": "2018-11-23T15:39:41Z", "html_url": "https://github.com/pytorch/pytorch/pull/4922#discussion_r168819283", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4922", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/168819283"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/4922#discussion_r168819283"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4922"}}, "body_html": "<p>Nit: you can add a comment saying that * represents any number of dimensions (though we do have it elsewhere in our docs)</p>", "body_text": "Nit: you can add a comment saying that * represents any number of dimensions (though we do have it elsewhere in our docs)"}