{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/164627382", "pull_request_review_id": 92427757, "id": 164627382, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NDYyNzM4Mg==", "diff_hunk": "@@ -0,0 +1,116 @@\n+from .batchnorm import _BatchNorm\n+from .. import functional as F\n+\n+\n+class LayerNorm(_BatchNorm):\n+    r\"\"\"Applies Layer Normalization over a mini-batch of inputs as described in\n+    the paper `Layer Normalization`_ .\n+\n+    .. math::\n+        y = \\frac{x - mean[x]}{ \\sqrt{Var[x]} + \\epsilon} * gamma + beta\n+\n+    The mean and standard-deviation are calculated separately for all dimensions", "path": "torch/nn/modules/layernorm.py", "position": null, "original_position": 12, "commit_id": "b1359c8212165027bb3a1fbf500a1328ef7e0f39", "original_commit_id": "99fe7ed626e6d18e421d4ee3af7df8a42dc70553", "user": {"login": "jekbradbury", "id": 11729078, "node_id": "MDQ6VXNlcjExNzI5MDc4", "avatar_url": "https://avatars2.githubusercontent.com/u/11729078?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jekbradbury", "html_url": "https://github.com/jekbradbury", "followers_url": "https://api.github.com/users/jekbradbury/followers", "following_url": "https://api.github.com/users/jekbradbury/following{/other_user}", "gists_url": "https://api.github.com/users/jekbradbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/jekbradbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jekbradbury/subscriptions", "organizations_url": "https://api.github.com/users/jekbradbury/orgs", "repos_url": "https://api.github.com/users/jekbradbury/repos", "events_url": "https://api.github.com/users/jekbradbury/events{/privacy}", "received_events_url": "https://api.github.com/users/jekbradbury/received_events", "type": "User", "site_admin": false}, "body": "This is a little unclear. What layernorm should do, as far as I know, is compute means and stdevs over a single dimension (representing the channel, typically dimension -1) or occasionally in the case of image data multiple dimensions (i.e. one or more spatial dims + the channel dim). But at least for the NLP use case it shouldn't reduce over all non-batch dimensions, only one of them, and it should never compute statistics over the batch dimension.", "created_at": "2018-01-30T02:40:21Z", "updated_at": "2018-11-23T15:38:43Z", "html_url": "https://github.com/pytorch/pytorch/pull/4922#discussion_r164627382", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4922", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/164627382"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/4922#discussion_r164627382"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4922"}}, "body_html": "<p>This is a little unclear. What layernorm should do, as far as I know, is compute means and stdevs over a single dimension (representing the channel, typically dimension -1) or occasionally in the case of image data multiple dimensions (i.e. one or more spatial dims + the channel dim). But at least for the NLP use case it shouldn't reduce over all non-batch dimensions, only one of them, and it should never compute statistics over the batch dimension.</p>", "body_text": "This is a little unclear. What layernorm should do, as far as I know, is compute means and stdevs over a single dimension (representing the channel, typically dimension -1) or occasionally in the case of image data multiple dimensions (i.e. one or more spatial dims + the channel dim). But at least for the NLP use case it shouldn't reduce over all non-batch dimensions, only one of them, and it should never compute statistics over the batch dimension."}