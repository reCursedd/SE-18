{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/367920444", "html_url": "https://github.com/pytorch/pytorch/pull/4922#issuecomment-367920444", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/4922", "id": 367920444, "node_id": "MDEyOklzc3VlQ29tbWVudDM2NzkyMDQ0NA==", "user": {"login": "SsnL", "id": 5674597, "node_id": "MDQ6VXNlcjU2NzQ1OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5674597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SsnL", "html_url": "https://github.com/SsnL", "followers_url": "https://api.github.com/users/SsnL/followers", "following_url": "https://api.github.com/users/SsnL/following{/other_user}", "gists_url": "https://api.github.com/users/SsnL/gists{/gist_id}", "starred_url": "https://api.github.com/users/SsnL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SsnL/subscriptions", "organizations_url": "https://api.github.com/users/SsnL/orgs", "repos_url": "https://api.github.com/users/SsnL/repos", "events_url": "https://api.github.com/users/SsnL/events{/privacy}", "received_events_url": "https://api.github.com/users/SsnL/received_events", "type": "User", "site_admin": false}, "created_at": "2018-02-23T06:15:25Z", "updated_at": "2018-02-23T06:15:25Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=6818607\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/meder411\">@meder411</a> It doesn't need to be a tensor. It can be a list, tuple, <code>torch.Size</code>, etc., basically anything that can be accepted by <code>torch.Size</code>'s constructor. In fact, the doc never suggested passing in a tensor, so I'm not sure where you get that idea.</p>\n<p>The idea is to be able to normalize over multiple dimensions. Hence the argument is called <code>normalized_shape</code>. The doc explains it pretty clearly I think.</p>", "body_text": "@meder411 It doesn't need to be a tensor. It can be a list, tuple, torch.Size, etc., basically anything that can be accepted by torch.Size's constructor. In fact, the doc never suggested passing in a tensor, so I'm not sure where you get that idea.\nThe idea is to be able to normalize over multiple dimensions. Hence the argument is called normalized_shape. The doc explains it pretty clearly I think.", "body": "@meder411 It doesn't need to be a tensor. It can be a list, tuple, `torch.Size`, etc., basically anything that can be accepted by `torch.Size`'s constructor. In fact, the doc never suggested passing in a tensor, so I'm not sure where you get that idea.\r\n\r\nThe idea is to be able to normalize over multiple dimensions. Hence the argument is called `normalized_shape`. The doc explains it pretty clearly I think."}