{"url": "https://api.github.com/repos/pytorch/pytorch/issues/13243", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/13243/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/13243/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/13243/events", "html_url": "https://github.com/pytorch/pytorch/issues/13243", "id": 374921476, "node_id": "MDU6SXNzdWUzNzQ5MjE0NzY=", "number": 13243, "title": "Potential memory leak in Tensor.size()", "user": {"login": "shhshn", "id": 15028546, "node_id": "MDQ6VXNlcjE1MDI4NTQ2", "avatar_url": "https://avatars3.githubusercontent.com/u/15028546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shhshn", "html_url": "https://github.com/shhshn", "followers_url": "https://api.github.com/users/shhshn/followers", "following_url": "https://api.github.com/users/shhshn/following{/other_user}", "gists_url": "https://api.github.com/users/shhshn/gists{/gist_id}", "starred_url": "https://api.github.com/users/shhshn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shhshn/subscriptions", "organizations_url": "https://api.github.com/users/shhshn/orgs", "repos_url": "https://api.github.com/users/shhshn/repos", "events_url": "https://api.github.com/users/shhshn/events{/privacy}", "received_events_url": "https://api.github.com/users/shhshn/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 443484135, "node_id": "MDU6TGFiZWw0NDM0ODQxMzU=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/high%20priority", "name": "high priority", "color": "F22613", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-10-29T09:18:12Z", "updated_at": "2018-10-30T15:34:15Z", "closed_at": "2018-10-30T15:34:15Z", "author_association": "NONE", "body_html": "<h2><g-emoji class=\"g-emoji\" alias=\"bug\" fallback-src=\"https://assets-cdn.github.com/images/icons/emoji/unicode/1f41b.png\">\ud83d\udc1b</g-emoji> Bug</h2>\n<p>Tensor.size() leaks 28 bytes of memory (similar to the previously resolved issue of <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"239991615\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/1963\" data-hovercard-type=\"issue\" data-hovercard-url=\"/pytorch/pytorch/issues/1963/hovercard\" href=\"https://github.com/pytorch/pytorch/issues/1963\">#1963</a>)</p>\n<h2>To Reproduce</h2>\n<pre><code>import torch, tracemalloc; tracemalloc.start()\n\ndef main():\n    def loop(maximum):\n        tmp = torch.Tensor(maximum)\n        for _ in range(1000):\n            sizes = tmp.size()\n    snapshot1 = tracemalloc.take_snapshot()\n    loop(maximum=256)\n    snapshot2 = tracemalloc.take_snapshot()\n    loop(maximum=257)\n    snapshot3 = tracemalloc.take_snapshot()\n    for line in snapshot2.compare_to(snapshot1, 'lineno')[:10]:\n        print(line)\n    print()\n    for line in snapshot3.compare_to(snapshot2, 'lineno')[:10]:\n        print(line)\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>\n<h2>Expected behavior</h2>\n<p>This will give you something similar to the line below only in the second run, but this should not happen.</p>\n<pre><code>size-problem.py:8: size=27.3 KiB (+27.3 KiB), count=1000 (+1000), average=28 B\n</code></pre>\n<p>It can be read as a leak of 28 bytes in average.</p>\n<p>However, it is possible that <code>Tensor.size()</code> is called, say, 2,000,000 times in an upper-stream application, which will result in a massive leak of more than a few gigabytes.</p>\n<h2>Environment</h2>\n<p>PyTorch version: 0.4.1<br>\nIs debug build: No<br>\nCUDA used to build PyTorch: 9.2.148</p>\n<p>OS: Ubuntu 16.04.4 LTS<br>\nGCC version: (Ubuntu 5.4.0-6ubuntu1~16.04.10) 5.4.0 20160609<br>\nCMake version: version 3.5.1</p>\n<p>Python version: 3.6<br>\nIs CUDA available: Yes<br>\nCUDA runtime version: Could not collect<br>\nGPU models and configuration: GPU 0: Tesla M60<br>\nNvidia driver version: 396.37<br>\ncuDNN version: Probably one of the following:<br>\n/usr/lib/x86_64-linux-gnu/libcudnn.so.7.1.4<br>\n/usr/lib/x86_64-linux-gnu/libcudnn_static_v7.a</p>\n<p>Versions of relevant libraries:<br>\n[pip] Could not collect<br>\n[conda] Could not collect</p>\n<h2>Additional context</h2>\n<ul>\n<li>AFAIK this happens iif no argument is given and there exists any dimension larger than 256.</li>\n<li>In addition, I cannot reproduce the problem using macOS.</li>\n</ul>", "body_text": "\ud83d\udc1b Bug\nTensor.size() leaks 28 bytes of memory (similar to the previously resolved issue of #1963)\nTo Reproduce\nimport torch, tracemalloc; tracemalloc.start()\n\ndef main():\n    def loop(maximum):\n        tmp = torch.Tensor(maximum)\n        for _ in range(1000):\n            sizes = tmp.size()\n    snapshot1 = tracemalloc.take_snapshot()\n    loop(maximum=256)\n    snapshot2 = tracemalloc.take_snapshot()\n    loop(maximum=257)\n    snapshot3 = tracemalloc.take_snapshot()\n    for line in snapshot2.compare_to(snapshot1, 'lineno')[:10]:\n        print(line)\n    print()\n    for line in snapshot3.compare_to(snapshot2, 'lineno')[:10]:\n        print(line)\n\nif __name__ == \"__main__\":\n    main()\n\nExpected behavior\nThis will give you something similar to the line below only in the second run, but this should not happen.\nsize-problem.py:8: size=27.3 KiB (+27.3 KiB), count=1000 (+1000), average=28 B\n\nIt can be read as a leak of 28 bytes in average.\nHowever, it is possible that Tensor.size() is called, say, 2,000,000 times in an upper-stream application, which will result in a massive leak of more than a few gigabytes.\nEnvironment\nPyTorch version: 0.4.1\nIs debug build: No\nCUDA used to build PyTorch: 9.2.148\nOS: Ubuntu 16.04.4 LTS\nGCC version: (Ubuntu 5.4.0-6ubuntu1~16.04.10) 5.4.0 20160609\nCMake version: version 3.5.1\nPython version: 3.6\nIs CUDA available: Yes\nCUDA runtime version: Could not collect\nGPU models and configuration: GPU 0: Tesla M60\nNvidia driver version: 396.37\ncuDNN version: Probably one of the following:\n/usr/lib/x86_64-linux-gnu/libcudnn.so.7.1.4\n/usr/lib/x86_64-linux-gnu/libcudnn_static_v7.a\nVersions of relevant libraries:\n[pip] Could not collect\n[conda] Could not collect\nAdditional context\n\nAFAIK this happens iif no argument is given and there exists any dimension larger than 256.\nIn addition, I cannot reproduce the problem using macOS.", "body": "## \ud83d\udc1b Bug\r\n\r\nTensor.size() leaks 28 bytes of memory (similar to the previously resolved issue of #1963)\r\n\r\n## To Reproduce\r\n\r\n```\r\nimport torch, tracemalloc; tracemalloc.start()\r\n\r\ndef main():\r\n    def loop(maximum):\r\n        tmp = torch.Tensor(maximum)\r\n        for _ in range(1000):\r\n            sizes = tmp.size()\r\n    snapshot1 = tracemalloc.take_snapshot()\r\n    loop(maximum=256)\r\n    snapshot2 = tracemalloc.take_snapshot()\r\n    loop(maximum=257)\r\n    snapshot3 = tracemalloc.take_snapshot()\r\n    for line in snapshot2.compare_to(snapshot1, 'lineno')[:10]:\r\n        print(line)\r\n    print()\r\n    for line in snapshot3.compare_to(snapshot2, 'lineno')[:10]:\r\n        print(line)\r\n\r\nif __name__ == \"__main__\":\r\n    main()\r\n```\r\n\r\n## Expected behavior\r\n\r\nThis will give you something similar to the line below only in the second run, but this should not happen.\r\n```\r\nsize-problem.py:8: size=27.3 KiB (+27.3 KiB), count=1000 (+1000), average=28 B\r\n```\r\nIt can be read as a leak of 28 bytes in average.\r\n\r\nHowever, it is possible that `Tensor.size()` is called, say, 2,000,000 times in an upper-stream application, which will result in a massive leak of more than a few gigabytes.\r\n\r\n## Environment\r\n\r\nPyTorch version: 0.4.1\r\nIs debug build: No\r\nCUDA used to build PyTorch: 9.2.148\r\n\r\nOS: Ubuntu 16.04.4 LTS\r\nGCC version: (Ubuntu 5.4.0-6ubuntu1~16.04.10) 5.4.0 20160609\r\nCMake version: version 3.5.1\r\n\r\nPython version: 3.6\r\nIs CUDA available: Yes\r\nCUDA runtime version: Could not collect\r\nGPU models and configuration: GPU 0: Tesla M60\r\nNvidia driver version: 396.37\r\ncuDNN version: Probably one of the following:\r\n/usr/lib/x86_64-linux-gnu/libcudnn.so.7.1.4\r\n/usr/lib/x86_64-linux-gnu/libcudnn_static_v7.a\r\n\r\nVersions of relevant libraries:\r\n[pip] Could not collect\r\n[conda] Could not collect\r\n\r\n## Additional context\r\n\r\n- AFAIK this happens iif no argument is given and there exists any dimension larger than 256.\r\n- In addition, I cannot reproduce the problem using macOS."}