{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/190909662", "pull_request_review_id": 123391445, "id": 190909662, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MDkwOTY2Mg==", "diff_hunk": "@@ -453,14 +453,20 @@ def persistent_load(saved_id):\n             raise RuntimeError(\"Unknown saved id type: %s\" % saved_id[0])\n \n     f_is_real_file = _is_real_file(f)\n-    if f_is_real_file and f.tell() == 0:\n-        # legacy_load requires that f has fileno()\n-        # only if offset is zero we can attempt the legacy tar file loader\n-        try:\n-            return legacy_load(f)\n-        except tarfile.TarError:\n-            # if not a tarfile, reset file offset and proceed\n-            f.seek(0)\n+\n+    try:\n+        if f_is_real_file and f.tell() == 0:", "path": "torch/serialization.py", "position": null, "original_position": 14, "commit_id": "8bfa74dd6e54176745fa849b9fee65bd652ed034", "original_commit_id": "08101d0943223cd88980b260ece5cbfe057c957e", "user": {"login": "zou3519", "id": 5652049, "node_id": "MDQ6VXNlcjU2NTIwNDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/5652049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zou3519", "html_url": "https://github.com/zou3519", "followers_url": "https://api.github.com/users/zou3519/followers", "following_url": "https://api.github.com/users/zou3519/following{/other_user}", "gists_url": "https://api.github.com/users/zou3519/gists{/gist_id}", "starred_url": "https://api.github.com/users/zou3519/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zou3519/subscriptions", "organizations_url": "https://api.github.com/users/zou3519/orgs", "repos_url": "https://api.github.com/users/zou3519/repos", "events_url": "https://api.github.com/users/zou3519/events{/privacy}", "received_events_url": "https://api.github.com/users/zou3519/received_events", "type": "User", "site_admin": false}, "body": "This works, but it doesn't catch the following case:\r\nLet's say f is not backed by a real file descriptor, but is instead a python file-like object. I'm not sure if we still expect `f` to be seekable, but if we try seeking on it, the error message might still be weird.", "created_at": "2018-05-25T14:22:19Z", "updated_at": "2018-11-23T15:44:38Z", "html_url": "https://github.com/pytorch/pytorch/pull/7754#discussion_r190909662", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/7754", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/190909662"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/7754#discussion_r190909662"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/7754"}}, "body_html": "<p>This works, but it doesn't catch the following case:<br>\nLet's say f is not backed by a real file descriptor, but is instead a python file-like object. I'm not sure if we still expect <code>f</code> to be seekable, but if we try seeking on it, the error message might still be weird.</p>", "body_text": "This works, but it doesn't catch the following case:\nLet's say f is not backed by a real file descriptor, but is instead a python file-like object. I'm not sure if we still expect f to be seekable, but if we try seeking on it, the error message might still be weird."}