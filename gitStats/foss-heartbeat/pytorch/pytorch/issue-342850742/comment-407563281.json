{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/407563281", "html_url": "https://github.com/pytorch/pytorch/pull/9596#issuecomment-407563281", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/9596", "id": 407563281, "node_id": "MDEyOklzc3VlQ29tbWVudDQwNzU2MzI4MQ==", "user": {"login": "wanchaol", "id": 9443650, "node_id": "MDQ6VXNlcjk0NDM2NTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/9443650?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wanchaol", "html_url": "https://github.com/wanchaol", "followers_url": "https://api.github.com/users/wanchaol/followers", "following_url": "https://api.github.com/users/wanchaol/following{/other_user}", "gists_url": "https://api.github.com/users/wanchaol/gists{/gist_id}", "starred_url": "https://api.github.com/users/wanchaol/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wanchaol/subscriptions", "organizations_url": "https://api.github.com/users/wanchaol/orgs", "repos_url": "https://api.github.com/users/wanchaol/repos", "events_url": "https://api.github.com/users/wanchaol/events{/privacy}", "received_events_url": "https://api.github.com/users/wanchaol/received_events", "type": "User", "site_admin": false}, "created_at": "2018-07-24T21:49:00Z", "updated_at": "2018-07-24T21:49:00Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=5652049\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/zou3519\">@zou3519</a> Yes here is the output:</p>\n<pre><code>In [2]: import torch\n   ...: x = torch.arange(0, 10)\n   ...: y = x.clamp(min=None, max=4)\n   ...: print(y)\n   ...:\n   ...:\ntensor([0, 1, 2, 3, 4, 4, 4, 4, 4, 4])\n</code></pre>\n<p>I will also add more subtle test cases like this one to try to capture every corner case.</p>", "body_text": "@zou3519 Yes here is the output:\nIn [2]: import torch\n   ...: x = torch.arange(0, 10)\n   ...: y = x.clamp(min=None, max=4)\n   ...: print(y)\n   ...:\n   ...:\ntensor([0, 1, 2, 3, 4, 4, 4, 4, 4, 4])\n\nI will also add more subtle test cases like this one to try to capture every corner case.", "body": "@zou3519 Yes here is the output: \r\n```\r\nIn [2]: import torch\r\n   ...: x = torch.arange(0, 10)\r\n   ...: y = x.clamp(min=None, max=4)\r\n   ...: print(y)\r\n   ...:\r\n   ...:\r\ntensor([0, 1, 2, 3, 4, 4, 4, 4, 4, 4])\r\n```\r\nI will also add more subtle test cases like this one to try to capture every corner case. "}