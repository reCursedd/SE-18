{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/163992892", "pull_request_review_id": 91700852, "id": 163992892, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2Mzk5Mjg5Mg==", "diff_hunk": "@@ -389,25 +392,34 @@ void THTensor_(take)(THTensor *r_, THTensor *src, THLongTensor *index)\n   ptrdiff_t srcElements = THTensor_(nElement)(src);\n   real* src_data = THTensor_(data)(src);\n   real* dst_data = THTensor_(data)(dst);\n-\n   ptrdiff_t nIndices = THLongTensor_nElement(index);\n-  if (THTensor_(isContiguous)(src)) {\n-    ptrdiff_t i;\n-    #pragma omp parallel for if(nIndices > TH_OMP_OVERHEAD_THRESHOLD) private(i)\n-    for (i = 0; i < nIndices; i++) {\n-      int64_t linearIndex = THTensor_(wrapLinearIndex)(index_data[i], srcElements);\n-      dst_data[i] = src_data[linearIndex];\n-    }\n-  } else {\n-    ptrdiff_t i;\n-    #pragma omp parallel for if(nIndices > TH_OMP_OVERHEAD_THRESHOLD) private(i)\n-    for (i = 0; i < nIndices; i++) {\n-      int64_t linearIndex = THTensor_(wrapLinearIndex)(index_data[i], srcElements);\n-      int64_t dataOffset = THTensor_(dataOffset)(src, linearIndex);\n-      dst_data[i] = src_data[dataOffset];\n+  int isContiguous = THTensor_(isContiguous)(src);\n+\n+  // Exceptions must not be thrown across OpenMP parallel sections, so we\n+  // record the value of the invalid index and throw the exception after the\n+  // loop.\n+  int64_t invalidIdx = -1;\n+\n+  ptrdiff_t i;\n+  #pragma omp parallel for if(nIndices > TH_OMP_OVERHEAD_THRESHOLD) private(i)\n+  for (i = 0; i < nIndices; i++) {\n+    int64_t idx = index_data[i];\n+    if (idx < srcElements && idx >= -srcElements) {\n+      idx = THTensor_(wrapLinearIndex)(idx, srcElements);\n+      if (isContiguous) {\n+        dst_data[i] = src_data[idx];\n+      } else {\n+        dst_data[i] = src_data[THTensor_(dataOffset)(src, idx)];\n+      }\n+    } else {\n+      THAtomicCompareAndSwapLong(&invalidIdx, -1, idx);", "path": "aten/src/TH/generic/THTensorMath.c", "position": 52, "original_position": 52, "commit_id": "bebed9fdff575d813a7302ba8092961ea73a4de7", "original_commit_id": "bebed9fdff575d813a7302ba8092961ea73a4de7", "user": {"login": "colesbury", "id": 655866, "node_id": "MDQ6VXNlcjY1NTg2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/655866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colesbury", "html_url": "https://github.com/colesbury", "followers_url": "https://api.github.com/users/colesbury/followers", "following_url": "https://api.github.com/users/colesbury/following{/other_user}", "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions", "organizations_url": "https://api.github.com/users/colesbury/orgs", "repos_url": "https://api.github.com/users/colesbury/repos", "events_url": "https://api.github.com/users/colesbury/events{/privacy}", "received_events_url": "https://api.github.com/users/colesbury/received_events", "type": "User", "site_admin": false}, "body": "I figured it's slightly better to prefer the first invalid index encountered instead of the last.", "created_at": "2018-01-25T22:55:19Z", "updated_at": "2018-11-23T15:38:36Z", "html_url": "https://github.com/pytorch/pytorch/pull/4857#discussion_r163992892", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4857", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/163992892"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/4857#discussion_r163992892"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4857"}}, "body_html": "<p>I figured it's slightly better to prefer the first invalid index encountered instead of the last.</p>", "body_text": "I figured it's slightly better to prefer the first invalid index encountered instead of the last.", "in_reply_to_id": 163991047}