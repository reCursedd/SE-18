{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/113186063", "pull_request_review_id": 34551680, "id": 113186063, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMzE4NjA2Mw==", "diff_hunk": "@@ -38,7 +38,46 @@ def backward(variables, grad_variables, retain_variables=False):\n             specify ``True`` if you want to differentiate some subgraph multiple\n             times.\n     \"\"\"\n+    grad_variables = tuple(var if isinstance(var, Variable) or var is None\n+                           else Variable(var, volatile=True)\n+                           for var in grad_variables)\n     Variable._execution_engine.run_backward(\n-        tuple(variables), tuple(grad_variables), retain_variables)\n+        tuple(variables), grad_variables, retain_variables)\n+\n+\n+def differentiate(outputs, grad_outputs, inputs, only_inputs=True, retain_variables=True):", "path": "torch/autograd/__init__.py", "position": null, "original_position": 12, "commit_id": "fc48d2c1dd1d40fef3f8c727897eaac70d9bbd14", "original_commit_id": "5a98d4a69acba872b755d026412b777ebbf66a65", "user": {"login": "albanD", "id": 6359743, "node_id": "MDQ6VXNlcjYzNTk3NDM=", "avatar_url": "https://avatars3.githubusercontent.com/u/6359743?v=4", "gravatar_id": "", "url": "https://api.github.com/users/albanD", "html_url": "https://github.com/albanD", "followers_url": "https://api.github.com/users/albanD/followers", "following_url": "https://api.github.com/users/albanD/following{/other_user}", "gists_url": "https://api.github.com/users/albanD/gists{/gist_id}", "starred_url": "https://api.github.com/users/albanD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/albanD/subscriptions", "organizations_url": "https://api.github.com/users/albanD/orgs", "repos_url": "https://api.github.com/users/albanD/repos", "events_url": "https://api.github.com/users/albanD/events{/privacy}", "received_events_url": "https://api.github.com/users/albanD/received_events", "type": "User", "site_admin": false}, "body": "This function actually works if the `outputs` are single elements but not sequence while it fails for `grad_outputs` (for the `inputs` in some cases, it breaks inside the autograd with ` One of the differentiated Variables appears to not have been used in any computation` which is very cryptic). I think it would be nice to allow having a single element here for all arguments as it is convenient, thoughts? If no, we should add checks to make sure that arguments are sequences and fail here if not.", "created_at": "2017-04-25T12:52:26Z", "updated_at": "2018-11-23T15:33:09Z", "html_url": "https://github.com/pytorch/pytorch/pull/1016#discussion_r113186063", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/1016", "author_association": "COLLABORATOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/113186063"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/1016#discussion_r113186063"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/1016"}}, "body_html": "<p>This function actually works if the <code>outputs</code> are single elements but not sequence while it fails for <code>grad_outputs</code> (for the <code>inputs</code> in some cases, it breaks inside the autograd with <code> One of the differentiated Variables appears to not have been used in any computation</code> which is very cryptic). I think it would be nice to allow having a single element here for all arguments as it is convenient, thoughts? If no, we should add checks to make sure that arguments are sequences and fail here if not.</p>", "body_text": "This function actually works if the outputs are single elements but not sequence while it fails for grad_outputs (for the inputs in some cases, it breaks inside the autograd with  One of the differentiated Variables appears to not have been used in any computation which is very cryptic). I think it would be nice to allow having a single element here for all arguments as it is convenient, thoughts? If no, we should add checks to make sure that arguments are sequences and fail here if not."}