{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/110114621", "pull_request_review_id": 31261755, "id": 110114621, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMDExNDYyMQ==", "diff_hunk": "@@ -2,56 +2,51 @@\n import torch\n from torch._utils import _accumulate\n \n-from ..function import Function, InplaceFunction\n+from ..function import Function, InplaceFunction, once_differentiable\n+from ..variable import Variable\n \n \n class Index(Function):\n \n-    def __init__(self, index):\n-        super(Index, self).__init__()\n-        self.index = index\n-\n-    def forward(self, i):\n-        self.input_size = i.size()\n-        result = i.index(self.index)\n-        self.mark_shared_storage((i, result))\n+    @staticmethod\n+    def forward(ctx, i, index):\n+        ctx.input_size = i.size()\n+        ctx.index = index\n+        result = i.index(ctx.index)\n+        ctx.mark_shared_storage((i, result))\n         return result\n \n-    def backward(self, grad_output):\n-        grad_input = grad_output.new(self.input_size).zero_()\n-        grad_input._set_index(self.index, grad_output)\n-        return grad_input\n+    @staticmethod\n+    def backward(ctx, grad_output):\n+        grad_input = Variable(grad_output.data.new(ctx.input_size).zero_())\n+        grad_input[ctx.index] = grad_output\n+        return grad_input, None\n \n \n class SetItem(InplaceFunction):\n \n-    def __init__(self, index, value=None):\n-        super(SetItem, self).__init__(True)\n-        self.index = index\n-        self.value = value\n-\n-    def forward(self, i, value=None):\n-        self.mark_dirty(i)\n-        if value is None:  # value is scalar\n-            value = self.value\n-        else:  # value is Tensor\n-            self.value_size = value.size()\n-        i._set_index(self.index, value)\n+    @staticmethod\n+    def forward(ctx, i, index, value):\n+        assert not isinstance(index, Variable)\n+        ctx.mark_dirty(i)\n+        ctx.index = index\n+        ctx.tensor_value = torch.is_tensor(value)\n+        if ctx.tensor_value:\n+            ctx.value_size = value.size()\n+        i._set_index(ctx.index, value)\n         return i\n \n-    def backward(self, grad_output):\n-        if self.value is None:  # value is Tensor\n-            grad_input = grad_output.clone()\n-            grad_input._set_index(self.index, 0)\n-            grad_value = grad_output.index(self.index).clone()\n-            grad_value = grad_value.view(self.value_size)\n-            return grad_input, grad_value\n-        else:\n-            grad_input = grad_output.clone()\n-            grad_input._set_index(self.index, 0)\n-            return grad_input\n+    @staticmethod\n+    def backward(ctx, grad_output):\n+        grad_input = grad_output.clone()\n+        grad_input[ctx.index] = 0\n+        grad_value = None\n+        if ctx.tensor_value:\n+            grad_value = grad_output[ctx.index].contiguous().view(ctx.value_size)\n+        return grad_input, None, grad_value\n \n \n+# TODO: how to do NoGrad in new style", "path": "torch/autograd/_functions/tensor.py", "position": 84, "original_position": 84, "commit_id": "fc48d2c1dd1d40fef3f8c727897eaac70d9bbd14", "original_commit_id": "bede03dfafc40978334d5564eb2e2d48483d437a", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "It's correct, but it's still an old-style function", "created_at": "2017-04-06T09:19:24Z", "updated_at": "2018-11-23T15:33:03Z", "html_url": "https://github.com/pytorch/pytorch/pull/1016#discussion_r110114621", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/1016", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/110114621"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/1016#discussion_r110114621"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/1016"}}, "body_html": "<p>It's correct, but it's still an old-style function</p>", "body_text": "It's correct, but it's still an old-style function", "in_reply_to_id": 109775714}