{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/299919437", "html_url": "https://github.com/pytorch/pytorch/pull/1016#issuecomment-299919437", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/1016", "id": 299919437, "node_id": "MDEyOklzc3VlQ29tbWVudDI5OTkxOTQzNw==", "user": {"login": "lopezpaz", "id": 2237879, "node_id": "MDQ6VXNlcjIyMzc4Nzk=", "avatar_url": "https://avatars1.githubusercontent.com/u/2237879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lopezpaz", "html_url": "https://github.com/lopezpaz", "followers_url": "https://api.github.com/users/lopezpaz/followers", "following_url": "https://api.github.com/users/lopezpaz/following{/other_user}", "gists_url": "https://api.github.com/users/lopezpaz/gists{/gist_id}", "starred_url": "https://api.github.com/users/lopezpaz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lopezpaz/subscriptions", "organizations_url": "https://api.github.com/users/lopezpaz/orgs", "repos_url": "https://api.github.com/users/lopezpaz/repos", "events_url": "https://api.github.com/users/lopezpaz/events{/privacy}", "received_events_url": "https://api.github.com/users/lopezpaz/received_events", "type": "User", "site_admin": false}, "created_at": "2017-05-08T16:34:46Z", "updated_at": "2017-05-08T18:14:46Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=4583066\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/apaszke\">@apaszke</a> helped me code some minimal examples to compute second-order derivatives.</p>\n<p>Perhaps helpful to <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=7908951\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/HiiYL\">@HiiYL</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=7217256\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/mjdietzx\">@mjdietzx</a>:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">from</span> torch.autograd <span class=\"pl-k\">import</span> Variable, grad\n<span class=\"pl-k\">import</span> torch\n\nx <span class=\"pl-k\">=</span> Variable(torch.ones(<span class=\"pl-c1\">1</span>), <span class=\"pl-v\">requires_grad</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>)\ny <span class=\"pl-k\">=</span> x.pow(<span class=\"pl-c1\">3</span>)\n\ng <span class=\"pl-k\">=</span> grad(y, x, <span class=\"pl-v\">create_graph</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>)\n<span class=\"pl-c1\">print</span>(g) <span class=\"pl-c\"><span class=\"pl-c\">#</span> g = 3</span>\n\ng2 <span class=\"pl-k\">=</span> grad(g, x)\n<span class=\"pl-c1\">print</span>(g2) <span class=\"pl-c\"><span class=\"pl-c\">#</span> g2 = 6</span></pre></div>\n<p>To implement the gradient penalty in WGAN:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> torch\n<span class=\"pl-k\">from</span> torch.autograd <span class=\"pl-k\">import</span> Variable, grad\n\ntorch.manual_seed(<span class=\"pl-c1\">0</span>)\n\nnet <span class=\"pl-k\">=</span> torch.nn.Linear(<span class=\"pl-c1\">10</span>,<span class=\"pl-c1\">1</span>)\nmse <span class=\"pl-k\">=</span> torch.nn.MSELoss()\n\nx <span class=\"pl-k\">=</span> Variable(torch.randn(<span class=\"pl-c1\">128</span>, <span class=\"pl-c1\">10</span>), <span class=\"pl-v\">requires_grad</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>)\ny <span class=\"pl-k\">=</span> Variable(torch.randn(<span class=\"pl-c1\">128</span>, <span class=\"pl-c1\">1</span>))\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> your normal loss computation goes here</span>\nnet.zero_grad()\noutput <span class=\"pl-k\">=</span> net(x)\nloss <span class=\"pl-k\">=</span> mse(output, y)\ntorch.autograd.backward(loss, <span class=\"pl-v\">create_graph</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>)\nupdate1 <span class=\"pl-k\">=</span> net.weight.grad.data.clone()\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> gradient penalization (effectively, second order derivative)</span>\ngradient_penalty <span class=\"pl-k\">=</span> (grad(output.mean(), x, <span class=\"pl-v\">create_graph</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>)[<span class=\"pl-c1\">0</span>].norm() <span class=\"pl-k\">-</span> <span class=\"pl-c1\">1</span>).pow(<span class=\"pl-c1\">2</span>)\ngradient_penalty.backward() <span class=\"pl-c\"><span class=\"pl-c\">#</span> this will be added to the grads w.r.t. the loss</span>\nupdate2 <span class=\"pl-k\">=</span> net.weight.grad.data.clone()\n\n<span class=\"pl-c1\">print</span>(update1)\n<span class=\"pl-c1\">print</span>(update2)\n<span class=\"pl-c1\">print</span>((update1<span class=\"pl-k\">-</span>update2).norm())</pre></div>", "body_text": "@apaszke helped me code some minimal examples to compute second-order derivatives.\nPerhaps helpful to @HiiYL @mjdietzx:\nfrom torch.autograd import Variable, grad\nimport torch\n\nx = Variable(torch.ones(1), requires_grad=True)\ny = x.pow(3)\n\ng = grad(y, x, create_graph=True)\nprint(g) # g = 3\n\ng2 = grad(g, x)\nprint(g2) # g2 = 6\nTo implement the gradient penalty in WGAN:\nimport torch\nfrom torch.autograd import Variable, grad\n\ntorch.manual_seed(0)\n\nnet = torch.nn.Linear(10,1)\nmse = torch.nn.MSELoss()\n\nx = Variable(torch.randn(128, 10), requires_grad=True)\ny = Variable(torch.randn(128, 1))\n\n# your normal loss computation goes here\nnet.zero_grad()\noutput = net(x)\nloss = mse(output, y)\ntorch.autograd.backward(loss, create_graph=True)\nupdate1 = net.weight.grad.data.clone()\n\n# gradient penalization (effectively, second order derivative)\ngradient_penalty = (grad(output.mean(), x, create_graph=True)[0].norm() - 1).pow(2)\ngradient_penalty.backward() # this will be added to the grads w.r.t. the loss\nupdate2 = net.weight.grad.data.clone()\n\nprint(update1)\nprint(update2)\nprint((update1-update2).norm())", "body": "@apaszke helped me code some minimal examples to compute second-order derivatives.\r\n\r\nPerhaps helpful to @HiiYL @mjdietzx:\r\n\r\n```python\r\nfrom torch.autograd import Variable, grad\r\nimport torch\r\n\r\nx = Variable(torch.ones(1), requires_grad=True)\r\ny = x.pow(3)\r\n\r\ng = grad(y, x, create_graph=True)\r\nprint(g) # g = 3\r\n\r\ng2 = grad(g, x)\r\nprint(g2) # g2 = 6\r\n```\r\n\r\nTo implement the gradient penalty in WGAN:\r\n\r\n```python\r\nimport torch\r\nfrom torch.autograd import Variable, grad\r\n\r\ntorch.manual_seed(0)\r\n\r\nnet = torch.nn.Linear(10,1)\r\nmse = torch.nn.MSELoss()\r\n\r\nx = Variable(torch.randn(128, 10), requires_grad=True)\r\ny = Variable(torch.randn(128, 1))\r\n\r\n# your normal loss computation goes here\r\nnet.zero_grad()\r\noutput = net(x)\r\nloss = mse(output, y)\r\ntorch.autograd.backward(loss, create_graph=True)\r\nupdate1 = net.weight.grad.data.clone()\r\n\r\n# gradient penalization (effectively, second order derivative)\r\ngradient_penalty = (grad(output.mean(), x, create_graph=True)[0].norm() - 1).pow(2)\r\ngradient_penalty.backward() # this will be added to the grads w.r.t. the loss\r\nupdate2 = net.weight.grad.data.clone()\r\n\r\nprint(update1)\r\nprint(update2)\r\nprint((update1-update2).norm())\r\n```"}