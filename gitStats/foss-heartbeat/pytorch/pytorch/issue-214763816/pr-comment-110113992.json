{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/110113992", "pull_request_review_id": 31261132, "id": 110113992, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMDExMzk5Mg==", "diff_hunk": "@@ -65,7 +95,98 @@ auto PyFunction::apply(const variable_list& gradOutputs) -> variable_list {\n         msg += \"')'\";\n         throw std::runtime_error(msg);\n       }\n-      results[i] = std::make_shared<Variable>(createTensor(obj), false, true);\n+      tensor_results[i] = createTensor(obj);\n+    }\n+  }\n+\n+  return wrap_outputs(inputs, std::move(tensor_results), [this](FunctionFlags &&f) {\n+    return std::make_shared<Error>(name() + \" is not differentiable twice\", std::move(f));\n+  });\n+}\n+\n+// NOTE: this function is written in a way that assumes it's only called for backward\n+auto PyFunction::apply(const variable_list& inputs) -> variable_list {\n+  AutoGIL gil;\n+  AutoGPU _gpu_guard(-1);\n+  THPFunction* py_fn = (THPFunction*)obj;\n+\n+  THPObjectPtr _legacy = PyObject_GetAttrString(obj, \"_is_legacy\");\n+  if (_legacy == Py_True) {\n+    return legacy_apply(inputs);\n+  }\n+\n+  THPObjectPtr pyInputs = PyTuple_New(inputs.size());\n+  if (!pyInputs) throw python_error();\n+  auto num_inputs = inputs.size();\n+  auto& output_info = *py_fn->output_info;\n+  for (size_t i = 0; i < num_inputs; ++i) {\n+    PyObject* input;\n+    if (inputs[i]) {\n+      input = THPVariable_Wrap(inputs[i]);\n+    } else {\n+      THPObjectPtr tensor = _allocate_grad_output(output_info[i], _gpu_guard);\n+      input = THPVariable_NewLeaf(tensor);\n+    }\n+    if (!input) throw python_error();\n+    PyTuple_SET_ITEM(pyInputs.get(), i, input);\n+  }\n+\n+  // TODO: theoretically we could take a shortcut here and call apply directly\n+  THPObjectPtr apply_fn = PyObject_GetAttrString(obj, \"apply\");\n+  if (!apply_fn) throw python_error();\n+  THPObjectPtr r = PyObject_CallObject(apply_fn, pyInputs.get());\n+  if (!r) throw python_error();\n+  _ensure_tuple(r);\n+\n+  auto& is_variable_input = *py_fn->is_variable_input;\n+  int num_outputs = PyTuple_GET_SIZE(r.get());\n+  int num_forward_inputs = is_variable_input.size();\n+  // Returning too many results is ok, but only as long as they're all None\n+  if (num_outputs > num_forward_inputs) {\n+    bool all_none = true;\n+    for (int i = num_outputs; i < num_forward_inputs; i++) {", "path": "torch/csrc/autograd/python_function.cpp", "position": null, "original_position": 142, "commit_id": "fc48d2c1dd1d40fef3f8c727897eaac70d9bbd14", "original_commit_id": "bede03dfafc40978334d5564eb2e2d48483d437a", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "yeah it should \ud83d\ude15 ", "created_at": "2017-04-06T09:16:26Z", "updated_at": "2018-11-23T15:33:03Z", "html_url": "https://github.com/pytorch/pytorch/pull/1016#discussion_r110113992", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/1016", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/110113992"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/1016#discussion_r110113992"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/1016"}}, "body_html": "<p>yeah it should <g-emoji class=\"g-emoji\" alias=\"confused\" fallback-src=\"https://assets-cdn.github.com/images/icons/emoji/unicode/1f615.png\">\ud83d\ude15</g-emoji></p>", "body_text": "yeah it should \ud83d\ude15", "in_reply_to_id": 109789621}