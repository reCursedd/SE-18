{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/109788718", "pull_request_review_id": 30897355, "id": 109788718, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwOTc4ODcxOA==", "diff_hunk": "@@ -65,7 +95,98 @@ auto PyFunction::apply(const variable_list& gradOutputs) -> variable_list {\n         msg += \"')'\";\n         throw std::runtime_error(msg);\n       }\n-      results[i] = std::make_shared<Variable>(createTensor(obj), false, true);\n+      tensor_results[i] = createTensor(obj);\n+    }\n+  }\n+\n+  return wrap_outputs(inputs, std::move(tensor_results), [this](FunctionFlags &&f) {\n+    return std::make_shared<Error>(name() + \" is not differentiable twice\", std::move(f));\n+  });\n+}\n+\n+// NOTE: this function is written in a way that assumes it's only called for backward\n+auto PyFunction::apply(const variable_list& inputs) -> variable_list {\n+  AutoGIL gil;\n+  AutoGPU _gpu_guard(-1);\n+  THPFunction* py_fn = (THPFunction*)obj;\n+\n+  THPObjectPtr _legacy = PyObject_GetAttrString(obj, \"_is_legacy\");\n+  if (_legacy == Py_True) {\n+    return legacy_apply(inputs);\n+  }\n+\n+  THPObjectPtr pyInputs = PyTuple_New(inputs.size());\n+  if (!pyInputs) throw python_error();\n+  auto num_inputs = inputs.size();", "path": "torch/csrc/autograd/python_function.cpp", "position": null, "original_position": 115, "commit_id": "fc48d2c1dd1d40fef3f8c727897eaac70d9bbd14", "original_commit_id": "bede03dfafc40978334d5564eb2e2d48483d437a", "user": {"login": "albanD", "id": 6359743, "node_id": "MDQ6VXNlcjYzNTk3NDM=", "avatar_url": "https://avatars3.githubusercontent.com/u/6359743?v=4", "gravatar_id": "", "url": "https://api.github.com/users/albanD", "html_url": "https://github.com/albanD", "followers_url": "https://api.github.com/users/albanD/followers", "following_url": "https://api.github.com/users/albanD/following{/other_user}", "gists_url": "https://api.github.com/users/albanD/gists{/gist_id}", "starred_url": "https://api.github.com/users/albanD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/albanD/subscriptions", "organizations_url": "https://api.github.com/users/albanD/orgs", "repos_url": "https://api.github.com/users/albanD/repos", "events_url": "https://api.github.com/users/albanD/events{/privacy}", "received_events_url": "https://api.github.com/users/albanD/received_events", "type": "User", "site_admin": false}, "body": "Minor, this `num_inputs` could be used to create the tuple two lines above.", "created_at": "2017-04-04T22:01:22Z", "updated_at": "2018-11-23T15:33:01Z", "html_url": "https://github.com/pytorch/pytorch/pull/1016#discussion_r109788718", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/1016", "author_association": "COLLABORATOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/109788718"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/1016#discussion_r109788718"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/1016"}}, "body_html": "<p>Minor, this <code>num_inputs</code> could be used to create the tuple two lines above.</p>", "body_text": "Minor, this num_inputs could be used to create the tuple two lines above."}