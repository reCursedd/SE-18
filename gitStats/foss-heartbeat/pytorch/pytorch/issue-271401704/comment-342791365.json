{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/342791365", "html_url": "https://github.com/pytorch/pytorch/issues/3499#issuecomment-342791365", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/3499", "id": 342791365, "node_id": "MDEyOklzc3VlQ29tbWVudDM0Mjc5MTM2NQ==", "user": {"login": "dhpollack", "id": 368699, "node_id": "MDQ6VXNlcjM2ODY5OQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/368699?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dhpollack", "html_url": "https://github.com/dhpollack", "followers_url": "https://api.github.com/users/dhpollack/followers", "following_url": "https://api.github.com/users/dhpollack/following{/other_user}", "gists_url": "https://api.github.com/users/dhpollack/gists{/gist_id}", "starred_url": "https://api.github.com/users/dhpollack/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dhpollack/subscriptions", "organizations_url": "https://api.github.com/users/dhpollack/orgs", "repos_url": "https://api.github.com/users/dhpollack/repos", "events_url": "https://api.github.com/users/dhpollack/events{/privacy}", "received_events_url": "https://api.github.com/users/dhpollack/received_events", "type": "User", "site_admin": false}, "created_at": "2017-11-08T11:33:58Z", "updated_at": "2017-11-08T11:33:58Z", "author_association": "CONTRIBUTOR", "body_html": "<p>alright, this should do it.  You will get funny behavior if one were to add two sets of modules/parameters with the named_*() functions.  The items in the dict get overwritten because the submodules often have names that are integer strings.  To prevent modules from getting overwritten, I added an option to prefix the names with a string.</p>\n<pre><code>   model = torchvision.models.resnet18()\n   mlist = nn.ModuleList()\n   mlist.extend(model.layer3.named_modules(), \"layer3\")\n   mlist.extend(model.layer4.named_modules(), \"layer4\")\n</code></pre>\n<p>I also added the ability to reference the contents via an integer index or a string key value.</p>\n<p>finally, the <code>__repr__</code> shows a summary of the Parameter, but not a printout of the entire matrix.  This felt nicer than printing out the whole matrix especially if the ParameterList was long.</p>", "body_text": "alright, this should do it.  You will get funny behavior if one were to add two sets of modules/parameters with the named_*() functions.  The items in the dict get overwritten because the submodules often have names that are integer strings.  To prevent modules from getting overwritten, I added an option to prefix the names with a string.\n   model = torchvision.models.resnet18()\n   mlist = nn.ModuleList()\n   mlist.extend(model.layer3.named_modules(), \"layer3\")\n   mlist.extend(model.layer4.named_modules(), \"layer4\")\n\nI also added the ability to reference the contents via an integer index or a string key value.\nfinally, the __repr__ shows a summary of the Parameter, but not a printout of the entire matrix.  This felt nicer than printing out the whole matrix especially if the ParameterList was long.", "body": "alright, this should do it.  You will get funny behavior if one were to add two sets of modules/parameters with the named_*() functions.  The items in the dict get overwritten because the submodules often have names that are integer strings.  To prevent modules from getting overwritten, I added an option to prefix the names with a string.  \r\n\r\n       model = torchvision.models.resnet18()\r\n       mlist = nn.ModuleList()\r\n       mlist.extend(model.layer3.named_modules(), \"layer3\")\r\n       mlist.extend(model.layer4.named_modules(), \"layer4\")\r\n\r\nI also added the ability to reference the contents via an integer index or a string key value.  \r\n\r\nfinally, the `__repr__` shows a summary of the Parameter, but not a printout of the entire matrix.  This felt nicer than printing out the whole matrix especially if the ParameterList was long."}