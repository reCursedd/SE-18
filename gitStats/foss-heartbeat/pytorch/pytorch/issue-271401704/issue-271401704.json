{"url": "https://api.github.com/repos/pytorch/pytorch/issues/3499", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/3499/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/3499/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/3499/events", "html_url": "https://github.com/pytorch/pytorch/issues/3499", "id": 271401704, "node_id": "MDU6SXNzdWUyNzE0MDE3MDQ=", "number": 3499, "title": "ParameterList and ModuleList with named modules or parameters", "user": {"login": "dhpollack", "id": 368699, "node_id": "MDQ6VXNlcjM2ODY5OQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/368699?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dhpollack", "html_url": "https://github.com/dhpollack", "followers_url": "https://api.github.com/users/dhpollack/followers", "following_url": "https://api.github.com/users/dhpollack/following{/other_user}", "gists_url": "https://api.github.com/users/dhpollack/gists{/gist_id}", "starred_url": "https://api.github.com/users/dhpollack/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dhpollack/subscriptions", "organizations_url": "https://api.github.com/users/dhpollack/orgs", "repos_url": "https://api.github.com/users/dhpollack/repos", "events_url": "https://api.github.com/users/dhpollack/events{/privacy}", "received_events_url": "https://api.github.com/users/dhpollack/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-11-06T09:03:22Z", "updated_at": "2017-12-01T23:51:25Z", "closed_at": "2017-12-01T23:51:25Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Both ParameterList and ModuleList could be easily modified to allow for a tuple of named parameters/modules.  It would be nice to retain the name of the parameters/modules if they were used.</p>\n<p>Relating to this, I also thought it would be nice if both these lists accepted the generators produced by Module.modules(), Module.parameters(), Module.named_parameters(), Module.named_modules() as in input for the extend() function.  Thus one could do something like:</p>\n<pre><code>   model = torchvision.models.resnet18()\n   plist = nn.ParameterList()\n   plist.extend(model.layer4.parameters())\n   plist.extend(model.fc.parameters())\n   optimizer = optim.SGD(plist, lr = 0.1)\n</code></pre>\n<p>lastly, the ParameterList should have a different repr() function.  Currently it prints out a list of modules, which is always empty.  It should print out the Parameters or some sort of summary of the Parameters.</p>\n<p>I could throw together a pr pretty quickly for these issues.</p>\n<p>Of course, another idea would be to add a ParameterOrderedDict and ModuleOrderedDict as separate classes to work with the named_parameters/modules functions.  Also not very difficult but a little more work.</p>", "body_text": "Both ParameterList and ModuleList could be easily modified to allow for a tuple of named parameters/modules.  It would be nice to retain the name of the parameters/modules if they were used.\nRelating to this, I also thought it would be nice if both these lists accepted the generators produced by Module.modules(), Module.parameters(), Module.named_parameters(), Module.named_modules() as in input for the extend() function.  Thus one could do something like:\n   model = torchvision.models.resnet18()\n   plist = nn.ParameterList()\n   plist.extend(model.layer4.parameters())\n   plist.extend(model.fc.parameters())\n   optimizer = optim.SGD(plist, lr = 0.1)\n\nlastly, the ParameterList should have a different repr() function.  Currently it prints out a list of modules, which is always empty.  It should print out the Parameters or some sort of summary of the Parameters.\nI could throw together a pr pretty quickly for these issues.\nOf course, another idea would be to add a ParameterOrderedDict and ModuleOrderedDict as separate classes to work with the named_parameters/modules functions.  Also not very difficult but a little more work.", "body": "Both ParameterList and ModuleList could be easily modified to allow for a tuple of named parameters/modules.  It would be nice to retain the name of the parameters/modules if they were used.\r\n\r\nRelating to this, I also thought it would be nice if both these lists accepted the generators produced by Module.modules(), Module.parameters(), Module.named_parameters(), Module.named_modules() as in input for the extend() function.  Thus one could do something like:\r\n\r\n       model = torchvision.models.resnet18()\r\n       plist = nn.ParameterList()\r\n       plist.extend(model.layer4.parameters())\r\n       plist.extend(model.fc.parameters())\r\n       optimizer = optim.SGD(plist, lr = 0.1)\r\n\r\nlastly, the ParameterList should have a different repr() function.  Currently it prints out a list of modules, which is always empty.  It should print out the Parameters or some sort of summary of the Parameters.\r\n\r\nI could throw together a pr pretty quickly for these issues.\r\n\r\nOf course, another idea would be to add a ParameterOrderedDict and ModuleOrderedDict as separate classes to work with the named_parameters/modules functions.  Also not very difficult but a little more work.\r\n"}