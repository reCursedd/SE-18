{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/315918770", "html_url": "https://github.com/pytorch/pytorch/pull/2112#issuecomment-315918770", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/2112", "id": 315918770, "node_id": "MDEyOklzc3VlQ29tbWVudDMxNTkxODc3MA==", "user": {"login": "ngimel", "id": 15841449, "node_id": "MDQ6VXNlcjE1ODQxNDQ5", "avatar_url": "https://avatars3.githubusercontent.com/u/15841449?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ngimel", "html_url": "https://github.com/ngimel", "followers_url": "https://api.github.com/users/ngimel/followers", "following_url": "https://api.github.com/users/ngimel/following{/other_user}", "gists_url": "https://api.github.com/users/ngimel/gists{/gist_id}", "starred_url": "https://api.github.com/users/ngimel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ngimel/subscriptions", "organizations_url": "https://api.github.com/users/ngimel/orgs", "repos_url": "https://api.github.com/users/ngimel/repos", "events_url": "https://api.github.com/users/ngimel/events{/privacy}", "received_events_url": "https://api.github.com/users/ngimel/received_events", "type": "User", "site_admin": false}, "created_at": "2017-07-17T23:59:06Z", "updated_at": "2017-07-17T23:59:06Z", "author_association": "CONTRIBUTOR", "body_html": "<p>I must be missing something here, but why are we moving from using batch norm as a backend? The overhead in batch norm to keep running statistics should be small (at least as long as batch_size * num_channels &gt;&gt; feature_size), but everything is done in 1 kernel, which should be a big performance advantage over 1 kernel to calculate mean, a handful to calculate std and another handful to normalize. Using cunn backend might be better here than cudnn, since it does not care if batch_size is 1 (which it will be after reshaping), IIRC, cudnn will have noticeably worse perf with batch_size 1.</p>", "body_text": "I must be missing something here, but why are we moving from using batch norm as a backend? The overhead in batch norm to keep running statistics should be small (at least as long as batch_size * num_channels >> feature_size), but everything is done in 1 kernel, which should be a big performance advantage over 1 kernel to calculate mean, a handful to calculate std and another handful to normalize. Using cunn backend might be better here than cudnn, since it does not care if batch_size is 1 (which it will be after reshaping), IIRC, cudnn will have noticeably worse perf with batch_size 1.", "body": "I must be missing something here, but why are we moving from using batch norm as a backend? The overhead in batch norm to keep running statistics should be small (at least as long as batch_size * num_channels >> feature_size), but everything is done in 1 kernel, which should be a big performance advantage over 1 kernel to calculate mean, a handful to calculate std and another handful to normalize. Using cunn backend might be better here than cudnn, since it does not care if batch_size is 1 (which it will be after reshaping), IIRC, cudnn will have noticeably worse perf with batch_size 1. "}