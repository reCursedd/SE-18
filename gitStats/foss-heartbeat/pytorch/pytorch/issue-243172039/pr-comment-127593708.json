{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/127593708", "pull_request_review_id": 50198253, "id": 127593708, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzU5MzcwOA==", "diff_hunk": "@@ -36,29 +36,90 @@ def eval(self):\n         return self\n \n \n+class LayerNorm(_InstanceNorm):\n+    r\"\"\"Applies Layer Normalization over a 2D input that is seen\n+    as a mini-batch of 1D inputs.\n+\n+    .. math::\n+\n+        y = \\gamma * \\frac{x - \\mu_x}{\\sigma_x + \\epsilon} + \\beta\n+\n+    The mean and standard deviation are calculated per-dimension separately\n+    for each object in a mini-batch. Gamma and beta are learnable parameter\n+    vectors of size C (where C is the input size).\n+\n+    During training, this layer keeps a running estimate of its computed mean\n+    and variance. The running sum is kept with a default momentum of 0.1.\n+\n+    At evaluation time (`.eval()`), the default behaviour of the LayerNorm\n+    module stays the same, i.e. the running mean/variance is NOT used for\n+    normalization. One can force using the stored mean and variance with\n+    the `.train(False)` method.", "path": "torch/nn/modules/instancenorm.py", "position": null, "original_position": 22, "commit_id": "59a975026ba88985f56bea4a88012e02cd9409db", "original_commit_id": "c37529686a0be1e6526cea3094a96dad0510aebe", "user": {"login": "colesbury", "id": 655866, "node_id": "MDQ6VXNlcjY1NTg2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/655866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colesbury", "html_url": "https://github.com/colesbury", "followers_url": "https://api.github.com/users/colesbury/followers", "following_url": "https://api.github.com/users/colesbury/following{/other_user}", "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions", "organizations_url": "https://api.github.com/users/colesbury/orgs", "repos_url": "https://api.github.com/users/colesbury/repos", "events_url": "https://api.github.com/users/colesbury/events{/privacy}", "received_events_url": "https://api.github.com/users/colesbury/received_events", "type": "User", "site_admin": false}, "body": "How does this work? As far as I can tell, `eval()` just calls `train(False)`. I see that `_InstanceNorm` overrides `eval()`, but:\r\n\r\n1) eval() isn't called recursively. If you call `eval()` on a container, it'll call `train(False)` on it's children.\r\n2) `_InstanceNorm` doesn't appear to use `self.training` so I don't see how you can \"force\" using mean/var.", "created_at": "2017-07-15T21:48:15Z", "updated_at": "2018-11-23T15:34:08Z", "html_url": "https://github.com/pytorch/pytorch/pull/2112#discussion_r127593708", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/2112", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/127593708"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/2112#discussion_r127593708"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/2112"}}, "body_html": "<p>How does this work? As far as I can tell, <code>eval()</code> just calls <code>train(False)</code>. I see that <code>_InstanceNorm</code> overrides <code>eval()</code>, but:</p>\n<ol>\n<li>eval() isn't called recursively. If you call <code>eval()</code> on a container, it'll call <code>train(False)</code> on it's children.</li>\n<li><code>_InstanceNorm</code> doesn't appear to use <code>self.training</code> so I don't see how you can \"force\" using mean/var.</li>\n</ol>", "body_text": "How does this work? As far as I can tell, eval() just calls train(False). I see that _InstanceNorm overrides eval(), but:\n\neval() isn't called recursively. If you call eval() on a container, it'll call train(False) on it's children.\n_InstanceNorm doesn't appear to use self.training so I don't see how you can \"force\" using mean/var."}