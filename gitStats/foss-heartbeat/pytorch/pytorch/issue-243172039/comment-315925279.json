{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/315925279", "html_url": "https://github.com/pytorch/pytorch/pull/2112#issuecomment-315925279", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/2112", "id": 315925279, "node_id": "MDEyOklzc3VlQ29tbWVudDMxNTkyNTI3OQ==", "user": {"login": "ngimel", "id": 15841449, "node_id": "MDQ6VXNlcjE1ODQxNDQ5", "avatar_url": "https://avatars3.githubusercontent.com/u/15841449?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ngimel", "html_url": "https://github.com/ngimel", "followers_url": "https://api.github.com/users/ngimel/followers", "following_url": "https://api.github.com/users/ngimel/following{/other_user}", "gists_url": "https://api.github.com/users/ngimel/gists{/gist_id}", "starred_url": "https://api.github.com/users/ngimel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ngimel/subscriptions", "organizations_url": "https://api.github.com/users/ngimel/orgs", "repos_url": "https://api.github.com/users/ngimel/repos", "events_url": "https://api.github.com/users/ngimel/events{/privacy}", "received_events_url": "https://api.github.com/users/ngimel/received_events", "type": "User", "site_admin": false}, "created_at": "2017-07-18T00:44:20Z", "updated_at": "2017-07-18T00:44:20Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a href=\"https://github.com/pytorch/pytorch/blob/master/torch/nn/functional.py#L560-L563\">https://github.com/pytorch/pytorch/blob/master/torch/nn/functional.py#L560-L563</a> just links to autograd batchnorm, and there it's not too hard to not use cudnn if batch size == 1: <a href=\"https://github.com/pytorch/pytorch/blob/master/torch/csrc/autograd/functions/batch_normalization.cpp#L55-L58\">https://github.com/pytorch/pytorch/blob/master/torch/csrc/autograd/functions/batch_normalization.cpp#L55-L58</a>.<br>\nOops, had &lt;&lt; the wrong way, if batch_size*num_channels &lt;&lt; feature_size, overhead is small, the bigger num_channels and smaller feature_size, the bigger the overhead is (because the size of the running_vars would be batch_size * num_channels), so it is the upper layers of cnn that would suffer. Idk, the effort one might want to spend on it depends on whether it is a bottleneck or not, if it is, then modifying cunn's backend not to track running vars might be worth it.</p>", "body_text": "https://github.com/pytorch/pytorch/blob/master/torch/nn/functional.py#L560-L563 just links to autograd batchnorm, and there it's not too hard to not use cudnn if batch size == 1: https://github.com/pytorch/pytorch/blob/master/torch/csrc/autograd/functions/batch_normalization.cpp#L55-L58.\nOops, had << the wrong way, if batch_size*num_channels << feature_size, overhead is small, the bigger num_channels and smaller feature_size, the bigger the overhead is (because the size of the running_vars would be batch_size * num_channels), so it is the upper layers of cnn that would suffer. Idk, the effort one might want to spend on it depends on whether it is a bottleneck or not, if it is, then modifying cunn's backend not to track running vars might be worth it.", "body": "https://github.com/pytorch/pytorch/blob/master/torch/nn/functional.py#L560-L563 just links to autograd batchnorm, and there it's not too hard to not use cudnn if batch size == 1: https://github.com/pytorch/pytorch/blob/master/torch/csrc/autograd/functions/batch_normalization.cpp#L55-L58. \r\nOops, had << the wrong way, if batch_size*num_channels << feature_size, overhead is small, the bigger num_channels and smaller feature_size, the bigger the overhead is (because the size of the running_vars would be batch_size * num_channels), so it is the upper layers of cnn that would suffer. Idk, the effort one might want to spend on it depends on whether it is a bottleneck or not, if it is, then modifying cunn's backend not to track running vars might be worth it. "}