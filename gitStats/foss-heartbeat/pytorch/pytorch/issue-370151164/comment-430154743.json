{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/430154743", "html_url": "https://github.com/pytorch/pytorch/issues/12649#issuecomment-430154743", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/12649", "id": 430154743, "node_id": "MDEyOklzc3VlQ29tbWVudDQzMDE1NDc0Mw==", "user": {"login": "mhubii", "id": 26366414, "node_id": "MDQ6VXNlcjI2MzY2NDE0", "avatar_url": "https://avatars0.githubusercontent.com/u/26366414?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mhubii", "html_url": "https://github.com/mhubii", "followers_url": "https://api.github.com/users/mhubii/followers", "following_url": "https://api.github.com/users/mhubii/following{/other_user}", "gists_url": "https://api.github.com/users/mhubii/gists{/gist_id}", "starred_url": "https://api.github.com/users/mhubii/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mhubii/subscriptions", "organizations_url": "https://api.github.com/users/mhubii/orgs", "repos_url": "https://api.github.com/users/mhubii/repos", "events_url": "https://api.github.com/users/mhubii/events{/privacy}", "received_events_url": "https://api.github.com/users/mhubii/received_events", "type": "User", "site_admin": false}, "created_at": "2018-10-16T08:49:08Z", "updated_at": "2018-10-16T09:34:12Z", "author_association": "NONE", "body_html": "<p>Hi <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=6429851\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/goldsborough\">@goldsborough</a> and thanks for the response. Yes having a constructor to which you could pass all arguments was what I thought of. But I didn't understand that you could chain the functions, guess that is what <code>TORCH_ARG</code> implements. Is it for example supposed to be used like this:</p>\n<div class=\"highlight highlight-source-c++\"><pre>torch::nn::Conv2d <span class=\"pl-en\">conv</span>(<span class=\"pl-c\"><span class=\"pl-c\">/*</span>input_channels=<span class=\"pl-c\">*/</span></span><span class=\"pl-c1\">3</span>, <span class=\"pl-c\"><span class=\"pl-c\">/*</span>output_channels=<span class=\"pl-c\">*/</span></span><span class=\"pl-c1\">16</span>, <span class=\"pl-c\"><span class=\"pl-c\">/*</span>kernel_size=<span class=\"pl-c\">*/</span></span><span class=\"pl-c1\">5</span>);\nconv-&gt;options.stride(<span class=\"pl-c1\">2</span>).padding(<span class=\"pl-c1\">2</span>); <span class=\"pl-c\"><span class=\"pl-c\">//</span> And possibly other settings.</span></pre></div>\n<p>This is actually quite handy. Having a constructor that always takes all arguments or <code>n</code> constructors would indeed mess it up a little.</p>\n<p>Thank you guys for doing this great work. Keep it up!</p>", "body_text": "Hi @goldsborough and thanks for the response. Yes having a constructor to which you could pass all arguments was what I thought of. But I didn't understand that you could chain the functions, guess that is what TORCH_ARG implements. Is it for example supposed to be used like this:\ntorch::nn::Conv2d conv(/*input_channels=*/3, /*output_channels=*/16, /*kernel_size=*/5);\nconv->options.stride(2).padding(2); // And possibly other settings.\nThis is actually quite handy. Having a constructor that always takes all arguments or n constructors would indeed mess it up a little.\nThank you guys for doing this great work. Keep it up!", "body": "Hi @goldsborough and thanks for the response. Yes having a constructor to which you could pass all arguments was what I thought of. But I didn't understand that you could chain the functions, guess that is what `TORCH_ARG` implements. Is it for example supposed to be used like this:\r\n```cpp\r\ntorch::nn::Conv2d conv(/*input_channels=*/3, /*output_channels=*/16, /*kernel_size=*/5);\r\nconv->options.stride(2).padding(2); // And possibly other settings.\r\n```\r\nThis is actually quite handy. Having a constructor that always takes all arguments or `n` constructors would indeed mess it up a little.\r\n\r\nThank you guys for doing this great work. Keep it up!"}