{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/429925057", "html_url": "https://github.com/pytorch/pytorch/issues/12649#issuecomment-429925057", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/12649", "id": 429925057, "node_id": "MDEyOklzc3VlQ29tbWVudDQyOTkyNTA1Nw==", "user": {"login": "goldsborough", "id": 6429851, "node_id": "MDQ6VXNlcjY0Mjk4NTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/6429851?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goldsborough", "html_url": "https://github.com/goldsborough", "followers_url": "https://api.github.com/users/goldsborough/followers", "following_url": "https://api.github.com/users/goldsborough/following{/other_user}", "gists_url": "https://api.github.com/users/goldsborough/gists{/gist_id}", "starred_url": "https://api.github.com/users/goldsborough/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goldsborough/subscriptions", "organizations_url": "https://api.github.com/users/goldsborough/orgs", "repos_url": "https://api.github.com/users/goldsborough/repos", "events_url": "https://api.github.com/users/goldsborough/events{/privacy}", "received_events_url": "https://api.github.com/users/goldsborough/received_events", "type": "User", "site_admin": false}, "created_at": "2018-10-15T16:36:34Z", "updated_at": "2018-10-15T16:36:34Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=26366414\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/mhubii\">@mhubii</a> is this because you'd like to pass them all at once instead of using the chaining functions?</p>\n<p>Our design for these options was kind of centered around avoiding that, because it leads to long argument lists which are generally hard to read, so we wanted to have more of a keyword argument approach like in Python. I guess we could have constructors for all <code>Options</code> that also accept all arguments. But then I think we'd make that constructor take <em>all</em> arguments that the <code>Options</code> has (otherwise we need <code>n</code> constructors for <code>n</code> options, where each constructor adds one more option), and that may be cumbersome too.</p>\n<p>Happy to hear your thoughts about this <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=26366414\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/mhubii\">@mhubii</a></p>", "body_text": "@mhubii is this because you'd like to pass them all at once instead of using the chaining functions?\nOur design for these options was kind of centered around avoiding that, because it leads to long argument lists which are generally hard to read, so we wanted to have more of a keyword argument approach like in Python. I guess we could have constructors for all Options that also accept all arguments. But then I think we'd make that constructor take all arguments that the Options has (otherwise we need n constructors for n options, where each constructor adds one more option), and that may be cumbersome too.\nHappy to hear your thoughts about this @mhubii", "body": "@mhubii is this because you'd like to pass them all at once instead of using the chaining functions? \r\n\r\nOur design for these options was kind of centered around avoiding that, because it leads to long argument lists which are generally hard to read, so we wanted to have more of a keyword argument approach like in Python. I guess we could have constructors for all `Options` that also accept all arguments. But then I think we'd make that constructor take *all* arguments that the `Options` has (otherwise we need `n` constructors for `n` options, where each constructor adds one more option), and that may be cumbersome too.\r\n\r\nHappy to hear your thoughts about this @mhubii "}