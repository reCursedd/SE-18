{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/140596580", "pull_request_review_id": 64699210, "id": 140596580, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0MDU5NjU4MA==", "diff_hunk": "@@ -0,0 +1,145 @@\n+#include \"torch/csrc/jit/ir.h\"\n+\n+#include <algorithm>\n+#include <unordered_map>\n+\n+#include \"torch/csrc/jit/interned_strings.h\"\n+#include \"torch/csrc/jit/passes/common_subexpression_elimination.h\"\n+\n+namespace torch { namespace jit {\n+\n+\n+\n+// Check whether two nodes have the same attributes in CSE.\n+// This function may be too conservative for general use.\n+// Do NOT support t/ts/g/gs attributes.\n+// If t/ts are supported, CONSTANT node comparison may need to consider device.\n+bool attributesEqualCSE(const Node* lhs, const Node* rhs) {\n+  JIT_ASSERT(lhs != nullptr);\n+  JIT_ASSERT(rhs != nullptr);\n+  // One has attributes, the other does not.\n+  if (lhs->hasAttributes() != rhs->hasAttributes()) return false;\n+  // Neither has attributes.\n+  if (!lhs->hasAttributes() && !rhs->hasAttributes()) return true;\n+\n+  auto lnames = lhs->attributeNames();\n+  auto rnames = rhs->attributeNames();\n+  if (lnames != rnames) return false;\n+\n+  Node* l = const_cast<Node*>(lhs);\n+  Node* r = const_cast<Node*>(rhs);\n+  for (auto name : lnames) {\n+    if (l->kindOf(name) != r->kindOf(name)) return false;\n+\n+    #define COMPARE_ATTRIBUTEVALUE(type) \\\n+      case AttributeKind::type: \\\n+        { if (l->type(name) != r->type(name)) return false; } break;\n+\n+    switch(l->kindOf(name)) {\n+      COMPARE_ATTRIBUTEVALUE(f)\n+      COMPARE_ATTRIBUTEVALUE(fs)\n+      COMPARE_ATTRIBUTEVALUE(i)\n+      COMPARE_ATTRIBUTEVALUE(is)\n+      COMPARE_ATTRIBUTEVALUE(s)\n+      COMPARE_ATTRIBUTEVALUE(ss)", "path": "torch/csrc/jit/passes/common_subexpression_elimination.cpp", "position": 44, "original_position": 44, "commit_id": "45ff0057504132b5ebe1b5e46e0b1c618fe8e8c1", "original_commit_id": "45ff0057504132b5ebe1b5e46e0b1c618fe8e8c1", "user": {"login": "houseroad", "id": 30275821, "node_id": "MDQ6VXNlcjMwMjc1ODIx", "avatar_url": "https://avatars0.githubusercontent.com/u/30275821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/houseroad", "html_url": "https://github.com/houseroad", "followers_url": "https://api.github.com/users/houseroad/followers", "following_url": "https://api.github.com/users/houseroad/following{/other_user}", "gists_url": "https://api.github.com/users/houseroad/gists{/gist_id}", "starred_url": "https://api.github.com/users/houseroad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/houseroad/subscriptions", "organizations_url": "https://api.github.com/users/houseroad/orgs", "repos_url": "https://api.github.com/users/houseroad/repos", "events_url": "https://api.github.com/users/houseroad/events{/privacy}", "received_events_url": "https://api.github.com/users/houseroad/received_events", "type": "User", "site_admin": false}, "body": "Add a comment.", "created_at": "2017-09-22T21:05:31Z", "updated_at": "2018-11-23T15:34:45Z", "html_url": "https://github.com/pytorch/pytorch/pull/2834#discussion_r140596580", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/2834", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/140596580"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/2834#discussion_r140596580"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/2834"}}, "body_html": "<p>Add a comment.</p>", "body_text": "Add a comment.", "in_reply_to_id": 140562955}