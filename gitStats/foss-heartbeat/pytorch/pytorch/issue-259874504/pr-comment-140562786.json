{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/140562786", "pull_request_review_id": 64659624, "id": 140562786, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0MDU2Mjc4Ng==", "diff_hunk": "@@ -0,0 +1,145 @@\n+#include \"torch/csrc/jit/ir.h\"\n+\n+#include <algorithm>\n+#include <unordered_map>\n+\n+#include \"torch/csrc/jit/interned_strings.h\"\n+#include \"torch/csrc/jit/passes/common_subexpression_elimination.h\"\n+\n+namespace torch { namespace jit {\n+\n+\n+\n+// Check whether two nodes have the same attributes in CSE.\n+// This function may be too conservative for general use.\n+// Do NOT support t/ts/g/gs attributes.\n+// If t/ts are supported, CONSTANT node comparison may need to consider device.\n+bool attributesEqualCSE(const Node* lhs, const Node* rhs) {\n+  JIT_ASSERT(lhs != nullptr);\n+  JIT_ASSERT(rhs != nullptr);\n+  // One has attributes, the other does not.\n+  if (lhs->hasAttributes() != rhs->hasAttributes()) return false;\n+  // Neither has attributes.\n+  if (!lhs->hasAttributes() && !rhs->hasAttributes()) return true;\n+\n+  auto lnames = lhs->attributeNames();\n+  auto rnames = rhs->attributeNames();\n+  if (lnames != rnames) return false;\n+\n+  Node* l = const_cast<Node*>(lhs);\n+  Node* r = const_cast<Node*>(rhs);\n+  for (auto name : lnames) {\n+    if (l->kindOf(name) != r->kindOf(name)) return false;\n+\n+    #define COMPARE_ATTRIBUTEVALUE(type) \\\n+      case AttributeKind::type: \\\n+        { if (l->type(name) != r->type(name)) return false; } break;\n+\n+    switch(l->kindOf(name)) {\n+      COMPARE_ATTRIBUTEVALUE(f)\n+      COMPARE_ATTRIBUTEVALUE(fs)\n+      COMPARE_ATTRIBUTEVALUE(i)\n+      COMPARE_ATTRIBUTEVALUE(is)\n+      COMPARE_ATTRIBUTEVALUE(s)\n+      COMPARE_ATTRIBUTEVALUE(ss)\n+      default:\n+        return false;\n+    }\n+\n+    #undef COMPARE_ATTRIBUTEVALUE\n+  }\n+\n+  return true;\n+}\n+\n+// Later, if someone wants to reuse this, it can be moved to some header files.\n+inline void hash_combine(size_t& seed, size_t value) {\n+  seed ^= value + 0x9e3779b9 + (seed << 6) + (seed >> 2);\n+}\n+\n+struct HashNodeCSE {\n+  size_t operator()(const Node* k) const {\n+    JIT_ASSERT(k != nullptr);\n+    size_t seed = 0;\n+    hash_combine(seed, k->kind());\n+    hash_combine(seed, k->stage());\n+    for (auto i : k->inputs()) {\n+      hash_combine(seed, i->unique());\n+    }\n+    return seed;\n+  }\n+};\n+\n+struct EqualNodeCSE {\n+  bool operator()(const Node* lhs, const Node* rhs) const {\n+    if (lhs == nullptr && rhs == nullptr) return true;\n+    if (lhs == nullptr || rhs == nullptr) return false;\n+\n+    // Check whether two nodes are the same kind.\n+    if (lhs->kind() != rhs->kind()) return false;\n+\n+    // Check the stage.\n+    if (lhs->stage() != rhs->stage()) return false;\n+\n+    // Check whether the inputs are the same.\n+    if (lhs->inputs().size() != rhs->inputs().size()) return false;\n+\n+    if (!std::equal(lhs->inputs().begin(), lhs->inputs().end(), rhs->inputs().begin())) return false;\n+\n+    // Check the attributes.\n+    if (!attributesEqualCSE(lhs, rhs)) return false;\n+\n+    return true;\n+  }\n+};\n+\n+// The function implements common subexpression elimination.\n+// Since the nodes are visited in topological order, one pass is enough.\n+void EliminateCommonSubexpression(std::shared_ptr<Graph>& graph) {\n+  auto nodes = graph->nodes();\n+  std::unordered_set<Node*, HashNodeCSE, EqualNodeCSE> subexprs;\n+  for (auto it = nodes.begin(); it != nodes.end(); ++ it) {\n+    auto node = *it;\n+    if (node->kind() == kPythonOp\n+        || node->kind() == kCppOp\n+        || node->kind() == kEval\n+        || node->kind() == kUndefined", "path": "torch/csrc/jit/passes/common_subexpression_elimination.cpp", "position": 106, "original_position": 106, "commit_id": "45ff0057504132b5ebe1b5e46e0b1c618fe8e8c1", "original_commit_id": "45ff0057504132b5ebe1b5e46e0b1c618fe8e8c1", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "I think, technically, Undefined nodes should be OK, because they actually just correspond to \"None\" inputs (i.e. null variables, i.e., undefined ATen tensors.)", "created_at": "2017-09-22T18:18:49Z", "updated_at": "2018-11-23T15:34:44Z", "html_url": "https://github.com/pytorch/pytorch/pull/2834#discussion_r140562786", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/2834", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/140562786"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/2834#discussion_r140562786"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/2834"}}, "body_html": "<p>I think, technically, Undefined nodes should be OK, because they actually just correspond to \"None\" inputs (i.e. null variables, i.e., undefined ATen tensors.)</p>", "body_text": "I think, technically, Undefined nodes should be OK, because they actually just correspond to \"None\" inputs (i.e. null variables, i.e., undefined ATen tensors.)"}