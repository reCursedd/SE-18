{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/389499622", "html_url": "https://github.com/pytorch/pytorch/issues/7580#issuecomment-389499622", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/7580", "id": 389499622, "node_id": "MDEyOklzc3VlQ29tbWVudDM4OTQ5OTYyMg==", "user": {"login": "fmassa", "id": 9110200, "node_id": "MDQ6VXNlcjkxMTAyMDA=", "avatar_url": "https://avatars2.githubusercontent.com/u/9110200?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fmassa", "html_url": "https://github.com/fmassa", "followers_url": "https://api.github.com/users/fmassa/followers", "following_url": "https://api.github.com/users/fmassa/following{/other_user}", "gists_url": "https://api.github.com/users/fmassa/gists{/gist_id}", "starred_url": "https://api.github.com/users/fmassa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fmassa/subscriptions", "organizations_url": "https://api.github.com/users/fmassa/orgs", "repos_url": "https://api.github.com/users/fmassa/repos", "events_url": "https://api.github.com/users/fmassa/events{/privacy}", "received_events_url": "https://api.github.com/users/fmassa/received_events", "type": "User", "site_admin": false}, "created_at": "2018-05-16T12:24:45Z", "updated_at": "2018-05-16T12:24:45Z", "author_association": "MEMBER", "body_html": "<p>One positive point of the implementation that I presented is that the only point which is N^2 in memory is in <code>randperm</code>, but we could easily extend the interface to follow numpy and let it only return the first <code>k</code> elements of a permutation of <code>n</code> elements.<br>\nBut if we want the whole cartesian product, then we indeed end up using a lot of memory.</p>", "body_text": "One positive point of the implementation that I presented is that the only point which is N^2 in memory is in randperm, but we could easily extend the interface to follow numpy and let it only return the first k elements of a permutation of n elements.\nBut if we want the whole cartesian product, then we indeed end up using a lot of memory.", "body": "One positive point of the implementation that I presented is that the only point which is N^2 in memory is in `randperm`, but we could easily extend the interface to follow numpy and let it only return the first `k` elements of a permutation of `n` elements.\r\nBut if we want the whole cartesian product, then we indeed end up using a lot of memory."}