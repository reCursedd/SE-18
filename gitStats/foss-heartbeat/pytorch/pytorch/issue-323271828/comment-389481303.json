{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/389481303", "html_url": "https://github.com/pytorch/pytorch/issues/7580#issuecomment-389481303", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/7580", "id": 389481303, "node_id": "MDEyOklzc3VlQ29tbWVudDM4OTQ4MTMwMw==", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "created_at": "2018-05-16T11:08:08Z", "updated_at": "2018-05-16T11:08:08Z", "author_association": "MEMBER", "body_html": "<p>I don't mind adding those too much, but I'm not sure how useful they are. Cartesian products, combinations generally cause a significant blow up in object sizes, and considering that every element has already been an array, it will be super easy to cause an OOM error because of that. It seems better to me to lazily create those elements (possibly batch them) and process them in this order.</p>\n<p>What's more, we won't get any specialized kernels for them, because they're generally implementing using 2-4 indexing ops, so that would be an overkill (it's basically a strided copy). That would be a lot of work for a tiny speedup.</p>", "body_text": "I don't mind adding those too much, but I'm not sure how useful they are. Cartesian products, combinations generally cause a significant blow up in object sizes, and considering that every element has already been an array, it will be super easy to cause an OOM error because of that. It seems better to me to lazily create those elements (possibly batch them) and process them in this order.\nWhat's more, we won't get any specialized kernels for them, because they're generally implementing using 2-4 indexing ops, so that would be an overkill (it's basically a strided copy). That would be a lot of work for a tiny speedup.", "body": "I don't mind adding those too much, but I'm not sure how useful they are. Cartesian products, combinations generally cause a significant blow up in object sizes, and considering that every element has already been an array, it will be super easy to cause an OOM error because of that. It seems better to me to lazily create those elements (possibly batch them) and process them in this order.\r\n\r\nWhat's more, we won't get any specialized kernels for them, because they're generally implementing using 2-4 indexing ops, so that would be an overkill (it's basically a strided copy). That would be a lot of work for a tiny speedup."}