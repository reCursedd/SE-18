{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/389633813", "html_url": "https://github.com/pytorch/pytorch/issues/7580#issuecomment-389633813", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/7580", "id": 389633813, "node_id": "MDEyOklzc3VlQ29tbWVudDM4OTYzMzgxMw==", "user": {"login": "zasdfgbnm", "id": 1032377, "node_id": "MDQ6VXNlcjEwMzIzNzc=", "avatar_url": "https://avatars2.githubusercontent.com/u/1032377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zasdfgbnm", "html_url": "https://github.com/zasdfgbnm", "followers_url": "https://api.github.com/users/zasdfgbnm/followers", "following_url": "https://api.github.com/users/zasdfgbnm/following{/other_user}", "gists_url": "https://api.github.com/users/zasdfgbnm/gists{/gist_id}", "starred_url": "https://api.github.com/users/zasdfgbnm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zasdfgbnm/subscriptions", "organizations_url": "https://api.github.com/users/zasdfgbnm/orgs", "repos_url": "https://api.github.com/users/zasdfgbnm/repos", "events_url": "https://api.github.com/users/zasdfgbnm/events{/privacy}", "received_events_url": "https://api.github.com/users/zasdfgbnm/received_events", "type": "User", "site_admin": false}, "created_at": "2018-05-16T19:14:46Z", "updated_at": "2018-05-16T19:30:08Z", "author_association": "CONTRIBUTOR", "body_html": "<p>If you would like meshgrid to appear in ATen, I'm more than happy to add that. Because it is kind of a standard operator (it appears in matlab, numpy, tensorflow, etc.) and supporting it definitely make it easier for users.</p>\n<p>And, I just think of a way to create an index for <code>combination_range</code>, and <code>combination_range_with_replacement</code> without using repeat. Using <a href=\"https://discuss.pytorch.org/t/upper-triangular-matrix-vectorization/7040/4\" rel=\"nofollow\">the method of vectorizing upper triangles of a matrix as discuss in the forum</a>.</p>\n<p>Basically, <code>[0,0,0,1,1,2]</code> is the upper triangle (including diagonal) of</p>\n<pre><code>[[ 0, 0, 0],\n [ 1, 1, 1],\n [ 2, 2, 2]]\n</code></pre>\n<p>And <code>[0,1,2,1,2,2]</code> is the upper triangle (including diagonal) of:</p>\n<pre><code>[[ 0, 1, 2],\n [ 0, 1, 2],\n [ 0, 1, 2]]\n</code></pre>\n<p>Again, an application of meshgrid.</p>\n<p>And yes, I do agree with your statement:</p>\n<blockquote>\n<p>I'm not seeing many use-cases of repeat that couldn't be achieved with advanced indexing (even though creating the indices would be slightly tricky, but doable without issues in python)</p>\n</blockquote>\n<p>Even though advanced indexing is powerful, creating the indices is highly non-trivial for applications.<br>\nI would consider <code>combination_range</code>, and <code>combination_range_with_replacement</code> as two examples of this difficulty. And as a general tool, it would be helpful to add function to create indices based on applications simply for the ease of use, even though some of these functions can be easily implemented by some trick. What <code>combination_range</code>, and <code>combination_range_with_replacement</code> trying to do is to provide a simple way of creating things like that.</p>", "body_text": "If you would like meshgrid to appear in ATen, I'm more than happy to add that. Because it is kind of a standard operator (it appears in matlab, numpy, tensorflow, etc.) and supporting it definitely make it easier for users.\nAnd, I just think of a way to create an index for combination_range, and combination_range_with_replacement without using repeat. Using the method of vectorizing upper triangles of a matrix as discuss in the forum.\nBasically, [0,0,0,1,1,2] is the upper triangle (including diagonal) of\n[[ 0, 0, 0],\n [ 1, 1, 1],\n [ 2, 2, 2]]\n\nAnd [0,1,2,1,2,2] is the upper triangle (including diagonal) of:\n[[ 0, 1, 2],\n [ 0, 1, 2],\n [ 0, 1, 2]]\n\nAgain, an application of meshgrid.\nAnd yes, I do agree with your statement:\n\nI'm not seeing many use-cases of repeat that couldn't be achieved with advanced indexing (even though creating the indices would be slightly tricky, but doable without issues in python)\n\nEven though advanced indexing is powerful, creating the indices is highly non-trivial for applications.\nI would consider combination_range, and combination_range_with_replacement as two examples of this difficulty. And as a general tool, it would be helpful to add function to create indices based on applications simply for the ease of use, even though some of these functions can be easily implemented by some trick. What combination_range, and combination_range_with_replacement trying to do is to provide a simple way of creating things like that.", "body": "If you would like meshgrid to appear in ATen, I'm more than happy to add that. Because it is kind of a standard operator (it appears in matlab, numpy, tensorflow, etc.) and supporting it definitely make it easier for users.\r\n\r\nAnd, I just think of a way to create an index for `combination_range`, and `combination_range_with_replacement` without using repeat. Using [the method of vectorizing upper triangles of a matrix as discuss in the forum](https://discuss.pytorch.org/t/upper-triangular-matrix-vectorization/7040/4).\r\n\r\nBasically, `[0,0,0,1,1,2]` is the upper triangle (including diagonal) of\r\n```\r\n[[ 0, 0, 0],\r\n [ 1, 1, 1],\r\n [ 2, 2, 2]]\r\n```\r\nAnd `[0,1,2,1,2,2]` is the upper triangle (including diagonal) of:\r\n```\r\n[[ 0, 1, 2],\r\n [ 0, 1, 2],\r\n [ 0, 1, 2]]\r\n```\r\nAgain, an application of meshgrid.\r\n\r\nAnd yes, I do agree with your statement:\r\n\r\n> I'm not seeing many use-cases of repeat that couldn't be achieved with advanced indexing (even though creating the indices would be slightly tricky, but doable without issues in python)\r\n\r\nEven though advanced indexing is powerful, creating the indices is highly non-trivial for applications. \r\nI would consider `combination_range`, and `combination_range_with_replacement` as two examples of this difficulty. And as a general tool, it would be helpful to add function to create indices based on applications simply for the ease of use, even though some of these functions can be easily implemented by some trick. What `combination_range`, and `combination_range_with_replacement` trying to do is to provide a simple way of creating things like that."}