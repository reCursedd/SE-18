{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/389567394", "html_url": "https://github.com/pytorch/pytorch/issues/7580#issuecomment-389567394", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/7580", "id": 389567394, "node_id": "MDEyOklzc3VlQ29tbWVudDM4OTU2NzM5NA==", "user": {"login": "zasdfgbnm", "id": 1032377, "node_id": "MDQ6VXNlcjEwMzIzNzc=", "avatar_url": "https://avatars2.githubusercontent.com/u/1032377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zasdfgbnm", "html_url": "https://github.com/zasdfgbnm", "followers_url": "https://api.github.com/users/zasdfgbnm/followers", "following_url": "https://api.github.com/users/zasdfgbnm/following{/other_user}", "gists_url": "https://api.github.com/users/zasdfgbnm/gists{/gist_id}", "starred_url": "https://api.github.com/users/zasdfgbnm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zasdfgbnm/subscriptions", "organizations_url": "https://api.github.com/users/zasdfgbnm/orgs", "repos_url": "https://api.github.com/users/zasdfgbnm/repos", "events_url": "https://api.github.com/users/zasdfgbnm/events{/privacy}", "received_events_url": "https://api.github.com/users/zasdfgbnm/received_events", "type": "User", "site_admin": false}, "created_at": "2018-05-16T15:45:18Z", "updated_at": "2018-05-16T15:51:57Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=9110200\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/fmassa\">@fmassa</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=4583066\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/apaszke\">@apaszke</a> I think maybe we can implement something like:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> torch.cartesian_range(<span class=\"pl-c1\">3</span>, <span class=\"pl-c1\">2</span>)\ntensor([[ <span class=\"pl-c1\">0</span>,  <span class=\"pl-c1\">0</span>,  <span class=\"pl-c1\">1</span>,  <span class=\"pl-c1\">1</span>,  <span class=\"pl-c1\">2</span>,  <span class=\"pl-c1\">2</span>],\n        [ <span class=\"pl-c1\">0</span>,  <span class=\"pl-c1\">1</span>,  <span class=\"pl-c1\">0</span>,  <span class=\"pl-c1\">1</span>,  <span class=\"pl-c1\">0</span>,  <span class=\"pl-c1\">1</span>]])\n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> torch.combination_range(<span class=\"pl-c1\">3</span>)\ntensor([[ <span class=\"pl-c1\">0</span>,  <span class=\"pl-c1\">0</span>,  <span class=\"pl-c1\">1</span>],\n        [ <span class=\"pl-c1\">1</span>,  <span class=\"pl-c1\">2</span>,  <span class=\"pl-c1\">2</span>]])\n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> torch.combination_range_with_replacement(<span class=\"pl-c1\">3</span>)\ntensor([[ <span class=\"pl-c1\">0</span>,  <span class=\"pl-c1\">0</span>,  <span class=\"pl-c1\">0</span>,  <span class=\"pl-c1\">1</span>,  <span class=\"pl-c1\">1</span>,  <span class=\"pl-c1\">2</span>],\n        [ <span class=\"pl-c1\">0</span>,  <span class=\"pl-c1\">1</span>,  <span class=\"pl-c1\">2</span>,  <span class=\"pl-c1\">1</span>,  <span class=\"pl-c1\">2</span>,  <span class=\"pl-c1\">2</span>]])</pre></div>\n<p>Then the full product can easily be implemented using <code>index_select</code></p>", "body_text": "@fmassa @apaszke I think maybe we can implement something like:\n>>> torch.cartesian_range(3, 2)\ntensor([[ 0,  0,  1,  1,  2,  2],\n        [ 0,  1,  0,  1,  0,  1]])\n>>> torch.combination_range(3)\ntensor([[ 0,  0,  1],\n        [ 1,  2,  2]])\n>>> torch.combination_range_with_replacement(3)\ntensor([[ 0,  0,  0,  1,  1,  2],\n        [ 0,  1,  2,  1,  2,  2]])\nThen the full product can easily be implemented using index_select", "body": "@fmassa @apaszke I think maybe we can implement something like:\r\n```python\r\n>>> torch.cartesian_range(3, 2)\r\ntensor([[ 0,  0,  1,  1,  2,  2],\r\n        [ 0,  1,  0,  1,  0,  1]])\r\n>>> torch.combination_range(3)\r\ntensor([[ 0,  0,  1],\r\n        [ 1,  2,  2]])\r\n>>> torch.combination_range_with_replacement(3)\r\ntensor([[ 0,  0,  0,  1,  1,  2],\r\n        [ 0,  1,  2,  1,  2,  2]])\r\n```\r\nThen the full product can easily be implemented using `index_select`"}