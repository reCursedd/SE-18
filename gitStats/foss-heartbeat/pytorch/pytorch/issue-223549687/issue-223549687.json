{"url": "https://api.github.com/repos/pytorch/pytorch/issues/1331", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/1331/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/1331/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/1331/events", "html_url": "https://github.com/pytorch/pytorch/issues/1331", "id": 223549687, "node_id": "MDU6SXNzdWUyMjM1NDk2ODc=", "number": 1331, "title": "add nn.CenterCrop1d and nn.CenterCrop2d", "user": {"login": "bodokaiser", "id": 1780466, "node_id": "MDQ6VXNlcjE3ODA0NjY=", "avatar_url": "https://avatars0.githubusercontent.com/u/1780466?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bodokaiser", "html_url": "https://github.com/bodokaiser", "followers_url": "https://api.github.com/users/bodokaiser/followers", "following_url": "https://api.github.com/users/bodokaiser/following{/other_user}", "gists_url": "https://api.github.com/users/bodokaiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/bodokaiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bodokaiser/subscriptions", "organizations_url": "https://api.github.com/users/bodokaiser/orgs", "repos_url": "https://api.github.com/users/bodokaiser/repos", "events_url": "https://api.github.com/users/bodokaiser/events{/privacy}", "received_events_url": "https://api.github.com/users/bodokaiser/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 424131849, "node_id": "MDU6TGFiZWw0MjQxMzE4NDk=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true}, {"id": 443484050, "node_id": "MDU6TGFiZWw0NDM0ODQwNTA=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/medium%20priority", "name": "medium priority", "color": "fbca04", "default": false}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2017-04-22T08:26:58Z", "updated_at": "2017-04-25T13:28:42Z", "closed_at": null, "author_association": "NONE", "body_html": "<p>There are some models which use \"crop layers\" (e.g. <a href=\"https://arxiv.org/abs/1505.04597\" rel=\"nofollow\">U-Net</a>, <a href=\"https://arxiv.org/abs/1506.04579\" rel=\"nofollow\">ParseNet</a>) so I think it wouldn't be bad to have a <code>CenterCropNd</code> layer.</p>\n<p>As <code>F.pad</code> supports negative padding we just need to calculate padding offsets on top.</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> torch\n\n<span class=\"pl-k\">from</span> torch.nn <span class=\"pl-k\">import</span> functional <span class=\"pl-k\">as</span> F\n<span class=\"pl-k\">from</span> torch.autograd <span class=\"pl-k\">import</span> Variable\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">center_crop</span>(<span class=\"pl-smi\">x</span>, <span class=\"pl-smi\">height</span>, <span class=\"pl-smi\">width</span>):\n    crop_h <span class=\"pl-k\">=</span> torch.FloatTensor([x.size()[<span class=\"pl-c1\">2</span>]]).sub(height).div(<span class=\"pl-k\">-</span><span class=\"pl-c1\">2</span>)\n    crop_w <span class=\"pl-k\">=</span> torch.FloatTensor([x.size()[<span class=\"pl-c1\">3</span>]]).sub(width).div(<span class=\"pl-k\">-</span><span class=\"pl-c1\">2</span>)\n\n    <span class=\"pl-k\">return</span> F.pad(x, [\n        crop_w.ceil().int()[<span class=\"pl-c1\">0</span>], crop_w.floor().int()[<span class=\"pl-c1\">0</span>],\n        crop_h.ceil().int()[<span class=\"pl-c1\">0</span>], crop_h.floor().int()[<span class=\"pl-c1\">0</span>],\n    ])\n\nvariable <span class=\"pl-k\">=</span> Variable(torch.randn(<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">3</span>, <span class=\"pl-c1\">60</span>, <span class=\"pl-c1\">40</span>))\n\n<span class=\"pl-c1\">print</span>(center_crop(variable, <span class=\"pl-c1\">20</span>, <span class=\"pl-c1\">20</span>).size())\n<span class=\"pl-c1\">print</span>(center_crop(variable, <span class=\"pl-c1\">20</span>, <span class=\"pl-c1\">40</span>).size())</pre></div>\n<p>I can send a PR on interest.</p>", "body_text": "There are some models which use \"crop layers\" (e.g. U-Net, ParseNet) so I think it wouldn't be bad to have a CenterCropNd layer.\nAs F.pad supports negative padding we just need to calculate padding offsets on top.\nimport torch\n\nfrom torch.nn import functional as F\nfrom torch.autograd import Variable\n\ndef center_crop(x, height, width):\n    crop_h = torch.FloatTensor([x.size()[2]]).sub(height).div(-2)\n    crop_w = torch.FloatTensor([x.size()[3]]).sub(width).div(-2)\n\n    return F.pad(x, [\n        crop_w.ceil().int()[0], crop_w.floor().int()[0],\n        crop_h.ceil().int()[0], crop_h.floor().int()[0],\n    ])\n\nvariable = Variable(torch.randn(1, 3, 60, 40))\n\nprint(center_crop(variable, 20, 20).size())\nprint(center_crop(variable, 20, 40).size())\nI can send a PR on interest.", "body": "There are some models which use \"crop layers\" (e.g. [U-Net](https://arxiv.org/abs/1505.04597), [ParseNet](https://arxiv.org/abs/1506.04579)) so I think it wouldn't be bad to have a `CenterCropNd` layer.\r\n\r\nAs `F.pad` supports negative padding we just need to calculate padding offsets on top.\r\n\r\n```python\r\nimport torch\r\n\r\nfrom torch.nn import functional as F\r\nfrom torch.autograd import Variable\r\n\r\ndef center_crop(x, height, width):\r\n    crop_h = torch.FloatTensor([x.size()[2]]).sub(height).div(-2)\r\n    crop_w = torch.FloatTensor([x.size()[3]]).sub(width).div(-2)\r\n\r\n    return F.pad(x, [\r\n        crop_w.ceil().int()[0], crop_w.floor().int()[0],\r\n        crop_h.ceil().int()[0], crop_h.floor().int()[0],\r\n    ])\r\n\r\nvariable = Variable(torch.randn(1, 3, 60, 40))\r\n\r\nprint(center_crop(variable, 20, 20).size())\r\nprint(center_crop(variable, 20, 40).size())\r\n```\r\n\r\nI can send a PR on interest."}