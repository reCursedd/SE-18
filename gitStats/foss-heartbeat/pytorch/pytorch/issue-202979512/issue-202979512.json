{"url": "https://api.github.com/repos/pytorch/pytorch/issues/582", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/582/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/582/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/582/events", "html_url": "https://github.com/pytorch/pytorch/issues/582", "id": 202979512, "node_id": "MDU6SXNzdWUyMDI5Nzk1MTI=", "number": 582, "title": "nn.ELU(inplace=True) errors in backward", "user": {"login": "soumith", "id": 1310570, "node_id": "MDQ6VXNlcjEzMTA1NzA=", "avatar_url": "https://avatars0.githubusercontent.com/u/1310570?v=4", "gravatar_id": "", "url": "https://api.github.com/users/soumith", "html_url": "https://github.com/soumith", "followers_url": "https://api.github.com/users/soumith/followers", "following_url": "https://api.github.com/users/soumith/following{/other_user}", "gists_url": "https://api.github.com/users/soumith/gists{/gist_id}", "starred_url": "https://api.github.com/users/soumith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/soumith/subscriptions", "organizations_url": "https://api.github.com/users/soumith/orgs", "repos_url": "https://api.github.com/users/soumith/repos", "events_url": "https://api.github.com/users/soumith/events{/privacy}", "received_events_url": "https://api.github.com/users/soumith/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 424131847, "node_id": "MDU6TGFiZWw0MjQxMzE4NDc=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/bug", "name": "bug", "color": "b60205", "default": true}, {"id": 443484135, "node_id": "MDU6TGFiZWw0NDM0ODQxMzU=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/high%20priority", "name": "high priority", "color": "F22613", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 0, "created_at": "2017-01-25T00:20:29Z", "updated_at": "2017-01-26T03:22:26Z", "closed_at": "2017-01-26T03:22:26Z", "author_association": "MEMBER", "body_html": "<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> torch\n<span class=\"pl-k\">import</span> torch.nn <span class=\"pl-k\">as</span> nn\n<span class=\"pl-k\">from</span> torch.autograd <span class=\"pl-k\">import</span> Variable\n\n<span class=\"pl-c1\">input</span> <span class=\"pl-k\">=</span> Variable(torch.randn(<span class=\"pl-c1\">10</span>), <span class=\"pl-v\">requires_grad</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>)\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> relu passes</span>\nrelu <span class=\"pl-k\">=</span> nn.ReLU(<span class=\"pl-v\">inplace</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>)\nh1 <span class=\"pl-k\">=</span> <span class=\"pl-c1\">input</span> <span class=\"pl-k\">*</span> <span class=\"pl-c1\">2</span>\nout <span class=\"pl-k\">=</span> relu(h1)\nout.backward(torch.randn(<span class=\"pl-c1\">10</span>))\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> elu fails</span>\nelu <span class=\"pl-k\">=</span> nn.ELU(<span class=\"pl-v\">inplace</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>)\nh1 <span class=\"pl-k\">=</span> <span class=\"pl-c1\">input</span> <span class=\"pl-k\">*</span> <span class=\"pl-c1\">2</span>\nout <span class=\"pl-k\">=</span> elu(h1)\nout.backward(torch.randn(<span class=\"pl-c1\">10</span>))</pre></div>\n<pre><code>/Users/soumith/code/pytorch/torch/autograd/variable.pyc in backward(self, gradient, retain_variables)\n    154                 raise RuntimeError('backward should be called only on a scalar (i.e. 1-element tensor) or with gradient w.r.t. the variable')\n    155             gradient = self.data.new().resize_as_(self.data).fill_(1)\n--&gt; 156         self._execution_engine.run_backward((self,), (gradient,), retain_variables)\n    157\n    158     def register_hook(self, hook):\n\n/Users/soumith/code/pytorch/torch/nn/_functions/thnn/auto.pyc in backward(self, grad_output)\n    150         t = self.saved_tensors\n    151         if save_output:\n--&gt; 152             input, output, params = t[0], t[1], t[2:]\n    153         else:\n    154             input, params = t[0], t[1:]\n\nIndexError: tuple index out of range\n</code></pre>", "body_text": "import torch\nimport torch.nn as nn\nfrom torch.autograd import Variable\n\ninput = Variable(torch.randn(10), requires_grad=True)\n\n# relu passes\nrelu = nn.ReLU(inplace=True)\nh1 = input * 2\nout = relu(h1)\nout.backward(torch.randn(10))\n\n# elu fails\nelu = nn.ELU(inplace=True)\nh1 = input * 2\nout = elu(h1)\nout.backward(torch.randn(10))\n/Users/soumith/code/pytorch/torch/autograd/variable.pyc in backward(self, gradient, retain_variables)\n    154                 raise RuntimeError('backward should be called only on a scalar (i.e. 1-element tensor) or with gradient w.r.t. the variable')\n    155             gradient = self.data.new().resize_as_(self.data).fill_(1)\n--> 156         self._execution_engine.run_backward((self,), (gradient,), retain_variables)\n    157\n    158     def register_hook(self, hook):\n\n/Users/soumith/code/pytorch/torch/nn/_functions/thnn/auto.pyc in backward(self, grad_output)\n    150         t = self.saved_tensors\n    151         if save_output:\n--> 152             input, output, params = t[0], t[1], t[2:]\n    153         else:\n    154             input, params = t[0], t[1:]\n\nIndexError: tuple index out of range", "body": "```python\r\nimport torch\r\nimport torch.nn as nn\r\nfrom torch.autograd import Variable\r\n\r\ninput = Variable(torch.randn(10), requires_grad=True)\r\n\r\n# relu passes\r\nrelu = nn.ReLU(inplace=True)\r\nh1 = input * 2\r\nout = relu(h1)\r\nout.backward(torch.randn(10))\r\n\r\n# elu fails\r\nelu = nn.ELU(inplace=True)\r\nh1 = input * 2\r\nout = elu(h1)\r\nout.backward(torch.randn(10))\r\n```\r\n\r\n```\r\n/Users/soumith/code/pytorch/torch/autograd/variable.pyc in backward(self, gradient, retain_variables)\r\n    154                 raise RuntimeError('backward should be called only on a scalar (i.e. 1-element tensor) or with gradient w.r.t. the variable')\r\n    155             gradient = self.data.new().resize_as_(self.data).fill_(1)\r\n--> 156         self._execution_engine.run_backward((self,), (gradient,), retain_variables)\r\n    157\r\n    158     def register_hook(self, hook):\r\n\r\n/Users/soumith/code/pytorch/torch/nn/_functions/thnn/auto.pyc in backward(self, grad_output)\r\n    150         t = self.saved_tensors\r\n    151         if save_output:\r\n--> 152             input, output, params = t[0], t[1], t[2:]\r\n    153         else:\r\n    154             input, params = t[0], t[1:]\r\n\r\nIndexError: tuple index out of range\r\n```"}