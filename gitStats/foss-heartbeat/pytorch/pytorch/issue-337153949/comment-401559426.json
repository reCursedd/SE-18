{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/401559426", "html_url": "https://github.com/pytorch/pytorch/pull/9052#issuecomment-401559426", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/9052", "id": 401559426, "node_id": "MDEyOklzc3VlQ29tbWVudDQwMTU1OTQyNg==", "user": {"login": "SsnL", "id": 5674597, "node_id": "MDQ6VXNlcjU2NzQ1OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5674597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SsnL", "html_url": "https://github.com/SsnL", "followers_url": "https://api.github.com/users/SsnL/followers", "following_url": "https://api.github.com/users/SsnL/following{/other_user}", "gists_url": "https://api.github.com/users/SsnL/gists{/gist_id}", "starred_url": "https://api.github.com/users/SsnL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SsnL/subscriptions", "organizations_url": "https://api.github.com/users/SsnL/orgs", "repos_url": "https://api.github.com/users/SsnL/repos", "events_url": "https://api.github.com/users/SsnL/events{/privacy}", "received_events_url": "https://api.github.com/users/SsnL/received_events", "type": "User", "site_admin": false}, "created_at": "2018-06-30T18:51:12Z", "updated_at": "2018-06-30T18:52:09Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Very valid reasons. Thanks for your explanation!</p>\n<ol>\n<li>\n<p>Our current general goal is to align with numpy interface. Unfortunately we didn't have this guideline before. I believe that we probably want to alias <code>inverse</code> with <code>inv</code> in future. <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1310570\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/soumith\">@soumith</a> , should we just name this as <code>pinv</code>? Or have both <code>pinv</code> and <code>pinverse</code> as its aliases?</p>\n</li>\n<li>\n<p>Thanks for the reference. I agree. However, the current implementation is still backprop-able, so users may attempt to backprop. How about this: let's test the following function:</p>\n<pre><code>assumption: \n  1. m &lt;= n\n  2. two fixed orthonormal matrices U and V\ninput: x of shape [m]\noutput: S = torch.cat([x, torch.zeros(n - m)], 0).diag(); return U @ S @ V\n</code></pre>\n<p>If we test it on sufficiently large positive input <code>x</code>, it should guarantee constant rank <code>m</code>.<br>\nAlso, given its instability, I suggest we add a <code>.. note::</code> in its doc (just as we did for <code>svd</code>). I think the note probably should also mention double backward instability from <code>svd</code> (similar to the note in <code>det</code>).</p>\n</li>\n</ol>\n<p>Let me know what you think!</p>", "body_text": "Very valid reasons. Thanks for your explanation!\n\n\nOur current general goal is to align with numpy interface. Unfortunately we didn't have this guideline before. I believe that we probably want to alias inverse with inv in future. @soumith , should we just name this as pinv? Or have both pinv and pinverse as its aliases?\n\n\nThanks for the reference. I agree. However, the current implementation is still backprop-able, so users may attempt to backprop. How about this: let's test the following function:\nassumption: \n  1. m <= n\n  2. two fixed orthonormal matrices U and V\ninput: x of shape [m]\noutput: S = torch.cat([x, torch.zeros(n - m)], 0).diag(); return U @ S @ V\n\nIf we test it on sufficiently large positive input x, it should guarantee constant rank m.\nAlso, given its instability, I suggest we add a .. note:: in its doc (just as we did for svd). I think the note probably should also mention double backward instability from svd (similar to the note in det).\n\n\nLet me know what you think!", "body": "Very valid reasons. Thanks for your explanation! \r\n\r\n1. Our current general goal is to align with numpy interface. Unfortunately we didn't have this guideline before. I believe that we probably want to alias `inverse` with `inv` in future. @soumith , should we just name this as `pinv`? Or have both `pinv` and `pinverse` as its aliases?\r\n\r\n2. Thanks for the reference. I agree. However, the current implementation is still backprop-able, so users may attempt to backprop. How about this: let's test the following function:\r\n    ```\r\n    assumption: \r\n      1. m <= n\r\n      2. two fixed orthonormal matrices U and V\r\n    input: x of shape [m]\r\n    output: S = torch.cat([x, torch.zeros(n - m)], 0).diag(); return U @ S @ V\r\n    ```\r\n    If we test it on sufficiently large positive input `x`, it should guarantee constant rank `m`.\r\nAlso, given its instability, I suggest we add a `.. note::` in its doc (just as we did for `svd`). I think the note probably should also mention double backward instability from `svd` (similar to the note in `det`).\r\n\r\nLet me know what you think!"}