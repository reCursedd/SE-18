{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/397812105", "html_url": "https://github.com/pytorch/pytorch/pull/8578#issuecomment-397812105", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/8578", "id": 397812105, "node_id": "MDEyOklzc3VlQ29tbWVudDM5NzgxMjEwNQ==", "user": {"login": "vadimkantorov", "id": 1041752, "node_id": "MDQ6VXNlcjEwNDE3NTI=", "avatar_url": "https://avatars0.githubusercontent.com/u/1041752?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vadimkantorov", "html_url": "https://github.com/vadimkantorov", "followers_url": "https://api.github.com/users/vadimkantorov/followers", "following_url": "https://api.github.com/users/vadimkantorov/following{/other_user}", "gists_url": "https://api.github.com/users/vadimkantorov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vadimkantorov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vadimkantorov/subscriptions", "organizations_url": "https://api.github.com/users/vadimkantorov/orgs", "repos_url": "https://api.github.com/users/vadimkantorov/repos", "events_url": "https://api.github.com/users/vadimkantorov/events{/privacy}", "received_events_url": "https://api.github.com/users/vadimkantorov/received_events", "type": "User", "site_admin": false}, "created_at": "2018-06-16T13:24:16Z", "updated_at": "2018-06-16T14:55:39Z", "author_association": "NONE", "body_html": "<p>Are there defaults for <code>start</code> and <code>end</code>? For cases like:</p>\n<pre><code>x.flatten(start = -2) # for shorter version of x.flatten(start = -2, end = -1)\nx.flatten(end = 2) # for shorter version of x.flatten(start = 0, end = 2)\n</code></pre>\n<p>For complete defaults, NumPy would return a 1-dim array equivalent to <code>x.view(-1)</code>, while <code>tf.contrib.layers.flatten</code> would return a 2-dim array equivalent to <code>x.view(len(x), -1)</code>. But maybe it's better to not have complete defaults because of this possible two interpretations (?).</p>\n<p>Also a naming style suggestion: <code>start</code>  =&gt; <code>start_dim</code> or <code>dim_start</code> (same for <code>end</code>), this way semantics is clearer (and aligns with existing <code>dim</code> and <code>multi_dims</code>) but at the expense of more verbosity. (but I understand, it's a question of taste anyway)</p>", "body_text": "Are there defaults for start and end? For cases like:\nx.flatten(start = -2) # for shorter version of x.flatten(start = -2, end = -1)\nx.flatten(end = 2) # for shorter version of x.flatten(start = 0, end = 2)\n\nFor complete defaults, NumPy would return a 1-dim array equivalent to x.view(-1), while tf.contrib.layers.flatten would return a 2-dim array equivalent to x.view(len(x), -1). But maybe it's better to not have complete defaults because of this possible two interpretations (?).\nAlso a naming style suggestion: start  => start_dim or dim_start (same for end), this way semantics is clearer (and aligns with existing dim and multi_dims) but at the expense of more verbosity. (but I understand, it's a question of taste anyway)", "body": "Are there defaults for `start` and `end`? For cases like:\r\n```\r\nx.flatten(start = -2) # for shorter version of x.flatten(start = -2, end = -1)\r\nx.flatten(end = 2) # for shorter version of x.flatten(start = 0, end = 2)\r\n```\r\n\r\nFor complete defaults, NumPy would return a 1-dim array equivalent to `x.view(-1)`, while `tf.contrib.layers.flatten` would return a 2-dim array equivalent to `x.view(len(x), -1)`. But maybe it's better to not have complete defaults because of this possible two interpretations (?).\r\n\r\nAlso a naming style suggestion: `start`  => `start_dim` or `dim_start` (same for `end`), this way semantics is clearer (and aligns with existing `dim` and `multi_dims`) but at the expense of more verbosity. (but I understand, it's a question of taste anyway)"}