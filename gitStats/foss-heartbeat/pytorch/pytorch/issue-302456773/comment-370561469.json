{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/370561469", "html_url": "https://github.com/pytorch/pytorch/pull/5576#issuecomment-370561469", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/5576", "id": 370561469, "node_id": "MDEyOklzc3VlQ29tbWVudDM3MDU2MTQ2OQ==", "user": {"login": "gchanan", "id": 3768583, "node_id": "MDQ6VXNlcjM3Njg1ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3768583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gchanan", "html_url": "https://github.com/gchanan", "followers_url": "https://api.github.com/users/gchanan/followers", "following_url": "https://api.github.com/users/gchanan/following{/other_user}", "gists_url": "https://api.github.com/users/gchanan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gchanan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gchanan/subscriptions", "organizations_url": "https://api.github.com/users/gchanan/orgs", "repos_url": "https://api.github.com/users/gchanan/repos", "events_url": "https://api.github.com/users/gchanan/events{/privacy}", "received_events_url": "https://api.github.com/users/gchanan/received_events", "type": "User", "site_admin": false}, "created_at": "2018-03-05T20:53:49Z", "updated_at": "2018-03-05T20:53:49Z", "author_association": "CONTRIBUTOR", "body_html": "<p>The downside of this approach compared to the \"nicer\" solution:</p>\n<ol>\n<li>It breaks existing code that calls directly into the Type (and makes calls like CPUFloatType.ones({}, CPUDoubleType) weird, but this seems okay because the Type object is really a dispatch implementation detail, and we should prefer that people use the namespace function.</li>\n<li>You wouldn't hand-write things this way</li>\n</ol>\n<p>The upside is it avoids complicating the dispatch; i.e. since the Type methods always match the function methods, a lot more code generation doesn't need to change.  I implemented the other one, but I wasn't happy with how complex things were getting.</p>", "body_text": "The downside of this approach compared to the \"nicer\" solution:\n\nIt breaks existing code that calls directly into the Type (and makes calls like CPUFloatType.ones({}, CPUDoubleType) weird, but this seems okay because the Type object is really a dispatch implementation detail, and we should prefer that people use the namespace function.\nYou wouldn't hand-write things this way\n\nThe upside is it avoids complicating the dispatch; i.e. since the Type methods always match the function methods, a lot more code generation doesn't need to change.  I implemented the other one, but I wasn't happy with how complex things were getting.", "body": "The downside of this approach compared to the \"nicer\" solution:\r\n1) It breaks existing code that calls directly into the Type (and makes calls like CPUFloatType.ones({}, CPUDoubleType) weird, but this seems okay because the Type object is really a dispatch implementation detail, and we should prefer that people use the namespace function.\r\n2) You wouldn't hand-write things this way\r\n\r\nThe upside is it avoids complicating the dispatch; i.e. since the Type methods always match the function methods, a lot more code generation doesn't need to change.  I implemented the other one, but I wasn't happy with how complex things were getting."}