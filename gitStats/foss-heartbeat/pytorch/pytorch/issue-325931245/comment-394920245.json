{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/394920245", "html_url": "https://github.com/pytorch/pytorch/pull/7803#issuecomment-394920245", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/7803", "id": 394920245, "node_id": "MDEyOklzc3VlQ29tbWVudDM5NDkyMDI0NQ==", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "created_at": "2018-06-06T02:30:33Z", "updated_at": "2018-06-06T02:30:33Z", "author_association": "CONTRIBUTOR", "body_html": "<pre><code>01:34:21 =================================== FAILURES ===================================\n01:34:21 __________________________ TestCaffe2Basic.test_gemm ___________________________\n01:34:21 \n01:34:21 self = &lt;caffe2.python.onnx.tests.c2_ref_test.TestCaffe2Basic testMethod=test_gemm&gt;\n01:34:21 \n01:34:21     def test_gemm(self):\n01:34:21         # simple\n01:34:21         A = np.random.randn(3, 2).astype(np.float32)\n01:34:21         B = np.random.randn(2, 4).astype(np.float32)\n01:34:21         C = np.random.randn(3, 4).astype(np.float32)\n01:34:21         node_def = make_node(\n01:34:21             'Gemm',\n01:34:21             ['A', 'B', 'C'],\n01:34:21             [\"Y\"])\n01:34:21         output = c2.run_node(node_def, [A, B, C])\n01:34:21         np.testing.assert_almost_equal(output[\"Y\"], np.dot(A, B) + C)\n01:34:21     \n01:34:21         # transA\n01:34:21         A = np.transpose(A)\n01:34:21         node_def = make_node(\n01:34:21             'Gemm',\n01:34:21             ['A', 'B', 'C'],\n01:34:21             [\"Y\"],\n01:34:21             transA=True)\n01:34:21         output = c2.run_node(node_def, [A, B, C])\n01:34:21         np.testing.assert_almost_equal(\n01:34:21             output[\"Y\"],\n01:34:21             np.dot(np.transpose(A), B) + C)\n01:34:21         # revert A\n01:34:21         A = np.transpose(A)\n01:34:21     \n01:34:21         # transB\n01:34:21         B = np.transpose(B)\n01:34:21         node_def = make_node(\n01:34:21             'Gemm',\n01:34:21             ['A', 'B', 'C'],\n01:34:21             [\"Y\"],\n01:34:21             transB=True)\n01:34:21         output = c2.run_node(node_def, [A, B, C])\n01:34:21         np.testing.assert_almost_equal(\n01:34:21             output[\"Y\"],\n01:34:21             np.dot(A, np.transpose(B)) + C)\n01:34:21         # revert A\n01:34:21         B = np.transpose(B)\n01:34:21     \n01:34:21         # scale\n01:34:21         alpha = np.random.random()\n01:34:21         beta = np.random.random()\n01:34:21         node_def = make_node(\n01:34:21             'Gemm',\n01:34:21             ['A', 'B', 'C'],\n01:34:21             [\"Y\"],\n01:34:21             alpha=alpha,\n01:34:21             beta=beta)\n01:34:21         output = c2.run_node(node_def, [A, B, C])\n01:34:21         np.testing.assert_almost_equal(\n01:34:21             output[\"Y\"],\n01:34:21             alpha * np.dot(A, B) + beta * C)\n01:34:21     \n01:34:21         # broadcast\n01:34:21         C = np.random.randn(4).astype(np.float32)\n01:34:21         node_def = make_node(\n01:34:21             'Gemm',\n01:34:21             ['A', 'B', 'C'],\n01:34:21             [\"Y\"],\n01:34:21             alpha=alpha,\n01:34:21             beta=beta,\n01:34:21             broadcast=1)\n01:34:21 &gt;       output = c2.run_node(node_def, [A, B, C])\n01:34:21 \n01:34:21 lib/python2.7/dist-packages/caffe2/python/onnx/tests/c2_ref_test.py:171: \n01:34:21 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n01:34:21 lib/python2.7/dist-packages/caffe2/python/onnx/backend.py:210: in run_node\n01:34:21     super(Caffe2Backend, cls).run_node(node, inputs, device=device, outputs_info=outputs_info)\n01:34:21 /var/lib/jenkins/.local/lib/python2.7/site-packages/onnx/backend/base.py:94: in run_node\n01:34:21     onnx.checker.check_node(node)\n01:34:21 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n01:34:21 \n01:34:21 proto = input: \"A\"\n01:34:21 input: \"B\"\n01:34:21 input: \"C\"\n01:34:21 output: \"Y\"\n01:34:21 op_type: \"Gemm\"\n01:34:21 attribute {\n01:34:21   nam...763548851\n01:34:21   type: FLOAT\n01:34:21 }\n01:34:21 attribute {\n01:34:21   name: \"broadcast\"\n01:34:21   i: 1\n01:34:21   type: INT\n01:34:21 }\n01:34:21 \n01:34:21 ctx = &lt;onnx.onnx_cpp2py_export.checker.CheckerContext object at 0x7f3c8ca3d688&gt;\n01:34:21 \n01:34:21     @functools.wraps(py_func)\n01:34:21     def checker(proto, ctx=DEFAULT_CONTEXT):  # type: (Message, C.CheckerContext) -&gt; Any\n01:34:21         if not isinstance(proto, proto_type):\n01:34:21             raise RuntimeError(\n01:34:21                 'You cannot pass an object that is not of type {}'.format(\n01:34:21                     proto_type.__name__))\n01:34:21         return getattr(C, py_func.__name__)(\n01:34:21 &gt;           proto.SerializeToString(), ctx)\n01:34:21 E       ValidationError: Unrecognized attribute: broadcast\n01:34:21 \n</code></pre>", "body_text": "01:34:21 =================================== FAILURES ===================================\n01:34:21 __________________________ TestCaffe2Basic.test_gemm ___________________________\n01:34:21 \n01:34:21 self = <caffe2.python.onnx.tests.c2_ref_test.TestCaffe2Basic testMethod=test_gemm>\n01:34:21 \n01:34:21     def test_gemm(self):\n01:34:21         # simple\n01:34:21         A = np.random.randn(3, 2).astype(np.float32)\n01:34:21         B = np.random.randn(2, 4).astype(np.float32)\n01:34:21         C = np.random.randn(3, 4).astype(np.float32)\n01:34:21         node_def = make_node(\n01:34:21             'Gemm',\n01:34:21             ['A', 'B', 'C'],\n01:34:21             [\"Y\"])\n01:34:21         output = c2.run_node(node_def, [A, B, C])\n01:34:21         np.testing.assert_almost_equal(output[\"Y\"], np.dot(A, B) + C)\n01:34:21     \n01:34:21         # transA\n01:34:21         A = np.transpose(A)\n01:34:21         node_def = make_node(\n01:34:21             'Gemm',\n01:34:21             ['A', 'B', 'C'],\n01:34:21             [\"Y\"],\n01:34:21             transA=True)\n01:34:21         output = c2.run_node(node_def, [A, B, C])\n01:34:21         np.testing.assert_almost_equal(\n01:34:21             output[\"Y\"],\n01:34:21             np.dot(np.transpose(A), B) + C)\n01:34:21         # revert A\n01:34:21         A = np.transpose(A)\n01:34:21     \n01:34:21         # transB\n01:34:21         B = np.transpose(B)\n01:34:21         node_def = make_node(\n01:34:21             'Gemm',\n01:34:21             ['A', 'B', 'C'],\n01:34:21             [\"Y\"],\n01:34:21             transB=True)\n01:34:21         output = c2.run_node(node_def, [A, B, C])\n01:34:21         np.testing.assert_almost_equal(\n01:34:21             output[\"Y\"],\n01:34:21             np.dot(A, np.transpose(B)) + C)\n01:34:21         # revert A\n01:34:21         B = np.transpose(B)\n01:34:21     \n01:34:21         # scale\n01:34:21         alpha = np.random.random()\n01:34:21         beta = np.random.random()\n01:34:21         node_def = make_node(\n01:34:21             'Gemm',\n01:34:21             ['A', 'B', 'C'],\n01:34:21             [\"Y\"],\n01:34:21             alpha=alpha,\n01:34:21             beta=beta)\n01:34:21         output = c2.run_node(node_def, [A, B, C])\n01:34:21         np.testing.assert_almost_equal(\n01:34:21             output[\"Y\"],\n01:34:21             alpha * np.dot(A, B) + beta * C)\n01:34:21     \n01:34:21         # broadcast\n01:34:21         C = np.random.randn(4).astype(np.float32)\n01:34:21         node_def = make_node(\n01:34:21             'Gemm',\n01:34:21             ['A', 'B', 'C'],\n01:34:21             [\"Y\"],\n01:34:21             alpha=alpha,\n01:34:21             beta=beta,\n01:34:21             broadcast=1)\n01:34:21 >       output = c2.run_node(node_def, [A, B, C])\n01:34:21 \n01:34:21 lib/python2.7/dist-packages/caffe2/python/onnx/tests/c2_ref_test.py:171: \n01:34:21 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n01:34:21 lib/python2.7/dist-packages/caffe2/python/onnx/backend.py:210: in run_node\n01:34:21     super(Caffe2Backend, cls).run_node(node, inputs, device=device, outputs_info=outputs_info)\n01:34:21 /var/lib/jenkins/.local/lib/python2.7/site-packages/onnx/backend/base.py:94: in run_node\n01:34:21     onnx.checker.check_node(node)\n01:34:21 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n01:34:21 \n01:34:21 proto = input: \"A\"\n01:34:21 input: \"B\"\n01:34:21 input: \"C\"\n01:34:21 output: \"Y\"\n01:34:21 op_type: \"Gemm\"\n01:34:21 attribute {\n01:34:21   nam...763548851\n01:34:21   type: FLOAT\n01:34:21 }\n01:34:21 attribute {\n01:34:21   name: \"broadcast\"\n01:34:21   i: 1\n01:34:21   type: INT\n01:34:21 }\n01:34:21 \n01:34:21 ctx = <onnx.onnx_cpp2py_export.checker.CheckerContext object at 0x7f3c8ca3d688>\n01:34:21 \n01:34:21     @functools.wraps(py_func)\n01:34:21     def checker(proto, ctx=DEFAULT_CONTEXT):  # type: (Message, C.CheckerContext) -> Any\n01:34:21         if not isinstance(proto, proto_type):\n01:34:21             raise RuntimeError(\n01:34:21                 'You cannot pass an object that is not of type {}'.format(\n01:34:21                     proto_type.__name__))\n01:34:21         return getattr(C, py_func.__name__)(\n01:34:21 >           proto.SerializeToString(), ctx)\n01:34:21 E       ValidationError: Unrecognized attribute: broadcast\n01:34:21", "body": "```\r\n01:34:21 =================================== FAILURES ===================================\r\n01:34:21 __________________________ TestCaffe2Basic.test_gemm ___________________________\r\n01:34:21 \r\n01:34:21 self = <caffe2.python.onnx.tests.c2_ref_test.TestCaffe2Basic testMethod=test_gemm>\r\n01:34:21 \r\n01:34:21     def test_gemm(self):\r\n01:34:21         # simple\r\n01:34:21         A = np.random.randn(3, 2).astype(np.float32)\r\n01:34:21         B = np.random.randn(2, 4).astype(np.float32)\r\n01:34:21         C = np.random.randn(3, 4).astype(np.float32)\r\n01:34:21         node_def = make_node(\r\n01:34:21             'Gemm',\r\n01:34:21             ['A', 'B', 'C'],\r\n01:34:21             [\"Y\"])\r\n01:34:21         output = c2.run_node(node_def, [A, B, C])\r\n01:34:21         np.testing.assert_almost_equal(output[\"Y\"], np.dot(A, B) + C)\r\n01:34:21     \r\n01:34:21         # transA\r\n01:34:21         A = np.transpose(A)\r\n01:34:21         node_def = make_node(\r\n01:34:21             'Gemm',\r\n01:34:21             ['A', 'B', 'C'],\r\n01:34:21             [\"Y\"],\r\n01:34:21             transA=True)\r\n01:34:21         output = c2.run_node(node_def, [A, B, C])\r\n01:34:21         np.testing.assert_almost_equal(\r\n01:34:21             output[\"Y\"],\r\n01:34:21             np.dot(np.transpose(A), B) + C)\r\n01:34:21         # revert A\r\n01:34:21         A = np.transpose(A)\r\n01:34:21     \r\n01:34:21         # transB\r\n01:34:21         B = np.transpose(B)\r\n01:34:21         node_def = make_node(\r\n01:34:21             'Gemm',\r\n01:34:21             ['A', 'B', 'C'],\r\n01:34:21             [\"Y\"],\r\n01:34:21             transB=True)\r\n01:34:21         output = c2.run_node(node_def, [A, B, C])\r\n01:34:21         np.testing.assert_almost_equal(\r\n01:34:21             output[\"Y\"],\r\n01:34:21             np.dot(A, np.transpose(B)) + C)\r\n01:34:21         # revert A\r\n01:34:21         B = np.transpose(B)\r\n01:34:21     \r\n01:34:21         # scale\r\n01:34:21         alpha = np.random.random()\r\n01:34:21         beta = np.random.random()\r\n01:34:21         node_def = make_node(\r\n01:34:21             'Gemm',\r\n01:34:21             ['A', 'B', 'C'],\r\n01:34:21             [\"Y\"],\r\n01:34:21             alpha=alpha,\r\n01:34:21             beta=beta)\r\n01:34:21         output = c2.run_node(node_def, [A, B, C])\r\n01:34:21         np.testing.assert_almost_equal(\r\n01:34:21             output[\"Y\"],\r\n01:34:21             alpha * np.dot(A, B) + beta * C)\r\n01:34:21     \r\n01:34:21         # broadcast\r\n01:34:21         C = np.random.randn(4).astype(np.float32)\r\n01:34:21         node_def = make_node(\r\n01:34:21             'Gemm',\r\n01:34:21             ['A', 'B', 'C'],\r\n01:34:21             [\"Y\"],\r\n01:34:21             alpha=alpha,\r\n01:34:21             beta=beta,\r\n01:34:21             broadcast=1)\r\n01:34:21 >       output = c2.run_node(node_def, [A, B, C])\r\n01:34:21 \r\n01:34:21 lib/python2.7/dist-packages/caffe2/python/onnx/tests/c2_ref_test.py:171: \r\n01:34:21 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n01:34:21 lib/python2.7/dist-packages/caffe2/python/onnx/backend.py:210: in run_node\r\n01:34:21     super(Caffe2Backend, cls).run_node(node, inputs, device=device, outputs_info=outputs_info)\r\n01:34:21 /var/lib/jenkins/.local/lib/python2.7/site-packages/onnx/backend/base.py:94: in run_node\r\n01:34:21     onnx.checker.check_node(node)\r\n01:34:21 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n01:34:21 \r\n01:34:21 proto = input: \"A\"\r\n01:34:21 input: \"B\"\r\n01:34:21 input: \"C\"\r\n01:34:21 output: \"Y\"\r\n01:34:21 op_type: \"Gemm\"\r\n01:34:21 attribute {\r\n01:34:21   nam...763548851\r\n01:34:21   type: FLOAT\r\n01:34:21 }\r\n01:34:21 attribute {\r\n01:34:21   name: \"broadcast\"\r\n01:34:21   i: 1\r\n01:34:21   type: INT\r\n01:34:21 }\r\n01:34:21 \r\n01:34:21 ctx = <onnx.onnx_cpp2py_export.checker.CheckerContext object at 0x7f3c8ca3d688>\r\n01:34:21 \r\n01:34:21     @functools.wraps(py_func)\r\n01:34:21     def checker(proto, ctx=DEFAULT_CONTEXT):  # type: (Message, C.CheckerContext) -> Any\r\n01:34:21         if not isinstance(proto, proto_type):\r\n01:34:21             raise RuntimeError(\r\n01:34:21                 'You cannot pass an object that is not of type {}'.format(\r\n01:34:21                     proto_type.__name__))\r\n01:34:21         return getattr(C, py_func.__name__)(\r\n01:34:21 >           proto.SerializeToString(), ctx)\r\n01:34:21 E       ValidationError: Unrecognized attribute: broadcast\r\n01:34:21 \r\n```"}