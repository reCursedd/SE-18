{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/352958809", "html_url": "https://github.com/pytorch/pytorch/pull/4243#issuecomment-352958809", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/4243", "id": 352958809, "node_id": "MDEyOklzc3VlQ29tbWVudDM1Mjk1ODgwOQ==", "user": {"login": "colesbury", "id": 655866, "node_id": "MDQ6VXNlcjY1NTg2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/655866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colesbury", "html_url": "https://github.com/colesbury", "followers_url": "https://api.github.com/users/colesbury/followers", "following_url": "https://api.github.com/users/colesbury/following{/other_user}", "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions", "organizations_url": "https://api.github.com/users/colesbury/orgs", "repos_url": "https://api.github.com/users/colesbury/repos", "events_url": "https://api.github.com/users/colesbury/events{/privacy}", "received_events_url": "https://api.github.com/users/colesbury/received_events", "type": "User", "site_admin": false}, "created_at": "2017-12-20T04:01:09Z", "updated_at": "2017-12-20T04:01:09Z", "author_association": "MEMBER", "body_html": "<p>I don't think it's worth changing the generation code to support <code>btrifact</code> instead of changing <code>btrifact</code> to follow standard conventions. The underlying problem is that <code>btrifact</code> is trying to sneak an output through an optional function parameter.</p>\n<p>We should make <code>info</code> a return value. We can  split <code>btrifact</code> into two functions (one which returns info and one which doesn't).  FWIW, there's no significant downside for always computing <code>info</code>.</p>\n<p>At the Python level, we can implement the old behavior via a <code>info.copy_(...)</code></p>", "body_text": "I don't think it's worth changing the generation code to support btrifact instead of changing btrifact to follow standard conventions. The underlying problem is that btrifact is trying to sneak an output through an optional function parameter.\nWe should make info a return value. We can  split btrifact into two functions (one which returns info and one which doesn't).  FWIW, there's no significant downside for always computing info.\nAt the Python level, we can implement the old behavior via a info.copy_(...)", "body": "I don't think it's worth changing the generation code to support `btrifact` instead of changing `btrifact` to follow standard conventions. The underlying problem is that `btrifact` is trying to sneak an output through an optional function parameter.\r\n\r\nWe should make `info` a return value. We can  split `btrifact` into two functions (one which returns info and one which doesn't).  FWIW, there's no significant downside for always computing `info`.\r\n\r\nAt the Python level, we can implement the old behavior via a `info.copy_(...)`\r\n     "}