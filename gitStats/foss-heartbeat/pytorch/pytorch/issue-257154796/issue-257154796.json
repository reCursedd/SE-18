{"url": "https://api.github.com/repos/pytorch/pytorch/issues/2710", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/2710/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/2710/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/2710/events", "html_url": "https://github.com/pytorch/pytorch/issues/2710", "id": 257154796, "node_id": "MDU6SXNzdWUyNTcxNTQ3OTY=", "number": 2710, "title": "More informative gradcheck return codes", "user": {"login": "mys007", "id": 5921083, "node_id": "MDQ6VXNlcjU5MjEwODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/5921083?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mys007", "html_url": "https://github.com/mys007", "followers_url": "https://api.github.com/users/mys007/followers", "following_url": "https://api.github.com/users/mys007/following{/other_user}", "gists_url": "https://api.github.com/users/mys007/gists{/gist_id}", "starred_url": "https://api.github.com/users/mys007/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mys007/subscriptions", "organizations_url": "https://api.github.com/users/mys007/orgs", "repos_url": "https://api.github.com/users/mys007/repos", "events_url": "https://api.github.com/users/mys007/events{/privacy}", "received_events_url": "https://api.github.com/users/mys007/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-09-12T19:28:32Z", "updated_at": "2017-09-12T19:53:22Z", "closed_at": null, "author_association": "CONTRIBUTOR", "body_html": "<p>Hi,</p>\n<p>I find the current return value of <code>gradcheck</code> in case of failure rather uninformative (<code>False</code>). This makes it hard to debug the problematic Function of interest.<br>\nI propose to return more information: the reason for failure (gradient mismatch, size mismatch, non-reentrance, backward doesn't multiply by grad_output) and error magnitude. What would be the best way? Perhaps returning a <code>namedtuple</code> in addition to <code>False</code> when requested so by a new argument <code>details=False</code>?</p>\n<p>Piggybacked issue: Isn't the reentrance check at <a href=\"https://github.com/pytorch/pytorch/blob/master/torch/autograd/gradcheck.py#L118\">https://github.com/pytorch/pytorch/blob/master/torch/autograd/gradcheck.py#L118</a> too strict (equality to zero), especially in the case of Functions with some GPU non-determinism? Shouldn't it be sufficient to check against <code>atol</code> and <code>rtol</code>?</p>", "body_text": "Hi,\nI find the current return value of gradcheck in case of failure rather uninformative (False). This makes it hard to debug the problematic Function of interest.\nI propose to return more information: the reason for failure (gradient mismatch, size mismatch, non-reentrance, backward doesn't multiply by grad_output) and error magnitude. What would be the best way? Perhaps returning a namedtuple in addition to False when requested so by a new argument details=False?\nPiggybacked issue: Isn't the reentrance check at https://github.com/pytorch/pytorch/blob/master/torch/autograd/gradcheck.py#L118 too strict (equality to zero), especially in the case of Functions with some GPU non-determinism? Shouldn't it be sufficient to check against atol and rtol?", "body": "Hi, \r\n\r\nI find the current return value of `gradcheck` in case of failure rather uninformative (`False`). This makes it hard to debug the problematic Function of interest.\r\nI propose to return more information: the reason for failure (gradient mismatch, size mismatch, non-reentrance, backward doesn't multiply by grad_output) and error magnitude. What would be the best way? Perhaps returning a `namedtuple` in addition to `False` when requested so by a new argument `details=False`?\r\n\r\nPiggybacked issue: Isn't the reentrance check at https://github.com/pytorch/pytorch/blob/master/torch/autograd/gradcheck.py#L118 too strict (equality to zero), especially in the case of Functions with some GPU non-determinism? Shouldn't it be sufficient to check against `atol` and `rtol`?"}