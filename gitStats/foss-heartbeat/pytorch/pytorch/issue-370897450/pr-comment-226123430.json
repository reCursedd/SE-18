{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/226123430", "pull_request_review_id": 165871587, "id": 226123430, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNjEyMzQzMA==", "diff_hunk": "@@ -0,0 +1,168 @@\n+#pragma once\n+\n+#include <ATen/core/Error.h>\n+#include <map>\n+#include <unordered_map>\n+\n+namespace torch {\n+namespace jit {\n+\n+struct Node;\n+\n+// Index to track a topological ordering of nodes. Owned by a block,\n+// representing the nodes in the block.\n+//\n+// This lets us answer questions like \"is this node before another node\"\n+// efficiently, which is useful for optimization. It should be kept up to date\n+// with node insertions/deletions by the owning block.\n+//\n+// The basic scheme is: nodes are assigned positional indices within a signed\n+// 64-bit space. We leave 2^16 spaces in between each node so that nodes can\n+// be inserted between them in the order. If we ever run out of space between\n+// nodes, the index is rebuilt such that the nodes are \"spread out\" again.\n+class TopologicalIndex {\n+ public:\n+  TopologicalIndex(const Node* input, const Node* output)\n+      : TopologicalIndex(input, output, 1 << 16, INT64_MIN, INT64_MAX) {}\n+\n+  // Constructor for tests only, so we can test boundary conditions\n+  TopologicalIndex(\n+      const Node* input,\n+      const Node* output,\n+      int64_t defaultInterval,\n+      int64_t lowerBound,\n+      int64_t upperBound)\n+      : input_(input),\n+        output_(output),\n+        defaultInterval_(defaultInterval),\n+        lowerBound_(lowerBound),\n+        upperBound_(upperBound) {\n+    const auto midPoint = (lowerBound_ + upperBound_) / 2;\n+    // Put the output at the midpoint, because it's the head/tail of the\n+    // circular linked list of nodes.\n+    nodeToIndex_[output_] = midPoint;\n+    indexToNode_[midPoint] = output_;\n+\n+    // Put the input node somewhere way lower in the index\n+    const auto inputIndex = (lowerBound_ + midPoint) / 2;\n+    nodeToIndex_[input_] = inputIndex;\n+    indexToNode_[inputIndex] = input_;\n+  }\n+\n+  TopologicalIndex(const TopologicalIndex&) = delete;\n+  void operator=(const TopologicalIndex&) = delete;\n+\n+  // is `lhs` before `rhs`?\n+  bool isBefore(const Node* lhs, const Node* rhs) const {", "path": "torch/csrc/jit/topological_index.h", "position": null, "original_position": 56, "commit_id": "cfcc12376324b43a6a9a8ce1b23d4896a177d05e", "original_commit_id": "eaf6b2105088830beec59073018cbc63dc24e6b4", "user": {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, "body": "Seems like this should be a method on Node. Also needs a `same block` check.", "created_at": "2018-10-17T23:09:11Z", "updated_at": "2018-11-23T15:53:10Z", "html_url": "https://github.com/pytorch/pytorch/pull/12748#discussion_r226123430", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/12748", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/226123430"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/12748#discussion_r226123430"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/12748"}}, "body_html": "<p>Seems like this should be a method on Node. Also needs a <code>same block</code> check.</p>", "body_text": "Seems like this should be a method on Node. Also needs a same block check."}