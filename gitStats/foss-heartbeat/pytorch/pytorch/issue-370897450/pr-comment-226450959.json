{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/226450959", "pull_request_review_id": 166276324, "id": 226450959, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNjQ1MDk1OQ==", "diff_hunk": "@@ -0,0 +1,148 @@\n+#pragma once\n+\n+#include <c10/util/Exception.h>\n+#include <map>\n+#include <unordered_map>\n+\n+namespace torch {\n+namespace jit {\n+\n+template <typename T>\n+struct TopologicalIndex;\n+\n+struct Node;\n+using node_topological_index = TopologicalIndex<Node*>;\n+using topo_position_t = uint64_t;\n+\n+// Index to track a topological ordering of nodes. Owned by a block,\n+// representing the nodes in the block.\n+//\n+// This lets us answer questions like \"is this node before another node\"\n+// efficiently, which is useful for optimization. It should be kept up to date\n+// with node insertions/deletions by the owning block.\n+//\n+// The basic scheme is: nodes are assigned topological indices within a\n+// 64-bit space. Appending a node moves assigns a position that's a big interval\n+// higher than the last node, giving room for insertions in between. If we ever\n+// run out of room, we rebuild the index.\n+//\n+// NOTE: this relies on some implementation details of the node listing, so\n+// don't reuse without checking those assumptions.\n+template <typename T>", "path": "torch/csrc/jit/topological_index.h", "position": null, "original_position": 31, "commit_id": "cfcc12376324b43a6a9a8ce1b23d4896a177d05e", "original_commit_id": "f792535a9a937a618cd871c8b138c9a15ae7b86b", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "If it's so specific to nodes, why do we even have the template parameter? Do we ever expect to use it for anything else?", "created_at": "2018-10-18T20:19:24Z", "updated_at": "2018-11-23T15:53:15Z", "html_url": "https://github.com/pytorch/pytorch/pull/12748#discussion_r226450959", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/12748", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/226450959"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/12748#discussion_r226450959"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/12748"}}, "body_html": "<p>If it's so specific to nodes, why do we even have the template parameter? Do we ever expect to use it for anything else?</p>", "body_text": "If it's so specific to nodes, why do we even have the template parameter? Do we ever expect to use it for anything else?"}