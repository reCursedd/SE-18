{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/226484246", "pull_request_review_id": 166318828, "id": 226484246, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNjQ4NDI0Ng==", "diff_hunk": "@@ -0,0 +1,148 @@\n+#pragma once\n+\n+#include <c10/util/Exception.h>\n+#include <map>\n+#include <unordered_map>\n+\n+namespace torch {\n+namespace jit {\n+\n+template <typename T>\n+struct TopologicalIndex;\n+\n+struct Node;\n+using node_topological_index = TopologicalIndex<Node*>;\n+using topo_position_t = uint64_t;\n+\n+// Index to track a topological ordering of nodes. Owned by a block,\n+// representing the nodes in the block.\n+//\n+// This lets us answer questions like \"is this node before another node\"\n+// efficiently, which is useful for optimization. It should be kept up to date\n+// with node insertions/deletions by the owning block.\n+//\n+// The basic scheme is: nodes are assigned topological indices within a\n+// 64-bit space. Appending a node moves assigns a position that's a big interval\n+// higher than the last node, giving room for insertions in between. If we ever\n+// run out of room, we rebuild the index.\n+//\n+// NOTE: this relies on some implementation details of the node listing, so\n+// don't reuse without checking those assumptions.\n+template <typename T>\n+struct TopologicalIndex {\n+ private:\n+  // The node list is implemented as a circular linked list, with the output\n+  // node as the head/tail. Therefore, the index needs to treat \"appends\" to the\n+  // output as appends to the input.\n+  T input_;\n+  T output_;\n+\n+  // Lower and upper bounds of the index. Inclusive range.\n+  const topo_position_t lowerBound_;\n+  const topo_position_t upperBound_;\n+\n+  // How far away to space nodes that are appended to the graph.\n+  // should be 2^n, where:\n+  //   - n is the maximum number of repeated insertions without a re-index\n+  //   - 2^(64-n) is the maximum number of appends to the end without reindex\n+  const topo_position_t defaultInterval_;\n+\n+  std::map<topo_position_t, T> positionToObj_;\n+\n+ public:\n+  TopologicalIndex(T input, T output)\n+      : TopologicalIndex(\n+            input,\n+            output,\n+            0,\n+            UINT64_MAX,\n+            1099511627776ULL /* 2^40 */) {}", "path": "torch/csrc/jit/topological_index.h", "position": null, "original_position": 59, "commit_id": "cfcc12376324b43a6a9a8ce1b23d4896a177d05e", "original_commit_id": "f792535a9a937a618cd871c8b138c9a15ae7b86b", "user": {"login": "zou3519", "id": 5652049, "node_id": "MDQ6VXNlcjU2NTIwNDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/5652049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zou3519", "html_url": "https://github.com/zou3519", "followers_url": "https://api.github.com/users/zou3519/followers", "following_url": "https://api.github.com/users/zou3519/following{/other_user}", "gists_url": "https://api.github.com/users/zou3519/gists{/gist_id}", "starred_url": "https://api.github.com/users/zou3519/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zou3519/subscriptions", "organizations_url": "https://api.github.com/users/zou3519/orgs", "repos_url": "https://api.github.com/users/zou3519/repos", "events_url": "https://api.github.com/users/zou3519/events{/privacy}", "received_events_url": "https://api.github.com/users/zou3519/received_events", "type": "User", "site_admin": false}, "body": "https://github.com/pytorch/pytorch/blob/92890d43148089972b329cde7a5199b10319780b/torch/csrc/jit/passes/create_autodiff_subgraphs.cpp#L209 -- this bit of code ends up inserting the entire graph between the last node and the return node at some point. It can probably be rewritten to not do this", "created_at": "2018-10-18T22:20:46Z", "updated_at": "2018-11-23T15:53:16Z", "html_url": "https://github.com/pytorch/pytorch/pull/12748#discussion_r226484246", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/12748", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/226484246"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/12748#discussion_r226484246"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/12748"}}, "body_html": "<p><div class=\"border rounded-1 my-2\">\n  <div class=\"f6 px-3 py-2 lh-condensed border-bottom bg-gray-light\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/pytorch/pytorch/blob/92890d43148089972b329cde7a5199b10319780b/torch/csrc/jit/passes/create_autodiff_subgraphs.cpp#L209\">pytorch/torch/csrc/jit/passes/create_autodiff_subgraphs.cpp</a>\n    </p>\n    <p class=\"mb-0 text-gray-light\">\n         Line 209\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/pytorch/pytorch/commit/92890d43148089972b329cde7a5199b10319780b\">92890d4</a>\n    </p>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L209\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"209\"></td>\n          <td id=\"LC209\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> (*it)-&gt;<span class=\"pl-c1\">moveBefore</span>(block-&gt;<span class=\"pl-c1\">return_node</span>()); </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n -- this bit of code ends up inserting the entire graph between the last node and the return node at some point. It can probably be rewritten to not do this</p>", "body_text": "pytorch/torch/csrc/jit/passes/create_autodiff_subgraphs.cpp\n    \n    \n         Line 209\n      in\n      92890d4\n    \n    \n    \n    \n\n        \n          \n           (*it)->moveBefore(block->return_node()); \n        \n    \n  \n\n -- this bit of code ends up inserting the entire graph between the last node and the return node at some point. It can probably be rewritten to not do this", "in_reply_to_id": 226451220}