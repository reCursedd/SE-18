{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/226477964", "pull_request_review_id": 166302031, "id": 226477964, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNjQ3Nzk2NA==", "diff_hunk": "@@ -0,0 +1,148 @@\n+#pragma once\n+\n+#include <c10/util/Exception.h>\n+#include <map>\n+#include <unordered_map>\n+\n+namespace torch {\n+namespace jit {\n+\n+template <typename T>\n+struct TopologicalIndex;\n+\n+struct Node;\n+using node_topological_index = TopologicalIndex<Node*>;\n+using topo_position_t = uint64_t;\n+\n+// Index to track a topological ordering of nodes. Owned by a block,\n+// representing the nodes in the block.\n+//\n+// This lets us answer questions like \"is this node before another node\"\n+// efficiently, which is useful for optimization. It should be kept up to date\n+// with node insertions/deletions by the owning block.\n+//\n+// The basic scheme is: nodes are assigned topological indices within a\n+// 64-bit space. Appending a node moves assigns a position that's a big interval\n+// higher than the last node, giving room for insertions in between. If we ever\n+// run out of room, we rebuild the index.\n+//\n+// NOTE: this relies on some implementation details of the node listing, so\n+// don't reuse without checking those assumptions.\n+template <typename T>\n+struct TopologicalIndex {\n+ private:\n+  // The node list is implemented as a circular linked list, with the output\n+  // node as the head/tail. Therefore, the index needs to treat \"appends\" to the\n+  // output as appends to the input.\n+  T input_;\n+  T output_;\n+\n+  // Lower and upper bounds of the index. Inclusive range.\n+  const topo_position_t lowerBound_;\n+  const topo_position_t upperBound_;\n+\n+  // How far away to space nodes that are appended to the graph.\n+  // should be 2^n, where:\n+  //   - n is the maximum number of repeated insertions without a re-index\n+  //   - 2^(64-n) is the maximum number of appends to the end without reindex\n+  const topo_position_t defaultInterval_;\n+\n+  std::map<topo_position_t, T> positionToObj_;\n+\n+ public:\n+  TopologicalIndex(T input, T output)\n+      : TopologicalIndex(\n+            input,\n+            output,\n+            0,\n+            UINT64_MAX,\n+            1099511627776ULL /* 2^40 */) {}", "path": "torch/csrc/jit/topological_index.h", "position": null, "original_position": 59, "commit_id": "cfcc12376324b43a6a9a8ce1b23d4896a177d05e", "original_commit_id": "f792535a9a937a618cd871c8b138c9a15ae7b86b", "user": {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, "body": "When we discussed in person, I thought we were going to use 48bits for the integer part and 16bits for the increment, which would mean that defaultInterval should be  2^16.", "created_at": "2018-10-18T21:52:55Z", "updated_at": "2018-11-23T15:53:16Z", "html_url": "https://github.com/pytorch/pytorch/pull/12748#discussion_r226477964", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/12748", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/226477964"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/12748#discussion_r226477964"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/12748"}}, "body_html": "<p>When we discussed in person, I thought we were going to use 48bits for the integer part and 16bits for the increment, which would mean that defaultInterval should be  2^16.</p>", "body_text": "When we discussed in person, I thought we were going to use 48bits for the integer part and 16bits for the increment, which would mean that defaultInterval should be  2^16.", "in_reply_to_id": 226451220}