{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/226481379", "pull_request_review_id": 166302031, "id": 226481379, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNjQ4MTM3OQ==", "diff_hunk": "@@ -0,0 +1,148 @@\n+#pragma once\n+\n+#include <c10/util/Exception.h>\n+#include <map>\n+#include <unordered_map>\n+\n+namespace torch {\n+namespace jit {\n+\n+template <typename T>\n+struct TopologicalIndex;\n+\n+struct Node;\n+using node_topological_index = TopologicalIndex<Node*>;\n+using topo_position_t = uint64_t;\n+\n+// Index to track a topological ordering of nodes. Owned by a block,\n+// representing the nodes in the block.\n+//\n+// This lets us answer questions like \"is this node before another node\"\n+// efficiently, which is useful for optimization. It should be kept up to date\n+// with node insertions/deletions by the owning block.\n+//\n+// The basic scheme is: nodes are assigned topological indices within a\n+// 64-bit space. Appending a node moves assigns a position that's a big interval\n+// higher than the last node, giving room for insertions in between. If we ever\n+// run out of room, we rebuild the index.\n+//\n+// NOTE: this relies on some implementation details of the node listing, so\n+// don't reuse without checking those assumptions.\n+template <typename T>\n+struct TopologicalIndex {\n+ private:\n+  // The node list is implemented as a circular linked list, with the output\n+  // node as the head/tail. Therefore, the index needs to treat \"appends\" to the\n+  // output as appends to the input.\n+  T input_;\n+  T output_;\n+\n+  // Lower and upper bounds of the index. Inclusive range.\n+  const topo_position_t lowerBound_;\n+  const topo_position_t upperBound_;\n+\n+  // How far away to space nodes that are appended to the graph.\n+  // should be 2^n, where:\n+  //   - n is the maximum number of repeated insertions without a re-index\n+  //   - 2^(64-n) is the maximum number of appends to the end without reindex\n+  const topo_position_t defaultInterval_;\n+\n+  std::map<topo_position_t, T> positionToObj_;\n+\n+ public:\n+  TopologicalIndex(T input, T output)\n+      : TopologicalIndex(\n+            input,\n+            output,\n+            0,\n+            UINT64_MAX,\n+            1099511627776ULL /* 2^40 */) {}\n+\n+  // This constructor is for tests only, so we can test boundary conditions.\n+  TopologicalIndex(\n+      T input,\n+      T output,\n+      topo_position_t lowerBound,\n+      topo_position_t upperBound,\n+      topo_position_t defaultInterval)\n+      : input_(input),\n+        output_(output),\n+        lowerBound_(lowerBound),\n+        upperBound_(upperBound),\n+        defaultInterval_(defaultInterval) {\n+    AT_ASSERT(upperBound_ > lowerBound_);\n+\n+    setPos(input_, lowerBound_);\n+\n+    // Don't put the output node in the index, since that would prevent us from\n+    // appending efficiently. Instead just give it the max index for comparison\n+    output_->topo_position_ = upperBound_;\n+  }\n+\n+  TopologicalIndex(const TopologicalIndex&) = delete;\n+  void operator=(const TopologicalIndex&) = delete;\n+\n+  // Insert `toInsert` after `insertPoint` in the topological index\n+  void insertAfter(T insertPoint, T toInsert) {", "path": "torch/csrc/jit/topological_index.h", "position": null, "original_position": 86, "commit_id": "cfcc12376324b43a6a9a8ce1b23d4896a177d05e", "original_commit_id": "f792535a9a937a618cd871c8b138c9a15ae7b86b", "user": {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, "body": "There is no need for any auxillary data structures like positionToObj_. This function can be implemented as:\r\n\r\n```\r\nvoid assignTopoPosition(Node* just_inserted) {\r\n    auto return_node = just_inserted->owningBlock()->return_node();\r\n    // append\r\n    if(just_inserted->next() == return_node) {\r\n      // appending to the end of the list:\r\n      toInsert->topo_position = upperBound_ += interval;\r\n      if(upperBound_ wrapped around) {\r\n        renumber();\r\n      }\r\n    // prepend\r\n    } else if(just_inserted->prev() == return_node) {\r\n      // prepend list:\r\n      toInsert->topo_position = lowerBound_ -= interval;\r\n      if(lowerBound_ wrapped around) {\r\n        renumber();\r\n      }\r\n    } else {\r\n      Node* prev = insert_point->prev();\r\n      Node* next = insert_point->next(); \r\n      if(prev->topo_position + 1 == next->topo_position)\r\n        renumber(); \r\n      just_inserted->topo_position = (prev->topo_position + next->topo_position) / 2;\r\n    }\r\n  }\r\n```", "created_at": "2018-10-18T22:07:30Z", "updated_at": "2018-11-23T15:53:16Z", "html_url": "https://github.com/pytorch/pytorch/pull/12748#discussion_r226481379", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/12748", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/226481379"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/12748#discussion_r226481379"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/12748"}}, "body_html": "<p>There is no need for any auxillary data structures like positionToObj_. This function can be implemented as:</p>\n<pre><code>void assignTopoPosition(Node* just_inserted) {\n    auto return_node = just_inserted-&gt;owningBlock()-&gt;return_node();\n    // append\n    if(just_inserted-&gt;next() == return_node) {\n      // appending to the end of the list:\n      toInsert-&gt;topo_position = upperBound_ += interval;\n      if(upperBound_ wrapped around) {\n        renumber();\n      }\n    // prepend\n    } else if(just_inserted-&gt;prev() == return_node) {\n      // prepend list:\n      toInsert-&gt;topo_position = lowerBound_ -= interval;\n      if(lowerBound_ wrapped around) {\n        renumber();\n      }\n    } else {\n      Node* prev = insert_point-&gt;prev();\n      Node* next = insert_point-&gt;next(); \n      if(prev-&gt;topo_position + 1 == next-&gt;topo_position)\n        renumber(); \n      just_inserted-&gt;topo_position = (prev-&gt;topo_position + next-&gt;topo_position) / 2;\n    }\n  }\n</code></pre>", "body_text": "There is no need for any auxillary data structures like positionToObj_. This function can be implemented as:\nvoid assignTopoPosition(Node* just_inserted) {\n    auto return_node = just_inserted->owningBlock()->return_node();\n    // append\n    if(just_inserted->next() == return_node) {\n      // appending to the end of the list:\n      toInsert->topo_position = upperBound_ += interval;\n      if(upperBound_ wrapped around) {\n        renumber();\n      }\n    // prepend\n    } else if(just_inserted->prev() == return_node) {\n      // prepend list:\n      toInsert->topo_position = lowerBound_ -= interval;\n      if(lowerBound_ wrapped around) {\n        renumber();\n      }\n    } else {\n      Node* prev = insert_point->prev();\n      Node* next = insert_point->next(); \n      if(prev->topo_position + 1 == next->topo_position)\n        renumber(); \n      just_inserted->topo_position = (prev->topo_position + next->topo_position) / 2;\n    }\n  }"}