{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/226451535", "pull_request_review_id": 166276324, "id": 226451535, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNjQ1MTUzNQ==", "diff_hunk": "@@ -0,0 +1,148 @@\n+#pragma once\n+\n+#include <c10/util/Exception.h>\n+#include <map>\n+#include <unordered_map>\n+\n+namespace torch {\n+namespace jit {\n+\n+template <typename T>\n+struct TopologicalIndex;\n+\n+struct Node;\n+using node_topological_index = TopologicalIndex<Node*>;\n+using topo_position_t = uint64_t;\n+\n+// Index to track a topological ordering of nodes. Owned by a block,\n+// representing the nodes in the block.\n+//\n+// This lets us answer questions like \"is this node before another node\"\n+// efficiently, which is useful for optimization. It should be kept up to date\n+// with node insertions/deletions by the owning block.\n+//\n+// The basic scheme is: nodes are assigned topological indices within a\n+// 64-bit space. Appending a node moves assigns a position that's a big interval\n+// higher than the last node, giving room for insertions in between. If we ever\n+// run out of room, we rebuild the index.\n+//\n+// NOTE: this relies on some implementation details of the node listing, so\n+// don't reuse without checking those assumptions.\n+template <typename T>\n+struct TopologicalIndex {\n+ private:\n+  // The node list is implemented as a circular linked list, with the output\n+  // node as the head/tail. Therefore, the index needs to treat \"appends\" to the\n+  // output as appends to the input.\n+  T input_;\n+  T output_;\n+\n+  // Lower and upper bounds of the index. Inclusive range.\n+  const topo_position_t lowerBound_;\n+  const topo_position_t upperBound_;\n+\n+  // How far away to space nodes that are appended to the graph.\n+  // should be 2^n, where:\n+  //   - n is the maximum number of repeated insertions without a re-index\n+  //   - 2^(64-n) is the maximum number of appends to the end without reindex\n+  const topo_position_t defaultInterval_;\n+\n+  std::map<topo_position_t, T> positionToObj_;\n+\n+ public:\n+  TopologicalIndex(T input, T output)\n+      : TopologicalIndex(\n+            input,\n+            output,\n+            0,\n+            UINT64_MAX,\n+            1099511627776ULL /* 2^40 */) {}\n+\n+  // This constructor is for tests only, so we can test boundary conditions.\n+  TopologicalIndex(\n+      T input,\n+      T output,\n+      topo_position_t lowerBound,\n+      topo_position_t upperBound,\n+      topo_position_t defaultInterval)\n+      : input_(input),\n+        output_(output),\n+        lowerBound_(lowerBound),\n+        upperBound_(upperBound),\n+        defaultInterval_(defaultInterval) {\n+    AT_ASSERT(upperBound_ > lowerBound_);\n+\n+    setPos(input_, lowerBound_);\n+\n+    // Don't put the output node in the index, since that would prevent us from\n+    // appending efficiently. Instead just give it the max index for comparison\n+    output_->topo_position_ = upperBound_;\n+  }\n+\n+  TopologicalIndex(const TopologicalIndex&) = delete;\n+  void operator=(const TopologicalIndex&) = delete;\n+\n+  // Insert `toInsert` after `insertPoint` in the topological index\n+  void insertAfter(T insertPoint, T toInsert) {\n+    if (insertPoint == output_) {\n+      // see note on input_/output_\n+      return insertAfter(input_, toInsert);\n+    }\n+\n+    auto indexIter = positionToObj_.find(insertPoint->topo_position_);\n+    AT_ASSERT(indexIter != positionToObj_.end());\n+    const auto insertPos = indexIter->first;\n+\n+    // Are we the last node?\n+    if (indexIter->second == positionToObj_.rbegin()->second) {\n+      // check if we're running off the end of the index\n+      if (insertPos >= (upperBound_ - defaultInterval_)) {\n+        reIndex();\n+        return insertAfter(insertPoint, toInsert);\n+      }\n+\n+      // Move down a suitably vast distance and add the node\n+      const auto newIndex = insertPoint->topo_position_ + defaultInterval_;\n+      setPos(toInsert, newIndex);\n+    } else {\n+      // We're between two nodes, so insert between them.\n+      indexIter++;\n+      const topo_position_t nextPos = indexIter->first;\n+\n+      // Please mind integer overflow if changing this forumula\n+      const topo_position_t posBetween = insertPos + (nextPos - insertPos) / 2;\n+\n+      if (positionToObj_.count(posBetween) != 0) {\n+        // If we can't find a new spot, reindex and try again\n+        reIndex();\n+        return insertAfter(insertPoint, toInsert);\n+      }\n+\n+      setPos(toInsert, posBetween);\n+    }\n+  }\n+\n+ private:\n+  // update mappings of objs to the their topological index\n+  void setPos(T obj, topo_position_t pos) {\n+    positionToObj_[pos] = obj;\n+    obj->topo_position_ = pos;\n+  }\n+\n+  // If we run out of space between nodes we need to rebuild the index and\n+  // \"spread out\" the nodes again.\n+  void reIndex() {\n+    AT_ASSERT(upperBound_ / defaultInterval_ > positionToObj_.size());\n+    std::map<topo_position_t, T> newIndexToObj;\n+\n+    auto curPos = lowerBound_;\n+    for (const auto pr : positionToObj_) {\n+      newIndexToObj[curPos] = pr.second;\n+      pr.second->topo_position_ = curPos;", "path": "torch/csrc/jit/topological_index.h", "position": null, "original_position": 141, "commit_id": "cfcc12376324b43a6a9a8ce1b23d4896a177d05e", "original_commit_id": "f792535a9a937a618cd871c8b138c9a15ae7b86b", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "This might dereference a destroyed node, since the data structure as it is today doesn't support deletion.", "created_at": "2018-10-18T20:21:10Z", "updated_at": "2018-11-23T15:53:15Z", "html_url": "https://github.com/pytorch/pytorch/pull/12748#discussion_r226451535", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/12748", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/226451535"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/12748#discussion_r226451535"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/12748"}}, "body_html": "<p>This might dereference a destroyed node, since the data structure as it is today doesn't support deletion.</p>", "body_text": "This might dereference a destroyed node, since the data structure as it is today doesn't support deletion."}