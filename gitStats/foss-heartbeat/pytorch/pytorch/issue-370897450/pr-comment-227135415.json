{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/227135415", "pull_request_review_id": 167104908, "id": 227135415, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNzEzNTQxNQ==", "diff_hunk": "@@ -650,6 +683,62 @@ bool Node::isNondeterministic() const {\n   return true;\n }\n \n+// Assign this node a topological position, to facilitate fast isBefore() and\n+// isAfter() queries. Must be called right after a node is inserted into the\n+// node list.\n+//\n+// The basic scheme is: assign every node a position (uint64_t).  The common\n+// case (appending to the end of the graph) is made more efficient by advancing\n+// a fixed interval past the previous node and placing `this` there. Otherwise,\n+// assign `this` a position at the midpoint between its prev() and next()\n+// nodes.\n+//\n+// If we ever run out of space (by, e.g. inserting too much in place), we\n+// reindex by spreading out all the nodes again.\n+void Node::assignTopoPosition() {\n+  auto returnNode = owningBlock()->return_node();\n+  const auto prevPos = prev()->topo_position_;\n+  const auto nextPos = next()->topo_position_;\n+\n+  // Append to the end of the graph\n+  if (next() == returnNode) {\n+    if (next() == prev()) {\n+      // the node list is empty, assign the first position\n+      topo_position_ = kMidPoint;\n+      return;\n+    }\n+\n+    if (prevPos >= (kUpperBound - kAppendInterval)) {\n+      // we're running off the edge\n+      owningBlock()->reIndexTopology();\n+      return assignTopoPosition();", "path": "torch/csrc/jit/ir.cpp", "position": null, "original_position": 79, "commit_id": "cfcc12376324b43a6a9a8ce1b23d4896a177d05e", "original_commit_id": "84677b9d0485ceb56552a25eaf016cca80e94a89", "user": {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, "body": "The recursive call to `assignTopoPosition()` is redundant, right? It gets assigned as part of `reIndexTopology()` since it is already a member of the `nodes()` list.", "created_at": "2018-10-22T20:56:34Z", "updated_at": "2018-11-23T15:53:22Z", "html_url": "https://github.com/pytorch/pytorch/pull/12748#discussion_r227135415", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/12748", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/227135415"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/12748#discussion_r227135415"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/12748"}}, "body_html": "<p>The recursive call to <code>assignTopoPosition()</code> is redundant, right? It gets assigned as part of <code>reIndexTopology()</code> since it is already a member of the <code>nodes()</code> list.</p>", "body_text": "The recursive call to assignTopoPosition() is redundant, right? It gets assigned as part of reIndexTopology() since it is already a member of the nodes() list."}