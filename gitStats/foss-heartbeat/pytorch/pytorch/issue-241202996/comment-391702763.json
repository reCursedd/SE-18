{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/391702763", "html_url": "https://github.com/pytorch/pytorch/issues/2001#issuecomment-391702763", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/2001", "id": 391702763, "node_id": "MDEyOklzc3VlQ29tbWVudDM5MTcwMjc2Mw==", "user": {"login": "ShuvenduBikash", "id": 15250337, "node_id": "MDQ6VXNlcjE1MjUwMzM3", "avatar_url": "https://avatars0.githubusercontent.com/u/15250337?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ShuvenduBikash", "html_url": "https://github.com/ShuvenduBikash", "followers_url": "https://api.github.com/users/ShuvenduBikash/followers", "following_url": "https://api.github.com/users/ShuvenduBikash/following{/other_user}", "gists_url": "https://api.github.com/users/ShuvenduBikash/gists{/gist_id}", "starred_url": "https://api.github.com/users/ShuvenduBikash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ShuvenduBikash/subscriptions", "organizations_url": "https://api.github.com/users/ShuvenduBikash/orgs", "repos_url": "https://api.github.com/users/ShuvenduBikash/repos", "events_url": "https://api.github.com/users/ShuvenduBikash/events{/privacy}", "received_events_url": "https://api.github.com/users/ShuvenduBikash/received_events", "type": "User", "site_admin": false}, "created_at": "2018-05-24T12:50:56Z", "updated_at": "2018-05-24T12:54:52Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=13004360\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ncullen93\">@ncullen93</a>  It does not work with sequential() function. Do you have a solution for this?</p>\n<pre><code>class Discriminator(nn.Module):\n    def __init__(self, in_channels=3):\n        super(Discriminator, self).__init__()\n\n        def discriminator_block(in_filters, out_filters, normalize=True):\n            \"\"\"Returns downsampling layers of each discriminator block\"\"\"\n            layers = [nn.Conv2d(in_filters, out_filters, 4, stride=2, padding=1)]\n            if normalize:\n                layers.append(nn.InstanceNorm2d(out_filters))\n            layers.append(nn.LeakyReLU(0.2, inplace=True))\n            return layers\n\n        self.model = nn.Sequential(\n            *discriminator_block(in_channels, 64, normalize=False),\n            *discriminator_block(64, 128),\n            *discriminator_block(128, 256),\n            *discriminator_block(256, 512),\n            nn.ZeroPad2d((1, 0, 1, 0)),\n            nn.Conv2d(512, 1, 4, padding=1)\n        )\n\n    def forward(self, img):\n        return self.model(img)\n\n</code></pre>\n<pre><code>Traceback (most recent call last):\n  File \".\\test.py\", line 118, in &lt;module&gt;\n    summary(model, (3, 28, 28))\n  File \"C:\\Users\\bikas\\Anaconda3\\lib\\site-packages\\torchsummary\\torchsummary.py\", line 57, in summary\n    model(x)\n  File \"C:\\Users\\bikas\\Anaconda3\\lib\\site-packages\\torch\\nn\\modules\\module.py\", line 491, in __call__\n    result = self.forward(*input, **kwargs)\n  File \".\\test.py\", line 93, in forward\n    return self.model(img)\n  File \"C:\\Users\\bikas\\Anaconda3\\lib\\site-packages\\torch\\nn\\modules\\module.py\", line 491, in __call__\n    result = self.forward(*input, **kwargs)\n  File \"C:\\Users\\bikas\\Anaconda3\\lib\\site-packages\\torch\\nn\\modules\\container.py\", line 91, in forward\n    input = module(input)\n  File \"C:\\Users\\bikas\\Anaconda3\\lib\\site-packages\\torch\\nn\\modules\\module.py\", line 493, in __call__\n    hook_result = hook(self, input, result)\n  File \"C:\\Users\\bikas\\Anaconda3\\lib\\site-packages\\torchsummary\\torchsummary.py\", line 26, in hook\n    params += torch.prod(torch.LongTensor(list(module.weight.size())))\nAttributeError: 'NoneType' object has no attribute 'size'\n</code></pre>", "body_text": "@ncullen93  It does not work with sequential() function. Do you have a solution for this?\nclass Discriminator(nn.Module):\n    def __init__(self, in_channels=3):\n        super(Discriminator, self).__init__()\n\n        def discriminator_block(in_filters, out_filters, normalize=True):\n            \"\"\"Returns downsampling layers of each discriminator block\"\"\"\n            layers = [nn.Conv2d(in_filters, out_filters, 4, stride=2, padding=1)]\n            if normalize:\n                layers.append(nn.InstanceNorm2d(out_filters))\n            layers.append(nn.LeakyReLU(0.2, inplace=True))\n            return layers\n\n        self.model = nn.Sequential(\n            *discriminator_block(in_channels, 64, normalize=False),\n            *discriminator_block(64, 128),\n            *discriminator_block(128, 256),\n            *discriminator_block(256, 512),\n            nn.ZeroPad2d((1, 0, 1, 0)),\n            nn.Conv2d(512, 1, 4, padding=1)\n        )\n\n    def forward(self, img):\n        return self.model(img)\n\n\nTraceback (most recent call last):\n  File \".\\test.py\", line 118, in <module>\n    summary(model, (3, 28, 28))\n  File \"C:\\Users\\bikas\\Anaconda3\\lib\\site-packages\\torchsummary\\torchsummary.py\", line 57, in summary\n    model(x)\n  File \"C:\\Users\\bikas\\Anaconda3\\lib\\site-packages\\torch\\nn\\modules\\module.py\", line 491, in __call__\n    result = self.forward(*input, **kwargs)\n  File \".\\test.py\", line 93, in forward\n    return self.model(img)\n  File \"C:\\Users\\bikas\\Anaconda3\\lib\\site-packages\\torch\\nn\\modules\\module.py\", line 491, in __call__\n    result = self.forward(*input, **kwargs)\n  File \"C:\\Users\\bikas\\Anaconda3\\lib\\site-packages\\torch\\nn\\modules\\container.py\", line 91, in forward\n    input = module(input)\n  File \"C:\\Users\\bikas\\Anaconda3\\lib\\site-packages\\torch\\nn\\modules\\module.py\", line 493, in __call__\n    hook_result = hook(self, input, result)\n  File \"C:\\Users\\bikas\\Anaconda3\\lib\\site-packages\\torchsummary\\torchsummary.py\", line 26, in hook\n    params += torch.prod(torch.LongTensor(list(module.weight.size())))\nAttributeError: 'NoneType' object has no attribute 'size'", "body": "@ncullen93  It does not work with sequential() function. Do you have a solution for this?\r\n\r\n```\r\nclass Discriminator(nn.Module):\r\n    def __init__(self, in_channels=3):\r\n        super(Discriminator, self).__init__()\r\n\r\n        def discriminator_block(in_filters, out_filters, normalize=True):\r\n            \"\"\"Returns downsampling layers of each discriminator block\"\"\"\r\n            layers = [nn.Conv2d(in_filters, out_filters, 4, stride=2, padding=1)]\r\n            if normalize:\r\n                layers.append(nn.InstanceNorm2d(out_filters))\r\n            layers.append(nn.LeakyReLU(0.2, inplace=True))\r\n            return layers\r\n\r\n        self.model = nn.Sequential(\r\n            *discriminator_block(in_channels, 64, normalize=False),\r\n            *discriminator_block(64, 128),\r\n            *discriminator_block(128, 256),\r\n            *discriminator_block(256, 512),\r\n            nn.ZeroPad2d((1, 0, 1, 0)),\r\n            nn.Conv2d(512, 1, 4, padding=1)\r\n        )\r\n\r\n    def forward(self, img):\r\n        return self.model(img)\r\n\r\n```\r\n\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \".\\test.py\", line 118, in <module>\r\n    summary(model, (3, 28, 28))\r\n  File \"C:\\Users\\bikas\\Anaconda3\\lib\\site-packages\\torchsummary\\torchsummary.py\", line 57, in summary\r\n    model(x)\r\n  File \"C:\\Users\\bikas\\Anaconda3\\lib\\site-packages\\torch\\nn\\modules\\module.py\", line 491, in __call__\r\n    result = self.forward(*input, **kwargs)\r\n  File \".\\test.py\", line 93, in forward\r\n    return self.model(img)\r\n  File \"C:\\Users\\bikas\\Anaconda3\\lib\\site-packages\\torch\\nn\\modules\\module.py\", line 491, in __call__\r\n    result = self.forward(*input, **kwargs)\r\n  File \"C:\\Users\\bikas\\Anaconda3\\lib\\site-packages\\torch\\nn\\modules\\container.py\", line 91, in forward\r\n    input = module(input)\r\n  File \"C:\\Users\\bikas\\Anaconda3\\lib\\site-packages\\torch\\nn\\modules\\module.py\", line 493, in __call__\r\n    hook_result = hook(self, input, result)\r\n  File \"C:\\Users\\bikas\\Anaconda3\\lib\\site-packages\\torchsummary\\torchsummary.py\", line 26, in hook\r\n    params += torch.prod(torch.LongTensor(list(module.weight.size())))\r\nAttributeError: 'NoneType' object has no attribute 'size'\r\n```"}