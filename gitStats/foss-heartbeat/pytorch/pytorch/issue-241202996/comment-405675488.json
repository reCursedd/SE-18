{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/405675488", "html_url": "https://github.com/pytorch/pytorch/issues/2001#issuecomment-405675488", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/2001", "id": 405675488, "node_id": "MDEyOklzc3VlQ29tbWVudDQwNTY3NTQ4OA==", "user": {"login": "jongwook", "id": 266841, "node_id": "MDQ6VXNlcjI2Njg0MQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/266841?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jongwook", "html_url": "https://github.com/jongwook", "followers_url": "https://api.github.com/users/jongwook/followers", "following_url": "https://api.github.com/users/jongwook/following{/other_user}", "gists_url": "https://api.github.com/users/jongwook/gists{/gist_id}", "starred_url": "https://api.github.com/users/jongwook/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jongwook/subscriptions", "organizations_url": "https://api.github.com/users/jongwook/orgs", "repos_url": "https://api.github.com/users/jongwook/repos", "events_url": "https://api.github.com/users/jongwook/events{/privacy}", "received_events_url": "https://api.github.com/users/jongwook/received_events", "type": "User", "site_admin": false}, "created_at": "2018-07-17T18:11:09Z", "updated_at": "2018-07-22T07:15:20Z", "author_association": "CONTRIBUTOR", "body_html": "<p>I like the tree format of the builtin <code>__repr__()</code> but wanted to show the number of parameters, like:</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://user-images.githubusercontent.com/266841/42837079-013e5d74-89cb-11e8-9b49-25197774e743.png\"><img src=\"https://user-images.githubusercontent.com/266841/42837079-013e5d74-89cb-11e8-9b49-25197774e743.png\" alt=\"image\" style=\"max-width:100%;\"></a></p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> sys\n<span class=\"pl-k\">from</span> functools <span class=\"pl-k\">import</span> <span class=\"pl-v\">reduce</span>\n\n<span class=\"pl-k\">from</span> torch.nn.modules.module <span class=\"pl-k\">import</span> _addindent\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">summary</span>(<span class=\"pl-smi\">model</span>, <span class=\"pl-smi\">file</span><span class=\"pl-k\">=</span>sys.stderr):\n    <span class=\"pl-k\">def</span> <span class=\"pl-c1\">repr</span>(<span class=\"pl-smi\">model</span>):\n        <span class=\"pl-c\"><span class=\"pl-c\">#</span> We treat the extra repr like the sub-module, one item per line</span>\n        extra_lines <span class=\"pl-k\">=</span> []\n        extra_repr <span class=\"pl-k\">=</span> model.extra_repr()\n        <span class=\"pl-c\"><span class=\"pl-c\">#</span> empty string will be split into list ['']</span>\n        <span class=\"pl-k\">if</span> extra_repr:\n            extra_lines <span class=\"pl-k\">=</span> extra_repr.split(<span class=\"pl-s\"><span class=\"pl-pds\">'</span><span class=\"pl-cce\">\\n</span><span class=\"pl-pds\">'</span></span>)\n        child_lines <span class=\"pl-k\">=</span> []\n        total_params <span class=\"pl-k\">=</span> <span class=\"pl-c1\">0</span>\n        <span class=\"pl-k\">for</span> key, module <span class=\"pl-k\">in</span> model._modules.items():\n            mod_str, num_params <span class=\"pl-k\">=</span> <span class=\"pl-c1\">repr</span>(module)\n            mod_str <span class=\"pl-k\">=</span> _addindent(mod_str, <span class=\"pl-c1\">2</span>)\n            child_lines.append(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>(<span class=\"pl-pds\">'</span></span> <span class=\"pl-k\">+</span> key <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>): <span class=\"pl-pds\">'</span></span> <span class=\"pl-k\">+</span> mod_str)\n            total_params <span class=\"pl-k\">+=</span> num_params\n        lines <span class=\"pl-k\">=</span> extra_lines <span class=\"pl-k\">+</span> child_lines\n\n        <span class=\"pl-k\">for</span> name, p <span class=\"pl-k\">in</span> model._parameters.items():\n            total_params <span class=\"pl-k\">+=</span> <span class=\"pl-v\">reduce</span>(<span class=\"pl-k\">lambda</span> <span class=\"pl-smi\">x</span>, <span class=\"pl-smi\">y</span>: x <span class=\"pl-k\">*</span> y, p.shape)\n\n        main_str <span class=\"pl-k\">=</span> model._get_name() <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>(<span class=\"pl-pds\">'</span></span>\n        <span class=\"pl-k\">if</span> lines:\n            <span class=\"pl-c\"><span class=\"pl-c\">#</span> simple one-liner info, which most builtin Modules will use</span>\n            <span class=\"pl-k\">if</span> <span class=\"pl-c1\">len</span>(extra_lines) <span class=\"pl-k\">==</span> <span class=\"pl-c1\">1</span> <span class=\"pl-k\">and</span> <span class=\"pl-k\">not</span> child_lines:\n                main_str <span class=\"pl-k\">+=</span> extra_lines[<span class=\"pl-c1\">0</span>]\n            <span class=\"pl-k\">else</span>:\n                main_str <span class=\"pl-k\">+=</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span><span class=\"pl-cce\">\\n</span>  <span class=\"pl-pds\">'</span></span> <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span><span class=\"pl-cce\">\\n</span>  <span class=\"pl-pds\">'</span></span>.join(lines) <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span><span class=\"pl-cce\">\\n</span><span class=\"pl-pds\">'</span></span>\n\n        main_str <span class=\"pl-k\">+=</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>)<span class=\"pl-pds\">'</span></span>\n        <span class=\"pl-k\">if</span> <span class=\"pl-v\">file</span> <span class=\"pl-k\">is</span> sys.stderr:\n            main_str <span class=\"pl-k\">+=</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>, <span class=\"pl-cce\">\\033</span>[92m<span class=\"pl-c1\">{<span class=\"pl-k\">:,</span>}</span><span class=\"pl-cce\">\\033</span>[0m params<span class=\"pl-pds\">'</span></span>.format(total_params)\n        <span class=\"pl-k\">else</span>:\n            main_str <span class=\"pl-k\">+=</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>, <span class=\"pl-c1\">{<span class=\"pl-k\">:,</span>}</span> params<span class=\"pl-pds\">'</span></span>.format(total_params)\n        <span class=\"pl-k\">return</span> main_str, total_params\n\n    string, count <span class=\"pl-k\">=</span> <span class=\"pl-c1\">repr</span>(model)\n    <span class=\"pl-k\">if</span> <span class=\"pl-v\">file</span> <span class=\"pl-k\">is</span> <span class=\"pl-k\">not</span> <span class=\"pl-c1\">None</span>:\n        <span class=\"pl-c1\">print</span>(string, <span class=\"pl-v\">file</span><span class=\"pl-k\">=</span><span class=\"pl-v\">file</span>)\n    <span class=\"pl-k\">return</span> count</pre></div>", "body_text": "I like the tree format of the builtin __repr__() but wanted to show the number of parameters, like:\n\nimport sys\nfrom functools import reduce\n\nfrom torch.nn.modules.module import _addindent\n\ndef summary(model, file=sys.stderr):\n    def repr(model):\n        # We treat the extra repr like the sub-module, one item per line\n        extra_lines = []\n        extra_repr = model.extra_repr()\n        # empty string will be split into list ['']\n        if extra_repr:\n            extra_lines = extra_repr.split('\\n')\n        child_lines = []\n        total_params = 0\n        for key, module in model._modules.items():\n            mod_str, num_params = repr(module)\n            mod_str = _addindent(mod_str, 2)\n            child_lines.append('(' + key + '): ' + mod_str)\n            total_params += num_params\n        lines = extra_lines + child_lines\n\n        for name, p in model._parameters.items():\n            total_params += reduce(lambda x, y: x * y, p.shape)\n\n        main_str = model._get_name() + '('\n        if lines:\n            # simple one-liner info, which most builtin Modules will use\n            if len(extra_lines) == 1 and not child_lines:\n                main_str += extra_lines[0]\n            else:\n                main_str += '\\n  ' + '\\n  '.join(lines) + '\\n'\n\n        main_str += ')'\n        if file is sys.stderr:\n            main_str += ', \\033[92m{:,}\\033[0m params'.format(total_params)\n        else:\n            main_str += ', {:,} params'.format(total_params)\n        return main_str, total_params\n\n    string, count = repr(model)\n    if file is not None:\n        print(string, file=file)\n    return count", "body": "I like the tree format of the builtin `__repr__()` but wanted to show the number of parameters, like: \r\n\r\n![image](https://user-images.githubusercontent.com/266841/42837079-013e5d74-89cb-11e8-9b49-25197774e743.png)\r\n\r\n```python\r\nimport sys\r\nfrom functools import reduce\r\n\r\nfrom torch.nn.modules.module import _addindent\r\n\r\ndef summary(model, file=sys.stderr):\r\n    def repr(model):\r\n        # We treat the extra repr like the sub-module, one item per line\r\n        extra_lines = []\r\n        extra_repr = model.extra_repr()\r\n        # empty string will be split into list ['']\r\n        if extra_repr:\r\n            extra_lines = extra_repr.split('\\n')\r\n        child_lines = []\r\n        total_params = 0\r\n        for key, module in model._modules.items():\r\n            mod_str, num_params = repr(module)\r\n            mod_str = _addindent(mod_str, 2)\r\n            child_lines.append('(' + key + '): ' + mod_str)\r\n            total_params += num_params\r\n        lines = extra_lines + child_lines\r\n\r\n        for name, p in model._parameters.items():\r\n            total_params += reduce(lambda x, y: x * y, p.shape)\r\n\r\n        main_str = model._get_name() + '('\r\n        if lines:\r\n            # simple one-liner info, which most builtin Modules will use\r\n            if len(extra_lines) == 1 and not child_lines:\r\n                main_str += extra_lines[0]\r\n            else:\r\n                main_str += '\\n  ' + '\\n  '.join(lines) + '\\n'\r\n\r\n        main_str += ')'\r\n        if file is sys.stderr:\r\n            main_str += ', \\033[92m{:,}\\033[0m params'.format(total_params)\r\n        else:\r\n            main_str += ', {:,} params'.format(total_params)\r\n        return main_str, total_params\r\n\r\n    string, count = repr(model)\r\n    if file is not None:\r\n        print(string, file=file)\r\n    return count\r\n```\r\n"}