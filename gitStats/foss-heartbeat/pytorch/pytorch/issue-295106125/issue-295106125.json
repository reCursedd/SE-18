{"url": "https://api.github.com/repos/pytorch/pytorch/issues/5106", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/5106/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/5106/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/5106/events", "html_url": "https://github.com/pytorch/pytorch/issues/5106", "id": 295106125, "node_id": "MDU6SXNzdWUyOTUxMDYxMjU=", "number": 5106, "title": "Saving model with runtime code changes", "user": {"login": "Berndinio", "id": 32815508, "node_id": "MDQ6VXNlcjMyODE1NTA4", "avatar_url": "https://avatars0.githubusercontent.com/u/32815508?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Berndinio", "html_url": "https://github.com/Berndinio", "followers_url": "https://api.github.com/users/Berndinio/followers", "following_url": "https://api.github.com/users/Berndinio/following{/other_user}", "gists_url": "https://api.github.com/users/Berndinio/gists{/gist_id}", "starred_url": "https://api.github.com/users/Berndinio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Berndinio/subscriptions", "organizations_url": "https://api.github.com/users/Berndinio/orgs", "repos_url": "https://api.github.com/users/Berndinio/repos", "events_url": "https://api.github.com/users/Berndinio/events{/privacy}", "received_events_url": "https://api.github.com/users/Berndinio/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-02-07T11:40:37Z", "updated_at": "2018-02-07T11:40:37Z", "closed_at": null, "author_association": "NONE", "body_html": "<ul>\n<li>OS: Ubuntu 16.04</li>\n<li>PyTorch version: 0.3.0.post4</li>\n<li>How you installed PyTorch (conda, pip, source): pip</li>\n<li>Python version: python 3.5.2</li>\n</ul>\n<p>There is a bug in saving and loading the model with torch.save(...) and torch.load(...).<br>\nWorkflow of bug:</p>\n<ol>\n<li>Create neural network code and start learning loop. Model gets saved every 100 epoch with torch.save(...).</li>\n<li>Change the neural network code and save code, while the learning loop from step 1 is still running.</li>\n<li>Let training loop run until the next save of neural network.</li>\n<li>Loading the last save with the neural network code from step 1 causes a warning (SourceChangeWarning). Also if you open the save file, there will be the changed code from step 2 instead of from step 1.</li>\n</ol>\n<p>Short:<br>\nIf you change the code of the neural network while runtime, a false code copy will be saved into the torch.save(...) file. Which causes a warning, if I want to load it with the original network code again.</p>\n<p>Loading code:<br>\n<code>self.optimizeNet = torch.load(pacPretrained, map_location=lambda storage, loc: storage)</code></p>\n<p>Saving code:<br>\n<code>torch.save(self.optimizeNet, \"saves2/\"+str(ep)+'th-episode.pt')</code></p>\n<p>Neural network:</p>\n<pre><code>class DQN(nn.Module):\n    def __init__(self):\n        super(DQN, self).__init__()\n        #smallGrid = kernel_size=3, stride=1\n        self.conv1 = nn.Conv2d(3, 16, kernel_size=3, stride=1)\n        self.bn1 = nn.BatchNorm2d(16)\n        self.conv2 = nn.Conv2d(16, 32, kernel_size=3, stride=1)\n        self.bn2 = nn.BatchNorm2d(32)\n        self.conv3 = nn.Conv2d(32, 32, kernel_size=3, stride=1)\n        self.bn3 = nn.BatchNorm2d(32)\n        self.head = nn.Linear(1088, 512)\n        self.head2 = nn.Linear(513, 256)\n        self.head3 = nn.Linear(256, 5)\n\n        self.lastLayer = 3\n\n    def forward(self, x, numCarry):\n        x = F.relu(self.bn1(self.conv1(x)))\n        x = F.relu(self.bn2(self.conv2(x)))\n        x = F.relu(self.bn3(self.conv3(x)))\n        #print(x.shape)\n        #print((x.view(x.size(0), -1)).shape)\n        try:\n            x = F.relu(self.head(x.view(x.size(0), -1)))\n        except:\n            raise ValueError(\"Dimension should be \"+str((x.view(x.size(0), -1)).shape))\n        y = torch.cat((x,numCarry.unsqueeze(0).t()), dim=1)\n        y = F.relu(self.head2(y))\n        y = self.head3(y)\n        return y\n</code></pre>", "body_text": "OS: Ubuntu 16.04\nPyTorch version: 0.3.0.post4\nHow you installed PyTorch (conda, pip, source): pip\nPython version: python 3.5.2\n\nThere is a bug in saving and loading the model with torch.save(...) and torch.load(...).\nWorkflow of bug:\n\nCreate neural network code and start learning loop. Model gets saved every 100 epoch with torch.save(...).\nChange the neural network code and save code, while the learning loop from step 1 is still running.\nLet training loop run until the next save of neural network.\nLoading the last save with the neural network code from step 1 causes a warning (SourceChangeWarning). Also if you open the save file, there will be the changed code from step 2 instead of from step 1.\n\nShort:\nIf you change the code of the neural network while runtime, a false code copy will be saved into the torch.save(...) file. Which causes a warning, if I want to load it with the original network code again.\nLoading code:\nself.optimizeNet = torch.load(pacPretrained, map_location=lambda storage, loc: storage)\nSaving code:\ntorch.save(self.optimizeNet, \"saves2/\"+str(ep)+'th-episode.pt')\nNeural network:\nclass DQN(nn.Module):\n    def __init__(self):\n        super(DQN, self).__init__()\n        #smallGrid = kernel_size=3, stride=1\n        self.conv1 = nn.Conv2d(3, 16, kernel_size=3, stride=1)\n        self.bn1 = nn.BatchNorm2d(16)\n        self.conv2 = nn.Conv2d(16, 32, kernel_size=3, stride=1)\n        self.bn2 = nn.BatchNorm2d(32)\n        self.conv3 = nn.Conv2d(32, 32, kernel_size=3, stride=1)\n        self.bn3 = nn.BatchNorm2d(32)\n        self.head = nn.Linear(1088, 512)\n        self.head2 = nn.Linear(513, 256)\n        self.head3 = nn.Linear(256, 5)\n\n        self.lastLayer = 3\n\n    def forward(self, x, numCarry):\n        x = F.relu(self.bn1(self.conv1(x)))\n        x = F.relu(self.bn2(self.conv2(x)))\n        x = F.relu(self.bn3(self.conv3(x)))\n        #print(x.shape)\n        #print((x.view(x.size(0), -1)).shape)\n        try:\n            x = F.relu(self.head(x.view(x.size(0), -1)))\n        except:\n            raise ValueError(\"Dimension should be \"+str((x.view(x.size(0), -1)).shape))\n        y = torch.cat((x,numCarry.unsqueeze(0).t()), dim=1)\n        y = F.relu(self.head2(y))\n        y = self.head3(y)\n        return y", "body": "- OS: Ubuntu 16.04\r\n- PyTorch version: 0.3.0.post4\r\n- How you installed PyTorch (conda, pip, source): pip\r\n- Python version: python 3.5.2\r\n\r\nThere is a bug in saving and loading the model with torch.save(...) and torch.load(...).\r\nWorkflow of bug:\r\n1. Create neural network code and start learning loop. Model gets saved every 100 epoch with torch.save(...).\r\n2. Change the neural network code and save code, while the learning loop from step 1 is still running.\r\n3. Let training loop run until the next save of neural network.\r\n4. Loading the last save with the neural network code from step 1 causes a warning (SourceChangeWarning). Also if you open the save file, there will be the changed code from step 2 instead of from step 1.\r\n\r\nShort:\r\nIf you change the code of the neural network while runtime, a false code copy will be saved into the torch.save(...) file. Which causes a warning, if I want to load it with the original network code again.\r\n\r\nLoading code:\r\n`self.optimizeNet = torch.load(pacPretrained, map_location=lambda storage, loc: storage)`\r\n\r\nSaving code:\r\n`torch.save(self.optimizeNet, \"saves2/\"+str(ep)+'th-episode.pt')`\r\n\r\nNeural network:\r\n```\r\nclass DQN(nn.Module):\r\n    def __init__(self):\r\n        super(DQN, self).__init__()\r\n        #smallGrid = kernel_size=3, stride=1\r\n        self.conv1 = nn.Conv2d(3, 16, kernel_size=3, stride=1)\r\n        self.bn1 = nn.BatchNorm2d(16)\r\n        self.conv2 = nn.Conv2d(16, 32, kernel_size=3, stride=1)\r\n        self.bn2 = nn.BatchNorm2d(32)\r\n        self.conv3 = nn.Conv2d(32, 32, kernel_size=3, stride=1)\r\n        self.bn3 = nn.BatchNorm2d(32)\r\n        self.head = nn.Linear(1088, 512)\r\n        self.head2 = nn.Linear(513, 256)\r\n        self.head3 = nn.Linear(256, 5)\r\n\r\n        self.lastLayer = 3\r\n\r\n    def forward(self, x, numCarry):\r\n        x = F.relu(self.bn1(self.conv1(x)))\r\n        x = F.relu(self.bn2(self.conv2(x)))\r\n        x = F.relu(self.bn3(self.conv3(x)))\r\n        #print(x.shape)\r\n        #print((x.view(x.size(0), -1)).shape)\r\n        try:\r\n            x = F.relu(self.head(x.view(x.size(0), -1)))\r\n        except:\r\n            raise ValueError(\"Dimension should be \"+str((x.view(x.size(0), -1)).shape))\r\n        y = torch.cat((x,numCarry.unsqueeze(0).t()), dim=1)\r\n        y = F.relu(self.head2(y))\r\n        y = self.head3(y)\r\n        return y\r\n```"}