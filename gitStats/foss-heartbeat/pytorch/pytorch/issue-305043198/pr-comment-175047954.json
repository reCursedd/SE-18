{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/175047954", "pull_request_review_id": 104505026, "id": 175047954, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTA0Nzk1NA==", "diff_hunk": "@@ -702,32 +682,100 @@ def init_then_register(self, *args, **kwargs):\n         return super(ScriptMeta, cls).__init__(name, bases, attrs)\n \n \n-class ScriptModule(with_metaclass(ScriptMeta, torch._C.ScriptModule)):\n-\n-    def __setattr__(self, name, value):\n-        if isinstance(value, Parameter):\n-            self._register_or_set_parameter(name, value)\n-        elif isinstance(value, ScriptModule):\n-            self._register_module(name, value)\n-            # note: script modules are subclassed in python and the\n-            # C++ script::Module class will not hold references to them\n-            # to ensure that you always get the same python value here\n-            # we store it as a native attribute _in addition to_\n-            # registering it with the C++ script::Module\n-            object.__setattr__(self, name, value)\n-        else:\n-            object.__setattr__(self, name, value)\n+class ScriptModule(with_metaclass(ScriptMeta, Module, torch._C.ScriptModule)):\n+    def __init__(self, optimize=True):\n+        Module.__init__(self)\n+        torch._C.ScriptModule.__init__(self, optimize)\n+        self._parameters = OrderedParameterDict(self)\n+        self._buffers = OrderedBufferDict(self)\n+        self._modules = OrderedModuleDict(self)\n \n     def __getattr__(self, attr):\n-        r = self._get_attribute(attr)\n-        if r is None:\n-            raise AttributeError(\"'{}' object has no attribute '{}'\".format(self.__class__.__name__, attr))\n-        return r\n+        if self._has_method(attr):\n+            return self._get_method(attr)\n+        return Module.__getattr__(self, attr)\n+\n+    # Module already has this method defined, so we\n+    # need to override it and send it through the ScriptModule lookup\n+    def forward(self, *args, **kwargs):\n+        return self.__getattr__('forward')(*args, **kwargs)", "path": "torch/jit/__init__.py", "position": 372, "original_position": 328, "commit_id": "50399284500538c5061b09ca43ce118e838d09db", "original_commit_id": "6699ca53212e7b5395c74cad71cd9b61fe0fdf63", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Using `__getattr__` is a bit conterintuitive. Can't you just `self._get_method('forward')`? That will be more explicit and faster", "created_at": "2018-03-16T10:24:24Z", "updated_at": "2018-11-23T15:40:50Z", "html_url": "https://github.com/pytorch/pytorch/pull/5769#discussion_r175047954", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/5769", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/175047954"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/5769#discussion_r175047954"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/5769"}}, "body_html": "<p>Using <code>__getattr__</code> is a bit conterintuitive. Can't you just <code>self._get_method('forward')</code>? That will be more explicit and faster</p>", "body_text": "Using __getattr__ is a bit conterintuitive. Can't you just self._get_method('forward')? That will be more explicit and faster"}