{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/175041813", "pull_request_review_id": 104505026, "id": 175041813, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTA0MTgxMw==", "diff_hunk": "@@ -181,24 +213,67 @@ void initJitScriptBindings(PyObject* module) {\n       [](Module& self, const std::string& name) -> const Method& {\n         return self.get_method(name);\n       }, py::return_value_policy::reference_internal)\n-      .def(\"_register_or_set_parameter\", &Module::register_or_set_parameter)\n+      .def(\"_register_parameter\", &Module::register_parameter)\n       .def(\"_register_module\", &Module::register_module)\n       .def(\"_set_parameter\", &Module::set_parameter)\n       .def(\"_get_parameter\", &Module::get_parameter)\n       .def(\"_get_module\", &Module::get_module)\n-      .def(\"_get_attribute\",[](Module& self, const std::string& name) -> py::object {\n-        switch(self.find_attribute(name)) {\n-          case NamedMember::Parameter:\n-            return py::cast(static_cast<const autograd::Variable&>(self.get_parameter(name)));\n-          case NamedMember::Module:\n-            return py::cast(self.get_module(name));\n-          case NamedMember::Method:\n-            return py::cast(self.get_method(name), py::return_value_policy::reference_internal, py::cast(self));\n-          case NamedMember::None:\n-          default: {\n-            return py::none();\n-          }\n+      .def(\"_get_modules\", [](Module& self) -> py::tuple {\n+        auto & modules = self.get_modules();\n+        py::tuple result(modules.size());\n+        for(size_t i = 0; i < modules.size(); ++i) {\n+          auto & nm = modules[i];\n+          py::tuple pair(2);\n+          pair[0] = nm.name;\n+          pair[1] = nm.module;\n+          result[i] = pair;", "path": "torch/csrc/jit/script/init.cpp", "position": null, "original_position": 105, "commit_id": "50399284500538c5061b09ca43ce118e838d09db", "original_commit_id": "6699ca53212e7b5395c74cad71cd9b61fe0fdf63", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "can't you do something like `result[i] = py::cast(std::make_pair(nm.name, nm.module))` (same applies to functions below)?", "created_at": "2018-03-16T09:58:07Z", "updated_at": "2018-11-23T15:40:49Z", "html_url": "https://github.com/pytorch/pytorch/pull/5769#discussion_r175041813", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/5769", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/175041813"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/5769#discussion_r175041813"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/5769"}}, "body_html": "<p>can't you do something like <code>result[i] = py::cast(std::make_pair(nm.name, nm.module))</code> (same applies to functions below)?</p>", "body_text": "can't you do something like result[i] = py::cast(std::make_pair(nm.name, nm.module)) (same applies to functions below)?"}