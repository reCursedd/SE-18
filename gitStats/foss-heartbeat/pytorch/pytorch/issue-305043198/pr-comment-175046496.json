{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/175046496", "pull_request_review_id": 104505026, "id": 175046496, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTA0NjQ5Ng==", "diff_hunk": "@@ -702,32 +682,100 @@ def init_then_register(self, *args, **kwargs):\n         return super(ScriptMeta, cls).__init__(name, bases, attrs)\n \n \n-class ScriptModule(with_metaclass(ScriptMeta, torch._C.ScriptModule)):\n-\n-    def __setattr__(self, name, value):\n-        if isinstance(value, Parameter):\n-            self._register_or_set_parameter(name, value)\n-        elif isinstance(value, ScriptModule):\n-            self._register_module(name, value)\n-            # note: script modules are subclassed in python and the\n-            # C++ script::Module class will not hold references to them\n-            # to ensure that you always get the same python value here\n-            # we store it as a native attribute _in addition to_\n-            # registering it with the C++ script::Module\n-            object.__setattr__(self, name, value)\n-        else:\n-            object.__setattr__(self, name, value)\n+class ScriptModule(with_metaclass(ScriptMeta, Module, torch._C.ScriptModule)):\n+    def __init__(self, optimize=True):\n+        Module.__init__(self)\n+        torch._C.ScriptModule.__init__(self, optimize)", "path": "torch/jit/__init__.py", "position": null, "original_position": 311, "commit_id": "50399284500538c5061b09ca43ce118e838d09db", "original_commit_id": "6699ca53212e7b5395c74cad71cd9b61fe0fdf63", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "We should make sure that forgetting to call `super().__init__()` in a user-defined subclass can't cause a segfault. I've seen it happen multiple times with `pybind`, because it doesn't construct the C++ object before `__init__` (it should probably do that in `__new__`, but oh well)", "created_at": "2018-03-16T10:18:39Z", "updated_at": "2018-11-23T15:40:50Z", "html_url": "https://github.com/pytorch/pytorch/pull/5769#discussion_r175046496", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/5769", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/175046496"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/5769#discussion_r175046496"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/5769"}}, "body_html": "<p>We should make sure that forgetting to call <code>super().__init__()</code> in a user-defined subclass can't cause a segfault. I've seen it happen multiple times with <code>pybind</code>, because it doesn't construct the C++ object before <code>__init__</code> (it should probably do that in <code>__new__</code>, but oh well)</p>", "body_text": "We should make sure that forgetting to call super().__init__() in a user-defined subclass can't cause a segfault. I've seen it happen multiple times with pybind, because it doesn't construct the C++ object before __init__ (it should probably do that in __new__, but oh well)"}