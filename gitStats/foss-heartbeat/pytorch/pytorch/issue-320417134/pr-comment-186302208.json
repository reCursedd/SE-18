{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/186302208", "pull_request_review_id": 117854711, "id": 186302208, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NjMwMjIwOA==", "diff_hunk": "@@ -0,0 +1,118 @@\n+#pragma once\n+\n+#include <torch/csrc/autograd/variable.h>\n+\n+#include \"torch/detail.h\"\n+\n+#include <map>\n+#include <memory>\n+#include <string>\n+#include <unordered_map>\n+\n+namespace torch { namespace nn {\n+\n+class Module {\n+ public:\n+  virtual ~Module() = default;\n+\n+  // Only construct parameters in initialize_parameters, and\n+  // containers in initialize_containers. Most of the time, the containers are\n+  // the only thing you need to add.\n+  // You are guaranteed that containers are added before parameters.\n+  virtual void initialize_containers(){};\n+  virtual void initialize_parameters(){};\n+  virtual void reset_parameters(){};\n+\n+  virtual variable_list forward(variable_list) = 0;\n+  virtual std::unique_ptr<Module> clone() const = 0;\n+\n+  std::map<std::string, Variable> parameters() const;\n+  Variable& param(std::string const&);\n+\n+  virtual void cuda();\n+  virtual void cpu();\n+  void train();\n+  void eval();\n+\n+  at::Type& DefaultTensor(at::ScalarType s);\n+\n+  std::unordered_map<std::string, std::shared_ptr<nn::Module>> children_;\n+  std::unordered_map<std::string, Variable> params_;\n+  bool cuda_ = false;\n+  bool train_ = true;\n+\n+  template <class Archive>\n+  void save(Archive& ar) const {\n+    auto params = parameters();\n+    std::size_t size = params.size();\n+    ar(size);\n+    for (auto& p : params) {\n+      ar(p.first, p.second);\n+    }\n+  }\n+\n+  template <class Archive>\n+  void load(Archive& ar) {\n+    auto params = parameters();\n+    std::size_t size;\n+    ar(size);\n+    std::string name;\n+    for (std::size_t i = 0; i < size; i++) {\n+      ar(name);\n+      ar(params[name]);\n+    }\n+  }\n+\n+ protected:\n+  std::shared_ptr<nn::Module> add(\n+      std::shared_ptr<nn::Module>,\n+      std::string const&);\n+  // Be careful when registering Tensors that are not variables\n+  Variable& add(Variable, std::string const&);\n+};\n+\n+/// The `clone()` method in the base `Module` class does not have knowledge of\n+/// the concrete runtime type of its subclasses. Therefore, `clone()` must\n+/// either be called from within the subclass, or from a base class that has\n+/// knowledge of the concrete type. `CloneableModule` uses the CRTP to gain\n+/// knowledge of the subclass' static type and provide an implementation of the\n+/// `clone()` method. We do not want to use this pattern in the base class,\n+/// because then storing a module would always require templatizing it.\n+template <typename Derived>\n+class CloneableModule : public Module {\n+ public:\n+  // explicit CloneableModule(const char* name) : Module(name) {}\n+\n+  std::unique_ptr<Module> clone() const override {\n+    auto ptr = std::unique_ptr<Module>(\n+        new Derived(*static_cast<const Derived*>(this)));\n+    ptr->children_.clear();\n+    ptr->params_.clear();\n+    ptr->initialize_containers();\n+    ptr->initialize_parameters();", "path": "torch/csrc/api/include/torch/nn/module.h", "position": 92, "original_position": 92, "commit_id": "4e53fe97e23062492d39d5e76003c3214dbcfc90", "original_commit_id": "4e53fe97e23062492d39d5e76003c3214dbcfc90", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "This is not a mechanism we want to keep long term, right?", "created_at": "2018-05-06T20:36:48Z", "updated_at": "2018-11-23T15:43:39Z", "html_url": "https://github.com/pytorch/pytorch/pull/7304#discussion_r186302208", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/7304", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/186302208"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/7304#discussion_r186302208"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/7304"}}, "body_html": "<p>This is not a mechanism we want to keep long term, right?</p>", "body_text": "This is not a mechanism we want to keep long term, right?"}