{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/180958507", "pull_request_review_id": 111472117, "id": 180958507, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MDk1ODUwNw==", "diff_hunk": "@@ -0,0 +1,73 @@\n+#pragma once\n+\n+#include <torch/nn/module.h>\n+#include <torch/tensor.h>\n+\n+#include <cstdint>\n+#include <memory>\n+#include <string>\n+#include <utility>\n+#include <vector>\n+\n+namespace torch { namespace nn {\n+namespace detail {\n+template <typename T, typename... Args>\n+std::unique_ptr<T> make_unique(Args&&... args) {\n+  return std::unique_ptr<T>(new T(std::forward<Args>(args)...));\n+}\n+} // namespace detail\n+\n+class Sequential : public CloneableModule<Sequential> {\n+ public:\n+  template <typename... Modules>\n+  explicit Sequential(Modules&&... modules)\n+      : CloneableModule<Sequential>(\"Sequential\") {\n+    static_assert(sizeof...(Modules) > 0, \"Sequential must not be empty\");\n+    append(std::forward<Modules>(modules)...);\n+  }\n+\n+  /// Feeds the `inputs` to the first module, then chains the output of each\n+  /// module with the input of the next, in order of construction.\n+  std::vector<Tensor> forward(const std::vector<Tensor>& inputs) {\n+    if (modules_.empty()) {\n+      return {};\n+    }\n+    auto iterator = modules_.begin();\n+    auto intermediate = (**iterator)(inputs);\n+    for (; iterator != modules_.end(); ++iterator) {\n+      intermediate = (**iterator)(std::move(intermediate));\n+    }\n+    return intermediate;\n+  }\n+\n+  /// Adds a new `Module` to the `Sequential` container.\n+  template <typename M>\n+  void append(M&& module) {\n+    static_assert(is_module<M>::value, \"Sequential can only hold Modules\");\n+    // Need to get rid of any reference components for make_unique.\n+    using Type = typename std::remove_reference<M>::type;\n+    // Here we copy the module into a new unique_ptr.\n+    modules_.push_back(detail::make_unique<Type>(std::forward<Type>(module)));\n+    const size_t index = modules_.size() - 1;\n+    // Since we allocated the module on the heap, the pointer to the module in\n+    // the base class will always be valid.\n+    register_modules({{std::to_string(index), modules_.back().get()}});\n+  }\n+\n+  /// The current size of the `Sequential` container.\n+  size_t size() const noexcept {\n+    return modules_.size();\n+  }\n+\n+ private:\n+  template <typename HeadType, typename... Tail>\n+  void append(HeadType&& head, Tail&&... tail) {\n+    append(std::forward<HeadType>(head));\n+    // Recursively calls this method, until the parameter pack only thas this\n+    // entry left. Then calls `append()` a final time.\n+    append(std::forward<Tail>(tail)...);\n+  }\n+\n+  std::vector<std::unique_ptr<Module>> modules_;", "path": "torch/csrc/api/include/torch/nn/sequential.h", "position": null, "original_position": 71, "commit_id": "0b7918bf1a5cb58c7ec4aeff0e6dd310b30ec134", "original_commit_id": "cae76cd6041dbd56cadcdcc50f55380a21df08e7", "user": {"login": "goldsborough", "id": 6429851, "node_id": "MDQ6VXNlcjY0Mjk4NTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/6429851?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goldsborough", "html_url": "https://github.com/goldsborough", "followers_url": "https://api.github.com/users/goldsborough/followers", "following_url": "https://api.github.com/users/goldsborough/following{/other_user}", "gists_url": "https://api.github.com/users/goldsborough/gists{/gist_id}", "starred_url": "https://api.github.com/users/goldsborough/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goldsborough/subscriptions", "organizations_url": "https://api.github.com/users/goldsborough/orgs", "repos_url": "https://api.github.com/users/goldsborough/repos", "events_url": "https://api.github.com/users/goldsborough/events{/privacy}", "received_events_url": "https://api.github.com/users/goldsborough/received_events", "type": "User", "site_admin": false}, "body": "1) Fixed.\r\n2) This is an important detail: The base (`Module`) cannot own the submodules. As @colesbury explained to me, the way we do this in Python is by custom descriptors that change `self.x` into `self._parameters['x']`. This doesn't work in C++ of course, so we either force our users to write code like `modules_[\"submodule\"](inputs)` to access modules, or do it this way (i.e. keep `shared_ptr`s in the base class, and allow storage in the subclass so you write `submodule(inputs)`)", "created_at": "2018-04-12T03:50:36Z", "updated_at": "2018-11-23T15:42:18Z", "html_url": "https://github.com/pytorch/pytorch/pull/6345#discussion_r180958507", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/6345", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/180958507"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/6345#discussion_r180958507"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/6345"}}, "body_html": "<ol>\n<li>Fixed.</li>\n<li>This is an important detail: The base (<code>Module</code>) cannot own the submodules. As <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=655866\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/colesbury\">@colesbury</a> explained to me, the way we do this in Python is by custom descriptors that change <code>self.x</code> into <code>self._parameters['x']</code>. This doesn't work in C++ of course, so we either force our users to write code like <code>modules_[\"submodule\"](inputs)</code> to access modules, or do it this way (i.e. keep <code>shared_ptr</code>s in the base class, and allow storage in the subclass so you write <code>submodule(inputs)</code>)</li>\n</ol>", "body_text": "Fixed.\nThis is an important detail: The base (Module) cannot own the submodules. As @colesbury explained to me, the way we do this in Python is by custom descriptors that change self.x into self._parameters['x']. This doesn't work in C++ of course, so we either force our users to write code like modules_[\"submodule\"](inputs) to access modules, or do it this way (i.e. keep shared_ptrs in the base class, and allow storage in the subclass so you write submodule(inputs))", "in_reply_to_id": 180578929}