{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/180579292", "pull_request_review_id": 111022831, "id": 180579292, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MDU3OTI5Mg==", "diff_hunk": "@@ -0,0 +1,73 @@\n+#pragma once\n+\n+#include <torch/nn/module.h>\n+#include <torch/tensor.h>\n+\n+#include <cstdint>\n+#include <memory>\n+#include <string>\n+#include <utility>\n+#include <vector>\n+\n+namespace torch { namespace nn {\n+namespace detail {\n+template <typename T, typename... Args>\n+std::unique_ptr<T> make_unique(Args&&... args) {\n+  return std::unique_ptr<T>(new T(std::forward<Args>(args)...));\n+}\n+} // namespace detail\n+\n+class Sequential : public CloneableModule<Sequential> {\n+ public:\n+  template <typename... Modules>\n+  explicit Sequential(Modules&&... modules)\n+      : CloneableModule<Sequential>(\"Sequential\") {\n+    static_assert(sizeof...(Modules) > 0, \"Sequential must not be empty\");\n+    append(std::forward<Modules>(modules)...);\n+  }\n+\n+  /// Feeds the `inputs` to the first module, then chains the output of each\n+  /// module with the input of the next, in order of construction.\n+  std::vector<Tensor> forward(const std::vector<Tensor>& inputs) {\n+    if (modules_.empty()) {\n+      return {};\n+    }\n+    auto iterator = modules_.begin();\n+    auto intermediate = (**iterator)(inputs);\n+    for (; iterator != modules_.end(); ++iterator) {\n+      intermediate = (**iterator)(std::move(intermediate));\n+    }\n+    return intermediate;\n+  }\n+\n+  /// Adds a new `Module` to the `Sequential` container.\n+  template <typename M>\n+  void append(M&& module) {", "path": "torch/csrc/api/include/torch/nn/sequential.h", "position": null, "original_position": 45, "commit_id": "0b7918bf1a5cb58c7ec4aeff0e6dd310b30ec134", "original_commit_id": "cae76cd6041dbd56cadcdcc50f55380a21df08e7", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "`push_back` to be consistent with C++ conventions? idk", "created_at": "2018-04-10T21:54:07Z", "updated_at": "2018-11-23T15:42:13Z", "html_url": "https://github.com/pytorch/pytorch/pull/6345#discussion_r180579292", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/6345", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/180579292"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/6345#discussion_r180579292"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/6345"}}, "body_html": "<p><code>push_back</code> to be consistent with C++ conventions? idk</p>", "body_text": "push_back to be consistent with C++ conventions? idk"}