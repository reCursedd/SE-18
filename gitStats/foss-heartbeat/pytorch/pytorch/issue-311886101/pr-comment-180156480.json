{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/180156480", "pull_request_review_id": 110528327, "id": 180156480, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MDE1NjQ4MA==", "diff_hunk": "@@ -0,0 +1,50 @@\n+#pragma once\n+\n+#include <torch/nn/module.h>\n+#include <torch/nn/rnn.h>\n+#include <torch/tensor.h>\n+\n+#include <ATen/ATen.h>\n+\n+#include <vector>\n+\n+namespace torch { namespace nn {\n+\n+// This is largely just a proof-of-concept of the interface.\n+class LSTM : public torch::nn::CloneableModule<LSTM> {\n+ public:\n+  LSTM(long input_features, long state_size)\n+      : CloneableModule<LSTM>(\"LSTM\"),\n+        weights_(at::randn(\n+            torch::CPU(at::kFloat),\n+            {3 * state_size, input_features * state_size})),\n+        bias_(at::randn(torch::CPU(at::kFloat), {3 * state_size})) {\n+    register_parameters({{\"weights\", weights_}, {\"bias\", bias_}});\n+  }\n+\n+  std::vector<torch::Tensor> forward(\n+      const std::vector<torch::Tensor>& inputs) override {", "path": "torch/csrc/api/include/torch/nn/rnn.h", "position": 26, "original_position": 26, "commit_id": "0b7918bf1a5cb58c7ec4aeff0e6dd310b30ec134", "original_commit_id": "159082394a77aac7544a262384f1fd77725a24c1", "user": {"login": "ebetica", "id": 3605224, "node_id": "MDQ6VXNlcjM2MDUyMjQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/3605224?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebetica", "html_url": "https://github.com/ebetica", "followers_url": "https://api.github.com/users/ebetica/followers", "following_url": "https://api.github.com/users/ebetica/following{/other_user}", "gists_url": "https://api.github.com/users/ebetica/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebetica/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebetica/subscriptions", "organizations_url": "https://api.github.com/users/ebetica/orgs", "repos_url": "https://api.github.com/users/ebetica/repos", "events_url": "https://api.github.com/users/ebetica/events{/privacy}", "received_events_url": "https://api.github.com/users/ebetica/received_events", "type": "User", "site_admin": false}, "body": " This will possibly simply a lot of code too, if we're able to implement a few things like:\r\n\r\n- Variant automatically behave like Variables unless casted\r\n- Variants can be one of:\r\n  - std::vector<Variant>\r\n  - Variable\r\n  - Tensor\r\n  - common c types\r\n  - std::unordered_map<Variant, Variant>\r\n  - std::string\r\n\r\nThis way, the signature of the forward function is just\r\n```c++\r\ntorch::Variant forward(const torch::Variant& inputs);\r\n```", "created_at": "2018-04-09T16:38:13Z", "updated_at": "2018-11-23T15:42:04Z", "html_url": "https://github.com/pytorch/pytorch/pull/6345#discussion_r180156480", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/6345", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/180156480"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/6345#discussion_r180156480"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/6345"}}, "body_html": "<p>This will possibly simply a lot of code too, if we're able to implement a few things like:</p>\n<ul>\n<li>Variant automatically behave like Variables unless casted</li>\n<li>Variants can be one of:\n<ul>\n<li>std::vector</li>\n<li>Variable</li>\n<li>Tensor</li>\n<li>common c types</li>\n<li>std::unordered_map&lt;Variant, Variant&gt;</li>\n<li>std::string</li>\n</ul>\n</li>\n</ul>\n<p>This way, the signature of the forward function is just</p>\n<div class=\"highlight highlight-source-c++\"><pre>torch::Variant <span class=\"pl-en\">forward</span>(<span class=\"pl-k\">const</span> torch::Variant&amp; inputs);</pre></div>", "body_text": "This will possibly simply a lot of code too, if we're able to implement a few things like:\n\nVariant automatically behave like Variables unless casted\nVariants can be one of:\n\nstd::vector\nVariable\nTensor\ncommon c types\nstd::unordered_map<Variant, Variant>\nstd::string\n\n\n\nThis way, the signature of the forward function is just\ntorch::Variant forward(const torch::Variant& inputs);", "in_reply_to_id": 179962103}