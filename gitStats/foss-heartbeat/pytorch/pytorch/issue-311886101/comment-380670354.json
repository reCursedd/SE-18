{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/380670354", "html_url": "https://github.com/pytorch/pytorch/pull/6345#issuecomment-380670354", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/6345", "id": 380670354, "node_id": "MDEyOklzc3VlQ29tbWVudDM4MDY3MDM1NA==", "user": {"login": "goldsborough", "id": 6429851, "node_id": "MDQ6VXNlcjY0Mjk4NTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/6429851?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goldsborough", "html_url": "https://github.com/goldsborough", "followers_url": "https://api.github.com/users/goldsborough/followers", "following_url": "https://api.github.com/users/goldsborough/following{/other_user}", "gists_url": "https://api.github.com/users/goldsborough/gists{/gist_id}", "starred_url": "https://api.github.com/users/goldsborough/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goldsborough/subscriptions", "organizations_url": "https://api.github.com/users/goldsborough/orgs", "repos_url": "https://api.github.com/users/goldsborough/repos", "events_url": "https://api.github.com/users/goldsborough/events{/privacy}", "received_events_url": "https://api.github.com/users/goldsborough/received_events", "type": "User", "site_admin": false}, "created_at": "2018-04-12T03:56:12Z", "updated_at": "2018-04-12T03:56:12Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Changes:</p>\n<ol>\n<li><code>OrderedDict</code> now stores <code>Item</code>s, to support iteration (otherwise there's no easy way to go from a value back to its key)</li>\n<li>Submodules are stored as <code>shared_ptr</code>s instead of <code>Module*</code>.</li>\n<li>Implementation of cursors, which allow hierarchical traversal of submodules, parameters and buffers. Essentially a wrapper over <code>std::vector&lt;std::pair&lt;std::string, Module&gt;&gt;</code> but with a nice API to be able to write e.g. <code>module.parameters().find(\"key\")</code> or <code>module.modules.apply([](Module&amp; module) { ... })</code>. -- <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=2373925\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/smessmer\">@smessmer</a> may want to have a look</li>\n<li>Quick hacky implementation of <code>zero_grad()</code> based on the cursors API. Need to think more about the Variable API, and implement <code>toType_()</code></li>\n</ol>", "body_text": "Changes:\n\nOrderedDict now stores Items, to support iteration (otherwise there's no easy way to go from a value back to its key)\nSubmodules are stored as shared_ptrs instead of Module*.\nImplementation of cursors, which allow hierarchical traversal of submodules, parameters and buffers. Essentially a wrapper over std::vector<std::pair<std::string, Module>> but with a nice API to be able to write e.g. module.parameters().find(\"key\") or module.modules.apply([](Module& module) { ... }). -- @smessmer may want to have a look\nQuick hacky implementation of zero_grad() based on the cursors API. Need to think more about the Variable API, and implement toType_()", "body": "Changes:\r\n1. `OrderedDict` now stores `Item`s, to support iteration (otherwise there's no easy way to go from a value back to its key)\r\n2. Submodules are stored as `shared_ptr`s instead of `Module*`.\r\n3. Implementation of cursors, which allow hierarchical traversal of submodules, parameters and buffers. Essentially a wrapper over `std::vector<std::pair<std::string, Module>>` but with a nice API to be able to write e.g. `module.parameters().find(\"key\")` or `module.modules.apply([](Module& module) { ... })`. -- @smessmer may want to have a look\r\n4. Quick hacky implementation of `zero_grad()` based on the cursors API. Need to think more about the Variable API, and implement `toType_()`"}