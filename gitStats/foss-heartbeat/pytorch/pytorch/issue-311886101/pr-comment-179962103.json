{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/179962103", "pull_request_review_id": 110300731, "id": 179962103, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTk2MjEwMw==", "diff_hunk": "@@ -0,0 +1,50 @@\n+#pragma once\n+\n+#include <torch/nn/module.h>\n+#include <torch/nn/rnn.h>\n+#include <torch/tensor.h>\n+\n+#include <ATen/ATen.h>\n+\n+#include <vector>\n+\n+namespace torch { namespace nn {\n+\n+// This is largely just a proof-of-concept of the interface.\n+class LSTM : public torch::nn::CloneableModule<LSTM> {\n+ public:\n+  LSTM(long input_features, long state_size)\n+      : CloneableModule<LSTM>(\"LSTM\"),\n+        weights_(at::randn(\n+            torch::CPU(at::kFloat),\n+            {3 * state_size, input_features * state_size})),\n+        bias_(at::randn(torch::CPU(at::kFloat), {3 * state_size})) {\n+    register_parameters({{\"weights\", weights_}, {\"bias\", bias_}});\n+  }\n+\n+  std::vector<torch::Tensor> forward(\n+      const std::vector<torch::Tensor>& inputs) override {", "path": "torch/csrc/api/include/torch/nn/rnn.h", "position": 26, "original_position": 26, "commit_id": "0b7918bf1a5cb58c7ec4aeff0e6dd310b30ec134", "original_commit_id": "159082394a77aac7544a262384f1fd77725a24c1", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "meh, is the plan that all user defined modules will need to take in vectors as inputs? That sounds really dangerous (e.g. you don't do any checking below and can easily get segfaults for a bad call), and annoying (you need to parse out the args). Maybe we should let people define `forward` in the way they want, and then have a variadic template for the call operator (and forward the args as they are provided)", "created_at": "2018-04-08T21:33:35Z", "updated_at": "2018-11-23T15:42:01Z", "html_url": "https://github.com/pytorch/pytorch/pull/6345#discussion_r179962103", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/6345", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/179962103"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/6345#discussion_r179962103"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/6345"}}, "body_html": "<p>meh, is the plan that all user defined modules will need to take in vectors as inputs? That sounds really dangerous (e.g. you don't do any checking below and can easily get segfaults for a bad call), and annoying (you need to parse out the args). Maybe we should let people define <code>forward</code> in the way they want, and then have a variadic template for the call operator (and forward the args as they are provided)</p>", "body_text": "meh, is the plan that all user defined modules will need to take in vectors as inputs? That sounds really dangerous (e.g. you don't do any checking below and can easily get segfaults for a bad call), and annoying (you need to parse out the args). Maybe we should let people define forward in the way they want, and then have a variadic template for the call operator (and forward the args as they are provided)"}