{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/180139754", "pull_request_review_id": 110508851, "id": 180139754, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MDEzOTc1NA==", "diff_hunk": "@@ -0,0 +1,50 @@\n+#pragma once\n+\n+#include <torch/nn/module.h>\n+#include <torch/nn/rnn.h>\n+#include <torch/tensor.h>\n+\n+#include <ATen/ATen.h>\n+\n+#include <vector>\n+\n+namespace torch { namespace nn {\n+\n+// This is largely just a proof-of-concept of the interface.\n+class LSTM : public torch::nn::CloneableModule<LSTM> {\n+ public:\n+  LSTM(long input_features, long state_size)\n+      : CloneableModule<LSTM>(\"LSTM\"),\n+        weights_(at::randn(\n+            torch::CPU(at::kFloat),\n+            {3 * state_size, input_features * state_size})),\n+        bias_(at::randn(torch::CPU(at::kFloat), {3 * state_size})) {\n+    register_parameters({{\"weights\", weights_}, {\"bias\", bias_}});\n+  }\n+\n+  std::vector<torch::Tensor> forward(\n+      const std::vector<torch::Tensor>& inputs) override {", "path": "torch/csrc/api/include/torch/nn/rnn.h", "position": 26, "original_position": 26, "commit_id": "0b7918bf1a5cb58c7ec4aeff0e6dd310b30ec134", "original_commit_id": "159082394a77aac7544a262384f1fd77725a24c1", "user": {"login": "goldsborough", "id": 6429851, "node_id": "MDQ6VXNlcjY0Mjk4NTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/6429851?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goldsborough", "html_url": "https://github.com/goldsborough", "followers_url": "https://api.github.com/users/goldsborough/followers", "following_url": "https://api.github.com/users/goldsborough/following{/other_user}", "gists_url": "https://api.github.com/users/goldsborough/gists{/gist_id}", "starred_url": "https://api.github.com/users/goldsborough/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goldsborough/subscriptions", "organizations_url": "https://api.github.com/users/goldsborough/orgs", "repos_url": "https://api.github.com/users/goldsborough/repos", "events_url": "https://api.github.com/users/goldsborough/events{/privacy}", "received_events_url": "https://api.github.com/users/goldsborough/received_events", "type": "User", "site_admin": false}, "body": "Then we can't store them untemplatized. Like, Sequential will have a `vector<Module>` inside so the `Module` class should be untemplatized unless we want to templatize everything ", "created_at": "2018-04-09T15:46:21Z", "updated_at": "2018-11-23T15:42:04Z", "html_url": "https://github.com/pytorch/pytorch/pull/6345#discussion_r180139754", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/6345", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/180139754"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/6345#discussion_r180139754"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/6345"}}, "body_html": "<p>Then we can't store them untemplatized. Like, Sequential will have a <code>vector&lt;Module&gt;</code> inside so the <code>Module</code> class should be untemplatized unless we want to templatize everything</p>", "body_text": "Then we can't store them untemplatized. Like, Sequential will have a vector<Module> inside so the Module class should be untemplatized unless we want to templatize everything", "in_reply_to_id": 179962103}