{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/181596142", "pull_request_review_id": 112250460, "id": 181596142, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MTU5NjE0Mg==", "diff_hunk": "@@ -0,0 +1,125 @@\n+#include <torch/nn/module.h>\n+#include <torch/detail/ordered_dict.h>\n+#include <torch/nn/cursor.h>\n+\n+#include <torch/csrc/autograd/variable.h>\n+\n+#include <ATen/ATen.h>\n+\n+#include <memory>\n+#include <string>\n+#include <unordered_map>\n+#include <vector>\n+\n+namespace torch { namespace nn {\n+\n+Module::Module(const char* name) : name_(name), is_training_(false) {}\n+\n+Module::~Module() = default;\n+\n+std::unique_ptr<Module> Module::clone() {\n+  TORCH_ERROR(\n+      \"clone() has not been implemented for %s. \"\n+      \"Use the copy constructor if you don't require polymorphic cloning. \"\n+      \"Otherwise, subclass CloneableModule<%s> to inherit cloning behavior.\",\n+      name_,\n+      name_);\n+}\n+\n+std::vector<Tensor> Module::operator()(const std::vector<Tensor>& inputs) {\n+  return forward(inputs);\n+}\n+\n+// Train/Eval mode\n+void Module::train() {\n+  is_training_ = true;\n+}\n+\n+void Module::eval() {\n+  is_training_ = false;\n+}\n+\n+bool Module::is_training() const noexcept {\n+  return is_training_;\n+}\n+\n+// Recursive Transformations\n+void Module::cpu() {\n+  // parameters().apply([](Tensor& tensor) { tensor.toBackend_(kCPU); });\n+}\n+\n+void Module::cuda() {\n+  // parameters().apply([](Tensor& tensor) { tensor.toBackend_(kCUDA); });\n+}\n+\n+void Module::type(at::ScalarType new_type) {\n+  // parameters().apply([=](Tensor& tensor) { tensor.toType_(new_type); });\n+  // buffers().apply([=](Tensor& tensor) { tensor.toType_(new_type); });", "path": "torch/csrc/api/src/nn/module.cpp", "position": 57, "original_position": 57, "commit_id": "0b7918bf1a5cb58c7ec4aeff0e6dd310b30ec134", "original_commit_id": "0b7918bf1a5cb58c7ec4aeff0e6dd310b30ec134", "user": {"login": "goldsborough", "id": 6429851, "node_id": "MDQ6VXNlcjY0Mjk4NTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/6429851?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goldsborough", "html_url": "https://github.com/goldsborough", "followers_url": "https://api.github.com/users/goldsborough/followers", "following_url": "https://api.github.com/users/goldsborough/following{/other_user}", "gists_url": "https://api.github.com/users/goldsborough/gists{/gist_id}", "starred_url": "https://api.github.com/users/goldsborough/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goldsborough/subscriptions", "organizations_url": "https://api.github.com/users/goldsborough/orgs", "repos_url": "https://api.github.com/users/goldsborough/repos", "events_url": "https://api.github.com/users/goldsborough/events{/privacy}", "received_events_url": "https://api.github.com/users/goldsborough/received_events", "type": "User", "site_admin": false}, "body": "I'm waiting for the \"Autograd API\" in Tensor. I need the `set_type` behavior, which is currently `temporary_hack_set_type` and will be `detail::set_data` in the autograd API PR", "created_at": "2018-04-15T20:37:21Z", "updated_at": "2018-11-23T15:42:29Z", "html_url": "https://github.com/pytorch/pytorch/pull/6345#discussion_r181596142", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/6345", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/181596142"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/6345#discussion_r181596142"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/6345"}}, "body_html": "<p>I'm waiting for the \"Autograd API\" in Tensor. I need the <code>set_type</code> behavior, which is currently <code>temporary_hack_set_type</code> and will be <code>detail::set_data</code> in the autograd API PR</p>", "body_text": "I'm waiting for the \"Autograd API\" in Tensor. I need the set_type behavior, which is currently temporary_hack_set_type and will be detail::set_data in the autograd API PR", "in_reply_to_id": 181595607}