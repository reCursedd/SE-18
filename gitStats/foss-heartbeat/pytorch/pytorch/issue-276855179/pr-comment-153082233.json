{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/153082233", "pull_request_review_id": 79038375, "id": 153082233, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MzA4MjIzMw==", "diff_hunk": "@@ -382,6 +384,94 @@ struct GraphFuser {\n     return ++consumer->reverseIterator();\n   }\n \n+  // This is a hack to improve the fusion in case the graph looks like this:\n+  //\n+  // %1 = f(...)\n+  // %2 = g(%1)\n+  // %3 = h(%1)\n+  // %4 = l(%3)\n+  // return %4, %2\n+  //\n+  // where f, g, h, l are fusable operations\n+  //\n+  // If you follow the algorithm, you'll see that we will end up with a group\n+  // that fuses 3 and 4, and another one that fuses 2 and 1. This function will\n+  // connect them into a single group.\n+  void mergeNeighbouringFusionGroups() {", "path": "torch/csrc/jit/passes/graph_fuser.cpp", "position": null, "original_position": 26, "commit_id": "7722a1ba1904143ca9ab971f39c59282e59b7b87", "original_commit_id": "a62b882d3c6f762efb7dc8edf48f8a425962f5c9", "user": {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, "body": "If you want to add that then you can also just put it in the normal fuser path :) It ignored FusionGroup<->FusionGroup fusion because it was annoying to do, but you wrote that code already so if you also write the safety check code, you should be good to go just allowing fusion groups to merge.\r\n\r\nA simpler but more conservative safety check: all uses of producer outputs that are not from the consumer happen after the consumer. This check is already in the code using the topological index meta-data. The real check is potentially linear in the size of the graph, which would make the fuser quadratic, so I've been avoiding it.\r\n", "created_at": "2017-11-26T21:23:26Z", "updated_at": "2018-11-23T15:36:48Z", "html_url": "https://github.com/pytorch/pytorch/pull/3885#discussion_r153082233", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/3885", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/153082233"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/3885#discussion_r153082233"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/3885"}}, "body_html": "<p>If you want to add that then you can also just put it in the normal fuser path :) It ignored FusionGroup&lt;-&gt;FusionGroup fusion because it was annoying to do, but you wrote that code already so if you also write the safety check code, you should be good to go just allowing fusion groups to merge.</p>\n<p>A simpler but more conservative safety check: all uses of producer outputs that are not from the consumer happen after the consumer. This check is already in the code using the topological index meta-data. The real check is potentially linear in the size of the graph, which would make the fuser quadratic, so I've been avoiding it.</p>", "body_text": "If you want to add that then you can also just put it in the normal fuser path :) It ignored FusionGroup<->FusionGroup fusion because it was annoying to do, but you wrote that code already so if you also write the safety check code, you should be good to go just allowing fusion groups to merge.\nA simpler but more conservative safety check: all uses of producer outputs that are not from the consumer happen after the consumer. This check is already in the code using the topological index meta-data. The real check is potentially linear in the size of the graph, which would make the fuser quadratic, so I've been avoiding it.", "in_reply_to_id": 153081720}