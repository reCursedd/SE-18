{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/153082537", "pull_request_review_id": 79038693, "id": 153082537, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MzA4MjUzNw==", "diff_hunk": "@@ -382,6 +384,94 @@ struct GraphFuser {\n     return ++consumer->reverseIterator();\n   }\n \n+  // This is a hack to improve the fusion in case the graph looks like this:\n+  //\n+  // %1 = f(...)\n+  // %2 = g(%1)\n+  // %3 = h(%1)\n+  // %4 = l(%3)\n+  // return %4, %2\n+  //\n+  // where f, g, h, l are fusable operations\n+  //\n+  // If you follow the algorithm, you'll see that we will end up with a group\n+  // that fuses 3 and 4, and another one that fuses 2 and 1. This function will\n+  // connect them into a single group.\n+  void mergeNeighbouringFusionGroups() {", "path": "torch/csrc/jit/passes/graph_fuser.cpp", "position": null, "original_position": 26, "commit_id": "7722a1ba1904143ca9ab971f39c59282e59b7b87", "original_commit_id": "a62b882d3c6f762efb7dc8edf48f8a425962f5c9", "user": {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, "body": "I see. I think the simplest change would be:\r\n* iterate until no new fusions are made (a common approach to optimizations)\r\n* support fusiongroup-fusiongroup using the conservative check.", "created_at": "2017-11-26T21:35:06Z", "updated_at": "2018-11-23T15:36:49Z", "html_url": "https://github.com/pytorch/pytorch/pull/3885#discussion_r153082537", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/3885", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/153082537"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/3885#discussion_r153082537"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/3885"}}, "body_html": "<p>I see. I think the simplest change would be:</p>\n<ul>\n<li>iterate until no new fusions are made (a common approach to optimizations)</li>\n<li>support fusiongroup-fusiongroup using the conservative check.</li>\n</ul>", "body_text": "I see. I think the simplest change would be:\n\niterate until no new fusions are made (a common approach to optimizations)\nsupport fusiongroup-fusiongroup using the conservative check.", "in_reply_to_id": 153081720}