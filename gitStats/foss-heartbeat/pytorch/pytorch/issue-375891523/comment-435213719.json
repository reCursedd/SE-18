{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/435213719", "html_url": "https://github.com/pytorch/pytorch/issues/13383#issuecomment-435213719", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/13383", "id": 435213719, "node_id": "MDEyOklzc3VlQ29tbWVudDQzNTIxMzcxOQ==", "user": {"login": "goldsborough", "id": 6429851, "node_id": "MDQ6VXNlcjY0Mjk4NTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/6429851?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goldsborough", "html_url": "https://github.com/goldsborough", "followers_url": "https://api.github.com/users/goldsborough/followers", "following_url": "https://api.github.com/users/goldsborough/following{/other_user}", "gists_url": "https://api.github.com/users/goldsborough/gists{/gist_id}", "starred_url": "https://api.github.com/users/goldsborough/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goldsborough/subscriptions", "organizations_url": "https://api.github.com/users/goldsborough/orgs", "repos_url": "https://api.github.com/users/goldsborough/repos", "events_url": "https://api.github.com/users/goldsborough/events{/privacy}", "received_events_url": "https://api.github.com/users/goldsborough/received_events", "type": "User", "site_admin": false}, "created_at": "2018-11-01T22:52:18Z", "updated_at": "2018-11-01T22:52:18Z", "author_association": "CONTRIBUTOR", "body_html": "<p>The C++ frontend modules have a <code>serialize</code>/<code>deserialize</code> method for parameters and buffers: <a href=\"https://github.com/pytorch/pytorch/blob/master/torch/csrc/api/include/torch/nn/module.h#L252\">https://github.com/pytorch/pytorch/blob/master/torch/csrc/api/include/torch/nn/module.h#L252</a>. We're working on unifying the TorchScript C++ modules with the C++ frontend modules, so I would say that unification is the best route for implementing this <code>set_parameters</code> feature.</p>", "body_text": "The C++ frontend modules have a serialize/deserialize method for parameters and buffers: https://github.com/pytorch/pytorch/blob/master/torch/csrc/api/include/torch/nn/module.h#L252. We're working on unifying the TorchScript C++ modules with the C++ frontend modules, so I would say that unification is the best route for implementing this set_parameters feature.", "body": "The C++ frontend modules have a `serialize`/`deserialize` method for parameters and buffers: https://github.com/pytorch/pytorch/blob/master/torch/csrc/api/include/torch/nn/module.h#L252. We're working on unifying the TorchScript C++ modules with the C++ frontend modules, so I would say that unification is the best route for implementing this `set_parameters` feature."}