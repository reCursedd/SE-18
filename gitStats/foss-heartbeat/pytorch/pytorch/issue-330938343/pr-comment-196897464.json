{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/196897464", "pull_request_review_id": 130528665, "id": 196897464, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5Njg5NzQ2NA==", "diff_hunk": "@@ -416,7 +416,8 @@ def load(name,\n          extra_ldflags=None,\n          extra_include_paths=None,\n          build_directory=None,\n-         verbose=False):\n+         verbose=False,", "path": "torch/utils/cpp_extension.py", "position": 5, "original_position": 5, "commit_id": "a81a2b57870ae6fb255b386cb05439a522839499", "original_commit_id": "33464117ad10b41f9ea5d8fed83ff084b0527c63", "user": {"login": "goldsborough", "id": 6429851, "node_id": "MDQ6VXNlcjY0Mjk4NTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/6429851?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goldsborough", "html_url": "https://github.com/goldsborough", "followers_url": "https://api.github.com/users/goldsborough/followers", "following_url": "https://api.github.com/users/goldsborough/following{/other_user}", "gists_url": "https://api.github.com/users/goldsborough/gists{/gist_id}", "starred_url": "https://api.github.com/users/goldsborough/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goldsborough/subscriptions", "organizations_url": "https://api.github.com/users/goldsborough/orgs", "repos_url": "https://api.github.com/users/goldsborough/repos", "events_url": "https://api.github.com/users/goldsborough/events{/privacy}", "received_events_url": "https://api.github.com/users/goldsborough/received_events", "type": "User", "site_admin": false}, "body": "I actually think no changes to this file are necessary. The way I presented users for dealing with cuda is to write all CUDA code in `.cu` files, and then have a `.cpp` file which calls into the CUDA file and does the binding (`PYBIND11`) logic (see https://github.com/pytorch/extension-cpp/blob/master/cuda/lltm_cuda.cpp). This makes things like this a lot easier. So I believe this file can stay entirely unchanged, and it would be better to follow the separation pattern unless you or @fmassa think this is totally not feasible. See e.g. https://github.com/pytorch/pytorch/blob/master/test/cpp_extensions/cuda_extension.cpp for examples of this", "created_at": "2018-06-20T18:30:16Z", "updated_at": "2018-11-23T15:45:54Z", "html_url": "https://github.com/pytorch/pytorch/pull/8313#discussion_r196897464", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/8313", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/196897464"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/8313#discussion_r196897464"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/8313"}}, "body_html": "<p>I actually think no changes to this file are necessary. The way I presented users for dealing with cuda is to write all CUDA code in <code>.cu</code> files, and then have a <code>.cpp</code> file which calls into the CUDA file and does the binding (<code>PYBIND11</code>) logic (see <a href=\"https://github.com/pytorch/extension-cpp/blob/master/cuda/lltm_cuda.cpp\">https://github.com/pytorch/extension-cpp/blob/master/cuda/lltm_cuda.cpp</a>). This makes things like this a lot easier. So I believe this file can stay entirely unchanged, and it would be better to follow the separation pattern unless you or <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=9110200\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/fmassa\">@fmassa</a> think this is totally not feasible. See e.g. <a href=\"https://github.com/pytorch/pytorch/blob/master/test/cpp_extensions/cuda_extension.cpp\">https://github.com/pytorch/pytorch/blob/master/test/cpp_extensions/cuda_extension.cpp</a> for examples of this</p>", "body_text": "I actually think no changes to this file are necessary. The way I presented users for dealing with cuda is to write all CUDA code in .cu files, and then have a .cpp file which calls into the CUDA file and does the binding (PYBIND11) logic (see https://github.com/pytorch/extension-cpp/blob/master/cuda/lltm_cuda.cpp). This makes things like this a lot easier. So I believe this file can stay entirely unchanged, and it would be better to follow the separation pattern unless you or @fmassa think this is totally not feasible. See e.g. https://github.com/pytorch/pytorch/blob/master/test/cpp_extensions/cuda_extension.cpp for examples of this"}