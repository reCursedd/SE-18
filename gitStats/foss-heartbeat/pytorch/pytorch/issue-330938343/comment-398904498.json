{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/398904498", "html_url": "https://github.com/pytorch/pytorch/pull/8313#issuecomment-398904498", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/8313", "id": 398904498, "node_id": "MDEyOklzc3VlQ29tbWVudDM5ODkwNDQ5OA==", "user": {"login": "bstriner", "id": 12462956, "node_id": "MDQ6VXNlcjEyNDYyOTU2", "avatar_url": "https://avatars3.githubusercontent.com/u/12462956?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bstriner", "html_url": "https://github.com/bstriner", "followers_url": "https://api.github.com/users/bstriner/followers", "following_url": "https://api.github.com/users/bstriner/following{/other_user}", "gists_url": "https://api.github.com/users/bstriner/gists{/gist_id}", "starred_url": "https://api.github.com/users/bstriner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bstriner/subscriptions", "organizations_url": "https://api.github.com/users/bstriner/orgs", "repos_url": "https://api.github.com/users/bstriner/repos", "events_url": "https://api.github.com/users/bstriner/events{/privacy}", "received_events_url": "https://api.github.com/users/bstriner/received_events", "type": "User", "site_admin": false}, "created_at": "2018-06-20T21:32:50Z", "updated_at": "2018-06-20T21:32:50Z", "author_association": "CONTRIBUTOR", "body_html": "<p>The cmake would just be a hint, so if there isn't anything, it isn't going to do any worse than it did before. Current test just assumes it is in one of the known paths (including CUDA_HOME), which should work for most situations. Maybe the simplest workaround would be just respecting some sort of CUDNN_HOME environment variable and getting includes and libraries from there (if provided).</p>\n<p>Will have to think about it some more and maybe start another issue later.</p>", "body_text": "The cmake would just be a hint, so if there isn't anything, it isn't going to do any worse than it did before. Current test just assumes it is in one of the known paths (including CUDA_HOME), which should work for most situations. Maybe the simplest workaround would be just respecting some sort of CUDNN_HOME environment variable and getting includes and libraries from there (if provided).\nWill have to think about it some more and maybe start another issue later.", "body": "The cmake would just be a hint, so if there isn't anything, it isn't going to do any worse than it did before. Current test just assumes it is in one of the known paths (including CUDA_HOME), which should work for most situations. Maybe the simplest workaround would be just respecting some sort of CUDNN_HOME environment variable and getting includes and libraries from there (if provided).\r\n\r\nWill have to think about it some more and maybe start another issue later. "}