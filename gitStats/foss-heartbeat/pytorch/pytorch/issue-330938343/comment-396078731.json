{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/396078731", "html_url": "https://github.com/pytorch/pytorch/pull/8313#issuecomment-396078731", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/8313", "id": 396078731, "node_id": "MDEyOklzc3VlQ29tbWVudDM5NjA3ODczMQ==", "user": {"login": "bstriner", "id": 12462956, "node_id": "MDQ6VXNlcjEyNDYyOTU2", "avatar_url": "https://avatars3.githubusercontent.com/u/12462956?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bstriner", "html_url": "https://github.com/bstriner", "followers_url": "https://api.github.com/users/bstriner/followers", "following_url": "https://api.github.com/users/bstriner/following{/other_user}", "gists_url": "https://api.github.com/users/bstriner/gists{/gist_id}", "starred_url": "https://api.github.com/users/bstriner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bstriner/subscriptions", "organizations_url": "https://api.github.com/users/bstriner/orgs", "repos_url": "https://api.github.com/users/bstriner/repos", "events_url": "https://api.github.com/users/bstriner/events{/privacy}", "received_events_url": "https://api.github.com/users/bstriner/received_events", "type": "User", "site_admin": false}, "created_at": "2018-06-10T20:15:20Z", "updated_at": "2018-06-10T20:15:20Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=9110200\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/fmassa\">@fmassa</a> what were you thinking specifically? API documentation or something like more cpp_extension examples and tests.</p>\n<p>Those specific APIs don't seem to have changed much recently, but the build itself has been refactored a lot. That said, there is a lot of code in ATen that could be refactored, especially around creating descriptors. For example, I'm pretty sure you could eliminate 3/4 duplicate descriptors in this file:<br>\n<a href=\"https://github.com/pytorch/pytorch/blob/master/caffe2/operators/rnn/recurrent_op_cudnn.cc\">https://github.com/pytorch/pytorch/blob/master/caffe2/operators/rnn/recurrent_op_cudnn.cc</a></p>\n<p>My specific use case is just implementing cudnnCTCLoss but it should be similar to any cudnn extension. These are what I'm using, and everything builds and tests correctly, but please let me know if there are some others that I should be using and if this list seems reasonable:</p>\n<ul>\n<li>at::Tensor</li>\n<li>at::TensorArg, checkDim, checkScalarType, checkSize, checkSameSize, checkBackend, checkContiguous for argument checking</li>\n<li>at::native::TensorDescriptor to make the cudnnTensorDescriptor_t</li>\n<li>at::native::getCudnnHandle to get the cudnn handle</li>\n<li>at::native::CUDNN_CHECK to check cudnn return codes</li>\n<li>TORCH_CUDA_CHECK to check cuda return codes</li>\n</ul>\n<p>These are the includes I ended up with:</p>\n<pre><code>#include &lt;ATen/TensorUtils.h&gt;\n#include &lt;ATen/cudnn/Descriptors.h&gt;\n#include &lt;ATen/cudnn/Exceptions.h&gt;\n#include &lt;ATen/cudnn/Handles.h&gt;\n#include &lt;torch/csrc/cuda/cuda_check.h&gt;\n#include &lt;torch/torch.h&gt;\n</code></pre>\n<p>Would it make sense to add an extension test? It would just be running cpp_extension to see if some specified list of headers and functions link correctly in the extension.</p>", "body_text": "@fmassa what were you thinking specifically? API documentation or something like more cpp_extension examples and tests.\nThose specific APIs don't seem to have changed much recently, but the build itself has been refactored a lot. That said, there is a lot of code in ATen that could be refactored, especially around creating descriptors. For example, I'm pretty sure you could eliminate 3/4 duplicate descriptors in this file:\nhttps://github.com/pytorch/pytorch/blob/master/caffe2/operators/rnn/recurrent_op_cudnn.cc\nMy specific use case is just implementing cudnnCTCLoss but it should be similar to any cudnn extension. These are what I'm using, and everything builds and tests correctly, but please let me know if there are some others that I should be using and if this list seems reasonable:\n\nat::Tensor\nat::TensorArg, checkDim, checkScalarType, checkSize, checkSameSize, checkBackend, checkContiguous for argument checking\nat::native::TensorDescriptor to make the cudnnTensorDescriptor_t\nat::native::getCudnnHandle to get the cudnn handle\nat::native::CUDNN_CHECK to check cudnn return codes\nTORCH_CUDA_CHECK to check cuda return codes\n\nThese are the includes I ended up with:\n#include <ATen/TensorUtils.h>\n#include <ATen/cudnn/Descriptors.h>\n#include <ATen/cudnn/Exceptions.h>\n#include <ATen/cudnn/Handles.h>\n#include <torch/csrc/cuda/cuda_check.h>\n#include <torch/torch.h>\n\nWould it make sense to add an extension test? It would just be running cpp_extension to see if some specified list of headers and functions link correctly in the extension.", "body": "@fmassa what were you thinking specifically? API documentation or something like more cpp_extension examples and tests.\r\n\r\nThose specific APIs don't seem to have changed much recently, but the build itself has been refactored a lot. That said, there is a lot of code in ATen that could be refactored, especially around creating descriptors. For example, I'm pretty sure you could eliminate 3/4 duplicate descriptors in this file:\r\nhttps://github.com/pytorch/pytorch/blob/master/caffe2/operators/rnn/recurrent_op_cudnn.cc \r\n\r\nMy specific use case is just implementing cudnnCTCLoss but it should be similar to any cudnn extension. These are what I'm using, and everything builds and tests correctly, but please let me know if there are some others that I should be using and if this list seems reasonable:\r\n- at::Tensor\r\n- at::TensorArg, checkDim, checkScalarType, checkSize, checkSameSize, checkBackend, checkContiguous for argument checking\r\n- at::native::TensorDescriptor to make the cudnnTensorDescriptor_t\r\n- at::native::getCudnnHandle to get the cudnn handle\r\n- at::native::CUDNN_CHECK to check cudnn return codes\r\n- TORCH_CUDA_CHECK to check cuda return codes\r\n\r\nThese are the includes I ended up with:\r\n```\r\n#include <ATen/TensorUtils.h>\r\n#include <ATen/cudnn/Descriptors.h>\r\n#include <ATen/cudnn/Exceptions.h>\r\n#include <ATen/cudnn/Handles.h>\r\n#include <torch/csrc/cuda/cuda_check.h>\r\n#include <torch/torch.h>\r\n```\r\n\r\nWould it make sense to add an extension test? It would just be running cpp_extension to see if some specified list of headers and functions link correctly in the extension.\r\n"}