{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/396095968", "html_url": "https://github.com/pytorch/pytorch/pull/8313#issuecomment-396095968", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/8313", "id": 396095968, "node_id": "MDEyOklzc3VlQ29tbWVudDM5NjA5NTk2OA==", "user": {"login": "bstriner", "id": 12462956, "node_id": "MDQ6VXNlcjEyNDYyOTU2", "avatar_url": "https://avatars3.githubusercontent.com/u/12462956?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bstriner", "html_url": "https://github.com/bstriner", "followers_url": "https://api.github.com/users/bstriner/followers", "following_url": "https://api.github.com/users/bstriner/following{/other_user}", "gists_url": "https://api.github.com/users/bstriner/gists{/gist_id}", "starred_url": "https://api.github.com/users/bstriner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bstriner/subscriptions", "organizations_url": "https://api.github.com/users/bstriner/orgs", "repos_url": "https://api.github.com/users/bstriner/repos", "events_url": "https://api.github.com/users/bstriner/events{/privacy}", "received_events_url": "https://api.github.com/users/bstriner/received_events", "type": "User", "site_admin": false}, "created_at": "2018-06-11T00:52:43Z", "updated_at": "2018-06-11T00:52:43Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=13564\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ezyang\">@ezyang</a> I was actually thinking about some updates along those lines. I like the idea of some central code for creating descriptors but it could use some extra options/tests/whatever.</p>\n<p>Personally, I'm only using TensorDescriptor, I just figured it would make sense to export the rest of that header while I was in there.</p>\n<p>It's not the end of the world if I go back to calling cudnnSetTensorNdDescriptor myself in my own helper, but TensorDescriptor is just so much cleaner if you already have a bunch of at::Tensors. Same with things like CUDNN_CHECK. Easy to write but makes much more sense to just import from pytorch.</p>\n<p>If the concern is that something will break, I was thinking about just adding a test. Write a CPP file that uses all of the relevant functions, call cpp_extension and assert that everything links correctly. Doesn't need to actually do anything in particular but you could also add some tests. That would check that the headers are in the right place and that the functions are exported correctly.</p>", "body_text": "@ezyang I was actually thinking about some updates along those lines. I like the idea of some central code for creating descriptors but it could use some extra options/tests/whatever.\nPersonally, I'm only using TensorDescriptor, I just figured it would make sense to export the rest of that header while I was in there.\nIt's not the end of the world if I go back to calling cudnnSetTensorNdDescriptor myself in my own helper, but TensorDescriptor is just so much cleaner if you already have a bunch of at::Tensors. Same with things like CUDNN_CHECK. Easy to write but makes much more sense to just import from pytorch.\nIf the concern is that something will break, I was thinking about just adding a test. Write a CPP file that uses all of the relevant functions, call cpp_extension and assert that everything links correctly. Doesn't need to actually do anything in particular but you could also add some tests. That would check that the headers are in the right place and that the functions are exported correctly.", "body": "@ezyang I was actually thinking about some updates along those lines. I like the idea of some central code for creating descriptors but it could use some extra options/tests/whatever.\r\n\r\nPersonally, I'm only using TensorDescriptor, I just figured it would make sense to export the rest of that header while I was in there.\r\n\r\nIt's not the end of the world if I go back to calling cudnnSetTensorNdDescriptor myself in my own helper, but TensorDescriptor is just so much cleaner if you already have a bunch of at::Tensors. Same with things like CUDNN_CHECK. Easy to write but makes much more sense to just import from pytorch.\r\n\r\nIf the concern is that something will break, I was thinking about just adding a test. Write a CPP file that uses all of the relevant functions, call cpp_extension and assert that everything links correctly. Doesn't need to actually do anything in particular but you could also add some tests. That would check that the headers are in the right place and that the functions are exported correctly."}