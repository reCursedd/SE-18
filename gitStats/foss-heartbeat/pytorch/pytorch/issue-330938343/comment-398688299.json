{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/398688299", "html_url": "https://github.com/pytorch/pytorch/pull/8313#issuecomment-398688299", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/8313", "id": 398688299, "node_id": "MDEyOklzc3VlQ29tbWVudDM5ODY4ODI5OQ==", "user": {"login": "bstriner", "id": 12462956, "node_id": "MDQ6VXNlcjEyNDYyOTU2", "avatar_url": "https://avatars3.githubusercontent.com/u/12462956?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bstriner", "html_url": "https://github.com/bstriner", "followers_url": "https://api.github.com/users/bstriner/followers", "following_url": "https://api.github.com/users/bstriner/following{/other_user}", "gists_url": "https://api.github.com/users/bstriner/gists{/gist_id}", "starred_url": "https://api.github.com/users/bstriner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bstriner/subscriptions", "organizations_url": "https://api.github.com/users/bstriner/orgs", "repos_url": "https://api.github.com/users/bstriner/repos", "events_url": "https://api.github.com/users/bstriner/events{/privacy}", "received_events_url": "https://api.github.com/users/bstriner/received_events", "type": "User", "site_admin": false}, "created_at": "2018-06-20T09:38:17Z", "updated_at": "2018-06-20T09:38:17Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=13564\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ezyang\">@ezyang</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=9110200\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/fmassa\">@fmassa</a> just added a test using JIT compilation.</p>\n<p>I wanted the test to also be a good example on how to do a CuDNN extension, so please take a quick look at the CPP. It is using getCudnnHandle, TensorDescriptor, CUDNN_CHECK, and a few other things I don't think were previously tested to work in extensions.</p>\n<p>The example is CuDNN ReLU. Probably not the most useful, but most CuDNN functions would follow about the same structure, so should be a good starting point for whatever.</p>\n<p>As part of the test, I ran into an issue with JIT. It determines whether cuda should be included based on whether <code>*.cu</code> files are given. However, this is an example of pure CPP that still needs cuda. So, I added a <code>with_cuda</code> flag to JIT. CUDA is always on if cu files are given, but it can be forced on using this option. Please let me know if any additional documentation is needed.</p>\n<p>Final note: I noticed that <code>tanh_add_cuda</code> is being compiled but not tested. It is being checked to link correctly but that code is never run. Someone should either implement that test (not that I am volunteering), or just make a note somewhere in that code that it is just being checked for compile/link errors not runtime.</p>\n<p>I'm in and out of town this month, so feel free to make any edits or tweaks, especially to things like the docs.</p>\n<p>Cheers</p>", "body_text": "@ezyang @fmassa just added a test using JIT compilation.\nI wanted the test to also be a good example on how to do a CuDNN extension, so please take a quick look at the CPP. It is using getCudnnHandle, TensorDescriptor, CUDNN_CHECK, and a few other things I don't think were previously tested to work in extensions.\nThe example is CuDNN ReLU. Probably not the most useful, but most CuDNN functions would follow about the same structure, so should be a good starting point for whatever.\nAs part of the test, I ran into an issue with JIT. It determines whether cuda should be included based on whether *.cu files are given. However, this is an example of pure CPP that still needs cuda. So, I added a with_cuda flag to JIT. CUDA is always on if cu files are given, but it can be forced on using this option. Please let me know if any additional documentation is needed.\nFinal note: I noticed that tanh_add_cuda is being compiled but not tested. It is being checked to link correctly but that code is never run. Someone should either implement that test (not that I am volunteering), or just make a note somewhere in that code that it is just being checked for compile/link errors not runtime.\nI'm in and out of town this month, so feel free to make any edits or tweaks, especially to things like the docs.\nCheers", "body": "@ezyang @fmassa just added a test using JIT compilation. \r\n\r\nI wanted the test to also be a good example on how to do a CuDNN extension, so please take a quick look at the CPP. It is using getCudnnHandle, TensorDescriptor, CUDNN_CHECK, and a few other things I don't think were previously tested to work in extensions.\r\n\r\nThe example is CuDNN ReLU. Probably not the most useful, but most CuDNN functions would follow about the same structure, so should be a good starting point for whatever.\r\n\r\nAs part of the test, I ran into an issue with JIT. It determines whether cuda should be included based on whether `*.cu` files are given. However, this is an example of pure CPP that still needs cuda. So, I added a `with_cuda` flag to JIT. CUDA is always on if cu files are given, but it can be forced on using this option. Please let me know if any additional documentation is needed.\r\n\r\nFinal note: I noticed that `tanh_add_cuda` is being compiled but not tested. It is being checked to link correctly but that code is never run. Someone should either implement that test (not that I am volunteering), or just make a note somewhere in that code that it is just being checked for compile/link errors not runtime.\r\n\r\nI'm in and out of town this month, so feel free to make any edits or tweaks, especially to things like the docs.\r\n\r\nCheers\r\n"}