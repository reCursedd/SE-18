{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/396094738", "html_url": "https://github.com/pytorch/pytorch/pull/8313#issuecomment-396094738", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/8313", "id": 396094738, "node_id": "MDEyOklzc3VlQ29tbWVudDM5NjA5NDczOA==", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "created_at": "2018-06-11T00:35:55Z", "updated_at": "2018-06-11T00:35:55Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Hey <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=12462956\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/bstriner\">@bstriner</a>, as author of these descriptor classes, I can say a little more about what <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=9110200\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/fmassa\">@fmassa</a> is talking about.</p>\n<p>Basically, if I'm writing some code which I know is only going to be used in one context, I may take shortcuts / make assumptions that I wouldn't make if I was designing a general purpose API. Glancing over the descriptor classes, I can see a few assumptions I made:</p>\n<ul>\n<li><code>FilterDescriptor</code> hard-codes <code>CUDNN_TENSOR_NCHW</code> (because that's the only layout we expose at the moment)</li>\n<li>Similarly, <code>ConvolutionDescriptor</code>, <code>RNNDescriptor</code>, and <code>SpatialTransformerDescriptor</code> hard-code some parameter choices</li>\n</ul>\n<p>And there are some maybe questionable design choices, such as having <code>mut_desc</code> be responsible for actually initializing the descriptor.</p>\n<p>So, the danger is, at some point someone will want to actually add support for something that is not in the code, and the most straightforward thing to do will be to just refactor the (public APIs!) of these classes so that they have one more parameter or something, and we'll accept that patch because none of the tests test for a particular API, and then your code will break.</p>\n<p>That being said, I'm not opposed to making this part of the public API and committing to supporting them for the forseeable future; they're pretty self-contained classes, and unlikely to be misused, so keeping them BC shouldn't be a big deal. But we haven't really setup the process for making sure we don't accidentally break pieces like this; which is why <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=9110200\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/fmassa\">@fmassa</a>  is nervous :)</p>", "body_text": "Hey @bstriner, as author of these descriptor classes, I can say a little more about what @fmassa is talking about.\nBasically, if I'm writing some code which I know is only going to be used in one context, I may take shortcuts / make assumptions that I wouldn't make if I was designing a general purpose API. Glancing over the descriptor classes, I can see a few assumptions I made:\n\nFilterDescriptor hard-codes CUDNN_TENSOR_NCHW (because that's the only layout we expose at the moment)\nSimilarly, ConvolutionDescriptor, RNNDescriptor, and SpatialTransformerDescriptor hard-code some parameter choices\n\nAnd there are some maybe questionable design choices, such as having mut_desc be responsible for actually initializing the descriptor.\nSo, the danger is, at some point someone will want to actually add support for something that is not in the code, and the most straightforward thing to do will be to just refactor the (public APIs!) of these classes so that they have one more parameter or something, and we'll accept that patch because none of the tests test for a particular API, and then your code will break.\nThat being said, I'm not opposed to making this part of the public API and committing to supporting them for the forseeable future; they're pretty self-contained classes, and unlikely to be misused, so keeping them BC shouldn't be a big deal. But we haven't really setup the process for making sure we don't accidentally break pieces like this; which is why @fmassa  is nervous :)", "body": "Hey @bstriner, as author of these descriptor classes, I can say a little more about what @fmassa is talking about.\r\n\r\nBasically, if I'm writing some code which I know is only going to be used in one context, I may take shortcuts / make assumptions that I wouldn't make if I was designing a general purpose API. Glancing over the descriptor classes, I can see a few assumptions I made:\r\n\r\n- `FilterDescriptor` hard-codes `CUDNN_TENSOR_NCHW` (because that's the only layout we expose at the moment)\r\n- Similarly, `ConvolutionDescriptor`, `RNNDescriptor`, and `SpatialTransformerDescriptor` hard-code some parameter choices\r\n\r\nAnd there are some maybe questionable design choices, such as having `mut_desc` be responsible for actually initializing the descriptor.\r\n\r\nSo, the danger is, at some point someone will want to actually add support for something that is not in the code, and the most straightforward thing to do will be to just refactor the (public APIs!) of these classes so that they have one more parameter or something, and we'll accept that patch because none of the tests test for a particular API, and then your code will break.\r\n\r\nThat being said, I'm not opposed to making this part of the public API and committing to supporting them for the forseeable future; they're pretty self-contained classes, and unlikely to be misused, so keeping them BC shouldn't be a big deal. But we haven't really setup the process for making sure we don't accidentally break pieces like this; which is why @fmassa  is nervous :)"}