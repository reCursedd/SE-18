{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/398896876", "html_url": "https://github.com/pytorch/pytorch/pull/8313#issuecomment-398896876", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/8313", "id": 398896876, "node_id": "MDEyOklzc3VlQ29tbWVudDM5ODg5Njg3Ng==", "user": {"login": "bstriner", "id": 12462956, "node_id": "MDQ6VXNlcjEyNDYyOTU2", "avatar_url": "https://avatars3.githubusercontent.com/u/12462956?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bstriner", "html_url": "https://github.com/bstriner", "followers_url": "https://api.github.com/users/bstriner/followers", "following_url": "https://api.github.com/users/bstriner/following{/other_user}", "gists_url": "https://api.github.com/users/bstriner/gists{/gist_id}", "starred_url": "https://api.github.com/users/bstriner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bstriner/subscriptions", "organizations_url": "https://api.github.com/users/bstriner/orgs", "repos_url": "https://api.github.com/users/bstriner/repos", "events_url": "https://api.github.com/users/bstriner/events{/privacy}", "received_events_url": "https://api.github.com/users/bstriner/received_events", "type": "User", "site_admin": false}, "created_at": "2018-06-20T21:06:28Z", "updated_at": "2018-06-20T21:06:28Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=6429851\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/goldsborough\">@goldsborough</a> going through changes now. I think some sort of extra flag is required if you want cuda libraries but don't happen to be making a new kernel. Example use case is if you compiled kernels separately or something.</p>\n<p>What is your take on the actual semantics/name/documentation of that option?</p>\n<p>An extra option like <code>with_cudnn</code> might make sense as well. Would be more stable than hardcoding the ldflags like I did in the test. The test works fine on CI but if cudnn.lib is off the path the test might not work. I would probably do that as a separate issue though, since I would want to add to both JIT and setup. Torch finds cudnn during install so it should use the same linkage if the extension needs cudnn.</p>", "body_text": "@goldsborough going through changes now. I think some sort of extra flag is required if you want cuda libraries but don't happen to be making a new kernel. Example use case is if you compiled kernels separately or something.\nWhat is your take on the actual semantics/name/documentation of that option?\nAn extra option like with_cudnn might make sense as well. Would be more stable than hardcoding the ldflags like I did in the test. The test works fine on CI but if cudnn.lib is off the path the test might not work. I would probably do that as a separate issue though, since I would want to add to both JIT and setup. Torch finds cudnn during install so it should use the same linkage if the extension needs cudnn.", "body": "@goldsborough going through changes now. I think some sort of extra flag is required if you want cuda libraries but don't happen to be making a new kernel. Example use case is if you compiled kernels separately or something.\r\n\r\nWhat is your take on the actual semantics/name/documentation of that option?\r\n\r\nAn extra option like `with_cudnn` might make sense as well. Would be more stable than hardcoding the ldflags like I did in the test. The test works fine on CI but if cudnn.lib is off the path the test might not work. I would probably do that as a separate issue though, since I would want to add to both JIT and setup. Torch finds cudnn during install so it should use the same linkage if the extension needs cudnn."}