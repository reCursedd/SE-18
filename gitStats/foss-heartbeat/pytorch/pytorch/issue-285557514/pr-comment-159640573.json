{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/159640573", "pull_request_review_id": 86620116, "id": 159640573, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1OTY0MDU3Mw==", "diff_hunk": "@@ -33,6 +36,10 @@ def __init__(self, low, high):\n             batch_shape = self.low.size()\n         super(Uniform, self).__init__(batch_shape)\n \n+    @property\n+    def support(self):\n+        return constraints.interval(self.low, self.high)", "path": "torch/distributions/uniform.py", "position": null, "original_position": 23, "commit_id": "cedb47186572d0eb21d1930825ee597c3e7b9a03", "original_commit_id": "813552d337a733257a859a23872ac3f217895b57", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "This is a bit worrying for me. `support` and `params` are usually class attributes, except for some edge cases. This means that `Distribution.params[name]` is usually well defined, but not always, and there's no clear rule to tell when it is. How about making them always be present on a class, but be `dependent` at that time, but guarantee that they will be resolved to concrete values if you instantiate a distribution?", "created_at": "2018-01-04T12:23:17Z", "updated_at": "2018-11-23T15:37:49Z", "html_url": "https://github.com/pytorch/pytorch/pull/4450#discussion_r159640573", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4450", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/159640573"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/4450#discussion_r159640573"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4450"}}, "body_html": "<p>This is a bit worrying for me. <code>support</code> and <code>params</code> are usually class attributes, except for some edge cases. This means that <code>Distribution.params[name]</code> is usually well defined, but not always, and there's no clear rule to tell when it is. How about making them always be present on a class, but be <code>dependent</code> at that time, but guarantee that they will be resolved to concrete values if you instantiate a distribution?</p>", "body_text": "This is a bit worrying for me. support and params are usually class attributes, except for some edge cases. This means that Distribution.params[name] is usually well defined, but not always, and there's no clear rule to tell when it is. How about making them always be present on a class, but be dependent at that time, but guarantee that they will be resolved to concrete values if you instantiate a distribution?"}