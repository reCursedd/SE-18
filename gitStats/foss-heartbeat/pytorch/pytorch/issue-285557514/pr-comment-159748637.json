{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/159748637", "pull_request_review_id": 86750458, "id": 159748637, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1OTc0ODYzNw==", "diff_hunk": "@@ -0,0 +1,111 @@\n+import torch\n+\n+\n+class Constraint(object):\n+    \"\"\"\n+    Abstract base class for constraints.\n+\n+    A constraint object represents a region over which a continuous variable is\n+    valid, e.g. within which a variable can be optimized.\n+    \"\"\"\n+    def check(self, value):\n+        \"\"\"\n+        Returns a byte tensor of sample_shape + batch_shape indicating whether\n+        each value satisfies this constraint.\n+        \"\"\"\n+        raise NotImplementedError\n+\n+\n+class Dependent(Constraint):\n+    \"\"\"\n+    Placeholder for variables whose support depends on other variables.\n+    These variables obey no simple coordinate-wise constraints.\n+    \"\"\"\n+    def check(self, x):\n+        raise ValueError('Cannot determine validity of dependent constraint')\n+\n+\n+class Boolean(Constraint):\n+    \"\"\"\n+    Constrain to the two values `{0, 1}`.\n+    \"\"\"\n+    def check(self, value):\n+        return (value == 0) | (value == 1)\n+\n+\n+class NonnegativeInteger(Constraint):\n+    \"\"\"\n+    Constrain to non-negative integers `{0, 1, 2, ...}`.\n+    \"\"\"\n+    def check(self, value):\n+        return (value % 1 == 0) & (value >= 0)\n+\n+\n+class IntegerInterval(Constraint):\n+    \"\"\"\n+    Constrain to an integer interval `[lower_bound, upper_bound]`.\n+    \"\"\"\n+    def __init__(self, lower_bound, upper_bound):\n+        self.lower_bound = lower_bound\n+        self.upper_bound = upper_bound\n+\n+    def check(self, value):\n+        return (value % 1 == 0) & (self.lower_bound <= value) & (value <= self.upper_bound)\n+\n+\n+class Real(Constraint):\n+    \"\"\"\n+    Trivially constrain to the extended real line `[-inf, inf]`.\n+    \"\"\"\n+    def check(self, value):\n+        return value == value  # False for NANs.\n+\n+\n+class Positive(Constraint):\n+    \"\"\"\n+    Constrain to the positive half line `[0, inf]`.\n+    \"\"\"\n+    def check(self, value):\n+        return value >= 0\n+\n+\n+class Interval(Constraint):\n+    \"\"\"\n+    Constrain to a real interval `[lower_bound, upper_bound]`.\n+    \"\"\"\n+    def __init__(self, lower_bound, upper_bound):\n+        self.lower_bound = lower_bound\n+        self.upper_bound = upper_bound\n+\n+    def check(self, value):\n+        return (self.lower_bound <= value) & (value <= self.upper_bound)\n+\n+\n+class Simplex(Constraint):\n+    \"\"\"\n+    Constrain to the unit simplex in the innermost (rightmost) dimension.\n+    Specifically: `x >= 0` and `x.sum(-1) == 1`.\n+    \"\"\"\n+    def check(self, value):\n+        return (value >= 0) & ((value.sum(-1, True) - 1).abs() < 1e-6)\n+\n+\n+class LowerTriangular(Constraint):", "path": "torch/distributions/constraints.py", "position": null, "original_position": 93, "commit_id": "cedb47186572d0eb21d1930825ee597c3e7b9a03", "original_commit_id": "813552d337a733257a859a23872ac3f217895b57", "user": {"login": "fritzo", "id": 648532, "node_id": "MDQ6VXNlcjY0ODUzMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/648532?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fritzo", "html_url": "https://github.com/fritzo", "followers_url": "https://api.github.com/users/fritzo/followers", "following_url": "https://api.github.com/users/fritzo/following{/other_user}", "gists_url": "https://api.github.com/users/fritzo/gists{/gist_id}", "starred_url": "https://api.github.com/users/fritzo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fritzo/subscriptions", "organizations_url": "https://api.github.com/users/fritzo/orgs", "repos_url": "https://api.github.com/users/fritzo/repos", "events_url": "https://api.github.com/users/fritzo/events{/privacy}", "received_events_url": "https://api.github.com/users/fritzo/received_events", "type": "User", "site_admin": false}, "body": "Good idea, I've prefixed classes with underscores and explicitly defined `__all__` to emphasize the public interface.", "created_at": "2018-01-04T20:32:47Z", "updated_at": "2018-11-23T15:37:50Z", "html_url": "https://github.com/pytorch/pytorch/pull/4450#discussion_r159748637", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4450", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/159748637"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/4450#discussion_r159748637"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4450"}}, "body_html": "<p>Good idea, I've prefixed classes with underscores and explicitly defined <code>__all__</code> to emphasize the public interface.</p>", "body_text": "Good idea, I've prefixed classes with underscores and explicitly defined __all__ to emphasize the public interface.", "in_reply_to_id": 159640220}