{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/159640220", "pull_request_review_id": 86620116, "id": 159640220, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1OTY0MDIyMA==", "diff_hunk": "@@ -0,0 +1,111 @@\n+import torch\n+\n+\n+class Constraint(object):\n+    \"\"\"\n+    Abstract base class for constraints.\n+\n+    A constraint object represents a region over which a continuous variable is\n+    valid, e.g. within which a variable can be optimized.\n+    \"\"\"\n+    def check(self, value):\n+        \"\"\"\n+        Returns a byte tensor of sample_shape + batch_shape indicating whether\n+        each value satisfies this constraint.\n+        \"\"\"\n+        raise NotImplementedError\n+\n+\n+class Dependent(Constraint):\n+    \"\"\"\n+    Placeholder for variables whose support depends on other variables.\n+    These variables obey no simple coordinate-wise constraints.\n+    \"\"\"\n+    def check(self, x):\n+        raise ValueError('Cannot determine validity of dependent constraint')\n+\n+\n+class Boolean(Constraint):\n+    \"\"\"\n+    Constrain to the two values `{0, 1}`.\n+    \"\"\"\n+    def check(self, value):\n+        return (value == 0) | (value == 1)\n+\n+\n+class NonnegativeInteger(Constraint):\n+    \"\"\"\n+    Constrain to non-negative integers `{0, 1, 2, ...}`.\n+    \"\"\"\n+    def check(self, value):\n+        return (value % 1 == 0) & (value >= 0)\n+\n+\n+class IntegerInterval(Constraint):\n+    \"\"\"\n+    Constrain to an integer interval `[lower_bound, upper_bound]`.\n+    \"\"\"\n+    def __init__(self, lower_bound, upper_bound):\n+        self.lower_bound = lower_bound\n+        self.upper_bound = upper_bound\n+\n+    def check(self, value):\n+        return (value % 1 == 0) & (self.lower_bound <= value) & (value <= self.upper_bound)\n+\n+\n+class Real(Constraint):\n+    \"\"\"\n+    Trivially constrain to the extended real line `[-inf, inf]`.\n+    \"\"\"\n+    def check(self, value):\n+        return value == value  # False for NANs.\n+\n+\n+class Positive(Constraint):\n+    \"\"\"\n+    Constrain to the positive half line `[0, inf]`.\n+    \"\"\"\n+    def check(self, value):\n+        return value >= 0\n+\n+\n+class Interval(Constraint):\n+    \"\"\"\n+    Constrain to a real interval `[lower_bound, upper_bound]`.\n+    \"\"\"\n+    def __init__(self, lower_bound, upper_bound):\n+        self.lower_bound = lower_bound\n+        self.upper_bound = upper_bound\n+\n+    def check(self, value):\n+        return (self.lower_bound <= value) & (value <= self.upper_bound)\n+\n+\n+class Simplex(Constraint):\n+    \"\"\"\n+    Constrain to the unit simplex in the innermost (rightmost) dimension.\n+    Specifically: `x >= 0` and `x.sum(-1) == 1`.\n+    \"\"\"\n+    def check(self, value):\n+        return (value >= 0) & ((value.sum(-1, True) - 1).abs() < 1e-6)\n+\n+\n+class LowerTriangular(Constraint):", "path": "torch/distributions/constraints.py", "position": null, "original_position": 93, "commit_id": "cedb47186572d0eb21d1930825ee597c3e7b9a03", "original_commit_id": "813552d337a733257a859a23872ac3f217895b57", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Are these classes going to be part of the interface? E.g. in the tests you used an `is dependent` check, but this will fail if anyone uses `Dependent()` instead of `dependent`. Should we prefix them with an underscore and make it clear that you should only use the constants?", "created_at": "2018-01-04T12:20:59Z", "updated_at": "2018-11-23T15:37:49Z", "html_url": "https://github.com/pytorch/pytorch/pull/4450#discussion_r159640220", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4450", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/159640220"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/4450#discussion_r159640220"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4450"}}, "body_html": "<p>Are these classes going to be part of the interface? E.g. in the tests you used an <code>is dependent</code> check, but this will fail if anyone uses <code>Dependent()</code> instead of <code>dependent</code>. Should we prefix them with an underscore and make it clear that you should only use the constants?</p>", "body_text": "Are these classes going to be part of the interface? E.g. in the tests you used an is dependent check, but this will fail if anyone uses Dependent() instead of dependent. Should we prefix them with an underscore and make it clear that you should only use the constants?"}