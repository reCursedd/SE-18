{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/159771009", "pull_request_review_id": 86777409, "id": 159771009, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1OTc3MTAwOQ==", "diff_hunk": "@@ -1055,5 +1056,36 @@ def test_laplace_shape_tensor_params(self):\n         self.assertRaises(ValueError, laplace.log_prob, self.tensor_sample_2)\n \n \n+class TestConstraints(TestCase):\n+    def test_params_contains(self):\n+        for Dist, params in EXAMPLES:\n+            for i, param in enumerate(params):\n+                dist = Dist(**param)\n+                for name, value in param.items():\n+                    if not (torch.is_tensor(value) or isinstance(value, Variable)):\n+                        value = torch.Tensor([value])\n+                    if Dist in (Categorical, OneHotCategorical) and name == 'probs':\n+                        # These distributions accept positive probs, but elsewhere we\n+                        # use a stricter constraint to the simplex.\n+                        value = value / value.sum(-1, True)\n+                    constraint = dist.params[name]\n+                    if is_dependent(constraint):\n+                        continue\n+                    message = '{} example {}/{} parameter {} = {}'.format(\n+                        Dist.__name__, i, len(params), name, value)\n+                    self.assertTrue(constraint.check(value).all(), msg=message)\n+\n+    def test_support_contains(self):\n+        for Dist, params in EXAMPLES:\n+            self.assertIsInstance(Dist.support, Constraint)", "path": "test/test_distributions.py", "position": 51, "original_position": 51, "commit_id": "cedb47186572d0eb21d1930825ee597c3e7b9a03", "original_commit_id": "cedb47186572d0eb21d1930825ee597c3e7b9a03", "user": {"login": "fritzo", "id": 648532, "node_id": "MDQ6VXNlcjY0ODUzMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/648532?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fritzo", "html_url": "https://github.com/fritzo", "followers_url": "https://api.github.com/users/fritzo/followers", "following_url": "https://api.github.com/users/fritzo/following{/other_user}", "gists_url": "https://api.github.com/users/fritzo/gists{/gist_id}", "starred_url": "https://api.github.com/users/fritzo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fritzo/subscriptions", "organizations_url": "https://api.github.com/users/fritzo/orgs", "repos_url": "https://api.github.com/users/fritzo/repos", "events_url": "https://api.github.com/users/fritzo/events{/privacy}", "received_events_url": "https://api.github.com/users/fritzo/received_events", "type": "User", "site_admin": false}, "body": "This checks that `@constraints.dependent_property` was used correctly.", "created_at": "2018-01-04T22:26:16Z", "updated_at": "2018-11-23T15:37:50Z", "html_url": "https://github.com/pytorch/pytorch/pull/4450#discussion_r159771009", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4450", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/159771009"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/4450#discussion_r159771009"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4450"}}, "body_html": "<p>This checks that <code>@constraints.dependent_property</code> was used correctly.</p>", "body_text": "This checks that @constraints.dependent_property was used correctly."}