{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/177466512", "pull_request_review_id": 107341567, "id": 177466512, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NzQ2NjUxMg==", "diff_hunk": "@@ -0,0 +1,110 @@\n+#include \"ATen/ATen.h\"\n+#include \"ATen/Dispatch.h\"\n+#include \"ATen/ExpandUtils.h\"\n+#include \"ATen/NativeFunctions.h\"\n+#include \"ATen/WrapDimUtils.h\"\n+#include \"cpu/UnaryOpsKernel.h\"\n+\n+#include <algorithm>\n+#include <functional>\n+#include <numeric>\n+#include <vector>\n+\n+#include <map>\n+\n+namespace at {\n+namespace native {\n+\n+using unary_type = void(Tensor &, const Tensor &);\n+unary_type *ceilImpl = DispatchStub<unary_type>::init<ceilImplC, &ceilImpl>;\n+unary_type *floorImpl = DispatchStub<unary_type>::init<floorImplC, &floorImpl>;\n+unary_type *roundImpl = DispatchStub<unary_type>::init<roundImplC, &roundImpl>;\n+unary_type *truncImpl = DispatchStub<unary_type>::init<truncImplC, &truncImpl>;\n+unary_type *sqrtImpl = DispatchStub<unary_type>::init<sqrtImplC, &sqrtImpl>;\n+\n+// WRAP OPS #################################################################\n+\n+Tensor ceil(const Tensor &self) {\n+  Tensor result = self.type().tensor();\n+  return at::ceil_out(result, self);\n+}\n+Tensor floor(const Tensor &self) {\n+  Tensor result = self.type().tensor();\n+  return at::floor_out(result, self);\n+}\n+Tensor round(const Tensor &self) {\n+  Tensor result = self.type().tensor();\n+  return at::round_out(result, self);\n+}\n+Tensor trunc(const Tensor &self) {\n+  Tensor result = self.type().tensor();\n+  return at::trunc_out(result, self);\n+}\n+Tensor sqrt(const Tensor &self) {\n+  Tensor result = self.type().tensor();\n+  return at::sqrt_out(result, self);\n+}\n+\n+Tensor &ceil_(Tensor &self) { return at::ceil_out(self, self); }\n+Tensor &floor_(Tensor &self) { return at::floor_out(self, self); }\n+Tensor &round_(Tensor &self) { return at::round_out(self, self); }\n+Tensor &trunc_(Tensor &self) { return at::trunc_out(self, self); }\n+Tensor &sqrt_(Tensor &self) { return at::sqrt_out(self, self); }\n+\n+// \\WRAP OPS #################################################################\n+\n+bool _unops_out_cpu(unary_type *f, Tensor &result, const Tensor &self) {\n+  if (result.is_contiguous() && self.is_contiguous()) {\n+    result.resize_(self.sizes());\n+    f(result, self);\n+    return true;\n+  }\n+  return false;\n+}\n+\n+// CPU OPS ###################################################################\n+\n+Tensor &_ceil_out_cpu(Tensor &result, const Tensor &self) {\n+  return _unops_out_cpu(ceilImpl, result, self) ? result\n+                                                : at::_ceil_out(result, self);\n+}\n+Tensor &_floor_out_cpu(Tensor &result, const Tensor &self) {\n+  return _unops_out_cpu(floorImpl, result, self) ? result\n+                                                 : at::_floor_out(result, self);\n+}\n+Tensor &_round_out_cpu(Tensor &result, const Tensor &self) {\n+  return _unops_out_cpu(roundImpl, result, self) ? result\n+                                                 : at::_round_out(result, self);\n+}\n+Tensor &_trunc_out_cpu(Tensor &result, const Tensor &self) {\n+  return _unops_out_cpu(truncImpl, result, self) ? result\n+                                                 : at::_trunc_out(result, self);\n+}\n+Tensor &_sqrt_out_cpu(Tensor &result, const Tensor &self) {\n+  return _unops_out_cpu(sqrtImpl, result, self) ? result\n+                                                : at::_sqrt_out(result, self);\n+}\n+\n+// \\CPU OPS #################################################################\n+\n+// CUDA OPS #################################################################\n+\n+Tensor &_ceil_out_cuda(Tensor &result, const Tensor &self) {\n+  return at::_ceil_out(result, self);\n+}\n+Tensor &_floor_out_cuda(Tensor &result, const Tensor &self) {\n+  return at::_floor_out(result, self);\n+}\n+Tensor &_round_out_cuda(Tensor &result, const Tensor &self) {\n+  return at::_round_out(result, self);\n+}\n+Tensor &_trunc_out_cuda(Tensor &result, const Tensor &self) {\n+  return at::_trunc_out(result, self);\n+}\n+Tensor &_sqrt_out_cuda(Tensor &result, const Tensor &self) {\n+  return at::_sqrt_out(result, self);\n+}", "path": "aten/src/ATen/native/UnaryOps.cpp", "position": null, "original_position": 106, "commit_id": "1a6993fb9b94a8bd24ece404e3d5d235e82ef6f4", "original_commit_id": "f40e0a8cbe19c19d83a86fe9d94313170347c800", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "This looks like a lot of boilerplate per op. Can't we use a macro to generate those 3 functions?", "created_at": "2018-03-27T15:23:34Z", "updated_at": "2018-11-23T15:41:09Z", "html_url": "https://github.com/pytorch/pytorch/pull/6030#discussion_r177466512", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/6030", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/177466512"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/6030#discussion_r177466512"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/6030"}}, "body_html": "<p>This looks like a lot of boilerplate per op. Can't we use a macro to generate those 3 functions?</p>", "body_text": "This looks like a lot of boilerplate per op. Can't we use a macro to generate those 3 functions?"}