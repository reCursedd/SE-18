{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/177469006", "pull_request_review_id": 107343762, "id": 177469006, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NzQ2OTAwNg==", "diff_hunk": "@@ -0,0 +1,132 @@\n+#include \"ATen/native/cpu/UnaryOpsKernel.h\"\n+#include \"ATen/Dispatch.h\"\n+#include \"ATen/Parallel.h\"\n+#include <iostream>\n+#include <cmath>\n+#include \"ATen/native/cpu/Vec256.h\"\n+\n+namespace at {\n+namespace native {\n+\n+using namespace vec256;\n+\n+// This modifies arr in place with given OP\n+template <class scalar_t, template <class> class VOP, template <class> class SOP, CPUCapability C>\n+inline void kernel_(scalar_t *arr_out, const scalar_t *arr_in, size_t start, size_t end) {\n+  // Use all 16 registers.", "path": "aten/src/ATen/native/cpu/UnaryOpsKernel.cpp", "position": null, "original_position": 16, "commit_id": "1a6993fb9b94a8bd24ece404e3d5d235e82ef6f4", "original_commit_id": "f40e0a8cbe19c19d83a86fe9d94313170347c800", "user": {"login": "colesbury", "id": 655866, "node_id": "MDQ6VXNlcjY1NTg2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/655866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colesbury", "html_url": "https://github.com/colesbury", "followers_url": "https://api.github.com/users/colesbury/followers", "following_url": "https://api.github.com/users/colesbury/following{/other_user}", "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions", "organizations_url": "https://api.github.com/users/colesbury/orgs", "repos_url": "https://api.github.com/users/colesbury/repos", "events_url": "https://api.github.com/users/colesbury/events{/privacy}", "received_events_url": "https://api.github.com/users/colesbury/received_events", "type": "User", "site_admin": false}, "body": "This looks more complicated than necessary. I don't think there's any advantage to using more registers than necessary. Just do:\r\n\r\n```\r\nfor (; k < (end - start) / width; k++) {\r\n  Vec<scalar_t> a;\r\n  a.load(...);\r\n  a = VOP<scalar_t>()(a);\r\n  a.store(...);\r\n}\r\n...\r\n```\r\n", "created_at": "2018-03-27T15:30:04Z", "updated_at": "2018-11-23T15:41:09Z", "html_url": "https://github.com/pytorch/pytorch/pull/6030#discussion_r177469006", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/6030", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/177469006"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/6030#discussion_r177469006"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/6030"}}, "body_html": "<p>This looks more complicated than necessary. I don't think there's any advantage to using more registers than necessary. Just do:</p>\n<pre><code>for (; k &lt; (end - start) / width; k++) {\n  Vec&lt;scalar_t&gt; a;\n  a.load(...);\n  a = VOP&lt;scalar_t&gt;()(a);\n  a.store(...);\n}\n...\n</code></pre>", "body_text": "This looks more complicated than necessary. I don't think there's any advantage to using more registers than necessary. Just do:\nfor (; k < (end - start) / width; k++) {\n  Vec<scalar_t> a;\n  a.load(...);\n  a = VOP<scalar_t>()(a);\n  a.store(...);\n}\n..."}