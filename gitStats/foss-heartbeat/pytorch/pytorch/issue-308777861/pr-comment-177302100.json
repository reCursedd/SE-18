{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/177302100", "pull_request_review_id": 107146087, "id": 177302100, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NzMwMjEwMA==", "diff_hunk": "@@ -0,0 +1,132 @@\n+#include \"ATen/native/cpu/UnaryOpsKernel.h\"\n+#include \"ATen/Dispatch.h\"\n+#include \"ATen/Parallel.h\"\n+#include <iostream>\n+#include <cmath>\n+#include \"ATen/native/cpu/Vec256.h\"\n+\n+namespace at {\n+namespace native {\n+\n+using namespace vec256;\n+\n+// This modifies arr in place with given OP\n+template <class scalar_t, template <class> class VOP, template <class> class SOP, CPUCapability C>\n+inline void kernel_(scalar_t *arr_out, const scalar_t *arr_in, size_t start, size_t end) {\n+  // Use all 16 registers.\n+  Vec256<scalar_t> a[8];\n+  size_t width =\n+      256 / sizeof(scalar_t); // primitives per 256 bytes (two cache lines)\n+  size_t epr = 32 / sizeof(scalar_t); // primitives per Vec256\n+  size_t k = 0;\n+  for (; k < (end - start) / width; k++) {\n+    for (size_t i = 0; i < 8; i++) {\n+      a[i].load(arr_in + (k * width) + i * epr + start);\n+    }\n+    for (size_t i = 0; i < 8; i++) {\n+      VOP<scalar_t>()(a[i]);\n+    }\n+    for (size_t i = 0; i < 8; i++) {\n+      a[i].store(arr_out + (k * width) + i * epr + start);\n+    }\n+  }\n+  k = k * width + start;\n+  for (; k < end; k++) {\n+    arr_out[k] = SOP<scalar_t>()(arr_in[k]);", "path": "aten/src/ATen/native/cpu/UnaryOpsKernel.cpp", "position": null, "original_position": 35, "commit_id": "1a6993fb9b94a8bd24ece404e3d5d235e82ef6f4", "original_commit_id": "7df4b46dd3fb7a7bf8f6992324111649880324a0", "user": {"login": "cpuhrsch", "id": 1716488, "node_id": "MDQ6VXNlcjE3MTY0ODg=", "avatar_url": "https://avatars1.githubusercontent.com/u/1716488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cpuhrsch", "html_url": "https://github.com/cpuhrsch", "followers_url": "https://api.github.com/users/cpuhrsch/followers", "following_url": "https://api.github.com/users/cpuhrsch/following{/other_user}", "gists_url": "https://api.github.com/users/cpuhrsch/gists{/gist_id}", "starred_url": "https://api.github.com/users/cpuhrsch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cpuhrsch/subscriptions", "organizations_url": "https://api.github.com/users/cpuhrsch/orgs", "repos_url": "https://api.github.com/users/cpuhrsch/repos", "events_url": "https://api.github.com/users/cpuhrsch/events{/privacy}", "received_events_url": "https://api.github.com/users/cpuhrsch/received_events", "type": "User", "site_admin": false}, "body": "This can be simplified (to remove SOP entirely) using partial loads and stores for vec256 as suggested by Sam Gross.", "created_at": "2018-03-27T03:58:10Z", "updated_at": "2018-11-23T15:41:08Z", "html_url": "https://github.com/pytorch/pytorch/pull/6030#discussion_r177302100", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/6030", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/177302100"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/6030#discussion_r177302100"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/6030"}}, "body_html": "<p>This can be simplified (to remove SOP entirely) using partial loads and stores for vec256 as suggested by Sam Gross.</p>", "body_text": "This can be simplified (to remove SOP entirely) using partial loads and stores for vec256 as suggested by Sam Gross."}