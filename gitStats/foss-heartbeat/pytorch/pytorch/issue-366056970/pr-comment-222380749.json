{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/222380749", "pull_request_review_id": 161253877, "id": 222380749, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyMjM4MDc0OQ==", "diff_hunk": "@@ -864,9 +856,35 @@ struct CAFFE2_API TensorImpl : public c10::intrusive_ptr_target {\n   }\n \n   inline void update_to_contiguous_strides() {\n-    strides_.resize(0);\n+    strides_.reset();\n     is_contiguous_ = true;\n   }\n \n+public:\n+  at::Storage storage_; // TODO: Fix visibility on me\n+\n+protected:\n+  std::vector<int64_t> sizes_;", "path": "aten/src/ATen/core/TensorImpl.h", "position": 121, "original_position": 121, "commit_id": "7949a4a51d359179d4b86a07b557ea806b92c254", "original_commit_id": "7949a4a51d359179d4b86a07b557ea806b92c254", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "Yes, we can save another word this way, because we don't need the allocated data. However, I cannot actually apply this optimization right now, because Caffe2 Tensor API has a function `const std::vector<int64_t>& dims()`, which requires me to have an actual `std::vector` on hand. I am working on a refactor commit that removes the need from this, but in the meantime it's better to unblock this UBN.\r\n\r\nAnd yes, allocating a single block is probably better.", "created_at": "2018-10-03T16:34:37Z", "updated_at": "2018-11-23T15:52:15Z", "html_url": "https://github.com/pytorch/pytorch/pull/12266#discussion_r222380749", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/12266", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/222380749"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/12266#discussion_r222380749"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/12266"}}, "body_html": "<p>Yes, we can save another word this way, because we don't need the allocated data. However, I cannot actually apply this optimization right now, because Caffe2 Tensor API has a function <code>const std::vector&lt;int64_t&gt;&amp; dims()</code>, which requires me to have an actual <code>std::vector</code> on hand. I am working on a refactor commit that removes the need from this, but in the meantime it's better to unblock this UBN.</p>\n<p>And yes, allocating a single block is probably better.</p>", "body_text": "Yes, we can save another word this way, because we don't need the allocated data. However, I cannot actually apply this optimization right now, because Caffe2 Tensor API has a function const std::vector<int64_t>& dims(), which requires me to have an actual std::vector on hand. I am working on a refactor commit that removes the need from this, but in the meantime it's better to unblock this UBN.\nAnd yes, allocating a single block is probably better.", "in_reply_to_id": 222367881}