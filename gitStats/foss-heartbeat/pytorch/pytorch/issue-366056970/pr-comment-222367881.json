{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/222367881", "pull_request_review_id": 161237661, "id": 222367881, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyMjM2Nzg4MQ==", "diff_hunk": "@@ -864,9 +856,35 @@ struct CAFFE2_API TensorImpl : public c10::intrusive_ptr_target {\n   }\n \n   inline void update_to_contiguous_strides() {\n-    strides_.resize(0);\n+    strides_.reset();\n     is_contiguous_ = true;\n   }\n \n+public:\n+  at::Storage storage_; // TODO: Fix visibility on me\n+\n+protected:\n+  std::vector<int64_t> sizes_;", "path": "aten/src/ATen/core/TensorImpl.h", "position": 121, "original_position": 121, "commit_id": "7949a4a51d359179d4b86a07b557ea806b92c254", "original_commit_id": "7949a4a51d359179d4b86a07b557ea806b92c254", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Wouldn't it still be beneficial if we used `unique_ptr` for `sizes_` too? IIRC `vector` usually contains at least three 8B members: beginning pointer, end pointer, and allocated capacity. This means that currently we're using 32B for sizes and strides. If we were to keep an `int64_t dims` and two `unique_ptr`s, that would lower the size to 24B.", "created_at": "2018-10-03T15:57:34Z", "updated_at": "2018-11-23T15:52:15Z", "html_url": "https://github.com/pytorch/pytorch/pull/12266#discussion_r222367881", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/12266", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/222367881"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/12266#discussion_r222367881"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/12266"}}, "body_html": "<p>Wouldn't it still be beneficial if we used <code>unique_ptr</code> for <code>sizes_</code> too? IIRC <code>vector</code> usually contains at least three 8B members: beginning pointer, end pointer, and allocated capacity. This means that currently we're using 32B for sizes and strides. If we were to keep an <code>int64_t dims</code> and two <code>unique_ptr</code>s, that would lower the size to 24B.</p>", "body_text": "Wouldn't it still be beneficial if we used unique_ptr for sizes_ too? IIRC vector usually contains at least three 8B members: beginning pointer, end pointer, and allocated capacity. This means that currently we're using 32B for sizes and strides. If we were to keep an int64_t dims and two unique_ptrs, that would lower the size to 24B."}