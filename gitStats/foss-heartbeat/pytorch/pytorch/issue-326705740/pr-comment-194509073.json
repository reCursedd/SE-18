{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/194509073", "pull_request_review_id": 127668576, "id": 194509073, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDUwOTA3Mw==", "diff_hunk": "@@ -0,0 +1,96 @@\n+#pragma once\n+\n+#include <ATen/Error.h>\n+#include <ATen/ScalarType.h>\n+#include <ATen/Tensor.h>\n+#include <ATen/Type.h>\n+#include <ATen/detail/CUDAHooksInterface.h>\n+#include <ATen/optional.h>\n+\n+#include <cstddef>\n+\n+namespace at {\n+/// RAII guard that sets the CUDA device index in its constructor, and changes\n+/// it back to the index that was originally active upon destruction.\n+///\n+/// The index is always reset to the one that was active at the time of\n+/// construction of the guard. Even if you `set_index` after construction, the\n+/// destructor will still reset the index to the one that was active at\n+/// construction time.\n+///\n+/// The index is represented by an `optional<int32_t>`. Both `nullopt` and `-1`\n+/// represent the default device. `nullopt` should be preferred, support for\n+/// `-1` is kept for legacy reasons.\n+struct AutoGPU {\n+  /// Sets the current device to the given index if it is not `nullopt`, else\n+  /// does nothing.\n+  ///\n+  /// NOTE: The nvcc device compiler fails with an internal\n+  /// compiler error when this function is defined in the header >:(\n+  ///\n+  /// > Internal Compiler Error (codegen): \"there was an error in verifying the\n+  /// > lgenfe output!\n+  explicit AutoGPU(optional<int32_t> index = nullopt);\n+\n+  /// Sets the current device to the given index if it is not -1, else does\n+  /// nothing.\n+  explicit AutoGPU(int32_t index) {\n+    set_index(index);\n+  }\n+\n+  /// Sets the GPU to the index on which the given tensor is located.\n+  explicit AutoGPU(const Tensor& tensor) {\n+    set_index_from(tensor);\n+  }\n+\n+  /// Sets the GPU to the index on which the first tensor in the list is\n+  /// located. If the list is empty, does nothing.\n+  explicit AutoGPU(const TensorList& tensors) {\n+    if (!tensors.empty()) {\n+      set_index_from(tensors.front());\n+    }\n+  }\n+\n+  /// Resets the GPU to the index that was active at construction of the guard.\n+  ~AutoGPU() {\n+    // It should only not have a value if an index was never actually set.\n+    if (original_index_.has_value()) {\n+      // Not checking because we don't want to throw in the destructor.\n+      detail::DynamicCUDAInterface::set_device(*original_index_);\n+    }\n+  }\n+\n+  /// Sets the GPU to the given index if it is not `nullopt` and not -1, else\n+  /// does nothing.\n+  void set_index(at::optional<int32_t> index) {\n+    if (!index.has_value() || *index == -1) {\n+      return;\n+    }\n+    if (!original_index_.has_value()) {\n+      original_index_ = -1;\n+      detail::DynamicCUDAInterface::check_status(\n+          detail::DynamicCUDAInterface::get_device(&original_index_.value()));", "path": "aten/src/ATen/AutoGPU.h", "position": null, "original_position": 72, "commit_id": "c5b2af6a950b67445ad8916d364fd24456d7aa39", "original_commit_id": "c760d1cdac573d758f59013d06d1ae773a91bd26", "user": {"login": "colesbury", "id": 655866, "node_id": "MDQ6VXNlcjY1NTg2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/655866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colesbury", "html_url": "https://github.com/colesbury", "followers_url": "https://api.github.com/users/colesbury/followers", "following_url": "https://api.github.com/users/colesbury/following{/other_user}", "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions", "organizations_url": "https://api.github.com/users/colesbury/orgs", "repos_url": "https://api.github.com/users/colesbury/repos", "events_url": "https://api.github.com/users/colesbury/events{/privacy}", "received_events_url": "https://api.github.com/users/colesbury/received_events", "type": "User", "site_admin": false}, "body": "This bit of code is particularly confusing. `original_index_` is always `nullopt` or a valid device except for in these few lines, where it temporarily has the value -1.\r\n\r\nThis isn't exception safe. If `check_status` or `get_device` throw an exception, then original_index_ will still have -1, which will break in the destructor. Instead do something like:\r\n\r\n```\r\nint previous_device;\r\ndetail::DynamicCUDAInterface::check_status(detail::DynamicCUDAInterface::get_device(&previous_device));\r\noriginal_index_ = previous_device;\r\n```", "created_at": "2018-06-11T18:49:31Z", "updated_at": "2018-11-23T15:45:19Z", "html_url": "https://github.com/pytorch/pytorch/pull/7869#discussion_r194509073", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/7869", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/194509073"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/7869#discussion_r194509073"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/7869"}}, "body_html": "<p>This bit of code is particularly confusing. <code>original_index_</code> is always <code>nullopt</code> or a valid device except for in these few lines, where it temporarily has the value -1.</p>\n<p>This isn't exception safe. If <code>check_status</code> or <code>get_device</code> throw an exception, then original_index_ will still have -1, which will break in the destructor. Instead do something like:</p>\n<pre><code>int previous_device;\ndetail::DynamicCUDAInterface::check_status(detail::DynamicCUDAInterface::get_device(&amp;previous_device));\noriginal_index_ = previous_device;\n</code></pre>", "body_text": "This bit of code is particularly confusing. original_index_ is always nullopt or a valid device except for in these few lines, where it temporarily has the value -1.\nThis isn't exception safe. If check_status or get_device throw an exception, then original_index_ will still have -1, which will break in the destructor. Instead do something like:\nint previous_device;\ndetail::DynamicCUDAInterface::check_status(detail::DynamicCUDAInterface::get_device(&previous_device));\noriginal_index_ = previous_device;"}