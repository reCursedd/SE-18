{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/195622690", "pull_request_review_id": 129029810, "id": 195622690, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTYyMjY5MA==", "diff_hunk": "@@ -0,0 +1,44 @@\n+# Generates C++ functions that wrap ATen tensor factory methods to turn them into Variables.\n+#\n+# This writes one file: variable_factories.h\n+\n+from .utils import CodeTemplate, write\n+\n+FUNCTION_TEMPLATE = CodeTemplate(\"\"\"\\\n+inline autograd::Variable ${name}(${formals}) {\n+  at::Tensor tensor = at::${name}(${actuals});\n+  return autograd::make_variable(tensor, /*requires_grad=*/${requires_grad});\n+}\n+\"\"\")\n+\n+\n+def gen_variable_factories(out, declarations, template_path):\n+    function_definitions = []\n+    for decl in declarations:\n+        has_tensor_options = any(a[\"simple_type\"] == \"TensorOptions\" for a in decl[\"arguments\"])\n+        if has_tensor_options or decl[\"name\"].endswith(\"_like\"):\n+            function_definitions.append(process_function(decl, has_tensor_options))\n+    write(out,\n+          \"variable_factories.h\",\n+          CodeTemplate.from_file(template_path + \"/variable_factories.h\"),\n+          {\"function_definitions\": function_definitions})\n+\n+\n+def process_function(decl, has_tensor_options):\n+    formals = []\n+    actuals = []\n+    for argument in decl[\"arguments\"]:\n+        default = \"= {}\".format(argument[\"default\"]) if \"default\" in argument else \"\"\n+        formals.append(\"{} {} {}\".format(argument[\"type\"], argument[\"name\"], default))\n+        actual = argument[\"name\"]\n+        if argument[\"simple_type\"] == \"TensorOptions\":\n+            # We want to discard the runtime type so that `at::{name}` always returns a\n+            # tensor and not a variable, since we create a variable right after.\n+            actual += \".discard_runtime_type()\"", "path": "tools/autograd/gen_variable_factories.py", "position": 37, "original_position": 37, "commit_id": "c5b2af6a950b67445ad8916d364fd24456d7aa39", "original_commit_id": "c7040a5c12812a43b07472f31b5c589672e8cd82", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "I'm skeptical. Why are you \"creating a variable right after\"?", "created_at": "2018-06-15T02:52:00Z", "updated_at": "2018-11-23T15:45:37Z", "html_url": "https://github.com/pytorch/pytorch/pull/7869#discussion_r195622690", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/7869", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/195622690"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/7869#discussion_r195622690"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/7869"}}, "body_html": "<p>I'm skeptical. Why are you \"creating a variable right after\"?</p>", "body_text": "I'm skeptical. Why are you \"creating a variable right after\"?"}