{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/195603838", "pull_request_review_id": 129008006, "id": 195603838, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTYwMzgzOA==", "diff_hunk": "@@ -0,0 +1,85 @@\n+#pragma once\n+\n+#include <ATen/Device.h>\n+#include <ATen/ScalarType.h>\n+#include <ATen/Tensor.h>\n+#include <ATen/detail/CUDAHooksInterface.h>\n+#include <ATen/optional.h>\n+\n+#include <cstddef>\n+\n+namespace at {\n+/// RAII guard that sets a certain default GPU index in its constructor, and\n+/// changes it back to the device that was originally active upon destruction.\n+///\n+/// The index is always reset to the one that was active at the time of\n+/// construction of the guard. Even if you `set_index` after construction, the\n+/// destructor will still reset the index to the one that was active at\n+/// construction time.\n+///\n+/// Legacy constructors and setters are kept around that accept -1 as the device\n+/// index, which is equivalent to `at::nullopt`. All new code should prefer the\n+/// latter.\n+struct DeviceGuard {\n+  /// Default constructor, does nothing.\n+  DeviceGuard();\n+\n+  DeviceGuard(at::optional<int32_t> index);\n+\n+  /// Legacy constructor that accepts -1 as the device index and turns it into\n+  /// `at::nullopt`.\n+  /* deprecated */ DeviceGuard(int32_t index);\n+\n+  /// Sets the device to the index on which the given tensor is located.\n+  explicit DeviceGuard(const Tensor& tensor);\n+\n+  /// Sets the device to the index on which the first tensor in the list is\n+  /// located. If the list is empty, does nothing.\n+  explicit DeviceGuard(const TensorList& tensors);", "path": "aten/src/ATen/DeviceGuard.h", "position": null, "original_position": 38, "commit_id": "c5b2af6a950b67445ad8916d364fd24456d7aa39", "original_commit_id": "f680311e8d81a017c92d910de4164fa8cc5ca4c2", "user": {"login": "goldsborough", "id": 6429851, "node_id": "MDQ6VXNlcjY0Mjk4NTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/6429851?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goldsborough", "html_url": "https://github.com/goldsborough", "followers_url": "https://api.github.com/users/goldsborough/followers", "following_url": "https://api.github.com/users/goldsborough/following{/other_user}", "gists_url": "https://api.github.com/users/goldsborough/gists{/gist_id}", "starred_url": "https://api.github.com/users/goldsborough/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goldsborough/subscriptions", "organizations_url": "https://api.github.com/users/goldsborough/orgs", "repos_url": "https://api.github.com/users/goldsborough/repos", "events_url": "https://api.github.com/users/goldsborough/events{/privacy}", "received_events_url": "https://api.github.com/users/goldsborough/received_events", "type": "User", "site_admin": false}, "body": "I think I looked into this originally, but the issue is this constructor is used in generated code in `python_torch_functions_dispatch.h`, and it's much more convenient to just use the same code for all dispatch functions instead of changing the codegen", "created_at": "2018-06-14T23:53:43Z", "updated_at": "2018-11-23T15:45:36Z", "html_url": "https://github.com/pytorch/pytorch/pull/7869#discussion_r195603838", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/7869", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/195603838"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/7869#discussion_r195603838"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/7869"}}, "body_html": "<p>I think I looked into this originally, but the issue is this constructor is used in generated code in <code>python_torch_functions_dispatch.h</code>, and it's much more convenient to just use the same code for all dispatch functions instead of changing the codegen</p>", "body_text": "I think I looked into this originally, but the issue is this constructor is used in generated code in python_torch_functions_dispatch.h, and it's much more convenient to just use the same code for all dispatch functions instead of changing the codegen", "in_reply_to_id": 195598334}