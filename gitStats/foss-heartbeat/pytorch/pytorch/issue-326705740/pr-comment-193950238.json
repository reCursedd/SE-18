{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/193950238", "pull_request_review_id": 127026150, "id": 193950238, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5Mzk1MDIzOA==", "diff_hunk": "@@ -1,26 +1,37 @@\n #include <ATen/detail/CUDAHooksInterface.h>\n \n-namespace at {\n+#include <mutex>\n \n+namespace at {\n namespace detail {\n-  const CUDAHooksInterface& getCUDAHooks() {\n-    static std::unique_ptr<CUDAHooksInterface> cuda_hooks;\n-    // NB: The once_flag here implies that if you try to call any CUDA\n-    // functionality before libATen_cuda.so is loaded, CUDA is permanently\n-    // disabled for that copy of ATen.  In principle, we can relax this\n-    // restriction, but you might have to fix some code.  See getVariableHooks()\n-    // for an example where we relax this restriction (but if you try to avoid\n-    // needing a lock, be careful; it doesn't look like Registry.h is thread\n-    // safe...)\n-    static std::once_flag once;\n-    std::call_once(once, []{\n-      cuda_hooks = CUDAHooksRegistry()->Create(\"CUDAHooks\", CUDAHooksArgs{});\n-      if (!cuda_hooks) {\n-        cuda_hooks = std::unique_ptr<CUDAHooksInterface>(new CUDAHooksInterface());\n-      }\n-    });\n-    return *cuda_hooks;\n-  }\n+\n+// Default the static members of DynamicCUDAInterface.\n+std::function<int(int)> DynamicCUDAInterface::set_device = [](int) {", "path": "aten/src/ATen/detail/CUDAHooksInterface.cpp", "position": null, "original_position": 28, "commit_id": "c5b2af6a950b67445ad8916d364fd24456d7aa39", "original_commit_id": "c760d1cdac573d758f59013d06d1ae773a91bd26", "user": {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, "body": "Why are these std::function's and not function pointers?\r\nI believe std::function adds overhead because it handles the potential for there to be captures in a lambda.", "created_at": "2018-06-08T04:30:51Z", "updated_at": "2018-11-23T15:45:14Z", "html_url": "https://github.com/pytorch/pytorch/pull/7869#discussion_r193950238", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/7869", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/193950238"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/7869#discussion_r193950238"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/7869"}}, "body_html": "<p>Why are these std::function's and not function pointers?<br>\nI believe std::function adds overhead because it handles the potential for there to be captures in a lambda.</p>", "body_text": "Why are these std::function's and not function pointers?\nI believe std::function adds overhead because it handles the potential for there to be captures in a lambda."}