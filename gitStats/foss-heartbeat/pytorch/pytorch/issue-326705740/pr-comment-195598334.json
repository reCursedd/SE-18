{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/195598334", "pull_request_review_id": 128999395, "id": 195598334, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTU5ODMzNA==", "diff_hunk": "@@ -0,0 +1,85 @@\n+#pragma once\n+\n+#include <ATen/Device.h>\n+#include <ATen/ScalarType.h>\n+#include <ATen/Tensor.h>\n+#include <ATen/detail/CUDAHooksInterface.h>\n+#include <ATen/optional.h>\n+\n+#include <cstddef>\n+\n+namespace at {\n+/// RAII guard that sets a certain default GPU index in its constructor, and\n+/// changes it back to the device that was originally active upon destruction.\n+///\n+/// The index is always reset to the one that was active at the time of\n+/// construction of the guard. Even if you `set_index` after construction, the\n+/// destructor will still reset the index to the one that was active at\n+/// construction time.\n+///\n+/// Legacy constructors and setters are kept around that accept -1 as the device\n+/// index, which is equivalent to `at::nullopt`. All new code should prefer the\n+/// latter.\n+struct DeviceGuard {\n+  /// Default constructor, does nothing.\n+  DeviceGuard();\n+\n+  DeviceGuard(at::optional<int32_t> index);\n+\n+  /// Legacy constructor that accepts -1 as the device index and turns it into\n+  /// `at::nullopt`.\n+  /* deprecated */ DeviceGuard(int32_t index);\n+\n+  /// Sets the device to the index on which the given tensor is located.\n+  explicit DeviceGuard(const Tensor& tensor);\n+\n+  /// Sets the device to the index on which the first tensor in the list is\n+  /// located. If the list is empty, does nothing.\n+  explicit DeviceGuard(const TensorList& tensors);", "path": "aten/src/ATen/DeviceGuard.h", "position": null, "original_position": 38, "commit_id": "c5b2af6a950b67445ad8916d364fd24456d7aa39", "original_commit_id": "f680311e8d81a017c92d910de4164fa8cc5ca4c2", "user": {"login": "gchanan", "id": 3768583, "node_id": "MDQ6VXNlcjM3Njg1ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3768583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gchanan", "html_url": "https://github.com/gchanan", "followers_url": "https://api.github.com/users/gchanan/followers", "following_url": "https://api.github.com/users/gchanan/following{/other_user}", "gists_url": "https://api.github.com/users/gchanan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gchanan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gchanan/subscriptions", "organizations_url": "https://api.github.com/users/gchanan/orgs", "repos_url": "https://api.github.com/users/gchanan/repos", "events_url": "https://api.github.com/users/gchanan/events{/privacy}", "received_events_url": "https://api.github.com/users/gchanan/received_events", "type": "User", "site_admin": false}, "body": "can we just do this explicitly?  IMO it's better to make it obvious what's happening at the call site than not.", "created_at": "2018-06-14T23:15:46Z", "updated_at": "2018-11-23T15:45:35Z", "html_url": "https://github.com/pytorch/pytorch/pull/7869#discussion_r195598334", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/7869", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/195598334"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/7869#discussion_r195598334"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/7869"}}, "body_html": "<p>can we just do this explicitly?  IMO it's better to make it obvious what's happening at the call site than not.</p>", "body_text": "can we just do this explicitly?  IMO it's better to make it obvious what's happening at the call site than not."}