{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/193949925", "pull_request_review_id": 127026150, "id": 193949925, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5Mzk0OTkyNQ==", "diff_hunk": "@@ -13,22 +15,61 @@\n \n #include <cuda.h>\n \n-namespace at { namespace cuda { namespace detail {\n+#include <functional>\n+#include <memory>\n+\n+namespace at {\n+namespace cuda {\n+namespace detail {\n+namespace {\n+void check_status(int status) {\n+  AT_CHECK(\n+      static_cast<cudaError_t>(status) == cudaSuccess,\n+      \"CUDA error (\",\n+      static_cast<int>(status),\n+      \"): \",\n+      cudaGetErrorString(static_cast<cudaError_t>(status)));\n+}\n+\n+struct DynamicCUDAInterfaceSetter {\n+  DynamicCUDAInterfaceSetter() {\n+    // Technically it is U.B. to call a function through a pointer, when the\n+    // pointer is of different type than its declaration. Here, we commit this\n+    // sin because `cudaSetDevice` and `cudaGetDevice` return a `cudaError_t`\n+    // enum, which we must avoid exposing to the CPU library, and because enums\n+    // are compatible with `int` for all practical purposes.\n+    at::detail::DynamicCUDAInterface::set_device =\n+        reinterpret_cast<int (*)(int)>(cudaSetDevice);\n+    at::detail::DynamicCUDAInterface::get_device =\n+        reinterpret_cast<int (*)(int*)>(cudaGetDevice);\n+    at::detail::DynamicCUDAInterface::check_status =\n+        reinterpret_cast<void (*)(int)>(check_status);\n+  }\n+};\n+\n+// Single, global, static (because of the anonymous namespace) instance, whose\n+// constructor will set the static members of `DynamicCUDAInterface` to CUDA\n+// functions when the ATen CUDA library is loaded.\n+DynamicCUDAInterfaceSetter _;", "path": "aten/src/ATen/cuda/detail/CUDAHooks.cpp", "position": 63, "original_position": 54, "commit_id": "c5b2af6a950b67445ad8916d364fd24456d7aa39", "original_commit_id": "c760d1cdac573d758f59013d06d1ae773a91bd26", "user": {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, "body": "I think the assignments here will race against active instances of AutoGPU that may be running in another thread when libATen_gpu.so is loaded. This circumstance will be very rare.  I am not sure we should care. What are your thoughts?", "created_at": "2018-06-08T04:26:40Z", "updated_at": "2018-11-23T15:45:14Z", "html_url": "https://github.com/pytorch/pytorch/pull/7869#discussion_r193949925", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/7869", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/193949925"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/7869#discussion_r193949925"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/7869"}}, "body_html": "<p>I think the assignments here will race against active instances of AutoGPU that may be running in another thread when libATen_gpu.so is loaded. This circumstance will be very rare.  I am not sure we should care. What are your thoughts?</p>", "body_text": "I think the assignments here will race against active instances of AutoGPU that may be running in another thread when libATen_gpu.so is loaded. This circumstance will be very rare.  I am not sure we should care. What are your thoughts?"}