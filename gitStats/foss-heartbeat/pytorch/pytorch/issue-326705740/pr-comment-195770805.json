{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/195770805", "pull_request_review_id": 129205590, "id": 195770805, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTc3MDgwNQ==", "diff_hunk": "@@ -0,0 +1,186 @@\n+#pragma once\n+\n+#include <ATen/Context.h>\n+#include <ATen/Device.h>\n+#include <ATen/Layout.h>\n+#include <ATen/ScalarType.h>\n+#include <ATen/Tensor.h>\n+#include <ATen/Type.h>\n+#include <ATen/optional.h>\n+\n+#include <cstddef>\n+\n+namespace at {\n+\n+/// A class to encapsulate construction axes of a `Tensor`.\n+/// `TensorOptions` is a virtual class to enable overriding of certain methods\n+/// by subclasses in other libraries, such as PyTorch. In PyTorch, there is a\n+/// `torch::TensorOptions` subclass of this `TensorOptions`, which changes\n+/// `type()` to return a variable type instead of a tensor type, such that\n+/// variables are created inside factory methods, instead of tensors.\n+struct TensorOptions {\n+  /// Constructs the `TensorOptions` with valid defaults, which are:\n+  /// - dtype: float\n+  /// - device: CPU\n+  /// - layout: strided\n+  TensorOptions() = default;\n+\n+  /// Constructs the `TensorOptions` from the type of the given `Tensor`.\n+  /// If the `Tensor` has a CUDA type, the `device_index` will match that of the\n+  /// tensor. See the constructor from `Type` for the semantics w.r.t. the\n+  /// `type()` method.\n+  explicit TensorOptions(Tensor tensor, bool discard_runtime_type = false);\n+\n+  /// Constructs the `TensorOptions` from a type and optional `device_index`.\n+  ///\n+  /// If `discard_runtime_type` is false (the default), the behavior of", "path": "aten/src/ATen/TensorOptions.h", "position": null, "original_position": 36, "commit_id": "c5b2af6a950b67445ad8916d364fd24456d7aa39", "original_commit_id": "f680311e8d81a017c92d910de4164fa8cc5ca4c2", "user": {"login": "gchanan", "id": 3768583, "node_id": "MDQ6VXNlcjM3Njg1ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3768583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gchanan", "html_url": "https://github.com/gchanan", "followers_url": "https://api.github.com/users/gchanan/followers", "following_url": "https://api.github.com/users/gchanan/following{/other_user}", "gists_url": "https://api.github.com/users/gchanan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gchanan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gchanan/subscriptions", "organizations_url": "https://api.github.com/users/gchanan/orgs", "repos_url": "https://api.github.com/users/gchanan/repos", "events_url": "https://api.github.com/users/gchanan/events{/privacy}", "received_events_url": "https://api.github.com/users/gchanan/received_events", "type": "User", "site_admin": false}, "body": "Sounds reasonable but @goldsborough mentioned elsewhere he had trouble with optional and NVCC.", "created_at": "2018-06-15T15:06:21Z", "updated_at": "2018-11-23T15:45:39Z", "html_url": "https://github.com/pytorch/pytorch/pull/7869#discussion_r195770805", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/7869", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/195770805"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/7869#discussion_r195770805"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/7869"}}, "body_html": "<p>Sounds reasonable but <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=6429851\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/goldsborough\">@goldsborough</a> mentioned elsewhere he had trouble with optional and NVCC.</p>", "body_text": "Sounds reasonable but @goldsborough mentioned elsewhere he had trouble with optional and NVCC.", "in_reply_to_id": 195600085}