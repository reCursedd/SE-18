{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/195597020", "pull_request_review_id": 128999395, "id": 195597020, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTU5NzAyMA==", "diff_hunk": "@@ -0,0 +1,113 @@\n+#pragma once\n+\n+#include <ATen/Error.h>\n+#include <ATen/ScalarType.h>\n+#include <ATen/Tensor.h>\n+#include <ATen/TensorMethods.h>\n+#include <ATen/Type.h>\n+#include <ATen/optional.h>\n+\n+#include <cstddef>\n+#include <iosfwd>\n+#include <string>\n+\n+namespace at {\n+/// Represents a a compute device on which a tensor is located. A device is\n+/// uniquely identified by a type, which specifies the type of machine it is\n+/// (e.g. CPU or CUDA GPU), and a device index or ordinal, which identifies the\n+/// specific compute device when there is more than one of a certain type. The\n+/// device index is optional, and in its defaulted state represents (abstractly)\n+/// \"the current device\". Further, there are two constraints on the value of the\n+/// device index, if one is explicitly stored:\n+/// 1. The device index is never negative.\n+/// 2. When the device type is CPU, the device index must be zero.\n+struct Device {\n+  /// The possible values of the device *type*.\n+  enum class Type { CPU, CUDA };\n+\n+  /// Converts a `Backend` to a `Device::Type` if possible.\n+  static Type backend_to_type(Backend backend) {\n+    switch (backend) {\n+      case kCPU:\n+      case kSparseCPU:\n+        return Type::CPU;\n+      case kCUDA:\n+      case kSparseCUDA:\n+        return Type::CUDA;\n+      default:\n+        AT_ERROR(\n+            \"Invalid backend \", toString(backend), \" for Device construction\");\n+    }\n+  }\n+\n+  /// Constructs a new `Device` from a `Type` and an optional device index.\n+  /* implicit */ Device(Type type, at::optional<int32_t> index);\n+  /* implicit */ Device(Type type);\n+\n+  /// Constructs a `Device` from a string description, for convenience.\n+  /// The string supplied must follow the following schema:\n+  /// `[(cpu|cuda):][<device-index>]`\n+  /// where `cpu:` or `cuda:` optionally specify the device type, and\n+  /// `<device-index>` optionally specifies a device index. The device index\n+  /// defaults to `nullopt`. If no device index is given, the device\n+  /// type defaults to CPU. If a device index is supplied, the type defaults to\n+  /// CUDA, such that a string like \"1\" would be equivalent to \"cuda:1\".\n+  /* implicit */ Device(const std::string& device_string);\n+\n+  /// Constructs a new `Device` from a `Backend` (which is converted to a\n+  /// `Type`, if possible) and an optional device index.\n+  /* implicit */ Device(Backend backend, at::optional<int32_t> index);", "path": "aten/src/ATen/Device.h", "position": null, "original_position": 59, "commit_id": "c5b2af6a950b67445ad8916d364fd24456d7aa39", "original_commit_id": "f680311e8d81a017c92d910de4164fa8cc5ca4c2", "user": {"login": "gchanan", "id": 3768583, "node_id": "MDQ6VXNlcjM3Njg1ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3768583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gchanan", "html_url": "https://github.com/gchanan", "followers_url": "https://api.github.com/users/gchanan/followers", "following_url": "https://api.github.com/users/gchanan/following{/other_user}", "gists_url": "https://api.github.com/users/gchanan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gchanan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gchanan/subscriptions", "organizations_url": "https://api.github.com/users/gchanan/orgs", "repos_url": "https://api.github.com/users/gchanan/repos", "events_url": "https://api.github.com/users/gchanan/events{/privacy}", "received_events_url": "https://api.github.com/users/gchanan/received_events", "type": "User", "site_admin": false}, "body": "why have any of these be implicit?", "created_at": "2018-06-14T23:07:15Z", "updated_at": "2018-11-23T15:45:35Z", "html_url": "https://github.com/pytorch/pytorch/pull/7869#discussion_r195597020", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/7869", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/195597020"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/7869#discussion_r195597020"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/7869"}}, "body_html": "<p>why have any of these be implicit?</p>", "body_text": "why have any of these be implicit?"}