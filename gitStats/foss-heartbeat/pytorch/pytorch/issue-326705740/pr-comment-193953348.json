{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/193953348", "pull_request_review_id": 127026150, "id": 193953348, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5Mzk1MzM0OA==", "diff_hunk": "@@ -9,7 +9,7 @@ using namespace std;\n using namespace at;\n \n void trace() {\n-  Tensor foo = rand(CPU(kFloat), {12,12});\n+  Tensor foo = rand({12,12});", "path": "aten/src/ATen/test/atest.cpp", "position": 5, "original_position": 5, "commit_id": "c5b2af6a950b67445ad8916d364fd24456d7aa39", "original_commit_id": "c760d1cdac573d758f59013d06d1ae773a91bd26", "user": {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, "body": "I think it would be worth it to add backwards compatibility functions to TensorOption for\r\n`ones, zeros, rand, tensor`. That way `at::CPU(at::kFloat).ones()` still works, for example. These can be written manually and forward to the `at::ones` versions. If you look at these tests it is nearly 25% of the lines that need modification, and I worry how much we will break our few C++ users. Those 4 functions are one liners and handle the majority of cases.", "created_at": "2018-06-08T05:04:13Z", "updated_at": "2018-11-23T15:45:14Z", "html_url": "https://github.com/pytorch/pytorch/pull/7869#discussion_r193953348", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/7869", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/193953348"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/7869#discussion_r193953348"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/7869"}}, "body_html": "<p>I think it would be worth it to add backwards compatibility functions to TensorOption for<br>\n<code>ones, zeros, rand, tensor</code>. That way <code>at::CPU(at::kFloat).ones()</code> still works, for example. These can be written manually and forward to the <code>at::ones</code> versions. If you look at these tests it is nearly 25% of the lines that need modification, and I worry how much we will break our few C++ users. Those 4 functions are one liners and handle the majority of cases.</p>", "body_text": "I think it would be worth it to add backwards compatibility functions to TensorOption for\nones, zeros, rand, tensor. That way at::CPU(at::kFloat).ones() still works, for example. These can be written manually and forward to the at::ones versions. If you look at these tests it is nearly 25% of the lines that need modification, and I worry how much we will break our few C++ users. Those 4 functions are one liners and handle the majority of cases."}