{"url": "https://api.github.com/repos/pytorch/pytorch/issues/3531", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/3531/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/3531/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/3531/events", "html_url": "https://github.com/pytorch/pytorch/issues/3531", "id": 271822107, "node_id": "MDU6SXNzdWUyNzE4MjIxMDc=", "number": 3531, "title": "indexing operator `[]` inconsistent", "user": {"login": "hughperkins", "id": 123560, "node_id": "MDQ6VXNlcjEyMzU2MA==", "avatar_url": "https://avatars2.githubusercontent.com/u/123560?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hughperkins", "html_url": "https://github.com/hughperkins", "followers_url": "https://api.github.com/users/hughperkins/followers", "following_url": "https://api.github.com/users/hughperkins/following{/other_user}", "gists_url": "https://api.github.com/users/hughperkins/gists{/gist_id}", "starred_url": "https://api.github.com/users/hughperkins/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hughperkins/subscriptions", "organizations_url": "https://api.github.com/users/hughperkins/orgs", "repos_url": "https://api.github.com/users/hughperkins/repos", "events_url": "https://api.github.com/users/hughperkins/events{/privacy}", "received_events_url": "https://api.github.com/users/hughperkins/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2017-11-07T12:56:59Z", "updated_at": "2017-11-07T21:23:51Z", "closed_at": "2017-11-07T13:23:13Z", "author_association": "CONTRIBUTOR", "body_html": "<p>In the following code, some of the assignments assign <code>7</code> to some of the <code>a</code> elements, and some dont. It is not obvious to me which will work, and which will fail, without trying them. In addition, there is no indication (eg Exception or similar) when I try an assigment that has failed.</p>\n<pre><code>import torch\nimport numpy as np\nfrom torch import nn\nfrom torch.autograd import Variable\n\n\na = torch.rand(5, 4)\nidxes = torch.LongTensor([0, 2])\nidxes2 = torch.LongTensor([0])\na[idxes] = 5\nprint('a', a)  # works\n\na = torch.rand(5, 4)\na[idxes].fill_(5)  # doesnt work...\nprint('a', a)\n\na = torch.rand(5, 4)\na[idxes][idxes2] = 7  # doesnt work\nprint('a', a)\n\na = torch.rand(5, 4)\na[:, :2][idxes] = 7  # works\nprint('a', a)\n\na = torch.rand(5, 4)\na[:3][idxes] = 7  # works\nprint('a', a)\n\na = torch.rand(5, 4)\na[idxes][:, 1] = 7  # doesnt work\nprint('a', a)\n\na = torch.rand(5, 4)\na[:, 1][idxes] = 7  # works\nprint('a', a)\n\na = torch.rand(5, 4)\na[:, 1:2][idxes] = torch.FloatTensor(2, 1).fill_(7)  # works\nprint('a', a)\n\na = torch.rand(5, 4)\na[idxes][:, 1:2] = torch.FloatTensor(2, 1).fill_(7)  # doesnt work\nprint('a', a)\n\na = torch.rand(5, 4)\na[idxes][:, 1] = torch.FloatTensor(2).fill_(7)  # doesnt work\nprint('a', a)\n\na = torch.rand(5, 4)\na[:, 1][idxes] = torch.FloatTensor(2).fill_(7)  # works\nprint('a', a)\n</code></pre>\n<p>Output:</p>\n<pre><code>a \n 5.0000  5.0000  5.0000  5.0000\n 0.6669  0.7807  0.0194  0.5675\n 5.0000  5.0000  5.0000  5.0000\n 0.4356  0.6602  0.6314  0.1092\n 0.2036  0.2000  0.9816  0.8419\n[torch.FloatTensor of size 5x4]\n\na \n 0.3230  0.4947  0.9506  0.0903\n 0.9365  0.6267  0.2055  0.5788\n 0.0463  0.6830  0.7359  0.4857\n 0.6834  0.6994  0.3476  0.7177\n 0.2500  0.0212  0.2585  0.4837\n[torch.FloatTensor of size 5x4]\n\na \n 0.1980  0.7275  0.6299  0.9513\n 0.4572  0.7067  0.0579  0.1477\n 0.5097  0.1671  0.6404  0.7760\n 0.4492  0.4818  0.1498  0.8576\n 0.2303  0.6345  0.6970  0.5469\n[torch.FloatTensor of size 5x4]\n\na \n 7.0000  7.0000  0.4355  0.4932\n 0.4353  0.6230  0.5347  0.6431\n 7.0000  7.0000  0.1284  0.1781\n 0.0731  0.6473  0.7768  0.8538\n 0.9966  0.4716  0.2759  0.9330\n[torch.FloatTensor of size 5x4]\n\na \n 7.0000  7.0000  7.0000  7.0000\n 0.0324  0.4269  0.8712  0.8241\n 7.0000  7.0000  7.0000  7.0000\n 0.3683  0.1049  0.5597  0.4110\n 0.6722  0.0703  0.5564  0.3533\n[torch.FloatTensor of size 5x4]\n\na \n 0.0015  0.8867  0.4910  0.9876\n 0.7295  0.9467  0.1075  0.4583\n 0.5853  0.3886  0.4904  0.0028\n 0.3870  0.8603  0.1500  0.9434\n 0.2598  0.2121  0.9444  0.0043\n[torch.FloatTensor of size 5x4]\n\na \n 0.4600  7.0000  0.3556  0.6450\n 0.1235  0.3156  0.5313  0.3157\n 0.0833  7.0000  0.1210  0.0142\n 0.4484  0.0013  0.3783  0.6595\n 0.2480  0.2504  0.8774  0.0878\n[torch.FloatTensor of size 5x4]\n\na \n 0.1780  7.0000  0.3915  0.0832\n 0.1211  0.8207  0.4420  0.6502\n 0.4522  7.0000  0.9128  0.6761\n 0.7840  0.0848  0.5557  0.2763\n 0.7523  0.9910  0.2690  0.9558\n[torch.FloatTensor of size 5x4]\n\na \n 0.7608  0.1659  0.2132  0.8333\n 0.0869  0.8376  0.9227  0.2002\n 0.1625  0.0105  0.9849  0.5148\n 0.5452  0.5200  0.5355  0.3178\n 0.4197  0.9294  0.4172  0.0469\n[torch.FloatTensor of size 5x4]\n\na \n 0.1802  0.0364  0.0561  0.9782\n 0.8888  0.6768  0.7167  0.8842\n 0.2234  0.3741  0.8251  0.7813\n 0.1033  0.4776  0.5335  0.7562\n 0.6567  0.6115  0.0832  0.6691\n[torch.FloatTensor of size 5x4]\n\na \n 0.2363  7.0000  0.7369  0.6097\n 0.9366  0.3713  0.3765  0.2912\n 0.1712  7.0000  0.0485  0.5060\n 0.8131  0.1654  0.5321  0.8097\n 0.9726  0.6265  0.1156  0.7550\n[torch.FloatTensor of size 5x4]\n</code></pre>", "body_text": "In the following code, some of the assignments assign 7 to some of the a elements, and some dont. It is not obvious to me which will work, and which will fail, without trying them. In addition, there is no indication (eg Exception or similar) when I try an assigment that has failed.\nimport torch\nimport numpy as np\nfrom torch import nn\nfrom torch.autograd import Variable\n\n\na = torch.rand(5, 4)\nidxes = torch.LongTensor([0, 2])\nidxes2 = torch.LongTensor([0])\na[idxes] = 5\nprint('a', a)  # works\n\na = torch.rand(5, 4)\na[idxes].fill_(5)  # doesnt work...\nprint('a', a)\n\na = torch.rand(5, 4)\na[idxes][idxes2] = 7  # doesnt work\nprint('a', a)\n\na = torch.rand(5, 4)\na[:, :2][idxes] = 7  # works\nprint('a', a)\n\na = torch.rand(5, 4)\na[:3][idxes] = 7  # works\nprint('a', a)\n\na = torch.rand(5, 4)\na[idxes][:, 1] = 7  # doesnt work\nprint('a', a)\n\na = torch.rand(5, 4)\na[:, 1][idxes] = 7  # works\nprint('a', a)\n\na = torch.rand(5, 4)\na[:, 1:2][idxes] = torch.FloatTensor(2, 1).fill_(7)  # works\nprint('a', a)\n\na = torch.rand(5, 4)\na[idxes][:, 1:2] = torch.FloatTensor(2, 1).fill_(7)  # doesnt work\nprint('a', a)\n\na = torch.rand(5, 4)\na[idxes][:, 1] = torch.FloatTensor(2).fill_(7)  # doesnt work\nprint('a', a)\n\na = torch.rand(5, 4)\na[:, 1][idxes] = torch.FloatTensor(2).fill_(7)  # works\nprint('a', a)\n\nOutput:\na \n 5.0000  5.0000  5.0000  5.0000\n 0.6669  0.7807  0.0194  0.5675\n 5.0000  5.0000  5.0000  5.0000\n 0.4356  0.6602  0.6314  0.1092\n 0.2036  0.2000  0.9816  0.8419\n[torch.FloatTensor of size 5x4]\n\na \n 0.3230  0.4947  0.9506  0.0903\n 0.9365  0.6267  0.2055  0.5788\n 0.0463  0.6830  0.7359  0.4857\n 0.6834  0.6994  0.3476  0.7177\n 0.2500  0.0212  0.2585  0.4837\n[torch.FloatTensor of size 5x4]\n\na \n 0.1980  0.7275  0.6299  0.9513\n 0.4572  0.7067  0.0579  0.1477\n 0.5097  0.1671  0.6404  0.7760\n 0.4492  0.4818  0.1498  0.8576\n 0.2303  0.6345  0.6970  0.5469\n[torch.FloatTensor of size 5x4]\n\na \n 7.0000  7.0000  0.4355  0.4932\n 0.4353  0.6230  0.5347  0.6431\n 7.0000  7.0000  0.1284  0.1781\n 0.0731  0.6473  0.7768  0.8538\n 0.9966  0.4716  0.2759  0.9330\n[torch.FloatTensor of size 5x4]\n\na \n 7.0000  7.0000  7.0000  7.0000\n 0.0324  0.4269  0.8712  0.8241\n 7.0000  7.0000  7.0000  7.0000\n 0.3683  0.1049  0.5597  0.4110\n 0.6722  0.0703  0.5564  0.3533\n[torch.FloatTensor of size 5x4]\n\na \n 0.0015  0.8867  0.4910  0.9876\n 0.7295  0.9467  0.1075  0.4583\n 0.5853  0.3886  0.4904  0.0028\n 0.3870  0.8603  0.1500  0.9434\n 0.2598  0.2121  0.9444  0.0043\n[torch.FloatTensor of size 5x4]\n\na \n 0.4600  7.0000  0.3556  0.6450\n 0.1235  0.3156  0.5313  0.3157\n 0.0833  7.0000  0.1210  0.0142\n 0.4484  0.0013  0.3783  0.6595\n 0.2480  0.2504  0.8774  0.0878\n[torch.FloatTensor of size 5x4]\n\na \n 0.1780  7.0000  0.3915  0.0832\n 0.1211  0.8207  0.4420  0.6502\n 0.4522  7.0000  0.9128  0.6761\n 0.7840  0.0848  0.5557  0.2763\n 0.7523  0.9910  0.2690  0.9558\n[torch.FloatTensor of size 5x4]\n\na \n 0.7608  0.1659  0.2132  0.8333\n 0.0869  0.8376  0.9227  0.2002\n 0.1625  0.0105  0.9849  0.5148\n 0.5452  0.5200  0.5355  0.3178\n 0.4197  0.9294  0.4172  0.0469\n[torch.FloatTensor of size 5x4]\n\na \n 0.1802  0.0364  0.0561  0.9782\n 0.8888  0.6768  0.7167  0.8842\n 0.2234  0.3741  0.8251  0.7813\n 0.1033  0.4776  0.5335  0.7562\n 0.6567  0.6115  0.0832  0.6691\n[torch.FloatTensor of size 5x4]\n\na \n 0.2363  7.0000  0.7369  0.6097\n 0.9366  0.3713  0.3765  0.2912\n 0.1712  7.0000  0.0485  0.5060\n 0.8131  0.1654  0.5321  0.8097\n 0.9726  0.6265  0.1156  0.7550\n[torch.FloatTensor of size 5x4]", "body": "In the following code, some of the assignments assign `7` to some of the `a` elements, and some dont. It is not obvious to me which will work, and which will fail, without trying them. In addition, there is no indication (eg Exception or similar) when I try an assigment that has failed.\r\n\r\n```\r\nimport torch\r\nimport numpy as np\r\nfrom torch import nn\r\nfrom torch.autograd import Variable\r\n\r\n\r\na = torch.rand(5, 4)\r\nidxes = torch.LongTensor([0, 2])\r\nidxes2 = torch.LongTensor([0])\r\na[idxes] = 5\r\nprint('a', a)  # works\r\n\r\na = torch.rand(5, 4)\r\na[idxes].fill_(5)  # doesnt work...\r\nprint('a', a)\r\n\r\na = torch.rand(5, 4)\r\na[idxes][idxes2] = 7  # doesnt work\r\nprint('a', a)\r\n\r\na = torch.rand(5, 4)\r\na[:, :2][idxes] = 7  # works\r\nprint('a', a)\r\n\r\na = torch.rand(5, 4)\r\na[:3][idxes] = 7  # works\r\nprint('a', a)\r\n\r\na = torch.rand(5, 4)\r\na[idxes][:, 1] = 7  # doesnt work\r\nprint('a', a)\r\n\r\na = torch.rand(5, 4)\r\na[:, 1][idxes] = 7  # works\r\nprint('a', a)\r\n\r\na = torch.rand(5, 4)\r\na[:, 1:2][idxes] = torch.FloatTensor(2, 1).fill_(7)  # works\r\nprint('a', a)\r\n\r\na = torch.rand(5, 4)\r\na[idxes][:, 1:2] = torch.FloatTensor(2, 1).fill_(7)  # doesnt work\r\nprint('a', a)\r\n\r\na = torch.rand(5, 4)\r\na[idxes][:, 1] = torch.FloatTensor(2).fill_(7)  # doesnt work\r\nprint('a', a)\r\n\r\na = torch.rand(5, 4)\r\na[:, 1][idxes] = torch.FloatTensor(2).fill_(7)  # works\r\nprint('a', a)\r\n```\r\n\r\nOutput:\r\n```\r\na \r\n 5.0000  5.0000  5.0000  5.0000\r\n 0.6669  0.7807  0.0194  0.5675\r\n 5.0000  5.0000  5.0000  5.0000\r\n 0.4356  0.6602  0.6314  0.1092\r\n 0.2036  0.2000  0.9816  0.8419\r\n[torch.FloatTensor of size 5x4]\r\n\r\na \r\n 0.3230  0.4947  0.9506  0.0903\r\n 0.9365  0.6267  0.2055  0.5788\r\n 0.0463  0.6830  0.7359  0.4857\r\n 0.6834  0.6994  0.3476  0.7177\r\n 0.2500  0.0212  0.2585  0.4837\r\n[torch.FloatTensor of size 5x4]\r\n\r\na \r\n 0.1980  0.7275  0.6299  0.9513\r\n 0.4572  0.7067  0.0579  0.1477\r\n 0.5097  0.1671  0.6404  0.7760\r\n 0.4492  0.4818  0.1498  0.8576\r\n 0.2303  0.6345  0.6970  0.5469\r\n[torch.FloatTensor of size 5x4]\r\n\r\na \r\n 7.0000  7.0000  0.4355  0.4932\r\n 0.4353  0.6230  0.5347  0.6431\r\n 7.0000  7.0000  0.1284  0.1781\r\n 0.0731  0.6473  0.7768  0.8538\r\n 0.9966  0.4716  0.2759  0.9330\r\n[torch.FloatTensor of size 5x4]\r\n\r\na \r\n 7.0000  7.0000  7.0000  7.0000\r\n 0.0324  0.4269  0.8712  0.8241\r\n 7.0000  7.0000  7.0000  7.0000\r\n 0.3683  0.1049  0.5597  0.4110\r\n 0.6722  0.0703  0.5564  0.3533\r\n[torch.FloatTensor of size 5x4]\r\n\r\na \r\n 0.0015  0.8867  0.4910  0.9876\r\n 0.7295  0.9467  0.1075  0.4583\r\n 0.5853  0.3886  0.4904  0.0028\r\n 0.3870  0.8603  0.1500  0.9434\r\n 0.2598  0.2121  0.9444  0.0043\r\n[torch.FloatTensor of size 5x4]\r\n\r\na \r\n 0.4600  7.0000  0.3556  0.6450\r\n 0.1235  0.3156  0.5313  0.3157\r\n 0.0833  7.0000  0.1210  0.0142\r\n 0.4484  0.0013  0.3783  0.6595\r\n 0.2480  0.2504  0.8774  0.0878\r\n[torch.FloatTensor of size 5x4]\r\n\r\na \r\n 0.1780  7.0000  0.3915  0.0832\r\n 0.1211  0.8207  0.4420  0.6502\r\n 0.4522  7.0000  0.9128  0.6761\r\n 0.7840  0.0848  0.5557  0.2763\r\n 0.7523  0.9910  0.2690  0.9558\r\n[torch.FloatTensor of size 5x4]\r\n\r\na \r\n 0.7608  0.1659  0.2132  0.8333\r\n 0.0869  0.8376  0.9227  0.2002\r\n 0.1625  0.0105  0.9849  0.5148\r\n 0.5452  0.5200  0.5355  0.3178\r\n 0.4197  0.9294  0.4172  0.0469\r\n[torch.FloatTensor of size 5x4]\r\n\r\na \r\n 0.1802  0.0364  0.0561  0.9782\r\n 0.8888  0.6768  0.7167  0.8842\r\n 0.2234  0.3741  0.8251  0.7813\r\n 0.1033  0.4776  0.5335  0.7562\r\n 0.6567  0.6115  0.0832  0.6691\r\n[torch.FloatTensor of size 5x4]\r\n\r\na \r\n 0.2363  7.0000  0.7369  0.6097\r\n 0.9366  0.3713  0.3765  0.2912\r\n 0.1712  7.0000  0.0485  0.5060\r\n 0.8131  0.1654  0.5321  0.8097\r\n 0.9726  0.6265  0.1156  0.7550\r\n[torch.FloatTensor of size 5x4]\r\n```"}