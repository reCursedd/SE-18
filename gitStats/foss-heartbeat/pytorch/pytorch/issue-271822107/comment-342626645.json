{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/342626645", "html_url": "https://github.com/pytorch/pytorch/issues/3531#issuecomment-342626645", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/3531", "id": 342626645, "node_id": "MDEyOklzc3VlQ29tbWVudDM0MjYyNjY0NQ==", "user": {"login": "hughperkins", "id": 123560, "node_id": "MDQ6VXNlcjEyMzU2MA==", "avatar_url": "https://avatars2.githubusercontent.com/u/123560?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hughperkins", "html_url": "https://github.com/hughperkins", "followers_url": "https://api.github.com/users/hughperkins/followers", "following_url": "https://api.github.com/users/hughperkins/following{/other_user}", "gists_url": "https://api.github.com/users/hughperkins/gists{/gist_id}", "starred_url": "https://api.github.com/users/hughperkins/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hughperkins/subscriptions", "organizations_url": "https://api.github.com/users/hughperkins/orgs", "repos_url": "https://api.github.com/users/hughperkins/repos", "events_url": "https://api.github.com/users/hughperkins/events{/privacy}", "received_events_url": "https://api.github.com/users/hughperkins/received_events", "type": "User", "site_admin": false}, "created_at": "2017-11-07T21:23:37Z", "updated_at": "2017-11-07T21:23:51Z", "author_association": "CONTRIBUTOR", "body_html": "<blockquote>\n<p>Yes, indexing with a list of indices will never return a view (even if they form a consecutive range)</p>\n</blockquote>\n<p>Ok, understood.</p>\n<blockquote>\n<p>This works fine for me.<br>\nWhat's your PyTorch version?</p>\n</blockquote>\n<pre><code>(root) ~ $ cat /tmp/test3.py\nimport torch\n\nidxes = torch.LongTensor([0, 2])\na = torch.rand(5, 4)\na[idxes, 1:2] = 7  # gives exception\nprint('a', a)\n\n(root) ~ $ python /tmp/test3.py\nTraceback (most recent call last):\n  File \"/tmp/test3.py\", line 5, in &lt;module&gt;\n    a[idxes, 1:2] = 7  # gives exception\nTypeError: indexing a tensor with an object of type torch.LongTensor. The only supported types are integers, slices, numpy scalars and torch.LongTensor or torch.ByteTensor as the only argument.\n\n(root) ~ $ conda list | grep sou\npytorch                   0.2.0                py36_1cu75    soumith\ntorchvision               0.1.9                    py36_1    soumith\n</code></pre>", "body_text": "Yes, indexing with a list of indices will never return a view (even if they form a consecutive range)\n\nOk, understood.\n\nThis works fine for me.\nWhat's your PyTorch version?\n\n(root) ~ $ cat /tmp/test3.py\nimport torch\n\nidxes = torch.LongTensor([0, 2])\na = torch.rand(5, 4)\na[idxes, 1:2] = 7  # gives exception\nprint('a', a)\n\n(root) ~ $ python /tmp/test3.py\nTraceback (most recent call last):\n  File \"/tmp/test3.py\", line 5, in <module>\n    a[idxes, 1:2] = 7  # gives exception\nTypeError: indexing a tensor with an object of type torch.LongTensor. The only supported types are integers, slices, numpy scalars and torch.LongTensor or torch.ByteTensor as the only argument.\n\n(root) ~ $ conda list | grep sou\npytorch                   0.2.0                py36_1cu75    soumith\ntorchvision               0.1.9                    py36_1    soumith", "body": "> Yes, indexing with a list of indices will never return a view (even if they form a consecutive range)\r\n\r\nOk, understood.\r\n\r\n> This works fine for me.\r\n> What's your PyTorch version?\r\n```\r\n(root) ~ $ cat /tmp/test3.py\r\nimport torch\r\n\r\nidxes = torch.LongTensor([0, 2])\r\na = torch.rand(5, 4)\r\na[idxes, 1:2] = 7  # gives exception\r\nprint('a', a)\r\n\r\n(root) ~ $ python /tmp/test3.py\r\nTraceback (most recent call last):\r\n  File \"/tmp/test3.py\", line 5, in <module>\r\n    a[idxes, 1:2] = 7  # gives exception\r\nTypeError: indexing a tensor with an object of type torch.LongTensor. The only supported types are integers, slices, numpy scalars and torch.LongTensor or torch.ByteTensor as the only argument.\r\n\r\n(root) ~ $ conda list | grep sou\r\npytorch                   0.2.0                py36_1cu75    soumith\r\ntorchvision               0.1.9                    py36_1    soumith\r\n```\r\n"}