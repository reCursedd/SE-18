{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/390511038", "html_url": "https://github.com/pytorch/pytorch/pull/7708#issuecomment-390511038", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/7708", "id": 390511038, "node_id": "MDEyOklzc3VlQ29tbWVudDM5MDUxMTAzOA==", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "created_at": "2018-05-20T20:44:33Z", "updated_at": "2018-05-20T20:44:33Z", "author_association": "MEMBER", "body_html": "<p>I think the \"constant grad mode\" invariant is a bit too easy to get wrong. Forcing grad mode doesn't seem that bad really. If your distribution parameters don't require grad then it will be a no-op. Otherwise it's quite likely that you will be interested in differentiating those parts, and I think it's better to trade off some memory for compute in this case.</p>\n<p>It's a hard problem, because you don't have any information about how the object will be used. You either need to drop the autograd history, hoping that someone who calls <code>.sample()</code> will never need it, or you need to just live with the fact that you might end up wasting some memory, because we temporarily enabled grad. Provided the distribution is short-lived the downside is somewhat irrelevant though, because the properties should get removed quickly. If we find out that this strategy doesn't work too well, we can always add an extra constructor parameter that lets you choose a strategy for caching those.</p>", "body_text": "I think the \"constant grad mode\" invariant is a bit too easy to get wrong. Forcing grad mode doesn't seem that bad really. If your distribution parameters don't require grad then it will be a no-op. Otherwise it's quite likely that you will be interested in differentiating those parts, and I think it's better to trade off some memory for compute in this case.\nIt's a hard problem, because you don't have any information about how the object will be used. You either need to drop the autograd history, hoping that someone who calls .sample() will never need it, or you need to just live with the fact that you might end up wasting some memory, because we temporarily enabled grad. Provided the distribution is short-lived the downside is somewhat irrelevant though, because the properties should get removed quickly. If we find out that this strategy doesn't work too well, we can always add an extra constructor parameter that lets you choose a strategy for caching those.", "body": "I think the \"constant grad mode\" invariant is a bit too easy to get wrong. Forcing grad mode doesn't seem that bad really. If your distribution parameters don't require grad then it will be a no-op. Otherwise it's quite likely that you will be interested in differentiating those parts, and I think it's better to trade off some memory for compute in this case.\r\n\r\nIt's a hard problem, because you don't have any information about how the object will be used. You either need to drop the autograd history, hoping that someone who calls `.sample()` will never need it, or you need to just live with the fact that you might end up wasting some memory, because we temporarily enabled grad. Provided the distribution is short-lived the downside is somewhat irrelevant though, because the properties should get removed quickly. If we find out that this strategy doesn't work too well, we can always add an extra constructor parameter that lets you choose a strategy for caching those."}