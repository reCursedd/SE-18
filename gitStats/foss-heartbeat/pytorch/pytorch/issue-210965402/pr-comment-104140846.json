{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/104140846", "pull_request_review_id": 24959681, "id": 104140846, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNDE0MDg0Ng==", "diff_hunk": "@@ -43,4 +43,26 @@ inline bool isInteger(Type t) {\n           t == Type::LONG_LONG || t == Type::ULONG_LONG);\n }\n \n+inline const char* toString(Type t) {\n+  switch (t) {\n+    case Type::CHAR: return \"Char\";\n+    case Type::UCHAR: return \"Byte\";\n+    case Type::FLOAT: return \"Float\";\n+    case Type::DOUBLE: return \"Double\";\n+    case Type::HALF: return \"Half\";\n+    case Type::SHORT: return \"Short\";\n+    case Type::USHORT: return \"UShort\";\n+    case Type::INT: return \"Int\";\n+    case Type::UINT: return \"UInt\";\n+    case Type::LONG: return \"Long\";\n+    case Type::ULONG: return \"ULong\";\n+    case Type::LONG_LONG: return \"LongLong\";\n+    case Type::ULONG_LONG: return \"ULongLong\";\n+    case Type::LONG_STORAGE: return \"LongStorage\";\n+    case Type::TENSOR: return \"Tensor\";\n+    case Type::STORAGE: return \"Storage\";\n+    default: return \"\";", "path": "torch/lib/THPP/Type.hpp", "position": null, "original_position": 22, "commit_id": "6336300880349038c5bf6f5dfe3b37864eb39acb", "original_commit_id": "732f464faa2a72534be9a4bfcf848d06cde9e87c", "user": {"login": "albanD", "id": 6359743, "node_id": "MDQ6VXNlcjYzNTk3NDM=", "avatar_url": "https://avatars3.githubusercontent.com/u/6359743?v=4", "gravatar_id": "", "url": "https://api.github.com/users/albanD", "html_url": "https://github.com/albanD", "followers_url": "https://api.github.com/users/albanD/followers", "following_url": "https://api.github.com/users/albanD/following{/other_user}", "gists_url": "https://api.github.com/users/albanD/gists{/gist_id}", "starred_url": "https://api.github.com/users/albanD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/albanD/subscriptions", "organizations_url": "https://api.github.com/users/albanD/orgs", "repos_url": "https://api.github.com/users/albanD/repos", "events_url": "https://api.github.com/users/albanD/events{/privacy}", "received_events_url": "https://api.github.com/users/albanD/received_events", "type": "User", "site_admin": false}, "body": "Is it ever possible to reach the default here?\r\nIf so, do we want an \"Unknow Type\" message to avoid having empty string instead of types in error messages?", "created_at": "2017-03-03T12:05:41Z", "updated_at": "2018-11-23T15:32:43Z", "html_url": "https://github.com/pytorch/pytorch/pull/881#discussion_r104140846", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/881", "author_association": "COLLABORATOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/104140846"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/881#discussion_r104140846"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/881"}}, "body_html": "<p>Is it ever possible to reach the default here?<br>\nIf so, do we want an \"Unknow Type\" message to avoid having empty string instead of types in error messages?</p>", "body_text": "Is it ever possible to reach the default here?\nIf so, do we want an \"Unknow Type\" message to avoid having empty string instead of types in error messages?"}