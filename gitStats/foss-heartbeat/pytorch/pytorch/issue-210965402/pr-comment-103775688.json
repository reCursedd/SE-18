{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/103775688", "pull_request_review_id": 24573568, "id": 103775688, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMzc3NTY4OA==", "diff_hunk": "@@ -1,15 +1,198 @@\n #include \"torch/csrc/autograd/engine.h\"\n \n-#include <unordered_set>\n+#include <atomic>\n+#include <condition_variable>\n+#include <cstdint>\n+#include <iostream>\n+#include <mutex>\n+#include <set>\n #include <string>\n #include <THPP/THPP.h>\n+#include <thread>\n+#include <unordered_set>\n+#include <typeinfo>\n+#include <sstream>\n+\n+#ifdef WITH_CUDA\n+#include <cuda.h>\n+#include <THC/THC.h>\n+#endif\n \n using thpp::Tensor;\n \n namespace torch { namespace autograd {\n \n-auto Engine::compute_dependencies(function_queue queue, ready_queue_type& ready) -> dependencies_type {\n-  // First, search the graph and find all stochastic functions. Append them to the queue.\n+struct ReadyQueue {\n+  std::deque<FunctionTask> queue;\n+  std::condition_variable not_empty;\n+  std::mutex mutex;\n+\n+  void push_front(FunctionTask item);\n+  FunctionTask pop_back();\n+};\n+\n+struct BackwardTask {\n+  std::exception_ptr exception;\n+  std::atomic_bool has_error;\n+  std::atomic<uint64_t> outstanding_tasks;\n+  bool retain_variables;\n+\n+  std::mutex mutex;\n+  std::condition_variable not_done;\n+  std::unordered_map<Function*, GradBuffer> not_ready;\n+  std::unordered_map<Function*, int> dependencies;\n+\n+  BackwardTask(bool retain_variables)\n+    : exception()\n+    , has_error(false)\n+    , outstanding_tasks(0)\n+    , retain_variables(retain_variables)\n+    , mutex()\n+    , not_done()\n+    , not_ready()\n+    , dependencies() {}\n+};\n+\n+struct FunctionTask {\n+  BackwardTask* base;\n+  std::shared_ptr<Function> fn;\n+  GradBuffer grad;\n+\n+  FunctionTask(BackwardTask* base, std::shared_ptr<Function> fn, GradBuffer grad)\n+    : base(base)\n+    , fn(fn)\n+    , grad(std::move(grad)) {}\n+};\n+\n+auto ReadyQueue::push_front(FunctionTask item) -> void {\n+  ++item.base->outstanding_tasks;\n+  {\n+    std::lock_guard<std::mutex> lock(mutex);\n+    queue.push_front(std::move(item));\n+  }\n+  not_empty.notify_one();\n+}\n+\n+auto ReadyQueue::pop_back() -> FunctionTask {\n+  std::unique_lock<std::mutex> lock(mutex);\n+  not_empty.wait(lock, [this]{ return !queue.empty(); });\n+  auto value = std::move(queue.back()); queue.pop_back();", "path": "torch/csrc/autograd/engine.cpp", "position": null, "original_position": 82, "commit_id": "6336300880349038c5bf6f5dfe3b37864eb39acb", "original_commit_id": "d01ba88a0dec1960c06e4817fc746576335728fb", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "nit: value -> task", "created_at": "2017-03-01T20:01:01Z", "updated_at": "2018-11-23T15:32:38Z", "html_url": "https://github.com/pytorch/pytorch/pull/881#discussion_r103775688", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/881", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/103775688"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/881#discussion_r103775688"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/881"}}, "body_html": "<p>nit: value -&gt; task</p>", "body_text": "nit: value -> task"}