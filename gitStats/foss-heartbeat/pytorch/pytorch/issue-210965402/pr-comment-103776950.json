{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/103776950", "pull_request_review_id": 24573568, "id": 103776950, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMzc3Njk1MA==", "diff_hunk": "@@ -1,15 +1,198 @@\n #include \"torch/csrc/autograd/engine.h\"\n \n-#include <unordered_set>\n+#include <atomic>\n+#include <condition_variable>\n+#include <cstdint>\n+#include <iostream>\n+#include <mutex>\n+#include <set>\n #include <string>\n #include <THPP/THPP.h>\n+#include <thread>\n+#include <unordered_set>\n+#include <typeinfo>\n+#include <sstream>\n+\n+#ifdef WITH_CUDA\n+#include <cuda.h>\n+#include <THC/THC.h>\n+#endif\n \n using thpp::Tensor;\n \n namespace torch { namespace autograd {\n \n-auto Engine::compute_dependencies(function_queue queue, ready_queue_type& ready) -> dependencies_type {\n-  // First, search the graph and find all stochastic functions. Append them to the queue.\n+struct ReadyQueue {\n+  std::deque<FunctionTask> queue;\n+  std::condition_variable not_empty;\n+  std::mutex mutex;\n+\n+  void push_front(FunctionTask item);\n+  FunctionTask pop_back();\n+};\n+\n+struct BackwardTask {\n+  std::exception_ptr exception;\n+  std::atomic_bool has_error;\n+  std::atomic<uint64_t> outstanding_tasks;\n+  bool retain_variables;\n+\n+  std::mutex mutex;\n+  std::condition_variable not_done;\n+  std::unordered_map<Function*, GradBuffer> not_ready;\n+  std::unordered_map<Function*, int> dependencies;\n+\n+  BackwardTask(bool retain_variables)\n+    : exception()\n+    , has_error(false)\n+    , outstanding_tasks(0)\n+    , retain_variables(retain_variables)\n+    , mutex()\n+    , not_done()\n+    , not_ready()\n+    , dependencies() {}\n+};\n+\n+struct FunctionTask {\n+  BackwardTask* base;\n+  std::shared_ptr<Function> fn;\n+  GradBuffer grad;\n+\n+  FunctionTask(BackwardTask* base, std::shared_ptr<Function> fn, GradBuffer grad)\n+    : base(base)\n+    , fn(fn)\n+    , grad(std::move(grad)) {}\n+};\n+\n+auto ReadyQueue::push_front(FunctionTask item) -> void {\n+  ++item.base->outstanding_tasks;\n+  {\n+    std::lock_guard<std::mutex> lock(mutex);\n+    queue.push_front(std::move(item));\n+  }\n+  not_empty.notify_one();\n+}\n+\n+auto ReadyQueue::pop_back() -> FunctionTask {\n+  std::unique_lock<std::mutex> lock(mutex);\n+  not_empty.wait(lock, [this]{ return !queue.empty(); });\n+  auto value = std::move(queue.back()); queue.pop_back();\n+  return value;\n+}\n+\n+Engine::Engine() : ready_queues() {\n+}\n+\n+Engine::~Engine() = default;\n+\n+auto Engine::thread_main(ReadyQueue& queue) -> void {\n+  while (1) {\n+    FunctionTask task = queue.pop_back();\n+    if (!task.base->has_error.load()) {\n+      try {\n+        evaluate_function(task);\n+      } catch (std::exception& e) {\n+        thread_on_exception(task, e);\n+      }\n+    }\n+    if (--task.base->outstanding_tasks == 0) {\n+      task.base->not_done.notify_all();\n+    }\n+  }\n+}\n+\n+auto Engine::thread_on_exception(FunctionTask& task, std::exception& e) -> void {\n+  std::lock_guard<std::mutex> lock(task.base->mutex);\n+  if (!task.base->has_error.load()) {\n+    task.base->exception = std::current_exception();\n+    task.base->has_error = true;\n+  }\n+}\n+\n+auto Engine::evaluate_function(FunctionTask& task) -> void\n+{\n+  auto& fn = *task.fn;\n+  auto grad_output = fn.call_hooks(GradBuffer::variables(std::move(task.grad)));\n+  auto grad_inputs = fn.apply(grad_output);\n+  if (!task.base->retain_variables) {\n+    fn.releaseVariables();\n+  }\n+\n+  if (grad_inputs.size() != fn.previous_functions.size()) {\n+    std::stringstream ss;\n+    ss << \"Function '\" << fn.name() << \"' returned an invalid number of gradients - expected \";", "path": "torch/csrc/autograd/engine.cpp", "position": 147, "original_position": 126, "commit_id": "6336300880349038c5bf6f5dfe3b37864eb39acb", "original_commit_id": "d01ba88a0dec1960c06e4817fc746576335728fb", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "\u2764\ufe0f `fn.name()`. Debugging this stuff without it was a nightmare", "created_at": "2017-03-01T20:06:55Z", "updated_at": "2018-11-23T15:32:38Z", "html_url": "https://github.com/pytorch/pytorch/pull/881#discussion_r103776950", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/881", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/103776950"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/881#discussion_r103776950"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/881"}}, "body_html": "<p><g-emoji class=\"g-emoji\" alias=\"heart\" fallback-src=\"https://assets-cdn.github.com/images/icons/emoji/unicode/2764.png\">\u2764\ufe0f</g-emoji> <code>fn.name()</code>. Debugging this stuff without it was a nightmare</p>", "body_text": "\u2764\ufe0f fn.name(). Debugging this stuff without it was a nightmare"}