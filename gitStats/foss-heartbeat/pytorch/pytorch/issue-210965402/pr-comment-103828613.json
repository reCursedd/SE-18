{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/103828613", "pull_request_review_id": 24613304, "id": 103828613, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMzgyODYxMw==", "diff_hunk": "@@ -0,0 +1,56 @@\n+#pragma once\n+\n+#include <Python.h>\n+\n+inline bool THPUtils_checkLong(PyObject* obj) {\n+#if PY_MAJOR_VERSION == 2\n+  return (PyLong_Check(obj) || PyInt_Check(obj)) && !PyBool_Check(obj);\n+#else\n+  return PyLong_Check(obj) && !PyBool_Check(obj);\n+#endif\n+}\n+\n+inline long THPUtils_unpackLong(PyObject* obj) {\n+  if (PyLong_Check(obj)) {\n+    int overflow;\n+    long long value = PyLong_AsLongLongAndOverflow(obj, &overflow);\n+    if (overflow != 0) {\n+      throw std::runtime_error(\"Overflow when unpacking long\");\n+    }\n+    return (long)value;\n+  }\n+#if PY_MAJOR_VERSION == 2\n+  if (PyInt_Check(obj)) {\n+    return PyInt_AS_LONG(obj);\n+  }\n+#endif\n+  throw std::runtime_error(\"Could not unpack long\");\n+}\n+\n+inline bool THPUtils_checkDouble(PyObject* obj) {\n+#if PY_MAJOR_VERSION == 2\n+  return PyFloat_Check(obj) || PyLong_Check(obj) || PyInt_Check(obj);\n+#else\n+  return PyFloat_Check(obj) || PyLong_Check(obj);\n+#endif\n+}\n+\n+inline double THPUtils_unpackDouble(PyObject* obj) {\n+  if (PyFloat_Check(obj)) {\n+    return PyFloat_AS_DOUBLE(obj);\n+  }\n+  if (PyLong_Check(obj)) {\n+    int overflow;\n+    long long value = PyLong_AsLongLongAndOverflow(obj, &overflow);\n+    if (overflow != 0) {\n+      throw std::runtime_error(\"Overflow when unpacking double\");\n+    }\n+    return (double)value;", "path": "torch/csrc/utils/python_numbers.h", "position": null, "original_position": 48, "commit_id": "6336300880349038c5bf6f5dfe3b37864eb39acb", "original_commit_id": "d01ba88a0dec1960c06e4817fc746576335728fb", "user": {"login": "colesbury", "id": 655866, "node_id": "MDQ6VXNlcjY1NTg2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/655866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colesbury", "html_url": "https://github.com/colesbury", "followers_url": "https://api.github.com/users/colesbury/followers", "following_url": "https://api.github.com/users/colesbury/following{/other_user}", "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions", "organizations_url": "https://api.github.com/users/colesbury/orgs", "repos_url": "https://api.github.com/users/colesbury/repos", "events_url": "https://api.github.com/users/colesbury/events{/privacy}", "received_events_url": "https://api.github.com/users/colesbury/received_events", "type": "User", "site_admin": false}, "body": "I added a check. I'm using `PyLong_AsLongLongAndOverflow` because the implementation is safe to call without the GIL when obj is a `PyLong`. I've tried to make all the functions in this file not require the GIL. (Although currently all the calling code holds onto the GIL)\r\n\r\n`PyLong_AsLong` and `PyLong_AsLongLong` aren't safe because they set the current Python error if obj doesn't fit in the result type.", "created_at": "2017-03-02T00:56:08Z", "updated_at": "2018-11-23T15:32:40Z", "html_url": "https://github.com/pytorch/pytorch/pull/881#discussion_r103828613", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/881", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/103828613"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/881#discussion_r103828613"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/881"}}, "body_html": "<p>I added a check. I'm using <code>PyLong_AsLongLongAndOverflow</code> because the implementation is safe to call without the GIL when obj is a <code>PyLong</code>. I've tried to make all the functions in this file not require the GIL. (Although currently all the calling code holds onto the GIL)</p>\n<p><code>PyLong_AsLong</code> and <code>PyLong_AsLongLong</code> aren't safe because they set the current Python error if obj doesn't fit in the result type.</p>", "body_text": "I added a check. I'm using PyLong_AsLongLongAndOverflow because the implementation is safe to call without the GIL when obj is a PyLong. I've tried to make all the functions in this file not require the GIL. (Although currently all the calling code holds onto the GIL)\nPyLong_AsLong and PyLong_AsLongLong aren't safe because they set the current Python error if obj doesn't fit in the result type.", "in_reply_to_id": 103807537}