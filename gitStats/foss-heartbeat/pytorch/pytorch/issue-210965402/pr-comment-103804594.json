{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/103804594", "pull_request_review_id": 24573568, "id": 103804594, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMzgwNDU5NA==", "diff_hunk": "@@ -0,0 +1,85 @@\n+#include \"tuple_parser.h\"\n+\n+#include \"torch/csrc/DynamicTypes.h\"\n+#include \"torch/csrc/autograd/python_variable.h\"\n+#include \"python_numbers.h\"\n+\n+namespace torch {\n+\n+TupleParser::TupleParser(PyObject* args, int num_args) : args(args), idx(0) {\n+   int size = PyTuple_GET_SIZE(args);\n+   if (num_args >= 0 && size != num_args) {\n+     std::string msg(\"missing required arguments (expected \");\n+     msg += std::to_string(num_args) + \" got \" + std::to_string(size) + \")\";\n+     throw std::runtime_error(msg);\n+   }\n+ }\n+\n+auto TupleParser::parse(bool& x) -> void {\n+  PyObject* obj = next_arg();\n+  if (!PyBool_Check(obj)) {\n+    throw invalid_type(\"bool\");\n+  }\n+  x = (obj == Py_True);\n+}\n+\n+auto TupleParser::parse(int& x) -> void {\n+  PyObject* obj = next_arg();\n+  if (!THPUtils_checkLong(obj)) {\n+    throw invalid_type(\"int\");\n+  }\n+  x = THPUtils_unpackLong(obj);\n+}\n+\n+auto TupleParser::parse(double& x) -> void {\n+  PyObject* obj = next_arg();\n+  if (!THPUtils_checkDouble(obj)) {\n+    throw invalid_type(\"float\");\n+  }\n+  x = THPUtils_unpackDouble(obj);\n+}\n+\n+auto TupleParser::parse(std::unique_ptr<thpp::Tensor>& x) -> void {\n+  PyObject* obj = next_arg();\n+  if (THPVariable_Check(obj)) {\n+    auto& var = *((THPVariable*)obj)->cdata;\n+    x.reset(var.data->clone_shallow());\n+  } else {\n+    x = torch::createTensor(obj);\n+  }\n+}\n+\n+auto TupleParser::parse(std::vector<int>& x) -> void {\n+  PyObject* obj = next_arg();\n+  if (!PyTuple_Check(obj)) {\n+    throw invalid_type(\"tuple of int\");\n+  }\n+  int size = PyTuple_GET_SIZE(obj);\n+  x.resize(size);\n+  for (int i = 0; i < size; ++i) {\n+    PyObject* item = PyTuple_GET_ITEM(obj, i);\n+    if (!THPUtils_checkLong(item)) {\n+      throw invalid_type(\"tuple of int\");\n+    }\n+    x[i] = THPUtils_unpackLong(item);\n+  }\n+}\n+\n+auto TupleParser::next_arg() -> PyObject* {\n+  if (idx >= PyTuple_GET_SIZE(args)) {\n+    throw std::runtime_error(\"out of range\");\n+  }\n+  return PyTuple_GET_ITEM(args, idx++);\n+}\n+\n+auto TupleParser::invalid_type(const char* expected) -> std::runtime_error {\n+  std::string msg(\"argument \");\n+  msg += std::to_string(idx - 1);\n+  msg += \" must be \";\n+  msg += expected;\n+  msg += \", not \";\n+  msg += Py_TYPE(PyTuple_GET_ITEM(args, idx - 1))->tp_name;", "path": "torch/csrc/utils/tuple_parser.cpp", "position": 81, "original_position": 81, "commit_id": "6336300880349038c5bf6f5dfe3b37864eb39acb", "original_commit_id": "d01ba88a0dec1960c06e4817fc746576335728fb", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "It's better to use `THPUtils_typename`.", "created_at": "2017-03-01T22:19:58Z", "updated_at": "2018-11-23T15:32:39Z", "html_url": "https://github.com/pytorch/pytorch/pull/881#discussion_r103804594", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/881", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/103804594"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/881#discussion_r103804594"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/881"}}, "body_html": "<p>It's better to use <code>THPUtils_typename</code>.</p>", "body_text": "It's better to use THPUtils_typename."}