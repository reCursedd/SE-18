{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/103815045", "pull_request_review_id": 24613304, "id": 103815045, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMzgxNTA0NQ==", "diff_hunk": "@@ -0,0 +1,85 @@\n+#include \"tuple_parser.h\"\n+\n+#include \"torch/csrc/DynamicTypes.h\"\n+#include \"torch/csrc/autograd/python_variable.h\"\n+#include \"python_numbers.h\"\n+\n+namespace torch {\n+\n+TupleParser::TupleParser(PyObject* args, int num_args) : args(args), idx(0) {\n+   int size = PyTuple_GET_SIZE(args);\n+   if (num_args >= 0 && size != num_args) {\n+     std::string msg(\"missing required arguments (expected \");\n+     msg += std::to_string(num_args) + \" got \" + std::to_string(size) + \")\";\n+     throw std::runtime_error(msg);\n+   }\n+ }\n+\n+auto TupleParser::parse(bool& x) -> void {\n+  PyObject* obj = next_arg();\n+  if (!PyBool_Check(obj)) {\n+    throw invalid_type(\"bool\");\n+  }\n+  x = (obj == Py_True);\n+}\n+\n+auto TupleParser::parse(int& x) -> void {\n+  PyObject* obj = next_arg();\n+  if (!THPUtils_checkLong(obj)) {\n+    throw invalid_type(\"int\");\n+  }\n+  x = THPUtils_unpackLong(obj);\n+}\n+\n+auto TupleParser::parse(double& x) -> void {\n+  PyObject* obj = next_arg();\n+  if (!THPUtils_checkDouble(obj)) {\n+    throw invalid_type(\"float\");\n+  }\n+  x = THPUtils_unpackDouble(obj);\n+}\n+\n+auto TupleParser::parse(std::unique_ptr<thpp::Tensor>& x) -> void {\n+  PyObject* obj = next_arg();\n+  if (THPVariable_Check(obj)) {\n+    auto& var = *((THPVariable*)obj)->cdata;\n+    x.reset(var.data->clone_shallow());\n+  } else {\n+    x = torch::createTensor(obj);\n+  }\n+}\n+\n+auto TupleParser::parse(std::vector<int>& x) -> void {\n+  PyObject* obj = next_arg();\n+  if (!PyTuple_Check(obj)) {\n+    throw invalid_type(\"tuple of int\");\n+  }\n+  int size = PyTuple_GET_SIZE(obj);\n+  x.resize(size);\n+  for (int i = 0; i < size; ++i) {\n+    PyObject* item = PyTuple_GET_ITEM(obj, i);\n+    if (!THPUtils_checkLong(item)) {\n+      throw invalid_type(\"tuple of int\");\n+    }\n+    x[i] = THPUtils_unpackLong(item);\n+  }\n+}\n+\n+auto TupleParser::next_arg() -> PyObject* {\n+  if (idx >= PyTuple_GET_SIZE(args)) {\n+    throw std::runtime_error(\"out of range\");\n+  }\n+  return PyTuple_GET_ITEM(args, idx++);\n+}\n+\n+auto TupleParser::invalid_type(const char* expected) -> std::runtime_error {\n+  std::string msg(\"argument \");\n+  msg += std::to_string(idx - 1);\n+  msg += \" must be \";\n+  msg += expected;\n+  msg += \", not \";\n+  msg += Py_TYPE(PyTuple_GET_ITEM(args, idx - 1))->tp_name;", "path": "torch/csrc/utils/tuple_parser.cpp", "position": 81, "original_position": 81, "commit_id": "6336300880349038c5bf6f5dfe3b37864eb39acb", "original_commit_id": "d01ba88a0dec1960c06e4817fc746576335728fb", "user": {"login": "colesbury", "id": 655866, "node_id": "MDQ6VXNlcjY1NTg2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/655866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colesbury", "html_url": "https://github.com/colesbury", "followers_url": "https://api.github.com/users/colesbury/followers", "following_url": "https://api.github.com/users/colesbury/following{/other_user}", "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions", "organizations_url": "https://api.github.com/users/colesbury/orgs", "repos_url": "https://api.github.com/users/colesbury/repos", "events_url": "https://api.github.com/users/colesbury/events{/privacy}", "received_events_url": "https://api.github.com/users/colesbury/received_events", "type": "User", "site_admin": false}, "body": "Why? It just evaluates to this same code. It's also in utils.h which can't be separately included. (And THP.h pulls in the everything, which isn't very nice for incremental compilation).\r\n\r\nhttps://github.com/pytorch/pytorch/blob/67f94557ff26428ac911d8c08c7f9b619a41950e/torch/csrc/utils.h#L11", "created_at": "2017-03-01T23:17:49Z", "updated_at": "2018-11-23T15:32:40Z", "html_url": "https://github.com/pytorch/pytorch/pull/881#discussion_r103815045", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/881", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/103815045"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/881#discussion_r103815045"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/881"}}, "body_html": "<p>Why? It just evaluates to this same code. It's also in utils.h which can't be separately included. (And THP.h pulls in the everything, which isn't very nice for incremental compilation).</p>\n<p><div class=\"border rounded-1 my-2\">\n  <div class=\"f6 px-3 py-2 lh-condensed border-bottom bg-gray-light\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/pytorch/pytorch/blob/67f94557ff26428ac911d8c08c7f9b619a41950e/torch/csrc/utils.h#L11\">pytorch/torch/csrc/utils.h</a>\n    </p>\n    <p class=\"mb-0 text-gray-light\">\n         Line 11\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/pytorch/pytorch/commit/67f94557ff26428ac911d8c08c7f9b619a41950e\">67f9455</a>\n    </p>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L11\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"11\"></td>\n          <td id=\"LC11\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> #<span class=\"pl-k\">define</span> <span class=\"pl-en\">THPUtils_typename</span>(<span class=\"pl-v\">obj</span>) (Py_TYPE(obj)-&gt;tp_name) </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n</p>", "body_text": "Why? It just evaluates to this same code. It's also in utils.h which can't be separately included. (And THP.h pulls in the everything, which isn't very nice for incremental compilation).\n\n  \n    \n      pytorch/torch/csrc/utils.h\n    \n    \n         Line 11\n      in\n      67f9455\n    \n    \n    \n    \n\n        \n          \n           #define THPUtils_typename(obj) (Py_TYPE(obj)->tp_name)", "in_reply_to_id": 103804594}