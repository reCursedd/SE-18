{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/104060944", "pull_request_review_id": 24874462, "id": 104060944, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNDA2MDk0NA==", "diff_hunk": "@@ -1,42 +1,73 @@\n-from copy import copy\n-from collections import OrderedDict\n-\n-from ..modules import Module\n import torch.cuda.comm as comm\n \n \n-def _replicate_module(module, gpu, param_remap):\n-    if module is None:\n-        return module\n-    replica = copy(module)\n-    replica._parameters = OrderedDict()\n-    for key, param in module._parameters.items():\n-        replica._parameters[key] = param_remap.get(param)\n-    replica._buffers = {}\n-    for key, buffer in module._buffers.items():\n-        replica._buffers[key] = param_remap.get(buffer)\n-    if replica._modules:\n-        replica._modules = OrderedDict()\n-        for name, child in module._modules.items():\n-            replica._modules[name] = _replicate_module(child, gpu, param_remap)\n-    return replica\n-\n-\n-def replicate(module, device_ids):\n+def replicate(network, devices):\n     from ._functions import Broadcast\n-    seen_params = set()\n-    param_remap = [{} for dev_id in device_ids]\n-    for param in module.parameters():\n-        if param in seen_params:\n-            continue\n-        seen_params.add(param)\n-        param_copies = Broadcast(device_ids)(param)\n-        for param_copy, remap in zip(param_copies, param_remap):\n-            remap[param] = param_copy\n-    for m in module.modules():\n-        for buffer in m._buffers.values():\n-            copies = comm.broadcast(buffer, device_ids)\n-            for buf_copy, remap in zip(copies, param_remap):\n-                remap[buffer] = buf_copy\n-    return [_replicate_module(module, device_id, remap)\n-            for device_id, remap in zip(device_ids, param_remap)]\n+\n+    devices = tuple(devices)\n+    num_replicas = len(devices)\n+\n+    params = list(network.parameters())\n+    param_indices = {param: idx for idx, param in enumerate(params)}\n+    param_copies = Broadcast(devices)(*params)\n+    if len(params) > 0:\n+        param_copies = [param_copies[i:i+len(params)]\n+                        for i in range(0, len(param_copies), len(params))]\n+\n+    buffers = _buffers(network)\n+    buffer_indices = {buf: idx for idx, buf in enumerate(buffers)}\n+    buffer_copies = comm.broadcast_coalesced(buffers, devices)\n+\n+    modules = list(network.modules())\n+    module_copies = [[] for device in devices]", "path": "torch/nn/parallel/replicate.py", "position": 60, "original_position": 60, "commit_id": "6336300880349038c5bf6f5dfe3b37864eb39acb", "original_commit_id": "b132877316ccb20083d70b969d96c0a7d6420cc2", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "I think it would be better to store the transpose of that, because you always have to reverse the indexing in the main loop, but it's not very important. All of `for j in range(num_replicas):` could be replaced with `for replica in module_copies[i]:`.", "created_at": "2017-03-02T23:57:04Z", "updated_at": "2018-11-23T15:32:41Z", "html_url": "https://github.com/pytorch/pytorch/pull/881#discussion_r104060944", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/881", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/104060944"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/881#discussion_r104060944"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/881"}}, "body_html": "<p>I think it would be better to store the transpose of that, because you always have to reverse the indexing in the main loop, but it's not very important. All of <code>for j in range(num_replicas):</code> could be replaced with <code>for replica in module_copies[i]:</code>.</p>", "body_text": "I think it would be better to store the transpose of that, because you always have to reverse the indexing in the main loop, but it's not very important. All of for j in range(num_replicas): could be replaced with for replica in module_copies[i]:."}