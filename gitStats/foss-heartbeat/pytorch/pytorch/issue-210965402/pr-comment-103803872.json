{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/103803872", "pull_request_review_id": 24605348, "id": 103803872, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMzgwMzg3Mg==", "diff_hunk": "@@ -0,0 +1,42 @@\n+#include \"torch/csrc/autograd/python_hook.h\"\n+\n+#include \"THP.h\"\n+#include \"torch/csrc/autograd/python_variable.h\"\n+#include \"torch/csrc/utils/auto_gil.h\"\n+#include \"torch/csrc/utils/object_ptr.h\"\n+#include \"torch/csrc/Exceptions.h\"\n+\n+namespace torch { namespace autograd {\n+\n+PyGradHook::PyGradHook(PyObject* dict) : dict(dict) {\n+  Py_INCREF(dict);", "path": "torch/csrc/autograd/python_hook.cpp", "position": null, "original_position": 12, "commit_id": "6336300880349038c5bf6f5dfe3b37864eb39acb", "original_commit_id": "a2e0187c8406e17538e725595606f510394b2303", "user": {"login": "colesbury", "id": 655866, "node_id": "MDQ6VXNlcjY1NTg2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/655866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colesbury", "html_url": "https://github.com/colesbury", "followers_url": "https://api.github.com/users/colesbury/followers", "following_url": "https://api.github.com/users/colesbury/following{/other_user}", "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions", "organizations_url": "https://api.github.com/users/colesbury/orgs", "repos_url": "https://api.github.com/users/colesbury/repos", "events_url": "https://api.github.com/users/colesbury/events{/privacy}", "received_events_url": "https://api.github.com/users/colesbury/received_events", "type": "User", "site_admin": false}, "body": "The destructor and `operator()` are virtual overloads. They can be called from code that doesn't even know about Python so we have to acquire the GIL.\r\n\r\nThe constructor (by nature of C++) is not virtual. Since it can only be constructed by name (`PyGradHook(obj)`), it follows Python conventions for object ownership and assumes the calling code holds onto the GIL.", "created_at": "2017-03-01T22:16:23Z", "updated_at": "2018-11-23T15:32:39Z", "html_url": "https://github.com/pytorch/pytorch/pull/881#discussion_r103803872", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/881", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/103803872"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/881#discussion_r103803872"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/881"}}, "body_html": "<p>The destructor and <code>operator()</code> are virtual overloads. They can be called from code that doesn't even know about Python so we have to acquire the GIL.</p>\n<p>The constructor (by nature of C++) is not virtual. Since it can only be constructed by name (<code>PyGradHook(obj)</code>), it follows Python conventions for object ownership and assumes the calling code holds onto the GIL.</p>", "body_text": "The destructor and operator() are virtual overloads. They can be called from code that doesn't even know about Python so we have to acquire the GIL.\nThe constructor (by nature of C++) is not virtual. Since it can only be constructed by name (PyGradHook(obj)), it follows Python conventions for object ownership and assumes the calling code holds onto the GIL.", "in_reply_to_id": 103799242}