{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/200519287", "pull_request_review_id": 134852954, "id": 200519287, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDUxOTI4Nw==", "diff_hunk": "@@ -49,6 +53,58 @@ def pack_segments_ref(lengths, data):\n \n         return pack_segments_ref\n \n+    @given(\n+        num_seq=st.integers(10, 100),\n+        cell_size=st.integers(1, 10),\n+        **hu.gcs\n+    )\n+    def test_pack_with_max_length_ops(self, num_seq, cell_size, gc, dc):\n+        # create data\n+        lengths = np.arange(num_seq, dtype=np.int32) + 1\n+        num_cell = np.sum(lengths)\n+        data = np.zeros(num_cell * cell_size, dtype=np.float32)\n+        left = np.cumsum(np.arange(num_seq) * cell_size)\n+        right = np.cumsum(lengths * cell_size)\n+        for i in range(num_seq):\n+            data[left[i]:right[i]] = i + 1.0\n+        data.resize(num_cell, cell_size)\n+        print(\"\\nnum seq:{},    num cell: {},   cell size:{}\\n\".format(\n+            num_seq, num_cell, cell_size)\n+            + \"=\" * 60\n+        )\n+        # run test\n+        max_length = 100", "path": "caffe2/python/operator_test/pack_ops_test.py", "position": null, "original_position": 56, "commit_id": "c6fc7e315cfdea22637eae8dae4d44dcb4c9f467", "original_commit_id": "ba2de012bf63746f0d829d671ba90fe2ac93244c", "user": {"login": "bddppq", "id": 9300575, "node_id": "MDQ6VXNlcjkzMDA1NzU=", "avatar_url": "https://avatars2.githubusercontent.com/u/9300575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bddppq", "html_url": "https://github.com/bddppq", "followers_url": "https://api.github.com/users/bddppq/followers", "following_url": "https://api.github.com/users/bddppq/following{/other_user}", "gists_url": "https://api.github.com/users/bddppq/gists{/gist_id}", "starred_url": "https://api.github.com/users/bddppq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bddppq/subscriptions", "organizations_url": "https://api.github.com/users/bddppq/orgs", "repos_url": "https://api.github.com/users/bddppq/repos", "events_url": "https://api.github.com/users/bddppq/events{/privacy}", "received_events_url": "https://api.github.com/users/bddppq/received_events", "type": "User", "site_admin": false}, "body": "`num_seq` can be 100 (since `st.integers` can return value <= max_value), maybe set it to `num_seq + 1`?", "created_at": "2018-07-05T23:56:15Z", "updated_at": "2018-11-23T15:46:50Z", "html_url": "https://github.com/pytorch/pytorch/pull/9048#discussion_r200519287", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/9048", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/200519287"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/9048#discussion_r200519287"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/9048"}}, "body_html": "<p><code>num_seq</code> can be 100 (since <code>st.integers</code> can return value &lt;= max_value), maybe set it to <code>num_seq + 1</code>?</p>", "body_text": "num_seq can be 100 (since st.integers can return value <= max_value), maybe set it to num_seq + 1?"}