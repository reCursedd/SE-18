{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/320478574", "html_url": "https://github.com/pytorch/pytorch/issues/1885#issuecomment-320478574", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/1885", "id": 320478574, "node_id": "MDEyOklzc3VlQ29tbWVudDMyMDQ3ODU3NA==", "user": {"login": "episodeyang", "id": 630490, "node_id": "MDQ6VXNlcjYzMDQ5MA==", "avatar_url": "https://avatars2.githubusercontent.com/u/630490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/episodeyang", "html_url": "https://github.com/episodeyang", "followers_url": "https://api.github.com/users/episodeyang/followers", "following_url": "https://api.github.com/users/episodeyang/following{/other_user}", "gists_url": "https://api.github.com/users/episodeyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/episodeyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/episodeyang/subscriptions", "organizations_url": "https://api.github.com/users/episodeyang/orgs", "repos_url": "https://api.github.com/users/episodeyang/repos", "events_url": "https://api.github.com/users/episodeyang/events{/privacy}", "received_events_url": "https://api.github.com/users/episodeyang/received_events", "type": "User", "site_admin": false}, "created_at": "2017-08-06T00:44:14Z", "updated_at": "2017-08-06T00:44:14Z", "author_association": "NONE", "body_html": "<p>Here is a working example for those looking for one</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> numpy <span class=\"pl-k\">as</span> np\n<span class=\"pl-k\">import</span> torch\n<span class=\"pl-k\">from</span> torch.autograd <span class=\"pl-k\">import</span> Variable\n\nsize <span class=\"pl-k\">=</span> [<span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">2</span>]\nn <span class=\"pl-k\">=</span> <span class=\"pl-c1\">5</span>\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> show case scatter method on tensors</span>\n<span class=\"pl-c1\">input</span> <span class=\"pl-k\">=</span> torch.FloatTensor(<span class=\"pl-k\">*</span>size <span class=\"pl-k\">+</span> [n]).zero_()\nmask <span class=\"pl-k\">=</span> torch.LongTensor(np.ones(size, <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>np.int)).unsqueeze(<span class=\"pl-v\">dim</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">2</span>).expand_as(<span class=\"pl-c1\">input</span>)\n<span class=\"pl-c1\">print</span>(mask)\n<span class=\"pl-c1\">input</span>.scatter_(<span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>, mask, n)\n<span class=\"pl-c1\">print</span>(<span class=\"pl-c1\">input</span>)\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> Now test scatter method on variables</span>\n<span class=\"pl-c1\">input</span> <span class=\"pl-k\">=</span> Variable(torch.FloatTensor(<span class=\"pl-k\">*</span>size <span class=\"pl-k\">+</span> [n]).zero_())\nmask <span class=\"pl-k\">=</span> Variable(torch.LongTensor(np.ones(size, <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>np.int)).unsqueeze(<span class=\"pl-v\">dim</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">2</span>).expand_as(<span class=\"pl-c1\">input</span>))\n<span class=\"pl-c1\">print</span>(mask)\n<span class=\"pl-c1\">input</span>.scatter_(<span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>, mask, <span class=\"pl-c1\">5</span> <span class=\"pl-k\">*</span> Variable(torch.ones(<span class=\"pl-c1\">input</span>.size())))\n<span class=\"pl-c1\">print</span>(<span class=\"pl-c1\">input</span>)\n</pre></div>", "body_text": "Here is a working example for those looking for one\nimport numpy as np\nimport torch\nfrom torch.autograd import Variable\n\nsize = [2, 2]\nn = 5\n\n# show case scatter method on tensors\ninput = torch.FloatTensor(*size + [n]).zero_()\nmask = torch.LongTensor(np.ones(size, dtype=np.int)).unsqueeze(dim=2).expand_as(input)\nprint(mask)\ninput.scatter_(-1, mask, n)\nprint(input)\n\n# Now test scatter method on variables\ninput = Variable(torch.FloatTensor(*size + [n]).zero_())\nmask = Variable(torch.LongTensor(np.ones(size, dtype=np.int)).unsqueeze(dim=2).expand_as(input))\nprint(mask)\ninput.scatter_(-1, mask, 5 * Variable(torch.ones(input.size())))\nprint(input)", "body": "Here is a working example for those looking for one\r\n\r\n```python\r\nimport numpy as np\r\nimport torch\r\nfrom torch.autograd import Variable\r\n\r\nsize = [2, 2]\r\nn = 5\r\n\r\n# show case scatter method on tensors\r\ninput = torch.FloatTensor(*size + [n]).zero_()\r\nmask = torch.LongTensor(np.ones(size, dtype=np.int)).unsqueeze(dim=2).expand_as(input)\r\nprint(mask)\r\ninput.scatter_(-1, mask, n)\r\nprint(input)\r\n\r\n# Now test scatter method on variables\r\ninput = Variable(torch.FloatTensor(*size + [n]).zero_())\r\nmask = Variable(torch.LongTensor(np.ones(size, dtype=np.int)).unsqueeze(dim=2).expand_as(input))\r\nprint(mask)\r\ninput.scatter_(-1, mask, 5 * Variable(torch.ones(input.size())))\r\nprint(input)\r\n\r\n```"}