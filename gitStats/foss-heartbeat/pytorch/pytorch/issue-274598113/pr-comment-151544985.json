{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/151544985", "pull_request_review_id": 77272487, "id": 151544985, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MTU0NDk4NQ==", "diff_hunk": "@@ -107,19 +105,27 @@ std::string FunctionParameter::type_name() const {\n }\n \n void FunctionParameter::set_default_str(const std::string& str) {\n+  if (str == \"None\") {\n+    allow_none = true;\n+  }\n   if (type_ == ParameterType::TENSOR) {\n     if (str != \"None\") {\n       throw std::runtime_error(\"default value for Tensor must be none, got: \" + str);\n     }\n-    return;\n   } else if (type_ == ParameterType::INT64) {\n     default_int = atol(str.c_str());\n   } else if (type_ == ParameterType::BOOL) {\n     default_bool = (str == \"True\" || str == \"true\");\n   } else if (type_ == ParameterType::DOUBLE) {\n     default_double = atof(str.c_str());\n   } else if (type_ == ParameterType::SCALAR) {\n-    default_scalar = Scalar(atof(str.c_str()));\n+    if (str == \"None\") {\n+      // This is a bit awkward, but convenient for clamp which takes Scalars,\n+      // but allows None.\n+      default_scalar = Scalar(NAN);", "path": "torch/csrc/utils/python_arg_parser.cpp", "position": 50, "original_position": 50, "commit_id": "33b42f1d60819d7915df7b237b375870bc6fbe11", "original_commit_id": "fd7eb2c5d9916285f211d9d78e121b315f9d0a67", "user": {"login": "colesbury", "id": 655866, "node_id": "MDQ6VXNlcjY1NTg2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/655866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colesbury", "html_url": "https://github.com/colesbury", "followers_url": "https://api.github.com/users/colesbury/followers", "following_url": "https://api.github.com/users/colesbury/following{/other_user}", "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions", "organizations_url": "https://api.github.com/users/colesbury/orgs", "repos_url": "https://api.github.com/users/colesbury/repos", "events_url": "https://api.github.com/users/colesbury/events{/privacy}", "received_events_url": "https://api.github.com/users/colesbury/received_events", "type": "User", "site_admin": false}, "body": "That would be better, but I don't see a way to do it without complicating the code.", "created_at": "2017-11-16T21:41:23Z", "updated_at": "2018-11-23T15:36:37Z", "html_url": "https://github.com/pytorch/pytorch/pull/3739#discussion_r151544985", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/3739", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/151544985"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/3739#discussion_r151544985"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/3739"}}, "body_html": "<p>That would be better, but I don't see a way to do it without complicating the code.</p>", "body_text": "That would be better, but I don't see a way to do it without complicating the code.", "in_reply_to_id": 151538857}