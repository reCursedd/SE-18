{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/151538857", "pull_request_review_id": 77259925, "id": 151538857, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MTUzODg1Nw==", "diff_hunk": "@@ -107,19 +105,27 @@ std::string FunctionParameter::type_name() const {\n }\n \n void FunctionParameter::set_default_str(const std::string& str) {\n+  if (str == \"None\") {\n+    allow_none = true;\n+  }\n   if (type_ == ParameterType::TENSOR) {\n     if (str != \"None\") {\n       throw std::runtime_error(\"default value for Tensor must be none, got: \" + str);\n     }\n-    return;\n   } else if (type_ == ParameterType::INT64) {\n     default_int = atol(str.c_str());\n   } else if (type_ == ParameterType::BOOL) {\n     default_bool = (str == \"True\" || str == \"true\");\n   } else if (type_ == ParameterType::DOUBLE) {\n     default_double = atof(str.c_str());\n   } else if (type_ == ParameterType::SCALAR) {\n-    default_scalar = Scalar(atof(str.c_str()));\n+    if (str == \"None\") {\n+      // This is a bit awkward, but convenient for clamp which takes Scalars,\n+      // but allows None.\n+      default_scalar = Scalar(NAN);", "path": "torch/csrc/utils/python_arg_parser.cpp", "position": 50, "original_position": 50, "commit_id": "33b42f1d60819d7915df7b237b375870bc6fbe11", "original_commit_id": "fd7eb2c5d9916285f211d9d78e121b315f9d0a67", "user": {"login": "gchanan", "id": 3768583, "node_id": "MDQ6VXNlcjM3Njg1ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3768583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gchanan", "html_url": "https://github.com/gchanan", "followers_url": "https://api.github.com/users/gchanan/followers", "following_url": "https://api.github.com/users/gchanan/following{/other_user}", "gists_url": "https://api.github.com/users/gchanan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gchanan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gchanan/subscriptions", "organizations_url": "https://api.github.com/users/gchanan/orgs", "repos_url": "https://api.github.com/users/gchanan/repos", "events_url": "https://api.github.com/users/gchanan/events{/privacy}", "received_events_url": "https://api.github.com/users/gchanan/received_events", "type": "User", "site_admin": false}, "body": "I should never actually read out this value, right? (because of how the dispatch works for clamp).  Do you envision we will use this?  If not, should we just throw an exception at the read site (i.e. make the read a function), because the right behavior is to throw an error before dispatch, not to dispatch to the function with NaNs.", "created_at": "2017-11-16T21:15:35Z", "updated_at": "2018-11-23T15:36:36Z", "html_url": "https://github.com/pytorch/pytorch/pull/3739#discussion_r151538857", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/3739", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/151538857"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/3739#discussion_r151538857"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/3739"}}, "body_html": "<p>I should never actually read out this value, right? (because of how the dispatch works for clamp).  Do you envision we will use this?  If not, should we just throw an exception at the read site (i.e. make the read a function), because the right behavior is to throw an error before dispatch, not to dispatch to the function with NaNs.</p>", "body_text": "I should never actually read out this value, right? (because of how the dispatch works for clamp).  Do you envision we will use this?  If not, should we just throw an exception at the read site (i.e. make the read a function), because the right behavior is to throw an error before dispatch, not to dispatch to the function with NaNs."}