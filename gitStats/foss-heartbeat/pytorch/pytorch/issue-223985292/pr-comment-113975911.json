{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/113975911", "pull_request_review_id": 35411666, "id": 113975911, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMzk3NTkxMQ==", "diff_hunk": "@@ -109,6 +111,104 @@ class UpsamplingBilinear2d(_UpsamplingBase):\n         [torch.FloatTensor of size 1x1x4x4]\n \n     \"\"\"\n+    def __init__(self, size=None, scale_factor=None):\n+        super(UpsamplingBilinear2d, self).__init__(_pair(size), scale_factor)\n \n     def forward(self, input):\n         return F.upsample_bilinear(input, self.size, self.scale_factor)\n+\n+\n+class UpsamplingNearest3d(_UpsamplingBase):\n+    \"\"\"\n+    Applies a 3D nearest neighbor upsampling to an input signal composed of several input\n+    channels.\n+\n+    To specify the scale, it takes either the :attr:`size` or the :attr:`scale_factor`\n+    as it's constructor argument.\n+\n+    When `size` is given, it is the output size of the volume (d, h, w).\n+\n+    Args:\n+        size (tuple, optional): a tuple of ints (D_out, H_out, W_out) output sizes\n+        scale_factor (int, optional): the multiplier for the image depth / height / width\n+\n+    Shape:\n+        - Input: :math:`(N, C, D_{in}, H_{in}, W_{in})`\n+        - Output: :math:`(N, C, D_{out}, H_{out}, W_{out})` where\n+          :math:`D_{out} = floor(D_{in} * scale\\_factor)`\n+          :math:`H_{out} = floor(H_{in} * scale\\_factor)`\n+          :math:`W_{out} = floor(W_{in}  * scale\\_factor)`\n+\n+    Examples::\n+\n+        >>> inp\n+        Variable containing:\n+        (0 ,0 ,.,.) =\n+          1  2\n+          3  4\n+        [torch.FloatTensor of size 1x1x2x2x2]\n+\n+        >>> m = nn.UpsamplingNearest3d(scale_factor=2)\n+        >>> m(inp)\n+        Variable containing:\n+        (0 ,0 ,.,.) =\n+          1  1  2  2\n+          1  1  2  2\n+          3  3  4  4\n+          3  3  4  4\n+        [torch.FloatTensor of size 1x1x4x4x4]\n+\n+    \"\"\"\n+    def __init__(self, size=None, scale_factor=None):\n+        super(UpsamplingNearest3d, self).__init__(_triple(size), scale_factor)\n+\n+    def forward(self, input):\n+        return F.upsample_nearest(input, self.size, self.scale_factor)\n+\n+\n+class UpsamplingTrilinear3d(_UpsamplingBase):\n+    \"\"\"\n+    Applies a 3D trilinear upsampling to an input signal composed of several input\n+    channels.\n+\n+    To specify the scale, it takes either the :attr:`size` or the :attr:`scale_factor`\n+    as it's constructor argument.\n+\n+    When `size` is given, it is the output size of the volume (d, h, w).\n+\n+    Args:\n+        size (tuple, optional): a tuple of ints (D_out, H_out, W_out) output sizes\n+        scale_factor (int, optional): the multiplier for the image depth / height / width\n+\n+    Shape:\n+        - Input: :math:`(N, C, D_{in}, H_{in}, W_{in})`\n+        - Output: :math:`(N, C, D_{out}, H_{out}, W_{out})` where\n+          :math:`D_{out} = floor(D_{in} * scale\\_factor)`\n+          :math:`H_{out} = floor(H_{in} * scale\\_factor)`\n+          :math:`W_{out} = floor(W_{in}  * scale\\_factor)`\n+\n+    Examples::\n+\n+        >>> inp\n+        Variable containing:\n+        (0 ,0 ,.,.) =\n+          1  2\n+          3  4\n+        [torch.FloatTensor of size 1x1x2x2x2]\n+\n+        >>> m = nn.UpsamplingTrilinear3d(scale_factor=2)\n+        >>> m(inp)\n+        Variable containing:\n+        (0 ,0 ,.,.) =\n+          1.0000  1.3333  1.6667  2.0000\n+          1.6667  2.0000  2.3333  2.6667\n+          2.3333  2.6667  3.0000  3.3333\n+          3.0000  3.3333  3.6667  4.0000\n+        [torch.FloatTensor of size 1x1x4x4x4]\n+\n+    \"\"\"\n+    def __init__(self, size=None, scale_factor=None):\n+        super(UpsamplingTrilinear3d, self).__init__(_triple(size), scale_factor)", "path": "torch/nn/modules/upsampling.py", "position": 123, "original_position": 128, "commit_id": "aed92eb7a1eab72bddbb596a003a4f32b65cfc01", "original_commit_id": "abe58e09db9645e7d1769daf66a0fbc79d55227e", "user": {"login": "andrewgiessel", "id": 1160997, "node_id": "MDQ6VXNlcjExNjA5OTc=", "avatar_url": "https://avatars0.githubusercontent.com/u/1160997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andrewgiessel", "html_url": "https://github.com/andrewgiessel", "followers_url": "https://api.github.com/users/andrewgiessel/followers", "following_url": "https://api.github.com/users/andrewgiessel/following{/other_user}", "gists_url": "https://api.github.com/users/andrewgiessel/gists{/gist_id}", "starred_url": "https://api.github.com/users/andrewgiessel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andrewgiessel/subscriptions", "organizations_url": "https://api.github.com/users/andrewgiessel/orgs", "repos_url": "https://api.github.com/users/andrewgiessel/repos", "events_url": "https://api.github.com/users/andrewgiessel/events{/privacy}", "received_events_url": "https://api.github.com/users/andrewgiessel/received_events", "type": "User", "site_admin": false}, "body": "pass in size instead of _triple(size), and cast self.size() after the parent constructor", "created_at": "2017-04-28T17:04:11Z", "updated_at": "2018-11-23T15:33:14Z", "html_url": "https://github.com/pytorch/pytorch/pull/1348#discussion_r113975911", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/1348", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/113975911"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/1348#discussion_r113975911"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/1348"}}, "body_html": "<p>pass in size instead of _triple(size), and cast self.size() after the parent constructor</p>", "body_text": "pass in size instead of _triple(size), and cast self.size() after the parent constructor"}