{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/298089168", "html_url": "https://github.com/pytorch/pytorch/pull/1348#issuecomment-298089168", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/1348", "id": 298089168, "node_id": "MDEyOklzc3VlQ29tbWVudDI5ODA4OTE2OA==", "user": {"login": "lantiga", "id": 191033, "node_id": "MDQ6VXNlcjE5MTAzMw==", "avatar_url": "https://avatars2.githubusercontent.com/u/191033?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lantiga", "html_url": "https://github.com/lantiga", "followers_url": "https://api.github.com/users/lantiga/followers", "following_url": "https://api.github.com/users/lantiga/following{/other_user}", "gists_url": "https://api.github.com/users/lantiga/gists{/gist_id}", "starred_url": "https://api.github.com/users/lantiga/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lantiga/subscriptions", "organizations_url": "https://api.github.com/users/lantiga/orgs", "repos_url": "https://api.github.com/users/lantiga/repos", "events_url": "https://api.github.com/users/lantiga/events{/privacy}", "received_events_url": "https://api.github.com/users/lantiga/received_events", "type": "User", "site_admin": false}, "created_at": "2017-04-28T19:41:27Z", "updated_at": "2017-04-28T19:44:22Z", "author_association": "COLLABORATOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1160997\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/andrewgiessel\">@andrewgiessel</a> Thank you! This is super-helpful.</p>\n<blockquote>\n<p>Hey, this is a big PR! :)</p>\n</blockquote>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=9110200\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/fmassa\">@fmassa</a> Yeah, I know and I feel bad about it :-) It rabbit-holed from needing those upsampling modules for 3d stuff.</p>\n<blockquote>\n<p>I quickly skimmed through it, and correct me if I'm wrong but SpatialSubSampling is actually equivalent to Conv2d with groups == nInputChannels == nOutputChannels, but maybe more efficient?</p>\n</blockquote>\n<p>Almost: it's like a Conv2d with groups == nInputChannels == nOutputChannels and kernels in which all weight and bias elements are equal. The dim of weight and bias is 1 and the size is (nInputChannel,).<br>\nIt's really a local averaging+subsampling filter where you can learn the scale and bias of the average by channel.<br>\nSpatialSubSampling has been in torch for a long time (torch7 had a module). It's more memory efficient and has fewer parameters if you just need subsampling. Not sure about speed when CUDNN kicks in.</p>", "body_text": "@andrewgiessel Thank you! This is super-helpful.\n\nHey, this is a big PR! :)\n\n@fmassa Yeah, I know and I feel bad about it :-) It rabbit-holed from needing those upsampling modules for 3d stuff.\n\nI quickly skimmed through it, and correct me if I'm wrong but SpatialSubSampling is actually equivalent to Conv2d with groups == nInputChannels == nOutputChannels, but maybe more efficient?\n\nAlmost: it's like a Conv2d with groups == nInputChannels == nOutputChannels and kernels in which all weight and bias elements are equal. The dim of weight and bias is 1 and the size is (nInputChannel,).\nIt's really a local averaging+subsampling filter where you can learn the scale and bias of the average by channel.\nSpatialSubSampling has been in torch for a long time (torch7 had a module). It's more memory efficient and has fewer parameters if you just need subsampling. Not sure about speed when CUDNN kicks in.", "body": "@andrewgiessel Thank you! This is super-helpful.\r\n\r\n>Hey, this is a big PR! :)\r\n\r\n@fmassa Yeah, I know and I feel bad about it :-) It rabbit-holed from needing those upsampling modules for 3d stuff.\r\n\r\n> I quickly skimmed through it, and correct me if I'm wrong but SpatialSubSampling is actually equivalent to Conv2d with groups == nInputChannels == nOutputChannels, but maybe more efficient?\r\n\r\nAlmost: it's like a Conv2d with groups == nInputChannels == nOutputChannels and kernels in which all weight and bias elements are equal. The dim of weight and bias is 1 and the size is (nInputChannel,).\r\nIt's really a local averaging+subsampling filter where you can learn the scale and bias of the average by channel.\r\nSpatialSubSampling has been in torch for a long time (torch7 had a module). It's more memory efficient and has fewer parameters if you just need subsampling. Not sure about speed when CUDNN kicks in."}