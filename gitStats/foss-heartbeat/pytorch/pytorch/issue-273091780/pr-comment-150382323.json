{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/150382323", "pull_request_review_id": 75930339, "id": 150382323, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MDM4MjMyMw==", "diff_hunk": "@@ -246,7 +247,204 @@ void internedStringsTests () {\n }\n \n \n+\n+at::Tensor t_use(at::Tensor x) {\n+  return x;\n+}\n+at::Tensor t_def(at::Tensor x) {\n+  return x.t();\n+}\n+\n+// given the difference of output vs expected tensor, check whether the\n+// difference is within a relative tolerance range. This is a standard way of\n+// matching tensor values upto certain precision\n+bool checkRtol(const at::Tensor& diff, const std::vector<at::Tensor> inputs) {\n+  double maxValue = 0.0;\n+  for (auto& tensor : inputs) {\n+    maxValue = fmax(tensor.abs().max().toCFloat(), maxValue);\n+  }\n+  return diff.abs().max().toCFloat() < 2e-6 * maxValue;\n+}\n+bool almostEqual(const at::Tensor & a, const at::Tensor & b) {\n+  return checkRtol(a - b,{a, b});\n+}\n+\n+std::pair<at::Tensor, at::Tensor>\n+lstm(at::Tensor input,\n+      at::Tensor hx,\n+      at::Tensor cx,\n+      at::Tensor w_ih,\n+      at::Tensor w_hh) {\n+  auto gates = input.mm(t_use(w_ih)) + hx.mm(t_use(w_hh));\n+\n+  auto chunked_gates = gates.chunk(4, 1);\n+  auto ingate     = chunked_gates[0];\n+  auto forgetgate = chunked_gates[1];\n+  auto cellgate = chunked_gates[2];\n+  auto outgate    = chunked_gates[3];\n+\n+  ingate = ingate.sigmoid();\n+  outgate = outgate.sigmoid();\n+  cellgate = cellgate.tanh();\n+  forgetgate = forgetgate.sigmoid();\n+\n+  auto cy = (forgetgate * cx) + (ingate * cellgate);\n+  auto hy = outgate * cy.tanh();\n+\n+  return {hy, cy};\n+}\n+\n+Symbol sym(const char * str) {\n+  return stringToSymbol(str);\n+}\n+\n+Node * node(Graph& graph, const char * n, ArrayRef<Node*> inputs) {\n+  return graph.appendNode(graph.create(sym(n),inputs));\n+}\n+\n+Node * add(Graph & g, Node * a, Node * b) {\n+  auto r = node(g, \"add\", {a,b});\n+  r->t_(sym(\"alpha\"), at::Scalar(1).toTensor());\n+  return r;\n+}\n+\n+std::tuple<Node*, Node*> build_lstm_body(\n+  Graph & g,\n+  Node * input,\n+  Node * hx,\n+  Node * cx,\n+  Node * w_ih,\n+  Node * w_hh) {\n+    auto gates = add(g, node(g,\"mm\",{ input, w_ih }), node(g, \"mm\", {hx, w_hh}));\n+    auto chunked_gates = node(g, \"chunk\", { gates });\n+    chunked_gates->i_(sym(\"chunks\"), 4);\n+    chunked_gates->i_(sym(\"dim\"), 1);\n+    auto ingate = g.appendNode(g.createSelect(chunked_gates, 0));\n+    auto forgetgate = g.appendNode(g.createSelect(chunked_gates, 1));\n+    auto cellgate = g.appendNode(g.createSelect(chunked_gates, 2));\n+    auto outgate = g.appendNode(g.createSelect(chunked_gates, 3));\n+    ingate = node(g,\"sigmoid\",{ingate});\n+    outgate = node(g,\"sigmoid\",{outgate});\n+    cellgate = node(g,\"tanh\",{cellgate});\n+    forgetgate = node(g,\"sigmoid\",{forgetgate});\n+\n+    auto cy = add(g, node(g,\"mul\", {forgetgate, cx}) , node(g, \"mul\", {ingate, cellgate}));\n+    auto hy = node(g, \"mul\", {outgate, node(g, \"tanh\", {cy})});\n+\n+    return std::make_tuple(hy,cy);\n+}\n+\n+std::shared_ptr<Graph> build_lstm() {\n+  auto r = std::make_shared<Graph>();\n+  auto & g = *r;\n+  Node * input = g.addInput();\n+  Node * hx = g.addInput();\n+  Node * cx = g.addInput();\n+  Node * w_ih = g.addInput();\n+  Node * w_hh = g.addInput();\n+\n+  Node * hy;\n+  Node * cy;\n+  std::tie(hy,cy) = build_lstm_body(g, input, hx, cx, w_ih, w_hh);\n+\n+  g.registerOutput(hy);\n+  g.registerOutput(cy);\n+  g.lint();\n+\n+  return r;\n+}\n+\n+std::shared_ptr<Graph> build_lstm_stages() {\n+  auto r = std::make_shared<Graph>();\n+  auto & g = *r;\n+  Node * input = g.addInput();\n+  Node * hx = g.addInput();\n+  Node * cx = g.addInput();\n+  Node * w_ih = g.addInput();\n+  Node * w_hh = g.addInput();\n+\n+  Node * hy;\n+  Node * cy;\n+  std::tie(hy,cy) = build_lstm_body(g, input, hx, cx, w_ih, w_hh);\n+\n+  // use some stuff from the previous stage as well\n+  // as a new input\n+  g.advanceStage();\n+  hx = hy;\n+  g.registerOutput(cy);\n+  cx = g.addInput();\n+\n+  std::tie(hy,cy) = build_lstm_body(g, input, hx, cx, w_ih, w_hh);\n+\n+  g.registerOutput(hy);\n+  g.registerOutput(cy);\n+  g.lint();\n+\n+  return r;\n+}\n+\n+\n+void interpTest() {\n+    constexpr int batch_size = 4;\n+    constexpr int input_size = 256;\n+    constexpr int seq_len = 32;\n+\n+    int hidden_size = 2*input_size;\n+\n+    auto input = at::CUDA(at::kFloat).randn({seq_len, batch_size, input_size});\n+    auto hx    = at::CUDA(at::kFloat).randn({batch_size, hidden_size});\n+    auto cx    = at::CUDA(at::kFloat).randn({batch_size, hidden_size});\n+    auto w_ih  = t_def(at::CUDA(at::kFloat).randn({4 * hidden_size, input_size}));\n+    auto w_hh  = t_def(at::CUDA(at::kFloat).randn({4 * hidden_size, hidden_size}));\n+\n+    auto lstm_g = build_lstm();\n+    Function  lstm_function(lstm_g);\n+    std::vector<at::Tensor> outputs;\n+    Interpreter lstm_interp(lstm_function);\n+    lstm_interp.runOneStage({input[0], hx, cx, w_ih, w_hh}, outputs);\n+    std::tie(hx, cx) = lstm(input[0], hx, cx, w_ih, w_hh);\n+\n+    //std::cout << almostEqual(outputs[0],hx) << \"\\n\";\n+    JIT_ASSERT(almostEqual(outputs[0],hx));", "path": "torch/csrc/jit/test_jit.cpp", "position": null, "original_position": 170, "commit_id": "8421d51b4f4545fc569a2522ca31ebdb0796a7ac", "original_commit_id": "71f42be9e2351f659845bfda434e4d5b303f49e5", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "Why wouldn't the outputs be exactly equal? IIUC, we should be running the same ATen ops in the same order, and these ops are deterministic, no?", "created_at": "2017-11-11T11:57:43Z", "updated_at": "2018-11-23T15:36:22Z", "html_url": "https://github.com/pytorch/pytorch/pull/3634#discussion_r150382323", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/3634", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/150382323"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/3634#discussion_r150382323"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/3634"}}, "body_html": "<p>Why wouldn't the outputs be exactly equal? IIUC, we should be running the same ATen ops in the same order, and these ops are deterministic, no?</p>", "body_text": "Why wouldn't the outputs be exactly equal? IIUC, we should be running the same ATen ops in the same order, and these ops are deterministic, no?"}