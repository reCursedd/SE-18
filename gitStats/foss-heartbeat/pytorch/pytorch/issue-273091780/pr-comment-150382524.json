{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/150382524", "pull_request_review_id": 75930339, "id": 150382524, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MDM4MjUyNA==", "diff_hunk": "@@ -0,0 +1,288 @@\n+#include \"interpreter.h\"\n+#include \"torch/csrc/jit/ir.h\"\n+#include \"torch/csrc/jit/generated/aten_dispatch.h\"\n+#ifdef WITH_CUDA\n+#include \"torch/csrc/jit/fusion_compiler.h\"\n+#endif\n+\n+namespace torch { namespace jit {\n+\n+using InputList = const std::vector<at::Tensor> &;\n+using OutputList = std::vector<at::Tensor>&;\n+using Callback = std::function<void(InputList, OutputList)>;\n+// Returns a function implementing functionality of a given node,\n+// or nullptr if it's a no-op for autograd.\n+Callback getCallback(Node *node) {\n+  IR_IFM(node, PythonOp)\n+    throw NotImplementedException();\n+  IR_ELSEIFM(CppOp)\n+    throw NotImplementedException();\n+  IR_ELSEIF(Select)\n+    barf(\"getCallback() on select?\");\n+  IR_ELSEIF(FusionGroup)\n+#ifdef WITH_CUDA\n+    auto fusion_fn = sharedFusionCompiler().getOrCompile(*value->g(kSubgraph));\n+    return [fusion_fn](InputList inputs, OutputList outputs) {\n+      fusion_fn->launch(inputs, outputs);\n+    };\n+#else\n+    throw std::runtime_error(\"don't know how to execute FusionGroups without CUDA\");\n+#endif\n+  IR_ELSEIF(Constant)\n+    auto t = value->t(kvalue);\n+    return [t](InputList inputs, OutputList outputs) {\n+      outputs.push_back(t);", "path": "torch/csrc/jit/interpreter.cpp", "position": null, "original_position": 34, "commit_id": "8421d51b4f4545fc569a2522ca31ebdb0796a7ac", "original_commit_id": "71f42be9e2351f659845bfda434e4d5b303f49e5", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "Err... do we allow inplace operations in the new interpreter? If so, wouldn't we get in trouble if we did an inplace op on this constant? I remember thinking we had this hazard in the old code too, but we had a clone to prevent this from happening:\r\n\r\n```\r\nstruct WrapConstant : public Function {\r\n  WrapConstant(at::Tensor value)\r\n    : value(std::move(value)) {\r\n    is_executable = true;\r\n    num_inputs = 1;\r\n  }\r\n\r\n  virtual variable_list apply(const variable_list& inputs) {\r\n    if (inputs.size() != 1 || inputs[0].defined())\r\n      throw std::logic_error(\"WrapConstant nodes should only receive a single NULL input\");\r\n    AutoGPU guard(value);\r\n    return {make_variable(value.clone())};\r\n  }\r\n\r\n  at::Tensor value;\r\n};\r\n```", "created_at": "2017-11-11T12:14:33Z", "updated_at": "2018-11-23T15:36:22Z", "html_url": "https://github.com/pytorch/pytorch/pull/3634#discussion_r150382524", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/3634", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/150382524"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/3634#discussion_r150382524"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/3634"}}, "body_html": "<p>Err... do we allow inplace operations in the new interpreter? If so, wouldn't we get in trouble if we did an inplace op on this constant? I remember thinking we had this hazard in the old code too, but we had a clone to prevent this from happening:</p>\n<pre><code>struct WrapConstant : public Function {\n  WrapConstant(at::Tensor value)\n    : value(std::move(value)) {\n    is_executable = true;\n    num_inputs = 1;\n  }\n\n  virtual variable_list apply(const variable_list&amp; inputs) {\n    if (inputs.size() != 1 || inputs[0].defined())\n      throw std::logic_error(\"WrapConstant nodes should only receive a single NULL input\");\n    AutoGPU guard(value);\n    return {make_variable(value.clone())};\n  }\n\n  at::Tensor value;\n};\n</code></pre>", "body_text": "Err... do we allow inplace operations in the new interpreter? If so, wouldn't we get in trouble if we did an inplace op on this constant? I remember thinking we had this hazard in the old code too, but we had a clone to prevent this from happening:\nstruct WrapConstant : public Function {\n  WrapConstant(at::Tensor value)\n    : value(std::move(value)) {\n    is_executable = true;\n    num_inputs = 1;\n  }\n\n  virtual variable_list apply(const variable_list& inputs) {\n    if (inputs.size() != 1 || inputs[0].defined())\n      throw std::logic_error(\"WrapConstant nodes should only receive a single NULL input\");\n    AutoGPU guard(value);\n    return {make_variable(value.clone())};\n  }\n\n  at::Tensor value;\n};"}