{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/150652893", "pull_request_review_id": 76235014, "id": 150652893, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MDY1Mjg5Mw==", "diff_hunk": "@@ -0,0 +1,37 @@\n+#pragma once\n+\n+#include \"torch/csrc/jit/interpreter.h\"\n+#include \"torch/csrc/autograd/function.h\"\n+#include \"torch/csrc/autograd/functions/utils.h\"\n+#include \"torch/csrc/autograd/functions/basic_ops.h\"\n+namespace torch { namespace jit {\n+struct InterpreterAutogradFunction : public autograd::Function {\n+  InterpreterAutogradFunction(const jit::Function & function)\n+  : interp_(function) {}\n+  InterpreterAutogradFunction(const Interpreter & interp_, autograd::FunctionFlags && f)\n+  : autograd::Function(std::move(f)), interp_(interp_) {}\n+\n+  virtual void willReleaseVariables() override {\n+    keep_graph = false;\n+  }\n+  virtual autograd::variable_list apply(const autograd::variable_list& inputs) override {\n+    std::vector<at::Tensor> tinputs;\n+    std::vector<at::Tensor> toutputs;\n+    for(auto & i : inputs) {\n+      tinputs.push_back(i.data());\n+    }\n+    Interpreter interp = (keep_graph) ? interp_.clone() : interp_;", "path": "torch/csrc/jit/interpreter_autograd_function.h", "position": null, "original_position": 23, "commit_id": "8421d51b4f4545fc569a2522ca31ebdb0796a7ac", "original_commit_id": "71f42be9e2351f659845bfda434e4d5b303f49e5", "user": {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, "body": "interp is just a handle to a `std::shared_ptr<InterpreterImpl>` so copy constructor does not make a full copy. I'll think about whether there is a way to make this more clear.", "created_at": "2017-11-13T20:16:51Z", "updated_at": "2018-11-23T15:36:27Z", "html_url": "https://github.com/pytorch/pytorch/pull/3634#discussion_r150652893", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/3634", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/150652893"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/3634#discussion_r150652893"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/3634"}}, "body_html": "<p>interp is just a handle to a <code>std::shared_ptr&lt;InterpreterImpl&gt;</code> so copy constructor does not make a full copy. I'll think about whether there is a way to make this more clear.</p>", "body_text": "interp is just a handle to a std::shared_ptr<InterpreterImpl> so copy constructor does not make a full copy. I'll think about whether there is a way to make this more clear.", "in_reply_to_id": 150407849}