{"url": "https://api.github.com/repos/pytorch/pytorch/issues/3634", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/3634/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/3634/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/3634/events", "html_url": "https://github.com/pytorch/pytorch/pull/3634", "id": 273091780, "node_id": "MDExOlB1bGxSZXF1ZXN0MTUyMDI1OTk2", "number": 3634, "title": "Add a JIT interpreter", "user": {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-11-10T23:46:31Z", "updated_at": "2018-11-23T15:36:27Z", "closed_at": "2017-11-14T06:09:54Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/3634", "html_url": "https://github.com/pytorch/pytorch/pull/3634", "diff_url": "https://github.com/pytorch/pytorch/pull/3634.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/3634.patch"}, "body_html": "<p>The separate interpreter is used to graphs with a lower overhead than<br>\nconverting them to autograd graphs. Some notes:</p>\n<ul>\n<li>does not support Handles/PythonOp/CppOp, these will be in a future commit</li>\n<li>jit_closure.cpp still exists and we fall back to it for now when<br>\ncannot handle something because of PythonOp/CppOp</li>\n<li>In order to support retain_graph=True, the interpreter can be cloned,<br>\ncreating a copy that can be run with different arguments. This is<br>\nassumed to be the non-standard case so cloning is not particularly optimized.<br>\nNo tensor <em>data</em> is copied, but the at::Tensor list in the interpreter is.<br>\nIf we hit problems, there is a lot we could do (such as register allocation)<br>\nto minimize the stuff that needs to be copied.</li>\n<li>Uses a pImpl pattern to keep implementation details out of its header file.</li>\n<li>Modifies the way getTensorOp works so that it reads/writes to already-existing<br>\nvectors, this prevents needing to realloc these buffers each time.</li>\n<li>Timings are here: <a href=\"https://gist.github.com/zdevito/5a20ac29fb1b9e449e693b67dc478127\">https://gist.github.com/zdevito/5a20ac29fb1b9e449e693b67dc478127</a><br>\nThis reduces overhead to about the same as running it in python.<br>\nIt is about 10us faster to run the same thing using ATen directly.</li>\n</ul>", "body_text": "The separate interpreter is used to graphs with a lower overhead than\nconverting them to autograd graphs. Some notes:\n\ndoes not support Handles/PythonOp/CppOp, these will be in a future commit\njit_closure.cpp still exists and we fall back to it for now when\ncannot handle something because of PythonOp/CppOp\nIn order to support retain_graph=True, the interpreter can be cloned,\ncreating a copy that can be run with different arguments. This is\nassumed to be the non-standard case so cloning is not particularly optimized.\nNo tensor data is copied, but the at::Tensor list in the interpreter is.\nIf we hit problems, there is a lot we could do (such as register allocation)\nto minimize the stuff that needs to be copied.\nUses a pImpl pattern to keep implementation details out of its header file.\nModifies the way getTensorOp works so that it reads/writes to already-existing\nvectors, this prevents needing to realloc these buffers each time.\nTimings are here: https://gist.github.com/zdevito/5a20ac29fb1b9e449e693b67dc478127\nThis reduces overhead to about the same as running it in python.\nIt is about 10us faster to run the same thing using ATen directly.", "body": "The separate interpreter is used to graphs with a lower overhead than\r\nconverting them to autograd graphs. Some notes:\r\n\r\n* does not support Handles/PythonOp/CppOp, these will be in a future commit\r\n* jit_closure.cpp still exists and we fall back to it for now when\r\n  cannot handle something because of PythonOp/CppOp\r\n* In order to support retain_graph=True, the interpreter can be cloned,\r\n  creating a copy that can be run with different arguments. This is\r\n  assumed to be the non-standard case so cloning is not particularly optimized.\r\n  No tensor _data_ is copied, but the at::Tensor list in the interpreter is.\r\n  If we hit problems, there is a lot we could do (such as register allocation)\r\n  to minimize the stuff that needs to be copied.\r\n* Uses a pImpl pattern to keep implementation details out of its header file.\r\n* Modifies the way getTensorOp works so that it reads/writes to already-existing\r\n  vectors, this prevents needing to realloc these buffers each time.\r\n* Timings are here: https://gist.github.com/zdevito/5a20ac29fb1b9e449e693b67dc478127\r\n  This reduces overhead to about the same as running it in python.\r\n  It is about 10us faster to run the same thing using ATen directly."}