{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/435447513", "html_url": "https://github.com/pytorch/pytorch/issues/13494#issuecomment-435447513", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/13494", "id": 435447513, "node_id": "MDEyOklzc3VlQ29tbWVudDQzNTQ0NzUxMw==", "user": {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, "created_at": "2018-11-02T17:10:02Z", "updated_at": "2018-11-02T17:10:02Z", "author_association": "CONTRIBUTOR", "body_html": "<p>I'd expect that most people think that retain_graph=True is the only valid way to be allowed to call backward twice, and this behavior is an exception. If it were frequently occurring it would be really bad: someone would write a model relying on backwards to work multiple times, everything would work and then someone else would come along, replace one op for another, and get an error someone else in the code.</p>\n<p>However, since it requires you to only use things like sum and add to cause this corner case to happen, it is probably pretty rare for anyone to ever get into this situation in the first place. So it is probably not worth the added complexity of making the API consistent.</p>", "body_text": "I'd expect that most people think that retain_graph=True is the only valid way to be allowed to call backward twice, and this behavior is an exception. If it were frequently occurring it would be really bad: someone would write a model relying on backwards to work multiple times, everything would work and then someone else would come along, replace one op for another, and get an error someone else in the code.\nHowever, since it requires you to only use things like sum and add to cause this corner case to happen, it is probably pretty rare for anyone to ever get into this situation in the first place. So it is probably not worth the added complexity of making the API consistent.", "body": "I'd expect that most people think that retain_graph=True is the only valid way to be allowed to call backward twice, and this behavior is an exception. If it were frequently occurring it would be really bad: someone would write a model relying on backwards to work multiple times, everything would work and then someone else would come along, replace one op for another, and get an error someone else in the code. \r\n\r\nHowever, since it requires you to only use things like sum and add to cause this corner case to happen, it is probably pretty rare for anyone to ever get into this situation in the first place. So it is probably not worth the added complexity of making the API consistent."}