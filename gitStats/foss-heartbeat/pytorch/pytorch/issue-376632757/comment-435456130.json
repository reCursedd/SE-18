{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/435456130", "html_url": "https://github.com/pytorch/pytorch/issues/13494#issuecomment-435456130", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/13494", "id": 435456130, "node_id": "MDEyOklzc3VlQ29tbWVudDQzNTQ1NjEzMA==", "user": {"login": "ailzhang", "id": 5248122, "node_id": "MDQ6VXNlcjUyNDgxMjI=", "avatar_url": "https://avatars2.githubusercontent.com/u/5248122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ailzhang", "html_url": "https://github.com/ailzhang", "followers_url": "https://api.github.com/users/ailzhang/followers", "following_url": "https://api.github.com/users/ailzhang/following{/other_user}", "gists_url": "https://api.github.com/users/ailzhang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ailzhang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ailzhang/subscriptions", "organizations_url": "https://api.github.com/users/ailzhang/orgs", "repos_url": "https://api.github.com/users/ailzhang/repos", "events_url": "https://api.github.com/users/ailzhang/events{/privacy}", "received_events_url": "https://api.github.com/users/ailzhang/received_events", "type": "User", "site_admin": false}, "created_at": "2018-11-02T17:41:21Z", "updated_at": "2018-11-02T18:26:43Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Thanks all for the discussion! :D</p>\n<p>To add a little context here, we discovered this behavior mismatch while comparing the sparse tensor backward to the dense one(cc: <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=38509346\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/weiyangfb\">@weiyangfb</a> ), and by using <code>%timeit</code> we were surprised to see that <code>sum</code> is allowed to backprop unlimited times but sparse sum throws an error, while all other operators don't have this mismatch.  We figured out the specialness of dense <code>sum</code> with help of <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=370202\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/zdevito\">@zdevito</a>  and <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=6429851\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/goldsborough\">@goldsborough</a>. We agreed that this might be a common sense for users that \"Pytorch destroys something after the first backward, to keep the graph I have to do retain_graph\", and this mismatched behavior could potentially cause some confusion to users.</p>\n<p>But I totally agree that this case is too rare to happen in real user code, and it doesn't worth the added complexity. Closing the issue.</p>", "body_text": "Thanks all for the discussion! :D\nTo add a little context here, we discovered this behavior mismatch while comparing the sparse tensor backward to the dense one(cc: @weiyangfb ), and by using %timeit we were surprised to see that sum is allowed to backprop unlimited times but sparse sum throws an error, while all other operators don't have this mismatch.  We figured out the specialness of dense sum with help of @zdevito  and @goldsborough. We agreed that this might be a common sense for users that \"Pytorch destroys something after the first backward, to keep the graph I have to do retain_graph\", and this mismatched behavior could potentially cause some confusion to users.\nBut I totally agree that this case is too rare to happen in real user code, and it doesn't worth the added complexity. Closing the issue.", "body": "Thanks all for the discussion! :D \r\n\r\nTo add a little context here, we discovered this behavior mismatch while comparing the sparse tensor backward to the dense one(cc: @weiyangfb ), and by using `%timeit` we were surprised to see that `sum` is allowed to backprop unlimited times but sparse sum throws an error, while all other operators don't have this mismatch.  We figured out the specialness of dense `sum` with help of @zdevito  and @goldsborough. We agreed that this might be a common sense for users that \"Pytorch destroys something after the first backward, to keep the graph I have to do retain_graph\", and this mismatched behavior could potentially cause some confusion to users. \r\n\r\nBut I totally agree that this case is too rare to happen in real user code, and it doesn't worth the added complexity. Closing the issue. "}