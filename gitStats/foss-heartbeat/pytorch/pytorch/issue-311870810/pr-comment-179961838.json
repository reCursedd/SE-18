{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/179961838", "pull_request_review_id": 110300580, "id": 179961838, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTk2MTgzOA==", "diff_hunk": "@@ -620,6 +620,75 @@ def test_lambda_lr(self):\n                              lr_lambda=[lambda x1: 0.9 ** x1, lambda x2: 0.8 ** x2])\n         self._test(scheduler, targets, epochs)\n \n+    def test_step_lr_state_dict(self):\n+        epoch = 10\n+        gamma = 0.1\n+        step_size = 3\n+\n+        scheduler = StepLR(self.opt, gamma=gamma, step_size=step_size)\n+        for _ in range(epoch):\n+            scheduler.step()\n+        state_dict = scheduler.state_dict()\n+\n+        scheduler_copy = StepLR(self.opt, gamma=gamma / 2, step_size=step_size // 2)\n+        scheduler_copy.load_state_dict(state_dict)\n+\n+        self.assertAlmostEqual(scheduler.last_epoch, scheduler_copy.last_epoch)\n+        self.assertAlmostEqual(scheduler.gamma, scheduler_copy.gamma)\n+        self.assertAlmostEqual(scheduler.step_size, scheduler_copy.step_size)\n+        self.assertAlmostEqual(scheduler.get_lr(), scheduler_copy.get_lr())\n+\n+    def test_multi_step_lr_state_dict(self):\n+        epoch = 10\n+        gamma = 0.1\n+        milestones = [2, 5, 9]\n+        faux_milestones = [1, 4, 6]\n+\n+        scheduler = MultiStepLR(self.opt, gamma=gamma, milestones=milestones)\n+        for _ in range(epoch):\n+            scheduler.step()\n+        state_dict = scheduler.state_dict()\n+\n+        scheduler_copy = MultiStepLR(self.opt, gamma=gamma / 2, milestones=faux_milestones)\n+        scheduler_copy.load_state_dict(state_dict)\n+\n+        self.assertAlmostEqual(scheduler.last_epoch, scheduler_copy.last_epoch)\n+        self.assertAlmostEqual(scheduler.gamma, scheduler_copy.gamma)\n+        self.assertAlmostEqual(scheduler.milestones, scheduler_copy.milestones)\n+        self.assertAlmostEqual(scheduler.get_lr(), scheduler_copy.get_lr())\n+\n+    def test_exp_step_lr_state_dict(self):\n+        epoch = 10\n+        gamma = 0.1\n+\n+        scheduler = ExponentialLR(self.opt, gamma=gamma)\n+        for _ in range(epoch):\n+            scheduler.step()\n+        state_dict = scheduler.state_dict()\n+\n+        scheduler_copy = ExponentialLR(self.opt, gamma=gamma / 2)\n+        scheduler_copy.load_state_dict(state_dict)\n+\n+        self.assertAlmostEqual(scheduler.last_epoch, scheduler_copy.last_epoch)\n+        self.assertAlmostEqual(scheduler.gamma, scheduler_copy.gamma)\n+        self.assertAlmostEqual(scheduler.get_lr(), scheduler_copy.get_lr())\n+\n+    def test_cosine_lr_state_dict(self):\n+        epoch = 10\n+        eta_min = 1e-10\n+        scheduler = CosineAnnealingLR(self.opt, T_max=epoch, eta_min=eta_min)\n+        for _ in range(epoch):\n+            scheduler.step()\n+        state_dict = scheduler.state_dict()\n+\n+        scheduler_copy = CosineAnnealingLR(self.opt, T_max=epoch // 2, eta_min=eta_min / 2)\n+        scheduler_copy.load_state_dict(state_dict)\n+\n+        self.assertAlmostEqual(scheduler.last_epoch, scheduler_copy.last_epoch)\n+        self.assertAlmostEqual(scheduler.eta_min, scheduler_copy.eta_min)\n+        self.assertAlmostEqual(scheduler.T_max, scheduler_copy.T_max)\n+        self.assertAlmostEqual(scheduler.get_lr(), scheduler_copy.get_lr())", "path": "test/test_optim.py", "position": null, "original_position": 71, "commit_id": "a4158d715b462763ee248c64c3433f9cd3a27cbe", "original_commit_id": "240a05269ff2895c70c2d1cbfa2df685d0d2c5d5", "user": {"login": "ArmenAg", "id": 4429794, "node_id": "MDQ6VXNlcjQ0Mjk3OTQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/4429794?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ArmenAg", "html_url": "https://github.com/ArmenAg", "followers_url": "https://api.github.com/users/ArmenAg/followers", "following_url": "https://api.github.com/users/ArmenAg/following{/other_user}", "gists_url": "https://api.github.com/users/ArmenAg/gists{/gist_id}", "starred_url": "https://api.github.com/users/ArmenAg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ArmenAg/subscriptions", "organizations_url": "https://api.github.com/users/ArmenAg/orgs", "repos_url": "https://api.github.com/users/ArmenAg/repos", "events_url": "https://api.github.com/users/ArmenAg/events{/privacy}", "received_events_url": "https://api.github.com/users/ArmenAg/received_events", "type": "User", "site_admin": false}, "body": "I see what you're saying. You're saying that the state_dict needs to be everything in __dict__ but the optimizer. I was setting the state to any key in **kwargs passed through the constructor. I'll fix this.", "created_at": "2018-04-08T21:23:01Z", "updated_at": "2018-11-23T15:42:01Z", "html_url": "https://github.com/pytorch/pytorch/pull/6342#discussion_r179961838", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/6342", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/179961838"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/6342#discussion_r179961838"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/6342"}}, "body_html": "<p>I see what you're saying. You're saying that the state_dict needs to be everything in <strong>dict</strong> but the optimizer. I was setting the state to any key in **kwargs passed through the constructor. I'll fix this.</p>", "body_text": "I see what you're saying. You're saying that the state_dict needs to be everything in dict but the optimizer. I was setting the state to any key in **kwargs passed through the constructor. I'll fix this.", "in_reply_to_id": 179960351}