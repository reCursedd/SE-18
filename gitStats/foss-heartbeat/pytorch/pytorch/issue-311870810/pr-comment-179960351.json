{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/179960351", "pull_request_review_id": 110299162, "id": 179960351, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTk2MDM1MQ==", "diff_hunk": "@@ -620,6 +620,75 @@ def test_lambda_lr(self):\n                              lr_lambda=[lambda x1: 0.9 ** x1, lambda x2: 0.8 ** x2])\n         self._test(scheduler, targets, epochs)\n \n+    def test_step_lr_state_dict(self):\n+        epoch = 10\n+        gamma = 0.1\n+        step_size = 3\n+\n+        scheduler = StepLR(self.opt, gamma=gamma, step_size=step_size)\n+        for _ in range(epoch):\n+            scheduler.step()\n+        state_dict = scheduler.state_dict()\n+\n+        scheduler_copy = StepLR(self.opt, gamma=gamma / 2, step_size=step_size // 2)\n+        scheduler_copy.load_state_dict(state_dict)\n+\n+        self.assertAlmostEqual(scheduler.last_epoch, scheduler_copy.last_epoch)\n+        self.assertAlmostEqual(scheduler.gamma, scheduler_copy.gamma)\n+        self.assertAlmostEqual(scheduler.step_size, scheduler_copy.step_size)\n+        self.assertAlmostEqual(scheduler.get_lr(), scheduler_copy.get_lr())\n+\n+    def test_multi_step_lr_state_dict(self):\n+        epoch = 10\n+        gamma = 0.1\n+        milestones = [2, 5, 9]\n+        faux_milestones = [1, 4, 6]\n+\n+        scheduler = MultiStepLR(self.opt, gamma=gamma, milestones=milestones)\n+        for _ in range(epoch):\n+            scheduler.step()\n+        state_dict = scheduler.state_dict()\n+\n+        scheduler_copy = MultiStepLR(self.opt, gamma=gamma / 2, milestones=faux_milestones)\n+        scheduler_copy.load_state_dict(state_dict)\n+\n+        self.assertAlmostEqual(scheduler.last_epoch, scheduler_copy.last_epoch)\n+        self.assertAlmostEqual(scheduler.gamma, scheduler_copy.gamma)\n+        self.assertAlmostEqual(scheduler.milestones, scheduler_copy.milestones)\n+        self.assertAlmostEqual(scheduler.get_lr(), scheduler_copy.get_lr())\n+\n+    def test_exp_step_lr_state_dict(self):\n+        epoch = 10\n+        gamma = 0.1\n+\n+        scheduler = ExponentialLR(self.opt, gamma=gamma)\n+        for _ in range(epoch):\n+            scheduler.step()\n+        state_dict = scheduler.state_dict()\n+\n+        scheduler_copy = ExponentialLR(self.opt, gamma=gamma / 2)\n+        scheduler_copy.load_state_dict(state_dict)\n+\n+        self.assertAlmostEqual(scheduler.last_epoch, scheduler_copy.last_epoch)\n+        self.assertAlmostEqual(scheduler.gamma, scheduler_copy.gamma)\n+        self.assertAlmostEqual(scheduler.get_lr(), scheduler_copy.get_lr())\n+\n+    def test_cosine_lr_state_dict(self):\n+        epoch = 10\n+        eta_min = 1e-10\n+        scheduler = CosineAnnealingLR(self.opt, T_max=epoch, eta_min=eta_min)\n+        for _ in range(epoch):\n+            scheduler.step()\n+        state_dict = scheduler.state_dict()\n+\n+        scheduler_copy = CosineAnnealingLR(self.opt, T_max=epoch // 2, eta_min=eta_min / 2)\n+        scheduler_copy.load_state_dict(state_dict)\n+\n+        self.assertAlmostEqual(scheduler.last_epoch, scheduler_copy.last_epoch)\n+        self.assertAlmostEqual(scheduler.eta_min, scheduler_copy.eta_min)\n+        self.assertAlmostEqual(scheduler.T_max, scheduler_copy.T_max)\n+        self.assertAlmostEqual(scheduler.get_lr(), scheduler_copy.get_lr())", "path": "test/test_optim.py", "position": null, "original_position": 71, "commit_id": "a4158d715b462763ee248c64c3433f9cd3a27cbe", "original_commit_id": "240a05269ff2895c70c2d1cbfa2df685d0d2c5d5", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Can you please isolate a separate helper function for all those tests? I'm thinking of something like\r\n```python\r\ndef _check_scheduler_state_dict(self, constr, constr2):\r\n    scheduler = constr()\r\n    for _ in range(epoch):\r\n        scheduler.step()\r\n    scheduler_copy = constr2()\r\n    scheduler_copy.load_state_dict(scheduler.state_dict())\r\n    for key in scheduler.__dict__:\r\n        if key != 'optimizer': continue # don't compare optimizer\r\n        ... # here compare scheduler and the copy on `key`\r\n\r\ndef test_cosine_lr_state_dict(self):\r\n    self. _check_scheduler_state_dict(\r\n        lambda: CosineAnnealingLR(self.opt, T_max=10, eta_min=1e-10),\r\n        lambda: CosineAnnealingLR(self.opt, T_max=5, eta_min=1e-5)\r\n    )\r\n```", "created_at": "2018-04-08T20:31:44Z", "updated_at": "2018-11-23T15:42:00Z", "html_url": "https://github.com/pytorch/pytorch/pull/6342#discussion_r179960351", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/6342", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/179960351"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/6342#discussion_r179960351"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/6342"}}, "body_html": "<p>Can you please isolate a separate helper function for all those tests? I'm thinking of something like</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">_check_scheduler_state_dict</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>, <span class=\"pl-smi\">constr</span>, <span class=\"pl-smi\">constr2</span>):\n    scheduler <span class=\"pl-k\">=</span> constr()\n    <span class=\"pl-k\">for</span> _ <span class=\"pl-k\">in</span> <span class=\"pl-c1\">range</span>(epoch):\n        scheduler.step()\n    scheduler_copy <span class=\"pl-k\">=</span> constr2()\n    scheduler_copy.load_state_dict(scheduler.state_dict())\n    <span class=\"pl-k\">for</span> key <span class=\"pl-k\">in</span> scheduler.<span class=\"pl-c1\">__dict__</span>:\n        <span class=\"pl-k\">if</span> key <span class=\"pl-k\">!=</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>optimizer<span class=\"pl-pds\">'</span></span>: <span class=\"pl-k\">continue</span> <span class=\"pl-c\"><span class=\"pl-c\">#</span> don't compare optimizer</span>\n        <span class=\"pl-c1\">...</span> <span class=\"pl-c\"><span class=\"pl-c\">#</span> here compare scheduler and the copy on `key`</span>\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">test_cosine_lr_state_dict</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>):\n    <span class=\"pl-c1\">self</span>. _check_scheduler_state_dict(\n        <span class=\"pl-k\">lambda</span>: CosineAnnealingLR(<span class=\"pl-c1\">self</span>.opt, <span class=\"pl-v\">T_max</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">10</span>, <span class=\"pl-v\">eta_min</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">1e-10</span>),\n        <span class=\"pl-k\">lambda</span>: CosineAnnealingLR(<span class=\"pl-c1\">self</span>.opt, <span class=\"pl-v\">T_max</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">5</span>, <span class=\"pl-v\">eta_min</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">1e-5</span>)\n    )</pre></div>", "body_text": "Can you please isolate a separate helper function for all those tests? I'm thinking of something like\ndef _check_scheduler_state_dict(self, constr, constr2):\n    scheduler = constr()\n    for _ in range(epoch):\n        scheduler.step()\n    scheduler_copy = constr2()\n    scheduler_copy.load_state_dict(scheduler.state_dict())\n    for key in scheduler.__dict__:\n        if key != 'optimizer': continue # don't compare optimizer\n        ... # here compare scheduler and the copy on `key`\n\ndef test_cosine_lr_state_dict(self):\n    self. _check_scheduler_state_dict(\n        lambda: CosineAnnealingLR(self.opt, T_max=10, eta_min=1e-10),\n        lambda: CosineAnnealingLR(self.opt, T_max=5, eta_min=1e-5)\n    )"}