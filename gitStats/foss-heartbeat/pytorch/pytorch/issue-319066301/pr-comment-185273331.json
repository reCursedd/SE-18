{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/185273331", "pull_request_review_id": 116628047, "id": 185273331, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NTI3MzMzMQ==", "diff_hunk": "@@ -0,0 +1,79 @@\n+#include \"caffe2/operators/moments_op.h\"\n+\n+#include <functional>\n+#include <string>\n+\n+namespace caffe2 {\n+\n+template <typename T, class Context>\n+bool MomentsGradientOp<T, Context>::Compute(\n+    const std::vector<int>& dY_dims,\n+    const std::vector<int>& dX_dims,\n+    const T* dmean_data,\n+    const T* dvariance_data,\n+    const T* X_data,\n+    const T* mean_data,\n+    T* dX_data) {\n+  const int dY_size = std::accumulate(\n+      dY_dims.cbegin(), dY_dims.cend(), 1, std::multiplies<int>());\n+  const int dX_size = std::accumulate(\n+      dX_dims.cbegin(), dX_dims.cend(), 1, std::multiplies<int>());\n+  const int ndim = dX_dims.size();\n+  std::vector<int> index(ndim, 0);\n+  const T norm = static_cast<T>(dY_size) / static_cast<T>(dX_size);\n+  for (int dX_index = 0; dX_index < dX_size; ++dX_index) {\n+    const int dY_index =\n+        math::internal::GetIndexFromDims(ndim, dY_dims.data(), index.data());\n+    dX_data[dX_index] =\n+        (dmean_data[dY_index] +\n+         static_cast<T>(2) * (X_data[dX_index] - mean_data[dY_index]) *\n+             dvariance_data[dY_index]) *\n+        norm;\n+    math::internal::IncreaseIndexInDims(ndim, dX_dims.data(), index.data());\n+  }\n+  return true;\n+}\n+\n+REGISTER_CPU_OPERATOR(Moments, MomentsOp<float, CPUContext>);\n+REGISTER_CPU_OPERATOR(MomentsGradient, MomentsGradientOp<float, CPUContext>);\n+\n+OPERATOR_SCHEMA(Moments)\n+    .NumInputs(1)\n+    .NumOutputs(2)\n+    .SetDoc(R\"DOC(\n+  Computes the mean and variance of the input tensor's element along the\n+  provided axes. The resulted tensor has the same rank as the input if keepdims\n+  equals True.\n+  If keepdims equals False, then the resulted tensor have the reduced dimension\n+  pruned.\n+)DOC\")\n+    .Arg(\"axes\", \"A list of integers, along which to reduce.\")", "path": "caffe2/operators/moments_op.cc", "position": null, "original_position": 50, "commit_id": "7c395e954a7ff2b29b14130d61222acb0fd426c1", "original_commit_id": "3d502368f0a0eb900e72641b363674496377a9ba", "user": {"login": "BIT-silence", "id": 3357667, "node_id": "MDQ6VXNlcjMzNTc2Njc=", "avatar_url": "https://avatars0.githubusercontent.com/u/3357667?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BIT-silence", "html_url": "https://github.com/BIT-silence", "followers_url": "https://api.github.com/users/BIT-silence/followers", "following_url": "https://api.github.com/users/BIT-silence/following{/other_user}", "gists_url": "https://api.github.com/users/BIT-silence/gists{/gist_id}", "starred_url": "https://api.github.com/users/BIT-silence/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BIT-silence/subscriptions", "organizations_url": "https://api.github.com/users/BIT-silence/orgs", "repos_url": "https://api.github.com/users/BIT-silence/repos", "events_url": "https://api.github.com/users/BIT-silence/events{/privacy}", "received_events_url": "https://api.github.com/users/BIT-silence/received_events", "type": "User", "site_admin": false}, "body": "Done.", "created_at": "2018-05-01T17:02:39Z", "updated_at": "2018-11-23T15:43:29Z", "html_url": "https://github.com/pytorch/pytorch/pull/7114#discussion_r185273331", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/7114", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/185273331"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/7114#discussion_r185273331"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/7114"}}, "body_html": "<p>Done.</p>", "body_text": "Done.", "in_reply_to_id": 185270089}