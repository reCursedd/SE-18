{"url": "https://api.github.com/repos/pytorch/pytorch/issues/12529", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/12529/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/12529/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/12529/events", "html_url": "https://github.com/pytorch/pytorch/issues/12529", "id": 368620212, "node_id": "MDU6SXNzdWUzNjg2MjAyMTI=", "number": 12529, "title": "ONNX export failed: Couldn't export Python operator Transfer", "user": {"login": "wangyunxiaa", "id": 41035013, "node_id": "MDQ6VXNlcjQxMDM1MDEz", "avatar_url": "https://avatars3.githubusercontent.com/u/41035013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wangyunxiaa", "html_url": "https://github.com/wangyunxiaa", "followers_url": "https://api.github.com/users/wangyunxiaa/followers", "following_url": "https://api.github.com/users/wangyunxiaa/following{/other_user}", "gists_url": "https://api.github.com/users/wangyunxiaa/gists{/gist_id}", "starred_url": "https://api.github.com/users/wangyunxiaa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wangyunxiaa/subscriptions", "organizations_url": "https://api.github.com/users/wangyunxiaa/orgs", "repos_url": "https://api.github.com/users/wangyunxiaa/repos", "events_url": "https://api.github.com/users/wangyunxiaa/events{/privacy}", "received_events_url": "https://api.github.com/users/wangyunxiaa/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-10-10T11:28:47Z", "updated_at": "2018-10-15T08:17:38Z", "closed_at": "2018-10-15T08:17:38Z", "author_association": "NONE", "body_html": "<p>I am trying to export a pretrained pytorch model to onnx format. I got an error as following:<br>\nGraph we tried to export:<br>\ngraph(%input_1 : Long(1, 7)<br>\n%input_2 : Long(1)<br>\n%learned_0 : Float(118427, 512)<br>\n%learned_1 : Float(6144, 512)<br>\n%learned_2 : Float(6144, 1536)<br>\n%learned_3 : Float(6144)<br>\n%learned_4 : Float(6144)<br>\n%learned_5 : Float(512, 1536)<br>\n%learned_6 : Float(118427)<br>\n%learned_7 : Float(118427)) {<br>\n%10 : Float(1, 7, 512) = onnx::Gather(%learned_0, %input_1), scope: RNNModel/Embedding[encoder]<br>\n%11 : Float(1, 7, 512) = ^Transfer(None)(%10), scope: RNNModel<br>\n%12 : Float(1, 7, 512) = onnx::Slice<a href=\"%11\">axes=[0], ends=[9223372036854775807], starts=[0]</a>, scope: RNNModel<br>\n%13 : Float(1!, 6, 512) = onnx::Slice<a href=\"%12\">axes=[1], ends=[-1], starts=[0]</a>, scope: RNNModel<br>\n%14 : Float(1!, 6, 512), %15 : Dynamic = onnx::Dropout<a href=\"%13\">ratio=0</a>, scope: RNNModel/Dropout[drop]<br>\n%16 : Long() = onnx::Constant<a href=\"\">value={0}</a><br>\n%17 : Dynamic = onnx::Shape(%14), scope: RNNModel/LSTM[rnn]<br>\n%18 : Long() = onnx::Gather[axis=0](%17, %16), scope: RNNModel/LSTM[rnn]<br>\n%19 : Long() = onnx::Constant<a href=\"\">value={1}</a><br>\n%20 : Long() = onnx::Constant<a href=\"\">value={1536}</a><br>\n%21 : Dynamic = onnx::Unsqueeze<a href=\"%19\">axes=[0]</a>, scope: RNNModel/LSTM[rnn]<br>\n%22 : Dynamic = onnx::Unsqueeze<a href=\"%18\">axes=[0]</a>, scope: RNNModel/LSTM[rnn]<br>\n%23 : Dynamic = onnx::Unsqueeze<a href=\"%20\">axes=[0]</a>, scope: RNNModel/LSTM[rnn]<br>\n%24 : int[] = onnx::Concat[axis=0](%21, %22, %23), scope: RNNModel/LSTM[rnn]<br>\n%25 : Float(1, 1, 1536) = onnx::ConstantFill<a href=\"%24\">dtype=1, input_as_shape=1, value=0</a>, scope: RNNModel/LSTM[rnn]<br>\n%26 : Long() = onnx::Constant<a href=\"\">value={1}</a><br>\n%27 : Long() = onnx::Constant<a href=\"\">value={1}</a><br>\n%28 : Double() = onnx::Constant<a href=\"\">value={0}</a><br>\n%29 : Long() = onnx::Constant<a href=\"\">value={0}</a><br>\n%30 : Long() = onnx::Constant<a href=\"\">value={0}</a><br>\n%31 : Long() = onnx::Constant<a href=\"\">value={1}</a><br>\n%32 : Float(1!, 6, 1536), %33 : Float(1, 1, 1536), %34 : Float(1, 1, 1536) = aten::lstm(%14, %25, %25, %learned_1, %learned_2, %learned_3, %learned_4, %26, %27, %28, %29, %30, %31), scope: RNNModel/LSTM[rnn]<br>\n%35 : Float(1!, 6, 1536), %36 : Dynamic = onnx::Dropout<a href=\"%32\">ratio=0</a>, scope: RNNModel/Dropout[drop]<br>\n%37 : Float(1536!, 512!) = onnx::Transpose<a href=\"%learned_5\">perm=[1, 0]</a>, scope: RNNModel/Linear[projection]<br>\n......<br>\n......<br>\n%55 : Dynamic = prim::Undefined(), scope: RNNModel/IndexLinear[criterion]/CrossEntropyLoss[ce]<br>\n%56 : Long() = onnx::Constant<a href=\"\">value={0}</a><br>\n%57 : Long() = onnx::Constant<a href=\"\">value={-100}</a><br>\n%58 : Float(6) = aten::nll_loss(%54, %53, %55, %56, %57), scope: RNNModel/IndexLinear[criterion]/CrossEntropyLoss[ce]<br>\n%output : Float(1, 6) = aten::view_as(%58, %40), scope: RNNModel/IndexLinear[criterion]<br>\nreturn (%output);<br>\n}<br>\nthe error of the op is  \"%11 : Float(1, 7, 512) = ^Transfer(None)(%10), scope: RNNModel\"</p>", "body_text": "I am trying to export a pretrained pytorch model to onnx format. I got an error as following:\nGraph we tried to export:\ngraph(%input_1 : Long(1, 7)\n%input_2 : Long(1)\n%learned_0 : Float(118427, 512)\n%learned_1 : Float(6144, 512)\n%learned_2 : Float(6144, 1536)\n%learned_3 : Float(6144)\n%learned_4 : Float(6144)\n%learned_5 : Float(512, 1536)\n%learned_6 : Float(118427)\n%learned_7 : Float(118427)) {\n%10 : Float(1, 7, 512) = onnx::Gather(%learned_0, %input_1), scope: RNNModel/Embedding[encoder]\n%11 : Float(1, 7, 512) = ^Transfer(None)(%10), scope: RNNModel\n%12 : Float(1, 7, 512) = onnx::Sliceaxes=[0], ends=[9223372036854775807], starts=[0], scope: RNNModel\n%13 : Float(1!, 6, 512) = onnx::Sliceaxes=[1], ends=[-1], starts=[0], scope: RNNModel\n%14 : Float(1!, 6, 512), %15 : Dynamic = onnx::Dropoutratio=0, scope: RNNModel/Dropout[drop]\n%16 : Long() = onnx::Constantvalue={0}\n%17 : Dynamic = onnx::Shape(%14), scope: RNNModel/LSTM[rnn]\n%18 : Long() = onnx::Gather[axis=0](%17, %16), scope: RNNModel/LSTM[rnn]\n%19 : Long() = onnx::Constantvalue={1}\n%20 : Long() = onnx::Constantvalue={1536}\n%21 : Dynamic = onnx::Unsqueezeaxes=[0], scope: RNNModel/LSTM[rnn]\n%22 : Dynamic = onnx::Unsqueezeaxes=[0], scope: RNNModel/LSTM[rnn]\n%23 : Dynamic = onnx::Unsqueezeaxes=[0], scope: RNNModel/LSTM[rnn]\n%24 : int[] = onnx::Concat[axis=0](%21, %22, %23), scope: RNNModel/LSTM[rnn]\n%25 : Float(1, 1, 1536) = onnx::ConstantFilldtype=1, input_as_shape=1, value=0, scope: RNNModel/LSTM[rnn]\n%26 : Long() = onnx::Constantvalue={1}\n%27 : Long() = onnx::Constantvalue={1}\n%28 : Double() = onnx::Constantvalue={0}\n%29 : Long() = onnx::Constantvalue={0}\n%30 : Long() = onnx::Constantvalue={0}\n%31 : Long() = onnx::Constantvalue={1}\n%32 : Float(1!, 6, 1536), %33 : Float(1, 1, 1536), %34 : Float(1, 1, 1536) = aten::lstm(%14, %25, %25, %learned_1, %learned_2, %learned_3, %learned_4, %26, %27, %28, %29, %30, %31), scope: RNNModel/LSTM[rnn]\n%35 : Float(1!, 6, 1536), %36 : Dynamic = onnx::Dropoutratio=0, scope: RNNModel/Dropout[drop]\n%37 : Float(1536!, 512!) = onnx::Transposeperm=[1, 0], scope: RNNModel/Linear[projection]\n......\n......\n%55 : Dynamic = prim::Undefined(), scope: RNNModel/IndexLinear[criterion]/CrossEntropyLoss[ce]\n%56 : Long() = onnx::Constantvalue={0}\n%57 : Long() = onnx::Constantvalue={-100}\n%58 : Float(6) = aten::nll_loss(%54, %53, %55, %56, %57), scope: RNNModel/IndexLinear[criterion]/CrossEntropyLoss[ce]\n%output : Float(1, 6) = aten::view_as(%58, %40), scope: RNNModel/IndexLinear[criterion]\nreturn (%output);\n}\nthe error of the op is  \"%11 : Float(1, 7, 512) = ^Transfer(None)(%10), scope: RNNModel\"", "body": "I am trying to export a pretrained pytorch model to onnx format. I got an error as following:\r\nGraph we tried to export:\r\ngraph(%input_1 : Long(1, 7)\r\n      %input_2 : Long(1)\r\n      %learned_0 : Float(118427, 512)\r\n      %learned_1 : Float(6144, 512)\r\n      %learned_2 : Float(6144, 1536)\r\n      %learned_3 : Float(6144)\r\n      %learned_4 : Float(6144)\r\n      %learned_5 : Float(512, 1536)\r\n      %learned_6 : Float(118427)\r\n      %learned_7 : Float(118427)) {\r\n  %10 : Float(1, 7, 512) = onnx::Gather(%learned_0, %input_1), scope: RNNModel/Embedding[encoder]\r\n  %11 : Float(1, 7, 512) = ^Transfer(None)(%10), scope: RNNModel\r\n  %12 : Float(1, 7, 512) = onnx::Slice[axes=[0], ends=[9223372036854775807], starts=[0]](%11), scope: RNNModel\r\n  %13 : Float(1!, 6, 512) = onnx::Slice[axes=[1], ends=[-1], starts=[0]](%12), scope: RNNModel\r\n  %14 : Float(1!, 6, 512), %15 : Dynamic = onnx::Dropout[ratio=0](%13), scope: RNNModel/Dropout[drop]\r\n  %16 : Long() = onnx::Constant[value={0}]()\r\n  %17 : Dynamic = onnx::Shape(%14), scope: RNNModel/LSTM[rnn]\r\n  %18 : Long() = onnx::Gather[axis=0](%17, %16), scope: RNNModel/LSTM[rnn]\r\n  %19 : Long() = onnx::Constant[value={1}]()\r\n  %20 : Long() = onnx::Constant[value={1536}]()\r\n  %21 : Dynamic = onnx::Unsqueeze[axes=[0]](%19), scope: RNNModel/LSTM[rnn]\r\n  %22 : Dynamic = onnx::Unsqueeze[axes=[0]](%18), scope: RNNModel/LSTM[rnn]\r\n  %23 : Dynamic = onnx::Unsqueeze[axes=[0]](%20), scope: RNNModel/LSTM[rnn]\r\n  %24 : int[] = onnx::Concat[axis=0](%21, %22, %23), scope: RNNModel/LSTM[rnn]\r\n  %25 : Float(1, 1, 1536) = onnx::ConstantFill[dtype=1, input_as_shape=1, value=0](%24), scope: RNNModel/LSTM[rnn]\r\n  %26 : Long() = onnx::Constant[value={1}]()\r\n  %27 : Long() = onnx::Constant[value={1}]()\r\n  %28 : Double() = onnx::Constant[value={0}]()\r\n  %29 : Long() = onnx::Constant[value={0}]()\r\n  %30 : Long() = onnx::Constant[value={0}]()\r\n  %31 : Long() = onnx::Constant[value={1}]()\r\n  %32 : Float(1!, 6, 1536), %33 : Float(1, 1, 1536), %34 : Float(1, 1, 1536) = aten::lstm(%14, %25, %25, %learned_1, %learned_2, %learned_3, %learned_4, %26, %27, %28, %29, %30, %31), scope: RNNModel/LSTM[rnn]\r\n  %35 : Float(1!, 6, 1536), %36 : Dynamic = onnx::Dropout[ratio=0](%32), scope: RNNModel/Dropout[drop]\r\n  %37 : Float(1536!, 512!) = onnx::Transpose[perm=[1, 0]](%learned_5), scope: RNNModel/Linear[projection]\r\n  ......\r\n  ......\r\n  %55 : Dynamic = prim::Undefined(), scope: RNNModel/IndexLinear[criterion]/CrossEntropyLoss[ce]\r\n  %56 : Long() = onnx::Constant[value={0}]()\r\n  %57 : Long() = onnx::Constant[value={-100}]()\r\n  %58 : Float(6) = aten::nll_loss(%54, %53, %55, %56, %57), scope: RNNModel/IndexLinear[criterion]/CrossEntropyLoss[ce]\r\n  %output : Float(1, 6) = aten::view_as(%58, %40), scope: RNNModel/IndexLinear[criterion]\r\n  return (%output);\r\n}\r\nthe error of the op is  \"%11 : Float(1, 7, 512) = ^Transfer(None)(%10), scope: RNNModel\""}