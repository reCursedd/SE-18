{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/151634741", "pull_request_review_id": 77374436, "id": 151634741, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MTYzNDc0MQ==", "diff_hunk": "@@ -27,6 +27,69 @@ std::vector<Tensor> split(const Tensor& self, int64_t split_size, int64_t dim) {\n   return splits;\n }\n \n+Tensor slice(const Tensor& self, int64_t start, int64_t end, int64_t step, int64_t dim) {\n+  dim = maybe_wrap_dim(dim, self.dim());\n+  auto sizes = std::vector<int64_t>(self.sizes());\n+  auto strides = std::vector<int64_t>(self.strides());\n+  if (step <= 0) {\n+    // TODO: support negative strides\n+    throw std::runtime_error(\"slice step must be positive\");\n+  }\n+  if (start < 0) {\n+    start += sizes[dim];\n+  }\n+  if (end < 0) {\n+    end += sizes[dim];\n+  }\n+  if (start < 0) {\n+    start = 0;\n+  } else if (start >= sizes[dim]) {\n+    start = sizes[dim];\n+  }\n+  if (end < start) {\n+    end = start;\n+  } else if (end >= sizes[dim]) {\n+    end = sizes[dim];\n+  }\n+  auto storage_offset = self.storage_offset() + start * strides[dim];\n+  auto len = end - start;\n+  sizes[dim] = (len + step - 1) / step;  // round-up\n+  strides[dim] *= step;\n+  return self.as_strided(sizes, strides, storage_offset);\n+}\n+\n+Tensor narrow(const Tensor& self, int64_t dim, int64_t start, int64_t length) {\n+  dim = maybe_wrap_dim(dim, self.dim());\n+  auto cur_size = self.size(dim);\n+  if (start < 0 || start >= cur_size) {\n+    runtime_error(\"start out of range\");\n+  }\n+  if (length <= 0 || start > cur_size - length) {\n+    runtime_error(\"length out of range\");\n+  }", "path": "aten/src/ATen/native/NativeFunctions.cpp", "position": 45, "original_position": 43, "commit_id": "b97a8df8b9d64f38df4d7ef1165282557606bcda", "original_commit_id": "23c219f2b34652456352354c14af89fea24ac4d8", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "These checks are also needed in slice. Maybe just move all of them there and make narrow a single call to slice?", "created_at": "2017-11-17T09:15:20Z", "updated_at": "2018-11-23T15:36:38Z", "html_url": "https://github.com/pytorch/pytorch/pull/3750#discussion_r151634741", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/3750", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/151634741"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/3750#discussion_r151634741"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/3750"}}, "body_html": "<p>These checks are also needed in slice. Maybe just move all of them there and make narrow a single call to slice?</p>", "body_text": "These checks are also needed in slice. Maybe just move all of them there and make narrow a single call to slice?"}