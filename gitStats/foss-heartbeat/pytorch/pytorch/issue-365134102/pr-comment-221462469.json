{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/221462469", "pull_request_review_id": 160117905, "id": 221462469, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyMTQ2MjQ2OQ==", "diff_hunk": "@@ -52,4 +52,11 @@ Tensor _pdist_backward(const Tensor& grad, const Tensor& self, const double p, c\n   return result;\n }\n \n+Tensor cosine_similarity(const Tensor& x1, const Tensor& x2, int64_t dim, double eps) {\n+  Tensor w12 = at::sum(x1 * x2, dim);\n+  Tensor w1 = at::norm(x1, 2, dim);\n+  Tensor w2 = at::norm(x2, 2, dim);\n+  return w12 / (w1 * w2).clamp_min(eps);", "path": "aten/src/ATen/native/Distance.cpp", "position": null, "original_position": 8, "commit_id": "bd470724fc520715c31f44b6a993dfd5a277a72e", "original_commit_id": "54336338fd7ec014c048542a8277f66d98a0a422", "user": {"login": "zasdfgbnm", "id": 1032377, "node_id": "MDQ6VXNlcjEwMzIzNzc=", "avatar_url": "https://avatars2.githubusercontent.com/u/1032377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zasdfgbnm", "html_url": "https://github.com/zasdfgbnm", "followers_url": "https://api.github.com/users/zasdfgbnm/followers", "following_url": "https://api.github.com/users/zasdfgbnm/following{/other_user}", "gists_url": "https://api.github.com/users/zasdfgbnm/gists{/gist_id}", "starred_url": "https://api.github.com/users/zasdfgbnm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zasdfgbnm/subscriptions", "organizations_url": "https://api.github.com/users/zasdfgbnm/orgs", "repos_url": "https://api.github.com/users/zasdfgbnm/repos", "events_url": "https://api.github.com/users/zasdfgbnm/events{/privacy}", "received_events_url": "https://api.github.com/users/zasdfgbnm/received_events", "type": "User", "site_admin": false}, "body": "This need to be very careful, because sometimes inplace operators make it impossible to go backward:\r\n\r\n```python\r\nimport torch\r\n\r\nx1 = torch.rand(100, 20, requires_grad=True)\r\nx2 = torch.rand(100, 20, requires_grad=True)\r\n\r\ntry:\r\n    def cs(x1, x2, dim=1, eps=1e-8):\r\n        w12 = torch.sum(x1 * x2, dim)\r\n        w1 = torch.norm(x1, 2, dim)\r\n        w2 = torch.norm(x2, 2, dim)\r\n        return w12 / (w1 * w2).clamp_min(eps)\r\n\r\n    loss = cs(x1, x2).sum()\r\n    loss.backward()\r\n    print('1 works')\r\nexcept:\r\n    print('1 does not work')\r\n\r\n\r\ntry:\r\n    def cs2(x1, x2, dim=1, eps=1e-8):\r\n        w12 = torch.sum(x1 * x2, dim)\r\n        w1 = torch.norm(x1, 2, dim)\r\n        w2 = torch.norm(x2, 2, dim)\r\n        return w12.div_((w1 * w2).clamp_min(eps))\r\n\r\n    loss = cs2(x1, x2).sum()\r\n    loss.backward()\r\n    print('2 works')\r\nexcept:\r\n    print('2 does not work')\r\n\r\n\r\ntry:\r\n    def cs3(x1, x2, dim=1, eps=1e-8):\r\n        w12 = torch.sum(x1 * x2, dim)\r\n        w1 = torch.norm(x1, 2, dim)\r\n        w2 = torch.norm(x2, 2, dim)\r\n        return w12 / ((w1.mul_(w2)).clamp_min(eps))\r\n\r\n    loss = cs3(x1, x2).sum()\r\n    loss.backward()\r\n    print('3 works')\r\nexcept:\r\n    print('3 does not work')\r\n\r\n\r\ntry:\r\n    def cs4(x1, x2, dim=1, eps=1e-8):\r\n        w12 = torch.sum(x1 * x2, dim)\r\n        w1 = torch.norm(x1, 2, dim)\r\n        w2 = torch.norm(x2, 2, dim)\r\n        return w12 / (w1 * w2).clamp_min_(eps)\r\n\r\n    loss = cs4(x1, x2).sum()\r\n    loss.backward()\r\n    print('4 works')\r\nexcept:\r\n    print('4 does not works')\r\n\r\n\r\ntry:\r\n    def cs5(x1, x2, dim=1, eps=1e-8):\r\n        w12 = torch.sum(x1 * x2, dim)\r\n        w1 = torch.norm(x1, 2, dim)\r\n        w2 = torch.norm(x2, 2, dim)\r\n        return w12.div_((w1.mul_(w2)).clamp_min_(eps))\r\n\r\n    loss = cs5(x1, x2).sum()\r\n    loss.backward()\r\n    print('5 works')\r\nexcept:\r\n    print('5 does not works')\r\n\r\n\r\ntry:\r\n    def cs6(x1, x2, dim=1, eps=1e-8):\r\n        w12 = torch.sum(x1 * x2, dim)\r\n        w1 = torch.norm(x1, 2, dim)\r\n        w2 = torch.norm(x2, 2, dim)\r\n        return w12.div_((w1 * w2).clamp_min_(eps))\r\n\r\n    loss = cs6(x1, x2).sum()\r\n    loss.backward()\r\n    print('6 works')\r\nexcept:\r\n    print('6 does not works')\r\n```\r\n\r\ngives\r\n\r\n```\r\n1 works\r\n2 works\r\n3 does not work\r\n4 works\r\n5 does not works\r\n6 works\r\n```", "created_at": "2018-09-30T15:08:20Z", "updated_at": "2018-11-23T15:52:10Z", "html_url": "https://github.com/pytorch/pytorch/pull/12199#discussion_r221462469", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/12199", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/221462469"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/12199#discussion_r221462469"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/12199"}}, "body_html": "<p>This need to be very careful, because sometimes inplace operators make it impossible to go backward:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> torch\n\nx1 <span class=\"pl-k\">=</span> torch.rand(<span class=\"pl-c1\">100</span>, <span class=\"pl-c1\">20</span>, <span class=\"pl-v\">requires_grad</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>)\nx2 <span class=\"pl-k\">=</span> torch.rand(<span class=\"pl-c1\">100</span>, <span class=\"pl-c1\">20</span>, <span class=\"pl-v\">requires_grad</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>)\n\n<span class=\"pl-k\">try</span>:\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">cs</span>(<span class=\"pl-smi\">x1</span>, <span class=\"pl-smi\">x2</span>, <span class=\"pl-smi\">dim</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">1</span>, <span class=\"pl-smi\">eps</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">1e-8</span>):\n        w12 <span class=\"pl-k\">=</span> torch.sum(x1 <span class=\"pl-k\">*</span> x2, dim)\n        w1 <span class=\"pl-k\">=</span> torch.norm(x1, <span class=\"pl-c1\">2</span>, dim)\n        w2 <span class=\"pl-k\">=</span> torch.norm(x2, <span class=\"pl-c1\">2</span>, dim)\n        <span class=\"pl-k\">return</span> w12 <span class=\"pl-k\">/</span> (w1 <span class=\"pl-k\">*</span> w2).clamp_min(eps)\n\n    loss <span class=\"pl-k\">=</span> cs(x1, x2).sum()\n    loss.backward()\n    <span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>1 works<span class=\"pl-pds\">'</span></span>)\n<span class=\"pl-k\">except</span>:\n    <span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>1 does not work<span class=\"pl-pds\">'</span></span>)\n\n\n<span class=\"pl-k\">try</span>:\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">cs2</span>(<span class=\"pl-smi\">x1</span>, <span class=\"pl-smi\">x2</span>, <span class=\"pl-smi\">dim</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">1</span>, <span class=\"pl-smi\">eps</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">1e-8</span>):\n        w12 <span class=\"pl-k\">=</span> torch.sum(x1 <span class=\"pl-k\">*</span> x2, dim)\n        w1 <span class=\"pl-k\">=</span> torch.norm(x1, <span class=\"pl-c1\">2</span>, dim)\n        w2 <span class=\"pl-k\">=</span> torch.norm(x2, <span class=\"pl-c1\">2</span>, dim)\n        <span class=\"pl-k\">return</span> w12.div_((w1 <span class=\"pl-k\">*</span> w2).clamp_min(eps))\n\n    loss <span class=\"pl-k\">=</span> cs2(x1, x2).sum()\n    loss.backward()\n    <span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>2 works<span class=\"pl-pds\">'</span></span>)\n<span class=\"pl-k\">except</span>:\n    <span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>2 does not work<span class=\"pl-pds\">'</span></span>)\n\n\n<span class=\"pl-k\">try</span>:\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">cs3</span>(<span class=\"pl-smi\">x1</span>, <span class=\"pl-smi\">x2</span>, <span class=\"pl-smi\">dim</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">1</span>, <span class=\"pl-smi\">eps</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">1e-8</span>):\n        w12 <span class=\"pl-k\">=</span> torch.sum(x1 <span class=\"pl-k\">*</span> x2, dim)\n        w1 <span class=\"pl-k\">=</span> torch.norm(x1, <span class=\"pl-c1\">2</span>, dim)\n        w2 <span class=\"pl-k\">=</span> torch.norm(x2, <span class=\"pl-c1\">2</span>, dim)\n        <span class=\"pl-k\">return</span> w12 <span class=\"pl-k\">/</span> ((w1.mul_(w2)).clamp_min(eps))\n\n    loss <span class=\"pl-k\">=</span> cs3(x1, x2).sum()\n    loss.backward()\n    <span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>3 works<span class=\"pl-pds\">'</span></span>)\n<span class=\"pl-k\">except</span>:\n    <span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>3 does not work<span class=\"pl-pds\">'</span></span>)\n\n\n<span class=\"pl-k\">try</span>:\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">cs4</span>(<span class=\"pl-smi\">x1</span>, <span class=\"pl-smi\">x2</span>, <span class=\"pl-smi\">dim</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">1</span>, <span class=\"pl-smi\">eps</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">1e-8</span>):\n        w12 <span class=\"pl-k\">=</span> torch.sum(x1 <span class=\"pl-k\">*</span> x2, dim)\n        w1 <span class=\"pl-k\">=</span> torch.norm(x1, <span class=\"pl-c1\">2</span>, dim)\n        w2 <span class=\"pl-k\">=</span> torch.norm(x2, <span class=\"pl-c1\">2</span>, dim)\n        <span class=\"pl-k\">return</span> w12 <span class=\"pl-k\">/</span> (w1 <span class=\"pl-k\">*</span> w2).clamp_min_(eps)\n\n    loss <span class=\"pl-k\">=</span> cs4(x1, x2).sum()\n    loss.backward()\n    <span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>4 works<span class=\"pl-pds\">'</span></span>)\n<span class=\"pl-k\">except</span>:\n    <span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>4 does not works<span class=\"pl-pds\">'</span></span>)\n\n\n<span class=\"pl-k\">try</span>:\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">cs5</span>(<span class=\"pl-smi\">x1</span>, <span class=\"pl-smi\">x2</span>, <span class=\"pl-smi\">dim</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">1</span>, <span class=\"pl-smi\">eps</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">1e-8</span>):\n        w12 <span class=\"pl-k\">=</span> torch.sum(x1 <span class=\"pl-k\">*</span> x2, dim)\n        w1 <span class=\"pl-k\">=</span> torch.norm(x1, <span class=\"pl-c1\">2</span>, dim)\n        w2 <span class=\"pl-k\">=</span> torch.norm(x2, <span class=\"pl-c1\">2</span>, dim)\n        <span class=\"pl-k\">return</span> w12.div_((w1.mul_(w2)).clamp_min_(eps))\n\n    loss <span class=\"pl-k\">=</span> cs5(x1, x2).sum()\n    loss.backward()\n    <span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>5 works<span class=\"pl-pds\">'</span></span>)\n<span class=\"pl-k\">except</span>:\n    <span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>5 does not works<span class=\"pl-pds\">'</span></span>)\n\n\n<span class=\"pl-k\">try</span>:\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">cs6</span>(<span class=\"pl-smi\">x1</span>, <span class=\"pl-smi\">x2</span>, <span class=\"pl-smi\">dim</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">1</span>, <span class=\"pl-smi\">eps</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">1e-8</span>):\n        w12 <span class=\"pl-k\">=</span> torch.sum(x1 <span class=\"pl-k\">*</span> x2, dim)\n        w1 <span class=\"pl-k\">=</span> torch.norm(x1, <span class=\"pl-c1\">2</span>, dim)\n        w2 <span class=\"pl-k\">=</span> torch.norm(x2, <span class=\"pl-c1\">2</span>, dim)\n        <span class=\"pl-k\">return</span> w12.div_((w1 <span class=\"pl-k\">*</span> w2).clamp_min_(eps))\n\n    loss <span class=\"pl-k\">=</span> cs6(x1, x2).sum()\n    loss.backward()\n    <span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>6 works<span class=\"pl-pds\">'</span></span>)\n<span class=\"pl-k\">except</span>:\n    <span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>6 does not works<span class=\"pl-pds\">'</span></span>)</pre></div>\n<p>gives</p>\n<pre><code>1 works\n2 works\n3 does not work\n4 works\n5 does not works\n6 works\n</code></pre>", "body_text": "This need to be very careful, because sometimes inplace operators make it impossible to go backward:\nimport torch\n\nx1 = torch.rand(100, 20, requires_grad=True)\nx2 = torch.rand(100, 20, requires_grad=True)\n\ntry:\n    def cs(x1, x2, dim=1, eps=1e-8):\n        w12 = torch.sum(x1 * x2, dim)\n        w1 = torch.norm(x1, 2, dim)\n        w2 = torch.norm(x2, 2, dim)\n        return w12 / (w1 * w2).clamp_min(eps)\n\n    loss = cs(x1, x2).sum()\n    loss.backward()\n    print('1 works')\nexcept:\n    print('1 does not work')\n\n\ntry:\n    def cs2(x1, x2, dim=1, eps=1e-8):\n        w12 = torch.sum(x1 * x2, dim)\n        w1 = torch.norm(x1, 2, dim)\n        w2 = torch.norm(x2, 2, dim)\n        return w12.div_((w1 * w2).clamp_min(eps))\n\n    loss = cs2(x1, x2).sum()\n    loss.backward()\n    print('2 works')\nexcept:\n    print('2 does not work')\n\n\ntry:\n    def cs3(x1, x2, dim=1, eps=1e-8):\n        w12 = torch.sum(x1 * x2, dim)\n        w1 = torch.norm(x1, 2, dim)\n        w2 = torch.norm(x2, 2, dim)\n        return w12 / ((w1.mul_(w2)).clamp_min(eps))\n\n    loss = cs3(x1, x2).sum()\n    loss.backward()\n    print('3 works')\nexcept:\n    print('3 does not work')\n\n\ntry:\n    def cs4(x1, x2, dim=1, eps=1e-8):\n        w12 = torch.sum(x1 * x2, dim)\n        w1 = torch.norm(x1, 2, dim)\n        w2 = torch.norm(x2, 2, dim)\n        return w12 / (w1 * w2).clamp_min_(eps)\n\n    loss = cs4(x1, x2).sum()\n    loss.backward()\n    print('4 works')\nexcept:\n    print('4 does not works')\n\n\ntry:\n    def cs5(x1, x2, dim=1, eps=1e-8):\n        w12 = torch.sum(x1 * x2, dim)\n        w1 = torch.norm(x1, 2, dim)\n        w2 = torch.norm(x2, 2, dim)\n        return w12.div_((w1.mul_(w2)).clamp_min_(eps))\n\n    loss = cs5(x1, x2).sum()\n    loss.backward()\n    print('5 works')\nexcept:\n    print('5 does not works')\n\n\ntry:\n    def cs6(x1, x2, dim=1, eps=1e-8):\n        w12 = torch.sum(x1 * x2, dim)\n        w1 = torch.norm(x1, 2, dim)\n        w2 = torch.norm(x2, 2, dim)\n        return w12.div_((w1 * w2).clamp_min_(eps))\n\n    loss = cs6(x1, x2).sum()\n    loss.backward()\n    print('6 works')\nexcept:\n    print('6 does not works')\ngives\n1 works\n2 works\n3 does not work\n4 works\n5 does not works\n6 works", "in_reply_to_id": 221447901}