{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/157330473", "pull_request_review_id": 83962380, "id": 157330473, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NzMzMDQ3Mw==", "diff_hunk": "@@ -69,7 +69,8 @@ def _worker_manager_loop(in_queue, out_queue, done_event, pin_memory):\n             continue\n         idx, batch = r\n         try:\n-            if pin_memory:\n+            if pin_memory and torch.cuda.is_available():\n+                torch.cuda.set_device(device_id)", "path": "torch/utils/data/dataloader.py", "position": null, "original_position": 15, "commit_id": "a902c0c50cd26c9497c8a8df4f28887b1bd1f145", "original_commit_id": "21180e9de889e5fffce16768161b0cbf41af39d5", "user": {"login": "ngimel", "id": 15841449, "node_id": "MDQ6VXNlcjE1ODQxNDQ5", "avatar_url": "https://avatars3.githubusercontent.com/u/15841449?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ngimel", "html_url": "https://github.com/ngimel", "followers_url": "https://api.github.com/users/ngimel/followers", "following_url": "https://api.github.com/users/ngimel/following{/other_user}", "gists_url": "https://api.github.com/users/ngimel/gists{/gist_id}", "starred_url": "https://api.github.com/users/ngimel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ngimel/subscriptions", "organizations_url": "https://api.github.com/users/ngimel/orgs", "repos_url": "https://api.github.com/users/ngimel/repos", "events_url": "https://api.github.com/users/ngimel/events{/privacy}", "received_events_url": "https://api.github.com/users/ngimel/received_events", "type": "User", "site_admin": false}, "body": "The joys of default context creation :-) Pinned memory is not GPU specific (as in, if it is pinned it can be asynchronously transferred to any GPU), but a call to cudaHostAlloc will initialize context on the default device. So, if one runs distributed on a single node, with multi-process dataloader, even though one would set appropriate device in the main process, dataloader processes would initialize context on device 0.  ", "created_at": "2017-12-16T01:47:47Z", "updated_at": "2018-11-23T15:37:28Z", "html_url": "https://github.com/pytorch/pytorch/pull/4196#discussion_r157330473", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4196", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/157330473"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/4196#discussion_r157330473"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4196"}}, "body_html": "<p>The joys of default context creation :-) Pinned memory is not GPU specific (as in, if it is pinned it can be asynchronously transferred to any GPU), but a call to cudaHostAlloc will initialize context on the default device. So, if one runs distributed on a single node, with multi-process dataloader, even though one would set appropriate device in the main process, dataloader processes would initialize context on device 0.</p>", "body_text": "The joys of default context creation :-) Pinned memory is not GPU specific (as in, if it is pinned it can be asynchronously transferred to any GPU), but a call to cudaHostAlloc will initialize context on the default device. So, if one runs distributed on a single node, with multi-process dataloader, even though one would set appropriate device in the main process, dataloader processes would initialize context on device 0.", "in_reply_to_id": 157312804}