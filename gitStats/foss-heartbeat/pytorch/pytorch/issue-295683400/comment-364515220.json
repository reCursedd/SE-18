{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/364515220", "html_url": "https://github.com/pytorch/pytorch/pull/5145#issuecomment-364515220", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/5145", "id": 364515220, "node_id": "MDEyOklzc3VlQ29tbWVudDM2NDUxNTIyMA==", "user": {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, "created_at": "2018-02-09T18:20:08Z", "updated_at": "2018-02-09T18:20:08Z", "author_association": "CONTRIBUTOR", "body_html": "<p>We should add the check for match numbers, it will catch places where people change the constructor but forget the accessors before we wait for the accessor to be called.</p>\n<p>If you want views that cannot contain then wrong type then it needs to be enforced. This is the point of actually trying to make typesafe constructors. On creation a List should be checked to be the right type, but lines like this in the parser are unchecked <code>List&lt;Attribute&gt;(makeList(range, std::move(attributes))));</code>. I suggested some ways to accomplish that but really I am OK with any reasonable way that achieves it. What I want to avoid is the perception that you correctly created a LIst in the parser only to find out in an entirely different piece of code that it was never constructed correctly.</p>", "body_text": "We should add the check for match numbers, it will catch places where people change the constructor but forget the accessors before we wait for the accessor to be called.\nIf you want views that cannot contain then wrong type then it needs to be enforced. This is the point of actually trying to make typesafe constructors. On creation a List should be checked to be the right type, but lines like this in the parser are unchecked List<Attribute>(makeList(range, std::move(attributes))));. I suggested some ways to accomplish that but really I am OK with any reasonable way that achieves it. What I want to avoid is the perception that you correctly created a LIst in the parser only to find out in an entirely different piece of code that it was never constructed correctly.", "body": "We should add the check for match numbers, it will catch places where people change the constructor but forget the accessors before we wait for the accessor to be called. \r\n\r\nIf you want views that cannot contain then wrong type then it needs to be enforced. This is the point of actually trying to make typesafe constructors. On creation a List<T> should be checked to be the right type, but lines like this in the parser are unchecked `List<Attribute>(makeList(range, std::move(attributes))));`. I suggested some ways to accomplish that but really I am OK with any reasonable way that achieves it. What I want to avoid is the perception that you correctly created a LIst<T> in the parser only to find out in an entirely different piece of code that it was never constructed correctly."}