{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/167110542", "pull_request_review_id": 95282943, "id": 167110542, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NzExMDU0Mg==", "diff_hunk": "@@ -20,423 +91,422 @@ struct TreeView {\n   operator TreeRef() const {\n     return tree_;\n   }\n-\n- protected:\n-  TreeRef tree_;\n-};\n-\n-template <typename T>\n-struct ListViewIterator {\n-  ListViewIterator(TreeList::const_iterator it) : it(it) {}\n-  bool operator!=(const ListViewIterator& rhs) const {\n-    return it != rhs.it;\n-  }\n-  T operator*() const {\n-    return T(*it);\n-  }\n-  void operator++() {\n-    ++it;\n+  const TreeRef& get() const {\n+    return tree_;\n   }\n-  void operator--() {\n-    --it;\n+  int kind() const {\n+    return tree_->kind();\n   }\n \n- private:\n-  TreeList::const_iterator it;\n+protected:\n+  const TreeRef& subtree(std::size_t i) const {\n+    return tree_->trees().at(i);\n+  }\n+  TreeRef tree_;\n };\n \n template <typename T>\n-struct ListView : public TreeView {\n-  ListView(const TreeRef& tree) : TreeView(tree) {\n+struct List : public TreeView {\n+  struct Iterator {\n+    Iterator(TreeList::const_iterator it) : it(it) {}\n+    bool operator!=(const Iterator& rhs) const { return it != rhs.it; }\n+    T operator*() const { return T(*it); }\n+    void operator++() { ++it; }\n+    void operator--() { --it; }\n+\n+  private:\n+    TreeList::const_iterator it;\n+  };\n+  typedef Iterator iterator;\n+  typedef Iterator const_iterator;\n+\n+  List(const TreeRef& tree) : TreeView(tree) {\n     tree->match(TK_LIST);\n   }\n-  typedef ListViewIterator<T> iterator;\n-  typedef ListViewIterator<T> const_iterator;\n   iterator begin() const {\n     return iterator(tree_->trees().begin());\n   }\n   iterator end() const {\n     return iterator(tree_->trees().end());\n   }\n   T operator[](size_t i) const {\n-    return T(tree_->trees().at(i));\n+    return T(subtree(i));\n   }\n   TreeRef map(std::function<TreeRef(const T&)> fn) {\n     return tree_->map([&](TreeRef v) { return fn(T(v)); });\n   }\n+  static List create(const SourceRange& range, const std::vector<T>& subtrees) {\n+    TreeList type_erased_sub {subtrees.begin(), subtrees.end()};\n+    return List(Compound::create(TK_LIST, range, std::move(type_erased_sub)));\n+  }\n   size_t size() const {\n     return tree_->trees().size();\n   }\n };\n \n template <typename T>\n-struct OptionView : public TreeView {\n-  explicit OptionView(const TreeRef& tree) : TreeView(tree) {\n+struct Maybe : public TreeView {\n+  explicit Maybe(const TreeRef& tree) : TreeView(tree) {\n     JIT_SCRIPT_ASSERT(tree, tree->kind() == TK_OPTION);\n   }\n+  /* implicit */ Maybe(const T& tree) : TreeView(tree) {}\n   bool present() const {\n     return tree_->trees().size() > 0;\n   }\n   T get() const {\n-    JIT_SCRIPT_ASSERT(tree_, present());\n-    return T(tree_->trees()[0]);\n+    return T(tree_->trees().at(0));\n   }\n   TreeRef map(std::function<TreeRef(const T&)> fn) {\n     return tree_->map([&](TreeRef v) { return fn(T(v)); });\n   }\n };\n \n struct Ident : public TreeView {\n-  // each subclass of TreeView provides:\n-  // 1. a constructor that takes a TreeRef, and matches it to the right type.\n   explicit Ident(const TreeRef& tree) : TreeView(tree) {\n-    tree_->match(TK_IDENT, name_);\n+    tree_->match(TK_IDENT);\n   }\n-  // 2. accessors that get underlying information out of the object\n-  // in this case, we return the name of the identifier, and handle the\n-  // converstion to a string in the method\n   const std::string& name() const {\n-    return name_->stringValue();\n+    return subtree(0)->stringValue();\n   }\n-\n-  // 3. a static method 'create' that creates the underlying TreeRef object\n-  // for every TreeRef kind that has a TreeView, the parser always uses\n-  // (e.g.) Ident::create rather than Compound::Create, this means that\n-  // changes to the structure of Ident are always made right here rather\n-  // than both in the parser and in this code\n-  static TreeRef create(const SourceRange& range, const std::string& name) {\n-    return Compound::create(TK_IDENT, range, {String::create(name)});\n+  static Ident create(const SourceRange& range, const std::string& name) {\n+    return Ident(Compound::create(TK_IDENT, range, {String::create(name)}));\n   }\n+};\n+\n+////////////////////////////////////////////////////////////////////////////////\n+// Base types (production LHS)\n+////////////////////////////////////////////////////////////////////////////////\n+\n+struct Type : public TreeView {\n+  explicit Type(const TreeRef& tree) : TreeView(tree) {}\n+};\n \n- private:\n-  TreeRef name_;\n+struct Stmt : public TreeView {", "path": "torch/csrc/jit/script/tree_views.h", "position": 239, "original_position": 224, "commit_id": "8c4151d43a171ef849fd0ecb9638175014f8dba7", "original_commit_id": "7efe835bc23c5e72d9f076641dbc0e8ff2f47d35", "user": {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, "body": "Check that tree.kind is a valid statement token.", "created_at": "2018-02-09T00:31:44Z", "updated_at": "2018-11-23T15:39:24Z", "html_url": "https://github.com/pytorch/pytorch/pull/5145#discussion_r167110542", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/5145", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/167110542"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/5145#discussion_r167110542"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/5145"}}, "body_html": "<p>Check that tree.kind is a valid statement token.</p>", "body_text": "Check that tree.kind is a valid statement token."}