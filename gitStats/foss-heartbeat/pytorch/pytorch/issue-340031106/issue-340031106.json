{"url": "https://api.github.com/repos/pytorch/pytorch/issues/9326", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/9326/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/9326/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/9326/events", "html_url": "https://github.com/pytorch/pytorch/issues/9326", "id": 340031106, "node_id": "MDU6SXNzdWUzNDAwMzExMDY=", "number": 9326, "title": "Convolution result inconsistent [bug]", "user": {"login": "ybzhou", "id": 4228785, "node_id": "MDQ6VXNlcjQyMjg3ODU=", "avatar_url": "https://avatars0.githubusercontent.com/u/4228785?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ybzhou", "html_url": "https://github.com/ybzhou", "followers_url": "https://api.github.com/users/ybzhou/followers", "following_url": "https://api.github.com/users/ybzhou/following{/other_user}", "gists_url": "https://api.github.com/users/ybzhou/gists{/gist_id}", "starred_url": "https://api.github.com/users/ybzhou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ybzhou/subscriptions", "organizations_url": "https://api.github.com/users/ybzhou/orgs", "repos_url": "https://api.github.com/users/ybzhou/repos", "events_url": "https://api.github.com/users/ybzhou/events{/privacy}", "received_events_url": "https://api.github.com/users/ybzhou/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 443483881, "node_id": "MDU6TGFiZWw0NDM0ODM4ODE=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/todo", "name": "todo", "color": "c2e0c6", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "SsnL", "id": 5674597, "node_id": "MDQ6VXNlcjU2NzQ1OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5674597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SsnL", "html_url": "https://github.com/SsnL", "followers_url": "https://api.github.com/users/SsnL/followers", "following_url": "https://api.github.com/users/SsnL/following{/other_user}", "gists_url": "https://api.github.com/users/SsnL/gists{/gist_id}", "starred_url": "https://api.github.com/users/SsnL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SsnL/subscriptions", "organizations_url": "https://api.github.com/users/SsnL/orgs", "repos_url": "https://api.github.com/users/SsnL/repos", "events_url": "https://api.github.com/users/SsnL/events{/privacy}", "received_events_url": "https://api.github.com/users/SsnL/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "SsnL", "id": 5674597, "node_id": "MDQ6VXNlcjU2NzQ1OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5674597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SsnL", "html_url": "https://github.com/SsnL", "followers_url": "https://api.github.com/users/SsnL/followers", "following_url": "https://api.github.com/users/SsnL/following{/other_user}", "gists_url": "https://api.github.com/users/SsnL/gists{/gist_id}", "starred_url": "https://api.github.com/users/SsnL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SsnL/subscriptions", "organizations_url": "https://api.github.com/users/SsnL/orgs", "repos_url": "https://api.github.com/users/SsnL/repos", "events_url": "https://api.github.com/users/SsnL/events{/privacy}", "received_events_url": "https://api.github.com/users/SsnL/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 11, "created_at": "2018-07-10T22:38:27Z", "updated_at": "2018-08-06T17:50:26Z", "closed_at": "2018-08-06T17:50:26Z", "author_association": "NONE", "body_html": "<h2>Issue description</h2>\n<p>2d Convolution result is inconsistent when applied to the full input as compared to partial input.</p>\n<p>Provide a short description.<br>\nconvolve on a 2D in put of WxH should have the same results when convolved on the full input as compared to convolved to the partial input, if one makes sure the corresponding input is the same for the same location output at partial and full convolution.</p>\n<p>For example, if I convolve on a 180x110 image, with 11x11 filter with stride 1, the result should be a 170 x 100 output (lets call this one original output). If instead of convolving the whole image, I first convolve on the left 180x100 pixels, it should result a 170 x 90 output, which should match the 1st to 90th of the original output, i.e original[:,:90]. Then if I shift this window by 10 pixels, the resulting output should match with the 10th to 100th of the original output, i.e. original[:,10:]. However, the result does not match. See following example.</p>\n<h2>Code example</h2>\n<pre><code>import torch\nimport numpy as np\n\n\ndef test_conv():\n    print(\"test conv\")\n    with torch.no_grad():\n        W = 180\n        F = 20\n        B = 16\n        H = 110\n        x = torch.rand(B, 1, W, H)\n        conv_layers = [\n            torch.nn.Conv2d(1, F, (31, 11), (1, 1), ),\n        ]\n        conv = torch.nn.Sequential(*conv_layers)\n        conv.eval()\n        fx = conv(x)\n        print(fx.shape)\n        first_fx = conv(x[:, :, :, :100])\n        second_fx = conv(x[:, :, :, 10:])\n        for i in range(90):\n            print(i, np.array_equal(fx[:, :, :, i], first_fx[:, :, :, i]))\n        assert np.array_equal(fx[:, :, :, :90], first_fx),(\n                        \"first, diff:{}\".format(\n                            np.abs(fx[:, :, :, :90] - first_fx).max()\n                        ))\n        for i in range(90):\n            print(i, np.array_equal(fx[:, :, :, i + 10],\n                                    second_fx[:, :, :, i]))\n        assert np.array_equal(fx[:, :, :, 10:], second_fx), (\n                        \"second diff:{}\".format(\n                            np.abs(fx[:, :, :, 10:] - second_fx).max()\n                        ))\n\n\nif __name__ == '__main__':\n    torch.manual_seed(123)\n    test_conv()\n</code></pre>\n<p>print outs:</p>\n<pre><code>0 True\n1 True\n...\n81 True\n82 False\n83 False\n84 False\n85 False\n86 False\n87 False\n88 False\n89 False\n</code></pre>\n<h2>System Info</h2>\n<pre><code>PyTorch version: 0.4.0\nIs debug build: No\nCUDA used to build PyTorch: None\n\nOS: Mac OSX 10.13.5\nGCC version: (GCC) 4.8.5\nCMake version: version 3.8.1\n\nPython version: 3.6\nIs CUDA available: No\nCUDA runtime version: No CUDA\nGPU models and configuration: No CUDA\nNvidia driver version: No CUDA\ncuDNN version: No CUDA\n\nVersions of relevant libraries:\n[pip] msgpack-numpy (0.4.3)\n[pip] numpy (1.14.3)\n[pip] numpydoc (0.8.0)\n[pip] pytorch-ctc (0.1)\n[pip] torch (0.4.0)\n[pip] torchaudio (0.1)\n[pip] torchtext (0.2.1)\n[pip] torchvision (0.2.1)\n[pip] warpctc-pytorch (0.1)\n[conda] pytorch                   0.4.0           py36_cuda0.0_cudnn0.0_1    pytorch\n[conda] pytorch_ctc               0.1                       &lt;pip&gt;\n[conda] torchaudio                0.1                       &lt;pip&gt;\n[conda] torchtext                 0.2.1                     &lt;pip&gt;\n[conda] torchvision               0.2.1                    py36_1    pytorch\n[conda] warpctc_pytorch           0.1                       &lt;pip&gt;\n</code></pre>", "body_text": "Issue description\n2d Convolution result is inconsistent when applied to the full input as compared to partial input.\nProvide a short description.\nconvolve on a 2D in put of WxH should have the same results when convolved on the full input as compared to convolved to the partial input, if one makes sure the corresponding input is the same for the same location output at partial and full convolution.\nFor example, if I convolve on a 180x110 image, with 11x11 filter with stride 1, the result should be a 170 x 100 output (lets call this one original output). If instead of convolving the whole image, I first convolve on the left 180x100 pixels, it should result a 170 x 90 output, which should match the 1st to 90th of the original output, i.e original[:,:90]. Then if I shift this window by 10 pixels, the resulting output should match with the 10th to 100th of the original output, i.e. original[:,10:]. However, the result does not match. See following example.\nCode example\nimport torch\nimport numpy as np\n\n\ndef test_conv():\n    print(\"test conv\")\n    with torch.no_grad():\n        W = 180\n        F = 20\n        B = 16\n        H = 110\n        x = torch.rand(B, 1, W, H)\n        conv_layers = [\n            torch.nn.Conv2d(1, F, (31, 11), (1, 1), ),\n        ]\n        conv = torch.nn.Sequential(*conv_layers)\n        conv.eval()\n        fx = conv(x)\n        print(fx.shape)\n        first_fx = conv(x[:, :, :, :100])\n        second_fx = conv(x[:, :, :, 10:])\n        for i in range(90):\n            print(i, np.array_equal(fx[:, :, :, i], first_fx[:, :, :, i]))\n        assert np.array_equal(fx[:, :, :, :90], first_fx),(\n                        \"first, diff:{}\".format(\n                            np.abs(fx[:, :, :, :90] - first_fx).max()\n                        ))\n        for i in range(90):\n            print(i, np.array_equal(fx[:, :, :, i + 10],\n                                    second_fx[:, :, :, i]))\n        assert np.array_equal(fx[:, :, :, 10:], second_fx), (\n                        \"second diff:{}\".format(\n                            np.abs(fx[:, :, :, 10:] - second_fx).max()\n                        ))\n\n\nif __name__ == '__main__':\n    torch.manual_seed(123)\n    test_conv()\n\nprint outs:\n0 True\n1 True\n...\n81 True\n82 False\n83 False\n84 False\n85 False\n86 False\n87 False\n88 False\n89 False\n\nSystem Info\nPyTorch version: 0.4.0\nIs debug build: No\nCUDA used to build PyTorch: None\n\nOS: Mac OSX 10.13.5\nGCC version: (GCC) 4.8.5\nCMake version: version 3.8.1\n\nPython version: 3.6\nIs CUDA available: No\nCUDA runtime version: No CUDA\nGPU models and configuration: No CUDA\nNvidia driver version: No CUDA\ncuDNN version: No CUDA\n\nVersions of relevant libraries:\n[pip] msgpack-numpy (0.4.3)\n[pip] numpy (1.14.3)\n[pip] numpydoc (0.8.0)\n[pip] pytorch-ctc (0.1)\n[pip] torch (0.4.0)\n[pip] torchaudio (0.1)\n[pip] torchtext (0.2.1)\n[pip] torchvision (0.2.1)\n[pip] warpctc-pytorch (0.1)\n[conda] pytorch                   0.4.0           py36_cuda0.0_cudnn0.0_1    pytorch\n[conda] pytorch_ctc               0.1                       <pip>\n[conda] torchaudio                0.1                       <pip>\n[conda] torchtext                 0.2.1                     <pip>\n[conda] torchvision               0.2.1                    py36_1    pytorch\n[conda] warpctc_pytorch           0.1                       <pip>", "body": "## Issue description\r\n2d Convolution result is inconsistent when applied to the full input as compared to partial input.\r\n\r\nProvide a short description.\r\nconvolve on a 2D in put of WxH should have the same results when convolved on the full input as compared to convolved to the partial input, if one makes sure the corresponding input is the same for the same location output at partial and full convolution.\r\n\r\nFor example, if I convolve on a 180x110 image, with 11x11 filter with stride 1, the result should be a 170 x 100 output (lets call this one original output). If instead of convolving the whole image, I first convolve on the left 180x100 pixels, it should result a 170 x 90 output, which should match the 1st to 90th of the original output, i.e original[:,:90]. Then if I shift this window by 10 pixels, the resulting output should match with the 10th to 100th of the original output, i.e. original[:,10:]. However, the result does not match. See following example.\r\n\r\n## Code example\r\n```\r\nimport torch\r\nimport numpy as np\r\n\r\n\r\ndef test_conv():\r\n    print(\"test conv\")\r\n    with torch.no_grad():\r\n        W = 180\r\n        F = 20\r\n        B = 16\r\n        H = 110\r\n        x = torch.rand(B, 1, W, H)\r\n        conv_layers = [\r\n            torch.nn.Conv2d(1, F, (31, 11), (1, 1), ),\r\n        ]\r\n        conv = torch.nn.Sequential(*conv_layers)\r\n        conv.eval()\r\n        fx = conv(x)\r\n        print(fx.shape)\r\n        first_fx = conv(x[:, :, :, :100])\r\n        second_fx = conv(x[:, :, :, 10:])\r\n        for i in range(90):\r\n            print(i, np.array_equal(fx[:, :, :, i], first_fx[:, :, :, i]))\r\n        assert np.array_equal(fx[:, :, :, :90], first_fx),(\r\n                        \"first, diff:{}\".format(\r\n                            np.abs(fx[:, :, :, :90] - first_fx).max()\r\n                        ))\r\n        for i in range(90):\r\n            print(i, np.array_equal(fx[:, :, :, i + 10],\r\n                                    second_fx[:, :, :, i]))\r\n        assert np.array_equal(fx[:, :, :, 10:], second_fx), (\r\n                        \"second diff:{}\".format(\r\n                            np.abs(fx[:, :, :, 10:] - second_fx).max()\r\n                        ))\r\n\r\n\r\nif __name__ == '__main__':\r\n    torch.manual_seed(123)\r\n    test_conv()\r\n```\r\n\r\nprint outs:\r\n```\r\n0 True\r\n1 True\r\n...\r\n81 True\r\n82 False\r\n83 False\r\n84 False\r\n85 False\r\n86 False\r\n87 False\r\n88 False\r\n89 False\r\n```\r\n## System Info\r\n```\r\nPyTorch version: 0.4.0\r\nIs debug build: No\r\nCUDA used to build PyTorch: None\r\n\r\nOS: Mac OSX 10.13.5\r\nGCC version: (GCC) 4.8.5\r\nCMake version: version 3.8.1\r\n\r\nPython version: 3.6\r\nIs CUDA available: No\r\nCUDA runtime version: No CUDA\r\nGPU models and configuration: No CUDA\r\nNvidia driver version: No CUDA\r\ncuDNN version: No CUDA\r\n\r\nVersions of relevant libraries:\r\n[pip] msgpack-numpy (0.4.3)\r\n[pip] numpy (1.14.3)\r\n[pip] numpydoc (0.8.0)\r\n[pip] pytorch-ctc (0.1)\r\n[pip] torch (0.4.0)\r\n[pip] torchaudio (0.1)\r\n[pip] torchtext (0.2.1)\r\n[pip] torchvision (0.2.1)\r\n[pip] warpctc-pytorch (0.1)\r\n[conda] pytorch                   0.4.0           py36_cuda0.0_cudnn0.0_1    pytorch\r\n[conda] pytorch_ctc               0.1                       <pip>\r\n[conda] torchaudio                0.1                       <pip>\r\n[conda] torchtext                 0.2.1                     <pip>\r\n[conda] torchvision               0.2.1                    py36_1    pytorch\r\n[conda] warpctc_pytorch           0.1                       <pip>\r\n```\r\n"}