{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/342646079", "html_url": "https://github.com/pytorch/pytorch/pull/3371#issuecomment-342646079", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/3371", "id": 342646079, "node_id": "MDEyOklzc3VlQ29tbWVudDM0MjY0NjA3OQ==", "user": {"login": "anderspapitto", "id": 1388690, "node_id": "MDQ6VXNlcjEzODg2OTA=", "avatar_url": "https://avatars3.githubusercontent.com/u/1388690?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anderspapitto", "html_url": "https://github.com/anderspapitto", "followers_url": "https://api.github.com/users/anderspapitto/followers", "following_url": "https://api.github.com/users/anderspapitto/following{/other_user}", "gists_url": "https://api.github.com/users/anderspapitto/gists{/gist_id}", "starred_url": "https://api.github.com/users/anderspapitto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anderspapitto/subscriptions", "organizations_url": "https://api.github.com/users/anderspapitto/orgs", "repos_url": "https://api.github.com/users/anderspapitto/repos", "events_url": "https://api.github.com/users/anderspapitto/events{/privacy}", "received_events_url": "https://api.github.com/users/anderspapitto/received_events", "type": "User", "site_admin": false}, "created_at": "2017-11-07T22:32:39Z", "updated_at": "2017-11-07T22:32:39Z", "author_association": "MEMBER", "body_html": "<p>I put some more thought into this, and changed the interface again.</p>\n<p>My primary reasoning is \"this feature is a minor convenience, and it's not worth much complexity\".</p>\n<p>Storing both a pretty_name and a unique_name, automatically appending suffixes - these aren't worth the complexity (for example, a pretty_name_ set on node A with an automatic suffix appended could conflict with a unique_name_ set on node B).</p>\n<p>Now there's one name stored, and it's stored exactly as you set it, and there's only two rules</p>\n<ul>\n<li>everything is unique</li>\n<li>names can't be integers</li>\n</ul>\n<p>I'm open to more discussion and/or going back to how it was, though at this point I'd rather just drop the Variable(name=...) feature entirely than have it operate through a slightly-different mechanism from export() like it was doing before.</p>", "body_text": "I put some more thought into this, and changed the interface again.\nMy primary reasoning is \"this feature is a minor convenience, and it's not worth much complexity\".\nStoring both a pretty_name and a unique_name, automatically appending suffixes - these aren't worth the complexity (for example, a pretty_name_ set on node A with an automatic suffix appended could conflict with a unique_name_ set on node B).\nNow there's one name stored, and it's stored exactly as you set it, and there's only two rules\n\neverything is unique\nnames can't be integers\n\nI'm open to more discussion and/or going back to how it was, though at this point I'd rather just drop the Variable(name=...) feature entirely than have it operate through a slightly-different mechanism from export() like it was doing before.", "body": "I put some more thought into this, and changed the interface again.\r\n\r\nMy primary reasoning is \"this feature is a minor convenience, and it's not worth much complexity\".\r\n\r\nStoring both a pretty_name and a unique_name, automatically appending suffixes - these aren't worth the complexity (for example, a pretty_name_ set on node A with an automatic suffix appended could conflict with a unique_name_ set on node B).\r\n\r\nNow there's one name stored, and it's stored exactly as you set it, and there's only two rules\r\n- everything is unique\r\n- names can't be integers\r\n\r\nI'm open to more discussion and/or going back to how it was, though at this point I'd rather just drop the Variable(name=...) feature entirely than have it operate through a slightly-different mechanism from export() like it was doing before."}