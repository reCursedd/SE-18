{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/232002171", "pull_request_review_id": 173093248, "id": 232002171, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMjAwMjE3MQ==", "diff_hunk": "@@ -0,0 +1,36 @@\n+#pragma once\n+\n+#include <c10/util/Exception.h>\n+#include <torch/data/datasets/base.h>\n+#include <torch/data/example.h>\n+\n+namespace torch {\n+namespace data {\n+namespace datasets {\n+/// A dataset that supports loading an entire chunk of data.\n+///\n+/// A chunk could be an entire file, such as an audio data file or an image,\n+/// or part of a file in the case of a large text file split based on seek\n+/// positions. ChunkDataSet extends the DataSet functionality to read an\n+/// entire chunk at once.\n+template <\n+    typename Self,\n+    typename Batch = std::vector<Example<>>,\n+    typename BatchRequest = ArrayRef<size_t>>\n+class ChunkDataSet : public BatchDataset<Self, Batch, BatchRequest> {", "path": "torch/csrc/api/include/torch/data/datasets/chunk.h", "position": 20, "original_position": 20, "commit_id": "41208e442f929e8883fd0359e14f0d98466e0c85", "original_commit_id": "880aeebda0f9be2118eb95f99e50d9d620e7b43b", "user": {"login": "goldsborough", "id": 6429851, "node_id": "MDQ6VXNlcjY0Mjk4NTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/6429851?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goldsborough", "html_url": "https://github.com/goldsborough", "followers_url": "https://api.github.com/users/goldsborough/followers", "following_url": "https://api.github.com/users/goldsborough/following{/other_user}", "gists_url": "https://api.github.com/users/goldsborough/gists{/gist_id}", "starred_url": "https://api.github.com/users/goldsborough/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goldsborough/subscriptions", "organizations_url": "https://api.github.com/users/goldsborough/orgs", "repos_url": "https://api.github.com/users/goldsborough/repos", "events_url": "https://api.github.com/users/goldsborough/events{/privacy}", "received_events_url": "https://api.github.com/users/goldsborough/received_events", "type": "User", "site_admin": false}, "body": "I don't think this class is necessary. The point of my PR to generalize the index type, https://github.com/pytorch/pytorch/pull/12960, was to allow you to create chunk datasets since you can just subclass `BatchDataset` and set the `BatchRequest` type to whatever you need. That's what confuses me about this whole `ChunkDataset`. Basically, you're suggesting `MyChunkDataset` would look like this:\r\n\r\n```cpp\r\nclass MyChunkDataSet : public torch::data::datasets::ChunkDataSet<MyChunkDataSet> {\r\n public:\r\n  Batch read_chunk(size_t chunk_index) override { /* fetch batch at chunk_index */ }\r\n};\r\n```\r\n\r\nbut we could also just have written\r\n\r\n```cpp\r\nclass MyChunkDataSet : \r\n  public torch::data::datasets::BatchDataset<MyChunkDataSet, std::vector<Example>, size_t /* !!!! */> {\r\n public:\r\n  Batch get_batch(size_t chunk_index) override { /* fetch batch at chunk_index */ }\r\n};\r\n```\r\n\r\nand you'd get the exact same API, but now we can delete this whole class?\r\n\r\nIt's not that I don't want to support `ChunkDataset`. It's that I implemented the generalization of the index type precisely because you let me know that you want arbitrary index types. So now I don't see the value of `ChunkDataset` anymore. For example, what is the difference between the custom `get_batch()` in the second class above, and `read_chunk()` in the first example. None really, practically speaking, right?", "created_at": "2018-11-08T18:03:22Z", "updated_at": "2018-11-23T15:54:31Z", "html_url": "https://github.com/pytorch/pytorch/pull/13585#discussion_r232002171", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/13585", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/232002171"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/13585#discussion_r232002171"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/13585"}}, "body_html": "<p>I don't think this class is necessary. The point of my PR to generalize the index type, <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"372752949\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/12960\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/pytorch/pytorch/pull/12960/hovercard\" href=\"https://github.com/pytorch/pytorch/pull/12960\">#12960</a>, was to allow you to create chunk datasets since you can just subclass <code>BatchDataset</code> and set the <code>BatchRequest</code> type to whatever you need. That's what confuses me about this whole <code>ChunkDataset</code>. Basically, you're suggesting <code>MyChunkDataset</code> would look like this:</p>\n<div class=\"highlight highlight-source-c++\"><pre><span class=\"pl-k\">class</span> <span class=\"pl-en\">MyChunkDataSet</span> : <span class=\"pl-k\">public</span> <span class=\"pl-en\">torch</span>::data::datasets::ChunkDataSet&lt;MyChunkDataSet&gt; {\n <span class=\"pl-k\">public:</span>\n  Batch <span class=\"pl-en\">read_chunk</span>(<span class=\"pl-c1\">size_t</span> chunk_index) <span class=\"pl-k\">override</span> { <span class=\"pl-c\"><span class=\"pl-c\">/*</span> fetch batch at chunk_index <span class=\"pl-c\">*/</span></span> }\n};</pre></div>\n<p>but we could also just have written</p>\n<div class=\"highlight highlight-source-c++\"><pre><span class=\"pl-k\">class</span> <span class=\"pl-en\">MyChunkDataSet</span> : \n  public torch::data::datasets::BatchDataset&lt;MyChunkDataSet, std::vector&lt;Example&gt;, <span class=\"pl-c1\">size_t</span> <span class=\"pl-c\"><span class=\"pl-c\">/*</span> !!!! <span class=\"pl-c\">*/</span></span>&gt; {\n <span class=\"pl-k\">public:</span>\n  Batch <span class=\"pl-en\">get_batch</span>(<span class=\"pl-c1\">size_t</span> chunk_index) <span class=\"pl-k\">override</span> { <span class=\"pl-c\"><span class=\"pl-c\">/*</span> fetch batch at chunk_index <span class=\"pl-c\">*/</span></span> }\n};</pre></div>\n<p>and you'd get the exact same API, but now we can delete this whole class?</p>\n<p>It's not that I don't want to support <code>ChunkDataset</code>. It's that I implemented the generalization of the index type precisely because you let me know that you want arbitrary index types. So now I don't see the value of <code>ChunkDataset</code> anymore. For example, what is the difference between the custom <code>get_batch()</code> in the second class above, and <code>read_chunk()</code> in the first example. None really, practically speaking, right?</p>", "body_text": "I don't think this class is necessary. The point of my PR to generalize the index type, #12960, was to allow you to create chunk datasets since you can just subclass BatchDataset and set the BatchRequest type to whatever you need. That's what confuses me about this whole ChunkDataset. Basically, you're suggesting MyChunkDataset would look like this:\nclass MyChunkDataSet : public torch::data::datasets::ChunkDataSet<MyChunkDataSet> {\n public:\n  Batch read_chunk(size_t chunk_index) override { /* fetch batch at chunk_index */ }\n};\nbut we could also just have written\nclass MyChunkDataSet : \n  public torch::data::datasets::BatchDataset<MyChunkDataSet, std::vector<Example>, size_t /* !!!! */> {\n public:\n  Batch get_batch(size_t chunk_index) override { /* fetch batch at chunk_index */ }\n};\nand you'd get the exact same API, but now we can delete this whole class?\nIt's not that I don't want to support ChunkDataset. It's that I implemented the generalization of the index type precisely because you let me know that you want arbitrary index types. So now I don't see the value of ChunkDataset anymore. For example, what is the difference between the custom get_batch() in the second class above, and read_chunk() in the first example. None really, practically speaking, right?"}