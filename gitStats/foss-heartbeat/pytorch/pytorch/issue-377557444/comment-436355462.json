{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/436355462", "html_url": "https://github.com/pytorch/pytorch/pull/13585#issuecomment-436355462", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/13585", "id": 436355462, "node_id": "MDEyOklzc3VlQ29tbWVudDQzNjM1NTQ2Mg==", "user": {"login": "jaliyae", "id": 12703337, "node_id": "MDQ6VXNlcjEyNzAzMzM3", "avatar_url": "https://avatars3.githubusercontent.com/u/12703337?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jaliyae", "html_url": "https://github.com/jaliyae", "followers_url": "https://api.github.com/users/jaliyae/followers", "following_url": "https://api.github.com/users/jaliyae/following{/other_user}", "gists_url": "https://api.github.com/users/jaliyae/gists{/gist_id}", "starred_url": "https://api.github.com/users/jaliyae/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jaliyae/subscriptions", "organizations_url": "https://api.github.com/users/jaliyae/orgs", "repos_url": "https://api.github.com/users/jaliyae/repos", "events_url": "https://api.github.com/users/jaliyae/events{/privacy}", "received_events_url": "https://api.github.com/users/jaliyae/received_events", "type": "User", "site_admin": false}, "created_at": "2018-11-06T18:21:30Z", "updated_at": "2018-11-06T18:21:30Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=6429851\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/goldsborough\">@goldsborough</a><br>\nYes, I will rebase and resolve conflicts.</p>\n<p>The dataloader is not going to be a single thread, similar to the regular dataloader, it can operate in single thread mode or multi-thread mode. So essentially, no change to the threading behavior in the dataloader. All the transformation (map/collate) still happens exactly as before.</p>\n<p>The ChunkDataset is going to be heavy weight data set, we will implement all concurrency at the base class and any new extension is only required to implement a stateless read_chunk API which is very similar to get_batch API. We don't expect the user to implement multi-threaded dataset.</p>\n<p>Having a single dataset object does not hinder performance, because underneath it is using prefetch threads to load data from the source.</p>\n<p>Please let me know if you have more questions.</p>", "body_text": "@goldsborough\nYes, I will rebase and resolve conflicts.\nThe dataloader is not going to be a single thread, similar to the regular dataloader, it can operate in single thread mode or multi-thread mode. So essentially, no change to the threading behavior in the dataloader. All the transformation (map/collate) still happens exactly as before.\nThe ChunkDataset is going to be heavy weight data set, we will implement all concurrency at the base class and any new extension is only required to implement a stateless read_chunk API which is very similar to get_batch API. We don't expect the user to implement multi-threaded dataset.\nHaving a single dataset object does not hinder performance, because underneath it is using prefetch threads to load data from the source.\nPlease let me know if you have more questions.", "body": "@goldsborough \r\nYes, I will rebase and resolve conflicts. \r\n\r\nThe dataloader is not going to be a single thread, similar to the regular dataloader, it can operate in single thread mode or multi-thread mode. So essentially, no change to the threading behavior in the dataloader. All the transformation (map/collate) still happens exactly as before.\r\n\r\nThe ChunkDataset is going to be heavy weight data set, we will implement all concurrency at the base class and any new extension is only required to implement a stateless read_chunk API which is very similar to get_batch API. We don't expect the user to implement multi-threaded dataset. \r\n\r\nHaving a single dataset object does not hinder performance, because underneath it is using prefetch threads to load data from the source. \r\n\r\nPlease let me know if you have more questions.\r\n\r\n\r\n\r\n"}