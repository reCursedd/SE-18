{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/187348480", "pull_request_review_id": 118441469, "id": 187348480, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NzM0ODQ4MA==", "diff_hunk": "@@ -28,21 +28,15 @@ struct Vec256 {\n       values[i] = val;\n     }\n   }\n-  void load(const void* ptr) {\n-    std::memcpy(values, ptr, 32);\n-  };\n-  void load_partial(const void* ptr, int count) {\n+  void load(const void* ptr, int count = size) {", "path": "aten/src/ATen/cpu/vec256/vec256_base.h", "position": null, "original_position": 8, "commit_id": "b269b30289cf014a9bc3ce4924567ecb035a5fe1", "original_commit_id": "86cd5d1daee4eb5a2258769a99725d967b289dd1", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "nit: I'd use `uint64_t` or `size_t` for sizes. That's generally going to incur fewer type conversions inside the kernels, and that's good. Currently it will need to be promoted to a larger type inside this function because you multiply it with `sizeof`, which is a `size_t`", "created_at": "2018-05-10T14:34:18Z", "updated_at": "2018-11-23T15:43:50Z", "html_url": "https://github.com/pytorch/pytorch/pull/7375#discussion_r187348480", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/7375", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/187348480"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/7375#discussion_r187348480"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/7375"}}, "body_html": "<p>nit: I'd use <code>uint64_t</code> or <code>size_t</code> for sizes. That's generally going to incur fewer type conversions inside the kernels, and that's good. Currently it will need to be promoted to a larger type inside this function because you multiply it with <code>sizeof</code>, which is a <code>size_t</code></p>", "body_text": "nit: I'd use uint64_t or size_t for sizes. That's generally going to incur fewer type conversions inside the kernels, and that's good. Currently it will need to be promoted to a larger type inside this function because you multiply it with sizeof, which is a size_t"}