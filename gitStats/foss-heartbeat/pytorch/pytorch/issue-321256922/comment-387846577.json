{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/387846577", "html_url": "https://github.com/pytorch/pytorch/pull/7375#issuecomment-387846577", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/7375", "id": 387846577, "node_id": "MDEyOklzc3VlQ29tbWVudDM4Nzg0NjU3Nw==", "user": {"login": "ajtulloch", "id": 1121581, "node_id": "MDQ6VXNlcjExMjE1ODE=", "avatar_url": "https://avatars3.githubusercontent.com/u/1121581?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ajtulloch", "html_url": "https://github.com/ajtulloch", "followers_url": "https://api.github.com/users/ajtulloch/followers", "following_url": "https://api.github.com/users/ajtulloch/following{/other_user}", "gists_url": "https://api.github.com/users/ajtulloch/gists{/gist_id}", "starred_url": "https://api.github.com/users/ajtulloch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ajtulloch/subscriptions", "organizations_url": "https://api.github.com/users/ajtulloch/orgs", "repos_url": "https://api.github.com/users/ajtulloch/repos", "events_url": "https://api.github.com/users/ajtulloch/events{/privacy}", "received_events_url": "https://api.github.com/users/ajtulloch/received_events", "type": "User", "site_admin": false}, "created_at": "2018-05-09T19:18:31Z", "updated_at": "2018-05-09T19:36:43Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=4583066\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/apaszke\">@apaszke</a> AVX2 also has issues with downclocking, it\u2019s not safe to just unconditionally enable it btw. <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1716488\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/cpuhrsch\">@cpuhrsch</a> ARM CPUs are CPUs too, I assume you meant you only want to handle Intel CPUs?</p>\n<p>It seems like the right abstraction is basically the Eigen Packet abstraction since that\u2019s essentially what Vec256 is a special case of (packet is basically a C++ wrapper around a generic SIMD type, so Vec256 is essentially a Packet&lt;T, 256&gt;, so if this is generalized to more than AVX2 then IMO that makes sense.</p>", "body_text": "@apaszke AVX2 also has issues with downclocking, it\u2019s not safe to just unconditionally enable it btw. @cpuhrsch ARM CPUs are CPUs too, I assume you meant you only want to handle Intel CPUs?\nIt seems like the right abstraction is basically the Eigen Packet abstraction since that\u2019s essentially what Vec256 is a special case of (packet is basically a C++ wrapper around a generic SIMD type, so Vec256 is essentially a Packet<T, 256>, so if this is generalized to more than AVX2 then IMO that makes sense.", "body": "@apaszke AVX2 also has issues with downclocking, it\u2019s not safe to just unconditionally enable it btw. @cpuhrsch ARM CPUs are CPUs too, I assume you meant you only want to handle Intel CPUs? \r\n\r\nIt seems like the right abstraction is basically the Eigen Packet abstraction since that\u2019s essentially what Vec256 is a special case of (packet is basically a C++ wrapper around a generic SIMD type, so Vec256 is essentially a Packet<T, 256>, so if this is generalized to more than AVX2 then IMO that makes sense. "}