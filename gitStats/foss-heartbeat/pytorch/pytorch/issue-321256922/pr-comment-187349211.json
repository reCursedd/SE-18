{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/187349211", "pull_request_review_id": 118441469, "id": 187349211, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NzM0OTIxMQ==", "diff_hunk": "@@ -90,15 +100,23 @@ struct Vec256<int16_t> : public Vec256i {\n     vec.load(ptr);\n     return vec;\n   }\n-  void load_partial(const void *ptr, int count) {\n-    int16_t tmp_values[size];\n-    std::memcpy(tmp_values, ptr, count * sizeof(int16_t));\n-    load(tmp_values);\n+  void load(const void *ptr, int count = size) {\n+    if (count != size) {\n+      int16_t tmp_values[size];\n+      std::memcpy(tmp_values, ptr, count * sizeof(int16_t));\n+      values = _mm256_loadu_si256(reinterpret_cast<const __m256i*>(tmp_values));\n+    } else {\n+      values = _mm256_loadu_si256(reinterpret_cast<const __m256i*>(ptr));\n+    }\n   }\n-  void store_partial(void* ptr, int count) const {\n-    __at_align32__ int16_t tmp_values[size];\n-    store(tmp_values);\n-    std::memcpy(ptr, tmp_values, count * sizeof(int16_t));\n+  void store(void* ptr, int count = size) const {\n+    if (count == size) {\n+      _mm256_storeu_si256(reinterpret_cast<__m256i*>(ptr), values);\n+    } else {\n+      __at_align32__ int16_t tmp_values[size];\n+      _mm256_storeu_si256(reinterpret_cast<__m256i*>(tmp_values), values);\n+      std::memcpy(ptr, tmp_values, count * sizeof(int16_t));", "path": "aten/src/ATen/cpu/vec256/vec256_int.h", "position": 240, "original_position": 104, "commit_id": "b269b30289cf014a9bc3ce4924567ecb035a5fe1", "original_commit_id": "86cd5d1daee4eb5a2258769a99725d967b289dd1", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Uh it would be nice if we could avoid having to reinstantiate those Vec structs for every type manually. It should be possible to achieve using some traits that dispatch to correct intrinsics based on the type.", "created_at": "2018-05-10T14:36:32Z", "updated_at": "2018-11-23T15:43:50Z", "html_url": "https://github.com/pytorch/pytorch/pull/7375#discussion_r187349211", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/7375", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/187349211"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/7375#discussion_r187349211"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/7375"}}, "body_html": "<p>Uh it would be nice if we could avoid having to reinstantiate those Vec structs for every type manually. It should be possible to achieve using some traits that dispatch to correct intrinsics based on the type.</p>", "body_text": "Uh it would be nice if we could avoid having to reinstantiate those Vec structs for every type manually. It should be possible to achieve using some traits that dispatch to correct intrinsics based on the type."}