{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/187555283", "pull_request_review_id": 119358451, "id": 187555283, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NzU1NTI4Mw==", "diff_hunk": "@@ -0,0 +1,49 @@\n+#pragma once\n+#include \"vec256.h\"\n+\n+namespace at { namespace vec256 {\n+namespace {\n+\n+template <int64_t size>\n+inline int64_t _leftover(int64_t x, int64_t y) {\n+  if (x + size > y)\n+    return y - x;\n+  return size;\n+}\n+\n+} // namespace\n+\n+template <typename scalar_t>\n+inline scalar_t reduce_all(\n+    Vec256<scalar_t> (*vec_fun)(Vec256<scalar_t>&, Vec256<scalar_t>&),\n+    scalar_t* data,\n+    int64_t size,\n+    scalar_t ident) {\n+  Vec256<scalar_t> acc_vec(ident);\n+  for (int64_t d = 0; d < size; d += Vec256<scalar_t>::size) {\n+    Vec256<scalar_t> value(ident);\n+    int64_t leftover = _leftover<Vec256<scalar_t>::size>(d, size);\n+    value.load(data + d, leftover);\n+    acc_vec = vec_fun(acc_vec, value);\n+  }\n+  scalar_t acc_arr[Vec256<scalar_t>::size];\n+  acc_vec.store(acc_arr);\n+\n+  for (int64_t i = Vec256<scalar_t>::size / 2; i >= 1; i = i / 2) {\n+    scalar_t acc_arr_first[Vec256<scalar_t>::size];\n+    scalar_t acc_arr_second[Vec256<scalar_t>::size];\n+    for (int64_t j = 0; j < i; j++) {\n+      acc_arr_first[j] = acc_arr[j];\n+      acc_arr_second[j] = acc_arr[j + i];\n+    }", "path": "aten/src/ATen/cpu/vec256/functional.h", "position": null, "original_position": 38, "commit_id": "b269b30289cf014a9bc3ce4924567ecb035a5fe1", "original_commit_id": "1c546634aa6690aeeedf995141973a3c8b58db21", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "I can't see why do you need to scatter the element into two arrays. Seems to me like you could just do (are misaligned accesses the problem?)\r\n```cpp\r\nvec_first.load(acc_arr, i);\r\nvec_second.load(acc_arr + i, i);\r\n```\r\n\r\nAnyway, I thought of a different way of summing the values, that would only use vector instructions. You can find an example for SSE [here](https://stackoverflow.com/a/10930706/3343043).", "created_at": "2018-05-11T08:44:52Z", "updated_at": "2018-11-23T15:43:56Z", "html_url": "https://github.com/pytorch/pytorch/pull/7375#discussion_r187555283", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/7375", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/187555283"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/7375#discussion_r187555283"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/7375"}}, "body_html": "<p>I can't see why do you need to scatter the element into two arrays. Seems to me like you could just do (are misaligned accesses the problem?)</p>\n<div class=\"highlight highlight-source-c++\"><pre>vec_first.load(acc_arr, i);\nvec_second.load(acc_arr + i, i);</pre></div>\n<p>Anyway, I thought of a different way of summing the values, that would only use vector instructions. You can find an example for SSE <a href=\"https://stackoverflow.com/a/10930706/3343043\" rel=\"nofollow\">here</a>.</p>", "body_text": "I can't see why do you need to scatter the element into two arrays. Seems to me like you could just do (are misaligned accesses the problem?)\nvec_first.load(acc_arr, i);\nvec_second.load(acc_arr + i, i);\nAnyway, I thought of a different way of summing the values, that would only use vector instructions. You can find an example for SSE here."}