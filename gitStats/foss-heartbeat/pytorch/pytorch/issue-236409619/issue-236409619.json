{"url": "https://api.github.com/repos/pytorch/pytorch/issues/1819", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/1819/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/1819/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/1819/events", "html_url": "https://github.com/pytorch/pytorch/issues/1819", "id": 236409619, "node_id": "MDU6SXNzdWUyMzY0MDk2MTk=", "number": 1819, "title": "Mixed numpy-pytorch binary operators produce unexpected results", "user": {"login": "stepelu", "id": 6617696, "node_id": "MDQ6VXNlcjY2MTc2OTY=", "avatar_url": "https://avatars3.githubusercontent.com/u/6617696?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stepelu", "html_url": "https://github.com/stepelu", "followers_url": "https://api.github.com/users/stepelu/followers", "following_url": "https://api.github.com/users/stepelu/following{/other_user}", "gists_url": "https://api.github.com/users/stepelu/gists{/gist_id}", "starred_url": "https://api.github.com/users/stepelu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stepelu/subscriptions", "organizations_url": "https://api.github.com/users/stepelu/orgs", "repos_url": "https://api.github.com/users/stepelu/repos", "events_url": "https://api.github.com/users/stepelu/events{/privacy}", "received_events_url": "https://api.github.com/users/stepelu/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-06-16T08:04:31Z", "updated_at": "2017-06-16T10:48:47Z", "closed_at": "2017-06-16T10:48:45Z", "author_association": "NONE", "body_html": "<p>Test case (the order is important):</p>\n<pre><code>print(type(numpy.exp(1) + Variable(torch.zeros(2, 5))))\n# &lt;class 'numpy.ndarray'&gt; (of really strange shape)\n</code></pre>\n<p>I understand why this is happening but I'd prefer an error to be thrown here if possible when the \"expected\" behaviour cannot be achieved.</p>", "body_text": "Test case (the order is important):\nprint(type(numpy.exp(1) + Variable(torch.zeros(2, 5))))\n# <class 'numpy.ndarray'> (of really strange shape)\n\nI understand why this is happening but I'd prefer an error to be thrown here if possible when the \"expected\" behaviour cannot be achieved.", "body": "Test case (the order is important):\r\n\r\n```\r\nprint(type(numpy.exp(1) + Variable(torch.zeros(2, 5))))\r\n# <class 'numpy.ndarray'> (of really strange shape)\r\n```\r\n\r\nI understand why this is happening but I'd prefer an error to be thrown here if possible when the \"expected\" behaviour cannot be achieved."}