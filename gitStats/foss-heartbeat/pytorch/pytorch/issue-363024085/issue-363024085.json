{"url": "https://api.github.com/repos/pytorch/pytorch/issues/12003", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/12003/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/12003/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/12003/events", "html_url": "https://github.com/pytorch/pytorch/pull/12003", "id": 363024085, "node_id": "MDExOlB1bGxSZXF1ZXN0MjE3NTYzMjU5", "number": 12003, "title": "Fix a bug in the CUDA implementation of pdist", "user": {"login": "erikbrinkman", "id": 858926, "node_id": "MDQ6VXNlcjg1ODkyNg==", "avatar_url": "https://avatars1.githubusercontent.com/u/858926?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erikbrinkman", "html_url": "https://github.com/erikbrinkman", "followers_url": "https://api.github.com/users/erikbrinkman/followers", "following_url": "https://api.github.com/users/erikbrinkman/following{/other_user}", "gists_url": "https://api.github.com/users/erikbrinkman/gists{/gist_id}", "starred_url": "https://api.github.com/users/erikbrinkman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erikbrinkman/subscriptions", "organizations_url": "https://api.github.com/users/erikbrinkman/orgs", "repos_url": "https://api.github.com/users/erikbrinkman/repos", "events_url": "https://api.github.com/users/erikbrinkman/events{/privacy}", "received_events_url": "https://api.github.com/users/erikbrinkman/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-09-24T06:13:21Z", "updated_at": "2018-11-21T04:29:39Z", "closed_at": null, "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/12003", "html_url": "https://github.com/pytorch/pytorch/pull/12003", "diff_url": "https://github.com/pytorch/pytorch/pull/12003.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/12003.patch"}, "body_html": "<p>CUDA sqrt functions don't make the same accuracy guarantees that the c standard makes, and as such, the computation of the <code>i</code> index from <code>k</code> occasionally had off by one errors in the indexing when <code>n</code> was large &gt; ~3500.</p>\n<p>This was a bad bug in that the off by one resulted in accessing undefined memory.<br>\nThe patched code now checks for this inaccuracy and fixes the off by one error, however it does increase the probability that this may be faster if <code>i</code> is fetched from a lookup table instead of being computed directly from <code>k</code>.</p>\n<p>Thanks to <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=2780434\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/jma127\">@jma127</a> for pointing this out.</p>", "body_text": "CUDA sqrt functions don't make the same accuracy guarantees that the c standard makes, and as such, the computation of the i index from k occasionally had off by one errors in the indexing when n was large > ~3500.\nThis was a bad bug in that the off by one resulted in accessing undefined memory.\nThe patched code now checks for this inaccuracy and fixes the off by one error, however it does increase the probability that this may be faster if i is fetched from a lookup table instead of being computed directly from k.\nThanks to @jma127 for pointing this out.", "body": "CUDA sqrt functions don't make the same accuracy guarantees that the c standard makes, and as such, the computation of the `i` index from `k` occasionally had off by one errors in the indexing when `n` was large > ~3500.\r\n\r\nThis was a bad bug in that the off by one resulted in accessing undefined memory.\r\nThe patched code now checks for this inaccuracy and fixes the off by one error, however it does increase the probability that this may be faster if `i` is fetched from a lookup table instead of being computed directly from `k`.\r\n\r\nThanks to @jma127 for pointing this out.\r\n\r\n"}