{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/181217360", "pull_request_review_id": 111787663, "id": 181217360, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MTIxNzM2MA==", "diff_hunk": "@@ -818,25 +818,73 @@ struct TensorBitXorOp {\n   }\n };\n \n+/*\n+ * The following function was converted to CUDA form from code that comes\n+ * with the following copyright notice. It has been released under the BSD license.\n+ *\n+ * Cephes Math Library Release 2.8:  June, 2000\n+ * Copyright 1984, 1987, 1992, 2000 by Stephen L. Moshier\n+ */\n template <typename real, typename accreal>\n struct TensorDigammaOp {\n-  using compute_type = typename std::conditional<std::is_same<real, half>::value, accreal, real>::type;\n   __device__ __forceinline__ void\n   operator()(real* out, real* in) {\n-    const compute_type PI = 3.14159265358979323846;\n+    using compute_type = typename std::conditional<std::is_same<real, half>::value, accreal, real>::type;\n+    static const double PI_f64 = 3.14159265358979323846;\n+    static const compute_type PSI_10 = 2.25175258906672110764;\n+    static const compute_type A[] = {\n+       8.33333333333333333333E-2,\n+      -2.10927960927960927961E-2,\n+       7.57575757575757575758E-3,\n+      -4.16666666666666666667E-3,\n+       3.96825396825396825397E-3,\n+      -8.33333333333333333333E-3,\n+       8.33333333333333333333E-2,\n+    };\n+\n     compute_type x = ScalarConvert<real, compute_type>::to(*in);\n+    if (x == 0) {\n+      *out = ScalarConvert<float, real>::to(INFINITY);", "path": "aten/src/THC/THCTensorMathPointwise.cuh", "position": null, "original_position": 32, "commit_id": "e58450631513db53d7f2be221ebfb54da4097260", "original_commit_id": "b65921587362a49b9113ac384251ae0662a9da4c", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Let's use `scalar_cast`. It's much more readable", "created_at": "2018-04-12T20:49:11Z", "updated_at": "2018-11-23T15:42:21Z", "html_url": "https://github.com/pytorch/pytorch/pull/6517#discussion_r181217360", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/6517", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/181217360"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/6517#discussion_r181217360"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/6517"}}, "body_html": "<p>Let's use <code>scalar_cast</code>. It's much more readable</p>", "body_text": "Let's use scalar_cast. It's much more readable"}