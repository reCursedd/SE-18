{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/115526975", "pull_request_review_id": 37072422, "id": 115526975, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNTUyNjk3NQ==", "diff_hunk": "@@ -499,15 +513,61 @@ void THTensor_(sparseMask)(THSTensor *r_, THTensor *t, THSTensor *mask) {\n     for (long i = 0; i < r_->nnz; i++) {\n       long idx = 0;\n       for (long d = 0; d < nDimI; d++) {\n-        idx += THTensor_fastGet2d(mask_indices_, d, i) * t->stride[d];\n+        long j = THTensor_fastGet2d(indices, d, i);\n+        if (j < TH_INDEX_BASE || j >= TH_INDEX_BASE + t->size[d]) {\n+          THError(\"index out of range\");\n+        }\n+        idx += j * t->stride[d];\n       }\n       real val = (t->storage->data + t->storageOffset)[idx];\n       THTensor_fastSet1d(r_values_, i, val);\n     }\n   }\n+}\n+\n+void THTensor_(sparseCopy)(THTensor *r_, THTensor *dense, THSTensor *sparse_)\n+{\n+  THTensor_(resizeAs)(r_, dense);\n+  THSTensor *sparse = THSTensor_(newCoalesce)(sparse_);\n+\n+  long k;\n+  THLongTensor  *indices = THSTensor_(newIndices)(sparse);\n+  THTensor      *values = THSTensor_(newValues)(sparse);\n+  THLongStorage *storage = THSTensor_(newSizeOf)(sparse);\n+  long          *sizes = storage->data;\n+  long          nDim = THTensor_(nDimension)(dense);\n+  long          nDimI = THSTensor_(nDimensionI)(sparse);\n+\n+  if (r_ != dense) THTensor_(copy)(r_, dense);\n+\n+  if (nDim > nDimI) {\n+    THTensor *srcBuffer = THTensor_(new)();\n+    THTensor *dstBuffer = THTensor_(new)();\n+    for (k = 0; k < sparse->nnz; k++) {\n+      THTensor_(set)(dstBuffer, r_);\n+      for (long d = 0; d < sparse->nDimensionI; d++) {\n+        THTensor_(select)(dstBuffer, dstBuffer, 0, THTensor_fastGet2d(indices, d, k));\n+      }\n+      THTensor_(select)(srcBuffer, values, 0, k);\n+      THTensor_(copy)(dstBuffer, srcBuffer);\n+    }\n+    THTensor_(free)(srcBuffer);\n+    THTensor_(free)(dstBuffer);\n+  } else {\n+    #pragma omp parallel for private(k)", "path": "torch/lib/THS/generic/THSTensor.c", "position": null, "original_position": 113, "commit_id": "3d99b56e3c3b42feafff5c1bf327746f96d4e5ae", "original_commit_id": "dce49294dc8b94f5e257573d3f70367fe6955666", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "OK. How would you I suggest I test for such things / is there some good reading I can look into using omp correctly? I will admit to having cargo culted this from the existing spcadd implementation, so whatever improvements we apply here can also apply there.", "created_at": "2017-05-09T15:51:19Z", "updated_at": "2018-11-23T15:33:25Z", "html_url": "https://github.com/pytorch/pytorch/pull/1471#discussion_r115526975", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/1471", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/115526975"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/1471#discussion_r115526975"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/1471"}}, "body_html": "<p>OK. How would you I suggest I test for such things / is there some good reading I can look into using omp correctly? I will admit to having cargo culted this from the existing spcadd implementation, so whatever improvements we apply here can also apply there.</p>", "body_text": "OK. How would you I suggest I test for such things / is there some good reading I can look into using omp correctly? I will admit to having cargo culted this from the existing spcadd implementation, so whatever improvements we apply here can also apply there.", "in_reply_to_id": 115500142}