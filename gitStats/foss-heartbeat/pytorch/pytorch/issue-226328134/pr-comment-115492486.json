{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/115492486", "pull_request_review_id": 37029135, "id": 115492486, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNTQ5MjQ4Ng==", "diff_hunk": "@@ -509,8 +565,121 @@ def _test_sparse_mask_fixed(self):\n         expected = self.SparseTensor(i, exp_v, torch.Size([5, 4]))\n         self.assertEqual(res, expected)\n \n+        expected_dense = self.ValueTensor([\n+            [1, 2, 300, 4],\n+            [5, 6, 100, 8],\n+            [9, 10, 11, 12],\n+            [13, 200, 15, 16],\n+            [17, 18, 19, 400],\n+        ])\n+        dense._sparse_copy_(x)\n+        self.assertEqual(dense, expected_dense)\n+\n+    def prop_sparse_mask_const(self, x, s):\n+        \"\"\"sparse_mask does not mutate inputs.\"\"\"\n+        expected_x = x.clone()\n+        expected_s = s.clone()\n+        try:\n+            x._sparse_mask(s)\n+        except:\n+            pass\n+        self.assertEqual(x, expected_x)\n+        self.assertEqual(s, expected_s)\n+\n+    def _sparse_mask_py(self, x, s):\n+        \"\"\"Python reference implementation of sparse_mask\"\"\"\n+        if not s.is_coalesced():\n+            raise ValueError(\"mask is not coalesced\")\n+        if x.size() != s.size():\n+            raise ValueError(\"sparse_mask operands have incompatible sizes\")\n+        ss = SparseSize(size=x.size(), dimI=s._indices().size()[0], nnz=s._nnz())\n+        r = ss.new_sparse(dense2sparse(type(x)), s._indices())\n+        v = r._values()\n+        for i, js in enumerate(s._indices().t()):\n+            m = x\n+            for j in js:\n+                # NB: m[j] will happily accept a negative index; but sparse_mask\n+                # really shouldnot!\n+                if j < 0:\n+                    raise IndexError(\"negative index is out of range\")\n+                m = m[j]\n+            v[i] = m", "path": "test/test_sparse.py", "position": null, "original_position": 151, "commit_id": "3d99b56e3c3b42feafff5c1bf327746f96d4e5ae", "original_commit_id": "dce49294dc8b94f5e257573d3f70367fe6955666", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Isn't the whole body equivalent to `v[i] = x[js]`?", "created_at": "2017-05-09T13:44:25Z", "updated_at": "2018-11-23T15:33:24Z", "html_url": "https://github.com/pytorch/pytorch/pull/1471#discussion_r115492486", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/1471", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/115492486"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/1471#discussion_r115492486"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/1471"}}, "body_html": "<p>Isn't the whole body equivalent to <code>v[i] = x[js]</code>?</p>", "body_text": "Isn't the whole body equivalent to v[i] = x[js]?"}