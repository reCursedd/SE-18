{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/307597289", "html_url": "https://github.com/pytorch/pytorch/pull/1471#issuecomment-307597289", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/1471", "id": 307597289, "node_id": "MDEyOklzc3VlQ29tbWVudDMwNzU5NzI4OQ==", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "created_at": "2017-06-11T00:03:01Z", "updated_at": "2017-06-11T00:03:01Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Quick update from the implementation world. Here is a more correct definition of sparse_mask, using the numelI/numelV nomenclature:</p>\n<pre><code>    def _sparse_mask(self, s):\n        v = self.view(s.numelI(), *s._values().size()[1:]).index_select(0, s._linear_indices())\n        return type(s)(s._indices(), v, s.size())\n</code></pre>\n<p>Notice that to get the correct dimensionality of v, we want to preserve the sizes of the V dimensions. I think there should be a more convenient way to refer to this, and I think <code>sizeV</code> is a good match. Then we have invariants:</p>\n<ul>\n<li><code>s.sizeI() + s.sizeV() == s.size()</code></li>\n<li><code>s.numelI() * s.numelV() == s.to_dense().numel()</code> (Arguably we should add numel natively for sparse)</li>\n</ul>\n<p>I guess I should also add new() support, so I don't have to use <code>type(s)</code> to hack the constructor.</p>\n<p>CC <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=5702157\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/adamlerer\">@adamlerer</a> and <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=2560662\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/martinraison\">@martinraison</a></p>", "body_text": "Quick update from the implementation world. Here is a more correct definition of sparse_mask, using the numelI/numelV nomenclature:\n    def _sparse_mask(self, s):\n        v = self.view(s.numelI(), *s._values().size()[1:]).index_select(0, s._linear_indices())\n        return type(s)(s._indices(), v, s.size())\n\nNotice that to get the correct dimensionality of v, we want to preserve the sizes of the V dimensions. I think there should be a more convenient way to refer to this, and I think sizeV is a good match. Then we have invariants:\n\ns.sizeI() + s.sizeV() == s.size()\ns.numelI() * s.numelV() == s.to_dense().numel() (Arguably we should add numel natively for sparse)\n\nI guess I should also add new() support, so I don't have to use type(s) to hack the constructor.\nCC @adamlerer and @martinraison", "body": "Quick update from the implementation world. Here is a more correct definition of sparse_mask, using the numelI/numelV nomenclature:\r\n\r\n```\r\n    def _sparse_mask(self, s):\r\n        v = self.view(s.numelI(), *s._values().size()[1:]).index_select(0, s._linear_indices())\r\n        return type(s)(s._indices(), v, s.size())\r\n```\r\n\r\nNotice that to get the correct dimensionality of v, we want to preserve the sizes of the V dimensions. I think there should be a more convenient way to refer to this, and I think `sizeV` is a good match. Then we have invariants:\r\n\r\n* `s.sizeI() + s.sizeV() == s.size()`\r\n* `s.numelI() * s.numelV() == s.to_dense().numel()` (Arguably we should add numel natively for sparse)\r\n\r\nI guess I should also add new() support, so I don't have to use `type(s)` to hack the constructor.\r\n\r\nCC @adamlerer and @martinraison "}