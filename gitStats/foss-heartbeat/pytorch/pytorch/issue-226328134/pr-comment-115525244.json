{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/115525244", "pull_request_review_id": 37070428, "id": 115525244, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNTUyNTI0NA==", "diff_hunk": "@@ -419,38 +419,43 @@ int THCSTensor_(checkGPU)(THCState *state, unsigned int nSparseTensors, unsigned\n #endif // DISABLE_CHECK_GPU\n }\n \n-void THCTensor_(sparseMask)(THCState *state, THCSTensor *r_, THCTensor *t, THCSTensor *mask) {\n-  THArgCheck(mask->coalesced, 2, \"mask is uncoalesced\");\n-  THCAssertSameGPU(THCSTensor_(checkGPU)(state, 2, 3, r_, mask, t));\n-  if(!THCSTensor_(isSameSizeAsDense)(state, mask, t)) {\n-    THError(\"sparseMask operands have incompatible sizes\");\n-  }\n-  THCSTensor_(resizeAs)(state, r_, mask);\n-  if (mask->nnz == 0) {\n+void THCTensor_(sparseSelect)(THCState *state, THCSTensor *r_, THCTensor *t, THCIndexTensor *indices_) {\n+  THCAssertSameGPU(THCSTensor_(checkGPU)(state, 2, 3, r_, indices_, t));\n+  long nDim = THCTensor_(nDimension)(state, t);\n+  long nDimI = THCudaLongTensor_size(state, indices_, 0);\n+  long nDimV = nDim - nDimI;\n+  long nnz = THCudaLongTensor_size(state, indices_, 1);", "path": "torch/lib/THCS/generic/THCSTensor.c", "position": 17, "original_position": 17, "commit_id": "3d99b56e3c3b42feafff5c1bf327746f96d4e5ae", "original_commit_id": "dce49294dc8b94f5e257573d3f70367fe6955666", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "UPDATE: No, there's no way to do this with sparseSelect, because you didn't actually get the sparse tensor (which stores the coalesced bit.) Being coalesced is an invariant which is enforced by whoever calls this function (sparse_mask, in this case.)\r\n\r\nHOWEVER, you are right that sparseCopy below needs to coalesce.", "created_at": "2017-05-09T15:44:44Z", "updated_at": "2018-11-23T15:33:25Z", "html_url": "https://github.com/pytorch/pytorch/pull/1471#discussion_r115525244", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/1471", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/115525244"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/1471#discussion_r115525244"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/1471"}}, "body_html": "<p>UPDATE: No, there's no way to do this with sparseSelect, because you didn't actually get the sparse tensor (which stores the coalesced bit.) Being coalesced is an invariant which is enforced by whoever calls this function (sparse_mask, in this case.)</p>\n<p>HOWEVER, you are right that sparseCopy below needs to coalesce.</p>", "body_text": "UPDATE: No, there's no way to do this with sparseSelect, because you didn't actually get the sparse tensor (which stores the coalesced bit.) Being coalesced is an invariant which is enforced by whoever calls this function (sparse_mask, in this case.)\nHOWEVER, you are right that sparseCopy below needs to coalesce.", "in_reply_to_id": 115496209}