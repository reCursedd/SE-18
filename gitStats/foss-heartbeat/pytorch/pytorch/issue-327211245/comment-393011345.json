{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/393011345", "html_url": "https://github.com/pytorch/pytorch/issues/7911#issuecomment-393011345", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/7911", "id": 393011345, "node_id": "MDEyOklzc3VlQ29tbWVudDM5MzAxMTM0NQ==", "user": {"login": "PkuRainBow", "id": 4639578, "node_id": "MDQ6VXNlcjQ2Mzk1Nzg=", "avatar_url": "https://avatars2.githubusercontent.com/u/4639578?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PkuRainBow", "html_url": "https://github.com/PkuRainBow", "followers_url": "https://api.github.com/users/PkuRainBow/followers", "following_url": "https://api.github.com/users/PkuRainBow/following{/other_user}", "gists_url": "https://api.github.com/users/PkuRainBow/gists{/gist_id}", "starred_url": "https://api.github.com/users/PkuRainBow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PkuRainBow/subscriptions", "organizations_url": "https://api.github.com/users/PkuRainBow/orgs", "repos_url": "https://api.github.com/users/PkuRainBow/repos", "events_url": "https://api.github.com/users/PkuRainBow/events{/privacy}", "received_events_url": "https://api.github.com/users/PkuRainBow/received_events", "type": "User", "site_admin": false}, "created_at": "2018-05-30T02:35:14Z", "updated_at": "2018-05-30T02:38:36Z", "author_association": "NONE", "body_html": "<p>How about this? It seems that there still exist some bugs for the \"self.w = torch.zeros(self.stride, self.stride)\", where the self.w is expected to be a variable.  I am wondering whether there exist simple method to solve this problem without using pytorch0.4?</p>\n<p>I will try the pytorch0.4 latter~</p>\n<pre><code>class PadWithin(nn.Module):\n    def __init__(self, stride=2):\n        super(PadWithin, self).__init__()\n        self.stride = stride\n        self.w = torch.zeros(self.stride, self.stride)\n        \n    def forward(self, feats):\n        return F.conv_transpose2d(feats, self.w.expand(feats.size(1), 1, self.stride, self.stride), stride=self.stride, groups=feats.size(1))\n\n\n</code></pre>", "body_text": "How about this? It seems that there still exist some bugs for the \"self.w = torch.zeros(self.stride, self.stride)\", where the self.w is expected to be a variable.  I am wondering whether there exist simple method to solve this problem without using pytorch0.4?\nI will try the pytorch0.4 latter~\nclass PadWithin(nn.Module):\n    def __init__(self, stride=2):\n        super(PadWithin, self).__init__()\n        self.stride = stride\n        self.w = torch.zeros(self.stride, self.stride)\n        \n    def forward(self, feats):\n        return F.conv_transpose2d(feats, self.w.expand(feats.size(1), 1, self.stride, self.stride), stride=self.stride, groups=feats.size(1))", "body": "How about this? It seems that there still exist some bugs for the \"self.w = torch.zeros(self.stride, self.stride)\", where the self.w is expected to be a variable.  I am wondering whether there exist simple method to solve this problem without using pytorch0.4?\r\n\r\nI will try the pytorch0.4 latter~\r\n\r\n```\r\nclass PadWithin(nn.Module):\r\n    def __init__(self, stride=2):\r\n        super(PadWithin, self).__init__()\r\n        self.stride = stride\r\n        self.w = torch.zeros(self.stride, self.stride)\r\n        \r\n    def forward(self, feats):\r\n        return F.conv_transpose2d(feats, self.w.expand(feats.size(1), 1, self.stride, self.stride), stride=self.stride, groups=feats.size(1))\r\n\r\n\r\n```"}