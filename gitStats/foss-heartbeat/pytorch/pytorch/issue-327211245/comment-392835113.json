{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/392835113", "html_url": "https://github.com/pytorch/pytorch/issues/7911#issuecomment-392835113", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/7911", "id": 392835113, "node_id": "MDEyOklzc3VlQ29tbWVudDM5MjgzNTExMw==", "user": {"login": "SsnL", "id": 5674597, "node_id": "MDQ6VXNlcjU2NzQ1OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5674597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SsnL", "html_url": "https://github.com/SsnL", "followers_url": "https://api.github.com/users/SsnL/followers", "following_url": "https://api.github.com/users/SsnL/following{/other_user}", "gists_url": "https://api.github.com/users/SsnL/gists{/gist_id}", "starred_url": "https://api.github.com/users/SsnL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SsnL/subscriptions", "organizations_url": "https://api.github.com/users/SsnL/orgs", "repos_url": "https://api.github.com/users/SsnL/repos", "events_url": "https://api.github.com/users/SsnL/events{/privacy}", "received_events_url": "https://api.github.com/users/SsnL/received_events", "type": "User", "site_admin": false}, "created_at": "2018-05-29T16:08:53Z", "updated_at": "2018-05-29T16:09:10Z", "author_association": "CONTRIBUTOR", "body_html": "<p>This works:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">import</span> torch.nn.functional <span class=\"pl-k\">as</span> F\n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span>\n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">def</span> <span class=\"pl-en\">pad_within</span>(<span class=\"pl-smi\">x</span>, <span class=\"pl-smi\">stride</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">2</span>):\n<span class=\"pl-c1\">...</span>   w <span class=\"pl-k\">=</span> x.new_zeros(stride, stride)\n<span class=\"pl-c1\">...</span>   w[<span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">0</span>] <span class=\"pl-k\">=</span> <span class=\"pl-c1\">1</span>\n<span class=\"pl-c1\">...</span>   <span class=\"pl-k\">return</span> F.conv_transpose2d(x, w.expand(x.size(<span class=\"pl-c1\">1</span>), <span class=\"pl-c1\">1</span>, stride, stride), <span class=\"pl-v\">stride</span><span class=\"pl-k\">=</span>stride, <span class=\"pl-v\">groups</span><span class=\"pl-k\">=</span>x.size(<span class=\"pl-c1\">1</span>))\n<span class=\"pl-c1\">...</span>\n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> x <span class=\"pl-k\">=</span> torch.arange(<span class=\"pl-c1\">8</span>, <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>torch.float).view(<span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">4</span>).expand(<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">3</span>, <span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">4</span>)\n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> x\ntensor([[[[ <span class=\"pl-c1\">0</span>.,  <span class=\"pl-c1\">1</span>.,  <span class=\"pl-c1\">2</span>.,  <span class=\"pl-c1\">3</span>.],\n          [ <span class=\"pl-c1\">4</span>.,  <span class=\"pl-c1\">5</span>.,  <span class=\"pl-c1\">6</span>.,  <span class=\"pl-c1\">7</span>.]],\n\n         [[ <span class=\"pl-c1\">0</span>.,  <span class=\"pl-c1\">1</span>.,  <span class=\"pl-c1\">2</span>.,  <span class=\"pl-c1\">3</span>.],\n          [ <span class=\"pl-c1\">4</span>.,  <span class=\"pl-c1\">5</span>.,  <span class=\"pl-c1\">6</span>.,  <span class=\"pl-c1\">7</span>.]],\n\n         [[ <span class=\"pl-c1\">0</span>.,  <span class=\"pl-c1\">1</span>.,  <span class=\"pl-c1\">2</span>.,  <span class=\"pl-c1\">3</span>.],\n          [ <span class=\"pl-c1\">4</span>.,  <span class=\"pl-c1\">5</span>.,  <span class=\"pl-c1\">6</span>.,  <span class=\"pl-c1\">7</span>.]]]])\n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> pad_within(x)\ntensor([[[[ <span class=\"pl-c1\">0</span>.,  <span class=\"pl-c1\">0</span>.,  <span class=\"pl-c1\">1</span>.,  <span class=\"pl-c1\">0</span>.,  <span class=\"pl-c1\">2</span>.,  <span class=\"pl-c1\">0</span>.,  <span class=\"pl-c1\">3</span>.,  <span class=\"pl-c1\">0</span>.],\n          [ <span class=\"pl-c1\">0</span>.,  <span class=\"pl-c1\">0</span>.,  <span class=\"pl-c1\">0</span>.,  <span class=\"pl-c1\">0</span>.,  <span class=\"pl-c1\">0</span>.,  <span class=\"pl-c1\">0</span>.,  <span class=\"pl-c1\">0</span>.,  <span class=\"pl-c1\">0</span>.],\n          [ <span class=\"pl-c1\">4</span>.,  <span class=\"pl-c1\">0</span>.,  <span class=\"pl-c1\">5</span>.,  <span class=\"pl-c1\">0</span>.,  <span class=\"pl-c1\">6</span>.,  <span class=\"pl-c1\">0</span>.,  <span class=\"pl-c1\">7</span>.,  <span class=\"pl-c1\">0</span>.],\n          [ <span class=\"pl-c1\">0</span>.,  <span class=\"pl-c1\">0</span>.,  <span class=\"pl-c1\">0</span>.,  <span class=\"pl-c1\">0</span>.,  <span class=\"pl-c1\">0</span>.,  <span class=\"pl-c1\">0</span>.,  <span class=\"pl-c1\">0</span>.,  <span class=\"pl-c1\">0</span>.]],\n\n         [[ <span class=\"pl-c1\">0</span>.,  <span class=\"pl-c1\">0</span>.,  <span class=\"pl-c1\">1</span>.,  <span class=\"pl-c1\">0</span>.,  <span class=\"pl-c1\">2</span>.,  <span class=\"pl-c1\">0</span>.,  <span class=\"pl-c1\">3</span>.,  <span class=\"pl-c1\">0</span>.],\n          [ <span class=\"pl-c1\">0</span>.,  <span class=\"pl-c1\">0</span>.,  <span class=\"pl-c1\">0</span>.,  <span class=\"pl-c1\">0</span>.,  <span class=\"pl-c1\">0</span>.,  <span class=\"pl-c1\">0</span>.,  <span class=\"pl-c1\">0</span>.,  <span class=\"pl-c1\">0</span>.],\n          [ <span class=\"pl-c1\">4</span>.,  <span class=\"pl-c1\">0</span>.,  <span class=\"pl-c1\">5</span>.,  <span class=\"pl-c1\">0</span>.,  <span class=\"pl-c1\">6</span>.,  <span class=\"pl-c1\">0</span>.,  <span class=\"pl-c1\">7</span>.,  <span class=\"pl-c1\">0</span>.],\n          [ <span class=\"pl-c1\">0</span>.,  <span class=\"pl-c1\">0</span>.,  <span class=\"pl-c1\">0</span>.,  <span class=\"pl-c1\">0</span>.,  <span class=\"pl-c1\">0</span>.,  <span class=\"pl-c1\">0</span>.,  <span class=\"pl-c1\">0</span>.,  <span class=\"pl-c1\">0</span>.]],\n\n         [[ <span class=\"pl-c1\">0</span>.,  <span class=\"pl-c1\">0</span>.,  <span class=\"pl-c1\">1</span>.,  <span class=\"pl-c1\">0</span>.,  <span class=\"pl-c1\">2</span>.,  <span class=\"pl-c1\">0</span>.,  <span class=\"pl-c1\">3</span>.,  <span class=\"pl-c1\">0</span>.],\n          [ <span class=\"pl-c1\">0</span>.,  <span class=\"pl-c1\">0</span>.,  <span class=\"pl-c1\">0</span>.,  <span class=\"pl-c1\">0</span>.,  <span class=\"pl-c1\">0</span>.,  <span class=\"pl-c1\">0</span>.,  <span class=\"pl-c1\">0</span>.,  <span class=\"pl-c1\">0</span>.],\n          [ <span class=\"pl-c1\">4</span>.,  <span class=\"pl-c1\">0</span>.,  <span class=\"pl-c1\">5</span>.,  <span class=\"pl-c1\">0</span>.,  <span class=\"pl-c1\">6</span>.,  <span class=\"pl-c1\">0</span>.,  <span class=\"pl-c1\">7</span>.,  <span class=\"pl-c1\">0</span>.],\n          [ <span class=\"pl-c1\">0</span>.,  <span class=\"pl-c1\">0</span>.,  <span class=\"pl-c1\">0</span>.,  <span class=\"pl-c1\">0</span>.,  <span class=\"pl-c1\">0</span>.,  <span class=\"pl-c1\">0</span>.,  <span class=\"pl-c1\">0</span>.,  <span class=\"pl-c1\">0</span>.]]]])\n</pre></div>\n<p>you can wrap this in a module to avoid recomputing the weight every time.</p>", "body_text": "This works:\n>>> import torch.nn.functional as F\n>>>\n>>> def pad_within(x, stride=2):\n...   w = x.new_zeros(stride, stride)\n...   w[0, 0] = 1\n...   return F.conv_transpose2d(x, w.expand(x.size(1), 1, stride, stride), stride=stride, groups=x.size(1))\n...\n>>> x = torch.arange(8, dtype=torch.float).view(2, 4).expand(1, 3, 2, 4)\n>>> x\ntensor([[[[ 0.,  1.,  2.,  3.],\n          [ 4.,  5.,  6.,  7.]],\n\n         [[ 0.,  1.,  2.,  3.],\n          [ 4.,  5.,  6.,  7.]],\n\n         [[ 0.,  1.,  2.,  3.],\n          [ 4.,  5.,  6.,  7.]]]])\n>>> pad_within(x)\ntensor([[[[ 0.,  0.,  1.,  0.,  2.,  0.,  3.,  0.],\n          [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],\n          [ 4.,  0.,  5.,  0.,  6.,  0.,  7.,  0.],\n          [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]],\n\n         [[ 0.,  0.,  1.,  0.,  2.,  0.,  3.,  0.],\n          [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],\n          [ 4.,  0.,  5.,  0.,  6.,  0.,  7.,  0.],\n          [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]],\n\n         [[ 0.,  0.,  1.,  0.,  2.,  0.,  3.,  0.],\n          [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],\n          [ 4.,  0.,  5.,  0.,  6.,  0.,  7.,  0.],\n          [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]]])\n\nyou can wrap this in a module to avoid recomputing the weight every time.", "body": "This works:\r\n```py\r\n>>> import torch.nn.functional as F\r\n>>>\r\n>>> def pad_within(x, stride=2):\r\n...   w = x.new_zeros(stride, stride)\r\n...   w[0, 0] = 1\r\n...   return F.conv_transpose2d(x, w.expand(x.size(1), 1, stride, stride), stride=stride, groups=x.size(1))\r\n...\r\n>>> x = torch.arange(8, dtype=torch.float).view(2, 4).expand(1, 3, 2, 4)\r\n>>> x\r\ntensor([[[[ 0.,  1.,  2.,  3.],\r\n          [ 4.,  5.,  6.,  7.]],\r\n\r\n         [[ 0.,  1.,  2.,  3.],\r\n          [ 4.,  5.,  6.,  7.]],\r\n\r\n         [[ 0.,  1.,  2.,  3.],\r\n          [ 4.,  5.,  6.,  7.]]]])\r\n>>> pad_within(x)\r\ntensor([[[[ 0.,  0.,  1.,  0.,  2.,  0.,  3.,  0.],\r\n          [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],\r\n          [ 4.,  0.,  5.,  0.,  6.,  0.,  7.,  0.],\r\n          [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]],\r\n\r\n         [[ 0.,  0.,  1.,  0.,  2.,  0.,  3.,  0.],\r\n          [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],\r\n          [ 4.,  0.,  5.,  0.,  6.,  0.,  7.,  0.],\r\n          [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]],\r\n\r\n         [[ 0.,  0.,  1.,  0.,  2.,  0.,  3.,  0.],\r\n          [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],\r\n          [ 4.,  0.,  5.,  0.,  6.,  0.,  7.,  0.],\r\n          [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]]])\r\n\r\n```\r\n\r\nyou can wrap this in a module to avoid recomputing the weight every time."}