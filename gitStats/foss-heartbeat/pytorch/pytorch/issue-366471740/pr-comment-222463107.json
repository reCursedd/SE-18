{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/222463107", "pull_request_review_id": 161356505, "id": 222463107, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyMjQ2MzEwNw==", "diff_hunk": "@@ -12,2213 +14,2225 @@\n \"\"\"\n \n # List of math functions that should be replaced inside device code only.\n-MATH_TRANSPILATIONS = {\n-    \"std::max\": (\"::max\"),\n-    \"std::min\": (\"::min\"),\n-    \"std::ceil\": (\"::ceil\"),\n-    \"std::floor\": (\"::floor\"),\n-    \"std::exp\": (\"::exp\"),\n-    \"std::log\": (\"::log\"),\n-    \"std::pow\": (\"::pow\"),\n-    \"std::fabs\": (\"::fabs\"),\n-    \"std::fmod\": (\"::fmod\"),\n-    \"std::remainder\": (\"::remainder\"),\n-}\n+MATH_TRANSPILATIONS = [\n+    (\"std::max\", (\"::max\")),\n+    (\"std::min\", (\"::min\")),\n+    (\"std::ceil\", (\"::ceil\")),\n+    (\"std::floor\", (\"::floor\")),\n+    (\"std::exp\", (\"::exp\")),\n+    (\"std::log\", (\"::log\")),\n+    (\"std::pow\", (\"::pow\")),\n+    (\"std::fabs\", (\"::fabs\")),\n+    (\"std::fmod\", (\"::fmod\")),\n+    (\"std::remainder\", (\"::remainder\")),\n+]\n+\n+MATH_TRANSPILATIONS = collections.OrderedDict(MATH_TRANSPILATIONS)", "path": "tools/amd_build/pyHIPIFY/cuda_to_hip_mappings.py", "position": null, "original_position": 35, "commit_id": "529f5976c85a3a1c0d537b601b2e93ac9efc8af9", "original_commit_id": "430c3a6de9a5d765ea64b69c5e1deb07948197d4", "user": {"login": "bddppq", "id": 9300575, "node_id": "MDQ6VXNlcjkzMDA1NzU=", "avatar_url": "https://avatars2.githubusercontent.com/u/9300575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bddppq", "html_url": "https://github.com/bddppq", "followers_url": "https://api.github.com/users/bddppq/followers", "following_url": "https://api.github.com/users/bddppq/following{/other_user}", "gists_url": "https://api.github.com/users/bddppq/gists{/gist_id}", "starred_url": "https://api.github.com/users/bddppq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bddppq/subscriptions", "organizations_url": "https://api.github.com/users/bddppq/orgs", "repos_url": "https://api.github.com/users/bddppq/repos", "events_url": "https://api.github.com/users/bddppq/events{/privacy}", "received_events_url": "https://api.github.com/users/bddppq/received_events", "type": "User", "site_admin": false}, "body": "You can combine these two expressions into one:\r\n```python\r\nMATH_TRANSPILATIONS = collections.OrderedDict([\r\n    (\"std::max\", (\"::max\")),\r\n    (\"std::min\", (\"::min\")),\r\n    (\"std::ceil\", (\"::ceil\")),\r\n    (\"std::floor\", (\"::floor\")),\r\n    (\"std::exp\", (\"::exp\")),\r\n    (\"std::log\", (\"::log\")),\r\n    (\"std::pow\", (\"::pow\")),\r\n    (\"std::fabs\", (\"::fabs\")),\r\n    (\"std::fmod\", (\"::fmod\")),\r\n    (\"std::remainder\", (\"::remainder\")),\r\n])\r\n```", "created_at": "2018-10-03T20:50:51Z", "updated_at": "2018-11-23T15:52:16Z", "html_url": "https://github.com/pytorch/pytorch/pull/12292#discussion_r222463107", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/12292", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/222463107"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/12292#discussion_r222463107"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/12292"}}, "body_html": "<p>You can combine these two expressions into one:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-c1\">MATH_TRANSPILATIONS</span> <span class=\"pl-k\">=</span> collections.OrderedDict([\n    (<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>std::max<span class=\"pl-pds\">\"</span></span>, (<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>::max<span class=\"pl-pds\">\"</span></span>)),\n    (<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>std::min<span class=\"pl-pds\">\"</span></span>, (<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>::min<span class=\"pl-pds\">\"</span></span>)),\n    (<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>std::ceil<span class=\"pl-pds\">\"</span></span>, (<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>::ceil<span class=\"pl-pds\">\"</span></span>)),\n    (<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>std::floor<span class=\"pl-pds\">\"</span></span>, (<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>::floor<span class=\"pl-pds\">\"</span></span>)),\n    (<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>std::exp<span class=\"pl-pds\">\"</span></span>, (<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>::exp<span class=\"pl-pds\">\"</span></span>)),\n    (<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>std::log<span class=\"pl-pds\">\"</span></span>, (<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>::log<span class=\"pl-pds\">\"</span></span>)),\n    (<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>std::pow<span class=\"pl-pds\">\"</span></span>, (<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>::pow<span class=\"pl-pds\">\"</span></span>)),\n    (<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>std::fabs<span class=\"pl-pds\">\"</span></span>, (<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>::fabs<span class=\"pl-pds\">\"</span></span>)),\n    (<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>std::fmod<span class=\"pl-pds\">\"</span></span>, (<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>::fmod<span class=\"pl-pds\">\"</span></span>)),\n    (<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>std::remainder<span class=\"pl-pds\">\"</span></span>, (<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>::remainder<span class=\"pl-pds\">\"</span></span>)),\n])</pre></div>", "body_text": "You can combine these two expressions into one:\nMATH_TRANSPILATIONS = collections.OrderedDict([\n    (\"std::max\", (\"::max\")),\n    (\"std::min\", (\"::min\")),\n    (\"std::ceil\", (\"::ceil\")),\n    (\"std::floor\", (\"::floor\")),\n    (\"std::exp\", (\"::exp\")),\n    (\"std::log\", (\"::log\")),\n    (\"std::pow\", (\"::pow\")),\n    (\"std::fabs\", (\"::fabs\")),\n    (\"std::fmod\", (\"::fmod\")),\n    (\"std::remainder\", (\"::remainder\")),\n])"}