{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/435975421", "html_url": "https://github.com/pytorch/pytorch/pull/13290#issuecomment-435975421", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/13290", "id": 435975421, "node_id": "MDEyOklzc3VlQ29tbWVudDQzNTk3NTQyMQ==", "user": {"login": "weiyangfb", "id": 38509346, "node_id": "MDQ6VXNlcjM4NTA5MzQ2", "avatar_url": "https://avatars1.githubusercontent.com/u/38509346?v=4", "gravatar_id": "", "url": "https://api.github.com/users/weiyangfb", "html_url": "https://github.com/weiyangfb", "followers_url": "https://api.github.com/users/weiyangfb/followers", "following_url": "https://api.github.com/users/weiyangfb/following{/other_user}", "gists_url": "https://api.github.com/users/weiyangfb/gists{/gist_id}", "starred_url": "https://api.github.com/users/weiyangfb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/weiyangfb/subscriptions", "organizations_url": "https://api.github.com/users/weiyangfb/orgs", "repos_url": "https://api.github.com/users/weiyangfb/repos", "events_url": "https://api.github.com/users/weiyangfb/events{/privacy}", "received_events_url": "https://api.github.com/users/weiyangfb/received_events", "type": "User", "site_admin": false}, "created_at": "2018-11-05T18:08:45Z", "updated_at": "2018-11-05T21:13:07Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=13564\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ezyang\">@ezyang</a> I meant for code in condition: D.dim &gt; S.sparse_dim, I just copy &amp; paste from <div class=\"border rounded-1 my-2\">\n  <div class=\"f6 px-3 py-2 lh-condensed border-bottom bg-gray-light\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/pytorch/pytorch/blob/482b1366e68cd32d3ae7671e7ae12c9488464a0a/aten/src/ATen/native/sparse/cuda/SparseCUDATensor.cpp#L33-L51\">pytorch/aten/src/ATen/native/sparse/cuda/SparseCUDATensor.cpp</a>\n    </p>\n    <p class=\"mb-0 text-gray-light\">\n        Lines 33 to 51\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/pytorch/pytorch/commit/482b1366e68cd32d3ae7671e7ae12c9488464a0a\">482b136</a>\n    </p>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L33\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"33\"></td>\n          <td id=\"LC33\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> LongTensor indices = <span class=\"pl-c1\">at::zeros</span>({mask.<span class=\"pl-c1\">_nnz</span>()}, mask_indices.<span class=\"pl-c1\">options</span>()); </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L34\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"34\"></td>\n          <td id=\"LC34\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">  </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L35\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"35\"></td>\n          <td id=\"LC35\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-k\">for</span> (<span class=\"pl-c1\">int64_t</span> d = <span class=\"pl-c1\">0</span>; d &lt; mask.<span class=\"pl-c1\">sparse_dim</span>(); d++) { </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L36\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"36\"></td>\n          <td id=\"LC36\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   indices.<span class=\"pl-c1\">mul_</span>(mask.<span class=\"pl-c1\">size</span>(d)); </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L37\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"37\"></td>\n          <td id=\"LC37\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   <span class=\"pl-c\"><span class=\"pl-c\">//</span> This used to use a buffer but I deoptimized it</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L38\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"38\"></td>\n          <td id=\"LC38\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   indices.<span class=\"pl-c1\">add_</span>(mask_indices.<span class=\"pl-c1\">select</span>(<span class=\"pl-c1\">0</span>, d)); </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L39\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"39\"></td>\n          <td id=\"LC39\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> } </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L40\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"40\"></td>\n          <td id=\"LC40\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">  </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L41\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"41\"></td>\n          <td id=\"LC41\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> std::vector&lt;<span class=\"pl-c1\">int64_t</span>&gt; <span class=\"pl-c1\">view_size</span>(<span class=\"pl-c1\">1</span> + mask.<span class=\"pl-c1\">dense_dim</span>()); </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L42\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"42\"></td>\n          <td id=\"LC42\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> view_size[<span class=\"pl-c1\">0</span>] = -<span class=\"pl-c1\">1</span>; </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L43\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"43\"></td>\n          <td id=\"LC43\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-k\">for</span> (<span class=\"pl-c1\">int64_t</span> d = <span class=\"pl-c1\">0</span>; d &lt; mask.<span class=\"pl-c1\">dense_dim</span>(); d++) { </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L44\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"44\"></td>\n          <td id=\"LC44\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   view_size[d + <span class=\"pl-c1\">1</span>] = mask.<span class=\"pl-c1\">size</span>(mask.<span class=\"pl-c1\">sparse_dim</span>() + d); </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L45\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"45\"></td>\n          <td id=\"LC45\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> } </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L46\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"46\"></td>\n          <td id=\"LC46\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">  </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L47\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"47\"></td>\n          <td id=\"LC47\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> Tensor t_view = t.<span class=\"pl-c1\">view</span>(view_size); </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L48\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"48\"></td>\n          <td id=\"LC48\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-c\"><span class=\"pl-c\">//</span> TODO: Re-audit this; it used to be an indexSelect directly into r_values</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L49\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"49\"></td>\n          <td id=\"LC49\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-c1\">at::index_select_out</span>(r_values, t_view, <span class=\"pl-c1\">0</span>, indices); </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L50\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"50\"></td>\n          <td id=\"LC50\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">  </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L51\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"51\"></td>\n          <td id=\"LC51\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-k\">return</span> r; </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n. I feel bad about duplicating code. Let me know if this is not ok.</p>", "body_text": "@ezyang I meant for code in condition: D.dim > S.sparse_dim, I just copy & paste from \n  \n    \n      pytorch/aten/src/ATen/native/sparse/cuda/SparseCUDATensor.cpp\n    \n    \n        Lines 33 to 51\n      in\n      482b136\n    \n    \n    \n    \n\n        \n          \n           LongTensor indices = at::zeros({mask._nnz()}, mask_indices.options()); \n        \n\n        \n          \n            \n        \n\n        \n          \n           for (int64_t d = 0; d < mask.sparse_dim(); d++) { \n        \n\n        \n          \n             indices.mul_(mask.size(d)); \n        \n\n        \n          \n             // This used to use a buffer but I deoptimized it \n        \n\n        \n          \n             indices.add_(mask_indices.select(0, d)); \n        \n\n        \n          \n           } \n        \n\n        \n          \n            \n        \n\n        \n          \n           std::vector<int64_t> view_size(1 + mask.dense_dim()); \n        \n\n        \n          \n           view_size[0] = -1; \n        \n\n        \n          \n           for (int64_t d = 0; d < mask.dense_dim(); d++) { \n        \n\n        \n          \n             view_size[d + 1] = mask.size(mask.sparse_dim() + d); \n        \n\n        \n          \n           } \n        \n\n        \n          \n            \n        \n\n        \n          \n           Tensor t_view = t.view(view_size); \n        \n\n        \n          \n           // TODO: Re-audit this; it used to be an indexSelect directly into r_values \n        \n\n        \n          \n           at::index_select_out(r_values, t_view, 0, indices); \n        \n\n        \n          \n            \n        \n\n        \n          \n           return r; \n        \n    \n  \n\n. I feel bad about duplicating code. Let me know if this is not ok.", "body": "@ezyang I meant for code in condition: D.dim > S.sparse_dim, I just copy & paste from https://github.com/pytorch/pytorch/blob/482b1366e68cd32d3ae7671e7ae12c9488464a0a/aten/src/ATen/native/sparse/cuda/SparseCUDATensor.cpp#L33-L51. I feel bad about duplicating code. Let me know if this is not ok."}