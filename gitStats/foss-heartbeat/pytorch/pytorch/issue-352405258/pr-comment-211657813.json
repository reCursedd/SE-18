{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/211657813", "pull_request_review_id": 148126214, "id": 211657813, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMTY1NzgxMw==", "diff_hunk": "@@ -315,5 +315,32 @@ Tensor& matmul_out(Tensor &result, const Tensor & tensor1, const Tensor & tensor\n   return result;\n }\n \n+Tensor frobenius_norm(const Tensor& self) {\n+  IntList dim = {0, 1};\n+  return at::native::frobenius_norm(self, dim);\n }\n+\n+Tensor frobenius_norm(const Tensor& self, IntList dim, bool keepdim) {\n+  AT_CHECK(\n+      dim.size() <= 2,\n+      \"Improper number of chosend dimensions to do frobenius norm.\");\n+  if (dim.size() == 0) {\n+    Tensor result = self.type().tensor();\n+    return at::native::norm_out(result, self, 2, self.dim(), keepdim);\n+  }\n+  if (dim.size() == 1) {\n+    return at::native::norm(self, 2, dim[0], keepdim);\n+  }\n+  Tensor result = self.type().tensor();\n+  return at::sqrt(at::native::sum(self * self, dim, keepdim));\n }\n+\n+Tensor nuclear_norm(const Tensor& self) {\n+  AT_CHECK(", "path": "aten/src/ATen/native/LinearAlgebra.cpp", "position": null, "original_position": 25, "commit_id": "f0003a27f579fdbfe9725225dec4d6796d9f588f", "original_commit_id": "2f48e4bf618ee29f017b989e0f9eeb0ef849df08", "user": {"login": "vishwakftw", "id": 23639302, "node_id": "MDQ6VXNlcjIzNjM5MzAy", "avatar_url": "https://avatars2.githubusercontent.com/u/23639302?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vishwakftw", "html_url": "https://github.com/vishwakftw", "followers_url": "https://api.github.com/users/vishwakftw/followers", "following_url": "https://api.github.com/users/vishwakftw/following{/other_user}", "gists_url": "https://api.github.com/users/vishwakftw/gists{/gist_id}", "starred_url": "https://api.github.com/users/vishwakftw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vishwakftw/subscriptions", "organizations_url": "https://api.github.com/users/vishwakftw/orgs", "repos_url": "https://api.github.com/users/vishwakftw/repos", "events_url": "https://api.github.com/users/vishwakftw/events{/privacy}", "received_events_url": "https://api.github.com/users/vishwakftw/received_events", "type": "User", "site_admin": false}, "body": "There is one caveat, `gesvd` is not implemented for batched tensors. But I agree, we must have something like `numpy.linalg.norm()` for all of this.", "created_at": "2018-08-21T15:46:10Z", "updated_at": "2018-11-23T15:49:39Z", "html_url": "https://github.com/pytorch/pytorch/pull/10722#discussion_r211657813", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/10722", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/211657813"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/10722#discussion_r211657813"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/10722"}}, "body_html": "<p>There is one caveat, <code>gesvd</code> is not implemented for batched tensors. But I agree, we must have something like <code>numpy.linalg.norm()</code> for all of this.</p>", "body_text": "There is one caveat, gesvd is not implemented for batched tensors. But I agree, we must have something like numpy.linalg.norm() for all of this.", "in_reply_to_id": 211655298}