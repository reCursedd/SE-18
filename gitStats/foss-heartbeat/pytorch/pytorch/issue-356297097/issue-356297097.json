{"url": "https://api.github.com/repos/pytorch/pytorch/issues/11186", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/11186/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/11186/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/11186/events", "html_url": "https://github.com/pytorch/pytorch/issues/11186", "id": 356297097, "node_id": "MDU6SXNzdWUzNTYyOTcwOTc=", "number": 11186, "title": "[jit] scalar literals no longer get fused ", "user": {"login": "ngimel", "id": 15841449, "node_id": "MDQ6VXNlcjE1ODQxNDQ5", "avatar_url": "https://avatars3.githubusercontent.com/u/15841449?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ngimel", "html_url": "https://github.com/ngimel", "followers_url": "https://api.github.com/users/ngimel/followers", "following_url": "https://api.github.com/users/ngimel/following{/other_user}", "gists_url": "https://api.github.com/users/ngimel/gists{/gist_id}", "starred_url": "https://api.github.com/users/ngimel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ngimel/subscriptions", "organizations_url": "https://api.github.com/users/ngimel/orgs", "repos_url": "https://api.github.com/users/ngimel/repos", "events_url": "https://api.github.com/users/ngimel/events{/privacy}", "received_events_url": "https://api.github.com/users/ngimel/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 679953983, "node_id": "MDU6TGFiZWw2Nzk5NTM5ODM=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/jit", "name": "jit", "color": "c5def5", "default": false}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-09-02T16:54:11Z", "updated_at": "2018-09-10T16:59:37Z", "closed_at": null, "author_association": "CONTRIBUTOR", "body_html": "<p>E.g. below are <code>graph</code> and <code>graph_for</code> for the function</p>\n<pre><code>def constant_mul_add(x, y):\n    return (2 * x + 3 + y) * 4\n</code></pre>\n<p>nothing is fused (graph like this used to be fully fused).</p>\n<pre><code>graph(%0 : Float(10240, 1024)\n      %1 : Float(10240, 1024)) {\n  %2 : Long() = prim::Constant[value={2}]()\n  %3 : Float(10240, 1024) = aten::mul(%0, %2)\n  %4 : Long() = prim::Constant[value={3}]()\n  %5 : int = prim::Constant[value=1]()\n  %6 : Float(10240, 1024) = aten::add(%3, %4, %5)\n  %7 : int = prim::Constant[value=1]()\n  %8 : Float(10240, 1024) = aten::add(%6, %1, %7)\n  %9 : Long() = prim::Constant[value={4}]()\n  %10 : Float(10240, 1024) = aten::mul(%8, %9)\n  return (%10);\n}\n\ngraph(%0 : Float(*, *)\n      %1 : Float(*, *)) {\n  %2 : Long() = prim::Constant[value={2}]()\n  %3 : Float(*, *) = aten::mul(%0, %2)\n  %4 : Long() = prim::Constant[value={3}]()\n  %5 : int = prim::Constant[value=1]()\n  %6 : Float(*, *) = aten::add(%3, %4, %5)\n  %8 : Float(*, *) = aten::add(%6, %1, %5)\n  %9 : Long() = prim::Constant[value={4}]()\n  %10 : Float(*, *) = aten::mul(%8, %9)\n  return (%10);\n}\n</code></pre>", "body_text": "E.g. below are graph and graph_for for the function\ndef constant_mul_add(x, y):\n    return (2 * x + 3 + y) * 4\n\nnothing is fused (graph like this used to be fully fused).\ngraph(%0 : Float(10240, 1024)\n      %1 : Float(10240, 1024)) {\n  %2 : Long() = prim::Constant[value={2}]()\n  %3 : Float(10240, 1024) = aten::mul(%0, %2)\n  %4 : Long() = prim::Constant[value={3}]()\n  %5 : int = prim::Constant[value=1]()\n  %6 : Float(10240, 1024) = aten::add(%3, %4, %5)\n  %7 : int = prim::Constant[value=1]()\n  %8 : Float(10240, 1024) = aten::add(%6, %1, %7)\n  %9 : Long() = prim::Constant[value={4}]()\n  %10 : Float(10240, 1024) = aten::mul(%8, %9)\n  return (%10);\n}\n\ngraph(%0 : Float(*, *)\n      %1 : Float(*, *)) {\n  %2 : Long() = prim::Constant[value={2}]()\n  %3 : Float(*, *) = aten::mul(%0, %2)\n  %4 : Long() = prim::Constant[value={3}]()\n  %5 : int = prim::Constant[value=1]()\n  %6 : Float(*, *) = aten::add(%3, %4, %5)\n  %8 : Float(*, *) = aten::add(%6, %1, %5)\n  %9 : Long() = prim::Constant[value={4}]()\n  %10 : Float(*, *) = aten::mul(%8, %9)\n  return (%10);\n}", "body": "E.g. below are `graph` and `graph_for` for the function\r\n```\r\ndef constant_mul_add(x, y):\r\n    return (2 * x + 3 + y) * 4\r\n```\r\nnothing is fused (graph like this used to be fully fused). \r\n```\r\ngraph(%0 : Float(10240, 1024)\r\n      %1 : Float(10240, 1024)) {\r\n  %2 : Long() = prim::Constant[value={2}]()\r\n  %3 : Float(10240, 1024) = aten::mul(%0, %2)\r\n  %4 : Long() = prim::Constant[value={3}]()\r\n  %5 : int = prim::Constant[value=1]()\r\n  %6 : Float(10240, 1024) = aten::add(%3, %4, %5)\r\n  %7 : int = prim::Constant[value=1]()\r\n  %8 : Float(10240, 1024) = aten::add(%6, %1, %7)\r\n  %9 : Long() = prim::Constant[value={4}]()\r\n  %10 : Float(10240, 1024) = aten::mul(%8, %9)\r\n  return (%10);\r\n}\r\n\r\ngraph(%0 : Float(*, *)\r\n      %1 : Float(*, *)) {\r\n  %2 : Long() = prim::Constant[value={2}]()\r\n  %3 : Float(*, *) = aten::mul(%0, %2)\r\n  %4 : Long() = prim::Constant[value={3}]()\r\n  %5 : int = prim::Constant[value=1]()\r\n  %6 : Float(*, *) = aten::add(%3, %4, %5)\r\n  %8 : Float(*, *) = aten::add(%6, %1, %5)\r\n  %9 : Long() = prim::Constant[value={4}]()\r\n  %10 : Float(*, *) = aten::mul(%8, %9)\r\n  return (%10);\r\n}\r\n```"}