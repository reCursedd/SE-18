{"url": "https://api.github.com/repos/pytorch/pytorch/issues/13188", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/13188/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/13188/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/13188/events", "html_url": "https://github.com/pytorch/pytorch/issues/13188", "id": 374557040, "node_id": "MDU6SXNzdWUzNzQ1NTcwNDA=", "number": 13188, "title": "cudnn explicit paths and GCC multilib suffixes prevents detection of good cudnn headers", "user": {"login": "vadimkantorov", "id": 1041752, "node_id": "MDQ6VXNlcjEwNDE3NTI=", "avatar_url": "https://avatars0.githubusercontent.com/u/1041752?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vadimkantorov", "html_url": "https://github.com/vadimkantorov", "followers_url": "https://api.github.com/users/vadimkantorov/followers", "following_url": "https://api.github.com/users/vadimkantorov/following{/other_user}", "gists_url": "https://api.github.com/users/vadimkantorov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vadimkantorov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vadimkantorov/subscriptions", "organizations_url": "https://api.github.com/users/vadimkantorov/orgs", "repos_url": "https://api.github.com/users/vadimkantorov/repos", "events_url": "https://api.github.com/users/vadimkantorov/events{/privacy}", "received_events_url": "https://api.github.com/users/vadimkantorov/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-10-26T21:41:54Z", "updated_at": "2018-10-29T18:24:16Z", "closed_at": null, "author_association": "NONE", "body_html": "<p>I'm using gcc 4.8 on an old machine.</p>\n<p>The machine has <code>/usr/local/cuda-8.0/targets/x86_64-linux/cudnn.h</code> file (an old Cudnn version). Gcc will detect it, regardless of CUDNN_LIB_DIR, CUDNN_INCLUDE_DIR set, because Gcc first checks multilib/multiplatform suffixes, such as 'x86_x64-linux'.</p>\n<p>PyTorch could detect this situation and fail the build fast by trying to compile a program \"#include &lt;cudnn.h&gt;\" and check which effective path got used (gcc has some ways to print that if I remember well).</p>\n<p>I don't know of a guaranteed way to force Gcc to use a header by absolute path, '-I' would not work, again because of multilib.</p>\n<p>And of course it's relevant for all possible other headers that may be installed in system paths in multilib paths.</p>", "body_text": "I'm using gcc 4.8 on an old machine.\nThe machine has /usr/local/cuda-8.0/targets/x86_64-linux/cudnn.h file (an old Cudnn version). Gcc will detect it, regardless of CUDNN_LIB_DIR, CUDNN_INCLUDE_DIR set, because Gcc first checks multilib/multiplatform suffixes, such as 'x86_x64-linux'.\nPyTorch could detect this situation and fail the build fast by trying to compile a program \"#include <cudnn.h>\" and check which effective path got used (gcc has some ways to print that if I remember well).\nI don't know of a guaranteed way to force Gcc to use a header by absolute path, '-I' would not work, again because of multilib.\nAnd of course it's relevant for all possible other headers that may be installed in system paths in multilib paths.", "body": "I'm using gcc 4.8 on an old machine.\r\n\r\nThe machine has `/usr/local/cuda-8.0/targets/x86_64-linux/cudnn.h` file (an old Cudnn version). Gcc will detect it, regardless of CUDNN_LIB_DIR, CUDNN_INCLUDE_DIR set, because Gcc first checks multilib/multiplatform suffixes, such as 'x86_x64-linux'.\r\n\r\nPyTorch could detect this situation and fail the build fast by trying to compile a program \"#include <cudnn.h>\" and check which effective path got used (gcc has some ways to print that if I remember well).\r\n\r\nI don't know of a guaranteed way to force Gcc to use a header by absolute path, '-I' would not work, again because of multilib.\r\n\r\nAnd of course it's relevant for all possible other headers that may be installed in system paths in multilib paths."}