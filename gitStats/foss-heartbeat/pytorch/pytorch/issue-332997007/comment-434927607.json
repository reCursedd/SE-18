{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/434927607", "html_url": "https://github.com/pytorch/pytorch/issues/8582#issuecomment-434927607", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/8582", "id": 434927607, "node_id": "MDEyOklzc3VlQ29tbWVudDQzNDkyNzYwNw==", "user": {"login": "314rated", "id": 11274497, "node_id": "MDQ6VXNlcjExMjc0NDk3", "avatar_url": "https://avatars2.githubusercontent.com/u/11274497?v=4", "gravatar_id": "", "url": "https://api.github.com/users/314rated", "html_url": "https://github.com/314rated", "followers_url": "https://api.github.com/users/314rated/followers", "following_url": "https://api.github.com/users/314rated/following{/other_user}", "gists_url": "https://api.github.com/users/314rated/gists{/gist_id}", "starred_url": "https://api.github.com/users/314rated/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/314rated/subscriptions", "organizations_url": "https://api.github.com/users/314rated/orgs", "repos_url": "https://api.github.com/users/314rated/repos", "events_url": "https://api.github.com/users/314rated/events{/privacy}", "received_events_url": "https://api.github.com/users/314rated/received_events", "type": "User", "site_admin": false}, "created_at": "2018-11-01T04:32:36Z", "updated_at": "2018-11-01T04:32:36Z", "author_association": "NONE", "body_html": "<p>Thanks for your reply. Could you please clarify the following:</p>\n<ol>\n<li>Would leaving the LSTM in training mode (but you could .requires_grad_(false) the parameters and not passing them to the optimize ensure that Dropout and BatchNorm are off?</li>\n<li>All other nets are on GPU, so the tensors would be Cuda tensors. Would not using cudnn for LSTM make it compatible with rest of model?</li>\n</ol>", "body_text": "Thanks for your reply. Could you please clarify the following:\n\nWould leaving the LSTM in training mode (but you could .requires_grad_(false) the parameters and not passing them to the optimize ensure that Dropout and BatchNorm are off?\nAll other nets are on GPU, so the tensors would be Cuda tensors. Would not using cudnn for LSTM make it compatible with rest of model?", "body": "Thanks for your reply. Could you please clarify the following:\r\n1. Would leaving the LSTM in training mode (but you could .requires_grad_(false) the parameters and not passing them to the optimize ensure that Dropout and BatchNorm are off?\r\n2. All other nets are on GPU, so the tensors would be Cuda tensors. Would not using cudnn for LSTM make it compatible with rest of model?"}