{"url": "https://api.github.com/repos/pytorch/pytorch/issues/8703", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/8703/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/8703/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/8703/events", "html_url": "https://github.com/pytorch/pytorch/pull/8703", "id": 334206361, "node_id": "MDExOlB1bGxSZXF1ZXN0MTk2MjM5NDcy", "number": 8703, "title": "Add torch.backends.cudnn.is_available", "user": {"login": "goldsborough", "id": 6429851, "node_id": "MDQ6VXNlcjY0Mjk4NTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/6429851?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goldsborough", "html_url": "https://github.com/goldsborough", "followers_url": "https://api.github.com/users/goldsborough/followers", "following_url": "https://api.github.com/users/goldsborough/following{/other_user}", "gists_url": "https://api.github.com/users/goldsborough/gists{/gist_id}", "starred_url": "https://api.github.com/users/goldsborough/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goldsborough/subscriptions", "organizations_url": "https://api.github.com/users/goldsborough/orgs", "repos_url": "https://api.github.com/users/goldsborough/repos", "events_url": "https://api.github.com/users/goldsborough/events{/privacy}", "received_events_url": "https://api.github.com/users/goldsborough/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2018-06-20T18:52:33Z", "updated_at": "2018-11-23T15:45:54Z", "closed_at": "2018-06-20T21:18:04Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/8703", "html_url": "https://github.com/pytorch/pytorch/pull/8703", "diff_url": "https://github.com/pytorch/pytorch/pull/8703.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/8703.patch"}, "body_html": "<p>Some users are using <code>torch._C.has_cudnn</code> to determine if cudnn is available (e.g. <a href=\"https://github.com/pytorch/pytorch/pull/8313/files#diff-52a3dcb763bfba3076c1cc8aef9b1e72R17\">https://github.com/pytorch/pytorch/pull/8313/files#diff-52a3dcb763bfba3076c1cc8aef9b1e72R17</a>). There should probably be a friendlier way of doing this. This PR adds this function.</p>\n<p>Please advise if <code>torch._C.has_cudnn</code> is ok, or better <code>torch.backends.cudnn.is_acceptable(torch.tensor(1., device=CUDA_DEVICE))</code> which I've seen in other code.</p>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1310570\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/soumith\">@soumith</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=4583066\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/apaszke\">@apaszke</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=655866\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/colesbury\">@colesbury</a></p>", "body_text": "Some users are using torch._C.has_cudnn to determine if cudnn is available (e.g. https://github.com/pytorch/pytorch/pull/8313/files#diff-52a3dcb763bfba3076c1cc8aef9b1e72R17). There should probably be a friendlier way of doing this. This PR adds this function.\nPlease advise if torch._C.has_cudnn is ok, or better torch.backends.cudnn.is_acceptable(torch.tensor(1., device=CUDA_DEVICE)) which I've seen in other code.\n@soumith @apaszke @colesbury", "body": "Some users are using `torch._C.has_cudnn` to determine if cudnn is available (e.g. https://github.com/pytorch/pytorch/pull/8313/files#diff-52a3dcb763bfba3076c1cc8aef9b1e72R17). There should probably be a friendlier way of doing this. This PR adds this function.\r\n\r\nPlease advise if `torch._C.has_cudnn` is ok, or better `torch.backends.cudnn.is_acceptable(torch.tensor(1., device=CUDA_DEVICE))` which I've seen in other code.\r\n\r\n@soumith @apaszke @colesbury "}