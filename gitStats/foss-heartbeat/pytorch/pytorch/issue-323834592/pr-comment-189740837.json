{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/189740837", "pull_request_review_id": 121978798, "id": 189740837, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4OTc0MDgzNw==", "diff_hunk": "@@ -65,132 +65,128 @@ def set_printoptions(\n         PRINT_OPTS.linewidth = linewidth\n \n \n-def _get_min_log_scale():\n-    min_positive = float_info.min * float_info.epsilon  # get smallest denormal\n-    if min_positive == 0:  # use smallest normal if DAZ/FTZ is set\n-        min_positive = float_info.min\n-    return math.ceil(math.log(min_positive, 10))\n+class _Formatter(object):\n+    def __init__(self, tensor):\n+        tensor = tensor.view(tensor.nelement())", "path": "torch/_tensor_str.py", "position": null, "original_position": 11, "commit_id": "10f7365bedb1b558eb54600e42c9300eda3c28f3", "original_commit_id": "106c33422ad109fcc5743bc11da68ac435f840ab", "user": {"login": "li-roy", "id": 8813817, "node_id": "MDQ6VXNlcjg4MTM4MTc=", "avatar_url": "https://avatars0.githubusercontent.com/u/8813817?v=4", "gravatar_id": "", "url": "https://api.github.com/users/li-roy", "html_url": "https://github.com/li-roy", "followers_url": "https://api.github.com/users/li-roy/followers", "following_url": "https://api.github.com/users/li-roy/following{/other_user}", "gists_url": "https://api.github.com/users/li-roy/gists{/gist_id}", "starred_url": "https://api.github.com/users/li-roy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/li-roy/subscriptions", "organizations_url": "https://api.github.com/users/li-roy/orgs", "repos_url": "https://api.github.com/users/li-roy/repos", "events_url": "https://api.github.com/users/li-roy/events{/privacy}", "received_events_url": "https://api.github.com/users/li-roy/received_events", "type": "User", "site_admin": false}, "body": "The old code makes a contiguous copy anyways. (And so will the new code) The main thing the new method is doing is making sure we're setting the item width to be exactly as large as we need. For example, we want `[1, 2]` and not `[ 1,  2]` if no elements are negative. Actually attempting to format all the numbers was the best way I could think of dealing with cases like negative 0.", "created_at": "2018-05-21T23:26:42Z", "updated_at": "2018-11-23T15:44:27Z", "html_url": "https://github.com/pytorch/pytorch/pull/7632#discussion_r189740837", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/7632", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/189740837"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/7632#discussion_r189740837"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/7632"}}, "body_html": "<p>The old code makes a contiguous copy anyways. (And so will the new code) The main thing the new method is doing is making sure we're setting the item width to be exactly as large as we need. For example, we want <code>[1, 2]</code> and not <code>[ 1,  2]</code> if no elements are negative. Actually attempting to format all the numbers was the best way I could think of dealing with cases like negative 0.</p>", "body_text": "The old code makes a contiguous copy anyways. (And so will the new code) The main thing the new method is doing is making sure we're setting the item width to be exactly as large as we need. For example, we want [1, 2] and not [ 1,  2] if no elements are negative. Actually attempting to format all the numbers was the best way I could think of dealing with cases like negative 0.", "in_reply_to_id": 189372131}