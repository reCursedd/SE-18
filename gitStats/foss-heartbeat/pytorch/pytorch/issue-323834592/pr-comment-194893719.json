{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/194893719", "pull_request_review_id": 128154703, "id": 194893719, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDg5MzcxOQ==", "diff_hunk": "@@ -6661,13 +6661,61 @@ def test_print(self):\n             obj.__repr__()\n             str(obj)\n \n-        x = torch.Tensor([4, float('inf'), 1.5, float('-inf'), 0, float('nan'), 1])\n+        # test  big integer\n+        x = torch.tensor(2341234123412341)\n+        x_str = \"tensor(2341234123412341)\"\n+        self.assertEqual(x.__repr__(), str(x))\n+        self.assertEqual(x_str, str(x))\n+\n+        # test scientific notation\n+        x = torch.tensor([1e28, 1e-28])\n+        x_str = \"tensor([1.0000e+28, 1.0000e-28])\"\n+        self.assertEqual(x.__repr__(), str(x))\n+        self.assertEqual(x_str, str(x))\n+\n+        # test no leading space if all elements positive\n+        x = torch.tensor([1, 2])\n+        x_str = \"tensor([1, 2])\"\n+        self.assertEqual(x.__repr__(), str(x))\n+        self.assertEqual(x_str, str(x))\n+\n+        # test for leading space if there are negative elements\n+        x = torch.tensor([1, -2])\n+        x_str = \"tensor([ 1, -2])\"\n+        self.assertEqual(x.__repr__(), str(x))\n+        self.assertEqual(x_str, str(x))\n+\n+        # test inf and nan\n+        x = torch.tensor([4, float('inf'), 1.5, float('-inf'), 0, float('nan'), 1])\n+        x_str = \"tensor([4.0000,    inf, 1.5000,   -inf, 0.0000,    nan, 1.0000])\"\n+        self.assertEqual(x.__repr__(), str(x))\n+        self.assertEqual(x_str, str(x))\n+\n+        # test dtype\n+        x = torch.tensor([1e-324, 1e-323, 1e-322, 1e307, 1e308, 1e309], dtype=torch.double)", "path": "test/test_torch.py", "position": null, "original_position": 36, "commit_id": "10f7365bedb1b558eb54600e42c9300eda3c28f3", "original_commit_id": "38622182306da75e7dfd4cd773ef8c3c47f85c39", "user": {"login": "gchanan", "id": 3768583, "node_id": "MDQ6VXNlcjM3Njg1ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3768583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gchanan", "html_url": "https://github.com/gchanan", "followers_url": "https://api.github.com/users/gchanan/followers", "following_url": "https://api.github.com/users/gchanan/following{/other_user}", "gists_url": "https://api.github.com/users/gchanan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gchanan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gchanan/subscriptions", "organizations_url": "https://api.github.com/users/gchanan/orgs", "repos_url": "https://api.github.com/users/gchanan/repos", "events_url": "https://api.github.com/users/gchanan/events{/privacy}", "received_events_url": "https://api.github.com/users/gchanan/received_events", "type": "User", "site_admin": false}, "body": "what are we doing wrt if we change the default dtype and print it?  Can you test that?", "created_at": "2018-06-12T21:24:03Z", "updated_at": "2018-11-23T15:45:23Z", "html_url": "https://github.com/pytorch/pytorch/pull/7632#discussion_r194893719", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/7632", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/194893719"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/7632#discussion_r194893719"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/7632"}}, "body_html": "<p>what are we doing wrt if we change the default dtype and print it?  Can you test that?</p>", "body_text": "what are we doing wrt if we change the default dtype and print it?  Can you test that?"}