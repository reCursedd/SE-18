{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/377857752", "html_url": "https://github.com/pytorch/pytorch/pull/6172#issuecomment-377857752", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/6172", "id": 377857752, "node_id": "MDEyOklzc3VlQ29tbWVudDM3Nzg1Nzc1Mg==", "user": {"login": "fritzo", "id": 648532, "node_id": "MDQ6VXNlcjY0ODUzMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/648532?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fritzo", "html_url": "https://github.com/fritzo", "followers_url": "https://api.github.com/users/fritzo/followers", "following_url": "https://api.github.com/users/fritzo/following{/other_user}", "gists_url": "https://api.github.com/users/fritzo/gists{/gist_id}", "starred_url": "https://api.github.com/users/fritzo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fritzo/subscriptions", "organizations_url": "https://api.github.com/users/fritzo/orgs", "repos_url": "https://api.github.com/users/fritzo/repos", "events_url": "https://api.github.com/users/fritzo/events{/privacy}", "received_events_url": "https://api.github.com/users/fritzo/received_events", "type": "User", "site_admin": false}, "created_at": "2018-04-02T05:24:42Z", "updated_at": "2018-04-02T05:27:08Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=4736342\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/fehiepsi\">@fehiepsi</a> I'm inclined to implement something simple and correct before getting fancy. What you suggest seems incorrect to me:</p>\n<div class=\"highlight highlight-source-python\"><pre>term2 <span class=\"pl-k\">=</span> _batch_mm(_batch_inverse(q.scale_tril), p.scale_tril).pow(<span class=\"pl-c1\">2</span>).sum(<span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>)  <span class=\"pl-c\"><span class=\"pl-c\">#</span> correct?</span></pre></div>\n<p>This is doing an element-wise square, then summing over the last axis. Can you explain why that is equivalent to a matrix-wise <code>torch.bmm(m, m.transpose(-1, -2)).diag().sum()</code>, where <code>m = _batch_mm(_batch_inverse(q.scale_tril), p.scale_tril)</code>?</p>", "body_text": "@fehiepsi I'm inclined to implement something simple and correct before getting fancy. What you suggest seems incorrect to me:\nterm2 = _batch_mm(_batch_inverse(q.scale_tril), p.scale_tril).pow(2).sum(-1)  # correct?\nThis is doing an element-wise square, then summing over the last axis. Can you explain why that is equivalent to a matrix-wise torch.bmm(m, m.transpose(-1, -2)).diag().sum(), where m = _batch_mm(_batch_inverse(q.scale_tril), p.scale_tril)?", "body": "@fehiepsi I'm inclined to implement something simple and correct before getting fancy. What you suggest seems incorrect to me:\r\n```py\r\nterm2 = _batch_mm(_batch_inverse(q.scale_tril), p.scale_tril).pow(2).sum(-1)  # correct?\r\n```\r\nThis is doing an element-wise square, then summing over the last axis. Can you explain why that is equivalent to a matrix-wise `torch.bmm(m, m.transpose(-1, -2)).diag().sum()`, where `m = _batch_mm(_batch_inverse(q.scale_tril), p.scale_tril)`?"}