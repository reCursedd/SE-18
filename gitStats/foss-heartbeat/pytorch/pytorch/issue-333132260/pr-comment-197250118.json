{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/197250118", "pull_request_review_id": 130956963, "id": 197250118, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NzI1MDExOA==", "diff_hunk": "@@ -521,35 +523,38 @@ def adaptive_max_pool3d(input, output_size, return_indices=False):\n     output_size: the target output size (single integer)\n \"\"\")\n \n-adaptive_avg_pool2d = _add_docstr(torch._C._nn.adaptive_avg_pool2d, r\"\"\"\n-adaptive_avg_pool2d(input, output_size) -> Tensor\n \n-Applies a 2D adaptive average pooling over an input signal composed of\n-several input planes.\n+def adaptive_avg_pool2d(input, output_size):\n+    r\"\"\"\n+    Applies a 2D adaptive average pooling over an input signal composed of\n+    several input planes.\n \n-See :class:`~torch.nn.AdaptiveAvgPool2d` for details and output shape.\n+    See :class:`~torch.nn.AdaptiveAvgPool2d` for details and output shape.\n \n-Args:\n-    output_size: the target output size (single integer or\n-        double-integer tuple)\n-\"\"\")\n+    Args:\n+        output_size: the target output size (single integer or\n+            double-integer tuple)\n+    \"\"\"\n+    output_size = set_output_size(input.size()[2:], output_size)\n+    return torch._C._nn.adaptive_avg_pool2d(input, output_size)\n \n-adaptive_avg_pool3d = _add_docstr(torch._C._nn.adaptive_avg_pool3d, r\"\"\"\n-adaptive_avg_pool3d(input, output_size) -> Tensor\n \n-Applies a 3D adaptive average pooling over an input signal composed of\n-several input planes.\n+def adaptive_avg_pool3d(input, output_size):\n+    r\"\"\"\n+    Applies a 3D adaptive average pooling over an input signal composed of\n+    several input planes.\n \n-See :class:`~torch.nn.AdaptiveAvgPool3d` for details and output shape.\n+    See :class:`~torch.nn.AdaptiveAvgPool3d` for details and output shape.\n \n-Args:\n-    output_size: the target output size (single integer or\n-        triple-integer tuple)\n-\"\"\")\n+    Args:\n+        output_size: the target output size (single integer or\n+            triple-integer tuple)\n+    \"\"\"\n+    output_size = set_output_size(input.size()[2:], output_size)", "path": "torch/nn/functional.py", "position": null, "original_position": 74, "commit_id": "bcdb62c80684ea50c221cff58c6bc5b2f15692e4", "original_commit_id": "fcabf4d0a697424ea6d72bf0c77ff089b900b6e9", "user": {"login": "SsnL", "id": 5674597, "node_id": "MDQ6VXNlcjU2NzQ1OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5674597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SsnL", "html_url": "https://github.com/SsnL", "followers_url": "https://api.github.com/users/SsnL/followers", "following_url": "https://api.github.com/users/SsnL/following{/other_user}", "gists_url": "https://api.github.com/users/SsnL/gists{/gist_id}", "starred_url": "https://api.github.com/users/SsnL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SsnL/subscriptions", "organizations_url": "https://api.github.com/users/SsnL/orgs", "repos_url": "https://api.github.com/users/SsnL/repos", "events_url": "https://api.github.com/users/SsnL/events{/privacy}", "received_events_url": "https://api.github.com/users/SsnL/received_events", "type": "User", "site_admin": false}, "body": "This will be problematic if input has less than `len(output_size) - 2` dimensions. (loop in `set_output_size` will throw).\r\n\r\nHow about writing such a helper?\r\n```py\r\n# uses `defaults[-len(input):]` as default values for `input`\r\ndef _list_with_default(input, defaults):\r\n  if len(defaults) < len(input):\r\n     raise\r\n  return [v if v is not None else d for v, d in zip(input, default[-len(input):])]\r\n```\r\nYou can tweak the name/imple/error message to make it nicer. What do you think?\r\n\r\nWith something like this you should also add 1 or 2 test that asserts some inputs triggers error.", "created_at": "2018-06-21T19:21:48Z", "updated_at": "2018-11-23T15:46:03Z", "html_url": "https://github.com/pytorch/pytorch/pull/8596#discussion_r197250118", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/8596", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/197250118"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/8596#discussion_r197250118"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/8596"}}, "body_html": "<p>This will be problematic if input has less than <code>len(output_size) - 2</code> dimensions. (loop in <code>set_output_size</code> will throw).</p>\n<p>How about writing such a helper?</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-c\"><span class=\"pl-c\">#</span> uses `defaults[-len(input):]` as default values for `input`</span>\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">_list_with_default</span>(<span class=\"pl-smi\">input</span>, <span class=\"pl-smi\">defaults</span>):\n  <span class=\"pl-k\">if</span> <span class=\"pl-c1\">len</span>(defaults) <span class=\"pl-k\">&lt;</span> <span class=\"pl-c1\">len</span>(<span class=\"pl-c1\">input</span>):\n     <span class=\"pl-k\">raise</span>\n  <span class=\"pl-k\">return</span> [v <span class=\"pl-k\">if</span> v <span class=\"pl-k\">is</span> <span class=\"pl-k\">not</span> <span class=\"pl-c1\">None</span> <span class=\"pl-k\">else</span> d <span class=\"pl-k\">for</span> v, d <span class=\"pl-k\">in</span> <span class=\"pl-c1\">zip</span>(<span class=\"pl-c1\">input</span>, default[<span class=\"pl-k\">-</span><span class=\"pl-c1\">len</span>(<span class=\"pl-c1\">input</span>):])]</pre></div>\n<p>You can tweak the name/imple/error message to make it nicer. What do you think?</p>\n<p>With something like this you should also add 1 or 2 test that asserts some inputs triggers error.</p>", "body_text": "This will be problematic if input has less than len(output_size) - 2 dimensions. (loop in set_output_size will throw).\nHow about writing such a helper?\n# uses `defaults[-len(input):]` as default values for `input`\ndef _list_with_default(input, defaults):\n  if len(defaults) < len(input):\n     raise\n  return [v if v is not None else d for v, d in zip(input, default[-len(input):])]\nYou can tweak the name/imple/error message to make it nicer. What do you think?\nWith something like this you should also add 1 or 2 test that asserts some inputs triggers error."}