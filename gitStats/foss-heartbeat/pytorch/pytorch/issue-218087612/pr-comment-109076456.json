{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/109076456", "pull_request_review_id": 30154783, "id": 109076456, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwOTA3NjQ1Ng==", "diff_hunk": "@@ -461,3 +461,10 @@ def __repr__(self):\n             tmpstr = tmpstr + '  (' + key + '): ' + modstr + '\\n'\n         tmpstr = tmpstr + ')'\n         return tmpstr\n+\n+    def __dir__(self):\n+        _moduel_attrs = dir(self.__class__)\n+        _parameters = self._parameters.keys()\n+        _modules = self._modules.keys()\n+        _attrs = self.__dict__.keys()\n+        return _moduel_attrs + _parameters + _modules + _attrs", "path": "torch/nn/modules/module.py", "position": null, "original_position": 10, "commit_id": "4f787a1786f620ebf200ec39cf4ba6cc4c27fa2c", "original_commit_id": "c4f940d7fa152fc2dcd8c652e0a14259e8424175", "user": {"login": "chenyuntc", "id": 9301117, "node_id": "MDQ6VXNlcjkzMDExMTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/9301117?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chenyuntc", "html_url": "https://github.com/chenyuntc", "followers_url": "https://api.github.com/users/chenyuntc/followers", "following_url": "https://api.github.com/users/chenyuntc/following{/other_user}", "gists_url": "https://api.github.com/users/chenyuntc/gists{/gist_id}", "starred_url": "https://api.github.com/users/chenyuntc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chenyuntc/subscriptions", "organizations_url": "https://api.github.com/users/chenyuntc/orgs", "repos_url": "https://api.github.com/users/chenyuntc/repos", "events_url": "https://api.github.com/users/chenyuntc/events{/privacy}", "received_events_url": "https://api.github.com/users/chenyuntc/received_events", "type": "User", "site_admin": false}, "body": "I don't think we should replace `dir(self.__class__)` with `super(Module, self).__dir__()`, it will raise `AttributeError: 'super' object has no attribute '__dir__'` when calling `dir(Linear(10,2))`. \r\n\r\nWhen calling `dir(self.__class__)` I wanna got all methods of the current module. `Linear` for example, I wanna get method `reset_parameters` that is only available for `Linear`.\r\n\r\nSo I think maybe it should be implemented like this\r\n```python\r\n    def __dir__(self):\r\n        _module_attrs = dir(self.__class__)\r\n        _attrs = self.__dict__.keys()\r\n        _parameters = self._parameters.keys()\r\n        _modules = self._modules.keys()\r\n        _buffers = self._buffers.keys()\r\n        return _module_attrs + _attrs + _parameters + _modules + _buffers\r\n```\r\n ", "created_at": "2017-03-31T02:17:54Z", "updated_at": "2018-11-23T15:32:55Z", "html_url": "https://github.com/pytorch/pytorch/pull/1142#discussion_r109076456", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/1142", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/109076456"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/1142#discussion_r109076456"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/1142"}}, "body_html": "<p>I don't think we should replace <code>dir(self.__class__)</code> with <code>super(Module, self).__dir__()</code>, it will raise <code>AttributeError: 'super' object has no attribute '__dir__'</code> when calling <code>dir(Linear(10,2))</code>.</p>\n<p>When calling <code>dir(self.__class__)</code> I wanna got all methods of the current module. <code>Linear</code> for example, I wanna get method <code>reset_parameters</code> that is only available for <code>Linear</code>.</p>\n<p>So I think maybe it should be implemented like this</p>\n<div class=\"highlight highlight-source-python\"><pre>    <span class=\"pl-k\">def</span> <span class=\"pl-c1\">__dir__</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>):\n        _module_attrs <span class=\"pl-k\">=</span> <span class=\"pl-c1\">dir</span>(<span class=\"pl-c1\">self</span>.<span class=\"pl-c1\">__class__</span>)\n        _attrs <span class=\"pl-k\">=</span> <span class=\"pl-c1\">self</span>.<span class=\"pl-c1\">__dict__</span>.keys()\n        _parameters <span class=\"pl-k\">=</span> <span class=\"pl-c1\">self</span>._parameters.keys()\n        _modules <span class=\"pl-k\">=</span> <span class=\"pl-c1\">self</span>._modules.keys()\n        _buffers <span class=\"pl-k\">=</span> <span class=\"pl-c1\">self</span>._buffers.keys()\n        <span class=\"pl-k\">return</span> _module_attrs <span class=\"pl-k\">+</span> _attrs <span class=\"pl-k\">+</span> _parameters <span class=\"pl-k\">+</span> _modules <span class=\"pl-k\">+</span> _buffers</pre></div>", "body_text": "I don't think we should replace dir(self.__class__) with super(Module, self).__dir__(), it will raise AttributeError: 'super' object has no attribute '__dir__' when calling dir(Linear(10,2)).\nWhen calling dir(self.__class__) I wanna got all methods of the current module. Linear for example, I wanna get method reset_parameters that is only available for Linear.\nSo I think maybe it should be implemented like this\n    def __dir__(self):\n        _module_attrs = dir(self.__class__)\n        _attrs = self.__dict__.keys()\n        _parameters = self._parameters.keys()\n        _modules = self._modules.keys()\n        _buffers = self._buffers.keys()\n        return _module_attrs + _attrs + _parameters + _modules + _buffers", "in_reply_to_id": 109040724}