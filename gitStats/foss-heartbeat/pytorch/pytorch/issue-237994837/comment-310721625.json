{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/310721625", "html_url": "https://github.com/pytorch/pytorch/issues/1886#issuecomment-310721625", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/1886", "id": 310721625, "node_id": "MDEyOklzc3VlQ29tbWVudDMxMDcyMTYyNQ==", "user": {"login": "ASavchenkov", "id": 5834478, "node_id": "MDQ6VXNlcjU4MzQ0Nzg=", "avatar_url": "https://avatars0.githubusercontent.com/u/5834478?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ASavchenkov", "html_url": "https://github.com/ASavchenkov", "followers_url": "https://api.github.com/users/ASavchenkov/followers", "following_url": "https://api.github.com/users/ASavchenkov/following{/other_user}", "gists_url": "https://api.github.com/users/ASavchenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/ASavchenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ASavchenkov/subscriptions", "organizations_url": "https://api.github.com/users/ASavchenkov/orgs", "repos_url": "https://api.github.com/users/ASavchenkov/repos", "events_url": "https://api.github.com/users/ASavchenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/ASavchenkov/received_events", "type": "User", "site_admin": false}, "created_at": "2017-06-23T17:09:21Z", "updated_at": "2017-06-23T17:09:21Z", "author_association": "NONE", "body_html": "<p>Got it. So autograd itself doesn't quite care what type it is as long as it matches what came in. I just shouldn't expect \"stock\" pytorch modules to be defined for operations that aren't floating point? That is to say if I define an integer gradient for a custom operation I should be fine?</p>", "body_text": "Got it. So autograd itself doesn't quite care what type it is as long as it matches what came in. I just shouldn't expect \"stock\" pytorch modules to be defined for operations that aren't floating point? That is to say if I define an integer gradient for a custom operation I should be fine?", "body": "Got it. So autograd itself doesn't quite care what type it is as long as it matches what came in. I just shouldn't expect \"stock\" pytorch modules to be defined for operations that aren't floating point? That is to say if I define an integer gradient for a custom operation I should be fine?"}