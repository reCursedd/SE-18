{"url": "https://api.github.com/repos/pytorch/pytorch/issues/8680", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/8680/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/8680/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/8680/events", "html_url": "https://github.com/pytorch/pytorch/pull/8680", "id": 333897038, "node_id": "MDExOlB1bGxSZXF1ZXN0MTk2MDAyMzky", "number": 8680, "title": "[C++ API] Use torch::Tensor instead of at::Tensor/Variable mix", "user": {"login": "goldsborough", "id": 6429851, "node_id": "MDQ6VXNlcjY0Mjk4NTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/6429851?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goldsborough", "html_url": "https://github.com/goldsborough", "followers_url": "https://api.github.com/users/goldsborough/followers", "following_url": "https://api.github.com/users/goldsborough/following{/other_user}", "gists_url": "https://api.github.com/users/goldsborough/gists{/gist_id}", "starred_url": "https://api.github.com/users/goldsborough/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goldsborough/subscriptions", "organizations_url": "https://api.github.com/users/goldsborough/orgs", "repos_url": "https://api.github.com/users/goldsborough/repos", "events_url": "https://api.github.com/users/goldsborough/events{/privacy}", "received_events_url": "https://api.github.com/users/goldsborough/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-06-20T01:53:55Z", "updated_at": "2018-06-25T02:03:47Z", "closed_at": "2018-06-25T02:03:40Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/8680", "html_url": "https://github.com/pytorch/pytorch/pull/8680", "diff_url": "https://github.com/pytorch/pytorch/pull/8680.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/8680.patch"}, "body_html": "<p>This PR creates a <code>namespace torch { using Tensor = autograd::Variable; }</code> typedef and uses this type exclusively instead of the current mix of <code>at::Tensor</code> and <code>autograd::Variable</code>. This is so that users only shall see <code>torch::Tensor</code> and not be aware (largely) of <code>at::Tensor</code>.</p>\n<p>Mostly this PR then codemods the C++ API. Complications arose in:</p>\n<ol>\n<li>Optimizers had to be updated to store Variables (<code>torch::Tensor</code>) instead of <code>at::Tensor</code>s,</li>\n<li>Serialization code had to be updated to use Variables instead of <code>at::Tensor</code>,</li>\n<li>Had to create <code>TensorRange</code>, which copies a range of <code>torch::Tensor</code>s into a vector of <code>at::Tensor</code>, and then converts implicitly to an <code>ArrayRef&lt;at::Tensor&gt;</code>. This is to support calling functions like <code>at::stack()</code> with a vector of <code>torch::Tensor</code>, which is currently not possible since <code>vector&lt;Variable&gt;</code> is unrelated to <code>vector&lt;Tensor&gt;</code> in C++.</li>\n</ol>\n<p>One small caveat: ambiguity arises around <code>Tensor</code> when you do <code>using namespace torch</code>, but if anything that's a reason not to use such blanket using directives.</p>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=88510\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/jgehring\">@jgehring</a> could you look at serialization stuff (Or raise any other general concerns)?</p>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=3605224\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ebetica\">@ebetica</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=13564\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ezyang\">@ezyang</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=4583066\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/apaszke\">@apaszke</a></p>", "body_text": "This PR creates a namespace torch { using Tensor = autograd::Variable; } typedef and uses this type exclusively instead of the current mix of at::Tensor and autograd::Variable. This is so that users only shall see torch::Tensor and not be aware (largely) of at::Tensor.\nMostly this PR then codemods the C++ API. Complications arose in:\n\nOptimizers had to be updated to store Variables (torch::Tensor) instead of at::Tensors,\nSerialization code had to be updated to use Variables instead of at::Tensor,\nHad to create TensorRange, which copies a range of torch::Tensors into a vector of at::Tensor, and then converts implicitly to an ArrayRef<at::Tensor>. This is to support calling functions like at::stack() with a vector of torch::Tensor, which is currently not possible since vector<Variable> is unrelated to vector<Tensor> in C++.\n\nOne small caveat: ambiguity arises around Tensor when you do using namespace torch, but if anything that's a reason not to use such blanket using directives.\n@jgehring could you look at serialization stuff (Or raise any other general concerns)?\n@ebetica @ezyang @apaszke", "body": "This PR creates a `namespace torch { using Tensor = autograd::Variable; }` typedef and uses this type exclusively instead of the current mix of `at::Tensor` and `autograd::Variable`. This is so that users only shall see `torch::Tensor` and not be aware (largely) of `at::Tensor`.\r\n\r\nMostly this PR then codemods the C++ API. Complications arose in:\r\n\r\n1. Optimizers had to be updated to store Variables (`torch::Tensor`) instead of `at::Tensor`s,\r\n2. Serialization code had to be updated to use Variables instead of `at::Tensor`,\r\n3. Had to create `TensorRange`, which copies a range of `torch::Tensor`s into a vector of `at::Tensor`, and then converts implicitly to an `ArrayRef<at::Tensor>`. This is to support calling functions like `at::stack()` with a vector of `torch::Tensor`, which is currently not possible since `vector<Variable>` is unrelated to `vector<Tensor>` in C++.\r\n\r\nOne small caveat: ambiguity arises around `Tensor` when you do `using namespace torch`, but if anything that's a reason not to use such blanket using directives.\r\n\r\n@jgehring could you look at serialization stuff (Or raise any other general concerns)? \r\n\r\n@ebetica @ezyang @apaszke "}