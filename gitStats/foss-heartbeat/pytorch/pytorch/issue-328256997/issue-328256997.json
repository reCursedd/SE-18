{"url": "https://api.github.com/repos/pytorch/pytorch/issues/7999", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/7999/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/7999/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/7999/events", "html_url": "https://github.com/pytorch/pytorch/issues/7999", "id": 328256997, "node_id": "MDU6SXNzdWUzMjgyNTY5OTc=", "number": 7999, "title": "ReLU with NaN as input gives 0 as output", "user": {"login": "codinfox", "id": 2647449, "node_id": "MDQ6VXNlcjI2NDc0NDk=", "avatar_url": "https://avatars0.githubusercontent.com/u/2647449?v=4", "gravatar_id": "", "url": "https://api.github.com/users/codinfox", "html_url": "https://github.com/codinfox", "followers_url": "https://api.github.com/users/codinfox/followers", "following_url": "https://api.github.com/users/codinfox/following{/other_user}", "gists_url": "https://api.github.com/users/codinfox/gists{/gist_id}", "starred_url": "https://api.github.com/users/codinfox/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/codinfox/subscriptions", "organizations_url": "https://api.github.com/users/codinfox/orgs", "repos_url": "https://api.github.com/users/codinfox/repos", "events_url": "https://api.github.com/users/codinfox/events{/privacy}", "received_events_url": "https://api.github.com/users/codinfox/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 443483881, "node_id": "MDU6TGFiZWw0NDM0ODM4ODE=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/todo", "name": "todo", "color": "c2e0c6", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "SsnL", "id": 5674597, "node_id": "MDQ6VXNlcjU2NzQ1OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5674597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SsnL", "html_url": "https://github.com/SsnL", "followers_url": "https://api.github.com/users/SsnL/followers", "following_url": "https://api.github.com/users/SsnL/following{/other_user}", "gists_url": "https://api.github.com/users/SsnL/gists{/gist_id}", "starred_url": "https://api.github.com/users/SsnL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SsnL/subscriptions", "organizations_url": "https://api.github.com/users/SsnL/orgs", "repos_url": "https://api.github.com/users/SsnL/repos", "events_url": "https://api.github.com/users/SsnL/events{/privacy}", "received_events_url": "https://api.github.com/users/SsnL/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "SsnL", "id": 5674597, "node_id": "MDQ6VXNlcjU2NzQ1OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5674597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SsnL", "html_url": "https://github.com/SsnL", "followers_url": "https://api.github.com/users/SsnL/followers", "following_url": "https://api.github.com/users/SsnL/following{/other_user}", "gists_url": "https://api.github.com/users/SsnL/gists{/gist_id}", "starred_url": "https://api.github.com/users/SsnL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SsnL/subscriptions", "organizations_url": "https://api.github.com/users/SsnL/orgs", "repos_url": "https://api.github.com/users/SsnL/repos", "events_url": "https://api.github.com/users/SsnL/events{/privacy}", "received_events_url": "https://api.github.com/users/SsnL/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 5, "created_at": "2018-05-31T18:55:16Z", "updated_at": "2018-11-08T13:37:51Z", "closed_at": "2018-06-01T18:08:02Z", "author_association": "NONE", "body_html": "<h2>Issue description</h2>\n<p>It seems <code>torch.relu()</code> when given <code>nan</code> as input, it produces 0 instead of <code>nan</code>. I am wondering if this is the intended behavior. This behavior actually hides code bugs, making troubleshooting harder.</p>\n<h2>Code example</h2>\n<div class=\"highlight highlight-source-python\"><pre>a <span class=\"pl-k\">=</span> torch.Tensor(<span class=\"pl-c1\">1</span>).fill_(<span class=\"pl-c1\">float</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>nan<span class=\"pl-pds\">'</span></span>))\ntorch.relu(a)  <span class=\"pl-c\"><span class=\"pl-c\">#</span> =&gt; 0</span></pre></div>\n<h2>System Info</h2>\n<p>Collecting environment information...<br>\nPyTorch version: 0.4.0<br>\nIs debug build: No<br>\nCUDA used to build PyTorch: 8.0.61</p>\n<p>OS: Ubuntu 14.04.5 LTS<br>\nGCC version: (Ubuntu 4.8.5-4ubuntu8~14.04.2) 4.8.5<br>\nCMake version: version 3.2.2</p>\n<p>Python version: 3.5<br>\nIs CUDA available: Yes<br>\nCUDA runtime version: 8.0.61<br>\nGPU models and configuration: GPU 0: GeForce GTX 1080<br>\nNvidia driver version: 384.111<br>\ncuDNN version: Probably one of the following:<br>\n/usr/lib/x86_64-linux-gnu/libcudnn.so.7.0.5<br>\n/usr/local/cuda-8.0/lib64/libcudnn.so<br>\n/usr/local/cuda-8.0/lib64/libcudnn.so.5<br>\n/usr/local/cuda-8.0/lib64/libcudnn.so.5.1.10<br>\n/usr/local/cuda-8.0/lib64/libcudnn.so.7<br>\n/usr/local/cuda-8.0/lib64/libcudnn.so.7.0.5<br>\n/usr/local/cuda-8.0/lib64/libcudnn_static.a</p>\n<p>Versions of relevant libraries:<br>\n[pip] numpy (1.13.3)<br>\n[pip] numpydoc (0.7.0)<br>\n[pip] torch (0.4.0)<br>\n[pip] torchvision (0.2.0)<br>\n[conda] pytorch                   0.4.0           py35_cuda8.0.61_cudnn7.1.2_1    pytorch<br>\n[conda] torchvision               0.2.0                    py35_0</p>", "body_text": "Issue description\nIt seems torch.relu() when given nan as input, it produces 0 instead of nan. I am wondering if this is the intended behavior. This behavior actually hides code bugs, making troubleshooting harder.\nCode example\na = torch.Tensor(1).fill_(float('nan'))\ntorch.relu(a)  # => 0\nSystem Info\nCollecting environment information...\nPyTorch version: 0.4.0\nIs debug build: No\nCUDA used to build PyTorch: 8.0.61\nOS: Ubuntu 14.04.5 LTS\nGCC version: (Ubuntu 4.8.5-4ubuntu8~14.04.2) 4.8.5\nCMake version: version 3.2.2\nPython version: 3.5\nIs CUDA available: Yes\nCUDA runtime version: 8.0.61\nGPU models and configuration: GPU 0: GeForce GTX 1080\nNvidia driver version: 384.111\ncuDNN version: Probably one of the following:\n/usr/lib/x86_64-linux-gnu/libcudnn.so.7.0.5\n/usr/local/cuda-8.0/lib64/libcudnn.so\n/usr/local/cuda-8.0/lib64/libcudnn.so.5\n/usr/local/cuda-8.0/lib64/libcudnn.so.5.1.10\n/usr/local/cuda-8.0/lib64/libcudnn.so.7\n/usr/local/cuda-8.0/lib64/libcudnn.so.7.0.5\n/usr/local/cuda-8.0/lib64/libcudnn_static.a\nVersions of relevant libraries:\n[pip] numpy (1.13.3)\n[pip] numpydoc (0.7.0)\n[pip] torch (0.4.0)\n[pip] torchvision (0.2.0)\n[conda] pytorch                   0.4.0           py35_cuda8.0.61_cudnn7.1.2_1    pytorch\n[conda] torchvision               0.2.0                    py35_0", "body": "## Issue description\r\n\r\nIt seems `torch.relu()` when given `nan` as input, it produces 0 instead of `nan`. I am wondering if this is the intended behavior. This behavior actually hides code bugs, making troubleshooting harder.\r\n\r\n## Code example\r\n\r\n```python\r\na = torch.Tensor(1).fill_(float('nan'))\r\ntorch.relu(a)  # => 0\r\n```\r\n\r\n## System Info\r\nCollecting environment information...\r\nPyTorch version: 0.4.0\r\nIs debug build: No\r\nCUDA used to build PyTorch: 8.0.61\r\n\r\nOS: Ubuntu 14.04.5 LTS\r\nGCC version: (Ubuntu 4.8.5-4ubuntu8~14.04.2) 4.8.5\r\nCMake version: version 3.2.2\r\n\r\nPython version: 3.5\r\nIs CUDA available: Yes\r\nCUDA runtime version: 8.0.61\r\nGPU models and configuration: GPU 0: GeForce GTX 1080\r\nNvidia driver version: 384.111\r\ncuDNN version: Probably one of the following:\r\n/usr/lib/x86_64-linux-gnu/libcudnn.so.7.0.5\r\n/usr/local/cuda-8.0/lib64/libcudnn.so\r\n/usr/local/cuda-8.0/lib64/libcudnn.so.5\r\n/usr/local/cuda-8.0/lib64/libcudnn.so.5.1.10\r\n/usr/local/cuda-8.0/lib64/libcudnn.so.7\r\n/usr/local/cuda-8.0/lib64/libcudnn.so.7.0.5\r\n/usr/local/cuda-8.0/lib64/libcudnn_static.a\r\n\r\nVersions of relevant libraries:\r\n[pip] numpy (1.13.3)\r\n[pip] numpydoc (0.7.0)\r\n[pip] torch (0.4.0)\r\n[pip] torchvision (0.2.0)\r\n[conda] pytorch                   0.4.0           py35_cuda8.0.61_cudnn7.1.2_1    pytorch\r\n[conda] torchvision               0.2.0                    py35_0\r\n"}