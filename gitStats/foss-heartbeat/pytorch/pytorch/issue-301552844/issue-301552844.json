{"url": "https://api.github.com/repos/pytorch/pytorch/issues/5504", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/5504/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/5504/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/5504/events", "html_url": "https://github.com/pytorch/pytorch/issues/5504", "id": 301552844, "node_id": "MDU6SXNzdWUzMDE1NTI4NDQ=", "number": 5504, "title": "Disabling ibverbs fails", "user": {"login": "wscullin", "id": 967536, "node_id": "MDQ6VXNlcjk2NzUzNg==", "avatar_url": "https://avatars3.githubusercontent.com/u/967536?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wscullin", "html_url": "https://github.com/wscullin", "followers_url": "https://api.github.com/users/wscullin/followers", "following_url": "https://api.github.com/users/wscullin/following{/other_user}", "gists_url": "https://api.github.com/users/wscullin/gists{/gist_id}", "starred_url": "https://api.github.com/users/wscullin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wscullin/subscriptions", "organizations_url": "https://api.github.com/users/wscullin/orgs", "repos_url": "https://api.github.com/users/wscullin/repos", "events_url": "https://api.github.com/users/wscullin/events{/privacy}", "received_events_url": "https://api.github.com/users/wscullin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-03-01T20:44:00Z", "updated_at": "2018-03-07T16:18:49Z", "closed_at": "2018-03-07T16:18:49Z", "author_association": "NONE", "body_html": "<p>I think <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"297584429\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/5264\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/pytorch/pytorch/pull/5264/hovercard\" href=\"https://github.com/pytorch/pytorch/pull/5264\">#5264</a> may not go far enough. In environments like the Cray XC40/XC50, Intel OmniPath clusters, some Cisco usNIC clusters, there is an IB fabric in places to carry file I/O traffic, but not MPI/IP/other IPC traffic. This means we want to be able to fully disable the use of IB verbs in these environments. We tried:</p>\n<div class=\"highlight highlight-source-shell\"><pre><span class=\"pl-k\">export</span> WITH_GLOO_IBVERBS=0\n<span class=\"pl-k\">export</span> USE_IBVERBS=0\nWITH_GLOO_IBVERBS=0 python setup.py build --verbose</pre></div>\n<p>and still wound up with:</p>\n<p><code>-DWITH_GLOO_IBVERBS=1</code> and <code>-DUSE_IBVERBS=1</code></p>\n<p>throughout the build.</p>\n<p>I can work around by editing the function <code>should_build_ib()</code> to use an <code>check_env_flag</code> to check for <code>WITH_GLOO_IBVERBS</code> or <code>USE_IBVERBS</code> in the environment in  <code>pytorch/tools/setup_helpers/dist_check.py</code>, but think I haven't been through enough in my local edits to handle the default case (finding IB when the user doesn't specify one way or another) and am not sure if I've tracked down all possible side-effects.</p>\n<h2>Environment Information</h2>\n<p>When submitting a bug report, please include the following information (where relevant):</p>\n<ul>\n<li>OS: Linux (Cray Linux Environment 6, but also checked in Clear Linux 21060)</li>\n<li>PyTorch version: Master <a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/pytorch/pytorch/commit/377d8969699a8120dd04bde9e04b4269747b88c2/hovercard\" href=\"https://github.com/pytorch/pytorch/commit/377d8969699a8120dd04bde9e04b4269747b88c2\"><tt>377d896</tt></a></li>\n<li>How you installed PyTorch (conda, pip, source): source</li>\n<li>Python version: 2.7.14</li>\n<li>CUDA/cuDNN version: N/A</li>\n<li>GPU models and configuration: N/A</li>\n<li>GCC version (if compiling from source): N/A I'm building with the Intel 2018 compilers which does necessitate a couple of minor patches to array initialization, but that's neither here nor there.</li>\n</ul>", "body_text": "I think #5264 may not go far enough. In environments like the Cray XC40/XC50, Intel OmniPath clusters, some Cisco usNIC clusters, there is an IB fabric in places to carry file I/O traffic, but not MPI/IP/other IPC traffic. This means we want to be able to fully disable the use of IB verbs in these environments. We tried:\nexport WITH_GLOO_IBVERBS=0\nexport USE_IBVERBS=0\nWITH_GLOO_IBVERBS=0 python setup.py build --verbose\nand still wound up with:\n-DWITH_GLOO_IBVERBS=1 and -DUSE_IBVERBS=1\nthroughout the build.\nI can work around by editing the function should_build_ib() to use an check_env_flag to check for WITH_GLOO_IBVERBS or USE_IBVERBS in the environment in  pytorch/tools/setup_helpers/dist_check.py, but think I haven't been through enough in my local edits to handle the default case (finding IB when the user doesn't specify one way or another) and am not sure if I've tracked down all possible side-effects.\nEnvironment Information\nWhen submitting a bug report, please include the following information (where relevant):\n\nOS: Linux (Cray Linux Environment 6, but also checked in Clear Linux 21060)\nPyTorch version: Master 377d896\nHow you installed PyTorch (conda, pip, source): source\nPython version: 2.7.14\nCUDA/cuDNN version: N/A\nGPU models and configuration: N/A\nGCC version (if compiling from source): N/A I'm building with the Intel 2018 compilers which does necessitate a couple of minor patches to array initialization, but that's neither here nor there.", "body": "I think pytorch#5264 may not go far enough. In environments like the Cray XC40/XC50, Intel OmniPath clusters, some Cisco usNIC clusters, there is an IB fabric in places to carry file I/O traffic, but not MPI/IP/other IPC traffic. This means we want to be able to fully disable the use of IB verbs in these environments. We tried:\r\n\r\n```bash\r\nexport WITH_GLOO_IBVERBS=0\r\nexport USE_IBVERBS=0\r\nWITH_GLOO_IBVERBS=0 python setup.py build --verbose\r\n```\r\nand still wound up with:\r\n\r\n`-DWITH_GLOO_IBVERBS=1` and `-DUSE_IBVERBS=1`\r\n\r\nthroughout the build. \r\n\r\nI can work around by editing the function `should_build_ib()` to use an `check_env_flag` to check for `WITH_GLOO_IBVERBS` or `USE_IBVERBS` in the environment in  `pytorch/tools/setup_helpers/dist_check.py`, but think I haven't been through enough in my local edits to handle the default case (finding IB when the user doesn't specify one way or another) and am not sure if I've tracked down all possible side-effects.\r\n\r\n\r\nEnvironment Information\r\n--------------------------\r\nWhen submitting a bug report, please include the following information (where relevant):\r\n- OS: Linux (Cray Linux Environment 6, but also checked in Clear Linux 21060)\r\n- PyTorch version: Master 377d8969699a8120dd04bde9e04b4269747b88c2\r\n- How you installed PyTorch (conda, pip, source): source\r\n- Python version: 2.7.14\r\n- CUDA/cuDNN version: N/A\r\n- GPU models and configuration: N/A\r\n- GCC version (if compiling from source): N/A I'm building with the Intel 2018 compilers which does necessitate a couple of minor patches to array initialization, but that's neither here nor there."}