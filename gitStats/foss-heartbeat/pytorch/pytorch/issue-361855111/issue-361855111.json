{"url": "https://api.github.com/repos/pytorch/pytorch/issues/11865", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/11865/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/11865/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/11865/events", "html_url": "https://github.com/pytorch/pytorch/issues/11865", "id": 361855111, "node_id": "MDU6SXNzdWUzNjE4NTUxMTE=", "number": 11865, "title": "[Caffe2] Errors occured when running Cpp Predictor", "user": {"login": "CarlosYeverino", "id": 25825048, "node_id": "MDQ6VXNlcjI1ODI1MDQ4", "avatar_url": "https://avatars0.githubusercontent.com/u/25825048?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CarlosYeverino", "html_url": "https://github.com/CarlosYeverino", "followers_url": "https://api.github.com/users/CarlosYeverino/followers", "following_url": "https://api.github.com/users/CarlosYeverino/following{/other_user}", "gists_url": "https://api.github.com/users/CarlosYeverino/gists{/gist_id}", "starred_url": "https://api.github.com/users/CarlosYeverino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CarlosYeverino/subscriptions", "organizations_url": "https://api.github.com/users/CarlosYeverino/orgs", "repos_url": "https://api.github.com/users/CarlosYeverino/repos", "events_url": "https://api.github.com/users/CarlosYeverino/events{/privacy}", "received_events_url": "https://api.github.com/users/CarlosYeverino/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 890282107, "node_id": "MDU6TGFiZWw4OTAyODIxMDc=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/caffe2", "name": "caffe2", "color": "210aa8", "default": false}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-09-19T17:42:36Z", "updated_at": "2018-09-25T07:23:58Z", "closed_at": null, "author_association": "NONE", "body_html": "<p>Hello,</p>\n<p>I am writing a predictor written in cpp so I can use it to predict the output class using the mnist data set. I managed to make it work completely in python but my goal is to use the trained net from python to predict in cpp. However, I am encountering some errors when I run the predictor:</p>\n<pre><code>carlos@carlos-ubuntu:~/Documents/git/Caffe2_scripts/03_cpp_forward$ mkdir build &amp;&amp; cd build\ncarlos@carlos-ubuntu:~/Documents/git/Caffe2_scripts/03_cpp_forward/build$ cmake ../\n-- The C compiler identification is GNU 5.4.0\n-- The CXX compiler identification is GNU 5.4.0\n-- Check for working C compiler: /usr/bin/cc\n-- Check for working C compiler: /usr/bin/cc -- works\n-- Detecting C compiler ABI info\n-- Detecting C compiler ABI info - done\n-- Detecting C compile features\n-- Detecting C compile features - done\n-- Check for working CXX compiler: /usr/bin/c++\n-- Check for working CXX compiler: /usr/bin/c++ -- works\n-- Detecting CXX compiler ABI info\n-- Detecting CXX compiler ABI info - done\n-- Detecting CXX compile features\n-- Detecting CXX compile features - done\n-- Found Caffe2: /usr/local/lib/libcaffe2.so  \n-- Looking for pthread.h\n-- Looking for pthread.h - found\n-- Looking for pthread_create\n-- Looking for pthread_create - not found\n-- Looking for pthread_create in pthreads\n-- Looking for pthread_create in pthreads - not found\n-- Looking for pthread_create in pthread\n-- Looking for pthread_create in pthread - found\n-- Found Threads: TRUE  \n-- Found CUDA: /usr/local/cuda (found version \"8.0\") \nProject_include_path:/usr/local/include/usr/local/include/eigen3/usr/local/cuda/include/usr/include/opencv/usr/include\n-- Configuring done\n-- Generating done\n-- Build files have been written to: /home/carlos/Documents/git/Caffe2_scripts/03_cpp_forward/build\ncarlos@carlos-ubuntu:~/Documents/git/Caffe2_scripts/03_cpp_forward/build$ make\nScanning dependencies of target classifier\n[ 50%] Building CXX object CMakeFiles/classifier.dir/main.cpp.o\n[100%] Linking CXX executable ../classifier\n[100%] Built target classifier\ncarlos@carlos-ubuntu:~/Documents/git/Caffe2_scripts/03_cpp_forward/build$ cd ../\ncarlos@carlos-ubuntu:~/Documents/git/Caffe2_scripts/03_cpp_forward$ ./classifier --file ./test_img/3.jpg\nE0919 11:13:08.691625 11152 init_intrinsics_check.cc:43] CPU feature avx is present on your machine, but the Caffe2 binary is not compiled with it. It means you may not get the full speed of your CPU.\nE0919 11:13:08.692265 11152 init_intrinsics_check.cc:43] CPU feature avx2 is present on your machine, but the Caffe2 binary is not compiled with it. It means you may not get the full speed of your CPU.\nE0919 11:13:08.692294 11152 init_intrinsics_check.cc:43] CPU feature fma is present on your machine, but the Caffe2 binary is not compiled with it. It means you may not get the full speed of your CPU.\n== GPU processing selected  ==\n== network loaded  ==\n== image size: [42 x 41] ==\n== simply resize: [28 x 28] ==\n== Tensor  ==\n== Blob got  ==\n== Data copied  ==\n*** Aborted at 1537348389 (unix time) try \"date -d @1537348389\" if you are using GNU date ***\nPC: @     0x7f1db78d381d getenv\n*** SIGSEGV (@0x0) received by PID 11152 (TID 0x7f1dc0900000) from PID 0; stack trace: ***\n    @     0x7f1db78cf4b0 (unknown)\n    @     0x7f1db78d381d getenv\n    @     0x7f1dbdc40ea4 caffe2::NumCudaDevices()\n    @     0x7f1dbdc41efd caffe2::GetDeviceProperty()\n    @     0x7f1dbdcc4c05 caffe2::CudnnConvOpBase::DetermineComputeTypeFromInput&lt;&gt;()\n    @     0x7f1dbdcce146 caffe2::CudnnConvOp::DoRunWithType&lt;&gt;()\n    @     0x7f1dbdcc21f8 caffe2::CudnnConvOp::RunOnDevice()\n    @     0x7f1dbdc0606b caffe2::Operator&lt;&gt;::Run()\n    @     0x7f1dbfc1f75b caffe2::SimpleNet::Run()\n    @     0x7f1dbfb9b76a caffe2::Workspace::RunNet()\n    @           0x42a2e0 caffe2::run()\n    @ 0xbfd4bd36bfd893b0 (unknown)\nSegmentation fault (core dumped)\n</code></pre>\n<p>Since I don't know how I can debbug using cmake, I put some printouts to be able to see where the issue occurs. It seems that error occurs in:</p>\n<pre><code>// forward\nworkSpace.RunNet(predictNet.name());\n</code></pre>\n<p>This is code of the cpp predictor:</p>\n<pre><code>/*******************************************************\n * Copyright (C) 2018-2019 bigballon &lt;fm.bigballon@gmail.com&gt;\n * \n * This file is a caffe2 C++ image classification test \n * by using pre-trained cifar10 model.\n *\n * Feel free to modify if you need.\n *******************************************************/\n#include \"caffe2/core/common.h\"\n#include \"caffe2/utils/proto_utils.h\"\n#include \"caffe2/core/workspace.h\"\n#include \"caffe2/core/tensor.h\"\n#include \"caffe2/core/init.h\"\n\n\n// feel free to define USE_GPU if you want to use gpu\n\n#define USE_GPU\n\n\n#ifdef USE_GPU\n#include \"caffe2/core/context_gpu.h\"\n#endif\n\n// headers for opencv \n#include &lt;opencv2/highgui/highgui.hpp&gt;\n#include &lt;opencv2/imgproc/imgproc.hpp&gt;\n\n#include &lt;string&gt;\n#include &lt;iostream&gt;\n#include &lt;map&gt;\n\n// define flags\nCAFFE2_DEFINE_string(init_net, \"./init_net.pb\",\n                     \"The given path to the init protobuffer.\");\nCAFFE2_DEFINE_string(predict_net, \"./predict_net.pb\",\n                     \"The given path to the predict protobuffer.\");\nCAFFE2_DEFINE_string(file, \"./image_file.jpg\", \"The image file.\");\n\n\nnamespace caffe2{\n\nvoid loadImage(std::string file_name, float* imgArray){\n\n    auto image = cv::imread(file_name);    // CV_8UC3\n    std::cout &lt;&lt; \"== image size: \" &lt;&lt; image.size()\n              &lt;&lt; \" ==\" &lt;&lt; std::endl;\n\n    // scale image to fit\n    cv::Size scale(28,28);\n    cv::resize(image, image, scale);\n    std::cout &lt;&lt; \"== simply resize: \" &lt;&lt; image.size() \n              &lt;&lt; \" ==\" &lt;&lt; std::endl;\n    \n    // convert [unsigned int] to [float]\n    image.convertTo(image, CV_32FC3);\n\n    // convert NHWC to NCHW\n    std::vector&lt;cv::Mat&gt; channels(3);\n    cv::split(image, channels);\n    std::vector&lt;float&gt; data;\n    for (auto &amp;c : channels) {\n        data.insert(data.end(), (float *)c.datastart, (float *)c.dataend);\n    }\n    \n    // do normalization &amp; copy to imgArray\n    int dim = 0;\n    float image_mean[3] = {113.865, 122.95, 125.307};\n    float image_std[3] = {66.7048, 62.0887, 62.9932};\n        \n    for(auto i = 0; i &lt; data.size();++i){\n        if(i &gt; 0 &amp;&amp; i % (32*32) == 0) dim++;\n        imgArray[i] = (data[i] - image_mean[dim]) / image_std[dim];\n        // std::cout &lt;&lt; imgArray[i] &lt;&lt; std::endl;\n    }\n}\n\nvoid run(){\n\n    // define a caffe2 Workspace\n    Workspace workSpace;\n\n    // define initNet and predictNet\n    NetDef initNet, predictNet;\n\n    // read protobuf\n    CAFFE_ENFORCE(ReadProtoFromFile(FLAGS_init_net, &amp;initNet));\n    CAFFE_ENFORCE(ReadProtoFromFile(FLAGS_predict_net, &amp;predictNet));\n\n    // set device type\n#ifdef USE_GPU\n    predictNet.mutable_device_option()-&gt;set_device_type(CUDA);\n    initNet.mutable_device_option()-&gt;set_device_type(CUDA);\n    std::cout &lt;&lt; \"== GPU processing selected \" &lt;&lt; \" ==\" &lt;&lt; std::endl;\n#else\n    predictNet.mutable_device_option()-&gt;set_device_type(CPU);\n    initNet.mutable_device_option()-&gt;set_device_type(CPU);\n\n    for(int i = 0; i &lt; predictNet.op_size(); ++i){\n        predictNet.mutable_op(i)-&gt;mutable_device_option()-&gt;set_device_type(CPU);\n    }\n    for(int i = 0; i &lt; initNet.op_size(); ++i){\n        initNet.mutable_op(i)-&gt;mutable_device_option()-&gt;set_device_type(CPU);\n    }\n#endif\n\n    // load network\n    CAFFE_ENFORCE(workSpace.RunNetOnce(initNet));\n    CAFFE_ENFORCE(workSpace.CreateNet(predictNet));\n    std::cout &lt;&lt; \"== network loaded \" &lt;&lt; \" ==\" &lt;&lt; std::endl;\n\n    // load image from file, then convert it to float array.\n    float imgArray[1 * 28 * 28];\n    loadImage(FLAGS_file, imgArray);\n\n    // define a Tensor which is used to stone input data\n    std::cout &lt;&lt; \"== Tensor \" &lt;&lt; \" ==\" &lt;&lt; std::endl;\n    TensorCPU input;\n    input.Resize(std::vector&lt;TIndex&gt;({1, 1, 28, 28}));\n    input.ShareExternalPointer(imgArray);\n\n    // get \"data\" blob\n#ifdef USE_GPU\n    auto data = workSpace.GetBlob(\"data\")-&gt;GetMutable&lt;TensorCUDA&gt;();\n#else\n    auto data = workSpace.GetBlob(\"data\")-&gt;GetMutable&lt;TensorCPU&gt;();\n#endif\n    std::cout &lt;&lt; \"== Blob got \" &lt;&lt; \" ==\" &lt;&lt; std::endl;\n\n    // copy from input data\n    data-&gt;CopyFrom(input);\n    std::cout &lt;&lt; \"== Data copied \" &lt;&lt; \" ==\" &lt;&lt; std::endl;\n\n    // forward\n    workSpace.RunNet(predictNet.name());\n    std::cout &lt;&lt; \"== Net was run \" &lt;&lt; \" ==\" &lt;&lt; std::endl;\n\n    // get predictions blob and show the results\n    std::vector&lt;std::string&gt; labelName = {\"0\",\"1\",\"2\",\"3\",\"4\",\n        \"5\",\"6\",\"7\",\"8\",\"9\"};\n\n#ifdef USE_GPU\n    auto predictions = TensorCPU(workSpace.GetBlob(\"predictions\")-&gt;Get&lt;TensorCUDA&gt;());\n#else\n    auto predictions = workSpace.GetBlob(\"predictions\")-&gt;Get&lt;TensorCPU&gt;();\n#endif\n    std::cout &lt;&lt; \"== predictions got \" &lt;&lt; \" ==\" &lt;&lt; std::endl;\n\n    std::vector&lt;float&gt; probs(predictions.data&lt;float&gt;(),\n        predictions.data&lt;float&gt;() + predictions.size());\n\n    auto max = std::max_element(probs.begin(), probs.end());\n    auto index = std::distance(probs.begin(), max);\n    std::cout &lt;&lt; \"== predicted label: \" &lt;&lt; labelName[index]\n              &lt;&lt; \" ==\\n== with probability: \" &lt;&lt; (*max * 100)\n              &lt;&lt; \"% ==\" &lt;&lt; std::endl;\n}\n\n}    // namespace caffe2\n\n// main function\nint main(int argc, char** argv) {\n    caffe2::GlobalInit(&amp;argc, &amp;argv);\n    caffe2::run();\n    google::protobuf::ShutdownProtobufLibrary();\n    return 0;\n}\n</code></pre>\n<p>This is the structure of my project:<br>\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://user-images.githubusercontent.com/25825048/45745633-8e1c2b00-bc01-11e8-8ffc-fac066470584.png\"><img src=\"https://user-images.githubusercontent.com/25825048/45745633-8e1c2b00-bc01-11e8-8ffc-fac066470584.png\" alt=\"image\" style=\"max-width:100%;\"></a></p>\n<p>Attached my init_net.pb and predict_net.pb in <code>.pb</code> and <code>pbtxt</code> format. I had to chnage their extensions to .txt to be able to upload them.<br>\n<a href=\"https://github.com/BIGBALLON/Caffe2_Demo/files/2396478/init_net.txt\">init_net.txt</a><br>\n<a href=\"https://github.com/BIGBALLON/Caffe2_Demo/files/2396479/predict_net.txt\">predict_net.txt</a><br>\n<a href=\"https://github.com/BIGBALLON/Caffe2_Demo/files/2396599/init_net_pbtxt.txt\">init_net_pbtxt.txt</a><br>\n<a href=\"https://github.com/BIGBALLON/Caffe2_Demo/files/2396600/predict_net_pbtxt.txt\">predict_net_pbtxt.txt</a></p>\n<p><strong>Do you have an idea what could be the reason for the error?</strong></p>\n<p>**My configuration:</p>\n<ul>\n<li>Caffe2 tag v0.4.0</li>\n<li>CUDA/cuDNN version: 8.0/7.0.5</li>\n<li>GPU models and configuration: GTX 1050</li>\n<li>CMake version:**</li>\n</ul>", "body_text": "Hello,\nI am writing a predictor written in cpp so I can use it to predict the output class using the mnist data set. I managed to make it work completely in python but my goal is to use the trained net from python to predict in cpp. However, I am encountering some errors when I run the predictor:\ncarlos@carlos-ubuntu:~/Documents/git/Caffe2_scripts/03_cpp_forward$ mkdir build && cd build\ncarlos@carlos-ubuntu:~/Documents/git/Caffe2_scripts/03_cpp_forward/build$ cmake ../\n-- The C compiler identification is GNU 5.4.0\n-- The CXX compiler identification is GNU 5.4.0\n-- Check for working C compiler: /usr/bin/cc\n-- Check for working C compiler: /usr/bin/cc -- works\n-- Detecting C compiler ABI info\n-- Detecting C compiler ABI info - done\n-- Detecting C compile features\n-- Detecting C compile features - done\n-- Check for working CXX compiler: /usr/bin/c++\n-- Check for working CXX compiler: /usr/bin/c++ -- works\n-- Detecting CXX compiler ABI info\n-- Detecting CXX compiler ABI info - done\n-- Detecting CXX compile features\n-- Detecting CXX compile features - done\n-- Found Caffe2: /usr/local/lib/libcaffe2.so  \n-- Looking for pthread.h\n-- Looking for pthread.h - found\n-- Looking for pthread_create\n-- Looking for pthread_create - not found\n-- Looking for pthread_create in pthreads\n-- Looking for pthread_create in pthreads - not found\n-- Looking for pthread_create in pthread\n-- Looking for pthread_create in pthread - found\n-- Found Threads: TRUE  \n-- Found CUDA: /usr/local/cuda (found version \"8.0\") \nProject_include_path:/usr/local/include/usr/local/include/eigen3/usr/local/cuda/include/usr/include/opencv/usr/include\n-- Configuring done\n-- Generating done\n-- Build files have been written to: /home/carlos/Documents/git/Caffe2_scripts/03_cpp_forward/build\ncarlos@carlos-ubuntu:~/Documents/git/Caffe2_scripts/03_cpp_forward/build$ make\nScanning dependencies of target classifier\n[ 50%] Building CXX object CMakeFiles/classifier.dir/main.cpp.o\n[100%] Linking CXX executable ../classifier\n[100%] Built target classifier\ncarlos@carlos-ubuntu:~/Documents/git/Caffe2_scripts/03_cpp_forward/build$ cd ../\ncarlos@carlos-ubuntu:~/Documents/git/Caffe2_scripts/03_cpp_forward$ ./classifier --file ./test_img/3.jpg\nE0919 11:13:08.691625 11152 init_intrinsics_check.cc:43] CPU feature avx is present on your machine, but the Caffe2 binary is not compiled with it. It means you may not get the full speed of your CPU.\nE0919 11:13:08.692265 11152 init_intrinsics_check.cc:43] CPU feature avx2 is present on your machine, but the Caffe2 binary is not compiled with it. It means you may not get the full speed of your CPU.\nE0919 11:13:08.692294 11152 init_intrinsics_check.cc:43] CPU feature fma is present on your machine, but the Caffe2 binary is not compiled with it. It means you may not get the full speed of your CPU.\n== GPU processing selected  ==\n== network loaded  ==\n== image size: [42 x 41] ==\n== simply resize: [28 x 28] ==\n== Tensor  ==\n== Blob got  ==\n== Data copied  ==\n*** Aborted at 1537348389 (unix time) try \"date -d @1537348389\" if you are using GNU date ***\nPC: @     0x7f1db78d381d getenv\n*** SIGSEGV (@0x0) received by PID 11152 (TID 0x7f1dc0900000) from PID 0; stack trace: ***\n    @     0x7f1db78cf4b0 (unknown)\n    @     0x7f1db78d381d getenv\n    @     0x7f1dbdc40ea4 caffe2::NumCudaDevices()\n    @     0x7f1dbdc41efd caffe2::GetDeviceProperty()\n    @     0x7f1dbdcc4c05 caffe2::CudnnConvOpBase::DetermineComputeTypeFromInput<>()\n    @     0x7f1dbdcce146 caffe2::CudnnConvOp::DoRunWithType<>()\n    @     0x7f1dbdcc21f8 caffe2::CudnnConvOp::RunOnDevice()\n    @     0x7f1dbdc0606b caffe2::Operator<>::Run()\n    @     0x7f1dbfc1f75b caffe2::SimpleNet::Run()\n    @     0x7f1dbfb9b76a caffe2::Workspace::RunNet()\n    @           0x42a2e0 caffe2::run()\n    @ 0xbfd4bd36bfd893b0 (unknown)\nSegmentation fault (core dumped)\n\nSince I don't know how I can debbug using cmake, I put some printouts to be able to see where the issue occurs. It seems that error occurs in:\n// forward\nworkSpace.RunNet(predictNet.name());\n\nThis is code of the cpp predictor:\n/*******************************************************\n * Copyright (C) 2018-2019 bigballon <fm.bigballon@gmail.com>\n * \n * This file is a caffe2 C++ image classification test \n * by using pre-trained cifar10 model.\n *\n * Feel free to modify if you need.\n *******************************************************/\n#include \"caffe2/core/common.h\"\n#include \"caffe2/utils/proto_utils.h\"\n#include \"caffe2/core/workspace.h\"\n#include \"caffe2/core/tensor.h\"\n#include \"caffe2/core/init.h\"\n\n\n// feel free to define USE_GPU if you want to use gpu\n\n#define USE_GPU\n\n\n#ifdef USE_GPU\n#include \"caffe2/core/context_gpu.h\"\n#endif\n\n// headers for opencv \n#include <opencv2/highgui/highgui.hpp>\n#include <opencv2/imgproc/imgproc.hpp>\n\n#include <string>\n#include <iostream>\n#include <map>\n\n// define flags\nCAFFE2_DEFINE_string(init_net, \"./init_net.pb\",\n                     \"The given path to the init protobuffer.\");\nCAFFE2_DEFINE_string(predict_net, \"./predict_net.pb\",\n                     \"The given path to the predict protobuffer.\");\nCAFFE2_DEFINE_string(file, \"./image_file.jpg\", \"The image file.\");\n\n\nnamespace caffe2{\n\nvoid loadImage(std::string file_name, float* imgArray){\n\n    auto image = cv::imread(file_name);    // CV_8UC3\n    std::cout << \"== image size: \" << image.size()\n              << \" ==\" << std::endl;\n\n    // scale image to fit\n    cv::Size scale(28,28);\n    cv::resize(image, image, scale);\n    std::cout << \"== simply resize: \" << image.size() \n              << \" ==\" << std::endl;\n    \n    // convert [unsigned int] to [float]\n    image.convertTo(image, CV_32FC3);\n\n    // convert NHWC to NCHW\n    std::vector<cv::Mat> channels(3);\n    cv::split(image, channels);\n    std::vector<float> data;\n    for (auto &c : channels) {\n        data.insert(data.end(), (float *)c.datastart, (float *)c.dataend);\n    }\n    \n    // do normalization & copy to imgArray\n    int dim = 0;\n    float image_mean[3] = {113.865, 122.95, 125.307};\n    float image_std[3] = {66.7048, 62.0887, 62.9932};\n        \n    for(auto i = 0; i < data.size();++i){\n        if(i > 0 && i % (32*32) == 0) dim++;\n        imgArray[i] = (data[i] - image_mean[dim]) / image_std[dim];\n        // std::cout << imgArray[i] << std::endl;\n    }\n}\n\nvoid run(){\n\n    // define a caffe2 Workspace\n    Workspace workSpace;\n\n    // define initNet and predictNet\n    NetDef initNet, predictNet;\n\n    // read protobuf\n    CAFFE_ENFORCE(ReadProtoFromFile(FLAGS_init_net, &initNet));\n    CAFFE_ENFORCE(ReadProtoFromFile(FLAGS_predict_net, &predictNet));\n\n    // set device type\n#ifdef USE_GPU\n    predictNet.mutable_device_option()->set_device_type(CUDA);\n    initNet.mutable_device_option()->set_device_type(CUDA);\n    std::cout << \"== GPU processing selected \" << \" ==\" << std::endl;\n#else\n    predictNet.mutable_device_option()->set_device_type(CPU);\n    initNet.mutable_device_option()->set_device_type(CPU);\n\n    for(int i = 0; i < predictNet.op_size(); ++i){\n        predictNet.mutable_op(i)->mutable_device_option()->set_device_type(CPU);\n    }\n    for(int i = 0; i < initNet.op_size(); ++i){\n        initNet.mutable_op(i)->mutable_device_option()->set_device_type(CPU);\n    }\n#endif\n\n    // load network\n    CAFFE_ENFORCE(workSpace.RunNetOnce(initNet));\n    CAFFE_ENFORCE(workSpace.CreateNet(predictNet));\n    std::cout << \"== network loaded \" << \" ==\" << std::endl;\n\n    // load image from file, then convert it to float array.\n    float imgArray[1 * 28 * 28];\n    loadImage(FLAGS_file, imgArray);\n\n    // define a Tensor which is used to stone input data\n    std::cout << \"== Tensor \" << \" ==\" << std::endl;\n    TensorCPU input;\n    input.Resize(std::vector<TIndex>({1, 1, 28, 28}));\n    input.ShareExternalPointer(imgArray);\n\n    // get \"data\" blob\n#ifdef USE_GPU\n    auto data = workSpace.GetBlob(\"data\")->GetMutable<TensorCUDA>();\n#else\n    auto data = workSpace.GetBlob(\"data\")->GetMutable<TensorCPU>();\n#endif\n    std::cout << \"== Blob got \" << \" ==\" << std::endl;\n\n    // copy from input data\n    data->CopyFrom(input);\n    std::cout << \"== Data copied \" << \" ==\" << std::endl;\n\n    // forward\n    workSpace.RunNet(predictNet.name());\n    std::cout << \"== Net was run \" << \" ==\" << std::endl;\n\n    // get predictions blob and show the results\n    std::vector<std::string> labelName = {\"0\",\"1\",\"2\",\"3\",\"4\",\n        \"5\",\"6\",\"7\",\"8\",\"9\"};\n\n#ifdef USE_GPU\n    auto predictions = TensorCPU(workSpace.GetBlob(\"predictions\")->Get<TensorCUDA>());\n#else\n    auto predictions = workSpace.GetBlob(\"predictions\")->Get<TensorCPU>();\n#endif\n    std::cout << \"== predictions got \" << \" ==\" << std::endl;\n\n    std::vector<float> probs(predictions.data<float>(),\n        predictions.data<float>() + predictions.size());\n\n    auto max = std::max_element(probs.begin(), probs.end());\n    auto index = std::distance(probs.begin(), max);\n    std::cout << \"== predicted label: \" << labelName[index]\n              << \" ==\\n== with probability: \" << (*max * 100)\n              << \"% ==\" << std::endl;\n}\n\n}    // namespace caffe2\n\n// main function\nint main(int argc, char** argv) {\n    caffe2::GlobalInit(&argc, &argv);\n    caffe2::run();\n    google::protobuf::ShutdownProtobufLibrary();\n    return 0;\n}\n\nThis is the structure of my project:\n\nAttached my init_net.pb and predict_net.pb in .pb and pbtxt format. I had to chnage their extensions to .txt to be able to upload them.\ninit_net.txt\npredict_net.txt\ninit_net_pbtxt.txt\npredict_net_pbtxt.txt\nDo you have an idea what could be the reason for the error?\n**My configuration:\n\nCaffe2 tag v0.4.0\nCUDA/cuDNN version: 8.0/7.0.5\nGPU models and configuration: GTX 1050\nCMake version:**", "body": "Hello,\r\n\r\nI am writing a predictor written in cpp so I can use it to predict the output class using the mnist data set. I managed to make it work completely in python but my goal is to use the trained net from python to predict in cpp. However, I am encountering some errors when I run the predictor:\r\n```\r\ncarlos@carlos-ubuntu:~/Documents/git/Caffe2_scripts/03_cpp_forward$ mkdir build && cd build\r\ncarlos@carlos-ubuntu:~/Documents/git/Caffe2_scripts/03_cpp_forward/build$ cmake ../\r\n-- The C compiler identification is GNU 5.4.0\r\n-- The CXX compiler identification is GNU 5.4.0\r\n-- Check for working C compiler: /usr/bin/cc\r\n-- Check for working C compiler: /usr/bin/cc -- works\r\n-- Detecting C compiler ABI info\r\n-- Detecting C compiler ABI info - done\r\n-- Detecting C compile features\r\n-- Detecting C compile features - done\r\n-- Check for working CXX compiler: /usr/bin/c++\r\n-- Check for working CXX compiler: /usr/bin/c++ -- works\r\n-- Detecting CXX compiler ABI info\r\n-- Detecting CXX compiler ABI info - done\r\n-- Detecting CXX compile features\r\n-- Detecting CXX compile features - done\r\n-- Found Caffe2: /usr/local/lib/libcaffe2.so  \r\n-- Looking for pthread.h\r\n-- Looking for pthread.h - found\r\n-- Looking for pthread_create\r\n-- Looking for pthread_create - not found\r\n-- Looking for pthread_create in pthreads\r\n-- Looking for pthread_create in pthreads - not found\r\n-- Looking for pthread_create in pthread\r\n-- Looking for pthread_create in pthread - found\r\n-- Found Threads: TRUE  \r\n-- Found CUDA: /usr/local/cuda (found version \"8.0\") \r\nProject_include_path:/usr/local/include/usr/local/include/eigen3/usr/local/cuda/include/usr/include/opencv/usr/include\r\n-- Configuring done\r\n-- Generating done\r\n-- Build files have been written to: /home/carlos/Documents/git/Caffe2_scripts/03_cpp_forward/build\r\ncarlos@carlos-ubuntu:~/Documents/git/Caffe2_scripts/03_cpp_forward/build$ make\r\nScanning dependencies of target classifier\r\n[ 50%] Building CXX object CMakeFiles/classifier.dir/main.cpp.o\r\n[100%] Linking CXX executable ../classifier\r\n[100%] Built target classifier\r\ncarlos@carlos-ubuntu:~/Documents/git/Caffe2_scripts/03_cpp_forward/build$ cd ../\r\ncarlos@carlos-ubuntu:~/Documents/git/Caffe2_scripts/03_cpp_forward$ ./classifier --file ./test_img/3.jpg\r\nE0919 11:13:08.691625 11152 init_intrinsics_check.cc:43] CPU feature avx is present on your machine, but the Caffe2 binary is not compiled with it. It means you may not get the full speed of your CPU.\r\nE0919 11:13:08.692265 11152 init_intrinsics_check.cc:43] CPU feature avx2 is present on your machine, but the Caffe2 binary is not compiled with it. It means you may not get the full speed of your CPU.\r\nE0919 11:13:08.692294 11152 init_intrinsics_check.cc:43] CPU feature fma is present on your machine, but the Caffe2 binary is not compiled with it. It means you may not get the full speed of your CPU.\r\n== GPU processing selected  ==\r\n== network loaded  ==\r\n== image size: [42 x 41] ==\r\n== simply resize: [28 x 28] ==\r\n== Tensor  ==\r\n== Blob got  ==\r\n== Data copied  ==\r\n*** Aborted at 1537348389 (unix time) try \"date -d @1537348389\" if you are using GNU date ***\r\nPC: @     0x7f1db78d381d getenv\r\n*** SIGSEGV (@0x0) received by PID 11152 (TID 0x7f1dc0900000) from PID 0; stack trace: ***\r\n    @     0x7f1db78cf4b0 (unknown)\r\n    @     0x7f1db78d381d getenv\r\n    @     0x7f1dbdc40ea4 caffe2::NumCudaDevices()\r\n    @     0x7f1dbdc41efd caffe2::GetDeviceProperty()\r\n    @     0x7f1dbdcc4c05 caffe2::CudnnConvOpBase::DetermineComputeTypeFromInput<>()\r\n    @     0x7f1dbdcce146 caffe2::CudnnConvOp::DoRunWithType<>()\r\n    @     0x7f1dbdcc21f8 caffe2::CudnnConvOp::RunOnDevice()\r\n    @     0x7f1dbdc0606b caffe2::Operator<>::Run()\r\n    @     0x7f1dbfc1f75b caffe2::SimpleNet::Run()\r\n    @     0x7f1dbfb9b76a caffe2::Workspace::RunNet()\r\n    @           0x42a2e0 caffe2::run()\r\n    @ 0xbfd4bd36bfd893b0 (unknown)\r\nSegmentation fault (core dumped)\r\n```\r\n\r\nSince I don't know how I can debbug using cmake, I put some printouts to be able to see where the issue occurs. It seems that error occurs in:\r\n```\r\n// forward\r\nworkSpace.RunNet(predictNet.name());\r\n```\r\nThis is code of the cpp predictor:\r\n```\r\n/*******************************************************\r\n * Copyright (C) 2018-2019 bigballon <fm.bigballon@gmail.com>\r\n * \r\n * This file is a caffe2 C++ image classification test \r\n * by using pre-trained cifar10 model.\r\n *\r\n * Feel free to modify if you need.\r\n *******************************************************/\r\n#include \"caffe2/core/common.h\"\r\n#include \"caffe2/utils/proto_utils.h\"\r\n#include \"caffe2/core/workspace.h\"\r\n#include \"caffe2/core/tensor.h\"\r\n#include \"caffe2/core/init.h\"\r\n\r\n\r\n// feel free to define USE_GPU if you want to use gpu\r\n\r\n#define USE_GPU\r\n\r\n\r\n#ifdef USE_GPU\r\n#include \"caffe2/core/context_gpu.h\"\r\n#endif\r\n\r\n// headers for opencv \r\n#include <opencv2/highgui/highgui.hpp>\r\n#include <opencv2/imgproc/imgproc.hpp>\r\n\r\n#include <string>\r\n#include <iostream>\r\n#include <map>\r\n\r\n// define flags\r\nCAFFE2_DEFINE_string(init_net, \"./init_net.pb\",\r\n                     \"The given path to the init protobuffer.\");\r\nCAFFE2_DEFINE_string(predict_net, \"./predict_net.pb\",\r\n                     \"The given path to the predict protobuffer.\");\r\nCAFFE2_DEFINE_string(file, \"./image_file.jpg\", \"The image file.\");\r\n\r\n\r\nnamespace caffe2{\r\n\r\nvoid loadImage(std::string file_name, float* imgArray){\r\n\r\n    auto image = cv::imread(file_name);    // CV_8UC3\r\n    std::cout << \"== image size: \" << image.size()\r\n              << \" ==\" << std::endl;\r\n\r\n    // scale image to fit\r\n    cv::Size scale(28,28);\r\n    cv::resize(image, image, scale);\r\n    std::cout << \"== simply resize: \" << image.size() \r\n              << \" ==\" << std::endl;\r\n    \r\n    // convert [unsigned int] to [float]\r\n    image.convertTo(image, CV_32FC3);\r\n\r\n    // convert NHWC to NCHW\r\n    std::vector<cv::Mat> channels(3);\r\n    cv::split(image, channels);\r\n    std::vector<float> data;\r\n    for (auto &c : channels) {\r\n        data.insert(data.end(), (float *)c.datastart, (float *)c.dataend);\r\n    }\r\n    \r\n    // do normalization & copy to imgArray\r\n    int dim = 0;\r\n    float image_mean[3] = {113.865, 122.95, 125.307};\r\n    float image_std[3] = {66.7048, 62.0887, 62.9932};\r\n        \r\n    for(auto i = 0; i < data.size();++i){\r\n        if(i > 0 && i % (32*32) == 0) dim++;\r\n        imgArray[i] = (data[i] - image_mean[dim]) / image_std[dim];\r\n        // std::cout << imgArray[i] << std::endl;\r\n    }\r\n}\r\n\r\nvoid run(){\r\n\r\n    // define a caffe2 Workspace\r\n    Workspace workSpace;\r\n\r\n    // define initNet and predictNet\r\n    NetDef initNet, predictNet;\r\n\r\n    // read protobuf\r\n    CAFFE_ENFORCE(ReadProtoFromFile(FLAGS_init_net, &initNet));\r\n    CAFFE_ENFORCE(ReadProtoFromFile(FLAGS_predict_net, &predictNet));\r\n\r\n    // set device type\r\n#ifdef USE_GPU\r\n    predictNet.mutable_device_option()->set_device_type(CUDA);\r\n    initNet.mutable_device_option()->set_device_type(CUDA);\r\n    std::cout << \"== GPU processing selected \" << \" ==\" << std::endl;\r\n#else\r\n    predictNet.mutable_device_option()->set_device_type(CPU);\r\n    initNet.mutable_device_option()->set_device_type(CPU);\r\n\r\n    for(int i = 0; i < predictNet.op_size(); ++i){\r\n        predictNet.mutable_op(i)->mutable_device_option()->set_device_type(CPU);\r\n    }\r\n    for(int i = 0; i < initNet.op_size(); ++i){\r\n        initNet.mutable_op(i)->mutable_device_option()->set_device_type(CPU);\r\n    }\r\n#endif\r\n\r\n    // load network\r\n    CAFFE_ENFORCE(workSpace.RunNetOnce(initNet));\r\n    CAFFE_ENFORCE(workSpace.CreateNet(predictNet));\r\n    std::cout << \"== network loaded \" << \" ==\" << std::endl;\r\n\r\n    // load image from file, then convert it to float array.\r\n    float imgArray[1 * 28 * 28];\r\n    loadImage(FLAGS_file, imgArray);\r\n\r\n    // define a Tensor which is used to stone input data\r\n    std::cout << \"== Tensor \" << \" ==\" << std::endl;\r\n    TensorCPU input;\r\n    input.Resize(std::vector<TIndex>({1, 1, 28, 28}));\r\n    input.ShareExternalPointer(imgArray);\r\n\r\n    // get \"data\" blob\r\n#ifdef USE_GPU\r\n    auto data = workSpace.GetBlob(\"data\")->GetMutable<TensorCUDA>();\r\n#else\r\n    auto data = workSpace.GetBlob(\"data\")->GetMutable<TensorCPU>();\r\n#endif\r\n    std::cout << \"== Blob got \" << \" ==\" << std::endl;\r\n\r\n    // copy from input data\r\n    data->CopyFrom(input);\r\n    std::cout << \"== Data copied \" << \" ==\" << std::endl;\r\n\r\n    // forward\r\n    workSpace.RunNet(predictNet.name());\r\n    std::cout << \"== Net was run \" << \" ==\" << std::endl;\r\n\r\n    // get predictions blob and show the results\r\n    std::vector<std::string> labelName = {\"0\",\"1\",\"2\",\"3\",\"4\",\r\n        \"5\",\"6\",\"7\",\"8\",\"9\"};\r\n\r\n#ifdef USE_GPU\r\n    auto predictions = TensorCPU(workSpace.GetBlob(\"predictions\")->Get<TensorCUDA>());\r\n#else\r\n    auto predictions = workSpace.GetBlob(\"predictions\")->Get<TensorCPU>();\r\n#endif\r\n    std::cout << \"== predictions got \" << \" ==\" << std::endl;\r\n\r\n    std::vector<float> probs(predictions.data<float>(),\r\n        predictions.data<float>() + predictions.size());\r\n\r\n    auto max = std::max_element(probs.begin(), probs.end());\r\n    auto index = std::distance(probs.begin(), max);\r\n    std::cout << \"== predicted label: \" << labelName[index]\r\n              << \" ==\\n== with probability: \" << (*max * 100)\r\n              << \"% ==\" << std::endl;\r\n}\r\n\r\n}    // namespace caffe2\r\n\r\n// main function\r\nint main(int argc, char** argv) {\r\n    caffe2::GlobalInit(&argc, &argv);\r\n    caffe2::run();\r\n    google::protobuf::ShutdownProtobufLibrary();\r\n    return 0;\r\n}\r\n```\r\n\r\nThis is the structure of my project:\r\n![image](https://user-images.githubusercontent.com/25825048/45745633-8e1c2b00-bc01-11e8-8ffc-fac066470584.png)\r\n\r\nAttached my init_net.pb and predict_net.pb in `.pb` and `pbtxt` format. I had to chnage their extensions to .txt to be able to upload them.\r\n[init_net.txt](https://github.com/BIGBALLON/Caffe2_Demo/files/2396478/init_net.txt)\r\n[predict_net.txt](https://github.com/BIGBALLON/Caffe2_Demo/files/2396479/predict_net.txt)\r\n[init_net_pbtxt.txt](https://github.com/BIGBALLON/Caffe2_Demo/files/2396599/init_net_pbtxt.txt)\r\n[predict_net_pbtxt.txt](https://github.com/BIGBALLON/Caffe2_Demo/files/2396600/predict_net_pbtxt.txt)\r\n\r\n\r\n**Do you have an idea what could be the reason for the error?**\r\n\r\n**My configuration:\r\n-  Caffe2 tag v0.4.0\r\n- CUDA/cuDNN version: 8.0/7.0.5\r\n- GPU models and configuration: GTX 1050\r\n- CMake version:**\r\n"}