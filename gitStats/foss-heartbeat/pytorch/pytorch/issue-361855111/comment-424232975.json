{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/424232975", "html_url": "https://github.com/pytorch/pytorch/issues/11865#issuecomment-424232975", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/11865", "id": 424232975, "node_id": "MDEyOklzc3VlQ29tbWVudDQyNDIzMjk3NQ==", "user": {"login": "BIGBALLON", "id": 7837172, "node_id": "MDQ6VXNlcjc4MzcxNzI=", "avatar_url": "https://avatars0.githubusercontent.com/u/7837172?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BIGBALLON", "html_url": "https://github.com/BIGBALLON", "followers_url": "https://api.github.com/users/BIGBALLON/followers", "following_url": "https://api.github.com/users/BIGBALLON/following{/other_user}", "gists_url": "https://api.github.com/users/BIGBALLON/gists{/gist_id}", "starred_url": "https://api.github.com/users/BIGBALLON/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BIGBALLON/subscriptions", "organizations_url": "https://api.github.com/users/BIGBALLON/orgs", "repos_url": "https://api.github.com/users/BIGBALLON/repos", "events_url": "https://api.github.com/users/BIGBALLON/events{/privacy}", "received_events_url": "https://api.github.com/users/BIGBALLON/received_events", "type": "User", "site_admin": false}, "created_at": "2018-09-25T07:16:00Z", "updated_at": "2018-09-25T07:23:58Z", "author_association": "NONE", "body_html": "<p>hi, <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=25825048\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/CarlosYeverino\">@CarlosYeverino</a> ,</p>\n<p>The problem is not in caffe2, it's OpenCV's problem.<br>\nthe original demo is used to predict RGB images, but you just predict gray image.</p>\n<p>so you need to modify your <code>imageLoad()</code> function.</p>\n<div class=\"highlight highlight-source-c++\"><pre><span class=\"pl-k\">void</span> <span class=\"pl-en\">loadImage</span>(std::string file_name, <span class=\"pl-k\">float</span> *imgArray) {\n  <span class=\"pl-k\">auto</span> image = <span class=\"pl-c1\">cv::imread</span>(file_name);  <span class=\"pl-c\"><span class=\"pl-c\">//</span> CV_8UC3</span>\n  std::cout &lt;&lt; <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>== image size: <span class=\"pl-pds\">\"</span></span> &lt;&lt; image.<span class=\"pl-c1\">size</span>() &lt;&lt; <span class=\"pl-s\"><span class=\"pl-pds\">\"</span> ==<span class=\"pl-pds\">\"</span></span> &lt;&lt; std::endl;\n\n  <span class=\"pl-c\"><span class=\"pl-c\">//</span> scale image to fit</span>\n  cv::<span class=\"pl-c1\">Size</span> <span class=\"pl-smi\">scale</span>(<span class=\"pl-c1\">28</span>, <span class=\"pl-c1\">28</span>);\n  <span class=\"pl-c1\">cv::resize</span>(image, image, scale);\n  std::cout &lt;&lt; <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>== simply resize: <span class=\"pl-pds\">\"</span></span> &lt;&lt; image.<span class=\"pl-c1\">size</span>() &lt;&lt; <span class=\"pl-s\"><span class=\"pl-pds\">\"</span> ==<span class=\"pl-pds\">\"</span></span> &lt;&lt; std::endl;\n\n  <span class=\"pl-c\"><span class=\"pl-c\">//</span> convert [unsigned int] to [float]</span>\n  <span class=\"pl-c\"><span class=\"pl-c\">/*</span>**** important ***<span class=\"pl-c\">*/</span></span>\n  image.<span class=\"pl-c1\">convertTo</span>(image, CV_32FC1);         <span class=\"pl-c\"><span class=\"pl-c\">//</span>CV_32FC1</span>\n  <span class=\"pl-c\"><span class=\"pl-c\">/*</span>**** important ***<span class=\"pl-c\">*/</span></span>\n  <span class=\"pl-k\">auto</span> it = image.<span class=\"pl-smi\">begin</span>&lt;<span class=\"pl-k\">float</span>&gt;();\n  <span class=\"pl-k\">for</span> (<span class=\"pl-k\">unsigned</span> i = <span class=\"pl-c1\">0</span>; it != image.<span class=\"pl-smi\">end</span>&lt;<span class=\"pl-k\">float</span>&gt;(); it++, i++) {\n    *(imgArray + i) = (*it);\n  }\n\n}</pre></div>\n<p>then it works perfectly both in GPU mode and CPU mode.</p>\n<pre><code>bg@bg-CGI:~/Desktop/testNFS/Caffe2_Demo/03_cpp_forward/build$ ./classifier --file ../3.jpg\n== GPU processing selected  ==\n== network loaded  ==\n== image size: [42 x 41] ==\n== simply resize: [28 x 28] ==\n== Tensor  ==\n== Blob got  ==\n== Data copied  ==\n== Net was run  ==\n== predictions got  ==\n== predicted label: 3 ==\n== with probability: 100% ==\n</code></pre>", "body_text": "hi, @CarlosYeverino ,\nThe problem is not in caffe2, it's OpenCV's problem.\nthe original demo is used to predict RGB images, but you just predict gray image.\nso you need to modify your imageLoad() function.\nvoid loadImage(std::string file_name, float *imgArray) {\n  auto image = cv::imread(file_name);  // CV_8UC3\n  std::cout << \"== image size: \" << image.size() << \" ==\" << std::endl;\n\n  // scale image to fit\n  cv::Size scale(28, 28);\n  cv::resize(image, image, scale);\n  std::cout << \"== simply resize: \" << image.size() << \" ==\" << std::endl;\n\n  // convert [unsigned int] to [float]\n  /***** important ****/\n  image.convertTo(image, CV_32FC1);         //CV_32FC1\n  /***** important ****/\n  auto it = image.begin<float>();\n  for (unsigned i = 0; it != image.end<float>(); it++, i++) {\n    *(imgArray + i) = (*it);\n  }\n\n}\nthen it works perfectly both in GPU mode and CPU mode.\nbg@bg-CGI:~/Desktop/testNFS/Caffe2_Demo/03_cpp_forward/build$ ./classifier --file ../3.jpg\n== GPU processing selected  ==\n== network loaded  ==\n== image size: [42 x 41] ==\n== simply resize: [28 x 28] ==\n== Tensor  ==\n== Blob got  ==\n== Data copied  ==\n== Net was run  ==\n== predictions got  ==\n== predicted label: 3 ==\n== with probability: 100% ==", "body": "hi, @CarlosYeverino ,\r\n\r\nThe problem is not in caffe2, it's OpenCV's problem.\r\nthe original demo is used to predict RGB images, but you just predict gray image.\r\n\r\nso you need to modify your ``imageLoad()`` function.\r\n\r\n```cpp\r\nvoid loadImage(std::string file_name, float *imgArray) {\r\n  auto image = cv::imread(file_name);  // CV_8UC3\r\n  std::cout << \"== image size: \" << image.size() << \" ==\" << std::endl;\r\n\r\n  // scale image to fit\r\n  cv::Size scale(28, 28);\r\n  cv::resize(image, image, scale);\r\n  std::cout << \"== simply resize: \" << image.size() << \" ==\" << std::endl;\r\n\r\n  // convert [unsigned int] to [float]\r\n  /***** important ****/\r\n  image.convertTo(image, CV_32FC1);         //CV_32FC1\r\n  /***** important ****/\r\n  auto it = image.begin<float>();\r\n  for (unsigned i = 0; it != image.end<float>(); it++, i++) {\r\n    *(imgArray + i) = (*it);\r\n  }\r\n\r\n}\r\n```\r\n\r\nthen it works perfectly both in GPU mode and CPU mode.\r\n\r\n```\r\nbg@bg-CGI:~/Desktop/testNFS/Caffe2_Demo/03_cpp_forward/build$ ./classifier --file ../3.jpg\r\n== GPU processing selected  ==\r\n== network loaded  ==\r\n== image size: [42 x 41] ==\r\n== simply resize: [28 x 28] ==\r\n== Tensor  ==\r\n== Blob got  ==\r\n== Data copied  ==\r\n== Net was run  ==\r\n== predictions got  ==\r\n== predicted label: 3 ==\r\n== with probability: 100% ==\r\n```"}