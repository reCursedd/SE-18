{"url": "https://api.github.com/repos/pytorch/pytorch/issues/6133", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/6133/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/6133/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/6133/events", "html_url": "https://github.com/pytorch/pytorch/issues/6133", "id": 310086874, "node_id": "MDU6SXNzdWUzMTAwODY4NzQ=", "number": 6133, "title": "Feature test in CI to make sure we are successfully building a configuration", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-03-30T14:57:42Z", "updated_at": "2018-03-30T14:57:42Z", "closed_at": null, "author_association": "CONTRIBUTOR", "body_html": "<p>In <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"309933944\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/6121\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/pytorch/pytorch/pull/6121/hovercard\" href=\"https://github.com/pytorch/pytorch/pull/6121\">#6121</a>, we didn't catch the problem when cpuinfo merged because none of our CI configurations are testing NNPACK. This, however, was not intentional: we are installing nnpack in our Docker images (<a href=\"https://github.com/pietern/pytorch-dockerfiles/blob/master/common/install_conda.sh#L56\">https://github.com/pietern/pytorch-dockerfiles/blob/master/common/install_conda.sh#L56</a>) but for some reason cmake isn't picking it up. This is a \"known\" problem, but it was regressed for a fairly long time until someone caught in the course of other testing.</p>\n<p>This should not happen. We need to be more proactive about asserting that certain build configurations should be built with support for certain features, and fail the CI when they are not (thus catching when we accidentally disable a feature and stop testing for it.)</p>\n<p>Here are two possible courses of action:</p>\n<ol>\n<li>In the test script, we also add a feature test script. This script takes a build configuration, computes a set of features we expect that build configuration to have, and then tests PyTorch (either by running functions, or reading out compiled in build information) to ensure that this build configuration is actually available</li>\n<li>We have a number of tests which are skipped if a relevant feature is not enabled. These should be toggleable via an environment variable, such that we don't ever skip them; if the feature is not enabled, that is a failure.</li>\n</ol>\n<p>CC <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=655866\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/colesbury\">@colesbury</a></p>", "body_text": "In #6121, we didn't catch the problem when cpuinfo merged because none of our CI configurations are testing NNPACK. This, however, was not intentional: we are installing nnpack in our Docker images (https://github.com/pietern/pytorch-dockerfiles/blob/master/common/install_conda.sh#L56) but for some reason cmake isn't picking it up. This is a \"known\" problem, but it was regressed for a fairly long time until someone caught in the course of other testing.\nThis should not happen. We need to be more proactive about asserting that certain build configurations should be built with support for certain features, and fail the CI when they are not (thus catching when we accidentally disable a feature and stop testing for it.)\nHere are two possible courses of action:\n\nIn the test script, we also add a feature test script. This script takes a build configuration, computes a set of features we expect that build configuration to have, and then tests PyTorch (either by running functions, or reading out compiled in build information) to ensure that this build configuration is actually available\nWe have a number of tests which are skipped if a relevant feature is not enabled. These should be toggleable via an environment variable, such that we don't ever skip them; if the feature is not enabled, that is a failure.\n\nCC @colesbury", "body": "In #6121, we didn't catch the problem when cpuinfo merged because none of our CI configurations are testing NNPACK. This, however, was not intentional: we are installing nnpack in our Docker images (https://github.com/pietern/pytorch-dockerfiles/blob/master/common/install_conda.sh#L56) but for some reason cmake isn't picking it up. This is a \"known\" problem, but it was regressed for a fairly long time until someone caught in the course of other testing.\r\n\r\nThis should not happen. We need to be more proactive about asserting that certain build configurations should be built with support for certain features, and fail the CI when they are not (thus catching when we accidentally disable a feature and stop testing for it.)\r\n\r\nHere are two possible courses of action:\r\n\r\n1. In the test script, we also add a feature test script. This script takes a build configuration, computes a set of features we expect that build configuration to have, and then tests PyTorch (either by running functions, or reading out compiled in build information) to ensure that this build configuration is actually available\r\n2. We have a number of tests which are skipped if a relevant feature is not enabled. These should be toggleable via an environment variable, such that we don't ever skip them; if the feature is not enabled, that is a failure.\r\n\r\nCC @colesbury "}