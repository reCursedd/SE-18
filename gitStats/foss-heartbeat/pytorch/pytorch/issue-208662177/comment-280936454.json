{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/280936454", "html_url": "https://github.com/pytorch/pytorch/issues/782#issuecomment-280936454", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/782", "id": 280936454, "node_id": "MDEyOklzc3VlQ29tbWVudDI4MDkzNjQ1NA==", "user": {"login": "bodokaiser", "id": 1780466, "node_id": "MDQ6VXNlcjE3ODA0NjY=", "avatar_url": "https://avatars0.githubusercontent.com/u/1780466?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bodokaiser", "html_url": "https://github.com/bodokaiser", "followers_url": "https://api.github.com/users/bodokaiser/followers", "following_url": "https://api.github.com/users/bodokaiser/following{/other_user}", "gists_url": "https://api.github.com/users/bodokaiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/bodokaiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bodokaiser/subscriptions", "organizations_url": "https://api.github.com/users/bodokaiser/orgs", "repos_url": "https://api.github.com/users/bodokaiser/repos", "events_url": "https://api.github.com/users/bodokaiser/events{/privacy}", "received_events_url": "https://api.github.com/users/bodokaiser/received_events", "type": "User", "site_admin": false}, "created_at": "2017-02-19T18:08:06Z", "updated_at": "2017-02-19T18:08:46Z", "author_association": "NONE", "body_html": "<p>Then I guess this must be something in h5py?</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> os\n<span class=\"pl-k\">import</span> h5py\n<span class=\"pl-k\">import</span> numpy <span class=\"pl-k\">as</span> np\n\n<span class=\"pl-k\">from</span> torch.utils.data <span class=\"pl-k\">import</span> Dataset, DataLoader\n\n<span class=\"pl-k\">class</span> <span class=\"pl-en\">MINC2</span>(<span class=\"pl-e\">Dataset</span>):\n    <span class=\"pl-k\">def</span> <span class=\"pl-c1\">__init__</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>, <span class=\"pl-smi\">filename</span>):\n        <span class=\"pl-c1\">self</span>.minc <span class=\"pl-k\">=</span> h5py.File(filename, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>r<span class=\"pl-pds\">'</span></span>)\n        <span class=\"pl-c1\">self</span>.volume <span class=\"pl-k\">=</span> <span class=\"pl-c1\">self</span>.minc[<span class=\"pl-s\"><span class=\"pl-pds\">'</span>minc-2.0/image/0/image<span class=\"pl-pds\">'</span></span>]\n        <span class=\"pl-c1\">self</span>.vrange <span class=\"pl-k\">=</span> <span class=\"pl-c1\">self</span>.minc[<span class=\"pl-s\"><span class=\"pl-pds\">'</span>minc-2.0/image/0/image<span class=\"pl-pds\">'</span></span>].attrs[<span class=\"pl-s\"><span class=\"pl-pds\">'</span>valid_range<span class=\"pl-pds\">'</span></span>]\n        <span class=\"pl-c1\">self</span>.xlength <span class=\"pl-k\">=</span> <span class=\"pl-c1\">self</span>.minc[<span class=\"pl-s\"><span class=\"pl-pds\">'</span>minc-2.0/dimensions/xspace<span class=\"pl-pds\">'</span></span>].attrs[<span class=\"pl-s\"><span class=\"pl-pds\">'</span>length<span class=\"pl-pds\">'</span></span>]\n        <span class=\"pl-c1\">self</span>.ylength <span class=\"pl-k\">=</span> <span class=\"pl-c1\">self</span>.minc[<span class=\"pl-s\"><span class=\"pl-pds\">'</span>minc-2.0/dimensions/yspace<span class=\"pl-pds\">'</span></span>].attrs[<span class=\"pl-s\"><span class=\"pl-pds\">'</span>length<span class=\"pl-pds\">'</span></span>]\n        <span class=\"pl-c1\">self</span>.zlength <span class=\"pl-k\">=</span> <span class=\"pl-c1\">self</span>.minc[<span class=\"pl-s\"><span class=\"pl-pds\">'</span>minc-2.0/dimensions/zspace<span class=\"pl-pds\">'</span></span>].attrs[<span class=\"pl-s\"><span class=\"pl-pds\">'</span>length<span class=\"pl-pds\">'</span></span>]\n\n    <span class=\"pl-k\">def</span> <span class=\"pl-c1\">__getitem__</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>, <span class=\"pl-smi\">index</span>):\n        <span class=\"pl-c1\">slice</span> <span class=\"pl-k\">=</span> np.array(<span class=\"pl-c1\">self</span>.volume[index])\n        <span class=\"pl-k\">return</span> <span class=\"pl-c1\">slice</span> <span class=\"pl-k\">/</span> np.sum(np.abs(<span class=\"pl-c1\">self</span>.vrange))\n\n    <span class=\"pl-k\">def</span> <span class=\"pl-c1\">__len__</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>):\n        <span class=\"pl-k\">return</span> <span class=\"pl-c1\">self</span>.zlength\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">format_path</span>(<span class=\"pl-smi\">directory</span>, <span class=\"pl-smi\">filename</span>, <span class=\"pl-smi\">params</span>):\n    <span class=\"pl-k\">return</span> os.path.join(directory, filename.format(params))\n\n<span class=\"pl-k\">class</span> <span class=\"pl-en\">MNIBITE</span>(<span class=\"pl-e\">Dataset</span>):\n    <span class=\"pl-k\">def</span> <span class=\"pl-c1\">__init__</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>, <span class=\"pl-smi\">directory</span>, <span class=\"pl-smi\">id</span>, <span class=\"pl-smi\">transform</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">None</span>):\n        <span class=\"pl-c1\">self</span>.mr <span class=\"pl-k\">=</span> MINC2(format_path(directory, <span class=\"pl-s\"><span class=\"pl-pds\">'</span><span class=\"pl-c1\">{}</span>_mr.mnc<span class=\"pl-pds\">'</span></span>, <span class=\"pl-c1\">id</span>))\n        <span class=\"pl-c1\">self</span>.us <span class=\"pl-k\">=</span> MINC2(format_path(directory, <span class=\"pl-s\"><span class=\"pl-pds\">'</span><span class=\"pl-c1\">{}</span>_us.mnc<span class=\"pl-pds\">'</span></span>, <span class=\"pl-c1\">id</span>))\n        <span class=\"pl-c1\">self</span>.transform <span class=\"pl-k\">=</span> transform\n\n    <span class=\"pl-k\">def</span> <span class=\"pl-c1\">__getitem__</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>, <span class=\"pl-smi\">index</span>):\n        mr <span class=\"pl-k\">=</span> <span class=\"pl-c1\">self</span>.mr[index]\n        us <span class=\"pl-k\">=</span> <span class=\"pl-c1\">self</span>.us[index]\n        <span class=\"pl-k\">if</span> <span class=\"pl-c1\">self</span>.transform <span class=\"pl-k\">is</span> <span class=\"pl-k\">not</span> <span class=\"pl-c1\">None</span>:\n            mr, us <span class=\"pl-k\">=</span> <span class=\"pl-c1\">self</span>.transform(mr, us)\n        <span class=\"pl-k\">return</span> mr, us\n\n    <span class=\"pl-k\">def</span> <span class=\"pl-c1\">__len__</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>):\n        <span class=\"pl-k\">return</span> <span class=\"pl-c1\">len</span>(<span class=\"pl-c1\">self</span>.mr)</pre></div>\n<p><a href=\"http://www.bic.mni.mcgill.ca/~laurence/data/group2.tar.gz\" rel=\"nofollow\">dataset</a></p>", "body_text": "Then I guess this must be something in h5py?\nimport os\nimport h5py\nimport numpy as np\n\nfrom torch.utils.data import Dataset, DataLoader\n\nclass MINC2(Dataset):\n    def __init__(self, filename):\n        self.minc = h5py.File(filename, 'r')\n        self.volume = self.minc['minc-2.0/image/0/image']\n        self.vrange = self.minc['minc-2.0/image/0/image'].attrs['valid_range']\n        self.xlength = self.minc['minc-2.0/dimensions/xspace'].attrs['length']\n        self.ylength = self.minc['minc-2.0/dimensions/yspace'].attrs['length']\n        self.zlength = self.minc['minc-2.0/dimensions/zspace'].attrs['length']\n\n    def __getitem__(self, index):\n        slice = np.array(self.volume[index])\n        return slice / np.sum(np.abs(self.vrange))\n\n    def __len__(self):\n        return self.zlength\n\ndef format_path(directory, filename, params):\n    return os.path.join(directory, filename.format(params))\n\nclass MNIBITE(Dataset):\n    def __init__(self, directory, id, transform=None):\n        self.mr = MINC2(format_path(directory, '{}_mr.mnc', id))\n        self.us = MINC2(format_path(directory, '{}_us.mnc', id))\n        self.transform = transform\n\n    def __getitem__(self, index):\n        mr = self.mr[index]\n        us = self.us[index]\n        if self.transform is not None:\n            mr, us = self.transform(mr, us)\n        return mr, us\n\n    def __len__(self):\n        return len(self.mr)\ndataset", "body": "Then I guess this must be something in h5py?\r\n\r\n```python\r\nimport os\r\nimport h5py\r\nimport numpy as np\r\n\r\nfrom torch.utils.data import Dataset, DataLoader\r\n\r\nclass MINC2(Dataset):\r\n    def __init__(self, filename):\r\n        self.minc = h5py.File(filename, 'r')\r\n        self.volume = self.minc['minc-2.0/image/0/image']\r\n        self.vrange = self.minc['minc-2.0/image/0/image'].attrs['valid_range']\r\n        self.xlength = self.minc['minc-2.0/dimensions/xspace'].attrs['length']\r\n        self.ylength = self.minc['minc-2.0/dimensions/yspace'].attrs['length']\r\n        self.zlength = self.minc['minc-2.0/dimensions/zspace'].attrs['length']\r\n\r\n    def __getitem__(self, index):\r\n        slice = np.array(self.volume[index])\r\n        return slice / np.sum(np.abs(self.vrange))\r\n\r\n    def __len__(self):\r\n        return self.zlength\r\n\r\ndef format_path(directory, filename, params):\r\n    return os.path.join(directory, filename.format(params))\r\n\r\nclass MNIBITE(Dataset):\r\n    def __init__(self, directory, id, transform=None):\r\n        self.mr = MINC2(format_path(directory, '{}_mr.mnc', id))\r\n        self.us = MINC2(format_path(directory, '{}_us.mnc', id))\r\n        self.transform = transform\r\n\r\n    def __getitem__(self, index):\r\n        mr = self.mr[index]\r\n        us = self.us[index]\r\n        if self.transform is not None:\r\n            mr, us = self.transform(mr, us)\r\n        return mr, us\r\n\r\n    def __len__(self):\r\n        return len(self.mr)\r\n```\r\n\r\n[dataset](http://www.bic.mni.mcgill.ca/~laurence/data/group2.tar.gz)"}