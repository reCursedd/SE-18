{"url": "https://api.github.com/repos/pytorch/pytorch/issues/782", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/782/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/782/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/782/events", "html_url": "https://github.com/pytorch/pytorch/issues/782", "id": 208662177, "node_id": "MDU6SXNzdWUyMDg2NjIxNzc=", "number": 782, "title": "Add support for numpy arrays in default collate_fn", "user": {"login": "bodokaiser", "id": 1780466, "node_id": "MDQ6VXNlcjE3ODA0NjY=", "avatar_url": "https://avatars0.githubusercontent.com/u/1780466?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bodokaiser", "html_url": "https://github.com/bodokaiser", "followers_url": "https://api.github.com/users/bodokaiser/followers", "following_url": "https://api.github.com/users/bodokaiser/following{/other_user}", "gists_url": "https://api.github.com/users/bodokaiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/bodokaiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bodokaiser/subscriptions", "organizations_url": "https://api.github.com/users/bodokaiser/orgs", "repos_url": "https://api.github.com/users/bodokaiser/repos", "events_url": "https://api.github.com/users/bodokaiser/events{/privacy}", "received_events_url": "https://api.github.com/users/bodokaiser/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 424131849, "node_id": "MDU6TGFiZWw0MjQxMzE4NDk=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true}, {"id": 443484050, "node_id": "MDU6TGFiZWw0NDM0ODQwNTA=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/medium%20priority", "name": "medium priority", "color": "fbca04", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 4, "created_at": "2017-02-18T19:01:16Z", "updated_at": "2017-02-21T07:30:32Z", "closed_at": "2017-02-21T07:30:32Z", "author_association": "NONE", "body_html": "<p>I am working with a dataset which contains some target labels I want to filter before training.</p>\n<div class=\"highlight highlight-source-python\"><pre>dataloader <span class=\"pl-k\">=</span> DataLoader(dataset, <span class=\"pl-v\">batch_size</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">128</span>)\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">batch_filter</span>(<span class=\"pl-smi\">target</span>):\n    <span class=\"pl-k\">return</span> np.any(target[<span class=\"pl-c1\">0</span>]) <span class=\"pl-k\">and</span> np.any(target[<span class=\"pl-c1\">1</span>])\n\nloader <span class=\"pl-k\">=</span> <span class=\"pl-c1\">filter</span>(<span class=\"pl-k\">lambda</span> (<span class=\"pl-smi\">_</span>, target): np.any(target), dataloader)\n<span class=\"pl-c1\">next</span>(loader)</pre></div>\n<p>Yields:</p>\n<pre><code>/Users/bodokaiser/.virtualenvs/mrtous-pytorch/lib/python3.6/site-packages/torch/utils/data/dataloader.py in __next__(self)\n    144                 raise StopIteration\n    145             indices = self._next_indices()\n--&gt; 146             batch = self.collate_fn([self.dataset[i] for i in indices])\n    147             if self.pin_memory:\n    148                 batch = pin_memory_batch(batch)\n\n/Users/bodokaiser/.virtualenvs/mrtous-pytorch/lib/python3.6/site-packages/torch/utils/data/dataloader.py in default_collate(batch)\n     73         # of tensors; in that case we collate each element in the tuple\n     74         transposed = zip(*batch)\n---&gt; 75         return [default_collate(samples) for samples in transposed]\n     76 \n     77     raise TypeError((\"batch must contain tensors, numbers, or lists; found {}\"\n\n/Users/bodokaiser/.virtualenvs/mrtous-pytorch/lib/python3.6/site-packages/torch/utils/data/dataloader.py in &lt;listcomp&gt;(.0)\n     73         # of tensors; in that case we collate each element in the tuple\n     74         transposed = zip(*batch)\n---&gt; 75         return [default_collate(samples) for samples in transposed]\n     76 \n     77     raise TypeError((\"batch must contain tensors, numbers, or lists; found {}\"\n\n/Users/bodokaiser/.virtualenvs/mrtous-pytorch/lib/python3.6/site-packages/torch/utils/data/dataloader.py in default_collate(batch)\n     73         # of tensors; in that case we collate each element in the tuple\n     74         transposed = zip(*batch)\n---&gt; 75         return [default_collate(samples) for samples in transposed]\n     76 \n     77     raise TypeError((\"batch must contain tensors, numbers, or lists; found {}\"\n\n/Users/bodokaiser/.virtualenvs/mrtous-pytorch/lib/python3.6/site-packages/torch/utils/data/dataloader.py in &lt;listcomp&gt;(.0)\n     73         # of tensors; in that case we collate each element in the tuple\n     74         transposed = zip(*batch)\n---&gt; 75         return [default_collate(samples) for samples in transposed]\n     76 \n     77     raise TypeError((\"batch must contain tensors, numbers, or lists; found {}\"\n\n/Users/bodokaiser/.virtualenvs/mrtous-pytorch/lib/python3.6/site-packages/torch/utils/data/dataloader.py in default_collate(batch)\n     72         # if each batch element is not a tensor, then it should be a tuple\n     73         # of tensors; in that case we collate each element in the tuple\n---&gt; 74         transposed = zip(*batch)\n     75         return [default_collate(samples) for samples in transposed]\n     76 \n\nTypeError: zip argument #65 must support iteration\n</code></pre>\n<p>Maybe we can add extra case handler for this?</p>", "body_text": "I am working with a dataset which contains some target labels I want to filter before training.\ndataloader = DataLoader(dataset, batch_size=128)\n\ndef batch_filter(target):\n    return np.any(target[0]) and np.any(target[1])\n\nloader = filter(lambda (_, target): np.any(target), dataloader)\nnext(loader)\nYields:\n/Users/bodokaiser/.virtualenvs/mrtous-pytorch/lib/python3.6/site-packages/torch/utils/data/dataloader.py in __next__(self)\n    144                 raise StopIteration\n    145             indices = self._next_indices()\n--> 146             batch = self.collate_fn([self.dataset[i] for i in indices])\n    147             if self.pin_memory:\n    148                 batch = pin_memory_batch(batch)\n\n/Users/bodokaiser/.virtualenvs/mrtous-pytorch/lib/python3.6/site-packages/torch/utils/data/dataloader.py in default_collate(batch)\n     73         # of tensors; in that case we collate each element in the tuple\n     74         transposed = zip(*batch)\n---> 75         return [default_collate(samples) for samples in transposed]\n     76 \n     77     raise TypeError((\"batch must contain tensors, numbers, or lists; found {}\"\n\n/Users/bodokaiser/.virtualenvs/mrtous-pytorch/lib/python3.6/site-packages/torch/utils/data/dataloader.py in <listcomp>(.0)\n     73         # of tensors; in that case we collate each element in the tuple\n     74         transposed = zip(*batch)\n---> 75         return [default_collate(samples) for samples in transposed]\n     76 \n     77     raise TypeError((\"batch must contain tensors, numbers, or lists; found {}\"\n\n/Users/bodokaiser/.virtualenvs/mrtous-pytorch/lib/python3.6/site-packages/torch/utils/data/dataloader.py in default_collate(batch)\n     73         # of tensors; in that case we collate each element in the tuple\n     74         transposed = zip(*batch)\n---> 75         return [default_collate(samples) for samples in transposed]\n     76 \n     77     raise TypeError((\"batch must contain tensors, numbers, or lists; found {}\"\n\n/Users/bodokaiser/.virtualenvs/mrtous-pytorch/lib/python3.6/site-packages/torch/utils/data/dataloader.py in <listcomp>(.0)\n     73         # of tensors; in that case we collate each element in the tuple\n     74         transposed = zip(*batch)\n---> 75         return [default_collate(samples) for samples in transposed]\n     76 \n     77     raise TypeError((\"batch must contain tensors, numbers, or lists; found {}\"\n\n/Users/bodokaiser/.virtualenvs/mrtous-pytorch/lib/python3.6/site-packages/torch/utils/data/dataloader.py in default_collate(batch)\n     72         # if each batch element is not a tensor, then it should be a tuple\n     73         # of tensors; in that case we collate each element in the tuple\n---> 74         transposed = zip(*batch)\n     75         return [default_collate(samples) for samples in transposed]\n     76 \n\nTypeError: zip argument #65 must support iteration\n\nMaybe we can add extra case handler for this?", "body": "I am working with a dataset which contains some target labels I want to filter before training.\r\n\r\n```python\r\ndataloader = DataLoader(dataset, batch_size=128)\r\n\r\ndef batch_filter(target):\r\n    return np.any(target[0]) and np.any(target[1])\r\n\r\nloader = filter(lambda (_, target): np.any(target), dataloader)\r\nnext(loader)\r\n```\r\n\r\nYields:\r\n\r\n```\r\n/Users/bodokaiser/.virtualenvs/mrtous-pytorch/lib/python3.6/site-packages/torch/utils/data/dataloader.py in __next__(self)\r\n    144                 raise StopIteration\r\n    145             indices = self._next_indices()\r\n--> 146             batch = self.collate_fn([self.dataset[i] for i in indices])\r\n    147             if self.pin_memory:\r\n    148                 batch = pin_memory_batch(batch)\r\n\r\n/Users/bodokaiser/.virtualenvs/mrtous-pytorch/lib/python3.6/site-packages/torch/utils/data/dataloader.py in default_collate(batch)\r\n     73         # of tensors; in that case we collate each element in the tuple\r\n     74         transposed = zip(*batch)\r\n---> 75         return [default_collate(samples) for samples in transposed]\r\n     76 \r\n     77     raise TypeError((\"batch must contain tensors, numbers, or lists; found {}\"\r\n\r\n/Users/bodokaiser/.virtualenvs/mrtous-pytorch/lib/python3.6/site-packages/torch/utils/data/dataloader.py in <listcomp>(.0)\r\n     73         # of tensors; in that case we collate each element in the tuple\r\n     74         transposed = zip(*batch)\r\n---> 75         return [default_collate(samples) for samples in transposed]\r\n     76 \r\n     77     raise TypeError((\"batch must contain tensors, numbers, or lists; found {}\"\r\n\r\n/Users/bodokaiser/.virtualenvs/mrtous-pytorch/lib/python3.6/site-packages/torch/utils/data/dataloader.py in default_collate(batch)\r\n     73         # of tensors; in that case we collate each element in the tuple\r\n     74         transposed = zip(*batch)\r\n---> 75         return [default_collate(samples) for samples in transposed]\r\n     76 \r\n     77     raise TypeError((\"batch must contain tensors, numbers, or lists; found {}\"\r\n\r\n/Users/bodokaiser/.virtualenvs/mrtous-pytorch/lib/python3.6/site-packages/torch/utils/data/dataloader.py in <listcomp>(.0)\r\n     73         # of tensors; in that case we collate each element in the tuple\r\n     74         transposed = zip(*batch)\r\n---> 75         return [default_collate(samples) for samples in transposed]\r\n     76 \r\n     77     raise TypeError((\"batch must contain tensors, numbers, or lists; found {}\"\r\n\r\n/Users/bodokaiser/.virtualenvs/mrtous-pytorch/lib/python3.6/site-packages/torch/utils/data/dataloader.py in default_collate(batch)\r\n     72         # if each batch element is not a tensor, then it should be a tuple\r\n     73         # of tensors; in that case we collate each element in the tuple\r\n---> 74         transposed = zip(*batch)\r\n     75         return [default_collate(samples) for samples in transposed]\r\n     76 \r\n\r\nTypeError: zip argument #65 must support iteration\r\n```\r\n\r\nMaybe we can add extra case handler for this?"}