{"url": "https://api.github.com/repos/pytorch/pytorch/issues/2890", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/2890/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/2890/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/2890/events", "html_url": "https://github.com/pytorch/pytorch/issues/2890", "id": 261439333, "node_id": "MDU6SXNzdWUyNjE0MzkzMzM=", "number": 2890, "title": "Feature Request (and code for it) - returning filepaths in ImageFolder along with data and target", "user": {"login": "Spandan-Madan", "id": 21960611, "node_id": "MDQ6VXNlcjIxOTYwNjEx", "avatar_url": "https://avatars0.githubusercontent.com/u/21960611?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Spandan-Madan", "html_url": "https://github.com/Spandan-Madan", "followers_url": "https://api.github.com/users/Spandan-Madan/followers", "following_url": "https://api.github.com/users/Spandan-Madan/following{/other_user}", "gists_url": "https://api.github.com/users/Spandan-Madan/gists{/gist_id}", "starred_url": "https://api.github.com/users/Spandan-Madan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Spandan-Madan/subscriptions", "organizations_url": "https://api.github.com/users/Spandan-Madan/orgs", "repos_url": "https://api.github.com/users/Spandan-Madan/repos", "events_url": "https://api.github.com/users/Spandan-Madan/events{/privacy}", "received_events_url": "https://api.github.com/users/Spandan-Madan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-09-28T19:48:26Z", "updated_at": "2017-10-03T09:37:25Z", "closed_at": "2017-10-03T09:37:25Z", "author_association": "NONE", "body_html": "<p>To make any sense of how your model is doing, it is extremely important to visualize the results. It's great to have access to the file path along with the data and target label.</p>\n<p>The workaround I'm using basically overrides the getitem function by explicitly setting it to this -</p>\n<pre><code>def getitemnew(self, index):\n        \"\"\"\n        Args:\n            index (int): Index\n\n        Returns:\n            tuple: (image, target) where target is class_index of the target class.\n        \"\"\"\n        path, target = self.imgs[index]\n        img = self.loader(path)\n        if self.transform is not None:\n            img = self.transform(img)\n        if self.target_transform is not None:\n            target = self.target_transform(target)\n\n        return img, target, path\n\n</code></pre>\n<p>I suggest adding an optional flag to ImageFolder which will allow people to get access to the paths.</p>", "body_text": "To make any sense of how your model is doing, it is extremely important to visualize the results. It's great to have access to the file path along with the data and target label.\nThe workaround I'm using basically overrides the getitem function by explicitly setting it to this -\ndef getitemnew(self, index):\n        \"\"\"\n        Args:\n            index (int): Index\n\n        Returns:\n            tuple: (image, target) where target is class_index of the target class.\n        \"\"\"\n        path, target = self.imgs[index]\n        img = self.loader(path)\n        if self.transform is not None:\n            img = self.transform(img)\n        if self.target_transform is not None:\n            target = self.target_transform(target)\n\n        return img, target, path\n\n\nI suggest adding an optional flag to ImageFolder which will allow people to get access to the paths.", "body": "To make any sense of how your model is doing, it is extremely important to visualize the results. It's great to have access to the file path along with the data and target label. \r\n\r\nThe workaround I'm using basically overrides the getitem function by explicitly setting it to this -\r\n\r\n```\r\ndef getitemnew(self, index):\r\n        \"\"\"\r\n        Args:\r\n            index (int): Index\r\n\r\n        Returns:\r\n            tuple: (image, target) where target is class_index of the target class.\r\n        \"\"\"\r\n        path, target = self.imgs[index]\r\n        img = self.loader(path)\r\n        if self.transform is not None:\r\n            img = self.transform(img)\r\n        if self.target_transform is not None:\r\n            target = self.target_transform(target)\r\n\r\n        return img, target, path\r\n\r\n```\r\n\r\nI suggest adding an optional flag to ImageFolder which will allow people to get access to the paths."}