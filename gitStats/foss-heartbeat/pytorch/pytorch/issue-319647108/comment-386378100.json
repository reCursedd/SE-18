{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/386378100", "html_url": "https://github.com/pytorch/pytorch/issues/7181#issuecomment-386378100", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/7181", "id": 386378100, "node_id": "MDEyOklzc3VlQ29tbWVudDM4NjM3ODEwMA==", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "created_at": "2018-05-03T17:43:05Z", "updated_at": "2018-05-03T17:43:15Z", "author_association": "MEMBER", "body_html": "<p>Thanks! Ok, I think that's a user error. The problem is that the second worker exits before the main process receives the tensor in its entirety. Would inserting extra synchronization, to prevent the worker from quitting before the main process finishes reading fix the issue?</p>", "body_text": "Thanks! Ok, I think that's a user error. The problem is that the second worker exits before the main process receives the tensor in its entirety. Would inserting extra synchronization, to prevent the worker from quitting before the main process finishes reading fix the issue?", "body": "Thanks! Ok, I think that's a user error. The problem is that the second worker exits before the main process receives the tensor in its entirety. Would inserting extra synchronization, to prevent the worker from quitting before the main process finishes reading fix the issue?"}