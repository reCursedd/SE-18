{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/182604226", "pull_request_review_id": 113432984, "id": 182604226, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjYwNDIyNg==", "diff_hunk": "@@ -9,27 +9,40 @@\n from hypothesis import given\n import hypothesis.strategies as st\n \n+\n class ChannelShuffleOpsTest(hu.HypothesisTestCase):\n     @given(\n         channels_per_group=st.integers(min_value=1, max_value=5),\n         groups=st.integers(min_value=1, max_value=5),\n         n=st.integers(min_value=1, max_value=2),\n+        order=st.sampled_from([\"NCHW\", \"NHWC\"]),\n         **hu.gcs)\n-    def test_channel_shuffle(self, channels_per_group, groups, n, gc, dc):\n+    def test_channel_shuffle(self, channels_per_group, groups, n, order, gc, dc):\n         X = np.random.randn(\n             n, channels_per_group * groups, 5, 6).astype(np.float32)\n+        if order == \"NHWC\":\n+            # NCHW -> NHWC\n+            X = X.transpose((0, 2, 3, 1))\n \n         op = core.CreateOperator(\"ChannelShuffle\", [\"X\"], [\"Y\"],\n-                                 group=groups, kernel=1)\n+                                 group=groups, kernel=1, order=order,\n+                                 device_option=dc)", "path": "caffe2/python/operator_test/channel_shuffle_test.py", "position": null, "original_position": 23, "commit_id": "a106eb55bde2575268bde6a1e8ba07bc687f1b7f", "original_commit_id": "7ee7ee740d242ea228051ecbe679a343edb3baa1", "user": {"login": "bddppq", "id": 9300575, "node_id": "MDQ6VXNlcjkzMDA1NzU=", "avatar_url": "https://avatars2.githubusercontent.com/u/9300575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bddppq", "html_url": "https://github.com/bddppq", "followers_url": "https://api.github.com/users/bddppq/followers", "following_url": "https://api.github.com/users/bddppq/following{/other_user}", "gists_url": "https://api.github.com/users/bddppq/gists{/gist_id}", "starred_url": "https://api.github.com/users/bddppq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bddppq/subscriptions", "organizations_url": "https://api.github.com/users/bddppq/orgs", "repos_url": "https://api.github.com/users/bddppq/repos", "events_url": "https://api.github.com/users/bddppq/events{/privacy}", "received_events_url": "https://api.github.com/users/bddppq/received_events", "type": "User", "site_admin": false}, "body": "Should be passing gc here (or you can ignore it because assertReferenceChecks will do that for you).", "created_at": "2018-04-19T00:11:03Z", "updated_at": "2018-11-23T15:42:48Z", "html_url": "https://github.com/pytorch/pytorch/pull/6667#discussion_r182604226", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/6667", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/182604226"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/6667#discussion_r182604226"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/6667"}}, "body_html": "<p>Should be passing gc here (or you can ignore it because assertReferenceChecks will do that for you).</p>", "body_text": "Should be passing gc here (or you can ignore it because assertReferenceChecks will do that for you)."}