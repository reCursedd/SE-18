{"url": "https://api.github.com/repos/pytorch/pytorch/issues/2817", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/2817/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/2817/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/2817/events", "html_url": "https://github.com/pytorch/pytorch/issues/2817", "id": 259542993, "node_id": "MDU6SXNzdWUyNTk1NDI5OTM=", "number": 2817, "title": "torch.min() memory leak", "user": {"login": "dmarnerides", "id": 7605917, "node_id": "MDQ6VXNlcjc2MDU5MTc=", "avatar_url": "https://avatars1.githubusercontent.com/u/7605917?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dmarnerides", "html_url": "https://github.com/dmarnerides", "followers_url": "https://api.github.com/users/dmarnerides/followers", "following_url": "https://api.github.com/users/dmarnerides/following{/other_user}", "gists_url": "https://api.github.com/users/dmarnerides/gists{/gist_id}", "starred_url": "https://api.github.com/users/dmarnerides/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dmarnerides/subscriptions", "organizations_url": "https://api.github.com/users/dmarnerides/orgs", "repos_url": "https://api.github.com/users/dmarnerides/repos", "events_url": "https://api.github.com/users/dmarnerides/events{/privacy}", "received_events_url": "https://api.github.com/users/dmarnerides/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-09-21T15:45:47Z", "updated_at": "2017-09-21T16:10:29Z", "closed_at": "2017-09-21T16:10:29Z", "author_association": "NONE", "body_html": "<p>There is a possible memory leak in torch.min()</p>\n<p>This causes memory to blow up:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">for</span> i <span class=\"pl-k\">in</span> <span class=\"pl-c1\">range</span>(<span class=\"pl-c1\">100000</span>):\n    a <span class=\"pl-k\">=</span> torch.FloatTensor(<span class=\"pl-c1\">2</span>,<span class=\"pl-c1\">2</span>,<span class=\"pl-c1\">1000000</span>).min(<span class=\"pl-c1\">0</span>)[<span class=\"pl-c1\">0</span>]\n    time.sleep(<span class=\"pl-c1\">0.1</span>)</pre></div>\n<p>When using torch.max() memory usage is ok</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">for</span> i <span class=\"pl-k\">in</span> <span class=\"pl-c1\">range</span>(<span class=\"pl-c1\">100000</span>):\n    a <span class=\"pl-k\">=</span> torch.FloatTensor(<span class=\"pl-c1\">2</span>,<span class=\"pl-c1\">2</span>,<span class=\"pl-c1\">1000000</span>).max(<span class=\"pl-c1\">0</span>)[<span class=\"pl-c1\">0</span>]\n    time.sleep(<span class=\"pl-c1\">0.1</span>)</pre></div>\n<p>There is no leak for unitary dimensions</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">for</span> i <span class=\"pl-k\">in</span> <span class=\"pl-c1\">range</span>(<span class=\"pl-c1\">100000</span>):\n    a <span class=\"pl-k\">=</span> torch.FloatTensor(<span class=\"pl-c1\">1</span>,<span class=\"pl-c1\">2</span>,<span class=\"pl-c1\">1000000</span>).min(<span class=\"pl-c1\">0</span>)[<span class=\"pl-c1\">0</span>]\n    time.sleep(<span class=\"pl-c1\">0.1</span>)</pre></div>", "body_text": "There is a possible memory leak in torch.min()\nThis causes memory to blow up:\nfor i in range(100000):\n    a = torch.FloatTensor(2,2,1000000).min(0)[0]\n    time.sleep(0.1)\nWhen using torch.max() memory usage is ok\nfor i in range(100000):\n    a = torch.FloatTensor(2,2,1000000).max(0)[0]\n    time.sleep(0.1)\nThere is no leak for unitary dimensions\nfor i in range(100000):\n    a = torch.FloatTensor(1,2,1000000).min(0)[0]\n    time.sleep(0.1)", "body": "There is a possible memory leak in torch.min()\r\n\r\nThis causes memory to blow up:\r\n```python\r\nfor i in range(100000):\r\n    a = torch.FloatTensor(2,2,1000000).min(0)[0]\r\n    time.sleep(0.1)\r\n```\r\nWhen using torch.max() memory usage is ok\r\n```python\r\nfor i in range(100000):\r\n    a = torch.FloatTensor(2,2,1000000).max(0)[0]\r\n    time.sleep(0.1)\r\n```\r\nThere is no leak for unitary dimensions\r\n```python\r\nfor i in range(100000):\r\n    a = torch.FloatTensor(1,2,1000000).min(0)[0]\r\n    time.sleep(0.1)\r\n```\r\n\r\n"}