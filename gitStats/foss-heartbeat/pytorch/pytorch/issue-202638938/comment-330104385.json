{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/330104385", "html_url": "https://github.com/pytorch/pytorch/issues/563#issuecomment-330104385", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/563", "id": 330104385, "node_id": "MDEyOklzc3VlQ29tbWVudDMzMDEwNDM4NQ==", "user": {"login": "greydanus", "id": 18602382, "node_id": "MDQ6VXNlcjE4NjAyMzgy", "avatar_url": "https://avatars0.githubusercontent.com/u/18602382?v=4", "gravatar_id": "", "url": "https://api.github.com/users/greydanus", "html_url": "https://github.com/greydanus", "followers_url": "https://api.github.com/users/greydanus/followers", "following_url": "https://api.github.com/users/greydanus/following{/other_user}", "gists_url": "https://api.github.com/users/greydanus/gists{/gist_id}", "starred_url": "https://api.github.com/users/greydanus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/greydanus/subscriptions", "organizations_url": "https://api.github.com/users/greydanus/orgs", "repos_url": "https://api.github.com/users/greydanus/repos", "events_url": "https://api.github.com/users/greydanus/events{/privacy}", "received_events_url": "https://api.github.com/users/greydanus/received_events", "type": "User", "site_admin": false}, "created_at": "2017-09-18T00:14:31Z", "updated_at": "2017-09-18T18:28:59Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=241138\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/karpathy\">@karpathy</a> thanks, that masking makes sense. I think that you might be able to accomplish the same thing with a <code>gather</code> operation instead of a mask: <code>logpy = torch.gather(logp, 1, Variable(y.view(-1,1)))</code></p>\n<p>I'm thinking about using this as a loss for an RL algorithm. The idea would be to set <code>per_example_weights = advantage</code>.</p>\n<p>Sort of ironic you responded to this, as I was just reimplementing your <strong>tf-agent</strong> in PyTorch and trying to find an equivalent of <code>tf.nn.sparse_softmax_cross_entropy_with_logits</code></p>", "body_text": "@karpathy thanks, that masking makes sense. I think that you might be able to accomplish the same thing with a gather operation instead of a mask: logpy = torch.gather(logp, 1, Variable(y.view(-1,1)))\nI'm thinking about using this as a loss for an RL algorithm. The idea would be to set per_example_weights = advantage.\nSort of ironic you responded to this, as I was just reimplementing your tf-agent in PyTorch and trying to find an equivalent of tf.nn.sparse_softmax_cross_entropy_with_logits", "body": "@karpathy thanks, that masking makes sense. I think that you might be able to accomplish the same thing with a `gather` operation instead of a mask: `logpy = torch.gather(logp, 1, Variable(y.view(-1,1)))`\r\n\r\nI'm thinking about using this as a loss for an RL algorithm. The idea would be to set `per_example_weights = advantage`.\r\n\r\nSort of ironic you responded to this, as I was just reimplementing your **tf-agent** in PyTorch and trying to find an equivalent of `tf.nn.sparse_softmax_cross_entropy_with_logits`"}