{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/411645658", "html_url": "https://github.com/pytorch/pytorch/issues/9332#issuecomment-411645658", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/9332", "id": 411645658, "node_id": "MDEyOklzc3VlQ29tbWVudDQxMTY0NTY1OA==", "user": {"login": "vishwakftw", "id": 23639302, "node_id": "MDQ6VXNlcjIzNjM5MzAy", "avatar_url": "https://avatars2.githubusercontent.com/u/23639302?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vishwakftw", "html_url": "https://github.com/vishwakftw", "followers_url": "https://api.github.com/users/vishwakftw/followers", "following_url": "https://api.github.com/users/vishwakftw/following{/other_user}", "gists_url": "https://api.github.com/users/vishwakftw/gists{/gist_id}", "starred_url": "https://api.github.com/users/vishwakftw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vishwakftw/subscriptions", "organizations_url": "https://api.github.com/users/vishwakftw/orgs", "repos_url": "https://api.github.com/users/vishwakftw/repos", "events_url": "https://api.github.com/users/vishwakftw/events{/privacy}", "received_events_url": "https://api.github.com/users/vishwakftw/received_events", "type": "User", "site_admin": false}, "created_at": "2018-08-09T05:56:52Z", "updated_at": "2018-08-09T05:58:14Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1310570\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/soumith\">@soumith</a></p>\n<p>I have a question about integrating the <code>SobolEngine</code> in Python. There are two approaches:</p>\n<ol>\n<li>Define the key methods involved for the <code>SobolEngine</code> in ATen, and write the class in Python in the usual way:</li>\n</ol>\n<pre><code>class SobolEngine(object):\n    def __init__(self ,.... ):\n        # the usual definitions\n</code></pre>\n<p>The methods for <code>SobolEngine</code> will be taken for those exposed via <code>ATen</code> as done for general native functions, except for the fact that the methods exposed will be private i.e., prefixed with a <code>_</code> and then used (e.g.: <code>_unique</code>). This will prevent general use while satisfying the requirements.</p>\n<ol start=\"2\">\n<li>Create a class <code>SobolEngine</code> in <code>ATen</code> itself, and then interface it to Python by creating bindings in <code>torch/csrc</code>, as done for <code>torch.device</code>.</li>\n</ol>\n<p>Approach 1 is less complex compared to Approach 2 and Approach 2 is possibly unnecessary, but I am not sure if Approach 1 would cause any performance issues.</p>\n<p>Please let me know your thoughts about this, after which I can send in a PR. Thank you.</p>", "body_text": "@soumith\nI have a question about integrating the SobolEngine in Python. There are two approaches:\n\nDefine the key methods involved for the SobolEngine in ATen, and write the class in Python in the usual way:\n\nclass SobolEngine(object):\n    def __init__(self ,.... ):\n        # the usual definitions\n\nThe methods for SobolEngine will be taken for those exposed via ATen as done for general native functions, except for the fact that the methods exposed will be private i.e., prefixed with a _ and then used (e.g.: _unique). This will prevent general use while satisfying the requirements.\n\nCreate a class SobolEngine in ATen itself, and then interface it to Python by creating bindings in torch/csrc, as done for torch.device.\n\nApproach 1 is less complex compared to Approach 2 and Approach 2 is possibly unnecessary, but I am not sure if Approach 1 would cause any performance issues.\nPlease let me know your thoughts about this, after which I can send in a PR. Thank you.", "body": "@soumith \r\n\r\nI have a question about integrating the `SobolEngine` in Python. There are two approaches:\r\n1. Define the key methods involved for the `SobolEngine` in ATen, and write the class in Python in the usual way:\r\n```\r\nclass SobolEngine(object):\r\n    def __init__(self ,.... ):\r\n        # the usual definitions\r\n```\r\nThe methods for `SobolEngine` will be taken for those exposed via `ATen` as done for general native functions, except for the fact that the methods exposed will be private i.e., prefixed with a `_` and then used (e.g.: `_unique`). This will prevent general use while satisfying the requirements.\r\n\r\n2. Create a class `SobolEngine` in `ATen` itself, and then interface it to Python by creating bindings in `torch/csrc`, as done for `torch.device`.\r\n\r\nApproach 1 is less complex compared to Approach 2 and Approach 2 is possibly unnecessary, but I am not sure if Approach 1 would cause any performance issues.\r\n\r\nPlease let me know your thoughts about this, after which I can send in a PR. Thank you."}