{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/410522342", "html_url": "https://github.com/pytorch/pytorch/issues/9332#issuecomment-410522342", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/9332", "id": 410522342, "node_id": "MDEyOklzc3VlQ29tbWVudDQxMDUyMjM0Mg==", "user": {"login": "vishwakftw", "id": 23639302, "node_id": "MDQ6VXNlcjIzNjM5MzAy", "avatar_url": "https://avatars2.githubusercontent.com/u/23639302?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vishwakftw", "html_url": "https://github.com/vishwakftw", "followers_url": "https://api.github.com/users/vishwakftw/followers", "following_url": "https://api.github.com/users/vishwakftw/following{/other_user}", "gists_url": "https://api.github.com/users/vishwakftw/gists{/gist_id}", "starred_url": "https://api.github.com/users/vishwakftw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vishwakftw/subscriptions", "organizations_url": "https://api.github.com/users/vishwakftw/orgs", "repos_url": "https://api.github.com/users/vishwakftw/repos", "events_url": "https://api.github.com/users/vishwakftw/events{/privacy}", "received_events_url": "https://api.github.com/users/vishwakftw/received_events", "type": "User", "site_admin": false}, "created_at": "2018-08-05T14:03:25Z", "updated_at": "2018-08-05T14:03:25Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1605878\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/Balandat\">@Balandat</a> I have some primitive designs for the implementation, and I thought I should clear up which one to use proceeding further:</p>\n<ol>\n<li><code>SobolEngine</code> in Python: Since the implementation in <code>CPython</code> is available, it should not be hard to reproduce this in PyTorch. This would include writing a new class, and the methods associated with it in pure Python.</li>\n</ol>\n<ul>\n<li>Pros: Not required to deal with a <code>at::Generator</code> object, and seeding becomes easier. Code is much more easy to read</li>\n<li>Cons: Possibly slow due to Python itself.</li>\n</ul>\n<ol start=\"2\">\n<li><code>SobolEngine</code> in <code>ATen</code>. This would involve a lot more extra lines of code. Similar to the above, make a new class named <code>SobolEngine</code>, and methods associated with it.</li>\n</ol>\n<ul>\n<li>Pros: Should be faster than the Python implementation.</li>\n<li>Cons: Seeding is not easy I think, requirement of <code>at::Generator</code> object.</li>\n</ul>\n<p>Please let me know your views.</p>", "body_text": "@Balandat I have some primitive designs for the implementation, and I thought I should clear up which one to use proceeding further:\n\nSobolEngine in Python: Since the implementation in CPython is available, it should not be hard to reproduce this in PyTorch. This would include writing a new class, and the methods associated with it in pure Python.\n\n\nPros: Not required to deal with a at::Generator object, and seeding becomes easier. Code is much more easy to read\nCons: Possibly slow due to Python itself.\n\n\nSobolEngine in ATen. This would involve a lot more extra lines of code. Similar to the above, make a new class named SobolEngine, and methods associated with it.\n\n\nPros: Should be faster than the Python implementation.\nCons: Seeding is not easy I think, requirement of at::Generator object.\n\nPlease let me know your views.", "body": "@Balandat I have some primitive designs for the implementation, and I thought I should clear up which one to use proceeding further:\r\n1. `SobolEngine` in Python: Since the implementation in `CPython` is available, it should not be hard to reproduce this in PyTorch. This would include writing a new class, and the methods associated with it in pure Python.\r\n\r\n- Pros: Not required to deal with a `at::Generator` object, and seeding becomes easier. Code is much more easy to read\r\n- Cons: Possibly slow due to Python itself.\r\n\r\n2. `SobolEngine` in `ATen`. This would involve a lot more extra lines of code. Similar to the above, make a new class named `SobolEngine`, and methods associated with it.\r\n\r\n- Pros: Should be faster than the Python implementation.\r\n- Cons: Seeding is not easy I think, requirement of `at::Generator` object.\r\n\r\nPlease let me know your views."}