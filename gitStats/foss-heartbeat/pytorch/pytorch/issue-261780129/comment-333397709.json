{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/333397709", "html_url": "https://github.com/pytorch/pytorch/issues/2906#issuecomment-333397709", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/2906", "id": 333397709, "node_id": "MDEyOklzc3VlQ29tbWVudDMzMzM5NzcwOQ==", "user": {"login": "vishwakftw", "id": 23639302, "node_id": "MDQ6VXNlcjIzNjM5MzAy", "avatar_url": "https://avatars2.githubusercontent.com/u/23639302?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vishwakftw", "html_url": "https://github.com/vishwakftw", "followers_url": "https://api.github.com/users/vishwakftw/followers", "following_url": "https://api.github.com/users/vishwakftw/following{/other_user}", "gists_url": "https://api.github.com/users/vishwakftw/gists{/gist_id}", "starred_url": "https://api.github.com/users/vishwakftw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vishwakftw/subscriptions", "organizations_url": "https://api.github.com/users/vishwakftw/orgs", "repos_url": "https://api.github.com/users/vishwakftw/repos", "events_url": "https://api.github.com/users/vishwakftw/events{/privacy}", "received_events_url": "https://api.github.com/users/vishwakftw/received_events", "type": "User", "site_admin": false}, "created_at": "2017-10-01T18:47:39Z", "updated_at": "2017-10-01T18:48:49Z", "author_association": "CONTRIBUTOR", "body_html": "<p>In that case, I think this should help:</p>\n<pre><code>def zeros_like(x):\n    assert x.__class__.__name__.find('Variable') != -1 or x.__class__.__name__.find('Tensor') != -1, \"Object is neither a Tensor nor a Variable\"\n\n    y = torch.zeros(x.size())\n    if x.is_cuda:\n       y = y.cuda()\n\n    if x.__class__.__name__ == 'Variable':\n        return torch.autograd.Variable(y, requires_grad=x.requires_grad)\n    elif x.__class__.__name__.find('Tensor') != -1:\n    return torch.zeros(y)\n</code></pre>\n<p>Replacing the <code>zeros</code> with a <code>ones</code> should do the trick for <code>ones_like</code>.</p>", "body_text": "In that case, I think this should help:\ndef zeros_like(x):\n    assert x.__class__.__name__.find('Variable') != -1 or x.__class__.__name__.find('Tensor') != -1, \"Object is neither a Tensor nor a Variable\"\n\n    y = torch.zeros(x.size())\n    if x.is_cuda:\n       y = y.cuda()\n\n    if x.__class__.__name__ == 'Variable':\n        return torch.autograd.Variable(y, requires_grad=x.requires_grad)\n    elif x.__class__.__name__.find('Tensor') != -1:\n    return torch.zeros(y)\n\nReplacing the zeros with a ones should do the trick for ones_like.", "body": "In that case, I think this should help:\r\n\r\n    def zeros_like(x):\r\n        assert x.__class__.__name__.find('Variable') != -1 or x.__class__.__name__.find('Tensor') != -1, \"Object is neither a Tensor nor a Variable\"\r\n\r\n        y = torch.zeros(x.size())\r\n        if x.is_cuda:\r\n           y = y.cuda()\r\n\r\n        if x.__class__.__name__ == 'Variable':\r\n            return torch.autograd.Variable(y, requires_grad=x.requires_grad)\r\n        elif x.__class__.__name__.find('Tensor') != -1:\r\n\t    return torch.zeros(y)\r\n\r\nReplacing the `zeros` with a `ones` should do the trick for `ones_like`."}