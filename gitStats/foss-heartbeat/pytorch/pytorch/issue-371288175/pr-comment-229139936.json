{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/229139936", "pull_request_review_id": 169568574, "id": 229139936, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyOTEzOTkzNg==", "diff_hunk": "@@ -14,13 +16,22 @@ namespace torch { namespace jit {\n struct SourceLocation {\n   virtual ~SourceLocation() = default;\n   virtual void highlight(std::ostream & out) const = 0;\n-  void wrapAndRethrowException(const std::exception & e, const std::string & additional = \"\") {\n-    std::stringstream msg;\n+\n+  void wrapException(std::ostream& msg, const std::exception & e, const std::string & additional = \"\") {\n     msg << \"\\n\" << e.what() << \":\\n\";\n     if(!additional.empty()) {\n       msg << additional << \":\\n\";\n     }\n     highlight(msg);\n+  }\n+  void wrapAndRethrowException(const JITException & e, const std::string & additional = \"\") {", "path": "torch/csrc/jit/source_location.h", "position": null, "original_position": 23, "commit_id": "1e12a6a76c631827269d3704bcd894b7a73360c1", "original_commit_id": "325d15b8634b498dcc76038013807d3b584abc07", "user": {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, "body": "ok, I see what you are doing here, but it is a confusing organization: It overloads an operator based on a static (JITException vs exception) subtype. And the requires a static check and cast to dispatch to that subtype. It would be better if the only function in SourceLocation were `void wrapException(std::ostream& msg, const std::exception & e, const std::string & additional = \"\")` and then the remaining logic could go in interpreter.cpp", "created_at": "2018-10-30T00:06:46Z", "updated_at": "2018-11-23T15:53:49Z", "html_url": "https://github.com/pytorch/pytorch/pull/12789#discussion_r229139936", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/12789", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/229139936"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/12789#discussion_r229139936"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/12789"}}, "body_html": "<p>ok, I see what you are doing here, but it is a confusing organization: It overloads an operator based on a static (JITException vs exception) subtype. And the requires a static check and cast to dispatch to that subtype. It would be better if the only function in SourceLocation were <code>void wrapException(std::ostream&amp; msg, const std::exception &amp; e, const std::string &amp; additional = \"\")</code> and then the remaining logic could go in interpreter.cpp</p>", "body_text": "ok, I see what you are doing here, but it is a confusing organization: It overloads an operator based on a static (JITException vs exception) subtype. And the requires a static check and cast to dispatch to that subtype. It would be better if the only function in SourceLocation were void wrapException(std::ostream& msg, const std::exception & e, const std::string & additional = \"\") and then the remaining logic could go in interpreter.cpp", "in_reply_to_id": 229136795}