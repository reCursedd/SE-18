{"url": "https://api.github.com/repos/pytorch/pytorch/issues/7175", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/7175/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/7175/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/7175/events", "html_url": "https://github.com/pytorch/pytorch/issues/7175", "id": 319480356, "node_id": "MDU6SXNzdWUzMTk0ODAzNTY=", "number": 7175, "title": "repr of tensor does't rescale values", "user": {"login": "fmassa", "id": 9110200, "node_id": "MDQ6VXNlcjkxMTAyMDA=", "avatar_url": "https://avatars2.githubusercontent.com/u/9110200?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fmassa", "html_url": "https://github.com/fmassa", "followers_url": "https://api.github.com/users/fmassa/followers", "following_url": "https://api.github.com/users/fmassa/following{/other_user}", "gists_url": "https://api.github.com/users/fmassa/gists{/gist_id}", "starred_url": "https://api.github.com/users/fmassa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fmassa/subscriptions", "organizations_url": "https://api.github.com/users/fmassa/orgs", "repos_url": "https://api.github.com/users/fmassa/repos", "events_url": "https://api.github.com/users/fmassa/events{/privacy}", "received_events_url": "https://api.github.com/users/fmassa/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 424131847, "node_id": "MDU6TGFiZWw0MjQxMzE4NDc=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/bug", "name": "bug", "color": "b60205", "default": true}, {"id": 914046705, "node_id": "MDU6TGFiZWw5MTQwNDY3MDU=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/printing", "name": "printing", "color": "8cf29f", "default": false}, {"id": 897288569, "node_id": "MDU6TGFiZWw4OTcyODg1Njk=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/pytorch", "name": "pytorch", "color": "f05732", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-05-02T09:34:22Z", "updated_at": "2018-05-02T22:42:29Z", "closed_at": "2018-05-02T22:33:03Z", "author_association": "MEMBER", "body_html": "<p>Printing a float tensor with &lt; 1 values factors out a common multiplicative power.<br>\nBut in some cases, it forgets to rescale the values that are printed to take into account the factored value:</p>\n<div class=\"highlight highlight-source-python\"><pre>torch.tensor(<span class=\"pl-c1\">0.05524</span>)\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> this is right</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> tensor(1.00000e-02 *</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span>        5.5240)</span>\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> but</span>\ntorch.tensor([<span class=\"pl-c1\">0.05524</span>])\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> prints</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> tensor(1.00000e-02 *</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span>        [ 0.0552])</span></pre></div>\n<p>Also, I think we should be a bit more strict in the cases we want to print the common multiplicative factor (in those cases, we are more verbose and still lose information). Numpy doesn't factor out the aforementioned cases</p>\n<div class=\"highlight highlight-source-python\"><pre>np.array(<span class=\"pl-c1\">0.05224</span>)\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> prints array(0.05224)</span>\nnp.array([<span class=\"pl-c1\">0.05224</span>])\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> prints array([0.05224])</span></pre></div>\n<p>I'm using <code>torch.__version__ = '0.5.0a0+4caea64'</code></p>", "body_text": "Printing a float tensor with < 1 values factors out a common multiplicative power.\nBut in some cases, it forgets to rescale the values that are printed to take into account the factored value:\ntorch.tensor(0.05524)\n# this is right\n# tensor(1.00000e-02 *\n#        5.5240)\n\n# but\ntorch.tensor([0.05524])\n# prints\n# tensor(1.00000e-02 *\n#        [ 0.0552])\nAlso, I think we should be a bit more strict in the cases we want to print the common multiplicative factor (in those cases, we are more verbose and still lose information). Numpy doesn't factor out the aforementioned cases\nnp.array(0.05224)\n# prints array(0.05224)\nnp.array([0.05224])\n# prints array([0.05224])\nI'm using torch.__version__ = '0.5.0a0+4caea64'", "body": "Printing a float tensor with < 1 values factors out a common multiplicative power.\r\nBut in some cases, it forgets to rescale the values that are printed to take into account the factored value:\r\n```python\r\ntorch.tensor(0.05524)\r\n# this is right\r\n# tensor(1.00000e-02 *\r\n#        5.5240)\r\n\r\n# but\r\ntorch.tensor([0.05524])\r\n# prints\r\n# tensor(1.00000e-02 *\r\n#        [ 0.0552])\r\n```\r\n\r\nAlso, I think we should be a bit more strict in the cases we want to print the common multiplicative factor (in those cases, we are more verbose and still lose information). Numpy doesn't factor out the aforementioned cases\r\n```python\r\nnp.array(0.05224)\r\n# prints array(0.05224)\r\nnp.array([0.05224])\r\n# prints array([0.05224])\r\n```\r\n\r\nI'm using `torch.__version__ = '0.5.0a0+4caea64'`"}