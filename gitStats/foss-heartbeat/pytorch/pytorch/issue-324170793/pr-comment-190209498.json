{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/190209498", "pull_request_review_id": 122535176, "id": 190209498, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MDIwOTQ5OA==", "diff_hunk": "@@ -64,115 +66,199 @@ struct Vec256 {\n     std::memcpy(vec.values, ptr, count * sizeof(T));\n     return vec;\n   }\n-  void store(void* ptr, int count = size) const {\n+  void storeu(void* ptr, int count = size) const {\n     std::memcpy(ptr, values, count * sizeof(T));\n   }\n-  Vec256<T> map(T (*f)(T)) const {\n-    Vec256<T> ret;\n-    for (int64_t i = 0; i != size; i++) {\n-      ret.values[i] = f(values[i]);\n-    }\n-    return ret;\n-  }\n-  Vec256<T> abs() const {\n-    Vec256<T> ret;\n-    for (int64_t i = 0; i < size; i++) {\n-      ret.values[i] = values[i] < 0 ? -values[i] : values[i];\n-    }\n-    return ret;\n-  }\n-  Vec256<T> acos() const {\n-    return map(std::acos);\n-  }\n-  Vec256<T> asin() const {\n-    return map(std::asin);\n-  }\n-  Vec256<T> atan() const {\n-    return map(std::atan);\n-  }\n-  Vec256<T> erf() const {\n-    return map(std::erf);\n-  }\n-  Vec256<T> exp() const {\n-    return map(std::exp);\n-  }\n-  Vec256<T> expm1() const {\n-    return map(std::expm1);\n-  }\n-  Vec256<T> log() const {\n-    return map(std::log);\n-  }\n-  Vec256<T> log10() const {\n-    return map(std::log10);\n+  const T& operator [](int idx) const {\n+    return values[idx];\n   }\n-  Vec256<T> log1p() const {\n-    return map(std::log1p);\n+  void set_value(int64_t idx, T value) {\n+    values[idx] = value;\n   }\n-  Vec256<T> log2() const {\n-    return map(std::log2);\n-  }\n-  Vec256<T> ceil() const {\n-    return map(std::ceil);\n-  }\n-  Vec256<T> cos() const {\n-    return map(std::cos);\n-  }\n-  Vec256<T> floor() const {\n-    return map(std::floor);\n-  }\n-  Vec256<T> round() const {\n-    return map(std::round);\n-  }\n-  Vec256<T> sin() const {\n-    return map(std::sin);\n+};\n+template <class T>Vec256<T> map(T (*f)(T), Vec256<T> x) {\n+  Vec256<T> ret;\n+  for (int64_t i = 0; i != Vec256<T>::size; i++) {\n+    ret.set_value(i, f(x[i]));\n   }\n-  Vec256<T> tanh() const {\n-    return map(std::tanh);\n+  return ret;\n+}\n+\n+template <class T>Vec256<T> abs(Vec256<T> x) {\n+  Vec256<T> ret;\n+  for (int64_t i = 0; i < Vec256<T>::size; i++) {\n+    ret.set_value(i, x[i] < 0 ? -x[i] : x[i]);\n   }\n-  Vec256<T> trunc() const {\n-    return map(std::trunc);\n+  return ret;\n+}\n+\n+template <class T>\n+Vec256<T> acos(Vec256<T> x) {\n+  return map(std::acos, x);\n+}\n+\n+template <class T>\n+Vec256<T> asin(Vec256<T> x) {\n+  return map(std::asin, x);\n+}\n+\n+template <class T>\n+Vec256<T> atan(Vec256<T> x) {\n+  return map(std::atan, x);\n+}\n+\n+template <class T>\n+Vec256<T> erf(Vec256<T> x) {\n+  return map(std::erf, x);\n+}\n+\n+template <class T>\n+Vec256<T> exp(Vec256<T> x) {\n+  return map(std::exp, x);\n+}\n+\n+template <class T>\n+Vec256<T> expm1(Vec256<T> x) {\n+  return map(std::expm1, x);\n+}\n+\n+template <class T>\n+Vec256<T> log(Vec256<T> x) {\n+  return map(std::log, x);\n+}\n+\n+template <class T>\n+Vec256<T> log10(Vec256<T> x) {\n+  return map(std::log10, x);\n+}\n+\n+template <class T>\n+Vec256<T> log1p(Vec256<T> x) {\n+  return map(std::log1p, x);\n+}\n+\n+template <class T>\n+Vec256<T> log2(Vec256<T> x) {\n+  return map(std::log2, x);\n+}\n+\n+template <class T>\n+Vec256<T> ceil(Vec256<T> x) {\n+  return map(std::ceil, x);\n+}\n+\n+template <class T>\n+Vec256<T> cos(Vec256<T> x) {\n+  return map(std::cos, x);\n+}\n+\n+template <class T>\n+Vec256<T> floor(Vec256<T> x) {\n+  return map(std::floor, x);\n+}\n+\n+template <class T>\n+Vec256<T> round(Vec256<T> x) {\n+  return map(std::round, x);\n+}\n+\n+template <class T>\n+Vec256<T> sin(Vec256<T> x) {\n+  return map(std::sin, x);\n+}\n+\n+template <class T>\n+Vec256<T> sqrt(Vec256<T> x) {\n+  return map(std::sqrt, x);\n+}\n+\n+template <class T>\n+Vec256<T> neg(Vec256<T> x) {\n+  return Vec256<T>(0) - x;\n+}\n+\n+template <class T>\n+Vec256<T> reciprocal(Vec256<T> x) {\n+  Vec256<T> ret;\n+  for (int64_t i = 0; i < Vec256<T>::size; i++) {\n+    ret.set_value(i, 1 / x[i]);\n   }\n-  Vec256<T> sqrt() const {\n-    return map(std::sqrt);\n+  return ret;\n+}\n+\n+template <class T>\n+Vec256<T> rsqrt(Vec256<T> x) {\n+  return reciprocal(sqrt(x));\n+}\n+\n+template <class T>\n+Vec256<T> sigmoid(Vec256<T> x) {\n+  Vec256<T> ret;\n+  for (int64_t i = 0; i < Vec256<T>::size; i++) {\n+    ret.set_value(i, ((T)1.0) / (((T)1.0) + std::exp(-x[i])));\n   }\n-};\n+  return ret;\n+}\n+\n+template <class T>\n+Vec256<T> tanh(Vec256<T> x) {\n+  return map(std::tanh, x);\n+}\n+\n+template <class T>\n+Vec256<T> trunc(Vec256<T> x) {\n+  return map(std::trunc, x);\n+}\n+\n+template <class T>\n+Vec256<T> frac(Vec256<T> x) {\n+  return x - trunc(x);\n+}", "path": "aten/src/ATen/cpu/vec256/vec256_base.h", "position": null, "original_position": 239, "commit_id": "7d71bee290679800bae475a261ac70f97ad1b472", "original_commit_id": "421e042c7a71184d3bbea8a414812bc38f0b4203", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Are any of those used in the vectorized impls?", "created_at": "2018-05-23T11:19:36Z", "updated_at": "2018-11-23T15:44:34Z", "html_url": "https://github.com/pytorch/pytorch/pull/7655#discussion_r190209498", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/7655", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/190209498"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/7655#discussion_r190209498"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/7655"}}, "body_html": "<p>Are any of those used in the vectorized impls?</p>", "body_text": "Are any of those used in the vectorized impls?"}