{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/223777612", "pull_request_review_id": 162987977, "id": 223777612, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyMzc3NzYxMg==", "diff_hunk": "@@ -722,3 +723,36 @@ def norm(input, p=\"fro\", dim=None, keepdim=False, out=None):\n         if out is None:\n             return torch._C._VariableFunctions.norm(input, p, dim, keepdim=keepdim)\n     return torch._C._VariableFunctions.norm(input, p, dim, keepdim=keepdim, out=out)\n+\n+\n+def chain_matmul(*matrices):\n+    r\"\"\"Returns the matrix product of the :math:`N` 2-D tensors. This product is efficiently computed\n+    using the matrix chain order algorithm which selects the order in which incurs the lowest cost in terms\n+    of arithmetic operations (`[CLRS]`_). Note that since is a function to compute the product, :math:`N`\n+    needs to be greater than or equal to 2; if equal to 2 then a trivial matrix-matrix product is returned.\n+\n+\n+    Args:\n+        matrices (Tensors...): a sequence of 2 or more 2-D tensors whose product is to be determined.\n+\n+\n+    Returns:\n+        Tensor: if the :math:`i^{th}` tensor was of dimensions :math:`p_{i} \\times p_{i + 1}`, then the product\n+        would be of dimensions :math:`p_{1} \\times p_{N + 1}`.\n+\n+    Example::\n+\n+        >>> a = torch.randn(3, 4)\n+        >>> b = torch.randn(4, 5)\n+        >>> c = torch.randn(5, 6)\n+        >>> d = torch.randn(6, 7)\n+        >>> torch.chain_matmul(a, b, c, d)\n+        tensor([[ -2.3375,  -3.9790,  -4.1119,  -6.6577,   9.5609, -11.5095,  -3.2614],\n+                [ 21.4038,   3.3378,  -8.4982,  -5.2457, -10.2561,  -2.4684,   2.7163],\n+                [ -0.9647,  -5.8917,  -2.3213,  -5.2284,  12.8615, -12.2816,  -2.5095]])\n+\n+    .. _`[CLRS]`: https://mitpress.mit.edu/books/introduction-algorithms-third-edition\n+    \"\"\"\n+    if len(matrices) == 1 and isinstance(matrices[0], (list, tuple)):", "path": "torch/functional.py", "position": null, "original_position": 42, "commit_id": "c601d439cfdbe088e589b2a4ea9bed94e27bf7f8", "original_commit_id": "08489ad04fd75ffd870306b92e146fdd276ea80f", "user": {"login": "vishwakftw", "id": 23639302, "node_id": "MDQ6VXNlcjIzNjM5MzAy", "avatar_url": "https://avatars2.githubusercontent.com/u/23639302?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vishwakftw", "html_url": "https://github.com/vishwakftw", "followers_url": "https://api.github.com/users/vishwakftw/followers", "following_url": "https://api.github.com/users/vishwakftw/following{/other_user}", "gists_url": "https://api.github.com/users/vishwakftw/gists{/gist_id}", "starred_url": "https://api.github.com/users/vishwakftw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vishwakftw/subscriptions", "organizations_url": "https://api.github.com/users/vishwakftw/orgs", "repos_url": "https://api.github.com/users/vishwakftw/repos", "events_url": "https://api.github.com/users/vishwakftw/events{/privacy}", "received_events_url": "https://api.github.com/users/vishwakftw/received_events", "type": "User", "site_admin": false}, "body": "Oops, i'll remove it. Sorry.", "created_at": "2018-10-09T16:41:10Z", "updated_at": "2018-11-23T15:52:42Z", "html_url": "https://github.com/pytorch/pytorch/pull/12380#discussion_r223777612", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/12380", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/223777612"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/12380#discussion_r223777612"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/12380"}}, "body_html": "<p>Oops, i'll remove it. Sorry.</p>", "body_text": "Oops, i'll remove it. Sorry.", "in_reply_to_id": 223775653}