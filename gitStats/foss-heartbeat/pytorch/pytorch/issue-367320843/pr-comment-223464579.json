{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/223464579", "pull_request_review_id": 162597724, "id": 223464579, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyMzQ2NDU3OQ==", "diff_hunk": "@@ -586,5 +586,81 @@ Tensor &nuclear_norm_out(Tensor& result, const Tensor& self, bool keepdim) {\n   return at::sum_out(result, std::get<1>(at::svd(self)), 0, keepdim);\n }\n \n+Tensor _chain_matmul_general(TensorList matrices, std::vector<std::vector<int64_t>>& order, int64_t i, int64_t j) {\n+  if (i == j)\n+    return matrices[i];\n+  else\n+    return at::mm(_chain_matmul_general(matrices, order, i, order[i][j]), _chain_matmul_general(matrices, order, order[i][j] + 1, j));\n+}\n+\n+// Why the separate implementation for 3 matrices?\n+// The logic for three matrices is much faster when done directly\n+// Requires 1 comparison to 4 comparisons and lesser arithmetic operations\n+Tensor _chain_matmul_three_matrices(TensorList matrices) {\n+  int64_t a = matrices[0].size(0);  // This is the first dimension\n+  int64_t b = matrices[1].size(0);  // This is the common dimension between the first two matrices\n+  int64_t c = matrices[2].size(0);  // This is the common dimension between the last two matrices\n+  int64_t d = matrices[2].size(1);  // This is the last dimension\n+\n+  // The matrices are of size (a x b), (b x c), (c x d)\n+  // cost_1 is the cost of parenthesizing (a x b) and (b x c) and then combining (c x d)\n+  // cost_2 is the cost of parenthesizing (b x c) and (c x d) and then combining (a x b)\n+  int64_t cost_1 = (a * c) * (b + d);\n+  int64_t cost_2 = (b * d) * (a + c);\n+\n+  if (cost_1 > cost_2) {\n+    return at::mm(matrices[0], at::mm(matrices[1], matrices[2]));\n+  } else {\n+    return at::mm(at::mm(matrices[0], matrices[1]), matrices[2]);\n+  }\n+}\n+\n+Tensor chain_matmul(TensorList matrices) {\n+  AT_CHECK(matrices.size() >= 2, \"Expecting at least 2 matrices\");\n+  checkAllSameDim(matrices, 2);", "path": "aten/src/ATen/native/LinearAlgebra.cpp", "position": 34, "original_position": 35, "commit_id": "c601d439cfdbe088e589b2a4ea9bed94e27bf7f8", "original_commit_id": "347b03093051d1ab582de244bc771ef2cd6993df", "user": {"login": "vishwakftw", "id": 23639302, "node_id": "MDQ6VXNlcjIzNjM5MzAy", "avatar_url": "https://avatars2.githubusercontent.com/u/23639302?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vishwakftw", "html_url": "https://github.com/vishwakftw", "followers_url": "https://api.github.com/users/vishwakftw/followers", "following_url": "https://api.github.com/users/vishwakftw/following{/other_user}", "gists_url": "https://api.github.com/users/vishwakftw/gists{/gist_id}", "starred_url": "https://api.github.com/users/vishwakftw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vishwakftw/subscriptions", "organizations_url": "https://api.github.com/users/vishwakftw/orgs", "repos_url": "https://api.github.com/users/vishwakftw/repos", "events_url": "https://api.github.com/users/vishwakftw/events{/privacy}", "received_events_url": "https://api.github.com/users/vishwakftw/received_events", "type": "User", "site_admin": false}, "body": "@apaszke The 2-D check is enforced here.", "created_at": "2018-10-08T18:51:38Z", "updated_at": "2018-11-23T15:52:36Z", "html_url": "https://github.com/pytorch/pytorch/pull/12380#discussion_r223464579", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/12380", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/223464579"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/12380#discussion_r223464579"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/12380"}}, "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=4583066\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/apaszke\">@apaszke</a> The 2-D check is enforced here.</p>", "body_text": "@apaszke The 2-D check is enforced here."}