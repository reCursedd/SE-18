{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/224208000", "pull_request_review_id": 163519272, "id": 224208000, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNDIwODAwMA==", "diff_hunk": "@@ -587,5 +587,91 @@ Tensor &nuclear_norm_out(Tensor& result, const Tensor& self, bool keepdim) {\n   return at::sum_out(result, std::get<1>(at::svd(self)), 0, keepdim);\n }\n \n+static inline Tensor _chain_matmul_general(TensorList matrices, std::vector<std::vector<int64_t>>& order, int64_t i, int64_t j) {\n+  if (i == j)\n+    return matrices[i];\n+  else\n+    return at::mm(_chain_matmul_general(matrices, order, i, order[i][j]), _chain_matmul_general(matrices, order, order[i][j] + 1, j));\n+}\n+\n+// Why the separate implementation for 3 matrices?\n+// The logic for three matrices is much faster when done directly\n+// Requires 1 comparison to 4 comparisons and lesser arithmetic operations\n+static inline Tensor _chain_matmul_three_matrices(TensorList matrices) {\n+  int64_t a = matrices[0].size(0);  // This is the first dimension\n+  int64_t b = matrices[1].size(0);  // This is the common dimension between the first two matrices\n+  int64_t c = matrices[2].size(0);  // This is the common dimension between the last two matrices\n+  int64_t d = matrices[2].size(1);  // This is the last dimension\n+\n+  // The matrices are of size (a x b), (b x c), (c x d)\n+  // cost_1 is the cost of parenthesizing (a x b) and (b x c) and then combining (c x d)\n+  // cost_2 is the cost of parenthesizing (b x c) and (c x d) and then combining (a x b)\n+  int64_t cost_1 = (a * c) * (b + d);\n+  int64_t cost_2 = (b * d) * (a + c);\n+\n+  if (cost_1 > cost_2) {\n+    return at::mm(matrices[0], at::mm(matrices[1], matrices[2]));\n+  } else {\n+    return at::mm(at::mm(matrices[0], matrices[1]), matrices[2]);\n+  }\n+}\n+\n+Tensor chain_matmul(TensorList matrices) {\n+  checkAllSameDim(matrices, 2);\n+\n+  if (matrices.size() == 1) {\n+    return matrices[0];\n+  } else if (matrices.size() == 2) {\n+    return at::mm(matrices[0], matrices[1]);\n+  } else if (matrices.size() == 3) {\n+    return _chain_matmul_three_matrices(matrices);\n+  } else {\n+\n+    // Following the algorithm in Chapter 15.2 : Introduction to Algorithms, Cormen et al.\n+    // Minor modifications have been made to accommodate zero-indexing\n+    auto n = matrices.size();\n+\n+    // Dim vector - the length of which is n + 1. Note that for matrix multiplication, there\n+    // needs to a common dimension between the multiplicands, hence for n matrices, there are\n+    // n + 1 values. The values p_{i} and p_{i + 1} correspond to the dimensions of matrix i in\n+    // the chain (zero-indexed)\n+    std::vector<int64_t> p;\n+    p.push_back(matrices[0].size(0));\n+    for (int64_t i = 0; i < n; i++) {\n+      p.push_back(matrices[i].size(1));\n+    }\n+\n+    // Cost matrix - an element m[i, j] of this matrix corresponds to the minimum cost of\n+    // parenthesizing matrices A_{i} to A_{j}. By this definition m[i, i] = 0 for all i\n+    // m[i, j] is filled using the substructure property of the algorithm, meaning:\n+    // m[i, j] = min_{i <= k < j} m[i, k] + m[k, j] + p_{i-1}p_{k}p_{j}\n+    std::vector<std::vector<int64_t>> m(n, std::vector<int64_t>(n, 0));", "path": "aten/src/ATen/native/LinearAlgebra.cpp", "position": 62, "original_position": 62, "commit_id": "c601d439cfdbe088e589b2a4ea9bed94e27bf7f8", "original_commit_id": "94486f38a563adbbca1098d01625072b3565b663", "user": {"login": "vishwakftw", "id": 23639302, "node_id": "MDQ6VXNlcjIzNjM5MzAy", "avatar_url": "https://avatars2.githubusercontent.com/u/23639302?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vishwakftw", "html_url": "https://github.com/vishwakftw", "followers_url": "https://api.github.com/users/vishwakftw/followers", "following_url": "https://api.github.com/users/vishwakftw/following{/other_user}", "gists_url": "https://api.github.com/users/vishwakftw/gists{/gist_id}", "starred_url": "https://api.github.com/users/vishwakftw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vishwakftw/subscriptions", "organizations_url": "https://api.github.com/users/vishwakftw/orgs", "repos_url": "https://api.github.com/users/vishwakftw/repos", "events_url": "https://api.github.com/users/vishwakftw/events{/privacy}", "received_events_url": "https://api.github.com/users/vishwakftw/received_events", "type": "User", "site_admin": false}, "body": "I have done it. I had to reinitialize the diagonals using the outer loop though, but I think that\u2019s cheaper.", "created_at": "2018-10-10T19:17:11Z", "updated_at": "2018-11-23T15:52:50Z", "html_url": "https://github.com/pytorch/pytorch/pull/12380#discussion_r224208000", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/12380", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/224208000"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/12380#discussion_r224208000"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/12380"}}, "body_html": "<p>I have done it. I had to reinitialize the diagonals using the outer loop though, but I think that\u2019s cheaper.</p>", "body_text": "I have done it. I had to reinitialize the diagonals using the outer loop though, but I think that\u2019s cheaper.", "in_reply_to_id": 224204244}