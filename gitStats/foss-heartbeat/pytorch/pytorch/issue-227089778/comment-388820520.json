{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/388820520", "html_url": "https://github.com/pytorch/pytorch/issues/1511#issuecomment-388820520", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/1511", "id": 388820520, "node_id": "MDEyOklzc3VlQ29tbWVudDM4ODgyMDUyMA==", "user": {"login": "zou3519", "id": 5652049, "node_id": "MDQ6VXNlcjU2NTIwNDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/5652049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zou3519", "html_url": "https://github.com/zou3519", "followers_url": "https://api.github.com/users/zou3519/followers", "following_url": "https://api.github.com/users/zou3519/following{/other_user}", "gists_url": "https://api.github.com/users/zou3519/gists{/gist_id}", "starred_url": "https://api.github.com/users/zou3519/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zou3519/subscriptions", "organizations_url": "https://api.github.com/users/zou3519/orgs", "repos_url": "https://api.github.com/users/zou3519/repos", "events_url": "https://api.github.com/users/zou3519/events{/privacy}", "received_events_url": "https://api.github.com/users/zou3519/received_events", "type": "User", "site_admin": false}, "created_at": "2018-05-14T13:41:27Z", "updated_at": "2018-05-14T13:41:27Z", "author_association": "CONTRIBUTOR", "body_html": "<p>In this case, we could add an optional \"dimI\" (or <code>sparse_dims</code>) option to the constructor. Without it, I'd assume that the (4, 5, 6) sparse tensor has 3 sparse dimensions and 0 dense dimensions (the tensor is fully sparse).</p>\n<p>This would give (with arbitrary zero dimensions):<br>\n<code>indices.size() = (3, 0)</code>, <code>values.size() = (0,)</code> and <code>(nDimI, nDimV) = (3, 0)</code>.</p>\n<p>This makes our <code>(nDimI, nDimV)</code> computation consistent: <code>nDimI</code> can now always be <code>indices.size(0)</code> and <code>nDimV</code> can now always be <code>values.dim() - 1</code>.</p>", "body_text": "In this case, we could add an optional \"dimI\" (or sparse_dims) option to the constructor. Without it, I'd assume that the (4, 5, 6) sparse tensor has 3 sparse dimensions and 0 dense dimensions (the tensor is fully sparse).\nThis would give (with arbitrary zero dimensions):\nindices.size() = (3, 0), values.size() = (0,) and (nDimI, nDimV) = (3, 0).\nThis makes our (nDimI, nDimV) computation consistent: nDimI can now always be indices.size(0) and nDimV can now always be values.dim() - 1.", "body": "In this case, we could add an optional \"dimI\" (or `sparse_dims`) option to the constructor. Without it, I'd assume that the (4, 5, 6) sparse tensor has 3 sparse dimensions and 0 dense dimensions (the tensor is fully sparse).\r\n\r\nThis would give (with arbitrary zero dimensions):\r\n`indices.size() = (3, 0)`, `values.size() = (0,)` and `(nDimI, nDimV) = (3, 0)`.\r\n\r\nThis makes our `(nDimI, nDimV)` computation consistent: `nDimI` can now always be `indices.size(0)` and `nDimV` can now always be `values.dim() - 1`.\r\n"}