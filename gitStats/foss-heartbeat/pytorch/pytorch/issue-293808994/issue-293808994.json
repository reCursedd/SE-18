{"url": "https://api.github.com/repos/pytorch/pytorch/issues/5009", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/5009/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/5009/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/5009/events", "html_url": "https://github.com/pytorch/pytorch/pull/5009", "id": 293808994, "node_id": "MDExOlB1bGxSZXF1ZXN0MTY2NzQzMTYy", "number": 5009, "title": "Add nested Blocks in IR", "user": {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-02-02T08:28:14Z", "updated_at": "2018-11-23T15:39:04Z", "closed_at": "2018-02-03T07:24:50Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/5009", "html_url": "https://github.com/pytorch/pytorch/pull/5009", "diff_url": "https://github.com/pytorch/pytorch/pull/5009.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/5009.patch"}, "body_html": "<p>This commit is getting the IR ready for representing ONNX control flow.<br>\nIt adds nested blocks to the IR.</p>\n<ul>\n<li>Each node now has blocks(), addBlock(), and eraseBlock() similar to a node's<br>\noutput list.</li>\n<li>Blocks are a property of every node rather than an attribute because<br>\nto make it easier to manage the lifetime of the containing nodes and because<br>\nthe behavior of cloning Blocks will likely be different from the way we clone other<br>\nattributes.</li>\n<li>A block itself has a list of nodes, as well as inputs and outputs.<br>\nThe meaning of the nested input/output nodes are specific to the particular<br>\nnode kind containing the block. It is safe to assume inputs to a block will be<br>\nin scope in the block.</li>\n<li>Each Block has an owningNode() and each node has an owningBlock().<br>\nThe owningNode of the top-most block is null.</li>\n<li>Values are lexically scoped: nested blocks can use values from outer blocks<br>\nthat have been defined in previous nodes. Lint has been updated with these<br>\nnew scoping rules.</li>\n<li>This change preserves almost all of the pre-Block API. No attempt has been made<br>\nto make optimizations aware of Blocks. This will need to be done on a case-by-case<br>\nbasis as we make optimizations capable of handling Blocks.</li>\n</ul>", "body_text": "This commit is getting the IR ready for representing ONNX control flow.\nIt adds nested blocks to the IR.\n\nEach node now has blocks(), addBlock(), and eraseBlock() similar to a node's\noutput list.\nBlocks are a property of every node rather than an attribute because\nto make it easier to manage the lifetime of the containing nodes and because\nthe behavior of cloning Blocks will likely be different from the way we clone other\nattributes.\nA block itself has a list of nodes, as well as inputs and outputs.\nThe meaning of the nested input/output nodes are specific to the particular\nnode kind containing the block. It is safe to assume inputs to a block will be\nin scope in the block.\nEach Block has an owningNode() and each node has an owningBlock().\nThe owningNode of the top-most block is null.\nValues are lexically scoped: nested blocks can use values from outer blocks\nthat have been defined in previous nodes. Lint has been updated with these\nnew scoping rules.\nThis change preserves almost all of the pre-Block API. No attempt has been made\nto make optimizations aware of Blocks. This will need to be done on a case-by-case\nbasis as we make optimizations capable of handling Blocks.", "body": "This commit is getting the IR ready for representing ONNX control flow.\r\nIt adds nested blocks to the IR.\r\n\r\n* Each node now has blocks(), addBlock(), and eraseBlock() similar to a node's\r\n  output list.\r\n* Blocks are a property of every node rather than an attribute because\r\n  to make it easier to manage the lifetime of the containing nodes and because\r\n  the behavior of cloning Blocks will likely be different from the way we clone other\r\n  attributes.\r\n* A block itself has a list of nodes, as well as inputs and outputs.\r\n  The meaning of the nested input/output nodes are specific to the particular\r\n  node kind containing the block. It is safe to assume inputs to a block will be\r\n  in scope in the block.\r\n* Each Block has an owningNode() and each node has an owningBlock().\r\n  The owningNode of the top-most block is null.\r\n* Values are lexically scoped: nested blocks can use values from outer blocks\r\n  that have been defined in previous nodes. Lint has been updated with these\r\n  new scoping rules.\r\n* This change preserves almost all of the pre-Block API. No attempt has been made\r\n  to make optimizations aware of Blocks. This will need to be done on a case-by-case\r\n  basis as we make optimizations capable of handling Blocks."}