{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/165706653", "pull_request_review_id": 93693599, "id": 165706653, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NTcwNjY1Mw==", "diff_hunk": "@@ -413,88 +427,126 @@ void Graph::lint() const {\n   // - uniques in all_nodes are unique\n   // - every use will occur later in the topsort\n \n-  std::unordered_set<const Value*> in_scope;\n-  std::unordered_set<const Node*> node_in_scope;\n-  std::unordered_set<size_t> seen_uniques;\n-  std::unordered_map<const Node*, int64_t> anticipated_uses;\n-  auto check_value = [&](const Value* v) {\n-    auto b = in_scope.insert(v);\n-    JIT_ASSERT(b.second);  // insertion took place\n-    auto b2 = seen_uniques.insert(v->unique());\n-    JIT_ASSERT(b2.second);  // insertion took place\n-    JIT_ASSERT(v->unique() < next_unique_);\n-\n-    for (auto use : v->uses()) {\n-      JIT_ASSERT(node_in_scope.count(use.user) == 0);\n-      JIT_ASSERT(all_nodes.count(use.user) == 1);\n-      anticipated_uses[use.user]++;  // int default constructs to 0\n+  struct Scope {\n+    Scope() {}\n+    Scope(std::unique_ptr<Scope> parent)\n+    : parent(std::move(parent)) {}\n+    bool contains(const Value * v) {\n+      return values.count(v) > 0 || (parent && parent->contains(v));\n+    }\n+    bool contains(const Node * n) {\n+      return nodes.count(n) > 0 || (parent && parent->contains(n));\n     }\n+    void insert(const Value * v) {\n+      JIT_ASSERT(!contains(v));\n+      values.insert(v);\n+    }\n+    void insert(const Node * n) {\n+      JIT_ASSERT(!contains(n));\n+      nodes.insert(n);\n+    }\n+    std::unique_ptr<Scope> parent;\n+  private:\n+    std::unordered_set<const Value*> values;\n+    std::unordered_set<const Node*> nodes;\n   };\n-  auto check_node = [&](const Node* n) {\n-    for (auto input : n->inputs_) {\n-      if (in_scope.count(input) != 1) {\n-        JIT_ASSERTM(0, \"%%%d not in scope\", input->unique());\n+  struct Env {\n+    Env(const Graph & g)\n+    : g(g)\n+    , scope(new Scope())\n+    , all_nodes_set(ALL_OF(g.all_nodes)) {} // NB: all_nodes is *unordered*\n+    const Graph & g;\n+    std::unique_ptr<Scope> scope;\n+    std::unordered_set<size_t> seen_uniques;\n+    std::unordered_map<const Node*, int64_t> anticipated_uses;\n+    node_set all_nodes_set;\n+    node_set sum_set;\n+\n+    void check_value(const Value* v) {\n+      scope->insert(v);\n+      auto b2 = seen_uniques.insert(v->unique());\n+      JIT_ASSERT(b2.second);  // insertion took place\n+      JIT_ASSERT(v->unique() < g.next_unique_);\n+\n+      for (auto use : v->uses()) {\n+        JIT_ASSERT(!scope->contains(use.user));\n+        JIT_ASSERT(g.all_nodes.count(use.user) == 1);\n+        anticipated_uses[use.user]++;  // int default constructs to 0\n       }\n     }\n-    JIT_ASSERT(anticipated_uses[n] == static_cast<int64_t>(n->inputs_.size()));\n-    anticipated_uses[n] = -1;  // we saw the anticipated user!\n-    auto node_inserted = node_in_scope.insert(n);\n-    JIT_ASSERT(node_inserted.second);  // insertion took place\n-    size_t i = 0;\n-    for(auto o : n->outputs()) {\n-      JIT_ASSERT(o->node() == n);\n-      JIT_ASSERT(i++ == o->offset_);\n-      check_value(o);\n+    void check_node(const Node* n) {\n+      for (auto input : n->inputs_) {\n+        if (!scope->contains(input)) {\n+          JIT_ASSERTM(0, \"%%%d not in scope\", input->unique());\n+        }\n+      }\n+      JIT_ASSERT(anticipated_uses[n] == static_cast<int64_t>(n->inputs_.size()));\n+      anticipated_uses[n] = -1;  // we saw the anticipated user!\n+      scope->insert(n);\n+      for(auto block : n->blocks()) {\n+        scope = std::unique_ptr<Scope>(new Scope(std::move(scope)));\n+        check_block(block);\n+        scope = std::move(scope->parent);\n+      }\n+      size_t i = 0;\n+      for(auto o : n->outputs()) {\n+        JIT_ASSERT(o->node() == n);\n+        JIT_ASSERT(i++ == o->offset_);\n+        check_value(o);\n+      }\n+      n->lint();\n     }\n-    n->lint();\n-  };\n-\n-  for (auto input : inputs()) {\n-    check_value(input);\n-    JIT_ASSERT(input->node()->kind_ == kParam);\n-  }\n-\n-  for (auto n : nodes()) {\n-    JIT_ASSERT(n->kind_ != kParam);\n-    JIT_ASSERT(n->kind_ != kReturn);\n-    check_node(n);\n-  }\n+    void check_block(const Block *b) {\n+      for (auto input : b->inputs()) {\n+        check_value(input);\n+        JIT_ASSERT(input->node()->kind_ == kParam);\n+      }\n \n-  JIT_ASSERT(output_->kind() == kReturn);\n-  check_node(output_);\n+      for (auto n : b->nodes()) {\n+        JIT_ASSERT(n->kind_ != kParam);\n+        JIT_ASSERT(n->kind_ != kReturn);\n+        check_node(n);\n+      }\n \n-  for (auto kv : anticipated_uses) {\n-    JIT_ASSERT(kv.second == -1);\n-  }\n+      JIT_ASSERT(b->output_->kind() == kReturn);\n+      check_node(b->output_);\n+\n+      // all_nodes\n+      // - inputs_, output_ and nodes_ are all included in all_nodes\n+      // - all_nodes does not contain dead nodes??? (likely to be temporarily\n+      // suspended).  Weaker: all_nodes contains all inputs and returns\n+      // - only one return node???\n+\n+      node_set nodes_set(ALL_OF(b->nodes()));\n+      node_set inputs_set {b->input_};\n+      node_set output_set {b->output_};\n+      // TODO: Make a more type safe std::includes wrapper which disallows use on\n+      // non-ordered containers\n+      JIT_ASSERT(std::includes(ALL_OF(all_nodes_set), ALL_OF(nodes_set)));\n+      JIT_ASSERT(std::includes(ALL_OF(all_nodes_set), ALL_OF(inputs_set)));\n+      JIT_ASSERT(std::includes(ALL_OF(all_nodes_set), ALL_OF(output_set)));\n+\n+      sum_set.insert(ALL_OF(nodes_set));\n+      sum_set.insert(ALL_OF(inputs_set));\n+      sum_set.insert(ALL_OF(output_set));\n+    }\n+    void check_graph() {\n+      node_set all_nodes_set(ALL_OF(g.all_nodes)); // NB: all_nodes is *unordered*\n \n-  // all_nodes\n-  // - inputs_, output_ and nodes_ are all included in all_nodes\n-  // - all_nodes does not contain dead nodes??? (likely to be temporarily\n-  // suspended).  Weaker: all_nodes contains all inputs and returns\n-  // - only one return node???\n-\n-  node_set all_nodes_set(ALL_OF(all_nodes)); // NB: all_nodes is *unordered*\n-  node_set nodes_set(ALL_OF(nodes()));\n-  node_set inputs_set {input_};\n-  node_set output_set{output_};\n-  // TODO: Make a more type safe std::includes wrapper which disallows use on\n-  // non-ordered containers\n-  JIT_ASSERT(std::includes(ALL_OF(all_nodes_set), ALL_OF(nodes_set)));\n-  JIT_ASSERT(std::includes(ALL_OF(all_nodes_set), ALL_OF(inputs_set)));\n-  JIT_ASSERT(std::includes(ALL_OF(all_nodes_set), ALL_OF(output_set)));\n-\n-  node_set sum_set;\n-  sum_set.insert(ALL_OF(nodes_set));\n-  sum_set.insert(ALL_OF(inputs_set));\n-  sum_set.insert(ALL_OF(output_set));\n-  JIT_ASSERT(std::includes(ALL_OF(sum_set), ALL_OF(all_nodes_set)));\n-\n-  // graph->stage() should be equal to max(node.stage for node in graph->nodes())\n-  if (begin() == end()) {\n-    JIT_ASSERT(stage() == 0);\n-  } else {\n-    JIT_ASSERT(stage() == rbegin()->stage());\n-  }\n+      check_block(g.block_);\n+      for (auto kv : anticipated_uses) {\n+        JIT_ASSERT(kv.second == -1);\n+      }\n+      // graph->stage() should be equal to max(node.stage for node in graph->nodes())", "path": "torch/csrc/jit/ir.cpp", "position": 241, "original_position": 238, "commit_id": "454f9d893a8df35d53eb040cc0f6e38ce3e4f424", "original_commit_id": "4b55af851f06bb57ee4bf7e5021da7511f516ad7", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Although all graphs outside of autodiff will only have a single stage I think", "created_at": "2018-02-02T17:25:07Z", "updated_at": "2018-11-23T15:39:00Z", "html_url": "https://github.com/pytorch/pytorch/pull/5009#discussion_r165706653", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/5009", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/165706653"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/5009#discussion_r165706653"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/5009"}}, "body_html": "<p>Although all graphs outside of autodiff will only have a single stage I think</p>", "body_text": "Although all graphs outside of autodiff will only have a single stage I think", "in_reply_to_id": 165673791}