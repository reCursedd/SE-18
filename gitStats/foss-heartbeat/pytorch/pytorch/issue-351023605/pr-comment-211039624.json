{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/211039624", "pull_request_review_id": 147389931, "id": 211039624, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMTAzOTYyNA==", "diff_hunk": "@@ -542,33 +542,51 @@ static std::string prefixLine(const std::string& str, std::string prefix) {\n Value* emitBuiltinCall(\n   const SourceRange& loc,\n   Graph& graph,\n-  Symbol name,\n+  at::ArrayRef<Symbol> names,\n   at::ArrayRef<NamedValue> inputs,\n   at::ArrayRef<NamedValue> attributes,\n   // if true, emitBuiltinCall will throw an exception if this builtin does not exist,\n   // otherwise it will return nullptr if the builtin is not found.\n   bool required) {\n \n-  const auto& variants = getAllOperatorsFor(name);\n+  size_t num_variants_found = 0;\n   std::stringstream failure_messages;\n-  for (const std::shared_ptr<Operator>& op : variants) {\n-    if (auto result = tryEmitBuiltin(\n-            op, failure_messages, loc, graph, name, inputs, attributes)) {\n-      return result;\n+  for (const auto& name : names) {\n+    const auto& variants = getAllOperatorsFor(name);\n+    num_variants_found += variants.size();\n+\n+    for (const std::shared_ptr<Operator>& op : variants) {\n+      if (auto result = tryEmitBuiltin(\n+              op, failure_messages, loc, graph, name, inputs, attributes)) {\n+        return result;\n+      }\n     }\n   }\n   // none of the options worked\n   if(!required) {\n     return nullptr;\n   }\n-  if(variants.size() == 0) {\n+  if(num_variants_found == 0) {\n     throw ErrorReport(loc) << \"unknown builtin op\";\n   }\n   throw ErrorReport(loc) << \"arguments for call are not valid:\\n\"\n                          << prefixLine(failure_messages.str(), \"  \")\n                          << \"for call at\";\n }\n \n+Value* emitBuiltinCall(\n+  const SourceRange& loc,\n+  Graph& graph,\n+  Symbol name,\n+  at::ArrayRef<NamedValue> inputs,\n+  at::ArrayRef<NamedValue> attributes,\n+  // if true, emitBuiltinCall will throw an exception if this builtin does not exist,\n+  // otherwise it will return nullptr if the builtin is not found.\n+  bool required) {\n+  return emitBuiltinCall(\n+      loc, graph, at::ArrayRef<Symbol>{name}, inputs, attributes, required);", "path": "torch/csrc/jit/script/compiler.cpp", "position": 53, "original_position": 53, "commit_id": "de9110397a4d3cb7ca3823971426dc1059cdb35e", "original_commit_id": "de9110397a4d3cb7ca3823971426dc1059cdb35e", "user": {"login": "suo", "id": 1617424, "node_id": "MDQ6VXNlcjE2MTc0MjQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/1617424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/suo", "html_url": "https://github.com/suo", "followers_url": "https://api.github.com/users/suo/followers", "following_url": "https://api.github.com/users/suo/following{/other_user}", "gists_url": "https://api.github.com/users/suo/gists{/gist_id}", "starred_url": "https://api.github.com/users/suo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/suo/subscriptions", "organizations_url": "https://api.github.com/users/suo/orgs", "repos_url": "https://api.github.com/users/suo/repos", "events_url": "https://api.github.com/users/suo/events{/privacy}", "received_events_url": "https://api.github.com/users/suo/received_events", "type": "User", "site_admin": false}, "body": "oh nice TIL", "created_at": "2018-08-17T21:43:10Z", "updated_at": "2018-11-23T15:49:37Z", "html_url": "https://github.com/pytorch/pytorch/pull/10566#discussion_r211039624", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/10566", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/211039624"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/10566#discussion_r211039624"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/10566"}}, "body_html": "<p>oh nice TIL</p>", "body_text": "oh nice TIL", "in_reply_to_id": 210929570}