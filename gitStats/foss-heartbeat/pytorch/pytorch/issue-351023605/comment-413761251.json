{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/413761251", "html_url": "https://github.com/pytorch/pytorch/pull/10566#issuecomment-413761251", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/10566", "id": 413761251, "node_id": "MDEyOklzc3VlQ29tbWVudDQxMzc2MTI1MQ==", "user": {"login": "suo", "id": 1617424, "node_id": "MDQ6VXNlcjE2MTc0MjQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/1617424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/suo", "html_url": "https://github.com/suo", "followers_url": "https://api.github.com/users/suo/followers", "following_url": "https://api.github.com/users/suo/following{/other_user}", "gists_url": "https://api.github.com/users/suo/gists{/gist_id}", "starred_url": "https://api.github.com/users/suo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/suo/subscriptions", "organizations_url": "https://api.github.com/users/suo/orgs", "repos_url": "https://api.github.com/users/suo/repos", "events_url": "https://api.github.com/users/suo/events{/privacy}", "received_events_url": "https://api.github.com/users/suo/received_events", "type": "User", "site_admin": false}, "created_at": "2018-08-17T05:26:08Z", "updated_at": "2018-08-17T05:26:08Z", "author_association": "MEMBER", "body_html": "<p>Well, there are still list-only ops like <code>len()</code> or <code>append()</code> that don't have an <code>aten</code> analog.</p>\n<p>Right now the compiler will only search <code>aten::</code> for builtins, so unless we plan on adding builtins to <code>aten::</code> indefinitely we'll have to eat the complexity inevitably.</p>", "body_text": "Well, there are still list-only ops like len() or append() that don't have an aten analog.\nRight now the compiler will only search aten:: for builtins, so unless we plan on adding builtins to aten:: indefinitely we'll have to eat the complexity inevitably.", "body": "Well, there are still list-only ops like `len()` or `append()` that don't have an `aten` analog.\r\n\r\nRight now the compiler will only search `aten::` for builtins, so unless we plan on adding builtins to `aten::` indefinitely we'll have to eat the complexity inevitably."}