{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/337805231", "html_url": "https://github.com/pytorch/pytorch/issues/3152#issuecomment-337805231", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/3152", "id": 337805231, "node_id": "MDEyOklzc3VlQ29tbWVudDMzNzgwNTIzMQ==", "user": {"login": "chenyuntc", "id": 9301117, "node_id": "MDQ6VXNlcjkzMDExMTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/9301117?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chenyuntc", "html_url": "https://github.com/chenyuntc", "followers_url": "https://api.github.com/users/chenyuntc/followers", "following_url": "https://api.github.com/users/chenyuntc/following{/other_user}", "gists_url": "https://api.github.com/users/chenyuntc/gists{/gist_id}", "starred_url": "https://api.github.com/users/chenyuntc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chenyuntc/subscriptions", "organizations_url": "https://api.github.com/users/chenyuntc/orgs", "repos_url": "https://api.github.com/users/chenyuntc/repos", "events_url": "https://api.github.com/users/chenyuntc/events{/privacy}", "received_events_url": "https://api.github.com/users/chenyuntc/received_events", "type": "User", "site_admin": false}, "created_at": "2017-10-19T05:41:49Z", "updated_at": "2017-10-19T05:41:49Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Interesting, this work in my laptop</p>\n<div class=\"highlight highlight-source-python\"><pre>In [<span class=\"pl-c1\">1</span>]: <span class=\"pl-k\">import</span> torch <span class=\"pl-k\">as</span> t\n\nIn [<span class=\"pl-c1\">2</span>]: x<span class=\"pl-k\">=</span>t.sparse.FloatTensor(<span class=\"pl-c1\">10</span>, <span class=\"pl-c1\">3</span>)\n\nIn [<span class=\"pl-c1\">3</span>]: y <span class=\"pl-k\">=</span> x.new(x.size())\n\nIn [<span class=\"pl-c1\">4</span>]: x<span class=\"pl-k\">+</span>y\nOut[<span class=\"pl-c1\">4</span>]: \nFloatTensor of size <span class=\"pl-ii\">10x3</span> <span class=\"pl-k\">with</span> indices:\n[torch.LongTensor <span class=\"pl-k\">with</span> no dimension]\n<span class=\"pl-k\">and</span> values:\n[torch.FloatTensor <span class=\"pl-k\">with</span> no dimension]\n\nIn [<span class=\"pl-c1\">5</span>]: t.<span class=\"pl-c1\">__version__</span>\nOut[<span class=\"pl-c1\">5</span>]: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>0.2.0+b079469<span class=\"pl-pds\">'</span></span>\n</pre></div>\n<p>actually there is only one line code in <code>tensor.new</code></p>\n<div class=\"highlight highlight-source-python\"><pre>    <span class=\"pl-k\">def</span> <span class=\"pl-en\">new</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>, <span class=\"pl-k\">*</span><span class=\"pl-smi\">args</span>, <span class=\"pl-k\">**</span><span class=\"pl-smi\">kwargs</span>):\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"\"\"</span>Constructs a new tensor of the same data type.<span class=\"pl-pds\">\"\"\"</span></span>\n        <span class=\"pl-k\">return</span> <span class=\"pl-c1\">self</span>.<span class=\"pl-c1\">__class__</span>(<span class=\"pl-k\">*</span>args, <span class=\"pl-k\">**</span>kwargs)</pre></div>\n<p><code>x.new(x.size())</code> is equal to <code>torch.sparse.FloatTensor(x.size())</code></p>", "body_text": "Interesting, this work in my laptop\nIn [1]: import torch as t\n\nIn [2]: x=t.sparse.FloatTensor(10, 3)\n\nIn [3]: y = x.new(x.size())\n\nIn [4]: x+y\nOut[4]: \nFloatTensor of size 10x3 with indices:\n[torch.LongTensor with no dimension]\nand values:\n[torch.FloatTensor with no dimension]\n\nIn [5]: t.__version__\nOut[5]: '0.2.0+b079469'\n\nactually there is only one line code in tensor.new\n    def new(self, *args, **kwargs):\n        \"\"\"Constructs a new tensor of the same data type.\"\"\"\n        return self.__class__(*args, **kwargs)\nx.new(x.size()) is equal to torch.sparse.FloatTensor(x.size())", "body": "Interesting, this work in my laptop\r\n```Python\r\nIn [1]: import torch as t\r\n\r\nIn [2]: x=t.sparse.FloatTensor(10, 3)\r\n\r\nIn [3]: y = x.new(x.size())\r\n\r\nIn [4]: x+y\r\nOut[4]: \r\nFloatTensor of size 10x3 with indices:\r\n[torch.LongTensor with no dimension]\r\nand values:\r\n[torch.FloatTensor with no dimension]\r\n\r\nIn [5]: t.__version__\r\nOut[5]: '0.2.0+b079469'\r\n\r\n```\r\n\r\nactually there is only one line code in `tensor.new`\r\n```Python\r\n    def new(self, *args, **kwargs):\r\n        \"\"\"Constructs a new tensor of the same data type.\"\"\"\r\n        return self.__class__(*args, **kwargs)\r\n```\r\n`x.new(x.size())` is equal to `torch.sparse.FloatTensor(x.size())`"}