{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/337927134", "html_url": "https://github.com/pytorch/pytorch/issues/3152#issuecomment-337927134", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/3152", "id": 337927134, "node_id": "MDEyOklzc3VlQ29tbWVudDMzNzkyNzEzNA==", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "created_at": "2017-10-19T14:33:06Z", "updated_at": "2017-10-19T14:33:06Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Yes, unfortunately, as long as <code>size()</code> is specified to return the size you would get if you ran <code>to_dense()</code> (which is a reasonable choice) you will have this problem.</p>\n<p>One thing that I have wanted is a <code>SparseSize</code> object, which contains both a Size as well as a <code>dimI</code> (or <code>dimV</code>; it's all equivalent). This SparseSize object would be sufficient to reconstruct a hybrid sparse tensor with the same sparsity/density pattern as the original. I wrote some (unmerged) code which halfway gets here; see  <a href=\"https://github.com/pytorch/pytorch/pull/1471/files#diff-9edb3fd901d7b804565bef6f7bc80d6bR21\">https://github.com/pytorch/pytorch/pull/1471/files#diff-9edb3fd901d7b804565bef6f7bc80d6bR21</a> (this old PR got obsoleted and I let the new version of the PR fall on the backburner.)</p>", "body_text": "Yes, unfortunately, as long as size() is specified to return the size you would get if you ran to_dense() (which is a reasonable choice) you will have this problem.\nOne thing that I have wanted is a SparseSize object, which contains both a Size as well as a dimI (or dimV; it's all equivalent). This SparseSize object would be sufficient to reconstruct a hybrid sparse tensor with the same sparsity/density pattern as the original. I wrote some (unmerged) code which halfway gets here; see  https://github.com/pytorch/pytorch/pull/1471/files#diff-9edb3fd901d7b804565bef6f7bc80d6bR21 (this old PR got obsoleted and I let the new version of the PR fall on the backburner.)", "body": "Yes, unfortunately, as long as `size()` is specified to return the size you would get if you ran `to_dense()` (which is a reasonable choice) you will have this problem.\r\n\r\nOne thing that I have wanted is a `SparseSize` object, which contains both a Size as well as a `dimI` (or `dimV`; it's all equivalent). This SparseSize object would be sufficient to reconstruct a hybrid sparse tensor with the same sparsity/density pattern as the original. I wrote some (unmerged) code which halfway gets here; see  https://github.com/pytorch/pytorch/pull/1471/files#diff-9edb3fd901d7b804565bef6f7bc80d6bR21 (this old PR got obsoleted and I let the new version of the PR fall on the backburner.)"}