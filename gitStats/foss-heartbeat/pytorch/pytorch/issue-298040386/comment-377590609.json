{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/377590609", "html_url": "https://github.com/pytorch/pytorch/pull/5287#issuecomment-377590609", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/5287", "id": 377590609, "node_id": "MDEyOklzc3VlQ29tbWVudDM3NzU5MDYwOQ==", "user": {"login": "SsnL", "id": 5674597, "node_id": "MDQ6VXNlcjU2NzQ1OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5674597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SsnL", "html_url": "https://github.com/SsnL", "followers_url": "https://api.github.com/users/SsnL/followers", "following_url": "https://api.github.com/users/SsnL/following{/other_user}", "gists_url": "https://api.github.com/users/SsnL/gists{/gist_id}", "starred_url": "https://api.github.com/users/SsnL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SsnL/subscriptions", "organizations_url": "https://api.github.com/users/SsnL/orgs", "repos_url": "https://api.github.com/users/SsnL/repos", "events_url": "https://api.github.com/users/SsnL/events{/privacy}", "received_events_url": "https://api.github.com/users/SsnL/received_events", "type": "User", "site_admin": false}, "created_at": "2018-03-30T18:29:22Z", "updated_at": "2018-03-30T18:29:22Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=4583066\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/apaszke\">@apaszke</a> There are two problems with that approach:</p>\n<ol>\n<li>It is awkward to train with <code>AdaptiveSoftmaxLoss</code> and inference with <code>AdaptiveSoftmax</code> because you need to construct a new module and copy the learned parameters. It becomes particularly subtle when loading state dict.</li>\n<li><code>AdaptiveSoftmaxLoss</code> is a loss module but contains trainable parameters. This violates the convention we have currently.</li>\n</ol>", "body_text": "@apaszke There are two problems with that approach:\n\nIt is awkward to train with AdaptiveSoftmaxLoss and inference with AdaptiveSoftmax because you need to construct a new module and copy the learned parameters. It becomes particularly subtle when loading state dict.\nAdaptiveSoftmaxLoss is a loss module but contains trainable parameters. This violates the convention we have currently.", "body": "@apaszke There are two problems with that approach:\r\n1. It is awkward to train with `AdaptiveSoftmaxLoss` and inference with `AdaptiveSoftmax` because you need to construct a new module and copy the learned parameters. It becomes particularly subtle when loading state dict.\r\n2. `AdaptiveSoftmaxLoss` is a loss module but contains trainable parameters. This violates the convention we have currently."}