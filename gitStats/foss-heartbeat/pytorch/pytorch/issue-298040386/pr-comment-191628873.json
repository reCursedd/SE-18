{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/191628873", "pull_request_review_id": 124234330, "id": 191628873, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTYyODg3Mw==", "diff_hunk": "@@ -0,0 +1,266 @@\n+from collections import namedtuple\n+\n+import torch\n+\n+from . import Sequential, ModuleList, Linear\n+from .module import Module\n+from ..functional import log_softmax\n+\n+\n+_ASMoutput = namedtuple('ASMoutput', ['output', 'loss'])\n+\n+\n+class AdaptiveLogSoftmaxWithLoss(Module):\n+    r\"\"\"Efficient softmax approximation as described in\n+    `Efficient softmax approximation for GPUs`_ by Edouard Grave, Armand Joulin,\n+    Moustapha Ciss\u00e9, David Grangier, and Herv\u00e9 J\u00e9gou.\n+\n+    Adaptive softmax is an approximate strategy for training models with large\n+    output spaces. It is most effective when the label distribution is highly\n+    imbalanced, for example in natural language modelling, where the word\n+    frequency distribution approximately follows the `Zipf's law`_.\n+\n+    Adaptive softmax partitions the labels into several clusters, according to\n+    their frequency. These clusters may contain different number of targets\n+    each.\n+    Additionally, clusters containig less frequent labels assign lower\n+    dimensional embeddings to those labels, which speeds up the computation.\n+    For each minibatch, only clusters for which at least one target is\n+    present are evaluated.\n+\n+    The idea is that the clusters which are accessed frequently\n+    (like the first one, containing most frequent labels), should also be cheap\n+    to compute -- that is, contain a small number of assigned labels.\n+\n+    We highly recommend taking a look at the original paper for more details.\n+\n+    * :attr:`cutoffs` should be an ordered Sequence of integers sorted\n+      in the increasing order.\n+      It controls number of clusters and the partitioning of targets into\n+      clusters. For example setting ``cutoffs = [10, 100, 1000]``\n+      means that first `10` targets will be assigned", "path": "torch/nn/modules/adaptive.py", "position": 41, "original_position": 41, "commit_id": "7f89e1506a4e2df824118d3bc6e1e31f4073fc70", "original_commit_id": "9a91a209de464fce29d9c9bbc1d297e15874e911", "user": {"login": "ranzato", "id": 15735633, "node_id": "MDQ6VXNlcjE1NzM1NjMz", "avatar_url": "https://avatars1.githubusercontent.com/u/15735633?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ranzato", "html_url": "https://github.com/ranzato", "followers_url": "https://api.github.com/users/ranzato/followers", "following_url": "https://api.github.com/users/ranzato/following{/other_user}", "gists_url": "https://api.github.com/users/ranzato/gists{/gist_id}", "starred_url": "https://api.github.com/users/ranzato/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ranzato/subscriptions", "organizations_url": "https://api.github.com/users/ranzato/orgs", "repos_url": "https://api.github.com/users/ranzato/repos", "events_url": "https://api.github.com/users/ranzato/events{/privacy}", "received_events_url": "https://api.github.com/users/ranzato/received_events", "type": "User", "site_admin": false}, "body": "why starting counting from 1?", "created_at": "2018-05-30T02:42:29Z", "updated_at": "2018-11-23T15:44:42Z", "html_url": "https://github.com/pytorch/pytorch/pull/5287#discussion_r191628873", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/5287", "author_association": "NONE", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/191628873"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/5287#discussion_r191628873"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/5287"}}, "body_html": "<p>why starting counting from 1?</p>", "body_text": "why starting counting from 1?"}