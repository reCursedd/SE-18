{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/378363747", "html_url": "https://github.com/pytorch/pytorch/pull/5287#issuecomment-378363747", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/5287", "id": 378363747, "node_id": "MDEyOklzc3VlQ29tbWVudDM3ODM2Mzc0Nw==", "user": {"login": "SsnL", "id": 5674597, "node_id": "MDQ6VXNlcjU2NzQ1OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5674597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SsnL", "html_url": "https://github.com/SsnL", "followers_url": "https://api.github.com/users/SsnL/followers", "following_url": "https://api.github.com/users/SsnL/following{/other_user}", "gists_url": "https://api.github.com/users/SsnL/gists{/gist_id}", "starred_url": "https://api.github.com/users/SsnL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SsnL/subscriptions", "organizations_url": "https://api.github.com/users/SsnL/orgs", "repos_url": "https://api.github.com/users/SsnL/repos", "events_url": "https://api.github.com/users/SsnL/events{/privacy}", "received_events_url": "https://api.github.com/users/SsnL/received_events", "type": "User", "site_admin": false}, "created_at": "2018-04-03T19:12:23Z", "updated_at": "2018-05-19T02:10:44Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=10772830\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/elanmart\">@elanmart</a> Thanks a lot for doing the benchmark. I thought cross_entropy has its special kernel and is more numerically stable, but it turns out that I am wrong. It actually just calls logsoftmax + nllloss. Given this is the case, let's just make it <code>AdaptiveLogSoftmaxWithLoss</code> which always return log probability and loss. (There should be something like <div class=\"border rounded-1 my-2\">\n  <div class=\"f6 px-3 py-2 lh-condensed border-bottom bg-gray-light\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/pytorch/pytorch/blob/48ad4546d21553517d506d857f64d638e8fd61cd/torch/nn/functional.py#L1453\">pytorch/torch/nn/functional.py</a>\n    </p>\n    <p class=\"mb-0 text-gray-light\">\n         Line 1453\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/pytorch/pytorch/commit/48ad4546d21553517d506d857f64d638e8fd61cd\">48ad454</a>\n    </p>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L1453\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"1453\"></td>\n          <td id=\"LC1453\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-k\">return</span> nll_loss(log_softmax(<span class=\"pl-c1\">input</span>, <span class=\"pl-c1\">1</span>), target, weight, size_average, ignore_index, <span class=\"pl-v\">reduce</span>) </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n in the forward). I think that it is reasonable to make it a <code>namedtuple</code> that maybe has <code>.loss=None</code> in inference mode (saving an <code>nll_loss</code> call).</p>", "body_text": "@elanmart Thanks a lot for doing the benchmark. I thought cross_entropy has its special kernel and is more numerically stable, but it turns out that I am wrong. It actually just calls logsoftmax + nllloss. Given this is the case, let's just make it AdaptiveLogSoftmaxWithLoss which always return log probability and loss. (There should be something like \n  \n    \n      pytorch/torch/nn/functional.py\n    \n    \n         Line 1453\n      in\n      48ad454\n    \n    \n    \n    \n\n        \n          \n           return nll_loss(log_softmax(input, 1), target, weight, size_average, ignore_index, reduce) \n        \n    \n  \n\n in the forward). I think that it is reasonable to make it a namedtuple that maybe has .loss=None in inference mode (saving an nll_loss call).", "body": "@elanmart Thanks a lot for doing the benchmark. I thought cross_entropy has its special kernel and is more numerically stable, but it turns out that I am wrong. It actually just calls logsoftmax + nllloss. Given this is the case, let's just make it `AdaptiveLogSoftmaxWithLoss` which always return log probability and loss. (There should be something like https://github.com/pytorch/pytorch/blob/48ad4546d21553517d506d857f64d638e8fd61cd/torch/nn/functional.py#L1453 in the forward). I think that it is reasonable to make it a `namedtuple` that maybe has `.loss=None` in inference mode (saving an `nll_loss` call)."}