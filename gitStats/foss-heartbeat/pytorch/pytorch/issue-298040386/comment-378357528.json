{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/378357528", "html_url": "https://github.com/pytorch/pytorch/pull/5287#issuecomment-378357528", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/5287", "id": 378357528, "node_id": "MDEyOklzc3VlQ29tbWVudDM3ODM1NzUyOA==", "user": {"login": "elanmart", "id": 10772830, "node_id": "MDQ6VXNlcjEwNzcyODMw", "avatar_url": "https://avatars3.githubusercontent.com/u/10772830?v=4", "gravatar_id": "", "url": "https://api.github.com/users/elanmart", "html_url": "https://github.com/elanmart", "followers_url": "https://api.github.com/users/elanmart/followers", "following_url": "https://api.github.com/users/elanmart/following{/other_user}", "gists_url": "https://api.github.com/users/elanmart/gists{/gist_id}", "starred_url": "https://api.github.com/users/elanmart/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/elanmart/subscriptions", "organizations_url": "https://api.github.com/users/elanmart/orgs", "repos_url": "https://api.github.com/users/elanmart/repos", "events_url": "https://api.github.com/users/elanmart/events{/privacy}", "received_events_url": "https://api.github.com/users/elanmart/received_events", "type": "User", "site_admin": false}, "created_at": "2018-04-03T18:51:41Z", "updated_at": "2018-04-03T18:51:41Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=5674597\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/SsnL\">@SsnL</a> from my initial benchmarks the path using <code>CrossEntropy</code> was not significantly faster than computing log-probs and reducing <code>(-log_probs).mean()</code>.</p>\n<p>Perhaps we could always return probabilities / log-probabilities, and then have convenience function for doing this reduction?</p>\n<p>Do you see any other alternatives for having a flag? Maybe we could always return both things as <code>namedtuple</code>, and have a flag controlling which one is <code>None</code>?</p>", "body_text": "@SsnL from my initial benchmarks the path using CrossEntropy was not significantly faster than computing log-probs and reducing (-log_probs).mean().\nPerhaps we could always return probabilities / log-probabilities, and then have convenience function for doing this reduction?\nDo you see any other alternatives for having a flag? Maybe we could always return both things as namedtuple, and have a flag controlling which one is None?", "body": "@SsnL from my initial benchmarks the path using `CrossEntropy` was not significantly faster than computing log-probs and reducing `(-log_probs).mean()`. \r\n\r\nPerhaps we could always return probabilities / log-probabilities, and then have convenience function for doing this reduction? \r\n\r\nDo you see any other alternatives for having a flag? Maybe we could always return both things as `namedtuple`, and have a flag controlling which one is `None`?"}