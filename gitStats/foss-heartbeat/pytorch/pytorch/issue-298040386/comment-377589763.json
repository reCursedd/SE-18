{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/377589763", "html_url": "https://github.com/pytorch/pytorch/pull/5287#issuecomment-377589763", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/5287", "id": 377589763, "node_id": "MDEyOklzc3VlQ29tbWVudDM3NzU4OTc2Mw==", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "created_at": "2018-03-30T18:25:51Z", "updated_at": "2018-03-30T18:25:51Z", "author_association": "MEMBER", "body_html": "<p>I don't think that 3. is a good idea, because a single flag <em>completely</em> changes the semantics of this class. Something that would fit better into <code>nn</code> would be to have a base class that implements the common functionality, and then have 3 simple subclasses that implement specific features in their <code>forward</code>. So we would end up with <code>AdaptiveSoftmax</code> (probs), <code>LogAdaptiveSoftmax</code> (log-probs), and <code>AdaptiveSoftmaxLoss</code></p>", "body_text": "I don't think that 3. is a good idea, because a single flag completely changes the semantics of this class. Something that would fit better into nn would be to have a base class that implements the common functionality, and then have 3 simple subclasses that implement specific features in their forward. So we would end up with AdaptiveSoftmax (probs), LogAdaptiveSoftmax (log-probs), and AdaptiveSoftmaxLoss", "body": "I don't think that 3. is a good idea, because a single flag *completely* changes the semantics of this class. Something that would fit better into `nn` would be to have a base class that implements the common functionality, and then have 3 simple subclasses that implement specific features in their `forward`. So we would end up with `AdaptiveSoftmax` (probs), `LogAdaptiveSoftmax` (log-probs), and `AdaptiveSoftmaxLoss`"}