{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/138243041", "pull_request_review_id": 62010819, "id": 138243041, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzODI0MzA0MQ==", "diff_hunk": "@@ -868,7 +875,7 @@ def __len__(self):\n         return len(self.data)\n \n     def __iter__(self):\n-        return iter(map(lambda i: self[i], range(self.size(0))))\n+        return iter(imap(lambda i: self[i], range(self.size(0))))", "path": "torch/autograd/variable.py", "position": null, "original_position": 19, "commit_id": "05176277759683cc58bb1fcfa8b15afd84eac16d", "original_commit_id": "ea60cfd66f7d61deb52856b7cc5673242e6a4415", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "I misdiagnosed the issue previously; it turns out the old implementation of zip does interleave accesses as necessary. The real problem is that the map in iter eagerly performs the index on all elements (since it materializes a list.) Making it produce a generator finally fixes the problem.", "created_at": "2017-09-12T03:09:04Z", "updated_at": "2018-11-23T15:34:35Z", "html_url": "https://github.com/pytorch/pytorch/pull/2695#discussion_r138243041", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/2695", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/138243041"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/2695#discussion_r138243041"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/2695"}}, "body_html": "<p>I misdiagnosed the issue previously; it turns out the old implementation of zip does interleave accesses as necessary. The real problem is that the map in iter eagerly performs the index on all elements (since it materializes a list.) Making it produce a generator finally fixes the problem.</p>", "body_text": "I misdiagnosed the issue previously; it turns out the old implementation of zip does interleave accesses as necessary. The real problem is that the map in iter eagerly performs the index on all elements (since it materializes a list.) Making it produce a generator finally fixes the problem.", "in_reply_to_id": 138238580}