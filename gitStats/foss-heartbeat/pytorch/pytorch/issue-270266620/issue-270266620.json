{"url": "https://api.github.com/repos/pytorch/pytorch/issues/3416", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/3416/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/3416/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/3416/events", "html_url": "https://github.com/pytorch/pytorch/issues/3416", "id": 270266620, "node_id": "MDU6SXNzdWUyNzAyNjY2MjA=", "number": 3416, "title": "Indexing with an empty vector of indices throws a RuntimeError", "user": {"login": "bermanmaxim", "id": 5989894, "node_id": "MDQ6VXNlcjU5ODk4OTQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/5989894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bermanmaxim", "html_url": "https://github.com/bermanmaxim", "followers_url": "https://api.github.com/users/bermanmaxim/followers", "following_url": "https://api.github.com/users/bermanmaxim/following{/other_user}", "gists_url": "https://api.github.com/users/bermanmaxim/gists{/gist_id}", "starred_url": "https://api.github.com/users/bermanmaxim/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bermanmaxim/subscriptions", "organizations_url": "https://api.github.com/users/bermanmaxim/orgs", "repos_url": "https://api.github.com/users/bermanmaxim/repos", "events_url": "https://api.github.com/users/bermanmaxim/events{/privacy}", "received_events_url": "https://api.github.com/users/bermanmaxim/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-11-01T10:40:17Z", "updated_at": "2017-11-06T19:21:32Z", "closed_at": "2017-11-06T19:21:32Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Arguably, indexing a Tensor by a LongTensor with no dimension should return a LongTensor with no dimension. Consider the following case:</p>\n<pre><code>&gt;&gt;&gt; a = torch.ones(5)\n&gt;&gt;&gt; a[a&lt;0]\n[torch.FloatTensor with no dimension]\n&gt;&gt;&gt; a[(a&lt;0).nonzero().squeeze()]\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nRuntimeError: invalid argument 3: Index is supposed to be a vector at /opt/conda/conda-bld/pytorch_1503966894950/work/torch/lib/TH/generic/THTensorMath.c:248\n</code></pre>\n<p>This breaks indexing by indices when the list of indices is empty, which can be hard to detect. In my use-case, I use such a masking to select rows of a tensor corresponding to \"valid\" entries in a vector; I had not considered that it would not work when there are no valid entries.</p>", "body_text": "Arguably, indexing a Tensor by a LongTensor with no dimension should return a LongTensor with no dimension. Consider the following case:\n>>> a = torch.ones(5)\n>>> a[a<0]\n[torch.FloatTensor with no dimension]\n>>> a[(a<0).nonzero().squeeze()]\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nRuntimeError: invalid argument 3: Index is supposed to be a vector at /opt/conda/conda-bld/pytorch_1503966894950/work/torch/lib/TH/generic/THTensorMath.c:248\n\nThis breaks indexing by indices when the list of indices is empty, which can be hard to detect. In my use-case, I use such a masking to select rows of a tensor corresponding to \"valid\" entries in a vector; I had not considered that it would not work when there are no valid entries.", "body": "Arguably, indexing a Tensor by a LongTensor with no dimension should return a LongTensor with no dimension. Consider the following case:\r\n```\r\n>>> a = torch.ones(5)\r\n>>> a[a<0]\r\n[torch.FloatTensor with no dimension]\r\n>>> a[(a<0).nonzero().squeeze()]\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\nRuntimeError: invalid argument 3: Index is supposed to be a vector at /opt/conda/conda-bld/pytorch_1503966894950/work/torch/lib/TH/generic/THTensorMath.c:248\r\n```\r\nThis breaks indexing by indices when the list of indices is empty, which can be hard to detect. In my use-case, I use such a masking to select rows of a tensor corresponding to \"valid\" entries in a vector; I had not considered that it would not work when there are no valid entries.\r\n"}