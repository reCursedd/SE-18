{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/378047434", "html_url": "https://github.com/pytorch/pytorch/pull/6201#issuecomment-378047434", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/6201", "id": 378047434, "node_id": "MDEyOklzc3VlQ29tbWVudDM3ODA0NzQzNA==", "user": {"login": "colesbury", "id": 655866, "node_id": "MDQ6VXNlcjY1NTg2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/655866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colesbury", "html_url": "https://github.com/colesbury", "followers_url": "https://api.github.com/users/colesbury/followers", "following_url": "https://api.github.com/users/colesbury/following{/other_user}", "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions", "organizations_url": "https://api.github.com/users/colesbury/orgs", "repos_url": "https://api.github.com/users/colesbury/repos", "events_url": "https://api.github.com/users/colesbury/events{/privacy}", "received_events_url": "https://api.github.com/users/colesbury/received_events", "type": "User", "site_admin": false}, "created_at": "2018-04-02T21:09:20Z", "updated_at": "2018-04-02T21:09:41Z", "author_association": "MEMBER", "body_html": "<p>You'll have to add it to SKIP_PYTHON_BINDINGS in <code>tools/autograd/gen_python_functions.py</code> if you don't want it exposed to Python.</p>\n<p>I also think <code>argmax</code> and <code>argmin</code> would be reasonable in Python, but deserve docs.</p>\n<p>FWIW, for <code>max</code>/<code>min</code>, I think we will eventually want to unify the overloads Python and add support for multiple dimensions. Perhaps something like:</p>\n<pre><code>max(input, dim=None, return_indices=None) -&gt; Tensor or (Tensor, Tensor)\n</code></pre>\n<p>Where <code>dim</code> can be <code>None</code>, an <code>int</code>, or a tuple of <code>int</code>s and <code>return_indices</code> controls whether the function returns indices. (With <code>return_indices=None</code> being the legacy behavior dependent on <code>dim</code>).</p>", "body_text": "You'll have to add it to SKIP_PYTHON_BINDINGS in tools/autograd/gen_python_functions.py if you don't want it exposed to Python.\nI also think argmax and argmin would be reasonable in Python, but deserve docs.\nFWIW, for max/min, I think we will eventually want to unify the overloads Python and add support for multiple dimensions. Perhaps something like:\nmax(input, dim=None, return_indices=None) -> Tensor or (Tensor, Tensor)\n\nWhere dim can be None, an int, or a tuple of ints and return_indices controls whether the function returns indices. (With return_indices=None being the legacy behavior dependent on dim).", "body": "You'll have to add it to SKIP_PYTHON_BINDINGS in `tools/autograd/gen_python_functions.py` if you don't want it exposed to Python.\r\n\r\nI also think `argmax` and `argmin` would be reasonable in Python, but deserve docs.\r\n\r\nFWIW, for `max`/`min`, I think we will eventually want to unify the overloads Python and add support for multiple dimensions. Perhaps something like:\r\n\r\n```\r\nmax(input, dim=None, return_indices=None) -> Tensor or (Tensor, Tensor)\r\n```\r\n\r\nWhere `dim` can be `None`, an `int`, or a tuple of `int`s and `return_indices` controls whether the function returns indices. (With `return_indices=None` being the legacy behavior dependent on `dim`)."}