{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/405005021", "html_url": "https://github.com/pytorch/pytorch/issues/8653#issuecomment-405005021", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/8653", "id": 405005021, "node_id": "MDEyOklzc3VlQ29tbWVudDQwNTAwNTAyMQ==", "user": {"login": "t-vi", "id": 20787943, "node_id": "MDQ6VXNlcjIwNzg3OTQz", "avatar_url": "https://avatars2.githubusercontent.com/u/20787943?v=4", "gravatar_id": "", "url": "https://api.github.com/users/t-vi", "html_url": "https://github.com/t-vi", "followers_url": "https://api.github.com/users/t-vi/followers", "following_url": "https://api.github.com/users/t-vi/following{/other_user}", "gists_url": "https://api.github.com/users/t-vi/gists{/gist_id}", "starred_url": "https://api.github.com/users/t-vi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/t-vi/subscriptions", "organizations_url": "https://api.github.com/users/t-vi/orgs", "repos_url": "https://api.github.com/users/t-vi/repos", "events_url": "https://api.github.com/users/t-vi/events{/privacy}", "received_events_url": "https://api.github.com/users/t-vi/received_events", "type": "User", "site_admin": false}, "created_at": "2018-07-14T07:17:30Z", "updated_at": "2018-07-14T07:17:30Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=13564\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ezyang\">@ezyang</a>: Currently we use a custom <code>ContextProp</code> class</p>\n<pre><code>class ContextProp(object):\n    def __init__(self, getter, setter):\n        self.getter = getter\n        self.setter = setter\n\n    def __get__(self, obj, objtype):\n        return self.getter()\n\n    def __set__(self, obj, val):\n        if not flags_frozen():\n            self.setter(val)\n        else:\n            raise RuntimeError(\"not allowed to set torch.backends.cudnn flags \"\n                               \"after disable_global_flags; please use flags() context manager instead\")\n</code></pre>\n<p>and then in <code>CudnnModule</code>:</p>\n<pre><code>    enabled = ContextProp(torch._C._get_cudnn_enabled, torch._C._set_cudnn_enabled)\n</code></pre>\n<p>the <a href=\"https://docs.python.org/3/library/functions.html#property\" rel=\"nofollow\">standard Python way</a> would be to define getter and setter like:</p>\n<pre><code>    @property\n    def enabled(self):\n        \"\"\"Flag to enable or disable use of CuDNN if it is available\"\"\"\n        return torch._C._get_cudnn_enabled()\n    @enabled.setter\n    def enabled(self, value):\n        check_not_flags_frozen()\n        torch._C._set_cudnn_enabled(value)\n</code></pre>\n<p>(with a new <code>check_not_flags_frozen</code> utility function to avoid the boilerplate in the properties).</p>\n<p>It is a tad longer (at least if you have more than one or two properties), but it get's rid of reinventing the wheel and plays nicely with documentation (sphinx picks up the docstring, it shows up in <code>help(cudnn.backends)</code> etc. I've not been able to get docstrings + sphinx to work with context prop.</p>\n<p>I know that the change is not necessary for the execution of the code and I can see the hesitation to change something that works, but if there isn't a technical reason for not changing it to the usual Python way, I'd think the better standardization and documentation might just be worth it.</p>", "body_text": "@ezyang: Currently we use a custom ContextProp class\nclass ContextProp(object):\n    def __init__(self, getter, setter):\n        self.getter = getter\n        self.setter = setter\n\n    def __get__(self, obj, objtype):\n        return self.getter()\n\n    def __set__(self, obj, val):\n        if not flags_frozen():\n            self.setter(val)\n        else:\n            raise RuntimeError(\"not allowed to set torch.backends.cudnn flags \"\n                               \"after disable_global_flags; please use flags() context manager instead\")\n\nand then in CudnnModule:\n    enabled = ContextProp(torch._C._get_cudnn_enabled, torch._C._set_cudnn_enabled)\n\nthe standard Python way would be to define getter and setter like:\n    @property\n    def enabled(self):\n        \"\"\"Flag to enable or disable use of CuDNN if it is available\"\"\"\n        return torch._C._get_cudnn_enabled()\n    @enabled.setter\n    def enabled(self, value):\n        check_not_flags_frozen()\n        torch._C._set_cudnn_enabled(value)\n\n(with a new check_not_flags_frozen utility function to avoid the boilerplate in the properties).\nIt is a tad longer (at least if you have more than one or two properties), but it get's rid of reinventing the wheel and plays nicely with documentation (sphinx picks up the docstring, it shows up in help(cudnn.backends) etc. I've not been able to get docstrings + sphinx to work with context prop.\nI know that the change is not necessary for the execution of the code and I can see the hesitation to change something that works, but if there isn't a technical reason for not changing it to the usual Python way, I'd think the better standardization and documentation might just be worth it.", "body": "@ezyang: Currently we use a custom `ContextProp` class\r\n```\r\nclass ContextProp(object):\r\n    def __init__(self, getter, setter):\r\n        self.getter = getter\r\n        self.setter = setter\r\n\r\n    def __get__(self, obj, objtype):\r\n        return self.getter()\r\n\r\n    def __set__(self, obj, val):\r\n        if not flags_frozen():\r\n            self.setter(val)\r\n        else:\r\n            raise RuntimeError(\"not allowed to set torch.backends.cudnn flags \"\r\n                               \"after disable_global_flags; please use flags() context manager instead\")\r\n```\r\nand then in `CudnnModule`:\r\n```\r\n    enabled = ContextProp(torch._C._get_cudnn_enabled, torch._C._set_cudnn_enabled)\r\n```\r\nthe [standard Python way](https://docs.python.org/3/library/functions.html#property) would be to define getter and setter like:\r\n```\r\n    @property\r\n    def enabled(self):\r\n        \"\"\"Flag to enable or disable use of CuDNN if it is available\"\"\"\r\n        return torch._C._get_cudnn_enabled()\r\n    @enabled.setter\r\n    def enabled(self, value):\r\n        check_not_flags_frozen()\r\n        torch._C._set_cudnn_enabled(value)\r\n```\r\n(with a new `check_not_flags_frozen` utility function to avoid the boilerplate in the properties).\r\n\r\nIt is a tad longer (at least if you have more than one or two properties), but it get's rid of reinventing the wheel and plays nicely with documentation (sphinx picks up the docstring, it shows up in `help(cudnn.backends)` etc. I've not been able to get docstrings + sphinx to work with context prop.\r\n\r\nI know that the change is not necessary for the execution of the code and I can see the hesitation to change something that works, but if there isn't a technical reason for not changing it to the usual Python way, I'd think the better standardization and documentation might just be worth it.\r\n"}