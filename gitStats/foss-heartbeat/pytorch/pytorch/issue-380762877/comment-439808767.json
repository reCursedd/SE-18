{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/439808767", "html_url": "https://github.com/pytorch/pytorch/issues/13969#issuecomment-439808767", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/13969", "id": 439808767, "node_id": "MDEyOklzc3VlQ29tbWVudDQzOTgwODc2Nw==", "user": {"login": "t-vi", "id": 20787943, "node_id": "MDQ6VXNlcjIwNzg3OTQz", "avatar_url": "https://avatars2.githubusercontent.com/u/20787943?v=4", "gravatar_id": "", "url": "https://api.github.com/users/t-vi", "html_url": "https://github.com/t-vi", "followers_url": "https://api.github.com/users/t-vi/followers", "following_url": "https://api.github.com/users/t-vi/following{/other_user}", "gists_url": "https://api.github.com/users/t-vi/gists{/gist_id}", "starred_url": "https://api.github.com/users/t-vi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/t-vi/subscriptions", "organizations_url": "https://api.github.com/users/t-vi/orgs", "repos_url": "https://api.github.com/users/t-vi/repos", "events_url": "https://api.github.com/users/t-vi/events{/privacy}", "received_events_url": "https://api.github.com/users/t-vi/received_events", "type": "User", "site_admin": false}, "created_at": "2018-11-19T08:25:38Z", "updated_at": "2018-11-19T08:25:38Z", "author_association": "CONTRIBUTOR", "body_html": "<p>So the PR now passes CI except for a timeout and I'm relatively confident it matches behaviour except the changed ONNX output (which I would be OK, if it were valid ONNX, but I'm not 100% sure that it is).<br>\nThis would eliminate <code>dispatch_type_conversion</code> in new_tensor.cpp.<br>\nI briefly looked at the two other users:</p>\n<ul>\n<li>In <code>python_variable_indexing.cpp</code> it would look like we could replace it by .to with the device of the indexed tensor.</li>\n<li>In (templated) <code>python_variable_methods.cpp</code> it is the <code>Tensor.type</code> method that uses it (personally, I think we might want to drop that eventually...). One could either do the conversion via <code>type</code> as in the tensor_new change or preferably replace <code>type_from_string</code> with TensorOptions from string or somesuch.</li>\n<li>Of course, it might be even nicer if we used TensorOptions instead of type in all of <code>tensor_new.cpp</code>...<br>\nI would prefer to leave those for a later PR though.</li>\n</ul>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=5674597\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/SsnL\">@SsnL</a> Would the PR in its present form and the next steps outlined above look reasonably to you?</p>", "body_text": "So the PR now passes CI except for a timeout and I'm relatively confident it matches behaviour except the changed ONNX output (which I would be OK, if it were valid ONNX, but I'm not 100% sure that it is).\nThis would eliminate dispatch_type_conversion in new_tensor.cpp.\nI briefly looked at the two other users:\n\nIn python_variable_indexing.cpp it would look like we could replace it by .to with the device of the indexed tensor.\nIn (templated) python_variable_methods.cpp it is the Tensor.type method that uses it (personally, I think we might want to drop that eventually...). One could either do the conversion via type as in the tensor_new change or preferably replace type_from_string with TensorOptions from string or somesuch.\nOf course, it might be even nicer if we used TensorOptions instead of type in all of tensor_new.cpp...\nI would prefer to leave those for a later PR though.\n\n@SsnL Would the PR in its present form and the next steps outlined above look reasonably to you?", "body": "So the PR now passes CI except for a timeout and I'm relatively confident it matches behaviour except the changed ONNX output (which I would be OK, if it were valid ONNX, but I'm not 100% sure that it is).\r\nThis would eliminate `dispatch_type_conversion` in new_tensor.cpp.\r\nI briefly looked at the two other users:\r\n- In `python_variable_indexing.cpp` it would look like we could replace it by .to with the device of the indexed tensor.\r\n- In (templated) `python_variable_methods.cpp` it is the `Tensor.type` method that uses it (personally, I think we might want to drop that eventually...). One could either do the conversion via `type` as in the tensor_new change or preferably replace `type_from_string` with TensorOptions from string or somesuch.\r\n- Of course, it might be even nicer if we used TensorOptions instead of type in all of `tensor_new.cpp`...\r\nI would prefer to leave those for a later PR though.\r\n\r\n@SsnL Would the PR in its present form and the next steps outlined above look reasonably to you?"}