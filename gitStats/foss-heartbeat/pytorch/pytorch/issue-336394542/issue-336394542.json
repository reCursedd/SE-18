{"url": "https://api.github.com/repos/pytorch/pytorch/issues/8965", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/8965/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/8965/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/8965/events", "html_url": "https://github.com/pytorch/pytorch/pull/8965", "id": 336394542, "node_id": "MDExOlB1bGxSZXF1ZXN0MTk3ODU5MjU0", "number": 8965, "title": "[wip] Speed up permute and expand cases in as_strided_backward", "user": {"login": "SsnL", "id": 5674597, "node_id": "MDQ6VXNlcjU2NzQ1OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5674597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SsnL", "html_url": "https://github.com/SsnL", "followers_url": "https://api.github.com/users/SsnL/followers", "following_url": "https://api.github.com/users/SsnL/following{/other_user}", "gists_url": "https://api.github.com/users/SsnL/gists{/gist_id}", "starred_url": "https://api.github.com/users/SsnL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SsnL/subscriptions", "organizations_url": "https://api.github.com/users/SsnL/orgs", "repos_url": "https://api.github.com/users/SsnL/repos", "events_url": "https://api.github.com/users/SsnL/events{/privacy}", "received_events_url": "https://api.github.com/users/SsnL/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-06-27T21:31:07Z", "updated_at": "2018-11-23T15:54:28Z", "closed_at": null, "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/8965", "html_url": "https://github.com/pytorch/pytorch/pull/8965", "diff_url": "https://github.com/pytorch/pytorch/pull/8965.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/8965.patch"}, "body_html": "<ol>\n<li>\n<p>Optimize for permute case: since we sort the strides, we can check if the size &amp; strides match via some permutation (assuming that strides are unique).</p>\n</li>\n<li>\n<p>Optimize for expand case:</p>\n<ol>\n<li>expanded input: expanding dim <code>i</code> to <code>size[i]</code> is just multiplying the #times an address is referred to in input by <code>size[i]</code>. So we can just divide gradient by <code>\\prod_{expanded dim i} inp_size[i]</code>.</li>\n<li>expanded output: using a single <code>sum</code> over multiple dimensions, rather than doing a <code>sum</code> for each one. (same for <code>squeeze</code>).</li>\n</ol>\n</li>\n</ol>\n<p>I added a test that asserts combinations of permute, (un)squeeze, expand, and transpose won't allocate the large storage-like tensor. Although it tests the internal behavior of <code>as_strided_backward</code> and will need to be modified if further optimizations are done in other cases, I can't find better ways to test that we are actually not copying but only returning a view of the gradient.</p>", "body_text": "Optimize for permute case: since we sort the strides, we can check if the size & strides match via some permutation (assuming that strides are unique).\n\n\nOptimize for expand case:\n\nexpanded input: expanding dim i to size[i] is just multiplying the #times an address is referred to in input by size[i]. So we can just divide gradient by \\prod_{expanded dim i} inp_size[i].\nexpanded output: using a single sum over multiple dimensions, rather than doing a sum for each one. (same for squeeze).\n\n\n\nI added a test that asserts combinations of permute, (un)squeeze, expand, and transpose won't allocate the large storage-like tensor. Although it tests the internal behavior of as_strided_backward and will need to be modified if further optimizations are done in other cases, I can't find better ways to test that we are actually not copying but only returning a view of the gradient.", "body": "1. Optimize for permute case: since we sort the strides, we can check if the size & strides match via some permutation (assuming that strides are unique).\r\n2. Optimize for expand case:\r\n\r\n    1. expanded input: expanding dim `i` to `size[i]` is just multiplying the #times an address is referred to in input by `size[i]`. So we can just divide gradient by `\\prod_{expanded dim i} inp_size[i]`.\r\n    2. expanded output: using a single `sum` over multiple dimensions, rather than doing a `sum` for each one. (same for `squeeze`).\r\n\r\nI added a test that asserts combinations of permute, (un)squeeze, expand, and transpose won't allocate the large storage-like tensor. Although it tests the internal behavior of `as_strided_backward` and will need to be modified if further optimizations are done in other cases, I can't find better ways to test that we are actually not copying but only returning a view of the gradient."}