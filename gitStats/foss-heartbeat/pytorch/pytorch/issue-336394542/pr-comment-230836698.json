{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/230836698", "pull_request_review_id": 171664966, "id": 230836698, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMDgzNjY5OA==", "diff_hunk": "@@ -972,22 +972,49 @@ Tensor softplus_double_backward(const Tensor & grad, const Tensor & input, Scala\n //\n // Finally, we note that these general operations are expensive, so we apply the\n // following optimizations:\n-//   Add step (0): For all output dimension `d` with output stride 0, sum the\n-//                 gradients along dimension `d` (don't keepdim), and remove\n-//                 dimension `d` from output size and stride.\n-//                 (An optimization for \"expand\" cases so we may avoid step (3))\n-//  Only apply step (3) when input tensor has overlapping memory.\n+//   Step (3): only apply the procedure outlined above when input tensor has\n+//             overlapping memory.\n+//   Add step (0):\n+//     (a): [optimize for \"expand\" cases so we may avoid index_add in step (2)]\n+//          For all output dimension `d` with output stride 0, sum the gradients\n+//          along dimension `d` (don't keepdim), and remove dimension `d` from\n+//          output size and stride.\n+//     (b): [optimize for \"permute\" (and \"transpose\") cases so we may avoid\n+//           creating \"storage\" tensor]\n+//          (i):  Sort the strides of input and output geometries. We need to do\n+//                this anyways to detech overlapping memory.", "path": "tools/autograd/templates/Functions.cpp", "position": null, "original_position": 28, "commit_id": "8a4e5819aaa4daadfea6fa88f2e611e03e36ee33", "original_commit_id": "dbe5bfde5013d74a445f1f2282d22d4764575040", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "detect", "created_at": "2018-11-05T17:17:33Z", "updated_at": "2018-11-23T15:54:17Z", "html_url": "https://github.com/pytorch/pytorch/pull/8965#discussion_r230836698", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/8965", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/230836698"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/8965#discussion_r230836698"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/8965"}}, "body_html": "<p>detect</p>", "body_text": "detect"}