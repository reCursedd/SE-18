{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/182850342", "pull_request_review_id": 113730782, "id": 182850342, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4Mjg1MDM0Mg==", "diff_hunk": "@@ -247,6 +247,76 @@ static PyObject* applyBoolGetitem(const Variable& self, bool index) {\n   }\n }\n \n+static bool canDispatchToLegacyIndexing(const Variable& self, const variable_list& vars) {\n+  // mask indexing\n+  if (vars.size() == 1 && vars[0].type().scalarType() == ScalarType::Byte && vars[0].is_same_size(self)) {\n+    return true;\n+  }\n+\n+  // single tensor indexing\n+  int num_defined_variables = 0;\n+  for (auto& variable : vars) {\n+    auto is_defined = variable.defined();\n+    num_defined_variables += is_defined;\n+    if (is_defined && (variable.dim() != 1 || variable.type().scalarType() != ScalarType::Long || variable.numel() == 0)) {\n+      num_defined_variables = -1;\n+      break;\n+    }\n+  }\n+  if (num_defined_variables == 1) {\n+    return true;\n+  }\n+  // advanced indexing\n+  return false;\n+}\n+\n+static Variable dispatch_legacy_index(const Variable& self, const variable_list& vars) {\n+  if (vars.size() == 1 && vars[0].type().scalarType() == ScalarType::Byte && vars[0].is_same_size(self)) {", "path": "torch/csrc/autograd/python_variable_indexing.cpp", "position": 28, "original_position": 28, "commit_id": "ef2682f20ab8d38e1b7220aea0ccfaff4343a3d2", "original_commit_id": "ef2682f20ab8d38e1b7220aea0ccfaff4343a3d2", "user": {"login": "gchanan", "id": 3768583, "node_id": "MDQ6VXNlcjM3Njg1ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3768583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gchanan", "html_url": "https://github.com/gchanan", "followers_url": "https://api.github.com/users/gchanan/followers", "following_url": "https://api.github.com/users/gchanan/following{/other_user}", "gists_url": "https://api.github.com/users/gchanan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gchanan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gchanan/subscriptions", "organizations_url": "https://api.github.com/users/gchanan/orgs", "repos_url": "https://api.github.com/users/gchanan/repos", "events_url": "https://api.github.com/users/gchanan/events{/privacy}", "received_events_url": "https://api.github.com/users/gchanan/received_events", "type": "User", "site_admin": false}, "body": "You could also return a pair which includes the relevant dimension if the type isn't None.", "created_at": "2018-04-19T18:55:05Z", "updated_at": "2018-11-23T15:42:53Z", "html_url": "https://github.com/pytorch/pytorch/pull/6770#discussion_r182850342", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/6770", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/182850342"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/6770#discussion_r182850342"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/6770"}}, "body_html": "<p>You could also return a pair which includes the relevant dimension if the type isn't None.</p>", "body_text": "You could also return a pair which includes the relevant dimension if the type isn't None.", "in_reply_to_id": 182847691}