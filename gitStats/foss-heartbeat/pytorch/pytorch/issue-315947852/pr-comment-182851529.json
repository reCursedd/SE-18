{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/182851529", "pull_request_review_id": 113730782, "id": 182851529, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4Mjg1MTUyOQ==", "diff_hunk": "@@ -247,6 +247,76 @@ static PyObject* applyBoolGetitem(const Variable& self, bool index) {\n   }\n }\n \n+static bool canDispatchToLegacyIndexing(const Variable& self, const variable_list& vars) {\n+  // mask indexing\n+  if (vars.size() == 1 && vars[0].type().scalarType() == ScalarType::Byte && vars[0].is_same_size(self)) {\n+    return true;\n+  }\n+\n+  // single tensor indexing\n+  int num_defined_variables = 0;\n+  for (auto& variable : vars) {\n+    auto is_defined = variable.defined();\n+    num_defined_variables += is_defined;\n+    if (is_defined && (variable.dim() != 1 || variable.type().scalarType() != ScalarType::Long || variable.numel() == 0)) {\n+      num_defined_variables = -1;\n+      break;\n+    }\n+  }\n+  if (num_defined_variables == 1) {\n+    return true;\n+  }\n+  // advanced indexing\n+  return false;\n+}\n+\n+static Variable dispatch_legacy_index(const Variable& self, const variable_list& vars) {\n+  if (vars.size() == 1 && vars[0].type().scalarType() == ScalarType::Byte && vars[0].is_same_size(self)) {\n+    auto mask = vars[0];\n+    if (self.type().backend() != mask.type().backend())\n+      mask = mask.toBackend(self.type().backend());\n+    return self.masked_select(mask);\n+  }\n+\n+  int64_t index_dim = -1;\n+  for (size_t i = 0; i < vars.size(); i++) {\n+    if (vars[i].defined()) {\n+      index_dim = i;\n+      break;\n+    }\n+  }\n+  auto index = vars[index_dim];\n+  if (self.type().backend() != index.type().backend())\n+    index = index.toBackend(self.type().backend());\n+  return self.index_select(index_dim, index);\n+}\n+\n+static Variable dispatch_legacy_index_put(Variable& self, const variable_list& vars, const Variable& value) {\n+  auto value_ = value;\n+  if (self.type().backend() != value_.type().backend())\n+    value_ = value_.toBackend(self.type().backend());", "path": "torch/csrc/autograd/python_variable_indexing.cpp", "position": 51, "original_position": 51, "commit_id": "ef2682f20ab8d38e1b7220aea0ccfaff4343a3d2", "original_commit_id": "ef2682f20ab8d38e1b7220aea0ccfaff4343a3d2", "user": {"login": "gchanan", "id": 3768583, "node_id": "MDQ6VXNlcjM3Njg1ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3768583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gchanan", "html_url": "https://github.com/gchanan", "followers_url": "https://api.github.com/users/gchanan/followers", "following_url": "https://api.github.com/users/gchanan/following{/other_user}", "gists_url": "https://api.github.com/users/gchanan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gchanan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gchanan/subscriptions", "organizations_url": "https://api.github.com/users/gchanan/orgs", "repos_url": "https://api.github.com/users/gchanan/repos", "events_url": "https://api.github.com/users/gchanan/events{/privacy}", "received_events_url": "https://api.github.com/users/gchanan/received_events", "type": "User", "site_admin": false}, "body": "this is inconsistent with the non-legacy case, e.g. today:\r\n>>> a[idx]=torch.tensor(8).cuda()\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\nRuntimeError: Expected object of type torch.cuda.FloatTensor but found type torch.cuda.LongTensor for argument #3 'source'", "created_at": "2018-04-19T18:58:58Z", "updated_at": "2018-11-23T15:42:53Z", "html_url": "https://github.com/pytorch/pytorch/pull/6770#discussion_r182851529", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/6770", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/182851529"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/6770#discussion_r182851529"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/6770"}}, "body_html": "<p>this is inconsistent with the non-legacy case, e.g. today:</p>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>a[idx]=torch.tensor(8).cuda()<br>\nTraceback (most recent call last):<br>\nFile \"\", line 1, in <br>\nRuntimeError: Expected object of type torch.cuda.FloatTensor but found type torch.cuda.LongTensor for argument <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"171485123\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/3\" data-hovercard-type=\"issue\" data-hovercard-url=\"/pytorch/pytorch/issues/3/hovercard\" href=\"https://github.com/pytorch/pytorch/issues/3\">#3</a> 'source'</p>\n</blockquote>\n</blockquote>\n</blockquote>", "body_text": "this is inconsistent with the non-legacy case, e.g. today:\n\n\n\na[idx]=torch.tensor(8).cuda()\nTraceback (most recent call last):\nFile \"\", line 1, in \nRuntimeError: Expected object of type torch.cuda.FloatTensor but found type torch.cuda.LongTensor for argument #3 'source'"}