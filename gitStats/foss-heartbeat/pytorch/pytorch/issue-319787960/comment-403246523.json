{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/403246523", "html_url": "https://github.com/pytorch/pytorch/issues/7228#issuecomment-403246523", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/7228", "id": 403246523, "node_id": "MDEyOklzc3VlQ29tbWVudDQwMzI0NjUyMw==", "user": {"login": "vishwakftw", "id": 23639302, "node_id": "MDQ6VXNlcjIzNjM5MzAy", "avatar_url": "https://avatars2.githubusercontent.com/u/23639302?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vishwakftw", "html_url": "https://github.com/vishwakftw", "followers_url": "https://api.github.com/users/vishwakftw/followers", "following_url": "https://api.github.com/users/vishwakftw/following{/other_user}", "gists_url": "https://api.github.com/users/vishwakftw/gists{/gist_id}", "starred_url": "https://api.github.com/users/vishwakftw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vishwakftw/subscriptions", "organizations_url": "https://api.github.com/users/vishwakftw/orgs", "repos_url": "https://api.github.com/users/vishwakftw/repos", "events_url": "https://api.github.com/users/vishwakftw/events{/privacy}", "received_events_url": "https://api.github.com/users/vishwakftw/received_events", "type": "User", "site_admin": false}, "created_at": "2018-07-07T22:21:18Z", "updated_at": "2018-07-07T22:21:18Z", "author_association": "CONTRIBUTOR", "body_html": "<p>I have an implementation of the hash ready, but even this seems non-deterministic within the same process. The logic allows for as many CUDA devices as possible, and 2 CPU indices:</p>\n<pre><code>if Device::Type::CPU then\n  return index\nelse\n  return index + 2 (since CPU indices are either -1 or 0.)\n</code></pre>\n<p>Do you have any idea why this might be happening?</p>", "body_text": "I have an implementation of the hash ready, but even this seems non-deterministic within the same process. The logic allows for as many CUDA devices as possible, and 2 CPU indices:\nif Device::Type::CPU then\n  return index\nelse\n  return index + 2 (since CPU indices are either -1 or 0.)\n\nDo you have any idea why this might be happening?", "body": "I have an implementation of the hash ready, but even this seems non-deterministic within the same process. The logic allows for as many CUDA devices as possible, and 2 CPU indices:\r\n```\r\nif Device::Type::CPU then\r\n  return index\r\nelse\r\n  return index + 2 (since CPU indices are either -1 or 0.)\r\n```\r\nDo you have any idea why this might be happening?"}