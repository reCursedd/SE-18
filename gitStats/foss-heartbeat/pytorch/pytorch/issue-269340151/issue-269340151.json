{"url": "https://api.github.com/repos/pytorch/pytorch/issues/3343", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/3343/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/3343/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/3343/events", "html_url": "https://github.com/pytorch/pytorch/issues/3343", "id": 269340151, "node_id": "MDU6SXNzdWUyNjkzNDAxNTE=", "number": 3343, "title": "Sequential and ModuleList call add_module() with integer keys", "user": {"login": "ozancaglayan", "id": 330946, "node_id": "MDQ6VXNlcjMzMDk0Ng==", "avatar_url": "https://avatars0.githubusercontent.com/u/330946?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ozancaglayan", "html_url": "https://github.com/ozancaglayan", "followers_url": "https://api.github.com/users/ozancaglayan/followers", "following_url": "https://api.github.com/users/ozancaglayan/following{/other_user}", "gists_url": "https://api.github.com/users/ozancaglayan/gists{/gist_id}", "starred_url": "https://api.github.com/users/ozancaglayan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ozancaglayan/subscriptions", "organizations_url": "https://api.github.com/users/ozancaglayan/orgs", "repos_url": "https://api.github.com/users/ozancaglayan/repos", "events_url": "https://api.github.com/users/ozancaglayan/events{/privacy}", "received_events_url": "https://api.github.com/users/ozancaglayan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "SsnL", "id": 5674597, "node_id": "MDQ6VXNlcjU2NzQ1OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5674597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SsnL", "html_url": "https://github.com/SsnL", "followers_url": "https://api.github.com/users/SsnL/followers", "following_url": "https://api.github.com/users/SsnL/following{/other_user}", "gists_url": "https://api.github.com/users/SsnL/gists{/gist_id}", "starred_url": "https://api.github.com/users/SsnL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SsnL/subscriptions", "organizations_url": "https://api.github.com/users/SsnL/orgs", "repos_url": "https://api.github.com/users/SsnL/repos", "events_url": "https://api.github.com/users/SsnL/events{/privacy}", "received_events_url": "https://api.github.com/users/SsnL/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "SsnL", "id": 5674597, "node_id": "MDQ6VXNlcjU2NzQ1OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5674597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SsnL", "html_url": "https://github.com/SsnL", "followers_url": "https://api.github.com/users/SsnL/followers", "following_url": "https://api.github.com/users/SsnL/following{/other_user}", "gists_url": "https://api.github.com/users/SsnL/gists{/gist_id}", "starred_url": "https://api.github.com/users/SsnL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SsnL/subscriptions", "organizations_url": "https://api.github.com/users/SsnL/orgs", "repos_url": "https://api.github.com/users/SsnL/repos", "events_url": "https://api.github.com/users/SsnL/events{/privacy}", "received_events_url": "https://api.github.com/users/SsnL/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 3, "created_at": "2017-10-28T18:43:33Z", "updated_at": "2017-12-18T07:19:56Z", "closed_at": "2017-12-18T07:19:56Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Hello,</p>\n<p>In the case where these classes sequentially append the received elements with <code>add_module(str(idx), value)</code>, the modules become inaccessible since a variable name starting with a number is forbidden in Python.</p>\n<p>I attached a patch that names the modules as <code>module_%d</code> instead of just numbers.</p>\n<div class=\"highlight highlight-source-python\"><pre>In [<span class=\"pl-c1\">17</span>]: foo <span class=\"pl-k\">=</span> nn.Sequential(<span class=\"pl-k\">*</span>[nn.Linear(<span class=\"pl-c1\">10</span>, <span class=\"pl-c1\">100</span>), nn.Linear(<span class=\"pl-c1\">100</span>, <span class=\"pl-c1\">5</span>)])\n\nIn [<span class=\"pl-c1\">18</span>]: <span class=\"pl-c1\">hasattr</span>(foo, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>0<span class=\"pl-pds\">'</span></span>)\nOut[<span class=\"pl-c1\">18</span>]: <span class=\"pl-c1\">True</span>\n\nIn [<span class=\"pl-c1\">19</span>]: foo.0\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>&lt;ipython-input-19-a18cb4ba7f54&gt;<span class=\"pl-pds\">\"</span></span>, line <span class=\"pl-c1\">1</span>\n    foo.0\n        <span class=\"pl-k\">^</span>\n<span class=\"pl-c1\">SyntaxError</span>: invalid syntax</pre></div>", "body_text": "Hello,\nIn the case where these classes sequentially append the received elements with add_module(str(idx), value), the modules become inaccessible since a variable name starting with a number is forbidden in Python.\nI attached a patch that names the modules as module_%d instead of just numbers.\nIn [17]: foo = nn.Sequential(*[nn.Linear(10, 100), nn.Linear(100, 5)])\n\nIn [18]: hasattr(foo, '0')\nOut[18]: True\n\nIn [19]: foo.0\n  File \"<ipython-input-19-a18cb4ba7f54>\", line 1\n    foo.0\n        ^\nSyntaxError: invalid syntax", "body": "Hello,\r\n\r\nIn the case where these classes sequentially append the received elements with `add_module(str(idx), value)`, the modules become inaccessible since a variable name starting with a number is forbidden in Python.\r\n\r\nI attached a patch that names the modules as `module_%d` instead of just numbers.\r\n\r\n```python\r\nIn [17]: foo = nn.Sequential(*[nn.Linear(10, 100), nn.Linear(100, 5)])\r\n\r\nIn [18]: hasattr(foo, '0')\r\nOut[18]: True\r\n\r\nIn [19]: foo.0\r\n  File \"<ipython-input-19-a18cb4ba7f54>\", line 1\r\n    foo.0\r\n        ^\r\nSyntaxError: invalid syntax\r\n```"}