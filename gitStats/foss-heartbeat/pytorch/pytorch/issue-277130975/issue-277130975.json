{"url": "https://api.github.com/repos/pytorch/pytorch/issues/3906", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/3906/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/3906/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/3906/events", "html_url": "https://github.com/pytorch/pytorch/issues/3906", "id": 277130975, "node_id": "MDU6SXNzdWUyNzcxMzA5NzU=", "number": 3906, "title": "Scoped tracing", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 693805995, "node_id": "MDU6TGFiZWw2OTM4MDU5OTU=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/onnx", "name": "onnx", "color": "e99695", "default": false}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-11-27T19:03:10Z", "updated_at": "2017-12-28T21:52:22Z", "closed_at": null, "author_association": "CONTRIBUTOR", "body_html": "<p>General strategy:</p>\n<ul>\n<li>We're going to introduce a new, special attribute, \"impl_graph\", available for all nodes, which contains a subgraph that could be inlined inplace of this node and preserve the semantics. The intent is that when we start tracing in a \"scope\", we'll create a single node, and then start tracing into the impl_graph subgraph for internal tracing that occurs. We call a node with \"impl_graph\" set an \"aggregate node\"</li>\n<li>How do we decide what graph we're tracing into? We're going to switch forward tracing to use TLS. Now the thread local state variable tracks what <code>impl_graph</code> you should be tracing into at any given point in time. In lieu of doing this properly, a global variable should suffice: <a href=\"https://github.com/pytorch/pytorch/pull/3016/files\">https://github.com/pytorch/pytorch/pull/3016/files</a> is a good place to start, as it does tracing in this way.</li>\n<li>How do we export a graph with these aggregate nodes? We first test if we know how to directly export the node. If so, we export and discard \"impl_graph\". Otherwise, we inline \"impl_graph\" and rerun the export on it.</li>\n</ul>", "body_text": "General strategy:\n\nWe're going to introduce a new, special attribute, \"impl_graph\", available for all nodes, which contains a subgraph that could be inlined inplace of this node and preserve the semantics. The intent is that when we start tracing in a \"scope\", we'll create a single node, and then start tracing into the impl_graph subgraph for internal tracing that occurs. We call a node with \"impl_graph\" set an \"aggregate node\"\nHow do we decide what graph we're tracing into? We're going to switch forward tracing to use TLS. Now the thread local state variable tracks what impl_graph you should be tracing into at any given point in time. In lieu of doing this properly, a global variable should suffice: https://github.com/pytorch/pytorch/pull/3016/files is a good place to start, as it does tracing in this way.\nHow do we export a graph with these aggregate nodes? We first test if we know how to directly export the node. If so, we export and discard \"impl_graph\". Otherwise, we inline \"impl_graph\" and rerun the export on it.", "body": "General strategy:\r\n* We're going to introduce a new, special attribute, \"impl_graph\", available for all nodes, which contains a subgraph that could be inlined inplace of this node and preserve the semantics. The intent is that when we start tracing in a \"scope\", we'll create a single node, and then start tracing into the impl_graph subgraph for internal tracing that occurs. We call a node with \"impl_graph\" set an \"aggregate node\"\r\n* How do we decide what graph we're tracing into? We're going to switch forward tracing to use TLS. Now the thread local state variable tracks what `impl_graph` you should be tracing into at any given point in time. In lieu of doing this properly, a global variable should suffice: https://github.com/pytorch/pytorch/pull/3016/files is a good place to start, as it does tracing in this way.\r\n* How do we export a graph with these aggregate nodes? We first test if we know how to directly export the node. If so, we export and discard \"impl_graph\". Otherwise, we inline \"impl_graph\" and rerun the export on it."}