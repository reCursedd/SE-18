{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/294151652", "html_url": "https://github.com/pytorch/pytorch/issues/1257#issuecomment-294151652", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/1257", "id": 294151652, "node_id": "MDEyOklzc3VlQ29tbWVudDI5NDE1MTY1Mg==", "user": {"login": "fmassa", "id": 9110200, "node_id": "MDQ6VXNlcjkxMTAyMDA=", "avatar_url": "https://avatars2.githubusercontent.com/u/9110200?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fmassa", "html_url": "https://github.com/fmassa", "followers_url": "https://api.github.com/users/fmassa/followers", "following_url": "https://api.github.com/users/fmassa/following{/other_user}", "gists_url": "https://api.github.com/users/fmassa/gists{/gist_id}", "starred_url": "https://api.github.com/users/fmassa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fmassa/subscriptions", "organizations_url": "https://api.github.com/users/fmassa/orgs", "repos_url": "https://api.github.com/users/fmassa/repos", "events_url": "https://api.github.com/users/fmassa/events{/privacy}", "received_events_url": "https://api.github.com/users/fmassa/received_events", "type": "User", "site_admin": false}, "created_at": "2017-04-14T13:14:56Z", "updated_at": "2017-04-14T14:01:55Z", "author_association": "MEMBER", "body_html": "<p>In such cases I'd say that using the functional interface is the most straightforward way, and in your forward function you can just do <code>output = F.upsample_bilinear(input_downsampled, size=input.size()[2:]</code>.</p>\n<p>Plus, in your use-case of pixelwise predictions, specifying a single upsampling factor (even if it's non-integer) is not enough to handle all input sizes, due to the rounding nature of strided convolutions / max-pooling, so I don't see much benefit in it.<br>\nAs an example, think about applying a 2x2 max pooling in a 4x4 image (outputs a 2x2 image), and now applying the same max pooling in a 5x5 image also outputs a 2x2 image, so the upsampling factor so that the output matches the output would be dependent on the input size.</p>", "body_text": "In such cases I'd say that using the functional interface is the most straightforward way, and in your forward function you can just do output = F.upsample_bilinear(input_downsampled, size=input.size()[2:].\nPlus, in your use-case of pixelwise predictions, specifying a single upsampling factor (even if it's non-integer) is not enough to handle all input sizes, due to the rounding nature of strided convolutions / max-pooling, so I don't see much benefit in it.\nAs an example, think about applying a 2x2 max pooling in a 4x4 image (outputs a 2x2 image), and now applying the same max pooling in a 5x5 image also outputs a 2x2 image, so the upsampling factor so that the output matches the output would be dependent on the input size.", "body": "In such cases I'd say that using the functional interface is the most straightforward way, and in your forward function you can just do `output = F.upsample_bilinear(input_downsampled, size=input.size()[2:]`.\r\n\r\nPlus, in your use-case of pixelwise predictions, specifying a single upsampling factor (even if it's non-integer) is not enough to handle all input sizes, due to the rounding nature of strided convolutions / max-pooling, so I don't see much benefit in it.\r\nAs an example, think about applying a 2x2 max pooling in a 4x4 image (outputs a 2x2 image), and now applying the same max pooling in a 5x5 image also outputs a 2x2 image, so the upsampling factor so that the output matches the output would be dependent on the input size."}