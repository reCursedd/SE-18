{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/342997975", "html_url": "https://github.com/pytorch/pytorch/pull/3579#issuecomment-342997975", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/3579", "id": 342997975, "node_id": "MDEyOklzc3VlQ29tbWVudDM0Mjk5Nzk3NQ==", "user": {"login": "vfdev-5", "id": 2459423, "node_id": "MDQ6VXNlcjI0NTk0MjM=", "avatar_url": "https://avatars0.githubusercontent.com/u/2459423?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vfdev-5", "html_url": "https://github.com/vfdev-5", "followers_url": "https://api.github.com/users/vfdev-5/followers", "following_url": "https://api.github.com/users/vfdev-5/following{/other_user}", "gists_url": "https://api.github.com/users/vfdev-5/gists{/gist_id}", "starred_url": "https://api.github.com/users/vfdev-5/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vfdev-5/subscriptions", "organizations_url": "https://api.github.com/users/vfdev-5/orgs", "repos_url": "https://api.github.com/users/vfdev-5/repos", "events_url": "https://api.github.com/users/vfdev-5/events{/privacy}", "received_events_url": "https://api.github.com/users/vfdev-5/received_events", "type": "User", "site_admin": false}, "created_at": "2017-11-08T23:36:35Z", "updated_at": "2017-11-09T07:32:15Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Inspecting available classes <code>SequentialSampler</code>, <code>RandomSampler</code>, <code>SubsetRandomSampler</code> and <code>WeightedRandomSampler</code> derived from <code>Sampler</code>, this inheritance looks rather artificial. I would suggest a small API modification :</p>\n<ul>\n<li>Sampler instead of being instanciated from data_source (Dataset), is instanciated from <code>num_samples</code> which is <code>len(data_source)</code></li>\n</ul>\n<pre><code>class Sampler(object):\n    def __init__(self, num_samples):\n        self.num_samples = num_samples\n    def __len__(self):\n        raise self.num_samples\n</code></pre>\n<ul>\n<li>Sequential sampler is then</li>\n</ul>\n<pre><code>class SequentialSampler(Sampler):\n    def __init__(self, data_source):\n        super(SequentialSampler, self).__init__(len(data_source))\n\n    def __iter__(self):\n        return iter(range(self.num_samples))\n</code></pre>\n<ul>\n<li>Random sampler is</li>\n</ul>\n<pre><code>class RandomSampler(Sampler):\n    def __init__(self, data_source):\n        super(RandomSampler, self).__init__(len(data_source))\n\n    def __iter__(self):\n        return iter(torch.randperm(self.num_samples).long())\n</code></pre>\n<ul>\n<li>Subset random sampler</li>\n</ul>\n<pre><code>class SubsetRandomSampler(Sampler):\n    def __init__(self, indices):\n        super(SubsetRandomSampler, self).__init__(len(indices))\n        self.indices = indices\n\n    def __iter__(self):\n        return (self.indices[i] for i in torch.randperm(self.num_samples))\n</code></pre>\n<p>and WeightedRandomSampler</p>\n<pre><code>class WeightedRandomSampler(Sampler):\n    def __init__(self, weights, num_samples, replacement=True):\n        super(WeightedRandomSampler, self).__init__(num_samples)\n        self.weights = torch.DoubleTensor(weights)\n        self.replacement = replacement\n\n    def __iter__(self):\n        return iter(torch.multinomial(self.weights, self.num_samples, self.replacement))\n</code></pre>", "body_text": "Inspecting available classes SequentialSampler, RandomSampler, SubsetRandomSampler and WeightedRandomSampler derived from Sampler, this inheritance looks rather artificial. I would suggest a small API modification :\n\nSampler instead of being instanciated from data_source (Dataset), is instanciated from num_samples which is len(data_source)\n\nclass Sampler(object):\n    def __init__(self, num_samples):\n        self.num_samples = num_samples\n    def __len__(self):\n        raise self.num_samples\n\n\nSequential sampler is then\n\nclass SequentialSampler(Sampler):\n    def __init__(self, data_source):\n        super(SequentialSampler, self).__init__(len(data_source))\n\n    def __iter__(self):\n        return iter(range(self.num_samples))\n\n\nRandom sampler is\n\nclass RandomSampler(Sampler):\n    def __init__(self, data_source):\n        super(RandomSampler, self).__init__(len(data_source))\n\n    def __iter__(self):\n        return iter(torch.randperm(self.num_samples).long())\n\n\nSubset random sampler\n\nclass SubsetRandomSampler(Sampler):\n    def __init__(self, indices):\n        super(SubsetRandomSampler, self).__init__(len(indices))\n        self.indices = indices\n\n    def __iter__(self):\n        return (self.indices[i] for i in torch.randperm(self.num_samples))\n\nand WeightedRandomSampler\nclass WeightedRandomSampler(Sampler):\n    def __init__(self, weights, num_samples, replacement=True):\n        super(WeightedRandomSampler, self).__init__(num_samples)\n        self.weights = torch.DoubleTensor(weights)\n        self.replacement = replacement\n\n    def __iter__(self):\n        return iter(torch.multinomial(self.weights, self.num_samples, self.replacement))", "body": "Inspecting available classes `SequentialSampler`, `RandomSampler`, `SubsetRandomSampler` and `WeightedRandomSampler` derived from `Sampler`, this inheritance looks rather artificial. I would suggest a small API modification :\r\n\r\n- Sampler instead of being instanciated from data_source (Dataset), is instanciated from `num_samples` which is `len(data_source)`\r\n```\r\nclass Sampler(object):\r\n    def __init__(self, num_samples):\r\n        self.num_samples = num_samples\r\n    def __len__(self):\r\n        raise self.num_samples\r\n```\r\n- Sequential sampler is then \r\n```\r\nclass SequentialSampler(Sampler):\r\n    def __init__(self, data_source):\r\n        super(SequentialSampler, self).__init__(len(data_source))\r\n\r\n    def __iter__(self):\r\n        return iter(range(self.num_samples))\r\n```\r\n- Random sampler is \r\n```\r\nclass RandomSampler(Sampler):\r\n    def __init__(self, data_source):\r\n        super(RandomSampler, self).__init__(len(data_source))\r\n\r\n    def __iter__(self):\r\n        return iter(torch.randperm(self.num_samples).long())\r\n```\r\n\r\n- Subset random sampler \r\n```\r\nclass SubsetRandomSampler(Sampler):\r\n    def __init__(self, indices):\r\n        super(SubsetRandomSampler, self).__init__(len(indices))\r\n        self.indices = indices\r\n\r\n    def __iter__(self):\r\n        return (self.indices[i] for i in torch.randperm(self.num_samples))\r\n```\r\nand WeightedRandomSampler\r\n```\r\nclass WeightedRandomSampler(Sampler):\r\n    def __init__(self, weights, num_samples, replacement=True):\r\n        super(WeightedRandomSampler, self).__init__(num_samples)\r\n        self.weights = torch.DoubleTensor(weights)\r\n        self.replacement = replacement\r\n\r\n    def __iter__(self):\r\n        return iter(torch.multinomial(self.weights, self.num_samples, self.replacement))\r\n```\r\n\r\n\r\n"}