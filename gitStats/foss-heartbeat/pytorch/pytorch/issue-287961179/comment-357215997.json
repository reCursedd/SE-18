{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/357215997", "html_url": "https://github.com/pytorch/pytorch/issues/4619#issuecomment-357215997", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/4619", "id": 357215997, "node_id": "MDEyOklzc3VlQ29tbWVudDM1NzIxNTk5Nw==", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "created_at": "2018-01-12T11:34:03Z", "updated_at": "2018-01-12T11:34:03Z", "author_association": "MEMBER", "body_html": "<p>Regarding <code>tensor.max()</code> I think a better way would be to auto-generate \"named-tuples\" in C++ (i.e. you can still do <code>std::get&lt;0&gt;(tensor.max())</code> OR <code>tensor.max().values</code> (we'd generate a struct with two fields that also supports the <code>get</code> interface)</p>", "body_text": "Regarding tensor.max() I think a better way would be to auto-generate \"named-tuples\" in C++ (i.e. you can still do std::get<0>(tensor.max()) OR tensor.max().values (we'd generate a struct with two fields that also supports the get interface)", "body": "Regarding `tensor.max()` I think a better way would be to auto-generate \"named-tuples\" in C++ (i.e. you can still do `std::get<0>(tensor.max())` OR `tensor.max().values` (we'd generate a struct with two fields that also supports the `get` interface)"}