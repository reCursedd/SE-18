{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/7146", "id": 185252142, "node_id": "MDExOlB1bGxSZXF1ZXN0MTg1MjUyMTQy", "html_url": "https://github.com/pytorch/pytorch/pull/7146", "diff_url": "https://github.com/pytorch/pytorch/pull/7146.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/7146.patch", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/7146", "number": 7146, "state": "closed", "locked": false, "title": "Support getting a shared CUDA tensor on same process", "user": {"login": "zou3519", "id": 5652049, "node_id": "MDQ6VXNlcjU2NTIwNDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/5652049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zou3519", "html_url": "https://github.com/zou3519", "followers_url": "https://api.github.com/users/zou3519/followers", "following_url": "https://api.github.com/users/zou3519/following{/other_user}", "gists_url": "https://api.github.com/users/zou3519/gists{/gist_id}", "starred_url": "https://api.github.com/users/zou3519/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zou3519/subscriptions", "organizations_url": "https://api.github.com/users/zou3519/orgs", "repos_url": "https://api.github.com/users/zou3519/repos", "events_url": "https://api.github.com/users/zou3519/events{/privacy}", "received_events_url": "https://api.github.com/users/zou3519/received_events", "type": "User", "site_admin": false}, "body": "Attempting to fix #7096 \r\n\r\nRight now, if one attempts to share a CUDA tensor and get it from a\r\nqueue from the same process it was saved in, a crash can occur.\r\n\r\nHere is some example code to demonstrate this:\r\n\r\n```\r\nimport torch\r\nimport torch.multiprocessing as mp\r\nimport numpy.random as npr\r\n\r\nmp.set_start_method('spawn')\r\n\r\nq = mp.Queue()\r\nx = torch.randn(1000).cuda()\r\ntensor = torch.ones(10).cuda()\r\n\r\nq.put(tensor)\r\nout = q.get()\r\nprint(out)\r\n```\r\n\r\nOne of two behaviors can occur:\r\n- Crashing with an error that some \"CUDA arguments are incorrect\"\r\n- The `out` tensor is valid but contains incorrect data (zeros instead\r\nof ones).\r\n\r\nOn master the first behavior occurs but I've noticed the second behavior\r\nhappen on previous commits.\r\n\r\nThis occurs because caching of the shared storages happens differently\r\ndepending on the process. Call the process where `tensor` is created\r\nthe \"originating process\". When a process grabs a tensor from the queue\r\n`q`, there are two cases:\r\n1) The process is the \"originating process\". The cached storage is the\r\ndesired storage.\r\n2) The process is not the \"originating process\". The cached storage (if\r\nit has been cached) is a storage that points to the base of the\r\nallocation. One needs to add the offset to this storage to retrieve the\r\ndesired storage.\r\n\r\nCase (2) is OK, but the code doesn't handle case (1) right now (the\r\nrebuilding_storage_cuda code attempts to add the offset to the desired\r\nstorage, leading to an incorrect storage pointer).\r\n\r\nThe fix in this PR is to handle case (1) separately from case (2) by:\r\n- Including the PID of the \"originating process\" when reducing a storage\r\n- Compare the current proc's PID to the PID of the \"originating process\"\r\n  to determine which case we're in and handle it accordingly.\r\n\r\nOne alternative solution would be to not have this discrepancy in caching\r\nstorages depending on the process, ie, \"the cached (CUDA) storage should always\r\npoint to the base of the allocation\" would be made into an invariant.\r\nI wasn't sure how to work with this because the \"originating process\"\r\nwould need to save a new storage into the cache that points to the base\r\nof the allocation. There's nothing else alive in Python-land that holds\r\na reference to this new storage so it would be freed immediately when it\r\ngoes out of scope.\r\n\r\nAnother alternative is to just ban this behavior outright, ie, \"the\r\noriginating process should never be allowed to rebuild a storage that\r\ncame from a tensor it created\". Saving the pids in the `reduce_storage`\r\nstep would then be used for error checking when the storage is being\r\nrebuilt.\r\n\r\ncc @colesbury let me know what you think\r\n", "created_at": "2018-05-01T19:15:30Z", "updated_at": "2018-11-23T15:43:32Z", "closed_at": "2018-05-02T21:44:08Z", "merged_at": null, "merge_commit_sha": "5244a68139f9f40a1a7a5917e28f0bb6342a81cf", "assignee": null, "assignees": [], "requested_reviewers": [{"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, {"login": "colesbury", "id": 655866, "node_id": "MDQ6VXNlcjY1NTg2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/655866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colesbury", "html_url": "https://github.com/colesbury", "followers_url": "https://api.github.com/users/colesbury/followers", "following_url": "https://api.github.com/users/colesbury/following{/other_user}", "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions", "organizations_url": "https://api.github.com/users/colesbury/orgs", "repos_url": "https://api.github.com/users/colesbury/repos", "events_url": "https://api.github.com/users/colesbury/events{/privacy}", "received_events_url": "https://api.github.com/users/colesbury/received_events", "type": "User", "site_admin": false}, {"login": "soumith", "id": 1310570, "node_id": "MDQ6VXNlcjEzMTA1NzA=", "avatar_url": "https://avatars0.githubusercontent.com/u/1310570?v=4", "gravatar_id": "", "url": "https://api.github.com/users/soumith", "html_url": "https://github.com/soumith", "followers_url": "https://api.github.com/users/soumith/followers", "following_url": "https://api.github.com/users/soumith/following{/other_user}", "gists_url": "https://api.github.com/users/soumith/gists{/gist_id}", "starred_url": "https://api.github.com/users/soumith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/soumith/subscriptions", "organizations_url": "https://api.github.com/users/soumith/orgs", "repos_url": "https://api.github.com/users/soumith/repos", "events_url": "https://api.github.com/users/soumith/events{/privacy}", "received_events_url": "https://api.github.com/users/soumith/received_events", "type": "User", "site_admin": false}, {"login": "gchanan", "id": 3768583, "node_id": "MDQ6VXNlcjM3Njg1ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3768583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gchanan", "html_url": "https://github.com/gchanan", "followers_url": "https://api.github.com/users/gchanan/followers", "following_url": "https://api.github.com/users/gchanan/following{/other_user}", "gists_url": "https://api.github.com/users/gchanan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gchanan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gchanan/subscriptions", "organizations_url": "https://api.github.com/users/gchanan/orgs", "repos_url": "https://api.github.com/users/gchanan/repos", "events_url": "https://api.github.com/users/gchanan/events{/privacy}", "received_events_url": "https://api.github.com/users/gchanan/received_events", "type": "User", "site_admin": false}], "requested_teams": [], "labels": [], "milestone": null, "commits_url": "https://api.github.com/repos/pytorch/pytorch/pulls/7146/commits", "review_comments_url": "https://api.github.com/repos/pytorch/pytorch/pulls/7146/comments", "review_comment_url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments{/number}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/7146/comments", "statuses_url": "https://api.github.com/repos/pytorch/pytorch/statuses/e0826233531c527ef55ef7119e750f0a311e90f2", "head": {"label": "zou3519:cuda-sharing-same-proc", "ref": "cuda-sharing-same-proc", "sha": "e0826233531c527ef55ef7119e750f0a311e90f2", "user": {"login": "zou3519", "id": 5652049, "node_id": "MDQ6VXNlcjU2NTIwNDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/5652049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zou3519", "html_url": "https://github.com/zou3519", "followers_url": "https://api.github.com/users/zou3519/followers", "following_url": "https://api.github.com/users/zou3519/following{/other_user}", "gists_url": "https://api.github.com/users/zou3519/gists{/gist_id}", "starred_url": "https://api.github.com/users/zou3519/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zou3519/subscriptions", "organizations_url": "https://api.github.com/users/zou3519/orgs", "repos_url": "https://api.github.com/users/zou3519/repos", "events_url": "https://api.github.com/users/zou3519/events{/privacy}", "received_events_url": "https://api.github.com/users/zou3519/received_events", "type": "User", "site_admin": false}, "repo": {"id": 103550456, "node_id": "MDEwOlJlcG9zaXRvcnkxMDM1NTA0NTY=", "name": "pytorch", "full_name": "zou3519/pytorch", "private": false, "owner": {"login": "zou3519", "id": 5652049, "node_id": "MDQ6VXNlcjU2NTIwNDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/5652049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zou3519", "html_url": "https://github.com/zou3519", "followers_url": "https://api.github.com/users/zou3519/followers", "following_url": "https://api.github.com/users/zou3519/following{/other_user}", "gists_url": "https://api.github.com/users/zou3519/gists{/gist_id}", "starred_url": "https://api.github.com/users/zou3519/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zou3519/subscriptions", "organizations_url": "https://api.github.com/users/zou3519/orgs", "repos_url": "https://api.github.com/users/zou3519/repos", "events_url": "https://api.github.com/users/zou3519/events{/privacy}", "received_events_url": "https://api.github.com/users/zou3519/received_events", "type": "User", "site_admin": false}, "html_url": "https://github.com/zou3519/pytorch", "description": "Tensors and Dynamic neural networks in Python  with strong GPU acceleration", "fork": true, "url": "https://api.github.com/repos/zou3519/pytorch", "forks_url": "https://api.github.com/repos/zou3519/pytorch/forks", "keys_url": "https://api.github.com/repos/zou3519/pytorch/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/zou3519/pytorch/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/zou3519/pytorch/teams", "hooks_url": "https://api.github.com/repos/zou3519/pytorch/hooks", "issue_events_url": "https://api.github.com/repos/zou3519/pytorch/issues/events{/number}", "events_url": "https://api.github.com/repos/zou3519/pytorch/events", "assignees_url": "https://api.github.com/repos/zou3519/pytorch/assignees{/user}", "branches_url": "https://api.github.com/repos/zou3519/pytorch/branches{/branch}", "tags_url": "https://api.github.com/repos/zou3519/pytorch/tags", "blobs_url": "https://api.github.com/repos/zou3519/pytorch/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/zou3519/pytorch/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/zou3519/pytorch/git/refs{/sha}", "trees_url": "https://api.github.com/repos/zou3519/pytorch/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/zou3519/pytorch/statuses/{sha}", "languages_url": "https://api.github.com/repos/zou3519/pytorch/languages", "stargazers_url": "https://api.github.com/repos/zou3519/pytorch/stargazers", "contributors_url": "https://api.github.com/repos/zou3519/pytorch/contributors", "subscribers_url": "https://api.github.com/repos/zou3519/pytorch/subscribers", "subscription_url": "https://api.github.com/repos/zou3519/pytorch/subscription", "commits_url": "https://api.github.com/repos/zou3519/pytorch/commits{/sha}", "git_commits_url": "https://api.github.com/repos/zou3519/pytorch/git/commits{/sha}", "comments_url": "https://api.github.com/repos/zou3519/pytorch/comments{/number}", "issue_comment_url": "https://api.github.com/repos/zou3519/pytorch/issues/comments{/number}", "contents_url": "https://api.github.com/repos/zou3519/pytorch/contents/{+path}", "compare_url": "https://api.github.com/repos/zou3519/pytorch/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/zou3519/pytorch/merges", "archive_url": "https://api.github.com/repos/zou3519/pytorch/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/zou3519/pytorch/downloads", "issues_url": "https://api.github.com/repos/zou3519/pytorch/issues{/number}", "pulls_url": "https://api.github.com/repos/zou3519/pytorch/pulls{/number}", "milestones_url": "https://api.github.com/repos/zou3519/pytorch/milestones{/number}", "notifications_url": "https://api.github.com/repos/zou3519/pytorch/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/zou3519/pytorch/labels{/name}", "releases_url": "https://api.github.com/repos/zou3519/pytorch/releases{/id}", "deployments_url": "https://api.github.com/repos/zou3519/pytorch/deployments", "created_at": "2017-09-14T15:36:38Z", "updated_at": "2018-11-14T15:29:03Z", "pushed_at": "2018-11-21T19:36:59Z", "git_url": "git://github.com/zou3519/pytorch.git", "ssh_url": "git@github.com:zou3519/pytorch.git", "clone_url": "https://github.com/zou3519/pytorch.git", "svn_url": "https://github.com/zou3519/pytorch", "homepage": "http://pytorch.org", "size": 123188, "stargazers_count": 0, "watchers_count": 0, "language": "C++", "has_issues": false, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 0, "mirror_url": null, "archived": false, "open_issues_count": 0, "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "forks": 0, "open_issues": 0, "watchers": 0, "default_branch": "master"}}, "base": {"label": "pytorch:master", "ref": "master", "sha": "323e3aca474911ee53327ddcd6d999498d1b4cda", "user": {"login": "pytorch", "id": 21003710, "node_id": "MDEyOk9yZ2FuaXphdGlvbjIxMDAzNzEw", "avatar_url": "https://avatars3.githubusercontent.com/u/21003710?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pytorch", "html_url": "https://github.com/pytorch", "followers_url": "https://api.github.com/users/pytorch/followers", "following_url": "https://api.github.com/users/pytorch/following{/other_user}", "gists_url": "https://api.github.com/users/pytorch/gists{/gist_id}", "starred_url": "https://api.github.com/users/pytorch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pytorch/subscriptions", "organizations_url": "https://api.github.com/users/pytorch/orgs", "repos_url": "https://api.github.com/users/pytorch/repos", "events_url": "https://api.github.com/users/pytorch/events{/privacy}", "received_events_url": "https://api.github.com/users/pytorch/received_events", "type": "Organization", "site_admin": false}, "repo": {"id": 65600975, "node_id": "MDEwOlJlcG9zaXRvcnk2NTYwMDk3NQ==", "name": "pytorch", "full_name": "pytorch/pytorch", "private": false, "owner": {"login": "pytorch", "id": 21003710, "node_id": "MDEyOk9yZ2FuaXphdGlvbjIxMDAzNzEw", "avatar_url": "https://avatars3.githubusercontent.com/u/21003710?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pytorch", "html_url": "https://github.com/pytorch", "followers_url": "https://api.github.com/users/pytorch/followers", "following_url": "https://api.github.com/users/pytorch/following{/other_user}", "gists_url": "https://api.github.com/users/pytorch/gists{/gist_id}", "starred_url": "https://api.github.com/users/pytorch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pytorch/subscriptions", "organizations_url": "https://api.github.com/users/pytorch/orgs", "repos_url": "https://api.github.com/users/pytorch/repos", "events_url": "https://api.github.com/users/pytorch/events{/privacy}", "received_events_url": "https://api.github.com/users/pytorch/received_events", "type": "Organization", "site_admin": false}, "html_url": "https://github.com/pytorch/pytorch", "description": "Tensors and Dynamic neural networks in Python  with strong GPU acceleration", "fork": false, "url": "https://api.github.com/repos/pytorch/pytorch", "forks_url": "https://api.github.com/repos/pytorch/pytorch/forks", "keys_url": "https://api.github.com/repos/pytorch/pytorch/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/pytorch/pytorch/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/pytorch/pytorch/teams", "hooks_url": "https://api.github.com/repos/pytorch/pytorch/hooks", "issue_events_url": "https://api.github.com/repos/pytorch/pytorch/issues/events{/number}", "events_url": "https://api.github.com/repos/pytorch/pytorch/events", "assignees_url": "https://api.github.com/repos/pytorch/pytorch/assignees{/user}", "branches_url": "https://api.github.com/repos/pytorch/pytorch/branches{/branch}", "tags_url": "https://api.github.com/repos/pytorch/pytorch/tags", "blobs_url": "https://api.github.com/repos/pytorch/pytorch/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/pytorch/pytorch/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/pytorch/pytorch/git/refs{/sha}", "trees_url": "https://api.github.com/repos/pytorch/pytorch/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/pytorch/pytorch/statuses/{sha}", "languages_url": "https://api.github.com/repos/pytorch/pytorch/languages", "stargazers_url": "https://api.github.com/repos/pytorch/pytorch/stargazers", "contributors_url": "https://api.github.com/repos/pytorch/pytorch/contributors", "subscribers_url": "https://api.github.com/repos/pytorch/pytorch/subscribers", "subscription_url": "https://api.github.com/repos/pytorch/pytorch/subscription", "commits_url": "https://api.github.com/repos/pytorch/pytorch/commits{/sha}", "git_commits_url": "https://api.github.com/repos/pytorch/pytorch/git/commits{/sha}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/comments{/number}", "issue_comment_url": "https://api.github.com/repos/pytorch/pytorch/issues/comments{/number}", "contents_url": "https://api.github.com/repos/pytorch/pytorch/contents/{+path}", "compare_url": "https://api.github.com/repos/pytorch/pytorch/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/pytorch/pytorch/merges", "archive_url": "https://api.github.com/repos/pytorch/pytorch/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/pytorch/pytorch/downloads", "issues_url": "https://api.github.com/repos/pytorch/pytorch/issues{/number}", "pulls_url": "https://api.github.com/repos/pytorch/pytorch/pulls{/number}", "milestones_url": "https://api.github.com/repos/pytorch/pytorch/milestones{/number}", "notifications_url": "https://api.github.com/repos/pytorch/pytorch/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/pytorch/pytorch/labels{/name}", "releases_url": "https://api.github.com/repos/pytorch/pytorch/releases{/id}", "deployments_url": "https://api.github.com/repos/pytorch/pytorch/deployments", "created_at": "2016-08-13T05:26:41Z", "updated_at": "2018-11-24T12:35:43Z", "pushed_at": "2018-11-24T12:42:01Z", "git_url": "git://github.com/pytorch/pytorch.git", "ssh_url": "git@github.com:pytorch/pytorch.git", "clone_url": "https://github.com/pytorch/pytorch.git", "svn_url": "https://github.com/pytorch/pytorch", "homepage": "http://pytorch.org", "size": 89656, "stargazers_count": 21589, "watchers_count": 21589, "language": "C++", "has_issues": true, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 5153, "mirror_url": null, "archived": false, "open_issues_count": 2196, "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "forks": 5153, "open_issues": 2196, "watchers": 21589, "default_branch": "master"}}, "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/7146"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/7146"}, "issue": {"href": "https://api.github.com/repos/pytorch/pytorch/issues/7146"}, "comments": {"href": "https://api.github.com/repos/pytorch/pytorch/issues/7146/comments"}, "review_comments": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/7146/comments"}, "review_comment": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments{/number}"}, "commits": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/7146/commits"}, "statuses": {"href": "https://api.github.com/repos/pytorch/pytorch/statuses/e0826233531c527ef55ef7119e750f0a311e90f2"}}, "author_association": "CONTRIBUTOR", "body_html": "<p>Attempting to <span class=\"issue-keyword tooltipped tooltipped-se\" aria-label=\"This pull request closes issue #7096.\">fix</span> <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"318928255\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/7096\" data-hovercard-type=\"issue\" data-hovercard-url=\"/pytorch/pytorch/issues/7096/hovercard\" href=\"https://github.com/pytorch/pytorch/issues/7096\">#7096</a></p>\n<p>Right now, if one attempts to share a CUDA tensor and get it from a<br>\nqueue from the same process it was saved in, a crash can occur.</p>\n<p>Here is some example code to demonstrate this:</p>\n<pre><code>import torch\nimport torch.multiprocessing as mp\nimport numpy.random as npr\n\nmp.set_start_method('spawn')\n\nq = mp.Queue()\nx = torch.randn(1000).cuda()\ntensor = torch.ones(10).cuda()\n\nq.put(tensor)\nout = q.get()\nprint(out)\n</code></pre>\n<p>One of two behaviors can occur:</p>\n<ul>\n<li>Crashing with an error that some \"CUDA arguments are incorrect\"</li>\n<li>The <code>out</code> tensor is valid but contains incorrect data (zeros instead<br>\nof ones).</li>\n</ul>\n<p>On master the first behavior occurs but I've noticed the second behavior<br>\nhappen on previous commits.</p>\n<p>This occurs because caching of the shared storages happens differently<br>\ndepending on the process. Call the process where <code>tensor</code> is created<br>\nthe \"originating process\". When a process grabs a tensor from the queue<br>\n<code>q</code>, there are two cases:</p>\n<ol>\n<li>The process is the \"originating process\". The cached storage is the<br>\ndesired storage.</li>\n<li>The process is not the \"originating process\". The cached storage (if<br>\nit has been cached) is a storage that points to the base of the<br>\nallocation. One needs to add the offset to this storage to retrieve the<br>\ndesired storage.</li>\n</ol>\n<p>Case (2) is OK, but the code doesn't handle case (1) right now (the<br>\nrebuilding_storage_cuda code attempts to add the offset to the desired<br>\nstorage, leading to an incorrect storage pointer).</p>\n<p>The fix in this PR is to handle case (1) separately from case (2) by:</p>\n<ul>\n<li>Including the PID of the \"originating process\" when reducing a storage</li>\n<li>Compare the current proc's PID to the PID of the \"originating process\"<br>\nto determine which case we're in and handle it accordingly.</li>\n</ul>\n<p>One alternative solution would be to not have this discrepancy in caching<br>\nstorages depending on the process, ie, \"the cached (CUDA) storage should always<br>\npoint to the base of the allocation\" would be made into an invariant.<br>\nI wasn't sure how to work with this because the \"originating process\"<br>\nwould need to save a new storage into the cache that points to the base<br>\nof the allocation. There's nothing else alive in Python-land that holds<br>\na reference to this new storage so it would be freed immediately when it<br>\ngoes out of scope.</p>\n<p>Another alternative is to just ban this behavior outright, ie, \"the<br>\noriginating process should never be allowed to rebuild a storage that<br>\ncame from a tensor it created\". Saving the pids in the <code>reduce_storage</code><br>\nstep would then be used for error checking when the storage is being<br>\nrebuilt.</p>\n<p>cc <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=655866\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/colesbury\">@colesbury</a> let me know what you think</p>", "body_text": "Attempting to fix #7096\nRight now, if one attempts to share a CUDA tensor and get it from a\nqueue from the same process it was saved in, a crash can occur.\nHere is some example code to demonstrate this:\nimport torch\nimport torch.multiprocessing as mp\nimport numpy.random as npr\n\nmp.set_start_method('spawn')\n\nq = mp.Queue()\nx = torch.randn(1000).cuda()\ntensor = torch.ones(10).cuda()\n\nq.put(tensor)\nout = q.get()\nprint(out)\n\nOne of two behaviors can occur:\n\nCrashing with an error that some \"CUDA arguments are incorrect\"\nThe out tensor is valid but contains incorrect data (zeros instead\nof ones).\n\nOn master the first behavior occurs but I've noticed the second behavior\nhappen on previous commits.\nThis occurs because caching of the shared storages happens differently\ndepending on the process. Call the process where tensor is created\nthe \"originating process\". When a process grabs a tensor from the queue\nq, there are two cases:\n\nThe process is the \"originating process\". The cached storage is the\ndesired storage.\nThe process is not the \"originating process\". The cached storage (if\nit has been cached) is a storage that points to the base of the\nallocation. One needs to add the offset to this storage to retrieve the\ndesired storage.\n\nCase (2) is OK, but the code doesn't handle case (1) right now (the\nrebuilding_storage_cuda code attempts to add the offset to the desired\nstorage, leading to an incorrect storage pointer).\nThe fix in this PR is to handle case (1) separately from case (2) by:\n\nIncluding the PID of the \"originating process\" when reducing a storage\nCompare the current proc's PID to the PID of the \"originating process\"\nto determine which case we're in and handle it accordingly.\n\nOne alternative solution would be to not have this discrepancy in caching\nstorages depending on the process, ie, \"the cached (CUDA) storage should always\npoint to the base of the allocation\" would be made into an invariant.\nI wasn't sure how to work with this because the \"originating process\"\nwould need to save a new storage into the cache that points to the base\nof the allocation. There's nothing else alive in Python-land that holds\na reference to this new storage so it would be freed immediately when it\ngoes out of scope.\nAnother alternative is to just ban this behavior outright, ie, \"the\noriginating process should never be allowed to rebuild a storage that\ncame from a tensor it created\". Saving the pids in the reduce_storage\nstep would then be used for error checking when the storage is being\nrebuilt.\ncc @colesbury let me know what you think", "merged": false, "mergeable": null, "rebaseable": null, "mergeable_state": "unknown", "merged_by": null, "comments": 5, "review_comments": 2, "maintainer_can_modify": false, "commits": 1, "additions": 34, "deletions": 8, "changed_files": 2}