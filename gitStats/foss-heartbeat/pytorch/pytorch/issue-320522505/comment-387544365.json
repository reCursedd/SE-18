{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/387544365", "html_url": "https://github.com/pytorch/pytorch/issues/7320#issuecomment-387544365", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/7320", "id": 387544365, "node_id": "MDEyOklzc3VlQ29tbWVudDM4NzU0NDM2NQ==", "user": {"login": "colesbury", "id": 655866, "node_id": "MDQ6VXNlcjY1NTg2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/655866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colesbury", "html_url": "https://github.com/colesbury", "followers_url": "https://api.github.com/users/colesbury/followers", "following_url": "https://api.github.com/users/colesbury/following{/other_user}", "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions", "organizations_url": "https://api.github.com/users/colesbury/orgs", "repos_url": "https://api.github.com/users/colesbury/repos", "events_url": "https://api.github.com/users/colesbury/events{/privacy}", "received_events_url": "https://api.github.com/users/colesbury/received_events", "type": "User", "site_admin": false}, "created_at": "2018-05-08T21:13:46Z", "updated_at": "2018-05-08T21:13:46Z", "author_association": "MEMBER", "body_html": "<p>The problem is the <code>THCRandom_getGenerator</code> call :</p>\n<p><div class=\"border rounded-1 my-2\">\n  <div class=\"f6 px-3 py-2 lh-condensed border-bottom bg-gray-light\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/pytorch/pytorch/blob/71626491c40c86eb1ee410e695c467486084144c/aten/src/ATen/CUDAGenerator.cpp#L17-L23\">pytorch/aten/src/ATen/CUDAGenerator.cpp</a>\n    </p>\n    <p class=\"mb-0 text-gray-light\">\n        Lines 17 to 23\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/pytorch/pytorch/commit/71626491c40c86eb1ee410e695c467486084144c\">7162649</a>\n    </p>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L17\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"17\"></td>\n          <td id=\"LC17\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-en\">CUDAGenerator::CUDAGenerator</span>(Context * context_) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L18\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"18\"></td>\n          <td id=\"LC18\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   : context(context_) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L19\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"19\"></td>\n          <td id=\"LC19\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> { </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L20\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"20\"></td>\n          <td id=\"LC20\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   <span class=\"pl-c\"><span class=\"pl-c\">//</span> there's no reason to call THCRandom_init, because it is called</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L21\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"21\"></td>\n          <td id=\"LC21\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   <span class=\"pl-c\"><span class=\"pl-c\">//</span> during THCudaInit, which is called before this initializer</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L22\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"22\"></td>\n          <td id=\"LC22\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   generator = <span class=\"pl-c1\">THCRandom_getGenerator</span>(context-&gt;<span class=\"pl-smi\">thc_state</span>); </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L23\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"23\"></td>\n          <td id=\"LC23\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> } </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n</p>\n<p>via the call chain:</p>\n<pre><code>#1  0x00007fff622869eb in at::CUDAGenerator::CUDAGenerator(at::Context*) () from /data/users/sgross/pytorch/torch/lib/libATen.so\n#2  0x00007fff62286d98 in at::Context::doInitCUDA() () from /data/users/sgross/pytorch/torch/lib/libATen.so\n</code></pre>\n<p>That call looks incorrect: the <code>THCGenerator*</code> is per-device but we have one global default  <code>CUDAGenerator</code>. It's also not really used, since the actual THC bindings look like:</p>\n<pre><code>    auto generator_ = check_generator&lt;CUDAGenerator&gt;(generator, &amp;context-&gt;defaultGenerator(backend()));\n    (void) generator_; //silence unused warning\n</code></pre>", "body_text": "The problem is the THCRandom_getGenerator call :\n\n  \n    \n      pytorch/aten/src/ATen/CUDAGenerator.cpp\n    \n    \n        Lines 17 to 23\n      in\n      7162649\n    \n    \n    \n    \n\n        \n          \n           CUDAGenerator::CUDAGenerator(Context * context_) \n        \n\n        \n          \n             : context(context_) \n        \n\n        \n          \n           { \n        \n\n        \n          \n             // there's no reason to call THCRandom_init, because it is called \n        \n\n        \n          \n             // during THCudaInit, which is called before this initializer \n        \n\n        \n          \n             generator = THCRandom_getGenerator(context->thc_state); \n        \n\n        \n          \n           } \n        \n    \n  \n\n\nvia the call chain:\n#1  0x00007fff622869eb in at::CUDAGenerator::CUDAGenerator(at::Context*) () from /data/users/sgross/pytorch/torch/lib/libATen.so\n#2  0x00007fff62286d98 in at::Context::doInitCUDA() () from /data/users/sgross/pytorch/torch/lib/libATen.so\n\nThat call looks incorrect: the THCGenerator* is per-device but we have one global default  CUDAGenerator. It's also not really used, since the actual THC bindings look like:\n    auto generator_ = check_generator<CUDAGenerator>(generator, &context->defaultGenerator(backend()));\n    (void) generator_; //silence unused warning", "body": "The problem is the `THCRandom_getGenerator` call :\r\n\r\nhttps://github.com/pytorch/pytorch/blob/71626491c40c86eb1ee410e695c467486084144c/aten/src/ATen/CUDAGenerator.cpp#L17-L23\r\n\r\nvia the call chain:\r\n\r\n```\r\n#1  0x00007fff622869eb in at::CUDAGenerator::CUDAGenerator(at::Context*) () from /data/users/sgross/pytorch/torch/lib/libATen.so\r\n#2  0x00007fff62286d98 in at::Context::doInitCUDA() () from /data/users/sgross/pytorch/torch/lib/libATen.so\r\n```\r\n\r\nThat call looks incorrect: the `THCGenerator*` is per-device but we have one global default  `CUDAGenerator`. It's also not really used, since the actual THC bindings look like:\r\n\r\n```\r\n    auto generator_ = check_generator<CUDAGenerator>(generator, &context->defaultGenerator(backend()));\r\n    (void) generator_; //silence unused warning\r\n```"}