{"url": "https://api.github.com/repos/pytorch/pytorch/issues/12117", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/12117/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/12117/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/12117/events", "html_url": "https://github.com/pytorch/pytorch/issues/12117", "id": 364209606, "node_id": "MDU6SXNzdWUzNjQyMDk2MDY=", "number": 12117, "title": "Error: Internal Compiler Error (codegen): \"there was an error in verifying the lgenfe output!\"", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-09-26T21:00:05Z", "updated_at": "2018-10-30T17:45:49Z", "closed_at": null, "author_association": "CONTRIBUTOR", "body_html": "<p>If you attempt to put <code>at::optional</code> in a struct which is used from a cu file, you may get this error:</p>\n<pre><code>Error: Internal Compiler Error (codegen): \"there was an error in verifying the lgenfe output!\"\n</code></pre>\n<p>A minimal reproduction is this program:</p>\n<pre><code>#include \"optional.h\"\n\nstruct O {\n  O() {} // required!\n  at::optional&lt;int&gt; x;\n};\n\nvoid blah() {\n  O o;\n}\n</code></pre>\n<p>compiled with <code>nvcc -c main.cu -std=c++11 --expt-relaxed-constexpr</code> (the <code>--expt-relaxed-constexpr</code> is mandatory).</p>\n<p>There is a simple workaround for this problem: <strong>explicitly initialize all optional fields in your constructor.</strong> So for example, the following code will compile successfully:</p>\n<pre><code>#include \"optional.h\"\n\nstruct O {\n  O() : x() {}\n  at::optional&lt;int&gt; x;\n};\n\nvoid blah() {\n  O o;\n}\n</code></pre>", "body_text": "If you attempt to put at::optional in a struct which is used from a cu file, you may get this error:\nError: Internal Compiler Error (codegen): \"there was an error in verifying the lgenfe output!\"\n\nA minimal reproduction is this program:\n#include \"optional.h\"\n\nstruct O {\n  O() {} // required!\n  at::optional<int> x;\n};\n\nvoid blah() {\n  O o;\n}\n\ncompiled with nvcc -c main.cu -std=c++11 --expt-relaxed-constexpr (the --expt-relaxed-constexpr is mandatory).\nThere is a simple workaround for this problem: explicitly initialize all optional fields in your constructor. So for example, the following code will compile successfully:\n#include \"optional.h\"\n\nstruct O {\n  O() : x() {}\n  at::optional<int> x;\n};\n\nvoid blah() {\n  O o;\n}", "body": "If you attempt to put `at::optional` in a struct which is used from a cu file, you may get this error:\r\n\r\n```    \r\nError: Internal Compiler Error (codegen): \"there was an error in verifying the lgenfe output!\"\r\n```\r\n\r\nA minimal reproduction is this program:\r\n\r\n```\r\n#include \"optional.h\"\r\n\r\nstruct O {\r\n  O() {} // required!\r\n  at::optional<int> x;\r\n};\r\n\r\nvoid blah() {\r\n  O o;\r\n}\r\n```\r\n\r\ncompiled with `nvcc -c main.cu -std=c++11 --expt-relaxed-constexpr` (the `--expt-relaxed-constexpr` is mandatory).\r\n\r\nThere is a simple workaround for this problem: **explicitly initialize all optional fields in your constructor.** So for example, the following code will compile successfully:\r\n\r\n```\r\n#include \"optional.h\"\r\n\r\nstruct O {\r\n  O() : x() {}\r\n  at::optional<int> x;\r\n};\r\n\r\nvoid blah() {\r\n  O o;\r\n}\r\n```"}