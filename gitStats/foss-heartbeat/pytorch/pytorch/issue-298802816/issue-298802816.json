{"url": "https://api.github.com/repos/pytorch/pytorch/issues/5323", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/5323/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/5323/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/5323/events", "html_url": "https://github.com/pytorch/pytorch/pull/5323", "id": 298802816, "node_id": "MDExOlB1bGxSZXF1ZXN0MTcwMzQ5MjE1", "number": 5323, "title": " [WIP][HACKS] Fixes for interpreter control flow + convert test cases ", "user": {"login": "jamesr66a", "id": 4685384, "node_id": "MDQ6VXNlcjQ2ODUzODQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/4685384?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamesr66a", "html_url": "https://github.com/jamesr66a", "followers_url": "https://api.github.com/users/jamesr66a/followers", "following_url": "https://api.github.com/users/jamesr66a/following{/other_user}", "gists_url": "https://api.github.com/users/jamesr66a/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamesr66a/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamesr66a/subscriptions", "organizations_url": "https://api.github.com/users/jamesr66a/orgs", "repos_url": "https://api.github.com/users/jamesr66a/repos", "events_url": "https://api.github.com/users/jamesr66a/events{/privacy}", "received_events_url": "https://api.github.com/users/jamesr66a/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-02-21T00:43:32Z", "updated_at": "2018-02-21T19:44:39Z", "closed_at": "2018-02-21T19:44:39Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/5323", "html_url": "https://github.com/pytorch/pytorch/pull/5323", "diff_url": "https://github.com/pytorch/pytorch/pull/5323.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/5323.patch"}, "body_html": "<p><em>pay attention to the top commit, the second one is <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=370202\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/zdevito\">@zdevito</a>'s control flow implementation</em></p>\n<p>Building off of <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"298064203\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/5293\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/pytorch/pytorch/pull/5293/hovercard\" href=\"https://github.com/pytorch/pytorch/pull/5293\">#5293</a>, this tries to get the existing script test cases running in the interpreter with correctness checks. In particular the following fixes had to be made:</p>\n<ol>\n<li>in <code>createConditionalJump</code> instead of directly invoking the at::Scalar constructor, use Adam's <code>tensor_as</code> function. This fixes the case where we have to pass in scalar values as nelement=1 Variables from the python frontend</li>\n<li>In the compiler, skip omitting an <code>alpha</code> attribute for a negation operation</li>\n<li>In the interpreter implementation of Constants, push onto the stack like <code>      stack.push_back(torch::autograd::make_variable(t, true));</code>. Note this is a quick fix that breaks other tests. <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=370202\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/zdevito\">@zdevito</a> we should discuss this</li>\n</ol>\n<p>Having done this, I modified the script tests to invoke the interpreter and tests for correctness. I also deleted the expect files</p>", "body_text": "pay attention to the top commit, the second one is @zdevito's control flow implementation\nBuilding off of #5293, this tries to get the existing script test cases running in the interpreter with correctness checks. In particular the following fixes had to be made:\n\nin createConditionalJump instead of directly invoking the at::Scalar constructor, use Adam's tensor_as function. This fixes the case where we have to pass in scalar values as nelement=1 Variables from the python frontend\nIn the compiler, skip omitting an alpha attribute for a negation operation\nIn the interpreter implementation of Constants, push onto the stack like       stack.push_back(torch::autograd::make_variable(t, true));. Note this is a quick fix that breaks other tests. @zdevito we should discuss this\n\nHaving done this, I modified the script tests to invoke the interpreter and tests for correctness. I also deleted the expect files", "body": "*pay attention to the top commit, the second one is @zdevito's control flow implementation*\r\n\r\nBuilding off of https://github.com/pytorch/pytorch/pull/5293, this tries to get the existing script test cases running in the interpreter with correctness checks. In particular the following fixes had to be made:\r\n\r\n1. in `createConditionalJump` instead of directly invoking the at::Scalar constructor, use Adam's `tensor_as` function. This fixes the case where we have to pass in scalar values as nelement=1 Variables from the python frontend\r\n2. In the compiler, skip omitting an `alpha` attribute for a negation operation\r\n3. In the interpreter implementation of Constants, push onto the stack like `      stack.push_back(torch::autograd::make_variable(t, true));`. Note this is a quick fix that breaks other tests. @zdevito we should discuss this\r\n\r\nHaving done this, I modified the script tests to invoke the interpreter and tests for correctness. I also deleted the expect files"}