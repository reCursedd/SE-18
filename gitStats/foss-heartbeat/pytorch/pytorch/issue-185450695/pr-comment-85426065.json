{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/85426065", "pull_request_review_id": 6143943, "id": 85426065, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg1NDI2MDY1", "diff_hunk": "@@ -14,35 +14,59 @@ int THPUtils_getCallable(PyObject *arg, PyObject **result) {\n   return 1;\n }\n \n+THLongStoragePtr THPUtils_unpackSize(PyObject *arg) {\n+  THLongStoragePtr result;\n+  if (!THPUtils_tryUnpackLongs(arg, result)) {\n+    std::string msg = \"THPUtils_unpackSize() expects a torch.Size (got '\";\n+    msg += Py_TYPE(arg)->tp_name;\n+    msg += \"')\";\n+    throw std::runtime_error(msg);\n+  }\n+  return result;\n+}\n \n-THLongStorage * THPUtils_getLongStorage(PyObject *args, int ignore_first) {\n-  Py_ssize_t length = PyTuple_Size(args);\n-  if (length < ignore_first+1)\n-    throw std::runtime_error(\"Provided \" + std::to_string(length) +\n-        \" arguments, but expected at least \" + std::to_string(ignore_first+1));\n+bool THPUtils_tryUnpackLongs(PyObject *arg, THLongStoragePtr& result) {\n+  bool tuple = PyTuple_Check(arg);\n+  bool list = PyList_Check(arg);\n+  if (tuple || list) {\n+    int nDim = tuple ? PyTuple_GET_SIZE(arg) : PyList_GET_SIZE(arg);\n+    THLongStoragePtr storage = THLongStorage_newWithSize(nDim);\n+    for (int i = 0; i != nDim; ++i) {\n+      PyObject* item = tuple ? PyTuple_GET_ITEM(arg, i) : PyList_GET_ITEM(arg, i);\n+      if (!THPUtils_checkLong(item)) {\n+        return false;\n+      }\n+      storage->data[i] = THPUtils_unpackLong(item);\n+    }\n+    result = storage.release();\n+    return true;\n+  }\n+  return false;\n+}\n+\n+bool THPUtils_tryUnpackLongVarArgs(PyObject *args, int ignore_first, THLongStoragePtr& result) {\n+  Py_ssize_t length = PyTuple_Size(args) - ignore_first;\n+  if (length < 1) {\n+    return false;\n+  }\n \n-  // Maybe there's a LongStorage\n   PyObject *first_arg = PyTuple_GET_ITEM(args, ignore_first);\n-  if (length == ignore_first+1 && THPLongStorage_Check(first_arg)) {\n-    THPLongStorage *storage = (THPLongStorage*)first_arg;\n-    THLongStorage_retain(storage->cdata);\n-    return storage->cdata;\n+  if (length == 1 && THPUtils_tryUnpackLongs(first_arg, result)) {\n+    return true;\n   }\n \n-  // If not, let's try to parse the numbers\n-  THLongStoragePtr result = THLongStorage_newWithSize(length-ignore_first);\n-  for (Py_ssize_t i = ignore_first; i < length; ++i) {\n-    PyObject *arg = PyTuple_GET_ITEM(args, i);\n-    if (!THPUtils_checkLong(arg))\n-      throw std::invalid_argument(\"Expected an int argument, but got \" +\n-          std::string(THPUtils_typename(arg)) + \"at position \" +\n-          std::to_string(i));\n-    result->data[i-ignore_first] = THPUtils_unpackLong(arg);\n+  // Try to parse the numbers\n+  result = THLongStorage_newWithSize(length);\n+  for (Py_ssize_t i = 0; i < length; ++i) {\n+    PyObject *arg = PyTuple_GET_ITEM(args, i + ignore_first);\n+    if (!THPUtils_checkLong(arg)) {", "path": "torch/csrc/utils.cpp", "position": 68, "original_position": 68, "commit_id": "de5a6404f47ba46190345635b45fc317874fb374", "original_commit_id": "485b76e81083ab62d2e626259dc904a653c96310", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "`try catch` as above\n", "created_at": "2016-10-27T20:56:58Z", "updated_at": "2018-11-23T15:31:49Z", "html_url": "https://github.com/pytorch/pytorch/pull/171#discussion_r85426065", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/171", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/85426065"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/171#discussion_r85426065"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/171"}}, "body_html": "<p><code>try catch</code> as above</p>", "body_text": "try catch as above"}