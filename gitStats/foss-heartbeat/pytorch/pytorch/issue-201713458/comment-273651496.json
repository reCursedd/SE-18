{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/273651496", "html_url": "https://github.com/pytorch/pytorch/issues/488#issuecomment-273651496", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/488", "id": 273651496, "node_id": "MDEyOklzc3VlQ29tbWVudDI3MzY1MTQ5Ng==", "user": {"login": "hughperkins", "id": 123560, "node_id": "MDQ6VXNlcjEyMzU2MA==", "avatar_url": "https://avatars2.githubusercontent.com/u/123560?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hughperkins", "html_url": "https://github.com/hughperkins", "followers_url": "https://api.github.com/users/hughperkins/followers", "following_url": "https://api.github.com/users/hughperkins/following{/other_user}", "gists_url": "https://api.github.com/users/hughperkins/gists{/gist_id}", "starred_url": "https://api.github.com/users/hughperkins/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hughperkins/subscriptions", "organizations_url": "https://api.github.com/users/hughperkins/orgs", "repos_url": "https://api.github.com/users/hughperkins/repos", "events_url": "https://api.github.com/users/hughperkins/events{/privacy}", "received_events_url": "https://api.github.com/users/hughperkins/received_events", "type": "User", "site_admin": false}, "created_at": "2017-01-19T01:03:38Z", "updated_at": "2017-05-22T07:49:10Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Porting code to OpenCL by hand is not very maintainable.  I think a more automated approach could be good.</p>\n<p>Here is a table of how I see things:</p>\n<table>\n<thead>\n<tr>\n<th>What</th>\n<th>Who</th>\n<th>Input</th>\n<th>Backend</th>\n<th>Comments</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://github.com/hughperkins/coriander\">coriander</a></td>\n<td>Me :-)</td>\n<td>NVIDIA\u00ae CUDA\u2122</td>\n<td>OpenCL 1.2</td>\n<td>Works on Mac :-) Opensource</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/GPUOpen-ProfessionalCompute-Tools/HIP\">HIP</a></td>\n<td>AMD</td>\n<td>HIP</td>\n<td>AMD</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"https://www.codeplay.com/products/computesuite/computecpp\" rel=\"nofollow\">ComputeCpp</a>\u2122</td>\n<td>Codeplay\u00ae</td>\n<td>SYCL</td>\n<td>SPIR 1.2</td>\n<td>Official Tensorflow approach to OpenCL.</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Xilinx/triSYCL\">triSYCL</a></td>\n<td>Keryell</td>\n<td>SYCL</td>\n<td>\"SPIR 2.0\"</td>\n<td>Opensource</td>\n</tr>\n<tr>\n<td><a href=\"https://www.khronos.org/opencl/\" rel=\"nofollow\">OpenCL\u2122</a> by hand</td>\n<td></td>\n<td>OpenCL</td>\n<td>OpenCL</td>\n<td>High maintenance, unportable, means forking the code ...</td>\n</tr>\n<tr>\n<td><a href=\"https://www.nvidia.com/object/cuda_home_new.html\" rel=\"nofollow\">NVIDIA\u00ae CUDA\u2122</a></td>\n<td>NVIDIA</td>\n<td>NVIDIA\u00ae CUDA\u2122</td>\n<td>CUDA/PTX/SASS</td>\n<td>Reference implementation for most/all projects</td>\n</tr>\n</tbody>\n</table>\n<p>Note: quick introduction to 'SPIR', well I will just quote <a href=\"https://www.khronos.org/spir\" rel=\"nofollow\">https://www.khronos.org/spir</a>:</p>\n<p>\"SPIR (Standard Portable Intermediate Representation) was initially developed for use by OpenCL and SPIR versions 1.2 and 2.0 were based on LLVM. SPIR has now evolved into a true cross-API standard that is fully defined by Khronos with native support for shader and kernel features \u2013 called SPIR-V.   [...]</p>\n<p>\"For developers, using SPIR-V means that kernel source code no longer has to be directly exposed, kernel load times can be accelerated and developers can choose the use of a common language front-end, improving kernel reliability and portability across multiple hardware implementations.\"</p>", "body_text": "Porting code to OpenCL by hand is not very maintainable.  I think a more automated approach could be good.\nHere is a table of how I see things:\n\n\n\nWhat\nWho\nInput\nBackend\nComments\n\n\n\n\ncoriander\nMe :-)\nNVIDIA\u00ae CUDA\u2122\nOpenCL 1.2\nWorks on Mac :-) Opensource\n\n\nHIP\nAMD\nHIP\nAMD\n\n\n\nComputeCpp\u2122\nCodeplay\u00ae\nSYCL\nSPIR 1.2\nOfficial Tensorflow approach to OpenCL.\n\n\ntriSYCL\nKeryell\nSYCL\n\"SPIR 2.0\"\nOpensource\n\n\nOpenCL\u2122 by hand\n\nOpenCL\nOpenCL\nHigh maintenance, unportable, means forking the code ...\n\n\nNVIDIA\u00ae CUDA\u2122\nNVIDIA\nNVIDIA\u00ae CUDA\u2122\nCUDA/PTX/SASS\nReference implementation for most/all projects\n\n\n\nNote: quick introduction to 'SPIR', well I will just quote https://www.khronos.org/spir:\n\"SPIR (Standard Portable Intermediate Representation) was initially developed for use by OpenCL and SPIR versions 1.2 and 2.0 were based on LLVM. SPIR has now evolved into a true cross-API standard that is fully defined by Khronos with native support for shader and kernel features \u2013 called SPIR-V.   [...]\n\"For developers, using SPIR-V means that kernel source code no longer has to be directly exposed, kernel load times can be accelerated and developers can choose the use of a common language front-end, improving kernel reliability and portability across multiple hardware implementations.\"", "body": "Porting code to OpenCL by hand is not very maintainable.  I think a more automated approach could be good.\r\n\r\nHere is a table of how I see things:\r\n\r\n| What | Who |  Input | Backend | Comments |\r\n|----|----|---|---|----|\r\n|[coriander](https://github.com/hughperkins/coriander) | Me :-) | NVIDIA\u00ae CUDA\u2122 | OpenCL 1.2 | Works on Mac :-) Opensource |\r\n| [HIP](https://github.com/GPUOpen-ProfessionalCompute-Tools/HIP) | AMD | HIP | AMD | |\r\n| [ComputeCpp](https://www.codeplay.com/products/computesuite/computecpp)\u2122 |  Codeplay\u00ae  | SYCL | SPIR 1.2 | Official Tensorflow approach to OpenCL. |\r\n| [triSYCL](https://github.com/Xilinx/triSYCL) |  Keryell | SYCL | \"SPIR 2.0\" | Opensource |\r\n| [OpenCL\u2122](https://www.khronos.org/opencl/) by hand |  | OpenCL | OpenCL | High maintenance, unportable, means forking the code ... |\r\n| [NVIDIA\u00ae CUDA\u2122](https://www.nvidia.com/object/cuda_home_new.html) |  NVIDIA   | NVIDIA\u00ae CUDA\u2122 | CUDA/PTX/SASS | Reference implementation for most/all projects |\r\n\r\nNote: quick introduction to 'SPIR', well I will just quote https://www.khronos.org/spir:\r\n\r\n\"SPIR (Standard Portable Intermediate Representation) was initially developed for use by OpenCL and SPIR versions 1.2 and 2.0 were based on LLVM. SPIR has now evolved into a true cross-API standard that is fully defined by Khronos with native support for shader and kernel features \u2013 called SPIR-V.   [...]\r\n\r\n\"For developers, using SPIR-V means that kernel source code no longer has to be directly exposed, kernel load times can be accelerated and developers can choose the use of a common language front-end, improving kernel reliability and portability across multiple hardware implementations.\""}