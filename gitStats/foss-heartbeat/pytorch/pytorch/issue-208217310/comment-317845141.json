{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/317845141", "html_url": "https://github.com/pytorch/pytorch/issues/764#issuecomment-317845141", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/764", "id": 317845141, "node_id": "MDEyOklzc3VlQ29tbWVudDMxNzg0NTE0MQ==", "user": {"login": "fmassa", "id": 9110200, "node_id": "MDQ6VXNlcjkxMTAyMDA=", "avatar_url": "https://avatars2.githubusercontent.com/u/9110200?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fmassa", "html_url": "https://github.com/fmassa", "followers_url": "https://api.github.com/users/fmassa/followers", "following_url": "https://api.github.com/users/fmassa/following{/other_user}", "gists_url": "https://api.github.com/users/fmassa/gists{/gist_id}", "starred_url": "https://api.github.com/users/fmassa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fmassa/subscriptions", "organizations_url": "https://api.github.com/users/fmassa/orgs", "repos_url": "https://api.github.com/users/fmassa/repos", "events_url": "https://api.github.com/users/fmassa/events{/privacy}", "received_events_url": "https://api.github.com/users/fmassa/received_events", "type": "User", "site_admin": false}, "created_at": "2017-07-25T19:23:57Z", "updated_at": "2017-07-25T19:23:57Z", "author_association": "MEMBER", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=4803565\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ducha-aiki\">@ducha-aiki</a> it is much more efficient to have non-contiguous tensors, as you only need to perform a swap in the sizes/strides, instead of copying the whole memory of the tensor.<br>\nThe reason why adding a <code>contiguous</code> inside <code>view</code> might not be a good idea is that we would not be guaranteed anymore that the original tensor and the viewed tensor shares the same memory address, which is supposed in the codebase atm.<br>\nNot sure which is the best approach, if we would prefer to change <code>view</code> (and maybe break existing code) or add another function which is <code>view</code>+<code>contiguous</code>, and call it something else (like <code>ravel</code> or something)</p>", "body_text": "@ducha-aiki it is much more efficient to have non-contiguous tensors, as you only need to perform a swap in the sizes/strides, instead of copying the whole memory of the tensor.\nThe reason why adding a contiguous inside view might not be a good idea is that we would not be guaranteed anymore that the original tensor and the viewed tensor shares the same memory address, which is supposed in the codebase atm.\nNot sure which is the best approach, if we would prefer to change view (and maybe break existing code) or add another function which is view+contiguous, and call it something else (like ravel or something)", "body": "@ducha-aiki it is much more efficient to have non-contiguous tensors, as you only need to perform a swap in the sizes/strides, instead of copying the whole memory of the tensor.\r\nThe reason why adding a `contiguous` inside `view` might not be a good idea is that we would not be guaranteed anymore that the original tensor and the viewed tensor shares the same memory address, which is supposed in the codebase atm.\r\nNot sure which is the best approach, if we would prefer to change `view` (and maybe break existing code) or add another function which is `view`+`contiguous`, and call it something else (like `ravel` or something)"}