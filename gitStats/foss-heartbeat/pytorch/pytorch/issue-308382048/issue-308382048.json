{"url": "https://api.github.com/repos/pytorch/pytorch/issues/5995", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/5995/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/5995/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/5995/events", "html_url": "https://github.com/pytorch/pytorch/issues/5995", "id": 308382048, "node_id": "MDU6SXNzdWUzMDgzODIwNDg=", "number": 5995, "title": "cuda Runtime error on google colab", "user": {"login": "rahul-iyer", "id": 6436620, "node_id": "MDQ6VXNlcjY0MzY2MjA=", "avatar_url": "https://avatars1.githubusercontent.com/u/6436620?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rahul-iyer", "html_url": "https://github.com/rahul-iyer", "followers_url": "https://api.github.com/users/rahul-iyer/followers", "following_url": "https://api.github.com/users/rahul-iyer/following{/other_user}", "gists_url": "https://api.github.com/users/rahul-iyer/gists{/gist_id}", "starred_url": "https://api.github.com/users/rahul-iyer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rahul-iyer/subscriptions", "organizations_url": "https://api.github.com/users/rahul-iyer/orgs", "repos_url": "https://api.github.com/users/rahul-iyer/repos", "events_url": "https://api.github.com/users/rahul-iyer/events{/privacy}", "received_events_url": "https://api.github.com/users/rahul-iyer/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-03-25T20:20:32Z", "updated_at": "2018-03-25T21:12:56Z", "closed_at": "2018-03-25T21:12:49Z", "author_association": "NONE", "body_html": "<p>This code worked yesterday and I couldn't figure out what's the problem.</p>\n<p>This is my model<br>\n`class RNNModel(nn.Module):<br>\ndef <strong>init</strong>(self, ntoken, ninp,<br>\nnhid, nlayers, bsz,<br>\ndropout=0.5):<br>\nsuper(RNNModel, self).<strong>init</strong>()<br>\nself.nhid, self.nlayers, self.bsz = nhid, nlayers, bsz<br>\nself.drop = nn.Dropout(dropout)<br>\nself.encoder = nn.Embedding(ntoken, ninp)<br>\nself.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)<br>\nself.decoder = nn.Linear(nhid, 4)<br>\nself.softmax = nn.Softmax(dim = 1)<br>\nself.init_weights()<br>\nself.hidden = self.init_hidden()<br>\ndef init_weights(self):<br>\ninitrange = 0.1<br>\nself.encoder.weight.data.uniform_(-initrange, initrange)<br>\nself.decoder.bias.data.fill_(0)<br>\nself.decoder.weight.data.uniform_(-initrange, initrange)</p>\n<pre><code>def forward(self, input):\n    emb = self.drop(self.encoder(input))\n    output, self.hidden = self.rnn(emb, self.hidden)\n    decoded = self.softmax(self.decoder(output[-1]))\n    return decoded\n\ndef init_hidden(self):\n    weight = next(self.parameters()).data\n    x = Variable(torch.zeros(self.nlayers, self.bsz, self.nhid))\n    y = Variable(torch.zeros(self.nlayers, self.bsz, self.nhid))\n    x = x.cuda()\n    y = y.cuda()\n    return (x, y)\n\ndef reset_history(self):\n    self.hidden = tuple(Variable(v.data) for v in self.hidden)`\n</code></pre>\n<p>This is what I run<br>\n<code>model = RNNModel(weight_matrix.size(0), weight_matrix.size(1), 200, 1, 32)</code></p>\n<p>Error</p>\n<p>`<br>\nRuntimeError                              Traceback (most recent call last)<br>\n in ()<br>\n1 model = RNNModel(weight_matrix.size(0),<br>\n----&gt; 2                  weight_matrix.size(1), 200, 1, 32)</p>\n<p> in <strong>init</strong>(self, ntoken, ninp, nhid, nlayers, bsz, dropout)<br>\n11         self.softmax = nn.Softmax(dim = 1)<br>\n12         self.init_weights()<br>\n---&gt; 13         self.hidden = self.init_hidden()<br>\n14<br>\n15</p>\n<p> in init_hidden(self)<br>\n33         x = Variable(torch.zeros(self.nlayers, self.bsz, self.nhid))<br>\n34         y = Variable(torch.zeros(self.nlayers, self.bsz, self.nhid))<br>\n---&gt; 35         x = x.cuda()<br>\n36         y = y.cuda()<br>\n37         return (x, y)</p>\n<p>/usr/local/lib/python3.6/dist-packages/torch/autograd/variable.py in cuda(self, device, async)<br>\n296<br>\n297     def cuda(self, device=None, async=False):<br>\n--&gt; 298         return CudaTransfer.apply(self, device, async)<br>\n299<br>\n300     def cpu(self):</p>\n<p>/usr/local/lib/python3.6/dist-packages/torch/autograd/_functions/tensor.py in forward(ctx, i, device, async)<br>\n199             return i.cuda(device, async=async)<br>\n200         else:<br>\n--&gt; 201             return i.cuda(async=async)<br>\n202<br>\n203     <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=3434126\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/staticmethod\">@staticmethod</a></p>\n<p>/usr/local/lib/python3.6/dist-packages/torch/_utils.py in <em>cuda(self, device, async)<br>\n67         else:<br>\n68             new_type = getattr(torch.cuda, self.<strong>class</strong>.<strong>name</strong>)<br>\n---&gt; 69             return new_type(self.size()).copy</em>(self, async)<br>\n70<br>\n71<br>\nRuntimeError: cuda runtime error (59) : device-side assert triggered at /pytorch/torch/lib/THC/generic/THCTensorCopy.c:20`</p>", "body_text": "This code worked yesterday and I couldn't figure out what's the problem.\nThis is my model\n`class RNNModel(nn.Module):\ndef init(self, ntoken, ninp,\nnhid, nlayers, bsz,\ndropout=0.5):\nsuper(RNNModel, self).init()\nself.nhid, self.nlayers, self.bsz = nhid, nlayers, bsz\nself.drop = nn.Dropout(dropout)\nself.encoder = nn.Embedding(ntoken, ninp)\nself.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)\nself.decoder = nn.Linear(nhid, 4)\nself.softmax = nn.Softmax(dim = 1)\nself.init_weights()\nself.hidden = self.init_hidden()\ndef init_weights(self):\ninitrange = 0.1\nself.encoder.weight.data.uniform_(-initrange, initrange)\nself.decoder.bias.data.fill_(0)\nself.decoder.weight.data.uniform_(-initrange, initrange)\ndef forward(self, input):\n    emb = self.drop(self.encoder(input))\n    output, self.hidden = self.rnn(emb, self.hidden)\n    decoded = self.softmax(self.decoder(output[-1]))\n    return decoded\n\ndef init_hidden(self):\n    weight = next(self.parameters()).data\n    x = Variable(torch.zeros(self.nlayers, self.bsz, self.nhid))\n    y = Variable(torch.zeros(self.nlayers, self.bsz, self.nhid))\n    x = x.cuda()\n    y = y.cuda()\n    return (x, y)\n\ndef reset_history(self):\n    self.hidden = tuple(Variable(v.data) for v in self.hidden)`\n\nThis is what I run\nmodel = RNNModel(weight_matrix.size(0), weight_matrix.size(1), 200, 1, 32)\nError\n`\nRuntimeError                              Traceback (most recent call last)\n in ()\n1 model = RNNModel(weight_matrix.size(0),\n----> 2                  weight_matrix.size(1), 200, 1, 32)\n in init(self, ntoken, ninp, nhid, nlayers, bsz, dropout)\n11         self.softmax = nn.Softmax(dim = 1)\n12         self.init_weights()\n---> 13         self.hidden = self.init_hidden()\n14\n15\n in init_hidden(self)\n33         x = Variable(torch.zeros(self.nlayers, self.bsz, self.nhid))\n34         y = Variable(torch.zeros(self.nlayers, self.bsz, self.nhid))\n---> 35         x = x.cuda()\n36         y = y.cuda()\n37         return (x, y)\n/usr/local/lib/python3.6/dist-packages/torch/autograd/variable.py in cuda(self, device, async)\n296\n297     def cuda(self, device=None, async=False):\n--> 298         return CudaTransfer.apply(self, device, async)\n299\n300     def cpu(self):\n/usr/local/lib/python3.6/dist-packages/torch/autograd/_functions/tensor.py in forward(ctx, i, device, async)\n199             return i.cuda(device, async=async)\n200         else:\n--> 201             return i.cuda(async=async)\n202\n203     @staticmethod\n/usr/local/lib/python3.6/dist-packages/torch/_utils.py in cuda(self, device, async)\n67         else:\n68             new_type = getattr(torch.cuda, self.class.name)\n---> 69             return new_type(self.size()).copy(self, async)\n70\n71\nRuntimeError: cuda runtime error (59) : device-side assert triggered at /pytorch/torch/lib/THC/generic/THCTensorCopy.c:20`", "body": "This code worked yesterday and I couldn't figure out what's the problem.\r\n\r\nThis is my model \r\n`class RNNModel(nn.Module):\r\n    def __init__(self, ntoken, ninp,\r\n                 nhid, nlayers, bsz,\r\n                 dropout=0.5):\r\n        super(RNNModel, self).__init__()\r\n        self.nhid, self.nlayers, self.bsz = nhid, nlayers, bsz\r\n        self.drop = nn.Dropout(dropout)\r\n        self.encoder = nn.Embedding(ntoken, ninp)\r\n        self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)\r\n        self.decoder = nn.Linear(nhid, 4)\r\n        self.softmax = nn.Softmax(dim = 1)\r\n        self.init_weights()\r\n        self.hidden = self.init_hidden()\r\n    def init_weights(self):\r\n        initrange = 0.1\r\n        self.encoder.weight.data.uniform_(-initrange, initrange)\r\n        self.decoder.bias.data.fill_(0)\r\n        self.decoder.weight.data.uniform_(-initrange, initrange)\r\n\r\n    def forward(self, input):\r\n        emb = self.drop(self.encoder(input))\r\n        output, self.hidden = self.rnn(emb, self.hidden)\r\n        decoded = self.softmax(self.decoder(output[-1]))\r\n        return decoded\r\n\r\n    def init_hidden(self):\r\n        weight = next(self.parameters()).data\r\n        x = Variable(torch.zeros(self.nlayers, self.bsz, self.nhid))\r\n        y = Variable(torch.zeros(self.nlayers, self.bsz, self.nhid))\r\n        x = x.cuda()\r\n        y = y.cuda()\r\n        return (x, y)\r\n    \r\n    def reset_history(self):\r\n        self.hidden = tuple(Variable(v.data) for v in self.hidden)`\r\n\r\nThis is what I run\r\n`model = RNNModel(weight_matrix.size(0),\r\n                 weight_matrix.size(1), 200, 1, 32)`\r\n\r\nError \r\n\r\n`\r\nRuntimeError                              Traceback (most recent call last)\r\n<ipython-input-219-1eb91912d235> in <module>()\r\n      1 model = RNNModel(weight_matrix.size(0),\r\n----> 2                  weight_matrix.size(1), 200, 1, 32)\r\n\r\n<ipython-input-217-8f7d5937ee65> in __init__(self, ntoken, ninp, nhid, nlayers, bsz, dropout)\r\n     11         self.softmax = nn.Softmax(dim = 1)\r\n     12         self.init_weights()\r\n---> 13         self.hidden = self.init_hidden()\r\n     14 \r\n     15 \r\n\r\n<ipython-input-217-8f7d5937ee65> in init_hidden(self)\r\n     33         x = Variable(torch.zeros(self.nlayers, self.bsz, self.nhid))\r\n     34         y = Variable(torch.zeros(self.nlayers, self.bsz, self.nhid))\r\n---> 35         x = x.cuda()\r\n     36         y = y.cuda()\r\n     37         return (x, y)\r\n\r\n/usr/local/lib/python3.6/dist-packages/torch/autograd/variable.py in cuda(self, device, async)\r\n    296 \r\n    297     def cuda(self, device=None, async=False):\r\n--> 298         return CudaTransfer.apply(self, device, async)\r\n    299 \r\n    300     def cpu(self):\r\n\r\n/usr/local/lib/python3.6/dist-packages/torch/autograd/_functions/tensor.py in forward(ctx, i, device, async)\r\n    199             return i.cuda(device, async=async)\r\n    200         else:\r\n--> 201             return i.cuda(async=async)\r\n    202 \r\n    203     @staticmethod\r\n\r\n/usr/local/lib/python3.6/dist-packages/torch/_utils.py in _cuda(self, device, async)\r\n     67         else:\r\n     68             new_type = getattr(torch.cuda, self.__class__.__name__)\r\n---> 69             return new_type(self.size()).copy_(self, async)\r\n     70 \r\n     71 \r\nRuntimeError: cuda runtime error (59) : device-side assert triggered at /pytorch/torch/lib/THC/generic/THCTensorCopy.c:20`"}