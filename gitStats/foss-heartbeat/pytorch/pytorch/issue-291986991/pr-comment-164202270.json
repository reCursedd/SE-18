{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/164202270", "pull_request_review_id": 91945280, "id": 164202270, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NDIwMjI3MA==", "diff_hunk": "@@ -80,3 +80,12 @@ def entropy(self):\n         return (torch.lgamma(self.concentration).sum(-1) - torch.lgamma(a0) -\n                 (k - a0) * torch.digamma(a0) -\n                 ((self.concentration - 1.0) * torch.digamma(self.concentration)).sum(-1))\n+\n+    @lazy_property\n+    def natural_params(self):\n+        V1 = Variable(self.concentration.data, requires_grad=True)\n+        return (V1, )", "path": "torch/distributions/dirichlet.py", "position": null, "original_position": 28, "commit_id": "fb1d0870e50aa868b9e94112ed29163780015770", "original_commit_id": "3344066bc4b627358f6bbd8401d652aaaf37aba7", "user": {"login": "fritzo", "id": 648532, "node_id": "MDQ6VXNlcjY0ODUzMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/648532?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fritzo", "html_url": "https://github.com/fritzo", "followers_url": "https://api.github.com/users/fritzo/followers", "following_url": "https://api.github.com/users/fritzo/following{/other_user}", "gists_url": "https://api.github.com/users/fritzo/gists{/gist_id}", "starred_url": "https://api.github.com/users/fritzo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fritzo/subscriptions", "organizations_url": "https://api.github.com/users/fritzo/orgs", "repos_url": "https://api.github.com/users/fritzo/repos", "events_url": "https://api.github.com/users/fritzo/events{/privacy}", "received_events_url": "https://api.github.com/users/fritzo/received_events", "type": "User", "site_admin": false}, "body": "Ok, if I understand correctly then we should simply fail in the following case?\r\n```py\r\ndist = Dirichlet(Variable(torch.ones(2), requires_grad=False))\r\nDirichlet.entropy(dist)          # Succeeds.\r\nExponentialFamily.entropy(dist)  # Should this succeed or fail?\r\n```\r\n@vishwakftw I think in this case we can simply add `requires_grad=True` to all the test examples? And maybe add a check in `.entropy()` and `.kl_divergence()`:\r\n```py\r\nnparams = self.natural_params\r\nif not all(p.requires_grad for p in nparams):\r\n    raise NotImplementedError(\".entropy() requires all parameters to requires_grad\")\r\n```", "created_at": "2018-01-26T19:31:30Z", "updated_at": "2018-11-23T15:38:37Z", "html_url": "https://github.com/pytorch/pytorch/pull/4876#discussion_r164202270", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4876", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/164202270"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/4876#discussion_r164202270"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4876"}}, "body_html": "<p>Ok, if I understand correctly then we should simply fail in the following case?</p>\n<div class=\"highlight highlight-source-python\"><pre>dist <span class=\"pl-k\">=</span> Dirichlet(Variable(torch.ones(<span class=\"pl-c1\">2</span>), <span class=\"pl-v\">requires_grad</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">False</span>))\nDirichlet.entropy(dist)          <span class=\"pl-c\"><span class=\"pl-c\">#</span> Succeeds.</span>\nExponentialFamily.entropy(dist)  <span class=\"pl-c\"><span class=\"pl-c\">#</span> Should this succeed or fail?</span></pre></div>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=23639302\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/vishwakftw\">@vishwakftw</a> I think in this case we can simply add <code>requires_grad=True</code> to all the test examples? And maybe add a check in <code>.entropy()</code> and <code>.kl_divergence()</code>:</p>\n<div class=\"highlight highlight-source-python\"><pre>nparams <span class=\"pl-k\">=</span> <span class=\"pl-c1\">self</span>.natural_params\n<span class=\"pl-k\">if</span> <span class=\"pl-k\">not</span> <span class=\"pl-c1\">all</span>(p.requires_grad <span class=\"pl-k\">for</span> p <span class=\"pl-k\">in</span> nparams):\n    <span class=\"pl-k\">raise</span> <span class=\"pl-c1\">NotImplementedError</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>.entropy() requires all parameters to requires_grad<span class=\"pl-pds\">\"</span></span>)</pre></div>", "body_text": "Ok, if I understand correctly then we should simply fail in the following case?\ndist = Dirichlet(Variable(torch.ones(2), requires_grad=False))\nDirichlet.entropy(dist)          # Succeeds.\nExponentialFamily.entropy(dist)  # Should this succeed or fail?\n@vishwakftw I think in this case we can simply add requires_grad=True to all the test examples? And maybe add a check in .entropy() and .kl_divergence():\nnparams = self.natural_params\nif not all(p.requires_grad for p in nparams):\n    raise NotImplementedError(\".entropy() requires all parameters to requires_grad\")", "in_reply_to_id": 164192173}