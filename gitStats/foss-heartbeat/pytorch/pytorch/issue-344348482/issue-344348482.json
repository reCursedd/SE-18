{"url": "https://api.github.com/repos/pytorch/pytorch/issues/9811", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/9811/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/9811/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/9811/events", "html_url": "https://github.com/pytorch/pytorch/issues/9811", "id": 344348482, "node_id": "MDU6SXNzdWUzNDQzNDg0ODI=", "number": 9811, "title": "DataParallel does not work with tensors of dimension 0", "user": {"login": "0phoff", "id": 11853089, "node_id": "MDQ6VXNlcjExODUzMDg5", "avatar_url": "https://avatars3.githubusercontent.com/u/11853089?v=4", "gravatar_id": "", "url": "https://api.github.com/users/0phoff", "html_url": "https://github.com/0phoff", "followers_url": "https://api.github.com/users/0phoff/followers", "following_url": "https://api.github.com/users/0phoff/following{/other_user}", "gists_url": "https://api.github.com/users/0phoff/gists{/gist_id}", "starred_url": "https://api.github.com/users/0phoff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/0phoff/subscriptions", "organizations_url": "https://api.github.com/users/0phoff/orgs", "repos_url": "https://api.github.com/users/0phoff/repos", "events_url": "https://api.github.com/users/0phoff/events{/privacy}", "received_events_url": "https://api.github.com/users/0phoff/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 15, "created_at": "2018-07-25T08:44:41Z", "updated_at": "2018-07-29T03:56:57Z", "closed_at": "2018-07-25T13:47:24Z", "author_association": "CONTRIBUTOR", "body_html": "<h2>Issue description</h2>\n<p>I have a network that return a single value, which is a dimensionless tensor as of PyTorch 0.4.0<br>\nHowever, when I wrap my model in a <code>torch.nn.DataParallel</code> for execution on multiple GPUs, it complains about not being able to gather the different tensors because they have no dimension.<br>\nimo the tensors should then be combined in a new dimension?</p>\n<p>My specific usecase, is that I have my loss functions in the models, and I managed to fix it by setting <code>reduce=False</code> in the CrossEntropyLoss. This means I do get a Tensor with a dimension, and thus DataParallel can in fact gather the different tensors. All I have to do is compute the mean of the different tensors myself.</p>\n<h2>Code example</h2>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-c\"><span class=\"pl-c\">#</span> Untested code, but this is the basically what my model does at the end</span>\n<span class=\"pl-k\">class</span> <span class=\"pl-en\">Model</span>(<span class=\"pl-e\">nn</span>.<span class=\"pl-e\">module</span>):\n  <span class=\"pl-k\">def</span> <span class=\"pl-c1\">__init__</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>):\n    <span class=\"pl-c1\">self</span>.loss <span class=\"pl-k\">=</span> torch.nn.CrossEntropyLoss()\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">forward</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>, <span class=\"pl-smi\">data</span>, <span class=\"pl-smi\">target</span>):\n    <span class=\"pl-k\">return</span> <span class=\"pl-c1\">self</span>.loss(data, target)\n\nm <span class=\"pl-k\">=</span> torch.nn.DataParallel(Model()).cuda()\n\ndata <span class=\"pl-k\">=</span> <span class=\"pl-c1\">...</span>    <span class=\"pl-c\"><span class=\"pl-c\">#</span> get tensor for data</span>\ntarget <span class=\"pl-k\">=</span> <span class=\"pl-c1\">...</span>  <span class=\"pl-c\"><span class=\"pl-c\">#</span> get tensor for target</span>\n\nm(data, target)</pre></div>\n<h2>System Info</h2>\n<p>Pytorch version : 0.4.0a0<br>\npython 3.6</p>", "body_text": "Issue description\nI have a network that return a single value, which is a dimensionless tensor as of PyTorch 0.4.0\nHowever, when I wrap my model in a torch.nn.DataParallel for execution on multiple GPUs, it complains about not being able to gather the different tensors because they have no dimension.\nimo the tensors should then be combined in a new dimension?\nMy specific usecase, is that I have my loss functions in the models, and I managed to fix it by setting reduce=False in the CrossEntropyLoss. This means I do get a Tensor with a dimension, and thus DataParallel can in fact gather the different tensors. All I have to do is compute the mean of the different tensors myself.\nCode example\n# Untested code, but this is the basically what my model does at the end\nclass Model(nn.module):\n  def __init__(self):\n    self.loss = torch.nn.CrossEntropyLoss()\n  def forward(self, data, target):\n    return self.loss(data, target)\n\nm = torch.nn.DataParallel(Model()).cuda()\n\ndata = ...    # get tensor for data\ntarget = ...  # get tensor for target\n\nm(data, target)\nSystem Info\nPytorch version : 0.4.0a0\npython 3.6", "body": "## Issue description\r\nI have a network that return a single value, which is a dimensionless tensor as of PyTorch 0.4.0\r\nHowever, when I wrap my model in a ``torch.nn.DataParallel`` for execution on multiple GPUs, it complains about not being able to gather the different tensors because they have no dimension.  \r\nimo the tensors should then be combined in a new dimension?  \r\n\r\nMy specific usecase, is that I have my loss functions in the models, and I managed to fix it by setting ``reduce=False`` in the CrossEntropyLoss. This means I do get a Tensor with a dimension, and thus DataParallel can in fact gather the different tensors. All I have to do is compute the mean of the different tensors myself.\r\n\r\n## Code example\r\n```python\r\n# Untested code, but this is the basically what my model does at the end\r\nclass Model(nn.module):\r\n  def __init__(self):\r\n    self.loss = torch.nn.CrossEntropyLoss()\r\n  def forward(self, data, target):\r\n    return self.loss(data, target)\r\n\r\nm = torch.nn.DataParallel(Model()).cuda()\r\n\r\ndata = ...    # get tensor for data\r\ntarget = ...  # get tensor for target\r\n\r\nm(data, target)\r\n```\r\n\r\n## System Info\r\nPytorch version : 0.4.0a0\r\npython 3.6"}