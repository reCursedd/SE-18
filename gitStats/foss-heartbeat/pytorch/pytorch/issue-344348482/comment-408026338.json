{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/408026338", "html_url": "https://github.com/pytorch/pytorch/issues/9811#issuecomment-408026338", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/9811", "id": 408026338, "node_id": "MDEyOklzc3VlQ29tbWVudDQwODAyNjMzOA==", "user": {"login": "sharpsy", "id": 7761488, "node_id": "MDQ6VXNlcjc3NjE0ODg=", "avatar_url": "https://avatars2.githubusercontent.com/u/7761488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sharpsy", "html_url": "https://github.com/sharpsy", "followers_url": "https://api.github.com/users/sharpsy/followers", "following_url": "https://api.github.com/users/sharpsy/following{/other_user}", "gists_url": "https://api.github.com/users/sharpsy/gists{/gist_id}", "starred_url": "https://api.github.com/users/sharpsy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sharpsy/subscriptions", "organizations_url": "https://api.github.com/users/sharpsy/orgs", "repos_url": "https://api.github.com/users/sharpsy/repos", "events_url": "https://api.github.com/users/sharpsy/events{/privacy}", "received_events_url": "https://api.github.com/users/sharpsy/received_events", "type": "User", "site_admin": false}, "created_at": "2018-07-26T08:52:08Z", "updated_at": "2018-07-26T08:52:08Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=11853089\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/0phoff\">@0phoff</a> , just to add an idea to your use case that minimizes the amount of data transfered between GPUs. You can use <code>size_average=False, reduce=True</code> as arguments. Losses on each GPU will be summed, but not divided by the batch-size-on-GPU. You then sum all parallel losses and divide by the size of the whole batch.</p>", "body_text": "@0phoff , just to add an idea to your use case that minimizes the amount of data transfered between GPUs. You can use size_average=False, reduce=True as arguments. Losses on each GPU will be summed, but not divided by the batch-size-on-GPU. You then sum all parallel losses and divide by the size of the whole batch.", "body": "@0phoff , just to add an idea to your use case that minimizes the amount of data transfered between GPUs. You can use `size_average=False, reduce=True` as arguments. Losses on each GPU will be summed, but not divided by the batch-size-on-GPU. You then sum all parallel losses and divide by the size of the whole batch."}