{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/176125307", "pull_request_review_id": 105772978, "id": 176125307, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NjEyNTMwNw==", "diff_hunk": "@@ -57,13 +57,73 @@ namespace torch { namespace jit {\n // provide a loop counter\n void desugarTripCounts(Block * b) {\n   for(auto n : b->nodes()) {\n+\n     if(n->kind() == prim::Loop) {\n+      auto g = n->owningGraph();\n+      auto body_block = n->blocks()[0];\n+\n+      Value* block_trip_count_input = body_block->addInput();\n+      body_block->inputs()[0]->replaceAllUsesWith(block_trip_count_input);\n+      body_block->eraseInput(0);\n+      n->addOutput();\n+\n+      Value* max_trip_count_value = n->input(0);\n+      // First, replace the max trip count input with the initial trip count.\n+      // This means we can treat trip count as a loop-carried dependency and\n+      // simply emit an increment in the body of the loop\n+      {\n+        WithInsertPoint guard(n);\n+        Value* initial_trip_count =\n+            g->insertNode(g->createConstant(at::zeros(at::CPU(at::kLong), {1})))\n+                ->output();\n+        // Also move trip count to the end because we need to mutate it after\n+        // this transformation and it's easier to append an output in the block\n+        // than it is to prepend.\n+        n->removeInput(0);\n+        n->addInput(initial_trip_count);\n+\n+        // Emit initial comparison -- initial_trip_count < max_trip_count\n+        Value* initial_comparison_value =\n+            g->insertNode(\n+                 g->create(aten::lt, {initial_trip_count, max_trip_count_value}, 1))\n+                ->output();\n+\n+        // Replace initial condition with logical and of trip count and\n+        // initial condition\n+\n+        Value* new_cond =\n+            g->insertNode(g->create(\n+                aten::__and__, {initial_comparison_value, n->input(0)}, 1))\n+             ->output();\n+        n->replaceInput(0, new_cond);\n+      }\n \n-      // remove the trip count from Loop inputs, we don't support it yet\n-      n->removeInput(0);\n-      JIT_ASSERT(n->blocks()[0]->inputs()[0]->uses().size() == 0 &&\n-        \"NYI - use of trip count variable\");\n-      n->blocks()[0]->eraseInput(0);\n+      {\n+        WithInsertPoint guard(body_block);\n+        // Trip count is now a loop carried dependency. We emit an op to\n+        // incrmeent the trip count at the end of the body. Then, emit the same\n+        // conjunctive stopping condition as above.\n+        Value* const_one =\n+            g->insertNode(g->createConstant(at::ones(at::CPU(at::kLong), {1})))\n+                ->output();\n+\n+        Value* inc_trip_count =\n+            g->insertNode(g->create(\n+                    aten::add, {block_trip_count_input, const_one, const_one}, 1))\n+             ->output();\n+        body_block->registerOutput(inc_trip_count);\n+\n+        Value* body_comparison =", "path": "torch/csrc/jit/interpreter.cpp", "position": null, "original_position": 65, "commit_id": "556f5b6c02cd01de9dcd253b89b406fce1e9f9dc", "original_commit_id": "232bfaafed25987ddc65fce4834763d3362217a0", "user": {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, "body": "Can we refactor the `lt`,` __and__` creation into a single function? It is repeated twice here.", "created_at": "2018-03-21T15:29:11Z", "updated_at": "2018-11-23T15:41:00Z", "html_url": "https://github.com/pytorch/pytorch/pull/5827#discussion_r176125307", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/5827", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/176125307"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/5827#discussion_r176125307"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/5827"}}, "body_html": "<p>Can we refactor the <code>lt</code>,<code> __and__</code> creation into a single function? It is repeated twice here.</p>", "body_text": "Can we refactor the lt, __and__ creation into a single function? It is repeated twice here."}