{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/175065228", "pull_request_review_id": 104536217, "id": 175065228, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTA2NTIyOA==", "diff_hunk": "@@ -58,12 +58,79 @@ namespace torch { namespace jit {\n void desugarTripCounts(Block * b) {\n   for(auto n : b->nodes()) {\n     if(n->kind() == kLoop) {\n-\n-      // remove the trip count from Loop inputs, we don't support it yet\n+      // First, replace the max trip count input with the initial trip count.\n+      // This means we can treat trip count as a loop-carried dependency and\n+      // simply emit an increment in the body of the loop\n+      Value* max_trip_count_value = n->input(0);\n+      Value* initial_trip_count =\n+          n->owningGraph()\n+              ->createConstant(at::zeros(at::CPU(at::kInt), {1}))\n+              ->output();\n+      initial_trip_count->node()->insertBefore(n);\n+      // Also move trip count to the end because we need to mutate it after this\n+      // transformation and it's easier to append an output in the block than it\n+      // is to prepend.\n       n->removeInput(0);\n-      JIT_ASSERT(n->blocks()[0]->inputs()[0]->uses().size() == 0 &&\n-        \"NYI - use of trip count variable\");\n-      n->blocks()[0]->eraseInput(0);\n+      n->addInput(initial_trip_count);\n+\n+      auto body_block = n->blocks()[0];\n+\n+      Value* block_trip_count_input = body_block->addInput();\n+      body_block->inputs()[0]->replaceAllUsesWith(block_trip_count_input);\n+      body_block->eraseInput(0);\n+      n->addOutput();\n+\n+      auto insertAfter =\n+          [n](NodeKind kind, std::vector<Value*> inputs, Node* insert_after) {\n+            Node* new_n = n->owningGraph()->create(kind, 1);\n+            for (auto* input : inputs) {\n+              new_n->addInput(input);\n+            }\n+            new_n->insertAfter(insert_after);\n+\n+            return new_n;\n+          };\n+\n+      // Emit initial comparison -- initial_trip_count < max_trip_count\n+      auto* initial_comparison = insertAfter(\n+          klt,\n+          {initial_trip_count, max_trip_count_value},\n+          initial_trip_count->node());\n+      Value* initial_comparison_value = initial_comparison->output();\n+\n+      // Replace initial condition with logical and of trip count and\n+      // initial condition\n+      auto* conjunct = insertAfter(\n+          k__and__,\n+          {initial_comparison_value, n->input(0)},\n+          initial_comparison);\n+      Value* new_cond = conjunct->output();\n+      n->replaceInput(0, new_cond);\n+\n+      // Trip count is now a loop carried dependency. We emit an op to incrmeent\n+      // the trip count at the end of the body. Then, emit the same conjunctive\n+      // stopping condition as above.\n+      Value* const_one = body_block->owningGraph()\n+                             ->createConstant(at::ones(at::CPU(at::kInt), {1}))\n+                             ->output();\n+      const_one->node()->insertAfter(body_block->outputs()[0]->node());\n+\n+      auto* inc_trip_count = insertAfter(\n+          kadd,\n+          {block_trip_count_input, const_one, const_one},\n+          const_one->node());\n+      body_block->registerOutput(inc_trip_count->output());", "path": "torch/csrc/jit/interpreter.cpp", "position": null, "original_position": 70, "commit_id": "556f5b6c02cd01de9dcd253b89b406fce1e9f9dc", "original_commit_id": "4fc4028ed9fe754370dbe315b4e7fcc2808742db", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "It would be nice to somehow detect if this is unused and remove it altogether to avoid unnecessary work", "created_at": "2018-03-16T11:46:12Z", "updated_at": "2018-11-23T15:40:51Z", "html_url": "https://github.com/pytorch/pytorch/pull/5827#discussion_r175065228", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/5827", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/175065228"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/5827#discussion_r175065228"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/5827"}}, "body_html": "<p>It would be nice to somehow detect if this is unused and remove it altogether to avoid unnecessary work</p>", "body_text": "It would be nice to somehow detect if this is unused and remove it altogether to avoid unnecessary work"}