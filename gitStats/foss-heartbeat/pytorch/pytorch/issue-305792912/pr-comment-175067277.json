{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/175067277", "pull_request_review_id": 104536217, "id": 175067277, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTA2NzI3Nw==", "diff_hunk": "@@ -418,45 +421,57 @@ struct to_ir {\n     }\n   }\n \n-  void emitWhile(const While& stmt) {\n-    // Emits a loop operators conforming to the semantics specified at\n-    // https://github.com/onnx/onnx/blob/master/docs/Operators.md#experimental-loop\n-    // TODO: implement scan_outputs\n-\n-    // the format of the Loop instruction is:\n-    // loop_carried_outputs* = Loop(max_trip_count, start_condition, loop_carried_inputs*)\n-    //                          block0(loop_counter, loop_carried_block*) {\n-    //                             <body>\n-    //                             -> (continue_condition, loop_carried_block_outputs*)\n-    //                          }\n-    // all loop_carried_... lists are the same length and represent the value of\n-    // loop-carried variables whose definitions are updated as the loop executes\n-    // in a way that ensure single static assignment.\n-\n-    // TODO: clarify that this is an optional input that isn't needed here\n-    Value* max_trip_count_dummy = emitConst(stmt.range(), INT_MAX, \"i\")[0];\n-    Value* cond_value = emitExpr(stmt.cond(), 1)[0];\n-\n+  // *********************** Loop Operators ************************************\n+  // Emits a loop operators conforming to the semantics specified at\n+  // https://github.com/onnx/onnx/blob/master/docs/Operators.md#experimental-loop\n+  // TODO: implement scan_outputs\n+\n+  // the format of the Loop instruction is:\n+  // loop_carried_outputs* = Loop(max_trip_count, start_condition,\n+  // loop_carried_inputs*)\n+  //                          block0(loop_counter, loop_carried_block*) {\n+  //                             <body>\n+  //                             -> (continue_condition,\n+  //                             loop_carried_block_outputs*)\n+  //                          }\n+  // all loop_carried_... lists are the same length and represent the value of\n+  // loop-carried variables whose definitions are updated as the loop executes\n+  // in a way that ensure single static assignment.\n+\n+  void emitLoopCommon(\n+      Value* max_trip_count,\n+      Value* cond_value,\n+      const List<Stmt>& body,\n+      const Stmt& stmt,\n+      const Expr* cond,\n+      const std::vector<std::string>& itr_idents) {\n     Node* n = graph->insertNode(create(kLoop, stmt.range(), 0));\n-    n->addInput(max_trip_count_dummy);\n+    Value* trip_count = n->addInput(max_trip_count);\n     n->addInput(cond_value);\n     auto* body_block = n->addBlock();\n-    // Trip count required by spec. Since this is a while loop, we do not\n-    // provide access to this from user code\n-    // TODO: it seems like we should implement a `for` loop as well, otherwise\n-    // we'll probably have to pattern match iteration number machinery in user\n-    // code to conform to the spec\n     body_block->addInput(); // Iteration num\n     size_t skip_inputs_num = 1;\n \n     {\n       pushFrame(body_block);\n+      if (itr_idents.size() > 1) {\n+        throw ErrorReport(stmt)\n+            << \"Only one iteration variable allowed right now.\";\n+      }\n+      for (size_t i = 0; i < itr_idents.size(); ++i) {\n+        environment_stack->setVar(itr_idents[i], trip_count);", "path": "torch/csrc/jit/script/compiler.cpp", "position": null, "original_position": 77, "commit_id": "556f5b6c02cd01de9dcd253b89b406fce1e9f9dc", "original_commit_id": "4fc4028ed9fe754370dbe315b4e7fcc2808742db", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "You've just asserted that there's a single iterator so this loop is unnecessary and confusing", "created_at": "2018-03-16T11:57:07Z", "updated_at": "2018-11-23T15:40:51Z", "html_url": "https://github.com/pytorch/pytorch/pull/5827#discussion_r175067277", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/5827", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/175067277"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/5827#discussion_r175067277"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/5827"}}, "body_html": "<p>You've just asserted that there's a single iterator so this loop is unnecessary and confusing</p>", "body_text": "You've just asserted that there's a single iterator so this loop is unnecessary and confusing"}