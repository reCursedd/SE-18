{"url": "https://api.github.com/repos/pytorch/pytorch/issues/5188", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/5188/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/5188/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/5188/events", "html_url": "https://github.com/pytorch/pytorch/issues/5188", "id": 296479416, "node_id": "MDU6SXNzdWUyOTY0Nzk0MTY=", "number": 5188, "title": "[RFC] Parameter pack class for testing", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-02-12T18:32:48Z", "updated_at": "2018-02-12T18:57:18Z", "closed_at": null, "author_association": "CONTRIBUTOR", "body_html": "<p>In our test code, we have a lot of things that look like this:</p>\n<pre><code>    dict(\n        module_name='ConvTranspose2d',\n        constructor_args=(3, 4, 3, (2, 3), 1, (1, 1), 1, False),\n        input_size=(1, 3, 6, 7),\n        cudnn=True,\n        desc='no_bias',\n    ),  \n</code></pre>\n<p>Notice <code>constructor_args</code>: what do these all mean? It's hard to tell, because they are specified completely positionally.</p>\n<p>I propose we introduce a small, new abstraction to make it easier to express these cases explicitly:</p>\n<pre><code>class ParameterPack(object):\n    \"\"\"\n    Represents an arbitrary function invocation from Python, which can\n    be saved and then used to invoke another function.\n\n    Suppose you write:\n\n    &gt;&gt;&gt; f(0, 1, output_padding=2)\n\n    You can write this function call equivalently with a parameter\n    pack:\n\n    &gt;&gt;&gt; p = params(0, 1 output_padding=2)\n    &gt;&gt;&gt; p.invoke(f)\n    \"\"\"\n    def __init__(self, *args, **kwargs):\n        self.args = args\n        self.kwargs = kwargs\n\n    def invoke(self, f):\n        return f(*args, **kwargs)\n</code></pre>\n<p>The intent now is that `constructor_args can be rewritten as:</p>\n<pre><code>        constructor_args=params(3, 4, 3, stride=(2, 3), padding=1, output_padding=(1, 1), groups=1, bias=False),\n</code></pre>", "body_text": "In our test code, we have a lot of things that look like this:\n    dict(\n        module_name='ConvTranspose2d',\n        constructor_args=(3, 4, 3, (2, 3), 1, (1, 1), 1, False),\n        input_size=(1, 3, 6, 7),\n        cudnn=True,\n        desc='no_bias',\n    ),  \n\nNotice constructor_args: what do these all mean? It's hard to tell, because they are specified completely positionally.\nI propose we introduce a small, new abstraction to make it easier to express these cases explicitly:\nclass ParameterPack(object):\n    \"\"\"\n    Represents an arbitrary function invocation from Python, which can\n    be saved and then used to invoke another function.\n\n    Suppose you write:\n\n    >>> f(0, 1, output_padding=2)\n\n    You can write this function call equivalently with a parameter\n    pack:\n\n    >>> p = params(0, 1 output_padding=2)\n    >>> p.invoke(f)\n    \"\"\"\n    def __init__(self, *args, **kwargs):\n        self.args = args\n        self.kwargs = kwargs\n\n    def invoke(self, f):\n        return f(*args, **kwargs)\n\nThe intent now is that `constructor_args can be rewritten as:\n        constructor_args=params(3, 4, 3, stride=(2, 3), padding=1, output_padding=(1, 1), groups=1, bias=False),", "body": "In our test code, we have a lot of things that look like this:\r\n\r\n```\r\n    dict(\r\n        module_name='ConvTranspose2d',\r\n        constructor_args=(3, 4, 3, (2, 3), 1, (1, 1), 1, False),\r\n        input_size=(1, 3, 6, 7),\r\n        cudnn=True,\r\n        desc='no_bias',\r\n    ),  \r\n```\r\n\r\nNotice `constructor_args`: what do these all mean? It's hard to tell, because they are specified completely positionally.\r\n\r\nI propose we introduce a small, new abstraction to make it easier to express these cases explicitly:\r\n\r\n```\r\nclass ParameterPack(object):\r\n    \"\"\"\r\n    Represents an arbitrary function invocation from Python, which can\r\n    be saved and then used to invoke another function.\r\n\r\n    Suppose you write:\r\n\r\n    >>> f(0, 1, output_padding=2)\r\n\r\n    You can write this function call equivalently with a parameter\r\n    pack:\r\n\r\n    >>> p = params(0, 1 output_padding=2)\r\n    >>> p.invoke(f)\r\n    \"\"\"\r\n    def __init__(self, *args, **kwargs):\r\n        self.args = args\r\n        self.kwargs = kwargs\r\n\r\n    def invoke(self, f):\r\n        return f(*args, **kwargs)\r\n```\r\n\r\nThe intent now is that `constructor_args can be rewritten as:\r\n\r\n```\r\n        constructor_args=params(3, 4, 3, stride=(2, 3), padding=1, output_padding=(1, 1), groups=1, bias=False),\r\n```"}