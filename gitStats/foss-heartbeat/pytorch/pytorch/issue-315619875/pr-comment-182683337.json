{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/182683337", "pull_request_review_id": 113525026, "id": 182683337, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjY4MzMzNw==", "diff_hunk": "@@ -81,14 +81,19 @@ def param_shape(self):\n         return self._param.size()\n \n     def sample(self, sample_shape=torch.Size()):\n-        shape = self._extended_shape(sample_shape) + (self.total_count,)\n         with torch.no_grad():\n-            return torch.bernoulli(self.probs.unsqueeze(-1).expand(shape)).sum(dim=-1)\n+            max_count = max(int(self.total_count.max().item()), 1)\n+            shape = self._extended_shape(sample_shape) + (max_count,)\n+            bernoullis = torch.bernoulli(self.probs.unsqueeze(-1).expand(shape))\n+            if self.total_count.min() != max_count:\n+                arange = torch.arange(max_count, out=self.total_count.new_empty(max_count))\n+                bernoullis *= (arange < self.total_count.unsqueeze(-1)).type_as(bernoullis)", "path": "torch/distributions/binomial.py", "position": null, "original_position": 74, "commit_id": "bfcd553b118a0427f0a1d9cbef4bea20639010b1", "original_commit_id": "1690d1e1eaab880b96d2c5ed6ac883dd9db2e5c8", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "You could get rid of the type cast and multiplication by computing an inverse mask and `mask_fill`ing it with 0s.", "created_at": "2018-04-19T09:18:19Z", "updated_at": "2018-11-23T15:42:50Z", "html_url": "https://github.com/pytorch/pytorch/pull/6720#discussion_r182683337", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/6720", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/182683337"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/6720#discussion_r182683337"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/6720"}}, "body_html": "<p>You could get rid of the type cast and multiplication by computing an inverse mask and <code>mask_fill</code>ing it with 0s.</p>", "body_text": "You could get rid of the type cast and multiplication by computing an inverse mask and mask_filling it with 0s."}