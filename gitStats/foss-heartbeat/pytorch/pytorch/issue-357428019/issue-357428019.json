{"url": "https://api.github.com/repos/pytorch/pytorch/issues/11304", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/11304/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/11304/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/11304/events", "html_url": "https://github.com/pytorch/pytorch/pull/11304", "id": 357428019, "node_id": "MDExOlB1bGxSZXF1ZXN0MjEzNDQ2NTYy", "number": 11304, "title": "Improve LegacyTypeDispatch to handle initialization correctly.", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-09-05T22:32:24Z", "updated_at": "2018-09-06T16:59:38Z", "closed_at": "2018-09-06T16:59:38Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/11304", "html_url": "https://github.com/pytorch/pytorch/pull/11304", "diff_url": "https://github.com/pytorch/pytorch/pull/11304.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/11304.patch"}, "body_html": "<p>Improve LegacyTypeDispatch to handle initialization correctly.</p>\n<p>In the previous commit, we added a bare-bones LegacyTypeDispatch in ATen/core.<br>\nThis is not sufficient for the use cases we need: we not only need to be able to<br>\nget a Type, but we also need to be able to <em>initialize</em> the Types if its the first time<br>\nwe have retrieved a CPU/CUDA/Complex type. I hemmed and hawed about how<br>\nto do this; the strategy this PR takes is to introduce a new \"hooks\" interface<br>\nspecifically for initializing CPU/CUDA/Complex (which still lives in Context). We then<br>\nmove all \"user-friendly\" functions to LegacyTypeDispatch.</p>\n<p>Here were some other options which I considered, but don't work:</p>\n<ul>\n<li>Assume that Type is already initialized, because we only intend to call Type<br>\nfrom Tensor methods, where we already have a Tensor. This does not work<br>\nbecause Caffe2 created tensors will not have gone through the standard<br>\nType codepath, and will have skipped initialization.</li>\n<li>Move CUDAHooks and ComplexHooks to ATen/core. Besides being sucky,<br>\nthis isn't even a complete fix, because I still need to initialize CPU hooks<br>\n(so you <em>still</em> need another hooks interface).</li>\n</ul>\n<p>Differential Revision: D9666612</p>\n<p>Stack:</p>\n<ol>\n<li><a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"356960156\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/11244\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/pytorch/pytorch/pull/11244/hovercard\" href=\"https://github.com/pytorch/pytorch/pull/11244\">#11244</a> Move TensorOptions.cpp to the correct place in ATen/core</li>\n<li><a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"357001374\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/11250\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/pytorch/pytorch/pull/11250/hovercard\" href=\"https://github.com/pytorch/pytorch/pull/11250\">#11250</a> Rename getMaybeVariableType back to getType.</li>\n<li><a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"357248475\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/11270\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/pytorch/pytorch/pull/11270/hovercard\" href=\"https://github.com/pytorch/pytorch/pull/11270\">#11270</a> Move ATen/Registry.h to ATen/core/Registry.h</li>\n<li><a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"357310695\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/11273\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/pytorch/pytorch/pull/11273/hovercard\" href=\"https://github.com/pytorch/pytorch/pull/11273\">#11273</a> Move VariableHooksInterface to ATen/core</li>\n<li><a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"357310748\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/11274\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/pytorch/pytorch/pull/11274/hovercard\" href=\"https://github.com/pytorch/pytorch/pull/11274\">#11274</a> Move the type registry out of Context, into LegacyTypeDispatch.</li>\n<li><g-emoji class=\"g-emoji\" alias=\"round_pushpin\" fallback-src=\"https://assets-cdn.github.com/images/icons/emoji/unicode/1f4cd.png\">\ud83d\udccd</g-emoji> <strong><a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"357428019\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/11304\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/pytorch/pytorch/pull/11304/hovercard\" href=\"https://github.com/pytorch/pytorch/pull/11304\">#11304</a> Improve LegacyTypeDispatch to handle initialization correctly.</strong></li>\n</ol>", "body_text": "Improve LegacyTypeDispatch to handle initialization correctly.\nIn the previous commit, we added a bare-bones LegacyTypeDispatch in ATen/core.\nThis is not sufficient for the use cases we need: we not only need to be able to\nget a Type, but we also need to be able to initialize the Types if its the first time\nwe have retrieved a CPU/CUDA/Complex type. I hemmed and hawed about how\nto do this; the strategy this PR takes is to introduce a new \"hooks\" interface\nspecifically for initializing CPU/CUDA/Complex (which still lives in Context). We then\nmove all \"user-friendly\" functions to LegacyTypeDispatch.\nHere were some other options which I considered, but don't work:\n\nAssume that Type is already initialized, because we only intend to call Type\nfrom Tensor methods, where we already have a Tensor. This does not work\nbecause Caffe2 created tensors will not have gone through the standard\nType codepath, and will have skipped initialization.\nMove CUDAHooks and ComplexHooks to ATen/core. Besides being sucky,\nthis isn't even a complete fix, because I still need to initialize CPU hooks\n(so you still need another hooks interface).\n\nDifferential Revision: D9666612\nStack:\n\n#11244 Move TensorOptions.cpp to the correct place in ATen/core\n#11250 Rename getMaybeVariableType back to getType.\n#11270 Move ATen/Registry.h to ATen/core/Registry.h\n#11273 Move VariableHooksInterface to ATen/core\n#11274 Move the type registry out of Context, into LegacyTypeDispatch.\n\ud83d\udccd #11304 Improve LegacyTypeDispatch to handle initialization correctly.", "body": "Improve LegacyTypeDispatch to handle initialization correctly.\n\nIn the previous commit, we added a bare-bones LegacyTypeDispatch in ATen/core.\nThis is not sufficient for the use cases we need: we not only need to be able to\nget a Type, but we also need to be able to *initialize* the Types if its the first time\nwe have retrieved a CPU/CUDA/Complex type. I hemmed and hawed about how\nto do this; the strategy this PR takes is to introduce a new \"hooks\" interface\nspecifically for initializing CPU/CUDA/Complex (which still lives in Context). We then\nmove all \"user-friendly\" functions to LegacyTypeDispatch.\n\nHere were some other options which I considered, but don't work:\n- Assume that Type is already initialized, because we only intend to call Type\n  from Tensor methods, where we already have a Tensor. This does not work\n  because Caffe2 created tensors will not have gone through the standard\n  Type codepath, and will have skipped initialization.\n- Move CUDAHooks and ComplexHooks to ATen/core. Besides being sucky,\n  this isn't even a complete fix, because I still need to initialize CPU hooks\n  (so you *still* need another hooks interface).\n\nDifferential Revision: D9666612\n\nStack:\n1. #11244 Move TensorOptions.cpp to the correct place in ATen/core\n2. #11250 Rename getMaybeVariableType back to getType.\n3. #11270 Move ATen/Registry.h to ATen/core/Registry.h\n4. #11273 Move VariableHooksInterface to ATen/core\n5. #11274 Move the type registry out of Context, into LegacyTypeDispatch.\n6. :round_pushpin: **#11304 Improve LegacyTypeDispatch to handle initialization correctly.**"}