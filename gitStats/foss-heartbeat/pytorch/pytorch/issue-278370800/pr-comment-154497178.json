{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/154497178", "pull_request_review_id": 80675825, "id": 154497178, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDQ5NzE3OA==", "diff_hunk": "@@ -460,44 +452,229 @@ void CompiledFusionFunction::launch_with_tensors(at::ArrayRef<at::Tensor> inputs\n       }\n     }\n   }\n-  launch(numel, arguments.data());\n+  launch_raw(numel, arguments.data());\n }\n \n void CompiledFusionFunction::launch(at::ArrayRef<at::Tensor> inputs, std::vector<at::Tensor> & outputs) {\n   AutoGPU guard(inputs.back());\n   outputs.clear();\n   outputs.reserve(outputDescriptors().size());\n   for(auto & od : outputDescriptors()) {\n-    outputs.push_back(at::CUDA(od.scalar_type).tensor());\n+    outputs.push_back(at::getType(backend(),od.scalar_type).tensor());\n   }\n   launch_with_tensors(inputs, outputs);\n }\n \n-void CompiledFusionFunction::launch(uint32_t numel, void ** arguments) {\n-  int numBlocks = std::min(maxBlocks, ceilDiv(numel, blockSize));\n-  //std::cout << \"maxBlocks = \" << maxBlocks << \" needed blocks: \" << ceilDiv(numel,blockSize)\n-  //          << \" numblocks =  \" << numBlocks;\n-\n-  // it is possible that this is the first cuda call on this thread\n-  // so make sure we initialize the Driver API's context\n-  // cudaFree(0) accomplishes this.\n-  cudaFree(0);\n-\n-  TORCH_CU_CHECK(cuLaunchKernel(\n-    function,\n-    numBlocks, 1, 1,\n-    blockSize, 1, 1,\n-    0, nullptr,\n-    arguments,\n-    nullptr));\n+#ifdef WITH_CUDA\n+\n+struct CUDAFusionFunction : public CompiledFusionFunction {\n+  CUDAFusionFunction(const std::string & name, AnnotatedGraph & agraph)\n+  : CompiledFusionFunction(name, agraph) {\n+    TORCH_CUDA_CHECK(cudaGetDevice(&device));\n+    TORCH_CUDA_CHECK(cudaGetDeviceProperties(&prop, device));\n+\n+    if ((prop.major >= 6 && CUDA_VERSION < 8000) ||\n+        (prop.major >= 7 && CUDA_VERSION < 9000)) {\n+      std::stringstream err_string;\n+      err_string << \"In CompiledFusionFunction, PyTorch compiled with insufficient CUDA version: \"\n+  \t       << CUDA_VERSION << \" for the current GPU device \" << prop.name\n+  \t       << \" with device capability \" << prop.major << \".\" << prop.minor;\n+      throw std::runtime_error(err_string.str());\n+    }\n+\n+    std::stringstream cu;\n+    concat_desc = codegen::emitCompilationUnit(cu, name, agraph, true);\n+    compilation_unit = cu.str();\n+    nvrtcProgram program;\n+    TORCH_NVRTC_CHECK(nvrtcCreateProgram(&program, compilation_unit.c_str(), NULL, 0, nullptr, nullptr));\n+\n+    std::string compute = \"--gpu-architecture=compute_\" + std::to_string(prop.major) + std::to_string(prop.minor);\n+    std::vector<const char *> args = {\"--std=c++11\", compute.c_str()};\n+    nvrtcResult result = nvrtcCompileProgram(program, args.size(), args.data());\n+    if (result == NVRTC_ERROR_COMPILATION) {\n+      size_t logsize;\n+      nvrtcGetProgramLogSize(program, &logsize);\n+      std::vector<char> log(logsize);\n+      nvrtcGetProgramLog(program, log.data());\n+      cu << log.data();\n+      throw std::runtime_error(cu.str());\n+    }\n+    ResourceGuard holdProgram([&] {\n+      TORCH_NVRTC_CHECK(nvrtcDestroyProgram(&program));\n+    });\n+    TORCH_NVRTC_CHECK(result);\n+\n+    size_t ptx_size;\n+    TORCH_NVRTC_CHECK(nvrtcGetPTXSize(program, &ptx_size));\n+    ptx.resize(ptx_size);\n+    TORCH_NVRTC_CHECK(nvrtcGetPTX(program, ptx.data()));\n+\n+    TORCH_CU_CHECK(cuModuleLoadData(&module, ptx.data()));\n+    TORCH_CU_CHECK(cuModuleGetFunction(&function, module, name.c_str()));\n+\n+    TORCH_CU_CHECK(cuOccupancyMaxActiveBlocksPerMultiprocessor(\n+      &maxBlocks, function, 128, 0));\n+    maxBlocks *= prop.multiProcessorCount;\n+  }\n+  virtual ~CUDAFusionFunction() override {\n+    TORCH_CU_CHECK(cuModuleUnload(module));\n+  }\n+protected:\n+  virtual at::Backend backend() const override {\n+    return at::kCUDA;\n+  }\n+  virtual void launch_raw(uint32_t numel, void ** arguments) override {\n+     int numBlocks = std::min(maxBlocks, ceilDiv(numel, blockSize));\n+     //std::cout << \"maxBlocks = \" << maxBlocks << \" needed blocks: \" << ceilDiv(numel,blockSize)\n+     //          << \" numblocks =  \" << numBlocks;\n+\n+     // it is possible that this is the first cuda call on this thread\n+     // so make sure we initialize the Driver API's context\n+     // cudaFree(0) accomplishes this.\n+     cudaFree(0);\n+\n+     TORCH_CU_CHECK(cuLaunchKernel(\n+       function,\n+       numBlocks, 1, 1,\n+       blockSize, 1, 1,\n+       0, nullptr,\n+       arguments,\n+       nullptr));\n+  }\n+  std::vector<char> ptx;\n+  CUmodule module;\n+  CUfunction function;\n+\n+  // we record prop/device so if they are availiable for launch heuristics\n+  // querying at launch is too slow for device properties.\n+  int device;\n+  cudaDeviceProp prop;\n+  int blockSize = 128;\n+  int maxBlocks;\n+};\n+\n+#endif\n+\n+struct TempFile {\n+  TH_DISALLOW_COPY_AND_ASSIGN(TempFile);\n+  TempFile(const std::string & t, int suffix) {\n+    std::vector<char> tt(t.c_str(), t.c_str() + t.size() + 1);\n+    int fd = mkstemps(tt.data(), suffix);\n+    JIT_ASSERT(fd != -1);\n+    file_ = fdopen(fd, \"r+\");\n+    name_ = std::string(tt.begin(), tt.end() - 1);\n+  }\n+  const std::string & name() const {\n+    return name_;\n+  }\n+  void sync() {\n+    fflush(file_);\n+    fsync(fileno(file_));\n+  }\n+  void write(const std::string & str) {\n+    size_t result = fwrite(str.c_str(), 1, str.size(), file_);\n+    JIT_ASSERT(str.size() == result);\n+  }\n+  FILE* file()  {\n+    return file_;\n+  }\n+  ~TempFile() {\n+    if(file_ != nullptr) {\n+      // unlink first to ensure another mkstemps doesn't\n+      // race between close and unlink\n+      unlink(name_.c_str());\n+      fclose(file_);\n+    }\n+  }\n+private:\n+  FILE * file_ = nullptr;\n+  std::string name_;\n+};\n+\n+static void* checkDL(void * x) {\n+  if(!x) {\n+    barf(\"error in dlopen or dlsym: %s\", dlerror());\n+  }\n+  return x;\n }\n \n+struct DynamicLibrary {\n+  TH_DISALLOW_COPY_AND_ASSIGN(DynamicLibrary);\n+  DynamicLibrary(const char * name) {\n+    handle = checkDL(dlopen(name, RTLD_LOCAL | RTLD_NOW));\n+  }\n+  void * sym(const char * name) {\n+    JIT_ASSERT(handle);\n+    return checkDL(dlsym(handle, name));\n+  }\n+  ~DynamicLibrary() {\n+    if(!handle) return;\n+    int r = dlclose(handle);\n+    if(r) {\n+      barf(\"error in dlclose: %s\", dlerror());\n+    }\n+  }\n+private:\n+  void * handle = nullptr;\n+};\n+\n+static const std::string so_template = \"/tmp/pytorch_fuserXXXXXX.so\";\n+static const std::string cpp_template = \"/tmp/pytorch_fuserXXXXXX.cpp\";\n+\n+// TODO: have python tell us what this is...\n+static const std::string compile_string =\n+  \"g++ -O3 -g -march=native -std=c++11 -fPIC -shared \\\"${cpp_file}\\\" -o \\\"${so_file}\\\"\";\n+\n+static void runCompiler(const std::string & cpp, const std::string so) {\n+  TemplateEnv env;\n+  env.s(\"cpp_file\",cpp);\n+  env.s(\"so_file\",so);\n+  std::string result = format(compile_string,env);\n+  int r = system(result.c_str());\n+  JIT_ASSERT(r == 0);\n+}\n+\n+struct CPUFusionFunction : public CompiledFusionFunction {\n+  CPUFusionFunction(const std::string & name, AnnotatedGraph & agraph)\n+  : CompiledFusionFunction(name, agraph)\n+  , so_file(so_template, 3)\n+  , cpp_file(cpp_template, 4) {\n+\n+    std::stringstream cu;\n+    concat_desc = codegen::emitCompilationUnit(cu, name, agraph, false);\n+    compilation_unit = cu.str();\n+    cpp_file.write(compilation_unit);\n+    cpp_file.sync();\n+    runCompiler(cpp_file.name(), so_file.name());\n+    so_lib.reset(new DynamicLibrary(so_file.name().c_str()));\n+    kernel = reinterpret_cast<void(*)(uint32_t, void**)>(so_lib->sym(name.c_str()));\n+  }\n+protected:\n+  virtual at::Backend backend() const override {\n+    return at::kCPU;\n+  }\n+  virtual void launch_raw(uint32_t numel, void ** arguments) override {\n+    kernel(numel, arguments);\n+  }\n+  TempFile so_file;\n+  TempFile cpp_file;", "path": "torch/csrc/jit/fusion_compiler.cpp", "position": null, "original_position": 404, "commit_id": "4621e76e17213ccfc8c8571354630f6a24790f75", "original_commit_id": "23487092097099756de8ef32e1e20823fffb4a83", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "It is 100% safe to unlink a file while you have a file handle open to it, the file handle stays valid. But this is only true for Linux; Windows semantics are different so that this doesn't work (the file is \"busy\" and not allowed to be deleted.)", "created_at": "2017-12-02T14:06:49Z", "updated_at": "2018-11-23T15:37:01Z", "html_url": "https://github.com/pytorch/pytorch/pull/3961#discussion_r154497178", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/3961", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/154497178"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/3961#discussion_r154497178"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/3961"}}, "body_html": "<p>It is 100% safe to unlink a file while you have a file handle open to it, the file handle stays valid. But this is only true for Linux; Windows semantics are different so that this doesn't work (the file is \"busy\" and not allowed to be deleted.)</p>", "body_text": "It is 100% safe to unlink a file while you have a file handle open to it, the file handle stays valid. But this is only true for Linux; Windows semantics are different so that this doesn't work (the file is \"busy\" and not allowed to be deleted.)", "in_reply_to_id": 154481188}