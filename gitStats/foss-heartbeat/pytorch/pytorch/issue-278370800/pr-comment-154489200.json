{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/154489200", "pull_request_review_id": 80668093, "id": 154489200, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDQ4OTIwMA==", "diff_hunk": "@@ -125,14 +116,14 @@ struct FusionCompiler {\n \n   // ignores types in graph, and uses specific contiguity annotations\n   std::shared_ptr<CompiledFusionFunction> getOrCompile(AnnotatedGraph & agraph);\n-  // uses type annotations in graph to create Annotated graph\n-  std::shared_ptr<CompiledFusionFunction> getOrCompile(Graph & graph);\n+  // uses type annotations in fusion_group to create Annotated graph\n+  std::shared_ptr<CompiledFusionFunction> getOrCompile(Node * fusion_group);\n \n   // debugging function that lets you do everything from compilation to execution\n   // in one step.\n   // this should not be used in the hot path of execution because it has to serialize\n   // the graph each time\n-  void debugLaunchGraph(Graph & graph, at::ArrayRef<at::Tensor> inputs, at::ArrayRef<at::Tensor> outputs);\n+  void debugLaunchGraph(Graph & graph, bool is_cuda, at::ArrayRef<at::Tensor> inputs, at::ArrayRef<at::Tensor> outputs);", "path": "torch/csrc/jit/fusion_compiler.h", "position": 85, "original_position": 70, "commit_id": "4621e76e17213ccfc8c8571354630f6a24790f75", "original_commit_id": "23487092097099756de8ef32e1e20823fffb4a83", "user": {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, "body": "It's a part of the `kFusionGroup` Node  but not part of the Graph that is taken by the fuser\r\nThe fuser itself doesn't require you have types/devices attached for debugging and for keeping the potential open for it to be used directly from C++ for ATen tensors. If we gain more parameters, we can refactor into a thing that contains all the meta-data needed.", "created_at": "2017-12-02T05:44:37Z", "updated_at": "2018-11-23T15:37:01Z", "html_url": "https://github.com/pytorch/pytorch/pull/3961#discussion_r154489200", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/3961", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/154489200"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/3961#discussion_r154489200"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/3961"}}, "body_html": "<p>It's a part of the <code>kFusionGroup</code> Node  but not part of the Graph that is taken by the fuser<br>\nThe fuser itself doesn't require you have types/devices attached for debugging and for keeping the potential open for it to be used directly from C++ for ATen tensors. If we gain more parameters, we can refactor into a thing that contains all the meta-data needed.</p>", "body_text": "It's a part of the kFusionGroup Node  but not part of the Graph that is taken by the fuser\nThe fuser itself doesn't require you have types/devices attached for debugging and for keeping the potential open for it to be used directly from C++ for ATen tensors. If we gain more parameters, we can refactor into a thing that contains all the meta-data needed.", "in_reply_to_id": 154481337}