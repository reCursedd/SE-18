{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/154481226", "pull_request_review_id": 80658901, "id": 154481226, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDQ4MTIyNg==", "diff_hunk": "@@ -460,44 +452,229 @@ void CompiledFusionFunction::launch_with_tensors(at::ArrayRef<at::Tensor> inputs\n       }\n     }\n   }\n-  launch(numel, arguments.data());\n+  launch_raw(numel, arguments.data());\n }\n \n void CompiledFusionFunction::launch(at::ArrayRef<at::Tensor> inputs, std::vector<at::Tensor> & outputs) {\n   AutoGPU guard(inputs.back());\n   outputs.clear();\n   outputs.reserve(outputDescriptors().size());\n   for(auto & od : outputDescriptors()) {\n-    outputs.push_back(at::CUDA(od.scalar_type).tensor());\n+    outputs.push_back(at::getType(backend(),od.scalar_type).tensor());\n   }\n   launch_with_tensors(inputs, outputs);\n }\n \n-void CompiledFusionFunction::launch(uint32_t numel, void ** arguments) {\n-  int numBlocks = std::min(maxBlocks, ceilDiv(numel, blockSize));\n-  //std::cout << \"maxBlocks = \" << maxBlocks << \" needed blocks: \" << ceilDiv(numel,blockSize)\n-  //          << \" numblocks =  \" << numBlocks;\n-\n-  // it is possible that this is the first cuda call on this thread\n-  // so make sure we initialize the Driver API's context\n-  // cudaFree(0) accomplishes this.\n-  cudaFree(0);\n-\n-  TORCH_CU_CHECK(cuLaunchKernel(\n-    function,\n-    numBlocks, 1, 1,\n-    blockSize, 1, 1,\n-    0, nullptr,\n-    arguments,\n-    nullptr));\n+#ifdef WITH_CUDA\n+\n+struct CUDAFusionFunction : public CompiledFusionFunction {\n+  CUDAFusionFunction(const std::string & name, AnnotatedGraph & agraph)\n+  : CompiledFusionFunction(name, agraph) {\n+    TORCH_CUDA_CHECK(cudaGetDevice(&device));\n+    TORCH_CUDA_CHECK(cudaGetDeviceProperties(&prop, device));\n+\n+    if ((prop.major >= 6 && CUDA_VERSION < 8000) ||\n+        (prop.major >= 7 && CUDA_VERSION < 9000)) {\n+      std::stringstream err_string;\n+      err_string << \"In CompiledFusionFunction, PyTorch compiled with insufficient CUDA version: \"\n+  \t       << CUDA_VERSION << \" for the current GPU device \" << prop.name\n+  \t       << \" with device capability \" << prop.major << \".\" << prop.minor;\n+      throw std::runtime_error(err_string.str());\n+    }\n+\n+    std::stringstream cu;\n+    concat_desc = codegen::emitCompilationUnit(cu, name, agraph, true);\n+    compilation_unit = cu.str();\n+    nvrtcProgram program;\n+    TORCH_NVRTC_CHECK(nvrtcCreateProgram(&program, compilation_unit.c_str(), NULL, 0, nullptr, nullptr));\n+\n+    std::string compute = \"--gpu-architecture=compute_\" + std::to_string(prop.major) + std::to_string(prop.minor);\n+    std::vector<const char *> args = {\"--std=c++11\", compute.c_str()};\n+    nvrtcResult result = nvrtcCompileProgram(program, args.size(), args.data());\n+    if (result == NVRTC_ERROR_COMPILATION) {\n+      size_t logsize;\n+      nvrtcGetProgramLogSize(program, &logsize);\n+      std::vector<char> log(logsize);\n+      nvrtcGetProgramLog(program, log.data());\n+      cu << log.data();\n+      throw std::runtime_error(cu.str());\n+    }\n+    ResourceGuard holdProgram([&] {\n+      TORCH_NVRTC_CHECK(nvrtcDestroyProgram(&program));\n+    });\n+    TORCH_NVRTC_CHECK(result);\n+\n+    size_t ptx_size;\n+    TORCH_NVRTC_CHECK(nvrtcGetPTXSize(program, &ptx_size));\n+    ptx.resize(ptx_size);\n+    TORCH_NVRTC_CHECK(nvrtcGetPTX(program, ptx.data()));\n+\n+    TORCH_CU_CHECK(cuModuleLoadData(&module, ptx.data()));\n+    TORCH_CU_CHECK(cuModuleGetFunction(&function, module, name.c_str()));\n+\n+    TORCH_CU_CHECK(cuOccupancyMaxActiveBlocksPerMultiprocessor(\n+      &maxBlocks, function, 128, 0));\n+    maxBlocks *= prop.multiProcessorCount;\n+  }\n+  virtual ~CUDAFusionFunction() override {\n+    TORCH_CU_CHECK(cuModuleUnload(module));\n+  }\n+protected:\n+  virtual at::Backend backend() const override {\n+    return at::kCUDA;\n+  }\n+  virtual void launch_raw(uint32_t numel, void ** arguments) override {", "path": "torch/csrc/jit/fusion_compiler.cpp", "position": 270, "original_position": 270, "commit_id": "4621e76e17213ccfc8c8571354630f6a24790f75", "original_commit_id": "23487092097099756de8ef32e1e20823fffb4a83", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Can you add a comment describing what `arguments` are exactly (probably in the header)?", "created_at": "2017-12-02T00:54:36Z", "updated_at": "2018-11-23T15:37:00Z", "html_url": "https://github.com/pytorch/pytorch/pull/3961#discussion_r154481226", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/3961", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/154481226"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/3961#discussion_r154481226"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/3961"}}, "body_html": "<p>Can you add a comment describing what <code>arguments</code> are exactly (probably in the header)?</p>", "body_text": "Can you add a comment describing what arguments are exactly (probably in the header)?"}