{"url": "https://api.github.com/repos/pytorch/pytorch/issues/4884", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/4884/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/4884/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/4884/events", "html_url": "https://github.com/pytorch/pytorch/issues/4884", "id": 292056592, "node_id": "MDU6SXNzdWUyOTIwNTY1OTI=", "number": 4884, "title": "Error messages that should be improved", "user": {"login": "SsnL", "id": 5674597, "node_id": "MDQ6VXNlcjU2NzQ1OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5674597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SsnL", "html_url": "https://github.com/SsnL", "followers_url": "https://api.github.com/users/SsnL/followers", "following_url": "https://api.github.com/users/SsnL/following{/other_user}", "gists_url": "https://api.github.com/users/SsnL/gists{/gist_id}", "starred_url": "https://api.github.com/users/SsnL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SsnL/subscriptions", "organizations_url": "https://api.github.com/users/SsnL/orgs", "repos_url": "https://api.github.com/users/SsnL/repos", "events_url": "https://api.github.com/users/SsnL/events{/privacy}", "received_events_url": "https://api.github.com/users/SsnL/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 5, "created_at": "2018-01-26T22:56:37Z", "updated_at": "2018-05-28T23:44:48Z", "closed_at": null, "author_association": "CONTRIBUTOR", "body_html": "<p>There are some weird error messages when using convolutional modules:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">conv_cuda_kernel_size_check</span>():\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> RuntimeError(Expected tensor for argument #1 'input' to have the same dimension</span>\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> as tensor for 'result'; but 4 does not equal 2 (while checking arguments for cudnn_convolution))</span>\n    conv <span class=\"pl-k\">=</span> nn.Conv2d(<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>, <span class=\"pl-v\">kernel_size</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">4</span>, <span class=\"pl-v\">padding</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">1</span>).cuda()\n    x <span class=\"pl-k\">=</span> Variable(torch.randn(<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">5</span>).cuda())\n    <span class=\"pl-k\">return</span> conv(x)\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">conv2d_thcunn_kernel_size_check_with_stride</span>():\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> 2d case is expected</span>\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> RuntimeError(Calculated input size: (3 x 7). Kernel size: (4 x 4). Kernel size</span>\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> can't greater than actual input size at /home/ssnl/sftp/pytorch/aten/src/THCUNN/generic/SpatialConvolutionMM.cu:48)</span>\n    <span class=\"pl-k\">try</span>:\n        torch.backends.cudnn.enabled <span class=\"pl-k\">=</span> <span class=\"pl-c1\">False</span>\n        conv <span class=\"pl-k\">=</span> nn.Conv2d(<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>, <span class=\"pl-v\">kernel_size</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">4</span>, <span class=\"pl-v\">stride</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">2</span>, <span class=\"pl-v\">padding</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">1</span>).cuda()\n        x <span class=\"pl-k\">=</span> Variable(torch.randn(<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">5</span>).cuda())\n        <span class=\"pl-k\">return</span> conv(x)\n    <span class=\"pl-k\">finally</span>:\n        torch.backends.cudnn.enabled <span class=\"pl-k\">=</span> <span class=\"pl-c1\">True</span>\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">conv3d_thcunn_kernel_size_check_with_stride</span>():\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> 3d case has no error (unexpected)</span>\n    <span class=\"pl-k\">try</span>:\n        torch.backends.cudnn.enabled <span class=\"pl-k\">=</span> <span class=\"pl-c1\">False</span>\n        conv <span class=\"pl-k\">=</span> nn.Conv3d(<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>, <span class=\"pl-v\">kernel_size</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">4</span>, <span class=\"pl-v\">stride</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">2</span>, <span class=\"pl-v\">padding</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">1</span>).cuda()\n        x <span class=\"pl-k\">=</span> Variable(torch.randn(<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">5</span>, <span class=\"pl-c1\">5</span>).cuda())\n        <span class=\"pl-k\">return</span> conv(x)\n    <span class=\"pl-k\">finally</span>:\n        torch.backends.cudnn.enabled <span class=\"pl-k\">=</span> <span class=\"pl-c1\">True</span>\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">conv_cudnn_kernel_size_check_with_stride</span>():\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> both 2d and 3d give CUDNN_STATUS_BAD_PARAM</span>\n    conv <span class=\"pl-k\">=</span> nn.Conv2d(<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>, <span class=\"pl-v\">kernel_size</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">4</span>, <span class=\"pl-v\">stride</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">2</span>, <span class=\"pl-v\">padding</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">1</span>).cuda()\n    x <span class=\"pl-k\">=</span> Variable(torch.randn(<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">5</span>).cuda())\n    <span class=\"pl-k\">return</span> conv(x)\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">batch_norm_missing_var</span>():\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> in 0.3 it thorws RuntimeError(_Map_base::at)</span>\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> it is better now RuntimeError(Variable data has to be a tensor, but got Variable)</span>\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> but still somewhat confusing.</span>\n    F.batch_norm(\n        Variable(torch.randn(<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">2</span>)),   <span class=\"pl-c\"><span class=\"pl-c\">#</span> input</span>\n        torch.zeros(<span class=\"pl-c1\">2</span>),            <span class=\"pl-c\"><span class=\"pl-c\">#</span> running mean</span>\n        <span class=\"pl-c\"><span class=\"pl-c\">#</span>torch.zeros(2),          # running var</span>\n        Variable(torch.ones(<span class=\"pl-c1\">2</span>)),  <span class=\"pl-c\"><span class=\"pl-c\">#</span> gain</span>\n        Variable(torch.zeros(<span class=\"pl-c1\">2</span>)),  <span class=\"pl-c\"><span class=\"pl-c\">#</span> bias</span>\n        <span class=\"pl-c1\">True</span>,                      <span class=\"pl-c\"><span class=\"pl-c\">#</span> is_training</span>\n        <span class=\"pl-c1\">0.1</span>,                       <span class=\"pl-c\"><span class=\"pl-c\">#</span> 1 - momentum</span>\n        <span class=\"pl-c1\">1e-5</span>,                      <span class=\"pl-c\"><span class=\"pl-c\">#</span> epsilon</span>\n    )</pre></div>\n<p>full script: <a href=\"https://gist.github.com/SsnL/3f491d7cd47c3729414d5dde481f72ba\">https://gist.github.com/SsnL/3f491d7cd47c3729414d5dde481f72ba</a></p>\n<ul>\n<li>PyTorch version: master</li>\n<li>How you installed PyTorch (conda, pip, source): source</li>\n<li>Python version: py3</li>\n<li>CUDA/cuDNN version: 8.0</li>\n<li>GPU models and configuration: tesla m40 *2</li>\n</ul>", "body_text": "There are some weird error messages when using convolutional modules:\ndef conv_cuda_kernel_size_check():\n    # RuntimeError(Expected tensor for argument #1 'input' to have the same dimension\n    # as tensor for 'result'; but 4 does not equal 2 (while checking arguments for cudnn_convolution))\n    conv = nn.Conv2d(1, 1, kernel_size=4, padding=1).cuda()\n    x = Variable(torch.randn(1, 1, 1, 5).cuda())\n    return conv(x)\n\ndef conv2d_thcunn_kernel_size_check_with_stride():\n    # 2d case is expected\n    # RuntimeError(Calculated input size: (3 x 7). Kernel size: (4 x 4). Kernel size\n    # can't greater than actual input size at /home/ssnl/sftp/pytorch/aten/src/THCUNN/generic/SpatialConvolutionMM.cu:48)\n    try:\n        torch.backends.cudnn.enabled = False\n        conv = nn.Conv2d(1, 1, kernel_size=4, stride=2, padding=1).cuda()\n        x = Variable(torch.randn(1, 1, 1, 5).cuda())\n        return conv(x)\n    finally:\n        torch.backends.cudnn.enabled = True\n\ndef conv3d_thcunn_kernel_size_check_with_stride():\n    # 3d case has no error (unexpected)\n    try:\n        torch.backends.cudnn.enabled = False\n        conv = nn.Conv3d(1, 1, kernel_size=4, stride=2, padding=1).cuda()\n        x = Variable(torch.randn(1, 1, 1, 5, 5).cuda())\n        return conv(x)\n    finally:\n        torch.backends.cudnn.enabled = True\n\ndef conv_cudnn_kernel_size_check_with_stride():\n    # both 2d and 3d give CUDNN_STATUS_BAD_PARAM\n    conv = nn.Conv2d(1, 1, kernel_size=4, stride=2, padding=1).cuda()\n    x = Variable(torch.randn(1, 1, 1, 5).cuda())\n    return conv(x)\n\ndef batch_norm_missing_var():\n    # in 0.3 it thorws RuntimeError(_Map_base::at)\n    # it is better now RuntimeError(Variable data has to be a tensor, but got Variable)\n    # but still somewhat confusing.\n    F.batch_norm(\n        Variable(torch.randn(1, 2, 2)),   # input\n        torch.zeros(2),            # running mean\n        #torch.zeros(2),          # running var\n        Variable(torch.ones(2)),  # gain\n        Variable(torch.zeros(2)),  # bias\n        True,                      # is_training\n        0.1,                       # 1 - momentum\n        1e-5,                      # epsilon\n    )\nfull script: https://gist.github.com/SsnL/3f491d7cd47c3729414d5dde481f72ba\n\nPyTorch version: master\nHow you installed PyTorch (conda, pip, source): source\nPython version: py3\nCUDA/cuDNN version: 8.0\nGPU models and configuration: tesla m40 *2", "body": "There are some weird error messages when using convolutional modules:\r\n\r\n\r\n```python\r\ndef conv_cuda_kernel_size_check():\r\n    # RuntimeError(Expected tensor for argument #1 'input' to have the same dimension\r\n    # as tensor for 'result'; but 4 does not equal 2 (while checking arguments for cudnn_convolution))\r\n    conv = nn.Conv2d(1, 1, kernel_size=4, padding=1).cuda()\r\n    x = Variable(torch.randn(1, 1, 1, 5).cuda())\r\n    return conv(x)\r\n\r\ndef conv2d_thcunn_kernel_size_check_with_stride():\r\n    # 2d case is expected\r\n    # RuntimeError(Calculated input size: (3 x 7). Kernel size: (4 x 4). Kernel size\r\n    # can't greater than actual input size at /home/ssnl/sftp/pytorch/aten/src/THCUNN/generic/SpatialConvolutionMM.cu:48)\r\n    try:\r\n        torch.backends.cudnn.enabled = False\r\n        conv = nn.Conv2d(1, 1, kernel_size=4, stride=2, padding=1).cuda()\r\n        x = Variable(torch.randn(1, 1, 1, 5).cuda())\r\n        return conv(x)\r\n    finally:\r\n        torch.backends.cudnn.enabled = True\r\n\r\ndef conv3d_thcunn_kernel_size_check_with_stride():\r\n    # 3d case has no error (unexpected)\r\n    try:\r\n        torch.backends.cudnn.enabled = False\r\n        conv = nn.Conv3d(1, 1, kernel_size=4, stride=2, padding=1).cuda()\r\n        x = Variable(torch.randn(1, 1, 1, 5, 5).cuda())\r\n        return conv(x)\r\n    finally:\r\n        torch.backends.cudnn.enabled = True\r\n\r\ndef conv_cudnn_kernel_size_check_with_stride():\r\n    # both 2d and 3d give CUDNN_STATUS_BAD_PARAM\r\n    conv = nn.Conv2d(1, 1, kernel_size=4, stride=2, padding=1).cuda()\r\n    x = Variable(torch.randn(1, 1, 1, 5).cuda())\r\n    return conv(x)\r\n\r\ndef batch_norm_missing_var():\r\n    # in 0.3 it thorws RuntimeError(_Map_base::at)\r\n    # it is better now RuntimeError(Variable data has to be a tensor, but got Variable)\r\n    # but still somewhat confusing.\r\n    F.batch_norm(\r\n        Variable(torch.randn(1, 2, 2)),   # input\r\n        torch.zeros(2),            # running mean\r\n        #torch.zeros(2),          # running var\r\n        Variable(torch.ones(2)),  # gain\r\n        Variable(torch.zeros(2)),  # bias\r\n        True,                      # is_training\r\n        0.1,                       # 1 - momentum\r\n        1e-5,                      # epsilon\r\n    )\r\n```\r\nfull script: https://gist.github.com/SsnL/3f491d7cd47c3729414d5dde481f72ba\r\n\r\n- PyTorch version: master\r\n- How you installed PyTorch (conda, pip, source): source\r\n- Python version: py3\r\n- CUDA/cuDNN version: 8.0\r\n- GPU models and configuration: tesla m40 *2"}