{"url": "https://api.github.com/repos/pytorch/pytorch/issues/4107", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/4107/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/4107/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/4107/events", "html_url": "https://github.com/pytorch/pytorch/issues/4107", "id": 280924943, "node_id": "MDU6SXNzdWUyODA5MjQ5NDM=", "number": 4107, "title": "CUDNN_STATUS_NOT_SUPPORTED for large matrix input", "user": {"login": "nikostr", "id": 11029073, "node_id": "MDQ6VXNlcjExMDI5MDcz", "avatar_url": "https://avatars2.githubusercontent.com/u/11029073?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikostr", "html_url": "https://github.com/nikostr", "followers_url": "https://api.github.com/users/nikostr/followers", "following_url": "https://api.github.com/users/nikostr/following{/other_user}", "gists_url": "https://api.github.com/users/nikostr/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikostr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikostr/subscriptions", "organizations_url": "https://api.github.com/users/nikostr/orgs", "repos_url": "https://api.github.com/users/nikostr/repos", "events_url": "https://api.github.com/users/nikostr/events{/privacy}", "received_events_url": "https://api.github.com/users/nikostr/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 806617721, "node_id": "MDU6TGFiZWw4MDY2MTc3MjE=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/cudnn", "name": "cudnn", "color": "fbca04", "default": false}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 17, "created_at": "2017-12-11T07:58:39Z", "updated_at": "2018-08-30T15:56:41Z", "closed_at": null, "author_association": "NONE", "body_html": "<p>The following code (adapted from <a href=\"https://discuss.pytorch.org/t/cudnn-status-not-supported-error-occurs-when-apply-autograd-grad-to-compute-high-order-differentiation/8256\" rel=\"nofollow\">https://discuss.pytorch.org/t/cudnn-status-not-supported-error-occurs-when-apply-autograd-grad-to-compute-high-order-differentiation/8256</a>) gives me a CUDNN_STATUS_NOT_SUPPORTED error. I'm running the pytorch 0.3.0 with cuDNN 7.0.4,  CUDA 9.0.176, and python 3.6.</p>\n<pre lang=\"import\" data-meta=\"torch.nn as nn\"><code>from torch.autograd import Variable, grad\nimport torch.utils.data as Data\n\nclass TestDataset(Data.Dataset):\n\n    def __init__(self):\n        self.sequences = []\n        PROBLEM_SIZE = 171 * 21\n        data = torch.rand(1,PROBLEM_SIZE,PROBLEM_SIZE)\n        label = torch.rand(PROBLEM_SIZE,PROBLEM_SIZE).round()\n        self.sequences.append((data,label))\n\n    def __len__(self):\n        return len(self.sequences)\n\n    def __getitem__(self,idx):\n        return self.sequences[idx]\n\ntrain_data = TestDataset()\n\ntrain_loader = Data.DataLoader(\n    dataset=train_data, batch_size=1, shuffle=True, num_workers=1)\n\n\nclass CNN(nn.Module):\n    def __init__(self):\n        super(CNN, self).__init__()\n        self.conv1 = nn.Conv2d(1, 1, kernel_size=3, stride=1, dilation=1, padding=1,bias=False)\n        self.conv2 = nn.Conv2d(1, 1, kernel_size=3, stride=1, dilation=2, padding=2,bias=False)\n\n    def forward(self, x):\n        x = self.conv1(x)\n        x = self.conv2(x)\n        return x\n\n\ncnn = CNN()\ncnn.cuda()\n\nloss_func = nn.BCEWithLogitsLoss()\n\nfor step, (data, label) in enumerate(train_loader):\n    input = Variable(data).cuda()\n    target = Variable(label).cuda()\n\n    output = cnn(input)[0]\n    loss = loss_func(output, target)\n\n    params = cnn.parameters()\n    g = grad(loss, params, create_graph=True)\n\n    g_sum = 0\n    for g_para in g:\n        g_sum += g_para.sum()\n\n    params = cnn.parameters()\n    hv = grad(g_sum, params, create_graph=True)\n\n    break\n</code></pre>\n<p>Running the convolutions individually works, as does running this code for smaller input matrices. I'm pretty sure the problem also occurs for sizes other than 3591 by 3591. The error I receive is the following:</p>\n<pre lang=\"Traceback\" data-meta=\"(most recent call last):\"><code>  File \"/home/n/nikostr/pfs/CompBio-DD2402/experiments/20171209/mwe.py\", line 54, in &lt;module&gt;\n    g = grad(loss, params, create_graph=True)\n  File \"/home/n/nikostr/pfs/.conda/envs/myroot/lib/python3.6/site-packages/torch/autograd/__init__.py\", line 158, in grad\n    inputs, only_inputs, allow_unused)\nRuntimeError: CUDNN_STATUS_NOT_SUPPORTED. This error may appear if you passed in a non-contiguous input.\n</code></pre>\n<p>I posted this as a question on the forums (<a href=\"https://discuss.pytorch.org/t/cudnn-status-not-supported-for-large-matrix-input/10986\" rel=\"nofollow\">https://discuss.pytorch.org/t/cudnn-status-not-supported-for-large-matrix-input/10986</a>), and it has been reproduced.</p>", "body_text": "The following code (adapted from https://discuss.pytorch.org/t/cudnn-status-not-supported-error-occurs-when-apply-autograd-grad-to-compute-high-order-differentiation/8256) gives me a CUDNN_STATUS_NOT_SUPPORTED error. I'm running the pytorch 0.3.0 with cuDNN 7.0.4,  CUDA 9.0.176, and python 3.6.\nfrom torch.autograd import Variable, grad\nimport torch.utils.data as Data\n\nclass TestDataset(Data.Dataset):\n\n    def __init__(self):\n        self.sequences = []\n        PROBLEM_SIZE = 171 * 21\n        data = torch.rand(1,PROBLEM_SIZE,PROBLEM_SIZE)\n        label = torch.rand(PROBLEM_SIZE,PROBLEM_SIZE).round()\n        self.sequences.append((data,label))\n\n    def __len__(self):\n        return len(self.sequences)\n\n    def __getitem__(self,idx):\n        return self.sequences[idx]\n\ntrain_data = TestDataset()\n\ntrain_loader = Data.DataLoader(\n    dataset=train_data, batch_size=1, shuffle=True, num_workers=1)\n\n\nclass CNN(nn.Module):\n    def __init__(self):\n        super(CNN, self).__init__()\n        self.conv1 = nn.Conv2d(1, 1, kernel_size=3, stride=1, dilation=1, padding=1,bias=False)\n        self.conv2 = nn.Conv2d(1, 1, kernel_size=3, stride=1, dilation=2, padding=2,bias=False)\n\n    def forward(self, x):\n        x = self.conv1(x)\n        x = self.conv2(x)\n        return x\n\n\ncnn = CNN()\ncnn.cuda()\n\nloss_func = nn.BCEWithLogitsLoss()\n\nfor step, (data, label) in enumerate(train_loader):\n    input = Variable(data).cuda()\n    target = Variable(label).cuda()\n\n    output = cnn(input)[0]\n    loss = loss_func(output, target)\n\n    params = cnn.parameters()\n    g = grad(loss, params, create_graph=True)\n\n    g_sum = 0\n    for g_para in g:\n        g_sum += g_para.sum()\n\n    params = cnn.parameters()\n    hv = grad(g_sum, params, create_graph=True)\n\n    break\n\nRunning the convolutions individually works, as does running this code for smaller input matrices. I'm pretty sure the problem also occurs for sizes other than 3591 by 3591. The error I receive is the following:\n  File \"/home/n/nikostr/pfs/CompBio-DD2402/experiments/20171209/mwe.py\", line 54, in <module>\n    g = grad(loss, params, create_graph=True)\n  File \"/home/n/nikostr/pfs/.conda/envs/myroot/lib/python3.6/site-packages/torch/autograd/__init__.py\", line 158, in grad\n    inputs, only_inputs, allow_unused)\nRuntimeError: CUDNN_STATUS_NOT_SUPPORTED. This error may appear if you passed in a non-contiguous input.\n\nI posted this as a question on the forums (https://discuss.pytorch.org/t/cudnn-status-not-supported-for-large-matrix-input/10986), and it has been reproduced.", "body": "The following code (adapted from https://discuss.pytorch.org/t/cudnn-status-not-supported-error-occurs-when-apply-autograd-grad-to-compute-high-order-differentiation/8256) gives me a CUDNN_STATUS_NOT_SUPPORTED error. I'm running the pytorch 0.3.0 with cuDNN 7.0.4,  CUDA 9.0.176, and python 3.6. \r\n\r\n```import torch.nn as nn\r\nfrom torch.autograd import Variable, grad\r\nimport torch.utils.data as Data\r\n\r\nclass TestDataset(Data.Dataset):\r\n\r\n    def __init__(self):\r\n        self.sequences = []\r\n        PROBLEM_SIZE = 171 * 21\r\n        data = torch.rand(1,PROBLEM_SIZE,PROBLEM_SIZE)\r\n        label = torch.rand(PROBLEM_SIZE,PROBLEM_SIZE).round()\r\n        self.sequences.append((data,label))\r\n\r\n    def __len__(self):\r\n        return len(self.sequences)\r\n\r\n    def __getitem__(self,idx):\r\n        return self.sequences[idx]\r\n\r\ntrain_data = TestDataset()\r\n\r\ntrain_loader = Data.DataLoader(\r\n    dataset=train_data, batch_size=1, shuffle=True, num_workers=1)\r\n\r\n\r\nclass CNN(nn.Module):\r\n    def __init__(self):\r\n        super(CNN, self).__init__()\r\n        self.conv1 = nn.Conv2d(1, 1, kernel_size=3, stride=1, dilation=1, padding=1,bias=False)\r\n        self.conv2 = nn.Conv2d(1, 1, kernel_size=3, stride=1, dilation=2, padding=2,bias=False)\r\n\r\n    def forward(self, x):\r\n        x = self.conv1(x)\r\n        x = self.conv2(x)\r\n        return x\r\n\r\n\r\ncnn = CNN()\r\ncnn.cuda()\r\n\r\nloss_func = nn.BCEWithLogitsLoss()\r\n\r\nfor step, (data, label) in enumerate(train_loader):\r\n    input = Variable(data).cuda()\r\n    target = Variable(label).cuda()\r\n\r\n    output = cnn(input)[0]\r\n    loss = loss_func(output, target)\r\n\r\n    params = cnn.parameters()\r\n    g = grad(loss, params, create_graph=True)\r\n\r\n    g_sum = 0\r\n    for g_para in g:\r\n        g_sum += g_para.sum()\r\n\r\n    params = cnn.parameters()\r\n    hv = grad(g_sum, params, create_graph=True)\r\n\r\n    break\r\n``` \r\n\r\nRunning the convolutions individually works, as does running this code for smaller input matrices. I'm pretty sure the problem also occurs for sizes other than 3591 by 3591. The error I receive is the following:\r\n\r\n```Traceback (most recent call last):\r\n  File \"/home/n/nikostr/pfs/CompBio-DD2402/experiments/20171209/mwe.py\", line 54, in <module>\r\n    g = grad(loss, params, create_graph=True)\r\n  File \"/home/n/nikostr/pfs/.conda/envs/myroot/lib/python3.6/site-packages/torch/autograd/__init__.py\", line 158, in grad\r\n    inputs, only_inputs, allow_unused)\r\nRuntimeError: CUDNN_STATUS_NOT_SUPPORTED. This error may appear if you passed in a non-contiguous input.\r\n```\r\n\r\nI posted this as a question on the forums (https://discuss.pytorch.org/t/cudnn-status-not-supported-for-large-matrix-input/10986), and it has been reproduced."}