{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/397423556", "html_url": "https://github.com/pytorch/pytorch/issues/7903#issuecomment-397423556", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/7903", "id": 397423556, "node_id": "MDEyOklzc3VlQ29tbWVudDM5NzQyMzU1Ng==", "user": {"login": "cpuhrsch", "id": 1716488, "node_id": "MDQ6VXNlcjE3MTY0ODg=", "avatar_url": "https://avatars1.githubusercontent.com/u/1716488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cpuhrsch", "html_url": "https://github.com/cpuhrsch", "followers_url": "https://api.github.com/users/cpuhrsch/followers", "following_url": "https://api.github.com/users/cpuhrsch/following{/other_user}", "gists_url": "https://api.github.com/users/cpuhrsch/gists{/gist_id}", "starred_url": "https://api.github.com/users/cpuhrsch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cpuhrsch/subscriptions", "organizations_url": "https://api.github.com/users/cpuhrsch/orgs", "repos_url": "https://api.github.com/users/cpuhrsch/repos", "events_url": "https://api.github.com/users/cpuhrsch/events{/privacy}", "received_events_url": "https://api.github.com/users/cpuhrsch/received_events", "type": "User", "site_admin": false}, "created_at": "2018-06-14T20:12:28Z", "updated_at": "2018-06-14T20:23:04Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=20233731\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/mingfeima\">@mingfeima</a> - Thank you for looking into this further and the update!</p>\n<p>I looked into <a href=\"https://github.com/pytorch/pytorch/pull/8255\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/pytorch/pytorch/pull/8255/hovercard\">removing tbb and replacing it with openmp</a> and then running the benchmark. I get much better performance (i.e. am able to close the perf gap) when doing so. You could give this a try as well if you like. We generally prefer tbb for many reasons, but might need to (temporarily) go ahead with this if it turns out to be the main source for this and then reintroduce it as part of a larger effort.</p>\n<p>Generally we can't expect the user to set or know about things like <code>KMP_BLOCKTIME</code> or<br>\n<code>KMP_AFFINITY</code>, so we'd either need to set them statically or change our setup so that they are not necessary.</p>\n<p>EDIT: <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=20233731\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/mingfeima\">@mingfeima</a> - I assume this is mkldnn through your channel? I've also seen some issues where it won't set the rpath to link against openmp and mklml</p>\n<pre><code>/usr/bin/ld: warning: libmklml_intel.so, needed by //private/home/cpuhrsch/miniconda2/lib/libmkldnn.so.0, not found (try using -rpath or -rpath-link)\n/usr/bin/ld: warning: libiomp5.so, needed by //private/home/cpuhrsch/miniconda2/lib/libmkldnn.so.0, not found (try using -rpath or -rpath-link)\n</code></pre>\n<p>It can be fixed by setting my LD_LIBRARY_PATH to point to <code>/private/home/cpuhrsch/miniconda2/lib</code>, but I'm wondering if this is something you could adjust as part of your conda package in general? To give you more context, I'm building a binary against libcaffe2.so within a repository outside of pytorch, which was build using mkldnn using <a href=\"https://github.com/pytorch/benchmark/blob/f8fb533f5c62f0766eef2e67d372e94b8be7312f/timing/cpp/CMakeLists.txt\">this cmake setup</a>.</p>", "body_text": "@mingfeima - Thank you for looking into this further and the update!\nI looked into removing tbb and replacing it with openmp and then running the benchmark. I get much better performance (i.e. am able to close the perf gap) when doing so. You could give this a try as well if you like. We generally prefer tbb for many reasons, but might need to (temporarily) go ahead with this if it turns out to be the main source for this and then reintroduce it as part of a larger effort.\nGenerally we can't expect the user to set or know about things like KMP_BLOCKTIME or\nKMP_AFFINITY, so we'd either need to set them statically or change our setup so that they are not necessary.\nEDIT: @mingfeima - I assume this is mkldnn through your channel? I've also seen some issues where it won't set the rpath to link against openmp and mklml\n/usr/bin/ld: warning: libmklml_intel.so, needed by //private/home/cpuhrsch/miniconda2/lib/libmkldnn.so.0, not found (try using -rpath or -rpath-link)\n/usr/bin/ld: warning: libiomp5.so, needed by //private/home/cpuhrsch/miniconda2/lib/libmkldnn.so.0, not found (try using -rpath or -rpath-link)\n\nIt can be fixed by setting my LD_LIBRARY_PATH to point to /private/home/cpuhrsch/miniconda2/lib, but I'm wondering if this is something you could adjust as part of your conda package in general? To give you more context, I'm building a binary against libcaffe2.so within a repository outside of pytorch, which was build using mkldnn using this cmake setup.", "body": "@mingfeima - Thank you for looking into this further and the update! \r\n\r\nI looked into [removing tbb and replacing it with openmp](https://github.com/pytorch/pytorch/pull/8255) and then running the benchmark. I get much better performance (i.e. am able to close the perf gap) when doing so. You could give this a try as well if you like. We generally prefer tbb for many reasons, but might need to (temporarily) go ahead with this if it turns out to be the main source for this and then reintroduce it as part of a larger effort.\r\n\r\nGenerally we can't expect the user to set or know about things like `KMP_BLOCKTIME` or \r\n `KMP_AFFINITY`, so we'd either need to set them statically or change our setup so that they are not necessary.\r\n\r\nEDIT: @mingfeima - I assume this is mkldnn through your channel? I've also seen some issues where it won't set the rpath to link against openmp and mklml\r\n\r\n```\r\n/usr/bin/ld: warning: libmklml_intel.so, needed by //private/home/cpuhrsch/miniconda2/lib/libmkldnn.so.0, not found (try using -rpath or -rpath-link)\r\n/usr/bin/ld: warning: libiomp5.so, needed by //private/home/cpuhrsch/miniconda2/lib/libmkldnn.so.0, not found (try using -rpath or -rpath-link)\r\n```\r\n\r\nIt can be fixed by setting my LD_LIBRARY_PATH to point to `/private/home/cpuhrsch/miniconda2/lib`, but I'm wondering if this is something you could adjust as part of your conda package in general? To give you more context, I'm building a binary against libcaffe2.so within a repository outside of pytorch, which was build using mkldnn using [this cmake setup](https://github.com/pytorch/benchmark/blob/f8fb533f5c62f0766eef2e67d372e94b8be7312f/timing/cpp/CMakeLists.txt)."}