{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/393584262", "html_url": "https://github.com/pytorch/pytorch/issues/7903#issuecomment-393584262", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/7903", "id": 393584262, "node_id": "MDEyOklzc3VlQ29tbWVudDM5MzU4NDI2Mg==", "user": {"login": "cpuhrsch", "id": 1716488, "node_id": "MDQ6VXNlcjE3MTY0ODg=", "avatar_url": "https://avatars1.githubusercontent.com/u/1716488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cpuhrsch", "html_url": "https://github.com/cpuhrsch", "followers_url": "https://api.github.com/users/cpuhrsch/followers", "following_url": "https://api.github.com/users/cpuhrsch/following{/other_user}", "gists_url": "https://api.github.com/users/cpuhrsch/gists{/gist_id}", "starred_url": "https://api.github.com/users/cpuhrsch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cpuhrsch/subscriptions", "organizations_url": "https://api.github.com/users/cpuhrsch/orgs", "repos_url": "https://api.github.com/users/cpuhrsch/repos", "events_url": "https://api.github.com/users/cpuhrsch/events{/privacy}", "received_events_url": "https://api.github.com/users/cpuhrsch/received_events", "type": "User", "site_admin": false}, "created_at": "2018-05-31T16:07:53Z", "updated_at": "2018-05-31T23:01:56Z", "author_association": "CONTRIBUTOR", "body_html": "<p>I've also discovered that we set a relatively high grain size for functions such as tanh. <a href=\"https://github.com/pytorch/pytorch/pull/7941\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/pytorch/pytorch/pull/7941/hovercard\">Lowering that threshold</a> has helped the performance a lot. The gap effectively disappears on the larger LSTM example (which is commented out), however for the smaller example the issue prevails. It's also important to explicitly call \"torch.set_num_threads\" at the beginning of the program.</p>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=7475946\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/anton-malakhov\">@anton-malakhov</a> Thank you for the pointer! I'll look into this while further investigating the regression on the small LSTM example.</p>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=33112206\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/juliusshufan\">@juliusshufan</a> I've ran the <a href=\"https://github.com/MlWoo/PyTorch-benchmark/tree/master/berkely\">berkely example</a> within the <a href=\"https://github.com/MlWoo/PyTorch-benchmark\">PyTorch-benchmark repo</a> and didn't find a significant perf difference even without adjusting the grain size. Could you kindly post the commands you ran so I can try reproducing this regression locally?</p>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=20233731\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/mingfeima\">@mingfeima</a> I'm currently extending <a href=\"https://github.com/pytorch/benchmark\">the pytorch benchmark repo</a>. We have indeed mostly focused on ad-hoc microbenchmarks to evaluate the performance. I'm working on a more rigorous and reproducible setup around this that we can hopefully all agree on. I'll also include the examples in the <a href=\"https://github.com/MlWoo/PyTorch-benchmark\">PyTorch-benchmark repo</a>.</p>", "body_text": "I've also discovered that we set a relatively high grain size for functions such as tanh. Lowering that threshold has helped the performance a lot. The gap effectively disappears on the larger LSTM example (which is commented out), however for the smaller example the issue prevails. It's also important to explicitly call \"torch.set_num_threads\" at the beginning of the program.\n@anton-malakhov Thank you for the pointer! I'll look into this while further investigating the regression on the small LSTM example.\n@juliusshufan I've ran the berkely example within the PyTorch-benchmark repo and didn't find a significant perf difference even without adjusting the grain size. Could you kindly post the commands you ran so I can try reproducing this regression locally?\n@mingfeima I'm currently extending the pytorch benchmark repo. We have indeed mostly focused on ad-hoc microbenchmarks to evaluate the performance. I'm working on a more rigorous and reproducible setup around this that we can hopefully all agree on. I'll also include the examples in the PyTorch-benchmark repo.", "body": "I've also discovered that we set a relatively high grain size for functions such as tanh. [Lowering that threshold](https://github.com/pytorch/pytorch/pull/7941) has helped the performance a lot. The gap effectively disappears on the larger LSTM example (which is commented out), however for the smaller example the issue prevails. It's also important to explicitly call \"torch.set_num_threads\" at the beginning of the program.\r\n\r\n@anton-malakhov Thank you for the pointer! I'll look into this while further investigating the regression on the small LSTM example.\r\n\r\n@juliusshufan I've ran the [berkely example](https://github.com/MlWoo/PyTorch-benchmark/tree/master/berkely) within the [PyTorch-benchmark repo](https://github.com/MlWoo/PyTorch-benchmark) and didn't find a significant perf difference even without adjusting the grain size. Could you kindly post the commands you ran so I can try reproducing this regression locally?\r\n\r\n@mingfeima I'm currently extending [the pytorch benchmark repo](https://github.com/pytorch/benchmark). We have indeed mostly focused on ad-hoc microbenchmarks to evaluate the performance. I'm working on a more rigorous and reproducible setup around this that we can hopefully all agree on. I'll also include the examples in the [PyTorch-benchmark repo](https://github.com/MlWoo/PyTorch-benchmark)."}