{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/418811336", "html_url": "https://github.com/pytorch/pytorch/pull/11230#issuecomment-418811336", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/11230", "id": 418811336, "node_id": "MDEyOklzc3VlQ29tbWVudDQxODgxMTMzNg==", "user": {"login": "erikbrinkman", "id": 858926, "node_id": "MDQ6VXNlcjg1ODkyNg==", "avatar_url": "https://avatars1.githubusercontent.com/u/858926?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erikbrinkman", "html_url": "https://github.com/erikbrinkman", "followers_url": "https://api.github.com/users/erikbrinkman/followers", "following_url": "https://api.github.com/users/erikbrinkman/following{/other_user}", "gists_url": "https://api.github.com/users/erikbrinkman/gists{/gist_id}", "starred_url": "https://api.github.com/users/erikbrinkman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erikbrinkman/subscriptions", "organizations_url": "https://api.github.com/users/erikbrinkman/orgs", "repos_url": "https://api.github.com/users/erikbrinkman/repos", "events_url": "https://api.github.com/users/erikbrinkman/events{/privacy}", "received_events_url": "https://api.github.com/users/erikbrinkman/received_events", "type": "User", "site_admin": false}, "created_at": "2018-09-05T17:20:45Z", "updated_at": "2018-09-05T17:21:23Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1716488\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/cpuhrsch\">@cpuhrsch</a> In general I've just been using ipythons <code>%timeit</code> to run the command at least 10 times and report the timing.</p>\n<p>The script for the comparison to scipy looks something like:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> torch\n<span class=\"pl-k\">import</span> scipy.spatial.distance <span class=\"pl-k\">as</span> spd\n\nxt <span class=\"pl-k\">=</span> torch.randn(<span class=\"pl-c1\">2048</span>, <span class=\"pl-c1\">2048</span>)\nxn <span class=\"pl-k\">=</span> xt.numpy()\n\n<span class=\"pl-k\">for</span> p <span class=\"pl-k\">in</span> [<span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">3</span>, <span class=\"pl-c1\">float</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>inf<span class=\"pl-pds\">'</span></span>)]:\n    <span class=\"pl-k\">if</span> p <span class=\"pl-k\">==</span> <span class=\"pl-c1\">0</span>:\n        spdist <span class=\"pl-k\">=</span> <span class=\"pl-k\">lambda</span> <span class=\"pl-smi\">x</span>: spd.pdist(x, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>hamming<span class=\"pl-pds\">'</span></span>) <span class=\"pl-k\">*</span> x.shape[<span class=\"pl-c1\">1</span>]\n    <span class=\"pl-k\">elif</span> p <span class=\"pl-k\">==</span> <span class=\"pl-c1\">float</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>inf<span class=\"pl-pds\">'</span></span>):\n        spdist <span class=\"pl-k\">=</span> <span class=\"pl-k\">lambda</span> <span class=\"pl-smi\">x</span>: spd.pdist(x, <span class=\"pl-k\">lambda</span> <span class=\"pl-smi\">row</span>, <span class=\"pl-smi\">col</span>: np.abs(row <span class=\"pl-k\">-</span> col).max())\n    <span class=\"pl-k\">else</span>:\n        spdist <span class=\"pl-k\">=</span> <span class=\"pl-k\">lambda</span> <span class=\"pl-smi\">x</span>: spd.pdist(x, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>minkowski<span class=\"pl-pds\">'</span></span>, <span class=\"pl-v\">p</span><span class=\"pl-k\">=</span>p)\n\n    <span class=\"pl-c1\">print</span>(p)\n    <span class=\"pl-k\">%</span>timeit torch.pdist(xt, p)\n    <span class=\"pl-k\">%</span>timeit spdist(xn)</pre></div>", "body_text": "@cpuhrsch In general I've just been using ipythons %timeit to run the command at least 10 times and report the timing.\nThe script for the comparison to scipy looks something like:\nimport torch\nimport scipy.spatial.distance as spd\n\nxt = torch.randn(2048, 2048)\nxn = xt.numpy()\n\nfor p in [0, 1, 2, 3, float('inf')]:\n    if p == 0:\n        spdist = lambda x: spd.pdist(x, 'hamming') * x.shape[1]\n    elif p == float('inf'):\n        spdist = lambda x: spd.pdist(x, lambda row, col: np.abs(row - col).max())\n    else:\n        spdist = lambda x: spd.pdist(x, 'minkowski', p=p)\n\n    print(p)\n    %timeit torch.pdist(xt, p)\n    %timeit spdist(xn)", "body": "@cpuhrsch In general I've just been using ipythons `%timeit` to run the command at least 10 times and report the timing.\r\n\r\nThe script for the comparison to scipy looks something like:\r\n\r\n```python\r\nimport torch\r\nimport scipy.spatial.distance as spd\r\n\r\nxt = torch.randn(2048, 2048)\r\nxn = xt.numpy()\r\n\r\nfor p in [0, 1, 2, 3, float('inf')]:\r\n    if p == 0:\r\n        spdist = lambda x: spd.pdist(x, 'hamming') * x.shape[1]\r\n    elif p == float('inf'):\r\n        spdist = lambda x: spd.pdist(x, lambda row, col: np.abs(row - col).max())\r\n    else:\r\n        spdist = lambda x: spd.pdist(x, 'minkowski', p=p)\r\n\r\n    print(p)\r\n    %timeit torch.pdist(xt, p)\r\n    %timeit spdist(xn)\r\n```"}