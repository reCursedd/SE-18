{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/210010426", "pull_request_review_id": 146137432, "id": 210010426, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMDAxMDQyNg==", "diff_hunk": "@@ -20,6 +20,11 @@ std::unordered_set<Symbol> skip_list = {\n   //FIXME Same problem as in DCE - cpp & python PythonOp and CppOp should be\n   //FIXME treated as having side effects but ONNX depends on them being removed\n   prim::Print,\n+  // A memory fence implies a value is being mutated, so constant propagation\n+  // must be disallowed.", "path": "torch/csrc/jit/passes/constant_propagation.cpp", "position": 5, "original_position": 5, "commit_id": "f2f80212356100179d9b3a4b06e5d8d964a9342c", "original_commit_id": "ed7ae9a02e7cff3a5178513b58dec6466a83913e", "user": {"login": "suo", "id": 1617424, "node_id": "MDQ6VXNlcjE2MTc0MjQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/1617424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/suo", "html_url": "https://github.com/suo", "followers_url": "https://api.github.com/users/suo/followers", "following_url": "https://api.github.com/users/suo/following{/other_user}", "gists_url": "https://api.github.com/users/suo/gists{/gist_id}", "starred_url": "https://api.github.com/users/suo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/suo/subscriptions", "organizations_url": "https://api.github.com/users/suo/orgs", "repos_url": "https://api.github.com/users/suo/repos", "events_url": "https://api.github.com/users/suo/events{/privacy}", "received_events_url": "https://api.github.com/users/suo/received_events", "type": "User", "site_admin": false}, "body": "P59934503 is an example that gets tripped up on constant prop.\r\n\r\nBasically, if you have an example like this:\r\n```\r\na = [0, 1]\r\na.append(2)\r\na.append(3)\r\nreturn a == [0, 1, 2, 3]\r\n```\r\nthe constant value of `a` will get propagated to the memory fence before both appends, leading to the first append getting \"dropped\".", "created_at": "2018-08-14T16:04:25Z", "updated_at": "2018-11-23T15:49:18Z", "html_url": "https://github.com/pytorch/pytorch/pull/10500#discussion_r210010426", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/10500", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/210010426"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/10500#discussion_r210010426"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/10500"}}, "body_html": "<p>P59934503 is an example that gets tripped up on constant prop.</p>\n<p>Basically, if you have an example like this:</p>\n<pre><code>a = [0, 1]\na.append(2)\na.append(3)\nreturn a == [0, 1, 2, 3]\n</code></pre>\n<p>the constant value of <code>a</code> will get propagated to the memory fence before both appends, leading to the first append getting \"dropped\".</p>", "body_text": "P59934503 is an example that gets tripped up on constant prop.\nBasically, if you have an example like this:\na = [0, 1]\na.append(2)\na.append(3)\nreturn a == [0, 1, 2, 3]\n\nthe constant value of a will get propagated to the memory fence before both appends, leading to the first append getting \"dropped\".", "in_reply_to_id": 209984346}