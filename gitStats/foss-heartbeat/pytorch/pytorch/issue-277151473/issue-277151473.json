{"url": "https://api.github.com/repos/pytorch/pytorch/issues/3908", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/3908/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/3908/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/3908/events", "html_url": "https://github.com/pytorch/pytorch/pull/3908", "id": 277151473, "node_id": "MDExOlB1bGxSZXF1ZXN0MTU0OTA0MzAy", "number": 3908, "title": "Implement python scalar conversions via ATen; allow localScalar if numel == 1", "user": {"login": "gchanan", "id": 3768583, "node_id": "MDQ6VXNlcjM3Njg1ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3768583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gchanan", "html_url": "https://github.com/gchanan", "followers_url": "https://api.github.com/users/gchanan/followers", "following_url": "https://api.github.com/users/gchanan/following{/other_user}", "gists_url": "https://api.github.com/users/gchanan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gchanan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gchanan/subscriptions", "organizations_url": "https://api.github.com/users/gchanan/orgs", "repos_url": "https://api.github.com/users/gchanan/repos", "events_url": "https://api.github.com/users/gchanan/events{/privacy}", "received_events_url": "https://api.github.com/users/gchanan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-11-27T20:07:13Z", "updated_at": "2018-11-23T15:36:53Z", "closed_at": "2017-11-28T17:56:52Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/3908", "html_url": "https://github.com/pytorch/pytorch/pull/3908", "diff_url": "https://github.com/pytorch/pytorch/pull/3908.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/3908.patch"}, "body_html": "<p>This implements the following:<br>\n[ATen]</p>\n<ol>\n<li>Loosens the requirement on localScalar() that the tensor is a Scalar; now it only needs to be one element; Scalar(...) still has the old requirement because it makes the code simpler (and people probably don't call that constructor directly anymore because we provide nicer conversion functions).</li>\n<li>Implement toCDouble, toCFloat, etc. so that it calls through localScalar() and gets the 1-element property; this is to match the pytorch scalar conversion API and <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"276141301\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/3839\" data-hovercard-type=\"issue\" data-hovercard-url=\"/pytorch/pytorch/issues/3839/hovercard\" href=\"https://github.com/pytorch/pytorch/issues/3839\">#3839</a>.</li>\n<li>Add a is_nonzero native function which is functionally equivalent to toCBool, which doesn't exist because we don't have bool tensors (it adds a nicer error message as well).</li>\n</ol>\n<p>[pytorch]<br>\nUses the above ATen changes to implement Variable scalar conversions via ATen; there is a bit of complication around conversion from double to (python) int, because we want to avoid the ATen code path in that case because PyLongs don't overflow.  Also added a bunch of tests.</p>", "body_text": "This implements the following:\n[ATen]\n\nLoosens the requirement on localScalar() that the tensor is a Scalar; now it only needs to be one element; Scalar(...) still has the old requirement because it makes the code simpler (and people probably don't call that constructor directly anymore because we provide nicer conversion functions).\nImplement toCDouble, toCFloat, etc. so that it calls through localScalar() and gets the 1-element property; this is to match the pytorch scalar conversion API and #3839.\nAdd a is_nonzero native function which is functionally equivalent to toCBool, which doesn't exist because we don't have bool tensors (it adds a nicer error message as well).\n\n[pytorch]\nUses the above ATen changes to implement Variable scalar conversions via ATen; there is a bit of complication around conversion from double to (python) int, because we want to avoid the ATen code path in that case because PyLongs don't overflow.  Also added a bunch of tests.", "body": "This implements the following:\r\n[ATen]\r\n1) Loosens the requirement on localScalar() that the tensor is a Scalar; now it only needs to be one element; Scalar(...) still has the old requirement because it makes the code simpler (and people probably don't call that constructor directly anymore because we provide nicer conversion functions).\r\n2) Implement toCDouble, toCFloat, etc. so that it calls through localScalar() and gets the 1-element property; this is to match the pytorch scalar conversion API and https://github.com/pytorch/pytorch/issues/3839.\r\n3) Add a is_nonzero native function which is functionally equivalent to toCBool, which doesn't exist because we don't have bool tensors (it adds a nicer error message as well).\r\n\r\n[pytorch]\r\nUses the above ATen changes to implement Variable scalar conversions via ATen; there is a bit of complication around conversion from double to (python) int, because we want to avoid the ATen code path in that case because PyLongs don't overflow.  Also added a bunch of tests."}