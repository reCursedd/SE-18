{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/153336038", "pull_request_review_id": 79326452, "id": 153336038, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MzMzNjAzOA==", "diff_hunk": "@@ -206,6 +206,40 @@ static PyObject * THPVariable_detach_(PyObject* self, PyObject* args)\n   END_HANDLE_TH_ERRORS\n }\n \n+static double dispatch_to_CDouble(const Tensor & self) {\n+  AutoNoGIL no_gil;\n+  AutoGPU auto_gpu(self);\n+  return self.toCDouble();\n+}\n+\n+static int64_t dispatch_to_CLong(const Tensor & self) {\n+  AutoNoGIL no_gil;\n+  AutoGPU auto_gpu(self);\n+  return self.toCLong();\n+}\n+\n+static PyObject * THPVariable_float_scalar(PyObject* self, PyObject* args) {\n+  HANDLE_TH_ERRORS\n+  auto& self_ = reinterpret_cast<THPVariable*>(self)->cdata;\n+  return wrap(dispatch_to_CDouble(self_));\n+  END_HANDLE_TH_ERRORS\n+}\n+\n+static PyObject * THPVariable_integral_scalar(PyObject* self, PyObject* args) {\n+  HANDLE_TH_ERRORS\n+  auto& self_ = reinterpret_cast<THPVariable*>(self)->cdata;\n+  if (isFloatingType(self_.type().scalarType())) {\n+    // we can't dispatch to toCLong here because we want to avoid ATen overflow checks;\n+    // the python integral type (long in python2) can't overflow.\n+    AutoGPU auto_gpu(self_);\n+    Scalar localScalar = self_.get()->localScalar();\n+    return THPUtils_packDoubleAsInt(localScalar.toDouble());", "path": "tools/autograd/templates/python_variable_methods.cpp", "position": null, "original_position": 31, "commit_id": "0e7a18a85c1b5706247332cf4f62b62993e62d57", "original_commit_id": "e2c8f8fc9c78a432b050c6453cab02f96a665c36", "user": {"login": "colesbury", "id": 655866, "node_id": "MDQ6VXNlcjY1NTg2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/655866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colesbury", "html_url": "https://github.com/colesbury", "followers_url": "https://api.github.com/users/colesbury/followers", "following_url": "https://api.github.com/users/colesbury/following{/other_user}", "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions", "organizations_url": "https://api.github.com/users/colesbury/orgs", "repos_url": "https://api.github.com/users/colesbury/repos", "events_url": "https://api.github.com/users/colesbury/events{/privacy}", "received_events_url": "https://api.github.com/users/colesbury/received_events", "type": "User", "site_admin": false}, "body": "These three lines could be:\r\n\r\n```\r\nreturn THPUtils_packDoubleAsInt(dispatch_to_CDouble(self_));\r\n```\r\n\r\nThis has the advantage of releasing the GIL before doing a potentially blocking op.", "created_at": "2017-11-27T21:57:22Z", "updated_at": "2018-11-23T15:36:53Z", "html_url": "https://github.com/pytorch/pytorch/pull/3908#discussion_r153336038", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/3908", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/153336038"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/3908#discussion_r153336038"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/3908"}}, "body_html": "<p>These three lines could be:</p>\n<pre><code>return THPUtils_packDoubleAsInt(dispatch_to_CDouble(self_));\n</code></pre>\n<p>This has the advantage of releasing the GIL before doing a potentially blocking op.</p>", "body_text": "These three lines could be:\nreturn THPUtils_packDoubleAsInt(dispatch_to_CDouble(self_));\n\nThis has the advantage of releasing the GIL before doing a potentially blocking op."}