{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/227168543", "pull_request_review_id": 167146445, "id": 227168543, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNzE2ODU0Mw==", "diff_hunk": "@@ -1240,6 +1231,44 @@ inline Device Tensor::device() const {\n   return Device(type().device_type(), type().is_cuda() ? get_device() : -1);\n }\n \n+inline int64_t Tensor::get_device() const {\n+  // NB: This gets called a lot so we special case it here instead of dispatching\n+  // to a native function.\n+  const auto& tid = impl_->type_id();\n+  if (tid == CUDATensorId()) {\n+    // TODO: #12934 Investigate caching device on TensorImpl for performance\n+    return impl_->storage().device().index();\n+  } else if (tid == SparseCUDATensorId()) {\n+    return _values().get_device();\n+  } else {\n+    AT_ERROR(\"get_device is not implemented for type \", type());\n+  }\n+}\n+\n+inline int64_t get_device(Tensor self) {\n+  return self.get_device();\n+}\n+\n+inline bool Tensor::is_cuda() const {\n+  // NB: avoids dispatch for perf reasons\n+  const auto& tid = impl_->type_id();\n+  return tid == CUDATensorId() || tid == SparseCUDATensorId();\n+}\n+\n+inline bool is_cuda(Tensor self) {\n+  return self.is_cuda();\n+}\n+\n+inline bool Tensor::is_sparse() const {", "path": "aten/src/ATen/core/TensorMethods.h", "position": 52, "original_position": 62, "commit_id": "5cc7fac6ea3e8ceac89da60d6485ce6f53626213", "original_commit_id": "79f77c643d4f7be19ca5f24f2c0912ecbea275b2", "user": {"login": "zou3519", "id": 5652049, "node_id": "MDQ6VXNlcjU2NTIwNDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/5652049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zou3519", "html_url": "https://github.com/zou3519", "followers_url": "https://api.github.com/users/zou3519/followers", "following_url": "https://api.github.com/users/zou3519/following{/other_user}", "gists_url": "https://api.github.com/users/zou3519/gists{/gist_id}", "starred_url": "https://api.github.com/users/zou3519/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zou3519/subscriptions", "organizations_url": "https://api.github.com/users/zou3519/orgs", "repos_url": "https://api.github.com/users/zou3519/repos", "events_url": "https://api.github.com/users/zou3519/events{/privacy}", "received_events_url": "https://api.github.com/users/zou3519/received_events", "type": "User", "site_admin": false}, "body": "Do you want all of `{ is_sparse, is_cuda, get_device }` to live in `TensorImpl`?", "created_at": "2018-10-22T23:07:49Z", "updated_at": "2018-11-23T15:53:23Z", "html_url": "https://github.com/pytorch/pytorch/pull/12841#discussion_r227168543", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/12841", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/227168543"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/12841#discussion_r227168543"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/12841"}}, "body_html": "<p>Do you want all of <code>{ is_sparse, is_cuda, get_device }</code> to live in <code>TensorImpl</code>?</p>", "body_text": "Do you want all of { is_sparse, is_cuda, get_device } to live in TensorImpl?", "in_reply_to_id": 227160303}