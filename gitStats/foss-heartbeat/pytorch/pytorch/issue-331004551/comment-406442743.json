{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/406442743", "html_url": "https://github.com/pytorch/pytorch/pull/8322#issuecomment-406442743", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/8322", "id": 406442743, "node_id": "MDEyOklzc3VlQ29tbWVudDQwNjQ0Mjc0Mw==", "user": {"login": "elistevens", "id": 138016, "node_id": "MDQ6VXNlcjEzODAxNg==", "avatar_url": "https://avatars0.githubusercontent.com/u/138016?v=4", "gravatar_id": "", "url": "https://api.github.com/users/elistevens", "html_url": "https://github.com/elistevens", "followers_url": "https://api.github.com/users/elistevens/followers", "following_url": "https://api.github.com/users/elistevens/following{/other_user}", "gists_url": "https://api.github.com/users/elistevens/gists{/gist_id}", "starred_url": "https://api.github.com/users/elistevens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/elistevens/subscriptions", "organizations_url": "https://api.github.com/users/elistevens/orgs", "repos_url": "https://api.github.com/users/elistevens/repos", "events_url": "https://api.github.com/users/elistevens/events{/privacy}", "received_events_url": "https://api.github.com/users/elistevens/received_events", "type": "User", "site_admin": false}, "created_at": "2018-07-19T23:19:24Z", "updated_at": "2018-07-19T23:19:24Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=5674597\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/SsnL\">@SsnL</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=4063635\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/yf225\">@yf225</a> I've added tests and cleaned up the implementation.</p>\n<p>Note that I've removed all of the \"if <code>theta.is_cuda</code> then we must use CuDNN\" checks. The <code>affine_grid_generator</code> does CuDNN dispatch, and if the control flow gets to <code>AffineGridGenerator</code> at all, it will happily work on CPU or CUDA tensors without complaint (while not implemented ATM, this would make it easier to verify that the python version outputs match the CuDNN outputs).</p>\n<p>Are there any other changes desired?</p>", "body_text": "@SsnL @yf225 I've added tests and cleaned up the implementation.\nNote that I've removed all of the \"if theta.is_cuda then we must use CuDNN\" checks. The affine_grid_generator does CuDNN dispatch, and if the control flow gets to AffineGridGenerator at all, it will happily work on CPU or CUDA tensors without complaint (while not implemented ATM, this would make it easier to verify that the python version outputs match the CuDNN outputs).\nAre there any other changes desired?", "body": "@SsnL @yf225 I've added tests and cleaned up the implementation.\r\n\r\nNote that I've removed all of the \"if `theta.is_cuda` then we must use CuDNN\" checks. The `affine_grid_generator` does CuDNN dispatch, and if the control flow gets to `AffineGridGenerator` at all, it will happily work on CPU or CUDA tensors without complaint (while not implemented ATM, this would make it easier to verify that the python version outputs match the CuDNN outputs).\r\n\r\nAre there any other changes desired?"}