{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/194271316", "pull_request_review_id": 127410853, "id": 194271316, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDI3MTMxNg==", "diff_hunk": "@@ -93,35 +93,74 @@ def _enforce_cudnn(input):\n     @staticmethod\n     def forward(ctx, theta, size):\n         assert type(size) == torch.Size\n-        N, C, H, W = size\n-        ctx.size = size\n-        if theta.is_cuda:\n-            AffineGridGenerator._enforce_cudnn(theta)\n-            assert False\n-        ctx.is_cuda = False\n-        base_grid = theta.new(N, H, W, 3)\n-        linear_points = torch.linspace(-1, 1, W) if W > 1 else torch.Tensor([-1])\n-        base_grid[:, :, :, 0] = torch.ger(torch.ones(H), linear_points).expand_as(base_grid[:, :, :, 0])\n-        linear_points = torch.linspace(-1, 1, H) if H > 1 else torch.Tensor([-1])\n-        base_grid[:, :, :, 1] = torch.ger(linear_points, torch.ones(W)).expand_as(base_grid[:, :, :, 1])\n-        base_grid[:, :, :, 2] = 1\n-        ctx.base_grid = base_grid\n-        grid = torch.bmm(base_grid.view(N, H * W, 3), theta.transpose(1, 2))", "path": "torch/nn/_functions/vision.py", "position": null, "original_position": 26, "commit_id": "b74a18beaf09cc711516acc6e9b88ca97b0bb2cf", "original_commit_id": "dd64ad7838614b7e9a91d049eae333a326ae19c0", "user": {"login": "elistevens", "id": 138016, "node_id": "MDQ6VXNlcjEzODAxNg==", "avatar_url": "https://avatars0.githubusercontent.com/u/138016?v=4", "gravatar_id": "", "url": "https://api.github.com/users/elistevens", "html_url": "https://github.com/elistevens", "followers_url": "https://api.github.com/users/elistevens/followers", "following_url": "https://api.github.com/users/elistevens/following{/other_user}", "gists_url": "https://api.github.com/users/elistevens/gists{/gist_id}", "starred_url": "https://api.github.com/users/elistevens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/elistevens/subscriptions", "organizations_url": "https://api.github.com/users/elistevens/orgs", "repos_url": "https://api.github.com/users/elistevens/repos", "events_url": "https://api.github.com/users/elistevens/events{/privacy}", "received_events_url": "https://api.github.com/users/elistevens/received_events", "type": "User", "site_admin": false}, "body": "This implementation seems cleaner to me than the original, but I have not done performance testing. Should I backport this style to the 2d case?", "created_at": "2018-06-10T21:42:10Z", "updated_at": "2018-11-23T15:45:18Z", "html_url": "https://github.com/pytorch/pytorch/pull/8322#discussion_r194271316", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/8322", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/194271316"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/8322#discussion_r194271316"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/8322"}}, "body_html": "<p>This implementation seems cleaner to me than the original, but I have not done performance testing. Should I backport this style to the 2d case?</p>", "body_text": "This implementation seems cleaner to me than the original, but I have not done performance testing. Should I backport this style to the 2d case?"}