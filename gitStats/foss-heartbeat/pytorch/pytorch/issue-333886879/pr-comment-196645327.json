{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/196645327", "pull_request_review_id": 130236496, "id": 196645327, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NjY0NTMyNw==", "diff_hunk": "@@ -185,20 +186,28 @@ class TestCase(unittest.TestCase):\n     def __init__(self, method_name='runTest'):\n         super(TestCase, self).__init__(method_name)\n         # Wraps the tested method if we should do CUDA memory check.\n-        test_method = getattr(self, method_name)\n-        self._do_cuda_memory_leak_check &= getattr(test_method, '_do_cuda_memory_leak_check', True)\n-        # FIXME: figure out the flaky -1024 anti-leaks on windows. See #8044\n-        if self._do_cuda_memory_leak_check and not IS_WINDOWS:\n-            # the import below may initialize CUDA context, so we do it only if\n-            # self._do_cuda_memory_leak_check is True.\n-            from common_cuda import TEST_CUDA\n-            fullname = self.id().lower()  # class_name.method_name\n-            if TEST_CUDA and ('gpu' in fullname or 'cuda' in fullname):\n-                # initialize context & RNG to prevent false positive detections\n-                # when the test is the first to initialize those\n-                from common_cuda import initialize_cuda_context_rng\n-                initialize_cuda_context_rng()\n-                setattr(self, method_name, self.wrap_with_cuda_memory_check(test_method))\n+        # This logic is similar to https://github.com/python/cpython/blob/master/Lib/unittest/case.py#L406-L413\n+        try:\n+            test_method = getattr(self, method_name)", "path": "test/common.py", "position": null, "original_position": 28, "commit_id": "6301e3f59012ab8e0a3722c32ea9a987be11fe62", "original_commit_id": "2da81cc13d9afb0c29ce8d74d38a89c4d028f65e", "user": {"login": "SsnL", "id": 5674597, "node_id": "MDQ6VXNlcjU2NzQ1OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5674597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SsnL", "html_url": "https://github.com/SsnL", "followers_url": "https://api.github.com/users/SsnL/followers", "following_url": "https://api.github.com/users/SsnL/following{/other_user}", "gists_url": "https://api.github.com/users/SsnL/gists{/gist_id}", "starred_url": "https://api.github.com/users/SsnL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SsnL/subscriptions", "organizations_url": "https://api.github.com/users/SsnL/orgs", "repos_url": "https://api.github.com/users/SsnL/repos", "events_url": "https://api.github.com/users/SsnL/events{/privacy}", "received_events_url": "https://api.github.com/users/SsnL/received_events", "type": "User", "site_admin": false}, "body": "What's the reasoning for this change? ", "created_at": "2018-06-20T04:29:11Z", "updated_at": "2018-11-23T15:45:51Z", "html_url": "https://github.com/pytorch/pytorch/pull/8678#discussion_r196645327", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/8678", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/196645327"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/8678#discussion_r196645327"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/8678"}}, "body_html": "<p>What's the reasoning for this change?</p>", "body_text": "What's the reasoning for this change?"}