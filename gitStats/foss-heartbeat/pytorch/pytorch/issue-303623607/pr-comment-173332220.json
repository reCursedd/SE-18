{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/173332220", "pull_request_review_id": 102507480, "id": 173332220, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MzMzMjIyMA==", "diff_hunk": "@@ -462,6 +468,21 @@ def emit_increment_version():\n     combined = nested_dict(env, declaration)\n \n     body = []\n+    if declaration['zero_dim_dispatch_from']:\n+        # We can't use the scalar code path for scalars that are backed by tensors, because\n+        # it would break autodiff wrt those scalars. That's why we reshape them to be 1d\n+        # and dispatch again.\n+        # XXX: using self as a template for the valid type for the arg is a bit aribitrary,\n+        # but seems to work well. We don't have any concrete type labels in declarations, so\n+        # we can't do anything better for now.\n+        # XXX: scalars and 1-element tensors are equivalent in terms of broadcasting, but", "path": "tools/autograd/gen_variable_type.py", "position": 24, "original_position": 24, "commit_id": "5f765ca81daacfae8447c8e04c7e239a13f0076a", "original_commit_id": "5f765ca81daacfae8447c8e04c7e239a13f0076a", "user": {"login": "gchanan", "id": 3768583, "node_id": "MDQ6VXNlcjM3Njg1ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3768583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gchanan", "html_url": "https://github.com/gchanan", "followers_url": "https://api.github.com/users/gchanan/followers", "following_url": "https://api.github.com/users/gchanan/following{/other_user}", "gists_url": "https://api.github.com/users/gchanan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gchanan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gchanan/subscriptions", "organizations_url": "https://api.github.com/users/gchanan/orgs", "repos_url": "https://api.github.com/users/gchanan/repos", "events_url": "https://api.github.com/users/gchanan/events{/privacy}", "received_events_url": "https://api.github.com/users/gchanan/received_events", "type": "User", "site_admin": false}, "body": "can you show examples of the generated code changing, both in function_wrapper generated files and VariableType?  This makes me pretty nervous, because e.g. the above statement isn't true; scalars can be broadcast to 1-element tensors but the reverse isn't true.  This usually only comes up when you do an in-place op, where the broadcasting only goes in one direction.", "created_at": "2018-03-09T00:11:12Z", "updated_at": "2018-11-23T15:40:32Z", "html_url": "https://github.com/pytorch/pytorch/pull/5647#discussion_r173332220", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/5647", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/173332220"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/5647#discussion_r173332220"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/5647"}}, "body_html": "<p>can you show examples of the generated code changing, both in function_wrapper generated files and VariableType?  This makes me pretty nervous, because e.g. the above statement isn't true; scalars can be broadcast to 1-element tensors but the reverse isn't true.  This usually only comes up when you do an in-place op, where the broadcasting only goes in one direction.</p>", "body_text": "can you show examples of the generated code changing, both in function_wrapper generated files and VariableType?  This makes me pretty nervous, because e.g. the above statement isn't true; scalars can be broadcast to 1-element tensors but the reverse isn't true.  This usually only comes up when you do an in-place op, where the broadcasting only goes in one direction."}