{"url": "https://api.github.com/repos/pytorch/pytorch/issues/4223", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/4223/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/4223/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/4223/events", "html_url": "https://github.com/pytorch/pytorch/issues/4223", "id": 282818545, "node_id": "MDU6SXNzdWUyODI4MTg1NDU=", "number": 4223, "title": "problem with F.affine_grid", "user": {"login": "glample", "id": 8885556, "node_id": "MDQ6VXNlcjg4ODU1NTY=", "avatar_url": "https://avatars2.githubusercontent.com/u/8885556?v=4", "gravatar_id": "", "url": "https://api.github.com/users/glample", "html_url": "https://github.com/glample", "followers_url": "https://api.github.com/users/glample/followers", "following_url": "https://api.github.com/users/glample/following{/other_user}", "gists_url": "https://api.github.com/users/glample/gists{/gist_id}", "starred_url": "https://api.github.com/users/glample/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/glample/subscriptions", "organizations_url": "https://api.github.com/users/glample/orgs", "repos_url": "https://api.github.com/users/glample/repos", "events_url": "https://api.github.com/users/glample/events{/privacy}", "received_events_url": "https://api.github.com/users/glample/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-12-18T09:47:57Z", "updated_at": "2017-12-18T14:35:06Z", "closed_at": "2017-12-18T14:35:06Z", "author_association": "CONTRIBUTOR", "body_html": "<p>I think there is an issue with <code>F.affine_grid</code>. The problem might not be detectable in a Spatial Transformer Network where everything is learnable, and if images are squared, but using the following code:</p>\n<div class=\"highlight highlight-source-python\"><pre>x <span class=\"pl-k\">=</span> <span class=\"pl-c1\">1</span>\ny <span class=\"pl-k\">=</span> <span class=\"pl-c1\">0</span>\ntheta <span class=\"pl-k\">=</span> <span class=\"pl-c1\">0</span>\nG <span class=\"pl-k\">=</span> F.affine_grid(\n    torch.FloatTensor([\n        [[np.cos(theta), <span class=\"pl-k\">-</span>np.sin(theta), x],\n         [np.sin(theta), np.cos(theta), y]]\n    ]),\n    torch.Size((<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">100</span>, <span class=\"pl-c1\">200</span>))\n)[<span class=\"pl-c1\">0</span>]\n<span class=\"pl-c1\">print</span>(G.size())\n<span class=\"pl-c1\">print</span>(G[:, :, <span class=\"pl-c1\">0</span>])\n<span class=\"pl-c1\">print</span>(G[:, :, <span class=\"pl-c1\">1</span>])</pre></div>\n<p>I get this:</p>\n<pre><code>torch.Size([100, 200, 2])\nVariable containing:\n 0.0000  0.0101  0.0201  ...   1.9799  1.9899  2.0000\n 0.0000  0.0101  0.0201  ...   1.9799  1.9899  2.0000\n 0.0000  0.0101  0.0201  ...   1.9799  1.9899  2.0000\n          ...             \u22f1             ...          \n 0.0000  0.0101  0.0201  ...   1.9799  1.9899  2.0000\n 0.0000  0.0101  0.0201  ...   1.9799  1.9899  2.0000\n 0.0000  0.0101  0.0201  ...   1.9799  1.9899  2.0000\n[torch.FloatTensor of size 100x200]\n\nVariable containing:\n-1.0000 -1.0000 -1.0000  ...  -1.0000 -1.0000 -1.0000\n-0.9798 -0.9798 -0.9798  ...  -0.9798 -0.9798 -0.9798\n-0.9596 -0.9596 -0.9596  ...  -0.9596 -0.9596 -0.9596\n          ...             \u22f1             ...          \n 0.9596  0.9596  0.9596  ...   0.9596  0.9596  0.9596\n 0.9798  0.9798  0.9798  ...   0.9798  0.9798  0.9798\n 1.0000  1.0000  1.0000  ...   1.0000  1.0000  1.0000\n[torch.FloatTensor of size 100x200]\n</code></pre>\n<p>And I think this is wrong. In particular, <code>G[0, :, 0]</code> should be a line full of <code>0</code>, <code>G[:, 0, 0]</code> should go from <code>0</code> to <code>2</code>, <code>G[0, :, 1]</code> should go from <code>-1</code> to <code>1</code>, etc.</p>\n<p>In particular, on this image:</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://user-images.githubusercontent.com/8885556/34099630-547b074e-e3e0-11e7-9d03-837d62ab624c.png\"><img src=\"https://user-images.githubusercontent.com/8885556/34099630-547b074e-e3e0-11e7-9d03-837d62ab624c.png\" alt=\"image\" style=\"max-width:100%;\"></a></p>\n<p>The grid above, with <code>F.grid_sample</code> should give me this because I'm shifting the image by 1 on the x-axis:</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://user-images.githubusercontent.com/8885556/34099686-7c058866-e3e0-11e7-844f-7aca7ca44509.png\"><img src=\"https://user-images.githubusercontent.com/8885556/34099686-7c058866-e3e0-11e7-844f-7aca7ca44509.png\" alt=\"image\" style=\"max-width:100%;\"></a></p>\n<p>But I get this instead:</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://user-images.githubusercontent.com/8885556/34099730-a0fdc1c4-e3e0-11e7-959d-64907f0de12c.png\"><img src=\"https://user-images.githubusercontent.com/8885556/34099730-a0fdc1c4-e3e0-11e7-959d-64907f0de12c.png\" alt=\"image\" style=\"max-width:100%;\"></a></p>", "body_text": "I think there is an issue with F.affine_grid. The problem might not be detectable in a Spatial Transformer Network where everything is learnable, and if images are squared, but using the following code:\nx = 1\ny = 0\ntheta = 0\nG = F.affine_grid(\n    torch.FloatTensor([\n        [[np.cos(theta), -np.sin(theta), x],\n         [np.sin(theta), np.cos(theta), y]]\n    ]),\n    torch.Size((1, 1, 100, 200))\n)[0]\nprint(G.size())\nprint(G[:, :, 0])\nprint(G[:, :, 1])\nI get this:\ntorch.Size([100, 200, 2])\nVariable containing:\n 0.0000  0.0101  0.0201  ...   1.9799  1.9899  2.0000\n 0.0000  0.0101  0.0201  ...   1.9799  1.9899  2.0000\n 0.0000  0.0101  0.0201  ...   1.9799  1.9899  2.0000\n          ...             \u22f1             ...          \n 0.0000  0.0101  0.0201  ...   1.9799  1.9899  2.0000\n 0.0000  0.0101  0.0201  ...   1.9799  1.9899  2.0000\n 0.0000  0.0101  0.0201  ...   1.9799  1.9899  2.0000\n[torch.FloatTensor of size 100x200]\n\nVariable containing:\n-1.0000 -1.0000 -1.0000  ...  -1.0000 -1.0000 -1.0000\n-0.9798 -0.9798 -0.9798  ...  -0.9798 -0.9798 -0.9798\n-0.9596 -0.9596 -0.9596  ...  -0.9596 -0.9596 -0.9596\n          ...             \u22f1             ...          \n 0.9596  0.9596  0.9596  ...   0.9596  0.9596  0.9596\n 0.9798  0.9798  0.9798  ...   0.9798  0.9798  0.9798\n 1.0000  1.0000  1.0000  ...   1.0000  1.0000  1.0000\n[torch.FloatTensor of size 100x200]\n\nAnd I think this is wrong. In particular, G[0, :, 0] should be a line full of 0, G[:, 0, 0] should go from 0 to 2, G[0, :, 1] should go from -1 to 1, etc.\nIn particular, on this image:\n\nThe grid above, with F.grid_sample should give me this because I'm shifting the image by 1 on the x-axis:\n\nBut I get this instead:", "body": "I think there is an issue with `F.affine_grid`. The problem might not be detectable in a Spatial Transformer Network where everything is learnable, and if images are squared, but using the following code:\r\n\r\n```python\r\nx = 1\r\ny = 0\r\ntheta = 0\r\nG = F.affine_grid(\r\n    torch.FloatTensor([\r\n        [[np.cos(theta), -np.sin(theta), x],\r\n         [np.sin(theta), np.cos(theta), y]]\r\n    ]),\r\n    torch.Size((1, 1, 100, 200))\r\n)[0]\r\nprint(G.size())\r\nprint(G[:, :, 0])\r\nprint(G[:, :, 1])\r\n```\r\n\r\nI get this:\r\n\r\n```\r\ntorch.Size([100, 200, 2])\r\nVariable containing:\r\n 0.0000  0.0101  0.0201  ...   1.9799  1.9899  2.0000\r\n 0.0000  0.0101  0.0201  ...   1.9799  1.9899  2.0000\r\n 0.0000  0.0101  0.0201  ...   1.9799  1.9899  2.0000\r\n          ...             \u22f1             ...          \r\n 0.0000  0.0101  0.0201  ...   1.9799  1.9899  2.0000\r\n 0.0000  0.0101  0.0201  ...   1.9799  1.9899  2.0000\r\n 0.0000  0.0101  0.0201  ...   1.9799  1.9899  2.0000\r\n[torch.FloatTensor of size 100x200]\r\n\r\nVariable containing:\r\n-1.0000 -1.0000 -1.0000  ...  -1.0000 -1.0000 -1.0000\r\n-0.9798 -0.9798 -0.9798  ...  -0.9798 -0.9798 -0.9798\r\n-0.9596 -0.9596 -0.9596  ...  -0.9596 -0.9596 -0.9596\r\n          ...             \u22f1             ...          \r\n 0.9596  0.9596  0.9596  ...   0.9596  0.9596  0.9596\r\n 0.9798  0.9798  0.9798  ...   0.9798  0.9798  0.9798\r\n 1.0000  1.0000  1.0000  ...   1.0000  1.0000  1.0000\r\n[torch.FloatTensor of size 100x200]\r\n```\r\n\r\nAnd I think this is wrong. In particular, `G[0, :, 0]` should be a line full of `0`, `G[:, 0, 0]` should go from `0` to `2`, `G[0, :, 1]` should go from `-1` to `1`, etc.\r\n\r\nIn particular, on this image:\r\n\r\n![image](https://user-images.githubusercontent.com/8885556/34099630-547b074e-e3e0-11e7-9d03-837d62ab624c.png)\r\n\r\nThe grid above, with `F.grid_sample` should give me this because I'm shifting the image by 1 on the x-axis:\r\n\r\n![image](https://user-images.githubusercontent.com/8885556/34099686-7c058866-e3e0-11e7-844f-7aca7ca44509.png)\r\n\r\nBut I get this instead:\r\n\r\n![image](https://user-images.githubusercontent.com/8885556/34099730-a0fdc1c4-e3e0-11e7-959d-64907f0de12c.png)"}