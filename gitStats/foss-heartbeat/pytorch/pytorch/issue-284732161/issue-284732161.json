{"url": "https://api.github.com/repos/pytorch/pytorch/issues/4364", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/4364/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/4364/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/4364/events", "html_url": "https://github.com/pytorch/pytorch/issues/4364", "id": 284732161, "node_id": "MDU6SXNzdWUyODQ3MzIxNjE=", "number": 4364, "title": "Initializing tensor from numpy array results in unexpected values of tensor.", "user": {"login": "dichotomies", "id": 12436822, "node_id": "MDQ6VXNlcjEyNDM2ODIy", "avatar_url": "https://avatars2.githubusercontent.com/u/12436822?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dichotomies", "html_url": "https://github.com/dichotomies", "followers_url": "https://api.github.com/users/dichotomies/followers", "following_url": "https://api.github.com/users/dichotomies/following{/other_user}", "gists_url": "https://api.github.com/users/dichotomies/gists{/gist_id}", "starred_url": "https://api.github.com/users/dichotomies/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dichotomies/subscriptions", "organizations_url": "https://api.github.com/users/dichotomies/orgs", "repos_url": "https://api.github.com/users/dichotomies/repos", "events_url": "https://api.github.com/users/dichotomies/events{/privacy}", "received_events_url": "https://api.github.com/users/dichotomies/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2017-12-27T14:20:30Z", "updated_at": "2017-12-28T00:15:04Z", "closed_at": "2017-12-28T00:15:04Z", "author_association": "NONE", "body_html": "<p>Minimal example:</p>\n<div class=\"highlight highlight-source-python\"><pre>any_number <span class=\"pl-k\">=</span> <span class=\"pl-v\">long</span>(<span class=\"pl-c1\">2</span>)\na <span class=\"pl-k\">=</span> np.arange(<span class=\"pl-c1\">0</span>, any_number)\n<span class=\"pl-c1\">print</span>(a)\nb <span class=\"pl-k\">=</span> torch.Tensor(a)\n<span class=\"pl-c1\">print</span>(b)\n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> [<span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">1</span>]\n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">-</span><span class=\"pl-c1\">5.9741e+15</span>\n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">4.5811e-41</span>\n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> [torch.FloatTensor of size <span class=\"pl-c1\">2</span>]</pre></div>\n<p>Torch initializes the tensor with values which are different from the numpy array.</p>\n<p>I've seen issues for similar kinds of problems (see <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"273539026\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/3671\" data-hovercard-type=\"issue\" data-hovercard-url=\"/pytorch/pytorch/issues/3671/hovercard\" href=\"https://github.com/pytorch/pytorch/issues/3671\">#3671</a>). Maybe the easiest solution to all these initialization problems might be, to check for the same values of the original and initialized array/tensor instead of initializing tensors silently with wrong numbers. What do you think?</p>\n<p>Furthermore, I've opened an issue which is also related this one in terms of initializing a numpy array with a number of type <code>long</code> and then initializing a torch tensor from that array, see <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"284729606\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/4363\" data-hovercard-type=\"issue\" data-hovercard-url=\"/pytorch/pytorch/issues/4363/hovercard\" href=\"https://github.com/pytorch/pytorch/issues/4363\">#4363</a>. Feel free to merge them if you think that both issues can be solved together.</p>", "body_text": "Minimal example:\nany_number = long(2)\na = np.arange(0, any_number)\nprint(a)\nb = torch.Tensor(a)\nprint(b)\n>>> [0, 1]\n>>> -5.9741e+15\n>>> 4.5811e-41\n>>> [torch.FloatTensor of size 2]\nTorch initializes the tensor with values which are different from the numpy array.\nI've seen issues for similar kinds of problems (see #3671). Maybe the easiest solution to all these initialization problems might be, to check for the same values of the original and initialized array/tensor instead of initializing tensors silently with wrong numbers. What do you think?\nFurthermore, I've opened an issue which is also related this one in terms of initializing a numpy array with a number of type long and then initializing a torch tensor from that array, see #4363. Feel free to merge them if you think that both issues can be solved together.", "body": "Minimal example:\r\n```py\r\nany_number = long(2)\r\na = np.arange(0, any_number)\r\nprint(a)\r\nb = torch.Tensor(a)\r\nprint(b)\r\n>>> [0, 1]\r\n>>> -5.9741e+15\r\n>>> 4.5811e-41\r\n>>> [torch.FloatTensor of size 2]\r\n```\r\n\r\nTorch initializes the tensor with values which are different from the numpy array.\r\n\r\nI've seen issues for similar kinds of problems (see https://github.com/pytorch/pytorch/issues/3671). Maybe the easiest solution to all these initialization problems might be, to check for the same values of the original and initialized array/tensor instead of initializing tensors silently with wrong numbers. What do you think?\r\n\r\nFurthermore, I've opened an issue which is also related this one in terms of initializing a numpy array with a number of type `long` and then initializing a torch tensor from that array, see https://github.com/pytorch/pytorch/issues/4363. Feel free to merge them if you think that both issues can be solved together."}