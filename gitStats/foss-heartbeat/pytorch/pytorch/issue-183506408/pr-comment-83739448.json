{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/83739448", "pull_request_review_id": 4563524, "id": 83739448, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgzNzM5NDQ4", "diff_hunk": "@@ -0,0 +1,114 @@\n+#include \"Stream.h\"\n+\n+#include \"THP.h\"\n+#include \"Module.h\"\n+\n+#include <structmember.h>\n+#include <cuda_runtime_api.h>\n+\n+PyObject *THCPStreamClass = NULL;\n+\n+static PyObject * THCPStream_pynew(PyTypeObject *type, PyObject *args, PyObject *kwargs)\n+{\n+  HANDLE_TH_ERRORS\n+\n+  int current_device;\n+  THCudaCheck(cudaGetDevice(&current_device));\n+\n+  THCPStream* self = (THCPStream *)type->tp_alloc(type, 0);\n+  THCStream* stream = NULL;\n+  if (kwargs && PyDict_Size(kwargs) > 0) {", "path": "torch/csrc/cuda/Stream.cpp", "position": null, "original_position": 20, "commit_id": "99e6af86d4f2a8dab34145eb2d96b6ee3a6bee80", "original_commit_id": "108434e385bd888df8e4a9c6d30ab1d3282778ff", "user": {"login": "colesbury", "id": 655866, "node_id": "MDQ6VXNlcjY1NTg2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/655866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colesbury", "html_url": "https://github.com/colesbury", "followers_url": "https://api.github.com/users/colesbury/followers", "following_url": "https://api.github.com/users/colesbury/following{/other_user}", "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions", "organizations_url": "https://api.github.com/users/colesbury/orgs", "repos_url": "https://api.github.com/users/colesbury/repos", "events_url": "https://api.github.com/users/colesbury/events{/privacy}", "received_events_url": "https://api.github.com/users/colesbury/received_events", "type": "User", "site_admin": false}, "body": "This is an internal base-class ctor. The public `torch.cuda.Stream` class accepts device as a positional argument:\n\n``` python\nx = torch.cuda.Stream(device=1)\nx = torch.cuda.Stream(1)\n```\n", "created_at": "2016-10-17T21:35:14Z", "updated_at": "2018-11-23T15:31:44Z", "html_url": "https://github.com/pytorch/pytorch/pull/133#discussion_r83739448", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/133", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/83739448"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/133#discussion_r83739448"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/133"}}, "body_html": "<p>This is an internal base-class ctor. The public <code>torch.cuda.Stream</code> class accepts device as a positional argument:</p>\n<div class=\"highlight highlight-source-python\"><pre>x <span class=\"pl-k\">=</span> torch.cuda.Stream(<span class=\"pl-v\">device</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">1</span>)\nx <span class=\"pl-k\">=</span> torch.cuda.Stream(<span class=\"pl-c1\">1</span>)</pre></div>", "body_text": "This is an internal base-class ctor. The public torch.cuda.Stream class accepts device as a positional argument:\nx = torch.cuda.Stream(device=1)\nx = torch.cuda.Stream(1)", "in_reply_to_id": 83725209}