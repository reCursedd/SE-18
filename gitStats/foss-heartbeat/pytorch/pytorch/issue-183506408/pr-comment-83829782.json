{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/83829782", "pull_request_review_id": 4646185, "id": 83829782, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgzODI5Nzgy", "diff_hunk": "@@ -0,0 +1,110 @@\n+#include \"Stream.h\"\n+\n+#include \"THP.h\"\n+#include \"Module.h\"\n+\n+#include <structmember.h>\n+#include <cuda_runtime_api.h>\n+\n+PyObject *THCPStreamClass = NULL;\n+\n+static PyObject * THCPStream_pynew(PyTypeObject *type, PyObject *args, PyObject *kwargs)\n+{\n+  HANDLE_TH_ERRORS\n+\n+  int current_device;\n+  THCudaCheck(cudaGetDevice(&current_device));\n+\n+  THPObjectPtr ptr = (PyObject *)type->tp_alloc(type, 0);\n+  THCPStream* self = (THCPStream *)ptr.get();\n+  THCStream* stream = NULL;\n+  if (kwargs && PyDict_Size(kwargs) > 0) {\n+    PyObject *cdata_ptr = PyDict_GetItemString(kwargs, \"_cdata\");\n+    if (cdata_ptr && PyDict_Size(kwargs) == 1 && THPUtils_checkLong(cdata_ptr)) {\n+      stream = (THCStream*) PyLong_AsVoidPtr(cdata_ptr);\n+      if (stream) {\n+        THCStream_retain(stream);\n+      }\n+    } else {\n+      THPUtils_setError(\"torch.cuda.Stream(): invalid keyword arguments\");\n+      return NULL;\n+    }\n+  } else {\n+    stream = THCStream_new(cudaStreamNonBlocking);\n+  }\n+\n+  self->cdata = stream;\n+  self->device = stream ? stream->device : current_device;\n+  self->cuda_stream = stream ? stream->stream : NULL;\n+  return (PyObject *)ptr.release();\n+  END_HANDLE_TH_ERRORS\n+}\n+\n+static void THCPStream_dealloc(THCPStream* self)\n+{\n+  THCStream_free(self->cdata);\n+  Py_TYPE(self)->tp_free((PyObject*)self);\n+}\n+\n+static struct PyMemberDef THCPStream_members[] = {\n+  {(char*)\"_cdata\", T_ULONGLONG, offsetof(THCPStream, cdata), READONLY, NULL},\n+  {(char*)\"device\", T_INT, offsetof(THCPStream, device), READONLY, NULL},\n+  {(char*)\"cuda_stream\", T_ULONGLONG, offsetof(THCPStream, cuda_stream), READONLY, NULL},\n+  {NULL}\n+};\n+\n+static PyMethodDef THCPStream_methods[] = {\n+  {NULL}\n+};\n+\n+PyTypeObject THCPStreamType = {\n+  PyVarObject_HEAD_INIT(NULL, 0)\n+  \"torch._C.CudaStreamBase\",             /* tp_name */\n+  sizeof(THCPStream),                    /* tp_basicsize */\n+  0,                                     /* tp_itemsize */\n+  (destructor)THCPStream_dealloc,        /* tp_dealloc */\n+  0,                                     /* tp_print */\n+  0,                                     /* tp_getattr */\n+  0,                                     /* tp_setattr */\n+  0,                                     /* tp_reserved */\n+  0,                                     /* tp_repr */\n+  0,                                     /* tp_as_number */\n+  0,                                     /* tp_as_sequence */\n+  0,                                     /* tp_as_mapping */\n+  0,                                     /* tp_hash  */\n+  0,                                     /* tp_call */\n+  0,                                     /* tp_str */\n+  0,                                     /* tp_getattro */\n+  0,                                     /* tp_setattro */\n+  0,                                     /* tp_as_buffer */\n+  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, /* tp_flags */\n+  NULL,                                  /* tp_doc */\n+  0,                                     /* tp_traverse */\n+  0,                                     /* tp_clear */\n+  0,                                     /* tp_richcompare */\n+  0,                                     /* tp_weaklistoffset */\n+  0,                                     /* tp_iter */\n+  0,                                     /* tp_iternext */\n+  THCPStream_methods,                    /* tp_methods */\n+  THCPStream_members,                    /* tp_members */\n+  0,                                     /* tp_getset */\n+  0,                                     /* tp_base */\n+  0,                                     /* tp_dict */\n+  0,                                     /* tp_descr_get */\n+  0,                                     /* tp_descr_set */\n+  0,                                     /* tp_dictoffset */\n+  0,                                     /* tp_init */\n+  0,                                     /* tp_alloc */\n+  THCPStream_pynew,                      /* tp_new */\n+};\n+\n+\n+bool THCPStream_init(PyObject *module)\n+{\n+  THCPStreamClass = (PyObject*)&THCPStreamType;\n+  if (PyType_Ready(&THCPStreamType) < 0)\n+    return false;\n+  Py_INCREF(&THCPStreamType);\n+  PyModule_AddObject(module, \"CudaStreamBase\", (PyObject *)&THCPStreamType);", "path": "torch/csrc/cuda/Stream.cpp", "position": null, "original_position": 108, "commit_id": "99e6af86d4f2a8dab34145eb2d96b6ee3a6bee80", "original_commit_id": "6b3974c9148aee6f05858670e750ebcd493137aa", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Add this as `_CudaStreamBase`. We're importing `*` from `_C` in `torch/__init__.py`, so if you don't prepend it an underscore it will be accessible as `torch.CudaStreamBase`.\n", "created_at": "2016-10-18T11:04:40Z", "updated_at": "2018-11-23T15:31:44Z", "html_url": "https://github.com/pytorch/pytorch/pull/133#discussion_r83829782", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/133", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/83829782"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/133#discussion_r83829782"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/133"}}, "body_html": "<p>Add this as <code>_CudaStreamBase</code>. We're importing <code>*</code> from <code>_C</code> in <code>torch/__init__.py</code>, so if you don't prepend it an underscore it will be accessible as <code>torch.CudaStreamBase</code>.</p>", "body_text": "Add this as _CudaStreamBase. We're importing * from _C in torch/__init__.py, so if you don't prepend it an underscore it will be accessible as torch.CudaStreamBase."}