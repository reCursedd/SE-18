{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/83737940", "pull_request_review_id": 4562144, "id": 83737940, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgzNzM3OTQw", "diff_hunk": "@@ -0,0 +1,107 @@\n+import ctypes\n+import torch\n+from . import clib\n+\n+\n+SUCCESS = 0\n+ERROR_NOT_READY = 34\n+\n+\n+class CudaError(RuntimeError):\n+    def __init__(self, code):\n+        msg = clib().cudaGetErrorString(code).decode('utf-8')\n+        super(CudaError, self).__init__('{0} ({1})'.format(msg, code))\n+\n+\n+def check_error(res):\n+    if res != SUCCESS:\n+        raise CudaError(res)\n+\n+\n+class Stream(torch._C.CudaStreamBase):\n+    def __new__(cls, device=None, **kwargs):\n+        with torch.cuda.device(device or torch.cuda.current_device()):\n+            return super(Stream, cls).__new__(cls, **kwargs)\n+\n+    def wait_event(self, event):\n+        check_error(clib().cudaStreamWaitEvent(self, event, ctypes.c_int(0)))\n+\n+    def wait_stream(self, stream):\n+        self.wait_event(stream.record_event())\n+\n+    def record_event(self, event=None):\n+        if event is None:\n+            event = Event()\n+        check_error(clib().cudaEventRecord(event, self))\n+        return event\n+\n+    def query(self):\n+        res = clib().cudaStreamQuery(self)\n+        if res == ERROR_NOT_READY:\n+            return False\n+        check_error(res)\n+        return True\n+\n+    def synchronize(self):\n+        check_error(clib().cudaStreamSynchronize(self))\n+\n+    @property\n+    def _as_parameter_(self):", "path": "torch/cuda/streams.py", "position": null, "original_position": 49, "commit_id": "99e6af86d4f2a8dab34145eb2d96b6ee3a6bee80", "original_commit_id": "108434e385bd888df8e4a9c6d30ab1d3282778ff", "user": {"login": "colesbury", "id": 655866, "node_id": "MDQ6VXNlcjY1NTg2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/655866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colesbury", "html_url": "https://github.com/colesbury", "followers_url": "https://api.github.com/users/colesbury/followers", "following_url": "https://api.github.com/users/colesbury/following{/other_user}", "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions", "organizations_url": "https://api.github.com/users/colesbury/orgs", "repos_url": "https://api.github.com/users/colesbury/repos", "events_url": "https://api.github.com/users/colesbury/events{/privacy}", "received_events_url": "https://api.github.com/users/colesbury/received_events", "type": "User", "site_admin": false}, "body": "Stream doesn't an `__init__` (just `__new__`) and it didn't seem like a clear win:\n- Accessing `_as_parameter_` is relatively quick (360 ns vs. 9.4 \u00b5s for stream.query())\n- We sometimes create Stream objects (via `current_stream()`) just to pass them back into the C extension without using `_as_parameter`\n", "created_at": "2016-10-17T21:27:10Z", "updated_at": "2018-11-23T15:31:44Z", "html_url": "https://github.com/pytorch/pytorch/pull/133#discussion_r83737940", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/133", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/83737940"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/133#discussion_r83737940"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/133"}}, "body_html": "<p>Stream doesn't an <code>__init__</code> (just <code>__new__</code>) and it didn't seem like a clear win:</p>\n<ul>\n<li>Accessing <code>_as_parameter_</code> is relatively quick (360 ns vs. 9.4 \u00b5s for stream.query())</li>\n<li>We sometimes create Stream objects (via <code>current_stream()</code>) just to pass them back into the C extension without using <code>_as_parameter</code></li>\n</ul>", "body_text": "Stream doesn't an __init__ (just __new__) and it didn't seem like a clear win:\n\nAccessing _as_parameter_ is relatively quick (360 ns vs. 9.4 \u00b5s for stream.query())\nWe sometimes create Stream objects (via current_stream()) just to pass them back into the C extension without using _as_parameter", "in_reply_to_id": 83726810}