{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/338941606", "html_url": "https://github.com/pytorch/pytorch/issues/3248#issuecomment-338941606", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/3248", "id": 338941606, "node_id": "MDEyOklzc3VlQ29tbWVudDMzODk0MTYwNg==", "user": {"login": "pum-purum-pum-pum", "id": 22634168, "node_id": "MDQ6VXNlcjIyNjM0MTY4", "avatar_url": "https://avatars2.githubusercontent.com/u/22634168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pum-purum-pum-pum", "html_url": "https://github.com/pum-purum-pum-pum", "followers_url": "https://api.github.com/users/pum-purum-pum-pum/followers", "following_url": "https://api.github.com/users/pum-purum-pum-pum/following{/other_user}", "gists_url": "https://api.github.com/users/pum-purum-pum-pum/gists{/gist_id}", "starred_url": "https://api.github.com/users/pum-purum-pum-pum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pum-purum-pum-pum/subscriptions", "organizations_url": "https://api.github.com/users/pum-purum-pum-pum/orgs", "repos_url": "https://api.github.com/users/pum-purum-pum-pum/repos", "events_url": "https://api.github.com/users/pum-purum-pum-pum/events{/privacy}", "received_events_url": "https://api.github.com/users/pum-purum-pum-pum/received_events", "type": "User", "site_admin": false}, "created_at": "2017-10-24T10:08:42Z", "updated_at": "2017-10-24T18:40:02Z", "author_association": "NONE", "body_html": "<p>temporal solution:</p>\n<pre><code>from copy import deepcopy as copy\ndef accumu(l):\n    total = 0\n    for x in l:\n        total += x\n        yield total\n\ndef sparse_cat(l, dim=0):\n    idxs = [copy(i.data._indices()) for i in l]\n    shifts = list(accumu(i.size()[dim] for i in l))\n    for i in range(len(idxs) - 1):\n        idxs[i + 1][dim, :] += shifts[i]\n    all_index = torch.cat(idxs, 1)\n    all_values = torch.cat([i.data._values() for i in l])\n    all_size = list(copy(l[0].size()))\n    all_size[dim] = shifts[-1]\n    return torch.sparse.LongTensor(all_index, all_values, torch.Size(all_size))\nsparse_cat((a, b), 0)\n</code></pre>", "body_text": "temporal solution:\nfrom copy import deepcopy as copy\ndef accumu(l):\n    total = 0\n    for x in l:\n        total += x\n        yield total\n\ndef sparse_cat(l, dim=0):\n    idxs = [copy(i.data._indices()) for i in l]\n    shifts = list(accumu(i.size()[dim] for i in l))\n    for i in range(len(idxs) - 1):\n        idxs[i + 1][dim, :] += shifts[i]\n    all_index = torch.cat(idxs, 1)\n    all_values = torch.cat([i.data._values() for i in l])\n    all_size = list(copy(l[0].size()))\n    all_size[dim] = shifts[-1]\n    return torch.sparse.LongTensor(all_index, all_values, torch.Size(all_size))\nsparse_cat((a, b), 0)", "body": "temporal solution:\r\n```\r\nfrom copy import deepcopy as copy\r\ndef accumu(l):\r\n    total = 0\r\n    for x in l:\r\n        total += x\r\n        yield total\r\n\r\ndef sparse_cat(l, dim=0):\r\n    idxs = [copy(i.data._indices()) for i in l]\r\n    shifts = list(accumu(i.size()[dim] for i in l))\r\n    for i in range(len(idxs) - 1):\r\n        idxs[i + 1][dim, :] += shifts[i]\r\n    all_index = torch.cat(idxs, 1)\r\n    all_values = torch.cat([i.data._values() for i in l])\r\n    all_size = list(copy(l[0].size()))\r\n    all_size[dim] = shifts[-1]\r\n    return torch.sparse.LongTensor(all_index, all_values, torch.Size(all_size))\r\nsparse_cat((a, b), 0)\r\n```"}