{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/160047130", "pull_request_review_id": 87096976, "id": 160047130, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MDA0NzEzMA==", "diff_hunk": "@@ -0,0 +1,51 @@\n+from numbers import Number\n+\n+import math\n+\n+import torch\n+from torch.distributions import constraints\n+from torch.distributions.distribution import Distribution\n+from torch.distributions.utils import broadcast_all\n+\n+\n+class Gumbel(Distribution):\n+    r\"\"\"\n+    Samples from a Gumbel Distribution.\n+\n+    Examples::\n+\n+        >>> m = Gumbel(torch.Tensor([1.0]), torch.Tensor([2.0]))\n+        >>> m.sample()  # sample from Gumbel distribution with loc=1, scale=2\n+         1.0124\n+        [torch.FloatTensor of size 1]\n+\n+    Args:\n+        loc (float or Tensor or Variable): Location parameter of the distribution\n+        scale (float or Tensor or Variable): Scale parameter of the distribution\n+    \"\"\"\n+    has_rsample = True\n+    params = {'loc': constraints.real, 'scale': constraints.positive}\n+    support = constraints.real\n+\n+    def __init__(self, loc, scale):\n+        self.loc, self.scale = broadcast_all(loc, scale)\n+        if isinstance(loc, Number) and isinstance(scale, Number):\n+            batch_shape = torch.Size()\n+        else:\n+            batch_shape = self.scale.size()\n+        super(Gumbel, self).__init__(batch_shape)\n+\n+    def rsample(self, sample_shape=torch.Size()):\n+        shape = self._extended_shape(sample_shape)\n+        uni_dist = self.scale.new(shape).uniform_()\n+        # X ~ Uniform(0, 1)\n+        # Y = loc - scale * ln (-ln (X)) ~ Gumbel(loc, scale)\n+        return self.loc - self.scale * torch.log(-uni_dist.log())", "path": "torch/distributions/gumbel.py", "position": null, "original_position": 43, "commit_id": "2c8019531ca852b19dcf1e518cabde9b01f3528c", "original_commit_id": "5c994f1359341198e623bf95af3887634a7014ad", "user": {"login": "vishwakftw", "id": 23639302, "node_id": "MDQ6VXNlcjIzNjM5MzAy", "avatar_url": "https://avatars2.githubusercontent.com/u/23639302?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vishwakftw", "html_url": "https://github.com/vishwakftw", "followers_url": "https://api.github.com/users/vishwakftw/followers", "following_url": "https://api.github.com/users/vishwakftw/following{/other_user}", "gists_url": "https://api.github.com/users/vishwakftw/gists{/gist_id}", "starred_url": "https://api.github.com/users/vishwakftw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vishwakftw/subscriptions", "organizations_url": "https://api.github.com/users/vishwakftw/orgs", "repos_url": "https://api.github.com/users/vishwakftw/repos", "events_url": "https://api.github.com/users/vishwakftw/events{/privacy}", "received_events_url": "https://api.github.com/users/vishwakftw/received_events", "type": "User", "site_admin": false}, "body": "Yes, you are right. In `aten/src/TH/THRandom.c` the uniform double is generated in the interval [0, 1). I will try to fix this ASAP. Thank you.\r\n  ", "created_at": "2018-01-07T11:49:49Z", "updated_at": "2018-11-23T15:37:55Z", "html_url": "https://github.com/pytorch/pytorch/pull/4517#discussion_r160047130", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4517", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/160047130"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/4517#discussion_r160047130"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4517"}}, "body_html": "<p>Yes, you are right. In <code>aten/src/TH/THRandom.c</code> the uniform double is generated in the interval [0, 1). I will try to fix this ASAP. Thank you.</p>", "body_text": "Yes, you are right. In aten/src/TH/THRandom.c the uniform double is generated in the interval [0, 1). I will try to fix this ASAP. Thank you.", "in_reply_to_id": 160046876}