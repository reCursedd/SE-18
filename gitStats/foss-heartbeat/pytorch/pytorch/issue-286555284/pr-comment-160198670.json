{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/160198670", "pull_request_review_id": 87272317, "id": 160198670, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MDE5ODY3MA==", "diff_hunk": "@@ -0,0 +1,52 @@\n+from numbers import Number\n+\n+import math\n+from numpy import euler_gamma\n+\n+import torch\n+from torch.distributions import constraints\n+from torch.distributions.distribution import Distribution\n+from torch.distributions.utils import broadcast_all\n+\n+\n+class Gumbel(Distribution):\n+    r\"\"\"\n+    Samples from a Gumbel Distribution.\n+\n+    Examples::\n+\n+        >>> m = Gumbel(torch.Tensor([1.0]), torch.Tensor([2.0]))\n+        >>> m.sample()  # sample from Gumbel distribution with loc=1, scale=2\n+         1.0124\n+        [torch.FloatTensor of size 1]\n+\n+    Args:\n+        loc (float or Tensor or Variable): Location parameter of the distribution\n+        scale (float or Tensor or Variable): Scale parameter of the distribution\n+    \"\"\"\n+    has_rsample = True\n+    params = {'loc': constraints.real, 'scale': constraints.positive}\n+    support = constraints.real\n+\n+    def __init__(self, loc, scale):\n+        self.loc, self.scale = broadcast_all(loc, scale)\n+        if isinstance(loc, Number) and isinstance(scale, Number):\n+            batch_shape = torch.Size()\n+        else:\n+            batch_shape = self.scale.size()\n+        super(Gumbel, self).__init__(batch_shape)\n+\n+    def rsample(self, sample_shape=torch.Size()):\n+        shape = self._extended_shape(sample_shape)\n+        uni_dist = self.scale.new(shape).uniform_(1e-15, 1)\n+        # X ~ Uniform(0, 1)\n+        # Y = loc - scale * ln (-ln (X)) ~ Gumbel(loc, scale)\n+        return self.loc - self.scale * torch.log(-uni_dist.log())\n+\n+    def log_prob(self, value):\n+        self._validate_log_prob_arg(value)\n+        z = (value - self.loc) / self.scale\n+        return -(self.scale.log() + z + torch.exp(-z))\n+\n+    def entropy(self):\n+        return self.scale.log() + 1 + euler_gamma", "path": "torch/distributions/gumbel.py", "position": null, "original_position": 52, "commit_id": "2c8019531ca852b19dcf1e518cabde9b01f3528c", "original_commit_id": "d88c808efb0f1dfd5672f7c680a111bd61266b3f", "user": {"login": "fritzo", "id": 648532, "node_id": "MDQ6VXNlcjY0ODUzMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/648532?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fritzo", "html_url": "https://github.com/fritzo", "followers_url": "https://api.github.com/users/fritzo/followers", "following_url": "https://api.github.com/users/fritzo/following{/other_user}", "gists_url": "https://api.github.com/users/fritzo/gists{/gist_id}", "starred_url": "https://api.github.com/users/fritzo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fritzo/subscriptions", "organizations_url": "https://api.github.com/users/fritzo/orgs", "repos_url": "https://api.github.com/users/fritzo/repos", "events_url": "https://api.github.com/users/fritzo/events{/privacy}", "received_events_url": "https://api.github.com/users/fritzo/received_events", "type": "User", "site_admin": false}, "body": "nit: parens around the floats would save a tensor op: `(1 + euler_gamma)`", "created_at": "2018-01-08T17:02:34Z", "updated_at": "2018-11-23T15:37:56Z", "html_url": "https://github.com/pytorch/pytorch/pull/4517#discussion_r160198670", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4517", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/160198670"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/4517#discussion_r160198670"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4517"}}, "body_html": "<p>nit: parens around the floats would save a tensor op: <code>(1 + euler_gamma)</code></p>", "body_text": "nit: parens around the floats would save a tensor op: (1 + euler_gamma)"}