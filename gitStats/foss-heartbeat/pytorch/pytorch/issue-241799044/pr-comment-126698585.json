{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/126698585", "pull_request_review_id": 49206314, "id": 126698585, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNjY5ODU4NQ==", "diff_hunk": "@@ -332,5 +332,63 @@ __global__ void indexSelectLargeIndex(TensorInfo<T, IndexType> dst,\n   }\n }\n \n+template <typename IndexType, unsigned int Dims>\n+struct LinearIndexCalcData {\n+  // sizes for Tensor dims (either from the Tensor, or the size of the adv indexer at that dim)\n+  IndexType sizes[Dims];\n+  IndexType strides[Dims];       // strides for Tensor\n+  bool adv[Dims];                // which Tensors are advanced indexers\n+  long *advIndexTensors[Dims];   // Adv Indexing Tensors\n+};\n+\n+template <typename IndexType, unsigned int Dims>\n+__device__ __forceinline__ long calculateOffset(\n+  IndexType index,                  // index to calculate offset for\n+  LinearIndexCalcData<IndexType, Dims> data\n+)\n+{\n+  IndexType offset = 0;\n+\n+#pragma unroll\n+  for (int dim = Dims - 1; dim >= 0; --dim) {\n+    IndexType sizeAtDim, strideAtDim, indexAtDim, nextIndex;\n+\n+    strideAtDim = data.strides[dim];\n+    sizeAtDim = data.sizes[dim];\n+\n+    if (data.adv[dim]) {\n+      indexAtDim = data.advIndexTensors[dim][index % sizeAtDim];\n+      if (dim > 0 && data.adv[dim - 1]) {\n+        nextIndex = index;\n+      } else {\n+        nextIndex = index / sizeAtDim;\n+      }\n+    } else {\n+      indexAtDim = index % sizeAtDim;\n+      nextIndex = index / sizeAtDim;\n+    }\n+\n+    offset += indexAtDim * strideAtDim;\n+    index = nextIndex;\n+  }\n+\n+  return offset;\n+}\n+\n+template <typename IndexType, unsigned int Dims>\n+__global__ void calculateLinearIndices(\n+  long *output,               // output Tensor for indices\n+  int elements,               // number of elements in output <-> indices to calculate\n+  ptrdiff_t baseOffset,       // base offset into the Tensor\n+  LinearIndexCalcData<IndexType, Dims> data\n+)\n+{\n+  for (long i = blockIdx.x * blockDim.x + threadIdx.x;\n+         i < elements;\n+         i += blockDim.x * gridDim.x) {\n+      output[i] = baseOffset + calculateOffset<IndexType, Dims>(i, data);\n+   }\n+}\n+", "path": "torch/lib/THC/THCTensorIndex.cu", "position": 66, "original_position": 61, "commit_id": "5197f58602341b8c02036283337f502913271a88", "original_commit_id": "25db5f04a3ccf5d966c7f90fa10020255713b31e", "user": {"login": "killeent", "id": 4529377, "node_id": "MDQ6VXNlcjQ1MjkzNzc=", "avatar_url": "https://avatars1.githubusercontent.com/u/4529377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/killeent", "html_url": "https://github.com/killeent", "followers_url": "https://api.github.com/users/killeent/followers", "following_url": "https://api.github.com/users/killeent/following{/other_user}", "gists_url": "https://api.github.com/users/killeent/gists{/gist_id}", "starred_url": "https://api.github.com/users/killeent/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/killeent/subscriptions", "organizations_url": "https://api.github.com/users/killeent/orgs", "repos_url": "https://api.github.com/users/killeent/repos", "events_url": "https://api.github.com/users/killeent/events{/privacy}", "received_events_url": "https://api.github.com/users/killeent/received_events", "type": "User", "site_admin": false}, "body": "If `data.adv[dim]` was false for all dimensions then we wouldn't be doing advanced indexing.", "created_at": "2017-07-11T14:06:59Z", "updated_at": "2018-11-23T15:34:04Z", "html_url": "https://github.com/pytorch/pytorch/pull/2039#discussion_r126698585", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/2039", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/126698585"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/2039#discussion_r126698585"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/2039"}}, "body_html": "<p>If <code>data.adv[dim]</code> was false for all dimensions then we wouldn't be doing advanced indexing.</p>", "body_text": "If data.adv[dim] was false for all dimensions then we wouldn't be doing advanced indexing.", "in_reply_to_id": 126603260}