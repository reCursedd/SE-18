{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/217497677", "pull_request_review_id": 155225534, "id": 217497677, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNzQ5NzY3Nw==", "diff_hunk": "@@ -4092,5 +4115,161 @@ def tearDown(self):\n         super(TestCase, self).tearDown()\n         Distribution.set_default_validate_args(False)\n \n+\n+class TestJit(TestCase):\n+    def _examples(self):\n+        for Dist, params in EXAMPLES:\n+            for param in params:\n+                print('testing {}'.format(Dist.__name__))\n+                keys = param.keys()\n+                values = tuple(param[key] for key in keys)\n+                if not all(isinstance(x, torch.Tensor) for x in values):\n+                    continue\n+                sample = Dist(**param).sample()\n+                yield Dist, keys, values, sample\n+\n+    def test_sample(self):\n+        for Dist, keys, values, sample in self._examples():\n+\n+            def f(*values):\n+                param = dict(zip(keys, values))\n+                dist = Dist(**param)\n+                return dist.sample()\n+\n+            traced_f = torch.jit.trace(f, values, check_trace=False)\n+\n+            # FIXME Schema not found for node\n+            xfail = [\n+                Cauchy,  # aten::cauchy(Double(2,1), float, float, Generator)\n+                HalfCauchy,  # aten::cauchy(Double(2, 1), float, float, Generator)\n+            ]\n+            if Dist in xfail:\n+                print('        xfail reproducibility')\n+                continue\n+\n+            with torch.random.fork_rng():\n+                sample_0 = traced_f(*values)\n+            sample_1 = traced_f(*values)\n+            self.assertEqual(sample_0, sample_1)\n+\n+            # FIXME no nondeterministic nodes found in trace\n+            xfail = [Beta, Dirichlet]\n+            if Dist in xfail:\n+                print('        xfail nondeterministic nodes')\n+                continue\n+            self.assertTrue(any(n.isNondeterministic() for n in traced_f.graph.nodes()))\n+\n+    def test_rsample(self):\n+        for Dist, keys, values, sample in self._examples():\n+            if not Dist.has_rsample:\n+                continue\n+\n+            def f(*values):\n+                param = dict(zip(keys, values))\n+                dist = Dist(**param)\n+                return dist.rsample()\n+\n+            traced_f = torch.jit.trace(f, values, check_trace=False)\n+\n+            # FIXME Schema not found for node\n+            xfail = [\n+                Cauchy,  # aten::cauchy(Double(2,1), float, float, Generator)\n+                HalfCauchy,  # aten::cauchy(Double(2, 1), float, float, Generator)\n+            ]\n+            if Dist in xfail:\n+                print('        xfail reproducibility')\n+                continue\n+\n+            with torch.random.fork_rng():\n+                sample_0 = traced_f(*values)\n+            sample_1 = traced_f(*values)", "path": "test/test_distributions.py", "position": null, "original_position": 101, "commit_id": "cf132fce4d6bf01d9033ac82c8de6d62c168f150", "original_commit_id": "f91e6ed40da444078052d24083259025ffaf8df6", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Yeah that would be better. Comparing `traced_f` to `traced_f` doesn't make much sense.", "created_at": "2018-09-13T18:58:17Z", "updated_at": "2018-11-23T15:51:18Z", "html_url": "https://github.com/pytorch/pytorch/pull/11560#discussion_r217497677", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/11560", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/217497677"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/11560#discussion_r217497677"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/11560"}}, "body_html": "<p>Yeah that would be better. Comparing <code>traced_f</code> to <code>traced_f</code> doesn't make much sense.</p>", "body_text": "Yeah that would be better. Comparing traced_f to traced_f doesn't make much sense.", "in_reply_to_id": 217490401}