{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/217591895", "pull_request_review_id": 155342071, "id": 217591895, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNzU5MTg5NQ==", "diff_hunk": "@@ -18,18 +18,81 @@\n \n namespace torch {\n namespace nn {\n-/// A `Sequential` module is a container for any number of other modules. Its\n-/// `forward()` method chains outputs to inputs and returns the final output.\n-/// The `Sequential` class reference semantics.\n+\n+/// A list of `Module`s that acts as a `Module` itself.\n+///\n+/// A `Sequential` is fundamentally a list of objects that are subclasses of\n+/// module and each have a `forward()` method. `Sequential` provides a\n+/// `forward()` method of its own, which accepts any input and forwards it to\n+/// the first module it stores. It then \"chains\" outputs to inputs sequentially\n+/// for each subsequent module, finally returning the output of the last module.\n+/// For example:\n+///\n+/// \\rst\n+/// .. code-block:: cpp\n+///\n+///   torch::nn::Sequential seq(\n+///     torch::nn::Linear(3, 4),\n+///     torch::nn::BatchNorm(4),\n+///     torch::nn::Dropout(0.5)\n+///   );\n+///\n+///   auto output = seq->forward(torch::ones(3));\n+///\n+/// \\endrst\n+///\n+/// This can conceptually be thought of as the following loop (using Python as\n+/// pseudocode):\n+///\n+/// \\rst\n+/// .. code-block:: python\n+///\n+///   def forward(sequential, input):\n+///     for module in sequential:\n+///       input = module(input)\n+///     return input\n+///\n+/// \\endrst\n+///\n+/// The value a `Sequential` further provides is that it allows treating a whole\n+/// list of modules as a single module, such that performing a\n+/// transformation on the `Sequential` applies to each of the modules it stores\n+/// (which are each a registered submodule of the `Sequential`). For example,\n+/// calling `.to(torch::kCUDA)` on a `Sequential` will move each module in the\n+/// list to CUDA memory. For example:\n+///\n+/// \\rst\n+/// .. code-block:: cpp\n+///\n+///   torch::nn::Sequential seq(\n+///     torch::nn::Linear(3, 4),\n+///     torch::nn::BatchNorm(4),\n+///     torch::nn::Dropout(0.5)\n+///   );\n+///\n+///   // Convert all modules to CUDA.\n+///   seq->to(torch::kCUDA);\n+///\n+/// \\endrst\n+///\n+/// Finally, `Sequential` provides a lightweight container API, such as allowing\n+/// iteration over submodules, positional access, adding a new module after\n+/// construction via `push_back`, as well as joining two `Sequential`s via\n+/// `extend`.\n+///\n+/// \\rst\n+/// .. attention::\n+///   One current limitation of `Sequential` is that all except the first module\n+///   must accept a single argument. You may define your modules to take tuples\n+///   to satisfy this constraints, but `Sequential` will currently not unpack", "path": "torch/csrc/api/include/torch/nn/modules/sequential.h", "position": null, "original_position": 73, "commit_id": "f223e16d7f935482955fa1e7b5f3508c7e6d267f", "original_commit_id": "a31312b83872a76a9aff036ac8d7afb437232a3c", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "this constraint", "created_at": "2018-09-14T03:23:53Z", "updated_at": "2018-11-23T15:51:21Z", "html_url": "https://github.com/pytorch/pytorch/pull/11648#discussion_r217591895", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/11648", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/217591895"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/11648#discussion_r217591895"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/11648"}}, "body_html": "<p>this constraint</p>", "body_text": "this constraint"}