{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/358578593", "html_url": "https://github.com/pytorch/pytorch/issues/3736#issuecomment-358578593", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/3736", "id": 358578593, "node_id": "MDEyOklzc3VlQ29tbWVudDM1ODU3ODU5Mw==", "user": {"login": "jackyko1991", "id": 12065287, "node_id": "MDQ6VXNlcjEyMDY1Mjg3", "avatar_url": "https://avatars0.githubusercontent.com/u/12065287?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackyko1991", "html_url": "https://github.com/jackyko1991", "followers_url": "https://api.github.com/users/jackyko1991/followers", "following_url": "https://api.github.com/users/jackyko1991/following{/other_user}", "gists_url": "https://api.github.com/users/jackyko1991/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackyko1991/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackyko1991/subscriptions", "organizations_url": "https://api.github.com/users/jackyko1991/orgs", "repos_url": "https://api.github.com/users/jackyko1991/repos", "events_url": "https://api.github.com/users/jackyko1991/events{/privacy}", "received_events_url": "https://api.github.com/users/jackyko1991/received_events", "type": "User", "site_admin": false}, "created_at": "2018-01-18T08:50:52Z", "updated_at": "2018-01-18T08:50:52Z", "author_association": "NONE", "body_html": "<p>I also have this error in my onnx exportm</p>\n<p>my code:</p>\n<pre><code>import torch\nfrom torch import nn\nimport torch.onnx\nimport vnet\nimport onnx\nimport onnx_caffe2.backend\nfrom torch.autograd import Variable\nimport os\nimport torch.backends.cudnn as cudnn\n\ndef pause():\n    programPause = raw_input(\"Press the &lt;ENTER&gt; key to continue...\")\n\n# create the network model\ngpus = [0,1]\ntorch_model = vnet.VNet(elu=False, nll=True)\n\n# load trained model weights\nsnapshot_path = '/home/jacky/disk0/projects/vnet-data-brain/snapshot/snapshot_975.pth.tar'\nbatch_size = 1    # just a random number\ncudnn.enabled = False\n\n# Initialize model with the pretrained weights\nmap_location = lambda storage, loc: storage\nif torch.cuda.is_available():\n    map_location = None\n\nsnapshot = torch.load(snapshot_path, map_location=map_location)\nstate_dict = snapshot['state_dict']\n\n# In state dict keys there is an extra word inserted by model parallel: \"module.\". We remove it here.\nfrom collections import OrderedDict\nnew_state_dict = OrderedDict()\n\nfor k, v in state_dict.items():\n  if k[0:6] == 'module':\n    name = k[7:] # remove `module.`\n  else:\n    name = k\n  new_state_dict[name] = v\n\nprint \"load state dict\"\n\ntorch_model.load_state_dict(new_state_dict)\ntorch_model = torch_model.cpu()\n\nprint \"finish loading model\"\n\n# set the train mode to false since we will only run the forward pass.\ntorch_model.train(False)\n\n# Input to the model\nx = Variable(torch.randn(batch_size, 1, 128, 128, 128).float(), requires_grad=True)\n\n# Export the model\nonnx_export_path = \"/home/jacky/disk0/projects/vnet-data-brain/onnx/vnet_ventricle.onnx\"\nif not os.path.isdir(os.path.dirname(onnx_export_path)):\n\tos.mkdir(os.path.dirname(onnx_export_path))\n\ntorch_out = torch.onnx._export(torch_model,             # model being run\n                               x,                       # model input (or a tuple for multiple inputs)\n                               onnx_export_path,        # where to save the model (can be a file or file-like object)\n                               export_params=True)      # store the trained parameter weights inside the model file     \n</code></pre>", "body_text": "I also have this error in my onnx exportm\nmy code:\nimport torch\nfrom torch import nn\nimport torch.onnx\nimport vnet\nimport onnx\nimport onnx_caffe2.backend\nfrom torch.autograd import Variable\nimport os\nimport torch.backends.cudnn as cudnn\n\ndef pause():\n    programPause = raw_input(\"Press the <ENTER> key to continue...\")\n\n# create the network model\ngpus = [0,1]\ntorch_model = vnet.VNet(elu=False, nll=True)\n\n# load trained model weights\nsnapshot_path = '/home/jacky/disk0/projects/vnet-data-brain/snapshot/snapshot_975.pth.tar'\nbatch_size = 1    # just a random number\ncudnn.enabled = False\n\n# Initialize model with the pretrained weights\nmap_location = lambda storage, loc: storage\nif torch.cuda.is_available():\n    map_location = None\n\nsnapshot = torch.load(snapshot_path, map_location=map_location)\nstate_dict = snapshot['state_dict']\n\n# In state dict keys there is an extra word inserted by model parallel: \"module.\". We remove it here.\nfrom collections import OrderedDict\nnew_state_dict = OrderedDict()\n\nfor k, v in state_dict.items():\n  if k[0:6] == 'module':\n    name = k[7:] # remove `module.`\n  else:\n    name = k\n  new_state_dict[name] = v\n\nprint \"load state dict\"\n\ntorch_model.load_state_dict(new_state_dict)\ntorch_model = torch_model.cpu()\n\nprint \"finish loading model\"\n\n# set the train mode to false since we will only run the forward pass.\ntorch_model.train(False)\n\n# Input to the model\nx = Variable(torch.randn(batch_size, 1, 128, 128, 128).float(), requires_grad=True)\n\n# Export the model\nonnx_export_path = \"/home/jacky/disk0/projects/vnet-data-brain/onnx/vnet_ventricle.onnx\"\nif not os.path.isdir(os.path.dirname(onnx_export_path)):\n\tos.mkdir(os.path.dirname(onnx_export_path))\n\ntorch_out = torch.onnx._export(torch_model,             # model being run\n                               x,                       # model input (or a tuple for multiple inputs)\n                               onnx_export_path,        # where to save the model (can be a file or file-like object)\n                               export_params=True)      # store the trained parameter weights inside the model file", "body": "I also have this error in my onnx exportm\r\n\r\nmy code:\r\n```\r\nimport torch\r\nfrom torch import nn\r\nimport torch.onnx\r\nimport vnet\r\nimport onnx\r\nimport onnx_caffe2.backend\r\nfrom torch.autograd import Variable\r\nimport os\r\nimport torch.backends.cudnn as cudnn\r\n\r\ndef pause():\r\n    programPause = raw_input(\"Press the <ENTER> key to continue...\")\r\n\r\n# create the network model\r\ngpus = [0,1]\r\ntorch_model = vnet.VNet(elu=False, nll=True)\r\n\r\n# load trained model weights\r\nsnapshot_path = '/home/jacky/disk0/projects/vnet-data-brain/snapshot/snapshot_975.pth.tar'\r\nbatch_size = 1    # just a random number\r\ncudnn.enabled = False\r\n\r\n# Initialize model with the pretrained weights\r\nmap_location = lambda storage, loc: storage\r\nif torch.cuda.is_available():\r\n    map_location = None\r\n\r\nsnapshot = torch.load(snapshot_path, map_location=map_location)\r\nstate_dict = snapshot['state_dict']\r\n\r\n# In state dict keys there is an extra word inserted by model parallel: \"module.\". We remove it here.\r\nfrom collections import OrderedDict\r\nnew_state_dict = OrderedDict()\r\n\r\nfor k, v in state_dict.items():\r\n  if k[0:6] == 'module':\r\n    name = k[7:] # remove `module.`\r\n  else:\r\n    name = k\r\n  new_state_dict[name] = v\r\n\r\nprint \"load state dict\"\r\n\r\ntorch_model.load_state_dict(new_state_dict)\r\ntorch_model = torch_model.cpu()\r\n\r\nprint \"finish loading model\"\r\n\r\n# set the train mode to false since we will only run the forward pass.\r\ntorch_model.train(False)\r\n\r\n# Input to the model\r\nx = Variable(torch.randn(batch_size, 1, 128, 128, 128).float(), requires_grad=True)\r\n\r\n# Export the model\r\nonnx_export_path = \"/home/jacky/disk0/projects/vnet-data-brain/onnx/vnet_ventricle.onnx\"\r\nif not os.path.isdir(os.path.dirname(onnx_export_path)):\r\n\tos.mkdir(os.path.dirname(onnx_export_path))\r\n\r\ntorch_out = torch.onnx._export(torch_model,             # model being run\r\n                               x,                       # model input (or a tuple for multiple inputs)\r\n                               onnx_export_path,        # where to save the model (can be a file or file-like object)\r\n                               export_params=True)      # store the trained parameter weights inside the model file     \r\n```"}