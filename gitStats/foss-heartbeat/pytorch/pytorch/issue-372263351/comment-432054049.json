{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/432054049", "html_url": "https://github.com/pytorch/pytorch/pull/12902#issuecomment-432054049", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/12902", "id": 432054049, "node_id": "MDEyOklzc3VlQ29tbWVudDQzMjA1NDA0OQ==", "user": {"login": "drnikolaev", "id": 7504104, "node_id": "MDQ6VXNlcjc1MDQxMDQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/7504104?v=4", "gravatar_id": "", "url": "https://api.github.com/users/drnikolaev", "html_url": "https://github.com/drnikolaev", "followers_url": "https://api.github.com/users/drnikolaev/followers", "following_url": "https://api.github.com/users/drnikolaev/following{/other_user}", "gists_url": "https://api.github.com/users/drnikolaev/gists{/gist_id}", "starred_url": "https://api.github.com/users/drnikolaev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/drnikolaev/subscriptions", "organizations_url": "https://api.github.com/users/drnikolaev/orgs", "repos_url": "https://api.github.com/users/drnikolaev/repos", "events_url": "https://api.github.com/users/drnikolaev/events{/privacy}", "received_events_url": "https://api.github.com/users/drnikolaev/received_events", "type": "User", "site_admin": false}, "created_at": "2018-10-23T01:41:20Z", "updated_at": "2018-10-23T01:41:20Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Sure! It's definitely not perf improvement. It is correctness fix. The problem is that some cuDNN calls (like <code>cudnnGetConvolutionForwardAlgorithm</code> for example) assert the kernel to have either 2 or 3 dimensions. So, PyTorch crashes otherwise. Not good when user wants 1D kernel. The fix doesn't change the state, it just re-declares 1D kernels of size N to be considered as 2D kernels of size Nx1. Let me compose a test for this use case, please hold on...</p>", "body_text": "Sure! It's definitely not perf improvement. It is correctness fix. The problem is that some cuDNN calls (like cudnnGetConvolutionForwardAlgorithm for example) assert the kernel to have either 2 or 3 dimensions. So, PyTorch crashes otherwise. Not good when user wants 1D kernel. The fix doesn't change the state, it just re-declares 1D kernels of size N to be considered as 2D kernels of size Nx1. Let me compose a test for this use case, please hold on...", "body": "Sure! It's definitely not perf improvement. It is correctness fix. The problem is that some cuDNN calls (like `cudnnGetConvolutionForwardAlgorithm` for example) assert the kernel to have either 2 or 3 dimensions. So, PyTorch crashes otherwise. Not good when user wants 1D kernel. The fix doesn't change the state, it just re-declares 1D kernels of size N to be considered as 2D kernels of size Nx1. Let me compose a test for this use case, please hold on..."}