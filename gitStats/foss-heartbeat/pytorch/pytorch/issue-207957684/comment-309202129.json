{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/309202129", "html_url": "https://github.com/pytorch/pytorch/issues/755#issuecomment-309202129", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/755", "id": 309202129, "node_id": "MDEyOklzc3VlQ29tbWVudDMwOTIwMjEyOQ==", "user": {"login": "Roger-luo", "id": 8445510, "node_id": "MDQ6VXNlcjg0NDU1MTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/8445510?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Roger-luo", "html_url": "https://github.com/Roger-luo", "followers_url": "https://api.github.com/users/Roger-luo/followers", "following_url": "https://api.github.com/users/Roger-luo/following{/other_user}", "gists_url": "https://api.github.com/users/Roger-luo/gists{/gist_id}", "starred_url": "https://api.github.com/users/Roger-luo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Roger-luo/subscriptions", "organizations_url": "https://api.github.com/users/Roger-luo/orgs", "repos_url": "https://api.github.com/users/Roger-luo/repos", "events_url": "https://api.github.com/users/Roger-luo/events{/privacy}", "received_events_url": "https://api.github.com/users/Roger-luo/received_events", "type": "User", "site_admin": false}, "created_at": "2017-06-17T08:37:25Z", "updated_at": "2017-06-17T08:43:52Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1299153\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/PhilippPelz\">@PhilippPelz</a> Thanks for your comments. I'm checking your implementation. And firstly, I'm not sure about your <code>ger</code> implementation. Some complex blas functions are not included in your THBlas.c like you defined GER as <code>zger_</code> and <code>cger_</code> in the generate headers, but there is no blas function with cger_ in the generic/THBlas.c. Though, I can use your gemv and some other functions. And IMO maybe you should add .gch to .gitignore? Have you pushed all your extensions to your fork? I can make some pull request to your master based on your implementation first.</p>\n<p>And for <code>DOT</code> I guess maybe for complex vectors, <code>dotc</code> routines for dot are more common?</p>\n<p>And yes, if just use <code>real</code> will be easier for implementation, I was just feeling odd when <code>real</code> is actually a complex...</p>\n<p>And for tests, I didn't see any previous tests for TH.  Where should I write those tests? or we just write some python tests</p>", "body_text": "@PhilippPelz Thanks for your comments. I'm checking your implementation. And firstly, I'm not sure about your ger implementation. Some complex blas functions are not included in your THBlas.c like you defined GER as zger_ and cger_ in the generate headers, but there is no blas function with cger_ in the generic/THBlas.c. Though, I can use your gemv and some other functions. And IMO maybe you should add .gch to .gitignore? Have you pushed all your extensions to your fork? I can make some pull request to your master based on your implementation first.\nAnd for DOT I guess maybe for complex vectors, dotc routines for dot are more common?\nAnd yes, if just use real will be easier for implementation, I was just feeling odd when real is actually a complex...\nAnd for tests, I didn't see any previous tests for TH.  Where should I write those tests? or we just write some python tests", "body": "@PhilippPelz Thanks for your comments. I'm checking your implementation. And firstly, I'm not sure about your `ger` implementation. Some complex blas functions are not included in your THBlas.c like you defined GER as `zger_` and `cger_` in the generate headers, but there is no blas function with cger_ in the generic/THBlas.c. Though, I can use your gemv and some other functions. And IMO maybe you should add .gch to .gitignore? Have you pushed all your extensions to your fork? I can make some pull request to your master based on your implementation first. \r\n\r\nAnd for `DOT` I guess maybe for complex vectors, `dotc` routines for dot are more common?\r\n\r\nAnd yes, if just use `real` will be easier for implementation, I was just feeling odd when `real` is actually a complex...\r\n\r\nAnd for tests, I didn't see any previous tests for TH.  Where should I write those tests? or we just write some python tests"}