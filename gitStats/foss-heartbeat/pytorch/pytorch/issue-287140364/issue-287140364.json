{"url": "https://api.github.com/repos/pytorch/pytorch/issues/4560", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/4560/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/4560/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/4560/events", "html_url": "https://github.com/pytorch/pytorch/issues/4560", "id": 287140364, "node_id": "MDU6SXNzdWUyODcxNDAzNjQ=", "number": 4560, "title": "[Intent to Implement] MatrixRef", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 3, "created_at": "2018-01-09T16:03:06Z", "updated_at": "2018-07-13T19:28:44Z", "closed_at": "2018-07-13T19:28:44Z", "author_association": "CONTRIBUTOR", "body_html": "<pre><code>namespace at {\n  /// MatrixRef - Like an ArrayRef, but with an extra recorded strides so that\n  /// we can easily view it as a multidimensional array.\n  ///\n  /// Like ArrayRef, this class does not own the underlying data, it is expected\n  /// to be used in situations where the data resides in some other buffer.\n  ///\n  /// This is intended to be trivially copyable, so it should be passed by\n  /// value.\n  ///\n  /// For now, 2D only (so the copies are actually cheap, without having\n  /// to write a SmallVector class) and contiguous only (so we can\n  /// return non-strided ArrayRef on index).\n  ///\n  /// P.S. dimension 0 indexes rows, dimension 1 indexes columns\n  template&lt;typename T&gt;\n  class MatrixRef {\n\n    /// Underlying ArrayRef\n    ArrayRef arr;\n\n    /// Stride of dim 0 (outer dimension)\n    size_type stride0;\n    \n    // Stride of dim 1 is assumed to be 1\n\n  }\n</code></pre>", "body_text": "namespace at {\n  /// MatrixRef - Like an ArrayRef, but with an extra recorded strides so that\n  /// we can easily view it as a multidimensional array.\n  ///\n  /// Like ArrayRef, this class does not own the underlying data, it is expected\n  /// to be used in situations where the data resides in some other buffer.\n  ///\n  /// This is intended to be trivially copyable, so it should be passed by\n  /// value.\n  ///\n  /// For now, 2D only (so the copies are actually cheap, without having\n  /// to write a SmallVector class) and contiguous only (so we can\n  /// return non-strided ArrayRef on index).\n  ///\n  /// P.S. dimension 0 indexes rows, dimension 1 indexes columns\n  template<typename T>\n  class MatrixRef {\n\n    /// Underlying ArrayRef\n    ArrayRef arr;\n\n    /// Stride of dim 0 (outer dimension)\n    size_type stride0;\n    \n    // Stride of dim 1 is assumed to be 1\n\n  }", "body": "```\r\nnamespace at {\r\n  /// MatrixRef - Like an ArrayRef, but with an extra recorded strides so that\r\n  /// we can easily view it as a multidimensional array.\r\n  ///\r\n  /// Like ArrayRef, this class does not own the underlying data, it is expected\r\n  /// to be used in situations where the data resides in some other buffer.\r\n  ///\r\n  /// This is intended to be trivially copyable, so it should be passed by\r\n  /// value.\r\n  ///\r\n  /// For now, 2D only (so the copies are actually cheap, without having\r\n  /// to write a SmallVector class) and contiguous only (so we can\r\n  /// return non-strided ArrayRef on index).\r\n  ///\r\n  /// P.S. dimension 0 indexes rows, dimension 1 indexes columns\r\n  template<typename T>\r\n  class MatrixRef {\r\n\r\n    /// Underlying ArrayRef\r\n    ArrayRef arr;\r\n\r\n    /// Stride of dim 0 (outer dimension)\r\n    size_type stride0;\r\n    \r\n    // Stride of dim 1 is assumed to be 1\r\n\r\n  }\r\n```"}