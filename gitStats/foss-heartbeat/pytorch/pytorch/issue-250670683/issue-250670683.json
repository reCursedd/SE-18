{"url": "https://api.github.com/repos/pytorch/pytorch/issues/2461", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/2461/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/2461/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/2461/events", "html_url": "https://github.com/pytorch/pytorch/pull/2461", "id": 250670683, "node_id": "MDExOlB1bGxSZXF1ZXN0MTM2MDU2NTU2", "number": 2461, "title": "Fixes for Tensor constructor with NumPy array argument", "user": {"login": "lantiga", "id": 191033, "node_id": "MDQ6VXNlcjE5MTAzMw==", "avatar_url": "https://avatars2.githubusercontent.com/u/191033?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lantiga", "html_url": "https://github.com/lantiga", "followers_url": "https://api.github.com/users/lantiga/followers", "following_url": "https://api.github.com/users/lantiga/following{/other_user}", "gists_url": "https://api.github.com/users/lantiga/gists{/gist_id}", "starred_url": "https://api.github.com/users/lantiga/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lantiga/subscriptions", "organizations_url": "https://api.github.com/users/lantiga/orgs", "repos_url": "https://api.github.com/users/lantiga/repos", "events_url": "https://api.github.com/users/lantiga/events{/privacy}", "received_events_url": "https://api.github.com/users/lantiga/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-08-16T15:36:00Z", "updated_at": "2017-08-16T21:45:02Z", "closed_at": "2017-08-16T21:44:59Z", "author_association": "COLLABORATOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/2461", "html_url": "https://github.com/pytorch/pytorch/pull/2461", "diff_url": "https://github.com/pytorch/pytorch/pull/2461.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/2461.patch"}, "body_html": "<p>This PR addresses <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"239756600\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/1957\" data-hovercard-type=\"issue\" data-hovercard-url=\"/pytorch/pytorch/issues/1957/hovercard\" href=\"https://github.com/pytorch/pytorch/issues/1957\">#1957</a> and <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"246560931\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/2246\" data-hovercard-type=\"issue\" data-hovercard-url=\"/pytorch/pytorch/issues/2246/hovercard\" href=\"https://github.com/pytorch/pytorch/issues/2246\">#2246</a>.<br>\nGiven<br>\n<code>torch.DoubleTensor(np.array([0,1,2], dtype=np.float32))</code><br>\ntorch will now copy the contents of the array in a storage of appropriate type. If types match, it will share the underlying array (no-copy), with equivalent semantics to initializing a tensor with another tensor.</p>\n<p>On CUDA,<br>\n<code>torch.cuda.FloatTensor(np.random.rand(10,2).astype(np.float32))</code><br>\nwill now work by making a copy.</p>\n<p>I added a test for the various combinations.</p>\n<p><strong>Question for the reviewers</strong>: in the <code>COPY_FROM_ARRAY_CUDA</code> macro, I always copy into <code>data_guard</code> regardless of whether the array had the same type as the tensor. Should we share the underlying C array in this case or would there be any issues with it?</p>", "body_text": "This PR addresses #1957 and #2246.\nGiven\ntorch.DoubleTensor(np.array([0,1,2], dtype=np.float32))\ntorch will now copy the contents of the array in a storage of appropriate type. If types match, it will share the underlying array (no-copy), with equivalent semantics to initializing a tensor with another tensor.\nOn CUDA,\ntorch.cuda.FloatTensor(np.random.rand(10,2).astype(np.float32))\nwill now work by making a copy.\nI added a test for the various combinations.\nQuestion for the reviewers: in the COPY_FROM_ARRAY_CUDA macro, I always copy into data_guard regardless of whether the array had the same type as the tensor. Should we share the underlying C array in this case or would there be any issues with it?", "body": "This PR addresses #1957 and #2246.\r\nGiven\r\n`\r\ntorch.DoubleTensor(np.array([0,1,2], dtype=np.float32))\r\n`\r\ntorch will now copy the contents of the array in a storage of appropriate type. If types match, it will share the underlying array (no-copy), with equivalent semantics to initializing a tensor with another tensor.\r\n\r\nOn CUDA,\r\n`\r\ntorch.cuda.FloatTensor(np.random.rand(10,2).astype(np.float32))\r\n`\r\nwill now work by making a copy.\r\n\r\nI added a test for the various combinations.\r\n\r\n__Question for the reviewers__: in the `COPY_FROM_ARRAY_CUDA` macro, I always copy into `data_guard` regardless of whether the array had the same type as the tensor. Should we share the underlying C array in this case or would there be any issues with it?"}