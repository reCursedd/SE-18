{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/386793990", "html_url": "https://github.com/pytorch/pytorch/issues/7282#issuecomment-386793990", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/7282", "id": 386793990, "node_id": "MDEyOklzc3VlQ29tbWVudDM4Njc5Mzk5MA==", "user": {"login": "Gleb845", "id": 38536622, "node_id": "MDQ6VXNlcjM4NTM2NjIy", "avatar_url": "https://avatars2.githubusercontent.com/u/38536622?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gleb845", "html_url": "https://github.com/Gleb845", "followers_url": "https://api.github.com/users/Gleb845/followers", "following_url": "https://api.github.com/users/Gleb845/following{/other_user}", "gists_url": "https://api.github.com/users/Gleb845/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gleb845/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gleb845/subscriptions", "organizations_url": "https://api.github.com/users/Gleb845/orgs", "repos_url": "https://api.github.com/users/Gleb845/repos", "events_url": "https://api.github.com/users/Gleb845/events{/privacy}", "received_events_url": "https://api.github.com/users/Gleb845/received_events", "type": "User", "site_admin": false}, "created_at": "2018-05-05T09:54:11Z", "updated_at": "2018-05-05T09:54:11Z", "author_association": "NONE", "body_html": "<p>For example, we have a convolution layer. It has n filters. Each filter has a three-dimensional array of weights (d - depth, h - height, w-width). Thus, the layer weights can be represented as a four-dimensional array [n, d, h, w]. Moreover, the elements of this array will be of type float or single(depending on the language). InstanceNorm requires 2 one-dimensional parameter arrays(shift and scale). And so for each layer consistently. In the file you just need to sequentially write these arrays in a sequence, made up of groups of 4 bytes(that is how big a variable of type float). For example, for a convolutional layer with 3 filters, 3x3 size and 3 depth, we will have 81 float number, so 81*4=324 bytes will be written to the file. Translate required pre-learned model, Justin Johnson architecture.For example, the same model that is implemented in DeepLearn.JS (<a href=\"https://github.com/reiinakano/fast-style-transfer-deeplearnjs\">https://github.com/reiinakano/fast-style-transfer-deeplearnjs</a>). You can see how model data is stored in this library. Look in the folder with one of the models: <a href=\"https://github.com/reiinakano/fast-style-transfer-deeplearnjs/tree/master/src/ckpts/la_muse\">https://github.com/reiinakano/fast-style-transfer-deeplearnjs/tree/master/src/ckpts/la_muse</a>. There is a file .JSON with array sizes and a set of files with the weights themselves. Further, this data is used in the program. I need exactly this format.</p>", "body_text": "For example, we have a convolution layer. It has n filters. Each filter has a three-dimensional array of weights (d - depth, h - height, w-width). Thus, the layer weights can be represented as a four-dimensional array [n, d, h, w]. Moreover, the elements of this array will be of type float or single(depending on the language). InstanceNorm requires 2 one-dimensional parameter arrays(shift and scale). And so for each layer consistently. In the file you just need to sequentially write these arrays in a sequence, made up of groups of 4 bytes(that is how big a variable of type float). For example, for a convolutional layer with 3 filters, 3x3 size and 3 depth, we will have 81 float number, so 81*4=324 bytes will be written to the file. Translate required pre-learned model, Justin Johnson architecture.For example, the same model that is implemented in DeepLearn.JS (https://github.com/reiinakano/fast-style-transfer-deeplearnjs). You can see how model data is stored in this library. Look in the folder with one of the models: https://github.com/reiinakano/fast-style-transfer-deeplearnjs/tree/master/src/ckpts/la_muse. There is a file .JSON with array sizes and a set of files with the weights themselves. Further, this data is used in the program. I need exactly this format.", "body": "For example, we have a convolution layer. It has n filters. Each filter has a three-dimensional array of weights (d - depth, h - height, w-width). Thus, the layer weights can be represented as a four-dimensional array [n, d, h, w]. Moreover, the elements of this array will be of type float or single(depending on the language). InstanceNorm requires 2 one-dimensional parameter arrays(shift and scale). And so for each layer consistently. In the file you just need to sequentially write these arrays in a sequence, made up of groups of 4 bytes(that is how big a variable of type float). For example, for a convolutional layer with 3 filters, 3x3 size and 3 depth, we will have 81 float number, so 81*4=324 bytes will be written to the file. Translate required pre-learned model, Justin Johnson architecture.For example, the same model that is implemented in DeepLearn.JS (https://github.com/reiinakano/fast-style-transfer-deeplearnjs). You can see how model data is stored in this library. Look in the folder with one of the models: https://github.com/reiinakano/fast-style-transfer-deeplearnjs/tree/master/src/ckpts/la_muse. There is a file .JSON with array sizes and a set of files with the weights themselves. Further, this data is used in the program. I need exactly this format."}