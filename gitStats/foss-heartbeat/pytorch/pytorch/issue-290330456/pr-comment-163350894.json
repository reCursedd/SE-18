{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/163350894", "pull_request_review_id": 90950690, "id": 163350894, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MzM1MDg5NA==", "diff_hunk": "@@ -90,9 +133,24 @@ struct Function : std::enable_shared_from_this<Function> {\n   };\n \n   // Computes is_executable and next_functions from a list of input variables\n-  static FunctionFlags flags(const variable_list& inputs);\n-  static FunctionFlags flags(const std::initializer_list<Variable>& inputs);\n-  static FunctionFlags flags(at::TensorList inputs);\n+  // (but which are tensors, because this is what happens in the autogenerated\n+  // code)\n+  template<typename... Args> inline static FunctionFlags tensor_flags(Args&&... args) {\n+    FunctionFlags f;\n+    if (!GradMode::is_enabled()) return f;\n+    f.next_functions.reserve(count_tensors(std::forward<Args>(args)...));\n+    SetTensorFunctionFlags(f).apply(std::forward<Args>(args)...);\n+    return f; // RVO\n+  }\n+\n+  // Computes is_executable and next_functions from a list of input variables\n+  template<typename... Args> inline static FunctionFlags flags(Args&&... args) {", "path": "torch/csrc/autograd/function.h", "position": null, "original_position": 78, "commit_id": "9808a0f09c7ec39a03ca5cc8f4d30036ff5dafa2", "original_commit_id": "f6e8dc44e749fef56c49404f3f47d494f4e53d54", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "This seems orthogonal to this patchset. I am also not convinced that we can assume that the precondition you suggested holds for all call sites of `flags`. For example, it's called from `wrap_outputs` and I'm pretty sure `wrap_outputs` is always called no matter if we require grads or not.\r\n\r\nI fixed the comment though.", "created_at": "2018-01-23T19:27:14Z", "updated_at": "2018-11-23T15:38:28Z", "html_url": "https://github.com/pytorch/pytorch/pull/4772#discussion_r163350894", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4772", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/163350894"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/4772#discussion_r163350894"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4772"}}, "body_html": "<p>This seems orthogonal to this patchset. I am also not convinced that we can assume that the precondition you suggested holds for all call sites of <code>flags</code>. For example, it's called from <code>wrap_outputs</code> and I'm pretty sure <code>wrap_outputs</code> is always called no matter if we require grads or not.</p>\n<p>I fixed the comment though.</p>", "body_text": "This seems orthogonal to this patchset. I am also not convinced that we can assume that the precondition you suggested holds for all call sites of flags. For example, it's called from wrap_outputs and I'm pretty sure wrap_outputs is always called no matter if we require grads or not.\nI fixed the comment though.", "in_reply_to_id": 163211482}