{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/4772", "id": 164209553, "node_id": "MDExOlB1bGxSZXF1ZXN0MTY0MjA5NTUz", "html_url": "https://github.com/pytorch/pytorch/pull/4772", "diff_url": "https://github.com/pytorch/pytorch/pull/4772.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/4772.patch", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/4772", "number": 4772, "state": "closed", "locked": false, "title": "Use variadic templates instead of initializer lists and overloads (ROUND 2)", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "Suppose you are given a list of arguments, each of which may be Tensor or\r\nTensorList.  How can you write a function that can treat these arguments\r\nuniformly as a list of tensors?  This patch solves the problem using\r\nvariadic templates.\r\n\r\nWhy variadic templates?  Use of variadic templates means anyone working\r\nwith this code has to understand universal references, perfect\r\nforwarding, parameter packs and some idioms of C++ template design.\r\nHowever, I argue that variadic templates are the *right* tool for\r\nsupporting the implementation of functions which must take an\r\narbitrarily heterogenous set of inputs.  We were able to limp by\r\nin old code because, for the most part, tensor inputs were homogenous,\r\nbut this is no longer the case for some non-primitively differentiable\r\nfunctions; and with the upcoming cuDNN RNN in ATen PR, will no longer be\r\nthe case for primitively differentiable functions too.\r\n\r\nThere are two parts to the PR.\r\n\r\nFirst, we add torch/csrc/utils/variadic.h, which defines a mix-in\r\nIterArgs that takes any class which supports operator(), and augments\r\nwith a new variadic function apply() which calls operator() on each\r\nargument passed to it.  In an original draft of the patch, I wrote the\r\nrecursion for each parameter pack from scratch for each function;\r\nhowever, it turns out there are no fewer than seven instances where we\r\nneed this idiom, and the mix-in reduces the lines of code, and also\r\nhelps centralize the most important (and easy to forget) boilerplate\r\nfor perfect forwarding.\r\n\r\nTo verify that IterArgs is compiled away into an unrolled form per\r\ncall site, I inspected the assembly on some synthetic examples.\r\n\r\nNext, we modify the following functions to make use of IterArgs:\r\n\r\n  - compute_requires_grad\r\n  - Function::flags (Variable and Tensor variants)\r\n  - flatten\r\n  - isTracing\r\n  - count_tensors / count_variables\r\n\r\nFinally, the tuple packer is rewritten to be variadic, although we\r\ncannot make use of IterArgs (since we are given a tuple).  It might\r\nmake sense to refactor the code into a generic piece which invokes\r\na function with the arguments specified by a tuple, and then an\r\nappropriate IterArgs, but we leave this for future work.\r\n\r\nOne thing to note: we cannot write a function with overloads for both\r\nTensor and Variable, because both ArrayRef<Variable> and Tensor have\r\nimplicit conversions from Variable, making such an overload ambiguous.\r\nIt may be interesting to remove the implicit conversion from ArrayRef.\r\n\r\nSigned-off-by: Edward Z. Yang <ezyang@fb.com>", "created_at": "2018-01-22T02:01:58Z", "updated_at": "2018-11-23T15:38:28Z", "closed_at": "2018-01-26T20:56:40Z", "merged_at": "2018-01-26T20:56:40Z", "merge_commit_sha": "b8ab7bee26c41ceb90a1f944dd27c135699adaf2", "assignee": null, "assignees": [], "requested_reviewers": [], "requested_teams": [], "labels": [], "milestone": null, "commits_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4772/commits", "review_comments_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4772/comments", "review_comment_url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments{/number}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/4772/comments", "statuses_url": "https://api.github.com/repos/pytorch/pytorch/statuses/9808a0f09c7ec39a03ca5cc8f4d30036ff5dafa2", "head": {"label": "ezyang:variadic-templates", "ref": "variadic-templates", "sha": "9808a0f09c7ec39a03ca5cc8f4d30036ff5dafa2", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "repo": {"id": 101798885, "node_id": "MDEwOlJlcG9zaXRvcnkxMDE3OTg4ODU=", "name": "pytorch", "full_name": "ezyang/pytorch", "private": false, "owner": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "html_url": "https://github.com/ezyang/pytorch", "description": "Tensors and Dynamic neural networks in Python  with strong GPU acceleration", "fork": true, "url": "https://api.github.com/repos/ezyang/pytorch", "forks_url": "https://api.github.com/repos/ezyang/pytorch/forks", "keys_url": "https://api.github.com/repos/ezyang/pytorch/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/ezyang/pytorch/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/ezyang/pytorch/teams", "hooks_url": "https://api.github.com/repos/ezyang/pytorch/hooks", "issue_events_url": "https://api.github.com/repos/ezyang/pytorch/issues/events{/number}", "events_url": "https://api.github.com/repos/ezyang/pytorch/events", "assignees_url": "https://api.github.com/repos/ezyang/pytorch/assignees{/user}", "branches_url": "https://api.github.com/repos/ezyang/pytorch/branches{/branch}", "tags_url": "https://api.github.com/repos/ezyang/pytorch/tags", "blobs_url": "https://api.github.com/repos/ezyang/pytorch/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/ezyang/pytorch/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/ezyang/pytorch/git/refs{/sha}", "trees_url": "https://api.github.com/repos/ezyang/pytorch/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/ezyang/pytorch/statuses/{sha}", "languages_url": "https://api.github.com/repos/ezyang/pytorch/languages", "stargazers_url": "https://api.github.com/repos/ezyang/pytorch/stargazers", "contributors_url": "https://api.github.com/repos/ezyang/pytorch/contributors", "subscribers_url": "https://api.github.com/repos/ezyang/pytorch/subscribers", "subscription_url": "https://api.github.com/repos/ezyang/pytorch/subscription", "commits_url": "https://api.github.com/repos/ezyang/pytorch/commits{/sha}", "git_commits_url": "https://api.github.com/repos/ezyang/pytorch/git/commits{/sha}", "comments_url": "https://api.github.com/repos/ezyang/pytorch/comments{/number}", "issue_comment_url": "https://api.github.com/repos/ezyang/pytorch/issues/comments{/number}", "contents_url": "https://api.github.com/repos/ezyang/pytorch/contents/{+path}", "compare_url": "https://api.github.com/repos/ezyang/pytorch/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/ezyang/pytorch/merges", "archive_url": "https://api.github.com/repos/ezyang/pytorch/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/ezyang/pytorch/downloads", "issues_url": "https://api.github.com/repos/ezyang/pytorch/issues{/number}", "pulls_url": "https://api.github.com/repos/ezyang/pytorch/pulls{/number}", "milestones_url": "https://api.github.com/repos/ezyang/pytorch/milestones{/number}", "notifications_url": "https://api.github.com/repos/ezyang/pytorch/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/ezyang/pytorch/labels{/name}", "releases_url": "https://api.github.com/repos/ezyang/pytorch/releases{/id}", "deployments_url": "https://api.github.com/repos/ezyang/pytorch/deployments", "created_at": "2017-08-29T19:28:39Z", "updated_at": "2018-10-29T15:06:40Z", "pushed_at": "2018-11-21T22:30:09Z", "git_url": "git://github.com/ezyang/pytorch.git", "ssh_url": "git@github.com:ezyang/pytorch.git", "clone_url": "https://github.com/ezyang/pytorch.git", "svn_url": "https://github.com/ezyang/pytorch", "homepage": "http://pytorch.org", "size": 88254, "stargazers_count": 1, "watchers_count": 1, "language": "C++", "has_issues": false, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 0, "mirror_url": null, "archived": false, "open_issues_count": 2, "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "forks": 0, "open_issues": 2, "watchers": 1, "default_branch": "master"}}, "base": {"label": "pytorch:master", "ref": "master", "sha": "5a5afa5c17f92a3910e766aeef12218a76cb7ba8", "user": {"login": "pytorch", "id": 21003710, "node_id": "MDEyOk9yZ2FuaXphdGlvbjIxMDAzNzEw", "avatar_url": "https://avatars3.githubusercontent.com/u/21003710?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pytorch", "html_url": "https://github.com/pytorch", "followers_url": "https://api.github.com/users/pytorch/followers", "following_url": "https://api.github.com/users/pytorch/following{/other_user}", "gists_url": "https://api.github.com/users/pytorch/gists{/gist_id}", "starred_url": "https://api.github.com/users/pytorch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pytorch/subscriptions", "organizations_url": "https://api.github.com/users/pytorch/orgs", "repos_url": "https://api.github.com/users/pytorch/repos", "events_url": "https://api.github.com/users/pytorch/events{/privacy}", "received_events_url": "https://api.github.com/users/pytorch/received_events", "type": "Organization", "site_admin": false}, "repo": {"id": 65600975, "node_id": "MDEwOlJlcG9zaXRvcnk2NTYwMDk3NQ==", "name": "pytorch", "full_name": "pytorch/pytorch", "private": false, "owner": {"login": "pytorch", "id": 21003710, "node_id": "MDEyOk9yZ2FuaXphdGlvbjIxMDAzNzEw", "avatar_url": "https://avatars3.githubusercontent.com/u/21003710?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pytorch", "html_url": "https://github.com/pytorch", "followers_url": "https://api.github.com/users/pytorch/followers", "following_url": "https://api.github.com/users/pytorch/following{/other_user}", "gists_url": "https://api.github.com/users/pytorch/gists{/gist_id}", "starred_url": "https://api.github.com/users/pytorch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pytorch/subscriptions", "organizations_url": "https://api.github.com/users/pytorch/orgs", "repos_url": "https://api.github.com/users/pytorch/repos", "events_url": "https://api.github.com/users/pytorch/events{/privacy}", "received_events_url": "https://api.github.com/users/pytorch/received_events", "type": "Organization", "site_admin": false}, "html_url": "https://github.com/pytorch/pytorch", "description": "Tensors and Dynamic neural networks in Python  with strong GPU acceleration", "fork": false, "url": "https://api.github.com/repos/pytorch/pytorch", "forks_url": "https://api.github.com/repos/pytorch/pytorch/forks", "keys_url": "https://api.github.com/repos/pytorch/pytorch/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/pytorch/pytorch/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/pytorch/pytorch/teams", "hooks_url": "https://api.github.com/repos/pytorch/pytorch/hooks", "issue_events_url": "https://api.github.com/repos/pytorch/pytorch/issues/events{/number}", "events_url": "https://api.github.com/repos/pytorch/pytorch/events", "assignees_url": "https://api.github.com/repos/pytorch/pytorch/assignees{/user}", "branches_url": "https://api.github.com/repos/pytorch/pytorch/branches{/branch}", "tags_url": "https://api.github.com/repos/pytorch/pytorch/tags", "blobs_url": "https://api.github.com/repos/pytorch/pytorch/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/pytorch/pytorch/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/pytorch/pytorch/git/refs{/sha}", "trees_url": "https://api.github.com/repos/pytorch/pytorch/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/pytorch/pytorch/statuses/{sha}", "languages_url": "https://api.github.com/repos/pytorch/pytorch/languages", "stargazers_url": "https://api.github.com/repos/pytorch/pytorch/stargazers", "contributors_url": "https://api.github.com/repos/pytorch/pytorch/contributors", "subscribers_url": "https://api.github.com/repos/pytorch/pytorch/subscribers", "subscription_url": "https://api.github.com/repos/pytorch/pytorch/subscription", "commits_url": "https://api.github.com/repos/pytorch/pytorch/commits{/sha}", "git_commits_url": "https://api.github.com/repos/pytorch/pytorch/git/commits{/sha}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/comments{/number}", "issue_comment_url": "https://api.github.com/repos/pytorch/pytorch/issues/comments{/number}", "contents_url": "https://api.github.com/repos/pytorch/pytorch/contents/{+path}", "compare_url": "https://api.github.com/repos/pytorch/pytorch/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/pytorch/pytorch/merges", "archive_url": "https://api.github.com/repos/pytorch/pytorch/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/pytorch/pytorch/downloads", "issues_url": "https://api.github.com/repos/pytorch/pytorch/issues{/number}", "pulls_url": "https://api.github.com/repos/pytorch/pytorch/pulls{/number}", "milestones_url": "https://api.github.com/repos/pytorch/pytorch/milestones{/number}", "notifications_url": "https://api.github.com/repos/pytorch/pytorch/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/pytorch/pytorch/labels{/name}", "releases_url": "https://api.github.com/repos/pytorch/pytorch/releases{/id}", "deployments_url": "https://api.github.com/repos/pytorch/pytorch/deployments", "created_at": "2016-08-13T05:26:41Z", "updated_at": "2018-11-24T14:27:35Z", "pushed_at": "2018-11-24T12:42:01Z", "git_url": "git://github.com/pytorch/pytorch.git", "ssh_url": "git@github.com:pytorch/pytorch.git", "clone_url": "https://github.com/pytorch/pytorch.git", "svn_url": "https://github.com/pytorch/pytorch", "homepage": "http://pytorch.org", "size": 89656, "stargazers_count": 21591, "watchers_count": 21591, "language": "C++", "has_issues": true, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 5154, "mirror_url": null, "archived": false, "open_issues_count": 2196, "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "forks": 5154, "open_issues": 2196, "watchers": 21591, "default_branch": "master"}}, "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4772"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/4772"}, "issue": {"href": "https://api.github.com/repos/pytorch/pytorch/issues/4772"}, "comments": {"href": "https://api.github.com/repos/pytorch/pytorch/issues/4772/comments"}, "review_comments": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4772/comments"}, "review_comment": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments{/number}"}, "commits": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4772/commits"}, "statuses": {"href": "https://api.github.com/repos/pytorch/pytorch/statuses/9808a0f09c7ec39a03ca5cc8f4d30036ff5dafa2"}}, "author_association": "CONTRIBUTOR", "body_html": "<p>Suppose you are given a list of arguments, each of which may be Tensor or<br>\nTensorList.  How can you write a function that can treat these arguments<br>\nuniformly as a list of tensors?  This patch solves the problem using<br>\nvariadic templates.</p>\n<p>Why variadic templates?  Use of variadic templates means anyone working<br>\nwith this code has to understand universal references, perfect<br>\nforwarding, parameter packs and some idioms of C++ template design.<br>\nHowever, I argue that variadic templates are the <em>right</em> tool for<br>\nsupporting the implementation of functions which must take an<br>\narbitrarily heterogenous set of inputs.  We were able to limp by<br>\nin old code because, for the most part, tensor inputs were homogenous,<br>\nbut this is no longer the case for some non-primitively differentiable<br>\nfunctions; and with the upcoming cuDNN RNN in ATen PR, will no longer be<br>\nthe case for primitively differentiable functions too.</p>\n<p>There are two parts to the PR.</p>\n<p>First, we add torch/csrc/utils/variadic.h, which defines a mix-in<br>\nIterArgs that takes any class which supports operator(), and augments<br>\nwith a new variadic function apply() which calls operator() on each<br>\nargument passed to it.  In an original draft of the patch, I wrote the<br>\nrecursion for each parameter pack from scratch for each function;<br>\nhowever, it turns out there are no fewer than seven instances where we<br>\nneed this idiom, and the mix-in reduces the lines of code, and also<br>\nhelps centralize the most important (and easy to forget) boilerplate<br>\nfor perfect forwarding.</p>\n<p>To verify that IterArgs is compiled away into an unrolled form per<br>\ncall site, I inspected the assembly on some synthetic examples.</p>\n<p>Next, we modify the following functions to make use of IterArgs:</p>\n<ul>\n<li>compute_requires_grad</li>\n<li>Function::flags (Variable and Tensor variants)</li>\n<li>flatten</li>\n<li>isTracing</li>\n<li>count_tensors / count_variables</li>\n</ul>\n<p>Finally, the tuple packer is rewritten to be variadic, although we<br>\ncannot make use of IterArgs (since we are given a tuple).  It might<br>\nmake sense to refactor the code into a generic piece which invokes<br>\na function with the arguments specified by a tuple, and then an<br>\nappropriate IterArgs, but we leave this for future work.</p>\n<p>One thing to note: we cannot write a function with overloads for both<br>\nTensor and Variable, because both ArrayRef and Tensor have<br>\nimplicit conversions from Variable, making such an overload ambiguous.<br>\nIt may be interesting to remove the implicit conversion from ArrayRef.</p>\n<p>Signed-off-by: Edward Z. Yang <a href=\"mailto:ezyang@fb.com\">ezyang@fb.com</a></p>", "body_text": "Suppose you are given a list of arguments, each of which may be Tensor or\nTensorList.  How can you write a function that can treat these arguments\nuniformly as a list of tensors?  This patch solves the problem using\nvariadic templates.\nWhy variadic templates?  Use of variadic templates means anyone working\nwith this code has to understand universal references, perfect\nforwarding, parameter packs and some idioms of C++ template design.\nHowever, I argue that variadic templates are the right tool for\nsupporting the implementation of functions which must take an\narbitrarily heterogenous set of inputs.  We were able to limp by\nin old code because, for the most part, tensor inputs were homogenous,\nbut this is no longer the case for some non-primitively differentiable\nfunctions; and with the upcoming cuDNN RNN in ATen PR, will no longer be\nthe case for primitively differentiable functions too.\nThere are two parts to the PR.\nFirst, we add torch/csrc/utils/variadic.h, which defines a mix-in\nIterArgs that takes any class which supports operator(), and augments\nwith a new variadic function apply() which calls operator() on each\nargument passed to it.  In an original draft of the patch, I wrote the\nrecursion for each parameter pack from scratch for each function;\nhowever, it turns out there are no fewer than seven instances where we\nneed this idiom, and the mix-in reduces the lines of code, and also\nhelps centralize the most important (and easy to forget) boilerplate\nfor perfect forwarding.\nTo verify that IterArgs is compiled away into an unrolled form per\ncall site, I inspected the assembly on some synthetic examples.\nNext, we modify the following functions to make use of IterArgs:\n\ncompute_requires_grad\nFunction::flags (Variable and Tensor variants)\nflatten\nisTracing\ncount_tensors / count_variables\n\nFinally, the tuple packer is rewritten to be variadic, although we\ncannot make use of IterArgs (since we are given a tuple).  It might\nmake sense to refactor the code into a generic piece which invokes\na function with the arguments specified by a tuple, and then an\nappropriate IterArgs, but we leave this for future work.\nOne thing to note: we cannot write a function with overloads for both\nTensor and Variable, because both ArrayRef and Tensor have\nimplicit conversions from Variable, making such an overload ambiguous.\nIt may be interesting to remove the implicit conversion from ArrayRef.\nSigned-off-by: Edward Z. Yang ezyang@fb.com", "merged": true, "mergeable": null, "rebaseable": null, "mergeable_state": "unknown", "merged_by": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "comments": 1, "review_comments": 8, "maintainer_can_modify": false, "commits": 1, "additions": 254, "deletions": 134, "changed_files": 10}