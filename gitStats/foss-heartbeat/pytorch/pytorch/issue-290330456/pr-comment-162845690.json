{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/162845690", "pull_request_review_id": 90366562, "id": 162845690, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2Mjg0NTY5MA==", "diff_hunk": "@@ -245,29 +246,24 @@ static void ensure_no_aten_scalars(Tensor & data) {\n   }\n }\n \n-template<typename T>\n-static bool computes_grad_tmpl(T tensors) {\n-  if (!GradMode::is_enabled()) {\n-    return false;\n-  }\n-  for (const Tensor& tensor : tensors) {\n-    auto& var = static_cast<const Variable&>(tensor);\n+struct ComputeRequiresGrad : IterArgs<ComputeRequiresGrad> {\n+  bool out = false;\n+  using IterArgs<ComputeRequiresGrad>::operator();\n+  void operator()(const at::Tensor& tensor) {\n+    const auto& var = static_cast<const Variable&>(tensor);\n     if (var.defined() && var.requires_grad()) {\n-      return true;\n+      out = true;\n     }\n   }\n-  return false;\n-}\n+  bool short_circuit() { return out; }\n+};\n \n-using TensorRef = std::reference_wrapper<const Tensor>;\n-using TensorRefList = std::initializer_list<TensorRef>;", "path": "tools/autograd/templates/VariableType.cpp", "position": 35, "original_position": 35, "commit_id": "9808a0f09c7ec39a03ca5cc8f4d30036ff5dafa2", "original_commit_id": "f6e8dc44e749fef56c49404f3f47d494f4e53d54", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "`reference_wrapper` is no longer needed here, because we don't need to make sure the initializer list in `f({x, y})` constructs references to x and y rather than copies: now it's just `f(x, y)` and the universal reference will do the right thing. (@colesbury)", "created_at": "2018-01-22T04:05:00Z", "updated_at": "2018-11-23T15:38:23Z", "html_url": "https://github.com/pytorch/pytorch/pull/4772#discussion_r162845690", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4772", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/162845690"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/4772#discussion_r162845690"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4772"}}, "body_html": "<p><code>reference_wrapper</code> is no longer needed here, because we don't need to make sure the initializer list in <code>f({x, y})</code> constructs references to x and y rather than copies: now it's just <code>f(x, y)</code> and the universal reference will do the right thing. (<a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=655866\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/colesbury\">@colesbury</a>)</p>", "body_text": "reference_wrapper is no longer needed here, because we don't need to make sure the initializer list in f({x, y}) constructs references to x and y rather than copies: now it's just f(x, y) and the universal reference will do the right thing. (@colesbury)"}