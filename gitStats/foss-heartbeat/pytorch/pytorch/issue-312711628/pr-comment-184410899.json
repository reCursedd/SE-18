{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/184410899", "pull_request_review_id": 115601553, "id": 184410899, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NDQxMDg5OQ==", "diff_hunk": "@@ -44,14 +50,42 @@ def _check_input_dim(self, input):\n     def forward(self, input):\n         self._check_input_dim(input)\n \n+        exponential_average_factor = 0.0\n+\n+        if self.training and self.track_running_stats:\n+            self.num_batches_tracked += 1\n+            if self.momentum is None:  # use cumulative moving average\n+                exponential_average_factor = 1.0 / max(1, self.num_batches_tracked.item())\n+            else:  # use exponential moving average\n+                exponential_average_factor = self.momentum\n+\n         return F.batch_norm(\n             input, self.running_mean, self.running_var, self.weight, self.bias,\n-            self.training or not self.track_running_stats, self.momentum, self.eps)\n+            self.training or not self.track_running_stats,\n+            exponential_average_factor, self.eps)\n \n     def extra_repr(self):\n         return '{num_features}, eps={eps}, momentum={momentum}, affine={affine}, ' \\\n                'track_running_stats={track_running_stats}'.format(**self.__dict__)\n \n+    def _load_from_state_dict(self,\n+                              state_dict, prefix, strict,\n+                              missing_keys, unexpected_keys, error_msgs):\n+        try:\n+            version = state_dict._metadata[prefix[:-1]]['version']\n+        except (AttributeError, KeyError):\n+            version = None\n+\n+        if version is None and self.track_running_stats:\n+            num_batches_tracked_key = prefix + 'num_batches_tracked'\n+            if num_batches_tracked_key not in state_dict:\n+                # Add the missing num_batches_tracked counter\n+                state_dict[num_batches_tracked_key] = torch.LongTensor([0])", "path": "torch/nn/modules/batchnorm.py", "position": null, "original_position": 58, "commit_id": "dd32c928770c9e38fc8e8b073a6814b3ebbd7a29", "original_commit_id": "3c8a9ff2a65b46576f5edf73736e3f565d0271ca", "user": {"login": "SsnL", "id": 5674597, "node_id": "MDQ6VXNlcjU2NzQ1OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5674597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SsnL", "html_url": "https://github.com/SsnL", "followers_url": "https://api.github.com/users/SsnL/followers", "following_url": "https://api.github.com/users/SsnL/following{/other_user}", "gists_url": "https://api.github.com/users/SsnL/gists{/gist_id}", "starred_url": "https://api.github.com/users/SsnL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SsnL/subscriptions", "organizations_url": "https://api.github.com/users/SsnL/orgs", "repos_url": "https://api.github.com/users/SsnL/repos", "events_url": "https://api.github.com/users/SsnL/events{/privacy}", "received_events_url": "https://api.github.com/users/SsnL/received_events", "type": "User", "site_admin": false}, "body": "`torch.tensor(0, dtype=torch.long)`", "created_at": "2018-04-26T14:30:49Z", "updated_at": "2018-11-23T15:43:14Z", "html_url": "https://github.com/pytorch/pytorch/pull/6445#discussion_r184410899", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/6445", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/184410899"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/6445#discussion_r184410899"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/6445"}}, "body_html": "<p><code>torch.tensor(0, dtype=torch.long)</code></p>", "body_text": "torch.tensor(0, dtype=torch.long)"}