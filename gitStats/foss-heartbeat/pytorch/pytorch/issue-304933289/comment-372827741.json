{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/372827741", "html_url": "https://github.com/pytorch/pytorch/issues/5751#issuecomment-372827741", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/5751", "id": 372827741, "node_id": "MDEyOklzc3VlQ29tbWVudDM3MjgyNzc0MQ==", "user": {"login": "zou3519", "id": 5652049, "node_id": "MDQ6VXNlcjU2NTIwNDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/5652049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zou3519", "html_url": "https://github.com/zou3519", "followers_url": "https://api.github.com/users/zou3519/followers", "following_url": "https://api.github.com/users/zou3519/following{/other_user}", "gists_url": "https://api.github.com/users/zou3519/gists{/gist_id}", "starred_url": "https://api.github.com/users/zou3519/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zou3519/subscriptions", "organizations_url": "https://api.github.com/users/zou3519/orgs", "repos_url": "https://api.github.com/users/zou3519/repos", "events_url": "https://api.github.com/users/zou3519/events{/privacy}", "received_events_url": "https://api.github.com/users/zou3519/received_events", "type": "User", "site_admin": false}, "created_at": "2018-03-13T21:39:35Z", "updated_at": "2018-03-13T21:39:35Z", "author_association": "CONTRIBUTOR", "body_html": "<p><code>nn.AdaptiveMaxPool1d(output_size=2)</code> will do a MaxPool with some kernel_size and stride such that the output size (in this case, the last dimension) becomes 2. For the example:</p>\n<pre><code>(0 ,.,.) =\n   0   1   2   3   4\n   5   6   7   8   9\n\n(1 ,.,.) =\n  10  11  12  13  14\n  15  16  17  18  19\n\n(2 ,.,.) =\n  20  21  22  23  24\n  25  26  27  28  29\n</code></pre>\n<p>let's look at the slice <code>b[0][0] = [0   1   2   3   4]</code>. For a MaxPool applied to this to result in an output of size 2, we'd need a kernel of size 3 and stride 3. So the result becomes [max(0, 1, 2), max(3, 4, ??)] which is [2, 4].</p>\n<p>I think if you want the behavior you're describing, <code>b.topk(2)</code> will do that.</p>", "body_text": "nn.AdaptiveMaxPool1d(output_size=2) will do a MaxPool with some kernel_size and stride such that the output size (in this case, the last dimension) becomes 2. For the example:\n(0 ,.,.) =\n   0   1   2   3   4\n   5   6   7   8   9\n\n(1 ,.,.) =\n  10  11  12  13  14\n  15  16  17  18  19\n\n(2 ,.,.) =\n  20  21  22  23  24\n  25  26  27  28  29\n\nlet's look at the slice b[0][0] = [0   1   2   3   4]. For a MaxPool applied to this to result in an output of size 2, we'd need a kernel of size 3 and stride 3. So the result becomes [max(0, 1, 2), max(3, 4, ??)] which is [2, 4].\nI think if you want the behavior you're describing, b.topk(2) will do that.", "body": "`nn.AdaptiveMaxPool1d(output_size=2)` will do a MaxPool with some kernel_size and stride such that the output size (in this case, the last dimension) becomes 2. For the example:\r\n```\r\n(0 ,.,.) =\r\n   0   1   2   3   4\r\n   5   6   7   8   9\r\n\r\n(1 ,.,.) =\r\n  10  11  12  13  14\r\n  15  16  17  18  19\r\n\r\n(2 ,.,.) =\r\n  20  21  22  23  24\r\n  25  26  27  28  29\r\n```\r\nlet's look at the slice `b[0][0] = [0   1   2   3   4]`. For a MaxPool applied to this to result in an output of size 2, we'd need a kernel of size 3 and stride 3. So the result becomes [max(0, 1, 2), max(3, 4, ??)] which is [2, 4].\r\n\r\nI think if you want the behavior you're describing, `b.topk(2)` will do that.\r\n"}