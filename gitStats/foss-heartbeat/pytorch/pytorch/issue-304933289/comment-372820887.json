{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/372820887", "html_url": "https://github.com/pytorch/pytorch/issues/5751#issuecomment-372820887", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/5751", "id": 372820887, "node_id": "MDEyOklzc3VlQ29tbWVudDM3MjgyMDg4Nw==", "user": {"login": "zou3519", "id": 5652049, "node_id": "MDQ6VXNlcjU2NTIwNDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/5652049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zou3519", "html_url": "https://github.com/zou3519", "followers_url": "https://api.github.com/users/zou3519/followers", "following_url": "https://api.github.com/users/zou3519/following{/other_user}", "gists_url": "https://api.github.com/users/zou3519/gists{/gist_id}", "starred_url": "https://api.github.com/users/zou3519/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zou3519/subscriptions", "organizations_url": "https://api.github.com/users/zou3519/orgs", "repos_url": "https://api.github.com/users/zou3519/repos", "events_url": "https://api.github.com/users/zou3519/events{/privacy}", "received_events_url": "https://api.github.com/users/zou3519/received_events", "type": "User", "site_admin": false}, "created_at": "2018-03-13T21:15:04Z", "updated_at": "2018-03-13T21:15:04Z", "author_association": "CONTRIBUTOR", "body_html": "<pre><code>In [2]: b\nOut[2]:\n\n(0 ,.,.) =\n   0   1   2   3   4\n   5   6   7   8   9\n\n(1 ,.,.) =\n  10  11  12  13  14\n  15  16  17  18  19\n\n(2 ,.,.) =\n  20  21  22  23  24\n  25  26  27  28  29\n[torch.FloatTensor of size (3,2,5)]\nIn [4]: m2(b)  # nn.AdaptiveMaxPool1d(output_size=2)\nOut[4]:\n\n(0 ,.,.) =\n   2   4\n   7   9\n\n(1 ,.,.) =\n  12  14\n  17  19\n\n(2 ,.,.) =\n  22  24\n  27  29\n</code></pre>\n<p>Why isn't this what you would expect? This is equivalent to doing <code>nn.MaxPool1d(3, ceil_mode=True)</code></p>", "body_text": "In [2]: b\nOut[2]:\n\n(0 ,.,.) =\n   0   1   2   3   4\n   5   6   7   8   9\n\n(1 ,.,.) =\n  10  11  12  13  14\n  15  16  17  18  19\n\n(2 ,.,.) =\n  20  21  22  23  24\n  25  26  27  28  29\n[torch.FloatTensor of size (3,2,5)]\nIn [4]: m2(b)  # nn.AdaptiveMaxPool1d(output_size=2)\nOut[4]:\n\n(0 ,.,.) =\n   2   4\n   7   9\n\n(1 ,.,.) =\n  12  14\n  17  19\n\n(2 ,.,.) =\n  22  24\n  27  29\n\nWhy isn't this what you would expect? This is equivalent to doing nn.MaxPool1d(3, ceil_mode=True)", "body": "```\r\nIn [2]: b\r\nOut[2]:\r\n\r\n(0 ,.,.) =\r\n   0   1   2   3   4\r\n   5   6   7   8   9\r\n\r\n(1 ,.,.) =\r\n  10  11  12  13  14\r\n  15  16  17  18  19\r\n\r\n(2 ,.,.) =\r\n  20  21  22  23  24\r\n  25  26  27  28  29\r\n[torch.FloatTensor of size (3,2,5)]\r\nIn [4]: m2(b)  # nn.AdaptiveMaxPool1d(output_size=2)\r\nOut[4]:\r\n\r\n(0 ,.,.) =\r\n   2   4\r\n   7   9\r\n\r\n(1 ,.,.) =\r\n  12  14\r\n  17  19\r\n\r\n(2 ,.,.) =\r\n  22  24\r\n  27  29\r\n```\r\nWhy isn't this what you would expect? This is equivalent to doing `nn.MaxPool1d(3, ceil_mode=True)`"}