{"url": "https://api.github.com/repos/pytorch/pytorch/issues/5751", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/5751/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/5751/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/5751/events", "html_url": "https://github.com/pytorch/pytorch/issues/5751", "id": 304933289, "node_id": "MDU6SXNzdWUzMDQ5MzMyODk=", "number": 5751, "title": "AdaptiveMaxPool1d selecting incorrect values", "user": {"login": "sserr23", "id": 9504023, "node_id": "MDQ6VXNlcjk1MDQwMjM=", "avatar_url": "https://avatars3.githubusercontent.com/u/9504023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sserr23", "html_url": "https://github.com/sserr23", "followers_url": "https://api.github.com/users/sserr23/followers", "following_url": "https://api.github.com/users/sserr23/following{/other_user}", "gists_url": "https://api.github.com/users/sserr23/gists{/gist_id}", "starred_url": "https://api.github.com/users/sserr23/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sserr23/subscriptions", "organizations_url": "https://api.github.com/users/sserr23/orgs", "repos_url": "https://api.github.com/users/sserr23/repos", "events_url": "https://api.github.com/users/sserr23/events{/privacy}", "received_events_url": "https://api.github.com/users/sserr23/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2018-03-13T20:58:57Z", "updated_at": "2018-03-13T21:41:05Z", "closed_at": "2018-03-13T21:41:04Z", "author_association": "NONE", "body_html": "<p>Pytorch version: 0.2.0_4</p>\n<p>When providing an output size n&gt;1 as the parameter for AdaptiveMaxPool1d, it seems like the lowest value returned in each dimension (i.e., the nth largest value) is incorrect.</p>\n<pre lang=\"import\" data-meta=\"torch\"><code>b = torch.FloatTensor([i for i in range(30)]).view(3, 2, 5)\nb = torch.autograd.Variable(b)\nm2 = torch.nn.AdaptiveMaxPool1d(2)\nm3 = torch.nn.AdaptiveMaxPool1d(3)\n\nb\nVariable containing:\n(0 ,.,.) = \n   0   1   2   3   4\n   5   6   7   8   9\n\n(1 ,.,.) = \n  10  11  12  13  14\n  15  16  17  18  19\n\n(2 ,.,.) = \n  20  21  22  23  24\n  25  26  27  28  29\n[torch.FloatTensor of size 3x2x5]\n\nm2(b)\nVariable containing:\n(0 ,.,.) = \n   2   4\n   7   9\n\n(1 ,.,.) = \n  12  14\n  17  19\n\n(2 ,.,.) = \n  22  24\n  27  29\n[torch.FloatTensor of size 3x2x2]\n\nm3(b)\nVariable containing:\n(0 ,.,.) = \n   1   3   4\n   6   8   9\n\n(1 ,.,.) = \n  11  13  14\n  16  18  19\n\n(2 ,.,.) = \n  21  23  24\n  26  28  29\n[torch.FloatTensor of size 3x2x3]\n\n</code></pre>", "body_text": "Pytorch version: 0.2.0_4\nWhen providing an output size n>1 as the parameter for AdaptiveMaxPool1d, it seems like the lowest value returned in each dimension (i.e., the nth largest value) is incorrect.\nb = torch.FloatTensor([i for i in range(30)]).view(3, 2, 5)\nb = torch.autograd.Variable(b)\nm2 = torch.nn.AdaptiveMaxPool1d(2)\nm3 = torch.nn.AdaptiveMaxPool1d(3)\n\nb\nVariable containing:\n(0 ,.,.) = \n   0   1   2   3   4\n   5   6   7   8   9\n\n(1 ,.,.) = \n  10  11  12  13  14\n  15  16  17  18  19\n\n(2 ,.,.) = \n  20  21  22  23  24\n  25  26  27  28  29\n[torch.FloatTensor of size 3x2x5]\n\nm2(b)\nVariable containing:\n(0 ,.,.) = \n   2   4\n   7   9\n\n(1 ,.,.) = \n  12  14\n  17  19\n\n(2 ,.,.) = \n  22  24\n  27  29\n[torch.FloatTensor of size 3x2x2]\n\nm3(b)\nVariable containing:\n(0 ,.,.) = \n   1   3   4\n   6   8   9\n\n(1 ,.,.) = \n  11  13  14\n  16  18  19\n\n(2 ,.,.) = \n  21  23  24\n  26  28  29\n[torch.FloatTensor of size 3x2x3]", "body": "Pytorch version: 0.2.0_4\r\n\r\nWhen providing an output size n>1 as the parameter for AdaptiveMaxPool1d, it seems like the lowest value returned in each dimension (i.e., the nth largest value) is incorrect.\r\n\r\n\r\n\r\n```import torch\r\nb = torch.FloatTensor([i for i in range(30)]).view(3, 2, 5)\r\nb = torch.autograd.Variable(b)\r\nm2 = torch.nn.AdaptiveMaxPool1d(2)\r\nm3 = torch.nn.AdaptiveMaxPool1d(3)\r\n\r\nb\r\nVariable containing:\r\n(0 ,.,.) = \r\n   0   1   2   3   4\r\n   5   6   7   8   9\r\n\r\n(1 ,.,.) = \r\n  10  11  12  13  14\r\n  15  16  17  18  19\r\n\r\n(2 ,.,.) = \r\n  20  21  22  23  24\r\n  25  26  27  28  29\r\n[torch.FloatTensor of size 3x2x5]\r\n\r\nm2(b)\r\nVariable containing:\r\n(0 ,.,.) = \r\n   2   4\r\n   7   9\r\n\r\n(1 ,.,.) = \r\n  12  14\r\n  17  19\r\n\r\n(2 ,.,.) = \r\n  22  24\r\n  27  29\r\n[torch.FloatTensor of size 3x2x2]\r\n\r\nm3(b)\r\nVariable containing:\r\n(0 ,.,.) = \r\n   1   3   4\r\n   6   8   9\r\n\r\n(1 ,.,.) = \r\n  11  13  14\r\n  16  18  19\r\n\r\n(2 ,.,.) = \r\n  21  23  24\r\n  26  28  29\r\n[torch.FloatTensor of size 3x2x3]\r\n\r\n```"}