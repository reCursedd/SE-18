{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/215440570", "pull_request_review_id": 152707467, "id": 215440570, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNTQ0MDU3MA==", "diff_hunk": "@@ -182,6 +181,29 @@ set(TORCH_SRCS\n   ${TORCH_SRC_DIR}/csrc/utils/variadic.cpp\n   )\n \n+if (NOT WIN32)\n+  add_definitions(-DUSE_CPU_FUSER)", "path": "torch/CMakeLists.txt", "position": null, "original_position": 22, "commit_id": "b8793a0e4816739a48d503f6388d92e61b8c83a1", "original_commit_id": "6fdaaa1f85d6e9ed7189419328ada48e773c6dec", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "Yeah, this isn't going to fly. If you were only using the macros from C++ files, it'd be OK, but you've got the macros in headers, which means that you need to make sure that they get durably set, even if other projects include your header in question.\r\n\r\nThere are two ways to do this:\r\n\r\n1. Use `target_compile_definitions`. Example in `caffe2/CMakeLists.txt`\r\n\r\n```\r\n  # NB: This must be target_compile_definitions, not target_compile_options,\r\n  # as the latter is not respected by nvcc\r\n  target_compile_definitions(caffe2 PUBLIC \"AT_CORE_STATIC_WINDOWS=1\")\r\n```\r\n\r\nThis will be propagated to downstream projects IFF they use cmake to do the build, and use the installed cmake config file. This is somewhat error prone.\r\n\r\n2. Write out a macro file, config.h style, which specifies if we built with or without the support. Example `aten/src/ATen/Config.h.in`. A quick grep suggests we don't have anything equivalent in torch at the moment.", "created_at": "2018-09-05T22:06:01Z", "updated_at": "2018-11-23T15:50:38Z", "html_url": "https://github.com/pytorch/pytorch/pull/10981#discussion_r215440570", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/10981", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/215440570"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/10981#discussion_r215440570"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/10981"}}, "body_html": "<p>Yeah, this isn't going to fly. If you were only using the macros from C++ files, it'd be OK, but you've got the macros in headers, which means that you need to make sure that they get durably set, even if other projects include your header in question.</p>\n<p>There are two ways to do this:</p>\n<ol>\n<li>Use <code>target_compile_definitions</code>. Example in <code>caffe2/CMakeLists.txt</code></li>\n</ol>\n<pre><code>  # NB: This must be target_compile_definitions, not target_compile_options,\n  # as the latter is not respected by nvcc\n  target_compile_definitions(caffe2 PUBLIC \"AT_CORE_STATIC_WINDOWS=1\")\n</code></pre>\n<p>This will be propagated to downstream projects IFF they use cmake to do the build, and use the installed cmake config file. This is somewhat error prone.</p>\n<ol start=\"2\">\n<li>Write out a macro file, config.h style, which specifies if we built with or without the support. Example <code>aten/src/ATen/Config.h.in</code>. A quick grep suggests we don't have anything equivalent in torch at the moment.</li>\n</ol>", "body_text": "Yeah, this isn't going to fly. If you were only using the macros from C++ files, it'd be OK, but you've got the macros in headers, which means that you need to make sure that they get durably set, even if other projects include your header in question.\nThere are two ways to do this:\n\nUse target_compile_definitions. Example in caffe2/CMakeLists.txt\n\n  # NB: This must be target_compile_definitions, not target_compile_options,\n  # as the latter is not respected by nvcc\n  target_compile_definitions(caffe2 PUBLIC \"AT_CORE_STATIC_WINDOWS=1\")\n\nThis will be propagated to downstream projects IFF they use cmake to do the build, and use the installed cmake config file. This is somewhat error prone.\n\nWrite out a macro file, config.h style, which specifies if we built with or without the support. Example aten/src/ATen/Config.h.in. A quick grep suggests we don't have anything equivalent in torch at the moment."}