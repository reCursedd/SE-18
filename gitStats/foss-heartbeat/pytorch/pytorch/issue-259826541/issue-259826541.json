{"url": "https://api.github.com/repos/pytorch/pytorch/issues/2831", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/2831/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/2831/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/2831/events", "html_url": "https://github.com/pytorch/pytorch/issues/2831", "id": 259826541, "node_id": "MDU6SXNzdWUyNTk4MjY1NDE=", "number": 2831, "title": "Add deterministic option to cuDNN backend", "user": {"login": "daemon", "id": 6188572, "node_id": "MDQ6VXNlcjYxODg1NzI=", "avatar_url": "https://avatars0.githubusercontent.com/u/6188572?v=4", "gravatar_id": "", "url": "https://api.github.com/users/daemon", "html_url": "https://github.com/daemon", "followers_url": "https://api.github.com/users/daemon/followers", "following_url": "https://api.github.com/users/daemon/following{/other_user}", "gists_url": "https://api.github.com/users/daemon/gists{/gist_id}", "starred_url": "https://api.github.com/users/daemon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/daemon/subscriptions", "organizations_url": "https://api.github.com/users/daemon/orgs", "repos_url": "https://api.github.com/users/daemon/repos", "events_url": "https://api.github.com/users/daemon/events{/privacy}", "received_events_url": "https://api.github.com/users/daemon/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-09-22T14:07:28Z", "updated_at": "2017-09-27T03:59:28Z", "closed_at": "2017-09-27T03:59:27Z", "author_association": "NONE", "body_html": "<p>Some of of cuDNN's algorithms are non-deterministic, even with the seed set to X, for example</p>\n<div class=\"highlight highlight-source-c\"><pre><span class=\"pl-k\">typedef</span> <span class=\"pl-k\">enum</span>\n{\n    CUDNN_CONVOLUTION_BWD_FILTER_ALGO_0         = <span class=\"pl-c1\">0</span>,  <span class=\"pl-c\"><span class=\"pl-c\">//</span> non-deterministic</span>\n    CUDNN_CONVOLUTION_BWD_FILTER_ALGO_3         = <span class=\"pl-c1\">3</span>,  <span class=\"pl-c\"><span class=\"pl-c\">//</span> non-deterministic, algo0 with workspace</span></pre></div>\n<div class=\"highlight highlight-source-c\"><pre><span class=\"pl-k\">typedef</span> <span class=\"pl-k\">enum</span>\n{\n    CUDNN_CONVOLUTION_BWD_DATA_ALGO_0                 = <span class=\"pl-c1\">0</span>, <span class=\"pl-c\"><span class=\"pl-c\">//</span> non-deterministic</span></pre></div>\n<p>(This list is probably non-exhaustive)</p>\n<p>PyTorch currently provides no way for the user to select which specific algorithms to use in cuDNN. However, this is fine, since PyTorch was designed to be more high-level and abstract than some of the other frameworks.</p>\n<p>Perhaps instead of exposing the entire cuDNN algorithm choices, a boolean variable specifying non-determinism vs determinism should be added? This would be along the lines of the current <code>torch.backends.cudnn.enabled</code> option.</p>\n<p>Currently, users have to resort to CPU or disabling cuDNN for reproducibility. Some optimizers do work deterministically (at least for us) on the GPU (e.g. SGD, Adam), but Adadelta and RMSprop do not.</p>", "body_text": "Some of of cuDNN's algorithms are non-deterministic, even with the seed set to X, for example\ntypedef enum\n{\n    CUDNN_CONVOLUTION_BWD_FILTER_ALGO_0         = 0,  // non-deterministic\n    CUDNN_CONVOLUTION_BWD_FILTER_ALGO_3         = 3,  // non-deterministic, algo0 with workspace\ntypedef enum\n{\n    CUDNN_CONVOLUTION_BWD_DATA_ALGO_0                 = 0, // non-deterministic\n(This list is probably non-exhaustive)\nPyTorch currently provides no way for the user to select which specific algorithms to use in cuDNN. However, this is fine, since PyTorch was designed to be more high-level and abstract than some of the other frameworks.\nPerhaps instead of exposing the entire cuDNN algorithm choices, a boolean variable specifying non-determinism vs determinism should be added? This would be along the lines of the current torch.backends.cudnn.enabled option.\nCurrently, users have to resort to CPU or disabling cuDNN for reproducibility. Some optimizers do work deterministically (at least for us) on the GPU (e.g. SGD, Adam), but Adadelta and RMSprop do not.", "body": "Some of of cuDNN's algorithms are non-deterministic, even with the seed set to X, for example\r\n\r\n```C\r\ntypedef enum\r\n{\r\n    CUDNN_CONVOLUTION_BWD_FILTER_ALGO_0         = 0,  // non-deterministic\r\n    CUDNN_CONVOLUTION_BWD_FILTER_ALGO_3         = 3,  // non-deterministic, algo0 with workspace\r\n```\r\n```C\r\ntypedef enum\r\n{\r\n    CUDNN_CONVOLUTION_BWD_DATA_ALGO_0                 = 0, // non-deterministic\r\n```\r\n(This list is probably non-exhaustive)\r\n\r\nPyTorch currently provides no way for the user to select which specific algorithms to use in cuDNN. However, this is fine, since PyTorch was designed to be more high-level and abstract than some of the other frameworks. \r\n\r\nPerhaps instead of exposing the entire cuDNN algorithm choices, a boolean variable specifying non-determinism vs determinism should be added? This would be along the lines of the current `torch.backends.cudnn.enabled` option.\r\n\r\nCurrently, users have to resort to CPU or disabling cuDNN for reproducibility. Some optimizers do work deterministically (at least for us) on the GPU (e.g. SGD, Adam), but Adadelta and RMSprop do not."}