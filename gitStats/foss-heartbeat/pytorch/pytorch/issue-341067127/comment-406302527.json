{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/406302527", "html_url": "https://github.com/pytorch/pytorch/pull/9422#issuecomment-406302527", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/9422", "id": 406302527, "node_id": "MDEyOklzc3VlQ29tbWVudDQwNjMwMjUyNw==", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "created_at": "2018-07-19T14:46:52Z", "updated_at": "2018-07-19T14:46:52Z", "author_association": "MEMBER", "body_html": "<p>I'm not sure if we really want to resolve those members. <code>math.pi</code> will probably remain a constant, but I can easily imagine people using module members for mutable state. Accepting such code doesn't seem right, since the member will effectively be accessed only once, which is not equivalent to what the Python code does.</p>\n<p>It's a reasonable assumption for our builtin functions, and we make it. It's not a reasonable assumption for arbitrary modules.</p>", "body_text": "I'm not sure if we really want to resolve those members. math.pi will probably remain a constant, but I can easily imagine people using module members for mutable state. Accepting such code doesn't seem right, since the member will effectively be accessed only once, which is not equivalent to what the Python code does.\nIt's a reasonable assumption for our builtin functions, and we make it. It's not a reasonable assumption for arbitrary modules.", "body": "I'm not sure if we really want to resolve those members. `math.pi` will probably remain a constant, but I can easily imagine people using module members for mutable state. Accepting such code doesn't seem right, since the member will effectively be accessed only once, which is not equivalent to what the Python code does.\r\n\r\nIt's a reasonable assumption for our builtin functions, and we make it. It's not a reasonable assumption for arbitrary modules."}