{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/408180205", "html_url": "https://github.com/pytorch/pytorch/pull/9422#issuecomment-408180205", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/9422", "id": 408180205, "node_id": "MDEyOklzc3VlQ29tbWVudDQwODE4MDIwNQ==", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "created_at": "2018-07-26T17:51:26Z", "updated_at": "2018-07-26T17:51:26Z", "author_association": "MEMBER", "body_html": "<p>Not sure if having a hardcoded list of constant modules is a good idea. We could do something in the lines of the <code>__constant__</code> annotation we use in our scripted modules. Here are two interfaces I can think of</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-c\"><span class=\"pl-c\">#</span> Tell the JIT that you it should work with the assumption that values from this module never change.</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> It's on you if it's actually mutable, and we don't need to account for this. Using this module in any</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> scripted context is no longer an error.</span>\ntorch.jit.assume_const_module(math)\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span>#####################################################################</span>\n\n<span class=\"pl-en\">@torch.jit.script</span>(<span class=\"pl-v\">const_modules</span><span class=\"pl-k\">=</span>[math, scipy])\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">fn</span>(...):\n    <span class=\"pl-k\">return</span> <span class=\"pl-c1\">...</span></pre></div>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=370202\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/zdevito\">@zdevito</a> wdyt?</p>", "body_text": "Not sure if having a hardcoded list of constant modules is a good idea. We could do something in the lines of the __constant__ annotation we use in our scripted modules. Here are two interfaces I can think of\n# Tell the JIT that you it should work with the assumption that values from this module never change.\n# It's on you if it's actually mutable, and we don't need to account for this. Using this module in any\n# scripted context is no longer an error.\ntorch.jit.assume_const_module(math)\n\n######################################################################\n\n@torch.jit.script(const_modules=[math, scipy])\ndef fn(...):\n    return ...\n@zdevito wdyt?", "body": "Not sure if having a hardcoded list of constant modules is a good idea. We could do something in the lines of the `__constant__` annotation we use in our scripted modules. Here are two interfaces I can think of\r\n```python\r\n# Tell the JIT that you it should work with the assumption that values from this module never change.\r\n# It's on you if it's actually mutable, and we don't need to account for this. Using this module in any\r\n# scripted context is no longer an error.\r\ntorch.jit.assume_const_module(math)\r\n\r\n######################################################################\r\n\r\n@torch.jit.script(const_modules=[math, scipy])\r\ndef fn(...):\r\n    return ...\r\n```\r\n\r\n@zdevito wdyt?"}