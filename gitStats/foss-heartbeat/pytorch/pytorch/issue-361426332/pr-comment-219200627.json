{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/219200627", "pull_request_review_id": 157319223, "id": 219200627, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxOTIwMDYyNw==", "diff_hunk": "@@ -95,15 +109,11 @@ void TensorIterator::compute_common_type() {\n   for (auto& op : operands_) {\n     if (!op.type) {\n       op.type = &type;\n-      if (op.tensor->defined() && type != op.tensor->type()) {\n-        if (op.tensor->dim() == 0) {\n-          if (type.backend() != at::Backend::CUDA) {\n-            cast_tensors_.emplace_back(op.tensor->toType(type));\n-            op.tensor = &(cast_tensors_.back());\n-          }\n-        } else {\n-          op.needs_cast = true;\n-        }\n+      op.needs_cast = needs_cast(*op.tensor, type);\n+      if (op.needs_cast && op.tensor->dim() == 0) {", "path": "aten/src/ATen/native/TensorIterator.cpp", "position": null, "original_position": 35, "commit_id": "3975e04e85bd22825d2f3449c13459d3893e2c5d", "original_commit_id": "f2834645b7d1b89375f465ae64062a2b4c1d6d3f", "user": {"login": "colesbury", "id": 655866, "node_id": "MDQ6VXNlcjY1NTg2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/655866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colesbury", "html_url": "https://github.com/colesbury", "followers_url": "https://api.github.com/users/colesbury/followers", "following_url": "https://api.github.com/users/colesbury/following{/other_user}", "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions", "organizations_url": "https://api.github.com/users/colesbury/orgs", "repos_url": "https://api.github.com/users/colesbury/repos", "events_url": "https://api.github.com/users/colesbury/events{/privacy}", "received_events_url": "https://api.github.com/users/colesbury/received_events", "type": "User", "site_admin": false}, "body": "Eventually, we'll allow casts for any number of dimensions probably using the logic described here:\r\nhttps://github.com/pytorch/pytorch/issues/9515\r\n\r\nFor now, we only support casts for zero-dim tensors because it's the minimum necessary to preserve backwards compatibility.", "created_at": "2018-09-20T15:04:02Z", "updated_at": "2018-11-23T15:51:44Z", "html_url": "https://github.com/pytorch/pytorch/pull/11808#discussion_r219200627", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/11808", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/219200627"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/11808#discussion_r219200627"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/11808"}}, "body_html": "<p>Eventually, we'll allow casts for any number of dimensions probably using the logic described here:<br>\n<a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"342120125\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/9515\" data-hovercard-type=\"issue\" data-hovercard-url=\"/pytorch/pytorch/issues/9515/hovercard\" href=\"https://github.com/pytorch/pytorch/issues/9515\">#9515</a></p>\n<p>For now, we only support casts for zero-dim tensors because it's the minimum necessary to preserve backwards compatibility.</p>", "body_text": "Eventually, we'll allow casts for any number of dimensions probably using the logic described here:\n#9515\nFor now, we only support casts for zero-dim tensors because it's the minimum necessary to preserve backwards compatibility.", "in_reply_to_id": 218623502}