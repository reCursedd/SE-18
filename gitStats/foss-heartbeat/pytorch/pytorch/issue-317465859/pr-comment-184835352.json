{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/184835352", "pull_request_review_id": 116116545, "id": 184835352, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NDgzNTM1Mg==", "diff_hunk": "@@ -21,11 +16,11 @@ def __init__(self, name='weight', n_power_iterations=1, eps=1e-12):\n     def compute_weight(self, module):\n         weight = module._parameters[self.name + '_org']\n         u = module._buffers[self.name + '_u']\n-        height, _cuda = weight.size(0), weight.is_cuda\n+        height = weight.size(0)\n         weight_mat = weight.view(height, -1)\n         for _ in range(self.n_power_iterations):\n-            v = l2normalize(torch.matmul(weight_mat.t(), u), self.eps)\n-            u = l2normalize(torch.matmul(weight_mat, v), self.eps)\n+            v = normalize(torch.matmul(weight_mat.t(), u), dim=0, eps=self.eps)", "path": "torch/nn/utils/spectral_norm.py", "position": null, "original_position": 27, "commit_id": "540b4b5dc6f80a93950d7b1a4c113a4536267b83", "original_commit_id": "f83f867be65fa981efd82cbc50dfcadb0c33ab4d", "user": {"login": "crcrpar", "id": 16191443, "node_id": "MDQ6VXNlcjE2MTkxNDQz", "avatar_url": "https://avatars2.githubusercontent.com/u/16191443?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crcrpar", "html_url": "https://github.com/crcrpar", "followers_url": "https://api.github.com/users/crcrpar/followers", "following_url": "https://api.github.com/users/crcrpar/following{/other_user}", "gists_url": "https://api.github.com/users/crcrpar/gists{/gist_id}", "starred_url": "https://api.github.com/users/crcrpar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crcrpar/subscriptions", "organizations_url": "https://api.github.com/users/crcrpar/orgs", "repos_url": "https://api.github.com/users/crcrpar/repos", "events_url": "https://api.github.com/users/crcrpar/events{/privacy}", "received_events_url": "https://api.github.com/users/crcrpar/received_events", "type": "User", "site_admin": false}, "body": "Yes, `torch.matmul(weight_mat.t(), u)` returns 1d.\r\nSince the arguments of `torch.nn.functional.normalize` are `input, p=2, dim=1, eps=1e-12`, I explicitly set `dim=0`.\r\nOr, should I use `F.normalize`?", "created_at": "2018-04-28T01:37:19Z", "updated_at": "2018-11-23T15:43:22Z", "html_url": "https://github.com/pytorch/pytorch/pull/6929#discussion_r184835352", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/6929", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/184835352"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/6929#discussion_r184835352"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/6929"}}, "body_html": "<p>Yes, <code>torch.matmul(weight_mat.t(), u)</code> returns 1d.<br>\nSince the arguments of <code>torch.nn.functional.normalize</code> are <code>input, p=2, dim=1, eps=1e-12</code>, I explicitly set <code>dim=0</code>.<br>\nOr, should I use <code>F.normalize</code>?</p>", "body_text": "Yes, torch.matmul(weight_mat.t(), u) returns 1d.\nSince the arguments of torch.nn.functional.normalize are input, p=2, dim=1, eps=1e-12, I explicitly set dim=0.\nOr, should I use F.normalize?", "in_reply_to_id": 184768519}