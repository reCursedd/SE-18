{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/184962627", "pull_request_review_id": 116258079, "id": 184962627, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NDk2MjYyNw==", "diff_hunk": "@@ -0,0 +1,112 @@\n+\"\"\"\n+Spectral Normalization from https://arxiv.org/abs/1802.05957\n+\"\"\"\n+import torch\n+from torch.nn.functional import normalize\n+from torch.nn.parameter import Parameter\n+\n+\n+class SpectralNorm(object):\n+\n+    def __init__(self, name='weight', n_power_iterations=1, eps=1e-12):\n+        self.name = name\n+        self.n_power_iterations = n_power_iterations\n+        self.eps = eps\n+\n+    def compute_weight(self, module):\n+        weight = module._parameters[self.name + '_org']\n+        u = module._buffers[self.name + '_u']\n+        height = weight.size(0)\n+        weight_mat = weight.view(height, -1)\n+        for _ in range(self.n_power_iterations):\n+            v = normalize(torch.matmul(weight_mat.t(), u), dim=0, eps=self.eps)\n+            u = normalize(torch.matmul(weight_mat, v), dim=0, eps=self.eps)\n+\n+        sigma = torch.dot(u, torch.matmul(weight_mat, v))\n+        weight.data /= sigma\n+        return weight, u\n+\n+    def remove(self, module):\n+        weight = module._parameters[self.name + '_org']\n+        del module._parameters[self.name]\n+        del module._buffers[self.name + '_u']\n+        del module._parameters[self.name + '_org']\n+        module.register_parameter(self.name, weight)\n+\n+    def __call__(self, module, inputs):\n+        weight, u = self.compute_weight(module)\n+        setattr(module, self.name, weight)\n+        setattr(module, self.name + '_u', u)\n+\n+    @staticmethod\n+    def apply(module, name, n_power_iterations, eps):\n+        fn = SpectralNorm(name, n_power_iterations, eps)\n+        weight = module._parameters[name]\n+        height = weight.size(0)\n+\n+        u = normalize(weight.data.new(height).normal_(0, 1), dim=0, eps=fn.eps)", "path": "torch/nn/utils/spectral_norm.py", "position": null, "original_position": 47, "commit_id": "540b4b5dc6f80a93950d7b1a4c113a4536267b83", "original_commit_id": "3ea9271228935d3e7503a2b7e607962fcf042f87", "user": {"login": "crcrpar", "id": 16191443, "node_id": "MDQ6VXNlcjE2MTkxNDQz", "avatar_url": "https://avatars2.githubusercontent.com/u/16191443?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crcrpar", "html_url": "https://github.com/crcrpar", "followers_url": "https://api.github.com/users/crcrpar/followers", "following_url": "https://api.github.com/users/crcrpar/following{/other_user}", "gists_url": "https://api.github.com/users/crcrpar/gists{/gist_id}", "starred_url": "https://api.github.com/users/crcrpar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crcrpar/subscriptions", "organizations_url": "https://api.github.com/users/crcrpar/orgs", "repos_url": "https://api.github.com/users/crcrpar/repos", "events_url": "https://api.github.com/users/crcrpar/events{/privacy}", "received_events_url": "https://api.github.com/users/crcrpar/received_events", "type": "User", "site_admin": false}, "body": "I didn't know that method, thank you.", "created_at": "2018-04-30T11:27:28Z", "updated_at": "2018-11-23T15:43:25Z", "html_url": "https://github.com/pytorch/pytorch/pull/6929#discussion_r184962627", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/6929", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/184962627"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/6929#discussion_r184962627"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/6929"}}, "body_html": "<p>I didn't know that method, thank you.</p>", "body_text": "I didn't know that method, thank you.", "in_reply_to_id": 184942163}