{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/208821362", "pull_request_review_id": 144707569, "id": 208821362, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODgyMTM2Mg==", "diff_hunk": "@@ -117,6 +117,52 @@ Tensor pinverse(const Tensor& self, double rcond) {\n   return V.mm(S_pseudoinv.diag().mm(U.t()));\n }\n \n+static double _get_epsilon(const ScalarType& sc_type) {\n+  switch (sc_type) {\n+    case at::ScalarType::Half:\n+      return 0.00097656;\n+    case at::ScalarType::Float:\n+      return 1.19209e-07;\n+    case at::ScalarType::Double:\n+      return 2.22044604925e-16;\n+    default:\n+      AT_ERROR(\"This function doesn't handle non-floating type\");\n+  }\n+}\n+\n+Tensor _matrix_rank_helper(const Tensor& self, bool symmetric) {\n+  Tensor S;\n+  if (!symmetric) {\n+    Tensor U, V;\n+    std::tie(U, S, V) = self.svd();\n+  } else {\n+    Tensor eigvecs;\n+    std::tie(S, eigvecs) = self.symeig();\n+    S = S.abs();\n+  }\n+  return S;\n+}\n+\n+Tensor matrix_rank(const Tensor& self, double tol, bool symmetric) {\n+  AT_CHECK(at::isFloatingType(self.type().scalarType()) && self.dim() == 2,\n+           \"matrix_rank(\", self.type(), \"{\", self.sizes(), \"}): expected a 2D tensor \"\n+           \"of floating types\");\n+\n+  Tensor S = _matrix_rank_helper(self, symmetric);\n+  return (S > tol).toType(kLong).sum();\n+}\n+\n+Tensor matrix_rank(const Tensor& self, bool symmetric) {\n+  AT_CHECK(at::isFloatingType(self.type().scalarType()) && self.dim() == 2,\n+           \"matrix_rank(\", self.type(), \"{\", self.sizes(), \"}): expected a 2D tensor \"\n+           \"of floating types\");\n+\n+  Tensor S = _matrix_rank_helper(self, symmetric);\n+  double tol = S.max().toCDouble() * std::max<double>(self.size(0), self.size(1)) *", "path": "aten/src/ATen/native/LinearAlgebra.cpp", "position": null, "original_position": 59, "commit_id": "c9052b5bf6893bc9c5fafb56d0ae3ea8dff3250b", "original_commit_id": "e1f1012301bce1e68a74005b27503addc1898d2f", "user": {"login": "SsnL", "id": 5674597, "node_id": "MDQ6VXNlcjU2NzQ1OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5674597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SsnL", "html_url": "https://github.com/SsnL", "followers_url": "https://api.github.com/users/SsnL/followers", "following_url": "https://api.github.com/users/SsnL/following{/other_user}", "gists_url": "https://api.github.com/users/SsnL/gists{/gist_id}", "starred_url": "https://api.github.com/users/SsnL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SsnL/subscriptions", "organizations_url": "https://api.github.com/users/SsnL/orgs", "repos_url": "https://api.github.com/users/SsnL/repos", "events_url": "https://api.github.com/users/SsnL/events{/privacy}", "received_events_url": "https://api.github.com/users/SsnL/received_events", "type": "User", "site_admin": false}, "body": "Hmm I wonder if we can save the synchronization here too by just working on the scalar max.", "created_at": "2018-08-09T06:46:56Z", "updated_at": "2018-11-23T15:49:00Z", "html_url": "https://github.com/pytorch/pytorch/pull/10338#discussion_r208821362", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/10338", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/208821362"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/10338#discussion_r208821362"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/10338"}}, "body_html": "<p>Hmm I wonder if we can save the synchronization here too by just working on the scalar max.</p>", "body_text": "Hmm I wonder if we can save the synchronization here too by just working on the scalar max."}