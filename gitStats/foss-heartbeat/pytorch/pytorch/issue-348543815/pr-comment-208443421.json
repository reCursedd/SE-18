{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/208443421", "pull_request_review_id": 144253190, "id": 208443421, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODQ0MzQyMQ==", "diff_hunk": "@@ -117,6 +117,52 @@ Tensor pinverse(const Tensor& self, double rcond) {\n   return V.mm(S_pseudoinv.diag().mm(U.t()));\n }\n \n+static double _get_epsilon(const ScalarType& sc_type) {\n+  switch (sc_type) {\n+    case at::ScalarType::Half:\n+      return 0.00097656;\n+    case at::ScalarType::Float:\n+      return 1.19209e-07;\n+    case at::ScalarType::Double:\n+      return 2.22044604925e-16;\n+    default:\n+      AT_ERROR(\"This function doesn't handle non-floating type\");\n+  }\n+}\n+\n+Tensor _matrix_rank_helper(const Tensor& self, bool symmetric) {\n+  Tensor S;\n+  if (!symmetric) {\n+    Tensor U, V;\n+    std::tie(U, S, V) = self.svd();\n+  } else {\n+    Tensor eigvecs;\n+    std::tie(S, eigvecs) = self.symeig();\n+    S = S.abs();\n+  }\n+  return S;\n+}\n+\n+int64_t matrix_rank(const Tensor& self, double tol, bool symmetric) {\n+  AT_CHECK(at::isFloatingType(self.type().scalarType()) && self.dim() == 2,\n+           \"matrix_rank(\", self.type(), \"{\", self.sizes(), \"}): expected a 2D tensor \"\n+           \"of floating types\");\n+\n+  Tensor S = _matrix_rank_helper(self, symmetric);\n+  return (S > tol).toType(kLong).sum().toCLong();", "path": "aten/src/ATen/native/LinearAlgebra.cpp", "position": null, "original_position": 50, "commit_id": "c9052b5bf6893bc9c5fafb56d0ae3ea8dff3250b", "original_commit_id": "b467995374f5136926eb452a8141a5c5a98a026f", "user": {"login": "vishwakftw", "id": 23639302, "node_id": "MDQ6VXNlcjIzNjM5MzAy", "avatar_url": "https://avatars2.githubusercontent.com/u/23639302?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vishwakftw", "html_url": "https://github.com/vishwakftw", "followers_url": "https://api.github.com/users/vishwakftw/followers", "following_url": "https://api.github.com/users/vishwakftw/following{/other_user}", "gists_url": "https://api.github.com/users/vishwakftw/gists{/gist_id}", "starred_url": "https://api.github.com/users/vishwakftw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vishwakftw/subscriptions", "organizations_url": "https://api.github.com/users/vishwakftw/orgs", "repos_url": "https://api.github.com/users/vishwakftw/repos", "events_url": "https://api.github.com/users/vishwakftw/events{/privacy}", "received_events_url": "https://api.github.com/users/vishwakftw/received_events", "type": "User", "site_admin": false}, "body": "It would be just a matter of removing the `toCLong()`. I thought we should stick to NumPy semantics and return an `int`.", "created_at": "2018-08-08T03:00:45Z", "updated_at": "2018-11-23T15:48:59Z", "html_url": "https://github.com/pytorch/pytorch/pull/10338#discussion_r208443421", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/10338", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/208443421"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/10338#discussion_r208443421"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/10338"}}, "body_html": "<p>It would be just a matter of removing the <code>toCLong()</code>. I thought we should stick to NumPy semantics and return an <code>int</code>.</p>", "body_text": "It would be just a matter of removing the toCLong(). I thought we should stick to NumPy semantics and return an int.", "in_reply_to_id": 208442727}