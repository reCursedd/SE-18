{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/209032725", "pull_request_review_id": 144967968, "id": 209032725, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTAzMjcyNQ==", "diff_hunk": "@@ -105,18 +107,50 @@ Tensor pinverse(const Tensor& self, double rcond) {\n   AT_CHECK(at::isFloatingType(self.type().scalarType()) && self.dim() == 2,\n            \"pinverse(\", self.type(), \"{\", self.sizes(), \"}): expected a 2D tensor \"\n            \"of floating types\");\n-  AT_CHECK(self.dim() == 2, \"tensor should be 2 dimensional\");\n   if (self.numel() == 0) {\n     // Match NumPy\n     return self.type().tensor({self.size(1), self.size(0)});\n   }\n   Tensor U, S, V;\n   std::tie(U, S, V) = self.svd();\n-  double max_val = S[0].toCDouble();\n+  Tensor max_val = S[0];\n   Tensor S_pseudoinv = at::where(S > rcond * max_val, S.reciprocal(), at::zeros({}, self.options()));\n   return V.mm(S_pseudoinv.diag().mm(U.t()));\n }\n \n+static inline Tensor _matrix_rank_helper(const Tensor& self, bool symmetric) {\n+  Tensor S;\n+  if (!symmetric) {\n+    Tensor U, V;\n+    std::tie(U, S, V) = self.svd();\n+  } else {\n+    Tensor eigvecs;\n+    std::tie(S, eigvecs) = self.symeig();\n+    S = S.abs();\n+  }\n+  return S;\n+}\n+\n+Tensor matrix_rank(const Tensor& self, double tol, bool symmetric) {\n+  AT_CHECK(at::isFloatingType(self.type().scalarType()) && self.dim() == 2,\n+           \"matrix_rank(\", self.type(), \"{\", self.sizes(), \"}): expected a 2D tensor \"\n+           \"of floating types\");\n+\n+  Tensor S = _matrix_rank_helper(self, symmetric);\n+  return (S > tol).sum();\n+}\n+\n+Tensor matrix_rank(const Tensor& self, bool symmetric) {\n+  AT_CHECK(at::isFloatingType(self.type().scalarType()) && self.dim() == 2,\n+           \"matrix_rank(\", self.type(), \"{\", self.sizes(), \"}): expected a 2D tensor \"\n+           \"of floating types\");\n+\n+  Tensor S = _matrix_rank_helper(self, symmetric);\n+  Tensor tol = _get_epsilon(self.type()) * std::max(self.size(0), self.size(1));\n+  tol.mul_(S.max());", "path": "aten/src/ATen/native/LinearAlgebra.cpp", "position": null, "original_position": 55, "commit_id": "c9052b5bf6893bc9c5fafb56d0ae3ea8dff3250b", "original_commit_id": "08466d5de9505ef8d3dd631400d856d0ececbc87", "user": {"login": "SsnL", "id": 5674597, "node_id": "MDQ6VXNlcjU2NzQ1OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5674597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SsnL", "html_url": "https://github.com/SsnL", "followers_url": "https://api.github.com/users/SsnL/followers", "following_url": "https://api.github.com/users/SsnL/following{/other_user}", "gists_url": "https://api.github.com/users/SsnL/gists{/gist_id}", "starred_url": "https://api.github.com/users/SsnL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SsnL/subscriptions", "organizations_url": "https://api.github.com/users/SsnL/orgs", "repos_url": "https://api.github.com/users/SsnL/repos", "events_url": "https://api.github.com/users/SsnL/events{/privacy}", "received_events_url": "https://api.github.com/users/SsnL/received_events", "type": "User", "site_admin": false}, "body": "I actually meant the other way around.. calculating `sol * std::max(self.size(0), self.size(1))` first all as c++ numbers, and do `(S > S.max().mul_(tol)).sum()`", "created_at": "2018-08-09T18:24:47Z", "updated_at": "2018-11-23T15:49:02Z", "html_url": "https://github.com/pytorch/pytorch/pull/10338#discussion_r209032725", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/10338", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/209032725"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/10338#discussion_r209032725"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/10338"}}, "body_html": "<p>I actually meant the other way around.. calculating <code>sol * std::max(self.size(0), self.size(1))</code> first all as c++ numbers, and do <code>(S &gt; S.max().mul_(tol)).sum()</code></p>", "body_text": "I actually meant the other way around.. calculating sol * std::max(self.size(0), self.size(1)) first all as c++ numbers, and do (S > S.max().mul_(tol)).sum()"}