{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/197936336", "pull_request_review_id": 131777060, "id": 197936336, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NzkzNjMzNg==", "diff_hunk": "@@ -809,10 +799,545 @@ Tensor softplus_double_backward(const Tensor & grad, const Tensor & input, Scala\n   return _sigmoid_backward(grad, x.sigmoid()) * (x < threshold).toType(grad.type()) * beta;\n }\n \n-Tensor as_strided_backward(const Tensor & grad, TensorGeometry base, IntList sizes, IntList strides, int64_t storage_offset) {\n-  auto src = base.zeros_with_stride(grad.type());\n-  src.as_strided(sizes, strides, storage_offset - base.storage_offset()).copy_(grad);\n-  return src;\n+\n+// NOTE [ as_strided Backward ]\n+//\n+// `storage_offset` is ignored for simplicity in this note. If you just want the", "path": "tools/autograd/templates/Functions.cpp", "position": 79, "original_position": 79, "commit_id": "0d0372d012a5e6453f2909694ba41d83eddd5320", "original_commit_id": "a30865644bdf684f5fdaf8691053692e3e6c2a1d", "user": {"login": "colesbury", "id": 655866, "node_id": "MDQ6VXNlcjY1NTg2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/655866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colesbury", "html_url": "https://github.com/colesbury", "followers_url": "https://api.github.com/users/colesbury/followers", "following_url": "https://api.github.com/users/colesbury/following{/other_user}", "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions", "organizations_url": "https://api.github.com/users/colesbury/orgs", "repos_url": "https://api.github.com/users/colesbury/repos", "events_url": "https://api.github.com/users/colesbury/events{/privacy}", "received_events_url": "https://api.github.com/users/colesbury/received_events", "type": "User", "site_admin": false}, "body": "This is really long. Let's move this to a separate file.\r\n\r\nI think we should pull in `mem_overlap.c` from NumPy instead of trying to re-solve this ourselves. It contains code that solves this problem precisely or with a bound on the amount of work. It doesn't depend to heavily on the NumPy API. Most of the porting will be mechanical.", "created_at": "2018-06-25T20:46:00Z", "updated_at": "2018-11-23T15:46:18Z", "html_url": "https://github.com/pytorch/pytorch/pull/8721#discussion_r197936336", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/8721", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/197936336"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/8721#discussion_r197936336"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/8721"}}, "body_html": "<p>This is really long. Let's move this to a separate file.</p>\n<p>I think we should pull in <code>mem_overlap.c</code> from NumPy instead of trying to re-solve this ourselves. It contains code that solves this problem precisely or with a bound on the amount of work. It doesn't depend to heavily on the NumPy API. Most of the porting will be mechanical.</p>", "body_text": "This is really long. Let's move this to a separate file.\nI think we should pull in mem_overlap.c from NumPy instead of trying to re-solve this ourselves. It contains code that solves this problem precisely or with a bound on the amount of work. It doesn't depend to heavily on the NumPy API. Most of the porting will be mechanical."}