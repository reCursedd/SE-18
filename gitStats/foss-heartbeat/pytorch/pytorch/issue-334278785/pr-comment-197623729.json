{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/197623729", "pull_request_review_id": 131406796, "id": 197623729, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NzYyMzcyOQ==", "diff_hunk": "@@ -809,10 +799,545 @@ Tensor softplus_double_backward(const Tensor & grad, const Tensor & input, Scala\n   return _sigmoid_backward(grad, x.sigmoid()) * (x < threshold).toType(grad.type()) * beta;\n }\n \n-Tensor as_strided_backward(const Tensor & grad, TensorGeometry base, IntList sizes, IntList strides, int64_t storage_offset) {\n-  auto src = base.zeros_with_stride(grad.type());\n-  src.as_strided(sizes, strides, storage_offset - base.storage_offset()).copy_(grad);\n-  return src;\n+\n+// NOTE [ as_strided Backward ]", "path": "tools/autograd/templates/Functions.cpp", "position": 77, "original_position": 77, "commit_id": "0d0372d012a5e6453f2909694ba41d83eddd5320", "original_commit_id": "7159e85176b446843d092ba0a305e7b5673bafa5", "user": {"login": "SsnL", "id": 5674597, "node_id": "MDQ6VXNlcjU2NzQ1OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5674597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SsnL", "html_url": "https://github.com/SsnL", "followers_url": "https://api.github.com/users/SsnL/followers", "following_url": "https://api.github.com/users/SsnL/following{/other_user}", "gists_url": "https://api.github.com/users/SsnL/gists{/gist_id}", "starred_url": "https://api.github.com/users/SsnL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SsnL/subscriptions", "organizations_url": "https://api.github.com/users/SsnL/orgs", "repos_url": "https://api.github.com/users/SsnL/repos", "events_url": "https://api.github.com/users/SsnL/events{/privacy}", "received_events_url": "https://api.github.com/users/SsnL/received_events", "type": "User", "site_admin": false}, "body": "There are two (long) notes:\r\n1. This one explaining how `as_strided_backward` works. It explains why we want to know whether input and output geometries have overlapping memory, and how do we use these information to compute a backward that is compatible with the rest of our autograd system (basically we need to make `as_strided` \"look\" stride-agnostic).\r\n2. There is one more below on how to detect memory overlap. It checks for a constrained simple case, but should be sufficient on all combination of our view ops except for `unfold` and general `as_stride` (proofs included). ", "created_at": "2018-06-23T22:14:54Z", "updated_at": "2018-11-23T15:46:11Z", "html_url": "https://github.com/pytorch/pytorch/pull/8721#discussion_r197623729", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/8721", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/197623729"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/8721#discussion_r197623729"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/8721"}}, "body_html": "<p>There are two (long) notes:</p>\n<ol>\n<li>This one explaining how <code>as_strided_backward</code> works. It explains why we want to know whether input and output geometries have overlapping memory, and how do we use these information to compute a backward that is compatible with the rest of our autograd system (basically we need to make <code>as_strided</code> \"look\" stride-agnostic).</li>\n<li>There is one more below on how to detect memory overlap. It checks for a constrained simple case, but should be sufficient on all combination of our view ops except for <code>unfold</code> and general <code>as_stride</code> (proofs included).</li>\n</ol>", "body_text": "There are two (long) notes:\n\nThis one explaining how as_strided_backward works. It explains why we want to know whether input and output geometries have overlapping memory, and how do we use these information to compute a backward that is compatible with the rest of our autograd system (basically we need to make as_strided \"look\" stride-agnostic).\nThere is one more below on how to detect memory overlap. It checks for a constrained simple case, but should be sufficient on all combination of our view ops except for unfold and general as_stride (proofs included)."}