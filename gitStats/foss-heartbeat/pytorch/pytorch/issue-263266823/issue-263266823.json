{"url": "https://api.github.com/repos/pytorch/pytorch/issues/2993", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/2993/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/2993/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/2993/events", "html_url": "https://github.com/pytorch/pytorch/pull/2993", "id": 263266823, "node_id": "MDExOlB1bGxSZXF1ZXN0MTQ1MDIxNDg5", "number": 2993, "title": "Fix cudnn grid_sample backward for implicit gradOutput", "user": {"login": "zou3519", "id": 5652049, "node_id": "MDQ6VXNlcjU2NTIwNDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/5652049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zou3519", "html_url": "https://github.com/zou3519", "followers_url": "https://api.github.com/users/zou3519/followers", "following_url": "https://api.github.com/users/zou3519/following{/other_user}", "gists_url": "https://api.github.com/users/zou3519/gists{/gist_id}", "starred_url": "https://api.github.com/users/zou3519/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zou3519/subscriptions", "organizations_url": "https://api.github.com/users/zou3519/orgs", "repos_url": "https://api.github.com/users/zou3519/repos", "events_url": "https://api.github.com/users/zou3519/events{/privacy}", "received_events_url": "https://api.github.com/users/zou3519/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-10-05T21:07:53Z", "updated_at": "2017-10-05T21:57:35Z", "closed_at": "2017-10-05T21:57:35Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/2993", "html_url": "https://github.com/pytorch/pytorch/pull/2993", "diff_url": "https://github.com/pytorch/pytorch/pull/2993.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/2993.patch"}, "body_html": "<h3>Summary</h3>\n<p><span class=\"issue-keyword tooltipped tooltipped-se\" aria-label=\"This pull request closes issue #2307.\">Fixes</span> <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"248238427\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/2307\" data-hovercard-type=\"issue\" data-hovercard-url=\"/pytorch/pytorch/issues/2307/hovercard\" href=\"https://github.com/pytorch/pytorch/issues/2307\">#2307</a>.</p>\n<p>The bug is that the cudnn function only accepts tensors that have positive stride. Unfortunately, when a scalar is expanded into a tensor (which is probably how the implicit grad output is implemented), the stride is all 0's. This makes it so that if the strides are indeed all 0's, grad_output is converted to a normal tensor that has positive strides.</p>\n<h3>Test Plan</h3>\n<p><code>test/run_tests.sh</code><br>\nRun the previously offending code and assert that nothing errors:</p>\n<pre><code>import torch\nx = torch.cuda.FloatTensor(1, 1, 16384, 16384)\nx = torch.autograd.Variable(x, requires_grad=True)\ny = x.expand(2, x.size(1), x.size(2), x.size(3))\ngrid = torch.rand(2, 1, 1, 2)\nimport torch.nn.functional as F\nz = F.grid_sample(y, torch.autograd.Variable(grid.cuda()))\nz.sum().backward()\n</code></pre>", "body_text": "Summary\nFixes #2307.\nThe bug is that the cudnn function only accepts tensors that have positive stride. Unfortunately, when a scalar is expanded into a tensor (which is probably how the implicit grad output is implemented), the stride is all 0's. This makes it so that if the strides are indeed all 0's, grad_output is converted to a normal tensor that has positive strides.\nTest Plan\ntest/run_tests.sh\nRun the previously offending code and assert that nothing errors:\nimport torch\nx = torch.cuda.FloatTensor(1, 1, 16384, 16384)\nx = torch.autograd.Variable(x, requires_grad=True)\ny = x.expand(2, x.size(1), x.size(2), x.size(3))\ngrid = torch.rand(2, 1, 1, 2)\nimport torch.nn.functional as F\nz = F.grid_sample(y, torch.autograd.Variable(grid.cuda()))\nz.sum().backward()", "body": "### Summary\r\nFixes https://github.com/pytorch/pytorch/issues/2307.\r\n\r\nThe bug is that the cudnn function only accepts tensors that have positive stride. Unfortunately, when a scalar is expanded into a tensor (which is probably how the implicit grad output is implemented), the stride is all 0's. This makes it so that if the strides are indeed all 0's, grad_output is converted to a normal tensor that has positive strides.\r\n\r\n### Test Plan\r\n`test/run_tests.sh`\r\nRun the previously offending code and assert that nothing errors:\r\n```\r\nimport torch\r\nx = torch.cuda.FloatTensor(1, 1, 16384, 16384)\r\nx = torch.autograd.Variable(x, requires_grad=True)\r\ny = x.expand(2, x.size(1), x.size(2), x.size(3))\r\ngrid = torch.rand(2, 1, 1, 2)\r\nimport torch.nn.functional as F\r\nz = F.grid_sample(y, torch.autograd.Variable(grid.cuda()))\r\nz.sum().backward()\r\n```"}