{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/323873029", "html_url": "https://github.com/pytorch/pytorch/pull/1583#issuecomment-323873029", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/1583", "id": 323873029, "node_id": "MDEyOklzc3VlQ29tbWVudDMyMzg3MzAyOQ==", "user": {"login": "halochou", "id": 5476527, "node_id": "MDQ6VXNlcjU0NzY1Mjc=", "avatar_url": "https://avatars1.githubusercontent.com/u/5476527?v=4", "gravatar_id": "", "url": "https://api.github.com/users/halochou", "html_url": "https://github.com/halochou", "followers_url": "https://api.github.com/users/halochou/followers", "following_url": "https://api.github.com/users/halochou/following{/other_user}", "gists_url": "https://api.github.com/users/halochou/gists{/gist_id}", "starred_url": "https://api.github.com/users/halochou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/halochou/subscriptions", "organizations_url": "https://api.github.com/users/halochou/orgs", "repos_url": "https://api.github.com/users/halochou/repos", "events_url": "https://api.github.com/users/halochou/events{/privacy}", "received_events_url": "https://api.github.com/users/halochou/received_events", "type": "User", "site_admin": false}, "created_at": "2017-08-21T22:52:18Z", "updated_at": "2017-08-21T22:52:18Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=4254703\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/1zb\">@1zb</a> Not sure, but maybe like this (?)</p>\n<pre><code>import torch\nfrom torch.autograd import Variable\n\ninputs=Variable(torch.randn(1,3,32,32)) # N x inC x inH x inW\nweight=Variable(torch.randn(30,30,64,3,3,3)) # outH x outW x outC x inC x kH x kW\nbias=Variable(torch.randn(64,30,30)) # outC x outH x outW\n\nlocal = torch.nn.backends.thnn.backend.SpatialConvolutionLocal.apply\n## arguments: input, weight, bias, kH, kW, strideH, strideW, padH, padW, inH, inW, outH, outW\noutput = local(inputs, weight, bias, 3, 3, 1, 1, 0, 0, 32, 32, 30, 30)\n</code></pre>", "body_text": "@1zb Not sure, but maybe like this (?)\nimport torch\nfrom torch.autograd import Variable\n\ninputs=Variable(torch.randn(1,3,32,32)) # N x inC x inH x inW\nweight=Variable(torch.randn(30,30,64,3,3,3)) # outH x outW x outC x inC x kH x kW\nbias=Variable(torch.randn(64,30,30)) # outC x outH x outW\n\nlocal = torch.nn.backends.thnn.backend.SpatialConvolutionLocal.apply\n## arguments: input, weight, bias, kH, kW, strideH, strideW, padH, padW, inH, inW, outH, outW\noutput = local(inputs, weight, bias, 3, 3, 1, 1, 0, 0, 32, 32, 30, 30)", "body": "@1zb Not sure, but maybe like this (?)\r\n```\r\nimport torch\r\nfrom torch.autograd import Variable\r\n\r\ninputs=Variable(torch.randn(1,3,32,32)) # N x inC x inH x inW\r\nweight=Variable(torch.randn(30,30,64,3,3,3)) # outH x outW x outC x inC x kH x kW\r\nbias=Variable(torch.randn(64,30,30)) # outC x outH x outW\r\n\r\nlocal = torch.nn.backends.thnn.backend.SpatialConvolutionLocal.apply\r\n## arguments: input, weight, bias, kH, kW, strideH, strideW, padH, padW, inH, inW, outH, outW\r\noutput = local(inputs, weight, bias, 3, 3, 1, 1, 0, 0, 32, 32, 30, 30)\r\n```"}