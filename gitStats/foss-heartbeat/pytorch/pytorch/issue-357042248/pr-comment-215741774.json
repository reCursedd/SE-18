{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/215741774", "pull_request_review_id": 153076271, "id": 215741774, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNTc0MTc3NA==", "diff_hunk": "@@ -347,5 +347,45 @@ Tensor& matmul_out(Tensor &result, const Tensor & tensor1, const Tensor & tensor\n   return result;\n }\n \n+Tensor frobenius_norm(const Tensor& self) {\n+  IntList dim = {0, 1};\n+  return at::native::frobenius_norm(self, dim);\n+}\n+\n+Tensor frobenius_norm(const Tensor& self, IntList dim, bool keepdim) {\n+  Tensor result = self.type().tensor();\n+  return at::native::frobenius_norm_out(result, self, dim, keepdim);", "path": "aten/src/ATen/native/LinearAlgebra.cpp", "position": null, "original_position": 11, "commit_id": "757e6d8d507c44e454fe5f507ca2266b67acab2d", "original_commit_id": "ceae73c3572a312baf9f1ffda3cb331f0ff86ca7", "user": {"login": "yya007", "id": 11239571, "node_id": "MDQ6VXNlcjExMjM5NTcx", "avatar_url": "https://avatars3.githubusercontent.com/u/11239571?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yya007", "html_url": "https://github.com/yya007", "followers_url": "https://api.github.com/users/yya007/followers", "following_url": "https://api.github.com/users/yya007/following{/other_user}", "gists_url": "https://api.github.com/users/yya007/gists{/gist_id}", "starred_url": "https://api.github.com/users/yya007/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yya007/subscriptions", "organizations_url": "https://api.github.com/users/yya007/orgs", "repos_url": "https://api.github.com/users/yya007/repos", "events_url": "https://api.github.com/users/yya007/events{/privacy}", "received_events_url": "https://api.github.com/users/yya007/received_events", "type": "User", "site_admin": false}, "body": "It seems that current torch.norm seems used a similar way to implement. I am wondering why that works and how we can solve this issue.\r\n\r\nSee pytorch/aten/src/ATen/native/ReduceOps.cpp line 587\r\nTensor norm(const Tensor& self, Scalar p, int64_t dim, bool keepdim) {\r\n  Tensor result = self.type().tensor();\r\n  return at::native::norm_out(result, self, p, dim, keepdim);\r\n}", "created_at": "2018-09-06T19:01:57Z", "updated_at": "2018-11-23T15:50:41Z", "html_url": "https://github.com/pytorch/pytorch/pull/11261#discussion_r215741774", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/11261", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/215741774"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/11261#discussion_r215741774"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/11261"}}, "body_html": "<p>It seems that current torch.norm seems used a similar way to implement. I am wondering why that works and how we can solve this issue.</p>\n<p>See pytorch/aten/src/ATen/native/ReduceOps.cpp line 587<br>\nTensor norm(const Tensor&amp; self, Scalar p, int64_t dim, bool keepdim) {<br>\nTensor result = self.type().tensor();<br>\nreturn at::native::norm_out(result, self, p, dim, keepdim);<br>\n}</p>", "body_text": "It seems that current torch.norm seems used a similar way to implement. I am wondering why that works and how we can solve this issue.\nSee pytorch/aten/src/ATen/native/ReduceOps.cpp line 587\nTensor norm(const Tensor& self, Scalar p, int64_t dim, bool keepdim) {\nTensor result = self.type().tensor();\nreturn at::native::norm_out(result, self, p, dim, keepdim);\n}", "in_reply_to_id": 215494906}