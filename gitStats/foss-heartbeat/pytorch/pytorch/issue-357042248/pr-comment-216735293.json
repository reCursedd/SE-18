{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/216735293", "pull_request_review_id": 154288008, "id": 216735293, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNjczNTI5Mw==", "diff_hunk": "@@ -543,3 +544,241 @@ def argsort(input, dim=None, descending=False):\n     if dim is None:\n         return torch.sort(input, -1, descending)[1]\n     return torch.sort(input, dim, descending)[1]\n+\n+\n+def norm(input, p=\"fro\", dim=None, keepdim=False, out=None):\n+    r\"\"\"Returns the matrix norm or vector norm of a given tensor.\n+\n+    Args:\n+        input (Tensor): the input tensor\n+        p ({int, float, inf, -inf, 'fro', 'nuc'}): the order of norm\n+            The following norms can be calculated:\n+            =====  ============================  ==========================\n+            ord    matrix norm                   vector norm\n+            =====  ============================  ==========================\n+            None   Frobenius norm                2-norm\n+            'fro'  Frobenius norm                --\n+            'nuc'  nuclear norm                  --\n+            inf    max(sum(abs(x), dim=1))       max(abs(x))\n+            -inf   min(sum(abs(x), dim=1))       min(abs(x))\n+            0      --                            sum(x != 0)\n+            1      max(sum(abs(x), dim=0))       as below\n+            -1     min(sum(abs(x), dim=0))       as below\n+            2      largest singular value        as below\n+            -2     smallest singular value       as below\n+            other  as vec norm when dim is None  sum(abs(x)**ord)**(1./ord)\n+            =====  ============================  ==========================\n+        dim ({int, 2-tuple of ints, 2-list of ints}): If it is a int, vector norm", "path": "torch/functional.py", "position": null, "original_position": 36, "commit_id": "757e6d8d507c44e454fe5f507ca2266b67acab2d", "original_commit_id": "f97623c871fe74e6a9e46947ee829f6304b0aaea", "user": {"login": "SsnL", "id": 5674597, "node_id": "MDQ6VXNlcjU2NzQ1OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5674597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SsnL", "html_url": "https://github.com/SsnL", "followers_url": "https://api.github.com/users/SsnL/followers", "following_url": "https://api.github.com/users/SsnL/following{/other_user}", "gists_url": "https://api.github.com/users/SsnL/gists{/gist_id}", "starred_url": "https://api.github.com/users/SsnL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SsnL/subscriptions", "organizations_url": "https://api.github.com/users/SsnL/orgs", "repos_url": "https://api.github.com/users/SsnL/repos", "events_url": "https://api.github.com/users/SsnL/events{/privacy}", "received_events_url": "https://api.github.com/users/SsnL/received_events", "type": "User", "site_admin": false}, "body": "What happens if it is `None`?", "created_at": "2018-09-11T16:31:53Z", "updated_at": "2018-11-23T15:50:59Z", "html_url": "https://github.com/pytorch/pytorch/pull/11261#discussion_r216735293", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/11261", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/216735293"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/11261#discussion_r216735293"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/11261"}}, "body_html": "<p>What happens if it is <code>None</code>?</p>", "body_text": "What happens if it is None?"}