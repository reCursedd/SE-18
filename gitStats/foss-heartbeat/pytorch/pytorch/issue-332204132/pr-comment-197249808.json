{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/197249808", "pull_request_review_id": 130958499, "id": 197249808, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NzI0OTgwOA==", "diff_hunk": "@@ -276,3 +392,126 @@ def extra_repr(self):\n                 torch.typename(p.data), size_str, device_str)\n             tmpstr = tmpstr + '  (' + k + '): ' + parastr + '\\n'\n         return tmpstr\n+\n+\n+class ParameterDict(Module):\n+    r\"\"\"Holds parameters in a dictionary.\n+\n+    ParameterDict can be indexed like a regular Python dictionary, but parameters it\n+    contains are properly registered, and will be visible by all Module methods.\n+\n+    Arguments:\n+        parameters (iterable, optional): a mapping (dictionary) of\n+            (string : :class:`~torch.nn.Parameter``) or an iterable of key,value pairs\n+            of type (string, :class:`~torch.nn.Parameter``)\n+\n+    Example::\n+\n+        class MyModule(nn.Module):\n+            def __init__(self):\n+                super(MyModule, self).__init__()\n+                self.choices = nn.ParameterDict({\n+                        'left': nn.Parameter(torch.randn(10, 10)),\n+                        'right': nn.Parameter(torch.randn(10, 10))\n+                })\n+\n+            def forward(self, x, choice):\n+                x = self.params[choice].mm(x)\n+                return x\n+    \"\"\"\n+\n+    def __init__(self, parameters=None):\n+        super(ParameterDict, self).__init__()\n+        if parameters is not None:\n+            self.update(parameters)\n+\n+    def __getitem__(self, key):\n+        return self._parameters[key]\n+\n+    def __setitem__(self, key, parameter):\n+        if not isinstance(key, str):\n+            raise TypeError(\"ParameterDict.__setitem__ key should be string, \"\n+                            \"but got \" + type(key).__name__)\n+\n+        self.register_parameter(key, parameter)\n+\n+    def __delitem__(self, key):\n+        del self._parameters[key]\n+\n+    def __len__(self):\n+        return len(self._parameters)\n+\n+    def __iter__(self):\n+        return iter(self._parameters.keys())\n+\n+    def __contains__(self, key):\n+        return key in self._parameters\n+\n+    def clear(self):\n+        \"\"\"Remove all items from the ParameterDict.\n+        \"\"\"\n+        self._parameters.clear()\n+\n+    def pop(self, key):\n+        r\"\"\"Remove key from the ParameterDict and return its parameter.\n+\n+        Arguments:\n+            key (string): key to pop from the ParameterDict\n+        \"\"\"\n+        v = self[key]\n+        del self[key]\n+        return v\n+\n+    def keys(self):\n+        r\"\"\"Return an iterable of the ParameterDict\u2019s keys.\n+        \"\"\"\n+        return self._parameters.keys()\n+\n+    def items(self):\n+        r\"\"\"Return an iterable of the ParameterDict\u2019s key/value pairs.\n+        \"\"\"\n+        return self._parameters.items()\n+\n+    def values(self):\n+        r\"\"\"Return an iterable of the ParameterDict\u2019s values.\n+        \"\"\"\n+        return self._parameters.values()\n+\n+    def update(self, parameters):\n+        r\"\"\"Update the ParameterDict with the key/value pairs from a mapping or\n+        an iterable, overwriting existing keys.\n+\n+        Arguments:\n+            parameters (iterable): a mapping (dictionary) of\n+                (string : :class:`~torch.nn.Parameter``) or an iterable of\n+                key/value pairs of type (string, :class:`~torch.nn.Parameter``)\n+        \"\"\"\n+        if not isinstance(parameters, Iterable):\n+            raise TypeError(\"ParametersDict.update should be called with an \"\n+                            \"iterable of key/value pairs, but got \" +\n+                            type(parameters).__name__)\n+\n+        if isinstance(parameters, Mapping):\n+            for key, parameter in parameters.items():\n+                self[key] = parameter\n+        else:\n+            for j, p in enumerate(parameters):\n+                if not isinstance(p, Iterable):\n+                    raise TypeError(\"ParameterDict update sequence element \"\n+                                    \"#\" + str(j) + \" should be Iterable; is\" +\n+                                    type(p).__name__)\n+                if not len(p) == 2:\n+                    raise ValueError(\"ParameterDict update sequence element \"\n+                                     \"#\" + str(j) + \" has length \" + str(len(p)) +\n+                                     \"; 2 is required\")\n+                self[p[0]] = p[1]\n+\n+    def extra_repr(self):\n+        tmpstr = ''\n+        for k, p in self._parameters.items():\n+            size_str = 'x'.join(str(size) for size in p.size())\n+            device_str = '' if not p.is_cuda else ' (GPU {})'.format(p.get_device())\n+            parastr = 'Parameter containing: [{} of size {}{}]'.format(\n+                torch.typename(p.data), size_str, device_str)\n+            tmpstr = tmpstr + '  (' + str(k) + '): ' + parastr + '\\n'\n+        return tmpstr", "path": "torch/nn/modules/container.py", "position": null, "original_position": 256, "commit_id": "e67716cb8d27175e67a6d1b2a5518fa677c01cd8", "original_commit_id": "0750c73d373f444cd0d7d02265f14f245d1561fb", "user": {"login": "karandwivedi42", "id": 9624554, "node_id": "MDQ6VXNlcjk2MjQ1NTQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/9624554?v=4", "gravatar_id": "", "url": "https://api.github.com/users/karandwivedi42", "html_url": "https://github.com/karandwivedi42", "followers_url": "https://api.github.com/users/karandwivedi42/followers", "following_url": "https://api.github.com/users/karandwivedi42/following{/other_user}", "gists_url": "https://api.github.com/users/karandwivedi42/gists{/gist_id}", "starred_url": "https://api.github.com/users/karandwivedi42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/karandwivedi42/subscriptions", "organizations_url": "https://api.github.com/users/karandwivedi42/orgs", "repos_url": "https://api.github.com/users/karandwivedi42/repos", "events_url": "https://api.github.com/users/karandwivedi42/events{/privacy}", "received_events_url": "https://api.github.com/users/karandwivedi42/received_events", "type": "User", "site_admin": false}, "body": "Copied exactly from ParameterList\r\n```\r\nParameterDict(\r\n    (choice1): Parameter containing: [torch.cuda.FloatTensor of size 10x20 (GPU 0)]\r\n    (choice2): Parameter containing: [torch.cuda.FloatTensor of size 10x30 (GPU 0)]\r\n  \r\n)\r\n```", "created_at": "2018-06-21T19:20:25Z", "updated_at": "2018-11-23T15:46:03Z", "html_url": "https://github.com/pytorch/pytorch/pull/8463#discussion_r197249808", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/8463", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/197249808"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/8463#discussion_r197249808"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/8463"}}, "body_html": "<p>Copied exactly from ParameterList</p>\n<pre><code>ParameterDict(\n    (choice1): Parameter containing: [torch.cuda.FloatTensor of size 10x20 (GPU 0)]\n    (choice2): Parameter containing: [torch.cuda.FloatTensor of size 10x30 (GPU 0)]\n  \n)\n</code></pre>", "body_text": "Copied exactly from ParameterList\nParameterDict(\n    (choice1): Parameter containing: [torch.cuda.FloatTensor of size 10x20 (GPU 0)]\n    (choice2): Parameter containing: [torch.cuda.FloatTensor of size 10x30 (GPU 0)]\n  \n)", "in_reply_to_id": 197235403}