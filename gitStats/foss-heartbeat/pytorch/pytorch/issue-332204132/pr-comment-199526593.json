{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/199526593", "pull_request_review_id": 133661681, "id": 199526593, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTUyNjU5Mw==", "diff_hunk": "@@ -267,6 +383,130 @@ def extend(self, parameters):\n             self.register_parameter(str(offset + i), param)\n         return self\n \n+    def extra_repr(self):\n+        child_lines = []\n+        for k, p in self._parameters.items():\n+            size_str = 'x'.join(str(size) for size in p.size())\n+            device_str = '' if not p.is_cuda else ' (GPU {})'.format(p.get_device())\n+            parastr = 'Parameter containing: [{} of size {}{}]'.format(\n+                torch.typename(p.data), size_str, device_str)\n+            child_lines.append('  (' + str(k) + '): ' + parastr)\n+        tmpstr = '\\n'.join(child_lines)\n+        return tmpstr\n+\n+\n+class ParameterDict(Module):", "path": "torch/nn/modules/container.py", "position": 146, "original_position": 146, "commit_id": "e67716cb8d27175e67a6d1b2a5518fa677c01cd8", "original_commit_id": "80112e1d238464e14142f3177b945d33d7b73915", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Actually, what if we created a single superclass that would access `self.dict` and used `self.register_elem`, which would be implemented in subclasses? This would allow us to avoid repeating all the simple methods and error checking", "created_at": "2018-07-02T15:00:00Z", "updated_at": "2018-11-23T15:46:39Z", "html_url": "https://github.com/pytorch/pytorch/pull/8463#discussion_r199526593", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/8463", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/199526593"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/8463#discussion_r199526593"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/8463"}}, "body_html": "<p>Actually, what if we created a single superclass that would access <code>self.dict</code> and used <code>self.register_elem</code>, which would be implemented in subclasses? This would allow us to avoid repeating all the simple methods and error checking</p>", "body_text": "Actually, what if we created a single superclass that would access self.dict and used self.register_elem, which would be implemented in subclasses? This would allow us to avoid repeating all the simple methods and error checking"}