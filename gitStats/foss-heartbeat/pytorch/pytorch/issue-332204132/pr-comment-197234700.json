{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/197234700", "pull_request_review_id": 130940164, "id": 197234700, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NzIzNDcwMA==", "diff_hunk": "@@ -187,6 +187,122 @@ def extend(self, modules):\n         return self\n \n \n+class ModuleDict(Module):\n+    r\"\"\"Holds submodules in a dictionary.\n+\n+    ModuleDict can be indexed like a regular Python dictionary, but modules it\n+    contains are properly registered, and will be visible by all Module methods.\n+\n+    Arguments:\n+        modules (iterable, optional): a mapping (dictionary) of (string: module)\n+            or an iterable of key/value pairs of type (string, module)\n+\n+    Example::\n+\n+        class MyModule(nn.Module):\n+            def __init__(self):\n+                super(MyModule, self).__init__()\n+                self.choices = nn.ModuleDict({\n+                        'conv': nn.Conv2d(10, 10, 3),\n+                        'pool': nn.MaxPool2d(3)\n+                })\n+                self.activations = nn.ModuleDict([\n+                        ['lrelu', nn.LeakyReLU()],\n+                        ['prelu', nn.PReLU()]\n+                ])\n+\n+            def forward(self, x, choice, act):\n+                x = self.choices[choice](x)\n+                x = self.activations[act](x)\n+                return x\n+    \"\"\"\n+\n+    def __init__(self, modules=None):\n+        super(ModuleDict, self).__init__()\n+        if modules is not None:\n+            self.update(modules)\n+\n+    def __getitem__(self, key):\n+        return self._modules[key]\n+\n+    def __setitem__(self, key, module):\n+        if not isinstance(key, str):\n+            raise TypeError(\"ModuleDict.__setitem__ key should be string, but got \" +\n+                            type(key).__name__)\n+\n+        self.add_module(key, module)\n+\n+    def __delitem__(self, key):\n+        del self._modules[key]\n+\n+    def __len__(self):\n+        return len(self._modules)\n+\n+    def __iter__(self):\n+        return iter(self._modules.keys())", "path": "torch/nn/modules/container.py", "position": null, "original_position": 63, "commit_id": "e67716cb8d27175e67a6d1b2a5518fa677c01cd8", "original_commit_id": "0750c73d373f444cd0d7d02265f14f245d1561fb", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "nit: `iter(self._modules)` would be sufficient", "created_at": "2018-06-21T18:28:04Z", "updated_at": "2018-11-23T15:46:02Z", "html_url": "https://github.com/pytorch/pytorch/pull/8463#discussion_r197234700", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/8463", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/197234700"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/8463#discussion_r197234700"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/8463"}}, "body_html": "<p>nit: <code>iter(self._modules)</code> would be sufficient</p>", "body_text": "nit: iter(self._modules) would be sufficient"}