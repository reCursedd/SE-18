{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/198242441", "pull_request_review_id": 132138045, "id": 198242441, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5ODI0MjQ0MQ==", "diff_hunk": "@@ -187,6 +187,122 @@ def extend(self, modules):\n         return self\n \n \n+class ModuleDict(Module):\n+    r\"\"\"Holds submodules in a dictionary.\n+\n+    ModuleDict can be indexed like a regular Python dictionary, but modules it\n+    contains are properly registered, and will be visible by all Module methods.\n+\n+    Arguments:\n+        modules (iterable, optional): a mapping (dictionary) of (string: module)\n+            or an iterable of key/value pairs of type (string, module)\n+\n+    Example::\n+\n+        class MyModule(nn.Module):\n+            def __init__(self):\n+                super(MyModule, self).__init__()\n+                self.choices = nn.ModuleDict({\n+                        'conv': nn.Conv2d(10, 10, 3),\n+                        'pool': nn.MaxPool2d(3)\n+                })\n+                self.activations = nn.ModuleDict([\n+                        ['lrelu', nn.LeakyReLU()],\n+                        ['prelu', nn.PReLU()]\n+                ])\n+\n+            def forward(self, x, choice, act):\n+                x = self.choices[choice](x)\n+                x = self.activations[act](x)\n+                return x\n+    \"\"\"\n+\n+    def __init__(self, modules=None):\n+        super(ModuleDict, self).__init__()\n+        if modules is not None:\n+            self.update(modules)\n+\n+    def __getitem__(self, key):\n+        return self._modules[key]\n+\n+    def __setitem__(self, key, module):\n+        self.add_module(key, module)", "path": "torch/nn/modules/container.py", "position": 50, "original_position": 50, "commit_id": "e67716cb8d27175e67a6d1b2a5518fa677c01cd8", "original_commit_id": "c666bbc9db88d62378e6b9c7e12796a893a151f5", "user": {"login": "SsnL", "id": 5674597, "node_id": "MDQ6VXNlcjU2NzQ1OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5674597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SsnL", "html_url": "https://github.com/SsnL", "followers_url": "https://api.github.com/users/SsnL/followers", "following_url": "https://api.github.com/users/SsnL/following{/other_user}", "gists_url": "https://api.github.com/users/SsnL/gists{/gist_id}", "starred_url": "https://api.github.com/users/SsnL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SsnL/subscriptions", "organizations_url": "https://api.github.com/users/SsnL/orgs", "repos_url": "https://api.github.com/users/SsnL/repos", "events_url": "https://api.github.com/users/SsnL/events{/privacy}", "received_events_url": "https://api.github.com/users/SsnL/received_events", "type": "User", "site_admin": false}, "body": "lol you are right. it's very implicit indeed. \r\n\r\nplease add the check in `module.py`, thank you!", "created_at": "2018-06-26T17:57:19Z", "updated_at": "2018-11-23T15:46:21Z", "html_url": "https://github.com/pytorch/pytorch/pull/8463#discussion_r198242441", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/8463", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/198242441"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/8463#discussion_r198242441"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/8463"}}, "body_html": "<p>lol you are right. it's very implicit indeed.</p>\n<p>please add the check in <code>module.py</code>, thank you!</p>", "body_text": "lol you are right. it's very implicit indeed.\nplease add the check in module.py, thank you!", "in_reply_to_id": 198219567}