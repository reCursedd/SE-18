{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/197252832", "pull_request_review_id": 130962399, "id": 197252832, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NzI1MjgzMg==", "diff_hunk": "@@ -187,6 +187,122 @@ def extend(self, modules):\n         return self\n \n \n+class ModuleDict(Module):\n+    r\"\"\"Holds submodules in a dictionary.\n+\n+    ModuleDict can be indexed like a regular Python dictionary, but modules it\n+    contains are properly registered, and will be visible by all Module methods.\n+\n+    Arguments:\n+        modules (iterable, optional): a mapping (dictionary) of (string: module)\n+            or an iterable of key/value pairs of type (string, module)\n+\n+    Example::\n+\n+        class MyModule(nn.Module):\n+            def __init__(self):\n+                super(MyModule, self).__init__()\n+                self.choices = nn.ModuleDict({\n+                        'conv': nn.Conv2d(10, 10, 3),\n+                        'pool': nn.MaxPool2d(3)\n+                })\n+                self.activations = nn.ModuleDict([\n+                        ['lrelu', nn.LeakyReLU()],\n+                        ['prelu', nn.PReLU()]\n+                ])\n+\n+            def forward(self, x, choice, act):\n+                x = self.choices[choice](x)\n+                x = self.activations[act](x)\n+                return x\n+    \"\"\"\n+\n+    def __init__(self, modules=None):\n+        super(ModuleDict, self).__init__()\n+        if modules is not None:\n+            self.update(modules)\n+\n+    def __getitem__(self, key):\n+        return self._modules[key]\n+\n+    def __setitem__(self, key, module):\n+        if not isinstance(key, str):\n+            raise TypeError(\"ModuleDict.__setitem__ key should be string, but got \" +\n+                            type(key).__name__)\n+\n+        self.add_module(key, module)\n+\n+    def __delitem__(self, key):\n+        del self._modules[key]\n+\n+    def __len__(self):\n+        return len(self._modules)\n+\n+    def __iter__(self):\n+        return iter(self._modules.keys())\n+\n+    def __contains__(self, key):\n+        return key in self._modules\n+\n+    def clear(self):\n+        \"\"\"Remove all items from the ModuleDict.\n+        \"\"\"\n+        self._modules.clear()\n+\n+    def pop(self, key):\n+        r\"\"\"Remove key from the ModuleDict and return its module.\n+\n+        Arguments:\n+            key (string): key to pop from the ModuleDict\n+        \"\"\"\n+        v = self[key]\n+        del self[key]\n+        return v\n+\n+    def keys(self):\n+        r\"\"\"Return an iterable of the ModuleDict\u2019s keys.\n+        \"\"\"\n+        return self._modules.keys()\n+\n+    def items(self):\n+        r\"\"\"Return an iterable of the ModuleDict\u2019s key/value pairs.\n+        \"\"\"\n+        return self._modules.items()\n+\n+    def values(self):\n+        r\"\"\"Return an iterable of the ModuleDict\u2019s values.\n+        \"\"\"\n+        return self._modules.values()\n+\n+    def update(self, modules):\n+        r\"\"\"Update the ModuleDict with the key/value pairs from a mapping or\n+        an iterable, overwriting existing keys.\n+\n+        Arguments:\n+            modules (iterable): a mapping (dictionary) of (string: :class:`~torch.nn.Module``) or\n+                an iterable of key/value pairs of type (string, :class:`~torch.nn.Module``)\n+        \"\"\"\n+        if not isinstance(modules, Iterable):\n+            raise TypeError(\"ModuleDict.update should be called with an \"\n+                            \"iterable of key/value pairs, but got \" +\n+                            type(modules).__name__)\n+\n+        if isinstance(modules, Mapping):\n+            for key, module in modules.items():\n+                self[key] = module\n+        else:\n+            for j, m in enumerate(modules):\n+                if not isinstance(m, Iterable):\n+                    raise TypeError(\"ModuleDict update sequence element \"\n+                                    \"#\" + str(j) + \" should be Iterable; is\" +\n+                                    type(m).__name__)\n+                if not len(m) == 2:\n+                    raise ValueError(\"ModuleDict update sequence element \"\n+                                     \"#\" + str(j) + \" has length \" + str(len(m)) +\n+                                     \"; 2 is required\")", "path": "torch/nn/modules/container.py", "position": 123, "original_position": 123, "commit_id": "e67716cb8d27175e67a6d1b2a5518fa677c01cd8", "original_commit_id": "0750c73d373f444cd0d7d02265f14f245d1561fb", "user": {"login": "karandwivedi42", "id": 9624554, "node_id": "MDQ6VXNlcjk2MjQ1NTQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/9624554?v=4", "gravatar_id": "", "url": "https://api.github.com/users/karandwivedi42", "html_url": "https://github.com/karandwivedi42", "followers_url": "https://api.github.com/users/karandwivedi42/followers", "following_url": "https://api.github.com/users/karandwivedi42/following{/other_user}", "gists_url": "https://api.github.com/users/karandwivedi42/gists{/gist_id}", "starred_url": "https://api.github.com/users/karandwivedi42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/karandwivedi42/subscriptions", "organizations_url": "https://api.github.com/users/karandwivedi42/orgs", "repos_url": "https://api.github.com/users/karandwivedi42/repos", "events_url": "https://api.github.com/users/karandwivedi42/events{/privacy}", "received_events_url": "https://api.github.com/users/karandwivedi42/received_events", "type": "User", "site_admin": false}, "body": "Using `self._modules.update` will skip the `add_module` and `register_parameter` validations in `module.py`.", "created_at": "2018-06-21T19:33:00Z", "updated_at": "2018-11-23T15:46:03Z", "html_url": "https://github.com/pytorch/pytorch/pull/8463#discussion_r197252832", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/8463", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/197252832"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/8463#discussion_r197252832"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/8463"}}, "body_html": "<p>Using <code>self._modules.update</code> will skip the <code>add_module</code> and <code>register_parameter</code> validations in <code>module.py</code>.</p>", "body_text": "Using self._modules.update will skip the add_module and register_parameter validations in module.py.", "in_reply_to_id": 197235285}