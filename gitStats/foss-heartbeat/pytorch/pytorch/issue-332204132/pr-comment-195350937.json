{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/195350937", "pull_request_review_id": 128700436, "id": 195350937, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTM1MDkzNw==", "diff_hunk": "@@ -187,6 +187,104 @@ def extend(self, modules):\n         return self\n \n \n+class ModuleDict(Module):\n+    r\"\"\"Holds submodules in a dictionary.\n+\n+    ModuleDict can be indexed like a regular Python dictionary, but modules it\n+    contains are properly registered, and will be visible by all Module methods.\n+\n+    Arguments:\n+        mapping (iterable, optional): an iterable of key/:class:`~torch.nn.Module``\n+            pairs to add.\n+\n+    Example::\n+\n+        class MyModule(nn.Module):\n+            def __init__(self):\n+                super(MyModule, self).__init__()\n+                self.choices = nn.ModuleDict({\n+                        'conv': nn.Conv2d(10, 10, 3),\n+                        'pool': nn.MaxPool2d(3)\n+                })\n+\n+            def forward(self, x, choice):\n+                x = self.choices[choice](x)\n+                return x\n+    \"\"\"\n+\n+    def __init__(self, mapping=None):\n+        super(ModuleDict, self).__init__()\n+        if mapping is not None:\n+            self.update(mapping)\n+\n+    def __getitem__(self, key):\n+        return self._modules[str(key)]\n+\n+    def __setitem__(self, key, module):\n+        self.add_module(str(key), module)\n+\n+    def __delitem__(self, key):\n+        del self._modules[str(key)]\n+\n+    def __len__(self):\n+        return len(self._modules)\n+\n+    def __iter__(self):\n+        return iter(self._modules.keys())\n+\n+    def __contains__(self, key):\n+        return str(key) in self._modules\n+\n+    def clear(self):\n+        \"\"\"Remove all items from the ModuleDict.\n+        \"\"\"\n+        self._modules.clear()\n+\n+    def pop(self, key):\n+        r\"\"\"Remove key from the ModuleDict and return its module.\n+\n+        Arguments:\n+            key (string): key to pop from the ModuleDict\n+        \"\"\"\n+        v = self[key]\n+        del self[key]\n+        return v\n+\n+    def keys(self):\n+        r\"\"\"Return an iterable of the ModuleDict\u2019s keys.\n+        \"\"\"\n+        return self._modules.keys()\n+\n+    def items(self):\n+        r\"\"\"Return an iterable of the ModuleDict\u2019s key/value pairs.\n+        \"\"\"\n+        return self._modules.items()\n+\n+    def values(self):\n+        r\"\"\"Return an iterable of the ModuleDict\u2019s values.\n+        \"\"\"\n+        return self._modules.values()\n+\n+    def update(self, mapping):\n+        r\"\"\"Update the ModuleDict with the key/value pairs from mapping,\n+        overwriting existing keys.\n+\n+        Arguments:\n+            mapping (iterable): dictionary or iterable of key/value pairs\n+        \"\"\"\n+        if not isinstance(mapping, Iterable):\n+            raise TypeError(\"ModuleDict.update should be called with an \"\n+                            \"iterable of key/value pairs, but got \" +\n+                            type(mapping).__name__)\n+\n+        if isinstance(mapping, dict):\n+            for key, module in mapping.items():\n+                self.add_module(str(key), module)\n+        else:", "path": "torch/nn/modules/container.py", "position": null, "original_position": 97, "commit_id": "e67716cb8d27175e67a6d1b2a5518fa677c01cd8", "original_commit_id": "4318f5a46e54baaea4a4d53262569dd0d4d204e9", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "This could check for `Mapping` vs `Iterable`", "created_at": "2018-06-14T09:09:34Z", "updated_at": "2018-11-23T15:45:32Z", "html_url": "https://github.com/pytorch/pytorch/pull/8463#discussion_r195350937", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/8463", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/195350937"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/8463#discussion_r195350937"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/8463"}}, "body_html": "<p>This could check for <code>Mapping</code> vs <code>Iterable</code></p>", "body_text": "This could check for Mapping vs Iterable"}