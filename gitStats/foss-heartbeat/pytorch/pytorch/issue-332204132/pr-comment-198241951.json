{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/198241951", "pull_request_review_id": 132137440, "id": 198241951, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5ODI0MTk1MQ==", "diff_hunk": "@@ -187,6 +187,122 @@ def extend(self, modules):\n         return self\n \n \n+class ModuleDict(Module):\n+    r\"\"\"Holds submodules in a dictionary.\n+\n+    ModuleDict can be indexed like a regular Python dictionary, but modules it\n+    contains are properly registered, and will be visible by all Module methods.\n+\n+    Arguments:\n+        modules (iterable, optional): a mapping (dictionary) of (string: module)\n+            or an iterable of key/value pairs of type (string, module)\n+\n+    Example::\n+\n+        class MyModule(nn.Module):\n+            def __init__(self):\n+                super(MyModule, self).__init__()\n+                self.choices = nn.ModuleDict({\n+                        'conv': nn.Conv2d(10, 10, 3),\n+                        'pool': nn.MaxPool2d(3)\n+                })\n+                self.activations = nn.ModuleDict([\n+                        ['lrelu', nn.LeakyReLU()],\n+                        ['prelu', nn.PReLU()]\n+                ])\n+\n+            def forward(self, x, choice, act):\n+                x = self.choices[choice](x)\n+                x = self.activations[act](x)\n+                return x\n+    \"\"\"\n+\n+    def __init__(self, modules=None):\n+        super(ModuleDict, self).__init__()\n+        if modules is not None:\n+            self.update(modules)\n+\n+    def __getitem__(self, key):\n+        return self._modules[key]\n+\n+    def __setitem__(self, key, module):\n+        self.add_module(key, module)", "path": "torch/nn/modules/container.py", "position": 50, "original_position": 50, "commit_id": "e67716cb8d27175e67a6d1b2a5518fa677c01cd8", "original_commit_id": "c666bbc9db88d62378e6b9c7e12796a893a151f5", "user": {"login": "karandwivedi42", "id": 9624554, "node_id": "MDQ6VXNlcjk2MjQ1NTQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/9624554?v=4", "gravatar_id": "", "url": "https://api.github.com/users/karandwivedi42", "html_url": "https://github.com/karandwivedi42", "followers_url": "https://api.github.com/users/karandwivedi42/followers", "following_url": "https://api.github.com/users/karandwivedi42/following{/other_user}", "gists_url": "https://api.github.com/users/karandwivedi42/gists{/gist_id}", "starred_url": "https://api.github.com/users/karandwivedi42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/karandwivedi42/subscriptions", "organizations_url": "https://api.github.com/users/karandwivedi42/orgs", "repos_url": "https://api.github.com/users/karandwivedi42/repos", "events_url": "https://api.github.com/users/karandwivedi42/events{/privacy}", "received_events_url": "https://api.github.com/users/karandwivedi42/received_events", "type": "User", "site_admin": false}, "body": "> builtin dict can have arbitrary hashable objects as keys\r\n\r\n@SsnL I am using `Module.add_module` which does these checks (though very implicitly).\r\n\r\n```python\r\n>>> import torch\r\n>>> from torch import nn\r\n>>> class A(nn.Module):\r\n...     def __init__(self):\r\n...             super().__init__()\r\n...             self.add_module(123, nn.ReLU())\r\n...     def forward(self):\r\n...             return 0\r\n... \r\n>>> A()\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"<stdin>\", line 4, in __init__\r\n  File \"/home/karan/anaconda3/lib/python3.6/site-packages/torch/nn/modules/module.py\", line 166, in add_module\r\n    elif hasattr(self, name) and name not in self._modules:\r\nTypeError: hasattr(): attribute name must be string\r\n```\r\n\r\nI will add the check anyway, but it probably needs a cleaner fix in \r\n `module.py`", "created_at": "2018-06-26T17:55:42Z", "updated_at": "2018-11-23T15:46:21Z", "html_url": "https://github.com/pytorch/pytorch/pull/8463#discussion_r198241951", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/8463", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/198241951"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/8463#discussion_r198241951"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/8463"}}, "body_html": "<blockquote>\n<p>builtin dict can have arbitrary hashable objects as keys</p>\n</blockquote>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=5674597\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/SsnL\">@SsnL</a> I am using <code>Module.add_module</code> which does these checks (though very implicitly).</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">import</span> torch\n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">from</span> torch <span class=\"pl-k\">import</span> nn\n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">A</span>(<span class=\"pl-e\">nn</span>.<span class=\"pl-e\">Module</span>):\n<span class=\"pl-c1\">...</span>     <span class=\"pl-k\">def</span> <span class=\"pl-c1\">__init__</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>):\n<span class=\"pl-c1\">...</span>             <span class=\"pl-c1\">super</span>().<span class=\"pl-c1\">__init__</span>()\n<span class=\"pl-c1\">...</span>             <span class=\"pl-c1\">self</span>.add_module(<span class=\"pl-c1\">123</span>, nn.ReLU())\n<span class=\"pl-c1\">...</span>     <span class=\"pl-k\">def</span> <span class=\"pl-en\">forward</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>):\n<span class=\"pl-c1\">...</span>             <span class=\"pl-k\">return</span> <span class=\"pl-c1\">0</span>\n<span class=\"pl-c1\">...</span> \n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> A()\nTraceback (most recent call last):\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>&lt;stdin&gt;<span class=\"pl-pds\">\"</span></span>, line <span class=\"pl-c1\">1</span>, <span class=\"pl-k\">in</span> <span class=\"pl-k\">&lt;</span>module<span class=\"pl-k\">&gt;</span>\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>&lt;stdin&gt;<span class=\"pl-pds\">\"</span></span>, line <span class=\"pl-c1\">4</span>, <span class=\"pl-k\">in</span> <span class=\"pl-c1\">__init__</span>\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/home/karan/anaconda3/lib/python3.6/site-packages/torch/nn/modules/module.py<span class=\"pl-pds\">\"</span></span>, line <span class=\"pl-c1\">166</span>, <span class=\"pl-k\">in</span> add_module\n    <span class=\"pl-k\">elif</span> <span class=\"pl-c1\">hasattr</span>(<span class=\"pl-c1\">self</span>, name) <span class=\"pl-k\">and</span> name <span class=\"pl-k\">not</span> <span class=\"pl-k\">in</span> <span class=\"pl-c1\">self</span>._modules:\n<span class=\"pl-c1\">TypeError</span>: <span class=\"pl-c1\">hasattr</span>(): attribute name must be string</pre></div>\n<p>I will add the check anyway, but it probably needs a cleaner fix in<br>\n<code>module.py</code></p>", "body_text": "builtin dict can have arbitrary hashable objects as keys\n\n@SsnL I am using Module.add_module which does these checks (though very implicitly).\n>>> import torch\n>>> from torch import nn\n>>> class A(nn.Module):\n...     def __init__(self):\n...             super().__init__()\n...             self.add_module(123, nn.ReLU())\n...     def forward(self):\n...             return 0\n... \n>>> A()\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"<stdin>\", line 4, in __init__\n  File \"/home/karan/anaconda3/lib/python3.6/site-packages/torch/nn/modules/module.py\", line 166, in add_module\n    elif hasattr(self, name) and name not in self._modules:\nTypeError: hasattr(): attribute name must be string\nI will add the check anyway, but it probably needs a cleaner fix in\nmodule.py", "in_reply_to_id": 198219567}