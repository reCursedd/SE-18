{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/184658915", "pull_request_review_id": 115901671, "id": 184658915, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NDY1ODkxNQ==", "diff_hunk": "@@ -0,0 +1,112 @@\n+#define CATCH_CONFIG_MAIN\n+#include \"catch.hpp\"\n+\n+#include \"ATen/ATen.h\"\n+#include \"ATen/CPUApplyUtils.h\"\n+#include \"test_assert.h\"\n+#include \"test_seed.h\"\n+\n+#include <iostream>\n+using namespace std;\n+using namespace at;\n+\n+void fill_tensor(int64_t scalar, Tensor& t_) {\n+  auto t = t_.view(-1);\n+  for (int64_t i = 0; i < t.numel(); i++) {\n+    t[i] = (i + 1) * scalar;\n+  }\n+}\n+\n+void test(Type& type, IntList shape, int64_t a=0, int64_t b=1) {\n+  auto zero_dim = type.tensor({});\n+  zero_dim.fill_(2);\n+  zero_dim.exp_();\n+  AT_DISPATCH_FLOATING_TYPES(zero_dim.type(), \"test0\", [&] {\n+    ASSERT(zero_dim.data<scalar_t>()[0] == std::exp(2));\n+  });\n+\n+  auto empty_t = type.tensor({0});\n+  empty_t.fill_(3);\n+  empty_t.exp_();\n+\n+  auto a0 = type.tensor();\n+  auto a1 = type.tensor();\n+  auto a2 = type.tensor();\n+  auto a3 = type.tensor();\n+  auto a4 = CPU(kDouble).tensor();\n+\n+  std::vector<Tensor> tensors({a0, a1, a2, a3, a4});\n+  for (size_t i = 0; i < tensors.size(); i++) {\n+    tensors[i].resize_(shape);\n+    fill_tensor(i + 1, tensors[i]);\n+    if (a >= 0 && b >= 0) {\n+      tensors[i].transpose_(a, b);\n+    }\n+  }\n+\n+\n+  AT_DISPATCH_FLOATING_TYPES(a0.type(), \"test1\", [&] {\n+    CPU_tensor_apply2<scalar_t, scalar_t>(\n+        a0, a1, [](scalar_t& y, const scalar_t& x) { y = x * x; });\n+    CPU_tensor_apply2<double, scalar_t>(\n+        a4, a1, [](double& y, scalar_t x) { y = (double)(x * x); });\n+    for (int64_t i = 0; i < a0.numel(); i++) {\n+      auto target = a1.data<scalar_t>()[i] * a1.data<scalar_t>()[i];\n+      ASSERT(a0.data<scalar_t>()[i] == target);\n+      ASSERT(a4.data<double>()[i] == target);\n+    }\n+  });\n+\n+  AT_DISPATCH_FLOATING_TYPES(a0.type(), \"test2\", [&] {\n+    CPU_tensor_apply3<scalar_t, scalar_t, scalar_t>(\n+        a0, a1, a2, [](scalar_t& y, const scalar_t& x, const scalar_t& z) {\n+          y = x * x + z;\n+        });\n+    CPU_tensor_apply3<double, scalar_t, scalar_t>(\n+        a4, a1, a2, [](double& y, const scalar_t& x, const scalar_t& z) {\n+          y = (double)(x * x + z);\n+        });\n+    for (int64_t i = 0; i < a0.numel(); i++) {\n+      auto target = a1.data<scalar_t>()[i] * a1.data<scalar_t>()[i];\n+      target = target + a2.data<scalar_t>()[i];\n+      ASSERT(a0.data<scalar_t>()[i] == target);\n+      ASSERT(a4.data<double>()[i] == target);\n+    }\n+  });\n+\n+  AT_DISPATCH_FLOATING_TYPES(a0.type(), \"test3\", [&] {\n+    CPU_tensor_apply4<scalar_t, scalar_t, scalar_t, scalar_t>(\n+        a0,\n+        a1,\n+        a2,\n+        a3,\n+        [](scalar_t& y,\n+           const scalar_t& x,\n+           const scalar_t& z,\n+           const scalar_t& a) { y = x * x + z * a; });\n+    CPU_tensor_apply4<double, scalar_t, scalar_t, scalar_t>(\n+        a4,\n+        a1,\n+        a2,\n+        a3,\n+        [](double& y, const scalar_t& x, const scalar_t& z, const scalar_t& a) {\n+          y = (double)(x * x + z * a);\n+        });\n+    for (int64_t i = 0; i < a0.numel(); i++) {\n+      auto target = a1.data<scalar_t>()[i] * a1.data<scalar_t>()[i];\n+      target = target + a2.data<scalar_t>()[i] * a3.data<scalar_t>()[i];\n+      ASSERT(a0.data<scalar_t>()[i] == target);\n+      ASSERT(a4.data<double>()[i] == target);\n+    }\n+  });\n+}\n+\n+TEST_CASE(\"apply utils test\", \"[cpu]\") {", "path": "aten/src/ATen/test/apply_utils_test.cpp", "position": null, "original_position": 104, "commit_id": "ca55c40ec722ecb64659682bdb81caa0cfb82e36", "original_commit_id": "953f35ee873ca496b1e3c500e3e42e4550eae879", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "It would be nice to use the Catch2 features that let you create sub tests. Right now it's really hard to tell what are you trying to check in different places. Otherwise some comments would be useful.", "created_at": "2018-04-27T11:15:43Z", "updated_at": "2018-11-23T15:43:18Z", "html_url": "https://github.com/pytorch/pytorch/pull/6119#discussion_r184658915", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/6119", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/184658915"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/6119#discussion_r184658915"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/6119"}}, "body_html": "<p>It would be nice to use the Catch2 features that let you create sub tests. Right now it's really hard to tell what are you trying to check in different places. Otherwise some comments would be useful.</p>", "body_text": "It would be nice to use the Catch2 features that let you create sub tests. Right now it's really hard to tell what are you trying to check in different places. Otherwise some comments would be useful."}