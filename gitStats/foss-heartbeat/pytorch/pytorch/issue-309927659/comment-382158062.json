{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/382158062", "html_url": "https://github.com/pytorch/pytorch/pull/6119#issuecomment-382158062", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/6119", "id": 382158062, "node_id": "MDEyOklzc3VlQ29tbWVudDM4MjE1ODA2Mg==", "user": {"login": "fmassa", "id": 9110200, "node_id": "MDQ6VXNlcjkxMTAyMDA=", "avatar_url": "https://avatars2.githubusercontent.com/u/9110200?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fmassa", "html_url": "https://github.com/fmassa", "followers_url": "https://api.github.com/users/fmassa/followers", "following_url": "https://api.github.com/users/fmassa/following{/other_user}", "gists_url": "https://api.github.com/users/fmassa/gists{/gist_id}", "starred_url": "https://api.github.com/users/fmassa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fmassa/subscriptions", "organizations_url": "https://api.github.com/users/fmassa/orgs", "repos_url": "https://api.github.com/users/fmassa/repos", "events_url": "https://api.github.com/users/fmassa/events{/privacy}", "received_events_url": "https://api.github.com/users/fmassa/received_events", "type": "User", "site_admin": false}, "created_at": "2018-04-17T21:43:26Z", "updated_at": "2018-04-17T21:43:26Z", "author_association": "MEMBER", "body_html": "<p>I agree that it's not clear if it would be more efficient in a full pipeline to return non-contiguous tensors.<br>\nAlso, in the case we invest extra work on making <code>.copy()</code> more efficient (and thus <code>.contiguous()</code> becomes faster) by specializing on some cases (block copy?), this could maybe make a difference.</p>\n<p>But I'm unsure on how to quantify if there would be any speed benefits of returning non-contiguous tensors on real workloads before doing any implementation work...</p>", "body_text": "I agree that it's not clear if it would be more efficient in a full pipeline to return non-contiguous tensors.\nAlso, in the case we invest extra work on making .copy() more efficient (and thus .contiguous() becomes faster) by specializing on some cases (block copy?), this could maybe make a difference.\nBut I'm unsure on how to quantify if there would be any speed benefits of returning non-contiguous tensors on real workloads before doing any implementation work...", "body": "I agree that it's not clear if it would be more efficient in a full pipeline to return non-contiguous tensors.\r\nAlso, in the case we invest extra work on making `.copy()` more efficient (and thus `.contiguous()` becomes faster) by specializing on some cases (block copy?), this could maybe make a difference.\r\n\r\nBut I'm unsure on how to quantify if there would be any speed benefits of returning non-contiguous tensors on real workloads before doing any implementation work..."}