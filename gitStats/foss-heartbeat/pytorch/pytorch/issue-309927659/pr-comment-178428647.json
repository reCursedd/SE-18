{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/178428647", "pull_request_review_id": 108489476, "id": 178428647, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3ODQyODY0Nw==", "diff_hunk": "@@ -22,289 +22,333 @@ namespace at {\n  * B[1][0]\n  * B[1][1]\n  *\n- * We set the offset into the underlying storage as (storageOffset + stride_B * index_B),\n- * i.e. basically we compute the offset into the storage as we would normally for a\n- * Tensor. But because we are guaranteed the subsequent data is contiguous in memory, we\n- * can simply loop for sizeof(A) iterations and perform the operation, without having to\n- * follow the order described by the strides of A.\n+ * We set the offset into the underlying storage as (storageOffset + stride_B *\n+ * index_B), i.e. basically we compute the offset into the storage as we would\n+ * normally for a Tensor. But because we are guaranteed the subsequent data is\n+ * contiguous in memory, we can simply loop for sizeof(A) iterations and perform\n+ * the operation, without having to follow the order described by the strides of\n+ * A.\n  *\n- * 3. As an optimization, we merge dimensions of A that are contiguous in memory. For\n- * example, if A is a 3x3x3x3 tensor narrowed from a 3x3x4x3 tensor, then the first two\n- * dimensions can be merged for the purposes of APPLY, reducing the number of nested\n- * loops.\n+ * 3. As an optimization, we merge dimensions of A that are contiguous in\n+ * memory. For example, if A is a 3x3x3x3 tensor narrowed from a 3x3x4x3 tensor,\n+ * then the first two dimensions can be merged for the purposes of APPLY,\n+ * reducing the number of nested loops.\n  */\n \n-// TODO: turn this macro into a proper template\n-#define __ATH_TENSOR_APPLYX_PREAMBLE(TYPE, ATENSOR, DIM, ALLOW_CONTIGUOUS) \\\n-  TYPE *ATENSOR##_data = NULL; \\\n-  int64_t *ATENSOR##_counter = NULL, *ATENSOR##_sizes = NULL, *ATENSOR##_strides = NULL, *ATENSOR##_dimOffset = NULL; \\\n-  int64_t ATENSOR##_stride = 0, ATENSOR##_size = 0, ATENSOR##_dim = 0, ATENSOR##_i; \\\n-  int ATENSOR##_contiguous = ALLOW_CONTIGUOUS && DIM < 0; \\\n-\\\n-  if(ATENSOR.sizes().equals({0})) \\\n-    TH_TENSOR_APPLY_hasFinished = true; \\\n-  else \\\n-  { \\\n-    ATENSOR##_data = ATENSOR.data<TYPE>(); \\\n-    ATENSOR##_size = 1; \\\n-    ATENSOR##_stride = 1; \\\n-    for(ATENSOR##_i = ATENSOR.dim() - 1; ATENSOR##_i >= 0; ATENSOR##_i--) { \\\n-      if(ATENSOR.sizes()[ATENSOR##_i] != 1) { \\\n-        if(ATENSOR.strides()[ATENSOR##_i] == ATENSOR##_size && ATENSOR##_i != DIM) \\\n-          ATENSOR##_size *= ATENSOR.sizes()[ATENSOR##_i]; \\\n-        else{ \\\n-          ATENSOR##_contiguous = 0; \\\n-          break; \\\n-        } \\\n-      } \\\n-    } \\\n-    if (!ATENSOR##_contiguous) { \\\n-      /* Find the dimension of contiguous sections */ \\\n-      ATENSOR##_dim = 1; \\\n-      for(ATENSOR##_i = ATENSOR.dim() - 2; ATENSOR##_i >= 0; ATENSOR##_i--) \\\n-      { \\\n-        if(ATENSOR.strides()[ATENSOR##_i] != ATENSOR.strides()[ATENSOR##_i+1] * ATENSOR.sizes()[ATENSOR##_i+1] || ATENSOR##_i == DIM || ATENSOR##_i+1 == DIM) \\\n-          ATENSOR##_dim++; \\\n-      } \\\n-      /* Allocate an array of 3*dim elements, where dim is the number of contiguous sections */ \\\n-      ATENSOR##_counter = new int64_t[3*ATENSOR##_dim]; \\\n-      ATENSOR##_sizes = ATENSOR##_counter + ATENSOR##_dim; \\\n-      ATENSOR##_strides = ATENSOR##_counter + 2*ATENSOR##_dim; \\\n-      TH_TENSOR_dim_index = ATENSOR##_dim-1; \\\n-      ATENSOR##_dimOffset = (DIM == ATENSOR.dim()-1) ? &ATENSOR##_i : &ATENSOR##_counter[DIM]; \\\n-      ATENSOR##_sizes[TH_TENSOR_dim_index] = ATENSOR.sizes()[ATENSOR.dim()-1]; \\\n-      ATENSOR##_strides[TH_TENSOR_dim_index] = ATENSOR.strides()[ATENSOR.dim()-1]; \\\n-      /* ATENSOR##_counter tracks where we are in the storage. The offset into the */ \\\n-      /* storage is given by storage_offset + (i * j), where i is the stride */ \\\n-      /* vector and j is tensor_counter vector. This sets the starting position for the loop. */ \\\n-      for(ATENSOR##_i = ATENSOR##_dim-1; ATENSOR##_i >= 0; --ATENSOR##_i) { \\\n-        ATENSOR##_counter[ATENSOR##_i] = 0; \\\n-      } \\\n-      for(ATENSOR##_i = ATENSOR.dim()-2; ATENSOR##_i >= 0; --ATENSOR##_i) { \\\n-        if (ATENSOR.strides()[ATENSOR##_i] == ATENSOR.strides()[ATENSOR##_i+1] * ATENSOR.sizes()[ATENSOR##_i+1] && ATENSOR##_i != DIM && ATENSOR##_i+1 != DIM) { \\\n-          ATENSOR##_sizes[TH_TENSOR_dim_index] = ATENSOR.sizes()[ATENSOR##_i] * ATENSOR##_sizes[TH_TENSOR_dim_index]; \\\n-          if (DIM != ATENSOR.dim()-1 && ATENSOR##_i < DIM) \\\n-            ATENSOR##_dimOffset--; \\\n-        } else { \\\n-          --TH_TENSOR_dim_index; \\\n-          ATENSOR##_sizes[TH_TENSOR_dim_index] = ATENSOR.sizes()[ATENSOR##_i]; \\\n-          ATENSOR##_strides[TH_TENSOR_dim_index] = ATENSOR.strides()[ATENSOR##_i]; \\\n-        } \\\n-      } \\\n-      /* Size of the inner most section */ \\\n-      ATENSOR##_size = ATENSOR##_sizes[ATENSOR##_dim-1]; \\\n-      /* Stride of the inner most section */ \\\n-      ATENSOR##_stride = ATENSOR##_strides[ATENSOR##_dim-1]; \\\n-    } \\\n-  } \\\n-  ATENSOR##_i = 0;\n+template <typename T>\n+struct util_tensor {\n+  T* data = NULL;\n+  int64_t *counter = NULL, *sizes = NULL, *strides = NULL, *dimOffset = NULL;\n+  int64_t stride = 0, size = 0, dim = 0, i;\n+  int contiguous;\n+  util_tensor(Tensor& tensor, int64_t dim, bool ALLOW_CONTIGUOUS) {\n+    dim = dim;\n+    int64_t TH_TENSOR_dim_index = 0;\n+    int contiguous = ALLOW_CONTIGUOUS && dim < 0;\n+    data = tensor.data<T>();\n+    size = 1;\n+    stride = 1;\n+    for (i = tensor.dim() - 1; i >= 0; i--) {\n+      if (tensor.sizes()[i] != 1) {\n+        if (tensor.strides()[i] == size && i != dim)\n+          size *= tensor.sizes()[i];\n+        else {\n+          contiguous = 0;\n+          break;\n+        }\n+      }\n+    }\n+    if (!contiguous) {\n+      dim = 1;\n+      for (i = tensor.dim() - 2; i >= 0; i--) {\n+        if (tensor.strides()[i] !=\n+                tensor.strides()[i + 1] * tensor.sizes()[i + 1] ||\n+            i == dim || i + 1 == dim)\n+          dim++;\n+      }\n+      counter = new int64_t[3 * dim];\n+      sizes = counter + dim;\n+      strides = counter + 2 * dim;\n+      TH_TENSOR_dim_index = dim - 1;\n+      dimOffset = (dim == tensor.dim() - 1) ? &i : &counter[dim];\n+      sizes[TH_TENSOR_dim_index] = tensor.sizes()[tensor.dim() - 1];\n+      strides[TH_TENSOR_dim_index] = tensor.strides()[tensor.dim() - 1];\n+      for (i = dim - 1; i >= 0; --i) {\n+        counter[i] = 0;\n+      }\n+      for (i = tensor.dim() - 2; i >= 0; --i) {\n+        if (tensor.strides()[i] ==\n+                tensor.strides()[i + 1] * tensor.sizes()[i + 1] &&\n+            i != dim && i + 1 != dim) {\n+          sizes[TH_TENSOR_dim_index] =\n+              tensor.sizes()[i] * sizes[TH_TENSOR_dim_index];\n+          if (dim != tensor.dim() - 1 && i < dim)\n+            dimOffset--;\n+        } else {\n+          --TH_TENSOR_dim_index;\n+          sizes[TH_TENSOR_dim_index] = tensor.sizes()[i];\n+          strides[TH_TENSOR_dim_index] = tensor.strides()[i];\n+        }\n+      } /* Size of the inner most section */\n+      size = sizes[dim - 1]; /* Stride of the inner most section */\n+      stride = strides[dim - 1];\n+    }\n+    i = 0;\n+  }\n+  ~util_tensor() {\n+    if (counter != NULL)\n+      delete[] counter;\n+  }\n+};\n+\n+template <typename T>\n+static bool tensor_update_counters(util_tensor<T>& ut) {\n+  if (ut.i == ut.size) {\n+    if (ut.contiguous)\n+      return true;\n \n-// TODO: turn this macro into a proper template\n-#define  __ATH_TENSOR_APPLYX_UPDATE_COUNTERS(ATENSOR, ALWAYS_UPDATE) \\\n-  if(ATENSOR##_i == ATENSOR##_size || ALWAYS_UPDATE) \\\n-  { \\\n-    if(ATENSOR##_contiguous) \\\n-      break; \\\n-\\\n-    if(ATENSOR##_dim == 1) \\\n-       break; \\\n-\\\n-    /* Reset pointer to beginning of loop */ \\\n-    ATENSOR##_data -= ATENSOR##_size*ATENSOR##_stride; \\\n-    for(ATENSOR##_i = ATENSOR##_dim-2; ATENSOR##_i >= 0; ATENSOR##_i--) \\\n-    { \\\n-      ATENSOR##_counter[ATENSOR##_i]++; \\\n-      /* Jump ahread by the stride of this dimension */ \\\n-      ATENSOR##_data += ATENSOR##_strides[ATENSOR##_i]; \\\n-\\\n-      if(ATENSOR##_counter[ATENSOR##_i]  == ATENSOR##_sizes[ATENSOR##_i]) \\\n-      { \\\n-        if(ATENSOR##_i == 0) \\\n-        { \\\n-          TH_TENSOR_APPLY_hasFinished = true; \\\n-          break; \\\n-        } \\\n-          else \\\n-        { \\\n-          /* Reset the pointer to the beginning of the chunk defined by this dimension */ \\\n-          ATENSOR##_data -= ATENSOR##_counter[ATENSOR##_i]*ATENSOR##_strides[ATENSOR##_i]; \\\n-          ATENSOR##_counter[ATENSOR##_i] = 0; \\\n-        } \\\n-      } \\\n-      else \\\n-        break; \\\n-    } \\\n-    ATENSOR##_i = 0; \\\n+    if (ut.dim == 1)\n+      return true;\n+\n+    /* Reset pointer to beginning of loop */\n+    ut.data -= ut.size * ut.stride;\n+    for (ut.i = ut.dim - 2; ut.i >= 0; ut.i--) {\n+      ut.counter[ut.i]++;\n+      /* Jump ahread by the stride of this dimension */\n+      ut.data += ut.strides[ut.i];\n+\n+      if (ut.counter[ut.i] == ut.sizes[ut.i]) {\n+        if (ut.i == 0) {\n+          return true;\n+        } else {\n+          /* Reset the pointer to the beginning of the chunk defined by this\n+           * dimension */\n+          ut.data -= ut.counter[ut.i] * ut.strides[ut.i];\n+          ut.counter[ut.i] = 0;\n+        }\n+      } else\n+        return false;\n+    }\n+    ut.i = 0;\n   }\n+  return false;\n+}\n \n template <typename scalar1, typename scalar2, typename Op>\n-void CPU_tensor_apply2_dim(Tensor& tensor1, Tensor& tensor2, int64_t dim, Op op) {\n+void CPU_tensor_apply2_dim(\n+    Tensor& tensor1,\n+    Tensor& tensor2,\n+    int64_t dim,\n+    Op op) {\n   checkBackend(\"CPU_tensor_apply2\", {tensor1, tensor2}, Backend::CPU);\n-  bool TH_TENSOR_APPLY_hasFinished = false;\n-  int64_t TH_TENSOR_dim_index = 0;\n-  __ATH_TENSOR_APPLYX_PREAMBLE(scalar1, tensor1, dim, 1)\n-  __ATH_TENSOR_APPLYX_PREAMBLE(scalar2, tensor2, dim, 1)\n+  util_tensor<scalar1> ut1(tensor1, dim, true);\n+  util_tensor<scalar2> ut2(tensor2, dim, true);\n   auto t1_numel = tensor1.numel();\n   auto t2_numel = tensor2.numel();\n-  if(t1_numel != t2_numel) {\n+  if (t1_numel != t2_numel) {\n     std::ostringstream oss;\n-    oss << \"inconsistent tensor size, expected \" << tensor1.sizes() << \" and \" << tensor2.sizes()\n-        << \" to have the same number of elements, but got \" << t1_numel << \" and \" << t2_numel << \" elements respectively\";\n+    oss << \"inconsistent tensor size, expected \" << tensor1.sizes() << \" and \"\n+        << tensor2.sizes() << \" to have the same number of elements, but got \"\n+        << t1_numel << \" and \" << t2_numel << \" elements respectively\";\n     throw std::runtime_error(oss.str());\n   }\n-  while(!TH_TENSOR_APPLY_hasFinished)\n-  {\n+  bool TH_TENSOR_APPLY_hasFinished = false;\n+  if (tensor1.sizes().equals({0}))\n+    TH_TENSOR_APPLY_hasFinished = true;\n+  if (tensor2.sizes().equals({0}))\n+    TH_TENSOR_APPLY_hasFinished = true;\n+  while (!TH_TENSOR_APPLY_hasFinished) {\n     /* Loop through the inner most region of the Tensor */\n-    for(; tensor1_i < tensor1_size && tensor2_i < tensor2_size; tensor1_i++, tensor2_i++, tensor1_data += tensor1_stride, tensor2_data += tensor2_stride)\n-    {\n-      op(*tensor1_data, *tensor2_data);\n+    for (; ut1.i < ut1.size && ut2.i < ut2.size;\n+         ut1.i++, ut2.i++, ut1.data += ut1.stride, ut2.data += ut2.stride) {\n+      op(*ut1.data, *ut2.data);\n     }\n-    __ATH_TENSOR_APPLYX_UPDATE_COUNTERS(tensor1, 0)\n-    __ATH_TENSOR_APPLYX_UPDATE_COUNTERS(tensor2, 0)\n+    TH_TENSOR_APPLY_hasFinished = tensor_update_counters(ut1);\n+    TH_TENSOR_APPLY_hasFinished = tensor_update_counters(ut2);\n   }\n-  if(tensor1_counter != NULL)\n-    delete [] tensor1_counter;\n-  if(tensor2_counter != NULL)\n-    delete [] tensor2_counter;\n }\n \n /*\n   Apply a pointwise operator to two tensors.\n \n-  The calling convention for op is a function/functor that takes takes two references to\n-  type scalar; at least one of these references should be non-const in order to write the output.\n-  For example, to compute a = b^2, op would be of the form:\n+  The calling convention for op is a function/functor that takes takes two\n+  references to type scalar; at least one of these references should be\n+  non-const in order to write the output. For example, to compute a = b^2, op\n+  would be of the form:\n   [](scalar &a_val, const scalar &b_val) { a_val = b_val * b_val; };\n */\n-template<typename scalar1, typename scalar2, typename Op>\n+template <typename scalar1, typename scalar2, typename Op>\n void CPU_tensor_apply2(Tensor tensor1, Tensor tensor2, Op op) {\n   CPU_tensor_apply2_dim<scalar1, scalar2, Op>(tensor1, tensor2, -1, op);\n }\n \n-template<typename scalar1, typename scalar2, typename scalar3, typename Op>\n-void CPU_tensor_apply3_dim(Tensor &tensor1, Tensor& tensor2, Tensor& tensor3, int64_t dim, Op op) {\n+template <typename scalar1, typename scalar2, typename scalar3, typename Op>\n+void CPU_tensor_apply3_dim(\n+    Tensor& tensor1,\n+    Tensor& tensor2,\n+    Tensor& tensor3,\n+    int64_t dim,\n+    Op op) {\n   checkBackend(\"CPU_tensor_apply3\", {tensor1, tensor2, tensor3}, Backend::CPU);\n-  bool TH_TENSOR_APPLY_hasFinished = false;\n-  int64_t TH_TENSOR_dim_index = 0;\n-  __ATH_TENSOR_APPLYX_PREAMBLE(scalar1, tensor1, dim, 1)\n-  __ATH_TENSOR_APPLYX_PREAMBLE(scalar2, tensor2, dim, 1)\n-  __ATH_TENSOR_APPLYX_PREAMBLE(scalar3, tensor3, dim, 1)\n+  util_tensor<scalar1> ut1(tensor1, dim, true);\n+  util_tensor<scalar2> ut2(tensor2, dim, true);\n+  util_tensor<scalar2> ut3(tensor3, dim, true);\n \n   int elements_equal = 1;\n   auto t1_numel = tensor1.numel();\n   auto t2_numel = tensor2.numel();\n   auto t3_numel = tensor3.numel();\n-  if(t1_numel!= t2_numel) {\n+  if (t1_numel != t2_numel) {\n     elements_equal = 0;\n-  } else if(t1_numel != t3_numel) {\n+  } else if (t1_numel != t3_numel) {\n     elements_equal = 0;\n   }\n   if (elements_equal == 0) {", "path": "aten/src/ATen/CPUApplyUtils.h", "position": null, "original_position": 343, "commit_id": "ca55c40ec722ecb64659682bdb81caa0cfb82e36", "original_commit_id": "3320a388c57cc148b0badef9bcdd2777ad6e7b89", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Do we really need those `if`s above? We could just do `if (t1_numel != t2_numel || t1_numel != t3_numel) { // error }`. This pattern could be improved in all the apply functions", "created_at": "2018-03-31T10:17:42Z", "updated_at": "2018-11-23T15:41:26Z", "html_url": "https://github.com/pytorch/pytorch/pull/6119#discussion_r178428647", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/6119", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/178428647"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/6119#discussion_r178428647"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/6119"}}, "body_html": "<p>Do we really need those <code>if</code>s above? We could just do <code>if (t1_numel != t2_numel || t1_numel != t3_numel) { // error }</code>. This pattern could be improved in all the apply functions</p>", "body_text": "Do we really need those ifs above? We could just do if (t1_numel != t2_numel || t1_numel != t3_numel) { // error }. This pattern could be improved in all the apply functions"}