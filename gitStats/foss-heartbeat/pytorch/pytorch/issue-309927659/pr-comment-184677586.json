{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/184677586", "pull_request_review_id": 115924993, "id": 184677586, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NDY3NzU4Ng==", "diff_hunk": "@@ -287,22 +287,62 @@ def check_non_contiguous(shape, dtype):\n         check_non_contiguous((5, 7), torch.float)\n         check_non_contiguous((1024,), torch.float)\n \n+        # If size(dim) == 1, stride(dim) is not defined.\n+        # The code needs to be able to handle this\n+        def check_contiguous_size1(dtype):\n+            contig = torch.randn((5, 100), dtype=dtype)\n+            contig = contig[:1, :50]\n+            contig2 = torch.empty(contig.size(), dtype=dtype)\n+            contig2.copy_(contig)\n+            self.assertTrue(contig.is_contiguous())\n+            self.assertTrue(contig2.is_contiguous())\n+            self.assertEqual(torchfn(contig), torchfn(contig2), 'contiguous size1')\n+\n+        check_contiguous_size1(torch.double)\n+        check_contiguous_size1(torch.float)\n+\n+        def check_contiguous_size1_largedim(dtype):\n+            contig = torch.randn((5, 2, 3, 1, 4, 5, 3, 2, 1, 2, 3, 4), dtype=dtype)\n+            contig = contig[:1, :, :, :, :, :, :, :, :, :, :, :]\n+            contig2 = torch.empty(contig.size(), dtype=dtype)\n+            contig2.copy_(contig)\n+            self.assertTrue(contig.is_contiguous())\n+            self.assertTrue(contig2.is_contiguous())\n+            self.assertEqual(torchfn(contig), torchfn(contig2), 'contiguous size1')\n+\n+        check_contiguous_size1_largedim(torch.double)\n+        check_contiguous_size1_largedim(torch.float)\n+\n         def check_large(dtype):\n             input = torch.randn(1024, 512, dtype=dtype)\n             actual = torchfn(input)\n             expected = torch.stack([torchfn(slice) for slice in input])\n+            for i in range(1024):\n+                for j in range(512):\n+                    if actual[i, j] != expected[i, j]:\n+                        break", "path": "test/test_torch.py", "position": null, "original_position": 46, "commit_id": "ca55c40ec722ecb64659682bdb81caa0cfb82e36", "original_commit_id": "953f35ee873ca496b1e3c500e3e42e4550eae879", "user": {"login": "cpuhrsch", "id": 1716488, "node_id": "MDQ6VXNlcjE3MTY0ODg=", "avatar_url": "https://avatars1.githubusercontent.com/u/1716488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cpuhrsch", "html_url": "https://github.com/cpuhrsch", "followers_url": "https://api.github.com/users/cpuhrsch/followers", "following_url": "https://api.github.com/users/cpuhrsch/following{/other_user}", "gists_url": "https://api.github.com/users/cpuhrsch/gists{/gist_id}", "starred_url": "https://api.github.com/users/cpuhrsch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cpuhrsch/subscriptions", "organizations_url": "https://api.github.com/users/cpuhrsch/orgs", "repos_url": "https://api.github.com/users/cpuhrsch/repos", "events_url": "https://api.github.com/users/cpuhrsch/events{/privacy}", "received_events_url": "https://api.github.com/users/cpuhrsch/received_events", "type": "User", "site_admin": false}, "body": "This is an oversight on my end (I used that for debugging).", "created_at": "2018-04-27T12:52:16Z", "updated_at": "2018-11-23T15:43:19Z", "html_url": "https://github.com/pytorch/pytorch/pull/6119#discussion_r184677586", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/6119", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/184677586"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/6119#discussion_r184677586"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/6119"}}, "body_html": "<p>This is an oversight on my end (I used that for debugging).</p>", "body_text": "This is an oversight on my end (I used that for debugging).", "in_reply_to_id": 184659256}