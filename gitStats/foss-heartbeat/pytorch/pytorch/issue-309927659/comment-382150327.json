{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/382150327", "html_url": "https://github.com/pytorch/pytorch/pull/6119#issuecomment-382150327", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/6119", "id": 382150327, "node_id": "MDEyOklzc3VlQ29tbWVudDM4MjE1MDMyNw==", "user": {"login": "fmassa", "id": 9110200, "node_id": "MDQ6VXNlcjkxMTAyMDA=", "avatar_url": "https://avatars2.githubusercontent.com/u/9110200?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fmassa", "html_url": "https://github.com/fmassa", "followers_url": "https://api.github.com/users/fmassa/followers", "following_url": "https://api.github.com/users/fmassa/following{/other_user}", "gists_url": "https://api.github.com/users/fmassa/gists{/gist_id}", "starred_url": "https://api.github.com/users/fmassa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fmassa/subscriptions", "organizations_url": "https://api.github.com/users/fmassa/orgs", "repos_url": "https://api.github.com/users/fmassa/repos", "events_url": "https://api.github.com/users/fmassa/events{/privacy}", "received_events_url": "https://api.github.com/users/fmassa/received_events", "type": "User", "site_admin": false}, "created_at": "2018-04-17T21:19:15Z", "updated_at": "2018-04-17T21:19:15Z", "author_association": "MEMBER", "body_html": "<p>Nice!<br>\nAbout sorting the strides, in numpy, we don't guarantee that the result of an operation will be a contiguous tensor. For example, adding <code>a.t() + 1</code> will return a transposed tensor, so that iterating over it is very fast. This is different from what we currently do in pytorch (where the result of all operations are contiguous), but might be worth considering if it could bring significant speedup (I'm not sure though). One drawback is that we would need to adapt the GPU kernels to behave accordingly...</p>", "body_text": "Nice!\nAbout sorting the strides, in numpy, we don't guarantee that the result of an operation will be a contiguous tensor. For example, adding a.t() + 1 will return a transposed tensor, so that iterating over it is very fast. This is different from what we currently do in pytorch (where the result of all operations are contiguous), but might be worth considering if it could bring significant speedup (I'm not sure though). One drawback is that we would need to adapt the GPU kernels to behave accordingly...", "body": "Nice!\r\nAbout sorting the strides, in numpy, we don't guarantee that the result of an operation will be a contiguous tensor. For example, adding `a.t() + 1` will return a transposed tensor, so that iterating over it is very fast. This is different from what we currently do in pytorch (where the result of all operations are contiguous), but might be worth considering if it could bring significant speedup (I'm not sure though). One drawback is that we would need to adapt the GPU kernels to behave accordingly..."}