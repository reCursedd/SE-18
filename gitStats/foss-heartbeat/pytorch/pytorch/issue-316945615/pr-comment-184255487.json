{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/184255487", "pull_request_review_id": 115412903, "id": 184255487, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NDI1NTQ4Nw==", "diff_hunk": "@@ -106,4 +107,65 @@ void Function::set_up_context_edge(\n     backward_eval->forward_ctx_select = ctx_select;\n }\n \n+/*\n+ * Fix for #5534: prevent stack overflow on deletion of deep computation graph\n+ *\n+ * Sometimes one can end up with a very big computation graph of Functions\n+ * and Edges. Each std::shared_ptr<Function> contains a list of Edge, and\n+ * each Edge contains a std::shared_ptr<Function>. Deleting a\n+ * std::shared_ptr<Function> can trigger the recursive deletion of other\n+ * std::shared_ptr<Function>'s: this can stack overflow if the graph\n+ * is deep enough. Here is an example of such a graph:\n+ *\n+ * shared_ptr<Function> -> Edge -> shared_ptr<Function> -> Edge -> ... -> shared_ptr<Function>\n+ *\n+ * The solution here is to use a custom deleter with each\n+ * std::shared_ptr<Function>. The custom deleter keeps track of how many\n+ * nested deleters it is in. When this number exceeds the maximum allowed\n+ * depth, the Function* to be deleted are accumulated in a per-thread\n+ * delete queue and handled by one of the deleters.\n+ */\n+thread_local std::deque<Function*> kDeleteFunctionQueue;\n+\n+constexpr size_t kDeleteFunctionMaxRecursionDepth = 10000;", "path": "torch/csrc/autograd/function.cpp", "position": null, "original_position": 32, "commit_id": "92adc80cb73a1748ab2cb0cbe4eb50df38b7b051", "original_commit_id": "420314aa25d1527efa284b4647685619a359f8fb", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "Yeah, and let's record down the measurements in case someone else needs to revisit in the future.", "created_at": "2018-04-26T02:24:22Z", "updated_at": "2018-11-23T15:43:12Z", "html_url": "https://github.com/pytorch/pytorch/pull/6873#discussion_r184255487", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/6873", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/184255487"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/6873#discussion_r184255487"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/6873"}}, "body_html": "<p>Yeah, and let's record down the measurements in case someone else needs to revisit in the future.</p>", "body_text": "Yeah, and let's record down the measurements in case someone else needs to revisit in the future.", "in_reply_to_id": 184179172}