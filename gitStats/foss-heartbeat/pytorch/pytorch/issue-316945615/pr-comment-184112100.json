{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/184112100", "pull_request_review_id": 115240618, "id": 184112100, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NDExMjEwMA==", "diff_hunk": "@@ -106,4 +107,66 @@ void Function::set_up_context_edge(\n     backward_eval->forward_ctx_select = ctx_select;\n }\n \n+/*\n+ * Fix for #5534: prevent stack overflow on deletion of deep computation graph\n+ *\n+ * Sometimes one can end up with a very big computation graph of Functions\n+ * and Edges. Each std::shared_ptr<Function> contains a list of Edge, and\n+ * each Edge contains a std::shared_ptr<Function>. Deleting a\n+ * std::shared_ptr<Function> can trigger the recursive deletion of other\n+ * std::shared_ptr<Function>'s: this can stack overflow if the graph\n+ * is deep enough. Here is an example of such a graph:\n+ *\n+ * shared_ptr<Function> -> Edge -> shared_ptr<Function> -> Edge -> ... -> shared_ptr<Function>\n+ *\n+ * The solution here is to use a custom deleter with each\n+ * std::shared_ptr<Function>. The custom deleter keeps track of how many\n+ * nested deleters it is in. When this number exceeds the maximum allowed\n+ * depth, the Function* to be deleted are accumulated in a per-thread\n+ * delete queue and handled by one of the deleters.\n+ */\n+using function_queue = std::deque<Function*>;\n+thread_local function_queue kDeleteFunctionQueue;\n+\n+const ssize_t kDeleteFunctionMaxRecursionDepth = 50000;\n+thread_local ssize_t kDeleteFunctionRecursionDepth = 0;", "path": "torch/csrc/autograd/function.cpp", "position": null, "original_position": 34, "commit_id": "92adc80cb73a1748ab2cb0cbe4eb50df38b7b051", "original_commit_id": "3cc9eca89964c3270eb141e94648d1f34d59c182", "user": {"login": "zou3519", "id": 5652049, "node_id": "MDQ6VXNlcjU2NTIwNDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/5652049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zou3519", "html_url": "https://github.com/zou3519", "followers_url": "https://api.github.com/users/zou3519/followers", "following_url": "https://api.github.com/users/zou3519/following{/other_user}", "gists_url": "https://api.github.com/users/zou3519/gists{/gist_id}", "starred_url": "https://api.github.com/users/zou3519/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zou3519/subscriptions", "organizations_url": "https://api.github.com/users/zou3519/orgs", "repos_url": "https://api.github.com/users/zou3519/repos", "events_url": "https://api.github.com/users/zou3519/events{/privacy}", "received_events_url": "https://api.github.com/users/zou3519/received_events", "type": "User", "site_admin": false}, "body": "Oops, good catch", "created_at": "2018-04-25T15:50:15Z", "updated_at": "2018-11-23T15:43:10Z", "html_url": "https://github.com/pytorch/pytorch/pull/6873#discussion_r184112100", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/6873", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/184112100"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/6873#discussion_r184112100"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/6873"}}, "body_html": "<p>Oops, good catch</p>", "body_text": "Oops, good catch", "in_reply_to_id": 183663520}