{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/184162108", "pull_request_review_id": 115300513, "id": 184162108, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NDE2MjEwOA==", "diff_hunk": "@@ -93,7 +93,7 @@\n \"\"\")\n \n ASSIGN_GRAD_FN = CodeTemplate(\"\"\"\\\n-grad_fn = std::make_shared<${op}>(${op_ctor});\n+grad_fn = std::shared_ptr<${op}>(new ${op}(${op_ctor}), deleteFunction);", "path": "tools/autograd/gen_variable_type.py", "position": 5, "original_position": 5, "commit_id": "92adc80cb73a1748ab2cb0cbe4eb50df38b7b051", "original_commit_id": "3cc9eca89964c3270eb141e94648d1f34d59c182", "user": {"login": "zou3519", "id": 5652049, "node_id": "MDQ6VXNlcjU2NTIwNDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/5652049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zou3519", "html_url": "https://github.com/zou3519", "followers_url": "https://api.github.com/users/zou3519/followers", "following_url": "https://api.github.com/users/zou3519/following{/other_user}", "gists_url": "https://api.github.com/users/zou3519/gists{/gist_id}", "starred_url": "https://api.github.com/users/zou3519/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zou3519/subscriptions", "organizations_url": "https://api.github.com/users/zou3519/orgs", "repos_url": "https://api.github.com/users/zou3519/repos", "events_url": "https://api.github.com/users/zou3519/events{/privacy}", "received_events_url": "https://api.github.com/users/zou3519/received_events", "type": "User", "site_admin": false}, "body": "@apaszke I'm not sure it's necessary to update the deleter for Python autograd functions.\r\n\r\nIn particular, I'm unable to trigger a stack overflow using python functions ([script here](https://gist.github.com/zou3519/654ef2c6db9a8286afe8a50de36314b3)), but I'm not sure why. The data of a `PyFunction` gets freed when its underlying `THPFunction*` gets freed through Python refcounting.\r\n\r\nYou mentioned in #5534 that Python does something similar -- does Python already queue its objects for deletion to prevent stack overflowing?", "created_at": "2018-04-25T18:25:46Z", "updated_at": "2018-11-23T15:43:10Z", "html_url": "https://github.com/pytorch/pytorch/pull/6873#discussion_r184162108", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/6873", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/184162108"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/6873#discussion_r184162108"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/6873"}}, "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=4583066\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/apaszke\">@apaszke</a> I'm not sure it's necessary to update the deleter for Python autograd functions.</p>\n<p>In particular, I'm unable to trigger a stack overflow using python functions (<a href=\"https://gist.github.com/zou3519/654ef2c6db9a8286afe8a50de36314b3\">script here</a>), but I'm not sure why. The data of a <code>PyFunction</code> gets freed when its underlying <code>THPFunction*</code> gets freed through Python refcounting.</p>\n<p>You mentioned in <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"301907292\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/5534\" data-hovercard-type=\"issue\" data-hovercard-url=\"/pytorch/pytorch/issues/5534/hovercard\" href=\"https://github.com/pytorch/pytorch/issues/5534\">#5534</a> that Python does something similar -- does Python already queue its objects for deletion to prevent stack overflowing?</p>", "body_text": "@apaszke I'm not sure it's necessary to update the deleter for Python autograd functions.\nIn particular, I'm unable to trigger a stack overflow using python functions (script here), but I'm not sure why. The data of a PyFunction gets freed when its underlying THPFunction* gets freed through Python refcounting.\nYou mentioned in #5534 that Python does something similar -- does Python already queue its objects for deletion to prevent stack overflowing?", "in_reply_to_id": 183663945}