{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/184429199", "pull_request_review_id": 115624898, "id": 184429199, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NDQyOTE5OQ==", "diff_hunk": "@@ -106,4 +107,65 @@ void Function::set_up_context_edge(\n     backward_eval->forward_ctx_select = ctx_select;\n }\n \n+/*\n+ * Fix for #5534: prevent stack overflow on deletion of deep computation graph\n+ *\n+ * Sometimes one can end up with a very big computation graph of Functions\n+ * and Edges. Each std::shared_ptr<Function> contains a list of Edge, and\n+ * each Edge contains a std::shared_ptr<Function>. Deleting a\n+ * std::shared_ptr<Function> can trigger the recursive deletion of other\n+ * std::shared_ptr<Function>'s: this can stack overflow if the graph\n+ * is deep enough. Here is an example of such a graph:\n+ *\n+ * shared_ptr<Function> -> Edge -> shared_ptr<Function> -> Edge -> ... -> shared_ptr<Function>\n+ *\n+ * The solution here is to use a custom deleter with each\n+ * std::shared_ptr<Function>. The custom deleter keeps track of how many\n+ * nested deleters it is in. When this number exceeds the maximum allowed\n+ * depth, the Function* to be deleted are accumulated in a per-thread\n+ * delete queue and handled by one of the deleters.\n+ */\n+thread_local std::deque<Function*> kDeleteFunctionQueue;\n+\n+constexpr size_t kDeleteFunctionMaxRecursionDepth = 10000;\n+thread_local size_t kDeleteFunctionRecursionDepth = 0;\n+\n+struct RecursionDepthCounter {\n+ public:\n+  explicit RecursionDepthCounter() {\n+    ++kDeleteFunctionRecursionDepth;\n+  }\n+  ~RecursionDepthCounter() {\n+    --kDeleteFunctionRecursionDepth;\n+  }\n+\n+  size_t value() {\n+    return kDeleteFunctionRecursionDepth;\n+  }\n+};\n+\n+void deleteFunction(Function* function) {\n+  RecursionDepthCounter recursion_depth;\n+\n+  if (recursion_depth.value() > kDeleteFunctionMaxRecursionDepth) {\n+    kDeleteFunctionQueue.push_back(function);\n+    return;\n+  }\n+\n+  delete function;\n+\n+  if (kDeleteFunctionQueue.size() == 0) {\n+    return;\n+  }\n+  if (recursion_depth.value() != kDeleteFunctionMaxRecursionDepth) {\n+    AT_ERROR(\"Only one deleter per thread should be able to process \"\n+             \"the delete queue. Please open an issue.\");\n+  }\n+  while (kDeleteFunctionQueue.size() > 0) {\n+    auto queued_function = kDeleteFunctionQueue.front();\n+    kDeleteFunctionQueue.pop_front();\n+    delete queued_function;", "path": "torch/csrc/autograd/function.cpp", "position": null, "original_position": 69, "commit_id": "92adc80cb73a1748ab2cb0cbe4eb50df38b7b051", "original_commit_id": "2bc1f600394d258546418040c895dafe7c972cbd", "user": {"login": "zou3519", "id": 5652049, "node_id": "MDQ6VXNlcjU2NTIwNDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/5652049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zou3519", "html_url": "https://github.com/zou3519", "followers_url": "https://api.github.com/users/zou3519/followers", "following_url": "https://api.github.com/users/zou3519/following{/other_user}", "gists_url": "https://api.github.com/users/zou3519/gists{/gist_id}", "starred_url": "https://api.github.com/users/zou3519/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zou3519/subscriptions", "organizations_url": "https://api.github.com/users/zou3519/orgs", "repos_url": "https://api.github.com/users/zou3519/repos", "events_url": "https://api.github.com/users/zou3519/events{/privacy}", "received_events_url": "https://api.github.com/users/zou3519/received_events", "type": "User", "site_admin": false}, "body": "Thanks @ezyang for the catch! Nope, I didn't think this through -- I'll change it to be a stack to make it consistent with the order in which the destructors get called normally", "created_at": "2018-04-26T15:21:22Z", "updated_at": "2018-11-23T15:43:15Z", "html_url": "https://github.com/pytorch/pytorch/pull/6873#discussion_r184429199", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/6873", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/184429199"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/6873#discussion_r184429199"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/6873"}}, "body_html": "<p>Thanks <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=13564\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ezyang\">@ezyang</a> for the catch! Nope, I didn't think this through -- I'll change it to be a stack to make it consistent with the order in which the destructors get called normally</p>", "body_text": "Thanks @ezyang for the catch! Nope, I didn't think this through -- I'll change it to be a stack to make it consistent with the order in which the destructors get called normally", "in_reply_to_id": 184256157}