{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/234337566", "pull_request_review_id": 175967670, "id": 234337566, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzNDMzNzU2Ng==", "diff_hunk": "@@ -1,24 +1,95 @@\n #pragma once\n \n-#include <ATen/core/ATenGeneral.h>\n #include <stdint.h>\n+#include <memory>\n+#include <mutex>\n+#include <random>\n+#include <deque>\n+#include <atomic>\n+#include <typeinfo>\n+#include <utility>\n+\n+#include \"c10/util/Exception.h\"\n+#include \"ATen/core/Backend.h\"\n+#include \"ATen/detail/CUDAHooksInterface.h\"\n+\n+/*\n+* Generator note.\n+* A Pseudo Random Number Generator (PRNG) is an engine that uses an algorithm to \n+* generate a seemingly random sequence of numbers, that may be later be used in creating \n+* a random distribution. Such an engine almost always maintains a state and requires a\n+* seed to start off the creation of random numbers. Often times, users have\n+* encountered that it could be beneficial to be able to create, retain, and destroy \n+* generator states and also be able to have control over the seed value.\n+*\n+* A Generator in ATen gives users the ability to read, write and modify a PRNG engine.\n+* For instance, it does so by letting users seed a PRNG engine, get/set the state of the\n+* engine, etc.\n+*\n+* By default, there is one generator state per device, and a device's generator state is \n+* lazily created. A user can use the torch.Generator() api to create their own generator.\n+*/\n \n namespace at {\n \n+struct Generator;\n+\n+/*\n+* A GeneratorState object contains a generator engine and other state variables.\n+* It also has copy and assign constructors so that generator states can be deep copied.\n+*/\n+struct CAFFE2_API GeneratorState {\n+  GeneratorState() = default;\n+  ~GeneratorState();\n+  GeneratorState(const GeneratorState& other);\n+  GeneratorState& operator=(const GeneratorState& other);", "path": "aten/src/ATen/core/Generator.h", "position": null, "original_position": 46, "commit_id": "a4279c73de70eb5a87260df7f5ede98c05f4e320", "original_commit_id": "0c872f0608b457c742806603fdcca11f63e459b7", "user": {"login": "syed-ahmed", "id": 8906225, "node_id": "MDQ6VXNlcjg5MDYyMjU=", "avatar_url": "https://avatars1.githubusercontent.com/u/8906225?v=4", "gravatar_id": "", "url": "https://api.github.com/users/syed-ahmed", "html_url": "https://github.com/syed-ahmed", "followers_url": "https://api.github.com/users/syed-ahmed/followers", "following_url": "https://api.github.com/users/syed-ahmed/following{/other_user}", "gists_url": "https://api.github.com/users/syed-ahmed/gists{/gist_id}", "starred_url": "https://api.github.com/users/syed-ahmed/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/syed-ahmed/subscriptions", "organizations_url": "https://api.github.com/users/syed-ahmed/orgs", "repos_url": "https://api.github.com/users/syed-ahmed/repos", "events_url": "https://api.github.com/users/syed-ahmed/events{/privacy}", "received_events_url": "https://api.github.com/users/syed-ahmed/received_events", "type": "User", "site_admin": false}, "body": "philox_offset_per_thread is atomic because it contains the incremented offset for a future kernel launch and hence by having it atomic, we avoid having wrong offsets in a multi-threaded situation, when one kernel increments the offset. I have a note in the incrementPhiloxOffset function about it: \r\n\r\n```\r\n// Each kernel using philox has to sensibly increment offset for future users of philox. So it gets the \r\n// \"old\" value for itself (before atomic add), and tells subsequent users which offset they should use, \r\n// since only the kernel knows how many randoms it intends to generate.\r\n```\r\n\r\nHowever, I just realized I don't need it to be atomic since I'm using a lock for the `incrementPhiloxSeed` function. Hence, will move forward and remove the copy constructors.", "created_at": "2018-11-16T20:26:04Z", "updated_at": "2018-11-23T15:55:04Z", "html_url": "https://github.com/pytorch/pytorch/pull/13070#discussion_r234337566", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/13070", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/234337566"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/13070#discussion_r234337566"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/13070"}}, "body_html": "<p>philox_offset_per_thread is atomic because it contains the incremented offset for a future kernel launch and hence by having it atomic, we avoid having wrong offsets in a multi-threaded situation, when one kernel increments the offset. I have a note in the incrementPhiloxOffset function about it:</p>\n<pre><code>// Each kernel using philox has to sensibly increment offset for future users of philox. So it gets the \n// \"old\" value for itself (before atomic add), and tells subsequent users which offset they should use, \n// since only the kernel knows how many randoms it intends to generate.\n</code></pre>\n<p>However, I just realized I don't need it to be atomic since I'm using a lock for the <code>incrementPhiloxSeed</code> function. Hence, will move forward and remove the copy constructors.</p>", "body_text": "philox_offset_per_thread is atomic because it contains the incremented offset for a future kernel launch and hence by having it atomic, we avoid having wrong offsets in a multi-threaded situation, when one kernel increments the offset. I have a note in the incrementPhiloxOffset function about it:\n// Each kernel using philox has to sensibly increment offset for future users of philox. So it gets the \n// \"old\" value for itself (before atomic add), and tells subsequent users which offset they should use, \n// since only the kernel knows how many randoms it intends to generate.\n\nHowever, I just realized I don't need it to be atomic since I'm using a lock for the incrementPhiloxSeed function. Hence, will move forward and remove the copy constructors.", "in_reply_to_id": 234061689}