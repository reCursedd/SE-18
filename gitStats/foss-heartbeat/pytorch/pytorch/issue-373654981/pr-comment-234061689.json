{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/234061689", "pull_request_review_id": 175623524, "id": 234061689, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzNDA2MTY4OQ==", "diff_hunk": "@@ -1,24 +1,95 @@\n #pragma once\n \n-#include <ATen/core/ATenGeneral.h>\n #include <stdint.h>\n+#include <memory>\n+#include <mutex>\n+#include <random>\n+#include <deque>\n+#include <atomic>\n+#include <typeinfo>\n+#include <utility>\n+\n+#include \"c10/util/Exception.h\"\n+#include \"ATen/core/Backend.h\"\n+#include \"ATen/detail/CUDAHooksInterface.h\"\n+\n+/*\n+* Generator note.\n+* A Pseudo Random Number Generator (PRNG) is an engine that uses an algorithm to \n+* generate a seemingly random sequence of numbers, that may be later be used in creating \n+* a random distribution. Such an engine almost always maintains a state and requires a\n+* seed to start off the creation of random numbers. Often times, users have\n+* encountered that it could be beneficial to be able to create, retain, and destroy \n+* generator states and also be able to have control over the seed value.\n+*\n+* A Generator in ATen gives users the ability to read, write and modify a PRNG engine.\n+* For instance, it does so by letting users seed a PRNG engine, get/set the state of the\n+* engine, etc.\n+*\n+* By default, there is one generator state per device, and a device's generator state is \n+* lazily created. A user can use the torch.Generator() api to create their own generator.\n+*/\n \n namespace at {\n \n+struct Generator;\n+\n+/*\n+* A GeneratorState object contains a generator engine and other state variables.\n+* It also has copy and assign constructors so that generator states can be deep copied.\n+*/\n+struct CAFFE2_API GeneratorState {\n+  GeneratorState() = default;\n+  ~GeneratorState();\n+  GeneratorState(const GeneratorState& other);\n+  GeneratorState& operator=(const GeneratorState& other);", "path": "aten/src/ATen/core/Generator.h", "position": null, "original_position": 46, "commit_id": "a4279c73de70eb5a87260df7f5ede98c05f4e320", "original_commit_id": "0c872f0608b457c742806603fdcca11f63e459b7", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "I strongly encourage you to work out how to get the default constructor generated for you automatically. I'm not sure if the fact that you want a copy constructor (I guess, to clone the GeneratorState) means it was wrong to, e.g., make `philox_offset_per_thread` atomic. I'm not sure why it is atomic; it's not explained in the PR description.", "created_at": "2018-11-16T01:02:46Z", "updated_at": "2018-11-23T15:54:59Z", "html_url": "https://github.com/pytorch/pytorch/pull/13070#discussion_r234061689", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/13070", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/234061689"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/13070#discussion_r234061689"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/13070"}}, "body_html": "<p>I strongly encourage you to work out how to get the default constructor generated for you automatically. I'm not sure if the fact that you want a copy constructor (I guess, to clone the GeneratorState) means it was wrong to, e.g., make <code>philox_offset_per_thread</code> atomic. I'm not sure why it is atomic; it's not explained in the PR description.</p>", "body_text": "I strongly encourage you to work out how to get the default constructor generated for you automatically. I'm not sure if the fact that you want a copy constructor (I guess, to clone the GeneratorState) means it was wrong to, e.g., make philox_offset_per_thread atomic. I'm not sure why it is atomic; it's not explained in the PR description."}