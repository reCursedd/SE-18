{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/234064563", "pull_request_review_id": 175627077, "id": 234064563, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzNDA2NDU2Mw==", "diff_hunk": "@@ -0,0 +1,316 @@\n+#include \"ATen/core/Generator.h\"\n+\n+namespace at {\n+\n+/*\n+* GeneratorState copy and assign constructor implementations\n+*/\n+GeneratorState::GeneratorState(const GeneratorState& other) {\n+  this->device = other.device;\n+  this->current_seed = other.current_seed;\n+  this->device_type = other.device_type;\n+  this->philox_offset_per_thread.exchange(other.philox_offset_per_thread);\n+  new (&(this->cpu_engine)) std::mt19937_64(other.cpu_engine);\n+}\n+\n+GeneratorState& GeneratorState::operator=(const GeneratorState& other) {\n+  if(&other == this) return *this;\n+  this->device = other.device;\n+  this->current_seed = other.current_seed;\n+  this->device_type = other.device_type;\n+  this->philox_offset_per_thread.exchange(other.philox_offset_per_thread);\n+  new (&(this->cpu_engine)) std::mt19937_64(other.cpu_engine);\n+  return *this;\n+}\n+\n+/*\n+* Internal Generator API\n+*/\n+namespace detail {\n+\n+// Global generator state and constants\n+static std::once_flag cpu_device_flag;\n+static GeneratorState* default_gen_state_cpu;\n+static std::unique_ptr<Generator> default_gen_cpu;\n+\n+static int64_t num_gpus = -1;\n+static std::once_flag num_gpu_init_flag;\n+static std::deque<std::once_flag> cuda_device_flags;\n+static std::vector<GeneratorState*> default_gen_states_cuda;\n+static std::vector<std::unique_ptr<Generator>> default_gens_cuda;\n+\n+/* \n+* Populates global values and creates a generator for CPU.\n+* Note: the generator on CPU is a 64 bit Mersenne Twister Engine.\n+* Warning: this function must only be called once!\n+*/\n+static void initGlobalCPUGeneratorState(){\n+  default_gen_state_cpu = new GeneratorState();", "path": "aten/src/ATen/core/Generator.cpp", "position": null, "original_position": 48, "commit_id": "a4279c73de70eb5a87260df7f5ede98c05f4e320", "original_commit_id": "0c872f0608b457c742806603fdcca11f63e459b7", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "We've got `c10::guts::make_unique`, please use it :)", "created_at": "2018-11-16T01:21:56Z", "updated_at": "2018-11-23T15:54:59Z", "html_url": "https://github.com/pytorch/pytorch/pull/13070#discussion_r234064563", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/13070", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/234064563"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/13070#discussion_r234064563"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/13070"}}, "body_html": "<p>We've got <code>c10::guts::make_unique</code>, please use it :)</p>", "body_text": "We've got c10::guts::make_unique, please use it :)"}