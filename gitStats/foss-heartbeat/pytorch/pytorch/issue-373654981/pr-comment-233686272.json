{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/233686272", "pull_request_review_id": 175157819, "id": 233686272, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMzY4NjI3Mg==", "diff_hunk": "@@ -148,51 +134,84 @@ void bernoulli_scalar_cuda_kernel(\n   // The template argument `4` below indicates that we want to operate on four\n   // element at each time. See NOTE [ CUDA_tensor_applyN helpers ] for details.\n   at::cuda::CUDA_tensor_apply1<scalar_t, 4>(\n-      ret, [seeds, p] __device__(\n-        int n, scalar_t& v1, scalar_t& v2, scalar_t& v3, scalar_t& v4) {\n-        curandStatePhilox4_32_10_t state;\n-        curand_init(\n-            seeds.first,\n-            blockIdx.x * blockDim.x + threadIdx.x,\n-            seeds.second,\n-            &state);\n-        float4 rand = curand_uniform4(&state);\n-        switch (n) {\n-          case 4: {\n-            v4 = static_cast<scalar_t>(rand.w <= p);\n-            // fallthrough\n-          }\n-          case 3: {\n-            v3 = static_cast<scalar_t>(rand.z <= p);\n-            // fallthrough\n-          }\n-          case 2: {\n-            v2 = static_cast<scalar_t>(rand.y <= p);\n-            // fallthrough\n-          }\n-          case 1: {\n-            v1 = static_cast<scalar_t>(rand.x <= p);\n-          }\n+      ret, \n+      [seeds, p] __device__(\n+      int n, scalar_t& v1, scalar_t& v2, scalar_t& v3, scalar_t& v4) {\n+      at::cuda::Philox4_32_10 engine(\n+                                seeds.first,\n+                                blockIdx.x * blockDim.x + threadIdx.x,\n+                                seeds.second);\n+      auto w = at::cuda::standard_uniform_distribution(engine);", "path": "aten/src/ATen/native/cuda/Distributions.cu", "position": null, "original_position": 183, "commit_id": "a4279c73de70eb5a87260df7f5ede98c05f4e320", "original_commit_id": "992d302ff90714182d533472c2a9f090ad79d3d8", "user": {"login": "ngimel", "id": 15841449, "node_id": "MDQ6VXNlcjE1ODQxNDQ5", "avatar_url": "https://avatars3.githubusercontent.com/u/15841449?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ngimel", "html_url": "https://github.com/ngimel", "followers_url": "https://api.github.com/users/ngimel/followers", "following_url": "https://api.github.com/users/ngimel/following{/other_user}", "gists_url": "https://api.github.com/users/ngimel/gists{/gist_id}", "starred_url": "https://api.github.com/users/ngimel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ngimel/subscriptions", "organizations_url": "https://api.github.com/users/ngimel/orgs", "repos_url": "https://api.github.com/users/ngimel/repos", "events_url": "https://api.github.com/users/ngimel/events{/privacy}", "received_events_url": "https://api.github.com/users/ngimel/received_events", "type": "User", "site_admin": false}, "body": "calling curand_uniform4 was necessary for curand before cuda10 (curand_uniform was unbearably slow), reproducing this workaround when you no longer need it is just obfuscating the code. cc @mcarilli", "created_at": "2018-11-15T01:39:45Z", "updated_at": "2018-11-23T15:54:53Z", "html_url": "https://github.com/pytorch/pytorch/pull/13070#discussion_r233686272", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/13070", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/233686272"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/13070#discussion_r233686272"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/13070"}}, "body_html": "<p>calling curand_uniform4 was necessary for curand before cuda10 (curand_uniform was unbearably slow), reproducing this workaround when you no longer need it is just obfuscating the code. cc <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=7799218\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/mcarilli\">@mcarilli</a></p>", "body_text": "calling curand_uniform4 was necessary for curand before cuda10 (curand_uniform was unbearably slow), reproducing this workaround when you no longer need it is just obfuscating the code. cc @mcarilli"}