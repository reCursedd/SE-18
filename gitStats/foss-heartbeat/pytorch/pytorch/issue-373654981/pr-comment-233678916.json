{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/233678916", "pull_request_review_id": 175147402, "id": 233678916, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMzY3ODkxNg==", "diff_hunk": "@@ -0,0 +1,284 @@\n+#pragma once\n+\n+#include <math.h>\n+#include <stdint.h>\n+#include <cuda.h>\n+#include <c10/macros/Macros.h>\n+\n+namespace at {\n+namespace cuda {\n+\n+/*\n+* Philox Engine implementation\n+* Originally implemented in PyTorch's fusion compiler\n+* Refer to: https://ieeexplore.ieee.org/document/6114424\n+* for details regarding the engine.\n+*\n+* The Philox engine is currently used in CUDA distributions\n+* kernels as its random engine. \n+* \n+* It takes a seed value, a subsequeunce\n+* for starting the generation and an offset for the sequence.\n+*\n+* Think of this engine as an algorithm producing a huge array. We are \n+* parallelizing this array by partitioning the huge array and assigning \n+* a thread index to each partition. In other words, each seed value \n+* (there are 2^64 possible seed values) gives a sub array of size \n+* 2^128 (each element in that array is a 128 bit number). Reasoning\n+* behind the array being of size 2^128 is, there are 2^64 possible\n+* thread index value and there is an array of size 2^64 for each of\n+* those thread index. Hence 2^64 * 2^64 = 2^128 for each seed value.\n+*\n+* In short, this generator can produce 2^64 (seed values) * 2^128 (number\n+* of elements in an array given by a seed value) = 2^192 values.\n+*\n+* Arguments:\n+* seed:        Seed values could be any number from 0 to 2^64-1.\n+* subsequence: Subsequence is just the cuda thread indexing with:\n+*              - blockIdx.x * blockDim.x + threadIdx.x\n+* offset:      The offset variable in PhiloxEngine  decides how many 128-bit \n+*              random numbers to skip (i.e. how many groups of 4, 32-bit numbers to skip)\n+*              and hence really decides the total number of randoms that can be achieved \n+*              for the given subsequence.\n+*/\n+\n+class philox_engine {\n+public:\n+\n+  /*\n+  * Constructor\n+  */\n+  C10_DEVICE inline philox_engine(unsigned long long seed,\n+                                 unsigned long long subsequence,\n+                                 unsigned long long offset) {\n+    key.x = (unsigned int)seed;\n+    key.y = (unsigned int)(seed >> 32);\n+    counter = make_uint4(0, 0, 0, 0);\n+    counter.z = (unsigned int)(subsequence);\n+    counter.w = (unsigned int)(subsequence >> 32);\n+    STATE = 0;\n+    incr_n(offset);\n+  }\n+\n+  /*\n+  * Produces a unique 32-bit pseudo random number on every invocation\n+  */\n+  C10_DEVICE inline unsigned long operator()() {\n+    if(STATE == 0) {\n+      uint4 counter_ = counter;\n+      uint2 key_ = key;\n+      for(int i = 0; i < 9; i++) {\n+        counter_ = single_round(counter_, key_);\n+        key_.x += (kPhilox10A); key_.y += (kPhilox10B);\n+      }\n+      output = single_round(counter_, key_);\n+      incr();\n+    }\n+    unsigned long ret;\n+    switch(STATE) {\n+      case 0: ret = output.x; break;\n+      case 1: ret = output.y; break;\n+      case 2: ret = output.z; break;\n+      case 3: ret = output.w; break;\n+    }\n+    STATE = (STATE + 1) % 4;\n+    return ret;\n+  }\n+\n+  /*\n+  * Function that Skips N 128 bit numbers in a subsequence\n+  */\n+  C10_DEVICE inline void incr_n(unsigned long long n) {\n+    unsigned int nlo = (unsigned int)(n);\n+    unsigned int nhi = (unsigned int)(n >> 32);\n+    counter.x += nlo;\n+    if (counter.x < nlo) {\n+      // if overflow in x has occured, carry over to nhi\n+      unsigned int nhi_old = nhi;\n+      nhi++;\n+      counter.y += nhi;\n+      if(nhi_old <= nhi) {\n+        // if overflow in nhi has occured during carry over,\n+        // propagate that overflow to y and exit to increment z\n+        // otherwise return\n+        if (nhi <= counter.y) {\n+          return;\n+        }\n+      }\n+    } else {\n+      // if overflow in y has occured during addition,\n+      // exit to increment z\n+      // otherwise return\n+      counter.y += nhi;\n+      if (nhi <= counter.y) {\n+        return;\n+      }\n+    }\n+    if (++counter.z)\n+      return;\n+    ++counter.w;\n+  }\n+\n+  /*\n+  * Function that Skips one 128 bit number in a subsequence\n+  */\n+  C10_DEVICE inline void incr() {\n+    if (++counter.x)\n+      return;\n+    if (++counter.y)\n+      return;\n+    if (++counter.z) {\n+      return;\n+    }\n+    ++counter.w;\n+  }\n+\n+private:\n+  uint4 counter;\n+  uint4 output;\n+  uint2 key;\n+  unsigned int STATE;\n+\n+  C10_DEVICE unsigned int mulhilo32(unsigned int a, unsigned int b,\n+                                    unsigned int *result_high) {\n+    *result_high = __umulhi(a, b);\n+    return a*b;\n+  }\n+\n+  C10_DEVICE inline uint4 single_round(uint4 ctr, uint2 key) {\n+    unsigned int hi0;\n+    unsigned int hi1;\n+    unsigned int lo0 = mulhilo32(kPhiloxSA, ctr.x, &hi0);\n+    unsigned int lo1 = mulhilo32(kPhiloxSB, ctr.z, &hi1);\n+    uint4 ret = {hi1 ^ ctr.y ^ key.x, lo1, hi0 ^ ctr.w ^ key.y, lo0};\n+    return ret;\n+  }\n+  static const unsigned long kPhilox10A = 0x9E3779B9;\n+  static const unsigned long kPhilox10B = 0xBB67AE85;\n+  static const unsigned long kPhiloxSA = 0xD2511F53;\n+  static const unsigned long kPhiloxSB = 0xCD9E8D57;\n+};\n+\n+typedef philox_engine Philox4_32_10;\n+\n+/*\n+* Distribution implementations adapted from THRandom\n+* Note: These functions are currently here as stubs and may be\n+* removed in the future. There may be better ways of implementing \n+* them, especially for CUDA.\n+*/\n+\n+/*\n+* Produces a uniform distribution in the range [0,1) of type double\n+* Note: how to get a range of [0,1) from {0,1,..2^64-1}\n+* https://lemire.me/blog/2017/02/28/how-many-floating-point-numbers-are-in-the-interval-01/\n+*/\n+C10_DEVICE  __inline__ double standard_uniform_distribution(Philox4_32_10& engine) {\n+  const uint32_t random32_val = engine();\n+  double result = (random32_val & ((1ULL << 24) - 1)) * ::ldexp(1.0, -24);", "path": "aten/src/ATen/cuda/PhiloxRNGEngine.h", "position": null, "original_position": 178, "commit_id": "a4279c73de70eb5a87260df7f5ede98c05f4e320", "original_commit_id": "992d302ff90714182d533472c2a9f090ad79d3d8", "user": {"login": "ngimel", "id": 15841449, "node_id": "MDQ6VXNlcjE1ODQxNDQ5", "avatar_url": "https://avatars3.githubusercontent.com/u/15841449?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ngimel", "html_url": "https://github.com/ngimel", "followers_url": "https://api.github.com/users/ngimel/followers", "following_url": "https://api.github.com/users/ngimel/following{/other_user}", "gists_url": "https://api.github.com/users/ngimel/gists{/gist_id}", "starred_url": "https://api.github.com/users/ngimel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ngimel/subscriptions", "organizations_url": "https://api.github.com/users/ngimel/orgs", "repos_url": "https://api.github.com/users/ngimel/repos", "events_url": "https://api.github.com/users/ngimel/events{/privacy}", "received_events_url": "https://api.github.com/users/ngimel/received_events", "type": "User", "site_admin": false}, "body": "Why is this double? Do we have any benchmarks (not on V100, on something like 1080) showing that it is not a perf hit? Also, after you started with 32 bits of randomness, threw out 8 of them to leave you with 24, it's beside the point to call anything `double`, the damage has already been done. I much rather prefer methods that don't throw out random bits, even if you have to filter out `1` later to get [0,1), though it is open for discussion. \r\nSame question for all `double` functions here - I suspect it is a perf hit. ", "created_at": "2018-11-15T00:57:20Z", "updated_at": "2018-11-23T15:54:53Z", "html_url": "https://github.com/pytorch/pytorch/pull/13070#discussion_r233678916", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/13070", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/233678916"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/13070#discussion_r233678916"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/13070"}}, "body_html": "<p>Why is this double? Do we have any benchmarks (not on V100, on something like 1080) showing that it is not a perf hit? Also, after you started with 32 bits of randomness, threw out 8 of them to leave you with 24, it's beside the point to call anything <code>double</code>, the damage has already been done. I much rather prefer methods that don't throw out random bits, even if you have to filter out <code>1</code> later to get [0,1), though it is open for discussion.<br>\nSame question for all <code>double</code> functions here - I suspect it is a perf hit.</p>", "body_text": "Why is this double? Do we have any benchmarks (not on V100, on something like 1080) showing that it is not a perf hit? Also, after you started with 32 bits of randomness, threw out 8 of them to leave you with 24, it's beside the point to call anything double, the damage has already been done. I much rather prefer methods that don't throw out random bits, even if you have to filter out 1 later to get [0,1), though it is open for discussion.\nSame question for all double functions here - I suspect it is a perf hit."}