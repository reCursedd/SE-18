{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/343110374", "html_url": "https://github.com/pytorch/pytorch/issues/3585#issuecomment-343110374", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/3585", "id": 343110374, "node_id": "MDEyOklzc3VlQ29tbWVudDM0MzExMDM3NA==", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "created_at": "2017-11-09T10:20:29Z", "updated_at": "2017-11-09T10:20:29Z", "author_association": "MEMBER", "body_html": "<p>You're not really benchmarking CUDA time - CPU and GPU run asychronously, so you need to synchronize them:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> time                                                        \n<span class=\"pl-k\">import</span> torch                                                       \n<span class=\"pl-k\">from</span> torch.autograd <span class=\"pl-k\">import</span> Variable                                \n                                                                   \n<span class=\"pl-k\">def</span> <span class=\"pl-en\">get_time</span>():                                                    \n    torch.cuda.synchronize()                                       \n    <span class=\"pl-k\">return</span> time.time()                                             \n                                                                   \n                                                                   \ndata <span class=\"pl-k\">=</span> Variable(torch.rand(<span class=\"pl-c1\">256</span>,<span class=\"pl-c1\">256</span>).type(torch.FloatTensor)).cuda()\na <span class=\"pl-k\">=</span> get_time()                                                     \ntorch.inverse(data)                                                \nb <span class=\"pl-k\">=</span> get_time()                                                     \ntorch.inverse(data)                                                \nc <span class=\"pl-k\">=</span> get_time()                                                     \ntorch.inverse(data)                                                \nd <span class=\"pl-k\">=</span> get_time()                                                     \n<span class=\"pl-c1\">print</span>(d<span class=\"pl-k\">-</span>c,c<span class=\"pl-k\">-</span>b,b<span class=\"pl-k\">-</span>a)                                                 </pre></div>\n<p>Still, even in this version the first call is slower - but this is expected. <code>inverse</code> needs to allocate some working memory, the first call will allocate it, and it will be cached and reused by subsequent calls, making them a lot faster.</p>", "body_text": "You're not really benchmarking CUDA time - CPU and GPU run asychronously, so you need to synchronize them:\nimport time                                                        \nimport torch                                                       \nfrom torch.autograd import Variable                                \n                                                                   \ndef get_time():                                                    \n    torch.cuda.synchronize()                                       \n    return time.time()                                             \n                                                                   \n                                                                   \ndata = Variable(torch.rand(256,256).type(torch.FloatTensor)).cuda()\na = get_time()                                                     \ntorch.inverse(data)                                                \nb = get_time()                                                     \ntorch.inverse(data)                                                \nc = get_time()                                                     \ntorch.inverse(data)                                                \nd = get_time()                                                     \nprint(d-c,c-b,b-a)                                                 \nStill, even in this version the first call is slower - but this is expected. inverse needs to allocate some working memory, the first call will allocate it, and it will be cached and reused by subsequent calls, making them a lot faster.", "body": "You're not really benchmarking CUDA time - CPU and GPU run asychronously, so you need to synchronize them:\r\n```python\r\nimport time                                                        \r\nimport torch                                                       \r\nfrom torch.autograd import Variable                                \r\n                                                                   \r\ndef get_time():                                                    \r\n    torch.cuda.synchronize()                                       \r\n    return time.time()                                             \r\n                                                                   \r\n                                                                   \r\ndata = Variable(torch.rand(256,256).type(torch.FloatTensor)).cuda()\r\na = get_time()                                                     \r\ntorch.inverse(data)                                                \r\nb = get_time()                                                     \r\ntorch.inverse(data)                                                \r\nc = get_time()                                                     \r\ntorch.inverse(data)                                                \r\nd = get_time()                                                     \r\nprint(d-c,c-b,b-a)                                                 \r\n```\r\nStill, even in this version the first call is slower - but this is expected. `inverse` needs to allocate some working memory, the first call will allocate it, and it will be cached and reused by subsequent calls, making them a lot faster."}