{"url": "https://api.github.com/repos/pytorch/pytorch/issues/5141", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/5141/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/5141/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/5141/events", "html_url": "https://github.com/pytorch/pytorch/pull/5141", "id": 295636532, "node_id": "MDExOlB1bGxSZXF1ZXN0MTY4MDY1MDc0", "number": 5141, "title": "Use actual identifiers in script + supporting changes/fixes in IR", "user": {"login": "jamesr66a", "id": 4685384, "node_id": "MDQ6VXNlcjQ2ODUzODQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/4685384?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamesr66a", "html_url": "https://github.com/jamesr66a", "followers_url": "https://api.github.com/users/jamesr66a/followers", "following_url": "https://api.github.com/users/jamesr66a/following{/other_user}", "gists_url": "https://api.github.com/users/jamesr66a/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamesr66a/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamesr66a/subscriptions", "organizations_url": "https://api.github.com/users/jamesr66a/orgs", "repos_url": "https://api.github.com/users/jamesr66a/repos", "events_url": "https://api.github.com/users/jamesr66a/events{/privacy}", "received_events_url": "https://api.github.com/users/jamesr66a/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-02-08T19:28:21Z", "updated_at": "2018-02-08T22:42:17Z", "closed_at": "2018-02-08T22:42:16Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/5141", "html_url": "https://github.com/pytorch/pytorch/pull/5141", "diff_url": "https://github.com/pytorch/pytorch/pull/5141.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/5141.patch"}, "body_html": "<p>IR changes</p>\n<ul>\n<li>Keep track of value versions in graph representation. This makes it much easier to maintain SSA when merging graphs with unique names</li>\n<li>Expose interface on Graph to retrieve the latest version of a value for a given identifier</li>\n<li>Add flag to copyMetadata to skip setUniqueName in contexts where this has been done already</li>\n</ul>\n<p>Compiler changes</p>\n<ul>\n<li>For all inputs and assignments, take the known identifier and call setUniqueName on the Value. This returns a truly unique name which we store away in the values map</li>\n<li>Keep track of the latest version for each identifier <em>in the base scope</em>. This helps us resolve references after we've applied a function (i.e. inlined the graph).</li>\n<li>Test case involving reassignment to the same identifier as well as function application</li>\n</ul>\n<p>Example from test_script_ssa:</p>\n<pre><code>graph(%a : UNKNOWN_TYPE) {\n  %a1 : UNKNOWN_TYPE = add[alpha={1}](%a, %a)\n  %a2 : UNKNOWN_TYPE = add[alpha={1}](%a1, %a1)\n  %b : UNKNOWN_TYPE = add[alpha={1}](%a2, %a2)\n  %b2 : UNKNOWN_TYPE = add[alpha={1}](%b, %a2)\n  %c : UNKNOWN_TYPE = add[alpha={1}](%b2, %a2)\n  %c2 : UNKNOWN_TYPE = add[alpha={1}](%c, %b2)\n  %c3 : UNKNOWN_TYPE = mul(%c2, %c2)\n  return (%a1);\n}\n</code></pre>", "body_text": "IR changes\n\nKeep track of value versions in graph representation. This makes it much easier to maintain SSA when merging graphs with unique names\nExpose interface on Graph to retrieve the latest version of a value for a given identifier\nAdd flag to copyMetadata to skip setUniqueName in contexts where this has been done already\n\nCompiler changes\n\nFor all inputs and assignments, take the known identifier and call setUniqueName on the Value. This returns a truly unique name which we store away in the values map\nKeep track of the latest version for each identifier in the base scope. This helps us resolve references after we've applied a function (i.e. inlined the graph).\nTest case involving reassignment to the same identifier as well as function application\n\nExample from test_script_ssa:\ngraph(%a : UNKNOWN_TYPE) {\n  %a1 : UNKNOWN_TYPE = add[alpha={1}](%a, %a)\n  %a2 : UNKNOWN_TYPE = add[alpha={1}](%a1, %a1)\n  %b : UNKNOWN_TYPE = add[alpha={1}](%a2, %a2)\n  %b2 : UNKNOWN_TYPE = add[alpha={1}](%b, %a2)\n  %c : UNKNOWN_TYPE = add[alpha={1}](%b2, %a2)\n  %c2 : UNKNOWN_TYPE = add[alpha={1}](%c, %b2)\n  %c3 : UNKNOWN_TYPE = mul(%c2, %c2)\n  return (%a1);\n}", "body": "IR changes\r\n- Keep track of value versions in graph representation. This makes it much easier to maintain SSA when merging graphs with unique names\r\n- Expose interface on Graph to retrieve the latest version of a value for a given identifier\r\n- Add flag to copyMetadata to skip setUniqueName in contexts where this has been done already\r\n\r\nCompiler changes\r\n- For all inputs and assignments, take the known identifier and call setUniqueName on the Value. This returns a truly unique name which we store away in the values map\r\n- Keep track of the latest version for each identifier *in the base scope*. This helps us resolve references after we've applied a function (i.e. inlined the graph).\r\n- Test case involving reassignment to the same identifier as well as function application\r\n\r\nExample from test_script_ssa:\r\n\r\n```\r\ngraph(%a : UNKNOWN_TYPE) {\r\n  %a1 : UNKNOWN_TYPE = add[alpha={1}](%a, %a)\r\n  %a2 : UNKNOWN_TYPE = add[alpha={1}](%a1, %a1)\r\n  %b : UNKNOWN_TYPE = add[alpha={1}](%a2, %a2)\r\n  %b2 : UNKNOWN_TYPE = add[alpha={1}](%b, %a2)\r\n  %c : UNKNOWN_TYPE = add[alpha={1}](%b2, %a2)\r\n  %c2 : UNKNOWN_TYPE = add[alpha={1}](%c, %b2)\r\n  %c3 : UNKNOWN_TYPE = mul(%c2, %c2)\r\n  return (%a1);\r\n}\r\n```"}