{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/182492138", "pull_request_review_id": 113298608, "id": 182492138, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjQ5MjEzOA==", "diff_hunk": "@@ -3,6 +3,47 @@\n import torch._C\n from torch._C import _add_docstr as add_docstr\n \n+\n+def parse_kwargs(desc):\n+    \"\"\"Maps a description of args to a dictionary of {argname: description}.\n+    Input:\n+        out (Tensor): the output tensor\n+            Some optional description\n+    Output: {'out':\n+        'out (Tensor): the output tensor\\n        Some optional description'}\n+    \"\"\"\n+    # Split by indents. Assumes each arg starts on a new line with 4 spaces.\n+    kwargs = [section.strip() for section in desc.split('\\n   ')]\n+    kwargs = [section for section in kwargs if len(section) > 0]\n+    return {desc.split(' ')[0]: desc for desc in kwargs}\n+\n+\n+factory_common_args = parse_kwargs(\"\"\"\n+    out (Tensor, optional): the output tensor\n+    dtype (:class:`torch.dtype`, optional): the desired type of returned tensor.\n+        Default: if None, uses a global default (see :func:`torch.set_default_tensor_type`)\n+    layout (:class:`torch.layout`, optional): the desired layout of returned Tensor.\n+        Default: ``torch.strided``.\n+    device (:class:`torch.device`, optional): the desired device of returned tensor.\n+        Default: if None, uses the current device for the default tensor type\n+        (see :func:`torch.set_default_tensor_type`). :attr:`device` will be the CPU\n+        for CPU tensor types and the current CUDA device for CUDA tensor types.\n+    requires_grad (bool, optional): If autograd should record operations on the\n+        returned tensor. Default: ``False``.\n+\"\"\")\n+\n+factory_like_common_args = parse_kwargs(\"\"\"\n+    input (Tensor): the size of :attr:`input` will determine size of the output tensor\n+    layout (:class:`torch.layout`, optional): the desired layout of returned tensor.\n+        Default: if None, defaults to the layout of :attr:`input`.\n+    dtype (:class:`torch.dtype`, optional): the desired type of returned Tensor.\n+        Default: if None, defaults to the dtype of :attr:`input`.\n+    device (:class:`torch.device`, optional): the desired device of returned tensor.\n+        Default: if None, defaults to the device of :attr:`input`.\n+    requires_grad (bool, optional): If autograd should record operations on the\n+        returned tensor. Default: False.", "path": "torch/_torch_docs.py", "position": null, "original_position": 42, "commit_id": "a4fb16359c22171ebc3a2ff8f8146f6504952ba8", "original_commit_id": "c554124f59e466cc880300fba1a5708513294130", "user": {"login": "gchanan", "id": 3768583, "node_id": "MDQ6VXNlcjM3Njg1ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3768583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gchanan", "html_url": "https://github.com/gchanan", "followers_url": "https://api.github.com/users/gchanan/followers", "following_url": "https://api.github.com/users/gchanan/following{/other_user}", "gists_url": "https://api.github.com/users/gchanan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gchanan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gchanan/subscriptions", "organizations_url": "https://api.github.com/users/gchanan/orgs", "repos_url": "https://api.github.com/users/gchanan/repos", "events_url": "https://api.github.com/users/gchanan/events{/privacy}", "received_events_url": "https://api.github.com/users/gchanan/received_events", "type": "User", "site_admin": false}, "body": "the other one has Default: ``False``.", "created_at": "2018-04-18T16:36:02Z", "updated_at": "2018-11-23T15:42:45Z", "html_url": "https://github.com/pytorch/pytorch/pull/6709#discussion_r182492138", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/6709", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/182492138"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/6709#discussion_r182492138"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/6709"}}, "body_html": "<p>the other one has Default: <code>False</code>.</p>", "body_text": "the other one has Default: False."}