{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/104022113", "pull_request_review_id": 24835305, "id": 104022113, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNDAyMjExMw==", "diff_hunk": "@@ -326,20 +326,36 @@ PyObject * THPTensor_(stride)(PyObject *self, PyObject *args, PyObject *kwargs)\n     - THBoolTensor* mask\n ]]\n \n+THTensor* THTensor_(transpose_neg)(THTensor *self, THTensor *src, int dim0, int dim1)", "path": "torch/csrc/generic/methods/Tensor.cwrap", "position": null, "original_position": 4, "commit_id": "75ebc7d88cdb3477c988b1058e56ba53f57e4fba", "original_commit_id": "fc8082389e57631684baa12cb7dc3dad3ada413d", "user": {"login": "colesbury", "id": 655866, "node_id": "MDQ6VXNlcjY1NTg2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/655866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colesbury", "html_url": "https://github.com/colesbury", "followers_url": "https://api.github.com/users/colesbury/followers", "following_url": "https://api.github.com/users/colesbury/following{/other_user}", "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions", "organizations_url": "https://api.github.com/users/colesbury/orgs", "repos_url": "https://api.github.com/users/colesbury/repos", "events_url": "https://api.github.com/users/colesbury/events{/privacy}", "received_events_url": "https://api.github.com/users/colesbury/received_events", "type": "User", "site_admin": false}, "body": "You'll need to take in a THCState* for CUDA tensors:\r\n\r\n```\r\n#if IS_CUDA\r\nTHTensor* THTensor_(transpose_neg)(THCState* state, , THTensor *self, THTensor *src, int dim0, int dim1)\r\n#else\r\nTHTensor* THTensor_(transpose_neg)(THTensor *self, THTensor *src, int dim0, int dim1)\r\n#endif\r\n```\r\n\r\nThen, in the calls to THTensor_(...)(...) you should pass `LIBRARY_STATE` before self:\r\n\r\n```\r\nTHTensor_(transpose)(LIBRARY_STATE self, src, dim0, dim1);\r\n```", "created_at": "2017-03-02T20:27:57Z", "updated_at": "2018-11-23T15:32:41Z", "html_url": "https://github.com/pytorch/pytorch/pull/792#discussion_r104022113", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/792", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/104022113"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/792#discussion_r104022113"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/792"}}, "body_html": "<p>You'll need to take in a THCState* for CUDA tensors:</p>\n<pre><code>#if IS_CUDA\nTHTensor* THTensor_(transpose_neg)(THCState* state, , THTensor *self, THTensor *src, int dim0, int dim1)\n#else\nTHTensor* THTensor_(transpose_neg)(THTensor *self, THTensor *src, int dim0, int dim1)\n#endif\n</code></pre>\n<p>Then, in the calls to THTensor_(...)(...) you should pass <code>LIBRARY_STATE</code> before self:</p>\n<pre><code>THTensor_(transpose)(LIBRARY_STATE self, src, dim0, dim1);\n</code></pre>", "body_text": "You'll need to take in a THCState* for CUDA tensors:\n#if IS_CUDA\nTHTensor* THTensor_(transpose_neg)(THCState* state, , THTensor *self, THTensor *src, int dim0, int dim1)\n#else\nTHTensor* THTensor_(transpose_neg)(THTensor *self, THTensor *src, int dim0, int dim1)\n#endif\n\nThen, in the calls to THTensor_(...)(...) you should pass LIBRARY_STATE before self:\nTHTensor_(transpose)(LIBRARY_STATE self, src, dim0, dim1);"}