{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/194081205", "pull_request_review_id": 127191607, "id": 194081205, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDA4MTIwNQ==", "diff_hunk": "@@ -5425,3 +5425,170 @@ def parse_kwargs(desc):\n             [-0.1884,  0.2858, -1.5831,  0.9917, -0.8356]])\n \n \"\"\")\n+\n+\n+add_docstr(torch.hann_window,\n+           \"\"\"\n+hann_window(window_length, periodic=True, dtype=None, \\\n+layout=torch.strided, device=None, requires_grad=False) -> Tensor\n+\"\"\" + r\"\"\"\n+Hann window function.\n+\n+.. math::\n+    w[n] = \\frac{1}{2}\\ \\left[1 - \\cos \\left( \\frac{2 \\pi n}{N - 1} \\right)\\right] =\n+            \\sin^2 \\left( \\frac{\\pi n}{N - 1} \\right),\n+\n+where :math:`N` is the full window size.\n+\n+The input :attr:`window_length` is a positive integer controlling the\n+returned window size. :attr:`periodic` flag determines whether the returned\n+window trims off the last duplicate value from the symmetric window and is\n+ready to be used as a periodic window with functions like\n+:meth:`torch.stft`. Therefore, if :attr:`periodic` is true, the :math:`N` in\n+above formula is in fact :math:`\\text{window_length} + 1`. Also, we always have\n+``torch.hann_window(L, periodic=True)`` equal to\n+``torch.hann_window(L + 1, periodic=False)[:-1])``.\n+\n+.. note::\n+    If :attr:`window_length` :math:`=1`, the returned window contains a single value 1.\n+\"\"\" + r\"\"\"\n+Arguments:\n+    window_length (int): the size of returned window\n+    periodic (bool, optional): If True, returns a window to be used as periodic\n+        function. If False, return a symmetric window.\n+    {dtype} Only floating point types are supported.\n+    layout (:class:`torch.layout`, optional): the desired layout of returned window tensor. Only\n+          ``torch.strided`` (dense layout) is supported.\n+    {device}\n+    {requires_grad}\n+\n+Returns:\n+    Tensor: A 1-D tensor of size :math:`(\\text{{window_length}},)` containing the window\n+\n+\"\"\".format(**factory_common_args))\n+\n+\n+add_docstr(torch.hamming_window,\n+           \"\"\"\n+hamming_window(window_length, periodic=True, alpha=0.54, beta=0.46, dtype=None, \\\n+layout=torch.strided, device=None, requires_grad=False) -> Tensor\n+\"\"\" + r\"\"\"\n+Hamming window function.\n+\n+.. math::\n+    w[n] = \\alpha - \\beta\\ \\cos \\left( \\frac{2 \\pi n}{N - 1} \\right),\n+\n+where :math:`N` is the full window size.\n+\n+The input :attr:`window_length` is a positive integer controlling the\n+returned window size. :attr:`periodic` flag determines whether the returned\n+window trims off the last duplicate value from the symmetric window and is\n+ready to be used as a periodic window with functions like\n+:meth:`torch.stft`. Therefore, if :attr:`periodic` is true, the :math:`N` in\n+above formula is in fact :math:`\\text{window_length} + 1`. Also, we always have\n+``torch.hamming_window(L, periodic=True)`` equal to\n+``torch.hamming_window(L + 1, periodic=False)[:-1])``.\n+\n+.. note::\n+    If :attr:`window_length` :math:`=1`, the returned window contains a single value 1.\n+\n+.. note::\n+    This is a generalized version of :meth:`torch.hann_window`.\n+\"\"\" + r\"\"\"\n+Arguments:\n+    window_length (int): the size of returned window\n+    periodic (bool, optional): If True, returns a window to be used as periodic\n+        function. If False, return a symmetric window.\n+    {dtype} Only floating point types are supported.\n+    layout (:class:`torch.layout`, optional): the desired layout of returned window tensor. Only\n+          ``torch.strided`` (dense layout) is supported.\n+    {device}\n+    {requires_grad}\n+\n+Returns:\n+    Tensor: A 1-D tensor of size :math:`(\\text{{window_length}},)` containing the window\n+\n+\"\"\".format(**factory_common_args))\n+\n+\n+add_docstr(torch.bartlett_window,\n+           \"\"\"\n+bartlett_window(window_length, periodic=True, dtype=None, \\\n+layout=torch.strided, device=None, requires_grad=False) -> Tensor", "path": "torch/_torch_docs.py", "position": 134, "original_position": 134, "commit_id": "dd53f81094cf47d03c15f30239b0af76360c4db4", "original_commit_id": "dd53f81094cf47d03c15f30239b0af76360c4db4", "user": {"login": "zou3519", "id": 5652049, "node_id": "MDQ6VXNlcjU2NTIwNDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/5652049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zou3519", "html_url": "https://github.com/zou3519", "followers_url": "https://api.github.com/users/zou3519/followers", "following_url": "https://api.github.com/users/zou3519/following{/other_user}", "gists_url": "https://api.github.com/users/zou3519/gists{/gist_id}", "starred_url": "https://api.github.com/users/zou3519/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zou3519/subscriptions", "organizations_url": "https://api.github.com/users/zou3519/orgs", "repos_url": "https://api.github.com/users/zou3519/repos", "events_url": "https://api.github.com/users/zou3519/events{/privacy}", "received_events_url": "https://api.github.com/users/zou3519/received_events", "type": "User", "site_admin": false}, "body": "is it intentional that you're supporting device and requires_grad? The old functions only supported `dtype`", "created_at": "2018-06-08T14:46:11Z", "updated_at": "2018-11-23T15:45:15Z", "html_url": "https://github.com/pytorch/pytorch/pull/8130#discussion_r194081205", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/8130", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/194081205"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/8130#discussion_r194081205"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/8130"}}, "body_html": "<p>is it intentional that you're supporting device and requires_grad? The old functions only supported <code>dtype</code></p>", "body_text": "is it intentional that you're supporting device and requires_grad? The old functions only supported dtype"}