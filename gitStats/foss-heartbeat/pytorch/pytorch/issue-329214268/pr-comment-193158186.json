{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/193158186", "pull_request_review_id": 126075275, "id": 193158186, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MzE1ODE4Ng==", "diff_hunk": "@@ -321,5 +328,85 @@ Tensor zeros_like(const Tensor& self, const Type& dtype) {\n   return at::native::zeros(dtype, self.sizes());\n }\n \n+// Signal Processing Window Functions\n+\n+Tensor bartlett_window(const Type& dtype, int64_t window_length, bool periodic) {\n+  if (dtype.is_sparse()) {\n+    AT_ERROR(\"bartlett_window(...) is not implemented for sparse types, got: \", dtype.toString());\n+  }\n+  if (!at::isFloatingType(dtype.scalarType())) {\n+    AT_ERROR(\"bartlett_window(...) expects floating point dtypes, got: \", dtype.toString());\n+  }\n+  if (window_length <= 0) {\n+    AT_ERROR(\"bartlett_window(...) requires positive window_length, got window_length=%lld\", window_length);\n+  }\n+  if (window_length == 1) {\n+    return at::ones(dtype, {1});\n+  }\n+  if (periodic) {\n+    window_length += 1;\n+  }\n+  auto window = at::arange(dtype, window_length).mul_(2. / static_cast<double>(window_length - 1));\n+  int64_t first_half_size = ((window_length - 1) >> 1) + 1;\n+  window.narrow(0, first_half_size, window_length - first_half_size).mul_(-1).add_(2);\n+  return periodic ? window.narrow(0, 0, window_length - 1) : window;\n+}\n+\n+Tensor blackman_window(const Type& dtype, int64_t window_length, bool periodic) {\n+  if (dtype.is_sparse()) {\n+    AT_ERROR(\"blackman_window(...) is not implemented for sparse types, got: \", dtype.toString());\n+  }\n+  if (!at::isFloatingType(dtype.scalarType())) {\n+    AT_ERROR(\"blackman_window(...) expects floating point dtypes, got: \", dtype.toString());\n+  }\n+  if (window_length <= 0) {\n+    AT_ERROR(\"blackman_window(...) requires positive window_length, got window_length=%lld\", window_length);\n+  }\n+  if (window_length == 1) {\n+    return at::ones(dtype, {1});\n+  }\n+  if (periodic) {\n+    window_length += 1;\n+  }\n+  // from https://en.wikipedia.org/wiki/Window_function#Blackman_window\n+  auto window = at::arange(dtype, window_length).mul_(M_PI / static_cast<double>(window_length - 1));\n+  window = window.mul(4).cos_().mul_(0.08) - window.mul(2).cos_().mul_(0.5) + 0.42;\n+  return periodic ? window.narrow(0, 0, window_length - 1) : window;\n+}\n+\n+Tensor hamming_window(const Type& dtype, int64_t window_length, bool periodic, double alpha, double beta) {", "path": "aten/src/ATen/native/TensorFactories.cpp", "position": 68, "original_position": 68, "commit_id": "dd53f81094cf47d03c15f30239b0af76360c4db4", "original_commit_id": "1470d07de1149368f4b4dd2b272beca56ddfea5c", "user": {"login": "SsnL", "id": 5674597, "node_id": "MDQ6VXNlcjU2NzQ1OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5674597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SsnL", "html_url": "https://github.com/SsnL", "followers_url": "https://api.github.com/users/SsnL/followers", "following_url": "https://api.github.com/users/SsnL/following{/other_user}", "gists_url": "https://api.github.com/users/SsnL/gists{/gist_id}", "starred_url": "https://api.github.com/users/SsnL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SsnL/subscriptions", "organizations_url": "https://api.github.com/users/SsnL/orgs", "repos_url": "https://api.github.com/users/SsnL/repos", "events_url": "https://api.github.com/users/SsnL/events{/privacy}", "received_events_url": "https://api.github.com/users/SsnL/received_events", "type": "User", "site_admin": false}, "body": "The default values are in `native_functions.yaml`, which are close approximations `alpha=0.54` and `beta=0.46`. These are also the values used by NumPy. :)  ", "created_at": "2018-06-05T17:32:53Z", "updated_at": "2018-11-23T15:44:58Z", "html_url": "https://github.com/pytorch/pytorch/pull/8130#discussion_r193158186", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/8130", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/193158186"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/8130#discussion_r193158186"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/8130"}}, "body_html": "<p>The default values are in <code>native_functions.yaml</code>, which are close approximations <code>alpha=0.54</code> and <code>beta=0.46</code>. These are also the values used by NumPy. :)</p>", "body_text": "The default values are in native_functions.yaml, which are close approximations alpha=0.54 and beta=0.46. These are also the values used by NumPy. :)", "in_reply_to_id": 192894337}