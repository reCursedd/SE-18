{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/337789601", "html_url": "https://github.com/pytorch/pytorch/pull/3136#issuecomment-337789601", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/3136", "id": 337789601, "node_id": "MDEyOklzc3VlQ29tbWVudDMzNzc4OTYwMQ==", "user": {"login": "colesbury", "id": 655866, "node_id": "MDQ6VXNlcjY1NTg2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/655866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colesbury", "html_url": "https://github.com/colesbury", "followers_url": "https://api.github.com/users/colesbury/followers", "following_url": "https://api.github.com/users/colesbury/following{/other_user}", "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions", "organizations_url": "https://api.github.com/users/colesbury/orgs", "repos_url": "https://api.github.com/users/colesbury/repos", "events_url": "https://api.github.com/users/colesbury/events{/privacy}", "received_events_url": "https://api.github.com/users/colesbury/received_events", "type": "User", "site_admin": false}, "created_at": "2017-10-19T03:29:05Z", "updated_at": "2017-10-19T03:29:05Z", "author_association": "MEMBER", "body_html": "<p>Broadcasting is handled in the forward pass <em>outside</em> of the differentiable function (s_add), so the backwards for <code>s_add</code> doesn't have to worry about it.</p>\n<p><code>add(a, b)</code> ends up calling (in pseudo-code):</p>\n<pre><code>if (a.size() != b.size()) {\n a = a.expand(&lt;broadcast_size&gt;)\n b = b.expand(&lt;broadcast_size&gt;)\n}\nreturn s_add(a, b);\n</code></pre>\n<p>The backwards for <code>expand</code> calls <code>reduce_to</code> which is the equivalent to <code>maybe_unexpand</code> in the old code.</p>\n<p>See:<br>\nType::add<br>\nVariableType::s_add<br>\nVariableType::expand<br>\nExpandUtils.h</p>", "body_text": "Broadcasting is handled in the forward pass outside of the differentiable function (s_add), so the backwards for s_add doesn't have to worry about it.\nadd(a, b) ends up calling (in pseudo-code):\nif (a.size() != b.size()) {\n a = a.expand(<broadcast_size>)\n b = b.expand(<broadcast_size>)\n}\nreturn s_add(a, b);\n\nThe backwards for expand calls reduce_to which is the equivalent to maybe_unexpand in the old code.\nSee:\nType::add\nVariableType::s_add\nVariableType::expand\nExpandUtils.h", "body": "Broadcasting is handled in the forward pass *outside* of the differentiable function (s_add), so the backwards for `s_add` doesn't have to worry about it.\r\n\r\n`add(a, b)` ends up calling (in pseudo-code):\r\n\r\n```\r\nif (a.size() != b.size()) {\r\n a = a.expand(<broadcast_size>)\r\n b = b.expand(<broadcast_size>)\r\n}\r\nreturn s_add(a, b);\r\n```\r\n\r\nThe backwards for `expand` calls `reduce_to` which is the equivalent to `maybe_unexpand` in the old code.\r\n\r\nSee:\r\nType::add\r\nVariableType::s_add\r\nVariableType::expand\r\nExpandUtils.h"}