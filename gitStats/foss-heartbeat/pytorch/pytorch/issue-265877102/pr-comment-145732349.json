{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/145732349", "pull_request_review_id": 70574035, "id": 145732349, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0NTczMjM0OQ==", "diff_hunk": "@@ -77,23 +67,23 @@\n   self: grad.bmm(mat2.transpose(1, 2))\n   mat2: self.transpose(1, 2).bmm(grad)\n \n-- name: btrifact\n-- name: btrisolve\n+- name: btrifact(Tensor self, Tensor info, bool pivot)\n+  self: not_implemented(\"btrifact\")\n+\n+- name: btrisolve(Tensor self, Tensor LU_data, Tensor LU_pivots)\n+  self: not_implemented(\"btrisolve\")\n \n - name: cat(TensorList tensors, int64_t dim=0)\n-  tensors: cat_tensors_backward(grad, tensors.sizes(dim), dim)\n+  tensors: cat_tensors_backward(grad, to_arg_sizes(tensors, dim), dim)", "path": "tools/autograd/derivatives.yaml", "position": 61, "original_position": 61, "commit_id": "937212b9a919339d4afaede4b277e3fd8ae015d0", "original_commit_id": "cca8b80fd3e352fb955f416bee80b010797bf102", "user": {"login": "colesbury", "id": 655866, "node_id": "MDQ6VXNlcjY1NTg2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/655866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colesbury", "html_url": "https://github.com/colesbury", "followers_url": "https://api.github.com/users/colesbury/followers", "following_url": "https://api.github.com/users/colesbury/following{/other_user}", "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions", "organizations_url": "https://api.github.com/users/colesbury/orgs", "repos_url": "https://api.github.com/users/colesbury/repos", "events_url": "https://api.github.com/users/colesbury/events{/privacy}", "received_events_url": "https://api.github.com/users/colesbury/received_events", "type": "User", "site_admin": false}, "body": "No, it's more of a stylistic change. I'd like all the expressions here to be valid C++. The string substitutions in `load_derivatives` to only be optimizations that evaluate some subexpressions earlier in the forward pass. It should still compile and be correct without those substitutions.\r\n\r\n`tensors.sizes(dim)` didn't correspond to any ATen call (there's no sizes method on TensorList).", "created_at": "2017-10-19T15:16:48Z", "updated_at": "2018-11-23T15:35:28Z", "html_url": "https://github.com/pytorch/pytorch/pull/3136#discussion_r145732349", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/3136", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/145732349"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/3136#discussion_r145732349"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/3136"}}, "body_html": "<p>No, it's more of a stylistic change. I'd like all the expressions here to be valid C++. The string substitutions in <code>load_derivatives</code> to only be optimizations that evaluate some subexpressions earlier in the forward pass. It should still compile and be correct without those substitutions.</p>\n<p><code>tensors.sizes(dim)</code> didn't correspond to any ATen call (there's no sizes method on TensorList).</p>", "body_text": "No, it's more of a stylistic change. I'd like all the expressions here to be valid C++. The string substitutions in load_derivatives to only be optimizations that evaluate some subexpressions earlier in the forward pass. It should still compile and be correct without those substitutions.\ntensors.sizes(dim) didn't correspond to any ATen call (there's no sizes method on TensorList).", "in_reply_to_id": 145180807}