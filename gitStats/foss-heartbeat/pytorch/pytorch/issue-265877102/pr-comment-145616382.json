{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/145616382", "pull_request_review_id": 69941978, "id": 145616382, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0NTYxNjM4Mg==", "diff_hunk": "@@ -160,146 +194,220 @@ def write(dirname, name, template, env):\n         f.write(template.substitute(env))\n \n \n-def load_derivatives(path):\n-    with open(path, 'r') as f:\n-        definitions = yaml.load(f, Loader=Loader)\n+def saved_variables(formula, args):\n+    # find which arguments need to be saved\n+    saved = []\n \n-    # Matches \"foo\" in \"foo, bar\" but not \"foobar\". The name is substituted for\n-    # the {} characters.\n-    name_regex = r'(^|\\W){}($|\\W)'\n+    for arg in args:\n+        if 'name' not in arg:\n+            # some returned arguments do not have names\n+            continue\n+        name = arg['name']\n+\n+        def replace_sizes(m):\n+            res = name + '_sizes'\n+            saved.append({'name': res, 'type': 'IntList'})\n+            return res\n+\n+        def replace_zeros(m):\n+            r = name + '_info'\n+            saved.append({'name': r, 'type': 'TypeAndSize'})\n+            return r + '.zeros()'\n+\n+        def replace_size_n(m):\n+            res = name + '_argsize_{}'.format(*m.groups())\n+            saved.append({'name': res, 'type': 'int64_t'})\n+            return res\n+\n+        def replace_to_arg_sizes(m):\n+            res = name + '_argsizes_{}'.format(*m.groups())\n+            saved.append({'name': res, 'type': 'IntList'})\n+            return res\n+\n+        # replace self.sizes() with self_sizes\n+        formula = re.sub(r'{}.sizes\\(\\)'.format(name), replace_sizes, formula)\n+        # replace zeros_like(self) with self_info\n+        formula = re.sub(r'zeros_like\\({}\\)'.format(name), replace_zeros, formula)\n+        # replace self.size(2) with self_size_2\n+        formula = re.sub(r'{}.size\\((\\w+)\\)'.format(name), replace_size_n, formula)\n+        # replace to_arg_sizes(self, 2) with self_argsizes_2\n+        formula = re.sub(r'to_arg_sizes\\({}, (\\w+)\\)'.format(name), replace_to_arg_sizes, formula)\n+\n+        if re.search(IDENT_REGEX.format(name), formula):\n+            arg = copy.deepcopy(arg)\n+            arg['type'] = arg['type'].replace('const ', '').replace(' &', '')\n+            saved.append(arg)\n+    return formula, saved\n+\n+\n+def create_derivative(declaration, formula, output_indices, var_names):\n+    returns = [r for r in declaration['returns'] if r.get('name') != 'self']\n+    arguments = [arg for arg in declaration['arguments']]\n+    if any(arg['name'] == 'inplace' for arg in arguments):\n+        for arg in arguments:\n+            if arg['name'] == 'input':\n+                returns += [arg]\n+        arguments = [arg for arg in arguments if arg['name'] != 'input']\n+    formula, saved_inputs = saved_variables(formula, arguments)\n+    formula, saved_outputs = saved_variables(formula, returns)\n+\n+    return {\n+        'formula': formula,\n+        'output_indices': output_indices,\n+        'saved_inputs': saved_inputs,\n+        'saved_outputs': saved_outputs,\n+        'var_names': var_names,\n+    }\n+\n+\n+def create_autograd_function(name, derivatives, num_inputs, buffers=None):\n+    return {\n+        'name': name,\n+        'op': to_camel_case(name) + 'Backward',\n+        'num_inputs': num_inputs,\n+        'derivatives': derivatives,\n+        'buffers': [] if buffers is None else buffers,\n+        'saved_inputs': all_saved_variables(derivatives, 'saved_inputs'),\n+        'saved_outputs': all_saved_variables(derivatives, 'saved_outputs'),\n+    }", "path": "tools/autograd/gen_variable_type.py", "position": 256, "original_position": 256, "commit_id": "937212b9a919339d4afaede4b277e3fd8ae015d0", "original_commit_id": "cca8b80fd3e352fb955f416bee80b010797bf102", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Eh I'm starting to hate that this data is so unstructured. We should use objects with well defined attributes in this file (sort of like `namedtuple`, but probably we want to keep it mutable)", "created_at": "2017-10-19T07:20:01Z", "updated_at": "2018-11-23T15:35:26Z", "html_url": "https://github.com/pytorch/pytorch/pull/3136#discussion_r145616382", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/3136", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/145616382"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/3136#discussion_r145616382"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/3136"}}, "body_html": "<p>Eh I'm starting to hate that this data is so unstructured. We should use objects with well defined attributes in this file (sort of like <code>namedtuple</code>, but probably we want to keep it mutable)</p>", "body_text": "Eh I'm starting to hate that this data is so unstructured. We should use objects with well defined attributes in this file (sort of like namedtuple, but probably we want to keep it mutable)"}