{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/145385912", "pull_request_review_id": 69941978, "id": 145385912, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0NTM4NTkxMg==", "diff_hunk": "@@ -67,44 +69,88 @@ const char * VariableType::typeString() {\n   return \"VariableType\";\n }\n \n-Tensor & VariableType::checked_unpack(const Tensor & t, const char * name, int pos) const\n-{\n- if(!t.defined()) {\n-   runtime_error(\"Expected a Tensor of type %s but found an undefined Tensor for argument #%d '%s'\",\n-     toString(), pos, name);\n- }\n- if (&t.type() == this) {\n-   return static_cast<VariableImpl*>(t.pImpl)->data;\n- }\n- runtime_error(\"Expected object of type %s but found type %s for argument #%d '%s'\",\n-   toString(),t.type().toString(), pos, name);\n-}\n-\n-std::vector<at::Tensor> VariableType::checked_unpack(const at::TensorList &tl, const char *name, int pos) const {\n- std::vector<at::Tensor> ret(tl.size());\n- for (size_t i = 0; i < tl.size(); ++i) {\n-   const auto &t = tl[i];\n-   if(!t.defined()) {\n-     runtime_error(\"Expected a Tensor of type %s but found an undefined Tensor at position #%d \"\n-                   \"for iterable argument #%d '%s'\",\n-                   toString(), i, pos, name);\n-   }\n-   if (&t.type() == this) {\n-     ret[i] = static_cast<VariableImpl*>(t.pImpl)->data;\n-   } else {\n-   runtime_error(\"Expected object of type %s but found type %s at position #%d \"\n-                 \"for iterable argument #%d '%s'\",\n-                 toString(),t.type().toString(), i, pos, name);\n-   }\n+Tensor & VariableType::unpack(const Type & type, const Tensor & t, const char * name, int pos) {\n+  if(!t.defined()) {\n+    runtime_error(\"Expected a Tensor of type %s but found an undefined Tensor for argument #%d '%s'\",\n+        type.toString(), pos, name);\n   }\n-  return ret;\n+  if (&t.type() != &type) {\n+    runtime_error(\"Expected object of type %s but found type %s for argument #%d '%s'\",\n+        type.toString(), t.type().toString(), pos, name);\n+  }\n+  return static_cast<VariableImpl*>(t.pImpl)->data;\n+}\n+\n+Tensor & VariableType::unpack(const Tensor & t, const char * name, int pos) const {\n+  return unpack(*this, t, name, pos);\n+}\n+\n+Tensor & VariableType::unpack_long(const Tensor & t, const char * name, int pos) const {\n+  auto& type = *VariableImpl::getType(baseType->toScalarType(kLong));\n+  return unpack(type, t, name, pos);\n+}\n+\n+Tensor & VariableType::unpack_byte(const Tensor & t, const char * name, int pos) const {\n+  auto& type = *VariableImpl::getType(baseType->toScalarType(kByte));\n+  return unpack(type, t, name, pos);\n+}\n+\n+Tensor & VariableType::unpack_var(const Tensor & t, const char * name, int pos) const {", "path": "tools/autograd/templates/VariableType.cpp", "position": null, "original_position": 85, "commit_id": "937212b9a919339d4afaede4b277e3fd8ae015d0", "original_commit_id": "cca8b80fd3e352fb955f416bee80b010797bf102", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "uh why a `_var` suffix (it's confusing because we use `var` for Variable locals)? Maybe `unpack_any`? ", "created_at": "2017-10-18T11:28:54Z", "updated_at": "2018-11-23T15:35:24Z", "html_url": "https://github.com/pytorch/pytorch/pull/3136#discussion_r145385912", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/3136", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/145385912"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/3136#discussion_r145385912"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/3136"}}, "body_html": "<p>uh why a <code>_var</code> suffix (it's confusing because we use <code>var</code> for Variable locals)? Maybe <code>unpack_any</code>?</p>", "body_text": "uh why a _var suffix (it's confusing because we use var for Variable locals)? Maybe unpack_any?"}