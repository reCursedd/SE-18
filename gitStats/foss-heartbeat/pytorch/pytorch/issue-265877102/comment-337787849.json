{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/337787849", "html_url": "https://github.com/pytorch/pytorch/pull/3136#issuecomment-337787849", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/3136", "id": 337787849, "node_id": "MDEyOklzc3VlQ29tbWVudDMzNzc4Nzg0OQ==", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "created_at": "2017-10-19T03:14:35Z", "updated_at": "2017-10-19T03:14:49Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Hey <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=655866\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/colesbury\">@colesbury</a> / <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=3768583\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/gchanan\">@gchanan</a> , yesterday I was running the autograd tests through the new ATen codepath and I noticed that broadcasting is not handled correctly by the new codepath. The problem is this isn't sophisticated enough:</p>\n<pre><code>- name: add(Tensor self, Tensor other, *, Scalar alpha=1)\n  self: grad\n  other: grad * alpha\n</code></pre>\n<p>The original code knew to unexpand if necessary:</p>\n<pre><code>@staticmethod\ndef backward(ctx, grad_output):\n        return maybe_unexpand(grad_output, ctx.a_size), maybe_unexpand_or_view(grad_output, ctx.b_size), None\n</code></pre>\n<p>What's our plan for handling this?</p>", "body_text": "Hey @colesbury / @gchanan , yesterday I was running the autograd tests through the new ATen codepath and I noticed that broadcasting is not handled correctly by the new codepath. The problem is this isn't sophisticated enough:\n- name: add(Tensor self, Tensor other, *, Scalar alpha=1)\n  self: grad\n  other: grad * alpha\n\nThe original code knew to unexpand if necessary:\n@staticmethod\ndef backward(ctx, grad_output):\n        return maybe_unexpand(grad_output, ctx.a_size), maybe_unexpand_or_view(grad_output, ctx.b_size), None\n\nWhat's our plan for handling this?", "body": "Hey @colesbury / @gchanan , yesterday I was running the autograd tests through the new ATen codepath and I noticed that broadcasting is not handled correctly by the new codepath. The problem is this isn't sophisticated enough:\r\n\r\n```\r\n- name: add(Tensor self, Tensor other, *, Scalar alpha=1)\r\n  self: grad\r\n  other: grad * alpha\r\n```\r\n\r\nThe original code knew to unexpand if necessary:\r\n\r\n```\r\n@staticmethod\r\ndef backward(ctx, grad_output):\r\n        return maybe_unexpand(grad_output, ctx.a_size), maybe_unexpand_or_view(grad_output, ctx.b_size), None\r\n```\r\n\r\nWhat's our plan for handling this?"}