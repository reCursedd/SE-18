{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/145619408", "pull_request_review_id": 69941978, "id": 145619408, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0NTYxOTQwOA==", "diff_hunk": "@@ -309,74 +417,75 @@ def create_autograd_functions(top_env, declarations):\n     function_declarations = top_env['autograd_function_declarations']\n     py_function_initializers = top_env['py_function_initializers']\n \n-    def process_function(op):\n+    def process_function(func):\n+        env = {}\n         saved_variables = []\n         release_variables = []\n-        for arg in op['saved']:\n+        unpack = []\n+\n+        def save_arg(arg, is_output):\n             name = arg['name']\n-            if arg['type'] == 'Tensor':\n+            if arg['type'] == 'Tensor' or (arg['type'] == 'Scalar' and is_output):\n                 saved_variables.append('SavedVariable {}_;'.format(name))\n                 release_variables.append('{}_.data.reset();'.format(name))\n+                ptr = 'shared_from_this()' if is_output else ''\n+                unpack.append('auto {} = {}_.unpack({});'.format(name, name, ptr))\n             elif arg['type'] == 'IntList':\n                 saved_variables.append('std::vector<int64_t> {};'.format(name))\n             else:\n                 saved_variables.append('{} {};'.format(arg['type'], name))\n-        op['saved_variables'] = saved_variables\n-        op['release_variables'] = release_variables\n+\n+        for arg in func['saved_inputs']:\n+            save_arg(arg, is_output=False)\n+        for arg in func['saved_outputs']:\n+            save_arg(arg, is_output=True)\n+        env['saved_variables'] = saved_variables\n+        env['release_variables'] = release_variables\n+\n+        def uses_grad(func):\n+            for derivative in func['derivatives']:\n+                formula = derivative['formula']\n+                if re.search(IDENT_REGEX.format('grad'), formula):\n+                    return True\n+            return False\n \n         body = []\n-        body.append('auto& grad = inputs[0];')\n-\n-        def unpack_args():\n-            unpack = []\n-            for arg in op['saved']:\n-                if arg['type'] == 'Tensor':\n-                    name = arg['name']\n-                    unpack.append('auto {} = {}_.unpack();'.format(name, name))\n-            return unpack\n-\n-        body.extend(unpack_args())\n-\n-        i = 0\n-        added_derivative_tensor = False\n-        added_derivative_tensorlist = False\n-        for arg in op['python_arguments']:\n-            derivative = arg.get('derivative')\n-            if derivative is None:\n-                continue\n \n-            if arg['type'] == 'TensorList':\n-                if added_derivative_tensor:\n-                    raise RuntimeError(\"derivatives don't support specifying both a TensorList \"\n-                                       \"and non-TensorList derivative yet\")\n-                added_derivative_tensorlist = True\n-                body.append(DERIVATIVE_TENSORLIST.substitute({\n-                    'i': i,\n-                    'derivative': derivative,\n-                }))\n+        if uses_grad(func):\n+            body.append('auto& grad = inputs[0];')\n+\n+        def emit_derivative(derivative):\n+            formula = derivative['formula']\n+            idxs = derivative['output_indices']\n+            if idxs == '*':\n+                return DERIVATIVE_TENSORLIST.substitute(derivative=formula)\n+            elif len(idxs) == 1:\n+                return DERIVATIVE_TENSOR.substitute(idx=idxs[0], derivative=formula)\n             else:\n-                if added_derivative_tensorlist:\n-                    raise RuntimeError(\"derivatives don't support specifying both a TensorList \"\n-                                       \"and non-TensorList derivative yet\")\n-                added_derivative_tensor = True\n-                body.append(DERIVATIVE_TENSOR.substitute({\n-                    'i': i,\n-                    'derivative': derivative,\n-                }))\n-            i += 1\n+                grad_inputs = ', '.join(['grad_inputs[{}]'.format(i) for i in idxs])\n+                masks = ['should_compute_output({}),'.format(i) for i in idxs]\n+                return DERIVATIVE_MULTI.substitute(\n+                    idxs=idxs, derivative=formula, grad_inputs=grad_inputs,\n+                    masks=masks, n=len(idxs))", "path": "tools/autograd/gen_variable_type.py", "position": 621, "original_position": 611, "commit_id": "937212b9a919339d4afaede4b277e3fd8ae015d0", "original_commit_id": "cca8b80fd3e352fb955f416bee80b010797bf102", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "can you quickly explain to me what masks and output_idxes are?", "created_at": "2017-10-19T07:37:13Z", "updated_at": "2018-11-23T15:35:26Z", "html_url": "https://github.com/pytorch/pytorch/pull/3136#discussion_r145619408", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/3136", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/145619408"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/3136#discussion_r145619408"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/3136"}}, "body_html": "<p>can you quickly explain to me what masks and output_idxes are?</p>", "body_text": "can you quickly explain to me what masks and output_idxes are?"}