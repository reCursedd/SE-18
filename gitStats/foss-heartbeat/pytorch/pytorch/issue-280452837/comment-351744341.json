{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/351744341", "html_url": "https://github.com/pytorch/pytorch/issues/4085#issuecomment-351744341", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/4085", "id": 351744341, "node_id": "MDEyOklzc3VlQ29tbWVudDM1MTc0NDM0MQ==", "user": {"login": "josecabjim", "id": 28218638, "node_id": "MDQ6VXNlcjI4MjE4NjM4", "avatar_url": "https://avatars0.githubusercontent.com/u/28218638?v=4", "gravatar_id": "", "url": "https://api.github.com/users/josecabjim", "html_url": "https://github.com/josecabjim", "followers_url": "https://api.github.com/users/josecabjim/followers", "following_url": "https://api.github.com/users/josecabjim/following{/other_user}", "gists_url": "https://api.github.com/users/josecabjim/gists{/gist_id}", "starred_url": "https://api.github.com/users/josecabjim/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/josecabjim/subscriptions", "organizations_url": "https://api.github.com/users/josecabjim/orgs", "repos_url": "https://api.github.com/users/josecabjim/repos", "events_url": "https://api.github.com/users/josecabjim/events{/privacy}", "received_events_url": "https://api.github.com/users/josecabjim/received_events", "type": "User", "site_admin": false}, "created_at": "2017-12-14T15:31:19Z", "updated_at": "2017-12-14T15:31:19Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Ok, I see your point now about implicitly computing the absolute grid. I agree it could be useful if this is always going to be the operation mode (I'm not sure if I might be missing cases where this wouldn't be necessary or desired). We'd then need to mention how a flow field has to be associated to some original H and W that are now arguments to the grid_sampler.</p>\n<p>Your point about deformable convolution is interesting. I guess if deformable convolutions are a generalisation of pixel-wise flow interpolation then the deformable convolution module could serve as this general purpose kernel. I'm not familiar with this code though and it may be that it's not efficient to run pixel-wise flow interpolation as a special case of deformable convolutions, but this is not the case then I agree it might be worth unifying these.</p>", "body_text": "Ok, I see your point now about implicitly computing the absolute grid. I agree it could be useful if this is always going to be the operation mode (I'm not sure if I might be missing cases where this wouldn't be necessary or desired). We'd then need to mention how a flow field has to be associated to some original H and W that are now arguments to the grid_sampler.\nYour point about deformable convolution is interesting. I guess if deformable convolutions are a generalisation of pixel-wise flow interpolation then the deformable convolution module could serve as this general purpose kernel. I'm not familiar with this code though and it may be that it's not efficient to run pixel-wise flow interpolation as a special case of deformable convolutions, but this is not the case then I agree it might be worth unifying these.", "body": "Ok, I see your point now about implicitly computing the absolute grid. I agree it could be useful if this is always going to be the operation mode (I'm not sure if I might be missing cases where this wouldn't be necessary or desired). We'd then need to mention how a flow field has to be associated to some original H and W that are now arguments to the grid_sampler.\r\n\r\nYour point about deformable convolution is interesting. I guess if deformable convolutions are a generalisation of pixel-wise flow interpolation then the deformable convolution module could serve as this general purpose kernel. I'm not familiar with this code though and it may be that it's not efficient to run pixel-wise flow interpolation as a special case of deformable convolutions, but this is not the case then I agree it might be worth unifying these."}