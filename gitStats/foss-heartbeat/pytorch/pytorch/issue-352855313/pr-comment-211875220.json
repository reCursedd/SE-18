{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/211875220", "pull_request_review_id": 148385930, "id": 211875220, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMTg3NTIyMA==", "diff_hunk": "@@ -89,7 +95,22 @@ class FullyConnectedOp final : public Operator<Context> {\n       math_type = TensorProto_DataType_FLOAT16;\n     }\n \n-    // W * x\n+    // copy bias to output y\n+    if (b.ndim() == 2) {\n+      const T_B* b_data = b.template data<T_B>();\n+      T_Y *y_data = Y->template mutable_data<T_Y>();\n+          math::CopyVector<T_B, Context>(M * N, b_data, y_data, &context_);\n+    } else {\n+      const T_B* b_data = b.template data<T_B>();\n+      T_Y* y_data = Y->template mutable_data<T_Y>();\n+      for (int i = 0; i < M; ++i) {\n+        math::CopyVector<T_B, Context>(N, b_data, y_data, &context_);", "path": "caffe2/operators/fully_connected_op.h", "position": 40, "original_position": 40, "commit_id": "91e5ea9acd1c18ef00875b5a4201a60619fd6692", "original_commit_id": "91e5ea9acd1c18ef00875b5a4201a60619fd6692", "user": {"login": "JerryShih", "id": 5842681, "node_id": "MDQ6VXNlcjU4NDI2ODE=", "avatar_url": "https://avatars3.githubusercontent.com/u/5842681?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JerryShih", "html_url": "https://github.com/JerryShih", "followers_url": "https://api.github.com/users/JerryShih/followers", "following_url": "https://api.github.com/users/JerryShih/following{/other_user}", "gists_url": "https://api.github.com/users/JerryShih/gists{/gist_id}", "starred_url": "https://api.github.com/users/JerryShih/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JerryShih/subscriptions", "organizations_url": "https://api.github.com/users/JerryShih/orgs", "repos_url": "https://api.github.com/users/JerryShih/repos", "events_url": "https://api.github.com/users/JerryShih/events{/privacy}", "received_events_url": "https://api.github.com/users/JerryShih/received_events", "type": "User", "site_admin": false}, "body": "In the original implementation, it uses gemm to create a m*n bias matrix from 1d bias vector. I just use CopyVector to do the broadcast. I haven't checked the performance difference with profiler, but there is no float multiplying in this way.", "created_at": "2018-08-22T08:47:43Z", "updated_at": "2018-11-23T15:49:44Z", "html_url": "https://github.com/pytorch/pytorch/pull/10770#discussion_r211875220", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/10770", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/211875220"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/10770#discussion_r211875220"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/10770"}}, "body_html": "<p>In the original implementation, it uses gemm to create a m*n bias matrix from 1d bias vector. I just use CopyVector to do the broadcast. I haven't checked the performance difference with profiler, but there is no float multiplying in this way.</p>", "body_text": "In the original implementation, it uses gemm to create a m*n bias matrix from 1d bias vector. I just use CopyVector to do the broadcast. I haven't checked the performance difference with profiler, but there is no float multiplying in this way."}