{"url": "https://api.github.com/repos/pytorch/pytorch/issues/1630", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/1630/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/1630/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/1630/events", "html_url": "https://github.com/pytorch/pytorch/issues/1630", "id": 230782211, "node_id": "MDU6SXNzdWUyMzA3ODIyMTE=", "number": 1630, "title": "Performance of Simple Use Case -  PyTorch vs Plain Python with Numpy", "user": {"login": "makeyourownneuralnetwork", "id": 17411198, "node_id": "MDQ6VXNlcjE3NDExMTk4", "avatar_url": "https://avatars2.githubusercontent.com/u/17411198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/makeyourownneuralnetwork", "html_url": "https://github.com/makeyourownneuralnetwork", "followers_url": "https://api.github.com/users/makeyourownneuralnetwork/followers", "following_url": "https://api.github.com/users/makeyourownneuralnetwork/following{/other_user}", "gists_url": "https://api.github.com/users/makeyourownneuralnetwork/gists{/gist_id}", "starred_url": "https://api.github.com/users/makeyourownneuralnetwork/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/makeyourownneuralnetwork/subscriptions", "organizations_url": "https://api.github.com/users/makeyourownneuralnetwork/orgs", "repos_url": "https://api.github.com/users/makeyourownneuralnetwork/repos", "events_url": "https://api.github.com/users/makeyourownneuralnetwork/events{/privacy}", "received_events_url": "https://api.github.com/users/makeyourownneuralnetwork/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2017-05-23T17:13:25Z", "updated_at": "2017-09-17T01:20:49Z", "closed_at": "2017-05-26T01:45:26Z", "author_association": "NONE", "body_html": "<p><strong>Summary - PyTorch seems to be half as fast as plain Python for very simple networks.</strong></p>\n<h3>Context</h3>\n<p>I am learning PyTorch because it promises convenience and easy access to GPU acceleration.</p>\n<p>In learning, I re-implemented my previous very simple tutorial 3-layer neural network created from scratch in Python with Numpy.</p>\n<h3>Code</h3>\n<p>The two are here:</p>\n<ul>\n<li>simple python+numpy: <a href=\"https://github.com/makeyourownneuralnetwork/makeyourownneuralnetwork/blob/master/part2_neural_network_mnist_data.ipynb\">https://github.com/makeyourownneuralnetwork/makeyourownneuralnetwork/blob/master/part2_neural_network_mnist_data.ipynb</a></li>\n<li>PyTorch: <a href=\"https://github.com/makeyourownneuralnetwork/pytorch/blob/master/pytorch_neural_network_mnist_data.ipynb\">https://github.com/makeyourownneuralnetwork/pytorch/blob/master/pytorch_neural_network_mnist_data.ipynb</a></li>\n</ul>\n<h3>Results</h3>\n<p>They are built to be as similar as possible - same size, same loss function, same training data, etc</p>\n<p>The result of 2 timing tests show that the <strong>plain python version is about twice as fast as the PyTorch version</strong>:</p>\n<ul>\n<li>home-made simple pure python - 4<strong>40 seconds, 458 seconds</strong></li>\n<li>simple PyTorch version - <strong>841 seconds, 834 seconds</strong></li>\n</ul>\n<h3>More Detail</h3>\n<p>Here's a blog which details the experiment conditions in more detail (near the bottom of the post).</p>\n<ul>\n<li>blog  <a href=\"http://makeyourownneuralnetwork.blogspot.co.uk/2017/05/learning-mnist-with-gpu-acceleration.html\" rel=\"nofollow\">http://makeyourownneuralnetwork.blogspot.co.uk/2017/05/learning-mnist-with-gpu-acceleration.html</a></li>\n</ul>\n<h3>What Am I Doing Wrong?</h3>\n<p>Or does PyTorch have too much overhead for simple scenarios, and only really shines for larger or GPU accelerated cases?</p>", "body_text": "Summary - PyTorch seems to be half as fast as plain Python for very simple networks.\nContext\nI am learning PyTorch because it promises convenience and easy access to GPU acceleration.\nIn learning, I re-implemented my previous very simple tutorial 3-layer neural network created from scratch in Python with Numpy.\nCode\nThe two are here:\n\nsimple python+numpy: https://github.com/makeyourownneuralnetwork/makeyourownneuralnetwork/blob/master/part2_neural_network_mnist_data.ipynb\nPyTorch: https://github.com/makeyourownneuralnetwork/pytorch/blob/master/pytorch_neural_network_mnist_data.ipynb\n\nResults\nThey are built to be as similar as possible - same size, same loss function, same training data, etc\nThe result of 2 timing tests show that the plain python version is about twice as fast as the PyTorch version:\n\nhome-made simple pure python - 440 seconds, 458 seconds\nsimple PyTorch version - 841 seconds, 834 seconds\n\nMore Detail\nHere's a blog which details the experiment conditions in more detail (near the bottom of the post).\n\nblog  http://makeyourownneuralnetwork.blogspot.co.uk/2017/05/learning-mnist-with-gpu-acceleration.html\n\nWhat Am I Doing Wrong?\nOr does PyTorch have too much overhead for simple scenarios, and only really shines for larger or GPU accelerated cases?", "body": "**Summary - PyTorch seems to be half as fast as plain Python for very simple networks.**\r\n\r\n\r\n\r\n### Context\r\nI am learning PyTorch because it promises convenience and easy access to GPU acceleration.\r\n\r\nIn learning, I re-implemented my previous very simple tutorial 3-layer neural network created from scratch in Python with Numpy. \r\n\r\n\r\n\r\n### Code\r\nThe two are here:\r\n\r\n- simple python+numpy: [https://github.com/makeyourownneuralnetwork/makeyourownneuralnetwork/blob/master/part2_neural_network_mnist_data.ipynb](https://github.com/makeyourownneuralnetwork/makeyourownneuralnetwork/blob/master/part2_neural_network_mnist_data.ipynb)\r\n- PyTorch: [https://github.com/makeyourownneuralnetwork/pytorch/blob/master/pytorch_neural_network_mnist_data.ipynb](https://github.com/makeyourownneuralnetwork/pytorch/blob/master/pytorch_neural_network_mnist_data.ipynb)\r\n\r\n\r\n\r\n### Results\r\nThey are built to be as similar as possible - same size, same loss function, same training data, etc\r\n\r\nThe result of 2 timing tests show that the **plain python version is about twice as fast as the PyTorch version**:\r\n\r\n- home-made simple pure python - 4**40 seconds, 458 seconds**\r\n- simple PyTorch version - **841 seconds, 834 seconds**\r\n\r\n\r\n\r\n### More Detail\r\nHere's a blog which details the experiment conditions in more detail (near the bottom of the post). \r\n\r\n- blog  [http://makeyourownneuralnetwork.blogspot.co.uk/2017/05/learning-mnist-with-gpu-acceleration.html](http://makeyourownneuralnetwork.blogspot.co.uk/2017/05/learning-mnist-with-gpu-acceleration.html)\r\n\r\n\r\n\r\n### What Am I Doing Wrong?\r\nOr does PyTorch have too much overhead for simple scenarios, and only really shines for larger or GPU accelerated cases?"}