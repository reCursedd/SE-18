{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/359266634", "html_url": "https://github.com/pytorch/pytorch/issues/4767#issuecomment-359266634", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/4767", "id": 359266634, "node_id": "MDEyOklzc3VlQ29tbWVudDM1OTI2NjYzNA==", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "created_at": "2018-01-21T17:51:52Z", "updated_at": "2018-01-21T17:51:52Z", "author_association": "MEMBER", "body_html": "<p>Regarding <code>torch.isnan</code> there is a simple trick that allows you to do the same thing (thanks to semantics of IEEE floating point arithmetic):</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">isnan</span>(<span class=\"pl-smi\">x</span>):\n    <span class=\"pl-k\">return</span> x <span class=\"pl-k\">!=</span> x</pre></div>\n<p>While this trick is very simple, I've seen it being confusing quite often, so it would make sense to add it to <code>torch.</code>.</p>\n<p>Regarding <code>numpy.nan</code> there's no reason why you have to use it - it's enough to do <code>float('nan')</code></p>", "body_text": "Regarding torch.isnan there is a simple trick that allows you to do the same thing (thanks to semantics of IEEE floating point arithmetic):\ndef isnan(x):\n    return x != x\nWhile this trick is very simple, I've seen it being confusing quite often, so it would make sense to add it to torch..\nRegarding numpy.nan there's no reason why you have to use it - it's enough to do float('nan')", "body": "Regarding `torch.isnan` there is a simple trick that allows you to do the same thing (thanks to semantics of IEEE floating point arithmetic):\r\n```python\r\ndef isnan(x):\r\n    return x != x\r\n```\r\nWhile this trick is very simple, I've seen it being confusing quite often, so it would make sense to add it to `torch.`.\r\n\r\nRegarding `numpy.nan` there's no reason why you have to use it - it's enough to do `float('nan')`"}