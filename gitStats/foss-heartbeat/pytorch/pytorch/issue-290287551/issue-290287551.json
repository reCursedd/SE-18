{"url": "https://api.github.com/repos/pytorch/pytorch/issues/4767", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/4767/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/4767/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/4767/events", "html_url": "https://github.com/pytorch/pytorch/issues/4767", "id": 290287551, "node_id": "MDU6SXNzdWUyOTAyODc1NTE=", "number": 4767, "title": "[Feature request] torch.isnan and torch.nan", "user": {"login": "mdraw", "id": 6719909, "node_id": "MDQ6VXNlcjY3MTk5MDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/6719909?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mdraw", "html_url": "https://github.com/mdraw", "followers_url": "https://api.github.com/users/mdraw/followers", "following_url": "https://api.github.com/users/mdraw/following{/other_user}", "gists_url": "https://api.github.com/users/mdraw/gists{/gist_id}", "starred_url": "https://api.github.com/users/mdraw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mdraw/subscriptions", "organizations_url": "https://api.github.com/users/mdraw/orgs", "repos_url": "https://api.github.com/users/mdraw/repos", "events_url": "https://api.github.com/users/mdraw/events{/privacy}", "received_events_url": "https://api.github.com/users/mdraw/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 838476895, "node_id": "MDU6TGFiZWw4Mzg0NzY4OTU=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/hackamonth", "name": "hackamonth", "color": "0e8a16", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-01-21T16:57:06Z", "updated_at": "2018-04-01T21:16:59Z", "closed_at": "2018-04-01T21:16:59Z", "author_association": "CONTRIBUTOR", "body_html": "<p>I know it's possible to check for NaN values of torch tensors by using the <code>numpy.isnan()</code> function on CPU tensors, but I think a native <code>torch.isnan()</code> function would be nice to have. I would also propose a constant <code>torch.nan</code> similar to <code>numpy.nan</code> that can be assigned (or compared) to torch tensors for testing purposes.</p>\n<p>My main use case for this is that I want to automatically check losses for NaN values during training and warn the user or terminate training when encountering them.</p>", "body_text": "I know it's possible to check for NaN values of torch tensors by using the numpy.isnan() function on CPU tensors, but I think a native torch.isnan() function would be nice to have. I would also propose a constant torch.nan similar to numpy.nan that can be assigned (or compared) to torch tensors for testing purposes.\nMy main use case for this is that I want to automatically check losses for NaN values during training and warn the user or terminate training when encountering them.", "body": "I know it's possible to check for NaN values of torch tensors by using the `numpy.isnan()` function on CPU tensors, but I think a native `torch.isnan()` function would be nice to have. I would also propose a constant `torch.nan` similar to `numpy.nan` that can be assigned (or compared) to torch tensors for testing purposes.\r\n\r\nMy main use case for this is that I want to automatically check losses for NaN values during training and warn the user or terminate training when encountering them."}