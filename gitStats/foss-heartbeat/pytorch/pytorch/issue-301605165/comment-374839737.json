{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/374839737", "html_url": "https://github.com/pytorch/pytorch/pull/5511#issuecomment-374839737", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/5511", "id": 374839737, "node_id": "MDEyOklzc3VlQ29tbWVudDM3NDgzOTczNw==", "user": {"login": "SsnL", "id": 5674597, "node_id": "MDQ6VXNlcjU2NzQ1OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5674597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SsnL", "html_url": "https://github.com/SsnL", "followers_url": "https://api.github.com/users/SsnL/followers", "following_url": "https://api.github.com/users/SsnL/following{/other_user}", "gists_url": "https://api.github.com/users/SsnL/gists{/gist_id}", "starred_url": "https://api.github.com/users/SsnL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SsnL/subscriptions", "organizations_url": "https://api.github.com/users/SsnL/orgs", "repos_url": "https://api.github.com/users/SsnL/repos", "events_url": "https://api.github.com/users/SsnL/events{/privacy}", "received_events_url": "https://api.github.com/users/SsnL/received_events", "type": "User", "site_admin": false}, "created_at": "2018-03-21T05:52:00Z", "updated_at": "2018-03-21T05:52:21Z", "author_association": "CONTRIBUTOR", "body_html": "<p>The fix is not ideal. You end up with</p>\n<pre><code>&gt;&gt;&gt; m = nn.Upsample(scale_factor=2, mode='bilinear')\n&gt;&gt;&gt; input = torch.arange(1, 5).view(1, 1, 2, 2)\n&gt;&gt;&gt; m(input)\n\n(0 ,0 ,.,.) =\n  1.0000  1.2500  1.7500  2.0000          # &lt;-- this was  1, 1.33, 1.67, 2\n  1.5000  1.7500  2.2500  2.5000\n  2.5000  2.7500  3.2500  3.5000\n  3.0000  3.2500  3.7500  4.0000\n[torch.FloatTensor of size (1,1,4,4)]\n\n&gt;&gt;&gt; input\n\n(0 ,0 ,.,.) =\n  1  2\n  3  4\n[torch.FloatTensor of size (1,1,2,2)]\n</code></pre>\n<p>I suggest doing what tf does, i.e. having an <code>align_corners</code> kwarg. If <code>align_corners=True</code>, it does the current behavior by using <code>(out-1)/(in-1)</code> as ratio, which gives nice images. If <code>align_corners=False</code>, it does the correct but uglier thing, i.e. using <code>out/in</code> as ratio. Since this is in <code>nn</code> domain, it should be defaulted to <code>False</code> as what is done in tf.</p>\n<p>Let me what you think. <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=22355406\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/Dorimer\">@Dorimer</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1310570\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/soumith\">@soumith</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=655866\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/colesbury\">@colesbury</a></p>", "body_text": "The fix is not ideal. You end up with\n>>> m = nn.Upsample(scale_factor=2, mode='bilinear')\n>>> input = torch.arange(1, 5).view(1, 1, 2, 2)\n>>> m(input)\n\n(0 ,0 ,.,.) =\n  1.0000  1.2500  1.7500  2.0000          # <-- this was  1, 1.33, 1.67, 2\n  1.5000  1.7500  2.2500  2.5000\n  2.5000  2.7500  3.2500  3.5000\n  3.0000  3.2500  3.7500  4.0000\n[torch.FloatTensor of size (1,1,4,4)]\n\n>>> input\n\n(0 ,0 ,.,.) =\n  1  2\n  3  4\n[torch.FloatTensor of size (1,1,2,2)]\n\nI suggest doing what tf does, i.e. having an align_corners kwarg. If align_corners=True, it does the current behavior by using (out-1)/(in-1) as ratio, which gives nice images. If align_corners=False, it does the correct but uglier thing, i.e. using out/in as ratio. Since this is in nn domain, it should be defaulted to False as what is done in tf.\nLet me what you think. @Dorimer @soumith @colesbury", "body": "The fix is not ideal. You end up with \r\n```\r\n>>> m = nn.Upsample(scale_factor=2, mode='bilinear')\r\n>>> input = torch.arange(1, 5).view(1, 1, 2, 2)\r\n>>> m(input)\r\n\r\n(0 ,0 ,.,.) =\r\n  1.0000  1.2500  1.7500  2.0000          # <-- this was  1, 1.33, 1.67, 2\r\n  1.5000  1.7500  2.2500  2.5000\r\n  2.5000  2.7500  3.2500  3.5000\r\n  3.0000  3.2500  3.7500  4.0000\r\n[torch.FloatTensor of size (1,1,4,4)]\r\n\r\n>>> input\r\n\r\n(0 ,0 ,.,.) =\r\n  1  2\r\n  3  4\r\n[torch.FloatTensor of size (1,1,2,2)]\r\n```\r\n\r\nI suggest doing what tf does, i.e. having an `align_corners` kwarg. If `align_corners=True`, it does the current behavior by using `(out-1)/(in-1)` as ratio, which gives nice images. If `align_corners=False`, it does the correct but uglier thing, i.e. using `out/in` as ratio. Since this is in `nn` domain, it should be defaulted to `False` as what is done in tf.\r\n\r\nLet me what you think. @Dorimer @soumith @colesbury "}