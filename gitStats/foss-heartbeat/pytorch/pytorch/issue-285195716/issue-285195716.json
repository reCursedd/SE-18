{"url": "https://api.github.com/repos/pytorch/pytorch/issues/4412", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/4412/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/4412/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/4412/events", "html_url": "https://github.com/pytorch/pytorch/issues/4412", "id": 285195716, "node_id": "MDU6SXNzdWUyODUxOTU3MTY=", "number": 4412, "title": "How to use net.cuda() when Network class has list or dict wich contains nn layers?", "user": {"login": "AlexHex7", "id": 30361851, "node_id": "MDQ6VXNlcjMwMzYxODUx", "avatar_url": "https://avatars3.githubusercontent.com/u/30361851?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexHex7", "html_url": "https://github.com/AlexHex7", "followers_url": "https://api.github.com/users/AlexHex7/followers", "following_url": "https://api.github.com/users/AlexHex7/following{/other_user}", "gists_url": "https://api.github.com/users/AlexHex7/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexHex7/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexHex7/subscriptions", "organizations_url": "https://api.github.com/users/AlexHex7/orgs", "repos_url": "https://api.github.com/users/AlexHex7/repos", "events_url": "https://api.github.com/users/AlexHex7/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexHex7/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2017-12-30T10:28:01Z", "updated_at": "2017-12-30T12:49:24Z", "closed_at": "2017-12-30T11:28:55Z", "author_association": "NONE", "body_html": "<p>For example</p>\n<pre><code>class Network(nn.Module):\n    def __init__(self,):\n        super(RegionLayer, self).__init__()\n        self.convs = [nn.Sequential(\n            nn.Conv2d(in_channels=self.in_channels, out_channels=self.in_channels,\n                      kernel_size=3, stride=1, padding=1),\n            nn.Conv2d(in_channels=self.in_channels, out_channels=self.in_channels,\n                      kernel_size=3, stride=1, padding=1),\n        ),\n        nn.Sequential(\n            nn.Conv2d(in_channels=self.in_channels, out_channels=self.in_channels,\n                      kernel_size=3, stride=1, padding=1),\n            nn.Conv2d(in_channels=self.in_channels, out_channels=self.in_channels,\n                      kernel_size=3, stride=1, padding=1),\n        ),]\n    def forward(self, x):\n        output = self.convs[0](x)\n        output = self.convs[1](x)\n        return output\n\nnet = Network()\nnet.cuda()\n</code></pre>\n<p>.cuda() can not put parameters of self.convs'  layers.</p>\n<p>Should I use self.register_parameter API? Or dose it have another easy way?<br>\nThanks!</p>", "body_text": "For example\nclass Network(nn.Module):\n    def __init__(self,):\n        super(RegionLayer, self).__init__()\n        self.convs = [nn.Sequential(\n            nn.Conv2d(in_channels=self.in_channels, out_channels=self.in_channels,\n                      kernel_size=3, stride=1, padding=1),\n            nn.Conv2d(in_channels=self.in_channels, out_channels=self.in_channels,\n                      kernel_size=3, stride=1, padding=1),\n        ),\n        nn.Sequential(\n            nn.Conv2d(in_channels=self.in_channels, out_channels=self.in_channels,\n                      kernel_size=3, stride=1, padding=1),\n            nn.Conv2d(in_channels=self.in_channels, out_channels=self.in_channels,\n                      kernel_size=3, stride=1, padding=1),\n        ),]\n    def forward(self, x):\n        output = self.convs[0](x)\n        output = self.convs[1](x)\n        return output\n\nnet = Network()\nnet.cuda()\n\n.cuda() can not put parameters of self.convs'  layers.\nShould I use self.register_parameter API? Or dose it have another easy way?\nThanks!", "body": "For example\r\n\r\n```\r\nclass Network(nn.Module):\r\n    def __init__(self,):\r\n        super(RegionLayer, self).__init__()\r\n        self.convs = [nn.Sequential(\r\n            nn.Conv2d(in_channels=self.in_channels, out_channels=self.in_channels,\r\n                      kernel_size=3, stride=1, padding=1),\r\n            nn.Conv2d(in_channels=self.in_channels, out_channels=self.in_channels,\r\n                      kernel_size=3, stride=1, padding=1),\r\n        ),\r\n        nn.Sequential(\r\n            nn.Conv2d(in_channels=self.in_channels, out_channels=self.in_channels,\r\n                      kernel_size=3, stride=1, padding=1),\r\n            nn.Conv2d(in_channels=self.in_channels, out_channels=self.in_channels,\r\n                      kernel_size=3, stride=1, padding=1),\r\n        ),]\r\n    def forward(self, x):\r\n        output = self.convs[0](x)\r\n        output = self.convs[1](x)\r\n        return output\r\n\r\nnet = Network()\r\nnet.cuda()\r\n```\r\n\r\n.cuda() can not put parameters of self.convs'  layers.\r\n\r\nShould I use self.register_parameter API? Or dose it have another easy way?\r\nThanks!"}