{"url": "https://api.github.com/repos/pytorch/pytorch/issues/6206", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/6206/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/6206/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/6206/events", "html_url": "https://github.com/pytorch/pytorch/issues/6206", "id": 310619824, "node_id": "MDU6SXNzdWUzMTA2MTk4MjQ=", "number": 6206, "title": "[ppc64le] FAIL: test_tan (test_torch.TestTorch) PyTorch", "user": {"login": "avmgithub", "id": 9083746, "node_id": "MDQ6VXNlcjkwODM3NDY=", "avatar_url": "https://avatars1.githubusercontent.com/u/9083746?v=4", "gravatar_id": "", "url": "https://api.github.com/users/avmgithub", "html_url": "https://github.com/avmgithub", "followers_url": "https://api.github.com/users/avmgithub/followers", "following_url": "https://api.github.com/users/avmgithub/following{/other_user}", "gists_url": "https://api.github.com/users/avmgithub/gists{/gist_id}", "starred_url": "https://api.github.com/users/avmgithub/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/avmgithub/subscriptions", "organizations_url": "https://api.github.com/users/avmgithub/orgs", "repos_url": "https://api.github.com/users/avmgithub/repos", "events_url": "https://api.github.com/users/avmgithub/events{/privacy}", "received_events_url": "https://api.github.com/users/avmgithub/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-04-02T21:36:33Z", "updated_at": "2018-04-03T19:24:25Z", "closed_at": "2018-04-03T19:24:24Z", "author_association": "CONTRIBUTOR", "body_html": "<p>I'm wondering if the precision for the assert just needs to be adjusted on this test.   It happens on Ubuntu 16.04 (on docker container) but not on RedHat 7.4 (baremetal)</p>\n<p>I'm getting:<br>\nFAIL: test_tan (test_torch.TestTorch)<br>\nTraceback (most recent call last):<br>\nFile \"/home/jenkins/pytorch_builder/pytorch/test/test_torch.py\", line 299, in test_tan<br>\nself._testMathByName('tan')<br>\nFile \"/home/jenkins/pytorch_builder/pytorch/test/test_torch.py\", line 262, in _testMathByName<br>\nself._testMath(torchfn, mathfn)<br>\nFile \"/home/jenkins/pytorch_builder/pytorch/test/test_torch.py\", line 257, in _testMath<br>\n_testMathSize((10, 50000), self, torchfn, mathfn, torch.float, precs[1])<br>\nFile \"/home/jenkins/pytorch_builder/pytorch/test/test_torch.py\", line 242, in _testMathSize<br>\nself.assertEqual(res1, res2, prec)<br>\nFile \"/home/jenkins/pytorch_builder/pytorch/test/common.py\", line 253, in assertEqual<br>\nassertTensorsEqual(x, y)<br>\nFile \"/home/jenkins/pytorch_builder/pytorch/test/common.py\", line 245, in assertTensorsEqual<br>\nself.assertLessEqual(max_err, prec, message)<br>\nAssertionError:<br>\n1.00000e-04 *<br>\n9.7656<br>\n[torch.FloatTensor of size ()]<br>\nnot less than or equal to 0.0001 :</p>\n<ul>\n<li>OS: Ubuntu  16.04 (on Docker)</li>\n<li>PyTorch version: (0.4.0a0+4c81282)</li>\n<li>How you installed PyTorch (conda, pip, source):</li>\n<li>Python version: conda 3.6.2</li>\n<li>CUDA/cuDNN version:   cuda 8/ cudnn 6</li>\n</ul>", "body_text": "I'm wondering if the precision for the assert just needs to be adjusted on this test.   It happens on Ubuntu 16.04 (on docker container) but not on RedHat 7.4 (baremetal)\nI'm getting:\nFAIL: test_tan (test_torch.TestTorch)\nTraceback (most recent call last):\nFile \"/home/jenkins/pytorch_builder/pytorch/test/test_torch.py\", line 299, in test_tan\nself._testMathByName('tan')\nFile \"/home/jenkins/pytorch_builder/pytorch/test/test_torch.py\", line 262, in _testMathByName\nself._testMath(torchfn, mathfn)\nFile \"/home/jenkins/pytorch_builder/pytorch/test/test_torch.py\", line 257, in _testMath\n_testMathSize((10, 50000), self, torchfn, mathfn, torch.float, precs[1])\nFile \"/home/jenkins/pytorch_builder/pytorch/test/test_torch.py\", line 242, in _testMathSize\nself.assertEqual(res1, res2, prec)\nFile \"/home/jenkins/pytorch_builder/pytorch/test/common.py\", line 253, in assertEqual\nassertTensorsEqual(x, y)\nFile \"/home/jenkins/pytorch_builder/pytorch/test/common.py\", line 245, in assertTensorsEqual\nself.assertLessEqual(max_err, prec, message)\nAssertionError:\n1.00000e-04 *\n9.7656\n[torch.FloatTensor of size ()]\nnot less than or equal to 0.0001 :\n\nOS: Ubuntu  16.04 (on Docker)\nPyTorch version: (0.4.0a0+4c81282)\nHow you installed PyTorch (conda, pip, source):\nPython version: conda 3.6.2\nCUDA/cuDNN version:   cuda 8/ cudnn 6", "body": "I'm wondering if the precision for the assert just needs to be adjusted on this test.   It happens on Ubuntu 16.04 (on docker container) but not on RedHat 7.4 (baremetal)\r\n\r\nI'm getting:\r\nFAIL: test_tan (test_torch.TestTorch)\r\nTraceback (most recent call last):\r\n  File \"/home/jenkins/pytorch_builder/pytorch/test/test_torch.py\", line 299, in test_tan\r\n    self._testMathByName('tan')\r\n  File \"/home/jenkins/pytorch_builder/pytorch/test/test_torch.py\", line 262, in _testMathByName\r\n    self._testMath(torchfn, mathfn)\r\n  File \"/home/jenkins/pytorch_builder/pytorch/test/test_torch.py\", line 257, in _testMath\r\n    _testMathSize((10, 50000), self, torchfn, mathfn, torch.float, precs[1])\r\n  File \"/home/jenkins/pytorch_builder/pytorch/test/test_torch.py\", line 242, in _testMathSize\r\n    self.assertEqual(res1, res2, prec)\r\n  File \"/home/jenkins/pytorch_builder/pytorch/test/common.py\", line 253, in assertEqual\r\n    assertTensorsEqual(x, y)\r\n  File \"/home/jenkins/pytorch_builder/pytorch/test/common.py\", line 245, in assertTensorsEqual\r\n    self.assertLessEqual(max_err, prec, message)\r\nAssertionError:\r\n1.00000e-04 *\r\n  9.7656\r\n[torch.FloatTensor of size ()]\r\n not less than or equal to 0.0001 :\r\n\r\n\r\n\r\n- OS: Ubuntu  16.04 (on Docker)\r\n- PyTorch version: (0.4.0a0+4c81282)\r\n- How you installed PyTorch (conda, pip, source):\r\n- Python version: conda 3.6.2\r\n- CUDA/cuDNN version:   cuda 8/ cudnn 6\r\n\r\n"}