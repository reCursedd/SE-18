{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/165552898", "pull_request_review_id": 93513005, "id": 165552898, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NTU1Mjg5OA==", "diff_hunk": "@@ -12,11 +13,18 @@ def _type(self, new_type=None, async=False):\n \n     Args:\n         new_type (type or string): The desired type\n-        async (bool): If ``True``, and the source is in pinned memory and\n-                      destination is on the GPU or vice versa, the copy is\n-                      performed asynchronously with respect to the host.\n-                      Otherwise, the argument has no effect.\n+        non_blocking (bool): If ``True``, and the source is in pinned memory\n+            and destination is on the GPU or vice versa, the copy is performed\n+            asynchronously with respect to the host. Otherwise, the argument\n+            has no effect.\n+        **kwargs: For compatibility, may contain the key ``async`` in place of\n+            the ``non_blocking`` argument.\n     \"\"\"\n+    if kwargs:\n+        if len(kwargs) != 1 or 'async' not in kwargs:\n+            raise ValueError(\"kwargs may only contain the key 'async'\")", "path": "torch/_utils.py", "position": null, "original_position": 29, "commit_id": "579275a59ab2c1783f67423d3839afbaa843ddd1", "original_commit_id": "abc41c0a24ebd35634942b47892dc3179c00ebf4", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "Thanks for implementing the BC code, this will definitely help users out :)\r\n\r\nThe comment below is NOT something you should feel obligated to implement, but if you are interested in how to think about the UX of Python APIs, read on :)\r\n\r\nWhen writing code like this, it's good to think about the circumstances a user will see the error. Usually, a user who sees this message will have typed something like:\r\n\r\n```\r\nx._type(aync=True)\r\n```\r\n\r\nWith your code, the error message they'll get is:\r\n\r\n```\r\nkwargs may only contain the key 'async'\r\n```\r\n\r\nThere are two things wrong with this error message:\r\n\r\n1. It makes mention of `kwargs`, which is an implementation detail of the signature (the old function never had kwargs, after all), and\r\n2. It suggests the user to use 'async'... but that's not what we want them to do; we want them to use `non_blocking`, right?\r\n\r\nSo, really we want the error message to behave as if there weren't any kwargs at all, e.g.\r\n\r\n```\r\n>>> sorted([], arf='af')\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\nTypeError: 'arf' is an invalid keyword argument for this function\r\n```\r\n\r\n(If you want to be super-kind, tell the user what valid keyword arguments are.)", "created_at": "2018-02-02T03:45:57Z", "updated_at": "2018-11-23T15:38:58Z", "html_url": "https://github.com/pytorch/pytorch/pull/4999#discussion_r165552898", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4999", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/165552898"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/4999#discussion_r165552898"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4999"}}, "body_html": "<p>Thanks for implementing the BC code, this will definitely help users out :)</p>\n<p>The comment below is NOT something you should feel obligated to implement, but if you are interested in how to think about the UX of Python APIs, read on :)</p>\n<p>When writing code like this, it's good to think about the circumstances a user will see the error. Usually, a user who sees this message will have typed something like:</p>\n<pre><code>x._type(aync=True)\n</code></pre>\n<p>With your code, the error message they'll get is:</p>\n<pre><code>kwargs may only contain the key 'async'\n</code></pre>\n<p>There are two things wrong with this error message:</p>\n<ol>\n<li>It makes mention of <code>kwargs</code>, which is an implementation detail of the signature (the old function never had kwargs, after all), and</li>\n<li>It suggests the user to use 'async'... but that's not what we want them to do; we want them to use <code>non_blocking</code>, right?</li>\n</ol>\n<p>So, really we want the error message to behave as if there weren't any kwargs at all, e.g.</p>\n<pre><code>&gt;&gt;&gt; sorted([], arf='af')\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nTypeError: 'arf' is an invalid keyword argument for this function\n</code></pre>\n<p>(If you want to be super-kind, tell the user what valid keyword arguments are.)</p>", "body_text": "Thanks for implementing the BC code, this will definitely help users out :)\nThe comment below is NOT something you should feel obligated to implement, but if you are interested in how to think about the UX of Python APIs, read on :)\nWhen writing code like this, it's good to think about the circumstances a user will see the error. Usually, a user who sees this message will have typed something like:\nx._type(aync=True)\n\nWith your code, the error message they'll get is:\nkwargs may only contain the key 'async'\n\nThere are two things wrong with this error message:\n\nIt makes mention of kwargs, which is an implementation detail of the signature (the old function never had kwargs, after all), and\nIt suggests the user to use 'async'... but that's not what we want them to do; we want them to use non_blocking, right?\n\nSo, really we want the error message to behave as if there weren't any kwargs at all, e.g.\n>>> sorted([], arf='af')\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nTypeError: 'arf' is an invalid keyword argument for this function\n\n(If you want to be super-kind, tell the user what valid keyword arguments are.)"}