{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/362423854", "html_url": "https://github.com/pytorch/pytorch/pull/4999#issuecomment-362423854", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/4999", "id": 362423854, "node_id": "MDEyOklzc3VlQ29tbWVudDM2MjQyMzg1NA==", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "created_at": "2018-02-01T22:29:52Z", "updated_at": "2018-02-01T22:31:31Z", "author_association": "CONTRIBUTOR", "body_html": "<p>One question for the BC police: should we employ the following idiom to make legacy use of <code>foo.cuda(async=True)</code> keep working?</p>\n<pre><code>def _cuda(self, device=None, non_blocking=False, **kwargs):\n    if 'async' in kwargs:\n       assert not non_blocking\n       non_blocking = kwargs['async']\n</code></pre>\n<p>EDIT: Actually, we should probably also check that async is the only member of kwargs, to guard against mispellings. <code>dict.pop</code> is a decent way to do this; then check if the dictionary is empty at the end.</p>", "body_text": "One question for the BC police: should we employ the following idiom to make legacy use of foo.cuda(async=True) keep working?\ndef _cuda(self, device=None, non_blocking=False, **kwargs):\n    if 'async' in kwargs:\n       assert not non_blocking\n       non_blocking = kwargs['async']\n\nEDIT: Actually, we should probably also check that async is the only member of kwargs, to guard against mispellings. dict.pop is a decent way to do this; then check if the dictionary is empty at the end.", "body": "One question for the BC police: should we employ the following idiom to make legacy use of `foo.cuda(async=True)` keep working?\r\n\r\n```\r\ndef _cuda(self, device=None, non_blocking=False, **kwargs):\r\n    if 'async' in kwargs:\r\n       assert not non_blocking\r\n       non_blocking = kwargs['async']\r\n```\r\n\r\nEDIT: Actually, we should probably also check that async is the only member of kwargs, to guard against mispellings. `dict.pop` is a decent way to do this; then check if the dictionary is empty at the end."}