{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/165528972", "pull_request_review_id": 93485650, "id": 165528972, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NTUyODk3Mg==", "diff_hunk": "@@ -191,17 +191,17 @@ static PyObject * THPVariable_contiguous(PyObject* self, PyObject* args)\n   END_HANDLE_TH_ERRORS\n }\n \n-static Tensor dispatch_copy_(Tensor & self, const Tensor & other, bool async) {\n+static Tensor dispatch_copy_(Tensor & self, const Tensor & other, bool non_blocking) {\n   AutoNoGIL no_gil;\n   AutoGPU auto_gpu(self);\n-  return self.copy_(other, async);\n+  return self.copy_(other, non_blocking);\n }\n \n static PyObject * THPVariable_copy_(PyObject* self, PyObject* args, PyObject* kwargs)\n {\n   HANDLE_TH_ERRORS\n   static PythonArgParser parser({\n-    \"copy_(Tensor other, bool async=False)\"\n+    \"copy_(Tensor other, bool non_blocking=False)\"", "path": "tools/autograd/templates/python_variable_methods.cpp", "position": null, "original_position": 17, "commit_id": "579275a59ab2c1783f67423d3839afbaa843ddd1", "original_commit_id": "a78748fcf26558bb1b0931b4cc5c6b7eccd13bdd", "user": {"login": "colesbury", "id": 655866, "node_id": "MDQ6VXNlcjY1NTg2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/655866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colesbury", "html_url": "https://github.com/colesbury", "followers_url": "https://api.github.com/users/colesbury/followers", "following_url": "https://api.github.com/users/colesbury/following{/other_user}", "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions", "organizations_url": "https://api.github.com/users/colesbury/orgs", "repos_url": "https://api.github.com/users/colesbury/repos", "events_url": "https://api.github.com/users/colesbury/events{/privacy}", "received_events_url": "https://api.github.com/users/colesbury/received_events", "type": "User", "site_admin": false}, "body": "When we merge Variable and Tensor,  I think this will be the only entry point for `copy_`. I think you can just add another entry for async. i.e.:\r\n\r\n```c++\r\n  static PythonArgParser parser({\r\n    \"copy_(Tensor other, bool non_blocking=False)\",\r\n    \"copy_(Tensor other, bool async=False)|deprecated\"\r\n  });\r\n", "created_at": "2018-02-02T00:24:48Z", "updated_at": "2018-11-23T15:38:57Z", "html_url": "https://github.com/pytorch/pytorch/pull/4999#discussion_r165528972", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4999", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/165528972"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/4999#discussion_r165528972"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4999"}}, "body_html": "<p>When we merge Variable and Tensor,  I think this will be the only entry point for <code>copy_</code>. I think you can just add another entry for async. i.e.:</p>\n<div class=\"highlight highlight-source-c++\"><pre>  <span class=\"pl-k\">static</span> PythonArgParser <span class=\"pl-en\">parser</span>({\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>copy_(Tensor other, bool non_blocking=False)<span class=\"pl-pds\">\"</span></span>,\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>copy_(Tensor other, bool async=False)|deprecated<span class=\"pl-pds\">\"</span></span>\n  });</pre></div>", "body_text": "When we merge Variable and Tensor,  I think this will be the only entry point for copy_. I think you can just add another entry for async. i.e.:\n  static PythonArgParser parser({\n    \"copy_(Tensor other, bool non_blocking=False)\",\n    \"copy_(Tensor other, bool async=False)|deprecated\"\n  });"}