{"url": "https://api.github.com/repos/pytorch/pytorch/issues/7197", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/7197/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/7197/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/7197/events", "html_url": "https://github.com/pytorch/pytorch/pull/7197", "id": 319675901, "node_id": "MDExOlB1bGxSZXF1ZXN0MTg1NTMyOTMx", "number": 7197, "title": "Double-dispatch copy.", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-05-02T19:07:44Z", "updated_at": "2018-11-23T15:43:34Z", "closed_at": "2018-05-04T15:58:22Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/7197", "html_url": "https://github.com/pytorch/pytorch/pull/7197", "diff_url": "https://github.com/pytorch/pytorch/pull/7197.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/7197.patch"}, "body_html": "<p>In order to split ATen's CPU/CUDA code into two separate libraries<br>\nwhich don't require a build flag (AT_CUDA_ENABLED) to separate them,<br>\nwe need to be able to split source files based on whether or not they<br>\nhandle CPU functionality only, or also touch CUDA.  Copy poses a unique<br>\nchallenge here, because the naive implementation involves writing<br>\na matrix for all combinations of CPU/GPU in a single file.</p>\n<p>This PR splits up Copy.cpp into CPUCopy.cpp and CUDACopy.cpp, respecting<br>\nthe following matrix:</p>\n<pre><code>to\\from    CPU           CUDA\n      +---------------------------\nCPU   | CPUCopy.cpp   CUDACopy.cpp\nCUDA  | CUDACopy.cpp  CUDACopy.cpp\n</code></pre>\n<p>When you run x.copy_(y) where x is CPU and y is CUDA, we do a second<br>\nvirtual dispatch to copy_from(y, x) on y's type, so that we can get<br>\nfrom CPUCopy.cpp to CUDACopy.cpp</p>\n<p>The new autogenerated code for CPU looks like this:</p>\n<pre><code>Tensor &amp; CPUByteType::s_copy_(Tensor &amp; dst, const Tensor &amp; src, bool non_blocking) const {\n  // code generated by copy_wrapper\n  checked_cast_tensor&lt;CPUByteTensor&gt;(dst.pImpl, \"dst\", 0, false);\n  switch (src.type().ID()) {\n    case TypeID::CPUByte:\n        THByteTensor_copyByte(static_cast&lt;CPUByteTensor*&gt;(dst.pImpl)-&gt;tensor, static_cast&lt;CPUByteTensor*&gt;(src.pImpl)-&gt;tensor);\n        break;\n    case TypeID::CPUChar:\n        THByteTensor_copyChar(static_cast&lt;CPUByteTensor*&gt;(dst.pImpl)-&gt;tensor, static_cast&lt;CPUCharTensor*&gt;(src.pImpl)-&gt;tensor);\n        break;\n    ...\n    default:\n      return src.type().s_copy_from(src, dst, non_blocking);\n</code></pre>\n<p>Notice that the fall through goes to s_copy_from.  s_copy_from is like s_copy<br>\nbut the arguments are reversed.</p>\n<p>This commit is a TEMPORARY state of affairs; when the multiple-dispatcher is online we can get rid of all of this goo.</p>\n<p>Signed-off-by: Edward Z. Yang <a href=\"mailto:ezyang@fb.com\">ezyang@fb.com</a></p>", "body_text": "In order to split ATen's CPU/CUDA code into two separate libraries\nwhich don't require a build flag (AT_CUDA_ENABLED) to separate them,\nwe need to be able to split source files based on whether or not they\nhandle CPU functionality only, or also touch CUDA.  Copy poses a unique\nchallenge here, because the naive implementation involves writing\na matrix for all combinations of CPU/GPU in a single file.\nThis PR splits up Copy.cpp into CPUCopy.cpp and CUDACopy.cpp, respecting\nthe following matrix:\nto\\from    CPU           CUDA\n      +---------------------------\nCPU   | CPUCopy.cpp   CUDACopy.cpp\nCUDA  | CUDACopy.cpp  CUDACopy.cpp\n\nWhen you run x.copy_(y) where x is CPU and y is CUDA, we do a second\nvirtual dispatch to copy_from(y, x) on y's type, so that we can get\nfrom CPUCopy.cpp to CUDACopy.cpp\nThe new autogenerated code for CPU looks like this:\nTensor & CPUByteType::s_copy_(Tensor & dst, const Tensor & src, bool non_blocking) const {\n  // code generated by copy_wrapper\n  checked_cast_tensor<CPUByteTensor>(dst.pImpl, \"dst\", 0, false);\n  switch (src.type().ID()) {\n    case TypeID::CPUByte:\n        THByteTensor_copyByte(static_cast<CPUByteTensor*>(dst.pImpl)->tensor, static_cast<CPUByteTensor*>(src.pImpl)->tensor);\n        break;\n    case TypeID::CPUChar:\n        THByteTensor_copyChar(static_cast<CPUByteTensor*>(dst.pImpl)->tensor, static_cast<CPUCharTensor*>(src.pImpl)->tensor);\n        break;\n    ...\n    default:\n      return src.type().s_copy_from(src, dst, non_blocking);\n\nNotice that the fall through goes to s_copy_from.  s_copy_from is like s_copy\nbut the arguments are reversed.\nThis commit is a TEMPORARY state of affairs; when the multiple-dispatcher is online we can get rid of all of this goo.\nSigned-off-by: Edward Z. Yang ezyang@fb.com", "body": "In order to split ATen's CPU/CUDA code into two separate libraries\r\nwhich don't require a build flag (AT_CUDA_ENABLED) to separate them,\r\nwe need to be able to split source files based on whether or not they\r\nhandle CPU functionality only, or also touch CUDA.  Copy poses a unique\r\nchallenge here, because the naive implementation involves writing\r\na matrix for all combinations of CPU/GPU in a single file.\r\n\r\nThis PR splits up Copy.cpp into CPUCopy.cpp and CUDACopy.cpp, respecting\r\nthe following matrix:\r\n\r\n    to\\from    CPU           CUDA\r\n          +---------------------------\r\n    CPU   | CPUCopy.cpp   CUDACopy.cpp\r\n    CUDA  | CUDACopy.cpp  CUDACopy.cpp\r\n\r\nWhen you run x.copy_(y) where x is CPU and y is CUDA, we do a second\r\nvirtual dispatch to copy_from(y, x) on y's type, so that we can get\r\nfrom CPUCopy.cpp to CUDACopy.cpp\r\n\r\nThe new autogenerated code for CPU looks like this:\r\n\r\n```\r\nTensor & CPUByteType::s_copy_(Tensor & dst, const Tensor & src, bool non_blocking) const {\r\n  // code generated by copy_wrapper\r\n  checked_cast_tensor<CPUByteTensor>(dst.pImpl, \"dst\", 0, false);\r\n  switch (src.type().ID()) {\r\n    case TypeID::CPUByte:\r\n        THByteTensor_copyByte(static_cast<CPUByteTensor*>(dst.pImpl)->tensor, static_cast<CPUByteTensor*>(src.pImpl)->tensor);\r\n        break;\r\n    case TypeID::CPUChar:\r\n        THByteTensor_copyChar(static_cast<CPUByteTensor*>(dst.pImpl)->tensor, static_cast<CPUCharTensor*>(src.pImpl)->tensor);\r\n        break;\r\n    ...\r\n    default:\r\n      return src.type().s_copy_from(src, dst, non_blocking);\r\n```\r\n\r\nNotice that the fall through goes to s_copy_from.  s_copy_from is like s_copy\r\nbut the arguments are reversed.\r\n\r\nThis commit is a TEMPORARY state of affairs; when the multiple-dispatcher is online we can get rid of all of this goo.\r\n\r\nSigned-off-by: Edward Z. Yang <ezyang@fb.com>\r\n\r\n"}