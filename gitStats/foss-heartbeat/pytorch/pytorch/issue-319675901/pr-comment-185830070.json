{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/185830070", "pull_request_review_id": 117299051, "id": 185830070, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NTgzMDA3MA==", "diff_hunk": "@@ -19,90 +16,199 @@\n }\n \"\"\")\n \n+CUDA_INCLUDES = \"\"\"\\\n+#undef THNN_\n+#include \"THC/THC.h\"\n+\"\"\"\n+\n COPY = CodeTemplate(\"\"\"\\\n-${THTensor}_copy${cuda}${src_scalar_name}(${state,}self_->tensor, static_cast<${src_tensor}*>(src.pImpl)->tensor);\n+${THTensor}_copy${cuda}${src_scalar_name}(\n+    ${state,}\n+    static_cast<${dst_tensor}*>(dst.pImpl)->tensor,\n+    static_cast<${src_tensor}*>(src.pImpl)->tensor);\n \"\"\")\n \n COPY_ASYNC_CPU = CodeTemplate(\"\"\"\\\n if (non_blocking) {\n-    ${THTensor}_copyAsyncCPU(${state,}self_->tensor, static_cast<${src_tensor}*>(src.pImpl)->tensor);\n+    ${THTensor}_copyAsyncCPU(\n+        ${state,}\n+        static_cast<${dst_tensor}*>(dst.pImpl)->tensor,\n+        static_cast<${src_tensor}*>(src.pImpl)->tensor);\n     break;\n }\n \"\"\")\n \n COPY_ASYNC_CUDA = CodeTemplate(\"\"\"\\\n if (non_blocking) {\n-    ${THTensor}_copyAsyncCuda(${state,}self_->tensor, static_cast<${src_tensor}*>(src.pImpl)->tensor);\n+    ${THTensor}_copyAsyncCuda(\n+        ${state,}\n+        static_cast<${dst_tensor}*>(dst.pImpl)->tensor,\n+        static_cast<${src_tensor}*>(src.pImpl)->tensor);\n     break;\n }\n \"\"\")\n \n CASE = CodeTemplate(\"\"\"\\\n-case ${src_id}:\n+case ${case_id}:\n     ${copies}\n     break;\n \"\"\")\n \n FUNCTION = CodeTemplate(\"\"\"\\\n-Tensor & ${Type}::s_copy_(Tensor & self, const Tensor & src, bool non_blocking) const {\n-  // code generated by function_wrapper\n-  auto self_ = checked_cast_tensor<${Tensor}>(self.pImpl, \"self\", 0,false);\n-  (void) self_; //silence unused warning\n+Tensor & ${Type}::s_copy_(Tensor & dst, const Tensor & src, bool non_blocking) const {\n+  // code generated by copy_wrapper\n+  checked_cast_tensor<${Tensor}>(dst.pImpl, \"dst\", 0, false);\n   switch (src.type().ID()) {\n     ${copy_body}\n     default:\n-      AT_ERROR(\"copy does not support \", src.type().toString(), \" to \", toString(), \" copy.\");\n+      ${function_fallthrough}\n+  }\n+  dst.pImpl->setScalar(src.pImpl->isScalar());\n+  return dst;\n+}\n+\"\"\")\n+\n+FUNCTION_FALLTHROUGH_REDISPATCH = \"return src.type().s_copy_from(src, dst, non_blocking);\"\n+\n+FUNCTION_FALLTHROUGH_ERROR = \"\"\"\\\n+AT_ERROR(\"copy does not support \", src.type().toString(), \" to \", toString(), \" copy.\");\n+\"\"\"\n+\n+FUNCTION_FROM = CodeTemplate(\"\"\"\\\n+Tensor & ${Type}::s_copy_from(const Tensor & src, Tensor & dst, bool non_blocking) const {\n+  // code generated by copy_wrapper\n+  checked_cast_tensor<${Tensor}>(src.pImpl, \"src\", 0, false);\n+  switch (dst.type().ID()) {\n+    ${copy_body}\n+    default:\n+      AT_ERROR(\"copy does not support \", toString(), \" to \", dst.type().toString(), \" copy.\");\n       break;\n   }\n-  self.pImpl->setScalar(src.pImpl->isScalar());\n-  return self;\n+  dst.pImpl->setScalar(src.pImpl->isScalar());\n+  return dst; // NB! dst\n+}\n+\"\"\")\n+\n+# Technically, no code should actually call s_copy_from with a CPU self (this\n+# only can happen when the src is CUDA from a CPU kernel) but for\n+# completeness we fill out with a swap.\n+FUNCTION_FROM_SWAP = CodeTemplate(\"\"\"\\\n+Tensor & ${Type}::s_copy_from(const Tensor & src, Tensor & dst, bool non_blocking) const {\n+  return dst.type().s_copy_(dst, src, non_blocking);\n }\n \"\"\")\n \n \n-def create_one(env, all_types):\n+# all_types contains ONLY cpu types for a CPU\n+def create_one_copy(dst_type, all_types):\n     copy_body = []\n+\n     for src_type in all_types:\n-        if env['Density'] == 'Sparse' or src_type['Density'] == 'Sparse':\n+        if dst_type['Density'] == 'Sparse' or src_type['Density'] == 'Sparse':\n             # skip sparse copies, which are not yet implemented\n             continue\n+        cuda = ''\n         state = []\n+        if src_type['Backend'] == 'CUDA' or dst_type['Backend'] == 'CUDA':\n+            state.append('context->thc_state')\n+        if src_type['Backend'] == 'CUDA':\n+            if dst_type['Backend'] == 'CUDA':\n+                cuda = 'Cuda'\n+            else:\n+                # don't attempt to process CPU-CUDA; this is handled in the\n+                # redispatch\n+                continue\n+\n+        body_env = nested_dict({\n+            'src_scalar_name': src_type['ScalarName'],\n+            'case_id': src_type['TypeID'],\n+            'src_tensor': src_type['Tensor'],\n+            'dst_tensor': dst_type['Tensor'],\n+            'cuda': cuda,\n+            'state': state,\n+        }, dst_type)\n+\n+        copies = []\n+        if dst_type['ScalarType'] == src_type['ScalarType']:\n+            if dst_type['Backend'] == 'CUDA' and src_type['Backend'] == 'CPU':\n+                copies.append(COPY_ASYNC_CPU.substitute(body_env))\n+        copies.append(COPY.substitute(body_env))\n+\n+        copy_body.append(CASE.substitute(body_env, copies=copies))\n+\n+    if dst_type['Backend'] == 'CPU':\n+        # CPU fallthrough needs to redispatch to s_copy_from\n+        # (Backend == CPU implies Dense)\n+        assert dst_type['Density'] == 'Dense'\n+        function_fallthrough = FUNCTION_FALLTHROUGH_REDISPATCH\n+    else:\n+        function_fallthrough = FUNCTION_FALLTHROUGH_ERROR\n+\n+    env = nested_dict({\n+        'function_fallthrough': function_fallthrough\n+    }, dst_type)\n+    return FUNCTION.substitute(env, copy_body=copy_body)\n+\n+\n+def create_one_copy_from(src_type, all_types):\n+    if src_type['DenseBackend'] == 'CPU':\n+        return FUNCTION_FROM_SWAP.substitute(src_type)\n+\n+    copy_body = []\n+\n+    for dst_type in all_types:\n+        if dst_type['Density'] == 'Sparse' or src_type['Density'] == 'Sparse':\n+            # skip sparse copies, which are not yet implemented\n+            continue\n         cuda = ''\n+        state = []\n         if src_type['Backend'] == 'CUDA':\n             cuda = 'Cuda'\n-        if env['Backend'] == 'CUDA' or src_type['Backend'] == 'CUDA':\n-            state.append('context->thc_state')\n+        if dst_type['Backend'] == 'CUDA' or src_type['Backend'] == 'CUDA':\n+            state = ['context->thc_state']\n \n-        combined = nested_dict({\n+        body_env = nested_dict({\n             'src_scalar_name': src_type['ScalarName'],\n-            'src_id': src_type['TypeID'],\n+            'case_id': dst_type['TypeID'],\n             'src_tensor': src_type['Tensor'],\n+            'dst_tensor': dst_type['Tensor'],\n             'cuda': cuda,\n             'state': state,\n-        }, env)\n+        }, dst_type)\n \n         copies = []\n-        if env['ScalarType'] == src_type['ScalarType']:\n-            if env['Backend'] == 'CUDA' and src_type['Backend'] == 'CPU':\n-                copies.append(COPY_ASYNC_CPU.substitute(combined))\n-            if env['Backend'] == 'CPU' and src_type['Backend'] == 'CUDA':\n-                copies.append(COPY_ASYNC_CUDA.substitute(combined))\n-        copies.append(COPY.substitute(combined))\n-\n-        copy_body.append(CASE.substitute(combined, copies=copies))\n-    return FUNCTION.substitute(env, copy_body=copy_body)\n+        if dst_type['ScalarType'] == src_type['ScalarType']:\n+            if dst_type['Backend'] == 'CPU':", "path": "aten/src/ATen/copy_wrapper.py", "position": null, "original_position": 205, "commit_id": "578200ff1084fad5c708597b2f95b29001a3c88c", "original_commit_id": "1bbe606bf1a96be2923385743e5bc7b45397a1b3", "user": {"login": "gchanan", "id": 3768583, "node_id": "MDQ6VXNlcjM3Njg1ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3768583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gchanan", "html_url": "https://github.com/gchanan", "followers_url": "https://api.github.com/users/gchanan/followers", "following_url": "https://api.github.com/users/gchanan/following{/other_user}", "gists_url": "https://api.github.com/users/gchanan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gchanan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gchanan/subscriptions", "organizations_url": "https://api.github.com/users/gchanan/orgs", "repos_url": "https://api.github.com/users/gchanan/repos", "events_url": "https://api.github.com/users/gchanan/events{/privacy}", "received_events_url": "https://api.github.com/users/gchanan/received_events", "type": "User", "site_admin": false}, "body": "If you feel strongly about it, do it.  Otherwise, I'd just leave this as is.", "created_at": "2018-05-03T15:01:24Z", "updated_at": "2018-11-23T15:43:34Z", "html_url": "https://github.com/pytorch/pytorch/pull/7197#discussion_r185830070", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/7197", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/185830070"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/7197#discussion_r185830070"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/7197"}}, "body_html": "<p>If you feel strongly about it, do it.  Otherwise, I'd just leave this as is.</p>", "body_text": "If you feel strongly about it, do it.  Otherwise, I'd just leave this as is.", "in_reply_to_id": 185652088}