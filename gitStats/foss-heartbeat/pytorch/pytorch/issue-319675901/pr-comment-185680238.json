{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/185680238", "pull_request_review_id": 117117868, "id": 185680238, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NTY4MDIzOA==", "diff_hunk": "@@ -19,90 +16,199 @@\n }\n \"\"\")\n \n+CUDA_INCLUDES = \"\"\"\\\n+#undef THNN_\n+#include \"THC/THC.h\"\n+\"\"\"\n+\n COPY = CodeTemplate(\"\"\"\\\n-${THTensor}_copy${cuda}${src_scalar_name}(${state,}self_->tensor, static_cast<${src_tensor}*>(src.pImpl)->tensor);\n+${THTensor}_copy${cuda}${src_scalar_name}(\n+    ${state,}\n+    static_cast<${dst_tensor}*>(dst.pImpl)->tensor,\n+    static_cast<${src_tensor}*>(src.pImpl)->tensor);\n \"\"\")\n \n COPY_ASYNC_CPU = CodeTemplate(\"\"\"\\\n if (non_blocking) {\n-    ${THTensor}_copyAsyncCPU(${state,}self_->tensor, static_cast<${src_tensor}*>(src.pImpl)->tensor);\n+    ${THTensor}_copyAsyncCPU(\n+        ${state,}\n+        static_cast<${dst_tensor}*>(dst.pImpl)->tensor,\n+        static_cast<${src_tensor}*>(src.pImpl)->tensor);\n     break;\n }\n \"\"\")\n \n COPY_ASYNC_CUDA = CodeTemplate(\"\"\"\\\n if (non_blocking) {\n-    ${THTensor}_copyAsyncCuda(${state,}self_->tensor, static_cast<${src_tensor}*>(src.pImpl)->tensor);\n+    ${THTensor}_copyAsyncCuda(\n+        ${state,}\n+        static_cast<${dst_tensor}*>(dst.pImpl)->tensor,\n+        static_cast<${src_tensor}*>(src.pImpl)->tensor);\n     break;\n }\n \"\"\")\n \n CASE = CodeTemplate(\"\"\"\\\n-case ${src_id}:\n+case ${case_id}:\n     ${copies}\n     break;\n \"\"\")\n \n FUNCTION = CodeTemplate(\"\"\"\\\n-Tensor & ${Type}::s_copy_(Tensor & self, const Tensor & src, bool non_blocking) const {\n-  // code generated by function_wrapper\n-  auto self_ = checked_cast_tensor<${Tensor}>(self.pImpl, \"self\", 0,false);\n-  (void) self_; //silence unused warning\n+Tensor & ${Type}::s_copy_(Tensor & dst, const Tensor & src, bool non_blocking) const {\n+  // code generated by copy_wrapper\n+  checked_cast_tensor<${Tensor}>(dst.pImpl, \"dst\", 0, false);\n   switch (src.type().ID()) {\n     ${copy_body}\n     default:\n-      AT_ERROR(\"copy does not support \", src.type().toString(), \" to \", toString(), \" copy.\");\n+      ${function_fallthrough}\n+  }\n+  dst.pImpl->setScalar(src.pImpl->isScalar());\n+  return dst;\n+}\n+\"\"\")\n+\n+FUNCTION_FALLTHROUGH_REDISPATCH = \"return src.type().s_copy_from(src, dst, non_blocking);\"\n+\n+FUNCTION_FALLTHROUGH_ERROR = \"\"\"\\\n+AT_ERROR(\"copy does not support \", src.type().toString(), \" to \", toString(), \" copy.\");\n+\"\"\"\n+\n+FUNCTION_FROM = CodeTemplate(\"\"\"\\\n+Tensor & ${Type}::s_copy_from(const Tensor & src, Tensor & dst, bool non_blocking) const {\n+  // code generated by copy_wrapper\n+  checked_cast_tensor<${Tensor}>(src.pImpl, \"src\", 0, false);\n+  switch (dst.type().ID()) {\n+    ${copy_body}\n+    default:\n+      AT_ERROR(\"copy does not support \", toString(), \" to \", dst.type().toString(), \" copy.\");\n       break;\n   }\n-  self.pImpl->setScalar(src.pImpl->isScalar());\n-  return self;\n+  dst.pImpl->setScalar(src.pImpl->isScalar());\n+  return dst; // NB! dst\n+}\n+\"\"\")\n+\n+# Technically, no code should actually call s_copy_from with a CPU self (this\n+# only can happen when the src is CUDA from a CPU kernel) but for\n+# completeness we fill out with a swap.\n+FUNCTION_FROM_SWAP = CodeTemplate(\"\"\"\\\n+Tensor & ${Type}::s_copy_from(const Tensor & src, Tensor & dst, bool non_blocking) const {", "path": "aten/src/ATen/copy_wrapper.py", "position": null, "original_position": 104, "commit_id": "578200ff1084fad5c708597b2f95b29001a3c88c", "original_commit_id": "1bbe606bf1a96be2923385743e5bc7b45397a1b3", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "Yeah, it's not public. I'll add an underscore.", "created_at": "2018-05-03T01:13:22Z", "updated_at": "2018-11-23T15:43:33Z", "html_url": "https://github.com/pytorch/pytorch/pull/7197#discussion_r185680238", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/7197", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/185680238"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/7197#discussion_r185680238"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/7197"}}, "body_html": "<p>Yeah, it's not public. I'll add an underscore.</p>", "body_text": "Yeah, it's not public. I'll add an underscore.", "in_reply_to_id": 185651010}