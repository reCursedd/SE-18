{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/185680212", "pull_request_review_id": 117117832, "id": 185680212, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NTY4MDIxMg==", "diff_hunk": "@@ -19,90 +16,199 @@\n }\n \"\"\")\n \n+CUDA_INCLUDES = \"\"\"\\\n+#undef THNN_\n+#include \"THC/THC.h\"\n+\"\"\"\n+\n COPY = CodeTemplate(\"\"\"\\\n-${THTensor}_copy${cuda}${src_scalar_name}(${state,}self_->tensor, static_cast<${src_tensor}*>(src.pImpl)->tensor);\n+${THTensor}_copy${cuda}${src_scalar_name}(\n+    ${state,}\n+    static_cast<${dst_tensor}*>(dst.pImpl)->tensor,\n+    static_cast<${src_tensor}*>(src.pImpl)->tensor);\n \"\"\")\n \n COPY_ASYNC_CPU = CodeTemplate(\"\"\"\\\n if (non_blocking) {\n-    ${THTensor}_copyAsyncCPU(${state,}self_->tensor, static_cast<${src_tensor}*>(src.pImpl)->tensor);\n+    ${THTensor}_copyAsyncCPU(\n+        ${state,}\n+        static_cast<${dst_tensor}*>(dst.pImpl)->tensor,", "path": "aten/src/ATen/copy_wrapper.py", "position": null, "original_position": 34, "commit_id": "578200ff1084fad5c708597b2f95b29001a3c88c", "original_commit_id": "1bbe606bf1a96be2923385743e5bc7b45397a1b3", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "Not just consistency; I'm reusing this code snippet in both the `copy` and `copy_from` bodies, which means that in the first case, the first argument is pre-casted (by the test at the prologue of the function body), but in the second case, it's the *second* argument that is pre-casted. Always applying the static cast lets me reuse the code snippet in both cases, otherwise I need two copies of the code.", "created_at": "2018-05-03T01:13:04Z", "updated_at": "2018-11-23T15:43:33Z", "html_url": "https://github.com/pytorch/pytorch/pull/7197#discussion_r185680212", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/7197", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/185680212"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/7197#discussion_r185680212"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/7197"}}, "body_html": "<p>Not just consistency; I'm reusing this code snippet in both the <code>copy</code> and <code>copy_from</code> bodies, which means that in the first case, the first argument is pre-casted (by the test at the prologue of the function body), but in the second case, it's the <em>second</em> argument that is pre-casted. Always applying the static cast lets me reuse the code snippet in both cases, otherwise I need two copies of the code.</p>", "body_text": "Not just consistency; I'm reusing this code snippet in both the copy and copy_from bodies, which means that in the first case, the first argument is pre-casted (by the test at the prologue of the function body), but in the second case, it's the second argument that is pre-casted. Always applying the static cast lets me reuse the code snippet in both cases, otherwise I need two copies of the code.", "in_reply_to_id": 185642465}