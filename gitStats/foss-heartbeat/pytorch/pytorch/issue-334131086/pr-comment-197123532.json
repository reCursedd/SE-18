{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/197123532", "pull_request_review_id": 130803898, "id": 197123532, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NzEyMzUzMg==", "diff_hunk": "@@ -1606,134 +1640,131 @@\n   variants: []\n   dispatch:\n     SparseCPU: new_with_tensor_and_size_unsafe_sparse\n+    SparseCUDA: new_with_tensor_and_size_unsafe_sparse\n \n - func: _sparse_coo_tensor_unsafe(IndexTensor indices, Tensor values, IntList size) -> Tensor\n   variants: function\n \n \n-- func: native_sparse_raw_resize_(Tensor self, IntList size, int64_t sparseDims, int64_t denseDims) -> Tensor\n-  variants: function\n-  dispatch:\n-    SparseCPU: raw_resize_sparse_\n-\n - func: sparse_raw_resize_(Tensor self, IntList size, int64_t sparseDims, int64_t denseDims) -> Tensor\n   variants: method\n-\n-\n-- func: _native_sparse_mask(Tensor self, SparseTensorRef mask) -> Tensor\n-  variants: function\n   dispatch:\n-    CPU: sparse_mask_cpu\n+    SparseCPU: raw_resize_sparse_\n+    SparseCUDA: raw_resize_sparse_\n+\n \n - func: _sparse_mask(Tensor self, SparseTensorRef mask) -> Tensor\n   variants: method\n-\n-\n-- func: native_to_dense(Tensor self) -> Tensor\n-  variants: function\n   dispatch:\n-    SparseCPU: sparse_to_dense\n+    CPU: sparse_mask_cpu\n+    CUDA: sparse_mask_cuda\n+\n \n - func: to_dense(Tensor self) -> Tensor\n   variants: method\n-\n-\n-- func: _native_sparseDims(Tensor self) -> int64_t\n-  variants: function\n   dispatch:\n-    SparseCPU: _sparseDims_sparse\n+    SparseCPU: sparse_to_dense\n+    SparseCUDA: sparse_to_dense\n+\n \n - func: _sparseDims(Tensor self) -> int64_t\n   variants: method\n+  dispatch:\n+    SparseCPU: _sparseDims_sparse\n+    SparseCUDA: _sparseDims_sparse\n+  device_guard: False\n \n # legacy method\n - func: _dimI(Tensor self) -> int64_t\n   variants: method\n-  dispatch: _sparseDims\n+  dispatch: _sparseDims_sparse\n+  device_guard: False\n \n \n-- func: _native_denseDims(Tensor self) -> int64_t\n-  variants: function\n-  dispatch:\n-    SparseCPU: _denseDims_sparse\n-\n - func: _denseDims(Tensor self) -> int64_t\n   variants: method\n+  dispatch:\n+    SparseCPU: _denseDims_sparse\n+    SparseCUDA: _denseDims_sparse\n+  device_guard: False\n \n # legacy method\n - func: _dimV(Tensor self) -> int64_t\n   variants: method\n-  dispatch: _denseDims\n+  dispatch: _denseDims_sparse\n+  device_guard: False\n \n \n-- func: _native_nnz(Tensor self) -> int64_t\n-  variants: function\n-  dispatch:\n-    SparseCPU: _nnz_sparse\n-\n - func: _nnz(Tensor self) -> int64_t\n   variants: method\n-\n-\n-- func: native_coalesce(Tensor self) -> Tensor\n-  variants: function\n   dispatch:\n-    SparseCPU: coalesce_sparse_cpu\n+    SparseCPU: _nnz_sparse\n+    SparseCUDA: _nnz_sparse\n+  device_guard: False\n+\n \n - func: coalesce(Tensor self) -> Tensor\n   variants: method\n-\n-\n-- func: native_is_coalesced(Tensor self) -> bool\n-  variants: function\n   dispatch:\n-    SparseCPU: is_coalesced_sparse\n+    SparseCPU: coalesce_sparse_cpu\n+    SparseCUDA: coalesce_sparse_cuda\n+\n \n - func: is_coalesced(Tensor self) -> bool\n   variants: method\n-\n-\n-- func: _native_indices(Tensor self) -> Tensor\n-  variants: function\n   dispatch:\n-    SparseCPU: _indices_sparse\n+    SparseCPU: is_coalesced_sparse\n+    SparseCUDA: is_coalesced_sparse\n+  device_guard: False\n+\n \n - func: _indices(Tensor self) -> Tensor\n   variants: method\n-\n-\n-- func: _native_values(Tensor self) -> Tensor\n-  variants: function\n   dispatch:\n-    SparseCPU: _values_sparse\n+    SparseCPU: _indices_sparse\n+    SparseCUDA: _indices_sparse\n+  device_guard: False\n+\n \n - func: _values(Tensor self) -> Tensor\n   variants: method\n+  dispatch:\n+    SparseCPU: _values_sparse\n+    SparseCUDA: _values_sparse\n+  device_guard: False\n \n \n-- func: native_hspmm_out(Tensor result, Tensor mat1, Tensor mat2) -> Tensor\n+- func: hspmm_out(Tensor result, Tensor mat1, Tensor mat2) -> Tensor\n   variants: function\n   dispatch:\n     SparseCPU: hspmm_out_sparse_cpu\n+    SparseCUDA: hspmm_out_sparse_cuda\n \n-- func: native_hspmm(Tensor mat1, Tensor mat2) -> Tensor\n+- func: hspmm(Tensor mat1, Tensor mat2) -> Tensor\n   variants: function\n   dispatch:\n     SparseCPU: hspmm_sparse_cpu\n-\n-- func: hspmm_out(Tensor result, Tensor mat1, Tensor mat2) -> Tensor\n-  variants: function\n-\n-- func: hspmm(Tensor mat1, Tensor mat2) -> Tensor\n-  variants: function\n+    SparseCUDA: hspmm_sparse_cuda\n \n # This \"raw copy\" doesn't handle conversions NOR does it handle non-blocking.\n - func: raw_copy_sparse_(Tensor self, Tensor src) -> Tensor\n   variants: function\n   dispatch:\n     SparseCPU: copy_sparse_\n+    SparseCUDA: copy_sparse_\n \n - func: numel(Tensor self) -> int64_t\n   variants:\n     - method\n     - function\n+  device_guard: False\n+\n+\n+- func: native_get_device(Tensor self) -> int64_t", "path": "aten/src/ATen/native/native_functions.yaml", "position": 415, "original_position": 415, "commit_id": "1a3c38e577f84307b7b6f7c8e49818fde11f343f", "original_commit_id": "c11ea30b5dc65385ffe2f12f9664f658d7ca4d97", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "It's got a dispatch, it doesn't have to be defined:\r\n\r\n```\r\n- func: native_get_device(Tensor self) -> int64_t\r\n  variants: function\r\n  dispatch:\r\n    SparseCUDA: get_device_sparse_cuda\r\n  device_guard: False\r\n```", "created_at": "2018-06-21T13:01:56Z", "updated_at": "2018-11-23T15:45:58Z", "html_url": "https://github.com/pytorch/pytorch/pull/8689#discussion_r197123532", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/8689", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/197123532"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/8689#discussion_r197123532"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/8689"}}, "body_html": "<p>It's got a dispatch, it doesn't have to be defined:</p>\n<pre><code>- func: native_get_device(Tensor self) -&gt; int64_t\n  variants: function\n  dispatch:\n    SparseCUDA: get_device_sparse_cuda\n  device_guard: False\n</code></pre>", "body_text": "It's got a dispatch, it doesn't have to be defined:\n- func: native_get_device(Tensor self) -> int64_t\n  variants: function\n  dispatch:\n    SparseCUDA: get_device_sparse_cuda\n  device_guard: False", "in_reply_to_id": 196959880}