{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/196965485", "pull_request_review_id": 130604324, "id": 196965485, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5Njk2NTQ4NQ==", "diff_hunk": "@@ -0,0 +1,59 @@\n+#include <ATen/ATen.h>\n+#include <ATen/NativeFunctions.h>\n+\n+#include <ATen/native/sparse/SparseUtils.h>\n+\n+namespace at { namespace native {\n+\n+SparseTensor& sparse_mask_out_cuda(SparseTensor& r, const Tensor& t, const SparseTensor& mask) {\n+  AT_CHECK(mask.is_coalesced(), \"sparse_mask: mask is uncoalesced\");\n+  AT_CHECK(mask.sizes().equals(t.sizes()), \"sparse_mask: operands have incompatible sizes; self has size \",\n+      t.sizes(), \" but mask has size \", mask.sizes());\n+  AT_CHECK(_check_device({r, t, mask}),\n+      \"sparse_mask: arguments are located on different devices; self is on device \", t.get_device(),\n+      \", mask is on device \", mask.get_device(), \", out is on device \", r.get_device());\n+  resize_as_sparse_(r, mask);\n+  if (mask._nnz() == 0) {\n+    r.zero_();\n+    return r;\n+  }\n+  LongTensor mask_indices = mask._indices();\n+  Tensor mask_values = mask._values();\n+  Tensor r_values = r._values().type().tensor(mask_values.sizes());\n+  _alias_into_sparse(r, mask_indices.clone(), r_values);\n+  _get_sparse_impl(r)->set_coalesced(mask.is_coalesced());\n+  _get_sparse_impl(r)->set_nnz(mask._nnz());\n+\n+  LongTensor indices = at::zeros({mask._nnz()}, mask_indices.type());", "path": "aten/src/ATen/native/sparse/cuda/SparseCUDATensor.cpp", "position": null, "original_position": 27, "commit_id": "1a3c38e577f84307b7b6f7c8e49818fde11f343f", "original_commit_id": "c11ea30b5dc65385ffe2f12f9664f658d7ca4d97", "user": {"login": "gchanan", "id": 3768583, "node_id": "MDQ6VXNlcjM3Njg1ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3768583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gchanan", "html_url": "https://github.com/gchanan", "followers_url": "https://api.github.com/users/gchanan/followers", "following_url": "https://api.github.com/users/gchanan/following{/other_user}", "gists_url": "https://api.github.com/users/gchanan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gchanan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gchanan/subscriptions", "organizations_url": "https://api.github.com/users/gchanan/orgs", "repos_url": "https://api.github.com/users/gchanan/repos", "events_url": "https://api.github.com/users/gchanan/events{/privacy}", "received_events_url": "https://api.github.com/users/gchanan/received_events", "type": "User", "site_admin": false}, "body": "this is deprecated I think.", "created_at": "2018-06-20T22:46:20Z", "updated_at": "2018-11-23T15:45:58Z", "html_url": "https://github.com/pytorch/pytorch/pull/8689#discussion_r196965485", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/8689", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/196965485"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/8689#discussion_r196965485"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/8689"}}, "body_html": "<p>this is deprecated I think.</p>", "body_text": "this is deprecated I think."}