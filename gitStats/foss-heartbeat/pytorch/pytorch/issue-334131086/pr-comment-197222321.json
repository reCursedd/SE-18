{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/197222321", "pull_request_review_id": 130925222, "id": 197222321, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NzIyMjMyMQ==", "diff_hunk": "@@ -0,0 +1,324 @@\n+#pragma once\n+\n+#include <ATen/cuda/detail/TensorInfo.cuh>\n+#include <THC/THCNumerics.cuh>\n+\n+namespace at { namespace native {\n+\n+namespace apply {\n+\n+using at::cuda::detail::TensorInfo;\n+using indexT = int64_t;\n+\n+const int WARP_SIZE = 32;\n+\n+template <typename IndexType, typename Real, typename Op>\n+__device__ void applyOp2(\n+    Op op, IndexType blockSize,\n+    TensorInfo<Real, IndexType> values1, IndexType idx1,\n+    TensorInfo<Real, IndexType> values2, IndexType idx2) {\n+  for (IndexType k = blockIdx.x * blockDim.x + threadIdx.x;\n+       k < blockSize;\n+       k += gridDim.x * blockDim.x) {\n+    op(values1.data + idx1 * blockSize + k, values2.data + idx2 * blockSize + k);\n+  }\n+}\n+\n+template <typename IndexType, typename Real, typename Op>\n+__device__ void applyOp3(\n+    Op op, IndexType blockSize,\n+    TensorInfo<Real, IndexType> values1, IndexType idx1,\n+    TensorInfo<Real, IndexType> values2, IndexType idx2,\n+    TensorInfo<Real, IndexType> values3, IndexType idx3) {\n+  for (IndexType k = blockIdx.x * blockDim.x + threadIdx.x;\n+       k < blockSize;\n+       k += gridDim.x * blockDim.x) {\n+    op(values1.data + idx1 * blockSize + k,\n+       values2.data + idx2 * blockSize + k,\n+       values3.data + idx3 * blockSize + k);\n+  }\n+}\n+\n+template <typename Op, typename IndexType, typename Real>\n+__global__ void sparseElementwiseKernel(\n+    Op op,\n+    TensorInfo<Real, IndexType> dense,\n+    TensorInfo<indexT, IndexType> indices,\n+    TensorInfo<Real, IndexType> values,\n+    const IndexType nnz) {\n+  IndexType indskip = indices.strides[0];\n+  IndexType valueSize = values.strides[0];\n+  for (IndexType linearId = blockIdx.x;\n+       linearId < nnz;\n+       linearId += gridDim.x) {\n+    IndexType index = 0;\n+    for (IndexType d = 0; d < indices.sizes[0]; d++) {\n+      index = dense.sizes[d] * index + indices.data[d * indskip + linearId];\n+    }\n+    Real *dst = dense.data + index * valueSize;\n+    Real *src = values.data + linearId * valueSize;\n+    for (IndexType linearId2 = threadIdx.x; linearId2 < valueSize; linearId2 += blockDim.x) {\n+      op(dst + linearId2, src + linearId2);\n+    }\n+  }\n+}\n+\n+template <typename Op, typename IndexType, typename Real>\n+__global__ void sparseElementwiseKernelScalar(\n+    Op op,\n+    TensorInfo<Real, IndexType> dense,\n+    TensorInfo<indexT, IndexType> indices,\n+    TensorInfo<Real, IndexType> values,\n+    const IndexType nnz) {\n+  IndexType indskip = indices.strides[0];", "path": "aten/src/ATen/native/sparse/cuda/SparseCUDAApplyUtils.cuh", "position": null, "original_position": 73, "commit_id": "1a3c38e577f84307b7b6f7c8e49818fde11f343f", "original_commit_id": "c11ea30b5dc65385ffe2f12f9664f658d7ca4d97", "user": {"login": "gchanan", "id": 3768583, "node_id": "MDQ6VXNlcjM3Njg1ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3768583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gchanan", "html_url": "https://github.com/gchanan", "followers_url": "https://api.github.com/users/gchanan/followers", "following_url": "https://api.github.com/users/gchanan/following{/other_user}", "gists_url": "https://api.github.com/users/gchanan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gchanan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gchanan/subscriptions", "organizations_url": "https://api.github.com/users/gchanan/orgs", "repos_url": "https://api.github.com/users/gchanan/repos", "events_url": "https://api.github.com/users/gchanan/events{/privacy}", "received_events_url": "https://api.github.com/users/gchanan/received_events", "type": "User", "site_admin": false}, "body": "Because you are accessing strides[0] without checking the dimensionality :).", "created_at": "2018-06-21T17:48:17Z", "updated_at": "2018-11-23T15:46:01Z", "html_url": "https://github.com/pytorch/pytorch/pull/8689#discussion_r197222321", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/8689", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/197222321"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/8689#discussion_r197222321"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/8689"}}, "body_html": "<p>Because you are accessing strides[0] without checking the dimensionality :).</p>", "body_text": "Because you are accessing strides[0] without checking the dimensionality :).", "in_reply_to_id": 196965976}