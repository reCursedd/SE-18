{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/197484668", "pull_request_review_id": 131242993, "id": 197484668, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NzQ4NDY2OA==", "diff_hunk": "@@ -0,0 +1,127 @@\n+#include <ATen/ATen.h>\n+#include <ATen/SparseTensorImpl.h>\n+\n+namespace at { namespace native {\n+\n+// Just for documentary purposes\n+using SparseTensor = Tensor;\n+using LongTensor = Tensor;\n+using IntTensor = Tensor;\n+using SparseType = Type;\n+\n+namespace {\n+\n+// This is an internal utility function for getting at the SparseTensorImpl,\n+// so that we can write sparse tensor specific accessors for special fields\n+// in SparseTensor.  You should only use this for writing low level\n+// setters/getters for SparseTensorImpl fields; otherwise, you should use\n+// the low level setters/getters that were implemented using this.\n+//\n+// This may be called repeatedly, so make sure it's pretty cheap.\n+SparseTensorImpl* _get_sparse_impl(const SparseTensor& self) {\n+  if (!self.is_sparse()) AT_ERROR(\"_internal_get_SparseTensorImpl: not a sparse tensor\");\n+  return static_cast<SparseTensorImpl*>(self.unsafeGetTensorImpl());\n+}\n+\n+// Port of the old THCSTensor_(checkGPU), but it doesn't really belong here\n+// because it is more general\n+// NB: I dropped kernelP2PEnabled support\n+// NB: This does NOT assume that the tensors are GPU tensors; if they're\n+// all CPU that's OK too\n+inline bool _check_device(ArrayRef<Tensor> ts) {\n+  if (ts.empty()) {\n+    return true;\n+  }\n+  const Tensor& ref_t = ts.front();\n+  int64_t curDevice = -1;\n+  if (ref_t.is_cuda()) {\n+    curDevice = current_device();\n+  }\n+  for (const Tensor& t : ts) {\n+    if (t.get_device() != curDevice) return false;\n+  }\n+  return true;\n+}\n+\n+inline void _raw_resize_sparse(const SparseTensor& self, int64_t sparseDims, int64_t denseDims, ArrayRef<int64_t> size) {\n+  _get_sparse_impl(self)->raw_resize_(sparseDims, denseDims, size);\n+}\n+\n+// Takes indices and values and directly puts them into the sparse tensor, no\n+// copy.  This used to be called THSTensor_(_move)\n+inline void _alias_into_sparse(const SparseTensor& self, const LongTensor& indices, const Tensor& values) {\n+  _get_sparse_impl(self)->set_indices_and_values(indices, values);\n+}\n+\n+// Take indices and values and makes a (data) copy of them to put into the sparse\n+// indices/values.  This used to be called THSTensor_(_set)\n+inline void _copy_into_sparse(const SparseTensor& self, const LongTensor& indices, const Tensor& values) {\n+  _alias_into_sparse(self, indices.clone(), values.clone());\n+}\n+\n+// Does NOT make copies of indices/values\n+inline SparseTensor _new_with_dims_and_tensor_sparse(\n+    const SparseType& dtype,\n+    int64_t sparseDims,", "path": "aten/src/ATen/native/sparse/SparseUtils.h", "position": 64, "original_position": 65, "commit_id": "1a3c38e577f84307b7b6f7c8e49818fde11f343f", "original_commit_id": "c11ea30b5dc65385ffe2f12f9664f658d7ca4d97", "user": {"login": "gchanan", "id": 3768583, "node_id": "MDQ6VXNlcjM3Njg1ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3768583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gchanan", "html_url": "https://github.com/gchanan", "followers_url": "https://api.github.com/users/gchanan/followers", "following_url": "https://api.github.com/users/gchanan/following{/other_user}", "gists_url": "https://api.github.com/users/gchanan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gchanan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gchanan/subscriptions", "organizations_url": "https://api.github.com/users/gchanan/orgs", "repos_url": "https://api.github.com/users/gchanan/repos", "events_url": "https://api.github.com/users/gchanan/events{/privacy}", "received_events_url": "https://api.github.com/users/gchanan/received_events", "type": "User", "site_admin": false}, "body": "what you've done sounds fine to me.", "created_at": "2018-06-22T15:34:37Z", "updated_at": "2018-11-23T15:46:06Z", "html_url": "https://github.com/pytorch/pytorch/pull/8689#discussion_r197484668", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/8689", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/197484668"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/8689#discussion_r197484668"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/8689"}}, "body_html": "<p>what you've done sounds fine to me.</p>", "body_text": "what you've done sounds fine to me.", "in_reply_to_id": 196962874}