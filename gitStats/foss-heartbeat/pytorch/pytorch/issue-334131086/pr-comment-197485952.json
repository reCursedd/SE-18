{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/197485952", "pull_request_review_id": 131243833, "id": 197485952, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NzQ4NTk1Mg==", "diff_hunk": "@@ -22,18 +22,35 @@ struct SparseTensorImpl : public TensorImpl {\n   // 4) For _values.shape, the non-nnz dimensions may be smaller than the corresponding dimension size, e.g.\n   //    a shape (2,3) sparse tensor with _sparseDims == 1, may have _values.shape: (nnz, <=2, <=3).\n \n+\n+  // The true size of the sparse tensor (e.g., if you called to_dense()\n+  // on it).  When THTensor merges into TensorImpl, this field\n+  // should move to the parent class.\n   std::vector<int64_t> size_;\n+\n+  // The number of non-zero elements.\n+  // INVARIANT: indices_.size(1) >= nnz_ && values_.size(0) >= nnz_\n+  // TODO: There isn't really any good reason for the invariant to\n+  // be relaxed like this; we should have these inequalities be\n+  // equalities.  This will let us simplify _indices() and _values()\n+  // methods.\n   int64_t nnz_ = 0;\n+\n   int64_t sparseDims_ = 0; // number of sparse dimensions\n   int64_t denseDims_ = 0; // number of dense dimensions\n \n   // 2-D tensor of nDim x nnz of indices. May have nnz dim bigger than nnz\n   // as buffer, so we keep track of both\n   Tensor indices_; // always a LongTensor\n+\n+  // (1+denseDims)-D tensor of nnx x dim0 x dim1 x ... of values.  As with", "path": "aten/src/ATen/SparseTensorImpl.h", "position": null, "original_position": 25, "commit_id": "1a3c38e577f84307b7b6f7c8e49818fde11f343f", "original_commit_id": "d326be0be823da5c43e5ed5162dfdfc63dfb6063", "user": {"login": "gchanan", "id": 3768583, "node_id": "MDQ6VXNlcjM3Njg1ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3768583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gchanan", "html_url": "https://github.com/gchanan", "followers_url": "https://api.github.com/users/gchanan/followers", "following_url": "https://api.github.com/users/gchanan/following{/other_user}", "gists_url": "https://api.github.com/users/gchanan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gchanan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gchanan/subscriptions", "organizations_url": "https://api.github.com/users/gchanan/orgs", "repos_url": "https://api.github.com/users/gchanan/repos", "events_url": "https://api.github.com/users/gchanan/events{/privacy}", "received_events_url": "https://api.github.com/users/gchanan/received_events", "type": "User", "site_admin": false}, "body": "nnz instead of nnx.  By the way, you can get rid of these comments if you want, all the ideal vs actual invariants are now listed on the top of the file and we can fix them one by one once we have n-dimensional empty tensors enabled :).", "created_at": "2018-06-22T15:38:53Z", "updated_at": "2018-11-23T15:46:07Z", "html_url": "https://github.com/pytorch/pytorch/pull/8689#discussion_r197485952", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/8689", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/197485952"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/8689#discussion_r197485952"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/8689"}}, "body_html": "<p>nnz instead of nnx.  By the way, you can get rid of these comments if you want, all the ideal vs actual invariants are now listed on the top of the file and we can fix them one by one once we have n-dimensional empty tensors enabled :).</p>", "body_text": "nnz instead of nnx.  By the way, you can get rid of these comments if you want, all the ideal vs actual invariants are now listed on the top of the file and we can fix them one by one once we have n-dimensional empty tensors enabled :)."}