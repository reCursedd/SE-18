{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/196955945", "pull_request_review_id": 130604324, "id": 196955945, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5Njk1NTk0NQ==", "diff_hunk": "@@ -296,47 +268,35 @@ Tensor& div_(Tensor& self, Scalar other) {\n }\n \n Tensor& addmm_out(Tensor& result, const Tensor& self, const Tensor& mat1, const Tensor& mat2, Scalar beta, Scalar alpha) {\n-  if (!self.is_cuda()) {\n-    // See Note [CPU sparse is globally native] and Note [Multiple dispatch to sparse]\n-    auto mat1_sparse = mat1.is_sparse();\n-    if (mat1_sparse) {\n-      Tensor b_self;\n-      std::tie(b_self) = expand_size(self, {mat1.size(0), mat2.size(1)}, \"addmm_out\");\n-      return s_native_addmm_out(result, b_self, mat1, mat2, beta, alpha);\n-    } else {\n-      return th_addmm_out(result, self, mat1, mat2, beta, alpha);\n-    }\n+  // See Note [CPU sparse is globally native] and Note [Multiple dispatch to sparse]\n+  auto mat1_sparse = mat1.is_sparse();\n+  if (mat1_sparse) {\n+    Tensor b_self;\n+    std::tie(b_self) = expand_size(self, {mat1.size(0), mat2.size(1)}, \"addmm_out\");\n+    return s_native_addmm_out(result, b_self, mat1, mat2, beta, alpha);\n   } else {\n     return th_addmm_out(result, self, mat1, mat2, beta, alpha);\n   }\n }\n \n Tensor addmm(const Tensor& self, const Tensor& mat1, const Tensor& mat2, Scalar beta, Scalar alpha) {\n-  if (!self.is_cuda()) {\n-    // See Note [CPU sparse is globally native] and Note [Multiple dispatch to sparse]\n-    auto mat1_sparse = mat1.is_sparse();\n-    if (mat1_sparse) {\n-      Tensor b_self;\n-      std::tie(b_self) = expand_size(self, {mat1.size(0), mat2.size(1)}, \"addmm\");\n-      return s_native_addmm(b_self, mat1, mat2, beta, alpha);\n-    } else {\n-      return th_addmm(self, mat1, mat2, beta, alpha);\n-    }\n+  // See Note [CPU sparse is globally native] and Note [Multiple dispatch to sparse]", "path": "aten/src/ATen/native/LegacyBridge.cpp", "position": null, "original_position": 181, "commit_id": "1a3c38e577f84307b7b6f7c8e49818fde11f343f", "original_commit_id": "694493f0b46f8f1ebbb76a4130beecda618d7861", "user": {"login": "gchanan", "id": 3768583, "node_id": "MDQ6VXNlcjM3Njg1ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3768583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gchanan", "html_url": "https://github.com/gchanan", "followers_url": "https://api.github.com/users/gchanan/followers", "following_url": "https://api.github.com/users/gchanan/following{/other_user}", "gists_url": "https://api.github.com/users/gchanan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gchanan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gchanan/subscriptions", "organizations_url": "https://api.github.com/users/gchanan/orgs", "repos_url": "https://api.github.com/users/gchanan/repos", "events_url": "https://api.github.com/users/gchanan/events{/privacy}", "received_events_url": "https://api.github.com/users/gchanan/received_events", "type": "User", "site_admin": false}, "body": "and here.", "created_at": "2018-06-20T21:59:29Z", "updated_at": "2018-11-23T15:45:57Z", "html_url": "https://github.com/pytorch/pytorch/pull/8689#discussion_r196955945", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/8689", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/196955945"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/8689#discussion_r196955945"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/8689"}}, "body_html": "<p>and here.</p>", "body_text": "and here."}