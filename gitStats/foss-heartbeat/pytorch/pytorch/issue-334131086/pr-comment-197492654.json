{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/197492654", "pull_request_review_id": 131243833, "id": 197492654, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NzQ5MjY1NA==", "diff_hunk": "@@ -0,0 +1,131 @@\n+#include <ATen/ATen.h>\n+#include <ATen/SparseTensorImpl.h>\n+\n+#include <TH/THGeneral.h>\n+\n+namespace at { namespace native {\n+\n+// Just for documentary purposes\n+using SparseTensor = Tensor;\n+using LongTensor = Tensor;\n+using IntTensor = Tensor;\n+using SparseType = Type;\n+\n+namespace {\n+\n+// This is an internal utility function for getting at the SparseTensorImpl,\n+// so that we can write sparse tensor specific accessors for special fields\n+// in SparseTensor.  You should only use this for writing low level\n+// setters/getters for SparseTensorImpl fields; otherwise, you should use\n+// the low level setters/getters that were implemented using this.\n+//\n+// This may be called repeatedly, so make sure it's pretty cheap.\n+SparseTensorImpl* _get_sparse_impl(const SparseTensor& self) {\n+  if (!self.is_sparse()) AT_ERROR(\"_internal_get_SparseTensorImpl: not a sparse tensor\");\n+  return static_cast<SparseTensorImpl*>(self.unsafeGetTensorImpl());\n+}\n+\n+// Port of the old THCSTensor_(checkGPU), but it doesn't really belong here\n+// because it is more general\n+// NB: I dropped kernelP2PEnabled support\n+// NB: This only works if the tensors are KNOWN to be CUDA.\n+// TODO: Generalize it so it works on CPU as well\n+inline bool _check_device(ArrayRef<Tensor> ts) {\n+  if (ts.empty()) {\n+    return true;\n+  }\n+  const Tensor& ref_t = ts.front();\n+  int64_t curDevice = current_device();\n+  for (const Tensor& t : ts) {\n+    if (t.get_device() != curDevice) return false;\n+  }\n+  return true;\n+}\n+\n+inline void _raw_resize_sparse(const SparseTensor& self, int64_t sparseDims, int64_t denseDims, IntList size) {\n+  _get_sparse_impl(self)->raw_resize_(sparseDims, denseDims, size);\n+}\n+\n+// Takes indices and values and directly puts them into the sparse tensor, no\n+// copy.  This used to be called THSTensor_(_move)\n+inline void _alias_into_sparse(const SparseTensor& self, const LongTensor& indices, const Tensor& values) {\n+  _get_sparse_impl(self)->set_indices_and_values(indices, values);\n+}\n+\n+// Take indices and values and makes a (data) copy of them to put into the sparse\n+// indices/values.  This used to be called THSTensor_(_set)\n+inline void _copy_into_sparse(const SparseTensor& self, const LongTensor& indices, const Tensor& values) {\n+  _alias_into_sparse(self, indices.clone(), values.clone());\n+}\n+\n+// Does NOT make copies of indices/values\n+inline SparseTensor _new_with_dims_and_tensor_sparse(\n+    const SparseType& dtype,\n+    int64_t sparseDims,\n+    int64_t denseDims,\n+    ArrayRef<int64_t> sizes,\n+    const LongTensor& indices,\n+    const Tensor& values) {\n+  SparseTensor self = new_sparse(dtype);\n+  _raw_resize_sparse(self, sparseDims, denseDims, sizes);\n+  _alias_into_sparse(self, indices, values);\n+  return self;\n+}\n+\n+// TODO: put this into the public API\n+inline bool isSameTensor(const Tensor& lhs, const Tensor& rhs) {\n+  return lhs.unsafeGetTensorImpl() == rhs.unsafeGetTensorImpl();\n+}\n+\n+inline bool _is_same_density(const SparseTensor& self, const SparseTensor& src) {\n+  return self._sparseDims() == src._sparseDims() && self._denseDims() == src._denseDims();\n+}\n+\n+// if forceClone is true, the result will forced to be a clone of self.\n+inline LongTensor _newFlattenedIndices(const SparseTensor& self, bool forceClone) {\n+  LongTensor indices = self._indices();\n+  int64_t sparseDims = self._sparseDims();\n+  if (sparseDims == 1) {\n+    if (forceClone) {\n+      return indices.clone();\n+    } else {\n+      return indices;\n+    }\n+  } else {\n+    // FIXME TH_INDEX_BASE\n+    int64_t factor = 1;\n+    LongTensor indices1D = at::empty({1, self._nnz()}, indices.options());\n+    indices1D.fill_(TH_INDEX_BASE);\n+    for (int64_t d = sparseDims - 1; d >= 0; d--) {\n+      indices1D.add_(indices.select(0, d), factor);\n+      if (TH_INDEX_BASE != 0) {\n+        indices1D.add_(-TH_INDEX_BASE);\n+      }\n+      factor *= self.size(d);\n+    }\n+    return indices1D;\n+  }\n+}\n+\n+// Give us a new values tensor, with the same dimensionality\n+// as 'values' but with a new number of non-zero elements.\n+// TODO: Expose this for real in ATen, some day?\n+// NB: Doesn't preserve data.\n+inline Tensor _new_values_with_size_of(const Tensor& values, int64_t nnz) {\n+  if (values.numel() == 0) { // values tensor uninitialized\n+    // TODO: This logic looks bogus; if we have an uninitialized", "path": "aten/src/ATen/native/sparse/SparseUtils.h", "position": 116, "original_position": 116, "commit_id": "1a3c38e577f84307b7b6f7c8e49818fde11f343f", "original_commit_id": "c7d4a43fe1a6c2cf74d918f277b1fc341a196cf3", "user": {"login": "gchanan", "id": 3768583, "node_id": "MDQ6VXNlcjM3Njg1ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3768583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gchanan", "html_url": "https://github.com/gchanan", "followers_url": "https://api.github.com/users/gchanan/followers", "following_url": "https://api.github.com/users/gchanan/following{/other_user}", "gists_url": "https://api.github.com/users/gchanan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gchanan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gchanan/subscriptions", "organizations_url": "https://api.github.com/users/gchanan/orgs", "repos_url": "https://api.github.com/users/gchanan/repos", "events_url": "https://api.github.com/users/gchanan/events{/privacy}", "received_events_url": "https://api.github.com/users/gchanan/received_events", "type": "User", "site_admin": false}, "body": "idk, this is really difficult to think through without n-dimensional empty tensors.  For example, that assumption is true if you create a new empty spare tensor (and you can't create an empty tensor any other way except by creating a non-empty sparse tensor and calling zero_() on it -- which weird does preserve sparseDims and denseDims, making the assumption not true!).\r\n\r\nI was hoping we could fix this up in this PR, but I don't really think that is feasible.  We should just circle back and get rid of the weird invariants one by one.", "created_at": "2018-06-22T16:01:55Z", "updated_at": "2018-11-23T15:46:07Z", "html_url": "https://github.com/pytorch/pytorch/pull/8689#discussion_r197492654", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/8689", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/197492654"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/8689#discussion_r197492654"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/8689"}}, "body_html": "<p>idk, this is really difficult to think through without n-dimensional empty tensors.  For example, that assumption is true if you create a new empty spare tensor (and you can't create an empty tensor any other way except by creating a non-empty sparse tensor and calling zero_() on it -- which weird does preserve sparseDims and denseDims, making the assumption not true!).</p>\n<p>I was hoping we could fix this up in this PR, but I don't really think that is feasible.  We should just circle back and get rid of the weird invariants one by one.</p>", "body_text": "idk, this is really difficult to think through without n-dimensional empty tensors.  For example, that assumption is true if you create a new empty spare tensor (and you can't create an empty tensor any other way except by creating a non-empty sparse tensor and calling zero_() on it -- which weird does preserve sparseDims and denseDims, making the assumption not true!).\nI was hoping we could fix this up in this PR, but I don't really think that is feasible.  We should just circle back and get rid of the weird invariants one by one."}