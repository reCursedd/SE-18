{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/196960682", "pull_request_review_id": 130604324, "id": 196960682, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5Njk2MDY4Mg==", "diff_hunk": "@@ -214,9 +159,18 @@ SparseTensor new_with_tensor_and_size_sparse(const LongTensor& indices, const Te\n   AT_CHECK(sizes.size() == sparseDims + denseDims, \"number of dimensions must be sparseDims (\", sparseDims, \") + denseDims (\", denseDims, \"), but got \", sizes);\n \n   LongTensor max_indices = std::get</* values */ 0>(indices.max(/* dim */ 1, /* keepdim */ false));\n-  auto max_indices_accessor = max_indices.accessor<int64_t, 1>();\n+  LongTensor cpu_max_indices;\n+  if (max_indices.is_cuda()) {\n+    cpu_max_indices = at::CPU(kLong).tensor(max_indices.sizes());\n+    cpu_max_indices.copy_(max_indices);\n+  } else {\n+    cpu_max_indices = max_indices;\n+  }\n+  auto cpu_max_indices_accessor = cpu_max_indices.accessor<int64_t, 1>();\n   for (int64_t d = 0; d < sparseDims; d++) {\n-    int64_t max_index_in_dim = max_indices_accessor[d];\n+    // NB: This used to sync ndim times to access each entry; now we copy", "path": "aten/src/ATen/native/sparse/SparseTensor.cpp", "position": 90, "original_position": 91, "commit_id": "1a3c38e577f84307b7b6f7c8e49818fde11f343f", "original_commit_id": "c11ea30b5dc65385ffe2f12f9664f658d7ca4d97", "user": {"login": "gchanan", "id": 3768583, "node_id": "MDQ6VXNlcjM3Njg1ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3768583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gchanan", "html_url": "https://github.com/gchanan", "followers_url": "https://api.github.com/users/gchanan/followers", "following_url": "https://api.github.com/users/gchanan/following{/other_user}", "gists_url": "https://api.github.com/users/gchanan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gchanan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gchanan/subscriptions", "organizations_url": "https://api.github.com/users/gchanan/orgs", "repos_url": "https://api.github.com/users/gchanan/repos", "events_url": "https://api.github.com/users/gchanan/events{/privacy}", "received_events_url": "https://api.github.com/users/gchanan/received_events", "type": "User", "site_admin": false}, "body": "we can't do this in a kernel?", "created_at": "2018-06-20T22:21:26Z", "updated_at": "2018-11-23T15:45:58Z", "html_url": "https://github.com/pytorch/pytorch/pull/8689#discussion_r196960682", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/8689", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/196960682"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/8689#discussion_r196960682"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/8689"}}, "body_html": "<p>we can't do this in a kernel?</p>", "body_text": "we can't do this in a kernel?"}