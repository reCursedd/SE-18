{"url": "https://api.github.com/repos/pytorch/pytorch/issues/1268", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/1268/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/1268/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/1268/events", "html_url": "https://github.com/pytorch/pytorch/issues/1268", "id": 221973351, "node_id": "MDU6SXNzdWUyMjE5NzMzNTE=", "number": 1268, "title": "Why is model.cuda() a class method instead of property ?", "user": {"login": "kdexd", "id": 10494087, "node_id": "MDQ6VXNlcjEwNDk0MDg3", "avatar_url": "https://avatars1.githubusercontent.com/u/10494087?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kdexd", "html_url": "https://github.com/kdexd", "followers_url": "https://api.github.com/users/kdexd/followers", "following_url": "https://api.github.com/users/kdexd/following{/other_user}", "gists_url": "https://api.github.com/users/kdexd/gists{/gist_id}", "starred_url": "https://api.github.com/users/kdexd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kdexd/subscriptions", "organizations_url": "https://api.github.com/users/kdexd/orgs", "repos_url": "https://api.github.com/users/kdexd/repos", "events_url": "https://api.github.com/users/kdexd/events{/privacy}", "received_events_url": "https://api.github.com/users/kdexd/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-04-15T21:19:34Z", "updated_at": "2017-04-16T21:29:22Z", "closed_at": "2017-04-16T21:29:22Z", "author_association": "NONE", "body_html": "<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> torch\n<span class=\"pl-k\">from</span> torch.autograd <span class=\"pl-k\">import</span> Variable\n\na <span class=\"pl-k\">=</span> Variable(torch.Tensor([<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">2</span>]))\n<span class=\"pl-k\">if</span> torch.cuda.is_available():\n    b <span class=\"pl-k\">=</span> a.cuda()\n\nb_data <span class=\"pl-k\">=</span> b.data\nb_grad <span class=\"pl-k\">=</span> b.grad\nb_grad_data <span class=\"pl-k\">=</span> b.grad.data</pre></div>\n<p>If <code>.data</code> and <code>.grad</code> are class attributes, then <code>.cuda()</code> can be kept as property so that one a do <code>b = a.cuda</code>. I am making suggestion thinking that it would increase API consistency, as <code>.cuda()</code>, <code>.data</code> and <code>.grad</code> are <code>torch.Tensor</code> so cuda() can be changed to a property. By doing this, the GPU residing model can be accessed by <code>model.cuda</code></p>", "body_text": "import torch\nfrom torch.autograd import Variable\n\na = Variable(torch.Tensor([1, 2]))\nif torch.cuda.is_available():\n    b = a.cuda()\n\nb_data = b.data\nb_grad = b.grad\nb_grad_data = b.grad.data\nIf .data and .grad are class attributes, then .cuda() can be kept as property so that one a do b = a.cuda. I am making suggestion thinking that it would increase API consistency, as .cuda(), .data and .grad are torch.Tensor so cuda() can be changed to a property. By doing this, the GPU residing model can be accessed by model.cuda", "body": "```python\r\nimport torch\r\nfrom torch.autograd import Variable\r\n\r\na = Variable(torch.Tensor([1, 2]))\r\nif torch.cuda.is_available():\r\n    b = a.cuda()\r\n\r\nb_data = b.data\r\nb_grad = b.grad\r\nb_grad_data = b.grad.data\r\n```\r\n\r\nIf `.data` and `.grad` are class attributes, then `.cuda()` can be kept as property so that one a do `b = a.cuda`. I am making suggestion thinking that it would increase API consistency, as `.cuda()`, `.data` and `.grad` are `torch.Tensor` so cuda() can be changed to a property. By doing this, the GPU residing model can be accessed by `model.cuda`"}