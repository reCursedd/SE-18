{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/341091164", "html_url": "https://github.com/pytorch/pytorch/issues/2534#issuecomment-341091164", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/2534", "id": 341091164, "node_id": "MDEyOklzc3VlQ29tbWVudDM0MTA5MTE2NA==", "user": {"login": "PiotrDabkowski", "id": 4052440, "node_id": "MDQ6VXNlcjQwNTI0NDA=", "avatar_url": "https://avatars2.githubusercontent.com/u/4052440?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PiotrDabkowski", "html_url": "https://github.com/PiotrDabkowski", "followers_url": "https://api.github.com/users/PiotrDabkowski/followers", "following_url": "https://api.github.com/users/PiotrDabkowski/following{/other_user}", "gists_url": "https://api.github.com/users/PiotrDabkowski/gists{/gist_id}", "starred_url": "https://api.github.com/users/PiotrDabkowski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PiotrDabkowski/subscriptions", "organizations_url": "https://api.github.com/users/PiotrDabkowski/orgs", "repos_url": "https://api.github.com/users/PiotrDabkowski/repos", "events_url": "https://api.github.com/users/PiotrDabkowski/events{/privacy}", "received_events_url": "https://api.github.com/users/PiotrDabkowski/received_events", "type": "User", "site_admin": false}, "created_at": "2017-11-01T12:20:02Z", "updated_at": "2017-11-01T13:04:35Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=4583066\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/apaszke\">@apaszke</a> Thanks, yes, I just wanted to check whether the loss term causes the model to be unstable by driving the parameters toward inf. But as you said the gradient of gradient_penalty is either NaN or inf even with finite values of parameters. The gradient_penalty itself is not NaN (only its gradient).</p>\n<p><strong>EDIT</strong>: I have found a problem - you have to be very careful when using operations which derivatives can explode. In my case I was using torch.std which is taking a square root.</p>\n<p>The torch.norm can cause similar problems (becase of the square root), so its better to calculate it manually with epsilon:</p>\n<pre><code>gr = torch.autograd.grad(mid_scores, mids, create_graph=True)[0]\ngradient_penalty = torch.mean((1. - torch.sqrt(1e-8+torch.sum(gr.view(gr.size(0), -1)**2, dim=1)))**2)\n</code></pre>\n<p>It would be nice if PyTorch warned about a NaN during runtime as its rather time-consuming to find the cause. For example <code>WARNING: backward of torch.std (line X file bar.py) returned NaN</code>.</p>", "body_text": "@apaszke Thanks, yes, I just wanted to check whether the loss term causes the model to be unstable by driving the parameters toward inf. But as you said the gradient of gradient_penalty is either NaN or inf even with finite values of parameters. The gradient_penalty itself is not NaN (only its gradient).\nEDIT: I have found a problem - you have to be very careful when using operations which derivatives can explode. In my case I was using torch.std which is taking a square root.\nThe torch.norm can cause similar problems (becase of the square root), so its better to calculate it manually with epsilon:\ngr = torch.autograd.grad(mid_scores, mids, create_graph=True)[0]\ngradient_penalty = torch.mean((1. - torch.sqrt(1e-8+torch.sum(gr.view(gr.size(0), -1)**2, dim=1)))**2)\n\nIt would be nice if PyTorch warned about a NaN during runtime as its rather time-consuming to find the cause. For example WARNING: backward of torch.std (line X file bar.py) returned NaN.", "body": "@apaszke Thanks, yes, I just wanted to check whether the loss term causes the model to be unstable by driving the parameters toward inf. But as you said the gradient of gradient_penalty is either NaN or inf even with finite values of parameters. The gradient_penalty itself is not NaN (only its gradient).\r\n\r\n**EDIT**: I have found a problem - you have to be very careful when using operations which derivatives can explode. In my case I was using torch.std which is taking a square root. \r\n\r\nThe torch.norm can cause similar problems (becase of the square root), so its better to calculate it manually with epsilon:\r\n```\r\ngr = torch.autograd.grad(mid_scores, mids, create_graph=True)[0]\r\ngradient_penalty = torch.mean((1. - torch.sqrt(1e-8+torch.sum(gr.view(gr.size(0), -1)**2, dim=1)))**2)\r\n```\r\n\r\nIt would be nice if PyTorch warned about a NaN during runtime as its rather time-consuming to find the cause. For example `WARNING: backward of torch.std (line X file bar.py) returned NaN`."}