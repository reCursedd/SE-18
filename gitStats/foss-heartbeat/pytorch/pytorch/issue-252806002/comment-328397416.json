{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/328397416", "html_url": "https://github.com/pytorch/pytorch/issues/2534#issuecomment-328397416", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/2534", "id": 328397416, "node_id": "MDEyOklzc3VlQ29tbWVudDMyODM5NzQxNg==", "user": {"login": "dannysdeng", "id": 6167987, "node_id": "MDQ6VXNlcjYxNjc5ODc=", "avatar_url": "https://avatars3.githubusercontent.com/u/6167987?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dannysdeng", "html_url": "https://github.com/dannysdeng", "followers_url": "https://api.github.com/users/dannysdeng/followers", "following_url": "https://api.github.com/users/dannysdeng/following{/other_user}", "gists_url": "https://api.github.com/users/dannysdeng/gists{/gist_id}", "starred_url": "https://api.github.com/users/dannysdeng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dannysdeng/subscriptions", "organizations_url": "https://api.github.com/users/dannysdeng/orgs", "repos_url": "https://api.github.com/users/dannysdeng/repos", "events_url": "https://api.github.com/users/dannysdeng/events{/privacy}", "received_events_url": "https://api.github.com/users/dannysdeng/received_events", "type": "User", "site_admin": false}, "created_at": "2017-09-11T02:09:32Z", "updated_at": "2017-09-11T02:09:32Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=16249507\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/MeJn\">@MeJn</a> Hi, my code looks like this. It seems to relieve the NaN problem for me. (If \"x\" is zero, then the gradient of \"x.norm()\" will be equal to 1)</p>\n<pre><code>alpha = torch.rand(batch_size, 1).expand(X.size())\nx_hat = Variable(alpha * X.data + (1 - alpha) * (X.data + 0.5 * X.data.std() * torch.rand(X.size())), \nrequires_grad=True)\npred_hat = netD(x_hat)\ngradients = grad(outputs=pred_hat, inputs=x_hat, grad_outputs=torch.ones(pred_hat.size()),\n                    create_graph=True, retain_graph=True, only_inputs=True)[0]\n# gradient_penalty = lambda_ * ((gradients.norm(2, dim=1) - 1) ** 2).mean()\ngradients_debug = gradients + 1e-16\ngradient_penalty = lambda_ * ((gradients_debug.norm(2, dim=1) - 1) ** 2).mean()\ngradient_penalty.backward()\n</code></pre>", "body_text": "@MeJn Hi, my code looks like this. It seems to relieve the NaN problem for me. (If \"x\" is zero, then the gradient of \"x.norm()\" will be equal to 1)\nalpha = torch.rand(batch_size, 1).expand(X.size())\nx_hat = Variable(alpha * X.data + (1 - alpha) * (X.data + 0.5 * X.data.std() * torch.rand(X.size())), \nrequires_grad=True)\npred_hat = netD(x_hat)\ngradients = grad(outputs=pred_hat, inputs=x_hat, grad_outputs=torch.ones(pred_hat.size()),\n                    create_graph=True, retain_graph=True, only_inputs=True)[0]\n# gradient_penalty = lambda_ * ((gradients.norm(2, dim=1) - 1) ** 2).mean()\ngradients_debug = gradients + 1e-16\ngradient_penalty = lambda_ * ((gradients_debug.norm(2, dim=1) - 1) ** 2).mean()\ngradient_penalty.backward()", "body": "@MeJn Hi, my code looks like this. It seems to relieve the NaN problem for me. (If \"x\" is zero, then the gradient of \"x.norm()\" will be equal to 1)\r\n\r\n    alpha = torch.rand(batch_size, 1).expand(X.size())\r\n    x_hat = Variable(alpha * X.data + (1 - alpha) * (X.data + 0.5 * X.data.std() * torch.rand(X.size())), \r\n    requires_grad=True)\r\n    pred_hat = netD(x_hat)\r\n    gradients = grad(outputs=pred_hat, inputs=x_hat, grad_outputs=torch.ones(pred_hat.size()),\r\n                        create_graph=True, retain_graph=True, only_inputs=True)[0]\r\n    # gradient_penalty = lambda_ * ((gradients.norm(2, dim=1) - 1) ** 2).mean()\r\n    gradients_debug = gradients + 1e-16\r\n    gradient_penalty = lambda_ * ((gradients_debug.norm(2, dim=1) - 1) ** 2).mean()\r\n    gradient_penalty.backward()"}