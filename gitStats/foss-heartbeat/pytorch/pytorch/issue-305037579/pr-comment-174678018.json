{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/174678018", "pull_request_review_id": 104076654, "id": 174678018, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NDY3ODAxOA==", "diff_hunk": "@@ -47,22 +50,19 @@\n }\n \n \n+def print_to_stderr(message):\n+    # Print to stderr because test output also goes to stderr. This ensures\n+    # synchronization between the two output sources.\n+    print(message, file=sys.stderr)\n+\n+\n def shell(command, cwd):\n-    popen = subprocess.Popen(\n-        command,\n-        stdout=subprocess.PIPE,\n-        universal_newlines=True,\n-        cwd=cwd,\n-        shell=True)\n-    for stdout_line in iter(popen.stdout.readline, ''):\n-        print(stdout_line.strip('\\n'))\n-    popen.stdout.close()\n-    return_code = popen.wait()\n-    return return_code == 0\n+    return subprocess.call(\n+        shlex.split(command), universal_newlines=True, cwd=cwd) == 0", "path": "test/run_test.py", "position": 34, "original_position": 34, "commit_id": "bc927a475cfcb42fb446fd2a73d0201e6aa4b63e", "original_commit_id": "bc927a475cfcb42fb446fd2a73d0201e6aa4b63e", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "I... think this is missing the point of \"shell is bad\".\r\n\r\nIt is true that you get to avoid starting a shell process, but honestly, one extra process is not something we actually be worrying about in this context. The *hazard* of shell=True is in the input format, and since you have not changed the input specification of `shell` (it takes a flat command string), the hazard remains.\r\n\r\nLet's be a bit more concrete about in what sense shell is bad (and also why, in some sense, it doesn't matter in this use case). And we'll use `shell(cmd, cwd)`as our example.\r\n\r\nSuppose that I have some code that looks like `shell(\"python test.py\", \".\")`, and I am now asked to extend it to support accepting an extra flag specifying a JUnit XML file to write out; e.g., if I'm writing to foo.xml, I want to run the command `python test.py --junit-xml=foo.xml`. What is the most \"obvious\" way to extend support for this in the API?\r\n\r\nThe most obvious way is to use string interpolation to put the parameter in. `\"python test.py --junit-xml={}\".format(junit_filename)`. This is wrong, if `junit_filename` contains spaces. `\"python test.py --junit-xml=\\\"{}\\\"\".format(junit_filename)` is wrong too, if `junit_filename` contains quotes. No, the only \"correct\" way to do this in Python 2 is to use [pipes.quote](https://docs.python.org/2/library/pipes.html#pipes.quote>) which, for Python 2 compatibility reasons, is in a totally random module and wasn't even publically documented prior to Python 2.7.\r\n\r\nThe measure of a good API is \"how easy is it to do the right thing\", and shell strings fail the test.\r\n\r\nBut I did say it probably doesn't matter. And that's because you are probably not actually setting `--junit-xml` to arbitrary user input, so no one will probably actually trigger the corner case and everything is fine. Until someone copy pastes the code somewhere else where the constraints are different...", "created_at": "2018-03-15T05:08:17Z", "updated_at": "2018-11-23T15:40:46Z", "html_url": "https://github.com/pytorch/pytorch/pull/5767#discussion_r174678018", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/5767", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/174678018"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/5767#discussion_r174678018"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/5767"}}, "body_html": "<p>I... think this is missing the point of \"shell is bad\".</p>\n<p>It is true that you get to avoid starting a shell process, but honestly, one extra process is not something we actually be worrying about in this context. The <em>hazard</em> of shell=True is in the input format, and since you have not changed the input specification of <code>shell</code> (it takes a flat command string), the hazard remains.</p>\n<p>Let's be a bit more concrete about in what sense shell is bad (and also why, in some sense, it doesn't matter in this use case). And we'll use <code>shell(cmd, cwd)</code>as our example.</p>\n<p>Suppose that I have some code that looks like <code>shell(\"python test.py\", \".\")</code>, and I am now asked to extend it to support accepting an extra flag specifying a JUnit XML file to write out; e.g., if I'm writing to foo.xml, I want to run the command <code>python test.py --junit-xml=foo.xml</code>. What is the most \"obvious\" way to extend support for this in the API?</p>\n<p>The most obvious way is to use string interpolation to put the parameter in. <code>\"python test.py --junit-xml={}\".format(junit_filename)</code>. This is wrong, if <code>junit_filename</code> contains spaces. <code>\"python test.py --junit-xml=\\\"{}\\\"\".format(junit_filename)</code> is wrong too, if <code>junit_filename</code> contains quotes. No, the only \"correct\" way to do this in Python 2 is to use <a href=\"https://docs.python.org/2/library/pipes.html#pipes.quote%3E\" rel=\"nofollow\">pipes.quote</a> which, for Python 2 compatibility reasons, is in a totally random module and wasn't even publically documented prior to Python 2.7.</p>\n<p>The measure of a good API is \"how easy is it to do the right thing\", and shell strings fail the test.</p>\n<p>But I did say it probably doesn't matter. And that's because you are probably not actually setting <code>--junit-xml</code> to arbitrary user input, so no one will probably actually trigger the corner case and everything is fine. Until someone copy pastes the code somewhere else where the constraints are different...</p>", "body_text": "I... think this is missing the point of \"shell is bad\".\nIt is true that you get to avoid starting a shell process, but honestly, one extra process is not something we actually be worrying about in this context. The hazard of shell=True is in the input format, and since you have not changed the input specification of shell (it takes a flat command string), the hazard remains.\nLet's be a bit more concrete about in what sense shell is bad (and also why, in some sense, it doesn't matter in this use case). And we'll use shell(cmd, cwd)as our example.\nSuppose that I have some code that looks like shell(\"python test.py\", \".\"), and I am now asked to extend it to support accepting an extra flag specifying a JUnit XML file to write out; e.g., if I'm writing to foo.xml, I want to run the command python test.py --junit-xml=foo.xml. What is the most \"obvious\" way to extend support for this in the API?\nThe most obvious way is to use string interpolation to put the parameter in. \"python test.py --junit-xml={}\".format(junit_filename). This is wrong, if junit_filename contains spaces. \"python test.py --junit-xml=\\\"{}\\\"\".format(junit_filename) is wrong too, if junit_filename contains quotes. No, the only \"correct\" way to do this in Python 2 is to use pipes.quote which, for Python 2 compatibility reasons, is in a totally random module and wasn't even publically documented prior to Python 2.7.\nThe measure of a good API is \"how easy is it to do the right thing\", and shell strings fail the test.\nBut I did say it probably doesn't matter. And that's because you are probably not actually setting --junit-xml to arbitrary user input, so no one will probably actually trigger the corner case and everything is fine. Until someone copy pastes the code somewhere else where the constraints are different..."}