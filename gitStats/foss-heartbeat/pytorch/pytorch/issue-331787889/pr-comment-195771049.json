{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/195771049", "pull_request_review_id": 129205945, "id": 195771049, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTc3MTA0OQ==", "diff_hunk": "@@ -0,0 +1,122 @@\n+#ifndef THC_GENERIC_FILE\n+#define THC_GENERIC_FILE \"generic/THCTensorKthValue.cu\"\n+#else\n+\n+THC_API void THCTensor_(kthvalue)(THCState* state,\n+                                  THCTensor* kthValue,\n+                                  THCudaLongTensor* indices,\n+                                  THCTensor* input,\n+                                  int64_t k, int dim, int keepDim) {\n+  THAssert(kthValue != NULL && indices != NULL && input != NULL);\n+  THCAssertSameGPU(THCTensor_(checkGPU)(state, 3, kthValue, indices, input));\n+  THArgCheck(THCTensor_(nDimension)(state, kthValue) <= MAX_CUTORCH_DIMS, 2, CUTORCH_DIM_WARNING);\n+  int64_t dims = THCudaLongTensor_nDimension(state, indices);\n+  THArgCheck(dims <= MAX_CUTORCH_DIMS, 3, CUTORCH_DIM_WARNING);\n+  int numDims = THCTensor_(nDimension)(state, input);\n+  THArgCheck(numDims <= MAX_CUTORCH_DIMS, 4, CUTORCH_DIM_WARNING);\n+\n+  THArgCheck(dim >= 0 && dim < numDims, 6, \"dim not in range\");\n+\n+  int64_t sliceSize = THCTensor_(size)(state, input, dim);\n+  THArgCheck(k > 0 && k <= sliceSize, 5, \"k not in range for dimension\");\n+\n+  // Build the output size, which is the dim being selected set to\n+  // size 1\n+  THLongStorage* kthValueSize = THCTensor_(newSizeOf)(state, input);\n+  THLongStorage_set(kthValueSize, dim, 1);\n+  THCTensor_(resize)(state, kthValue, kthValueSize, NULL);\n+  THCudaLongTensor_resize(state, indices, kthValueSize, NULL);\n+  THLongStorage_free(kthValueSize);\n+\n+  #define RUN_K(INDEX_T, DIM)                                             \\\n+    gatherKthValue<real, INDEX_T, DIM>                                    \\\n+      <<<grid, block, 0, THCState_getCurrentStream(state)>>>(             \\\n+        inputInfo,                                                        \\\n+        sliceSize,                                                        \\\n+        k,                                                                \\\n+        inputSlices,                                                      \\\n+        /* The actual dimension that the k-selection is running in */     \\\n+        /* may have changed from collapseDims() */                        \\\n+        inputInfo.strides[collapseInputDim],                              \\\n+        kthValueInfo,                                                     \\\n+        indicesInfo)\n+\n+  #define RUN_DIM(INDEX_T)                        \\\n+    if (allDims == 1) {                           \\\n+      RUN_K(INDEX_T, 1);                          \\\n+    } else if (allDims == 2) {                    \\\n+      RUN_K(INDEX_T, 2);                          \\\n+    } else if (allDims == 3) {                    \\\n+      RUN_K(INDEX_T, 3);                          \\\n+    } else {                                      \\\n+      RUN_K(INDEX_T, -1);                         \\\n+    }\n+\n+  #define RUN_T(INDEX_T)                                                  \\\n+    TensorInfo<real, INDEX_T> inputInfo =                                 \\\n+      getTensorInfo<real, THCTensor, INDEX_T>(state, input);              \\\n+    TensorInfo<real, INDEX_T> kthValueInfo =                              \\\n+      getTensorInfo<real, THCTensor, INDEX_T>(state, kthValue);           \\\n+    TensorInfo<int64_t, INDEX_T> indicesInfo =                            \\\n+      getTensorInfo<int64_t, THCudaLongTensor, INDEX_T>(state, indices);  \\\n+                                                                          \\\n+    /* We use these structures solely to find the offset to */            \\\n+    /* each slice we are operating on */                                  \\", "path": "aten/src/THC/generic/THCTensorKthValue.cu", "position": 64, "original_position": 64, "commit_id": "67204dac722d05387ca13d50382378d66e1c3814", "original_commit_id": "b88b13605d7ae48f3b14ef96200143b278cb14ea", "user": {"login": "zou3519", "id": 5652049, "node_id": "MDQ6VXNlcjU2NTIwNDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/5652049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zou3519", "html_url": "https://github.com/zou3519", "followers_url": "https://api.github.com/users/zou3519/followers", "following_url": "https://api.github.com/users/zou3519/following{/other_user}", "gists_url": "https://api.github.com/users/zou3519/gists{/gist_id}", "starred_url": "https://api.github.com/users/zou3519/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zou3519/subscriptions", "organizations_url": "https://api.github.com/users/zou3519/orgs", "repos_url": "https://api.github.com/users/zou3519/repos", "events_url": "https://api.github.com/users/zou3519/events{/privacy}", "received_events_url": "https://api.github.com/users/zou3519/received_events", "type": "User", "site_admin": false}, "body": "I'm not sure what's going on here. Why are you setting the sizes of the dimension to 1 and then calling \"collapseDim\"?\r\n\r\nAlso, shouldn't\r\n`kthValueInfo.sizes[dim]` and  `indicesInfo.sizes[dim]` already be 1 because you resized them?", "created_at": "2018-06-15T15:07:20Z", "updated_at": "2018-11-23T15:45:39Z", "html_url": "https://github.com/pytorch/pytorch/pull/8406#discussion_r195771049", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/8406", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/195771049"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/8406#discussion_r195771049"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/8406"}}, "body_html": "<p>I'm not sure what's going on here. Why are you setting the sizes of the dimension to 1 and then calling \"collapseDim\"?</p>\n<p>Also, shouldn't<br>\n<code>kthValueInfo.sizes[dim]</code> and  <code>indicesInfo.sizes[dim]</code> already be 1 because you resized them?</p>", "body_text": "I'm not sure what's going on here. Why are you setting the sizes of the dimension to 1 and then calling \"collapseDim\"?\nAlso, shouldn't\nkthValueInfo.sizes[dim] and  indicesInfo.sizes[dim] already be 1 because you resized them?"}