{"url": "https://api.github.com/repos/pytorch/pytorch/issues/9295", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/9295/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/9295/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/9295/events", "html_url": "https://github.com/pytorch/pytorch/pull/9295", "id": 339692279, "node_id": "MDExOlB1bGxSZXF1ZXN0MjAwMjgyNDc1", "number": 9295, "title": "[C++ API] Initialization functions", "user": {"login": "goldsborough", "id": 6429851, "node_id": "MDQ6VXNlcjY0Mjk4NTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/6429851?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goldsborough", "html_url": "https://github.com/goldsborough", "followers_url": "https://api.github.com/users/goldsborough/followers", "following_url": "https://api.github.com/users/goldsborough/following{/other_user}", "gists_url": "https://api.github.com/users/goldsborough/gists{/gist_id}", "starred_url": "https://api.github.com/users/goldsborough/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goldsborough/subscriptions", "organizations_url": "https://api.github.com/users/goldsborough/orgs", "repos_url": "https://api.github.com/users/goldsborough/repos", "events_url": "https://api.github.com/users/goldsborough/events{/privacy}", "received_events_url": "https://api.github.com/users/goldsborough/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-07-10T04:51:35Z", "updated_at": "2018-11-23T15:47:06Z", "closed_at": "2018-07-13T01:54:49Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/9295", "html_url": "https://github.com/pytorch/pytorch/pull/9295", "diff_url": "https://github.com/pytorch/pytorch/pull/9295.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/9295.patch"}, "body_html": "<p>To allow our C++  customers to use our initialization methods as well, this PR moves some of the code from <code>torch.nn.init</code> to ATen, calls it from Python, and adds equivalent code to the C++ frontend.</p>\n<p>Notes:</p>\n<ol>\n<li>Happy to hear thoughts on whether it's ok to have e.g. <code>torch.nn.init.dirac_</code> <em>and</em> <code>torch.dirac_</code> (the former has a <code>no_grad</code> guard). We have this for <code>ones_</code> and stuff too, so I don't mind it.</li>\n<li>I left the exception checking in Python because they throw <code>ValueError</code>s while ATen errors show as <code>RuntimeError</code>s. I imagine this would break users' error handling if someone were to have a <code>try</code>-<code>except</code> handler for <code>ValueError</code> (or maybe it's a far fetch)</li>\n</ol>\n<p>EDIT: After discussions with <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=370202\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/zdevito\">@zdevito</a>, the PR now simply duplicates the code in C++ exclusively for the C++ API, and we leave the Python code as-is (to make it easier for people to read/modify).</p>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=3605224\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ebetica\">@ebetica</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=13564\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ezyang\">@ezyang</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=4583066\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/apaszke\">@apaszke</a></p>", "body_text": "To allow our C++  customers to use our initialization methods as well, this PR moves some of the code from torch.nn.init to ATen, calls it from Python, and adds equivalent code to the C++ frontend.\nNotes:\n\nHappy to hear thoughts on whether it's ok to have e.g. torch.nn.init.dirac_ and torch.dirac_ (the former has a no_grad guard). We have this for ones_ and stuff too, so I don't mind it.\nI left the exception checking in Python because they throw ValueErrors while ATen errors show as RuntimeErrors. I imagine this would break users' error handling if someone were to have a try-except handler for ValueError (or maybe it's a far fetch)\n\nEDIT: After discussions with @zdevito, the PR now simply duplicates the code in C++ exclusively for the C++ API, and we leave the Python code as-is (to make it easier for people to read/modify).\n@ebetica @ezyang @apaszke", "body": "To allow our C++  customers to use our initialization methods as well, this PR moves some of the code from `torch.nn.init` to ATen, calls it from Python, and adds equivalent code to the C++ frontend.\r\n\r\nNotes:\r\n1. Happy to hear thoughts on whether it's ok to have e.g. `torch.nn.init.dirac_` *and* `torch.dirac_` (the former has a `no_grad` guard). We have this for `ones_` and stuff too, so I don't mind it.\r\n2. I left the exception checking in Python because they throw `ValueError`s while ATen errors show as `RuntimeError`s. I imagine this would break users' error handling if someone were to have a `try`-`except` handler for `ValueError` (or maybe it's a far fetch)\r\n\r\nEDIT: After discussions with @zdevito, the PR now simply duplicates the code in C++ exclusively for the C++ API, and we leave the Python code as-is (to make it easier for people to read/modify).\r\n\r\n@ebetica @ezyang @apaszke "}