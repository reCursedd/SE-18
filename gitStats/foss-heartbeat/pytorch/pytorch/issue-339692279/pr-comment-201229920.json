{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/201229920", "pull_request_review_id": 135688986, "id": 201229920, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTIyOTkyMA==", "diff_hunk": "@@ -0,0 +1,67 @@\n+#include <torch/nn/init.h>\n+\n+#include <torch/tensor.h>\n+#include <torch/utils.h>\n+\n+namespace torch {\n+namespace nn {\n+namespace init {\n+\n+Tensor uniform_(Tensor tensor, double low, double high) {\n+  NoGradGuard guard;\n+  return tensor.uniform_(low, high);\n+}\n+\n+Tensor normal_(Tensor tensor, double mean, double std) {\n+  NoGradGuard guard;\n+  return tensor.normal_(mean, std);\n+}\n+\n+Tensor constant_(Tensor tensor, Scalar value) {\n+  NoGradGuard guard;\n+  return tensor.fill_(value);\n+}\n+\n+Tensor ones_(Tensor tensor) {\n+  NoGradGuard guard;\n+  return tensor.fill_(1);\n+}\n+\n+Tensor zeros_(Tensor tensor) {\n+  NoGradGuard guard;\n+  return tensor.zero_();\n+}\n+\n+Tensor eye_(Tensor tensor) {\n+  NoGradGuard guard;\n+  return tensor.eye_();\n+}\n+\n+Tensor dirac_(Tensor tensor) {\n+  NoGradGuard guard;\n+  return tensor.dirac_();\n+}\n+\n+Tensor xavier_uniform_(Tensor tensor, double gain) {\n+  NoGradGuard guard;\n+  return tensor.xavier_uniform_(gain);\n+}\n+\n+Tensor xavier_normal_(Tensor tensor, double gain) {\n+  NoGradGuard guard;\n+  return tensor.xavier_normal_(gain);\n+}\n+\n+Tensor orthogonal_(Tensor tensor, double gain) {\n+  NoGradGuard guard;\n+  return tensor.orthogonal_(gain);\n+}\n+\n+Tensor sparse_(Tensor tensor, double sparsity, double std) {\n+  NoGradGuard guard;\n+  return tensor.sparse_(sparsity, std);", "path": "torch/csrc/api/src/nn/init.cpp", "position": null, "original_position": 62, "commit_id": "a78f62fde100bc21543e22781f98c16db06a7a69", "original_commit_id": "8531dafc8379002a2cae8028cdca4b26f7b7edcd", "user": {"login": "goldsborough", "id": 6429851, "node_id": "MDQ6VXNlcjY0Mjk4NTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/6429851?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goldsborough", "html_url": "https://github.com/goldsborough", "followers_url": "https://api.github.com/users/goldsborough/followers", "following_url": "https://api.github.com/users/goldsborough/following{/other_user}", "gists_url": "https://api.github.com/users/goldsborough/gists{/gist_id}", "starred_url": "https://api.github.com/users/goldsborough/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goldsborough/subscriptions", "organizations_url": "https://api.github.com/users/goldsborough/orgs", "repos_url": "https://api.github.com/users/goldsborough/repos", "events_url": "https://api.github.com/users/goldsborough/events{/privacy}", "received_events_url": "https://api.github.com/users/goldsborough/received_events", "type": "User", "site_admin": false}, "body": "@fmassa I do think it's worth having ATen<->Python bindings in order to reduce code duplication, since some of the methods here, like `orthogonal`, are not so short.\r\n\r\n@t-vi we could definitely make that change, but I think we'd rather not increase the number of features of our codegen at the moment as it makes it harder to design future libraries like c10\r\n\r\nIn the past we solved this problem by prefixing such implementation methods with an underscore. I don't find that very clean either though :/\r\n", "created_at": "2018-07-10T06:32:48Z", "updated_at": "2018-11-23T15:47:03Z", "html_url": "https://github.com/pytorch/pytorch/pull/9295#discussion_r201229920", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/9295", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/201229920"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/9295#discussion_r201229920"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/9295"}}, "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=9110200\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/fmassa\">@fmassa</a> I do think it's worth having ATen&lt;-&gt;Python bindings in order to reduce code duplication, since some of the methods here, like <code>orthogonal</code>, are not so short.</p>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=20787943\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/t-vi\">@t-vi</a> we could definitely make that change, but I think we'd rather not increase the number of features of our codegen at the moment as it makes it harder to design future libraries like c10</p>\n<p>In the past we solved this problem by prefixing such implementation methods with an underscore. I don't find that very clean either though :/</p>", "body_text": "@fmassa I do think it's worth having ATen<->Python bindings in order to reduce code duplication, since some of the methods here, like orthogonal, are not so short.\n@t-vi we could definitely make that change, but I think we'd rather not increase the number of features of our codegen at the moment as it makes it harder to design future libraries like c10\nIn the past we solved this problem by prefixing such implementation methods with an underscore. I don't find that very clean either though :/", "in_reply_to_id": 201222900}