{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/419397911", "html_url": "https://github.com/pytorch/pytorch/pull/11373#issuecomment-419397911", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/11373", "id": 419397911, "node_id": "MDEyOklzc3VlQ29tbWVudDQxOTM5NzkxMQ==", "user": {"login": "t-vi", "id": 20787943, "node_id": "MDQ6VXNlcjIwNzg3OTQz", "avatar_url": "https://avatars2.githubusercontent.com/u/20787943?v=4", "gravatar_id": "", "url": "https://api.github.com/users/t-vi", "html_url": "https://github.com/t-vi", "followers_url": "https://api.github.com/users/t-vi/followers", "following_url": "https://api.github.com/users/t-vi/following{/other_user}", "gists_url": "https://api.github.com/users/t-vi/gists{/gist_id}", "starred_url": "https://api.github.com/users/t-vi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/t-vi/subscriptions", "organizations_url": "https://api.github.com/users/t-vi/orgs", "repos_url": "https://api.github.com/users/t-vi/repos", "events_url": "https://api.github.com/users/t-vi/events{/privacy}", "received_events_url": "https://api.github.com/users/t-vi/received_events", "type": "User", "site_admin": false}, "created_at": "2018-09-07T10:33:07Z", "updated_at": "2018-09-07T10:33:07Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Thank you for the feedback.<br>\nI completely agree with having to specify type + dimension twice is terrible. The only good part is that mismatches will result in a compiler error.</p>\n<p>I'm not sure about adding another type for restricted. If we had a cuda_accessor supporting PointerTraits, I think it would be OK - especially given that it is a bit of an \"expert subject\" anyway.</p>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=6429851\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/goldsborough\">@goldsborough</a> (or anyone else) Would you have advice how to cleanly put in a .cuda_accessor method?</p>\n<p>I think we could also add ifdefs to make CUDATensorAccessor available on non-cuda tensors (something that is completely lost at the moment - using <code>.accessor</code> for a cuda tensor probably is fishy, too -  and and error out at runtime when is_cuda is false.<br>\nIf that is a solution: Where would be a good file to define CUDATensorAccessor in?</p>", "body_text": "Thank you for the feedback.\nI completely agree with having to specify type + dimension twice is terrible. The only good part is that mismatches will result in a compiler error.\nI'm not sure about adding another type for restricted. If we had a cuda_accessor supporting PointerTraits, I think it would be OK - especially given that it is a bit of an \"expert subject\" anyway.\n@goldsborough (or anyone else) Would you have advice how to cleanly put in a .cuda_accessor method?\nI think we could also add ifdefs to make CUDATensorAccessor available on non-cuda tensors (something that is completely lost at the moment - using .accessor for a cuda tensor probably is fishy, too -  and and error out at runtime when is_cuda is false.\nIf that is a solution: Where would be a good file to define CUDATensorAccessor in?", "body": "Thank you for the feedback.\r\nI completely agree with having to specify type + dimension twice is terrible. The only good part is that mismatches will result in a compiler error.\r\n\r\nI'm not sure about adding another type for restricted. If we had a cuda_accessor supporting PointerTraits, I think it would be OK - especially given that it is a bit of an \"expert subject\" anyway.\r\n\r\n@goldsborough (or anyone else) Would you have advice how to cleanly put in a .cuda_accessor method?\r\n\r\nI think we could also add ifdefs to make CUDATensorAccessor available on non-cuda tensors (something that is completely lost at the moment - using `.accessor` for a cuda tensor probably is fishy, too -  and and error out at runtime when is_cuda is false.\r\nIf that is a solution: Where would be a good file to define CUDATensorAccessor in?\r\n"}