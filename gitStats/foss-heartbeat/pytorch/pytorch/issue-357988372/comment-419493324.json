{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/419493324", "html_url": "https://github.com/pytorch/pytorch/pull/11373#issuecomment-419493324", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/11373", "id": 419493324, "node_id": "MDEyOklzc3VlQ29tbWVudDQxOTQ5MzMyNA==", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "created_at": "2018-09-07T16:26:15Z", "updated_at": "2018-09-07T16:26:26Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=20787943\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/t-vi\">@t-vi</a> Help me understand the delta between this and TensorAccessor. The differences seem to be:</p>\n<ol>\n<li>For the non-SubAccessor sizes/strides directly inline the struct, so that you can transfer it easily in CUDA</li>\n<li>It has appropriate <code>__host__</code> and <code>__device__</code> annotations</li>\n<li>Uses <code>PtrTraits</code> to support <code>__restrict__</code></li>\n</ol>\n<p>So, it seems to me that we should do three things:</p>\n<ol>\n<li>Make it non-CUDA specific. CUDATensorAccessor is just a version of TensorAccessor that stores its fields inline. So we can call it something like PackedTensorAccessor.</li>\n<li>Then, we just directly support this in the Tensor API, as <code>packed_accessor</code>. So now you can avoid going through TensorAccessor</li>\n<li>You should generalize TensorAccessor to support PtrTraits, and have <code>__host__</code> and <code>__device__</code> annotations when CUDA is enabled. Then you can use it uniformly for CPU, and for sub-accessors in CUDA.</li>\n</ol>\n<p>Does this make sense?</p>", "body_text": "@t-vi Help me understand the delta between this and TensorAccessor. The differences seem to be:\n\nFor the non-SubAccessor sizes/strides directly inline the struct, so that you can transfer it easily in CUDA\nIt has appropriate __host__ and __device__ annotations\nUses PtrTraits to support __restrict__\n\nSo, it seems to me that we should do three things:\n\nMake it non-CUDA specific. CUDATensorAccessor is just a version of TensorAccessor that stores its fields inline. So we can call it something like PackedTensorAccessor.\nThen, we just directly support this in the Tensor API, as packed_accessor. So now you can avoid going through TensorAccessor\nYou should generalize TensorAccessor to support PtrTraits, and have __host__ and __device__ annotations when CUDA is enabled. Then you can use it uniformly for CPU, and for sub-accessors in CUDA.\n\nDoes this make sense?", "body": "@t-vi Help me understand the delta between this and TensorAccessor. The differences seem to be:\r\n\r\n1. For the non-SubAccessor sizes/strides directly inline the struct, so that you can transfer it easily in CUDA\r\n2. It has appropriate `__host__` and `__device__` annotations\r\n3. Uses `PtrTraits` to support `__restrict__`\r\n\r\nSo, it seems to me that we should do three things:\r\n\r\n1. Make it non-CUDA specific. CUDATensorAccessor is just a version of TensorAccessor that stores its fields inline. So we can call it something like PackedTensorAccessor.\r\n2. Then, we just directly support this in the Tensor API, as `packed_accessor`. So now you can avoid going through TensorAccessor\r\n3. You should generalize TensorAccessor to support PtrTraits, and have `__host__` and `__device__` annotations when CUDA is enabled. Then you can use it uniformly for CPU, and for sub-accessors in CUDA.\r\n\r\nDoes this make sense?"}