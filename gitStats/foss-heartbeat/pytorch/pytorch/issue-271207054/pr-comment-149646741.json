{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/149646741", "pull_request_review_id": 75071150, "id": 149646741, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0OTY0Njc0MQ==", "diff_hunk": "@@ -139,23 +142,51 @@ def _run_symbolic_method(op_name, symbolic_fn, args):\n         raise\n \n \n-def _add_attribute(node, key, value):\n-    \"\"\" initializes the right attribute based on type of value \"\"\"\n-    m = attr_pattern.match(key)\n-    if m is None:\n-        raise IndexError((\n-            \"Invalid attribute specifier '{}' names \" +\n-            \" must be suffixed with type, e.g. 'dim_i' or 'dims_i'\").format(key))\n-    name, kind = m.group(1), m.group(2)\n+def _is_onnx_list(value):\n     if not isinstance(value, string_classes) and not torch.is_tensor(value) and isinstance(value, collections.Iterable):\n-        kind += \"s\"\n-    return getattr(node, kind + '_')(name, value)\n+        return True\n+    return False\n+\n+\n+def _add_attribute(node, key, value, aten):\n+    \"\"\" initializes the right attribute based on type of value \"\"\"\n+    if aten:\n+        name = key\n+\n+        def infer_kind(value):", "path": "torch/onnx/__init__.py", "position": null, "original_position": 60, "commit_id": "4c123c3774d8ae68b413ff99fe3cb15c7984f408", "original_commit_id": "c45935a1fa468d025e34cc62f71473e0ff751265", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "We should not need the `infer_kind` logic at all in the ATen case. Think about where the attributes come from: you pulled them out of a `Node` using `attrs = {k: n[k] for k in n.attributeNames()}`. The `n[k]` drops precisely the type information you actually want to use to determine the ATen types. You want the `kindOf` method: `n.kindOf(\"key\")` will give you `f` for float, `fs` for list of floats, etc. Then all of this code can go away.\r\n\r\nIn this regime, you should also delete the `aten` kwarg from `_graph_at`, and just make a new function which does this construction. These two functions aren't doing the same thing at all!", "created_at": "2017-11-08T11:49:29Z", "updated_at": "2018-11-23T15:36:10Z", "html_url": "https://github.com/pytorch/pytorch/pull/3489#discussion_r149646741", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/3489", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/149646741"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/3489#discussion_r149646741"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/3489"}}, "body_html": "<p>We should not need the <code>infer_kind</code> logic at all in the ATen case. Think about where the attributes come from: you pulled them out of a <code>Node</code> using <code>attrs = {k: n[k] for k in n.attributeNames()}</code>. The <code>n[k]</code> drops precisely the type information you actually want to use to determine the ATen types. You want the <code>kindOf</code> method: <code>n.kindOf(\"key\")</code> will give you <code>f</code> for float, <code>fs</code> for list of floats, etc. Then all of this code can go away.</p>\n<p>In this regime, you should also delete the <code>aten</code> kwarg from <code>_graph_at</code>, and just make a new function which does this construction. These two functions aren't doing the same thing at all!</p>", "body_text": "We should not need the infer_kind logic at all in the ATen case. Think about where the attributes come from: you pulled them out of a Node using attrs = {k: n[k] for k in n.attributeNames()}. The n[k] drops precisely the type information you actually want to use to determine the ATen types. You want the kindOf method: n.kindOf(\"key\") will give you f for float, fs for list of floats, etc. Then all of this code can go away.\nIn this regime, you should also delete the aten kwarg from _graph_at, and just make a new function which does this construction. These two functions aren't doing the same thing at all!"}