{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/148940494", "pull_request_review_id": 74264901, "id": 148940494, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0ODk0MDQ5NA==", "diff_hunk": "@@ -39,8 +39,10 @@ def set_training(model, mode):\n         if old_mode != mode:\n             model.train(old_mode)\n \n+# The global variable indicates whether aten mode is on\n+aten=False", "path": "torch/onnx/__init__.py", "position": null, "original_position": 5, "commit_id": "4c123c3774d8ae68b413ff99fe3cb15c7984f408", "original_commit_id": "715e58a6934fa8c8d7f121cef4ad510ceda539ad", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "I don't want to be blocking here, but why do we need this global? It would be much clearer to make `_run_symbolic_function` a closure that captures `aten` value local to the `export` call and then we pass this pointer as a `PyObject*` to the C backend. This would let us not have this code that looks it up from C (you just get it from a pointer), and we wouldn't have to use globals (ugh)", "created_at": "2017-11-04T20:25:49Z", "updated_at": "2018-11-23T15:36:03Z", "html_url": "https://github.com/pytorch/pytorch/pull/3489#discussion_r148940494", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/3489", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/148940494"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/3489#discussion_r148940494"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/3489"}}, "body_html": "<p>I don't want to be blocking here, but why do we need this global? It would be much clearer to make <code>_run_symbolic_function</code> a closure that captures <code>aten</code> value local to the <code>export</code> call and then we pass this pointer as a <code>PyObject*</code> to the C backend. This would let us not have this code that looks it up from C (you just get it from a pointer), and we wouldn't have to use globals (ugh)</p>", "body_text": "I don't want to be blocking here, but why do we need this global? It would be much clearer to make _run_symbolic_function a closure that captures aten value local to the export call and then we pass this pointer as a PyObject* to the C backend. This would let us not have this code that looks it up from C (you just get it from a pointer), and we wouldn't have to use globals (ugh)", "in_reply_to_id": 148937122}