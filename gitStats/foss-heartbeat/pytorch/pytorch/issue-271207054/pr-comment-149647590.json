{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/149647590", "pull_request_review_id": 75072163, "id": 149647590, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0OTY0NzU5MA==", "diff_hunk": "@@ -239,8 +278,27 @@ def _run_symbolic_function(g, n, inputs):\n         raise\n \n \n+# Generate an ONNX ATen op node. The generated op keeps ATen attribute names.\n def _graph_at(g, opname, *args, **kwargs):\n-    return g.op(\"ATen\", *args, operator_s=opname, **kwargs)\n+    # If aten is True, attribute names should not contain the type suffix.\n+    aten = kwargs.pop(\"aten\", False)\n+\n+    # Handle the multiple return ATen ops.\n+    # If ATen ops have more than one return values, set the outputs.\n+    # The exporter generates select nodes.\n+    outputs = 1\n+    if opname == \"max_pool2d\":", "path": "torch/onnx/__init__.py", "position": null, "original_position": 161, "commit_id": "4c123c3774d8ae68b413ff99fe3cb15c7984f408", "original_commit_id": "c45935a1fa468d025e34cc62f71473e0ff751265", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "You don't want to hard code multiple return ATen operators here; if we add more multiple return ops (and we will), these lists will go out of sync, and it's an easy way to end up with bugs. And furthermore, we already have a canonical source of information for the actual number of outputs: the outputs of the node we are translating! You can just use `len(node.outputs())` to figure out the number of outputs (and if you follow my advice in the other comment, you'll have access to `node`, even though you don't in this function).", "created_at": "2017-11-08T11:54:04Z", "updated_at": "2018-11-23T15:36:10Z", "html_url": "https://github.com/pytorch/pytorch/pull/3489#discussion_r149647590", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/3489", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/149647590"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/3489#discussion_r149647590"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/3489"}}, "body_html": "<p>You don't want to hard code multiple return ATen operators here; if we add more multiple return ops (and we will), these lists will go out of sync, and it's an easy way to end up with bugs. And furthermore, we already have a canonical source of information for the actual number of outputs: the outputs of the node we are translating! You can just use <code>len(node.outputs())</code> to figure out the number of outputs (and if you follow my advice in the other comment, you'll have access to <code>node</code>, even though you don't in this function).</p>", "body_text": "You don't want to hard code multiple return ATen operators here; if we add more multiple return ops (and we will), these lists will go out of sync, and it's an easy way to end up with bugs. And furthermore, we already have a canonical source of information for the actual number of outputs: the outputs of the node we are translating! You can just use len(node.outputs()) to figure out the number of outputs (and if you follow my advice in the other comment, you'll have access to node, even though you don't in this function)."}