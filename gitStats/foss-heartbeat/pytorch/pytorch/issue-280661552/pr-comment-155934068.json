{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/155934068", "pull_request_review_id": 82337198, "id": 155934068, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTkzNDA2OA==", "diff_hunk": "@@ -355,6 +355,50 @@ def lookup_pred(pred, xs):\n         \"\"\"Return the index of the first element of xs matching pred.\"\"\"\n         return next((i, x) for i, x in enumerate(xs) if pred(x))\n \n+    def is_nn_fwd(defn_name, declarations_by_name):", "path": "tools/autograd/gen_variable_type.py", "position": null, "original_position": 13, "commit_id": "f806cacd7c92d2f8205a73bfdaad3ddfa93d79f4", "original_commit_id": "a017bdd9b28f6d350f16eab7c4f7a860c10b337c", "user": {"login": "lantiga", "id": 191033, "node_id": "MDQ6VXNlcjE5MTAzMw==", "avatar_url": "https://avatars2.githubusercontent.com/u/191033?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lantiga", "html_url": "https://github.com/lantiga", "followers_url": "https://api.github.com/users/lantiga/followers", "following_url": "https://api.github.com/users/lantiga/following{/other_user}", "gists_url": "https://api.github.com/users/lantiga/gists{/gist_id}", "starred_url": "https://api.github.com/users/lantiga/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lantiga/subscriptions", "organizations_url": "https://api.github.com/users/lantiga/orgs", "repos_url": "https://api.github.com/users/lantiga/repos", "events_url": "https://api.github.com/users/lantiga/events{/privacy}", "received_events_url": "https://api.github.com/users/lantiga/received_events", "type": "User", "site_admin": false}, "body": "Yes, at the moment. `nn` functions are treated in a special way, because we have to dispatch on the `_forward` functions that take buffers as arguments. These are not explicitly declared anywhere, we just know they're generated by `ATen/nn_parse.py` for NN, non-backward functions.\r\n\r\nWe can change this by having a `dispatch` property somewhere in a yaml file in ATen (like it's done for `ATen/cudnn`). I took the simpler route following our previous exchange on not changing strategy for `nn_parse`.\r\n", "created_at": "2017-12-09T22:42:38Z", "updated_at": "2018-11-23T15:37:14Z", "html_url": "https://github.com/pytorch/pytorch/pull/4096#discussion_r155934068", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4096", "author_association": "COLLABORATOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/155934068"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/4096#discussion_r155934068"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4096"}}, "body_html": "<p>Yes, at the moment. <code>nn</code> functions are treated in a special way, because we have to dispatch on the <code>_forward</code> functions that take buffers as arguments. These are not explicitly declared anywhere, we just know they're generated by <code>ATen/nn_parse.py</code> for NN, non-backward functions.</p>\n<p>We can change this by having a <code>dispatch</code> property somewhere in a yaml file in ATen (like it's done for <code>ATen/cudnn</code>). I took the simpler route following our previous exchange on not changing strategy for <code>nn_parse</code>.</p>", "body_text": "Yes, at the moment. nn functions are treated in a special way, because we have to dispatch on the _forward functions that take buffers as arguments. These are not explicitly declared anywhere, we just know they're generated by ATen/nn_parse.py for NN, non-backward functions.\nWe can change this by having a dispatch property somewhere in a yaml file in ATen (like it's done for ATen/cudnn). I took the simpler route following our previous exchange on not changing strategy for nn_parse.", "in_reply_to_id": 155932189}