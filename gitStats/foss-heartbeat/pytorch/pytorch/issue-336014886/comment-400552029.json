{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/400552029", "html_url": "https://github.com/pytorch/pytorch/issues/8921#issuecomment-400552029", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/8921", "id": 400552029, "node_id": "MDEyOklzc3VlQ29tbWVudDQwMDU1MjAyOQ==", "user": {"login": "t-vi", "id": 20787943, "node_id": "MDQ6VXNlcjIwNzg3OTQz", "avatar_url": "https://avatars2.githubusercontent.com/u/20787943?v=4", "gravatar_id": "", "url": "https://api.github.com/users/t-vi", "html_url": "https://github.com/t-vi", "followers_url": "https://api.github.com/users/t-vi/followers", "following_url": "https://api.github.com/users/t-vi/following{/other_user}", "gists_url": "https://api.github.com/users/t-vi/gists{/gist_id}", "starred_url": "https://api.github.com/users/t-vi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/t-vi/subscriptions", "organizations_url": "https://api.github.com/users/t-vi/orgs", "repos_url": "https://api.github.com/users/t-vi/repos", "events_url": "https://api.github.com/users/t-vi/events{/privacy}", "received_events_url": "https://api.github.com/users/t-vi/received_events", "type": "User", "site_admin": false}, "created_at": "2018-06-27T05:58:48Z", "updated_at": "2018-06-27T05:58:48Z", "author_association": "CONTRIBUTOR", "body_html": "<p>The binary operations are outright dangerous unless you implement erring out when feeding sequences of different length.<br>\nPersonally, I use an apply method</p>\n<pre><code>def elementwise_applyi(fn, arg):\n    return torch.nn.utils.rnn.PackedSequence(fn(arg.data, args[0].batch_sizes))\n\ndef elementwise_apply_multi(fn, *args):\n    # DOES NOT CHECK compatibility of packed sequences!\n    return torch.nn.utils.rnn.PackedSequence(fn(*[(arg.data if type(arg)==torch.nn.utils.rnn.PackedSequence else arg) for arg in args]), args[0].batch_sizes)\n</code></pre>\n<p>but that has been all I ever needed. Can be used with <code>torch.x</code> functions, user-defined or lambdas.</p>", "body_text": "The binary operations are outright dangerous unless you implement erring out when feeding sequences of different length.\nPersonally, I use an apply method\ndef elementwise_applyi(fn, arg):\n    return torch.nn.utils.rnn.PackedSequence(fn(arg.data, args[0].batch_sizes))\n\ndef elementwise_apply_multi(fn, *args):\n    # DOES NOT CHECK compatibility of packed sequences!\n    return torch.nn.utils.rnn.PackedSequence(fn(*[(arg.data if type(arg)==torch.nn.utils.rnn.PackedSequence else arg) for arg in args]), args[0].batch_sizes)\n\nbut that has been all I ever needed. Can be used with torch.x functions, user-defined or lambdas.", "body": "The binary operations are outright dangerous unless you implement erring out when feeding sequences of different length.\r\nPersonally, I use an apply method\r\n```\r\ndef elementwise_applyi(fn, arg):\r\n    return torch.nn.utils.rnn.PackedSequence(fn(arg.data, args[0].batch_sizes))\r\n\r\ndef elementwise_apply_multi(fn, *args):\r\n    # DOES NOT CHECK compatibility of packed sequences!\r\n    return torch.nn.utils.rnn.PackedSequence(fn(*[(arg.data if type(arg)==torch.nn.utils.rnn.PackedSequence else arg) for arg in args]), args[0].batch_sizes)\r\n```\r\nbut that has been all I ever needed. Can be used with `torch.x` functions, user-defined or lambdas.\r\n"}