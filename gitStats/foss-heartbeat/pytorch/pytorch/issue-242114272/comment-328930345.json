{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/328930345", "html_url": "https://github.com/pytorch/pytorch/issues/2055#issuecomment-328930345", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/2055", "id": 328930345, "node_id": "MDEyOklzc3VlQ29tbWVudDMyODkzMDM0NQ==", "user": {"login": "lematt1991", "id": 13142923, "node_id": "MDQ6VXNlcjEzMTQyOTIz", "avatar_url": "https://avatars1.githubusercontent.com/u/13142923?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lematt1991", "html_url": "https://github.com/lematt1991", "followers_url": "https://api.github.com/users/lematt1991/followers", "following_url": "https://api.github.com/users/lematt1991/following{/other_user}", "gists_url": "https://api.github.com/users/lematt1991/gists{/gist_id}", "starred_url": "https://api.github.com/users/lematt1991/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lematt1991/subscriptions", "organizations_url": "https://api.github.com/users/lematt1991/orgs", "repos_url": "https://api.github.com/users/lematt1991/repos", "events_url": "https://api.github.com/users/lematt1991/events{/privacy}", "received_events_url": "https://api.github.com/users/lematt1991/received_events", "type": "User", "site_admin": false}, "created_at": "2017-09-12T17:47:59Z", "updated_at": "2017-09-12T17:47:59Z", "author_association": "CONTRIBUTOR", "body_html": "<p>As <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=5736469\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/serhii-havrylov\">@serhii-havrylov</a> mentioned:</p>\n<blockquote>\n<p>Having zero-dimensional Tensors is quite convenient sometimes. I was just wondering is there any particular reason for not having them?</p>\n</blockquote>\n<p>This would be a very convenient feature and would also be consistent with what numpy does.  For example when doing object localization, I represent the targets as a two dimensional tensor where each row represents the coordinates of the bounding box of a particular target.  If a particular sample doesn't have any targets, then we need to add a bunch of extra checks to see if the tensor is empty.  Instead, it would be great, if I could just do <code>targets[:, :2]</code> to get all of the upper left coordinates and have this return an empty tensor if <code>targets</code> is empty.</p>\n<p>Is there something fundamental to torch that would make this difficult?  If not I'd be willing to look into submitting a PR.</p>", "body_text": "As @serhii-havrylov mentioned:\n\nHaving zero-dimensional Tensors is quite convenient sometimes. I was just wondering is there any particular reason for not having them?\n\nThis would be a very convenient feature and would also be consistent with what numpy does.  For example when doing object localization, I represent the targets as a two dimensional tensor where each row represents the coordinates of the bounding box of a particular target.  If a particular sample doesn't have any targets, then we need to add a bunch of extra checks to see if the tensor is empty.  Instead, it would be great, if I could just do targets[:, :2] to get all of the upper left coordinates and have this return an empty tensor if targets is empty.\nIs there something fundamental to torch that would make this difficult?  If not I'd be willing to look into submitting a PR.", "body": "As @serhii-havrylov mentioned:\r\n\r\n> Having zero-dimensional Tensors is quite convenient sometimes. I was just wondering is there any particular reason for not having them?\r\n\r\nThis would be a very convenient feature and would also be consistent with what numpy does.  For example when doing object localization, I represent the targets as a two dimensional tensor where each row represents the coordinates of the bounding box of a particular target.  If a particular sample doesn't have any targets, then we need to add a bunch of extra checks to see if the tensor is empty.  Instead, it would be great, if I could just do `targets[:, :2]` to get all of the upper left coordinates and have this return an empty tensor if `targets` is empty.  \r\n\r\nIs there something fundamental to torch that would make this difficult?  If not I'd be willing to look into submitting a PR.\r\n"}