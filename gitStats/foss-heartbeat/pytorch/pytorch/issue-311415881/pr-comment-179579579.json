{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/179579579", "pull_request_review_id": 109850984, "id": 179579579, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTU3OTU3OQ==", "diff_hunk": "@@ -1303,6 +1303,73 @@ def test_dtypes(self):\n         cuda_dtypes = [d for d in all_dtypes if d.is_cuda]\n         self._test_dtypes(self, cpu_dtypes, cuda_dtypes, torch.strided)\n \n+    def test_device(self):\n+        self.assertEqual('cpu', torch.tensor(5).device)\n+        self.assertEqual('cpu', torch.ones((2, 3), dtype=torch.float32, device='cpu').device)\n+        self.assertEqual('cpu', torch.ones((2, 3), dtype=torch.float32, device='cpu:0').device)\n+        if torch.cuda.is_available():\n+            self.assertEqual('cuda:0', torch.tensor(5).cuda(0).device)\n+            self.assertEqual('cuda:0', torch.tensor(5).cuda('cuda:0').device)\n+            self.assertRaises(RuntimeError, lambda: torch.tensor(5).cuda('cpu'))\n+            self.assertRaises(RuntimeError, lambda: torch.tensor(5).cuda('cpu:0'))\n+            self.assertEqual('cuda:0', torch.tensor(5, dtype=torch.cuda.int64, device=0).device)\n+            self.assertEqual('cuda:0', torch.tensor(5, dtype=torch.cuda.int64, device='cuda:0').device)\n+            self.assertEqual('cuda:' + str(torch.cuda.current_device()),\n+                             torch.tensor(5, dtype=torch.cuda.int64, device='cuda').device)\n+\n+            if torch.cuda.device_count() > 1:\n+                self.assertEqual('cuda:1', torch.tensor(5).cuda(1).device)\n+                self.assertEqual('cuda:1', torch.tensor(5).cuda('cuda:1').device)\n+                self.assertEqual('cuda:1', torch.tensor(5, dtype=torch.cuda.int64, device=1).device)\n+                self.assertEqual('cuda:1', torch.tensor(5, dtype=torch.cuda.int64, device='cuda:1').device)\n+\n+    def test_devicespec(self):\n+        cpu = torch.DeviceSpec('cpu')\n+        self.assertEqual('cpu', str(cpu))\n+        self.assertEqual('cpu', cpu.device_type)\n+        self.assertEqual(None, cpu.device_index)\n+        self.assertRaises(RuntimeError, lambda: cpu.cuda_device_index)\n+\n+        cpu0 = torch.DeviceSpec('cpu:0')", "path": "test/test_torch.py", "position": null, "original_position": 31, "commit_id": "e591346acf064c4bd31383f1e5f57ba1a086206a", "original_commit_id": "146c33f6860b80f42151007b7210b31995eecf10", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Oh, I'm not proposing adding another type (even in the future!). I'm only suggesting that we rename `DeviceSpec` to `Device` and start treating it as a \"realized device\" as you called it. It would also get returned from `.device`.\r\n\r\nWhenever you need an unrealized device, you use a string. If the string really can't be matched with any of the existing devices then it fails. That's a pretty simple scheme, and I think it is an improvement over `DeviceSpec`.", "created_at": "2018-04-05T19:43:00Z", "updated_at": "2018-11-23T15:41:50Z", "html_url": "https://github.com/pytorch/pytorch/pull/6283#discussion_r179579579", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/6283", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/179579579"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/6283#discussion_r179579579"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/6283"}}, "body_html": "<p>Oh, I'm not proposing adding another type (even in the future!). I'm only suggesting that we rename <code>DeviceSpec</code> to <code>Device</code> and start treating it as a \"realized device\" as you called it. It would also get returned from <code>.device</code>.</p>\n<p>Whenever you need an unrealized device, you use a string. If the string really can't be matched with any of the existing devices then it fails. That's a pretty simple scheme, and I think it is an improvement over <code>DeviceSpec</code>.</p>", "body_text": "Oh, I'm not proposing adding another type (even in the future!). I'm only suggesting that we rename DeviceSpec to Device and start treating it as a \"realized device\" as you called it. It would also get returned from .device.\nWhenever you need an unrealized device, you use a string. If the string really can't be matched with any of the existing devices then it fails. That's a pretty simple scheme, and I think it is an improvement over DeviceSpec.", "in_reply_to_id": 179570026}