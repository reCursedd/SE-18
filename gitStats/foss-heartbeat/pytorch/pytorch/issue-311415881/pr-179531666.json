{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/6283", "id": 179531666, "node_id": "MDExOlB1bGxSZXF1ZXN0MTc5NTMxNjY2", "html_url": "https://github.com/pytorch/pytorch/pull/6283", "diff_url": "https://github.com/pytorch/pytorch/pull/6283.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/6283.patch", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/6283", "number": 6283, "state": "closed", "locked": false, "title": "Add string-style devices to all tensors.", "user": {"login": "gchanan", "id": 3768583, "node_id": "MDQ6VXNlcjM3Njg1ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3768583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gchanan", "html_url": "https://github.com/gchanan", "followers_url": "https://api.github.com/users/gchanan/followers", "following_url": "https://api.github.com/users/gchanan/following{/other_user}", "gists_url": "https://api.github.com/users/gchanan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gchanan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gchanan/subscriptions", "organizations_url": "https://api.github.com/users/gchanan/orgs", "repos_url": "https://api.github.com/users/gchanan/repos", "events_url": "https://api.github.com/users/gchanan/events{/privacy}", "received_events_url": "https://api.github.com/users/gchanan/received_events", "type": "User", "site_admin": false}, "body": "Previously, tensors only had a `get_device` method which would throw an exception on a CPU tensor.   This made it necessary to if/else code that was meant to be device agnostic.\r\n\r\nThis PR implements the following:\r\n\r\n1) Adds a 'device' property to all tensors that returns a string representation of the device for all tensors.  For cpu tensors this is 'cpu'.  For cuda tensors this is 'cuda:X', where X is the cuda device ordinal.\r\n\r\n2) Adds a DeviceSpec class.  This is just a helper class for separating device_type and device_index specification and to allow partial specification.\r\n\r\n   For example, you can call `DeviceSpec('cuda')`, `DeviceSpec('cuda:0')`, `DeviceSpec('cuda', 1)`.\r\nAlso has backwards compatibility support for specifying integers (`DeviceSpec(1)`), which are treated as cuda devices.  DeviceSpecs have the following properties:\r\n\r\n   - `device_type`: string representation of the device type (i.e. 'cpu' or 'cuda')\r\n   - `device_index`: integer for the device index (None if not specified)\r\n   - `cuda_device_index`: for backwards compatibility; behaves roughly like `get_device` did previously.  I.e. if a function previously took integers for cuda devices, it can now take DeviceSpecs (or strings), and can maintain the old functionality by calling `old_index = DeviceSpec(old).cuda_device_index`.\r\n\r\n3) tensor methods and torch. functions that took integer devices can now take integers, strings, or DeviceSpecs.  For example:\r\n`torch.randn((2,3), dtype=torch.cuda.float32, device='cuda:1')`\r\n\r\nTODO in future PRs:\r\n\r\n* Split out cuda from dtype so you don't need to overspecify cuda-ness\r\n* We currently only support strings/DeviceSpecs in tensor methods and torch. functions.  We should have equivalents `torch.cuda.device(...)`, `torch.cuda.device_of`, etc. at the torch. level that work on strings/DeviceSpecs", "created_at": "2018-04-04T22:43:13Z", "updated_at": "2018-11-23T15:41:56Z", "closed_at": "2018-04-06T19:12:06Z", "merged_at": "2018-04-06T19:12:06Z", "merge_commit_sha": "87e369111a5defce56b4f0b3fac53970fa0d5462", "assignee": null, "assignees": [], "requested_reviewers": [{"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, {"login": "colesbury", "id": 655866, "node_id": "MDQ6VXNlcjY1NTg2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/655866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colesbury", "html_url": "https://github.com/colesbury", "followers_url": "https://api.github.com/users/colesbury/followers", "following_url": "https://api.github.com/users/colesbury/following{/other_user}", "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions", "organizations_url": "https://api.github.com/users/colesbury/orgs", "repos_url": "https://api.github.com/users/colesbury/repos", "events_url": "https://api.github.com/users/colesbury/events{/privacy}", "received_events_url": "https://api.github.com/users/colesbury/received_events", "type": "User", "site_admin": false}, {"login": "soumith", "id": 1310570, "node_id": "MDQ6VXNlcjEzMTA1NzA=", "avatar_url": "https://avatars0.githubusercontent.com/u/1310570?v=4", "gravatar_id": "", "url": "https://api.github.com/users/soumith", "html_url": "https://github.com/soumith", "followers_url": "https://api.github.com/users/soumith/followers", "following_url": "https://api.github.com/users/soumith/following{/other_user}", "gists_url": "https://api.github.com/users/soumith/gists{/gist_id}", "starred_url": "https://api.github.com/users/soumith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/soumith/subscriptions", "organizations_url": "https://api.github.com/users/soumith/orgs", "repos_url": "https://api.github.com/users/soumith/repos", "events_url": "https://api.github.com/users/soumith/events{/privacy}", "received_events_url": "https://api.github.com/users/soumith/received_events", "type": "User", "site_admin": false}], "requested_teams": [], "labels": [], "milestone": null, "commits_url": "https://api.github.com/repos/pytorch/pytorch/pulls/6283/commits", "review_comments_url": "https://api.github.com/repos/pytorch/pytorch/pulls/6283/comments", "review_comment_url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments{/number}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/6283/comments", "statuses_url": "https://api.github.com/repos/pytorch/pytorch/statuses/e591346acf064c4bd31383f1e5f57ba1a086206a", "head": {"label": "gchanan:device_spec_master", "ref": "device_spec_master", "sha": "e591346acf064c4bd31383f1e5f57ba1a086206a", "user": {"login": "gchanan", "id": 3768583, "node_id": "MDQ6VXNlcjM3Njg1ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3768583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gchanan", "html_url": "https://github.com/gchanan", "followers_url": "https://api.github.com/users/gchanan/followers", "following_url": "https://api.github.com/users/gchanan/following{/other_user}", "gists_url": "https://api.github.com/users/gchanan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gchanan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gchanan/subscriptions", "organizations_url": "https://api.github.com/users/gchanan/orgs", "repos_url": "https://api.github.com/users/gchanan/repos", "events_url": "https://api.github.com/users/gchanan/events{/privacy}", "received_events_url": "https://api.github.com/users/gchanan/received_events", "type": "User", "site_admin": false}, "repo": {"id": 88906627, "node_id": "MDEwOlJlcG9zaXRvcnk4ODkwNjYyNw==", "name": "pytorch", "full_name": "gchanan/pytorch", "private": false, "owner": {"login": "gchanan", "id": 3768583, "node_id": "MDQ6VXNlcjM3Njg1ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3768583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gchanan", "html_url": "https://github.com/gchanan", "followers_url": "https://api.github.com/users/gchanan/followers", "following_url": "https://api.github.com/users/gchanan/following{/other_user}", "gists_url": "https://api.github.com/users/gchanan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gchanan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gchanan/subscriptions", "organizations_url": "https://api.github.com/users/gchanan/orgs", "repos_url": "https://api.github.com/users/gchanan/repos", "events_url": "https://api.github.com/users/gchanan/events{/privacy}", "received_events_url": "https://api.github.com/users/gchanan/received_events", "type": "User", "site_admin": false}, "html_url": "https://github.com/gchanan/pytorch", "description": "Tensors and Dynamic neural networks in Python  with strong GPU acceleration", "fork": true, "url": "https://api.github.com/repos/gchanan/pytorch", "forks_url": "https://api.github.com/repos/gchanan/pytorch/forks", "keys_url": "https://api.github.com/repos/gchanan/pytorch/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/gchanan/pytorch/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/gchanan/pytorch/teams", "hooks_url": "https://api.github.com/repos/gchanan/pytorch/hooks", "issue_events_url": "https://api.github.com/repos/gchanan/pytorch/issues/events{/number}", "events_url": "https://api.github.com/repos/gchanan/pytorch/events", "assignees_url": "https://api.github.com/repos/gchanan/pytorch/assignees{/user}", "branches_url": "https://api.github.com/repos/gchanan/pytorch/branches{/branch}", "tags_url": "https://api.github.com/repos/gchanan/pytorch/tags", "blobs_url": "https://api.github.com/repos/gchanan/pytorch/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/gchanan/pytorch/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/gchanan/pytorch/git/refs{/sha}", "trees_url": "https://api.github.com/repos/gchanan/pytorch/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/gchanan/pytorch/statuses/{sha}", "languages_url": "https://api.github.com/repos/gchanan/pytorch/languages", "stargazers_url": "https://api.github.com/repos/gchanan/pytorch/stargazers", "contributors_url": "https://api.github.com/repos/gchanan/pytorch/contributors", "subscribers_url": "https://api.github.com/repos/gchanan/pytorch/subscribers", "subscription_url": "https://api.github.com/repos/gchanan/pytorch/subscription", "commits_url": "https://api.github.com/repos/gchanan/pytorch/commits{/sha}", "git_commits_url": "https://api.github.com/repos/gchanan/pytorch/git/commits{/sha}", "comments_url": "https://api.github.com/repos/gchanan/pytorch/comments{/number}", "issue_comment_url": "https://api.github.com/repos/gchanan/pytorch/issues/comments{/number}", "contents_url": "https://api.github.com/repos/gchanan/pytorch/contents/{+path}", "compare_url": "https://api.github.com/repos/gchanan/pytorch/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/gchanan/pytorch/merges", "archive_url": "https://api.github.com/repos/gchanan/pytorch/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/gchanan/pytorch/downloads", "issues_url": "https://api.github.com/repos/gchanan/pytorch/issues{/number}", "pulls_url": "https://api.github.com/repos/gchanan/pytorch/pulls{/number}", "milestones_url": "https://api.github.com/repos/gchanan/pytorch/milestones{/number}", "notifications_url": "https://api.github.com/repos/gchanan/pytorch/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/gchanan/pytorch/labels{/name}", "releases_url": "https://api.github.com/repos/gchanan/pytorch/releases{/id}", "deployments_url": "https://api.github.com/repos/gchanan/pytorch/deployments", "created_at": "2017-04-20T20:14:16Z", "updated_at": "2018-10-19T12:21:28Z", "pushed_at": "2018-11-21T22:07:06Z", "git_url": "git://github.com/gchanan/pytorch.git", "ssh_url": "git@github.com:gchanan/pytorch.git", "clone_url": "https://github.com/gchanan/pytorch.git", "svn_url": "https://github.com/gchanan/pytorch", "homepage": "http://pytorch.org", "size": 94092, "stargazers_count": 4, "watchers_count": 4, "language": "Python", "has_issues": true, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 0, "mirror_url": null, "archived": false, "open_issues_count": 1, "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "forks": 0, "open_issues": 1, "watchers": 4, "default_branch": "master"}}, "base": {"label": "pytorch:master", "ref": "master", "sha": "b724084335aaf5c1b61b5481928d7f4026899c21", "user": {"login": "pytorch", "id": 21003710, "node_id": "MDEyOk9yZ2FuaXphdGlvbjIxMDAzNzEw", "avatar_url": "https://avatars3.githubusercontent.com/u/21003710?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pytorch", "html_url": "https://github.com/pytorch", "followers_url": "https://api.github.com/users/pytorch/followers", "following_url": "https://api.github.com/users/pytorch/following{/other_user}", "gists_url": "https://api.github.com/users/pytorch/gists{/gist_id}", "starred_url": "https://api.github.com/users/pytorch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pytorch/subscriptions", "organizations_url": "https://api.github.com/users/pytorch/orgs", "repos_url": "https://api.github.com/users/pytorch/repos", "events_url": "https://api.github.com/users/pytorch/events{/privacy}", "received_events_url": "https://api.github.com/users/pytorch/received_events", "type": "Organization", "site_admin": false}, "repo": {"id": 65600975, "node_id": "MDEwOlJlcG9zaXRvcnk2NTYwMDk3NQ==", "name": "pytorch", "full_name": "pytorch/pytorch", "private": false, "owner": {"login": "pytorch", "id": 21003710, "node_id": "MDEyOk9yZ2FuaXphdGlvbjIxMDAzNzEw", "avatar_url": "https://avatars3.githubusercontent.com/u/21003710?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pytorch", "html_url": "https://github.com/pytorch", "followers_url": "https://api.github.com/users/pytorch/followers", "following_url": "https://api.github.com/users/pytorch/following{/other_user}", "gists_url": "https://api.github.com/users/pytorch/gists{/gist_id}", "starred_url": "https://api.github.com/users/pytorch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pytorch/subscriptions", "organizations_url": "https://api.github.com/users/pytorch/orgs", "repos_url": "https://api.github.com/users/pytorch/repos", "events_url": "https://api.github.com/users/pytorch/events{/privacy}", "received_events_url": "https://api.github.com/users/pytorch/received_events", "type": "Organization", "site_admin": false}, "html_url": "https://github.com/pytorch/pytorch", "description": "Tensors and Dynamic neural networks in Python  with strong GPU acceleration", "fork": false, "url": "https://api.github.com/repos/pytorch/pytorch", "forks_url": "https://api.github.com/repos/pytorch/pytorch/forks", "keys_url": "https://api.github.com/repos/pytorch/pytorch/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/pytorch/pytorch/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/pytorch/pytorch/teams", "hooks_url": "https://api.github.com/repos/pytorch/pytorch/hooks", "issue_events_url": "https://api.github.com/repos/pytorch/pytorch/issues/events{/number}", "events_url": "https://api.github.com/repos/pytorch/pytorch/events", "assignees_url": "https://api.github.com/repos/pytorch/pytorch/assignees{/user}", "branches_url": "https://api.github.com/repos/pytorch/pytorch/branches{/branch}", "tags_url": "https://api.github.com/repos/pytorch/pytorch/tags", "blobs_url": "https://api.github.com/repos/pytorch/pytorch/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/pytorch/pytorch/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/pytorch/pytorch/git/refs{/sha}", "trees_url": "https://api.github.com/repos/pytorch/pytorch/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/pytorch/pytorch/statuses/{sha}", "languages_url": "https://api.github.com/repos/pytorch/pytorch/languages", "stargazers_url": "https://api.github.com/repos/pytorch/pytorch/stargazers", "contributors_url": "https://api.github.com/repos/pytorch/pytorch/contributors", "subscribers_url": "https://api.github.com/repos/pytorch/pytorch/subscribers", "subscription_url": "https://api.github.com/repos/pytorch/pytorch/subscription", "commits_url": "https://api.github.com/repos/pytorch/pytorch/commits{/sha}", "git_commits_url": "https://api.github.com/repos/pytorch/pytorch/git/commits{/sha}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/comments{/number}", "issue_comment_url": "https://api.github.com/repos/pytorch/pytorch/issues/comments{/number}", "contents_url": "https://api.github.com/repos/pytorch/pytorch/contents/{+path}", "compare_url": "https://api.github.com/repos/pytorch/pytorch/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/pytorch/pytorch/merges", "archive_url": "https://api.github.com/repos/pytorch/pytorch/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/pytorch/pytorch/downloads", "issues_url": "https://api.github.com/repos/pytorch/pytorch/issues{/number}", "pulls_url": "https://api.github.com/repos/pytorch/pytorch/pulls{/number}", "milestones_url": "https://api.github.com/repos/pytorch/pytorch/milestones{/number}", "notifications_url": "https://api.github.com/repos/pytorch/pytorch/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/pytorch/pytorch/labels{/name}", "releases_url": "https://api.github.com/repos/pytorch/pytorch/releases{/id}", "deployments_url": "https://api.github.com/repos/pytorch/pytorch/deployments", "created_at": "2016-08-13T05:26:41Z", "updated_at": "2018-11-24T05:35:41Z", "pushed_at": "2018-11-24T05:34:07Z", "git_url": "git://github.com/pytorch/pytorch.git", "ssh_url": "git@github.com:pytorch/pytorch.git", "clone_url": "https://github.com/pytorch/pytorch.git", "svn_url": "https://github.com/pytorch/pytorch", "homepage": "http://pytorch.org", "size": 89651, "stargazers_count": 21577, "watchers_count": 21577, "language": "C++", "has_issues": true, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 5149, "mirror_url": null, "archived": false, "open_issues_count": 2193, "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "forks": 5149, "open_issues": 2193, "watchers": 21577, "default_branch": "master"}}, "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/6283"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/6283"}, "issue": {"href": "https://api.github.com/repos/pytorch/pytorch/issues/6283"}, "comments": {"href": "https://api.github.com/repos/pytorch/pytorch/issues/6283/comments"}, "review_comments": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/6283/comments"}, "review_comment": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments{/number}"}, "commits": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/6283/commits"}, "statuses": {"href": "https://api.github.com/repos/pytorch/pytorch/statuses/e591346acf064c4bd31383f1e5f57ba1a086206a"}}, "author_association": "CONTRIBUTOR", "body_html": "<p>Previously, tensors only had a <code>get_device</code> method which would throw an exception on a CPU tensor.   This made it necessary to if/else code that was meant to be device agnostic.</p>\n<p>This PR implements the following:</p>\n<ol>\n<li>\n<p>Adds a 'device' property to all tensors that returns a string representation of the device for all tensors.  For cpu tensors this is 'cpu'.  For cuda tensors this is 'cuda:X', where X is the cuda device ordinal.</p>\n</li>\n<li>\n<p>Adds a DeviceSpec class.  This is just a helper class for separating device_type and device_index specification and to allow partial specification.</p>\n<p>For example, you can call <code>DeviceSpec('cuda')</code>, <code>DeviceSpec('cuda:0')</code>, <code>DeviceSpec('cuda', 1)</code>.<br>\nAlso has backwards compatibility support for specifying integers (<code>DeviceSpec(1)</code>), which are treated as cuda devices.  DeviceSpecs have the following properties:</p>\n<ul>\n<li><code>device_type</code>: string representation of the device type (i.e. 'cpu' or 'cuda')</li>\n<li><code>device_index</code>: integer for the device index (None if not specified)</li>\n<li><code>cuda_device_index</code>: for backwards compatibility; behaves roughly like <code>get_device</code> did previously.  I.e. if a function previously took integers for cuda devices, it can now take DeviceSpecs (or strings), and can maintain the old functionality by calling <code>old_index = DeviceSpec(old).cuda_device_index</code>.</li>\n</ul>\n</li>\n<li>\n<p>tensor methods and torch. functions that took integer devices can now take integers, strings, or DeviceSpecs.  For example:<br>\n<code>torch.randn((2,3), dtype=torch.cuda.float32, device='cuda:1')</code></p>\n</li>\n</ol>\n<p>TODO in future PRs:</p>\n<ul>\n<li>Split out cuda from dtype so you don't need to overspecify cuda-ness</li>\n<li>We currently only support strings/DeviceSpecs in tensor methods and torch. functions.  We should have equivalents <code>torch.cuda.device(...)</code>, <code>torch.cuda.device_of</code>, etc. at the torch. level that work on strings/DeviceSpecs</li>\n</ul>", "body_text": "Previously, tensors only had a get_device method which would throw an exception on a CPU tensor.   This made it necessary to if/else code that was meant to be device agnostic.\nThis PR implements the following:\n\n\nAdds a 'device' property to all tensors that returns a string representation of the device for all tensors.  For cpu tensors this is 'cpu'.  For cuda tensors this is 'cuda:X', where X is the cuda device ordinal.\n\n\nAdds a DeviceSpec class.  This is just a helper class for separating device_type and device_index specification and to allow partial specification.\nFor example, you can call DeviceSpec('cuda'), DeviceSpec('cuda:0'), DeviceSpec('cuda', 1).\nAlso has backwards compatibility support for specifying integers (DeviceSpec(1)), which are treated as cuda devices.  DeviceSpecs have the following properties:\n\ndevice_type: string representation of the device type (i.e. 'cpu' or 'cuda')\ndevice_index: integer for the device index (None if not specified)\ncuda_device_index: for backwards compatibility; behaves roughly like get_device did previously.  I.e. if a function previously took integers for cuda devices, it can now take DeviceSpecs (or strings), and can maintain the old functionality by calling old_index = DeviceSpec(old).cuda_device_index.\n\n\n\ntensor methods and torch. functions that took integer devices can now take integers, strings, or DeviceSpecs.  For example:\ntorch.randn((2,3), dtype=torch.cuda.float32, device='cuda:1')\n\n\nTODO in future PRs:\n\nSplit out cuda from dtype so you don't need to overspecify cuda-ness\nWe currently only support strings/DeviceSpecs in tensor methods and torch. functions.  We should have equivalents torch.cuda.device(...), torch.cuda.device_of, etc. at the torch. level that work on strings/DeviceSpecs", "merged": true, "mergeable": null, "rebaseable": null, "mergeable_state": "unknown", "merged_by": {"login": "gchanan", "id": 3768583, "node_id": "MDQ6VXNlcjM3Njg1ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3768583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gchanan", "html_url": "https://github.com/gchanan", "followers_url": "https://api.github.com/users/gchanan/followers", "following_url": "https://api.github.com/users/gchanan/following{/other_user}", "gists_url": "https://api.github.com/users/gchanan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gchanan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gchanan/subscriptions", "organizations_url": "https://api.github.com/users/gchanan/orgs", "repos_url": "https://api.github.com/users/gchanan/repos", "events_url": "https://api.github.com/users/gchanan/events{/privacy}", "received_events_url": "https://api.github.com/users/gchanan/received_events", "type": "User", "site_admin": false}, "comments": 5, "review_comments": 52, "maintainer_can_modify": false, "commits": 21, "additions": 484, "deletions": 61, "changed_files": 13}