{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/179572640", "pull_request_review_id": 109842615, "id": 179572640, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTU3MjY0MA==", "diff_hunk": "@@ -432,6 +433,20 @@ static PyObject * THPVariable_layout(THPVariable* self, PyObject* args) {\n   END_HANDLE_TH_ERRORS\n }\n \n+static PyObject * THPVariable_device(THPVariable* self, PyObject* args) {\n+  HANDLE_TH_ERRORS\n+  auto& self_ = self->cdata;\n+  std::ostringstream oss;\n+  if (self_.type().is_cuda()) {\n+    oss << \"cuda:\" << self_.get_device();\n+  }\n+  else {\n+    oss << \"cpu\";\n+  }\n+  return THPUtils_packString(oss.str().c_str());", "path": "torch/csrc/autograd/python_variable.cpp", "position": null, "original_position": 22, "commit_id": "e591346acf064c4bd31383f1e5f57ba1a086206a", "original_commit_id": "146c33f6860b80f42151007b7210b31995eecf10", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Yes, I think `device_str` is better (although it's just `str(x.device)`, so not sure if we should have it).\r\n\r\nReturning a `DeviceSpec` has the benefit that:\r\n1. If you want to get more detailed info (e.g. index), you don't need to parse the string again\r\n2. If you want the same type, but e.g. a different index, we can provide `.as_index(...)` or some other method that will return a new `DeviceSpec`, but without unnecessary parsing again.\r\n3. If you pass it to any of our methods, it's cheaper to arg check and ignore string parsing at every call.\r\n\r\nI think we should discourage people from passing around strings, or they will accidentally start slowing down their code considerably.", "created_at": "2018-04-05T19:15:43Z", "updated_at": "2018-11-23T15:41:49Z", "html_url": "https://github.com/pytorch/pytorch/pull/6283#discussion_r179572640", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/6283", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/179572640"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/6283#discussion_r179572640"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/6283"}}, "body_html": "<p>Yes, I think <code>device_str</code> is better (although it's just <code>str(x.device)</code>, so not sure if we should have it).</p>\n<p>Returning a <code>DeviceSpec</code> has the benefit that:</p>\n<ol>\n<li>If you want to get more detailed info (e.g. index), you don't need to parse the string again</li>\n<li>If you want the same type, but e.g. a different index, we can provide <code>.as_index(...)</code> or some other method that will return a new <code>DeviceSpec</code>, but without unnecessary parsing again.</li>\n<li>If you pass it to any of our methods, it's cheaper to arg check and ignore string parsing at every call.</li>\n</ol>\n<p>I think we should discourage people from passing around strings, or they will accidentally start slowing down their code considerably.</p>", "body_text": "Yes, I think device_str is better (although it's just str(x.device), so not sure if we should have it).\nReturning a DeviceSpec has the benefit that:\n\nIf you want to get more detailed info (e.g. index), you don't need to parse the string again\nIf you want the same type, but e.g. a different index, we can provide .as_index(...) or some other method that will return a new DeviceSpec, but without unnecessary parsing again.\nIf you pass it to any of our methods, it's cheaper to arg check and ignore string parsing at every call.\n\nI think we should discourage people from passing around strings, or they will accidentally start slowing down their code considerably.", "in_reply_to_id": 179568827}