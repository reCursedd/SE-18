{"url": "https://api.github.com/repos/pytorch/pytorch/issues/11551", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/11551/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/11551/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/11551/events", "html_url": "https://github.com/pytorch/pytorch/issues/11551", "id": 359231336, "node_id": "MDU6SXNzdWUzNTkyMzEzMzY=", "number": 11551, "title": "CrossEntropyLoss, ignore_index does not prevent back-prop if the logits are -inf", "user": {"login": "Kelym", "id": 4526957, "node_id": "MDQ6VXNlcjQ1MjY5NTc=", "avatar_url": "https://avatars0.githubusercontent.com/u/4526957?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kelym", "html_url": "https://github.com/Kelym", "followers_url": "https://api.github.com/users/Kelym/followers", "following_url": "https://api.github.com/users/Kelym/following{/other_user}", "gists_url": "https://api.github.com/users/Kelym/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kelym/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kelym/subscriptions", "organizations_url": "https://api.github.com/users/Kelym/orgs", "repos_url": "https://api.github.com/users/Kelym/repos", "events_url": "https://api.github.com/users/Kelym/events{/privacy}", "received_events_url": "https://api.github.com/users/Kelym/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 443484050, "node_id": "MDU6TGFiZWw0NDM0ODQwNTA=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/medium%20priority", "name": "medium priority", "color": "fbca04", "default": false}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-09-11T21:29:27Z", "updated_at": "2018-09-18T07:56:08Z", "closed_at": null, "author_association": "NONE", "body_html": "<h2>Issue description</h2>\n<p>When using CrossEntropyLoss, I assumed that as long as I ignore a target, its loss would not be calculated and will not get back propagated. Therefore I would pass logits = -float(inf) when I attempted to skip that target.<br>\nHowever, even though the loss would be skipped; the loss.backward() would bring the infinity into my gradients.</p>\n<p>I think this behavior is at least worth noticing in the document for CrossEntropyLoss.</p>\n<h2>Code example</h2>\n<pre><code>import torch\nloss = torch.nn.CrossEntropyLoss(ignore_index=-1)\ninput = torch.randn(3, 5, requires_grad=True)\ntarget = torch.empty(3).long().fill_(-1)\nlogits = input - float('inf')\noutput = loss(logits, target)\noutput.backward()\ninput.grad\n</code></pre>\n<h2>System Info</h2>\n<p>Collecting environment information...<br>\nPyTorch version: 0.4.1<br>\nIs debug build: No<br>\nCUDA used to build PyTorch: 9.0.176</p>\n<p>OS: Ubuntu 16.04.5 LTS<br>\nGCC version: (Ubuntu 5.4.0-6ubuntu1~16.04.10) 5.4.0 20160609<br>\nCMake version: version 3.5.1</p>\n<p>Python version: 3.6<br>\nIs CUDA available: Yes<br>\nCUDA runtime version: Could not collect<br>\nGPU models and configuration:<br>\nGPU 0: GeForce GTX 1080 Ti<br>\nGPU 1: GeForce GTX 1060 6GB</p>\n<p>Nvidia driver version: 396.44<br>\ncuDNN version: Probably one of the following:<br>\n/usr/lib/x86_64-linux-gnu/libcudnn.so.7.0.5<br>\n/usr/lib/x86_64-linux-gnu/libcudnn_static_v7.a</p>\n<p>Versions of relevant libraries:<br>\n[pip] Could not collect<br>\n[conda] cuda90                    1.0                  h6433d27_0    pytorch<br>\n[conda] pytorch                   0.4.1           py36_cuda9.0.176_cudnn7.1.2_1    soumith<br>\n[conda] torchvision               0.1.9            py36h7584368_1    soumith</p>", "body_text": "Issue description\nWhen using CrossEntropyLoss, I assumed that as long as I ignore a target, its loss would not be calculated and will not get back propagated. Therefore I would pass logits = -float(inf) when I attempted to skip that target.\nHowever, even though the loss would be skipped; the loss.backward() would bring the infinity into my gradients.\nI think this behavior is at least worth noticing in the document for CrossEntropyLoss.\nCode example\nimport torch\nloss = torch.nn.CrossEntropyLoss(ignore_index=-1)\ninput = torch.randn(3, 5, requires_grad=True)\ntarget = torch.empty(3).long().fill_(-1)\nlogits = input - float('inf')\noutput = loss(logits, target)\noutput.backward()\ninput.grad\n\nSystem Info\nCollecting environment information...\nPyTorch version: 0.4.1\nIs debug build: No\nCUDA used to build PyTorch: 9.0.176\nOS: Ubuntu 16.04.5 LTS\nGCC version: (Ubuntu 5.4.0-6ubuntu1~16.04.10) 5.4.0 20160609\nCMake version: version 3.5.1\nPython version: 3.6\nIs CUDA available: Yes\nCUDA runtime version: Could not collect\nGPU models and configuration:\nGPU 0: GeForce GTX 1080 Ti\nGPU 1: GeForce GTX 1060 6GB\nNvidia driver version: 396.44\ncuDNN version: Probably one of the following:\n/usr/lib/x86_64-linux-gnu/libcudnn.so.7.0.5\n/usr/lib/x86_64-linux-gnu/libcudnn_static_v7.a\nVersions of relevant libraries:\n[pip] Could not collect\n[conda] cuda90                    1.0                  h6433d27_0    pytorch\n[conda] pytorch                   0.4.1           py36_cuda9.0.176_cudnn7.1.2_1    soumith\n[conda] torchvision               0.1.9            py36h7584368_1    soumith", "body": "## Issue description\r\n\r\nWhen using CrossEntropyLoss, I assumed that as long as I ignore a target, its loss would not be calculated and will not get back propagated. Therefore I would pass logits = -float(inf) when I attempted to skip that target. \r\nHowever, even though the loss would be skipped; the loss.backward() would bring the infinity into my gradients.\r\n\r\nI think this behavior is at least worth noticing in the document for CrossEntropyLoss. \r\n\r\n## Code example\r\n\r\n```\r\nimport torch\r\nloss = torch.nn.CrossEntropyLoss(ignore_index=-1)\r\ninput = torch.randn(3, 5, requires_grad=True)\r\ntarget = torch.empty(3).long().fill_(-1)\r\nlogits = input - float('inf')\r\noutput = loss(logits, target)\r\noutput.backward()\r\ninput.grad\r\n```\r\n\r\n## System Info\r\n\r\nCollecting environment information...\r\nPyTorch version: 0.4.1\r\nIs debug build: No\r\nCUDA used to build PyTorch: 9.0.176\r\n\r\nOS: Ubuntu 16.04.5 LTS\r\nGCC version: (Ubuntu 5.4.0-6ubuntu1~16.04.10) 5.4.0 20160609\r\nCMake version: version 3.5.1\r\n\r\nPython version: 3.6\r\nIs CUDA available: Yes\r\nCUDA runtime version: Could not collect\r\nGPU models and configuration:\r\nGPU 0: GeForce GTX 1080 Ti\r\nGPU 1: GeForce GTX 1060 6GB\r\n\r\nNvidia driver version: 396.44\r\ncuDNN version: Probably one of the following:\r\n/usr/lib/x86_64-linux-gnu/libcudnn.so.7.0.5\r\n/usr/lib/x86_64-linux-gnu/libcudnn_static_v7.a\r\n\r\nVersions of relevant libraries:\r\n[pip] Could not collect\r\n[conda] cuda90                    1.0                  h6433d27_0    pytorch\r\n[conda] pytorch                   0.4.1           py36_cuda9.0.176_cudnn7.1.2_1    soumith\r\n[conda] torchvision               0.1.9            py36h7584368_1    soumith\r\n"}