{"url": "https://api.github.com/repos/pytorch/pytorch/issues/4586", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/4586/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/4586/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/4586/events", "html_url": "https://github.com/pytorch/pytorch/pull/4586", "id": 287558807, "node_id": "MDExOlB1bGxSZXF1ZXN0MTYyMjE2MzM0", "number": 4586, "title": "Introduce a (non-public) autograd scalar method and improve printing", "user": {"login": "gchanan", "id": 3768583, "node_id": "MDQ6VXNlcjM3Njg1ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3768583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gchanan", "html_url": "https://github.com/gchanan", "followers_url": "https://api.github.com/users/gchanan/followers", "following_url": "https://api.github.com/users/gchanan/following{/other_user}", "gists_url": "https://api.github.com/users/gchanan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gchanan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gchanan/subscriptions", "organizations_url": "https://api.github.com/users/gchanan/orgs", "repos_url": "https://api.github.com/users/gchanan/repos", "events_url": "https://api.github.com/users/gchanan/events{/privacy}", "received_events_url": "https://api.github.com/users/gchanan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-01-10T19:59:37Z", "updated_at": "2018-01-12T19:26:39Z", "closed_at": "2018-01-12T19:26:39Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/4586", "html_url": "https://github.com/pytorch/pytorch/pull/4586", "diff_url": "https://github.com/pytorch/pytorch/pull/4586.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/4586.patch"}, "body_html": "<ol>\n<li>\n<p>Introduce a (non-public) <code>_scalar_sum</code> method on Variables that is equivalent to <code>sum()</code> but without the scalar restrictions (i.e. it can actually return a scalar).  This is just for temporary testing purposes before we enable scalars more broadly and will go away.</p>\n</li>\n<li>\n<p>Improve printing of tensors/Variables:<br>\na) Empty tensors are now printed in a consistent manner with other tensors, i.e. they include their device if on GPU and have the same spacing.<br>\nb) Variables now print their size as a tuple (because scalars have size <code>()</code> which doesn't map to the <code>a x b</code> format we have been using.  Empty variables now also print their size as <code>(0,)</code> rather than having no dimension, which was incorrect previously.</p>\n</li>\n</ol>", "body_text": "Introduce a (non-public) _scalar_sum method on Variables that is equivalent to sum() but without the scalar restrictions (i.e. it can actually return a scalar).  This is just for temporary testing purposes before we enable scalars more broadly and will go away.\n\n\nImprove printing of tensors/Variables:\na) Empty tensors are now printed in a consistent manner with other tensors, i.e. they include their device if on GPU and have the same spacing.\nb) Variables now print their size as a tuple (because scalars have size () which doesn't map to the a x b format we have been using.  Empty variables now also print their size as (0,) rather than having no dimension, which was incorrect previously.", "body": "1) Introduce a (non-public) `_scalar_sum` method on Variables that is equivalent to `sum()` but without the scalar restrictions (i.e. it can actually return a scalar).  This is just for temporary testing purposes before we enable scalars more broadly and will go away.\r\n\r\n2) Improve printing of tensors/Variables:\r\na) Empty tensors are now printed in a consistent manner with other tensors, i.e. they include their device if on GPU and have the same spacing.\r\nb) Variables now print their size as a tuple (because scalars have size `()` which doesn't map to the `a x b` format we have been using.  Empty variables now also print their size as `(0,)` rather than having no dimension, which was incorrect previously."}