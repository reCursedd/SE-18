{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/356723302", "html_url": "https://github.com/pytorch/pytorch/pull/4586#issuecomment-356723302", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/4586", "id": 356723302, "node_id": "MDEyOklzc3VlQ29tbWVudDM1NjcyMzMwMg==", "user": {"login": "gchanan", "id": 3768583, "node_id": "MDQ6VXNlcjM3Njg1ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3768583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gchanan", "html_url": "https://github.com/gchanan", "followers_url": "https://api.github.com/users/gchanan/followers", "following_url": "https://api.github.com/users/gchanan/following{/other_user}", "gists_url": "https://api.github.com/users/gchanan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gchanan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gchanan/subscriptions", "organizations_url": "https://api.github.com/users/gchanan/orgs", "repos_url": "https://api.github.com/users/gchanan/repos", "events_url": "https://api.github.com/users/gchanan/events{/privacy}", "received_events_url": "https://api.github.com/users/gchanan/received_events", "type": "User", "site_admin": false}, "created_at": "2018-01-10T20:15:57Z", "updated_at": "2018-01-10T20:15:57Z", "author_association": "CONTRIBUTOR", "body_html": "<p>I'd be happy to change the way any of these print, the goal here was just to move us in the correct direction and have printing for empty Variables and scalar Variables that wasn't broken.  We have discussed previously having different <code>str</code> vs <code>repr</code> printing where i.e. <code>repr</code> would be a valid factory call (e.g. <code>torch.variable(5, dtype=torch.float)</code>, but that will take some work like introducing dtypes and variable/tensor data-based-only factory methods.</p>\n<p>Also, this ended up being uglier than I wanted because of the need to deal with python 2 vs python 3 printing in Variable while using a different printing method for the underlying tensor than just <strong>str</strong> or <strong>repr</strong>; it seems the standard way to do this is to define <strong>format</strong>, but that has it's own mini language that seems overly complicated for this.  Another alternative would be to add include_footer to the printing options, but since that is global, I wasn't sure if there was a nice way to do that with e.g. a context handler that would work nicely in multithreaded environments.</p>", "body_text": "I'd be happy to change the way any of these print, the goal here was just to move us in the correct direction and have printing for empty Variables and scalar Variables that wasn't broken.  We have discussed previously having different str vs repr printing where i.e. repr would be a valid factory call (e.g. torch.variable(5, dtype=torch.float), but that will take some work like introducing dtypes and variable/tensor data-based-only factory methods.\nAlso, this ended up being uglier than I wanted because of the need to deal with python 2 vs python 3 printing in Variable while using a different printing method for the underlying tensor than just str or repr; it seems the standard way to do this is to define format, but that has it's own mini language that seems overly complicated for this.  Another alternative would be to add include_footer to the printing options, but since that is global, I wasn't sure if there was a nice way to do that with e.g. a context handler that would work nicely in multithreaded environments.", "body": "I'd be happy to change the way any of these print, the goal here was just to move us in the correct direction and have printing for empty Variables and scalar Variables that wasn't broken.  We have discussed previously having different `str` vs `repr` printing where i.e. `repr` would be a valid factory call (e.g. `torch.variable(5, dtype=torch.float)`, but that will take some work like introducing dtypes and variable/tensor data-based-only factory methods.\r\n\r\nAlso, this ended up being uglier than I wanted because of the need to deal with python 2 vs python 3 printing in Variable while using a different printing method for the underlying tensor than just __str__ or __repr__; it seems the standard way to do this is to define __format__, but that has it's own mini language that seems overly complicated for this.  Another alternative would be to add include_footer to the printing options, but since that is global, I wasn't sure if there was a nice way to do that with e.g. a context handler that would work nicely in multithreaded environments."}