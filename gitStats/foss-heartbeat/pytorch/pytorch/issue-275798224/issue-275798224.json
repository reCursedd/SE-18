{"url": "https://api.github.com/repos/pytorch/pytorch/issues/3815", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/3815/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/3815/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/3815/events", "html_url": "https://github.com/pytorch/pytorch/pull/3815", "id": 275798224, "node_id": "MDExOlB1bGxSZXF1ZXN0MTUzOTU1MTY3", "number": 3815, "title": "Add indexed convolutions", "user": {"login": "lantiga", "id": 191033, "node_id": "MDQ6VXNlcjE5MTAzMw==", "avatar_url": "https://avatars2.githubusercontent.com/u/191033?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lantiga", "html_url": "https://github.com/lantiga", "followers_url": "https://api.github.com/users/lantiga/followers", "following_url": "https://api.github.com/users/lantiga/following{/other_user}", "gists_url": "https://api.github.com/users/lantiga/gists{/gist_id}", "starred_url": "https://api.github.com/users/lantiga/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lantiga/subscriptions", "organizations_url": "https://api.github.com/users/lantiga/orgs", "repos_url": "https://api.github.com/users/lantiga/repos", "events_url": "https://api.github.com/users/lantiga/events{/privacy}", "received_events_url": "https://api.github.com/users/lantiga/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2017-11-21T17:30:02Z", "updated_at": "2018-11-23T15:39:00Z", "closed_at": "2018-02-02T22:57:39Z", "author_association": "COLLABORATOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/3815", "html_url": "https://github.com/pytorch/pytorch/pull/3815", "diff_url": "https://github.com/pytorch/pytorch/pull/3815.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/3815.patch"}, "body_html": "<p>This PR adds <em>indexed convolutions</em>, i.e. a convolution operator over a 1D tensor (BxCxL), where a list of neighbors for <em>each element</em> is provided through a <code>indices</code> tensor (LxK), where K is the size of the convolution kernel. Each row of <code>indices</code> specifies the indices of the K neighbors of the corresponding element in the input. A -1 is handled like for zero padding.</p>\n<p>Note that the neighbors specified in <code>indices</code> are not relative, but rather absolute. They have to be specified <em>for each</em> of the L elements\u00a0of the input. Relative indices may be added in a separate PR.</p>\n<p>A use case for this PR is convolution over non-square lattices, such as images on hexagonal lattices coming from Cherenkov telescopes (<a href=\"http://www.isdc.unige.ch/%7Elyard/FirstLight/FirstLight_slowHD.mov\" rel=\"nofollow\">http://www.isdc.unige.ch/%7Elyard/FirstLight/FirstLight_slowHD.mov</a>).</p>\n<p>Example:</p>\n<pre><code>import torch\n\n# a 1D input of 5 elems\ninput = torch.randn(1,1,5)\n\n# this specifies the indices of neighbors for\n# each elem of the input (a 3 elem kernel here)\n# A -1 corresponds to zero-padding \nindices = torch.ones(5,3).type(torch.LongTensor)\n\nweight = torch.randn(1,1,3)\nbias = torch.randn(1)\n\noutput = torch.nn.functional.indexed_conv(input, indices, weight, bias)\n</code></pre>", "body_text": "This PR adds indexed convolutions, i.e. a convolution operator over a 1D tensor (BxCxL), where a list of neighbors for each element is provided through a indices tensor (LxK), where K is the size of the convolution kernel. Each row of indices specifies the indices of the K neighbors of the corresponding element in the input. A -1 is handled like for zero padding.\nNote that the neighbors specified in indices are not relative, but rather absolute. They have to be specified for each of the L elements\u00a0of the input. Relative indices may be added in a separate PR.\nA use case for this PR is convolution over non-square lattices, such as images on hexagonal lattices coming from Cherenkov telescopes (http://www.isdc.unige.ch/%7Elyard/FirstLight/FirstLight_slowHD.mov).\nExample:\nimport torch\n\n# a 1D input of 5 elems\ninput = torch.randn(1,1,5)\n\n# this specifies the indices of neighbors for\n# each elem of the input (a 3 elem kernel here)\n# A -1 corresponds to zero-padding \nindices = torch.ones(5,3).type(torch.LongTensor)\n\nweight = torch.randn(1,1,3)\nbias = torch.randn(1)\n\noutput = torch.nn.functional.indexed_conv(input, indices, weight, bias)", "body": "This PR adds _indexed convolutions_, i.e. a convolution operator over a 1D tensor (BxCxL), where a list of neighbors for _each element_ is provided through a `indices` tensor (LxK), where K is the size of the convolution kernel. Each row of `indices` specifies the indices of the K neighbors of the corresponding element in the input. A -1 is handled like for zero padding.\r\n\r\nNote that the neighbors specified in `indices` are not relative, but rather absolute. They have to be specified _for each_ of the L elements\u00a0of the input. Relative indices may be added in a separate PR.\r\n\r\nA use case for this PR is convolution over non-square lattices, such as images on hexagonal lattices coming from Cherenkov telescopes (http://www.isdc.unige.ch/%7Elyard/FirstLight/FirstLight_slowHD.mov).\r\n\r\nExample:\r\n```\r\nimport torch\r\n\r\n# a 1D input of 5 elems\r\ninput = torch.randn(1,1,5)\r\n\r\n# this specifies the indices of neighbors for\r\n# each elem of the input (a 3 elem kernel here)\r\n# A -1 corresponds to zero-padding \r\nindices = torch.ones(5,3).type(torch.LongTensor)\r\n\r\nweight = torch.randn(1,1,3)\r\nbias = torch.randn(1)\r\n\r\noutput = torch.nn.functional.indexed_conv(input, indices, weight, bias)\r\n```\r\n"}