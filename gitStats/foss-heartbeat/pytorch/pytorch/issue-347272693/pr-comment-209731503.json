{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/209731503", "pull_request_review_id": 145802761, "id": 209731503, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTczMTUwMw==", "diff_hunk": "@@ -1254,10 +1248,10 @@ struct to_ir {\n   std::shared_ptr<SugaredValue> emitApplyIdent(Ident ident, const std::vector<NamedValue>& inputs, at::ArrayRef<NamedValue> attributes, size_t n_binders) {\n     auto it = function_table.find(ident.name());\n     if (it != function_table.end()) {\n-      return packOutputs(*graph, method.emit_call_to(ident.range(), it->second, inputs, attributes));\n+      return std::make_shared<SimpleValue>(packOutputs(*graph, method.emit_call_to(ident.range(), it->second, inputs, attributes)));\n     }\n-    if(auto result = emitBuiltinCall(ident.range(), method, ident.name(), inputs, attributes, false)) {\n-      return result;\n+    if(auto result = emitBuiltinCall(ident.range(), *method.graph(), Symbol::aten(ident.name()), inputs, attributes, false)) {\n+      return std::make_shared<SimpleValue>(result);", "path": "torch/csrc/jit/script/compiler.cpp", "position": 193, "original_position": 193, "commit_id": "bf96e1f69fc93f606eaca8ae4a3e6875056a395e", "original_commit_id": "e1f58e70a5fc9af2e8e5aa7d2d5ebc2e9344f0e5", "user": {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, "body": "I want to change Chunk to just return a list (which is a SimpleValue). Like `prim::FusedConcat` we can then turn into `prim::ConstantChunk` to maintain optimizations. \r\n\r\nFor the API itself, it feels simpler to make builtins behave like Python, where there is a single return value, which might be a tuple.  Eventually we want to switch everything to be consistent:\r\n\r\n1. builtins should just push an IValue tuple if the return value in the builtin was a tuple\r\n2. python functions should push an IValue tuple for multiple returns. \r\n3. actual multiple returns should be reserved for `prim` ops like If/While and `prim::FusedConcat`\r\n\r\nGiven this future, it seems ok to make builtin just return a Value*", "created_at": "2018-08-13T19:33:45Z", "updated_at": "2018-11-23T15:49:11Z", "html_url": "https://github.com/pytorch/pytorch/pull/10198#discussion_r209731503", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/10198", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/209731503"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/10198#discussion_r209731503"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/10198"}}, "body_html": "<p>I want to change Chunk to just return a list (which is a SimpleValue). Like <code>prim::FusedConcat</code> we can then turn into <code>prim::ConstantChunk</code> to maintain optimizations.</p>\n<p>For the API itself, it feels simpler to make builtins behave like Python, where there is a single return value, which might be a tuple.  Eventually we want to switch everything to be consistent:</p>\n<ol>\n<li>builtins should just push an IValue tuple if the return value in the builtin was a tuple</li>\n<li>python functions should push an IValue tuple for multiple returns.</li>\n<li>actual multiple returns should be reserved for <code>prim</code> ops like If/While and <code>prim::FusedConcat</code></li>\n</ol>\n<p>Given this future, it seems ok to make builtin just return a Value*</p>", "body_text": "I want to change Chunk to just return a list (which is a SimpleValue). Like prim::FusedConcat we can then turn into prim::ConstantChunk to maintain optimizations.\nFor the API itself, it feels simpler to make builtins behave like Python, where there is a single return value, which might be a tuple.  Eventually we want to switch everything to be consistent:\n\nbuiltins should just push an IValue tuple if the return value in the builtin was a tuple\npython functions should push an IValue tuple for multiple returns.\nactual multiple returns should be reserved for prim ops like If/While and prim::FusedConcat\n\nGiven this future, it seems ok to make builtin just return a Value*", "in_reply_to_id": 208295562}