{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/156727099", "pull_request_review_id": 83244247, "id": 156727099, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NjcyNzA5OQ==", "diff_hunk": "@@ -11,3 +11,55 @@ def expand_n(v, n):\n         return torch.Tensor([v]).expand(n, 1)\n     else:\n         return v.expand(n, *v.size())\n+\n+\n+def _broadcast_shape(shapes):\n+    \"\"\"\n+    Given a list of tensor sizes, returns the size of the resulting broadcasted\n+    tensor.\n+\n+    Args:\n+        shapes (list of torch.Size): list of tensor sizes\n+    \"\"\"\n+    shape = torch.Size([1])\n+    for s in shapes:\n+        shape = torch._C._infer_size(s, shape)\n+    return shape\n+\n+\n+def broadcast_all(*values):\n+    \"\"\"\n+    Given a list of values (possibly containing numbers), returns a list where each\n+    value is broadcasted based on the following rules:\n+      - `torch.Tensor` and `torch.autograd.Variable` instances are broadcasted as\n+        per the `broadcasting rules\n+        <http://pytorch.org/docs/master/notes/broadcasting.html>`_\n+      - numbers.Number instances (scalars) are upcast to Tensor/Variable having\n+        the same size and type as the first tensor passed to `values`. If all the\n+        values are scalars, then they are upcasted to `torch.Tensor` having size\n+        `(1,)`.\n+\n+    Args:\n+        values (list of `numbers.Number`, `torch.autograd.Variable` or\n+        `torch.Tensor`)\n+\n+    Raises:\n+        ValueError: if any of the values is not a `numbers.Number`, `torch.Tensor`\n+            or `torch.autograd.Variable` instance\n+    \"\"\"\n+    scalars = [(idx, v) for idx, v in enumerate(values) if isinstance(v, Number)]", "path": "torch/distributions/utils.py", "position": null, "original_position": 40, "commit_id": "e4ef999bf76fa1a3206f3c7df9e4f393b195b536", "original_commit_id": "79197d2cdaad050247f57dafa79d3e1ec93e7d07", "user": {"login": "fritzo", "id": 648532, "node_id": "MDQ6VXNlcjY0ODUzMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/648532?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fritzo", "html_url": "https://github.com/fritzo", "followers_url": "https://api.github.com/users/fritzo/followers", "following_url": "https://api.github.com/users/fritzo/following{/other_user}", "gists_url": "https://api.github.com/users/fritzo/gists{/gist_id}", "starred_url": "https://api.github.com/users/fritzo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fritzo/subscriptions", "organizations_url": "https://api.github.com/users/fritzo/orgs", "repos_url": "https://api.github.com/users/fritzo/repos", "events_url": "https://api.github.com/users/fritzo/events{/privacy}", "received_events_url": "https://api.github.com/users/fritzo/received_events", "type": "User", "site_admin": false}, "body": "Wow this turns out to be tricky. I wonder if it's simpler to special-case Variable vs Tensor vs Number?\r\n```py\r\n# Promote numbers to Variables or Tensors.\r\nif any(isinstance(v, Variable) for v in values):\r\n    template = next(v.data for v in values if isinstance(v, Variable))\r\n    values = [Variable(template.new([v])) if isinstance(v, Number) else v for v in values]\r\nelif any(is_tensor(v) for v in values):\r\n    template = next(v for v in values if is_tensor(v))\r\n    values = [template.new([v]) if isinstance(v, Number) else v for v in values]\r\nelse:  # Everything is a number.\r\n    values = [Tensor([v]) for v in values]\r\n\r\n# Broadcast all shapes. \r\nshape = _broadcast_shape([v.size() for v in values])\r\nreturn [v.expand(shape) for v in values]\r\n```\r\nI believe it also saves memory to use `template.new([v])` rather than `template.new(shape).fill_(v)`.", "created_at": "2017-12-13T17:26:11Z", "updated_at": "2018-11-23T15:37:19Z", "html_url": "https://github.com/pytorch/pytorch/pull/4140#discussion_r156727099", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4140", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/156727099"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/4140#discussion_r156727099"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4140"}}, "body_html": "<p>Wow this turns out to be tricky. I wonder if it's simpler to special-case Variable vs Tensor vs Number?</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-c\"><span class=\"pl-c\">#</span> Promote numbers to Variables or Tensors.</span>\n<span class=\"pl-k\">if</span> <span class=\"pl-c1\">any</span>(<span class=\"pl-c1\">isinstance</span>(v, Variable) <span class=\"pl-k\">for</span> v <span class=\"pl-k\">in</span> values):\n    template <span class=\"pl-k\">=</span> <span class=\"pl-c1\">next</span>(v.data <span class=\"pl-k\">for</span> v <span class=\"pl-k\">in</span> values <span class=\"pl-k\">if</span> <span class=\"pl-c1\">isinstance</span>(v, Variable))\n    values <span class=\"pl-k\">=</span> [Variable(template.new([v])) <span class=\"pl-k\">if</span> <span class=\"pl-c1\">isinstance</span>(v, Number) <span class=\"pl-k\">else</span> v <span class=\"pl-k\">for</span> v <span class=\"pl-k\">in</span> values]\n<span class=\"pl-k\">elif</span> <span class=\"pl-c1\">any</span>(is_tensor(v) <span class=\"pl-k\">for</span> v <span class=\"pl-k\">in</span> values):\n    template <span class=\"pl-k\">=</span> <span class=\"pl-c1\">next</span>(v <span class=\"pl-k\">for</span> v <span class=\"pl-k\">in</span> values <span class=\"pl-k\">if</span> is_tensor(v))\n    values <span class=\"pl-k\">=</span> [template.new([v]) <span class=\"pl-k\">if</span> <span class=\"pl-c1\">isinstance</span>(v, Number) <span class=\"pl-k\">else</span> v <span class=\"pl-k\">for</span> v <span class=\"pl-k\">in</span> values]\n<span class=\"pl-k\">else</span>:  <span class=\"pl-c\"><span class=\"pl-c\">#</span> Everything is a number.</span>\n    values <span class=\"pl-k\">=</span> [Tensor([v]) <span class=\"pl-k\">for</span> v <span class=\"pl-k\">in</span> values]\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> Broadcast all shapes. </span>\nshape <span class=\"pl-k\">=</span> _broadcast_shape([v.size() <span class=\"pl-k\">for</span> v <span class=\"pl-k\">in</span> values])\n<span class=\"pl-k\">return</span> [v.expand(shape) <span class=\"pl-k\">for</span> v <span class=\"pl-k\">in</span> values]</pre></div>\n<p>I believe it also saves memory to use <code>template.new([v])</code> rather than <code>template.new(shape).fill_(v)</code>.</p>", "body_text": "Wow this turns out to be tricky. I wonder if it's simpler to special-case Variable vs Tensor vs Number?\n# Promote numbers to Variables or Tensors.\nif any(isinstance(v, Variable) for v in values):\n    template = next(v.data for v in values if isinstance(v, Variable))\n    values = [Variable(template.new([v])) if isinstance(v, Number) else v for v in values]\nelif any(is_tensor(v) for v in values):\n    template = next(v for v in values if is_tensor(v))\n    values = [template.new([v]) if isinstance(v, Number) else v for v in values]\nelse:  # Everything is a number.\n    values = [Tensor([v]) for v in values]\n\n# Broadcast all shapes. \nshape = _broadcast_shape([v.size() for v in values])\nreturn [v.expand(shape) for v in values]\nI believe it also saves memory to use template.new([v]) rather than template.new(shape).fill_(v)."}