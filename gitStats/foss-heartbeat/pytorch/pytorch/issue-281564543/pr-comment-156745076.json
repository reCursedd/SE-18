{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/156745076", "pull_request_review_id": 83273975, "id": 156745076, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1Njc0NTA3Ng==", "diff_hunk": "@@ -11,3 +11,55 @@ def expand_n(v, n):\n         return torch.Tensor([v]).expand(n, 1)\n     else:\n         return v.expand(n, *v.size())\n+\n+\n+def _broadcast_shape(shapes):\n+    \"\"\"\n+    Given a list of tensor sizes, returns the size of the resulting broadcasted\n+    tensor.\n+\n+    Args:\n+        shapes (list of torch.Size): list of tensor sizes\n+    \"\"\"\n+    shape = torch.Size([1])\n+    for s in shapes:\n+        shape = torch._C._infer_size(s, shape)\n+    return shape\n+\n+\n+def broadcast_all(*values):\n+    \"\"\"\n+    Given a list of values (possibly containing numbers), returns a list where each\n+    value is broadcasted based on the following rules:\n+      - `torch.Tensor` and `torch.autograd.Variable` instances are broadcasted as\n+        per the `broadcasting rules\n+        <http://pytorch.org/docs/master/notes/broadcasting.html>`_\n+      - numbers.Number instances (scalars) are upcast to Tensor/Variable having\n+        the same size and type as the first tensor passed to `values`. If all the\n+        values are scalars, then they are upcasted to `torch.Tensor` having size\n+        `(1,)`.\n+\n+    Args:\n+        values (list of `numbers.Number`, `torch.autograd.Variable` or\n+        `torch.Tensor`)\n+\n+    Raises:\n+        ValueError: if any of the values is not a `numbers.Number`, `torch.Tensor`\n+            or `torch.autograd.Variable` instance\n+    \"\"\"\n+    scalars = [(idx, v) for idx, v in enumerate(values) if isinstance(v, Number)]\n+    tensors = [(idx, v) for idx, v in enumerate(values) if isinstance(v, (torch.Tensor, torch.autograd.Variable))]\n+    if len(scalars) + len(tensors) != len(values):\n+        raise ValueError('Input arguments must all be instances of numbers.Number, torch.Tensor or ' +\n+                         'torch.autograd.Variable.')\n+    if tensors:\n+        broadcast_shape = _broadcast_shape([t.size() for _, t in tensors])\n+        tensors = [(idx, v.expand(broadcast_shape)) for idx, v in tensors]\n+        tensor_template = tensors[0][1]\n+    else:\n+        tensor_template = torch.ones(1)\n+    scalars = [(idx, tensor_template.new(tensor_template.size()).fill_(s)) for idx, s in scalars]", "path": "torch/distributions/utils.py", "position": null, "original_position": 51, "commit_id": "e4ef999bf76fa1a3206f3c7df9e4f393b195b536", "original_commit_id": "79197d2cdaad050247f57dafa79d3e1ec93e7d07", "user": {"login": "neerajprad", "id": 1762463, "node_id": "MDQ6VXNlcjE3NjI0NjM=", "avatar_url": "https://avatars3.githubusercontent.com/u/1762463?v=4", "gravatar_id": "", "url": "https://api.github.com/users/neerajprad", "html_url": "https://github.com/neerajprad", "followers_url": "https://api.github.com/users/neerajprad/followers", "following_url": "https://api.github.com/users/neerajprad/following{/other_user}", "gists_url": "https://api.github.com/users/neerajprad/gists{/gist_id}", "starred_url": "https://api.github.com/users/neerajprad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/neerajprad/subscriptions", "organizations_url": "https://api.github.com/users/neerajprad/orgs", "repos_url": "https://api.github.com/users/neerajprad/repos", "events_url": "https://api.github.com/users/neerajprad/events{/privacy}", "received_events_url": "https://api.github.com/users/neerajprad/received_events", "type": "User", "site_admin": false}, "body": "But, `Variable.new` seems to give expected results. Does that not work?\r\n\r\n```\r\nIn [5]: v.new()\r\nOut[5]: Variable containing:[torch.FloatTensor with no dimension]\r\n```", "created_at": "2017-12-13T18:37:52Z", "updated_at": "2018-11-23T15:37:19Z", "html_url": "https://github.com/pytorch/pytorch/pull/4140#discussion_r156745076", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4140", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/156745076"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/4140#discussion_r156745076"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4140"}}, "body_html": "<p>But, <code>Variable.new</code> seems to give expected results. Does that not work?</p>\n<pre><code>In [5]: v.new()\nOut[5]: Variable containing:[torch.FloatTensor with no dimension]\n</code></pre>", "body_text": "But, Variable.new seems to give expected results. Does that not work?\nIn [5]: v.new()\nOut[5]: Variable containing:[torch.FloatTensor with no dimension]"}