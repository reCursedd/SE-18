{"url": "https://api.github.com/repos/pytorch/pytorch/issues/5138", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/5138/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/5138/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/5138/events", "html_url": "https://github.com/pytorch/pytorch/issues/5138", "id": 295615014, "node_id": "MDU6SXNzdWUyOTU2MTUwMTQ=", "number": 5138, "title": "Bind cuDNN dropout initialization from ATen", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 806617721, "node_id": "MDU6TGFiZWw4MDY2MTc3MjE=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/cudnn", "name": "cudnn", "color": "fbca04", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2018-02-08T18:16:14Z", "updated_at": "2018-03-02T15:00:01Z", "closed_at": "2018-03-02T15:00:01Z", "author_association": "CONTRIBUTOR", "body_html": "<p>In <code>torch/backends/cudnn/rnn.py</code> we have the last vestiges of the Python-side cuDNN bindings:</p>\n<pre><code>class Unserializable(object):\n\n    def __init__(self, inner):\n        self.inner = inner\n\n    def get(self):\n        return self.inner\n\n    def __getstate__(self):\n        # Note: can't return {}, because python2 won't call __setstate__\n        # if the value evaluates to False\n        return \"&lt;unserializable&gt;\"\n\n    def __setstate__(self, state):\n        self.inner = None\n\n\ndef init_dropout_descriptor(handle, dropout, train, dropout_seed, dropout_state):\n    dropout_desc_name = 'desc_' + str(torch.cuda.current_device())\n    dropout_p = dropout if train else 0\n    if (dropout_desc_name not in dropout_state) or (dropout_state[dropout_desc_name].get() is None):\n        dropout_state[dropout_desc_name] = Unserializable(\n            cudnn.DropoutDescriptor(handle, dropout_p, dropout_seed)\n        )\n    dropout_desc = dropout_state[dropout_desc_name].get()\n    dropout_desc.set_dropout(dropout_p, dropout_seed)\n    return dropout_desc\n\n\ndef get_dropout_state(fn, handle):\n    dropout_desc_name = 'desc_' + str(torch.cuda.current_device())\n    dropout_p = fn.dropout if fn.train else 0\n    dropout_desc = fn.dropout_state[dropout_desc_name].get()\n    return dropout_desc.state\n</code></pre>\n<p>We'd like to get rid of this code entirely, and that means we need to allocate the tensor state in <code>dropout_desc</code> from ATen.</p>\n<p>The code to do this already exists in <code>aten/src/ATen/cudnn/Descriptors.h</code>; it's just a matter of taking dropout parameters and returning an initialized dropout state buffer, which can be passed to subsequent ATen calls.</p>", "body_text": "In torch/backends/cudnn/rnn.py we have the last vestiges of the Python-side cuDNN bindings:\nclass Unserializable(object):\n\n    def __init__(self, inner):\n        self.inner = inner\n\n    def get(self):\n        return self.inner\n\n    def __getstate__(self):\n        # Note: can't return {}, because python2 won't call __setstate__\n        # if the value evaluates to False\n        return \"<unserializable>\"\n\n    def __setstate__(self, state):\n        self.inner = None\n\n\ndef init_dropout_descriptor(handle, dropout, train, dropout_seed, dropout_state):\n    dropout_desc_name = 'desc_' + str(torch.cuda.current_device())\n    dropout_p = dropout if train else 0\n    if (dropout_desc_name not in dropout_state) or (dropout_state[dropout_desc_name].get() is None):\n        dropout_state[dropout_desc_name] = Unserializable(\n            cudnn.DropoutDescriptor(handle, dropout_p, dropout_seed)\n        )\n    dropout_desc = dropout_state[dropout_desc_name].get()\n    dropout_desc.set_dropout(dropout_p, dropout_seed)\n    return dropout_desc\n\n\ndef get_dropout_state(fn, handle):\n    dropout_desc_name = 'desc_' + str(torch.cuda.current_device())\n    dropout_p = fn.dropout if fn.train else 0\n    dropout_desc = fn.dropout_state[dropout_desc_name].get()\n    return dropout_desc.state\n\nWe'd like to get rid of this code entirely, and that means we need to allocate the tensor state in dropout_desc from ATen.\nThe code to do this already exists in aten/src/ATen/cudnn/Descriptors.h; it's just a matter of taking dropout parameters and returning an initialized dropout state buffer, which can be passed to subsequent ATen calls.", "body": "In `torch/backends/cudnn/rnn.py` we have the last vestiges of the Python-side cuDNN bindings:\r\n\r\n```\r\nclass Unserializable(object):\r\n\r\n    def __init__(self, inner):\r\n        self.inner = inner\r\n\r\n    def get(self):\r\n        return self.inner\r\n\r\n    def __getstate__(self):\r\n        # Note: can't return {}, because python2 won't call __setstate__\r\n        # if the value evaluates to False\r\n        return \"<unserializable>\"\r\n\r\n    def __setstate__(self, state):\r\n        self.inner = None\r\n\r\n\r\ndef init_dropout_descriptor(handle, dropout, train, dropout_seed, dropout_state):\r\n    dropout_desc_name = 'desc_' + str(torch.cuda.current_device())\r\n    dropout_p = dropout if train else 0\r\n    if (dropout_desc_name not in dropout_state) or (dropout_state[dropout_desc_name].get() is None):\r\n        dropout_state[dropout_desc_name] = Unserializable(\r\n            cudnn.DropoutDescriptor(handle, dropout_p, dropout_seed)\r\n        )\r\n    dropout_desc = dropout_state[dropout_desc_name].get()\r\n    dropout_desc.set_dropout(dropout_p, dropout_seed)\r\n    return dropout_desc\r\n\r\n\r\ndef get_dropout_state(fn, handle):\r\n    dropout_desc_name = 'desc_' + str(torch.cuda.current_device())\r\n    dropout_p = fn.dropout if fn.train else 0\r\n    dropout_desc = fn.dropout_state[dropout_desc_name].get()\r\n    return dropout_desc.state\r\n```\r\n\r\nWe'd like to get rid of this code entirely, and that means we need to allocate the tensor state in `dropout_desc` from ATen.\r\n\r\nThe code to do this already exists in `aten/src/ATen/cudnn/Descriptors.h`; it's just a matter of taking dropout parameters and returning an initialized dropout state buffer, which can be passed to subsequent ATen calls."}