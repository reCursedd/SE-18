{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/353447264", "html_url": "https://github.com/pytorch/pytorch/pull/4304#issuecomment-353447264", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/4304", "id": 353447264, "node_id": "MDEyOklzc3VlQ29tbWVudDM1MzQ0NzI2NA==", "user": {"login": "gchanan", "id": 3768583, "node_id": "MDQ6VXNlcjM3Njg1ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3768583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gchanan", "html_url": "https://github.com/gchanan", "followers_url": "https://api.github.com/users/gchanan/followers", "following_url": "https://api.github.com/users/gchanan/following{/other_user}", "gists_url": "https://api.github.com/users/gchanan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gchanan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gchanan/subscriptions", "organizations_url": "https://api.github.com/users/gchanan/orgs", "repos_url": "https://api.github.com/users/gchanan/repos", "events_url": "https://api.github.com/users/gchanan/events{/privacy}", "received_events_url": "https://api.github.com/users/gchanan/received_events", "type": "User", "site_admin": false}, "created_at": "2017-12-21T20:14:49Z", "updated_at": "2017-12-21T20:14:49Z", "author_association": "CONTRIBUTOR", "body_html": "<p>A couple of notes/questions for <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=15841449\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ngimel\">@ngimel</a>:</p>\n<ol>\n<li>\n<p>The CPU apply code uses lambdas; to get the CUDA equivalent device lambdas I enabled <code>--expt-extended-lambda</code>; is that something we want to do?  Or should we just write fully-fledged functions?</p>\n</li>\n<li>\n<p>NVCC can't seem to handle the previous dispatch templates (you can see them in Dispatch.h), so I had to make the return type an explicit template parameter rather than <code>auto</code>.  I spent some time coming up with a minimal reproducible example and it seems like it's the combination of variadic template parameters, non-variadic template parameters, and <code>auto</code> return type.  Specifically, something like this seems to work:</p>\n</li>\n</ol>\n<pre><code>template &lt;typename T&gt;\nstruct Foobar {\n  static int64_t apply() {return 0;}\n};\n\ntemplate&lt;typename ... Args&gt;\nauto dispatch_all(Args&amp;&amp;... args)\n  -&gt; decltype(Foobar&lt;double&gt;::apply(std::forward&lt;Args&gt;(args)...)) {\n...\n}\n\ndispatch_all();\n</code></pre>\n<p>but adding an unused template parameter (F) doesn't:</p>\n<pre><code>template &lt;typename T&gt;\nstruct Foobar {\n  static int64_t apply() {return 0;}\n};\n\ntemplate&lt;typename F, typename ... Args&gt;\nauto dispatch_all(const Type&amp; the_type, const char *name, Args&amp;&amp;... args)\n  -&gt; decltype(Foobar&lt;double&gt;::apply(std::forward&lt;Args&gt;(args)...)) {\n\nstruct Foo {};\ndispatch_all&lt;Foo&gt;();\n</code></pre>\n<p>Here's my nvcc version:</p>\n<pre lang=\"nvcc\" data-meta=\"--version\"><code>nvcc: NVIDIA (R) Cuda compiler driver\nCopyright (c) 2005-2016 NVIDIA Corporation\nBuilt on Sun_Sep__4_22:14:01_CDT_2016\nCuda compilation tools, release 8.0, V8.0.44```\n</code></pre>", "body_text": "A couple of notes/questions for @ngimel:\n\n\nThe CPU apply code uses lambdas; to get the CUDA equivalent device lambdas I enabled --expt-extended-lambda; is that something we want to do?  Or should we just write fully-fledged functions?\n\n\nNVCC can't seem to handle the previous dispatch templates (you can see them in Dispatch.h), so I had to make the return type an explicit template parameter rather than auto.  I spent some time coming up with a minimal reproducible example and it seems like it's the combination of variadic template parameters, non-variadic template parameters, and auto return type.  Specifically, something like this seems to work:\n\n\ntemplate <typename T>\nstruct Foobar {\n  static int64_t apply() {return 0;}\n};\n\ntemplate<typename ... Args>\nauto dispatch_all(Args&&... args)\n  -> decltype(Foobar<double>::apply(std::forward<Args>(args)...)) {\n...\n}\n\ndispatch_all();\n\nbut adding an unused template parameter (F) doesn't:\ntemplate <typename T>\nstruct Foobar {\n  static int64_t apply() {return 0;}\n};\n\ntemplate<typename F, typename ... Args>\nauto dispatch_all(const Type& the_type, const char *name, Args&&... args)\n  -> decltype(Foobar<double>::apply(std::forward<Args>(args)...)) {\n\nstruct Foo {};\ndispatch_all<Foo>();\n\nHere's my nvcc version:\nnvcc: NVIDIA (R) Cuda compiler driver\nCopyright (c) 2005-2016 NVIDIA Corporation\nBuilt on Sun_Sep__4_22:14:01_CDT_2016\nCuda compilation tools, release 8.0, V8.0.44```", "body": "A couple of notes/questions for @ngimel:\r\n\r\n1) The CPU apply code uses lambdas; to get the CUDA equivalent device lambdas I enabled `--expt-extended-lambda`; is that something we want to do?  Or should we just write fully-fledged functions?\r\n\r\n2) NVCC can't seem to handle the previous dispatch templates (you can see them in Dispatch.h), so I had to make the return type an explicit template parameter rather than `auto`.  I spent some time coming up with a minimal reproducible example and it seems like it's the combination of variadic template parameters, non-variadic template parameters, and `auto` return type.  Specifically, something like this seems to work:\r\n\r\n```\r\ntemplate <typename T>\r\nstruct Foobar {\r\n  static int64_t apply() {return 0;}\r\n};\r\n\r\ntemplate<typename ... Args>\r\nauto dispatch_all(Args&&... args)\r\n  -> decltype(Foobar<double>::apply(std::forward<Args>(args)...)) {\r\n...\r\n}\r\n\r\ndispatch_all();\r\n```\r\n\r\nbut adding an unused template parameter (F) doesn't:\r\n```\r\ntemplate <typename T>\r\nstruct Foobar {\r\n  static int64_t apply() {return 0;}\r\n};\r\n\r\ntemplate<typename F, typename ... Args>\r\nauto dispatch_all(const Type& the_type, const char *name, Args&&... args)\r\n  -> decltype(Foobar<double>::apply(std::forward<Args>(args)...)) {\r\n\r\nstruct Foo {};\r\ndispatch_all<Foo>();\r\n```\r\n\r\nHere's my nvcc version:\r\n```nvcc --version\r\nnvcc: NVIDIA (R) Cuda compiler driver\r\nCopyright (c) 2005-2016 NVIDIA Corporation\r\nBuilt on Sun_Sep__4_22:14:01_CDT_2016\r\nCuda compilation tools, release 8.0, V8.0.44```"}