{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/158864507", "pull_request_review_id": 85730119, "id": 158864507, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODg2NDUwNw==", "diff_hunk": "@@ -4,42 +4,44 @@\n \n namespace at {\n \n-template<template <typename> class F, typename ... Args>\n-auto dispatch_all(const Type& the_type, const char *name, Args&&... args)\n-  -> decltype(F<double>::apply(std::forward<Args>(args)...)) {\n+// FIXME: nvcc can't seem to do type deduction on\n+// decltype(F<double>::apply(std::forward<Args>(args)...)) so we have to explicitly pass the return type\n \n-    switch(the_type.scalarType()) {\n-        case ScalarType::Byte:\n-            return F<uint8_t>::apply(std::forward<Args>(args)...);\n-        case ScalarType::Char:\n-            return F<int8_t>::apply(std::forward<Args>(args)...);\n-        case ScalarType::Double:\n-            return F<double>::apply(std::forward<Args>(args)...);\n-        case ScalarType::Float:\n-            return F<float>::apply(std::forward<Args>(args)...);\n-        case ScalarType::Int:\n-            return F<int>::apply(std::forward<Args>(args)...);\n-        case ScalarType::Long:\n-            return F<int64_t>::apply(std::forward<Args>(args)...);\n-        case ScalarType::Short:\n-            return F<int16_t>::apply(std::forward<Args>(args)...);\n-        case ScalarType::Half:\n-            return F<Half>::apply(std::forward<Args>(args)...);\n-        default:\n-            runtime_error(\"%s not implemented for '%s'\", name, the_type.toString());\n+template<typename R, template <typename> class F, typename ... Args>\n+R dispatch_all(const Type& the_type, const char *name, Args&&... args) {\n+  switch(the_type.scalarType()) {\n+    case ScalarType::Byte:\n+      return F<uint8_t>::apply(std::forward<Args>(args)...);\n+    case ScalarType::Char:\n+      return F<int8_t>::apply(std::forward<Args>(args)...);\n+    case ScalarType::Double:\n+      return F<double>::apply(std::forward<Args>(args)...);\n+    case ScalarType::Float:\n+      return F<float>::apply(std::forward<Args>(args)...);\n+    case ScalarType::Int:\n+      return F<int>::apply(std::forward<Args>(args)...);\n+    case ScalarType::Long:\n+      return F<int64_t>::apply(std::forward<Args>(args)...);\n+    case ScalarType::Short:\n+      return F<int16_t>::apply(std::forward<Args>(args)...);\n+    case ScalarType::Half:\n+      return F<Half>::apply(std::forward<Args>(args)...);\n+    default:\n+      runtime_error(\"%s not implemented for '%s'\", name, the_type.toString());\n     }\n }\n-template<template <typename> class F, typename ... Args>\n-auto dispatch_floating_types(const Type& the_type, const char *name, Args&&... args)\n-  -> decltype(F<double>::apply(std::forward<Args>(args)...)) {\n-    switch(the_type.scalarType()) {\n-        case ScalarType::Double:\n-            return F<double>::apply(std::forward<Args>(args)...);\n-        case ScalarType::Float:\n-            return F<float>::apply(std::forward<Args>(args)...);\n-        default:\n-            runtime_error(\"%s not implemented for '%s'\", name, the_type.toString());\n-    }\n+\n+template<typename R, template <typename> class F, typename ... Args>\n+R dispatch_floating_types(const Type& the_type, const char *name, Args&&... args) {\n+  switch(the_type.scalarType()) {\n+    case ScalarType::Double:\n+      return F<double>::apply(std::forward<Args>(args)...);\n+    case ScalarType::Float:\n+      return F<float>::apply(std::forward<Args>(args)...);\n+    case ScalarType::Half: // no native half math on either CPU or GPU.", "path": "aten/src/ATen/Dispatch.h", "position": 71, "original_position": 71, "commit_id": "60819108f4abee208959a09d57b233e985950635", "original_commit_id": "fe49734c44eaa409c0fb1f06cdda834116359196", "user": {"login": "gchanan", "id": 3768583, "node_id": "MDQ6VXNlcjM3Njg1ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3768583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gchanan", "html_url": "https://github.com/gchanan", "followers_url": "https://api.github.com/users/gchanan/followers", "following_url": "https://api.github.com/users/gchanan/following{/other_user}", "gists_url": "https://api.github.com/users/gchanan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gchanan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gchanan/subscriptions", "organizations_url": "https://api.github.com/users/gchanan/orgs", "repos_url": "https://api.github.com/users/gchanan/repos", "events_url": "https://api.github.com/users/gchanan/events{/privacy}", "received_events_url": "https://api.github.com/users/gchanan/received_events", "type": "User", "site_admin": false}, "body": "why? I'm just trying to be explicit that Half isn't dispatched.  It's essentially a comment.", "created_at": "2017-12-27T20:28:51Z", "updated_at": "2018-11-23T15:37:40Z", "html_url": "https://github.com/pytorch/pytorch/pull/4304#discussion_r158864507", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4304", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/158864507"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/4304#discussion_r158864507"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4304"}}, "body_html": "<p>why? I'm just trying to be explicit that Half isn't dispatched.  It's essentially a comment.</p>", "body_text": "why? I'm just trying to be explicit that Half isn't dispatched.  It's essentially a comment.", "in_reply_to_id": 158409930}