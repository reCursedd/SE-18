{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/416709176", "html_url": "https://github.com/pytorch/pytorch/pull/10668#issuecomment-416709176", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/10668", "id": 416709176, "node_id": "MDEyOklzc3VlQ29tbWVudDQxNjcwOTE3Ng==", "user": {"login": "zasdfgbnm", "id": 1032377, "node_id": "MDQ6VXNlcjEwMzIzNzc=", "avatar_url": "https://avatars2.githubusercontent.com/u/1032377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zasdfgbnm", "html_url": "https://github.com/zasdfgbnm", "followers_url": "https://api.github.com/users/zasdfgbnm/followers", "following_url": "https://api.github.com/users/zasdfgbnm/following{/other_user}", "gists_url": "https://api.github.com/users/zasdfgbnm/gists{/gist_id}", "starred_url": "https://api.github.com/users/zasdfgbnm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zasdfgbnm/subscriptions", "organizations_url": "https://api.github.com/users/zasdfgbnm/orgs", "repos_url": "https://api.github.com/users/zasdfgbnm/repos", "events_url": "https://api.github.com/users/zasdfgbnm/events{/privacy}", "received_events_url": "https://api.github.com/users/zasdfgbnm/received_events", "type": "User", "site_admin": false}, "created_at": "2018-08-28T19:21:26Z", "updated_at": "2018-08-28T19:22:17Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=655866\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/colesbury\">@colesbury</a> Yes, I was planning to use <code>masked_select</code>, but I changed my mind and decide to do it this way, because in my personal opinion, this seems to have comparable complication on codes, but have less impact on cases that is not a simple <code>masked_selected</code>. Not seriously tested on performance. What is your opinion on special casing like this or using <code>masked_select</code>? Which is better?</p>\n<p>BTW, I remember I didn't see <code>operator==</code> that allow us to do <code>indices[0].sizes() == self.sizes()</code>, so we have to write a for loop to compare every element of the int list.</p>", "body_text": "@colesbury Yes, I was planning to use masked_select, but I changed my mind and decide to do it this way, because in my personal opinion, this seems to have comparable complication on codes, but have less impact on cases that is not a simple masked_selected. Not seriously tested on performance. What is your opinion on special casing like this or using masked_select? Which is better?\nBTW, I remember I didn't see operator== that allow us to do indices[0].sizes() == self.sizes(), so we have to write a for loop to compare every element of the int list.", "body": "@colesbury Yes, I was planning to use `masked_select`, but I changed my mind and decide to do it this way, because in my personal opinion, this seems to have comparable complication on codes, but have less impact on cases that is not a simple `masked_selected`. Not seriously tested on performance. What is your opinion on special casing like this or using `masked_select`? Which is better?\r\n\r\nBTW, I remember I didn't see `operator==` that allow us to do `indices[0].sizes() == self.sizes()`, so we have to write a for loop to compare every element of the int list."}