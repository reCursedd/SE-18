{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/394005599", "html_url": "https://github.com/pytorch/pytorch/issues/6983#issuecomment-394005599", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/6983", "id": 394005599, "node_id": "MDEyOklzc3VlQ29tbWVudDM5NDAwNTU5OQ==", "user": {"login": "SsnL", "id": 5674597, "node_id": "MDQ6VXNlcjU2NzQ1OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5674597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SsnL", "html_url": "https://github.com/SsnL", "followers_url": "https://api.github.com/users/SsnL/followers", "following_url": "https://api.github.com/users/SsnL/following{/other_user}", "gists_url": "https://api.github.com/users/SsnL/gists{/gist_id}", "starred_url": "https://api.github.com/users/SsnL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SsnL/subscriptions", "organizations_url": "https://api.github.com/users/SsnL/orgs", "repos_url": "https://api.github.com/users/SsnL/repos", "events_url": "https://api.github.com/users/SsnL/events{/privacy}", "received_events_url": "https://api.github.com/users/SsnL/received_events", "type": "User", "site_admin": false}, "created_at": "2018-06-01T20:51:22Z", "updated_at": "2018-06-01T20:51:22Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Indeed fixed by <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"327934105\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/7973\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/pytorch/pytorch/pull/7973/hovercard\" href=\"https://github.com/pytorch/pytorch/pull/7973\">#7973</a>. However, your script should be changed a bit. In particular, <code>random_input_scatter = nn.parallel.scatter(random_input, devices)</code> should be</p>\n<div class=\"highlight highlight-source-python\"><pre>random_input_scatter <span class=\"pl-k\">=</span> nn.parallel.scatter([random_input], devices)</pre></div>\n<p>because otherwise each device will see a single tensor in <code>parallel_apply</code> and then removes the first dimension here<br>\n<div class=\"border rounded-1 my-2\">\n  <div class=\"f6 px-3 py-2 lh-condensed border-bottom bg-gray-light\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/pytorch/pytorch/blob/1c01eabd3cc8402e6de815245774278af3ad0c7f/torch/nn/parallel/parallel_apply.py#L41\">pytorch/torch/nn/parallel/parallel_apply.py</a>\n    </p>\n    <p class=\"mb-0 text-gray-light\">\n         Line 41\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/pytorch/pytorch/commit/1c01eabd3cc8402e6de815245774278af3ad0c7f\">1c01eab</a>\n    </p>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L41\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"41\"></td>\n          <td id=\"LC41\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> output <span class=\"pl-k\">=</span> module(<span class=\"pl-k\">*</span><span class=\"pl-c1\">input</span>, <span class=\"pl-k\">**</span>kwargs) </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n<br>\nso your target should also be.</p>\n<div class=\"highlight highlight-source-python\"><pre>random_target <span class=\"pl-k\">=</span> torch.randn((<span class=\"pl-c1\">4</span>, <span class=\"pl-c1\">1</span>))</pre></div>\n<p>Without these changes it will only work with batch size == num devices.</p>\n<p>However, considering how subtle this is, I think it makes sense to let <code>parallel_apply</code> accept list of tensors as inputs. I'll send out a PR to update that.</p>", "body_text": "Indeed fixed by #7973. However, your script should be changed a bit. In particular, random_input_scatter = nn.parallel.scatter(random_input, devices) should be\nrandom_input_scatter = nn.parallel.scatter([random_input], devices)\nbecause otherwise each device will see a single tensor in parallel_apply and then removes the first dimension here\n\n  \n    \n      pytorch/torch/nn/parallel/parallel_apply.py\n    \n    \n         Line 41\n      in\n      1c01eab\n    \n    \n    \n    \n\n        \n          \n           output = module(*input, **kwargs) \n        \n    \n  \n\n\nso your target should also be.\nrandom_target = torch.randn((4, 1))\nWithout these changes it will only work with batch size == num devices.\nHowever, considering how subtle this is, I think it makes sense to let parallel_apply accept list of tensors as inputs. I'll send out a PR to update that.", "body": "Indeed fixed by #7973. However, your script should be changed a bit. In particular, `random_input_scatter = nn.parallel.scatter(random_input, devices)` should be\r\n```py\r\nrandom_input_scatter = nn.parallel.scatter([random_input], devices)\r\n```\r\nbecause otherwise each device will see a single tensor in `parallel_apply` and then removes the first dimension here\r\nhttps://github.com/pytorch/pytorch/blob/1c01eabd3cc8402e6de815245774278af3ad0c7f/torch/nn/parallel/parallel_apply.py#L41\r\nso your target should also be.\r\n```py\r\nrandom_target = torch.randn((4, 1))\r\n```\r\nWithout these changes it will only work with batch size == num devices.\r\n\r\nHowever, considering how subtle this is, I think it makes sense to let `parallel_apply` accept list of tensors as inputs. I'll send out a PR to update that."}