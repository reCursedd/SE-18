{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/362475943", "html_url": "https://github.com/pytorch/pytorch/issues/3748#issuecomment-362475943", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/3748", "id": 362475943, "node_id": "MDEyOklzc3VlQ29tbWVudDM2MjQ3NTk0Mw==", "user": {"login": "borisfom", "id": 14189615, "node_id": "MDQ6VXNlcjE0MTg5NjE1", "avatar_url": "https://avatars3.githubusercontent.com/u/14189615?v=4", "gravatar_id": "", "url": "https://api.github.com/users/borisfom", "html_url": "https://github.com/borisfom", "followers_url": "https://api.github.com/users/borisfom/followers", "following_url": "https://api.github.com/users/borisfom/following{/other_user}", "gists_url": "https://api.github.com/users/borisfom/gists{/gist_id}", "starred_url": "https://api.github.com/users/borisfom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/borisfom/subscriptions", "organizations_url": "https://api.github.com/users/borisfom/orgs", "repos_url": "https://api.github.com/users/borisfom/repos", "events_url": "https://api.github.com/users/borisfom/events{/privacy}", "received_events_url": "https://api.github.com/users/borisfom/received_events", "type": "User", "site_admin": false}, "created_at": "2018-02-02T03:32:00Z", "updated_at": "2018-02-02T03:40:50Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=22205833\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/csarofeen\">@csarofeen</a> : we may need to look at LBGFS optimizer. It actually gives more intersesting results than Adam for this algo. I just tried LBGFS and it fails like this :</p>\n<p>#optimizer = optim.Adam([opt_img],lr=1e1,eps=1e-04)<br>\noptimizer = optim.LBFGS([opt_img], lr=1e1)</p>\n<p>python neural-style-Gatys-half.py<br>\n/usr/local/lib/python2.7/dist-packages/torchvision/transforms/transforms.py:156: UserWarning: The use of the transforms.Scale transform is deprecated, please use transforms.Resize instead.<br>\n\"please use transforms.Resize instead.\")<br>\nprint out the vgg layers<br>\nVGG(<br>\n(conv1_1): Conv2d (3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))<br>\n(conv1_2): Conv2d (64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))<br>\n(conv2_1): Conv2d (64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))<br>\n(conv2_2): Conv2d (128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))<br>\n(conv3_1): Conv2d (128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))<br>\n(conv3_2): Conv2d (256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))<br>\n(conv3_3): Conv2d (256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))<br>\n(conv3_4): Conv2d (256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))<br>\n(conv4_1): Conv2d (256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))<br>\n(conv4_2): Conv2d (512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))<br>\n(conv4_3): Conv2d (512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))<br>\n(conv4_4): Conv2d (512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))<br>\n(conv5_1): Conv2d (512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))<br>\n(conv5_2): Conv2d (512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))<br>\n(conv5_3): Conv2d (512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))<br>\n(conv5_4): Conv2d (512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))<br>\n(pool1): MaxPool2d(kernel_size=(2, 2), stride=(2, 2), dilation=(1, 1))<br>\n(pool2): MaxPool2d(kernel_size=(2, 2), stride=(2, 2), dilation=(1, 1))<br>\n(pool3): MaxPool2d(kernel_size=(2, 2), stride=(2, 2), dilation=(1, 1))<br>\n(pool4): MaxPool2d(kernel_size=(2, 2), stride=(2, 2), dilation=(1, 1))<br>\n(pool5): MaxPool2d(kernel_size=(2, 2), stride=(2, 2), dilation=(1, 1))<br>\n)<br>\n('Print loss layers', ['r11', 'r21', 'r31', 'r41', 'r51', 'r42'])<br>\n('Print loss functions', [GramMSELoss(<br>\n), GramMSELoss(<br>\n), GramMSELoss(<br>\n), GramMSELoss(<br>\n), GramMSELoss(<br>\n), MSELoss(<br>\n)])<br>\n('Print weights', [0.244140625, 0.06103515625, 0.0152587890625, 0.003814697265625, 0.003814697265625, 1.0])<br>\n('The length of targets:', 6)<br>\nTraceback (most recent call last):<br>\nFile \"neural-style-Gatys-half.py\", line 194, in <br>\noptimizer.step(closure)<br>\nFile \"/usr/local/lib/python2.7/dist-packages/torch/optim/lbfgs.py\", line 197, in step<br>\ngtd = flat_grad.dot(d)  # g * d<br>\nRuntimeError: cublas runtime error : unknown error at /pytorch/torch/lib/THC/THCBlas.cu:67</p>", "body_text": "@csarofeen : we may need to look at LBGFS optimizer. It actually gives more intersesting results than Adam for this algo. I just tried LBGFS and it fails like this :\n#optimizer = optim.Adam([opt_img],lr=1e1,eps=1e-04)\noptimizer = optim.LBFGS([opt_img], lr=1e1)\npython neural-style-Gatys-half.py\n/usr/local/lib/python2.7/dist-packages/torchvision/transforms/transforms.py:156: UserWarning: The use of the transforms.Scale transform is deprecated, please use transforms.Resize instead.\n\"please use transforms.Resize instead.\")\nprint out the vgg layers\nVGG(\n(conv1_1): Conv2d (3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n(conv1_2): Conv2d (64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n(conv2_1): Conv2d (64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n(conv2_2): Conv2d (128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n(conv3_1): Conv2d (128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n(conv3_2): Conv2d (256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n(conv3_3): Conv2d (256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n(conv3_4): Conv2d (256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n(conv4_1): Conv2d (256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n(conv4_2): Conv2d (512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n(conv4_3): Conv2d (512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n(conv4_4): Conv2d (512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n(conv5_1): Conv2d (512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n(conv5_2): Conv2d (512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n(conv5_3): Conv2d (512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n(conv5_4): Conv2d (512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n(pool1): MaxPool2d(kernel_size=(2, 2), stride=(2, 2), dilation=(1, 1))\n(pool2): MaxPool2d(kernel_size=(2, 2), stride=(2, 2), dilation=(1, 1))\n(pool3): MaxPool2d(kernel_size=(2, 2), stride=(2, 2), dilation=(1, 1))\n(pool4): MaxPool2d(kernel_size=(2, 2), stride=(2, 2), dilation=(1, 1))\n(pool5): MaxPool2d(kernel_size=(2, 2), stride=(2, 2), dilation=(1, 1))\n)\n('Print loss layers', ['r11', 'r21', 'r31', 'r41', 'r51', 'r42'])\n('Print loss functions', [GramMSELoss(\n), GramMSELoss(\n), GramMSELoss(\n), GramMSELoss(\n), GramMSELoss(\n), MSELoss(\n)])\n('Print weights', [0.244140625, 0.06103515625, 0.0152587890625, 0.003814697265625, 0.003814697265625, 1.0])\n('The length of targets:', 6)\nTraceback (most recent call last):\nFile \"neural-style-Gatys-half.py\", line 194, in \noptimizer.step(closure)\nFile \"/usr/local/lib/python2.7/dist-packages/torch/optim/lbfgs.py\", line 197, in step\ngtd = flat_grad.dot(d)  # g * d\nRuntimeError: cublas runtime error : unknown error at /pytorch/torch/lib/THC/THCBlas.cu:67", "body": "@csarofeen : we may need to look at LBGFS optimizer. It actually gives more intersesting results than Adam for this algo. I just tried LBGFS and it fails like this :\r\n\r\n\\#optimizer = optim.Adam([opt_img],lr=1e1,eps=1e-04)\r\noptimizer = optim.LBFGS([opt_img], lr=1e1)\r\n\r\npython neural-style-Gatys-half.py \r\n/usr/local/lib/python2.7/dist-packages/torchvision/transforms/transforms.py:156: UserWarning: The use of the transforms.Scale transform is deprecated, please use transforms.Resize instead.\r\n  \"please use transforms.Resize instead.\")\r\nprint out the vgg layers\r\nVGG(\r\n  (conv1_1): Conv2d (3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\r\n  (conv1_2): Conv2d (64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\r\n  (conv2_1): Conv2d (64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\r\n  (conv2_2): Conv2d (128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\r\n  (conv3_1): Conv2d (128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\r\n  (conv3_2): Conv2d (256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\r\n  (conv3_3): Conv2d (256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\r\n  (conv3_4): Conv2d (256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\r\n  (conv4_1): Conv2d (256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\r\n  (conv4_2): Conv2d (512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\r\n  (conv4_3): Conv2d (512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\r\n  (conv4_4): Conv2d (512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\r\n  (conv5_1): Conv2d (512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\r\n  (conv5_2): Conv2d (512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\r\n  (conv5_3): Conv2d (512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\r\n  (conv5_4): Conv2d (512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\r\n  (pool1): MaxPool2d(kernel_size=(2, 2), stride=(2, 2), dilation=(1, 1))\r\n  (pool2): MaxPool2d(kernel_size=(2, 2), stride=(2, 2), dilation=(1, 1))\r\n  (pool3): MaxPool2d(kernel_size=(2, 2), stride=(2, 2), dilation=(1, 1))\r\n  (pool4): MaxPool2d(kernel_size=(2, 2), stride=(2, 2), dilation=(1, 1))\r\n  (pool5): MaxPool2d(kernel_size=(2, 2), stride=(2, 2), dilation=(1, 1))\r\n)\r\n('Print loss layers', ['r11', 'r21', 'r31', 'r41', 'r51', 'r42'])\r\n('Print loss functions', [GramMSELoss(\r\n), GramMSELoss(\r\n), GramMSELoss(\r\n), GramMSELoss(\r\n), GramMSELoss(\r\n), MSELoss(\r\n)])\r\n('Print weights', [0.244140625, 0.06103515625, 0.0152587890625, 0.003814697265625, 0.003814697265625, 1.0])\r\n('The length of targets:', 6)\r\nTraceback (most recent call last):\r\n  File \"neural-style-Gatys-half.py\", line 194, in <module>\r\n    optimizer.step(closure)\r\n  File \"/usr/local/lib/python2.7/dist-packages/torch/optim/lbfgs.py\", line 197, in step\r\n    gtd = flat_grad.dot(d)  # g * d\r\nRuntimeError: cublas runtime error : unknown error at /pytorch/torch/lib/THC/THCBlas.cu:67"}