{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/160651712", "pull_request_review_id": 87805067, "id": 160651712, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MDY1MTcxMg==", "diff_hunk": "@@ -1,9 +1,31 @@\n+from collections import namedtuple\n from functools import update_wrapper\n from numbers import Number\n \n import torch\n-from torch.autograd import Variable\n import torch.nn.functional as F\n+from torch.autograd import Variable\n+\n+# This follows semantics of numpy.finfo.\n+_Finfo = namedtuple('_Finfo', ['eps', 'tiny'])\n+_FINFO = {\n+    'torch.HalfTensor': _Finfo(eps=0.00097656, tiny=6.1035e-05),\n+    'torch.FloatTensor': _Finfo(eps=1.19209e-07, tiny=1.17549e-38),\n+    'torch.DoubleTensor': _Finfo(eps=2.22044604925e-16, tiny=2.22507385851e-308),\n+    'torch.cuda.HalfTensor': _Finfo(eps=0.00097656, tiny=6.1035e-05),\n+    'torch.cuda.FloatTensor': _Finfo(eps=1.19209e-07, tiny=1.17549e-38),\n+    'torch.cuda.DoubleTensor': _Finfo(eps=2.22044604925e-16, tiny=2.22507385851e-308),\n+}\n+\n+\n+def _finfo(tensor):\n+    \"\"\"\n+    Return floating point info about a `Tensor` or `Variable`:\n+    - `.eps` is the smallest number that can be added to 1 without being lost.\n+    - `.tiny` is the smallest positive number greater than zero\n+      (much smaller than `.eps`).\n+    \"\"\"\n+    return _FINFO[tensor.type()]", "path": "torch/distributions/utils.py", "position": null, "original_position": 29, "commit_id": "0e63af05e8100c50a61f45263a1f292b89a1dfcb", "original_commit_id": "95877b8b52af9d3138bc50b80bd2be4ff6c10a4e", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "let's use `type(tensor)` to avoid building up the string description and matching on that (`type(tensor)` will simply hash and compare the pointer value)", "created_at": "2018-01-10T11:30:52Z", "updated_at": "2018-11-23T15:38:00Z", "html_url": "https://github.com/pytorch/pytorch/pull/4572#discussion_r160651712", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4572", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/160651712"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/4572#discussion_r160651712"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4572"}}, "body_html": "<p>let's use <code>type(tensor)</code> to avoid building up the string description and matching on that (<code>type(tensor)</code> will simply hash and compare the pointer value)</p>", "body_text": "let's use type(tensor) to avoid building up the string description and matching on that (type(tensor) will simply hash and compare the pointer value)"}