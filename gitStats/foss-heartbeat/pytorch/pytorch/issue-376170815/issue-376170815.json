{"url": "https://api.github.com/repos/pytorch/pytorch/issues/13427", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/13427/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/13427/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/13427/events", "html_url": "https://github.com/pytorch/pytorch/pull/13427", "id": 376170815, "node_id": "MDExOlB1bGxSZXF1ZXN0MjI3NDUwNDAw", "number": 13427, "title": "[C++ Frontend] Replace cursors with OrderedDict", "user": {"login": "goldsborough", "id": 6429851, "node_id": "MDQ6VXNlcjY0Mjk4NTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/6429851?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goldsborough", "html_url": "https://github.com/goldsborough", "followers_url": "https://api.github.com/users/goldsborough/followers", "following_url": "https://api.github.com/users/goldsborough/following{/other_user}", "gists_url": "https://api.github.com/users/goldsborough/gists{/gist_id}", "starred_url": "https://api.github.com/users/goldsborough/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goldsborough/subscriptions", "organizations_url": "https://api.github.com/users/goldsborough/orgs", "repos_url": "https://api.github.com/users/goldsborough/repos", "events_url": "https://api.github.com/users/goldsborough/events{/privacy}", "received_events_url": "https://api.github.com/users/goldsborough/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 917150434, "node_id": "MDU6TGFiZWw5MTcxNTA0MzQ=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/cpp", "name": "cpp", "color": "000000", "default": false}, {"id": 679953983, "node_id": "MDU6TGFiZWw2Nzk5NTM5ODM=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/jit", "name": "jit", "color": "c5def5", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-10-31T21:38:57Z", "updated_at": "2018-11-07T19:11:47Z", "closed_at": "2018-11-07T19:11:46Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/13427", "html_url": "https://github.com/pytorch/pytorch/pull/13427", "diff_url": "https://github.com/pytorch/pytorch/pull/13427.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/13427.patch"}, "body_html": "<p>This is a pre-cursor diff to Python &lt;-&gt; C++ frontend integration -- I have a follow-up PR coming for that. This PR changes the C++ frontend module interface to replace the custom \"cursor\"s I introduced some time ago with <code>OrderedDict</code>. I introduced cursors at the time as a convenient way of applying functions and query operations on a modules' parameters, buffers and modules, allowing things like <code>module.parameters().map(my_func)</code>. However, I noticed that (1) this functionality is easily implement-able on top of a regular data structure and (2) more importantly,  using OrderedDicts is much, much easier for Python integration. This is especially true given that ScriptModule today also uses OrderedDict. Since C++ frontend modules and ScriptModules will soon too share as many implementation details as possible, it is overall the best move to ditch the custom cursor datastructure and pervasively use OrderedDict everywhere.</p>\n<p>For this I did:</p>\n<ol>\n<li>Changed the C++ frontend module interface to more closely match the Python one by providing <code>parameters()</code>, <code>named_parameters()</code> and other methods Python provides. This is very important for the following diff which binds these into Python for inter-op with Python modules.</li>\n<li>In lieu of the <code>Cursor::apply()</code> method I added <code>nn::Module::apply</code>. This again is one more unifying step between Python and C++, since Python modules have an apply function too.</li>\n<li>Deleted all uses of Cursor.</li>\n<li>Tidied and beefed up the <code>OrderedDict</code> class. In particular, I made <code>OrderedDict::Item</code> store an <code>std::pair</code> under the hood, because that is trivial to bind into Python and saved me a lot of headaches. <code>key</code> and <code>value</code> become methods instead of fields, which they should have been from the very start anyway because it allows exactly these kinds of changes, as per usual good software engineering principle of encapsulation.</li>\n<li>Added many tests for the OrderedDict use in <code>nn::Module</code>.</li>\n</ol>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=3605224\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ebetica\">@ebetica</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=13564\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ezyang\">@ezyang</a></p>", "body_text": "This is a pre-cursor diff to Python <-> C++ frontend integration -- I have a follow-up PR coming for that. This PR changes the C++ frontend module interface to replace the custom \"cursor\"s I introduced some time ago with OrderedDict. I introduced cursors at the time as a convenient way of applying functions and query operations on a modules' parameters, buffers and modules, allowing things like module.parameters().map(my_func). However, I noticed that (1) this functionality is easily implement-able on top of a regular data structure and (2) more importantly,  using OrderedDicts is much, much easier for Python integration. This is especially true given that ScriptModule today also uses OrderedDict. Since C++ frontend modules and ScriptModules will soon too share as many implementation details as possible, it is overall the best move to ditch the custom cursor datastructure and pervasively use OrderedDict everywhere.\nFor this I did:\n\nChanged the C++ frontend module interface to more closely match the Python one by providing parameters(), named_parameters() and other methods Python provides. This is very important for the following diff which binds these into Python for inter-op with Python modules.\nIn lieu of the Cursor::apply() method I added nn::Module::apply. This again is one more unifying step between Python and C++, since Python modules have an apply function too.\nDeleted all uses of Cursor.\nTidied and beefed up the OrderedDict class. In particular, I made OrderedDict::Item store an std::pair under the hood, because that is trivial to bind into Python and saved me a lot of headaches. key and value become methods instead of fields, which they should have been from the very start anyway because it allows exactly these kinds of changes, as per usual good software engineering principle of encapsulation.\nAdded many tests for the OrderedDict use in nn::Module.\n\n@ebetica @ezyang", "body": "This is a pre-cursor diff to Python <-> C++ frontend integration -- I have a follow-up PR coming for that. This PR changes the C++ frontend module interface to replace the custom \"cursor\"s I introduced some time ago with `OrderedDict`. I introduced cursors at the time as a convenient way of applying functions and query operations on a modules' parameters, buffers and modules, allowing things like `module.parameters().map(my_func)`. However, I noticed that (1) this functionality is easily implement-able on top of a regular data structure and (2) more importantly,  using OrderedDicts is much, much easier for Python integration. This is especially true given that ScriptModule today also uses OrderedDict. Since C++ frontend modules and ScriptModules will soon too share as many implementation details as possible, it is overall the best move to ditch the custom cursor datastructure and pervasively use OrderedDict everywhere.\r\n\r\nFor this I did:\r\n\r\n1. Changed the C++ frontend module interface to more closely match the Python one by providing `parameters()`, `named_parameters()` and other methods Python provides. This is very important for the following diff which binds these into Python for inter-op with Python modules.\r\n2. In lieu of the `Cursor::apply()` method I added `nn::Module::apply`. This again is one more unifying step between Python and C++, since Python modules have an apply function too.\r\n3. Deleted all uses of Cursor.\r\n4. Tidied and beefed up the `OrderedDict` class. In particular, I made `OrderedDict::Item` store an `std::pair` under the hood, because that is trivial to bind into Python and saved me a lot of headaches. `key` and `value` become methods instead of fields, which they should have been from the very start anyway because it allows exactly these kinds of changes, as per usual good software engineering principle of encapsulation.\r\n5. Added many tests for the OrderedDict use in `nn::Module`.\r\n\r\n@ebetica @ezyang "}