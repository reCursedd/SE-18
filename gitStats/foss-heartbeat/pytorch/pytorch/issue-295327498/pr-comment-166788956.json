{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/166788956", "pull_request_review_id": 94906614, "id": 166788956, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2Njc4ODk1Ng==", "diff_hunk": "@@ -1,150 +1,255 @@\n #pragma once\n \n-// A wrapper around at::Tensor to represent autograd Variables. Variables\n-// can be implicitly converted to an at::Tensor.\n+#include <Python.h>\n \n-#include <mutex>\n-#include <memory>\n-#include <vector>\n-#include <functional>\n-#include <ATen/ATen.h>\n-\n-#include \"torch/csrc/assertions.h\"\n-#include \"torch/csrc/jit/ir.h\"\n-#include \"torch/csrc/jit/tracer_state.h\"\n+#include \"torch/csrc/autograd/edge.h\"\n #include \"torch/csrc/autograd/function_hook.h\"\n-#include \"torch/csrc/utils/auto_unique_ptr.h\"\n #include \"torch/csrc/autograd/variable_version.h\"\n-#include \"torch/csrc/autograd/edge.h\"\n-#include \"torch/csrc/Types.h\"\n+#include \"torch/csrc/jit/tracer_state.h\"\n+#include \"torch/csrc/utils/auto_unique_ptr.h\"\n+\n+#include <ATen/Scalar.h>\n+#include <ATen/ScalarType.h>\n+#include <ATen/Storage.h>\n+#include <ATen/Tensor.h>\n+#include <ATen/TensorImpl.h>\n+#include <ATen/Type.h>\n+\n+#include <list>\n+#include <memory>\n+#include <mutex>\n+#include <string>\n+#include <vector>\n \n namespace torch { namespace autograd {\n \n-using at::Tensor;\n-struct VariableImpl;\n+struct Function;\n+\n+//===----------------------------------------------------------------------===//\n+//                                Variable\n+//===----------------------------------------------------------------------===//\n+\n+/// A `Variable` augments a `Tensor` with the ability to interact in our\n+/// autograd machinery. `Variable` inherits from `Tensor` and may be converted\n+/// to and from `Tensor` implicitly.\n+class Variable : public at::Tensor {\n+ public:\n+  /// Creates a Variable that is a *view* of another (*base*) variable.\n+  /// The `gradient_edge` is an optional (gradient_function, input_number) pair.\n+  static Variable\n+  as_view(Variable base, at::Tensor data, Edge gradient_edge = Edge());\n+\n+  Variable() = default;\n+  Variable(at::Tensor data, bool requires_grad);\n+  Variable(at::Tensor data, Edge gradient_edge);\n+\n+  // \"Downcasts\" a `Tensor` into a `Variable`. Only call this on tensors you\n+  // know are Variables.\n+  /*implicit*/ Variable(at::Tensor const& rhs) : at::Tensor(rhs) {}\n+  /*implicit*/ Variable(at::Tensor&& rhs) noexcept\n+      : at::Tensor(std::move(rhs)) {}\n+\n+  // NOTE: Assignment operators to Tensor come for free from the constructors.\n+\n+  /// Compare this `Variable` to another `Variable` (or `Tensor`) via\n+  /// pointer-equality.\n+  bool operator==(const Variable& other) const noexcept {\n+    return this->pImpl == other.pImpl;\n+  }\n+\n+  bool operator!=(const Variable& other) const noexcept {\n+    return !(*this == other);\n+  }\n+\n+  void set_name(const std::string& name);\n+  const std::string& name() const noexcept;\n+\n+  /// Get the gradient function of the `Variable`. If this is a leaf variable,\n+  /// the pointer returned will be null.\n+  const std::shared_ptr<Function>& grad_fn() const;\n+\n+  /// Set the gradient accumulator of the `Variable`. This is only applicable\n+  /// to leaf variables. Interior variables should call `set_gradient_edge()`.\n+  void set_grad_accumulator(std::weak_ptr<Function> grad_accumulator);\n \n-struct Variable : public at::Tensor {\n-  inline Variable(VariableImpl * self, bool retain);\n-  Variable() : Tensor() {}\n-  Variable(const Variable & rhs) : Tensor(rhs) {}\n-  Variable(Variable && rhs) noexcept : Tensor(std::move(rhs)) {}\n+  /// Attempt to get a pointer to the gradient accumulator of the `Variable`,\n+  /// if it still exists. If the gradient accumulator function has been\n+  /// destroyed, returns a `nullptr`.\n+  std::shared_ptr<Function> try_get_grad_accumulator() const;\n \n-  // Implicitly casts a Tensor to a Variable. This should only be called on\n-  // Tensors which you know are actually Variables.\n-  /*implicit*/ Variable(Tensor const & rhs) : Tensor(rhs) {}\n-  /*implicit*/ Variable(Tensor && rhs) noexcept : Tensor(std::move(rhs)) {}\n+  /// Get the gradient accumulator of the `Variable` if it has one, or else\n+  /// create one on the fly and return it.\n+  std::shared_ptr<Function> grad_accumulator() const;\n \n+  /// Set the gradient edge -- i.e. `grad_fn` and `input_nr` -- of the\n+  /// `Variable`.\n+  /// NOTE: This will always set the `grad_fn`, even if this is a leaf\n+  /// variable, and never the `grad_accumulator`. For the latter, use\n+  /// `set_grad_accumulator`. This allows late construction of an interior\n+  /// `Variable`.\n+  void set_gradient_edge(Edge&& edge);\n+\n+  /// Return the \"canonical\" gradient edge of this `Variable`, i.e. either the\n+  /// gradient function if this is an interior `Variable`, or the gradient\n+  /// accumulator otherwise. If the `Variable` is interior, the returned `Edge`\n+  /// will store the input index of the `Function` to which this variable is\n+  /// connected in its `input_nr` field. For leaves, the `input_nr` is always\n+  /// zero. Note that `set_gradient_edge` and `gradient_edge` are not\n+  /// symmetric. You must use `set_gradient_edge` to set the `grad_fn` and\n+  /// `set_grad_accumulator` to set the accumulator.\n   Edge gradient_edge() const {\n     // If grad_fn is null (as is the case for a leaf node), we instead\n-    // interpret the gradient function to be a grad accumulator,\n-    // which will accumulate its inputs into the grad property of the\n-    // variable. These nodes get suppressed in some situations,\n-    // see \"suppress grad accumulation\" below. Note that only variables which\n-    // have `requires_grad = True` can have grad accumulators.\n+    // interpret the gradient function to be a gradient accumulator, which will\n+    // accumulate its inputs into the grad property of the variable. These\n+    // nodes get suppressed in some situations, see \"suppress gradient\n+    // accumulation\" below. Note that only variables which have `requires_grad =\n+    // True` can have gradient accumulators.\n     if (const auto& gradient = grad_fn()) {\n       return Edge(gradient, output_nr());\n     } else {\n       return Edge(grad_accumulator(), 0);\n     }\n   }\n \n-  inline VariableImpl* get() const;\n+  /// Return the input index of the gradient `Function` to which this `Variable`\n+  /// is connected.\n+  int output_nr() const noexcept;\n \n-  inline const Tensor & data() const;\n-  inline       Tensor & data();\n+  void set_requires_grad(bool requires_grad);\n+  bool requires_grad() const noexcept;\n \n-  inline Tensor opt_data() const;\n+  PyObject* pyobj() const noexcept;\n+  void set_pyobj(PyObject* pyobj);\n \n-  inline const Variable & grad() const;\n-  inline       Variable & grad();\n+  /// Set the type of the underlying `Tensor`.\n+  void set_type(at::Type*);\n \n-  inline bool is_leaf() const;\n+  const at::Tensor& data() const;\n+  at::Tensor& data();\n \n-  inline const std::shared_ptr<Function>& grad_fn() const;\n+  /// Access the gradient `Variable` of this `Variable`.\n+  const Variable& grad() const;\n+  Variable& grad();\n+  void reset_grad();\n \n-  // Updates the grad_fn of an existing Variable. Called after in-place modifications.\n-  // XXX: this should be called only _after_ the version counter is implemented.\n-  inline void rebase_history(int output_nr, std::shared_ptr<Function> grad_fn);\n+  /// True if this `Variable` is a leaf and thus does not have a `grad_fn`.\n+  bool is_leaf() const noexcept;\n \n-  std::shared_ptr<Function> grad_accumulator() const;\n+  /// Update the grad_fn of an existing Variable. Called after in-place\n+  /// modifications.\n+  void rebase_history(int output_nr, std::shared_ptr<Function> grad_fn);\n+\n+  /// Return a copy of this `Variable` that is detached from its autograd graph\n+  /// and has a blank version. This method is OK to call if the `Variable` is a\n+  /// view.\n   Variable detach() const;\n-  void detach_();\n \n-  inline const std::vector<std::shared_ptr<FunctionPreHook>>& hooks() const;\n-  inline       std::vector<std::shared_ptr<FunctionPreHook>>& hooks();\n+  /// Like `detach()`, but removes this `Variable` in-place. This method may\n+  /// only be called on non-view `Variable`s. You can use `is_view()` to check\n+  /// this. If this `Variable` is a view, throws an `std::runtime_error()`.\n+  void detach_();\n \n-  inline auto_unique_ptr<jit::tracer::ValueTracingState>& tracing_state() const;\n+  /// Increment the version count of this `Variable`.\n+  void bump_version();\n+  void set_version(const VariableVersion& version);\n \n-  inline int current_version() const;\n+  /// Return true if this `Variable` is a view of another `Variable`.\n+  bool is_view() const noexcept;\n \n-  inline VariableVersion& version_counter() const;\n+  /// Return the `Variable` that this `Variable` is a view of. If this\n+  /// `Variable` is not a view, throw a `std::runtime_error`.\n+  const Variable& base() const;\n \n-  inline const int& output_nr() const;\n-  inline       int& output_nr();\n+  /// Retrieve this `Variable`s version counter.\n+  const VariableVersion& version_counter() const noexcept;\n \n-  inline bool requires_grad() const;\n+  /// Retrieve the current value of the `Variable`'s version counter. Equivalent\n+  /// to calling `version_counter().current_version()`.\n+  uint32_t current_version() const noexcept;\n \n-  inline bool is_view() const;\n-  inline Variable& base() const;\n+  void add_hook(std::shared_ptr<FunctionPreHook> hook);\n+  const std::vector<std::shared_ptr<FunctionPreHook>>& hooks() const;\n+  void clear_hooks();\n \n-  inline const std::string& name() const;\n-  inline       std::string& name();\n+  void set_tracing_state(jit::tracer::ValueTracingState* new_tracing_state);\n+  jit::tracer::ValueTracingState& tracing_state() const;\n+  bool has_tracing_state() const noexcept;\n \n-  inline Variable & operator=(Variable && rhs) &;\n-  inline Variable & operator=(const Variable & rhs) &;\n-  inline Variable & operator=(Tensor && rhs) &;\n-  inline Variable & operator=(const Tensor & rhs) &;\n+ private:\n+  /// Private implementation struct of the `Variable`. This struct declaration\n+  /// and the `get()` method which exposes it shall forever remain private and\n+  /// never be exposed to the public interface of this class.\n+  struct Impl;\n+  struct ViewImpl;\n+  Variable(Variable::Impl* self, bool retain);\n+  Impl* get() const;\n };\n \n-struct VariableImpl : public at::TensorImpl {\n-public:\n-  VariableImpl(at::Tensor data, bool requires_grad=false, int output_nr=0,\n-               std::shared_ptr<Function> grad_fn=nullptr);\n-  virtual ~VariableImpl();\n-  virtual const char * toString() const override;\n-  virtual at::IntList sizes() const override;\n-  virtual at::IntList strides() const override;\n-  virtual int64_t dim() const override;\n-  virtual at::Scalar localScalar() override;\n-  virtual void * unsafeGetTH(bool retain) override;\n-  virtual std::unique_ptr<at::Storage> storage() override;\n-  static const char * typeString();\n-\n-public:\n+//===----------------------------------------------------------------------===//\n+//                            Variable::Impl\n+//===----------------------------------------------------------------------===//\n+\n+struct Variable::Impl : public at::TensorImpl {\n+  explicit Impl(\n+      at::Tensor data_,\n+      bool requires_grad_ = false,\n+      Edge edge = Edge());\n+\n+  virtual ~Impl();\n+\n+  const char* toString() const override;\n+  at::IntList sizes() const override;\n+  at::IntList strides() const override;\n+  int64_t dim() const override;\n+  at::Scalar localScalar() override;\n+  void* unsafeGetTH(bool retain) override;\n+  std::unique_ptr<at::Storage> storage() override;\n+  static const char* typeString();\n+\n   std::shared_ptr<Function> get_grad_accumulator();\n-  virtual std::shared_ptr<Function>& get_grad_fn() { return _grad_fn; }\n+  virtual std::shared_ptr<Function>& get_grad_fn() {\n+    return grad_fn;\n+  }\n \n+  std::string name;\n   at::Tensor data;\n+\n   Variable grad;\n-  std::shared_ptr<Function> _grad_fn;\n+  std::shared_ptr<Function> grad_fn;\n+  std::weak_ptr<Function> grad_accumulator;\n+\n   VariableVersion version_counter;\n   std::vector<std::shared_ptr<FunctionPreHook>> hooks;\n-  std::weak_ptr<Function> grad_accumulator;\n-  // Mutex to ensure that concurrent read operations that modify internal state\n-  // are still thread-safe. Used by get_grad_fn and get_grad_accumulator.\n-  std::mutex mutex;\n-  bool _requires_grad;  // only meaningful on leaf variables (must be false otherwise)\n-  bool is_view;\n+\n+  bool requires_grad; // only meaningful on leaf variables (must be false\n+                      // otherwise)\n+  bool is_view = false;\n   // The \"output number\" of this variable; e.g., if this variable\n   // was the second output of a function, then output_nr == 1.\n   // We use this to make sure we can setup the backwards trace\n   // correctly when this variable is passed to another function.\n   int output_nr;\n-  PyObject *pyobj;  // weak reference\n+  PyObject* pyobj = nullptr; // weak reference\n \n-  std::string name;\n+  // Mutex to ensure that concurrent read operations that modify internal\n+  // state are still thread-safe. Used by get_grad_fn and\n+  // get_grad_accumulator.\n+  std::mutex mutex;\n \n   // For use in torch::jit::tracer\n   auto_unique_ptr<jit::tracer::ValueTracingState> tracing_state;\n-  friend struct VariableType;\n };\n \n+//===----------------------------------------------------------------------===//\n+//                          Variable::ViewImpl\n+//===----------------------------------------------------------------------===//\n+\n // A Variable that is a view on another Variable. The base and view share the\n-// same version_counter. The _grad_fn field of the Variable may become stale\n-// due to in-place modifications of the shared data. Accesses should go through\n-// get_grad_fn(). All other fields are always valid.\n-struct VariableViewImpl : public VariableImpl {\n-  VariableViewImpl(Variable base, at::Tensor data, int output_nr, std::shared_ptr<Function> grad_fn);\n+// same version_counter. The grad_fn field of the Variable may become stale\n+// due to in-place modifications of the shared data. Accesses should go\n+// through get_grad_fn(). All other fields are always valid.\n+struct Variable::ViewImpl : public Variable::Impl {\n+  ViewImpl(Variable base_, at::Tensor data_, Edge gradient_edge);", "path": "torch/csrc/autograd/variable.h", "position": null, "original_position": 342, "commit_id": "eba1e177795cddcd1971096dbccdcd81e0dcd773", "original_commit_id": "2770506f74aa5bd4f0a6c4a3dee541a6e8e4250c", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Can we not call arguments with an underscore at the end? We use this convention for naming struct members in certain places, so let's avoid this", "created_at": "2018-02-07T23:21:00Z", "updated_at": "2018-11-23T15:39:19Z", "html_url": "https://github.com/pytorch/pytorch/pull/5127#discussion_r166788956", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/5127", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/166788956"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/5127#discussion_r166788956"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/5127"}}, "body_html": "<p>Can we not call arguments with an underscore at the end? We use this convention for naming struct members in certain places, so let's avoid this</p>", "body_text": "Can we not call arguments with an underscore at the end? We use this convention for naming struct members in certain places, so let's avoid this"}