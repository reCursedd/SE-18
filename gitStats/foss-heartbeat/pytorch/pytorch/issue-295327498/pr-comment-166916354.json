{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/166916354", "pull_request_review_id": 95051700, "id": 166916354, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NjkxNjM1NA==", "diff_hunk": "@@ -1,150 +1,255 @@\n #pragma once\n \n-// A wrapper around at::Tensor to represent autograd Variables. Variables\n-// can be implicitly converted to an at::Tensor.\n+#include <Python.h>\n \n-#include <mutex>\n-#include <memory>\n-#include <vector>\n-#include <functional>\n-#include <ATen/ATen.h>\n-\n-#include \"torch/csrc/assertions.h\"\n-#include \"torch/csrc/jit/ir.h\"\n-#include \"torch/csrc/jit/tracer_state.h\"\n+#include \"torch/csrc/autograd/edge.h\"\n #include \"torch/csrc/autograd/function_hook.h\"\n-#include \"torch/csrc/utils/auto_unique_ptr.h\"\n #include \"torch/csrc/autograd/variable_version.h\"\n-#include \"torch/csrc/autograd/edge.h\"\n-#include \"torch/csrc/Types.h\"\n+#include \"torch/csrc/jit/tracer_state.h\"\n+#include \"torch/csrc/utils/auto_unique_ptr.h\"\n+\n+#include <ATen/Scalar.h>\n+#include <ATen/ScalarType.h>\n+#include <ATen/Storage.h>\n+#include <ATen/Tensor.h>\n+#include <ATen/TensorImpl.h>\n+#include <ATen/Type.h>\n+\n+#include <list>\n+#include <memory>\n+#include <mutex>\n+#include <string>\n+#include <vector>\n \n namespace torch { namespace autograd {\n \n-using at::Tensor;\n-struct VariableImpl;\n+struct Function;\n+\n+//===----------------------------------------------------------------------===//\n+//                                Variable\n+//===----------------------------------------------------------------------===//\n+\n+/// A `Variable` augments a `Tensor` with the ability to interact in our\n+/// autograd machinery. `Variable` inherits from `Tensor` and may be converted\n+/// to and from `Tensor` implicitly.\n+class Variable : public at::Tensor {", "path": "torch/csrc/autograd/variable.h", "position": null, "original_position": 51, "commit_id": "eba1e177795cddcd1971096dbccdcd81e0dcd773", "original_commit_id": "2770506f74aa5bd4f0a6c4a3dee541a6e8e4250c", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "I'd rather stick to our current conventions instead of changing them. Having some types as `struct`s and other as `class`es is very annoying, because you have to remember which are which when forward declaring them, friending, etc. I'd rather keep them as `struct`s to be consistent", "created_at": "2018-02-08T12:16:51Z", "updated_at": "2018-11-23T15:39:23Z", "html_url": "https://github.com/pytorch/pytorch/pull/5127#discussion_r166916354", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/5127", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/166916354"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/5127#discussion_r166916354"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/5127"}}, "body_html": "<p>I'd rather stick to our current conventions instead of changing them. Having some types as <code>struct</code>s and other as <code>class</code>es is very annoying, because you have to remember which are which when forward declaring them, friending, etc. I'd rather keep them as <code>struct</code>s to be consistent</p>", "body_text": "I'd rather stick to our current conventions instead of changing them. Having some types as structs and other as classes is very annoying, because you have to remember which are which when forward declaring them, friending, etc. I'd rather keep them as structs to be consistent", "in_reply_to_id": 166790586}