{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/166792868", "pull_request_review_id": 94906614, "id": 166792868, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2Njc5Mjg2OA==", "diff_hunk": "@@ -1,102 +1,140 @@\n-#include \"Python.h\"\n #include \"torch/csrc/autograd/variable.h\"\n \n #include \"torch/csrc/assertions.h\"\n-#include \"torch/csrc/autograd/generated/VariableType.h\"\n-#include \"torch/csrc/autograd/generated/Functions.h\"\n+#include \"torch/csrc/autograd/edge.h\"\n+#include \"torch/csrc/autograd/function.h\"\n #include \"torch/csrc/autograd/functions/accumulate_grad.h\"\n #include \"torch/csrc/autograd/functions/tensor.h\"\n-\n+#include \"torch/csrc/autograd/generated/Functions.h\"\n+#include \"torch/csrc/autograd/generated/VariableType.h\"\n+#include \"torch/csrc/autograd/variable_version.h\"\n+#include \"torch/csrc/jit/tracer_state.h\"\n+#include \"torch/csrc/utils/auto_unique_ptr.h\"\n+\n+#include <ATen/Scalar.h>\n+#include <ATen/ScalarType.h>\n+#include <ATen/Storage.h>\n+#include <ATen/Tensor.h>\n+#include <ATen/TensorImpl.h>\n+#include <ATen/Type.h>\n+\n+#include <list>\n #include <memory>\n-\n-using namespace at;\n+#include <mutex>\n+#include <stdexcept>\n+#include <string>\n+#include <vector>\n \n namespace torch { namespace autograd {\n-\n-Variable make_variable(at::Tensor data, std::shared_ptr<Function> grad_fn) {\n-  // TODO: If you ever want to support returning an undefined tensor from\n-  // a function, you'll have to uncomment the line below.  Not sure if\n-  // we actually want to support this.\n-  // if (!data.defined()) return Variable();\n-  TORCH_ASSERT(grad_fn);\n-  int output_nr = grad_fn->num_inputs++;\n-  return make_variable(std::move(data), output_nr, std::move(grad_fn));\n-}\n-\n-VariableImpl::VariableImpl(Tensor data_, bool requires_grad, int output_nr, std::shared_ptr<Function> grad_fn)\n-  : TensorImpl(VariableType::getType(data_))\n-  , data(std::move(data_))\n-  , grad()\n-  , _grad_fn(std::move(grad_fn))\n-  , version_counter()\n-  , _requires_grad(requires_grad)\n-  , is_view(false)\n-  , output_nr(output_nr)\n-  , pyobj(nullptr) {\n-  TORCH_ASSERTM(!_grad_fn || !_requires_grad, \"_requires_grad should be false if grad_fn is set\");\n+namespace {\n+at::Tensor handle_scalars(at::Tensor& data) {\n+#ifndef WITH_SCALARS\n+  if (data.dim() == 0) {\n+    // Don't expose 0-dim tensors to Variable API.\n+    return data.as_strided_({1}, {1});\n+  }\n+#endif\n+  return data;\n+}\n+} // namespace\n+\n+Variable::Impl::Impl(at::Tensor data_, bool requires_grad_, Edge gradient_edge)\n+    : TensorImpl(VariableType::getType(data_)),\n+      data(std::move(data_)),\n+      grad_fn(std::move(gradient_edge.function)),\n+      requires_grad(requires_grad_),\n+      output_nr(gradient_edge.input_nr) {", "path": "torch/csrc/autograd/variable.cpp", "position": null, "original_position": 74, "commit_id": "eba1e177795cddcd1971096dbccdcd81e0dcd773", "original_commit_id": "2770506f74aa5bd4f0a6c4a3dee541a6e8e4250c", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "I don't feel like having initialization of some fields specified in the header, while others mentioned here is a good idea. It makes it very easy to forget to initialize a certain fields, especially that those structs are very complicated.", "created_at": "2018-02-07T23:41:33Z", "updated_at": "2018-11-23T15:39:20Z", "html_url": "https://github.com/pytorch/pytorch/pull/5127#discussion_r166792868", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/5127", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/166792868"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/5127#discussion_r166792868"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/5127"}}, "body_html": "<p>I don't feel like having initialization of some fields specified in the header, while others mentioned here is a good idea. It makes it very easy to forget to initialize a certain fields, especially that those structs are very complicated.</p>", "body_text": "I don't feel like having initialization of some fields specified in the header, while others mentioned here is a good idea. It makes it very easy to forget to initialize a certain fields, especially that those structs are very complicated."}