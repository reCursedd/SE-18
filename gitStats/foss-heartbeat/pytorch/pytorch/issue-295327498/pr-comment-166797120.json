{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/166797120", "pull_request_review_id": 94917512, "id": 166797120, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2Njc5NzEyMA==", "diff_hunk": "@@ -1,150 +1,255 @@\n #pragma once\n \n-// A wrapper around at::Tensor to represent autograd Variables. Variables\n-// can be implicitly converted to an at::Tensor.\n+#include <Python.h>\n \n-#include <mutex>\n-#include <memory>\n-#include <vector>\n-#include <functional>\n-#include <ATen/ATen.h>\n-\n-#include \"torch/csrc/assertions.h\"\n-#include \"torch/csrc/jit/ir.h\"\n-#include \"torch/csrc/jit/tracer_state.h\"\n+#include \"torch/csrc/autograd/edge.h\"\n #include \"torch/csrc/autograd/function_hook.h\"\n-#include \"torch/csrc/utils/auto_unique_ptr.h\"\n #include \"torch/csrc/autograd/variable_version.h\"\n-#include \"torch/csrc/autograd/edge.h\"\n-#include \"torch/csrc/Types.h\"\n+#include \"torch/csrc/jit/tracer_state.h\"\n+#include \"torch/csrc/utils/auto_unique_ptr.h\"\n+\n+#include <ATen/Scalar.h>\n+#include <ATen/ScalarType.h>\n+#include <ATen/Storage.h>\n+#include <ATen/Tensor.h>\n+#include <ATen/TensorImpl.h>\n+#include <ATen/Type.h>\n+\n+#include <list>\n+#include <memory>\n+#include <mutex>\n+#include <string>\n+#include <vector>\n \n namespace torch { namespace autograd {\n \n-using at::Tensor;\n-struct VariableImpl;\n+struct Function;\n+\n+//===----------------------------------------------------------------------===//\n+//                                Variable\n+//===----------------------------------------------------------------------===//\n+\n+/// A `Variable` augments a `Tensor` with the ability to interact in our\n+/// autograd machinery. `Variable` inherits from `Tensor` and may be converted\n+/// to and from `Tensor` implicitly.\n+class Variable : public at::Tensor {", "path": "torch/csrc/autograd/variable.h", "position": null, "original_position": 51, "commit_id": "eba1e177795cddcd1971096dbccdcd81e0dcd773", "original_commit_id": "2770506f74aa5bd4f0a6c4a3dee541a6e8e4250c", "user": {"login": "goldsborough", "id": 6429851, "node_id": "MDQ6VXNlcjY0Mjk4NTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/6429851?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goldsborough", "html_url": "https://github.com/goldsborough", "followers_url": "https://api.github.com/users/goldsborough/followers", "following_url": "https://api.github.com/users/goldsborough/following{/other_user}", "gists_url": "https://api.github.com/users/goldsborough/gists{/gist_id}", "starred_url": "https://api.github.com/users/goldsborough/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goldsborough/subscriptions", "organizations_url": "https://api.github.com/users/goldsborough/orgs", "repos_url": "https://api.github.com/users/goldsborough/repos", "events_url": "https://api.github.com/users/goldsborough/events{/privacy}", "received_events_url": "https://api.github.com/users/goldsborough/received_events", "type": "User", "site_admin": false}, "body": "In most codebases `class` is used when `public` and `private` fields are used, to denote that this class/structure represents an abstraction, while `struct`s are used to signify a plain-old datatype, basically a pure data struct, with few methods and all fields exposed ([reference](https://stackoverflow.com/questions/54585/when-should-you-use-a-class-vs-a-struct-in-c)). I felt like using the same idiom in our codebase would be nice, and I was going to rename `Function` into a class next as I brush it up too. But I can change it to `struct`. What do you think?", "created_at": "2018-02-08T00:06:05Z", "updated_at": "2018-11-23T15:39:20Z", "html_url": "https://github.com/pytorch/pytorch/pull/5127#discussion_r166797120", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/5127", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/166797120"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/5127#discussion_r166797120"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/5127"}}, "body_html": "<p>In most codebases <code>class</code> is used when <code>public</code> and <code>private</code> fields are used, to denote that this class/structure represents an abstraction, while <code>struct</code>s are used to signify a plain-old datatype, basically a pure data struct, with few methods and all fields exposed (<a href=\"https://stackoverflow.com/questions/54585/when-should-you-use-a-class-vs-a-struct-in-c\" rel=\"nofollow\">reference</a>). I felt like using the same idiom in our codebase would be nice, and I was going to rename <code>Function</code> into a class next as I brush it up too. But I can change it to <code>struct</code>. What do you think?</p>", "body_text": "In most codebases class is used when public and private fields are used, to denote that this class/structure represents an abstraction, while structs are used to signify a plain-old datatype, basically a pure data struct, with few methods and all fields exposed (reference). I felt like using the same idiom in our codebase would be nice, and I was going to rename Function into a class next as I brush it up too. But I can change it to struct. What do you think?", "in_reply_to_id": 166790586}