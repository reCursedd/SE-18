{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/166796685", "pull_request_review_id": 94916989, "id": 166796685, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2Njc5NjY4NQ==", "diff_hunk": "@@ -106,52 +144,84 @@ VariableViewImpl::VariableViewImpl(Variable base_, at::Tensor data_, int output_\n   attr_version = version_counter.current_version();\n }\n \n-std::shared_ptr<Function>& VariableViewImpl::get_grad_fn() {\n+std::shared_ptr<Function>& Variable::ViewImpl::get_grad_fn() {\n   std::lock_guard<std::mutex> lock(mutex);\n-  if (!_grad_fn && !base.requires_grad()) {\n-    return _grad_fn;\n+  if (!grad_fn && !base.requires_grad()) {\n+    return grad_fn;\n   }\n   auto current_version = version_counter.current_version();\n   if (attr_version != current_version) {\n     TORCH_ASSERT(output_nr == 0);\n     auto fn = std::make_shared<generated::AsStridedBackward>();\n-    fn->self_geometry = TensorGeometry(base);\n+    fn->self_geometry = at::TensorGeometry(base);\n     fn->size = sizes();\n     fn->stride = strides();\n     fn->storage_offset = data.storage_offset();\n     fn->set_next_functions(get_next_functions(base));\n     fn->num_inputs = 1;\n-    _grad_fn = std::move(fn);\n+    grad_fn = std::move(fn);\n     attr_version = current_version;\n   }\n-  return _grad_fn;\n+  return grad_fn;\n }\n \n-void VariableViewImpl::rebase_history(int output_nr, std::shared_ptr<Function> grad_fn) {\n+void Variable::ViewImpl::rebase_history(\n+    int output_nr,\n+    std::shared_ptr<Function> grad_fn) {\n   TORCH_ASSERT(output_nr == 0);\n   TORCH_ASSERT(grad_fn);\n-  TORCH_ASSERTM(grad_fn->num_inputs == 1, \"Functions which modify views in-place must return a single Variable\");\n+  TORCH_ASSERTM(\n+      grad_fn->num_inputs == 1,\n+      \"Functions which modify views in-place must return a single Variable\");\n   this->output_nr = output_nr;\n-  base.output_nr() = 0;\n-  base.get()->_grad_fn = std::make_shared<CopySlices>(\n-      base, TensorGeometry(data), std::move(grad_fn));\n-  get_grad_fn();  // trigger an update to the view's grad_fn\n+  auto copy_slices = std::make_shared<CopySlices>(\n+      base, at::TensorGeometry(data), std::move(grad_fn));\n+  base.set_gradient_edge({std::move(copy_slices), 0});\n+  get_grad_fn(); // trigger an update to the view's grad_fn\n+}\n+\n+Variable::Impl* Variable::get() const {\n+  return static_cast<Variable::Impl*>(pImpl);\n+}\n+\n+void Variable::rebase_history(\n+    int output_nr,\n+    std::shared_ptr<Function> grad_fn) {\n+  TORCH_ASSERT(grad_fn);\n+  if (is_view()) {\n+    auto& impl = static_cast<Variable::ViewImpl&>(*get());\n+    impl.rebase_history(output_nr, std::move(grad_fn));\n+  } else {\n+    get()->output_nr = output_nr;\n+    get()->grad_fn = std::move(grad_fn);\n+  }\n+}\n+\n+bool Variable::requires_grad() const noexcept {\n+  return get()->requires_grad || get()->grad_fn ||\n+      (is_view() && base().requires_grad());", "path": "torch/csrc/autograd/variable.cpp", "position": null, "original_position": 259, "commit_id": "eba1e177795cddcd1971096dbccdcd81e0dcd773", "original_commit_id": "2770506f74aa5bd4f0a6c4a3dee541a6e8e4250c", "user": {"login": "goldsborough", "id": 6429851, "node_id": "MDQ6VXNlcjY0Mjk4NTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/6429851?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goldsborough", "html_url": "https://github.com/goldsborough", "followers_url": "https://api.github.com/users/goldsborough/followers", "following_url": "https://api.github.com/users/goldsborough/following{/other_user}", "gists_url": "https://api.github.com/users/goldsborough/gists{/gist_id}", "starred_url": "https://api.github.com/users/goldsborough/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goldsborough/subscriptions", "organizations_url": "https://api.github.com/users/goldsborough/orgs", "repos_url": "https://api.github.com/users/goldsborough/repos", "events_url": "https://api.github.com/users/goldsborough/events{/privacy}", "received_events_url": "https://api.github.com/users/goldsborough/received_events", "type": "User", "site_admin": false}, "body": "My bad, will put back.", "created_at": "2018-02-08T00:03:16Z", "updated_at": "2018-11-23T15:39:20Z", "html_url": "https://github.com/pytorch/pytorch/pull/5127#discussion_r166796685", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/5127", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/166796685"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/5127#discussion_r166796685"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/5127"}}, "body_html": "<p>My bad, will put back.</p>", "body_text": "My bad, will put back.", "in_reply_to_id": 166793597}