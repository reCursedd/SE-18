{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/166835899", "pull_request_review_id": 94960646, "id": 166835899, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NjgzNTg5OQ==", "diff_hunk": "@@ -207,49 +207,35 @@ static std::vector<SavedVariable> make_saved_variable_list(TensorList tensors) {\n       return SavedVariable{tensor, false /* is output */}; });\n }\n \n-static Tensor as_variable(Tensor tensor) {\n-  return make_variable(std::move(tensor));\n-}\n-\n-static std::tuple<Tensor, Tensor>\n-as_variable(std::tuple<Tensor, Tensor> tensors) {\n-  return std::make_tuple<>(\n-      make_variable(std::move(std::get<0>(tensors))),\n-      make_variable(std::move(std::get<1>(tensors))));\n+template <typename... Tensors, size_t... Is>\n+std::tuple<Tensors...> as_variable_impl(\n+    std::tuple<Tensors...> tensors,\n+    Indices<Is...>) {\n+  // Expand the integer parameter pack into a sequence of Variable\n+  // constructions. This turns into (boolean omitted):\n+  // Variable(std::get<0>(tensors)), Variable(std::get<1>(tensors)), ...\n+  return std::tuple<Tensors...>(\n+      Variable(std::get<Is>(tensors), /*requires_grad=*/false)...);\n }\n \n-static std::tuple<Tensor, Tensor, Tensor>\n-as_variable(std::tuple<Tensor, Tensor, Tensor> tensors) {\n-  return std::make_tuple<>(\n-      make_variable(std::move(std::get<0>(tensors))),\n-      make_variable(std::move(std::get<1>(tensors))),\n-      make_variable(std::move(std::get<2>(tensors))));\n+template <typename... Tensors>\n+std::tuple<Tensors...> as_variable(std::tuple<Tensors...> tensors) {\n+  // `sizeof...(Tensors)` gets us the size of the `Tensors` parameter pack at\n+  // compile time. We use it to parameterize a `MakeIndices` class, which will\n+  // expand into an Indices object containing the numbers 0 to\n+  // sizeof...(Tensors) - 1.\n+  return as_variable_impl(\n+      tensors, typename MakeIndices<sizeof...(Tensors)>::indices());\n }", "path": "tools/autograd/templates/VariableType.cpp", "position": 72, "original_position": 63, "commit_id": "eba1e177795cddcd1971096dbccdcd81e0dcd773", "original_commit_id": "088215bd4f82e8f84d8a56bbc553e0e71b2afcf5", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "TuplePacker in `tools/jit/templates/aten_dispatch.cpp` will also benefit from indices machinery.", "created_at": "2018-02-08T05:30:01Z", "updated_at": "2018-11-23T15:39:22Z", "html_url": "https://github.com/pytorch/pytorch/pull/5127#discussion_r166835899", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/5127", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/166835899"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/5127#discussion_r166835899"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/5127"}}, "body_html": "<p>TuplePacker in <code>tools/jit/templates/aten_dispatch.cpp</code> will also benefit from indices machinery.</p>", "body_text": "TuplePacker in tools/jit/templates/aten_dispatch.cpp will also benefit from indices machinery."}