{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/167656910", "pull_request_review_id": 95907220, "id": 167656910, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NzY1NjkxMA==", "diff_hunk": "@@ -1,49 +1,61 @@\n #include \"torch/csrc/autograd/saved_variable.h\"\n \n #include \"torch/csrc/autograd/function.h\"\n+#include \"torch/csrc/autograd/variable.h\"\n+#include \"torch/csrc/autograd/edge.h\"\n+#include \"torch/csrc/jit/tracer_state.h\"\n \n-using namespace at;\n+#include <ATen/Tensor.h>\n \n-namespace torch { namespace autograd {\n+#include <cstdint>\n+#include <list>\n+#include <memory>\n \n-SavedVariable::SavedVariable(const Variable& variable, bool is_output)\n-  : SavedVariable() {\n+namespace torch {\n+namespace autograd {\n+\n+SavedVariable::SavedVariable(const Variable& variable, bool is_output) {\n   if (!variable.defined()) {\n     return;\n   }\n-  data = variable.data();\n-  requires_grad = variable.requires_grad();\n-  expected_version = variable.current_version();\n-  version = variable.get()->version_counter.save();\n-  has_grad_fn = !variable.is_leaf();\n-  output_nr = variable.output_nr();\n-  if (!has_grad_fn) {\n-    grad_accumulator = variable.grad_accumulator();\n+  was_default_constructed_ = false;\n+\n+  data_ = variable.data();\n+  requires_grad_ = variable.requires_grad();\n+  version_counter_ = variable.version_counter();\n+  saved_version_ = version_counter_.current_version();\n+  has_grad_fn_ = !variable.is_leaf();\n+  output_nr_ = variable.output_nr();\n+  if (!has_grad_fn_) {\n+    grad_accumulator_ = variable.grad_accumulator();\n   }\n   if (!is_output) {\n-    _grad_fn = variable.grad_fn();\n+    grad_fn_ = variable.grad_fn();\n   }\n-  if (variable.tracing_state()) {\n-    tracing_state.reset(new jit::tracer::ValueTracingState(*variable.tracing_state()));\n+  if (variable.has_tracing_state()) {\n+    tracing_state_.reset(\n+        new jit::tracer::ValueTracingState(variable.tracing_state()));\n   }\n }\n \n-auto SavedVariable::unpack(std::shared_ptr<Function> saved_for) const -> Variable {\n-  if (!data.defined()) {\n-    if (version.defined()) {\n+SavedVariable::~SavedVariable() = default;\n+\n+Variable SavedVariable::unpack(std::shared_ptr<Function> saved_for) const {\n+  if (!data_.defined()) {\n+    if (!was_default_constructed_) {", "path": "torch/csrc/autograd/saved_variable.cpp", "position": null, "original_position": 63, "commit_id": "eba1e177795cddcd1971096dbccdcd81e0dcd773", "original_commit_id": "2770506f74aa5bd4f0a6c4a3dee541a6e8e4250c", "user": {"login": "goldsborough", "id": 6429851, "node_id": "MDQ6VXNlcjY0Mjk4NTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/6429851?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goldsborough", "html_url": "https://github.com/goldsborough", "followers_url": "https://api.github.com/users/goldsborough/followers", "following_url": "https://api.github.com/users/goldsborough/following{/other_user}", "gists_url": "https://api.github.com/users/goldsborough/gists{/gist_id}", "starred_url": "https://api.github.com/users/goldsborough/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goldsborough/subscriptions", "organizations_url": "https://api.github.com/users/goldsborough/orgs", "repos_url": "https://api.github.com/users/goldsborough/repos", "events_url": "https://api.github.com/users/goldsborough/events{/privacy}", "received_events_url": "https://api.github.com/users/goldsborough/received_events", "type": "User", "site_admin": false}, "body": "From the viewpoint of the rest of the code the relationships are still the same. I just turned the `SavedVersion` struct into a `uint32_t`. `SavedVersion` previously had a back-reference to the `VariableVersion` so that it could:\r\n1. check if the version it stored differs from the current version of the `VariableVersion` it references. This has been replaced by the `saved_version_ != version_counter_.current_version()` that is now in `SavedVariable` and\r\n2. check if the `SavedVersion` is `defined()` (by checking if the `version_block_` of the `VariableVersion` it references is `nullptr`). Since `VariableVersion` always has a non-`nullptr` `version_block`, the latter would only be the case if `SavedVersion` was default-constructed. In turn, it would only be default-constructed if the `SavedVariable` was default constructed. So I replaced this whole behavior with the `was_default_constructed` boolean.\r\nAt that point the `VariableVersion` back-reference inside `SavedVersion` could be removed, leaving `SavedVersion` containing only a single integer, which I turned into a plain integer.\r\nThis was an implementation detail of `SavedVariable` and `VariableVersion`, so the rest of the code will still construct `SavedVariable`s from `Variable`s as before.", "created_at": "2018-02-12T19:13:16Z", "updated_at": "2018-11-23T15:39:29Z", "html_url": "https://github.com/pytorch/pytorch/pull/5127#discussion_r167656910", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/5127", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/167656910"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/5127#discussion_r167656910"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/5127"}}, "body_html": "<p>From the viewpoint of the rest of the code the relationships are still the same. I just turned the <code>SavedVersion</code> struct into a <code>uint32_t</code>. <code>SavedVersion</code> previously had a back-reference to the <code>VariableVersion</code> so that it could:</p>\n<ol>\n<li>check if the version it stored differs from the current version of the <code>VariableVersion</code> it references. This has been replaced by the <code>saved_version_ != version_counter_.current_version()</code> that is now in <code>SavedVariable</code> and</li>\n<li>check if the <code>SavedVersion</code> is <code>defined()</code> (by checking if the <code>version_block_</code> of the <code>VariableVersion</code> it references is <code>nullptr</code>). Since <code>VariableVersion</code> always has a non-<code>nullptr</code> <code>version_block</code>, the latter would only be the case if <code>SavedVersion</code> was default-constructed. In turn, it would only be default-constructed if the <code>SavedVariable</code> was default constructed. So I replaced this whole behavior with the <code>was_default_constructed</code> boolean.<br>\nAt that point the <code>VariableVersion</code> back-reference inside <code>SavedVersion</code> could be removed, leaving <code>SavedVersion</code> containing only a single integer, which I turned into a plain integer.<br>\nThis was an implementation detail of <code>SavedVariable</code> and <code>VariableVersion</code>, so the rest of the code will still construct <code>SavedVariable</code>s from <code>Variable</code>s as before.</li>\n</ol>", "body_text": "From the viewpoint of the rest of the code the relationships are still the same. I just turned the SavedVersion struct into a uint32_t. SavedVersion previously had a back-reference to the VariableVersion so that it could:\n\ncheck if the version it stored differs from the current version of the VariableVersion it references. This has been replaced by the saved_version_ != version_counter_.current_version() that is now in SavedVariable and\ncheck if the SavedVersion is defined() (by checking if the version_block_ of the VariableVersion it references is nullptr). Since VariableVersion always has a non-nullptr version_block, the latter would only be the case if SavedVersion was default-constructed. In turn, it would only be default-constructed if the SavedVariable was default constructed. So I replaced this whole behavior with the was_default_constructed boolean.\nAt that point the VariableVersion back-reference inside SavedVersion could be removed, leaving SavedVersion containing only a single integer, which I turned into a plain integer.\nThis was an implementation detail of SavedVariable and VariableVersion, so the rest of the code will still construct SavedVariables from Variables as before.", "in_reply_to_id": 166791976}