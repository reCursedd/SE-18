{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/166844719", "pull_request_review_id": 94970510, "id": 166844719, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2Njg0NDcxOQ==", "diff_hunk": "@@ -84,4 +89,23 @@ inline size_t count_variables(Args&&... args) {\n   return CountVariables().apply(std::forward<Args>(args)...).out;\n }\n \n+//===----------------------------------------------------------------------===//\n+//                std::index_sequence shim for C++11\n+//===----------------------------------------------------------------------===//\n+\n+// A container of type-template parameter indices.", "path": "torch/csrc/utils/variadic.h", "position": 20, "original_position": 20, "commit_id": "eba1e177795cddcd1971096dbccdcd81e0dcd773", "original_commit_id": "2770506f74aa5bd4f0a6c4a3dee541a6e8e4250c", "user": {"login": "goldsborough", "id": 6429851, "node_id": "MDQ6VXNlcjY0Mjk4NTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/6429851?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goldsborough", "html_url": "https://github.com/goldsborough", "followers_url": "https://api.github.com/users/goldsborough/followers", "following_url": "https://api.github.com/users/goldsborough/following{/other_user}", "gists_url": "https://api.github.com/users/goldsborough/gists{/gist_id}", "starred_url": "https://api.github.com/users/goldsborough/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goldsborough/subscriptions", "organizations_url": "https://api.github.com/users/goldsborough/orgs", "repos_url": "https://api.github.com/users/goldsborough/repos", "events_url": "https://api.github.com/users/goldsborough/events{/privacy}", "received_events_url": "https://api.github.com/users/goldsborough/received_events", "type": "User", "site_admin": false}, "body": "I came up with this myself (I've done a fair amount of template metaprogramming in the past). `std::index_sequence` will amount to the same thing, but it's implemented far more trivially (you can [see it here](https://github.com/llvm-mirror/libcxx/blob/5b12e3bdb43ac545206501fae955b37cef0c7475/include/utility#L839)) because in C++14 you have templatized typedefs. The core idea is to get a type with a variadic list of integers so that you can grab them with `size_t... Is` in a template parameter list and then use them in a pack expansion", "created_at": "2018-02-08T06:51:53Z", "updated_at": "2018-11-23T15:39:23Z", "html_url": "https://github.com/pytorch/pytorch/pull/5127#discussion_r166844719", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/5127", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/166844719"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/5127#discussion_r166844719"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/5127"}}, "body_html": "<p>I came up with this myself (I've done a fair amount of template metaprogramming in the past). <code>std::index_sequence</code> will amount to the same thing, but it's implemented far more trivially (you can <a href=\"https://github.com/llvm-mirror/libcxx/blob/5b12e3bdb43ac545206501fae955b37cef0c7475/include/utility#L839\">see it here</a>) because in C++14 you have templatized typedefs. The core idea is to get a type with a variadic list of integers so that you can grab them with <code>size_t... Is</code> in a template parameter list and then use them in a pack expansion</p>", "body_text": "I came up with this myself (I've done a fair amount of template metaprogramming in the past). std::index_sequence will amount to the same thing, but it's implemented far more trivially (you can see it here) because in C++14 you have templatized typedefs. The core idea is to get a type with a variadic list of integers so that you can grab them with size_t... Is in a template parameter list and then use them in a pack expansion", "in_reply_to_id": 166790528}