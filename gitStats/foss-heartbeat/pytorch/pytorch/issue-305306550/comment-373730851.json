{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/373730851", "html_url": "https://github.com/pytorch/pytorch/pull/5788#issuecomment-373730851", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/5788", "id": 373730851, "node_id": "MDEyOklzc3VlQ29tbWVudDM3MzczMDg1MQ==", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "created_at": "2018-03-16T14:30:40Z", "updated_at": "2018-03-16T14:30:40Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Yes, I know exactly what the ASAN problem is. Look at the bottom of <code>build.sh</code> here:</p>\n<pre><code>if [[ \"$BUILD_ENVIRONMENT\" == *asan* ]]; then\n  export ASAN_OPTIONS=detect_leaks=0:symbolize=1\n  # Disable Valgrind tests in run_aten_tests.sh; otherwise\n  # we'll be valgrind'ing an ASAN'ed binary!  ASANity.\n  export VALGRIND=0\n\n  sudo apt-get update\n  sudo apt-get install clang-5.0\n\n  export PATH=\"/usr/lib/llvm-5.0/bin:$PATH\"\n\n  # TODO: Figure out how to avoid hard-coding these paths\n  LD_LIBRARY_PATH=/usr/lib/llvm-5.0/lib/clang/5.0.0/lib/linux \\\n    CC=\"sccache clang\" \\\n    CXX=\"sccache clang++\" \\\n    LDSHARED=\"clang --shared\" \\\n    LDFLAGS=\"-stdlib=libstdc++\" \\\n    CFLAGS=\"-fsanitize=address -shared-libasan\" \\\n    NO_CUDA=1 \\\n    python setup.py install\n\n  export LD_PRELOAD=/usr/lib/llvm-5.0/lib/clang/5.0.0/lib/linux/libclang_rt.asan-x86_64.so\n\nelse\n  python setup.py install\n\nfi\n</code></pre>\n<p>To ensure that the build smoketests properly load the ASAN runtime, we are fucking around with <code>LD_PRELOAD</code>. But your code is building with gcc, not clang. That's not right, and linking in clang's ASAN runtime is definitely bad juju.</p>\n<p>I think the right thing to do is to make sure libtorch gets built with clang, and with ASAN. That means figuring out how to apply the flags in the invocation above to the cmake invocation, and also doing the build BEFORE we run the <code>LD_PRELOAD</code>. Another way we can make things safer is if we make the <code>LD_PRELOAD</code> opt-in for commands and then manually reapply it in the necessary cases (I <em>think</em> it was necessary in all of the cases, but not sure.)</p>", "body_text": "Yes, I know exactly what the ASAN problem is. Look at the bottom of build.sh here:\nif [[ \"$BUILD_ENVIRONMENT\" == *asan* ]]; then\n  export ASAN_OPTIONS=detect_leaks=0:symbolize=1\n  # Disable Valgrind tests in run_aten_tests.sh; otherwise\n  # we'll be valgrind'ing an ASAN'ed binary!  ASANity.\n  export VALGRIND=0\n\n  sudo apt-get update\n  sudo apt-get install clang-5.0\n\n  export PATH=\"/usr/lib/llvm-5.0/bin:$PATH\"\n\n  # TODO: Figure out how to avoid hard-coding these paths\n  LD_LIBRARY_PATH=/usr/lib/llvm-5.0/lib/clang/5.0.0/lib/linux \\\n    CC=\"sccache clang\" \\\n    CXX=\"sccache clang++\" \\\n    LDSHARED=\"clang --shared\" \\\n    LDFLAGS=\"-stdlib=libstdc++\" \\\n    CFLAGS=\"-fsanitize=address -shared-libasan\" \\\n    NO_CUDA=1 \\\n    python setup.py install\n\n  export LD_PRELOAD=/usr/lib/llvm-5.0/lib/clang/5.0.0/lib/linux/libclang_rt.asan-x86_64.so\n\nelse\n  python setup.py install\n\nfi\n\nTo ensure that the build smoketests properly load the ASAN runtime, we are fucking around with LD_PRELOAD. But your code is building with gcc, not clang. That's not right, and linking in clang's ASAN runtime is definitely bad juju.\nI think the right thing to do is to make sure libtorch gets built with clang, and with ASAN. That means figuring out how to apply the flags in the invocation above to the cmake invocation, and also doing the build BEFORE we run the LD_PRELOAD. Another way we can make things safer is if we make the LD_PRELOAD opt-in for commands and then manually reapply it in the necessary cases (I think it was necessary in all of the cases, but not sure.)", "body": "Yes, I know exactly what the ASAN problem is. Look at the bottom of `build.sh` here:\r\n\r\n```\r\nif [[ \"$BUILD_ENVIRONMENT\" == *asan* ]]; then\r\n  export ASAN_OPTIONS=detect_leaks=0:symbolize=1\r\n  # Disable Valgrind tests in run_aten_tests.sh; otherwise\r\n  # we'll be valgrind'ing an ASAN'ed binary!  ASANity.\r\n  export VALGRIND=0\r\n\r\n  sudo apt-get update\r\n  sudo apt-get install clang-5.0\r\n\r\n  export PATH=\"/usr/lib/llvm-5.0/bin:$PATH\"\r\n\r\n  # TODO: Figure out how to avoid hard-coding these paths\r\n  LD_LIBRARY_PATH=/usr/lib/llvm-5.0/lib/clang/5.0.0/lib/linux \\\r\n    CC=\"sccache clang\" \\\r\n    CXX=\"sccache clang++\" \\\r\n    LDSHARED=\"clang --shared\" \\\r\n    LDFLAGS=\"-stdlib=libstdc++\" \\\r\n    CFLAGS=\"-fsanitize=address -shared-libasan\" \\\r\n    NO_CUDA=1 \\\r\n    python setup.py install\r\n\r\n  export LD_PRELOAD=/usr/lib/llvm-5.0/lib/clang/5.0.0/lib/linux/libclang_rt.asan-x86_64.so\r\n\r\nelse\r\n  python setup.py install\r\n\r\nfi\r\n```\r\n\r\nTo ensure that the build smoketests properly load the ASAN runtime, we are fucking around with `LD_PRELOAD`. But your code is building with gcc, not clang. That's not right, and linking in clang's ASAN runtime is definitely bad juju.\r\n\r\nI think the right thing to do is to make sure libtorch gets built with clang, and with ASAN. That means figuring out how to apply the flags in the invocation above to the cmake invocation, and also doing the build BEFORE we run the `LD_PRELOAD`. Another way we can make things safer is if we make the `LD_PRELOAD` opt-in for commands and then manually reapply it in the necessary cases (I *think* it was necessary in all of the cases, but not sure.)"}