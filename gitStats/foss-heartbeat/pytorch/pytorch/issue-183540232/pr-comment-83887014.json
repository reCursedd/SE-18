{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/83887014", "pull_request_review_id": 4700284, "id": 83887014, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgzODg3MDE0", "diff_hunk": "@@ -134,27 +146,30 @@ def __getstate__(self):\n         # but signalling the end is tricky without a non-blocking API\n         raise NotImplementedError(\"DataLoaderIterator cannot be pickled\")\n \n-    def _joinWorkers(self):\n-        self.joined = True\n-        if self.num_workers:\n-            [self.index_queue.put(None) for x in self.workers]\n-            [x.join() for x in self.workers]\n+    def _shutdown_workers(self):\n+        if not self.shutdown:\n+            self.shutdown = True\n+            for _ in self.workers:\n+                self.index_queue.put(None)", "path": "torch/utils/data/dataloader.py", "position": 194, "original_position": 195, "commit_id": "0ece591a9d5b1fc295bf33814eacb5f411a37c32", "original_commit_id": "cdf0e0e777a9a2255d8c3d60bcf6e482ab6720a1", "user": {"login": "colesbury", "id": 655866, "node_id": "MDQ6VXNlcjY1NTg2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/655866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colesbury", "html_url": "https://github.com/colesbury", "followers_url": "https://api.github.com/users/colesbury/followers", "following_url": "https://api.github.com/users/colesbury/following{/other_user}", "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions", "organizations_url": "https://api.github.com/users/colesbury/orgs", "repos_url": "https://api.github.com/users/colesbury/repos", "events_url": "https://api.github.com/users/colesbury/events{/privacy}", "received_events_url": "https://api.github.com/users/colesbury/received_events", "type": "User", "site_admin": false}, "body": "A similar issue we had in Lua Torch (which can also happen in Python), when an exception is raised, some object's destructors can be called **before** the error message is printed. A deadlock preventing you from seeing the real issue is really annoying.\n\nIn general, I think it's a bad pattern to do any work that can block in a `__del__` method.\n\nFWIW, I added a test case to test_multiprocessing.py to ensure that the sub processes exit in the normal case.\n", "created_at": "2016-10-18T15:51:56Z", "updated_at": "2018-11-23T15:31:45Z", "html_url": "https://github.com/pytorch/pytorch/pull/135#discussion_r83887014", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/135", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/83887014"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/135#discussion_r83887014"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/135"}}, "body_html": "<p>A similar issue we had in Lua Torch (which can also happen in Python), when an exception is raised, some object's destructors can be called <strong>before</strong> the error message is printed. A deadlock preventing you from seeing the real issue is really annoying.</p>\n<p>In general, I think it's a bad pattern to do any work that can block in a <code>__del__</code> method.</p>\n<p>FWIW, I added a test case to test_multiprocessing.py to ensure that the sub processes exit in the normal case.</p>", "body_text": "A similar issue we had in Lua Torch (which can also happen in Python), when an exception is raised, some object's destructors can be called before the error message is printed. A deadlock preventing you from seeing the real issue is really annoying.\nIn general, I think it's a bad pattern to do any work that can block in a __del__ method.\nFWIW, I added a test case to test_multiprocessing.py to ensure that the sub processes exit in the normal case.", "in_reply_to_id": 83830932}