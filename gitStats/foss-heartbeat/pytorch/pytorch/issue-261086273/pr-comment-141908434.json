{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/141908434", "pull_request_review_id": 66200367, "id": 141908434, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0MTkwODQzNA==", "diff_hunk": "@@ -21,54 +50,94 @@ void THNN_(MSECriterion_updateOutput)(\n   THCThrustAllocator thrustAlloc(state);\n   thrust::device_ptr<real> input_data(THCTensor_(data)(state, input));\n   thrust::device_ptr<real> target_data(THCTensor_(data)(state, target));\n-  accreal sum = thrust::inner_product(\n+  thrust::device_ptr<real> output_data(THCTensor_(data)(state, output));\n+  thrust::transform(\n #if CUDA_VERSION >= 7000\n     thrust::cuda::par(thrustAlloc).on(THCState_getCurrentStream(state)),\n #endif\n-    input_data, input_data+size, target_data, (accreal) 0,\n-    thrust::plus<accreal>(), mse_functor<real, accreal>());\n-\n-  if (sizeAverage)\n-    sum /= size;\n+    input_data, input_data+size, target_data, output_data,\n+    mse_functor_dtype<real, accreal>());\n \n   THCTensor_(free)(state, input);\n   THCTensor_(free)(state, target);\n-\n-  THCTensor_(set1d)(state, output, 0, ScalarConvert<accreal, real>::to(sum));\n }\n \n void THNN_(MSECriterion_updateGradInput)(\n            THCState *state,\n            THCTensor *input,\n            THCTensor *target,\n+           THCTensor *gradOutput,\n            THCTensor *gradInput,\n-           bool sizeAverage)\n+           bool sizeAverage,\n+           bool reduce)\n {\n   THCUNN_check_nElement(state, input, target);\n-  THCUNN_assertSameGPU(state, 3, input, target, gradInput);\n+\n+  if (reduce) {\n+    THCUNN_assertSameGPU(state, 3, input, target, gradInput);\n+\n+    ptrdiff_t size = THCTensor_(nElement)(state, input);\n+\n+    THCUNN_check_dim_size(state, gradOutput, 1, 0, 1);\n+    accreal norm = sizeAverage ? (accreal)(2)/size : (accreal)(2);\n+    norm *= ScalarConvert<real, accreal>::to(THCTensor_(get1d)(state, gradOutput, 0));\n+\n+    input = THCTensor_(newContiguous)(state, input);\n+    target = THCTensor_(newContiguous)(state, target);\n+\n+    THCTensor_(resizeAs)(state, gradInput, input);\n+\n+    THCThrustAllocator thrustAlloc(state);\n+    thrust::device_ptr<real> input_data(THCTensor_(data)(state, input));\n+    thrust::device_ptr<real> target_data(THCTensor_(data)(state, target));\n+    thrust::device_ptr<real> gradInput_data(THCTensor_(data)(state, gradInput));\n+\n+    thrust::transform(\n+#if CUDA_VERSION >= 7000\n+      thrust::cuda::par(thrustAlloc).on(THCState_getCurrentStream(state)),\n+#endif\n+      input_data, input_data+size, target_data, gradInput_data,\n+      mse_updateGradInput_functor<real, accreal>(norm));\n+\n+    THCTensor_(free)(state, input);\n+    THCTensor_(free)(state, target);\n+    return;\n+  }\n+\n+  THCUNN_check_shape(state, input, gradOutput);\n+  THCUNN_assertSameGPU(state, 4, input, target, gradInput, gradOutput);", "path": "torch/lib/THCUNN/generic/MSECriterion.cu", "position": null, "original_position": 114, "commit_id": "9ff333a197516414192eb192aacd6b55705b72e5", "original_commit_id": "2995079ffca4e425f2d2c5b7d65baf3f972ae4ce", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "as above", "created_at": "2017-09-29T16:16:15Z", "updated_at": "2018-11-23T15:34:51Z", "html_url": "https://github.com/pytorch/pytorch/pull/2878#discussion_r141908434", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/2878", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/141908434"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/2878#discussion_r141908434"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/2878"}}, "body_html": "<p>as above</p>", "body_text": "as above"}