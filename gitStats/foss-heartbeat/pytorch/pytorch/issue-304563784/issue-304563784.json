{"url": "https://api.github.com/repos/pytorch/pytorch/issues/5722", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/5722/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/5722/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/5722/events", "html_url": "https://github.com/pytorch/pytorch/pull/5722", "id": 304563784, "node_id": "MDExOlB1bGxSZXF1ZXN0MTc0NTEyMzkw", "number": 5722, "title": "Add optimization to norm for common norms", "user": {"login": "zou3519", "id": 5652049, "node_id": "MDQ6VXNlcjU2NTIwNDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/5652049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zou3519", "html_url": "https://github.com/zou3519", "followers_url": "https://api.github.com/users/zou3519/followers", "following_url": "https://api.github.com/users/zou3519/following{/other_user}", "gists_url": "https://api.github.com/users/zou3519/gists{/gist_id}", "starred_url": "https://api.github.com/users/zou3519/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zou3519/subscriptions", "organizations_url": "https://api.github.com/users/zou3519/orgs", "repos_url": "https://api.github.com/users/zou3519/repos", "events_url": "https://api.github.com/users/zou3519/events{/privacy}", "received_events_url": "https://api.github.com/users/zou3519/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-03-12T22:29:18Z", "updated_at": "2018-03-12T23:54:50Z", "closed_at": "2018-03-12T23:54:50Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/5722", "html_url": "https://github.com/pytorch/pytorch/pull/5722", "diff_url": "https://github.com/pytorch/pytorch/pull/5722.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/5722.patch"}, "body_html": "<p><span class=\"issue-keyword tooltipped tooltipped-se\" aria-label=\"This pull request closes issue #5671.\">Fixes</span> <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"303946349\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/5671\" data-hovercard-type=\"issue\" data-hovercard-url=\"/pytorch/pytorch/issues/5671/hovercard\" href=\"https://github.com/pytorch/pytorch/issues/5671\">#5671</a></p>\n<p>The reported issue is that on the CPU path, norm(value, dim) is slower than manually using pow, sqrt, and summing.</p>\n<p>It turns out that the CPU path for norm(value, dim) is missing optimizations in the <code>value=1, 2</code> cases. I added those in as well as an optimization for <code>value = 3</code> (not sure if this is necessary, but this optimization is used for <code>tensor.pow(3)</code>).</p>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=8813817\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/li-roy\">@li-roy</a> could you take a look?</p>\n<p>Perf numbers:</p>\n<pre><code>\nIn [1]: import torch\n   ...: x = torch.randn(1024, 256)\n   ...: y = torch.randn(1024, 256)\n   ...:\n   ...: %timeit torch.norm(x-y, 1, 1)\n   ...: %timeit (x-y).sum(1)\n   ...:\n   ...: %timeit torch.norm(x-y, 2, 1)\n   ...: %timeit torch.sqrt((x-y).pow(2).sum(1))\n   ...:\n   ...: %timeit torch.norm(x-y, 3, 1)\n   ...: %timeit torch.pow((x - y).abs().pow(3).sum(1), 1/3)\n   ...:\n362 \u00b5s \u00b1 56.4 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)\n332 \u00b5s \u00b1 33.2 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)\n\n340 \u00b5s \u00b1 8.42 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)\n358 \u00b5s \u00b1 5.87 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)\n\n352 \u00b5s \u00b1 4.55 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)\n691 \u00b5s \u00b1 49.2 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)\n</code></pre>", "body_text": "Fixes #5671\nThe reported issue is that on the CPU path, norm(value, dim) is slower than manually using pow, sqrt, and summing.\nIt turns out that the CPU path for norm(value, dim) is missing optimizations in the value=1, 2 cases. I added those in as well as an optimization for value = 3 (not sure if this is necessary, but this optimization is used for tensor.pow(3)).\n@li-roy could you take a look?\nPerf numbers:\n\nIn [1]: import torch\n   ...: x = torch.randn(1024, 256)\n   ...: y = torch.randn(1024, 256)\n   ...:\n   ...: %timeit torch.norm(x-y, 1, 1)\n   ...: %timeit (x-y).sum(1)\n   ...:\n   ...: %timeit torch.norm(x-y, 2, 1)\n   ...: %timeit torch.sqrt((x-y).pow(2).sum(1))\n   ...:\n   ...: %timeit torch.norm(x-y, 3, 1)\n   ...: %timeit torch.pow((x - y).abs().pow(3).sum(1), 1/3)\n   ...:\n362 \u00b5s \u00b1 56.4 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)\n332 \u00b5s \u00b1 33.2 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)\n\n340 \u00b5s \u00b1 8.42 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)\n358 \u00b5s \u00b1 5.87 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)\n\n352 \u00b5s \u00b1 4.55 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)\n691 \u00b5s \u00b1 49.2 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)", "body": "Fixes #5671 \r\n\r\nThe reported issue is that on the CPU path, norm(value, dim) is slower than manually using pow, sqrt, and summing.\r\n\r\nIt turns out that the CPU path for norm(value, dim) is missing optimizations in the `value=1, 2` cases. I added those in as well as an optimization for `value = 3` (not sure if this is necessary, but this optimization is used for `tensor.pow(3)`).\r\n\r\n@li-roy could you take a look?\r\n\r\nPerf numbers:\r\n```\r\n\r\nIn [1]: import torch\r\n   ...: x = torch.randn(1024, 256)\r\n   ...: y = torch.randn(1024, 256)\r\n   ...:\r\n   ...: %timeit torch.norm(x-y, 1, 1)\r\n   ...: %timeit (x-y).sum(1)\r\n   ...:\r\n   ...: %timeit torch.norm(x-y, 2, 1)\r\n   ...: %timeit torch.sqrt((x-y).pow(2).sum(1))\r\n   ...:\r\n   ...: %timeit torch.norm(x-y, 3, 1)\r\n   ...: %timeit torch.pow((x - y).abs().pow(3).sum(1), 1/3)\r\n   ...:\r\n362 \u00b5s \u00b1 56.4 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)\r\n332 \u00b5s \u00b1 33.2 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)\r\n\r\n340 \u00b5s \u00b1 8.42 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)\r\n358 \u00b5s \u00b1 5.87 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)\r\n\r\n352 \u00b5s \u00b1 4.55 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)\r\n691 \u00b5s \u00b1 49.2 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)\r\n```"}