{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/193945572", "pull_request_review_id": 127023624, "id": 193945572, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5Mzk0NTU3Mg==", "diff_hunk": "@@ -0,0 +1,323 @@\n+#pragma once\n+\n+#include \"Exceptions.h\"\n+\n+#include \"miopen-wrapper.h\"\n+#include <ATen/ATen.h>\n+#include <ATen/TensorUtils.h>\n+#include <cuda.h>\n+\n+/*\n+Note [cuDNN dropout descriptor initialization]\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+In most cases, setting descriptors in cuDNN is cheap (e.g.,\n+cudnnSetTensorNdDescriptor).  However, this is not the case for\n+cudnnSetDropoutDescriptor: in cuDNN 6/7 (and possibly others) it does an\n+expensive precomputation to initialize the random number generator states.  In\n+cuDNN 6, this is the ONLY official mechanism to initialize a dropout descriptor,\n+which means that law-abiding clients were expected to generate a dropout\n+descriptor once and cache it.  However, our ATen interface is (1) stateless (so\n+we can't cache the descriptors) and (2) does not accept arbitrary user types in\n+its interface (so we can't pass the descriptor in).  This puts us in a pickle.\n+\n+In cuDNN 7, a new function, cudnnRestoreDropoutDescriptor was added, which\n+forgoes the expensive initialization process, and can initialize the\n+descriptor with a pre-initialized state CUDA tensor.  This is great, because\n+it means we can simply pass in the state tensor and then initialize the\n+descriptor internally.  Unfortunately, this function is not available in\n+cuDNN 6.", "path": "aten/src/ATen/miopen/Descriptors.h", "position": 29, "original_position": 29, "commit_id": "f483f7f5be6b4c1f978136eda606996dc29bfe12", "original_commit_id": "a59acd623ced715e840278fae8e856250aa9fe71", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "No dropout support, so this comment is irrelevant...", "created_at": "2018-06-08T03:37:42Z", "updated_at": "2018-11-23T15:45:13Z", "html_url": "https://github.com/pytorch/pytorch/pull/8257#discussion_r193945572", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/8257", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/193945572"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/8257#discussion_r193945572"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/8257"}}, "body_html": "<p>No dropout support, so this comment is irrelevant...</p>", "body_text": "No dropout support, so this comment is irrelevant..."}