{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/428692414", "html_url": "https://github.com/pytorch/pytorch/pull/12541#issuecomment-428692414", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/12541", "id": 428692414, "node_id": "MDEyOklzc3VlQ29tbWVudDQyODY5MjQxNA==", "user": {"login": "jamesr66a", "id": 4685384, "node_id": "MDQ6VXNlcjQ2ODUzODQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/4685384?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamesr66a", "html_url": "https://github.com/jamesr66a", "followers_url": "https://api.github.com/users/jamesr66a/followers", "following_url": "https://api.github.com/users/jamesr66a/following{/other_user}", "gists_url": "https://api.github.com/users/jamesr66a/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamesr66a/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamesr66a/subscriptions", "organizations_url": "https://api.github.com/users/jamesr66a/orgs", "repos_url": "https://api.github.com/users/jamesr66a/repos", "events_url": "https://api.github.com/users/jamesr66a/events{/privacy}", "received_events_url": "https://api.github.com/users/jamesr66a/received_events", "type": "User", "site_admin": false}, "created_at": "2018-10-10T19:01:09Z", "updated_at": "2018-10-10T19:01:27Z", "author_association": "CONTRIBUTOR", "body_html": "<p>A concrete example:</p>\n<pre><code>import torch\n\nx = torch.zeros(3, 4)\n\nprint('in-place copy on contiguous tensor')\nx.contiguous().copy_(torch.rand(3, 4))\nprint(x)\n\nprint('in-place copy on non-contiguous tensor')\nx = torch.zeros(3, 4)\nx[1, ::2].contiguous().copy_(torch.rand(2))\n\nprint(x)\n</code></pre>\n<p>output:</p>\n<pre><code>in-place copy on contiguous tensor\ntensor([[0.7699, 0.9277, 0.2041, 0.3142],\n        [0.2941, 0.8966, 0.3638, 0.4608],\n        [0.9675, 0.3081, 0.0418, 0.3728]])\nin-place copy on non-contiguous tensor\ntensor([[0., 0., 0., 0.],\n        [0., 0., 0., 0.],\n        [0., 0., 0., 0.]])\n</code></pre>\n<p>My mental model has always been that <code>contiguous()</code> makes what should be considered a new tensor. Do people rely on this in-place behavior? This seems incorrect</p>", "body_text": "A concrete example:\nimport torch\n\nx = torch.zeros(3, 4)\n\nprint('in-place copy on contiguous tensor')\nx.contiguous().copy_(torch.rand(3, 4))\nprint(x)\n\nprint('in-place copy on non-contiguous tensor')\nx = torch.zeros(3, 4)\nx[1, ::2].contiguous().copy_(torch.rand(2))\n\nprint(x)\n\noutput:\nin-place copy on contiguous tensor\ntensor([[0.7699, 0.9277, 0.2041, 0.3142],\n        [0.2941, 0.8966, 0.3638, 0.4608],\n        [0.9675, 0.3081, 0.0418, 0.3728]])\nin-place copy on non-contiguous tensor\ntensor([[0., 0., 0., 0.],\n        [0., 0., 0., 0.],\n        [0., 0., 0., 0.]])\n\nMy mental model has always been that contiguous() makes what should be considered a new tensor. Do people rely on this in-place behavior? This seems incorrect", "body": "A concrete example:\r\n\r\n```\r\nimport torch\r\n\r\nx = torch.zeros(3, 4)\r\n\r\nprint('in-place copy on contiguous tensor')\r\nx.contiguous().copy_(torch.rand(3, 4))\r\nprint(x)\r\n\r\nprint('in-place copy on non-contiguous tensor')\r\nx = torch.zeros(3, 4)\r\nx[1, ::2].contiguous().copy_(torch.rand(2))\r\n\r\nprint(x)\r\n```\r\noutput:\r\n\r\n```\r\nin-place copy on contiguous tensor\r\ntensor([[0.7699, 0.9277, 0.2041, 0.3142],\r\n        [0.2941, 0.8966, 0.3638, 0.4608],\r\n        [0.9675, 0.3081, 0.0418, 0.3728]])\r\nin-place copy on non-contiguous tensor\r\ntensor([[0., 0., 0., 0.],\r\n        [0., 0., 0., 0.],\r\n        [0., 0., 0., 0.]])\r\n```\r\n\r\nMy mental model has always been that `contiguous()` makes what should be considered a new tensor. Do people rely on this in-place behavior? This seems incorrect"}