{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/417989231", "html_url": "https://github.com/pytorch/pytorch/issues/11192#issuecomment-417989231", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/11192", "id": 417989231, "node_id": "MDEyOklzc3VlQ29tbWVudDQxNzk4OTIzMQ==", "user": {"login": "SsnL", "id": 5674597, "node_id": "MDQ6VXNlcjU2NzQ1OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5674597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SsnL", "html_url": "https://github.com/SsnL", "followers_url": "https://api.github.com/users/SsnL/followers", "following_url": "https://api.github.com/users/SsnL/following{/other_user}", "gists_url": "https://api.github.com/users/SsnL/gists{/gist_id}", "starred_url": "https://api.github.com/users/SsnL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SsnL/subscriptions", "organizations_url": "https://api.github.com/users/SsnL/orgs", "repos_url": "https://api.github.com/users/SsnL/repos", "events_url": "https://api.github.com/users/SsnL/events{/privacy}", "received_events_url": "https://api.github.com/users/SsnL/received_events", "type": "User", "site_admin": false}, "created_at": "2018-09-03T03:12:30Z", "updated_at": "2018-09-03T03:12:30Z", "author_association": "CONTRIBUTOR", "body_html": "<p>It's not about distribution or not. If you do any other operation, you will see the same thing because the two cases you described are completely different:</p>\n<ol>\n<li>1st case.</li>\n</ol>\n<pre><code>t ---&gt; l1\n \\\n  ---&gt; l2\n</code></pre>\n<p>When you do <code>l1.backward()</code>. The graph <code>t ---&gt; l1</code> is freed, but <code>t ---&gt; l2</code> is intact.</p>\n<ol start=\"2\">\n<li>2nd case.</li>\n</ol>\n<pre><code>p ---&gt; intermediate results in pi ---&gt; l1\n                                \\\n                                 ---&gt; l2\n</code></pre>\n<p>When you do <code>l1.backward()</code>. The graph <code>p ---&gt; intermediate results in pi ---&gt; l1</code> is freed. So when you ask for backwarding via <code>t ---&gt; intermediate results in pi ---&gt; l2</code>, you are missing part of the graph.</p>", "body_text": "It's not about distribution or not. If you do any other operation, you will see the same thing because the two cases you described are completely different:\n\n1st case.\n\nt ---> l1\n \\\n  ---> l2\n\nWhen you do l1.backward(). The graph t ---> l1 is freed, but t ---> l2 is intact.\n\n2nd case.\n\np ---> intermediate results in pi ---> l1\n                                \\\n                                 ---> l2\n\nWhen you do l1.backward(). The graph p ---> intermediate results in pi ---> l1 is freed. So when you ask for backwarding via t ---> intermediate results in pi ---> l2, you are missing part of the graph.", "body": "It's not about distribution or not. If you do any other operation, you will see the same thing because the two cases you described are completely different:\r\n\r\n1. 1st case.\r\n```\r\nt ---> l1\r\n \\\r\n  ---> l2\r\n```\r\nWhen you do `l1.backward()`. The graph `t ---> l1` is freed, but `t ---> l2` is intact.\r\n\r\n2. 2nd case.\r\n```\r\np ---> intermediate results in pi ---> l1\r\n                                \\\r\n                                 ---> l2\r\n```\r\nWhen you do `l1.backward()`. The graph `p ---> intermediate results in pi ---> l1` is freed. So when you ask for backwarding via `t ---> intermediate results in pi ---> l2`, you are missing part of the graph.\r\n\r\n"}