{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/199565245", "pull_request_review_id": 133689153, "id": 199565245, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTU2NTI0NQ==", "diff_hunk": "@@ -1,80 +1,68 @@\n #include \"THCAllocator.h\"\n \n-static void *THCudaHostAllocator_malloc(void* ctx, ptrdiff_t size) {\n-  void* ptr;\n+struct THCudaHostAllocator : public at::Allocator {\n+  void* allocate(void* ctx, size_t size) const override {\n+    void* ptr;\n \n-  if (size < 0) THError(\"Invalid memory size: %ld\", size);\n+    if (size < 0) THError(\"Invalid memory size: %ld\", size);\n \n-  if (size == 0) return NULL;\n+    if (size == 0) return NULL;\n \n-  THCudaCheck(cudaMallocHost(&ptr, size));\n+    THCudaCheck(cudaMallocHost(&ptr, size));\n \n-  return ptr;\n-}\n-\n-static void THCudaHostAllocator_free(void* ctx, void* ptr) {\n-  if (!ptr) return;\n-\n-  THCudaCheck(cudaFreeHost(ptr));\n-}\n+    return ptr;\n+  }\n+  void deallocate(void* ctx, void* ptr) const override {\n+    if (!ptr) return;\n \n-THAllocator THCudaHostAllocator = {\n-  &THCudaHostAllocator_malloc,\n-  NULL,\n-  &THCudaHostAllocator_free\n+    THCudaCheck(cudaFreeHost(ptr));\n+  }\n };\n \n-static cudaError_t THCIpcAllocator_malloc(void* ctx, void** devPtr, size_t size, cudaStream_t stream)\n-{\n-  THError(\"THCIpcAllocator.malloc() not supported\");\n-  return cudaSuccess;\n+static THCudaHostAllocator th_cuda_host_allocator;\n+at::Allocator* getTHCudaHostAllocator() {\n+  return &th_cuda_host_allocator;\n }\n \n-static cudaError_t THCIpcAllocator_free(void* ctx, void* devPtr)\n-{\n-  cudaError_t err;\n-  int prev_device;\n-  int device = (int)(int64_t)ctx;\n-\n-  err = cudaGetDevice(&prev_device);\n-  if (err != cudaSuccess) { return err; }\n-\n-  err = cudaSetDevice(device);\n-  if (err != cudaSuccess) { return err; }\n-\n-  err = cudaIpcCloseMemHandle(devPtr);\n+struct THCIpcAllocator : public at::Allocator {\n+  void* allocate(void* ctx, size_t size) const override {\n+    AT_ERROR(\"THCIpcAllocator.malloc() not supported\");", "path": "aten/src/THC/THCAllocator.cpp", "position": null, "original_position": 63, "commit_id": "53f0bade46b6b09175554b6d2eb9d8c9140fa6fe", "original_commit_id": "025f6b3f62f53fde03ac88395b879223a4d849a0", "user": {"login": "gchanan", "id": 3768583, "node_id": "MDQ6VXNlcjM3Njg1ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3768583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gchanan", "html_url": "https://github.com/gchanan", "followers_url": "https://api.github.com/users/gchanan/followers", "following_url": "https://api.github.com/users/gchanan/following{/other_user}", "gists_url": "https://api.github.com/users/gchanan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gchanan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gchanan/subscriptions", "organizations_url": "https://api.github.com/users/gchanan/orgs", "repos_url": "https://api.github.com/users/gchanan/repos", "events_url": "https://api.github.com/users/gchanan/events{/privacy}", "received_events_url": "https://api.github.com/users/gchanan/received_events", "type": "User", "site_admin": false}, "body": "should the error message be about allocate instead of malloc?", "created_at": "2018-07-02T17:16:11Z", "updated_at": "2018-11-23T15:46:39Z", "html_url": "https://github.com/pytorch/pytorch/pull/9089#discussion_r199565245", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/9089", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/199565245"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/9089#discussion_r199565245"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/9089"}}, "body_html": "<p>should the error message be about allocate instead of malloc?</p>", "body_text": "should the error message be about allocate instead of malloc?"}