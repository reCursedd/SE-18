{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/199573351", "pull_request_review_id": 133719377, "id": 199573351, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTU3MzM1MQ==", "diff_hunk": "@@ -11,18 +11,19 @@\n #define TH_ALLOCATOR_MAPPED_FROMFD 32\n #define TH_ALLOCATOR_MAPPED_UNLINK 64\n \n-/* Custom allocator\n- */\n-typedef struct THAllocator {\n-  void* (*malloc)(void*, ptrdiff_t);\n-  void* (*realloc)(void*, void*, ptrdiff_t);\n-  void (*free)(void*, void*);\n-} THAllocator;\n+#ifdef __cplusplus\n+#include <ATen/Allocator.h>\n+using THAllocator = at::Allocator;", "path": "aten/src/TH/THAllocator.h", "position": 13, "original_position": 13, "commit_id": "53f0bade46b6b09175554b6d2eb9d8c9140fa6fe", "original_commit_id": "025f6b3f62f53fde03ac88395b879223a4d849a0", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "According to CI, it does work :) (And yes, we need it to be available from C, because a lot of C function headers refer to it).\r\n\r\nActually, I am kind of thinking that we should use `#ifdef __cplusplus` more liberally in the TH headers, as an alternative way of C++ifying headers instead of the `hpp` convention. ", "created_at": "2018-07-02T17:48:31Z", "updated_at": "2018-11-23T15:46:40Z", "html_url": "https://github.com/pytorch/pytorch/pull/9089#discussion_r199573351", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/9089", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/199573351"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/9089#discussion_r199573351"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/9089"}}, "body_html": "<p>According to CI, it does work :) (And yes, we need it to be available from C, because a lot of C function headers refer to it).</p>\n<p>Actually, I am kind of thinking that we should use <code>#ifdef __cplusplus</code> more liberally in the TH headers, as an alternative way of C++ifying headers instead of the <code>hpp</code> convention.</p>", "body_text": "According to CI, it does work :) (And yes, we need it to be available from C, because a lot of C function headers refer to it).\nActually, I am kind of thinking that we should use #ifdef __cplusplus more liberally in the TH headers, as an alternative way of C++ifying headers instead of the hpp convention.", "in_reply_to_id": 199548503}