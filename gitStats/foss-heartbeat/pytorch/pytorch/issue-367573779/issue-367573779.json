{"url": "https://api.github.com/repos/pytorch/pytorch/issues/12437", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/12437/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/12437/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/12437/events", "html_url": "https://github.com/pytorch/pytorch/issues/12437", "id": 367573779, "node_id": "MDU6SXNzdWUzNjc1NzM3Nzk=", "number": 12437, "title": "/tools/setup_helpers/cudnn.py rejects valid CUDNN_LIB_DIR if libcudnn is symlink", "user": {"login": "meganset", "id": 26304558, "node_id": "MDQ6VXNlcjI2MzA0NTU4", "avatar_url": "https://avatars0.githubusercontent.com/u/26304558?v=4", "gravatar_id": "", "url": "https://api.github.com/users/meganset", "html_url": "https://github.com/meganset", "followers_url": "https://api.github.com/users/meganset/followers", "following_url": "https://api.github.com/users/meganset/following{/other_user}", "gists_url": "https://api.github.com/users/meganset/gists{/gist_id}", "starred_url": "https://api.github.com/users/meganset/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/meganset/subscriptions", "organizations_url": "https://api.github.com/users/meganset/orgs", "repos_url": "https://api.github.com/users/meganset/repos", "events_url": "https://api.github.com/users/meganset/events{/privacy}", "received_events_url": "https://api.github.com/users/meganset/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 778855555, "node_id": "MDU6TGFiZWw3Nzg4NTU1NTU=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/build", "name": "build", "color": "bfdadc", "default": false}, {"id": 443483881, "node_id": "MDU6TGFiZWw0NDM0ODM4ODE=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/todo", "name": "todo", "color": "c2e0c6", "default": false}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-10-07T17:10:20Z", "updated_at": "2018-10-15T17:59:12Z", "closed_at": null, "author_association": "NONE", "body_html": "<h2><g-emoji class=\"g-emoji\" alias=\"bug\" fallback-src=\"https://assets-cdn.github.com/images/icons/emoji/unicode/1f41b.png\">\ud83d\udc1b</g-emoji> Bug</h2>\n<p>On my mac, <em>setup.py</em> manages to find the CUDNN library and dir on its own,<br>\nbut then rejects the locations because of some logic added in January: <a href=\"https://github.com/pytorch/pytorch/pull/4597\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/pytorch/pytorch/pull/4597/hovercard\">#4597</a></p>\n<p><code>        real_cudnn_library = os.path.realpath(CUDNN_LIBRARY)</code><br>\n<code>       real_cudnn_lib_dir = os.path.realpath(CUDNN_LIB_DIR)</code><br>\n<code>       assert os.path.dirname(real_cudnn_library) == real_cudnn_lib_dir, (</code><br>\n<code>          'cudnn library and lib_dir must agree')</code></p>\n<p>The located dir is a real path, with a symlink for the library itself:<br>\n<em>/usr/local/cuda/lib<br>\n/usr/local/cuda/lib/libcudnn.7.dylib@ -&gt; /Developer/NVIDIA/CUDA-9.2/lib/libcudnn.7.dylib</em></p>\n<p>comparing real paths of dir and library don't match up.<br>\nit's easy to work around by setting CUDNN.. vars before running setup,<br>\nbut maybe could safely add an additional or clause on the assert to allow for a situation like the above.</p>\n<p>something like:<br>\n<code>os.path.dirname(CUDNN_LIBRARY) == os.path.normpath(CUDNN_LIB_DIR)</code><br>\nor if real paths are the way to go:<br>\n<code>real_cudnn_library ==  os.path.realpath(os.path.join(CUDNN_LIB_DIR,os.path.basename(CUDNN_LIBRARY)))</code></p>", "body_text": "\ud83d\udc1b Bug\nOn my mac, setup.py manages to find the CUDNN library and dir on its own,\nbut then rejects the locations because of some logic added in January: #4597\n        real_cudnn_library = os.path.realpath(CUDNN_LIBRARY)\n       real_cudnn_lib_dir = os.path.realpath(CUDNN_LIB_DIR)\n       assert os.path.dirname(real_cudnn_library) == real_cudnn_lib_dir, (\n          'cudnn library and lib_dir must agree')\nThe located dir is a real path, with a symlink for the library itself:\n/usr/local/cuda/lib\n/usr/local/cuda/lib/libcudnn.7.dylib@ -> /Developer/NVIDIA/CUDA-9.2/lib/libcudnn.7.dylib\ncomparing real paths of dir and library don't match up.\nit's easy to work around by setting CUDNN.. vars before running setup,\nbut maybe could safely add an additional or clause on the assert to allow for a situation like the above.\nsomething like:\nos.path.dirname(CUDNN_LIBRARY) == os.path.normpath(CUDNN_LIB_DIR)\nor if real paths are the way to go:\nreal_cudnn_library ==  os.path.realpath(os.path.join(CUDNN_LIB_DIR,os.path.basename(CUDNN_LIBRARY)))", "body": "## \ud83d\udc1b Bug\r\n\r\nOn my mac, _setup.py_ manages to find the CUDNN library and dir on its own,\r\nbut then rejects the locations because of some logic added in January: [#4597](https://github.com/pytorch/pytorch/pull/4597)\r\n\r\n`        real_cudnn_library = os.path.realpath(CUDNN_LIBRARY)`\r\n`       real_cudnn_lib_dir = os.path.realpath(CUDNN_LIB_DIR)`\r\n`       assert os.path.dirname(real_cudnn_library) == real_cudnn_lib_dir, (`\r\n`          'cudnn library and lib_dir must agree')`\r\n\r\nThe located dir is a real path, with a symlink for the library itself:\r\n_/usr/local/cuda/lib\r\n/usr/local/cuda/lib/libcudnn.7.dylib@ -> /Developer/NVIDIA/CUDA-9.2/lib/libcudnn.7.dylib_\r\n\r\ncomparing real paths of dir and library don't match up.\r\nit's easy to work around by setting CUDNN.. vars before running setup,\r\nbut maybe could safely add an additional or clause on the assert to allow for a situation like the above.\r\n\r\nsomething like:\r\n`os.path.dirname(CUDNN_LIBRARY) == os.path.normpath(CUDNN_LIB_DIR)`\r\nor if real paths are the way to go:\r\n`real_cudnn_library == \r\n os.path.realpath(os.path.join(CUDNN_LIB_DIR,os.path.basename(CUDNN_LIBRARY)))`\r\n"}