{"url": "https://api.github.com/repos/pytorch/pytorch/issues/11471", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/11471/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/11471/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/11471/events", "html_url": "https://github.com/pytorch/pytorch/issues/11471", "id": 358752658, "node_id": "MDU6SXNzdWUzNTg3NTI2NTg=", "number": 11471, "title": "torch/_C.so exports a symbol named \"state\"", "user": {"login": "drawoc", "id": 909091, "node_id": "MDQ6VXNlcjkwOTA5MQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/909091?v=4", "gravatar_id": "", "url": "https://api.github.com/users/drawoc", "html_url": "https://github.com/drawoc", "followers_url": "https://api.github.com/users/drawoc/followers", "following_url": "https://api.github.com/users/drawoc/following{/other_user}", "gists_url": "https://api.github.com/users/drawoc/gists{/gist_id}", "starred_url": "https://api.github.com/users/drawoc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/drawoc/subscriptions", "organizations_url": "https://api.github.com/users/drawoc/orgs", "repos_url": "https://api.github.com/users/drawoc/repos", "events_url": "https://api.github.com/users/drawoc/events{/privacy}", "received_events_url": "https://api.github.com/users/drawoc/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-09-10T19:02:50Z", "updated_at": "2018-09-10T23:52:08Z", "closed_at": null, "author_association": "NONE", "body_html": "<h2>Issue description</h2>\n<p>Importing both pytorch and hiredis into the same python program often results in a segfault.</p>\n<p>After much debugging, I was able to trace this back to the fact that both shared objects export a symbol named <code>state</code>, which causes hiredis to overwrite pytorch's internal variables with its own internal state.</p>\n<h2>Code example</h2>\n<p>I can reproduce this consistently with:</p>\n<pre><code>$ echo \"import torch, hiredis\" | python2\nSegmentation fault (core dumped)\n</code></pre>\n<p>Note that the segfault happens when the interpreter exits, not during the import</p>\n<p>Stack trace:</p>\n<pre><code>==1890== Process terminating with default action of signal 11 (SIGSEGV): dumping core\n==1890==  Bad permissions for mapped region at address 0x297BA4A4\n==1890==    at 0x297BA4A4: ???\n==1890==    by 0x1BD2D00E: ~_Function_base (functional:1998)\n==1890==    by 0x1BD2D00E: ~function (functional:2142)\n==1890==    by 0x1BD2D00E: ~THPCopyInfo (copy_utils.h:8)\n==1890==    by 0x1BD2D00E: _Destroy&lt;THPCopyInfo&gt; (stl_construct.h:93)\n==1890==    by 0x1BD2D00E: __destroy&lt;THPCopyInfo*&gt; (stl_construct.h:103)\n==1890==    by 0x1BD2D00E: _Destroy&lt;THPCopyInfo*&gt; (stl_construct.h:126)\n==1890==    by 0x1BD2D00E: _Destroy&lt;THPCopyInfo*, THPCopyInfo&gt; (stl_construct.h:151)\n==1890==    by 0x1BD2D00E: std::vector&lt;THPCopyInfo, std::allocator&lt;THPCopyInfo&gt; &gt;::~vector() (stl_vector.h:424)\n==1890==    by 0x5090FF7: __run_exit_handlers (exit.c:82)\n==1890==    by 0x5091044: exit (exit.c:104)\n==1890==    by 0x5077836: (below main) (libc-start.c:325)\n</code></pre>\n<h2>System Info</h2>\n<ul>\n<li>PyTorch or Caffe2: PyTorch</li>\n<li>How you installed PyTorch: Can reproduce with pip, source, and distro packages</li>\n<li>OS: Ubuntu 16.04 or Arch Linux (up to date 2018-09-07)</li>\n<li>PyTorch version: 0.4.1</li>\n<li>Python version: 2.7</li>\n<li>CUDA/cuDNN version: 9.0/7.0</li>\n<li>GPU models and configuration: N/A</li>\n<li>Versions of any other relevant libraries: hiredis (python) 0.2.0</li>\n</ul>\n<p>I think this only happens in builds with GPU support.</p>\n<h2>Potential Fix</h2>\n<p>I'd like to suggest that this issue is fixed by compiling all the shared object files with <code>-fvisibility=hidden</code> on gcc/clang, and then defining the <code>*_API</code> macros to set <code>__attribute__((__visibility__(\"default\")))</code> when compiling. Note that part of the machinery to do this is already in place, but not consistently used (eg. <code>AT_API</code> has the define on master, while <code>THC_API</code> does not. There is build code to detect the flag <code>fvisibility=hidden</code>, but it doesn't appear to be set for most of the libraries)</p>\n<p>Fixing it this way should eliminate this entire class of errors.</p>\n<p>I can write a PR that does this, if that would help.</p>", "body_text": "Issue description\nImporting both pytorch and hiredis into the same python program often results in a segfault.\nAfter much debugging, I was able to trace this back to the fact that both shared objects export a symbol named state, which causes hiredis to overwrite pytorch's internal variables with its own internal state.\nCode example\nI can reproduce this consistently with:\n$ echo \"import torch, hiredis\" | python2\nSegmentation fault (core dumped)\n\nNote that the segfault happens when the interpreter exits, not during the import\nStack trace:\n==1890== Process terminating with default action of signal 11 (SIGSEGV): dumping core\n==1890==  Bad permissions for mapped region at address 0x297BA4A4\n==1890==    at 0x297BA4A4: ???\n==1890==    by 0x1BD2D00E: ~_Function_base (functional:1998)\n==1890==    by 0x1BD2D00E: ~function (functional:2142)\n==1890==    by 0x1BD2D00E: ~THPCopyInfo (copy_utils.h:8)\n==1890==    by 0x1BD2D00E: _Destroy<THPCopyInfo> (stl_construct.h:93)\n==1890==    by 0x1BD2D00E: __destroy<THPCopyInfo*> (stl_construct.h:103)\n==1890==    by 0x1BD2D00E: _Destroy<THPCopyInfo*> (stl_construct.h:126)\n==1890==    by 0x1BD2D00E: _Destroy<THPCopyInfo*, THPCopyInfo> (stl_construct.h:151)\n==1890==    by 0x1BD2D00E: std::vector<THPCopyInfo, std::allocator<THPCopyInfo> >::~vector() (stl_vector.h:424)\n==1890==    by 0x5090FF7: __run_exit_handlers (exit.c:82)\n==1890==    by 0x5091044: exit (exit.c:104)\n==1890==    by 0x5077836: (below main) (libc-start.c:325)\n\nSystem Info\n\nPyTorch or Caffe2: PyTorch\nHow you installed PyTorch: Can reproduce with pip, source, and distro packages\nOS: Ubuntu 16.04 or Arch Linux (up to date 2018-09-07)\nPyTorch version: 0.4.1\nPython version: 2.7\nCUDA/cuDNN version: 9.0/7.0\nGPU models and configuration: N/A\nVersions of any other relevant libraries: hiredis (python) 0.2.0\n\nI think this only happens in builds with GPU support.\nPotential Fix\nI'd like to suggest that this issue is fixed by compiling all the shared object files with -fvisibility=hidden on gcc/clang, and then defining the *_API macros to set __attribute__((__visibility__(\"default\"))) when compiling. Note that part of the machinery to do this is already in place, but not consistently used (eg. AT_API has the define on master, while THC_API does not. There is build code to detect the flag fvisibility=hidden, but it doesn't appear to be set for most of the libraries)\nFixing it this way should eliminate this entire class of errors.\nI can write a PR that does this, if that would help.", "body": "## Issue description\r\n\r\nImporting both pytorch and hiredis into the same python program often results in a segfault.\r\n\r\nAfter much debugging, I was able to trace this back to the fact that both shared objects export a symbol named `state`, which causes hiredis to overwrite pytorch's internal variables with its own internal state.\r\n\r\n## Code example\r\nI can reproduce this consistently with:\r\n```\r\n$ echo \"import torch, hiredis\" | python2\r\nSegmentation fault (core dumped)\r\n```\r\nNote that the segfault happens when the interpreter exits, not during the import\r\n\r\nStack trace:\r\n```\r\n==1890== Process terminating with default action of signal 11 (SIGSEGV): dumping core\r\n==1890==  Bad permissions for mapped region at address 0x297BA4A4\r\n==1890==    at 0x297BA4A4: ???\r\n==1890==    by 0x1BD2D00E: ~_Function_base (functional:1998)\r\n==1890==    by 0x1BD2D00E: ~function (functional:2142)\r\n==1890==    by 0x1BD2D00E: ~THPCopyInfo (copy_utils.h:8)\r\n==1890==    by 0x1BD2D00E: _Destroy<THPCopyInfo> (stl_construct.h:93)\r\n==1890==    by 0x1BD2D00E: __destroy<THPCopyInfo*> (stl_construct.h:103)\r\n==1890==    by 0x1BD2D00E: _Destroy<THPCopyInfo*> (stl_construct.h:126)\r\n==1890==    by 0x1BD2D00E: _Destroy<THPCopyInfo*, THPCopyInfo> (stl_construct.h:151)\r\n==1890==    by 0x1BD2D00E: std::vector<THPCopyInfo, std::allocator<THPCopyInfo> >::~vector() (stl_vector.h:424)\r\n==1890==    by 0x5090FF7: __run_exit_handlers (exit.c:82)\r\n==1890==    by 0x5091044: exit (exit.c:104)\r\n==1890==    by 0x5077836: (below main) (libc-start.c:325)\r\n```\r\n\r\n## System Info\r\n- PyTorch or Caffe2: PyTorch\r\n- How you installed PyTorch: Can reproduce with pip, source, and distro packages\r\n- OS: Ubuntu 16.04 or Arch Linux (up to date 2018-09-07)\r\n- PyTorch version: 0.4.1\r\n- Python version: 2.7\r\n- CUDA/cuDNN version: 9.0/7.0\r\n- GPU models and configuration: N/A\r\n- Versions of any other relevant libraries: hiredis (python) 0.2.0\r\n\r\nI think this only happens in builds with GPU support.\r\n\r\n## Potential Fix\r\n\r\nI'd like to suggest that this issue is fixed by compiling all the shared object files with `-fvisibility=hidden` on gcc/clang, and then defining the `*_API` macros to set `__attribute__((__visibility__(\"default\")))` when compiling. Note that part of the machinery to do this is already in place, but not consistently used (eg. `AT_API` has the define on master, while `THC_API` does not. There is build code to detect the flag `fvisibility=hidden`, but it doesn't appear to be set for most of the libraries)\r\n\r\nFixing it this way should eliminate this entire class of errors.\r\n\r\nI can write a PR that does this, if that would help."}