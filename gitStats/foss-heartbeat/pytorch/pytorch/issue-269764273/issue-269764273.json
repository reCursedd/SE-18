{"url": "https://api.github.com/repos/pytorch/pytorch/issues/3385", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/3385/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/3385/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/3385/events", "html_url": "https://github.com/pytorch/pytorch/issues/3385", "id": 269764273, "node_id": "MDU6SXNzdWUyNjk3NjQyNzM=", "number": 3385, "title": "[minor] Support F.normalize on 1-dim vectors without explicit dim", "user": {"login": "vadimkantorov", "id": 1041752, "node_id": "MDQ6VXNlcjEwNDE3NTI=", "avatar_url": "https://avatars0.githubusercontent.com/u/1041752?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vadimkantorov", "html_url": "https://github.com/vadimkantorov", "followers_url": "https://api.github.com/users/vadimkantorov/followers", "following_url": "https://api.github.com/users/vadimkantorov/following{/other_user}", "gists_url": "https://api.github.com/users/vadimkantorov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vadimkantorov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vadimkantorov/subscriptions", "organizations_url": "https://api.github.com/users/vadimkantorov/orgs", "repos_url": "https://api.github.com/users/vadimkantorov/repos", "events_url": "https://api.github.com/users/vadimkantorov/events{/privacy}", "received_events_url": "https://api.github.com/users/vadimkantorov/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-10-30T21:43:30Z", "updated_at": "2018-03-15T23:14:46Z", "closed_at": "2017-11-01T12:54:52Z", "author_association": "NONE", "body_html": "<p>Because of default dim = 1, <code>normalize</code> fails on vectors.</p>\n<div class=\"highlight highlight-source-python\"><pre>torch.nn.functional.normalize(torch.autograd.Variable(torch.rand(<span class=\"pl-c1\">10</span>)))\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> RuntimeError: dimension out of range (expected to be in range of [-1, 0], but got 1)</span></pre></div>\n<p>My two cents is that if a default dim is at all supported, this is the most reasonable case where it makes sense (same issue with softmax). Yet I remember many discussions about this (e.g. wrt softmax refactoring), so feel free to close it if the decision was taken. The docs faithfully mention: \"With default arguments normalizes over the <em>second</em> dimension with Euclidean norm.\"</p>\n<p>(the simple workaround is <code>torch.nn.functional.normalize(torch.autograd.Variable(torch.rand(10)).unsqueeze(0)).squeeze(0)</code>)</p>", "body_text": "Because of default dim = 1, normalize fails on vectors.\ntorch.nn.functional.normalize(torch.autograd.Variable(torch.rand(10)))\n# RuntimeError: dimension out of range (expected to be in range of [-1, 0], but got 1)\nMy two cents is that if a default dim is at all supported, this is the most reasonable case where it makes sense (same issue with softmax). Yet I remember many discussions about this (e.g. wrt softmax refactoring), so feel free to close it if the decision was taken. The docs faithfully mention: \"With default arguments normalizes over the second dimension with Euclidean norm.\"\n(the simple workaround is torch.nn.functional.normalize(torch.autograd.Variable(torch.rand(10)).unsqueeze(0)).squeeze(0))", "body": "Because of default dim = 1, `normalize` fails on vectors.\r\n\r\n```python\r\ntorch.nn.functional.normalize(torch.autograd.Variable(torch.rand(10)))\r\n# RuntimeError: dimension out of range (expected to be in range of [-1, 0], but got 1)\r\n```\r\n\r\nMy two cents is that if a default dim is at all supported, this is the most reasonable case where it makes sense (same issue with softmax). Yet I remember many discussions about this (e.g. wrt softmax refactoring), so feel free to close it if the decision was taken. The docs faithfully mention: \"With default arguments normalizes over the *second* dimension with Euclidean norm.\"\r\n\r\n(the simple workaround is `torch.nn.functional.normalize(torch.autograd.Variable(torch.rand(10)).unsqueeze(0)).squeeze(0)`)\r\n"}