{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/409785917", "html_url": "https://github.com/pytorch/pytorch/issues/4858#issuecomment-409785917", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/4858", "id": 409785917, "node_id": "MDEyOklzc3VlQ29tbWVudDQwOTc4NTkxNw==", "user": {"login": "rfejgin", "id": 345348, "node_id": "MDQ6VXNlcjM0NTM0OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/345348?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rfejgin", "html_url": "https://github.com/rfejgin", "followers_url": "https://api.github.com/users/rfejgin/followers", "following_url": "https://api.github.com/users/rfejgin/following{/other_user}", "gists_url": "https://api.github.com/users/rfejgin/gists{/gist_id}", "starred_url": "https://api.github.com/users/rfejgin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rfejgin/subscriptions", "organizations_url": "https://api.github.com/users/rfejgin/orgs", "repos_url": "https://api.github.com/users/rfejgin/repos", "events_url": "https://api.github.com/users/rfejgin/events{/privacy}", "received_events_url": "https://api.github.com/users/rfejgin/received_events", "type": "User", "site_admin": false}, "created_at": "2018-08-02T02:31:36Z", "updated_at": "2018-08-02T03:03:25Z", "author_association": "NONE", "body_html": "<p>Another finding from the thread for <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=20787943\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/t-vi\">@t-vi</a>'s pull request  (<a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"345381688\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/9960\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/pytorch/pytorch/pull/9960/hovercard\" href=\"https://github.com/pytorch/pytorch/pull/9960\">#9960</a>) is that there appears to be a problem with some of the floating point calculations in the code.</p>\n<p>For example, I added a this printout:<br>\n<code>printf(\"Zero probability selected! cat=%d, probability=%.9g, sample=%.9g, prevBucket=%.9g, curBucket=%.9g\\n\", cat, prob, sample, prevBucket, curBucket);</code><br>\nat this line:<br>\n<a href=\"https://github.com/pytorch/pytorch/blob/master/aten/src/THC/THCTensorRandom.cuh#L263\">https://github.com/pytorch/pytorch/blob/master/aten/src/THC/THCTensorRandom.cuh#L263</a></p>\n<p>and, when running the above script, got the output:<br>\n<code>Zero probability selected! cat=1679, probability=0, sample=0.811896265, prevBucket=0.811896205, curBucket=0.811896265</code></p>\n<p>Note how <code>prevBucket</code> and <code>curBucket</code>, which should be equal since this is a zero-probability bin, are in fact slightly different. This leads to the bin getting selected even though it has zero probability because this condition evaluates as true:<br>\n<a href=\"https://github.com/pytorch/pytorch/blob/master/aten/src/THC/THCTensorRandom.cuh#L257\">https://github.com/pytorch/pytorch/blob/master/aten/src/THC/THCTensorRandom.cuh#L257</a></p>\n<p>Assuming that such small drifts in floating point calculations are hard to avoid, maybe the condition should be made to work with a tolerance rather than a hard <code>&gt;</code> check? For example, we could select the bin only if curBucket &gt; prevBucket + eps.</p>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=20787943\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/t-vi\">@t-vi</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=4583066\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/apaszke\">@apaszke</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1310570\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/soumith\">@soumith</a> - Thoughts?</p>\n<p>Edit: updated the printout to also include the uniform sample value.</p>", "body_text": "Another finding from the thread for @t-vi's pull request  (#9960) is that there appears to be a problem with some of the floating point calculations in the code.\nFor example, I added a this printout:\nprintf(\"Zero probability selected! cat=%d, probability=%.9g, sample=%.9g, prevBucket=%.9g, curBucket=%.9g\\n\", cat, prob, sample, prevBucket, curBucket);\nat this line:\nhttps://github.com/pytorch/pytorch/blob/master/aten/src/THC/THCTensorRandom.cuh#L263\nand, when running the above script, got the output:\nZero probability selected! cat=1679, probability=0, sample=0.811896265, prevBucket=0.811896205, curBucket=0.811896265\nNote how prevBucket and curBucket, which should be equal since this is a zero-probability bin, are in fact slightly different. This leads to the bin getting selected even though it has zero probability because this condition evaluates as true:\nhttps://github.com/pytorch/pytorch/blob/master/aten/src/THC/THCTensorRandom.cuh#L257\nAssuming that such small drifts in floating point calculations are hard to avoid, maybe the condition should be made to work with a tolerance rather than a hard > check? For example, we could select the bin only if curBucket > prevBucket + eps.\n@t-vi @apaszke @soumith - Thoughts?\nEdit: updated the printout to also include the uniform sample value.", "body": "Another finding from the thread for @t-vi's pull request  (https://github.com/pytorch/pytorch/pull/9960) is that there appears to be a problem with some of the floating point calculations in the code.\r\n\r\nFor example, I added a this printout:\r\n```printf(\"Zero probability selected! cat=%d, probability=%.9g, sample=%.9g, prevBucket=%.9g, curBucket=%.9g\\n\", cat, prob, sample, prevBucket, curBucket);```\r\nat this line:\r\nhttps://github.com/pytorch/pytorch/blob/master/aten/src/THC/THCTensorRandom.cuh#L263\r\n\r\nand, when running the above script, got the output:\r\n```Zero probability selected! cat=1679, probability=0, sample=0.811896265, prevBucket=0.811896205, curBucket=0.811896265```\r\n\r\nNote how ```prevBucket``` and ```curBucket```, which should be equal since this is a zero-probability bin, are in fact slightly different. This leads to the bin getting selected even though it has zero probability because this condition evaluates as true:\r\nhttps://github.com/pytorch/pytorch/blob/master/aten/src/THC/THCTensorRandom.cuh#L257\r\n\r\nAssuming that such small drifts in floating point calculations are hard to avoid, maybe the condition should be made to work with a tolerance rather than a hard ```>``` check? For example, we could select the bin only if curBucket > prevBucket + eps.\r\n\r\n@t-vi @apaszke @soumith - Thoughts?\r\n\r\nEdit: updated the printout to also include the uniform sample value."}