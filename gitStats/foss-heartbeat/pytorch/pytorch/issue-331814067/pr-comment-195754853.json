{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/195754853", "pull_request_review_id": 129190232, "id": 195754853, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTc1NDg1Mw==", "diff_hunk": "@@ -96,12 +96,12 @@\n }\n \"\"\")\n \n-# Technically, no code should actually call _s_copy_from with a CPU self (this\n-# only can happen when the src is CUDA from a CPU kernel) but for\n-# completeness we fill out with a swap.\n+# NB: Hypothetically, someone could call s_copy_from directly and get an error\n+# message which claims something is not supported, when it actually is.  But\n+# the correct fix in this case was to NOT call copy_from\n FUNCTION_FROM_SWAP = CodeTemplate(\"\"\"\\\n Tensor & ${Type}::_s_copy_from(const Tensor & src, Tensor & dst, bool non_blocking) const {", "path": "aten/src/ATen/copy_wrapper.py", "position": 11, "original_position": 11, "commit_id": "cdf42cdb1df7b90da99aa5914ec208ab1d396d2e", "original_commit_id": "557a724094be5fd8737c29bee24b7c8b9a4f2e82", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "There's some hidden code that you can't see here which overrides `_s_copy_from` for CUDA tensors. So the general strategy is `_s_copy_from` is called from `s_copy` if a cpu-cuda conversion is involved; it's the double dispatch function.", "created_at": "2018-06-15T14:28:15Z", "updated_at": "2018-11-23T15:45:39Z", "html_url": "https://github.com/pytorch/pytorch/pull/8409#discussion_r195754853", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/8409", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/195754853"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/8409#discussion_r195754853"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/8409"}}, "body_html": "<p>There's some hidden code that you can't see here which overrides <code>_s_copy_from</code> for CUDA tensors. So the general strategy is <code>_s_copy_from</code> is called from <code>s_copy</code> if a cpu-cuda conversion is involved; it's the double dispatch function.</p>", "body_text": "There's some hidden code that you can't see here which overrides _s_copy_from for CUDA tensors. So the general strategy is _s_copy_from is called from s_copy if a cpu-cuda conversion is involved; it's the double dispatch function.", "in_reply_to_id": 195531215}