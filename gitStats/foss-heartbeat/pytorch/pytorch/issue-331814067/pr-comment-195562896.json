{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/195562896", "pull_request_review_id": 128956733, "id": 195562896, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTU2Mjg5Ng==", "diff_hunk": "@@ -232,6 +237,44 @@ is that if you know that you will only ever be called with `Tensor`, a\n direct `at::native` call will be more efficient (as it avoids a dynamic\n dispatch).\n \n+### How to handle broadcasting?\n+\n+Unlike our legacy TH bindings, ATen native functions do not automatically\n+handle broadcasting; you will have to insert the necessary broadcasting\n+calls yourself.\n+\n+When writing broadcasting code, we obey the convention that `op` is\n+broadcasting, while `s_op` (with the `s_` prefix) is not broadcasting.  The\n+relationship is best seen by an example of how you would implement broadcasting\n+addition out of non-broadcasting addition:\n+\n+```\n+#include <ATen/ExpandUtils.h>\n+\n+Tensor add(const Tensor& self, const Tensor& other) {\n+  Tensor b_self, b_other;\n+  std::tie(b_self, b_other) = expand_outplace(self, other, \"add\");\n+  return s_add(b_self, b_other);\n+}\n+\n+Tensor s_add(const Tensor& self, const Tensor& other) {\n+  // non-broadcasting implementation of addition\n+}\n+```\n+\n+For inplace operations, the convention looks like this:\n+\n+```\n+Tensor& add_(Tensor& self, const Tensor& other) {\n+  Tensor b_other = expand_inplace(self, other, \"add_\");\n+  return s_add_(self, b_other);\n+}\n+\n+Tensor& s_add_(Tensor& self, const Tensor& other) {\n+  // non-broadcasting implementation of inplace addition\n+}", "path": "aten/src/ATen/native/README.md", "position": 66, "original_position": 66, "commit_id": "cdf42cdb1df7b90da99aa5914ec208ab1d396d2e", "original_commit_id": "557a724094be5fd8737c29bee24b7c8b9a4f2e82", "user": {"login": "gchanan", "id": 3768583, "node_id": "MDQ6VXNlcjM3Njg1ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3768583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gchanan", "html_url": "https://github.com/gchanan", "followers_url": "https://api.github.com/users/gchanan/followers", "following_url": "https://api.github.com/users/gchanan/following{/other_user}", "gists_url": "https://api.github.com/users/gchanan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gchanan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gchanan/subscriptions", "organizations_url": "https://api.github.com/users/gchanan/orgs", "repos_url": "https://api.github.com/users/gchanan/repos", "events_url": "https://api.github.com/users/gchanan/events{/privacy}", "received_events_url": "https://api.github.com/users/gchanan/received_events", "type": "User", "site_admin": false}, "body": "nice!", "created_at": "2018-06-14T20:36:58Z", "updated_at": "2018-11-23T15:45:34Z", "html_url": "https://github.com/pytorch/pytorch/pull/8409#discussion_r195562896", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/8409", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/195562896"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/8409#discussion_r195562896"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/8409"}}, "body_html": "<p>nice!</p>", "body_text": "nice!"}