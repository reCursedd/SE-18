{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/195563400", "pull_request_review_id": 128956733, "id": 195563400, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTU2MzQwMA==", "diff_hunk": "@@ -1399,15 +1399,23 @@\n   variants: function\n \n \n+# NB: The function overloads are removed to avoid a nasty bug where\n+# you say at::native_sparse_coo_tensor(indices, values), and then\n+# it does the dispatch based on indices (wrong wrong wrong!)  Without\n+# the variants, you must call this on type directly.\n+#\n+# Maybe this meant we were supposed to take a dtype as an argument here.\n+# Hmmmmm.", "path": "aten/src/ATen/native/native_functions.yaml", "position": 245, "original_position": 10, "commit_id": "cdf42cdb1df7b90da99aa5914ec208ab1d396d2e", "original_commit_id": "be2e57a348a039cd4330e3b3f193ffd9321aedc1", "user": {"login": "gchanan", "id": 3768583, "node_id": "MDQ6VXNlcjM3Njg1ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3768583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gchanan", "html_url": "https://github.com/gchanan", "followers_url": "https://api.github.com/users/gchanan/followers", "following_url": "https://api.github.com/users/gchanan/following{/other_user}", "gists_url": "https://api.github.com/users/gchanan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gchanan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gchanan/subscriptions", "organizations_url": "https://api.github.com/users/gchanan/orgs", "repos_url": "https://api.github.com/users/gchanan/repos", "events_url": "https://api.github.com/users/gchanan/events{/privacy}", "received_events_url": "https://api.github.com/users/gchanan/received_events", "type": "User", "site_admin": false}, "body": "Also I think just taking a Type or ScalarType would work (as you suggest) -- you can do all the same logic that is implemented in tensor_new here.", "created_at": "2018-06-14T20:38:52Z", "updated_at": "2018-11-23T15:45:34Z", "html_url": "https://github.com/pytorch/pytorch/pull/8409#discussion_r195563400", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/8409", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/195563400"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/8409#discussion_r195563400"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/8409"}}, "body_html": "<p>Also I think just taking a Type or ScalarType would work (as you suggest) -- you can do all the same logic that is implemented in tensor_new here.</p>", "body_text": "Also I think just taking a Type or ScalarType would work (as you suggest) -- you can do all the same logic that is implemented in tensor_new here.", "in_reply_to_id": 195223278}