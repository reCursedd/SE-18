{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/195530372", "pull_request_review_id": 128916702, "id": 195530372, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTUzMDM3Mg==", "diff_hunk": "@@ -1,10 +1,84 @@\n #pragma once\n \n+#include \"ATen/Tensor.h\"\n #include \"ATen/TensorImpl.h\"\n+#include \"ATen/Error.h\"\n \n namespace at {\n struct SparseTensorImpl : public TensorImpl {\n-  explicit SparseTensorImpl(Type * type)\n-  : TensorImpl(type) {}\n+  // Stored in COO format, indices + values\n+\n+  std::vector<int64_t> size_;\n+  // INVARIANT: indices_.size(1) >= nnz_ && values_.size(0) >= nnz_\n+  int64_t nnz_ = 0;\n+  int64_t dimI_ = 0; // number of sparse dimensions\n+  int64_t dimV_ = 0; // number of dense dimensions\n+\n+  // 2-D tensor of nDim x nnz of indices. May have nnz dim bigger than nnz\n+  // as buffer, so we keep track of both\n+  Tensor indices_; // always a LongTensor\n+  Tensor values_;\n+\n+  // A sparse tensor is 'coalesced' if every index occurs at most once in\n+  // the indices tensor, and the indices are in sorted order.\n+  // Most math operations can only be performed on coalesced sparse tensors,\n+  // because many algorithms proceed by merging two sorted lists (of indices).\n+  bool coalesced_ = false;\n+\n+public:\n+  // Public for now...\n+  explicit SparseTensorImpl(Type * type);\n+\n+  int64_t nnz() const { return nnz_; }\n+  int64_t dimI() const { return dimI_; }\n+  int64_t dimV() const { return dimV_; }\n+  bool coalesced() const { return coalesced_; }\n+  Tensor indices() const { return indices_; }\n+  Tensor values() const { return values_; }\n+\n+  const char * toString() const override;\n+  IntList sizes() const override;\n+  IntList strides() const override;\n+  int64_t dim() const override;\n+  Scalar localScalar() override;\n+  void * unsafeGetTH(bool retain) override;\n+  std::unique_ptr<Storage> storage() override;\n+\n+  // Some ops do some manual size fiddling.\n+  // TODO: Figure out a more safe way to provide this functionality\n+  std::vector<int64_t>& _sizes_mut() { return size_; }\n+\n+  // WARNING: This function does NOT preserve invariants of dimI/dimV with\n+  // respect to indices and values\n+  void raw_resize_(int64_t dimI, int64_t dimV, ArrayRef<int64_t> size) {", "path": "aten/src/ATen/SparseTensorImpl.h", "position": null, "original_position": 55, "commit_id": "cdf42cdb1df7b90da99aa5914ec208ab1d396d2e", "original_commit_id": "557a724094be5fd8737c29bee24b7c8b9a4f2e82", "user": {"login": "gchanan", "id": 3768583, "node_id": "MDQ6VXNlcjM3Njg1ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3768583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gchanan", "html_url": "https://github.com/gchanan", "followers_url": "https://api.github.com/users/gchanan/followers", "following_url": "https://api.github.com/users/gchanan/following{/other_user}", "gists_url": "https://api.github.com/users/gchanan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gchanan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gchanan/subscriptions", "organizations_url": "https://api.github.com/users/gchanan/orgs", "repos_url": "https://api.github.com/users/gchanan/repos", "events_url": "https://api.github.com/users/gchanan/events{/privacy}", "received_events_url": "https://api.github.com/users/gchanan/received_events", "type": "User", "site_admin": false}, "body": "maybe, as in https://github.com/pytorch/pytorch/pull/8468, we should add `legacy` to the name?", "created_at": "2018-06-14T18:39:57Z", "updated_at": "2018-11-23T15:45:33Z", "html_url": "https://github.com/pytorch/pytorch/pull/8409#discussion_r195530372", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/8409", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/195530372"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/8409#discussion_r195530372"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/8409"}}, "body_html": "<p>maybe, as in <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"332227437\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/8468\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/pytorch/pytorch/pull/8468/hovercard\" href=\"https://github.com/pytorch/pytorch/pull/8468\">#8468</a>, we should add <code>legacy</code> to the name?</p>", "body_text": "maybe, as in #8468, we should add legacy to the name?"}