{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/195768463", "pull_request_review_id": 129202774, "id": 195768463, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTc2ODQ2Mw==", "diff_hunk": "@@ -0,0 +1,469 @@\n+#include <ATen/ATen.h>\n+#include <ATen/NativeFunctions.h>\n+#include <ATen/SparseTensorRef.h>\n+#include <ATen/ExpandUtils.h>\n+\n+namespace at { namespace native {\n+\n+namespace {\n+  // NB: Even though some of the functions we have ported are CUDA\n+  // friendly, flipping the switch between native and non-native is\n+  // an all or nothing affair, because the internal representation\n+  // is different\n+  static bool _has_native(const Tensor& self) {\n+    return self.is_sparse() && !self.is_cuda();\n+  }\n+\n+  static bool _type_has_native(const Type& dtype) {\n+    return dtype.is_sparse() && !dtype.is_cuda();\n+  }\n+}\n+\n+// These native operations are not \"really\" native; they're actually just bridge\n+// functions that decide whether or not to call native sparse functions, or\n+// TH functions.  This file should be temporary; when all of TH gets ported, we\n+// can just use the native mechanism straight.\n+\n+// TODO: Maybe the foo_ variants should call th_foo_\n+\n+Tensor norm(const Tensor & self, Scalar p) {\n+  if (_has_native(self)) {\n+    return native_norm(self, p);\n+  } else {\n+    return th_norm(self, p);\n+  }\n+}\n+\n+Tensor clone(const Tensor& self) {\n+  if (_has_native(self)) {\n+    return native_clone(self);\n+  } else {\n+    return th_clone(self);\n+  }\n+}\n+\n+Tensor& resize_as_(Tensor& self, const Tensor& the_template) {\n+  if (_has_native(self)) {\n+    return native_resize_as_(self, the_template);\n+  } else {\n+    return th_resize_as_(self, the_template);\n+  }\n+}\n+\n+Tensor& pow_out(Tensor& result, const Tensor& self, Scalar exponent) {\n+  if (_has_native(self)) {\n+    return native_pow_out(result, self, exponent);\n+  } else {\n+    return th_pow_out(result, self, exponent);\n+  }\n+}\n+\n+Tensor pow(const Tensor& self, Scalar exponent) {\n+  if (_has_native(self)) {\n+    return native_pow(self, exponent);\n+  } else {\n+    return th_pow(self, exponent);\n+  }\n+}\n+\n+Tensor& zero_(Tensor& self) {\n+  if (_has_native(self)) {\n+    return native_zero_(self);\n+  } else {\n+    return th_zero_(self);\n+  }\n+}\n+\n+// Note [CPU sparse is globally native]\n+// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+// The current state of affairs is as follows:\n+//\n+//  - CPU sparse functionality is implemented natively\n+//  - CUDA sparse functionality, and all other functionality, are implemented\n+//    in TH.\n+//\n+// Thus, we need these trampoline functions, to help us decide whether or\n+// not we can go to native implementations or not.  We expect the trampolines\n+// to go away when things get ported to native for real.\n+\n+// Note [Multiple dispatch to sparse]\n+// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+// In principle, there are some degrees of freedom in how we could gotten to our\n+// native CPU sparse implementations.  In particular, the handling of how we are\n+// simulating multiple dispatch is asymmetric with how th_add_out handles the\n+// multiple dispatch.  We justify this in two ways: (1) knowing when to\n+// correctly dispatch to sparse requires us to know how what overloads; so we're\n+// less likely to get it \"wrong\" if we put it all together, and (2) all of this\n+// is temporary, because we're aiming to natively support multiple dispatch in\n+// our system.\n+\n+Tensor& add_out(Tensor& result, const Tensor& self, const Tensor& other, Scalar alpha) {\n+  if (!self.is_cuda()) {\n+    // See Note [CPU sparse is globally native] and Note [Multiple dispatch to sparse]\n+    auto self_sparse = self.is_sparse();\n+    auto other_sparse = other.is_sparse();\n+    if (self_sparse && other_sparse) {\n+      Tensor b_self, b_other;\n+      std::tie(b_self, b_other) = expand_outplace(self, other, \"add_out\");", "path": "aten/src/ATen/native/LegacyBridge.cpp", "position": 125, "original_position": 107, "commit_id": "cdf42cdb1df7b90da99aa5914ec208ab1d396d2e", "original_commit_id": "557a724094be5fd8737c29bee24b7c8b9a4f2e82", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "I bet it only actually works if it's a dense tensor that gets broadcasted, cuz I'm pretty sure we don't have expand on sparse :) (in any case the tests didn't see anything wrong).\r\n\r\nEDIT: No, this is wrong! I bet this doesn't actually work at all.", "created_at": "2018-06-15T14:59:38Z", "updated_at": "2018-11-23T15:45:39Z", "html_url": "https://github.com/pytorch/pytorch/pull/8409#discussion_r195768463", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/8409", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/195768463"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/8409#discussion_r195768463"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/8409"}}, "body_html": "<p>I bet it only actually works if it's a dense tensor that gets broadcasted, cuz I'm pretty sure we don't have expand on sparse :) (in any case the tests didn't see anything wrong).</p>\n<p>EDIT: No, this is wrong! I bet this doesn't actually work at all.</p>", "body_text": "I bet it only actually works if it's a dense tensor that gets broadcasted, cuz I'm pretty sure we don't have expand on sparse :) (in any case the tests didn't see anything wrong).\nEDIT: No, this is wrong! I bet this doesn't actually work at all.", "in_reply_to_id": 195561340}