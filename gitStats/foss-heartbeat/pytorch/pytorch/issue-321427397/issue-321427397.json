{"url": "https://api.github.com/repos/pytorch/pytorch/issues/7408", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/7408/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/7408/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/7408/events", "html_url": "https://github.com/pytorch/pytorch/pull/7408", "id": 321427397, "node_id": "MDExOlB1bGxSZXF1ZXN0MTg2ODE1Mzk1", "number": 7408, "title": " Use set_type to implement type conversions in C++ API ", "user": {"login": "goldsborough", "id": 6429851, "node_id": "MDQ6VXNlcjY0Mjk4NTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/6429851?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goldsborough", "html_url": "https://github.com/goldsborough", "followers_url": "https://api.github.com/users/goldsborough/followers", "following_url": "https://api.github.com/users/goldsborough/following{/other_user}", "gists_url": "https://api.github.com/users/goldsborough/gists{/gist_id}", "starred_url": "https://api.github.com/users/goldsborough/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goldsborough/subscriptions", "organizations_url": "https://api.github.com/users/goldsborough/orgs", "repos_url": "https://api.github.com/users/goldsborough/repos", "events_url": "https://api.github.com/users/goldsborough/events{/privacy}", "received_events_url": "https://api.github.com/users/goldsborough/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-05-09T04:34:18Z", "updated_at": "2018-11-23T15:43:45Z", "closed_at": "2018-05-09T21:01:20Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/7408", "html_url": "https://github.com/pytorch/pytorch/pull/7408", "diff_url": "https://github.com/pytorch/pytorch/pull/7408.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/7408.patch"}, "body_html": "<p>This PR implements in-place type conversions in the C++ API/autogradpp. More precisely:</p>\n<ol>\n<li>Implements <code>to(backend)</code>, <code>to(scalar_type)</code> and <code>to(type)</code> using <code>at::detail::set_type</code>, which changes a <code>Variable</code>'s <code>data()</code>'s type, as well as the <code>Variable</code>'s type itself. This effectively means type conversions can be performed in-place on Variables, where autogradpp had to design its API around re-initializing variables either in CUDA or CPU \"mode\".</li>\n<li>Removes the <code>cuda_</code> flag from <code>Module</code>. The type of variables is now no longer a property of the module, but simply a property of the parameters of a module. This is equivalent to Python.</li>\n<li>Removes <code>DefaultTensor</code> by either constructing new variables on the CPU, or constructing variables using dispatch from other variable's <code>.type()</code> member, to make them the same type.</li>\n<li>Small naming change from <code>params_</code> to <code>parameters_</code>. I've kept the map a public member for now, but this will change in another PR that better encapsulates them.</li>\n<li>Also adds <code>zero_grad()</code>, to be consistent with the Python API.</li>\n</ol>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=3605224\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ebetica\">@ebetica</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=88510\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/jgehring\">@jgehring</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=4583066\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/apaszke\">@apaszke</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=13564\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ezyang\">@ezyang</a></p>", "body_text": "This PR implements in-place type conversions in the C++ API/autogradpp. More precisely:\n\nImplements to(backend), to(scalar_type) and to(type) using at::detail::set_type, which changes a Variable's data()'s type, as well as the Variable's type itself. This effectively means type conversions can be performed in-place on Variables, where autogradpp had to design its API around re-initializing variables either in CUDA or CPU \"mode\".\nRemoves the cuda_ flag from Module. The type of variables is now no longer a property of the module, but simply a property of the parameters of a module. This is equivalent to Python.\nRemoves DefaultTensor by either constructing new variables on the CPU, or constructing variables using dispatch from other variable's .type() member, to make them the same type.\nSmall naming change from params_ to parameters_. I've kept the map a public member for now, but this will change in another PR that better encapsulates them.\nAlso adds zero_grad(), to be consistent with the Python API.\n\n@ebetica @jgehring @apaszke @ezyang", "body": "This PR implements in-place type conversions in the C++ API/autogradpp. More precisely:\r\n1. Implements `to(backend)`, `to(scalar_type)` and `to(type)` using `at::detail::set_type`, which changes a `Variable`'s `data()`'s type, as well as the `Variable`'s type itself. This effectively means type conversions can be performed in-place on Variables, where autogradpp had to design its API around re-initializing variables either in CUDA or CPU \"mode\".\r\n2. Removes the `cuda_` flag from `Module`. The type of variables is now no longer a property of the module, but simply a property of the parameters of a module. This is equivalent to Python.\r\n3. Removes `DefaultTensor` by either constructing new variables on the CPU, or constructing variables using dispatch from other variable's `.type()` member, to make them the same type.\r\n4. Small naming change from `params_` to `parameters_`. I've kept the map a public member for now, but this will change in another PR that better encapsulates them.\r\n5. Also adds `zero_grad()`, to be consistent with the Python API.\r\n\r\n@ebetica @jgehring @apaszke @ezyang "}