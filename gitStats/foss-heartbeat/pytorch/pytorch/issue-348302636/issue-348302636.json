{"url": "https://api.github.com/repos/pytorch/pytorch/issues/10298", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/10298/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/10298/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/10298/events", "html_url": "https://github.com/pytorch/pytorch/issues/10298", "id": 348302636, "node_id": "MDU6SXNzdWUzNDgzMDI2MzY=", "number": 10298, "title": "[feature request] Runtime warning for inappropriate labels (among others)", "user": {"login": "domaala", "id": 2824507, "node_id": "MDQ6VXNlcjI4MjQ1MDc=", "avatar_url": "https://avatars1.githubusercontent.com/u/2824507?v=4", "gravatar_id": "", "url": "https://api.github.com/users/domaala", "html_url": "https://github.com/domaala", "followers_url": "https://api.github.com/users/domaala/followers", "following_url": "https://api.github.com/users/domaala/following{/other_user}", "gists_url": "https://api.github.com/users/domaala/gists{/gist_id}", "starred_url": "https://api.github.com/users/domaala/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/domaala/subscriptions", "organizations_url": "https://api.github.com/users/domaala/orgs", "repos_url": "https://api.github.com/users/domaala/repos", "events_url": "https://api.github.com/users/domaala/events{/privacy}", "received_events_url": "https://api.github.com/users/domaala/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 443483881, "node_id": "MDU6TGFiZWw0NDM0ODM4ODE=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/todo", "name": "todo", "color": "c2e0c6", "default": false}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-08-07T12:38:14Z", "updated_at": "2018-08-13T18:00:21Z", "closed_at": null, "author_association": "CONTRIBUTOR", "body_html": "<p>While you can get an exception when passing integers where floats are required, I believe there are no checks that actually make sure that you are using the expected <strong>values</strong> within your tensors. In turn, this makes tracking problems in your models a bit more challenging.</p>\n<p>For instance, when using <a href=\"https://pytorch.org/docs/stable/nn.html#torch.nn.CosineEmbeddingLoss\" rel=\"nofollow\"><code>nn.CosineEmbeddingLoss</code></a>, that asks for <code>target</code> to take either <code>1</code> or <code>-1</code>, nothing stops you from providing something else and experiencing weird model behaviour when the method silently interpretes it in its own way.</p>\n<p>For example:</p>\n<pre><code>criterion = torch.nn.CosineEmbeddingLoss()\n\nvec1 = torch.tensor([[1., 2., 3.]])\nvec2 = torch.tensor([[1., 2., 3.]])\n\nloss1 = criterion(a, b, torch.tensor([1.])) # returns 0\nloss2 = criterion(a, b, torch.tensor([0.])) # returns 0\nloss3 = criterion(a, b, torch.tensor([-0.5])) # returns 0\nloss4 = criterion(a, b, torch.tensor([-0.99])) # returns 0\nloss5 = criterion(a, b, torch.tensor([-1.])) # returns 1\n</code></pre>\n<p>To give an anecdote, I thought that the method takes <code>0</code> and <code>1</code> instead of <code>-1</code> and <code>1</code> and the rest is a long debugging history. :)</p>\n<h2>System Info</h2>\n<p>PyTorch version: 0.4.0<br>\nIs debug build: No<br>\nCUDA used to build PyTorch: 8.0.61</p>\n<p>OS: Ubuntu 16.04.3 LTS<br>\nGCC version: (Ubuntu 5.4.0-6ubuntu1~16.04.9) 5.4.0 20160609<br>\nCMake version: version 3.5.1</p>\n<p>Python version: 3.5<br>\nIs CUDA available: Yes<br>\nCUDA runtime version: Could not collect<br>\nGPU models and configuration:<br>\nGPU 0: GeForce GTX 1080<br>\nGPU 1: GeForce GTX 1080</p>\n<p>Nvidia driver version: 390.30<br>\ncuDNN version: Probably one of the following:<br>\n/usr/local/cuda-8.0/targets/x86_64-linux/lib/libcudnn.so.5.1.5<br>\n/usr/local/cuda-8.0/targets/x86_64-linux/lib/libcudnn.so.6.0.21<br>\n/usr/local/cuda-8.0/targets/x86_64-linux/lib/libcudnn_static.a</p>\n<p>Versions of relevant libraries:<br>\n[pip3] numpy (1.14.1)<br>\n[pip3] torch (0.4.0)<br>\n[pip3] torchtext (0.2.3)<br>\n[pip3] torchvision (0.2.1)<br>\n[conda] Could not collect</p>", "body_text": "While you can get an exception when passing integers where floats are required, I believe there are no checks that actually make sure that you are using the expected values within your tensors. In turn, this makes tracking problems in your models a bit more challenging.\nFor instance, when using nn.CosineEmbeddingLoss, that asks for target to take either 1 or -1, nothing stops you from providing something else and experiencing weird model behaviour when the method silently interpretes it in its own way.\nFor example:\ncriterion = torch.nn.CosineEmbeddingLoss()\n\nvec1 = torch.tensor([[1., 2., 3.]])\nvec2 = torch.tensor([[1., 2., 3.]])\n\nloss1 = criterion(a, b, torch.tensor([1.])) # returns 0\nloss2 = criterion(a, b, torch.tensor([0.])) # returns 0\nloss3 = criterion(a, b, torch.tensor([-0.5])) # returns 0\nloss4 = criterion(a, b, torch.tensor([-0.99])) # returns 0\nloss5 = criterion(a, b, torch.tensor([-1.])) # returns 1\n\nTo give an anecdote, I thought that the method takes 0 and 1 instead of -1 and 1 and the rest is a long debugging history. :)\nSystem Info\nPyTorch version: 0.4.0\nIs debug build: No\nCUDA used to build PyTorch: 8.0.61\nOS: Ubuntu 16.04.3 LTS\nGCC version: (Ubuntu 5.4.0-6ubuntu1~16.04.9) 5.4.0 20160609\nCMake version: version 3.5.1\nPython version: 3.5\nIs CUDA available: Yes\nCUDA runtime version: Could not collect\nGPU models and configuration:\nGPU 0: GeForce GTX 1080\nGPU 1: GeForce GTX 1080\nNvidia driver version: 390.30\ncuDNN version: Probably one of the following:\n/usr/local/cuda-8.0/targets/x86_64-linux/lib/libcudnn.so.5.1.5\n/usr/local/cuda-8.0/targets/x86_64-linux/lib/libcudnn.so.6.0.21\n/usr/local/cuda-8.0/targets/x86_64-linux/lib/libcudnn_static.a\nVersions of relevant libraries:\n[pip3] numpy (1.14.1)\n[pip3] torch (0.4.0)\n[pip3] torchtext (0.2.3)\n[pip3] torchvision (0.2.1)\n[conda] Could not collect", "body": "While you can get an exception when passing integers where floats are required, I believe there are no checks that actually make sure that you are using the expected **values** within your tensors. In turn, this makes tracking problems in your models a bit more challenging.\r\n\r\nFor instance, when using [`nn.CosineEmbeddingLoss`](https://pytorch.org/docs/stable/nn.html#torch.nn.CosineEmbeddingLoss), that asks for `target` to take either `1` or `-1`, nothing stops you from providing something else and experiencing weird model behaviour when the method silently interpretes it in its own way.\r\n\r\nFor example:\r\n\r\n```\r\ncriterion = torch.nn.CosineEmbeddingLoss()\r\n\r\nvec1 = torch.tensor([[1., 2., 3.]])\r\nvec2 = torch.tensor([[1., 2., 3.]])\r\n\r\nloss1 = criterion(a, b, torch.tensor([1.])) # returns 0\r\nloss2 = criterion(a, b, torch.tensor([0.])) # returns 0\r\nloss3 = criterion(a, b, torch.tensor([-0.5])) # returns 0\r\nloss4 = criterion(a, b, torch.tensor([-0.99])) # returns 0\r\nloss5 = criterion(a, b, torch.tensor([-1.])) # returns 1\r\n```\r\n\r\nTo give an anecdote, I thought that the method takes `0` and `1` instead of `-1` and `1` and the rest is a long debugging history. :)\r\n\r\n## System Info\r\nPyTorch version: 0.4.0\r\nIs debug build: No\r\nCUDA used to build PyTorch: 8.0.61\r\n\r\nOS: Ubuntu 16.04.3 LTS\r\nGCC version: (Ubuntu 5.4.0-6ubuntu1~16.04.9) 5.4.0 20160609\r\nCMake version: version 3.5.1\r\n\r\nPython version: 3.5\r\nIs CUDA available: Yes\r\nCUDA runtime version: Could not collect\r\nGPU models and configuration:\r\nGPU 0: GeForce GTX 1080\r\nGPU 1: GeForce GTX 1080\r\n\r\nNvidia driver version: 390.30\r\ncuDNN version: Probably one of the following:\r\n/usr/local/cuda-8.0/targets/x86_64-linux/lib/libcudnn.so.5.1.5\r\n/usr/local/cuda-8.0/targets/x86_64-linux/lib/libcudnn.so.6.0.21\r\n/usr/local/cuda-8.0/targets/x86_64-linux/lib/libcudnn_static.a\r\n\r\nVersions of relevant libraries:\r\n[pip3] numpy (1.14.1)\r\n[pip3] torch (0.4.0)\r\n[pip3] torchtext (0.2.3)\r\n[pip3] torchvision (0.2.1)\r\n[conda] Could not collect"}