{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/143300086", "pull_request_review_id": 67799690, "id": 143300086, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0MzMwMDA4Ng==", "diff_hunk": "@@ -125,28 +125,41 @@ static ScalarType getATenScalarType(const DLDataType& dtype) {\n }\n \n \n-// This function returns a shared_ptr to DLpack tensor constructed out ATen tensor\n-DLTensor* toDLPack(const Tensor& src, DLTensor* dlTensor) {\n-  dlTensor->data = src.data_ptr();\n+void destructor(void * ctx, void * arg) {\n+  static_cast<TensorImpl*>(ctx)->release();\n+  delete static_cast<DLManagedTensor*>(arg);\n+}\n+\n+\n+// This function returns a shared_ptr to DLpack tensor constructed out of ATen tensor\n+DLManagedTensor* toDLPack(const Tensor& src) {\n+  // retain the underlying storage to make sure it doesn't go out of scope", "path": "torch/lib/ATen/DLConvertor.cpp", "position": null, "original_position": 15, "commit_id": "284521837e00213f0f826cfd5b5cb02fe5d796ad", "original_commit_id": "78facc4c5e27fb3c7ea2dd7ad80564c9aaa15bc4", "user": {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, "body": "We should not be calling retain and release on at::Tensor directly. Instead we should just keep a struct that holds the tensor:\r\n\r\n```\r\nstruct ATenDLTensor {\r\n   at::Tensor handle; // this keeps the aten tensor alive\r\n   DLManagedTensor tensor; // this is what gets returned\r\n};\r\n....\r\nATenDLTensor * dlMTensor = new ATenDLTensor;\r\ndlMTensor.handle = src;\r\ndlMTensor->tensor->ctx = dlMTensor;\r\ndlMTensor->tensor->destructor = &destructor;\r\n...\r\nvoid destructor(void * ctx, void * arg) {\r\n  delete static_cast<AtenDLTensor*>(ctx);\r\n}\r\n...\r\nreturn &dlMTensor.tensor;\r\n```", "created_at": "2017-10-06T21:39:52Z", "updated_at": "2018-11-23T15:35:05Z", "html_url": "https://github.com/pytorch/pytorch/pull/2998#discussion_r143300086", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/2998", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/143300086"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/2998#discussion_r143300086"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/2998"}}, "body_html": "<p>We should not be calling retain and release on at::Tensor directly. Instead we should just keep a struct that holds the tensor:</p>\n<pre><code>struct ATenDLTensor {\n   at::Tensor handle; // this keeps the aten tensor alive\n   DLManagedTensor tensor; // this is what gets returned\n};\n....\nATenDLTensor * dlMTensor = new ATenDLTensor;\ndlMTensor.handle = src;\ndlMTensor-&gt;tensor-&gt;ctx = dlMTensor;\ndlMTensor-&gt;tensor-&gt;destructor = &amp;destructor;\n...\nvoid destructor(void * ctx, void * arg) {\n  delete static_cast&lt;AtenDLTensor*&gt;(ctx);\n}\n...\nreturn &amp;dlMTensor.tensor;\n</code></pre>", "body_text": "We should not be calling retain and release on at::Tensor directly. Instead we should just keep a struct that holds the tensor:\nstruct ATenDLTensor {\n   at::Tensor handle; // this keeps the aten tensor alive\n   DLManagedTensor tensor; // this is what gets returned\n};\n....\nATenDLTensor * dlMTensor = new ATenDLTensor;\ndlMTensor.handle = src;\ndlMTensor->tensor->ctx = dlMTensor;\ndlMTensor->tensor->destructor = &destructor;\n...\nvoid destructor(void * ctx, void * arg) {\n  delete static_cast<AtenDLTensor*>(ctx);\n}\n...\nreturn &dlMTensor.tensor;"}