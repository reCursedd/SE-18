{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/143864150", "pull_request_review_id": 68439502, "id": 143864150, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0Mzg2NDE1MA==", "diff_hunk": "@@ -125,28 +125,41 @@ static ScalarType getATenScalarType(const DLDataType& dtype) {\n }\n \n \n-// This function returns a shared_ptr to DLpack tensor constructed out ATen tensor\n-DLTensor* toDLPack(const Tensor& src, DLTensor* dlTensor) {\n-  dlTensor->data = src.data_ptr();\n+void destructor(void * ctx, void * arg) {\n+  static_cast<TensorImpl*>(ctx)->release();\n+  delete static_cast<DLManagedTensor*>(arg);\n+}\n+\n+\n+// This function returns a shared_ptr to DLpack tensor constructed out of ATen tensor\n+DLManagedTensor* toDLPack(const Tensor& src) {\n+  // retain the underlying storage to make sure it doesn't go out of scope\n+  src.get()->retain();\n+  // since we manage memory now, we can do this allocation here\n+  DLManagedTensor* dlMTensor(new DLManagedTensor);\n+  dlMTensor->dlTensor.data = src.data_ptr();\n   int64_t device_id = 0;\n   if (src.type().isCuda()) {\n     device_id = src.get_device();\n   }\n-  dlTensor->ctx = getDLContext(src.type(), device_id);\n-  dlTensor->ndim = src.dim();\n-  dlTensor->dtype = getDLDataType(src.type());\n-  dlTensor->shape = const_cast<int64_t*>(src.sizes().data());\n-  dlTensor->strides = const_cast<int64_t*>(src.strides().data());\n-  dlTensor->byte_offset = 0;\n-  return dlTensor;\n+  dlMTensor->dlTensor.ctx = getDLContext(src.type(), device_id);\n+  dlMTensor->dlTensor.ndim = src.dim();\n+  dlMTensor->dlTensor.dtype = getDLDataType(src.type());\n+  dlMTensor->dlTensor.shape = const_cast<int64_t*>(src.sizes().data());\n+  dlMTensor->dlTensor.strides = const_cast<int64_t*>(src.strides().data());\n+  dlMTensor->dlTensor.byte_offset = 0;\n+  dlMTensor->ctx = src.get();\n+  dlMTensor->destructor = &destructor;\n+  return dlMTensor;\n }\n \n \n-Tensor fromDLPack(const DLTensor* src) {\n-  Backend backend = getATenBackend(src->ctx);\n-  ScalarType stype = getATenScalarType(src->dtype);\n+Tensor fromDLPack(const DLManagedTensor* src) {\n+  Backend backend = getATenBackend(src->dlTensor.ctx);\n+  ScalarType stype = getATenScalarType(src->dlTensor.dtype);\n   return getType(backend, stype).tensorFromBlob(", "path": "torch/lib/ATen/DLConvertor.cpp", "position": null, "original_position": 49, "commit_id": "284521837e00213f0f826cfd5b5cb02fe5d796ad", "original_commit_id": "78facc4c5e27fb3c7ea2dd7ad80564c9aaa15bc4", "user": {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, "body": "We are going to need to modify tensorFromBlob to take a std::function that is called when the underlying storage is no longer used.", "created_at": "2017-10-10T21:58:52Z", "updated_at": "2018-11-23T15:35:13Z", "html_url": "https://github.com/pytorch/pytorch/pull/2998#discussion_r143864150", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/2998", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/143864150"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/2998#discussion_r143864150"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/2998"}}, "body_html": "<p>We are going to need to modify tensorFromBlob to take a std::function that is called when the underlying storage is no longer used.</p>", "body_text": "We are going to need to modify tensorFromBlob to take a std::function that is called when the underlying storage is no longer used."}