{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/143239067", "pull_request_review_id": 67727061, "id": 143239067, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0MzIzOTA2Nw==", "diff_hunk": "@@ -114,6 +114,19 @@ typedef struct {\n   /*! \\brief The offset in bytes to the beginning pointer to data */\n   uint64_t byte_offset;\n } DLTensor;\n+\n+/*!\n+ * \\ manage memory of DLTensor\n+ */\n+typedef struct {\n+  /*! DLTensor which is being memory managed*/\n+  DLTensor dlTensor;\n+  /* context in which DLTensor is used in framework*/\n+  void * ctx;\n+ /* Destructor signature */\n+  void (*destructor)(void * ctx, void * deleter_arg);\n+} DLManagedTensor;\n+", "path": "torch/lib/ATen/dlpack.h", "position": null, "original_position": 16, "commit_id": "284521837e00213f0f826cfd5b5cb02fe5d796ad", "original_commit_id": "78facc4c5e27fb3c7ea2dd7ad80564c9aaa15bc4", "user": {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, "body": "This needs to eventually make it back to dlpack. The point is that frameworks have to _agree_ on destructor approach used in dlpack, otherwise why use DLPack? We could instead just make direct converters from PyTorch <-> C2 and everything would be simpler.\r\n\r\nBut we don't want to bother the actual dlpack repo until we have actually built up some experience using this form and thing it works well.", "created_at": "2017-10-06T16:48:43Z", "updated_at": "2018-11-23T15:35:05Z", "html_url": "https://github.com/pytorch/pytorch/pull/2998#discussion_r143239067", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/2998", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/143239067"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/2998#discussion_r143239067"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/2998"}}, "body_html": "<p>This needs to eventually make it back to dlpack. The point is that frameworks have to <em>agree</em> on destructor approach used in dlpack, otherwise why use DLPack? We could instead just make direct converters from PyTorch &lt;-&gt; C2 and everything would be simpler.</p>\n<p>But we don't want to bother the actual dlpack repo until we have actually built up some experience using this form and thing it works well.</p>", "body_text": "This needs to eventually make it back to dlpack. The point is that frameworks have to agree on destructor approach used in dlpack, otherwise why use DLPack? We could instead just make direct converters from PyTorch <-> C2 and everything would be simpler.\nBut we don't want to bother the actual dlpack repo until we have actually built up some experience using this form and thing it works well.", "in_reply_to_id": 143213815}