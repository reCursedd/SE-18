{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/144068035", "pull_request_review_id": 68673192, "id": 144068035, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0NDA2ODAzNQ==", "diff_hunk": "@@ -114,6 +114,22 @@ typedef struct {\n   /*! \\brief The offset in bytes to the beginning pointer to data */\n   uint64_t byte_offset;\n } DLTensor;\n+\n+/*!\n+ * \\brief C Tensor object, manage memory of DLTensor.\n+ */\n+typedef struct {\n+  /*! \\DLTensor which is being memory managed */\n+  DLTensor dlTensor;\n+  /*! \\brief context in which DLManagedTensor is used in a framework */\n+  void * ctx;\n+  /*! \\brief Destructor signature void (*)(void*) - this should be called to\n+   *   destruct ctx which holds the DLManagedTensor. It can be NULL if there is\n+   *   no way for the caller to provide a reasonable destructor.\n+   */\n+  void (*destructor)(void * ctx) = NULL;", "path": "torch/lib/ATen/dlpack.h", "position": null, "original_position": 17, "commit_id": "284521837e00213f0f826cfd5b5cb02fe5d796ad", "original_commit_id": "7838c0197eaa8cd077bf20918c17cc4edbf9f6e7", "user": {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, "body": "The destructor needs both arguments it had before because other implementations may use them (even if the PyTorch implementation does not need it). This is a C idiom that allows for flexible callbacks:\r\n\r\n```\r\nvoid (*destructor)(DLManagedTensor * self, void * ctx); \r\n```\r\n `= NULL;` is a C++ism so it can't go in this C-only.", "created_at": "2017-10-11T16:42:25Z", "updated_at": "2018-11-23T15:35:14Z", "html_url": "https://github.com/pytorch/pytorch/pull/2998#discussion_r144068035", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/2998", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/144068035"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/2998#discussion_r144068035"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/2998"}}, "body_html": "<p>The destructor needs both arguments it had before because other implementations may use them (even if the PyTorch implementation does not need it). This is a C idiom that allows for flexible callbacks:</p>\n<pre><code>void (*destructor)(DLManagedTensor * self, void * ctx); \n</code></pre>\n<p><code>= NULL;</code> is a C++ism so it can't go in this C-only.</p>", "body_text": "The destructor needs both arguments it had before because other implementations may use them (even if the PyTorch implementation does not need it). This is a C idiom that allows for flexible callbacks:\nvoid (*destructor)(DLManagedTensor * self, void * ctx); \n\n= NULL; is a C++ism so it can't go in this C-only."}