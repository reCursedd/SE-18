{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/138143982", "pull_request_review_id": 61901787, "id": 138143982, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzODE0Mzk4Mg==", "diff_hunk": "@@ -141,12 +141,10 @@ def test_accumulate_grad(self):\n             y.backward(go1, retain_graph=True)\n             x_grad = x.grad\n             x_grad_clone = x.grad.data.clone()\n-\n-            del x\n             y.backward(go2)\n \n             # That's the only case when we can accumulate in-place\n-            if start_volatile and end_volatile:\n+            if start_volatile:", "path": "test/test_autograd.py", "position": null, "original_position": 10, "commit_id": "e281c83541d5d06a4f149d51bb51ad426813bc56", "original_commit_id": "afa8bdcd28be0147df9cd97286c792e39c2f2608", "user": {"login": "colesbury", "id": 655866, "node_id": "MDQ6VXNlcjY1NTg2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/655866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colesbury", "html_url": "https://github.com/colesbury", "followers_url": "https://api.github.com/users/colesbury/followers", "following_url": "https://api.github.com/users/colesbury/following{/other_user}", "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions", "organizations_url": "https://api.github.com/users/colesbury/orgs", "repos_url": "https://api.github.com/users/colesbury/repos", "events_url": "https://api.github.com/users/colesbury/events{/privacy}", "received_events_url": "https://api.github.com/users/colesbury/received_events", "type": "User", "site_admin": false}, "body": "This matches the old behavior for most scenarios (where the parent variable `x` doesn't go out of scope).", "created_at": "2017-09-11T17:54:16Z", "updated_at": "2018-11-23T15:34:34Z", "html_url": "https://github.com/pytorch/pytorch/pull/2676#discussion_r138143982", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/2676", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/138143982"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/2676#discussion_r138143982"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/2676"}}, "body_html": "<p>This matches the old behavior for most scenarios (where the parent variable <code>x</code> doesn't go out of scope).</p>", "body_text": "This matches the old behavior for most scenarios (where the parent variable x doesn't go out of scope).", "in_reply_to_id": 138134951}