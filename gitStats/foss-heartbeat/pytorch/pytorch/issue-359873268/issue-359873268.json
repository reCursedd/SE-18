{"url": "https://api.github.com/repos/pytorch/pytorch/issues/11633", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/11633/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/11633/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/11633/events", "html_url": "https://github.com/pytorch/pytorch/issues/11633", "id": 359873268, "node_id": "MDU6SXNzdWUzNTk4NzMyNjg=", "number": 11633, "title": "DataLoader: Could not wrapper a exception in threads", "user": {"login": "mapler", "id": 1273196, "node_id": "MDQ6VXNlcjEyNzMxOTY=", "avatar_url": "https://avatars0.githubusercontent.com/u/1273196?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mapler", "html_url": "https://github.com/mapler", "followers_url": "https://api.github.com/users/mapler/followers", "following_url": "https://api.github.com/users/mapler/following{/other_user}", "gists_url": "https://api.github.com/users/mapler/gists{/gist_id}", "starred_url": "https://api.github.com/users/mapler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mapler/subscriptions", "organizations_url": "https://api.github.com/users/mapler/orgs", "repos_url": "https://api.github.com/users/mapler/repos", "events_url": "https://api.github.com/users/mapler/events{/privacy}", "received_events_url": "https://api.github.com/users/mapler/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 466131885, "node_id": "MDU6TGFiZWw0NjYxMzE4ODU=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/needs%20discussion", "name": "needs discussion", "color": "cc317c", "default": false}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-09-13T12:26:29Z", "updated_at": "2018-09-17T17:55:13Z", "closed_at": null, "author_association": "NONE", "body_html": "<h2>Issue description</h2>\n<p>It seems that the code in dataloader.py try to wrap exceptions in threads and re-raise it with traceback info witch formatted to string.<br>\n<a href=\"https://github.com/pytorch/pytorch/blob/v0.4.0/torch/utils/data/dataloader.py#L22\">https://github.com/pytorch/pytorch/blob/v0.4.0/torch/utils/data/dataloader.py#L22</a><br>\n<a href=\"https://github.com/pytorch/pytorch/blob/v0.4.0/torch/utils/data/dataloader.py#L303\">https://github.com/pytorch/pytorch/blob/v0.4.0/torch/utils/data/dataloader.py#L303</a><br>\n(I paste links in v0.4.0 same to my environment, but it's not changed in master branch)</p>\n<p>It did not work in some custom exception which not have a \"good\" <code>__init__</code> method.<br>\nI have tried to fix it but failed. it is impossible to just re-raise a exception (<code>exc_type</code> in code) without knowing the detail of <code>__int__</code> method.</p>\n<h2>Code example</h2>\n<pre><code>class CustomException(BaseException):\n    def __init__(self, **kwargs):\n        pass\n\nclass SomeDataset(torch.utils.data.Dataset):\n     def __init__(self, data):\n        self.data = data\n\n    def __getitem__(self, index):\n        raise CustomException('test')\n\n    def __len__(self):\n        return len(self.data)\n\ntrain_dataset = SomeDatset(train_data)\ntrain_dataloder = torch.utils.data.DataLoader(train_dataset)\n\nfor data in train_loader:\n    pass\n</code></pre>\n<p>Error Message:</p>\n<pre><code>Traceback (most recent call last):\n  File \"train.py\", line 221, in &lt;module&gt;\n    for data in train_loader:\n  File \"/usr/local/lib/python3.6/dist-packages/torch/utils/data/dataloader.py\", line 286, in __next__\n    return self._process_next_batch(batch)\n  File \"/usr/local/lib/python3.6/dist-packages/torch/utils/data/dataloader.py\", line 307, in _process_next_batch\n    raise batch.exc_type(batch.exc_msg)\nTypeError: __init__() takes 1 positional argument but 2 were given\n</code></pre>\n<h2>System Info</h2>\n<pre><code># python collect_env.py\nCollecting environment information...\nPyTorch version: 0.4.0\nIs debug build: No\nCUDA used to build PyTorch: 9.0.176\n\nOS: Ubuntu 16.04.4 LTS\nGCC version: (Ubuntu 5.4.0-6ubuntu1~16.04.10) 5.4.0 20160609\nCMake version: version 3.5.1\n\nPython version: 3.6\nIs CUDA available: Yes\nCUDA runtime version: 9.0.176\nGPU models and configuration: GPU 0: GeForce GTX 1080\nNvidia driver version: 390.30\ncuDNN version: Probably one of the following:\n/usr/lib/x86_64-linux-gnu/libcudnn.so.7.1.4\n/usr/lib/x86_64-linux-gnu/libcudnn_static_v7.a\n/usr/local/lib/python3.6/dist-packages/cntk/libs/libcudnn.so.7\n\nVersions of relevant libraries:\n[pip] Could not collect\n[conda] Could not collect\n</code></pre>", "body_text": "Issue description\nIt seems that the code in dataloader.py try to wrap exceptions in threads and re-raise it with traceback info witch formatted to string.\nhttps://github.com/pytorch/pytorch/blob/v0.4.0/torch/utils/data/dataloader.py#L22\nhttps://github.com/pytorch/pytorch/blob/v0.4.0/torch/utils/data/dataloader.py#L303\n(I paste links in v0.4.0 same to my environment, but it's not changed in master branch)\nIt did not work in some custom exception which not have a \"good\" __init__ method.\nI have tried to fix it but failed. it is impossible to just re-raise a exception (exc_type in code) without knowing the detail of __int__ method.\nCode example\nclass CustomException(BaseException):\n    def __init__(self, **kwargs):\n        pass\n\nclass SomeDataset(torch.utils.data.Dataset):\n     def __init__(self, data):\n        self.data = data\n\n    def __getitem__(self, index):\n        raise CustomException('test')\n\n    def __len__(self):\n        return len(self.data)\n\ntrain_dataset = SomeDatset(train_data)\ntrain_dataloder = torch.utils.data.DataLoader(train_dataset)\n\nfor data in train_loader:\n    pass\n\nError Message:\nTraceback (most recent call last):\n  File \"train.py\", line 221, in <module>\n    for data in train_loader:\n  File \"/usr/local/lib/python3.6/dist-packages/torch/utils/data/dataloader.py\", line 286, in __next__\n    return self._process_next_batch(batch)\n  File \"/usr/local/lib/python3.6/dist-packages/torch/utils/data/dataloader.py\", line 307, in _process_next_batch\n    raise batch.exc_type(batch.exc_msg)\nTypeError: __init__() takes 1 positional argument but 2 were given\n\nSystem Info\n# python collect_env.py\nCollecting environment information...\nPyTorch version: 0.4.0\nIs debug build: No\nCUDA used to build PyTorch: 9.0.176\n\nOS: Ubuntu 16.04.4 LTS\nGCC version: (Ubuntu 5.4.0-6ubuntu1~16.04.10) 5.4.0 20160609\nCMake version: version 3.5.1\n\nPython version: 3.6\nIs CUDA available: Yes\nCUDA runtime version: 9.0.176\nGPU models and configuration: GPU 0: GeForce GTX 1080\nNvidia driver version: 390.30\ncuDNN version: Probably one of the following:\n/usr/lib/x86_64-linux-gnu/libcudnn.so.7.1.4\n/usr/lib/x86_64-linux-gnu/libcudnn_static_v7.a\n/usr/local/lib/python3.6/dist-packages/cntk/libs/libcudnn.so.7\n\nVersions of relevant libraries:\n[pip] Could not collect\n[conda] Could not collect", "body": "## Issue description\r\n\r\nIt seems that the code in dataloader.py try to wrap exceptions in threads and re-raise it with traceback info witch formatted to string. \r\nhttps://github.com/pytorch/pytorch/blob/v0.4.0/torch/utils/data/dataloader.py#L22\r\nhttps://github.com/pytorch/pytorch/blob/v0.4.0/torch/utils/data/dataloader.py#L303\r\n(I paste links in v0.4.0 same to my environment, but it's not changed in master branch)\r\n\r\nIt did not work in some custom exception which not have a \"good\" `__init__` method. \r\nI have tried to fix it but failed. it is impossible to just re-raise a exception (`exc_type` in code) without knowing the detail of `__int__` method.\r\n\r\n## Code example\r\n```\r\nclass CustomException(BaseException):\r\n    def __init__(self, **kwargs):\r\n        pass\r\n\r\nclass SomeDataset(torch.utils.data.Dataset):\r\n     def __init__(self, data):\r\n        self.data = data\r\n\r\n    def __getitem__(self, index):\r\n        raise CustomException('test')\r\n\r\n    def __len__(self):\r\n        return len(self.data)\r\n\r\ntrain_dataset = SomeDatset(train_data)\r\ntrain_dataloder = torch.utils.data.DataLoader(train_dataset)\r\n\r\nfor data in train_loader:\r\n    pass\r\n```\r\n\r\nError Message:\r\n```\r\nTraceback (most recent call last):\r\n  File \"train.py\", line 221, in <module>\r\n    for data in train_loader:\r\n  File \"/usr/local/lib/python3.6/dist-packages/torch/utils/data/dataloader.py\", line 286, in __next__\r\n    return self._process_next_batch(batch)\r\n  File \"/usr/local/lib/python3.6/dist-packages/torch/utils/data/dataloader.py\", line 307, in _process_next_batch\r\n    raise batch.exc_type(batch.exc_msg)\r\nTypeError: __init__() takes 1 positional argument but 2 were given\r\n```\r\n\r\n## System Info\r\n```\r\n# python collect_env.py\r\nCollecting environment information...\r\nPyTorch version: 0.4.0\r\nIs debug build: No\r\nCUDA used to build PyTorch: 9.0.176\r\n\r\nOS: Ubuntu 16.04.4 LTS\r\nGCC version: (Ubuntu 5.4.0-6ubuntu1~16.04.10) 5.4.0 20160609\r\nCMake version: version 3.5.1\r\n\r\nPython version: 3.6\r\nIs CUDA available: Yes\r\nCUDA runtime version: 9.0.176\r\nGPU models and configuration: GPU 0: GeForce GTX 1080\r\nNvidia driver version: 390.30\r\ncuDNN version: Probably one of the following:\r\n/usr/lib/x86_64-linux-gnu/libcudnn.so.7.1.4\r\n/usr/lib/x86_64-linux-gnu/libcudnn_static_v7.a\r\n/usr/local/lib/python3.6/dist-packages/cntk/libs/libcudnn.so.7\r\n\r\nVersions of relevant libraries:\r\n[pip] Could not collect\r\n[conda] Could not collect\r\n```\r\n"}