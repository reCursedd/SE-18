{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/172777901", "pull_request_review_id": 101850586, "id": 172777901, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3Mjc3NzkwMQ==", "diff_hunk": "@@ -2828,14 +2828,20 @@ void THTensor_(range)(THTensor *r_, accreal xmin, accreal xmax, accreal step)\n }\n \n void THTensor_(arange)(THTensor *r_, accreal xmin, accreal xmax, accreal step) {\n-#if defined(TH_REAL_IS_FLOAT) || defined(TH_REAL_IS_DOUBLE)\n-  int m = fmod(xmax - xmin, step) == 0;\n-#else\n-  int m = (xmax - xmin) % step == 0;\n-#endif\n-  if (m)\n-    xmax -= step;\n-  THTensor_(range)(r_, xmin, xmax, step);\n+  ptrdiff_t size;\n+  real i = 0;\n+\n+  THArgCheck(step > 0 || step < 0, 3, \"step must be a non-null number\");\n+  THArgCheck(((step > 0) && (xmax >= xmin)) || ((step < 0) && (xmax <= xmin))\n+              , 2, \"upper bound and larger bound incoherent with step sign\");\n+\n+  size = (ptrdiff_t) ceil((xmax - xmin) / step);", "path": "aten/src/TH/generic/THTensorMath.c", "position": null, "original_position": 19, "commit_id": "613a5daa965fa79d97dfb1a107bfe6bfda043923", "original_commit_id": "a86e5f2ccb125c6a7891df32fbf172a8f82fb7e2", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "I don't think it's a fix for numerical errors. This seems to implement a different algorithm (if we were to interpret it using the real numbers without rounding errors). Previously we did `floor((xmax - xmin) / step)`, now we do `ceil((xmax - xmin) / step)`", "created_at": "2018-03-07T09:10:14Z", "updated_at": "2018-11-23T15:40:26Z", "html_url": "https://github.com/pytorch/pytorch/pull/5600#discussion_r172777901", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/5600", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/172777901"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/5600#discussion_r172777901"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/5600"}}, "body_html": "<p>I don't think it's a fix for numerical errors. This seems to implement a different algorithm (if we were to interpret it using the real numbers without rounding errors). Previously we did <code>floor((xmax - xmin) / step)</code>, now we do <code>ceil((xmax - xmin) / step)</code></p>", "body_text": "I don't think it's a fix for numerical errors. This seems to implement a different algorithm (if we were to interpret it using the real numbers without rounding errors). Previously we did floor((xmax - xmin) / step), now we do ceil((xmax - xmin) / step)"}