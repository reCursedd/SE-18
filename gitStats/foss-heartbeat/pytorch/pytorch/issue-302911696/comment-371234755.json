{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/371234755", "html_url": "https://github.com/pytorch/pytorch/pull/5600#issuecomment-371234755", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/5600", "id": 371234755, "node_id": "MDEyOklzc3VlQ29tbWVudDM3MTIzNDc1NQ==", "user": {"login": "colesbury", "id": 655866, "node_id": "MDQ6VXNlcjY1NTg2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/655866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colesbury", "html_url": "https://github.com/colesbury", "followers_url": "https://api.github.com/users/colesbury/followers", "following_url": "https://api.github.com/users/colesbury/following{/other_user}", "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions", "organizations_url": "https://api.github.com/users/colesbury/orgs", "repos_url": "https://api.github.com/users/colesbury/repos", "events_url": "https://api.github.com/users/colesbury/events{/privacy}", "received_events_url": "https://api.github.com/users/colesbury/received_events", "type": "User", "site_admin": false}, "created_at": "2018-03-07T18:24:38Z", "updated_at": "2018-03-07T18:24:38Z", "author_association": "MEMBER", "body_html": "<p>A few comments:</p>\n<ol>\n<li>\n<p>More tests please. We've consistently had buggy implementations of <code>arange</code>. One outcome of this is that we should be convinced of the correctness of <code>arange</code> as opposed to just squashing bugs as they're reported. For short lists, explicitly check the actual value, e.g. <code>assertEqual(arange(0, 1), [0])</code>. For larger values, at least check the first and last elements along with the size.</p>\n</li>\n<li>\n<p>The behavior should be consistent with NumPy's implementation. I think someone posted a link to it in <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"303015779\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/5608\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/pytorch/pytorch/pull/5608/hovercard\" href=\"https://github.com/pytorch/pytorch/pull/5608\">#5608</a>. This is perhaps more important than improving numerical accuracy.</p>\n</li>\n</ol>", "body_text": "A few comments:\n\n\nMore tests please. We've consistently had buggy implementations of arange. One outcome of this is that we should be convinced of the correctness of arange as opposed to just squashing bugs as they're reported. For short lists, explicitly check the actual value, e.g. assertEqual(arange(0, 1), [0]). For larger values, at least check the first and last elements along with the size.\n\n\nThe behavior should be consistent with NumPy's implementation. I think someone posted a link to it in #5608. This is perhaps more important than improving numerical accuracy.", "body": "A few comments:\r\n\r\n1) More tests please. We've consistently had buggy implementations of `arange`. One outcome of this is that we should be convinced of the correctness of `arange` as opposed to just squashing bugs as they're reported. For short lists, explicitly check the actual value, e.g. `assertEqual(arange(0, 1), [0])`. For larger values, at least check the first and last elements along with the size. \r\n\r\n2) The behavior should be consistent with NumPy's implementation. I think someone posted a link to it in #5608. This is perhaps more important than improving numerical accuracy."}