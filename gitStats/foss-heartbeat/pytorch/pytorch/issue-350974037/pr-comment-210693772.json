{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/210693772", "pull_request_review_id": 146964103, "id": 210693772, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMDY5Mzc3Mg==", "diff_hunk": "@@ -755,27 +786,70 @@ def named_parameters(self, memo=None, prefix=''):\n             >>>        print(param.size())\n \n         \"\"\"\n-        if memo is None:\n-            memo = set()\n-        for name, p in self._parameters.items():\n-            if p is not None and p not in memo:\n-                memo.add(p)\n-                yield prefix + ('.' if prefix else '') + name, p\n-        for mname, module in self.named_children():\n-            submodule_prefix = prefix + ('.' if prefix else '') + mname\n-            for name, p in module.named_parameters(memo, submodule_prefix):\n-                yield name, p\n+        gen = self._named_members(\n+            lambda module: module._parameters.items(),\n+            memo=memo, prefix=prefix, recurse=recurse)\n+        for elem in gen:\n+            yield elem\n+\n+    def buffers(self, memo=None, recurse=True):\n+        r\"\"\"Returns an iterator over module buffers.\n+\n+        Args:\n+            memo (set): if specified, excludes the enclosed buffers from\n+                being yielded. This check is performed using ``id()``.\n+                This method adds the yielded buffers to ``memo``.\n+            recurse (bool): if True, then yields buffers of this module\n+                and all submodules. Otherwise, yields only buffers that\n+                are direct members of this module.\n+\n+        Yields:\n+            torch.Tensor: module buffer\n+\n+        Example::\n+\n+            >>> for buf in model.buffers():\n+            >>>     print(type(buf.data), buf.size())\n+            <class 'torch.FloatTensor'> (20L,)\n+            <class 'torch.FloatTensor'> (20L, 1L, 5L, 5L)\n+\n+        \"\"\"\n+        for name, buf in self.named_buffers(memo=memo, recurse=recurse):\n+            yield buf\n+\n+    def named_buffers(self, memo=None, prefix='', recurse=True):\n+        r\"\"\"Returns an iterator over module buffers, yielding both the\n+        name of the buffer as well as the buffer itself\n+\n+        Args:\n+            memo (set): if specified, excludes the enclosed buffers from\n+                being yielded. This check is performed using ``id()``.\n+                This method adds the yielded buffers to ``memo``.\n+            prefix (str): prefix to prepend to all buffer names.\n+            recurse (bool): if True, then yields buffers of this module\n+                and all submodules. Otherwise, yields only buffers that\n+                are direct members of this module.\n+\n+        Yields:\n+            (string, torch.Tensor): Tuple containing the name and buffer\n+\n+        Example::\n+\n+            >>> for name, buf in self.named_buffers():\n+            >>>    if name in ['running_var']:\n+            >>>        print(buf.size())\n+\n+        \"\"\"\n+        gen = self._named_members(\n+            lambda module: module._buffers.items(),\n+            memo=memo, prefix=prefix, recurse=recurse)\n+        for elem in gen:\n+            yield elem\n \n     def _all_buffers(self, memo=None):\n-        if memo is None:\n-            memo = set()\n-        for name, b in self._buffers.items():\n-            if b is not None and b not in memo:\n-                memo.add(b)\n-                yield b\n-        for module in self.children():\n-            for b in module._all_buffers(memo):\n-                yield b\n+        r\"\"\"Retained for backwards compatibility.\"\"\"", "path": "torch/nn/modules/module.py", "position": null, "original_position": 144, "commit_id": "4bf968b42e58e8a1b8816147b1355f661b8676fd", "original_commit_id": "8c1bf4c28be97f280260a0a549032fcab724835e", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "This can be removed if you removed all call sites from our codebase. It was an internal method.", "created_at": "2018-08-16T18:18:19Z", "updated_at": "2018-11-23T15:49:32Z", "html_url": "https://github.com/pytorch/pytorch/pull/10554#discussion_r210693772", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/10554", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/210693772"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/10554#discussion_r210693772"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/10554"}}, "body_html": "<p>This can be removed if you removed all call sites from our codebase. It was an internal method.</p>", "body_text": "This can be removed if you removed all call sites from our codebase. It was an internal method."}