{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/432813238", "html_url": "https://github.com/pytorch/pytorch/issues/13018#issuecomment-432813238", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/13018", "id": 432813238, "node_id": "MDEyOklzc3VlQ29tbWVudDQzMjgxMzIzOA==", "user": {"login": "jcjohnson", "id": 2718714, "node_id": "MDQ6VXNlcjI3MTg3MTQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/2718714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jcjohnson", "html_url": "https://github.com/jcjohnson", "followers_url": "https://api.github.com/users/jcjohnson/followers", "following_url": "https://api.github.com/users/jcjohnson/following{/other_user}", "gists_url": "https://api.github.com/users/jcjohnson/gists{/gist_id}", "starred_url": "https://api.github.com/users/jcjohnson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jcjohnson/subscriptions", "organizations_url": "https://api.github.com/users/jcjohnson/orgs", "repos_url": "https://api.github.com/users/jcjohnson/repos", "events_url": "https://api.github.com/users/jcjohnson/events{/privacy}", "received_events_url": "https://api.github.com/users/jcjohnson/received_events", "type": "User", "site_admin": false}, "created_at": "2018-10-24T20:19:47Z", "updated_at": "2018-10-24T20:19:47Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=8906225\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/syed-ahmed\">@syed-ahmed</a> Awesome, thanks so much! I'm not very familiar with the CUDA internals of PyTorch, but given the embarrassing parallelism of sampling with replacement I was surprised to see numpy performing ~4x faster in the regime of small batches and large samples.</p>", "body_text": "@syed-ahmed Awesome, thanks so much! I'm not very familiar with the CUDA internals of PyTorch, but given the embarrassing parallelism of sampling with replacement I was surprised to see numpy performing ~4x faster in the regime of small batches and large samples.", "body": "@syed-ahmed Awesome, thanks so much! I'm not very familiar with the CUDA internals of PyTorch, but given the embarrassing parallelism of sampling with replacement I was surprised to see numpy performing ~4x faster in the regime of small batches and large samples."}