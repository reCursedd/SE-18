{"url": "https://api.github.com/repos/pytorch/pytorch/issues/12439", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/12439/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/12439/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/12439/events", "html_url": "https://github.com/pytorch/pytorch/issues/12439", "id": 367591193, "node_id": "MDU6SXNzdWUzNjc1OTExOTM=", "number": 12439, "title": "How to take derivatives with respect to a vector", "user": {"login": "andymancodes", "id": 37308037, "node_id": "MDQ6VXNlcjM3MzA4MDM3", "avatar_url": "https://avatars3.githubusercontent.com/u/37308037?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andymancodes", "html_url": "https://github.com/andymancodes", "followers_url": "https://api.github.com/users/andymancodes/followers", "following_url": "https://api.github.com/users/andymancodes/following{/other_user}", "gists_url": "https://api.github.com/users/andymancodes/gists{/gist_id}", "starred_url": "https://api.github.com/users/andymancodes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andymancodes/subscriptions", "organizations_url": "https://api.github.com/users/andymancodes/orgs", "repos_url": "https://api.github.com/users/andymancodes/repos", "events_url": "https://api.github.com/users/andymancodes/events{/privacy}", "received_events_url": "https://api.github.com/users/andymancodes/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-10-07T20:34:57Z", "updated_at": "2018-10-08T02:36:41Z", "closed_at": "2018-10-08T02:36:41Z", "author_association": "NONE", "body_html": "<p>Hi,</p>\n<p>In Pytorch, much of the autograd functionality is under wraps using the variable abstraction.</p>\n<p>I just wanted to use autograd to implement linear regression.</p>\n<p>I have a vector [x1 x2 x3], I want to take the derivative with respect to a loss function.</p>\n<p>How can I do that?</p>\n<p>Since, Pytorch is a drop-in replacement for numpy as well, I think I can use it like that along with the autograd feature.</p>\n<p>Cheers!</p>", "body_text": "Hi,\nIn Pytorch, much of the autograd functionality is under wraps using the variable abstraction.\nI just wanted to use autograd to implement linear regression.\nI have a vector [x1 x2 x3], I want to take the derivative with respect to a loss function.\nHow can I do that?\nSince, Pytorch is a drop-in replacement for numpy as well, I think I can use it like that along with the autograd feature.\nCheers!", "body": "Hi,\r\n\r\nIn Pytorch, much of the autograd functionality is under wraps using the variable abstraction.\r\n\r\nI just wanted to use autograd to implement linear regression.\r\n\r\nI have a vector [x1 x2 x3], I want to take the derivative with respect to a loss function.\r\n\r\nHow can I do that?\r\n\r\nSince, Pytorch is a drop-in replacement for numpy as well, I think I can use it like that along with the autograd feature.\r\n\r\nCheers!"}