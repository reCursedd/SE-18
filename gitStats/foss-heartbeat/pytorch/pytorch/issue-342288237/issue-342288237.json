{"url": "https://api.github.com/repos/pytorch/pytorch/issues/9530", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/9530/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/9530/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/9530/events", "html_url": "https://github.com/pytorch/pytorch/issues/9530", "id": 342288237, "node_id": "MDU6SXNzdWUzNDIyODgyMzc=", "number": 9530, "title": "[feature request] Add option to return matched / unmatched / unexpected in `load_state_dict`", "user": {"login": "fmassa", "id": 9110200, "node_id": "MDQ6VXNlcjkxMTAyMDA=", "avatar_url": "https://avatars2.githubusercontent.com/u/9110200?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fmassa", "html_url": "https://github.com/fmassa", "followers_url": "https://api.github.com/users/fmassa/followers", "following_url": "https://api.github.com/users/fmassa/following{/other_user}", "gists_url": "https://api.github.com/users/fmassa/gists{/gist_id}", "starred_url": "https://api.github.com/users/fmassa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fmassa/subscriptions", "organizations_url": "https://api.github.com/users/fmassa/orgs", "repos_url": "https://api.github.com/users/fmassa/repos", "events_url": "https://api.github.com/users/fmassa/events{/privacy}", "received_events_url": "https://api.github.com/users/fmassa/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 424131849, "node_id": "MDU6TGFiZWw0MjQxMzE4NDk=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2018-07-18T11:27:56Z", "updated_at": "2018-09-21T20:13:56Z", "closed_at": null, "author_association": "MEMBER", "body_html": "<p>Currently, loading checkpoints using <code>strict=False</code> can be fairly error-prone. An extra level (for example with a <code>nn.DataParallel</code>) could lead to completely missing loading all the weights, and there is no sign that this has happened.</p>\n<h3>Proposal:</h3>\n<p>A way to enable user-code to verify for possible mistakes would be to add an option to <code>load_state_dict</code> to return matched / unmatched / unexpected keys.<br>\nThis would allow the user to easily inspect if the loading is actually doing what is expected.</p>\n<p>Returning those values is only needed if <code>strict=False</code>, because in <code>strict=True</code> mode an error is raised if the state dict doesn't match exactly.</p>\n<p>A possible API:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">load_state_dict</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>, <span class=\"pl-smi\">state_dict</span>, <span class=\"pl-smi\">strict</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>, <span class=\"pl-smi\">return_unmatched</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">False</span>):\n    <span class=\"pl-c1\">...</span>\n    <span class=\"pl-k\">if</span> return_unmatched:\n        <span class=\"pl-k\">return</span> matched, unmatched, unexpected</pre></div>\n<p>Thoughts?</p>", "body_text": "Currently, loading checkpoints using strict=False can be fairly error-prone. An extra level (for example with a nn.DataParallel) could lead to completely missing loading all the weights, and there is no sign that this has happened.\nProposal:\nA way to enable user-code to verify for possible mistakes would be to add an option to load_state_dict to return matched / unmatched / unexpected keys.\nThis would allow the user to easily inspect if the loading is actually doing what is expected.\nReturning those values is only needed if strict=False, because in strict=True mode an error is raised if the state dict doesn't match exactly.\nA possible API:\ndef load_state_dict(self, state_dict, strict=True, return_unmatched=False):\n    ...\n    if return_unmatched:\n        return matched, unmatched, unexpected\nThoughts?", "body": "Currently, loading checkpoints using `strict=False` can be fairly error-prone. An extra level (for example with a `nn.DataParallel`) could lead to completely missing loading all the weights, and there is no sign that this has happened.\r\n\r\n### Proposal: \r\nA way to enable user-code to verify for possible mistakes would be to add an option to `load_state_dict` to return matched / unmatched / unexpected keys.\r\nThis would allow the user to easily inspect if the loading is actually doing what is expected.\r\n\r\nReturning those values is only needed if `strict=False`, because in `strict=True` mode an error is raised if the state dict doesn't match exactly.\r\n\r\nA possible API:\r\n```python\r\ndef load_state_dict(self, state_dict, strict=True, return_unmatched=False):\r\n    ...\r\n    if return_unmatched:\r\n        return matched, unmatched, unexpected\r\n```\r\n\r\nThoughts?"}