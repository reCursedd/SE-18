{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/408172638", "html_url": "https://github.com/pytorch/pytorch/issues/9530#issuecomment-408172638", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/9530", "id": 408172638, "node_id": "MDEyOklzc3VlQ29tbWVudDQwODE3MjYzOA==", "user": {"login": "bhushan23", "id": 1794273, "node_id": "MDQ6VXNlcjE3OTQyNzM=", "avatar_url": "https://avatars2.githubusercontent.com/u/1794273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bhushan23", "html_url": "https://github.com/bhushan23", "followers_url": "https://api.github.com/users/bhushan23/followers", "following_url": "https://api.github.com/users/bhushan23/following{/other_user}", "gists_url": "https://api.github.com/users/bhushan23/gists{/gist_id}", "starred_url": "https://api.github.com/users/bhushan23/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bhushan23/subscriptions", "organizations_url": "https://api.github.com/users/bhushan23/orgs", "repos_url": "https://api.github.com/users/bhushan23/repos", "events_url": "https://api.github.com/users/bhushan23/events{/privacy}", "received_events_url": "https://api.github.com/users/bhushan23/received_events", "type": "User", "site_admin": false}, "created_at": "2018-07-26T17:26:19Z", "updated_at": "2018-07-26T17:26:19Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=9110200\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/fmassa\">@fmassa</a><br>\nby changing load_state_dict interface we are introducing different behavior of load_state_dict depending on parameters being passed (this is not big issue) but having consistent interface of an API is always good.</p>\n<p>Secondly, I agree that with diff_state_dict, we might create a loop hole which can be missed with the relevant changes, but what's the purpose of diff_state_dict? to check difference of passed state_dict and current model, why does that needs to be in sync with load_state_dict?</p>\n<p>I expect diff_state_dict to do following (please correct me if I am missing something):</p>\n<ol>\n<li>Compare given state_dict with current model</li>\n<li>matched_keys = state_dict AND model</li>\n<li>unmatched_keys = model - state_dict</li>\n<li>unexpected_keys = state_dict - model</li>\n</ol>\n<p>But, sticking with load_state_dict will avoid re-doing work.<br>\nI am in for both the approaches but I liked second one more.</p>", "body_text": "@fmassa\nby changing load_state_dict interface we are introducing different behavior of load_state_dict depending on parameters being passed (this is not big issue) but having consistent interface of an API is always good.\nSecondly, I agree that with diff_state_dict, we might create a loop hole which can be missed with the relevant changes, but what's the purpose of diff_state_dict? to check difference of passed state_dict and current model, why does that needs to be in sync with load_state_dict?\nI expect diff_state_dict to do following (please correct me if I am missing something):\n\nCompare given state_dict with current model\nmatched_keys = state_dict AND model\nunmatched_keys = model - state_dict\nunexpected_keys = state_dict - model\n\nBut, sticking with load_state_dict will avoid re-doing work.\nI am in for both the approaches but I liked second one more.", "body": "@fmassa \r\nby changing load_state_dict interface we are introducing different behavior of load_state_dict depending on parameters being passed (this is not big issue) but having consistent interface of an API is always good.\r\n\r\nSecondly, I agree that with diff_state_dict, we might create a loop hole which can be missed with the relevant changes, but what's the purpose of diff_state_dict? to check difference of passed state_dict and current model, why does that needs to be in sync with load_state_dict? \r\n\r\nI expect diff_state_dict to do following (please correct me if I am missing something):\r\n1. Compare given state_dict with current model\r\n2. matched_keys = state_dict AND model \r\n3. unmatched_keys = model - state_dict\r\n4. unexpected_keys = state_dict - model\r\n\r\nBut, sticking with load_state_dict will avoid re-doing work.\r\nI am in for both the approaches but I liked second one more.\r\n"}