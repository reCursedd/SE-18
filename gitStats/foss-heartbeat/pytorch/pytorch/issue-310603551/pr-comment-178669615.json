{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/178669615", "pull_request_review_id": 108765331, "id": 178669615, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3ODY2OTYxNQ==", "diff_hunk": "@@ -161,10 +161,10 @@ class RecurrentNetworkExecutorBase {\n             // owned by this timestep.\n             rnn_op.op = CreateOperator(step_net_def_.op(rnn_op.order), ws);\n             for (const auto& observer : observers_list) {\n-              auto rnn_observer =\n-                  dynamic_cast_if_rtti<const RNNCapableOperatorObserver*>(\n-                      observer.get());\n-              if (rnn_observer) {\n+              if (observer->IsRNNCapable()) {\n+                auto rnn_observer =\n+                    static_cast<const RNNCapableOperatorObserver*>(\n+                        observer.get());\n                 std::unique_ptr<ObserverBase<OperatorBase>> rnn_observer_copy =\n                     rnn_observer->rnnCopy(rnn_op.op.get(), rnn_op.order);", "path": "caffe2/operators/rnn/recurrent_network_executor.h", "position": null, "original_position": 28, "commit_id": "c69a0524fc851a0bcd59d65a04a77459af6928c7", "original_commit_id": "6885aa3c7bafaa19cb6187328c77015e9e1223ba", "user": {"login": "mdschatz", "id": 20386276, "node_id": "MDQ6VXNlcjIwMzg2Mjc2", "avatar_url": "https://avatars2.githubusercontent.com/u/20386276?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mdschatz", "html_url": "https://github.com/mdschatz", "followers_url": "https://api.github.com/users/mdschatz/followers", "following_url": "https://api.github.com/users/mdschatz/following{/other_user}", "gists_url": "https://api.github.com/users/mdschatz/gists{/gist_id}", "starred_url": "https://api.github.com/users/mdschatz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mdschatz/subscriptions", "organizations_url": "https://api.github.com/users/mdschatz/orgs", "repos_url": "https://api.github.com/users/mdschatz/repos", "events_url": "https://api.github.com/users/mdschatz/events{/privacy}", "received_events_url": "https://api.github.com/users/mdschatz/received_events", "type": "User", "site_admin": false}, "body": "So then is the recommendation is to have a default implementation for rnnCopy that returns null if it's not capable?", "created_at": "2018-04-02T22:36:50Z", "updated_at": "2018-11-23T15:41:32Z", "html_url": "https://github.com/pytorch/pytorch/pull/6202#discussion_r178669615", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/6202", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/178669615"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/6202#discussion_r178669615"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/6202"}}, "body_html": "<p>So then is the recommendation is to have a default implementation for rnnCopy that returns null if it's not capable?</p>", "body_text": "So then is the recommendation is to have a default implementation for rnnCopy that returns null if it's not capable?", "in_reply_to_id": 178662164}