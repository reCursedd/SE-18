{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/178662164", "pull_request_review_id": 108756665, "id": 178662164, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3ODY2MjE2NA==", "diff_hunk": "@@ -161,10 +161,10 @@ class RecurrentNetworkExecutorBase {\n             // owned by this timestep.\n             rnn_op.op = CreateOperator(step_net_def_.op(rnn_op.order), ws);\n             for (const auto& observer : observers_list) {\n-              auto rnn_observer =\n-                  dynamic_cast_if_rtti<const RNNCapableOperatorObserver*>(\n-                      observer.get());\n-              if (rnn_observer) {\n+              if (observer->IsRNNCapable()) {\n+                auto rnn_observer =\n+                    static_cast<const RNNCapableOperatorObserver*>(\n+                        observer.get());\n                 std::unique_ptr<ObserverBase<OperatorBase>> rnn_observer_copy =\n                     rnn_observer->rnnCopy(rnn_op.op.get(), rnn_op.order);", "path": "caffe2/operators/rnn/recurrent_network_executor.h", "position": null, "original_position": 28, "commit_id": "c69a0524fc851a0bcd59d65a04a77459af6928c7", "original_commit_id": "6885aa3c7bafaa19cb6187328c77015e9e1223ba", "user": {"login": "salexspb", "id": 20307328, "node_id": "MDQ6VXNlcjIwMzA3MzI4", "avatar_url": "https://avatars2.githubusercontent.com/u/20307328?v=4", "gravatar_id": "", "url": "https://api.github.com/users/salexspb", "html_url": "https://github.com/salexspb", "followers_url": "https://api.github.com/users/salexspb/followers", "following_url": "https://api.github.com/users/salexspb/following{/other_user}", "gists_url": "https://api.github.com/users/salexspb/gists{/gist_id}", "starred_url": "https://api.github.com/users/salexspb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/salexspb/subscriptions", "organizations_url": "https://api.github.com/users/salexspb/orgs", "repos_url": "https://api.github.com/users/salexspb/repos", "events_url": "https://api.github.com/users/salexspb/events{/privacy}", "received_events_url": "https://api.github.com/users/salexspb/received_events", "type": "User", "site_admin": false}, "body": "hmm, at this point an observer will have both set the flag, inherit from RNNCapableOperatorObserver and implement rnnCopy method. At this point we can just fall back to the approach with rnnCopy being in the base class, we leak notion of RNN to the base class in any way. Then we don't need any casting business. I know, this was your original approach :) ", "created_at": "2018-04-02T21:57:10Z", "updated_at": "2018-11-23T15:41:31Z", "html_url": "https://github.com/pytorch/pytorch/pull/6202#discussion_r178662164", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/6202", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/178662164"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/6202#discussion_r178662164"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/6202"}}, "body_html": "<p>hmm, at this point an observer will have both set the flag, inherit from RNNCapableOperatorObserver and implement rnnCopy method. At this point we can just fall back to the approach with rnnCopy being in the base class, we leak notion of RNN to the base class in any way. Then we don't need any casting business. I know, this was your original approach :)</p>", "body_text": "hmm, at this point an observer will have both set the flag, inherit from RNNCapableOperatorObserver and implement rnnCopy method. At this point we can just fall back to the approach with rnnCopy being in the base class, we leak notion of RNN to the base class in any way. Then we don't need any casting business. I know, this was your original approach :)"}