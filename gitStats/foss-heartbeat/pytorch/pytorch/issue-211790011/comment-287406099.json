{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/287406099", "html_url": "https://github.com/pytorch/pytorch/issues/915#issuecomment-287406099", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/915", "id": 287406099, "node_id": "MDEyOklzc3VlQ29tbWVudDI4NzQwNjA5OQ==", "user": {"login": "soumith", "id": 1310570, "node_id": "MDQ6VXNlcjEzMTA1NzA=", "avatar_url": "https://avatars0.githubusercontent.com/u/1310570?v=4", "gravatar_id": "", "url": "https://api.github.com/users/soumith", "html_url": "https://github.com/soumith", "followers_url": "https://api.github.com/users/soumith/followers", "following_url": "https://api.github.com/users/soumith/following{/other_user}", "gists_url": "https://api.github.com/users/soumith/gists{/gist_id}", "starred_url": "https://api.github.com/users/soumith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/soumith/subscriptions", "organizations_url": "https://api.github.com/users/soumith/orgs", "repos_url": "https://api.github.com/users/soumith/repos", "events_url": "https://api.github.com/users/soumith/events{/privacy}", "received_events_url": "https://api.github.com/users/soumith/received_events", "type": "User", "site_admin": false}, "created_at": "2017-03-17T16:38:40Z", "updated_at": "2017-07-24T22:19:32Z", "author_association": "MEMBER", "body_html": "<p>Fleshing this task out for community members to pick up.</p>\n<p>This is a task in which you will be modifying the neural network layer <code>nn.AvgPool3d</code> to have implicit zero padding.</p>\n<p>To visually explain, this is a layer that does Average downsampling, like this:<br>\n<a href=\"https://gist.github.com/anonymous/26ebfabaded1c3ee8a7cf0c63e305737\">https://gist.github.com/anonymous/26ebfabaded1c3ee8a7cf0c63e305737</a></p>\n<p>Now, while <code>nn.AvgPool2d</code> has support for padding, <code>nn.AvgPool3d</code> does not.<br>\nYou will be adding this feature.</p>\n<p>You will look at the nn.AvgPool2d code and understand how padding is introduced in that code, and replicate the same behavior in 3d.<br>\nHere are the code pointers:</p>\n<ol>\n<li>Python entry point: <a href=\"https://github.com/pytorch/pytorch/blob/master/torch/nn/modules/pooling.py#L553\">https://github.com/pytorch/pytorch/blob/master/torch/nn/modules/pooling.py#L553</a></li>\n<li>Calls here: <a href=\"https://github.com/pytorch/pytorch/blob/master/torch/nn/functional.py#L203\">https://github.com/pytorch/pytorch/blob/master/torch/nn/functional.py#L203</a></li>\n<li>Calls here: <a href=\"https://github.com/pytorch/pytorch/blob/master/torch/nn/_functions/thnn/pooling.py#L340\">https://github.com/pytorch/pytorch/blob/master/torch/nn/_functions/thnn/pooling.py#L340</a></li>\n<li>Now we are entering C</li>\n<li>The CPU version: <a href=\"https://github.com/pytorch/pytorch/blob/master/torch/lib/THNN/generic/VolumetricAveragePooling.c\">https://github.com/pytorch/pytorch/blob/master/torch/lib/THNN/generic/VolumetricAveragePooling.c</a></li>\n<li>The GPU version: <a href=\"https://github.com/pytorch/pytorch/blob/master/torch/lib/THCUNN/generic/VolumetricAveragePooling.cu\">https://github.com/pytorch/pytorch/blob/master/torch/lib/THCUNN/generic/VolumetricAveragePooling.cu</a></li>\n<li>Both CPU and GPU version have to be modified.</li>\n</ol>\n<p>Start with the CPU version and write unit tests in test_nn.py (search for existing tests).<br>\nOnce you finish the CPU version, modify the GPU version VolumetricAveragePooling.cu . If you do not have a NVIDIA CUDA based GPU I will take over the PR from here to test the GPU side of things.</p>\n<p>You will have more questions, and we shall resolve them via comments here or on slack.</p>\n<p>Lastly, look at the <a href=\"https://github.com/pytorch/pytorch/blob/master/CONTRIBUTING.md#developing-locally-with-pytorch\">CONTRIBUTING</a> document for tips on locally developing pytorch.</p>", "body_text": "Fleshing this task out for community members to pick up.\nThis is a task in which you will be modifying the neural network layer nn.AvgPool3d to have implicit zero padding.\nTo visually explain, this is a layer that does Average downsampling, like this:\nhttps://gist.github.com/anonymous/26ebfabaded1c3ee8a7cf0c63e305737\nNow, while nn.AvgPool2d has support for padding, nn.AvgPool3d does not.\nYou will be adding this feature.\nYou will look at the nn.AvgPool2d code and understand how padding is introduced in that code, and replicate the same behavior in 3d.\nHere are the code pointers:\n\nPython entry point: https://github.com/pytorch/pytorch/blob/master/torch/nn/modules/pooling.py#L553\nCalls here: https://github.com/pytorch/pytorch/blob/master/torch/nn/functional.py#L203\nCalls here: https://github.com/pytorch/pytorch/blob/master/torch/nn/_functions/thnn/pooling.py#L340\nNow we are entering C\nThe CPU version: https://github.com/pytorch/pytorch/blob/master/torch/lib/THNN/generic/VolumetricAveragePooling.c\nThe GPU version: https://github.com/pytorch/pytorch/blob/master/torch/lib/THCUNN/generic/VolumetricAveragePooling.cu\nBoth CPU and GPU version have to be modified.\n\nStart with the CPU version and write unit tests in test_nn.py (search for existing tests).\nOnce you finish the CPU version, modify the GPU version VolumetricAveragePooling.cu . If you do not have a NVIDIA CUDA based GPU I will take over the PR from here to test the GPU side of things.\nYou will have more questions, and we shall resolve them via comments here or on slack.\nLastly, look at the CONTRIBUTING document for tips on locally developing pytorch.", "body": "Fleshing this task out for community members to pick up.\r\n\r\nThis is a task in which you will be modifying the neural network layer `nn.AvgPool3d` to have implicit zero padding.\r\n\r\nTo visually explain, this is a layer that does Average downsampling, like this:\r\nhttps://gist.github.com/anonymous/26ebfabaded1c3ee8a7cf0c63e305737\r\n\r\nNow, while `nn.AvgPool2d` has support for padding, `nn.AvgPool3d` does not.\r\nYou will be adding this feature.\r\n\r\nYou will look at the nn.AvgPool2d code and understand how padding is introduced in that code, and replicate the same behavior in 3d.\r\nHere are the code pointers:\r\n\r\n1. Python entry point: https://github.com/pytorch/pytorch/blob/master/torch/nn/modules/pooling.py#L553\r\n2. Calls here: https://github.com/pytorch/pytorch/blob/master/torch/nn/functional.py#L203\r\n3. Calls here: https://github.com/pytorch/pytorch/blob/master/torch/nn/_functions/thnn/pooling.py#L340\r\n4. Now we are entering C\r\n5. The CPU version: https://github.com/pytorch/pytorch/blob/master/torch/lib/THNN/generic/VolumetricAveragePooling.c\r\n6. The GPU version: https://github.com/pytorch/pytorch/blob/master/torch/lib/THCUNN/generic/VolumetricAveragePooling.cu\r\n7. Both CPU and GPU version have to be modified. \r\n\r\nStart with the CPU version and write unit tests in test_nn.py (search for existing tests).\r\nOnce you finish the CPU version, modify the GPU version VolumetricAveragePooling.cu . If you do not have a NVIDIA CUDA based GPU I will take over the PR from here to test the GPU side of things.\r\n\r\nYou will have more questions, and we shall resolve them via comments here or on slack.\r\n\r\nLastly, look at the [CONTRIBUTING](https://github.com/pytorch/pytorch/blob/master/CONTRIBUTING.md#developing-locally-with-pytorch) document for tips on locally developing pytorch.\r\n"}