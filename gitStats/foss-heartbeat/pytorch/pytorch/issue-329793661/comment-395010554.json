{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/395010554", "html_url": "https://github.com/pytorch/pytorch/issues/8193#issuecomment-395010554", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/8193", "id": 395010554, "node_id": "MDEyOklzc3VlQ29tbWVudDM5NTAxMDU1NA==", "user": {"login": "aliceyayunji", "id": 8035537, "node_id": "MDQ6VXNlcjgwMzU1Mzc=", "avatar_url": "https://avatars2.githubusercontent.com/u/8035537?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aliceyayunji", "html_url": "https://github.com/aliceyayunji", "followers_url": "https://api.github.com/users/aliceyayunji/followers", "following_url": "https://api.github.com/users/aliceyayunji/following{/other_user}", "gists_url": "https://api.github.com/users/aliceyayunji/gists{/gist_id}", "starred_url": "https://api.github.com/users/aliceyayunji/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aliceyayunji/subscriptions", "organizations_url": "https://api.github.com/users/aliceyayunji/orgs", "repos_url": "https://api.github.com/users/aliceyayunji/repos", "events_url": "https://api.github.com/users/aliceyayunji/events{/privacy}", "received_events_url": "https://api.github.com/users/aliceyayunji/received_events", "type": "User", "site_admin": false}, "created_at": "2018-06-06T09:43:51Z", "updated_at": "2018-06-06T09:44:18Z", "author_association": "NONE", "body_html": "<p>CMake List :<br>\npattern@ubuntu40:~/install/pytorch/build$ cmake ..<br>\n-- Does not need to define long separately.<br>\n-- std::exception_ptr is supported.<br>\n-- NUMA is available<br>\n-- Current compiler supports avx2 extention. Will build perfkernels.<br>\n-- Building using own protobuf under third_party per request.<br>\n-- Use custom protobuf build.<br>\n-- Caffe2 protobuf include directory: $&lt;BUILD_INTERFACE:/home/pattern/install/pytorch/third_party/protobuf/src&gt;$&lt;INSTALL_INTERFACE:include&gt;<br>\n-- The BLAS backend of choice:Eigen<br>\n-- Brace yourself, we are building NNPACK<br>\n-- Found PythonInterp: /usr/bin/python (found version \"2.7.12\")<br>\n-- Caffe2: Cannot find gflags automatically. Using legacy find.<br>\n-- Caffe2: Found gflags  (include: /usr/include, library: /usr/lib/x86_64-linux-gnu/libgflags.so)<br>\n-- Caffe2: Cannot find glog automatically. Using legacy find.<br>\n-- Caffe2: Found glog (include: /usr/include, library: /usr/lib/x86_64-linux-gnu/libglog.so)<br>\n-- Failed to find LLVM FileCheck<br>\n-- git Version: v0.0.0-dirty<br>\n-- Version: 0.0.0<br>\n-- Performing Test HAVE_STD_REGEX -- success<br>\n-- Performing Test HAVE_GNU_POSIX_REGEX -- failed to compile<br>\n-- Performing Test HAVE_POSIX_REGEX -- success<br>\n-- Performing Test HAVE_STEADY_CLOCK -- success<br>\n-- Found lmdb    (include: /usr/include, library: /usr/lib/x86_64-linux-gnu/liblmdb.so)<br>\n-- Found LevelDB (include: /usr/include, library: /usr/lib/x86_64-linux-gnu/libleveldb.so)<br>\n-- Found Snappy  (include: /usr/include, library: /usr/lib/x86_64-linux-gnu/libsnappy.so)<br>\n-- Found Numa  (include: /usr/include, library: /usr/lib/x86_64-linux-gnu/libnuma.so)<br>\n-- OpenCV found (/usr/local/share/OpenCV)<br>\n-- Found system Eigen at /usr/local/include/eigen3<br>\n-- Found PythonInterp: /usr/bin/python (found suitable version \"2.7.12\", minimum required is \"2.7\")<br>\n-- NumPy ver. 1.13.3 found (include: /usr/local/lib/python2.7/dist-packages/numpy/core/include)<br>\n-- Could NOT find pybind11 (missing: pybind11_INCLUDE_DIR)<br>\n-- Caffe2: CUDA detected: 8.0<br>\n-- Caffe2: CUDA nvcc is: /usr/local/cuda/bin/nvcc<br>\n-- Caffe2: CUDA toolkit directory: /usr/local/cuda<br>\n-- Caffe2: Header version is: 8.0<br>\n-- Found cuDNN: v7.0.5  (include: /usr/local/cuda/include, library: /usr/local/cuda/lib64/libcudnn.so)<br>\n-- Set CUDA arch from CUDA_ARCH_NAME: Auto<br>\n-- Automatic GPU detection failed. Building for all known architectures.<br>\n-- Added CUDA NVCC flags for: sm_30 sm_35 sm_50 sm_52 sm_60 sm_61<br>\n-- Could NOT find NCCL (missing: NCCL_INCLUDE_DIRS NCCL_LIBRARIES)<br>\n-- Could NOT find CUB (missing: CUB_INCLUDE_DIR)<br>\n-- Could NOT find Gloo (missing: Gloo_LIBRARY)<br>\n-- CUDA detected: 8.0<br>\n-- Found libcuda: /usr/local/cuda-8.0/lib64/stubs/libcuda.so<br>\n-- Found libnvrtc: /usr/local/cuda-8.0/lib64/libnvrtc.so<br>\n-- GCC 5.4.1: Adding gcc and gcc_s libs to link line<br>\n-- Include NCCL operators<br>\n-- Excluding ideep operators as we are not using ideep<br>\n-- Including image processing operators<br>\n-- Excluding video processing operators due to no opencv<br>\n-- Excluding mkl operators as we are not using mkl<br>\n-- MPI operators skipped due to no MPI support<br>\n-- Include Observer library<br>\n-- Using lib/python2.7/dist-packages as python relative installation path<br>\n-- Automatically generating missing <strong>init</strong>.py files.<br>\n-- A previous caffe2 cmake run already created the <strong>init</strong>.py files.<br>\nCMake Warning at CMakeLists.txt:341 (message):<br>\nGenerated cmake files are only fully tested if one builds with system glog,<br>\ngflags, and protobuf.  Other settings may generate files that are not well<br>\ntested.</p>\n<h2>-- ******** Summary ********<br>\n-- General:<br>\n--   CMake version         : 3.5.1<br>\n--   CMake command         : /usr/bin/cmake<br>\n--   Git version           : v0.1.11-8735-ga6305ea-dirty<br>\n--   System                : Linux<br>\n--   C++ compiler          : /usr/bin/c++<br>\n--   C++ compiler version  : 5.4.1<br>\n--   BLAS                  : Eigen<br>\n--   CXX flags             :  -fvisibility-inlines-hidden -DONNX_NAMESPACE=onnx_c2 -O2 -fPIC -Wno-narrowing -Wno-invalid-partial-specialization -Wall -Wextra -Wno-missing-field-initializers -Wno-type-limits -Wno-unused-parameter -Wno-unknown-warning-option -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-variable -Wno-unused-function<br>\n--   Build type            : Release<br>\n--   Compile definitions   :</h2>\n<p>--   BUILD_CAFFE2          : ON<br>\n--   BUILD_ATEN            : OFF<br>\n--   BUILD_BINARY          : ON<br>\n--   BUILD_CUSTOM_PROTOBUF : ON<br>\n--     Link local protobuf : ON<br>\n--   BUILD_DOCS            : OFF<br>\n--   BUILD_PYTHON          : ON<br>\n--     Python version      : 2.7.12<br>\n--     Python includes     : /usr/include/python2.7<br>\n--   BUILD_SHARED_LIBS     : ON<br>\n--   BUILD_TEST            : ON<br>\n--   USE_ASAN              : OFF<br>\n--   USE_CUDA              : ON<br>\n--     CUDA static link    : OFF<br>\n--     USE_CUDNN           : ON<br>\n--     CUDA version        : 8.0<br>\n--     cuDNN version       : 7.0.5<br>\n--     CUDA root directory : /usr/local/cuda<br>\n--     CUDA library        : /usr/local/cuda-8.0/lib64/stubs/libcuda.so<br>\n--     cudart library      : /usr/local/cuda/lib64/libcudart_static.a;-pthread;dl;/usr/lib/x86_64-linux-gnu/librt.so<br>\n--     cublas library      : /usr/local/cuda/lib64/libcublas.so;/usr/local/cuda/lib64/libcublas_device.a<br>\n--     cufft library       : /usr/local/cuda/lib64/libcufft.so<br>\n--     curand library      : /usr/local/cuda/lib64/libcurand.so<br>\n--     cuDNN library       : /usr/local/cuda/lib64/libcudnn.so<br>\n--     nvrtc               : /usr/local/cuda-8.0/lib64/libnvrtc.so<br>\n--     CUDA include path   : /usr/local/cuda/include<br>\n--     NVCC executable     : /usr/local/cuda/bin/nvcc<br>\n--     CUDA host compiler  : /usr/bin/cc<br>\n--     USE_TENSORRT        : OFF<br>\n--   USE_ROCM              : OFF<br>\n--   USE_EIGEN_FOR_BLAS    : ON<br>\n--   USE_FFMPEG            : OFF<br>\n--   USE_GFLAGS            : ON<br>\n--   USE_GLOG              : ON<br>\n--   USE_GLOO              : ON<br>\n--     USE_GLOO_IBVERBS    : OFF<br>\n--   USE_LEVELDB           : ON<br>\n--     LevelDB version     : 1.18<br>\n--     Snappy version      : 1.1.3<br>\n--   USE_LITE_PROTO        : OFF<br>\n--   USE_LMDB              : ON<br>\n--     LMDB version        : 0.9.17<br>\n--   USE_METAL             : OFF<br>\n--   USE_MKL               :<br>\n--   USE_MOBILE_OPENGL     : OFF<br>\n--   USE_MPI               : OFF<br>\n--   USE_NCCL              : ON<br>\n--     USE_SYSTEM_NCCL     : OFF<br>\n--   USE_NERVANA_GPU       : OFF<br>\n--   USE_NNPACK            : ON<br>\n--   USE_OBSERVERS         : ON<br>\n--   USE_OPENCL            : OFF<br>\n--   USE_OPENCV            : ON<br>\n--     OpenCV version      : 3.4.1<br>\n--   USE_OPENMP            : OFF<br>\n--   USE_PROF              : OFF<br>\n--   USE_REDIS             : OFF<br>\n--   USE_ROCKSDB           : OFF<br>\n--   USE_ZMQ               : OFF<br>\n-- Configuring done<br>\n-- Generating done<br>\n-- Build files have been written to: /home/pattern/install/pytorch/build</p>", "body_text": "CMake List :\npattern@ubuntu40:~/install/pytorch/build$ cmake ..\n-- Does not need to define long separately.\n-- std::exception_ptr is supported.\n-- NUMA is available\n-- Current compiler supports avx2 extention. Will build perfkernels.\n-- Building using own protobuf under third_party per request.\n-- Use custom protobuf build.\n-- Caffe2 protobuf include directory: $<BUILD_INTERFACE:/home/pattern/install/pytorch/third_party/protobuf/src>$<INSTALL_INTERFACE:include>\n-- The BLAS backend of choice:Eigen\n-- Brace yourself, we are building NNPACK\n-- Found PythonInterp: /usr/bin/python (found version \"2.7.12\")\n-- Caffe2: Cannot find gflags automatically. Using legacy find.\n-- Caffe2: Found gflags  (include: /usr/include, library: /usr/lib/x86_64-linux-gnu/libgflags.so)\n-- Caffe2: Cannot find glog automatically. Using legacy find.\n-- Caffe2: Found glog (include: /usr/include, library: /usr/lib/x86_64-linux-gnu/libglog.so)\n-- Failed to find LLVM FileCheck\n-- git Version: v0.0.0-dirty\n-- Version: 0.0.0\n-- Performing Test HAVE_STD_REGEX -- success\n-- Performing Test HAVE_GNU_POSIX_REGEX -- failed to compile\n-- Performing Test HAVE_POSIX_REGEX -- success\n-- Performing Test HAVE_STEADY_CLOCK -- success\n-- Found lmdb    (include: /usr/include, library: /usr/lib/x86_64-linux-gnu/liblmdb.so)\n-- Found LevelDB (include: /usr/include, library: /usr/lib/x86_64-linux-gnu/libleveldb.so)\n-- Found Snappy  (include: /usr/include, library: /usr/lib/x86_64-linux-gnu/libsnappy.so)\n-- Found Numa  (include: /usr/include, library: /usr/lib/x86_64-linux-gnu/libnuma.so)\n-- OpenCV found (/usr/local/share/OpenCV)\n-- Found system Eigen at /usr/local/include/eigen3\n-- Found PythonInterp: /usr/bin/python (found suitable version \"2.7.12\", minimum required is \"2.7\")\n-- NumPy ver. 1.13.3 found (include: /usr/local/lib/python2.7/dist-packages/numpy/core/include)\n-- Could NOT find pybind11 (missing: pybind11_INCLUDE_DIR)\n-- Caffe2: CUDA detected: 8.0\n-- Caffe2: CUDA nvcc is: /usr/local/cuda/bin/nvcc\n-- Caffe2: CUDA toolkit directory: /usr/local/cuda\n-- Caffe2: Header version is: 8.0\n-- Found cuDNN: v7.0.5  (include: /usr/local/cuda/include, library: /usr/local/cuda/lib64/libcudnn.so)\n-- Set CUDA arch from CUDA_ARCH_NAME: Auto\n-- Automatic GPU detection failed. Building for all known architectures.\n-- Added CUDA NVCC flags for: sm_30 sm_35 sm_50 sm_52 sm_60 sm_61\n-- Could NOT find NCCL (missing: NCCL_INCLUDE_DIRS NCCL_LIBRARIES)\n-- Could NOT find CUB (missing: CUB_INCLUDE_DIR)\n-- Could NOT find Gloo (missing: Gloo_LIBRARY)\n-- CUDA detected: 8.0\n-- Found libcuda: /usr/local/cuda-8.0/lib64/stubs/libcuda.so\n-- Found libnvrtc: /usr/local/cuda-8.0/lib64/libnvrtc.so\n-- GCC 5.4.1: Adding gcc and gcc_s libs to link line\n-- Include NCCL operators\n-- Excluding ideep operators as we are not using ideep\n-- Including image processing operators\n-- Excluding video processing operators due to no opencv\n-- Excluding mkl operators as we are not using mkl\n-- MPI operators skipped due to no MPI support\n-- Include Observer library\n-- Using lib/python2.7/dist-packages as python relative installation path\n-- Automatically generating missing init.py files.\n-- A previous caffe2 cmake run already created the init.py files.\nCMake Warning at CMakeLists.txt:341 (message):\nGenerated cmake files are only fully tested if one builds with system glog,\ngflags, and protobuf.  Other settings may generate files that are not well\ntested.\n-- ******** Summary ********\n-- General:\n--   CMake version         : 3.5.1\n--   CMake command         : /usr/bin/cmake\n--   Git version           : v0.1.11-8735-ga6305ea-dirty\n--   System                : Linux\n--   C++ compiler          : /usr/bin/c++\n--   C++ compiler version  : 5.4.1\n--   BLAS                  : Eigen\n--   CXX flags             :  -fvisibility-inlines-hidden -DONNX_NAMESPACE=onnx_c2 -O2 -fPIC -Wno-narrowing -Wno-invalid-partial-specialization -Wall -Wextra -Wno-missing-field-initializers -Wno-type-limits -Wno-unused-parameter -Wno-unknown-warning-option -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-variable -Wno-unused-function\n--   Build type            : Release\n--   Compile definitions   :\n--   BUILD_CAFFE2          : ON\n--   BUILD_ATEN            : OFF\n--   BUILD_BINARY          : ON\n--   BUILD_CUSTOM_PROTOBUF : ON\n--     Link local protobuf : ON\n--   BUILD_DOCS            : OFF\n--   BUILD_PYTHON          : ON\n--     Python version      : 2.7.12\n--     Python includes     : /usr/include/python2.7\n--   BUILD_SHARED_LIBS     : ON\n--   BUILD_TEST            : ON\n--   USE_ASAN              : OFF\n--   USE_CUDA              : ON\n--     CUDA static link    : OFF\n--     USE_CUDNN           : ON\n--     CUDA version        : 8.0\n--     cuDNN version       : 7.0.5\n--     CUDA root directory : /usr/local/cuda\n--     CUDA library        : /usr/local/cuda-8.0/lib64/stubs/libcuda.so\n--     cudart library      : /usr/local/cuda/lib64/libcudart_static.a;-pthread;dl;/usr/lib/x86_64-linux-gnu/librt.so\n--     cublas library      : /usr/local/cuda/lib64/libcublas.so;/usr/local/cuda/lib64/libcublas_device.a\n--     cufft library       : /usr/local/cuda/lib64/libcufft.so\n--     curand library      : /usr/local/cuda/lib64/libcurand.so\n--     cuDNN library       : /usr/local/cuda/lib64/libcudnn.so\n--     nvrtc               : /usr/local/cuda-8.0/lib64/libnvrtc.so\n--     CUDA include path   : /usr/local/cuda/include\n--     NVCC executable     : /usr/local/cuda/bin/nvcc\n--     CUDA host compiler  : /usr/bin/cc\n--     USE_TENSORRT        : OFF\n--   USE_ROCM              : OFF\n--   USE_EIGEN_FOR_BLAS    : ON\n--   USE_FFMPEG            : OFF\n--   USE_GFLAGS            : ON\n--   USE_GLOG              : ON\n--   USE_GLOO              : ON\n--     USE_GLOO_IBVERBS    : OFF\n--   USE_LEVELDB           : ON\n--     LevelDB version     : 1.18\n--     Snappy version      : 1.1.3\n--   USE_LITE_PROTO        : OFF\n--   USE_LMDB              : ON\n--     LMDB version        : 0.9.17\n--   USE_METAL             : OFF\n--   USE_MKL               :\n--   USE_MOBILE_OPENGL     : OFF\n--   USE_MPI               : OFF\n--   USE_NCCL              : ON\n--     USE_SYSTEM_NCCL     : OFF\n--   USE_NERVANA_GPU       : OFF\n--   USE_NNPACK            : ON\n--   USE_OBSERVERS         : ON\n--   USE_OPENCL            : OFF\n--   USE_OPENCV            : ON\n--     OpenCV version      : 3.4.1\n--   USE_OPENMP            : OFF\n--   USE_PROF              : OFF\n--   USE_REDIS             : OFF\n--   USE_ROCKSDB           : OFF\n--   USE_ZMQ               : OFF\n-- Configuring done\n-- Generating done\n-- Build files have been written to: /home/pattern/install/pytorch/build", "body": "CMake List : \r\npattern@ubuntu40:~/install/pytorch/build$ cmake ..\r\n-- Does not need to define long separately.\r\n-- std::exception_ptr is supported.\r\n-- NUMA is available\r\n-- Current compiler supports avx2 extention. Will build perfkernels.\r\n-- Building using own protobuf under third_party per request.\r\n-- Use custom protobuf build.\r\n-- Caffe2 protobuf include directory: $<BUILD_INTERFACE:/home/pattern/install/pytorch/third_party/protobuf/src>$<INSTALL_INTERFACE:include>\r\n-- The BLAS backend of choice:Eigen\r\n-- Brace yourself, we are building NNPACK\r\n-- Found PythonInterp: /usr/bin/python (found version \"2.7.12\") \r\n-- Caffe2: Cannot find gflags automatically. Using legacy find.\r\n-- Caffe2: Found gflags  (include: /usr/include, library: /usr/lib/x86_64-linux-gnu/libgflags.so)\r\n-- Caffe2: Cannot find glog automatically. Using legacy find.\r\n-- Caffe2: Found glog (include: /usr/include, library: /usr/lib/x86_64-linux-gnu/libglog.so)\r\n-- Failed to find LLVM FileCheck\r\n-- git Version: v0.0.0-dirty\r\n-- Version: 0.0.0\r\n-- Performing Test HAVE_STD_REGEX -- success\r\n-- Performing Test HAVE_GNU_POSIX_REGEX -- failed to compile\r\n-- Performing Test HAVE_POSIX_REGEX -- success\r\n-- Performing Test HAVE_STEADY_CLOCK -- success\r\n-- Found lmdb    (include: /usr/include, library: /usr/lib/x86_64-linux-gnu/liblmdb.so)\r\n-- Found LevelDB (include: /usr/include, library: /usr/lib/x86_64-linux-gnu/libleveldb.so)\r\n-- Found Snappy  (include: /usr/include, library: /usr/lib/x86_64-linux-gnu/libsnappy.so)\r\n-- Found Numa  (include: /usr/include, library: /usr/lib/x86_64-linux-gnu/libnuma.so)\r\n-- OpenCV found (/usr/local/share/OpenCV)\r\n-- Found system Eigen at /usr/local/include/eigen3\r\n-- Found PythonInterp: /usr/bin/python (found suitable version \"2.7.12\", minimum required is \"2.7\") \r\n-- NumPy ver. 1.13.3 found (include: /usr/local/lib/python2.7/dist-packages/numpy/core/include)\r\n-- Could NOT find pybind11 (missing: pybind11_INCLUDE_DIR) \r\n-- Caffe2: CUDA detected: 8.0\r\n-- Caffe2: CUDA nvcc is: /usr/local/cuda/bin/nvcc\r\n-- Caffe2: CUDA toolkit directory: /usr/local/cuda\r\n-- Caffe2: Header version is: 8.0\r\n-- Found cuDNN: v7.0.5  (include: /usr/local/cuda/include, library: /usr/local/cuda/lib64/libcudnn.so)\r\n-- Set CUDA arch from CUDA_ARCH_NAME: Auto\r\n-- Automatic GPU detection failed. Building for all known architectures.\r\n-- Added CUDA NVCC flags for: sm_30 sm_35 sm_50 sm_52 sm_60 sm_61\r\n-- Could NOT find NCCL (missing: NCCL_INCLUDE_DIRS NCCL_LIBRARIES) \r\n-- Could NOT find CUB (missing: CUB_INCLUDE_DIR) \r\n-- Could NOT find Gloo (missing: Gloo_LIBRARY) \r\n-- CUDA detected: 8.0\r\n-- Found libcuda: /usr/local/cuda-8.0/lib64/stubs/libcuda.so\r\n-- Found libnvrtc: /usr/local/cuda-8.0/lib64/libnvrtc.so\r\n-- GCC 5.4.1: Adding gcc and gcc_s libs to link line\r\n-- Include NCCL operators\r\n-- Excluding ideep operators as we are not using ideep\r\n-- Including image processing operators\r\n-- Excluding video processing operators due to no opencv\r\n-- Excluding mkl operators as we are not using mkl\r\n-- MPI operators skipped due to no MPI support\r\n-- Include Observer library\r\n-- Using lib/python2.7/dist-packages as python relative installation path\r\n-- Automatically generating missing __init__.py files.\r\n-- A previous caffe2 cmake run already created the __init__.py files.\r\nCMake Warning at CMakeLists.txt:341 (message):\r\n  Generated cmake files are only fully tested if one builds with system glog,\r\n  gflags, and protobuf.  Other settings may generate files that are not well\r\n  tested.\r\n\r\n\r\n-- ******** Summary ********\r\n-- General:\r\n--   CMake version         : 3.5.1\r\n--   CMake command         : /usr/bin/cmake\r\n--   Git version           : v0.1.11-8735-ga6305ea-dirty\r\n--   System                : Linux\r\n--   C++ compiler          : /usr/bin/c++\r\n--   C++ compiler version  : 5.4.1\r\n--   BLAS                  : Eigen\r\n--   CXX flags             :  -fvisibility-inlines-hidden -DONNX_NAMESPACE=onnx_c2 -O2 -fPIC -Wno-narrowing -Wno-invalid-partial-specialization -Wall -Wextra -Wno-missing-field-initializers -Wno-type-limits -Wno-unused-parameter -Wno-unknown-warning-option -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-variable -Wno-unused-function\r\n--   Build type            : Release\r\n--   Compile definitions   : \r\n-- \r\n--   BUILD_CAFFE2          : ON\r\n--   BUILD_ATEN            : OFF\r\n--   BUILD_BINARY          : ON\r\n--   BUILD_CUSTOM_PROTOBUF : ON\r\n--     Link local protobuf : ON\r\n--   BUILD_DOCS            : OFF\r\n--   BUILD_PYTHON          : ON\r\n--     Python version      : 2.7.12\r\n--     Python includes     : /usr/include/python2.7\r\n--   BUILD_SHARED_LIBS     : ON\r\n--   BUILD_TEST            : ON\r\n--   USE_ASAN              : OFF\r\n--   USE_CUDA              : ON\r\n--     CUDA static link    : OFF\r\n--     USE_CUDNN           : ON\r\n--     CUDA version        : 8.0\r\n--     cuDNN version       : 7.0.5\r\n--     CUDA root directory : /usr/local/cuda\r\n--     CUDA library        : /usr/local/cuda-8.0/lib64/stubs/libcuda.so\r\n--     cudart library      : /usr/local/cuda/lib64/libcudart_static.a;-pthread;dl;/usr/lib/x86_64-linux-gnu/librt.so\r\n--     cublas library      : /usr/local/cuda/lib64/libcublas.so;/usr/local/cuda/lib64/libcublas_device.a\r\n--     cufft library       : /usr/local/cuda/lib64/libcufft.so\r\n--     curand library      : /usr/local/cuda/lib64/libcurand.so\r\n--     cuDNN library       : /usr/local/cuda/lib64/libcudnn.so\r\n--     nvrtc               : /usr/local/cuda-8.0/lib64/libnvrtc.so\r\n--     CUDA include path   : /usr/local/cuda/include\r\n--     NVCC executable     : /usr/local/cuda/bin/nvcc\r\n--     CUDA host compiler  : /usr/bin/cc\r\n--     USE_TENSORRT        : OFF\r\n--   USE_ROCM              : OFF\r\n--   USE_EIGEN_FOR_BLAS    : ON\r\n--   USE_FFMPEG            : OFF\r\n--   USE_GFLAGS            : ON\r\n--   USE_GLOG              : ON\r\n--   USE_GLOO              : ON\r\n--     USE_GLOO_IBVERBS    : OFF\r\n--   USE_LEVELDB           : ON\r\n--     LevelDB version     : 1.18\r\n--     Snappy version      : 1.1.3\r\n--   USE_LITE_PROTO        : OFF\r\n--   USE_LMDB              : ON\r\n--     LMDB version        : 0.9.17\r\n--   USE_METAL             : OFF\r\n--   USE_MKL               : \r\n--   USE_MOBILE_OPENGL     : OFF\r\n--   USE_MPI               : OFF\r\n--   USE_NCCL              : ON\r\n--     USE_SYSTEM_NCCL     : OFF\r\n--   USE_NERVANA_GPU       : OFF\r\n--   USE_NNPACK            : ON\r\n--   USE_OBSERVERS         : ON\r\n--   USE_OPENCL            : OFF\r\n--   USE_OPENCV            : ON\r\n--     OpenCV version      : 3.4.1\r\n--   USE_OPENMP            : OFF\r\n--   USE_PROF              : OFF\r\n--   USE_REDIS             : OFF\r\n--   USE_ROCKSDB           : OFF\r\n--   USE_ZMQ               : OFF\r\n-- Configuring done\r\n-- Generating done\r\n-- Build files have been written to: /home/pattern/install/pytorch/build"}