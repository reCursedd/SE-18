{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/390460468", "html_url": "https://github.com/pytorch/pytorch/pull/7710#issuecomment-390460468", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/7710", "id": 390460468, "node_id": "MDEyOklzc3VlQ29tbWVudDM5MDQ2MDQ2OA==", "user": {"login": "SsnL", "id": 5674597, "node_id": "MDQ6VXNlcjU2NzQ1OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5674597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SsnL", "html_url": "https://github.com/SsnL", "followers_url": "https://api.github.com/users/SsnL/followers", "following_url": "https://api.github.com/users/SsnL/following{/other_user}", "gists_url": "https://api.github.com/users/SsnL/gists{/gist_id}", "starred_url": "https://api.github.com/users/SsnL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SsnL/subscriptions", "organizations_url": "https://api.github.com/users/SsnL/orgs", "repos_url": "https://api.github.com/users/SsnL/repos", "events_url": "https://api.github.com/users/SsnL/events{/privacy}", "received_events_url": "https://api.github.com/users/SsnL/received_events", "type": "User", "site_admin": false}, "created_at": "2018-05-20T06:14:53Z", "updated_at": "2018-05-20T06:14:53Z", "author_association": "CONTRIBUTOR", "body_html": "<p>The current gradgradcheck is broken because the inputs, containing <code>grad_outputs</code>, is not actually used in the function. Then when it is non-contiguous and gradcheck makes it contiguous, things break.</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-c\"><span class=\"pl-c\">#</span> print numerical and analytical grad wrt the grad_output</span>\n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> torch.autograd.gradgradcheck(<span class=\"pl-k\">lambda</span> <span class=\"pl-smi\">x</span>: x, [torch.randn(<span class=\"pl-c1\">3</span>).requires_grad_()], <span class=\"pl-v\">gen_non_contig_grad_outputs</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">False</span>)\n(tensor([[ <span class=\"pl-c1\">1.0133</span>,  <span class=\"pl-c1\">0.0000</span>,  <span class=\"pl-c1\">0.0000</span>],\n        [ <span class=\"pl-c1\">0.0000</span>,  <span class=\"pl-c1\">1.0133</span>,  <span class=\"pl-c1\">0.0000</span>],\n        [ <span class=\"pl-c1\">0.0000</span>,  <span class=\"pl-c1\">0.0000</span>,  <span class=\"pl-c1\">1.0133</span>]]), tensor([[ <span class=\"pl-c1\">1</span>.,  <span class=\"pl-c1\">0</span>.,  <span class=\"pl-c1\">0</span>.],\n        [ <span class=\"pl-c1\">0</span>.,  <span class=\"pl-c1\">1</span>.,  <span class=\"pl-c1\">0</span>.],\n        [ <span class=\"pl-c1\">0</span>.,  <span class=\"pl-c1\">0</span>.,  <span class=\"pl-c1\">1</span>.]]))\n\n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> torch.autograd.gradgradcheck(<span class=\"pl-k\">lambda</span> <span class=\"pl-smi\">x</span>: x, [torch.randn(<span class=\"pl-c1\">3</span>).requires_grad_()], <span class=\"pl-v\">gen_non_contig_grad_outputs</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>)\n(tensor([[ <span class=\"pl-c1\">0</span>.,  <span class=\"pl-c1\">0</span>.,  <span class=\"pl-c1\">0</span>.],\n        [ <span class=\"pl-c1\">0</span>.,  <span class=\"pl-c1\">0</span>.,  <span class=\"pl-c1\">0</span>.],\n        [ <span class=\"pl-c1\">0</span>.,  <span class=\"pl-c1\">0</span>.,  <span class=\"pl-c1\">0</span>.]]), tensor([[ <span class=\"pl-c1\">0</span>.,  <span class=\"pl-c1\">0</span>.,  <span class=\"pl-c1\">0</span>.],\n        [ <span class=\"pl-c1\">0</span>.,  <span class=\"pl-c1\">0</span>.,  <span class=\"pl-c1\">0</span>.],\n        [ <span class=\"pl-c1\">0</span>.,  <span class=\"pl-c1\">0</span>.,  <span class=\"pl-c1\">0</span>.]]))</pre></div>\n<p>Also fixing this.</p>", "body_text": "The current gradgradcheck is broken because the inputs, containing grad_outputs, is not actually used in the function. Then when it is non-contiguous and gradcheck makes it contiguous, things break.\n>>> # print numerical and analytical grad wrt the grad_output\n>>> torch.autograd.gradgradcheck(lambda x: x, [torch.randn(3).requires_grad_()], gen_non_contig_grad_outputs=False)\n(tensor([[ 1.0133,  0.0000,  0.0000],\n        [ 0.0000,  1.0133,  0.0000],\n        [ 0.0000,  0.0000,  1.0133]]), tensor([[ 1.,  0.,  0.],\n        [ 0.,  1.,  0.],\n        [ 0.,  0.,  1.]]))\n\n>>> torch.autograd.gradgradcheck(lambda x: x, [torch.randn(3).requires_grad_()], gen_non_contig_grad_outputs=True)\n(tensor([[ 0.,  0.,  0.],\n        [ 0.,  0.,  0.],\n        [ 0.,  0.,  0.]]), tensor([[ 0.,  0.,  0.],\n        [ 0.,  0.,  0.],\n        [ 0.,  0.,  0.]]))\nAlso fixing this.", "body": "The current gradgradcheck is broken because the inputs, containing `grad_outputs`, is not actually used in the function. Then when it is non-contiguous and gradcheck makes it contiguous, things break. \r\n```py\r\n>>> # print numerical and analytical grad wrt the grad_output\r\n>>> torch.autograd.gradgradcheck(lambda x: x, [torch.randn(3).requires_grad_()], gen_non_contig_grad_outputs=False)\r\n(tensor([[ 1.0133,  0.0000,  0.0000],\r\n        [ 0.0000,  1.0133,  0.0000],\r\n        [ 0.0000,  0.0000,  1.0133]]), tensor([[ 1.,  0.,  0.],\r\n        [ 0.,  1.,  0.],\r\n        [ 0.,  0.,  1.]]))\r\n\r\n>>> torch.autograd.gradgradcheck(lambda x: x, [torch.randn(3).requires_grad_()], gen_non_contig_grad_outputs=True)\r\n(tensor([[ 0.,  0.,  0.],\r\n        [ 0.,  0.,  0.],\r\n        [ 0.,  0.,  0.]]), tensor([[ 0.,  0.,  0.],\r\n        [ 0.,  0.,  0.],\r\n        [ 0.,  0.,  0.]]))\r\n```\r\n\r\nAlso fixing this."}