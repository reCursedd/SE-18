{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/338645628", "html_url": "https://github.com/pytorch/pytorch/issues/3225#issuecomment-338645628", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/3225", "id": 338645628, "node_id": "MDEyOklzc3VlQ29tbWVudDMzODY0NTYyOA==", "user": {"login": "mrdrozdov", "id": 1575034, "node_id": "MDQ6VXNlcjE1NzUwMzQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/1575034?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrdrozdov", "html_url": "https://github.com/mrdrozdov", "followers_url": "https://api.github.com/users/mrdrozdov/followers", "following_url": "https://api.github.com/users/mrdrozdov/following{/other_user}", "gists_url": "https://api.github.com/users/mrdrozdov/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrdrozdov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrdrozdov/subscriptions", "organizations_url": "https://api.github.com/users/mrdrozdov/orgs", "repos_url": "https://api.github.com/users/mrdrozdov/repos", "events_url": "https://api.github.com/users/mrdrozdov/events{/privacy}", "received_events_url": "https://api.github.com/users/mrdrozdov/received_events", "type": "User", "site_admin": false}, "created_at": "2017-10-23T12:40:00Z", "updated_at": "2017-10-23T12:40:00Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Thanks for pointing this out. Perhaps the behavior of SubConstant should change? Here is the old behavior (0.1.12):</p>\n<pre><code>def forward(self, a):\n    if self.sub_tensor:\n        if a.is_signed() and self.inplace:\n            self.mark_dirty(a)\n            return a.neg_().add_(self.constant)\n        else:\n            assert not self.inplace, \"can't perform (constant - tensor) \" \\\n                \"subtraction in-place on an unsigned type\"\n            return a.new().resize_as_(a).fill_(self.constant).sub_(a)\n    else:\n        if self.inplace:\n            self.mark_dirty(a)\n            return a.sub_(self.constant)\n        else:\n            return a.sub(self.constant)\n</code></pre>", "body_text": "Thanks for pointing this out. Perhaps the behavior of SubConstant should change? Here is the old behavior (0.1.12):\ndef forward(self, a):\n    if self.sub_tensor:\n        if a.is_signed() and self.inplace:\n            self.mark_dirty(a)\n            return a.neg_().add_(self.constant)\n        else:\n            assert not self.inplace, \"can't perform (constant - tensor) \" \\\n                \"subtraction in-place on an unsigned type\"\n            return a.new().resize_as_(a).fill_(self.constant).sub_(a)\n    else:\n        if self.inplace:\n            self.mark_dirty(a)\n            return a.sub_(self.constant)\n        else:\n            return a.sub(self.constant)", "body": "Thanks for pointing this out. Perhaps the behavior of SubConstant should change? Here is the old behavior (0.1.12):\r\n\r\n```\r\ndef forward(self, a):\r\n    if self.sub_tensor:\r\n        if a.is_signed() and self.inplace:\r\n            self.mark_dirty(a)\r\n            return a.neg_().add_(self.constant)\r\n        else:\r\n            assert not self.inplace, \"can't perform (constant - tensor) \" \\\r\n                \"subtraction in-place on an unsigned type\"\r\n            return a.new().resize_as_(a).fill_(self.constant).sub_(a)\r\n    else:\r\n        if self.inplace:\r\n            self.mark_dirty(a)\r\n            return a.sub_(self.constant)\r\n        else:\r\n            return a.sub(self.constant)\r\n```"}