{"url": "https://api.github.com/repos/pytorch/pytorch/issues/3367", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/3367/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/3367/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/3367/events", "html_url": "https://github.com/pytorch/pytorch/issues/3367", "id": 269642969, "node_id": "MDU6SXNzdWUyNjk2NDI5Njk=", "number": 3367, "title": "Empty cuda sparse tensor storage not initialized correctly", "user": {"login": "SsnL", "id": 5674597, "node_id": "MDQ6VXNlcjU2NzQ1OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5674597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SsnL", "html_url": "https://github.com/SsnL", "followers_url": "https://api.github.com/users/SsnL/followers", "following_url": "https://api.github.com/users/SsnL/following{/other_user}", "gists_url": "https://api.github.com/users/SsnL/gists{/gist_id}", "starred_url": "https://api.github.com/users/SsnL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SsnL/subscriptions", "organizations_url": "https://api.github.com/users/SsnL/orgs", "repos_url": "https://api.github.com/users/SsnL/repos", "events_url": "https://api.github.com/users/SsnL/events{/privacy}", "received_events_url": "https://api.github.com/users/SsnL/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-10-30T15:28:49Z", "updated_at": "2017-10-30T22:55:27Z", "closed_at": "2017-10-30T22:55:27Z", "author_association": "CONTRIBUTOR", "body_html": "<p>This causes <code>get_device</code> to not work properly on newly created empty sparse tensors. In the example below, both <code>get_device</code> should print 1 instead.</p>\n<pre><code>&gt;&gt;&gt; with torch.cuda.device(1):\n...   x = torch.cuda.sparse.FloatTensor()  # has to be empty size\n...\n&gt;&gt;&gt; x.get_device()\n-1\n&gt;&gt;&gt; x\nFloatTensor of size  with indices:\n[torch.cuda.LongTensor with no dimension]\nand values:\n[torch.cuda.FloatTensor with no dimension]\n\n&gt;&gt;&gt; x.get_device()\n0\n</code></pre>", "body_text": "This causes get_device to not work properly on newly created empty sparse tensors. In the example below, both get_device should print 1 instead.\n>>> with torch.cuda.device(1):\n...   x = torch.cuda.sparse.FloatTensor()  # has to be empty size\n...\n>>> x.get_device()\n-1\n>>> x\nFloatTensor of size  with indices:\n[torch.cuda.LongTensor with no dimension]\nand values:\n[torch.cuda.FloatTensor with no dimension]\n\n>>> x.get_device()\n0", "body": "This causes `get_device` to not work properly on newly created empty sparse tensors. In the example below, both `get_device` should print 1 instead.\r\n```\r\n>>> with torch.cuda.device(1):\r\n...   x = torch.cuda.sparse.FloatTensor()  # has to be empty size\r\n...\r\n>>> x.get_device()\r\n-1\r\n>>> x\r\nFloatTensor of size  with indices:\r\n[torch.cuda.LongTensor with no dimension]\r\nand values:\r\n[torch.cuda.FloatTensor with no dimension]\r\n\r\n>>> x.get_device()\r\n0\r\n```"}