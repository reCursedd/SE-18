{"url": "https://api.github.com/repos/pytorch/pytorch/issues/11957", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/11957/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/11957/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/11957/events", "html_url": "https://github.com/pytorch/pytorch/pull/11957", "id": 362796395, "node_id": "MDExOlB1bGxSZXF1ZXN0MjE3NDE4NjE1", "number": 11957, "title": "New chaining/partitioning algorithm for async_scheduling for inference", "user": {"login": "yinghai", "id": 1100089, "node_id": "MDQ6VXNlcjExMDAwODk=", "avatar_url": "https://avatars1.githubusercontent.com/u/1100089?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yinghai", "html_url": "https://github.com/yinghai", "followers_url": "https://api.github.com/users/yinghai/followers", "following_url": "https://api.github.com/users/yinghai/following{/other_user}", "gists_url": "https://api.github.com/users/yinghai/gists{/gist_id}", "starred_url": "https://api.github.com/users/yinghai/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yinghai/subscriptions", "organizations_url": "https://api.github.com/users/yinghai/orgs", "repos_url": "https://api.github.com/users/yinghai/repos", "events_url": "https://api.github.com/users/yinghai/events{/privacy}", "received_events_url": "https://api.github.com/users/yinghai/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-09-21T22:47:34Z", "updated_at": "2018-10-08T21:54:06Z", "closed_at": "2018-10-08T19:26:23Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/11957", "html_url": "https://github.com/pytorch/pytorch/pull/11957", "diff_url": "https://github.com/pytorch/pytorch/pull/11957.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/11957.patch"}, "body_html": "<p>Summary:<br>\nFor distributed inference, we want to use async_scheduling net to run the net as we need its async part. However, according to the profiling, async_net has big overhead of dispatching tasks onto worker threads. This diff improves the issue by generating a smaller number of chains/tasks by grouping the sync ops that can be run in one shot. Note that it also schedule individual async ops as a single chain because unlike gpu ops, rpc ops are not guaranteed to be linearized at the remote site. For example, if you have two rps ops <code>op1-&gt;op2</code>, op2 won't implicitly block until op1 finishes. Therefore we need to put each of the async op as one chain as async_scheduling net will only sync the tail of the chain.</p>\n<p>For the all sync op nets, this change give us <code>1.5X</code> slower than simple_net, while without the change, it is <code>7X</code> slower.</p>\n<p>Next step is to work on the executor to make the task scheduling faster. And add a fallback path to be able to run ops inline if it's a all-sync net.</p>\n<p>Differential Revision: D9874140</p>", "body_text": "Summary:\nFor distributed inference, we want to use async_scheduling net to run the net as we need its async part. However, according to the profiling, async_net has big overhead of dispatching tasks onto worker threads. This diff improves the issue by generating a smaller number of chains/tasks by grouping the sync ops that can be run in one shot. Note that it also schedule individual async ops as a single chain because unlike gpu ops, rpc ops are not guaranteed to be linearized at the remote site. For example, if you have two rps ops op1->op2, op2 won't implicitly block until op1 finishes. Therefore we need to put each of the async op as one chain as async_scheduling net will only sync the tail of the chain.\nFor the all sync op nets, this change give us 1.5X slower than simple_net, while without the change, it is 7X slower.\nNext step is to work on the executor to make the task scheduling faster. And add a fallback path to be able to run ops inline if it's a all-sync net.\nDifferential Revision: D9874140", "body": "Summary:\r\nFor distributed inference, we want to use async_scheduling net to run the net as we need its async part. However, according to the profiling, async_net has big overhead of dispatching tasks onto worker threads. This diff improves the issue by generating a smaller number of chains/tasks by grouping the sync ops that can be run in one shot. Note that it also schedule individual async ops as a single chain because unlike gpu ops, rpc ops are not guaranteed to be linearized at the remote site. For example, if you have two rps ops `op1->op2`, op2 won't implicitly block until op1 finishes. Therefore we need to put each of the async op as one chain as async_scheduling net will only sync the tail of the chain.\r\n\r\nFor the all sync op nets, this change give us `1.5X` slower than simple_net, while without the change, it is `7X` slower.\r\n\r\nNext step is to work on the executor to make the task scheduling faster. And add a fallback path to be able to run ops inline if it's a all-sync net.\r\n\r\nDifferential Revision: D9874140\r\n"}