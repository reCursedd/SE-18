{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/395339808", "html_url": "https://github.com/pytorch/pytorch/issues/8208#issuecomment-395339808", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/8208", "id": 395339808, "node_id": "MDEyOklzc3VlQ29tbWVudDM5NTMzOTgwOA==", "user": {"login": "t-vi", "id": 20787943, "node_id": "MDQ6VXNlcjIwNzg3OTQz", "avatar_url": "https://avatars2.githubusercontent.com/u/20787943?v=4", "gravatar_id": "", "url": "https://api.github.com/users/t-vi", "html_url": "https://github.com/t-vi", "followers_url": "https://api.github.com/users/t-vi/followers", "following_url": "https://api.github.com/users/t-vi/following{/other_user}", "gists_url": "https://api.github.com/users/t-vi/gists{/gist_id}", "starred_url": "https://api.github.com/users/t-vi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/t-vi/subscriptions", "organizations_url": "https://api.github.com/users/t-vi/orgs", "repos_url": "https://api.github.com/users/t-vi/repos", "events_url": "https://api.github.com/users/t-vi/events{/privacy}", "received_events_url": "https://api.github.com/users/t-vi/received_events", "type": "User", "site_admin": false}, "created_at": "2018-06-07T08:36:44Z", "updated_at": "2018-06-07T08:36:44Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Thanks for looking into this!<br>\nI agree that one should expect the weight to \"be fixed\" to the computed weight in both cases.<br>\nIn terms of practically achieving this, my ideas would be:</p>\n<ol>\n<li>The current behaviour seems suboptimal indeed. I would expect the <code>.eval</code>ed network to give the same weight as the previous iteration. The current code does not make this easy to achieve except for caching <code>v</code>. Would having an additional half-iteration for <code>v</code> at the end of the iteration (in training as well) be a justifiable departure from a \"pure\" implementation? Mathematically it should be sound.</li>\n<li>Once the <code>eval</code> mode is solved, <code>sn_handle.remove()</code> should probably set the weight to an <code>eval</code>-mode computation of the weight, as this seems the generically right thing to do.</li>\n</ol>\n<p>Once you decide on a course: Do you want to implement this or should I? Now that my open pull requests have deminished, I'd love to add some fresh ones. <g-emoji class=\"g-emoji\" alias=\"slightly_smiling_face\" fallback-src=\"https://assets-cdn.github.com/images/icons/emoji/unicode/1f642.png\">\ud83d\ude42</g-emoji></p>", "body_text": "Thanks for looking into this!\nI agree that one should expect the weight to \"be fixed\" to the computed weight in both cases.\nIn terms of practically achieving this, my ideas would be:\n\nThe current behaviour seems suboptimal indeed. I would expect the .evaled network to give the same weight as the previous iteration. The current code does not make this easy to achieve except for caching v. Would having an additional half-iteration for v at the end of the iteration (in training as well) be a justifiable departure from a \"pure\" implementation? Mathematically it should be sound.\nOnce the eval mode is solved, sn_handle.remove() should probably set the weight to an eval-mode computation of the weight, as this seems the generically right thing to do.\n\nOnce you decide on a course: Do you want to implement this or should I? Now that my open pull requests have deminished, I'd love to add some fresh ones. \ud83d\ude42", "body": "Thanks for looking into this!\r\nI agree that one should expect the weight to \"be fixed\" to the computed weight in both cases.\r\nIn terms of practically achieving this, my ideas would be:\r\n\r\n1. The current behaviour seems suboptimal indeed. I would expect the `.eval`ed network to give the same weight as the previous iteration. The current code does not make this easy to achieve except for caching `v`. Would having an additional half-iteration for `v` at the end of the iteration (in training as well) be a justifiable departure from a \"pure\" implementation? Mathematically it should be sound.\r\n2.  Once the `eval` mode is solved, `sn_handle.remove()` should probably set the weight to an `eval`-mode computation of the weight, as this seems the generically right thing to do.\r\n\r\nOnce you decide on a course: Do you want to implement this or should I? Now that my open pull requests have deminished, I'd love to add some fresh ones. :slightly_smiling_face: "}