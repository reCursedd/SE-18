{"url": "https://api.github.com/repos/pytorch/pytorch/issues/8208", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/8208/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/8208/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/8208/events", "html_url": "https://github.com/pytorch/pytorch/issues/8208", "id": 330013154, "node_id": "MDU6SXNzdWUzMzAwMTMxNTQ=", "number": 8208, "title": "[discussion] SpectralNorm behavior in eval() and at remove()", "user": {"login": "SsnL", "id": 5674597, "node_id": "MDQ6VXNlcjU2NzQ1OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5674597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SsnL", "html_url": "https://github.com/SsnL", "followers_url": "https://api.github.com/users/SsnL/followers", "following_url": "https://api.github.com/users/SsnL/following{/other_user}", "gists_url": "https://api.github.com/users/SsnL/gists{/gist_id}", "starred_url": "https://api.github.com/users/SsnL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SsnL/subscriptions", "organizations_url": "https://api.github.com/users/SsnL/orgs", "repos_url": "https://api.github.com/users/SsnL/repos", "events_url": "https://api.github.com/users/SsnL/events{/privacy}", "received_events_url": "https://api.github.com/users/SsnL/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2018-06-06T20:05:48Z", "updated_at": "2018-06-24T21:15:32Z", "closed_at": "2018-06-24T21:15:32Z", "author_association": "CONTRIBUTOR", "body_html": "<ol>\n<li>\n<p><code>net.eval()</code>:<br>\nCurrently, even in eval time, <a href=\"https://github.com/pytorch/pytorch/blob/master/torch/nn/utils/spectral_norm.py#L43-L46\">our forward pre hook</a> still does power iteration and <strong>updates <code>weight_u</code></strong>. This means that the function the network represents is changing as we test on more and more images! Certainly this shouldn't be desired, despite that the <a href=\"https://github.com/pfnet-research/chainer-gan-lib/blob/master/common/sn/sn_convolution_2d.py#L68-L104\">original code</a> has this behavior. The question is what the correct behavior is. Should we just skip the power iteration, i.e. only compute <code>_v</code> and not a new <code>_u</code>?</p>\n</li>\n<li>\n<p><code>sn_handle.remove()</code>:<br>\nWe currently <a href=\"https://github.com/pytorch/pytorch/blob/master/torch/nn/utils/spectral_norm.py#L37-L41\">set the weight parameter to the saved <code>weight_orig</code></a>, i.e., the un-normalized weight, at removing SN. I don't think that this is correct either, because the effective weight is now <code>weight_orig / sigma(weight)</code> and this removal drastically changes the network behavior. I propose to set the weight parameter to result of <code>compute_weight()</code>, and maybe also with power iteration skipped.</p>\n</li>\n</ol>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=16191443\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/crcrpar\">@crcrpar</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=20787943\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/t-vi\">@t-vi</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=9110200\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/fmassa\">@fmassa</a>  Let me know what you guys think. :)</p>", "body_text": "net.eval():\nCurrently, even in eval time, our forward pre hook still does power iteration and updates weight_u. This means that the function the network represents is changing as we test on more and more images! Certainly this shouldn't be desired, despite that the original code has this behavior. The question is what the correct behavior is. Should we just skip the power iteration, i.e. only compute _v and not a new _u?\n\n\nsn_handle.remove():\nWe currently set the weight parameter to the saved weight_orig, i.e., the un-normalized weight, at removing SN. I don't think that this is correct either, because the effective weight is now weight_orig / sigma(weight) and this removal drastically changes the network behavior. I propose to set the weight parameter to result of compute_weight(), and maybe also with power iteration skipped.\n\n\n@crcrpar @t-vi @fmassa  Let me know what you guys think. :)", "body": "1. `net.eval()`:\r\nCurrently, even in eval time, [our forward pre hook](https://github.com/pytorch/pytorch/blob/master/torch/nn/utils/spectral_norm.py#L43-L46) still does power iteration and **updates `weight_u`**. This means that the function the network represents is changing as we test on more and more images! Certainly this shouldn't be desired, despite that the [original code](https://github.com/pfnet-research/chainer-gan-lib/blob/master/common/sn/sn_convolution_2d.py#L68-L104) has this behavior. The question is what the correct behavior is. Should we just skip the power iteration, i.e. only compute `_v` and not a new `_u`?\r\n\r\n2. `sn_handle.remove()`:\r\nWe currently [set the weight parameter to the saved `weight_orig`](https://github.com/pytorch/pytorch/blob/master/torch/nn/utils/spectral_norm.py#L37-L41), i.e., the un-normalized weight, at removing SN. I don't think that this is correct either, because the effective weight is now `weight_orig / sigma(weight)` and this removal drastically changes the network behavior. I propose to set the weight parameter to result of `compute_weight()`, and maybe also with power iteration skipped.\r\n\r\n@crcrpar @t-vi @fmassa  Let me know what you guys think. :) "}