{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/399929310", "html_url": "https://github.com/pytorch/pytorch/issues/8154#issuecomment-399929310", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/8154", "id": 399929310, "node_id": "MDEyOklzc3VlQ29tbWVudDM5OTkyOTMxMA==", "user": {"login": "jhmenke", "id": 25080218, "node_id": "MDQ6VXNlcjI1MDgwMjE4", "avatar_url": "https://avatars0.githubusercontent.com/u/25080218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhmenke", "html_url": "https://github.com/jhmenke", "followers_url": "https://api.github.com/users/jhmenke/followers", "following_url": "https://api.github.com/users/jhmenke/following{/other_user}", "gists_url": "https://api.github.com/users/jhmenke/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhmenke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhmenke/subscriptions", "organizations_url": "https://api.github.com/users/jhmenke/orgs", "repos_url": "https://api.github.com/users/jhmenke/repos", "events_url": "https://api.github.com/users/jhmenke/events{/privacy}", "received_events_url": "https://api.github.com/users/jhmenke/received_events", "type": "User", "site_admin": false}, "created_at": "2018-06-25T12:10:16Z", "updated_at": "2018-06-26T08:45:44Z", "author_association": "NONE", "body_html": "<p><em>edit: To make sure the performance problem is not caused by the missing NNPack in my compilation i just built v0.3.1. from source. It still sits at 26 s compared to 45 s in the commit below.</em></p>\n<p>It is now way worse:<br>\nI just cloned and compiled PyTorch (torch-0.5.0a0+e31ab99, <a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/pytorch/pytorch/commit/e31ab999320076b179b9d99917873cbf9612b6ed/hovercard\" href=\"https://github.com/pytorch/pytorch/commit/e31ab999320076b179b9d99917873cbf9612b6ed\"><tt>e31ab99</tt></a>) on Linux. v0.31 average was ~26 s, v0.4 average ~ 32 s.<br>\nNow the average time is: 45.49 s</p>\n<p>torch.bottleneck runs and after a few minutes exits with the message \"killed\" without giving any output. here is the manual cProfile log:</p>\n<pre><code>12393230 function calls (12099688 primitive calls) in 42.208 seconds\n\n   Ordered by: internal time\n\n   ncalls  tottime  percall  cumtime  percall filename:lineno(function)\n    30872    7.610    0.000    7.610    0.000 {method 'run_backward' of 'torch._C._EngineBase' objects}\n    82416    4.467    0.000    4.467    0.000 {built-in method stack}\n  2962080    4.061    0.000    4.061    0.000 dataset.py:40(&lt;genexpr&gt;)\n   123624    3.209    0.000    3.209    0.000 {built-in method addmm}\n    30872    2.495    0.000    7.598    0.000 adam.py:48(step)\n   987360    1.904    0.000    5.964    0.000 dataset.py:39(__getitem__)\n    82416    1.306    0.000    1.306    0.000 {built-in method torch._C._nn.threshold}\n288456/82416    1.256    0.000    8.898    0.000 module.py:462(__call__)\n   185232    1.136    0.000    1.136    0.000 {method 'sqrt' of 'torch._C._TensorBase' objects}\n   370464    1.106    0.000    1.106    0.000 {method 'add_' of 'torch._C._TensorBase' objects}\n        1    1.047    1.047   42.208   42.208 pytorch_debug.0.4.py:1(&lt;module&gt;)\n    41208    0.989    0.000    6.953    0.000 dataloader.py:314(&lt;listcomp&gt;)\n   370464    0.965    0.000    0.965    0.000 {method 'mul_' of 'torch._C._TensorBase' objects}\n    41344    0.958    0.000   14.878    0.000 dataloader.py:311(__next__)\n   185232    0.937    0.000    0.937    0.000 {method 'addcdiv_' of 'torch._C._TensorBase' objects}\n    41344    0.927    0.000    1.252    0.000 sampler.py:136(__iter__)\n   185232    0.667    0.000    0.667    0.000 {method 'addcmul_' of 'torch._C._TensorBase' objects}\n   123624    0.620    0.000    4.994    0.000 linear.py:54(forward)\n   123624    0.604    0.000    0.604    0.000 {method 't' of 'torch._C._TensorBase' objects}\n123624/41208    0.557    0.000    5.679    0.000 dataloader.py:151(default_collate)\n    41208    0.441    0.000    8.015    0.000 container.py:89(forward)\n    41208    0.403    0.000    0.403    0.000 {built-in method torch._C._nn.smooth_l1_loss}\n   185226    0.369    0.000    0.369    0.000 {method 'zero_' of 'torch._C._TensorBase' objects}\n    30872    0.324    0.000    0.734    0.000 optimizer.py:150(zero_grad)\n   123624    0.308    0.000    4.171    0.000 functional.py:995(linear)\n    30872    0.256    0.000    0.256    0.000 {built-in method ones_like}\n1497619/1497435    0.248    0.000    0.249    0.000 {built-in method builtins.len}\n</code></pre>", "body_text": "edit: To make sure the performance problem is not caused by the missing NNPack in my compilation i just built v0.3.1. from source. It still sits at 26 s compared to 45 s in the commit below.\nIt is now way worse:\nI just cloned and compiled PyTorch (torch-0.5.0a0+e31ab99, e31ab99) on Linux. v0.31 average was ~26 s, v0.4 average ~ 32 s.\nNow the average time is: 45.49 s\ntorch.bottleneck runs and after a few minutes exits with the message \"killed\" without giving any output. here is the manual cProfile log:\n12393230 function calls (12099688 primitive calls) in 42.208 seconds\n\n   Ordered by: internal time\n\n   ncalls  tottime  percall  cumtime  percall filename:lineno(function)\n    30872    7.610    0.000    7.610    0.000 {method 'run_backward' of 'torch._C._EngineBase' objects}\n    82416    4.467    0.000    4.467    0.000 {built-in method stack}\n  2962080    4.061    0.000    4.061    0.000 dataset.py:40(<genexpr>)\n   123624    3.209    0.000    3.209    0.000 {built-in method addmm}\n    30872    2.495    0.000    7.598    0.000 adam.py:48(step)\n   987360    1.904    0.000    5.964    0.000 dataset.py:39(__getitem__)\n    82416    1.306    0.000    1.306    0.000 {built-in method torch._C._nn.threshold}\n288456/82416    1.256    0.000    8.898    0.000 module.py:462(__call__)\n   185232    1.136    0.000    1.136    0.000 {method 'sqrt' of 'torch._C._TensorBase' objects}\n   370464    1.106    0.000    1.106    0.000 {method 'add_' of 'torch._C._TensorBase' objects}\n        1    1.047    1.047   42.208   42.208 pytorch_debug.0.4.py:1(<module>)\n    41208    0.989    0.000    6.953    0.000 dataloader.py:314(<listcomp>)\n   370464    0.965    0.000    0.965    0.000 {method 'mul_' of 'torch._C._TensorBase' objects}\n    41344    0.958    0.000   14.878    0.000 dataloader.py:311(__next__)\n   185232    0.937    0.000    0.937    0.000 {method 'addcdiv_' of 'torch._C._TensorBase' objects}\n    41344    0.927    0.000    1.252    0.000 sampler.py:136(__iter__)\n   185232    0.667    0.000    0.667    0.000 {method 'addcmul_' of 'torch._C._TensorBase' objects}\n   123624    0.620    0.000    4.994    0.000 linear.py:54(forward)\n   123624    0.604    0.000    0.604    0.000 {method 't' of 'torch._C._TensorBase' objects}\n123624/41208    0.557    0.000    5.679    0.000 dataloader.py:151(default_collate)\n    41208    0.441    0.000    8.015    0.000 container.py:89(forward)\n    41208    0.403    0.000    0.403    0.000 {built-in method torch._C._nn.smooth_l1_loss}\n   185226    0.369    0.000    0.369    0.000 {method 'zero_' of 'torch._C._TensorBase' objects}\n    30872    0.324    0.000    0.734    0.000 optimizer.py:150(zero_grad)\n   123624    0.308    0.000    4.171    0.000 functional.py:995(linear)\n    30872    0.256    0.000    0.256    0.000 {built-in method ones_like}\n1497619/1497435    0.248    0.000    0.249    0.000 {built-in method builtins.len}", "body": "_edit: To make sure the performance problem is not caused by the missing NNPack in my compilation i just built v0.3.1. from source. It still sits at 26 s compared to 45 s in the commit below._\r\n\r\nIt is now way worse:\r\nI just cloned and compiled PyTorch (torch-0.5.0a0+e31ab99, e31ab99) on Linux. v0.31 average was ~26 s, v0.4 average ~ 32 s. \r\nNow the average time is: 45.49 s\r\n\r\ntorch.bottleneck runs and after a few minutes exits with the message \"killed\" without giving any output. here is the manual cProfile log:\r\n\r\n```\r\n12393230 function calls (12099688 primitive calls) in 42.208 seconds\r\n\r\n   Ordered by: internal time\r\n\r\n   ncalls  tottime  percall  cumtime  percall filename:lineno(function)\r\n    30872    7.610    0.000    7.610    0.000 {method 'run_backward' of 'torch._C._EngineBase' objects}\r\n    82416    4.467    0.000    4.467    0.000 {built-in method stack}\r\n  2962080    4.061    0.000    4.061    0.000 dataset.py:40(<genexpr>)\r\n   123624    3.209    0.000    3.209    0.000 {built-in method addmm}\r\n    30872    2.495    0.000    7.598    0.000 adam.py:48(step)\r\n   987360    1.904    0.000    5.964    0.000 dataset.py:39(__getitem__)\r\n    82416    1.306    0.000    1.306    0.000 {built-in method torch._C._nn.threshold}\r\n288456/82416    1.256    0.000    8.898    0.000 module.py:462(__call__)\r\n   185232    1.136    0.000    1.136    0.000 {method 'sqrt' of 'torch._C._TensorBase' objects}\r\n   370464    1.106    0.000    1.106    0.000 {method 'add_' of 'torch._C._TensorBase' objects}\r\n        1    1.047    1.047   42.208   42.208 pytorch_debug.0.4.py:1(<module>)\r\n    41208    0.989    0.000    6.953    0.000 dataloader.py:314(<listcomp>)\r\n   370464    0.965    0.000    0.965    0.000 {method 'mul_' of 'torch._C._TensorBase' objects}\r\n    41344    0.958    0.000   14.878    0.000 dataloader.py:311(__next__)\r\n   185232    0.937    0.000    0.937    0.000 {method 'addcdiv_' of 'torch._C._TensorBase' objects}\r\n    41344    0.927    0.000    1.252    0.000 sampler.py:136(__iter__)\r\n   185232    0.667    0.000    0.667    0.000 {method 'addcmul_' of 'torch._C._TensorBase' objects}\r\n   123624    0.620    0.000    4.994    0.000 linear.py:54(forward)\r\n   123624    0.604    0.000    0.604    0.000 {method 't' of 'torch._C._TensorBase' objects}\r\n123624/41208    0.557    0.000    5.679    0.000 dataloader.py:151(default_collate)\r\n    41208    0.441    0.000    8.015    0.000 container.py:89(forward)\r\n    41208    0.403    0.000    0.403    0.000 {built-in method torch._C._nn.smooth_l1_loss}\r\n   185226    0.369    0.000    0.369    0.000 {method 'zero_' of 'torch._C._TensorBase' objects}\r\n    30872    0.324    0.000    0.734    0.000 optimizer.py:150(zero_grad)\r\n   123624    0.308    0.000    4.171    0.000 functional.py:995(linear)\r\n    30872    0.256    0.000    0.256    0.000 {built-in method ones_like}\r\n1497619/1497435    0.248    0.000    0.249    0.000 {built-in method builtins.len}\r\n```"}