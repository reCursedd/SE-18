{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/215794562", "pull_request_review_id": 153142132, "id": 215794562, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNTc5NDU2Mg==", "diff_hunk": "@@ -40,7 +40,20 @@ auto AccumulateGrad::apply(variable_list&& grads) -> variable_list {\n \n   at::Tensor& grad = variable.grad();\n   if (!grad.defined()) {\n-    variable.grad() = new_grad.clone();\n+    // under following condition, we can avoid clone()\n+    if (!GradMode::is_enabled()\n+        && !new_grad.type().is_sparse()\n+        && new_grad.is_contiguous()\n+        && new_grad.use_count() == 2) {\n+      // first check it is in first-order grad only mode\n+      // then check not sparse before is_contiguous\n+      // then check contiguous, otherwise later in place accumulation may fail\n+      // and lastly, check it is the last reference before we grab it\n+      // we created new_grad above so ref count should be 2", "path": "torch/csrc/autograd/functions/accumulate_grad.cpp", "position": null, "original_position": 14, "commit_id": "3d6f62fb1baf6e7d4d1a527b17c295236528a167", "original_commit_id": "779d4122aea5304e82c801b287ed7e02abc777bd", "user": {"login": "FDecaYed", "id": 17164548, "node_id": "MDQ6VXNlcjE3MTY0NTQ4", "avatar_url": "https://avatars2.githubusercontent.com/u/17164548?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FDecaYed", "html_url": "https://github.com/FDecaYed", "followers_url": "https://api.github.com/users/FDecaYed/followers", "following_url": "https://api.github.com/users/FDecaYed/following{/other_user}", "gists_url": "https://api.github.com/users/FDecaYed/gists{/gist_id}", "starred_url": "https://api.github.com/users/FDecaYed/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FDecaYed/subscriptions", "organizations_url": "https://api.github.com/users/FDecaYed/orgs", "repos_url": "https://api.github.com/users/FDecaYed/repos", "events_url": "https://api.github.com/users/FDecaYed/events{/privacy}", "received_events_url": "https://api.github.com/users/FDecaYed/received_events", "type": "User", "site_admin": false}, "body": "It seems to me we can make new_grad reference and assert use_count 1. It is actually better since this way we will also correctly catch new_grad that produced by hook with use_count==1.\r\nTrying to modify grad in-place with hook will modify all grads sharing the buffer, what's your opinion on that? This behavior should not be changed by make new_grad reference though. So it is probably an unrelated question. ", "created_at": "2018-09-06T22:12:23Z", "updated_at": "2018-11-23T15:50:43Z", "html_url": "https://github.com/pytorch/pytorch/pull/11165#discussion_r215794562", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/11165", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/215794562"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/11165#discussion_r215794562"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/11165"}}, "body_html": "<p>It seems to me we can make new_grad reference and assert use_count 1. It is actually better since this way we will also correctly catch new_grad that produced by hook with use_count==1.<br>\nTrying to modify grad in-place with hook will modify all grads sharing the buffer, what's your opinion on that? This behavior should not be changed by make new_grad reference though. So it is probably an unrelated question.</p>", "body_text": "It seems to me we can make new_grad reference and assert use_count 1. It is actually better since this way we will also correctly catch new_grad that produced by hook with use_count==1.\nTrying to modify grad in-place with hook will modify all grads sharing the buffer, what's your opinion on that? This behavior should not be changed by make new_grad reference though. So it is probably an unrelated question.", "in_reply_to_id": 215717632}