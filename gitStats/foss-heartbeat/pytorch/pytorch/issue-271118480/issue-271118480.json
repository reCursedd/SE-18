{"url": "https://api.github.com/repos/pytorch/pytorch/issues/3473", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/3473/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/3473/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/3473/events", "html_url": "https://github.com/pytorch/pytorch/issues/3473", "id": 271118480, "node_id": "MDU6SXNzdWUyNzExMTg0ODA=", "number": 3473, "title": "Feature Request: Distributed send arbitrary objects", "user": {"login": "ebetica", "id": 3605224, "node_id": "MDQ6VXNlcjM2MDUyMjQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/3605224?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebetica", "html_url": "https://github.com/ebetica", "followers_url": "https://api.github.com/users/ebetica/followers", "following_url": "https://api.github.com/users/ebetica/following{/other_user}", "gists_url": "https://api.github.com/users/ebetica/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebetica/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebetica/subscriptions", "organizations_url": "https://api.github.com/users/ebetica/orgs", "repos_url": "https://api.github.com/users/ebetica/repos", "events_url": "https://api.github.com/users/ebetica/events{/privacy}", "received_events_url": "https://api.github.com/users/ebetica/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-11-03T21:04:54Z", "updated_at": "2017-11-03T21:04:54Z", "closed_at": null, "author_association": "CONTRIBUTOR", "body_html": "<p>It would be useful for torch.distributed.send and .recv to be able to send arbitrary objects. I have two requests:</p>\n<ol>\n<li>One version of send and recv that does not copy to tensor, but instead returns a new tensor. This way, we can send tensors of arbitrary sizes, useful for many reinforcement learning settings</li>\n<li>Ability to send arbitrary Python objects, preferrably over pickle streams. mpi4py supports this mode, and it is sometimes very useful to prototype with despite its inefficiencies.</li>\n</ol>", "body_text": "It would be useful for torch.distributed.send and .recv to be able to send arbitrary objects. I have two requests:\n\nOne version of send and recv that does not copy to tensor, but instead returns a new tensor. This way, we can send tensors of arbitrary sizes, useful for many reinforcement learning settings\nAbility to send arbitrary Python objects, preferrably over pickle streams. mpi4py supports this mode, and it is sometimes very useful to prototype with despite its inefficiencies.", "body": "It would be useful for torch.distributed.send and .recv to be able to send arbitrary objects. I have two requests:\r\n\r\n1. One version of send and recv that does not copy to tensor, but instead returns a new tensor. This way, we can send tensors of arbitrary sizes, useful for many reinforcement learning settings\r\n2. Ability to send arbitrary Python objects, preferrably over pickle streams. mpi4py supports this mode, and it is sometimes very useful to prototype with despite its inefficiencies."}