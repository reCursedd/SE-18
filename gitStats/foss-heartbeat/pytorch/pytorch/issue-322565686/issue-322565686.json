{"url": "https://api.github.com/repos/pytorch/pytorch/issues/7530", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/7530/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/7530/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/7530/events", "html_url": "https://github.com/pytorch/pytorch/issues/7530", "id": 322565686, "node_id": "MDU6SXNzdWUzMjI1NjU2ODY=", "number": 7530, "title": "assigning cuda device bug in v0.4", "user": {"login": "Prinsphield", "id": 12531720, "node_id": "MDQ6VXNlcjEyNTMxNzIw", "avatar_url": "https://avatars0.githubusercontent.com/u/12531720?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Prinsphield", "html_url": "https://github.com/Prinsphield", "followers_url": "https://api.github.com/users/Prinsphield/followers", "following_url": "https://api.github.com/users/Prinsphield/following{/other_user}", "gists_url": "https://api.github.com/users/Prinsphield/gists{/gist_id}", "starred_url": "https://api.github.com/users/Prinsphield/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Prinsphield/subscriptions", "organizations_url": "https://api.github.com/users/Prinsphield/orgs", "repos_url": "https://api.github.com/users/Prinsphield/repos", "events_url": "https://api.github.com/users/Prinsphield/events{/privacy}", "received_events_url": "https://api.github.com/users/Prinsphield/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-05-13T05:20:12Z", "updated_at": "2018-06-21T08:25:06Z", "closed_at": "2018-05-14T13:56:11Z", "author_association": "NONE", "body_html": "<p>If you have two gpu cards, and you want train your model only on the second card.<br>\nThen you might write the following code</p>\n<pre><code>device = torch.device('cuda', 1)\nnet.cuda(device)\n</code></pre>\n<p>or simply</p>\n<pre><code>net.cuda(1)\n</code></pre>\n<p>But you can find the first gpu card was also filled with tensors.<br>\nThis will not happen in v0.3.</p>\n<p>Currently, my solution to this problem would be</p>\n<pre><code>with torch.cuda.device(1):\n    net.cuda()\n</code></pre>\n<p>Hope this bug will be solved in the future.</p>", "body_text": "If you have two gpu cards, and you want train your model only on the second card.\nThen you might write the following code\ndevice = torch.device('cuda', 1)\nnet.cuda(device)\n\nor simply\nnet.cuda(1)\n\nBut you can find the first gpu card was also filled with tensors.\nThis will not happen in v0.3.\nCurrently, my solution to this problem would be\nwith torch.cuda.device(1):\n    net.cuda()\n\nHope this bug will be solved in the future.", "body": "If you have two gpu cards, and you want train your model only on the second card.\r\nThen you might write the following code\r\n```\r\ndevice = torch.device('cuda', 1)\r\nnet.cuda(device)\r\n```\r\nor simply\r\n```\r\nnet.cuda(1)\r\n```\r\nBut you can find the first gpu card was also filled with tensors.\r\nThis will not happen in v0.3.\r\n\r\nCurrently, my solution to this problem would be \r\n```\r\nwith torch.cuda.device(1):\r\n    net.cuda()\r\n```\r\n\r\nHope this bug will be solved in the future.\r\n"}