{"url": "https://api.github.com/repos/pytorch/pytorch/issues/5354", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/5354/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/5354/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/5354/events", "html_url": "https://github.com/pytorch/pytorch/issues/5354", "id": 299473918, "node_id": "MDU6SXNzdWUyOTk0NzM5MTg=", "number": 5354, "title": "[feature request] Batch linear algebra operations", "user": {"login": "Taha-Bahadori", "id": 31113375, "node_id": "MDQ6VXNlcjMxMTEzMzc1", "avatar_url": "https://avatars3.githubusercontent.com/u/31113375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Taha-Bahadori", "html_url": "https://github.com/Taha-Bahadori", "followers_url": "https://api.github.com/users/Taha-Bahadori/followers", "following_url": "https://api.github.com/users/Taha-Bahadori/following{/other_user}", "gists_url": "https://api.github.com/users/Taha-Bahadori/gists{/gist_id}", "starred_url": "https://api.github.com/users/Taha-Bahadori/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Taha-Bahadori/subscriptions", "organizations_url": "https://api.github.com/users/Taha-Bahadori/orgs", "repos_url": "https://api.github.com/users/Taha-Bahadori/repos", "events_url": "https://api.github.com/users/Taha-Bahadori/events{/privacy}", "received_events_url": "https://api.github.com/users/Taha-Bahadori/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 424131849, "node_id": "MDU6TGFiZWw0MjQxMzE4NDk=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true}, {"id": 443483881, "node_id": "MDU6TGFiZWw0NDM0ODM4ODE=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/todo", "name": "todo", "color": "c2e0c6", "default": false}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2018-02-22T19:15:49Z", "updated_at": "2018-08-22T06:06:22Z", "closed_at": null, "author_association": "NONE", "body_html": "<p>Linear algebra operations such as <code>svd()</code> and <code>symeig()</code> only support a single matrix input (e.g.,  a matrix of size <code>M x N</code>).   I request to extend these functions to support running these operations on batches in parallel on a single GPU machine.  That is, the input will take the form of <code>B x M x N</code> sized tensors and the function will calculate <code>B</code> operations in parallel on a GPU.</p>\n<p><strong>Simpler feature request</strong>: Given that It seems that they support batch QR decomposition, can you implement the batch version of <code>torch.qr()</code>?<br>\n<a href=\"http://icl.cs.utk.edu/projectsfiles/magma/doxygen/group__group__orthogonal__batched.html\" rel=\"nofollow\">http://icl.cs.utk.edu/projectsfiles/magma/doxygen/group__group__orthogonal__batched.html</a></p>\n<p>Given batch QR, I can compute batch <code>torch.symeig()</code> using <a href=\"https://en.wikipedia.org/wiki/QR_algorithm\" rel=\"nofollow\">the famous QR algorithm</a>.</p>", "body_text": "Linear algebra operations such as svd() and symeig() only support a single matrix input (e.g.,  a matrix of size M x N).   I request to extend these functions to support running these operations on batches in parallel on a single GPU machine.  That is, the input will take the form of B x M x N sized tensors and the function will calculate B operations in parallel on a GPU.\nSimpler feature request: Given that It seems that they support batch QR decomposition, can you implement the batch version of torch.qr()?\nhttp://icl.cs.utk.edu/projectsfiles/magma/doxygen/group__group__orthogonal__batched.html\nGiven batch QR, I can compute batch torch.symeig() using the famous QR algorithm.", "body": "Linear algebra operations such as `svd()` and `symeig()` only support a single matrix input (e.g.,  a matrix of size `M x N`).   I request to extend these functions to support running these operations on batches in parallel on a single GPU machine.  That is, the input will take the form of `B x M x N` sized tensors and the function will calculate `B` operations in parallel on a GPU.\r\n\r\n**Simpler feature request**: Given that It seems that they support batch QR decomposition, can you implement the batch version of `torch.qr()`?\r\nhttp://icl.cs.utk.edu/projectsfiles/magma/doxygen/group__group__orthogonal__batched.html\r\n\r\nGiven batch QR, I can compute batch `torch.symeig()` using [the famous QR algorithm](https://en.wikipedia.org/wiki/QR_algorithm). \r\n\r\n"}