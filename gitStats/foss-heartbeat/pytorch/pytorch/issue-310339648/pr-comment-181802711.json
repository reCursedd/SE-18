{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/181802711", "pull_request_review_id": 112490521, "id": 181802711, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MTgwMjcxMQ==", "diff_hunk": "@@ -1180,14 +1180,39 @@ def compare_scaling(grads):\n             for p, g in zip(l.parameters(), grads):\n                 p.grad.data.copy_(g)\n             norm_before = compute_norm(norm_type)\n-            norm = clip_grad_norm(l.parameters(), max_norm, norm_type=norm_type)\n+            norm = clip_grad_norm_(l.parameters(), max_norm, norm_type=norm_type)\n             norm_after = compute_norm(norm_type)\n             self.assertEqual(norm, norm_before)\n             self.assertEqual(norm_before, norm_after)\n             self.assertLessEqual(norm_after, max_norm)\n             scale = compare_scaling(grads)\n             self.assertEqual(scale, 1)\n \n+    def test_clip_grad_value(self):\n+        l = nn.Linear(10, 10)\n+        clip_value = 2.5\n+\n+        grads = torch.arange(-50, 50).view(10, 10).div(5), torch.ones(10).mul(2)\n+        for p, g in zip(l.parameters(), grads):\n+            p._grad = Variable(g.clone().view_as(p.data))\n+\n+        clip_grad_value_(l.parameters(), clip_value)\n+        for p in l.parameters():\n+            self.assertLessEqual(p.grad.data.max(), clip_value)\n+            self.assertGreaterEqual(p.grad.data.min(), -clip_value)\n+\n+        grads = torch.arange(-50, 50).view(10, 10).div(5), torch.ones(10).mul(2)\n+        for i, (p, g) in enumerate(zip(l.parameters(), grads)):\n+            if i == 0:\n+                p._grad = Variable(g.clone().view_as(p.data))\n+            else:\n+                p._grad = None\n+\n+        clip_grad_value_(l.parameters(), clip_value)\n+        for p in filter(lambda p: p.grad is not None, l.parameters()):\n+            self.assertLessEqual(p.grad.data.max(), clip_value)\n+            self.assertGreaterEqual(p.grad.data.min(), -clip_value)", "path": "test/test_nn.py", "position": 43, "original_position": 54, "commit_id": "ca944d8c43174097157b94e8e297a82bd569277c", "original_commit_id": "ddb4a50aae7eda40fdb80a555785aed264001b39", "user": {"login": "tonybeltramelli", "id": 1783594, "node_id": "MDQ6VXNlcjE3ODM1OTQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/1783594?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tonybeltramelli", "html_url": "https://github.com/tonybeltramelli", "followers_url": "https://api.github.com/users/tonybeltramelli/followers", "following_url": "https://api.github.com/users/tonybeltramelli/following{/other_user}", "gists_url": "https://api.github.com/users/tonybeltramelli/gists{/gist_id}", "starred_url": "https://api.github.com/users/tonybeltramelli/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tonybeltramelli/subscriptions", "organizations_url": "https://api.github.com/users/tonybeltramelli/orgs", "repos_url": "https://api.github.com/users/tonybeltramelli/repos", "events_url": "https://api.github.com/users/tonybeltramelli/events{/privacy}", "received_events_url": "https://api.github.com/users/tonybeltramelli/received_events", "type": "User", "site_admin": false}, "body": "Yes, good point.", "created_at": "2018-04-16T16:26:18Z", "updated_at": "2018-11-23T15:42:30Z", "html_url": "https://github.com/pytorch/pytorch/pull/6173#discussion_r181802711", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/6173", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/181802711"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/6173#discussion_r181802711"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/6173"}}, "body_html": "<p>Yes, good point.</p>", "body_text": "Yes, good point.", "in_reply_to_id": 181595217}