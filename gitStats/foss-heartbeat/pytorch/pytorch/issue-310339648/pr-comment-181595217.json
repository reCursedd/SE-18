{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/181595217", "pull_request_review_id": 112249586, "id": 181595217, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MTU5NTIxNw==", "diff_hunk": "@@ -1180,14 +1180,39 @@ def compare_scaling(grads):\n             for p, g in zip(l.parameters(), grads):\n                 p.grad.data.copy_(g)\n             norm_before = compute_norm(norm_type)\n-            norm = clip_grad_norm(l.parameters(), max_norm, norm_type=norm_type)\n+            norm = clip_grad_norm_(l.parameters(), max_norm, norm_type=norm_type)\n             norm_after = compute_norm(norm_type)\n             self.assertEqual(norm, norm_before)\n             self.assertEqual(norm_before, norm_after)\n             self.assertLessEqual(norm_after, max_norm)\n             scale = compare_scaling(grads)\n             self.assertEqual(scale, 1)\n \n+    def test_clip_grad_value(self):\n+        l = nn.Linear(10, 10)\n+        clip_value = 2.5\n+\n+        grads = torch.arange(-50, 50).view(10, 10).div(5), torch.ones(10).mul(2)\n+        for p, g in zip(l.parameters(), grads):\n+            p._grad = Variable(g.clone().view_as(p.data))\n+\n+        clip_grad_value_(l.parameters(), clip_value)\n+        for p in l.parameters():\n+            self.assertLessEqual(p.grad.data.max(), clip_value)\n+            self.assertGreaterEqual(p.grad.data.min(), -clip_value)\n+\n+        grads = torch.arange(-50, 50).view(10, 10).div(5), torch.ones(10).mul(2)\n+        for i, (p, g) in enumerate(zip(l.parameters(), grads)):\n+            if i == 0:\n+                p._grad = Variable(g.clone().view_as(p.data))\n+            else:\n+                p._grad = None\n+\n+        clip_grad_value_(l.parameters(), clip_value)\n+        for p in filter(lambda p: p.grad is not None, l.parameters()):\n+            self.assertLessEqual(p.grad.data.max(), clip_value)\n+            self.assertGreaterEqual(p.grad.data.min(), -clip_value)", "path": "test/test_nn.py", "position": 43, "original_position": 54, "commit_id": "ca944d8c43174097157b94e8e297a82bd569277c", "original_commit_id": "ddb4a50aae7eda40fdb80a555785aed264001b39", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Can you please fold both of these cases into a single one? They look pretty much the same, only change them to be:\r\n```python\r\ngrad_w, grad_b = ...\r\nfor grad_list in [[grad_w, grad_b], [grad_w, None]]:\r\n    for p, g in zip(l.parameters(), grad_list):\r\n        p._grad = g\r\n    # do test here\r\n```", "created_at": "2018-04-15T20:07:14Z", "updated_at": "2018-11-23T15:42:28Z", "html_url": "https://github.com/pytorch/pytorch/pull/6173#discussion_r181595217", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/6173", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/181595217"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/6173#discussion_r181595217"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/6173"}}, "body_html": "<p>Can you please fold both of these cases into a single one? They look pretty much the same, only change them to be:</p>\n<div class=\"highlight highlight-source-python\"><pre>grad_w, grad_b <span class=\"pl-k\">=</span> <span class=\"pl-c1\">...</span>\n<span class=\"pl-k\">for</span> grad_list <span class=\"pl-k\">in</span> [[grad_w, grad_b], [grad_w, <span class=\"pl-c1\">None</span>]]:\n    <span class=\"pl-k\">for</span> p, g <span class=\"pl-k\">in</span> <span class=\"pl-c1\">zip</span>(l.parameters(), grad_list):\n        p._grad <span class=\"pl-k\">=</span> g\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> do test here</span></pre></div>", "body_text": "Can you please fold both of these cases into a single one? They look pretty much the same, only change them to be:\ngrad_w, grad_b = ...\nfor grad_list in [[grad_w, grad_b], [grad_w, None]]:\n    for p, g in zip(l.parameters(), grad_list):\n        p._grad = g\n    # do test here"}