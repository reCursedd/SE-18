{"url": "https://api.github.com/repos/pytorch/pytorch/issues/3401", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/3401/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/3401/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/3401/events", "html_url": "https://github.com/pytorch/pytorch/pull/3401", "id": 270088413, "node_id": "MDExOlB1bGxSZXF1ZXN0MTQ5ODg0OTYw", "number": 3401, "title": "Keep type of tensors when indexing into a TensorDataset", "user": {"login": "zou3519", "id": 5652049, "node_id": "MDQ6VXNlcjU2NTIwNDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/5652049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zou3519", "html_url": "https://github.com/zou3519", "followers_url": "https://api.github.com/users/zou3519/followers", "following_url": "https://api.github.com/users/zou3519/following{/other_user}", "gists_url": "https://api.github.com/users/zou3519/gists{/gist_id}", "starred_url": "https://api.github.com/users/zou3519/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zou3519/subscriptions", "organizations_url": "https://api.github.com/users/zou3519/orgs", "repos_url": "https://api.github.com/users/zou3519/repos", "events_url": "https://api.github.com/users/zou3519/events{/privacy}", "received_events_url": "https://api.github.com/users/zou3519/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-10-31T19:22:21Z", "updated_at": "2018-11-23T15:35:51Z", "closed_at": "2017-10-31T21:38:01Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/3401", "html_url": "https://github.com/pytorch/pytorch/pull/3401", "diff_url": "https://github.com/pytorch/pytorch/pull/3401.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/3401.patch"}, "body_html": "<p><span class=\"issue-keyword tooltipped tooltipped-se\" aria-label=\"This pull request closes issue #2539.\">Fixes</span> <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"252983289\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/2539\" data-hovercard-type=\"issue\" data-hovercard-url=\"/pytorch/pytorch/issues/2539/hovercard\" href=\"https://github.com/pytorch/pytorch/issues/2539\">#2539</a>.</p>\n<p>Previously, when one indexes into a TensorDataset, if either the data_tensor or target_tensor has size <code>(n,)</code>, then a scalar is returned. When combined with other operations with dataloader this can get converted to a <code>torch.DoubleTensor</code> when the user expects a tensor of the original type (ie, <code>torch.cuda.FloatTensor</code>. This fixes it so that indexing into TensorDataset always returns tensors of the same type as the respective data/target.</p>\n<h3>Test Plan</h3>\n<pre><code>import torch\nfrom torch.utils.data import *\nX = torch.rand(64,8).cuda()\ny = torch.rand(64).cuda().unsqueeze(1)\ndataset = TensorDataset(X,y)\ndataset[0]  # confirm this returns a tupple of torch.cuda.FloatTensor\nloader = DataLoader(dataset)\nnext((y for (X,y) in loader))  # confirm this is a torch.cuda.FloatTensor\n</code></pre>", "body_text": "Fixes #2539.\nPreviously, when one indexes into a TensorDataset, if either the data_tensor or target_tensor has size (n,), then a scalar is returned. When combined with other operations with dataloader this can get converted to a torch.DoubleTensor when the user expects a tensor of the original type (ie, torch.cuda.FloatTensor. This fixes it so that indexing into TensorDataset always returns tensors of the same type as the respective data/target.\nTest Plan\nimport torch\nfrom torch.utils.data import *\nX = torch.rand(64,8).cuda()\ny = torch.rand(64).cuda().unsqueeze(1)\ndataset = TensorDataset(X,y)\ndataset[0]  # confirm this returns a tupple of torch.cuda.FloatTensor\nloader = DataLoader(dataset)\nnext((y for (X,y) in loader))  # confirm this is a torch.cuda.FloatTensor", "body": "Fixes #2539. \r\n\r\nPreviously, when one indexes into a TensorDataset, if either the data_tensor or target_tensor has size `(n,)`, then a scalar is returned. When combined with other operations with dataloader this can get converted to a `torch.DoubleTensor` when the user expects a tensor of the original type (ie, `torch.cuda.FloatTensor`. This fixes it so that indexing into TensorDataset always returns tensors of the same type as the respective data/target.\r\n\r\n### Test Plan\r\n```\r\nimport torch\r\nfrom torch.utils.data import *\r\nX = torch.rand(64,8).cuda()\r\ny = torch.rand(64).cuda().unsqueeze(1)\r\ndataset = TensorDataset(X,y)\r\ndataset[0]  # confirm this returns a tupple of torch.cuda.FloatTensor\r\nloader = DataLoader(dataset)\r\nnext((y for (X,y) in loader))  # confirm this is a torch.cuda.FloatTensor\r\n```"}