{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/106285625", "pull_request_review_id": 27201374, "id": 106285625, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNjI4NTYyNQ==", "diff_hunk": "@@ -8,19 +8,22 @@\n \n \n def RNNReLUCell(input, hidden, w_ih, w_hh, b_ih=None, b_hh=None):\n-    hy = F.relu(F.linear(input, w_ih, b_ih) + F.linear(hidden, w_hh, b_hh))\n+    x_h = input if w_ih is None else F.linear(input, w_ih, b_ih)\n+    hy = F.relu(x_h + F.linear(hidden, w_hh, b_hh))\n     return hy\n \n \n def RNNTanhCell(input, hidden, w_ih, w_hh, b_ih=None, b_hh=None):\n-    hy = F.tanh(F.linear(input, w_ih, b_ih) + F.linear(hidden, w_hh, b_hh))\n+    x_h = input if w_ih is None else F.linear(input, w_ih, b_ih)\n+    hy = F.tanh(x_h + F.linear(hidden, w_hh, b_hh))\n     return hy\n \n \n def LSTMCell(input, hidden, w_ih, w_hh, b_ih=None, b_hh=None):\n     hx, cx = hidden\n-    gates = F.linear(input, w_ih, b_ih) + F.linear(hx, w_hh, b_hh)\n-    ingate, forgetgate, cellgate, outgate = gates.chunk(4, 1)\n+    x_h = input.unsqueeze(1).expand(input.size(0), 4, input.size(1)) if w_ih is None else F.linear(input, w_ih, b_ih)", "path": "torch/nn/_functions/rnn.py", "position": null, "original_position": 21, "commit_id": "3cffe76bd63300da5ed3489df7135fad390d36ff", "original_commit_id": "cccdab6e069c194d3c69e239862a4e6445e49383", "user": {"login": "ngimel", "id": 15841449, "node_id": "MDQ6VXNlcjE1ODQxNDQ5", "avatar_url": "https://avatars3.githubusercontent.com/u/15841449?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ngimel", "html_url": "https://github.com/ngimel", "followers_url": "https://api.github.com/users/ngimel/followers", "following_url": "https://api.github.com/users/ngimel/following{/other_user}", "gists_url": "https://api.github.com/users/ngimel/gists{/gist_id}", "starred_url": "https://api.github.com/users/ngimel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ngimel/subscriptions", "organizations_url": "https://api.github.com/users/ngimel/orgs", "repos_url": "https://api.github.com/users/ngimel/repos", "events_url": "https://api.github.com/users/ngimel/events{/privacy}", "received_events_url": "https://api.github.com/users/ngimel/received_events", "type": "User", "site_admin": false}, "body": "That's a good point. This implementation matches cudnn (that forces the same value for every gate). It would be a good thing if cudnn also allowed user not to use the same vector for every gate, but until it does, it is up to pytorch maintainers to decide whether they want compatibility with cudnn or flexibility here. ", "created_at": "2017-03-15T21:18:34Z", "updated_at": "2018-11-23T15:32:48Z", "html_url": "https://github.com/pytorch/pytorch/pull/894#discussion_r106285625", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/894", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/106285625"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/894#discussion_r106285625"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/894"}}, "body_html": "<p>That's a good point. This implementation matches cudnn (that forces the same value for every gate). It would be a good thing if cudnn also allowed user not to use the same vector for every gate, but until it does, it is up to pytorch maintainers to decide whether they want compatibility with cudnn or flexibility here.</p>", "body_text": "That's a good point. This implementation matches cudnn (that forces the same value for every gate). It would be a good thing if cudnn also allowed user not to use the same vector for every gate, but until it does, it is up to pytorch maintainers to decide whether they want compatibility with cudnn or flexibility here.", "in_reply_to_id": 106094959}