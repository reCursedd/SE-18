{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/116390130", "pull_request_review_id": 38007953, "id": 116390130, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNjM5MDEzMA==", "diff_hunk": "@@ -180,8 +180,10 @@ def get_parameters(fn, handle, weight_buf):\n def _copyParams(params_from, params_to):\n     for layer_params_from, layer_params_to in zip(params_from, params_to):\n         for param_from, param_to in zip(layer_params_from, layer_params_to):\n-            assert param_from.type() == param_to.type()\n-            param_to.copy_(param_from)\n+            assert not ((param_from is None or param_from.dim() == 0) ^ (param_to is None or param_to.dim() == 0))\n+            if not ((param_from is None or param_from.dim() == 0) and (param_to is None or param_to.dim() == 0)):", "path": "torch/backends/cudnn/rnn.py", "position": null, "original_position": 7, "commit_id": "3cffe76bd63300da5ed3489df7135fad390d36ff", "original_commit_id": "01f0df327118e14fb5b878fb7f7ea067578add62", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "```python\r\nhas_from = param_from is None or param_from.dim() == 0\r\nhas_to = ...\r\nassert not (has_from ^ has_to)\r\nif not has_from:  # NOTE: has_from == has_to because of the assert\r\n    continue\r\nassert param_from.type() == param_to.type()\r\nparam_to.copy_(param_from)\r\n```", "created_at": "2017-05-14T20:39:21Z", "updated_at": "2018-11-23T15:33:26Z", "html_url": "https://github.com/pytorch/pytorch/pull/894#discussion_r116390130", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/894", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/116390130"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/894#discussion_r116390130"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/894"}}, "body_html": "<div class=\"highlight highlight-source-python\"><pre>has_from <span class=\"pl-k\">=</span> param_from <span class=\"pl-k\">is</span> <span class=\"pl-c1\">None</span> <span class=\"pl-k\">or</span> param_from.dim() <span class=\"pl-k\">==</span> <span class=\"pl-c1\">0</span>\nhas_to <span class=\"pl-k\">=</span> <span class=\"pl-c1\">...</span>\n<span class=\"pl-k\">assert</span> <span class=\"pl-k\">not</span> (has_from <span class=\"pl-k\">^</span> has_to)\n<span class=\"pl-k\">if</span> <span class=\"pl-k\">not</span> has_from:  <span class=\"pl-c\"><span class=\"pl-c\">#</span> <span class=\"pl-k\">NOTE</span>: has_from == has_to because of the assert</span>\n    <span class=\"pl-k\">continue</span>\n<span class=\"pl-k\">assert</span> param_from.type() <span class=\"pl-k\">==</span> param_to.type()\nparam_to.copy_(param_from)</pre></div>", "body_text": "has_from = param_from is None or param_from.dim() == 0\nhas_to = ...\nassert not (has_from ^ has_to)\nif not has_from:  # NOTE: has_from == has_to because of the assert\n    continue\nassert param_from.type() == param_to.type()\nparam_to.copy_(param_from)"}