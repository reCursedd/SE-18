{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/106246663", "pull_request_review_id": 27159799, "id": 106246663, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNjI0NjY2Mw==", "diff_hunk": "@@ -8,19 +8,22 @@\n \n \n def RNNReLUCell(input, hidden, w_ih, w_hh, b_ih=None, b_hh=None):\n-    hy = F.relu(F.linear(input, w_ih, b_ih) + F.linear(hidden, w_hh, b_hh))\n+    x_h = input if w_ih is None else F.linear(input, w_ih, b_ih)\n+    hy = F.relu(x_h + F.linear(hidden, w_hh, b_hh))\n     return hy\n \n \n def RNNTanhCell(input, hidden, w_ih, w_hh, b_ih=None, b_hh=None):\n-    hy = F.tanh(F.linear(input, w_ih, b_ih) + F.linear(hidden, w_hh, b_hh))\n+    x_h = input if w_ih is None else F.linear(input, w_ih, b_ih)\n+    hy = F.tanh(x_h + F.linear(hidden, w_hh, b_hh))\n     return hy\n \n \n def LSTMCell(input, hidden, w_ih, w_hh, b_ih=None, b_hh=None):\n     hx, cx = hidden\n-    gates = F.linear(input, w_ih, b_ih) + F.linear(hx, w_hh, b_hh)\n-    ingate, forgetgate, cellgate, outgate = gates.chunk(4, 1)\n+    x_h = input.unsqueeze(1).expand(input.size(0), 4, input.size(1)) if w_ih is None else F.linear(input, w_ih, b_ih)\n+    gates = x_h + F.linear(hx, w_hh, b_hh)\n+    ingate, forgetgate, cellgate, outgate = [x.squeeze(1) for x in gates.chunk(4, 1)]", "path": "torch/nn/_functions/rnn.py", "position": null, "original_position": 23, "commit_id": "3cffe76bd63300da5ed3489df7135fad390d36ff", "original_commit_id": "cccdab6e069c194d3c69e239862a4e6445e49383", "user": {"login": "adamlerer", "id": 5702157, "node_id": "MDQ6VXNlcjU3MDIxNTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5702157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adamlerer", "html_url": "https://github.com/adamlerer", "followers_url": "https://api.github.com/users/adamlerer/followers", "following_url": "https://api.github.com/users/adamlerer/following{/other_user}", "gists_url": "https://api.github.com/users/adamlerer/gists{/gist_id}", "starred_url": "https://api.github.com/users/adamlerer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adamlerer/subscriptions", "organizations_url": "https://api.github.com/users/adamlerer/orgs", "repos_url": "https://api.github.com/users/adamlerer/repos", "events_url": "https://api.github.com/users/adamlerer/events{/privacy}", "received_events_url": "https://api.github.com/users/adamlerer/received_events", "type": "User", "site_admin": false}, "body": "You're relying on the fact that (for the non-skip_input case), dim>1, otherwise it will squeeze this to a 1D tensor.\r\n\r\nBetter to just match the dimension for skip_input and regular:\r\n\r\n`x_h = input.repeat(1, 4) if w_ih is None else F.linear(input, w_ih, b_ih)`\r\n\r\nThen you can remove the `squeeze`.", "created_at": "2017-03-15T18:26:17Z", "updated_at": "2018-11-23T15:32:48Z", "html_url": "https://github.com/pytorch/pytorch/pull/894#discussion_r106246663", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/894", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/106246663"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/894#discussion_r106246663"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/894"}}, "body_html": "<p>You're relying on the fact that (for the non-skip_input case), dim&gt;1, otherwise it will squeeze this to a 1D tensor.</p>\n<p>Better to just match the dimension for skip_input and regular:</p>\n<p><code>x_h = input.repeat(1, 4) if w_ih is None else F.linear(input, w_ih, b_ih)</code></p>\n<p>Then you can remove the <code>squeeze</code>.</p>", "body_text": "You're relying on the fact that (for the non-skip_input case), dim>1, otherwise it will squeeze this to a 1D tensor.\nBetter to just match the dimension for skip_input and regular:\nx_h = input.repeat(1, 4) if w_ih is None else F.linear(input, w_ih, b_ih)\nThen you can remove the squeeze."}