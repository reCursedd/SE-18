{"url": "https://api.github.com/repos/pytorch/pytorch/issues/3495", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/3495/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/3495/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/3495/events", "html_url": "https://github.com/pytorch/pytorch/issues/3495", "id": 271330823, "node_id": "MDU6SXNzdWUyNzEzMzA4MjM=", "number": 3495, "title": "Gradient Ascent Cross Entropy Loss", "user": {"login": "seanremy", "id": 12816599, "node_id": "MDQ6VXNlcjEyODE2NTk5", "avatar_url": "https://avatars0.githubusercontent.com/u/12816599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/seanremy", "html_url": "https://github.com/seanremy", "followers_url": "https://api.github.com/users/seanremy/followers", "following_url": "https://api.github.com/users/seanremy/following{/other_user}", "gists_url": "https://api.github.com/users/seanremy/gists{/gist_id}", "starred_url": "https://api.github.com/users/seanremy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/seanremy/subscriptions", "organizations_url": "https://api.github.com/users/seanremy/orgs", "repos_url": "https://api.github.com/users/seanremy/repos", "events_url": "https://api.github.com/users/seanremy/events{/privacy}", "received_events_url": "https://api.github.com/users/seanremy/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2017-11-06T00:45:36Z", "updated_at": "2017-11-06T14:51:31Z", "closed_at": "2017-11-06T14:41:52Z", "author_association": "NONE", "body_html": "<p>I'm using a GAN-like setup using CrossEntropyLoss and am curious about the best way to do gradient ascent. Since the one-hot conversion takes place inside the loss function, I am just reversing the gradients as follows:</p>\n<pre><code>loss = criterion(outputs, labels)\nloss.backward()\nfor group in optimizer.param_groups:\n\tfor p in group['params']:\n\t\tp.grad = -1*p.grad\noptimizer.step()\n</code></pre>\n<p>Is this the correct way to go about this? My model outputs quickly become nan when I do this, and I'm trying to figure out if the above code is the reason.</p>", "body_text": "I'm using a GAN-like setup using CrossEntropyLoss and am curious about the best way to do gradient ascent. Since the one-hot conversion takes place inside the loss function, I am just reversing the gradients as follows:\nloss = criterion(outputs, labels)\nloss.backward()\nfor group in optimizer.param_groups:\n\tfor p in group['params']:\n\t\tp.grad = -1*p.grad\noptimizer.step()\n\nIs this the correct way to go about this? My model outputs quickly become nan when I do this, and I'm trying to figure out if the above code is the reason.", "body": "I'm using a GAN-like setup using CrossEntropyLoss and am curious about the best way to do gradient ascent. Since the one-hot conversion takes place inside the loss function, I am just reversing the gradients as follows:\r\n\r\n```\r\nloss = criterion(outputs, labels)\r\nloss.backward()\r\nfor group in optimizer.param_groups:\r\n\tfor p in group['params']:\r\n\t\tp.grad = -1*p.grad\r\noptimizer.step()\r\n```\r\n\r\nIs this the correct way to go about this? My model outputs quickly become nan when I do this, and I'm trying to figure out if the above code is the reason."}