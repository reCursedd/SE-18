{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/366320613", "html_url": "https://github.com/pytorch/pytorch/pull/5275#issuecomment-366320613", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/5275", "id": 366320613, "node_id": "MDEyOklzc3VlQ29tbWVudDM2NjMyMDYxMw==", "user": {"login": "zou3519", "id": 5652049, "node_id": "MDQ6VXNlcjU2NTIwNDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/5652049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zou3519", "html_url": "https://github.com/zou3519", "followers_url": "https://api.github.com/users/zou3519/followers", "following_url": "https://api.github.com/users/zou3519/following{/other_user}", "gists_url": "https://api.github.com/users/zou3519/gists{/gist_id}", "starred_url": "https://api.github.com/users/zou3519/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zou3519/subscriptions", "organizations_url": "https://api.github.com/users/zou3519/orgs", "repos_url": "https://api.github.com/users/zou3519/repos", "events_url": "https://api.github.com/users/zou3519/events{/privacy}", "received_events_url": "https://api.github.com/users/zou3519/received_events", "type": "User", "site_admin": false}, "created_at": "2018-02-16T18:34:12Z", "updated_at": "2018-02-16T18:34:12Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=4583066\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/apaszke\">@apaszke</a> If I'm understanding the block here correctly <a href=\"https://github.com/pytorch/pytorch/blob/master/torch/csrc/autograd/python_function.cpp#L112-L126\">https://github.com/pytorch/pytorch/blob/master/torch/csrc/autograd/python_function.cpp#L112-L126</a> , I think it ensures that the python inputs are defined, but doesn't change the C++ inputs. If I swapped the two blocks, we'd guarantee the python inputs (pyInputs) has defined tensors, but the C++ inputs (inputs) are still undefined after the block (and those are what get passed to wrap_outputs).</p>\n<p>I could change <code>PyFunction::legacy_apply</code> to not call <code>wrap_outputs</code> to process the outputs and instead follow how<code>PyFunction::apply</code> process its outputs to fix this to avoid the checks, though. I'll look into that more</p>", "body_text": "@apaszke If I'm understanding the block here correctly https://github.com/pytorch/pytorch/blob/master/torch/csrc/autograd/python_function.cpp#L112-L126 , I think it ensures that the python inputs are defined, but doesn't change the C++ inputs. If I swapped the two blocks, we'd guarantee the python inputs (pyInputs) has defined tensors, but the C++ inputs (inputs) are still undefined after the block (and those are what get passed to wrap_outputs).\nI could change PyFunction::legacy_apply to not call wrap_outputs to process the outputs and instead follow howPyFunction::apply process its outputs to fix this to avoid the checks, though. I'll look into that more", "body": "@apaszke If I'm understanding the block here correctly https://github.com/pytorch/pytorch/blob/master/torch/csrc/autograd/python_function.cpp#L112-L126 , I think it ensures that the python inputs are defined, but doesn't change the C++ inputs. If I swapped the two blocks, we'd guarantee the python inputs (pyInputs) has defined tensors, but the C++ inputs (inputs) are still undefined after the block (and those are what get passed to wrap_outputs).\r\n\r\nI could change `PyFunction::legacy_apply` to not call `wrap_outputs` to process the outputs and instead follow how`PyFunction::apply` process its outputs to fix this to avoid the checks, though. I'll look into that more"}