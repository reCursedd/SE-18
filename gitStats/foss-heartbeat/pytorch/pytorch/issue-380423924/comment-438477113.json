{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/438477113", "html_url": "https://github.com/pytorch/pytorch/issues/13929#issuecomment-438477113", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/13929", "id": 438477113, "node_id": "MDEyOklzc3VlQ29tbWVudDQzODQ3NzExMw==", "user": {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, "created_at": "2018-11-13T23:24:36Z", "updated_at": "2018-11-13T23:24:36Z", "author_association": "CONTRIBUTOR", "body_html": "<p>For the JIT, we should be focused on using it to make programs run faster, and do tasks that specifically improve performance or add more language features. I don't think we should be abstract because it might (possibly, in the future) be helpful to those end goals.  Abstracting first frequently ends up with a lot of useless abstractions. LLVM added pass managers because they had to manage the fact that some passes ran at different levels (basic block, function, module), and they needed to weave the smaller-scoped passes together into a single pass for efficiency and because it makes better code. Currently we only have module-level passes anyway, so this stuff would only make it harder for developers to understand what is happening.</p>\n<p>It is very possible in the future we will end up with perf optimizations or language features that necessitate infrastructure like this, but for now I think it is best to wait.</p>", "body_text": "For the JIT, we should be focused on using it to make programs run faster, and do tasks that specifically improve performance or add more language features. I don't think we should be abstract because it might (possibly, in the future) be helpful to those end goals.  Abstracting first frequently ends up with a lot of useless abstractions. LLVM added pass managers because they had to manage the fact that some passes ran at different levels (basic block, function, module), and they needed to weave the smaller-scoped passes together into a single pass for efficiency and because it makes better code. Currently we only have module-level passes anyway, so this stuff would only make it harder for developers to understand what is happening.\nIt is very possible in the future we will end up with perf optimizations or language features that necessitate infrastructure like this, but for now I think it is best to wait.", "body": "For the JIT, we should be focused on using it to make programs run faster, and do tasks that specifically improve performance or add more language features. I don't think we should be abstract because it might (possibly, in the future) be helpful to those end goals.  Abstracting first frequently ends up with a lot of useless abstractions. LLVM added pass managers because they had to manage the fact that some passes ran at different levels (basic block, function, module), and they needed to weave the smaller-scoped passes together into a single pass for efficiency and because it makes better code. Currently we only have module-level passes anyway, so this stuff would only make it harder for developers to understand what is happening. \r\n\r\nIt is very possible in the future we will end up with perf optimizations or language features that necessitate infrastructure like this, but for now I think it is best to wait. "}