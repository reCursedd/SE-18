{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/90113462", "pull_request_review_id": 10637993, "id": 90113462, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkwMTEzNDYy", "diff_hunk": "@@ -0,0 +1,85 @@\n+import torch\n+from torch.nn.modules import Container\n+from .scatter_gather import scatter, gather\n+from .replicate import replicate\n+from .parallel_apply import parallel_apply\n+\n+\n+class DataParallel(Container):\n+    \"\"\"Implements data parallelism at the module level.\n+\n+    This container parallelizes the application of the given module by\n+    splitting the input across the specified devices. In the forward pass, the\n+    module is replicated on each device, and each replica handles a portion of\n+    the input. During the backwards pass, gradients from each replica are\n+    summed into the original module.\n+\n+    Args:\n+        module: module to be parallelized\n+        device_ids: CUDA devices (default: all devices)\n+        output_device: device location of output (default: device_ids[0])\n+    Example:\n+        >>> net = torch.nn.DataParallel(model, device_ids=[0, 1, 2])\n+        >>> output = net(input)\n+    \"\"\"\n+\n+    def __init__(self, module, device_ids=None, output_device=None):\n+        super(DataParallel, self).__init__()\n+        if device_ids is None:\n+            device_ids = list(range(torch.cuda.device_count()))\n+        if output_device is None:\n+            output_device = device_ids[0]\n+        self.module = module\n+        self.device_ids = device_ids\n+        self.output_device = output_device\n+        if len(self.device_ids) == 1:\n+            self.module.cuda(device_ids[0])\n+\n+    def forward(self, input):\n+        if len(self.device_ids) == 1:", "path": "torch/nn/parallel/data_parallel.py", "position": 39, "original_position": 39, "commit_id": "2937a741b46be9a899cc20c21178fa3e9cf18d89", "original_commit_id": "2937a741b46be9a899cc20c21178fa3e9cf18d89", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Is there any reason why you can't use `data_parallel` to implement this?", "created_at": "2016-11-29T21:05:04Z", "updated_at": "2018-11-23T15:31:57Z", "html_url": "https://github.com/pytorch/pytorch/pull/268#discussion_r90113462", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/268", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/90113462"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/268#discussion_r90113462"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/268"}}, "body_html": "<p>Is there any reason why you can't use <code>data_parallel</code> to implement this?</p>", "body_text": "Is there any reason why you can't use data_parallel to implement this?"}