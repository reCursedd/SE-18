{"url": "https://api.github.com/repos/pytorch/pytorch/issues/9808", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/9808/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/9808/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/9808/events", "html_url": "https://github.com/pytorch/pytorch/issues/9808", "id": 344293077, "node_id": "MDU6SXNzdWUzNDQyOTMwNzc=", "number": 9808, "title": "How index_select part tensor value in a particular dimension in Pytorch\uff1f", "user": {"login": "qlwang25", "id": 38132016, "node_id": "MDQ6VXNlcjM4MTMyMDE2", "avatar_url": "https://avatars2.githubusercontent.com/u/38132016?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qlwang25", "html_url": "https://github.com/qlwang25", "followers_url": "https://api.github.com/users/qlwang25/followers", "following_url": "https://api.github.com/users/qlwang25/following{/other_user}", "gists_url": "https://api.github.com/users/qlwang25/gists{/gist_id}", "starred_url": "https://api.github.com/users/qlwang25/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qlwang25/subscriptions", "organizations_url": "https://api.github.com/users/qlwang25/orgs", "repos_url": "https://api.github.com/users/qlwang25/repos", "events_url": "https://api.github.com/users/qlwang25/events{/privacy}", "received_events_url": "https://api.github.com/users/qlwang25/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-07-25T05:00:18Z", "updated_at": "2018-07-27T04:20:21Z", "closed_at": "2018-07-27T04:20:21Z", "author_association": "NONE", "body_html": "<h2>Issue description</h2>\n<p>The index_select function can not personalize for each sample.<br>\nfor example:</p>\n<pre><code>a shape size (B, L, H)\nB batch_size=2,  L time_step=3, H dim=4  \n&gt;&gt;&gt; a\ntensor([[[0, 1, 2, 3],\n         [4, 5, 6, 7],\n         [8, 9, 10, 11]],\n\n        [[12, 13, 14, 15],\n         [16, 17, 18, 19],\n         [20, 21, 22, 23]]])\n\nif use index_select function to reverse time_step:\n&gt;&gt;&gt; indices = torch.arange(3-1, -1, -1)\n&gt;&gt;&gt; indices\ntensor([2.,  1.,  0.])\n&gt;&gt;&gt; torch.index_select(a, 1, indices.long())\ntensor([[[8, 9, 10, 11],\n         [4, 5, 6, 7],\n         [0, 1, 2, 3]],\n\n        [[20, 21, 22, 23],\n         [16, 17, 18, 19],\n         [12, 13, 14, 15]]])\n\nBut if given the length tensor[2, 1],\nHow to  reverse time_step and personalize for each sample?\nIn other words, How to get the following results?\ntensor([[[4, 5, 6, 7],\n         [0, 1, 2, 3],\n         [8, 9, 10, 11]],\n\n        [[12, 13, 14, 15],\n         [16, 17, 18, 19],\n         [20, 21, 22, 23]]])\n\n</code></pre>\n<p>The first sample is only reversed to a length of 2;<br>\nThe second sample is only reversed to a length of 1;</p>\n<p>I want to know if pytorch has such a method.<br>\nor<br>\nplease tell me how to do it?</p>\n<pre><code></code></pre>", "body_text": "Issue description\nThe index_select function can not personalize for each sample.\nfor example:\na shape size (B, L, H)\nB batch_size=2,  L time_step=3, H dim=4  \n>>> a\ntensor([[[0, 1, 2, 3],\n         [4, 5, 6, 7],\n         [8, 9, 10, 11]],\n\n        [[12, 13, 14, 15],\n         [16, 17, 18, 19],\n         [20, 21, 22, 23]]])\n\nif use index_select function to reverse time_step:\n>>> indices = torch.arange(3-1, -1, -1)\n>>> indices\ntensor([2.,  1.,  0.])\n>>> torch.index_select(a, 1, indices.long())\ntensor([[[8, 9, 10, 11],\n         [4, 5, 6, 7],\n         [0, 1, 2, 3]],\n\n        [[20, 21, 22, 23],\n         [16, 17, 18, 19],\n         [12, 13, 14, 15]]])\n\nBut if given the length tensor[2, 1],\nHow to  reverse time_step and personalize for each sample?\nIn other words, How to get the following results?\ntensor([[[4, 5, 6, 7],\n         [0, 1, 2, 3],\n         [8, 9, 10, 11]],\n\n        [[12, 13, 14, 15],\n         [16, 17, 18, 19],\n         [20, 21, 22, 23]]])\n\n\nThe first sample is only reversed to a length of 2;\nThe second sample is only reversed to a length of 1;\nI want to know if pytorch has such a method.\nor\nplease tell me how to do it?", "body": "## Issue description\r\nThe index_select function can not personalize for each sample.\r\nfor example:\r\n```\r\na shape size (B, L, H)\r\nB batch_size=2,  L time_step=3, H dim=4  \r\n>>> a\r\ntensor([[[0, 1, 2, 3],\r\n         [4, 5, 6, 7],\r\n         [8, 9, 10, 11]],\r\n\r\n        [[12, 13, 14, 15],\r\n         [16, 17, 18, 19],\r\n         [20, 21, 22, 23]]])\r\n\r\nif use index_select function to reverse time_step:\r\n>>> indices = torch.arange(3-1, -1, -1)\r\n>>> indices\r\ntensor([2.,  1.,  0.])\r\n>>> torch.index_select(a, 1, indices.long())\r\ntensor([[[8, 9, 10, 11],\r\n         [4, 5, 6, 7],\r\n         [0, 1, 2, 3]],\r\n\r\n        [[20, 21, 22, 23],\r\n         [16, 17, 18, 19],\r\n         [12, 13, 14, 15]]])\r\n\r\nBut if given the length tensor[2, 1],\r\nHow to  reverse time_step and personalize for each sample?\r\nIn other words, How to get the following results?\r\ntensor([[[4, 5, 6, 7],\r\n         [0, 1, 2, 3],\r\n         [8, 9, 10, 11]],\r\n\r\n        [[12, 13, 14, 15],\r\n         [16, 17, 18, 19],\r\n         [20, 21, 22, 23]]])\r\n\r\n```\r\nThe first sample is only reversed to a length of 2;\r\nThe second sample is only reversed to a length of 1;\r\n\r\nI want to know if pytorch has such a method.\r\nor \r\nplease tell me how to do it?\r\n\r\n```\r\n```\r\n"}