{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/204156046", "pull_request_review_id": 139194292, "id": 204156046, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDE1NjA0Ng==", "diff_hunk": "@@ -31,11 +32,91 @@ def __getattr__(self, name):\n class Queue(multiprocessing.queues.Queue):\n \n     def __init__(self, *args, **kwargs):\n+        if hasattr(multiprocessing, \"get_context\"):\n+            kwargs['ctx'] = multiprocessing.get_context()\n         super(Queue, self).__init__(*args, **kwargs)\n-        self._reader = ConnectionWrapper(self._reader)\n-        self._writer = ConnectionWrapper(self._writer)\n-        self._send = self._writer.send\n-        self._recv = self._reader.recv\n+\n+        if sys.version_info < (3, 3):\n+            self._reader = ConnectionWrapper(self._reader)\n+            self._writer = ConnectionWrapper(self._writer)\n+            self._send = self._writer.send\n+            self._recv = self._reader.recv\n+\n+        self.sig_shutdown = multiprocessing.Value('i', 0)\n+        self.put_lock = multiprocessing.RLock()\n+        self.get_lock = multiprocessing.Lock()\n+\n+    def __setstate__(self, state):\n+        default_state, extra_state = state\n+        (self.sig_shutdown, self.put_lock, self.get_lock) = extra_state\n+        super(Queue, self).__setstate__(default_state)\n+\n+    def __getstate__(self):\n+        return (super(Queue, self).__getstate__(),\n+                (self.sig_shutdown, self.put_lock, self.get_lock))\n+\n+    def shutdown(self):\n+        if self.is_shutdown():\n+            return\n+        with self.sig_shutdown.get_lock():\n+            with self.put_lock:", "path": "torch/multiprocessing/queue.py", "position": 40, "original_position": 40, "commit_id": "7e43b58501605087b24e7f4922a07c487376d499", "original_commit_id": "7e43b58501605087b24e7f4922a07c487376d499", "user": {"login": "csarofeen", "id": 22205833, "node_id": "MDQ6VXNlcjIyMjA1ODMz", "avatar_url": "https://avatars2.githubusercontent.com/u/22205833?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csarofeen", "html_url": "https://github.com/csarofeen", "followers_url": "https://api.github.com/users/csarofeen/followers", "following_url": "https://api.github.com/users/csarofeen/following{/other_user}", "gists_url": "https://api.github.com/users/csarofeen/gists{/gist_id}", "starred_url": "https://api.github.com/users/csarofeen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csarofeen/subscriptions", "organizations_url": "https://api.github.com/users/csarofeen/orgs", "repos_url": "https://api.github.com/users/csarofeen/repos", "events_url": "https://api.github.com/users/csarofeen/events{/privacy}", "received_events_url": "https://api.github.com/users/csarofeen/received_events", "type": "User", "site_admin": false}, "body": "Grab the put lock, put a None to try free the get lock, then signal shutdown. This makes sure no one is getting or putting when we try to shutdown, preventing a race condition on shutdown.", "created_at": "2018-07-20T20:06:32Z", "updated_at": "2018-11-23T15:47:48Z", "html_url": "https://github.com/pytorch/pytorch/pull/9539#discussion_r204156046", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/9539", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/204156046"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/9539#discussion_r204156046"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/9539"}}, "body_html": "<p>Grab the put lock, put a None to try free the get lock, then signal shutdown. This makes sure no one is getting or putting when we try to shutdown, preventing a race condition on shutdown.</p>", "body_text": "Grab the put lock, put a None to try free the get lock, then signal shutdown. This makes sure no one is getting or putting when we try to shutdown, preventing a race condition on shutdown."}