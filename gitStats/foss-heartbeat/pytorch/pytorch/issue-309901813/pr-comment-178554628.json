{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/178554628", "pull_request_review_id": 108628127, "id": 178554628, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3ODU1NDYyOA==", "diff_hunk": "@@ -185,21 +185,32 @@ Tensor _fft_cufft(const Tensor& self, int64_t signal_ndim,\n   std::vector<long long int> inembed(signal_ndim);\n \n   // check the input sizes and strides to see if we need to make it contiguous\n-  bool need_contiguous = input.stride(signal_ndim) == 0;\n+  // cuFFT doesn't support batch dim with stride 0\n+  bool need_contiguous = input.stride(0) == 0;\n+\n   if (complex_input) {\n-    // Real/imag dimension must be like complex type. Need to make the input\n-    // tensor contiguous if this dimension is not contiguous.\n+    // Real/imag dimension must be like complex type.\n     need_contiguous |= input.stride(-1) != 1;\n+    // Strides of other dimensions needs to be aligned when viewed as of\n+    // complex type, i.e., multiples of 2. We check the batch dim here. The\n+    // other signal dims are checked in a for-loop afterwards.\n+    need_contiguous |= input.stride(0) % 2 != 0;\n   } else if (is_half) {\n     // For half, base strides on the real part of real-to-complex and\n     // complex-to-real transforms are not supported. Since our output is always\n     // contiguous, only need to check real-to-complex case.\n     need_contiguous |= input.stride(signal_ndim) != 1;\n   }\n-  // store last tensor stride to infer inembed array\n-  // complex input's last dim is size 2 and contiguous\n+\n+  // Store last dimension stride to infer inembed array\n+  // This is used when `need_contiguous=False`, so we can assume that the last\n+  // dimension is indeed aligned. Complex input's last signal dim can be viewed\n+  // as having stride=2, where the unit is sizeof(real_type).\n   long long int ilast_stride = complex_input ? 2 : 1;\n-   // for each signal dim from innermost to outermost\n+  // For each signal dim from innermost to outermost, compute inembed values if\n+  // possible. If not, then we need to make input contiguous. Notice that if we\n+  // can compute inembed values, it means that the dimensions conform to the\n+  // data type alignment, e.g., strides are multiples of 2 when complex_input.\n   for (int64_t i = signal_ndim - 1; i >= 0; i--) {", "path": "aten/src/ATen/native/cuda/SpectralOps.cu", "position": null, "original_position": 36, "commit_id": "878b8fb7f17d4786a16263f3788f3290bcfe3347", "original_commit_id": "8f9d002ff38a78bdec0d4bb2b76803d1a32e86ac", "user": {"login": "SsnL", "id": 5674597, "node_id": "MDQ6VXNlcjU2NzQ1OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5674597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SsnL", "html_url": "https://github.com/SsnL", "followers_url": "https://api.github.com/users/SsnL/followers", "following_url": "https://api.github.com/users/SsnL/following{/other_user}", "gists_url": "https://api.github.com/users/SsnL/gists{/gist_id}", "starred_url": "https://api.github.com/users/SsnL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SsnL/subscriptions", "organizations_url": "https://api.github.com/users/SsnL/orgs", "repos_url": "https://api.github.com/users/SsnL/repos", "events_url": "https://api.github.com/users/SsnL/events{/privacy}", "received_events_url": "https://api.github.com/users/SsnL/received_events", "type": "User", "site_admin": false}, "body": "1 & 2. I will write an explanation of `inembed` and `oembed`. Thanks! :) Yes, MKL doesn't have such restrictions.\r\n4. Sounds reasonable. Should this function live in this file, or in maybe `TensorUtils.h`?", "created_at": "2018-04-02T14:28:07Z", "updated_at": "2018-11-23T15:41:29Z", "html_url": "https://github.com/pytorch/pytorch/pull/6118#discussion_r178554628", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/6118", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/178554628"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/6118#discussion_r178554628"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/6118"}}, "body_html": "<p>1 &amp; 2. I will write an explanation of <code>inembed</code> and <code>oembed</code>. Thanks! :) Yes, MKL doesn't have such restrictions.<br>\n4. Sounds reasonable. Should this function live in this file, or in maybe <code>TensorUtils.h</code>?</p>", "body_text": "1 & 2. I will write an explanation of inembed and oembed. Thanks! :) Yes, MKL doesn't have such restrictions.\n4. Sounds reasonable. Should this function live in this file, or in maybe TensorUtils.h?", "in_reply_to_id": 178445840}