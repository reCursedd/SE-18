{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/335807709", "html_url": "https://github.com/pytorch/pytorch/pull/3042#issuecomment-335807709", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/3042", "id": 335807709, "node_id": "MDEyOklzc3VlQ29tbWVudDMzNTgwNzcwOQ==", "user": {"login": "SsnL", "id": 5674597, "node_id": "MDQ6VXNlcjU2NzQ1OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5674597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SsnL", "html_url": "https://github.com/SsnL", "followers_url": "https://api.github.com/users/SsnL/followers", "following_url": "https://api.github.com/users/SsnL/following{/other_user}", "gists_url": "https://api.github.com/users/SsnL/gists{/gist_id}", "starred_url": "https://api.github.com/users/SsnL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SsnL/subscriptions", "organizations_url": "https://api.github.com/users/SsnL/orgs", "repos_url": "https://api.github.com/users/SsnL/repos", "events_url": "https://api.github.com/users/SsnL/events{/privacy}", "received_events_url": "https://api.github.com/users/SsnL/received_events", "type": "User", "site_admin": false}, "created_at": "2017-10-11T13:23:08Z", "updated_at": "2017-10-11T13:23:08Z", "author_association": "CONTRIBUTOR", "body_html": "<div class=\"email-fragment\">I see. Let me change back to DBL_MANT_DIG and update the doc then.</div>\n<span class=\"email-hidden-toggle\"><a href=\"#\">\u2026</a></span><div class=\"email-hidden-reply\">\n<div class=\"email-quoted-reply\"> On Oct 11, 2017, at 04:11, Adam Paszke ***@***.***&gt; wrote:\n\n I don't think we want to let random return integers up to DBL_MAX. The problem is that above 1 &lt;&lt; DBL_MANT_DIG they can't even be represented properly, so we'll end up with a lot of rounding. Even though the range seems to be very large (i.e. to represent all these integers you'd need 1024 bits), we are still limited to 64bit randomness, and scale this so elements will be spread out very far from each other (and a lot of them will never be sampled). Worse - choosing a different upper limit, will change the rounding which means that you'll be always getting disjoint sets of numbers from calls to random_ with different bounds.\n\n \u2014\n You are receiving this because you authored the thread.\n Reply to this email directly, view it on GitHub, or mute the thread.\n</div>\n<div class=\"email-fragment\"></div>\n</div>", "body_text": "I see. Let me change back to DBL_MANT_DIG and update the doc then.\n\u2026\n On Oct 11, 2017, at 04:11, Adam Paszke ***@***.***> wrote:\n\n I don't think we want to let random return integers up to DBL_MAX. The problem is that above 1 << DBL_MANT_DIG they can't even be represented properly, so we'll end up with a lot of rounding. Even though the range seems to be very large (i.e. to represent all these integers you'd need 1024 bits), we are still limited to 64bit randomness, and scale this so elements will be spread out very far from each other (and a lot of them will never be sampled). Worse - choosing a different upper limit, will change the rounding which means that you'll be always getting disjoint sets of numbers from calls to random_ with different bounds.\n\n \u2014\n You are receiving this because you authored the thread.\n Reply to this email directly, view it on GitHub, or mute the thread.", "body": "I see. Let me change back to DBL_MANT_DIG and update the doc then. \n\n> On Oct 11, 2017, at 04:11, Adam Paszke <notifications@github.com> wrote:\n> \n> I don't think we want to let random return integers up to DBL_MAX. The problem is that above 1 << DBL_MANT_DIG they can't even be represented properly, so we'll end up with a lot of rounding. Even though the range seems to be very large (i.e. to represent all these integers you'd need 1024 bits), we are still limited to 64bit randomness, and scale this so elements will be spread out very far from each other (and a lot of them will never be sampled). Worse - choosing a different upper limit, will change the rounding which means that you'll be always getting disjoint sets of numbers from calls to random_ with different bounds.\n> \n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub, or mute the thread.\n> \n"}