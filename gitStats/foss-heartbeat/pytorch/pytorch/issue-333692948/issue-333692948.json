{"url": "https://api.github.com/repos/pytorch/pytorch/issues/8651", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/8651/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/8651/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/8651/events", "html_url": "https://github.com/pytorch/pytorch/issues/8651", "id": 333692948, "node_id": "MDU6SXNzdWUzMzM2OTI5NDg=", "number": 8651, "title": "Returning torch object from multiprocessing pipe breaks random generator state", "user": {"login": "timmeinhardt", "id": 7427306, "node_id": "MDQ6VXNlcjc0MjczMDY=", "avatar_url": "https://avatars0.githubusercontent.com/u/7427306?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timmeinhardt", "html_url": "https://github.com/timmeinhardt", "followers_url": "https://api.github.com/users/timmeinhardt/followers", "following_url": "https://api.github.com/users/timmeinhardt/following{/other_user}", "gists_url": "https://api.github.com/users/timmeinhardt/gists{/gist_id}", "starred_url": "https://api.github.com/users/timmeinhardt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timmeinhardt/subscriptions", "organizations_url": "https://api.github.com/users/timmeinhardt/orgs", "repos_url": "https://api.github.com/users/timmeinhardt/repos", "events_url": "https://api.github.com/users/timmeinhardt/events{/privacy}", "received_events_url": "https://api.github.com/users/timmeinhardt/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "yf225", "id": 4063635, "node_id": "MDQ6VXNlcjQwNjM2MzU=", "avatar_url": "https://avatars0.githubusercontent.com/u/4063635?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yf225", "html_url": "https://github.com/yf225", "followers_url": "https://api.github.com/users/yf225/followers", "following_url": "https://api.github.com/users/yf225/following{/other_user}", "gists_url": "https://api.github.com/users/yf225/gists{/gist_id}", "starred_url": "https://api.github.com/users/yf225/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yf225/subscriptions", "organizations_url": "https://api.github.com/users/yf225/orgs", "repos_url": "https://api.github.com/users/yf225/repos", "events_url": "https://api.github.com/users/yf225/events{/privacy}", "received_events_url": "https://api.github.com/users/yf225/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "yf225", "id": 4063635, "node_id": "MDQ6VXNlcjQwNjM2MzU=", "avatar_url": "https://avatars0.githubusercontent.com/u/4063635?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yf225", "html_url": "https://github.com/yf225", "followers_url": "https://api.github.com/users/yf225/followers", "following_url": "https://api.github.com/users/yf225/following{/other_user}", "gists_url": "https://api.github.com/users/yf225/gists{/gist_id}", "starred_url": "https://api.github.com/users/yf225/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yf225/subscriptions", "organizations_url": "https://api.github.com/users/yf225/orgs", "repos_url": "https://api.github.com/users/yf225/repos", "events_url": "https://api.github.com/users/yf225/events{/privacy}", "received_events_url": "https://api.github.com/users/yf225/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 6, "created_at": "2018-06-19T14:17:58Z", "updated_at": "2018-07-01T17:54:13Z", "closed_at": "2018-06-27T20:37:31Z", "author_association": "NONE", "body_html": "<p>While working with multiprocessing and PyTorch 0.4.0 I encountered a (for me) unintuitive behaviour of the random generator state. Sorry for the lengthy code example but I hope it helps to clarify my problem. Usually the random state of a subprocess is independent of the parent process but my example shows that if a PyTorch object is returned from a subprocess the random state of the same is altered. From my understanding only returning a PyTorch object should not effect the random state in such a way: The randomly generated sequences in <code>RETURN TORCH OBJECT</code> and <code>RETURN NONE</code> should be identical. Can someone maybe clarify my confusion?</p>\n<pre><code>import torch\nfrom torch.multiprocessing import Pipe, Process\n\n\ndef worker(remote, parent_remote):\n    parent_remote.close()\n    while True:\n        cmd, return_torch = remote.recv()\n\n        ret = None\n        if return_torch:\n            ret = torch.Tensor([1, 2, 3])\n\n        if cmd == 'seed':\n            torch.random.manual_seed(100)\n            remote.send(ret)\n        elif cmd == 'print':\n            print(torch.randperm(5))\n            remote.send(ret)\n        elif cmd == 'all':\n            torch.random.manual_seed(100)\n            print(torch.randperm(5))\n            print(torch.randperm(5))\n            remote.send(ret)\n\n\nremote, work_remote = Pipe()\nps = Process(target=worker, args=(work_remote, remote))\nps.daemon = True\nps.start()\nwork_remote.close()\n\nprint(\"RETURN TORCH OBJECT\")\n\nremote.send(['all', True])\nremote.recv()\n\nremote.send(['seed', True])\nremote.recv()\nremote.send(['print', True])\nremote.recv()\nremote.send(['print', True])\nremote.recv()\n\nprint(\"RETURN NONE\")\n\nremote.send(['all', False])\nremote.recv()\n\nremote.send(['seed', False])\nremote.recv()\nremote.send(['print', False])\nremote.recv()\nremote.send(['print', False])\nremote.recv()\n</code></pre>\n<p>Console output:</p>\n<pre><code>RETURN TORCH OBJECT\ntensor([ 0,  1,  4,  2,  3])\ntensor([ 0,  4,  2,  3,  1])\ntensor([ 2,  4,  1,  0,  3])\ntensor([ 2,  3,  0,  1,  4])\nRETURN NONE\ntensor([ 0,  1,  4,  2,  3])\ntensor([ 0,  4,  2,  3,  1])\ntensor([ 0,  1,  4,  2,  3])\ntensor([ 0,  4,  2,  3,  1])\n</code></pre>", "body_text": "While working with multiprocessing and PyTorch 0.4.0 I encountered a (for me) unintuitive behaviour of the random generator state. Sorry for the lengthy code example but I hope it helps to clarify my problem. Usually the random state of a subprocess is independent of the parent process but my example shows that if a PyTorch object is returned from a subprocess the random state of the same is altered. From my understanding only returning a PyTorch object should not effect the random state in such a way: The randomly generated sequences in RETURN TORCH OBJECT and RETURN NONE should be identical. Can someone maybe clarify my confusion?\nimport torch\nfrom torch.multiprocessing import Pipe, Process\n\n\ndef worker(remote, parent_remote):\n    parent_remote.close()\n    while True:\n        cmd, return_torch = remote.recv()\n\n        ret = None\n        if return_torch:\n            ret = torch.Tensor([1, 2, 3])\n\n        if cmd == 'seed':\n            torch.random.manual_seed(100)\n            remote.send(ret)\n        elif cmd == 'print':\n            print(torch.randperm(5))\n            remote.send(ret)\n        elif cmd == 'all':\n            torch.random.manual_seed(100)\n            print(torch.randperm(5))\n            print(torch.randperm(5))\n            remote.send(ret)\n\n\nremote, work_remote = Pipe()\nps = Process(target=worker, args=(work_remote, remote))\nps.daemon = True\nps.start()\nwork_remote.close()\n\nprint(\"RETURN TORCH OBJECT\")\n\nremote.send(['all', True])\nremote.recv()\n\nremote.send(['seed', True])\nremote.recv()\nremote.send(['print', True])\nremote.recv()\nremote.send(['print', True])\nremote.recv()\n\nprint(\"RETURN NONE\")\n\nremote.send(['all', False])\nremote.recv()\n\nremote.send(['seed', False])\nremote.recv()\nremote.send(['print', False])\nremote.recv()\nremote.send(['print', False])\nremote.recv()\n\nConsole output:\nRETURN TORCH OBJECT\ntensor([ 0,  1,  4,  2,  3])\ntensor([ 0,  4,  2,  3,  1])\ntensor([ 2,  4,  1,  0,  3])\ntensor([ 2,  3,  0,  1,  4])\nRETURN NONE\ntensor([ 0,  1,  4,  2,  3])\ntensor([ 0,  4,  2,  3,  1])\ntensor([ 0,  1,  4,  2,  3])\ntensor([ 0,  4,  2,  3,  1])", "body": "While working with multiprocessing and PyTorch 0.4.0 I encountered a (for me) unintuitive behaviour of the random generator state. Sorry for the lengthy code example but I hope it helps to clarify my problem. Usually the random state of a subprocess is independent of the parent process but my example shows that if a PyTorch object is returned from a subprocess the random state of the same is altered. From my understanding only returning a PyTorch object should not effect the random state in such a way: The randomly generated sequences in `RETURN TORCH OBJECT` and `RETURN NONE` should be identical. Can someone maybe clarify my confusion?\r\n\r\n```\r\nimport torch\r\nfrom torch.multiprocessing import Pipe, Process\r\n\r\n\r\ndef worker(remote, parent_remote):\r\n    parent_remote.close()\r\n    while True:\r\n        cmd, return_torch = remote.recv()\r\n\r\n        ret = None\r\n        if return_torch:\r\n            ret = torch.Tensor([1, 2, 3])\r\n\r\n        if cmd == 'seed':\r\n            torch.random.manual_seed(100)\r\n            remote.send(ret)\r\n        elif cmd == 'print':\r\n            print(torch.randperm(5))\r\n            remote.send(ret)\r\n        elif cmd == 'all':\r\n            torch.random.manual_seed(100)\r\n            print(torch.randperm(5))\r\n            print(torch.randperm(5))\r\n            remote.send(ret)\r\n\r\n\r\nremote, work_remote = Pipe()\r\nps = Process(target=worker, args=(work_remote, remote))\r\nps.daemon = True\r\nps.start()\r\nwork_remote.close()\r\n\r\nprint(\"RETURN TORCH OBJECT\")\r\n\r\nremote.send(['all', True])\r\nremote.recv()\r\n\r\nremote.send(['seed', True])\r\nremote.recv()\r\nremote.send(['print', True])\r\nremote.recv()\r\nremote.send(['print', True])\r\nremote.recv()\r\n\r\nprint(\"RETURN NONE\")\r\n\r\nremote.send(['all', False])\r\nremote.recv()\r\n\r\nremote.send(['seed', False])\r\nremote.recv()\r\nremote.send(['print', False])\r\nremote.recv()\r\nremote.send(['print', False])\r\nremote.recv()\r\n```\r\n\r\nConsole output:\r\n```\r\nRETURN TORCH OBJECT\r\ntensor([ 0,  1,  4,  2,  3])\r\ntensor([ 0,  4,  2,  3,  1])\r\ntensor([ 2,  4,  1,  0,  3])\r\ntensor([ 2,  3,  0,  1,  4])\r\nRETURN NONE\r\ntensor([ 0,  1,  4,  2,  3])\r\ntensor([ 0,  4,  2,  3,  1])\r\ntensor([ 0,  1,  4,  2,  3])\r\ntensor([ 0,  4,  2,  3,  1])\r\n```"}