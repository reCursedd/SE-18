{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/292432964", "html_url": "https://github.com/pytorch/pytorch/issues/1206#issuecomment-292432964", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/1206", "id": 292432964, "node_id": "MDEyOklzc3VlQ29tbWVudDI5MjQzMjk2NA==", "user": {"login": "nicklhy", "id": 1146226, "node_id": "MDQ6VXNlcjExNDYyMjY=", "avatar_url": "https://avatars0.githubusercontent.com/u/1146226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nicklhy", "html_url": "https://github.com/nicklhy", "followers_url": "https://api.github.com/users/nicklhy/followers", "following_url": "https://api.github.com/users/nicklhy/following{/other_user}", "gists_url": "https://api.github.com/users/nicklhy/gists{/gist_id}", "starred_url": "https://api.github.com/users/nicklhy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nicklhy/subscriptions", "organizations_url": "https://api.github.com/users/nicklhy/orgs", "repos_url": "https://api.github.com/users/nicklhy/repos", "events_url": "https://api.github.com/users/nicklhy/events{/privacy}", "received_events_url": "https://api.github.com/users/nicklhy/received_events", "type": "User", "site_admin": false}, "created_at": "2017-04-07T04:29:05Z", "updated_at": "2017-04-07T04:33:15Z", "author_association": "NONE", "body_html": "<p>BTW, I construct the network like</p>\n<pre><code>class CustomNet(torch.nn.Module):\n    def __init__(self, backbone):\n        super(CustomNet, self).__init__()\n        self.backbone = backbone\n        self.fc = torch.nn.Linear(2048, 100) # 100 classes\n        torch.nn.init.normal(self.fc.weight, 0, math.sqrt(2.0/(2048*100)))\n        torch.nn.init.constant(self.fc.bias, 0)\n\n    def forward(self, data):\n        x = self.backbone(data)\n        x = x.view((-1, 2048))\n        clf = self.fc(x)\n        return clf\n\nresnet152_params = torch.load('/path/to/resnet152.pth')\nresnet152 = torchvision.models.resnet152()\nresnet152.load_state_dict(resnet152_params)\n\nbackbone = torch.nn.Sequential(*list(resnet152.children())[:-1])\n\nnet = CustomNet(backbone)\n</code></pre>", "body_text": "BTW, I construct the network like\nclass CustomNet(torch.nn.Module):\n    def __init__(self, backbone):\n        super(CustomNet, self).__init__()\n        self.backbone = backbone\n        self.fc = torch.nn.Linear(2048, 100) # 100 classes\n        torch.nn.init.normal(self.fc.weight, 0, math.sqrt(2.0/(2048*100)))\n        torch.nn.init.constant(self.fc.bias, 0)\n\n    def forward(self, data):\n        x = self.backbone(data)\n        x = x.view((-1, 2048))\n        clf = self.fc(x)\n        return clf\n\nresnet152_params = torch.load('/path/to/resnet152.pth')\nresnet152 = torchvision.models.resnet152()\nresnet152.load_state_dict(resnet152_params)\n\nbackbone = torch.nn.Sequential(*list(resnet152.children())[:-1])\n\nnet = CustomNet(backbone)", "body": "BTW, I construct the network like\r\n```\r\nclass CustomNet(torch.nn.Module):\r\n    def __init__(self, backbone):\r\n        super(CustomNet, self).__init__()\r\n        self.backbone = backbone\r\n        self.fc = torch.nn.Linear(2048, 100) # 100 classes\r\n        torch.nn.init.normal(self.fc.weight, 0, math.sqrt(2.0/(2048*100)))\r\n        torch.nn.init.constant(self.fc.bias, 0)\r\n\r\n    def forward(self, data):\r\n        x = self.backbone(data)\r\n        x = x.view((-1, 2048))\r\n        clf = self.fc(x)\r\n        return clf\r\n\r\nresnet152_params = torch.load('/path/to/resnet152.pth')\r\nresnet152 = torchvision.models.resnet152()\r\nresnet152.load_state_dict(resnet152_params)\r\n\r\nbackbone = torch.nn.Sequential(*list(resnet152.children())[:-1])\r\n\r\nnet = CustomNet(backbone)\r\n```"}