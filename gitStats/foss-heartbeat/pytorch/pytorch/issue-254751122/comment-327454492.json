{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/327454492", "html_url": "https://github.com/pytorch/pytorch/issues/2596#issuecomment-327454492", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/2596", "id": 327454492, "node_id": "MDEyOklzc3VlQ29tbWVudDMyNzQ1NDQ5Mg==", "user": {"login": "alykhantejani", "id": 687194, "node_id": "MDQ6VXNlcjY4NzE5NA==", "avatar_url": "https://avatars1.githubusercontent.com/u/687194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alykhantejani", "html_url": "https://github.com/alykhantejani", "followers_url": "https://api.github.com/users/alykhantejani/followers", "following_url": "https://api.github.com/users/alykhantejani/following{/other_user}", "gists_url": "https://api.github.com/users/alykhantejani/gists{/gist_id}", "starred_url": "https://api.github.com/users/alykhantejani/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alykhantejani/subscriptions", "organizations_url": "https://api.github.com/users/alykhantejani/orgs", "repos_url": "https://api.github.com/users/alykhantejani/repos", "events_url": "https://api.github.com/users/alykhantejani/events{/privacy}", "received_events_url": "https://api.github.com/users/alykhantejani/received_events", "type": "User", "site_admin": false}, "created_at": "2017-09-06T11:25:42Z", "updated_at": "2017-09-06T11:28:35Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1310570\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/soumith\">@soumith</a> I <em>think</em> this should be quite simple to fix with some bash magic in the build script.</p>\n<p>The issue is that we (pytorch) run <code>patchelf</code> on <code>libTHS</code> etc. and then re-zip up the wheel, which makes the hashes for these files invalid.</p>\n<p>All we would need to do is edit the lines of the libraries we touch in <code>RECORD</code> with the new hash which can be generated by</p>\n<div class=\"highlight highlight-source-shell\"><pre>openssl dgst -sha256 -binary torch/lib/libTHNN.1.dylib <span class=\"pl-k\">|</span> openssl base64</pre></div>\n<p>However this still has trailing <code>=</code> signs (which the <a href=\"https://www.python.org/dev/peps/pep-0427/#the-dist-info-directory\" rel=\"nofollow\">PEP standard</a> says should be removed (again can be done quite easily).</p>", "body_text": "@soumith I think this should be quite simple to fix with some bash magic in the build script.\nThe issue is that we (pytorch) run patchelf on libTHS etc. and then re-zip up the wheel, which makes the hashes for these files invalid.\nAll we would need to do is edit the lines of the libraries we touch in RECORD with the new hash which can be generated by\nopenssl dgst -sha256 -binary torch/lib/libTHNN.1.dylib | openssl base64\nHowever this still has trailing = signs (which the PEP standard says should be removed (again can be done quite easily).", "body": "@soumith I *think* this should be quite simple to fix with some bash magic in the build script. \r\n\r\nThe issue is that we (pytorch) run `patchelf` on `libTHS` etc. and then re-zip up the wheel, which makes the hashes for these files invalid. \r\n\r\nAll we would need to do is edit the lines of the libraries we touch in `RECORD` with the new hash which can be generated by \r\n\r\n```bash\r\nopenssl dgst -sha256 -binary torch/lib/libTHNN.1.dylib | openssl base64\r\n```\r\nHowever this still has trailing `=` signs (which the [PEP standard](https://www.python.org/dev/peps/pep-0427/#the-dist-info-directory) says should be removed (again can be done quite easily). "}