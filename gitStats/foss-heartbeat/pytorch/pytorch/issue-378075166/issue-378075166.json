{"url": "https://api.github.com/repos/pytorch/pytorch/issues/13645", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/13645/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/13645/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/13645/events", "html_url": "https://github.com/pytorch/pytorch/pull/13645", "id": 378075166, "node_id": "MDExOlB1bGxSZXF1ZXN0MjI4ODY3NTM5", "number": 13645, "title": "Add flag for disallowing shape or storage change for tensor from .data or .detach()", "user": {"login": "yf225", "id": 4063635, "node_id": "MDQ6VXNlcjQwNjM2MzU=", "avatar_url": "https://avatars0.githubusercontent.com/u/4063635?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yf225", "html_url": "https://github.com/yf225", "followers_url": "https://api.github.com/users/yf225/followers", "following_url": "https://api.github.com/users/yf225/following{/other_user}", "gists_url": "https://api.github.com/users/yf225/gists{/gist_id}", "starred_url": "https://api.github.com/users/yf225/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yf225/subscriptions", "organizations_url": "https://api.github.com/users/yf225/orgs", "repos_url": "https://api.github.com/users/yf225/repos", "events_url": "https://api.github.com/users/yf225/events{/privacy}", "received_events_url": "https://api.github.com/users/yf225/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-11-06T23:16:23Z", "updated_at": "2018-11-23T15:54:38Z", "closed_at": "2018-11-13T18:28:09Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/13645", "html_url": "https://github.com/pytorch/pytorch/pull/13645", "diff_url": "https://github.com/pytorch/pytorch/pull/13645.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/13645.patch"}, "body_html": "<p>After autograd metadata are moved from <code>Variable::Impl</code> to TensorImpl (and <code>Variable::Impl</code> no longer wraps an <code>at::Tensor</code>), we have to shallow-copy the TensorImpl whenever user wants to create a <code>Variable</code> that shares the same storage data with another <code>Variable</code>.</p>\n<p>However, this has implications for Python call sites that do</p>\n<div class=\"highlight highlight-source-python\"><pre>tensor.data.in_place_operation_()</pre></div>\n<p>or</p>\n<div class=\"highlight highlight-source-python\"><pre>tensor_detached <span class=\"pl-k\">=</span> tensor.detach()\ntensor_detached.in_place_operation_()</pre></div>\n<p>If <code>in_place_operation_()</code> only updates the data inside the tensor (such as <code>zeros_()</code>), such operation will still work properly; if the in-place operation changes the size, stride or the storage pointer inside the TensorImpl (e.g. <code>resize_</code> / <code>resize_as_</code> / <code>set_</code> / <code>share_memory_</code>), such operation on <code>tensor.data</code> or <code>tensor_detached</code> will no longer update the <code>tensor</code>. We will address this inconsistency in the following ways:</p>\n<ol>\n<li>Add a flag to <code>Variable</code> to disallow size/stride/storage_ptr changes from in-place operations such as <code>resize_</code> / <code>resize_as_</code> / <code>set_</code> / <code>share_memory_</code>, and set this flag to true when people call <code>tensor.data</code> or <code>tensor.detach()</code> in Python.</li>\n<li>Write text in the docs to actively discourage changing the shape or storage of <code>tensor_detached</code> and expecting <code>tensor</code> to also be updated.</li>\n</ol>\n<p>This is the first PR mentioned in <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"378028003\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/13638\" data-hovercard-type=\"issue\" data-hovercard-url=\"/pytorch/pytorch/issues/13638/hovercard\" href=\"https://github.com/pytorch/pytorch/issues/13638\">#13638</a>.</p>", "body_text": "After autograd metadata are moved from Variable::Impl to TensorImpl (and Variable::Impl no longer wraps an at::Tensor), we have to shallow-copy the TensorImpl whenever user wants to create a Variable that shares the same storage data with another Variable.\nHowever, this has implications for Python call sites that do\ntensor.data.in_place_operation_()\nor\ntensor_detached = tensor.detach()\ntensor_detached.in_place_operation_()\nIf in_place_operation_() only updates the data inside the tensor (such as zeros_()), such operation will still work properly; if the in-place operation changes the size, stride or the storage pointer inside the TensorImpl (e.g. resize_ / resize_as_ / set_ / share_memory_), such operation on tensor.data or tensor_detached will no longer update the tensor. We will address this inconsistency in the following ways:\n\nAdd a flag to Variable to disallow size/stride/storage_ptr changes from in-place operations such as resize_ / resize_as_ / set_ / share_memory_, and set this flag to true when people call tensor.data or tensor.detach() in Python.\nWrite text in the docs to actively discourage changing the shape or storage of tensor_detached and expecting tensor to also be updated.\n\nThis is the first PR mentioned in #13638.", "body": "After autograd metadata are moved from `Variable::Impl` to TensorImpl (and `Variable::Impl` no longer wraps an `at::Tensor`), we have to shallow-copy the TensorImpl whenever user wants to create a `Variable` that shares the same storage data with another `Variable`.\r\n\r\nHowever, this has implications for Python call sites that do\r\n```python\r\ntensor.data.in_place_operation_()\r\n```\r\nor\r\n```python\r\ntensor_detached = tensor.detach()\r\ntensor_detached.in_place_operation_()\r\n```\r\nIf `in_place_operation_()` only updates the data inside the tensor (such as `zeros_()`), such operation will still work properly; if the in-place operation changes the size, stride or the storage pointer inside the TensorImpl (e.g. `resize_` / `resize_as_` / `set_` / `share_memory_`), such operation on `tensor.data` or `tensor_detached` will no longer update the `tensor`. We will address this inconsistency in the following ways:\r\n\r\n1. Add a flag to `Variable` to disallow size/stride/storage_ptr changes from in-place operations such as `resize_` / `resize_as_` / `set_` / `share_memory_`, and set this flag to true when people call `tensor.data` or `tensor.detach()` in Python.\r\n2. Write text in the docs to actively discourage changing the shape or storage of `tensor_detached` and expecting `tensor` to also be updated.\r\n\r\nThis is the first PR mentioned in https://github.com/pytorch/pytorch/issues/13638."}