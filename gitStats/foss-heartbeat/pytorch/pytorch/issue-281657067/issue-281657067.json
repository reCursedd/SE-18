{"url": "https://api.github.com/repos/pytorch/pytorch/issues/4145", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/4145/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/4145/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/4145/events", "html_url": "https://github.com/pytorch/pytorch/issues/4145", "id": 281657067, "node_id": "MDU6SXNzdWUyODE2NTcwNjc=", "number": 4145, "title": "[Proposal] Consistent `batch_first` effect for RNN modules", "user": {"login": "Stonesjtu", "id": 4556044, "node_id": "MDQ6VXNlcjQ1NTYwNDQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/4556044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Stonesjtu", "html_url": "https://github.com/Stonesjtu", "followers_url": "https://api.github.com/users/Stonesjtu/followers", "following_url": "https://api.github.com/users/Stonesjtu/following{/other_user}", "gists_url": "https://api.github.com/users/Stonesjtu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Stonesjtu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Stonesjtu/subscriptions", "organizations_url": "https://api.github.com/users/Stonesjtu/orgs", "repos_url": "https://api.github.com/users/Stonesjtu/repos", "events_url": "https://api.github.com/users/Stonesjtu/events{/privacy}", "received_events_url": "https://api.github.com/users/Stonesjtu/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-12-13T08:02:47Z", "updated_at": "2017-12-16T12:52:58Z", "closed_at": null, "author_association": "CONTRIBUTOR", "body_html": "<p>In current RNN (including <code>nn.RNN</code>, <code>nn.GRU</code>, <code>nn.LSTM</code>) implementation, the <code>batch_first</code> will only affect the dimension order of <strong>input</strong> and <strong>output</strong> variables. But there are also <strong>hidden states</strong> returned from RNN, and the <em>batch</em> dimension is always placed in the 2nd dimension regardless of the <code>batch_first</code> argument.<br>\nCould someone tell me the advantages of such odd behaviour? Or I can help to patch this.</p>", "body_text": "In current RNN (including nn.RNN, nn.GRU, nn.LSTM) implementation, the batch_first will only affect the dimension order of input and output variables. But there are also hidden states returned from RNN, and the batch dimension is always placed in the 2nd dimension regardless of the batch_first argument.\nCould someone tell me the advantages of such odd behaviour? Or I can help to patch this.", "body": "In current RNN (including `nn.RNN`, `nn.GRU`, `nn.LSTM`) implementation, the `batch_first` will only affect the dimension order of **input** and **output** variables. But there are also **hidden states** returned from RNN, and the *batch* dimension is always placed in the 2nd dimension regardless of the `batch_first` argument.\r\nCould someone tell me the advantages of such odd behaviour? Or I can help to patch this."}