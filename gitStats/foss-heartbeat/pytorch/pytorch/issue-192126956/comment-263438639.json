{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/263438639", "html_url": "https://github.com/pytorch/pytorch/issues/263#issuecomment-263438639", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/263", "id": 263438639, "node_id": "MDEyOklzc3VlQ29tbWVudDI2MzQzODYzOQ==", "user": {"login": "adamlerer", "id": 5702157, "node_id": "MDQ6VXNlcjU3MDIxNTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5702157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adamlerer", "html_url": "https://github.com/adamlerer", "followers_url": "https://api.github.com/users/adamlerer/followers", "following_url": "https://api.github.com/users/adamlerer/following{/other_user}", "gists_url": "https://api.github.com/users/adamlerer/gists{/gist_id}", "starred_url": "https://api.github.com/users/adamlerer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adamlerer/subscriptions", "organizations_url": "https://api.github.com/users/adamlerer/orgs", "repos_url": "https://api.github.com/users/adamlerer/repos", "events_url": "https://api.github.com/users/adamlerer/events{/privacy}", "received_events_url": "https://api.github.com/users/adamlerer/received_events", "type": "User", "site_admin": false}, "created_at": "2016-11-29T00:25:23Z", "updated_at": "2016-11-29T00:26:16Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=15841449\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ngimel\">@ngimel</a> PyTorch has a design principle that operations are \"stateless\" between minibatches; do you have an alternative suggestion within that constraint or are you suggesting we have to make RNN maintain state between minibatches?</p>\n<p>Re statistical properties, notice that each new seed is random. I would hope that this comment in the curand docs refers to correlated (e.g. consecutive) seeds and that sequences are not correlated for <em>random</em> seeds. If they are then there's a big problem :)</p>\n<p>Re determinism, <code>torch.IntTensor.random()</code> is deterministic as long as you set <code>torch.manualSeed</code> so I think the whole thing should therefore be deterministic.</p>\n<p>Perhaps a future version of cudnn could have a stateless interface for dropout state (or for rand in general) - IMO stateless RNGs are always superior (<a href=\"http://dl.acm.org/citation.cfm?id=2063405&amp;CFID=869907917&amp;CFTOKEN=15100223\" rel=\"nofollow\">http://dl.acm.org/citation.cfm?id=2063405&amp;CFID=869907917&amp;CFTOKEN=15100223</a>)</p>", "body_text": "@ngimel PyTorch has a design principle that operations are \"stateless\" between minibatches; do you have an alternative suggestion within that constraint or are you suggesting we have to make RNN maintain state between minibatches?\nRe statistical properties, notice that each new seed is random. I would hope that this comment in the curand docs refers to correlated (e.g. consecutive) seeds and that sequences are not correlated for random seeds. If they are then there's a big problem :)\nRe determinism, torch.IntTensor.random() is deterministic as long as you set torch.manualSeed so I think the whole thing should therefore be deterministic.\nPerhaps a future version of cudnn could have a stateless interface for dropout state (or for rand in general) - IMO stateless RNGs are always superior (http://dl.acm.org/citation.cfm?id=2063405&CFID=869907917&CFTOKEN=15100223)", "body": "@ngimel PyTorch has a design principle that operations are \"stateless\" between minibatches; do you have an alternative suggestion within that constraint or are you suggesting we have to make RNN maintain state between minibatches?\r\n\r\nRe statistical properties, notice that each new seed is random. I would hope that this comment in the curand docs refers to correlated (e.g. consecutive) seeds and that sequences are not correlated for *random* seeds. If they are then there's a big problem :)\r\n\r\nRe determinism, `torch.IntTensor.random()` is deterministic as long as you set `torch.manualSeed` so I think the whole thing should therefore be deterministic.\r\n\r\nPerhaps a future version of cudnn could have a stateless interface for dropout state (or for rand in general) - IMO stateless RNGs are always superior (http://dl.acm.org/citation.cfm?id=2063405&CFID=869907917&CFTOKEN=15100223)"}