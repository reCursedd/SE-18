{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/310929585", "html_url": "https://github.com/pytorch/pytorch/issues/1333#issuecomment-310929585", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/1333", "id": 310929585, "node_id": "MDEyOklzc3VlQ29tbWVudDMxMDkyOTU4NQ==", "user": {"login": "neverfox", "id": 3344033, "node_id": "MDQ6VXNlcjMzNDQwMzM=", "avatar_url": "https://avatars1.githubusercontent.com/u/3344033?v=4", "gravatar_id": "", "url": "https://api.github.com/users/neverfox", "html_url": "https://github.com/neverfox", "followers_url": "https://api.github.com/users/neverfox/followers", "following_url": "https://api.github.com/users/neverfox/following{/other_user}", "gists_url": "https://api.github.com/users/neverfox/gists{/gist_id}", "starred_url": "https://api.github.com/users/neverfox/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/neverfox/subscriptions", "organizations_url": "https://api.github.com/users/neverfox/orgs", "repos_url": "https://api.github.com/users/neverfox/repos", "events_url": "https://api.github.com/users/neverfox/events{/privacy}", "received_events_url": "https://api.github.com/users/neverfox/received_events", "type": "User", "site_admin": false}, "created_at": "2017-06-25T21:28:08Z", "updated_at": "2017-06-27T14:08:41Z", "author_association": "NONE", "body_html": "<p>Or you could generalize:</p>\n<pre><code>import torch.nn as nn\nimport torch.nn.functional as F\n\n\nclass CausalConv1d(nn.Conv1d):\n    def __init__(self,\n                 in_channels,\n                 out_channels,\n                 kernel_size,\n                 stride=1,\n                 dilation=1,\n                 groups=1,\n                 bias=True):\n        super(CausalConv1d, self).__init__(\n            in_channels,\n            out_channels,\n            kernel_size,\n            stride=stride,\n            padding=0,\n            dilation=dilation,\n            groups=groups,\n            bias=bias)\n\n        self.left_padding = dilation * (kernel_size - 1)\n\n    def forward(self, input):\n        x = F.pad(input.unsqueeze(2), (self.left_padding, 0, 0, 0)).squeeze(2)\n\n        return super(CausalConv1d, self).forward(x)\n</code></pre>", "body_text": "Or you could generalize:\nimport torch.nn as nn\nimport torch.nn.functional as F\n\n\nclass CausalConv1d(nn.Conv1d):\n    def __init__(self,\n                 in_channels,\n                 out_channels,\n                 kernel_size,\n                 stride=1,\n                 dilation=1,\n                 groups=1,\n                 bias=True):\n        super(CausalConv1d, self).__init__(\n            in_channels,\n            out_channels,\n            kernel_size,\n            stride=stride,\n            padding=0,\n            dilation=dilation,\n            groups=groups,\n            bias=bias)\n\n        self.left_padding = dilation * (kernel_size - 1)\n\n    def forward(self, input):\n        x = F.pad(input.unsqueeze(2), (self.left_padding, 0, 0, 0)).squeeze(2)\n\n        return super(CausalConv1d, self).forward(x)", "body": "Or you could generalize:\r\n\r\n```\r\nimport torch.nn as nn\r\nimport torch.nn.functional as F\r\n\r\n\r\nclass CausalConv1d(nn.Conv1d):\r\n    def __init__(self,\r\n                 in_channels,\r\n                 out_channels,\r\n                 kernel_size,\r\n                 stride=1,\r\n                 dilation=1,\r\n                 groups=1,\r\n                 bias=True):\r\n        super(CausalConv1d, self).__init__(\r\n            in_channels,\r\n            out_channels,\r\n            kernel_size,\r\n            stride=stride,\r\n            padding=0,\r\n            dilation=dilation,\r\n            groups=groups,\r\n            bias=bias)\r\n\r\n        self.left_padding = dilation * (kernel_size - 1)\r\n\r\n    def forward(self, input):\r\n        x = F.pad(input.unsqueeze(2), (self.left_padding, 0, 0, 0)).squeeze(2)\r\n\r\n        return super(CausalConv1d, self).forward(x)\r\n```"}