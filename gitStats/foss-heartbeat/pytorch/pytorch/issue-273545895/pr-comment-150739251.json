{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/150739251", "pull_request_review_id": 76331676, "id": 150739251, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MDczOTI1MQ==", "diff_hunk": "@@ -543,20 +547,28 @@ def native_translate_formals(argument, option):\n         result = [native_translate_formals(argument, option) for argument in result]\n         return result\n \n+    # this can return multiple return types in a list, e.g. ['Tensor', 'Tensor']\n     def native_get_return_types(option):\n         ret = option['return']\n         if ret['kind'] != 'type':\n             raise Exception(\"native functions only support \\'type\\' return\")\n \n-        # can't actually return a TensorList (since it's a reference object)\n-        actual_return_type = {'TensorList': 'std::vector<Tensor>'}.get(ret['type'], ret['type'])\n-        if actual_return_type == 'Tensor' and option['inplace']:\n-            # follow normal ATen convention of returning Tensor & for inplace functions.\n-            actual_return_type = 'Tensor &'\n-        return [{\n-            'type': actual_return_type,\n-            'dynamic_type': ret['type'],\n-        }]\n+        types = [x.strip() for x in ret['type'].split(',')]", "path": "aten/src/ATen/function_wrapper.py", "position": null, "original_position": 55, "commit_id": "63ed778c9072b62a38365a69636e3b78e29e031f", "original_commit_id": "9511912ef618c337bd4c129a722dcd83a3ddb306", "user": {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, "body": "Can we avoid parsing strings inside the code emitter? It is fine to parse stuff in native_parse.py files. For instance here I would expect if we needed multiple returns we would just universally have `option['returns']` here, and have native_parse.py produce a singleton list for most things and a multi-entry when needed. ", "created_at": "2017-11-14T05:12:35Z", "updated_at": "2018-11-23T15:36:28Z", "html_url": "https://github.com/pytorch/pytorch/pull/3672#discussion_r150739251", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/3672", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/150739251"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/3672#discussion_r150739251"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/3672"}}, "body_html": "<p>Can we avoid parsing strings inside the code emitter? It is fine to parse stuff in native_parse.py files. For instance here I would expect if we needed multiple returns we would just universally have <code>option['returns']</code> here, and have native_parse.py produce a singleton list for most things and a multi-entry when needed.</p>", "body_text": "Can we avoid parsing strings inside the code emitter? It is fine to parse stuff in native_parse.py files. For instance here I would expect if we needed multiple returns we would just universally have option['returns'] here, and have native_parse.py produce a singleton list for most things and a multi-entry when needed."}