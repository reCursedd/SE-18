{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/344301215", "html_url": "https://github.com/pytorch/pytorch/pull/3672#issuecomment-344301215", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/3672", "id": 344301215, "node_id": "MDEyOklzc3VlQ29tbWVudDM0NDMwMTIxNQ==", "user": {"login": "gchanan", "id": 3768583, "node_id": "MDQ6VXNlcjM3Njg1ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3768583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gchanan", "html_url": "https://github.com/gchanan", "followers_url": "https://api.github.com/users/gchanan/followers", "following_url": "https://api.github.com/users/gchanan/following{/other_user}", "gists_url": "https://api.github.com/users/gchanan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gchanan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gchanan/subscriptions", "organizations_url": "https://api.github.com/users/gchanan/orgs", "repos_url": "https://api.github.com/users/gchanan/repos", "events_url": "https://api.github.com/users/gchanan/events{/privacy}", "received_events_url": "https://api.github.com/users/gchanan/received_events", "type": "User", "site_admin": false}, "created_at": "2017-11-14T15:47:58Z", "updated_at": "2017-11-14T15:47:58Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=370202\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/zdevito\">@zdevito</a> I should have been clearer in the original commit message: this was always meant to be a temporary solution to get RoIPooling in and move us closer to the <code>ATen -&gt; C++</code> solution as you describe.  In particular, I think the ATen declarations in native_functions.yaml should look like the declarations in derivatives.yaml, e.g.:<br>\n<code>name: as_strided(Tensor self, IntList size, IntList stride, int64_t storage_offset)</code><br>\nbut with return types and minus python specific stuff like kw-only args.  i.e. assuming I don't need any python-specific handling, I should be able to copy-paste the native-function declaration from native_functions.yaml into derivatives.yaml and specify the derivative (maybe I have to get rid of the return type or we change derivatives.yaml to accept/check a return type if specified).  In addition to being copy-paste-able, this declaration style is much easier to read and less error prone to write.</p>\n<p>So, this PR changes the parser to basically parse this way; there are ~5-10 lines we can rip out for handling references, const references, std::tuples, std::vectors, but otherwise it should just work to point it at native_functions.yaml instead of NativeFunctions.h.</p>\n<p>Anyway, I'm happy if we want to wait until the whole yaml move is complete, I just felt this PR was big enough already.</p>", "body_text": "@zdevito I should have been clearer in the original commit message: this was always meant to be a temporary solution to get RoIPooling in and move us closer to the ATen -> C++ solution as you describe.  In particular, I think the ATen declarations in native_functions.yaml should look like the declarations in derivatives.yaml, e.g.:\nname: as_strided(Tensor self, IntList size, IntList stride, int64_t storage_offset)\nbut with return types and minus python specific stuff like kw-only args.  i.e. assuming I don't need any python-specific handling, I should be able to copy-paste the native-function declaration from native_functions.yaml into derivatives.yaml and specify the derivative (maybe I have to get rid of the return type or we change derivatives.yaml to accept/check a return type if specified).  In addition to being copy-paste-able, this declaration style is much easier to read and less error prone to write.\nSo, this PR changes the parser to basically parse this way; there are ~5-10 lines we can rip out for handling references, const references, std::tuples, std::vectors, but otherwise it should just work to point it at native_functions.yaml instead of NativeFunctions.h.\nAnyway, I'm happy if we want to wait until the whole yaml move is complete, I just felt this PR was big enough already.", "body": "@zdevito I should have been clearer in the original commit message: this was always meant to be a temporary solution to get RoIPooling in and move us closer to the `ATen -> C++` solution as you describe.  In particular, I think the ATen declarations in native_functions.yaml should look like the declarations in derivatives.yaml, e.g.:\r\n`name: as_strided(Tensor self, IntList size, IntList stride, int64_t storage_offset)`\r\nbut with return types and minus python specific stuff like kw-only args.  i.e. assuming I don't need any python-specific handling, I should be able to copy-paste the native-function declaration from native_functions.yaml into derivatives.yaml and specify the derivative (maybe I have to get rid of the return type or we change derivatives.yaml to accept/check a return type if specified).  In addition to being copy-paste-able, this declaration style is much easier to read and less error prone to write.\r\n\r\nSo, this PR changes the parser to basically parse this way; there are ~5-10 lines we can rip out for handling references, const references, std::tuples, std::vectors, but otherwise it should just work to point it at native_functions.yaml instead of NativeFunctions.h.\r\n\r\nAnyway, I'm happy if we want to wait until the whole yaml move is complete, I just felt this PR was big enough already."}