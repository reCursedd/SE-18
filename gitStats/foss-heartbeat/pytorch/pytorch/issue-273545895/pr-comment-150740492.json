{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/150740492", "pull_request_review_id": 76331676, "id": 150740492, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MDc0MDQ5Mg==", "diff_hunk": "@@ -596,14 +609,22 @@ def process_native(option, output_options):\n                             \"but specified for function {}\", option['name'])\n \n         def_level = option.get('type_method_definition_level')\n-        if def_level != 'base':\n-            raise Exception(\"\\'base\\' is currently the only supported type_method_definition_level \"\n-                            \"for native functions, got level {} for {}\", def_level, option['name'])\n+        if def_level != 'base' and def_level != 'backend':", "path": "aten/src/ATen/function_wrapper.py", "position": null, "original_position": 89, "commit_id": "63ed778c9072b62a38365a69636e3b78e29e031f", "original_commit_id": "9511912ef618c337bd4c129a722dcd83a3ddb306", "user": {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, "body": "This logic feels more complicated than it needs to be, particularly because there seems like there are too many degrees of freedom by having both type_method_definition_level and type_method_definition_dispatch.\r\n\r\nMaybe just use one field `dispatch`: \r\n\r\nDispatch happens at Type (current base)\r\n```\r\n- dispatch: at::native::myfunction\r\n```\r\n\r\nDispatch happens per backend:\r\n```\r\ndispatch:\r\n     CPU: at::native::my_func\r\n     CUDA: at::native::my_func_cuda\r\n```\r\nThis would avoid needing to explain type_method_definition_dispatch since we would no longer have it.", "created_at": "2017-11-14T05:27:01Z", "updated_at": "2018-11-23T15:36:28Z", "html_url": "https://github.com/pytorch/pytorch/pull/3672#discussion_r150740492", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/3672", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/150740492"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/3672#discussion_r150740492"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/3672"}}, "body_html": "<p>This logic feels more complicated than it needs to be, particularly because there seems like there are too many degrees of freedom by having both type_method_definition_level and type_method_definition_dispatch.</p>\n<p>Maybe just use one field <code>dispatch</code>:</p>\n<p>Dispatch happens at Type (current base)</p>\n<pre><code>- dispatch: at::native::myfunction\n</code></pre>\n<p>Dispatch happens per backend:</p>\n<pre><code>dispatch:\n     CPU: at::native::my_func\n     CUDA: at::native::my_func_cuda\n</code></pre>\n<p>This would avoid needing to explain type_method_definition_dispatch since we would no longer have it.</p>", "body_text": "This logic feels more complicated than it needs to be, particularly because there seems like there are too many degrees of freedom by having both type_method_definition_level and type_method_definition_dispatch.\nMaybe just use one field dispatch:\nDispatch happens at Type (current base)\n- dispatch: at::native::myfunction\n\nDispatch happens per backend:\ndispatch:\n     CPU: at::native::my_func\n     CUDA: at::native::my_func_cuda\n\nThis would avoid needing to explain type_method_definition_dispatch since we would no longer have it.", "in_reply_to_id": 150703806}