{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/223266954", "pull_request_review_id": 162350207, "id": 223266954, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyMzI2Njk1NA==", "diff_hunk": "@@ -2358,6 +2363,67 @@ def parse_kwargs(desc):\n     tensor([ 1.2252,  0.5002,  0.6248,  2.0139])\n \"\"\")\n \n+add_docstr(torch.matrix_diag,\n+           r\"\"\"\n+matrix_diag(input, offset=0, dim1=-2, dim2=-1) -> Tensor\n+\n+Creates a diagonal matrix from :attr:`input` by using the last\n+dimension as a diagonal dimension. By default, the new dimensions\n+are put at the end of the Tensor to facilitate creating batches of\n+diagonal matrices, but this can be specified using :attr:`dim1` and\n+:attr:`dim2`.\n+\n+The argument :attr:`offset` controls which diagonal to consider:\n+\n+- If :attr:`offset` = 0, it is the main diagonal.\n+- If :attr:`offset` > 0, it is above the main diagonal.\n+- If :attr:`offset` < 0, it is below the main diagonal.\n+\n+The size of the new matrix will be calculated to make the specified diagonal\n+of the size of the last input dimension.\n+Note that for :attr:`offset` other than :math:`0`, the order of :attr:`dim1`\n+and :attr:`dim2` matters, exchaning them is equivalent to changing the\n+sign of :attr:`offset`.\n+\n+Applying :meth:`torch.diagonal` to the output of this function with\n+the same arguments yields a matrix identical to input. However,\n+:meth:`torch.diagonal` has different default dimensions, so those\n+need to be explicitly specified.\n+\n+Args:\n+    input (Tensor): the input tensor. Must be at least 1-dimensional.\n+    offset (int, optional): which diagonal to consider. Default: 0\n+        (main diagonal).\n+    dim1 (int, optional): first dimension with respect to which to\n+        take diagonal. Default: -2.\n+    dim2 (int, optional): second dimension with respect to which to\n+        take diagonal. Default: -1.\n+\n+Example::\n+\n+    >>> x = torch.randn(2, 3)\n+    tensor([[[ 1.5410,  0.0000,  0.0000],", "path": "torch/_torch_docs.py", "position": null, "original_position": 55, "commit_id": "a2107a6a7d517fde96e88fa7bdffcd511f7f5f81", "original_commit_id": "00c484ec26ac43f063d6b5e0d5dc7f475e2d5b99", "user": {"login": "SsnL", "id": 5674597, "node_id": "MDQ6VXNlcjU2NzQ1OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5674597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SsnL", "html_url": "https://github.com/SsnL", "followers_url": "https://api.github.com/users/SsnL/followers", "following_url": "https://api.github.com/users/SsnL/following{/other_user}", "gists_url": "https://api.github.com/users/SsnL/gists{/gist_id}", "starred_url": "https://api.github.com/users/SsnL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SsnL/subscriptions", "organizations_url": "https://api.github.com/users/SsnL/orgs", "repos_url": "https://api.github.com/users/SsnL/repos", "events_url": "https://api.github.com/users/SsnL/events{/privacy}", "received_events_url": "https://api.github.com/users/SsnL/received_events", "type": "User", "site_admin": false}, "body": "hmm this example tensor doesn't look like that it is from randn.", "created_at": "2018-10-08T07:29:09Z", "updated_at": "2018-11-23T15:52:32Z", "html_url": "https://github.com/pytorch/pytorch/pull/12447#discussion_r223266954", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/12447", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/223266954"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/12447#discussion_r223266954"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/12447"}}, "body_html": "<p>hmm this example tensor doesn't look like that it is from randn.</p>", "body_text": "hmm this example tensor doesn't look like that it is from randn."}