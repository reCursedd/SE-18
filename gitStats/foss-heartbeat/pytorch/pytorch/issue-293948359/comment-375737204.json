{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/375737204", "html_url": "https://github.com/pytorch/pytorch/issues/5014#issuecomment-375737204", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/5014", "id": 375737204, "node_id": "MDEyOklzc3VlQ29tbWVudDM3NTczNzIwNA==", "user": {"login": "zou3519", "id": 5652049, "node_id": "MDQ6VXNlcjU2NTIwNDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/5652049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zou3519", "html_url": "https://github.com/zou3519", "followers_url": "https://api.github.com/users/zou3519/followers", "following_url": "https://api.github.com/users/zou3519/following{/other_user}", "gists_url": "https://api.github.com/users/zou3519/gists{/gist_id}", "starred_url": "https://api.github.com/users/zou3519/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zou3519/subscriptions", "organizations_url": "https://api.github.com/users/zou3519/orgs", "repos_url": "https://api.github.com/users/zou3519/repos", "events_url": "https://api.github.com/users/zou3519/events{/privacy}", "received_events_url": "https://api.github.com/users/zou3519/received_events", "type": "User", "site_admin": false}, "created_at": "2018-03-23T17:13:11Z", "updated_at": "2018-03-23T17:13:11Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Carrying on from the discussion on <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"306647253\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/5889\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/pytorch/pytorch/pull/5889/hovercard\" href=\"https://github.com/pytorch/pytorch/pull/5889\">#5889</a>, this feature would be helpful to have for <code>torch.cat</code>. Right now its behavior is the following:</p>\n<ol>\n<li>torch.cat([empty, tensor]) ignores empty tensors (where an empty tensor is defined as a tensor of size <code>(0,)</code>)</li>\n<li>torch.cat([tensor, empty]) ignores empty tensors</li>\n<li>torch.cat([empty, empty, ..., empty]) should be empty</li>\n</ol>\n<p>However, this behavior is different from numpy's <code>concatenate</code> function.<br>\nTo match np behavior, one of the invariants for <code>torch.cat</code> should be that all tensors being concatenated should have the same size in all dimensions except the specified cat dimension. When we have empty tensors with arbitrary shapes, they should also follow this invariant:</p>\n<ul>\n<li><code>torch.cat([tensor of size (1, 0, 4), tensor of size (1, n, 4)])</code> should work</li>\n<li><code>torch.cat([tensor of size (0,), tensor of size (1, 2)])</code> should fail.</li>\n</ul>", "body_text": "Carrying on from the discussion on #5889, this feature would be helpful to have for torch.cat. Right now its behavior is the following:\n\ntorch.cat([empty, tensor]) ignores empty tensors (where an empty tensor is defined as a tensor of size (0,))\ntorch.cat([tensor, empty]) ignores empty tensors\ntorch.cat([empty, empty, ..., empty]) should be empty\n\nHowever, this behavior is different from numpy's concatenate function.\nTo match np behavior, one of the invariants for torch.cat should be that all tensors being concatenated should have the same size in all dimensions except the specified cat dimension. When we have empty tensors with arbitrary shapes, they should also follow this invariant:\n\ntorch.cat([tensor of size (1, 0, 4), tensor of size (1, n, 4)]) should work\ntorch.cat([tensor of size (0,), tensor of size (1, 2)]) should fail.", "body": "Carrying on from the discussion on #5889, this feature would be helpful to have for `torch.cat`. Right now its behavior is the following:\r\n1) torch.cat([empty, tensor]) ignores empty tensors (where an empty tensor is defined as a tensor of size `(0,)`)\r\n2) torch.cat([tensor, empty]) ignores empty tensors\r\n3) torch.cat([empty, empty, ..., empty]) should be empty\r\n\r\nHowever, this behavior is different from numpy's `concatenate` function.\r\nTo match np behavior, one of the invariants for `torch.cat` should be that all tensors being concatenated should have the same size in all dimensions except the specified cat dimension. When we have empty tensors with arbitrary shapes, they should also follow this invariant:\r\n- `torch.cat([tensor of size (1, 0, 4), tensor of size (1, n, 4)])` should work\r\n- `torch.cat([tensor of size (0,), tensor of size (1, 2)])` should fail.\r\n\r\n"}