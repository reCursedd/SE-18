{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/367129753", "html_url": "https://github.com/pytorch/pytorch/issues/5014#issuecomment-367129753", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/5014", "id": 367129753, "node_id": "MDEyOklzc3VlQ29tbWVudDM2NzEyOTc1Mw==", "user": {"login": "fmassa", "id": 9110200, "node_id": "MDQ6VXNlcjkxMTAyMDA=", "avatar_url": "https://avatars2.githubusercontent.com/u/9110200?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fmassa", "html_url": "https://github.com/fmassa", "followers_url": "https://api.github.com/users/fmassa/followers", "following_url": "https://api.github.com/users/fmassa/following{/other_user}", "gists_url": "https://api.github.com/users/fmassa/gists{/gist_id}", "starred_url": "https://api.github.com/users/fmassa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fmassa/subscriptions", "organizations_url": "https://api.github.com/users/fmassa/orgs", "repos_url": "https://api.github.com/users/fmassa/repos", "events_url": "https://api.github.com/users/fmassa/events{/privacy}", "received_events_url": "https://api.github.com/users/fmassa/received_events", "type": "User", "site_admin": false}, "created_at": "2018-02-20T21:41:27Z", "updated_at": "2018-02-20T21:41:27Z", "author_association": "MEMBER", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1310570\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/soumith\">@soumith</a> this is not actually entirely addressed.<br>\nWe do support scalars, but not tensors / variables having zero in their dimension.<br>\nFor example</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-c1\">print</span>(np.zeros((<span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">4</span>))\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> array([], shape=(0, 4), dtype=float64)</span>\n<span class=\"pl-c1\">print</span>(torch.zeros(<span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">4</span>))\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> [torch.FloatTensor with no dimension]</span></pre></div>\n<p>This actually makes a difference in many cases. Up until recently, concatenation with tensors with no dimensions was an error (but now is specially handled).</p>\n<p>I've faced other cases that pytorch code doesn't work but numpy does.<br>\nThe following works in numpy, but fails in pytorch:</p>\n<div class=\"highlight highlight-source-python\"><pre>a <span class=\"pl-k\">=</span> np.random.rand(<span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">4</span>)\n<span class=\"pl-c1\">print</span>([b.shape[<span class=\"pl-c1\">0</span>] <span class=\"pl-k\">for</span> b <span class=\"pl-k\">in</span> a])\n\na[:, <span class=\"pl-c1\">2</span>:] <span class=\"pl-k\">+=</span> a[:, :<span class=\"pl-c1\">2</span>]\n<span class=\"pl-c1\">print</span>(a[:, <span class=\"pl-c1\">2</span>])</pre></div>", "body_text": "@soumith this is not actually entirely addressed.\nWe do support scalars, but not tensors / variables having zero in their dimension.\nFor example\nprint(np.zeros((0, 4))\n# array([], shape=(0, 4), dtype=float64)\nprint(torch.zeros(0, 4))\n# [torch.FloatTensor with no dimension]\nThis actually makes a difference in many cases. Up until recently, concatenation with tensors with no dimensions was an error (but now is specially handled).\nI've faced other cases that pytorch code doesn't work but numpy does.\nThe following works in numpy, but fails in pytorch:\na = np.random.rand(0, 4)\nprint([b.shape[0] for b in a])\n\na[:, 2:] += a[:, :2]\nprint(a[:, 2])", "body": "@soumith this is not actually entirely addressed.\r\nWe do support scalars, but not tensors / variables having zero in their dimension.\r\nFor example\r\n```python\r\nprint(np.zeros((0, 4))\r\n# array([], shape=(0, 4), dtype=float64)\r\nprint(torch.zeros(0, 4))\r\n# [torch.FloatTensor with no dimension]\r\n```\r\n\r\nThis actually makes a difference in many cases. Up until recently, concatenation with tensors with no dimensions was an error (but now is specially handled).\r\n\r\nI've faced other cases that pytorch code doesn't work but numpy does.\r\nThe following works in numpy, but fails in pytorch:\r\n```python\r\na = np.random.rand(0, 4)\r\nprint([b.shape[0] for b in a])\r\n\r\na[:, 2:] += a[:, :2]\r\nprint(a[:, 2])\r\n```"}