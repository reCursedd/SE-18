{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/226418656", "pull_request_review_id": 166232926, "id": 226418656, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNjQxODY1Ng==", "diff_hunk": "@@ -332,14 +335,16 @@ __global__ void batch_norm_backward_kernel(\n \n // TensorAccessor in which the last dimensions are collapsed or expanded as needed\n template <typename scalar_t, int64_t dim>\n-static PackedTensorAccessor<scalar_t, dim> reshaped_packed_accessor(const Tensor& t) {\n+static PackedTensorAccessor<scalar_t, dim> reshaped_packed_accessor(const Tensor& t, bool forward) {\n+  constexpr int too_small_feature_set = 16;  // this is the maximum feature dimension when we swap\n+  constexpr int few_planes = 256;\n   // undefined...\n   if (! t.defined()) {\n     const std::vector<int64_t> zeros(dim);\n     return PackedTensorAccessor<scalar_t, dim>(nullptr, zeros.data(), zeros.data());\n   }\n   int64_t in_dim = t.dim();\n-  if (in_dim == dim) {\n+  if (in_dim == dim && (dim < 3 || (t.size(0) < t.size(2)) || (t.size(2) >= too_small_feature_set))) { // easy, if we don't need the evil trick\n     return t.packed_accessor<scalar_t, dim>();\n   }\n ", "path": "aten/src/ATen/native/cuda/Normalization.cu", "position": null, "original_position": 41, "commit_id": "0d7aac942b890f4b345f3511c14ab41fede97741", "original_commit_id": "7d368ec1f9900bc141553f9e389cd0dc92acf142", "user": {"login": "SsnL", "id": 5674597, "node_id": "MDQ6VXNlcjU2NzQ1OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5674597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SsnL", "html_url": "https://github.com/SsnL", "followers_url": "https://api.github.com/users/SsnL/followers", "following_url": "https://api.github.com/users/SsnL/following{/other_user}", "gists_url": "https://api.github.com/users/SsnL/gists{/gist_id}", "starred_url": "https://api.github.com/users/SsnL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SsnL/subscriptions", "organizations_url": "https://api.github.com/users/SsnL/orgs", "repos_url": "https://api.github.com/users/SsnL/repos", "events_url": "https://api.github.com/users/SsnL/events{/privacy}", "received_events_url": "https://api.github.com/users/SsnL/received_events", "type": "User", "site_admin": false}, "body": "I would like to see some benchmark results on noncontig tensors, if this will be changed.", "created_at": "2018-10-18T18:32:41Z", "updated_at": "2018-11-23T15:53:13Z", "html_url": "https://github.com/pytorch/pytorch/pull/12368#discussion_r226418656", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/12368", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/226418656"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/12368#discussion_r226418656"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/12368"}}, "body_html": "<p>I would like to see some benchmark results on noncontig tensors, if this will be changed.</p>", "body_text": "I would like to see some benchmark results on noncontig tensors, if this will be changed.", "in_reply_to_id": 226415612}