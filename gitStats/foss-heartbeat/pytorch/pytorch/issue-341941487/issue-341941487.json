{"url": "https://api.github.com/repos/pytorch/pytorch/issues/9493", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/9493/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/9493/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/9493/events", "html_url": "https://github.com/pytorch/pytorch/issues/9493", "id": 341941487, "node_id": "MDU6SXNzdWUzNDE5NDE0ODc=", "number": 9493, "title": "tools/setup_helpers/generate_code.py imports torch build products", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": {"login": "anderspapitto", "id": 1388690, "node_id": "MDQ6VXNlcjEzODg2OTA=", "avatar_url": "https://avatars3.githubusercontent.com/u/1388690?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anderspapitto", "html_url": "https://github.com/anderspapitto", "followers_url": "https://api.github.com/users/anderspapitto/followers", "following_url": "https://api.github.com/users/anderspapitto/following{/other_user}", "gists_url": "https://api.github.com/users/anderspapitto/gists{/gist_id}", "starred_url": "https://api.github.com/users/anderspapitto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anderspapitto/subscriptions", "organizations_url": "https://api.github.com/users/anderspapitto/orgs", "repos_url": "https://api.github.com/users/anderspapitto/repos", "events_url": "https://api.github.com/users/anderspapitto/events{/privacy}", "received_events_url": "https://api.github.com/users/anderspapitto/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "anderspapitto", "id": 1388690, "node_id": "MDQ6VXNlcjEzODg2OTA=", "avatar_url": "https://avatars3.githubusercontent.com/u/1388690?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anderspapitto", "html_url": "https://github.com/anderspapitto", "followers_url": "https://api.github.com/users/anderspapitto/followers", "following_url": "https://api.github.com/users/anderspapitto/following{/other_user}", "gists_url": "https://api.github.com/users/anderspapitto/gists{/gist_id}", "starred_url": "https://api.github.com/users/anderspapitto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anderspapitto/subscriptions", "organizations_url": "https://api.github.com/users/anderspapitto/orgs", "repos_url": "https://api.github.com/users/anderspapitto/repos", "events_url": "https://api.github.com/users/anderspapitto/events{/privacy}", "received_events_url": "https://api.github.com/users/anderspapitto/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 0, "created_at": "2018-07-17T14:21:47Z", "updated_at": "2018-07-17T14:21:47Z", "closed_at": null, "author_association": "CONTRIBUTOR", "body_html": "<p>Steps to reproduce:</p>\n<ol>\n<li>Take master and build it</li>\n<li>Apply this patch</li>\n</ol>\n<pre><code>diff --git a/aten/src/TH/THTensor.cpp b/aten/src/TH/THTensor.cpp\nindex b2815ca48..394f69ac3 100644\n--- a/aten/src/TH/THTensor.cpp\n+++ b/aten/src/TH/THTensor.cpp\n@@ -43,17 +43,14 @@ void THTensor_free(THTensor *self)\n   if(!self)\n     return;\n \n-  if(self-&gt;flag &amp; TH_TENSOR_REFCOUNTED)\n+  if(--self-&gt;refcount == 0)\n   {\n-    if(--self-&gt;refcount == 0)\n-    {\n-      THFree(self-&gt;size);\n-      THFree(self-&gt;stride);\n-      if(self-&gt;storage)\n-        THStorage_free(self-&gt;storage);\n-      self-&gt;refcount.~atomic&lt;int&gt;();\n-      THFree(self);\n-    }\n+    THFree(self-&gt;size);\n+    THFree(self-&gt;stride);\n+    if(self-&gt;storage)\n+      THStorage_free(self-&gt;storage);\n+    self-&gt;refcount.~atomic&lt;int&gt;();\n+    THFree(self);\n   }\n }\n \ndiff --git a/aten/src/TH/THTensor.hpp b/aten/src/TH/THTensor.hpp\nindex 71236afa4..9644de624 100644\n--- a/aten/src/TH/THTensor.hpp\n+++ b/aten/src/TH/THTensor.hpp\n@@ -21,8 +21,6 @@ typedef struct THTensor\n     ptrdiff_t storageOffset;\n     std::atomic&lt;int&gt; refcount;\n \n-    char flag;\n-\n     template &lt;typename T&gt;\n     inline T * data() const {\n       return storage-&gt;data&lt;T&gt;() + storageOffset;\ndiff --git a/aten/src/TH/generic/THTensor.cpp b/aten/src/TH/generic/THTensor.cpp\nindex d03c7294f..7726aac0c 100644\n--- a/aten/src/TH/generic/THTensor.cpp\n+++ b/aten/src/TH/generic/THTensor.cpp\n@@ -61,16 +61,6 @@ real *THTensor_(data)(const THTensor *self)\n     return NULL;\n }\n \n-void THTensor_(setFlag)(THTensor *self, const char flag)\n-{\n-  self-&gt;flag |= flag;\n-}\n-\n-void THTensor_(clearFlag)(THTensor *self, const char flag)\n-{\n-  self-&gt;flag &amp;= ~flag;\n-}\n-\n /**** creation methods ****/\n \n static void THTensor_(rawInit)(THTensor *self);\n@@ -697,8 +687,7 @@ ptrdiff_t THTensor_(nElement)(const THTensor *self)\n \n void THTensor_(retain)(THTensor *self)\n {\n-  if(self-&gt;flag &amp; TH_TENSOR_REFCOUNTED)\n-    ++self-&gt;refcount;\n+  ++self-&gt;refcount;\n }\n \n void THTensor_(free)(THTensor *self)\n@@ -726,7 +715,6 @@ static void THTensor_(rawInit)(THTensor *self)\n   self-&gt;size[0] = 0;\n   self-&gt;stride[0] = 1;\n   self-&gt;dim_ = 1;\n-  self-&gt;flag = TH_TENSOR_REFCOUNTED;\n }\n \n void THTensor_(setStorageNd)(THTensor *self, THStorage *storage, ptrdiff_t storageOffset, int nDimension, int64_t *size, int64_t *stride)\ndiff --git a/aten/src/TH/generic/THTensor.h b/aten/src/TH/generic/THTensor.h\nindex 03cc01696..32b0c865d 100644\n--- a/aten/src/TH/generic/THTensor.h\n+++ b/aten/src/TH/generic/THTensor.h\n@@ -4,8 +4,6 @@\n \n /* a la lua? dim, storageoffset, ...  et les methodes ? */\n \n-#define TH_TENSOR_REFCOUNTED 1\n-\n // Struct definition moved to THTensor.hpp\n typedef struct THTensor THTensor;\n \n@@ -33,9 +31,6 @@ TH_API THLongStorage *THTensor_(newSizeOf)(THTensor *self);\n TH_API THLongStorage *THTensor_(newStrideOf)(THTensor *self);\n TH_API real *THTensor_(data)(const THTensor *self);\n \n-TH_API void THTensor_(setFlag)(THTensor *self, const char flag);\n-TH_API void THTensor_(clearFlag)(THTensor *self, const char flag);\n-\n \n /**** creation methods ****/\n TH_API THTensor *THTensor_(new)(void);\n</code></pre>\n<ol start=\"3\">\n<li>Rebuild it</li>\n</ol>\n<p>Build will fail on:</p>\n<pre><code>/home/ezyang/Dev/pytorch-tmp-env/bin/python tools/setup_helpers/generate_code.py\nSegmentation fault (core dumped)\n</code></pre>\n<p>(though, cmake won't report the segmentation fault, it'll just say <code>generate_code.py</code> failed).</p>\n<p>Cleaning solves the problem, so probably <code>generate_code.py</code> is pulling in a torch module.</p>\n<p>This is similar to <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"332800635\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/8553\" data-hovercard-type=\"issue\" data-hovercard-url=\"/pytorch/pytorch/issues/8553/hovercard\" href=\"https://github.com/pytorch/pytorch/issues/8553\">#8553</a></p>", "body_text": "Steps to reproduce:\n\nTake master and build it\nApply this patch\n\ndiff --git a/aten/src/TH/THTensor.cpp b/aten/src/TH/THTensor.cpp\nindex b2815ca48..394f69ac3 100644\n--- a/aten/src/TH/THTensor.cpp\n+++ b/aten/src/TH/THTensor.cpp\n@@ -43,17 +43,14 @@ void THTensor_free(THTensor *self)\n   if(!self)\n     return;\n \n-  if(self->flag & TH_TENSOR_REFCOUNTED)\n+  if(--self->refcount == 0)\n   {\n-    if(--self->refcount == 0)\n-    {\n-      THFree(self->size);\n-      THFree(self->stride);\n-      if(self->storage)\n-        THStorage_free(self->storage);\n-      self->refcount.~atomic<int>();\n-      THFree(self);\n-    }\n+    THFree(self->size);\n+    THFree(self->stride);\n+    if(self->storage)\n+      THStorage_free(self->storage);\n+    self->refcount.~atomic<int>();\n+    THFree(self);\n   }\n }\n \ndiff --git a/aten/src/TH/THTensor.hpp b/aten/src/TH/THTensor.hpp\nindex 71236afa4..9644de624 100644\n--- a/aten/src/TH/THTensor.hpp\n+++ b/aten/src/TH/THTensor.hpp\n@@ -21,8 +21,6 @@ typedef struct THTensor\n     ptrdiff_t storageOffset;\n     std::atomic<int> refcount;\n \n-    char flag;\n-\n     template <typename T>\n     inline T * data() const {\n       return storage->data<T>() + storageOffset;\ndiff --git a/aten/src/TH/generic/THTensor.cpp b/aten/src/TH/generic/THTensor.cpp\nindex d03c7294f..7726aac0c 100644\n--- a/aten/src/TH/generic/THTensor.cpp\n+++ b/aten/src/TH/generic/THTensor.cpp\n@@ -61,16 +61,6 @@ real *THTensor_(data)(const THTensor *self)\n     return NULL;\n }\n \n-void THTensor_(setFlag)(THTensor *self, const char flag)\n-{\n-  self->flag |= flag;\n-}\n-\n-void THTensor_(clearFlag)(THTensor *self, const char flag)\n-{\n-  self->flag &= ~flag;\n-}\n-\n /**** creation methods ****/\n \n static void THTensor_(rawInit)(THTensor *self);\n@@ -697,8 +687,7 @@ ptrdiff_t THTensor_(nElement)(const THTensor *self)\n \n void THTensor_(retain)(THTensor *self)\n {\n-  if(self->flag & TH_TENSOR_REFCOUNTED)\n-    ++self->refcount;\n+  ++self->refcount;\n }\n \n void THTensor_(free)(THTensor *self)\n@@ -726,7 +715,6 @@ static void THTensor_(rawInit)(THTensor *self)\n   self->size[0] = 0;\n   self->stride[0] = 1;\n   self->dim_ = 1;\n-  self->flag = TH_TENSOR_REFCOUNTED;\n }\n \n void THTensor_(setStorageNd)(THTensor *self, THStorage *storage, ptrdiff_t storageOffset, int nDimension, int64_t *size, int64_t *stride)\ndiff --git a/aten/src/TH/generic/THTensor.h b/aten/src/TH/generic/THTensor.h\nindex 03cc01696..32b0c865d 100644\n--- a/aten/src/TH/generic/THTensor.h\n+++ b/aten/src/TH/generic/THTensor.h\n@@ -4,8 +4,6 @@\n \n /* a la lua? dim, storageoffset, ...  et les methodes ? */\n \n-#define TH_TENSOR_REFCOUNTED 1\n-\n // Struct definition moved to THTensor.hpp\n typedef struct THTensor THTensor;\n \n@@ -33,9 +31,6 @@ TH_API THLongStorage *THTensor_(newSizeOf)(THTensor *self);\n TH_API THLongStorage *THTensor_(newStrideOf)(THTensor *self);\n TH_API real *THTensor_(data)(const THTensor *self);\n \n-TH_API void THTensor_(setFlag)(THTensor *self, const char flag);\n-TH_API void THTensor_(clearFlag)(THTensor *self, const char flag);\n-\n \n /**** creation methods ****/\n TH_API THTensor *THTensor_(new)(void);\n\n\nRebuild it\n\nBuild will fail on:\n/home/ezyang/Dev/pytorch-tmp-env/bin/python tools/setup_helpers/generate_code.py\nSegmentation fault (core dumped)\n\n(though, cmake won't report the segmentation fault, it'll just say generate_code.py failed).\nCleaning solves the problem, so probably generate_code.py is pulling in a torch module.\nThis is similar to #8553", "body": "Steps to reproduce:\r\n1. Take master and build it\r\n2. Apply this patch\r\n\r\n```\r\ndiff --git a/aten/src/TH/THTensor.cpp b/aten/src/TH/THTensor.cpp\r\nindex b2815ca48..394f69ac3 100644\r\n--- a/aten/src/TH/THTensor.cpp\r\n+++ b/aten/src/TH/THTensor.cpp\r\n@@ -43,17 +43,14 @@ void THTensor_free(THTensor *self)\r\n   if(!self)\r\n     return;\r\n \r\n-  if(self->flag & TH_TENSOR_REFCOUNTED)\r\n+  if(--self->refcount == 0)\r\n   {\r\n-    if(--self->refcount == 0)\r\n-    {\r\n-      THFree(self->size);\r\n-      THFree(self->stride);\r\n-      if(self->storage)\r\n-        THStorage_free(self->storage);\r\n-      self->refcount.~atomic<int>();\r\n-      THFree(self);\r\n-    }\r\n+    THFree(self->size);\r\n+    THFree(self->stride);\r\n+    if(self->storage)\r\n+      THStorage_free(self->storage);\r\n+    self->refcount.~atomic<int>();\r\n+    THFree(self);\r\n   }\r\n }\r\n \r\ndiff --git a/aten/src/TH/THTensor.hpp b/aten/src/TH/THTensor.hpp\r\nindex 71236afa4..9644de624 100644\r\n--- a/aten/src/TH/THTensor.hpp\r\n+++ b/aten/src/TH/THTensor.hpp\r\n@@ -21,8 +21,6 @@ typedef struct THTensor\r\n     ptrdiff_t storageOffset;\r\n     std::atomic<int> refcount;\r\n \r\n-    char flag;\r\n-\r\n     template <typename T>\r\n     inline T * data() const {\r\n       return storage->data<T>() + storageOffset;\r\ndiff --git a/aten/src/TH/generic/THTensor.cpp b/aten/src/TH/generic/THTensor.cpp\r\nindex d03c7294f..7726aac0c 100644\r\n--- a/aten/src/TH/generic/THTensor.cpp\r\n+++ b/aten/src/TH/generic/THTensor.cpp\r\n@@ -61,16 +61,6 @@ real *THTensor_(data)(const THTensor *self)\r\n     return NULL;\r\n }\r\n \r\n-void THTensor_(setFlag)(THTensor *self, const char flag)\r\n-{\r\n-  self->flag |= flag;\r\n-}\r\n-\r\n-void THTensor_(clearFlag)(THTensor *self, const char flag)\r\n-{\r\n-  self->flag &= ~flag;\r\n-}\r\n-\r\n /**** creation methods ****/\r\n \r\n static void THTensor_(rawInit)(THTensor *self);\r\n@@ -697,8 +687,7 @@ ptrdiff_t THTensor_(nElement)(const THTensor *self)\r\n \r\n void THTensor_(retain)(THTensor *self)\r\n {\r\n-  if(self->flag & TH_TENSOR_REFCOUNTED)\r\n-    ++self->refcount;\r\n+  ++self->refcount;\r\n }\r\n \r\n void THTensor_(free)(THTensor *self)\r\n@@ -726,7 +715,6 @@ static void THTensor_(rawInit)(THTensor *self)\r\n   self->size[0] = 0;\r\n   self->stride[0] = 1;\r\n   self->dim_ = 1;\r\n-  self->flag = TH_TENSOR_REFCOUNTED;\r\n }\r\n \r\n void THTensor_(setStorageNd)(THTensor *self, THStorage *storage, ptrdiff_t storageOffset, int nDimension, int64_t *size, int64_t *stride)\r\ndiff --git a/aten/src/TH/generic/THTensor.h b/aten/src/TH/generic/THTensor.h\r\nindex 03cc01696..32b0c865d 100644\r\n--- a/aten/src/TH/generic/THTensor.h\r\n+++ b/aten/src/TH/generic/THTensor.h\r\n@@ -4,8 +4,6 @@\r\n \r\n /* a la lua? dim, storageoffset, ...  et les methodes ? */\r\n \r\n-#define TH_TENSOR_REFCOUNTED 1\r\n-\r\n // Struct definition moved to THTensor.hpp\r\n typedef struct THTensor THTensor;\r\n \r\n@@ -33,9 +31,6 @@ TH_API THLongStorage *THTensor_(newSizeOf)(THTensor *self);\r\n TH_API THLongStorage *THTensor_(newStrideOf)(THTensor *self);\r\n TH_API real *THTensor_(data)(const THTensor *self);\r\n \r\n-TH_API void THTensor_(setFlag)(THTensor *self, const char flag);\r\n-TH_API void THTensor_(clearFlag)(THTensor *self, const char flag);\r\n-\r\n \r\n /**** creation methods ****/\r\n TH_API THTensor *THTensor_(new)(void);\r\n```\r\n3. Rebuild it\r\n\r\nBuild will fail on:\r\n\r\n```\r\n/home/ezyang/Dev/pytorch-tmp-env/bin/python tools/setup_helpers/generate_code.py\r\nSegmentation fault (core dumped)\r\n```\r\n\r\n(though, cmake won't report the segmentation fault, it'll just say `generate_code.py` failed).\r\n\r\nCleaning solves the problem, so probably `generate_code.py` is pulling in a torch module.\r\n\r\nThis is similar to #8553"}