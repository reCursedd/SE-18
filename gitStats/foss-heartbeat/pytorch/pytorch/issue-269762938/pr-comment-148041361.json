{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/148041361", "pull_request_review_id": 73220397, "id": 148041361, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0ODA0MTM2MQ==", "diff_hunk": "@@ -114,4 +120,44 @@ auto Chunk::apply(const variable_list& inputs) -> variable_list {\n   });\n }\n \n+CopySlices::CopySlices(const Variable& base_var, TensorGeometry view, std::shared_ptr<Function> fn_)\n+  : base(base_var)\n+  , view(std::move(view))\n+  , fn(std::move(fn_))\n+{\n+  is_executable = true;\n+  num_inputs = 1;\n+\n+  // Take the next_functions of fn as our own, except for index 0 which goes\n+  // to base instead of the view.\n+  next_functions.resize(fn->next_functions.size());\n+  next_functions[0] = std::make_pair(base_var.grad_fn(), base_var.output_nr());\n+  fn->next_functions[0] = next_functions[0];\n+  for (size_t i = 1; i < next_functions.size(); i++) {\n+    next_functions[i] = fn->next_functions[i];\n+  }\n+}\n+\n+auto CopySlices::apply(const variable_list& inputs) -> variable_list {\n+  check_input_variables(\"CopySlices\", inputs, 1);\n+  auto& grad = inputs[0];\n+\n+  auto result = grad.type().tensor(base.sizes, base.strides);\n+  result.copy_(grad);\n+\n+  variable_list grad_inputs(next_functions.size());\n+  grad_inputs[0] = result;\n+\n+  auto offset = view.storage_offset - base.storage_offset;\n+  auto grad_slice = result.as_strided(view.sizes, view.strides, offset);\n+  auto res = (*fn)({ grad_slice.clone() });", "path": "torch/csrc/autograd/functions/tensor.cpp", "position": null, "original_position": 47, "commit_id": "0faf2a8e86a5f3cc32aaf8640120aca134c10961", "original_commit_id": "924908320c84b00c09fdf3d94ac0291e8a513331", "user": {"login": "colesbury", "id": 655866, "node_id": "MDQ6VXNlcjY1NTg2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/655866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colesbury", "html_url": "https://github.com/colesbury", "followers_url": "https://api.github.com/users/colesbury/followers", "following_url": "https://api.github.com/users/colesbury/following{/other_user}", "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions", "organizations_url": "https://api.github.com/users/colesbury/orgs", "repos_url": "https://api.github.com/users/colesbury/repos", "events_url": "https://api.github.com/users/colesbury/events{/privacy}", "received_events_url": "https://api.github.com/users/colesbury/received_events", "type": "User", "site_admin": false}, "body": "We modify it on the line below and `fn` might save it for the backwards of res. (The gradgradcheck tests catch this behavior).\r\n\r\nWe might be able to avoid the `clone()` if `grad_slice` is volatile. I've added a note and TODO.", "created_at": "2017-10-31T15:57:06Z", "updated_at": "2018-11-23T15:35:50Z", "html_url": "https://github.com/pytorch/pytorch/pull/3384#discussion_r148041361", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/3384", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/148041361"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/3384#discussion_r148041361"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/3384"}}, "body_html": "<p>We modify it on the line below and <code>fn</code> might save it for the backwards of res. (The gradgradcheck tests catch this behavior).</p>\n<p>We might be able to avoid the <code>clone()</code> if <code>grad_slice</code> is volatile. I've added a note and TODO.</p>", "body_text": "We modify it on the line below and fn might save it for the backwards of res. (The gradgradcheck tests catch this behavior).\nWe might be able to avoid the clone() if grad_slice is volatile. I've added a note and TODO.", "in_reply_to_id": 147965603}