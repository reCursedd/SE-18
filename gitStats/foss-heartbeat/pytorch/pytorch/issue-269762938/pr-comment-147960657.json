{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/147960657", "pull_request_review_id": 73127929, "id": 147960657, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0Nzk2MDY1Nw==", "diff_hunk": "@@ -198,45 +210,67 @@ def saved_variables(formula, args):\n     # find which arguments need to be saved\n     saved = []\n \n+    REPLACEMENTS = [\n+        # replace self.sizes() with self_sizes\n+        (r'{}.sizes\\(\\)', {\n+            'suffix': '_sizes',\n+            'type': 'IntList',\n+        }),\n+        # replace zeros_like(self) with self_info\n+        (r'zeros_like\\({}\\)', {\n+            'suffix': '_info',\n+            'type': 'TypeAndSize',\n+            'expr': lambda name: name,  # at save-time\n+            'res': lambda name: name + '_info.zeros()',  # at eval-time\n+        }),\n+        # replace self.size(2) with self_size_2\n+        (r'{}.size\\((\\w+)\\)', {\n+            'suffix': lambda m: '_argsize_{}'.format(*m.groups()),\n+            'type': 'int64_t',\n+        }),\n+        # replace to_arg_sizes(self, 2) with self_argsizes_2\n+        (r'to_arg_sizes\\({}, (\\w+)\\)', {\n+            'suffix': lambda m: '_sizes_{}'.format(*m.groups()),\n+            'type': 'IntList',\n+        }),\n+        # replace TensorGeometry(self) with self_geometry\n+        (r'TensorGeometry\\({}\\)', {\n+            'suffix': '_geometry',\n+            'type': 'TensorGeometry',\n+        }),\n+    ]\n+\n     for arg in args:\n         if 'name' not in arg:\n             # some returned arguments do not have names\n             continue\n-        name = arg['name']\n-\n-        def replace_sizes(m):\n-            res = name + '_sizes'\n-            saved.append({'name': res, 'type': 'IntList'})\n-            return res\n-\n-        def replace_zeros(m):\n-            r = name + '_info'\n-            saved.append({'name': r, 'type': 'TypeAndSize'})\n-            return r + '.zeros()'\n \n-        def replace_size_n(m):\n-            res = name + '_argsize_{}'.format(*m.groups())\n-            saved.append({'name': res, 'type': 'int64_t'})\n-            return res\n-\n-        def replace_to_arg_sizes(m):\n-            res = name + '_argsizes_{}'.format(*m.groups())\n-            saved.append({'name': res, 'type': 'IntList'})\n-            return res\n-\n-        # replace self.sizes() with self_sizes\n-        formula = re.sub(r'{}.sizes\\(\\)'.format(name), replace_sizes, formula)\n-        # replace zeros_like(self) with self_info\n-        formula = re.sub(r'zeros_like\\({}\\)'.format(name), replace_zeros, formula)\n-        # replace self.size(2) with self_size_2\n-        formula = re.sub(r'{}.size\\((\\w+)\\)'.format(name), replace_size_n, formula)\n-        # replace to_arg_sizes(self, 2) with self_argsizes_2\n-        formula = re.sub(r'to_arg_sizes\\({}, (\\w+)\\)'.format(name), replace_to_arg_sizes, formula)\n+        name = arg['name']\n \n+        # First search the formula for expressions which can be evaluated\n+        # when the autograd Function is created to avoid saving variables\n+        for regex, info in REPLACEMENTS:\n+            def repl(m):\n+                suffix = info['suffix']\n+                suffix = suffix(m) if callable(suffix) else suffix\n+                expr = info['expr'](name) if 'expr' in info else m.group(0)\n+                saved.append({\n+                    'name': name + suffix,\n+                    'type': info['type'],\n+                    'expr': expr,\n+                })\n+                if 'res' in info:\n+                    return info['res'](name)\n+                return name + suffix\n+\n+            formula = re.sub(regex.format(name), repl, formula)", "path": "tools/autograd/gen_variable_type.py", "position": 119, "original_position": 119, "commit_id": "0faf2a8e86a5f3cc32aaf8640120aca134c10961", "original_commit_id": "924908320c84b00c09fdf3d94ac0291e8a513331", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "nice!", "created_at": "2017-10-31T11:16:59Z", "updated_at": "2018-11-23T15:35:48Z", "html_url": "https://github.com/pytorch/pytorch/pull/3384#discussion_r147960657", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/3384", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/147960657"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/3384#discussion_r147960657"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/3384"}}, "body_html": "<p>nice!</p>", "body_text": "nice!"}