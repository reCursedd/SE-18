{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/147968469", "pull_request_review_id": 73127929, "id": 147968469, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0Nzk2ODQ2OQ==", "diff_hunk": "@@ -114,4 +120,44 @@ auto Chunk::apply(const variable_list& inputs) -> variable_list {\n   });\n }\n \n+CopySlices::CopySlices(const Variable& base_var, TensorGeometry view, std::shared_ptr<Function> fn_)\n+  : base(base_var)\n+  , view(std::move(view))\n+  , fn(std::move(fn_))\n+{\n+  is_executable = true;\n+  num_inputs = 1;\n+\n+  // Take the next_functions of fn as our own, except for index 0 which goes\n+  // to base instead of the view.\n+  next_functions.resize(fn->next_functions.size());\n+  next_functions[0] = std::make_pair(base_var.grad_fn(), base_var.output_nr());\n+  fn->next_functions[0] = next_functions[0];\n+  for (size_t i = 1; i < next_functions.size(); i++) {\n+    next_functions[i] = fn->next_functions[i];\n+  }\n+}\n+\n+auto CopySlices::apply(const variable_list& inputs) -> variable_list {\n+  check_input_variables(\"CopySlices\", inputs, 1);\n+  auto& grad = inputs[0];\n+\n+  auto result = grad.type().tensor(base.sizes, base.strides);\n+  result.copy_(grad);\n+\n+  variable_list grad_inputs(next_functions.size());\n+  grad_inputs[0] = result;\n+\n+  auto offset = view.storage_offset - base.storage_offset;\n+  auto grad_slice = result.as_strided(view.sizes, view.strides, offset);", "path": "torch/csrc/autograd/functions/tensor.cpp", "position": null, "original_position": 46, "commit_id": "0faf2a8e86a5f3cc32aaf8640120aca134c10961", "original_commit_id": "924908320c84b00c09fdf3d94ac0291e8a513331", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "actually how is `as_strided` different from `set_` (except that it doesn't take the storage argument)?", "created_at": "2017-10-31T11:46:35Z", "updated_at": "2018-11-23T15:35:49Z", "html_url": "https://github.com/pytorch/pytorch/pull/3384#discussion_r147968469", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/3384", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/147968469"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/3384#discussion_r147968469"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/3384"}}, "body_html": "<p>actually how is <code>as_strided</code> different from <code>set_</code> (except that it doesn't take the storage argument)?</p>", "body_text": "actually how is as_strided different from set_ (except that it doesn't take the storage argument)?"}