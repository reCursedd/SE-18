{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/148936583", "pull_request_review_id": 74261011, "id": 148936583, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0ODkzNjU4Mw==", "diff_hunk": "@@ -87,6 +91,65 @@ std::shared_ptr<Function> VariableImpl::get_grad_accumulator() {\n   return result;\n }\n \n+VariableViewImpl::VariableViewImpl(Variable base_, at::Tensor data_)\n+  : VariableImpl(std::move(data_))\n+  , base(std::move(base_))\n+  , attr_version(0) {\n+  if (!base.defined()) {\n+    throw std::runtime_error(\"base is undefined\");\n+  }\n+  if (base.is_view()) {\n+    base = base.base();\n+  }\n+  is_view = true;\n+  version_counter = base.version_counter();\n+  attr_version = version_counter.current_version();\n+}\n+\n+std::shared_ptr<Function>& VariableViewImpl::get_grad_fn() {\n+  std::lock_guard<std::mutex> lock(mutex);\n+  if (base.requires_grad() && !requires_grad) {\n+    // TODO: See test_inplace_view6. It would be good to support this operation\n+    // but that might require sharing requires_grad between the base and the view\n+    throw std::runtime_error(\n+        \"requires_grad is False and base.requires_grad is True. Cannot use \"\n+        \"this view in a differentiable operation. Re-create the view from its \"\n+        \"base Variable after the last in-place modification.\");\n+  }\n+  auto current_version = version_counter.current_version();\n+  if (attr_version != current_version) {\n+    TORCH_ASSERT(output_nr == 0);\n+    auto fn = std::make_shared<generated::AsStridedBackward>();\n+    fn->self_geometry = TensorGeometry(base);\n+    fn->size = sizes();\n+    fn->stride = strides();\n+    fn->storage_offset = data.storage_offset();\n+    fn->set_flags(Function::flags({ base }));\n+    fn->num_inputs = 1;\n+    _grad_fn = std::move(fn);\n+    attr_version = current_version;\n+  }\n+  return _grad_fn;\n+}\n+\n+void VariableViewImpl::rebase_grad_fn(std::shared_ptr<Function> grad_fn) {\n+  if (!grad_fn) {\n+    TORCH_ASSERTM(!requires_grad, \"Can't set null grad_fn on view with requires_grad=True\");\n+    TORCH_ASSERTM(!base.requires_grad(), \"base.requires_grad does not match view.requires_grad\");\n+    return;\n+  }\n+\n+  TORCH_ASSERTM(requires_grad, \"Can't set grad_fn on view with requires_grad=False\");\n+  TORCH_ASSERT(output_nr == 0);", "path": "torch/csrc/autograd/variable.cpp", "position": null, "original_position": 100, "commit_id": "0faf2a8e86a5f3cc32aaf8640120aca134c10961", "original_commit_id": "790748e37d34eaf7b269cba610f3296db403ed8d", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Can you move this assert to the beginning, so it is always checked?", "created_at": "2017-11-04T17:34:19Z", "updated_at": "2018-11-23T15:36:02Z", "html_url": "https://github.com/pytorch/pytorch/pull/3384#discussion_r148936583", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/3384", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/148936583"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/3384#discussion_r148936583"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/3384"}}, "body_html": "<p>Can you move this assert to the beginning, so it is always checked?</p>", "body_text": "Can you move this assert to the beginning, so it is always checked?"}