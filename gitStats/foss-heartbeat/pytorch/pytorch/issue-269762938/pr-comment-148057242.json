{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/148057242", "pull_request_review_id": 73220397, "id": 148057242, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0ODA1NzI0Mg==", "diff_hunk": "@@ -381,90 +378,104 @@ static void _transplant_var(VariableImpl& var, const std::shared_ptr<Function>&\n // do in this case.  After this method is run, t2var is extended with\n // mappings for output tensors as well.\n static void _wrap_outputs(THPFunction *self, t2var_type &t2var,\n-    std::unordered_set<PyObject *> &dirty_inputs, PyObject *raw_output,\n-    PyObject *outputs, bool is_volatile)\n+    std::unordered_set<PyObject *> &dirty_inputs,\n+    const t2var_type &shared_pairs,\n+    PyObject *raw_output, PyObject *outputs, bool is_volatile)\n {\n   auto cdata = is_volatile ? nullptr : THPFunction_asFunction(self);\n   Py_ssize_t num_outputs = PyTuple_GET_SIZE(raw_output);\n   if (self->cdata.is_executable) {\n     self->output_info = new std::vector<output_info_type>();\n     self->output_info->reserve(num_outputs);\n   }\n+\n+  // Given an output tensor, find the input Variable with which it shares storage\n+  auto get_shared_base = [&shared_pairs, &t2var](PyObject* tensor) -> Variable {\n+    auto input_it = t2var.find(tensor);\n+    if (input_it != t2var.end()) {\n+      // If the output is an input, it's a view on itself", "path": "torch/csrc/autograd/python_function.cpp", "position": null, "original_position": 54, "commit_id": "0faf2a8e86a5f3cc32aaf8640120aca134c10961", "original_commit_id": "924908320c84b00c09fdf3d94ac0291e8a513331", "user": {"login": "colesbury", "id": 655866, "node_id": "MDQ6VXNlcjY1NTg2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/655866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colesbury", "html_url": "https://github.com/colesbury", "followers_url": "https://api.github.com/users/colesbury/followers", "following_url": "https://api.github.com/users/colesbury/following{/other_user}", "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions", "organizations_url": "https://api.github.com/users/colesbury/orgs", "repos_url": "https://api.github.com/users/colesbury/repos", "events_url": "https://api.github.com/users/colesbury/events{/privacy}", "received_events_url": "https://api.github.com/users/colesbury/received_events", "type": "User", "site_admin": false}, "body": "Hmm I didn't think about that. I've restructured it so that we only look at inputs.", "created_at": "2017-10-31T16:48:12Z", "updated_at": "2018-11-23T15:35:51Z", "html_url": "https://github.com/pytorch/pytorch/pull/3384#discussion_r148057242", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/3384", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/148057242"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/3384#discussion_r148057242"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/3384"}}, "body_html": "<p>Hmm I didn't think about that. I've restructured it so that we only look at inputs.</p>", "body_text": "Hmm I didn't think about that. I've restructured it so that we only look at inputs.", "in_reply_to_id": 147971077}