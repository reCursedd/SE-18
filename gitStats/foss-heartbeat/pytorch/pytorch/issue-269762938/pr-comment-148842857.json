{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/148842857", "pull_request_review_id": 74150985, "id": 148842857, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0ODg0Mjg1Nw==", "diff_hunk": "@@ -122,18 +124,22 @@ std::shared_ptr<Function>& VariableViewImpl::get_grad_fn() {\n   return _grad_fn;\n }\n \n-void VariableViewImpl::set_grad_fn(std::shared_ptr<Function> grad_fn) {\n-  if (this->_grad_fn && grad_fn) {\n-    // If we have a previous grad_fn then this is an in-place modification\n-    if (output_nr != 0 || grad_fn->num_inputs != 1) {\n-      throw std::runtime_error(\"Functions which modify views in-place must return a single Variable\");\n-    }\n-    auto copySlices = std::make_shared<CopySlices>(base, TensorGeometry(data), std::move(grad_fn));\n-    base.output_nr() = 0;\n-    base.grad_fn() = std::move(copySlices);\n-  } else {\n-    _grad_fn = std::move(grad_fn);\n+void VariableViewImpl::rebase_grad_fn(std::shared_ptr<Function> grad_fn) {\n+  if (!grad_fn) {\n+    TORCH_ASSERTM(!requires_grad, \"Can't set null grad_fn on view with requires_grad=True\");\n+    TORCH_ASSERTM(!base.requires_grad(), \"base.requires_grad does not match view.requires_grad\");\n+    return;\n+  }\n+\n+  TORCH_ASSERTM(requires_grad, \"Can't set grad_fn on view with requires_grad=False\");\n+  TORCH_ASSERT(output_nr == 0);\n+  if (grad_fn->num_inputs != 1) {\n+    throw std::runtime_error(\"Functions which modify views in-place must return a single Variable\");", "path": "torch/csrc/autograd/variable.cpp", "position": null, "original_position": 40, "commit_id": "0faf2a8e86a5f3cc32aaf8640120aca134c10961", "original_commit_id": "c1b955e717430c2d00c3d23dcc2e62f239a181d8", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Is that right? I thought the only limitation was that views have to be the first output. Or is it because `CopySlices` would have to handle that?", "created_at": "2017-11-03T17:14:53Z", "updated_at": "2018-11-23T15:35:58Z", "html_url": "https://github.com/pytorch/pytorch/pull/3384#discussion_r148842857", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/3384", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/148842857"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/3384#discussion_r148842857"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/3384"}}, "body_html": "<p>Is that right? I thought the only limitation was that views have to be the first output. Or is it because <code>CopySlices</code> would have to handle that?</p>", "body_text": "Is that right? I thought the only limitation was that views have to be the first output. Or is it because CopySlices would have to handle that?"}