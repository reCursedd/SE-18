{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/143195851", "pull_request_review_id": 67675061, "id": 143195851, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0MzE5NTg1MQ==", "diff_hunk": "@@ -1770,6 +1760,17 @@ def test_Conv2d_inconsistent_types_on_GPU_with_cudnn(self):\n         # but it should work with the same type\n         nn.functional.conv2d(inputs.float(), weights.float(), bias.float())\n \n+    @unittest.skipIf(not TEST_CUDA, 'CUDA not available')\n+    @unittest.skipIf(not TEST_CUDNN, 'CUDNN not available')\n+    def test_Conv2d_deterministic_cudnn(self):\n+        inputs = Variable(torch.randn(4, 1, 7, 7).float().cuda())\n+        weights = Variable(torch.randn(1, 1, 3, 3).float().cuda())\n+        bias = Variable(torch.randn(1).float().cuda())\n+        with cudnn.flags(enabled=True, benchmark=True, deterministic=True):\n+            f1 = nn.functional.conv2d(inputs, weights, bias)\n+            f2 = nn.functional.conv2d(inputs, weights, bias)\n+            self.assertEqual(f1, f2)", "path": "test/test_nn.py", "position": null, "original_position": 30, "commit_id": "a11d067ab623b2f98b836ad37c2b9c838436aa60", "original_commit_id": "b18c062630faa60eb5584565388939a19e3e8f3d", "user": {"login": "prigoyal", "id": 13488275, "node_id": "MDQ6VXNlcjEzNDg4Mjc1", "avatar_url": "https://avatars0.githubusercontent.com/u/13488275?v=4", "gravatar_id": "", "url": "https://api.github.com/users/prigoyal", "html_url": "https://github.com/prigoyal", "followers_url": "https://api.github.com/users/prigoyal/followers", "following_url": "https://api.github.com/users/prigoyal/following{/other_user}", "gists_url": "https://api.github.com/users/prigoyal/gists{/gist_id}", "starred_url": "https://api.github.com/users/prigoyal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/prigoyal/subscriptions", "organizations_url": "https://api.github.com/users/prigoyal/orgs", "repos_url": "https://api.github.com/users/prigoyal/repos", "events_url": "https://api.github.com/users/prigoyal/events{/privacy}", "received_events_url": "https://api.github.com/users/prigoyal/received_events", "type": "User", "site_admin": false}, "body": "This particular PR is about conv and not the MaxPool layer\r\n`self.assertEqual` compares tensors and accepts then for 1e-5 but I'll add the third argument 0 as well for the bitwise equality", "created_at": "2017-10-06T13:55:59Z", "updated_at": "2018-11-23T15:35:05Z", "html_url": "https://github.com/pytorch/pytorch/pull/2893#discussion_r143195851", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/2893", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/143195851"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/2893#discussion_r143195851"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/2893"}}, "body_html": "<p>This particular PR is about conv and not the MaxPool layer<br>\n<code>self.assertEqual</code> compares tensors and accepts then for 1e-5 but I'll add the third argument 0 as well for the bitwise equality</p>", "body_text": "This particular PR is about conv and not the MaxPool layer\nself.assertEqual compares tensors and accepts then for 1e-5 but I'll add the third argument 0 as well for the bitwise equality", "in_reply_to_id": 143174150}