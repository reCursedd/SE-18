{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/333598905", "html_url": "https://github.com/pytorch/pytorch/pull/2893#issuecomment-333598905", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/2893", "id": 333598905, "node_id": "MDEyOklzc3VlQ29tbWVudDMzMzU5ODkwNQ==", "user": {"login": "ngimel", "id": 15841449, "node_id": "MDQ6VXNlcjE1ODQxNDQ5", "avatar_url": "https://avatars3.githubusercontent.com/u/15841449?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ngimel", "html_url": "https://github.com/ngimel", "followers_url": "https://api.github.com/users/ngimel/followers", "following_url": "https://api.github.com/users/ngimel/following{/other_user}", "gists_url": "https://api.github.com/users/ngimel/gists{/gist_id}", "starred_url": "https://api.github.com/users/ngimel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ngimel/subscriptions", "organizations_url": "https://api.github.com/users/ngimel/orgs", "repos_url": "https://api.github.com/users/ngimel/repos", "events_url": "https://api.github.com/users/ngimel/events{/privacy}", "received_events_url": "https://api.github.com/users/ngimel/received_events", "type": "User", "site_admin": false}, "created_at": "2017-10-02T17:08:01Z", "updated_at": "2017-10-02T17:08:01Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=13488275\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/prigoyal\">@prigoyal</a> the way to find if there is a deterministic algo for a particular convolution is to run cudnnFind* and get all results (not just the first one). Starting from cudnn v6, the return structure of cudnnFind has a field that says if an algo is deterministic, so looping over returned algos one can find if there is a deterministic among them or not.<br>\nIt's true that CUDNN_CONVOLUTION_FWD_ALGO_IMPLICIT_PRECOMPUTE_GEMM does not support dilated conv, but there should be an algorithm that does. In fact, all forward algos are deterministic, so there should be no problems with forward. I still did not get an answer from cudnn if backward algorithms that support dilated conv are deterministic, but the return of cudnnFind should answer that question.</p>", "body_text": "@prigoyal the way to find if there is a deterministic algo for a particular convolution is to run cudnnFind* and get all results (not just the first one). Starting from cudnn v6, the return structure of cudnnFind has a field that says if an algo is deterministic, so looping over returned algos one can find if there is a deterministic among them or not.\nIt's true that CUDNN_CONVOLUTION_FWD_ALGO_IMPLICIT_PRECOMPUTE_GEMM does not support dilated conv, but there should be an algorithm that does. In fact, all forward algos are deterministic, so there should be no problems with forward. I still did not get an answer from cudnn if backward algorithms that support dilated conv are deterministic, but the return of cudnnFind should answer that question.", "body": "@prigoyal the way to find if there is a deterministic algo for a particular convolution is to run cudnnFind* and get all results (not just the first one). Starting from cudnn v6, the return structure of cudnnFind has a field that says if an algo is deterministic, so looping over returned algos one can find if there is a deterministic among them or not. \r\nIt's true that CUDNN_CONVOLUTION_FWD_ALGO_IMPLICIT_PRECOMPUTE_GEMM does not support dilated conv, but there should be an algorithm that does. In fact, all forward algos are deterministic, so there should be no problems with forward. I still did not get an answer from cudnn if backward algorithms that support dilated conv are deterministic, but the return of cudnnFind should answer that question. "}