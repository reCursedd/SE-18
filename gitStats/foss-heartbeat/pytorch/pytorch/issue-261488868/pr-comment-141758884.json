{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/141758884", "pull_request_review_id": 66025332, "id": 141758884, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0MTc1ODg4NA==", "diff_hunk": "@@ -220,68 +303,119 @@ struct algorithm_search<cudnnConvolutionBwdDataAlgo_t> {\n         CUDNN_CONVOLUTION_BWD_DATA_PREFER_FASTEST, 0, algo));\n   }\n \n-  static void getWorkspaceSize(cudnnHandle_t handle, const Convolution& conv, cudnnConvolutionBwdDataAlgo_t algo, size_t* workspaceSize) {\n-    CHECK(cudnnGetConvolutionBackwardDataWorkspaceSize(handle, conv.wdesc.desc,\n-        conv.odesc.desc, conv.cdesc.desc, conv.idesc.desc, algo,\n+  static void getWorkspaceSize(\n+    cudnnHandle_t handle, const Convolution& conv,\n+    cudnnConvolutionBwdDataAlgo_t algo, size_t* workspaceSize)\n+  {\n+    CHECK(cudnnGetConvolutionBackwardDataWorkspaceSize(\n+        handle,\n+        conv.wdesc.desc,\n+        conv.odesc.desc,\n+        conv.cdesc.desc,\n+        conv.idesc.desc,\n+         algo,\n         workspaceSize));\n   }\n };\n \n template<>\n struct algorithm_search<cudnnConvolutionBwdFilterAlgo_t> {\n   static constexpr auto DEFAULT_ALGO = CUDNN_CONVOLUTION_BWD_FILTER_ALGO_1;\n-  static BenchmarkCache<cudnnConvolutionBwdFilterAlgo_t>& cache() {\n+\n+  static BenchmarkCache<cudnnConvolutionBwdFilterAlgo_t>& cache()\n+  {\n     return bwd_filter_algos;\n   }\n \n-  static cudnnConvolutionBwdFilterAlgoPerf_t findAlgorithm(THCState* state, cudnnHandle_t handle, const Convolution& conv,\n-\t\t\t\t\t\t\t    void* in, void* out, void* wght) {\n+  static cudnnConvolutionBwdFilterAlgoPerf_t findAlgorithm(\n+        THCState* state, cudnnHandle_t handle, const Convolution& conv,\n+        void* in, void* out, void* wght)\n+  {\n     int algoCount;\n     cudnnConvolutionBwdFilterAlgoPerf_t perfResults;\n     cudnnConvolutionBwdFilterAlgo_t algo[] = {\n-         CUDNN_CONVOLUTION_BWD_FILTER_ALGO_0,\n-         CUDNN_CONVOLUTION_BWD_FILTER_ALGO_1,\n-         CUDNN_CONVOLUTION_BWD_FILTER_ALGO_FFT,\n-         CUDNN_CONVOLUTION_BWD_FILTER_ALGO_3,\n-         CUDNN_CONVOLUTION_BWD_FILTER_ALGO_WINOGRAD_NONFUSED,\n+        CUDNN_CONVOLUTION_BWD_FILTER_ALGO_0,\n+        CUDNN_CONVOLUTION_BWD_FILTER_ALGO_1,\n+        CUDNN_CONVOLUTION_BWD_FILTER_ALGO_FFT,\n+        CUDNN_CONVOLUTION_BWD_FILTER_ALGO_3,\n+        CUDNN_CONVOLUTION_BWD_FILTER_ALGO_WINOGRAD_NONFUSED,\n #if CUDNN_VERSION >= 6000\n-         CUDNN_CONVOLUTION_BWD_FILTER_ALGO_FFT_TILING,\n+        CUDNN_CONVOLUTION_BWD_FILTER_ALGO_FFT_TILING,\n #endif\n     };\n-    size_t max_ws_size = getMaxWorkspaceSize<cudnnConvolutionBwdFilterAlgo_t>(handle,conv,algo,sizeof(algo)/sizeof(algo[0]),state);\n+    size_t max_ws_size = getMaxWorkspaceSize<cudnnConvolutionBwdFilterAlgo_t>(\n+        handle, conv, algo, sizeof(algo)/sizeof(algo[0]), state);\n     Workspace ws(state, max_ws_size);\n \n-    CHECK(cudnnFindConvolutionBackwardFilterAlgorithmEx(handle, conv.idesc.desc, in,\n-        conv.odesc.desc, out, conv.cdesc.desc, conv.wdesc.desc, wght, 1, &algoCount,\n-        &perfResults, ws.data, ws.size));\n+    CHECK(cudnnFindConvolutionBackwardFilterAlgorithmEx(\n+        handle,\n+        conv.idesc.desc,\n+        in,\n+        conv.odesc.desc,\n+        out,\n+        conv.cdesc.desc,\n+        conv.wdesc.desc,\n+        wght,\n+        1,\n+        &algoCount,\n+        &perfResults,\n+        ws.data,\n+        ws.size));\n \n     return perfResults;\n   }\n \n-  static void getAlgorithm(cudnnHandle_t handle, const Convolution& conv, cudnnConvolutionBwdFilterAlgo_t* algo) {\n-    CHECK(cudnnGetConvolutionBackwardFilterAlgorithm(handle, conv.idesc.desc,\n-        conv.odesc.desc, conv.cdesc.desc, conv.wdesc.desc,\n-        CUDNN_CONVOLUTION_BWD_FILTER_PREFER_FASTEST, 0, algo));\n-  }\n-\n-  static void getWorkspaceSize(cudnnHandle_t handle, const Convolution& conv, cudnnConvolutionBwdFilterAlgo_t algo, size_t* workspaceSize) {\n-    CHECK(cudnnGetConvolutionBackwardFilterWorkspaceSize(handle, conv.idesc.desc,\n-        conv.odesc.desc, conv.cdesc.desc, conv.wdesc.desc, algo, workspaceSize));\n+  static void getAlgorithm(\n+      cudnnHandle_t handle, const Convolution& conv,\n+      cudnnConvolutionBwdFilterAlgo_t* algo)\n+  {\n+    CHECK(cudnnGetConvolutionBackwardFilterAlgorithm(\n+        handle,\n+        conv.idesc.desc,\n+        conv.odesc.desc,\n+        conv.cdesc.desc,\n+        conv.wdesc.desc,\n+        CUDNN_CONVOLUTION_BWD_FILTER_PREFER_FASTEST,\n+        0,\n+        algo)\n+    );\n+  }\n+\n+  static void getWorkspaceSize(\n+      cudnnHandle_t handle, const Convolution& conv,\n+      cudnnConvolutionBwdFilterAlgo_t algo, size_t* workspaceSize)\n+  {\n+    CHECK(cudnnGetConvolutionBackwardFilterWorkspaceSize(\n+        handle,\n+        conv.idesc.desc,\n+        conv.odesc.desc,\n+        conv.cdesc.desc,\n+        conv.wdesc.desc,\n+        algo,\n+        workspaceSize));\n   }\n };\n \n template<typename algo_t>\n void findAlgorithm(\n     THCState* state, cudnnHandle_t handle, const Convolution& conv,\n-    bool benchmark, void* in, void* out, void* wght, algo_t* algo)\n+    bool benchmark, bool deterministic, void* in, void* out, void* wght,\n+    algo_t* algo)\n {\n+  // declare an instance of the algo class {fwd, bwd_filter, bwd_data} that we\n+  // want to search on\n   using search = algorithm_search<algo_t>;\n   auto& cache = search::cache();\n \n   if (cache.find(conv.params, algo)) {\n     return;\n   }\n \n+  if (deterministic) {", "path": "torch/csrc/cudnn/Conv.cpp", "position": null, "original_position": 365, "commit_id": "a11d067ab623b2f98b836ad37c2b9c838436aa60", "original_commit_id": "43f0f4efc786c26936a6add80240a1d56e94c31a", "user": {"login": "prigoyal", "id": 13488275, "node_id": "MDQ6VXNlcjEzNDg4Mjc1", "avatar_url": "https://avatars0.githubusercontent.com/u/13488275?v=4", "gravatar_id": "", "url": "https://api.github.com/users/prigoyal", "html_url": "https://github.com/prigoyal", "followers_url": "https://api.github.com/users/prigoyal/followers", "following_url": "https://api.github.com/users/prigoyal/following{/other_user}", "gists_url": "https://api.github.com/users/prigoyal/gists{/gist_id}", "starred_url": "https://api.github.com/users/prigoyal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/prigoyal/subscriptions", "organizations_url": "https://api.github.com/users/prigoyal/orgs", "repos_url": "https://api.github.com/users/prigoyal/repos", "events_url": "https://api.github.com/users/prigoyal/events{/privacy}", "received_events_url": "https://api.github.com/users/prigoyal/received_events", "type": "User", "site_admin": false}, "body": "this is the relevant change in this file for determinism however I found the code slightly hard to read so I made some style changes. If people don't like them I can revert as well but I find this code much more readable now ", "created_at": "2017-09-28T23:19:46Z", "updated_at": "2018-11-23T15:34:51Z", "html_url": "https://github.com/pytorch/pytorch/pull/2893#discussion_r141758884", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/2893", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/141758884"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/2893#discussion_r141758884"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/2893"}}, "body_html": "<p>this is the relevant change in this file for determinism however I found the code slightly hard to read so I made some style changes. If people don't like them I can revert as well but I find this code much more readable now</p>", "body_text": "this is the relevant change in this file for determinism however I found the code slightly hard to read so I made some style changes. If people don't like them I can revert as well but I find this code much more readable now"}