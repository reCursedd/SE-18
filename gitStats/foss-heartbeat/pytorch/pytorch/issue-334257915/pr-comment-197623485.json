{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/197623485", "pull_request_review_id": 131406637, "id": 197623485, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NzYyMzQ4NQ==", "diff_hunk": "@@ -0,0 +1,137 @@\n+#pragma once\n+\n+#include \"caffe2/core/dispatch/OpSchema.h\"\n+#include \"caffe2/core/dispatch/Dispatcher.h\"\n+#include \"caffe2/utils/Optional.h\"\n+\n+/**\n+ * To register your own kernel for an operator, do in one (!) cpp file:\n+ *   C10_REGISTER_KERNEL(OpSchemaDef)\n+ *      .kernel(&kernel_func)\n+ *      .dispatchKey(dispatch_key);\n+ */\n+\n+namespace c10 {\n+\n+// TODO Test different order for builder\n+// TODO Test no dispatch key defined\n+\n+/**\n+ * Class which, on construction, registers an operator in the dispatch table.  The intent is that\n+ * this class is constructed at static initialization time so that operators automatically get\n+ * registered when a dlopen() occurs.\n+ *\n+ * You shouldn't call this directly; instead, use the KernelRegistrationBuilder\n+ *\n+ * @tparam OpSchemaDef\n+ */\n+template<class OpSchemaDef>\n+class KernelRegistrar final {\n+private:\n+    using Schema = OpSchema<OpSchemaDef>;\n+public:\n+  /**\n+   * @param kernel The concrete function implementation to register\n+   * @param dispatch_key  The dispatch key to register the function to\n+   */\n+  KernelRegistrar(typename Schema::signature::func_type* kernel, typename Schema::dispatch::dispatch_key_type dispatch_key)\n+  : dispatch_key_(std::move(dispatch_key)), owns_registration_(true) {\n+    Dispatcher<OpSchemaDef>::registerOp(kernel, dispatch_key_);\n+  }\n+\n+  KernelRegistrar(KernelRegistrar&& rhs)\n+  : dispatch_key_(std::move(rhs.dispatch_key_)), owns_registration_(true) {\n+    rhs.owns_registration_ = false;\n+  }\n+\n+  // not needed for now\n+  KernelRegistrar& operator=(KernelRegistrar&& rhs) = delete;\n+\n+  ~KernelRegistrar() {\n+    if (owns_registration_) {\n+      Dispatcher<OpSchemaDef>::deregisterOp(dispatch_key_);\n+    }\n+  }\n+\n+private:\n+  const typename Schema::dispatch::dispatch_key_type dispatch_key_;\n+  bool owns_registration_;\n+\n+  DISABLE_COPY_AND_ASSIGN(KernelRegistrar);\n+};\n+\n+/**\n+ * Helper class for building a KernelRegistrar.  This permits \"keyword-argument\" like syntax\n+ * when performing operator registration, e.g., as in:\n+ *\n+ * C10_REGISTER_KERNEL(::ops::add_notensor)\n+ *      .kernel(&add_notensor_op)\n+ *      .dispatchKey(\"bla\");\n+ *\n+ * Expanded, this macro invocation looks like:\n+ *\n+ * static KernelRegistrar<::ops::add_notensor> _anon0 =\n+ *    KernelRegistrationBuilder<::ops::add_notensor, false, false>()\n+ *      .kernel(&add_notensor_op)\n+ *      .dispatchKey(\"bla\");\n+ *\n+ * The resulting full expression is implicitly convertible to a KernelRegistrar.\n+ *\n+ * @tparam OpSchemaDef The operator schema this is building a KernelRegistration for\n+ * @tparam hasKernel Boolean for compile-time checking that a kernel is specified before finalizing the builder\n+ * @tparam hasDispatchKey Boolean for compile-time checking thhat a dispatch key is specified before finalizing the builder\n+ */\n+template<class OpSchemaDef, bool hasKernel, bool hasDispatchKey>", "path": "caffe2/core/dispatch/KernelRegistration.h", "position": null, "original_position": 84, "commit_id": "ba0e6257fb2e4e27e2872d8d318850a043da4e7e", "original_commit_id": "c69ba483a9edf47816ddec00987d0ac11df02916", "user": {"login": "dzhulgakov", "id": 17890620, "node_id": "MDQ6VXNlcjE3ODkwNjIw", "avatar_url": "https://avatars2.githubusercontent.com/u/17890620?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dzhulgakov", "html_url": "https://github.com/dzhulgakov", "followers_url": "https://api.github.com/users/dzhulgakov/followers", "following_url": "https://api.github.com/users/dzhulgakov/following{/other_user}", "gists_url": "https://api.github.com/users/dzhulgakov/gists{/gist_id}", "starred_url": "https://api.github.com/users/dzhulgakov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dzhulgakov/subscriptions", "organizations_url": "https://api.github.com/users/dzhulgakov/orgs", "repos_url": "https://api.github.com/users/dzhulgakov/repos", "events_url": "https://api.github.com/users/dzhulgakov/events{/privacy}", "received_events_url": "https://api.github.com/users/dzhulgakov/received_events", "type": "User", "site_admin": false}, "body": "What's bad about runtime static initialization error? Anybody writing an op would need to test/run it, so the error would be spotted right away.\r\n\r\nIt just feels like quite a complication. E.g. if you have 8-10 fields like in https://github.com/pytorch/pytorch/blob/master/caffe2/core/operator_schema.h it'd be a bit annoying to manipulate.\r\n\r\nOne option for the builder pattern is to template on mask instead of separate bool fields, at least that'd be a bit more readable:\r\n```\r\ntemplate<class OpSchemaDef, int fields_mask=0>\r\nclass KernelRegistrationBuilder final {\r\n...\r\nconstexpr KernelRegistrationBuilder<OpSchemaDef, fields_mask | FIELD_KERNEL> kernel(typename Schema::signature::func_type* kernel_func) && {\r\n+    static_assert(!(fields_mask & FIELD_KERNEL), \"Tried to define kernel twice in same op registration\");\r\n+    return KernelRegistrationBuilder<OpSchemaDef, fields_mask | FIELD_KERNEL>(*kernel_func, std::move(dispatch_key_));\r\n+  }\r\n```", "created_at": "2018-06-23T21:59:21Z", "updated_at": "2018-11-23T15:46:11Z", "html_url": "https://github.com/pytorch/pytorch/pull/8713#discussion_r197623485", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/8713", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/197623485"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/8713#discussion_r197623485"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/8713"}}, "body_html": "<p>What's bad about runtime static initialization error? Anybody writing an op would need to test/run it, so the error would be spotted right away.</p>\n<p>It just feels like quite a complication. E.g. if you have 8-10 fields like in <a href=\"https://github.com/pytorch/pytorch/blob/master/caffe2/core/operator_schema.h\">https://github.com/pytorch/pytorch/blob/master/caffe2/core/operator_schema.h</a> it'd be a bit annoying to manipulate.</p>\n<p>One option for the builder pattern is to template on mask instead of separate bool fields, at least that'd be a bit more readable:</p>\n<pre><code>template&lt;class OpSchemaDef, int fields_mask=0&gt;\nclass KernelRegistrationBuilder final {\n...\nconstexpr KernelRegistrationBuilder&lt;OpSchemaDef, fields_mask | FIELD_KERNEL&gt; kernel(typename Schema::signature::func_type* kernel_func) &amp;&amp; {\n+    static_assert(!(fields_mask &amp; FIELD_KERNEL), \"Tried to define kernel twice in same op registration\");\n+    return KernelRegistrationBuilder&lt;OpSchemaDef, fields_mask | FIELD_KERNEL&gt;(*kernel_func, std::move(dispatch_key_));\n+  }\n</code></pre>", "body_text": "What's bad about runtime static initialization error? Anybody writing an op would need to test/run it, so the error would be spotted right away.\nIt just feels like quite a complication. E.g. if you have 8-10 fields like in https://github.com/pytorch/pytorch/blob/master/caffe2/core/operator_schema.h it'd be a bit annoying to manipulate.\nOne option for the builder pattern is to template on mask instead of separate bool fields, at least that'd be a bit more readable:\ntemplate<class OpSchemaDef, int fields_mask=0>\nclass KernelRegistrationBuilder final {\n...\nconstexpr KernelRegistrationBuilder<OpSchemaDef, fields_mask | FIELD_KERNEL> kernel(typename Schema::signature::func_type* kernel_func) && {\n+    static_assert(!(fields_mask & FIELD_KERNEL), \"Tried to define kernel twice in same op registration\");\n+    return KernelRegistrationBuilder<OpSchemaDef, fields_mask | FIELD_KERNEL>(*kernel_func, std::move(dispatch_key_));\n+  }", "in_reply_to_id": 197342854}