{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/215753983", "pull_request_review_id": 153091386, "id": 215753983, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNTc1Mzk4Mw==", "diff_hunk": "@@ -46,6 +46,19 @@ def __init__(self, probs=None, logits=None, validate_args=None):\n             batch_shape = self._param.size()\n         super(Bernoulli, self).__init__(batch_shape, validate_args=validate_args)\n \n+    def expand(self, batch_shape):\n+        batch_shape = torch.Size(batch_shape)\n+        new = self.__new__(Bernoulli)", "path": "torch/distributions/bernoulli.py", "position": null, "original_position": 6, "commit_id": "806e268e07ee225cafa459b3ca390b2c4f1a2bd6", "original_commit_id": "cb203efc9cbd7e32ca87f695f90b5defd9e83090", "user": {"login": "fritzo", "id": 648532, "node_id": "MDQ6VXNlcjY0ODUzMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/648532?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fritzo", "html_url": "https://github.com/fritzo", "followers_url": "https://api.github.com/users/fritzo/followers", "following_url": "https://api.github.com/users/fritzo/following{/other_user}", "gists_url": "https://api.github.com/users/fritzo/gists{/gist_id}", "starred_url": "https://api.github.com/users/fritzo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fritzo/subscriptions", "organizations_url": "https://api.github.com/users/fritzo/orgs", "repos_url": "https://api.github.com/users/fritzo/repos", "events_url": "https://api.github.com/users/fritzo/events{/privacy}", "received_events_url": "https://api.github.com/users/fritzo/received_events", "type": "User", "site_admin": false}, "body": "Hmm, I think it's too draconian to `assert type(self) is Bernoulli`, since we should allow subclassing w/o overriding the `__init__` method. I think the safest thing to do would be:\r\n```py\r\nif type(self).__init__ is not Bernoulli.__init__:\r\n    raise NotImplementedError(\"Subclasses that define a custom .__init__() method \"\r\n                              \"must also define a custom .expand() method\")\r\n```\r\nEDIT switched to `type(self).__init__` for Python 3 compatibility.", "created_at": "2018-09-06T19:45:33Z", "updated_at": "2018-11-23T15:50:42Z", "html_url": "https://github.com/pytorch/pytorch/pull/11341#discussion_r215753983", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/11341", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/215753983"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/11341#discussion_r215753983"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/11341"}}, "body_html": "<p>Hmm, I think it's too draconian to <code>assert type(self) is Bernoulli</code>, since we should allow subclassing w/o overriding the <code>__init__</code> method. I think the safest thing to do would be:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">if</span> <span class=\"pl-c1\">type</span>(<span class=\"pl-c1\">self</span>).<span class=\"pl-c1\">__init__</span> <span class=\"pl-k\">is</span> <span class=\"pl-k\">not</span> Bernoulli.<span class=\"pl-c1\">__init__</span>:\n    <span class=\"pl-k\">raise</span> <span class=\"pl-c1\">NotImplementedError</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Subclasses that define a custom .__init__() method <span class=\"pl-pds\">\"</span></span>\n                              <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>must also define a custom .expand() method<span class=\"pl-pds\">\"</span></span>)</pre></div>\n<p>EDIT switched to <code>type(self).__init__</code> for Python 3 compatibility.</p>", "body_text": "Hmm, I think it's too draconian to assert type(self) is Bernoulli, since we should allow subclassing w/o overriding the __init__ method. I think the safest thing to do would be:\nif type(self).__init__ is not Bernoulli.__init__:\n    raise NotImplementedError(\"Subclasses that define a custom .__init__() method \"\n                              \"must also define a custom .expand() method\")\nEDIT switched to type(self).__init__ for Python 3 compatibility.", "in_reply_to_id": 215747977}