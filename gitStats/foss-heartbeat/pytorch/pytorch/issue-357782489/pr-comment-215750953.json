{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/215750953", "pull_request_review_id": 153087528, "id": 215750953, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNTc1MDk1Mw==", "diff_hunk": "@@ -46,6 +46,19 @@ def __init__(self, probs=None, logits=None, validate_args=None):\n             batch_shape = self._param.size()\n         super(Bernoulli, self).__init__(batch_shape, validate_args=validate_args)\n \n+    def expand(self, batch_shape):\n+        batch_shape = torch.Size(batch_shape)\n+        new = self.__new__(Bernoulli)", "path": "torch/distributions/bernoulli.py", "position": null, "original_position": 6, "commit_id": "806e268e07ee225cafa459b3ca390b2c4f1a2bd6", "original_commit_id": "cb203efc9cbd7e32ca87f695f90b5defd9e83090", "user": {"login": "neerajprad", "id": 1762463, "node_id": "MDQ6VXNlcjE3NjI0NjM=", "avatar_url": "https://avatars3.githubusercontent.com/u/1762463?v=4", "gravatar_id": "", "url": "https://api.github.com/users/neerajprad", "html_url": "https://github.com/neerajprad", "followers_url": "https://api.github.com/users/neerajprad/followers", "following_url": "https://api.github.com/users/neerajprad/following{/other_user}", "gists_url": "https://api.github.com/users/neerajprad/gists{/gist_id}", "starred_url": "https://api.github.com/users/neerajprad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/neerajprad/subscriptions", "organizations_url": "https://api.github.com/users/neerajprad/orgs", "repos_url": "https://api.github.com/users/neerajprad/repos", "events_url": "https://api.github.com/users/neerajprad/events{/privacy}", "received_events_url": "https://api.github.com/users/neerajprad/received_events", "type": "User", "site_admin": false}, "body": "That is unfortunately true. :( I think we can use `type(self)` to ensure that we are getting the correct instance type, but if we have made any customizations to `__init__`, this will require us to also override `.expand` and plug in those changes. That's not ideal. Another thing we can do is check if `type(self)` doesn't match the class and if so call the `__init__` method for safety. ", "created_at": "2018-09-06T19:34:13Z", "updated_at": "2018-11-23T15:50:42Z", "html_url": "https://github.com/pytorch/pytorch/pull/11341#discussion_r215750953", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/11341", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/215750953"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/11341#discussion_r215750953"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/11341"}}, "body_html": "<p>That is unfortunately true. :( I think we can use <code>type(self)</code> to ensure that we are getting the correct instance type, but if we have made any customizations to <code>__init__</code>, this will require us to also override <code>.expand</code> and plug in those changes. That's not ideal. Another thing we can do is check if <code>type(self)</code> doesn't match the class and if so call the <code>__init__</code> method for safety.</p>", "body_text": "That is unfortunately true. :( I think we can use type(self) to ensure that we are getting the correct instance type, but if we have made any customizations to __init__, this will require us to also override .expand and plug in those changes. That's not ideal. Another thing we can do is check if type(self) doesn't match the class and if so call the __init__ method for safety.", "in_reply_to_id": 215747977}