{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/439238805", "html_url": "https://github.com/pytorch/pytorch/issues/13983#issuecomment-439238805", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/13983", "id": 439238805, "node_id": "MDEyOklzc3VlQ29tbWVudDQzOTIzODgwNQ==", "user": {"login": "pietern", "id": 9845, "node_id": "MDQ6VXNlcjk4NDU=", "avatar_url": "https://avatars3.githubusercontent.com/u/9845?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietern", "html_url": "https://github.com/pietern", "followers_url": "https://api.github.com/users/pietern/followers", "following_url": "https://api.github.com/users/pietern/following{/other_user}", "gists_url": "https://api.github.com/users/pietern/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietern/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietern/subscriptions", "organizations_url": "https://api.github.com/users/pietern/orgs", "repos_url": "https://api.github.com/users/pietern/repos", "events_url": "https://api.github.com/users/pietern/events{/privacy}", "received_events_url": "https://api.github.com/users/pietern/received_events", "type": "User", "site_admin": false}, "created_at": "2018-11-16T00:25:34Z", "updated_at": "2018-11-16T00:25:34Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Rundown of what happens:</p>\n<ul>\n<li>Process 0 doesn't participate in this test, so sits on <code>Barrier.sync</code> and times out after 5 seconds.</li>\n<li>Process 1 times out waiting for the distributed barrier</li>\n<li>Process 2 errors out with a timing assertion</li>\n</ul>\n<p>The timing assertions are done on the process that is NOT <code>dest</code> in: <div class=\"border rounded-1 my-2\">\n  <div class=\"f6 px-3 py-2 lh-condensed border-bottom bg-gray-light\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/pytorch/pytorch/blob/0573169e2391d2e1b8f1730a2fffe1d99b3a96d8/test/test_distributed.py#L964-L979\">pytorch/test/test_distributed.py</a>\n    </p>\n    <p class=\"mb-0 text-gray-light\">\n        Lines 964 to 979\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/pytorch/pytorch/commit/0573169e2391d2e1b8f1730a2fffe1d99b3a96d8\">0573169</a>\n    </p>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L964\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"964\"></td>\n          <td id=\"LC964\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-k\">def</span> <span class=\"pl-en\">_test_barrier_helper</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>, <span class=\"pl-smi\">group</span>, <span class=\"pl-smi\">group_id</span>, <span class=\"pl-smi\">rank</span>): </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L965\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"965\"></td>\n          <td id=\"LC965\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     <span class=\"pl-c1\">WAIT_TIME</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">0.3</span>  <span class=\"pl-c\"><span class=\"pl-c\">#</span> seconds</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L966\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"966\"></td>\n          <td id=\"LC966\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">  </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L967\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"967\"></td>\n          <td id=\"LC967\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     <span class=\"pl-k\">for</span> dest <span class=\"pl-k\">in</span> group: </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L968\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"968\"></td>\n          <td id=\"LC968\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">         expected_time <span class=\"pl-k\">=</span> torch.DoubleTensor(<span class=\"pl-c1\">1</span>).fill_(<span class=\"pl-c1\">0.0</span>) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L969\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"969\"></td>\n          <td id=\"LC969\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">         <span class=\"pl-k\">if</span> dest <span class=\"pl-k\">==</span> rank: </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L970\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"970\"></td>\n          <td id=\"LC970\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">             expected_time.fill_(time.time() <span class=\"pl-k\">+</span> <span class=\"pl-c1\">WAIT_TIME</span>) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L971\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"971\"></td>\n          <td id=\"LC971\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">             dist.broadcast(expected_time, dest, group_id) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L972\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"972\"></td>\n          <td id=\"LC972\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">             time.sleep(<span class=\"pl-c1\">WAIT_TIME</span> <span class=\"pl-k\">+</span> <span class=\"pl-c1\">0.1</span>)  <span class=\"pl-c\"><span class=\"pl-c\">#</span> sleep a little bit longer</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L973\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"973\"></td>\n          <td id=\"LC973\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">             dist.barrier(group_id) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L974\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"974\"></td>\n          <td id=\"LC974\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">         <span class=\"pl-k\">else</span>: </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L975\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"975\"></td>\n          <td id=\"LC975\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">             dist.broadcast(expected_time, dest, group_id) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L976\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"976\"></td>\n          <td id=\"LC976\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">             dist.barrier(group_id) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L977\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"977\"></td>\n          <td id=\"LC977\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">             <span class=\"pl-c1\">self</span>.assertGreaterEqual(time.time(), expected_time[<span class=\"pl-c1\">0</span>]) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L978\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"978\"></td>\n          <td id=\"LC978\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">  </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L979\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"979\"></td>\n          <td id=\"LC979\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     <span class=\"pl-c1\">self</span>._barrier() </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n</p>\n<p>Because process 2 errors out <strong>after</strong> the barrier in the first iteration through this loop, process 1 will sit waiting in the second iteration through this loop, in the top most branch, given it is now <code>dest</code>, waiting on the broadcast to complete. The timing will be such that process 1 enters the broadcast before process 2 asserts and terminates, hitting a condition where the write operation inside the broadcast isn't signaled that its peer has vanished.</p>\n<p>Incidentally, I found out about this issue yesterday when working on better timeout support in Gloo, and have a PR at <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"380943058\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/facebookincubator/gloo/issues/150\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/facebookincubator/gloo/pull/150/hovercard\" href=\"https://github.com/facebookincubator/gloo/pull/150\">facebookincubator/gloo#150</a> that should fix this exact issue (in particular the path where pending buffers associated with pending send operations are signaled about any errors).</p>\n<p>Leaving this open until that PR is merged and a submodule bump is completed.</p>", "body_text": "Rundown of what happens:\n\nProcess 0 doesn't participate in this test, so sits on Barrier.sync and times out after 5 seconds.\nProcess 1 times out waiting for the distributed barrier\nProcess 2 errors out with a timing assertion\n\nThe timing assertions are done on the process that is NOT dest in: \n  \n    \n      pytorch/test/test_distributed.py\n    \n    \n        Lines 964 to 979\n      in\n      0573169\n    \n    \n    \n    \n\n        \n          \n           def _test_barrier_helper(self, group, group_id, rank): \n        \n\n        \n          \n               WAIT_TIME = 0.3  # seconds \n        \n\n        \n          \n            \n        \n\n        \n          \n               for dest in group: \n        \n\n        \n          \n                   expected_time = torch.DoubleTensor(1).fill_(0.0) \n        \n\n        \n          \n                   if dest == rank: \n        \n\n        \n          \n                       expected_time.fill_(time.time() + WAIT_TIME) \n        \n\n        \n          \n                       dist.broadcast(expected_time, dest, group_id) \n        \n\n        \n          \n                       time.sleep(WAIT_TIME + 0.1)  # sleep a little bit longer \n        \n\n        \n          \n                       dist.barrier(group_id) \n        \n\n        \n          \n                   else: \n        \n\n        \n          \n                       dist.broadcast(expected_time, dest, group_id) \n        \n\n        \n          \n                       dist.barrier(group_id) \n        \n\n        \n          \n                       self.assertGreaterEqual(time.time(), expected_time[0]) \n        \n\n        \n          \n            \n        \n\n        \n          \n               self._barrier() \n        \n    \n  \n\n\nBecause process 2 errors out after the barrier in the first iteration through this loop, process 1 will sit waiting in the second iteration through this loop, in the top most branch, given it is now dest, waiting on the broadcast to complete. The timing will be such that process 1 enters the broadcast before process 2 asserts and terminates, hitting a condition where the write operation inside the broadcast isn't signaled that its peer has vanished.\nIncidentally, I found out about this issue yesterday when working on better timeout support in Gloo, and have a PR at facebookincubator/gloo#150 that should fix this exact issue (in particular the path where pending buffers associated with pending send operations are signaled about any errors).\nLeaving this open until that PR is merged and a submodule bump is completed.", "body": "Rundown of what happens:\r\n\r\n* Process 0 doesn't participate in this test, so sits on `Barrier.sync` and times out after 5 seconds.\r\n* Process 1 times out waiting for the distributed barrier\r\n* Process 2 errors out with a timing assertion\r\n\r\nThe timing assertions are done on the process that is NOT `dest` in: https://github.com/pytorch/pytorch/blob/0573169e2391d2e1b8f1730a2fffe1d99b3a96d8/test/test_distributed.py#L964-L979\r\n\r\nBecause process 2 errors out **after** the barrier in the first iteration through this loop, process 1 will sit waiting in the second iteration through this loop, in the top most branch, given it is now `dest`, waiting on the broadcast to complete. The timing will be such that process 1 enters the broadcast before process 2 asserts and terminates, hitting a condition where the write operation inside the broadcast isn't signaled that its peer has vanished.\r\n\r\nIncidentally, I found out about this issue yesterday when working on better timeout support in Gloo, and have a PR at facebookincubator/gloo#150 that should fix this exact issue (in particular the path where pending buffers associated with pending send operations are signaled about any errors).\r\n\r\nLeaving this open until that PR is merged and a submodule bump is completed."}