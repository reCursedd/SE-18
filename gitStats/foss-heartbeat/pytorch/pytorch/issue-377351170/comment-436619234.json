{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/436619234", "html_url": "https://github.com/pytorch/pytorch/issues/13565#issuecomment-436619234", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/13565", "id": 436619234, "node_id": "MDEyOklzc3VlQ29tbWVudDQzNjYxOTIzNA==", "user": {"login": "Palmitoxico", "id": 8903198, "node_id": "MDQ6VXNlcjg5MDMxOTg=", "avatar_url": "https://avatars2.githubusercontent.com/u/8903198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Palmitoxico", "html_url": "https://github.com/Palmitoxico", "followers_url": "https://api.github.com/users/Palmitoxico/followers", "following_url": "https://api.github.com/users/Palmitoxico/following{/other_user}", "gists_url": "https://api.github.com/users/Palmitoxico/gists{/gist_id}", "starred_url": "https://api.github.com/users/Palmitoxico/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Palmitoxico/subscriptions", "organizations_url": "https://api.github.com/users/Palmitoxico/orgs", "repos_url": "https://api.github.com/users/Palmitoxico/repos", "events_url": "https://api.github.com/users/Palmitoxico/events{/privacy}", "received_events_url": "https://api.github.com/users/Palmitoxico/received_events", "type": "User", "site_admin": false}, "created_at": "2018-11-07T13:17:22Z", "updated_at": "2018-11-07T13:17:22Z", "author_association": "NONE", "body_html": "<p>I've refined the code above and applied to all instances of open / fstream calls:</p>\n<div class=\"highlight highlight-source-diff\"><pre><span class=\"pl-c1\">diff --git a/caffe2/utils/proto_utils.cc b/caffe2/utils/proto_utils.cc</span>\nindex 885d0a384..fd742edc1 100644\n<span class=\"pl-md\">--- a/caffe2/utils/proto_utils.cc</span>\n<span class=\"pl-mi1\">+++ b/caffe2/utils/proto_utils.cc</span>\n<span class=\"pl-mdr\">@@ -6,6 +6,11 @@</span>\n #include &lt;cerrno&gt;\n #include &lt;fstream&gt;\n \n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>#if defined (_MSC_VER)</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>#include &lt;locale&gt;</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>#include &lt;codecvt&gt;</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>#endif</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span></span>\n #include &lt;google/protobuf/io/coded_stream.h&gt;\n \n #ifndef CAFFE2_USE_LITE_PROTO\n<span class=\"pl-mdr\">@@ -48,7 +53,13 @@</span> C10_EXPORT bool IsSameDevice(const DeviceOption&amp; lhs, const DeviceOption&amp; rhs) {\n }\n \n C10_EXPORT bool ReadStringFromFile(const char* filename, string* str) {\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>#if defined (_MSC_VER)</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>  std::wstring_convert&lt;std::codecvt_utf8_utf16&lt;wchar_t&gt;&gt; converter;</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>  std::wstring wstr = converter.from_bytes(filename);</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>  std::ifstream ifs(&amp;wstr[0], std::ios::in);</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>#else</span>\n   std::ifstream ifs(filename, std::ios::in);\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>#endif</span>\n   if (!ifs) {\n     VLOG(1) &lt;&lt; \"File cannot be opened: \" &lt;&lt; filename\n             &lt;&lt; \" error: \" &lt;&lt; ifs.rdstate();\n<span class=\"pl-mdr\">@@ -63,7 +74,13 @@</span> C10_EXPORT bool ReadStringFromFile(const char* filename, string* str) {\n }\n \n C10_EXPORT bool WriteStringToFile(const string&amp; str, const char* filename) {\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>#if defined (_MSC_VER)</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>  std::wstring_convert&lt;std::codecvt_utf8_utf16&lt;wchar_t&gt;&gt; converter;</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>  std::wstring wstr = converter.from_bytes(filename);</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>  std::ofstream ofs(&amp;wstr[0], std::ios::out | std::ios::trunc);</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>#else</span>\n   std::ofstream ofs(filename, std::ios::out | std::ios::trunc);\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>#endif</span>\n   if (!ofs.is_open()) {\n     VLOG(1) &lt;&lt; \"File cannot be created: \" &lt;&lt; filename\n             &lt;&lt; \" error: \" &lt;&lt; ofs.rdstate();\n<span class=\"pl-mdr\">@@ -179,7 +196,13 @@</span> C10_EXPORT bool ParseProtoFromLargeString(const string&amp; str, Message* proto) {\n }\n \n C10_EXPORT bool ReadProtoFromTextFile(const char* filename, Message* proto) {\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>#if defined (_MSC_VER)</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>  std::wstring_convert&lt;std::codecvt_utf8_utf16&lt;wchar_t&gt;&gt; converter;</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>  std::wstring wstr = converter.from_bytes(filename);</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>  int fd = _wopen(&amp;wstr[0], O_RDONLY);</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>#else</span>\n   int fd = open(filename, O_RDONLY);\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>#endif</span>\n   CAFFE_ENFORCE_NE(fd, -1, \"File not found: \", filename);\n   FileInputStream* input = new FileInputStream(fd);\n   bool success = google::protobuf::TextFormat::Parse(input, proto);\n<span class=\"pl-mdr\">@@ -191,7 +214,13 @@</span> C10_EXPORT bool ReadProtoFromTextFile(const char* filename, Message* proto) {\n C10_EXPORT void WriteProtoToTextFile(\n     const Message&amp; proto,\n     const char* filename) {\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>#if defined (_MSC_VER)</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>  std::wstring_convert&lt;std::codecvt_utf8_utf16&lt;wchar_t&gt;&gt; converter;</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>  std::wstring wstr = converter.from_bytes(filename);</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>  int fd = _wopen(&amp;wstr[0], O_WRONLY | O_CREAT | O_TRUNC, 0644);</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>#else</span>\n   int fd = open(filename, O_WRONLY | O_CREAT | O_TRUNC, 0644);\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>#endif</span>\n   FileOutputStream* output = new FileOutputStream(fd);\n   CAFFE_ENFORCE(google::protobuf::TextFormat::Print(proto, output));\n   delete output;\n<span class=\"pl-mdr\">@@ -202,7 +231,9 @@</span> C10_EXPORT bool ReadProtoFromBinaryFile(\n     const char* filename,\n     MessageLite* proto) {\n #if defined (_MSC_VER)  // for MSC compiler binary flag needs to be specified\n<span class=\"pl-md\"><span class=\"pl-md\">-</span>  int fd = open(filename, O_RDONLY | O_BINARY);</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>  std::wstring_convert&lt;std::codecvt_utf8_utf16&lt;wchar_t&gt;&gt; converter;</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>  std::wstring wstr = converter.from_bytes(filename);</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>  int fd = _wopen(&amp;wstr[0], O_RDONLY | O_BINARY);</span>\n #else\n   int fd = open(filename, O_RDONLY);\n #endif\n<span class=\"pl-mdr\">@@ -222,7 +253,13 @@</span> C10_EXPORT bool ReadProtoFromBinaryFile(\n C10_EXPORT void WriteProtoToBinaryFile(\n     const MessageLite&amp; proto,\n     const char* filename) {\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>#if defined (_MSC_VER)</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>  std::wstring_convert&lt;std::codecvt_utf8_utf16&lt;wchar_t&gt;&gt; converter;</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>  std::wstring wstr = converter.from_bytes(filename);</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>  int fd = _wopen(&amp;wstr[0], O_WRONLY | O_CREAT | O_TRUNC, 0644);</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>#else</span>\n   int fd = open(filename, O_WRONLY | O_CREAT | O_TRUNC, 0644);\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>#endif</span>\n   CAFFE_ENFORCE_NE(\n       fd, -1, \"File cannot be created: \", filename, \" error number: \", errno);\n   std::unique_ptr&lt;ZeroCopyOutputStream&gt; raw_output(new FileOutputStream(fd));</pre></div>\n<p>My local tests didn't pointed any issues, though I haven't tested it extensively.</p>", "body_text": "I've refined the code above and applied to all instances of open / fstream calls:\ndiff --git a/caffe2/utils/proto_utils.cc b/caffe2/utils/proto_utils.cc\nindex 885d0a384..fd742edc1 100644\n--- a/caffe2/utils/proto_utils.cc\n+++ b/caffe2/utils/proto_utils.cc\n@@ -6,6 +6,11 @@\n #include <cerrno>\n #include <fstream>\n \n+#if defined (_MSC_VER)\n+#include <locale>\n+#include <codecvt>\n+#endif\n+\n #include <google/protobuf/io/coded_stream.h>\n \n #ifndef CAFFE2_USE_LITE_PROTO\n@@ -48,7 +53,13 @@ C10_EXPORT bool IsSameDevice(const DeviceOption& lhs, const DeviceOption& rhs) {\n }\n \n C10_EXPORT bool ReadStringFromFile(const char* filename, string* str) {\n+#if defined (_MSC_VER)\n+  std::wstring_convert<std::codecvt_utf8_utf16<wchar_t>> converter;\n+  std::wstring wstr = converter.from_bytes(filename);\n+  std::ifstream ifs(&wstr[0], std::ios::in);\n+#else\n   std::ifstream ifs(filename, std::ios::in);\n+#endif\n   if (!ifs) {\n     VLOG(1) << \"File cannot be opened: \" << filename\n             << \" error: \" << ifs.rdstate();\n@@ -63,7 +74,13 @@ C10_EXPORT bool ReadStringFromFile(const char* filename, string* str) {\n }\n \n C10_EXPORT bool WriteStringToFile(const string& str, const char* filename) {\n+#if defined (_MSC_VER)\n+  std::wstring_convert<std::codecvt_utf8_utf16<wchar_t>> converter;\n+  std::wstring wstr = converter.from_bytes(filename);\n+  std::ofstream ofs(&wstr[0], std::ios::out | std::ios::trunc);\n+#else\n   std::ofstream ofs(filename, std::ios::out | std::ios::trunc);\n+#endif\n   if (!ofs.is_open()) {\n     VLOG(1) << \"File cannot be created: \" << filename\n             << \" error: \" << ofs.rdstate();\n@@ -179,7 +196,13 @@ C10_EXPORT bool ParseProtoFromLargeString(const string& str, Message* proto) {\n }\n \n C10_EXPORT bool ReadProtoFromTextFile(const char* filename, Message* proto) {\n+#if defined (_MSC_VER)\n+  std::wstring_convert<std::codecvt_utf8_utf16<wchar_t>> converter;\n+  std::wstring wstr = converter.from_bytes(filename);\n+  int fd = _wopen(&wstr[0], O_RDONLY);\n+#else\n   int fd = open(filename, O_RDONLY);\n+#endif\n   CAFFE_ENFORCE_NE(fd, -1, \"File not found: \", filename);\n   FileInputStream* input = new FileInputStream(fd);\n   bool success = google::protobuf::TextFormat::Parse(input, proto);\n@@ -191,7 +214,13 @@ C10_EXPORT bool ReadProtoFromTextFile(const char* filename, Message* proto) {\n C10_EXPORT void WriteProtoToTextFile(\n     const Message& proto,\n     const char* filename) {\n+#if defined (_MSC_VER)\n+  std::wstring_convert<std::codecvt_utf8_utf16<wchar_t>> converter;\n+  std::wstring wstr = converter.from_bytes(filename);\n+  int fd = _wopen(&wstr[0], O_WRONLY | O_CREAT | O_TRUNC, 0644);\n+#else\n   int fd = open(filename, O_WRONLY | O_CREAT | O_TRUNC, 0644);\n+#endif\n   FileOutputStream* output = new FileOutputStream(fd);\n   CAFFE_ENFORCE(google::protobuf::TextFormat::Print(proto, output));\n   delete output;\n@@ -202,7 +231,9 @@ C10_EXPORT bool ReadProtoFromBinaryFile(\n     const char* filename,\n     MessageLite* proto) {\n #if defined (_MSC_VER)  // for MSC compiler binary flag needs to be specified\n-  int fd = open(filename, O_RDONLY | O_BINARY);\n+  std::wstring_convert<std::codecvt_utf8_utf16<wchar_t>> converter;\n+  std::wstring wstr = converter.from_bytes(filename);\n+  int fd = _wopen(&wstr[0], O_RDONLY | O_BINARY);\n #else\n   int fd = open(filename, O_RDONLY);\n #endif\n@@ -222,7 +253,13 @@ C10_EXPORT bool ReadProtoFromBinaryFile(\n C10_EXPORT void WriteProtoToBinaryFile(\n     const MessageLite& proto,\n     const char* filename) {\n+#if defined (_MSC_VER)\n+  std::wstring_convert<std::codecvt_utf8_utf16<wchar_t>> converter;\n+  std::wstring wstr = converter.from_bytes(filename);\n+  int fd = _wopen(&wstr[0], O_WRONLY | O_CREAT | O_TRUNC, 0644);\n+#else\n   int fd = open(filename, O_WRONLY | O_CREAT | O_TRUNC, 0644);\n+#endif\n   CAFFE_ENFORCE_NE(\n       fd, -1, \"File cannot be created: \", filename, \" error number: \", errno);\n   std::unique_ptr<ZeroCopyOutputStream> raw_output(new FileOutputStream(fd));\nMy local tests didn't pointed any issues, though I haven't tested it extensively.", "body": "I've refined the code above and applied to all instances of open / fstream calls:\r\n\r\n```diff\r\ndiff --git a/caffe2/utils/proto_utils.cc b/caffe2/utils/proto_utils.cc\r\nindex 885d0a384..fd742edc1 100644\r\n--- a/caffe2/utils/proto_utils.cc\r\n+++ b/caffe2/utils/proto_utils.cc\r\n@@ -6,6 +6,11 @@\r\n #include <cerrno>\r\n #include <fstream>\r\n \r\n+#if defined (_MSC_VER)\r\n+#include <locale>\r\n+#include <codecvt>\r\n+#endif\r\n+\r\n #include <google/protobuf/io/coded_stream.h>\r\n \r\n #ifndef CAFFE2_USE_LITE_PROTO\r\n@@ -48,7 +53,13 @@ C10_EXPORT bool IsSameDevice(const DeviceOption& lhs, const DeviceOption& rhs) {\r\n }\r\n \r\n C10_EXPORT bool ReadStringFromFile(const char* filename, string* str) {\r\n+#if defined (_MSC_VER)\r\n+  std::wstring_convert<std::codecvt_utf8_utf16<wchar_t>> converter;\r\n+  std::wstring wstr = converter.from_bytes(filename);\r\n+  std::ifstream ifs(&wstr[0], std::ios::in);\r\n+#else\r\n   std::ifstream ifs(filename, std::ios::in);\r\n+#endif\r\n   if (!ifs) {\r\n     VLOG(1) << \"File cannot be opened: \" << filename\r\n             << \" error: \" << ifs.rdstate();\r\n@@ -63,7 +74,13 @@ C10_EXPORT bool ReadStringFromFile(const char* filename, string* str) {\r\n }\r\n \r\n C10_EXPORT bool WriteStringToFile(const string& str, const char* filename) {\r\n+#if defined (_MSC_VER)\r\n+  std::wstring_convert<std::codecvt_utf8_utf16<wchar_t>> converter;\r\n+  std::wstring wstr = converter.from_bytes(filename);\r\n+  std::ofstream ofs(&wstr[0], std::ios::out | std::ios::trunc);\r\n+#else\r\n   std::ofstream ofs(filename, std::ios::out | std::ios::trunc);\r\n+#endif\r\n   if (!ofs.is_open()) {\r\n     VLOG(1) << \"File cannot be created: \" << filename\r\n             << \" error: \" << ofs.rdstate();\r\n@@ -179,7 +196,13 @@ C10_EXPORT bool ParseProtoFromLargeString(const string& str, Message* proto) {\r\n }\r\n \r\n C10_EXPORT bool ReadProtoFromTextFile(const char* filename, Message* proto) {\r\n+#if defined (_MSC_VER)\r\n+  std::wstring_convert<std::codecvt_utf8_utf16<wchar_t>> converter;\r\n+  std::wstring wstr = converter.from_bytes(filename);\r\n+  int fd = _wopen(&wstr[0], O_RDONLY);\r\n+#else\r\n   int fd = open(filename, O_RDONLY);\r\n+#endif\r\n   CAFFE_ENFORCE_NE(fd, -1, \"File not found: \", filename);\r\n   FileInputStream* input = new FileInputStream(fd);\r\n   bool success = google::protobuf::TextFormat::Parse(input, proto);\r\n@@ -191,7 +214,13 @@ C10_EXPORT bool ReadProtoFromTextFile(const char* filename, Message* proto) {\r\n C10_EXPORT void WriteProtoToTextFile(\r\n     const Message& proto,\r\n     const char* filename) {\r\n+#if defined (_MSC_VER)\r\n+  std::wstring_convert<std::codecvt_utf8_utf16<wchar_t>> converter;\r\n+  std::wstring wstr = converter.from_bytes(filename);\r\n+  int fd = _wopen(&wstr[0], O_WRONLY | O_CREAT | O_TRUNC, 0644);\r\n+#else\r\n   int fd = open(filename, O_WRONLY | O_CREAT | O_TRUNC, 0644);\r\n+#endif\r\n   FileOutputStream* output = new FileOutputStream(fd);\r\n   CAFFE_ENFORCE(google::protobuf::TextFormat::Print(proto, output));\r\n   delete output;\r\n@@ -202,7 +231,9 @@ C10_EXPORT bool ReadProtoFromBinaryFile(\r\n     const char* filename,\r\n     MessageLite* proto) {\r\n #if defined (_MSC_VER)  // for MSC compiler binary flag needs to be specified\r\n-  int fd = open(filename, O_RDONLY | O_BINARY);\r\n+  std::wstring_convert<std::codecvt_utf8_utf16<wchar_t>> converter;\r\n+  std::wstring wstr = converter.from_bytes(filename);\r\n+  int fd = _wopen(&wstr[0], O_RDONLY | O_BINARY);\r\n #else\r\n   int fd = open(filename, O_RDONLY);\r\n #endif\r\n@@ -222,7 +253,13 @@ C10_EXPORT bool ReadProtoFromBinaryFile(\r\n C10_EXPORT void WriteProtoToBinaryFile(\r\n     const MessageLite& proto,\r\n     const char* filename) {\r\n+#if defined (_MSC_VER)\r\n+  std::wstring_convert<std::codecvt_utf8_utf16<wchar_t>> converter;\r\n+  std::wstring wstr = converter.from_bytes(filename);\r\n+  int fd = _wopen(&wstr[0], O_WRONLY | O_CREAT | O_TRUNC, 0644);\r\n+#else\r\n   int fd = open(filename, O_WRONLY | O_CREAT | O_TRUNC, 0644);\r\n+#endif\r\n   CAFFE_ENFORCE_NE(\r\n       fd, -1, \"File cannot be created: \", filename, \" error number: \", errno);\r\n   std::unique_ptr<ZeroCopyOutputStream> raw_output(new FileOutputStream(fd));\r\n```\r\n\r\nMy local tests didn't pointed any issues, though I haven't tested it extensively."}