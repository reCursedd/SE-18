{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/188031140", "pull_request_review_id": 119925061, "id": 188031140, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4ODAzMTE0MA==", "diff_hunk": "@@ -0,0 +1,215 @@\n+#pragma once\n+\n+#include <torch/detail/any.h>\n+\n+#include <torch/csrc/autograd/variable.h>\n+#include <torch/csrc/utils/memory.h>\n+#include <torch/csrc/utils/variadic.h>\n+\n+#include <memory>\n+#include <type_traits>\n+#include <typeinfo>\n+#include <utility>\n+#include <vector>\n+\n+namespace torch {\n+namespace detail {\n+template <typename Head = void, typename... Tail>\n+void check_not_lvalue_references() {\n+  static_assert(\n+      !std::is_lvalue_reference<Head>::value ||\n+          std::is_const<typename std::remove_reference<Head>::type>::value,\n+      \"Modules stored inside AnyModule must not take (lvalue) references. Use pointers instead.\");\n+  check_not_lvalue_references<Tail...>();\n+}\n+\n+template <>\n+inline void check_not_lvalue_references<void>() {}\n+} // namespace detail\n+\n+namespace nn {\n+\n+/// A class to store a type erasd module, whose `forward()` method can be\n+/// invoked, with dynamic type checking.\n+class AnyModule {\n+ public:\n+  /// Constructs an `AnyModule` from a `shared_ptr` to concrete module object.\n+  template <typename ModuleType>\n+  explicit AnyModule(std::shared_ptr<ModuleType> module)\n+      : content_(make_holder(\n+            std::move(module),\n+            &std::remove_reference<ModuleType>::type::forward)) {}\n+\n+  /// Constructs an `AnyModule` from a concrete module object.\n+  template <typename ModuleType>\n+  explicit AnyModule(ModuleType&& module)\n+      : AnyModule(\n+            std::make_shared<ModuleType>(std::forward<ModuleType>(module))) {}\n+\n+  /// Move construction and assignment is allowed, and follows the default\n+  /// behavior of move for `std::unique_ptr`.\n+  AnyModule(AnyModule&&) = default;\n+  AnyModule& operator=(AnyModule&&) = default;\n+\n+  /// Copy is disallowed.\n+  AnyModule(const AnyModule& other) = delete;\n+  AnyModule& operator=(const AnyModule& other) = delete;\n+\n+  /// Invokes `forward()` on the contained module with the given arguments, and\n+  /// returns the return value as an `Any`. Use this method when chaining\n+  /// `AnyModule`s in a loop.\n+  template <\n+      typename... ArgumentTypes,\n+      typename = disable_for_t<Any, ArgumentTypes...>>\n+  Any forward(ArgumentTypes&&... arguments) {\n+    return content_->forward(std::forward<ArgumentTypes>(arguments)...);\n+  }\n+\n+  /// A type erased `forward()` that invokes the actual `forward()` with a value\n+  /// of any type, and returns a type erased object.\n+  Any forward(Any&& any) {\n+    std::vector<Any> vector;\n+    vector.push_back(std::move(any));\n+    return content_->forward(std::move(vector));\n+  }\n+\n+  /// Attempts to cast the underlying module to the given module type. Throws an\n+  /// exception if the types do not match.\n+  template <typename T, typename = enable_if_module<T>>\n+  T& get() {\n+    return get_<T>();\n+  }\n+\n+  /// Attempts to cast the underlying module to the given module type. Throws an\n+  /// exception if the types do not match.\n+  template <typename T, typename = enable_if_module<T>>\n+  const T& get() const {\n+    return get_<T>();\n+  }\n+\n+  /// Returns a `std::shared_ptr` whose dynamic type is that of the underlying\n+  /// module.\n+  std::shared_ptr<Module> ptr() const {\n+    return content_->ptr();\n+  }\n+\n+  /// Like `ptr()`, but casts the pointer to the given type.\n+  template <typename T, typename = enable_if_module<T>>\n+  std::shared_ptr<T> ptr() const {\n+    /// Call get() but discard the value, just to do the type checking.\n+    get<T>();\n+    return std::static_pointer_cast<T>(ptr());\n+  }\n+\n+  /// Returns the `type_info` object of the contained value.\n+  const std::type_info& type_info() const noexcept {\n+    return content_->type_info;\n+  }\n+\n+ private:\n+  /// The static type of the object we store in the `AnyModule`, which erases\n+  /// the actual type, but allows us to call `forward()` on the underlying\n+  /// module.\n+  struct Placeholder {", "path": "torch/csrc/api/include/torch/nn/modules/any.h", "position": null, "original_position": 113, "commit_id": "d4df9b3f7c6dbe1c6852a1352f7fb1854defe454", "original_commit_id": "2d6b6dc74466732d280aee505915e4387b7f9dc0", "user": {"login": "smessmer", "id": 2373925, "node_id": "MDQ6VXNlcjIzNzM5MjU=", "avatar_url": "https://avatars3.githubusercontent.com/u/2373925?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smessmer", "html_url": "https://github.com/smessmer", "followers_url": "https://api.github.com/users/smessmer/followers", "following_url": "https://api.github.com/users/smessmer/following{/other_user}", "gists_url": "https://api.github.com/users/smessmer/gists{/gist_id}", "starred_url": "https://api.github.com/users/smessmer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smessmer/subscriptions", "organizations_url": "https://api.github.com/users/smessmer/orgs", "repos_url": "https://api.github.com/users/smessmer/repos", "events_url": "https://api.github.com/users/smessmer/events{/privacy}", "received_events_url": "https://api.github.com/users/smessmer/received_events", "type": "User", "site_admin": false}, "body": "I wouldn't implement this stuff twice. Have you considered using an `Any` member inside of `AnyModule` to solve this?", "created_at": "2018-05-14T17:16:07Z", "updated_at": "2018-11-23T15:44:02Z", "html_url": "https://github.com/pytorch/pytorch/pull/7508#discussion_r188031140", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/7508", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/188031140"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/7508#discussion_r188031140"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/7508"}}, "body_html": "<p>I wouldn't implement this stuff twice. Have you considered using an <code>Any</code> member inside of <code>AnyModule</code> to solve this?</p>", "body_text": "I wouldn't implement this stuff twice. Have you considered using an Any member inside of AnyModule to solve this?"}