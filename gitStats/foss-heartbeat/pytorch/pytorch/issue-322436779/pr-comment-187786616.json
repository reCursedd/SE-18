{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/187786616", "pull_request_review_id": 119640403, "id": 187786616, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4Nzc4NjYxNg==", "diff_hunk": "@@ -0,0 +1,172 @@\n+#pragma once\n+\n+#include <torch/nn/module.h>\n+#include <torch/nn/modules/any.h>\n+\n+#include <ATen/Error.h>\n+\n+#include <cstdint>\n+#include <memory>\n+#include <string>\n+#include <type_traits>\n+#include <utility>\n+#include <vector>\n+\n+namespace torch { namespace nn {\n+\n+/// A `Sequential` module is a container for any number of other modules. Its\n+/// `forward()` method chains outputs to inputs and returns the final output.\n+/// The `Sequential` class reference semantics.\n+class Sequential : public CloneableModule<Sequential> {\n+ public:\n+  using Iterator = std::vector<std::shared_ptr<AnyModule>>::iterator;\n+\n+  /// Constructs the `Sequential` from a pack of modules. Each module can either\n+  /// be a plain value (e.g. `Linear`) or a boxed value (e.g.", "path": "torch/csrc/api/include/torch/nn/modules/sequential.h", "position": 28, "original_position": 25, "commit_id": "d4df9b3f7c6dbe1c6852a1352f7fb1854defe454", "original_commit_id": "fe047cffdf6d61f87fd56f978cec286719ac01bc", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "If it's unboxed, does Sequential take ownership of the module in this case? If we move all the parameters out of the module, then the original one is no longer usable? This seems to violate the Python usability principle.", "created_at": "2018-05-13T01:18:35Z", "updated_at": "2018-11-23T15:43:58Z", "html_url": "https://github.com/pytorch/pytorch/pull/7508#discussion_r187786616", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/7508", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/187786616"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/7508#discussion_r187786616"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/7508"}}, "body_html": "<p>If it's unboxed, does Sequential take ownership of the module in this case? If we move all the parameters out of the module, then the original one is no longer usable? This seems to violate the Python usability principle.</p>", "body_text": "If it's unboxed, does Sequential take ownership of the module in this case? If we move all the parameters out of the module, then the original one is no longer usable? This seems to violate the Python usability principle."}