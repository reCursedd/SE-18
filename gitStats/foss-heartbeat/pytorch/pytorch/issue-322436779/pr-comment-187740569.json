{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/187740569", "pull_request_review_id": 119589108, "id": 187740569, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4Nzc0MDU2OQ==", "diff_hunk": "@@ -0,0 +1,172 @@\n+#pragma once\n+\n+#include <torch/nn/module.h>\n+#include <torch/nn/modules/any.h>\n+\n+#include <ATen/Error.h>\n+\n+#include <cstdint>\n+#include <memory>\n+#include <string>\n+#include <type_traits>\n+#include <utility>\n+#include <vector>\n+\n+namespace torch { namespace nn {\n+\n+/// A `Sequential` module is a container for any number of other modules. Its\n+/// `forward()` method chains outputs to inputs and returns the final output.\n+/// The `Sequential` class reference semantics.\n+class Sequential : public CloneableModule<Sequential> {\n+ public:\n+  using Iterator = std::vector<std::shared_ptr<AnyModule>>::iterator;\n+\n+  /// Constructs the `Sequential` from a pack of modules. Each module can either\n+  /// be a plain value (e.g. `Linear`) or a boxed value (e.g.\n+  /// `shared_ptr<Linear>`). Unboxed modules will be moved into `shared_ptr`s\n+  /// internally.\n+  template <\n+      typename... Modules,\n+      typename = disable_for_t<Sequential, Modules...>>\n+  explicit Sequential(Modules&&... modules) {\n+    push_back(std::forward<Modules>(modules)...);\n+  }\n+\n+  /// Feeds the `inputs` to the first module, then chains the output of each\n+  /// module with the input of the next, in order of construction.\n+  template <typename ReturnType, typename... ArgumentTypes>\n+  ReturnType forward(ArgumentTypes&&... arguments) {\n+    AT_CHECK(!is_empty(), \"Cannot call forward() on an empty Sequential\");", "path": "torch/csrc/api/include/torch/nn/modules/sequential.h", "position": null, "original_position": 39, "commit_id": "d4df9b3f7c6dbe1c6852a1352f7fb1854defe454", "original_commit_id": "be2486974a07debcd3a99582c00960895666cffc", "user": {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, "body": "Shouldn't an empty sequential be the identity function?", "created_at": "2018-05-11T21:45:37Z", "updated_at": "2018-11-23T15:43:58Z", "html_url": "https://github.com/pytorch/pytorch/pull/7508#discussion_r187740569", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/7508", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/187740569"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/7508#discussion_r187740569"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/7508"}}, "body_html": "<p>Shouldn't an empty sequential be the identity function?</p>", "body_text": "Shouldn't an empty sequential be the identity function?"}