{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/188075144", "pull_request_review_id": 119981933, "id": 188075144, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4ODA3NTE0NA==", "diff_hunk": "@@ -0,0 +1,138 @@\n+#pragma once\n+\n+#include <torch/csrc/utils/memory.h>\n+#include <torch/csrc/utils/variadic.h>\n+\n+#include <ATen/Error.h>\n+\n+#include <memory>\n+#include <typeinfo>\n+#include <utility>\n+\n+namespace torch {\n+class Any;\n+namespace detail {\n+template <typename T>\n+Any make_any(T&& value);\n+} // namespace detail\n+} // namespace torch\n+\n+namespace torch {\n+/// A simplified implementation of `std::any` or `boost::any` which stores a\n+/// type erased object, whose concrete value can be retrieved at runtime by\n+/// checking if the `typeid()` of a requested type matches the `typeid()` of the\n+/// object stored. It is simplified in that it does not handle copying, as we do\n+/// not require it for our use cases. Moves are sufficient.\n+class Any {\n+ public:\n+  /// Default construction is disallowed. Thus our invariant: an `Any` contains\n+  /// an object at all times, from its construction, to its destruction.\n+  Any() = delete;\n+\n+  /// Move construction and assignment is allowed, and follows the default\n+  /// behavior of move for `std::unique_ptr`.\n+  Any(Any&&) = default;\n+  Any& operator=(Any&&) = default;\n+\n+  /// Copy is disallowed, because we don't need it.\n+  Any(const Any& other) = delete;\n+  Any& operator=(const Any& other) = delete;\n+\n+  /// Returns the value contained in the `Any` if the type passed as template\n+  /// parameter matches the type of the object stored, and returns a null\n+  /// pointer otherwise.\n+  template <typename T>\n+  T* try_get() {\n+    static_assert(\n+        !std::is_reference<T>::value,\n+        \"Any stores decayed types, you cannot cast it to a reference type\");\n+    static_assert(\n+        !std::is_array<T>::value,\n+        \"Any stores decayed types, you must cast it to T* instead of T[]\");\n+    if (typeid(T).hash_code() == type_info().hash_code()) {", "path": "torch/csrc/api/include/torch/detail/any.h", "position": null, "original_position": 52, "commit_id": "d4df9b3f7c6dbe1c6852a1352f7fb1854defe454", "original_commit_id": "2d6b6dc74466732d280aee505915e4387b7f9dc0", "user": {"login": "goldsborough", "id": 6429851, "node_id": "MDQ6VXNlcjY0Mjk4NTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/6429851?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goldsborough", "html_url": "https://github.com/goldsborough", "followers_url": "https://api.github.com/users/goldsborough/followers", "following_url": "https://api.github.com/users/goldsborough/following{/other_user}", "gists_url": "https://api.github.com/users/goldsborough/gists{/gist_id}", "starred_url": "https://api.github.com/users/goldsborough/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goldsborough/subscriptions", "organizations_url": "https://api.github.com/users/goldsborough/orgs", "repos_url": "https://api.github.com/users/goldsborough/repos", "events_url": "https://api.github.com/users/goldsborough/events{/privacy}", "received_events_url": "https://api.github.com/users/goldsborough/received_events", "type": "User", "site_admin": false}, "body": "So cppreference says:\r\n> There is no guarantee that the same std::type_info instance will be referred to by all evaluations of the typeid expression on the same type, although std::type_info::hash_code of those type_info objects would be identical, as would be their std::type_index.\r\n\r\nAt the same time, libc++ just compares the values returned by `typeid()`: https://github.com/llvm-mirror/libcxx/blob/master/include/any#L166\r\n\r\n`hash_code()` sounds safer to me?", "created_at": "2018-05-14T19:46:57Z", "updated_at": "2018-11-23T15:44:02Z", "html_url": "https://github.com/pytorch/pytorch/pull/7508#discussion_r188075144", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/7508", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/188075144"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/7508#discussion_r188075144"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/7508"}}, "body_html": "<p>So cppreference says:</p>\n<blockquote>\n<p>There is no guarantee that the same std::type_info instance will be referred to by all evaluations of the typeid expression on the same type, although std::type_info::hash_code of those type_info objects would be identical, as would be their std::type_index.</p>\n</blockquote>\n<p>At the same time, libc++ just compares the values returned by <code>typeid()</code>: <a href=\"https://github.com/llvm-mirror/libcxx/blob/master/include/any#L166\">https://github.com/llvm-mirror/libcxx/blob/master/include/any#L166</a></p>\n<p><code>hash_code()</code> sounds safer to me?</p>", "body_text": "So cppreference says:\n\nThere is no guarantee that the same std::type_info instance will be referred to by all evaluations of the typeid expression on the same type, although std::type_info::hash_code of those type_info objects would be identical, as would be their std::type_index.\n\nAt the same time, libc++ just compares the values returned by typeid(): https://github.com/llvm-mirror/libcxx/blob/master/include/any#L166\nhash_code() sounds safer to me?", "in_reply_to_id": 188019200}