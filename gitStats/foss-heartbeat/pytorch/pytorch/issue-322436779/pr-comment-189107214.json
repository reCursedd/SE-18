{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/189107214", "pull_request_review_id": 121223557, "id": 189107214, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4OTEwNzIxNA==", "diff_hunk": "@@ -0,0 +1,200 @@\n+#include <catch.hpp>\n+\n+#include <torch/torch.h>\n+\n+#include <torch/detail/any.h>\n+#include <torch/nn/modules/any.h>\n+\n+#include <algorithm>\n+#include <string>\n+\n+using namespace torch;\n+using namespace torch::nn;\n+using namespace torch::detail;\n+\n+using Catch::StartsWith;\n+\n+TEST_CASE(\"any\") {\n+  SECTION(\"gets the correct value for the right type\") {\n+    SECTION(\"int\") {\n+      auto any = make_any(5);\n+      // const and non-const types have the same typeid()\n+      REQUIRE(any.try_get<int>() != nullptr);\n+      REQUIRE(any.try_get<const int>() != nullptr);\n+      REQUIRE(any.get<int>() == 5);\n+    }\n+    SECTION(\"const int\") {\n+      auto any = make_any(5);\n+      REQUIRE(any.try_get<const int>() != nullptr);\n+      REQUIRE(any.try_get<int>() != nullptr);\n+      REQUIRE(any.get<const int>() == 5);\n+    }\n+    SECTION(\"const char*\") {\n+      auto any = make_any(\"hello\");\n+      REQUIRE(any.try_get<const char*>() != nullptr);\n+      REQUIRE(any.get<const char*>() == std::string(\"hello\"));\n+    }\n+    SECTION(\"std::string\") {\n+      auto any = make_any(std::string(\"hello\"));\n+      REQUIRE(any.try_get<std::string>() != nullptr);\n+      REQUIRE(any.get<std::string>() == \"hello\");\n+    }\n+    SECTION(\"pointers\") {\n+      std::string s(\"hello\");\n+      std::string* p = &s;\n+      auto any = make_any(p);\n+      REQUIRE(any.try_get<std::string*>() != nullptr);\n+      REQUIRE(*any.get<std::string*>() == \"hello\");\n+    }\n+    SECTION(\"references\") {\n+      std::string s(\"hello\");\n+      const std::string& t = s;\n+      auto any = make_any(t);\n+      REQUIRE(any.try_get<std::string>() != nullptr);\n+      REQUIRE(any.get<std::string>() == \"hello\");\n+    }\n+  }\n+  SECTION(\"move is allowed\") {\n+    auto any = make_any(5);\n+    SECTION(\"construction\") {\n+      auto copy = make_any(std::move(any));\n+      REQUIRE(copy.try_get<int>() != nullptr);\n+      REQUIRE(copy.get<int>() == 5);\n+    }\n+    SECTION(\"assignment\") {\n+      auto copy = make_any(10);\n+      copy = std::move(any);\n+      REQUIRE(copy.try_get<int>() != nullptr);\n+      REQUIRE(copy.get<int>() == 5);\n+    }\n+  }\n+  SECTION(\"type_info is correct\") {\n+    SECTION(\"int\") {\n+      auto any = make_any(5);\n+      REQUIRE(any.type_info().hash_code() == typeid(int).hash_code());\n+    }\n+    SECTION(\"const char\") {\n+      auto any = make_any(\"hello\");\n+      REQUIRE(any.type_info().hash_code() == typeid(const char*).hash_code());\n+    }\n+    SECTION(\"std::string\") {\n+      auto any = make_any(std::string(\"hello\"));\n+      REQUIRE(any.type_info().hash_code() == typeid(std::string).hash_code());\n+    }\n+  }\n+}\n+\n+TEST_CASE(\"any-module\") {\n+  SECTION(\"int(int)\") {\n+    struct M : nn::Module {\n+      int forward(int x) {\n+        return x;\n+      }\n+    };\n+    AnyModule any(M{});\n+    REQUIRE(any.forward(5).get<int>() == 5);\n+  }\n+  SECTION(\"const char*(const char*)\") {\n+    struct M : nn::Module {\n+      const char* forward(const char* x) {\n+        return x;\n+      }\n+    };\n+    AnyModule any(M{});\n+    REQUIRE(any.forward(\"hello\").get<const char*>() == std::string(\"hello\"));\n+  }\n+\n+  SECTION(\"string(int, const double)\") {\n+    struct M : nn::Module {\n+      std::string forward(int x, const double f) {\n+        return std::to_string(static_cast<int>(x + f));\n+      }\n+    };\n+    AnyModule any(M{});\n+    int x = 4;\n+    REQUIRE(any.forward(x, 3.14).get<std::string>() == std::string(\"7\"));\n+  }\n+\n+  SECTION(\"Variable(string, const string&, string&&)\") {\n+    struct M : nn::Module {\n+      autograd::Variable\n+      forward(std::string a, const std::string& b, std::string&& c) {\n+        const auto s = a + b + c;\n+        return autograd::make_variable(\n+            at::ones(at::CPU(at::kFloat), {static_cast<int64_t>(s.size())}));\n+      }\n+    };\n+    AnyModule any(M{});\n+    REQUIRE(\n+        any.forward(std::string(\"a\"), std::string(\"ab\"), std::string(\"abc\"))\n+            .get<autograd::Variable>()\n+            .sum()\n+            .toCInt() == 6);\n+  }\n+  SECTION(\"error cases\") {\n+    struct M : nn::Module {\n+      int forward(float x) {\n+        return x;\n+      }\n+    };\n+    AnyModule any(M{});\n+    REQUIRE_THROWS_WITH(\n+        any.forward(5.0),", "path": "test/cpp/api/any.cpp", "position": 83, "original_position": 142, "commit_id": "d4df9b3f7c6dbe1c6852a1352f7fb1854defe454", "original_commit_id": "fe047cffdf6d61f87fd56f978cec286719ac01bc", "user": {"login": "ebetica", "id": 3605224, "node_id": "MDQ6VXNlcjM2MDUyMjQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/3605224?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebetica", "html_url": "https://github.com/ebetica", "followers_url": "https://api.github.com/users/ebetica/followers", "following_url": "https://api.github.com/users/ebetica/following{/other_user}", "gists_url": "https://api.github.com/users/ebetica/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebetica/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebetica/subscriptions", "organizations_url": "https://api.github.com/users/ebetica/orgs", "repos_url": "https://api.github.com/users/ebetica/repos", "events_url": "https://api.github.com/users/ebetica/events{/privacy}", "received_events_url": "https://api.github.com/users/ebetica/received_events", "type": "User", "site_admin": false}, "body": "I think implicit conversions would be cool. Another quality of life thing is to make a default `.get()` return an `at::Tensor`, since in a lot of cases you get 1-var input and outputs.", "created_at": "2018-05-17T21:29:10Z", "updated_at": "2018-11-23T15:44:15Z", "html_url": "https://github.com/pytorch/pytorch/pull/7508#discussion_r189107214", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/7508", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/189107214"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/7508#discussion_r189107214"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/7508"}}, "body_html": "<p>I think implicit conversions would be cool. Another quality of life thing is to make a default <code>.get()</code> return an <code>at::Tensor</code>, since in a lot of cases you get 1-var input and outputs.</p>", "body_text": "I think implicit conversions would be cool. Another quality of life thing is to make a default .get() return an at::Tensor, since in a lot of cases you get 1-var input and outputs.", "in_reply_to_id": 187787530}