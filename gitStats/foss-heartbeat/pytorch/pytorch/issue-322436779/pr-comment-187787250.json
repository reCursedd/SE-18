{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/187787250", "pull_request_review_id": 119640913, "id": 187787250, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4Nzc4NzI1MA==", "diff_hunk": "@@ -0,0 +1,138 @@\n+#pragma once\n+\n+#include <torch/csrc/utils/memory.h>\n+#include <torch/csrc/utils/variadic.h>\n+\n+#include <ATen/Error.h>\n+\n+#include <memory>\n+#include <typeinfo>\n+#include <utility>\n+\n+namespace torch {\n+class Any;\n+namespace detail {\n+template <typename T>\n+Any make_any(T&& value);\n+} // namespace detail\n+} // namespace torch\n+\n+namespace torch {\n+/// A simplified implementation of `std::any` or `boost::any` which stores a\n+/// type erased object, whose concrete value can be retrieved at runtime by\n+/// checking if the `typeid()` of a requested type matches the `typeid()` of the\n+/// object stored. It is simplified in that it does not handle copying, as we do\n+/// not require it for our use cases. Moves are sufficient.\n+class Any {\n+ public:\n+  /// Default construction is disallowed. Thus our invariant: an `Any` contains\n+  /// an object at all times, from its construction, to its destruction.\n+  Any() = delete;\n+\n+  /// Move construction and assignment is allowed, and follows the default\n+  /// behavior of move for `std::unique_ptr`.\n+  Any(Any&&) = default;\n+  Any& operator=(Any&&) = default;\n+\n+  /// Copy is disallowed, because we don't need it.\n+  Any(const Any& other) = delete;\n+  Any& operator=(const Any& other) = delete;\n+\n+  /// Returns the value contained in the `Any` if the type passed as template\n+  /// parameter matches the type of the object stored, and returns a null\n+  /// pointer otherwise.\n+  template <typename T>\n+  T* try_get() {\n+    static_assert(\n+        !std::is_reference<T>::value,\n+        \"Any stores decayed types, you cannot cast it to a reference type\");\n+    static_assert(\n+        !std::is_array<T>::value,\n+        \"Any stores decayed types, you must cast it to T* instead of T[]\");\n+    if (typeid(T).hash_code() == type_info().hash_code()) {\n+      return &static_cast<Holder<T>&>(*content_).value;\n+    }\n+    return nullptr;\n+  }\n+\n+  template <typename T>\n+  T get() {\n+    if (auto* value = try_get<T>()) {\n+      return *value;\n+    }\n+    AT_ERROR(\n+        \"Attempted to cast Any to\",\n+        at::demangle(typeid(T).name()),\n+        \", but its contained type is \",\n+        at::demangle(type_info().name()));\n+  }\n+\n+  /// Returns the `type_info` object of the contained value.\n+  const std::type_info& type_info() const noexcept {\n+    return content_->type_info;\n+  }\n+\n+ private:\n+  /// Constructs the `Any` from any type.\n+  template <typename T>\n+  explicit Any(T&& value)\n+      : content_(\n+            torch::make_unique<Holder<decay_t<T>>>(std::forward<T>(value))) {}\n+\n+  /// `Any` is a public type, but its construction is only allowed via this\n+  /// \"private\" function in the `detail` namespace.\n+  template <typename T>\n+  friend Any detail::make_any(T&& value);\n+\n+  /// The static type of the object we store in the `Any`, which erases the\n+  /// actual object's type, allowing us only to check the `type_info` of the\n+  /// type stored in the dynamic type.\n+  struct Placeholder {\n+    explicit Placeholder(const std::type_info& type_info_) noexcept\n+        : type_info(type_info_) {}\n+    virtual ~Placeholder() = default;\n+    const std::type_info& type_info;\n+  };\n+\n+  /// The dynamic type of the object we store in the `Any`, which hides the\n+  /// actual object we have erased in this `Any`.\n+  template <typename T>\n+  struct Holder : public Placeholder {\n+    /// A template because T&& would not be universal reference here.\n+    template <typename U>\n+    explicit Holder(U&& value_) noexcept\n+        : Placeholder(typeid(T)), value(std::forward<U>(value_)) {}", "path": "torch/csrc/api/include/torch/detail/any.h", "position": null, "original_position": 104, "commit_id": "d4df9b3f7c6dbe1c6852a1352f7fb1854defe454", "original_commit_id": "fe047cffdf6d61f87fd56f978cec286719ac01bc", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "RTTI! Good to note this out in a comment.", "created_at": "2018-05-13T02:01:24Z", "updated_at": "2018-11-23T15:43:59Z", "html_url": "https://github.com/pytorch/pytorch/pull/7508#discussion_r187787250", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/7508", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/187787250"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/7508#discussion_r187787250"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/7508"}}, "body_html": "<p>RTTI! Good to note this out in a comment.</p>", "body_text": "RTTI! Good to note this out in a comment."}