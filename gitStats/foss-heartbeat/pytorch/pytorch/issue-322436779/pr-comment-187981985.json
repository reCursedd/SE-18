{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/187981985", "pull_request_review_id": 119868774, "id": 187981985, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4Nzk4MTk4NQ==", "diff_hunk": "@@ -0,0 +1,172 @@\n+#pragma once\n+\n+#include <torch/nn/module.h>\n+#include <torch/nn/modules/any.h>\n+\n+#include <ATen/Error.h>\n+\n+#include <cstdint>\n+#include <memory>\n+#include <string>\n+#include <type_traits>\n+#include <utility>\n+#include <vector>\n+\n+namespace torch { namespace nn {\n+\n+/// A `Sequential` module is a container for any number of other modules. Its\n+/// `forward()` method chains outputs to inputs and returns the final output.\n+/// The `Sequential` class reference semantics.\n+class Sequential : public CloneableModule<Sequential> {\n+ public:\n+  using Iterator = std::vector<std::shared_ptr<AnyModule>>::iterator;\n+\n+  /// Constructs the `Sequential` from a pack of modules. Each module can either\n+  /// be a plain value (e.g. `Linear`) or a boxed value (e.g.", "path": "torch/csrc/api/include/torch/nn/modules/sequential.h", "position": 28, "original_position": 25, "commit_id": "d4df9b3f7c6dbe1c6852a1352f7fb1854defe454", "original_commit_id": "fe047cffdf6d61f87fd56f978cec286719ac01bc", "user": {"login": "goldsborough", "id": 6429851, "node_id": "MDQ6VXNlcjY0Mjk4NTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/6429851?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goldsborough", "html_url": "https://github.com/goldsborough", "followers_url": "https://api.github.com/users/goldsborough/followers", "following_url": "https://api.github.com/users/goldsborough/following{/other_user}", "gists_url": "https://api.github.com/users/goldsborough/gists{/gist_id}", "starred_url": "https://api.github.com/users/goldsborough/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goldsborough/subscriptions", "organizations_url": "https://api.github.com/users/goldsborough/orgs", "repos_url": "https://api.github.com/users/goldsborough/repos", "events_url": "https://api.github.com/users/goldsborough/events{/privacy}", "received_events_url": "https://api.github.com/users/goldsborough/received_events", "type": "User", "site_admin": false}, "body": "No if you pass an lvalue (i.e. not a temporary) into `push_back`, it will just copy it into a newly created boxed instance internally. Since `Variable`/`Tensor` is itself refcounted, this copy would lead to shared ownership of variables. If you pass a temporary or `std::move` a module before passing it in, the `Sequential` will take ownership.\r\n\r\nI need to think a bit harder about what ownership semantics modules should have in general: value, reference, copy etc.", "created_at": "2018-05-14T14:49:41Z", "updated_at": "2018-11-23T15:44:00Z", "html_url": "https://github.com/pytorch/pytorch/pull/7508#discussion_r187981985", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/7508", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/187981985"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/7508#discussion_r187981985"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/7508"}}, "body_html": "<p>No if you pass an lvalue (i.e. not a temporary) into <code>push_back</code>, it will just copy it into a newly created boxed instance internally. Since <code>Variable</code>/<code>Tensor</code> is itself refcounted, this copy would lead to shared ownership of variables. If you pass a temporary or <code>std::move</code> a module before passing it in, the <code>Sequential</code> will take ownership.</p>\n<p>I need to think a bit harder about what ownership semantics modules should have in general: value, reference, copy etc.</p>", "body_text": "No if you pass an lvalue (i.e. not a temporary) into push_back, it will just copy it into a newly created boxed instance internally. Since Variable/Tensor is itself refcounted, this copy would lead to shared ownership of variables. If you pass a temporary or std::move a module before passing it in, the Sequential will take ownership.\nI need to think a bit harder about what ownership semantics modules should have in general: value, reference, copy etc.", "in_reply_to_id": 187786616}