{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/188029317", "pull_request_review_id": 119925061, "id": 188029317, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4ODAyOTMxNw==", "diff_hunk": "@@ -0,0 +1,172 @@\n+#pragma once\n+\n+#include <torch/nn/module.h>\n+#include <torch/nn/modules/any.h>\n+\n+#include <ATen/Error.h>\n+\n+#include <cstdint>\n+#include <memory>\n+#include <string>\n+#include <type_traits>\n+#include <utility>\n+#include <vector>\n+\n+namespace torch { namespace nn {\n+\n+/// A `Sequential` module is a container for any number of other modules. Its\n+/// `forward()` method chains outputs to inputs and returns the final output.\n+/// The `Sequential` class reference semantics.\n+class Sequential : public CloneableModule<Sequential> {\n+ public:\n+  using Iterator = std::vector<std::shared_ptr<AnyModule>>::iterator;\n+\n+  /// Constructs the `Sequential` from a pack of modules. Each module can either\n+  /// be a plain value (e.g. `Linear`) or a boxed value (e.g.\n+  /// `shared_ptr<Linear>`). Unboxed modules will be moved into `shared_ptr`s\n+  /// internally.\n+  template <\n+      typename... Modules,\n+      typename = disable_for_t<Sequential, Modules...>>\n+  explicit Sequential(Modules&&... modules) {\n+    push_back(std::forward<Modules>(modules)...);\n+  }\n+\n+  /// Feeds the `inputs` to the first module, then chains the output of each\n+  /// module with the input of the next, in order of construction.\n+  template <typename ReturnType, typename... ArgumentTypes>\n+  ReturnType forward(ArgumentTypes&&... arguments) {\n+    AT_CHECK(!is_empty(), \"Cannot call forward() on an empty Sequential\");\n+\n+    auto iterator = modules_.begin();\n+    auto input =\n+        (*iterator)->forward(std::forward<ArgumentTypes>(arguments)...);\n+\n+    for (++iterator; iterator != modules_.end(); ++iterator) {\n+      input = (*iterator)->forward(std::move(input));\n+    }\n+\n+    // Check the return value and give a nice error message if the requsted\n+    // return type was incorrect.\n+    if (auto* return_value = input.template try_get<ReturnType>()) {\n+      return std::move(*return_value);\n+    }\n+    AT_ERROR(\n+        \"The type of the return value is \",\n+        at::demangle(input.type_info().name()),\n+        \", but you asked for type \",\n+        at::demangle(typeid(ReturnType).name()));\n+  }\n+\n+  /// Adds a new (boxed) `Module` to the `Sequential` container.\n+  template <typename ModuleType>\n+  void push_back(std::shared_ptr<ModuleType> module_ptr) {\n+    // Nesting Sequential doesn't work because `forward()`'s return type is\n+    // templatized, so it'll give a nasty compiler error.", "path": "torch/csrc/api/include/torch/nn/modules/sequential.h", "position": 73, "original_position": 65, "commit_id": "d4df9b3f7c6dbe1c6852a1352f7fb1854defe454", "original_commit_id": "2d6b6dc74466732d280aee505915e4387b7f9dc0", "user": {"login": "smessmer", "id": 2373925, "node_id": "MDQ6VXNlcjIzNzM5MjU=", "avatar_url": "https://avatars3.githubusercontent.com/u/2373925?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smessmer", "html_url": "https://github.com/smessmer", "followers_url": "https://api.github.com/users/smessmer/followers", "following_url": "https://api.github.com/users/smessmer/following{/other_user}", "gists_url": "https://api.github.com/users/smessmer/gists{/gist_id}", "starred_url": "https://api.github.com/users/smessmer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smessmer/subscriptions", "organizations_url": "https://api.github.com/users/smessmer/orgs", "repos_url": "https://api.github.com/users/smessmer/repos", "events_url": "https://api.github.com/users/smessmer/events{/privacy}", "received_events_url": "https://api.github.com/users/smessmer/received_events", "type": "User", "site_admin": false}, "body": "It wouldn't be too hard to make this possible, not sure if it's needed though.", "created_at": "2018-05-14T17:09:45Z", "updated_at": "2018-11-23T15:44:02Z", "html_url": "https://github.com/pytorch/pytorch/pull/7508#discussion_r188029317", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/7508", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/188029317"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/7508#discussion_r188029317"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/7508"}}, "body_html": "<p>It wouldn't be too hard to make this possible, not sure if it's needed though.</p>", "body_text": "It wouldn't be too hard to make this possible, not sure if it's needed though."}