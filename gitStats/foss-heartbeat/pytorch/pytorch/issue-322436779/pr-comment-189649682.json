{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/189649682", "pull_request_review_id": 121870013, "id": 189649682, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4OTY0OTY4Mg==", "diff_hunk": "@@ -0,0 +1,347 @@\n+#pragma once\n+\n+#include <torch/detail/static.h>\n+#include <torch/nn/module.h>\n+\n+#include <torch/csrc/autograd/variable.h>\n+#include <torch/csrc/utils/memory.h>\n+#include <torch/csrc/utils/variadic.h>\n+\n+#include <memory>\n+#include <type_traits>\n+#include <typeinfo>\n+#include <utility>\n+#include <vector>\n+\n+namespace torch {\n+namespace nn {\n+\n+/// A class to store a type erasd module, whose `forward()` method can be\n+/// invoked, with dynamic type checking.\n+class AnyModule {\n+ public:\n+  /// A type-erased value.\n+  class Value;\n+\n+  /// Constructs an `AnyModule` from a `shared_ptr` to concrete module object.\n+  template <typename ModuleType>\n+  explicit AnyModule(std::shared_ptr<ModuleType> module);", "path": "torch/csrc/api/include/torch/nn/modules/any.h", "position": null, "original_position": 28, "commit_id": "d4df9b3f7c6dbe1c6852a1352f7fb1854defe454", "original_commit_id": "63d4d384533b5a16dea29d6c94d111d89415acbd", "user": {"login": "goldsborough", "id": 6429851, "node_id": "MDQ6VXNlcjY0Mjk4NTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/6429851?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goldsborough", "html_url": "https://github.com/goldsborough", "followers_url": "https://api.github.com/users/goldsborough/followers", "following_url": "https://api.github.com/users/goldsborough/following{/other_user}", "gists_url": "https://api.github.com/users/goldsborough/gists{/gist_id}", "starred_url": "https://api.github.com/users/goldsborough/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goldsborough/subscriptions", "organizations_url": "https://api.github.com/users/goldsborough/orgs", "repos_url": "https://api.github.com/users/goldsborough/repos", "events_url": "https://api.github.com/users/goldsborough/events{/privacy}", "received_events_url": "https://api.github.com/users/goldsborough/received_events", "type": "User", "site_admin": false}, "body": "Actually this just works naturally in C++, since the right hand side of an `=` expression will construct a new `AnyModule`, which is then move-assigned:\r\n```cpp\r\nstruct M : nn::Module {\r\n      explicit M(int value_) : value(value_) {}\r\n      int value;\r\n      int forward(float x) {\r\n        return x;\r\n      }\r\n    };\r\nAnyModule any;\r\nREQUIRE(any.is_empty());\r\nany = AnyModule(M{5});\r\nREQUIRE(!any.is_empty());\r\nREQUIRE(any.get<M>().value == 5);\r\n```", "created_at": "2018-05-21T16:56:56Z", "updated_at": "2018-11-23T15:44:24Z", "html_url": "https://github.com/pytorch/pytorch/pull/7508#discussion_r189649682", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/7508", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/189649682"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/7508#discussion_r189649682"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/7508"}}, "body_html": "<p>Actually this just works naturally in C++, since the right hand side of an <code>=</code> expression will construct a new <code>AnyModule</code>, which is then move-assigned:</p>\n<div class=\"highlight highlight-source-c++\"><pre><span class=\"pl-k\">struct</span> <span class=\"pl-en\">M</span> : nn::Module {\n      <span class=\"pl-k\">explicit</span> <span class=\"pl-en\">M</span>(<span class=\"pl-k\">int</span> value_) : value(value_) {}\n      <span class=\"pl-k\">int</span> value;\n      <span class=\"pl-k\">int</span> <span class=\"pl-en\">forward</span>(<span class=\"pl-k\">float</span> x) {\n        <span class=\"pl-k\">return</span> x;\n      }\n    };\nAnyModule any;\n<span class=\"pl-en\">REQUIRE</span>(any.is_empty());\nany = AnyModule(M{<span class=\"pl-c1\">5</span>});\n<span class=\"pl-en\">REQUIRE</span>(!any.is_empty());\n<span class=\"pl-en\">REQUIRE</span>(any.get&lt;M&gt;().value == 5);</pre></div>", "body_text": "Actually this just works naturally in C++, since the right hand side of an = expression will construct a new AnyModule, which is then move-assigned:\nstruct M : nn::Module {\n      explicit M(int value_) : value(value_) {}\n      int value;\n      int forward(float x) {\n        return x;\n      }\n    };\nAnyModule any;\nREQUIRE(any.is_empty());\nany = AnyModule(M{5});\nREQUIRE(!any.is_empty());\nREQUIRE(any.get<M>().value == 5);", "in_reply_to_id": 189625045}