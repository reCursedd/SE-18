{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/187787385", "pull_request_review_id": 119641105, "id": 187787385, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4Nzc4NzM4NQ==", "diff_hunk": "@@ -0,0 +1,200 @@\n+#include <catch.hpp>\n+\n+#include <torch/torch.h>\n+\n+#include <torch/detail/any.h>\n+#include <torch/nn/modules/any.h>\n+\n+#include <algorithm>\n+#include <string>\n+\n+using namespace torch;\n+using namespace torch::nn;\n+using namespace torch::detail;\n+\n+using Catch::StartsWith;\n+\n+TEST_CASE(\"any\") {\n+  SECTION(\"gets the correct value for the right type\") {\n+    SECTION(\"int\") {\n+      auto any = make_any(5);\n+      // const and non-const types have the same typeid()\n+      REQUIRE(any.try_get<int>() != nullptr);\n+      REQUIRE(any.try_get<const int>() != nullptr);\n+      REQUIRE(any.get<int>() == 5);\n+    }\n+    SECTION(\"const int\") {\n+      auto any = make_any(5);\n+      REQUIRE(any.try_get<const int>() != nullptr);\n+      REQUIRE(any.try_get<int>() != nullptr);\n+      REQUIRE(any.get<const int>() == 5);\n+    }\n+    SECTION(\"const char*\") {\n+      auto any = make_any(\"hello\");\n+      REQUIRE(any.try_get<const char*>() != nullptr);\n+      REQUIRE(any.get<const char*>() == std::string(\"hello\"));\n+    }\n+    SECTION(\"std::string\") {\n+      auto any = make_any(std::string(\"hello\"));\n+      REQUIRE(any.try_get<std::string>() != nullptr);\n+      REQUIRE(any.get<std::string>() == \"hello\");\n+    }\n+    SECTION(\"pointers\") {\n+      std::string s(\"hello\");\n+      std::string* p = &s;\n+      auto any = make_any(p);\n+      REQUIRE(any.try_get<std::string*>() != nullptr);\n+      REQUIRE(*any.get<std::string*>() == \"hello\");\n+    }\n+    SECTION(\"references\") {\n+      std::string s(\"hello\");\n+      const std::string& t = s;\n+      auto any = make_any(t);", "path": "test/cpp/api/any.cpp", "position": null, "original_position": 52, "commit_id": "d4df9b3f7c6dbe1c6852a1352f7fb1854defe454", "original_commit_id": "fe047cffdf6d61f87fd56f978cec286719ac01bc", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "This test seems a bit misleading. When you have a universal reference, it doesn't matter if you call it with `std::string s` or `std::string& s`, the deduced type for T is always `std::string&`. So you're not really exercising anything different here.", "created_at": "2018-05-13T02:19:43Z", "updated_at": "2018-11-23T15:43:59Z", "html_url": "https://github.com/pytorch/pytorch/pull/7508#discussion_r187787385", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/7508", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/187787385"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/7508#discussion_r187787385"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/7508"}}, "body_html": "<p>This test seems a bit misleading. When you have a universal reference, it doesn't matter if you call it with <code>std::string s</code> or <code>std::string&amp; s</code>, the deduced type for T is always <code>std::string&amp;</code>. So you're not really exercising anything different here.</p>", "body_text": "This test seems a bit misleading. When you have a universal reference, it doesn't matter if you call it with std::string s or std::string& s, the deduced type for T is always std::string&. So you're not really exercising anything different here."}